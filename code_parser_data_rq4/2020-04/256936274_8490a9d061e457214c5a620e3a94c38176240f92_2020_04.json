{
    "identifiers": [
        "java",
        "util",
        "sepTableAttri",
        "sepTableAttri",
        "isPrimeAtt",
        "fdMap",
        "arrOfAttributes",
        "candidate_keys",
        "retval",
        "entry",
        "fdMap",
        "entrySet",
        "non_prime_vals",
        "cur_key",
        "entry",
        "getKey",
        "cur_val",
        "entry",
        "getValue",
        "is_val_non_prime",
        "cur_val_ar",
        "cur_val",
        "split",
        "sub_cur_val",
        "cur_val_ar",
        "isPrimeAtt",
        "containsKey",
        "sub_cur_val",
        "is_val_non_prime",
        "non_prime_vals",
        "add",
        "sub_cur_val",
        "is_val_non_prime",
        "is_key_pSubOfCandi",
        "cur_key_ar_list",
        "Arrays",
        "asList",
        "cur_key",
        "split",
        "len_cur_key_ar",
        "cur_key_ar_list",
        "size",
        "candi_key",
        "candidate_keys",
        "candi_key",
        "size",
        "len_cur_key_ar",
        "candi_key",
        "containsAll",
        "cur_key_ar_list",
        "is_key_pSubOfCandi",
        "sepTableAttri",
        "containsKey",
        "cur_key",
        "present_list",
        "sepTableAttri",
        "get",
        "cur_key",
        "cur_non_prime_vals",
        "non_prime_vals",
        "present_list",
        "add",
        "cur_non_prime_vals",
        "sepTableAttri",
        "replace",
        "cur_key",
        "present_list",
        "sepTableAttri",
        "put",
        "cur_key",
        "non_prime_vals",
        "is_key_pSubOfCandi",
        "retval",
        "retval",
        "fdMap",
        "isPrimeAtt",
        "num_of_attributes",
        "utilObj",
        "retval",
        "ent",
        "fdMap",
        "entrySet",
        "non_prime_vals",
        "cur_key",
        "ent",
        "getKey",
        "utilObj",
        "initSubsetWithString",
        "cur_key",
        "utilObj",
        "isSuperKey",
        "fdMap",
        "num_of_attributes",
        "is_val_non_prime",
        "cur_str_val",
        "ent",
        "getValue",
        "ar_val",
        "cur_str_val",
        "split",
        "cur_val_ar",
        "ar_val",
        "isPrimeAtt",
        "containsKey",
        "cur_val_ar",
        "non_prime_vals",
        "add",
        "cur_val_ar",
        "is_val_non_prime",
        "is_val_non_prime",
        "retval",
        "sepTableAttri",
        "put",
        "cur_key",
        "non_prime_vals",
        "retval",
        "fdMap",
        "num_of_attributes",
        "utilObj",
        "retval",
        "ent",
        "fdMap",
        "entrySet",
        "vals",
        "cur_key",
        "ent",
        "getKey",
        "utilObj",
        "initSubsetWithString",
        "cur_key",
        "utilObj",
        "isSuperKey",
        "fdMap",
        "num_of_attributes",
        "cur_str_val",
        "ent",
        "getValue",
        "ar_val",
        "cur_str_val",
        "split",
        "cur_val_ar",
        "ar_val",
        "vals",
        "add",
        "cur_val_ar",
        "retval",
        "sepTableAttri",
        "put",
        "cur_key",
        "vals",
        "retval",
        "arrOfAttributes",
        "highestSatisfied",
        "candidate_keys",
        "cur_at",
        "arrOfAttributes",
        "cur_at",
        "siz",
        "sepTableAttri",
        "size",
        "siz",
        "highestSatisfied",
        "mapOfAttributes",
        "atts",
        "arrOfAttributes",
        "mapOfAttributes",
        "put",
        "atts",
        "table_id",
        "ent",
        "sepTableAttri",
        "entrySet",
        "cur_key",
        "ent",
        "getKey",
        "cur_val",
        "ent",
        "getValue",
        "table_id",
        "table_id",
        "table_id",
        "cur_key",
        "cur_str_ar",
        "cur_val",
        "mapOfAttributes",
        "get",
        "cur_str_ar",
        "cur_str_ar",
        "mapOfAttributes",
        "put",
        "cur_str_ar",
        "cur_key",
        "table_id",
        "ent",
        "mapOfAttributes",
        "entrySet",
        "ent",
        "getValue",
        "ent",
        "getKey",
        "candi_key",
        "candidate_keys",
        "used",
        "str_candi_key",
        "candi_key",
        "mapOfAttributes",
        "get",
        "str_candi_key",
        "used",
        "used",
        "str_candi_key",
        "candi_key",
        "str_candi_key",
        "isPrimeAtt",
        "fdMap",
        "arrOfAttributes",
        "candidate_keys",
        "highestSatisfied",
        "isSecondNF",
        "isPrimeAtt",
        "fdMap",
        "arrOfAttributes",
        "candidate_keys",
        "entry",
        "sepTableAttri",
        "entrySet",
        "entry",
        "getKey",
        "cur_list",
        "entry",
        "getValue",
        "non_prime_list_vals",
        "cur_list",
        "non_prime_list_vals",
        "isThirdNF",
        "fdMap",
        "isPrimeAtt",
        "arrOfAttributes",
        "length",
        "highestSatisfied",
        "entry",
        "sepTableAttri",
        "entrySet",
        "entry",
        "getKey",
        "cur_list",
        "entry",
        "getValue",
        "non_prime_list_vals",
        "cur_list",
        "non_prime_list_vals",
        "isBCNF",
        "fdMap",
        "arrOfAttributes",
        "length",
        "highestSatisfied",
        "entry",
        "sepTableAttri",
        "entrySet",
        "entry",
        "getKey",
        "cur_list",
        "entry",
        "getValue",
        "non_prime_list_vals",
        "cur_list",
        "non_prime_list_vals",
        "decomposeUtil",
        "arrOfAttributes",
        "highestSatisfied",
        "candidate_keys",
        "candidate_keys",
        "subset",
        "sub_set",
        "subset",
        "sub_set",
        "subset_plus",
        "fd_map",
        "flag_fd_applied",
        "cnt",
        "cnt",
        "not_new",
        "entry",
        "fd_map",
        "entrySet",
        "cur_key",
        "entry",
        "getKey",
        "split",
        "cur_val",
        "entry",
        "getValue",
        "found",
        "i",
        "i",
        "cur_key",
        "length",
        "i",
        "subset_plus",
        "contains",
        "cur_key",
        "i",
        "found",
        "found",
        "val_ar",
        "cur_val",
        "split",
        "cur_val_ar",
        "val_ar",
        "subset_plus",
        "contains",
        "cur_val_ar",
        "not_new",
        "subset_plus",
        "add",
        "cur_val_ar",
        "not_new",
        "subset_plus",
        "fd_map",
        "len",
        "subset",
        "size",
        "subset_plus",
        "i",
        "i",
        "len",
        "i",
        "subset_plus",
        "add",
        "subset",
        "get",
        "i",
        "findAttributeClosureUtil",
        "subset_plus",
        "fd_map",
        "fd_map",
        "num_of_attributes",
        "attribute_closure",
        "findAttributeClosure",
        "fd_map",
        "attribute_closure",
        "size",
        "num_of_attributes",
        "newSubsetStr",
        "subset_ar",
        "newSubsetStr",
        "split",
        "subset",
        "Arrays",
        "asList",
        "subset_ar",
        "arrOfAttributes",
        "fd_map",
        "ind",
        "sup_key_flag",
        "subset",
        "size",
        "isSuperKey",
        "fd_map",
        "arrOfAttributes",
        "length",
        "sup_key_flag",
        "subset1",
        "subset",
        "to_add",
        "i",
        "i",
        "candidate_keys",
        "size",
        "i",
        "flg_sub",
        "candidate_keys",
        "size",
        "candidate_keys",
        "get",
        "i",
        "containsAll",
        "subset",
        "candidate_keys",
        "remove",
        "i",
        "flg_sub",
        "candidate_keys",
        "size",
        "subset",
        "containsAll",
        "candidate_keys",
        "get",
        "i",
        "to_add",
        "flg_sub",
        "i",
        "to_add",
        "candidate_keys",
        "add",
        "subset1",
        "i",
        "ind",
        "i",
        "arrOfAttributes",
        "length",
        "i",
        "subset",
        "add",
        "arrOfAttributes",
        "i",
        "eachSubsetUtil",
        "arrOfAttributes",
        "fd_map",
        "i",
        "subset",
        "remove",
        "subset",
        "size",
        "arrOfAttributes",
        "fd_map",
        "subset",
        "candidate_keys",
        "index",
        "eachSubsetUtil",
        "arrOfAttributes",
        "fd_map",
        "index",
        "candidate_keys",
        "args",
        "scanObj",
        "scanObj1",
        "attributes_str",
        "scanObj",
        "nextLine",
        "arrOfAttributes",
        "attributes_str",
        "split",
        "fd_map",
        "scanObj1",
        "hasNextLine",
        "fd1",
        "scanObj1",
        "nextLine",
        "arOfFd1",
        "fd1",
        "split",
        "fd1",
        "equals",
        "fd_map",
        "containsKey",
        "arOfFd1",
        "tmp",
        "fd_map",
        "get",
        "arOfFd1",
        "tmp",
        "tmp",
        "arOfFd1",
        "fd_map",
        "put",
        "arOfFd1",
        "tmp",
        "fd_map",
        "put",
        "arOfFd1",
        "arOfFd1",
        "utilObj",
        "candidate_keys",
        "utilObj",
        "eachSubset",
        "arrOfAttributes",
        "fd_map",
        "candidate_keys",
        "isPrimeAttribute",
        "ar_list",
        "candidate_keys",
        "prime_att",
        "ar_list",
        "isPrimeAttribute",
        "put",
        "prime_att",
        "NF_Obj",
        "NF_Obj",
        "printHNF",
        "isPrimeAttribute",
        "fd_map",
        "arrOfAttributes",
        "candidate_keys"
    ],
    "literals": [
        "\",\"",
        "\",\"",
        "\",\"",
        "\",\"",
        "\"Current relation with attributes \"",
        "\" \"",
        "\"\\nMust be decomposed into \"",
        "\" tables,to covert it into \"",
        "\"NF\"",
        "\"R\"",
        "\" -> \"",
        "\" \"",
        "\" \"",
        "\"With \"",
        "\" as candidate key\"",
        "\"R\"",
        "\" -> \"",
        "\" \"",
        "\"With \"",
        "\" \"",
        "\" or \"",
        "\"As candidate key(s)\"",
        "\"Highest normal form that is satisfied by given set of attributes and FD's is \"",
        "\"1st Normal Form\"",
        "\"Partial dependecy over : \"",
        "\" that determine non prime attributes = \"",
        "\"Second Normal Form\"",
        "\"Transitive dependecy over non super key: \"",
        "\" that determine non prime attributes = \"",
        "\"Third Normal Form\"",
        "\"Dependecy over non super key: \"",
        "\" that determine attribute(s) = \"",
        "\"BCNF\"",
        "\",\"",
        "\",\"",
        "\",\"",
        "\"Enter list of attributes seperated by space\"",
        "\" \"",
        "\"Enter FD's(For FD's like 'AB->CD', enter 'A,B C,D' without quotes) :\"",
        "\" \"",
        "\"\"",
        "\",\"",
        "\"Candidate key(s) : \""
    ],
    "variables": [
        "sepTableAttri",
        "candidate_keys",
        "subset"
    ],
    "comments": [
        "System.out.println(\"Checking 2nd NF...........\");",
        "System.out.println(\"__key: \"+ cur_key + \" cur_val: \" + cur_val );",
        "System.out.println(\"hahhah\");",
        "boolean is_val_non_prime = true;",
        "if(isPrimeAtt.containsKey(cur_val_ar)==false){",
        "is_val_non_prime = false;",
        "}",
        "if(is_val_non_prime==false){",
        "}",
        "String[] str_ar = cur_val.split(\",\");",
        "",
        "",
        "",
        "",
        "",
        "",
        "System.out.println(\"Checking once again\");",
        "System.out.println(\"MAP key :\" + entry.getKey());",
        "System.out.println(\"MAP value :\" + entry.getValue());",
        "System.out.println(\"added \"+cur_val_ar);",
        "System.out.println(\"HAHAHA\");",
        "System.out.println(\"Subset+ : \" + subset_plus);",
        "System.out.println(\"Attri closure : \" + attribute_closure);",
        "System.out.println(\"Checking for subset :\" + subset);",
        "if(sup_key_flag==0)",
        "{",
        "}",
        "if(subset.size()>0)",
        "System.out.println(\"Enter number of FD's:\");",
        "int num_of_fd = scanObj.nextInt();",
        "For FD's like 'AB->CD', enter 'A,B C,D' without quotes",
        "String fd1 = String.join(\"\", fd1_as_whole);",
        "System.out.println(\"Entered string part1: \" + arOfFd1[0] + \" Entered string part2: \" + arOfFd1[1]);",
        "String[] arOfMapVal = arOfFd1[1].split(\",\",0);",
        "for(String cur_str_val:arOfMapVal){",
        "System.out.println(\"mapping \" + arOfFd1[0] + \"to \" + arOfFd1[1]);",
        "String newline = System.getProperty(\"line.separator\");",
        "}",
        "1 for prime",
        "System.out.println(\"** \"+prime_att);"
    ],
    "docstrings": [
        "for(Map.Entry<String,List<String>> ent : sepTableAttri.entrySet()){\n\t\t\t\t\t\tSystem.out.println(ent.getValue() + \"mp details +++ \" + ent.getKey());\n\t\t\t\t\t}",
        "/System.out.println(\"This is a super key\");\n\t\t\tif(candidate_keys.size()==0 || candidate_keys.get(0).size()>subset.size()){\n\t\t\t\tcandidate_keys.clear();\n\t\t\t\tArrayList<String> subset1 = new ArrayList<String>(subset);\n\t\t\t\tcandidate_keys.add(subset1);\n\t\t\t\t//System.out.println(\"Candi now1:\" + candidate_keys);\n\t\t\t}\n\t\t\telse if(candidate_keys.get(0).size()==subset.size()){\n\t\t\t\t//System.out.println(\"Candi now2:\" + candidate_keys);\n\t\t\t\tArrayList<String> subset1 = new ArrayList<String>(subset);\n\t\t\t\tcandidate_keys.add(subset1);\n\t\t\t\t//System.out.println(\"Candi now3:\" + candidate_keys);\n\n\t\t\t}"
    ],
    "functions": [
        "normalFormCheck",
        "isSecondNF",
        "isThirdNF",
        "isBCNF",
        "decomposeUtil",
        "printHNF",
        "module1Util",
        "module1Util",
        "findAttributeClosureUtil",
        "findAttributeClosure",
        "isSuperKey",
        "initSubsetWithString",
        "eachSubsetUtil",
        "eachSubset",
        "main"
    ],
    "classes": [
        "normalFormCheck",
        "module1Util",
        "module1"
    ]
}