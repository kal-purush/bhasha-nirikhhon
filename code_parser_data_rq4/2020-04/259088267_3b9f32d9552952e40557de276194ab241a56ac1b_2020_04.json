{
    "identifiers": [
        "pyimagesearch",
        "transform",
        "four_point_transform",
        "skimage",
        "filters",
        "threshold_local",
        "numpy",
        "np",
        "argparse",
        "cv2",
        "imutils",
        "cv2",
        "imread",
        "image",
        "shape",
        "image",
        "copy",
        "imutils",
        "resize",
        "image",
        "height",
        "cv2",
        "cvtColor",
        "image",
        "cv2",
        "COLOR_BGR2GRAY",
        "cv2",
        "GaussianBlur",
        "gray",
        "cv2",
        "Canny",
        "gray",
        "cv2",
        "imshow",
        "image",
        "cv2",
        "imshow",
        "edged",
        "cv2",
        "waitKey",
        "cv2",
        "destroyAllWindows",
        "cv2",
        "findContours",
        "edged",
        "copy",
        "cv2",
        "RETR_LIST",
        "cv2",
        "CHAIN_APPROX_SIMPLE",
        "imutils",
        "grab_contours",
        "cnts",
        "sorted",
        "cnts",
        "key",
        "cv2",
        "contourArea",
        "reverse",
        "c",
        "cnts",
        "cv2",
        "arcLength",
        "c",
        "cv2",
        "approxPolyDP",
        "c",
        "peri",
        "len",
        "approx",
        "approx",
        "cv2",
        "drawContours",
        "image",
        "screenCnt",
        "cv2",
        "imshow",
        "image",
        "cv2",
        "waitKey",
        "cv2",
        "destroyAllWindows",
        "four_point_transform",
        "orig",
        "screenCnt",
        "reshape",
        "ratio",
        "cv2",
        "imshow",
        "imutils",
        "resize",
        "orig",
        "height",
        "cv2",
        "imshow",
        "imutils",
        "resize",
        "warped",
        "height",
        "cv2",
        "waitKey",
        "cv2",
        "destroyAllWindows"
    ],
    "literals": [
        "\"images/page.jpg\"",
        "\"STEP 1: Edge Detection\"",
        "\"Image\"",
        "\"Edged\"",
        "\"STEP 2: Find contours of paper\"",
        "\"Outline\"",
        "\"STEP 3: Apply perspective transform\"",
        "\"Original\"",
        "\"Scanned\""
    ],
    "variables": [
        "image",
        "ratio",
        "orig",
        "image",
        "gray",
        "gray",
        "edged",
        "cnts",
        "cnts",
        "cnts",
        "peri",
        "approx",
        "screenCnt",
        "warped"
    ],
    "comments": [
        "import the necessary packages",
        "load the image and compute the ratio of the old height",
        "to the new height, clone it, and resize it",
        "convert the image to grayscale, blur it, and find edges",
        "in the image",
        "show the original image and the edge detected image",
        "find the contours in the edged image, keeping only the",
        "largest ones, and initialize the screen contour",
        "loop over the contours",
        "approximate the contour",
        "if our approximated contour has four points, then we",
        "can assume that we have found our screen",
        "show the contour (outline) of the piece of paper",
        "apply the four point transform to obtain a top-down",
        "view of the original image",
        "convert the warped image to grayscale, then threshold it",
        "to give it that 'black and white' paper effect",
        "warped = cv2.cvtColor(warped, cv2.COLOR_BGR2GRAY)",
        "T = threshold_local(warped, 11, offset=10, method=\"gaussian\")",
        "warped = (warped > T).astype(\"uint8\") * 255",
        "show the original and scanned images"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}