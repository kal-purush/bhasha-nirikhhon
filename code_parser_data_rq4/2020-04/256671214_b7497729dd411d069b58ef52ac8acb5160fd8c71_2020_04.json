{
    "identifiers": [
        "opt",
        "opt",
        "opt",
        "opt",
        "srcOb",
        "i",
        "arr",
        "key",
        "srcOb",
        "srcOb",
        "key",
        "val",
        "srcOb",
        "key",
        "source",
        "key",
        "val",
        "source",
        "w",
        "h",
        "container",
        "parseInt",
        "containerStyles",
        "parseInt",
        "containerStyles",
        "containerStyles",
        "containerStyles",
        "containerStyles",
        "containerStyles",
        "containerStyles",
        "paddingTop",
        "parseInt",
        "paddingTop",
        "paddingBottom",
        "parseInt",
        "paddingBottom",
        "paddingLeft",
        "parseInt",
        "paddingLeft",
        "paddingRight",
        "parseInt",
        "paddingRight",
        "minW",
        "paddingLeft",
        "paddingRight",
        "minH",
        "paddingTop",
        "paddingBottom",
        "minW",
        "w",
        "minH",
        "h",
        "widthRatio",
        "heightRatio",
        "new_width",
        "videoRatio",
        "new_height",
        "videoRatio",
        "new_width",
        "new_height"
    ],
    "literals": [
        "'loadedmetadata'",
        "'canplay'",
        "'resize'",
        "'source'",
        "'timeupdate'",
        "'click'",
        "'inline-block'",
        "'none'",
        "'click'",
        "'none'",
        "'inline-block'",
        "'object-fit'",
        "'width'",
        "'height'",
        "'box-sizing'",
        "'border-box'",
        "'padding-top'",
        "'padding-bottom'",
        "'padding-left'",
        "'padding-right'",
        "'px'",
        "'px'"
    ],
    "variables": [
        "key",
        "val",
        "source",
        "w",
        "h",
        "videoRatio",
        "container",
        "containerStyles",
        "minW",
        "minH",
        "paddingTop",
        "paddingBottom",
        "paddingLeft",
        "paddingRight",
        "widthRatio",
        "heightRatio",
        "new_width",
        "minW",
        "new_height",
        "new_height",
        "minH",
        "new_width"
    ],
    "comments": [
        "Define Bideo constructor on the global object",
        "Plugin options",
        "The Video element",
        "Approximate Loading Rate",
        "",
        "The value will be a number like 0.8",
        "which means to load 4 seconds of the video",
        "it takes 5 seconds. If the number is super low",
        "like 0.2 (regular 3g connections) then you can",
        "decide whether to play the video or not.",
        "This behaviour will be controller with",
        "the `acceptableLoadingRate` option.",
        "Methods to which `this` will be bound",
        "Time at which video is initialized",
        "Initialize and setup the video in DOM`",
        "If not set then set to an empty object",
        "Video element",
        "Meta data event",
        "Fired when enough has been buffered to begin the video",
        "self.videoEl.readyState === 4 (HAVE_ENOUGH_DATA)",
        "Play the video when enough has been buffered",
        "If resizing is required (resize video as window/container resizes)",
        "Start time of video initialization",
        "Create `source` for video",
        "Set all the attribute key=val supplied in `src` option",
        "Called once video metadata is available",
        "",
        "Also called when window/container is resized",
        "IE/Edge still don't support object-fit: cover",
        "Video's intrinsic dimensions",
        "Intrinsic ratio",
        "Will be more than 1 if W > H and less if H > W",
        "Get the container DOM element and its styles",
        "",
        "Also calculate the min dimensions required (this will be",
        "the container dimentions)",
        "If !border-box then add paddings to width and height",
        "What's the min:intrinsic dimensions",
        "",
        "The idea is to get which of the container dimension",
        "has a higher value when compared with the equivalents",
        "of the video. Imagine a 1200x700 container and",
        "1000x500 video. Then in order to find the right balance",
        "and do minimum scaling, we have to find the dimension",
        "with higher ratio.",
        "",
        "Ex: 1200/1000 = 1.2 and 700/500 = 1.4 - So it is best to",
        "scale 500 to 700 and then calculate what should be the",
        "right width. If we scale 1000 to 1200 then the height",
        "will become 600 proportionately.",
        "Whichever ratio is more, the scaling",
        "has to be done over that dimension"
    ],
    "docstrings": [
        "* Full Background Video\n *\n * More info on Audio/Video Media Events/Attributes/Methods\n * - https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\n * - http://www.w3schools.com/tags/ref_av_dom.asp"
    ],
    "functions": [],
    "classes": []
}