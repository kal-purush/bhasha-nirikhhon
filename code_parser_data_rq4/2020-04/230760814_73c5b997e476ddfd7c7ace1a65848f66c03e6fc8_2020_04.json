{
    "identifiers": [
        "top",
        "elgong",
        "NIO",
        "ChatRoom",
        "java",
        "io",
        "java",
        "net",
        "InetSocketAddress",
        "java",
        "nio",
        "ByteBuffer",
        "java",
        "nio",
        "channels",
        "java",
        "nio",
        "charset",
        "Charset",
        "java",
        "util",
        "PORT",
        "port",
        "PORT",
        "port",
        "selector",
        "Selector",
        "open",
        "serverSocketChannel",
        "ServerSocketChannel",
        "open",
        "serverSocketChannel",
        "bind",
        "PORT",
        "serverSocketChannel",
        "configureBlocking",
        "serverSocketChannel",
        "register",
        "selector",
        "SelectionKey",
        "OP_ACCEPT",
        "numOfChannelOk",
        "selector",
        "select",
        "numOfChannelOk",
        "selectionKeys",
        "selector",
        "selectedKeys",
        "selectionKey",
        "selectionKeys",
        "selectionKey",
        "isAcceptable",
        "acceptHandler",
        "serverSocketChannel",
        "selector",
        "selectionKey",
        "isReadable",
        "readHandler",
        "selectionKey",
        "selector",
        "e",
        "e",
        "printStackTrace",
        "selectionKeys",
        "remove",
        "selectionKey",
        "selectionKey",
        "selector",
        "socketChannel",
        "selectionKey",
        "channel",
        "byteBuffer",
        "ByteBuffer",
        "allocate",
        "message",
        "socketChannel",
        "read",
        "byteBuffer",
        "byteBuffer",
        "flip",
        "message",
        "append",
        "Charset",
        "forName",
        "decode",
        "byteBuffer",
        "socketChannel",
        "register",
        "selector",
        "SelectionKey",
        "OP_READ",
        "message",
        "length",
        "broadCast",
        "selector",
        "socketChannel",
        "message",
        "toString",
        "selector",
        "sendDataChannel",
        "message",
        "selectionKeySet",
        "selector",
        "keys",
        "selectionKey",
        "selectionKeySet",
        "channel",
        "selectionKey",
        "channel",
        "channel",
        "channel",
        "sendDataChannel",
        "channel",
        "write",
        "Charset",
        "forName",
        "encode",
        "message",
        "e",
        "e",
        "printStackTrace",
        "serverSocketChannel",
        "selector",
        "socketChannel",
        "serverSocketChannel",
        "accept",
        "socketChannel",
        "configureBlocking",
        "socketChannel",
        "register",
        "selector",
        "SelectionKey",
        "OP_READ",
        "socketChannel",
        "write",
        "Charset",
        "forName",
        "encode",
        "args",
        "start",
        "e",
        "e",
        "printStackTrace"
    ],
    "literals": [
        "\"UTF-8\"",
        "\"UTF-8\"",
        "\"UTF-8\"",
        "\"---加入聊天 ！！！\""
    ],
    "variables": [],
    "comments": [
        "1, 创建选择器",
        "2, 创建ServerSocketChannel，并绑定监听端口",
        "3, 将Channel设置为非阻塞模式",
        "4, 将Channel注册到Selector上，监听连接事件",
        "5, 循环调用Selector的select方法，检测就绪情况",
        "获取准备好的通道数量",
        "6, 调用selectedKeys方法获取就绪channel集合",
        "7, 判断就绪事件种类，调用业务处理方法",
        "8, 根据业务需要决定是否再次注册监听事件，重复执行第三步操作",
        "连接事件",
        "可读事件",
        "移除",
        "先获取就绪通道",
        "分配缓冲区",
        "读取 数据",
        "转换为读模式",
        "将channel再次注册到selector上，监听他的可读事件",
        "每注册一次，只监控一次",
        "将客户端发送的请求信息 广播给其他客户端",
        "广播给其他客户端",
        "获取到所有已接入的客户端channel",
        "循环向所有channel广播信息",
        "剔除发消息的客户端",
        "非消息发送者",
        "如果要是接入事件，创建socketChannel",
        "将socketChannel设置为非阻塞工作模式",
        "将channel注册到selector上， 开始监听可读事件",
        "回复客户端提示信息"
    ],
    "docstrings": [
        "*  启动聊天服务功能",
        "*\n     * @param serverSocketChannel\n     * @param selector\n     * @throws IOException",
        "* 内部测试类"
    ],
    "functions": [
        "CharRoomServer",
        "start",
        "readHandler",
        "broadCast",
        "acceptHandler",
        "main"
    ],
    "classes": [
        "CharRoomServer",
        "main"
    ]
}