{
    "identifiers": [
        "org",
        "apache",
        "calcite",
        "test",
        "enumerable",
        "org",
        "apache",
        "calcite",
        "adapter",
        "java",
        "ReflectiveSchema",
        "org",
        "apache",
        "calcite",
        "config",
        "CalciteConnectionProperty",
        "org",
        "apache",
        "calcite",
        "config",
        "Lex",
        "org",
        "apache",
        "calcite",
        "sql",
        "fun",
        "SqlStdOperatorTable",
        "org",
        "apache",
        "calcite",
        "test",
        "CalciteAssert",
        "org",
        "apache",
        "calcite",
        "test",
        "JdbcTest",
        "org",
        "junit",
        "Test",
        "Test",
        "tester",
        "query",
        "withRel",
        "builder",
        "builder",
        "scan",
        "scan",
        "antiJoin",
        "builder",
        "equals",
        "builder",
        "field",
        "builder",
        "field",
        "project",
        "builder",
        "field",
        "builder",
        "field",
        "build",
        "returnsUnordered",
        "Test",
        "tester",
        "query",
        "withRel",
        "builder",
        "builder",
        "scan",
        "scan",
        "antiJoin",
        "builder",
        "builder",
        "equals",
        "builder",
        "field",
        "builder",
        "field",
        "builder",
        "call",
        "SqlStdOperatorTable",
        "GREATER_THAN",
        "builder",
        "field",
        "builder",
        "field",
        "project",
        "builder",
        "field",
        "builder",
        "field",
        "build",
        "returnsUnordered",
        "Test",
        "salesDeptNo",
        "tester",
        "query",
        "withRel",
        "builder",
        "builder",
        "scan",
        "builder",
        "notEquals",
        "builder",
        "field",
        "builder",
        "literal",
        "salesDeptNo",
        "scan",
        "builder",
        "equals",
        "builder",
        "field",
        "builder",
        "literal",
        "salesDeptNo",
        "antiJoin",
        "builder",
        "equals",
        "builder",
        "field",
        "builder",
        "field",
        "project",
        "builder",
        "field",
        "builder",
        "field",
        "build",
        "returnsUnordered",
        "forceDecorrelate",
        "schema",
        "CalciteAssert",
        "that",
        "CalciteConnectionProperty",
        "LEX",
        "Lex",
        "JAVA",
        "CalciteConnectionProperty",
        "FORCE_DECORRELATE",
        "forceDecorrelate",
        "withSchema",
        "schema"
    ],
    "literals": [
        "\"?\"",
        "\"s\"",
        "\"depts\"",
        "\"d\"",
        "\"s\"",
        "\"emps\"",
        "\"e\"",
        "\"d\"",
        "\"deptno\"",
        "\"e\"",
        "\"deptno\"",
        "\"deptno\"",
        "\"name\"",
        "\"deptno=30; name=Marketing\"",
        "\"deptno=40; name=HR\"",
        "\"?\"",
        "\"s\"",
        "\"emps\"",
        "\"e\"",
        "\"s\"",
        "\"emps\"",
        "\"e2\"",
        "\"e\"",
        "\"deptno\"",
        "\"e2\"",
        "\"deptno\"",
        "\"e2\"",
        "\"salary\"",
        "\"e\"",
        "\"salary\"",
        "\"name\"",
        "\"salary\"",
        "\"name=Theodore; salary=11500.0\"",
        "\"name=Eric; salary=8000.0\"",
        "\"?\"",
        "\"s\"",
        "\"emps\"",
        "\"empOther\"",
        "\"empOther\"",
        "\"deptno\"",
        "\"s\"",
        "\"emps\"",
        "\"empSales\"",
        "\"empSales\"",
        "\"deptno\"",
        "\"empOther\"",
        "\"commission\"",
        "\"empSales\"",
        "\"commission\"",
        "\"empid\"",
        "\"name\"",
        "\"empid=200; name=Eric\"",
        "\"s\""
    ],
    "variables": [],
    "comments": [
        "Retrieve departments without employees. Equivalent SQL:",
        "SELECT d.deptno, d.name FROM depts d",
        "WHERE NOT EXISTS (SELECT 1 FROM emps e WHERE e.deptno = d.deptno)",
        "Retrieve employees with the top salary in their department. Equivalent SQL:",
        "SELECT e.name, e.salary FROM emps e",
        "WHERE NOT EXISTS (",
        "SELECT 1 FROM emps e2",
        "WHERE e.deptno = e2.deptno AND e2.salary > e.salary)",
        "Retrieve employees from any department other than Sales (deptno 10) whose",
        "commission is different from any Sales employee commission. Since there",
        "is a Sales employee with null commission, the goal is to validate that antiJoin",
        "behaves as a NOT EXISTS (and returns results), and not as a NOT IN (which would",
        "not return any result due to its null handling). Equivalent SQL:",
        "SELECT empOther.empid, empOther.name FROM emps empOther",
        "WHERE empOther.deptno <> 10 AND NOT EXISTS",
        "(SELECT 1 FROM emps empSales",
        "WHERE empSales.deptno = 10 AND empSales.commission = empOther.commission)",
        "End EnumerableJoinTest.java"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Unit tests for the different Enumerable Join implementations.",
        "Test case for\n   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-2968\">[CALCITE-2968]\n   * New AntiJoin relational expression</a>.",
        "Test case for\n   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-2968\">[CALCITE-2968]\n   * New AntiJoin relational expression</a>.",
        "Test case for\n   * <a href=\"https://issues.apache.org/jira/browse/CALCITE-2968\">[CALCITE-2968]\n   * New AntiJoin relational expression</a>."
    ],
    "functions": [
        "equiAntiJoin",
        "nonEquiAntiJoin",
        "equiAntiJoinWithNullValues",
        "tester"
    ],
    "classes": [
        "EnumerableJoinTest"
    ]
}