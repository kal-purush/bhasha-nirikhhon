{
    "identifiers": [
        "abc",
        "functools",
        "typing",
        "cast",
        "Callable",
        "TypeVar",
        "TypeVar",
        "requires",
        "implementation",
        "T",
        "Callable",
        "T",
        "T",
        "func",
        "T",
        "T",
        "getattr",
        "func",
        "alternatives",
        "insert",
        "requires",
        "implementation",
        "setattr",
        "func",
        "alternatives",
        "func",
        "decorator",
        "abc",
        "ABCMeta",
        "mcls",
        "name",
        "bases",
        "kwargs",
        "__new__",
        "mcls",
        "name",
        "bases",
        "kwargs",
        "name",
        "name",
        "implemented_by",
        "getattr",
        "cls",
        "name",
        "AttributeError",
        "format",
        "name",
        "cls",
        "getattr",
        "value",
        "hasattr",
        "value",
        "all_names",
        "name",
        "all_names",
        "has_some_implementation",
        "name",
        "getattr",
        "cls",
        "name",
        "hasattr",
        "value",
        "alt_name",
        "impl",
        "getattr",
        "value",
        "has_some_implementation",
        "alt_name",
        "impl",
        "implemented_by",
        "update",
        "next_implemented_by",
        "next_implemented_by",
        "alt_name",
        "alt_name",
        "keys",
        "hasattr",
        "cls",
        "alt_name",
        "bases",
        "all_names",
        "update",
        "getattr",
        "all_names",
        "update",
        "alt_name",
        "alt_name",
        "_",
        "getattr",
        "items",
        "find_next_implementations",
        "all_names",
        "name",
        "name",
        "all_names",
        "has_some_implementation",
        "name",
        "name",
        "default_impl",
        "implemented_by",
        "items",
        "getattr",
        "cls",
        "name",
        "impl",
        "T",
        "T",
        "args",
        "kwargs",
        "impl",
        "args",
        "kwargs",
        "functools",
        "update_wrapper",
        "impl_of_abstract",
        "abstract_method",
        "cast",
        "T",
        "impl_of_abstract",
        "wrap_scope",
        "default_impl",
        "abstract_method",
        "_abstract_alternatives_",
        "setattr",
        "cls",
        "name",
        "impl_of_abstract",
        "cls",
        "__abstractmethods__",
        "abstracts",
        "implemented_by",
        "cls"
    ],
    "literals": [
        "'T'",
        "'_abstract_alternatives_'",
        "'_abstract_alternatives_'",
        "'A method named \\'{}\\' was listed as a possible '",
        "'implementation alternative but it does not exist in the '",
        "'definition of {!r}.'",
        "'__isabstractmethod__'",
        "'_abstract_alternatives_'",
        "'_abstract_alternatives_'",
        "'_abstract_alternatives_'",
        "'__abstractmethods__'",
        "'_implemented_by_'"
    ],
    "variables": [
        "T",
        "alternatives",
        "cls",
        "implemented_by",
        "value",
        "next_implemented_by",
        "value",
        "next_implemented_by",
        "name",
        "all_names",
        "abstracts",
        "abstract_method",
        "impl_of_abstract",
        "impl_of_abstract",
        "_abstract_alternatives_",
        "cls",
        "_implemented_by_"
    ],
    "comments": [
        "Copyright 2019 The Cirq Developers",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "https://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Find all abstract methods (methods that haven't been implemented or",
        "don't have an implemented alternative).",
        "Replace the abstract methods with their default implementations.",
        "If __abstractmethods__ is non-empty, this is an abstract class and",
        "can't be instantiated.",
        "Add to the set made by ABCMeta"
    ],
    "docstrings": [
        "\"\"\"A more flexible abstract base class metaclass ABCMetaImplementAnyOneOf.\"\"\"",
        "\"\"\"A decorator indicating an abstract method with an alternative default\n    implementation.\n\n    This decorator may be used multiple times on the same function to specify\n    multiple alternatives.  If multiple alternatives are available, the\n    outermost (lowest line number) alternative is used.\n\n    Usage:\n        class Parent(metaclass=ABCMetaImplementAnyOneOf):\n            def _default_do_a_using_b(self, ...):\n                ...\n            def _default_do_a_using_c(self, ...):\n                ...\n\n            # Abstract method with alternatives\n            @alternative(requires='do_b', implementation=_default_do_a_using_b)\n            @alternative(requires='do_c', implementation=_default_do_a_using_c)\n            def do_a(self, ...):\n                '''Method docstring.'''\n\n            # Abstract or concrete methods `do_b` and `do_c`:\n            ...\n\n        class Child(Parent):\n            def do_b(self):\n                ...\n\n        child = Child()\n        child.do_a(...)\n\n    Arguments:\n        requires: The name of another abstract method in the same class that\n            `implementation` needs to be implemented.\n        implementation: A function that uses the method named by requires to\n            implement the default behavior of the wrapped abstract method.  This\n            function must have the same signature as the decorated function.\n    \"\"\"",
        "\"\"\"A metaclass extending `abc.ABCMeta` for defining abstract base classes\n    (ABCs) with more flexibility in which methods must be overridden.\n\n    Use this metaclass in the same way as `abc.ABCMeta` to create an ABC.\n\n    In addition to the decorators in the` abc` module, the decorator\n    `@alternative(...)` may be used.\n    \"\"\""
    ],
    "functions": [
        "alternative",
        "decorator",
        "__new__",
        "has_some_implementation",
        "find_next_implementations",
        "wrap_scope",
        "impl_of_abstract"
    ],
    "classes": [
        "ABCMetaImplementAnyOneOf"
    ]
}