{
    "identifiers": [
        "chalk",
        "fs",
        "json5",
        "klawSync",
        "flatten",
        "basename",
        "relative",
        "ts",
        "getLanguageService",
        "getSources",
        "languageService",
        "findUnusedFields",
        "sources",
        "languageService",
        "ts",
        "others",
        "ts",
        "json5",
        "fs",
        "others",
        "others",
        "others",
        "klawSync",
        "item",
        "item",
        "item",
        "item",
        "item",
        "ts",
        "sourceFiles",
        "_",
        "fileName",
        "fs",
        "fileName",
        "ts",
        "fs",
        "fileName",
        "process",
        "options",
        "opts",
        "ts",
        "opts",
        "ts",
        "ts",
        "ts",
        "ts",
        "compare",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "languageService",
        "ts",
        "ts",
        "process",
        "arg",
        "fs",
        "arg",
        "fs",
        "arg",
        "arg",
        "arg",
        "chalk",
        "chalk",
        "process",
        "languageService",
        "languageService",
        "f",
        "f",
        "f",
        "a",
        "b",
        "compare",
        "basename",
        "a",
        "basename",
        "b",
        "opts",
        "ts",
        "ts",
        "ts",
        "languageService",
        "sourceFile",
        "rootNode",
        "refs",
        "rootNode",
        "flatten",
        "refs",
        "references",
        "r",
        "r",
        "fn",
        "fn",
        "fileName",
        "fileNames",
        "fs",
        "fileName",
        "fragmentName",
        "lines",
        "l",
        "l",
        "searchString",
        "line",
        "lines",
        "line",
        "searchString",
        "loc",
        "line",
        "column",
        "relative",
        "process",
        "loc",
        "loc",
        "sourceFile",
        "loc",
        "path",
        "loc",
        "loc",
        "chalk",
        "fragmentName",
        "chalk",
        "path",
        "line",
        "line",
        "ts",
        "ts",
        "node",
        "node",
        "node",
        "node",
        "ts",
        "node",
        "node",
        "ts",
        "node",
        "child",
        "node",
        "child",
        "ts",
        "node",
        "node",
        "child",
        "node",
        "child",
        "ts",
        "node",
        "node",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "node",
        "path",
        "property",
        "node",
        "property",
        "propertyName",
        "propertyName",
        "propertyName",
        "path",
        "propertyName",
        "fieldPath",
        "node",
        "property",
        "findReferencesResult",
        "fieldPath",
        "findReferencesResult",
        "references",
        "chalk",
        "fieldPath",
        "property",
        "ts",
        "typeNodes",
        "fieldPath",
        "typeNodes",
        "path",
        "propertyName",
        "sources",
        "ts",
        "languageService",
        "ts",
        "ts",
        "sources",
        "context",
        "file",
        "ts",
        "file",
        "node",
        "ts",
        "node",
        "node",
        "node",
        "fragmentName",
        "node",
        "CheckContext",
        "ignoredFragments",
        "fragmentName",
        "file",
        "node",
        "node",
        "context",
        "main"
    ],
    "literals": [
        "\"chalk\"",
        "\"fs\"",
        "\"json5\"",
        "\"klaw-sync\"",
        "\"lodash\"",
        "\"path\"",
        "\"typescript\"",
        "string",
        "string",
        "\"dimensions\"",
        "\"image\"",
        "\"partner/locations/city\"",
        "\"partner/profile/id\"",
        "\"name\"",
        "\"filtered_artworks/aggregations/counts/name\"",
        "\"filtered_artworks/aggregations/counts/id\"",
        "\"images/placeholder\"",
        "\"images/placeholder\"",
        "\"images/deepZoom/Image\"",
        "\"./tsconfig.json\"",
        "\".\"",
        "\"./src\"",
        "\".ts\"",
        "\".tsx\"",
        "\"0\"",
        "src/__generated__/${arg}.graphql.ts",
        "src/__generated__/${arg}.graphql.ts",
        "\"Bad argument\"",
        "\"arg\"",
        "\"Try a relay fragment name or the path of a generated relay typings file.\"",
        "\"src/__generated__/ArtworkImageBrowser_artwork.graphql.ts\"",
        "\"__generated__\"",
        "\"Query.graphql.ts\"",
        "string",
        "string",
        "Can't find references to fragment ${rootNode.name.getStart()}",
        "\".graphql.ts\"",
        "string",
        "\"\\n\"",
        "\"fragment \"",
        "\" on \"",
        "\":\"",
        "\":\"",
        "\"⚠️ \"",
        "\"→\"",
        "\"  \"",
        "\"\\n\"",
        "string",
        "\"bad node\"",
        "Ignoring node of kind ${\n              ts.SyntaxKind[node.kind]\n            } at path ${path.join(\"/\")}.",
        "\"/\"",
        "'\"'",
        "\"__typename\"",
        "\"id\"",
        "\"/\"",
        "No references found to field at path ${fieldPath}, this is a developer error",
        "${chalk.gray(\"Possibly unused field\")} ${fieldPath}",
        "\"Possibly unused field\"",
        "️⁉️ Expected exactly one type node for child property at path ${fieldPath}"
    ],
    "variables": [
        "languageService",
        "sources",
        "ignoredFragments",
        "sourceFiles",
        "compare",
        "arg",
        "refs",
        "fileNames",
        "loc",
        "lines",
        "searchString",
        "line",
        "column",
        "path",
        "propertyName",
        "fieldPath",
        "findReferencesResult",
        "typeNodes",
        "fragmentName"
    ],
    "comments": [
        "Create the language service files",
        "get all files",
        "find definition of fragment",
        "ignore meta properties",
        "stop if this isn't a top-level type declaration e.g. `type Banana = { ... }`",
        "stop if this isn't a fragment type e.g. we want Reject_order but not Reject_order$ref"
    ],
    "docstrings": [
        "* Temporary way to ignore false positives due to indirect referencing"
    ],
    "functions": [
        "main",
        "getLanguageService",
        "getSources",
        "check",
        "reportErrors",
        "checkTypeNode",
        "findUnusedFields"
    ],
    "classes": [
        "CheckContext"
    ]
}