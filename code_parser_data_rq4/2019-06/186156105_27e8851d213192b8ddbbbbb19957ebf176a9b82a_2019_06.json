{
    "identifiers": [
        "itertools",
        "chain",
        "repeat",
        "unittest",
        "mock",
        "call",
        "Mock",
        "typing",
        "Any",
        "Callable",
        "exception",
        "AllowsException",
        "side_effect",
        "SideEffectBuilder",
        "mock_subject",
        "Mock",
        "mock_subject",
        "side_effect_builder_grammar",
        "Mock",
        "side_effect_builder_grammar",
        "apply_to",
        "_mock_subject",
        "method_name",
        "builder",
        "method_name",
        "builder",
        "SideEffectBuilder",
        "method_name",
        "_method_name",
        "AllowsException",
        "method_name",
        "method_name",
        "_set_method_name",
        "method_name",
        "args",
        "kwargs",
        "_builder",
        "with_call_args",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "_builder",
        "with_call_args",
        "args",
        "kwargs",
        "return_value",
        "_builder",
        "with_return_value",
        "return_value",
        "return_value",
        "_builder",
        "with_return_value",
        "return_value",
        "raised_exception",
        "_builder",
        "with_raised_exception",
        "raised_exception",
        "raised_exception",
        "_builder",
        "with_raised_exception",
        "raised_exception",
        "effect",
        "Callable",
        "_builder",
        "with_effect",
        "effect",
        "mock_subject",
        "Mock",
        "Mock",
        "_get_method_from_mock",
        "mock_subject",
        "_builder",
        "build",
        "side_effect",
        "merge",
        "mock_method",
        "side_effect",
        "mock_subject",
        "mock_subject",
        "_method_name",
        "mock_subject",
        "_method_name",
        "split",
        "method",
        "method_path",
        "getattr",
        "mock_subject",
        "method",
        "mock_subject"
    ],
    "literals": [
        "\"SideEffectBuilderGrammar\"",
        "\"SideEffectBuilderGrammar\"",
        "\"Cannot set mutliple method names in one effect\"",
        "\".\""
    ],
    "variables": [
        "_mock_subject",
        "_method_name",
        "_builder",
        "_method_name",
        "mock_method",
        "side_effect",
        "mock_method",
        "side_effect",
        "method_path",
        "mock_subject"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    MockExtensionGrammar is created by the ``allow`` factory.\n\n    This enables grammar for creating and binding a mock side effect like:\n\n    *allow* **<Mock>** *to* **<Have Side Effect>**\n    \"\"\"",
        "\"\"\"\n    SideEffectBuilderGrammar is initiated by the ``return_value``, ``raise_exception``, ``recieve_method``, ``be_called_with``, ``have_effect`` factory methods.\n\n    The grammar is chainable, but a side effect can have only one effect (return, exception, effect) per grammar expression. However, side effects will automatically combine if multiple expressions are applied to the same mock/method.\n\n    This enables grammar for building the side effect like:\n\n    *allow* **<Mock>** *to* ...\n\n    *be_called_with* **<Args>** *on_method* **<Name>** *and_return_value* **<Value>**\n    \"\"\"",
        "\"\"\"\n        Specify method name on the mocked object which will have the side effect applied.\n\n        allow(my_mock).to(return_value(5).on_method('foo'))\n        assert my_mock.foo() == 5\n        \"\"\"",
        "\"\"\"\n        Specify call args that trigger the side effect. Alias ``when_called_with``\n        \"\"\"",
        "\"\"\"\n        Add a return value (or a list of return values to cycle through). Alias ``and_return``\n        \"\"\"",
        "\"\"\"\n        Raise an exception. Alias ``and_raise``\n        \"\"\"",
        "\"\"\"\n        Apply a generic effect when invoking the side effect.\n        \"\"\"",
        "\"\"\"\n        Apply the built side effect to the given Python Mock.\n        \"\"\""
    ],
    "functions": [
        "to",
        "_set_method_name",
        "on_method",
        "called_with",
        "when_called_with",
        "and_return",
        "and_return_value",
        "and_raise",
        "and_raise_exception",
        "with_effect",
        "apply_to",
        "_get_method_from_mock"
    ],
    "classes": [
        "MockExtensionGrammar",
        "SideEffectBuilderGrammar"
    ]
}