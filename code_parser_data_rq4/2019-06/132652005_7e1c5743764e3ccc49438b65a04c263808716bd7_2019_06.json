{
    "identifiers": [
        "argparse",
        "gzip",
        "collections",
        "defaultdict",
        "pandas",
        "pd",
        "json",
        "sys",
        "numpy",
        "np",
        "splice_junctions",
        "annotated_junctions",
        "defaultdict",
        "defaultdict",
        "junction",
        "splice_junctions",
        "junction",
        "get",
        "junction",
        "get",
        "junction",
        "get",
        "junction",
        "get",
        "format",
        "chrom",
        "start",
        "stop",
        "junction_string",
        "annotated_junctions",
        "pos",
        "start",
        "stop",
        "format",
        "chrom",
        "pos",
        "sample",
        "count",
        "samptimes",
        "items",
        "annotated_counts",
        "pos",
        "get",
        "sample",
        "existing_count_for_sample_at_pos",
        "annotated_counts",
        "pos",
        "count",
        "existing_count_for_sample_at_pos",
        "count",
        "existing_count_for_sample_at_pos",
        "annotated_counts",
        "pos",
        "count",
        "annotated_counts",
        "splice_junctions",
        "annotated_counts",
        "sample_ids",
        "annotated_junctions",
        "format",
        "join",
        "s",
        "strip",
        "s",
        "sample_ids",
        "join",
        "format",
        "s",
        "strip",
        "s",
        "sample_ids",
        "junction",
        "splice_junctions",
        "defaultdict",
        "junction",
        "get",
        "junction",
        "get",
        "junction",
        "get",
        "junction",
        "get",
        "junction",
        "get",
        "junction",
        "get",
        "junction",
        "get",
        "junction",
        "get",
        "samptimes",
        "get",
        "s",
        "s",
        "sample_ids",
        "annotated_counts",
        "get",
        "format",
        "chrom",
        "start",
        "annotated_counts",
        "get",
        "format",
        "chrom",
        "stop",
        "format",
        "chrom",
        "start",
        "stop",
        "junction_string",
        "annotated_junctions",
        "annotated_start",
        "annotated_stop",
        "annotated_start",
        "annotated_stop",
        "sample",
        "sample_ids",
        "samptimes",
        "get",
        "sample",
        "annotated_start",
        "get",
        "sample",
        "annotated_stop",
        "get",
        "sample",
        "max",
        "annotated_start_sample_count",
        "annotated_stop_sample_count",
        "round",
        "count",
        "denominator",
        "ZeroDivisionError",
        "join",
        "count",
        "normalized",
        "annotated_start",
        "annotated_stop",
        "sample",
        "sample_ids",
        "samptimes",
        "get",
        "sample",
        "annotated_start",
        "get",
        "sample",
        "annotated_start",
        "annotated_stop",
        "get",
        "sample",
        "round",
        "count",
        "denominator",
        "ZeroDivisionError",
        "join",
        "count",
        "normalized",
        "normalized_dict",
        "s",
        "s",
        "sample_ids",
        "join",
        "stringify_list_contents",
        "gene",
        "gene_type",
        "chrom",
        "start",
        "stop",
        "ntimes",
        "nsamp",
        "join",
        "stringify_list_contents",
        "sample_counts_sorted",
        "tag",
        "seenBefore",
        "join",
        "stringify_list_contents",
        "normalized_cols_sorted",
        "line_to_print",
        "annotated_stop",
        "annotated_stop",
        "join",
        "stringify_list_contents",
        "gene",
        "gene_type",
        "chrom",
        "start",
        "stop",
        "ntimes",
        "nsamp",
        "join",
        "stringify_list_contents",
        "sample_counts_sorted",
        "tag",
        "seenBefore",
        "join",
        "_",
        "sample_ids",
        "line_to_print",
        "x",
        "s",
        "s",
        "x",
        "splice_file",
        "sample_ids",
        "open",
        "splice_file",
        "f",
        "f",
        "readlines",
        "splice_file_line",
        "splice_file_lines",
        "splice_file_line",
        "strip",
        "split",
        "c",
        "strip",
        "c",
        "splice_file_line",
        "split",
        "junctions",
        "append",
        "gene",
        "gene_type",
        "chrom",
        "start",
        "stop",
        "ntimes",
        "nsamp",
        "k",
        "v",
        "k",
        "v",
        "sample_ids",
        "sample_counts",
        "junctions",
        "transcript_model",
        "chrom_col",
        "start_col",
        "stop_col",
        "junction",
        "transcript_model",
        "junction",
        "strip",
        "split",
        "fields",
        "chrom_col",
        "strip",
        "fields",
        "start_col",
        "fields",
        "stop_col",
        "offset",
        "start",
        "offset",
        "stop",
        "offset",
        "format",
        "chrom",
        "start_flank",
        "stop_flank",
        "annotated_junctions",
        "add",
        "junction",
        "format",
        "chrom",
        "start",
        "stop",
        "format",
        "chrom",
        "start",
        "stop",
        "annotated_junctions",
        "add",
        "outer_junction",
        "annotated_junctions",
        "add",
        "inner_junction",
        "annotated_junctions",
        "args",
        "open",
        "format",
        "args",
        "output_folder",
        "args",
        "sample_set_id",
        "args",
        "gzipped",
        "gzip",
        "open",
        "args",
        "transcript_model",
        "open",
        "args",
        "transcript_model",
        "make_annotated_junction_set",
        "transcript_model",
        "args",
        "chrom_col",
        "args",
        "start_col",
        "args",
        "stop_col",
        "args",
        "normalize",
        "pd",
        "read_csv",
        "args",
        "splice_file",
        "sep",
        "splice_df",
        "columns",
        "values",
        "json",
        "loads",
        "k",
        "k",
        "splice_df",
        "samptimes",
        "values",
        "np",
        "unique",
        "k",
        "d",
        "samptimes_list",
        "k",
        "d",
        "keys",
        "s_i",
        "s_i",
        "sample_ids",
        "len",
        "sample_ids",
        "splice_df",
        "apply",
        "x",
        "json",
        "loads",
        "x",
        "splice_df",
        "to_dict",
        "get_annotated_counts",
        "splice_junctions",
        "annotated_junction_set",
        "normalize_counts",
        "splice_junctions",
        "annotated_counts",
        "sample_ids",
        "annotated_junction_set",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "action",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "action",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_mutually_exclusive_group",
        "required",
        "mode_arguments",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "main",
        "args"
    ],
    "literals": [
        "'chrom'",
        "'start'",
        "'stop'",
        "'samptimes'",
        "'{}:{}-{}'",
        "\"{}:{}\"",
        "'Gene\tType\\tChrom\\tStart\\tEnd\\tTotalCount\\tSampleCount\\t{}\\tAnnotations\\tSeenInTranscriptsList\\t{}'",
        "'\\t'",
        "'\\t'",
        "'{}_normed'",
        "'gene'",
        "'gene_type'",
        "'chrom'",
        "'start'",
        "'stop'",
        "'ntimes'",
        "'nsamp'",
        "'samptimes'",
        "'{}:{}'",
        "'{}:{}'",
        "'{}:{}-{}'",
        "\"0\"",
        "\"1\"",
        "''",
        "\"Both annotated\"",
        "\"\"",
        "\"*\"",
        "\"One annotated\"",
        "\"\"",
        "\"*\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"Neither annotated\"",
        "\"\\t\"",
        "\"\\t\"",
        "'\\t'",
        "\"\"",
        "'r'",
        "\"\\t\"",
        "\"\\t\"",
        "'gene'",
        "'gene_type'",
        "'chrom'",
        "'start'",
        "'stop'",
        "'ntimes'",
        "'nsamp'",
        "'samptimes'",
        "\"\\t\"",
        "\"chr\"",
        "\"{}:{}-{}\"",
        "\"{}:{}-{}\"",
        "\"{}:{}-{}\"",
        "\"{}/{}_outputs.txt\"",
        "\"a\"",
        "'\\t'",
        "\"samptimes\"",
        "'samptimes'",
        "'samptimes'",
        "'records'",
        "\"__main__\"",
        "'-transcript_model'",
        "\"Transcript model of canonical splicing, e.g. gencode v19. Default is set to /Users/alice/Desktop/VALabResearch/code/SpliceJunctionDiscovery/reference/gencode.comprehensive.splice.junctions.txt\"",
        "'store'",
        "\"/Users/alice/Desktop/VALabResearch/code/SpliceJunctionDiscovery/reference/gencode.comprehensive.splice.junctions.txt\"",
        "'-splice_file'",
        "'Splice junction file to filter'",
        "'-gzipped'",
        "'Add if sjout file is gzipped'",
        "'store_true'",
        "'-chrom_col'",
        "'Chromosome column'",
        "'-start_col'",
        "'Junction start column'",
        "'-stop_col'",
        "'Junction stop column'",
        "'-sample_set_id'",
        "'Sample Set ID'",
        "'x'",
        "'-output_folder'",
        "'output folder'",
        "'outputs'",
        "'--normalize'",
        "'store_true'",
        "'Local normalization on splice junction file based on annotated junctions'"
    ],
    "variables": [
        "annotated_counts",
        "chrom",
        "start",
        "stop",
        "samptimes",
        "junction_string",
        "pos",
        "existing_count_for_sample_at_pos",
        "sample",
        "sample",
        "normalized_dict",
        "gene",
        "gene_type",
        "chrom",
        "start",
        "stop",
        "ntimes",
        "nsamp",
        "samptimes",
        "sample_counts_sorted",
        "annotated_start",
        "annotated_stop",
        "junction_string",
        "seenBefore",
        "seenBefore",
        "tag",
        "tag",
        "count",
        "annotated_start_sample_count",
        "annotated_stop_sample_count",
        "denominator",
        "normalized",
        "normalized",
        "normalized_dict",
        "sample",
        "tag",
        "count",
        "denominator",
        "normalized",
        "normalized",
        "normalized_dict",
        "sample",
        "normalized_cols_sorted",
        "line_to_print",
        "tag",
        "line_to_print",
        "junctions",
        "splice_file_lines",
        "gene",
        "gene_type",
        "chrom",
        "start",
        "stop",
        "ntimes",
        "nsamp",
        "sample_counts",
        "annotated_junctions",
        "fields",
        "chrom",
        "start",
        "stop",
        "start_flank",
        "stop_flank",
        "junction",
        "outer_junction",
        "inner_junction",
        "sys",
        "stdout",
        "transcript_model",
        "transcript_model",
        "annotated_junction_set",
        "splice_df",
        "samptimes_list",
        "sample_ids",
        "sample_ids",
        "splice_df",
        "splice_junctions",
        "annotated_counts",
        "parser",
        "mode_arguments",
        "args"
    ],
    "comments": [
        "{\"chromosome:position\": sample : times_seen_in_sample}",
        "only consider both annotated",
        "Canonical splicing and exon skipping -- both junction start and stop sites are annotated / known",
        "If only one end of splice junction is annotated, this implies exon extension / intron inclusion",
        "where the other end of the junction is not a canonically known splice site",
        "If neither junction is annotated then simply just print out the original splice junction line",
        "Start at 1 index to skip header line",
        "shifts the junction while maintaining the same distance between start and stop",
        "[-1,0,1]",
        "Offset by one because gencode end positions are 2 positions into the exon",
        "-- we want the first base of the exon (non-inclusive end position for intron)",
        "generate junctions with the most extreme flanking regions of start and stop",
        "with open(args.splice_file, 'r') as f:   ###",
        "sample_ids = f.readline().split(\"\\t\")[7:]",
        "else:",
        "sample_ids = f.readline().split(\"\\t\")[7:]",
        "splice_junctions = get_junctions(args.splice_file, sample_ids)",
        "annotated_counts = get_annotated_counts(splice_junctions, annotated_junction_set)",
        "normalize_counts(splice_junctions, annotated_counts, sample_ids, annotated_junction_set)"
    ],
    "docstrings": [
        "\"\"\"If junction is annotated, note the max number of reads that align to each junction stop/start in all samples that\n    carry it. E.g. if both of the following junctions were annotated:\n        2:100-250 Beryl:20, Besse:10\n        2:100-360 Beryl:30, Besse 4\n    then the dictionary created should look like this:\n        {'2:100' :{'Beryl':30,'Besse':10},  2:250: {'Beryl':20,'Besse':10}, 2:360: {'Beryl':30, 'Besse': 4}\"\"\"",
        "\"\"\"\n    :param splice_file: The output file from the SpliceJunctionDiscovery.py script\n    :return: a list of dicts representing junctions extracted from the file.\n    \"\"\"",
        "\"\"\"From an annotations file, extract all annotated splice junctions, including every permutation with 1 bp flank on\n    either side. For example, if a junction is annotated as 1:1221-1345, then we will include not only that version of\n    it but also 1:1222-1346, 1:1220-1344, 1:1220-1346 and 1:1222-1344 to account for potential off-by-one indexing\n    differences.\"\"\"",
        "'''Get unannotated junctions from splice file'''"
    ],
    "functions": [
        "get_annotated_counts",
        "normalize_counts",
        "stringify_list_contents",
        "get_junctions",
        "make_annotated_junction_set",
        "main"
    ],
    "classes": []
}