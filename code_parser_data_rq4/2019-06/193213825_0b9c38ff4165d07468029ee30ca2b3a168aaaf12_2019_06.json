{
    "identifiers": [
        "grpc",
        "yandex",
        "cloud",
        "ai",
        "stt",
        "v2",
        "stt_service_pb2",
        "stt_service_pb2",
        "yandex",
        "cloud",
        "ai",
        "stt",
        "v2",
        "stt_service_pb2_grpc",
        "stt_service_pb2_grpc",
        "asyncio",
        "json",
        "logging",
        "websockets",
        "urllib",
        "urllib",
        "request",
        "urllib",
        "parse",
        "queue",
        "queue",
        "threading",
        "time",
        "sleep",
        "base64",
        "websocket",
        "base64",
        "b64decode",
        "CHUNKS",
        "websocket",
        "get",
        "timeout",
        "decoded",
        "websocket",
        "i",
        "get_chunk",
        "websocket",
        "i",
        "websocket",
        "folder_id",
        "stt_service_pb2",
        "RecognitionSpec",
        "language_code",
        "profanity_filter",
        "model",
        "partial_results",
        "audio_encoding",
        "stt_service_pb2",
        "RecognitionConfig",
        "specification",
        "specification",
        "folder_id",
        "folder_id",
        "stt_service_pb2",
        "StreamingRecognitionRequest",
        "config",
        "streaming_config",
        "data",
        "get_chunk",
        "websocket",
        "stt_service_pb2",
        "StreamingRecognitionRequest",
        "audio_content",
        "data",
        "websocket",
        "iam_token_or_api_key",
        "folder_id",
        "grpc",
        "ssl_channel_credentials",
        "grpc",
        "secure_channel",
        "cred",
        "stt_service_pb2_grpc",
        "SttServiceStub",
        "channel",
        "folder_id",
        "gen",
        "websocket",
        "folder_id",
        "stub",
        "StreamingRecognize",
        "req",
        "metadata",
        "authorization_type",
        "iam_token_or_api_key",
        "r",
        "it",
        "alternative",
        "r",
        "chunks",
        "alternatives",
        "alternative",
        "text",
        "r",
        "chunks",
        "LookupError",
        "grpc",
        "_channel",
        "_Rendezvous",
        "err",
        "err",
        "_state",
        "code",
        "err",
        "_state",
        "details",
        "text",
        "iam_token_or_api_key",
        "folder_id",
        "folder_id",
        "text",
        "folder_id",
        "folder_id",
        "urllib",
        "request",
        "Request",
        "url",
        "data",
        "urllib",
        "parse",
        "urlencode",
        "parameters",
        "encode",
        "req",
        "add_header",
        "authorization_type",
        "iam_token_or_api_key",
        "urllib",
        "request",
        "urlopen",
        "req",
        "f",
        "base64",
        "b64encode",
        "f",
        "read",
        "websocket",
        "chunk",
        "websocket",
        "CHUNKS",
        "need_init",
        "queue",
        "CHUNKS",
        "websocket",
        "put",
        "chunk",
        "need_init",
        "target",
        "recognition",
        "args",
        "websocket",
        "API_KEY",
        "thread",
        "start",
        "websocket",
        "path",
        "message",
        "websocket",
        "json",
        "loads",
        "message",
        "data",
        "add_chunk",
        "websocket",
        "data",
        "data",
        "synthesis",
        "data",
        "API_KEY",
        "base64_encoded_voice",
        "json",
        "dumps",
        "data",
        "data",
        "base64_encoded_voice",
        "to_send",
        "websocket",
        "send",
        "to_send",
        "logging",
        "error",
        "data",
        "asyncio",
        "get_event_loop",
        "run_until_complete",
        "websockets",
        "serve",
        "router",
        "asyncio",
        "get_event_loop",
        "run_forever"
    ],
    "literals": [
        "'AQVN34_yEdZJee7cfPzS6K9YdteELO09HLrSuUTT'",
        "''",
        "'ru-RU'",
        "'general'",
        "'OGG_OPUS'",
        "''",
        "'stt.api.cloud.yandex.net:443'",
        "'Api-Key'",
        "''",
        "'Bearer'",
        "'authorization'",
        "'%s %s'",
        "'Start chunk: '",
        "'alternative: '",
        "'Is final: '",
        "''",
        "'Not available chunks'",
        "'Error code %s, message: %s'",
        "''",
        "'Api-Key'",
        "''",
        "'Bearer'",
        "'text'",
        "'lang'",
        "'ru-RU'",
        "'format'",
        "'oggopus'",
        "''",
        "'folderId'",
        "'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'",
        "\"utf-8\"",
        "'Authorization'",
        "'%s %s'",
        "'utf-8'",
        "'action'",
        "'recognize'",
        "'voice'",
        "'action'",
        "'synthesize'",
        "'text'",
        "'to_send'",
        "'action'",
        "'synthesize'",
        "'id'",
        "'id'",
        "'text'",
        "'text'",
        "'voice'",
        "'format'",
        "'oggopus'",
        "'encoding'",
        "'base64'",
        "\"unsupported event: {}\"",
        "'finish'",
        "\"Starting...\"",
        "'localhost'"
    ],
    "variables": [
        "CHUNKS",
        "API_KEY",
        "decoded",
        "specification",
        "streaming_config",
        "cred",
        "channel",
        "stub",
        "authorization_type",
        "req",
        "it",
        "authorization_type",
        "parameters",
        "parameters",
        "req",
        "need_init",
        "CHUNKS",
        "websocket",
        "thread",
        "data",
        "base64_encoded_voice",
        "to_send"
    ],
    "comments": [
        "begin yandex speechkit import",
        "end yandex speechkit import",
        "import time",
        "from apscheduler.scheduler import Scheduler",
        "def wait_for_chunks(websocket):",
        "while ( not websocket in CHUNKS ) or ( CHUNKS[websocket]['previous'] + 1 >= len( CHUNKS[websocket]['collection'] ) ):",
        "time.sleep(1)",
        "CHUNKS[websocket]['previous'] += 1",
        "return CHUNKS[websocket]['collection'][ CHUNKS[websocket]['previous'] ]",
        "print(\"decode\")",
        "print(\"decoded:\")",
        "print(decoded)",
        "print(\"thread started\")",
        "sleep(4)",
        "print(\"start iterate\")",
        "print(\"now sleeping for 4 seconds\")",
        "sleep(4)",
        "print(\"wake up\")",
        "print(\"thread finished\")",
        "Задать настройки распознавания.",
        "print(\"gen method begin\")",
        "sample_rate_hertz=8000",
        "print(\"streaming config created\")",
        "Отправить сообщение с настройками распознавания.",
        "print(\"start iterating chunks\")",
        "Прочитать аудиофайл и отправить его содержимое порциями.",
        "print(\"chunk got, make recognition request\")",
        "print(\"another recognition request was done\")",
        "Установить соединение с сервером.",
        "print(\"run method begin\")",
        "print(\"wait for 5 seconds\")",
        "sleep(5)",
        "print(\"waiting finished, now begin\")",
        "Отправить данные для распознавания.",
        "print(\"calling gen method\")",
        "print(\"gen method executed\")",
        "print(next(req))",
        "print(next(req))",
        "print(\"before iteration\")",
        "Обработать ответы сервера и вывести результат в консоль.",
        "print(\"add chunk method begin\")",
        "print(\"creating queue\")",
        "print(\"put chunk in queue\")",
        "print(\"putting done\")",
        "sched = Scheduler()",
        "sched.start()",
        "print(\"create generator\")",
        "print(\"creating thread\")",
        "print(\"starting thread\")",
        "print(\"thread was started\")",
        "thread.join()",
        "sched.add_interval_job(out_chunk, seconds = 5)",
        "register(websocket) sends user_event() to websocket",
        "register(websocket)",
        "print(\"router method begin\")",
        "print(\"we got message\")",
        "print(\"action is recognize\")",
        "print('base64_encoded_voice')",
        "print(base64_encoded_voice)",
        "await unregister(websocket)"
    ],
    "docstrings": [],
    "functions": [
        "get_chunk",
        "out_chunk",
        "gen",
        "recognition",
        "synthesis",
        "add_chunk",
        "router"
    ],
    "classes": []
}