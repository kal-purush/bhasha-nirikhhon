{
    "identifiers": [
        "LLVM_BIG_WARNING_FLAGS",
        "LLVM_DISABLE_WARNINGS_FLAGS",
        "LLVM_TEST_DISABLE_WARNINGS_FLAGS",
        "MSVC_BIG_WARNING_FLAGS",
        "LLVM_DISABLE_WARNINGS_FLAGS",
        "MSVC_DEFINES",
        "LLVM_TEST_DISABLE_WARNINGS_FLAGS",
        "MSVC_STYLE_EXCEPTIONS_FLAGS",
        "MSVC_BIG_WARNING_FLAGS",
        "MSVC_DEFINES",
        "MSVC_STYLE_EXCEPTIONS_FLAGS"
    ],
    "literals": [
        "\"/W3\"",
        "\"-Wall\"",
        "\"-Wextra\"",
        "\"-Weverything\"",
        "\"-Wno-c++98-compat-pedantic\"",
        "\"-Wno-conversion\"",
        "\"-Wno-covered-switch-default\"",
        "\"-Wno-deprecated\"",
        "\"-Wno-disabled-macro-expansion\"",
        "\"-Wno-double-promotion\"",
        "\"-Wno-comma\"",
        "\"-Wno-extra-semi\"",
        "\"-Wno-extra-semi-stmt\"",
        "\"-Wno-packed\"",
        "\"-Wno-padded\"",
        "\"-Wno-sign-compare\"",
        "\"-Wno-float-conversion\"",
        "\"-Wno-float-equal\"",
        "\"-Wno-format-nonliteral\"",
        "\"-Wno-gcc-compat\"",
        "\"-Wno-global-constructors\"",
        "\"-Wno-exit-time-destructors\"",
        "\"-Wno-nested-anon-types\"",
        "\"-Wno-non-modular-include-in-module\"",
        "\"-Wno-old-style-cast\"",
        "\"-Wno-range-loop-analysis\"",
        "\"-Wno-reserved-id-macro\"",
        "\"-Wno-shorten-64-to-32\"",
        "\"-Wno-switch-enum\"",
        "\"-Wno-thread-safety-negative\"",
        "\"-Wno-unknown-warning-option\"",
        "\"-Wno-unreachable-code\"",
        "\"-Wno-unused-macros\"",
        "\"-Wno-weak-vtables\"",
        "\"-Wbitfield-enum-conversion\"",
        "\"-Wbool-conversion\"",
        "\"-Wconstant-conversion\"",
        "\"-Wenum-conversion\"",
        "\"-Wint-conversion\"",
        "\"-Wliteral-conversion\"",
        "\"-Wnon-literal-null-conversion\"",
        "\"-Wnull-conversion\"",
        "\"-Wobjc-literal-conversion\"",
        "\"-Wno-sign-conversion\"",
        "\"-Wstring-conversion\"",
        "\"-Wno-c99-extensions\"",
        "\"-Wno-deprecated-declarations\"",
        "\"-Wno-missing-noreturn\"",
        "\"-Wno-missing-prototypes\"",
        "\"-Wno-missing-variable-declarations\"",
        "\"-Wno-null-conversion\"",
        "\"-Wno-shadow\"",
        "\"-Wno-shift-sign-overflow\"",
        "\"-Wno-sign-compare\"",
        "\"-Wno-unused-function\"",
        "\"-Wno-unused-member-function\"",
        "\"-Wno-unused-parameter\"",
        "\"-Wno-unused-private-field\"",
        "\"-Wno-unused-template\"",
        "\"-Wno-used-but-marked-unused\"",
        "\"-Wno-zero-as-null-pointer-constant\"",
        "\"-Wno-gnu-include-next\"",
        "\"-Wno-gnu-zero-variadic-macro-arguments\"",
        "\"/U_HAS_EXCEPTIONS\"",
        "\"/D_HAS_EXCEPTIONS=1\"",
        "\"/EHsc\"",
        "\"/DNOMINMAX\"",
        "\"/DWIN32_LEAN_AND_MEAN\"",
        "\"/D_CRT_SECURE_NO_WARNINGS\"",
        "\"/D_SCL_SECURE_NO_WARNINGS\"",
        "\"/D_ENABLE_EXTENDED_ALIGNED_STORAGE\"",
        "\"ABSL_GCC_FLAGS\"",
        "\"-Wall\"",
        "\"-Wextra\"",
        "\"-Wcast-qual\"",
        "\"-Wconversion-null\"",
        "\"-Wmissing-declarations\"",
        "\"-Woverlength-strings\"",
        "\"-Wpointer-arith\"",
        "\"-Wunused-local-typedefs\"",
        "\"-Wunused-result\"",
        "\"-Wvarargs\"",
        "\"-Wvla\"",
        "\"-Wwrite-strings\"",
        "\"-Wno-missing-field-initializers\"",
        "\"-Wno-sign-compare\"",
        "\"ABSL_GCC_TEST_FLAGS\"",
        "\"-Wno-conversion-null\"",
        "\"-Wno-deprecated-declarations\"",
        "\"-Wno-missing-declarations\"",
        "\"-Wno-sign-compare\"",
        "\"-Wno-unused-function\"",
        "\"-Wno-unused-parameter\"",
        "\"-Wno-unused-private-field\"",
        "\"ABSL_GCC_EXCEPTIONS_FLAGS\"",
        "\"-fexceptions\"",
        "\"ABSL_LLVM_FLAGS\"",
        "\"ABSL_LLVM_TEST_FLAGS\"",
        "\"ABSL_LLVM_EXCEPTIONS_FLAGS\"",
        "\"-fexceptions\"",
        "\"ABSL_CLANG_CL_FLAGS\"",
        "\"ABSL_CLANG_CL_TEST_FLAGS\"",
        "\"ABSL_CLANG_CL_EXCEPTIONS_FLAGS\"",
        "\"ABSL_MSVC_FLAGS\"",
        "\"/wd4005\"",
        "\"/wd4068\"",
        "\"/wd4180\"",
        "\"/wd4244\"",
        "\"/wd4267\"",
        "\"/wd4800\"",
        "\"ABSL_MSVC_TEST_FLAGS\"",
        "\"/wd4018\"",
        "\"/wd4101\"",
        "\"/wd4503\"",
        "\"/wd4996\"",
        "\"/DNOMINMAX\"",
        "\"ABSL_MSVC_EXCEPTIONS_FLAGS\"",
        "\"ABSL_MSVC_LINKOPTS\"",
        "\"-ignore:4221\""
    ],
    "variables": [
        "MSVC_BIG_WARNING_FLAGS",
        "LLVM_BIG_WARNING_FLAGS",
        "LLVM_DISABLE_WARNINGS_FLAGS",
        "LLVM_TEST_DISABLE_WARNINGS_FLAGS",
        "MSVC_STYLE_EXCEPTIONS_FLAGS",
        "MSVC_DEFINES",
        "COPT_VARS"
    ],
    "comments": [
        "/Wall with msvc includes unhelpful warnings such as C4711, C4710, ...",
        "Docs on single flags is preceded by a comment.",
        "Docs on groups of flags is preceded by ###.",
        "Abseil does not support C++98",
        "Turns off all implicit conversion warnings. Most are re-enabled below.",
        "",
        "Turned off as they include valid C++ code.",
        "",
        "Google style does not use unsigned integers, though STL containers",
        "have unsigned types.",
        "",
        "Too aggressive: warns on Clang extensions enclosed in Clang-only",
        "compilation paths.",
        "",
        "Some internal globals are necessary. Don't do this at home.",
        "",
        "Warns on preferred usage of non-POD types such as string_view",
        "Causes warnings on include guards",
        "",
        "Implicit conversion warnings turned off by -Wno-conversion",
        "which are re-enabled below.",
        "For a libc++ bug fixed in r357267",
        "gtest depends on this GNU extension being offered.",
        "Don't define min and max macros (windows.h)",
        "Don't bloat namespace with incompatible winsock versions.",
        "Don't warn about usage of insecure C functions.",
        "Introduced in VS 2017 15.8, allow overaligned types in aligned_storage",
        "variable-length array",
        "gcc-4.x has spurious missing field initializer warnings.",
        "https://gcc.gnu.org/bugzilla/show_bug.cgi?id=36750",
        "Remove when gcc-4.x is no longer supported.",
        "Google style does not use unsigned integers, though STL containers",
        "have unsigned types.",
        "macro-redefinition",
        "unknown pragma",
        "qualifier applied to function type has no meaning; ignored",
        "conversion from 'type1' to 'type2', possible loss of data",
        "conversion from 'size_t' to 'type', possible loss of data",
        "forcing value to bool 'true' or 'false' (performance warning)",
        "signed/unsigned mismatch",
        "unreferenced local variable",
        "decorated name length exceeded, name was truncated",
        "use of deprecated symbol",
        "disable the min() and max() macros from <windows.h>",
        "Object file doesn't export any previously undefined symbols"
    ],
    "docstrings": [
        "\"\"\"Abseil compiler options.\n\nThis is the source of truth for Abseil compiler options.  To modify Abseil\ncompilation options:\n\n  (1) Edit the appropriate list in this file based on the platform the flag is\n      needed on.\n  (2) Run `<path_to_absl>/copts/generate_copts.py`.\n\nThe generated copts are consumed by configure_copts.bzl and\nAbseilConfigureCopts.cmake.\n\"\"\""
    ],
    "functions": [],
    "classes": []
}