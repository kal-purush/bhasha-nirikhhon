{
    "identifiers": [
        "numpy",
        "np",
        "cost_matrix",
        "np",
        "asarray",
        "cost_matrix",
        "len",
        "cost_matrix",
        "shape",
        "ValueError",
        "cost_matrix",
        "shape",
        "np",
        "issubdtype",
        "cost_matrix",
        "dtype",
        "np",
        "number",
        "cost_matrix",
        "dtype",
        "np",
        "dtype",
        "np",
        "ValueError",
        "cost_matrix",
        "dtype",
        "np",
        "np",
        "isinf",
        "cost_matrix",
        "np",
        "isnan",
        "cost_matrix",
        "ValueError",
        "cost_matrix",
        "dtype",
        "np",
        "dtype",
        "np",
        "cost_matrix",
        "astype",
        "np",
        "cost_matrix",
        "shape",
        "cost_matrix",
        "shape",
        "cost_matrix",
        "T",
        "_Hungary",
        "cost_matrix",
        "cost_matrix",
        "shape",
        "_step1",
        "step",
        "step",
        "state",
        "transposed",
        "state",
        "marked",
        "T",
        "state",
        "marked",
        "np",
        "nonzero",
        "marked",
        "cost_matrix",
        "cost_matrix",
        "copy",
        "C",
        "shape",
        "np",
        "ones",
        "n",
        "dtype",
        "np",
        "ones",
        "m",
        "dtype",
        "np",
        "zeros",
        "n",
        "m",
        "dtype",
        "np",
        "zeros",
        "n",
        "m",
        "dtype",
        "row_uncovered",
        "col_uncovered",
        "state",
        "state",
        "C",
        "state",
        "C",
        "min",
        "axis",
        "np",
        "newaxis",
        "i",
        "j",
        "np",
        "nonzero",
        "state",
        "C",
        "state",
        "col_uncovered",
        "j",
        "state",
        "row_uncovered",
        "i",
        "state",
        "marked",
        "state",
        "col_uncovered",
        "state",
        "row_uncovered",
        "state",
        "_clear_covers",
        "_step3",
        "state",
        "state",
        "marked",
        "state",
        "col_uncovered",
        "np",
        "marked",
        "axis",
        "marked",
        "sum",
        "state",
        "C",
        "shape",
        "_step4",
        "state",
        "state",
        "C",
        "astype",
        "C",
        "state",
        "row_uncovered",
        "np",
        "newaxis",
        "covered_C",
        "np",
        "asarray",
        "state",
        "col_uncovered",
        "dtype",
        "state",
        "C",
        "shape",
        "state",
        "C",
        "shape",
        "np",
        "unravel_index",
        "np",
        "argmax",
        "covered_C",
        "n",
        "m",
        "covered_C",
        "row",
        "col",
        "_step6",
        "state",
        "marked",
        "np",
        "argmax",
        "state",
        "marked",
        "row",
        "state",
        "marked",
        "row",
        "star_col",
        "row",
        "col",
        "_step5",
        "star_col",
        "state",
        "row_uncovered",
        "state",
        "col_uncovered",
        "C",
        "col",
        "np",
        "asarray",
        "state",
        "row_uncovered",
        "dtype",
        "state",
        "state",
        "path",
        "state",
        "Z0_r",
        "state",
        "Z0_c",
        "np",
        "argmax",
        "state",
        "marked",
        "path",
        "count",
        "state",
        "marked",
        "row",
        "path",
        "count",
        "count",
        "row",
        "path",
        "count",
        "np",
        "argmax",
        "state",
        "marked",
        "path",
        "count",
        "state",
        "marked",
        "row",
        "col",
        "count",
        "path",
        "count",
        "col",
        "i",
        "count",
        "state",
        "marked",
        "path",
        "i",
        "path",
        "i",
        "state",
        "marked",
        "path",
        "i",
        "path",
        "i",
        "state",
        "marked",
        "path",
        "i",
        "path",
        "i",
        "state",
        "_clear_covers",
        "state",
        "marked",
        "state",
        "marked",
        "_step3",
        "state",
        "np",
        "state",
        "row_uncovered",
        "np",
        "state",
        "col_uncovered",
        "np",
        "min",
        "state",
        "C",
        "state",
        "row_uncovered",
        "axis",
        "np",
        "min",
        "minval",
        "state",
        "col_uncovered",
        "state",
        "C",
        "state",
        "row_uncovered",
        "minval",
        "state",
        "C",
        "state",
        "col_uncovered",
        "minval",
        "_step4"
    ],
    "literals": [
        "\"expected a matrix (2-d array), got a %r array\"",
        "\"expected a matrix containing numerical entries, got %s\"",
        "\"matrix contains invalid numeric entries\""
    ],
    "variables": [
        "cost_matrix",
        "cost_matrix",
        "cost_matrix",
        "transposed",
        "transposed",
        "state",
        "step",
        "step",
        "marked",
        "marked",
        "C",
        "n",
        "m",
        "row_uncovered",
        "col_uncovered",
        "Z0_r",
        "Z0_c",
        "path",
        "marked",
        "i",
        "j",
        "j",
        "i",
        "marked",
        "C",
        "covered_C",
        "n",
        "m",
        "row",
        "col",
        "row",
        "col",
        "star_col",
        "state",
        "Z0_r",
        "state",
        "Z0_c",
        "col",
        "row",
        "col",
        "covered_C",
        "col",
        "covered_C",
        "row",
        "count",
        "path",
        "path",
        "count",
        "path",
        "count",
        "row",
        "path",
        "count",
        "path",
        "count",
        "col",
        "col",
        "path",
        "count",
        "path",
        "count",
        "minval",
        "minval"
    ],
    "comments": [
        "Hungarian algorithm (Kuhn-Munkres) for solving the linear sum assignment",
        "problem. Taken from scikit-learn. Based on original code by Brian Clapper,",
        "adapted to NumPy by Gael Varoquaux.",
        "Further improvements by Ben Root, Vlad Niculae and Lars Buitinck.",
        "",
        "Copyright (c) 2008 Brian M. Clapper <bmc@clapper.org>, Gael Varoquaux",
        "Author: Brian M. Clapper, Gael Varoquaux",
        "License: 3-clause BSD",
        "The algorithm expects more columns than rows in the cost matrix.",
        "No need to bother with assignments if one of the dimensions",
        "of the cost matrix is zero-length.",
        "Individual steps of the algorithm follow, as a state machine: they return",
        "the next step to be taken (function to be called), if any.",
        "Step 1: For each row of the matrix, find the smallest element and",
        "subtract it from every element in its row.",
        "Step 2: Find a zero (Z) in the resulting matrix. If there is no",
        "starred zero in its row or column, star Z. Repeat for each element",
        "in the matrix.",
        "We convert to int as numpy operations are faster on int",
        "Find an uncovered zero",
        "Find the first starred element in the row",
        "Could not find one",
        "Find the first starred element in the col defined by",
        "the path.",
        "Could not find one",
        "Find the first prime element in the row defined by the",
        "first path step",
        "Convert paths",
        "Erase all prime markings",
        "the smallest uncovered value in the matrix"
    ],
    "docstrings": [
        "\"\"\"Solve the linear sum assignment problem.\n\n    The linear sum assignment problem is also known as minimum weight matching\n    in bipartite graphs. A problem instance is described by a matrix C, where\n    each C[i,j] is the cost of matching vertex i of the first partite set\n    (a \"worker\") and vertex j of the second set (a \"job\"). The goal is to find\n    a complete assignment of workers to jobs of minimal cost.\n\n    Formally, let X be a boolean matrix where :math:`X[i,j] = 1` iff row i is\n    assigned to column j. Then the optimal assignment has cost\n\n    .. math::\n        \\\\min \\\\sum_i \\\\sum_j C_{i,j} X_{i,j}\n\n    where, in the case where the matrix X is square, each row is assigned to\n    exactly one column, and each column to exactly one row.\n\n    This function can also solve a generalization of the classic assignment\n    problem where the cost matrix is rectangular. If it has more rows than\n    columns, then not every row needs to be assigned to a column, and vice\n    versa.\n\n    The method used is the Hungarian algorithm, also known as the Munkres or\n    Kuhn-Munkres algorithm.\n\n    Parameters\n    ----------\n    cost_matrix : array\n        The cost matrix of the bipartite graph.\n\n    Returns\n    -------\n    row_ind, col_ind : array\n        An array of row indices and one of corresponding column indices giving\n        the optimal assignment. The cost of the assignment can be computed\n        as ``cost_matrix[row_ind, col_ind].sum()``. The row indices will be\n        sorted; in the case of a square cost matrix they will be equal to\n        ``numpy.arange(cost_matrix.shape[0])``.\n\n    Notes\n    -----\n    .. versionadded:: 0.17.0\n\n    Examples\n    --------\n    >>> cost = np.array([[4, 1, 3], [2, 0, 5], [3, 2, 2]])\n    >>> from scipy.optimize import linear_sum_assignment\n    >>> row_ind, col_ind = linear_sum_assignment(cost)\n    >>> col_ind\n    array([1, 0, 2])\n    >>> cost[row_ind, col_ind].sum()\n    5\n\n    References\n    ----------\n    1. http://csclab.murraystate.edu/bob.pilgrim/445/munkres.html\n\n    2. Harold W. Kuhn. The Hungarian Method for the assignment problem.\n       *Naval Research Logistics Quarterly*, 2:83-97, 1955.\n\n    3. Harold W. Kuhn. Variants of the Hungarian method for assignment\n       problems. *Naval Research Logistics Quarterly*, 3: 253-258, 1956.\n\n    4. Munkres, J. Algorithms for the Assignment and Transportation Problems.\n       *J. SIAM*, 5(1):32-38, March, 1957.\n\n    5. https://en.wikipedia.org/wiki/Hungarian_algorithm\n    \"\"\"",
        "\"\"\"State of the Hungarian algorithm.\n\n    Parameters\n    ----------\n    cost_matrix : 2D matrix\n        The cost matrix. Must have shape[1] >= shape[0].\n    \"\"\"",
        "\"\"\"Clear all covered matrix cells\"\"\"",
        "\"\"\"Steps 1 and 2 in the Wikipedia page.\"\"\"",
        "\"\"\"\n    Cover each column containing a starred zero. If n columns are covered,\n    the starred zeros describe a complete set of unique assignments.\n    In this case, Go to DONE, otherwise, Go to Step 4.\n    \"\"\"",
        "\"\"\"\n    Find a noncovered zero and prime it. If there is no starred zero\n    in the row containing this primed zero, Go to Step 5. Otherwise,\n    cover this row and uncover the column containing the starred\n    zero. Continue in this manner until there are no uncovered zeros\n    left. Save the smallest uncovered value and Go to Step 6.\n    \"\"\"",
        "\"\"\"\n    Construct a series of alternating primed and starred zeros as follows.\n    Let Z0 represent the uncovered primed zero found in Step 4.\n    Let Z1 denote the starred zero in the column of Z0 (if any).\n    Let Z2 denote the primed zero in the row of Z1 (there will always be one).\n    Continue until the series terminates at a primed zero that has no starred\n    zero in its column. Unstar each starred zero of the series, star each\n    primed zero of the series, erase all primes and uncover every line in the\n    matrix. Return to Step 3\n    \"\"\"",
        "\"\"\"\n    Add the value found in Step 4 to every element of each covered row,\n    and subtract it from every element of each uncovered column.\n    Return to Step 4 without altering any stars, primes, or covered lines.\n    \"\"\""
    ],
    "functions": [
        "linear_sum_assignment",
        "_clear_covers",
        "_step1",
        "_step3",
        "_step4",
        "_step5",
        "_step6"
    ],
    "classes": [
        "_Hungary"
    ]
}