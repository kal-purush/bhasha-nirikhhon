{
    "identifiers": [
        "expect",
        "describe",
        "it",
        "colorWithTransparency",
        "parseRgb",
        "resetTransparency",
        "Rgb",
        "rgbToBlackWhiteString",
        "describe",
        "it",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "it",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "it",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "expect",
        "rgbToBlackWhiteString",
        "describe",
        "it",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "it",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "describe",
        "it",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "expect",
        "parseRgb",
        "describe",
        "it",
        "expect",
        "resetTransparency",
        "expect",
        "resetTransparency",
        "it",
        "expect",
        "resetTransparency",
        "expect",
        "resetTransparency",
        "describe",
        "it",
        "expect",
        "colorWithTransparency",
        "expect",
        "colorWithTransparency",
        "expect",
        "colorWithTransparency",
        "expect",
        "colorWithTransparency",
        "expect",
        "colorWithTransparency",
        "expect",
        "colorWithTransparency",
        "expect",
        "colorWithTransparency",
        "it",
        "expect",
        "colorWithTransparency",
        "expect",
        "colorWithTransparency",
        "expect",
        "colorWithTransparency",
        "expect",
        "colorWithTransparency",
        "NaN",
        "expect",
        "colorWithTransparency",
        "expect",
        "colorWithTransparency"
    ],
    "literals": [
        "'chai'",
        "'mocha'",
        "'../../src/helpers/color'",
        "'rgbToBlackWhiteString'",
        "'should return \\'black\\' for black color and every non-zero threshold'",
        "'white'",
        "'black'",
        "'black'",
        "'should return \\'white\\' for white color and any threshold'",
        "'white'",
        "'white'",
        "'white'",
        "'should respect the threshold value'",
        "'white'",
        "'white'",
        "'white'",
        "'white'",
        "'white'",
        "'white'",
        "'black'",
        "'black'",
        "'black'",
        "'parseRgb'",
        "'should correctly parse known named colors'",
        "'aliceblue'",
        "'coral'",
        "'darkmagenta'",
        "'linen'",
        "'whitesmoke'",
        "'should correctly parse RGB tuple string'",
        "'rgb(10, 20, 30)'",
        "'rgb(0,0,0)'",
        "'rgb(\t10\t , \t20 \t, \t30  \t)'",
        "'rgb(256, 256, 256)'",
        "'rgb(100500, 100500, 100500)'",
        "'rgb(0, 100500, 0)'",
        "'rgb(-10, -20, -30)'",
        "'rgb(10, -20, 30)'",
        "'   \trgb(\t10, \t20, \t30 \t\t )'",
        "'rgb\t  (\t10, \t20, \t30 \t\t )'",
        "'rgb(\t10, \t20, \t30 \t\t ) \t  '",
        "'rgb(10.0, 20, 30)'",
        "'rgb(10, 20.0, 30)'",
        "'rgb(10, 20, 30.0)'",
        "'rgb(10, 20)'",
        "'rgb(10, 20, 30, 40)'",
        "'parseRgb with rgba'",
        "'should correctly parse RGBA tuple string'",
        "'rgba(10, 20, 30, 0.40)'",
        "'rgba(0,0,0,1)'",
        "'rgba(\t10 \t, \t20 \t, \t30\t, \t0.40   \t)'",
        "'rgba(10, 20, 30, 0.1)'",
        "'rgba(10, 20, 30, .1)'",
        "'rgba(10, 20, 30, .001)'",
        "'rgba(10, 20, 30, .000000000001)'",
        "'rgba(10, 20, 30, .10001)'",
        "'rgba(10, 20, 30, .10005)'",
        "'rgba(10, 20, 30, .100000000005)'",
        "'rgba(256, 256, 256, 1.0)'",
        "'rgba(100500, 100500, 100500, 1.0)'",
        "'rgba(0, 100500, 0, 1.0)'",
        "'rgba(-10, -20, -30, 1.0)'",
        "'rgba(10, -20, 30, 1.0)'",
        "'rgba(10, 20, 30, 1.1)'",
        "'rgba(10, 20, 30, 1000.0)'",
        "'rgba(10, 20, 30, 1000000)'",
        "'rgba(10, 20, 30, -0.1)'",
        "'rgba(10, 20, 30, -1.1)'",
        "'rgba(10, 20, 30, -1000.0)'",
        "'rgba(10, 20, 30, -1000000)'",
        "'rgba(10, 20, 30, -1000000.100000000005)'",
        "'rgba(10, 20, 30, 1.)'",
        "'   \trgba(\t10, \t20, \t30\t, \t0.40   \t)'",
        "'rgba\t  (\t10, \t20, \t30\t, \t0.40   \t)'",
        "'rgba(\t10, \t20, \t30\t, \t0.40   \t) \t  '",
        "'rgba(10.0, 20, 30, 0)'",
        "'rgba(10, 20.0, 30, 0)'",
        "'rgba(10, 20, 30.0, 0)'",
        "'rgba(10, 20, 30)'",
        "'rgba(10, 20, 30, 1.0, 1.0)'",
        "'resetTransparency'",
        "'should work'",
        "'red'",
        "'rgba(255, 0, 0, 1)'",
        "'rgba(255, 0, 0, .1)'",
        "'rgba(255, 0, 0, 1)'",
        "'should keep hex colors as is'",
        "'#0f0'",
        "'#0f0'",
        "'#0000ff'",
        "'#0000ff'",
        "'colorWithTransparency'",
        "'should work'",
        "'red'",
        "'rgba(255, 0, 0, 1)'",
        "'red'",
        "'rgba(255, 0, 0, 0.5)'",
        "'red'",
        "'rgba(255, 0, 0, 0)'",
        "'#0f0'",
        "'rgba(0, 255, 0, 0.2)'",
        "'#00ff00'",
        "'rgba(0, 255, 0, 0.7)'",
        "'rgba(0, 0, 255, .1)'",
        "'rgba(0, 0, 255, 0.6)'",
        "'rgba(-1, -2, 123, 9001)'",
        "'rgba(0, 0, 123, 0.65)'",
        "'should normalize alpha channel'",
        "'red'",
        "'rgba(255, 0, 0, 0)'",
        "'red'",
        "'rgba(255, 0, 0, 1)'",
        "'red'",
        "'rgba(255, 0, 0, 0)'",
        "'red'",
        "'rgba(255, 0, 0, 0)'",
        "'red'",
        "'rgba(255, 0, 0, 0.3)'",
        "'red'",
        "'rgba(255, 0, 0, 0.3001)'"
    ],
    "variables": [],
    "comments": [
        "------------------------------------------------------------------- //",
        "parsers",
        "RGB tuple may contain values exceeding 255, that should be clamped to 255 after parsing",
        "RGB tuple may contain negative values, that should be clamped to zero after parsing",
        "whitespace characters before 'rgb', after 'rgb' and after the closing parenthesis are prohibited",
        "RGB tuple should not contain non-integer values",
        "not enough values in the tuple",
        "too much values in the tuple",
        "RGB components of a tuple may contain values exceeding 255, that should be clamped to 255 after parsing",
        "RGB components of a tuple may contain negative values, that should be clamped to zero after parsing",
        "Alpha component of a tuple may be a value exceeding 1.0, that should be clamped to 1.0 after parsing",
        "Alpha component of a tuple may be a negative value, that should be clamped to zero after parsing",
        "dangling dot is prohibited",
        "whitespace characters before 'rgba', after 'rgba' and after the closing parenthesis are prohibited",
        "RGB components of tuple should not contain non-integer values",
        "not enough values in the tuple",
        "too much values in the tuple",
        "That how we roll!"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}