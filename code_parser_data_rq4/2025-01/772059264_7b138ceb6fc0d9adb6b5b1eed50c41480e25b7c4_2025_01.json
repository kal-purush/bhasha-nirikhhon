{
    "identifiers": [
        "gov",
        "nist",
        "secauto",
        "metaschema",
        "core",
        "datatype",
        "adapter",
        "com",
        "fasterxml",
        "jackson",
        "databind",
        "jsonFormatVisitors",
        "JsonFormatTypes",
        "gov",
        "nist",
        "secauto",
        "metaschema",
        "core",
        "datatype",
        "AbstractDataTypeAdapter",
        "gov",
        "nist",
        "secauto",
        "metaschema",
        "core",
        "metapath",
        "item",
        "atomic",
        "IAnyAtomicItem",
        "gov",
        "nist",
        "secauto",
        "metaschema",
        "core",
        "metapath",
        "AbstractAtomicOrUnionType",
        "gov",
        "nist",
        "secauto",
        "metaschema",
        "core",
        "util",
        "ObjectUtils",
        "org",
        "apache",
        "commons",
        "codec",
        "BinaryDecoder",
        "org",
        "apache",
        "commons",
        "codec",
        "BinaryEncoder",
        "org",
        "apache",
        "commons",
        "codec",
        "DecoderException",
        "org",
        "apache",
        "commons",
        "codec",
        "EncoderException",
        "java",
        "nio",
        "ByteBuffer",
        "java",
        "nio",
        "charset",
        "StandardCharsets",
        "java",
        "util",
        "Arrays",
        "edu",
        "umd",
        "cs",
        "findbugs",
        "annotations",
        "NonNull",
        "NonNull",
        "itemClass",
        "NonNull",
        "castExecutor",
        "itemClass",
        "castExecutor",
        "NonNull",
        "NonNull",
        "NonNull",
        "NonNull",
        "text",
        "ObjectUtils",
        "notNull",
        "text",
        "getBytes",
        "StandardCharsets",
        "UTF_8",
        "NonNull",
        "NonNull",
        "StandardCharsets",
        "UTF_8",
        "NonNull",
        "text",
        "length",
        "text",
        "length",
        "length",
        "text",
        "text",
        "substring",
        "length",
        "NonNull",
        "NonNull",
        "decodedBytes",
        "ObjectUtils",
        "notNull",
        "getEncoder",
        "encode",
        "decodedBytes",
        "ex",
        "format",
        "elide",
        "bytesToString",
        "decodedBytes",
        "ex",
        "NonNull",
        "NonNull",
        "decodedBuffer",
        "decodedBytes",
        "bufferToBytes",
        "decodedBuffer",
        "encodeToByteBuffer",
        "decodedBytes",
        "NonNull",
        "NonNull",
        "decodedText",
        "decodedBytes",
        "stringToBytes",
        "decodedText",
        "encodeToByteBuffer",
        "decodedBytes",
        "NonNull",
        "NonNull",
        "decodedBytes",
        "encodedBytes",
        "encode",
        "decodedBytes",
        "ObjectUtils",
        "notNull",
        "ByteBuffer",
        "wrap",
        "encodedBytes",
        "NonNull",
        "NonNull",
        "enodedBytes",
        "ObjectUtils",
        "notNull",
        "getDecoder",
        "decode",
        "enodedBytes",
        "ex",
        "format",
        "elide",
        "bytesToString",
        "enodedBytes",
        "ex",
        "NonNull",
        "NonNull",
        "encodedBuffer",
        "encodedBytes",
        "bufferToBytes",
        "encodedBuffer",
        "decodedBytes",
        "decode",
        "encodedBytes",
        "ObjectUtils",
        "notNull",
        "ByteBuffer",
        "wrap",
        "decodedBytes",
        "NonNull",
        "NonNull",
        "encodedBytes",
        "decodedBytes",
        "decode",
        "encodedBytes",
        "bytesToString",
        "decodedBytes",
        "Override",
        "encodedString",
        "encodedBytes",
        "stringToBytes",
        "encodedString",
        "ObjectUtils",
        "notNull",
        "ByteBuffer",
        "wrap",
        "encodedBytes",
        "Override",
        "encodedBuffer",
        "encodedBytes",
        "bufferToBytes",
        "encodedBuffer",
        "encodedBytes",
        "StandardCharsets",
        "UTF_8",
        "Override",
        "JsonFormatTypes",
        "STRING",
        "Override",
        "obj",
        "buffer",
        "obj",
        "clone",
        "buffer",
        "isDirect",
        "ByteBuffer",
        "allocateDirect",
        "buffer",
        "capacity",
        "ByteBuffer",
        "allocate",
        "buffer",
        "capacity",
        "readOnlyCopy",
        "buffer",
        "asReadOnlyBuffer",
        "readOnlyCopy",
        "flip",
        "clone",
        "put",
        "readOnlyCopy",
        "clone",
        "NonNull",
        "NonNull",
        "buffer",
        "copy",
        "array",
        "buffer",
        "hasArray",
        "array",
        "buffer",
        "array",
        "copy",
        "array",
        "Arrays",
        "copyOf",
        "array",
        "array",
        "length",
        "array",
        "buffer",
        "remaining",
        "buffer",
        "mark",
        "buffer",
        "get",
        "array",
        "buffer",
        "reset",
        "ObjectUtils",
        "notNull",
        "array"
    ],
    "literals": [
        "\"â€¦\"",
        "\"unable to encode text '%s'\"",
        "\"unable to decode text '%s'\""
    ],
    "variables": [
        "array"
    ],
    "comments": [
        "byte[] decodedBytes = decode(encodedBytes);",
        "return ObjectUtils.notNull(ByteBuffer.wrap(decodedBytes));",
        "return bytesToString(encodedBytes);",
        "byte[] decodedBytes = bufferToBytes((ByteBuffer) decodedBuffer, false);",
        "byte[] encodedBytes = encode(decodedBytes);",
        "return bytesToString(encodedBytes);",
        "Handle direct buffers"
    ],
    "docstrings": [
        "* SPDX-FileCopyrightText: none\n * SPDX-License-Identifier: CC0-1.0",
        "* Maintains a byte buffer representation of a byte stream.\n * <p>\n * The maintained byte stream is kept in a decoded form.\n *\n * @param <ITEM_TYPE>\n *          the metapath item type supported by the adapter",
        "* Construct a new Java type adapter for a provided class.\n   *\n   * @param itemClass\n   *          the Java type of the Matepath item this adapter supports\n   * @param castExecutor\n   *          the method to call to cast an item to an item based on this type",
        "* Get the binary decoder to use to decode encoded data.\n   *\n   * @return the decoder",
        "* Get the binary encoder to use to encode data.\n   *\n   * @return the encoder",
        "* Get the raw bytes, encoded as UTF8, for the provided text string.\n   *\n   * @param text\n   *          the text string to get the bytes for\n   * @return the UTF8 encoded bytes for the text string",
        "* Get a text string based on the provided raw bytes, encoded as UTF8.\n   *\n   * @param bytes\n   *          a byte array encoded as UTF8\n   * @return the decoded text string",
        "* Encode the provided bytes using the encoding supported by this class.\n   *\n   * @param decodedBytes\n   *          the bytes to encode\n   * @return the encoded bytes\n   * @see #getEncoder()",
        "* Encode the provided bytes using the encoding supported by this class.\n   *\n   * @param decodedBuffer\n   *          a buffer containing the bytes to encode\n   * @return a buffer containing the encoded bytes\n   * @see #getEncoder()",
        "* Encode the provided string using the encoding supported by this class.\n   * <p>\n   * The provided string is first encoded as a stream of UTF8 bytes.\n   *\n   * @param decodedText\n   *          the string to encode\n   * @return a buffer containing the encoded bytes\n   * @see #getEncoder()",
        "* Encode the provided bytes using the encoding supported by this class.\n   *\n   * @param decodedBytes\n   *          the bytes to encode\n   * @return a buffer containing the encoded bytes\n   * @see #getEncoder()",
        "* Decode the provided bytes using the encoding supported by this class.\n   *\n   * @param enodedBytes\n   *          the bytes to decode\n   * @return the decoded bytes\n   * @see #getDecoder()",
        "* Decode the provided bytes using the encoding supported by this class.\n   *\n   * @param encodedBuffer\n   *          a buffer containing the the bytes to decode\n   * @return a buffer containing the decoded bytes\n   * @see #getDecoder()",
        "* Decode the provided bytes using the encoding supported by this class.\n   * <p>\n   * The decoded bytes are decoded as a stream of UTF8 bytes to produce the\n   * string.\n   *\n   * @param encodedBytes\n   *          the bytes to decode\n   * @return the decoded string\n   * @see #getDecoder()",
        "* Decodes the provided string.\n   *\n   * @return a buffer containing the decoded bytes",
        "* Get the wrapped value as a base64 encoded string.\n   * <p>\n   * Encodes the wrapped value to produce a string.\n   *\n   * @return the base64 encoded value",
        "* Get the array of bytes stored in the buffer.\n   *\n   * @param buffer\n   *          the buffer\n   * @param copy\n   *          if {@code true} ensure the resulting array is a copy\n   * @return the array of bytes"
    ],
    "functions": [
        "AbstractBinaryAdapter",
        "BinaryDecoder",
        "getDecoder",
        "BinaryEncoder",
        "getEncoder",
        "stringToBytes",
        "bytesToString",
        "elide",
        "encode",
        "ByteBuffer",
        "encodeToByteBuffer",
        "ByteBuffer",
        "encodeToByteBuffer",
        "ByteBuffer",
        "encodeToByteBuffer",
        "decode",
        "ByteBuffer",
        "decode",
        "decodeToString",
        "ByteBuffer",
        "parse",
        "asString",
        "JsonFormatTypes",
        "getJsonRawType",
        "ByteBuffer",
        "copy",
        "bufferToBytes"
    ],
    "classes": [
        "AbstractBinaryAdapter"
    ]
}