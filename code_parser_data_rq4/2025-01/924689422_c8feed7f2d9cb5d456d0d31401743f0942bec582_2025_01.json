{
    "identifiers": [
        "fastapi",
        "FastAPI",
        "File",
        "UploadFile",
        "HTTPException",
        "fastapi",
        "middleware",
        "cors",
        "CORSMiddleware",
        "langchain",
        "document_loaders",
        "TextLoader",
        "langchain",
        "indexes",
        "VectorstoreIndexCreator",
        "langchain",
        "text_splitter",
        "CharacterTextSplitter",
        "langchain_google_genai",
        "GoogleGenerativeAI",
        "GoogleGenerativeAIEmbeddings",
        "pydantic",
        "BaseModel",
        "os",
        "dotenv",
        "load_dotenv",
        "shutil",
        "tempfile",
        "pandas",
        "pd",
        "logging",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "INFO",
        "format",
        "handlers",
        "logging",
        "StreamHandler",
        "logging",
        "getLogger",
        "load_dotenv",
        "FastAPI",
        "app",
        "add_middleware",
        "CORSMiddleware",
        "allow_origins",
        "allow_credentials",
        "allow_methods",
        "allow_headers",
        "os",
        "getenv",
        "google_api_key",
        "logger",
        "error",
        "ValueError",
        "GoogleGenerativeAI",
        "model",
        "google_api_key",
        "google_api_key",
        "logger",
        "info",
        "e",
        "logger",
        "error",
        "e",
        "BaseModel",
        "filename",
        "filename",
        "filename",
        "rsplit",
        "lower",
        "ALLOWED_EXTENSIONS",
        "file_path",
        "extension",
        "extension",
        "lower",
        "extension",
        "lower",
        "ValueError",
        "pd",
        "read_excel",
        "file_path",
        "sheet_name",
        "engine",
        "engine",
        "sheet_name",
        "df",
        "excel_data",
        "items",
        "text",
        "sheet_name",
        "text",
        "df",
        "to_string",
        "index",
        "logger",
        "info",
        "file_path",
        "text",
        "e",
        "logger",
        "error",
        "file_path",
        "e",
        "ValueError",
        "e",
        "app",
        "post",
        "file",
        "UploadFile",
        "File",
        "index",
        "allowed_file",
        "file",
        "filename",
        "file",
        "filename",
        "split",
        "logger",
        "error",
        "error_msg",
        "HTTPException",
        "status_code",
        "detail",
        "error_msg",
        "tempfile",
        "NamedTemporaryFile",
        "suffix",
        "os",
        "path",
        "splitext",
        "file",
        "filename",
        "tmp",
        "shutil",
        "copyfileobj",
        "file",
        "file",
        "tmp",
        "tmp",
        "name",
        "logger",
        "info",
        "tmp_path",
        "os",
        "path",
        "splitext",
        "file",
        "filename",
        "extension",
        "lower",
        "TextLoader",
        "tmp_path",
        "logger",
        "info",
        "extension",
        "lower",
        "load_excel_as_text",
        "tmp_path",
        "extension",
        "tempfile",
        "NamedTemporaryFile",
        "suffix",
        "text_tmp",
        "text_tmp",
        "write",
        "excel_text",
        "encode",
        "text_tmp",
        "name",
        "TextLoader",
        "text_tmp_path",
        "logger",
        "info",
        "extension",
        "logger",
        "error",
        "error_msg",
        "HTTPException",
        "status_code",
        "detail",
        "error_msg",
        "GoogleGenerativeAIEmbeddings",
        "model",
        "logger",
        "info",
        "e",
        "logger",
        "error",
        "e",
        "HTTPException",
        "status_code",
        "detail",
        "CharacterTextSplitter",
        "chunk_size",
        "chunk_overlap",
        "logger",
        "info",
        "e",
        "logger",
        "error",
        "e",
        "HTTPException",
        "status_code",
        "detail",
        "VectorstoreIndexCreator",
        "embedding",
        "embedding",
        "text_splitter",
        "text_splitter",
        "index_creator",
        "from_loaders",
        "loader",
        "logger",
        "info",
        "e",
        "logger",
        "error",
        "e",
        "HTTPException",
        "status_code",
        "detail",
        "HTTPException",
        "he",
        "logger",
        "error",
        "he",
        "detail",
        "he",
        "ValueError",
        "ve",
        "logger",
        "error",
        "ve",
        "HTTPException",
        "status_code",
        "detail",
        "ve",
        "e",
        "logger",
        "error",
        "e",
        "HTTPException",
        "status_code",
        "detail",
        "e",
        "tmp_path",
        "os",
        "path",
        "exists",
        "tmp_path",
        "os",
        "remove",
        "tmp_path",
        "logger",
        "info",
        "tmp_path",
        "e",
        "logger",
        "warning",
        "tmp_path",
        "e",
        "text_tmp_path",
        "os",
        "path",
        "exists",
        "text_tmp_path",
        "os",
        "remove",
        "text_tmp_path",
        "logger",
        "info",
        "text_tmp_path",
        "e",
        "logger",
        "warning",
        "text_tmp_path",
        "e",
        "app",
        "post",
        "request",
        "QueryRequest",
        "index",
        "request",
        "prompt",
        "strip",
        "prompt",
        "logger",
        "error",
        "HTTPException",
        "status_code",
        "detail",
        "index",
        "logger",
        "error",
        "error_msg",
        "HTTPException",
        "status_code",
        "detail",
        "error_msg",
        "logger",
        "info",
        "prompt",
        "index",
        "query",
        "prompt",
        "llm",
        "llm",
        "logger",
        "info",
        "response",
        "e",
        "logger",
        "error",
        "e",
        "HTTPException",
        "status_code",
        "detail",
        "e"
    ],
    "literals": [
        "\"%(asctime)s [%(levelname)s] %(name)s: %(message)s\"",
        "\"http://localhost:3000\"",
        "\"*\"",
        "\"*\"",
        "\"GOOGLE_API_KEY\"",
        "\"GOOGLE_API_KEY not found in environment variables.\"",
        "\"GOOGLE_API_KEY not found in environment variables.\"",
        "\"gemini-2.0-flash-exp\"",
        "\"Google Generative AI LLM initialized successfully.\"",
        "f\"Failed to initialize Google Generative AI LLM: {str(e)}\"",
        "'txt'",
        "'xlsx'",
        "'xls'",
        "'.'",
        "'.'",
        "'.xlsx'",
        "'openpyxl'",
        "'.xls'",
        "'xlrd'",
        "\"Unsupported file extension for Excel file.\"",
        "\"\"",
        "f\"Sheet: {sheet_name}\\n\"",
        "\"\\n\\n\"",
        "f\"Excel file '{file_path}' converted to text successfully.\"",
        "f\"Error reading Excel file '{file_path}': {str(e)}\"",
        "f\"Error reading Excel file: {str(e)}\"",
        "\"/upload/\"",
        "f\"Unsupported file type: {file.filename.split('.')[-1]}. Supported types are .txt, .xlsx, .xls\"",
        "'.'",
        "f\"Uploaded file saved to temporary path: {tmp_path}\"",
        "'.txt'",
        "\"Initialized TextLoader for .txt file.\"",
        "'.xlsx'",
        "'.xls'",
        "'.txt'",
        "'utf-8'",
        "\"Initialized TextLoader for Excel file.\"",
        "f\"Unsupported file type: {extension}. Supported types are .txt, .xlsx, .xls\"",
        "\"models/embedding-001\"",
        "\"Google Generative AI Embeddings initialized successfully.\"",
        "f\"Failed to initialize Google Generative AI Embeddings: {str(e)}\"",
        "\"Failed to initialize embeddings.\"",
        "\"CharacterTextSplitter initialized successfully.\"",
        "f\"Failed to initialize text splitter: {str(e)}\"",
        "\"Failed to initialize text splitter.\"",
        "\"Vector store index created successfully.\"",
        "f\"Failed to create index: {str(e)}\"",
        "\"Failed to create index.\"",
        "\"message\"",
        "\"File uploaded and index created successfully\"",
        "f\"HTTPException: {he.detail}\"",
        "f\"ValueError: {str(ve)}\"",
        "f\"Exception during file upload: {str(e)}\"",
        "f\"Deleted temporary file: {tmp_path}\"",
        "f\"Failed to delete temporary file '{tmp_path}': {str(e)}\"",
        "f\"Deleted temporary text file: {text_tmp_path}\"",
        "f\"Failed to delete temporary text file '{text_tmp_path}': {str(e)}\"",
        "\"/query/\"",
        "\"Empty prompt received.\"",
        "\"Prompt cannot be empty.\"",
        "\"Index not initialized. Please upload a file first.\"",
        "f\"Received query: {prompt}\"",
        "\"Query processed successfully.\"",
        "\"response\"",
        "f\"Exception during query processing: {str(e)}\""
    ],
    "variables": [
        "logger",
        "app",
        "google_api_key",
        "llm",
        "index",
        "prompt",
        "ALLOWED_EXTENSIONS",
        "engine",
        "engine",
        "excel_data",
        "text",
        "tmp_path",
        "text_tmp_path",
        "error_msg",
        "tmp_path",
        "extension",
        "loader",
        "excel_text",
        "text_tmp_path",
        "loader",
        "error_msg",
        "embedding",
        "text_splitter",
        "index_creator",
        "index",
        "prompt",
        "error_msg",
        "response"
    ],
    "comments": [
        "---------------------------",
        "1. Configuration and Setup",
        "---------------------------",
        "Configure logging",
        "Load environment variables from .env file",
        "Initialize FastAPI app",
        "Configure CORS to allow requests from the frontend",
        "Update with your frontend URL if different",
        "---------------------------",
        "2. Initialize LLM and Embeddings",
        "---------------------------",
        "Initialize LLM with Google Generative AI",
        "Global variable to store the index",
        "---------------------------",
        "3. Define Pydantic Models",
        "---------------------------",
        "---------------------------",
        "4. Utility Functions",
        "---------------------------",
        "Specify engine explicitly",
        "---------------------------",
        "5. API Endpoints",
        "---------------------------",
        "Validate file extension",
        "Save the uploaded file to a temporary location",
        "Determine the loader based on file type",
        "Read Excel file and create a temporary text file",
        "This block is redundant due to earlier validation but kept for safety",
        "Create embeddings using Google Generative AI Embeddings",
        "Split text into smaller chunks",
        "Create the index with the specified embedding model and text splitter",
        "Re-raise HTTP exceptions with logging",
        "Handle value errors with logging",
        "Handle all other exceptions with logging",
        "Cleanup temporary files"
    ],
    "docstrings": [
        "\"\"\"Check if the uploaded file has an allowed extension.\"\"\"",
        "\"\"\"\n    Reads an Excel file and converts its content to a single string.\n    Includes all sheets with their respective names.\n    \"\"\"",
        "\"\"\"\n    Endpoint to upload a file (.txt, .xlsx, .xls).\n    Processes the file, creates embeddings, and builds the index.\n    \"\"\"",
        "\"\"\"\n    Endpoint to query the index with a prompt.\n    Returns the generated response from the LLM.\n    \"\"\""
    ],
    "functions": [
        "allowed_file",
        "load_excel_as_text",
        "upload_file",
        "query_index"
    ],
    "classes": [
        "QueryRequest"
    ]
}