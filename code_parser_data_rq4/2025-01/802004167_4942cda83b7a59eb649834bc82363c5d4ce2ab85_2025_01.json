{
    "identifiers": [
        "yfinance",
        "yf",
        "torch",
        "os",
        "path",
        "numpy",
        "np",
        "torch",
        "utils",
        "data",
        "Dataset",
        "timesfm",
        "TimesFm",
        "TimesFmHparams",
        "TimesFmCheckpoint",
        "timesfm",
        "pytorch_patched_decoder",
        "PatchedTimeSeriesDecoder",
        "finetuning_torch",
        "FinetuningConfig",
        "TimesFMFinetuner",
        "huggingface_hub",
        "snapshot_download",
        "numpy",
        "np",
        "pandas",
        "pd",
        "torch",
        "utils",
        "data",
        "Dataset",
        "torch",
        "yfinance",
        "yf",
        "typing",
        "Tuple",
        "Optional",
        "timesfm",
        "TimesFm",
        "TimesFmHparams",
        "Dataset",
        "series",
        "np",
        "ndarray",
        "context_length",
        "horizon_length",
        "series",
        "context_length",
        "horizon_length",
        "_prepare_samples",
        "context_length",
        "horizon_length",
        "start_idx",
        "len",
        "series",
        "total_length",
        "start_idx",
        "context_length",
        "series",
        "start_idx",
        "end_idx",
        "series",
        "end_idx",
        "end_idx",
        "horizon_length",
        "samples",
        "append",
        "x_context",
        "x_future",
        "len",
        "samples",
        "index",
        "Tuple",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "samples",
        "index",
        "torch",
        "tensor",
        "x_context",
        "dtype",
        "torch",
        "float32",
        "torch",
        "tensor",
        "x_future",
        "dtype",
        "torch",
        "float32",
        "torch",
        "zeros_like",
        "x_context",
        "torch",
        "zeros",
        "dtype",
        "torch",
        "x_context",
        "input_padding",
        "freq",
        "x_future",
        "series",
        "np",
        "ndarray",
        "context_length",
        "horizon_length",
        "train_split",
        "Tuple",
        "Dataset",
        "Dataset",
        "len",
        "series",
        "train_split",
        "series",
        "train_size",
        "series",
        "train_size",
        "TimeSeriesDataset",
        "train_data",
        "context_length",
        "context_length",
        "horizon_length",
        "horizon_length",
        "TimeSeriesDataset",
        "val_data",
        "context_length",
        "context_length",
        "horizon_length",
        "horizon_length",
        "train_dataset",
        "val_dataset",
        "load_weights",
        "torch",
        "cuda",
        "is_available",
        "TimesFmHparams",
        "backend",
        "device",
        "per_core_batch_size",
        "horizon_len",
        "num_layers",
        "use_positional_embedding",
        "context_len",
        "TimesFm",
        "hparams",
        "hparams",
        "checkpoint",
        "TimesFmCheckpoint",
        "huggingface_repo_id",
        "repo_id",
        "PatchedTimeSeriesDecoder",
        "tfm",
        "_model_config",
        "load_weights",
        "path",
        "join",
        "snapshot_download",
        "repo_id",
        "torch",
        "load",
        "checkpoint_path",
        "weights_only",
        "model",
        "load_state_dict",
        "loaded_checkpoint",
        "model",
        "to",
        "device",
        "model",
        "hparams",
        "tfm",
        "_model_config",
        "model",
        "TimesFm",
        "val_dataset",
        "Dataset",
        "save_path",
        "Optional",
        "matplotlib",
        "pyplot",
        "plt",
        "model",
        "eval",
        "val_dataset",
        "x_context",
        "unsqueeze",
        "x_padding",
        "unsqueeze",
        "freq",
        "unsqueeze",
        "x_future",
        "unsqueeze",
        "next",
        "model",
        "parameters",
        "device",
        "x_context",
        "to",
        "device",
        "x_padding",
        "to",
        "device",
        "freq",
        "to",
        "device",
        "x_future",
        "to",
        "device",
        "torch",
        "no_grad",
        "model",
        "x_context",
        "x_padding",
        "freq",
        "predictions",
        "predictions_mean",
        "x_context",
        "cpu",
        "numpy",
        "x_future",
        "cpu",
        "numpy",
        "last_patch_pred",
        "cpu",
        "numpy",
        "len",
        "context_vals",
        "len",
        "future_vals",
        "plt",
        "figure",
        "figsize",
        "plt",
        "plot",
        "context_len",
        "context_vals",
        "label",
        "color",
        "linewidth",
        "plt",
        "plot",
        "context_len",
        "context_len",
        "horizon_len",
        "future_vals",
        "label",
        "color",
        "linestyle",
        "linewidth",
        "plt",
        "plot",
        "context_len",
        "context_len",
        "horizon_len",
        "pred_vals",
        "label",
        "color",
        "linewidth",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "title",
        "plt",
        "legend",
        "plt",
        "grid",
        "save_path",
        "plt",
        "savefig",
        "save_path",
        "save_path",
        "plt",
        "close",
        "context_len",
        "horizon_len",
        "Tuple",
        "Dataset",
        "Dataset",
        "yf",
        "download",
        "start",
        "end",
        "df",
        "values",
        "prepare_datasets",
        "series",
        "time_series",
        "context_length",
        "context_len",
        "horizon_length",
        "horizon_len",
        "train_split",
        "len",
        "train_dataset",
        "len",
        "val_dataset",
        "train_dataset",
        "val_dataset",
        "get_model",
        "load_weights",
        "FinetuningConfig",
        "batch_size",
        "num_epochs",
        "learning_rate",
        "use_wandb",
        "get_data",
        "tfm_config",
        "horizon_len",
        "TimesFMFinetuner",
        "model",
        "config",
        "finetuner",
        "finetune",
        "train_dataset",
        "train_dataset",
        "val_dataset",
        "val_dataset",
        "len",
        "results",
        "plot_predictions",
        "model",
        "model",
        "val_dataset",
        "val_dataset",
        "save_path",
        "basic_example"
    ],
    "literals": [
        "\"cuda\"",
        "\"cpu\"",
        "\"google/timesfm-2.0-500m-pytorch\"",
        "\"torch_model.ckpt\"",
        "\"predictions.png\"",
        "\"Historical Data\"",
        "\"blue\"",
        "\"Ground Truth\"",
        "\"green\"",
        "\"--\"",
        "\"Prediction\"",
        "\"red\"",
        "\"Time Step\"",
        "\"Value\"",
        "\"TimesFM Predictions vs Ground Truth\"",
        "f\"Plot saved to {save_path}\"",
        "\"AAPL\"",
        "\"2010-01-01\"",
        "\"2019-01-01\"",
        "\"Close\"",
        "f\"Created datasets:\"",
        "f\"- Training samples: {len(train_dataset)}\"",
        "f\"- Validation samples: {len(val_dataset)}\"",
        "\"\\nStarting finetuning...\"",
        "\"\\nFinetuning completed!\"",
        "f\"Training history: {len(results['history']['train_loss'])} epochs\"",
        "'history'",
        "'train_loss'",
        "\"timesfm_predictions.png\"",
        "\"__main__\""
    ],
    "variables": [
        "series",
        "context_length",
        "horizon_length",
        "samples",
        "total_length",
        "end_idx",
        "x_context",
        "x_future",
        "x_context",
        "x_future",
        "x_context",
        "x_future",
        "input_padding",
        "freq",
        "train_size",
        "train_data",
        "val_data",
        "train_dataset",
        "val_dataset",
        "device",
        "repo_id",
        "hparams",
        "tfm",
        "model",
        "checkpoint_path",
        "loaded_checkpoint",
        "model",
        "x_context",
        "x_padding",
        "freq",
        "x_future",
        "x_context",
        "x_padding",
        "freq",
        "x_future",
        "device",
        "x_context",
        "x_padding",
        "freq",
        "x_future",
        "predictions",
        "predictions_mean",
        "last_patch_pred",
        "context_vals",
        "future_vals",
        "pred_vals",
        "context_len",
        "horizon_len",
        "df",
        "time_series",
        "train_dataset",
        "val_dataset",
        "model",
        "hparams",
        "tfm_config",
        "config",
        "train_dataset",
        "val_dataset",
        "finetuner",
        "results"
    ],
    "comments": [
        "Create datasets",
        "Add batch dimension",
        "[B, N, horizon_len]",
        "[B, horizon_len]"
    ],
    "docstrings": [
        "\"\"\"\nExample usage of the TimesFM Finetuning Framework.\n\"\"\"",
        "\"\"\"Dataset for time series data compatible with TimesFM.\"\"\"",
        "\"\"\"\n        Initialize dataset.\n\n        Args:\n            series: Time series data\n            context_length: Number of past timesteps to use as input\n            horizon_length: Number of future timesteps to predict\n        \"\"\"",
        "\"\"\"Prepare sliding window samples from the time series.\"\"\"",
        "\"\"\"\n    Prepare training and validation datasets from time series data.\n\n    Args:\n        series: Input time series data\n        context_length: Number of past timesteps to use\n        horizon_length: Number of future timesteps to predict\n        train_split: Fraction of data to use for training\n\n    Returns:\n        Tuple of (train_dataset, val_dataset)\n    \"\"\"",
        "\"\"\"\n    Plot model predictions against ground truth for a batch of validation data.\n\n    Args:\n        model: Trained TimesFM model\n        val_dataset: Validation dataset\n        save_path: Path to save the plot\n    \"\"\"",
        "\"\"\"Basic example of finetuning TimesFM on stock data.\"\"\""
    ],
    "functions": [
        "_prepare_samples",
        "__len__",
        "__getitem__",
        "prepare_datasets",
        "get_model",
        "plot_predictions",
        "get_data",
        "basic_example"
    ],
    "classes": [
        "TimeSeriesDataset"
    ]
}