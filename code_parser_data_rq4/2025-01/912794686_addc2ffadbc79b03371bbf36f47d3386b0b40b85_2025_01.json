{
    "identifiers": [
        "os",
        "importlib",
        "inspect",
        "backtrader",
        "bt",
        "streamlit",
        "st",
        "yfinance",
        "yf",
        "pandas",
        "pd",
        "datetime",
        "datetime",
        "timedelta",
        "io",
        "time",
        "random",
        "openpyxl",
        "plotly",
        "graph_objects",
        "go",
        "plotly",
        "subplots",
        "make_subplots",
        "base64",
        "Strategies",
        "buy_and_hold",
        "BuyAndHold",
        "pd",
        "read_csv",
        "TICKERS_CSV_PATH",
        "filename",
        "os",
        "listdir",
        "STRATEGIES_PATH",
        "filename",
        "endswith",
        "filename",
        "filename",
        "importlib",
        "import_module",
        "module_name",
        "name",
        "obj",
        "inspect",
        "getmembers",
        "inspect",
        "isclass",
        "obj",
        "issubclass",
        "obj",
        "bt",
        "Strategy",
        "obj",
        "bt",
        "Strategy",
        "obj",
        "strategies",
        "data",
        "strategy_class",
        "start_cash",
        "commission",
        "bt",
        "Cerebro",
        "cerebro",
        "adddata",
        "data",
        "cerebro",
        "addstrategy",
        "strategy_class",
        "cerebro",
        "broker",
        "setcash",
        "start_cash",
        "cerebro",
        "broker",
        "setcommission",
        "commission",
        "commission",
        "cerebro",
        "run",
        "runonce",
        "cerebro",
        "broker",
        "getvalue",
        "strategies",
        "strategy",
        "order_count",
        "hasattr",
        "strategy",
        "strategy",
        "signal",
        "hasattr",
        "strategy",
        "strategy",
        "roi",
        "hasattr",
        "strategy",
        "final_value",
        "start_cash",
        "final_value",
        "trade_count",
        "current_signal",
        "roi",
        "data",
        "start_cash",
        "data",
        "iloc",
        "data",
        "iloc",
        "start_cash",
        "initial_price",
        "shares",
        "final_price",
        "final_value",
        "ticker",
        "start_date",
        "end_date",
        "max_retries",
        "attempt",
        "max_retries",
        "yf",
        "download",
        "ticker",
        "start",
        "start_date",
        "end",
        "end_date",
        "df",
        "empty",
        "st",
        "write",
        "ticker",
        "df",
        "index",
        "df",
        "index",
        "df",
        "e",
        "attempt",
        "max_retries",
        "st",
        "warning",
        "attempt",
        "ticker",
        "e",
        "time",
        "sleep",
        "random",
        "uniform",
        "st",
        "error",
        "ticker",
        "max_retries",
        "e",
        "pd",
        "DataFrame",
        "st",
        "set_page_config",
        "layout",
        "st",
        "title",
        "st",
        "number_input",
        "min_value",
        "value",
        "step",
        "st",
        "number_input",
        "min_value",
        "max_value",
        "value",
        "step",
        "format",
        "st",
        "date_input",
        "value",
        "datetime",
        "now",
        "timedelta",
        "days",
        "st",
        "date_input",
        "value",
        "end_date",
        "timedelta",
        "days",
        "load_strategies",
        "st",
        "progress",
        "index",
        "row",
        "tickers_df",
        "iterrows",
        "row",
        "row",
        "fetch_data_with_retry",
        "ticker",
        "start_date",
        "end_date",
        "df",
        "empty",
        "all_start_dates",
        "append",
        "df",
        "index",
        "all_end_dates",
        "append",
        "df",
        "index",
        "bt",
        "feeds",
        "PandasData",
        "dataname",
        "df",
        "df",
        "iloc",
        "df",
        "iloc",
        "run_backtest",
        "data",
        "BuyAndHold",
        "start_cash",
        "commission",
        "bh_final_value",
        "start_cash",
        "bh_roi",
        "strat_name",
        "strategy_class",
        "all_strategies",
        "items",
        "run_backtest",
        "data",
        "strategy_class",
        "start_cash",
        "commission",
        "final_value",
        "start_cash",
        "roi",
        "profit_percentage",
        "bh_profit_percentage",
        "results",
        "append",
        "ticker",
        "name",
        "initial_price",
        "final_price",
        "strat_name",
        "round",
        "final_value",
        "round",
        "profit",
        "round",
        "profit_percentage",
        "round",
        "profit_corrected",
        "df",
        "index",
        "strftime",
        "df",
        "index",
        "strftime",
        "trade_count",
        "current_signal",
        "e",
        "st",
        "error",
        "ticker",
        "strat_name",
        "e",
        "progress_bar",
        "progress",
        "index",
        "len",
        "tickers_df",
        "pd",
        "DataFrame",
        "results",
        "st",
        "dataframe",
        "results_df",
        "use_container_width",
        "results_df",
        "empty",
        "results_df",
        "to_csv",
        "index",
        "encode",
        "st",
        "columns",
        "col1",
        "st",
        "download_button",
        "label",
        "data",
        "csv",
        "file_name",
        "mime",
        "col2",
        "io",
        "BytesIO",
        "results_df",
        "to_excel",
        "excel_buffer",
        "index",
        "engine",
        "excel_buffer",
        "getvalue",
        "st",
        "download_button",
        "label",
        "data",
        "excel_data",
        "file_name",
        "mime",
        "all_start_dates",
        "all_end_dates",
        "min",
        "all_start_dates",
        "max",
        "all_end_dates",
        "st",
        "write",
        "overall_start",
        "strftime",
        "overall_end",
        "strftime",
        "st",
        "write",
        "st",
        "warning",
        "st",
        "write",
        "len",
        "results_df",
        "st",
        "write",
        "len",
        "results_df"
    ],
    "literals": [
        "'./Tickers/tickers.csv'",
        "'./Strategies'",
        "'.py'",
        "'__init__.py'",
        "f'Strategies.{module_name}'",
        "'order_count'",
        "'signal'",
        "'roi'",
        "'Close'",
        "'Close'",
        "f\"Data fetched for {ticker}: from {df.index[0]} to {df.index[-1]}\"",
        "f\"Attempt {attempt + 1} failed for {ticker}: {str(e)}. Retrying...\"",
        "f\"Failed to fetch data for {ticker} after {max_retries} attempts: {str(e)}\"",
        "\"wide\"",
        "'Dutch Stock Strategy Backtester'",
        "'Starting Capital (EUR)'",
        "'Commission (fraction)'",
        "\"%.3f\"",
        "'End Date'",
        "'Start Date'",
        "'Ticker'",
        "'Name'",
        "'Close'",
        "'Close'",
        "'Ticker'",
        "'Name'",
        "'Initial Price'",
        "'Final Price'",
        "'Strategy'",
        "'Final Value (EUR)'",
        "'Profit (EUR)'",
        "'Profit (%)'",
        "'Profit_corrected for B&H (%)'",
        "'Start Date'",
        "'%Y-%m-%d'",
        "'End Date'",
        "'%Y-%m-%d'",
        "'Trades'",
        "'Buy/Sell Signal'",
        "f\"Error processing {ticker} with strategy {strat_name}: {str(e)}\"",
        "'utf-8'",
        "\"Download as CSV\"",
        "\"backtesting_results.csv\"",
        "\"text/csv\"",
        "'openpyxl'",
        "\"Download as Excel\"",
        "\"backtesting_results.xlsx\"",
        "\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"",
        "f\"Overall data range: from {overall_start.strftime('%Y-%m-%d')} to {overall_end.strftime('%Y-%m-%d')}\"",
        "'%Y-%m-%d'",
        "'%Y-%m-%d'",
        "\"No valid date range found in the results.\"",
        "\"No results to display or download.\"",
        "f\"Number of tickers processed: {len(set(results_df['Ticker']))}\"",
        "'Ticker'",
        "f\"Number of strategies applied: {len(set(results_df['Strategy']))}\"",
        "'Strategy'"
    ],
    "variables": [
        "TICKERS_CSV_PATH",
        "STRATEGIES_PATH",
        "tickers_df",
        "strategies",
        "module_name",
        "strategies",
        "name",
        "cerebro",
        "strategies",
        "final_value",
        "strategy",
        "trade_count",
        "current_signal",
        "roi",
        "initial_price",
        "final_price",
        "shares",
        "final_value",
        "df",
        "start_cash",
        "commission",
        "end_date",
        "start_date",
        "all_strategies",
        "results",
        "all_start_dates",
        "all_end_dates",
        "progress_bar",
        "ticker",
        "name",
        "df",
        "data",
        "initial_price",
        "final_price",
        "bh_final_value",
        "bh_trade_count",
        "bh_signal",
        "bh_roi",
        "bh_profit",
        "bh_profit_percentage",
        "final_value",
        "trade_count",
        "current_signal",
        "roi",
        "profit",
        "profit_percentage",
        "profit_corrected",
        "results_df",
        "csv",
        "col1",
        "col2",
        "excel_buffer",
        "excel_data",
        "overall_start",
        "overall_end"
    ],
    "comments": [
        "Define folder paths",
        "Read tickers from CSV",
        "Remove '.py'",
        "Function to compare the strategy to buy and hold",
        "Increased max delay time",
        "Streamlit app",
        "Set the page to wide mode",
        "User inputs",
        "Date range selection",
        "Load all strategies",
        "Fetch data with retry",
        "Calculate init and latest price to give a feeling of stock movement",
        "Run Buy and Hold strategy",
        "Calculate the difference from Buy and Hold",
        "Update progress bar",
        "Display results",
        "Download buttons",
        "Display the actual date range of the data",
        "Display some statistics about the data"
    ],
    "docstrings": [],
    "functions": [
        "load_strategies",
        "run_backtest",
        "calculate_buy_and_hold",
        "fetch_data_with_retry"
    ],
    "classes": []
}