{
    "identifiers": [
        "Serval",
        "ApiServer",
        "TestFixture",
        "Category",
        "SetUp",
        "_env",
        "TestEnvironment",
        "DataFiles",
        "Models",
        "DataFile",
        "Id",
        "FILE_ID1",
        "Owner",
        "Name",
        "FILE_NAME1",
        "Filename",
        "FILE_NAME1",
        "Format",
        "Shared",
        "Contracts",
        "FileFormat",
        "Text",
        "DataFiles",
        "Models",
        "DataFile",
        "Id",
        "FILE_ID2",
        "Owner",
        "Name",
        "FILE_NAME2",
        "Filename",
        "FILE_NAME2",
        "Format",
        "Shared",
        "Contracts",
        "FileFormat",
        "Text",
        "DataFiles",
        "Models",
        "DataFile",
        "Id",
        "FILE_ID3",
        "Owner",
        "Name",
        "FILE_NAME3",
        "Filename",
        "FILE_NAME3",
        "Format",
        "Shared",
        "Contracts",
        "FileFormat",
        "Text",
        "_env",
        "DataFiles",
        "InsertAllAsync",
        "file1",
        "file2",
        "file3",
        "DataFiles",
        "Models",
        "Corpus",
        "Id",
        "CORPUS_ID1",
        "Owner",
        "Name",
        "CORPUS_NAME1",
        "Language",
        "Files",
        "DataFiles",
        "Models",
        "CorpusFile",
        "FileRef",
        "FILE_ID1",
        "DataFiles",
        "Models",
        "Corpus",
        "Id",
        "CORPUS_ID2",
        "Owner",
        "Name",
        "CORPUS_NAME2",
        "Language",
        "Files",
        "DataFiles",
        "Models",
        "CorpusFile",
        "FileRef",
        "FILE_ID2",
        "DataFiles",
        "Models",
        "Corpus",
        "Id",
        "CORPUS_ID3",
        "Owner",
        "Name",
        "CORPUS_NAME3",
        "Language",
        "Files",
        "DataFiles",
        "Models",
        "CorpusFile",
        "FileRef",
        "FILE_ID3",
        "_env",
        "Corpora",
        "InsertAllAsync",
        "corpus1",
        "corpus2",
        "corpus3",
        "Test",
        "TestCase",
        "Scopes",
        "ReadFiles",
        "TestCase",
        "Scopes",
        "CreateTranslationEngines",
        "scope",
        "expectedStatusCode",
        "_env",
        "CreateCorporaClient",
        "scope",
        "expectedStatusCode",
        "ICollection",
        "Corpus",
        "corporaClient",
        "GetAllAsync",
        "Assert",
        "That",
        "results",
        "Is",
        "Not",
        "Null",
        "Assert",
        "That",
        "results",
        "Count",
        "Is",
        "EqualTo",
        "Assert",
        "That",
        "results",
        "All",
        "c",
        "Revision",
        "Is",
        "ServalApiException",
        "Assert",
        "ThrowsAsync",
        "ServalApiException",
        "corporaClient",
        "GetAllAsync",
        "Assert",
        "That",
        "ex",
        "Is",
        "Not",
        "Null",
        "Assert",
        "That",
        "ex",
        "StatusCode",
        "Is",
        "EqualTo",
        "expectedStatusCode",
        "Test",
        "TestCase",
        "Scopes",
        "ReadFiles",
        "CORPUS_ID1",
        "TestCase",
        "Scopes",
        "ReadFiles",
        "CORPUS_ID3",
        "TestCase",
        "Scopes",
        "CreateTranslationEngines",
        "CORPUS_ID1",
        "TestCase",
        "Scopes",
        "ReadFiles",
        "DOES_NOT_EXIST_ID",
        "TestCase",
        "Scopes",
        "ReadFiles",
        "scope",
        "expectedStatusCode",
        "corpusId",
        "_env",
        "CreateCorporaClient",
        "scope",
        "expectedStatusCode",
        "corporaClient",
        "GetAsync",
        "corpusId",
        "Assert",
        "That",
        "corpus",
        "Is",
        "Not",
        "Null",
        "Assert",
        "That",
        "corpus",
        "Id",
        "Is",
        "EqualTo",
        "corpusId",
        "ServalApiException",
        "Assert",
        "ThrowsAsync",
        "ServalApiException",
        "corporaClient",
        "GetAsync",
        "corpusId",
        "Assert",
        "That",
        "ex",
        "StatusCode",
        "Is",
        "EqualTo",
        "expectedStatusCode",
        "Assert",
        "Fail",
        "Test",
        "TestCase",
        "Scopes",
        "CreateFiles",
        "Scopes",
        "ReadFiles",
        "TestCase",
        "Scopes",
        "ReadFiles",
        "scope",
        "expectedStatusCode",
        "_env",
        "CreateCorporaClient",
        "scope",
        "expectedStatusCode",
        "CorpusConfig",
        "Language",
        "Files",
        "CorpusFileConfig",
        "corporaClient",
        "CreateAsync",
        "newCorpus",
        "Assert",
        "That",
        "created",
        "Is",
        "Not",
        "Null",
        "corporaClient",
        "GetAllAsync",
        "Assert",
        "That",
        "allCorpora",
        "Count",
        "Is",
        "EqualTo",
        "ServalApiException",
        "Assert",
        "ThrowsAsync",
        "ServalApiException",
        "CorpusConfig",
        "Language",
        "Files",
        "CorpusFileConfig",
        "corporaClient",
        "CreateAsync",
        "newCorpus",
        "Assert",
        "That",
        "ex",
        "StatusCode",
        "Is",
        "EqualTo",
        "expectedStatusCode",
        "Test",
        "TestCase",
        "Scopes",
        "UpdateFiles",
        "Scopes",
        "ReadFiles",
        "CORPUS_ID1",
        "TestCase",
        "Scopes",
        "UpdateFiles",
        "Scopes",
        "ReadFiles",
        "CORPUS_ID3",
        "TestCase",
        "Scopes",
        "ReadFiles",
        "CORPUS_ID1",
        "TestCase",
        "Scopes",
        "UpdateFiles",
        "Scopes",
        "ReadFiles",
        "DOES_NOT_EXIST_ID",
        "scope",
        "expectedStatusCode",
        "corpusId",
        "_env",
        "CreateCorporaClient",
        "scope",
        "expectedStatusCode",
        "CorpusFileConfig",
        "FileId",
        "FILE_ID1",
        "TextId",
        "corporaClient",
        "UpdateAsync",
        "corpusId",
        "updateFiles",
        "Assert",
        "That",
        "updatedCorpus",
        "Is",
        "Not",
        "Null",
        "Assert",
        "That",
        "updatedCorpus",
        "Files",
        "Any",
        "f",
        "TextId",
        "Is",
        "ServalApiException",
        "Assert",
        "ThrowsAsync",
        "ServalApiException",
        "corporaClient",
        "UpdateAsync",
        "corpusId",
        "CorpusFileConfig",
        "Assert",
        "That",
        "ex",
        "StatusCode",
        "Is",
        "EqualTo",
        "expectedStatusCode",
        "Assert",
        "Fail",
        "Test",
        "TestCase",
        "Scopes",
        "DeleteFiles",
        "Scopes",
        "ReadFiles",
        "CORPUS_ID1",
        "TestCase",
        "Scopes",
        "DeleteFiles",
        "Scopes",
        "ReadFiles",
        "CORPUS_ID3",
        "TestCase",
        "Scopes",
        "ReadFiles",
        "CORPUS_ID1",
        "TestCase",
        "Scopes",
        "DeleteFiles",
        "Scopes",
        "ReadFiles",
        "DOES_NOT_EXIST_ID",
        "scope",
        "expectedStatusCode",
        "corpusId",
        "_env",
        "CreateCorporaClient",
        "scope",
        "expectedStatusCode",
        "corporaClient",
        "DeleteAsync",
        "corpusId",
        "ServalApiException",
        "Assert",
        "ThrowsAsync",
        "ServalApiException",
        "corporaClient",
        "GetAsync",
        "corpusId",
        "Assert",
        "That",
        "exCheck",
        "StatusCode",
        "Is",
        "EqualTo",
        "ServalApiException",
        "Assert",
        "ThrowsAsync",
        "ServalApiException",
        "corporaClient",
        "DeleteAsync",
        "corpusId",
        "Assert",
        "That",
        "ex",
        "StatusCode",
        "Is",
        "EqualTo",
        "expectedStatusCode",
        "Assert",
        "Fail",
        "Test",
        "Scopes",
        "DeleteFiles",
        "Scopes",
        "ReadFiles",
        "_env",
        "CreateCorporaClient",
        "scope",
        "_env",
        "CreateDataFilesClient",
        "scope",
        "corporaClient",
        "GetAsync",
        "CORPUS_ID1",
        "Assert",
        "That",
        "originalCorpus1",
        "Files",
        "Count",
        "Is",
        "EqualTo",
        "dataFilesClient",
        "DeleteAsync",
        "FILE_ID1",
        "corporaClient",
        "GetAsync",
        "CORPUS_ID1",
        "Assert",
        "That",
        "updatedCorpus1",
        "Files",
        "Count",
        "Is",
        "EqualTo",
        "corporaClient",
        "GetAsync",
        "CORPUS_ID2",
        "Assert",
        "That",
        "updatedCorpus2",
        "Files",
        "Count",
        "Is",
        "EqualTo",
        "Test",
        "Scopes",
        "CreateFiles",
        "Scopes",
        "ReadFiles",
        "_env",
        "CreateCorporaClient",
        "scope",
        "CorpusConfig",
        "Language",
        "Files",
        "CorpusFileConfig",
        "corporaClient",
        "CreateAsync",
        "newCorpus",
        "Assert",
        "That",
        "created",
        "Is",
        "Not",
        "Null",
        "corporaClient",
        "GetAllAsync",
        "Assert",
        "That",
        "allCorpora",
        "Count",
        "Is",
        "EqualTo",
        "TearDown",
        "_env",
        "Dispose",
        "DisposableBase",
        "MongoClientSettings",
        "LinqProvider",
        "LinqProvider",
        "V2",
        "_mongoClient",
        "MongoClient",
        "clientSettings",
        "ResetDatabases",
        "Factory",
        "ServalWebApplicationFactory",
        "_scope",
        "Factory",
        "Services",
        "CreateScope",
        "DataFiles",
        "_scope",
        "ServiceProvider",
        "GetRequiredService",
        "IRepository",
        "DataFiles",
        "Models",
        "DataFile",
        "Corpora",
        "_scope",
        "ServiceProvider",
        "GetRequiredService",
        "IRepository",
        "DataFiles",
        "Models",
        "Corpus",
        "IRepository",
        "DataFiles",
        "Models",
        "DataFile",
        "IRepository",
        "DataFiles",
        "Models",
        "Corpus",
        "scope",
        "Factory",
        "WithWebHostBuilder",
        "CreateClient",
        "scope",
        "httpClient",
        "DefaultRequestHeaders",
        "Add",
        "Join",
        "scope",
        "DataFilesClient",
        "httpClient",
        "scope",
        "Factory",
        "WithWebHostBuilder",
        "CreateClient",
        "scope",
        "httpClient",
        "DefaultRequestHeaders",
        "Add",
        "Join",
        "scope",
        "CorporaClient",
        "httpClient",
        "_mongoClient",
        "DropDatabase",
        "_mongoClient",
        "DropDatabase",
        "_scope",
        "Dispose",
        "Factory",
        "Dispose",
        "ResetDatabases"
    ],
    "literals": [
        "\"Integration\"",
        "\"000000000000000000000001\"",
        "\"sample1.txt\"",
        "\"000000000000000000000002\"",
        "\"sample2.txt\"",
        "\"000000000000000000000003\"",
        "\"sample3.txt\"",
        "\"000000000000000000000004\"",
        "\"100000000000000000000001\"",
        "\"sample1\"",
        "\"100000000000000000000002\"",
        "\"sample2\"",
        "\"100000000000000000000003\"",
        "\"sample3\"",
        "\"client1\"",
        "\"client1\"",
        "\"client2\"",
        "\"client1\"",
        "\"en\"",
        "\"client1\"",
        "\"fr\"",
        "\"client2\"",
        "\"de\"",
        "\"phony_corpus_id\"",
        "\"Unanticipated expectedStatusCode. Check test case for typo.\"",
        "\"es\"",
        "\"es\"",
        "\"myText\"",
        "\"myText\"",
        "\"Unanticipated expectedStatusCode. Check test case for typo.\"",
        "\"Unanticipated expectedStatusCode. Check test case for typo.\"",
        "\"es\"",
        "\"Scope\"",
        "\" \"",
        "\"Scope\"",
        "\" \"",
        "\"serval_test\"",
        "\"serval_test_jobs\""
    ],
    "variables": [
        "TestEnvironment",
        "_env",
        "FILE_ID1",
        "FILE_NAME1",
        "FILE_ID2",
        "FILE_NAME2",
        "FILE_ID3",
        "FILE_NAME3",
        "DOES_NOT_EXIST_ID",
        "CORPUS_ID1",
        "CORPUS_NAME1",
        "CORPUS_ID2",
        "CORPUS_NAME2",
        "CORPUS_ID3",
        "CORPUS_NAME3",
        "file1",
        "file2",
        "file3",
        "corpus1",
        "corpus2",
        "corpus3",
        "corporaClient",
        "results",
        "ex",
        "corporaClient",
        "corpus",
        "ex",
        "corporaClient",
        "newCorpus",
        "created",
        "allCorpora",
        "ex",
        "newCorpus",
        "corporaClient",
        "updateFiles",
        "updatedCorpus",
        "ex",
        "corporaClient",
        "exCheck",
        "ex",
        "scope",
        "corporaClient",
        "dataFilesClient",
        "originalCorpus1",
        "updatedCorpus1",
        "updatedCorpus2",
        "scope",
        "corporaClient",
        "newCorpus",
        "created",
        "allCorpora",
        "MongoClient",
        "_mongoClient",
        "IServiceScope",
        "_scope",
        "clientSettings",
        "ServalWebApplicationFactory",
        "Factory",
        "DataFiles",
        "Corpora",
        "HttpClient",
        "httpClient",
        "HttpClient",
        "httpClient"
    ],
    "comments": [
        "add corpora ID's and names",
        "Insert some data files for testing",
        "Insert some corpora for testing",
        "[TestCase(new[] { Scopes.ReadFiles }, 401)] // TODO Potentially test 401 if needed",
        "goto case 403; // If you choose to handle 401 as 403",
        "[TestCase(new[] { Scopes.ReadFiles }, 401, \"corpus_id_1\")] // 401 scenario if desired"
    ],
    "docstrings": [],
    "functions": [
        "SetUp",
        "GetAllAsync",
        "GetByIdAsync",
        "CreateAsync",
        "UpdateAsync",
        "DeleteAsync",
        "PropagateFileDeletedToCorpus",
        "AddCorpusGetAllCorpora",
        "TearDown",
        "TestEnvironment",
        "DataFilesClient",
        "CreateDataFilesClient",
        "CorporaClient",
        "CreateCorporaClient",
        "ResetDatabases",
        "DisposeManagedResources"
    ],
    "classes": [
        "CorporaTests",
        "TestEnvironment"
    ]
}