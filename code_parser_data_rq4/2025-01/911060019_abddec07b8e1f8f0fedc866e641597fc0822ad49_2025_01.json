{
    "identifiers": [
        "_weakref",
        "getweakrefcount",
        "getweakrefs",
        "proxy",
        "CallableProxyType",
        "ProxyType",
        "ReferenceType",
        "_remove_dead_weakref",
        "_weakrefset",
        "_IterationGuard",
        "_collections_abc",
        "sys",
        "itertools",
        "ProxyType",
        "CallableProxyType",
        "_collections_abc",
        "MutableSet",
        "register",
        "cls",
        "meth",
        "callback",
        "meth",
        "__self__",
        "meth",
        "__func__",
        "AttributeError",
        "format",
        "meth",
        "arg",
        "self_wr",
        "_alive",
        "callback",
        "callback",
        "__new__",
        "cls",
        "obj",
        "_cb",
        "func",
        "_cb",
        "meth",
        "__call__",
        "_func_ref",
        "obj",
        "func",
        "_meth_type",
        "func",
        "obj",
        "other",
        "isinstance",
        "other",
        "WeakMethod",
        "_alive",
        "other",
        "_alive",
        "other",
        "__eq__",
        "other",
        "_func_ref",
        "other",
        "_func_ref",
        "other",
        "isinstance",
        "other",
        "WeakMethod",
        "_alive",
        "other",
        "_alive",
        "other",
        "__ne__",
        "other",
        "_func_ref",
        "other",
        "_func_ref",
        "__hash__",
        "_collections_abc",
        "MutableMapping",
        "other",
        "kw",
        "wr",
        "selfref",
        "_atomic_removal",
        "_remove_dead_weakref",
        "selfref",
        "_iterating",
        "_pending_removals",
        "append",
        "wr",
        "key",
        "_atomic_removal",
        "data",
        "wr",
        "key",
        "remove",
        "update",
        "other",
        "kw",
        "_atomic_removal",
        "_remove_dead_weakref",
        "_pending_removals",
        "pop",
        "data",
        "pop",
        "IndexError",
        "_atomic_removal",
        "d",
        "key",
        "key",
        "_pending_removals",
        "_commit_removals",
        "data",
        "key",
        "o",
        "KeyError",
        "key",
        "o",
        "key",
        "_pending_removals",
        "_commit_removals",
        "data",
        "key",
        "_pending_removals",
        "_commit_removals",
        "len",
        "data",
        "key",
        "_pending_removals",
        "_commit_removals",
        "data",
        "key",
        "KeyError",
        "o",
        "__class__",
        "id",
        "key",
        "value",
        "_pending_removals",
        "_commit_removals",
        "data",
        "KeyedRef",
        "value",
        "_remove",
        "key",
        "_pending_removals",
        "_commit_removals",
        "WeakValueDictionary",
        "_IterationGuard",
        "key",
        "wr",
        "data",
        "items",
        "wr",
        "o",
        "o",
        "copy",
        "memo",
        "copy",
        "deepcopy",
        "_pending_removals",
        "_commit_removals",
        "__class__",
        "_IterationGuard",
        "key",
        "wr",
        "data",
        "items",
        "wr",
        "o",
        "deepcopy",
        "key",
        "memo",
        "o",
        "key",
        "_pending_removals",
        "_commit_removals",
        "data",
        "key",
        "KeyError",
        "wr",
        "o",
        "o",
        "_pending_removals",
        "_commit_removals",
        "_IterationGuard",
        "k",
        "wr",
        "data",
        "items",
        "wr",
        "v",
        "k",
        "v",
        "_pending_removals",
        "_commit_removals",
        "_IterationGuard",
        "k",
        "wr",
        "data",
        "items",
        "wr",
        "k",
        "keys",
        "_pending_removals",
        "_commit_removals",
        "_IterationGuard",
        "data",
        "values",
        "_pending_removals",
        "_commit_removals",
        "_IterationGuard",
        "wr",
        "data",
        "values",
        "wr",
        "obj",
        "obj",
        "_pending_removals",
        "_commit_removals",
        "data",
        "popitem",
        "wr",
        "o",
        "key",
        "o",
        "key",
        "args",
        "_pending_removals",
        "_commit_removals",
        "data",
        "pop",
        "key",
        "KeyError",
        "o",
        "args",
        "args",
        "KeyError",
        "key",
        "o",
        "key",
        "data",
        "key",
        "KeyError",
        "o",
        "_pending_removals",
        "_commit_removals",
        "data",
        "KeyedRef",
        "_remove",
        "key",
        "o",
        "other",
        "kwargs",
        "_pending_removals",
        "_commit_removals",
        "data",
        "other",
        "hasattr",
        "other",
        "other",
        "key",
        "o",
        "other",
        "items",
        "KeyedRef",
        "o",
        "_remove",
        "key",
        "key",
        "o",
        "kwargs",
        "items",
        "KeyedRef",
        "o",
        "_remove",
        "key",
        "_pending_removals",
        "_commit_removals",
        "data",
        "values",
        "other",
        "update",
        "other",
        "other",
        "isinstance",
        "other",
        "_collections_abc",
        "Mapping",
        "copy",
        "c",
        "update",
        "other",
        "c",
        "other",
        "isinstance",
        "other",
        "_collections_abc",
        "Mapping",
        "__class__",
        "c",
        "update",
        "other",
        "c",
        "update",
        "c",
        "ob",
        "callback",
        "key",
        "__new__",
        "ob",
        "callback",
        "key",
        "ob",
        "callback",
        "key",
        "ob",
        "callback",
        "_collections_abc",
        "MutableMapping",
        "k",
        "selfref",
        "selfref",
        "_iterating",
        "_pending_removals",
        "append",
        "k",
        "data",
        "k",
        "KeyError",
        "remove",
        "update",
        "_pending_removals",
        "pop",
        "data",
        "pop",
        "IndexError",
        "d",
        "key",
        "KeyError",
        "data",
        "k",
        "k",
        "_pending_removals",
        "k",
        "d",
        "key",
        "data",
        "key",
        "key",
        "data",
        "key",
        "_dirty_len",
        "_pending_removals",
        "_scrub_removals",
        "len",
        "data",
        "len",
        "_pending_removals",
        "__class__",
        "id",
        "key",
        "value",
        "data",
        "key",
        "_remove",
        "value",
        "WeakKeyDictionary",
        "_IterationGuard",
        "key",
        "value",
        "data",
        "items",
        "key",
        "o",
        "value",
        "copy",
        "memo",
        "copy",
        "deepcopy",
        "__class__",
        "_IterationGuard",
        "key",
        "value",
        "data",
        "items",
        "key",
        "o",
        "deepcopy",
        "value",
        "memo",
        "key",
        "data",
        "get",
        "key",
        "key",
        "key",
        "wr",
        "data",
        "_IterationGuard",
        "wr",
        "value",
        "data",
        "items",
        "wr",
        "key",
        "key",
        "value",
        "_IterationGuard",
        "wr",
        "data",
        "wr",
        "obj",
        "obj",
        "keys",
        "_IterationGuard",
        "wr",
        "value",
        "data",
        "items",
        "wr",
        "value",
        "data",
        "data",
        "popitem",
        "key",
        "o",
        "o",
        "value",
        "key",
        "args",
        "data",
        "pop",
        "key",
        "args",
        "key",
        "data",
        "setdefault",
        "key",
        "_remove",
        "kwargs",
        "data",
        "hasattr",
        "key",
        "value",
        "items",
        "key",
        "_remove",
        "value",
        "len",
        "kwargs",
        "update",
        "kwargs",
        "other",
        "update",
        "other",
        "other",
        "isinstance",
        "other",
        "_collections_abc",
        "Mapping",
        "copy",
        "c",
        "update",
        "other",
        "c",
        "other",
        "isinstance",
        "other",
        "_collections_abc",
        "Mapping",
        "__class__",
        "c",
        "update",
        "other",
        "c",
        "update",
        "c",
        "itertools",
        "count",
        "obj",
        "func",
        "args",
        "kwargs",
        "_registered_with_atexit",
        "atexit",
        "atexit",
        "register",
        "_exitfunc",
        "_Info",
        "obj",
        "func",
        "args",
        "kwargs",
        "next",
        "_index_iter",
        "_registry",
        "info",
        "_",
        "_registry",
        "pop",
        "info",
        "_shutdown",
        "info",
        "func",
        "info",
        "args",
        "info",
        "kwargs",
        "_registry",
        "get",
        "info",
        "info",
        "weakref",
        "obj",
        "_registry",
        "pop",
        "obj",
        "info",
        "func",
        "info",
        "args",
        "info",
        "kwargs",
        "_registry",
        "get",
        "info",
        "info",
        "weakref",
        "obj",
        "obj",
        "info",
        "func",
        "info",
        "args",
        "info",
        "kwargs",
        "property",
        "_registry",
        "property",
        "_registry",
        "get",
        "info",
        "info",
        "atexit",
        "atexit",
        "setter",
        "value",
        "_registry",
        "get",
        "info",
        "value",
        "_registry",
        "get",
        "info",
        "info",
        "weakref",
        "obj",
        "id",
        "id",
        "obj",
        "id",
        "obj",
        "classmethod",
        "cls",
        "f",
        "i",
        "f",
        "i",
        "cls",
        "_registry",
        "items",
        "i",
        "atexit",
        "L",
        "sort",
        "key",
        "item",
        "item",
        "index",
        "f",
        "f",
        "i",
        "L",
        "classmethod",
        "cls",
        "cls",
        "_registry",
        "gc",
        "gc",
        "isenabled",
        "gc",
        "disable",
        "pending",
        "finalize",
        "_dirty",
        "cls",
        "_select_for_exit",
        "pending",
        "pending",
        "pop",
        "f",
        "sys",
        "excepthook",
        "sys",
        "exc_info",
        "f",
        "cls",
        "_registry",
        "reenable_gc",
        "gc",
        "enable"
    ],
    "literals": [
        "\"ref\"",
        "\"proxy\"",
        "\"getweakrefcount\"",
        "\"getweakrefs\"",
        "\"WeakKeyDictionary\"",
        "\"ReferenceType\"",
        "\"ProxyType\"",
        "\"CallableProxyType\"",
        "\"ProxyTypes\"",
        "\"WeakValueDictionary\"",
        "\"WeakSet\"",
        "\"WeakMethod\"",
        "\"finalize\"",
        "\"_func_ref\"",
        "\"_meth_type\"",
        "\"_alive\"",
        "\"__weakref__\"",
        "\"argument should be a bound method, not {}\"",
        "\"<%s at %#x>\"",
        "\"items\"",
        "\"key\"",
        "\"<%s at %#x>\"",
        "\"items\"",
        "\"weakref\"",
        "\"func\"",
        "\"args\"",
        "\"kwargs\"",
        "\"atexit\"",
        "\"index\"",
        "'<%s object at %#x; dead>'",
        "'<%s object at %#x; for %r at %#x>'"
    ],
    "variables": [
        "ProxyTypes",
        "__all__",
        "__slots__",
        "obj",
        "func",
        "_alive",
        "_func_ref",
        "_meth_type",
        "_alive",
        "self_wr",
        "obj",
        "func",
        "__hash__",
        "_remove",
        "_pending_removals",
        "_iterating",
        "data",
        "pop",
        "d",
        "key",
        "o",
        "o",
        "key",
        "o",
        "key",
        "__copy__",
        "o",
        "wr",
        "o",
        "v",
        "__iter__",
        "obj",
        "key",
        "wr",
        "o",
        "o",
        "o",
        "o",
        "o",
        "key",
        "d",
        "other",
        "d",
        "key",
        "d",
        "key",
        "c",
        "c",
        "__slots__",
        "key",
        "data",
        "_remove",
        "_pending_removals",
        "_iterating",
        "_dirty_len",
        "pop",
        "d",
        "key",
        "d",
        "_pending_removals",
        "_dirty_len",
        "_dirty_len",
        "o",
        "o",
        "__copy__",
        "o",
        "o",
        "wr",
        "key",
        "obj",
        "__iter__",
        "_dirty_len",
        "key",
        "value",
        "o",
        "_dirty_len",
        "d",
        "d",
        "c",
        "c",
        "__slots__",
        "_registry",
        "_shutdown",
        "_index_iter",
        "_dirty",
        "_registered_with_atexit",
        "__slots__",
        "finalize",
        "_registered_with_atexit",
        "info",
        "info",
        "weakref",
        "info",
        "func",
        "info",
        "args",
        "info",
        "kwargs",
        "info",
        "atexit",
        "info",
        "index",
        "finalize",
        "_dirty",
        "info",
        "info",
        "obj",
        "info",
        "obj",
        "info",
        "info",
        "info",
        "atexit",
        "info",
        "obj",
        "L",
        "reenable_gc",
        "reenable_gc",
        "pending",
        "pending",
        "finalize",
        "_dirty",
        "f",
        "finalize",
        "_shutdown"
    ],
    "comments": [
        "Naming convention: Variables named \"wr\" are weak reference objects;",
        "they are called this instead of \"ref\" to avoid name collisions with",
        "the module-global ref() function imported from _weakref.",
        "Import after _weakref to avoid circular import.",
        "The self-weakref trick is needed to avoid creating a reference",
        "cycle.",
        "We inherit the constructor without worrying about the input",
        "dictionary; since it uses our .update() method, we get the right",
        "checks (if the other dictionary is a WeakValueDictionary,",
        "objects are unwrapped on the way out, and we always wrap on the",
        "way in).",
        "Atomic removal is necessary since this function",
        "can be called asynchronously by the GC",
        "A list of keys to be removed",
        "We shouldn't encounter any KeyError, because this method should",
        "always be called *before* mutating the dict.",
        "This should only happen",
        "A list of dead weakrefs (keys to be removed)",
        "NOTE: We don't need to call this method before mutating the dict,",
        "because a dead weakref never compares equal to a live weakref,",
        "even if they happened to refer to equal objects.",
        "However, it means keys may already have been removed.",
        "self._pending_removals may still contain keys which were",
        "explicitly removed, we have to scrub them (see issue #21173).",
        "Finalizer objects don't have any state of their own.  They are",
        "just used as keys to lookup _Info objects in the registry.  This",
        "ensures that they cannot be part of a ref-cycle.",
        "We may register the exit function more than once because",
        "of a thread race, but that is harmless",
        "Return live finalizers marked for exit, oldest first",
        "At shutdown invoke finalizers for which atexit is true.",
        "This is called once all other non-daemonic threads have been",
        "joined.",
        "gc is disabled, so (assuming no daemonic",
        "threads) the following is the only line in",
        "this function which might trigger creation",
        "of a new finalizer",
        "prevent any more finalizers from executing during shutdown"
    ],
    "docstrings": [
        "\"\"\"Weak reference support for Python.\n\nThis module is an implementation of PEP 205:\n\nhttps://peps.python.org/pep-0205/\n\"\"\"",
        "\"\"\"\n    A custom `weakref.ref` subclass which simulates a weak reference to\n    a bound method, working around the lifetime problem of bound methods.\n    \"\"\"",
        "\"\"\"Mapping class that references values weakly.\n\n    Entries in the dictionary will be discarded when no strong\n    reference to the value exists anymore\n    \"\"\"",
        "\"\"\"Return an iterator that yields the weak references to the values.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the values around longer than needed.\n\n        \"\"\"",
        "\"\"\"Return a list of weak references to the values.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the values around longer than needed.\n\n        \"\"\"",
        "\"\"\"Specialized reference that includes a key corresponding to the value.\n\n    This is used in the WeakValueDictionary to avoid having to create\n    a function object for each key stored in the mapping.  A shared\n    callback object can use the 'key' attribute of a KeyedRef instead\n    of getting a reference to the key from an enclosing scope.\n\n    \"\"\"",
        "\"\"\" Mapping class that references keys weakly.\n\n    Entries in the dictionary will be discarded when there is no\n    longer a strong reference to the key. This can be used to\n    associate additional data with an object owned by other parts of\n    an application without adding attributes to those objects. This\n    can be especially useful with objects that override attribute\n    accesses.\n    \"\"\"",
        "\"\"\"Return a list of weak references to the keys.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the keys around longer than needed.\n\n        \"\"\"",
        "\"\"\"Class for finalization of weakrefable objects\n\n    finalize(obj, func, *args, **kwargs) returns a callable finalizer\n    object which will be called when obj is garbage collected. The\n    first time the finalizer is called it evaluates func(*arg, **kwargs)\n    and returns the result. After this the finalizer is dead, and\n    calling it just returns None.\n\n    When the program exits any remaining finalizers for which the\n    atexit attribute is true will be run in reverse order of creation.\n    By default atexit is true.\n    \"\"\"",
        "\"\"\"If alive then mark as dead and return func(*args, **kwargs);\n        otherwise return None\"\"\"",
        "\"\"\"If alive then mark as dead and return (obj, func, args, kwargs);\n        otherwise return None\"\"\"",
        "\"\"\"If alive then return (obj, func, args, kwargs);\n        otherwise return None\"\"\"",
        "\"\"\"Whether finalizer is alive\"\"\"",
        "\"\"\"Whether finalizer should be called at exit\"\"\""
    ],
    "functions": [
        "__new__",
        "_cb",
        "__call__",
        "__eq__",
        "__ne__",
        "remove",
        "_commit_removals",
        "__getitem__",
        "__delitem__",
        "__len__",
        "__contains__",
        "__repr__",
        "__setitem__",
        "copy",
        "__deepcopy__",
        "get",
        "items",
        "keys",
        "itervaluerefs",
        "values",
        "popitem",
        "pop",
        "setdefault",
        "update",
        "valuerefs",
        "__ior__",
        "__or__",
        "__ror__",
        "__new__",
        "remove",
        "_commit_removals",
        "_scrub_removals",
        "__delitem__",
        "__getitem__",
        "__len__",
        "__repr__",
        "__setitem__",
        "copy",
        "__deepcopy__",
        "get",
        "__contains__",
        "items",
        "keys",
        "values",
        "keyrefs",
        "popitem",
        "pop",
        "setdefault",
        "update",
        "__ior__",
        "__or__",
        "__ror__",
        "__call__",
        "detach",
        "peek",
        "alive",
        "atexit",
        "atexit",
        "__repr__",
        "_select_for_exit",
        "_exitfunc"
    ],
    "classes": [
        "WeakMethod",
        "WeakValueDictionary",
        "KeyedRef",
        "WeakKeyDictionary",
        "finalize",
        "_Info"
    ]
}