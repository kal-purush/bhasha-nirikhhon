{
    "identifiers": [
        "os",
        "time",
        "pandas",
        "pd",
        "utils",
        "cluster_utils",
        "generate_clusters_parallel",
        "utils",
        "dd_utils",
        "extract_attributes_thresholds",
        "find_violating_pairs_parallel",
        "utils",
        "difference",
        "generate_difference_file",
        "utils",
        "distance_utils",
        "build_all_distance_lookups",
        "utils",
        "evaluation_utils",
        "calculate_precision_recall_f1",
        "check_all_pairs_covered",
        "utils",
        "MWVC",
        "build_graph_parallel",
        "utils",
        "preprocessing",
        "generate_probability_files",
        "open",
        "dd_constraints_file",
        "encoding",
        "f",
        "eval",
        "f",
        "read",
        "open",
        "attribute_thresholds_file",
        "encoding",
        "f",
        "eval",
        "f",
        "read",
        "time",
        "time",
        "extract_attributes_thresholds",
        "dd_constraints",
        "time",
        "time",
        "start_time",
        "generate_difference_file",
        "dirty_file",
        "clean_file",
        "difference_file",
        "pd",
        "read_csv",
        "difference_file",
        "row",
        "row",
        "_",
        "row",
        "diff_df",
        "iterrows",
        "len",
        "ground_truth_errors",
        "pd",
        "read_csv",
        "dirty_file",
        "dtype",
        "dirty_df",
        "columns",
        "generate_probability_files",
        "dirty_file",
        "probability_file",
        "dataset_scheme",
        "dirty_df",
        "to_dict",
        "orient",
        "len",
        "data_instance",
        "length",
        "time",
        "time",
        "build_all_distance_lookups",
        "data_instance",
        "sorted_thresholds",
        "FIXED_NUM_PROCESSES",
        "time",
        "time",
        "end_time_lookup",
        "start_time_lookup",
        "build_lookup_time",
        "time",
        "time",
        "generate_clusters_parallel",
        "data_instance",
        "sorted_thresholds",
        "distance_lookups",
        "FIXED_NUM_PROCESSES",
        "time",
        "time",
        "end_time_cluster",
        "start_time_cluster",
        "cluster_time",
        "time",
        "time",
        "find_violating_pairs_parallel",
        "dd_constraints",
        "clusters",
        "FIXED_NUM_PROCESSES",
        "length",
        "delta_n",
        "time",
        "time",
        "end_time_find",
        "start_time_find",
        "find_vio_pairs_time",
        "time",
        "time",
        "build_graph_parallel",
        "hyper_edges",
        "probability_file",
        "FIXED_NUM_PROCESSES",
        "attribute_thresholds",
        "attribute_thresholds",
        "time",
        "time",
        "end_time_edet",
        "start_time_edet",
        "edet_time",
        "build_lookup_time",
        "cluster_time",
        "find_vio_pairs_time",
        "edet_time",
        "total_time",
        "calculate_precision_recall_f1",
        "E_final",
        "ground_truth_errors",
        "check_all_pairs_covered",
        "find_violating_pair",
        "E_final",
        "precision",
        "recall",
        "f1_score_val",
        "coverage_msg",
        "precision",
        "recall",
        "f1_score_val",
        "build_lookup_time",
        "cluster_time",
        "find_vio_pairs_time",
        "edet_time",
        "total_time",
        "coverage_msg",
        "pd",
        "DataFrame",
        "results",
        "df_results"
    ],
    "literals": [
        "\"__main__\"",
        "r\"path\\data\\Flight\\dirty.csv\"",
        "r\"path\\data\\Flight\\clean.csv\"",
        "r\"path\\data\\Flight\\dd_constraints.txt\"",
        "r\"path\\data\\Flight\\attribute_thresholds.txt\"",
        "r\"path\\data\\Flight\\difference.csv\"",
        "r\"path\\data\\Flight\\predicted_probabilities.csv\"",
        "\"r\"",
        "\"utf-8\"",
        "\"r\"",
        "\"utf-8\"",
        "\"Time for extracting thresholds:\"",
        "\"Generating difference file...\"",
        "f\"t{row['Index']}.{row['Attribute']}\"",
        "'Index'",
        "'Attribute'",
        "f\"Number of ground_truth_errors: {len(ground_truth_errors)}\"",
        "\"Generating probability file...\"",
        "\"records\"",
        "f\"Dataset length: {length}\"",
        "f\"Time for building distance lookups: {build_lookup_time:.4f} seconds\"",
        "f\"Time for generating clusters: {cluster_time:.4f} seconds\"",
        "f\"Time for finding violating pairs: {find_vio_pairs_time:.4f} seconds\"",
        "f\"Time for EDet: {edet_time:.4f} seconds\"",
        "f\"Total time for the pipeline: {total_time:.4f} seconds\"",
        "f\"Metrics => Precision={precision:.4f}, Recall={recall:.4f}, F1={f1_score_val:.4f}\"",
        "\"Coverage check:\"",
        "\"Precision\"",
        "\"Recall\"",
        "\"F1\"",
        "\"BuildLookupTime\"",
        "\"ClusterTime\"",
        "\"FindVioPairsTime\"",
        "\"EDetTime\"",
        "\"TotalTime\"",
        "\"Coverage\"",
        "\"\\n===== Single Dataset Experiment Results =====\""
    ],
    "variables": [
        "dirty_file",
        "clean_file",
        "dd_constraints_file",
        "attribute_thresholds_file",
        "difference_file",
        "probability_file",
        "dd_constraints",
        "attribute_thresholds",
        "FIXED_NUM_PROCESSES",
        "start_time",
        "sorted_thresholds",
        "diff_df",
        "ground_truth_errors",
        "dirty_df",
        "dataset_scheme",
        "data_instance",
        "length",
        "start_time_lookup",
        "distance_lookups",
        "end_time_lookup",
        "build_lookup_time",
        "start_time_cluster",
        "clusters",
        "end_time_cluster",
        "cluster_time",
        "start_time_find",
        "find_violating_pair",
        "hyper_edges",
        "end_time_find",
        "find_vio_pairs_time",
        "start_time_edet",
        "E_final",
        "end_time_edet",
        "edet_time",
        "total_time",
        "precision",
        "recall",
        "f1_score_val",
        "coverage_msg",
        "results",
        "df_results"
    ],
    "comments": [
        "Import your main modules",
        "------------------------------------------------------------------",
        "1) File paths for your single dataset",
        "------------------------------------------------------------------",
        "Output files that we will generate",
        "------------------------------------------------------------------",
        "2) Read dd_constraints and attribute_thresholds",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "3) Number of processes",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "4) Extract thresholds from dd_constraints",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "5) Generate difference file (dirty vs. clean) for ground truth",
        "------------------------------------------------------------------",
        "Read difference to build ground_truth_errors",
        "------------------------------------------------------------------",
        "6) Generate probability file from the dirty dataset",
        "------------------------------------------------------------------",
        "1) Derive dataset scheme from columns of the dirty CSV",
        "2) Generate probabilities",
        "------------------------------------------------------------------",
        "7) Convert the dirty dataset to dict records for further steps",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "8) Build all distance lookups",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "9) Generate clusters",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "10) Find violating pairs",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "11) Build graph (EDet)",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "12) Calculate total time",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "13) Evaluate results",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "14) Store results in a DataFrame (single row)",
        "------------------------------------------------------------------"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}