{
    "identifiers": [
        "com",
        "thealgorithms",
        "graph",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "adjacencyList",
        "numNodes",
        "adjacencyList",
        "i",
        "i",
        "numNodes",
        "i",
        "adjacencyList",
        "add",
        "to",
        "cost",
        "resource",
        "adjacencyList",
        "get",
        "add",
        "to",
        "cost",
        "resource",
        "node",
        "adjacencyList",
        "get",
        "node",
        "adjacencyList",
        "size",
        "Edge",
        "to",
        "cost",
        "resource",
        "graph",
        "maxResource",
        "graph",
        "maxResource",
        "graph",
        "graph",
        "maxResource",
        "maxResource",
        "start",
        "target",
        "numNodes",
        "graph",
        "getNumNodes",
        "dp",
        "maxResource",
        "numNodes",
        "i",
        "i",
        "maxResource",
        "i",
        "Arrays",
        "fill",
        "dp",
        "i",
        "MAX_VALUE",
        "dp",
        "start",
        "r",
        "r",
        "maxResource",
        "r",
        "u",
        "u",
        "numNodes",
        "u",
        "dp",
        "r",
        "u",
        "MAX_VALUE",
        "edge",
        "graph",
        "getEdges",
        "u",
        "v",
        "edge",
        "to",
        "cost",
        "edge",
        "cost",
        "resource",
        "edge",
        "resource",
        "r",
        "resource",
        "maxResource",
        "dp",
        "r",
        "resource",
        "v",
        "min",
        "dp",
        "r",
        "resource",
        "v",
        "dp",
        "r",
        "u",
        "cost",
        "minCost",
        "MAX_VALUE",
        "r",
        "r",
        "maxResource",
        "r",
        "minCost",
        "min",
        "minCost",
        "dp",
        "r",
        "target",
        "minCost",
        "MAX_VALUE",
        "minCost"
    ],
    "literals": [],
    "variables": [
        "adjacencyList",
        "graph",
        "maxResource"
    ],
    "comments": [
        "Initialize dp table with maximum values",
        "Dynamic Programming: Iterate over resources and nodes",
        "Find the minimum cost to reach the target node"
    ],
    "docstrings": [
        "* This class implements a solution for the Constrained Shortest Path Problem (CSPP).\n * also known as Shortest Path Problem with Resource Constraints (SPPRC).\n * The goal is to find the shortest path between two nodes while ensuring that\n * the resource constraint is not exceeded.\n *\n * @author  <a href=\"https://github.com/DenizAltunkapan\">Deniz Altunkapan</a>",
        "* Represents a graph using an adjacency list.\n     * This graph is designed for the Constrained Shortest Path Problem (CSPP).",
        "* Adds an edge to the graph.\n         * @param from the starting node\n         * @param to the ending node\n         * @param cost the cost of the edge\n         * @param resource the resource required to traverse the edge",
        "* Gets the edges that are adjacent to a given node.\n         * @param node the node to get the edges for\n         * @return the list of edges adjacent to the node",
        "* Gets the number of nodes in the graph.\n         * @return the number of nodes",
        "* Constructs a CSPSolver with the given graph and maximum resource constraint.\n     *\n     * @param graph       the graph representing the problem\n     * @param maxResource the maximum allowable resource",
        "* Solves the CSP to find the shortest path from the start node to the target node\n     * without exceeding the resource constraint.\n     *\n     * @param start  the starting node\n     * @param target the target node\n     * @return the minimum cost to reach the target node within the resource constraint,\n     *         or -1 if no valid path exists"
    ],
    "functions": [
        "Graph",
        "addEdge",
        "getEdges",
        "getNumNodes",
        "ConstrainedShortestPath",
        "solve"
    ],
    "classes": [
        "ConstrainedShortestPath",
        "Graph"
    ]
}