{
    "identifiers": [
        "registerGObjectClass",
        "Clutter",
        "registerGObjectClass",
        "Clutter",
        "spacing",
        "rowHeight",
        "maxRowHeight",
        "spacing",
        "maxRowHeight",
        "rowHeight",
        "children",
        "Clutter",
        "availableWidth",
        "availableHeight",
        "rowHeight",
        "Clutter",
        "children",
        "rowCount",
        "rowHeight",
        "availableHeight",
        "MASONRY_ROW_MIN_HEIGHT_PERCENTAGE",
        "rowCount",
        "rowHeight",
        "availableHeight",
        "rowCount",
        "rowCount",
        "child",
        "children",
        "child",
        "child",
        "natWidth",
        "natHeight",
        "rowHeight",
        "aspectRatio",
        "rowWidths",
        "rowWidths",
        "rowWidths",
        "shortestRow",
        "width",
        "availableWidth",
        "rowWidths",
        "shortestRow",
        "shortestRow",
        "rowCount",
        "rowWidths",
        "rowCount",
        "width",
        "width",
        "availableWidth",
        "childWidth",
        "aspectRatio",
        "placements",
        "shortestRow",
        "childWidth",
        "childHeight",
        "rowWidths",
        "shortestRow",
        "rowWidths",
        "shortestRow",
        "rowWidths",
        "shortestRow",
        "width",
        "rowWidths",
        "shortestRow",
        "width",
        "placement",
        "placements",
        "placement",
        "rowWidths",
        "placement",
        "rowWidths",
        "v",
        "i",
        "v",
        "i",
        "sortedRowWidths",
        "a",
        "b",
        "b",
        "a",
        "sortedRowWidths",
        "row",
        "oldIndex",
        "row",
        "sortedRowWidths",
        "oldIndex",
        "oldIndex",
        "rowCount",
        "rowCount",
        "rowsOrdering",
        "index",
        "newIndex",
        "placement",
        "placements",
        "placement",
        "rowsOrdering",
        "placement",
        "placement",
        "rowCount",
        "placement",
        "placements",
        "result",
        "placement",
        "placement",
        "placements",
        "result",
        "placement",
        "placement",
        "placement",
        "placement",
        "result",
        "container",
        "Clutter",
        "box",
        "Clutter",
        "container",
        "children",
        "box",
        "container",
        "box",
        "container",
        "container",
        "container",
        "container",
        "container",
        "allocationCache",
        "children",
        "ch",
        "allocationCache",
        "ch",
        "children",
        "ch",
        "ch",
        "allocationCache",
        "ch",
        "allocationCache",
        "children",
        "rowHeight",
        "availableHeight",
        "MASONRY_ROW_MIN_HEIGHT_PERCENTAGE",
        "rowHeight",
        "availableHeight",
        "rowHeight",
        "rowHeight",
        "rowHeight",
        "child",
        "children",
        "child",
        "child",
        "naturalHeight",
        "naturalWidth",
        "naturalHeight",
        "rowHeight",
        "aspectRatio",
        "rowWidths",
        "rowWidths",
        "rowWidths",
        "shortestRow",
        "width",
        "availableWidth",
        "rowWidths",
        "shortestRow",
        "shortestRow",
        "rowWidths",
        "width",
        "width",
        "availableWidth",
        "childWidth",
        "aspectRatio",
        "placements",
        "shortestRow",
        "childWidth",
        "childHeight",
        "rowWidths",
        "shortestRow",
        "rowWidths",
        "shortestRow",
        "rowWidths",
        "shortestRow",
        "width",
        "rowWidths",
        "shortestRow",
        "width",
        "placement",
        "placements",
        "placement",
        "rowWidths",
        "placement",
        "rowWidths",
        "v",
        "i",
        "v",
        "i",
        "sortedRowWidths",
        "a",
        "b",
        "b",
        "a",
        "sortedRowWidths",
        "row",
        "newIndex",
        "row",
        "rowsOrdering",
        "index",
        "newIndex",
        "placement",
        "placements",
        "placement",
        "rowsOrdering",
        "placement",
        "placement",
        "placement",
        "placements",
        "rowYPosition",
        "placement",
        "placement",
        "rowYPosition",
        "r",
        "r",
        "rowYPosition",
        "r",
        "rowYPosition",
        "r",
        "rowYPosition",
        "r",
        "rowYPosition",
        "rowYPosition",
        "availableHeight",
        "contentHeight",
        "placement",
        "placements",
        "box",
        "rowYPosition",
        "row",
        "verticalOffset",
        "availableWidth",
        "rowWidth",
        "box",
        "x",
        "horizontalOffset",
        "Clutter",
        "xPosition",
        "y",
        "xPosition",
        "width",
        "y",
        "height",
        "allocationCache",
        "child",
        "newBox",
        "child",
        "newBox",
        "container",
        "Clutter",
        "forHeight",
        "container",
        "ch",
        "maxX",
        "maxX",
        "ch",
        "ch",
        "maxX",
        "maxX",
        "container",
        "Clutter",
        "forWidth",
        "container",
        "ch",
        "maxY",
        "maxY",
        "ch",
        "ch",
        "maxY",
        "maxY"
    ],
    "literals": [
        "'@utils/gjs'",
        "'@gi.ext'"
    ],
    "variables": [
        "MASONRY_ROW_MIN_HEIGHT_PERCENTAGE",
        "rowCount",
        "rowWidths",
        "placements",
        "minWidth",
        "natWidth",
        "minHeight",
        "natHeight",
        "aspectRatio",
        "width",
        "shortestRow",
        "childWidth",
        "childHeight",
        "sortedRowWidths",
        "rowsOrdering",
        "index",
        "newIndex",
        "result",
        "children",
        "availableWidth",
        "availableHeight",
        "allocationCache",
        "rowHeight",
        "rowWidths",
        "placements",
        "minHeight",
        "naturalHeight",
        "minWidth",
        "naturalWidth",
        "aspectRatio",
        "width",
        "shortestRow",
        "childWidth",
        "childHeight",
        "sortedRowWidths",
        "rowsOrdering",
        "index",
        "rowYPosition",
        "r",
        "contentHeight",
        "verticalOffset",
        "placement",
        "y",
        "horizontalOffset",
        "xPosition",
        "newBox",
        "maxX",
        "maxY"
    ],
    "comments": [
        "Number of rows",
        "Spacing between items",
        "lets compute the best number of rows and the best height of each row",
        "making sure that we don't grow to much and go beyond the available height",
        "Tracks the width of each row",
        "Store placements",
        "Maintain the aspect ratio",
        "Find the shortest row",
        "This might not look efficient, but the number of rows is",
        "very low so is not going to affect performance",
        "if the element has a width higher than the container",
        "clamp its width and change its height preserving",
        "aspect ratio",
        "Update row width",
        "we want the largest rows in the middle and the smallest rows on the sides\n        e.g. if we have the following layout\n                [ ][][  ]\n                [][]\n                []\n                [ ][  ]\n        we want the largest rows in the middle, for example\n                []\n                [ ][][  ]\n                [ ][  ]\n                [][]\n        then later we will center horizontally, like the following\n                   []\n                [ ][][  ]\n                 [ ][  ]\n                  [][]",
        "map row widths to an array of <rowWidth, rowIndex>",
        "sort by width. The first element will be the largest row",
        "map the row's original index to new row's index",
        "then shift right the array to finally have the largest",
        "rows in the middle and the smallest on the first and last positions (the sides)",
        "Tracks the width of each row",
        "Store placements",
        "Retrieve the preferred height and width to calculate the aspect ratio",
        "Maintain the aspect ratio",
        "Find the shortest row",
        "This might not look efficient, but the number of rows is",
        "very low so is not going to affect performance",
        "if the element has a width higher than the container",
        "clamp its width and change its height preserving",
        "aspect ratio",
        "Update row width",
        "we want the largest rows in the middle and the smallest rows on the sides\n        e.g. if we have the following layout\n                [ ][][  ]\n                [][]\n                []\n                [ ][  ]\n        we want the largest rows in the middle, for example\n                []\n                [ ][][  ]\n                [ ][  ]\n                [][]\n        then later we will center horizontally, like the following\n                   []\n                [ ][][  ]\n                 [ ][  ]\n                  [][]",
        "map row widths to an array of <rowWidth, rowIndex>",
        "sort by width. The first element will be the largest row",
        "map the row's original index to new row's index",
        "then shift right the array to finally have the largest",
        "rows in the middle and the smallest on the first and last positions (the sides)",
        "compute the Y position of each row",
        "Calculate offsets for centering the entire grid within the available space",
        "finally allocate children with preserved proportions",
        "Center the content horizontally",
        "add this._spacing because we want some right padding",
        "add this._spacing because we want some bottom padding"
    ],
    "docstrings": [],
    "functions": [
        "computePlacements",
        "vfunc_allocate",
        "vfunc_get_preferred_width",
        "vfunc_get_preferred_height"
    ],
    "classes": [
        "MasonryLayoutManager"
    ]
}