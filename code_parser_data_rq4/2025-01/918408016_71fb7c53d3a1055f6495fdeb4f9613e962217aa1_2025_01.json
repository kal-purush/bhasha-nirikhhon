{
    "identifiers": [
        "boa",
        "user_service_cicd",
        "Controller",
        "boa",
        "user_service_cicd",
        "Models",
        "Users",
        "boa",
        "user_service_cicd",
        "Services",
        "UserServiceImpl",
        "lombok",
        "AllArgsConstructor",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Autowired",
        "org",
        "springframework",
        "http",
        "HttpStatus",
        "org",
        "springframework",
        "http",
        "ResponseEntity",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "java",
        "util",
        "RestController",
        "AllArgsConstructor",
        "RequestMapping",
        "Autowired",
        "userService",
        "GetMapping",
        "userService",
        "getAllUsers",
        "PostMapping",
        "RequestBody",
        "user",
        "savedUser",
        "userService",
        "createUser",
        "user",
        "ResponseEntity",
        "ok",
        "savedUser",
        "e",
        "ResponseEntity",
        "badRequest",
        "build",
        "GetMapping",
        "PathVariable",
        "id",
        "userService",
        "getUserById",
        "id",
        "ResponseEntity",
        "ok",
        "orElse",
        "ResponseEntity",
        "notFound",
        "build",
        "PutMapping",
        "PathVariable",
        "id",
        "RequestBody",
        "updatedUser",
        "userService",
        "updateUser",
        "id",
        "updatedUser",
        "ResponseEntity",
        "ok",
        "orElse",
        "ResponseEntity",
        "notFound",
        "build",
        "DeleteMapping",
        "PathVariable",
        "id",
        "userService",
        "deleteUser",
        "id",
        "ResponseEntity",
        "noContent",
        "build",
        "ResponseEntity",
        "notFound",
        "build",
        "ExceptionHandler",
        "e",
        "e",
        "getMessage",
        "HttpStatus",
        "BAD_REQUEST"
    ],
    "literals": [
        "\"/api/user\"",
        "\"/{id}\"",
        "\"/{id}\"",
        "\"/{id}\"",
        "\"Exception Occurred:\""
    ],
    "variables": [
        "userService"
    ],
    "comments": [
        "GET /api/user – Retrieve all users."
    ],
    "docstrings": [
        "@GetMapping(\"/{id}\")\n    public UserDTO getUserById(@PathVariable Long id) {\n        Optional<Users> user = userService.getUserById(id);\n        if (user.isPresent()) {\n            User u = user.get();\n            return new UserDTO(u.getUserId(), u.getUsername(), u.getEmail(), u.getPhoneNumber());\n        } else {\n            throw new ResourceNotFoundException(\"User not found\");\n        }\n    }",
        "//POST /api/users – Create a new user.\n    @PostMapping\n    public ResponseEntity<Users> addCustomer(@RequestBody Users users) {\n        return new ResponseEntity<>(userService.addUser(users), HttpStatus.CREATED);\n    }",
        "/*\n @DeleteMapping(\"/{userId}\")\n    private ResponseEntity<String> deleteUser(@PathVariable Long userId)\n    {\n        boolean isDeleted = userProfileServiceImpl.deleteUserById(userId);\n        return isDeleted ? ResponseEntity.ok(\"user profile deleted successfully for user id: \"+ userId) :\n                ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"user profile not found for id: \"+userId);\n    }",
        "//GET /api/users/{id} – Retrieve users by ID.\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Users> getUserById(@PathVariable Long id) {\n        return userService.getUserById(id)\n                .map(ResponseEntity::ok)\n                .orElse(ResponseEntity.notFound().build());\n    }\n\n\n\n    //PUT /api/users/{id} – Update an user.\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Users> updateUser(@PathVariable Long userId,@RequestBody Users updatedUser){\n        try {\n            return new ResponseEntity<>(userService.updateUser(userId, updatedUser),HttpStatus.OK);\n        } catch (Exception e) {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    //DELETE /api/users/{id} – Delete an user by ID.\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteUser(@PathVariable Long id){\n        userService.deleteUser(id);\n        return ResponseEntity.noContent().build();\n    }\n\n\n\n}"
    ],
    "functions": [
        "getAllUsers",
        "createUser",
        "getUserById",
        "updateUser",
        "deleteUser",
        "respondWithError"
    ],
    "classes": [
        "UserController"
    ]
}