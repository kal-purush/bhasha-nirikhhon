{
    "identifiers": [
        "pandas",
        "read_table",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "seaborn",
        "ImportError",
        "read_table",
        "URL",
        "encoding",
        "sep",
        "skipinitialspace",
        "index_col",
        "header",
        "frame",
        "TARGET_COLUMN",
        "frame",
        "np",
        "array",
        "frame",
        "dtype",
        "np",
        "sklearn",
        "preprocessing",
        "StandardScaler",
        "MinMaxScaler",
        "MinMaxScaler",
        "fit_transform",
        "arr",
        "arr",
        "arr",
        "sklearn",
        "model_selection",
        "train_test_split",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "X",
        "y",
        "sklearn",
        "preprocessing",
        "StandardScaler",
        "StandardScaler",
        "scaler",
        "fit",
        "X_train",
        "scaler",
        "transform",
        "X_train",
        "scaler",
        "transform",
        "X_test",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "sklearn",
        "svm",
        "SVR",
        "SVR",
        "kernel",
        "gamma",
        "svr",
        "fit",
        "X_train",
        "y_train",
        "svr",
        "predict",
        "X_test",
        "svr",
        "score",
        "X_test",
        "y_test",
        "format",
        "r_2",
        "y_test",
        "y_pred",
        "SVR",
        "kernel",
        "svr",
        "fit",
        "X_train",
        "y_train",
        "svr",
        "predict",
        "X_test",
        "svr",
        "score",
        "X_test",
        "y_test",
        "format",
        "r_2",
        "y_test",
        "y_pred",
        "SVR",
        "kernel",
        "degree",
        "svr",
        "fit",
        "X_train",
        "y_train",
        "svr",
        "predict",
        "X_test",
        "svr",
        "score",
        "X_test",
        "y_test",
        "format",
        "r_2",
        "y_test",
        "y_pred",
        "results",
        "plt",
        "subplots",
        "nrows",
        "len",
        "results",
        "figsize",
        "fig",
        "canvas",
        "set_window_title",
        "URL",
        "subplot",
        "title",
        "y",
        "y_pred",
        "plts",
        "results",
        "subplot",
        "set_xticklabels",
        "subplot",
        "set_yticklabels",
        "subplot",
        "set_ylabel",
        "subplot",
        "set_title",
        "title",
        "subplot",
        "plot",
        "y",
        "label",
        "subplot",
        "plot",
        "y_pred",
        "label",
        "subplot",
        "fill_between",
        "np",
        "arange",
        "len",
        "y",
        "y",
        "y_pred",
        "color",
        "alpha",
        "subplot",
        "axvline",
        "len",
        "y",
        "linestyle",
        "color",
        "alpha",
        "subplot",
        "legend",
        "fig",
        "tight_layout",
        "plt",
        "show",
        "plt",
        "close",
        "format",
        "URL",
        "download_data",
        "format",
        "len",
        "frame",
        "index",
        "len",
        "frame",
        "columns",
        "get_features_and_labels",
        "frame",
        "evaluate_learner",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "plot",
        "results"
    ],
    "literals": [
        "\"https://raw.githubusercontent.com/microsoft/python-sklearn-regression-cookiecutter/master/stockvalues.csv\"",
        "'latin-1'",
        "','",
        "'rbf'",
        "'RBF Model ($R^2={:.3f}$)'",
        "'linear'",
        "'Linear Model ($R^2={:.3f}$)'",
        "'poly'",
        "'Polynomial Model ($R^2={:.3f}$)'",
        "'Predicting data from '",
        "'stock price'",
        "'b'",
        "'actual'",
        "'r'",
        "'predicted'",
        "'r'",
        "'--'",
        "'0'",
        "'__main__'",
        "\"Downloading data from {}\"",
        "\"Processing {} samples with {} attributes\"",
        "\"Evaluating regression learners\"",
        "\"Plotting the results\""
    ],
    "variables": [
        "URL",
        "TARGET_COLUMN",
        "frame",
        "arr",
        "arr",
        "X",
        "y",
        "X_train",
        "_",
        "y_train",
        "_",
        "X_test",
        "y_test",
        "scaler",
        "X_train",
        "X_test",
        "svr",
        "y_pred",
        "r_2",
        "svr",
        "y_pred",
        "r_2",
        "svr",
        "y_pred",
        "r_2",
        "fig",
        "plts",
        "frame",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "results"
    ],
    "comments": [
        "Remember to update the script for the new data when you change this URL",
        "This is the column of the sample data to predict.",
        "Try changing it to other integers between 1 and 155.",
        "Uncomment this call when using matplotlib to generate images",
        "rather than displaying interactive UI.",
        "import matplotlib",
        "matplotlib.use('Agg')",
        "[OPTIONAL] Seaborn makes plots nicer",
        "=====================================================================",
        "If your data is in an Excel file, install 'xlrd' and use",
        "pandas.read_excel instead of read_table",
        "from pandas import read_excel",
        "frame = read_excel(URL)",
        "If your data is in a private Azure blob, install 'azure-storage' and use",
        "BlockBlobService.get_blob_to_path() with read_table() or read_excel()",
        "from azure.storage.blob import BlockBlobService",
        "service = BlockBlobService(ACCOUNT_NAME, ACCOUNT_KEY)",
        "service.get_blob_to_path(container_name, blob_name, 'my_data.csv')",
        "frame = read_table('my_data.csv', ...",
        "Uncomment if the file needs to be decompressed",
        "compression='gzip',",
        "compression='bz2',",
        "Specify the file encoding",
        "Latin-1 is common for data from US sources",
        "encoding='utf-8',  # UTF-8 is also common",
        "Specify the separator in the data",
        "comma separated values",
        "sep='\\t',          # tab separated values",
        "sep=' ',           # space separated values",
        "Ignore spaces after the separator",
        "Generate row labels from each row number",
        "index_col=0,       # use the first column as row labels",
        "index_col=-1,      # use the last column as row labels",
        "Generate column headers row from each column number",
        "header=0,          # use the first line as headers",
        "Use manual headers and skip the first row in the file",
        "header=0,",
        "names=['col1', 'col2', ...],",
        "Return the entire frame",
        "return frame",
        "Return a subset of the columns",
        "=====================================================================",
        "Replace missing values with 0.0",
        "or we can use scikit-learn to calculate missing values below",
        "frame[frame.isnull()] = 0.0",
        "Convert values to floats",
        "Normalize the entire data set",
        "Use the last column as the target value",
        "To use the first column instead, change the index value",
        "X, y = arr[:, 1:], arr[:, 0]",
        "Use 50% of the data for training, but we will test against the",
        "entire set",
        "If values are missing we could impute them from the training data",
        "from sklearn.preprocessing import Imputer",
        "imputer = Imputer(strategy='mean')",
        "imputer.fit(X_train)",
        "X_train = imputer.transform(X_train)",
        "X_test = imputer.transform(X_test)",
        "Normalize the attribute values to mean=0 and variance=1",
        "To scale to a specified range, use MinMaxScaler",
        "from sklearn.preprocessing import MinMaxScaler",
        "scaler = MinMaxScaler(feature_range=(0, 1))",
        "Fit the scaler based on the training data, then apply the same",
        "scaling to both training and test sets.",
        "Return the training and test sets",
        "=====================================================================",
        "Use a support vector machine for regression",
        "Train using a radial basis function",
        "Train using a linear kernel",
        "Train using a polynomial kernel",
        "=====================================================================",
        "Using subplots to display the results on the same X axis",
        "Show each element in the plots returned from plt.subplots()",
        "Configure each subplot to have no tick marks",
        "(these are meaningless for the sample dataset)",
        "Label the vertical axis",
        "Set the title for the subplot",
        "Plot the actual data and the prediction",
        "Shade the area between the predicted and the actual values",
        "Generate X values [0, 1, 2, ..., len(y)-2, len(y)-1]",
        "Mark the extent of the training data",
        "Include a legend in each subplot",
        "Let matplotlib handle the subplot layout",
        "==================================",
        "Display the plot in interactive UI",
        "To save the plot to an image file, use savefig()",
        "plt.savefig('plot.png')",
        "Open the image file with the default image viewer",
        "import subprocess",
        "subprocess.Popen('plot.png', shell=True)",
        "To save the plot to an image in memory, use BytesIO and savefig()",
        "This can then be written to any stream-like object, such as a",
        "file or HTTP response.",
        "from io import BytesIO",
        "img_stream = BytesIO()",
        "plt.savefig(img_stream, fmt='png')",
        "img_bytes = img_stream.getvalue()",
        "print('Image is {} bytes - {!r}'.format(len(img_bytes), img_bytes[:8] + b'...'))",
        "Closing the figure allows matplotlib to release the memory used.",
        "=====================================================================",
        "Download the data set from URL",
        "Process data into feature and label arrays",
        "Evaluate multiple regression learners on the data",
        "Display the results"
    ],
    "docstrings": [
        "'''\nThis script perfoms the basic process for applying a machine learning\nalgorithm to a dataset using Python libraries.\n\nThe four steps are:\n   1. Download a dataset (using pandas)\n   2. Process the numeric data (using numpy)\n   3. Train and evaluate learners (using scikit-learn)\n   4. Plot and compare results (using matplotlib)\n\n\nThe data is downloaded from URL, which is defined below. As is normal\nfor machine learning problems, the nature of the source data affects\nthe entire solution. When you change URL to refer to your own data, you\nwill need to review the data processing steps to ensure they remain\ncorrect.\n\n============\nExample Data\n============\nThe example is from https://web.archive.org/web/20180322001455/http://mldata.org/repository/data/viewslug/stockvalues/\nIt contains stock prices and the values of three indices for each day\nover a five year period. See the linked page for more details about\nthis data set.\n\nThis script uses regression learners to predict the stock price for\nthe second half of this period based on the values of the indices. This\nis a naive approach, and a more robust method would use each prediction\nas an input for the next, and would predict relative rather than\nabsolute values.\n'''",
        "'''\n    Downloads the data for this script into a pandas DataFrame.\n    '''",
        "'''\n    Transforms and scales the input data and returns numpy arrays for\n    training and testing inputs and targets.\n    '''",
        "'''\n    Run multiple times with different algorithms to get an idea of the\n    relative performance of each configuration.\n\n    Returns a sequence of tuples containing:\n        (title, expected values, actual values)\n    for each learner.\n    '''",
        "'''\n    Create a plot comparing multiple learners.\n\n    `results` is a list of tuples containing:\n        (title, expected values, actual values)\n    \n    All the elements in results will be plotted.\n    '''"
    ],
    "functions": [
        "download_data",
        "get_features_and_labels",
        "evaluate_learner",
        "plot"
    ],
    "classes": []
}