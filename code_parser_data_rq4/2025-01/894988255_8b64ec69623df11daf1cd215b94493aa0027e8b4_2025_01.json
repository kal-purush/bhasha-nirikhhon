{
    "identifiers": [
        "europeana",
        "sparql",
        "updater",
        "util",
        "org",
        "apache",
        "logging",
        "log4j",
        "LogManager",
        "org",
        "apache",
        "logging",
        "log4j",
        "Logger",
        "java",
        "time",
        "Duration",
        "LOG",
        "LogManager",
        "getLogger",
        "MS_PER_SEC",
        "SEC_PER_MIN",
        "MIN_PER_HOUR",
        "startTime",
        "totalItems",
        "itemsDone",
        "logAfterSeconds",
        "lastLogTime",
        "totalItems",
        "logAfterSeconds",
        "startTime",
        "currentTimeMillis",
        "lastLogTime",
        "startTime",
        "totalItems",
        "totalItems",
        "itemsDone",
        "logAfterSeconds",
        "logAfterSeconds",
        "now",
        "currentTimeMillis",
        "itemsDone",
        "d",
        "Duration",
        "ofMillis",
        "now",
        "lastLogTime",
        "logAfterSeconds",
        "d",
        "getSeconds",
        "logAfterSeconds",
        "totalItems",
        "itemsPerMS",
        "itemsDone",
        "now",
        "startTime",
        "LOG",
        "isInfoEnabled",
        "itemsPerMS",
        "MS_PER_SEC",
        "SEC_PER_MIN",
        "LOG",
        "info",
        "itemsDone",
        "totalItems",
        "round",
        "itemsPerMS",
        "MS_PER_SEC",
        "SEC_PER_MIN",
        "getDurationText",
        "round",
        "totalItems",
        "itemsDone",
        "itemsPerMS",
        "LOG",
        "isInfoEnabled",
        "LOG",
        "info",
        "itemsDone",
        "totalItems",
        "round",
        "itemsPerMS",
        "MS_PER_SEC",
        "SEC_PER_MIN",
        "MIN_PER_HOUR",
        "getDurationText",
        "round",
        "totalItems",
        "itemsDone",
        "itemsPerMS",
        "LOG",
        "info",
        "itemsDone",
        "lastLogTime",
        "now",
        "durationInMs",
        "result",
        "d",
        "Duration",
        "ofMillis",
        "durationInMs",
        "d",
        "toDaysPart",
        "result",
        "format",
        "d",
        "toDaysPart",
        "d",
        "toHoursPart",
        "d",
        "toMinutesPart",
        "d",
        "toHoursPart",
        "result",
        "format",
        "d",
        "toHoursPart",
        "d",
        "toMinutesPart",
        "d",
        "toMinutesPart",
        "result",
        "format",
        "d",
        "toMinutesPart",
        "d",
        "toSecondsPart",
        "d",
        "getSeconds",
        "result",
        "format",
        "d",
        "toSeconds",
        "d",
        "getSeconds",
        "result",
        "format",
        "d",
        "toSecondsPart",
        "d",
        "toMillisPart",
        "result",
        "format",
        "d",
        "toMillis",
        "result"
    ],
    "literals": [
        "\"Retrieved {} sets of {} ({} sets/min). Expected time remaining is {}\"",
        "\"Retrieved {} sets of {} ({} sets/hour). Expected time remaining is {}\"",
        "\"Retrieved {} items\"",
        "\"%d days, %d hours and %d minutes\"",
        "\"%d hours and %d minutes\"",
        "\"%d minutes and %d seconds\"",
        "\"%d seconds\"",
        "\"%d seconds and %d milliseconds\"",
        "\"%d milliseconds\""
    ],
    "variables": [
        "startTime",
        "totalItems",
        "itemsDone",
        "logAfterSeconds",
        "lastLogTime",
        "result"
    ],
    "comments": [],
    "docstrings": [
        "* Utility class to log processing progress after roughly ever x seconds.\n * @author Patrick Ehlert",
        "* Create a new progressLogger. This also sets the operation start time\n     * @param totalItems total number of items that are expected to be retrieved\n     * @param logAfterSeconds logs are generated only after every <logAfterSeconds> seconds, even if the method is called more often",
        "* Log that another set was processed, plus add an estimate of the remaining processing time (output og only if at\n     * least x seconds have past since the last log, as specified by logAfterSeconds variable)",
        "* Log a duration in easy readable text\n     * @param durationInMs duration to output\n     * @return string containing duration in easy readable format"
    ],
    "functions": [
        "ProgressLogger",
        "logItemAdded",
        "getDurationText"
    ],
    "classes": [
        "ProgressLogger"
    ]
}