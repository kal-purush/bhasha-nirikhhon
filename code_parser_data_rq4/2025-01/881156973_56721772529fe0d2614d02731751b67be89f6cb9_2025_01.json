{
    "identifiers": [
        "ccxt",
        "Tests",
        "BaseTest",
        "Exchange",
        "exchange",
        "symbol",
        "message",
        "isTrue",
        "debugCreateOrder",
        "WriteLine",
        "getValue",
        "exchange",
        "ToString",
        "symbol",
        "message",
        "Exchange",
        "exchange",
        "skippedProperties",
        "symbol",
        "testSharedMethods",
        "logTemplate",
        "exchange",
        "symbol",
        "isTrue",
        "isTrue",
        "getValue",
        "exchange",
        "has",
        "isTrue",
        "getValue",
        "exchange",
        "has",
        "isTrue",
        "getValue",
        "exchange",
        "has",
        "add",
        "logPrefix",
        "exchange",
        "market",
        "symbol",
        "isTrue",
        "getValue",
        "market",
        "isTrue",
        "getValue",
        "market",
        "getValue",
        "exchange",
        "has",
        "add",
        "logPrefix",
        "exchange",
        "fetchBalance",
        "getValue",
        "getValue",
        "balance",
        "getValue",
        "market",
        "getValue",
        "getValue",
        "balance",
        "getValue",
        "market",
        "isEqual",
        "initialQuoteBalance",
        "add",
        "add",
        "add",
        "logPrefix",
        "getValue",
        "market",
        "tcoDebug",
        "exchange",
        "symbol",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "symbol",
        "initialBaseBalance",
        "ToString",
        "getValue",
        "market",
        "initialQuoteBalance",
        "getValue",
        "market",
        "testSharedMethods",
        "fetchBestBidAsk",
        "exchange",
        "symbol",
        "IList",
        "bestBidbestAskVariable",
        "IList",
        "bestBidbestAskVariable",
        "tcoDebug",
        "exchange",
        "symbol",
        "tcoCreateUnfillableOrder",
        "exchange",
        "market",
        "logPrefix",
        "skippedProperties",
        "bestBid",
        "bestAsk",
        "limitPriceSafetyMultiplierFromMedian",
        "isTrue",
        "isSwapFuture",
        "tcoCreateUnfillableOrder",
        "exchange",
        "market",
        "logPrefix",
        "skippedProperties",
        "bestBid",
        "bestAsk",
        "limitPriceSafetyMultiplierFromMedian",
        "tcoDebug",
        "exchange",
        "symbol",
        "tcoDebug",
        "exchange",
        "symbol",
        "tcoCreateFillableOrder",
        "exchange",
        "market",
        "logPrefix",
        "skippedProperties",
        "bestBid",
        "bestAsk",
        "limitPriceSafetyMultiplierFromMedian",
        "isTrue",
        "isSwapFuture",
        "tcoCreateFillableOrder",
        "exchange",
        "market",
        "logPrefix",
        "skippedProperties",
        "bestBid",
        "bestAsk",
        "limitPriceSafetyMultiplierFromMedian",
        "tcoDebug",
        "exchange",
        "symbol",
        "Exchange",
        "exchange",
        "market",
        "logPrefix",
        "skippedProperties",
        "bestBid",
        "bestAsk",
        "limitPriceSafetyMultiplierFromMedian",
        "buyOrSell",
        "predefinedAmount",
        "getValue",
        "market",
        "exchange",
        "safeDict",
        "getValue",
        "market",
        "getValue",
        "minimunPrices",
        "getValue",
        "minimunPrices",
        "divide",
        "bestBid",
        "limitPriceSafetyMultiplierFromMedian",
        "isTrue",
        "isTrue",
        "isEqual",
        "minimumPrice",
        "isTrue",
        "isLessThan",
        "limitBuyPrice_nonFillable",
        "minimumPrice",
        "limitBuyPrice_nonFillable",
        "minimumPrice",
        "multiply",
        "bestAsk",
        "limitPriceSafetyMultiplierFromMedian",
        "isTrue",
        "isTrue",
        "isEqual",
        "maximumPrice",
        "isTrue",
        "isGreaterThan",
        "limitSellPrice_nonFillable",
        "maximumPrice",
        "limitSellPrice_nonFillable",
        "maximumPrice",
        "isTrue",
        "isEqual",
        "buyOrSell",
        "tcoGetMinimumAmountForLimitPrice",
        "exchange",
        "market",
        "limitBuyPrice_nonFillable",
        "predefinedAmount",
        "createdOrder",
        "tcoCreateOrderSafe",
        "exchange",
        "symbol",
        "orderAmount",
        "limitBuyPrice_nonFillable",
        "skippedProperties",
        "tcoGetMinimumAmountForLimitPrice",
        "exchange",
        "market",
        "limitSellPrice_nonFillable",
        "predefinedAmount",
        "createdOrder",
        "tcoCreateOrderSafe",
        "exchange",
        "symbol",
        "orderAmount",
        "limitSellPrice_nonFillable",
        "skippedProperties",
        "testSharedMethods",
        "fetchOrder",
        "exchange",
        "symbol",
        "getValue",
        "createdOrder",
        "skippedProperties",
        "isTrue",
        "isEqual",
        "fetchedOrder",
        "testOrder",
        "exchange",
        "skippedProperties",
        "fetchedOrder",
        "symbol",
        "exchange",
        "milliseconds",
        "testSharedMethods",
        "assertOrderState",
        "exchange",
        "skippedProperties",
        "createdOrder",
        "testSharedMethods",
        "assertOrderState",
        "exchange",
        "skippedProperties",
        "fetchedOrder",
        "testSharedMethods",
        "assertInArray",
        "exchange",
        "skippedProperties",
        "createdOrder",
        "buyOrSell",
        "testSharedMethods",
        "assertInArray",
        "exchange",
        "skippedProperties",
        "fetchedOrder",
        "buyOrSell",
        "tcoCancelOrder",
        "exchange",
        "symbol",
        "getValue",
        "createdOrder",
        "e",
        "add",
        "add",
        "logPrefix",
        "e",
        "ToString",
        "Exchange",
        "exchange",
        "market",
        "logPrefix",
        "skippedProperties",
        "bestBid",
        "bestAsk",
        "limitPriceSafetyMultiplierFromMedian",
        "buyOrSellString",
        "predefinedAmount",
        "isTrue",
        "getValue",
        "market",
        "isTrue",
        "getValue",
        "market",
        "isEqual",
        "buyOrSellString",
        "isTrue",
        "isBuy",
        "isTrue",
        "isBuy",
        "isTrue",
        "isBuy",
        "multiply",
        "bestAsk",
        "limitPriceSafetyMultiplierFromMedian",
        "divide",
        "bestBid",
        "limitPriceSafetyMultiplierFromMedian",
        "isTrue",
        "isBuy",
        "divide",
        "bestBid",
        "limitPriceSafetyMultiplierFromMedian",
        "multiply",
        "bestAsk",
        "limitPriceSafetyMultiplierFromMedian",
        "getValue",
        "market",
        "tcoGetMinimumAmountForLimitPrice",
        "exchange",
        "market",
        "entryorderPrice",
        "tcoCreateOrderSafe",
        "exchange",
        "symbol",
        "entrySide",
        "entryAmount",
        "entryorderPrice",
        "skippedProperties",
        "tcoTryCancelOrder",
        "exchange",
        "symbol",
        "entryorderFilled",
        "skippedProperties",
        "testSharedMethods",
        "fetchOrder",
        "exchange",
        "symbol",
        "getValue",
        "entryorderFilled",
        "skippedProperties",
        "tcoAssertFilledOrder",
        "exchange",
        "market",
        "logPrefix",
        "skippedProperties",
        "entryorderFilled",
        "entryorderFetched",
        "entrySide",
        "entryAmount",
        "exchange",
        "parseToNumeric",
        "exchange",
        "safeString",
        "entryorderFetched",
        "isTrue",
        "isSwapFuture",
        "IDictionary",
        "parameters",
        "tcoCreateOrderSafe",
        "exchange",
        "symbol",
        "exitSide",
        "amountToClose",
        "isTrue",
        "getValue",
        "market",
        "exitorderPrice",
        "parameters",
        "skippedProperties",
        "testSharedMethods",
        "fetchOrder",
        "exchange",
        "symbol",
        "getValue",
        "exitorderFilled",
        "skippedProperties",
        "tcoAssertFilledOrder",
        "exchange",
        "market",
        "logPrefix",
        "skippedProperties",
        "exitorderFilled",
        "exitorderFetched",
        "exitSide",
        "amountToClose",
        "e",
        "add",
        "e",
        "ToString",
        "Exchange",
        "exchange",
        "market",
        "logPrefix",
        "skippedProperties",
        "createdOrder",
        "fetchedOrder",
        "requestedSide",
        "requestedAmount",
        "exchange",
        "safeString",
        "getValue",
        "market",
        "exchange",
        "numberToString",
        "requestedAmount",
        "exchange",
        "safeString",
        "fetchedOrder",
        "isEqual",
        "filledString",
        "add",
        "add",
        "logPrefix",
        "exchange",
        "json",
        "fetchedOrder",
        "Precise",
        "stringAdd",
        "entryorderAmountString",
        "precisionAmount",
        "Precise",
        "stringSub",
        "entryorderAmountString",
        "precisionAmount",
        "Precise",
        "stringLe",
        "filledString",
        "maxExpectedFilledAmount",
        "add",
        "add",
        "logPrefix",
        "exchange",
        "json",
        "fetchedOrder",
        "Precise",
        "stringGe",
        "filledString",
        "minExpectedFilledAmount",
        "add",
        "add",
        "logPrefix",
        "exchange",
        "json",
        "fetchedOrder",
        "testSharedMethods",
        "assertOrderState",
        "exchange",
        "skippedProperties",
        "createdOrder",
        "testSharedMethods",
        "assertOrderState",
        "exchange",
        "skippedProperties",
        "fetchedOrder",
        "testSharedMethods",
        "assertInArray",
        "exchange",
        "skippedProperties",
        "createdOrder",
        "requestedSide",
        "testSharedMethods",
        "assertInArray",
        "exchange",
        "skippedProperties",
        "fetchedOrder",
        "requestedSide",
        "Exchange",
        "exchange",
        "symbol",
        "orderId",
        "testSharedMethods",
        "logTemplate",
        "exchange",
        "symbol",
        "isTrue",
        "isTrue",
        "getValue",
        "exchange",
        "has",
        "isTrue",
        "isEqual",
        "orderId",
        "usedMethod",
        "cancelResult",
        "exchange",
        "cancelOrder",
        "orderId",
        "symbol",
        "isTrue",
        "getValue",
        "exchange",
        "has",
        "usedMethod",
        "cancelResult",
        "exchange",
        "cancelAllOrders",
        "symbol",
        "isTrue",
        "getValue",
        "exchange",
        "has",
        "add",
        "logPrefix",
        "tcoDebug",
        "exchange",
        "symbol",
        "add",
        "add",
        "add",
        "usedMethod",
        "getValue",
        "cancelResult",
        "Exchange",
        "exchange",
        "symbol",
        "orderType",
        "side",
        "amount",
        "price",
        "parameters",
        "skippedProperties",
        "parameters",
        "skippedProperties",
        "tcoDebug",
        "exchange",
        "symbol",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "orderType",
        "side",
        "amount",
        "price",
        "exchange",
        "json",
        "parameters",
        "exchange",
        "createOrder",
        "symbol",
        "orderType",
        "side",
        "amount",
        "price",
        "parameters",
        "testOrder",
        "exchange",
        "skippedProperties",
        "order",
        "symbol",
        "DateTimeOffset",
        "UtcNow",
        "ToUnixTimeMilliseconds",
        "e",
        "isTrue",
        "isEqual",
        "orderType",
        "tcoTryCancelOrder",
        "exchange",
        "symbol",
        "order",
        "skippedProperties",
        "e",
        "order",
        "Exchange",
        "exchange",
        "market",
        "exchange",
        "safeDict",
        "getValue",
        "market",
        "exchange",
        "safeNumber",
        "amountValues",
        "isEqual",
        "amountMin",
        "add",
        "add",
        "add",
        "exchange",
        "id",
        "getValue",
        "market",
        "amountMin",
        "Exchange",
        "exchange",
        "market",
        "exchange",
        "safeDict",
        "getValue",
        "market",
        "exchange",
        "safeNumber",
        "costValues",
        "isEqual",
        "costMin",
        "add",
        "add",
        "add",
        "exchange",
        "id",
        "getValue",
        "market",
        "costMin",
        "Exchange",
        "exchange",
        "market",
        "price",
        "predefinedAmount",
        "tcoMininumAmount",
        "exchange",
        "market",
        "tcoMininumCost",
        "exchange",
        "market",
        "isTrue",
        "isEqual",
        "minimumCost",
        "isTrue",
        "isLessThan",
        "multiply",
        "finalAmount",
        "price",
        "minimumCost",
        "finalAmount",
        "divide",
        "minimumCost",
        "price",
        "isTrue",
        "isEqual",
        "predefinedAmount",
        "finalAmount",
        "mathMax",
        "finalAmount",
        "predefinedAmount",
        "exchange",
        "safeNumber",
        "getValue",
        "market",
        "isEqual",
        "exchange",
        "precisionMode",
        "isTrue",
        "isEqual",
        "amountPrecision",
        "amountPrecision",
        "isTrue",
        "isTickSizePrecision",
        "amountPrecision",
        "divide",
        "Pow",
        "Convert",
        "ToDouble",
        "Convert",
        "ToDouble",
        "amountPrecision",
        "finalAmount",
        "add",
        "finalAmount",
        "amountPrecision",
        "finalAmount",
        "multiply",
        "finalAmount",
        "finalAmount",
        "parseFloat",
        "exchange",
        "decimalToPrecision",
        "finalAmount",
        "getValue",
        "getValue",
        "market",
        "exchange",
        "precisionMode",
        "finalAmount",
        "Exchange",
        "exchange",
        "symbol",
        "order",
        "skippedProperties",
        "testSharedMethods",
        "fetchOrder",
        "exchange",
        "symbol",
        "getValue",
        "order",
        "skippedProperties",
        "exchange",
        "inArray",
        "getValue",
        "orderFetched",
        "isTrue",
        "needsCancel",
        "tcoDebug",
        "exchange",
        "symbol",
        "tcoCancelOrder",
        "exchange",
        "symbol",
        "getValue",
        "order",
        "e",
        "tcoDebug",
        "exchange",
        "symbol",
        "add",
        "e",
        "ToString",
        "tcoDebug",
        "exchange",
        "symbol"
    ],
    "literals": [
        "\" >>>>> testCreateOrder [\"",
        "\"id\"",
        "\" : \"",
        "\"] \"",
        "\"createOrder\"",
        "\"cancelOrder\"",
        "\"cancelOrders\"",
        "\"cancelAllOrders\"",
        "\" does not have cancelOrder|cancelOrders|canelAllOrders method, which is needed to make tests for `createOrder` method. Skipping the test...\"",
        "\"swap\"",
        "\"future\"",
        "\"fetchBalance\"",
        "\" does not have fetchBalance() method, which is needed to make tests for `createOrder` method. Skipping the test...\"",
        "\"base\"",
        "\"free\"",
        "\"quote\"",
        "\"free\"",
        "\" - testing account not have balance of\"",
        "\"quote\"",
        "\" in fetchBalance() which is required to test\"",
        "\"fetched balance for \"",
        "\" : \"",
        "\" \"",
        "\"base\"",
        "\"/\"",
        "\" \"",
        "\"quote\"",
        "\"createOrder\"",
        "\"### SCENARIO 1 ###\"",
        "\"buy\"",
        "\"sell\"",
        "\"### SCENARIO 1 PASSED ###\"",
        "\"### SCENARIO 2 ###\"",
        "\"buy\"",
        "\"sell\"",
        "\"### SCENARIO 2 PASSED ###\"",
        "\"symbol\"",
        "\"limits\"",
        "\"price\"",
        "\"min\"",
        "\"max\"",
        "\"buy\"",
        "\"limit\"",
        "\"buy\"",
        "\"limit\"",
        "\"sell\"",
        "\"id\"",
        "\"createOrder\"",
        "\"createdOrder\"",
        "\"open\"",
        "\"fetchedOrder\"",
        "\"open\"",
        "\"createdOrder\"",
        "\"side\"",
        "\"fetchedOrder\"",
        "\"side\"",
        "\"id\"",
        "\" failed for Scenario 1: \"",
        "\"swap\"",
        "\"future\"",
        "\"buy\"",
        "\"buy\"",
        "\"sell\"",
        "\"sell\"",
        "\"buy\"",
        "\"symbol\"",
        "\"limit\"",
        "\"id\"",
        "\"filled\"",
        "\"reduceOnly\"",
        "\"market\"",
        "\"spot\"",
        "\"id\"",
        "\"failed for Scenario 2: \"",
        "\"precision\"",
        "\"amount\"",
        "\"filled\"",
        "\" order should be filled, but it is not. \"",
        "\" filled amount is more than expected, possibly some implementation issue. \"",
        "\" filled amount is less than expected, possibly some implementation issue. \"",
        "\"createdOrder\"",
        "\"closed\"",
        "\"fetchedOrder\"",
        "\"closed\"",
        "\"createdOrder\"",
        "\"side\"",
        "\"fetchedOrder\"",
        "\"side\"",
        "\"createOrder\"",
        "\"\"",
        "\"cancelOrder\"",
        "\"cancelOrder\"",
        "\"cancelAllOrders\"",
        "\"cancelAllOrders\"",
        "\"cancelOrders\"",
        "\" cancelOrders method is not unified yet, coming soon...\"",
        "\"canceled order using \"",
        "\":\"",
        "\"id\"",
        "\"Executing createOrder \"",
        "\" \"",
        "\" \"",
        "\" \"",
        "\" \"",
        "\"createOrder\"",
        "\"market\"",
        "\"limits\"",
        "\"amount\"",
        "\"min\"",
        "\" \"",
        "\"symbol\"",
        "\" can not determine minimum amount for order\"",
        "\"limits\"",
        "\"cost\"",
        "\"min\"",
        "\" \"",
        "\"symbol\"",
        "\" can not determine minimum cost for order\"",
        "\"precision\"",
        "\"amount\"",
        "\"precision\"",
        "\"amount\"",
        "\"id\"",
        "\"status\"",
        "\"open\"",
        "\"pending\"",
        "\"trying to cancel the remaining amount of partially filled order...\"",
        "\"id\"",
        "\" a moment ago order was reported as pending, but could not be cancelled at this moment. Exception message: \"",
        "\"order is already closed/filled, no need to cancel it\""
    ],
    "variables": [
        "debugCreateOrder",
        "logPrefix",
        "limitPriceSafetyMultiplierFromMedian",
        "market",
        "isSwapFuture",
        "balance",
        "initialBaseBalance",
        "initialQuoteBalance",
        "bestBidbestAskVariable",
        "bestBid",
        "bestAsk",
        "symbol",
        "minimunPrices",
        "minimumPrice",
        "maximumPrice",
        "limitBuyPrice_nonFillable",
        "limitSellPrice_nonFillable",
        "createdOrder",
        "orderAmount",
        "orderAmount",
        "fetchedOrder",
        "isSwapFuture",
        "isBuy",
        "entrySide",
        "exitSide",
        "entryorderPrice",
        "exitorderPrice",
        "symbol",
        "entryAmount",
        "entryorderFilled",
        "entryorderFetched",
        "amountToClose",
        "parameters",
        "exitorderFilled",
        "exitorderFetched",
        "precisionAmount",
        "entryorderAmountString",
        "filledString",
        "maxExpectedFilledAmount",
        "minExpectedFilledAmount",
        "logPrefix",
        "usedMethod",
        "cancelResult",
        "order",
        "amountValues",
        "amountMin",
        "costValues",
        "costMin",
        "minimumAmount",
        "minimumCost",
        "finalAmount",
        "minimumAmount",
        "amountPrecision",
        "isTickSizePrecision",
        "orderFetched",
        "needsCancel"
    ],
    "comments": [
        "PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:",
        "https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code",
        "----------------------------------------------------------------------------",
        "just for debugging purposes",
        "for c# fix, extra step to convert them to string",
        "----------------------------------------------------------------------------",
        "pre-define some coefficients, which will be used down below",
        "todo: when this https://github.com/ccxt/ccxt/issues/22442 is implemented, we'll remove hardcoded value. atm 5% is enough",
        "create a \"limit order\" which IS GUARANTEED not to have a fill (i.e. being far from the real price)",
        "for swap markets, we test sell orders too",
        "create an order which IS GUARANTEED to have a fill (full or partial)",
        "for swap markets, we test sell orders too",
        "----------------------------------------------------------------------------",
        "below we set limit price, where the order will not be completed.",
        "We do not use the extreme \"limits\" values for that market, because, even though min purchase amount for BTC/USDT can be 0.01 BTC, it means with 10$ you can buy 1000 BTC, which leads to unrealistic outcome. So, we just use around 5%-10% far price from the current price.",
        "test fetched order object",
        "ensure that order is not filled",
        "ensure that order side matches",
        "todo revise: (tcoMininumCost (exchange, market) / amountToClose) / limitPriceSafetyMultiplierFromMedian;",
        "",
        "",
        "just for case, cancel any possible unfilled amount (though it is not be expected because the order was fillable)",
        "now, as order is closed/canceled, we can reliably fetch the order information",
        "",
        "### close the traded position ###",
        "",
        "as we want to close position, we should use 'reduceOnly' to ensure we don't open a margined position accidentally, because some exchanges might have automatically enabled margin-mode (on spot) or hedge-mode (on contracts)",
        "test filled amount",
        "filled amount should be whithin the expected range i.e. if you buy 100 DOGECOIN and amount-precision is 1,",
        "and also considering possible roundings in implementation, then filled amount should be between 99 and 101",
        "order state should be \"closed\"",
        "ensure that order side matches",
        "----------------------------------------------------------------------------",
        "----------------------------------------------------------------------------",
        "----------------------------------------------------------------------------",
        "if it was limit order, try to cancel it before exiting the script",
        "this method calculates the minimum realistic order amount:",
        "at first it checks the \"minimum hardcap limit\" (i.e. 7 DOGE), however, if exchange also has \"minimum cost\" limits,",
        "then we need to calculate the amount using cost, because of price is volatile, today's 7 DOGE cost could be 1$",
        "but \"minimum cost\" requirement could be 5$ (which translates to 35 DOGE amount)",
        "because it's possible that calculated value might get truncated down in \"createOrder\" (i.e. 0.129 -> 0.12), we should ensure that final amount * price would bypass minimum cost requirements, by adding the \"minimum precision\"",
        "todo: revise this for better way in future",
        "todo: remove after TICK_SIZE unification",
        "this converts DECIMAL_PRECISION into TICK_SIZE",
        "add around 10% to ensure \"cost\" is enough",
        "2 stands for ROUND_UP constant, 0 stands for TRUNCATE",
        "if it was not reported as closed/filled, then try to cancel it",
        "order might have been closed/filled already, before 'cancelOrder' call reaches server, so it is tolerable, we don't throw exception"
    ],
    "docstrings": [
        "**************** [Scenario 1 - START] **************** //",
        "**************** [Scenario 2 - START] **************** //"
    ],
    "functions": [
        "tcoDebug",
        "testCreateOrder",
        "tcoCreateUnfillableOrder",
        "tcoCreateFillableOrder",
        "tcoAssertFilledOrder",
        "tcoCancelOrder",
        "tcoCreateOrderSafe",
        "tcoMininumAmount",
        "tcoMininumCost",
        "tcoGetMinimumAmountForLimitPrice",
        "tcoTryCancelOrder"
    ],
    "classes": [
        "testMainClass"
    ]
}