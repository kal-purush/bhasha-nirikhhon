{
    "identifiers": [
        "hashlib",
        "uuid",
        "uuid",
        "uuid4",
        "property",
        "__password",
        "password",
        "setter",
        "pwd",
        "pwd",
        "pwd",
        "hashlib",
        "md5",
        "pwd",
        "encode",
        "hexdigest",
        "lower",
        "pwd",
        "pwd",
        "pwd",
        "__password",
        "hashlib",
        "md5",
        "pwd",
        "encode",
        "hexdigest",
        "lower",
        "__password",
        "User",
        "user_1",
        "id",
        "User",
        "user_1",
        "id",
        "user_2",
        "id",
        "u_pwd",
        "user_1",
        "password",
        "u_pwd",
        "user_2",
        "password",
        "user_2",
        "password",
        "user_2",
        "password",
        "user_1",
        "is_valid_password",
        "u_pwd",
        "user_1",
        "is_valid_password",
        "user_1",
        "is_valid_password",
        "user_1",
        "is_valid_password",
        "user_2",
        "is_valid_password"
    ],
    "literals": [
        "'__main__'",
        "\"Test User\"",
        "\"New User should have an id\"",
        "\"User.id should be unique\"",
        "\"myPassword\"",
        "\"User.password should be hashed\"",
        "\"User.password should be None by default\"",
        "\"User.password should be None if setter to None\"",
        "\"User.password should be None if setter to an integer\"",
        "\"is_valid_password should return True if it's the right \\\npassword\"",
        "\"Fakepwd\"",
        "\"is_valid_password should return False if it's not the right \\\npassword\"",
        "\"is_valid_password should return False if compare with None\"",
        "\"is_valid_password should return False if compare with integer\"",
        "\"No pwd\"",
        "\"is_valid_password should return False if no password set \\\nbefore\""
    ],
    "variables": [
        "__password",
        "id",
        "__password",
        "_password",
        "user_1",
        "user_2",
        "u_pwd",
        "user_1",
        "password",
        "user_2",
        "password",
        "user_2",
        "password"
    ],
    "comments": [
        "!/usr/bin/python3"
    ],
    "docstrings": [
        "\"\"\"\n User Model\n\"\"\"",
        "\"\"\"\n    User class:\n    - id: public string unique (uuid)\n    - password: private string hash in MD5\n    \"\"\"",
        "\"\"\"\n        Initialize a new user:\n        - assigned an unique `id`\n        \"\"\"",
        "\"\"\"\n        Password getter\n        \"\"\"",
        "\"\"\"\n        Password setter:\n        - `None` if `pwd` is `None`\n        - `None` if `pwd` is not a string\n        - Hash `pwd` in MD5 before assign to `__password`\n        \"\"\"",
        "\"\"\"\n        Valid password:\n        - `False` if `pwd` is `None`\n        - `False` if `pwd` is not a string\n        - `False` if `__password` is `None`\n        - Compare `__password` and the MD5 value of `pwd`\n        \"\"\""
    ],
    "functions": [
        "password",
        "password",
        "is_valid_password"
    ],
    "classes": [
        "User"
    ]
}