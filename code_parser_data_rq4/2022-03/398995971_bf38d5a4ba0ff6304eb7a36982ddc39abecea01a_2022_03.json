{
    "identifiers": [
        "csv",
        "json",
        "article",
        "filepath",
        "encoding",
        "open",
        "filepath",
        "encoding",
        "encoding",
        "file_obj",
        "json",
        "load",
        "file_obj",
        "filepath",
        "data",
        "headers",
        "encoding",
        "newline",
        "open",
        "filepath",
        "encoding",
        "encoding",
        "newline",
        "newline",
        "file_obj",
        "csv",
        "writer",
        "file_obj",
        "headers",
        "writer",
        "writerow",
        "headers",
        "row",
        "data",
        "writer",
        "writerow",
        "row",
        "writer",
        "writerows",
        "data",
        "filepath",
        "data",
        "encoding",
        "ensure_ascii",
        "indent",
        "open",
        "filepath",
        "encoding",
        "encoding",
        "file_obj",
        "json",
        "dump",
        "data",
        "file_obj",
        "ensure_ascii",
        "ensure_ascii",
        "indent",
        "indent",
        "main"
    ],
    "literals": [
        "'utf-8'",
        "'r'",
        "'utf-8'",
        "''",
        "'w'",
        "'utf-8'",
        "'w'",
        "'__main__'"
    ],
    "variables": [
        "writer",
        "articles",
        "subject_counts",
        "subject_counts",
        "authors",
        "authors",
        "citations",
        "citations"
    ],
    "comments": [
        "Nested loops",
        "TODO Implement",
        "CHALLENGE 01",
        "Get articles",
        "TODO Call function",
        "print(f\"\\nCh 01 Articles (n={len(articles)})\")",
        "TODO Implement loop",
        "Sort by value (reversed = -x[1]), then by key (x[0])",
        "dict comp",
        "Write to file",
        "TODO write to file",
        "CHALLENGE 02",
        "TODO Implement loop",
        "print(f\"\\nauthors (n={len(authors)})\")",
        "Sort Authors",
        "WARN: convert None to empty string to avoid runtime exception (middlename value)",
        "str(x or '') returns '' if x is falsy",
        "TypeError: '<' not supported between instances of 'NoneType' and 'str'",
        "TODO list comp",
        "print(f\"\\nAuthors = {authors}\")",
        "TODO write to file",
        "CHALLENGE 03",
        "TODO Implment loop",
        "Sort Authors",
        "TODO dict comp",
        "TODO write to file",
        "CHALLENGE 04",
        "TODO Refactor Challenge 03 loop",
        "print(f\"\\nCh 03 Benedict Carey authored articles = {len(citations['Carey_Benedict'])}\")"
    ],
    "docstrings": [
        "\"\"\"Returns a list of \"subject\" string values retrieved from the passed in\n    < article >'s \"keywords\" list.\n\n    Parameters:\n        article (dict): representation of an article\n\n    Returns:\n        list: list of \"subject\" strings associated with the < article >\n    \"\"\"",
        "\"\"\"Reads a JSON document, decodes the file content, and returns a list or dictionary if\n    provided with a valid filepath.\n\n    Parameters:\n        filepath (str): path to file\n        encoding (str): name of encoding used to decode the file\n\n    Returns:\n        dict/list: dict or list representations of the decoded JSON document\n    \"\"\"",
        "\"\"\"\n    Writes data to a target CSV file. Column headers are written as the first\n    row of the CSV file if optional headers are specified.\n\n    WARN: If newline='' is not specified, newlines '\\n' or '\\r\\n' embedded inside quoted\n    fields may not be interpreted correctly by the csv.reader. On platforms that utilize\n    `\\r\\n` an extra `\\r` will be added.\n\n    Parameters:\n        filepath (str): path to target file (if file does not exist it will be created)\n        data (list | tuple): sequence to be written to the target file\n        headers (seq): optional header row list or tuple\n        encoding (str): name of encoding used to encode the file\n        newline (str): specifies replacement value for newline '\\n'\n                       or '\\r\\n' (Windows) character sequences\n\n    Returns:\n        None\n    \"\"\"",
        "\"\"\"Serializes object as JSON. Writes content to the provided filepath.\n\n    Parameters:\n        filepath (str): the path to the file\n        data (dict)/(list): the data to be encoded as JSON and written to the file\n        encoding (str): name of encoding used to encode the file\n        ensure_ascii (str): if False non-ASCII characters are printed as is; otherwise\n                            non-ASCII characters are escaped.\n        indent (int): number of \"pretty printed\" indention spaces applied to encoded JSON\n\n    Returns:\n        None\n    \"\"\"",
        "\"\"\"Program entry point.  Orchestrates program's flow of execution.\n\n    Parameters:\n        None\n\n    Returns:\n        None\n    \"\"\""
    ],
    "functions": [
        "get_article_subjects",
        "read_json",
        "write_csv",
        "write_json",
        "main"
    ],
    "classes": []
}