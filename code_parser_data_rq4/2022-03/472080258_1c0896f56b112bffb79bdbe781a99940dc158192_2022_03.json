{
    "identifiers": [
        "exports",
        "timezoneJS",
        "exports",
        "timezoneJS",
        "root",
        "timezoneJS",
        "root",
        "root",
        "root",
        "root",
        "timezoneJS",
        "timezoneJS",
        "i",
        "MONTHS",
        "i",
        "SHORT_MONTHS",
        "MONTHS",
        "i",
        "i",
        "i",
        "i",
        "DAYS",
        "i",
        "SHORT_DAYS",
        "DAYS",
        "i",
        "i",
        "el",
        "i",
        "i",
        "el",
        "i",
        "i",
        "number",
        "digits",
        "number",
        "number",
        "number",
        "number",
        "digits",
        "number",
        "number",
        "digits",
        "number",
        "s",
        "digits",
        "s",
        "s",
        "s",
        "opts",
        "fleegix",
        "fleegix",
        "$",
        "$",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "fleegix",
        "fleegix",
        "fleegix",
        "opts",
        "$",
        "opts",
        "fleegix",
        "fleegix",
        "fleegix",
        "opts",
        "opts",
        "opts",
        "$",
        "opts",
        "opts",
        "opts",
        "timezoneJS",
        "arguments",
        "args",
        "args",
        "args",
        "args",
        "args",
        "TZ_REGEXP",
        "args",
        "args",
        "tz",
        "args",
        "args",
        "dt",
        "dt",
        "args",
        "i",
        "i",
        "arr",
        "i",
        "args",
        "i",
        "dt",
        "arr",
        "arr",
        "arr",
        "arr",
        "arr",
        "arr",
        "arr",
        "tz",
        "arr",
        "dt",
        "dt",
        "tz",
        "timezoneJS",
        "res",
        "timezoneJS",
        "res",
        "res",
        "res",
        "dt",
        "dt",
        "dt",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "isNaN",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "dt",
        "dt",
        "dt",
        "dt",
        "dt",
        "dt",
        "dt",
        "dt",
        "dt",
        "dt",
        "utcMillis",
        "tz",
        "utcMillis",
        "tzOffset",
        "tz",
        "timezoneJS",
        "dt",
        "tz",
        "dt",
        "dt",
        "utcMillis",
        "dt",
        "tzOffset",
        "dt",
        "unit",
        "n",
        "isNaN",
        "n",
        "unit",
        "unit",
        "unit",
        "dt",
        "meth",
        "n",
        "dt",
        "unit",
        "n",
        "isNaN",
        "n",
        "unit",
        "unit",
        "unit",
        "dt",
        "meth",
        "n",
        "dt",
        "dt",
        "dt",
        "tz",
        "tz",
        "previousOffset",
        "timezoneJS",
        "timezoneJS",
        "format",
        "tz",
        "format",
        "format",
        "tz",
        "timezoneJS",
        "tz",
        "tz",
        "_this",
        "_this",
        "tz",
        "_this",
        "result",
        "token",
        "_fixWidth",
        "_this",
        "token",
        "token",
        "_fixWidth",
        "_this",
        "token",
        "token",
        "_fixWidth",
        "_this",
        "token",
        "token",
        "_fixWidth",
        "_this",
        "token",
        "token",
        "_fixWidth",
        "_this",
        "token",
        "token",
        "_this",
        "token",
        "_len",
        "timezoneJS",
        "_month",
        "_len",
        "timezoneJS",
        "_month",
        "_len",
        "_fixWidth",
        "_month",
        "_len",
        "hours",
        "hours",
        "hours",
        "token",
        "_fixWidth",
        "hours",
        "token",
        "token",
        "DAYS",
        "_this",
        "token",
        "tzInfo",
        "y",
        "m",
        "d",
        "m",
        "m",
        "a",
        "parseInt",
        "m",
        "m",
        "m",
        "y",
        "a",
        "m",
        "y",
        "m",
        "a",
        "y",
        "a",
        "a",
        "y",
        "m",
        "d",
        "b",
        "jDt",
        "timezoneJS",
        "t",
        "t",
        "fileName",
        "opts",
        "_this",
        "fileName",
        "opts",
        "opts",
        "_this",
        "_this",
        "url",
        "_this",
        "url",
        "_this",
        "opts",
        "opts",
        "url",
        "tz",
        "regionExceptions",
        "tz",
        "exc",
        "exc",
        "reg",
        "tz",
        "ret",
        "regionMap",
        "reg",
        "ret",
        "ret",
        "_this",
        "tz",
        "link",
        "getRegionForTimezone",
        "link",
        "_this",
        "_this",
        "getRegionForTimezone",
        "tz",
        "invalidTZError",
        "tz",
        "pat",
        "hms",
        "parseInt",
        "hms",
        "hms",
        "hms",
        "parseInt",
        "hms",
        "hms",
        "hms",
        "parseInt",
        "hms",
        "hms",
        "z",
        "z",
        "parseInt",
        "z",
        "z",
        "mon",
        "SHORT_MONTHS",
        "z",
        "dat",
        "parseInt",
        "z",
        "z",
        "z",
        "parseTimeString",
        "yea",
        "mon",
        "dat",
        "t",
        "t",
        "t",
        "dt",
        "tz",
        "dt",
        "dt",
        "dt",
        "_this",
        "t",
        "zoneList",
        "t",
        "zoneList",
        "zoneList",
        "_this",
        "t",
        "zoneList",
        "_this",
        "_this",
        "getZone",
        "dt",
        "tz",
        "invalidTZError",
        "t",
        "zoneList",
        "tz",
        "dt",
        "zoneList",
        "i",
        "i",
        "zoneList",
        "i",
        "z",
        "utcMillis",
        "z",
        "zoneList",
        "i",
        "time",
        "parseTimeString",
        "time",
        "time",
        "off",
        "adj",
        "off",
        "off",
        "off",
        "off",
        "dt",
        "zone",
        "isUTC",
        "dt",
        "dt",
        "dt",
        "zone",
        "zone",
        "date",
        "rule",
        "offset",
        "offset",
        "basicOffset",
        "offset",
        "getAdjustedOffset",
        "basicOffset",
        "rule",
        "offset",
        "date",
        "offset",
        "yearAndRule",
        "prevRule",
        "yearAndRule",
        "yearAndRule",
        "rule",
        "EXACT_DATE_TIME",
        "year",
        "EXACT_DATE_TIME",
        "year",
        "EXACT_DATE_TIME",
        "year",
        "rule",
        "effectiveDate",
        "EXACT_DATE_TIME",
        "year",
        "rule",
        "isNaN",
        "rule",
        "effectiveDate",
        "year",
        "SHORT_MONTHS",
        "rule",
        "rule",
        "hms",
        "hms",
        "hms",
        "rule",
        "effectiveDate",
        "year",
        "SHORT_MONTHS",
        "rule",
        "hms",
        "hms",
        "hms",
        "targetDay",
        "SHORT_DAYS",
        "rule",
        "effectiveDate",
        "year",
        "SHORT_MONTHS",
        "rule",
        "rule",
        "hms",
        "hms",
        "hms",
        "targetDay",
        "SHORT_DAYS",
        "rule",
        "rule",
        "effectiveDate",
        "effectiveDate",
        "effectiveDate",
        "targetDay",
        "ourDay",
        "targetDay",
        "ourDay",
        "effectiveDate",
        "effectiveDate",
        "targetDay",
        "ourDay",
        "targetDay",
        "ourDay",
        "EXACT_DATE_TIME",
        "year",
        "rule",
        "effectiveDate",
        "prevRule",
        "effectiveDate",
        "convertDateToUTC",
        "effectiveDate",
        "hms",
        "prevRule",
        "effectiveDate",
        "year",
        "ruleset",
        "ruleset",
        "i",
        "ruleset",
        "i",
        "ruleset",
        "i",
        "year",
        "ruleset",
        "i",
        "year",
        "ruleset",
        "i",
        "year",
        "ruleset",
        "i",
        "ruleset",
        "i",
        "applicableRules",
        "year",
        "ruleset",
        "i",
        "applicableRules",
        "a",
        "b",
        "prev",
        "a",
        "year",
        "a",
        "rule",
        "a",
        "a",
        "prev",
        "EXACT_DATE_TIME",
        "year",
        "EXACT_DATE_TIME",
        "year",
        "rule",
        "EXACT_DATE_TIME",
        "year",
        "rule",
        "convertRuleToExactDateAndTime",
        "a",
        "prev",
        "prev",
        "a",
        "convertDateToUTC",
        "a",
        "isUTC",
        "prev",
        "b",
        "year",
        "b",
        "rule",
        "b",
        "b",
        "prev",
        "EXACT_DATE_TIME",
        "year",
        "EXACT_DATE_TIME",
        "year",
        "rule",
        "EXACT_DATE_TIME",
        "year",
        "rule",
        "convertRuleToExactDateAndTime",
        "b",
        "prev",
        "prev",
        "b",
        "convertDateToUTC",
        "b",
        "isUTC",
        "prev",
        "a",
        "a",
        "b",
        "b",
        "a",
        "b",
        "date",
        "applicableRules",
        "findApplicableRules",
        "year",
        "_this",
        "ruleset",
        "applicableRules",
        "date",
        "applicableRules",
        "compareDates",
        "applicableRules",
        "date",
        "applicableRules",
        "applicableRules",
        "findApplicableRules",
        "year",
        "_this",
        "ruleset",
        "applicableRules",
        "compareDates",
        "applicableRules",
        "date",
        "pinpoint",
        "compareDates",
        "date",
        "applicableRules",
        "pinpoint",
        "applicableRules",
        "pinpoint",
        "applicableRules",
        "pinpoint",
        "pinpoint",
        "pinpoint",
        "applicableRules",
        "compareDates",
        "date",
        "applicableRules",
        "pinpoint",
        "applicableRules",
        "pinpoint",
        "applicableRules",
        "pinpoint",
        "pinpoint",
        "applicableRules",
        "pinpoint",
        "off",
        "rule",
        "rule",
        "off",
        "zone",
        "rule",
        "zone",
        "rule",
        "repl",
        "rule",
        "rule",
        "repl",
        "res",
        "repl",
        "res",
        "rule",
        "res",
        "res",
        "o",
        "p",
        "o",
        "opts",
        "p",
        "o",
        "p",
        "opts",
        "callbackFn",
        "opts",
        "opts",
        "done",
        "done",
        "callbackFn",
        "callbackFn",
        "i",
        "i",
        "i",
        "opts",
        "fileName",
        "opts",
        "fileName",
        "fileName",
        "builtInLoadZoneFile",
        "fileName",
        "opts",
        "url",
        "sync",
        "data",
        "data",
        "eval",
        "data",
        "z",
        "data",
        "_this",
        "z",
        "data",
        "z",
        "r",
        "data",
        "_this",
        "r",
        "data",
        "r",
        "sync",
        "processData",
        "_this",
        "url",
        "_this",
        "url",
        "processData",
        "data",
        "data",
        "z",
        "data",
        "_this",
        "z",
        "data",
        "z",
        "r",
        "data",
        "_this",
        "r",
        "data",
        "r",
        "z",
        "arr",
        "z",
        "arr",
        "i",
        "lines",
        "i",
        "l",
        "lines",
        "i",
        "l",
        "l",
        "zone",
        "l",
        "l",
        "l",
        "l",
        "arr",
        "l",
        "chunk",
        "arr",
        "chunk",
        "zone",
        "arr",
        "_this",
        "zone",
        "_this",
        "zone",
        "arr",
        "arr",
        "arr",
        "processZone",
        "arr",
        "arr",
        "arr",
        "arr",
        "arr",
        "getBasicOffset",
        "arr",
        "_this",
        "zone",
        "arr",
        "rule",
        "arr",
        "_this",
        "rule",
        "_this",
        "rule",
        "arr",
        "parseInt",
        "arr",
        "arr",
        "parseInt",
        "arr",
        "arr",
        "arr",
        "parseTimeString",
        "arr",
        "arr",
        "getBasicOffset",
        "arr",
        "_this",
        "rule",
        "arr",
        "_this",
        "arr",
        "arr",
        "_this",
        "arr",
        "arr",
        "_transport",
        "dt",
        "tz",
        "isUTC",
        "getRegionForTimezone",
        "tz",
        "zoneFile",
        "zoneFile",
        "zoneFile",
        "getZone",
        "dt",
        "tz",
        "z",
        "getRule",
        "dt",
        "z",
        "isUTC",
        "rule",
        "off",
        "getAdjustedOffset",
        "off",
        "rule",
        "getAbbreviation",
        "z",
        "rule",
        "off",
        "abbr"
    ],
    "literals": [
        "'undefined'",
        "'1.0.0'",
        "'Sunday'",
        "'Monday'",
        "'Tuesday'",
        "'Wednesday'",
        "'Thursday'",
        "'Friday'",
        "'Saturday'",
        "'January'",
        "'February'",
        "'March'",
        "'April'",
        "'May'",
        "'June'",
        "'July'",
        "'August'",
        "'September'",
        "'October'",
        "'November'",
        "'December'",
        "'^[a-zA-Z]+/'",
        "\"number\"",
        "\"not a number: \"",
        "'0'",
        "'undefined'",
        "'undefined'",
        "'Please use the Fleegix.js XHR module, jQuery ajax, Zepto ajax, or define your own transport mechanism for downloading zone files.'",
        "'URL must be specified'",
        "'async'",
        "'get'",
        "'text'",
        "'GET'",
        "'[object Array]'",
        "'string'",
        "'Etc/UTC'",
        "'Etc/GMT'",
        "'UTC'",
        "'date'",
        "'year'",
        "'month'",
        "'year'",
        "'hours'",
        "'milliseconds'",
        "'minutes'",
        "'seconds'",
        "'Units must be a number.'",
        "'date'",
        "'year'",
        "'hours'",
        "'milliseconds'",
        "'minutes'",
        "'month'",
        "'seconds'",
        "'Units must be a number.'",
        "'year'",
        "'FullYear'",
        "'set'",
        "'Units must be a number.'",
        "'year'",
        "'FullYear'",
        "'setUTC'",
        "'EEE, dd MMM yyyy HH:mm:ss Z'",
        "'Etc/GMT'",
        "'yyyy-MM-ddTHH:mm:ss.SSS'",
        "'Etc/UTC'",
        "'Z'",
        "'yyyy-MM-dd HH:mm:ss'",
        "'k'",
        "'PM'",
        "'AM'",
        "'Etc'",
        "'etcetera'",
        "'EST'",
        "'northamerica'",
        "'MST'",
        "'northamerica'",
        "'HST'",
        "'northamerica'",
        "'EST5EDT'",
        "'northamerica'",
        "'CST6CDT'",
        "'northamerica'",
        "'MST7MDT'",
        "'northamerica'",
        "'PST8PDT'",
        "'northamerica'",
        "'America'",
        "'northamerica'",
        "'Pacific'",
        "'australasia'",
        "'Atlantic'",
        "'europe'",
        "'Africa'",
        "'africa'",
        "'Indian'",
        "'africa'",
        "'Antarctica'",
        "'antarctica'",
        "'Asia'",
        "'asia'",
        "'Australia'",
        "'australasia'",
        "'Europe'",
        "'europe'",
        "'WET'",
        "'europe'",
        "'CET'",
        "'europe'",
        "'MET'",
        "'europe'",
        "'EET'",
        "'europe'",
        "'Pacific/Honolulu'",
        "'northamerica'",
        "'Atlantic/Bermuda'",
        "'northamerica'",
        "'Atlantic/Cape_Verde'",
        "'africa'",
        "'Atlantic/St_Helena'",
        "'africa'",
        "'Indian/Kerguelen'",
        "'antarctica'",
        "'Indian/Chagos'",
        "'asia'",
        "'Indian/Maldives'",
        "'asia'",
        "'Indian/Christmas'",
        "'australasia'",
        "'Indian/Cocos'",
        "'australasia'",
        "'America/Danmarkshavn'",
        "'europe'",
        "'America/Scoresbysund'",
        "'europe'",
        "'America/Godthab'",
        "'europe'",
        "'America/Thule'",
        "'europe'",
        "'Asia/Yekaterinburg'",
        "'europe'",
        "'Asia/Omsk'",
        "'europe'",
        "'Asia/Novosibirsk'",
        "'europe'",
        "'Asia/Krasnoyarsk'",
        "'europe'",
        "'Asia/Irkutsk'",
        "'europe'",
        "'Asia/Yakutsk'",
        "'europe'",
        "'Asia/Vladivostok'",
        "'europe'",
        "'Asia/Sakhalin'",
        "'europe'",
        "'Asia/Magadan'",
        "'europe'",
        "'Asia/Kamchatka'",
        "'europe'",
        "'Asia/Anadyr'",
        "'europe'",
        "'Africa/Ceuta'",
        "'europe'",
        "'America/Argentina/Buenos_Aires'",
        "'southamerica'",
        "'America/Argentina/Cordoba'",
        "'southamerica'",
        "'America/Argentina/Tucuman'",
        "'southamerica'",
        "'America/Argentina/La_Rioja'",
        "'southamerica'",
        "'America/Argentina/San_Juan'",
        "'southamerica'",
        "'America/Argentina/Jujuy'",
        "'southamerica'",
        "'America/Argentina/Catamarca'",
        "'southamerica'",
        "'America/Argentina/Mendoza'",
        "'southamerica'",
        "'America/Argentina/Rio_Gallegos'",
        "'southamerica'",
        "'America/Argentina/Ushuaia'",
        "'southamerica'",
        "'America/Aruba'",
        "'southamerica'",
        "'America/La_Paz'",
        "'southamerica'",
        "'America/Noronha'",
        "'southamerica'",
        "'America/Belem'",
        "'southamerica'",
        "'America/Fortaleza'",
        "'southamerica'",
        "'America/Recife'",
        "'southamerica'",
        "'America/Araguaina'",
        "'southamerica'",
        "'America/Maceio'",
        "'southamerica'",
        "'America/Bahia'",
        "'southamerica'",
        "'America/Sao_Paulo'",
        "'southamerica'",
        "'America/Campo_Grande'",
        "'southamerica'",
        "'America/Cuiaba'",
        "'southamerica'",
        "'America/Porto_Velho'",
        "'southamerica'",
        "'America/Boa_Vista'",
        "'southamerica'",
        "'America/Manaus'",
        "'southamerica'",
        "'America/Eirunepe'",
        "'southamerica'",
        "'America/Rio_Branco'",
        "'southamerica'",
        "'America/Santiago'",
        "'southamerica'",
        "'Pacific/Easter'",
        "'southamerica'",
        "'America/Bogota'",
        "'southamerica'",
        "'America/Curacao'",
        "'southamerica'",
        "'America/Guayaquil'",
        "'southamerica'",
        "'Pacific/Galapagos'",
        "'southamerica'",
        "'Atlantic/Stanley'",
        "'southamerica'",
        "'America/Cayenne'",
        "'southamerica'",
        "'America/Guyana'",
        "'southamerica'",
        "'America/Asuncion'",
        "'southamerica'",
        "'America/Lima'",
        "'southamerica'",
        "'Atlantic/South_Georgia'",
        "'southamerica'",
        "'America/Paramaribo'",
        "'southamerica'",
        "'America/Port_of_Spain'",
        "'southamerica'",
        "'America/Montevideo'",
        "'southamerica'",
        "'America/Caracas'",
        "'southamerica'",
        "'Timezone \"'",
        "'\" is either incorrect, or not loaded in the timezone registry.'",
        "'/'",
        "'function'",
        "'Error retrieving \"'",
        "'\" zoneinfo files'",
        "'/'",
        "'string'",
        "'backward'",
        "'00:00:00'",
        "'number'",
        "\"string\"",
        "'backward'",
        "'No Zone found for \"'",
        "'\" on '",
        "'-'",
        "'number'",
        "'u'",
        "'g'",
        "'z'",
        "'s'",
        "'w'",
        "\"unknown type \"",
        "\"last\"",
        "\"<=\"",
        "\">=\"",
        "\"only\"",
        "\"max\"",
        "'u'",
        "'w'",
        "'u'",
        "'w'",
        "'%s'",
        "'-'",
        "''",
        "'S'",
        "'%s'",
        "'/'",
        "\"/\"",
        "'africa'",
        "'antarctica'",
        "'asia'",
        "'australasia'",
        "'backward'",
        "'etcetera'",
        "'europe'",
        "'northamerica'",
        "'pacificnew'",
        "'southamerica'",
        "'preloadAll'",
        "'lazyLoad'",
        "'manualLoad'",
        "'northamerica'",
        "'string'",
        "'function'",
        "'undefined'",
        "'Please define a base path to your zone file directory -- timezoneJS.timezone.zoneFileBasePath.'",
        "'('",
        "')'",
        "'\\n'",
        "''",
        "\"Zone \"",
        "\"#\"",
        "'Zone'",
        "'Rule'",
        "'Link'",
        "'Error with Link '",
        "'. Cannot create link of a preexisted zone.'",
        "'Not a valid timezone ID.'"
    ],
    "variables": [
        "root",
        "timezoneJS",
        "$",
        "fleegix",
        "DAYS",
        "MONTHS",
        "SHORT_MONTHS",
        "SHORT_DAYS",
        "EXACT_DATE_TIME",
        "TZ_REGEXP",
        "i",
        "i",
        "_fixWidth",
        "s",
        "_transport",
        "args",
        "dt",
        "tz",
        "arr",
        "i",
        "res",
        "dt",
        "dt",
        "tzOffset",
        "dt",
        "meth",
        "meth",
        "dt",
        "previousOffset",
        "result",
        "format",
        "tzInfo",
        "_this",
        "hours",
        "_month",
        "_len",
        "a",
        "b",
        "jDt",
        "_this",
        "regionMap",
        "regionExceptions",
        "url",
        "exc",
        "reg",
        "ret",
        "link",
        "pat",
        "hms",
        "yea",
        "mon",
        "dat",
        "t",
        "utcMillis",
        "t",
        "tz",
        "zoneList",
        "i",
        "z",
        "off",
        "adj",
        "date",
        "ruleset",
        "basicOffset",
        "convertDateToUTC",
        "offset",
        "convertRuleToExactDateAndTime",
        "year",
        "rule",
        "hms",
        "effectiveDate",
        "targetDay",
        "ourDay",
        "findApplicableRules",
        "applicableRules",
        "i",
        "compareDates",
        "year",
        "rule",
        "year",
        "applicableRules",
        "pinpoint",
        "res",
        "repl",
        "opts",
        "done",
        "callbackFn",
        "i",
        "processData",
        "arr",
        "lines",
        "arr",
        "chunk",
        "l",
        "zone",
        "rule",
        "i",
        "zoneFile",
        "z",
        "off",
        "rule",
        "abbr"
    ],
    "comments": [
        "-----",
        "The `timezoneJS.Date` object gives you full-blown timezone support, independent from the timezone set on the end-user's machine running the browser. It uses the Olson zoneinfo files for its timezone data.",
        "",
        "The constructor function and setter methods use proxy JavaScript Date objects behind the scenes, so you can use strings like '10/22/2006' with the constructor. You also get the same sensible wraparound behavior with numeric parameters (like setting a value of 14 for the month wraps around to the next March).",
        "",
        "The other significant difference from the built-in JavaScript Date is that `timezoneJS.Date` also has named properties that store the values of year, month, date, etc., so it can be directly serialized to JSON and used for data transfer.",
        "Standard initialization stuff to make sure the library is",
        "usable on both client and server (node) side.",
        "Grab the ajax library from global context.",
        "This can be jQuery, Zepto or fleegix.",
        "You can also specify your own transport mechanism by declaring",
        "`timezoneJS.timezone.transport` to a `function`. More details will follow",
        "Declare constant list of days and months. Unfortunately this doesn't leave room for i18n due to the Olson data being in English itself",
        "`{ \"Jan\": 0, \"Feb\": 1, \"Mar\": 2, \"Apr\": 3, \"May\": 4, \"Jun\": 5, \"Jul\": 6, \"Aug\": 7, \"Sep\": 8, \"Oct\": 9, \"Nov\": 10, \"Dec\": 11 }`",
        "`{ \"Sun\": 0, \"Mon\": 1, \"Tue\": 2, \"Wed\": 3, \"Thu\": 4, \"Fri\": 5, \"Sat\": 6 }`",
        "Handle array indexOf in IE",
        "Format a number to the length = digits. For ex:",
        "",
        "`_fixWidth(2, 2) = '02'`",
        "",
        "`_fixWidth(1998, 2) = '98'`",
        "",
        "This is used to pad numbers in converting date to string in ISO standard.",
        "Abstraction layer for different transport layers, including fleegix/jQuery/Zepto",
        "",
        "Object `opts` include",
        "",
        "- `url`: url to ajax query",
        "",
        "- `async`: true for asynchronous, false otherwise. If false, return value will be response from URL. This is true by default",
        "",
        "- `success`: success callback function",
        "",
        "- `error`: error callback function",
        "Returns response from URL if async is false, otherwise the AJAX request object itself",
        "Constructor, which is similar to that of the native Date object itself",
        "We support several different constructors, including all the ones from `Date` object",
        "with a timezone string at the end.",
        "",
        "- `[tz]`: Returns object with time in `tz` specified.",
        "",
        "- `utcMillis`, `[tz]`: Return object with UTC time = `utcMillis`, in `tz`.",
        "",
        "- `Date`, `[tz]`: Returns object with UTC time = `Date.getTime()`, in `tz`.",
        "",
        "- `year, month, [date,] [hours,] [minutes,] [seconds,] [millis,] [tz]: Same as `Date` object",
        "with tz.",
        "",
        "- `Array`: Can be any combo of the above.",
        "",
        "If 1st argument is an array, we can use it as a list of arguments itself",
        "Tricky part:",
        "For the cases where there are 1/2 arguments: `timezoneJS.Date(millis, [tz])` and `timezoneJS.Date(Date, [tz])`. The",
        "Date `dt` created should be in UTC. Thus the way I detect such cases is to determine if `arr` is not populated & `tz`",
        "is specified. Because if `tz` is not specified, `dt` can be in local time.",
        "Implements most of the native Date object",
        "Time adjusted to user-specified timezone",
        "If timezone is specified, get the correct timezone info based on the Date given",
        "If no timezone was specified, use the local browser offset",
        "Set UTC minutes offsets by the delta of the two timezones",
        "Allows different format following ISO8601 format:",
        "Default format is the same as toISOString",
        "If timezone is specified, get a clone of the current Date object and modify it",
        "fix the same characters in Month names",
        "`y`: year",
        "`d`: date",
        "`m`: minute",
        "`s`: second",
        "`S`: millisecond",
        "`M`: month. Note: `MM` will be the numeric representation (e.g February is 02) but `MMM` will be text representation (e.g February is Feb)",
        "`k`: AM/PM",
        "`H`: hour",
        "`E`: day",
        "`Z`: timezone abbreviation",
        "Adjust for zero-based JS-style array",
        "If there's nothing listed in the main regions for this TZ, check the 'backward' links",
        "Backward-compat file hasn't loaded yet, try looking in there",
        "This is for obvious legacy zones (e.g., Iceland) that don't even have a prefix like \"America/\" that look like normal zones",
        "Follow links to get to an actual zone",
        "Backward-compat file hasn't loaded yet, try looking in there",
        "This is for backward entries like \"America/Fort_Wayne\" that",
        "getRegionForTimezone *thinks* it has a region file and zone",
        "for (e.g., America => 'northamerica'), but in reality it's a",
        "legacy zone we need the backward file for.",
        "Do backwards lookup since most use cases deal with newer dates.",
        "if isUTC is true, date is given in UTC, otherwise it's given",
        "in local time (ie. date.getUTC*() returns local time components)",
        "Convert a date to UTC. Depending on the 'type' parameter, the date",
        "parameter may be:",
        "",
        "- `u`, `g`, `z`: already UTC (no adjustment).",
        "",
        "- `s`: standard time (adjust for time zone offset but not for DST)",
        "",
        "- `w`: wall clock time (adjust for both time zone and DST offset).",
        "",
        "DST adjustment is done using the rule given as third argument.",
        "UTC",
        "Standard Time",
        "Wall Clock Time",
        "to millis",
        "Step 1:  Find applicable rules for this year.",
        "",
        "Step 2:  Sort the rules by effective date.",
        "",
        "Step 3:  Check requested date to see if a rule has yet taken effect this year.  If not,",
        "",
        "Step 4:  Get the rules for the previous year.  If there isn't an applicable rule for last year, then",
        "there probably is no current time offset since they seem to explicitly turn off the offset",
        "when someone stops observing DST.",
        "",
        "FIXME if this is not the case and we'll walk all the way back (ugh).",
        "",
        "Step 5:  Sort the rules by effective date.",
        "Step 6:  Apply the most recent rule before the current time.",
        "Assume that the rule applies to the year of the given date.",
        "Result for given parameters is already stored",
        "If we have a specific date, use that!",
        "Let's hunt for the date.",
        "Example: `lastThu`",
        "Start at the last day of the month and work backward.",
        "Example: `Sun>=15`",
        "Start at the specified date.",
        "Go forwards.",
        "Go backwards.  Looking for the last of a certain day, or operator is \"<=\" (less likely).",
        "If previous rule is given, correct for the fact that the starting time of the current",
        "rule may be specified in local time.",
        "Exclude future rules.",
        "Date is in a set range.",
        "Date is in an \"only\" year.",
        "We're in a range from the start year to infinity.",
        "It's completely okay to have any number of matches here.",
        "Normally we should only see two, but that doesn't preclude other numbers of matches.",
        "These matches are applicable to this year.",
        "While sorting, the time zone in which the rule starting time is specified",
        "is ignored. This is ok as long as the timespan between two DST changes is",
        "larger than the DST offset, which is probably always true.",
        "As the given date may indeed be close to a DST change, it may get sorted",
        "to a wrong position (off by one), which is corrected below.",
        "If there are not enough past DST rules...",
        "The previous rule does not really apply, take the one before that.",
        "The next rule does already apply, take that one.",
        "No applicable rule found in this and in previous year.",
        "FIXME: Right now just falling back to Standard --",
        "apparently ought to use the last valid rule,",
        "although in practice that always ought to be Standard",
        "Chose one of two alternative strings.",
        "Override default with any passed-in opts",
        "Wraps callback function in another one that makes",
        "sure all files have been loaded.",
        "Get the zone files via XHR -- if the sync flag",
        "is set to true, it's being called by the lazy-loading",
        "mechanism, so the result needs to be returned inline.",
        "Ignore already loaded zones.",
        "Ignore Leap.",
        "Process zone right here and replace 3rd element with the processed array.",
        "Parse int FROM year and TO year",
        "Parse time string AT",
        "Parse offset SAVE",
        "No zones for these should already exist.",
        "Create the link.",
        "Expose transport mechanism and allow overwrite.",
        "Lazy-load any zones not yet loaded.",
        "Get the correct region for the zone.",
        "Get the file and parse it -- use synchronous XHR.",
        "See if the offset needs adjustment."
    ],
    "docstrings": [
        "* Copyright 2010 Matthew Eernisse (mde@fleegix.org)\n * and Open Source Applications Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Credits: Ideas included from incomplete JS implementation of Olson\n * parser, \"XMLDAte\" by Philippe Goetz (philippe.goetz@wanadoo.fr)\n *\n * Contributions:\n * Jan Niehusmann\n * Ricky Romero\n * Preston Hunt (prestonhunt@gmail.com)\n * Dov. B Katz (dov.katz@morganstanley.com)\n * Peter Bergström (pbergstr@mac.com)\n * Long Ho"
    ],
    "functions": [
        "invalidTZError",
        "builtInLoadZoneFile",
        "getRegionForTimezone",
        "parseTimeString",
        "processZone",
        "getZone",
        "getBasicOffset",
        "getRule",
        "getAdjustedOffset",
        "getAbbreviation"
    ],
    "classes": []
}