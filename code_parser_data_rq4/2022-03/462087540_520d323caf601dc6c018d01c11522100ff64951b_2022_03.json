{
    "identifiers": [
        "net",
        "hydromatic",
        "morel",
        "net",
        "hydromatic",
        "morel",
        "ast",
        "Op",
        "com",
        "google",
        "common",
        "Preconditions",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableList",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableSortedMap",
        "java",
        "util",
        "java",
        "util",
        "Objects",
        "java",
        "util",
        "SortedMap",
        "java",
        "util",
        "Objects",
        "requireNonNull",
        "name",
        "name",
        "ordinal",
        "ordinal",
        "argTypes",
        "apply",
        "ImmutableList",
        "copyOf",
        "argTypes",
        "argTypes",
        "ImmutableList",
        "copyOf",
        "argTypes",
        "argNameTypes",
        "ImmutableSortedMap",
        "copyOfSorted",
        "argNameTypes",
        "argTypes",
        "TupleType",
        "toArgNameTypes",
        "argTypes",
        "paramType",
        "resultType",
        "Op",
        "FN",
        "ImmutableList",
        "of",
        "paramType",
        "resultType",
        "elementType",
        "Op",
        "LIST",
        "ImmutableList",
        "of",
        "elementType",
        "parameterTypes",
        "ImmutableList",
        "copyOf",
        "parameterTypes",
        "name",
        "name",
        "forallType",
        "argTypes",
        "forallType",
        "ImmutableList",
        "copyOf",
        "argTypes",
        "name",
        "parameterTypes",
        "tyCons",
        "scheme",
        "name",
        "ImmutableList",
        "copyOf",
        "parameterTypes",
        "ImmutableSortedMap",
        "copyOf",
        "tyCons",
        "scheme",
        "name",
        "name",
        "name",
        "requireNonNull",
        "name",
        "Override",
        "buf",
        "left",
        "right",
        "buf",
        "append",
        "name",
        "Override",
        "name",
        "hashCode",
        "Override",
        "obj",
        "obj",
        "obj",
        "obj",
        "name",
        "equals",
        "name",
        "typeSystem",
        "ordinal",
        "ordinal",
        "ordinal",
        "ordinal",
        "Override",
        "buf",
        "left",
        "right",
        "buf",
        "append",
        "TypeVar",
        "name",
        "ordinal",
        "Override",
        "ordinal",
        "Override",
        "obj",
        "obj",
        "obj",
        "obj",
        "ordinal",
        "ordinal",
        "typeSystem",
        "ordinal",
        "argTypes",
        "argTypes",
        "requireNonNull",
        "argTypes",
        "requireNonNull",
        "argTypes",
        "Override",
        "buf",
        "left",
        "right",
        "argTypes",
        "isEmpty",
        "TypeSystem",
        "unparseList",
        "buf",
        "Op",
        "COMMA",
        "left",
        "Op",
        "APPLY",
        "left",
        "argTypes",
        "buf",
        "append",
        "Op",
        "APPLY",
        "padded",
        "buf",
        "append",
        "name",
        "Override",
        "Objects",
        "hash",
        "argTypes",
        "Override",
        "obj",
        "obj",
        "obj",
        "obj",
        "equals",
        "obj",
        "argTypes",
        "equals",
        "argTypes",
        "typeSystem",
        "argTypes",
        "op",
        "argTypes",
        "op",
        "argTypes",
        "op",
        "requireNonNull",
        "op",
        "argTypes",
        "requireNonNull",
        "argTypes",
        "Override",
        "buf",
        "left",
        "right",
        "op",
        "LIST",
        "TypeSystem",
        "unparse",
        "buf",
        "argTypes",
        "get",
        "Op",
        "LIST",
        "right",
        "append",
        "TypeSystem",
        "unparseList",
        "buf",
        "op",
        "left",
        "right",
        "argTypes",
        "Override",
        "Objects",
        "hash",
        "op",
        "argTypes",
        "Override",
        "obj",
        "obj",
        "obj",
        "obj",
        "op",
        "equals",
        "op",
        "obj",
        "argTypes",
        "equals",
        "argTypes",
        "typeSystem",
        "op",
        "FN",
        "argTypes",
        "size",
        "argTypes",
        "get",
        "argTypes",
        "get",
        "LIST",
        "argTypes",
        "size",
        "argTypes",
        "get",
        "op",
        "parameterTypes",
        "parameterTypes",
        "requireNonNull",
        "parameterTypes",
        "requireNonNull",
        "parameterTypes",
        "Override",
        "Objects",
        "hash",
        "parameterTypes",
        "Override",
        "obj",
        "obj",
        "obj",
        "obj",
        "equals",
        "obj",
        "parameterTypes",
        "equals",
        "parameterTypes",
        "Override",
        "buf",
        "left",
        "right",
        "buf",
        "append",
        "parameterTypes",
        "buf",
        "append",
        "append",
        "moniker",
        "buf",
        "append",
        "TypeSystem",
        "unparse",
        "buf",
        "typeSystem",
        "parameterTypes",
        "argNameTypes",
        "argNameTypes",
        "argNameTypes",
        "requireNonNull",
        "argNameTypes",
        "Preconditions",
        "checkArgument",
        "argNameTypes",
        "comparator",
        "RecordType",
        "ORDERING",
        "Override",
        "buf",
        "left",
        "right",
        "argNameTypes",
        "size",
        "buf",
        "append",
        "TypeSystem",
        "areContiguousIntegers",
        "argNameTypes",
        "keySet",
        "TypeSystem",
        "unparseList",
        "buf",
        "Op",
        "TIMES",
        "argNameTypes",
        "values",
        "buf",
        "append",
        "argNameTypes",
        "forEach",
        "name",
        "buf",
        "length",
        "buf",
        "append",
        "buf",
        "append",
        "name",
        "append",
        "append",
        "moniker",
        "buf",
        "append",
        "Override",
        "argNameTypes",
        "hashCode",
        "Override",
        "obj",
        "obj",
        "obj",
        "obj",
        "argNameTypes",
        "equals",
        "argNameTypes",
        "typeSystem",
        "argNameTypes",
        "size",
        "PrimitiveType",
        "UNIT",
        "TypeSystem",
        "areContiguousIntegers",
        "argNameTypes",
        "keySet",
        "ImmutableList",
        "copyOf",
        "argNameTypes",
        "values",
        "argNameTypes",
        "name",
        "name",
        "name",
        "name",
        "Override",
        "name",
        "hashCode",
        "Override",
        "obj",
        "obj",
        "obj",
        "obj",
        "name",
        "equals",
        "name",
        "Override",
        "buf",
        "left",
        "right",
        "buf",
        "append",
        "name",
        "typeSystem",
        "forallType",
        "argTypes",
        "forallType",
        "argTypes",
        "forallType",
        "forallType",
        "argTypes",
        "argTypes",
        "argTypes",
        "isEmpty",
        "Override",
        "Objects",
        "hash",
        "forallType",
        "argTypes",
        "Override",
        "obj",
        "obj",
        "obj",
        "obj",
        "forallType",
        "equals",
        "forallType",
        "obj",
        "argTypes",
        "equals",
        "argTypes",
        "Override",
        "buf",
        "left",
        "right",
        "TypeSystem",
        "unparseList",
        "buf",
        "Op",
        "COMMA",
        "left",
        "Op",
        "APPLY",
        "left",
        "argTypes",
        "append",
        "Op",
        "APPLY",
        "padded",
        "append",
        "forallType",
        "typeSystem",
        "transaction",
        "typeSystem",
        "transaction",
        "forallType",
        "substitute",
        "typeSystem",
        "argTypes",
        "transaction",
        "name",
        "types",
        "tyCons",
        "scheme",
        "name",
        "types",
        "tyCons",
        "scheme",
        "name",
        "requireNonNull",
        "name",
        "types",
        "requireNonNull",
        "types",
        "tyCons",
        "requireNonNull",
        "tyCons",
        "scheme",
        "scheme",
        "buf",
        "initialSize",
        "buf",
        "length",
        "tyCons",
        "forEach",
        "tyConName",
        "tyConType",
        "buf",
        "length",
        "initialSize",
        "buf",
        "append",
        "buf",
        "append",
        "tyConName",
        "tyConType",
        "DummyType",
        "INSTANCE",
        "buf",
        "append",
        "buf",
        "append",
        "tyConType",
        "moniker",
        "buf",
        "typeSystem",
        "typeSystem",
        "dataType",
        "name",
        "datatype",
        "name",
        "types",
        "tyCons"
    ],
    "literals": [
        "\" list\"",
        "\"forall\"",
        "\". \"",
        "\"()\"",
        "\", \"",
        "\" | \"",
        "\" of \""
    ],
    "variables": [
        "argTypes",
        "name",
        "ordinal",
        "type",
        "argTypes",
        "op",
        "argTypes",
        "type",
        "parameterTypes",
        "argNameTypes",
        "name",
        "forallType",
        "argTypes",
        "name",
        "types",
        "tyCons",
        "scheme"
    ],
    "comments": [
        "fall through",
        "fall through",
        "otherwise could have used DataType",
        "End Keys.java"
    ],
    "docstrings": [
        "* Licensed to Julian Hyde under one or more contributor license\n * agreements.  See the NOTICE file distributed with this work\n * for additional information regarding copyright ownership.\n * Julian Hyde licenses this file to you under the Apache\n * License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License.  You may obtain a\n * copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied.  See the License for the specific\n * language governing permissions and limitations under the\n * License.",
        "Type keys.",
        "Returns a key that identifies types by name.",
        "Returns a key that identifies types (especially\n   * {@link TypeVar type variables}) by ordinal.",
        "Returns a key that identifies an {@link ApplyType}, with an array of\n   * types.",
        "Returns a key that identifies an {@link ApplyType}.",
        "Returns a key that identifies a {@link RecordType}\n   * (or a {@link TupleType} if the field names are ascending integers,\n   * or {@link PrimitiveType#UNIT unit} if the fields are empty).",
        "Returns a key that identifies a {@link TupleType}.",
        "Returns a key that identifies a {@link FnType}.",
        "Returns a key that identifies a {@link ListType}.",
        "Returns a key that identifies a {@link ForallType}.",
        "Returns a key that identifies a {@link DataType}.",
        "Returns a key that identifies a {@link ForallType} with monomorphic types\n   * substituted for its type parameters.",
        "Returns a definition of a {@link DataType}.",
        "Key that identifies a type by name.",
        "Key that identifies a type by ordinal.",
        "Key of a type that applies a parameterized type to specific type\n   * arguments.",
        "Key of a type that applies a built-in type constructor to specific type\n   * arguments.",
        "Key of a forall type.",
        "Key of a record type.",
        "Key that identifies a {@code datatype} scheme.\n   *\n   * <p>See also {@link DataTypeDef}, which has enough information to actually\n   * create it.",
        "Key that applies several type arguments to a {@code datatype} scheme.\n   *\n   * <p>For example, given {@code forallType} = \"option\" and\n   * {@code argTypes} = \"[int]\", returns \"int option\".",
        "Information from which a data type can be created."
    ],
    "functions": [
        "Keys",
        "name",
        "ordinal",
        "apply",
        "apply",
        "record",
        "fn",
        "forall",
        "datatype",
        "forallTypeApply",
        "DataTypeDef",
        "dataTypeDef",
        "NameKey",
        "StringBuilder",
        "describe",
        "hashCode",
        "equals",
        "Type",
        "toType",
        "OrdinalKey",
        "StringBuilder",
        "describe",
        "hashCode",
        "equals",
        "Type",
        "toType",
        "ApplyKey",
        "StringBuilder",
        "describe",
        "hashCode",
        "equals",
        "Type",
        "toType",
        "OpKey",
        "StringBuilder",
        "describe",
        "hashCode",
        "equals",
        "Type",
        "toType",
        "ForallKey",
        "hashCode",
        "equals",
        "StringBuilder",
        "describe",
        "Type",
        "toType",
        "RecordKey",
        "StringBuilder",
        "describe",
        "hashCode",
        "equals",
        "Type",
        "toType",
        "DataTypeKey",
        "hashCode",
        "equals",
        "StringBuilder",
        "describe",
        "Type",
        "toType",
        "ForallTypeApplyKey",
        "hashCode",
        "equals",
        "StringBuilder",
        "describe",
        "Type",
        "toType",
        "DataTypeDef",
        "StringBuilder",
        "describe",
        "DataType",
        "toType"
    ],
    "classes": [
        "Keys",
        "NameKey",
        "OrdinalKey",
        "ApplyKey",
        "OpKey",
        "ForallKey",
        "RecordKey",
        "DataTypeKey",
        "ForallTypeApplyKey",
        "DataTypeDef"
    ]
}