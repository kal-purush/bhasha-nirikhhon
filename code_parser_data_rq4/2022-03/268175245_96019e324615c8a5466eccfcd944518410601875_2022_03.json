{
    "identifiers": [
        "heapq",
        "abc",
        "ABC",
        "abstractmethod",
        "typing",
        "Tuple",
        "Hashable",
        "TypeVar",
        "Generic",
        "TypeVar",
        "TypeVar",
        "bound",
        "Hashable",
        "ABC",
        "Generic",
        "K",
        "V",
        "abstractmethod",
        "key",
        "K",
        "item",
        "V",
        "abstractmethod",
        "Tuple",
        "K",
        "V",
        "abstractmethod",
        "item",
        "V",
        "abstractmethod",
        "item",
        "V",
        "item",
        "other",
        "V",
        "Heap",
        "key",
        "K",
        "item",
        "V",
        "item",
        "entry_finder",
        "item",
        "HeapEntry",
        "item",
        "entry_finder",
        "entry",
        "heapq",
        "heappush",
        "h",
        "key",
        "entry",
        "Tuple",
        "K",
        "V",
        "heapq",
        "heappop",
        "h",
        "entry",
        "item",
        "REMOVED",
        "extract_min",
        "entry_finder",
        "entry",
        "item",
        "key",
        "entry",
        "item",
        "item",
        "V",
        "entry_finder",
        "item",
        "REMOVED",
        "key",
        "entry",
        "h",
        "entry",
        "item",
        "REMOVED",
        "Heap",
        "key",
        "K",
        "item",
        "V",
        "Tuple",
        "K",
        "V",
        "item",
        "V"
    ],
    "literals": [
        "\"<removed-task>\"",
        "\"K\"",
        "\"V\""
    ],
    "variables": [
        "REMOVED",
        "K",
        "V",
        "item",
        "h",
        "entry_finder",
        "entry",
        "item",
        "key",
        "entry",
        "entry",
        "entry",
        "item"
    ],
    "comments": [
        "placeholder for a removed task"
    ],
    "docstrings": [
        "\"\"\"\n    Simple heap interface. It doesn't allow duplicate items.\n\n    At this interface level V shouldn't need to be Hashable. However, both implementations require it\n    and I'm being lazy. To support item deletion, both implementations use items as dict keys. Thus\n    unhashable types like lists and dicts can't be used. See: https://docs.python.org/3/glossary.html#term-hashable\n    \"\"\"",
        "\"\"\"\n        Add a new item or update the key of an existing item\n        \"\"\"",
        "\"\"\"\n        Remove the item with the smallest key. If there are multiple items with the smallest key, no\n        guarantee is given about which item will be removed.\n\n        :raises: IndexError if heap is empty\n        :return: key, item\n        \"\"\"",
        "\"\"\"\n        Remove an item\n\n        :raises: KeyError if item not in heap\n        \"\"\"",
        "\"\"\"\n        Entries need to be comparable when using heapq for the heap algorithm. If there are duplicate keys,\n        it compares the entries in order to determine sort order.\n        \"\"\"",
        "\"\"\"\n    Heap implementation based on the heapq algorithm provided by the standard lib\n    https://docs.python.org/3/library/heapq.html\n    \"\"\"",
        "\"\"\"\n        :raises TypeError if item unhashable\n        \"\"\""
    ],
    "functions": [
        "insert",
        "extract_min",
        "is_empty",
        "__lt__",
        "insert",
        "extract_min",
        "is_empty",
        "insert",
        "extract_min",
        "is_empty"
    ],
    "classes": [
        "Heap",
        "HeapEntry",
        "StandardLibHeap",
        "MyHeap"
    ]
}