{
    "identifiers": [
        "logging",
        "os",
        "abc",
        "ABCMeta",
        "abstractmethod",
        "typing",
        "Optional",
        "Union",
        "utils",
        "LoggerType",
        "is_comet_ml_available",
        "is_tensorboard_available",
        "is_wandb_available",
        "is_tensorboard_available",
        "torch",
        "utils",
        "tensorboard",
        "_available_trackers",
        "append",
        "LoggerType",
        "TENSORBOARD",
        "is_wandb_available",
        "wandb",
        "_available_trackers",
        "append",
        "LoggerType",
        "WANDB",
        "is_comet_ml_available",
        "comet_ml",
        "Experiment",
        "_available_trackers",
        "append",
        "LoggerType",
        "COMETML",
        "logging",
        "getLogger",
        "_available_trackers",
        "metaclass",
        "ABCMeta",
        "abstractmethod",
        "values",
        "abstractmethod",
        "values",
        "step",
        "Optional",
        "GeneralTracker",
        "run_name",
        "logging_dir",
        "Optional",
        "Union",
        "os",
        "PathLike",
        "run_name",
        "os",
        "path",
        "join",
        "logging_dir",
        "run_name",
        "tensorboard",
        "SummaryWriter",
        "logging_dir",
        "logger",
        "info",
        "run_name",
        "logging_dir",
        "logger",
        "info",
        "values",
        "writer",
        "add_hparams",
        "values",
        "metric_dict",
        "writer",
        "flush",
        "logger",
        "info",
        "values",
        "step",
        "Optional",
        "k",
        "v",
        "values",
        "items",
        "isinstance",
        "v",
        "writer",
        "add_scalar",
        "k",
        "v",
        "global_step",
        "step",
        "isinstance",
        "v",
        "writer",
        "add_text",
        "k",
        "v",
        "global_step",
        "step",
        "writer",
        "flush",
        "logger",
        "info",
        "writer",
        "close",
        "logger",
        "info",
        "GeneralTracker",
        "run_name",
        "run_name",
        "wandb",
        "init",
        "run_name",
        "logger",
        "info",
        "run_name",
        "logger",
        "info",
        "values",
        "wandb",
        "config",
        "update",
        "values",
        "logger",
        "info",
        "values",
        "step",
        "Optional",
        "run",
        "log",
        "values",
        "step",
        "step",
        "logger",
        "info",
        "run",
        "finish",
        "logger",
        "info",
        "GeneralTracker",
        "run_name",
        "run_name",
        "Experiment",
        "project_name",
        "run_name",
        "logger",
        "info",
        "run_name",
        "logger",
        "info",
        "values",
        "writer",
        "log_parameters",
        "values",
        "logger",
        "info",
        "values",
        "step",
        "Optional",
        "step",
        "writer",
        "set_step",
        "step",
        "writer",
        "log_others",
        "values",
        "logger",
        "info"
    ],
    "literals": [
        "\"Returns a list of all supported available trackers in the system\"",
        "\"\"",
        "f\"Initialized TensorBoard project {self.run_name} logging to {self.logging_dir}\"",
        "\"Make sure to log any initial configurations with `self.store_init_configuration` before training!\"",
        "\"Stored initial configuration hyperparameters to TensorBoard\"",
        "\"Successfully logged to TensorBoard\"",
        "\"TensorBoard writer closed\"",
        "f\"Initialized WandB project {self.run_name}\"",
        "\"Make sure to log any initial configurations with `self.store_init_configuration` before training!\"",
        "\"Stored initial configuration hyperparameters to WandB\"",
        "\"Successfully logged to WandB\"",
        "\"WandB run closed\"",
        "f\"Initialized CometML project {self.run_name}\"",
        "\"Make sure to log any initial configurations with `self.store_init_configuration` before training!\"",
        "\"Stored initial configuration hyperparameters to CometML\"",
        "\"Successfully logged to CometML\""
    ],
    "variables": [
        "_available_trackers",
        "logger",
        "run_name",
        "logging_dir",
        "writer",
        "run_name",
        "run",
        "run_name",
        "writer"
    ],
    "comments": [
        "Copyright 2022 The HuggingFace Team. All rights reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Expectation:",
        "Provide a project dir name, then each type of logger gets stored in project/{`logging_dir`}"
    ],
    "docstrings": [
        "\"\"\"\n    A base Tracker class to be used for all logging integration implementations.\n    \"\"\"",
        "\"\"\"\n        Logs `values` as hyperparameters for the run. Implementations should use the experiment configuration\n        functionality of a tracking API.\n\n        Args:\n            values (Dictionary `str` to `bool`, `str`, `float` or `int`):\n                Values to be stored as initial hyperparameters as key-value pairs. The values need to have type `bool`,\n                `str`, `float`, `int`, or `None`.\n        \"\"\"",
        "\"\"\"\n        Logs `values` to the current run. Base `log` implementations of a tracking API should go in here, along with\n        special behavior for the `step parameter.\n\n        Args:\n            values (Dictionary `str` to `str`, `float`, or `int`):\n                Values to be logged as key-value pairs. The values need to have type `str`, `float`, or `int`.\n            step (`int`, *optional*):\n                The run step. If included, the log will be affiliated with this step.\n        \"\"\"",
        "\"\"\"\n        Should run any finalizing functions within the tracking API. If the API should not have one, just don't\n        overwrite that method.\n        \"\"\"",
        "\"\"\"\n    A `Tracker` class that supports `tensorboard`. Should be initialized at the start of your script.\n\n    Args:\n        run_name (`str`):\n            The name of the experiment run\n        logging_dir (`str`, `os.PathLike`):\n            Location for TensorBoard logs to be stored.\n    \"\"\"",
        "\"\"\"\n        Logs `values` as hyperparameters for the run. Should be run at the beginning of your experiment.\n\n        Args:\n            values (Dictionary `str` to `bool`, `str`, `float` or `int`):\n                Values to be stored as initial hyperparameters as key-value pairs. The values need to have type `bool`,\n                `str`, `float`, `int`, or `None`.\n        \"\"\"",
        "\"\"\"\n        Logs `values` to the current run.\n\n        Args:\n            values (Dictionary `str` to `str`, `float`, or `int`):\n                Values to be logged as key-value pairs. The values need to have type `str`, `float`, or `int`.\n            step (`int`, *optional*):\n                The run step. If included, the log will be affiliated with this step.\n        \"\"\"",
        "\"\"\"\n        Closes `TensorBoard` writer\n        \"\"\"",
        "\"\"\"\n    A `Tracker` class that supports `wandb`. Should be initialized at the start of your script.\n\n    Args:\n        run_name (`str`):\n            The name of the experiment run.\n    \"\"\"",
        "\"\"\"\n        Logs `values` as hyperparameters for the run. Should be run at the beginning of your experiment.\n\n        Args:\n            values (Dictionary `str` to `bool`, `str`, `float` or `int`):\n                Values to be stored as initial hyperparameters as key-value pairs. The values need to have type `bool`,\n                `str`, `float`, `int`, or `None`.\n        \"\"\"",
        "\"\"\"\n        Logs `values` to the current run.\n\n        Args:\n            values (Dictionary `str` to `str`, `float`, or `int`):\n                Values to be logged as key-value pairs. The values need to have type `str`, `float`, or `int`.\n            step (`int`, *optional*):\n                The run step. If included, the log will be affiliated with this step.\n        \"\"\"",
        "\"\"\"\n        Closes `wandb` writer\n        \"\"\"",
        "\"\"\"\n    A `Tracker` class that supports `comet_ml`. Should be initialized at the start of your script.\n\n    API keys must be stored in a Comet config file.\n\n    Args:\n        run_name (`str`):\n            The name of the experiment run.\n    \"\"\"",
        "\"\"\"\n        Logs `values` as hyperparameters for the run. Should be run at the beginning of your experiment.\n\n        Args:\n            values (Dictionary `str` to `bool`, `str`, `float` or `int`):\n                Values to be stored as initial hyperparameters as key-value pairs. The values need to have type `bool`,\n                `str`, `float`, `int`, or `None`.\n        \"\"\"",
        "\"\"\"\n        Logs `values` to the current run.\n\n        Args:\n            values (Dictionary `str` to `str`, `float`, or `int`):\n                Values to be logged as key-value pairs. The values need to have type `str`, `float`, or `int`.\n            step (`int`, *optional*):\n                The run step. If included, the log will be affiliated with this step.\n        \"\"\""
    ],
    "functions": [
        "get_available_trackers",
        "store_init_configuration",
        "log",
        "finish",
        "store_init_configuration",
        "log",
        "finish",
        "store_init_configuration",
        "log",
        "finish",
        "store_init_configuration",
        "log"
    ],
    "classes": [
        "GeneralTracker",
        "TensorBoardTracker",
        "WandBTracker",
        "CometMLTracker"
    ]
}