{
    "identifiers": [
        "sys",
        "argparse",
        "datetime",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "np",
        "arange",
        "chroms",
        "extend",
        "make_GC_content_reference_table",
        "GC_content_reference_table_filepath",
        "make_regions_table",
        "args",
        "regions_bed",
        "args",
        "preprocessing_table_input",
        "make_alignment_preprocessing_table",
        "args",
        "alignment_file",
        "args",
        "reference_fasta",
        "get_snv_preprocessing_data",
        "args",
        "snv_vcf_file",
        "pd",
        "DataFrame",
        "from_dict",
        "alignment_preprocessing_table",
        "orient",
        "pd",
        "DataFrame",
        "from_dict",
        "snv_preprocessing_table",
        "orient",
        "df_alignment_preprocessing_table",
        "join",
        "df_snv_preprocessing_table",
        "reset_index",
        "level",
        "rename",
        "columns",
        "df_preprocessing_table",
        "to_csv",
        "args",
        "preprocessing_table_output",
        "sep",
        "index",
        "pd",
        "read_csv",
        "args",
        "preprocessing_table_input",
        "sep",
        "open",
        "args",
        "sv_bed_file",
        "f",
        "line",
        "f",
        "line",
        "rstrip",
        "split",
        "linesplit",
        "linesplit",
        "linesplit",
        "linesplit",
        "start",
        "stop",
        "sv_bed_list",
        "append",
        "line",
        "rstrip",
        "BedTool",
        "sv_bed_list",
        "x",
        "len",
        "x",
        "saveas",
        "BedTool",
        "args",
        "exclude_regions_bed",
        "merge",
        "make_sv_interval_table",
        "sv_bed",
        "exclude_bed",
        "make_snv_features_table",
        "args",
        "snv_vcf_file",
        "sv_bed",
        "make_alignment_features_table",
        "args",
        "alignment_file",
        "args",
        "reference_fasta",
        "sv_bed",
        "pd",
        "DataFrame",
        "from_dict",
        "alignment_features_table",
        "orient",
        "pd",
        "DataFrame",
        "from_dict",
        "snv_features_table",
        "orient",
        "df_alignment_features_table",
        "join",
        "df_snv_features_table",
        "reset_index",
        "rename",
        "columns",
        "args",
        "sv_feature_output_tsv",
        "time",
        "gmtime",
        "strftime",
        "strftime",
        "gmtime",
        "df_features_table",
        "to_csv",
        "format",
        "current_time",
        "sep",
        "index",
        "df_features_table",
        "to_csv",
        "args",
        "sv_feature_output_tsv",
        "sep",
        "index",
        "load_features_from_dataframe",
        "df_features_table",
        "args",
        "sex",
        "args",
        "clf_folder",
        "format",
        "args",
        "clf_folder",
        "format",
        "args",
        "clf_folder",
        "format",
        "args",
        "clf_folder",
        "format",
        "args",
        "clf_folder",
        "format",
        "args",
        "clf_folder",
        "format",
        "args",
        "clf_folder",
        "run_highcov_del_gt1kb_classifier",
        "df",
        "clf_highcov_del_gt1kb_filepath",
        "run_highcov_del_lt1kb_classifier",
        "df",
        "clf_highcov_del_lt1kb_filepath",
        "run_dup_breakpoint_classifier",
        "df",
        "clf_dup_breakpoint_filepath",
        "run_dup_har_classifier",
        "df",
        "clf_dup_har_filepath",
        "concat_and_sort_pred_dfs",
        "df_highcov_del_gt1kb_preds",
        "df_highcov_del_lt1kb_preds",
        "df_dup_breakpoint_preds",
        "df_dup_har_preds",
        "df",
        "run_malesexchrom_del_classifier",
        "df_male_sex_chromosomes",
        "clf_del_malesexchrom_filepath",
        "run_malesexchrom_dup_classifier",
        "df_male_sex_chromosomes",
        "clf_dup_malesexchrom_filepath",
        "concat_and_sort_pred_dfs",
        "df_malesexchrom_del_preds",
        "df_malesexchrom_dup_preds",
        "df_male_sex_chromosomes",
        "pd",
        "concat",
        "df_preds_concat_sorted",
        "df_malesexchrom_preds_concat_sorted",
        "df_preds_concat_sorted",
        "df_preds_concat_sorted",
        "np",
        "log10",
        "df_preds_concat_sorted",
        "np",
        "log10",
        "df_preds_concat_sorted",
        "df_preds_concat_sorted",
        "df_preds_concat_sorted",
        "apply",
        "x",
        "get_genotype",
        "x",
        "axis",
        "args",
        "genotype_predictions_output_tsv",
        "time",
        "gmtime",
        "strftime",
        "strftime",
        "gmtime",
        "format",
        "current_time",
        "args",
        "genotype_predictions_output_tsv",
        "df_preds_concat_sorted",
        "to_csv",
        "genotype_table_filepath",
        "sep",
        "index",
        "make_vcf",
        "args",
        "sample_name",
        "args",
        "reference_fasta",
        "genotype_table_filepath",
        "args",
        "output_vcf"
    ],
    "literals": [
        "\"SV2 genotyper\"",
        "\"--alignment_file\"",
        "\"CRAM/BAM file input\"",
        "\"--reference_fasta\"",
        "\"Reference fasta file input\"",
        "\"--snv_vcf_file\"",
        "\"SNV VCF file input\"",
        "\"--regions_bed\"",
        "\"BED file with pre-generated random genomic regions (for estimating coverage per chromosome)\"",
        "\"--exclude_regions_bed\"",
        "\"BED file with pre-generated random genomic regions (for estimating coverage per chromosome)\"",
        "\"--sv_bed_file\"",
        "\"SV BED file input\"",
        "\"--sv_feature_output_tsv\"",
        "\"Feature table .tsv output (it will be given the default name if this arugment isn't set)\"",
        "\"--preprocessing_table_input\"",
        "\"A pre-generated preprocessing table (if SV2 had been run before and you want to skip the preprocessing part of the program\"",
        "\"--preprocessing_table_output\"",
        "\"Preprocessing table .tsv output (it will be given the default name if this argument isn't set)\"",
        "\"--gc_reference_table\"",
        "\"GC content reference table input\"",
        "\"--sex\"",
        "\"Sex of sample: male or female\"",
        "\"--clf_folder\"",
        "\"Folder that contains the classifiers (classifiers must be in .pkl format)\"",
        "\"--genotype_predictions_output_tsv\"",
        "\"Output features .tsv file with genotype predictions\"",
        "\"--sample_name\"",
        "\"Sample name\"",
        "\"--output_vcf\"",
        "\"Output VCF filepath (optional)\"",
        "\"X\"",
        "\"Y\"",
        "\"DEL\"",
        "\"DUP\"",
        "\"index\"",
        "\"index\"",
        "\"index\"",
        "\"chrom\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"r\"",
        "\"\\t\"",
        "\"index\"",
        "\"index\"",
        "\"level_0\"",
        "\"chrom\"",
        "\"level_1\"",
        "\"start\"",
        "\"level_2\"",
        "\"end\"",
        "\"%Y-%m-%d_%H.%M.%S\"",
        "\"sv2_features.{}.tsv\"",
        "\"\\t\"",
        "\"\\t\"",
        "\"data/trained_classifiers/clf_del_gt1kb.pkl\"",
        "\"data/trained_classifiers/clf_del_lt1kb.pkl\"",
        "\"data/trained_classifiers/clf_dup_breakpoint.pkl\"",
        "\"data/trained_classifiers/clf_dup_har.pkl\"",
        "\"data/trained_classifiers/clf_del_malesexchrom.pkl\"",
        "\"data/trained_classifiers/clf_dup_malesexchrom.pkl\"",
        "\"{}/clf_del_gt1kb.pkl\"",
        "\"{}/clf_del_lt1kb.pkl\"",
        "\"{}/clf_dup_breakpoint.pkl\"",
        "\"{}/clf_dup_har.pkl\"",
        "\"{}/clf_del_malesexchrom.pkl\"",
        "\"{}/clf_dup_malesexchrom.pkl\"",
        "\"ALT_GENOTYPE_LIKELIHOOD\"",
        "\"HET_GENOTYPE_LIKELIHOOD\"",
        "\"HOM_GENOTYPE_LIKELIHOOD\"",
        "\"REF_QUAL\"",
        "\"REF_GENOTYPE_LIKELIHOOD\"",
        "\"ALT_QUAL\"",
        "\"REF_GENOTYPE_LIKELIHOOD\"",
        "\"chrom\"",
        "\"start\"",
        "\"end\"",
        "\"type\"",
        "\"size\"",
        "\"coverage\"",
        "\"coverage_GCcorrected\"",
        "\"discordant_ratio\"",
        "\"split_ratio\"",
        "\"snv_coverage\"",
        "\"heterozygous_allele_ratio\"",
        "\"snvs\"",
        "\"het_snvs\"",
        "\"ALT_GENOTYPE_LIKELIHOOD\"",
        "\"REF_QUAL\"",
        "\"ALT_QUAL\"",
        "\"HOM_GENOTYPE_LIKELIHOOD\"",
        "\"HET_GENOTYPE_LIKELIHOOD\"",
        "\"REF_GENOTYPE_LIKELIHOOD\"",
        "\"GEN\"",
        "\"./.\"",
        "\"GEN\"",
        "\"REF_GENOTYPE_LIKELIHOOD\"",
        "\"HET_GENOTYPE_LIKELIHOOD\"",
        "\"HOM_GENOTYPE_LIKELIHOOD\"",
        "\"%Y-%m-%d_%H.%M.%S\"",
        "\"genotyping_preds_{}.tsv\"",
        "\"\\t\""
    ],
    "variables": [
        "parser",
        "args",
        "chroms",
        "svtypes",
        "GC_content_reference_table",
        "regions_table",
        "alignment_preprocessing_table",
        "snv_preprocessing_table",
        "df_alignment_preprocessing_table",
        "df_snv_preprocessing_table",
        "df_preprocessing_table",
        "df_preprocessing_table",
        "sv_bed_list",
        "linesplit",
        "chrom",
        "start",
        "stop",
        "features",
        "sv_bed",
        "exclude_bed",
        "sv_interval_table",
        "snv_features_table",
        "alignment_features_table",
        "df_alignment_features_table",
        "df_snv_features_table",
        "df_features_table",
        "current_time",
        "df",
        "df_male_sex_chromosomes",
        "clf_highcov_del_gt1kb_filepath",
        "clf_highcov_del_lt1kb_filepath",
        "clf_dup_breakpoint_filepath",
        "clf_dup_har_filepath",
        "clf_del_malesexchrom_filepath",
        "clf_dup_malesexchrom_filepath",
        "clf_highcov_del_gt1kb_filepath",
        "clf_highcov_del_lt1kb_filepath",
        "clf_dup_breakpoint_filepath",
        "clf_dup_har_filepath",
        "clf_del_malesexchrom_filepath",
        "clf_dup_malesexchrom_filepath",
        "df_highcov_del_gt1kb_preds",
        "df_highcov_del_lt1kb_preds",
        "df_dup_breakpoint_preds",
        "df_dup_har_preds",
        "df_preds_concat_sorted",
        "df_malesexchrom_del_preds",
        "df_malesexchrom_dup_preds",
        "df_malesexchrom_preds_concat_sorted",
        "df_preds_concat_sorted",
        "df_preds_concat_sorted",
        "df_preds_concat_sorted",
        "df_preds_concat_sorted",
        "df_preds_concat_sorted",
        "df_preds_concat_sorted",
        "df_preds_concat_sorted",
        "genotype_table_filepath",
        "current_time",
        "genotype_table_filepath",
        "genotype_table_filepath"
    ],
    "comments": [
        "From make_feature_table.py step",
        "From classify.py step",
        "From make_vcf.py step",
        "Chromosomes to analyze (1,... 22, X, Y)",
        "SV types to classify",
        "Make the GC content reference table",
        "Make the regions table (used to estimate coverage)",
        "Make the CRAM/BAM preprocessing table",
        "Make the SNV preprocessing table",
        "Merge and output the preprocessing table",
        "Preprocess the input SV BED file",
        "Make SNV features table (for each filtered SV call)",
        "Make CRAM/BAM features table (for each filtered SV call)",
        "Merge and output feature table",
        "Set default filepaths for the classifiers",
        "If classifier folder is provided as argument, use the ones inside of that folder (must have the same names as default classifiers)",
        "Autosomal SV classifiers",
        "Concat and sort output diploid dfs",
        "Male sex chromosome SV classifiers",
        "Concat and sort output haploid dfs",
        "Concat the diploid and haploid dfs, and then add quality scores",
        "Initialize the GEN column to the missing genotype value ./."
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}