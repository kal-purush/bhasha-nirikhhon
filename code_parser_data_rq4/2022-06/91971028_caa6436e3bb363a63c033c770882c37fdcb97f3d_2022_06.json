{
    "identifiers": [
        "javax",
        "microedition",
        "shell",
        "custom",
        "java",
        "util",
        "DEFAULT_HEAP_SIZE",
        "timers",
        "DEFAULT_HEAP_SIZE",
        "size",
        "deletedCancelledNumber",
        "timers",
        "size",
        "task",
        "timers",
        "length",
        "size",
        "appendedTimers",
        "size",
        "arraycopy",
        "timers",
        "appendedTimers",
        "size",
        "timers",
        "appendedTimers",
        "timers",
        "size",
        "task",
        "upHeap",
        "pos",
        "pos",
        "pos",
        "size",
        "timers",
        "pos",
        "timers",
        "size",
        "timers",
        "size",
        "downHeap",
        "pos",
        "current",
        "size",
        "parent",
        "current",
        "timers",
        "current",
        "when",
        "timers",
        "parent",
        "when",
        "tmp",
        "timers",
        "current",
        "timers",
        "current",
        "timers",
        "parent",
        "timers",
        "parent",
        "tmp",
        "current",
        "parent",
        "parent",
        "current",
        "pos",
        "current",
        "pos",
        "child",
        "current",
        "child",
        "size",
        "size",
        "child",
        "size",
        "timers",
        "child",
        "when",
        "timers",
        "child",
        "when",
        "child",
        "timers",
        "current",
        "when",
        "timers",
        "child",
        "when",
        "tmp",
        "timers",
        "current",
        "timers",
        "current",
        "timers",
        "child",
        "timers",
        "child",
        "tmp",
        "current",
        "child",
        "child",
        "current",
        "timers",
        "DEFAULT_HEAP_SIZE",
        "size",
        "downHeap",
        "i",
        "i",
        "size",
        "i",
        "timers",
        "i",
        "cancelled",
        "deletedCancelledNumber",
        "i",
        "i",
        "task",
        "i",
        "i",
        "timers",
        "length",
        "i",
        "timers",
        "i",
        "task",
        "i",
        "cancelled",
        "finished",
        "tasks",
        "name",
        "isDaemon",
        "setName",
        "name",
        "setDaemon",
        "isDaemon",
        "start",
        "Override",
        "task",
        "cancelled",
        "tasks",
        "isEmpty",
        "finished",
        "wait",
        "ignored",
        "currentTime",
        "currentTimeMillis",
        "task",
        "tasks",
        "minimum",
        "timeToSleep",
        "task",
        "task",
        "cancelled",
        "tasks",
        "timeToSleep",
        "task",
        "when",
        "currentTime",
        "timeToSleep",
        "wait",
        "timeToSleep",
        "ignored",
        "task",
        "pos",
        "tasks",
        "minimum",
        "when",
        "task",
        "when",
        "pos",
        "tasks",
        "getTask",
        "task",
        "task",
        "cancelled",
        "tasks",
        "tasks",
        "getTask",
        "task",
        "task",
        "setScheduledTime",
        "task",
        "when",
        "tasks",
        "pos",
        "task",
        "period",
        "task",
        "fixedRate",
        "task",
        "when",
        "task",
        "when",
        "task",
        "period",
        "task",
        "when",
        "currentTimeMillis",
        "task",
        "period",
        "insertTask",
        "task",
        "task",
        "when",
        "taskCompletedNormally",
        "task",
        "run",
        "taskCompletedNormally",
        "e",
        "task",
        "cancel",
        "taskCompletedNormally",
        "taskCompletedNormally",
        "cancelled",
        "newTask",
        "tasks",
        "insert",
        "newTask",
        "notify",
        "cancelled",
        "tasks",
        "reset",
        "notify",
        "tasks",
        "isEmpty",
        "tasks",
        "deletedCancelledNumber",
        "tasks",
        "deleteIfCancelled",
        "tasks",
        "deletedCancelledNumber",
        "impl",
        "impl",
        "impl",
        "impl",
        "Override",
        "impl",
        "impl",
        "finished",
        "impl",
        "notify",
        "finalize",
        "timerId",
        "timerId",
        "impl",
        "SuppressWarnings",
        "finalizer",
        "name",
        "isDaemon",
        "name",
        "impl",
        "name",
        "isDaemon",
        "finalizer",
        "impl",
        "name",
        "name",
        "isDaemon",
        "Timer",
        "nextId",
        "isDaemon",
        "impl",
        "cancel",
        "impl",
        "impl",
        "purge",
        "task",
        "when",
        "when",
        "getTime",
        "when",
        "getTime",
        "delay",
        "when",
        "getTime",
        "currentTimeMillis",
        "scheduleImpl",
        "task",
        "delay",
        "delay",
        "task",
        "delay",
        "delay",
        "delay",
        "scheduleImpl",
        "task",
        "delay",
        "task",
        "delay",
        "period",
        "delay",
        "period",
        "scheduleImpl",
        "task",
        "delay",
        "period",
        "task",
        "when",
        "period",
        "period",
        "when",
        "getTime",
        "delay",
        "when",
        "getTime",
        "currentTimeMillis",
        "scheduleImpl",
        "task",
        "delay",
        "delay",
        "period",
        "task",
        "delay",
        "period",
        "delay",
        "period",
        "scheduleImpl",
        "task",
        "delay",
        "period",
        "task",
        "when",
        "period",
        "period",
        "when",
        "getTime",
        "delay",
        "when",
        "getTime",
        "currentTimeMillis",
        "scheduleImpl",
        "task",
        "delay",
        "period",
        "task",
        "delay",
        "period",
        "impl",
        "impl",
        "cancelled",
        "when",
        "delay",
        "currentTimeMillis",
        "when",
        "when",
        "task",
        "task",
        "isScheduled",
        "task",
        "cancelled",
        "task",
        "when",
        "when",
        "task",
        "period",
        "period",
        "task",
        "fixedRate",
        "impl",
        "insertTask",
        "task"
    ],
    "literals": [
        "\"unused\"",
        "\"name == null\"",
        "\"Timer-\"",
        "\"when < 0: \"",
        "\"delay < 0: \"",
        "\"Timer was canceled\"",
        "\"Illegal delay to start the TimerTask: \"",
        "\"TimerTask is scheduled already\"",
        "\"TimerTask is canceled\""
    ],
    "variables": [
        "cancelled",
        "finished",
        "task",
        "timeToSleep",
        "impl",
        "timerId",
        "impl",
        "finalizer"
    ],
    "comments": [
        "posible to delete any position of the heap",
        "swap the two",
        "update pos and current",
        "compare the children if they exist",
        "compare selected child with parent",
        "swap the two",
        "update pos and current",
        "re-try this point",
        "need to check cancelled inside the synchronized block",
        "no tasks scheduled -- sleep until any task appear",
        "check the time to sleep for the first task scheduled",
        "sleep!",
        "no sleep is necessary before launching the task",
        "set time to schedule",
        "remove task from queue",
        "set when the next task should be launched",
        "this is a repeating task,",
        "task is scheduled at fixed rate",
        "task is scheduled at fixed delay",
        "insert this task into queue",
        "Changes: J2ME compat",
        "End changes",
        "callers are synchronized",
        "callers are synchronized",
        "Used to finalize thread",
        "insert the newTask into queue"
    ],
    "docstrings": [
        "*  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.",
        "* Timers schedule one-shot or recurring {@link TimerTask tasks} for execution.\n * Prefer {@link java.util.concurrent.ScheduledThreadPoolExecutor\n * ScheduledThreadPoolExecutor} for new code.\n *\n * <p>Each timer has one thread on which tasks are executed sequentially. When\n * this thread is busy running a task, runnable tasks may be subject to delays.\n *\n * <p>One-shot tasks are scheduled to run at an absolute time or after a relative\n * delay.\n *\n * <p>Recurring tasks are scheduled with either a fixed period or a fixed rate:\n * <ul>\n *   <li>With the default <strong>fixed-period execution</strong>, each\n *       successive run of a task is scheduled relative to the start time of\n *       the previous run, so two runs are never fired closer together in time\n *       than the specified {@code period}.\n *   <li>With <strong>fixed-rate execution</strong>, the start time of each\n *       successive run of a task is scheduled without regard for when the\n *       previous run took place. This may result in a series of bunched-up runs\n *       (one launched immediately after another) if delays prevent the timer\n *       from starting tasks on time.\n * </ul>\n *\n * <p>When a timer is no longer needed, users should call {@link #cancel}, which\n * releases the timer's thread and other resources. Timers not explicitly\n * cancelled may hold resources indefinitely.\n *\n * <p>This class does not offer guarantees about the real-time nature of task\n * scheduling. Multiple threads can share a single timer without\n * synchronization.",
        "* True if the method cancel() of the Timer was called or the !!!stop()\n         * method was invoked",
        "* True if the Timer has become garbage",
        "* Contains scheduled events, sorted according to\n         * {@code when} field of TaskScheduled object.",
        "* Starts a new timer.\n         *\n         * @param name thread's name\n         * @param isDaemon daemon thread or not",
        "* This method will be launched on separate thread for each Timer\n         * object.",
        "* Cancels timer.",
        "This object will be used in synchronization purposes",
        "* Creates a new named {@code Timer} which may be specified to be run as a\n     * daemon thread.\n     *\n     * @throws NullPointerException if {@code name == null}",
        "* Creates a new named {@code Timer} which does not run as a daemon thread.\n     *\n     * @throws NullPointerException if {@code name == null}",
        "* Creates a new {@code Timer} which may be specified to be run as a daemon thread.\n     *\n     * @param isDaemon {@code true} if the {@code Timer}'s thread should be a daemon thread.",
        "* Creates a new non-daemon {@code Timer}.",
        "* Cancels the {@code Timer} and all scheduled tasks. If there is a\n     * currently running task it is not affected. No more tasks may be scheduled\n     * on this {@code Timer}. Subsequent calls do nothing.",
        "* Removes all canceled tasks from the task queue. If there are no\n     * other references on the tasks, then after this call they are free\n     * to be garbage collected.\n     *\n     * @return the number of canceled tasks that were removed from the task\n     *         queue.",
        "* Schedule a task for single execution. If {@code when} is less than the\n     * current time, it will be scheduled to be executed as soon as possible.\n     *\n     * @param task\n     *            the task to schedule.\n     * @param when\n     *            time of execution.\n     * @throws IllegalArgumentException\n     *                if {@code when.getTime() < 0}.\n     * @throws IllegalStateException\n     *                if the {@code Timer} has been canceled, or if the task has been\n     *                scheduled or canceled.",
        "* Schedule a task for single execution after a specified delay.\n     *\n     * @param task\n     *            the task to schedule.\n     * @param delay\n     *            amount of time in milliseconds before execution.\n     * @throws IllegalArgumentException\n     *                if {@code delay < 0}.\n     * @throws IllegalStateException\n     *                if the {@code Timer} has been canceled, or if the task has been\n     *                scheduled or canceled.",
        "* Schedule a task for repeated fixed-delay execution after a specific delay.\n     *\n     * @param task\n     *            the task to schedule.\n     * @param delay\n     *            amount of time in milliseconds before first execution.\n     * @param period\n     *            amount of time in milliseconds between subsequent executions.\n     * @throws IllegalArgumentException\n     *                if {@code delay < 0} or {@code period <= 0}.\n     * @throws IllegalStateException\n     *                if the {@code Timer} has been canceled, or if the task has been\n     *                scheduled or canceled.",
        "* Schedule a task for repeated fixed-delay execution after a specific time\n     * has been reached.\n     *\n     * @param task\n     *            the task to schedule.\n     * @param when\n     *            time of first execution.\n     * @param period\n     *            amount of time in milliseconds between subsequent executions.\n     * @throws IllegalArgumentException\n     *                if {@code when.getTime() < 0} or {@code period <= 0}.\n     * @throws IllegalStateException\n     *                if the {@code Timer} has been canceled, or if the task has been\n     *                scheduled or canceled.",
        "* Schedule a task for repeated fixed-rate execution after a specific delay\n     * has passed.\n     *\n     * @param task\n     *            the task to schedule.\n     * @param delay\n     *            amount of time in milliseconds before first execution.\n     * @param period\n     *            amount of time in milliseconds between subsequent executions.\n     * @throws IllegalArgumentException\n     *                if {@code delay < 0} or {@code period <= 0}.\n     * @throws IllegalStateException\n     *                if the {@code Timer} has been canceled, or if the task has been\n     *                scheduled or canceled.",
        "* Schedule a task for repeated fixed-rate execution after a specific time\n     * has been reached.\n     *\n     * @param task\n     *            the task to schedule.\n     * @param when\n     *            time of first execution.\n     * @param period\n     *            amount of time in milliseconds between subsequent executions.\n     * @throws IllegalArgumentException\n     *                if {@code when.getTime() < 0} or {@code period <= 0}.\n     * @throws IllegalStateException\n     *                if the {@code Timer} has been canceled, or if the task has been\n     *                scheduled or canceled.",
        "* Schedule a task."
    ],
    "functions": [
        "TimerTask",
        "minimum",
        "isEmpty",
        "insert",
        "upHeap",
        "downHeap",
        "reset",
        "adjustMinimum",
        "deleteIfCancelled",
        "getTask",
        "TimerImpl",
        "run",
        "insertTask",
        "cancel",
        "purge",
        "FinalizerHelper",
        "finalize",
        "nextId",
        "Timer",
        "Timer",
        "Timer",
        "Timer",
        "cancel",
        "purge",
        "schedule",
        "schedule",
        "schedule",
        "schedule",
        "scheduleAtFixedRate",
        "scheduleAtFixedRate",
        "scheduleImpl"
    ],
    "classes": [
        "Timer",
        "TimerImpl",
        "TimerHeap",
        "FinalizerHelper"
    ]
}