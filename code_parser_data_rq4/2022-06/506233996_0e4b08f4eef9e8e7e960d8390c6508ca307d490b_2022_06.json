{
    "identifiers": [
        "networkx",
        "nx",
        "collections",
        "defaultdict",
        "collections",
        "deque",
        "random",
        "nx",
        "Graph",
        "open",
        "f",
        "lines",
        "f",
        "count",
        "lines",
        "split",
        "len",
        "line",
        "G",
        "add_node",
        "line",
        "L",
        "G",
        "add_node",
        "line",
        "L",
        "G",
        "add_edge",
        "line",
        "line",
        "w",
        "line",
        "count",
        "G",
        "i",
        "G",
        "G",
        "nodes",
        "i",
        "G",
        "nodes",
        "i",
        "i",
        "i",
        "visited",
        "i",
        "visited",
        "visited",
        "add",
        "i",
        "deque",
        "q",
        "append",
        "i",
        "len",
        "q",
        "q",
        "popleft",
        "G",
        "nodes",
        "i",
        "j",
        "G",
        "i",
        "G",
        "i",
        "j",
        "t",
        "lst",
        "lst2",
        "append",
        "t",
        "t",
        "wt",
        "j",
        "visited",
        "q",
        "append",
        "j",
        "visited",
        "add",
        "j",
        "l1",
        "lst2",
        "l2",
        "G",
        "nodes",
        "j",
        "l2",
        "l1",
        "l2",
        "l1",
        "G",
        "nodes",
        "j",
        "l1",
        "G",
        "nodes",
        "j",
        "remove",
        "l2",
        "l1",
        "lst2",
        "lst2",
        "remove",
        "l1",
        "G",
        "nodes",
        "j",
        "lst2",
        "node",
        "G",
        "nodes",
        "BFS",
        "node",
        "G",
        "nodes",
        "nodes",
        "node",
        "nodes",
        "parent",
        "node",
        "x",
        "parent",
        "x",
        "x",
        "x",
        "parent",
        "find",
        "parent",
        "x",
        "parent",
        "x",
        "x",
        "y",
        "find",
        "x",
        "find",
        "y",
        "px",
        "py",
        "parent",
        "py",
        "generate_hotels",
        "len",
        "hotels",
        "a",
        "b",
        "G",
        "nodes",
        "a",
        "G",
        "nodes",
        "b",
        "a",
        "b",
        "l1",
        "ulst",
        "l2",
        "vlst",
        "l1",
        "l2",
        "min",
        "distance",
        "l1",
        "l2",
        "distance",
        "len",
        "G",
        "nodes",
        "length",
        "length",
        "random",
        "randrange",
        "x",
        "y",
        "i",
        "hotelscount",
        "hotels",
        "append",
        "random",
        "random",
        "length",
        "hotels",
        "hotels",
        "size",
        "len",
        "G",
        "nodes",
        "len",
        "orderlist",
        "size",
        "random",
        "random",
        "length",
        "val",
        "hotels",
        "random",
        "choice",
        "hotels",
        "orderlist",
        "append",
        "val",
        "hot",
        "orderlist",
        "nodes",
        "i",
        "len",
        "nodes",
        "j",
        "i",
        "len",
        "nodes",
        "edges",
        "append",
        "nodes",
        "i",
        "nodes",
        "j",
        "get_distance",
        "nodes",
        "i",
        "nodes",
        "j",
        "edges",
        "sort",
        "key",
        "x",
        "x",
        "DSU",
        "nodes",
        "edge",
        "edges",
        "dsu",
        "union",
        "edge",
        "edge",
        "total",
        "edge",
        "total",
        "optimal_matching",
        "cluster",
        "optimal_matching",
        "cluster",
        "__nodes",
        "initial_cost",
        "__nodes",
        "initial_cost",
        "ret",
        "nodes",
        "ret",
        "ret",
        "cost",
        "ret",
        "other_cluster",
        "new_cost",
        "node",
        "other_cluster",
        "nodes",
        "nodes",
        "append",
        "node",
        "new_cost",
        "x",
        "nodes",
        "append",
        "x",
        "extRef",
        "shop_orders",
        "restaurant",
        "restaurant",
        "extRef",
        "max_vehicle_size",
        "order",
        "shop_orders",
        "clusters",
        "append",
        "Cluster",
        "order",
        "get_distance",
        "restaurant",
        "order",
        "converge",
        "max_iter",
        "get_average_cost",
        "delta",
        "relax",
        "max_iter",
        "inform",
        "clusters",
        "i",
        "clusters",
        "j",
        "clusters",
        "i",
        "j",
        "len",
        "i",
        "nodes",
        "len",
        "j",
        "nodes",
        "max_size",
        "get_path_cost_for_nodes",
        "start",
        "i",
        "nodes",
        "j",
        "nodes",
        "r",
        "i",
        "cost",
        "j",
        "cost",
        "w",
        "best",
        "i",
        "j",
        "w",
        "r",
        "best",
        "clusters",
        "remove",
        "best",
        "clusters",
        "remove",
        "best",
        "best",
        "merge",
        "best",
        "best",
        "clusters",
        "append",
        "best",
        "cluster",
        "clusters",
        "total",
        "cluster",
        "cost",
        "cnt",
        "len",
        "cluster",
        "nodes",
        "total",
        "cnt",
        "ext_Ref",
        "ext_Ref",
        "get_random_orders",
        "ext_Ref",
        "simulate",
        "defaultdict",
        "order",
        "order_window",
        "orders_of_shop",
        "order",
        "append",
        "order",
        "key",
        "orders_of_shop",
        "keys",
        "key",
        "FoodGraph",
        "orders_of_shop",
        "key",
        "key",
        "x",
        "y",
        "get_distance",
        "x",
        "y",
        "Solver",
        "RoadNetwork"
    ],
    "literals": [
        "'USA_dataset.txt'",
        "\"L\"",
        "\"L\"",
        "\"L\"",
        "'w'",
        "\"L\"",
        "\"L\"",
        "\"L\"",
        "\"L\"",
        "\"L\"",
        "\"L\"",
        "\"L\"",
        "\"Optimal matching found !!!\"",
        "'{ Nodes : '",
        "','",
        "'Total Cost : '",
        "' }'",
        "\"\\nsolving for hotel \""
    ],
    "variables": [
        "G",
        "count",
        "line",
        "marked",
        "visited",
        "q",
        "i",
        "lst",
        "wt",
        "lst2",
        "parent",
        "node",
        "x",
        "px",
        "py",
        "px",
        "hotels",
        "max_vehicle_size",
        "number_of_hotels",
        "ulst",
        "vlst",
        "distance",
        "distance",
        "hotels",
        "length",
        "x",
        "y",
        "hotelscount",
        "orderlist",
        "length",
        "val",
        "hot",
        "edges",
        "dsu",
        "total",
        "nodes",
        "cost",
        "ret",
        "cost",
        "clusters",
        "delta",
        "start",
        "max_size",
        "max_iter",
        "best",
        "r",
        "w",
        "best",
        "total",
        "cnt",
        "order_window",
        "matching",
        "orders_of_shop",
        "fg",
        "solver"
    ],
    "comments": [
        "CREATING GRAPH FROM DATASET",
        "Create Hub Labellings",
        "has nodes that are already traversed",
        "BFS",
        "run until q is empty",
        "#Query two nodes to receive distance",
        "#Define a class",
        "#class RoadNetwork",
        "",
        "This class can be used to initialize hotels and query distance for the functions of the algorithm",
        "",
        "There are two functions",
        "",
        "def get_distance(self,a,b):",
        "",
        ">This function receives two integer node values and returns the minimum distance between them",
        "",
        "def get_hotels(self):",
        "",
        ">This function initializes a random set of nodes as hotels and orders are delivered from hotels.",
        "",
        "print(hotelscount)",
        "TODO  : have a reference to graph object and update nodes and orders",
        "cluster is a set of nodes and cost(i)",
        "calculate w(i , j) = c(i , j) - c(i) - c(j)",
        "modify the clustering",
        "construct a new cluster",
        "reference to the network object ...",
        "put an order in the corresponding shop bucket"
    ],
    "docstrings": [],
    "functions": [
        "BFS",
        "find",
        "union",
        "get_distance",
        "generate_hotels",
        "get_hotels",
        "get_random_orders",
        "get_path_cost_for_nodes",
        "inform",
        "__str__",
        "merge",
        "add_node",
        "converge",
        "relax",
        "get_average_cost",
        "simulate",
        "query"
    ],
    "classes": [
        "DSU",
        "RoadNetwork",
        "Cluster",
        "FoodGraph",
        "Solver"
    ]
}