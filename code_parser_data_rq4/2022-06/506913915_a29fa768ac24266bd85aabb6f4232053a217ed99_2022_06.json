{
    "identifiers": [
        "Request",
        "RequestHandler",
        "Response",
        "UserManager",
        "User",
        "argon2",
        "generateToken",
        "req",
        "res",
        "req",
        "email",
        "password",
        "res",
        "res",
        "password",
        "res",
        "UserManager",
        "email",
        "argon2",
        "password",
        "existingEmail",
        "existingEmail",
        "res",
        "UserManager",
        "req",
        "hashPassword",
        "res",
        "result",
        "email",
        "role",
        "err",
        "err",
        "res",
        "err",
        "req",
        "res",
        "UserManager",
        "rows",
        "res",
        "rows",
        "err",
        "err",
        "res",
        "err",
        "req",
        "res",
        "res",
        "req",
        "res",
        "req",
        "user",
        "parseInt",
        "req",
        "UserManager",
        "user",
        "result",
        "res",
        "res",
        "err",
        "err",
        "res",
        "req",
        "res",
        "UserManager",
        "parseInt",
        "req",
        "res",
        "err",
        "err",
        "res"
    ],
    "literals": [
        "\"express\"",
        "\"../models\"",
        "\"../models/UserManager\"",
        "\"argon2\"",
        "\"../services/auth\"",
        "string",
        "\"Email and password missing\"",
        "\"Email missing\"",
        "\"Password missing\"",
        "\"Email already used\"",
        "\"access_token\""
    ],
    "variables": [
        "existingEmail",
        "hashPassword",
        "result",
        "user",
        "result"
    ],
    "comments": [
        "static login: RequestHandler = (req: Request, res: Response) => {",
        "const { email, password } = req.body;",
        "if (!email) {",
        "if (!password) {",
        "return res.status(500).send({",
        "error: \"Email and password missing\",",
        "});",
        "}",
        "return res.status(500).send({",
        "error: \"Email missing\",",
        "});",
        "}",
        "if (!password)",
        "return res.status(500).send({",
        "error: \"Password missing\",",
        "});",
        "UserManager.findByMail(email)",
        ".then((existingEmail) => {",
        "if (!existingEmail[0]) {",
        "return res.status(500).send({",
        "error: \"Email isn't registered\",",
        "});",
        "} else {",
        "const { id, email, password: hash, role_id } = existingEmail[0];",
        "argon2.verify(hash, password).then((passVerified: boolean) => {",
        "if (!passVerified)",
        "return res.status(403).send({",
        "error: \"Wrong password\",",
        "});",
        "const token = generateToken(existingEmail[0]);",
        "return res",
        ".cookie(\"access_token\", token, {",
        "httpOnly: true,",
        "secure: process.env.NODE_ENV === \"production\",",
        "})",
        ".status(200)",
        ".send({",
        "id,",
        "email,",
        "role_id,",
        "});",
        "});",
        "}",
        "})",
        ".catch((err: Error) => {",
        "console.error(err);",
        "res.status(500).send({",
        "error: err.message,",
        "});",
        "});",
        "};",
        ".map((person) => ({",
        "id: person.id,",
        "email: person.email,",
        "role: person.role_id,",
        "}))"
    ],
    "docstrings": [],
    "functions": [],
    "classes": [
        "UserController"
    ]
}