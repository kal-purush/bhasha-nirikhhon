{
    "identifiers": [
        "BaseActionPayload",
        "TelemetryEventHandler",
        "Logger",
        "escapeRegExp",
        "TelemetryEvents",
        "UnhandledErrorTelemetryData",
        "telemetryEventHandler",
        "logger",
        "extWindow",
        "extConsole",
        "extWindow",
        "message",
        "source",
        "lineno",
        "colno",
        "error",
        "windowErrorHookIsActive",
        "windowErrorHookIsActive",
        "sendExceptionTelemetry",
        "TelemetryEvents",
        "message",
        "error",
        "windowErrorHookIsActive",
        "extWindow",
        "windowRejectionHookIsActive",
        "windowRejectionHookIsActive",
        "sendExceptionTelemetry",
        "TelemetryEvents",
        "windowRejectionHookIsActive",
        "extConsole",
        "extConsole",
        "message",
        "optionalParams",
        "consoleHookIsActive",
        "consoleHookIsActive",
        "optionalParams",
        "message",
        "err",
        "sendExceptionTelemetry",
        "TelemetryEvents",
        "message",
        "err",
        "optionalParams",
        "consoleError",
        "message",
        "optionalParams",
        "consoleError",
        "message",
        "err",
        "consoleHookIsActive",
        "logger",
        "logger",
        "message",
        "optionalParams",
        "loggingHookIsActive",
        "loggingHookIsActive",
        "optionalParams",
        "message",
        "err",
        "sendExceptionTelemetry",
        "TelemetryEvents",
        "message",
        "err",
        "err",
        "optionalParams",
        "loggerError",
        "message",
        "err",
        "optionalParams",
        "loggerError",
        "message",
        "err",
        "err",
        "loggingHookIsActive",
        "errorType",
        "TelemetryEvents",
        "message",
        "stackTrace",
        "source",
        "TelemetryEvents",
        "message",
        "telemetry",
        "sanitizedTelemetry",
        "sanitizedTelemetry",
        "TelemetryEvents",
        "payload",
        "telemetryData",
        "telemetryData",
        "telemetryData",
        "telemetryData",
        "telemetryData",
        "telemetryData",
        "telemetryData",
        "telemetryData",
        "telemetryData",
        "telemetryData",
        "exclusionRegex",
        "telemetryData",
        "telemetryData",
        "exclusionRegex",
        "telemetryData",
        "telemetryData",
        "escapeRegExp",
        "questionablePropertyNamePattern",
        "urlPattern",
        "questionablePropertyPattern",
        "questionableSubstringPattern"
    ],
    "literals": [
        "'background/actions/action-payloads'",
        "'background/telemetry/telemetry-event-handler'",
        "'common/logging/logger'",
        "'lodash'",
        "'../../common/extension-telemetry-events'",
        "'../../common/extension-telemetry-events'",
        "'http'",
        "'html'",
        "'target'",
        "'url'",
        "'path'",
        "'snippet'",
        "'selector'",
        "'elementSelector'",
        "'cssSelector'",
        "string",
        "string",
        "string",
        "string",
        "':\\\\/\\\\/'",
        "'|'",
        "['\"](${questionablePropertyNamePattern})['\"]",
        "${urlPattern}|${questionablePropertyPattern}"
    ],
    "variables": [
        "sendExceptionTelemetry",
        "windowErrorHookIsActive",
        "windowRejectionHookIsActive",
        "consoleHookIsActive",
        "loggingHookIsActive",
        "consoleError",
        "err",
        "loggerError",
        "err",
        "telemetry",
        "sanitizedTelemetry",
        "payload",
        "exclusionRegex",
        "urlPattern",
        "questionablePropertyNamePattern",
        "questionablePropertyPattern",
        "questionableSubstringPattern"
    ],
    "comments": [
        "Copyright (c) Microsoft Corporation. All rights reserved.",
        "Licensed under the MIT License.",
        "Catch top level synchronous errors",
        "Catch errors thrown in promises",
        "Catch errors written to console.error",
        "Catch errors written to logger.error",
        "Note that this is separate from console.error (despite the default logger deferring to",
        "console.error) because we generated the default logger before updating console.error",
        "above, meaning logger.error still has the old console.error implementation.",
        "This argument *is* a constant built from literals, it's just built up from parts",
        "eslint-disable-next-line security/detect-non-literal-regexp"
    ],
    "docstrings": [],
    "functions": [
        "initialize",
        "generateExclusionRegex"
    ],
    "classes": [
        "ExceptionTelemetryListener"
    ]
}