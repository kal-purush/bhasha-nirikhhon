{
    "identifiers": [
        "os",
        "tflite_micro",
        "tensorflow",
        "lite",
        "micro",
        "python",
        "interpreter",
        "src",
        "interpreter_wrapper_pybind",
        "model_data",
        "arena_size",
        "interpreter_wrapper_pybind",
        "InterpreterWrapper",
        "model_data",
        "arena_size",
        "classmethod",
        "model_path",
        "arena_size",
        "model_path",
        "os",
        "path",
        "isfile",
        "model_path",
        "ValueError",
        "open",
        "model_path",
        "f",
        "f",
        "read",
        "arena_size",
        "len",
        "model_data",
        "Interpreter",
        "model_data",
        "arena_size",
        "classmethod",
        "model_data",
        "arena_size",
        "model_data",
        "ValueError",
        "arena_size",
        "len",
        "model_data",
        "Interpreter",
        "model_data",
        "arena_size",
        "_interpreter",
        "Invoke",
        "input_data",
        "index",
        "input_data",
        "ValueError",
        "index",
        "index",
        "ValueError",
        "_interpreter",
        "SetInputTensor",
        "input_data",
        "index",
        "index",
        "index",
        "index",
        "ValueError",
        "_interpreter",
        "GetOutputTensor",
        "index"
    ],
    "literals": [
        "\"Invalid model file path\"",
        "\"rb\"",
        "\"Model must not be None\"",
        "\"Input data must not be None\"",
        "\"Index must be a non-negative integer\"",
        "\"Index must be a non-negative integer\""
    ],
    "variables": [
        "_interpreter",
        "model_data",
        "arena_size",
        "arena_size"
    ],
    "comments": [
        "Copyright 2022 The TensorFlow Authors. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "=============================================================================="
    ],
    "docstrings": [
        "\"\"\"Python package for TFLM Python Interpreter\"\"\"",
        "\"\"\"\n    Instantiates a TFLM interpreter from a model .tflite filepath.\n\n    Args:\n      model_path: Filepath to the .tflite model\n      arena_size: Tensor arena size in bytes. If unused, tensor arena size will\n        default to 10 times the model size.\n\n    Returns:\n      An Interpreter instance\n    \"\"\"",
        "\"\"\"\n    Instantiates a TFLM interpreter from a model in byte array.\n\n    Args:\n      model_data: Model in byte array format\n      arena_size: Tensor arena size in bytes. If unused, tensor arena size will\n        default to 10 times the model size.\n\n    Returns:\n      An Interpreter instance\n    \"\"\"",
        "\"\"\"\n    Invoke the TFLM interpreter to run an inference.\n\n    This should be called after `set_input()`.\n\n    Returns:\n      Status code of the C++ invoke function. A RuntimeError will be raised as\n      well upon any error.\n    \"\"\"",
        "\"\"\"\n    Set input data into input tensor.\n\n    This should be called before `invoke()`.\n\n    Args:\n      input_data: Input data in numpy array format. The numpy array format is\n        chosen to be consistent with TFLite interpreter.\n      index: An integer between 0 and the number of input tensors (exclusive)\n        consistent with the order defined in the list of inputs in the .tflite\n        model\n    \"\"\"",
        "\"\"\"\n    Get data from output tensor.\n\n    The output data correspond to the most recent `invoke()`.\n\n    Args:\n      index: An integer between 0 and the number of output tensors (exclusive)\n        consistent with the order defined in the list of outputs in the .tflite\n        model\n\n    Returns:\n      Output data in numpy array format. The numpy array format is chosen to\n      be consistent with TFLite interpreter.\n    \"\"\""
    ],
    "functions": [
        "from_file",
        "from_bytes",
        "invoke",
        "set_input",
        "get_output"
    ],
    "classes": [
        "Interpreter"
    ]
}