{
    "identifiers": [
        "Linq",
        "Text",
        "Text",
        "RegularExpressions",
        "TOCalculator",
        "IR365Calculator",
        "_maxVal",
        "_maxVal",
        "value",
        "_delimiters",
        "_delimiters",
        "value",
        "_delimiterTrimChar",
        "_delimiterTrimChar",
        "value",
        "_delimiterAnyLength",
        "_delimiterAnyLength",
        "value",
        "_allowNegatives",
        "_allowNegatives",
        "value",
        "_operands",
        "_operands",
        "value",
        "delimiters",
        "_delimiters",
        "delimiters",
        "customDelimiter",
        "input",
        "IsNullOrEmpty",
        "input",
        "input",
        "input",
        "Replace",
        "Regex",
        "Matches",
        "customDelimiter",
        "matches",
        "Count",
        "_delimiters",
        "_delimiters",
        "Append",
        "customDelimiter",
        "TrimStart",
        "_delimiterTrimChar",
        "ToArray",
        "Match",
        "m",
        "matches",
        "_delimiters",
        "_delimiters",
        "Append",
        "m",
        "Groups",
        "Value",
        "ToArray",
        "input",
        "Split",
        "_delimiters",
        "StringSplitOptions",
        "_operands",
        "ConvertAll",
        "stringArgs",
        "TryParse",
        "s",
        "intResult",
        "intResult",
        "_maxVal",
        "intResult",
        "ToArray",
        "_allowNegatives",
        "_operands",
        "Any",
        "t",
        "StringBuilder",
        "_operands",
        "Where",
        "t",
        "ToList",
        "ForEach",
        "sb",
        "Append",
        "t",
        "ToString",
        "ArgumentException",
        "sb",
        "ToString",
        "TrimEnd"
    ],
    "literals": [
        "\"0\"",
        "\" \"",
        "\"\"",
        "\",\"",
        "\"Negative arguments are not allowed! Invalid arguments are: \"",
        "\"Calculating...\""
    ],
    "variables": [
        "_operands",
        "_maxVal",
        "_delimiters",
        "_delimiterTrimChar",
        "_delimiterAnyLength",
        "_allowNegatives",
        "MaxVal",
        "Delimiters",
        "DelimiterTrimChar",
        "DelimiterAnyLength",
        "AllowNegatives",
        "Operands",
        "MatchCollection",
        "matches",
        "stringArgs",
        "StringBuilder",
        "sb"
    ],
    "comments": [
        "check for valid input",
        "remove any white space",
        "add custom delimiter",
        "delimiter is only a single character",
        "string delimiter(s)",
        "parse input on delimeters",
        "_addends = Array.ConvertAll(stringArgs,",
        "s => (int.TryParse(s, out int intResult) ? intResult : 0))  //replace invalid, null or empty string with 0",
        ".Where(t => t <= _maxVal).ToArray();                        //filter 'invalid' numbers > _maxVal",
        "refactor to allow replacement to 0 rather than filtering",
        "replace invalid, > _maxVal, null or empty string with 0"
    ],
    "docstrings": [],
    "functions": [
        "ResetDelimiters",
        "ParseInput",
        "Calculate"
    ],
    "classes": [
        "CalculatorOperation"
    ]
}