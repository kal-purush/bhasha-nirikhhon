{
    "identifiers": [
        "datetime",
        "logging",
        "os",
        "uuid",
        "uuid4",
        "data_base",
        "db",
        "database",
        "data_base",
        "partitions",
        "partitions",
        "components",
        "security",
        "user_session",
        "user_session",
        "components",
        "model",
        "communication",
        "components",
        "model",
        "templates",
        "template_notification",
        "template_notification_requester",
        "user",
        "user",
        "logging",
        "info",
        "msg",
        "uuid4",
        "user_id",
        "datetime",
        "datetime",
        "now",
        "strftime",
        "database",
        "db_create",
        "doc",
        "user",
        "partition",
        "result",
        "e",
        "logging",
        "info",
        "msg",
        "e",
        "email",
        "logging",
        "info",
        "msg",
        "email",
        "e",
        "logging",
        "info",
        "msg",
        "e"
    ],
    "literals": [
        "\"add_user- Start: \"",
        "'user_id'",
        "'created_date'",
        "\"%Y-%m-%d %H:%M\"",
        "\"users\"",
        "'status'",
        "\"Add_user exception: \"",
        "\"get_user_info - Start\"",
        "\"email\"",
        "\"\"",
        "\"true\"",
        "\"false\"",
        "\"get_user_info exception: \""
    ],
    "variables": [
        "user_id",
        "user",
        "user",
        "result",
        "selector"
    ],
    "comments": [
        "1. Generate assessment ID (unique)",
        "2. Add the assessment ID in the object",
        "3. Add control data",
        "assessment['created_by'] = user_session.get_user_session()['email']",
        "4. Add the object in the database",
        "result = database.db_create(doc=assessment, partition=None)",
        "5. Return result",
        "1. Get user email",
        "user_email =",
        "1. Select from database the records filtering by the user email",
        "3. Return the result",
        "Missing input"
    ],
    "docstrings": [
        "\"\"\"This component adds the record in the Cloudant (assessment) for CBTA assessment \"\"\"",
        "\"\"\"Check if user is registered in db\"\"\""
    ],
    "functions": [
        "add_user",
        "get_user_info"
    ],
    "classes": []
}