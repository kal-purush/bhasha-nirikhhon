{
    "identifiers": [
        "tqdm",
        "tqdm",
        "collections",
        "defaultdict",
        "guess",
        "answer",
        "defaultdict",
        "letter",
        "answer",
        "lettercount",
        "letter",
        "ii",
        "guess",
        "ii",
        "answer",
        "ii",
        "guess",
        "ii",
        "lettercount",
        "answer",
        "ii",
        "ii",
        "lettercount",
        "guess",
        "ii",
        "guess",
        "ii",
        "lower",
        "lettercount",
        "guess",
        "ii",
        "join",
        "result",
        "possible_answer",
        "guess",
        "result",
        "score",
        "guess",
        "possible_answer",
        "result",
        "feasible_words",
        "guess",
        "result",
        "answer",
        "answer",
        "feasible_words",
        "word_still_feasible",
        "answer",
        "guess",
        "result",
        "feasible_words",
        "guess",
        "result",
        "len",
        "still_feasible",
        "feasible_words",
        "guess",
        "result",
        "guess",
        "feasible_words",
        "answer",
        "feasible_words",
        "expected_num_remaining",
        "num_still_feasible",
        "feasible_words",
        "guess",
        "score",
        "guess",
        "answer",
        "expected_num_remaining",
        "len",
        "feasible_words",
        "expected_num_remaining",
        "reasonable_guesses",
        "feasible_words",
        "tqdm",
        "reasonable_guesses",
        "guess",
        "progress_iterator",
        "evaluate_guess",
        "guess",
        "feasible_words",
        "expected_num_remaining",
        "best_score",
        "guess",
        "expected_num_remaining",
        "progress_iterator",
        "clear",
        "best_guess",
        "best_score",
        "best_guess",
        "words",
        "guess",
        "result",
        "ii",
        "result",
        "ii",
        "word",
        "word",
        "words",
        "guess",
        "ii",
        "upper",
        "word",
        "words",
        "filename",
        "open",
        "filename",
        "f",
        "f",
        "readlines",
        "word",
        "word",
        "words",
        "re",
        "word",
        "upper",
        "word",
        "words",
        "re",
        "match",
        "word",
        "len",
        "words",
        "words",
        "read_word_list",
        "words",
        "random",
        "random",
        "choice",
        "words",
        "word",
        "n_guesses",
        "score",
        "word",
        "answer",
        "n_guesses",
        "word",
        "result",
        "word",
        "answer",
        "solved",
        "n_guesses",
        "result",
        "words",
        "words",
        "len",
        "words",
        "words",
        "words",
        "words",
        "guess",
        "result",
        "still_feasible",
        "feasible",
        "guess",
        "result",
        "len",
        "feasible",
        "feasible",
        "reasonable_guesses",
        "guesses",
        "guess",
        "result",
        "len",
        "feasible",
        "feasible",
        "len",
        "guesses",
        "best_guess",
        "guesses",
        "feasible",
        "guess",
        "next_guess",
        "words",
        "WordlGame",
        "words",
        "WordlSolver",
        "words",
        "wordl",
        "solved",
        "solver",
        "next_guess",
        "wordl",
        "guess",
        "guess",
        "wordl",
        "solved",
        "solver",
        "apply_result",
        "guess",
        "result",
        "solver",
        "think"
    ],
    "literals": [
        "\".\"",
        "''",
        "'inf'",
        "\"New best guess is \"",
        "\" with \"",
        "'.'",
        "\"^[a-z][a-z][a-z][a-z][a-z]$\"",
        "\"Loaded %d words.\"",
        "'/usr/share/dict/american-english'",
        "'Guess #%d: '",
        "\" --> \"",
        "\"Solved in %d guesses!\\n\"",
        "\"%d words loaded.\"",
        "'SLANT'",
        "\"Resetting the solver.\"",
        "\"%d words still feasible:\"",
        "\"%d words in reasonable guess list\""
    ],
    "variables": [
        "result",
        "lettercount",
        "result",
        "ii",
        "result",
        "ii",
        "expected_num_remaining",
        "best_score",
        "best_guess",
        "progress_iterator",
        "expected_num_remaining",
        "best_guess",
        "best_score",
        "words",
        "words",
        "words",
        "words",
        "words",
        "answer",
        "solved",
        "n_guesses",
        "result",
        "solved",
        "words",
        "feasible",
        "guesses",
        "next_guess",
        "feasible",
        "guesses",
        "guess",
        "guess",
        "next_guess",
        "wordl",
        "solver",
        "guess",
        "result"
    ],
    "comments": [
        "!/usr/local/python",
        "This is a solver for the game WORDLE [https://www.powerlanguage.co.uk/wordle].",
        "Instead of spoiling the \"official\" WORDLE, here is a clone of it that you can",
        "play as often as you want: http://foldr.moe/hello-wordl/ .",
        "",
        "Currently this is a very naive solver with a runtime of O(N^3) where N is the",
        "number of words of the dictionary. For every possible answer and every possible",
        "guess, we count how many of the other possible answers would be eliminated by",
        "that guess.",
        "",
        "The dictionary on my system contains 4567 words, so this means that this program",
        "would require 95 billion iterations to compute the best first word. To make",
        "matters worse, the function that evalues a guess (called \"score\") is itself very",
        "slow. There are many opportunities for optimization.",
        "",
        "This program is meant to be used from within ipython. After starting ipython:",
        "",
        "from autowordl import *",
        "play_wordl(words)",
        "",
        "will have the computer play a game of Wordle against itself. Alternatively, you",
        "can instantiate the solver:",
        "",
        "solver = WordlSolver(words)",
        "",
        "Suppose your initial guess was 'SLANT' and the result was 's.a..' (meaning that",
        "the 'S' and 'A' appear in the answer but the other letters do not; i.e. \"S\" and \"A\"",
        "are yellow and the other letters are grey). You can tell the solver about this result:",
        "",
        "solver.apply_result(\"SLANT\", \"s.a..\")    # --> 188 words still feasible:",
        "",
        "Now ask the solver to suggest the next best guess:",
        "",
        "solver.think()",
        "",
        "The program suggests \"CARES\" as the next guess. The \"C\" is grey, but \"ARES\" light",
        "up in green! (Meaning the answer has no \"C\", but does end in \"ARES\".):",
        "",
        "solver.apply_result(\"CARES\", \".ARES\")",
        "",
        "The solver replies with:",
        "",
        "7 words still feasible:",
        "['BARES', 'DARES', 'FARES', 'HARES', 'MARES', 'PARES', 'WARES']",
        "",
        "When searching for possible answers, it is useful to search over all valid words,",
        "even if we know a valid word is not a possible answer. This is one such situation.",
        "Rather than guessing one of the 7 possible words remaining, we call solver.think()",
        "and it suggests.... 'APHID'.",
        "",
        "That's a pretty clever guess because 'APHID' will be able to tell us immediately",
        "whether the answer is PARES, HARES, or DARES. And if it is none of those, it still",
        "reduces the number of options from 7 to 4. We fall into that second, unlucky case:",
        "",
        "solver.apply_result(\"APHID\", \"a....\")",
        "",
        "4 words still feasible:",
        "['BARES', 'FARES', 'MARES', 'WARES']",
        "",
        "solver.think()",
        "New best guess is WOMBS with 1.0",
        "",
        "Here we could try one of the four remaining feasible words for a change of 1/4",
        "of getting the answer, or we could try WOMBS, which will guarantee that we will",
        "know the answer on the next try.",
        "",
        "We try \"WOMBS\" and we get \"..m.S\". Because there's an M in the solution we know",
        "that the answer is \"MARES\":",
        "",
        "solver.apply_result(\"WOMBS\", \"..m.S\")",
        "1 words still feasible:",
        "['MARES']",
        "",
        "2022-01-10 Tobin Fricke <fricke@gmail.com>",
        "tqdm is a nice progress-bar library. Install it with \"pip install tqdm\".",
        "Returns the result of guessing 'guess' when the true answer is 'answer'.",
        "\"Green\" letters are indicated in upper case in the result, yellow ones in lower case.",
        "Non-matching letters are replaced with \".\"",
        "",
        "score(\"SLANT\", \"SQUID\") returns \"S....\"",
        "score(\"CILIA\", \"VALID\") returns \"..LIa\"",
        "The scoring function is in the inner loop of the solver, so it is ripe for",
        "optimization. This function would be trivial were it not for the case of",
        "repeated letters in the guess. It might be worth checking for that situation",
        "and using a faster function in that case.",
        "Process the exact matches.",
        "Process the leftover \"right letters in wrong position.\"",
        "TODO: Improve efficiency by counting the number of feasible words remaining",
        "without actually constructing the list.",
        "Strip newline characters",
        "Select five-letter words in the allowed character set.",
        "A wordl game server, which picks a random secret answer, and responds to our guesses.",
        "A wordl solver, which suggests what to guess next.",
        "Store the dictionary so that we can reset the solver later.",
        "List of possible solutions that are still feasible.",
        "List of words that would be reasonable to guess.",
        "Unfortunately the solver is too slow to come up with an initial guess,",
        "so we hardcode one.",
        "It can be useful to try a known-infeasible guess. But often, because this program is so slow,",
        "it takes too long to evaluate _all_ possible guesses. Here we cut down the list of possible",
        "guesses slightly by removing possible guesses that contain letters that we already know are",
        "not in the solution.",
        "Don't bother searching if there is only one option.",
        "elif len(self.feasible) < 10:",
        "# In general, it can be advantageous to try guesses that we know are not feasible,",
        "# if they can limit the future search space. But it is dumb to try a known-infeasible",
        "# guess if the number of feasible solutions is very small. It would be better to",
        "# fix \"best_guess\" to break ties by choosing a feasible answer where possible, but",
        "# in the meantime here's a hack.",
        "guess = best_guess(self.feasible, self.feasible)",
        "And now we have the computer play wordl against itself."
    ],
    "docstrings": [],
    "functions": [
        "score",
        "word_still_feasible",
        "still_feasible",
        "num_still_feasible",
        "evaluate_guess",
        "best_guess",
        "reasonable_guesses",
        "read_word_list",
        "guess",
        "reset",
        "apply_result",
        "think",
        "play_wordl"
    ],
    "classes": [
        "WordlGame",
        "WordlSolver"
    ]
}