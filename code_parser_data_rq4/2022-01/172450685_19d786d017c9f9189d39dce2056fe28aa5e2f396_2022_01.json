{
    "identifiers": [
        "cn",
        "hyperchain",
        "sdk",
        "common",
        "utils",
        "cn",
        "hyperchain",
        "sdk",
        "fvm",
        "scale",
        "ScaleCodecReader",
        "cn",
        "hyperchain",
        "sdk",
        "fvm",
        "scale",
        "ScaleCodecWriter",
        "cn",
        "hyperchain",
        "sdk",
        "fvm",
        "scale",
        "writer",
        "StringWriter",
        "cn",
        "hyperchain",
        "sdk",
        "fvm",
        "types",
        "FVMType",
        "cn",
        "hyperchain",
        "sdk",
        "fvm",
        "types",
        "PrimitiveType",
        "cn",
        "hyperchain",
        "sdk",
        "fvm",
        "types",
        "CompoundType",
        "cn",
        "hyperchain",
        "sdk",
        "fvm",
        "types",
        "StructType",
        "cn",
        "hyperchain",
        "sdk",
        "fvm",
        "types",
        "UnfixedLengthListType",
        "cn",
        "hyperchain",
        "sdk",
        "fvm",
        "types",
        "FixedLengthListType",
        "com",
        "google",
        "gson",
        "JsonArray",
        "com",
        "google",
        "gson",
        "JsonElement",
        "com",
        "google",
        "gson",
        "JsonObject",
        "com",
        "google",
        "gson",
        "JsonParser",
        "org",
        "apache",
        "commons",
        "codec",
        "DecoderException",
        "org",
        "apache",
        "commons",
        "codec",
        "binary",
        "Hex",
        "java",
        "io",
        "ByteArrayOutputStream",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "methods",
        "name",
        "input",
        "output",
        "methods",
        "json",
        "abi",
        "jsonObject",
        "parse",
        "json",
        "getAsJsonObject",
        "methods",
        "jsonObject",
        "getAsJsonArray",
        "types",
        "jsonObject",
        "getAsJsonArray",
        "i",
        "i",
        "methods",
        "size",
        "i",
        "m",
        "jmethod",
        "methods",
        "get",
        "i",
        "getAsJsonObject",
        "m",
        "name",
        "jmethod",
        "get",
        "getAsString",
        "m",
        "input",
        "convertToList",
        "jmethod",
        "get",
        "getAsJsonArray",
        "types",
        "m",
        "output",
        "convertToList",
        "jmethod",
        "get",
        "getAsJsonArray",
        "types",
        "abi",
        "methods",
        "put",
        "m",
        "name",
        "m",
        "abi",
        "refTypes",
        "i",
        "i",
        "size",
        "i",
        "param",
        "get",
        "i",
        "getAsJsonObject",
        "param",
        "get",
        "typeId",
        "param",
        "get",
        "getAsInt",
        "typeId",
        "refTypes",
        "refTypes",
        "size",
        "typeId",
        "typeId",
        "refTypes",
        "get",
        "typeId",
        "getAsJsonObject",
        "add",
        "getFVMType",
        "refTypes",
        "refTypes",
        "codecType",
        "get",
        "getAsString",
        "codecType",
        "PrimitiveType",
        "isPrimitiveType",
        "codecType",
        "primitive",
        "get",
        "getAsString",
        "primitive",
        "PrimitiveType",
        "getPrimitiveType",
        "primitive",
        "fields",
        "get",
        "getAsJsonArray",
        "fields",
        "CompoundType",
        "getCompoundType",
        "codecType",
        "Tuple",
        "Struct",
        "fields",
        "refTypes",
        "UnfixedLengthList",
        "fields",
        "refTypes",
        "FixedLengthList",
        "arrLen",
        "get",
        "arrLen",
        "fields",
        "refTypes",
        "arrLen",
        "getAsInt",
        "methods",
        "methodName",
        "args",
        "buf",
        "codecWriter",
        "buf",
        "stringWriter",
        "stringWriter",
        "write",
        "codecWriter",
        "methodName",
        "e",
        "e",
        "getMessage",
        "methods",
        "containsKey",
        "methodName",
        "methodName",
        "method",
        "methods",
        "get",
        "methodName",
        "args",
        "size",
        "method",
        "input",
        "size",
        "method",
        "input",
        "size",
        "args",
        "size",
        "i",
        "i",
        "method",
        "input",
        "size",
        "i",
        "tp",
        "method",
        "input",
        "get",
        "i",
        "tp",
        "encode",
        "codecWriter",
        "args",
        "get",
        "i",
        "buf",
        "toByteArray",
        "payload",
        "methodName",
        "method",
        "getMethods",
        "get",
        "methodName",
        "method",
        "outputs",
        "method",
        "output",
        "outputs",
        "size",
        "payload",
        "payload",
        "length",
        "payload",
        "equals",
        "outputs",
        "size",
        "Hex",
        "decodeHex",
        "Utils",
        "deleteHexPre",
        "payload",
        "e",
        "e",
        "getMessage",
        "codecReader",
        "tp",
        "outputs",
        "get",
        "tp",
        "decode",
        "codecReader"
    ],
    "literals": [
        "\"methods\"",
        "\"types\"",
        "\"name\"",
        "\"input\"",
        "\"output\"",
        "\"type_id\"",
        "\"type_id\"",
        "\"refer to non-exist type-id in ABI file: \"",
        "\"illegal format without type_id.\"",
        "\"type\"",
        "\"illegal format without field 'type' in ABI file.\"",
        "\"primitive\"",
        "\"illegal format for primitive type without field 'primitive' in ABI file.\"",
        "\"fields\"",
        "\"illegal format for compound type without field 'fields' in ABI file.\"",
        "\"Map type is not supported yet.\"",
        "\"Tuple type is not supported yet.\"",
        "\"array_len\"",
        "\"illegal format for array type without field 'array_len' in ABI file.\"",
        "\"unsupported type.\"",
        "\"Internal error: \"",
        "\"ABI not contain method: \"",
        "\"Arguments size wrong, expect: \"",
        "\", but have: \"",
        "\"Method not existed.\"",
        "\"0x0\"",
        "\"Cannot parse result from a non-return method.\"",
        "\"Internal error: \"",
        "\"multiple return value is not supported yet.\""
    ],
    "variables": [
        "methods",
        "name",
        "input",
        "output",
        "bytes"
    ],
    "comments": [
        "it will be a compound type with field 'fields'",
        "TODO add more",
        "write method name.",
        "In fact, this exception will never happen.",
        "encode and write args.",
        "if it's a void return(nothing to decode)",
        "if the abi has 0 return but payload is not \"0x0\"",
        "remove appendix part."
    ],
    "docstrings": [
        "* read abi from json.\n     *\n     * @param json String\n     * @return FVMAbi",
        "* covert params to list.\n     *\n     * @param params   JsonArray\n     * @param refTypes JsonArray\n     * @return List[FVMType]",
        "* fvm abi encode.\n     *\n     * @param methodName String\n     * @param args       List[Object]\n     * @return byte[]",
        "* fvm abi decode.\n     *\n     * @param payload    String\n     * @param methodName String\n     * @return Object"
    ],
    "functions": [
        "FVMAbi",
        "FVMAbi",
        "fromJson",
        "convertToList",
        "FVMType",
        "getFVMType",
        "getMethods",
        "encode",
        "decode"
    ],
    "classes": [
        "FVMAbi",
        "Method"
    ]
}