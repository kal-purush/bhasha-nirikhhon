{
    "identifiers": [
        "os",
        "util",
        "util",
        "envProperty",
        "_options",
        "envProperty",
        "_options",
        "_options",
        "os",
        "key",
        "updateKey",
        "key",
        "normalizedKey",
        "resultKey",
        "resultKey",
        "key",
        "updateKey",
        "normalizedKey",
        "resultKey",
        "resultKey",
        "key",
        "key",
        "envProperty",
        "key",
        "key",
        "value",
        "receiver",
        "key",
        "value",
        "deleteKey",
        "value",
        "deleteKey",
        "value",
        "value",
        "value",
        "key",
        "deleteKey",
        "envProperty",
        "existKey",
        "envProperty",
        "existKey",
        "value",
        "receiver",
        "inspect",
        "util",
        "envProperty",
        "envProperty",
        "options",
        "EnvironmentPrivate",
        "options",
        "Proxy",
        "env",
        "target",
        "p",
        "attributes",
        "target",
        "envProperty",
        "p",
        "attributes",
        "target",
        "p",
        "target",
        "envProperty",
        "p",
        "target",
        "p",
        "p",
        "target",
        "p",
        "target",
        "p",
        "target",
        "p",
        "p",
        "target",
        "envProperty",
        "target",
        "p",
        "target",
        "p",
        "target",
        "p",
        "p",
        "target",
        "envProperty",
        "target",
        "p",
        "target",
        "p",
        "target",
        "target",
        "envProperty",
        "target",
        "p",
        "value",
        "receiver",
        "target",
        "p",
        "value",
        "receiver",
        "p",
        "key",
        "value",
        "p",
        "p",
        "EnvironmentUtils",
        "envs",
        "options",
        "EnvironmentUtils",
        "options",
        "env",
        "envs",
        "env",
        "env",
        "newEnv",
        "env",
        "newEnv",
        "envs",
        "EnvironmentUtils",
        "envs"
    ],
    "literals": [
        "'os'",
        "'util'",
        "'envProperty'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'win32'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'string'",
        "'string'",
        "''",
        "string",
        "string",
        "'string'",
        "'string'",
        "'string'",
        "string",
        "string"
    ],
    "variables": [
        "inspect",
        "envProperty",
        "normalizedKey",
        "resultKey",
        "deleteKey",
        "existKey",
        "env",
        "p",
        "key",
        "value",
        "newEnv"
    ],
    "comments": [
        "alias of NodeJS.ProcessEnv, Record<string, string | undefined> === Dict<string>",
        "Using envProperty symbol is to provide valid implemention for [inspect]()"
    ],
    "docstrings": [
        "* isWin32 should always preserved for easily running tests on\n     * different platform for both win32/non-win32",
        "* EnvironmentPrivate is proxied because we need\n * mantain compatiable with NodeJS.ProcessEnv.\n * For example, supporse we have a env named with `get`, if we using\n * typescript `Index Signatures`, then what's the result of env.get will have\n * two meaning:\n *   * call the function `get`\n *   * get the environment variable `get`\n * But for environment variable, access any member with `name` should return the expeted\n * environment variable for that  `name`"
    ],
    "functions": [
        "getKey",
        "get",
        "toString",
        "create",
        "createPreserveNull",
        "merge",
        "mergePreserveNull"
    ],
    "classes": [
        "EnvironmentPrivate",
        "EnvironmentUtils"
    ]
}