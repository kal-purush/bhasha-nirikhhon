{
    "identifiers": [
        "describe",
        "ethers",
        "expect",
        "SimpleWallet",
        "SimpleWallet__factory",
        "EntryPoint",
        "DepositPaymaster",
        "DepositPaymaster__factory",
        "TestOracle__factory",
        "TestCounter",
        "TestCounter__factory",
        "TestToken",
        "TestToken__factory",
        "AddressZero",
        "createWalletOwner",
        "deployEntryPoint",
        "FIVE_ETH",
        "ONE_ETH",
        "fillAndSign",
        "hexZeroPad",
        "parseEther",
        "describe",
        "ethers",
        "before",
        "entryPoint",
        "deployEntryPoint",
        "entryPointStatic",
        "entryPoint",
        "AddressZero",
        "paymaster",
        "DepositPaymaster__factory",
        "ethersSigner",
        "entryPoint",
        "paymaster",
        "parseEther",
        "token",
        "TestToken__factory",
        "ethersSigner",
        "TestOracle__factory",
        "ethersSigner",
        "paymaster",
        "token",
        "testOracle",
        "token",
        "ethersSigner",
        "FIVE_ETH",
        "token",
        "paymaster",
        "ethers",
        "describe",
        "before",
        "wallet",
        "SimpleWallet__factory",
        "ethersSigner",
        "entryPoint",
        "ethersSigner",
        "it",
        "paymaster",
        "token",
        "wallet",
        "expect",
        "paymaster",
        "token",
        "wallet",
        "it",
        "paymaster",
        "token",
        "AddressZero",
        "tx",
        "tx",
        "expect",
        "wallet",
        "paymaster",
        "paymasterWithdraw",
        "it",
        "paymaster",
        "tx",
        "tx",
        "paymaster",
        "token",
        "AddressZero",
        "tx",
        "tx",
        "expect",
        "wallet",
        "paymaster",
        "paymaster",
        "paymasterUnlock",
        "paymasterWithdraw",
        "it",
        "paymaster",
        "tx",
        "tx",
        "createWalletOwner",
        "paymaster",
        "token",
        "target",
        "tx",
        "tx",
        "wallet",
        "paymaster",
        "paymasterUnlock",
        "wallet",
        "paymaster",
        "paymasterWithdraw",
        "expect",
        "token",
        "target",
        "describe",
        "before",
        "walletOwner",
        "ethersSigner",
        "wallet",
        "SimpleWallet__factory",
        "ethersSigner",
        "entryPoint",
        "walletOwner",
        "it",
        "fillAndSign",
        "wallet",
        "paymaster",
        "ethersSigner",
        "entryPoint",
        "expect",
        "entryPointStatic",
        "userOp",
        "it",
        "fillAndSign",
        "wallet",
        "paymaster",
        "hexZeroPad",
        "ethersSigner",
        "entryPoint",
        "expect",
        "entryPointStatic",
        "userOp",
        "it",
        "fillAndSign",
        "wallet",
        "paymaster",
        "hexZeroPad",
        "token",
        "ethersSigner",
        "entryPoint",
        "expect",
        "entryPointStatic",
        "userOp",
        "it",
        "paymaster",
        "token",
        "wallet",
        "paymaster",
        "tx",
        "tx",
        "wallet",
        "paymaster",
        "paymasterUnlock",
        "fillAndSign",
        "wallet",
        "paymaster",
        "hexZeroPad",
        "token",
        "ethersSigner",
        "entryPoint",
        "expect",
        "entryPointStatic",
        "userOp",
        "it",
        "paymaster",
        "tx",
        "tx",
        "wallet",
        "paymaster",
        "paymasterLockTokenDeposit",
        "fillAndSign",
        "wallet",
        "paymaster",
        "hexZeroPad",
        "token",
        "ethersSigner",
        "entryPoint",
        "entryPointStatic",
        "userOp",
        "describe",
        "createWalletOwner",
        "before",
        "wallet",
        "SimpleWallet__factory",
        "ethersSigner",
        "entryPoint",
        "walletOwner",
        "counter",
        "TestCounter__factory",
        "ethersSigner",
        "counter",
        "tx",
        "tx",
        "callData",
        "wallet",
        "counter",
        "counterJustEmit",
        "tx",
        "tx",
        "paymaster",
        "token",
        "wallet",
        "ONE_ETH",
        "it",
        "createWalletOwner",
        "fillAndSign",
        "wallet",
        "paymaster",
        "hexZeroPad",
        "token",
        "walletOwner",
        "entryPoint",
        "entryPoint",
        "userOp",
        "beneficiary",
        "entryPoint",
        "entryPoint",
        "expect",
        "log",
        "expect",
        "counter",
        "counter",
        "expect",
        "ethers",
        "beneficiary",
        "it",
        "createWalletOwner",
        "parseEther",
        "token",
        "wallet",
        "initialTokens",
        "token",
        "paymaster",
        "ethers",
        "tx",
        "tx",
        "wallet",
        "token",
        "tokenApprovePaymaster",
        "tx",
        "tx",
        "fillAndSign",
        "wallet",
        "paymaster",
        "hexZeroPad",
        "token",
        "execApprove",
        "walletOwner",
        "entryPoint",
        "entryPoint",
        "userOp1",
        "AddressZero",
        "fillAndSign",
        "wallet",
        "paymaster",
        "hexZeroPad",
        "token",
        "walletOwner",
        "entryPoint",
        "entryPoint",
        "userOp",
        "beneficiary",
        "entryPoint",
        "entryPoint",
        "ethers",
        "expect",
        "log",
        "log",
        "expect",
        "ethers",
        "beneficiary",
        "charge",
        "counter",
        "counter",
        "expect",
        "targetLogs"
    ],
    "literals": [
        "'./aa.init'",
        "'mocha'",
        "\"hardhat\"",
        "\"chai\"",
        "\"../typechain\"",
        "\"./testutils\"",
        "\"./UserOp\"",
        "\"ethers/lib/utils\"",
        "\"DepositPaymaster\"",
        "'2'",
        "'deposit'",
        "'should deposit and read balance'",
        "'should fail to withdraw without unlock'",
        "'DepositPaymaster: must unlockTokenDeposit'",
        "'should fail to withdraw within the same block '",
        "'DepositPaymaster: must unlockTokenDeposit'",
        "'should succeed to withdraw after unlock'",
        "'#validatePaymasterUserOp'",
        "string",
        "'should fail if no token'",
        "'paymasterData must specify token'",
        "'should fail with wrong'",
        "'0x1234'",
        "'DepositPaymaster: unsupported token in paymasterData'",
        "'should reject if no deposit'",
        "'DepositPaymaster: deposit too low'",
        "'should reject if deposit is not locked'",
        "'not locked'",
        "'succeed with valid deposit'",
        "'#handleOps'",
        "string",
        "'should pay with deposit (and revert user\\'s call) if user can\\'t pay with tokens'",
        "'should pay with tokens if available'",
        "'1'"
    ],
    "variables": [
        "entryPoint",
        "entryPointStatic",
        "ethersSigner",
        "token",
        "paymaster",
        "testOracle",
        "wallet",
        "paymasterWithdraw",
        "paymasterUnlock",
        "paymasterWithdraw",
        "paymasterUnlock",
        "target",
        "paymasterWithdraw",
        "wallet",
        "gasPrice",
        "walletOwner",
        "userOp",
        "userOp",
        "userOp",
        "paymasterUnlock",
        "userOp",
        "paymasterLockTokenDeposit",
        "userOp",
        "wallet",
        "walletOwner",
        "counter",
        "callData",
        "counterJustEmit",
        "beneficiary",
        "userOp",
        "log",
        "beneficiary",
        "initialTokens",
        "tokenApprovePaymaster",
        "execApprove",
        "userOp1",
        "userOp",
        "log",
        "charge",
        "targetLogs"
    ],
    "comments": [
        "needed only if previous test did unlock.",
        "need to \"approve\" the paymaster to use the tokens. we issue a UserOp for that (which uses the deposit to execute)"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}