{
    "identifiers": [
        "com",
        "example",
        "examplemod",
        "net",
        "minecraft",
        "block",
        "Block",
        "net",
        "minecraft",
        "block",
        "Blocks",
        "net",
        "minecraftforge",
        "common",
        "MinecraftForge",
        "net",
        "minecraftforge",
        "RegistryEvent",
        "net",
        "minecraftforge",
        "eventbus",
        "api",
        "SubscribeEvent",
        "net",
        "minecraftforge",
        "fml",
        "InterModComms",
        "net",
        "minecraftforge",
        "fml",
        "common",
        "Mod",
        "net",
        "minecraftforge",
        "fml",
        "lifecycle",
        "FMLClientSetupEvent",
        "net",
        "minecraftforge",
        "fml",
        "lifecycle",
        "FMLCommonSetupEvent",
        "net",
        "minecraftforge",
        "fml",
        "lifecycle",
        "InterModEnqueueEvent",
        "net",
        "minecraftforge",
        "fml",
        "lifecycle",
        "InterModProcessEvent",
        "net",
        "minecraftforge",
        "fml",
        "server",
        "FMLServerStartingEvent",
        "net",
        "minecraftforge",
        "fml",
        "javafmlmod",
        "FMLJavaModLoadingContext",
        "org",
        "apache",
        "logging",
        "log4j",
        "LogManager",
        "org",
        "apache",
        "logging",
        "log4j",
        "Logger",
        "java",
        "util",
        "stream",
        "Collectors",
        "Mod",
        "LOGGER",
        "LogManager",
        "getLogger",
        "FMLJavaModLoadingContext",
        "get",
        "getModEventBus",
        "addListener",
        "setup",
        "FMLJavaModLoadingContext",
        "get",
        "getModEventBus",
        "addListener",
        "enqueueIMC",
        "FMLJavaModLoadingContext",
        "get",
        "getModEventBus",
        "addListener",
        "processIMC",
        "FMLJavaModLoadingContext",
        "get",
        "getModEventBus",
        "addListener",
        "doClientStuff",
        "MinecraftForge",
        "EVENT_BUS",
        "register",
        "LOGGER",
        "info",
        "LOGGER",
        "info",
        "Blocks",
        "DIRT",
        "getRegistryName",
        "LOGGER",
        "info",
        "getMinecraftSupplier",
        "get",
        "options",
        "InterModComms",
        "sendTo",
        "LOGGER",
        "info",
        "LOGGER",
        "info",
        "getIMCStream",
        "m",
        "m",
        "getMessageSupplier",
        "get",
        "collect",
        "Collectors",
        "toList",
        "SubscribeEvent",
        "LOGGER",
        "info",
        "Mod",
        "EventBusSubscriber",
        "bus",
        "Mod",
        "EventBusSubscriber",
        "Bus",
        "MOD",
        "SubscribeEvent",
        "blockRegistryEvent",
        "LOGGER",
        "info"
    ],
    "literals": [
        "\"examplemod\"",
        "\"HELLO FROM PREINIT\"",
        "\"DIRT BLOCK >> {}\"",
        "\"Got game settings {}\"",
        "\"examplemod\"",
        "\"helloworld\"",
        "\"Hello world from the MDK\"",
        "\"Hello world\"",
        "\"Got IMC {}\"",
        "\"HELLO from server starting\"",
        "\"HELLO from Register Block\""
    ],
    "variables": [],
    "comments": [
        "The value here should match an entry in the META-INF/mods.toml file",
        "Directly reference a log4j logger.",
        "Register the setup method for modloading",
        "Register the enqueueIMC method for modloading",
        "Register the processIMC method for modloading",
        "Register the doClientStuff method for modloading",
        "Register ourselves for server and other game events we are interested in",
        "some preinit code",
        "do something that can only be done on the client",
        "some example code to dispatch IMC to another mod",
        "some example code to receive and process InterModComms from other mods",
        "You can use SubscribeEvent and let the Event Bus discover methods to call",
        "do something when the server starts",
        "You can use EventBusSubscriber to automatically subscribe events on the contained class (this is subscribing to the MOD",
        "Event bus for receiving Registry Events)",
        "register a new block here"
    ],
    "docstrings": [],
    "functions": [
        "ExampleMod",
        "setup",
        "doClientStuff",
        "enqueueIMC",
        "processIMC",
        "onServerStarting",
        "onBlocksRegistry"
    ],
    "classes": [
        "ExampleMod",
        "RegistryEvents"
    ]
}