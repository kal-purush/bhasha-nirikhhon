{
    "identifiers": [
        "functools",
        "partial",
        "typing",
        "Any",
        "Sequence",
        "Tuple",
        "numpy",
        "np",
        "finetuner",
        "helper",
        "AnyDNN",
        "get_framework",
        "embed_model",
        "AnyDNN",
        "model_path",
        "input_shape",
        "Sequence",
        "opset_version",
        "input_type",
        "isinstance",
        "input_shape",
        "input_shape",
        "model_path",
        "endswith",
        "ValueError",
        "model_path",
        "get_framework",
        "embed_model",
        "fn",
        "partial",
        "_to_onnx_torch",
        "input_type",
        "input_type",
        "fn",
        "_to_onnx_keras",
        "_to_onnx_paddle",
        "_to_onnx_func",
        "embed_model",
        "model_path",
        "input_shape",
        "opset_version",
        "_check_onnx_model",
        "model_path",
        "model_path",
        "onnx",
        "onnx",
        "load",
        "model_path",
        "onnx",
        "checker",
        "check_model",
        "model",
        "embed_model",
        "AnyDNN",
        "model_path",
        "input_shape",
        "Tuple",
        "opset_version",
        "batch_size",
        "input_type",
        "torch",
        "next",
        "embed_model",
        "parameters",
        "device",
        "model_device",
        "embed_model",
        "to",
        "torch",
        "device",
        "torch",
        "float16",
        "torch",
        "float32",
        "torch",
        "float64",
        "input_type",
        "supported_types",
        "ValueError",
        "t",
        "t",
        "supported_types",
        "keys",
        "input_type",
        "torch",
        "randn",
        "batch_size",
        "input_shape",
        "requires_grad",
        "dtype",
        "supported_types",
        "input_type",
        "next",
        "embed_model",
        "parameters",
        "device",
        "x",
        "to",
        "model_device",
        "torch",
        "onnx",
        "embed_model",
        "x",
        "model_path",
        "do_constant_folding",
        "opset_version",
        "opset_version",
        "input_names",
        "output_names",
        "dynamic_axes",
        "embed_model",
        "AnyDNN",
        "model_path",
        "input_shape",
        "Tuple",
        "opset_version",
        "tf2onnx",
        "ImportError",
        "ModuleNotFoundError",
        "ModuleNotFoundError",
        "tensorflow",
        "tf",
        "input_shape",
        "tf2onnx",
        "convert",
        "from_keras",
        "embed_model",
        "input_signature",
        "tf",
        "TensorSpec",
        "shape",
        "opset",
        "opset_version",
        "output_path",
        "model_path",
        "embed_model",
        "AnyDNN",
        "model_path",
        "input_shape",
        "opset_version",
        "model_input_type",
        "model_path",
        "endswith",
        "model_path",
        "paddle",
        "paddle",
        "InputSpec",
        "input_shape",
        "InputSpec",
        "shape",
        "model_input_type",
        "paddle",
        "onnx",
        "embed_model",
        "model_path",
        "input_spec",
        "x_spec",
        "opset_version",
        "opset_version",
        "embed_model",
        "AnyDNN",
        "export_path",
        "input_shape",
        "Tuple",
        "onnxruntime",
        "get_framework",
        "embed_model",
        "array",
        "np",
        "ndarray",
        "Any",
        "fm",
        "torch",
        "torch",
        "tensor",
        "array",
        "fm",
        "tensorflow",
        "tf",
        "tf",
        "convert_to_tensor",
        "array",
        "paddle",
        "paddle",
        "Tensor",
        "array",
        "tensor",
        "Any",
        "np",
        "ndarray",
        "fm",
        "tensor",
        "detach",
        "cpu",
        "numpy",
        "tensor",
        "requires_grad",
        "tensor",
        "cpu",
        "numpy",
        "tensor",
        "numpy",
        "BATCH_SIZE",
        "input_shape",
        "np",
        "random",
        "rand",
        "shape",
        "astype",
        "np",
        "float32",
        "onnxruntime",
        "InferenceSession",
        "export_path",
        "session",
        "run",
        "session",
        "get_inputs",
        "name",
        "x",
        "_from_numpy",
        "x",
        "fm",
        "next",
        "embed_model",
        "parameters",
        "device",
        "x",
        "to",
        "model_device",
        "fm",
        "embed_model",
        "training",
        "embed_model",
        "eval",
        "_to_numpy",
        "embed_model",
        "x",
        "is_training_before",
        "embed_model",
        "train",
        "np",
        "testing",
        "assert_allclose",
        "y_original",
        "y_exported",
        "rtol",
        "atol"
    ],
    "literals": [
        "'float32'",
        "'.onnx'",
        "f'The `model_path` needs to end with `.onnx`, but was: {model_path}'",
        "'torch'",
        "'keras'",
        "'float32'",
        "\"cuda\"",
        "\"cuda\"",
        "'float16'",
        "'float32'",
        "'float64'",
        "f'The input_type should be one of: {[t for t in supported_types.keys()]} '",
        "f'but was: {input_type}'",
        "'input'",
        "'output'",
        "'input'",
        "'batch_size'",
        "'output'",
        "'batch_size'",
        "'Module tf2onnx not found, try \"pip install tf2onnx\"'",
        "'float32'",
        "'.onnx'",
        "'input'",
        "'torch'",
        "'keras'",
        "'torch'",
        "'torch'",
        "'torch'"
    ],
    "variables": [
        "input_shape",
        "fn",
        "_to_onnx_func",
        "_to_onnx_func",
        "_to_onnx_func",
        "_to_onnx_func",
        "model",
        "model_device",
        "embed_model",
        "supported_types",
        "x",
        "model_device",
        "x",
        "shape",
        "_",
        "model_path",
        "shape",
        "x_spec",
        "fm",
        "BATCH_SIZE",
        "shape",
        "x",
        "session",
        "y_exported",
        "x",
        "model_device",
        "x",
        "is_training_before",
        "is_training_before",
        "y_original"
    ],
    "comments": [
        "Call onnx conversion",
        "Set device to model device",
        "Removing onnx extension as paddle adds it automatically",
        "Create onnx session and and run onnx model inference",
        "Create framework-specific tensor",
        "Send test data to same device as model"
    ],
    "docstrings": [
        "\"\"\"Func that takes a model in PaddlePaddle, PyTorch or Keras,\n    and converts it to the ONNX format\n    :params embed_model: Model to be converted and stored in ONNX\n    :params model_path: Path to store ONNX model to\n    :params input_shape: Input shape of embedding model\n    :params opset_version: ONNX opset version in which to register\n    :params input_type: Input type for model tracing during export of\n      PyTorch-based models\n    \"\"\"",
        "\"\"\"Check an ONNX model\n    :params model_path: Path to ONNX model\n    \"\"\"",
        "\"\"\"Convert a PyTorch embedding model to the ONNX format\n    :params embed_model: Embedding model to register in ONNX\n    :params model_path: Patch where to register ONNX model to\n    :params input_shape: Embedding model input shape\n    :params batch_size: The batch size during export\n    :params opset_version: ONNX opset version in which to register\n    :params input_type: Input type for model tracing during export\n      of PyTorch-based models\n    \"\"\"",
        "\"\"\"Convert a Keras embedding model to the ONNX format\n    :params embed_model: Embedding model to register in ONNX\n    :params model_path: Patch where to register ONNX model to\n    :params input_shape: Embedding model input shape\n    :params opset_version: ONNX opset version in which to register\n    \"\"\"",
        "\"\"\"Convert a paddle embedding model to the ONNX format\n    :params embed_model: Embedding model to register in ONNX\n    :params model_path: Patch where to register ONNX model to\n    :params input_shape: Embedding model input shape\n    :params opset_version: ONNX opset version in which to register\n    :params model_input_type: Data type model expects\n    \"\"\"",
        "\"\"\"\n    Test an exported model by comparing the outputs of the original and the exported model\n    against the same input.\n    :params embed_model: The original embedding model. Can be either a PyTorch module,\n        a Keras model or a PaddlePaddle layer.\n    :params export_path: The path where the exported model is stored.\n    :params input_shape: The model's expected input shape, without the batch axis.\n    \"\"\""
    ],
    "functions": [
        "to_onnx",
        "_check_onnx_model",
        "_to_onnx_torch",
        "_to_onnx_keras",
        "_to_onnx_paddle",
        "validate_onnx_export",
        "_from_numpy",
        "_to_numpy"
    ],
    "classes": []
}