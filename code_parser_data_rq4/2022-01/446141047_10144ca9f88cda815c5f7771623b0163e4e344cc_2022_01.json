{
    "identifiers": [
        "com",
        "mylottery",
        "combinacao",
        "kElements",
        "nElements",
        "max",
        "n",
        "nElements",
        "kElementsPerCombination",
        "kElements",
        "kElementsPerCombination",
        "nElements",
        "nElements",
        "max",
        "nElements",
        "length",
        "n",
        "kElements",
        "n",
        "max",
        "countbits",
        "kElements",
        "n",
        "n",
        "max",
        "i",
        "c",
        "i",
        "c",
        "max",
        "i",
        "n",
        "i",
        "c",
        "i",
        "i",
        "c",
        "kElements",
        "kElements",
        "countbits",
        "result_index",
        "enter_index",
        "i",
        "combination",
        "getResultLength",
        "enter_index",
        "result_index",
        "i",
        "max",
        "i",
        "n",
        "i",
        "combination",
        "result_index",
        "nElements",
        "enter_index",
        "result_index",
        "enter_index",
        "i",
        "i",
        "n",
        "combination"
    ],
    "literals": [],
    "variables": [
        "kElements",
        "nElements",
        "max",
        "n",
        "i",
        "c",
        "result_index",
        "enter_index",
        "i"
    ],
    "comments": [],
    "docstrings": [
        "* This combination logic is credited to:\n * https://daemoniolabs.wordpress.com/2011/07/04/gerando-combinacoes-usando-java/amp/",
        "* if kElements is zero, then calculate all possible combinations",
        "* Returns true when there is at least one combination",
        "* Returns the quantity of active bits of n",
        "* Returns the length of each combination",
        "* Returns the next combination"
    ],
    "functions": [
        "Combination",
        "hasNext",
        "countbits",
        "getResultLength",
        "nextCombination"
    ],
    "classes": [
        "Combination"
    ]
}