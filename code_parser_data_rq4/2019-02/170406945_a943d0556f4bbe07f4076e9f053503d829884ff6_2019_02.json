{
    "identifiers": [
        "plants",
        "java",
        "util",
        "Scanner",
        "java",
        "util",
        "java",
        "util",
        "com",
        "mongodb",
        "BasicDBObject",
        "com",
        "mongodb",
        "DB",
        "com",
        "mongodb",
        "DBCollection",
        "com",
        "mongodb",
        "DBCursor",
        "com",
        "mongodb",
        "MongoClient",
        "com",
        "mongodb",
        "MongoException",
        "com",
        "mongodb",
        "util",
        "com",
        "mongodb",
        "DBObject",
        "com",
        "mongodb",
        "AggregationOutput",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "SuppressWarnings",
        "args",
        "mongoClntObj",
        "dbObj",
        "mongoClntObj",
        "getDB",
        "collectionObj",
        "dbObj",
        "getCollection",
        "dbObj",
        "collectionExists",
        "collectionObj",
        "drop",
        "collectionObj",
        "dbObj",
        "getCollection",
        "doInsertOperations",
        "collectionObj",
        "writeOutDocuments",
        "collectionObj",
        "findStringInArrayAndPrintWhatField",
        "collectionObj",
        "updateADoc_GivenFieldAndFieldValue_AndIncreaseAFieldByValueAndPrintAll",
        "collectionObj",
        "findDocs_use_gt_operator",
        "collectionObj",
        "mongoExObj",
        "mongoExObj",
        "printStackTrace",
        "sc",
        "props",
        "prop",
        "prop",
        "equals",
        "prop",
        "sc",
        "next",
        "props",
        "add",
        "prop",
        "prop",
        "collectionObj",
        "document1",
        "document2",
        "document3",
        "doc1",
        "parse",
        "document1",
        "collectionObj",
        "insert",
        "doc1",
        "doc2",
        "parse",
        "document2",
        "collectionObj",
        "insert",
        "doc2",
        "doc3",
        "parse",
        "document3",
        "collectionObj",
        "insert",
        "doc3",
        "collectionObj",
        "cursorObj",
        "collectionObj",
        "find",
        "cursorObj",
        "hasNext",
        "cursorObj",
        "next",
        "cursorObj",
        "close",
        "collectionObj",
        "arrayName",
        "term",
        "printWhatField",
        "term",
        "arrayName",
        "printWhatField",
        "inQuery",
        "add",
        "term",
        "inQuery",
        "put",
        "arrayName",
        "projection",
        "projection",
        "put",
        "projection",
        "put",
        "printWhatField",
        "cursor",
        "collectionObj",
        "find",
        "inQuery",
        "projection",
        "cursor",
        "hasNext",
        "cursor",
        "next",
        "collectionObj",
        "findWhichField",
        "withWhichValue",
        "whichFieldToUpdate",
        "whatIncreaseValue",
        "findWhichField",
        "withWhichValue",
        "whichFieldToUpdate",
        "valueOf",
        "whatIncreaseValue",
        "whichFieldToSearchObj",
        "whichFieldToSearchObj",
        "append",
        "findWhichField",
        "withWhichValue",
        "toUpdateObj",
        "append",
        "append",
        "whichFieldToUpdate",
        "whatIncreaseValue",
        "collectionObj",
        "update",
        "whichFieldToSearchObj",
        "toUpdateObj",
        "writeOutDocuments",
        "collectionObj",
        "collectionObj",
        "whichFieldStr",
        "greaterThanOrEqualToInt",
        "matchObj",
        "matchObj",
        "append",
        "whichFieldStr",
        "greaterThanOrEqualToInt",
        "projectDetailsObj",
        "projectDetailsObj",
        "append",
        "projectDetailsObj",
        "append",
        "projectDetailsObj",
        "append",
        "projectObj",
        "projectObj",
        "append",
        "projectDetailsObj",
        "output",
        "collectionObj",
        "aggregate",
        "Arrays",
        "asList",
        "matchObj",
        "projectObj",
        "result",
        "output",
        "results",
        "result"
    ],
    "literals": [
        "\"deprecation\"",
        "\"\\n Start \\n\"",
        "\"localhost\"",
        "\"plants_version1\"",
        "\"plants\"",
        "\"plants\"",
        "\"plants\"",
        "\"\\n dropped table and created it again.\"",
        "\"other_names\"",
        "\"gol_sonbol\"",
        "\"name\"",
        "\"name\"",
        "\"Hyacinth\"",
        "\"stars\"",
        "\"stars\"",
        "\"\\n done.\"",
        "\"Please enter the name of \"",
        "\"characteristics or properties you like to have \"",
        "\"or mention for each plant...\"",
        "\"end\"",
        "\"added \"",
        "\" to properties.\\n\"",
        "\"Type another property or type end to end adding properties.\"",
        "\"{\"",
        "\" \\\"name\\\" : \\\"Anthurium\\\", \"",
        "\" \\\"leaves_color\\\" : \\\"green\\\", \"",
        "\" \\\"other_names\\\" : [ \\\"gol_Sheypoori\\\" ], \"",
        "\" \\\"stars\\\": 1 }\"",
        "\"{\\\"name\\\" : \\\"Orchide\\\", \"",
        "\"\\\"leaves_colors\\\" : \\\"green\\\", \"",
        "\"\\\"other_names\\\" : [\t\\\"gol_orkide\\\" ], \"",
        "\" \\\"stars\\\": 1 }\"",
        "\"{\\\"name\\\" : \\\"Hyacinth\\\", \"",
        "\"\\\"leaves_colors\\\" : \\\"green\\\", \"",
        "\"\\\"other_names\\\" : [ \\\"gol_sonbol\\\" ], \"",
        "\" \\\"stars\\\":1 }\"",
        "\"\\n done inserting 3 documents.\"",
        "\"\\n print all documents...\"",
        "\"\\n find: \\\"\"",
        "\"\\\" in array: \\\"\"",
        "\"\\\"\"",
        "\" and print the document's \\\"\"",
        "\"\\\" field...\"",
        "\"$in\"",
        "\"_id\"",
        "\"\\n update the document(s), \"",
        "\"given a field name:\\n \"",
        "\"\\\"\"",
        "\"\\\"\"",
        "\" with value: \\\"\"",
        "\"\\\",\\n and update its field: \\\"\"",
        "\"\\\" with \"",
        "\"...\"",
        "\"$inc\"",
        "\"\\ngroup the documents with stars $gte 2. Show name and stars...\"",
        "\"$match\"",
        "\"$gte\"",
        "\"_id\"",
        "\"name\"",
        "\"stars\"",
        "\"$project\""
    ],
    "variables": [],
    "comments": [
        "Program by Bob L.",
        "Create a MongoDB database client and add some Plants information to it.",
        "Then do database operations as mentioned in the main method.",
        "Jar file to use is mongo-java-driver-3.5.0..jar",
        "More details at:",
        "https://mongodb.github.io/mongo-java-driver/",
        "To run:",
        "Have a custom directory or make one and call it some name, eg \"JavaFiles1\"",
        "Make a \"plants\" folder in it.",
        "Have this Java file in that \"plants\" folder,",
        "add the jar file in the root. i.e. in \"JavaFiles1\".",
        "Be in the root directory, i.e. \"JavaFiles1\"",
        "and using Cygwin, compile, then run. i.e.:",
        "$ javac -cp \"mongo-java-driver-3.5.0.jar\" plants/DisplayPlantsDetails.java",
        "java -cp \"mongo-java-driver-3.5.0.jar\" plants/DisplayPlantsDetails.java",
        "Result:",
        "afte running, you will see the results",
        "of all methods that were called in main method.",
        "4",
        "2",
        "3",
        "5",
        "1",
        "used upto version 3.5 of the driver.",
        "enterCharacteristics();",
        "Connecting To The MongoDb Server Listening On A Default Port (i.e. 27017).",
        "Get MongoDb Database. If The Database Doesn't Exists, MongoDb Will Automatically Create It For You",
        "Get MongoDb Collection. If The Collection Doesn't Exists, MongoDb Will Automatically Create It For You",
        "//With every run, drop the collection and reset.",
        "Drop collection from the MongoDB database.",
        "insert several documents into collection, pass on collectionObj:",
        "write out documents to terminal",
        "return name of all plants having category \"leaves\"",
        "give flower \"Hyacinth\" an increase in stars by 1 and print",
        "return all flowers having 2 or more stars. Print only name and star",
        "set array name and fields to query",
        "set the projection to use in finding",
        "point to result using DBCursor",
        "prepare object with $match:",
        "prepare object with $project:",
        "AggregationOutput output = collectionObj.aggregate ( Arrays.asList(matchObj) );",
        "Print out all objects:"
    ],
    "docstrings": [
        "* characteristics to mention for each plant.\n   * eg. plant leaves color, plant leaves size, flower shape, time purchased",
        "* Insert several documents into the MongoDB database\n   * @param collectionObj  the collection that we are adding documents to.",
        "*  Print out all documents in the collection\n   *  @param: collectionObj   the database collection object",
        "Given an array name in the collection, as well as a term to search for,\n   *     return all the resulting documents and print out only the name of the\n   *     field mentioned, i.e. printWhatField. This filed is used in the\n   *     projection part of the results that DBCursor will point to.\n   *  @param collectionObj\n   *  @param arrayName        the array name for the query to search in.\n   *  @param term             the term that should be searched.\n   *  @param printWhatField   the field used in the projection part of query.",
        "Update a document using the $inc keyword:\n   *  Get a field and value in order to find the right document.\n   *  Then update a field given its name and the value to increase by.\n   *  @param   collectionObj     The database collection object\n   *  @param   findWhichField    Field to search for with a given value.\n   *  @param   withWhichValue    Field value to search with the given field.\n   *  @param   whichFieldToUpdate Name of field to increase with a given int.\n   *  @param   whatIncreaseValue  The value to increase by.",
        "*  Aggregate documents using the $match and $project operators.\n   *  hard coded: not returning the \"_id\", returning \"name\" and \"stars\".\n   *  @param collectionObj  The database collection object\n   *  @param whichFieldStr  The field that the $gte operator should check.\n   *  @param greaterThanOrEqualToInt   $gte operator applies to this integer."
    ],
    "functions": [
        "main",
        "enterCharacteristics",
        "doInsertOperations",
        "writeOutDocuments",
        "findStringInArrayAndPrintWhatField",
        "updateADoc_GivenFieldAndFieldValue_AndIncreaseAFieldByValueAndPrintAll",
        "findDocs_use_gt_operator"
    ],
    "classes": [
        "DisplayPlantsDetails"
    ]
}