{
    "identifiers": [
        "navigator",
        "navigator",
        "navigator",
        "ieVersion",
        "ieVersion",
        "ieVersion",
        "ieVersion",
        "ieVersion",
        "FLOW_CONTROL_KEYWORDS",
        "C_KEYWORDS",
        "COMMON_KEYWORDS",
        "COMMON_KEYWORDS",
        "JAVA_KEYWORDS",
        "COMMON_KEYWORDS",
        "FLOW_CONTROL_KEYWORDS",
        "FLOW_CONTROL_KEYWORDS",
        "FLOW_CONTROL_KEYWORDS",
        "CPP_KEYWORDS",
        "CSHARP_KEYWORDS",
        "JSCRIPT_KEYWORDS",
        "PERL_KEYWORDS",
        "PYTHON_KEYWORDS",
        "RUBY_KEYWORDS",
        "SH_KEYWORDS",
        "i",
        "preceders",
        "i",
        "pattern",
        "preceders",
        "i",
        "pattern",
        "pattern",
        "pr_amp",
        "pr_lt",
        "pr_gt",
        "pr_quot",
        "pr_amp",
        "pr_lt",
        "pr_gt",
        "html",
        "html",
        "pos",
        "html",
        "pos",
        "pos",
        "html",
        "pos",
        "html",
        "pos",
        "end",
        "html",
        "pos",
        "end",
        "num",
        "num",
        "num",
        "num",
        "radix",
        "parseInt",
        "num",
        "radix",
        "isNaN",
        "codePoint",
        "html",
        "html",
        "pos",
        "codePoint",
        "html",
        "end",
        "html",
        "pr_ltEnt",
        "pr_gtEnt",
        "pr_aposEnt",
        "pr_quotEnt",
        "pr_nbspEnt",
        "pr_ampEnt",
        "node",
        "node",
        "node",
        "content",
        "node",
        "newlineRe",
        "content",
        "node",
        "whitespace",
        "node",
        "whitespace",
        "node",
        "whitespace",
        "whitespace",
        "node",
        "opt_sortAttrs",
        "node",
        "node",
        "name",
        "node",
        "attrs",
        "n",
        "opt_sortAttrs",
        "i",
        "sortedAttrs",
        "i",
        "attrs",
        "i",
        "sortedAttrs",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "attrs",
        "sortedAttrs",
        "i",
        "n",
        "i",
        "attrs",
        "i",
        "attr",
        "attr",
        "attribToHtml",
        "attr",
        "node",
        "child",
        "child",
        "child",
        "normalizedHtml",
        "child",
        "opt_sortAttrs",
        "node",
        "name",
        "name",
        "textToHtml",
        "node",
        "regexs",
        "regexs",
        "i",
        "n",
        "i",
        "regexs",
        "i",
        "regex",
        "ignoreCase",
        "regex",
        "needToFoldCase",
        "ignoreCase",
        "charsetPart",
        "charsetPart",
        "charsetPart",
        "charsetPart",
        "parseInt",
        "charsetPart",
        "charsetPart",
        "parseInt",
        "charsetPart",
        "charsetPart",
        "charCode",
        "charCode",
        "charCode",
        "charCode",
        "charCode",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "charSet",
        "charSet",
        "charSet",
        "charsetParts",
        "inverse",
        "charsetParts",
        "i",
        "n",
        "i",
        "charsetParts",
        "i",
        "p",
        "groups",
        "p",
        "decodeEscape",
        "p",
        "i",
        "n",
        "charsetParts",
        "i",
        "end",
        "decodeEscape",
        "charsetParts",
        "i",
        "i",
        "end",
        "start",
        "ranges",
        "start",
        "end",
        "end",
        "start",
        "end",
        "start",
        "ranges",
        "start",
        "end",
        "end",
        "start",
        "ranges",
        "start",
        "end",
        "ranges",
        "a",
        "b",
        "a",
        "b",
        "b",
        "a",
        "NaN",
        "NaN",
        "i",
        "ranges",
        "i",
        "ranges",
        "i",
        "lastRange",
        "lastRange",
        "lastRange",
        "consolidatedRanges",
        "lastRange",
        "inverse",
        "groups",
        "i",
        "consolidatedRanges",
        "i",
        "consolidatedRanges",
        "i",
        "encodeEscape",
        "encodeEscape",
        "regex",
        "regex",
        "parts",
        "i",
        "n",
        "i",
        "parts",
        "i",
        "p",
        "groupIndex",
        "p",
        "p",
        "decimalValue",
        "decimalValue",
        "groupIndex",
        "capturedGroups",
        "decimalValue",
        "i",
        "capturedGroups",
        "i",
        "capturedGroups",
        "i",
        "capturedGroups",
        "i",
        "capturedGroupIndex",
        "i",
        "n",
        "i",
        "parts",
        "i",
        "p",
        "groupIndex",
        "capturedGroups",
        "groupIndex",
        "parts",
        "i",
        "p",
        "p",
        "decimalValue",
        "decimalValue",
        "groupIndex",
        "parts",
        "i",
        "capturedGroups",
        "groupIndex",
        "i",
        "n",
        "i",
        "parts",
        "i",
        "parts",
        "i",
        "parts",
        "i",
        "regex",
        "needToFoldCase",
        "i",
        "n",
        "i",
        "parts",
        "i",
        "p",
        "p",
        "ch0",
        "parts",
        "i",
        "caseFoldCharset",
        "p",
        "ch0",
        "parts",
        "i",
        "p",
        "ch",
        "ch",
        "cc",
        "cc",
        "parts",
        "regexs",
        "i",
        "n",
        "i",
        "regexs",
        "i",
        "regex",
        "regex",
        "regex",
        "rewritten",
        "allowAnywhereFoldCaseAndRenumberGroups",
        "regex",
        "rewritten",
        "ignoreCase",
        "node",
        "PR_innerHtmlWorks",
        "testNode",
        "PR_innerHtmlWorks",
        "testNode",
        "PR_innerHtmlWorks",
        "node",
        "isRawContent",
        "node",
        "content",
        "textToHtml",
        "content",
        "isPreformatted",
        "node",
        "content",
        "content",
        "content",
        "content",
        "node",
        "child",
        "child",
        "child",
        "normalizedHtml",
        "child",
        "tabWidth",
        "plainText",
        "plainText",
        "i",
        "n",
        "i",
        "plainText",
        "i",
        "ch",
        "plainText",
        "pos",
        "i",
        "tabWidth",
        "charInLine",
        "tabWidth",
        "charInLine",
        "nSpaces",
        "nSpaces",
        "nSpaces",
        "SPACES",
        "SPACES",
        "nSpaces",
        "pos",
        "i",
        "charInLine",
        "charInLine",
        "plainText",
        "plainText",
        "pos",
        "s",
        "s",
        "pr_chunkPattern",
        "matches",
        "matches",
        "i",
        "n",
        "i",
        "matches",
        "i",
        "match",
        "match",
        "pr_commentPrefix",
        "match",
        "pr_cdataPrefix",
        "match",
        "sourceBuf",
        "match",
        "match",
        "sourceBufLen",
        "match",
        "pr_brPrefix",
        "match",
        "sourceBuf",
        "sourceBufLen",
        "match",
        "PR_NOCODE",
        "isNoCodeTag",
        "match",
        "match",
        "pr_tagNameRe",
        "j",
        "i",
        "j",
        "n",
        "j",
        "matches",
        "j",
        "pr_tagNameRe",
        "name2",
        "name2",
        "name",
        "name2",
        "depth",
        "depth",
        "j",
        "n",
        "extractedTags",
        "sourceBufLen",
        "matches",
        "i",
        "j",
        "i",
        "j",
        "extractedTags",
        "sourceBufLen",
        "match",
        "extractedTags",
        "sourceBufLen",
        "match",
        "htmlToText",
        "match",
        "sourceBuf",
        "literalText",
        "sourceBufLen",
        "literalText",
        "sourceBuf",
        "extractedTags",
        "tag",
        "tag",
        "basePos",
        "sourceCode",
        "langHandler",
        "sourceCode",
        "sourceCode",
        "basePos",
        "langHandler",
        "job",
        "job",
        "shortcutStylePatterns",
        "fallthroughStylePatterns",
        "shortcutStylePatterns",
        "fallthroughStylePatterns",
        "allPatterns",
        "i",
        "n",
        "i",
        "allPatterns",
        "i",
        "patternParts",
        "shortcutChars",
        "shortcutChars",
        "c",
        "shortcuts",
        "shortcutChars",
        "c",
        "patternParts",
        "patternParts",
        "regex",
        "regexKeys",
        "k",
        "allRegexs",
        "regex",
        "regexKeys",
        "k",
        "allRegexs",
        "tokenizer",
        "combinePrefixPatterns",
        "allRegexs",
        "fallthroughStylePatterns",
        "job",
        "job",
        "job",
        "basePos",
        "PR_PLAIN",
        "sourceCode",
        "tokenizer",
        "tokens",
        "ti",
        "nTokens",
        "ti",
        "tokens",
        "ti",
        "styleCache",
        "token",
        "style",
        "isEmbedded",
        "shortcuts",
        "token",
        "patternParts",
        "match",
        "token",
        "patternParts",
        "style",
        "patternParts",
        "i",
        "nPatterns",
        "i",
        "patternParts",
        "fallthroughStylePatterns",
        "i",
        "match",
        "token",
        "patternParts",
        "match",
        "style",
        "patternParts",
        "match",
        "style",
        "PR_PLAIN",
        "isEmbedded",
        "style",
        "style",
        "isEmbedded",
        "match",
        "match",
        "isEmbedded",
        "style",
        "PR_SOURCE",
        "isEmbedded",
        "styleCache",
        "token",
        "style",
        "pos",
        "token",
        "isEmbedded",
        "decorations",
        "basePos",
        "tokenStart",
        "style",
        "match",
        "token",
        "embeddedSource",
        "embeddedSourceStart",
        "embeddedSource",
        "match",
        "embeddedSourceEnd",
        "token",
        "match",
        "embeddedSourceStart",
        "embeddedSourceEnd",
        "embeddedSource",
        "style",
        "appendDecorations",
        "basePos",
        "tokenStart",
        "token",
        "embeddedSourceStart",
        "decorate",
        "decorations",
        "appendDecorations",
        "basePos",
        "tokenStart",
        "embeddedSourceStart",
        "embeddedSource",
        "langHandlerForExtension",
        "lang",
        "embeddedSource",
        "decorations",
        "appendDecorations",
        "basePos",
        "tokenStart",
        "embeddedSourceEnd",
        "token",
        "embeddedSourceEnd",
        "decorate",
        "decorations",
        "job",
        "decorations",
        "decorate",
        "options",
        "options",
        "shortcutStylePatterns",
        "PR_STRING",
        "options",
        "shortcutStylePatterns",
        "PR_STRING",
        "shortcutStylePatterns",
        "PR_STRING",
        "options",
        "fallthroughStylePatterns",
        "PR_STRING",
        "options",
        "options",
        "shortcutStylePatterns",
        "PR_COMMENT",
        "fallthroughStylePatterns",
        "PR_STRING",
        "shortcutStylePatterns",
        "PR_COMMENT",
        "options",
        "fallthroughStylePatterns",
        "PR_COMMENT",
        "fallthroughStylePatterns",
        "PR_COMMENT",
        "options",
        "fallthroughStylePatterns",
        "REGEXP_PRECEDER_PATTERN",
        "REGEX_LITERAL",
        "options",
        "keywords",
        "fallthroughStylePatterns",
        "PR_KEYWORD",
        "keywords",
        "shortcutStylePatterns",
        "PR_PLAIN",
        "fallthroughStylePatterns",
        "PR_LITERAL",
        "PR_TYPE",
        "PR_PLAIN",
        "PR_LITERAL",
        "PR_PUNCTUATION",
        "createSimpleLexer",
        "shortcutStylePatterns",
        "fallthroughStylePatterns",
        "sourceDecorator",
        "ALL_KEYWORDS",
        "job",
        "job",
        "job",
        "job",
        "makeTabExpander",
        "isIE678",
        "job",
        "isIE678",
        "isIE678",
        "job",
        "numberLines",
        "i",
        "i",
        "lineBreaks",
        "i",
        "lineBreakHtml",
        "i",
        "numberLines",
        "numberLines",
        "numberLines",
        "html",
        "lineNum",
        "lineNum",
        "html",
        "lineNum",
        "html",
        "lineBreaker",
        "lineBreaks",
        "lineNum",
        "openDecoration",
        "lb",
        "openDecoration",
        "lb",
        "lineBreaker",
        "lineBreakHtml",
        "sourceIdx",
        "sourceIdx",
        "outputIdx",
        "openDecoration",
        "openDecoration",
        "currentDecoration",
        "html",
        "openDecoration",
        "openDecoration",
        "currentDecoration",
        "openDecoration",
        "currentDecoration",
        "html",
        "openDecoration",
        "textToHtml",
        "tabExpander",
        "sourceText",
        "outputIdx",
        "sourceIdx",
        "lastWasSpace",
        "startOrSpaceRe",
        "adjacentSpaceRe",
        "lastWasSpace",
        "trailingSpaceRe",
        "htmlChunk",
        "html",
        "htmlChunk",
        "newlineRe",
        "lineBreaker",
        "outputIdx",
        "sourceIdx",
        "tagPos",
        "extractedTags",
        "decPos",
        "decorations",
        "outputTag",
        "extractedTags",
        "tagPos",
        "decorations",
        "decPos",
        "outputTag",
        "outputTag",
        "outputTag",
        "emitTextUpTo",
        "extractedTags",
        "tagPos",
        "openDecoration",
        "html",
        "openDecoration",
        "html",
        "extractedTags",
        "tagPos",
        "tagPos",
        "decPos",
        "decorations",
        "emitTextUpTo",
        "decorations",
        "decPos",
        "currentDecoration",
        "decorations",
        "decPos",
        "decPos",
        "emitTextUpTo",
        "sourceText",
        "openDecoration",
        "html",
        "numberLines",
        "html",
        "job",
        "html",
        "handler",
        "fileExtensions",
        "fileExtensions",
        "i",
        "fileExtensions",
        "i",
        "langHandlerRegistry",
        "ext",
        "langHandlerRegistry",
        "ext",
        "handler",
        "ext",
        "extension",
        "source",
        "extension",
        "langHandlerRegistry",
        "extension",
        "extension",
        "source",
        "langHandlerRegistry",
        "extension",
        "registerLangHandler",
        "decorateSource",
        "registerLangHandler",
        "createSimpleLexer",
        "PR_PLAIN",
        "PR_DECLARATION",
        "PR_COMMENT",
        "PR_PUNCTUATION",
        "registerLangHandler",
        "createSimpleLexer",
        "PR_PLAIN",
        "PR_ATTRIB_VALUE",
        "PR_TAG",
        "PR_ATTRIB_NAME",
        "PR_PUNCTUATION",
        "registerLangHandler",
        "createSimpleLexer",
        "PR_ATTRIB_VALUE",
        "registerLangHandler",
        "sourceDecorator",
        "CPP_KEYWORDS",
        "registerLangHandler",
        "sourceDecorator",
        "registerLangHandler",
        "sourceDecorator",
        "CSHARP_KEYWORDS",
        "registerLangHandler",
        "sourceDecorator",
        "JAVA_KEYWORDS",
        "registerLangHandler",
        "sourceDecorator",
        "SH_KEYWORDS",
        "registerLangHandler",
        "sourceDecorator",
        "PYTHON_KEYWORDS",
        "registerLangHandler",
        "sourceDecorator",
        "PERL_KEYWORDS",
        "registerLangHandler",
        "sourceDecorator",
        "RUBY_KEYWORDS",
        "registerLangHandler",
        "sourceDecorator",
        "JSCRIPT_KEYWORDS",
        "registerLangHandler",
        "createSimpleLexer",
        "PR_STRING",
        "job",
        "job",
        "job",
        "job",
        "sourceCodeHtml",
        "extractTags",
        "sourceCodeHtml",
        "sourceAndExtractedTags",
        "job",
        "source",
        "job",
        "job",
        "sourceAndExtractedTags",
        "langHandlerForExtension",
        "opt_langExtension",
        "source",
        "job",
        "recombineTagsAndDecorations",
        "job",
        "e",
        "e",
        "e",
        "e",
        "e",
        "sourceCodeHtml",
        "opt_langExtension",
        "sourceCodeHtml",
        "opt_langExtension",
        "applyDecorator",
        "job",
        "job",
        "opt_whenDone",
        "tn",
        "tn",
        "byTagName",
        "byTagName",
        "byTagName",
        "i",
        "codeSegments",
        "i",
        "codeSegments",
        "i",
        "j",
        "n",
        "j",
        "elements",
        "codeSegments",
        "i",
        "j",
        "codeSegments",
        "clock",
        "clock",
        "clock",
        "Infinity",
        "k",
        "elements",
        "clock",
        "endTime",
        "k",
        "elements",
        "k",
        "cs",
        "cs",
        "cs",
        "langExtension",
        "langExtension",
        "langExtension",
        "cs",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "p",
        "nested",
        "nested",
        "getInnerHtml",
        "cs",
        "content",
        "content",
        "prettyPrintingJob",
        "content",
        "langExtension",
        "cs",
        "applyDecorator",
        "prettyPrintingJob",
        "replaceWithPrettyPrintedHtml",
        "k",
        "elements",
        "setTimeout",
        "doWork",
        "opt_whenDone",
        "opt_whenDone",
        "prettyPrintingJob",
        "newContent",
        "prettyPrintingJob",
        "isRawContent",
        "cs",
        "cs",
        "newContent",
        "i",
        "cs",
        "i",
        "cs",
        "i",
        "a",
        "a",
        "aname",
        "pre",
        "a",
        "pre",
        "a",
        "a",
        "pre",
        "newContent",
        "cs",
        "pre",
        "cs",
        "cs",
        "pre",
        "doWork",
        "normalizedHtml",
        "prettyPrintOne",
        "prettyPrint",
        "combinePrefixPatterns",
        "createSimpleLexer",
        "registerLangHandler",
        "sourceDecorator",
        "PR_ATTRIB_NAME",
        "PR_ATTRIB_VALUE",
        "PR_COMMENT",
        "PR_DECLARATION",
        "PR_KEYWORD",
        "PR_LITERAL",
        "PR_NOCODE",
        "PR_PLAIN",
        "PR_PUNCTUATION",
        "PR_SOURCE",
        "PR_STRING",
        "PR_TAG",
        "PR_TYPE"
    ],
    "literals": [
        "'PR_SHOULD_USE_CONTINUATION'",
        "'PR_TAB_WIDTH'",
        "'PR_normalizedHtml'",
        "'PR'",
        "'prettyPrintOne'",
        "'prettyPrint'",
        "'_pr_isIE6'",
        "'_pr_isIE6'",
        "\"break continue do else for if return while \"",
        "\"auto case char const default \"",
        "\"double enum extern float goto int long register short signed sizeof \"",
        "\"static struct switch typedef union unsigned void volatile \"",
        "\"catch class delete false import \"",
        "\"new operator private protected public this throw true try typeof \"",
        "\"alignof align_union asm axiom bool \"",
        "\"concept concept_map const_cast constexpr decltype \"",
        "\"dynamic_cast explicit export friend inline late_check \"",
        "\"mutable namespace nullptr reinterpret_cast static_assert static_cast \"",
        "\"template typeid typename using virtual wchar_t where \"",
        "\"abstract boolean byte extends final finally implements import \"",
        "\"instanceof null native package strictfp super synchronized throws \"",
        "\"transient \"",
        "\"as base by checked decimal delegate descending event \"",
        "\"fixed foreach from group implicit in interface internal into is lock \"",
        "\"object out override orderby params partial readonly ref sbyte sealed \"",
        "\"stackalloc string select uint ulong unchecked unsafe ushort var \"",
        "\"debugger eval export function get null set undefined var with \"",
        "\"Infinity NaN \"",
        "\"caller delete die do dump elsif eval exit foreach for \"",
        "\"goto if import last local my next no our print package redo require \"",
        "\"sub undef unless until use wantarray while BEGIN END \"",
        "\"and as assert class def del \"",
        "\"elif except exec finally from global import in is lambda \"",
        "\"nonlocal not or pass print raise try with yield \"",
        "\"False True None \"",
        "\"alias and begin case class def\"",
        "\" defined elsif end ensure false in module next nil not or redo rescue \"",
        "\"retry self super then true undef unless until when yield BEGIN END \"",
        "\"case done elif esac eval fi \"",
        "\"function in local set then until \"",
        "'str'",
        "'kwd'",
        "'com'",
        "'typ'",
        "'lit'",
        "'pun'",
        "'pln'",
        "'tag'",
        "'dec'",
        "'src'",
        "'atn'",
        "'atv'",
        "'nocode'",
        "\"!\"",
        "\"!=\"",
        "\"!==\"",
        "\"#\"",
        "\"%\"",
        "\"%=\"",
        "\"&\"",
        "\"&&\"",
        "\"&&=\"",
        "\"&=\"",
        "\"(\"",
        "\"*\"",
        "\"*=\"",
        "\"+=\"",
        "\",\"",
        "\"-=\"",
        "\"->\"",
        "\"/\"",
        "\"/=\"",
        "\":\"",
        "\"::\"",
        "\";\"",
        "\"<\"",
        "\"<<\"",
        "\"<<=\"",
        "\"<=\"",
        "\"=\"",
        "\"==\"",
        "\"===\"",
        "\">\"",
        "\">=\"",
        "\">>\"",
        "\">>=\"",
        "\">>>\"",
        "\">>>=\"",
        "\"?\"",
        "\"@\"",
        "\"[\"",
        "\"^\"",
        "\"^=\"",
        "\"^^\"",
        "\"^^=\"",
        "\"{\"",
        "\"|\"",
        "\"|=\"",
        "\"||\"",
        "\"||=\"",
        "\"~\"",
        "\"break\"",
        "\"case\"",
        "\"continue\"",
        "\"delete\"",
        "\"do\"",
        "\"else\"",
        "\"finally\"",
        "\"instanceof\"",
        "\"return\"",
        "\"throw\"",
        "\"try\"",
        "\"typeof\"",
        "'(?:^^|[+-]'",
        "'|'",
        "'\\\\$1'",
        "')\\\\s*'",
        "'&amp;'",
        "'&lt;'",
        "'&gt;'",
        "'&quot;'",
        "'&amp;'",
        "'&lt;'",
        "'&gt;'",
        "'&'",
        "'&#'",
        "';'",
        "'x'",
        "'<'",
        "'>'",
        "\"'\"",
        "'\"'",
        "' '",
        "'&'",
        "'XMP'",
        "'PRE'",
        "''",
        "'pre'",
        "'<'",
        "' '",
        "'=\"'",
        "'\"'",
        "'>'",
        "'<\\/'",
        "'>'",
        "''",
        "'\\\\'",
        "'b'",
        "'t'",
        "'n'",
        "'v'",
        "'f'",
        "'r'",
        "'u'",
        "'x'",
        "'0'",
        "'1'",
        "'2'",
        "'3'",
        "'4'",
        "'5'",
        "'6'",
        "'7'",
        "'\\\\x0'",
        "'\\\\x'",
        "'\\\\'",
        "'-'",
        "'['",
        "']'",
        "'\\\\'",
        "'\\\\\\\\u[0-9A-Fa-f]{4}'",
        "'|\\\\\\\\x[0-9A-Fa-f]{2}'",
        "'|\\\\\\\\[0-3][0-7]{0,2}'",
        "'|\\\\\\\\[0-7]{1,2}'",
        "'|\\\\\\\\[\\\\s\\\\S]'",
        "'|-'",
        "'|[^-\\\\\\\\]'",
        "'g'",
        "'^'",
        "'\\\\B'",
        "'\\\\b'",
        "'\\\\D'",
        "'\\\\d'",
        "'\\\\S'",
        "'\\\\s'",
        "'\\\\W'",
        "'\\\\w'",
        "'-'",
        "'['",
        "'^'",
        "'-'",
        "']'",
        "''",
        "'(?:'",
        "'\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'",
        "'|\\\\\\\\u[A-Fa-f0-9]{4}'",
        "'|\\\\\\\\x[A-Fa-f0-9]{2}'",
        "'|\\\\\\\\[0-9]+'",
        "'|\\\\\\\\[^ux0-9]'",
        "'|\\\\(\\\\?[:!=]'",
        "'|[\\\\(\\\\)\\\\^]'",
        "'|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'",
        "')'",
        "'g'",
        "'('",
        "'\\\\'",
        "'('",
        "'(?:'",
        "'\\\\'",
        "'\\\\'",
        "'^'",
        "'^'",
        "''",
        "'['",
        "'\\\\'",
        "'['",
        "']'",
        "''",
        "''",
        "'(?:'",
        "')'",
        "'|'",
        "'gi'",
        "'g'",
        "'PRE'",
        "'<!DOCTYPE foo PUBLIC \"foo bar\">\\n<foo />'",
        "'$1'",
        "' '",
        "''",
        "'                '",
        "'\\t'",
        "'\\n'",
        "''",
        "'[^<]+'",
        "'|<\\!--[\\\\s\\\\S]*?--\\>'",
        "'|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>'",
        "'|<\\/?[a-zA-Z](?:[^>\\\"\\']|\\'[^\\']*\\'|\\\"[^\\\"]*\\\")*>'",
        "'|<'",
        "'g'",
        "'<'",
        "'\\n'",
        "'/'",
        "''",
        "''",
        "' $1=\"$2$3$4\"'",
        "''",
        "'string'",
        "'lang-'",
        "'string'",
        "'tripleQuotedStrings'",
        "'\\'\"'",
        "'multiLineStrings'",
        "'\\'\"`'",
        "'\"\\''",
        "'verbatimStrings'",
        "'hashComments'",
        "'cStyleComments'",
        "'#'",
        "'#'",
        "'cStyleComments'",
        "'regexLiterals'",
        "'/(?=[^/*])'",
        "'(?:[^/\\\\x5B\\\\x5C]'",
        "'|\\\\x5C[\\\\s\\\\S]'",
        "'|\\\\x5B(?:[^\\\\x5C\\\\x5D]|\\\\x5C[\\\\s\\\\S])*(?:\\\\x5D|$))+'",
        "'/'",
        "'lang-regex'",
        "'^'",
        "'('",
        "')'",
        "'keywords'",
        "''",
        "'^(?:'",
        "'|'",
        "')\\\\b'",
        "' \\r\\n\\t\\xA0'",
        "'^(?:'",
        "'0x[a-f0-9]+'",
        "'|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'",
        "'(?:e[+\\\\-]?\\\\d+)?'",
        "')'",
        "'[a-z]*'",
        "'i'",
        "'0123456789'",
        "'keywords'",
        "'hashComments'",
        "'cStyleComments'",
        "'multiLineStrings'",
        "'regexLiterals'",
        "'PR_TAB_WIDTH'",
        "'_pr_isIE6'",
        "'PRE'",
        "'&#160;\\r\\n'",
        "'&#160;<br>\\r'",
        "'&#160;\\r'",
        "'&#160;<br />'",
        "'<br />'",
        "'</li><li class=\"L'",
        "'\">'",
        "'<ol class=\"linenums\"><li class=\"L'",
        "'\"'",
        "' value=\"'",
        "'\"'",
        "'>'",
        "'</span>'",
        "'<span class=\"'",
        "'\">'",
        "'</span>'",
        "'<span class=\"'",
        "'\">'",
        "'$1&#160;'",
        "'</span>'",
        "'</span>'",
        "'</li></ol>'",
        "''",
        "'console'",
        "'warn'",
        "'cannot override language handler %s'",
        "'default-markup'",
        "'default-code'",
        "'default-code'",
        "'lang-'",
        "'lang-'",
        "'lang-'",
        "'lang-js'",
        "'lang-css'",
        "'lang-in.tag'",
        "'default-markup'",
        "'htm'",
        "'html'",
        "'mxml'",
        "'xhtml'",
        "'xml'",
        "'xsl'",
        "' \\t\\r\\n'",
        "'\\\"\\''",
        "'lang-uq.val'",
        "'lang-js'",
        "'lang-js'",
        "'lang-js'",
        "'lang-css'",
        "'lang-css'",
        "'lang-css'",
        "'in.tag'",
        "'uq.val'",
        "'keywords'",
        "'hashComments'",
        "'cStyleComments'",
        "'c'",
        "'cc'",
        "'cpp'",
        "'cxx'",
        "'cyc'",
        "'m'",
        "'keywords'",
        "'null true false'",
        "'json'",
        "'keywords'",
        "'hashComments'",
        "'cStyleComments'",
        "'verbatimStrings'",
        "'cs'",
        "'keywords'",
        "'cStyleComments'",
        "'java'",
        "'keywords'",
        "'hashComments'",
        "'multiLineStrings'",
        "'bsh'",
        "'csh'",
        "'sh'",
        "'keywords'",
        "'hashComments'",
        "'multiLineStrings'",
        "'tripleQuotedStrings'",
        "'cv'",
        "'py'",
        "'keywords'",
        "'hashComments'",
        "'multiLineStrings'",
        "'regexLiterals'",
        "'perl'",
        "'pl'",
        "'pm'",
        "'keywords'",
        "'hashComments'",
        "'multiLineStrings'",
        "'regexLiterals'",
        "'rb'",
        "'keywords'",
        "'cStyleComments'",
        "'regexLiterals'",
        "'js'",
        "'regex'",
        "'console'",
        "'log'",
        "'stack'",
        "'stack'",
        "'pre'",
        "'code'",
        "'xmp'",
        "'now'",
        "'now'",
        "'PR_SHOULD_USE_CONTINUATION'",
        "'source'",
        "'pre'",
        "'code'",
        "'xmp'",
        "'source'",
        "''",
        "'PRE'",
        "'class'",
        "'PR_normalizedHtml'",
        "'prettyPrintOne'",
        "'prettyPrint'",
        "'PR'",
        "'combinePrefixPatterns'",
        "'createSimpleLexer'",
        "'registerLangHandler'",
        "'sourceDecorator'",
        "'PR_ATTRIB_NAME'",
        "'PR_ATTRIB_VALUE'",
        "'PR_COMMENT'",
        "'PR_DECLARATION'",
        "'PR_KEYWORD'",
        "'PR_LITERAL'",
        "'PR_NOCODE'",
        "'PR_PLAIN'",
        "'PR_PUNCTUATION'",
        "'PR_SOURCE'",
        "'PR_STRING'",
        "'PR_TAG'",
        "'PR_TYPE'"
    ],
    "variables": [
        "ieVersion",
        "FLOW_CONTROL_KEYWORDS",
        "C_KEYWORDS",
        "COMMON_KEYWORDS",
        "CPP_KEYWORDS",
        "JAVA_KEYWORDS",
        "CSHARP_KEYWORDS",
        "JSCRIPT_KEYWORDS",
        "PERL_KEYWORDS",
        "PYTHON_KEYWORDS",
        "RUBY_KEYWORDS",
        "SH_KEYWORDS",
        "ALL_KEYWORDS",
        "PR_STRING",
        "PR_KEYWORD",
        "PR_COMMENT",
        "PR_TYPE",
        "PR_LITERAL",
        "PR_PUNCTUATION",
        "PR_PLAIN",
        "PR_TAG",
        "PR_DECLARATION",
        "PR_SOURCE",
        "PR_ATTRIB_NAME",
        "PR_ATTRIB_VALUE",
        "PR_NOCODE",
        "REGEXP_PRECEDER_PATTERN",
        "preceders",
        "pattern",
        "i",
        "pr_amp",
        "pr_lt",
        "pr_gt",
        "pr_quot",
        "pr_ltEnt",
        "pr_gtEnt",
        "pr_aposEnt",
        "pr_quotEnt",
        "pr_ampEnt",
        "pr_nbspEnt",
        "pos",
        "end",
        "num",
        "radix",
        "codePoint",
        "newlineRe",
        "whitespace",
        "name",
        "attrs",
        "n",
        "sortedAttrs",
        "i",
        "n",
        "i",
        "attr",
        "child",
        "capturedGroupIndex",
        "needToFoldCase",
        "ignoreCase",
        "i",
        "n",
        "regex",
        "ch",
        "charsetParts",
        "groups",
        "ranges",
        "inverse",
        "i",
        "n",
        "p",
        "start",
        "end",
        "consolidatedRanges",
        "lastRange",
        "i",
        "i",
        "parts",
        "n",
        "capturedGroups",
        "i",
        "groupIndex",
        "p",
        "decimalValue",
        "i",
        "i",
        "groupIndex",
        "p",
        "decimalValue",
        "i",
        "groupIndex",
        "i",
        "p",
        "ch0",
        "cc",
        "rewritten",
        "i",
        "n",
        "regex",
        "PR_innerHtmlWorks",
        "testNode",
        "content",
        "child",
        "SPACES",
        "charInLine",
        "pos",
        "i",
        "n",
        "ch",
        "nSpaces",
        "pr_chunkPattern",
        "pr_commentPrefix",
        "pr_cdataPrefix",
        "pr_brPrefix",
        "pr_tagNameRe",
        "matches",
        "sourceBuf",
        "sourceBufLen",
        "extractedTags",
        "i",
        "n",
        "match",
        "name",
        "depth",
        "j",
        "name2",
        "literalText",
        "job",
        "shortcuts",
        "tokenizer",
        "allPatterns",
        "allRegexs",
        "regexKeys",
        "i",
        "n",
        "patternParts",
        "shortcutChars",
        "c",
        "regex",
        "k",
        "nPatterns",
        "notWs",
        "decorate",
        "sourceCode",
        "basePos",
        "decorations",
        "pos",
        "tokens",
        "styleCache",
        "ti",
        "nTokens",
        "token",
        "style",
        "match",
        "isEmbedded",
        "patternParts",
        "i",
        "tokenStart",
        "pos",
        "embeddedSource",
        "embeddedSourceStart",
        "embeddedSourceEnd",
        "lang",
        "shortcutStylePatterns",
        "fallthroughStylePatterns",
        "REGEX_LITERAL",
        "keywords",
        "decorateSource",
        "sourceText",
        "extractedTags",
        "decorations",
        "html",
        "outputIdx",
        "openDecoration",
        "currentDecoration",
        "tagPos",
        "decPos",
        "tabExpander",
        "adjacentSpaceRe",
        "startOrSpaceRe",
        "newlineRe",
        "trailingSpaceRe",
        "lastWasSpace",
        "isIE678",
        "lineBreakHtml",
        "numberLines",
        "lineBreaker",
        "lineBreaks",
        "i",
        "lineNum",
        "lb",
        "htmlChunk",
        "outputTag",
        "langHandlerRegistry",
        "i",
        "ext",
        "sourceCodeHtml",
        "opt_langExtension",
        "sourceAndExtractedTags",
        "source",
        "job",
        "codeSegments",
        "elements",
        "i",
        "j",
        "n",
        "clock",
        "k",
        "prettyPrintingJob",
        "endTime",
        "cs",
        "langExtension",
        "nested",
        "p",
        "content",
        "newContent",
        "cs",
        "pre",
        "i",
        "a",
        "aname"
    ],
    "comments": [
        "Copyright (C) 2006 Google Inc.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "JSLint declarations",
        "global console, document, navigator, setTimeout, window",
        "the number of characters between tab columns",
        "Walks the DOM returning a properly escaped version of innerHTML.\n  * @param {Node} node\n  * @param {Array.<string>} out output buffer that receives chunks of HTML.",
        "Contains functions for creating and registering new language handlers.\n  * @type {Object}",
        "Pretty print a chunk of code.\n  *\n  * @param {string} sourceCodeHtml code as html\n  * @return {string} code as html, but prettier",
        "Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n  * {@code class=prettyprint} and prettify them.\n  * @param {Function?} opt_whenDone if specified, called when the last entry\n  *     has been finished.",
        "browser detection. @extern @returns false if not IE, otherwise the major version.",
        "Keyword lists for various languages.",
        "token style names.  correspond to css classes",
        "token style for a string literal",
        "token style for a keyword",
        "token style for a comment",
        "token style for a type",
        "token style for a literal value.  e.g. 1, null, true.",
        "token style for a punctuation string.",
        "token style for a punctuation string.",
        "token style for an sgml tag.",
        "token style for a markup declaration such as a DOCTYPE.",
        "token style for embedded source.",
        "token style for an sgml attribute name.",
        "token style for an sgml attribute value.",
        "A set of tokens that can precede a regular expression literal in\n    * javascript.\n    * http://www.mozilla.org/js/language/js20/rationale/syntax.html has the full\n    * list, but I've removed ones that might be problematic when seen in\n    * languages that don't support regular expression literals.\n    *\n    * <p>Specifically, I've removed any keywords that can't precede a regexp\n    * literal in a syntactically legal javascript program, and I've removed the\n    * \"in\" keyword since it's not a keyword in many languages, and might be used\n    * as a count of inches.\n    *\n    * <p>The link a above does not accurately describe EcmaScript rules since\n    * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n    * very well in practice.\n    *\n    * @private",
        "\"+\",",
        "\"-\",",
        "\".\", \"..\", \"...\", handled below",
        "handles =~ and !~",
        "matches at end, and matches empty string",
        "CAVEAT: this does not properly handle the case where a regular",
        "expression immediately follows another since a regular expression may",
        "have flags for case-sensitivity and the like.  Having regexp tokens",
        "adjacent is not valid in any language I'm aware of, so I'm punting.",
        "TODO: maybe style special characters inside a regexp as punctuation.",
        "Define regexps here so that the interpreter doesn't have to create an",
        "object each time the function containing them is called.",
        "The language spec requires a new object created even if you don't access",
        "the $1 members.",
        "like textToHtml but escapes double quotes to be attribute safe.",
        "escapest html special characters to html.",
        "unescapes html to plain text.",
        "Handle numeric entities specially.  We can't use functional substitution",
        "since that doesn't work in older versions of Safari.",
        "These should be rare since most browsers convert them to normal chars.",
        "is the given node's innerHTML normally unescaped?",
        "PRE means preformatted, and is a very common case, so don't create",
        "unnecessary computed style objects.",
        "Don't care",
        "For disconnected nodes, IE has no currentStyle.",
        "Firefox makes a best guess if node is disconnected whereas Safari",
        "returns the empty string.",
        "an element",
        "text",
        "If the range might intersect letters, then expand it.",
        "[[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]",
        "-> [[1, 12], [14, 14], [16, 17]]",
        "Split into character sets, escape sequences, punctuation strings",
        "like ('(', '(?:', ')', '^'), and runs of characters that do not",
        "include any of the above.",
        "a character set",
        "a unicode escape",
        "a hex escape",
        "a back-reference or octal escape",
        "other escape sequence",
        "start of a non-capturing group",
        "start/emd of a group, or line start",
        "run of other characters",
        "Maps captured group numbers to the number they will occupy in",
        "the output or to -1 if that has not been determined, or to",
        "undefined if they need not be capturing in the output.",
        "Walk over and identify back references to build the capturedGroups",
        "mapping.",
        "groups are 1-indexed, so max group index is count of '('",
        "Renumber groups and reduce capturing groups to non-capturing groups",
        "where possible.",
        "Remove any prefix anchors so that the output will match anywhere.",
        "^^ really does mean an anchored match though.",
        "Expand letters to groupts to handle mixing of case-sensitive and",
        "case-insensitive patterns if necessary.",
        "TODO: handle letters in numeric escapes.",
        "inner html is hopelessly broken in Safari 2.0.4 when the content is",
        "an html description of well formed XML and the containing tag is a PRE",
        "tag, so we detect that case and emulate innerHTML.",
        "XMP tags contain unescaped entities so require special handling.",
        "returns a function that expand tabs to spaces.  This function can be fed\n    * successive chunks of text, and will maintain its own internal state to\n    * keep track of how tabs are expanded.\n    * @return {function (string) : string} a function that takes\n    *   plain text and return the text with tabs expanded.\n    * @private",
        "walk over each character looking for tabs and newlines.",
        "On tabs, expand them.  On newlines, reset charInLine.",
        "Otherwise increment charInLine",
        "calculate how much space we need in front of this part",
        "nSpaces is the amount of padding -- the number of spaces needed",
        "to move us to the next column, where columns occur at factors of",
        "tabWidth.",
        "A run of characters other than '<'",
        "an HTML comment",
        "a CDATA section",
        "a probable tag that should not be highlighted",
        "A '<' that does not begin a larger chunk",
        "split markup into chunks of html tags (style null) and\n    * plain text (style {@link #PR_PLAIN}), converting tags which are\n    * significant for tokenization (<br>) into their textual equivalent.\n    *\n    * @param {string} s html where whitespace is considered significant.\n    * @return {Object} source code and extracted tags.\n    * @private",
        "since the pattern has the 'g' modifier and defines no capturing groups,",
        "this will return a list of all chunks which we then classify and wrap as",
        "PR_Tokens",
        "strip CDATA prefix and suffix.  Don't unescape since it's CDATA",
        "<br> tags are lexically significant so convert them to text.",
        "This is undone later.",
        "A <span class=\"nocode\"> will start a section that should be",
        "ignored.  Continue walking the list until we see a matching end",
        "tag.",
        "Ignore unclosed sections.",
        "True if the given tag contains a class attribute with the nocode class.",
        "First canonicalize the representation of attributes",
        "Then look for the attribute we want.",
        "Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (Object)} a\n    *   function that takes source code and returns a list of decorations.",
        "Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {Array.<number|string>}",
        "index into sourceCode",
        "make sure that we make progress",
        "Treat group 1 as an embedded block of source code.",
        "If embeddedSource can be blank, then it would match at the",
        "beginning which would cause us to infinitely recurse on the",
        "entire token, so we catch the right context in match[2].",
        "Decorate the left of the embedded source",
        "Decorate the embedded source",
        "Decorate the right of the embedded section",
        "returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (Object)} a function that examines the source code\n    *     in the input job and builds the decoration list.",
        "'''multi-line-string''', 'single-line-string', and double-quoted",
        "'multi-line-string', \"multi-line-string\"",
        "'single-line-string', \"single-line-string\"",
        "verbatim-string-literal production from the C# grammar.  See issue 93.",
        "Stop C preprocessor declarations at an unclosed open comment",
        "A regular expression literal starts with a slash that is",
        "not followed by * or / so that it is not confused with",
        "comments.",
        "and then contains any number of raw characters,",
        "escape sequences (\\x5C),",
        "or non-nesting character sets (\\x5B\\x5D);",
        "finally closed by a /.",
        "TODO(mikesamuel): recognize non-latin letters and numerals in idents",
        "A hex number",
        "or an octal or decimal number,",
        "possibly in scientific notation",
        "with an optional modifier like UL for unsigned long",
        "Breaks {@code job.source} around style boundaries in\n    * {@code job.decorations} while re-interleaving {@code job.extractedTags},\n    * and leaves the result in {@code job.prettyPrintedHtml}.\n    * @param {Object} job like {\n    *    source: {string} source as plain text,\n    *    extractedTags: {Array.<number|string>} extractedTags chunks of raw\n    *                   html preceded by their position in {@code job.source}\n    *                   in order\n    *    decorations: {Array.<number|string} an array of style classes preceded\n    *                 by the position at which they start in job.source in order\n    * }\n    * @private",
        "index past the last char in sourceText written to html",
        "index into extractedTags",
        "index into decorations",
        "the last text chunk emitted ended with a space.",
        "See bug 71 and http://stackoverflow.com/questions/136443/why-doesnt-ie7-",
        "Use line feeds instead of <br>s so that copying and pasting works",
        "on IE.",
        "Doing this on other browsers breaks lots of stuff since \\r\\n is",
        "treated as two newlines on Firefox.",
        "IE collapses multiple adjacent <br>s into 1 line break.",
        "Prefix every newline with '&#160;' to prevent such behavior.",
        "&nbsp; is the same as &#160; but works in XML as well as HTML.",
        "Look for a class like linenums or linenums:<n> where <n> is the 1-indexed",
        "number of the first line.",
        "Lines are 1-indexed",
        "If a decoration is open, we need to close it before closing a list-item",
        "and reopen it on the other side of the list item.",
        "A helper function that is responsible for opening sections of decoration",
        "and outputing properly escaped chunks of source",
        "Close the current decoration",
        "This interacts badly with some wikis which introduces paragraph tags",
        "into pre blocks for some strange reason.",
        "It's necessary for IE though which seems to lose the preformattedness",
        "of <pre> tags when their innerHTML is assigned.",
        "http://stud3.tuwien.ac.at/~e0226430/innerHtmlQuirk.html",
        "and it serves to undo the conversion of <br>s to newlines done in",
        "chunkify.",
        "Keep track of whether we need to escape space at the beginning of the",
        "next chunk.",
        "Determine if we're going to consume a tag this time around.  Otherwise",
        "we consume a decoration or exit.",
        "Pick one giving preference to extractedTags since we shouldn't open",
        "a new style that we're going to have to immediately close in order",
        "to output a tag.",
        "Consume either a decoration or a tag or exit.",
        "Close the current decoration",
        "Maps language-specific file extensions to handlers.",
        "Register a language handler for the given file extensions.\n    * @param {function (Object)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation.   The single parameter has the form\n    *      {@code {\n    *        source: {string} as plain text.\n    *        decorations: {Array.<number|string>} an array of style classes\n    *                     preceded by the position at which they start in\n    *                     job.source in order.\n    *                     The language handler should assigned this field.\n    *        basePos: {int} the position of source in the larger source chunk.\n    *                 All positions in the output decorations array are relative\n    *                 to the larger source chunk.\n    *      } }\n    * @param {Array.<string>} fileExtensions",
        "Treat it as markup if the first non whitespace character is a < and",
        "the last non-whitespace character is a >.",
        "Unescaped content in an unknown language",
        "Unescaped content in javascript.  (Or possibly vbscript).",
        "Contains unescaped stylesheet content",
        "Prepopulate output in case processing fails with an exception.",
        "Extract tags, and convert the source code to plain text.",
        "Plain text. @type {string}",
        "Even entries are positions in source in ascending order.  Odd entries\n        * are tags that were extracted at that position.\n        * @type {Array.<number|string>}",
        "Apply the appropriate language handler",
        "Integrate the decorations and tags back into the source code to produce",
        "a decorated html string which is left in job.prettyPrintedHtml.",
        "fetch a list of nodes to rewrite",
        "The loop is broken into a series of continuations to make sure that we",
        "don't make the browser unresponsive when rewriting a large page.",
        "ms",
        "[JACOCO] 'prettyprint' -> 'source'",
        "If the classes includes a language extensions, use it.",
        "Language extensions can be specified like",
        "<pre class=\"prettyprint lang-cpp\">",
        "the language extension \"cpp\" is used to find a language handler as",
        "passed to PR_registerLangHandler.",
        "make sure this is not nested in an already prettified element",
        "[JACOCO] 'prettyprint' -> 'source'",
        "fetch the content as a snippet of properly escaped HTML.",
        "Firefox adds newlines at the end.",
        "do the pretty printing",
        "finish up in a continuation",
        "push the prettified html back into the tag.",
        "just replace the old html with the new",
        "we need to change the tag to a <pre> since <xmp>s do not allow",
        "embedded tags such as the span tags used to attach styles to",
        "sections of source code.",
        "For IE 6",
        "remove the old"
    ],
    "docstrings": [
        "* @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n * <p>\n *\n * For a fairly comprehensive set of languages see the\n * <a href=\"http://google-code-prettify.googlecode.com/svn/trunk/README.html#langs\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console",
        "* Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.",
        "* A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.",
        "* Are newlines and adjacent spaces significant in the given node's innerHTML?",
        "* Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union o the sets o strings matched d by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.",
        "* Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.",
        "* Lexes job.source and produces an output array job.decorations of style\n     * classes preceded by the position at which they start in job.source in\n     * order.\n     *\n     * @param {Object} job an object like {@code\n     *    source: {string} sourceText plain text,\n     *    basePos: {int} position of job.source in the larger chunk of\n     *        sourceCode.\n     * }"
    ],
    "functions": [
        "attribToHtml",
        "textToHtml",
        "htmlToText",
        "isRawContent",
        "isPreformatted",
        "normalizedHtml",
        "combinePrefixPatterns",
        "decodeEscape",
        "encodeEscape",
        "caseFoldCharset",
        "allowAnywhereFoldCaseAndRenumberGroups",
        "getInnerHtml",
        "makeTabExpander",
        "extractTags",
        "isNoCodeTag",
        "appendDecorations",
        "createSimpleLexer",
        "sourceDecorator",
        "recombineTagsAndDecorations",
        "emitTextUpTo",
        "registerLangHandler",
        "langHandlerForExtension",
        "applyDecorator",
        "prettyPrintOne",
        "prettyPrint",
        "byTagName",
        "doWork",
        "replaceWithPrettyPrintedHtml"
    ],
    "classes": []
}