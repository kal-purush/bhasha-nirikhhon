{
    "identifiers": [
        "createHmac",
        "timingSafeEqual",
        "createServer",
        "IncomingMessage",
        "Server",
        "ServerResponse",
        "full",
        "Fetcher",
        "stringOfStream",
        "joinLogWithErrors",
        "LoggerWithErrors",
        "loggerWithErrors",
        "LogWithErrors",
        "currentTimeStamp",
        "parseJson",
        "Options",
        "RollingLogs",
        "sourceBranch",
        "setInterval",
        "key",
        "githubAccessToken",
        "dry",
        "fetcher",
        "options",
        "updateOneAtATime",
        "log",
        "timeStamp",
        "log",
        "log",
        "log",
        "timeStamp",
        "log",
        "log",
        "full",
        "dry",
        "timeStamp",
        "githubAccessToken",
        "fetcher",
        "options",
        "setInterval",
        "fullOne",
        "loggerWithErrors",
        "currentTimeStamp",
        "listenToGithub",
        "key",
        "fullOne",
        "rollingLogs",
        "logs",
        "rollingLogs",
        "joinLogWithErrors",
        "logs",
        "key",
        "onUpdate",
        "log",
        "timeStamp",
        "RollingLogs",
        "createServer",
        "req",
        "resp",
        "req",
        "receiveUpdate",
        "req",
        "resp",
        "server",
        "req",
        "resp",
        "loggerWithErrors",
        "currentTimeStamp",
        "log",
        "work",
        "rollingLogs",
        "logs",
        "writeLog",
        "logs",
        "logResult",
        "onError",
        "error",
        "rollingLogs",
        "logs",
        "writeLog",
        "logs",
        "logResult",
        "onError",
        "onError",
        "server",
        "stringOfStream",
        "req",
        "checkSignature",
        "key",
        "data",
        "req",
        "log",
        "log",
        "data",
        "sourceBranch",
        "parseJson",
        "data",
        "actualRef",
        "expectedRef",
        "respond",
        "onUpdate",
        "log",
        "timeStamp",
        "actualRef",
        "expectedRef",
        "respond",
        "text",
        "log",
        "text",
        "text",
        "resp",
        "text",
        "resp",
        "doOnce",
        "log",
        "timeStamp",
        "log",
        "timeStamp",
        "log",
        "timeStamp",
        "working",
        "anyUpdatesWhileWorking",
        "log",
        "working",
        "anyUpdatesWhileWorking",
        "work",
        "log",
        "working",
        "anyUpdatesWhileWorking",
        "doOnce",
        "log",
        "timeStamp",
        "working",
        "anyUpdatesWhileWorking",
        "key",
        "data",
        "headers",
        "key",
        "log",
        "headers",
        "expectedSignature",
        "key",
        "data",
        "signature",
        "stringEqualsConstantTime",
        "signature",
        "expected",
        "log",
        "expected",
        "signature",
        "log",
        "headers",
        "log",
        "data",
        "log",
        "actual",
        "expected",
        "Buffer",
        "expected",
        "actualBuffer",
        "actual",
        "timingSafeEqual",
        "actualBuffer",
        "Buffer",
        "expected",
        "key",
        "data",
        "createHmac",
        "key",
        "hmac",
        "data",
        "hmac",
        "digest"
    ],
    "literals": [
        "\"crypto\"",
        "\"http\"",
        "\"../full\"",
        "\"../util/io\"",
        "\"../util/logging\"",
        "\"../util/util\"",
        "\"./common\"",
        "\"./rolling-logs\"",
        "\"./settings\"",
        "\"timers\"",
        "string",
        "string",
        "\"\"",
        "\"\"",
        "# ${timeStamp}",
        "\"\"",
        "\"Starting full...\"",
        "string",
        "string",
        "\"Before starting server\"",
        "\"webhook-logs.md\"",
        "\"POST\"",
        "\"Before starting work\"",
        "\"Request to webhook\"",
        "Message from github: ${data.slice(0, 200)}...",
        "refs/heads/${sourceBranch}",
        "string",
        "\"Thanks for the update! Running full.\"",
        "Ignoring push to ${actualRef}, expected ${expectedRef}.",
        "string",
        "string",
        "string",
        "\"Not starting update, because already performing one.\"",
        "\"Starting update\"",
        "string",
        "string",
        "string",
        "\"x-hub-signature\"",
        "\"string\"",
        "Invalid request: expected ${expected}, got ${signature}",
        "Headers are: ${JSON.stringify(headers, undefined, 4)}",
        "Data is: ${data}",
        "\"\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"sha1\"",
        "\"hex\"",
        "sha1=${digest}"
    ],
    "variables": [
        "fullOne",
        "rollingLogs",
        "server",
        "log",
        "logResult",
        "timeStamp",
        "data",
        "expectedRef",
        "actualRef",
        "text",
        "working",
        "anyUpdatesWhileWorking",
        "signature",
        "expected",
        "actualBuffer",
        "hmac",
        "digest"
    ],
    "comments": [
        "@param onUpdate: returns a promise in case it may error. Server will shut down on errors.",
        "Don't respond",
        "This is for the benefit of `npm run make-[production-]server-run`. GitHub ignores this.",
        "Even if there are many changes to DefinitelyTyped in a row, we only perform one update at a time.",
        "tslint:disable-next-line strict-type-predicates (TODO: tslint bug)",
        "Use a constant-time compare to prevent timing attacks",
        "`timingSafeEqual` throws if they don't have the same length."
    ],
    "docstrings": [],
    "functions": [
        "webhookServer",
        "writeLog",
        "listenToGithub",
        "receiveUpdate",
        "onError",
        "work",
        "respond",
        "updateOneAtATime",
        "work",
        "checkSignature",
        "stringEqualsConstantTime",
        "expectedSignature"
    ],
    "classes": []
}