{
    "identifiers": [
        "$",
        "$",
        "$",
        "$container",
        "$container",
        "options",
        "oldIndex",
        "$container",
        "options",
        "currentIndex",
        "$container",
        "currentIndex",
        "$",
        "options",
        "$oldCurrent",
        "options",
        "slides",
        "currentIndex",
        "$newCurrent",
        "options",
        "$oldParents",
        "options",
        "$newParents",
        "options",
        "$",
        "$",
        "slides",
        "i",
        "el",
        "$all",
        "$all",
        "el",
        "$all",
        "options",
        "options",
        "options",
        "options",
        "options",
        "slides",
        "currentIndex",
        "options",
        "currentIndex",
        "slides",
        "currentIndex",
        "options",
        "currentIndex",
        "slides",
        "slides",
        "currentIndex",
        "options",
        "currentIndex",
        "$",
        "slides",
        "currentIndex",
        "i",
        "$slide",
        "$slide",
        "options",
        "currentIndex",
        "slides",
        "$",
        "slides",
        "currentIndex",
        "i",
        "$slide",
        "$slide",
        "options",
        "$",
        "options",
        "$",
        "$slide",
        "options",
        "$slide",
        "options",
        "isSub",
        "$slide",
        "options",
        "isSub",
        "$slide",
        "options",
        "$slide",
        "options",
        "isBefore",
        "isPrevious",
        "isNext",
        "isAfter",
        "$slide",
        "ariaHiddenValue",
        "updateContainerState",
        "updateChildCurrent",
        "removeOldSlideStates",
        "addNewSlideStates",
        "options",
        "setAriaHiddens",
        "elements",
        "$",
        "elements",
        "$",
        "elements",
        "i",
        "element",
        "slides",
        "$",
        "element",
        "$",
        "elements",
        "i",
        "element",
        "slides",
        "$",
        "element",
        "$document",
        "options",
        "options",
        "isNext",
        "isNext",
        "$",
        "options",
        "isPrev",
        "isPrev",
        "$",
        "options",
        "isNext",
        "methods",
        "isPrev",
        "methods",
        "$document",
        "editables",
        "stopPropagation",
        "$document",
        "editables",
        "stopPropagation",
        "options",
        "options",
        "direction",
        "direction",
        "$container",
        "$container",
        "startTouch",
        "startTouch",
        "$",
        "$container",
        "$container",
        "$",
        "i",
        "touch",
        "startTouch",
        "touch",
        "startTouch",
        "touch",
        "startTouch",
        "touch",
        "startTouch",
        "xDistance",
        "tolerance",
        "listenToHorizontal",
        "xDistance",
        "tolerance",
        "listenToHorizontal",
        "yDistance",
        "tolerance",
        "listenToVertical",
        "yDistance",
        "tolerance",
        "listenToVertical",
        "leftToRight",
        "topToBottom",
        "$",
        "startTouch",
        "rightToLeft",
        "bottomToTop",
        "$",
        "startTouch",
        "listenToVertical",
        "$container",
        "$container",
        "$",
        "i",
        "touch",
        "startTouch",
        "touch",
        "startTouch",
        "startTouch",
        "index",
        "index",
        "index",
        "index",
        "slides",
        "$",
        "events",
        "$",
        "$",
        "slides",
        "i",
        "$slide",
        "$slide",
        "id",
        "$",
        "i",
        "options",
        "$",
        "i",
        "$slide",
        "$slide",
        "$slide",
        "currentId",
        "currentId",
        "previouslyAssigned",
        "$slide",
        "options",
        "i",
        "$slide",
        "options",
        "i",
        "id",
        "$container",
        "options",
        "id",
        "id",
        "$container",
        "options",
        "id",
        "$fragmentLinks",
        "$",
        "$",
        "slides",
        "i",
        "$slide",
        "assignSlideId",
        "i",
        "$slide",
        "hash",
        "$slide",
        "hash",
        "setTimeout",
        "$",
        "i",
        "$fragmentLinks",
        "$fragmentLinks",
        "hash",
        "slides",
        "addContainerHashClass",
        "$",
        "to",
        "$",
        "to",
        "hash",
        "removeContainerHashClass",
        "$",
        "addContainerHashClass",
        "$",
        "to",
        "Modernizr",
        "hashPath",
        "opts",
        "createBeforeInitEvent",
        "$",
        "opts",
        "overrides",
        "arguments",
        "$",
        "overrides",
        "arguments",
        "options",
        "$",
        "$",
        "overrides",
        "slides",
        "currentIndex",
        "$container",
        "$",
        "options",
        "$container",
        "options",
        "initSlidesArray",
        "options",
        "beforeInitEvent",
        "slides",
        "initSlidesArray",
        "options",
        "setupHashBehaviors",
        "bindKeyEvents",
        "bindTouchEvents",
        "$container",
        "slides",
        "updateStates",
        "$container",
        "options",
        "$document",
        "events",
        "$document",
        "beforeInitEvent",
        "beforeInitEvent",
        "beforeInitEvent",
        "beforeInitEvent",
        "beforeInitEvent",
        "options",
        "indexOrId",
        "$",
        "events",
        "indexInBounds",
        "indexOrId",
        "index",
        "indexOrId",
        "indexOrId",
        "$",
        "slides",
        "i",
        "$slide",
        "$slide",
        "indexOrId",
        "index",
        "i",
        "index",
        "$document",
        "beforeChangeEvent",
        "currentIndex",
        "index",
        "beforeChangeEvent",
        "$document",
        "events",
        "currentIndex",
        "index",
        "changeHash",
        "currentIndex",
        "index",
        "currentIndex",
        "index",
        "updateStates",
        "methods",
        "currentIndex",
        "methods",
        "currentIndex",
        "index",
        "index",
        "index",
        "index",
        "currentIndex",
        "indexInBounds",
        "index",
        "slides",
        "index",
        "slides",
        "options",
        "slideSelector",
        "slideSelector",
        "$",
        "slides",
        "i",
        "$slide",
        "$slide",
        "subSelector",
        "topLevelSlides",
        "$slide",
        "topLevelSlides",
        "index",
        "index",
        "currentIndex",
        "index",
        "$",
        "targetIndex",
        "$targetSlide",
        "options",
        "$nesteds",
        "$",
        "nesteds",
        "slide",
        "i",
        "$",
        "slide",
        "$container",
        "options",
        "name",
        "method",
        "methods",
        "name",
        "method",
        "$",
        "method",
        "arg",
        "arguments",
        "methods",
        "method",
        "methods",
        "method",
        "args",
        "methods",
        "method",
        "arg",
        "$",
        "$document",
        "$",
        "$window",
        "goByHash",
        "goByHash",
        "$window",
        "options",
        "$container",
        "jQuery"
    ],
    "literals": [
        "'deck.beforeChange'",
        "'deck.change'",
        "'deck.beforeInit'",
        "'deck.init'",
        "'onSlide'",
        "'onSlide'",
        "'.'",
        "' '",
        "'.'",
        "'aria-hidden'",
        "'input'",
        "'textarea'",
        "'select'",
        "'button'",
        "'meter'",
        "'progress'",
        "'[contentEditable]'",
        "', '",
        "'keydown.deck'",
        "'keydown.deck'",
        "'keydown.deck'",
        "'keydown.deck'",
        "'touchstart.deck'",
        "'touchstart.deck'",
        "'touchmove.deck'",
        "'touchmove.deck'",
        "'prev'",
        "'next'",
        "'touchend.deck'",
        "'touchend.deck'",
        "'number'",
        "\"#\"",
        "'id'",
        "'go'",
        "'getContainer'",
        "'id'",
        "'deckAssignedId'",
        "'id'",
        "'deckAssignedId'",
        "'#'",
        "'id'",
        "'go'",
        "'a[href=\"'",
        "'\"]'",
        "'getSlide'",
        "'id'",
        "'#'",
        "'getSlide'",
        "'id'",
        "''",
        "'getSlide'",
        "'id'",
        "'getSlide'",
        "'id'",
        "\"\"",
        "'Something locked deck initialization\\\n              without releasing it before the timeout. Proceeding with\\\n              initialization anyway.'",
        "'string'",
        "'id'",
        "'undefined'",
        "'undefined'",
        "' '",
        "'getSlide'",
        "'deck-after'",
        "'deck-before'",
        "'deck-child-current'",
        "'deck-current'",
        "'deck-loading'",
        "'deck-next'",
        "'on-slide-'",
        "'deck-previous'",
        "'.deck-container'",
        "'.slide'",
        "'horizontal'",
        "'slide-'",
        "'html'",
        "'ready'",
        "'hashchange.deck'",
        "'load.deck'"
    ],
    "variables": [
        "slides",
        "currentIndex",
        "$container",
        "$fragmentLinks",
        "events",
        "options",
        "$document",
        "$window",
        "stopPropagation",
        "updateContainerState",
        "oldIndex",
        "updateChildCurrent",
        "$oldCurrent",
        "$oldParents",
        "$newCurrent",
        "$newParents",
        "removeOldSlideStates",
        "$all",
        "addNewSlideStates",
        "setAriaHiddens",
        "$slide",
        "isSub",
        "isBefore",
        "isPrevious",
        "isNext",
        "isAfter",
        "ariaHiddenValue",
        "updateStates",
        "initSlidesArray",
        "bindKeyEvents",
        "editables",
        "isNext",
        "isPrev",
        "bindTouchEvents",
        "startTouch",
        "direction",
        "tolerance",
        "listenToHorizontal",
        "listenToVertical",
        "xDistance",
        "yDistance",
        "leftToRight",
        "rightToLeft",
        "topToBottom",
        "bottomToTop",
        "indexInBounds",
        "createBeforeInitEvent",
        "goByHash",
        "id",
        "assignSlideId",
        "currentId",
        "previouslyAssigned",
        "removeContainerHashClass",
        "addContainerHashClass",
        "setupHashBehaviors",
        "hash",
        "changeHash",
        "hash",
        "hashPath",
        "methods",
        "beforeInitEvent",
        "overrides",
        "opts",
        "beforeChangeEvent",
        "index",
        "topLevelSlides",
        "slideSelector",
        "subSelector",
        "targetIndex",
        "$targetSlide",
        "$nesteds",
        "nesteds",
        "args"
    ],
    "comments": [
        "!\nDeck JS - deck.core\nCopyright (c) 2011-2014 Caleb Troughton\nDual licensed under the MIT license.\nhttps://github.com/imakewebthings/deck.js/blob/master/MIT-license.txt",
        "The deck.core module provides all the basic functionality for creating and\nmoving through a deck.  It does so by applying classes to indicate the state of\nthe deck and its slides, allowing CSS to take care of the visual representation\nof each state.  It also provides methods for navigating the deck and inspecting\nits state, as well as basic key bindings for going to the next and previous\nslides.  More functionality is provided by wholly separate extension modules\nthat use the API provided by core.",
        "This event fires at the beginning of a slide change, before the actual\n    change occurs. Its purpose is to give extension authors a way to prevent\n    the slide change from occuring. This is done by calling preventDefault\n    on the event object within this event. If that is done, the deck.change\n    event will never be fired and the slide will not change.",
        "This event fires whenever the current slide changes, whether by way of\n    next, prev, or go. The callback function is passed two parameters, from\n    and to, equal to the indices of the old slide and the new slide\n    respectively. If preventDefault is called on the event within this handler\n    the slide change does not occur.\n\n    $(document).bind('deck.change', function(event, from, to) {\n       alert('Moving from slide ' + from + ' to ' + to);\n    });",
        "This event fires at the beginning of deck initialization. This event makes\n    a good hook for preprocessing extensions looking to modify the DOM before\n    the deck is fully initialized. It is also possible to halt the deck.init\n    event from firing while you do things in beforeInit. This can be done by\n    calling lockInit on the event object passed to this event. The init can be\n    released by calling releaseInit.\n\n    $(document).bind('deck.beforeInit', function(event) {\n      event.lockInit(); // halts deck.init event\n      window.setTimeout(function() {\n        event.releaseInit(); // deck.init will now fire 2 seconds later\n      }, 2000);\n    });\n\n    The init event will be fired regardless of locks after\n    options.initLockTimeout milliseconds.",
        "This event fires at the end of deck initialization. Extensions should\n    implement any code that relies on user extensible options (key bindings,\n    element selectors, classes) within a handler for this event. Native\n    events associated with Deck JS should be scoped under a .deck event\n    namespace, as with the example below:\n\n    var $d = $(document);\n    $.deck.defaults.keys.myExtensionKeycode = 70; // 'h'\n    $d.bind('deck.init', function() {\n       $d.bind('keydown.deck', function(event) {\n          if (event.which === $.deck.getOptions().keys.myExtensionKeycode) {\n             // Rock out\n          }\n       });\n    });",
        "If we don't set these to 0 the container scrolls due to hashchange",
        "Methods exposed in the jQuery.deck namespace",
        "jQuery.deck(selector, options)\n\n    selector: string | jQuery | array\n    options: object, optional\n\n    Initializes the deck, using each element matched by selector as a slide.\n    May also be passed an array of string selectors or jQuery objects, in\n    which case each selector in the array is considered a slide. The second\n    parameter is an optional options object which will extend the default\n    values.\n\n    Users may also pass only an options object to init. In this case the slide\n    selector will be options.selectors.slides which defaults to .slide.\n\n    $.deck('.slide');\n\n    or\n\n    $.deck([\n       '#first-slide',\n       '#second-slide',\n       '#etc'\n    ]);",
        "Hide the deck while states are being applied to kill transitions",
        "populate the array of slides for pre-init",
        "Pre init event for preprocessing hooks",
        "re-populate the array of slides",
        "Show deck again now that slides are in place",
        "jQuery.deck('go', index)\n\n    index: integer | string\n\n    Moves to the slide at the specified index if index is a number. Index is\n    0-based, so $.deck('go', 0); will move to the first slide. If index is a\n    string this will move to the slide with the specified id. If index is out\n    of bounds or doesn't match a slide id the call is ignored.",
        "Number index, easy.",
        "Id string index, search for it and set integer index",
        "Trigger beforeChange. If nothing prevents the change, trigger\n      the slide change.",
        "jQuery.deck('next')\n\n    Moves to the next slide. If the last slide is already active, the call\n    is ignored.",
        "jQuery.deck('prev')\n\n    Moves to the previous slide. If the first slide is already active, the\n    call is ignored.",
        "jQuery.deck('getSlide', index)\n\n    index: integer, optional\n\n    Returns a jQuery object containing the slide at index. If index is not\n    specified, the current slide is returned.",
        "jQuery.deck('getSlides')\n\n    Returns all slides as an array of jQuery objects.",
        "jQuery.deck('getTopLevelSlides')\n\n    Returns all slides that are not subslides.",
        "jQuery.deck('getNestedSlides', index)\n\n    index: integer, optional\n\n    Returns all the nested slides of the current slide. If index is\n    specified it returns the nested slides of the slide at that index.\n    If there are no nested slides this will return an empty array.",
        "jQuery.deck('getContainer')\n\n    Returns a jQuery object containing the deck container as defined by the\n    container option.",
        "jQuery.deck('getOptions')\n\n    Returns the options object for the deck, including any overrides that\n    were defined at initialization.",
        "jQuery.deck('extend', name, method)\n\n    name: string\n    method: function\n\n    Adds method to the deck namespace with the key of name. This doesn’t\n    give access to any private member data — public methods must still be\n    used within method — but lets extension authors piggyback on the deck\n    namespace rather than pollute jQuery.\n\n    $.deck('extend', 'alert', function(msg) {\n       alert(msg);\n    });\n\n    // Alerts 'boom'\n    $.deck('alert', 'boom');",
        "jQuery extension",
        "The default settings object for a deck. All deck extensions should extend\n  this object to add defaults for any of their options.\n\n  options.classes.after\n    This class is added to all slides that appear after the 'next' slide.\n\n  options.classes.before\n    This class is added to all slides that appear before the 'previous'\n    slide.\n\n  options.classes.childCurrent\n    This class is added to all elements in the DOM tree between the\n    'current' slide and the deck container. For standard slides, this is\n    mostly seen and used for nested slides.\n\n  options.classes.current\n    This class is added to the current slide.\n\n  options.classes.loading\n    This class is applied to the deck container during loading phases and is\n    primarily used as a way to short circuit transitions between states\n    where such transitions are distracting or unwanted.  For example, this\n    class is applied during deck initialization and then removed to prevent\n    all the slides from appearing stacked and transitioning into place\n    on load.\n\n  options.classes.next\n    This class is added to the slide immediately following the 'current'\n    slide.\n\n  options.classes.onPrefix\n    This prefix, concatenated with the current slide index, is added to the\n    deck container as you change slides.\n\n  options.classes.previous\n    This class is added to the slide immediately preceding the 'current'\n    slide.\n\n  options.selectors.container\n    Elements matched by this CSS selector will be considered the deck\n    container. The deck container is used to scope certain states of the\n    deck, as with the onPrefix option, or with extensions such as deck.goto\n    and deck.menu.\n\n  options.selectors.slides\n    Elements matched by this selector make up the individual deck slides.\n    If a user chooses to pass the slide selector as the first argument to\n    $.deck() on initialization it does the same thing as passing in this\n    option and this option value will be set to the value of that parameter.\n\n  options.keys.next\n    The numeric keycode used to go to the next slide.\n\n  options.keys.previous\n    The numeric keycode used to go to the previous slide.\n\n  options.touch.swipeDirection\n    The direction swipes occur to cause slide changes. Can be 'horizontal',\n    'vertical', or 'both'. Any other value or a falsy value will disable\n    swipe gestures for navigation.\n\n  options.touch.swipeTolerance\n    The number of pixels the users finger must travel to produce a swipe\n    gesture.\n\n  options.initLockTimeout\n    The number of milliseconds the init event will wait for BeforeInit event\n    locks to be released before firing the init event regardless.\n\n  options.hashPrefix\n    Every slide that does not have an id is assigned one at initialization.\n    Assigned ids take the form of hashPrefix + slideIndex, e.g., slide-0,\n    slide-12, etc.\n\n  options.preventFragmentScroll\n    When deep linking to a hash of a nested slide, this scrolls the deck\n    container to the top, undoing the natural browser behavior of scrolling\n    to the document fragment on load.\n\n  options.setAriaHiddens\n    When set to true, deck.js will set aria hidden attributes for slides\n    that do not appear onscreen according to a typical heirarchical\n    deck structure. You may want to turn this off if you are using a theme\n    where slides besides the current slide are visible on screen and should\n    be accessible to screenreaders.",
        "enter, space, page down, right arrow, down arrow,",
        "backspace, page up, left arrow, up arrow"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}