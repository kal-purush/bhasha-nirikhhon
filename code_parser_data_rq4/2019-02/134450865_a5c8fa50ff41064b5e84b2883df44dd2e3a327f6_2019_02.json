{
    "identifiers": [
        "atexit",
        "logging",
        "threading",
        "six",
        "moves",
        "queue",
        "six",
        "moves",
        "opencensus",
        "common",
        "transports",
        "exporter",
        "grace_period",
        "_DEFAULT_GRACE_PERIOD",
        "max_batch_size",
        "_DEFAULT_MAX_BATCH_SIZE",
        "exporter",
        "grace_period",
        "max_batch_size",
        "queue",
        "threading",
        "Lock",
        "threading",
        "Event",
        "property",
        "_thread",
        "_thread",
        "is_alive",
        "_queue",
        "get",
        "len",
        "items",
        "_max_batch_size",
        "items",
        "append",
        "_queue",
        "get_nowait",
        "queue",
        "Empty",
        "items",
        "_get_items",
        "item",
        "items",
        "item",
        "_WORKER_TERMINATOR",
        "data",
        "extend",
        "item",
        "data",
        "exporter",
        "emit",
        "data",
        "logging",
        "exception",
        "exporter",
        "__class__",
        "len",
        "data",
        "_",
        "len",
        "items",
        "_queue",
        "task_done",
        "_event",
        "wait",
        "_WAIT_PERIOD",
        "quit_",
        "_lock",
        "is_alive",
        "threading",
        "target",
        "_thread_main",
        "name",
        "_WORKER_THREAD_NAME",
        "_thread",
        "_thread",
        "start",
        "atexit",
        "register",
        "_export_pending_data",
        "is_alive",
        "_lock",
        "_queue",
        "put_nowait",
        "_WORKER_TERMINATOR",
        "_thread",
        "join",
        "timeout",
        "_grace_period",
        "is_alive",
        "success",
        "is_alive",
        "_event",
        "stop",
        "data",
        "_queue",
        "put_nowait",
        "data",
        "_queue",
        "join",
        "Transport",
        "exporter",
        "grace_period",
        "_DEFAULT_GRACE_PERIOD",
        "max_batch_size",
        "_DEFAULT_MAX_BATCH_SIZE",
        "exporter",
        "_Worker",
        "exporter",
        "grace_period",
        "max_batch_size",
        "worker",
        "start",
        "data",
        "worker",
        "enqueue",
        "data",
        "worker",
        "flush"
    ],
    "literals": [
        "'opencensus.common.Worker'",
        "'%s failed to emit data.'",
        "'Dropping %s objects from queue.'"
    ],
    "variables": [
        "_DEFAULT_GRACE_PERIOD",
        "_DEFAULT_MAX_BATCH_SIZE",
        "_WAIT_PERIOD",
        "_WORKER_THREAD_NAME",
        "_WORKER_TERMINATOR",
        "exporter",
        "_grace_period",
        "_max_batch_size",
        "_queue",
        "_lock",
        "_event",
        "_thread",
        "items",
        "quit_",
        "items",
        "data",
        "quit_",
        "_thread",
        "daemon",
        "success",
        "_thread",
        "exporter",
        "worker"
    ],
    "comments": [
        "Copyright 2019 Google LLC",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Seconds",
        "Seconds",
        "Continue processing items, don't break, try to process",
        "all items we got back before quitting.",
        "self._event is set at exit, at which point we start draining the",
        "queue immediately. If self._event is unset, block for",
        "_WAIT_PERIOD between each batch of exports.",
        "Stop blocking between export batches"
    ],
    "docstrings": [
        "\"\"\"A background thread that exports batches of data.\n\n    :type exporter: :class:`~opencensus.trace.exporters.base.Exporter` or\n                    :class:`~opencensus.stats.exporters.base.StatsExporter`\n    :param exporter: Instances of Exporter objects. Defaults to\n                    :class:`.PrintExporter`. The rest options are\n                    :class:`.ZipkinExporter`, :class:`.StackdriverExporter`,\n                    :class:`.LoggingExporter`, :class:`.FileExporter`.\n\n    :type grace_period: float\n    :param grace_period: The amount of time to wait for pending data to\n                         be submitted when the process is shutting down.\n\n    :type max_batch_size: int\n    :param max_batch_size: The maximum number of items to send at a time\n                           in the background thread.\n    \"\"\"",
        "\"\"\"Returns True is the background thread is running.\"\"\"",
        "\"\"\"Get multiple items from a Queue.\n\n        Gets at least one (blocking) and at most ``max_batch_size`` items\n        (non-blocking) from a given Queue. Does not mark the items as done.\n\n        :rtype: Sequence\n        :returns: A sequence of items retrieved from the queue.\n        \"\"\"",
        "\"\"\"The entry point for the worker thread.\n\n        Pulls pending data off the queue and writes them in\n        batches to the specified tracing backend using the exporter.\n        \"\"\"",
        "\"\"\"Starts the background thread.\n\n        Additionally, this registers a handler for process exit to attempt\n        to send any pending data before shutdown.\n        \"\"\"",
        "\"\"\"Signals the background thread to stop.\n\n        This does not terminate the background thread. It simply queues the\n        stop signal. If the main process exits before the background thread\n        processes the stop signal, it will be terminated without finishing\n        work. The ``grace_period`` parameter will give the background\n        thread some time to finish processing before this function returns.\n\n        :rtype: bool\n        :returns: True if the thread terminated. False if the thread is still\n                  running.\n        \"\"\"",
        "\"\"\"Callback that attempts to send pending data before termination.\"\"\"",
        "\"\"\"Queues data to be written by the background thread.\"\"\"",
        "\"\"\"Submit any pending data.\"\"\"",
        "\"\"\"Asynchronous transport that uses a background thread.\n\n    :type exporter: :class:`~opencensus.trace.exporters.base.Exporter` or\n                    :class:`~opencensus.stats.exporters.base.StatsExporter`\n    :param exporter: Instances of Exporter objects. Defaults to\n                     :class:`.PrintExporter`. The rest options are\n                     :class:`.ZipkinExporter`, :class:`.StackdriverExporter`,\n                     :class:`.LoggingExporter`, :class:`.FileExporter`.\n\n    :type grace_period: float\n    :param grace_period: The amount of time to wait for pending data to\n                         be submitted when the process is shutting down.\n\n    :type max_batch_size: int\n    :param max_batch_size: The maximum number of items to send at a time\n                           in the background thread.\n    \"\"\"",
        "\"\"\"Put the trace/stats to be exported into queue.\"\"\"",
        "\"\"\"Submit any pending traces/stats.\"\"\""
    ],
    "functions": [
        "is_alive",
        "_get_items",
        "_thread_main",
        "start",
        "stop",
        "_export_pending_data",
        "enqueue",
        "flush",
        "flush"
    ],
    "classes": [
        "_Worker",
        "AsyncTransport"
    ]
}