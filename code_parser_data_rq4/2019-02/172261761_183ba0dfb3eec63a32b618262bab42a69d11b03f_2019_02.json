{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "line",
        "resolve",
        "reject",
        "line",
        "line",
        "neo4j",
        "session",
        "line",
        "line",
        "record",
        "session",
        "resolve",
        "reject",
        "manyLines",
        "resolve",
        "reject",
        "manyLines",
        "line",
        "authorsReferenced",
        "line",
        "line",
        "line",
        "line",
        "auth",
        "authorsReferenced",
        "line",
        "line",
        "query",
        "auth",
        "query",
        "query",
        "resolve",
        "neo4j",
        "session",
        "query",
        "record",
        "session",
        "resolve",
        "reject",
        "line",
        "parseInt",
        "id",
        "subreddit_id",
        "subreddit_id",
        "parseInt",
        "subreddit_id",
        "msg",
        "msg",
        "neo4j",
        "process",
        "err",
        "err",
        "lineStore",
        "chalk",
        "lineStore",
        "chunkSize",
        "index",
        "lineStoreChunked",
        "lineStoreChunked",
        "index",
        "lineChunk",
        "lineChunk",
        "lineStoreChunked",
        "index",
        "lastCheckpoint",
        "chalk",
        "elapsedTime",
        "chunkSize",
        "chalk",
        "index",
        "lineStoreChunked",
        "lastCheckpoint",
        "num",
        "resolve",
        "reject",
        "chalk",
        "num",
        "request",
        "num",
        "response",
        "response",
        "response",
        "reject",
        "zlib",
        "reject",
        "csv",
        "line",
        "lineStore",
        "line",
        "resolve",
        "lineStore",
        "reject",
        "e",
        "reject",
        "e",
        "arr",
        "chunkSize",
        "arr",
        "item",
        "index",
        "collect",
        "item",
        "index",
        "chunkSize",
        "returnArr",
        "collect",
        "collect",
        "returnArr",
        "num",
        "num",
        "numString",
        "numString",
        "numString",
        "numString",
        "Neo4j",
        "n"
    ],
    "literals": [
        "'zlib'",
        "'csv-parser'",
        "'request'",
        "'chalk'",
        "'./neo4j-connect'",
        "MERGE (sub:Subreddit { id: '${line.subreddit_id}' })\n      MERGE (auth:Author { name: '${line.author}' })\n      MERGE (auth)-[r:POSTS_TO]->(sub)",
        "'undefined'",
        "CREATE (\\`${line.author}\\`:Author { name: '${line.author}' })",
        "'undefined'",
        "",
        "''",
        "' '",
        "'t5_'",
        "''",
        "'Exiting process...'",
        "'error: 7864'",
        "\"start injest...\"",
        "''",
        "'ms per item '",
        "${index}/${lineStoreChunked.length}",
        "'pull file '",
        "https://storage.googleapis.com/reddit-guide-bucket/id_author_subreddit_id_2018_12_${this.padNumberWithZeros(num)}.csv",
        "'response'",
        "'exit on status code: '",
        "'error'",
        "'error'",
        "'data'",
        "'end'",
        "'error'",
        "'error: 597556'",
        "''",
        "'000000000000'",
        "'0'"
    ],
    "variables": [
        "zlib",
        "csv",
        "request",
        "chalk",
        "neo4j",
        "session",
        "query",
        "authorsReferenced",
        "auth",
        "session",
        "line",
        "id_base10",
        "subreddit_id_base10",
        "chunkSize",
        "lineStoreChunked",
        "lastCheckpoint",
        "lineChunk",
        "response",
        "elapsedTime",
        "lineStore",
        "returnArr",
        "collect",
        "numString",
        "n"
    ],
    "comments": [
        "update newest comment",
        "start neo4j session",
        "record.get('r')",
        "update newest comment",
        "if (line.id_base10 > this.newestComment) this.newestComment = line.id_base10",
        "subs",
        "let subsReferenced = Object.create(null)",
        "manyLines.forEach(line => {",
        "line.subreddit_id = line.subreddit_id.replace('t5_', '')",
        "if (typeof subsReferenced[line.subreddit_id] !== 'undefined') return false // already referenced",
        "let sub = `CREATE (\\`${line.subreddit_id}\\`:Subreddit { id: '${line.subreddit_id}' })`",
        "if (typeof this.subsCreated[line.subreddit_id] !== 'undefined') {",
        "sub = ``",
        "}",
        "subsReferenced[line.subreddit_id] = true",
        "this.subsCreated[line.subreddit_id] = true",
        "query.push(sub)",
        "})",
        "authors",
        "already referenced",
        "",
        "// relations",
        "manyLines.forEach(line => {",
        "let id = line.author + '-' + line.subreddit_id",
        "if (typeof this.relationsCreated[id] !== 'undefined') return false",
        "let relate = `CREATE (\\`${line.author}\\`)-[:POSTS_TO]->(\\`${line.subreddit_id}\\`)`",
        "this.relationsCreated[id] = true",
        "query.push(relate)",
        "})",
        "start neo4j session",
        "record.get('r')",
        "this code is run right before injestLine",
        "destructure",
        "convert comment id to base 10",
        "convert subreddit id to base 36",
        "convert base 36 subredit id to base 10",
        "bundle data baack together",
        "shutdown logic",
        "start recursive loop",
        "pull pages recursivly in sequence until the status code !== 200",
        "let chunkSize = 100",
        "let lineStoreChunked = this.splitArrayIntoChunks(lineStore, chunkSize)",
        "",
        "let lastCheckpoint = Date.now()",
        "for (var index in lineStoreChunked) {",
        "let lineChunk = lineStoreChunked[index]",
        "let response = await Promise.all(lineChunk.map(line => this.injestLine(this.formatLine(line))))",
        "lineChunk = null",
        "lineStoreChunked[index] = null",
        "let elapsedTime = Date.now() - lastCheckpoint",
        "console.log(chalk.cyan('' + (elapsedTime/chunkSize) + 'ms per item ') + chalk.magenta(`${index}/${lineStoreChunked.length}`))",
        "lastCheckpoint = Date.now()",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "injestLine",
        "injestManyLines",
        "formatLine",
        "exit",
        "run",
        "next",
        "getCommentFileByNumber",
        "splitArrayIntoChunks",
        "padNumberWithZeros"
    ],
    "classes": [
        "Neo4j"
    ]
}