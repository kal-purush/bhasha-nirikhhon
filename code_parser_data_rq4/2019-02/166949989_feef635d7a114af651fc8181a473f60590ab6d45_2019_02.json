{
    "identifiers": [
        "flask",
        "Flask",
        "jsonify",
        "request",
        "os",
        "h5py",
        "keras",
        "numpy",
        "np",
        "cv2",
        "app",
        "settings",
        "Flask",
        "app",
        "config",
        "app_settings",
        "model",
        "graph",
        "dog_names",
        "keras",
        "models",
        "load_model",
        "model",
        "_make_predict_function",
        "np",
        "load",
        "app",
        "route",
        "methods",
        "request",
        "method",
        "request",
        "files",
        "get",
        "img_file",
        "filename",
        "img_file",
        "content_type",
        "img_file",
        "save",
        "os",
        "path",
        "join",
        "app",
        "config",
        "img_name",
        "cv2",
        "imread",
        "os",
        "path",
        "join",
        "app",
        "config",
        "img_name",
        "X",
        "append",
        "cv2",
        "resize",
        "img",
        "image_resize",
        "image_resize",
        "np",
        "array",
        "X",
        "np",
        "float32",
        "model",
        "predict",
        "X",
        "verbose",
        "np",
        "argpartition",
        "prediction",
        "n",
        "n",
        "dog_names",
        "flat_indices",
        "n",
        "tolist",
        "flat_indices",
        "breed",
        "os",
        "remove",
        "os",
        "path",
        "join",
        "app",
        "config",
        "img_name",
        "breed",
        "img_name",
        "mimetype",
        "jsonify",
        "return_packet",
        "app",
        "route",
        "methods",
        "request",
        "method",
        "request",
        "get_json",
        "joblib",
        "load",
        "joblib",
        "load",
        "pd",
        "read_json",
        "data",
        "df",
        "drop",
        "axis",
        "df",
        "pd",
        "concat",
        "training_set",
        "df_training_set",
        "pd",
        "concat",
        "training_labels",
        "df_training_labels",
        "LinearRegression",
        "new_lin_reg",
        "fit",
        "df_training_set",
        "df_training_labels",
        "os",
        "remove",
        "os",
        "remove",
        "os",
        "remove",
        "joblib",
        "dump",
        "new_lin_reg",
        "joblib",
        "dump",
        "df_training_set",
        "joblib",
        "dump",
        "df_training_labels",
        "joblib",
        "load",
        "ValueError",
        "e",
        "jsonify",
        "format",
        "e",
        "jsonify",
        "app",
        "route",
        "methods",
        "request",
        "method",
        "joblib",
        "load",
        "joblib",
        "load",
        "joblib",
        "load",
        "jsonify",
        "lr",
        "score",
        "training_set",
        "labels",
        "lr",
        "coef_",
        "tolist",
        "lr",
        "intercept_",
        "ValueError",
        "e",
        "jsonify",
        "format",
        "e",
        "init",
        "app",
        "run",
        "debug"
    ],
    "literals": [
        "'UPLOAD_FOLDER'",
        "'UPLOAD_FOLDER'",
        "'app/dog_classifier.h5'",
        "'app/dog_labels.npy'",
        "\"/dog_classifier_api/predict\"",
        "'POST'",
        "'POST'",
        "'file'",
        "'UPLOAD_FOLDER'",
        "'UPLOAD_FOLDER'",
        "'UPLOAD_FOLDER'",
        "'dog'",
        "'file'",
        "'type'",
        "\"/retrain\"",
        "'POST'",
        "'POST'",
        "\"./training_data.pkl\"",
        "\"./training_labels.pkl\"",
        "\"Salary\"",
        "\"Salary\"",
        "\"./linear_regression_model.pkl\"",
        "\"./training_data.pkl\"",
        "\"./training_labels.pkl\"",
        "\"linear_regression_model.pkl\"",
        "\"training_data.pkl\"",
        "\"training_labels.pkl\"",
        "\"./linear_regression_model.pkl\"",
        "\"Error when retraining - {}\"",
        "\"Retrained model successfully.\"",
        "\"/currentDetails\"",
        "'GET'",
        "'GET'",
        "\"./linear_regression_model.pkl\"",
        "\"./training_data.pkl\"",
        "\"./training_labels.pkl\"",
        "\"score\"",
        "\"coefficients\"",
        "\"intercepts\"",
        "\"Error when getting details - {}\"",
        "'__main__'"
    ],
    "variables": [
        "app",
        "model",
        "dog_names",
        "img_file",
        "img_name",
        "mimetype",
        "image_resize",
        "X",
        "img",
        "X",
        "prediction",
        "n",
        "flat_indices",
        "breed",
        "return_packet",
        "data",
        "training_set",
        "training_labels",
        "df",
        "df_training_set",
        "df_training_labels",
        "df_training_set",
        "df_training_labels",
        "new_lin_reg",
        "lin_reg",
        "lr",
        "training_set",
        "labels"
    ],
    "comments": [
        "import pandas as pd",
        "from sklearn.externals import joblib",
        "from sklearn.linear_model import LinearRegression",
        "loads in the config settings variable",
        "def init():",
        "load the pre-trained Keras model",
        "h5f = h5py.File('dog_labels.h5', 'r')",
        "dog_names = h5f['dogs'][:]",
        "h5f.close()",
        "try:",
        "data = request.get_json()",
        "years_of_experience = float(data[\"yearsOfExperience\"])",
        "lin_reg = joblib.load(\"./linear_regression_model.pkl\")",
        "if not 'file' in request.files:",
        "return jsonify({'error': 'no file'})  #, 400",
        "Image info",
        "Return an error if not a valid mimetype",
        "if not mimetype in valid_mimetypes:",
        "return jsonify({'error': 'bad-type'})",
        "Write image to static directory and do the hot dog check",
        "Get top n=3 predictions",
        "flat_indices = numpy.argpartition(prediction.ravel(), n-1)[:n]",
        "for 2D array  row_indices, col_indices = numpy.unravel_index(flat_indices, prediction.shape)",
        "hot_dog_conf = rekognizer.get_confidence(img_name)",
        "Delete image when done with analysis",
        "is_hot_dog = 'false' if hot_dog_conf == 0 else 'true'",
        "return_packet = {",
        "'is_hot_dog': is_hot_dog,",
        "'confidence': hot_dog_conf",
        "}",
        "return jsonify(return_packet)",
        "breed = prediction[0][0]",
        "breed = 'Dog'",
        "return_packet = {",
        "'is_hot_dog': is_hot_dog,",
        "'confidence': hot_dog_conf",
        "}",
        "return jsonify(return_packet)",
        "except ValueError:",
        "return jsonify(\"Please enter a number.\")"
    ],
    "docstrings": [],
    "functions": [
        "predict",
        "retrain",
        "current_details"
    ],
    "classes": []
}