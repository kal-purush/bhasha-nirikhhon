{
    "identifiers": [
        "org",
        "apache",
        "commons",
        "crypto",
        "jna",
        "java",
        "nio",
        "ByteBuffer",
        "com",
        "sun",
        "jna",
        "Native",
        "com",
        "sun",
        "jna",
        "NativeLong",
        "com",
        "sun",
        "jna",
        "ptr",
        "PointerByReference",
        "INIT_OK",
        "INIT_ERROR",
        "ok",
        "thrown",
        "Native",
        "register",
        "ok",
        "e",
        "thrown",
        "e",
        "e",
        "thrown",
        "e",
        "INIT_OK",
        "ok",
        "INIT_ERROR",
        "thrown",
        "err",
        "null_",
        "p",
        "c",
        "pad",
        "ctx",
        "cipher",
        "impl",
        "key",
        "iv",
        "enc",
        "ctx",
        "bout",
        "outl",
        "inl",
        "ctx",
        "bout",
        "outl",
        "c",
        "c",
        "buf",
        "num",
        "e",
        "e",
        "e",
        "e",
        "flags",
        "id"
    ],
    "literals": [
        "\"crypto\""
    ],
    "variables": [
        "INIT_OK",
        "INIT_ERROR"
    ],
    "comments": [
        "Random generator"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @return OPENSSL_VERSION_NUMBER which is a numeric release version identifier",
        "* Retrieves version/build information about OpenSSL library.\n     *\n     * @param type\n     *            type can be SSLEAY_VERSION, SSLEAY_CFLAGS, SSLEAY_BUILT_ON...\n     * @return A pointer to a constant string describing the version of the OpenSSL library or\n     *         giving information about the library build.",
        "* Registers the error strings for all libcrypto functions.",
        "* @return the earliest error code from the thread's error queue without modifying it.",
        "* Generates a human-readable string representing the error code e.\n     * \n     * @see <a>https://www.openssl.org/docs/manmaster/crypto/ERR_error_string.html</a>\n     *\n     * @param err\n     *            the error code\n     * @param null_\n     *            buf is NULL, the error string is placed in a static buffer\n     * @return the human-readable error messages.",
        "* Creates a cipher context.\n     *\n     * @return a pointer to a newly created EVP_CIPHER_CTX for success and NULL for failure.",
        "* EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset\n     * \n     * @param p\n     *            cipher context",
        "* Enables or disables padding\n     * \n     * @param c\n     *            cipher context\n     * @param pad\n     *            If the pad parameter is zero then no padding is performed\n     * @return always returns 1",
        "* @return an openssl AES evp cipher instance with a 128-bit key CBC mode",
        "* @return an openssl AES evp cipher instance with a 128-bit key CTR mode",
        "* @return an openssl AES evp cipher instance with a 192-bit key CBC mode",
        "* @return an openssl AES evp cipher instance with a 192-bit key CTR mode",
        "* @return an openssl AES evp cipher instance with a 256-bit key CBC mode",
        "* @return an openssl AES evp cipher instance with a 256-bit key CTR mode",
        "* Init a cipher.\n     * \n     * @param ctx\n     *            cipher context\n     * @param cipher\n     *            evp cipher instance\n     * @param impl\n     *            engine\n     * @param key\n     *            key\n     * @param iv\n     *            iv\n     * @param enc\n     *            1 for encryption, 0 for decryption\n     * @return 1 for success and 0 for failure.",
        "* Continues a multiple-part encryption/decryption operation.\n     *\n     * @param ctx\n     *            cipher context\n     * @param bout\n     *            output byte buffer\n     * @param outl\n     *            output length\n     * @param in\n     *            input byte buffer\n     * @param inl\n     *            input length\n     * @return 1 for success and 0 for failure.",
        "* Finishes a multiple-part operation.\n     *\n     * @param ctx\n     *            cipher context\n     * @param bout\n     *            output byte buffer\n     * @param outl\n     *            output length\n     * @return 1 for success and 0 for failure.",
        "* Clears all information from a cipher context and free up any allocated memory associate with\n     * it, including ctx itself.\n     * \n     * @param c\n     *            openssl evp cipher",
        "* Clears all information from a cipher context and free up any allocated * memory associate\n     * with it.\n     * \n     * @param c\n     *            openssl evp cipher",
        "* OpenSSL uses for random number generation\n     * \n     * @return pointers to the respective methods",
        "* OpenSSL uses for random number generation.\n     * \n     * @return pointers to the respective methods",
        "* Generates random data\n     * \n     * @param buf\n     *            the bytes for generated random.\n     * @param num\n     *            buffer length\n     * @return 1 on success, 0 otherwise.",
        "* Releases all functional references.\n     *\n     * @param e\n     *            engine reference.\n     * @return 0 on success, 1 otherwise.",
        "* Frees the structural reference\n     * \n     * @param e\n     *            engine reference.\n     * @return 0 on success, 1 otherwise.",
        "* Cleanups before program exit, it will avoid memory leaks.\n     * \n     * @return 0 on success, 1 otherwise.",
        "* Obtains a functional reference from an existing structural reference.\n     * \n     * @param e\n     *            engine reference\n     * @return zero if the ENGINE was not already operational and couldn't be successfully\n     *         initialised",
        "* Sets the engine as the default for random number generation.\n     * \n     * @param e\n     *            engine reference\n     * @param flags\n     *            ENGINE_METHOD_RAND\n     * @return zero if failed.",
        "* Gets engine by id\n     * \n     * @param id\n     *            engine id\n     * @return engine instance",
        "* Initializes the engine."
    ],
    "functions": [
        "NativeLong",
        "SSLeay",
        "SSLeay_version",
        "ERR_load_crypto_strings",
        "NativeLong",
        "ERR_peek_error",
        "ERR_error_string",
        "PointerByReference",
        "EVP_CIPHER_CTX_new",
        "EVP_CIPHER_CTX_init",
        "EVP_CIPHER_CTX_set_padding",
        "PointerByReference",
        "EVP_aes_128_cbc",
        "PointerByReference",
        "EVP_aes_128_ctr",
        "PointerByReference",
        "EVP_aes_192_cbc",
        "PointerByReference",
        "EVP_aes_192_ctr",
        "PointerByReference",
        "EVP_aes_256_cbc",
        "PointerByReference",
        "EVP_aes_256_ctr",
        "EVP_CipherInit_ex",
        "EVP_CipherUpdate",
        "EVP_CipherFinal_ex",
        "EVP_CIPHER_CTX_free",
        "EVP_CIPHER_CTX_cleanup",
        "PointerByReference",
        "RAND_get_rand_method",
        "PointerByReference",
        "RAND_SSLeay",
        "RAND_bytes",
        "ENGINE_finish",
        "ENGINE_free",
        "ENGINE_cleanup",
        "ENGINE_init",
        "ENGINE_set_default",
        "PointerByReference",
        "ENGINE_by_id",
        "ENGINE_load_rdrand"
    ],
    "classes": [
        "OpenSsl10XNativeJna"
    ]
}