{
    "identifiers": [
        "start",
        "end",
        "start",
        "end",
        "start",
        "r",
        "r",
        "totalDistance",
        "r",
        "r",
        "r",
        "r",
        "totalDistance",
        "current",
        "end",
        "selectedDist",
        "current",
        "current",
        "end",
        "current",
        "end",
        "current",
        "g",
        "h",
        "closeNode",
        "closeNode",
        "node",
        "node",
        "coordinate",
        "i",
        "sequence",
        "node",
        "nodeDuplicateX",
        "sequence",
        "i",
        "r",
        "sequence",
        "nodeDuplicateX",
        "nodeDuplicateY",
        "sequence",
        "r",
        "childrens",
        "nodeDuplicateY",
        "openList",
        "childrens",
        "children",
        "openList",
        "openNode",
        "children",
        "openNode",
        "children",
        "openNode",
        "duplicate",
        "openNode",
        "duplicate",
        "openListCopy",
        "children",
        "duplicate",
        "openListCopy",
        "childrens",
        "i",
        "i",
        "i",
        "r",
        "r",
        "r",
        "i",
        "r",
        "i",
        "r",
        "removedOpenList",
        "i",
        "node",
        "removedOpenList",
        "node",
        "updatedOpenList",
        "node",
        "node",
        "node",
        "currentIndex",
        "openList",
        "node",
        "node",
        "costsList",
        "f",
        "f",
        "costsF",
        "f",
        "f",
        "costsList",
        "f",
        "costsList",
        "f",
        "minF",
        "minFcostsIndex",
        "f",
        "minFcostsIndex",
        "index",
        "costsList",
        "index",
        "hCost",
        "h",
        "h",
        "hCost",
        "h",
        "minH",
        "hCost",
        "hCost",
        "index",
        "hCost",
        "h",
        "hCost",
        "h",
        "minH",
        "minH",
        "hCost",
        "h",
        "index",
        "hCost",
        "h",
        "openList",
        "index",
        "lowestCostNode",
        "currentIndex",
        "lowestCostNode"
    ],
    "literals": [
        "\"selected Path\""
    ],
    "variables": [
        "totalDistance",
        "selectedDist",
        "g",
        "h",
        "f",
        "node",
        "coordinate",
        "childrens",
        "sequence",
        "nodeDuplicateX",
        "nodeDuplicateY",
        "openList",
        "openListCopy",
        "duplicate",
        "i",
        "removedOpenList",
        "r",
        "updatedOpenList",
        "currentIndex",
        "openList",
        "costsList",
        "costsF",
        "minF",
        "f",
        "minFcostsIndex",
        "hCost",
        "h",
        "h",
        "index",
        "minH",
        "lowestCostNode"
    ],
    "comments": [
        "all coordinates are in array with x and y coordinate",
        "array of objects (node)",
        "array of objects (node)",
        "array of objects (node)",
        "calculate distance between each node in selected path except first node in array",
        "If selected path array length is 0, calculate distance between current node and starting node",
        "calculate distance between current node and the last node in selected path array",
        "and combine the distance between all nodes within selected node",
        "for nodes that are unwalkable or already been walked",
        "if childrens appear in open list already, ignore it",
        "find children nodes",
        "Compare close array and open array, if match, then add open node index to removedOpenList array",
        "filter open array node out",
        "Remove current node from open list",
        "calculate costs for each children nodes",
        "create costs list with f and h costs",
        "create f costs with seperate array costsF and create node array with minimum f cost",
        "find the minimum f and h cost among lists of costs",
        "select index with lowest f cost",
        "create h cost array with nodes that have minimum f costs and select minimum h cost",
        "Push node with lowest cost into selected path",
        "Push current node into clost list",
        "Remove current node from open list",
        "change current node into node with lowest cost"
    ],
    "docstrings": [],
    "functions": [
        "calculateGcosts",
        "calculateCosts",
        "addCloseList",
        "findChildrenNodes",
        "findGoal"
    ],
    "classes": [
        "Algorithm"
    ]
}