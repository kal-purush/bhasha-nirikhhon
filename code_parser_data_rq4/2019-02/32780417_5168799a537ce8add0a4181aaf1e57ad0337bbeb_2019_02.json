{
    "identifiers": [
        "stashpullrequestbuilder",
        "stashpullrequestbuilder",
        "repackage",
        "org",
        "apache",
        "commons",
        "httpclient",
        "contrib",
        "ssl",
        "java",
        "io",
        "java",
        "net",
        "InetAddress",
        "java",
        "net",
        "InetSocketAddress",
        "java",
        "net",
        "Socket",
        "java",
        "net",
        "SocketAddress",
        "java",
        "net",
        "UnknownHostException",
        "org",
        "apache",
        "commons",
        "httpclient",
        "ConnectTimeoutException",
        "org",
        "apache",
        "commons",
        "httpclient",
        "HttpClientError",
        "org",
        "apache",
        "commons",
        "httpclient",
        "HttpConnectionParams",
        "org",
        "apache",
        "commons",
        "httpclient",
        "protocol",
        "SecureProtocolSocketFactory",
        "org",
        "apache",
        "commons",
        "logging",
        "Log",
        "org",
        "apache",
        "commons",
        "logging",
        "LogFactory",
        "javax",
        "net",
        "SocketFactory",
        "javax",
        "net",
        "ssl",
        "SSLContext",
        "javax",
        "net",
        "ssl",
        "TrustManager",
        "LOG",
        "LogFactory",
        "getLog",
        "sslcontext",
        "context",
        "SSLContext",
        "getInstance",
        "context",
        "init",
        "context",
        "e",
        "LOG",
        "error",
        "e",
        "getMessage",
        "e",
        "e",
        "toString",
        "sslcontext",
        "sslcontext",
        "createEasySSLContext",
        "sslcontext",
        "host",
        "port",
        "clientHost",
        "clientPort",
        "getSSLContext",
        "getSocketFactory",
        "createSocket",
        "host",
        "port",
        "clientHost",
        "clientPort",
        "host",
        "port",
        "localAddress",
        "localPort",
        "timeout",
        "getConnectionTimeout",
        "socketfactory",
        "getSSLContext",
        "getSocketFactory",
        "timeout",
        "socketfactory",
        "createSocket",
        "host",
        "port",
        "localAddress",
        "localPort",
        "socket",
        "socketfactory",
        "createSocket",
        "localaddr",
        "localAddress",
        "localPort",
        "remoteaddr",
        "host",
        "port",
        "socket",
        "bind",
        "localaddr",
        "socket",
        "connect",
        "remoteaddr",
        "timeout",
        "socket",
        "host",
        "port",
        "getSSLContext",
        "getSocketFactory",
        "createSocket",
        "host",
        "port",
        "socket",
        "host",
        "port",
        "autoClose",
        "getSSLContext",
        "getSocketFactory",
        "createSocket",
        "socket",
        "host",
        "port",
        "autoClose",
        "obj",
        "obj",
        "obj",
        "getClass",
        "equals",
        "hashCode"
    ],
    "literals": [
        "\"SSL\"",
        "\"Parameters may not be null\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/contrib/org/apache/commons/httpclient/contrib/ssl/EasySSLProtocolSocketFactory.java,v 1.7 2004/06/11 19:26:27 olegk Exp $\n * $Revision: 480424 $\n * $Date: 2006-11-29 06:56:49 +0100 (Wed, 29 Nov 2006) $\n * \n * ====================================================================\n *\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n * ====================================================================\n *\n * This software consists of voluntary contributions made by many\n * individuals on behalf of the Apache Software Foundation.  For more\n * information on the Apache Software Foundation, please see\n * <http://www.apache.org/>.\n *",
        "* <p>\n * EasySSLProtocolSocketFactory can be used to creats SSL {@link Socket}s \n * that accept self-signed certificates. \n * </p>\n * <p>\n * This socket factory SHOULD NOT be used for productive systems \n * due to security reasons, unless it is a concious decision and \n * you are perfectly aware of security implications of accepting \n * self-signed certificates\n * </p>\n *\n * <p>\n * Example of using custom protocol socket factory for a specific host:\n *     <pre>\n *     Protocol easyhttps = new Protocol(\"https\", new EasySSLProtocolSocketFactory(), 443);\n *\n *     HttpClient client = new HttpClient();\n *     client.getHostConfiguration().setHost(\"localhost\", 443, easyhttps);\n *     // use relative url only\n *     GetMethod httpget = new GetMethod(\"/\");\n *     client.executeMethod(httpget);\n *     </pre>\n * </p>\n * <p>\n * Example of using custom protocol socket factory per default instead of the standard one:\n *     <pre>\n *     Protocol easyhttps = new Protocol(\"https\", new EasySSLProtocolSocketFactory(), 443);\n *     Protocol.registerProtocol(\"https\", easyhttps);\n *\n *     HttpClient client = new HttpClient();\n *     GetMethod httpget = new GetMethod(\"https://localhost/\");\n *     client.executeMethod(httpget);\n *     </pre>\n * </p>\n * \n * @author <a href=\"mailto:oleg -at- ural.ru\">Oleg Kalnichevski</a>\n * \n * <p>\n * DISCLAIMER: HttpClient developers DO NOT actively support this component.\n * The component is provided as a reference material, which may be inappropriate\n * for use without additional customization.\n * </p>",
        "Log object for this class.",
        "* Constructor for EasySSLProtocolSocketFactory.",
        "* @see SecureProtocolSocketFactory#createSocket(java.lang.String,int,java.net.InetAddress,int)",
        "* Attempts to get a new socket connection to the given host within the given time limit.\n     * <p>\n     * To circumvent the limitations of older JREs that do not support connect timeout a \n     * controller thread is executed. The controller thread attempts to create a new socket \n     * within the given limit of time. If socket constructor does not return until the \n     * timeout expires, the controller terminates and throws an {@link ConnectTimeoutException}\n     * </p>\n     *  \n     * @param host the host name/IP\n     * @param port the port on the host\n     * @param clientHost the local host name/IP to bind the socket to\n     * @param clientPort the port on the local machine\n     * @param params {@link HttpConnectionParams Http connection parameters}\n     * \n     * @return Socket a new socket\n     * \n     * @throws IOException if an I/O error occurs while creating the socket\n     * @throws UnknownHostException if the IP address of the host cannot be\n     * determined",
        "* @see SecureProtocolSocketFactory#createSocket(java.lang.String,int)",
        "* @see SecureProtocolSocketFactory#createSocket(java.net.Socket,java.lang.String,int,boolean)"
    ],
    "functions": [
        "EasySSLProtocolSocketFactory",
        "SSLContext",
        "createEasySSLContext",
        "SSLContext",
        "getSSLContext",
        "Socket",
        "createSocket",
        "Socket",
        "createSocket",
        "Socket",
        "createSocket",
        "Socket",
        "createSocket",
        "equals",
        "hashCode"
    ],
    "classes": [
        "EasySSLProtocolSocketFactory"
    ]
}