{
    "identifiers": [
        "httplib",
        "os",
        "subprocess",
        "sys",
        "time",
        "executable",
        "os",
        "environ",
        "path",
        "split",
        "os",
        "pathsep",
        "os",
        "path",
        "splitext",
        "executable",
        "sys",
        "platform",
        "ext",
        "executable",
        "os",
        "path",
        "isfile",
        "executable",
        "executable",
        "p",
        "paths",
        "os",
        "path",
        "join",
        "p",
        "executable",
        "os",
        "path",
        "isfile",
        "full_path",
        "full_path",
        "host",
        "port",
        "path",
        "timeout_ms",
        "time",
        "time",
        "time",
        "time",
        "time_started_sec",
        "timeout_ms",
        "httplib",
        "HTTPConnection",
        "host",
        "host",
        "port",
        "port",
        "timeout",
        "conn",
        "request",
        "path",
        "conn",
        "getresponse",
        "status",
        "time",
        "sleep",
        "RuntimeError",
        "hasattr",
        "find_executable",
        "_node_executable",
        "AppiumServiceError",
        "_node_executable",
        "hasattr",
        "find_executable",
        "sys",
        "platform",
        "_npm_executable",
        "AppiumServiceError",
        "_npm_executable",
        "hasattr",
        "args",
        "subprocess",
        "check_output",
        "_get_npm",
        "args",
        "strip",
        "os",
        "path",
        "exists",
        "os",
        "path",
        "join",
        "modules_root",
        "MAIN_SCRIPT_PATH",
        "os",
        "path",
        "join",
        "modules_root",
        "MAIN_SCRIPT_PATH",
        "subprocess",
        "CalledProcessError",
        "hasattr",
        "subprocess",
        "check_output",
        "_get_node",
        "format",
        "MAIN_SCRIPT_PATH",
        "strip",
        "subprocess",
        "CalledProcessError",
        "e",
        "AppiumServiceError",
        "e",
        "output",
        "_main_script",
        "staticmethod",
        "args",
        "idx",
        "arg",
        "args",
        "arg",
        "idx",
        "len",
        "args",
        "args",
        "idx",
        "DEFAULT_PORT",
        "staticmethod",
        "args",
        "idx",
        "arg",
        "args",
        "arg",
        "idx",
        "len",
        "args",
        "args",
        "idx",
        "DEFAULT_HOST",
        "kwargs",
        "stop",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "_get_node",
        "kwargs",
        "kwargs",
        "subprocess",
        "PIPE",
        "kwargs",
        "kwargs",
        "subprocess",
        "PIPE",
        "kwargs",
        "kwargs",
        "STARTUP_TIMEOUT_MS",
        "kwargs",
        "kwargs",
        "_get_main_script",
        "node",
        "main_script",
        "kwargs",
        "args",
        "extend",
        "kwargs",
        "args",
        "subprocess",
        "Popen",
        "args",
        "args",
        "stdout",
        "stdout",
        "stderr",
        "stderr",
        "env",
        "env",
        "_parse_host",
        "args",
        "_parse_port",
        "args",
        "is_running",
        "timeout_ms",
        "poll_url",
        "host",
        "port",
        "STATUS_URL",
        "timeout_ms",
        "format",
        "host",
        "port",
        "timeout_ms",
        "error_msg",
        "stderr",
        "subprocess",
        "PIPE",
        "_process",
        "stderr",
        "read",
        "err_output",
        "error_msg",
        "format",
        "err_output",
        "stop",
        "AppiumServiceError",
        "error_msg",
        "_process",
        "is_running",
        "_process",
        "terminate",
        "is_terminated",
        "property",
        "_process",
        "_process",
        "poll",
        "property",
        "is_running",
        "_cmd",
        "_parse_host",
        "_cmd",
        "_parse_port",
        "_cmd",
        "is_running",
        "poll_url",
        "host",
        "port",
        "STATUS_URL",
        "find_executable",
        "find_executable",
        "AppiumService",
        "service",
        "start",
        "args",
        "DEFAULT_PORT",
        "service",
        "is_running",
        "service",
        "is_listening",
        "service",
        "stop",
        "service",
        "is_running",
        "service",
        "is_listening"
    ],
    "literals": [
        "'127.0.0.1'",
        "'appium/build/lib/main.js'",
        "'/wd/hub/status'",
        "'PATH'",
        "'win32'",
        "'.exe'",
        "'HEAD'",
        "'_node_executable'",
        "'node'",
        "'NodeJS main executable cannot be found. '",
        "'Make sure it is installed and present in PATH'",
        "'_npm_executable'",
        "'npm.cmd'",
        "'win32'",
        "'npm'",
        "'Node Package Manager executable cannot be found. '",
        "'Make sure it is installed and present in PATH'",
        "'_main_script'",
        "'root'",
        "'-g'",
        "'root'",
        "'_main_script'",
        "'-e'",
        "'console.log(require.resolve(\"{}\"))'",
        "'--port'",
        "'-p'",
        "'--address'",
        "'-a'",
        "'env'",
        "'env'",
        "'node'",
        "'node'",
        "'stdout'",
        "'stdout'",
        "'stderr'",
        "'stderr'",
        "'timeout_ms'",
        "'timeout_ms'",
        "'main_script'",
        "'main_script'",
        "'args'",
        "'args'",
        "'Appium has failed to start on {}:{} within {}ms timeout'",
        "'\\nOriginal error: {}'",
        "'__main__'",
        "'node'",
        "'npm'",
        "'--address'",
        "'127.0.0.1'",
        "'-p'"
    ],
    "variables": [
        "DEFAULT_HOST",
        "DEFAULT_PORT",
        "STARTUP_TIMEOUT_MS",
        "MAIN_SCRIPT_PATH",
        "STATUS_URL",
        "path",
        "paths",
        "ext",
        "executable",
        "full_path",
        "time_started_sec",
        "conn",
        "_process",
        "_cmd",
        "_node_executable",
        "_npm_executable",
        "modules_root",
        "_main_script",
        "_main_script",
        "env",
        "node",
        "stdout",
        "stderr",
        "timeout_ms",
        "main_script",
        "args",
        "_cmd",
        "_process",
        "host",
        "port",
        "error_msg",
        "error_msg",
        "err_output",
        "is_terminated",
        "is_terminated",
        "_process",
        "_cmd",
        "host",
        "port",
        "service"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "service.start(args=['--address', '127.0.0.1', '-p', '80'], timeout_ms=2000)"
    ],
    "docstrings": [
        "\"\"\"\n        Starts Appium service with given arguments.\n        The service will be forcefully restarted if it is already running.\n\n        :param kwargs:\n        `env` - Environment variables mapping. The default system environment,\n        which is inherited from the parent process is assigned by default.\n        `node` - The full path to the main NodeJS executable. The service will try\n        to retrieve it automatically by default.\n        `stdout` - Check on the documentation for subprocess.Popen for more details.\n        The default value is subprocess.PIPE.\n        `stderr` - Check on the documentation for subprocess.Popen for more details.\n        The default value is subprocess.PIPE.\n        `timeout_ms` - The maximum time to wait until Appium process starts listening\n        for HTTP connections. If set to zero or a negative number then no wait will be applied.\n        60000 ms by default\n        `main_script` - The full path to the main Appium executable\n        (usually located this is build/lib/main.js). If this is not set\n        then the service tries to detect the path automatically.\n        `args` - List of Appium arguments (all must be strings). Check on\n        https://appium.io/docs/en/writing-running-appium/server-args/ for more details\n        about possible arguments and their values.\n\n        :return:\n        subprocess.Popen instance. You can use Popen.communicate interface\n        or stderr/stdout properties of the instance\n        (stdout/stderr must not be set to None in such case)\n        in order to retrieve the actual process output.\n        \"\"\"",
        "\"\"\"\n        Stops Appium service if it is running.\n        The call will be ignored if the service is not running\n        or has been already stopped.\n\n        :return:\n        `True` if the service was running before being stopped\n        \"\"\"",
        "\"\"\"\n        Check if the service is running.\n\n        :return:\n        `True` or `False`\n        \"\"\"",
        "\"\"\"\n        Check if the service is listening on the given/default host/port.\n        The fact, that the service is running, does not always mean it is listening.\n        the default host/port values can be customized by providing --address/--port\n        command line arguments while starting the service.\n\n        :return:\n        `True` if the service is running and listening on the given/default host/port\n        \"\"\""
    ],
    "functions": [
        "find_executable",
        "poll_url",
        "_get_node",
        "_get_npm",
        "_get_main_script",
        "_parse_port",
        "_parse_host",
        "start",
        "stop",
        "is_running",
        "is_listening"
    ],
    "classes": [
        "AppiumServiceError",
        "AppiumService"
    ]
}