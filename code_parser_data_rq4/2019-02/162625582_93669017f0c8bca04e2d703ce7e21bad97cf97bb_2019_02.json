{
    "identifiers": [
        "CoreZipCode",
        "Services",
        "ZipCode",
        "SmartyStreetsApi",
        "Moq",
        "Moq",
        "Protected",
        "Collections",
        "Generic",
        "Net",
        "Net",
        "Http",
        "Threading",
        "Threading",
        "Tasks",
        "Xunit",
        "CoreZipCode",
        "Tests",
        "Services",
        "ZipCode",
        "SmartyStreetsApi",
        "Mock",
        "HttpMessageHandler",
        "_service",
        "ConfigureService",
        "ExpectedResponse",
        "_serviceList",
        "ConfigureService",
        "ExpectedListResponse",
        "response",
        "_handlerMock",
        "Mock",
        "HttpMessageHandler",
        "_handlerMock",
        "Protected",
        "Setup",
        "HttpResponseMessage",
        "SendAsync",
        "ItExpr",
        "IsAny",
        "HttpRequestMessage",
        "ItExpr",
        "IsAny",
        "CancellationToken",
        "ReturnsAsync",
        "HttpResponseMessage",
        "StatusCode",
        "HttpStatusCode",
        "OK",
        "Content",
        "StringContent",
        "response",
        "Verifiable",
        "HttpClient",
        "_handlerMock",
        "BaseAddress",
        "Uri",
        "MockUri",
        "SmartyStreets",
        "httpClient",
        "Fact",
        "Assert",
        "Throws",
        "ArgumentNullException",
        "SmartyStreets",
        "Fact",
        "_service",
        "Execute",
        "ZipCodeTest",
        "Assert",
        "Equal",
        "ExpectedResponse",
        "actual",
        "Fact",
        "_serviceList",
        "Execute",
        "SmartyStreetsParameterState",
        "SmartyStreetsParameterCity",
        "SmartyStreetsParameterStreet",
        "Assert",
        "Equal",
        "ExpectedListResponse",
        "actual",
        "Fact",
        "_service",
        "GetAddress",
        "SmartyStreetsModel",
        "ZipCodeTest",
        "Assert",
        "IsType",
        "SmartyStreetsModel",
        "actual",
        "Assert",
        "Equal",
        "ExpectedCity",
        "actual",
        "CityStates",
        "City",
        "Assert",
        "Equal",
        "ExpectedState",
        "actual",
        "CityStates",
        "StateAbbreviation",
        "Fact",
        "_serviceList",
        "ListAddresses",
        "SmartyStreetsParamsModel",
        "SmartyStreetsParameterState",
        "SmartyStreetsParameterCity",
        "SmartyStreetsParameterStreet",
        "Assert",
        "IsType",
        "SmartyStreetsParamsModel",
        "actual",
        "Assert",
        "actual",
        "Count",
        "Assert",
        "Equal",
        "SmartyStreetsParameterCity",
        "actual",
        "Components",
        "CityName",
        "Assert",
        "Equal",
        "SmartyStreetsParameterState",
        "actual",
        "Components",
        "StateAbbreviation",
        "Fact",
        "_service",
        "ExecuteAsync",
        "ZipCodeTest",
        "Assert",
        "Equal",
        "ExpectedResponse",
        "actual",
        "Fact",
        "_serviceList",
        "ExecuteAsync",
        "SmartyStreetsParameterState",
        "SmartyStreetsParameterCity",
        "SmartyStreetsParameterStreet",
        "Assert",
        "Equal",
        "ExpectedListResponse",
        "actual",
        "Fact",
        "_service",
        "GetAddressAsync",
        "SmartyStreetsModel",
        "ZipCodeTest",
        "Assert",
        "IsType",
        "SmartyStreetsModel",
        "actual",
        "Assert",
        "Equal",
        "ExpectedCity",
        "actual",
        "CityStates",
        "City",
        "Assert",
        "Equal",
        "ExpectedState",
        "actual",
        "CityStates",
        "StateAbbreviation",
        "Fact",
        "_serviceList",
        "ListAddressesAsync",
        "SmartyStreetsParamsModel",
        "SmartyStreetsParameterState",
        "SmartyStreetsParameterCity",
        "SmartyStreetsParameterStreet",
        "Assert",
        "IsType",
        "SmartyStreetsParamsModel",
        "actual",
        "Assert",
        "actual",
        "Count",
        "Assert",
        "Equal",
        "SmartyStreetsParameterCity",
        "actual",
        "Components",
        "CityName",
        "Assert",
        "Equal",
        "SmartyStreetsParameterState",
        "actual",
        "Components",
        "StateAbbreviation"
    ],
    "literals": [
        "\"[{\\\"input_index\\\":0,\\\"city_states\\\":[{\\\"city\\\":\\\"Cupertino\\\",\\\"state_abbreviation\\\":\\\"CA\\\",\\\"state\\\":\\\"California\\\",\\\"mailable_city\\\":true},{\\\"city\\\":\\\"Monte Vista\\\",\\\"state_abbreviation\\\":\\\"CA\\\",\\\"state\\\":\\\"California\\\",\\\"mailable_city\\\":true},{\\\"city\\\":\\\"Permanente\\\",\\\"state_abbreviation\\\":\\\"CA\\\",\\\"state\\\":\\\"California\\\",\\\"mailable_city\\\":true}],\\\"zipcodes\\\":[{\\\"zipcode\\\":\\\"95014\\\",\\\"zipcode_type\\\":\\\"S\\\",\\\"default_city\\\":\\\"Cupertino\\\",\\\"county_fips\\\":\\\"06085\\\",\\\"county_name\\\":\\\"Santa Clara\\\",\\\"state_abbreviation\\\":\\\"CA\\\",\\\"state\\\":\\\"California\\\",\\\"latitude\\\":37.32098,\\\"longitude\\\":-122.03838,\\\"precision\\\":\\\"Zip5\\\"}]}]\"",
        "\"[{\\\"input_index\\\":0,\\\"candidate_index\\\":0,\\\"delivery_line_1\\\":\\\"1600 Amphitheatre Pkwy\\\",\\\"last_line\\\":\\\"Mountain View CA 94043-1351\\\",\\\"delivery_point_barcode\\\":\\\"940431351000\\\",\\\"components\\\":{\\\"primary_number\\\":\\\"1600\\\",\\\"street_name\\\":\\\"Amphitheatre\\\",\\\"street_suffix\\\":\\\"Pkwy\\\",\\\"city_name\\\":\\\"Mountain View\\\",\\\"default_city_name\\\":\\\"Mountain View\\\",\\\"state_abbreviation\\\":\\\"CA\\\",\\\"zipcode\\\":\\\"94043\\\",\\\"plus4_code\\\":\\\"1351\\\",\\\"delivery_point\\\":\\\"00\\\",\\\"delivery_point_check_digit\\\":\\\"0\\\"},\\\"metadata\\\":{\\\"record_type\\\":\\\"S\\\",\\\"zip_type\\\":\\\"Standard\\\",\\\"county_fips\\\":\\\"06085\\\",\\\"county_name\\\":\\\"Santa Clara\\\",\\\"carrier_route\\\":\\\"C909\\\",\\\"congressional_district\\\":\\\"18\\\",\\\"rdi\\\":\\\"Commercial\\\",\\\"elot_sequence\\\":\\\"0094\\\",\\\"elot_sort\\\":\\\"A\\\",\\\"latitude\\\":37.42357,\\\"longitude\\\":-122.08661,\\\"precision\\\":\\\"Zip9\\\",\\\"time_zone\\\":\\\"Pacific\\\",\\\"utc_offset\\\":-8,\\\"dst\\\":true},\\\"analysis\\\":{\\\"dpv_match_code\\\":\\\"Y\\\",\\\"dpv_footnotes\\\":\\\"AABB\\\",\\\"dpv_cmra\\\":\\\"N\\\",\\\"dpv_vacant\\\":\\\"N\\\",\\\"active\\\":\\\"N\\\"}}]\"",
        "\"CA\"",
        "\"Cupertino\"",
        "\"95014\"",
        "\"SendAsync\"",
        "\"https://unit.test.com/\"",
        "\"CA\"",
        "\"Mountain View\"",
        "\"1600 Amphitheatre Pkwy\"",
        "\"Invalid Street Param\"",
        "\"Invalid City Param\"",
        "\"Invalid State Param\"",
        "\"Invalid ZipCode Format\"",
        "\"Invalid ZipCode Size\"",
        "\"test-auth-id\"",
        "\"test-auth-token\"",
        "\"\""
    ],
    "variables": [
        "ExpectedResponse",
        "ExpectedListResponse",
        "ExpectedState",
        "ExpectedCity",
        "ZipCodeTest",
        "SendAsync",
        "MockUri",
        "SmartyStreetsParameterState",
        "SmartyStreetsParameterCity",
        "SmartyStreetsParameterStreet",
        "InvalidStreetMessage",
        "InvalidCityMessage",
        "InvalidStateMessage",
        "InvalidZipCodeFormatMessage",
        "InvalidZipCodeSizeMessage",
        "SmartyStreets",
        "_service",
        "SmartyStreets",
        "_serviceList",
        "_handlerMock",
        "httpClient",
        "actual",
        "actual",
        "actual",
        "actual",
        "actual",
        "actual",
        "actual",
        "actual"
    ],
    "comments": [
        "[Fact]",
        "public void MustThrowTheExceptions()",
        "{",
        "var exception = Assert.Throws<ViaCepException>(() => _service.Execute(\" 12345-67 \"));",
        "Assert.Equal(InvalidZipCodeSizeMessage, exception.Message);",
        "exception = Assert.Throws<ViaCepException>(() => _service.Execute(\" 123A5-678 \"));",
        "Assert.Equal(InvalidZipCodeFormatMessage, exception.Message);",
        "exception = Assert.Throws<ViaCepException>(() => _service.Execute(\"U\", \"Araraquara\", \"barão do rio\"));",
        "Assert.Equal(InvalidStateMessage, exception.Message);",
        "exception = Assert.Throws<ViaCepException>(() => _service.Execute(\"SP\", \"Ar\", \"barão do rio\"));",
        "Assert.Equal(InvalidCityMessage, exception.Message);",
        "exception = Assert.Throws<ViaCepException>(() => _service.Execute(\"SP\", \"Ara\", \"ba\"));",
        "Assert.Equal(InvalidStreetMessage, exception.Message);",
        "exception = Assert.Throws<ViaCepException>(() => _service.Execute(\"\", \"Araraquara\", \"barão do rio\"));",
        "Assert.Equal(InvalidStateMessage, exception.Message);",
        "exception = Assert.Throws<ViaCepException>(() => _service.Execute(\"SP\", \"\", \"barão do rio\"));",
        "Assert.Equal(InvalidCityMessage, exception.Message);",
        "exception = Assert.Throws<ViaCepException>(() => _service.Execute(\"SP\", \"Ara\", \"\"));",
        "Assert.Equal(InvalidStreetMessage, exception.Message);",
        "}",
        "[Fact]",
        "public void MustThrowTheExceptionsAsync()",
        "{",
        "var exception = Assert.ThrowsAsync<ViaCepException>(() => _service.ExecuteAsync(\" 12345-67 \"));",
        "Assert.Equal(InvalidZipCodeSizeMessage, exception.Result.Message);",
        "exception = Assert.ThrowsAsync<ViaCepException>(() => _service.ExecuteAsync(\" 123A5-678 \"));",
        "Assert.Equal(InvalidZipCodeFormatMessage, exception.Result.Message);",
        "exception = Assert.ThrowsAsync<ViaCepException>(() => _service.ExecuteAsync(\"U\", \"Araraquara\", \"barão do rio\"));",
        "Assert.Equal(InvalidStateMessage, exception.Result.Message);",
        "exception = Assert.ThrowsAsync<ViaCepException>(() => _service.ExecuteAsync(\"SP\", \"Ar\", \"barão do rio\"));",
        "Assert.Equal(InvalidCityMessage, exception.Result.Message);",
        "exception = Assert.ThrowsAsync<ViaCepException>(() => _service.ExecuteAsync(\"SP\", \"Ara\", \"ba\"));",
        "Assert.Equal(InvalidStreetMessage, exception.Result.Message);",
        "exception = Assert.ThrowsAsync<ViaCepException>(() => _service.ExecuteAsync(\"\", \"Araraquara\", \"barão do rio\"));",
        "Assert.Equal(InvalidStateMessage, exception.Result.Message);",
        "exception = Assert.ThrowsAsync<ViaCepException>(() => _service.ExecuteAsync(\"SP\", \"\", \"barão do rio\"));",
        "Assert.Equal(InvalidCityMessage, exception.Result.Message);",
        "exception = Assert.ThrowsAsync<ViaCepException>(() => _service.ExecuteAsync(\"SP\", \"Ara\", \"\"));",
        "Assert.Equal(InvalidStreetMessage, exception.Result.Message);",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "SmartyStreetsTest",
        "SmartyStreets",
        "ConfigureService",
        "Constructor_null_test",
        "MustGetSingleZipCodeJsonString",
        "MustGetZipCodeByParamsJsonString",
        "MustGetSingleZipCodeObject",
        "MustGetZipCodeByParamsList",
        "MustGetSingleZipCodeJsonStringAsync",
        "MustGetListZipCodeJsonStringAsync",
        "MustGetSingleZipCodeObjectAsync",
        "MustGetZipCodeByParamsListAsync"
    ],
    "classes": [
        "SmartyStreetsTest"
    ]
}