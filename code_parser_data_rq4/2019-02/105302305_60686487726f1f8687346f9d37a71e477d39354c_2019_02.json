{
    "identifiers": [
        "os",
        "pytest",
        "glob",
        "astrodata",
        "gemini_instruments",
        "astrodata",
        "test",
        "conftest",
        "test_path",
        "os",
        "path",
        "join",
        "test_path",
        "os",
        "path",
        "exists",
        "cleanup",
        "os",
        "remove",
        "cleanup",
        "glob",
        "glob",
        "os",
        "path",
        "join",
        "test_path",
        "pytest",
        "fixture",
        "scope",
        "request",
        "request",
        "addfinalizer",
        "fin",
        "pytest",
        "mark",
        "usefixtures",
        "pytest",
        "mark",
        "skipif",
        "os",
        "environ",
        "reason",
        "pytest",
        "mark",
        "skipif",
        "os",
        "path",
        "exists",
        "os",
        "environ",
        "reason",
        "astrodata",
        "open",
        "os",
        "path",
        "join",
        "test_path",
        "filename",
        "ad",
        "gemini_instruments",
        "gmos",
        "adclass",
        "AstroDataGmos",
        "astrodata",
        "open",
        "os",
        "path",
        "join",
        "test_path",
        "filename",
        "isinstance",
        "ad",
        "gemini_instruments",
        "gmos",
        "adclass",
        "AstroDataGmos",
        "glob",
        "glob",
        "os",
        "path",
        "join",
        "test_path",
        "astrodata",
        "open",
        "os",
        "path",
        "join",
        "test_path",
        "filename",
        "ad",
        "data",
        "data",
        "shape",
        "astrodata",
        "open",
        "os",
        "path",
        "join",
        "test_path",
        "filename",
        "ad",
        "tags",
        "expected",
        "issubset",
        "tags",
        "astrodata",
        "open",
        "os",
        "path",
        "join",
        "test_path",
        "filename",
        "ad",
        "phu",
        "ad",
        "instrument",
        "ad",
        "phu",
        "astrodata",
        "open",
        "os",
        "path",
        "join",
        "test_path",
        "filename",
        "len",
        "ad",
        "astrodata",
        "open",
        "os",
        "path",
        "join",
        "test_path",
        "filename",
        "ad",
        "len",
        "slc",
        "ext",
        "md",
        "slc",
        "metadata",
        "ext",
        "hdr",
        "ext",
        "hdr",
        "md",
        "astrodata",
        "open",
        "os",
        "path",
        "join",
        "test_path",
        "filename",
        "ad",
        "hdr",
        "KeyError",
        "len",
        "ad"
    ],
    "literals": [
        "'created_fits_file.fits'",
        "\"*.fits\"",
        "'N20110826S0336.fits'",
        "'class'",
        "'setup TestGMOS'",
        "'\\nteardown TestGMOS'",
        "'setup_gmos'",
        "'TEST_PATH'",
        "\"Jello world\"",
        "'TEST_PATH'",
        "\"Jello world\"",
        "\"*.fits\"",
        "'RAW'",
        "'GMOS'",
        "'GEMINI'",
        "'NORTH'",
        "'SIDEREAL'",
        "'UNPREPARED'",
        "'SPECT'",
        "'MOS'",
        "'INSTRUME'",
        "'GMOS-N'",
        "'INSTRUME'",
        "'SCI'",
        "'SCI'",
        "'EXTNAME'",
        "'EXTVER'",
        "'CCDNAME'",
        "'EEV 9273-16-03'",
        "'EEV 9273-20-04'",
        "'EEV 9273-20-03'"
    ],
    "variables": [
        "cleanup",
        "testfiles",
        "filename",
        "ad",
        "ad",
        "testfiles",
        "ad",
        "data",
        "ad",
        "tags",
        "expected",
        "ad",
        "ad",
        "ad",
        "metadata",
        "slc",
        "ad"
    ],
    "comments": [
        "Cleans up a fake file created in the tests in case it's still there",
        "test_path() needs to be exported as the path with",
        "all the reuired files you wish to test",
        "YES, this *can* be different from test_is_right_type. Metaclasses!",
        "def test_read_a_keyword_from_phu(self):",
        "",
        "ad = astrodata.open(os.path.join(test_path(), filename))",
        "assert ad.phu['DETECTOR'] == 'F2'",
        "KeyError only accepted if it's because headers out of range",
        "with pytest.raises(AssertionError):",
        "ad.phu.DETECTOR = 'FooBar'",
        "ad.phu.ARBTRARY = 'BarBaz'",
        "assert ad.phu.DETECTOR == 'FooBar'",
        "assert ad.phu.ARBTRARY == 'BarBaz'",
        "assert ad.phu['DETECTOR'] == 'FooBar'"
    ],
    "docstrings": [],
    "functions": [
        "setup_gmos",
        "fin",
        "test_is_right_type",
        "test_is_right_instance",
        "test_extension_data_shape",
        "test_tags",
        "test_can_return_instrument",
        "test_can_return_ad_length",
        "test_slice_range",
        "test_read_a_keyword_from_hdr"
    ],
    "classes": [
        "TestF2"
    ]
}