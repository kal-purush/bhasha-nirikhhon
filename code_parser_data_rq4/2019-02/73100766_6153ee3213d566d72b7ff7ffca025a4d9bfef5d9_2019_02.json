{
    "identifiers": [
        "division",
        "unicode_literals",
        "print_function",
        "absolute_import",
        "six",
        "moves",
        "os",
        "shutil",
        "yaml",
        "argparse",
        "ArgumentParser",
        "fnmatch",
        "fnmatch",
        "glob",
        "glob",
        "ast",
        "subprocess",
        "pymatgen",
        "symmetry",
        "analyzer",
        "SpacegroupAnalyzer",
        "pymatgen",
        "io",
        "vasp",
        "inputs",
        "Incar",
        "pymatgen",
        "io",
        "vasp",
        "inputs",
        "Potcar",
        "Kpoints",
        "pymatgen",
        "io",
        "vasp",
        "outputs",
        "Oszicar",
        "mpinterfaces",
        "mpinterfaces",
        "utils",
        "mpinterfaces",
        "mpint_parser",
        "mpinterfaces",
        "workflows",
        "mpinterfaces",
        "calibrate",
        "Calibrate",
        "mpinterfaces",
        "Interface",
        "mpinterfaces",
        "default_logger",
        "get_default_logger",
        "os",
        "environ",
        "get",
        "VASP_TWOD_BIN",
        "VASP_STD_BIN",
        "VASP_NCL_BIN",
        "VASP_SOL_BIN",
        "VASP_CUSTOM_BIN",
        "val",
        "os",
        "path",
        "isdir",
        "val",
        "f",
        "os",
        "listdir",
        "val",
        "os",
        "path",
        "join",
        "val",
        "f",
        "os",
        "path",
        "isfile",
        "fname",
        "fnmatch",
        "fname",
        "poscar_list",
        "append",
        "Poscar",
        "from_file",
        "fname",
        "poscar_list",
        "args",
        "args",
        "command",
        "args",
        "i",
        "open",
        "args",
        "i",
        "yaml",
        "load",
        "open",
        "args",
        "i",
        "f",
        "close",
        "my_project",
        "my_project",
        "yaml",
        "load",
        "open",
        "my_project",
        "my_project",
        "Poscar",
        "from_file",
        "poscar",
        "poscar",
        "glob",
        "MATERIALS_LIST",
        "Poscar",
        "get_struct_from_mp",
        "p",
        "p",
        "MATERIALS_LIST",
        "p",
        "my_project",
        "get_logger",
        "NAME",
        "VaspErrorHandler",
        "np",
        "sort",
        "WORKFLOWS",
        "keys",
        "StepVASP0",
        "StepVASP1",
        "k",
        "WORKFLOWS",
        "k",
        "k",
        "Order_WfNames",
        "steps_map",
        "steps_dict",
        "steps_dict",
        "keys",
        "my_project",
        "struct_list",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "curdir",
        "project_abs_dir",
        "Order_WfNames",
        "open",
        "args",
        "i",
        "projfile",
        "yaml",
        "dump",
        "my_project",
        "projfile",
        "default_flow_style",
        "os",
        "path",
        "exists",
        "os",
        "remove",
        "projfile",
        "close",
        "args",
        "command",
        "args",
        "i",
        "open",
        "args",
        "i",
        "yaml",
        "load",
        "open",
        "args",
        "i",
        "f",
        "close",
        "my_project",
        "my_project",
        "np",
        "sort",
        "WORKFLOWS",
        "keys",
        "StepVASP0",
        "StepVASP1",
        "k",
        "WORKFLOWS",
        "k",
        "k",
        "Order_WfNames",
        "k",
        "Order_WfNames",
        "k",
        "my_project",
        "steps_map",
        "steps_dict",
        "steps_dict",
        "keys",
        "k",
        "my_project",
        "k",
        "my_project",
        "orig_done",
        "append",
        "k",
        "o",
        "o",
        "orig_done",
        "open",
        "args",
        "i",
        "projfile",
        "yaml",
        "dump",
        "my_project",
        "projfile",
        "default_flow_style",
        "os",
        "path",
        "exists",
        "os",
        "remove",
        "projfile",
        "close",
        "args",
        "command",
        "args",
        "i",
        "open",
        "args",
        "i",
        "yaml",
        "load",
        "f",
        "args",
        "c",
        "args",
        "c",
        "glob",
        "format",
        "project_spec",
        "project_spec",
        "os",
        "chdir",
        "proj_dir",
        "chk",
        "check_errors",
        "chkfile",
        "chk",
        "logfile_name",
        "project_spec",
        "chk",
        "workflow_chkpts",
        "open",
        "format",
        "project_spec",
        "report",
        "yaml",
        "dump",
        "CustodianChecks",
        "report",
        "default_flow_style",
        "report",
        "close",
        "args",
        "command",
        "args",
        "i",
        "len",
        "args",
        "i",
        "args",
        "i",
        "open",
        "args",
        "i",
        "get_logger",
        "format",
        "args",
        "i",
        "replace",
        "yaml",
        "load",
        "f",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "curdir",
        "args",
        "c",
        "args",
        "c",
        "rerun_spec",
        "keys",
        "rerun_chkpts",
        "k",
        "rerun_chkpts",
        "rerun_spec",
        "k",
        "format",
        "rerun_logs",
        "info",
        "format",
        "args",
        "s",
        "rerun_logs",
        "info",
        "format",
        "args",
        "s",
        "os",
        "system",
        "format",
        "args",
        "s",
        "args",
        "s",
        "args",
        "m",
        "rerun_logs",
        "info",
        "format",
        "args",
        "m",
        "add_mem_submit_file",
        "args",
        "m",
        "rerun_logs",
        "info",
        "add_mem_submit_file",
        "args",
        "w",
        "rerun_logs",
        "info",
        "format",
        "args",
        "w",
        "add_walltime",
        "args",
        "w",
        "rerun_logs",
        "info",
        "add_walltime",
        "os",
        "chdir",
        "args",
        "inc",
        "Incar",
        "from_file",
        "ast",
        "literal_eval",
        "args",
        "inc",
        "incar",
        "update",
        "user_dict",
        "incar",
        "write_file",
        "args",
        "dinc",
        "Incar",
        "from_file",
        "ast",
        "literal_eval",
        "args",
        "dinc",
        "d",
        "user_exp",
        "d",
        "incar",
        "keys",
        "incar",
        "d",
        "incar",
        "write_file",
        "args",
        "kpt",
        "ast",
        "literal_eval",
        "args",
        "kpt",
        "isinstance",
        "user_exp",
        "Kpoints",
        "gamma_automatic",
        "user_exp",
        "Structure",
        "from_file",
        "Kpoints",
        "automatic_gamma_density",
        "user_exp",
        "kpoints",
        "write_file",
        "subprocess",
        "Popen",
        "stdout",
        "subprocess",
        "PIPE",
        "stderr",
        "subprocess",
        "PIPE",
        "p",
        "communicate",
        "stdout",
        "rstrip",
        "split",
        "replace",
        "rerun_logs",
        "info",
        "format",
        "rerun_job_id",
        "os",
        "chdir",
        "proj_dir",
        "rerun_logs",
        "info",
        "args",
        "command",
        "args",
        "i",
        "open",
        "args",
        "i",
        "yaml",
        "load",
        "f",
        "proj_spec",
        "step",
        "proj_wflow_st",
        "step",
        "proj_wflow_st",
        "step",
        "keys",
        "proj_wflow_st",
        "step",
        "proj_wflow_st",
        "step",
        "proj_wflow_st",
        "step",
        "analyze_script",
        "analyze_script",
        "analyze_input",
        "analyze_output",
        "subprocess",
        "Popen",
        "analyze_script",
        "analyze_input",
        "analyze_output",
        "stdout",
        "subprocess",
        "PIPE",
        "stderr",
        "subprocess",
        "PIPE",
        "p",
        "communicate",
        "stdout",
        "args",
        "command",
        "args",
        "i",
        "open",
        "args",
        "i",
        "yaml",
        "load",
        "f",
        "proj_spec",
        "proj_spec",
        "os",
        "chdir",
        "proj_dir",
        "os",
        "system",
        "format",
        "name_spec",
        "name_spec",
        "os",
        "system",
        "format",
        "name_spec",
        "os",
        "system",
        "format",
        "name_spec",
        "os",
        "system",
        "format",
        "name_spec",
        "os",
        "system",
        "os",
        "system",
        "args",
        "command",
        "args",
        "i",
        "ast",
        "literal_eval",
        "args",
        "i",
        "os",
        "path",
        "exists",
        "SETTINGS_FILE",
        "key",
        "key",
        "open",
        "os",
        "path",
        "join",
        "os",
        "path",
        "expanduser",
        "config_file",
        "yaml",
        "dump",
        "user_configs",
        "config_file",
        "default_flow_style",
        "yaml",
        "load",
        "open",
        "SETTINGS_FILE",
        "config_data",
        "update",
        "user_dict",
        "load_config_vars",
        "config_data",
        "args",
        "command",
        "args",
        "i",
        "open",
        "args",
        "i",
        "yaml",
        "load",
        "f",
        "fi",
        "fi",
        "glob",
        "format",
        "project_spec",
        "fi",
        "l",
        "workflow_logs",
        "format",
        "l",
        "decode_log_file",
        "l",
        "n",
        "j",
        "job_id",
        "decode_q",
        "j",
        "job_dir",
        "n",
        "state",
        "job_dir",
        "n",
        "j",
        "state",
        "isinstance",
        "oszi",
        "Oszicar",
        "len",
        "oszi",
        "ionic_steps",
        "nsw",
        "oszi",
        "ionic_steps",
        "oszi",
        "electronic_steps",
        "states",
        "append",
        "state",
        "s",
        "s",
        "states",
        "s",
        "format",
        "len",
        "running_states",
        "len",
        "job_id",
        "args",
        "command",
        "args",
        "i",
        "open",
        "args",
        "i",
        "yaml",
        "load",
        "f",
        "fi",
        "fi",
        "glob",
        "format",
        "project_spec",
        "fi",
        "l",
        "workflow_logs",
        "format",
        "l",
        "decode_log_file",
        "l",
        "n",
        "j",
        "job_id",
        "os",
        "system",
        "format",
        "job_id",
        "mpint_parse_arguments",
        "sys",
        "argv",
        "args",
        "command",
        "process_input",
        "args",
        "main"
    ],
    "literals": [
        "\"MAPI_KEY\"",
        "\"\"",
        "'twod_binary'",
        "'bulk_binary'",
        "'ncl_binary'",
        "'sol_binary'",
        "'custom_binary'",
        "\"*POSCAR*\"",
        "'start_project'",
        "'NAME'",
        "'Incar_General'",
        "'Potcar_Spec'",
        "'Insilico_Fab'",
        "'Material_List'",
        "'StructsDir/*.vasp'",
        "'StructsDir'",
        "'StructsDir'",
        "'Workflow'",
        "\"_InSilico_Materials\"",
        "'Steps'",
        "'StepVASP0'",
        "'StepVASP1'",
        "'Steps'",
        "'TYPE'",
        "'Project_Dir'",
        "'Running_Wflow'",
        "'w'",
        "'custodian.json'",
        "'custodian.json'",
        "'continue_project'",
        "'NAME'",
        "'Workflow'",
        "'Steps'",
        "'StepVASP0'",
        "'StepVASP1'",
        "'Steps'",
        "'TYPE'",
        "'Running_Wflow'",
        "'Running_Wflow'",
        "'Running_Wflow'",
        "'w'",
        "'custodian.json'",
        "'custodian.json'",
        "'check_project'",
        "'{}*.json'",
        "'NAME'",
        "'Project_Dir'",
        "'Custodian_'",
        "'NAME'",
        "'{}_CustodianReport.yaml'",
        "'NAME'",
        "'w'",
        "'rerun_project'",
        "'{}_reruns'",
        "'.yaml'",
        "''",
        "'Rerunning {}'",
        "'ErrorDir'",
        "'Rerunning {}'",
        "'ErrorDir'",
        "'Using new submit_file {} for all rerun'",
        "'cp {0} {1}'",
        "'ErrorDir'",
        "'sbatch'",
        "'Error'",
        "'Memory Error'",
        "'Error Memory adding {}'",
        "'ErrorDir'",
        "'/submit_script'",
        "'Error Memory adding 3000'",
        "'ErrorDir'",
        "'/submit_script'",
        "'TIME LIMIT'",
        "'Error'",
        "'Error TIME LIMIT adding {}'",
        "'ErrorDir'",
        "'/submit_script'",
        "'Error TIME LIMIT adding 20:00:00'",
        "'ErrorDir'",
        "'/submit_script'",
        "'20:00:00'",
        "'sbatch'",
        "'submit_script'",
        "'ErrorDir'",
        "'INCAR'",
        "'INCAR'",
        "'INCAR'",
        "'INCAR'",
        "'POSCAR'",
        "'KPOINTS'",
        "'sbatch'",
        "'submit_script'",
        "'\\n'",
        "\"\\\\n'\"",
        "''",
        "'running job {0} in {1}'",
        "'ErrorDir'",
        "'Finished submitting reruns'",
        "'Finished submitting reruns'",
        "'analyze_project'",
        "'Workflow'",
        "'Steps'",
        "'Analysis'",
        "'Analysis'",
        "'Script'",
        "'Analysis'",
        "'Input'",
        "'Analysis'",
        "'Output'",
        "'.py'",
        "'python'",
        "'-i'",
        "'-o'",
        "'Analyzed the project according to specified post processing script'",
        "'archive_project'",
        "'tar.gz the project json files and csv and vasprun.xml files from the project directory'",
        "'NAME'",
        "'Project_Dir'",
        "'tar cvzf {}.tar.gz {}*.json '",
        "'find . -iname \"*.xml\" -exec tar -rvf {0}.tar {} \\;'",
        "'_vaspruns_csvs'",
        "'find . -iname \"*.csv\" -exec tar -rvf {0}.tar {} \\;'",
        "'_vaspruns_csvs'",
        "'tar cvzf {}.tar.gz {}.tar'",
        "'_vaspruns_csvs'",
        "'find . -iname \"WAVECAR\" -exec rm {} \\;'",
        "'find . -iname \"CHG*\" -exec rm {} \\;'",
        "'load_settings'",
        "'username'",
        "'bulk_binary'",
        "'twod_binary'",
        "'ncl_binary'",
        "'sol_binary'",
        "'custom_binary'",
        "'vdw_kernel'",
        "'potentials'",
        "'MAPI_KEY'",
        "'queue_system'",
        "'queue_template'",
        "'~'",
        "'.mpint_config.yaml'",
        "'w'",
        "'qcheck_project'",
        "'{}*.log'",
        "'NAME'",
        "'InSilico'",
        "'Qcheck on {}'",
        "'R'",
        "'Ionic Steps'",
        "'First Ionic Step'",
        "'R'",
        "'{0} of {1} total jobs running'",
        "'cancel_project'",
        "'{}*.log'",
        "'NAME'",
        "'InSilico'",
        "'Qcheck on {}'",
        "'scancel {}'",
        "'__main__'"
    ],
    "variables": [
        "MAPI_KEY",
        "vasp_config",
        "poscar_list",
        "fname",
        "f",
        "my_project",
        "NAME",
        "INCAR_GENERAL",
        "POTCAR_SPEC",
        "MATERIALS_LIST",
        "struct_list",
        "WORKFLOWS",
        "project_log",
        "error_handler",
        "Order_WfNames",
        "steps_map",
        "steps_dict",
        "project_abs_dir",
        "my_project",
        "my_project",
        "f",
        "my_project",
        "NAME",
        "WORKFLOWS",
        "Order_WfNames",
        "steps_map",
        "steps_dict",
        "orig_done",
        "my_project",
        "f",
        "project_spec",
        "workflow_chkpts",
        "workflow_chkpts",
        "proj_dir",
        "CustodianChecks",
        "f",
        "rerun_logs",
        "rerun_spec",
        "proj_dir",
        "rerun_chkpts",
        "rerun_chkpts",
        "submit_cmd",
        "submit_cmd",
        "incar",
        "user_dict",
        "incar",
        "user_exp",
        "user_exp",
        "kpoints",
        "kpoints",
        "p",
        "stdout",
        "stderr",
        "rerun_job_id",
        "f",
        "proj_spec",
        "proj_wflow_st",
        "analyze_script",
        "analyze_input",
        "analyze_output",
        "p",
        "stdout",
        "stderr",
        "f",
        "proj_spec",
        "name_spec",
        "proj_dir",
        "user_dict",
        "user_configs",
        "config_data",
        "states",
        "f",
        "project_spec",
        "workflow_logs",
        "states",
        "tot",
        "job_id",
        "job_dir",
        "job_name",
        "state",
        "oszi",
        "nsw",
        "running_states",
        "states",
        "f",
        "project_spec",
        "workflow_logs",
        "states",
        "tot",
        "job_id",
        "job_dir",
        "job_name",
        "args"
    ],
    "comments": [
        "!/usr/bin/env python",
        "this will be the only CLI input",
        "this will be the only CLI input",
        "error_handler = [VaspErrorHandler()]",
        "print (k)",
        "print (steps_map[steps_dict[list(steps_dict.keys())[k]]])",
        "print ('Here')",
        "check if any input spec for the project",
        "print (workflow_chkpts)",
        "Custodian yamls are input",
        "check for yaml analysis input for project",
        "os.system('python {0} -i {1} -o {2}'.format(analyze_script, analyze_input, analyze_output))",
        "check for workflow.yaml input file",
        "first the json checkpoints",
        "then add all vaspruns to tar archive",
        "then add csvs",
        "compress the archive",
        "finally delete WAVECARS and CHG, CHGCARS"
    ],
    "docstrings": [
        "\"\"\"\nThis script serves as a management tool for vasp projects, starting\nfrom encut, kpoint or other parameter optimization of till the slab\nsolvation. Just define all types of calculations with their\ncorresponding specifications needed for the project in a yaml file\nand run or rerun calculaitons as required.\n\nNote: use your own materials project key to download the required\nstructure\n\"\"\""
    ],
    "functions": [
        "process_dir",
        "process_input",
        "main"
    ],
    "classes": []
}