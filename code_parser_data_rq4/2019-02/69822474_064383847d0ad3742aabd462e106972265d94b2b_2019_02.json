{
    "identifiers": [
        "CharStream",
        "IntStream",
        "Interval",
        "Override",
        "s",
        "Int32Array",
        "s",
        "stringIdx",
        "s",
        "bufferIdx",
        "codePointBuffer",
        "Int32Array",
        "codePointBuffer",
        "newBuffer",
        "codePointBuffer",
        "codePointBuffer",
        "newBuffer",
        "s",
        "stringIdx",
        "codePoint",
        "RangeError",
        "codePointBuffer",
        "bufferIdx",
        "codePoint",
        "stringIdx",
        "codePoint",
        "CodePointCharStream",
        "codePointBuffer",
        "bufferIdx",
        "codePointBuffer",
        "initialPosition",
        "codePointBuffer",
        "initialPosition",
        "name",
        "codePointBuffer",
        "initialPosition",
        "name",
        "name",
        "name",
        "name",
        "IntStream",
        "codePointBuffer",
        "initialPosition",
        "codePointBuffer",
        "initialPosition",
        "name",
        "initialPosition",
        "i",
        "i",
        "Override",
        "IntStream",
        "RangeError",
        "Override",
        "i",
        "i",
        "i",
        "i",
        "IntStream",
        "i",
        "i",
        "IntStream",
        "i",
        "Override",
        "Override",
        "Override",
        "Override",
        "marker",
        "Override",
        "index",
        "index",
        "RangeError",
        "index",
        "RangeError",
        "index",
        "Override",
        "interval",
        "interval",
        "interval",
        "codePointIdx",
        "stopIdx",
        "codePointIdx",
        "sb",
        "codePointIdx",
        "sb",
        "Override",
        "Override",
        "Interval"
    ],
    "literals": [
        "\"./CharStream\"",
        "\"./IntStream\"",
        "\"./misc/Interval\"",
        "\"./Decorators\"",
        "\"assert\"",
        "string",
        "string",
        "string",
        "string",
        "\"cannot consume EOF\"",
        "string",
        "string",
        "\"\"",
        "string",
        "string"
    ],
    "variables": [
        "codePointBuffer",
        "stringIdx",
        "bufferIdx",
        "newBuffer",
        "codePoint",
        "startIdx",
        "stopIdx",
        "sb",
        "codePointIdx",
        "startIdx"
    ],
    "comments": [
        "!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.",
        "Initial guess assumes no code points > U+FFFF: one code",
        "point for each code unit in the string",
        "Grow the code point buffer size by 2.",
        "public constructor(codePointBuffer: Int32Array) {",
        "this(codePointBuffer, UNKNOWN_SOURCE_NAME);",
        "}",
        "Undefined",
        "mark/release do nothing; we have entire buffer",
        "No default implementation since this stream buffers the entire input",
        "Return the UTF-16 encoded string for the given interval",
        "interval.length() will be too small if we contain any code points > U+FFFF,",
        "but it's just a hint for initial capacity; StringBuilder will grow anyway."
    ],
    "docstrings": [
        "* Alternative to {@link ANTLRInputStream} which treats the input\n * as a series of Unicode code points, instead of a series of UTF-16\n * code units.\n *\n * Use this if you need to parse input which potentially contains\n * Unicode values > U+FFFF.",
        "* Convenience method to create a {@link CodePointCharStream}\n\t * for the Unicode code points in a Java {@link String}.",
        "* Constructs a {@link CodePointCharStream} which provides access\n\t * to the Unicode code points stored in {@code codePointBuffer}.\n\t *\n\t * {@code codePointBuffer}'s {@link IntBuffer#position position}\n\t * reflects the first code point of the stream, and its\n\t * {@link IntBuffer#limit limit} is just after the last code point\n\t * of the stream.",
        "* Constructs a named {@link CodePointCharStream} which provides access\n\t * to the Unicode code points stored in {@code codePointBuffer}.\n\t *\n\t * {@code codePointBuffer}'s {@link IntBuffer#position position}\n\t * reflects the first code point of the stream, and its\n\t * {@link IntBuffer#limit limit} is just after the last code point\n\t * of the stream."
    ],
    "functions": [
        "createWithString",
        "relativeBufferPosition",
        "consume",
        "LA",
        "index",
        "size",
        "mark",
        "release",
        "seek",
        "getText",
        "sourceName",
        "toString"
    ],
    "classes": [
        "CodePointCharStream"
    ]
}