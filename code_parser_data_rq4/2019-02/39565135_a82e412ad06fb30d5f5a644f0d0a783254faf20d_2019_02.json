{
    "identifiers": [
        "os",
        "sys",
        "time",
        "quantizer",
        "base64",
        "essentials",
        "hashlib",
        "staking",
        "fork",
        "mining",
        "mining_heavy3",
        "regnet",
        "mempool",
        "mp",
        "essentials",
        "db_to_drive",
        "essentials",
        "checkpoint_set",
        "essentials",
        "ledger_balance3",
        "difficulty",
        "fork",
        "Cryptodome",
        "Hash",
        "SHA",
        "Cryptodome",
        "PublicKey",
        "RSA",
        "Cryptodome",
        "Signature",
        "PKCS1_v1_5",
        "node",
        "data",
        "sdef",
        "peer_ip",
        "db_handler",
        "node",
        "last_block",
        "node",
        "peers",
        "is_banned",
        "peer_ip",
        "ValueError",
        "node",
        "db_lock",
        "locked",
        "node",
        "db_lock",
        "acquire",
        "mp",
        "MEMPOOL",
        "locked",
        "time",
        "sleep",
        "node",
        "logger",
        "app_log",
        "info",
        "peer_ip",
        "node",
        "logger",
        "app_log",
        "warning",
        "peer_ip",
        "Decimal",
        "sys",
        "getsizeof",
        "data",
        "Decimal",
        "node",
        "logger",
        "app_log",
        "warning",
        "block_size",
        "data",
        "transaction_list",
        "block_list",
        "block_count",
        "entry",
        "transaction_list",
        "tx_count",
        "entry",
        "entry_signature",
        "signature_list",
        "append",
        "entry_signature",
        "db_handler",
        "execute_param",
        "db_handler",
        "h3",
        "entry_signature",
        "db_handler",
        "h3",
        "fetchone",
        "tx_presence_check",
        "ValueError",
        "entry_signature",
        "tx_presence_check",
        "db_handler",
        "execute_param",
        "db_handler",
        "c",
        "entry_signature",
        "db_handler",
        "c",
        "fetchone",
        "tx_presence_check",
        "ValueError",
        "entry_signature",
        "tx_presence_check",
        "ValueError",
        "peer_ip",
        "len",
        "signature_list",
        "tx_count",
        "len",
        "signature_list",
        "ValueError",
        "signature_list",
        "db_handler",
        "execute",
        "db_handler",
        "c",
        "db_handler",
        "c",
        "fetchall",
        "result",
        "result",
        "quantize_two",
        "result",
        "db_block_height",
        "block_height_new",
        "tx_index",
        "transaction",
        "transaction_list",
        "quantize_two",
        "time",
        "time",
        "quantize_two",
        "transaction",
        "q_received_timestamp",
        "transaction",
        "transaction",
        "quantize_eight",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "tx_index",
        "tx_count",
        "q_received_timestamp",
        "received_openfield",
        "received_address",
        "transaction_list_converted",
        "append",
        "received_timestamp",
        "received_address",
        "received_recipient",
        "received_amount",
        "received_signature_enc",
        "received_public_key_hashed",
        "received_operation",
        "received_openfield",
        "RSA",
        "importKey",
        "base64",
        "b64decode",
        "received_public_key_hashed",
        "base64",
        "b64decode",
        "received_signature_enc",
        "PKCS1_v1_5",
        "received_public_key",
        "essentials",
        "validate_pem",
        "received_public_key_hashed",
        "SHA",
        "received_timestamp",
        "received_address",
        "received_recipient",
        "received_amount",
        "received_operation",
        "received_openfield",
        "encode",
        "verifier",
        "verify",
        "sha_hash",
        "received_signature_dec",
        "ValueError",
        "received_address",
        "node",
        "logger",
        "app_log",
        "info",
        "received_address",
        "received_recipient",
        "received_amount",
        "received_amount",
        "ValueError",
        "received_address",
        "hashlib",
        "sha224",
        "base64",
        "b64decode",
        "received_public_key_hashed",
        "hexdigest",
        "ValueError",
        "essentials",
        "address_validate",
        "received_address",
        "ValueError",
        "essentials",
        "address_validate",
        "received_recipient",
        "ValueError",
        "q_time_now",
        "q_received_timestamp",
        "ValueError",
        "quantize_two",
        "q_received_timestamp",
        "q_time_now",
        "q_db_timestamp_last",
        "q_received_timestamp",
        "ValueError",
        "q_block_timestamp",
        "q_db_timestamp_last",
        "ValueError",
        "difficulty",
        "node",
        "db_handler",
        "diff",
        "node",
        "logger",
        "app_log",
        "warning",
        "db_block_height",
        "diff",
        "node",
        "logger",
        "app_log",
        "warning",
        "diff",
        "node",
        "logger",
        "app_log",
        "warning",
        "diff",
        "node",
        "logger",
        "app_log",
        "warning",
        "diff",
        "node",
        "logger",
        "app_log",
        "warning",
        "diff",
        "node",
        "logger",
        "app_log",
        "warning",
        "diff",
        "diff",
        "hashlib",
        "sha224",
        "transaction_list_converted",
        "db_block_hash",
        "encode",
        "hexdigest",
        "node",
        "logger",
        "app_log",
        "info",
        "block_hash",
        "db_handler",
        "execute_param",
        "db_handler",
        "h3",
        "block_hash",
        "db_handler",
        "h3",
        "fetchone",
        "dummy",
        "ValueError",
        "format",
        "block_hash",
        "peer_ip",
        "dummy",
        "node",
        "is_mainnet",
        "block_height_new",
        "POW_FORK",
        "mining",
        "check_block",
        "block_height_new",
        "miner_address",
        "nonce",
        "db_block_hash",
        "diff",
        "received_timestamp",
        "q_received_timestamp",
        "q_db_timestamp_last",
        "peer_ip",
        "peer_ip",
        "app_log",
        "node",
        "logger",
        "app_log",
        "mining_heavy3",
        "check_block",
        "block_height_new",
        "miner_address",
        "nonce",
        "db_block_hash",
        "diff",
        "received_timestamp",
        "q_received_timestamp",
        "q_db_timestamp_last",
        "peer_ip",
        "peer_ip",
        "app_log",
        "node",
        "logger",
        "app_log",
        "node",
        "is_testnet",
        "mining_heavy3",
        "check_block",
        "block_height_new",
        "miner_address",
        "nonce",
        "db_block_hash",
        "diff",
        "received_timestamp",
        "q_received_timestamp",
        "q_db_timestamp_last",
        "peer_ip",
        "peer_ip",
        "app_log",
        "node",
        "logger",
        "app_log",
        "mining_heavy3",
        "check_block",
        "block_height_new",
        "miner_address",
        "nonce",
        "db_block_hash",
        "regnet",
        "REGNET_DIFF",
        "received_timestamp",
        "q_received_timestamp",
        "q_db_timestamp_last",
        "peer_ip",
        "peer_ip",
        "app_log",
        "node",
        "logger",
        "app_log",
        "tx_index",
        "transaction",
        "transaction_list",
        "quantize_two",
        "transaction",
        "transaction",
        "transaction",
        "quantize_eight",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "transaction",
        "x",
        "transaction_list",
        "x",
        "db_address",
        "quantize_eight",
        "Decimal",
        "block_debit_address",
        "Decimal",
        "x",
        "x",
        "transaction_list",
        "quantize_eight",
        "Decimal",
        "block_fees_address",
        "Decimal",
        "essentials",
        "fee_calculate",
        "db_openfield",
        "db_operation",
        "node",
        "last_block",
        "ledger_balance3",
        "db_address",
        "balances",
        "db_handler",
        "quantize_eight",
        "balance_pre",
        "block_debit_address",
        "essentials",
        "fee_calculate",
        "db_openfield",
        "db_operation",
        "node",
        "last_block",
        "fees_block",
        "append",
        "quantize_eight",
        "fee",
        "tx_index",
        "tx_count",
        "db_block_height",
        "quantize_eight",
        "block_height_new",
        "quantize_eight",
        "Decimal",
        "mining_reward",
        "quantize_eight",
        "mining_reward",
        "sum",
        "fees_block",
        "quantize_eight",
        "balance_pre",
        "quantize_eight",
        "db_amount",
        "ValueError",
        "db_address",
        "db_amount",
        "balance_pre",
        "quantize_eight",
        "balance",
        "quantize_eight",
        "block_fees_address",
        "ValueError",
        "db_address",
        "node",
        "logger",
        "app_log",
        "info",
        "len",
        "block_transactions",
        "block_transactions",
        "append",
        "block_height_new",
        "db_timestamp",
        "db_address",
        "db_recipient",
        "db_amount",
        "db_signature",
        "db_public_key_hashed",
        "block_hash",
        "fee",
        "reward",
        "db_operation",
        "db_openfield",
        "mp",
        "MEMPOOL",
        "delete_transaction",
        "db_signature",
        "node",
        "logger",
        "app_log",
        "info",
        "db_signature",
        "db_handler",
        "execute_param",
        "db_handler",
        "c",
        "block_height_new",
        "diff_save",
        "db_handler",
        "commit",
        "db_handler",
        "conn",
        "node",
        "plugin_manager",
        "execute_action_hook",
        "block_height_new",
        "diff_save",
        "block_hash",
        "q_block_timestamp",
        "miner_address",
        "peer_ip",
        "node",
        "plugin_manager",
        "execute_action_hook",
        "block_height_new",
        "diff_save",
        "block_hash",
        "q_block_timestamp",
        "miner_address",
        "peer_ip",
        "block_transactions",
        "db_handler",
        "execute_many",
        "db_handler",
        "c",
        "block_transactions",
        "db_handler",
        "commit",
        "db_handler",
        "conn",
        "node",
        "is_testnet",
        "block_height_new",
        "block_height_new",
        "staking",
        "staking_update",
        "db_handler",
        "conn",
        "db_handler",
        "c",
        "db_handler",
        "index",
        "db_handler",
        "index_cursor",
        "block_height_new",
        "node",
        "logger",
        "app_log",
        "staking",
        "staking_payout",
        "db_handler",
        "conn",
        "db_handler",
        "c",
        "db_handler",
        "index",
        "db_handler",
        "index_cursor",
        "block_height_new",
        "q_block_timestamp",
        "node",
        "logger",
        "app_log",
        "staking",
        "staking_revalidate",
        "db_handler",
        "conn",
        "db_handler",
        "c",
        "db_handler",
        "index",
        "db_handler",
        "index_cursor",
        "block_height_new",
        "node",
        "logger",
        "app_log",
        "db_handler",
        "execute",
        "db_handler",
        "c",
        "db_handler",
        "c",
        "fetchall",
        "hashlib",
        "blake2b",
        "tx_list_to_hash",
        "encode",
        "digest_size",
        "hexdigest",
        "block_height_new",
        "db_handler",
        "execute_param",
        "db_handler",
        "c",
        "block_height_new",
        "q_block_timestamp",
        "node",
        "genesis_conf",
        "mining_reward",
        "mirror_hash",
        "db_handler",
        "commit",
        "db_handler",
        "conn",
        "db_handler",
        "execute_param",
        "db_handler",
        "c",
        "block_height_new",
        "q_block_timestamp",
        "mirror_hash",
        "db_handler",
        "commit",
        "db_handler",
        "conn",
        "node",
        "logger",
        "app_log",
        "warning",
        "block_height_new",
        "block_hash",
        "len",
        "transaction_list",
        "peer_ip",
        "time",
        "time",
        "q_time_now",
        "block_transactions",
        "node",
        "peers",
        "unban",
        "peer_ip",
        "difficulty",
        "node",
        "db_handler",
        "diff",
        "node",
        "plugin_manager",
        "execute_action_hook",
        "diff",
        "checkpoint_set",
        "node",
        "block_height_new",
        "block_hash",
        "e",
        "node",
        "logger",
        "app_log",
        "warning",
        "e",
        "node",
        "logger",
        "app_log",
        "info",
        "data",
        "e",
        "sys",
        "exc_info",
        "os",
        "path",
        "split",
        "exc_tb",
        "tb_frame",
        "f_code",
        "co_filename",
        "exc_type",
        "fname",
        "exc_tb",
        "tb_lineno",
        "node",
        "peers",
        "warning",
        "sdef",
        "peer_ip",
        "ValueError",
        "peer_ip",
        "ValueError",
        "node",
        "full_ledger",
        "node",
        "ram_conf",
        "db_to_drive",
        "node",
        "db_handler",
        "node",
        "db_lock",
        "release",
        "time",
        "time",
        "q_time_now",
        "node",
        "plugin_manager",
        "execute_action_hook",
        "failed_cause",
        "peer_ip",
        "delta_t",
        "block_count",
        "tx_count",
        "node",
        "logger",
        "app_log",
        "warning",
        "peer_ip",
        "node",
        "plugin_manager",
        "execute_action_hook",
        "peer_ip"
    ],
    "literals": [
        "'N/A'",
        "''",
        "\"Cannot accept blocks from a banned peer\"",
        "f\"Chain: Waiting for mempool to unlock {peer_ip}\"",
        "f\"Chain: Digesting started from {peer_ip}\"",
        "f\"Chain: Block size: {block_size} MB\"",
        "\"SELECT block_height FROM transactions WHERE signature = ?;\"",
        "f\"That transaction {entry_signature[:10]} is already in our ram ledger, block_height {tx_presence_check[0]}\"",
        "\"SELECT block_height FROM transactions WHERE signature = ?;\"",
        "f\"That transaction {entry_signature[:10]} is already in our ledger, block_height {tx_presence_check[0]}\"",
        "f\"Empty signature from {peer_ip}\"",
        "\"There are duplicate transactions in this block, rejected\"",
        "\"SELECT block_hash, block_height, timestamp FROM transactions WHERE reward != 0 ORDER BY block_height DESC LIMIT 1;\"",
        "'%.2f'",
        "'%.8f'",
        "\"utf-8\"",
        "f\"Invalid signature from {received_address}\"",
        "f\"Valid signature from {received_address} to {received_recipient} amount {received_amount}\"",
        "\"Negative balance spend attempt\"",
        "\"Attempt to spend from a wrong address\"",
        "\"Not a valid sender address\"",
        "\"Not a valid recipient address\"",
        "f\"Future transaction not allowed, timestamp {quantize_two((q_received_timestamp - q_time_now) / 60)} minutes in the future\"",
        "\"Transaction older than 24h not allowed.\"",
        "\"Block is older than the previous one, will be rejected\"",
        "f\"Time to generate block {db_block_height + 1}: {'%.2f' % diff[2]}\"",
        "'%.2f'",
        "f\"Current difficulty: {diff[3]}\"",
        "f\"Current blocktime: {diff[4]}\"",
        "f\"Current hashrate: {diff[5]}\"",
        "f\"Difficulty adjustment: {diff[6]}\"",
        "f\"Difficulty: {diff[0]} {diff[1]}\"",
        "\"utf-8\"",
        "f\"Calculated block sha_hash: {block_hash}\"",
        "\"SELECT block_height FROM transactions WHERE block_hash = ?\"",
        "\"Skipping digestion of block {} from {}, because we already have it on block_height {}\"",
        "'%.2f'",
        "'%.8f'",
        "\"0.8\"",
        "f\"{db_address} sending more than owned: {db_amount}/{balance_pre}\"",
        "f\"{db_address} Cannot afford to pay fees\"",
        "f\"Chain: Appending transaction back to block with {len(block_transactions)} transactions in it\"",
        "f\"Chain: Removed processed transaction {db_signature[:56]} from the mempool while digesting\"",
        "\"INSERT INTO misc VALUES (?, ?)\"",
        "'block'",
        "'height'",
        "'diff'",
        "'sha_hash'",
        "'timestamp'",
        "'miner'",
        "'ip'",
        "'fullblock'",
        "'height'",
        "'diff'",
        "'sha_hash'",
        "'timestamp'",
        "'miner'",
        "'ip'",
        "'transactions'",
        "\"INSERT INTO transactions VALUES (?,?,?,?,?,?,?,?,?,?,?,?)\"",
        "\"normal\"",
        "\"SELECT * FROM transactions WHERE block_height = (SELECT max(block_height) FROM transactions)\"",
        "\"INSERT INTO transactions VALUES (?,?,?,?,?,?,?,?,?,?,?,?)\"",
        "\"Development Reward\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"INSERT INTO transactions VALUES (?,?,?,?,?,?,?,?,?,?,?,?)\"",
        "\"Hypernode Payouts\"",
        "\"3e08b5538a4509d9daa99e01ca5912cda3e98a7f79ca01248c2bde16\"",
        "\"8\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "f\"Valid block: {block_height_new}: {block_hash[:10]} with {len(transaction_list)} txs, digestion from {peer_ip} completed in {str(time.time() - float(q_time_now))[:5]}s.\"",
        "'diff'",
        "f\"Chain processing failed: {e}\"",
        "f\"Received data dump: {data}\"",
        "\"Rejected block\"",
        "f\"{peer_ip} banned\"",
        "\"Chain: digestion aborted\"",
        "'digestblock'",
        "'failed'",
        "'ip'",
        "'deltat'",
        "\"blocks\"",
        "\"txs\"",
        "f\"Chain: Skipping processing from {peer_ip}, someone delivered data faster\"",
        "'digestblock'",
        "'failed'",
        "\"skipped\"",
        "'ip'"
    ],
    "variables": [
        "POW_FORK",
        "FORK_AHEAD",
        "FORK_DIFF",
        "block_height_new",
        "block_hash",
        "failed_cause",
        "block_count",
        "tx_count",
        "block_size",
        "block_list",
        "signature_list",
        "block_transactions",
        "entry_signature",
        "tx_presence_check",
        "tx_presence_check",
        "tx_count",
        "result",
        "db_block_hash",
        "db_block_height",
        "q_db_timestamp_last",
        "block_height_new",
        "node",
        "last_block",
        "transaction_list_converted",
        "q_time_now",
        "q_received_timestamp",
        "received_timestamp",
        "received_address",
        "received_recipient",
        "received_amount",
        "received_signature_enc",
        "received_public_key_hashed",
        "received_operation",
        "received_openfield",
        "q_block_timestamp",
        "nonce",
        "miner_address",
        "received_public_key",
        "received_signature_dec",
        "verifier",
        "sha_hash",
        "diff",
        "node",
        "difficulty",
        "block_hash",
        "dummy",
        "diff_save",
        "diff_save",
        "diff_save",
        "diff_save",
        "fees_block",
        "mining_reward",
        "balances",
        "db_timestamp",
        "db_address",
        "db_recipient",
        "db_amount",
        "db_signature",
        "db_public_key_hashed",
        "db_operation",
        "db_openfield",
        "block_debit_address",
        "block_fees_address",
        "block_debit_address",
        "block_fees_address",
        "balance_pre",
        "balance",
        "fee",
        "db_amount",
        "mining_reward",
        "mining_reward",
        "mining_reward",
        "reward",
        "fee",
        "reward",
        "tx_list_to_hash",
        "mirror_hash",
        "diff",
        "node",
        "difficulty",
        "failed_cause",
        "exc_type",
        "exc_obj",
        "exc_tb",
        "fname",
        "delta_t"
    ],
    "comments": [
        "rework",
        "rework",
        "rework",
        "for logging purposes.",
        "no need to loose any time with banned peers",
        "since we raise, it will also drop the connection, it's fine since he's banned.",
        "variables that have been quantized are prefixed by q_ So we can avoid any unnecessary quantize again later. Takes time.",
        "Variables that are only used as quantized decimal are quantized once and for all.",
        "reject block with duplicate transactions",
        "Reworked process: we exit as soon as we find an error, no need to process further tests.",
        "Then the exception handler takes place.",
        "TODO EGG: benchmark this loop vs a single \"WHERE IN\" SQL",
        "move down, so bad format tx do not require sql query",
        "sig 4",
        "prevent empty signature database retry hack",
        "reject block with transactions which are already in the ledger ram",
        "print(node.last_block)",
        "print(node.last_block)",
        "previous block info",
        "previous block info",
        "makes sure all the data are properly converted",
        "verify signatures",
        "we use this several times",
        "if transaction == transaction_list[-1]:",
        "faster than comparing the whole tx",
        "recognize the last transaction as the mining reward transaction",
        "if (q_time_now < q_received_timestamp + 432000) or not quicksync:",
        "convert readable key to instance",
        "verify signatures",
        "else:",
        "print(\"hyp1\")",
        "reject blocks older than latest block",
        "calculate current difficulty (is done for each block in block array, not super easy to isolate)",
        "node.logger.app_log.info(\"Transaction list: {}\".format(transaction_list_converted))",
        "node.logger.app_log.info(\"Last block sha_hash: {}\".format(db_block_hash))",
        "node.logger.app_log.info(\"Nonce: {}\".format(nonce))",
        "check if we already have the sha_hash",
        "it's regnet then, will use a specific fake method here.",
        "avoid warning",
        "Cache for multiple tx from same address",
        "this also is redundant on many tx per address block",
        "make calculation relevant to a particular address in the block",
        "exclude the mining tx from fees",
        "print(\"block_fees_address\", block_fees_address, \"for\", db_address)",
        "node.logger.app_log.info(\"Digest: Inbound block credit: \" + str(block_credit))",
        "node.logger.app_log.info(\"Digest: Inbound block debit: \" + str(block_debit))",
        "include the new block",
        "if (q_time_now < q_received_timestamp + 432000) and not quicksync:",
        "balance_pre = quantize_eight(credit_ledger - debit_ledger - fees + rewards)  # without projection",
        "keep this as c (ram hyperblock access)",
        "balance = quantize_eight(credit - debit - fees + rewards)",
        "node.logger.app_log.info(\"Digest: Projected transaction address balance: \" + str(balance))",
        "else:",
        "print(\"hyp2\")",
        "node.logger.app_log.info(\"Fee: \" + str(fee))",
        "decide reward",
        "prevent spending from another address, because mining txs allow delegation",
        "don't request a fee for mined block so new accounts can mine",
        "exclude fee check for the mining/header tx",
        "append, but do not insert to ledger before whole block is validated, note that it takes already validated values (decimals, length)",
        "tx was not or is no more in the local mempool",
        "end for transaction_list",
        "save current diff (before the new block)",
        "quantized vars have to be converted, since Decimal is not json serializable...",
        "do not use \"transaction\" as it masks upper level variable.",
        "savings",
        "no savings for regnet",
        "every x blocks",
        "new sha_hash",
        "Was trying to simplify, but it's the latest mirror sha_hash. not the latest block, nor the mirror of the latest block.",
        "c.execute(\"SELECT * FROM transactions WHERE block_height = ?\", (block_height_new -1,))",
        "/new sha_hash",
        "dev reward",
        "every 10 blocks",
        "/dev reward",
        "node.logger.app_log.warning(\"Block: {}: {} valid and saved from {}\".format(block_height_new, block_hash[:10], peer_ip))",
        "This new block may change the int(diff). Trigger the hook whether it changed or not.",
        "We could recalc diff after inserting block, and then only trigger the block hook, but I fear this would delay the new block event.",
        "/whole block validation",
        "NEW: returns new block sha_hash",
        "Temp",
        "first case move stuff from hyper.db to ledger.db; second case move stuff from ram to both",
        "node.logger.app_log.warning(\"Block: {}: {} digestion completed in {}s.\".format(block_height_new,  block_hash[:10], delta_t))"
    ],
    "docstrings": [
        "\"\"\"node param for imports\"\"\""
    ],
    "functions": [
        "digest_block"
    ],
    "classes": []
}