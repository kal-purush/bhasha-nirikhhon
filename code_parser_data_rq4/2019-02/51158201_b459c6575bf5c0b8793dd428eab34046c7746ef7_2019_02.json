{
    "identifiers": [
        "Collections",
        "Generic",
        "Diagnostics",
        "Reflection",
        "Text",
        "Pchp",
        "Core",
        "T",
        "Func",
        "PhpValue",
        "T",
        "Func",
        "PhpValue",
        "T",
        "Create_PhpValue_to_T",
        "T",
        "PhpValue",
        "Utilities",
        "FuncExtensions",
        "Identity",
        "PhpValue",
        "PhpAlias",
        "Func",
        "PhpValue",
        "PhpAlias",
        "x",
        "AsPhpAlias",
        "Func",
        "PhpValue",
        "x",
        "ToString",
        "Func",
        "PhpValue",
        "x",
        "ToDouble",
        "Func",
        "PhpValue",
        "x",
        "ToDouble",
        "Func",
        "PhpValue",
        "x",
        "ToLong",
        "Func",
        "PhpValue",
        "x",
        "ToLong",
        "Func",
        "PhpValue",
        "x",
        "ToBoolean",
        "PhpArray",
        "Func",
        "PhpValue",
        "PhpArray",
        "x",
        "ToArray",
        "IsValueType",
        "IsGenericType",
        "GetGenericTypeDefinition",
        "GenericTypeArguments",
        "typeU",
        "Func",
        "PhpValue",
        "Operators",
        "IsSet",
        "x",
        "x",
        "ToBoolean",
        "typeU",
        "Func",
        "PhpValue",
        "Operators",
        "IsSet",
        "x",
        "x",
        "ToLong",
        "typeU",
        "Func",
        "PhpValue",
        "Operators",
        "IsSet",
        "x",
        "x",
        "ToLong",
        "typeU",
        "Func",
        "PhpValue",
        "Operators",
        "IsSet",
        "x",
        "x",
        "ToDouble",
        "BaseType",
        "MulticastDelegate",
        "ArgumentException",
        "Func",
        "PhpValue",
        "T",
        "T",
        "x",
        "AsObject",
        "NotImplementedException",
        "T",
        "PhpValue",
        "value",
        "GenericConverter",
        "T",
        "s_fromPhpValue",
        "value"
    ],
    "literals": [],
    "variables": [
        "s_fromPhpValue",
        "typeU"
    ],
    "comments": [
        "Conversion routines for <see cref=\"PhpValue\"/>.",
        "</summary>",
        "public static readonly Func<T, PhpValue> s_toPhpValue = (Func<T, PhpValue>)Create_T_to_PhpValue();",
        "try",
        "{",
        "s_toPhpValue = (Func<T, PhpValue>)Create_T_to_PhpValue();",
        "}",
        "catch (Exception ex)",
        "{",
        "s_toPhpValue = (_) => throw ex;",
        "}",
        "try",
        "{",
        "s_fromPhpValue = ;",
        "}",
        "catch (Exception ex)",
        "{",
        "s_fromPhpValue = (_) => throw ex;",
        "}",
        "Debug.Assert(s_toPhpValue != null);",
        "Debug.Assert(s_fromPhpValue != null);",
        "static Delegate Create_T_to_PhpValue()",
        "{",
        "var type = typeof(T);",
        "if (type == typeof(PhpValue)) return Utilities.FuncExtensions.Identity<PhpValue>();",
        "if (type == typeof(int)) return new Func<int, PhpValue>(x => PhpValue.Create(x));",
        "if (type == typeof(long)) return new Func<long, PhpValue>(x => PhpValue.Create(x));",
        "if (type == typeof(bool)) return new Func<bool, PhpValue>(x => PhpValue.Create(x));",
        "if (type == typeof(double)) return new Func<double, PhpValue>(x => PhpValue.Create(x));",
        "if (type == typeof(float)) return new Func<float, PhpValue>(x => PhpValue.Create((double)x));",
        "if (type == typeof(string)) return new Func<string, PhpValue>(x => PhpValue.Create(x));",
        "if (type == typeof(uint)) return new Func<uint, PhpValue>(x => PhpValue.Create((long)x));",
        "if (type == typeof(byte[])) return new Func<byte[], PhpValue>(x => PhpValue.Create(x));",
        "if (type == typeof(PhpNumber)) return new Func<PhpNumber, PhpValue>(x => PhpValue.Create(x));",
        "if (type == typeof(PhpArray)) return new Func<PhpArray, PhpValue>(x => PhpValue.Create(x));",
        "if (type == typeof(PhpString)) return new Func<PhpString, PhpValue>(x => PhpValue.Create(x));",
        "if (type == typeof(PhpAlias)) return new Func<PhpAlias, PhpValue>(x => PhpValue.Create(x));",
        "//if (type == typeof(object)) return new Func<object, PhpValue>(x => PhpValue.FromClass(x));",
        "throw new NotImplementedException();",
        "}",
        "Nullable<U>",
        "type.IsReferenceType",
        "Delegate",
        "Error: needs Context",
        "Object",
        "static class GenericDelegate<TDelegate> where TDelegate : MulticastDelegate",
        "{",
        "// TResult F(Tuple<PhpValue, Context>, arg1, ..., argN) => value.AsCallable().Invoke(Context, new[]{ arg1, ..., argN })",
        "public static readonly MethodInfo/*!*/s_func = CreateFunc();",
        "static MethodInfo CreateFunc()",
        "{",
        "}",
        "}",
        "Converts given value to <see cref=\"PhpValue\"/>.",
        "</summary>",
        "<typeparam name=\"T\">Source CLR type.</typeparam>",
        "<param name=\"value\">Value to be converted.</param>",
        "<returns>Value converted to <see cref=\"PhpValue\"/>.</returns>",
        "public static PhpValue ToPhpValue<T>(this T value) => GenericConverter<T>.s_toPhpValue(value);",
        "Casts <see cref=\"PhpValue\"/> to a given type <typeparamref name=\"T\"/>.",
        "Throws an exception if cast is not possible.",
        "</summary>",
        "<typeparam name=\"T\">Conversion target.</typeparam>",
        "<param name=\"value\">Value to be converted.</param>",
        "<returns>Value as <typeparamref name=\"T\"/>.</returns>",
        "public static TDelegate CreateDelegate<TDelegate>(this PhpValue value, Context ctx) where TDelegate : MulticastDelegate",
        "{",
        "/*",
        "return (TDelegate)Delegate.CreateDelegate(typeof(TDelegate), new Tuple<PhpValue, Context>(value, ctx), GenericDelegate<TDelegate>.s_func);",
        "}",
        "Casts <see cref=\"PhpValue\"/> to a given type <paramref name=\"target\"/>.",
        "Throws an exception if cast is not possible.",
        "</summary>",
        "<param name=\"value\">Value to be converted.</param>",
        "<param name=\"target\">Target CLR type. Cannot be <c>null</c>.</param>",
        "<returns>Value.</returns>",
        "public static object ToClr(this PhpValue value, Type target)",
        "{",
        "if (value.IsNull)",
        "{",
        "return null;",
        "}",
        "}"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "* static TResult F(Tuple<PhpValue, Context>, arg1, ..., argN) => value.AsCallable().Invoke(Context, new[]{ arg1, ..., argN })",
        "* return Delegate.CreateDelegate(typeof(TDelegate), Tuple<PhpValue, Context>, F)",
        "*/",
        "<summary>"
    ],
    "functions": [
        "GenericConverter",
        "Delegate",
        "Create_PhpValue_to_T",
        "T",
        "Cast"
    ],
    "classes": [
        "PhpValueConverter",
        "GenericConverter"
    ]
}