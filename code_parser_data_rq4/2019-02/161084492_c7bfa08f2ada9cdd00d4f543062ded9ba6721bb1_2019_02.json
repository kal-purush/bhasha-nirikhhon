{
    "identifiers": [
        "node",
        "node",
        "node",
        "height",
        "node",
        "height",
        "node",
        "right",
        "height",
        "node",
        "left",
        "node",
        "node",
        "height",
        "max",
        "height",
        "node",
        "left",
        "height",
        "node",
        "right",
        "p",
        "q",
        "p",
        "left",
        "p",
        "left",
        "q",
        "right",
        "q",
        "right",
        "p",
        "fixHeight",
        "p",
        "fixHeight",
        "q",
        "q",
        "q",
        "p",
        "q",
        "right",
        "q",
        "right",
        "p",
        "left",
        "p",
        "left",
        "q",
        "fixHeight",
        "q",
        "fixHeight",
        "p",
        "p",
        "p",
        "fixHeight",
        "p",
        "balanceFactor",
        "p",
        "balanceFactor",
        "p",
        "right",
        "p",
        "right",
        "rotateRight",
        "p",
        "right",
        "rotateLeft",
        "p",
        "balanceFactor",
        "p",
        "balanceFactor",
        "p",
        "left",
        "p",
        "left",
        "rotateLeft",
        "p",
        "left",
        "rotateRight",
        "p",
        "p",
        "d1",
        "d2",
        "root",
        "insert",
        "d1",
        "d2",
        "root",
        "d1",
        "d2",
        "node",
        "h",
        "node",
        "d1",
        "d2",
        "d1",
        "compareTo",
        "node",
        "data1",
        "node",
        "left",
        "insert",
        "d1",
        "d2",
        "node",
        "left",
        "node",
        "height",
        "node",
        "right",
        "insert",
        "d1",
        "d2",
        "node",
        "right",
        "node",
        "height",
        "balance",
        "node",
        "d1",
        "root",
        "d1",
        "root",
        "d1",
        "node",
        "node",
        "d1",
        "compareTo",
        "node",
        "data1",
        "node",
        "left",
        "d1",
        "node",
        "left",
        "d1",
        "compareTo",
        "node",
        "data1",
        "node",
        "right",
        "d1",
        "node",
        "right",
        "q",
        "node",
        "left",
        "r",
        "node",
        "right",
        "r",
        "q",
        "min",
        "findMin",
        "r",
        "min",
        "right",
        "removeMin",
        "r",
        "min",
        "left",
        "q",
        "balance",
        "min",
        "balance",
        "node",
        "node",
        "node",
        "left",
        "findMin",
        "node",
        "left",
        "node",
        "node",
        "node",
        "left",
        "node",
        "right",
        "node",
        "left",
        "removeMin",
        "node",
        "left",
        "balance",
        "node",
        "d1",
        "root",
        "find",
        "d1",
        "root",
        "d1",
        "node",
        "d1",
        "compareTo",
        "node",
        "data1",
        "node",
        "d1",
        "compareTo",
        "node",
        "data1",
        "node",
        "left",
        "find",
        "d1",
        "node",
        "left",
        "node",
        "right",
        "find",
        "d1",
        "node",
        "right",
        "treeOrder",
        "root",
        "node",
        "level",
        "node",
        "i",
        "i",
        "level",
        "i",
        "node",
        "data1",
        "treeOrder",
        "node",
        "left",
        "level",
        "treeOrder",
        "node",
        "right",
        "level"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "prints the level that a node is at",
        "System.out.print (\" \");"
    ],
    "docstrings": [
        "AVLTree is a special binary tree that is able the maintain the height of a leaf and any node to be 1 at most\n\n   @author Tumelo Lephadi\n   @version 10 April 2017\n   reference: kukuruku.co/post/avl-trees/",
        "@param node node that height is measured from\n      @return returns height the height of the node or -1 if the tree is empty",
        "@param node node that height difference of children is measured from\n      @return returns the differences in the height of the children of the parent node",
        "@param node node that will have it's height adjusted",
        "@param p the node that will be a new parent after it is rotated\n      @return returns a node that was once a child but is now a parent",
        "@param q the node that will be a new parent after it is rotated\n      @return returns a node that was once a child but is now a parent",
        "@param p the node that will be a new parent after it is rotated\n      @return returns a node that was once a child but is now a parent",
        "@param d1 data in the node\n      @param d2 data in the node",
        "@param d1 data in the node\n      @param d2 data in the node\n      @param node node that is added to the tree\n      @param h height of node\n      @return returns the a node that is added to the tree",
        "@param d1 data in node to be deleted",
        "@param node node that will be deleted\n      @param d1 data that is in node that will be deleted\n      @return returns a tree without deleted node",
        "@param node a node that has the smallest data\n      @return returns the node with the smallest data",
        "@param node node that will be removed\n      @return returns tree without removed node",
        "@param d1 data that is queried in tree\n      @return returns a node that has the data queried",
        "@param d1 data that is queried in tree\n      @param node node that has data queried\n      @return returns the node that has the data queried",
        "@param node node that will have the order printed from\n      @param level level that the method will stop printing from"
    ],
    "functions": [
        "height",
        "balanceFactor",
        "fixHeight",
        "rotateRight",
        "rotateLeft",
        "balance",
        "insert",
        "insert",
        "findMin",
        "removeMin",
        "find",
        "find",
        "treeOrder",
        "treeOrder"
    ],
    "classes": [
        "AVLTree"
    ]
}