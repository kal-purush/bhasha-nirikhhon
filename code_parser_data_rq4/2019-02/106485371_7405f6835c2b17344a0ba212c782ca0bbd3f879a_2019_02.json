{
    "identifiers": [
        "OfficeExtension",
        "Office",
        "Outlook",
        "Excel",
        "createWorkbook",
        "base64",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "workbookUrl",
        "requestHeaders",
        "name",
        "persisted",
        "OfficeExtension",
        "url",
        "OfficeExtension",
        "run",
        "batch",
        "context",
        "Excel",
        "run",
        "OfficeExtension",
        "batch",
        "context",
        "Excel",
        "run",
        "objects",
        "OfficeExtension",
        "batch",
        "context",
        "Excel",
        "run",
        "options",
        "Excel",
        "batch",
        "context",
        "Excel",
        "run",
        "context",
        "OfficeExtension",
        "batch",
        "context",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "ctx",
        "Excel",
        "Excel",
        "ctx",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "ctx",
        "Excel",
        "Excel",
        "ctx",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "calculationType",
        "Excel",
        "calculationTypeString",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "Excel",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "password",
        "password",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "markAllDirty",
        "positionType",
        "Excel",
        "relativeTo",
        "Excel",
        "Excel",
        "positionTypeString",
        "relativeTo",
        "Excel",
        "Excel",
        "row",
        "column",
        "Excel",
        "visibleOnly",
        "Excel",
        "visibleOnly",
        "Excel",
        "visibleOnly",
        "Excel",
        "visibleOnly",
        "Excel",
        "address",
        "Excel",
        "startRow",
        "startColumn",
        "rowCount",
        "columnCount",
        "Excel",
        "valuesOnly",
        "Excel",
        "valuesOnly",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "name",
        "Excel",
        "Excel",
        "visibleOnly",
        "OfficeExtension",
        "visibleOnly",
        "Excel",
        "key",
        "Excel",
        "key",
        "Excel",
        "visibleOnly",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "options",
        "Excel",
        "password",
        "password",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "frozenRange",
        "count",
        "count",
        "Excel",
        "Excel",
        "key",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "applyTo",
        "Excel",
        "applyToString",
        "shift",
        "Excel",
        "shiftString",
        "numRows",
        "numColumns",
        "Excel",
        "anotherRange",
        "Excel",
        "row",
        "column",
        "Excel",
        "column",
        "Excel",
        "count",
        "Excel",
        "count",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "anotherRange",
        "Excel",
        "anotherRange",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "rowOffset",
        "columnOffset",
        "Excel",
        "deltaRows",
        "deltaColumns",
        "Excel",
        "row",
        "Excel",
        "count",
        "Excel",
        "count",
        "Excel",
        "Excel",
        "valuesOnly",
        "Excel",
        "valuesOnly",
        "Excel",
        "Excel",
        "shift",
        "Excel",
        "Excel",
        "shiftString",
        "Excel",
        "across",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "index",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "key",
        "value",
        "Excel",
        "OfficeExtension",
        "key",
        "Excel",
        "key",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "value",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "name",
        "reference",
        "comment",
        "Excel",
        "name",
        "formula",
        "comment",
        "Excel",
        "OfficeExtension",
        "name",
        "Excel",
        "name",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "Excel",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "bindingType",
        "Excel",
        "id",
        "Excel",
        "bindingTypeString",
        "id",
        "Excel",
        "name",
        "bindingType",
        "Excel",
        "id",
        "Excel",
        "name",
        "bindingTypeString",
        "id",
        "Excel",
        "bindingType",
        "Excel",
        "id",
        "Excel",
        "bindingTypeString",
        "id",
        "Excel",
        "OfficeExtension",
        "id",
        "Excel",
        "index",
        "Excel",
        "id",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "address",
        "hasHeaders",
        "Excel",
        "OfficeExtension",
        "key",
        "Excel",
        "index",
        "Excel",
        "key",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "index",
        "values",
        "name",
        "Excel",
        "OfficeExtension",
        "key",
        "Excel",
        "index",
        "Excel",
        "key",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "index",
        "values",
        "Excel",
        "OfficeExtension",
        "index",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "index",
        "Excel",
        "Excel",
        "indexString",
        "Excel",
        "index",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "sourceData",
        "seriesBy",
        "Excel",
        "Excel",
        "typeString",
        "sourceData",
        "seriesBy",
        "Excel",
        "OfficeExtension",
        "name",
        "Excel",
        "index",
        "Excel",
        "name",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "width",
        "height",
        "fittingMode",
        "Excel",
        "OfficeExtension",
        "width",
        "height",
        "fittingModeString",
        "OfficeExtension",
        "sourceData",
        "seriesBy",
        "Excel",
        "sourceData",
        "seriesByString",
        "startCell",
        "endCell",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "name",
        "index",
        "Excel",
        "OfficeExtension",
        "index",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "sourceData",
        "sourceData",
        "sourceData",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "index",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "Excel",
        "group",
        "Excel",
        "Excel",
        "typeString",
        "group",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "sourceData",
        "value",
        "value",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "formula",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "index",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "start",
        "length",
        "Excel",
        "formula",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "option",
        "OfficeExtension",
        "Excel",
        "color",
        "key",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "typeString",
        "Excel",
        "OfficeExtension",
        "index",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "fields",
        "Excel",
        "matchCase",
        "hasHeaders",
        "orientation",
        "Excel",
        "method",
        "Excel",
        "fields",
        "Excel",
        "matchCase",
        "hasHeaders",
        "orientationString",
        "method",
        "key",
        "OfficeExtension",
        "Excel",
        "Excel",
        "fields",
        "Excel",
        "matchCase",
        "method",
        "Excel",
        "fields",
        "Excel",
        "matchCase",
        "methodString",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "criteria",
        "Excel",
        "count",
        "percent",
        "color",
        "criteria1",
        "criteria2",
        "oper",
        "Excel",
        "criteria1",
        "criteria2",
        "operString",
        "criteria",
        "Excel",
        "criteriaString",
        "color",
        "icon",
        "Excel",
        "count",
        "percent",
        "values",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "id",
        "Excel",
        "id",
        "Excel",
        "Excel",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "xml",
        "Excel",
        "namespaceUri",
        "Excel",
        "OfficeExtension",
        "id",
        "Excel",
        "id",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "OfficeExtension",
        "xml",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "name",
        "source",
        "destination",
        "Excel",
        "OfficeExtension",
        "name",
        "Excel",
        "name",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "name",
        "Excel",
        "name",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "pivotHierarchy",
        "Excel",
        "Excel",
        "OfficeExtension",
        "name",
        "Excel",
        "name",
        "Excel",
        "rowColumnPivotHierarchy",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "pivotHierarchy",
        "Excel",
        "Excel",
        "OfficeExtension",
        "name",
        "Excel",
        "name",
        "Excel",
        "filterPivotHierarchy",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "pivotHierarchy",
        "Excel",
        "Excel",
        "OfficeExtension",
        "name",
        "Excel",
        "name",
        "Excel",
        "DataPivotHierarchy",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "name",
        "Excel",
        "name",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "sortby",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "OfficeExtension",
        "name",
        "Excel",
        "name",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "SortBy",
        "AggregationFunction",
        "ShowAsCalculation",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "key",
        "value",
        "Excel",
        "OfficeExtension",
        "key",
        "Excel",
        "key",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "typeString",
        "Excel",
        "OfficeExtension",
        "id",
        "Excel",
        "index",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "Excel",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "index",
        "Excel",
        "Excel",
        "indexString",
        "Excel",
        "index",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "properties",
        "Interfaces",
        "options",
        "OfficeExtension",
        "properties",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "propertyNamesAndPaths",
        "Excel",
        "Excel",
        "OfficeExtension",
        "Excel",
        "name",
        "name",
        "Excel",
        "option",
        "Excel",
        "Excel",
        "Excel",
        "propertyNames",
        "Excel",
        "option",
        "OfficeExtension",
        "Excel",
        "Excel",
        "OfficeExtension",
        "key",
        "ChartAxisType",
        "ChartAxisGroup",
        "ChartAxisScaleType",
        "ChartAxisPosition",
        "ChartAxisTickMark",
        "ChartAxisTickLabelPosition",
        "ChartAxisDisplayUnit",
        "ChartAxisTimeUnit",
        "ChartAxisCategoryType",
        "ChartLineStyle",
        "ChartDataLabelPosition",
        "ChartTitlePosition",
        "ChartLegendPosition",
        "ChartMarkerStyle",
        "ChartPlotAreaPosition",
        "ChartSeriesBy",
        "ChartTextHorizontalAlignment",
        "ChartTextVerticalAlignment",
        "ChartTickLabelAlignment",
        "ChartType",
        "ChartUnderlineStyle",
        "ChartDisplayBlanksAs",
        "ChartPlotBy",
        "ChartSplitType",
        "ChartColorScheme",
        "ChartTrendlineType",
        "BindingType",
        "BorderIndex",
        "BorderLineStyle",
        "BorderWeight",
        "CalculationMode",
        "CalculationType",
        "ClearApplyTo",
        "ConditionalDataBarAxisFormat",
        "ConditionalDataBarDirection",
        "ConditionalFormatDirection",
        "ConditionalFormatType",
        "ConditionalFormatRuleType",
        "ConditionalFormatIconRuleType",
        "ConditionalFormatColorCriterionType",
        "ConditionalTopBottomCriterionType",
        "ConditionalFormatPresetCriterion",
        "ConditionalTextOperator",
        "ConditionalCellValueOperator",
        "ConditionalIconCriterionOperator",
        "ConditionalRangeBorderIndex",
        "ConditionalRangeBorderLineStyle",
        "ConditionalRangeFontUnderlineStyle",
        "DataValidationType",
        "DataValidationOperator",
        "DataValidationAlertStyle",
        "DeleteShiftDirection",
        "DynamicFilterCriteria",
        "FilterDatetimeSpecificity",
        "FilterOn",
        "FilterOperator",
        "HorizontalAlignment",
        "IconSet",
        "ImageFittingMode",
        "InsertShiftDirection",
        "NamedItemScope",
        "NamedItemType",
        "RangeUnderlineStyle",
        "SheetVisibility",
        "RangeValueType",
        "SortOrientation",
        "SortOn",
        "SortDataOption",
        "SortMethod",
        "VerticalAlignment",
        "DocumentPropertyType",
        "EventSource",
        "DataChangeType",
        "EventType",
        "DocumentPropertyItem",
        "SubtotalLocationType",
        "PivotLayoutType",
        "ProtectionSelectionMode",
        "PageOrientation",
        "ReadingOrder",
        "BuiltInStyle",
        "WorksheetPositionType",
        "OfficeExtension",
        "option",
        "Excel",
        "option",
        "option",
        "Interfaces",
        "OfficeExtension",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "issue",
        "Excel",
        "Excel",
        "Excel",
        "firstInterest",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "par",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "calcMethod",
        "Excel",
        "Excel",
        "Excel",
        "issue",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "par",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "cost",
        "Excel",
        "Excel",
        "Excel",
        "datePurchased",
        "Excel",
        "Excel",
        "Excel",
        "firstPeriod",
        "Excel",
        "Excel",
        "Excel",
        "salvage",
        "Excel",
        "Excel",
        "Excel",
        "period",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "cost",
        "Excel",
        "Excel",
        "Excel",
        "datePurchased",
        "Excel",
        "Excel",
        "Excel",
        "firstPeriod",
        "Excel",
        "Excel",
        "Excel",
        "salvage",
        "Excel",
        "Excel",
        "Excel",
        "period",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "reference",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "xNum",
        "Excel",
        "Excel",
        "Excel",
        "yNum",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "averageRange",
        "Excel",
        "Excel",
        "Excel",
        "averageRange",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "radix",
        "Excel",
        "Excel",
        "Excel",
        "minLength",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "n",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "n",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "n",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "n",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "alpha",
        "Excel",
        "Excel",
        "Excel",
        "beta",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "A",
        "Excel",
        "Excel",
        "Excel",
        "B",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "alpha",
        "Excel",
        "Excel",
        "Excel",
        "beta",
        "Excel",
        "Excel",
        "Excel",
        "A",
        "Excel",
        "Excel",
        "Excel",
        "B",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "places",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "places",
        "Excel",
        "Excel",
        "Excel",
        "numberS",
        "Excel",
        "Excel",
        "Excel",
        "trials",
        "Excel",
        "Excel",
        "Excel",
        "probabilityS",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "trials",
        "Excel",
        "Excel",
        "Excel",
        "probabilityS",
        "Excel",
        "Excel",
        "Excel",
        "numberS",
        "Excel",
        "Excel",
        "Excel",
        "numberS2",
        "Excel",
        "Excel",
        "Excel",
        "trials",
        "Excel",
        "Excel",
        "Excel",
        "probabilityS",
        "Excel",
        "Excel",
        "Excel",
        "alpha",
        "Excel",
        "Excel",
        "Excel",
        "number1",
        "Excel",
        "Excel",
        "Excel",
        "number2",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "shiftAmount",
        "Excel",
        "Excel",
        "Excel",
        "number1",
        "Excel",
        "Excel",
        "Excel",
        "number2",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "shiftAmount",
        "Excel",
        "Excel",
        "Excel",
        "number1",
        "Excel",
        "Excel",
        "Excel",
        "number2",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "significance",
        "Excel",
        "Excel",
        "Excel",
        "mode",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "significance",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom",
        "Excel",
        "Excel",
        "Excel",
        "indexNum",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "numberChosen",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "numberChosen",
        "Excel",
        "Excel",
        "Excel",
        "realNum",
        "Excel",
        "Excel",
        "Excel",
        "iNum",
        "Excel",
        "Excel",
        "Excel",
        "suffix",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "alpha",
        "Excel",
        "Excel",
        "Excel",
        "standardDev",
        "Excel",
        "Excel",
        "Excel",
        "size",
        "Excel",
        "Excel",
        "Excel",
        "alpha",
        "Excel",
        "Excel",
        "Excel",
        "standardDev",
        "Excel",
        "Excel",
        "Excel",
        "size",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "fromUnit",
        "Excel",
        "Excel",
        "Excel",
        "toUnit",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "nper",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "startPeriod",
        "Excel",
        "Excel",
        "Excel",
        "endPeriod",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "nper",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "startPeriod",
        "Excel",
        "Excel",
        "Excel",
        "endPeriod",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "database",
        "Excel",
        "Excel",
        "Excel",
        "field",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "year",
        "Excel",
        "Excel",
        "Excel",
        "month",
        "Excel",
        "Excel",
        "Excel",
        "day",
        "Excel",
        "Excel",
        "Excel",
        "dateText",
        "Excel",
        "Excel",
        "Excel",
        "serialNumber",
        "Excel",
        "Excel",
        "Excel",
        "endDate",
        "Excel",
        "Excel",
        "Excel",
        "startDate",
        "Excel",
        "Excel",
        "Excel",
        "startDate",
        "Excel",
        "Excel",
        "Excel",
        "endDate",
        "Excel",
        "Excel",
        "Excel",
        "method",
        "Excel",
        "Excel",
        "Excel",
        "cost",
        "Excel",
        "Excel",
        "Excel",
        "salvage",
        "Excel",
        "Excel",
        "Excel",
        "life",
        "Excel",
        "Excel",
        "Excel",
        "period",
        "Excel",
        "Excel",
        "Excel",
        "month",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "cost",
        "Excel",
        "Excel",
        "Excel",
        "salvage",
        "Excel",
        "Excel",
        "Excel",
        "life",
        "Excel",
        "Excel",
        "Excel",
        "period",
        "Excel",
        "Excel",
        "Excel",
        "factor",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "places",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "places",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "places",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "radix",
        "Excel",
        "Excel",
        "Excel",
        "angle",
        "Excel",
        "Excel",
        "Excel",
        "number1",
        "Excel",
        "Excel",
        "Excel",
        "number2",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "pr",
        "Excel",
        "Excel",
        "Excel",
        "redemption",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "decimals",
        "Excel",
        "Excel",
        "Excel",
        "fractionalDollar",
        "Excel",
        "Excel",
        "Excel",
        "fraction",
        "Excel",
        "Excel",
        "Excel",
        "decimalDollar",
        "Excel",
        "Excel",
        "Excel",
        "fraction",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "coupon",
        "Excel",
        "Excel",
        "Excel",
        "yld",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "significance",
        "Excel",
        "Excel",
        "Excel",
        "startDate",
        "Excel",
        "Excel",
        "Excel",
        "months",
        "Excel",
        "Excel",
        "Excel",
        "nominalRate",
        "Excel",
        "Excel",
        "Excel",
        "npery",
        "Excel",
        "Excel",
        "Excel",
        "startDate",
        "Excel",
        "Excel",
        "Excel",
        "months",
        "Excel",
        "Excel",
        "Excel",
        "lowerLimit",
        "Excel",
        "Excel",
        "Excel",
        "upperLimit",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "X",
        "Excel",
        "Excel",
        "Excel",
        "X",
        "Excel",
        "Excel",
        "Excel",
        "errorVal",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "text1",
        "Excel",
        "Excel",
        "Excel",
        "text2",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "principal",
        "Excel",
        "Excel",
        "Excel",
        "schedule",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom1",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom2",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom1",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom2",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom1",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom2",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom1",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom2",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "findText",
        "Excel",
        "Excel",
        "Excel",
        "withinText",
        "Excel",
        "Excel",
        "Excel",
        "startNum",
        "Excel",
        "Excel",
        "Excel",
        "findText",
        "Excel",
        "Excel",
        "Excel",
        "withinText",
        "Excel",
        "Excel",
        "Excel",
        "startNum",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "y",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "decimals",
        "Excel",
        "Excel",
        "Excel",
        "noCommas",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "significance",
        "Excel",
        "Excel",
        "Excel",
        "mode",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "significance",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "nper",
        "Excel",
        "Excel",
        "Excel",
        "pmt",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "alpha",
        "Excel",
        "Excel",
        "Excel",
        "beta",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "alpha",
        "Excel",
        "Excel",
        "Excel",
        "beta",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "step",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "lookupValue",
        "Excel",
        "Excel",
        "Excel",
        "tableArray",
        "Excel",
        "Excel",
        "Excel",
        "rowIndexNum",
        "Excel",
        "Excel",
        "Excel",
        "rangeLookup",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "places",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "places",
        "Excel",
        "Excel",
        "Excel",
        "serialNumber",
        "Excel",
        "Excel",
        "Excel",
        "sampleS",
        "Excel",
        "Excel",
        "Excel",
        "numberSample",
        "Excel",
        "Excel",
        "Excel",
        "populationS",
        "Excel",
        "Excel",
        "Excel",
        "numberPop",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "linkLocation",
        "Excel",
        "Excel",
        "Excel",
        "friendlyName",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "significance",
        "Excel",
        "Excel",
        "Excel",
        "logicalTest",
        "Excel",
        "Excel",
        "Excel",
        "valueIfTrue",
        "Excel",
        "Excel",
        "Excel",
        "valueIfFalse",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber1",
        "Excel",
        "Excel",
        "Excel",
        "inumber2",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber1",
        "Excel",
        "Excel",
        "Excel",
        "inumber2",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "inumber",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "investment",
        "Excel",
        "Excel",
        "Excel",
        "redemption",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "per",
        "Excel",
        "Excel",
        "Excel",
        "nper",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "fv",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "guess",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "reference",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "date",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "per",
        "Excel",
        "Excel",
        "Excel",
        "nper",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "k",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "numChars",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "numBytes",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "mean",
        "Excel",
        "Excel",
        "Excel",
        "standardDev",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "mean",
        "Excel",
        "Excel",
        "Excel",
        "standardDev",
        "Excel",
        "Excel",
        "Excel",
        "lookupValue",
        "Excel",
        "Excel",
        "Excel",
        "lookupVector",
        "Excel",
        "Excel",
        "Excel",
        "resultVector",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "coupon",
        "Excel",
        "Excel",
        "Excel",
        "yld",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "financeRate",
        "Excel",
        "Excel",
        "Excel",
        "reinvestRate",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "multiple",
        "Excel",
        "Excel",
        "Excel",
        "lookupValue",
        "Excel",
        "Excel",
        "Excel",
        "lookupArray",
        "Excel",
        "Excel",
        "Excel",
        "matchType",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "startNum",
        "Excel",
        "Excel",
        "Excel",
        "numChars",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "startNum",
        "Excel",
        "Excel",
        "Excel",
        "numBytes",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "serialNumber",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "divisor",
        "Excel",
        "Excel",
        "Excel",
        "serialNumber",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "pmt",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "fv",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "numberF",
        "Excel",
        "Excel",
        "Excel",
        "numberS",
        "Excel",
        "Excel",
        "Excel",
        "probabilityS",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "startDate",
        "Excel",
        "Excel",
        "Excel",
        "endDate",
        "Excel",
        "Excel",
        "Excel",
        "holidays",
        "Excel",
        "Excel",
        "Excel",
        "startDate",
        "Excel",
        "Excel",
        "Excel",
        "endDate",
        "Excel",
        "Excel",
        "Excel",
        "weekend",
        "Excel",
        "Excel",
        "Excel",
        "holidays",
        "Excel",
        "Excel",
        "Excel",
        "effectRate",
        "Excel",
        "Excel",
        "Excel",
        "npery",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "mean",
        "Excel",
        "Excel",
        "Excel",
        "standardDev",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "mean",
        "Excel",
        "Excel",
        "Excel",
        "standardDev",
        "Excel",
        "Excel",
        "Excel",
        "z",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "logical",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "decimalSeparator",
        "Excel",
        "Excel",
        "Excel",
        "groupSeparator",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "places",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "places",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "issue",
        "Excel",
        "Excel",
        "Excel",
        "firstCoupon",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "yld",
        "Excel",
        "Excel",
        "Excel",
        "redemption",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "issue",
        "Excel",
        "Excel",
        "Excel",
        "firstCoupon",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "pr",
        "Excel",
        "Excel",
        "Excel",
        "redemption",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "lastInterest",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "yld",
        "Excel",
        "Excel",
        "Excel",
        "redemption",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "lastInterest",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "pr",
        "Excel",
        "Excel",
        "Excel",
        "redemption",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "fv",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "significance",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "significance",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "k",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "k",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "numberChosen",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "numberChosen",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "nper",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "fv",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "mean",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "power",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "per",
        "Excel",
        "Excel",
        "Excel",
        "nper",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "fv",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "yld",
        "Excel",
        "Excel",
        "Excel",
        "redemption",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "discount",
        "Excel",
        "Excel",
        "Excel",
        "redemption",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "issue",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "yld",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "nper",
        "Excel",
        "Excel",
        "Excel",
        "pmt",
        "Excel",
        "Excel",
        "Excel",
        "fv",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "quart",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "quart",
        "Excel",
        "Excel",
        "Excel",
        "numerator",
        "Excel",
        "Excel",
        "Excel",
        "denominator",
        "Excel",
        "Excel",
        "Excel",
        "angle",
        "Excel",
        "Excel",
        "Excel",
        "bottom",
        "Excel",
        "Excel",
        "Excel",
        "top",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "order",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "order",
        "Excel",
        "Excel",
        "Excel",
        "nper",
        "Excel",
        "Excel",
        "Excel",
        "pmt",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "fv",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "guess",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "investment",
        "Excel",
        "Excel",
        "Excel",
        "discount",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "oldText",
        "Excel",
        "Excel",
        "Excel",
        "startNum",
        "Excel",
        "Excel",
        "Excel",
        "numChars",
        "Excel",
        "Excel",
        "Excel",
        "newText",
        "Excel",
        "Excel",
        "Excel",
        "oldText",
        "Excel",
        "Excel",
        "Excel",
        "startNum",
        "Excel",
        "Excel",
        "Excel",
        "numBytes",
        "Excel",
        "Excel",
        "Excel",
        "newText",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "numberTimes",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "numChars",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "numBytes",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "form",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "numDigits",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "numDigits",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "numDigits",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "nper",
        "Excel",
        "Excel",
        "Excel",
        "pv",
        "Excel",
        "Excel",
        "Excel",
        "fv",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "serialNumber",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "n",
        "Excel",
        "Excel",
        "Excel",
        "m",
        "Excel",
        "Excel",
        "Excel",
        "coefficients",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "reference",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "cost",
        "Excel",
        "Excel",
        "Excel",
        "salvage",
        "Excel",
        "Excel",
        "Excel",
        "life",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "k",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "mean",
        "Excel",
        "Excel",
        "Excel",
        "standardDev",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "oldText",
        "Excel",
        "Excel",
        "Excel",
        "newText",
        "Excel",
        "Excel",
        "Excel",
        "instanceNum",
        "Excel",
        "Excel",
        "Excel",
        "functionNum",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "criteria",
        "Excel",
        "Excel",
        "Excel",
        "sumRange",
        "Excel",
        "Excel",
        "Excel",
        "sumRange",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "cost",
        "Excel",
        "Excel",
        "Excel",
        "salvage",
        "Excel",
        "Excel",
        "Excel",
        "life",
        "Excel",
        "Excel",
        "Excel",
        "per",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "discount",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "discount",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "pr",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom",
        "Excel",
        "Excel",
        "Excel",
        "probability",
        "Excel",
        "Excel",
        "Excel",
        "degFreedom",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "formatText",
        "Excel",
        "Excel",
        "Excel",
        "hour",
        "Excel",
        "Excel",
        "Excel",
        "minute",
        "Excel",
        "Excel",
        "Excel",
        "second",
        "Excel",
        "Excel",
        "Excel",
        "timeText",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "percent",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "numDigits",
        "Excel",
        "Excel",
        "Excel",
        "value",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "decimals",
        "Excel",
        "Excel",
        "Excel",
        "number",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "lookupValue",
        "Excel",
        "Excel",
        "Excel",
        "tableArray",
        "Excel",
        "Excel",
        "Excel",
        "colIndexNum",
        "Excel",
        "Excel",
        "Excel",
        "rangeLookup",
        "Excel",
        "Excel",
        "Excel",
        "text",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "cost",
        "Excel",
        "Excel",
        "Excel",
        "salvage",
        "Excel",
        "Excel",
        "Excel",
        "life",
        "Excel",
        "Excel",
        "Excel",
        "startPeriod",
        "Excel",
        "Excel",
        "Excel",
        "endPeriod",
        "Excel",
        "Excel",
        "Excel",
        "factor",
        "Excel",
        "Excel",
        "Excel",
        "noSwitch",
        "Excel",
        "Excel",
        "Excel",
        "serialNumber",
        "Excel",
        "Excel",
        "Excel",
        "returnType",
        "Excel",
        "Excel",
        "Excel",
        "serialNumber",
        "Excel",
        "Excel",
        "Excel",
        "returnType",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "alpha",
        "Excel",
        "Excel",
        "Excel",
        "beta",
        "Excel",
        "Excel",
        "Excel",
        "cumulative",
        "Excel",
        "Excel",
        "Excel",
        "startDate",
        "Excel",
        "Excel",
        "Excel",
        "days",
        "Excel",
        "Excel",
        "Excel",
        "holidays",
        "Excel",
        "Excel",
        "Excel",
        "startDate",
        "Excel",
        "Excel",
        "Excel",
        "days",
        "Excel",
        "Excel",
        "Excel",
        "weekend",
        "Excel",
        "Excel",
        "Excel",
        "holidays",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "dates",
        "Excel",
        "Excel",
        "Excel",
        "guess",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "dates",
        "Excel",
        "Excel",
        "Excel",
        "values",
        "Excel",
        "Excel",
        "Excel",
        "serialNumber",
        "Excel",
        "Excel",
        "Excel",
        "startDate",
        "Excel",
        "Excel",
        "Excel",
        "endDate",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "pr",
        "Excel",
        "Excel",
        "Excel",
        "redemption",
        "Excel",
        "Excel",
        "Excel",
        "frequency",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "pr",
        "Excel",
        "Excel",
        "Excel",
        "redemption",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "settlement",
        "Excel",
        "Excel",
        "Excel",
        "maturity",
        "Excel",
        "Excel",
        "Excel",
        "issue",
        "Excel",
        "Excel",
        "Excel",
        "rate",
        "Excel",
        "Excel",
        "Excel",
        "pr",
        "Excel",
        "Excel",
        "Excel",
        "basis",
        "Excel",
        "Excel",
        "Excel",
        "array",
        "Excel",
        "Excel",
        "Excel",
        "x",
        "Excel",
        "Excel",
        "Excel",
        "sigma",
        "Excel",
        "Excel",
        "Excel",
        "key",
        "ErrorCodes",
        "Interfaces",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel",
        "Excel"
    ],
    "literals": [
        "\"../api-extractor-inputs-office/office\"",
        "\"../api-extractor-inputs-outlook/outlook\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Unknown\"",
        "\"RangeEdited\"",
        "\"RowInserted\"",
        "\"RowDeleted\"",
        "\"ColumnInserted\"",
        "\"ColumnDeleted\"",
        "\"CellInserted\"",
        "\"CellDeleted\"",
        "\"Local\"",
        "\"Remote\"",
        "\"WorksheetChanged\"",
        "string",
        "string",
        "\"Unknown\"",
        "\"RangeEdited\"",
        "\"RowInserted\"",
        "\"RowDeleted\"",
        "\"ColumnInserted\"",
        "\"ColumnDeleted\"",
        "\"CellInserted\"",
        "\"CellDeleted\"",
        "\"Local\"",
        "\"Remote\"",
        "string",
        "\"TableChanged\"",
        "string",
        "\"WorksheetActivated\"",
        "string",
        "\"WorksheetDeactivated\"",
        "string",
        "string",
        "\"WorksheetSelectionChanged\"",
        "string",
        "string",
        "string",
        "\"TableSelectionChanged\"",
        "string",
        "\"Local\"",
        "\"Remote\"",
        "\"WorksheetAdded\"",
        "string",
        "\"Local\"",
        "\"Remote\"",
        "\"WorksheetDeleted\"",
        "string",
        "string",
        "\"Local\"",
        "\"Remote\"",
        "\"ChartAdded\"",
        "string",
        "string",
        "\"ChartActivated\"",
        "string",
        "string",
        "\"ChartDeactivated\"",
        "string",
        "string",
        "\"Local\"",
        "\"Remote\"",
        "\"ChartDeleted\"",
        "string",
        "\"WorksheetCalculated\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Automatic\"",
        "\"AutomaticExceptTables\"",
        "\"Manual\"",
        "\"Recalculate\"",
        "\"Full\"",
        "\"FullRebuild\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Visible\"",
        "\"Hidden\"",
        "\"VeryHidden\"",
        "\"None\"",
        "\"Before\"",
        "\"After\"",
        "\"Beginning\"",
        "\"End\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Normal\"",
        "\"Unlocked\"",
        "\"None\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"All\"",
        "\"Formats\"",
        "\"Contents\"",
        "\"Hyperlinks\"",
        "\"RemoveHyperlinks\"",
        "\"Up\"",
        "\"Left\"",
        "string",
        "string",
        "string",
        "string",
        "\"Down\"",
        "\"Right\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Worksheet\"",
        "\"Workbook\"",
        "\"String\"",
        "\"Integer\"",
        "\"Double\"",
        "\"Boolean\"",
        "\"Range\"",
        "\"Error\"",
        "\"Array\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Range\"",
        "\"Table\"",
        "\"Text\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Range\"",
        "\"Table\"",
        "\"Text\"",
        "string",
        "string",
        "string",
        "string",
        "\"Range\"",
        "\"Table\"",
        "\"Text\"",
        "string",
        "string",
        "\"Range\"",
        "\"Table\"",
        "\"Text\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"None\"",
        "\"WholeNumber\"",
        "\"Decimal\"",
        "\"List\"",
        "\"Date\"",
        "\"Time\"",
        "\"TextLength\"",
        "\"Custom\"",
        "\"Inconsistent\"",
        "\"MixedCriteria\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Between\"",
        "\"NotBetween\"",
        "\"EqualTo\"",
        "\"NotEqualTo\"",
        "\"GreaterThan\"",
        "\"LessThan\"",
        "\"GreaterThanOrEqualTo\"",
        "\"LessThanOrEqualTo\"",
        "string",
        "string",
        "\"Between\"",
        "\"NotBetween\"",
        "\"EqualTo\"",
        "\"NotEqualTo\"",
        "\"GreaterThan\"",
        "\"LessThan\"",
        "\"GreaterThanOrEqualTo\"",
        "\"LessThanOrEqualTo\"",
        "string",
        "string",
        "string",
        "\"Stop\"",
        "\"Warning\"",
        "\"Information\"",
        "string",
        "string",
        "string",
        "\"General\"",
        "\"Left\"",
        "\"Center\"",
        "\"Right\"",
        "\"Fill\"",
        "\"Justify\"",
        "\"CenterAcrossSelection\"",
        "\"Distributed\"",
        "\"Top\"",
        "\"Center\"",
        "\"Bottom\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"EdgeTop\"",
        "\"EdgeBottom\"",
        "\"EdgeLeft\"",
        "\"EdgeRight\"",
        "\"InsideVertical\"",
        "\"InsideHorizontal\"",
        "\"DiagonalDown\"",
        "\"DiagonalUp\"",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Double\"",
        "\"SlantDashDot\"",
        "\"Hairline\"",
        "\"Thin\"",
        "\"Medium\"",
        "\"Thick\"",
        "string",
        "string",
        "string",
        "string",
        "\"EdgeTop\"",
        "\"EdgeBottom\"",
        "\"EdgeLeft\"",
        "\"EdgeRight\"",
        "\"InsideVertical\"",
        "\"InsideHorizontal\"",
        "\"DiagonalDown\"",
        "\"DiagonalUp\"",
        "string",
        "string",
        "string",
        "string",
        "\"None\"",
        "\"Single\"",
        "\"Double\"",
        "\"SingleAccountant\"",
        "\"DoubleAccountant\"",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"ColumnClustered\"",
        "\"ColumnStacked\"",
        "\"ColumnStacked100\"",
        "\"3DColumnClustered\"",
        "\"3DColumnStacked\"",
        "\"3DColumnStacked100\"",
        "\"BarClustered\"",
        "\"BarStacked\"",
        "\"BarStacked100\"",
        "\"3DBarClustered\"",
        "\"3DBarStacked\"",
        "\"3DBarStacked100\"",
        "\"LineStacked\"",
        "\"LineStacked100\"",
        "\"LineMarkers\"",
        "\"LineMarkersStacked\"",
        "\"LineMarkersStacked100\"",
        "\"PieOfPie\"",
        "\"PieExploded\"",
        "\"3DPieExploded\"",
        "\"BarOfPie\"",
        "\"XYScatterSmooth\"",
        "\"XYScatterSmoothNoMarkers\"",
        "\"XYScatterLines\"",
        "\"XYScatterLinesNoMarkers\"",
        "\"AreaStacked\"",
        "\"AreaStacked100\"",
        "\"3DAreaStacked\"",
        "\"3DAreaStacked100\"",
        "\"DoughnutExploded\"",
        "\"RadarMarkers\"",
        "\"RadarFilled\"",
        "\"Surface\"",
        "\"SurfaceWireframe\"",
        "\"SurfaceTopView\"",
        "\"SurfaceTopViewWireframe\"",
        "\"Bubble\"",
        "\"Bubble3DEffect\"",
        "\"StockHLC\"",
        "\"StockOHLC\"",
        "\"StockVHLC\"",
        "\"StockVOHLC\"",
        "\"CylinderColClustered\"",
        "\"CylinderColStacked\"",
        "\"CylinderColStacked100\"",
        "\"CylinderBarClustered\"",
        "\"CylinderBarStacked\"",
        "\"CylinderBarStacked100\"",
        "\"CylinderCol\"",
        "\"ConeColClustered\"",
        "\"ConeColStacked\"",
        "\"ConeColStacked100\"",
        "\"ConeBarClustered\"",
        "\"ConeBarStacked\"",
        "\"ConeBarStacked100\"",
        "\"ConeCol\"",
        "\"PyramidColClustered\"",
        "\"PyramidColStacked\"",
        "\"PyramidColStacked100\"",
        "\"PyramidBarClustered\"",
        "\"PyramidBarStacked\"",
        "\"PyramidBarStacked100\"",
        "\"PyramidCol\"",
        "\"3DColumn\"",
        "\"Line\"",
        "\"3DLine\"",
        "\"3DPie\"",
        "\"Pie\"",
        "\"XYScatter\"",
        "\"3DArea\"",
        "\"Area\"",
        "\"Doughnut\"",
        "\"Radar\"",
        "\"Histogram\"",
        "\"Boxwhisker\"",
        "\"Pareto\"",
        "\"RegionMap\"",
        "\"Treemap\"",
        "\"Waterfall\"",
        "\"Sunburst\"",
        "\"Funnel\"",
        "\"Auto\"",
        "\"Columns\"",
        "\"Rows\"",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"ColumnClustered\"",
        "\"ColumnStacked\"",
        "\"ColumnStacked100\"",
        "\"3DColumnClustered\"",
        "\"3DColumnStacked\"",
        "\"3DColumnStacked100\"",
        "\"BarClustered\"",
        "\"BarStacked\"",
        "\"BarStacked100\"",
        "\"3DBarClustered\"",
        "\"3DBarStacked\"",
        "\"3DBarStacked100\"",
        "\"LineStacked\"",
        "\"LineStacked100\"",
        "\"LineMarkers\"",
        "\"LineMarkersStacked\"",
        "\"LineMarkersStacked100\"",
        "\"PieOfPie\"",
        "\"PieExploded\"",
        "\"3DPieExploded\"",
        "\"BarOfPie\"",
        "\"XYScatterSmooth\"",
        "\"XYScatterSmoothNoMarkers\"",
        "\"XYScatterLines\"",
        "\"XYScatterLinesNoMarkers\"",
        "\"AreaStacked\"",
        "\"AreaStacked100\"",
        "\"3DAreaStacked\"",
        "\"3DAreaStacked100\"",
        "\"DoughnutExploded\"",
        "\"RadarMarkers\"",
        "\"RadarFilled\"",
        "\"Surface\"",
        "\"SurfaceWireframe\"",
        "\"SurfaceTopView\"",
        "\"SurfaceTopViewWireframe\"",
        "\"Bubble\"",
        "\"Bubble3DEffect\"",
        "\"StockHLC\"",
        "\"StockOHLC\"",
        "\"StockVHLC\"",
        "\"StockVOHLC\"",
        "\"CylinderColClustered\"",
        "\"CylinderColStacked\"",
        "\"CylinderColStacked100\"",
        "\"CylinderBarClustered\"",
        "\"CylinderBarStacked\"",
        "\"CylinderBarStacked100\"",
        "\"CylinderCol\"",
        "\"ConeColClustered\"",
        "\"ConeColStacked\"",
        "\"ConeColStacked100\"",
        "\"ConeBarClustered\"",
        "\"ConeBarStacked\"",
        "\"ConeBarStacked100\"",
        "\"ConeCol\"",
        "\"PyramidColClustered\"",
        "\"PyramidColStacked\"",
        "\"PyramidColStacked100\"",
        "\"PyramidBarClustered\"",
        "\"PyramidBarStacked\"",
        "\"PyramidBarStacked100\"",
        "\"PyramidCol\"",
        "\"3DColumn\"",
        "\"Line\"",
        "\"3DLine\"",
        "\"3DPie\"",
        "\"Pie\"",
        "\"XYScatter\"",
        "\"3DArea\"",
        "\"Area\"",
        "\"Doughnut\"",
        "\"Radar\"",
        "\"Histogram\"",
        "\"Boxwhisker\"",
        "\"Pareto\"",
        "\"RegionMap\"",
        "\"Treemap\"",
        "\"Waterfall\"",
        "\"Sunburst\"",
        "\"Funnel\"",
        "\"NotPlotted\"",
        "\"Zero\"",
        "\"Interplotted\"",
        "string",
        "string",
        "\"Rows\"",
        "\"Columns\"",
        "string",
        "\"Fit\"",
        "\"FitAndCenter\"",
        "\"Fill\"",
        "string",
        "\"Auto\"",
        "\"Columns\"",
        "\"Rows\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Primary\"",
        "\"Secondary\"",
        "\"Invalid\"",
        "\"ColumnClustered\"",
        "\"ColumnStacked\"",
        "\"ColumnStacked100\"",
        "\"3DColumnClustered\"",
        "\"3DColumnStacked\"",
        "\"3DColumnStacked100\"",
        "\"BarClustered\"",
        "\"BarStacked\"",
        "\"BarStacked100\"",
        "\"3DBarClustered\"",
        "\"3DBarStacked\"",
        "\"3DBarStacked100\"",
        "\"LineStacked\"",
        "\"LineStacked100\"",
        "\"LineMarkers\"",
        "\"LineMarkersStacked\"",
        "\"LineMarkersStacked100\"",
        "\"PieOfPie\"",
        "\"PieExploded\"",
        "\"3DPieExploded\"",
        "\"BarOfPie\"",
        "\"XYScatterSmooth\"",
        "\"XYScatterSmoothNoMarkers\"",
        "\"XYScatterLines\"",
        "\"XYScatterLinesNoMarkers\"",
        "\"AreaStacked\"",
        "\"AreaStacked100\"",
        "\"3DAreaStacked\"",
        "\"3DAreaStacked100\"",
        "\"DoughnutExploded\"",
        "\"RadarMarkers\"",
        "\"RadarFilled\"",
        "\"Surface\"",
        "\"SurfaceWireframe\"",
        "\"SurfaceTopView\"",
        "\"SurfaceTopViewWireframe\"",
        "\"Bubble\"",
        "\"Bubble3DEffect\"",
        "\"StockHLC\"",
        "\"StockOHLC\"",
        "\"StockVHLC\"",
        "\"StockVOHLC\"",
        "\"CylinderColClustered\"",
        "\"CylinderColStacked\"",
        "\"CylinderColStacked100\"",
        "\"CylinderBarClustered\"",
        "\"CylinderBarStacked\"",
        "\"CylinderBarStacked100\"",
        "\"CylinderCol\"",
        "\"ConeColClustered\"",
        "\"ConeColStacked\"",
        "\"ConeColStacked100\"",
        "\"ConeBarClustered\"",
        "\"ConeBarStacked\"",
        "\"ConeBarStacked100\"",
        "\"ConeCol\"",
        "\"PyramidColClustered\"",
        "\"PyramidColStacked\"",
        "\"PyramidColStacked100\"",
        "\"PyramidBarClustered\"",
        "\"PyramidBarStacked\"",
        "\"PyramidBarStacked100\"",
        "\"PyramidCol\"",
        "\"3DColumn\"",
        "\"Line\"",
        "\"3DLine\"",
        "\"3DPie\"",
        "\"Pie\"",
        "\"XYScatter\"",
        "\"3DArea\"",
        "\"Area\"",
        "\"Doughnut\"",
        "\"Radar\"",
        "\"Histogram\"",
        "\"Boxwhisker\"",
        "\"Pareto\"",
        "\"RegionMap\"",
        "\"Treemap\"",
        "\"Waterfall\"",
        "\"Sunburst\"",
        "\"Funnel\"",
        "string",
        "string",
        "\"Invalid\"",
        "\"Automatic\"",
        "\"None\"",
        "\"Square\"",
        "\"Diamond\"",
        "\"Triangle\"",
        "\"X\"",
        "\"Star\"",
        "\"Dot\"",
        "\"Dash\"",
        "\"Circle\"",
        "\"Plus\"",
        "\"Picture\"",
        "string",
        "\"SplitByPosition\"",
        "\"SplitByValue\"",
        "\"SplitByPercentValue\"",
        "\"SplitByCustomSplit\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"Automatic\"",
        "\"None\"",
        "\"Square\"",
        "\"Diamond\"",
        "\"Triangle\"",
        "\"X\"",
        "\"Star\"",
        "\"Dot\"",
        "\"Dash\"",
        "\"Circle\"",
        "\"Plus\"",
        "\"Picture\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"Category\"",
        "\"Value\"",
        "\"Series\"",
        "\"Primary\"",
        "\"Secondary\"",
        "string",
        "string",
        "string",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Primary\"",
        "\"Secondary\"",
        "\"Days\"",
        "\"Months\"",
        "\"Years\"",
        "\"Automatic\"",
        "\"TextAxis\"",
        "\"DateAxis\"",
        "\"None\"",
        "\"Hundreds\"",
        "\"Thousands\"",
        "\"TenThousands\"",
        "\"HundredThousands\"",
        "\"Millions\"",
        "\"TenMillions\"",
        "\"HundredMillions\"",
        "\"Billions\"",
        "\"Trillions\"",
        "\"Custom\"",
        "\"None\"",
        "\"Cross\"",
        "\"Inside\"",
        "\"Outside\"",
        "\"Days\"",
        "\"Months\"",
        "\"Years\"",
        "\"None\"",
        "\"Cross\"",
        "\"Inside\"",
        "\"Outside\"",
        "\"Days\"",
        "\"Months\"",
        "\"Years\"",
        "string",
        "\"Automatic\"",
        "\"Maximum\"",
        "\"Minimum\"",
        "\"Custom\"",
        "\"Linear\"",
        "\"Logarithmic\"",
        "\"NextToAxis\"",
        "\"High\"",
        "\"Low\"",
        "\"None\"",
        "\"Invalid\"",
        "\"Category\"",
        "\"Value\"",
        "\"Series\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "\"Invalid\"",
        "\"None\"",
        "\"Center\"",
        "\"InsideEnd\"",
        "\"InsideBase\"",
        "\"OutsideEnd\"",
        "\"Left\"",
        "\"Right\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"BestFit\"",
        "\"Callout\"",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "\"Invalid\"",
        "\"None\"",
        "\"Center\"",
        "\"InsideEnd\"",
        "\"InsideBase\"",
        "\"OutsideEnd\"",
        "\"Left\"",
        "\"Right\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"BestFit\"",
        "\"Callout\"",
        "string",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"Left\"",
        "\"Right\"",
        "\"Corner\"",
        "\"Custom\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Automatic\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"Left\"",
        "\"Right\"",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Grey25\"",
        "\"Grey50\"",
        "\"Grey75\"",
        "\"Automatic\"",
        "\"RoundDot\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Grey25\"",
        "\"Grey50\"",
        "\"Grey75\"",
        "\"Automatic\"",
        "\"RoundDot\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"None\"",
        "\"Single\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Linear\"",
        "\"Exponential\"",
        "\"Logarithmic\"",
        "\"MovingAverage\"",
        "\"Polynomial\"",
        "\"Power\"",
        "string",
        "string",
        "string",
        "string",
        "\"Linear\"",
        "\"Exponential\"",
        "\"Logarithmic\"",
        "\"MovingAverage\"",
        "\"Polynomial\"",
        "\"Power\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Automatic\"",
        "\"Custom\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Rows\"",
        "\"Columns\"",
        "\"PinYin\"",
        "\"StrokeCount\"",
        "string",
        "string",
        "\"PinYin\"",
        "\"StrokeCount\"",
        "\"PinYin\"",
        "\"StrokeCount\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Normal\"",
        "\"TextAsNumber\"",
        "\"Value\"",
        "\"CellColor\"",
        "\"FontColor\"",
        "\"Icon\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"And\"",
        "\"Or\"",
        "\"Unknown\"",
        "\"AboveAverage\"",
        "\"AllDatesInPeriodApril\"",
        "\"AllDatesInPeriodAugust\"",
        "\"AllDatesInPeriodDecember\"",
        "\"AllDatesInPeriodFebruray\"",
        "\"AllDatesInPeriodJanuary\"",
        "\"AllDatesInPeriodJuly\"",
        "\"AllDatesInPeriodJune\"",
        "\"AllDatesInPeriodMarch\"",
        "\"AllDatesInPeriodMay\"",
        "\"AllDatesInPeriodNovember\"",
        "\"AllDatesInPeriodOctober\"",
        "\"AllDatesInPeriodQuarter1\"",
        "\"AllDatesInPeriodQuarter2\"",
        "\"AllDatesInPeriodQuarter3\"",
        "\"AllDatesInPeriodQuarter4\"",
        "\"AllDatesInPeriodSeptember\"",
        "\"BelowAverage\"",
        "\"LastMonth\"",
        "\"LastQuarter\"",
        "\"LastWeek\"",
        "\"LastYear\"",
        "\"NextMonth\"",
        "\"NextQuarter\"",
        "\"NextWeek\"",
        "\"NextYear\"",
        "\"ThisMonth\"",
        "\"ThisQuarter\"",
        "\"ThisWeek\"",
        "\"ThisYear\"",
        "\"Today\"",
        "\"Tomorrow\"",
        "\"YearToDate\"",
        "\"Yesterday\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Unknown\"",
        "\"AboveAverage\"",
        "\"AllDatesInPeriodApril\"",
        "\"AllDatesInPeriodAugust\"",
        "\"AllDatesInPeriodDecember\"",
        "\"AllDatesInPeriodFebruray\"",
        "\"AllDatesInPeriodJanuary\"",
        "\"AllDatesInPeriodJuly\"",
        "\"AllDatesInPeriodJune\"",
        "\"AllDatesInPeriodMarch\"",
        "\"AllDatesInPeriodMay\"",
        "\"AllDatesInPeriodNovember\"",
        "\"AllDatesInPeriodOctober\"",
        "\"AllDatesInPeriodQuarter1\"",
        "\"AllDatesInPeriodQuarter2\"",
        "\"AllDatesInPeriodQuarter3\"",
        "\"AllDatesInPeriodQuarter4\"",
        "\"AllDatesInPeriodSeptember\"",
        "\"BelowAverage\"",
        "\"LastMonth\"",
        "\"LastQuarter\"",
        "\"LastWeek\"",
        "\"LastYear\"",
        "\"NextMonth\"",
        "\"NextQuarter\"",
        "\"NextWeek\"",
        "\"NextYear\"",
        "\"ThisMonth\"",
        "\"ThisQuarter\"",
        "\"ThisWeek\"",
        "\"ThisYear\"",
        "\"Today\"",
        "\"Tomorrow\"",
        "\"YearToDate\"",
        "\"Yesterday\"",
        "\"BottomItems\"",
        "\"BottomPercent\"",
        "\"CellColor\"",
        "\"Dynamic\"",
        "\"FontColor\"",
        "\"Values\"",
        "\"TopItems\"",
        "\"TopPercent\"",
        "\"Icon\"",
        "\"Custom\"",
        "\"And\"",
        "\"Or\"",
        "string",
        "string",
        "\"Year\"",
        "\"Month\"",
        "\"Day\"",
        "\"Hour\"",
        "\"Minute\"",
        "\"Second\"",
        "\"Invalid\"",
        "\"ThreeArrows\"",
        "\"ThreeArrowsGray\"",
        "\"ThreeFlags\"",
        "\"ThreeTrafficLights1\"",
        "\"ThreeTrafficLights2\"",
        "\"ThreeSigns\"",
        "\"ThreeSymbols\"",
        "\"ThreeSymbols2\"",
        "\"FourArrows\"",
        "\"FourArrowsGray\"",
        "\"FourRedToBlack\"",
        "\"FourRating\"",
        "\"FourTrafficLights\"",
        "\"FiveArrows\"",
        "\"FiveArrowsGray\"",
        "\"FiveRating\"",
        "\"FiveQuarters\"",
        "\"ThreeStars\"",
        "\"ThreeTriangles\"",
        "\"FiveBoxes\"",
        "\"LinkedEntityFinanceIcon\"",
        "\"LinkedEntityMapIcon\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Compact\"",
        "\"Tabular\"",
        "\"Outline\"",
        "\"AtTop\"",
        "\"AtBottom\"",
        "\"Off\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Unknown\"",
        "\"Automatic\"",
        "\"Sum\"",
        "\"Count\"",
        "\"Average\"",
        "\"Max\"",
        "\"Min\"",
        "\"Product\"",
        "\"CountNumbers\"",
        "\"StandardDeviation\"",
        "\"StandardDeviationP\"",
        "\"Variance\"",
        "\"VarianceP\"",
        "string",
        "string",
        "string",
        "string",
        "\"Unknown\"",
        "\"None\"",
        "\"PercentOfGrandTotal\"",
        "\"PercentOfRowTotal\"",
        "\"PercentOfColumnTotal\"",
        "\"PercentOfParentRowTotal\"",
        "\"PercentOfParentColumnTotal\"",
        "\"PercentOfParentTotal\"",
        "\"PercentOf\"",
        "\"RunningTotal\"",
        "\"PercentRunningTotal\"",
        "\"DifferenceFrom\"",
        "\"PercentDifferenceFrom\"",
        "\"RankAscending\"",
        "\"RankDecending\"",
        "\"Index\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Ascending\"",
        "\"Descending\"",
        "\"Unknown\"",
        "\"Automatic\"",
        "\"Sum\"",
        "\"Count\"",
        "\"Average\"",
        "\"Max\"",
        "\"Min\"",
        "\"Product\"",
        "\"CountNumbers\"",
        "\"StandardDeviation\"",
        "\"StandardDeviationP\"",
        "\"Variance\"",
        "\"VarianceP\"",
        "\"Unknown\"",
        "\"None\"",
        "\"PercentOfGrandTotal\"",
        "\"PercentOfRowTotal\"",
        "\"PercentOfColumnTotal\"",
        "\"PercentOfParentRowTotal\"",
        "\"PercentOfParentColumnTotal\"",
        "\"PercentOfParentTotal\"",
        "\"PercentOf\"",
        "\"RunningTotal\"",
        "\"PercentRunningTotal\"",
        "\"DifferenceFrom\"",
        "\"PercentDifferenceFrom\"",
        "\"RankAscending\"",
        "\"RankDecending\"",
        "\"Index\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Number\"",
        "\"Boolean\"",
        "\"Date\"",
        "\"String\"",
        "\"Float\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Custom\"",
        "\"DataBar\"",
        "\"ColorScale\"",
        "\"IconSet\"",
        "\"TopBottom\"",
        "\"PresetCriteria\"",
        "\"ContainsText\"",
        "\"CellValue\"",
        "string",
        "string",
        "string",
        "string",
        "\"Custom\"",
        "\"DataBar\"",
        "\"ColorScale\"",
        "\"IconSet\"",
        "\"TopBottom\"",
        "\"PresetCriteria\"",
        "\"ContainsText\"",
        "\"CellValue\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Automatic\"",
        "\"None\"",
        "\"CellMidPoint\"",
        "\"Context\"",
        "\"LeftToRight\"",
        "\"RightToLeft\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"Automatic\"",
        "\"LowestValue\"",
        "\"HighestValue\"",
        "\"Number\"",
        "\"Percent\"",
        "\"Formula\"",
        "\"Percentile\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"ThreeArrows\"",
        "\"ThreeArrowsGray\"",
        "\"ThreeFlags\"",
        "\"ThreeTrafficLights1\"",
        "\"ThreeTrafficLights2\"",
        "\"ThreeSigns\"",
        "\"ThreeSymbols\"",
        "\"ThreeSymbols2\"",
        "\"FourArrows\"",
        "\"FourArrowsGray\"",
        "\"FourRedToBlack\"",
        "\"FourRating\"",
        "\"FourTrafficLights\"",
        "\"FiveArrows\"",
        "\"FiveArrowsGray\"",
        "\"FiveRating\"",
        "\"FiveQuarters\"",
        "\"ThreeStars\"",
        "\"ThreeTriangles\"",
        "\"FiveBoxes\"",
        "\"LinkedEntityFinanceIcon\"",
        "\"LinkedEntityMapIcon\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"GreaterThan\"",
        "\"GreaterThanOrEqual\"",
        "\"Invalid\"",
        "\"Number\"",
        "\"Percent\"",
        "\"Formula\"",
        "\"Percentile\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"LowestValue\"",
        "\"HighestValue\"",
        "\"Number\"",
        "\"Percent\"",
        "\"Formula\"",
        "\"Percentile\"",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"TopItems\"",
        "\"TopPercent\"",
        "\"BottomItems\"",
        "\"BottomPercent\"",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"Blanks\"",
        "\"NonBlanks\"",
        "\"Errors\"",
        "\"NonErrors\"",
        "\"Yesterday\"",
        "\"Today\"",
        "\"Tomorrow\"",
        "\"LastSevenDays\"",
        "\"LastWeek\"",
        "\"ThisWeek\"",
        "\"NextWeek\"",
        "\"LastMonth\"",
        "\"ThisMonth\"",
        "\"NextMonth\"",
        "\"AboveAverage\"",
        "\"BelowAverage\"",
        "\"EqualOrAboveAverage\"",
        "\"EqualOrBelowAverage\"",
        "\"OneStdDevAboveAverage\"",
        "\"OneStdDevBelowAverage\"",
        "\"TwoStdDevAboveAverage\"",
        "\"TwoStdDevBelowAverage\"",
        "\"ThreeStdDevAboveAverage\"",
        "\"ThreeStdDevBelowAverage\"",
        "\"UniqueValues\"",
        "\"DuplicateValues\"",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"Contains\"",
        "\"NotContains\"",
        "\"BeginsWith\"",
        "\"EndsWith\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"Between\"",
        "\"NotBetween\"",
        "\"EqualTo\"",
        "\"NotEqualTo\"",
        "\"GreaterThan\"",
        "\"LessThan\"",
        "\"GreaterThanOrEqual\"",
        "\"LessThanOrEqual\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"None\"",
        "\"Single\"",
        "\"Double\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"EdgeTop\"",
        "\"EdgeBottom\"",
        "\"EdgeLeft\"",
        "\"EdgeRight\"",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "string",
        "string",
        "string",
        "string",
        "\"EdgeTop\"",
        "\"EdgeBottom\"",
        "\"EdgeLeft\"",
        "\"EdgeRight\"",
        "string",
        "string",
        "\"General\"",
        "\"Left\"",
        "\"Center\"",
        "\"Right\"",
        "\"Fill\"",
        "\"Justify\"",
        "\"CenterAcrossSelection\"",
        "\"Distributed\"",
        "string",
        "string",
        "string",
        "\"Context\"",
        "\"LeftToRight\"",
        "\"RightToLeft\"",
        "\"Top\"",
        "\"Center\"",
        "\"Bottom\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"Category\"",
        "\"Value\"",
        "\"Series\"",
        "\"Primary\"",
        "\"Secondary\"",
        "\"Linear\"",
        "\"Logarithmic\"",
        "\"Automatic\"",
        "\"Maximum\"",
        "\"Minimum\"",
        "\"Custom\"",
        "\"None\"",
        "\"Cross\"",
        "\"Inside\"",
        "\"Outside\"",
        "\"NextToAxis\"",
        "\"High\"",
        "\"Low\"",
        "\"None\"",
        "\"None\"",
        "\"Hundreds\"",
        "\"Thousands\"",
        "\"TenThousands\"",
        "\"HundredThousands\"",
        "\"Millions\"",
        "\"TenMillions\"",
        "\"HundredMillions\"",
        "\"Billions\"",
        "\"Trillions\"",
        "\"Custom\"",
        "\"Days\"",
        "\"Months\"",
        "\"Years\"",
        "\"Automatic\"",
        "\"TextAxis\"",
        "\"DateAxis\"",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Grey25\"",
        "\"Grey50\"",
        "\"Grey75\"",
        "\"Automatic\"",
        "\"RoundDot\"",
        "\"Invalid\"",
        "\"None\"",
        "\"Center\"",
        "\"InsideEnd\"",
        "\"InsideBase\"",
        "\"OutsideEnd\"",
        "\"Left\"",
        "\"Right\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"BestFit\"",
        "\"Callout\"",
        "\"Automatic\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"Left\"",
        "\"Right\"",
        "\"Invalid\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"Left\"",
        "\"Right\"",
        "\"Corner\"",
        "\"Custom\"",
        "\"Invalid\"",
        "\"Automatic\"",
        "\"None\"",
        "\"Square\"",
        "\"Diamond\"",
        "\"Triangle\"",
        "\"X\"",
        "\"Star\"",
        "\"Dot\"",
        "\"Dash\"",
        "\"Circle\"",
        "\"Plus\"",
        "\"Picture\"",
        "\"Automatic\"",
        "\"Custom\"",
        "\"Auto\"",
        "\"Columns\"",
        "\"Rows\"",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Invalid\"",
        "\"ColumnClustered\"",
        "\"ColumnStacked\"",
        "\"ColumnStacked100\"",
        "\"3DColumnClustered\"",
        "\"3DColumnStacked\"",
        "\"3DColumnStacked100\"",
        "\"BarClustered\"",
        "\"BarStacked\"",
        "\"BarStacked100\"",
        "\"3DBarClustered\"",
        "\"3DBarStacked\"",
        "\"3DBarStacked100\"",
        "\"LineStacked\"",
        "\"LineStacked100\"",
        "\"LineMarkers\"",
        "\"LineMarkersStacked\"",
        "\"LineMarkersStacked100\"",
        "\"PieOfPie\"",
        "\"PieExploded\"",
        "\"3DPieExploded\"",
        "\"BarOfPie\"",
        "\"XYScatterSmooth\"",
        "\"XYScatterSmoothNoMarkers\"",
        "\"XYScatterLines\"",
        "\"XYScatterLinesNoMarkers\"",
        "\"AreaStacked\"",
        "\"AreaStacked100\"",
        "\"3DAreaStacked\"",
        "\"3DAreaStacked100\"",
        "\"DoughnutExploded\"",
        "\"RadarMarkers\"",
        "\"RadarFilled\"",
        "\"Surface\"",
        "\"SurfaceWireframe\"",
        "\"SurfaceTopView\"",
        "\"SurfaceTopViewWireframe\"",
        "\"Bubble\"",
        "\"Bubble3DEffect\"",
        "\"StockHLC\"",
        "\"StockOHLC\"",
        "\"StockVHLC\"",
        "\"StockVOHLC\"",
        "\"CylinderColClustered\"",
        "\"CylinderColStacked\"",
        "\"CylinderColStacked100\"",
        "\"CylinderBarClustered\"",
        "\"CylinderBarStacked\"",
        "\"CylinderBarStacked100\"",
        "\"CylinderCol\"",
        "\"ConeColClustered\"",
        "\"ConeColStacked\"",
        "\"ConeColStacked100\"",
        "\"ConeBarClustered\"",
        "\"ConeBarStacked\"",
        "\"ConeBarStacked100\"",
        "\"ConeCol\"",
        "\"PyramidColClustered\"",
        "\"PyramidColStacked\"",
        "\"PyramidColStacked100\"",
        "\"PyramidBarClustered\"",
        "\"PyramidBarStacked\"",
        "\"PyramidBarStacked100\"",
        "\"PyramidCol\"",
        "\"3DColumn\"",
        "\"Line\"",
        "\"3DLine\"",
        "\"3DPie\"",
        "\"Pie\"",
        "\"XYScatter\"",
        "\"3DArea\"",
        "\"Area\"",
        "\"Doughnut\"",
        "\"Radar\"",
        "\"Histogram\"",
        "\"Boxwhisker\"",
        "\"Pareto\"",
        "\"RegionMap\"",
        "\"Treemap\"",
        "\"Waterfall\"",
        "\"Sunburst\"",
        "\"Funnel\"",
        "\"None\"",
        "\"Single\"",
        "\"NotPlotted\"",
        "\"Zero\"",
        "\"Interplotted\"",
        "\"Rows\"",
        "\"Columns\"",
        "\"SplitByPosition\"",
        "\"SplitByValue\"",
        "\"SplitByPercentValue\"",
        "\"SplitByCustomSplit\"",
        "\"ColorfulPalette1\"",
        "\"ColorfulPalette2\"",
        "\"ColorfulPalette3\"",
        "\"ColorfulPalette4\"",
        "\"MonochromaticPalette1\"",
        "\"MonochromaticPalette2\"",
        "\"MonochromaticPalette3\"",
        "\"MonochromaticPalette4\"",
        "\"MonochromaticPalette5\"",
        "\"MonochromaticPalette6\"",
        "\"MonochromaticPalette7\"",
        "\"MonochromaticPalette8\"",
        "\"MonochromaticPalette9\"",
        "\"MonochromaticPalette10\"",
        "\"MonochromaticPalette11\"",
        "\"MonochromaticPalette12\"",
        "\"MonochromaticPalette13\"",
        "\"Linear\"",
        "\"Exponential\"",
        "\"Logarithmic\"",
        "\"MovingAverage\"",
        "\"Polynomial\"",
        "\"Power\"",
        "\"Range\"",
        "\"Table\"",
        "\"Text\"",
        "\"EdgeTop\"",
        "\"EdgeBottom\"",
        "\"EdgeLeft\"",
        "\"EdgeRight\"",
        "\"InsideVertical\"",
        "\"InsideHorizontal\"",
        "\"DiagonalDown\"",
        "\"DiagonalUp\"",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Double\"",
        "\"SlantDashDot\"",
        "\"Hairline\"",
        "\"Thin\"",
        "\"Medium\"",
        "\"Thick\"",
        "\"Automatic\"",
        "\"AutomaticExceptTables\"",
        "\"Manual\"",
        "\"Recalculate\"",
        "\"Full\"",
        "\"FullRebuild\"",
        "\"All\"",
        "\"Formats\"",
        "\"Contents\"",
        "\"Hyperlinks\"",
        "\"RemoveHyperlinks\"",
        "\"Automatic\"",
        "\"None\"",
        "\"CellMidPoint\"",
        "\"Context\"",
        "\"LeftToRight\"",
        "\"RightToLeft\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"Custom\"",
        "\"DataBar\"",
        "\"ColorScale\"",
        "\"IconSet\"",
        "\"TopBottom\"",
        "\"PresetCriteria\"",
        "\"ContainsText\"",
        "\"CellValue\"",
        "\"Invalid\"",
        "\"Automatic\"",
        "\"LowestValue\"",
        "\"HighestValue\"",
        "\"Number\"",
        "\"Percent\"",
        "\"Formula\"",
        "\"Percentile\"",
        "\"Invalid\"",
        "\"Number\"",
        "\"Percent\"",
        "\"Formula\"",
        "\"Percentile\"",
        "\"Invalid\"",
        "\"LowestValue\"",
        "\"HighestValue\"",
        "\"Number\"",
        "\"Percent\"",
        "\"Formula\"",
        "\"Percentile\"",
        "\"Invalid\"",
        "\"TopItems\"",
        "\"TopPercent\"",
        "\"BottomItems\"",
        "\"BottomPercent\"",
        "\"Invalid\"",
        "\"Blanks\"",
        "\"NonBlanks\"",
        "\"Errors\"",
        "\"NonErrors\"",
        "\"Yesterday\"",
        "\"Today\"",
        "\"Tomorrow\"",
        "\"LastSevenDays\"",
        "\"LastWeek\"",
        "\"ThisWeek\"",
        "\"NextWeek\"",
        "\"LastMonth\"",
        "\"ThisMonth\"",
        "\"NextMonth\"",
        "\"AboveAverage\"",
        "\"BelowAverage\"",
        "\"EqualOrAboveAverage\"",
        "\"EqualOrBelowAverage\"",
        "\"OneStdDevAboveAverage\"",
        "\"OneStdDevBelowAverage\"",
        "\"TwoStdDevAboveAverage\"",
        "\"TwoStdDevBelowAverage\"",
        "\"ThreeStdDevAboveAverage\"",
        "\"ThreeStdDevBelowAverage\"",
        "\"UniqueValues\"",
        "\"DuplicateValues\"",
        "\"Invalid\"",
        "\"Contains\"",
        "\"NotContains\"",
        "\"BeginsWith\"",
        "\"EndsWith\"",
        "\"Invalid\"",
        "\"Between\"",
        "\"NotBetween\"",
        "\"EqualTo\"",
        "\"NotEqualTo\"",
        "\"GreaterThan\"",
        "\"LessThan\"",
        "\"GreaterThanOrEqual\"",
        "\"LessThanOrEqual\"",
        "\"Invalid\"",
        "\"GreaterThan\"",
        "\"GreaterThanOrEqual\"",
        "\"EdgeTop\"",
        "\"EdgeBottom\"",
        "\"EdgeLeft\"",
        "\"EdgeRight\"",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"None\"",
        "\"Single\"",
        "\"Double\"",
        "\"None\"",
        "\"WholeNumber\"",
        "\"Decimal\"",
        "\"List\"",
        "\"Date\"",
        "\"Time\"",
        "\"TextLength\"",
        "\"Custom\"",
        "\"Inconsistent\"",
        "\"MixedCriteria\"",
        "\"Between\"",
        "\"NotBetween\"",
        "\"EqualTo\"",
        "\"NotEqualTo\"",
        "\"GreaterThan\"",
        "\"LessThan\"",
        "\"GreaterThanOrEqualTo\"",
        "\"LessThanOrEqualTo\"",
        "\"Stop\"",
        "\"Warning\"",
        "\"Information\"",
        "\"Up\"",
        "\"Left\"",
        "\"Unknown\"",
        "\"AboveAverage\"",
        "\"AllDatesInPeriodApril\"",
        "\"AllDatesInPeriodAugust\"",
        "\"AllDatesInPeriodDecember\"",
        "\"AllDatesInPeriodFebruray\"",
        "\"AllDatesInPeriodJanuary\"",
        "\"AllDatesInPeriodJuly\"",
        "\"AllDatesInPeriodJune\"",
        "\"AllDatesInPeriodMarch\"",
        "\"AllDatesInPeriodMay\"",
        "\"AllDatesInPeriodNovember\"",
        "\"AllDatesInPeriodOctober\"",
        "\"AllDatesInPeriodQuarter1\"",
        "\"AllDatesInPeriodQuarter2\"",
        "\"AllDatesInPeriodQuarter3\"",
        "\"AllDatesInPeriodQuarter4\"",
        "\"AllDatesInPeriodSeptember\"",
        "\"BelowAverage\"",
        "\"LastMonth\"",
        "\"LastQuarter\"",
        "\"LastWeek\"",
        "\"LastYear\"",
        "\"NextMonth\"",
        "\"NextQuarter\"",
        "\"NextWeek\"",
        "\"NextYear\"",
        "\"ThisMonth\"",
        "\"ThisQuarter\"",
        "\"ThisWeek\"",
        "\"ThisYear\"",
        "\"Today\"",
        "\"Tomorrow\"",
        "\"YearToDate\"",
        "\"Yesterday\"",
        "\"Year\"",
        "\"Month\"",
        "\"Day\"",
        "\"Hour\"",
        "\"Minute\"",
        "\"Second\"",
        "\"BottomItems\"",
        "\"BottomPercent\"",
        "\"CellColor\"",
        "\"Dynamic\"",
        "\"FontColor\"",
        "\"Values\"",
        "\"TopItems\"",
        "\"TopPercent\"",
        "\"Icon\"",
        "\"Custom\"",
        "\"And\"",
        "\"Or\"",
        "\"General\"",
        "\"Left\"",
        "\"Center\"",
        "\"Right\"",
        "\"Fill\"",
        "\"Justify\"",
        "\"CenterAcrossSelection\"",
        "\"Distributed\"",
        "\"Invalid\"",
        "\"ThreeArrows\"",
        "\"ThreeArrowsGray\"",
        "\"ThreeFlags\"",
        "\"ThreeTrafficLights1\"",
        "\"ThreeTrafficLights2\"",
        "\"ThreeSigns\"",
        "\"ThreeSymbols\"",
        "\"ThreeSymbols2\"",
        "\"FourArrows\"",
        "\"FourArrowsGray\"",
        "\"FourRedToBlack\"",
        "\"FourRating\"",
        "\"FourTrafficLights\"",
        "\"FiveArrows\"",
        "\"FiveArrowsGray\"",
        "\"FiveRating\"",
        "\"FiveQuarters\"",
        "\"ThreeStars\"",
        "\"ThreeTriangles\"",
        "\"FiveBoxes\"",
        "\"LinkedEntityFinanceIcon\"",
        "\"LinkedEntityMapIcon\"",
        "\"Fit\"",
        "\"FitAndCenter\"",
        "\"Fill\"",
        "\"Down\"",
        "\"Right\"",
        "\"Worksheet\"",
        "\"Workbook\"",
        "\"String\"",
        "\"Integer\"",
        "\"Double\"",
        "\"Boolean\"",
        "\"Range\"",
        "\"Error\"",
        "\"Array\"",
        "\"None\"",
        "\"Single\"",
        "\"Double\"",
        "\"SingleAccountant\"",
        "\"DoubleAccountant\"",
        "\"Visible\"",
        "\"Hidden\"",
        "\"VeryHidden\"",
        "\"Unknown\"",
        "\"Empty\"",
        "\"String\"",
        "\"Integer\"",
        "\"Double\"",
        "\"Boolean\"",
        "\"Error\"",
        "\"RichValue\"",
        "\"Rows\"",
        "\"Columns\"",
        "\"Value\"",
        "\"CellColor\"",
        "\"FontColor\"",
        "\"Icon\"",
        "\"Normal\"",
        "\"TextAsNumber\"",
        "\"PinYin\"",
        "\"StrokeCount\"",
        "\"Top\"",
        "\"Center\"",
        "\"Bottom\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Number\"",
        "\"Boolean\"",
        "\"Date\"",
        "\"String\"",
        "\"Float\"",
        "\"Local\"",
        "\"Remote\"",
        "\"Unknown\"",
        "\"RangeEdited\"",
        "\"RowInserted\"",
        "\"RowDeleted\"",
        "\"ColumnInserted\"",
        "\"ColumnDeleted\"",
        "\"CellInserted\"",
        "\"CellDeleted\"",
        "\"WorksheetChanged\"",
        "\"WorksheetSelectionChanged\"",
        "\"WorksheetAdded\"",
        "\"WorksheetActivated\"",
        "\"WorksheetDeactivated\"",
        "\"TableChanged\"",
        "\"TableSelectionChanged\"",
        "\"WorksheetDeleted\"",
        "\"ChartAdded\"",
        "\"ChartActivated\"",
        "\"ChartDeactivated\"",
        "\"ChartDeleted\"",
        "\"WorksheetCalculated\"",
        "\"VisualSelectionChanged\"",
        "\"AgaveVisualUpdate\"",
        "\"TableAdded\"",
        "\"TableDeleted\"",
        "\"TableFiltered\"",
        "\"WorksheetFiltered\"",
        "\"ShapeActivated\"",
        "\"ShapeDeactivated\"",
        "\"VisualChange\"",
        "\"WorkbookAutoSaveSettingChanged\"",
        "\"WorksheetFormatChanged\"",
        "\"Title\"",
        "\"Subject\"",
        "\"Author\"",
        "\"Keywords\"",
        "\"Comments\"",
        "\"Template\"",
        "\"LastAuth\"",
        "\"Revision\"",
        "\"AppName\"",
        "\"LastPrint\"",
        "\"Creation\"",
        "\"LastSave\"",
        "\"Category\"",
        "\"Format\"",
        "\"Manager\"",
        "\"Company\"",
        "\"AtTop\"",
        "\"AtBottom\"",
        "\"Off\"",
        "\"Compact\"",
        "\"Tabular\"",
        "\"Outline\"",
        "\"Normal\"",
        "\"Unlocked\"",
        "\"None\"",
        "\"Portrait\"",
        "\"Landscape\"",
        "\"Context\"",
        "\"LeftToRight\"",
        "\"RightToLeft\"",
        "\"Normal\"",
        "\"Comma\"",
        "\"Currency\"",
        "\"Percent\"",
        "\"WholeComma\"",
        "\"WholeDollar\"",
        "\"Hlink\"",
        "\"HlinkTrav\"",
        "\"Note\"",
        "\"WarningText\"",
        "\"Emphasis1\"",
        "\"Emphasis2\"",
        "\"Emphasis3\"",
        "\"SheetTitle\"",
        "\"Heading1\"",
        "\"Heading2\"",
        "\"Heading3\"",
        "\"Heading4\"",
        "\"Input\"",
        "\"Output\"",
        "\"Calculation\"",
        "\"CheckCell\"",
        "\"LinkedCell\"",
        "\"Total\"",
        "\"Good\"",
        "\"Bad\"",
        "\"Neutral\"",
        "\"Accent1\"",
        "\"Accent1_20\"",
        "\"Accent1_40\"",
        "\"Accent1_60\"",
        "\"Accent2\"",
        "\"Accent2_20\"",
        "\"Accent2_40\"",
        "\"Accent2_60\"",
        "\"Accent3\"",
        "\"Accent3_20\"",
        "\"Accent3_40\"",
        "\"Accent3_60\"",
        "\"Accent4\"",
        "\"Accent4_20\"",
        "\"Accent4_40\"",
        "\"Accent4_60\"",
        "\"Accent5\"",
        "\"Accent5_20\"",
        "\"Accent5_40\"",
        "\"Accent5_60\"",
        "\"Accent6\"",
        "\"Accent6_20\"",
        "\"Accent6_40\"",
        "\"Accent6_60\"",
        "\"ExplanatoryText\"",
        "\"None\"",
        "\"Before\"",
        "\"After\"",
        "\"Beginning\"",
        "\"End\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"AccessDenied\"",
        "\"ApiNotFound\"",
        "\"Conflict\"",
        "\"GeneralException\"",
        "\"InsertDeleteConflict\"",
        "\"InvalidArgument\"",
        "\"InvalidBinding\"",
        "\"InvalidOperation\"",
        "\"InvalidReference\"",
        "\"InvalidSelection\"",
        "\"ItemAlreadyExists\"",
        "\"ItemNotFound\"",
        "\"NonBlankCellOffSheet\"",
        "\"NotImplemented\"",
        "\"UnsupportedOperation\"",
        "\"InvalidOperationInCellEditMode\"",
        "\"Automatic\"",
        "\"AutomaticExceptTables\"",
        "\"Manual\"",
        "string",
        "string",
        "\"Visible\"",
        "\"Hidden\"",
        "\"VeryHidden\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"General\"",
        "\"Left\"",
        "\"Center\"",
        "\"Right\"",
        "\"Fill\"",
        "\"Justify\"",
        "\"CenterAcrossSelection\"",
        "\"Distributed\"",
        "\"Top\"",
        "\"Center\"",
        "\"Bottom\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Double\"",
        "\"SlantDashDot\"",
        "\"Hairline\"",
        "\"Thin\"",
        "\"Medium\"",
        "\"Thick\"",
        "string",
        "string",
        "\"None\"",
        "\"Single\"",
        "\"Double\"",
        "\"SingleAccountant\"",
        "\"DoubleAccountant\"",
        "\"Invalid\"",
        "\"ColumnClustered\"",
        "\"ColumnStacked\"",
        "\"ColumnStacked100\"",
        "\"3DColumnClustered\"",
        "\"3DColumnStacked\"",
        "\"3DColumnStacked100\"",
        "\"BarClustered\"",
        "\"BarStacked\"",
        "\"BarStacked100\"",
        "\"3DBarClustered\"",
        "\"3DBarStacked\"",
        "\"3DBarStacked100\"",
        "\"LineStacked\"",
        "\"LineStacked100\"",
        "\"LineMarkers\"",
        "\"LineMarkersStacked\"",
        "\"LineMarkersStacked100\"",
        "\"PieOfPie\"",
        "\"PieExploded\"",
        "\"3DPieExploded\"",
        "\"BarOfPie\"",
        "\"XYScatterSmooth\"",
        "\"XYScatterSmoothNoMarkers\"",
        "\"XYScatterLines\"",
        "\"XYScatterLinesNoMarkers\"",
        "\"AreaStacked\"",
        "\"AreaStacked100\"",
        "\"3DAreaStacked\"",
        "\"3DAreaStacked100\"",
        "\"DoughnutExploded\"",
        "\"RadarMarkers\"",
        "\"RadarFilled\"",
        "\"Surface\"",
        "\"SurfaceWireframe\"",
        "\"SurfaceTopView\"",
        "\"SurfaceTopViewWireframe\"",
        "\"Bubble\"",
        "\"Bubble3DEffect\"",
        "\"StockHLC\"",
        "\"StockOHLC\"",
        "\"StockVHLC\"",
        "\"StockVOHLC\"",
        "\"CylinderColClustered\"",
        "\"CylinderColStacked\"",
        "\"CylinderColStacked100\"",
        "\"CylinderBarClustered\"",
        "\"CylinderBarStacked\"",
        "\"CylinderBarStacked100\"",
        "\"CylinderCol\"",
        "\"ConeColClustered\"",
        "\"ConeColStacked\"",
        "\"ConeColStacked100\"",
        "\"ConeBarClustered\"",
        "\"ConeBarStacked\"",
        "\"ConeBarStacked100\"",
        "\"ConeCol\"",
        "\"PyramidColClustered\"",
        "\"PyramidColStacked\"",
        "\"PyramidColStacked100\"",
        "\"PyramidBarClustered\"",
        "\"PyramidBarStacked\"",
        "\"PyramidBarStacked100\"",
        "\"PyramidCol\"",
        "\"3DColumn\"",
        "\"Line\"",
        "\"3DLine\"",
        "\"3DPie\"",
        "\"Pie\"",
        "\"XYScatter\"",
        "\"3DArea\"",
        "\"Area\"",
        "\"Doughnut\"",
        "\"Radar\"",
        "\"Histogram\"",
        "\"Boxwhisker\"",
        "\"Pareto\"",
        "\"RegionMap\"",
        "\"Treemap\"",
        "\"Waterfall\"",
        "\"Sunburst\"",
        "\"Funnel\"",
        "\"NotPlotted\"",
        "\"Zero\"",
        "\"Interplotted\"",
        "string",
        "\"Rows\"",
        "\"Columns\"",
        "\"Primary\"",
        "\"Secondary\"",
        "\"Invalid\"",
        "\"ColumnClustered\"",
        "\"ColumnStacked\"",
        "\"ColumnStacked100\"",
        "\"3DColumnClustered\"",
        "\"3DColumnStacked\"",
        "\"3DColumnStacked100\"",
        "\"BarClustered\"",
        "\"BarStacked\"",
        "\"BarStacked100\"",
        "\"3DBarClustered\"",
        "\"3DBarStacked\"",
        "\"3DBarStacked100\"",
        "\"LineStacked\"",
        "\"LineStacked100\"",
        "\"LineMarkers\"",
        "\"LineMarkersStacked\"",
        "\"LineMarkersStacked100\"",
        "\"PieOfPie\"",
        "\"PieExploded\"",
        "\"3DPieExploded\"",
        "\"BarOfPie\"",
        "\"XYScatterSmooth\"",
        "\"XYScatterSmoothNoMarkers\"",
        "\"XYScatterLines\"",
        "\"XYScatterLinesNoMarkers\"",
        "\"AreaStacked\"",
        "\"AreaStacked100\"",
        "\"3DAreaStacked\"",
        "\"3DAreaStacked100\"",
        "\"DoughnutExploded\"",
        "\"RadarMarkers\"",
        "\"RadarFilled\"",
        "\"Surface\"",
        "\"SurfaceWireframe\"",
        "\"SurfaceTopView\"",
        "\"SurfaceTopViewWireframe\"",
        "\"Bubble\"",
        "\"Bubble3DEffect\"",
        "\"StockHLC\"",
        "\"StockOHLC\"",
        "\"StockVHLC\"",
        "\"StockVOHLC\"",
        "\"CylinderColClustered\"",
        "\"CylinderColStacked\"",
        "\"CylinderColStacked100\"",
        "\"CylinderBarClustered\"",
        "\"CylinderBarStacked\"",
        "\"CylinderBarStacked100\"",
        "\"CylinderCol\"",
        "\"ConeColClustered\"",
        "\"ConeColStacked\"",
        "\"ConeColStacked100\"",
        "\"ConeBarClustered\"",
        "\"ConeBarStacked\"",
        "\"ConeBarStacked100\"",
        "\"ConeCol\"",
        "\"PyramidColClustered\"",
        "\"PyramidColStacked\"",
        "\"PyramidColStacked100\"",
        "\"PyramidBarClustered\"",
        "\"PyramidBarStacked\"",
        "\"PyramidBarStacked100\"",
        "\"PyramidCol\"",
        "\"3DColumn\"",
        "\"Line\"",
        "\"3DLine\"",
        "\"3DPie\"",
        "\"Pie\"",
        "\"XYScatter\"",
        "\"3DArea\"",
        "\"Area\"",
        "\"Doughnut\"",
        "\"Radar\"",
        "\"Histogram\"",
        "\"Boxwhisker\"",
        "\"Pareto\"",
        "\"RegionMap\"",
        "\"Treemap\"",
        "\"Waterfall\"",
        "\"Sunburst\"",
        "\"Funnel\"",
        "string",
        "string",
        "\"Invalid\"",
        "\"Automatic\"",
        "\"None\"",
        "\"Square\"",
        "\"Diamond\"",
        "\"Triangle\"",
        "\"X\"",
        "\"Star\"",
        "\"Dot\"",
        "\"Dash\"",
        "\"Circle\"",
        "\"Plus\"",
        "\"Picture\"",
        "string",
        "\"SplitByPosition\"",
        "\"SplitByValue\"",
        "\"SplitByPercentValue\"",
        "\"SplitByCustomSplit\"",
        "string",
        "string",
        "\"Invalid\"",
        "\"Automatic\"",
        "\"None\"",
        "\"Square\"",
        "\"Diamond\"",
        "\"Triangle\"",
        "\"X\"",
        "\"Star\"",
        "\"Dot\"",
        "\"Dash\"",
        "\"Circle\"",
        "\"Plus\"",
        "\"Picture\"",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Days\"",
        "\"Months\"",
        "\"Years\"",
        "\"Automatic\"",
        "\"TextAxis\"",
        "\"DateAxis\"",
        "\"None\"",
        "\"Hundreds\"",
        "\"Thousands\"",
        "\"TenThousands\"",
        "\"HundredThousands\"",
        "\"Millions\"",
        "\"TenMillions\"",
        "\"HundredMillions\"",
        "\"Billions\"",
        "\"Trillions\"",
        "\"Custom\"",
        "\"None\"",
        "\"Cross\"",
        "\"Inside\"",
        "\"Outside\"",
        "\"Days\"",
        "\"Months\"",
        "\"Years\"",
        "\"None\"",
        "\"Cross\"",
        "\"Inside\"",
        "\"Outside\"",
        "\"Days\"",
        "\"Months\"",
        "\"Years\"",
        "string",
        "\"Automatic\"",
        "\"Maximum\"",
        "\"Minimum\"",
        "\"Custom\"",
        "\"Linear\"",
        "\"Logarithmic\"",
        "\"NextToAxis\"",
        "\"High\"",
        "\"Low\"",
        "\"None\"",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "\"Invalid\"",
        "\"None\"",
        "\"Center\"",
        "\"InsideEnd\"",
        "\"InsideBase\"",
        "\"OutsideEnd\"",
        "\"Left\"",
        "\"Right\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"BestFit\"",
        "\"Callout\"",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "\"Invalid\"",
        "\"None\"",
        "\"Center\"",
        "\"InsideEnd\"",
        "\"InsideBase\"",
        "\"OutsideEnd\"",
        "\"Left\"",
        "\"Right\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"BestFit\"",
        "\"Callout\"",
        "string",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Invalid\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"Left\"",
        "\"Right\"",
        "\"Corner\"",
        "\"Custom\"",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Automatic\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"Left\"",
        "\"Right\"",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Grey25\"",
        "\"Grey50\"",
        "\"Grey75\"",
        "\"Automatic\"",
        "\"RoundDot\"",
        "string",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Grey25\"",
        "\"Grey50\"",
        "\"Grey75\"",
        "\"Automatic\"",
        "\"RoundDot\"",
        "string",
        "string",
        "\"None\"",
        "\"Single\"",
        "string",
        "\"Linear\"",
        "\"Exponential\"",
        "\"Logarithmic\"",
        "\"MovingAverage\"",
        "\"Polynomial\"",
        "\"Power\"",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Automatic\"",
        "\"Custom\"",
        "string",
        "\"Compact\"",
        "\"Tabular\"",
        "\"Outline\"",
        "\"AtTop\"",
        "\"AtBottom\"",
        "\"Off\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Unknown\"",
        "\"Automatic\"",
        "\"Sum\"",
        "\"Count\"",
        "\"Average\"",
        "\"Max\"",
        "\"Min\"",
        "\"Product\"",
        "\"CountNumbers\"",
        "\"StandardDeviation\"",
        "\"StandardDeviationP\"",
        "\"Variance\"",
        "\"VarianceP\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Automatic\"",
        "\"None\"",
        "\"CellMidPoint\"",
        "\"Context\"",
        "\"LeftToRight\"",
        "\"RightToLeft\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"ThreeArrows\"",
        "\"ThreeArrowsGray\"",
        "\"ThreeFlags\"",
        "\"ThreeTrafficLights1\"",
        "\"ThreeTrafficLights2\"",
        "\"ThreeSigns\"",
        "\"ThreeSymbols\"",
        "\"ThreeSymbols2\"",
        "\"FourArrows\"",
        "\"FourArrowsGray\"",
        "\"FourRedToBlack\"",
        "\"FourRating\"",
        "\"FourTrafficLights\"",
        "\"FiveArrows\"",
        "\"FiveArrowsGray\"",
        "\"FiveRating\"",
        "\"FiveQuarters\"",
        "\"ThreeStars\"",
        "\"ThreeTriangles\"",
        "\"FiveBoxes\"",
        "\"LinkedEntityFinanceIcon\"",
        "\"LinkedEntityMapIcon\"",
        "string",
        "\"None\"",
        "\"Single\"",
        "\"Double\"",
        "string",
        "string",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"General\"",
        "\"Left\"",
        "\"Center\"",
        "\"Right\"",
        "\"Fill\"",
        "\"Justify\"",
        "\"CenterAcrossSelection\"",
        "\"Distributed\"",
        "string",
        "string",
        "\"Context\"",
        "\"LeftToRight\"",
        "\"RightToLeft\"",
        "\"Top\"",
        "\"Center\"",
        "\"Bottom\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Automatic\"",
        "\"AutomaticExceptTables\"",
        "\"Manual\"",
        "string",
        "string",
        "string",
        "string",
        "\"Visible\"",
        "\"Hidden\"",
        "\"VeryHidden\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Worksheet\"",
        "\"Workbook\"",
        "\"String\"",
        "\"Integer\"",
        "\"Double\"",
        "\"Boolean\"",
        "\"Range\"",
        "\"Error\"",
        "\"Array\"",
        "string",
        "\"Range\"",
        "\"Table\"",
        "\"Text\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"None\"",
        "\"WholeNumber\"",
        "\"Decimal\"",
        "\"List\"",
        "\"Date\"",
        "\"Time\"",
        "\"TextLength\"",
        "\"Custom\"",
        "\"Inconsistent\"",
        "\"MixedCriteria\"",
        "\"General\"",
        "\"Left\"",
        "\"Center\"",
        "\"Right\"",
        "\"Fill\"",
        "\"Justify\"",
        "\"CenterAcrossSelection\"",
        "\"Distributed\"",
        "\"Top\"",
        "\"Center\"",
        "\"Bottom\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "\"EdgeTop\"",
        "\"EdgeBottom\"",
        "\"EdgeLeft\"",
        "\"EdgeRight\"",
        "\"InsideVertical\"",
        "\"InsideHorizontal\"",
        "\"DiagonalDown\"",
        "\"DiagonalUp\"",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Double\"",
        "\"SlantDashDot\"",
        "\"Hairline\"",
        "\"Thin\"",
        "\"Medium\"",
        "\"Thick\"",
        "string",
        "string",
        "\"None\"",
        "\"Single\"",
        "\"Double\"",
        "\"SingleAccountant\"",
        "\"DoubleAccountant\"",
        "\"Invalid\"",
        "\"ColumnClustered\"",
        "\"ColumnStacked\"",
        "\"ColumnStacked100\"",
        "\"3DColumnClustered\"",
        "\"3DColumnStacked\"",
        "\"3DColumnStacked100\"",
        "\"BarClustered\"",
        "\"BarStacked\"",
        "\"BarStacked100\"",
        "\"3DBarClustered\"",
        "\"3DBarStacked\"",
        "\"3DBarStacked100\"",
        "\"LineStacked\"",
        "\"LineStacked100\"",
        "\"LineMarkers\"",
        "\"LineMarkersStacked\"",
        "\"LineMarkersStacked100\"",
        "\"PieOfPie\"",
        "\"PieExploded\"",
        "\"3DPieExploded\"",
        "\"BarOfPie\"",
        "\"XYScatterSmooth\"",
        "\"XYScatterSmoothNoMarkers\"",
        "\"XYScatterLines\"",
        "\"XYScatterLinesNoMarkers\"",
        "\"AreaStacked\"",
        "\"AreaStacked100\"",
        "\"3DAreaStacked\"",
        "\"3DAreaStacked100\"",
        "\"DoughnutExploded\"",
        "\"RadarMarkers\"",
        "\"RadarFilled\"",
        "\"Surface\"",
        "\"SurfaceWireframe\"",
        "\"SurfaceTopView\"",
        "\"SurfaceTopViewWireframe\"",
        "\"Bubble\"",
        "\"Bubble3DEffect\"",
        "\"StockHLC\"",
        "\"StockOHLC\"",
        "\"StockVHLC\"",
        "\"StockVOHLC\"",
        "\"CylinderColClustered\"",
        "\"CylinderColStacked\"",
        "\"CylinderColStacked100\"",
        "\"CylinderBarClustered\"",
        "\"CylinderBarStacked\"",
        "\"CylinderBarStacked100\"",
        "\"CylinderCol\"",
        "\"ConeColClustered\"",
        "\"ConeColStacked\"",
        "\"ConeColStacked100\"",
        "\"ConeBarClustered\"",
        "\"ConeBarStacked\"",
        "\"ConeBarStacked100\"",
        "\"ConeCol\"",
        "\"PyramidColClustered\"",
        "\"PyramidColStacked\"",
        "\"PyramidColStacked100\"",
        "\"PyramidBarClustered\"",
        "\"PyramidBarStacked\"",
        "\"PyramidBarStacked100\"",
        "\"PyramidCol\"",
        "\"3DColumn\"",
        "\"Line\"",
        "\"3DLine\"",
        "\"3DPie\"",
        "\"Pie\"",
        "\"XYScatter\"",
        "\"3DArea\"",
        "\"Area\"",
        "\"Doughnut\"",
        "\"Radar\"",
        "\"Histogram\"",
        "\"Boxwhisker\"",
        "\"Pareto\"",
        "\"RegionMap\"",
        "\"Treemap\"",
        "\"Waterfall\"",
        "\"Sunburst\"",
        "\"Funnel\"",
        "\"NotPlotted\"",
        "\"Zero\"",
        "\"Interplotted\"",
        "string",
        "string",
        "\"Rows\"",
        "\"Columns\"",
        "\"Primary\"",
        "\"Secondary\"",
        "\"Invalid\"",
        "\"ColumnClustered\"",
        "\"ColumnStacked\"",
        "\"ColumnStacked100\"",
        "\"3DColumnClustered\"",
        "\"3DColumnStacked\"",
        "\"3DColumnStacked100\"",
        "\"BarClustered\"",
        "\"BarStacked\"",
        "\"BarStacked100\"",
        "\"3DBarClustered\"",
        "\"3DBarStacked\"",
        "\"3DBarStacked100\"",
        "\"LineStacked\"",
        "\"LineStacked100\"",
        "\"LineMarkers\"",
        "\"LineMarkersStacked\"",
        "\"LineMarkersStacked100\"",
        "\"PieOfPie\"",
        "\"PieExploded\"",
        "\"3DPieExploded\"",
        "\"BarOfPie\"",
        "\"XYScatterSmooth\"",
        "\"XYScatterSmoothNoMarkers\"",
        "\"XYScatterLines\"",
        "\"XYScatterLinesNoMarkers\"",
        "\"AreaStacked\"",
        "\"AreaStacked100\"",
        "\"3DAreaStacked\"",
        "\"3DAreaStacked100\"",
        "\"DoughnutExploded\"",
        "\"RadarMarkers\"",
        "\"RadarFilled\"",
        "\"Surface\"",
        "\"SurfaceWireframe\"",
        "\"SurfaceTopView\"",
        "\"SurfaceTopViewWireframe\"",
        "\"Bubble\"",
        "\"Bubble3DEffect\"",
        "\"StockHLC\"",
        "\"StockOHLC\"",
        "\"StockVHLC\"",
        "\"StockVOHLC\"",
        "\"CylinderColClustered\"",
        "\"CylinderColStacked\"",
        "\"CylinderColStacked100\"",
        "\"CylinderBarClustered\"",
        "\"CylinderBarStacked\"",
        "\"CylinderBarStacked100\"",
        "\"CylinderCol\"",
        "\"ConeColClustered\"",
        "\"ConeColStacked\"",
        "\"ConeColStacked100\"",
        "\"ConeBarClustered\"",
        "\"ConeBarStacked\"",
        "\"ConeBarStacked100\"",
        "\"ConeCol\"",
        "\"PyramidColClustered\"",
        "\"PyramidColStacked\"",
        "\"PyramidColStacked100\"",
        "\"PyramidBarClustered\"",
        "\"PyramidBarStacked\"",
        "\"PyramidBarStacked100\"",
        "\"PyramidCol\"",
        "\"3DColumn\"",
        "\"Line\"",
        "\"3DLine\"",
        "\"3DPie\"",
        "\"Pie\"",
        "\"XYScatter\"",
        "\"3DArea\"",
        "\"Area\"",
        "\"Doughnut\"",
        "\"Radar\"",
        "\"Histogram\"",
        "\"Boxwhisker\"",
        "\"Pareto\"",
        "\"RegionMap\"",
        "\"Treemap\"",
        "\"Waterfall\"",
        "\"Sunburst\"",
        "\"Funnel\"",
        "string",
        "string",
        "\"Invalid\"",
        "\"Automatic\"",
        "\"None\"",
        "\"Square\"",
        "\"Diamond\"",
        "\"Triangle\"",
        "\"X\"",
        "\"Star\"",
        "\"Dot\"",
        "\"Dash\"",
        "\"Circle\"",
        "\"Plus\"",
        "\"Picture\"",
        "string",
        "\"SplitByPosition\"",
        "\"SplitByValue\"",
        "\"SplitByPercentValue\"",
        "\"SplitByCustomSplit\"",
        "string",
        "string",
        "\"Invalid\"",
        "\"Automatic\"",
        "\"None\"",
        "\"Square\"",
        "\"Diamond\"",
        "\"Triangle\"",
        "\"X\"",
        "\"Star\"",
        "\"Dot\"",
        "\"Dash\"",
        "\"Circle\"",
        "\"Plus\"",
        "\"Picture\"",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Primary\"",
        "\"Secondary\"",
        "\"Days\"",
        "\"Months\"",
        "\"Years\"",
        "\"Automatic\"",
        "\"TextAxis\"",
        "\"DateAxis\"",
        "\"None\"",
        "\"Hundreds\"",
        "\"Thousands\"",
        "\"TenThousands\"",
        "\"HundredThousands\"",
        "\"Millions\"",
        "\"TenMillions\"",
        "\"HundredMillions\"",
        "\"Billions\"",
        "\"Trillions\"",
        "\"Custom\"",
        "\"None\"",
        "\"Cross\"",
        "\"Inside\"",
        "\"Outside\"",
        "\"Days\"",
        "\"Months\"",
        "\"Years\"",
        "\"None\"",
        "\"Cross\"",
        "\"Inside\"",
        "\"Outside\"",
        "\"Days\"",
        "\"Months\"",
        "\"Years\"",
        "string",
        "\"Automatic\"",
        "\"Maximum\"",
        "\"Minimum\"",
        "\"Custom\"",
        "\"Linear\"",
        "\"Logarithmic\"",
        "\"NextToAxis\"",
        "\"High\"",
        "\"Low\"",
        "\"None\"",
        "\"Invalid\"",
        "\"Category\"",
        "\"Value\"",
        "\"Series\"",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "\"Invalid\"",
        "\"None\"",
        "\"Center\"",
        "\"InsideEnd\"",
        "\"InsideBase\"",
        "\"OutsideEnd\"",
        "\"Left\"",
        "\"Right\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"BestFit\"",
        "\"Callout\"",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "\"Invalid\"",
        "\"None\"",
        "\"Center\"",
        "\"InsideEnd\"",
        "\"InsideBase\"",
        "\"OutsideEnd\"",
        "\"Left\"",
        "\"Right\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"BestFit\"",
        "\"Callout\"",
        "string",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Invalid\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"Left\"",
        "\"Right\"",
        "\"Corner\"",
        "\"Custom\"",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Automatic\"",
        "\"Top\"",
        "\"Bottom\"",
        "\"Left\"",
        "\"Right\"",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Grey25\"",
        "\"Grey50\"",
        "\"Grey75\"",
        "\"Automatic\"",
        "\"RoundDot\"",
        "string",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"Grey25\"",
        "\"Grey50\"",
        "\"Grey75\"",
        "\"Automatic\"",
        "\"RoundDot\"",
        "string",
        "string",
        "\"None\"",
        "\"Single\"",
        "string",
        "\"Linear\"",
        "\"Exponential\"",
        "\"Logarithmic\"",
        "\"MovingAverage\"",
        "\"Polynomial\"",
        "\"Power\"",
        "string",
        "\"Center\"",
        "\"Left\"",
        "\"Right\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string",
        "string",
        "\"Center\"",
        "\"Bottom\"",
        "\"Top\"",
        "\"Justify\"",
        "\"Distributed\"",
        "\"Automatic\"",
        "\"Custom\"",
        "\"PinYin\"",
        "\"StrokeCount\"",
        "string",
        "string",
        "string",
        "string",
        "\"Compact\"",
        "\"Tabular\"",
        "\"Outline\"",
        "\"AtTop\"",
        "\"AtBottom\"",
        "\"Off\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Unknown\"",
        "\"Automatic\"",
        "\"Sum\"",
        "\"Count\"",
        "\"Average\"",
        "\"Max\"",
        "\"Min\"",
        "\"Product\"",
        "\"CountNumbers\"",
        "\"StandardDeviation\"",
        "\"StandardDeviationP\"",
        "\"Variance\"",
        "\"VarianceP\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Number\"",
        "\"Boolean\"",
        "\"Date\"",
        "\"String\"",
        "\"Float\"",
        "string",
        "\"Custom\"",
        "\"DataBar\"",
        "\"ColorScale\"",
        "\"IconSet\"",
        "\"TopBottom\"",
        "\"PresetCriteria\"",
        "\"ContainsText\"",
        "\"CellValue\"",
        "string",
        "\"Automatic\"",
        "\"None\"",
        "\"CellMidPoint\"",
        "\"Context\"",
        "\"LeftToRight\"",
        "\"RightToLeft\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Invalid\"",
        "\"ThreeArrows\"",
        "\"ThreeArrowsGray\"",
        "\"ThreeFlags\"",
        "\"ThreeTrafficLights1\"",
        "\"ThreeTrafficLights2\"",
        "\"ThreeSigns\"",
        "\"ThreeSymbols\"",
        "\"ThreeSymbols2\"",
        "\"FourArrows\"",
        "\"FourArrowsGray\"",
        "\"FourRedToBlack\"",
        "\"FourRating\"",
        "\"FourTrafficLights\"",
        "\"FiveArrows\"",
        "\"FiveArrowsGray\"",
        "\"FiveRating\"",
        "\"FiveQuarters\"",
        "\"ThreeStars\"",
        "\"ThreeTriangles\"",
        "\"FiveBoxes\"",
        "\"LinkedEntityFinanceIcon\"",
        "\"LinkedEntityMapIcon\"",
        "string",
        "\"None\"",
        "\"Single\"",
        "\"Double\"",
        "string",
        "string",
        "\"EdgeTop\"",
        "\"EdgeBottom\"",
        "\"EdgeLeft\"",
        "\"EdgeRight\"",
        "\"None\"",
        "\"Continuous\"",
        "\"Dash\"",
        "\"DashDot\"",
        "\"DashDotDot\"",
        "\"Dot\"",
        "\"General\"",
        "\"Left\"",
        "\"Center\"",
        "\"Right\"",
        "\"Fill\"",
        "\"Justify\"",
        "\"CenterAcrossSelection\"",
        "\"Distributed\"",
        "string",
        "string",
        "string",
        "\"Context\"",
        "\"LeftToRight\"",
        "\"RightToLeft\"",
        "\"Top\"",
        "\"Center\"",
        "\"Bottom\"",
        "\"Justify\"",
        "\"Distributed\"",
        "string"
    ],
    "variables": [
        "icons"
    ],
    "comments": [
        "",
        "Begin Excel APIs ///////////////////////",
        "",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.Runtime): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.Application): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.Workbook): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.Worksheet): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.Range): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.RangeView): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.Setting): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.NamedItem): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.Table): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.TableColumn): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.TableRow): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.DataValidation): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.RangeFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.FormatProtection): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.RangeFill): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.RangeBorder): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.RangeFont): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.Chart): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartAreaFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartSeries): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartSeriesFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartPoint): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartPointFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartAxes): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartAxis): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartAxisFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartAxisTitle): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartAxisTitleFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartDataLabels): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartDataLabel): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartDataLabelFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartGridlines): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartGridlinesFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartLegend): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartLegendEntry): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartLegendFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartTitle): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartFormatString): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartTitleFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartBorder): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartLineFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartFont): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartTrendline): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartTrendlineFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartTrendlineLabel): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartTrendlineLabelFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartPlotArea): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ChartPlotAreaFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.PivotTable): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.PivotLayout): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.PivotHierarchy): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.RowColumnPivotHierarchy): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.FilterPivotHierarchy): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.DataPivotHierarchy): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.PivotField): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.PivotItem): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.DocumentProperties): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.CustomProperty): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ConditionalFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.DataBarConditionalFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ConditionalDataBarPositiveFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ConditionalDataBarNegativeFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.CustomConditionalFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ConditionalFormatRule): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.IconSetConditionalFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ColorScaleConditionalFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.TopBottomConditionalFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.PresetCriteriaConditionalFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.TextConditionalFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.CellValueConditionalFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ConditionalRangeFormat): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ConditionalRangeFont): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ConditionalRangeFill): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.ConditionalRangeBorder): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Gets the loaded child items in this collection.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate properties, or another API object of the same type.\n         *\n         * @remarks\n         *\n         * This method has the following additional signature:\n         *\n         * `set(properties: Excel.Style): void`\n         *\n         * @param properties - A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.\n         * @param options - Provides an option to suppress errors if the properties object tries to set any read-only properties.",
        "Sets multiple properties on the object at the same time, based on an existing loaded object.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "The request context associated with the object. This connects the add-in's process to the Office host application's process.",
        "An interface for updating data on the Runtime object, for use in \"runtime.set({ ... })\".",
        "An interface for updating data on the Application object, for use in \"application.set({ ... })\".",
        "An interface for updating data on the Workbook object, for use in \"workbook.set({ ... })\".",
        "An interface for updating data on the Worksheet object, for use in \"worksheet.set({ ... })\".",
        "An interface for updating data on the WorksheetCollection object, for use in \"worksheetCollection.set({ ... })\".",
        "An interface for updating data on the Range object, for use in \"range.set({ ... })\".",
        "An interface for updating data on the RangeView object, for use in \"rangeView.set({ ... })\".",
        "An interface for updating data on the RangeViewCollection object, for use in \"rangeViewCollection.set({ ... })\".",
        "An interface for updating data on the SettingCollection object, for use in \"settingCollection.set({ ... })\".",
        "An interface for updating data on the Setting object, for use in \"setting.set({ ... })\".",
        "An interface for updating data on the NamedItemCollection object, for use in \"namedItemCollection.set({ ... })\".",
        "An interface for updating data on the NamedItem object, for use in \"namedItem.set({ ... })\".",
        "An interface for updating data on the BindingCollection object, for use in \"bindingCollection.set({ ... })\".",
        "An interface for updating data on the TableCollection object, for use in \"tableCollection.set({ ... })\".",
        "An interface for updating data on the Table object, for use in \"table.set({ ... })\".",
        "An interface for updating data on the TableColumnCollection object, for use in \"tableColumnCollection.set({ ... })\".",
        "An interface for updating data on the TableColumn object, for use in \"tableColumn.set({ ... })\".",
        "An interface for updating data on the TableRowCollection object, for use in \"tableRowCollection.set({ ... })\".",
        "An interface for updating data on the TableRow object, for use in \"tableRow.set({ ... })\".",
        "An interface for updating data on the DataValidation object, for use in \"dataValidation.set({ ... })\".",
        "An interface for updating data on the RangeFormat object, for use in \"rangeFormat.set({ ... })\".",
        "An interface for updating data on the FormatProtection object, for use in \"formatProtection.set({ ... })\".",
        "An interface for updating data on the RangeFill object, for use in \"rangeFill.set({ ... })\".",
        "An interface for updating data on the RangeBorder object, for use in \"rangeBorder.set({ ... })\".",
        "An interface for updating data on the RangeBorderCollection object, for use in \"rangeBorderCollection.set({ ... })\".",
        "An interface for updating data on the RangeFont object, for use in \"rangeFont.set({ ... })\".",
        "An interface for updating data on the ChartCollection object, for use in \"chartCollection.set({ ... })\".",
        "An interface for updating data on the Chart object, for use in \"chart.set({ ... })\".",
        "An interface for updating data on the ChartAreaFormat object, for use in \"chartAreaFormat.set({ ... })\".",
        "An interface for updating data on the ChartSeriesCollection object, for use in \"chartSeriesCollection.set({ ... })\".",
        "An interface for updating data on the ChartSeries object, for use in \"chartSeries.set({ ... })\".",
        "An interface for updating data on the ChartSeriesFormat object, for use in \"chartSeriesFormat.set({ ... })\".",
        "An interface for updating data on the ChartPointsCollection object, for use in \"chartPointsCollection.set({ ... })\".",
        "An interface for updating data on the ChartPoint object, for use in \"chartPoint.set({ ... })\".",
        "An interface for updating data on the ChartPointFormat object, for use in \"chartPointFormat.set({ ... })\".",
        "An interface for updating data on the ChartAxes object, for use in \"chartAxes.set({ ... })\".",
        "An interface for updating data on the ChartAxis object, for use in \"chartAxis.set({ ... })\".",
        "An interface for updating data on the ChartAxisFormat object, for use in \"chartAxisFormat.set({ ... })\".",
        "An interface for updating data on the ChartAxisTitle object, for use in \"chartAxisTitle.set({ ... })\".",
        "An interface for updating data on the ChartAxisTitleFormat object, for use in \"chartAxisTitleFormat.set({ ... })\".",
        "An interface for updating data on the ChartDataLabels object, for use in \"chartDataLabels.set({ ... })\".",
        "An interface for updating data on the ChartDataLabel object, for use in \"chartDataLabel.set({ ... })\".",
        "An interface for updating data on the ChartDataLabelFormat object, for use in \"chartDataLabelFormat.set({ ... })\".",
        "An interface for updating data on the ChartGridlines object, for use in \"chartGridlines.set({ ... })\".",
        "An interface for updating data on the ChartGridlinesFormat object, for use in \"chartGridlinesFormat.set({ ... })\".",
        "An interface for updating data on the ChartLegend object, for use in \"chartLegend.set({ ... })\".",
        "An interface for updating data on the ChartLegendEntry object, for use in \"chartLegendEntry.set({ ... })\".",
        "An interface for updating data on the ChartLegendEntryCollection object, for use in \"chartLegendEntryCollection.set({ ... })\".",
        "An interface for updating data on the ChartLegendFormat object, for use in \"chartLegendFormat.set({ ... })\".",
        "An interface for updating data on the ChartTitle object, for use in \"chartTitle.set({ ... })\".",
        "An interface for updating data on the ChartFormatString object, for use in \"chartFormatString.set({ ... })\".",
        "An interface for updating data on the ChartTitleFormat object, for use in \"chartTitleFormat.set({ ... })\".",
        "An interface for updating data on the ChartBorder object, for use in \"chartBorder.set({ ... })\".",
        "An interface for updating data on the ChartLineFormat object, for use in \"chartLineFormat.set({ ... })\".",
        "An interface for updating data on the ChartFont object, for use in \"chartFont.set({ ... })\".",
        "An interface for updating data on the ChartTrendline object, for use in \"chartTrendline.set({ ... })\".",
        "An interface for updating data on the ChartTrendlineCollection object, for use in \"chartTrendlineCollection.set({ ... })\".",
        "An interface for updating data on the ChartTrendlineFormat object, for use in \"chartTrendlineFormat.set({ ... })\".",
        "An interface for updating data on the ChartTrendlineLabel object, for use in \"chartTrendlineLabel.set({ ... })\".",
        "An interface for updating data on the ChartTrendlineLabelFormat object, for use in \"chartTrendlineLabelFormat.set({ ... })\".",
        "An interface for updating data on the ChartPlotArea object, for use in \"chartPlotArea.set({ ... })\".",
        "An interface for updating data on the ChartPlotAreaFormat object, for use in \"chartPlotAreaFormat.set({ ... })\".",
        "An interface for updating data on the CustomXmlPartScopedCollection object, for use in \"customXmlPartScopedCollection.set({ ... })\".",
        "An interface for updating data on the CustomXmlPartCollection object, for use in \"customXmlPartCollection.set({ ... })\".",
        "An interface for updating data on the PivotTableCollection object, for use in \"pivotTableCollection.set({ ... })\".",
        "An interface for updating data on the PivotTable object, for use in \"pivotTable.set({ ... })\".",
        "An interface for updating data on the PivotLayout object, for use in \"pivotLayout.set({ ... })\".",
        "An interface for updating data on the PivotHierarchyCollection object, for use in \"pivotHierarchyCollection.set({ ... })\".",
        "An interface for updating data on the PivotHierarchy object, for use in \"pivotHierarchy.set({ ... })\".",
        "An interface for updating data on the RowColumnPivotHierarchyCollection object, for use in \"rowColumnPivotHierarchyCollection.set({ ... })\".",
        "An interface for updating data on the RowColumnPivotHierarchy object, for use in \"rowColumnPivotHierarchy.set({ ... })\".",
        "An interface for updating data on the FilterPivotHierarchyCollection object, for use in \"filterPivotHierarchyCollection.set({ ... })\".",
        "An interface for updating data on the FilterPivotHierarchy object, for use in \"filterPivotHierarchy.set({ ... })\".",
        "An interface for updating data on the DataPivotHierarchyCollection object, for use in \"dataPivotHierarchyCollection.set({ ... })\".",
        "An interface for updating data on the DataPivotHierarchy object, for use in \"dataPivotHierarchy.set({ ... })\".",
        "An interface for updating data on the PivotFieldCollection object, for use in \"pivotFieldCollection.set({ ... })\".",
        "An interface for updating data on the PivotField object, for use in \"pivotField.set({ ... })\".",
        "An interface for updating data on the PivotItemCollection object, for use in \"pivotItemCollection.set({ ... })\".",
        "An interface for updating data on the PivotItem object, for use in \"pivotItem.set({ ... })\".",
        "An interface for updating data on the DocumentProperties object, for use in \"documentProperties.set({ ... })\".",
        "An interface for updating data on the CustomProperty object, for use in \"customProperty.set({ ... })\".",
        "An interface for updating data on the CustomPropertyCollection object, for use in \"customPropertyCollection.set({ ... })\".",
        "An interface for updating data on the ConditionalFormatCollection object, for use in \"conditionalFormatCollection.set({ ... })\".",
        "An interface for updating data on the ConditionalFormat object, for use in \"conditionalFormat.set({ ... })\".",
        "An interface for updating data on the DataBarConditionalFormat object, for use in \"dataBarConditionalFormat.set({ ... })\".",
        "An interface for updating data on the ConditionalDataBarPositiveFormat object, for use in \"conditionalDataBarPositiveFormat.set({ ... })\".",
        "An interface for updating data on the ConditionalDataBarNegativeFormat object, for use in \"conditionalDataBarNegativeFormat.set({ ... })\".",
        "An interface for updating data on the CustomConditionalFormat object, for use in \"customConditionalFormat.set({ ... })\".",
        "An interface for updating data on the ConditionalFormatRule object, for use in \"conditionalFormatRule.set({ ... })\".",
        "An interface for updating data on the IconSetConditionalFormat object, for use in \"iconSetConditionalFormat.set({ ... })\".",
        "An interface for updating data on the ColorScaleConditionalFormat object, for use in \"colorScaleConditionalFormat.set({ ... })\".",
        "An interface for updating data on the TopBottomConditionalFormat object, for use in \"topBottomConditionalFormat.set({ ... })\".",
        "An interface for updating data on the PresetCriteriaConditionalFormat object, for use in \"presetCriteriaConditionalFormat.set({ ... })\".",
        "An interface for updating data on the TextConditionalFormat object, for use in \"textConditionalFormat.set({ ... })\".",
        "An interface for updating data on the CellValueConditionalFormat object, for use in \"cellValueConditionalFormat.set({ ... })\".",
        "An interface for updating data on the ConditionalRangeFormat object, for use in \"conditionalRangeFormat.set({ ... })\".",
        "An interface for updating data on the ConditionalRangeFont object, for use in \"conditionalRangeFont.set({ ... })\".",
        "An interface for updating data on the ConditionalRangeFill object, for use in \"conditionalRangeFill.set({ ... })\".",
        "An interface for updating data on the ConditionalRangeBorder object, for use in \"conditionalRangeBorder.set({ ... })\".",
        "An interface for updating data on the ConditionalRangeBorderCollection object, for use in \"conditionalRangeBorderCollection.set({ ... })\".",
        "An interface for updating data on the Style object, for use in \"style.set({ ... })\".",
        "An interface for updating data on the StyleCollection object, for use in \"styleCollection.set({ ... })\".",
        "An interface describing the data returned by calling \"runtime.toJSON()\".",
        "An interface describing the data returned by calling \"application.toJSON()\".",
        "An interface describing the data returned by calling \"workbook.toJSON()\".",
        "An interface describing the data returned by calling \"workbookProtection.toJSON()\".",
        "An interface describing the data returned by calling \"workbookCreated.toJSON()\".",
        "An interface describing the data returned by calling \"worksheet.toJSON()\".",
        "An interface describing the data returned by calling \"worksheetCollection.toJSON()\".",
        "An interface describing the data returned by calling \"worksheetProtection.toJSON()\".",
        "An interface describing the data returned by calling \"range.toJSON()\".",
        "An interface describing the data returned by calling \"rangeView.toJSON()\".",
        "An interface describing the data returned by calling \"rangeViewCollection.toJSON()\".",
        "An interface describing the data returned by calling \"settingCollection.toJSON()\".",
        "An interface describing the data returned by calling \"setting.toJSON()\".",
        "An interface describing the data returned by calling \"namedItemCollection.toJSON()\".",
        "An interface describing the data returned by calling \"namedItem.toJSON()\".",
        "An interface describing the data returned by calling \"namedItemArrayValues.toJSON()\".",
        "An interface describing the data returned by calling \"binding.toJSON()\".",
        "An interface describing the data returned by calling \"bindingCollection.toJSON()\".",
        "An interface describing the data returned by calling \"tableCollection.toJSON()\".",
        "An interface describing the data returned by calling \"table.toJSON()\".",
        "An interface describing the data returned by calling \"tableColumnCollection.toJSON()\".",
        "An interface describing the data returned by calling \"tableColumn.toJSON()\".",
        "An interface describing the data returned by calling \"tableRowCollection.toJSON()\".",
        "An interface describing the data returned by calling \"tableRow.toJSON()\".",
        "An interface describing the data returned by calling \"dataValidation.toJSON()\".",
        "An interface describing the data returned by calling \"rangeFormat.toJSON()\".",
        "An interface describing the data returned by calling \"formatProtection.toJSON()\".",
        "An interface describing the data returned by calling \"rangeFill.toJSON()\".",
        "An interface describing the data returned by calling \"rangeBorder.toJSON()\".",
        "An interface describing the data returned by calling \"rangeBorderCollection.toJSON()\".",
        "An interface describing the data returned by calling \"rangeFont.toJSON()\".",
        "An interface describing the data returned by calling \"chartCollection.toJSON()\".",
        "An interface describing the data returned by calling \"chart.toJSON()\".",
        "An interface describing the data returned by calling \"chartAreaFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartSeriesCollection.toJSON()\".",
        "An interface describing the data returned by calling \"chartSeries.toJSON()\".",
        "An interface describing the data returned by calling \"chartSeriesFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartPointsCollection.toJSON()\".",
        "An interface describing the data returned by calling \"chartPoint.toJSON()\".",
        "An interface describing the data returned by calling \"chartPointFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartAxes.toJSON()\".",
        "An interface describing the data returned by calling \"chartAxis.toJSON()\".",
        "An interface describing the data returned by calling \"chartAxisFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartAxisTitle.toJSON()\".",
        "An interface describing the data returned by calling \"chartAxisTitleFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartDataLabels.toJSON()\".",
        "An interface describing the data returned by calling \"chartDataLabel.toJSON()\".",
        "An interface describing the data returned by calling \"chartDataLabelFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartGridlines.toJSON()\".",
        "An interface describing the data returned by calling \"chartGridlinesFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartLegend.toJSON()\".",
        "An interface describing the data returned by calling \"chartLegendEntry.toJSON()\".",
        "An interface describing the data returned by calling \"chartLegendEntryCollection.toJSON()\".",
        "An interface describing the data returned by calling \"chartLegendFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartTitle.toJSON()\".",
        "An interface describing the data returned by calling \"chartFormatString.toJSON()\".",
        "An interface describing the data returned by calling \"chartTitleFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartBorder.toJSON()\".",
        "An interface describing the data returned by calling \"chartLineFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartFont.toJSON()\".",
        "An interface describing the data returned by calling \"chartTrendline.toJSON()\".",
        "An interface describing the data returned by calling \"chartTrendlineCollection.toJSON()\".",
        "An interface describing the data returned by calling \"chartTrendlineFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartTrendlineLabel.toJSON()\".",
        "An interface describing the data returned by calling \"chartTrendlineLabelFormat.toJSON()\".",
        "An interface describing the data returned by calling \"chartPlotArea.toJSON()\".",
        "An interface describing the data returned by calling \"chartPlotAreaFormat.toJSON()\".",
        "An interface describing the data returned by calling \"tableSort.toJSON()\".",
        "An interface describing the data returned by calling \"filter.toJSON()\".",
        "An interface describing the data returned by calling \"customXmlPartScopedCollection.toJSON()\".",
        "An interface describing the data returned by calling \"customXmlPartCollection.toJSON()\".",
        "An interface describing the data returned by calling \"customXmlPart.toJSON()\".",
        "An interface describing the data returned by calling \"pivotTableCollection.toJSON()\".",
        "An interface describing the data returned by calling \"pivotTable.toJSON()\".",
        "An interface describing the data returned by calling \"pivotLayout.toJSON()\".",
        "An interface describing the data returned by calling \"pivotHierarchyCollection.toJSON()\".",
        "An interface describing the data returned by calling \"pivotHierarchy.toJSON()\".",
        "An interface describing the data returned by calling \"rowColumnPivotHierarchyCollection.toJSON()\".",
        "An interface describing the data returned by calling \"rowColumnPivotHierarchy.toJSON()\".",
        "An interface describing the data returned by calling \"filterPivotHierarchyCollection.toJSON()\".",
        "An interface describing the data returned by calling \"filterPivotHierarchy.toJSON()\".",
        "An interface describing the data returned by calling \"dataPivotHierarchyCollection.toJSON()\".",
        "An interface describing the data returned by calling \"dataPivotHierarchy.toJSON()\".",
        "An interface describing the data returned by calling \"pivotFieldCollection.toJSON()\".",
        "An interface describing the data returned by calling \"pivotField.toJSON()\".",
        "An interface describing the data returned by calling \"pivotItemCollection.toJSON()\".",
        "An interface describing the data returned by calling \"pivotItem.toJSON()\".",
        "An interface describing the data returned by calling \"documentProperties.toJSON()\".",
        "An interface describing the data returned by calling \"customProperty.toJSON()\".",
        "An interface describing the data returned by calling \"customPropertyCollection.toJSON()\".",
        "An interface describing the data returned by calling \"conditionalFormatCollection.toJSON()\".",
        "An interface describing the data returned by calling \"conditionalFormat.toJSON()\".",
        "An interface describing the data returned by calling \"dataBarConditionalFormat.toJSON()\".",
        "An interface describing the data returned by calling \"conditionalDataBarPositiveFormat.toJSON()\".",
        "An interface describing the data returned by calling \"conditionalDataBarNegativeFormat.toJSON()\".",
        "An interface describing the data returned by calling \"customConditionalFormat.toJSON()\".",
        "An interface describing the data returned by calling \"conditionalFormatRule.toJSON()\".",
        "An interface describing the data returned by calling \"iconSetConditionalFormat.toJSON()\".",
        "An interface describing the data returned by calling \"colorScaleConditionalFormat.toJSON()\".",
        "An interface describing the data returned by calling \"topBottomConditionalFormat.toJSON()\".",
        "An interface describing the data returned by calling \"presetCriteriaConditionalFormat.toJSON()\".",
        "An interface describing the data returned by calling \"textConditionalFormat.toJSON()\".",
        "An interface describing the data returned by calling \"cellValueConditionalFormat.toJSON()\".",
        "An interface describing the data returned by calling \"conditionalRangeFormat.toJSON()\".",
        "An interface describing the data returned by calling \"conditionalRangeFont.toJSON()\".",
        "An interface describing the data returned by calling \"conditionalRangeFill.toJSON()\".",
        "An interface describing the data returned by calling \"conditionalRangeBorder.toJSON()\".",
        "An interface describing the data returned by calling \"conditionalRangeBorderCollection.toJSON()\".",
        "An interface describing the data returned by calling \"style.toJSON()\".",
        "An interface describing the data returned by calling \"styleCollection.toJSON()\".",
        "An interface describing the data returned by calling \"functionResult.toJSON()\".",
        "",
        "End Excel APIs ////////////////////////",
        ""
    ],
    "docstrings": [
        "*\n     * Creates and opens a new workbook.  Optionally, the workbook can be pre-populated with a base64-encoded .xlsx file.\n     *\n     * [Api set: ExcelApi 1.8]\n     *\n     * @param base64File - Optional. The base64 encoded .xlsx file. The default value is null.",
        "* Provides connection session for a remote workbook.",
        "* Close the session.",
        "* The RequestContext object facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the request context is required to get access to the Excel object model from the add-in.",
        "* Determines whether Excel will delay the batch request until the user exits cell edit mode.\n         *\n         * When false, if the user is in cell edit when the batch request is processed by the host, the batch will automatically fail.\n         * When true, the batch request will be executed immediately if the user is not in cell edit mode, but if the user is in cell edit mode the batch request will be delayed until the user exits cell edit mode.",
        "* Executes a batch script that performs actions on the Excel object model, using a new RequestContext. When the promise is resolved, any tracked objects that were automatically allocated during execution will be released.\n     * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of \"context.sync()\"). The context parameter facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the RequestContext is required to get access to the Excel object model from the add-in.",
        "* Executes a batch script that performs actions on the Excel object model, using the RequestContext of a previously-created API object. When the promise is resolved, any tracked objects that were automatically allocated during execution will be released.\n     * @param object - A previously-created API object. The batch will use the same RequestContext as the passed-in object, which means that any changes applied to the object will be picked up by \"context.sync()\".\n     * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of \"context.sync()\"). The context parameter facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the RequestContext is required to get access to the Excel object model from the add-in.",
        "* Executes a batch script that performs actions on the Excel object model, using the RequestContext of previously-created API objects.\n     * @param objects - An array of previously-created API objects. The array will be validated to make sure that all of the objects share the same context. The batch will use this shared RequestContext, which means that any changes applied to these objects will be picked up by \"context.sync()\".\n     * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of \"context.sync()\"). The context parameter facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the RequestContext is required to get access to the Excel object model from the add-in.",
        "* Executes a batch script that performs actions on the Excel object model, using the RequestContext of a previously-created API object. When the promise is resolved, any tracked objects that were automatically allocated during execution will be released.\n    * @param options - The additional options for this Excel.run which specify previous objects, whether to delay the request for cell edit, session info, etc.\n    * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of \"context.sync()\"). The context parameter facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the RequestContext is required to get access to the Excel object model from the add-in.",
        "* Executes a batch script that performs actions on the Excel object model, using the RequestContext of a previously-created object. When the promise is resolved, any tracked objects that were automatically allocated during execution will be released.\n     *\n     * @remarks\n     *\n     * In addition to this signature, the method also has the following signatures:\n     *\n     * `run<T>(object: OfficeExtension.ClientObject, batch: (context: Excel.RequestContext) => Promise<T>): Promise<T>;`\n     *\n     * `run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Excel.RequestContext) => Promise<T>): Promise<T>;`\n     *\n     * `run<T>(options: Excel.RunOptions, batch: (context: Excel.RequestContext) => Promise<T>): Promise<T>;`\n     *\n     * `run<T>(batch: (context: Excel.RequestContext) => Promise<T>): Promise<T>;`\n     *\n     * @param context - A previously-created object. The batch will use the same RequestContext as the passed-in object, which means that any changes applied to the object will be picked up by \"context.sync()\".\n     * @param batch - A function that takes in a RequestContext and returns a promise (typically, just the result of \"context.sync()\"). The context parameter facilitates requests to the Excel application. Since the Office add-in and the Excel application run in two different processes, the RequestContext is required to get access to the Excel object model from the add-in.",
        "*\n     * Provides information about the binding that raised the SelectionChanged event.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Gets the Binding object that represents the binding that raised the SelectionChanged event.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Gets the number of columns selected.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Gets the number of rows selected.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Gets the index of the first column of the selection (zero-based).\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Gets the index of the first row of the selection (zero-based).\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n     * Provides information about the binding that raised the DataChanged event.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Gets the Binding object that represents the binding that raised the DataChanged event.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n     * Provides information about the document that raised the SelectionChanged event.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Gets the workbook object that raised the SelectionChanged event.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n     * Provides information about the setting that raised the SettingsChanged event\n     *\n     * [Api set: ExcelApi 1.4]",
        "*\n         * Gets the Setting object that represents the binding that raised the SettingsChanged event\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n     * Provides information about the worksheet that raised the Changed event.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the range address that represents the changed area of a specific worksheet.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the change type that represents how the Changed event is triggered. See Excel.DataChangeType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the source of the event. See Excel.EventSource for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the id of the worksheet in which the data changed.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the range that represents the changed area of a specific worksheet.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the range that represents the changed area of a specific worksheet. It might return null object.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Provides information about the table that raised the Changed event.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the address that represents the changed area of a table on a specific worksheet.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the change type that represents how the Changed event is triggered. See Excel.DataChangeType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the source of the event. See Excel.EventSource for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the id of the table in which the data changed.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the id of the worksheet in which the data changed.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the range that represents the changed area of a table on a specific worksheet.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the range that represents the changed area of a table on a specific worksheet. It might return null object.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Provides information about the worksheet that raised the Activated event.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the id of the worksheet that is activated.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n     * Provides information about the worksheet that raised the Deactivated event.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the id of the worksheet that is deactivated.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n     * Provides information about the worksheet that raised the SelectionChanged event.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the range address that represents the selected area of a specific worksheet.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the id of the worksheet in which the selection changed.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n     * Provides information about the table that raised the SelectionChanged event.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the range address that represents the selected area of the table on a specific worksheet.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if the selection is inside a table, address will be useless if IsInsideTable is false.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the id of the table in which the selection changed.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the type of the event. See Excel.EventType for details. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the id of the worksheet in which the selection changed.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n     * Provides information about the worksheet that raised the Added event.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the source of the event. See Excel.EventSource for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the id of the worksheet that is added to the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n     * Provides information about the worksheet that raised the Deleted event.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the source of the event. See Excel.EventSource for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the id of the worksheet that is deleted from the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n     * Provides information about the chart that raised the Added event.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the id of the chart that is added to the worksheet.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the source of the event. See Excel.EventSource for details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the id of the worksheet in which the chart is added.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Provides information about the chart that raised the Activated event.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the id of the chart that is activated.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the id of the worksheet in which the chart is activated.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Provides information about the chart that raised the Deactivated event.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the id of the chart that is deactivated.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the id of the worksheet in which the chart is deactivated.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Provides information about the chart that raised the Deleted event.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the id of the chart that is deleted from the worksheet.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the source of the event. See Excel.EventSource for details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the id of the worksheet in which the chart is deleted.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Provides information about the worksheet that raised the Calculated event.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the type of the event. See Excel.EventType for details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the id of the worksheet that is calculated.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Represents the Excel Runtime class.\n     *\n     * [Api set: ExcelApi 1.5]",
        "*\n         * Toggle JavaScript events in the current task pane or content add-in.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Runtime` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Runtime` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Runtime` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Runtime object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RuntimeData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the Excel application that manages the workbook.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode. Possible values are: `Automatic`, where Excel controls recalculation; `AutomaticExceptTables`, where Excel controls recalculation but ignores changes in tables; `Manual`, where calculation is done when the user requests it.\n         *\n         * [Api set: ExcelApi 1.1 for get, 1.8 for set]",
        "*\n         * Recalculate all currently opened workbooks in Excel.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param calculationType - Specifies the calculation type to use. See Excel.CalculationType for details.",
        "*\n         * Recalculate all currently opened workbooks in Excel.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param calculationTypeString - Specifies the calculation type to use. See Excel.CalculationType for details.",
        "*\n         * Suspends calculation until the next \"context.sync()\" is called. Once set, it is the developer's responsibility to re-calc the workbook, to ensure that any dependencies are propagated.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Application` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Application` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Application` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Application object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ApplicationData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Workbook is the top level object which contains related workbook objects such as worksheets, tables, ranges, etc.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the Excel application instance that contains this workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of bindings that are part of the workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the collection of custom XML parts contained by this workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n         * Represents all data connections in the workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents a collection of worksheet functions that can be used for computation. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents a collection of workbook scoped named items (named ranges and constants). Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of PivotTables associated with the workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Gets the workbook properties. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns workbook protection object for a workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents a collection of Settings associated with the workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Represents a collection of styles associated with the workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents a collection of tables associated with the workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of worksheets associated with the workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the workbook name. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * True if the workbook is open in Read-only mode. Read-only.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the currently active cell from the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the currently selected single range from the workbook. If there are multiple ranges selected, this method will throw an error.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Workbook` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Workbook` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Workbook` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "*\n         * Occurs when the selection in the document is changed.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @eventproperty",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Workbook object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorkbookData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the protection of a workbook object.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if the workbook is protected. Read-Only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Protects a workbook. Fails if the workbook has been protected.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param password - workbook protection password.",
        "*\n         * Unprotects a workbook.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param password - workbook protection password.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.WorkbookProtection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.WorkbookProtection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorkbookProtection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.WorkbookProtection object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorkbookProtectionData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * The WorkbookCreated object is the top level object created by Application.CreateWorkbook. A WorkbookCreated object is a special Workbook object.\n     *\n     * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.WorkbookCreated` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.WorkbookCreated` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorkbookCreated` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.WorkbookCreated object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorkbookCreatedData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns collection of charts that are part of the worksheet. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets an object that can be used to manipulate frozen panes on the worksheet. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Collection of names scoped to the current worksheet. Read-only.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Collection of PivotTables that are part of the worksheet. Read-only.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Returns sheet protection object for a worksheet. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Collection of tables that are part of the worksheet. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * The display name of the worksheet.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * The zero-based position of the worksheet within the workbook.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets or sets the worksheet's gridlines flag.\n            This flag determines whether gridlines are visible to the user.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets or sets the worksheet's headings flag.\n            This flag determines whether headings are visible to the user.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the standard (default) height of all the rows in the worksheet, in points. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the standard (default) width of all the columns in the worksheet.\n            One unit of column width is equal to the width of one character in the Normal style. For proportional fonts, the width of the character 0 (zero) is used.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets or sets the worksheet tab color.\n            When retrieving the tab color, if the worksheet is invisible, the value will be null. If the worksheet is visible but the tab color is set to auto, an empty string will be returned. Otherwise, the property will be set to a color, in the form \"#123456\"\n            When setting the color, use an empty-string to set an \"auto\" color, or a real color otherwise.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * The Visibility of the worksheet.\n         *\n         * [Api set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.]",
        "*\n         * Activate the worksheet in the Excel UI.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Calculates all cells on a worksheet.\n         *\n         * [Api set: ExcelApi 1.6]\n         *\n         * @param markAllDirty - True, to mark all as dirty.",
        "*\n         * Copy a worksheet and place it at the specified position. Return the copied worksheet.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param positionType - Optional.\n         * @param relativeTo - Optional.",
        "*\n         * Copy a worksheet and place it at the specified position. Return the copied worksheet.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param positionTypeString - Optional.\n         * @param relativeTo - Optional.",
        "*\n         * Deletes the worksheet from the workbook. Note that if the worksheet's visibility is set to \"VeryHidden\", the delete operation will fail with a GeneralException.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param row - The row number of the cell to be retrieved. Zero-indexed.\n         * @param column - the column number of the cell to be retrieved. Zero-indexed.",
        "*\n         * Gets the worksheet that follows this one. If there are no worksheets following this one, this method will throw an error.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
        "*\n         * Gets the worksheet that follows this one. If there are no worksheets following this one, this method will return a null object.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
        "*\n         * Gets the worksheet that precedes this one. If there are no previous worksheets, this method will throw an error.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
        "*\n         * Gets the worksheet that precedes this one. If there are no previous worksheets, this method will return a null objet.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
        "*\n         * Gets the range object, representing a single rectangular block of cells, specified by the address or name.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param address - Optional. The string representing the address or name of the range. For example, \"A1:B2\". If not specified, the entire worksheet range is returned.",
        "*\n         * Gets the range object beginning at a particular row index and column index, and spanning a certain number of rows and columns.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param startRow - Start row (zero-indexed).\n         * @param startColumn - Start column (zero-indexed).\n         * @param rowCount - Number of rows to include in the range.\n         * @param columnCount - Number of columns to include in the range.",
        "*\n         * The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return the top left cell (i.e. it will *not* throw an error).\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param valuesOnly - Optional. If true, considers only cells with values as used cells (ignoring formatting). [Api set: ExcelApi 1.2]",
        "*\n         * The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param valuesOnly - Optional. Considers only cells with values as used cells.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Worksheet` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Worksheet` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Worksheet` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "*\n         * Occurs when the worksheet is activated.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "*\n         * Occurs when the worksheet is calculated.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @eventproperty",
        "*\n         * Occurs when data changed on a specific worksheet.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "*\n         * Occurs when the worksheet is deactivated.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "*\n         * Occurs when the selection changes on a specific worksheet.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Worksheet object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of worksheet objects that are part of the workbook.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call \".activate() on it.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param name - Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.",
        "*\n         * Gets the currently active worksheet in the workbook.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the number of worksheets in the collection.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
        "*\n         * Gets the first worksheet in the collection.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
        "*\n         * Gets a worksheet object using its Name or ID.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param key - The Name or ID of the worksheet.",
        "*\n         * Gets a worksheet object using its Name or ID. If the worksheet does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param key - The Name or ID of the worksheet.",
        "*\n         * Gets the last worksheet in the collection.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param visibleOnly - Optional. If true, considers only visible worksheets, skipping over any hidden ones.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "*\n         * Occurs when any worksheet in the workbook is activated.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "*\n         * Occurs when a new worksheet is added to the workbook.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "*\n         * Occurs when any worksheet in the workbook is calculated.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @eventproperty",
        "*\n         * Occurs when any worksheet in the workbook is deactivated.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "*\n         * Occurs when a worksheet is deleted from the workbook.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents the protection of a sheet object.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Sheet protection options. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Indicates if the worksheet is protected. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Protects a worksheet. Fails if the worksheet has already been protected.\n         *\n         * [Api set: ExcelApi 1.2 for options; 1.7 for password]\n         *\n         * @param options - Optional. Sheet protection options.\n         * @param password - Optional. Sheet protection password.",
        "*\n         * Unprotects a worksheet.\n         *\n         * [Api set: ExcelApi 1.7 for password]\n         *\n         * @param password - sheet protection password.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.WorksheetProtection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.WorksheetProtection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetProtection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.WorksheetProtection object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetProtectionData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the options in sheet protection.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing using auto filter feature.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing deleting columns.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing deleting rows.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing editing objects.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the worksheet protection option of allowing editing scenarios.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the worksheet protection option of allowing formatting cells.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing formatting columns.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing formatting rows.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing inserting columns.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing inserting hyperlinks.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing inserting rows.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing using PivotTable feature.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of allowing using sort feature.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the worksheet protection option of selection mode.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.7]",
        "*\n         * Sets the frozen cells in the active worksheet view.\n            The range provided corresponds to cells that will be frozen in the top- and left-most pane.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param frozenRange - A range that represents the cells to be frozen, or null to remove all frozen panes.",
        "*\n         * Freeze the first column(s) of the worksheet in place.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param count - Optional number of columns to freeze, or zero to unfreeze all columns",
        "*\n         * Freeze the top row(s) of the worksheet in place.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param count - Optional number of rows to freeze, or zero to unfreeze all rows",
        "*\n         * Gets a range that describes the frozen cells in the active worksheet view.\n            The frozen range is corresponds to cells that are frozen in the top- and left-most pane.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets a range that describes the frozen cells in the active worksheet view.\n            The frozen range is corresponds to cells that are frozen in the top- and left-most pane.\n            If there is no frozen pane, returns a null object.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Removes all frozen panes in the worksheet.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.WorksheetFreezePanes object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetFreezePanesData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Collection of ConditionalFormats that intersect the range. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns a data validation object.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the range sort of the current range. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * The worksheet containing the current range. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the range reference in A1-style. Address value will contain the Sheet reference (e.g. \"Sheet1!A1:B4\"). Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents range reference for the specified range in the language of the user. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the total number of columns in the range. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents if all columns of the current range are hidden.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the column number of the first cell in the range. Zero-indexed. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the formula in A1-style notation.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the formula in R1C1-style notation.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents if all cells of the current range are hidden. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the hyperlink for the current range.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents if the current range is an entire column. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents if the current range is an entire row. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents Excel's number format code for the given range.\n            When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents Excel's number format code for the given range as a string in the language of the user.\n            When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns the total number of rows in the range. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents if all rows of the current range are hidden.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Returns the row number of the first cell in the range. Zero-indexed. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the style of the current range.\n            If the styles of the cells are inconsistent, null will be returned.\n            For custom styles, the style name will be returned. For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the type of data of each cell. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n            When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Calculates a range of cells on a worksheet.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Clear range values, format, fill, border, etc.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param applyTo - Optional. Determines the type of clear action. See Excel.ClearApplyTo for details.",
        "*\n         * Clear range values, format, fill, border, etc.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param applyToString - Optional. Determines the type of clear action. See Excel.ClearApplyTo for details.",
        "*\n         * Deletes the cells associated with the range.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param shift - Specifies which way to shift the cells. See Excel.DeleteShiftDirection for details.",
        "*\n         * Deletes the cells associated with the range.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param shiftString - Specifies which way to shift the cells. See Excel.DeleteShiftDirection for details.",
        "*\n         * Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param numRows - The number of rows of the new range size.\n         * @param numColumns - The number of columns of the new range size.",
        "*\n         * Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of \"B2:C5\" and \"D10:E15\" is \"B2:E15\".\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param anotherRange - The range object or address or range name.",
        "*\n         * Gets the range object containing the single cell based on row and column numbers. The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid. The returned cell is located relative to the top left cell of the range.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param row - Row number of the cell to be retrieved. Zero-indexed.\n         * @param column - Column number of the cell to be retrieved. Zero-indexed.",
        "*\n         * Gets a column contained in the range.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param column - Column number of the range to be retrieved. Zero-indexed.",
        "*\n         * Gets a certain number of columns to the right of the current Range object.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param count - Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.",
        "*\n         * Gets a certain number of columns to the left of the current Range object.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param count - Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.",
        "*\n         * Gets an object that represents the entire column of the range (for example, if the current range represents cells \"B4:E11\", its `getEntireColumn` is a range that represents columns \"B:E\").\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets an object that represents the entire row of the range (for example, if the current range represents cells \"B4:E11\", its `GetEntireRow` is a range that represents rows \"4:11\").\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Renders the range as a base64-encoded png image.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the range object that represents the rectangular intersection of the given ranges.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param anotherRange - The range object or range address that will be used to determine the intersection of ranges.",
        "*\n         * Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is found, will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param anotherRange - The range object or range address that will be used to determine the intersection of ranges.",
        "*\n         * Gets the last cell within the range. For example, the last cell of \"B2:D5\" is \"D5\".\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the last column within the range. For example, the last column of \"B2:D5\" is \"D2:D5\".\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the last row within the range. For example, the last row of \"B2:D5\" is \"B5:D5\".\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param rowOffset - The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.\n         * @param columnOffset - The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.",
        "*\n         * Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param deltaRows - The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.\n         * @param deltaColumns - The number of columns by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.",
        "*\n         * Gets a row contained in the range.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param row - Row number of the range to be retrieved. Zero-indexed.",
        "*\n         * Gets a certain number of rows above the current Range object.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param count - Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.",
        "*\n         * Gets a certain number of rows below the current Range object.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param count - Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.",
        "*\n         * Returns a Range object that represents the surrounding region for the top-left cell in this range. A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param valuesOnly - Considers only cells with values as used cells. [Api set: ExcelApi 1.2]",
        "*\n         * Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param valuesOnly - Considers only cells with values as used cells.",
        "*\n         * Represents the visible rows of the current range.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param shift - Specifies which way to shift the cells. See Excel.InsertShiftDirection for details.",
        "*\n         * Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param shiftString - Specifies which way to shift the cells. See Excel.InsertShiftDirection for details.",
        "*\n         * Merge the range cells into one region in the worksheet.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param across - Optional. Set true to merge cells in each row of the specified range as separate merged cells. The default value is false.",
        "*\n         * Selects the specified range in the Excel UI.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Displays the card for an active cell if it has rich value content.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Unmerge the range cells into separate cells.\n         *\n         * [Api set: ExcelApi 1.2]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Range` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Range` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand for context.trackedObjects.add(thisObject). If you are using this object across \".sync\" calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.",
        "* Release the memory associated with this object, if it has previously been tracked. This call is shorthand for context.trackedObjects.remove(thisObject). Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them. You will need to call \"context.sync()\" before the memory release takes effect.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a string reference of the form SheetName!A1:B5, or a global or local named range.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Gets or sets the address of the range; for example 'SheetName!A1:B5'.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n     * Represents the necessary strings to get/set a hyperlink (XHL) object.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the url target for the hyperlink.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the document reference target for the hyperlink.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the string displayed when hovering over the hyperlink.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the string that is displayed in the top left most cell in the range.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n     * RangeView represents a set of visible cells of the parent range.\n     *\n     * [Api set: ExcelApi 1.3]",
        "*\n         * Represents a collection of range views associated with the range. Read-only.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Represents the cell addresses of the RangeView. Read-only.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Returns the number of visible columns. Read-only.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Represents the formula in A1-style notation.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Represents the formula in R1C1-style notation.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Returns a value that represents the index of the RangeView. Read-only.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Represents Excel's number format code for the given cell.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Returns the number of visible rows. Read-only.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Represents the type of data of each cell. Read-only.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Represents the raw values of the specified range view. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Gets the parent range associated with the current RangeView.\n         *\n         * [Api set: ExcelApi 1.3]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.RangeView` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.RangeView` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RangeView` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.RangeView object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeViewData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of RangeView objects.\n     *\n     * [Api set: ExcelApi 1.3]",
        "*\n         * Gets the number of RangeView objects in the collection.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Gets a RangeView Row via its index. Zero-Indexed.\n         *\n         * [Api set: ExcelApi 1.3]\n         *\n         * @param index - Index of the visible row.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.RangeViewCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.RangeViewCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RangeViewCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.RangeViewCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeViewCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents a collection of key-value pair setting objects that are part of the workbook. The scope is limited to per file and add-in (task-pane or content) combination.\n     *\n     * [Api set: ExcelApi 1.4]",
        "*\n         * Sets or adds the specified setting to the workbook.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param key - The Key of the new setting.\n         * @param value - The Value for the new setting.",
        "*\n         * Gets the number of Settings in the collection.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Gets a Setting entry via the key.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param key - Key of the setting.",
        "*\n         * Gets a Setting entry via the key. If the Setting does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param key - The key of the setting.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.SettingCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.SettingCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.SettingCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "*\n         * Occurs when the Settings in the document are changed.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @eventproperty",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.SettingCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SettingCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Setting represents a key-value pair of a setting persisted to the document (per file per add-in). These custom key-value pair can be used to store state or lifecycle information needed by the content or task-pane add-in. Note that settings are persisted in the document and hence it is not a place to store any sensitive or protected information such as user information and password.\n     *\n     * [Api set: ExcelApi 1.4]",
        "*\n         * Returns the key that represents the id of the Setting. Read-only.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Represents the value stored for this setting.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Deletes the setting.\n         *\n         * [Api set: ExcelApi 1.4]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Setting` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Setting` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Setting` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Setting object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SettingData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * A collection of all the NamedItem objects that are part of the workbook or worksheet, depending on how it was reached.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Adds a new name to the collection of the given scope.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param name - The name of the named item.\n         * @param reference - The formula or the range that the name will refer to.\n         * @param comment - Optional. The comment associated with the named item.\n         * @returns",
        "*\n         * Adds a new name to the collection of the given scope using the user's locale for the formula.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param name - The \"name\" of the named item.\n         * @param formula - The formula in the user's locale that the name will refer to.\n         * @param comment - Optional. The comment associated with the named item.\n         * @returns",
        "*\n         * Gets the number of named items in the collection.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Gets a NamedItem object using its name.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param name - Nameditem name.",
        "*\n         * Gets a NamedItem object using its name. If the nameditem object does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param name - Nameditem name.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.NamedItemCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.NamedItemCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.NamedItemCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.NamedItemCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.NamedItemCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents a defined name for a range of cells or value. Names can be primitive named objects (as seen in the type below), range object, or a reference to a range. This object can be used to obtain range object associated with names.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns an object containing values and types of the named item. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns the worksheet on which the named item is scoped to. Throws an error if the item is scoped to the workbook instead.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Returns the worksheet on which the named item is scoped to. Returns a null object if the item is scoped to the workbook instead.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Represents the comment associated with this name.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Gets or sets the formula of the named item.  Formula always starts with a '=' sign.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * The name of the object. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Indicates whether the name is scoped to the workbook or to a specific worksheet. Possible values are: Worksheet, Workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Indicates the type of the value returned by the name's formula. See Excel.NamedItemType for details. Read-only.\n         *\n         * [Api set: ExcelApi 1.1 for String,Integer,Double,Boolean,Range,Error; 1.7 for Array]",
        "*\n         * Represents the value computed by the name's formula. For a named range, will return the range address. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Specifies whether the object is visible or not.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Deletes the given name.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Returns the range object that is associated with the name. Throws an error if the named item's type is not a range.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the range object that is associated with the name. Returns a null object if the named item's type is not a range.\n         *\n         * [Api set: ExcelApi 1.4]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.NamedItem` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.NamedItem` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.NamedItem` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.NamedItem object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.NamedItemData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents an object containing values and types of a named item.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the types for each item in the named item array\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the values of each item in the named item array.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.NamedItemArrayValues` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.NamedItemArrayValues` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.NamedItemArrayValues` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.NamedItemArrayValues object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.NamedItemArrayValuesData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents an Office.js binding that is defined in the workbook.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents binding identifier. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the type of the binding. See Excel.BindingType for details. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Deletes the binding.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Returns the range represented by the binding. Will throw an error if binding is not of the correct type.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the table represented by the binding. Will throw an error if binding is not of the correct type.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the text represented by the binding. Will throw an error if binding is not of the correct type.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Binding` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Binding` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "*\n         * Occurs when data or formatting within the binding is changed.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @eventproperty",
        "*\n         * Occurs when the selected content in the binding is changed.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @eventproperty",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Binding object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.BindingData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the collection of all the binding objects that are part of the workbook.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the number of bindings in the collection. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Add a new binding to a particular Range.\n         *\n         * [Api set: ExcelApi 1.3]\n         *\n         * @param range - Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full address, including the sheet name\n         * @param bindingType - Type of binding. See Excel.BindingType.\n         * @param id - Name of binding.",
        "*\n         * Add a new binding to a particular Range.\n         *\n         * [Api set: ExcelApi 1.3]\n         *\n         * @param range - Range to bind the binding to. May be an Excel Range object, or a string. If string, must contain the full address, including the sheet name\n         * @param bindingTypeString - Type of binding. See Excel.BindingType.\n         * @param id - Name of binding.",
        "*\n         * Add a new binding based on a named item in the workbook.\n            If the named item references to multiple areas, the \"InvalidReference\" error will be returned.\n         *\n         * [Api set: ExcelApi 1.3]\n         *\n         * @param name - Name from which to create binding.\n         * @param bindingType - Type of binding. See Excel.BindingType.\n         * @param id - Name of binding.",
        "*\n         * Add a new binding based on a named item in the workbook.\n            If the named item references to multiple areas, the \"InvalidReference\" error will be returned.\n         *\n         * [Api set: ExcelApi 1.3]\n         *\n         * @param name - Name from which to create binding.\n         * @param bindingTypeString - Type of binding. See Excel.BindingType.\n         * @param id - Name of binding.",
        "*\n         * Add a new binding based on the current selection.\n            If the selection has multiple areas, the \"InvalidReference\" error will be returned.\n         *\n         * [Api set: ExcelApi 1.3]\n         *\n         * @param bindingType - Type of binding. See Excel.BindingType.\n         * @param id - Name of binding.",
        "*\n         * Add a new binding based on the current selection.\n            If the selection has multiple areas, the \"InvalidReference\" error will be returned.\n         *\n         * [Api set: ExcelApi 1.3]\n         *\n         * @param bindingTypeString - Type of binding. See Excel.BindingType.\n         * @param id - Name of binding.",
        "*\n         * Gets the number of bindings in the collection.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Gets a binding object by ID.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param id - Id of the binding object to be retrieved.",
        "*\n         * Gets a binding object based on its position in the items array.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param index - Index value of the object to be retrieved. Zero-indexed.",
        "*\n         * Gets a binding object by ID. If the binding object does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param id - Id of the binding object to be retrieved.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.BindingCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.BindingCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.BindingCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.BindingCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.BindingCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the number of tables in the workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Create a new table. The range object or source address determines the worksheet under which the table will be added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another table), an error will be thrown.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param address - A Range object, or a string address or name of the range representing the data source. If the address does not contain a sheet name, the currently-active sheet is used. [Api set: ExcelApi 1.1 / 1.3.  Prior to ExcelApi 1.3, this parameter must be a string. Starting with Excel Api 1.3, this parameter may be a Range object or a string.]\n         * @param hasHeaders - Boolean value that indicates whether the data being imported has column labels. If the source does not contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting the data down by one row.",
        "*\n         * Gets the number of tables in the collection.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Gets a table by Name or ID.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param key - Name or ID of the table to be retrieved.",
        "*\n         * Gets a table based on its position in the collection.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param index - Index value of the object to be retrieved. Zero-indexed.",
        "*\n         * Gets a table by Name or ID. If the table does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param key - Name or ID of the table to be retrieved.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.TableCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.TableCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "*\n         * Occurs when data changes on any table in a workbook, or a worksheet.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.TableCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents an Excel table.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of all the columns in the table. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of all the rows in the table. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the sorting for the table. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * The worksheet containing the current table. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Indicates whether the first column contains special formatting.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Indicates whether the last column contains special formatting.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Returns a value that uniquely identifies the table in a given workbook. The value of the identifier remains the same even when the table is renamed. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns a numeric id.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Name of the table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Indicates whether the header row is visible or not. This value can be set to show or remove the header row.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Indicates whether the total row is visible or not. This value can be set to show or remove the total row.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Constant value that represents the Table style. Possible values are: TableStyleLight1 thru TableStyleLight21, TableStyleMedium1 thru TableStyleMedium28, TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Clears all the filters currently applied on the table.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Converts the table into a normal range of cells. All data is preserved.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Deletes the table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the range object associated with the data body of the table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the range object associated with header row of the table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the range object associated with the entire table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the range object associated with totals row of the table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Reapplies all the filters currently on the table.\n         *\n         * [Api set: ExcelApi 1.2]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Table` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Table` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Table` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "*\n         * Occurs when data in cells changes on a specific table.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "*\n         * Occurs when the selection changes on a specific table.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @eventproperty",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Table object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of all the columns that are part of the table.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the number of columns in the table. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Adds a new column to the table.\n         *\n         * [Api set: ExcelApi 1.1 requires an index smaller than the total column count; 1.4 allows index to be optional (null or -1) and will append a column at the end; 1.4 allows name parameter at creation time.]\n         *\n         * @param index - Optional. Specifies the relative position of the new column. If null or -1, the addition happens at the end. Columns with a higher index will be shifted to the side. Zero-indexed.\n         * @param values - Optional. A 2-dimensional array of unformatted values of the table column.\n         * @param name - Optional. Specifies the name of the new column. If null, the default name will be used.",
        "*\n         * Gets the number of columns in the table.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Gets a column object by Name or ID.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param key - Column Name or ID.",
        "*\n         * Gets a column based on its position in the collection.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param index - Index value of the object to be retrieved. Zero-indexed.",
        "*\n         * Gets a column object by Name or ID. If the column does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param key - Column Name or ID.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.TableColumnCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.TableColumnCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableColumnCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.TableColumnCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableColumnCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents a column in a table.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Retrieve the filter applied to the column. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Returns a unique key that identifies the column within the table. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the index number of the column within the columns collection of the table. Zero-indexed. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the name of the table column.\n         *\n         * [Api set: ExcelApi 1.1 for getting the name; 1.4 for setting it.]",
        "*\n         * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Deletes the column from the table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the range object associated with the data body of the column.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the range object associated with the header row of the column.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the range object associated with the entire column.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets the range object associated with the totals row of the column.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.TableColumn` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.TableColumn` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableColumn` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.TableColumn object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableColumnData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of all the rows that are part of the table.\n            \n             Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them,\n             a TableRow object represent the physical location of the table row, but not the data.\n             That is, if the data is sorted or if new rows are added, a table row will continue\n             to point at the index for which it was created.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the number of rows in the table. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Adds one or more rows to the table. The return object will be the top of the newly added row(s).\n            \n             Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them,\n             a TableRow object represent the physical location of the table row, but not the data.\n             That is, if the data is sorted or if new rows are added, a table row will continue\n             to point at the index for which it was created.\n         *\n         * [Api set: ExcelApi 1.1 for adding a single row; 1.4 allows adding of multiple rows.]\n         *\n         * @param index - Optional. Specifies the relative position of the new row. If null or -1, the addition happens at the end. Any rows below the inserted row are shifted downwards. Zero-indexed.\n         * @param values - Optional. A 2-dimensional array of unformatted values of the table row.",
        "*\n         * Gets the number of rows in the table.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Gets a row based on its position in the collection.\n            \n             Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them,\n             a TableRow object represent the physical location of the table row, but not the data.\n             That is, if the data is sorted or if new rows are added, a table row will continue\n             to point at the index for which it was created.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param index - Index value of the object to be retrieved. Zero-indexed.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.TableRowCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.TableRowCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRowCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.TableRowCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableRowCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents a row in a table.\n            \n             Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them,\n             a TableRow object represent the physical location of the table row, but not the data.\n             That is, if the data is sorted or if new rows are added, a table row will continue\n             to point at the index for which it was created.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Deletes the row from the table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the range object associated with the entire row.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.TableRow` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.TableRow` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRow` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.TableRow object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableRowData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the data validation applied to the current range.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Error alert when user enters invalid data.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Ignore blanks: no data validation will be performed on blank cells, it defaults to true.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Prompt when users select a cell.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Data validation rule that contains different type of data validation criteria.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Type of the data validation, see Excel.DataValidationType for details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents if all cell values are valid according to the data validation rules.\n            Returns true if all cell values are valid, or false if all cell values are invalid.\n            Returns null if there are both valid and invalid cell values within the range.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Clears the data validation from the current range.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.DataValidation` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.DataValidation` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.DataValidation object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataValidationData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Data validation rule contains different types of data validation. You can only use one of them at a time according the Excel.DataValidationType.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Custom data validation criteria.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Date data validation criteria.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Decimal data validation criteria.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * List data validation criteria.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * TextLength data validation criteria.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Time data validation criteria.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * WholeNumber data validation criteria.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Represents the Basic Type data validation criteria.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Specifies the right-hand operand when the operator property is set to a binary operator such as GreaterThan (the left-hand operand is the value the user tries to enter in the cell). With the ternary operators Between and NotBetween, specifies the lower bound operand.\n            For example, setting formula1 to 10 and operator to GreaterThan means that valid data for the range must be greater than 10.\n            When setting the value, it can be passed in as a number, a range object, or a string formula (where the string is either a stringified number, a cell reference like \"=A1\", or a formula like \"=MIN(A1, B1)\").\n            When retrieving the value, it will always be returned as a string formula, for example: \"=10\", \"=A1\", \"=SUM(A1:B5)\", etc.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * With the ternary operators Between and NotBetween, specifies the upper bound operand. Is not used with the binary operators, such as GreaterThan.\n            When setting the value, it can be passed in as a number, a range object, or a string formula (where the string is either a stringified number, a cell reference like \"=A1\", or a formula like \"=MIN(A1, B1)\").\n            When retrieving the value, it will always be returned as a string formula, for example: \"=10\", \"=A1\", \"=SUM(A1:B5)\", etc.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The operator to use for validating the data.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Represents the Date data validation criteria.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Specifies the right-hand operand when the operator property is set to a binary operator such as GreaterThan (the left-hand operand is the value the user tries to enter in the cell). With the ternary operators Between and NotBetween, specifies the lower bound operand.\n            When setting the value, it can be passed in as a Date, a Range object, or a string formula (where the string is either a stringified date/time in ISO8601 format, a cell reference like \"=A1\", or a formula like \"=MIN(A1, B1)\").\n            When retrieving the value, it will always be returned as a string formula, for example: \"=10\", \"=A1\", \"=SUM(A1:B5)\", etc.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * With the ternary operators Between and NotBetween, specifies the upper bound operand. Is not used with the binary operators, such as GreaterThan.\n            When setting the value, it can be passed in as a Date, a Range object, or a string (where the string is either a stringified date/time in ISO8601 format, a cell reference like \"=A1\", or a formula like \"=MIN(A1, B1)\").\n            When retrieving the value, it will always be returned as a string formula, for example: \"=10\", \"=A1\", \"=SUM(A1:B5)\", etc.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The operator to use for validating the data.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Represents the List data validation criteria.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Displays the list in cell drop down or not, it defaults to true.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The source of the list for data validation. The value is a string, which can either be a range reference (e.g. `\"=Names!$A$1:$A$3\"`) or a comma-separated list of the values themselves.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Represents the Custom data validation criteria.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * A custom data validation formula. This creates special input rules, such as preventing duplicates, or limiting the total in a range of cells.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Represents the error alert properties for the data validation.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Represents error alert message.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Determines whether to show an error alert dialog or not when a user enters invalid data. The default is true.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents data validation alert type, please see Excel.DataValidationAlertStyle for details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents error alert dialog title.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Represents the user prompt properties for the data validation.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the message of the prompt.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Determines whether or not to show the prompt when user selects a cell with data validation.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the title for the prompt.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * A format object encapsulating the range's font, fill, borders, alignment, and other properties.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Collection of border objects that apply to the overall range. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the fill object defined on the overall range. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the font object defined on the overall range. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the format protection object for a range. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Gets or sets the width of all colums within the range. If the column widths are not uniform, null will be returned.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the horizontal alignment for the specified object. See Excel.HorizontalAlignment for details.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets or sets the height of all rows in the range. If the row heights are not uniform, null will be returned.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Gets or sets the text orientation of all the cells within the range.\n            The text orientation should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n            If the orientation within a range are not uniform, then null will be returned.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Determines if the row height of the Range object equals the standard height of the sheet.\n            Returns True if the row height of the Range object equals the standard height of the sheet.\n            Returns Null if the range contains more than one row and the rows aren't all the same height.\n            Returns False otherwise.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates whether the column width of the Range object equals the standard width of the sheet.\n            Returns True if the column width of the Range object equals the standard width of the sheet.\n            Returns Null if the range contains more than one column and the columns aren't all the same height.\n            Returns False otherwise.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the vertical alignment for the specified object. See Excel.VerticalAlignment for details.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Indicates if Excel wraps the text in the object. A null value indicates that the entire range doesn't have uniform wrap setting\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Changes the width of the columns of the current range to achieve the best fit, based on the current data in the columns.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Changes the height of the rows of the current range to achieve the best fit, based on the current data in the columns.\n         *\n         * [Api set: ExcelApi 1.2]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.RangeFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.RangeFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RangeFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.RangeFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the format protection of a range object.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Indicates if Excel hides the formula for the cells in the range. A null value indicates that the entire range doesn't have uniform formula hidden setting.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Indicates if Excel locks the cells in the object. A null value indicates that the entire range doesn't have uniform lock setting.\n         *\n         * [Api set: ExcelApi 1.2]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.FormatProtection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.FormatProtection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.FormatProtection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.FormatProtection object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.FormatProtectionData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the background of a range object.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * HTML color code representing the color of the background, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\")\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Resets the range background.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.RangeFill` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.RangeFill` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RangeFill` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.RangeFill object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeFillData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the border of an object.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Constant value that indicates the specific side of the border. See Excel.BorderIndex for details. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Specifies the weight of the border around a range. See Excel.BorderWeight for details.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.RangeBorder` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.RangeBorder` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RangeBorder` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.RangeBorder object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeBorderData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the border objects that make up the range border.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Number of border objects in the collection. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Gets a border object using its name.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param index - Index value of the border object to be retrieved. See Excel.BorderIndex for details.",
        "*\n         * Gets a border object using its name.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param indexString - Index value of the border object to be retrieved. See Excel.BorderIndex for details.",
        "*\n         * Gets a border object using its index.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param index - Index value of the object to be retrieved. Zero-indexed.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.RangeBorderCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.RangeBorderCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RangeBorderCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.RangeBorderCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeBorderCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * This object represents the font attributes (font name, font size, color, etc.) for an object.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the bold status of font.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the italic status of the font.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Font name (e.g. \"Calibri\")\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Font size.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Type of underline applied to the font. See Excel.RangeUnderlineStyle for details.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.RangeFont` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.RangeFont` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RangeFont` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.RangeFont object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeFontData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * A collection of all the chart objects on a worksheet.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the number of charts in the worksheet. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Creates a new chart.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param type - Represents the type of a chart. See Excel.ChartType for details.\n         * @param sourceData - The Range object corresponding to the source data.\n         * @param seriesBy - Optional. Specifies the way columns or rows are used as data series on the chart. See Excel.ChartSeriesBy for details.",
        "*\n         * Creates a new chart.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param typeString - Represents the type of a chart. See Excel.ChartType for details.\n         * @param sourceData - The Range object corresponding to the source data.\n         * @param seriesBy - Optional. Specifies the way columns or rows are used as data series on the chart. See Excel.ChartSeriesBy for details.",
        "*\n         * Returns the number of charts in the worksheet.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Gets a chart using its name. If there are multiple charts with the same name, the first one will be returned.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param name - Name of the chart to be retrieved.",
        "*\n         * Gets a chart based on its position in the collection.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param index - Index value of the object to be retrieved. Zero-indexed.",
        "*\n         * Gets a chart using its name. If there are multiple charts with the same name, the first one will be returned.\n            If the chart does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param name - Name of the chart to be retrieved.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "*\n         * Occurs when a chart is activated.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @eventproperty",
        "*\n         * Occurs when a new chart is added to the worksheet.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @eventproperty",
        "*\n         * Occurs when a chart is deactivated.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @eventproperty",
        "*\n         * Occurs when a chart is deleted.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @eventproperty",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.ChartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents a chart object in a workbook.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents chart axes. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the datalabels on the chart. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Encapsulates the format properties for the chart area. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the legend for the chart. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the plotArea for the chart.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents either a single series or collection of series in the chart. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the title of the specified chart, including the text, visibility, position, and formatting of the title. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * The worksheet containing the current chart. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Returns or sets a ChartCategoryLabelLevel enumeration constant referring to\n            the level of where the category labels are being sourced from. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the type of the chart. See Excel.ChartType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the way that blank cells are plotted on a chart. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the height, in points, of the chart object.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * The unique id of chart. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * The distance, in points, from the left side of the chart to the worksheet origin.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the name of a chart object.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns or sets the way columns or rows are used as data series on the chart. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * True if only visible cells are plotted. False if both visible and hidden cells are plotted. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns or sets a ChartSeriesNameLevel enumeration constant referring to\n            the level of where the series names are being sourced from. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents whether to display all field buttons on a PivotChart.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents whether to show the data labels when the value is greater than the maximum value on the value axis.\n            If value axis became smaller than the size of data points, you can use this property to set whether to show the data labels.\n            This property applies to 2-D charts only.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns or sets the chart style for the chart. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the width, in points, of the chart object.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Deletes the chart object.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions.\n            The aspect ratio is preserved as part of the resizing.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param height - (Optional) The desired height of the resulting image.\n         * @param width - (Optional) The desired width of the resulting image.\n         * @param fittingMode - (Optional) The method used to scale the chart to the specified to the specified dimensions (if both height and width are set).",
        "*\n         * Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions.\n            The aspect ratio is preserved as part of the resizing.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param height - (Optional) The desired height of the resulting image.\n         * @param width - (Optional) The desired width of the resulting image.\n         * @param fittingModeString - (Optional) The method used to scale the chart to the specified to the specified dimensions (if both height and width are set).",
        "*\n         * Resets the source data for the chart.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param sourceData - The range object corresponding to the source data.\n         * @param seriesBy - Specifies the way columns or rows are used as data series on the chart. Can be one of the following: Auto (default), Rows, and Columns. See Excel.ChartSeriesBy for details.",
        "*\n         * Resets the source data for the chart.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param sourceData - The range object corresponding to the source data.\n         * @param seriesByString - Specifies the way columns or rows are used as data series on the chart. Can be one of the following: Auto (default), Rows, and Columns. See Excel.ChartSeriesBy for details.",
        "*\n         * Positions the chart relative to cells on the worksheet.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param startCell - The start cell. This is where the chart will be moved to. The start cell is the top-left or top-right cell, depending on the user's right-to-left display settings.\n         * @param endCell - (Optional) The end cell. If specified, the chart's width and height will be set to fully cover up this cell/range.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Chart` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Chart` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Chart` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "*\n         * Occurs when the chart is activated.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @eventproperty",
        "*\n         * Occurs when the chart is deactivated.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @eventproperty",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Chart object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Encapsulates the format properties for the overall chart area.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the border format of chart area, which includes color, linestyle, and weight. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the fill format of an object, which includes background formatting information. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartAreaFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartAreaFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartAreaFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartAreaFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAreaFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of chart series.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the number of series in the collection. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Add a new series to the collection. The new added series is not visible until set values/x axis values/bubble sizes for it (depending on chart type).\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param name - Optional. Name of the series.\n         * @param index - Optional. Index value of the series to be added. Zero-indexed.",
        "*\n         * Returns the number of series in the collection.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Retrieves a series based on its position in the collection.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param index - Index value of the object to be retrieved. Zero-indexed.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartSeriesCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartSeriesCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartSeriesCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.ChartSeriesCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartSeriesCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents a series in a chart.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of all dataLabels in the series.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the formatting of a chart series, which includes fill and line formatting. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of all points in the series. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of trendlines in the series. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the group for the specified series. Read/Write\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the chart type of a series. See Excel.ChartType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the doughnut hole size of a chart series.  Only valid on doughnut and doughnutExploded charts.\n            Throws an invalid argument exception on invalid charts.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the explosion value for a pie-chart or doughnut-chart slice. Returns 0 (zero) if there's no explosion (the tip of the slice is in the center of the pie). Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Boolean value representing if the series is filtered or not. Not applicable for surface charts.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical). Applies only to pie, 3-D pie, and doughnut charts. Can be a value from 0 through 360. Read/Write\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the gap width of a chart series.  Only valid on bar and column charts, as well as\n            specific classes of line and pie charts.  Throws an invalid argument exception on invalid charts.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Boolean value representing if the series has data labels or not.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * True if Microsoft Excel inverts the pattern in the item when it corresponds to a negative number. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents markers background color of a chart series.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents markers foreground color of a chart series.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents marker size of a chart series.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents marker style of a chart series. See Excel.ChartMarkerStyle for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the name of a series in a chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Specifies how bars and columns are positioned. Can be a value between –100 and 100. Applies only to 2-D bar and 2-D column charts. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the plot order of a chart series within the chart group.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart, as a percentage of the size of the primary pie. Can be a value from 5 to 200. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Boolean value representing if the series has a shadow or not.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Boolean value representing if the series is smooth or not. Only applicable to line and scatter charts.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the way the two sections of either a pie of pie chart or a bar of pie chart are split. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * True if Microsoft Excel assigns a different color or pattern to each data marker. The chart must contain only one series. Read/Write.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Deletes the chart series.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Set bubble sizes for a chart series. Only works for bubble charts.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param sourceData - The Range object corresponding to the source data.",
        "*\n         * Set values for a chart series. For scatter chart, it means Y axis values.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param sourceData - The Range object corresponding to the source data.",
        "*\n         * Set values of X axis for a chart series. Only works for scatter charts.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param sourceData - The Range object corresponding to the source data.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartSeries` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartSeries` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartSeries` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartSeries object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartSeriesData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Encapsulates the format properties for the chart series\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the fill format of a chart series, which includes background formatting information. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents line formatting. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartSeriesFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartSeriesFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartSeriesFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartSeriesFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartSeriesFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * A collection of all the chart points within a series inside a chart.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the number of chart points in the series. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the number of chart points in the series.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Retrieve a point based on its position within the series.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param index - Index value of the object to be retrieved. Zero-indexed.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartPointsCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartPointsCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartPointsCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.ChartPointsCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPointsCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents a point of a series in a chart.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the data label of a chart point. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Encapsulates the format properties chart point. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents whether a data point has a data label. Not applicable for surface charts.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * HTML color code representation of the marker background color of data point. E.g. #FF0000 represents Red.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * HTML color code representation of the marker foreground color of data point. E.g. #FF0000 represents Red.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents marker size of data point.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents marker style of a chart data point. See Excel.ChartMarkerStyle for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns the value of a chart point. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartPoint` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartPoint` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartPoint` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartPoint object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPointData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents formatting object for chart points.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the border format of a chart data point, which includes color, style, and weight information. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the fill format of a chart, which includes background formatting information. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartPointFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartPointFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartPointFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartPointFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPointFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the chart axes.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the category axis in a chart. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the series axis of a 3-dimensional chart. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the value axis in an axis. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the specific axis identified by type and group.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param type - Specifies the axis type. See Excel.ChartAxisType for details.\n         * @param group - Optional. Specifies the axis group. See Excel.ChartAxisGroup for details.",
        "*\n         * Returns the specific axis identified by type and group.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param typeString - Specifies the axis type. See Excel.ChartAxisType for details.\n         * @param group - Optional. Specifies the axis group. See Excel.ChartAxisGroup for details.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartAxes` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartAxes` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartAxes` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartAxes object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAxesData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a single axis in a chart.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the formatting of a chart object, which includes line and font formatting. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns a Gridlines object that represents the major gridlines for the specified axis. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the axis title. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the alignment for the specified axis tick label. See Excel.ChartTextHorizontalAlignment for detail.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the group for the specified axis. See Excel.ChartAxisGroup for details. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the base unit for the specified category axis.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the category axis type.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the custom axis display unit value. Read-only. To set this property, please use the SetCustomDisplayUnit(double) method.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the axis display unit. See Excel.ChartAxisDisplayUnit for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the height, in points, of the chart axis. Null if the axis is not visible. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents whether value axis crosses the category axis between categories.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the distance, in points, from the left edge of the axis to the left of chart area. Null if the axis is not visible. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the base of the logarithm when using logarithmic scales.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the type of major tick mark for the specified axis. See Excel.ChartAxisTickMark for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the major unit scale value for the category axis when the CategoryType property is set to TimeScale.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the type of minor tick mark for the specified axis. See Excel.ChartAxisTickMark for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns or sets the minor unit scale value for the category axis when the CategoryType property is set to TimeScale.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the interval between two minor tick marks. Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents whether an axis is multilevel or not.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the format code for the axis tick label.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the distance between the levels of labels, and the distance between the first level and the axis line. The value should be an integer from 0 to 1000.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the specified axis position where the other axis crosses. See Excel.ChartAxisPosition for details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the specified axis position where the other axis crosses at. You should use the SetPositionAt(double) method to set this property.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents whether Microsoft Excel plots data points from last to first.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the value axis scale type. See Excel.ChartAxisScaleType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents whether the axis display unit label is visible.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the text orientation of the axis tick label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the position of tick-mark labels on the specified axis. See Excel.ChartAxisTickLabelPosition for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the number of categories or series between tick-mark labels. Can be a value from 1 through 31999 or an empty string for automatic setting. The returned value is always a number.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the number of categories or series between tick marks.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the distance, in points, from the top edge of the axis to the top of chart area. Null if the axis is not visible. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the axis type. See Excel.ChartAxisType for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * A boolean value represents the visibility of the axis.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the width, in points, of the chart axis. Null if the axis is not visible. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Sets all the category names for the specified axis.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param sourceData - The Range object corresponding to the source data.",
        "*\n         * Sets the axis display unit to a custom value.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param value - Custom value of the display unit.",
        "*\n         * Set the specified axis position where the other axis crosses at.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param value - Custom value of the crosses at",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartAxis` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartAxis` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartAxis` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartAxis object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAxisData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Encapsulates the format properties for the chart axis.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents chart fill formatting. Read-only.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents chart line formatting. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartAxisFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartAxisFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartAxisFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartAxisFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAxisFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the title of a chart axis.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the formatting of chart axis title. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the axis title.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * A boolean that specifies the visibility of an axis title.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * A string value that represents the formula of chart axis title using A1-style notation.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param formula - a string that present the formula to set",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartAxisTitle` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartAxisTitle` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartAxisTitle` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartAxisTitle object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAxisTitleData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the chart axis title formatting.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the border format, which includes color, linestyle, and weight.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents chart fill formatting.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartAxisTitleFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartAxisTitleFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartAxisTitleFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartAxisTitleFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartAxisTitleFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of all the data labels on a chart point.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the format of chart data labels, which includes fill and font formatting. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents whether data labels automatically generate appropriate text based on context.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the horizontal alignment for chart data label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of data label is 0.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the format code for data labels.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * String representing the separator used for the data labels on a chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Boolean value representing if the data label bubble size is visible or not.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Boolean value representing if the data label category name is visible or not.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Boolean value representing if the data label legend key is visible or not.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Boolean value representing if the data label percentage is visible or not.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Boolean value representing if the data label series name is visible or not.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Boolean value representing if the data label value is visible or not.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the text orientation of data labels. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the vertical alignment of chart data label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of data label is 90, -90 or 180.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartDataLabels` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartDataLabels` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartDataLabels` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartDataLabels object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartDataLabelsData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the data label of a chart point.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the format of chart data label.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Boolean value representing if data label automatically generates appropriate text based on context.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * String value that represents the formula of chart data label using A1-style notation.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the height, in points, of the chart data label. Read-only. Null if chart data label is not visible.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the horizontal alignment for chart data label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of data label is 90, -90 or 180.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the distance, in points, from the left edge of chart data label to the left edge of chart area. Null if chart data label is not visible.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * String value that represents the format code for data label.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * String representing the separator used for the data label on a chart.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Boolean value representing if the data label bubble size is visible or not.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Boolean value representing if the data label category name is visible or not.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Boolean value representing if the data label legend key is visible or not.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Boolean value representing if the data label percentage is visible or not.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Boolean value representing if the data label series name is visible or not.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Boolean value representing if the data label value is visible or not.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * String representing the text of the data label on a chart.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the text orientation of chart data label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the distance, in points, from the top edge of chart data label to the top of chart area. Null if chart data label is not visible.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the vertical alignment of chart data label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of data label is 0.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the width, in points, of the chart data label. Read-only. Null if chart data label is not visible.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartDataLabel` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartDataLabel` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartDataLabel` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartDataLabel object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartDataLabelData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Encapsulates the format properties for the chart data labels.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the border format, which includes color, linestyle, and weight. Read-only.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the fill format of the current chart data label. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartDataLabelFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartDataLabelFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartDataLabelFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartDataLabelFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartDataLabelFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents major or minor gridlines on a chart axis.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the formatting of chart gridlines. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Boolean value representing if the axis gridlines are visible or not.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartGridlines` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartGridlines` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartGridlines` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartGridlines object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartGridlinesData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Encapsulates the format properties for chart gridlines.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents chart line formatting. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartGridlinesFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartGridlinesFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartGridlinesFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartGridlinesFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartGridlinesFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the legend in a chart.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of legendEntries in the legend. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the height, in points, of the legend on the chart. Null if legend is not visible.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the left, in points, of a chart legend. Null if legend is not visible.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Boolean value for whether the chart legend should overlap with the main body of the chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the position of the legend on the chart. See Excel.ChartLegendPosition for details.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents if the legend has a shadow on the chart.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the top of a chart legend.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * A boolean value the represents the visibility of a ChartLegend object.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the width, in points, of the legend on the chart. Null if legend is not visible.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartLegend` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartLegend` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartLegend` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartLegend object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartLegendData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the legendEntry in legendEntryCollection.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the height of the legendEntry on the chart legend.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the index of the legendEntry in the chart legend.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the left of a chart legendEntry.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the top of a chart legendEntry.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the visible of a chart legend entry.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the width of the legendEntry on the chart Legend.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartLegendEntry` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartLegendEntry` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartLegendEntry` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartLegendEntry object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartLegendEntryData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of legendEntries.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Returns the number of legendEntry in the collection.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Returns a legendEntry at the given index.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param index - Index of the legendEntry to be retrieved.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartLegendEntryCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartLegendEntryCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartLegendEntryCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.ChartLegendEntryCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartLegendEntryCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Encapsulates the format properties of a chart legend.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the border format, which includes color, linestyle, and weight. Read-only.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the fill format of an object, which includes background formatting information. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartLegendFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartLegendFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartLegendFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartLegendFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartLegendFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a chart title object of a chart.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the formatting of a chart title, which includes fill and font formatting. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the height, in points, of the chart title. Null if chart title is not visible. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the horizontal alignment for chart title.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the distance, in points, from the left edge of chart title to the left edge of chart area. Null if chart title is not visible.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Boolean value representing if the chart title will overlay the chart or not.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the position of chart title. See Excel.ChartTitlePosition for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents a boolean value that determines if the chart title has a shadow.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the title text of a chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the text orientation of chart title. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the distance, in points, from the top edge of chart title to the top of chart area. Null if chart title is not visible.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the vertical alignment of chart title. See Excel.ChartTextVerticalAlignment for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * A boolean value the represents the visibility of a chart title object.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Returns the width, in points, of the chart title. Null if chart title is not visible. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Get the substring of a chart title. Line break '\\n' also counts one character.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param start - Start position of substring to be retrieved. Position start with 0.\n         * @param length - Length of substring to be retrieved.",
        "*\n         * Sets a string value that represents the formula of chart title using A1-style notation.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param formula - A string that represents the formula to set.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartTitle` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartTitle` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartTitle` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartTitle object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTitleData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the substring in chart related objects that contains text, like ChartTitle object, ChartAxisTitle object, etc.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the font attributes, such as font name, font size, color, etc. of chart characters object.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartFormatString` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartFormatString` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartFormatString` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartFormatString object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartFormatStringData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Provides access to the office art formatting for chart title.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the border format of chart title, which includes color, linestyle, and weight. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the fill format of an object, which includes background formatting information. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the font attributes (font name, font size, color, etc.) for an object. Read-only.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartTitleFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartTitleFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartTitleFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartTitleFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTitleFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the fill formatting for a chart element.\n     *\n     * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.",
        "*\n         * Clear the fill color of a chart element.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Sets the fill formatting of a chart element to a uniform color.\n         *\n         * [Api set: ExcelApi 1.1]\n         *\n         * @param color - HTML color code representing the color of the background, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartFill object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartFillData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the border formatting of a chart element.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * HTML color code representing the color of borders in the chart.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the line style of the border. See Excel.ChartLineStyle for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents weight of the border, in points.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Clear the border format of a chart element.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartBorder` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartBorder` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartBorder` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartBorder object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartBorderData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Encapsulates the formatting options for line elements.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * HTML color code representing the color of lines in the chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the line style. See Excel.ChartLineStyle for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents weight of the line, in points.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Clear the line format of a chart element.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartLineFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartLineFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartLineFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartLineFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartLineFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * This object represents the font attributes (font name, font size, color, etc.) for a chart object.\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the bold status of font.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the italic status of the font.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Font name (e.g. \"Calibri\")\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Size of the font (e.g. 11)\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n         * Type of underline applied to the font. See Excel.ChartUnderlineStyle for details.\n         *\n         * [Api set: ExcelApi 1.1]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartFont` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartFont` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartFont` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartFont object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartFontData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * This object represents the attributes for a chart trendline object.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the formatting of a chart trendline.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the label of a chart trendline.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the number of periods that the trendline extends backward.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the number of periods that the trendline extends forward.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the intercept value of the trendline. Can be set to a numeric value or an empty string (for automatic values). The returned value is always a number.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the period of a chart trendline. Only applicable for trendline with MovingAverage type.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the name of the trendline. Can be set to a string value, or can be set to null value represents automatic values. The returned value is always a string\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the order of a chart trendline. Only applicable for trendline with Polynomial type.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * True if the equation for the trendline is displayed on the chart.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * True if the R-squared for the trendline is displayed on the chart.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the type of a chart trendline.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Delete the trendline object.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartTrendline` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartTrendline` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartTrendline` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartTrendline object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTrendlineData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of Chart Trendlines.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Adds a new trendline to trendline collection.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param type - Specifies the trendline type. The default value is \"Linear\". See Excel.ChartTrendline for details.",
        "*\n         * Adds a new trendline to trendline collection.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param typeString - Specifies the trendline type. The default value is \"Linear\". See Excel.ChartTrendline for details.",
        "*\n         * Returns the number of trendlines in the collection.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Get trendline object by index, which is the insertion order in items array.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param index - Represents the insertion order in items array.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartTrendlineCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartTrendlineCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartTrendlineCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.ChartTrendlineCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTrendlineCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents the format properties for chart trendline.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Represents chart line formatting. Read-only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartTrendlineFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartTrendlineFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartTrendlineFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartTrendlineFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTrendlineFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * This object represents the attributes for a chart trendline lable object.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the format of chart trendline label.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Boolean value representing if trendline label automatically generates appropriate text based on context.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * String value that represents the formula of chart trendline label using A1-style notation.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the height, in points, of the chart trendline label. Read-only. Null if chart trendline label is not visible.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the horizontal alignment for chart trendline label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of trendline label is 90, -90 or 180.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the distance, in points, from the left edge of chart trendline label to the left edge of chart area. Null if chart trendline label is not visible.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * String value that represents the format code for trendline label.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * String representing the text of the trendline label on a chart.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the text orientation of chart trendline label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the distance, in points, from the top edge of chart trendline label to the top of chart area. Null if chart trendline label is not visible.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the vertical alignment of chart trendline label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of trendline label is 0.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the width, in points, of the chart trendline label. Read-only. Null if chart trendline label is not visible.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartTrendlineLabel` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartTrendlineLabel` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartTrendlineLabel` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartTrendlineLabel object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTrendlineLabelData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Encapsulates the format properties for the chart trendline label.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the border format, which includes color, linestyle, and weight.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the fill format of the current chart trendline label.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the font attributes (font name, font size, color, etc.) for a chart trendline label.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartTrendlineLabelFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartTrendlineLabelFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartTrendlineLabelFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartTrendlineLabelFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartTrendlineLabelFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * This object represents the attributes for a chart plotArea object.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the formatting of a chart plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the height value of plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the insideHeight value of plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the insideLeft value of plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the insideTop value of plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the insideWidth value of plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the left value of plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the position of plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the top value of plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the width value of plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartPlotArea` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartPlotArea` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartPlotArea` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartPlotArea object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPlotAreaData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the format properties for chart plotArea.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the border attributes of a chart plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the fill format of an object, which includes background formatting information.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ChartPlotAreaFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ChartPlotAreaFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartPlotAreaFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ChartPlotAreaFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ChartPlotAreaFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Manages sorting operations on Range objects.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Perform a sort operation.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param fields - The list of conditions to sort on.\n         * @param matchCase - Optional. Whether to have the casing impact string ordering.\n         * @param hasHeaders - Optional. Whether the range has a header.\n         * @param orientation - Optional. Whether the operation is sorting rows or columns.\n         * @param method - Optional. The ordering method used for Chinese characters.",
        "*\n         * Perform a sort operation.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param fields - The list of conditions to sort on.\n         * @param matchCase - Optional. Whether to have the casing impact string ordering.\n         * @param hasHeaders - Optional. Whether the range has a header.\n         * @param orientationString - Optional. Whether the operation is sorting rows or columns.\n         * @param method - Optional. The ordering method used for Chinese characters.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.RangeSort object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeSortData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Manages sorting operations on Table objects.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the current conditions used to last sort the table. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents whether the casing impacted the last sort of the table. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents Chinese character ordering method last used to sort the table. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Perform a sort operation.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param fields - The list of conditions to sort on.\n         * @param matchCase - Optional. Whether to have the casing impact string ordering.\n         * @param method - Optional. The ordering method used for Chinese characters.",
        "*\n         * Perform a sort operation.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param fields - The list of conditions to sort on.\n         * @param matchCase - Optional. Whether to have the casing impact string ordering.\n         * @param methodString - Optional. The ordering method used for Chinese characters.",
        "*\n         * Clears the sorting that is currently on the table. While this doesn't modify the table's ordering, it clears the state of the header buttons.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Reapplies the current sorting parameters to the table.\n         *\n         * [Api set: ExcelApi 1.2]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.TableSort` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.TableSort` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableSort` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.TableSort object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableSortData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a condition in a sorting operation.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Represents whether the sorting is done in an ascending fashion.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the color that is the target of the condition if the sorting is on font or cell color.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents additional sorting options for this field.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the icon that is the target of the condition if the sorting is on the cell's icon.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row).\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the type of sorting of this condition.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n     * Manages the filtering of a table's column.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * The currently applied filter on the given column. Read-only.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Apply the given filter criteria on the given column.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param criteria - The criteria to apply.",
        "*\n         * Apply a \"Bottom Item\" filter to the column for the given number of elements.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param count - The number of elements from the bottom to show.",
        "*\n         * Apply a \"Bottom Percent\" filter to the column for the given percentage of elements.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param percent - The percentage of elements from the bottom to show.",
        "*\n         * Apply a \"Cell Color\" filter to the column for the given color.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param color - The background color of the cells to show.",
        "*\n         * Apply an \"Icon\" filter to the column for the given criteria strings.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param criteria1 - The first criteria string.\n         * @param criteria2 - Optional. The second criteria string.\n         * @param oper - Optional. The operator that describes how the two criteria are joined.",
        "*\n         * Apply an \"Icon\" filter to the column for the given criteria strings.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param criteria1 - The first criteria string.\n         * @param criteria2 - Optional. The second criteria string.\n         * @param operString - Optional. The operator that describes how the two criteria are joined.",
        "*\n         * Apply a \"Dynamic\" filter to the column.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param criteria - The dynamic criteria to apply.",
        "*\n         * Apply a \"Dynamic\" filter to the column.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param criteriaString - The dynamic criteria to apply.",
        "*\n         * Apply a \"Font Color\" filter to the column for the given color.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param color - The font color of the cells to show.",
        "*\n         * Apply an \"Icon\" filter to the column for the given icon.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param icon - The icons of the cells to show.",
        "*\n         * Apply a \"Top Item\" filter to the column for the given number of elements.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param count - The number of elements from the top to show.",
        "*\n         * Apply a \"Top Percent\" filter to the column for the given percentage of elements.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param percent - The percentage of elements from the top to show.",
        "*\n         * Apply a \"Values\" filter to the column for the given values.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - The list of values to show. This must be an array of strings or an array of Excel.FilterDateTime objects.",
        "*\n         * Clear the filter on the given column.\n         *\n         * [Api set: ExcelApi 1.2]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Filter` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Filter` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Filter` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Filter object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.FilterData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the filtering criteria applied to a column.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * The HTML color string used to filter cells. Used with \"cellColor\" and \"fontColor\" filtering.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * The first criterion used to filter data. Used as an operator in the case of \"custom\" filtering.\n             For example \">50\" for number greater than 50 or \"=*s\" for values ending in \"s\".\n            \n             Used as a number in the case of top/bottom items/percents. E.g. \"5\" for the top 5 items if filterOn is set to \"topItems\"\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * The second criterion used to filter data. Only used as an operator in the case of \"custom\" filtering.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * The dynamic criteria from the Excel.DynamicFilterCriteria set to apply on this column. Used with \"dynamic\" filtering.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * The property used by the filter to determine whether the values should stay visible.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * The icon used to filter cells. Used with \"icon\" filtering.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * The operator used to combine criterion 1 and 2 when using \"custom\" filtering.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * The set of values to be used as part of \"values\" filtering.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n     * Represents how to filter a date when filtering on values.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * The date in ISO8601 format used to filter data.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * How specific the date should be used to keep data. For example, if the date is 2005-04-02 and the specifity is set to \"month\", the filter operation will keep all rows with a date in the month of april 2009.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n     * Represents a cell icon.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the index of the icon in the given set.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the set that the icon is part of.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n     * A scoped collection of custom XML parts.\n            A scoped collection is the result of some operation, e.g. filtering by namespace.\n            A scoped collection cannot be scoped any further.\n     *\n     * [Api set: ExcelApi 1.5]",
        "*\n         * Gets the number of CustomXML parts in this collection.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n         * Gets a custom XML part based on its ID.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param id - ID of the object to be retrieved.",
        "*\n         * Gets a custom XML part based on its ID.\n            If the CustomXmlPart does not exist, the return object's isNull property will be true.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param id - ID of the object to be retrieved.",
        "*\n         * If the collection contains exactly one item, this method returns it.\n            Otherwise, this method produces an error.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n         * If the collection contains exactly one item, this method returns it.\n            Otherwise, this method returns Null.\n         *\n         * [Api set: ExcelApi 1.5]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.CustomXmlPartScopedCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * A collection of custom XML parts.\n     *\n     * [Api set: ExcelApi 1.5]",
        "*\n         * Adds a new custom XML part to the workbook.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param xml - XML content. Must be a valid XML fragment.",
        "*\n         * Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param namespaceUri - This must be a fully qualified schema URI; for example, \"http://schemas.contoso.com/review/1.0\".",
        "*\n         * Gets the number of CustomXml parts in the collection.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n         * Gets a custom XML part based on its ID.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param id - ID of the object to be retrieved.",
        "*\n         * Gets a custom XML part based on its ID.\n            If the CustomXmlPart does not exist, the return object's isNull property will be true.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param id - ID of the object to be retrieved.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.CustomXmlPartCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents a custom XML part object in a workbook.\n     *\n     * [Api set: ExcelApi 1.5]",
        "*\n         * The custom XML part's ID. Read-only.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n         * The custom XML part's namespace URI. Read-only.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n         * Deletes the custom XML part.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n         * Gets the custom XML part's full XML content.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n         * Sets the custom XML part's full XML content.\n         *\n         * [Api set: ExcelApi 1.5]\n         *\n         * @param xml - XML content for the part.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.CustomXmlPart` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPart` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPart` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.CustomXmlPart object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of all the PivotTables that are part of the workbook or worksheet.\n     *\n     * [Api set: ExcelApi 1.3]",
        "*\n         * Add a Pivottable based on the specified source data and insert it at the top left cell of the destination range.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - The name of the new PivotTable.\n         * @param source - The source data for the new PivotTable, this can either be a range (or string address including the worksheet name) or a table.\n         * @param destination - The cell in the upper-left corner of the PivotTable report's destination range (the range on the worksheet where the resulting report will be placed).\n         * @returns Returns the newly inserted PivotTable.",
        "*\n         * Gets the number of pivot tables in the collection.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n         * Gets a PivotTable by name.\n         *\n         * [Api set: ExcelApi 1.3]\n         *\n         * @param name - Name of the PivotTable to be retrieved.",
        "*\n         * Gets a PivotTable by name. If the PivotTable does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.4]\n         *\n         * @param name - Name of the PivotTable to be retrieved.",
        "*\n         * Refreshes all the pivot tables in the collection.\n         *\n         * [Api set: ExcelApi 1.3]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.PivotTableCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.PivotTableCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotTableCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.PivotTableCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotTableCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents an Excel PivotTable.\n     *\n     * [Api set: ExcelApi 1.3]",
        "*\n         * The Column Pivot Hierarchies of the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The Data Pivot Hierarchies of the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The Filter Pivot Hierarchies of the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The Pivot Hierarchies of the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The PivotLayout describing the layout and visual structure of the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The Row Pivot Hierarchies of the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The worksheet containing the current PivotTable.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Id of the PivotTable. Read-only.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n         * Name of the PivotTable.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n         * Deletes the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Refreshes the PivotTable.\n         *\n         * [Api set: ExcelApi 1.3]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.PivotTable` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.PivotTable` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotTable` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.PivotTable object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotTableData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the visual layout of the PivotTable.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * This property indicates the PivotLayoutType of all fields on the PivotTable. If fields have different states, this will be null.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * True if the PivotTable report shows grand totals for columns.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * True if the PivotTable report shows grand totals for rows.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * This property indicates the SubtotalLocationType of all fields on the PivotTable. If fields have different states, this will be null.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the range where the PivotTable's column labels reside.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the range where the PivotTable's data values reside.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the range of the PivotTable's filter area.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the range the PivotTable exists on, excluding the filter area.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the range where the PivotTable's row labels reside.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.PivotLayout` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.PivotLayout` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotLayout` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.PivotLayout object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotLayoutData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of all the PivotTables that are part of the workbook or worksheet.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the number of pivot hierarchies in the collection.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets a PivotHierarchy by its name or id.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the PivotTable to be retrieved.",
        "*\n         * Gets a PivotHierarchy by name. If the PivotHierarchy does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the PivotHierarchy to be retrieved.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.PivotHierarchyCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.PivotHierarchyCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotHierarchyCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.PivotHierarchyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotHierarchyCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents the Excel PivotHierarchy.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the PivotFields associated with the PivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Id of the PivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Name of the PivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.PivotHierarchy` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.PivotHierarchy` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotHierarchy` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.PivotHierarchy object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotHierarchyData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of RowColumnPivotHierarchy items associated with the PivotTable.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Adds the PivotHierarchy to the current axis. If the hierarchy is present elsewhere on the row, column,\n            or filter axis, it will be removed from that location.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the number of pivot hierarchies in the collection.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets a RowColumnPivotHierarchy by its name or id.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the PivotTable to be retrieved.",
        "*\n         * Gets a RowColumnPivotHierarchy by name. If the RowColumnPivotHierarchy does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the RowColumnPivotHierarchy to be retrieved.",
        "*\n         * Removes the PivotHierarchy from the current axis.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.RowColumnPivotHierarchyCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.RowColumnPivotHierarchyCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RowColumnPivotHierarchyCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.RowColumnPivotHierarchyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RowColumnPivotHierarchyCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents the Excel RowColumnPivotHierarchy.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the PivotFields associated with the RowColumnPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Id of the RowColumnPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Name of the RowColumnPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Position of the RowColumnPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Reset the RowColumnPivotHierarchy back to its default values.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.RowColumnPivotHierarchy` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.RowColumnPivotHierarchy` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.RowColumnPivotHierarchy` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.RowColumnPivotHierarchy object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RowColumnPivotHierarchyData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of FilterPivotHierarchy items associated with the PivotTable.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Adds the PivotHierarchy to the current axis. If the hierarchy is present elsewhere on the row, column,\n            or filter axis, it will be removed from that location.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the number of pivot hierarchies in the collection.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets a FilterPivotHierarchy by its name or id.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the PivotTable to be retrieved.",
        "*\n         * Gets a FilterPivotHierarchy by name. If the FilterPivotHierarchy does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the FilterPivotHierarchy to be retrieved.",
        "*\n         * Removes the PivotHierarchy from the current axis.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.FilterPivotHierarchyCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.FilterPivotHierarchyCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.FilterPivotHierarchyCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.FilterPivotHierarchyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.FilterPivotHierarchyCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents the Excel FilterPivotHierarchy.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the PivotFields associated with the FilterPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Determines whether to allow multiple filter items.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Id of the FilterPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Name of the FilterPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Position of the FilterPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Reset the FilterPivotHierarchy back to its default values.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.FilterPivotHierarchy` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.FilterPivotHierarchy` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.FilterPivotHierarchy` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.FilterPivotHierarchy object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.FilterPivotHierarchyData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of DataPivotHierarchy items associated with the PivotTable.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Adds the PivotHierarchy to the current axis.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the number of pivot hierarchies in the collection.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets a DataPivotHierarchy by its name or id.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the PivotTable to be retrieved.",
        "*\n         * Gets a DataPivotHierarchy by name. If the DataPivotHierarchy does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the DataPivotHierarchy to be retrieved.",
        "*\n         * Removes the PivotHierarchy from the current axis.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.DataPivotHierarchyCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.DataPivotHierarchyCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataPivotHierarchyCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.DataPivotHierarchyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataPivotHierarchyCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents the Excel DataPivotHierarchy.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the PivotFields associated with the DataPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Id of the DataPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Name of the DataPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Number format of the DataPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Position of the DataPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Determines whether the data should be shown as a specific summary calculation or not.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Determines whether to show all items of the DataPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Reset the DataPivotHierarchy back to its default values.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.DataPivotHierarchy` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.DataPivotHierarchy` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataPivotHierarchy` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.DataPivotHierarchy object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataPivotHierarchyData`) that contains shallow copies of any loaded child properties from the original object.",
        "* [Api set: ExcelApi 1.8]",
        "*\n         * The base PivotField to base the ShowAs calculation, if applicable based on the ShowAsCalculation type, else null.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The base Item to base the ShowAs calculation on, if applicable based on the ShowAsCalculation type, else null.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * The ShowAs Calculation to use for the Data PivotField. See Excel.ShowAsCalculation for Details.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Represents a collection of all the PivotTables that are part of the workbook or worksheet.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the number of pivot hierarchies in the collection.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets a PivotHierarchy by its name or id.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the PivotTable to be retrieved.",
        "*\n         * Gets a PivotHierarchy by name. If the PivotHierarchy does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the PivotHierarchy to be retrieved.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.PivotFieldCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.PivotFieldCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotFieldCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.PivotFieldCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotFieldCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents the Excel PivotField.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Returns the PivotFields associated with the PivotField.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Id of the PivotField.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Name of the PivotField.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Determines whether to show all items of the PivotField.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Subtotals of the PivotField.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Sorts the PivotField. If a DataPivotHierarchy is specified, then sort will be applied based on it, if not sort will be based on the PivotField itself.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param sortby - Represents whether the sorting is done in an ascending or descending order.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.PivotField` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.PivotField` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotField` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.PivotField object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotFieldData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of all the Pivot Items related to their parent PivotField.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Gets the number of pivot hierarchies in the collection.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Gets a PivotHierarchy by its name or id.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the PivotTable to be retrieved.",
        "*\n         * Gets a PivotHierarchy by name. If the PivotHierarchy does not exist, will return a null object.\n         *\n         * [Api set: ExcelApi 1.8]\n         *\n         * @param name - Name of the PivotHierarchy to be retrieved.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.PivotItemCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.PivotItemCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotItemCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.PivotItemCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotItemCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents the Excel PivotItem.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Id of the PivotItem.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Determines whether the item is expanded to show child items or if it's collapsed and child items are hidden.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Name of the PivotItem.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Determines whether the PivotItem is visible or not.\n         *\n         * [Api set: ExcelApi 1.8]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.PivotItem` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.PivotItem` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PivotItem` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.PivotItem object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PivotItemData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Subtotals for the Pivot Field.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * If Automatic is set to true, then all other values will be ignored when setting the Subtotals.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n     * Represents the sort direction.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Ascending sort. Smallest to largest or A to Z.\n         *",
        "*\n         * Descending sort. Largest to smallest or Z to A.\n         *",
        "*\n     * Aggregation Function for the Data Pivot Field.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Aggregation function is unknown or unsupported.\n         *",
        "*\n         * Excel will automatically select the aggregation based on the data items.\n         *",
        "*\n         * Aggregate using the sum of the data, equivalent to the SUM function.\n         *",
        "*\n         * Aggregate using the count of items in the data, equivalent to the COUNTA function.\n         *",
        "*\n         * Aggregate using the average of the data, equivalent to the AVERAGE function.\n         *",
        "*\n         * Aggregate using the maximum value of the data, equivalent to the MAX function.\n         *",
        "*\n         * Aggregate using the minimum value of the data, equivalent to the MIN function.\n         *",
        "*\n         * Aggregate using the product of the data, equivalent to the PRODUCT function.\n         *",
        "*\n         * Aggregate using the count of numbers in the data, equivalent to the COUNT function.\n         *",
        "*\n         * Aggregate using the standard deviation of the data, equivalent to the STDEV function.\n         *",
        "*\n         * Aggregate using the standard deviation of the data, equivalent to the STDEVP function.\n         *",
        "*\n         * Aggregate using the variance of the data, equivalent to the VAR function.\n         *",
        "*\n         * Aggregate using the variance of the data, equivalent to the VARP function.\n         *",
        "*\n     * The ShowAs Calculation function for the Data Pivot Field.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * Calculation is unknown or unsupported.\n         *",
        "*\n         * No calculation is applied.\n         *",
        "*\n         * Percent of the grand total.\n         *",
        "*\n         * Percent of the row total.\n         *",
        "*\n         * Percent of the column total.\n         *",
        "*\n         * Percent of the row total for the specified Base Field.\n         *",
        "*\n         * Percent of the column total for the specified Base Field.\n         *",
        "*\n         * Percent of the grand total for the specified Base Field.\n         *",
        "*\n         * Percent of the specified Base Field and Base Item.\n         *",
        "*\n         * Running Total of the specified Base Field.\n         *",
        "*\n         * Percent Running Total of the specified Base Field.\n         *",
        "*\n         * Difference from the specified Base Field and Base Item.\n         *",
        "*\n         * Difference from the specified Base Field and Base Item.\n         *",
        "*\n         * Ascending Rank of the specified Base Field.\n         *",
        "*\n         * Descending Rank of the specified Base Field.\n         *",
        "*\n         * Calculates the values as follows:\n            ((value in cell) x (Grand Total of Grand Totals)) / ((Grand Row Total) x (Grand Column Total))\n         *",
        "*\n     * Represents workbook properties.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the collection of custom properties of the workbook. Read only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets or sets the author of the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets or sets the category of the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets or sets the comments of the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets or sets the company of the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the creation date of the workbook. Read only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets or sets the keywords of the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the last author of the workbook. Read only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets or sets the manager of the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the revision number of the workbook. Read only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets or sets the subject of the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets or sets the title of the workbook.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.DocumentProperties` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.DocumentProperties` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DocumentProperties` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.DocumentProperties object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DocumentPropertiesData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a custom property.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the key of the custom property. Read only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the value type of the custom property. Read only.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets or sets the value of the custom property.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Deletes the custom property.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.CustomProperty` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.CustomProperty` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomProperty` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.CustomProperty object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomPropertyData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Contains the collection of customProperty objects.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Creates a new or sets an existing custom property.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param key - Required. The custom property's key, which is case-insensitive.\n         * @param value - Required. The custom property's value.",
        "*\n         * Deletes all custom properties in this collection.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets the count of custom properties.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Gets a custom property object by its key, which is case-insensitive. Throws if the custom property does not exist.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param key - The key that identifies the custom property object.",
        "*\n         * Gets a custom property object by its key, which is case-insensitive. Returns a null object if the custom property does not exist.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param key - Required. The key that identifies the custom property object.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.CustomPropertyCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.CustomPropertyCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomPropertyCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.CustomPropertyCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomPropertyCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * Represents a collection of all the conditional formats that are overlap the range.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Adds a new conditional format to the collection at the first/top priority.\n         *\n         * [Api set: ExcelApi 1.6]\n         *\n         * @param type - The type of conditional format being added. See Excel.ConditionalFormatType for details.",
        "*\n         * Adds a new conditional format to the collection at the first/top priority.\n         *\n         * [Api set: ExcelApi 1.6]\n         *\n         * @param typeString - The type of conditional format being added. See Excel.ConditionalFormatType for details.",
        "*\n         * Clears all conditional formats active on the current specified range.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the number of conditional formats in the workbook. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns a conditional format for the given ID.\n         *\n         * [Api set: ExcelApi 1.6]\n         *\n         * @param id - The id of the conditional format.\n         * @returns Conditional Format object.",
        "*\n         * Returns a conditional format at the given index.\n         *\n         * [Api set: ExcelApi 1.6]\n         *\n         * @param index - Index of the conditional formats to be retrieved.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ConditionalFormatCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.ConditionalFormatCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * An object encapsulating a conditional format's range, format, rule, and other properties.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the cell value conditional format properties if the current conditional format is a CellValue type.\n            For example to format all cells between 5 and 10. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the cell value conditional format properties if the current conditional format is a CellValue type.\n            For example to format all cells between 5 and 10. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the data bar properties if the current conditional format is a data bar. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the data bar properties if the current conditional format is a data bar. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the specific text conditional format properties if the current conditional format is a text type.\n            For example to format cells matching the word \"Text\". Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the specific text conditional format properties if the current conditional format is a text type.\n            For example to format cells matching the word \"Text\". Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.\n            For example to format the top 10% or bottom 10 items. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.\n            For example to format the top 10% or bottom 10 items. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The Priority of the Conditional Format within the current ConditionalFormatCollection. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The priority (or index) within the conditional format collection that this conditional format currently exists in. Changing this also\n            changes other conditional formats' priorities, to allow for a contiguous priority order.\n            Use a negative priority to begin from the back.\n            Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.\n            Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.\n            Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * A type of conditional format. Only one can be set at a time. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Deletes this conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the range the conditonal format is applied to. Throws an error if the conditional format is applied to multiple ranges. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to multiple ranges. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents an Excel Conditional Data Bar Type.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Representation of all values to the left of the axis in an Excel data bar. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Representation of all values to the right of the axis in an Excel data bar. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * HTML color code representing the color of the Axis line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"\" (empty string) if no axis is present or set.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Representation of how the axis is determined for an Excel data bar.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Represents the direction that the data bar graphic should be based on.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The rule for what consistutes the lower bound (and how to calculate it, if applicable) for a data bar.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * If true, hides the values from the cells where the data bar is applied.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The rule for what constitutes the upper bound (and how to calculate it, if applicable) for a data bar.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.DataBarConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.DataBarConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataBarConditionalFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.DataBarConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataBarConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a conditional format DataBar Format for the positive side of the data bar.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"\" (empty string) if no border is present or set.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * HTML color code representing the fill color, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Boolean representation of whether or not the DataBar has a gradient.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ConditionalDataBarPositiveFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ConditionalDataBarPositiveFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalDataBarPositiveFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ConditionalDataBarPositiveFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalDataBarPositiveFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a conditional format DataBar Format for the negative side of the data bar.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"Empty String\" if no border is present or set.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * HTML color code representing the fill color, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Boolean representation of whether or not the negative DataBar has the same border color as the positive DataBar.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Boolean representation of whether or not the negative DataBar has the same fill color as the positive DataBar.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ConditionalDataBarNegativeFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ConditionalDataBarNegativeFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalDataBarNegativeFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ConditionalDataBarNegativeFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalDataBarNegativeFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a rule-type for a Data Bar.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * The formula, if required, to evaluate the databar rule on.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The type of rule for the databar.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n     * Represents a custom conditional format type.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Represents the Rule object on this conditional format. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.CustomConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.CustomConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomConditionalFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.CustomConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a rule, for all traditional rule/format pairings.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * The formula, if required, to evaluate the conditional format rule on.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The formula, if required, to evaluate the conditional format rule on in the user's language.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The formula, if required, to evaluate the conditional format rule on in R1C1-style notation.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ConditionalFormatRule` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatRule` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatRule` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ConditionalFormatRule object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatRuleData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents an IconSet criteria for conditional formatting.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * An array of Criteria and IconSets for the rules and potential custom icons for conditional icons. Note that for the first criterion only the custom icon can be modified, while type, formula, and operator will be ignored when set.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * If true, reverses the icon orders for the IconSet. Note that this cannot be set if custom icons are used.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * If true, hides the values and only shows icons.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * If set, displays the IconSet option for the conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.IconSetConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.IconSetConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.IconSetConditionalFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.IconSetConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.IconSetConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents an Icon Criterion which contains a type, value, an Operator, and an optional custom icon, if not using an iconset.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * The custom icon for the current criterion if different from the default IconSet, else null will be returned.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * A number or a formula depending on the type.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * GreaterThan or GreaterThanOrEqual for each of the rule type for the Icon conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * What the icon conditional formula should be based on.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n     * Represents an IconSet criteria for conditional formatting.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * The criteria of the color scale. Midpoint is optional when using a two point color scale.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * If true the color scale will have three points (minimum, midpoint, maximum), otherwise it will have two (minimum, maximum).\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ColorScaleConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ColorScaleConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ColorScaleConditionalFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ColorScaleConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ColorScaleConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the criteria of the color scale.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * The maximum point Color Scale Criterion.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The midpoint Color Scale Criterion if the color scale is a 3-color scale.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The minimum point Color Scale Criterion.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n     * Represents a Color Scale Criterion which contains a type, value, and a color.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * HTML color code representation of the color scale color. E.g. #FF0000 represents Red.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * A number, a formula, or null (if Type is LowestValue).\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * What the criterion conditional formula should be based on.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n     * Represents a Top/Bottom conditional format.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The criteria of the Top/Bottom conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.TopBottomConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.TopBottomConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TopBottomConditionalFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.TopBottomConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TopBottomConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the rule of the top/bottom conditional format.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * The rank between 1 and 1000 for numeric ranks or 1 and 100 for percent ranks.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Format values based on the top or bottom rank.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n     * Represents the the preset criteria conditional format such as above average, below average, unique values, contains blank, nonblank, error, and noerror.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The rule of the conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.PresetCriteriaConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.PresetCriteriaConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.PresetCriteriaConditionalFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.PresetCriteriaConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.PresetCriteriaConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the Preset Criteria Conditional Format Rule\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * The criterion of the conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n     * Represents a specific text conditional format.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The rule of the conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.TextConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.TextConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TextConditionalFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.TextConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TextConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a Cell Value Conditional Format Rule\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * The operator of the text conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The Text value of conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n     * Represents a cell value conditional format.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Represents the Rule object on this conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.CellValueConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.CellValueConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CellValueConditionalFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.CellValueConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CellValueConditionalFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a cell value conditional format rule.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * The formula, if required, to evaluate the conditional format rule on.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The formula, if required, to evaluate the conditional format rule on.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * The operator of the text conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n     * A format object encapsulating the conditional formats range's font, fill, borders, and other properties.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Collection of border objects that apply to the overall conditional format range. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the fill object defined on the overall conditional format range. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Returns the font object defined on the overall conditional format range. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Represents Excel's number format code for the given range. Cleared if null is passed in.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ConditionalRangeFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ConditionalRangeFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalRangeFormat` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ConditionalRangeFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalRangeFormatData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * This object represents the font attributes (font style, color, etc.) for an object.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Represents the bold status of font.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Represents the italic status of the font.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Represents the strikethrough status of the font.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Type of underline applied to the font. See Excel.ConditionalRangeFontUnderlineStyle for details.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Resets the font formats.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ConditionalRangeFont` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ConditionalRangeFont` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalRangeFont` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ConditionalRangeFont object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalRangeFontData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the background of a conditional range object.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * HTML color code representing the color of the fill, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Resets the fill.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ConditionalRangeFill` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ConditionalRangeFill` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalRangeFill` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ConditionalRangeFill object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalRangeFillData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the border of an object.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Constant value that indicates the specific side of the border. See Excel.ConditionalRangeBorderIndex for details. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.\n         *\n         * [Api set: ExcelApi 1.6]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ConditionalRangeBorder` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ConditionalRangeBorder` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalRangeBorder` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.ConditionalRangeBorder object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalRangeBorderData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents the border objects that make up range border.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n         * Gets the bottom border. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Gets the left border. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Gets the right border. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Gets the top border. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Number of border objects in the collection. Read-only.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n         * Gets a border object using its name.\n         *\n         * [Api set: ExcelApi 1.6]\n         *\n         * @param index - Index value of the border object to be retrieved. See Excel.ConditionalRangeBorderIndex for details.",
        "*\n         * Gets a border object using its name.\n         *\n         * [Api set: ExcelApi 1.6]\n         *\n         * @param indexString - Index value of the border object to be retrieved. See Excel.ConditionalRangeBorderIndex for details.",
        "*\n         * Gets a border object using its index.\n         *\n         * [Api set: ExcelApi 1.6]\n         *\n         * @param index - Index value of the object to be retrieved. Zero-indexed.",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.ConditionalRangeBorderCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.ConditionalRangeBorderCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalRangeBorderCollection` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original `Excel.ConditionalRangeBorderCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalRangeBorderCollectionData`) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.",
        "*\n     * An object encapsulating a style's format and other properties.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * A Border collection of four Border objects that represent the style of the four borders.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * The Fill of the style.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * A Font object that represents the font of the style.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if text is automatically indented when the text alignment in a cell is set to equal distribution.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Indicates if the style is a built-in style.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if the formula will be hidden when the worksheet is protected.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the horizontal alignment for the style. See Excel.HorizontalAlignment for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if the style includes the AutoIndent, HorizontalAlignment, VerticalAlignment, WrapText, IndentLevel, and TextOrientation properties.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if the style includes the Color, ColorIndex, LineStyle, and Weight border properties.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if the style includes the Background, Bold, Color, ColorIndex, FontStyle, Italic, Name, Size, Strikethrough, Subscript, Superscript, and Underline font properties.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if the style includes the NumberFormat property.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if the style includes the Color, ColorIndex, InvertIfNegative, Pattern, PatternColor, and PatternColorIndex interior properties.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if the style includes the FormulaHidden and Locked protection properties.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * An integer from 0 to 250 that indicates the indent level for the style.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if the object is locked when the worksheet is protected.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * The name of the style.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * The format code of the number format for the style.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * The localized format code of the number format for the style.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * The reading order for the style.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if text automatically shrinks to fit in the available column width.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * The text orientation for the style.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the vertical alignment for the style. See Excel.VerticalAlignment for details.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Indicates if Microsoft Excel wraps the text in the object.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n         * Deletes this style.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): Excel.Style` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): Excel.Style` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Style` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNamesAndPaths - Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Style object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.StyleData`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * Represents a collection of all the styles. WARNING: The StyleCollection items array has a known issue when loading items from the collection. Do not use `StyleCollection.items`, any `load()` method, and the `toJSON()` method.\n     *\n     * [Api set: ExcelApi 1.7]",
        "* WARNING: The StyleCollection items array has a known issue when loading items from the collection. Do not use `StyleCollection.items`, any `load()` method, and the `toJSON()` method.",
        "*\n         * Adds a new style to the collection.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param name - Name of the style to be added.",
        "*\n         * Gets a style by name.\n         *\n         * [Api set: ExcelApi 1.7]\n         *\n         * @param name - Name of the style to be retrieved.",
        "* WARNING: The StyleCollection items array has a known issue when loading items from the collection. Do not use `StyleCollection.items`, any `load()` method, and the `toJSON()` method.",
        "* Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading the properties.\n         * @param propertyNames - A comma-delimited string or an array of strings that specify the properties to load.",
        "* WARNING: The StyleCollection items array has a known issue when loading items from the collection. Do not use `StyleCollection.items`, any `load()` method, and the `toJSON()` method.",
        "*\n     * Represents a collection of all the Data Connections that are part of the workbook or worksheet.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Refreshes all the Data Connections in the collection.\n         *\n         * [Api set: ExcelApi 1.7]",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.DataConnectionCollection object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataConnectionCollectionData`) that contains shallow copies of any loaded child properties from the original object.",
        "* [Api set: ExcelApi 1.7]",
        "*\n         * Axis displays categories.\n         *",
        "*\n         * Axis displays values.\n         *",
        "*\n         * Axis displays data series.\n         *",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.7]",
        "*\n         * Default option. This will reset display unit to the axis, and set unit label invisible.\n         *",
        "*\n         * This will set the axis in units of hundreds.\n         *",
        "*\n         * This will set the axis in units of thousands.\n         *",
        "*\n         * This will set the axis in units of tens of thousands.\n         *",
        "*\n         * This will set the axis in units of hundreds of thousands.\n         *",
        "*\n         * This will set the axis in units of millions.\n         *",
        "*\n         * This will set the axis in units of tens of millions.\n         *",
        "*\n         * This will set the axis in units of hundreds of millions.\n         *",
        "*\n         * This will set the axis in units of billions.\n         *",
        "*\n         * This will set the axis in units of trillions.\n         *",
        "*\n         * This will set the axis in units of custom value.\n         *",
        "*\n     * Specifies the unit of time for chart axes and data series.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n     * Specifies the type of the category axis.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n         * Excel controls the axis type.\n         *",
        "*\n         * Axis groups data by an arbitrary set of categories.\n         *",
        "*\n         * Axis groups data on a time scale.\n         *",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.1]",
        "*\n     * Represents the position of chart title.\n     *\n     * [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.8]",
        "*\n     * Specifies whether the series are by rows or by columns. On Desktop, the \"auto\" option will inspect the source data shape to automatically guess whether the data is by rows or columns; on Excel Online, \"auto\" will simply default to \"columns\".\n     *\n     * [Api set: ExcelApi 1.1]",
        "*\n         * On Desktop, the \"auto\" option will inspect the source data shape to automatically guess whether the data is by rows or columns; on Excel Online, \"auto\" will simply default to \"columns\".\n         *",
        "*\n     * Represents the horizontal alignment for the specified object.\n     *\n     * [Api set: ExcelApi 1.7]",
        "*\n     * Represents the vertical alignment for the specified object.\n     *\n     * [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.8]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.8]",
        "* [Api set: ExcelApi 1.8]",
        "* [Api set: ExcelApi 1.8]",
        "* [Api set: ExcelApi 1.8]",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.1]",
        "*\n         * The default recalculation behavior where Excel calculates new formula results every time the relevant data is changed.\n         *",
        "*\n         * Calculates new formula results every time the relevant data is changed, unless the formula is in a data table.\n         *",
        "*\n         * Calculations only occur when the user or add-in requests them.\n         *",
        "* [Api set: ExcelApi 1.1]",
        "*\n         * Recalculates all cells that Excel has marked as dirty, that is, dependents of volatile or changed data, and cells programmatically marked as dirty.\n         *",
        "*\n         * This will mark all cells as dirty and then recalculate them.\n         *",
        "*\n         * This will rebuild the full dependency chain, mark all cells as dirty and then recalculate them.\n         *",
        "* [Api set: ExcelApi 1.1 for All/Formats/Contents, 1.7 for Hyperlinks & HyperlinksAndFormats.]",
        "*\n         * Clears all formatting for the range.\n         *",
        "*\n         * Clears the contents of the range.\n         *",
        "*\n         * Clears all hyperlinks, but leaves all content and formatting intact.\n         *",
        "*\n         * Removes hyperlinks and formatting for the cell but leaves content, conditional formats, and data validation intact.\n         *",
        "*\n     * Represents the format options for a Data Bar Axis.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n     * Represents the Data Bar direction within a cell.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n     * Represents the direction for a selection.\n     *\n     * [Api set: ExcelApi 1.6]",
        "* [Api set: ExcelApi 1.6]",
        "*\n     * Represents the types of conditional format values.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n     * Represents the types of conditional format values.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n     * Represents the types of conditional format values.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n     * Represents the criteria for the above/below average conditional format type.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n     * Represents the criteria for the Preset Criteria conditional format type.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n     * Represents the operator of the text conditional format type.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n     * Represents the operator of the text conditional format type.\n     *\n     * [Api set: ExcelApi 1.6]",
        "*\n     * Represents the operator for each icon criteria.\n     *\n     * [Api set: ExcelApi 1.6]",
        "* [Api set: ExcelApi 1.6]",
        "* [Api set: ExcelApi 1.6]",
        "* [Api set: ExcelApi 1.6]",
        "*\n     * Represents Data validation type enum.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n         * None means allow any value and so there is no data validation in the range.\n         *",
        "*\n         * Whole number data validation type\n         *",
        "*\n         * Decimal data validation type\n         *",
        "*\n         * List data validation type\n         *",
        "*\n         * Date data validation type\n         *",
        "*\n         * Time data validation type\n         *",
        "*\n         * Text length data validation type\n         *",
        "*\n         * Custom data validation type\n         *",
        "*\n         * Inconsistent means that the range has inconsistent data validation (there are different rules on different cells)\n         *",
        "*\n         * MixedCriteria means that the range has data validation present on some but not all cells\n         *",
        "*\n     * Represents Data validation operator enum.\n     *\n     * [Api set: ExcelApi 1.8]",
        "*\n     * Represents Data validation error alert style. The default is \"Stop\".\n     *\n     * [Api set: ExcelApi 1.8]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.2]",
        "* [Api set: ExcelApi 1.2]",
        "* [Api set: ExcelApi 1.2]",
        "* [Api set: ExcelApi 1.2]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.2]",
        "* [Api set: ExcelApi 1.2]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.4]",
        "* [Api set: ExcelApi 1.1 for String,Integer,Double,Boolean,Range,Error; 1.7 for Array]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.1 for Unknown, Empty, String, Integer, Double, Boolean, Error. 1.7 for RichValue]",
        "* [Api set: ExcelApi 1.2]",
        "* [Api set: ExcelApi 1.2]",
        "* [Api set: ExcelApi 1.2]",
        "* [Api set: ExcelApi 1.2]",
        "* [Api set: ExcelApi 1.1]",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.7]",
        "*\n         * Local means event comes from local user session.\n         *",
        "*\n         * Remote means event comes from remote user session.\n         *",
        "* [Api set: ExcelApi 1.7]",
        "*\n         * Unknown represents the type of data change is not the listed types.\n         *",
        "*\n         * RangeEdited represents the data change event is triggered by range being edited.\n         *",
        "*\n         * RowInserted represents the data change event is triggered by inserting new rows.\n         *",
        "*\n         * RowDeleted represents the data change event is triggered by deleting rows.\n         *",
        "*\n         * ColumnInserted represents the data change event is triggered by inserting new columns.\n         *",
        "*\n         * ColumnDeleted represents the data change event is triggered by deleting columns.\n         *",
        "*\n         * CellInserted represents the data change event is triggered by inserting new cells.\n         *",
        "*\n         * CellDeleted represents the data change event is triggered by deleting cells.\n         *",
        "* [Api set: ExcelApi 1.7]",
        "*\n         * WorksheetChanged represents the type of event registered on Worksheet or WorksheetCollection, and occurs when data changes.\n         *",
        "*\n         * WorksheetSelectionChanged represents the type of event registered on Worksheet, and occurs when selection changes.\n         *",
        "*\n         * WorksheetAdded represents the type of event registered on WorksheetCollection, and occurs when a new worksheet is added to the workbook.\n         *",
        "*\n         * WorksheetActivated represents the type of event registered on Worksheet or WorksheetCollection, and occurs when worksheet activates.\n         *",
        "*\n         * WorksheetDeactivated represents the type of event registered on Worksheet or WorksheetCollection, and occurs when worksheet deactivates.\n         *",
        "*\n         * TableChanged represents the type of event registered on Table, and occurs when data changes.\n         *",
        "*\n         * TableSelectionChanged represents the type of event registered on Table, and occurs when selection changes.\n         *",
        "*\n         * WorksheetDeleted represents the type of event registered on WorksheetCollection, and occurs when a worksheet is deleted from the workbook.\n         *",
        "*\n         * ChartAdded represents the type of event registered on ChartCollection, and occurs when a new chart is added to the worksheet.\n         *",
        "*\n         * ChartActivated represents the type of event registered on Chart or ChartCollection, and occurs when chart activates.\n         *",
        "*\n         * ChartDeactivated represents the type of event registered on Chart or ChartCollection, and occurs when chart deactivates.\n         *",
        "*\n         * ChartDeleted represents the type of event registered on ChartCollection, and occurs when a chart is deleted from the worksheet.\n         *",
        "*\n         * WorksheetCalculated represents the type of event registered on Worksheet or WorksheetCollection, and occurs when a worksheet is calculated.\n         *",
        "*\n         * VisualSelectionChanged represents the type of event registered on VisualCollection, and occurs when visual selection changes.\n         *",
        "*\n         * AgaveVisualUpdate represents the type of an event that is associated with an agave visual, and carries a new data view following a data change\n         *",
        "*\n         * TableAdded represents the type of event registered on TableCollection, and occurs when a table is added.\n         *",
        "*\n         * TableDeleted represents the type of event that is registered on TableCollection, and occurs when a table is deleted.\n         *",
        "*\n         * TableFiltered represents the type of event registered on table or TableCollection, and occurs when data of table is filtered.\n         *",
        "*\n         * WorksheetFiltered represents the type of event registered on worksheet or WorksheetCollection, and occurs when data of autofilter in the worksheet is filtered.\n         *",
        "*\n         * ShapeActivated represents the type of event that is registered on Shape, and occurs when shape activates.\n         *",
        "*\n         * ShapeDeactivated represents the type of event that is registered on Shape, and occurs when shape deactivates.\n         *",
        "*\n         * VisualChange represents the type of event registered on Visual, and occurs when there is a visual change.\n         *",
        "*\n         * WorkbookAutoSaveSettingChanged represents the type of event registered on workbook, and occurs when there is an auto save setting change.\n         *",
        "*\n         * WorksheetFormatChanged represents the type of event registered on worksheet, and occurs when there is a format changed.\n         *",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.8]",
        "*\n         * Subtotals are at the top.\n         *",
        "*\n         * Subtotals are at the bottom.\n         *",
        "*\n         * Subtotals are off.\n         *",
        "* [Api set: ExcelApi 1.8]",
        "*\n         * A horizontally compressed form with labels from the next field in the same column.\n         *",
        "*\n         * Inner fields' items are always on a new line relative to the outer fields' items.\n         *",
        "*\n         * Inner fields' items are on same row as outer fields' items and subtotals are always on the bottom.\n         *",
        "* [Api set: ExcelApi 1.7]",
        "*\n         * Selection is allowed for all cells.\n         *",
        "*\n         * Selection is allowed only for cells that are not locked.\n         *",
        "*\n         * Selection is not allowed for all cells.\n         *",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.7]",
        "*\n         * Reading order is determined by the language of the first character entered.\n            If a right-to-left language character is entered first, reading order is right to left.\n            If a left-to-right language character is entered first, reading order is left to right.\n         *",
        "*\n         * Left to right reading order\n         *",
        "*\n         * Right to left reading order\n         *",
        "* [Api set: ExcelApi 1.7]",
        "* [Api set: ExcelApi 1.7]",
        "*\n     * An object containing the result of a function-evaluation operation\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Error value (such as \"#DIV/0\") representing the error. If the error string is not set, then the function succeeded, and its result is written to the Value field. The error is always in the English locale.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * The value of function evaluation. The value field will be populated only if no error has occurred (i.e., the Error property is not set).\n         *\n         * [Api set: ExcelApi 1.2]",
        "* Queues up a command to load the specified properties of the object. You must call \"context.sync()\" before reading the properties.\n         *\n         * @remarks\n         *\n         * In addition to this signature, this method has the following signatures:\n         *\n         * `load(option?: string | string[]): FunctionResult<T>` - Where option is a comma-delimited string or an array of strings that specify the properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; }): FunctionResult<T>` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.\n         *\n         * `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): FunctionResult<T>` - Only available on collection types. It is similar to the preceding signature. Option.top specifies the maximum number of collection items that can be included in the result. Option.skip specifies the number of items that are to be skipped and not included in the result. If option.top is specified, the result set will start after skipping the specified number of items.\n         *\n         * @param options - Provides options for which properties of the object to load.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original FunctionResult<T> object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Interfaces.FunctionResultData<T>`) that contains shallow copies of any loaded child properties from the original object.",
        "*\n     * An object for evaluating Excel functions.\n     *\n     * [Api set: ExcelApi 1.2]",
        "*\n         * Returns the absolute value of a number, a number without its sign.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the real number for which you want the absolute value.",
        "*\n         * Returns the accrued interest for a security that pays periodic interest.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param issue - Is the security's issue date, expressed as a serial date number.\n         * @param firstInterest - Is the security's first interest date, expressed as a serial date number.\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param rate - Is the security's annual coupon rate.\n         * @param par - Is the security's par value.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.\n         * @param calcMethod - Is a logical value: to accrued interest from issue date = TRUE or omitted; to calculate from last coupon payment date = FALSE.",
        "*\n         * Returns the accrued interest for a security that pays interest at maturity.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param issue - Is the security's issue date, expressed as a serial date number.\n         * @param settlement - Is the security's maturity date, expressed as a serial date number.\n         * @param rate - Is the security's annual coupon rate.\n         * @param par - Is the security's par value.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the arccosine of a number, in radians in the range 0 to Pi. The arccosine is the angle whose cosine is Number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the cosine of the angle you want and must be from -1 to 1.",
        "*\n         * Returns the inverse hyperbolic cosine of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is any real number equal to or greater than 1.",
        "*\n         * Returns the arccotangent of a number, in radians in the range 0 to Pi.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the cotangent of the angle you want.",
        "*\n         * Returns the inverse hyperbolic cotangent of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the hyperbolic cotangent of the angle that you want.",
        "*\n         * Returns the prorated linear depreciation of an asset for each accounting period.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param cost - Is the cost of the asset.\n         * @param datePurchased - Is the date the asset is purchased.\n         * @param firstPeriod - Is the date of the end of the first period.\n         * @param salvage - Is the salvage value at the end of life of the asset.\n         * @param period - Is the period.\n         * @param rate - Is the rate of depreciation.\n         * @param basis - Year_basis : 0 for year of 360 days, 1 for actual, 3 for year of 365 days.",
        "*\n         * Returns the prorated linear depreciation of an asset for each accounting period.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param cost - Is the cost of the asset.\n         * @param datePurchased - Is the date the asset is purchased.\n         * @param firstPeriod - Is the date of the end of the first period.\n         * @param salvage - Is the salvage value at the end of life of the asset.\n         * @param period - Is the period.\n         * @param rate - Is the rate of depreciation.\n         * @param basis - Year_basis : 0 for year of 360 days, 1 for actual, 3 for year of 365 days.",
        "*\n         * Checks whether all arguments are TRUE, and returns TRUE if all arguments are TRUE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 conditions you want to test that can be either TRUE or FALSE and can be logical values, arrays, or references.",
        "*\n         * Converts a Roman numeral to Arabic.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the Roman numeral you want to convert.",
        "*\n         * Returns the number of areas in a reference. An area is a range of contiguous cells or a single cell.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param reference - Is a reference to a cell or range of cells and can refer to multiple areas.",
        "*\n         * Changes full-width (double-byte) characters to half-width (single-byte) characters. Use with double-byte character sets (DBCS).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is a text, or a reference to a cell containing a text.",
        "*\n         * Returns the arcsine of a number in radians, in the range -Pi/2 to Pi/2.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the sine of the angle you want and must be from -1 to 1.",
        "*\n         * Returns the inverse hyperbolic sine of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is any real number equal to or greater than 1.",
        "*\n         * Returns the arctangent of a number in radians, in the range -Pi/2 to Pi/2.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the tangent of the angle you want.",
        "*\n         * Returns the arctangent of the specified x- and y- coordinates, in radians between -Pi and Pi, excluding -Pi.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param xNum - Is the x-coordinate of the point.\n         * @param yNum - Is the y-coordinate of the point.",
        "*\n         * Returns the inverse hyperbolic tangent of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is any real number between -1 and 1 excluding -1 and 1.",
        "*\n         * Returns the average of the absolute deviations of data points from their mean. Arguments can be numbers or names, arrays, or references that contain numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 arguments for which you want the average of the absolute deviations.",
        "*\n         * Returns the average (arithmetic mean) of its arguments, which can be numbers or names, arrays, or references that contain numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numeric arguments for which you want the average.",
        "*\n         * Returns the average (arithmetic mean) of its arguments, evaluating text and FALSE in arguments as 0; TRUE evaluates as 1. Arguments can be numbers, names, arrays, or references.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 arguments for which you want the average.",
        "*\n         * Finds average(arithmetic mean) for the cells specified by a given condition or criteria.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param range - Is the range of cells you want evaluated.\n         * @param criteria - Is the condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.\n         * @param averageRange - Are the actual cells to be used to find the average. If omitted, the cells in range are used.",
        "*\n         * Finds average(arithmetic mean) for the cells specified by a given set of conditions or criteria.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param averageRange - Are the actual cells to be used to find the average.\n         * @param values - List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition or criteria in the form of a number, expression, or text that defines which cells will be used to find the average.",
        "*\n         * Converts a number to text (baht).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is a number that you want to convert.",
        "*\n         * Converts a number into a text representation with the given radix (base).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the number that you want to convert.\n         * @param radix - Is the base Radix that you want to convert the number into.\n         * @param minLength - Is the minimum length of the returned string.  If omitted leading zeros are not added.",
        "*\n         * Returns the modified Bessel function In(x).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which to evaluate the function.\n         * @param n - Is the order of the Bessel function.",
        "*\n         * Returns the Bessel function Jn(x).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which to evaluate the function.\n         * @param n - Is the order of the Bessel function.",
        "*\n         * Returns the modified Bessel function Kn(x).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which to evaluate the function.\n         * @param n - Is the order of the function.",
        "*\n         * Returns the Bessel function Yn(x).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which to evaluate the function.\n         * @param n - Is the order of the function.",
        "*\n         * Returns the beta probability distribution function.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value between A and B at which to evaluate the function.\n         * @param alpha - Is a parameter to the distribution and must be greater than 0.\n         * @param beta - Is a parameter to the distribution and must be greater than 0.\n         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.\n         * @param A - Is an optional lower bound to the interval of x. If omitted, A = 0.\n         * @param B - Is an optional upper bound to the interval of x. If omitted, B = 1.",
        "*\n         * Returns the inverse of the cumulative beta probability density function (BETA.DIST).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is a probability associated with the beta distribution.\n         * @param alpha - Is a parameter to the distribution and must be greater than 0.\n         * @param beta - Is a parameter to the distribution and must be greater than 0.\n         * @param A - Is an optional lower bound to the interval of x. If omitted, A = 0.\n         * @param B - Is an optional upper bound to the interval of x. If omitted, B = 1.",
        "*\n         * Converts a binary number to decimal.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the binary number you want to convert.",
        "*\n         * Converts a binary number to hexadecimal.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the binary number you want to convert.\n         * @param places - Is the number of characters to use.",
        "*\n         * Converts a binary number to octal.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the binary number you want to convert.\n         * @param places - Is the number of characters to use.",
        "*\n         * Returns the individual term binomial distribution probability.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param numberS - Is the number of successes in trials.\n         * @param trials - Is the number of independent trials.\n         * @param probabilityS - Is the probability of success on each trial.\n         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.",
        "*\n         * Returns the probability of a trial result using a binomial distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param trials - Is the number of independent trials.\n         * @param probabilityS - Is the probability of success on each trial.\n         * @param numberS - Is the number of successes in trials.\n         * @param numberS2 - If provided this function returns the probability that the number of successful trials shall lie between numberS and numberS2.",
        "*\n         * Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param trials - Is the number of Bernoulli trials.\n         * @param probabilityS - Is the probability of success on each trial, a number between 0 and 1 inclusive.\n         * @param alpha - Is the criterion value, a number between 0 and 1 inclusive.",
        "*\n         * Returns a bitwise 'And' of two numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number1 - Is the decimal representation of the binary number you want to evaluate.\n         * @param number2 - Is the decimal representation of the binary number you want to evaluate.",
        "*\n         * Returns a number shifted left by shift_amount bits.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the decimal representation of the binary number you want to evaluate.\n         * @param shiftAmount - Is the number of bits that you want to shift Number left by.",
        "*\n         * Returns a bitwise 'Or' of two numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number1 - Is the decimal representation of the binary number you want to evaluate.\n         * @param number2 - Is the decimal representation of the binary number you want to evaluate.",
        "*\n         * Returns a number shifted right by shift_amount bits.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the decimal representation of the binary number you want to evaluate.\n         * @param shiftAmount - Is the number of bits that you want to shift Number right by.",
        "*\n         * Returns a bitwise 'Exclusive Or' of two numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number1 - Is the decimal representation of the binary number you want to evaluate.\n         * @param number2 - Is the decimal representation of the binary number you want to evaluate.",
        "*\n         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value you want to round.\n         * @param significance - Is the multiple to which you want to round.\n         * @param mode - When given and nonzero this function will round away from zero.",
        "*\n         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value you want to round.\n         * @param significance - Is the multiple to which you want to round.",
        "*\n         * Returns the character specified by the code number from the character set for your computer.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is a number between 1 and 255 specifying which character you want.",
        "*\n         * Returns the left-tailed probability of the chi-squared distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which you want to evaluate the distribution, a nonnegative number.\n         * @param degFreedom - Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n         * @param cumulative - Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.",
        "*\n         * Returns the right-tailed probability of the chi-squared distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which you want to evaluate the distribution, a nonnegative number.\n         * @param degFreedom - Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
        "*\n         * Returns the inverse of the left-tailed probability of the chi-squared distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is a probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.\n         * @param degFreedom - Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
        "*\n         * Returns the inverse of the right-tailed probability of the chi-squared distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is a probability associated with the chi-squared distribution, a value between 0 and 1 inclusive.\n         * @param degFreedom - Is the number of degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
        "*\n         * Chooses a value or action to perform from a list of values, based on an index number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param indexNum - Specifies which value argument is selected. indexNum must be between 1 and 254, or a formula or a reference to a number between 1 and 254.\n         * @param values - List of parameters, whose elements are 1 to 254 numbers, cell references, defined names, formulas, functions, or text arguments from which CHOOSE selects.",
        "*\n         * Removes all nonprintable characters from text.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is any worksheet information from which you want to remove nonprintable characters.",
        "*\n         * Returns a numeric code for the first character in a text string, in the character set used by your computer.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text for which you want the code of the first character.",
        "*\n         * Returns the number of columns in an array or reference.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is an array or array formula, or a reference to a range of cells for which you want the number of columns.",
        "*\n         * Returns the number of combinations for a given number of items.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the total number of items.\n         * @param numberChosen - Is the number of items in each combination.",
        "*\n         * Returns the number of combinations with repetitions for a given number of items.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the total number of items.\n         * @param numberChosen - Is the number of items in each combination.",
        "*\n         * Converts real and imaginary coefficients into a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param realNum - Is the real coefficient of the complex number.\n         * @param iNum - Is the imaginary coefficient of the complex number.\n         * @param suffix - Is the suffix for the imaginary component of the complex number.",
        "*\n         * Joins several text strings into one text string.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 text strings to be joined into a single text string and can be text strings, numbers, or single-cell references.",
        "*\n         * Returns the confidence interval for a population mean, using a normal distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param alpha - Is the significance level used to compute the confidence level, a number greater than 0 and less than 1.\n         * @param standardDev - Is the population standard deviation for the data range and is assumed to be known. standardDev must be greater than 0.\n         * @param size - Is the sample size.",
        "*\n         * Returns the confidence interval for a population mean, using a Student's T distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param alpha - Is the significance level used to compute the confidence level, a number greater than 0 and less than 1.\n         * @param standardDev - Is the population standard deviation for the data range and is assumed to be known. standardDev must be greater than 0.\n         * @param size - Is the sample size.",
        "*\n         * Converts a number from one measurement system to another.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value in from_units to convert.\n         * @param fromUnit - Is the units for number.\n         * @param toUnit - Is the units for the result.",
        "*\n         * Returns the cosine of an angle.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the angle in radians for which you want the cosine.",
        "*\n         * Returns the hyperbolic cosine of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is any real number.",
        "*\n         * Returns the cotangent of an angle.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the angle in radians for which you want the cotangent.",
        "*\n         * Returns the hyperbolic cotangent of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the angle in radians for which you want the hyperbolic cotangent.",
        "*\n         * Counts the number of cells in a range that contain numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 arguments that can contain or refer to a variety of different types of data, but only numbers are counted.",
        "*\n         * Counts the number of cells in a range that are not empty.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 arguments representing the values and cells you want to count. Values can be any type of information.",
        "*\n         * Counts the number of empty cells in a specified range of cells.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param range - Is the range from which you want to count the empty cells.",
        "*\n         * Counts the number of cells within a range that meet the given condition.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param range - Is the range of cells from which you want to count nonblank cells.\n         * @param criteria - Is the condition in the form of a number, expression, or text that defines which cells will be counted.",
        "*\n         * Counts the number of cells specified by a given set of conditions or criteria.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition in the form of a number, expression, or text that defines which cells will be counted.",
        "*\n         * Returns the number of days from the beginning of the coupon period to the settlement date.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the number of days in the coupon period that contains the settlement date.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the number of days from the settlement date to the next coupon date.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the next coupon date after the settlement date.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the number of coupons payable between the settlement date and maturity date.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the previous coupon date before the settlement date.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the cosecant of an angle.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the angle in radians for which you want the cosecant.",
        "*\n         * Returns the hyperbolic cosecant of an angle.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the angle in radians for which you want the hyperbolic cosecant.",
        "*\n         * Returns the cumulative interest paid between two periods.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the interest rate.\n         * @param nper - Is the total number of payment periods.\n         * @param pv - Is the present value.\n         * @param startPeriod - Is the first period in the calculation.\n         * @param endPeriod - Is the last period in the calculation.\n         * @param type - Is the timing of the payment.",
        "*\n         * Returns the cumulative principal paid on a loan between two periods.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the interest rate.\n         * @param nper - Is the total number of payment periods.\n         * @param pv - Is the present value.\n         * @param startPeriod - Is the first period in the calculation.\n         * @param endPeriod - Is the last period in the calculation.\n         * @param type - Is the timing of the payment.",
        "*\n         * Averages the values in a column in a list or database that match conditions you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Counts the cells containing numbers in the field (column) of records in the database that match the conditions you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Counts nonblank cells in the field (column) of records in the database that match the conditions you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Extracts from a database a single record that matches the conditions you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Returns the largest number in the field (column) of records in the database that match the conditions you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Returns the smallest number in the field (column) of records in the database that match the conditions you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Multiplies the values in the field (column) of records in the database that match the conditions you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Estimates the standard deviation based on a sample from selected database entries.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Calculates the standard deviation based on the entire population of selected database entries.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Adds the numbers in the field (column) of records in the database that match the conditions you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Estimates variance based on a sample from selected database entries.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Calculates variance based on the entire population of selected database entries.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param database - Is the range of cells that makes up the list or database. A database is a list of related data.\n         * @param field - Is either the label of the column in double quotation marks or a number that represents the column's position in the list.\n         * @param criteria - Is the range of cells that contains the conditions you specify. The range includes a column label and one cell below the label for a condition.",
        "*\n         * Returns the number that represents the date in Microsoft Excel date-time code.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param year - Is a number from 1900 or 1904 (depending on the workbook's date system) to 9999.\n         * @param month - Is a number from 1 to 12 representing the month of the year.\n         * @param day - Is a number from 1 to 31 representing the day of the month.",
        "*\n         * Converts a date in the form of text to a number that represents the date in Microsoft Excel date-time code.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param dateText - Is text that represents a date in a Microsoft Excel date format, between 1/1/1900 or 1/1/1904 (depending on the workbook's date system) and 12/31/9999.",
        "*\n         * Returns the day of the month, a number from 1 to 31.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel.",
        "*\n         * Returns the number of days between the two dates.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param endDate - startDate and endDate are the two dates between which you want to know the number of days.\n         * @param startDate - startDate and endDate are the two dates between which you want to know the number of days.",
        "*\n         * Returns the number of days between two dates based on a 360-day year (twelve 30-day months).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param startDate - startDate and endDate are the two dates between which you want to know the number of days.\n         * @param endDate - startDate and endDate are the two dates between which you want to know the number of days.\n         * @param method - Is a logical value specifying the calculation method: U.S. (NASD) = FALSE or omitted; European = TRUE.",
        "*\n         * Returns the depreciation of an asset for a specified period using the fixed-declining balance method.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param cost - Is the initial cost of the asset.\n         * @param salvage - Is the salvage value at the end of the life of the asset.\n         * @param life - Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).\n         * @param period - Is the period for which you want to calculate the depreciation. Period must use the same units as Life.\n         * @param month - Is the number of months in the first year. If month is omitted, it is assumed to be 12.",
        "*\n         * Changes half-width (single-byte) characters within a character string to full-width (double-byte) characters. Use with double-byte character sets (DBCS).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is a text, or a reference to a cell containing a text.",
        "*\n         * Returns the depreciation of an asset for a specified period using the double-declining balance method or some other method you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param cost - Is the initial cost of the asset.\n         * @param salvage - Is the salvage value at the end of the life of the asset.\n         * @param life - Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).\n         * @param period - Is the period for which you want to calculate the depreciation. Period must use the same units as Life.\n         * @param factor - Is the rate at which the balance declines. If Factor is omitted, it is assumed to be 2 (the double-declining balance method).",
        "*\n         * Converts a decimal number to binary.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the decimal integer you want to convert.\n         * @param places - Is the number of characters to use.",
        "*\n         * Converts a decimal number to hexadecimal.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the decimal integer you want to convert.\n         * @param places - Is the number of characters to use.",
        "*\n         * Converts a decimal number to octal.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the decimal integer you want to convert.\n         * @param places - Is the number of characters to use.",
        "*\n         * Converts a text representation of a number in a given base into a decimal number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the number that you want to convert.\n         * @param radix - Is the base Radix of the number you are converting.",
        "*\n         * Converts radians to degrees.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param angle - Is the angle in radians that you want to convert.",
        "*\n         * Tests whether two numbers are equal.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number1 - Is the first number.\n         * @param number2 - Is the second number.",
        "*\n         * Returns the sum of squares of deviations of data points from their sample mean.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 arguments, or an array or array reference, on which you want DEVSQ to calculate.",
        "*\n         * Returns the discount rate for a security.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param pr - Is the security's price per $100 face value.\n         * @param redemption - Is the security's redemption value per $100 face value.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Converts a number to text, using currency format.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is a number, a reference to a cell containing a number, or a formula that evaluates to a number.\n         * @param decimals - Is the number of digits to the right of the decimal point. The number is rounded as necessary; if omitted, Decimals = 2.",
        "*\n         * Converts a dollar price, expressed as a fraction, into a dollar price, expressed as a decimal number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param fractionalDollar - Is a number expressed as a fraction.\n         * @param fraction - Is the integer to use in the denominator of the fraction.",
        "*\n         * Converts a dollar price, expressed as a decimal number, into a dollar price, expressed as a fraction.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param decimalDollar - Is a decimal number.\n         * @param fraction - Is the integer to use in the denominator of a fraction.",
        "*\n         * Returns the annual duration of a security with periodic interest payments.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param coupon - Is the security's annual coupon rate.\n         * @param yld - Is the security's annual yield.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value you want to round.\n         * @param significance - Is the multiple to which you want to round.",
        "*\n         * Returns the serial number of the date that is the indicated number of months before or after the start date.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param startDate - Is a serial date number that represents the start date.\n         * @param months - Is the number of months before or after startDate.",
        "*\n         * Returns the effective annual interest rate.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param nominalRate - Is the nominal interest rate.\n         * @param npery - Is the number of compounding periods per year.",
        "*\n         * Returns the serial number of the last day of the month before or after a specified number of months.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param startDate - Is a serial date number that represents the start date.\n         * @param months - Is the number of months before or after the startDate.",
        "*\n         * Returns the error function.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param lowerLimit - Is the lower bound for integrating ERF.\n         * @param upperLimit - Is the upper bound for integrating ERF.",
        "*\n         * Returns the complementary error function.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the lower bound for integrating ERF.",
        "*\n         * Returns the complementary error function.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param X - Is the lower bound for integrating ERFC.PRECISE.",
        "*\n         * Returns the error function.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param X - Is the lower bound for integrating ERF.PRECISE.",
        "*\n         * Returns a number matching an error value.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param errorVal - Is the error value for which you want the identifying number, and can be an actual error value or a reference to a cell containing an error value.",
        "*\n         * Rounds a positive number up and negative number down to the nearest even integer.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value to round.",
        "*\n         * Checks whether two text strings are exactly the same, and returns TRUE or FALSE. EXACT is case-sensitive.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text1 - Is the first text string.\n         * @param text2 - Is the second text string.",
        "*\n         * Returns e raised to the power of a given number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the exponent applied to the base e. The constant e equals 2.71828182845904, the base of the natural logarithm.",
        "*\n         * Returns the exponential distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value of the function, a nonnegative number.\n         * @param lambda - Is the parameter value, a positive number.\n         * @param cumulative - Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.",
        "*\n         * Returns the future value of an initial principal after applying a series of compound interest rates.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param principal - Is the present value.\n         * @param schedule - Is an array of interest rates to apply.",
        "*\n         * Returns the (left-tailed) F probability distribution (degree of diversity) for two data sets.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which to evaluate the function, a nonnegative number.\n         * @param degFreedom1 - Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n         * @param degFreedom2 - Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n         * @param cumulative - Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.",
        "*\n         * Returns the (right-tailed) F probability distribution (degree of diversity) for two data sets.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which to evaluate the function, a nonnegative number.\n         * @param degFreedom1 - Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n         * @param degFreedom2 - Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
        "*\n         * Returns the inverse of the (left-tailed) F probability distribution: if p = F.DIST(x,...), then F.INV(p,...) = x.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is a probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.\n         * @param degFreedom1 - Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n         * @param degFreedom2 - Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
        "*\n         * Returns the inverse of the (right-tailed) F probability distribution: if p = F.DIST.RT(x,...), then F.INV.RT(p,...) = x.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is a probability associated with the F cumulative distribution, a number between 0 and 1 inclusive.\n         * @param degFreedom1 - Is the numerator degrees of freedom, a number between 1 and 10^10, excluding 10^10.\n         * @param degFreedom2 - Is the denominator degrees of freedom, a number between 1 and 10^10, excluding 10^10.",
        "*\n         * Returns the factorial of a number, equal to 1*2*3*...* Number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the nonnegative number you want the factorial of.",
        "*\n         * Returns the double factorial of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value for which to return the double factorial.",
        "*\n         * Returns the logical value FALSE.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Returns the starting position of one text string within another text string. FIND is case-sensitive.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param findText - Is the text you want to find. Use double quotes (empty text) to match the first character in withinText; wildcard characters not allowed.\n         * @param withinText - Is the text containing the text you want to find.\n         * @param startNum - Specifies the character at which to start the search. The first character in withinText is character number 1. If omitted, startNum = 1.",
        "*\n         * Finds the starting position of one text string within another text string. FINDB is case-sensitive. Use with double-byte character sets (DBCS).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param findText - Is the text you want to find.\n         * @param withinText - Is the text containing the text you want to find.\n         * @param startNum - Specifies the character at which to start the search.",
        "*\n         * Returns the Fisher transformation.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value for which you want the transformation, a number between -1 and 1, excluding -1 and 1.",
        "*\n         * Returns the inverse of the Fisher transformation: if y = FISHER(x), then FISHERINV(y) = x.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param y - Is the value for which you want to perform the inverse of the transformation.",
        "*\n         * Rounds a number to the specified number of decimals and returns the result as text with or without commas.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the number you want to round and convert to text.\n         * @param decimals - Is the number of digits to the right of the decimal point. If omitted, Decimals = 2.\n         * @param noCommas - Is a logical value: do not display commas in the returned text = TRUE; do display commas in the returned text = FALSE or omitted.",
        "*\n         * Rounds a number down, to the nearest integer or to the nearest multiple of significance.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value you want to round.\n         * @param significance - Is the multiple to which you want to round.\n         * @param mode - When given and nonzero this function will round towards zero.",
        "*\n         * Rounds a number down, to the nearest integer or to the nearest multiple of significance.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the numeric value you want to round.\n         * @param significance - Is the multiple to which you want to round.",
        "*\n         * Returns the future value of an investment based on periodic, constant payments and a constant interest rate.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n         * @param nper - Is the total number of payment periods in the investment.\n         * @param pmt - Is the payment made each period; it cannot change over the life of the investment.\n         * @param pv - Is the present value, or the lump-sum amount that a series of future payments is worth now. If omitted, Pv = 0.\n         * @param type - Is a value representing the timing of payment: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
        "*\n         * Returns the Gamma function value.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value for which you want to calculate Gamma.",
        "*\n         * Returns the natural logarithm of the gamma function.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value for which you want to calculate GAMMALN, a positive number.",
        "*\n         * Returns the natural logarithm of the gamma function.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value for which you want to calculate GAMMALN.PRECISE, a positive number.",
        "*\n         * Returns the gamma distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which you want to evaluate the distribution, a nonnegative number.\n         * @param alpha - Is a parameter to the distribution, a positive number.\n         * @param beta - Is a parameter to the distribution, a positive number. If beta = 1, GAMMA.DIST returns the standard gamma distribution.\n         * @param cumulative - Is a logical value: return the cumulative distribution function = TRUE; return the probability mass function = FALSE or omitted.",
        "*\n         * Returns the inverse of the gamma cumulative distribution: if p = GAMMA.DIST(x,...), then GAMMA.INV(p,...) = x.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is the probability associated with the gamma distribution, a number between 0 and 1, inclusive.\n         * @param alpha - Is a parameter to the distribution, a positive number.\n         * @param beta - Is a parameter to the distribution, a positive number. If beta = 1, GAMMA.INV returns the inverse of the standard gamma distribution.",
        "*\n         * Returns 0.5 less than the standard normal cumulative distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value for which you want the distribution.",
        "*\n         * Returns the greatest common divisor.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 values.",
        "*\n         * Tests whether a number is greater than a threshold value.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value to test against step.\n         * @param step - Is the threshold value.",
        "*\n         * Returns the geometric mean of an array or range of positive numeric data.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the mean.",
        "*\n         * Looks for a value in the top row of a table or array of values and returns the value in the same column from a row you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param lookupValue - Is the value to be found in the first row of the table and can be a value, a reference, or a text string.\n         * @param tableArray - Is a table of text, numbers, or logical values in which data is looked up. tableArray can be a reference to a range or a range name.\n         * @param rowIndexNum - Is the row number in tableArray from which the matching value should be returned. The first row of values in the table is row 1.\n         * @param rangeLookup - Is a logical value: to find the closest match in the top row (sorted in ascending order) = TRUE or omitted; find an exact match = FALSE.",
        "*\n         * Returns the harmonic mean of a data set of positive numbers: the reciprocal of the arithmetic mean of reciprocals.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the harmonic mean.",
        "*\n         * Converts a Hexadecimal number to binary.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the hexadecimal number you want to convert.\n         * @param places - Is the number of characters to use.",
        "*\n         * Converts a hexadecimal number to decimal.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the hexadecimal number you want to convert.",
        "*\n         * Converts a hexadecimal number to octal.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the hexadecimal number you want to convert.\n         * @param places - Is the number of characters to use.",
        "*\n         * Returns the hour as a number from 0 (12:00 A.M.) to 23 (11:00 P.M.).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel, or text in time format, such as 16:48:00 or 4:48:00 PM.",
        "*\n         * Returns the hypergeometric distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param sampleS - Is the number of successes in the sample.\n         * @param numberSample - Is the size of the sample.\n         * @param populationS - Is the number of successes in the population.\n         * @param numberPop - Is the population size.\n         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.",
        "*\n         * Creates a shortcut or jump that opens a document stored on your hard drive, a network server, or on the Internet.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param linkLocation - Is the text giving the path and file name to the document to be opened, a hard drive location, UNC address, or URL path.\n         * @param friendlyName - Is text or a number that is displayed in the cell. If omitted, the cell displays the linkLocation text.",
        "*\n         * Rounds a number up, to the nearest integer or to the nearest multiple of significance.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value you want to round.\n         * @param significance - Is the optional multiple to which you want to round.",
        "*\n         * Checks whether a condition is met, and returns one value if TRUE, and another value if FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param logicalTest - Is any value or expression that can be evaluated to TRUE or FALSE.\n         * @param valueIfTrue - Is the value that is returned if logicalTest is TRUE. If omitted, TRUE is returned. You can nest up to seven IF functions.\n         * @param valueIfFalse - Is the value that is returned if logicalTest is FALSE. If omitted, FALSE is returned.",
        "*\n         * Returns the absolute value (modulus) of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the absolute value.",
        "*\n         * Returns the argument q, an angle expressed in radians.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the argument.",
        "*\n         * Returns the complex conjugate of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the conjugate.",
        "*\n         * Returns the cosine of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the cosine.",
        "*\n         * Returns the hyperbolic cosine of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the hyperbolic cosine.",
        "*\n         * Returns the cotangent of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the cotangent.",
        "*\n         * Returns the cosecant of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the cosecant.",
        "*\n         * Returns the hyperbolic cosecant of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the hyperbolic cosecant.",
        "*\n         * Returns the quotient of two complex numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber1 - Is the complex numerator or dividend.\n         * @param inumber2 - Is the complex denominator or divisor.",
        "*\n         * Returns the exponential of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the exponential.",
        "*\n         * Returns the natural logarithm of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the natural logarithm.",
        "*\n         * Returns the base-10 logarithm of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the common logarithm.",
        "*\n         * Returns the base-2 logarithm of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the base-2 logarithm.",
        "*\n         * Returns a complex number raised to an integer power.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number you want to raise to a power.\n         * @param number - Is the power to which you want to raise the complex number.",
        "*\n         * Returns the product of 1 to 255 complex numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - Inumber1, Inumber2,... are from 1 to 255 complex numbers to multiply.",
        "*\n         * Returns the real coefficient of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the real coefficient.",
        "*\n         * Returns the secant of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the secant.",
        "*\n         * Returns the hyperbolic secant of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the hyperbolic secant.",
        "*\n         * Returns the sine of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the sine.",
        "*\n         * Returns the hyperbolic sine of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the hyperbolic sine.",
        "*\n         * Returns the square root of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the square root.",
        "*\n         * Returns the difference of two complex numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber1 - Is the complex number from which to subtract inumber2.\n         * @param inumber2 - Is the complex number to subtract from inumber1.",
        "*\n         * Returns the sum of complex numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are from 1 to 255 complex numbers to add.",
        "*\n         * Returns the tangent of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the tangent.",
        "*\n         * Returns the imaginary coefficient of a complex number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param inumber - Is a complex number for which you want the imaginary coefficient.",
        "*\n         * Rounds a number down to the nearest integer.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the real number you want to round down to an integer.",
        "*\n         * Returns the interest rate for a fully invested security.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param investment - Is the amount invested in the security.\n         * @param redemption - Is the amount to be received at maturity.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the interest payment for a given period for an investment, based on periodic, constant payments and a constant interest rate.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n         * @param per - Is the period for which you want to find the interest and must be in the range 1 to Nper.\n         * @param nper - Is the total number of payment periods in an investment.\n         * @param pv - Is the present value, or the lump-sum amount that a series of future payments is worth now.\n         * @param fv - Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, Fv = 0.\n         * @param type - Is a logical value representing the timing of payment: at the end of the period = 0 or omitted, at the beginning of the period = 1.",
        "*\n         * Returns the internal rate of return for a series of cash flows.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - Is an array or a reference to cells that contain numbers for which you want to calculate the internal rate of return.\n         * @param guess - Is a number that you guess is close to the result of IRR; 0.1 (10 percent) if omitted.",
        "*\n         * Checks whether a value is an error (#VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!) excluding #N/A, and returns TRUE or FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.",
        "*\n         * Checks whether a value is an error (#N/A, #VALUE!, #REF!, #DIV/0!, #NUM!, #NAME?, or #NULL!), and returns TRUE or FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.",
        "*\n         * Returns TRUE if the number is even.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value to test.",
        "*\n         * Checks whether a reference is to a cell containing a formula, and returns TRUE or FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param reference - Is a reference to the cell you want to test.  Reference can be a cell reference, a formula, or name that refers to a cell.",
        "*\n         * Checks whether a value is a logical value (TRUE or FALSE), and returns TRUE or FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.",
        "*\n         * Checks whether a value is #N/A, and returns TRUE or FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.",
        "*\n         * Checks whether a value is not text (blank cells are not text), and returns TRUE or FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the value you want tested: a cell; a formula; or a name referring to a cell, formula, or value.",
        "*\n         * Checks whether a value is a number, and returns TRUE or FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.",
        "*\n         * Returns TRUE if the number is odd.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value to test.",
        "*\n         * Checks whether a value is text, and returns TRUE or FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.",
        "*\n         * Returns the ISO week number in the year for a given date.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param date - Is the date-time code used by Microsoft Excel for date and time calculation.",
        "*\n         * Returns the interest paid during a specific period of an investment.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n         * @param per - Period for which you want to find the interest.\n         * @param nper - Number of payment periods in an investment.\n         * @param pv - Lump sum amount that a series of future payments is right now.",
        "*\n         * Checks whether a value is a reference, and returns TRUE or FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the value you want to test. Value can refer to a cell, a formula, or a name that refers to a cell, formula, or value.",
        "*\n         * Returns the kurtosis of a data set.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the kurtosis.",
        "*\n         * Returns the k-th largest value in a data set. For example, the fifth largest number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is the array or range of data for which you want to determine the k-th largest value.\n         * @param k - Is the position (from the largest) in the array or cell range of the value to return.",
        "*\n         * Returns the least common multiple.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 values for which you want the least common multiple.",
        "*\n         * Returns the specified number of characters from the start of a text string.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text string containing the characters you want to extract.\n         * @param numChars - Specifies how many characters you want LEFT to extract; 1 if omitted.",
        "*\n         * Returns the specified number of characters from the start of a text string. Use with double-byte character sets (DBCS).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text string containing the characters you want to extract.\n         * @param numBytes - Specifies how many characters you want LEFT to return.",
        "*\n         * Returns the number of characters in a text string.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text whose length you want to find. Spaces count as characters.",
        "*\n         * Returns the number of characters in a text string. Use with double-byte character sets (DBCS).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text whose length you want to find.",
        "*\n         * Returns the natural logarithm of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the positive real number for which you want the natural logarithm.",
        "*\n         * Returns the logarithm of a number to the base you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the positive real number for which you want the logarithm.\n         * @param base - Is the base of the logarithm; 10 if omitted.",
        "*\n         * Returns the base-10 logarithm of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the positive real number for which you want the base-10 logarithm.",
        "*\n         * Returns the lognormal distribution of x, where ln(x) is normally distributed with parameters Mean and Standard_dev.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which to evaluate the function, a positive number.\n         * @param mean - Is the mean of ln(x).\n         * @param standardDev - Is the standard deviation of ln(x), a positive number.\n         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.",
        "*\n         * Returns the inverse of the lognormal cumulative distribution function of x, where ln(x) is normally distributed with parameters Mean and Standard_dev.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is a probability associated with the lognormal distribution, a number between 0 and 1, inclusive.\n         * @param mean - Is the mean of ln(x).\n         * @param standardDev - Is the standard deviation of ln(x), a positive number.",
        "*\n         * Looks up a value either from a one-row or one-column range or from an array. Provided for backward compatibility.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param lookupValue - Is a value that LOOKUP searches for in lookupVector and can be a number, text, a logical value, or a name or reference to a value.\n         * @param lookupVector - Is a range that contains only one row or one column of text, numbers, or logical values, placed in ascending order.\n         * @param resultVector - Is a range that contains only one row or column, the same size as lookupVector.",
        "*\n         * Converts all letters in a text string to lowercase.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text you want to convert to lowercase. Characters in Text that are not letters are not changed.",
        "*\n         * Returns the Macauley modified duration for a security with an assumed par value of $100.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param coupon - Is the security's annual coupon rate.\n         * @param yld - Is the security's annual yield.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the internal rate of return for a series of periodic cash flows, considering both cost of investment and interest on reinvestment of cash.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - Is an array or a reference to cells that contain numbers that represent a series of payments (negative) and income (positive) at regular periods.\n         * @param financeRate - Is the interest rate you pay on the money used in the cash flows.\n         * @param reinvestRate - Is the interest rate you receive on the cash flows as you reinvest them.",
        "*\n         * Returns a number rounded to the desired multiple.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value to round.\n         * @param multiple - Is the multiple to which you want to round number.",
        "*\n         * Returns the relative position of an item in an array that matches a specified value in a specified order.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param lookupValue - Is the value you use to find the value you want in the array, a number, text, or logical value, or a reference to one of these.\n         * @param lookupArray - Is a contiguous range of cells containing possible lookup values, an array of values, or a reference to an array.\n         * @param matchType - Is a number 1, 0, or -1 indicating which value to return.",
        "*\n         * Returns the largest value in a set of values. Ignores logical values and text.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the maximum.",
        "*\n         * Returns the largest value in a set of values. Does not ignore logical values and text.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the maximum.",
        "*\n         * Returns the median, or the number in the middle of the set of given numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the median.",
        "*\n         * Returns the characters from the middle of a text string, given a starting position and length.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text string from which you want to extract the characters.\n         * @param startNum - Is the position of the first character you want to extract. The first character in Text is 1.\n         * @param numChars - Specifies how many characters to return from Text.",
        "*\n         * Returns characters from the middle of a text string, given a starting position and length. Use with double-byte character sets (DBCS).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text string containing the characters you want to extract.\n         * @param startNum - Is the position of the first character you want to extract in text.\n         * @param numBytes - Specifies how many characters to return from text.",
        "*\n         * Returns the smallest number in a set of values. Ignores logical values and text.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the minimum.",
        "*\n         * Returns the smallest value in a set of values. Does not ignore logical values and text.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers, empty cells, logical values, or text numbers for which you want the minimum.",
        "*\n         * Returns the minute, a number from 0 to 59.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel or text in time format, such as 16:48:00 or 4:48:00 PM.",
        "*\n         * Returns the remainder after a number is divided by a divisor.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the number for which you want to find the remainder after the division is performed.\n         * @param divisor - Is the number by which you want to divide Number.",
        "*\n         * Returns the month, a number from 1 (January) to 12 (December).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel.",
        "*\n         * Returns the multinomial of a set of numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 values for which you want the multinomial.",
        "*\n         * Converts non-number value to a number, dates to serial numbers, TRUE to 1, anything else to 0 (zero).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the value you want converted.",
        "*\n         * Returns the number of periods for an investment based on periodic, constant payments and a constant interest rate.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n         * @param pmt - Is the payment made each period; it cannot change over the life of the investment.\n         * @param pv - Is the present value, or the lump-sum amount that a series of future payments is worth now.\n         * @param fv - Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, zero is used.\n         * @param type - Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
        "*\n         * Returns the error value #N/A (value not available).\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Returns the negative binomial distribution, the probability that there will be Number_f failures before the Number_s-th success, with Probability_s probability of a success.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param numberF - Is the number of failures.\n         * @param numberS - Is the threshold number of successes.\n         * @param probabilityS - Is the probability of a success; a number between 0 and 1.\n         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.",
        "*\n         * Returns the number of whole workdays between two dates.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param startDate - Is a serial date number that represents the start date.\n         * @param endDate - Is a serial date number that represents the end date.\n         * @param holidays - Is an optional set of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.",
        "*\n         * Returns the number of whole workdays between two dates with custom weekend parameters.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param startDate - Is a serial date number that represents the start date.\n         * @param endDate - Is a serial date number that represents the end date.\n         * @param weekend - Is a number or string specifying when weekends occur.\n         * @param holidays - Is an optional set of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.",
        "*\n         * Returns the annual nominal interest rate.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param effectRate - Is the effective interest rate.\n         * @param npery - Is the number of compounding periods per year.",
        "*\n         * Returns the normal distribution for the specified mean and standard deviation.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value for which you want the distribution.\n         * @param mean - Is the arithmetic mean of the distribution.\n         * @param standardDev - Is the standard deviation of the distribution, a positive number.\n         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.",
        "*\n         * Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is a probability corresponding to the normal distribution, a number between 0 and 1 inclusive.\n         * @param mean - Is the arithmetic mean of the distribution.\n         * @param standardDev - Is the standard deviation of the distribution, a positive number.",
        "*\n         * Returns the standard normal distribution (has a mean of zero and a standard deviation of one).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param z - Is the value for which you want the distribution.\n         * @param cumulative - Is a logical value for the function to return: the cumulative distribution function = TRUE; the probability density function = FALSE.",
        "*\n         * Returns the inverse of the standard normal cumulative distribution (has a mean of zero and a standard deviation of one).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is a probability corresponding to the normal distribution, a number between 0 and 1 inclusive.",
        "*\n         * Changes FALSE to TRUE, or TRUE to FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param logical - Is a value or expression that can be evaluated to TRUE or FALSE.",
        "*\n         * Returns the current date and time formatted as a date and time.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Returns the net present value of an investment based on a discount rate and a series of future payments (negative values) and income (positive values).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the rate of discount over the length of one period.\n         * @param values - List of parameters, whose elements are 1 to 254 payments and income, equally spaced in time and occurring at the end of each period.",
        "*\n         * Converts text to number in a locale-independent manner.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the string representing the number you want to convert.\n         * @param decimalSeparator - Is the character used as the decimal separator in the string.\n         * @param groupSeparator - Is the character used as the group separator in the string.",
        "*\n         * Converts an octal number to binary.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the octal number you want to convert.\n         * @param places - Is the number of characters to use.",
        "*\n         * Converts an octal number to decimal.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the octal number you want to convert.",
        "*\n         * Converts an octal number to hexadecimal.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the octal number you want to convert.\n         * @param places - Is the number of characters to use.",
        "*\n         * Rounds a positive number up and negative number down to the nearest odd integer.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the value to round.",
        "*\n         * Returns the price per $100 face value of a security with an odd first period.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param issue - Is the security's issue date, expressed as a serial date number.\n         * @param firstCoupon - Is the security's first coupon date, expressed as a serial date number.\n         * @param rate - Is the security's interest rate.\n         * @param yld - Is the security's annual yield.\n         * @param redemption - Is the security's redemption value per $100 face value.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the yield of a security with an odd first period.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param issue - Is the security's issue date, expressed as a serial date number.\n         * @param firstCoupon - Is the security's first coupon date, expressed as a serial date number.\n         * @param rate - Is the security's interest rate.\n         * @param pr - Is the security's price.\n         * @param redemption - Is the security's redemption value per $100 face value.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the price per $100 face value of a security with an odd last period.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param lastInterest - Is the security's last coupon date, expressed as a serial date number.\n         * @param rate - Is the security's interest rate.\n         * @param yld - Is the security's annual yield.\n         * @param redemption - Is the security's redemption value per $100 face value.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the yield of a security with an odd last period.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param lastInterest - Is the security's last coupon date, expressed as a serial date number.\n         * @param rate - Is the security's interest rate.\n         * @param pr - Is the security's price.\n         * @param redemption - Is the security's redemption value per $100 face value.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Checks whether any of the arguments are TRUE, and returns TRUE or FALSE. Returns FALSE only if all arguments are FALSE.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 conditions that you want to test that can be either TRUE or FALSE.",
        "*\n         * Returns the number of periods required by an investment to reach a specified value.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the interest rate per period.\n         * @param pv - Is the present value of the investment.\n         * @param fv - Is the desired future value of the investment.",
        "*\n         * Returns the rank of a value in a data set as a percentage of the data set as a percentage (0..1, exclusive) of the data set.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is the array or range of data with numeric values that defines relative standing.\n         * @param x - Is the value for which you want to know the rank.\n         * @param significance - Is an optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).",
        "*\n         * Returns the rank of a value in a data set as a percentage of the data set as a percentage (0..1, inclusive) of the data set.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is the array or range of data with numeric values that defines relative standing.\n         * @param x - Is the value for which you want to know the rank.\n         * @param significance - Is an optional value that identifies the number of significant digits for the returned percentage, three digits if omitted (0.xxx%).",
        "*\n         * Returns the k-th percentile of values in a range, where k is in the range 0..1, exclusive.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is the array or range of data that defines relative standing.\n         * @param k - Is the percentile value that is between 0 through 1, inclusive.",
        "*\n         * Returns the k-th percentile of values in a range, where k is in the range 0..1, inclusive.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is the array or range of data that defines relative standing.\n         * @param k - Is the percentile value that is between 0 through 1, inclusive.",
        "*\n         * Returns the number of permutations for a given number of objects that can be selected from the total objects.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the total number of objects.\n         * @param numberChosen - Is the number of objects in each permutation.",
        "*\n         * Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the total number of objects.\n         * @param numberChosen - Is the number of objects in each permutation.",
        "*\n         * Returns the value of the density function for a standard normal distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the number for which you want the density of the standard normal distribution.",
        "*\n         * Returns the value of Pi, 3.14159265358979, accurate to 15 digits.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Calculates the payment for a loan based on constant payments and a constant interest rate.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the interest rate per period for the loan. For example, use 6%/4 for quarterly payments at 6% APR.\n         * @param nper - Is the total number of payments for the loan.\n         * @param pv - Is the present value: the total amount that a series of future payments is worth now.\n         * @param fv - Is the future value, or a cash balance you want to attain after the last payment is made, 0 (zero) if omitted.\n         * @param type - Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
        "*\n         * Returns the Poisson distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the number of events.\n         * @param mean - Is the expected numeric value, a positive number.\n         * @param cumulative - Is a logical value: for the cumulative Poisson probability, use TRUE; for the Poisson probability mass function, use FALSE.",
        "*\n         * Returns the result of a number raised to a power.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the base number, any real number.\n         * @param power - Is the exponent, to which the base number is raised.",
        "*\n         * Returns the payment on the principal for a given investment based on periodic, constant payments and a constant interest rate.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n         * @param per - Specifies the period and must be in the range 1 to nper.\n         * @param nper - Is the total number of payment periods in an investment.\n         * @param pv - Is the present value: the total amount that a series of future payments is worth now.\n         * @param fv - Is the future value, or cash balance you want to attain after the last payment is made.\n         * @param type - Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
        "*\n         * Returns the price per $100 face value of a security that pays periodic interest.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param rate - Is the security's annual coupon rate.\n         * @param yld - Is the security's annual yield.\n         * @param redemption - Is the security's redemption value per $100 face value.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the price per $100 face value of a discounted security.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param discount - Is the security's discount rate.\n         * @param redemption - Is the security's redemption value per $100 face value.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the price per $100 face value of a security that pays interest at maturity.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param issue - Is the security's issue date, expressed as a serial date number.\n         * @param rate - Is the security's interest rate at date of issue.\n         * @param yld - Is the security's annual yield.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Multiplies all the numbers given as arguments.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers, logical values, or text representations of numbers that you want to multiply.",
        "*\n         * Converts a text string to proper case; the first letter in each word to uppercase, and all other letters to lowercase.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is text enclosed in quotation marks, a formula that returns text, or a reference to a cell containing text to partially capitalize.",
        "*\n         * Returns the present value of an investment: the total amount that a series of future payments is worth now.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the interest rate per period. For example, use 6%/4 for quarterly payments at 6% APR.\n         * @param nper - Is the total number of payment periods in an investment.\n         * @param pmt - Is the payment made each period and cannot change over the life of the investment.\n         * @param fv - Is the future value, or a cash balance you want to attain after the last payment is made.\n         * @param type - Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.",
        "*\n         * Returns the quartile of a data set, based on percentile values from 0..1, exclusive.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is the array or cell range of numeric values for which you want the quartile value.\n         * @param quart - Is a number: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.",
        "*\n         * Returns the quartile of a data set, based on percentile values from 0..1, inclusive.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is the array or cell range of numeric values for which you want the quartile value.\n         * @param quart - Is a number: minimum value = 0; 1st quartile = 1; median value = 2; 3rd quartile = 3; maximum value = 4.",
        "*\n         * Returns the integer portion of a division.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param numerator - Is the dividend.\n         * @param denominator - Is the divisor.",
        "*\n         * Converts degrees to radians.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param angle - Is an angle in degrees that you want to convert.",
        "*\n         * Returns a random number greater than or equal to 0 and less than 1, evenly distributed (changes on recalculation).\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Returns a random number between the numbers you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param bottom - Is the smallest integer RANDBETWEEN will return.\n         * @param top - Is the largest integer RANDBETWEEN will return.",
        "*\n         * Returns the rank of a number in a list of numbers: its size relative to other values in the list; if more than one value has the same rank, the average rank is returned.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the number for which you want to find the rank.\n         * @param ref - Is an array of, or a reference to, a list of numbers. Nonnumeric values are ignored.\n         * @param order - Is a number: rank in the list sorted descending = 0 or omitted; rank in the list sorted ascending = any nonzero value.",
        "*\n         * Returns the rank of a number in a list of numbers: its size relative to other values in the list; if more than one value has the same rank, the top rank of that set of values is returned.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the number for which you want to find the rank.\n         * @param ref - Is an array of, or a reference to, a list of numbers. Nonnumeric values are ignored.\n         * @param order - Is a number: rank in the list sorted descending = 0 or omitted; rank in the list sorted ascending = any nonzero value.",
        "*\n         * Returns the interest rate per period of a loan or an investment. For example, use 6%/4 for quarterly payments at 6% APR.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param nper - Is the total number of payment periods for the loan or investment.\n         * @param pmt - Is the payment made each period and cannot change over the life of the loan or investment.\n         * @param pv - Is the present value: the total amount that a series of future payments is worth now.\n         * @param fv - Is the future value, or a cash balance you want to attain after the last payment is made. If omitted, uses Fv = 0.\n         * @param type - Is a logical value: payment at the beginning of the period = 1; payment at the end of the period = 0 or omitted.\n         * @param guess - Is your guess for what the rate will be; if omitted, Guess = 0.1 (10 percent).",
        "*\n         * Returns the amount received at maturity for a fully invested security.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param investment - Is the amount invested in the security.\n         * @param discount - Is the security's discount rate.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Replaces part of a text string with a different text string.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param oldText - Is text in which you want to replace some characters.\n         * @param startNum - Is the position of the character in oldText that you want to replace with newText.\n         * @param numChars - Is the number of characters in oldText that you want to replace.\n         * @param newText - Is the text that will replace characters in oldText.",
        "*\n         * Replaces part of a text string with a different text string. Use with double-byte character sets (DBCS).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param oldText - Is text in which you want to replace some characters.\n         * @param startNum - Is the position of the character in oldText that you want to replace with newText.\n         * @param numBytes - Is the number of characters in oldText that you want to replace with newText.\n         * @param newText - Is the text that will replace characters in oldText.",
        "*\n         * Repeats text a given number of times. Use REPT to fill a cell with a number of instances of a text string.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text you want to repeat.\n         * @param numberTimes - Is a positive number specifying the number of times to repeat text.",
        "*\n         * Returns the specified number of characters from the end of a text string.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text string that contains the characters you want to extract.\n         * @param numChars - Specifies how many characters you want to extract, 1 if omitted.",
        "*\n         * Returns the specified number of characters from the end of a text string. Use with double-byte character sets (DBCS).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text string containing the characters you want to extract.\n         * @param numBytes - Specifies how many characters you want to extract.",
        "*\n         * Converts an Arabic numeral to Roman, as text.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the Arabic numeral you want to convert.\n         * @param form - Is the number specifying the type of Roman numeral you want.",
        "*\n         * Rounds a number to a specified number of digits.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the number you want to round.\n         * @param numDigits - Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero to the nearest integer.",
        "*\n         * Rounds a number down, toward zero.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is any real number that you want rounded down.\n         * @param numDigits - Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero or omitted, to the nearest integer.",
        "*\n         * Rounds a number up, away from zero.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is any real number that you want rounded up.\n         * @param numDigits - Is the number of digits to which you want to round. Negative rounds to the left of the decimal point; zero or omitted, to the nearest integer.",
        "*\n         * Returns the number of rows in a reference or array.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is an array, an array formula, or a reference to a range of cells for which you want the number of rows.",
        "*\n         * Returns an equivalent interest rate for the growth of an investment.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param nper - Is the number of periods for the investment.\n         * @param pv - Is the present value of the investment.\n         * @param fv - Is the future value of the investment.",
        "*\n         * Returns the secant of an angle.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the angle in radians for which you want the secant.",
        "*\n         * Returns the hyperbolic secant of an angle.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the angle in radians for which you want the hyperbolic secant.",
        "*\n         * Returns the second, a number from 0 to 59.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel or text in time format, such as 16:48:23 or 4:48:47 PM.",
        "*\n         * Returns the sum of a power series based on the formula.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the input value to the power series.\n         * @param n - Is the initial power to which you want to raise x.\n         * @param m - Is the step by which to increase n for each term in the series.\n         * @param coefficients - Is a set of coefficients by which each successive power of x is multiplied.",
        "*\n         * Returns the sheet number of the referenced sheet.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the name of a sheet or a reference that you want the sheet number of.  If omitted the number of the sheet containing the function is returned.",
        "*\n         * Returns the number of sheets in a reference.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param reference - Is a reference for which you want to know the number of sheets it contains.  If omitted the number of sheets in the workbook containing the function is returned.",
        "*\n         * Returns the sign of a number: 1 if the number is positive, zero if the number is zero, or -1 if the number is negative.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is any real number.",
        "*\n         * Returns the sine of an angle.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the angle in radians for which you want the sine. Degrees * PI()/180 = radians.",
        "*\n         * Returns the hyperbolic sine of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is any real number.",
        "*\n         * Returns the skewness of a distribution: a characterization of the degree of asymmetry of a distribution around its mean.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers or names, arrays, or references that contain numbers for which you want the skewness.",
        "*\n         * Returns the skewness of a distribution based on a population: a characterization of the degree of asymmetry of a distribution around its mean.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 254 numbers or names, arrays, or references that contain numbers for which you want the population skewness.",
        "*\n         * Returns the straight-line depreciation of an asset for one period.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param cost - Is the initial cost of the asset.\n         * @param salvage - Is the salvage value at the end of the life of the asset.\n         * @param life - Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).",
        "*\n         * Returns the k-th smallest value in a data set. For example, the fifth smallest number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is an array or range of numerical data for which you want to determine the k-th smallest value.\n         * @param k - Is the position (from the smallest) in the array or range of the value to return.",
        "*\n         * Returns the square root of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the number for which you want the square root.",
        "*\n         * Returns the square root of (number * Pi).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the number by which p is multiplied.",
        "*\n         * Estimates standard deviation based on a sample, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 values corresponding to a sample of a population and can be values or names or references to values.",
        "*\n         * Calculates standard deviation based on an entire population, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 values corresponding to a population and can be values, names, arrays, or references that contain values.",
        "*\n         * Calculates standard deviation based on the entire population given as arguments (ignores logical values and text).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers corresponding to a population and can be numbers or references that contain numbers.",
        "*\n         * Estimates standard deviation based on a sample (ignores logical values and text in the sample).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers corresponding to a sample of a population and can be numbers or references that contain numbers.",
        "*\n         * Returns a normalized value from a distribution characterized by a mean and standard deviation.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value you want to normalize.\n         * @param mean - Is the arithmetic mean of the distribution.\n         * @param standardDev - Is the standard deviation of the distribution, a positive number.",
        "*\n         * Replaces existing text with new text in a text string.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text or the reference to a cell containing text in which you want to substitute characters.\n         * @param oldText - Is the existing text you want to replace. If the case of oldText does not match the case of text, SUBSTITUTE will not replace the text.\n         * @param newText - Is the text you want to replace oldText with.\n         * @param instanceNum - Specifies which occurrence of oldText you want to replace. If omitted, every instance of oldText is replaced.",
        "*\n         * Returns a subtotal in a list or database.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param functionNum - Is the number 1 to 11 that specifies the summary function for the subtotal.\n         * @param values - List of parameters, whose elements are 1 to 254 ranges or references for which you want the subtotal.",
        "*\n         * Adds all the numbers in a range of cells.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers to sum. Logical values and text are ignored in cells, included if typed as arguments.",
        "*\n         * Adds the cells specified by a given condition or criteria.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param range - Is the range of cells you want evaluated.\n         * @param criteria - Is the condition or criteria in the form of a number, expression, or text that defines which cells will be added.\n         * @param sumRange - Are the actual cells to sum. If omitted, the cells in range are used.",
        "*\n         * Adds the cells specified by a given set of conditions or criteria.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param sumRange - Are the actual cells to sum.\n         * @param values - List of parameters, where the first element of each pair is the Is the range of cells you want evaluated for the particular condition , and the second element is is the condition or criteria in the form of a number, expression, or text that defines which cells will be added.",
        "*\n         * Returns the sum of the squares of the arguments. The arguments can be numbers, arrays, names, or references to cells that contain numbers.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numbers, arrays, names, or references to arrays for which you want the sum of the squares.",
        "*\n         * Returns the sum-of-years' digits depreciation of an asset for a specified period.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param cost - Is the initial cost of the asset.\n         * @param salvage - Is the salvage value at the end of the life of the asset.\n         * @param life - Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).\n         * @param per - Is the period and must use the same units as Life.",
        "*\n         * Checks whether a value is text, and returns the text if it is, or returns double quotes (empty text) if it is not.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is the value to test.",
        "*\n         * Returns the bond-equivalent yield for a treasury bill.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the Treasury bill's settlement date, expressed as a serial date number.\n         * @param maturity - Is the Treasury bill's maturity date, expressed as a serial date number.\n         * @param discount - Is the Treasury bill's discount rate.",
        "*\n         * Returns the price per $100 face value for a treasury bill.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the Treasury bill's settlement date, expressed as a serial date number.\n         * @param maturity - Is the Treasury bill's maturity date, expressed as a serial date number.\n         * @param discount - Is the Treasury bill's discount rate.",
        "*\n         * Returns the yield for a treasury bill.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the Treasury bill's settlement date, expressed as a serial date number.\n         * @param maturity - Is the Treasury bill's maturity date, expressed as a serial date number.\n         * @param pr - Is the Treasury Bill's price per $100 face value.",
        "*\n         * Returns the left-tailed Student's t-distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the numeric value at which to evaluate the distribution.\n         * @param degFreedom - Is an integer indicating the number of degrees of freedom that characterize the distribution.\n         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability density function, use FALSE.",
        "*\n         * Returns the two-tailed Student's t-distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the numeric value at which to evaluate the distribution.\n         * @param degFreedom - Is an integer indicating the number of degrees of freedom that characterize the distribution.",
        "*\n         * Returns the right-tailed Student's t-distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the numeric value at which to evaluate the distribution.\n         * @param degFreedom - Is an integer indicating the number of degrees of freedom that characterize the distribution.",
        "*\n         * Returns the left-tailed inverse of the Student's t-distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is the probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.\n         * @param degFreedom - Is a positive integer indicating the number of degrees of freedom to characterize the distribution.",
        "*\n         * Returns the two-tailed inverse of the Student's t-distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param probability - Is the probability associated with the two-tailed Student's t-distribution, a number between 0 and 1 inclusive.\n         * @param degFreedom - Is a positive integer indicating the number of degrees of freedom to characterize the distribution.",
        "*\n         * Returns the tangent of an angle.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the angle in radians for which you want the tangent. Degrees * PI()/180 = radians.",
        "*\n         * Returns the hyperbolic tangent of a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is any real number.",
        "*\n         * Converts a value to text in a specific number format.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Is a number, a formula that evaluates to a numeric value, or a reference to a cell containing a numeric value.\n         * @param formatText - Is a number format in text form from the Category box on the Number tab in the Format Cells dialog box (not General).",
        "*\n         * Converts hours, minutes, and seconds given as numbers to an Excel serial number, formatted with a time format.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param hour - Is a number from 0 to 23 representing the hour.\n         * @param minute - Is a number from 0 to 59 representing the minute.\n         * @param second - Is a number from 0 to 59 representing the second.",
        "*\n         * Converts a text time to an Excel serial number for a time, a number from 0 (12:00:00 AM) to 0.999988426 (11:59:59 PM). Format the number with a time format after entering the formula.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param timeText - Is a text string that gives a time in any one of the Microsoft Excel time formats (date information in the string is ignored).",
        "*\n         * Returns the current date formatted as a date.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Removes all spaces from a text string except for single spaces between words.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text from which you want spaces removed.",
        "*\n         * Returns the mean of the interior portion of a set of data values.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is the range or array of values to trim and average.\n         * @param percent - Is the fractional number of data points to exclude from the top and bottom of the data set.",
        "*\n         * Returns the logical value TRUE.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n         * Truncates a number to an integer by removing the decimal, or fractional, part of the number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the number you want to truncate.\n         * @param numDigits - Is a number specifying the precision of the truncation, 0 (zero) if omitted.",
        "*\n         * Returns an integer representing the data type of a value: number = 1; text = 2; logical value = 4; error value = 16; array = 64.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param value - Can be any value.",
        "*\n         * Converts a number to text, using currency format.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is a number, a reference to a cell containing a number, or a formula that evaluates to a number.\n         * @param decimals - Is the number of digits to the right of the decimal point.",
        "*\n         * Returns the Unicode character referenced by the given numeric value.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param number - Is the Unicode number representing a character.",
        "*\n         * Returns the number (code point) corresponding to the first character of the text.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the character that you want the Unicode value of.",
        "*\n         * Converts a text string to all uppercase letters.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text you want converted to uppercase, a reference or a text string.",
        "*\n         * Looks for a value in the leftmost column of a table, and then returns a value in the same row from a column you specify. By default, the table must be sorted in an ascending order.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param lookupValue - Is the value to be found in the first column of the table, and can be a value, a reference, or a text string.\n         * @param tableArray - Is a table of text, numbers, or logical values, in which data is retrieved. tableArray can be a reference to a range or a range name.\n         * @param colIndexNum - Is the column number in tableArray from which the matching value should be returned. The first column of values in the table is column 1.\n         * @param rangeLookup - Is a logical value: to find the closest match in the first column (sorted in ascending order) = TRUE or omitted; find an exact match = FALSE.",
        "*\n         * Converts a text string that represents a number to a number.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param text - Is the text enclosed in quotation marks or a reference to a cell containing the text you want to convert.",
        "*\n         * Estimates variance based on a sample, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 value arguments corresponding to a sample of a population.",
        "*\n         * Calculates variance based on the entire population, including logical values and text. Text and the logical value FALSE have the value 0; the logical value TRUE has the value 1.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 value arguments corresponding to a population.",
        "*\n         * Calculates variance based on the entire population (ignores logical values and text in the population).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numeric arguments corresponding to a population.",
        "*\n         * Estimates variance based on a sample (ignores logical values and text in the sample).\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 255 numeric arguments corresponding to a sample of a population.",
        "*\n         * Returns the depreciation of an asset for any period you specify, including partial periods, using the double-declining balance method or some other method you specify.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param cost - Is the initial cost of the asset.\n         * @param salvage - Is the salvage value at the end of the life of the asset.\n         * @param life - Is the number of periods over which the asset is being depreciated (sometimes called the useful life of the asset).\n         * @param startPeriod - Is the starting period for which you want to calculate the depreciation, in the same units as Life.\n         * @param endPeriod - Is the ending period for which you want to calculate the depreciation, in the same units as Life.\n         * @param factor - Is the rate at which the balance declines, 2 (double-declining balance) if omitted.\n         * @param noSwitch - Switch to straight-line depreciation when depreciation is greater than the declining balance = FALSE or omitted; do not switch = TRUE.",
        "*\n         * Returns the week number in the year.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param serialNumber - Is the date-time code used by Microsoft Excel for date and time calculation.\n         * @param returnType - Is a number (1 or 2) that determines the type of the return value.",
        "*\n         * Returns a number from 1 to 7 identifying the day of the week of a date.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param serialNumber - Is a number that represents a date.\n         * @param returnType - Is a number: for Sunday=1 through Saturday=7, use 1; for Monday=1 through Sunday=7, use 2; for Monday=0 through Sunday=6, use 3.",
        "*\n         * Returns the Weibull distribution.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param x - Is the value at which to evaluate the function, a nonnegative number.\n         * @param alpha - Is a parameter to the distribution, a positive number.\n         * @param beta - Is a parameter to the distribution, a positive number.\n         * @param cumulative - Is a logical value: for the cumulative distribution function, use TRUE; for the probability mass function, use FALSE.",
        "*\n         * Returns the serial number of the date before or after a specified number of workdays.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param startDate - Is a serial date number that represents the start date.\n         * @param days - Is the number of nonweekend and non-holiday days before or after startDate.\n         * @param holidays - Is an optional array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.",
        "*\n         * Returns the serial number of the date before or after a specified number of workdays with custom weekend parameters.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param startDate - Is a serial date number that represents the start date.\n         * @param days - Is the number of nonweekend and non-holiday days before or after startDate.\n         * @param weekend - Is a number or string specifying when weekends occur.\n         * @param holidays - Is an optional array of one or more serial date numbers to exclude from the working calendar, such as state and federal holidays and floating holidays.",
        "*\n         * Returns the internal rate of return for a schedule of cash flows.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - Is a series of cash flows that correspond to a schedule of payments in dates.\n         * @param dates - Is a schedule of payment dates that corresponds to the cash flow payments.\n         * @param guess - Is a number that you guess is close to the result of XIRR.",
        "*\n         * Returns the net present value for a schedule of cash flows.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param rate - Is the discount rate to apply to the cash flows.\n         * @param values - Is a series of cash flows that correspond to a schedule of payments in dates.\n         * @param dates - Is a schedule of payment dates that corresponds to the cash flow payments.",
        "*\n         * Returns a logical 'Exclusive Or' of all arguments.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param values - List of parameters, whose elements are 1 to 254 conditions you want to test that can be either TRUE or FALSE and can be logical values, arrays, or references.",
        "*\n         * Returns the year of a date, an integer in the range 1900 - 9999.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param serialNumber - Is a number in the date-time code used by Microsoft Excel.",
        "*\n         * Returns the year fraction representing the number of whole days between start_date and end_date.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param startDate - Is a serial date number that represents the start date.\n         * @param endDate - Is a serial date number that represents the end date.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the yield on a security that pays periodic interest.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param rate - Is the security's annual coupon rate.\n         * @param pr - Is the security's price per $100 face value.\n         * @param redemption - Is the security's redemption value per $100 face value.\n         * @param frequency - Is the number of coupon payments per year.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the annual yield for a discounted security. For example, a treasury bill.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param pr - Is the security's price per $100 face value.\n         * @param redemption - Is the security's redemption value per $100 face value.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the annual yield of a security that pays interest at maturity.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param settlement - Is the security's settlement date, expressed as a serial date number.\n         * @param maturity - Is the security's maturity date, expressed as a serial date number.\n         * @param issue - Is the security's issue date, expressed as a serial date number.\n         * @param rate - Is the security's interest rate at date of issue.\n         * @param pr - Is the security's price per $100 face value.\n         * @param basis - Is the type of day count basis to use.",
        "*\n         * Returns the one-tailed P-value of a z-test.\n         *\n         * [Api set: ExcelApi 1.2]\n         *\n         * @param array - Is the array or range of data against which to test X.\n         * @param x - Is the value to test.\n         * @param sigma - Is the population (known) standard deviation. If omitted, the sample standard deviation is used.",
        "* Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`. (`JSON.stringify`, in turn, calls the `toJSON` method of the object that is passed to it.)\n        * Whereas the original Excel.Functions object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.FunctionsData`) that contains shallow copies of any loaded child properties from the original object.",
        "* Provides ways to load properties of only a subset of members of a collection.",
        "* Specify the number of items in the queried collection to be included in the result.",
        "* Specify the number of items in the collection that are to be skipped and not included in the result. If top is specified, the selection of result will start after skipping the specified number of items.",
        "*\n             * Toggle JavaScript events in the current task pane or content add-in.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode. Possible values are: `Automatic`, where Excel controls recalculation; `AutomaticExceptTables`, where Excel controls recalculation but ignores changes in tables; `Manual`, where calculation is done when the user requests it.\n             *\n             * [Api set: ExcelApi 1.1 for get, 1.8 for set]",
        "*\n            * Gets the workbook properties.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n             * The display name of the worksheet.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * The zero-based position of the worksheet within the workbook.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Gets or sets the worksheet's gridlines flag.\n            This flag determines whether gridlines are visible to the user.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Gets or sets the worksheet's headings flag.\n            This flag determines whether headings are visible to the user.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns or sets the standard (default) width of all the columns in the worksheet.\n            One unit of column width is equal to the width of one character in the Normal style. For proportional fonts, the width of the character 0 (zero) is used.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the worksheet tab color.\n            When retrieving the tab color, if the worksheet is invisible, the value will be null. If the worksheet is visible but the tab color is set to auto, an empty string will be returned. Otherwise, the property will be set to a color, in the form \"#123456\"\n            When setting the color, use an empty-string to set an \"auto\" color, or a real color otherwise.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The Visibility of the worksheet.\n             *\n             * [Api set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.]",
        "*\n            * Returns a data validation object.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents if all columns of the current range are hidden.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the formula in A1-style notation.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the formula in R1C1-style notation.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the hyperlink for the current range.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents Excel's number format code for the given range.\n            When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents Excel's number format code for the given range as a string in the language of the user.\n            When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents if all rows of the current range are hidden.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the style of the current range.\n            If the styles of the cells are inconsistent, null will be returned.\n            For custom styles, the style name will be returned. For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n            When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the formula in A1-style notation.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the formula in R1C1-style notation.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents Excel's number format code for the given cell.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the raw values of the specified range view. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the value stored for this setting.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * Represents the comment associated with this name.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * Gets or sets the formula of the named item.  Formula always starts with a '=' sign.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Specifies whether the object is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates whether the first column contains special formatting.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the last column contains special formatting.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Name of the table.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the header row is visible or not. This value can be set to show or remove the header row.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates whether the total row is visible or not. This value can be set to show or remove the total row.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Constant value that represents the Table style. Possible values are: TableStyleLight1 thru TableStyleLight21, TableStyleMedium1 thru TableStyleMedium28, TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the name of the table column.\n             *\n             * [Api set: ExcelApi 1.1 for getting the name; 1.4 for setting it.]",
        "*\n             * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Error alert when user enters invalid data.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Ignore blanks: no data validation will be performed on blank cells, it defaults to true.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Prompt when users select a cell.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Data validation rule that contains different type of data validation criteria.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Returns the fill object defined on the overall range.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the font object defined on the overall range.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the format protection object for a range.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * Gets or sets the width of all colums within the range. If the column widths are not uniform, null will be returned.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the horizontal alignment for the specified object. See Excel.HorizontalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Gets or sets the height of all rows in the range. If the row heights are not uniform, null will be returned.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Gets or sets the text orientation of all the cells within the range.\n            The text orientation should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n            If the orientation within a range are not uniform, then null will be returned.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Determines if the row height of the Range object equals the standard height of the sheet.\n            Returns True if the row height of the Range object equals the standard height of the sheet.\n            Returns Null if the range contains more than one row and the rows aren't all the same height.\n            Returns False otherwise.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates whether the column width of the Range object equals the standard width of the sheet.\n            Returns True if the column width of the Range object equals the standard width of the sheet.\n            Returns Null if the range contains more than one column and the columns aren't all the same height.\n            Returns False otherwise.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the vertical alignment for the specified object. See Excel.VerticalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates if Excel wraps the text in the object. A null value indicates that the entire range doesn't have uniform wrap setting\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates if Excel hides the formula for the cells in the range. A null value indicates that the entire range doesn't have uniform formula hidden setting.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Indicates if Excel locks the cells in the object. A null value indicates that the entire range doesn't have uniform lock setting.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * HTML color code representing the color of the background, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\")\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Specifies the weight of the border around a range. See Excel.BorderWeight for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the bold status of font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the italic status of the font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Font name (e.g. \"Calibri\")\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Font size.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Type of underline applied to the font. See Excel.RangeUnderlineStyle for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents chart axes.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the datalabels on the chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Encapsulates the format properties for the chart area.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the legend for the chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the plotArea for the chart.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the title of the specified chart, including the text, visibility, position, and formatting of the title.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Returns or sets a ChartCategoryLabelLevel enumeration constant referring to\n            the level of where the category labels are being sourced from. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the type of the chart. See Excel.ChartType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the way that blank cells are plotted on a chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the height, in points, of the chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * The distance, in points, from the left side of the chart to the worksheet origin.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the name of a chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns or sets the way columns or rows are used as data series on the chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if only visible cells are plotted. False if both visible and hidden cells are plotted. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns or sets a ChartSeriesNameLevel enumeration constant referring to\n            the level of where the series names are being sourced from. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents whether to display all field buttons on a PivotChart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents whether to show the data labels when the value is greater than the maximum value on the value axis.\n            If value axis became smaller than the size of data points, you can use this property to set whether to show the data labels.\n            This property applies to 2-D charts only.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns or sets the chart style for the chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the width, in points, of the chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format of chart area, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for the current object.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of all dataLabels in the series.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the formatting of a chart series, which includes fill and line formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Returns or sets the group for the specified series. Read/Write\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the chart type of a series. See Excel.ChartType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the doughnut hole size of a chart series.  Only valid on doughnut and doughnutExploded charts.\n            Throws an invalid argument exception on invalid charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the explosion value for a pie-chart or doughnut-chart slice. Returns 0 (zero) if there's no explosion (the tip of the slice is in the center of the pie). Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if the series is filtered or not. Not applicable for surface charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical). Applies only to pie, 3-D pie, and doughnut charts. Can be a value from 0 through 360. Read/Write\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the gap width of a chart series.  Only valid on bar and column charts, as well as\n            specific classes of line and pie charts.  Throws an invalid argument exception on invalid charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the series has data labels or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * True if Microsoft Excel inverts the pattern in the item when it corresponds to a negative number. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents markers background color of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents markers foreground color of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker size of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker style of a chart series. See Excel.ChartMarkerStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the name of a series in a chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Specifies how bars and columns are positioned. Can be a value between –100 and 100. Applies only to 2-D bar and 2-D column charts. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the plot order of a chart series within the chart group.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart, as a percentage of the size of the primary pie. Can be a value from 5 to 200. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if the series has a shadow or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the series is smooth or not. Only applicable to line and scatter charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the way the two sections of either a pie of pie chart or a bar of pie chart are split. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if Microsoft Excel assigns a different color or pattern to each data marker. The chart must contain only one series. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents line formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the data label of a chart point.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Encapsulates the format properties chart point.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents whether a data point has a data label. Not applicable for surface charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * HTML color code representation of the marker background color of data point. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * HTML color code representation of the marker foreground color of data point. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker size of data point.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker style of a chart data point. See Excel.ChartMarkerStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the border format of a chart data point, which includes color, style, and weight information.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the category axis in a chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the series axis of a 3-dimensional chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the value axis in an axis.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart object, which includes line and font formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns a Gridlines object that represents the major gridlines for the specified axis.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns a Gridlines object that represents the minor gridlines for the specified axis.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the axis title.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the alignment for the specified axis tick label. See Excel.ChartTextHorizontalAlignment for detail.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns or sets the base unit for the specified category axis.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the category axis type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the axis display unit. See Excel.ChartAxisDisplayUnit for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents whether value axis crosses the category axis between categories.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the base of the logarithm when using logarithmic scales.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the type of major tick mark for the specified axis. See Excel.ChartAxisTickMark for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the major unit scale value for the category axis when the CategoryType property is set to TimeScale.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the type of minor tick mark for the specified axis. See Excel.ChartAxisTickMark for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the minor unit scale value for the category axis when the CategoryType property is set to TimeScale.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the interval between two minor tick marks. Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents whether an axis is multilevel or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the format code for the axis tick label.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance between the levels of labels, and the distance between the first level and the axis line. The value should be an integer from 0 to 1000.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the specified axis position where the other axis crosses. See Excel.ChartAxisPosition for details.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents whether Microsoft Excel plots data points from last to first.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the value axis scale type. See Excel.ChartAxisScaleType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents whether the axis display unit label is visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the text orientation of the axis tick label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the position of tick-mark labels on the specified axis. See Excel.ChartAxisTickLabelPosition for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the number of categories or series between tick-mark labels. Can be a value from 1 through 31999 or an empty string for automatic setting. The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the number of categories or series between tick marks.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * A boolean value represents the visibility of the axis.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for a chart axis element.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents chart line formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of chart axis title.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the axis title.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * A boolean that specifies the visibility of an axis title.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes, such as font name, font size, color, etc. of chart axis title object.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the format of chart data labels, which includes fill and font formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents whether data labels automatically generate appropriate text based on context.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the horizontal alignment for chart data label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of data label is 0.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the format code for data labels.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * String representing the separator used for the data labels on a chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label bubble size is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label category name is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label legend key is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label percentage is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label series name is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label value is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the text orientation of data labels. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment of chart data label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of data label is 90, -90 or 180.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the format of chart data label.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if data label automatically generates appropriate text based on context.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the formula of chart data label using A1-style notation.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the horizontal alignment for chart data label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of data label is 90, -90 or 180.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the left edge of chart data label to the left edge of chart area. Null if chart data label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the format code for data label.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * String representing the separator used for the data label on a chart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label bubble size is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label category name is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label legend key is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label percentage is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label series name is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label value is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * String representing the text of the data label on a chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the text orientation of chart data label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the top edge of chart data label to the top of chart area. Null if chart data label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment of chart data label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of data label is 0.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for a chart data label.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of chart gridlines.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the axis gridlines are visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents chart line formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart legend, which includes fill and font formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the height, in points, of the legend on the chart. Null if legend is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the left, in points, of a chart legend. Null if legend is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value for whether the chart legend should overlap with the main body of the chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the position of the legend on the chart. See Excel.ChartLegendPosition for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents if the legend has a shadow on the chart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the top of a chart legend.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * A boolean value the represents the visibility of a ChartLegend object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the width, in points, of the legend on the chart. Null if legend is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the visible of a chart legend entry.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes such as font name, font size, color, etc. of a chart legend.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart title, which includes fill and font formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the horizontal alignment for chart title.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the distance, in points, from the left edge of chart title to the left edge of chart area. Null if chart title is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the chart title will overlay the chart or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the position of chart title. See Excel.ChartTitlePosition for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents a boolean value that determines if the chart title has a shadow.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the title text of a chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the text orientation of chart title. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the distance, in points, from the top edge of chart title to the top of chart area. Null if chart title is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the vertical alignment of chart title. See Excel.ChartTextVerticalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * A boolean value the represents the visibility of a chart title object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the font attributes, such as font name, font size, color, etc. of chart characters object.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the border format of chart title, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for an object.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representing the color of borders in the chart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the line style of the border. See Excel.ChartLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents weight of the border, in points.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * HTML color code representing the color of lines in the chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the line style. See Excel.ChartLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents weight of the line, in points.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the bold status of font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the italic status of the font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Font name (e.g. \"Calibri\")\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Size of the font (e.g. 11)\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Type of underline applied to the font. See Excel.ChartUnderlineStyle for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart trendline.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the label of a chart trendline.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the number of periods that the trendline extends backward.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the number of periods that the trendline extends forward.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the intercept value of the trendline. Can be set to a numeric value or an empty string (for automatic values). The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the period of a chart trendline. Only applicable for trendline with MovingAverage type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the name of the trendline. Can be set to a string value, or can be set to null value represents automatic values. The returned value is always a string\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the order of a chart trendline. Only applicable for trendline with Polynomial type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * True if the equation for the trendline is displayed on the chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if the R-squared for the trendline is displayed on the chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the type of a chart trendline.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n            * Represents chart line formatting.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the format of chart trendline label.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if trendline label automatically generates appropriate text based on context.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the formula of chart trendline label using A1-style notation.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the horizontal alignment for chart trendline label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of trendline label is 90, -90 or 180.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the left edge of chart trendline label to the left edge of chart area. Null if chart trendline label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the format code for trendline label.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String representing the text of the trendline label on a chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the text orientation of chart trendline label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the top edge of chart trendline label to the top of chart area. Null if chart trendline label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment of chart trendline label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of trendline label is 0.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for a chart trendline label.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the formatting of a chart plotArea.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the height value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideHeight value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideLeft value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideTop value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideWidth value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the left value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the position of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the top value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the width value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the border attributes of a chart plotArea.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the PivotTable.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * This property indicates the PivotLayoutType of all fields on the PivotTable. If fields have different states, this will be null.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if the PivotTable report shows grand totals for columns.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if the PivotTable report shows grand totals for rows.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * This property indicates the SubtotalLocationType of all fields on the PivotTable. If fields have different states, this will be null.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the PivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Position of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether to allow multiple filter items.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Position of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Returns the PivotFields associated with the DataPivotHierarchy.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Number format of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Position of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether the data should be shown as a specific summary calculation or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether to show all items of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether to show all items of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Subtotals of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether the item is expanded to show child items or if it's collapsed and child items are hidden.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the PivotItem.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether the PivotItem is visible or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Gets or sets the author of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the category of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the comments of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the company of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the keywords of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the manager of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the revision number of the workbook. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the subject of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the title of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the value of the custom property.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n            * Returns the cell value conditional format properties if the current conditional format is a CellValue type.\n            For example to format all cells between 5 and 10.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the cell value conditional format properties if the current conditional format is a CellValue type.\n            For example to format all cells between 5 and 10.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the custom conditional format properties if the current conditional format is a custom type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the custom conditional format properties if the current conditional format is a custom type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the data bar properties if the current conditional format is a data bar.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the data bar properties if the current conditional format is a data bar.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the IconSet conditional format properties if the current conditional format is an IconSet type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the IconSet conditional format properties if the current conditional format is an IconSet type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the specific text conditional format properties if the current conditional format is a text type.\n            For example to format cells matching the word \"Text\".\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the specific text conditional format properties if the current conditional format is a text type.\n            For example to format cells matching the word \"Text\".\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.\n            For example to format the top 10% or bottom 10 items.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.\n            For example to format the top 10% or bottom 10 items.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The priority (or index) within the conditional format collection that this conditional format currently exists in. Changing this also\n            changes other conditional formats' priorities, to allow for a contiguous priority order.\n            Use a negative priority to begin from the back.\n            Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.\n            Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.\n            Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Representation of all values to the left of the axis in an Excel data bar.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Representation of all values to the right of the axis in an Excel data bar.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the Axis line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"\" (empty string) if no axis is present or set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Representation of how the axis is determined for an Excel data bar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the direction that the data bar graphic should be based on.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The rule for what consistutes the lower bound (and how to calculate it, if applicable) for a data bar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true, hides the values from the cells where the data bar is applied.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The rule for what constitutes the upper bound (and how to calculate it, if applicable) for a data bar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"\" (empty string) if no border is present or set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the fill color, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Boolean representation of whether or not the DataBar has a gradient.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"Empty String\" if no border is present or set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the fill color, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Boolean representation of whether or not the negative DataBar has the same border color as the positive DataBar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Boolean representation of whether or not the negative DataBar has the same fill color as the positive DataBar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Represents the Rule object on this conditional format.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The formula, if required, to evaluate the conditional format rule on.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The formula, if required, to evaluate the conditional format rule on in the user's language.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The formula, if required, to evaluate the conditional format rule on in R1C1-style notation.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * An array of Criteria and IconSets for the rules and potential custom icons for conditional icons. Note that for the first criterion only the custom icon can be modified, while type, formula, and operator will be ignored when set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true, reverses the icon orders for the IconSet. Note that this cannot be set if custom icons are used.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true, hides the values and only shows icons.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If set, displays the IconSet option for the conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The criteria of the color scale. Midpoint is optional when using a two point color scale.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The criteria of the Top/Bottom conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The rule of the conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The rule of the conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the Rule object on this conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Collection of border objects that apply to the overall conditional format range.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the fill object defined on the overall conditional format range.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the font object defined on the overall conditional format range.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * Represents Excel's number format code for the given range. Cleared if null is passed in.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the bold status of font.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the italic status of the font.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the strikethrough status of the font.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Type of underline applied to the font. See Excel.ConditionalRangeFontUnderlineStyle for details.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the fill, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Gets the bottom border.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Gets the left border.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Gets the right border.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Gets the top border.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * The Fill of the style.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * A Font object that represents the font of the style.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if text is automatically indented when the text alignment in a cell is set to equal distribution.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Indicates if the formula will be hidden when the worksheet is protected.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the horizontal alignment for the style. See Excel.HorizontalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the AutoIndent, HorizontalAlignment, VerticalAlignment, WrapText, IndentLevel, and TextOrientation properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the Color, ColorIndex, LineStyle, and Weight border properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the Background, Bold, Color, ColorIndex, FontStyle, Italic, Name, Size, Strikethrough, Subscript, Superscript, and Underline font properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the NumberFormat property.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the Color, ColorIndex, InvertIfNegative, Pattern, PatternColor, and PatternColorIndex interior properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the FormulaHidden and Locked protection properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * An integer from 0 to 250 that indicates the indent level for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the object is locked when the worksheet is protected.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The format code of the number format for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The localized format code of the number format for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The reading order for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if text automatically shrinks to fit in the available column width.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The text orientation for the style.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment for the style. See Excel.VerticalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if Microsoft Excel wraps the text in the object.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Toggle JavaScript events in the current task pane or content add-in.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode. Possible values are: `Automatic`, where Excel controls recalculation; `AutomaticExceptTables`, where Excel controls recalculation but ignores changes in tables; `Manual`, where calculation is done when the user requests it.\n             *\n             * [Api set: ExcelApi 1.1 for get, 1.8 for set]",
        "*\n            * Represents a collection of bindings that are part of the workbook. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the collection of custom XML parts contained by this workbook. Read-only.\n            *\n            * [Api set: ExcelApi 1.5]",
        "*\n            * Represents a collection of workbook scoped named items (named ranges and constants). Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of PivotTables associated with the workbook. Read-only.\n            *\n            * [Api set: ExcelApi 1.3]",
        "*\n            * Gets the workbook properties. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Returns workbook protection object for a workbook. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents a collection of Settings associated with the workbook. Read-only.\n            *\n            * [Api set: ExcelApi 1.4]",
        "*\n            * Represents a collection of styles associated with the workbook. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents a collection of tables associated with the workbook. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of worksheets associated with the workbook. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Gets the workbook name. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * True if the workbook is open in Read-only mode. Read-only.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Indicates if the workbook is protected. Read-Only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n            * Returns collection of charts that are part of the worksheet. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Collection of names scoped to the current worksheet. Read-only.\n            *\n            * [Api set: ExcelApi 1.4]",
        "*\n            * Collection of PivotTables that are part of the worksheet. Read-only.\n            *\n            * [Api set: ExcelApi 1.3]",
        "*\n            * Returns sheet protection object for a worksheet. Read-only.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n            * Collection of tables that are part of the worksheet. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * The display name of the worksheet.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * The zero-based position of the worksheet within the workbook.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Gets or sets the worksheet's gridlines flag.\n            This flag determines whether gridlines are visible to the user.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Gets or sets the worksheet's headings flag.\n            This flag determines whether headings are visible to the user.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the standard (default) height of all the rows in the worksheet, in points. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the standard (default) width of all the columns in the worksheet.\n            One unit of column width is equal to the width of one character in the Normal style. For proportional fonts, the width of the character 0 (zero) is used.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the worksheet tab color.\n            When retrieving the tab color, if the worksheet is invisible, the value will be null. If the worksheet is visible but the tab color is set to auto, an empty string will be returned. Otherwise, the property will be set to a color, in the form \"#123456\"\n            When setting the color, use an empty-string to set an \"auto\" color, or a real color otherwise.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The Visibility of the worksheet.\n             *\n             * [Api set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.]",
        "*\n             * Sheet protection options. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Indicates if the worksheet is protected. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n            * Collection of ConditionalFormats that intersect the range. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a data validation object.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the range reference in A1-style. Address value will contain the Sheet reference (e.g. \"Sheet1!A1:B4\"). Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents range reference for the specified range in the language of the user. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the total number of columns in the range. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents if all columns of the current range are hidden.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the column number of the first cell in the range. Zero-indexed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the formula in A1-style notation.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the formula in R1C1-style notation.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents if all cells of the current range are hidden. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the hyperlink for the current range.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents if the current range is an entire column. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents if the current range is an entire row. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents Excel's number format code for the given range.\n            When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents Excel's number format code for the given range as a string in the language of the user.\n            When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns the total number of rows in the range. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents if all rows of the current range are hidden.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Returns the row number of the first cell in the range. Zero-indexed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the style of the current range.\n            If the styles of the cells are inconsistent, null will be returned.\n            For custom styles, the style name will be returned. For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the type of data of each cell. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n            When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of range views associated with the range. Read-only.\n            *\n            * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the cell addresses of the RangeView. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Returns the number of visible columns. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the formula in A1-style notation.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the formula in R1C1-style notation.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Returns a value that represents the index of the RangeView. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents Excel's number format code for the given cell.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Returns the number of visible rows. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the type of data of each cell. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the raw values of the specified range view. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Returns the key that represents the id of the Setting. Read-only.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * Represents the value stored for this setting.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n            * Returns an object containing values and types of the named item. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the comment associated with this name.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * Gets or sets the formula of the named item.  Formula always starts with a '=' sign.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The name of the object. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates whether the name is scoped to the workbook or to a specific worksheet. Possible values are: Worksheet, Workbook. Read-only.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * Indicates the type of the value returned by the name's formula. See Excel.NamedItemType for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.1 for String,Integer,Double,Boolean,Range,Error; 1.7 for Array]",
        "*\n             * Represents the value computed by the name's formula. For a named range, will return the range address. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Specifies whether the object is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the types for each item in the named item array\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the values of each item in the named item array.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents binding identifier. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the type of the binding. See Excel.BindingType for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of all the columns in the table. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of all the rows in the table. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the sorting for the table. Read-only.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * Indicates whether the first column contains special formatting.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the last column contains special formatting.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Returns a value that uniquely identifies the table in a given workbook. The value of the identifier remains the same even when the table is renamed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns a numeric id.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the table.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the header row is visible or not. This value can be set to show or remove the header row.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates whether the total row is visible or not. This value can be set to show or remove the total row.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Constant value that represents the Table style. Possible values are: TableStyleLight1 thru TableStyleLight21, TableStyleMedium1 thru TableStyleMedium28, TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Retrieve the filter applied to the column. Read-only.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * Returns a unique key that identifies the column within the table. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the index number of the column within the columns collection of the table. Zero-indexed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the name of the table column.\n             *\n             * [Api set: ExcelApi 1.1 for getting the name; 1.4 for setting it.]",
        "*\n             * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Error alert when user enters invalid data.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Ignore blanks: no data validation will be performed on blank cells, it defaults to true.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Prompt when users select a cell.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Data validation rule that contains different type of data validation criteria.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Type of the data validation, see Excel.DataValidationType for details.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents if all cell values are valid according to the data validation rules.\n            Returns true if all cell values are valid, or false if all cell values are invalid.\n            Returns null if there are both valid and invalid cell values within the range.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Collection of border objects that apply to the overall range. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the fill object defined on the overall range. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the font object defined on the overall range. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the format protection object for a range. Read-only.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * Gets or sets the width of all colums within the range. If the column widths are not uniform, null will be returned.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the horizontal alignment for the specified object. See Excel.HorizontalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Gets or sets the height of all rows in the range. If the row heights are not uniform, null will be returned.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Gets or sets the text orientation of all the cells within the range.\n            The text orientation should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n            If the orientation within a range are not uniform, then null will be returned.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Determines if the row height of the Range object equals the standard height of the sheet.\n            Returns True if the row height of the Range object equals the standard height of the sheet.\n            Returns Null if the range contains more than one row and the rows aren't all the same height.\n            Returns False otherwise.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates whether the column width of the Range object equals the standard width of the sheet.\n            Returns True if the column width of the Range object equals the standard width of the sheet.\n            Returns Null if the range contains more than one column and the columns aren't all the same height.\n            Returns False otherwise.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the vertical alignment for the specified object. See Excel.VerticalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates if Excel wraps the text in the object. A null value indicates that the entire range doesn't have uniform wrap setting\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates if Excel hides the formula for the cells in the range. A null value indicates that the entire range doesn't have uniform formula hidden setting.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Indicates if Excel locks the cells in the object. A null value indicates that the entire range doesn't have uniform lock setting.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * HTML color code representing the color of the background, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\")\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Constant value that indicates the specific side of the border. See Excel.BorderIndex for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Specifies the weight of the border around a range. See Excel.BorderWeight for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the bold status of font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the italic status of the font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Font name (e.g. \"Calibri\")\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Font size.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Type of underline applied to the font. See Excel.RangeUnderlineStyle for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents chart axes. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the datalabels on the chart. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Encapsulates the format properties for the chart area. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the legend for the chart. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the plotArea for the chart.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents either a single series or collection of series in the chart. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the title of the specified chart, including the text, visibility, position, and formatting of the title. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Returns or sets a ChartCategoryLabelLevel enumeration constant referring to\n            the level of where the category labels are being sourced from. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the type of the chart. See Excel.ChartType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the way that blank cells are plotted on a chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the height, in points, of the chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * The unique id of chart. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The distance, in points, from the left side of the chart to the worksheet origin.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the name of a chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns or sets the way columns or rows are used as data series on the chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if only visible cells are plotted. False if both visible and hidden cells are plotted. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns or sets a ChartSeriesNameLevel enumeration constant referring to\n            the level of where the series names are being sourced from. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents whether to display all field buttons on a PivotChart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents whether to show the data labels when the value is greater than the maximum value on the value axis.\n            If value axis became smaller than the size of data points, you can use this property to set whether to show the data labels.\n            This property applies to 2-D charts only.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns or sets the chart style for the chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the width, in points, of the chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format of chart area, which includes color, linestyle, and weight. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of all dataLabels in the series.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the formatting of a chart series, which includes fill and line formatting. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of all points in the series. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of trendlines in the series. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the group for the specified series. Read/Write\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the chart type of a series. See Excel.ChartType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the doughnut hole size of a chart series.  Only valid on doughnut and doughnutExploded charts.\n            Throws an invalid argument exception on invalid charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the explosion value for a pie-chart or doughnut-chart slice. Returns 0 (zero) if there's no explosion (the tip of the slice is in the center of the pie). Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if the series is filtered or not. Not applicable for surface charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical). Applies only to pie, 3-D pie, and doughnut charts. Can be a value from 0 through 360. Read/Write\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the gap width of a chart series.  Only valid on bar and column charts, as well as\n            specific classes of line and pie charts.  Throws an invalid argument exception on invalid charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the series has data labels or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * True if Microsoft Excel inverts the pattern in the item when it corresponds to a negative number. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents markers background color of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents markers foreground color of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker size of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker style of a chart series. See Excel.ChartMarkerStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the name of a series in a chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Specifies how bars and columns are positioned. Can be a value between –100 and 100. Applies only to 2-D bar and 2-D column charts. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the plot order of a chart series within the chart group.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart, as a percentage of the size of the primary pie. Can be a value from 5 to 200. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if the series has a shadow or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the series is smooth or not. Only applicable to line and scatter charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the way the two sections of either a pie of pie chart or a bar of pie chart are split. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if Microsoft Excel assigns a different color or pattern to each data marker. The chart must contain only one series. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents line formatting. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the data label of a chart point. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Encapsulates the format properties chart point. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents whether a data point has a data label. Not applicable for surface charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * HTML color code representation of the marker background color of data point. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * HTML color code representation of the marker foreground color of data point. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker size of data point.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker style of a chart data point. See Excel.ChartMarkerStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns the value of a chart point. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format of a chart data point, which includes color, style, and weight information. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the category axis in a chart. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the series axis of a 3-dimensional chart. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the value axis in an axis. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart object, which includes line and font formatting. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns a Gridlines object that represents the major gridlines for the specified axis. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the axis title. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the alignment for the specified axis tick label. See Excel.ChartTextHorizontalAlignment for detail.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the group for the specified axis. See Excel.ChartAxisGroup for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the base unit for the specified category axis.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the category axis type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the custom axis display unit value. Read-only. To set this property, please use the SetCustomDisplayUnit(double) method.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the axis display unit. See Excel.ChartAxisDisplayUnit for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the height, in points, of the chart axis. Null if the axis is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents whether value axis crosses the category axis between categories.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the left edge of the axis to the left of chart area. Null if the axis is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the base of the logarithm when using logarithmic scales.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the type of major tick mark for the specified axis. See Excel.ChartAxisTickMark for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the major unit scale value for the category axis when the CategoryType property is set to TimeScale.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the type of minor tick mark for the specified axis. See Excel.ChartAxisTickMark for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the minor unit scale value for the category axis when the CategoryType property is set to TimeScale.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the interval between two minor tick marks. Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents whether an axis is multilevel or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the format code for the axis tick label.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance between the levels of labels, and the distance between the first level and the axis line. The value should be an integer from 0 to 1000.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the specified axis position where the other axis crosses. See Excel.ChartAxisPosition for details.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the specified axis position where the other axis crosses at. You should use the SetPositionAt(double) method to set this property.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents whether Microsoft Excel plots data points from last to first.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the value axis scale type. See Excel.ChartAxisScaleType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents whether the axis display unit label is visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the text orientation of the axis tick label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the position of tick-mark labels on the specified axis. See Excel.ChartAxisTickLabelPosition for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the number of categories or series between tick-mark labels. Can be a value from 1 through 31999 or an empty string for automatic setting. The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the number of categories or series between tick marks.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the distance, in points, from the top edge of the axis to the top of chart area. Null if the axis is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the axis type. See Excel.ChartAxisType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * A boolean value represents the visibility of the axis.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the width, in points, of the chart axis. Null if the axis is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents chart line formatting. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of chart axis title. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the axis title.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * A boolean that specifies the visibility of an axis title.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the format of chart data labels, which includes fill and font formatting. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents whether data labels automatically generate appropriate text based on context.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the horizontal alignment for chart data label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of data label is 0.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the format code for data labels.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * String representing the separator used for the data labels on a chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label bubble size is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label category name is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label legend key is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label percentage is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label series name is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label value is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the text orientation of data labels. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment of chart data label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of data label is 90, -90 or 180.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the format of chart data label.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if data label automatically generates appropriate text based on context.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the formula of chart data label using A1-style notation.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the height, in points, of the chart data label. Read-only. Null if chart data label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the horizontal alignment for chart data label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of data label is 90, -90 or 180.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the left edge of chart data label to the left edge of chart area. Null if chart data label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the format code for data label.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * String representing the separator used for the data label on a chart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label bubble size is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label category name is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label legend key is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label percentage is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label series name is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label value is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * String representing the text of the data label on a chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the text orientation of chart data label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the top edge of chart data label to the top of chart area. Null if chart data label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment of chart data label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of data label is 0.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the width, in points, of the chart data label. Read-only. Null if chart data label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight. Read-only.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of chart gridlines. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the axis gridlines are visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents chart line formatting. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of legendEntries in the legend. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the height, in points, of the legend on the chart. Null if legend is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the left, in points, of a chart legend. Null if legend is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value for whether the chart legend should overlap with the main body of the chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the position of the legend on the chart. See Excel.ChartLegendPosition for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents if the legend has a shadow on the chart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the top of a chart legend.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * A boolean value the represents the visibility of a ChartLegend object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the width, in points, of the legend on the chart. Null if legend is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the height of the legendEntry on the chart legend.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the index of the legendEntry in the chart legend.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the left of a chart legendEntry.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the top of a chart legendEntry.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the visible of a chart legend entry.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the width of the legendEntry on the chart Legend.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight. Read-only.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart title, which includes fill and font formatting. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the height, in points, of the chart title. Null if chart title is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the horizontal alignment for chart title.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the distance, in points, from the left edge of chart title to the left edge of chart area. Null if chart title is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the chart title will overlay the chart or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the position of chart title. See Excel.ChartTitlePosition for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents a boolean value that determines if the chart title has a shadow.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the title text of a chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the text orientation of chart title. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the distance, in points, from the top edge of chart title to the top of chart area. Null if chart title is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the vertical alignment of chart title. See Excel.ChartTextVerticalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * A boolean value the represents the visibility of a chart title object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the width, in points, of the chart title. Null if chart title is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the font attributes, such as font name, font size, color, etc. of chart characters object.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the border format of chart title, which includes color, linestyle, and weight. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for an object. Read-only.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representing the color of borders in the chart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the line style of the border. See Excel.ChartLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents weight of the border, in points.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * HTML color code representing the color of lines in the chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the line style. See Excel.ChartLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents weight of the line, in points.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the bold status of font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the italic status of the font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Font name (e.g. \"Calibri\")\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Size of the font (e.g. 11)\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Type of underline applied to the font. See Excel.ChartUnderlineStyle for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart trendline.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the label of a chart trendline.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the number of periods that the trendline extends backward.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the number of periods that the trendline extends forward.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the intercept value of the trendline. Can be set to a numeric value or an empty string (for automatic values). The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the period of a chart trendline. Only applicable for trendline with MovingAverage type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the name of the trendline. Can be set to a string value, or can be set to null value represents automatic values. The returned value is always a string\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the order of a chart trendline. Only applicable for trendline with Polynomial type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * True if the equation for the trendline is displayed on the chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if the R-squared for the trendline is displayed on the chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the type of a chart trendline.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n            * Represents chart line formatting. Read-only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the format of chart trendline label.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if trendline label automatically generates appropriate text based on context.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the formula of chart trendline label using A1-style notation.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the height, in points, of the chart trendline label. Read-only. Null if chart trendline label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the horizontal alignment for chart trendline label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of trendline label is 90, -90 or 180.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the left edge of chart trendline label to the left edge of chart area. Null if chart trendline label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the format code for trendline label.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String representing the text of the trendline label on a chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the text orientation of chart trendline label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the top edge of chart trendline label to the top of chart area. Null if chart trendline label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment of chart trendline label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of trendline label is 0.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the width, in points, of the chart trendline label. Read-only. Null if chart trendline label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for a chart trendline label.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the formatting of a chart plotArea.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the height value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideHeight value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideLeft value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideTop value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideWidth value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the left value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the position of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the top value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the width value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the border attributes of a chart plotArea.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the current conditions used to last sort the table. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents whether the casing impacted the last sort of the table. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents Chinese character ordering method last used to sort the table. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * The currently applied filter on the given column. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * The custom XML part's ID. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n             * The custom XML part's namespace URI. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n            * The Column Pivot Hierarchies of the PivotTable.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * The Data Pivot Hierarchies of the PivotTable.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * The Filter Pivot Hierarchies of the PivotTable.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * The Pivot Hierarchies of the PivotTable.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * The Row Pivot Hierarchies of the PivotTable.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the PivotTable. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n             * Name of the PivotTable.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * This property indicates the PivotLayoutType of all fields on the PivotTable. If fields have different states, this will be null.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if the PivotTable report shows grand totals for columns.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if the PivotTable report shows grand totals for rows.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * This property indicates the SubtotalLocationType of all fields on the PivotTable. If fields have different states, this will be null.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Returns the PivotFields associated with the PivotHierarchy.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the PivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the PivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Returns the PivotFields associated with the RowColumnPivotHierarchy.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Position of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Returns the PivotFields associated with the FilterPivotHierarchy.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether to allow multiple filter items.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Position of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Returns the PivotFields associated with the DataPivotHierarchy.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Number format of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Position of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether the data should be shown as a specific summary calculation or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether to show all items of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Returns the PivotFields associated with the PivotField.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether to show all items of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Subtotals of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the PivotItem.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether the item is expanded to show child items or if it's collapsed and child items are hidden.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the PivotItem.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether the PivotItem is visible or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n            * Gets the collection of custom properties of the workbook. Read only.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the author of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the category of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the comments of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the company of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the creation date of the workbook. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the keywords of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the last author of the workbook. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the manager of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the revision number of the workbook. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the subject of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the title of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the key of the custom property. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the value type of the custom property. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the value of the custom property.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n            * Returns the cell value conditional format properties if the current conditional format is a CellValue type.\n            For example to format all cells between 5 and 10. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the cell value conditional format properties if the current conditional format is a CellValue type.\n            For example to format all cells between 5 and 10. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the custom conditional format properties if the current conditional format is a custom type. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the data bar properties if the current conditional format is a data bar. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the data bar properties if the current conditional format is a data bar. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the IconSet conditional format properties if the current conditional format is an IconSet type. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the specific text conditional format properties if the current conditional format is a text type.\n            For example to format cells matching the word \"Text\". Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the specific text conditional format properties if the current conditional format is a text type.\n            For example to format cells matching the word \"Text\". Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.\n            For example to format the top 10% or bottom 10 items. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.\n            For example to format the top 10% or bottom 10 items. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The Priority of the Conditional Format within the current ConditionalFormatCollection. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The priority (or index) within the conditional format collection that this conditional format currently exists in. Changing this also\n            changes other conditional formats' priorities, to allow for a contiguous priority order.\n            Use a negative priority to begin from the back.\n            Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.\n            Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.\n            Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * A type of conditional format. Only one can be set at a time. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Representation of all values to the left of the axis in an Excel data bar. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Representation of all values to the right of the axis in an Excel data bar. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the Axis line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"\" (empty string) if no axis is present or set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Representation of how the axis is determined for an Excel data bar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the direction that the data bar graphic should be based on.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The rule for what consistutes the lower bound (and how to calculate it, if applicable) for a data bar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true, hides the values from the cells where the data bar is applied.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The rule for what constitutes the upper bound (and how to calculate it, if applicable) for a data bar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"\" (empty string) if no border is present or set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the fill color, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Boolean representation of whether or not the DataBar has a gradient.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"Empty String\" if no border is present or set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the fill color, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Boolean representation of whether or not the negative DataBar has the same border color as the positive DataBar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Boolean representation of whether or not the negative DataBar has the same fill color as the positive DataBar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Represents the Rule object on this conditional format. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The formula, if required, to evaluate the conditional format rule on.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The formula, if required, to evaluate the conditional format rule on in the user's language.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The formula, if required, to evaluate the conditional format rule on in R1C1-style notation.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * An array of Criteria and IconSets for the rules and potential custom icons for conditional icons. Note that for the first criterion only the custom icon can be modified, while type, formula, and operator will be ignored when set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true, reverses the icon orders for the IconSet. Note that this cannot be set if custom icons are used.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true, hides the values and only shows icons.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If set, displays the IconSet option for the conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The criteria of the color scale. Midpoint is optional when using a two point color scale.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true the color scale will have three points (minimum, midpoint, maximum), otherwise it will have two (minimum, maximum).\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The criteria of the Top/Bottom conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The rule of the conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The rule of the conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the Rule object on this conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * Collection of border objects that apply to the overall conditional format range. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the fill object defined on the overall conditional format range. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the font object defined on the overall conditional format range. Read-only.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * Represents Excel's number format code for the given range. Cleared if null is passed in.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the bold status of font.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the italic status of the font.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the strikethrough status of the font.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Type of underline applied to the font. See Excel.ConditionalRangeFontUnderlineStyle for details.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the fill, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Constant value that indicates the specific side of the border. See Excel.ConditionalRangeBorderIndex for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n            * A Border collection of four Border objects that represent the style of the four borders.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * The Fill of the style.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * A Font object that represents the font of the style.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if text is automatically indented when the text alignment in a cell is set to equal distribution.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Indicates if the style is a built-in style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the formula will be hidden when the worksheet is protected.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the horizontal alignment for the style. See Excel.HorizontalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the AutoIndent, HorizontalAlignment, VerticalAlignment, WrapText, IndentLevel, and TextOrientation properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the Color, ColorIndex, LineStyle, and Weight border properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the Background, Bold, Color, ColorIndex, FontStyle, Italic, Name, Size, Strikethrough, Subscript, Superscript, and Underline font properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the NumberFormat property.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the Color, ColorIndex, InvertIfNegative, Pattern, PatternColor, and PatternColorIndex interior properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the FormulaHidden and Locked protection properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * An integer from 0 to 250 that indicates the indent level for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the object is locked when the worksheet is protected.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The name of the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The format code of the number format for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The localized format code of the number format for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The reading order for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if text automatically shrinks to fit in the available column width.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The text orientation for the style.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment for the style. See Excel.VerticalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if Microsoft Excel wraps the text in the object.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Error value (such as \"#DIV/0\") representing the error. If the error string is not set, then the function succeeded, and its result is written to the Value field. The error is always in the English locale.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * The value of function evaluation. The value field will be populated only if no error has occurred (i.e., the Error property is not set).\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the Excel Runtime class.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n             * Toggle JavaScript events in the current task pane or content add-in.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the Excel application that manages the workbook.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the calculation mode used in the workbook, as defined by the constants in Excel.CalculationMode. Possible values are: `Automatic`, where Excel controls recalculation; `AutomaticExceptTables`, where Excel controls recalculation but ignores changes in tables; `Manual`, where calculation is done when the user requests it.\n             *\n             * [Api set: ExcelApi 1.1 for get, 1.8 for set]",
        "*\n         * Workbook is the top level object which contains related workbook objects such as worksheets, tables, ranges, etc.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the Excel application instance that contains this workbook.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of bindings that are part of the workbook.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Gets the workbook properties.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Returns workbook protection object for a workbook.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents a collection of tables associated with the workbook.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Gets the workbook name. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * True if the workbook is open in Read-only mode. Read-only.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the protection of a workbook object.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the workbook is protected. Read-Only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * An Excel worksheet is a grid of cells. It can contain data, tables, charts, etc.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Returns collection of charts that are part of the worksheet.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns sheet protection object for a worksheet.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n            * Collection of tables that are part of the worksheet.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * The display name of the worksheet.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * The zero-based position of the worksheet within the workbook.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Gets or sets the worksheet's gridlines flag.\n            This flag determines whether gridlines are visible to the user.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Gets or sets the worksheet's headings flag.\n            This flag determines whether headings are visible to the user.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the standard (default) height of all the rows in the worksheet, in points. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the standard (default) width of all the columns in the worksheet.\n            One unit of column width is equal to the width of one character in the Normal style. For proportional fonts, the width of the character 0 (zero) is used.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the worksheet tab color.\n            When retrieving the tab color, if the worksheet is invisible, the value will be null. If the worksheet is visible but the tab color is set to auto, an empty string will be returned. Otherwise, the property will be set to a color, in the form \"#123456\"\n            When setting the color, use an empty-string to set an \"auto\" color, or a real color otherwise.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The Visibility of the worksheet.\n             *\n             * [Api set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.]",
        "*\n         * Represents a collection of worksheet objects that are part of the workbook.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Returns collection of charts that are part of the worksheet.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Returns sheet protection object for a worksheet.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n            * For EACH ITEM in the collection: Collection of tables that are part of the worksheet.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Returns a value that uniquely identifies the worksheet in a given workbook. The value of the identifier remains the same even when the worksheet is renamed or moved. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: The display name of the worksheet.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: The zero-based position of the worksheet within the workbook.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Gets or sets the worksheet's gridlines flag.\n            This flag determines whether gridlines are visible to the user.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Gets or sets the worksheet's headings flag.\n            This flag determines whether headings are visible to the user.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Returns the standard (default) height of all the rows in the worksheet, in points. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Returns or sets the standard (default) width of all the columns in the worksheet.\n            One unit of column width is equal to the width of one character in the Normal style. For proportional fonts, the width of the character 0 (zero) is used.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Gets or sets the worksheet tab color.\n            When retrieving the tab color, if the worksheet is invisible, the value will be null. If the worksheet is visible but the tab color is set to auto, an empty string will be returned. Otherwise, the property will be set to a color, in the form \"#123456\"\n            When setting the color, use an empty-string to set an \"auto\" color, or a real color otherwise.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: The Visibility of the worksheet.\n             *\n             * [Api set: ExcelApi 1.1 for reading visibility; 1.2 for setting it.]",
        "*\n         * Represents the protection of a sheet object.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n             * Sheet protection options. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Indicates if the worksheet is protected. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n         * Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Returns a data validation object.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * The worksheet containing the current range.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the range reference in A1-style. Address value will contain the Sheet reference (e.g. \"Sheet1!A1:B4\"). Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents range reference for the specified range in the language of the user. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the total number of columns in the range. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents if all columns of the current range are hidden.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the column number of the first cell in the range. Zero-indexed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the formula in A1-style notation.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the formula in R1C1-style notation.\n            When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents if all cells of the current range are hidden. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the hyperlink for the current range.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents if the current range is an entire column. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents if the current range is an entire row. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents Excel's number format code for the given range.\n            When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents Excel's number format code for the given range as a string in the language of the user.\n            When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns the total number of rows in the range. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents if all rows of the current range are hidden.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Returns the row number of the first cell in the range. Zero-indexed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the style of the current range.\n            If the styles of the cells are inconsistent, null will be returned.\n            For custom styles, the style name will be returned. For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the type of data of each cell. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n            When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array. If the argument is a single value, it will be applied to all cells in the range.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * RangeView represents a set of visible cells of the parent range.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the cell addresses of the RangeView. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Returns the number of visible columns. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the formula in A1-style notation.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the formula in R1C1-style notation.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Returns a value that represents the index of the RangeView. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents Excel's number format code for the given cell.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Returns the number of visible rows. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the type of data of each cell. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Represents the raw values of the specified range view. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n         * Represents a collection of RangeView objects.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Represents the cell addresses of the RangeView. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Returns the number of visible columns. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Represents the formula in A1-style notation.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Represents the formula in A1-style notation, in the user's language and number-formatting locale.  For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Represents the formula in R1C1-style notation.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Returns a value that represents the index of the RangeView. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Represents Excel's number format code for the given cell.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Returns the number of visible rows. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Represents the type of data of each cell. Read-only.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Represents the raw values of the specified range view. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n         * Represents a collection of key-value pair setting objects that are part of the workbook. The scope is limited to per file and add-in (task-pane or content) combination.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n             * For EACH ITEM in the collection: Returns the key that represents the id of the Setting. Read-only.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * For EACH ITEM in the collection: Represents the value stored for this setting.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n         * Setting represents a key-value pair of a setting persisted to the document (per file per add-in). These custom key-value pair can be used to store state or lifecycle information needed by the content or task-pane add-in. Note that settings are persisted in the document and hence it is not a place to store any sensitive or protected information such as user information and password.\n         *\n         * [Api set: ExcelApi 1.4]",
        "*\n             * Returns the key that represents the id of the Setting. Read-only.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * Represents the value stored for this setting.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n         * A collection of all the NamedItem objects that are part of the workbook or worksheet, depending on how it was reached.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Returns an object containing values and types of the named item.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * For EACH ITEM in the collection: Returns the worksheet on which the named item is scoped to. Throws an error if the item is scoped to the workbook instead.\n            *\n            * [Api set: ExcelApi 1.4]",
        "*\n            * For EACH ITEM in the collection: Returns the worksheet on which the named item is scoped to. Returns a null object if the item is scoped to the workbook instead.\n            *\n            * [Api set: ExcelApi 1.4]",
        "*\n             * For EACH ITEM in the collection: Represents the comment associated with this name.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * For EACH ITEM in the collection: Gets or sets the formula of the named item.  Formula always starts with a '=' sign.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: The name of the object. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Indicates whether the name is scoped to the workbook or to a specific worksheet. Possible values are: Worksheet, Workbook. Read-only.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * For EACH ITEM in the collection: Indicates the type of the value returned by the name's formula. See Excel.NamedItemType for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.1 for String,Integer,Double,Boolean,Range,Error; 1.7 for Array]",
        "*\n             * For EACH ITEM in the collection: Represents the value computed by the name's formula. For a named range, will return the range address. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Specifies whether the object is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a defined name for a range of cells or value. Names can be primitive named objects (as seen in the type below), range object, or a reference to a range. This object can be used to obtain range object associated with names.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Returns an object containing values and types of the named item.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Returns the worksheet on which the named item is scoped to. Throws an error if the item is scoped to the workbook instead.\n            *\n            * [Api set: ExcelApi 1.4]",
        "*\n            * Returns the worksheet on which the named item is scoped to. Returns a null object if the item is scoped to the workbook instead.\n            *\n            * [Api set: ExcelApi 1.4]",
        "*\n             * Represents the comment associated with this name.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * Gets or sets the formula of the named item.  Formula always starts with a '=' sign.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The name of the object. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates whether the name is scoped to the workbook or to a specific worksheet. Possible values are: Worksheet, Workbook. Read-only.\n             *\n             * [Api set: ExcelApi 1.4]",
        "*\n             * Indicates the type of the value returned by the name's formula. See Excel.NamedItemType for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.1 for String,Integer,Double,Boolean,Range,Error; 1.7 for Array]",
        "*\n             * Represents the value computed by the name's formula. For a named range, will return the range address. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Specifies whether the object is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents an object containing values and types of a named item.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the types for each item in the named item array\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the values of each item in the named item array.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Represents an Office.js binding that is defined in the workbook.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * Represents binding identifier. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the type of the binding. See Excel.BindingType for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the collection of all the binding objects that are part of the workbook.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Represents binding identifier. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Returns the type of the binding. See Excel.BindingType for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Represents a collection of all the columns in the table.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Represents a collection of all the rows in the table.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Represents the sorting for the table.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n            * For EACH ITEM in the collection: The worksheet containing the current table.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * For EACH ITEM in the collection: Indicates whether the first column contains special formatting.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Indicates whether the last column contains special formatting.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Returns a value that uniquely identifies the table in a given workbook. The value of the identifier remains the same even when the table is renamed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Returns a numeric id.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Name of the table.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Indicates whether the header row is visible or not. This value can be set to show or remove the header row.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Indicates whether the total row is visible or not. This value can be set to show or remove the total row.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Constant value that represents the Table style. Possible values are: TableStyleLight1 thru TableStyleLight21, TableStyleMedium1 thru TableStyleMedium28, TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents an Excel table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of all the columns in the table.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of all the rows in the table.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the sorting for the table.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n            * The worksheet containing the current table.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * Indicates whether the first column contains special formatting.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the last column contains special formatting.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Returns a value that uniquely identifies the table in a given workbook. The value of the identifier remains the same even when the table is renamed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns a numeric id.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the table.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n             * Indicates whether the header row is visible or not. This value can be set to show or remove the header row.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates whether the total row is visible or not. This value can be set to show or remove the total row.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Constant value that represents the Table style. Possible values are: TableStyleLight1 thru TableStyleLight21, TableStyleMedium1 thru TableStyleMedium28, TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of all the columns that are part of the table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Retrieve the filter applied to the column.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * For EACH ITEM in the collection: Returns a unique key that identifies the column within the table. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Returns the index number of the column within the columns collection of the table. Zero-indexed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Represents the name of the table column.\n             *\n             * [Api set: ExcelApi 1.1 for getting the name; 1.4 for setting it.]",
        "*\n             * For EACH ITEM in the collection: Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a column in a table.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Retrieve the filter applied to the column.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * Returns a unique key that identifies the column within the table. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the index number of the column within the columns collection of the table. Zero-indexed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the name of the table column.\n             *\n             * [Api set: ExcelApi 1.1 for getting the name; 1.4 for setting it.]",
        "*\n             * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of all the rows that are part of the table.\n            \n             Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them,\n             a TableRow object represent the physical location of the table row, but not the data.\n             That is, if the data is sorted or if new rows are added, a table row will continue\n             to point at the index for which it was created.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a row in a table.\n            \n             Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them,\n             a TableRow object represent the physical location of the table row, but not the data.\n             That is, if the data is sorted or if new rows are added, a table row will continue\n             to point at the index for which it was created.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cells that contain an error will return the error string.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the data validation applied to the current range.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * Error alert when user enters invalid data.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Ignore blanks: no data validation will be performed on blank cells, it defaults to true.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Prompt when users select a cell.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Data validation rule that contains different type of data validation criteria.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Type of the data validation, see Excel.DataValidationType for details.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents if all cell values are valid according to the data validation rules.\n            Returns true if all cell values are valid, or false if all cell values are invalid.\n            Returns null if there are both valid and invalid cell values within the range.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * A format object encapsulating the range's font, fill, borders, alignment, and other properties.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Collection of border objects that apply to the overall range.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the fill object defined on the overall range.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the font object defined on the overall range.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the format protection object for a range.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * Gets or sets the width of all colums within the range. If the column widths are not uniform, null will be returned.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the horizontal alignment for the specified object. See Excel.HorizontalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Gets or sets the height of all rows in the range. If the row heights are not uniform, null will be returned.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Gets or sets the text orientation of all the cells within the range.\n            The text orientation should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n            If the orientation within a range are not uniform, then null will be returned.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Determines if the row height of the Range object equals the standard height of the sheet.\n            Returns True if the row height of the Range object equals the standard height of the sheet.\n            Returns Null if the range contains more than one row and the rows aren't all the same height.\n            Returns False otherwise.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates whether the column width of the Range object equals the standard width of the sheet.\n            Returns True if the column width of the Range object equals the standard width of the sheet.\n            Returns Null if the range contains more than one column and the columns aren't all the same height.\n            Returns False otherwise.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the vertical alignment for the specified object. See Excel.VerticalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Indicates if Excel wraps the text in the object. A null value indicates that the entire range doesn't have uniform wrap setting\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the format protection of a range object.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n             * Indicates if Excel hides the formula for the cells in the range. A null value indicates that the entire range doesn't have uniform formula hidden setting.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Indicates if Excel locks the cells in the object. A null value indicates that the entire range doesn't have uniform lock setting.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n         * Represents the background of a range object.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representing the color of the background, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\")\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the border of an object.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Constant value that indicates the specific side of the border. See Excel.BorderIndex for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Specifies the weight of the border around a range. See Excel.BorderWeight for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the border objects that make up the range border.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Constant value that indicates the specific side of the border. See Excel.BorderIndex for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Specifies the weight of the border around a range. See Excel.BorderWeight for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * This object represents the font attributes (font name, font size, color, etc.) for an object.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the bold status of font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the italic status of the font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Font name (e.g. \"Calibri\")\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Font size.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Type of underline applied to the font. See Excel.RangeUnderlineStyle for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * A collection of all the chart objects on a worksheet.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Represents chart axes.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Represents the datalabels on the chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Encapsulates the format properties for the chart area.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Represents the legend for the chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Represents the plotArea for the chart.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * For EACH ITEM in the collection: Represents either a single series or collection of series in the chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Represents the title of the specified chart, including the text, visibility, position, and formatting of the title.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: The worksheet containing the current chart.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * For EACH ITEM in the collection: Returns or sets a ChartCategoryLabelLevel enumeration constant referring to\n            the level of where the category labels are being sourced from. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the type of the chart. See Excel.ChartType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Returns or sets the way that blank cells are plotted on a chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the height, in points, of the chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: The unique id of chart. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: The distance, in points, from the left side of the chart to the worksheet origin.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Represents the name of a chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Returns or sets the way columns or rows are used as data series on the chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: True if only visible cells are plotted. False if both visible and hidden cells are plotted. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Returns or sets a ChartSeriesNameLevel enumeration constant referring to\n            the level of where the series names are being sourced from. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents whether to display all field buttons on a PivotChart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents whether to show the data labels when the value is greater than the maximum value on the value axis.\n            If value axis became smaller than the size of data points, you can use this property to set whether to show the data labels.\n            This property applies to 2-D charts only.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Returns or sets the chart style for the chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Represents the width, in points, of the chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a chart object in a workbook.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents chart axes.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the datalabels on the chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Encapsulates the format properties for the chart area.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the legend for the chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the plotArea for the chart.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents either a single series or collection of series in the chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the title of the specified chart, including the text, visibility, position, and formatting of the title.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * The worksheet containing the current chart.\n            *\n            * [Api set: ExcelApi 1.2]",
        "*\n             * Returns or sets a ChartCategoryLabelLevel enumeration constant referring to\n            the level of where the category labels are being sourced from. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the type of the chart. See Excel.ChartType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the way that blank cells are plotted on a chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the height, in points, of the chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * The unique id of chart. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The distance, in points, from the left side of the chart to the worksheet origin.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the name of a chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns or sets the way columns or rows are used as data series on the chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if only visible cells are plotted. False if both visible and hidden cells are plotted. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns or sets a ChartSeriesNameLevel enumeration constant referring to\n            the level of where the series names are being sourced from. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents whether to display all field buttons on a PivotChart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents whether to show the data labels when the value is greater than the maximum value on the value axis.\n            If value axis became smaller than the size of data points, you can use this property to set whether to show the data labels.\n            This property applies to 2-D charts only.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns or sets the chart style for the chart. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the width, in points, of the chart object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Encapsulates the format properties for the overall chart area.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format of chart area, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for the current object.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of chart series.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Represents a collection of all dataLabels in the series.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * For EACH ITEM in the collection: Represents the formatting of a chart series, which includes fill and line formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Represents a collection of all points in the series.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Returns or sets the group for the specified series. Read/Write\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the chart type of a series. See Excel.ChartType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents the doughnut hole size of a chart series.  Only valid on doughnut and doughnutExploded charts.\n            Throws an invalid argument exception on invalid charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Returns or sets the explosion value for a pie-chart or doughnut-chart slice. Returns 0 (zero) if there's no explosion (the tip of the slice is in the center of the pie). Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Boolean value representing if the series is filtered or not. Not applicable for surface charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Returns or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical). Applies only to pie, 3-D pie, and doughnut charts. Can be a value from 0 through 360. Read/Write\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the gap width of a chart series.  Only valid on bar and column charts, as well as\n            specific classes of line and pie charts.  Throws an invalid argument exception on invalid charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Boolean value representing if the series has data labels or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: True if Microsoft Excel inverts the pattern in the item when it corresponds to a negative number. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents markers background color of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents markers foreground color of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents marker size of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents marker style of a chart series. See Excel.ChartMarkerStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents the name of a series in a chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Specifies how bars and columns are positioned. Can be a value between –100 and 100. Applies only to 2-D bar and 2-D column charts. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the plot order of a chart series within the chart group.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart, as a percentage of the size of the primary pie. Can be a value from 5 to 200. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Boolean value representing if the series has a shadow or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Boolean value representing if the series is smooth or not. Only applicable to line and scatter charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Returns or sets the way the two sections of either a pie of pie chart or a bar of pie chart are split. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: True if Microsoft Excel assigns a different color or pattern to each data marker. The chart must contain only one series. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents a series in a chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of all dataLabels in the series.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the formatting of a chart series, which includes fill and line formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents a collection of all points in the series.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Returns or sets the group for the specified series. Read/Write\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the chart type of a series. See Excel.ChartType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the doughnut hole size of a chart series.  Only valid on doughnut and doughnutExploded charts.\n            Throws an invalid argument exception on invalid charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the explosion value for a pie-chart or doughnut-chart slice. Returns 0 (zero) if there's no explosion (the tip of the slice is in the center of the pie). Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if the series is filtered or not. Not applicable for surface charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical). Applies only to pie, 3-D pie, and doughnut charts. Can be a value from 0 through 360. Read/Write\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the gap width of a chart series.  Only valid on bar and column charts, as well as\n            specific classes of line and pie charts.  Throws an invalid argument exception on invalid charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the series has data labels or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * True if Microsoft Excel inverts the pattern in the item when it corresponds to a negative number. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents markers background color of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents markers foreground color of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker size of a chart series.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker style of a chart series. See Excel.ChartMarkerStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the name of a series in a chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Specifies how bars and columns are positioned. Can be a value between –100 and 100. Applies only to 2-D bar and 2-D column charts. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the plot order of a chart series within the chart group.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the size of the secondary section of either a pie of pie chart or a bar of pie chart, as a percentage of the size of the primary pie. Can be a value from 5 to 200. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if the series has a shadow or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the series is smooth or not. Only applicable to line and scatter charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the way the two sections of either a pie of pie chart or a bar of pie chart are split. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if Microsoft Excel assigns a different color or pattern to each data marker. The chart must contain only one series. Read/Write.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Encapsulates the format properties for the chart series\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents line formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n         * A collection of all the chart points within a series inside a chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * For EACH ITEM in the collection: Returns the data label of a chart point.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * For EACH ITEM in the collection: Encapsulates the format properties chart point.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * For EACH ITEM in the collection: Represents whether a data point has a data label. Not applicable for surface charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: HTML color code representation of the marker background color of data point. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: HTML color code representation of the marker foreground color of data point. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents marker size of data point.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents marker style of a chart data point. See Excel.ChartMarkerStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Returns the value of a chart point. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a point of a series in a chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Returns the data label of a chart point.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Encapsulates the format properties chart point.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents whether a data point has a data label. Not applicable for surface charts.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * HTML color code representation of the marker background color of data point. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * HTML color code representation of the marker foreground color of data point. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker size of data point.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents marker style of a chart data point. See Excel.ChartMarkerStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns the value of a chart point. Read-only.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents formatting object for chart points.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format of a chart data point, which includes color, style, and weight information.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the chart axes.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the category axis in a chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the series axis of a 3-dimensional chart.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the value axis in an axis.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a single axis in a chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart object, which includes line and font formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns a Gridlines object that represents the major gridlines for the specified axis.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Returns a Gridlines object that represents the minor gridlines for the specified axis.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the axis title.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the alignment for the specified axis tick label. See Excel.ChartTextHorizontalAlignment for detail.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the group for the specified axis. See Excel.ChartAxisGroup for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the base unit for the specified category axis.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the category axis type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "* [DEPRECATED; kept for back-compat with existing first-party solutions]. Please use `Position` instead.\n             * Represents the specified axis where the other axis crosses. See Excel.ChartAxisPosition for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "* [DEPRECATED; kept for back-compat with existing first-party solutions]. Please use `PositionAt` instead.\n             * Represents the specified axis where the other axis crosses at. Read Only. Set to this property should use SetCrossesAt(double) method.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the custom axis display unit value. Read-only. To set this property, please use the SetCustomDisplayUnit(double) method.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the axis display unit. See Excel.ChartAxisDisplayUnit for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the height, in points, of the chart axis. Null if the axis is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents whether value axis crosses the category axis between categories.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the left edge of the axis to the left of chart area. Null if the axis is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the base of the logarithm when using logarithmic scales.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the type of major tick mark for the specified axis. See Excel.ChartAxisTickMark for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the major unit scale value for the category axis when the CategoryType property is set to TimeScale.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the type of minor tick mark for the specified axis. See Excel.ChartAxisTickMark for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Returns or sets the minor unit scale value for the category axis when the CategoryType property is set to TimeScale.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the interval between two minor tick marks. Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents whether an axis is multilevel or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the format code for the axis tick label.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance between the levels of labels, and the distance between the first level and the axis line. The value should be an integer from 0 to 1000.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the specified axis position where the other axis crosses. See Excel.ChartAxisPosition for details.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the specified axis position where the other axis crosses at. You should use the SetPositionAt(double) method to set this property.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents whether Microsoft Excel plots data points from last to first.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the value axis scale type. See Excel.ChartAxisScaleType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents whether the axis display unit label is visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the text orientation of the axis tick label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the position of tick-mark labels on the specified axis. See Excel.ChartAxisTickLabelPosition for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the number of categories or series between tick-mark labels. Can be a value from 1 through 31999 or an empty string for automatic setting. The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the number of categories or series between tick marks.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the distance, in points, from the top edge of the axis to the top of chart area. Null if the axis is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the axis type. See Excel.ChartAxisType for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * A boolean value represents the visibility of the axis.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the width, in points, of the chart axis. Null if the axis is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Encapsulates the format properties for the chart axis.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for a chart axis element.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n            * Represents chart line formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the title of a chart axis.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of chart axis title.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the axis title.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * A boolean that specifies the visibility of an axis title.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the chart axis title formatting.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes, such as font name, font size, color, etc. of chart axis title object.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a collection of all the data labels on a chart point.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the format of chart data labels, which includes fill and font formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents whether data labels automatically generate appropriate text based on context.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the horizontal alignment for chart data label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of data label is 0.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the format code for data labels.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * String representing the separator used for the data labels on a chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label bubble size is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label category name is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label legend key is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label percentage is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label series name is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the data label value is visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the text orientation of data labels. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment of chart data label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of data label is 90, -90 or 180.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the data label of a chart point.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the format of chart data label.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if data label automatically generates appropriate text based on context.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the formula of chart data label using A1-style notation.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the height, in points, of the chart data label. Read-only. Null if chart data label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the horizontal alignment for chart data label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of data label is 90, -90 or 180.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the left edge of chart data label to the left edge of chart area. Null if chart data label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the format code for data label.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * DataLabelPosition value that represents the position of the data label. See Excel.ChartDataLabelPosition for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * String representing the separator used for the data label on a chart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label bubble size is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label category name is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label legend key is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label percentage is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label series name is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the data label value is visible or not.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * String representing the text of the data label on a chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the text orientation of chart data label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the top edge of chart data label to the top of chart area. Null if chart data label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment of chart data label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of data label is 0.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the width, in points, of the chart data label. Read-only. Null if chart data label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Encapsulates the format properties for the chart data labels.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for a chart data label.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n         * Represents major or minor gridlines on a chart axis.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of chart gridlines.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Boolean value representing if the axis gridlines are visible or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * Encapsulates the format properties for chart gridlines.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents chart line formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the legend in a chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart legend, which includes fill and font formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the height, in points, of the legend on the chart. Null if legend is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the left, in points, of a chart legend. Null if legend is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value for whether the chart legend should overlap with the main body of the chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the position of the legend on the chart. See Excel.ChartLegendPosition for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents if the legend has a shadow on the chart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the top of a chart legend.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * A boolean value the represents the visibility of a ChartLegend object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the width, in points, of the legend on the chart. Null if legend is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the legendEntry in legendEntryCollection.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the height of the legendEntry on the chart legend.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the index of the legendEntry in the chart legend.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the left of a chart legendEntry.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the top of a chart legendEntry.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the visible of a chart legend entry.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the width of the legendEntry on the chart Legend.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents a collection of legendEntries.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents the height of the legendEntry on the chart legend.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the index of the legendEntry in the chart legend.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the left of a chart legendEntry.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the top of a chart legendEntry.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the visible of a chart legend entry.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents the width of the legendEntry on the chart Legend.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Encapsulates the format properties of a chart legend.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes such as font name, font size, color, etc. of a chart legend.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n         * Represents a chart title object of a chart.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the formatting of a chart title, which includes fill and font formatting.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the height, in points, of the chart title. Null if chart title is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the horizontal alignment for chart title.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the distance, in points, from the left edge of chart title to the left edge of chart area. Null if chart title is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Boolean value representing if the chart title will overlay the chart or not.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the position of chart title. See Excel.ChartTitlePosition for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents a boolean value that determines if the chart title has a shadow.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the title text of a chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the text orientation of chart title. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the distance, in points, from the top edge of chart title to the top of chart area. Null if chart title is not visible.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the vertical alignment of chart title. See Excel.ChartTextVerticalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * A boolean value the represents the visibility of a chart title object.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Returns the width, in points, of the chart title. Null if chart title is not visible. Read-only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the substring in chart related objects that contains text, like ChartTitle object, ChartAxisTitle object, etc.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the font attributes, such as font name, font size, color, etc. of chart characters object.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n         * Provides access to the office art formatting for chart title.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n            * Represents the border format of chart title, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for an object.\n            *\n            * [Api set: ExcelApi 1.1]",
        "*\n         * Represents the border formatting of a chart element.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n             * HTML color code representing the color of borders in the chart.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the line style of the border. See Excel.ChartLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents weight of the border, in points.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Encapsulates the formatting options for line elements.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representing the color of lines in the chart.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the line style. See Excel.ChartLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents weight of the line, in points.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * This object represents the font attributes (font name, font size, color, etc.) for a chart object.\n         *\n         * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the bold status of font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Represents the italic status of the font.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Font name (e.g. \"Calibri\")\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Size of the font (e.g. 11)\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n             * Type of underline applied to the font. See Excel.ChartUnderlineStyle for details.\n             *\n             * [Api set: ExcelApi 1.1]",
        "*\n         * This object represents the attributes for a chart trendline object.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the formatting of a chart trendline.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * Represents the label of a chart trendline.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the number of periods that the trendline extends backward.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the number of periods that the trendline extends forward.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the intercept value of the trendline. Can be set to a numeric value or an empty string (for automatic values). The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the period of a chart trendline. Only applicable for trendline with MovingAverage type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the name of the trendline. Can be set to a string value, or can be set to null value represents automatic values. The returned value is always a string\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the order of a chart trendline. Only applicable for trendline with Polynomial type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * True if the equation for the trendline is displayed on the chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if the R-squared for the trendline is displayed on the chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the type of a chart trendline.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Represents a collection of Chart Trendlines.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n            * For EACH ITEM in the collection: Represents the formatting of a chart trendline.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * For EACH ITEM in the collection: Represents the label of a chart trendline.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the number of periods that the trendline extends backward.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the number of periods that the trendline extends forward.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the intercept value of the trendline. Can be set to a numeric value or an empty string (for automatic values). The returned value is always a number.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents the period of a chart trendline. Only applicable for trendline with MovingAverage type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents the name of the trendline. Can be set to a string value, or can be set to null value represents automatic values. The returned value is always a string\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents the order of a chart trendline. Only applicable for trendline with Polynomial type.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: True if the equation for the trendline is displayed on the chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: True if the R-squared for the trendline is displayed on the chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the type of a chart trendline.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Represents the format properties for chart trendline.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n            * Represents chart line formatting.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n         * This object represents the attributes for a chart trendline lable object.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the format of chart trendline label.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Boolean value representing if trendline label automatically generates appropriate text based on context.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the formula of chart trendline label using A1-style notation.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the height, in points, of the chart trendline label. Read-only. Null if chart trendline label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the horizontal alignment for chart trendline label. See Excel.ChartTextHorizontalAlignment for details.\n            This property is valid only when TextOrientation of trendline label is 90, -90 or 180.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the left edge of chart trendline label to the left edge of chart area. Null if chart trendline label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String value that represents the format code for trendline label.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * String representing the text of the trendline label on a chart.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the text orientation of chart trendline label. The value should be an integer either from -90 to 90, or 180 for vertically-oriented text.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the distance, in points, from the top edge of chart trendline label to the top of chart area. Null if chart trendline label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment of chart trendline label. See Excel.ChartTextVerticalAlignment for details.\n            This property is valid only when TextOrientation of trendline label is 0.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Returns the width, in points, of the chart trendline label. Read-only. Null if chart trendline label is not visible.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Encapsulates the format properties for the chart trendline label.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the border format, which includes color, linestyle, and weight.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the font attributes (font name, font size, color, etc.) for a chart trendline label.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n         * This object represents the attributes for a chart plotArea object.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the formatting of a chart plotArea.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the height value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideHeight value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideLeft value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideTop value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the insideWidth value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the left value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the position of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the top value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the width value of plotArea.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the format properties for chart plotArea.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n            * Represents the border attributes of a chart plotArea.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n         * Manages sorting operations on Table objects.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n             * Represents the current conditions used to last sort the table. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents whether the casing impacted the last sort of the table. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * Represents Chinese character ordering method last used to sort the table. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n         * Manages the filtering of a table's column.\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n             * The currently applied filter on the given column. Read-only.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n         * A scoped collection of custom XML parts.\n            A scoped collection is the result of some operation, e.g. filtering by namespace.\n            A scoped collection cannot be scoped any further.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n             * For EACH ITEM in the collection: The custom XML part's ID. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n             * For EACH ITEM in the collection: The custom XML part's namespace URI. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n         * A collection of custom XML parts.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n             * For EACH ITEM in the collection: The custom XML part's ID. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n             * For EACH ITEM in the collection: The custom XML part's namespace URI. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n         * Represents a custom XML part object in a workbook.\n         *\n         * [Api set: ExcelApi 1.5]",
        "*\n             * The custom XML part's ID. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n             * The custom XML part's namespace URI. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n         * Represents a collection of all the PivotTables that are part of the workbook or worksheet.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n            * For EACH ITEM in the collection: The PivotLayout describing the layout and visual structure of the PivotTable.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * For EACH ITEM in the collection: The worksheet containing the current PivotTable.\n            *\n            * [Api set: ExcelApi 1.3]",
        "*\n             * For EACH ITEM in the collection: Id of the PivotTable. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n             * For EACH ITEM in the collection: Name of the PivotTable.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n         * Represents an Excel PivotTable.\n         *\n         * [Api set: ExcelApi 1.3]",
        "*\n            * The PivotLayout describing the layout and visual structure of the PivotTable.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n            * The worksheet containing the current PivotTable.\n            *\n            * [Api set: ExcelApi 1.3]",
        "*\n             * Id of the PivotTable. Read-only.\n             *\n             * [Api set: ExcelApi 1.5]",
        "*\n             * Name of the PivotTable.\n             *\n             * [Api set: ExcelApi 1.3]",
        "*\n         * Represents the visual layout of the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * This property indicates the PivotLayoutType of all fields on the PivotTable. If fields have different states, this will be null.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if the PivotTable report shows grand totals for columns.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * True if the PivotTable report shows grand totals for rows.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * This property indicates the SubtotalLocationType of all fields on the PivotTable. If fields have different states, this will be null.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents a collection of all the PivotTables that are part of the workbook or worksheet.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Id of the PivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Name of the PivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the Excel PivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the PivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the PivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents a collection of RowColumnPivotHierarchy items associated with the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Id of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Name of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Position of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the Excel RowColumnPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Position of the RowColumnPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents a collection of FilterPivotHierarchy items associated with the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Determines whether to allow multiple filter items.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Id of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Name of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Position of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the Excel FilterPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether to allow multiple filter items.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Position of the FilterPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents a collection of DataPivotHierarchy items associated with the PivotTable.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n            * For EACH ITEM in the collection: Returns the PivotFields associated with the DataPivotHierarchy.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Id of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Name of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Number format of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Position of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Determines whether the data should be shown as a specific summary calculation or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Determines whether to show all items of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the Excel DataPivotHierarchy.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n            * Returns the PivotFields associated with the DataPivotHierarchy.\n            *\n            * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Number format of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Position of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether the data should be shown as a specific summary calculation or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether to show all items of the DataPivotHierarchy.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents a collection of all the PivotTables that are part of the workbook or worksheet.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Id of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Name of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Determines whether to show all items of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Subtotals of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the Excel PivotField.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether to show all items of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Subtotals of the PivotField.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents a collection of all the Pivot Items related to their parent PivotField.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Id of the PivotItem.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Determines whether the item is expanded to show child items or if it's collapsed and child items are hidden.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Name of the PivotItem.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Determines whether the PivotItem is visible or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents the Excel PivotItem.\n         *\n         * [Api set: ExcelApi 1.8]",
        "*\n             * Id of the PivotItem.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether the item is expanded to show child items or if it's collapsed and child items are hidden.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Name of the PivotItem.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Determines whether the PivotItem is visible or not.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n         * Represents workbook properties.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the author of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the category of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the comments of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the company of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the creation date of the workbook. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the keywords of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the last author of the workbook. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the manager of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the revision number of the workbook. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the subject of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the title of the workbook.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Represents a custom property.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the key of the custom property. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets the value type of the custom property. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Gets or sets the value of the custom property.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Contains the collection of customProperty objects.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Gets the key of the custom property. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Gets the value type of the custom property. Read only.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Gets or sets the value of the custom property.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Represents a collection of all the conditional formats that are overlap the range.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the cell value conditional format properties if the current conditional format is a CellValue type.\n            For example to format all cells between 5 and 10.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the cell value conditional format properties if the current conditional format is a CellValue type.\n            For example to format all cells between 5 and 10.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the custom conditional format properties if the current conditional format is a custom type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the custom conditional format properties if the current conditional format is a custom type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the data bar properties if the current conditional format is a data bar.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the data bar properties if the current conditional format is a data bar.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the IconSet conditional format properties if the current conditional format is an IconSet type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the IconSet conditional format properties if the current conditional format is an IconSet type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the specific text conditional format properties if the current conditional format is a text type.\n            For example to format cells matching the word \"Text\".\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the specific text conditional format properties if the current conditional format is a text type.\n            For example to format cells matching the word \"Text\".\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.\n            For example to format the top 10% or bottom 10 items.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * For EACH ITEM in the collection: Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.\n            For example to format the top 10% or bottom 10 items.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * For EACH ITEM in the collection: The Priority of the Conditional Format within the current ConditionalFormatCollection. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * For EACH ITEM in the collection: The priority (or index) within the conditional format collection that this conditional format currently exists in. Changing this also\n            changes other conditional formats' priorities, to allow for a contiguous priority order.\n            Use a negative priority to begin from the back.\n            Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.\n            Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * For EACH ITEM in the collection: If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.\n            Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * For EACH ITEM in the collection: A type of conditional format. Only one can be set at a time. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * An object encapsulating a conditional format's range, format, rule, and other properties.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the cell value conditional format properties if the current conditional format is a CellValue type.\n            For example to format all cells between 5 and 10.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the cell value conditional format properties if the current conditional format is a CellValue type.\n            For example to format all cells between 5 and 10.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the custom conditional format properties if the current conditional format is a custom type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the custom conditional format properties if the current conditional format is a custom type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the data bar properties if the current conditional format is a data bar.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the data bar properties if the current conditional format is a data bar.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the IconSet conditional format properties if the current conditional format is an IconSet type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the IconSet conditional format properties if the current conditional format is an IconSet type.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the preset criteria conditional format. See Excel.PresetCriteriaConditionalFormat for more details.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the specific text conditional format properties if the current conditional format is a text type.\n            For example to format cells matching the word \"Text\".\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the specific text conditional format properties if the current conditional format is a text type.\n            For example to format cells matching the word \"Text\".\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.\n            For example to format the top 10% or bottom 10 items.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.\n            For example to format the top 10% or bottom 10 items.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The Priority of the Conditional Format within the current ConditionalFormatCollection. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The priority (or index) within the conditional format collection that this conditional format currently exists in. Changing this also\n            changes other conditional formats' priorities, to allow for a contiguous priority order.\n            Use a negative priority to begin from the back.\n            Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.\n            Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.\n            Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * A type of conditional format. Only one can be set at a time. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents an Excel Conditional Data Bar Type.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n            * Representation of all values to the left of the axis in an Excel data bar.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Representation of all values to the right of the axis in an Excel data bar.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the Axis line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"\" (empty string) if no axis is present or set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Representation of how the axis is determined for an Excel data bar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the direction that the data bar graphic should be based on.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The rule for what consistutes the lower bound (and how to calculate it, if applicable) for a data bar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true, hides the values from the cells where the data bar is applied.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The rule for what constitutes the upper bound (and how to calculate it, if applicable) for a data bar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents a conditional format DataBar Format for the positive side of the data bar.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"\" (empty string) if no border is present or set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the fill color, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Boolean representation of whether or not the DataBar has a gradient.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents a conditional format DataBar Format for the negative side of the data bar.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n            \"Empty String\" if no border is present or set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the fill color, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Boolean representation of whether or not the negative DataBar has the same border color as the positive DataBar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Boolean representation of whether or not the negative DataBar has the same fill color as the positive DataBar.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents a custom conditional format type.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Represents the Rule object on this conditional format.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n         * Represents a rule, for all traditional rule/format pairings.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n             * The formula, if required, to evaluate the conditional format rule on.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The formula, if required, to evaluate the conditional format rule on in the user's language.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * The formula, if required, to evaluate the conditional format rule on in R1C1-style notation.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents an IconSet criteria for conditional formatting.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n             * An array of Criteria and IconSets for the rules and potential custom icons for conditional icons. Note that for the first criterion only the custom icon can be modified, while type, formula, and operator will be ignored when set.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true, reverses the icon orders for the IconSet. Note that this cannot be set if custom icons are used.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true, hides the values and only shows icons.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If set, displays the IconSet option for the conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents an IconSet criteria for conditional formatting.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n             * The criteria of the color scale. Midpoint is optional when using a two point color scale.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * If true the color scale will have three points (minimum, midpoint, maximum), otherwise it will have two (minimum, maximum).\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents a Top/Bottom conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The criteria of the Top/Bottom conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents the the preset criteria conditional format such as above average, below average, unique values, contains blank, nonblank, error, and noerror.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The rule of the conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents a specific text conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * The rule of the conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents a cell value conditional format.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n            * Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the Rule object on this conditional format.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * A format object encapsulating the conditional formats range's font, fill, borders, and other properties.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n            * Collection of border objects that apply to the overall conditional format range.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the fill object defined on the overall conditional format range.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n            * Returns the font object defined on the overall conditional format range.\n            *\n            * [Api set: ExcelApi 1.6]",
        "*\n             * Represents Excel's number format code for the given range. Cleared if null is passed in.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * This object represents the font attributes (font style, color, etc.) for an object.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the bold status of font.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representation of the text color. E.g. #FF0000 represents Red.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the italic status of the font.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Represents the strikethrough status of the font.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Type of underline applied to the font. See Excel.ConditionalRangeFontUnderlineStyle for details.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents the background of a conditional range object.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the fill, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents the border of an object.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n             * HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * Constant value that indicates the specific side of the border. See Excel.ConditionalRangeBorderIndex for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * Represents the border objects that make up range border.\n         *\n         * [Api set: ExcelApi 1.6]",
        "*\n             * For EACH ITEM in the collection: HTML color code representing the color of the border line, of the form #RRGGBB (e.g. \"FFA500\") or as a named HTML color (e.g. \"orange\").\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * For EACH ITEM in the collection: Constant value that indicates the specific side of the border. See Excel.ConditionalRangeBorderIndex for details. Read-only.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n             * For EACH ITEM in the collection: One of the constants of line style specifying the line style for the border. See Excel.BorderLineStyle for details.\n             *\n             * [Api set: ExcelApi 1.6]",
        "*\n         * An object encapsulating a style's format and other properties.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n            * A Border collection of four Border objects that represent the style of the four borders.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * The Fill of the style.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * A Font object that represents the font of the style.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if text is automatically indented when the text alignment in a cell is set to equal distribution.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Indicates if the style is a built-in style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the formula will be hidden when the worksheet is protected.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Represents the horizontal alignment for the style. See Excel.HorizontalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the AutoIndent, HorizontalAlignment, VerticalAlignment, WrapText, IndentLevel, and TextOrientation properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the Color, ColorIndex, LineStyle, and Weight border properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the Background, Bold, Color, ColorIndex, FontStyle, Italic, Name, Size, Strikethrough, Subscript, Superscript, and Underline font properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the NumberFormat property.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the Color, ColorIndex, InvertIfNegative, Pattern, PatternColor, and PatternColorIndex interior properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the style includes the FormulaHidden and Locked protection properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * An integer from 0 to 250 that indicates the indent level for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if the object is locked when the worksheet is protected.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The name of the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The format code of the number format for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The localized format code of the number format for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The reading order for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if text automatically shrinks to fit in the available column width.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * The text orientation for the style.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * Represents the vertical alignment for the style. See Excel.VerticalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * Indicates if Microsoft Excel wraps the text in the object.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * Represents a collection of all the styles.\n         *\n         * [Api set: ExcelApi 1.7]",
        "*\n            * For EACH ITEM in the collection: A Border collection of four Border objects that represent the style of the four borders.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * For EACH ITEM in the collection: The Fill of the style.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n            * For EACH ITEM in the collection: A Font object that represents the font of the style.\n            *\n            * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if text is automatically indented when the text alignment in a cell is set to equal distribution.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Indicates if the style is a built-in style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if the formula will be hidden when the worksheet is protected.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Represents the horizontal alignment for the style. See Excel.HorizontalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if the style includes the AutoIndent, HorizontalAlignment, VerticalAlignment, WrapText, IndentLevel, and TextOrientation properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if the style includes the Color, ColorIndex, LineStyle, and Weight border properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if the style includes the Background, Bold, Color, ColorIndex, FontStyle, Italic, Name, Size, Strikethrough, Subscript, Superscript, and Underline font properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if the style includes the NumberFormat property.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if the style includes the Color, ColorIndex, InvertIfNegative, Pattern, PatternColor, and PatternColorIndex interior properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if the style includes the FormulaHidden and Locked protection properties.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: An integer from 0 to 250 that indicates the indent level for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if the object is locked when the worksheet is protected.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: The name of the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: The format code of the number format for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: The localized format code of the number format for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: The reading order for the style.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if text automatically shrinks to fit in the available column width.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: The text orientation for the style.\n             *\n             * [Api set: ExcelApi 1.8]",
        "*\n             * For EACH ITEM in the collection: Represents the vertical alignment for the style. See Excel.VerticalAlignment for details.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n             * For EACH ITEM in the collection: Indicates if Microsoft Excel wraps the text in the object.\n             *\n             * [Api set: ExcelApi 1.7]",
        "*\n         * An object containing the result of a function-evaluation operation\n         *\n         * [Api set: ExcelApi 1.2]",
        "*\n             * Error value (such as \"#DIV/0\") representing the error. If the error string is not set, then the function succeeded, and its result is written to the Value field. The error is always in the English locale.\n             *\n             * [Api set: ExcelApi 1.2]",
        "*\n             * The value of function evaluation. The value field will be populated only if no error has occurred (i.e., the Error property is not set).\n             *\n             * [Api set: ExcelApi 1.2]"
    ],
    "functions": [],
    "classes": [
        "Session",
        "RequestContext",
        "Runtime",
        "Application",
        "Workbook",
        "WorkbookProtection",
        "WorkbookCreated",
        "Worksheet",
        "WorksheetCollection",
        "WorksheetProtection",
        "WorksheetFreezePanes",
        "Range",
        "RangeView",
        "RangeViewCollection",
        "SettingCollection",
        "Setting",
        "NamedItemCollection",
        "NamedItem",
        "NamedItemArrayValues",
        "Binding",
        "BindingCollection",
        "TableCollection",
        "Table",
        "TableColumnCollection",
        "TableColumn",
        "TableRowCollection",
        "TableRow",
        "DataValidation",
        "RangeFormat",
        "FormatProtection",
        "RangeFill",
        "RangeBorder",
        "RangeBorderCollection",
        "RangeFont",
        "ChartCollection",
        "Chart",
        "ChartAreaFormat",
        "ChartSeriesCollection",
        "ChartSeries",
        "ChartSeriesFormat",
        "ChartPointsCollection",
        "ChartPoint",
        "ChartPointFormat",
        "ChartAxes",
        "ChartAxis",
        "ChartAxisFormat",
        "ChartAxisTitle",
        "ChartAxisTitleFormat",
        "ChartDataLabels",
        "ChartDataLabel",
        "ChartDataLabelFormat",
        "ChartGridlines",
        "ChartGridlinesFormat",
        "ChartLegend",
        "ChartLegendEntry",
        "ChartLegendEntryCollection",
        "ChartLegendFormat",
        "ChartTitle",
        "ChartFormatString",
        "ChartTitleFormat",
        "ChartFill",
        "ChartBorder",
        "ChartLineFormat",
        "ChartFont",
        "ChartTrendline",
        "ChartTrendlineCollection",
        "ChartTrendlineFormat",
        "ChartTrendlineLabel",
        "ChartTrendlineLabelFormat",
        "ChartPlotArea",
        "ChartPlotAreaFormat",
        "RangeSort",
        "TableSort",
        "Filter",
        "CustomXmlPartScopedCollection",
        "CustomXmlPartCollection",
        "CustomXmlPart",
        "PivotTableCollection",
        "PivotTable",
        "PivotLayout",
        "PivotHierarchyCollection",
        "PivotHierarchy",
        "RowColumnPivotHierarchyCollection",
        "RowColumnPivotHierarchy",
        "FilterPivotHierarchyCollection",
        "FilterPivotHierarchy",
        "DataPivotHierarchyCollection",
        "DataPivotHierarchy",
        "PivotFieldCollection",
        "PivotField",
        "PivotItemCollection",
        "PivotItem",
        "DocumentProperties",
        "CustomProperty",
        "CustomPropertyCollection",
        "ConditionalFormatCollection",
        "ConditionalFormat",
        "DataBarConditionalFormat",
        "ConditionalDataBarPositiveFormat",
        "ConditionalDataBarNegativeFormat",
        "CustomConditionalFormat",
        "ConditionalFormatRule",
        "IconSetConditionalFormat",
        "ColorScaleConditionalFormat",
        "TopBottomConditionalFormat",
        "PresetCriteriaConditionalFormat",
        "TextConditionalFormat",
        "CellValueConditionalFormat",
        "ConditionalRangeFormat",
        "ConditionalRangeFont",
        "ConditionalRangeFill",
        "ConditionalRangeBorder",
        "ConditionalRangeBorderCollection",
        "Style",
        "StyleCollection",
        "DataConnectionCollection",
        "FunctionResult",
        "Functions"
    ]
}