{
    "identifiers": [
        "com",
        "udacity",
        "java",
        "util",
        "Arrays",
        "turn",
        "twoPlayer",
        "grid",
        "freeSpots",
        "gui",
        "newGame",
        "twoPlayer",
        "twoPlayer",
        "twoPlayer",
        "grid",
        "i",
        "i",
        "i",
        "j",
        "j",
        "j",
        "grid",
        "i",
        "j",
        "freeSpots",
        "turn",
        "i",
        "j",
        "i",
        "j",
        "i",
        "j",
        "grid",
        "i",
        "j",
        "i",
        "j",
        "i",
        "j",
        "i",
        "j",
        "grid",
        "i",
        "j",
        "grid",
        "i",
        "j",
        "turn",
        "freeSpots",
        "Arrays",
        "deepToString",
        "grid",
        "winnerMessage",
        "checkGameWinner",
        "grid",
        "winnerMessage",
        "equals",
        "gui",
        "gameOver",
        "winnerMessage",
        "newGame",
        "twoPlayer",
        "freeSpots",
        "ai_i",
        "ai_j",
        "ai_i",
        "random",
        "ai_j",
        "random",
        "grid",
        "ai_i",
        "ai_j",
        "grid",
        "ai_i",
        "ai_j",
        "freeSpots",
        "turn",
        "turn",
        "turn",
        "grid",
        "result",
        "result",
        "args",
        "game",
        "gui",
        "game"
    ],
    "literals": [
        "\"None\"",
        "\"None\""
    ],
    "variables": [
        "turn",
        "twoPlayer",
        "grid",
        "freeSpots",
        "gui",
        "ai_i",
        "ai_j"
    ],
    "comments": [
        "who's turn is it, 'x' or 'o' ? x always starts",
        "true if this is a 2 player game, false if AI playing",
        "a 2D array of chars representing the game grid",
        "counts the number of empty spots remaining on the board (starts from 9  and counts down)",
        "sets a game to one or two player",
        "initialize all chars in 3x3 game grid to '-'",
        "fill all empty slots with -",
        "start with 9 free spots and decrement by one every time a spot is taken",
        "x always starts",
        "check for index boundries",
        "check if this position is available",
        "bail out if not available",
        "update grid with new play based on who's turn it is",
        "update free spots",
        "check if there's a winner or tie ?",
        "check if single player game, then let computer play turn",
        "bail out if no more free spots",
        "randomly pick a position (ai_i,ai_j)",
        "keep trying if this spot was taken",
        "update grid with new play, computer is always o",
        "update free spots",
        "change turns",
        "Student code goes here ..."
    ],
    "docstrings": [
        "* Created by udacity 2016\n * The Main class containing game logic and backend 2D array",
        "* Create a new single player game\n     *",
        "* Create a new game by clearing the 2D grid and restarting the freeSpots counter and setting the turn to x\n     * @param twoPlayer: true if this is a 2 player game, false if playing against the computer",
        "* Gets the char value at that particular position in the grid array\n     * @param i the x index of the 2D array grid\n     * @param j the y index of the 2D array grid\n     * @return the char value at the position (i,j):\n     *          'x' if x has played here\n     *          'o' if o has played here\n     *          '-' if no one has played here\n     *          '!' if i or j is out of bounds",
        "* Places current player's char at position (i,j)\n     * Uses the variable turn to decide what char to use\n     * @param i the x index of the 2D array grid\n     * @param j the y index of the 2D array grid\n     * @return boolean: true if play was successful, false if invalid play",
        "* Override\n     * @return string format for 2D array values",
        "* Performs the winner chack and displayes a message if game is over\n     * @return true if game is over to start a new game",
        "* Allows computer to play in a single player game or switch turns for 2 player game",
        "* Checks if the game has ended either because a player has won, or if the game has ended as a tie.\n     * If game hasn't ended the return string has to be \"None\",\n     * If the game ends as tie, the return string has to be \"Tie\",\n     * If the game ends because there's a winner, it should return \"X wins\" or \"O wins\" accordingly\n     * @param grid 2D array of characters representing the game board\n     * @return String indicating the outcome of the game: \"X wins\" or \"O wins\" or \"Tie\" or \"None\"",
        "* Main function\n     * @param args command line arguments"
    ],
    "functions": [
        "Game",
        "newGame",
        "gridAt",
        "playAt",
        "toString",
        "doChecks",
        "nextTurn",
        "checkGameWinner",
        "main"
    ],
    "classes": [
        "Game"
    ]
}