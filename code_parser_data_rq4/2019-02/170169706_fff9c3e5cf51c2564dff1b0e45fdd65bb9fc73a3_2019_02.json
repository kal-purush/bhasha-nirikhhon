{
    "identifiers": [
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "metrics",
        "classification_report",
        "accuracy_score",
        "roc_auc_score",
        "df_train",
        "df_test",
        "features",
        "target",
        "estimator",
        "df_train",
        "features",
        "df_train",
        "target",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "random_state",
        "df_test",
        "features",
        "df_test",
        "target",
        "estimator",
        "fit",
        "X_train",
        "y_train",
        "model_performance",
        "estimator",
        "X_val",
        "y_val",
        "estimator",
        "fit",
        "X",
        "y",
        "model_performance",
        "estimator",
        "X_test",
        "y_test",
        "estimator",
        "estimator",
        "X",
        "y",
        "estimator",
        "predict",
        "X",
        "accuracy_score",
        "y",
        "y_pred",
        "roc_auc_score",
        "y",
        "y_pred",
        "format",
        "y",
        "value_counts",
        "normalize",
        "format",
        "accuracy",
        "format",
        "auc",
        "classification_report",
        "y",
        "y_pred"
    ],
    "literals": [
        "'--- Validation set performance ---'",
        "'--- Test set performance ---'",
        "\"Baseline accuracy: \\n\\n{}\\n\"",
        "\"Model accuracy:    {:.2f}\"",
        "\"AUC:               {:.2f}\""
    ],
    "variables": [
        "X",
        "y",
        "X_train",
        "X_val",
        "y_train",
        "y_val",
        "X_test",
        "y_test",
        "y_pred",
        "accuracy",
        "auc"
    ],
    "comments": [
        "--------------------------------------------------------------------------------------------------",
        "Technical interview",
        "By Joost van der Linden, February 11th, 2019",
        "",
        "File contains: abstracted machine learning code",
        "",
        "--------------------------------------------------------------------------------------------------",
        "Training data",
        "Testing data",
        "Performance on the validation data",
        "Performance on the test data",
        "overwrites previous fit",
        "predictions = [round(value) for value in y_pred]"
    ],
    "docstrings": [
        "''' Performs a simple 80/20 split and reports performance on training and test dataset.\n\n\tArgs:\n\t\tdf_train (:obj:`pandas.DataFrame`): Dataframe containing features and target variable.\n\t\tdf_test (:obj:`pandas.DataFrame`): Dataframe containing features and target variable.\n\t\tfeatures (:obj:`list`): List of features to use.\n\t\ttarget (:obj:`str`): Target variable.\n\t\testimator (:obj:`sklearn.base.BaseEstimator): scikit-learn model to use.\n\n\tReturns:\n\t\testimator (:obj:`sklearn.base.BaseEstimator): fitted scikit-learn model.\n\t'''",
        "''' Reports model performance in terms of (baseline) accuracy, AUC and precision-recall.\n\t\n\tArgs:\n\t\testimator (:obj:`sklearn.base.BaseEstimator): fitted scikit-learn model.\n\t\tX (:obj:`pandas.DataFrame`): Data to predict on.\n\t\ty (:obj:`pandas.Series`): Truth.\n\t'''"
    ],
    "functions": [
        "analyze_model",
        "model_performance"
    ],
    "classes": []
}