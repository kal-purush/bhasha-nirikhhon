{
    "identifiers": [
        "Observable",
        "Nimiq",
        "require",
        "args",
        "Observable",
        "LedgerApi",
        "LedgerApi",
        "api",
        "LedgerApi",
        "LedgerApi",
        "call",
        "api",
        "LedgerApi",
        "LedgerApi",
        "call",
        "api",
        "api",
        "result",
        "LedgerApiRequest",
        "callback",
        "args",
        "LedgerApiRequest",
        "callback",
        "callback",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "eventType",
        "LedgerApi",
        "listener",
        "LedgerApi",
        "eventType",
        "LedgerApi",
        "eventType",
        "listener",
        "LedgerApi",
        "eventType",
        "listener",
        "eventType",
        "LedgerApi",
        "listener",
        "LedgerApi",
        "eventType",
        "listenersForEvent",
        "listenersForEvent",
        "listener",
        "index",
        "listenersForEvent",
        "index",
        "startKeyId",
        "count",
        "LedgerApiRequest",
        "LedgerApi",
        "api",
        "keyId",
        "startKeyId",
        "keyId",
        "LedgerApi",
        "keyId",
        "result",
        "api",
        "keyPath",
        "result",
        "LedgerApi",
        "startKeyId",
        "count",
        "LedgerApi",
        "request",
        "keyId",
        "LedgerApiRequest",
        "LedgerApi",
        "api",
        "api",
        "result",
        "LedgerApi",
        "keyId",
        "LedgerApi",
        "request",
        "keyId",
        "LedgerApiRequest",
        "LedgerApi",
        "api",
        "api",
        "result",
        "LedgerApi",
        "keyId",
        "LedgerApi",
        "request",
        "userFriendlyAddress",
        "keyId",
        "LedgerApiRequest",
        "LedgerApi",
        "api",
        "api",
        "result",
        "LedgerApi",
        "keyId",
        "userFriendlyAddress",
        "LedgerApi",
        "request",
        "userFriendlyAddress",
        "confirmedAddress",
        "LedgerApi",
        "LedgerApi",
        "request",
        "confirmedAddress",
        "keyId",
        "LedgerApi",
        "keyId",
        "address",
        "keyId",
        "transaction",
        "keyId",
        "Nimiq",
        "LedgerApi",
        "LedgerApi",
        "keyId",
        "LedgerApiRequest",
        "LedgerApi",
        "api",
        "api",
        "result",
        "requestParams",
        "LedgerApi",
        "keyId",
        "Nimiq",
        "Nimiq",
        "senderPubKeyBytes",
        "senderPubKey",
        "transaction",
        "senderAddress",
        "LedgerApi",
        "LedgerApi",
        "request",
        "Nimiq",
        "transaction",
        "genesisConfig",
        "Nimiq",
        "transaction",
        "Nimiq",
        "transaction",
        "Nimiq",
        "transaction",
        "transaction",
        "transaction",
        "nimiqTx",
        "Nimiq",
        "senderPubKey",
        "Nimiq",
        "recipient",
        "Nimiq",
        "value",
        "fee",
        "fee",
        "transaction",
        "Nimiq",
        "transaction",
        "networkId",
        "nimiqTx",
        "Nimiq",
        "senderPubKey",
        "recipient",
        "value",
        "fee",
        "transaction",
        "networkId",
        "requestParams",
        "nimiqTx",
        "LedgerApi",
        "request",
        "Nimiq",
        "Nimiq",
        "signatureBytes",
        "Nimiq",
        "senderPubKey",
        "signature",
        "transaction",
        "signatureBytes",
        "proof",
        "senderPubKeyBytes",
        "nimiqTx",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "request",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "request",
        "LedgerApi",
        "request",
        "resolve",
        "reject",
        "request",
        "LedgerApiRequest",
        "LedgerApi",
        "LedgerApi",
        "isConnected",
        "LedgerApi",
        "LedgerApi",
        "request",
        "reject",
        "request",
        "wasLocked",
        "LedgerApi",
        "isConnected",
        "request",
        "wasLocked",
        "request",
        "LedgerApi",
        "LedgerApi",
        "request",
        "api",
        "request",
        "LedgerApi",
        "LedgerApi",
        "request",
        "result",
        "resolve",
        "result",
        "e",
        "e",
        "e",
        "e",
        "wasLocked",
        "message",
        "message",
        "isConnected",
        "message",
        "message",
        "message",
        "reject",
        "e",
        "message",
        "message",
        "message",
        "message",
        "message",
        "e",
        "message",
        "LedgerApi",
        "message",
        "LedgerApi",
        "LedgerApi",
        "resolve2",
        "setTimeout",
        "resolve2",
        "waitTime",
        "LedgerApi",
        "LedgerApi",
        "request",
        "reject",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "api",
        "LedgerApi",
        "api",
        "LedgerApi",
        "version",
        "api",
        "e",
        "e",
        "e",
        "message",
        "LedgerApi",
        "LedgerApi",
        "e",
        "message",
        "message",
        "message",
        "LedgerApi",
        "LedgerApi",
        "message",
        "LedgerApi",
        "LedgerApi",
        "e",
        "message",
        "LedgerApi",
        "LedgerApi",
        "e",
        "e",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "LedgerApi",
        "LedgerJs",
        "LedgerJs",
        "transport",
        "e",
        "LedgerApi",
        "e",
        "LedgerApi",
        "keyId",
        "LedgerApi",
        "keyId",
        "versionString",
        "versionString",
        "part",
        "parseInt",
        "part",
        "i",
        "LedgerApi",
        "i",
        "version",
        "i",
        "version",
        "i",
        "LedgerApi",
        "i",
        "version",
        "i",
        "LedgerApi",
        "i",
        "state",
        "LedgerApi",
        "LedgerApi",
        "state",
        "state",
        "state",
        "state",
        "state",
        "LedgerApi",
        "LedgerApi",
        "state",
        "LedgerApi",
        "state",
        "LedgerApi",
        "state",
        "LedgerApi",
        "state",
        "LedgerApi",
        "state",
        "LedgerApi",
        "state",
        "LedgerApi",
        "state",
        "LedgerApi",
        "LedgerApi",
        "state",
        "LedgerApi",
        "error",
        "request",
        "LedgerApi",
        "LedgerApi",
        "error",
        "error",
        "error",
        "request",
        "state",
        "request",
        "LedgerApi",
        "state",
        "error",
        "error",
        "error",
        "eventName",
        "LedgerApi",
        "args",
        "LedgerApi",
        "eventName",
        "listenersForEvent",
        "listener",
        "listenersForEvent",
        "listener",
        "args",
        "LedgerApi",
        "EventType",
        "StateType",
        "RequestType",
        "ErrorType",
        "LedgerApi",
        "LedgerApi",
        "Nimiq",
        "LedgerApi"
    ],
    "literals": [
        "'@nimiq/ledgerjs/ledgerjs-nimiq.min.js'",
        "string",
        "string",
        "'main'",
        "'test'",
        "'bounty'",
        "'dev'",
        "string",
        "'cancel'",
        "string",
        "44'/242'/0'/",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "''",
        "''",
        "'Address mismatch'",
        "string",
        "''",
        "''",
        "'Sender Address doesn\\'t match this ledger account'",
        "'idle'",
        "'Only one call to Ledger at a time allowed'",
        "'Request cancelled'",
        "''",
        "'locked'",
        "'timeout'",
        "'denied'",
        "'rejected'",
        "'not supported'",
        "'timeout'",
        "'locked'",
        "'busy'",
        "'outdated'",
        "'dependencies'",
        "'Unknown Ledger Error'",
        "'timeout'",
        "'busy'",
        "'Request cancelled'",
        "'Ledger Nimiq App is outdated.'",
        "''",
        "'dependencies'",
        "'browser support'",
        "'u2f device_ineligible'",
        "'u2f other_error'",
        "'Ledger not supported by browser or support not enabled.'",
        "'outdated'",
        "'busy'",
        "string",
        "${LedgerApi.BIP32_BASE_PATH}${keyId}'",
        "string",
        "'.'",
        "'undefined'",
        "'string'",
        "string",
        "'string'",
        "'string'",
        "'state-change'",
        "'request-successful'",
        "'request-cancelled'",
        "'idle'",
        "'loading'",
        "'connecting'",
        "'request-processing'",
        "'request-cancelling'",
        "'error'",
        "'list-accounts'",
        "'get-public-key'",
        "'get-address'",
        "'confirm-address'",
        "'sign-transaction'",
        "'ledger-busy'",
        "'failed-loading-dependencies'",
        "'no-browser-support'",
        "'app-outdated'",
        "'request-specific-error'",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "LedgerJs",
        "result",
        "listenersForEvent",
        "index",
        "request",
        "result",
        "keyId",
        "startKeyId",
        "keyPath",
        "request",
        "result",
        "request",
        "result",
        "request",
        "result",
        "confirmedAddress",
        "address",
        "nimiqTx",
        "requestParams",
        "request",
        "result",
        "senderPubKeyBytes",
        "senderPubKey",
        "senderAddress",
        "genesisConfig",
        "networkId",
        "recipient",
        "value",
        "fee",
        "signatureBytes",
        "signature",
        "proof",
        "isConnected",
        "wasLocked",
        "api",
        "result",
        "message",
        "waitTime",
        "api",
        "version",
        "message",
        "transport",
        "version",
        "i",
        "state",
        "listenersForEvent"
    ],
    "comments": [
        "Some notes about the behaviour of the ledger:",
        "- The ledger only supports one call at a time.",
        "- If the browser doesn't support U2F, an exception gets thrown (\"U2F browser support is needed for Ledger\")",
        "- Firefox' implementation of U2F (when enabled in about:config) does not seem to be compatible with ledger and",
        "throws \"U2F DEVICE_INELIGIBLE\"",
        "- The browsers U2F API has a timeout after which the call fails in the browser. The timeout is about 30s",
        "- The Nimiq Ledger App avoids timeouts by keeping the call alive via a heartbeat when the Ledger is connected and the",
        "app opened. However when the Ledger is not connected or gets disconnected, timeouts still occur.",
        "- If the ledger is locked while the nimiq app (or another app throwing that same exception) was running, a \"dongle",
        "locked\" exception gets thrown. It does however not get thrown when the ledger was just being connected or when",
        "the ledger locks on the homescreen. (If I remember correctly, need to verify again).",
        "- If the ledger is busy with another call it throws an exception that it is busy. The ledger API however only knows,",
        "if the ledger is busy by another call from this same page (and same API instance?).",
        "- If we make another call while the other call is still ongoing and the ledger not detected as being busy, the",
        "heartbeat breaks and a timeout occurs.",
        "- Requests that were cancelled via request.cancel() are not actually cancelled on the ledger and keep the ledger",
        "busy until the request times out or the user confirms/declines.",
        "- If the ledger locks during a signTransaction request and the \"dongle locked\" exception gets thrown after some while",
        "and the user then unlocks the ledger again, the request data is gone or not displayed (amount, recipient, fee,",
        "network, extra data etc). If the user then rejects/confirms, the ledger freezes and can not be unfrozen. This does",
        "not occur with this api, as the api replaces that call after unlock.",
        "",
        "",
        "Notes about app versions < 1.3.1:",
        "- Versions < 1.3.1 did not have a heartbeat to avoid timeouts",
        "- For requests with display on the ledger, the ledger keeps displaying the request even if it timed out. When the",
        "user confirms or declines that request after the timeout the ledger ignores that and freezes on second press.",
        "- After a request timed out, it is possible to send a new request to the ledger essentially replacing the old",
        "request. If the ledger is still displaying the UI from the previous timed out request and the new request also has",
        "a UI, the old UI also gets replaced. The animation of the new request starts at the beginning.",
        "- Although a previous request can be replaced immediately after the timeout exception (no device busy exception gets",
        "thrown and the UI gets replaced), the buttons still seem to be assigned to the previous request if there is no",
        "wait time between the requests. Wait time <1s is too short. Wait times between 1s and 1.5s behave strange as the",
        "old request doesn't get replaced at all. 1.5s seems to be reliable. At that time, the signTransaction UI also",
        "forms a nice loop with the replaced UI.",
        "- If the user confirms or declines during the wait time nothing happens (or freeze at second button press) which",
        "is a bad user experience but there is nothing we can do about it.",
        "- If the ledger froze, it gets unfrozen by sending a new request. If the request has a UI, the UI gets displayed,",
        "otherwise the Nimiq app gets displayed. If the user confirms the new request, the app afterwards behaves normal.",
        "If he declines the request though, any request afterwards seems to time out and the nimiq ledger app needs to be",
        "restarted. This is a corner case that is not covered in this api.",
        "The following flows should be tested if changing this code:",
        "- ledger not connected yet",
        "- ledger connected",
        "- ledger was connected but relocked",
        "- ledger connected but in another app",
        "- ledger connected but with old app version",
        "- connect timed out",
        "- request timed out",
        "- user approved action on Ledger",
        "- user denied action on Ledger",
        "- user cancel in UI",
        "- user cancel and immediately make another request",
        "- ledger already handling another request (from another tab)",
        "tslint:disable-next-line:max-line-length",
        "TODO: change implementation to be flow typed, integrate into ledger-api repository and bundle with ledger provided flow libraries directly. LedgerJs:any type is just a temporary workaround",
        "tslint:disable-next-line:variable-name no-var-requires",
        "Base64",
        "trigger callback directly",
        "public fields and methods",
        "validate",
        "display",
        "validate",
        "display",
        "validate",
        "display",
        "validate",
        "display",
        "prepare tx outside of request to avoid that an error would result in an endless loop in _callLedger",
        "private fields and methods",
        "If the ledger is not connected, we can reject the call right away. Otherwise just notify that",
        "the request was requested to be cancelled such that the user can cancel the call on the ledger.",
        "when locked continue even when cancelled to replace call, see notes",
        "don't break on wasLocked to replace the call",
        "don't check wasLocked here as if cancelled should never resolve",
        "user cancelled call on ledger",
        "user rejected confirmAddress",
        "user rejected signTransaction",
        "Error we can't recover from",
        "no browser support",
        "On other errors try again",
        "Wait a little when replacing a previous request (see notes at top).",
        "If the API tells us that the ledger is busy (see notes at top) use a longer wait time to",
        "reduce the chance that we hit unfortunate 1.5s window after timeout of cancelled call",
        "For other exceptions wait a little to avoid busy endless loop for some exceptions.",
        "NO_BROWSER_SUPPORT is the only error we can't recover from. For others, we reset the state to IDLE.",
        "Resolves when connected to unlocked ledger with open Nimiq app otherwise throws an exception after timeout.",
        "If the Ledger is already connected and the library already loaded, the call typically takes < 250ms.",
        "To check whether the connection to Nimiq app is established. This can also unfreeze the ledger app, see",
        "notes at top. Using getPublicKey and not getAppConfiguration, as other apps also respond to",
        "getAppConfiguration. Set validate to false as otherwise the call is much slower.",
        "validate",
        "display",
        "on other errors (like timeout, dongle locked) that just keep the API retrying and not fire an error state",
        "we just rethrow the error.",
        "TODO: Lazy loading",
        "it's an entry from LedgerApi.StateType enum",
        "tslint:disable-line:no-namespace",
        "events appear at a single point of time while states reflect the current state of the api for a timespan ranging",
        "into the future. E.g. if a request was cancelled, a REQUEST_CANCELLED event gets thrown and the state changes to",
        "IDLE. Errors trigger an error state (e.g. when app outdated) and thus are a state, not an event.",
        "for LIST_ACCOUNTS",
        "for CONFIRM_TRANSACTION",
        "for SIGN_TRANSACTION"
    ],
    "docstrings": [],
    "functions": [
        "cancelled",
        "call",
        "cancel",
        "on",
        "currentState",
        "currentRequest",
        "isBusy",
        "on",
        "off",
        "listAccounts",
        "getPublicKey",
        "getAddress",
        "confirmAddress",
        "getConfirmedAddress",
        "signTransaction",
        "_callLedger",
        "_connect",
        "_getApi",
        "_getBip32PathForKey",
        "_isAppVersionSupported",
        "_setState",
        "_throwError",
        "_fire"
    ],
    "classes": [
        "LedgerApiRequest",
        "LedgerApi"
    ]
}