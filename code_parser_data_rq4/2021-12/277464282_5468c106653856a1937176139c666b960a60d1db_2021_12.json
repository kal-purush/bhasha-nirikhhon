{
    "identifiers": [
        "io",
        "helidon",
        "tracing",
        "jersey",
        "client",
        "java",
        "util",
        "io",
        "opentracing",
        "io",
        "opentracing",
        "tag",
        "Tags",
        "jakarta",
        "ws",
        "rs",
        "client",
        "ClientRequestContext",
        "jakarta",
        "ws",
        "rs",
        "client",
        "ClientResponseContext",
        "org",
        "glassfish",
        "jersey",
        "client",
        "spi",
        "PostInvocationInterceptor",
        "io",
        "helidon",
        "tracing",
        "jersey",
        "client",
        "ClientTracingFilter",
        "SPAN_PROPERTY_NAME",
        "Override",
        "requestContext",
        "responseContext",
        "Override",
        "requestContext",
        "exceptionContext",
        "property",
        "requestContext",
        "getProperty",
        "SPAN_PROPERTY_NAME",
        "property",
        "span",
        "Tags",
        "ERROR",
        "span",
        "span",
        "log",
        "of",
        "exceptionContext",
        "getThrowables",
        "pop",
        "span",
        "finish",
        "requestContext",
        "removeProperty",
        "SPAN_PROPERTY_NAME"
    ],
    "literals": [
        "\"event\"",
        "\"error\"",
        "\"message\"",
        "\"Exception executing client request: \"",
        "\"error.kind\"",
        "\"ClientError\""
    ],
    "variables": [],
    "comments": [
        "no-op"
    ],
    "docstrings": [
        "* Copyright (c) 2021 Oracle and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* A post-invocation client interceptor. If an exception (e.g. a connection timeout)\n * is thrown while executing a client request, this interceptor will ensure\n * that an active tracing span is properly finished --given that client response\n * filters will not be executed if an exception is thrown.",
        "* Upon encountering a client exception, and if there's an active span created by a\n     * tracing filter, finish the span.\n     *\n     * @param requestContext the request context\n     * @param exceptionContext the exception context"
    ],
    "functions": [
        "afterRequest",
        "onException"
    ],
    "classes": [
        "ClientTracingInterceptor"
    ]
}