{
    "identifiers": [
        "pyIGRF",
        "math",
        "datetime",
        "numpy",
        "np",
        "astropy",
        "coordinates",
        "EarthLocation",
        "astropy",
        "units",
        "u",
        "x_ecef",
        "t_jd",
        "u",
        "quantity",
        "Quantity",
        "x_ecef",
        "u",
        "km",
        "u",
        "quantity",
        "Quantity",
        "x_ecef",
        "u",
        "km",
        "u",
        "quanity",
        "Quantity",
        "x_ecef",
        "u",
        "km",
        "EarthLocation",
        "xq",
        "yq",
        "zq",
        "loc",
        "to_geodetic",
        "longitude",
        "value",
        "latitude",
        "value",
        "altitude",
        "value",
        "datetime",
        "timedelta",
        "days",
        "t_jd",
        "datetime",
        "datetime",
        "delta",
        "d",
        "strftime",
        "d",
        "strftime",
        "pyIGRF",
        "igrf_value",
        "lat",
        "lon",
        "alt",
        "decimal_date",
        "np",
        "array",
        "r",
        "r",
        "r",
        "vector",
        "np",
        "linalg",
        "norm",
        "vector",
        "mag_vector_ecef"
    ],
    "literals": [
        "\"%j\"",
        "\"%Y\""
    ],
    "variables": [
        "xq",
        "yq",
        "z1",
        "loc",
        "longitude",
        "latitude",
        "altitude",
        "lon",
        "lat",
        "alt",
        "delta",
        "d",
        "decimal_date",
        "r",
        "vector",
        "mag_vector_ecef"
    ],
    "comments": [
        "imports",
        "INPUTS: x_ecef: position in km in ecef frame, [x y z]",
        "INPUTS: t_jd: julian date (days since noon on Jan 1 2000)",
        "OUTPUT: B_ecef: magnetic field in microtesla",
        "convert ecef to latitude and longitude",
        "longitude in degrees",
        "latitude in degrees",
        "altitude in km",
        "get decimal date",
        "convert julian date to delta in days",
        "will depend on epoch -- currently using jd2000",
        "get magnetic field in ecef frame",
        "get magnetic field parameters",
        "save north, east, and vertical components of magnetic field in nT",
        "normalize"
    ],
    "docstrings": [],
    "functions": [
        "igrf_mag_vector_ecef"
    ],
    "classes": []
}