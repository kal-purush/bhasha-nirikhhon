{
    "identifiers": [
        "unittest",
        "timeit",
        "os",
        "numpy",
        "np",
        "_matrix",
        "unittest",
        "TestCase",
        "size",
        "_matrix",
        "Matrix",
        "size",
        "size",
        "_matrix",
        "Matrix",
        "size",
        "size",
        "_matrix",
        "Matrix",
        "size",
        "size",
        "it",
        "size",
        "jt",
        "size",
        "it",
        "size",
        "jt",
        "it",
        "size",
        "jt",
        "mat1",
        "mat2",
        "mat3",
        "_",
        "make_matrices",
        "size",
        "assertEqual",
        "size",
        "mat1",
        "nrow",
        "assertEqual",
        "size",
        "mat1",
        "ncol",
        "assertEqual",
        "size",
        "mat2",
        "nrow",
        "assertEqual",
        "size",
        "mat2",
        "ncol",
        "assertEqual",
        "size",
        "mat3",
        "nrow",
        "assertEqual",
        "size",
        "mat3",
        "ncol",
        "assertEqual",
        "mat1",
        "assertEqual",
        "size",
        "mat1",
        "assertEqual",
        "size",
        "mat1",
        "size",
        "assertEqual",
        "size",
        "size",
        "mat1",
        "size",
        "size",
        "i",
        "mat1",
        "nrow",
        "j",
        "mat1",
        "ncol",
        "assertNotEqual",
        "mat1",
        "i",
        "j",
        "assertEqual",
        "mat1",
        "i",
        "j",
        "mat2",
        "i",
        "j",
        "assertEqual",
        "mat3",
        "i",
        "j",
        "assertEqual",
        "mat1",
        "mat2",
        "assertTrue",
        "mat1",
        "mat2",
        "_matrix",
        "Matrix",
        "size",
        "size",
        "it",
        "size",
        "jt",
        "size",
        "it",
        "size",
        "jt",
        "i",
        "size",
        "j",
        "size",
        "assertNotEqual",
        "mat",
        "i",
        "j",
        "assertTrue",
        "isinstance",
        "mat",
        "array",
        "np",
        "ndarray",
        "assertEqual",
        "size",
        "size",
        "mat",
        "array",
        "shape",
        "assertEqual",
        "np",
        "dtype",
        "mat",
        "array",
        "dtype",
        "mat",
        "array",
        "fill",
        "i",
        "size",
        "j",
        "size",
        "assertEqual",
        "mat",
        "i",
        "j",
        "_",
        "make_matrices",
        "size",
        "_matrix",
        "multiply_naive",
        "mat1",
        "mat2",
        "_matrix",
        "multiply_mkl",
        "mat1",
        "mat2",
        "assertEqual",
        "size",
        "ret_naive",
        "nrow",
        "assertEqual",
        "size",
        "ret_naive",
        "ncol",
        "assertEqual",
        "size",
        "ret_mkl",
        "nrow",
        "assertEqual",
        "size",
        "ret_mkl",
        "ncol",
        "i",
        "ret_naive",
        "nrow",
        "j",
        "ret_naive",
        "ncol",
        "assertNotEqual",
        "mat1",
        "i",
        "j",
        "ret_mkl",
        "i",
        "j",
        "assertEqual",
        "ret_naive",
        "i",
        "j",
        "ret_mkl",
        "i",
        "j",
        "_",
        "make_matrices",
        "size",
        "_matrix",
        "multiply_naive",
        "mat1",
        "mat3",
        "_matrix",
        "multiply_mkl",
        "mat1",
        "mat3",
        "assertEqual",
        "size",
        "ret_naive",
        "nrow",
        "assertEqual",
        "size",
        "ret_naive",
        "ncol",
        "assertEqual",
        "size",
        "ret_mkl",
        "nrow",
        "assertEqual",
        "size",
        "ret_mkl",
        "ncol",
        "i",
        "ret_naive",
        "nrow",
        "j",
        "ret_naive",
        "ncol",
        "assertEqual",
        "ret_naive",
        "i",
        "j",
        "assertEqual",
        "ret_mkl",
        "i",
        "j"
    ],
    "literals": [
        "'float64'"
    ],
    "variables": [
        "mat1",
        "mat2",
        "mat3",
        "mat1",
        "it",
        "jt",
        "mat2",
        "it",
        "jt",
        "mat3",
        "it",
        "jt",
        "size",
        "mat1",
        "mat2",
        "mat3",
        "size",
        "mat",
        "mat",
        "it",
        "jt",
        "size",
        "mat1",
        "mat2",
        "ret_naive",
        "ret_mkl",
        "size",
        "mat1",
        "mat2",
        "mat3",
        "ret_naive",
        "ret_mkl"
    ],
    "comments": [
        "!/bin/bash",
        "The python module that wraps the matrix code.",
        "vim: set fenc=utf8 ff=unix et sw=4 ts=4 sts=4:"
    ],
    "docstrings": [
        "''':'\nexport PYTHONPATH=\".:$PYTHONPATH\"\nexport VECLIB_MAXIMUM_THREADS=1\nexport MKL_NUM_THREADS=1\nexport NUMEXPR_NUM_THREADS=1\nexport OMP_NUM_THREADS=1\n\nif [ -f \"PRELOAD_MKL\" ] ; then\n    PRELOAD_MKL=1\nfi\n\ntest_path=\"${BASH_SOURCE[0]}\"\n\nif [[ (-n \"$PRELOAD_MKL\") && (\"Linux\" == \"$(uname)\") ]] ; then\n    # Workaround for cmake + MKL in conda.\n    MKL_LIB_DIR=/usr/lib/x86_64-linux-gnu\n    MKL_LIBS=$MKL_LIB_DIR/libmkl_def.so\n    MKL_LIBS=$MKL_LIBS:$MKL_LIB_DIR/libmkl_avx2.so\n    MKL_LIBS=$MKL_LIBS:$MKL_LIB_DIR/libmkl_core.so\n    MKL_LIBS=$MKL_LIBS:$MKL_LIB_DIR/libmkl_intel_lp64.so\n    MKL_LIBS=$MKL_LIBS:$MKL_LIB_DIR/libmkl_sequential.so\n    export LD_PRELOAD=$MKL_LIBS\n    echo \"INFO: set LD_PRELOAD=$LD_PRELOAD for MKL\"\nelse\n    echo \"INFO: set PRELOAD_MKL if you see (Linux) MKL linking error\"\nfi\n\nfail_msg=\"*** validation failed\"\n\necho \"INFO: 'make clean' must work\"\nmake clean ; ret=$?\nif [ 0 -ne $ret ] ; then echo \"$fail_msg\" ; exit $ret ; fi\n\nif [ -n \"$(ls _matrix*.so 2> /dev/null)\" ] ; then\n    echo \"$fail_msg for uncleanness\"\n    exit 1\nfi\necho \"GET POINT 1\"\n\necho \"INFO: 'make' must work\"\nmake ; ret=$?\nif [ 0 -ne $ret ] ; then echo \"$fail_msg\" ; exit $ret ; fi\necho \"GET POINT 1\"\n\necho \"INFO: validate using pytest\"\npython3 -m pytest $test_path -v -s ; ret=$?\nif [ 0 -ne $ret ] ; then echo \"$fail_msg\" ; exit $ret ; fi\necho \"GET POINT 3\"\n\nexit 0\n':'''"
    ],
    "functions": [
        "make_matrices",
        "test_basic",
        "test_ndarray",
        "test_match",
        "test_zero"
    ],
    "classes": [
        "GradingTest"
    ]
}