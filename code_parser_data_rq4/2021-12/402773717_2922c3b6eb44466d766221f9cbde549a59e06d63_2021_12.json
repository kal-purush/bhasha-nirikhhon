{
    "identifiers": [
        "datetime",
        "numpy",
        "np",
        "pandas",
        "pd",
        "random",
        "tensorflow",
        "tf",
        "time",
        "torch",
        "matplotlib",
        "pyplot",
        "plt",
        "seaborn",
        "sns",
        "transformers",
        "BertTokenizer",
        "BertForTokenClassification",
        "AdamW",
        "BertConfig",
        "get_linear_schedule_with_warmup",
        "torch",
        "utils",
        "data",
        "TensorDataset",
        "DataLoader",
        "RandomSampler",
        "SequentialSampler",
        "random_split",
        "model_name",
        "model_name",
        "torch",
        "cuda",
        "is_available",
        "torch",
        "device",
        "torch",
        "cuda",
        "device_count",
        "torch",
        "cuda",
        "get_device_name",
        "torch",
        "device",
        "BertTokenizer",
        "from_pretrained",
        "model_name",
        "data",
        "doc_ids",
        "doc_id",
        "doc_ids",
        "token",
        "token",
        "data",
        "loc",
        "data",
        "doc_id",
        "to_list",
        "tag",
        "tag",
        "data",
        "loc",
        "data",
        "doc_id",
        "to_list",
        "index",
        "len",
        "sentence_tokens",
        "new_sentence_tokens",
        "append",
        "sentence_tokens",
        "index",
        "new_sentence_labels",
        "append",
        "sentence_labels",
        "index",
        "sentence_tokens",
        "index",
        "new_sentences",
        "append",
        "new_sentence_tokens",
        "new_labels",
        "append",
        "new_sentence_labels",
        "len",
        "new_sentence_tokens",
        "new_sentences",
        "append",
        "new_sentence_tokens",
        "new_labels",
        "append",
        "new_sentence_labels",
        "new_sentences",
        "new_labels",
        "sentences",
        "sententce_max_length",
        "sentence",
        "sentences",
        "token",
        "sentence",
        "sentence_black_list",
        "append",
        "tokenizer",
        "tokenize",
        "token",
        "i",
        "len",
        "bert_tokens",
        "bert_tokens",
        "i",
        "sentence_black_list",
        "append",
        "black_lists",
        "append",
        "sentence_black_list",
        "join",
        "sentence",
        "tokenizer",
        "encode_plus",
        "sentence",
        "add_special_tokens",
        "max_length",
        "sententce_max_length",
        "return_attention_mask",
        "pad_to_max_length",
        "return_tensors",
        "truncation",
        "input_ids",
        "append",
        "encoded_output",
        "attention_masks",
        "append",
        "encoded_output",
        "input_ids",
        "attention_masks",
        "black_lists",
        "input_ids",
        "original_labels",
        "black_lists",
        "sentence",
        "tags",
        "sentence_black_list",
        "input_ids",
        "original_labels",
        "black_lists",
        "token_id",
        "sentence",
        "token_id",
        "numpy",
        "item",
        "token_id",
        "tokenizer",
        "cls_token_id",
        "token_id",
        "tokenizer",
        "pad_token_id",
        "token_id",
        "tokenizer",
        "sep_token_id",
        "sentence_labels",
        "append",
        "null_label_id",
        "tokenizer",
        "ids_to_tokens",
        "token_id",
        "sentence_labels",
        "append",
        "null_label_id",
        "sentence_black_list",
        "black_list_index",
        "sentence_labels",
        "append",
        "null_label_id",
        "black_list_index",
        "sentence_labels",
        "append",
        "labels_map",
        "tags",
        "tag_index",
        "tag_index",
        "black_list_index",
        "len",
        "sentence",
        "len",
        "sentence_labels",
        "new_labels",
        "append",
        "sentence_labels",
        "new_labels",
        "sentence",
        "train_sentences",
        "join",
        "sentence",
        "tokenizer",
        "encode",
        "sentence",
        "add_special_tokens",
        "sentences_lengths",
        "append",
        "len",
        "encoded_sent",
        "format",
        "min",
        "sentences_lengths",
        "format",
        "max",
        "sentences_lengths",
        "format",
        "np",
        "median",
        "sentences_lengths",
        "file_name",
        "valid_file_name",
        "pd",
        "read_csv",
        "file_name",
        "valid_file_name",
        "train_data",
        "append",
        "pd",
        "read_csv",
        "valid_file_name",
        "train_data",
        "drop_duplicates",
        "to_list",
        "train_sentences",
        "train_labels",
        "init_sentences_with_labels",
        "train_data",
        "train_doc_ids",
        "sententce_max_length",
        "train_input_ids",
        "train_attention_masks",
        "train_black_lists",
        "init_input_ids_with_attention_masks",
        "train_sentences",
        "sententce_max_length",
        "init_bert_labels",
        "train_input_ids",
        "train_labels",
        "train_black_lists",
        "TensorDataset",
        "torch",
        "stack",
        "train_input_ids",
        "dim",
        "torch",
        "stack",
        "train_attention_masks",
        "dim",
        "torch",
        "tensor",
        "train_bert_labels",
        "dtype",
        "torch",
        "file_name",
        "pd",
        "read_csv",
        "file_name",
        "valid_data",
        "drop_duplicates",
        "to_list",
        "valid_sentences",
        "valid_labels",
        "init_sentences_with_labels",
        "valid_data",
        "valid_doc_ids",
        "sententce_max_length",
        "valid_input_ids",
        "valid_attention_masks",
        "valid_black_lists",
        "init_input_ids_with_attention_masks",
        "valid_sentences",
        "sententce_max_length",
        "init_bert_labels",
        "valid_input_ids",
        "valid_labels",
        "valid_black_lists",
        "batch_size",
        "TensorDataset",
        "torch",
        "stack",
        "valid_input_ids",
        "dim",
        "torch",
        "stack",
        "valid_attention_masks",
        "dim",
        "SequentialSampler",
        "valid_dataset",
        "DataLoader",
        "valid_dataset",
        "sampler",
        "valid_sampler",
        "batch_size",
        "batch_size",
        "file_name",
        "pd",
        "read_csv",
        "file_name",
        "test_data",
        "assign",
        "Tag",
        "test_data",
        "drop_duplicates",
        "to_list",
        "test_sentences",
        "test_labels",
        "init_sentences_with_labels",
        "test_data",
        "test_doc_ids",
        "sententce_max_length",
        "test_input_ids",
        "test_attention_masks",
        "test_black_lists",
        "init_input_ids_with_attention_masks",
        "test_sentences",
        "sententce_max_length",
        "init_bert_labels",
        "test_input_ids",
        "test_labels",
        "test_black_lists",
        "batch_size",
        "TensorDataset",
        "torch",
        "stack",
        "test_input_ids",
        "dim",
        "torch",
        "stack",
        "test_attention_masks",
        "dim",
        "SequentialSampler",
        "test_dataset",
        "DataLoader",
        "test_dataset",
        "sampler",
        "test_sampler",
        "batch_size",
        "batch_size",
        "batch_size",
        "dataset",
        "DataLoader",
        "dataset",
        "sampler",
        "RandomSampler",
        "dataset",
        "batch_size",
        "batch_size",
        "BertForTokenClassification",
        "from_pretrained",
        "model_name",
        "num_labels",
        "len",
        "labels_map",
        "output_attentions",
        "output_hidden_states",
        "model",
        "cuda",
        "epochs",
        "AdamW",
        "model",
        "parameters",
        "lr",
        "eps",
        "get_linear_schedule_with_warmup",
        "optimizer",
        "num_warmup_steps",
        "num_training_steps",
        "len",
        "train_dataloader",
        "epochs",
        "train_model",
        "model",
        "epochs",
        "train_dataloader",
        "optimizer",
        "scheduler",
        "device",
        "prediction_dataloader",
        "model",
        "eval",
        "batch",
        "prediction_dataloader",
        "t",
        "to",
        "device",
        "t",
        "batch",
        "batch",
        "torch",
        "no_grad",
        "model",
        "input_ids",
        "token_type_ids",
        "attention_mask",
        "input_mask",
        "return_dict",
        "result",
        "logits",
        "logits",
        "detach",
        "cpu",
        "numpy",
        "predictions",
        "append",
        "logits",
        "predictions",
        "predictions",
        "labels",
        "np",
        "concatenate",
        "predictions",
        "axis",
        "np",
        "argmax",
        "all_predictions",
        "axis",
        "np",
        "concatenate",
        "predicted_label_ids",
        "axis",
        "np",
        "concatenate",
        "labels",
        "axis",
        "format",
        "len",
        "predicted_label_ids",
        "index",
        "len",
        "all_true_labels",
        "all_true_labels",
        "index",
        "real_predictions",
        "append",
        "predicted_label_ids",
        "index",
        "format",
        "len",
        "real_predictions",
        "reversed_labels_map",
        "pred",
        "pred",
        "real_predictions",
        "predictions",
        "sentence",
        "predictions",
        "index_token",
        "len",
        "sentence",
        "index_token",
        "sentence_final_predictions",
        "index_token",
        "labels_map",
        "sentence",
        "index_token",
        "labels_map",
        "sentence",
        "index_token",
        "labels_map",
        "sentence_final_predictions",
        "index_token",
        "labels_map",
        "sentence",
        "index_token",
        "labels_map",
        "sentence_final_predictions",
        "index_token",
        "labels_map",
        "sentence",
        "index_token",
        "labels_map",
        "sentence",
        "index_token",
        "labels_map",
        "np",
        "where",
        "sentence",
        "index_token",
        "np",
        "amax",
        "sentence",
        "index_token",
        "sentence_final_predictions",
        "append",
        "result",
        "final_predictions",
        "append",
        "sentence_final_predictions",
        "final_predictions",
        "file_name",
        "token_ids",
        "predictions",
        "pd",
        "DataFrame",
        "token_ids",
        "predictions",
        "sumbission_dataframe",
        "to_csv",
        "file_name",
        "index",
        "loss_values",
        "sns",
        "style",
        "sns",
        "font_scale",
        "plt",
        "rcParams",
        "plt",
        "plot",
        "loss_values",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "elapsed",
        "round",
        "elapsed",
        "datetime",
        "timedelta",
        "seconds",
        "elapsed_rounded",
        "model",
        "epochs",
        "train_dataloader",
        "optimizer",
        "scheduler",
        "device",
        "random",
        "seed",
        "seed_val",
        "np",
        "random",
        "seed",
        "seed_val",
        "torch",
        "manual_seed",
        "seed_val",
        "torch",
        "cuda",
        "manual_seed_all",
        "seed_val",
        "epoch_i",
        "epochs",
        "format",
        "epoch_i",
        "epochs",
        "time",
        "time",
        "model",
        "train",
        "step",
        "batch",
        "train_dataloader",
        "step",
        "step",
        "format_time",
        "time",
        "time",
        "t0",
        "format",
        "step",
        "len",
        "train_dataloader",
        "elapsed",
        "batch",
        "to",
        "device",
        "batch",
        "to",
        "device",
        "batch",
        "to",
        "device",
        "model",
        "zero_grad",
        "model",
        "b_input_ids",
        "token_type_ids",
        "attention_mask",
        "b_input_mask",
        "labels",
        "b_labels",
        "result",
        "loss",
        "total_loss",
        "loss",
        "item",
        "loss",
        "backward",
        "torch",
        "nn",
        "utils",
        "clip_grad_norm_",
        "model",
        "parameters",
        "optimizer",
        "step",
        "scheduler",
        "step",
        "total_loss",
        "len",
        "train_dataloader",
        "loss_values",
        "append",
        "avg_train_loss",
        "format",
        "avg_train_loss",
        "format",
        "format_time",
        "time",
        "time",
        "t0",
        "loss_values"
    ],
    "literals": [
        "\"cuda\"",
        "'There are %d GPU(s) available.'",
        "'We will use the GPU:'",
        "'No GPU available, using the CPU instead.'",
        "\"cpu\"",
        "'B'",
        "'I'",
        "'L'",
        "'U'",
        "'O'",
        "'B'",
        "'I'",
        "'L'",
        "'U'",
        "'O'",
        "'Token'",
        "'DocID'",
        "'Tag'",
        "'DocID'",
        "'.'",
        "'Generating input ids for all the tokens according to BERT ...'",
        "'##'",
        "' '",
        "'pt'",
        "'input_ids'",
        "'attention_mask'",
        "'Done!'",
        "'##'",
        "'Calculating the lengths of sentences according to BERT ...'",
        "' '",
        "'   Min length: {:,} tokens'",
        "'   Max length: {:,} tokens'",
        "'Median length: {:,} tokens'",
        "'Done!'",
        "'DocID'",
        "'DocID'",
        "'N'",
        "'DocID'",
        "'Starting computing predictions ...'",
        "'Done!'",
        "\"Before filtering out `null` tokens, length = {:,}\"",
        "\"After filtering out `null` tokens, length = {:,}\"",
        "'B'",
        "'U'",
        "'-inf'",
        "'O'",
        "'-inf'",
        "'I'",
        "'B'",
        "'-inf'",
        "'O'",
        "'L'",
        "'-inf'",
        "'I'",
        "'-inf'",
        "'TokenID'",
        "'Tag'",
        "'darkgrid'",
        "\"figure.figsize\"",
        "'b-o'",
        "\"Training loss\"",
        "\"Epoch\"",
        "\"Loss\"",
        "\"\"",
        "'======== Epoch {:} / {:} ========'",
        "'Training...'",
        "'  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'",
        "\"\"",
        "\"  Average training loss: {0:.2f}\"",
        "\"  Training epcoh took: {:}\"",
        "\"\"",
        "\"Training complete!\""
    ],
    "variables": [
        "model_name",
        "model",
        "device",
        "device",
        "train_data",
        "train_sentences",
        "train_doc_ids",
        "train_labels",
        "train_input_ids",
        "train_attention_masks",
        "train_bert_labels",
        "train_black_lists",
        "train_dataloader",
        "valid_data",
        "valid_sentences",
        "valid_doc_ids",
        "valid_labels",
        "valid_input_ids",
        "valid_attention_masks",
        "valid_bert_labels",
        "valid_black_lists",
        "valid_dataloader",
        "test_data",
        "test_sentences",
        "test_doc_ids",
        "test_labels",
        "test_input_ids",
        "test_attention_masks",
        "test_bert_labels",
        "test_black_lists",
        "test_dataloader",
        "labels_map",
        "reversed_labels_map",
        "tokenizer",
        "new_sentences",
        "new_labels",
        "sentence_tokens",
        "sentence_labels",
        "index",
        "new_sentence_tokens",
        "new_sentence_labels",
        "new_sentence_tokens",
        "new_sentence_labels",
        "input_ids",
        "attention_masks",
        "black_lists",
        "sentence_black_list",
        "bert_tokens",
        "sentence",
        "encoded_output",
        "new_labels",
        "null_label_id",
        "sentence_labels",
        "tag_index",
        "black_list_index",
        "token_id",
        "sentences_lengths",
        "sentence",
        "encoded_sent",
        "train_data",
        "train_data",
        "train_doc_ids",
        "train_bert_labels",
        "valid_data",
        "valid_doc_ids",
        "valid_bert_labels",
        "valid_dataset",
        "valid_sampler",
        "test_data",
        "test_data",
        "test_doc_ids",
        "test_bert_labels",
        "test_dataset",
        "test_sampler",
        "train_dataloader",
        "model",
        "optimizer",
        "scheduler",
        "predictions",
        "batch",
        "input_ids",
        "input_mask",
        "result",
        "logits",
        "logits",
        "all_predictions",
        "predicted_label_ids",
        "predicted_label_ids",
        "all_true_labels",
        "real_predictions",
        "final_predictions",
        "sentence_final_predictions",
        "result",
        "sumbission_dataframe",
        "elapsed_rounded",
        "seed_val",
        "loss_values",
        "t0",
        "total_loss",
        "elapsed",
        "b_input_ids",
        "b_input_mask",
        "b_labels",
        "result",
        "loss",
        "avg_train_loss"
    ],
    "comments": [
        "If there's a GPU available",
        "If none GPU device was found",
        "Get the value of the token.",
        "Load BertForTokenClassification",
        "Load the AdamW optimizer",
        "Create the learning rate scheduler.",
        "Add batch to GPU",
        "Unpack the inputs from our dataloader",
        "Telling the model not to compute or store gradients, saving memory and",
        "speeding up prediction",
        "Forward pass, calculate logit predictions",
        "Move logits and labels to CPU",
        "Store predictions and true labels",
        "def analyze_prediction(all_predictions, index):",
        "possibilities = [",
        "{",
        "'prev': [2, 3, 4],",
        "'next': [1, 2, 3]",
        "},",
        "{",
        "'prev': [0, 1, 3],",
        "'next': [1, 2, 3]",
        "},",
        "{",
        "'prev': [0, 1, 3],",
        "'next': [0, 3, 4]",
        "},",
        "{",
        "'prev': [2, 3, 4],",
        "'next': [0, 4, 3]",
        "},",
        "{",
        "'prev': [2, 3, 4],",
        "'next': [0, 3, 4]",
        "},",
        "{",
        "'prev': [0, 1, 2, 3, 4],",
        "'next': [0, 1, 2, 3, 4]",
        "}",
        "]",
        "token_prediction = all_predictions[index].copy()",
        "if index != 0 and index + 1 < len(all_predictions):",
        "next_token_prediction = all_predictions[index + 1]",
        "prev_token_prediction = all_predictions[index - 1]",
        "prev_next_predictions_sum = sum(next_token_prediction) + sum(prev_token_prediction)",
        "for label in range(len(token_prediction)):",
        "new_prediction = 0",
        "for prev_element in possibilities[label]['prev']:",
        "new_prediction += prev_token_prediction[prev_element] / prev_next_predictions_sum",
        "for next_element in possibilities[label]['next']:",
        "new_prediction += next_token_prediction[next_element] / prev_next_predictions_sum",
        "token_prediction[label] = new_prediction * token_prediction[label]",
        "return np.where(token_prediction == np.amax(token_prediction))[0][0]",
        "The code below is taken from the tutorial presented in class.",
        "Use plot styling from seaborn.",
        "Increase the plot size and font size.",
        "Plot the learning curve.",
        "Label the plot.",
        "Round to the nearest second.",
        "Format as hh:mm:ss",
        "This training code is based on the `run_glue.py` script here:",
        "https://github.com/huggingface/transformers/blob/5bfcd0485ece086ebcbed2d008813037968a9e58/examples/run_glue.py#L128",
        "Set the seed value all over the place to make this reproducible.",
        "Store the average loss after each epoch so we can plot them.",
        "For each epoch...",
        "========================================",
        "Training",
        "========================================",
        "Perform one full pass over the training set.",
        "Measure how long the training epoch takes.",
        "Reset the total loss for this epoch.",
        "Put the model into training mode. Don't be mislead--the call to",
        "`train` just changes the *mode*, it doesn't *perform* the training.",
        "`dropout` and `batchnorm` layers behave differently during training",
        "vs. test (source: https://stackoverflow.com/questions/51433378/what-does-model-train-do-in-pytorch)",
        "For each batch of training data...",
        "Progress update every 40 batches.",
        "Calculate elapsed time in minutes.",
        "Report progress.",
        "Unpack this training batch from our dataloader.",
        "",
        "As we unpack the batch, we'll also copy each tensor to the GPU using the",
        "`to` method.",
        "",
        "`batch` contains three pytorch tensors:",
        "[0]: input ids",
        "[1]: attention masks",
        "[2]: labels",
        "Always clear any previously calculated gradients before performing a",
        "backward pass. PyTorch doesn't do this automatically because",
        "accumulating the gradients is \"convenient while training RNNs\".",
        "(source: https://stackoverflow.com/questions/48001598/why-do-we-need-to-call-zero-grad-in-pytorch)",
        "In PyTorch, calling `model` will in turn call the model's `forward`",
        "function and pass down the arguments. The `forward` function is",
        "documented here:",
        "https://huggingface.co/transformers/model_doc/bert.html#bertfortokenclassification",
        "The results are returned in a results object, documented here:",
        "https://huggingface.co/transformers/main_classes/output.html#transformers.modeling_outputs.TokenClassifierOutput",
        "Accumulate the training loss over all of the batches so that we can",
        "calculate the average loss at the end. `loss` is a Tensor containing a",
        "single value; the `.item()` function just returns the Python value",
        "from the tensor.",
        "Perform a backward pass to calculate the gradients.",
        "Clip the norm of the gradients to 1.0.",
        "This is to help prevent the \"exploding gradients\" problem.",
        "Update parameters and take a step using the computed gradient.",
        "The optimizer dictates the \"update rule\"--how the parameters are",
        "modified based on their gradients, the learning rate, etc.",
        "Update the learning rate.",
        "Calculate the average loss over the training data.",
        "Store the loss value for plotting the learning curve."
    ],
    "docstrings": [
        "'''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''"
    ],
    "functions": [
        "init_sentences_with_labels",
        "init_input_ids_with_attention_masks",
        "init_bert_labels",
        "analyze_train_sentences_lengths",
        "load_train_data",
        "prepare_train_data",
        "get_train_tensor_dataset",
        "load_valid_data",
        "prepare_valid_data",
        "get_valid_dataloader",
        "load_test_data",
        "prepare_test_data",
        "get_test_dataloader",
        "init_model",
        "train_model",
        "get_predictions",
        "convert_bert_predictions_to_precited_labels",
        "post_process_predictions",
        "write_to_submission_file",
        "print_model_loss_values_plot",
        "format_time",
        "train_model"
    ],
    "classes": [
        "BertModel"
    ]
}