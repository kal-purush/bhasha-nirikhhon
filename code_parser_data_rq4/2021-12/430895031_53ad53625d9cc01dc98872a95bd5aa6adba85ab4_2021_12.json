{
    "identifiers": [
        "java",
        "io",
        "java",
        "util",
        "java",
        "math",
        "BigInteger",
        "args",
        "file",
        "fileout",
        "dec",
        "d",
        "n",
        "lic",
        "fileout",
        "args",
        "length",
        "file",
        "args",
        "dec",
        "args",
        "sc",
        "dec",
        "temp",
        "sc",
        "nextLine",
        "arroftemp",
        "temp",
        "split",
        "d",
        "arroftemp",
        "arroftemp",
        "length",
        "temp",
        "sc",
        "nextLine",
        "arroftemp",
        "temp",
        "split",
        "n",
        "arroftemp",
        "arroftemp",
        "length",
        "e",
        "e",
        "printStackTrace",
        "fr",
        "file",
        "block",
        "p",
        "fr",
        "hasNextLine",
        "block",
        "fr",
        "nextLine",
        "trim",
        "c",
        "block",
        "p",
        "c",
        "modPow",
        "d",
        "n",
        "p",
        "temp",
        "p",
        "toString",
        "temp",
        "length",
        "temp",
        "temp",
        "temp",
        "length",
        "temp",
        "temp",
        "temp",
        "length",
        "temp",
        "temp",
        "temp",
        "length",
        "temp",
        "temp",
        "temp",
        "length",
        "temp",
        "temp",
        "temp",
        "length",
        "temp",
        "temp",
        "ii",
        "ii",
        "temp",
        "length",
        "ii",
        "ii",
        "temp2",
        "codeToText",
        "toString",
        "temp",
        "charAt",
        "ii",
        "toString",
        "temp",
        "charAt",
        "ii",
        "temp2",
        "lic",
        "temp2",
        "block",
        "lic",
        "close",
        "a",
        "output",
        "a",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output",
        "output"
    ],
    "literals": [
        "\"test.enc\"",
        "\"test.dec\"",
        "\"pri_key.txt\"",
        "\"0\"",
        "\"0\"",
        "\" \"",
        "\" \"",
        "\"\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"0\"",
        "\"\"",
        "\"\"",
        "\"00\"",
        "\"0\"",
        "\"a\"",
        "\"01\"",
        "\"1\"",
        "\"b\"",
        "\"02\"",
        "\"2\"",
        "\"c\"",
        "\"03\"",
        "\"3\"",
        "\"d\"",
        "\"04\"",
        "\"4\"",
        "\"e\"",
        "\"05\"",
        "\"5\"",
        "\"f\"",
        "\"06\"",
        "\"6\"",
        "\"g\"",
        "\"07\"",
        "\"7\"",
        "\"h\"",
        "\"08\"",
        "\"8\"",
        "\"i\"",
        "\"09\"",
        "\"9\"",
        "\"j\"",
        "\"10\"",
        "\"k\"",
        "\"11\"",
        "\"l\"",
        "\"12\"",
        "\"m\"",
        "\"13\"",
        "\"n\"",
        "\"14\"",
        "\"o\"",
        "\"15\"",
        "\"p\"",
        "\"16\"",
        "\"q\"",
        "\"17\"",
        "\"r\"",
        "\"18\"",
        "\"s\"",
        "\"19\"",
        "\"t\"",
        "\"20\"",
        "\"u\"",
        "\"21\"",
        "\"v\"",
        "\"22\"",
        "\"w\"",
        "\"23\"",
        "\"x\"",
        "\"24\"",
        "\"y\"",
        "\"25\"",
        "\"z\"",
        "\"26\"",
        "\" \""
    ],
    "variables": [],
    "comments": [
        "File should be located in the same folder for the java code to be able to",
        "read the file.",
        "Content collects the characters in the file char by char",
        "i helps break up the files by 3 bits or 3 characters."
    ],
    "docstrings": [
        "ry(FileReader fr = new FileReader(file))\n        {\n            // Content collects the characters in the file char by char\n            // i helps break up the files by 3 bits or 3 characters.\n        \tString block =\"\";\n        \tBigInteger p= new BigInteger(\"0\");;\n            int content;\n            int i = 0;\n            while((content = fr.read()) != -1){\n            \tcontent = Integer.parseInt(Character.toString((char)content));\n                if((i % 6) == 0 && (i != 0)){\n                \tSystem.out.println(\" : \" + i);\n                \tBigInteger c = new BigInteger(block);\n                \tp = c.modPow(d, n);\n                \tSystem.out.println(p);\n                \tString temp = Integer.toString(p.intValue());\n                \tif (temp.length() == 1) {\n                \t\ttemp = \"0\"+temp;\n                \t}\n                \t\n                \tfor (int ii = 0 ; ii<temp.length()-1; ii=ii+2) {\n                \t\tString temp2 = codeToText(Character.toString(temp.charAt(ii))) + codeToText(Character.toString(temp.charAt(ii+1)));\n                \t\tSystem.out.println(temp2);\n                \t\tlic.print(temp2);\n                \t}\n                \tblock = \"\";\n                }\n                \n                    // adding (char) next to content helps the variable be read as a character\n                    //System.out.print((char)content);\n                    System.out.print(content + \",\");\n                \tblock += content;\n                    i++;\n            }\n        }   catch (IOException e){\n            e.printStackTrace();\n        }\n        \n        lic.close();"
    ],
    "functions": [
        "main",
        "codeToText"
    ],
    "classes": [
        "RSADecrypt"
    ]
}