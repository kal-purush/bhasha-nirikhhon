{
    "identifiers": [
        "sys",
        "board",
        "i",
        "len",
        "board",
        "board",
        "i",
        "index",
        "ret",
        "append",
        "i",
        "colIdx",
        "ret",
        "board",
        "curCol",
        "row",
        "n",
        "i",
        "curCol",
        "board",
        "row",
        "i",
        "row",
        "curCol",
        "i",
        "j",
        "board",
        "i",
        "j",
        "i",
        "j",
        "row",
        "curCol",
        "i",
        "n",
        "j",
        "board",
        "i",
        "j",
        "i",
        "j",
        "board",
        "curCol",
        "n",
        "curCol",
        "n",
        "format",
        "board",
        "row",
        "n",
        "isValid",
        "board",
        "curCol",
        "row",
        "n",
        "board",
        "row",
        "nQueens",
        "board",
        "curCol",
        "n",
        "stat",
        "board",
        "row",
        "stat",
        "len",
        "sys",
        "argv",
        "exit",
        "sys",
        "argv",
        "isdigit",
        "exit",
        "sys",
        "argv",
        "n",
        "exit",
        "i",
        "n",
        "j",
        "n",
        "nQueens",
        "board",
        "n"
    ],
    "literals": [
        "'__main__'",
        "\"Usage: nqueens N\"",
        "\"N must be a number\"",
        "\"N must be at least 4\""
    ],
    "variables": [
        "ret",
        "colIdx",
        "i",
        "j",
        "i",
        "j",
        "stat",
        "curCol",
        "stat",
        "curCol",
        "n",
        "board"
    ],
    "comments": [
        "!/usr/bin/python3",
        "Check prev columns",
        "Check for upper diagonal",
        "Check for lower diagonal",
        "first col is 0"
    ],
    "docstrings": [
        "\"\"\"Solution to N Queens problem\"\"\"",
        "\"\"\"Prints according to requirements\"\"\"",
        "\"\"\"Checks if board[row][curCol] is a valid queen\"\"\"",
        "\"\"\"Recursive call that places queens in all the\n    posible positions of the board\"\"\""
    ],
    "functions": [
        "format",
        "isValid",
        "nQueens"
    ],
    "classes": []
}