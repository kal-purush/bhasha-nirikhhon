{
    "identifiers": [
        "NUnit",
        "Framework",
        "Collections",
        "Generic",
        "Promotion",
        "Engine",
        "Library",
        "Test",
        "SetUp",
        "Test",
        "stockKeepingUnits",
        "CountSKU",
        "counts",
        "OptimizeRulesApplied",
        "rulesAppliedCount",
        "OverlappingPromotionRules",
        "overlaps",
        "expectedOverlaps",
        "Assert",
        "result",
        "Format",
        "expectedOverlaps",
        "overlaps",
        "result",
        "Test",
        "Test"
    ],
    "literals": [
        "\"A\"",
        "\"A\"",
        "\"A\"",
        "\"B\"",
        "\"B\"",
        "\"B\"",
        "\"B\"",
        "\"B\"",
        "\"C\"",
        "\"D\"",
        "\"Expected number of times multiple rules overlapped '{0}': true, and actual overlap count '{1}': '{2}'\""
    ],
    "variables": [
        "stockKeepingUnits",
        "counts",
        "rulesAppliedCount",
        "overlaps",
        "expectedOverlaps",
        "result"
    ],
    "comments": [
        "Todo: find f(x)=0 where x = {times_rule_1_applied, times_rule_2_applied, .., times_rule_n_applied}",
        "f: x --> number of times multiple rules overlapped",
        "Outcommented since to general as first step",
        "var cartSize = 10;",
        "IEnumerable<string> randomSKU = new List<string>(new string[cartSize]);",
        "Random random = new Random();",
        "randomSKU = randomSKU.Select(x => PromotionEngineLibrary.ProductList.ToList<string>()[random.Next(cartSize)]);",
        "var counts = randomSKU.CountSKU();",
        "Todo: maximize savings and find x_0 which satifies f(x_0)=0 and g(x_0)=max(g(x)) where g maps to total amount saved",
        "Todo: Create algo that both satifies 0 overlapping promotion rules applied and max savings corresponding to accumulated",
        "savings from applied promotion rules"
    ],
    "docstrings": [],
    "functions": [
        "Setup",
        "TestOverlappingPromotionRules",
        "TestMaxSavings",
        "TestOverlappingPromotionRulesAndMaxSavings"
    ],
    "classes": [
        "UnitTestRuleOverlapAlgo"
    ]
}