{
    "identifiers": [
        "useEffect",
        "useState",
        "PermissionTypes",
        "isLoading",
        "LoadingState",
        "useAppContext",
        "useServerContext",
        "Container",
        "User",
        "resolveErrorMessage",
        "container",
        "user",
        "user",
        "u",
        "u",
        "container",
        "PermissionTypes",
        "container",
        "contextUser",
        "contextUser",
        "contextUser",
        "contextUser",
        "contextUser",
        "contextUser",
        "containerIdOrPath",
        "useState",
        "useState",
        "useState",
        "useState",
        "LoadingState",
        "useAppContext",
        "useServerContext",
        "useEffect",
        "containerIdOrPath",
        "setError",
        "setLoadingState",
        "LoadingState",
        "api",
        "containerIdOrPath",
        "containers",
        "setContainer",
        "container_",
        "setContextUser",
        "applyPermissions",
        "container_",
        "user",
        "e",
        "setError",
        "resolveErrorMessage",
        "e",
        "setLoadingState",
        "LoadingState",
        "api",
        "containerIdOrPath",
        "user",
        "isLoading",
        "loadingState",
        "contextUser"
    ],
    "literals": [
        "'react'",
        "'immutable'",
        "'@labkey/api'",
        "'../../../public/LoadingState'",
        "'../../AppContext'",
        "'../base/ServerContext'",
        "'../base/models/Container'",
        "'../base/models/User'",
        "'../../util/messaging'",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "contextUser",
        "container",
        "setContainer",
        "error",
        "setError",
        "contextUser",
        "setContextUser",
        "loadingState",
        "setLoadingState",
        "containers",
        "container_"
    ],
    "comments": [
        "Must set \"isAdmin\" and \"permissionsList\" prior to configuring",
        "permission bits (e.g. \"canDelete\", \"canUpdate\", etc).",
        "Update permission bits that are explicitly defined on the user."
    ],
    "docstrings": [
        "* Applies the permissions on the container to the user. Only permission related User fields are mutated.",
        "* React hook that supplies the container, user, and the container-relative permissions for the user.\n * @param containerIdOrPath The container id or container path to request.\n * Example:\n * ```tsx\n * const SeeUserPermissions: React.FC = () => {\n *    // This component takes a \"containerPath\" as a property.\n *    const { containerPath } = props;\n *\n *    // Given the \"containerPath\" fetch the `container` and `user`.\n *    const { container, error, isLoaded, user } = useContainerUser(containerPath);\n *\n *    if (!isLoaded) {\n *        return <LoadingSpinner />;\n *    }\n *\n *    // Display container information and utilize user permissions in the container to control display logic.\n *    return (\n *        <div>\n *            <Alert>{error}</Alert>\n *            {!!container && (\n *                <>\n *                    <span>Folder Name: {container.name}</span>\n *                    <span>Folder Path: {container.path}</span>\n *                    {user.hasInsertPermission() && <span>{user.displayName} can insert data into {container.path}.</span>>}\n *                    {user.hasDeletePermission() && <span>{user.displayName} can delete data in {container.path}.</span>>}\n *                    {user.hasDesignSampleSetsPermission() && <span>{user.displayName} can design sample types in {container.path}.</span>>}\n *                </>\n *            )}\n *        </div>\n *    );\n * };\n * ```"
    ],
    "functions": [
        "applyPermissions",
        "useContainerUser"
    ],
    "classes": []
}