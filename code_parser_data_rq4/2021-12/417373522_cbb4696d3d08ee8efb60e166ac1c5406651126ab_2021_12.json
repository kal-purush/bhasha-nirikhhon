{
    "identifiers": [
        "dash",
        "pandas",
        "pd",
        "dash",
        "dcc",
        "dash",
        "html",
        "dash",
        "dash_table",
        "dash",
        "dependencies",
        "Input",
        "Output",
        "State",
        "plotly",
        "express",
        "px",
        "plotly",
        "graph_objects",
        "go",
        "numpy",
        "np",
        "dash_bootstrap_components",
        "dbc",
        "backend",
        "database_mongo",
        "backend",
        "database_mysql",
        "backend",
        "database_neo4j",
        "frontend",
        "schema",
        "dash",
        "Dash",
        "external_stylesheets",
        "html",
        "Div",
        "html",
        "H3",
        "html",
        "Div",
        "id",
        "html",
        "Div",
        "id",
        "html",
        "Div",
        "dcc",
        "Input",
        "id",
        "value",
        "html",
        "H3",
        "html",
        "Div",
        "dcc",
        "Input",
        "id",
        "value",
        "html",
        "Button",
        "id",
        "n_clicks",
        "children",
        "html",
        "Button",
        "id",
        "n_clicks",
        "children",
        "html",
        "Div",
        "className",
        "children",
        "html",
        "Div",
        "className",
        "children",
        "html",
        "H3",
        "dcc",
        "Graph",
        "id",
        "html",
        "Div",
        "className",
        "children",
        "html",
        "H3",
        "dcc",
        "Graph",
        "id",
        "html",
        "H3",
        "html",
        "Div",
        "dcc",
        "Input",
        "id",
        "value",
        "dcc",
        "Graph",
        "id",
        "dcc",
        "Slider",
        "id",
        "min",
        "max",
        "value",
        "marks",
        "year",
        "year",
        "year",
        "step",
        "included"
    ],
    "literals": [
        "'https://codepen.io/chriddyp/pen/bWLwgP.css'",
        "\"Check the movie interests you!\"",
        "'dummy1'",
        "'dummy2'",
        "\"Movie Name: \"",
        "'input_movie'",
        "'Million Dollar Baby'",
        "'text'",
        "\"Your vote! (From 1 to 10)\"",
        "'vote'",
        "'number'",
        "'submit-button-state'",
        "'Submit'",
        "'revoke-button-state'",
        "'Revoke'",
        "'row'",
        "'eight columns'",
        "\"Movie details\"",
        "'movie_table'",
        "'four columns'",
        "\"Vote Distribution\"",
        "\"vote_distribution\"",
        "\"Give the name of the actor/director/producer/composer interests you!\"",
        "\"Actor/Director/Producer/Composer Name: \"",
        "'input_name'",
        "'Clint Eastwood'",
        "'text'",
        "'graph-with-slider'",
        "'year-slider'"
    ],
    "variables": [
        "app",
        "interest_component"
    ],
    "comments": [
        "from database_neo4j import App",
        "@app.callback(",
        "Output(component_id='search_result', component_property='children'),",
        "Input(component_id='search_state', component_property='n_clicks'),",
        "[State(component_id=f, component_property='value') for f in filters],",
        ")",
        "def update_table(n_clicks, country, year, genre, low, high, order):",
        "return generate_table(country, year, genre, low, high, order)",
        "@app.callback(",
        "Output(component_id='pie_chart', component_property='figure'),",
        "Input(component_id='submit_state', component_property='n_clicks'),",
        "State(component_id='country_input', component_property='value')",
        ")",
        "def update_pie(n_clicks, input_country):",
        "return generate_pie(input_country)",
        "@app.callback(",
        "Output(\"dummy1\", \"children\"),",
        "State(\"input_movie\", \"value\"),",
        "State(\"vote\", \"value\"),",
        "Input(\"submit-button-state\", \"n_clicks\"))",
        "def update_table(input_movie, vote, btn1):",
        "# print(n_clicks)",
        "# print(vote)",
        "if btn1>0:",
        "temp_dict = database_mysql.get_id_by_name(\"{}\".format(input_movie))",
        "if temp_dict!=None:",
        "temp_id = temp_dict['imdb_title_id']",
        "new_rating = database_mongo.update_rating(temp_id, vote,value = 1)",
        "res = database_mysql.update_avg_vote(temp_id, new_rating)",
        "print(res)",
        "app1 = database_neo4j.App()",
        "app1.update_rating(temp_id, new_rating)",
        "app1.close()",
        "return None",
        "@app.callback(",
        "Output(\"dummy2\", \"children\"),",
        "State(\"input_movie\", \"value\"),",
        "State(\"vote\", \"value\"),",
        "Input(\"revoke-button-state\", \"n_clicks\"))",
        "def update_table(input_movie, vote, btn2):",
        "# print(n_clicks)",
        "# print(vote)",
        "if btn2>0:",
        "temp_dict = database_mysql.get_id_by_name(\"{}\".format(input_movie))",
        "if temp_dict!=None:",
        "temp_id = temp_dict['imdb_title_id']",
        "new_rating = database_mongo.update_rating(temp_id, vote,value = -1)",
        "res = database_mysql.update_avg_vote(temp_id, new_rating)",
        "print(res)",
        "app1 = database_neo4j.App()",
        "app1.update_rating(temp_id, new_rating)",
        "app1.close()",
        "return None",
        "@app.callback(",
        "Output('movie_table', 'figure'),",
        "Input(\"input_movie\", \"value\"),",
        "Input(\"dummy1\", \"children\"),",
        "Input(\"dummy2\", \"children\"))",
        "def update_table(input_movie, n_clicks, adas):",
        "movie_dict = database_mysql.get_id_by_name(\"{}\".format(input_movie))",
        "if movie_dict==None:",
        "fig1=go.Figure(go.Table(",
        "header = dict(values=['Movie Not Found'])))",
        "else:",
        "del movie_dict['metascore']",
        "del movie_dict['reviews_from_users']",
        "del movie_dict['reviews_from_critics']",
        "del movie_dict['usa_gross_income']",
        "del movie_dict['imdb_title_id']",
        "del movie_dict['description']",
        "movie_dict['global_income'] = movie_dict.pop('worldwide_gross_income')",
        "movie_dict['company'] = movie_dict.pop('production_company')",
        "fig1 = go.Figure(data=[go.Table(",
        "header = dict(values = [[i] for i in movie_dict.keys()], fill_color='paleturquoise',",
        "align='left'),",
        "cells = dict(values = [[i] for i in movie_dict.values()], fill_color='lavender',",
        "align='left')",
        ")",
        "])",
        "# fig1.update_layout(width=1900)",
        "fig1.update_layout(margin=dict(l=20, r=20, t=20, b=20))",
        "return fig1",
        "@app.callback(",
        "Output('vote_distribution', 'figure'),",
        "Input(\"input_movie\", \"value\"),",
        "Input(\"dummy1\", \"children\"),",
        "Input(\"dummy2\", \"children\"))",
        "def update_figure1(input_movie, dummy1,adfasf):",
        "temp_dict = database_mysql.get_id_by_name(\"{}\".format(input_movie))",
        "if temp_dict==None:",
        "fig =  px.bar()",
        "else:",
        "temp_id = temp_dict['imdb_title_id']",
        "data = database_mongo.get_votes_by_id(temp_id)",
        "fig =  px.bar(data, x=\"field\", y=\"value\")",
        "fig.update_layout(margin=dict(l=0, r=20, t=20, b=20), paper_bgcolor=\"LightSteelBlue\")",
        "return fig",
        "@app.callback(",
        "Output('graph-with-slider', 'figure'),",
        "Input('year-slider', 'value'),",
        "Input(\"input_name\", \"value\"),",
        "Input(\"dummy1\", \"children\"),",
        "Input(\"dummy2\", \"children\"))",
        "def update_figure(selected_year, input_name, n_clicks,adfds):",
        "app1 = database_neo4j.App()",
        "df = app1.find_movie_from_person(\"{}\".format(input_name))",
        "app1.close()",
        "filtered_df = df[df.year >= selected_year]",
        "fig = px.scatter(filtered_df, x=\"year\", y=\"rating\",",
        "size=\"rating\", color=\"worktype\", hover_name=\"title\",",
        "log_x=False, size_max=10)",
        "fig.update_layout(transition_duration=500)",
        "return fig"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}