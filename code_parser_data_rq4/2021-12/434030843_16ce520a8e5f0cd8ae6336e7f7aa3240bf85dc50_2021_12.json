{
    "identifiers": [
        "outerContainerId",
        "opt_config",
        "Runner",
        "Runner",
        "Runner",
        "outerContainerId",
        "opt_config",
        "Runner",
        "Runner",
        "FPS",
        "Runner",
        "IS_IOS",
        "Runner",
        "Runner",
        "DEFAULT_WIDTH",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "loadTimeData",
        "Runner",
        "e",
        "Runner",
        "e",
        "Runner",
        "setting",
        "value",
        "setting",
        "value",
        "setting",
        "value",
        "setting",
        "setting",
        "value",
        "value",
        "value",
        "IS_HIDPI",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "IS_IOS",
        "AudioContext",
        "sound",
        "Runner",
        "resourceTemplate",
        "Runner",
        "sound",
        "soundSrc",
        "soundSrc",
        "soundSrc",
        "decodeBase64ToArrayBuffer",
        "soundSrc",
        "buffer",
        "index",
        "audioData",
        "index",
        "audioData",
        "sound",
        "opt_speed",
        "opt_speed",
        "DEFAULT_WIDTH",
        "speed",
        "DEFAULT_WIDTH",
        "mobileSpeed",
        "speed",
        "speed",
        "mobileSpeed",
        "opt_speed",
        "opt_speed",
        "Runner",
        "Runner",
        "createCanvas",
        "Runner",
        "Runner",
        "Horizon",
        "DistanceMeter",
        "Trex",
        "IS_MOBILE",
        "Runner",
        "Runner",
        "setInterval",
        "clearInterval",
        "boxStyles",
        "boxStyles",
        "padding",
        "Runner",
        "Trex",
        "sheet",
        "keyframes",
        "sheet",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "getTimeStamp",
        "now",
        "now",
        "now",
        "deltaTime",
        "deltaTime",
        "hasObstacles",
        "deltaTime",
        "deltaTime",
        "deltaTime",
        "hasObstacles",
        "hasObstacles",
        "checkForCollision",
        "collision",
        "deltaTime",
        "deltaTime",
        "playAchievementSound",
        "deltaTime",
        "actualDistance",
        "actualDistance",
        "deltaTime",
        "Runner",
        "deltaTime",
        "e",
        "evtType",
        "events",
        "evtType",
        "events",
        "events",
        "events",
        "e",
        "events",
        "events",
        "events",
        "e",
        "e",
        "Runner",
        "Runner",
        "Runner",
        "IS_MOBILE",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "IS_MOBILE",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "Runner",
        "e",
        "IS_MOBILE",
        "e",
        "e",
        "Runner",
        "e",
        "e",
        "Runner",
        "errorPageController",
        "e",
        "Runner",
        "e",
        "Runner",
        "e",
        "e",
        "e",
        "e",
        "Runner",
        "keyCode",
        "e",
        "Runner",
        "e",
        "Runner",
        "isjumpKey",
        "Runner",
        "keyCode",
        "getTimeStamp",
        "Runner",
        "keyCode",
        "e",
        "deltaTime",
        "Runner",
        "keyCode",
        "isjumpKey",
        "e",
        "e",
        "e",
        "e",
        "Runner",
        "e",
        "requestAnimationFrame",
        "vibrate",
        "Trex",
        "GameOverPanel",
        "getTimeStamp",
        "cancelAnimationFrame",
        "Trex",
        "getTimeStamp",
        "getTimeStamp",
        "Runner",
        "e",
        "e",
        "soundBuffer",
        "soundBuffer",
        "sourceNode",
        "soundBuffer",
        "sourceNode",
        "sourceNode",
        "reset",
        "reset",
        "Runner",
        "Runner",
        "Runner",
        "canvas",
        "opt_width",
        "opt_height",
        "canvas",
        "context",
        "devicePixelRatio",
        "backingStoreRatio",
        "devicePixelRatio",
        "backingStoreRatio",
        "opt_width",
        "canvas",
        "opt_height",
        "canvas",
        "canvas",
        "oldWidth",
        "ratio",
        "canvas",
        "oldHeight",
        "ratio",
        "canvas",
        "oldWidth",
        "canvas",
        "oldHeight",
        "context",
        "ratio",
        "ratio",
        "devicePixelRatio",
        "canvas",
        "canvas",
        "canvas",
        "canvas",
        "min",
        "max",
        "max",
        "min",
        "min",
        "duration",
        "IS_MOBILE",
        "duration",
        "container",
        "width",
        "height",
        "opt_classname",
        "canvas",
        "opt_classname",
        "Runner",
        "opt_classname",
        "Runner",
        "canvas",
        "width",
        "canvas",
        "height",
        "container",
        "canvas",
        "canvas",
        "base64String",
        "base64String",
        "atob",
        "base64String",
        "ArrayBuffer",
        "len",
        "Uint8Array",
        "arrayBuffer",
        "i",
        "len",
        "i",
        "i",
        "i",
        "IS_IOS",
        "performance",
        "canvas",
        "textImgPos",
        "restartImgPos",
        "dimensions",
        "canvas",
        "canvas",
        "dimensions",
        "textImgPos",
        "restartImgPos",
        "GameOverPanel",
        "GameOverPanel",
        "width",
        "opt_height",
        "width",
        "opt_height",
        "opt_height",
        "GameOverPanel",
        "dimensions",
        "dimensions",
        "dimensions",
        "dimensions",
        "centerX",
        "dimensions",
        "dimensions",
        "dimensions",
        "dimensions",
        "dimensions",
        "centerX",
        "dimensions",
        "IS_HIDPI",
        "textSourceY",
        "textSourceX",
        "textSourceWidth",
        "textSourceHeight",
        "restartSourceWidth",
        "restartSourceHeight",
        "textSourceX",
        "textSourceY",
        "Runner",
        "textSourceX",
        "textSourceY",
        "textSourceWidth",
        "textSourceHeight",
        "textTargetX",
        "textTargetY",
        "textTargetWidth",
        "textTargetHeight",
        "Runner",
        "restartSourceWidth",
        "restartSourceHeight",
        "restartTargetX",
        "restartTargetY",
        "dimensions",
        "dimensions",
        "obstacle",
        "tRex",
        "opt_canvasCtx",
        "Runner",
        "obstacle",
        "CollisionBox",
        "tRex",
        "tRex",
        "tRex",
        "tRex",
        "CollisionBox",
        "obstacle",
        "obstacle",
        "obstacle",
        "obstacle",
        "obstacle",
        "opt_canvasCtx",
        "drawCollisionBoxes",
        "opt_canvasCtx",
        "tRexBox",
        "obstacleBox",
        "boxCompare",
        "tRexBox",
        "obstacleBox",
        "obstacle",
        "tRex",
        "Trex",
        "Trex",
        "t",
        "tRexCollisionBoxes",
        "t",
        "i",
        "collisionBoxes",
        "i",
        "createAdjustedCollisionBox",
        "tRexCollisionBoxes",
        "t",
        "tRexBox",
        "createAdjustedCollisionBox",
        "collisionBoxes",
        "i",
        "obstacleBox",
        "boxCompare",
        "adjTrexBox",
        "adjObstacleBox",
        "opt_canvasCtx",
        "drawCollisionBoxes",
        "opt_canvasCtx",
        "adjTrexBox",
        "adjObstacleBox",
        "crashed",
        "adjTrexBox",
        "adjObstacleBox",
        "box",
        "adjustment",
        "CollisionBox",
        "box",
        "adjustment",
        "box",
        "adjustment",
        "box",
        "box",
        "canvasCtx",
        "tRexBox",
        "obstacleBox",
        "canvasCtx",
        "canvasCtx",
        "canvasCtx",
        "tRexBox",
        "tRexBox",
        "tRexBox",
        "tRexBox",
        "canvasCtx",
        "canvasCtx",
        "obstacleBox",
        "obstacleBox",
        "obstacleBox",
        "obstacleBox",
        "canvasCtx",
        "tRexBox",
        "obstacleBox",
        "tRexBox",
        "tRexBox",
        "obstacleBox",
        "obstacleBox",
        "tRexBox",
        "obstacleBoxX",
        "obstacleBox",
        "tRexBox",
        "tRexBox",
        "obstacleBoxX",
        "tRexBox",
        "obstacleBox",
        "obstacleBox",
        "tRexBox",
        "tRexBox",
        "obstacleBox",
        "crashed",
        "crashed",
        "x",
        "y",
        "w",
        "h",
        "x",
        "y",
        "w",
        "h",
        "canvasCtx",
        "spriteImgPos",
        "dimensions",
        "gapCoefficient",
        "speed",
        "opt_xOffset",
        "canvasCtx",
        "spriteImgPos",
        "gapCoefficient",
        "getRandomNum",
        "Obstacle",
        "dimensions",
        "dimensions",
        "opt_xOffset",
        "speed",
        "Obstacle",
        "Obstacle",
        "Obstacle",
        "speed",
        "speed",
        "IS_MOBILE",
        "yPosConfig",
        "getRandomNum",
        "yPosConfig",
        "speed",
        "IS_HIDPI",
        "sourceWidth",
        "sourceWidth",
        "sourceHeight",
        "sourceHeight",
        "sourceWidth",
        "sourceX",
        "sourceWidth",
        "Runner",
        "sourceX",
        "sourceWidth",
        "sourceHeight",
        "deltaTime",
        "speed",
        "speed",
        "speed",
        "FPS",
        "deltaTime",
        "deltaTime",
        "gapCoefficient",
        "speed",
        "speed",
        "gapCoefficient",
        "minGap",
        "Obstacle",
        "getRandomNum",
        "minGap",
        "maxGap",
        "collisionBoxes",
        "i",
        "i",
        "i",
        "CollisionBox",
        "collisionBoxes",
        "i",
        "collisionBoxes",
        "i",
        "collisionBoxes",
        "i",
        "collisionBoxes",
        "i",
        "Obstacle",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "canvas",
        "spritePos",
        "canvas",
        "canvas",
        "spritePos",
        "FPS",
        "Trex",
        "Trex",
        "Trex",
        "Trex",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "CollisionBox",
        "Trex",
        "Trex",
        "Trex",
        "Trex",
        "Runner",
        "Runner",
        "Trex",
        "setting",
        "setting",
        "setting",
        "deltaTime",
        "opt_status",
        "deltaTime",
        "opt_status",
        "opt_status",
        "Trex",
        "opt_status",
        "Trex",
        "opt_status",
        "opt_status",
        "Trex",
        "getTimeStamp",
        "deltaTime",
        "Trex",
        "getTimeStamp",
        "x",
        "y",
        "Trex",
        "IS_HIDPI",
        "sourceX",
        "sourceY",
        "sourceWidth",
        "sourceHeight",
        "sourceX",
        "sourceY",
        "Trex",
        "Runner",
        "sourceX",
        "sourceY",
        "sourceWidth",
        "sourceHeight",
        "Trex",
        "Runner",
        "sourceX",
        "sourceY",
        "sourceWidth",
        "sourceHeight",
        "Trex",
        "time",
        "time",
        "deltaTime",
        "time",
        "speed",
        "Trex",
        "speed",
        "deltaTime",
        "speed",
        "Trex",
        "deltaTime",
        "msPerFrame",
        "framesElapsed",
        "framesElapsed",
        "framesElapsed",
        "deltaTime",
        "isDucking",
        "isDucking",
        "Trex",
        "Trex",
        "Trex",
        "Trex",
        "Trex",
        "canvas",
        "spritePos",
        "canvasWidth",
        "canvas",
        "canvas",
        "Runner",
        "spritePos",
        "DistanceMeter",
        "canvasWidth",
        "DistanceMeter",
        "DistanceMeter",
        "DistanceMeter",
        "DistanceMeter",
        "width",
        "width",
        "i",
        "i",
        "i",
        "maxDistanceStr",
        "parseInt",
        "maxDistanceStr",
        "canvasWidth",
        "canvasWidth",
        "DistanceMeter",
        "digitPos",
        "value",
        "opt_highScore",
        "DistanceMeter",
        "DistanceMeter",
        "DistanceMeter",
        "value",
        "digitPos",
        "DistanceMeter",
        "DistanceMeter",
        "DistanceMeter",
        "IS_HIDPI",
        "sourceWidth",
        "sourceHeight",
        "sourceX",
        "sourceX",
        "sourceY",
        "opt_highScore",
        "DistanceMeter",
        "highScoreX",
        "sourceX",
        "sourceY",
        "sourceWidth",
        "sourceHeight",
        "targetX",
        "targetY",
        "targetWidth",
        "targetHeight",
        "distance",
        "distance",
        "distance",
        "deltaTime",
        "distance",
        "distance",
        "distance",
        "distance",
        "parseInt",
        "distance",
        "distance",
        "playSound",
        "distance",
        "distanceStr",
        "deltaTime",
        "paint",
        "paint",
        "i",
        "i",
        "i",
        "parseInt",
        "i",
        "playSound",
        "i",
        "i",
        "i",
        "parseInt",
        "i",
        "distance",
        "distance",
        "distance",
        "distance",
        "highScoreStr",
        "canvas",
        "spritePos",
        "containerWidth",
        "canvas",
        "spritePos",
        "containerWidth",
        "containerWidth",
        "getRandomNum",
        "Cloud",
        "Cloud",
        "Cloud",
        "Cloud",
        "getRandomNum",
        "Cloud",
        "Cloud",
        "Cloud",
        "Cloud",
        "IS_HIDPI",
        "sourceWidth",
        "sourceWidth",
        "sourceHeight",
        "sourceHeight",
        "Runner",
        "sourceWidth",
        "sourceHeight",
        "Cloud",
        "Cloud",
        "speed",
        "speed",
        "Cloud",
        "canvas",
        "spritePos",
        "containerWidth",
        "spritePos",
        "canvas",
        "canvas",
        "containerWidth",
        "containerWidth",
        "NightMode",
        "NightMode",
        "NightMode",
        "activated",
        "delta",
        "activated",
        "NightMode",
        "activated",
        "NightMode",
        "NightMode",
        "NightMode",
        "i",
        "NightMode",
        "i",
        "i",
        "i",
        "NightMode",
        "currentPos",
        "speed",
        "currentPos",
        "NightMode",
        "currentPos",
        "currentPos",
        "speed",
        "currentPos",
        "NightMode",
        "NightMode",
        "NightMode",
        "NightMode",
        "NightMode",
        "Runner",
        "IS_HIDPI",
        "moonSourceWidth",
        "moonSourceHeight",
        "moonSourceX",
        "NightMode",
        "starSize",
        "starSourceX",
        "Runner",
        "i",
        "NightMode",
        "i",
        "Runner",
        "starSourceX",
        "i",
        "starSize",
        "starSize",
        "i",
        "i",
        "NightMode",
        "NightMode",
        "Runner",
        "moonSourceX",
        "moonSourceWidth",
        "moonSourceHeight",
        "moonOutputWidth",
        "NightMode",
        "NightMode",
        "i",
        "NightMode",
        "i",
        "i",
        "i",
        "getRandomNum",
        "segmentSize",
        "i",
        "segmentSize",
        "i",
        "i",
        "getRandomNum",
        "NightMode",
        "IS_HIDPI",
        "i",
        "Runner",
        "NightMode",
        "i",
        "i",
        "Runner",
        "NightMode",
        "i",
        "canvas",
        "spritePos",
        "spritePos",
        "canvas",
        "canvas",
        "HorizonLine",
        "HorizonLine",
        "HorizonLine",
        "dimension",
        "HorizonLine",
        "IS_HIDPI",
        "dimension",
        "dimension",
        "HorizonLine",
        "dimension",
        "dimension",
        "HorizonLine",
        "dimension",
        "dimension",
        "HorizonLine",
        "dimension",
        "HorizonLine",
        "HorizonLine",
        "Runner",
        "Runner",
        "pos",
        "increment",
        "pos",
        "line1",
        "increment",
        "line2",
        "line1",
        "line1",
        "line1",
        "line2",
        "line1",
        "line1",
        "deltaTime",
        "speed",
        "speed",
        "FPS",
        "deltaTime",
        "increment",
        "increment",
        "HorizonLine",
        "canvas",
        "spritePos",
        "dimensions",
        "gapCoefficient",
        "canvas",
        "Horizon",
        "dimensions",
        "gapCoefficient",
        "spritePos",
        "Horizon",
        "Horizon",
        "HorizonLine",
        "NightMode",
        "deltaTime",
        "currentSpeed",
        "updateObstacles",
        "showNightMode",
        "deltaTime",
        "deltaTime",
        "currentSpeed",
        "showNightMode",
        "deltaTime",
        "currentSpeed",
        "updateObstacles",
        "deltaTime",
        "currentSpeed",
        "deltaTime",
        "speed",
        "deltaTime",
        "speed",
        "numClouds",
        "numClouds",
        "i",
        "i",
        "i",
        "cloudSpeed",
        "numClouds",
        "numClouds",
        "lastCloud",
        "lastCloud",
        "obj",
        "obj",
        "deltaTime",
        "currentSpeed",
        "i",
        "i",
        "i",
        "obstacle",
        "deltaTime",
        "currentSpeed",
        "obstacle",
        "updatedObstacles",
        "updatedObstacles",
        "lastObstacle",
        "lastObstacle",
        "lastObstacle",
        "lastObstacle",
        "lastObstacle",
        "lastObstacle",
        "currentSpeed",
        "lastObstacle",
        "currentSpeed",
        "currentSpeed",
        "getRandomNum",
        "Obstacle",
        "Obstacle",
        "obstacleTypeIndex",
        "obstacleType",
        "currentSpeed",
        "obstacleType",
        "currentSpeed",
        "obstacleType",
        "Obstacle",
        "obstacleType",
        "obstacleSpritePos",
        "currentSpeed",
        "obstacleType",
        "obstacleType",
        "Runner",
        "nextObstacleType",
        "i",
        "i",
        "duplicateCount",
        "i",
        "nextObstacleType",
        "duplicateCount",
        "duplicateCount",
        "Runner",
        "width",
        "height",
        "width",
        "height",
        "Cloud",
        "Runner",
        "onDocumentLoad"
    ],
    "literals": [
        "'use strict'",
        "'#details-button'",
        "'Runner'",
        "'ontouchstart'",
        "'audio-resources'",
        "'runner-canvas'",
        "'runner-container'",
        "'crashed'",
        "'icon-offline'",
        "'inverted'",
        "'snackbar'",
        "'snackbar-show'",
        "'controller'",
        "'offline-sound-press'",
        "'offline-sound-hit'",
        "'offline-sound-reached'",
        "'38'",
        "'32'",
        "'40'",
        "'13'",
        "'webkitAnimationEnd'",
        "'click'",
        "'keydown'",
        "'keyup'",
        "'mousedown'",
        "'mouseup'",
        "'resize'",
        "'touchend'",
        "'touchstart'",
        "'visibilitychange'",
        "'blur'",
        "'focus'",
        "'load'",
        "'div'",
        "'disabledEasterEgg'",
        "'.icon'",
        "'icon-disabled'",
        "'GRAVITY'",
        "'MIN_JUMP_HEIGHT'",
        "'SPEED_DROP_COEFFICIENT'",
        "'INITIAL_JUMP_VELOCITY'",
        "'SPEED'",
        "'offline-resources-2x'",
        "'offline-resources-1x'",
        "','",
        "'.'",
        "'hidden'",
        "'div'",
        "'2d'",
        "'#f7f7f7'",
        "'div'",
        "'px'",
        "'px'",
        "'@-webkit-keyframes intro { '",
        "'from { width:'",
        "'px }'",
        "'to { width: '",
        "'px }'",
        "'}'",
        "'style'",
        "'intro .4s ease-out 1 both'",
        "'px'",
        "''",
        "'blur'",
        "'visible'",
        "'2d'",
        "'px'",
        "'px'",
        "'px'",
        "'px'",
        "'canvas'",
        "' '",
        "'2d'",
        "'#f00'",
        "'#0f0'",
        "'CACTUS_SMALL'",
        "'CACTUS_LARGE'",
        "'PTERODACTYL'",
        "'2d'",
        "'CRASHED'",
        "'DUCKING'",
        "'JUMPING'",
        "'RUNNING'",
        "'WAITING'",
        "'2d'",
        "''",
        "''",
        "'0'",
        "'9'",
        "'9'",
        "''",
        "''",
        "'10'",
        "'11'",
        "''",
        "''",
        "'2d'",
        "'2d'",
        "'2d'",
        "'YPOS'",
        "'2d'",
        "'.interstitial-wrapper'",
        "'DOMContentLoaded'"
    ],
    "variables": [
        "DEFAULT_WIDTH",
        "FPS",
        "IS_HIDPI",
        "IS_IOS",
        "IS_MOBILE",
        "IS_TOUCH_ENABLED",
        "resourceTemplate",
        "soundSrc",
        "buffer",
        "speed",
        "mobileSpeed",
        "boxStyles",
        "padding",
        "keyframes",
        "sheet",
        "now",
        "deltaTime",
        "hasObstacles",
        "collision",
        "playAchievementSound",
        "actualDistance",
        "keyCode",
        "isjumpKey",
        "deltaTime",
        "sourceNode",
        "context",
        "devicePixelRatio",
        "backingStoreRatio",
        "ratio",
        "oldWidth",
        "oldHeight",
        "canvas",
        "len",
        "arrayBuffer",
        "i",
        "dimensions",
        "centerX",
        "textSourceX",
        "textSourceY",
        "textSourceWidth",
        "textSourceHeight",
        "textTargetX",
        "textTargetY",
        "textTargetWidth",
        "textTargetHeight",
        "restartSourceWidth",
        "restartSourceHeight",
        "restartTargetX",
        "restartTargetY",
        "obstacleBoxXPos",
        "tRexBox",
        "obstacleBox",
        "collisionBoxes",
        "tRexCollisionBoxes",
        "t",
        "i",
        "adjTrexBox",
        "adjObstacleBox",
        "crashed",
        "crashed",
        "tRexBoxX",
        "tRexBoxY",
        "obstacleBoxX",
        "obstacleBoxY",
        "yPosConfig",
        "sourceWidth",
        "sourceHeight",
        "sourceX",
        "minGap",
        "maxGap",
        "collisionBoxes",
        "i",
        "sourceX",
        "x",
        "sourceY",
        "y",
        "sourceWidth",
        "sourceHeight",
        "deltaTime",
        "msPerFrame",
        "framesElapsed",
        "maxDistanceStr",
        "i",
        "sourceWidth",
        "sourceHeight",
        "sourceX",
        "sourceY",
        "targetX",
        "targetY",
        "targetWidth",
        "targetHeight",
        "highScoreX",
        "paint",
        "playSound",
        "distanceStr",
        "i",
        "i",
        "highScoreStr",
        "sourceWidth",
        "sourceHeight",
        "i",
        "moonSourceWidth",
        "moonSourceHeight",
        "moonSourceX",
        "moonOutputWidth",
        "moonSourceWidth",
        "starSize",
        "starSourceX",
        "i",
        "segmentSize",
        "i",
        "line1",
        "pos",
        "line2",
        "increment",
        "cloudSpeed",
        "numClouds",
        "i",
        "lastCloud",
        "updatedObstacles",
        "i",
        "obstacle",
        "lastObstacle",
        "obstacleTypeIndex",
        "obstacleType",
        "obstacleSpritePos",
        "duplicateCount",
        "i"
    ],
    "comments": [
        "Copyright (c) 2014 The Chromium Authors. All rights reserved.",
        "Use of this source code is governed by a BSD-style license that can be",
        "found in the LICENSE file.",
        "extract from chromium source code by @liuwayong",
        "Singleton",
        "Whether the easter egg has been activated.",
        "Whether the game is currently in play state.",
        "Sound FX.",
        "Global web audio context for playing sounds.",
        "Images.",
        "@const",
        "@const",
        "@const",
        "@const",
        "Up, spacebar",
        "Down",
        "Enter",
        "return loadTimeData && loadTimeData.valueExists('disabledEasterEgg');",
        "Show notification when the activation key is pressed.",
        "If the images are not yet loaded, add a listener.",
        "Async, so no guarantee of order in array.",
        "Reduce the speed on smaller mobile screens.",
        "Hide the static icon.",
        "Player canvas container.",
        "Horizon contains clouds, obstacles and the ground.",
        "Distance meter",
        "Draw t-rex",
        "Redraw the elements back onto the canvas.",
        "Outer container and distance meter.",
        "Game over panel.",
        "CSS animation definition.",
        "create a style sheet to put the keyframe rule in",
        "and then place the style sheet in the html head",
        "if (this.touchController) {",
        "this.outerContainerEl.appendChild(this.touchController);",
        "}",
        "Handle tabbing off the page. Pause the current game.",
        "First jump triggers the intro.",
        "The horizon doesn't move until the intro is over.",
        "Check for collisions.",
        "Night mode.",
        "Keys.",
        "Mobile only touch devices.",
        "Mouse.",
        "Prevent native page scrolling whilst tapping on mobile.",
        "Play sound effect and jump on starting the game for the first time.",
        "Speed drop, activated only when jump key is not pressed.",
        "Duck.",
        "Check that enough time has elapsed before allowing jump key to restart.",
        "Reset the jump state",
        "Game over panel.",
        "Update the high score.",
        "Reset the time clock.",
        "Query the various pixel ratios",
        "Upscale the canvas if the two ratios don't match",
        "Scale the context to counter the fact that we've manually scaled",
        "our canvas element.",
        "Reset the canvas width / height. Fixes scaling bug when the page is",
        "zoomed and the devicePixelRatio changes accordingly.",
        "Game over text.",
        "Game over text from sprite.",
        "Restart button.",
        "Adjustments are made to the bounding box as there is a 1 pixel white",
        "border around the t-rex and obstacles.",
        "Debug outer box",
        "Simple outer bounds check.",
        "Detailed axis aligned box check.",
        "Adjust the box to actual positions.",
        "Draw boxes for debug.",
        "Axis-Aligned Bounding Box method.",
        "For animated obstacles.",
        "Only allow sizing if we're at the right speed.",
        "Check if obstacle can be positioned at various heights.",
        "Make collision box adjustments,",
        "Central box is adjusted to the size as one box.",
        "____        ______        ________",
        "_|   |-|    _|     |-|    _|       |-|",
        "| |<->| |   | |<--->| |   | |<----->| |",
        "| | 1 | |   | |  2  | |   | |   3   | |",
        "|_|___|_|   |_|_____|_|   |_|_______|_|",
        "",
        "For obstacles that go at a different speed from the horizon.",
        "X position in sprite.",
        "Animation frames.",
        "Update frame",
        "Variable height.",
        "Variable height mobile.",
        "Position when on the ground.",
        "Current status.",
        "Update the status.",
        "Game intro animation, T-rex moves in from the left.",
        "Update the frame position.",
        "Speed drop becomes duck if the down key is still being pressed.",
        "Adjustments for sprite sheet position.",
        "Ducking.",
        "Crashed whilst ducking. Trex is standing up so needs adjustment.",
        "Standing / running",
        "Set new random delay to blink.",
        "Tweak the jump velocity based on the speed.",
        "Speed drop makes Trex fall faster.",
        "Minimum height has been reached.",
        "Reached max height",
        "Back down at ground level. Jump completed.",
        "Number of digits.",
        "Distance that causes achievement animation.",
        "Used for conversion from pixel distance to a scaled unit.",
        "Flash duration in milliseconds.",
        "Flash iterations for achievement animation.",
        "For high DPI we 2x source values.",
        "Left of the current score.",
        "Score has gone beyond the initial digit count.",
        "Acheivement unlocked",
        "Flash score and play sound.",
        "Create a string representation of the distance with leading 0.",
        "Control flashing of the score on reaching acheivement.",
        "Draw the digits if not flashing.",
        "Mark as removeable if no longer in the canvas.",
        "Moon phase.",
        "Fade in / out.",
        "Set moon positioning.",
        "Update stars.",
        "Stars.",
        "Moon.",
        "Do star placement.",
        "Cloud",
        "Horizon",
        "Check for adding a new cloud.",
        "Remove expired clouds.",
        "Obstacles, move to Horizon layer.",
        "Clean up existing obstacles.",
        "Create new obstacles.",
        "Check for multiples of the same type of obstacle.",
        "Also check obstacle is available at current speed."
    ],
    "docstrings": [
        "* T-Rex runner.\n     * @param {string} outerContainerId Outer containing element id.\n     * @param {Object} opt_config\n     * @constructor\n     * @export",
        "* Default game width.\n     * @const",
        "* Frames per second.\n     * @const",
        "* Default game configuration.\n     * @enum {number}",
        "* Default dimensions.\n     * @enum {string}",
        "* CSS class names.\n     * @enum {string}",
        "* Sprite definition layout of the spritesheet.\n     * @enum {Object}",
        "* Sound FX. Reference to the ID of the audio tag on interstitial page.\n     * @enum {string}",
        "* Key code mapping.\n     * @enum {Object}",
        "* Runner event names.\n     * @enum {string}",
        "* Whether the easter egg has been disabled. CrOS enterprise enrolled devices.\n         * @return {boolean}",
        "* For disabled instances, set up a snackbar with the disabled message.",
        "* Setting individual settings for debugging.\n         * @param {string} setting\n         * @param {*} value",
        "* Cache the appropriate image sprite from the page and get the sprite sheet\n         * definition.",
        "* Load and decode base 64 encoded sounds.",
        "* Sets the game speed. Adjust the speed accordingly if on a smaller screen.\n         * @param {number} opt_speed",
        "* Game initialiser.",
        "* Create the touch controller. A div that covers whole screen.",
        "* Debounce the resize event.",
        "* Adjust game space dimensions on resize.",
        "* Play the game intro.\n         * Canvas container width expands out to the full width.",
        "* Update the game status to started.",
        "* Update the game frame and schedules the next one.",
        "* Event handler.",
        "* Bind relevant key / mouse / touch listeners.",
        "* Remove all listeners.",
        "* Process keydown.\n         * @param {Event} e",
        "* Process key up.\n         * @param {Event} e",
        "* Returns whether the event was a left click on canvas.\n         * On Windows right click is registered as a click.\n         * @param {Event} e\n         * @return {boolean}",
        "* RequestAnimationFrame wrapper.",
        "* Whether the game is running.\n         * @return {boolean}",
        "* Game over state.",
        "* Pause the game if the tab is not in focus.",
        "* Play a sound.\n         * @param {SoundBuffer} soundBuffer",
        "* Inverts the current page / canvas colors.\n         * @param {boolean} Whether to reset colors.",
        "* Updates the canvas size taking into\n     * account the backing store pixel ratio and\n     * the device pixel ratio.\n     *\n     * See article by Paul Lewis:\n     * http://www.html5rocks.com/en/tutorials/canvas/hidpi/\n     *\n     * @param {HTMLCanvasElement} canvas\n     * @param {number} opt_width\n     * @param {number} opt_height\n     * @return {boolean} Whether the canvas was scaled.",
        "* Get random number.\n     * @param {number} min\n     * @param {number} max\n     * @param {number}",
        "* Vibrate on mobile devices.\n     * @param {number} duration Duration of the vibration in milliseconds.",
        "* Create canvas element.\n     * @param {HTMLElement} container Element to append canvas to.\n     * @param {number} width\n     * @param {number} height\n     * @param {string} opt_classname\n     * @return {HTMLCanvasElement}",
        "* Decodes the base 64 audio to ArrayBuffer used by Web Audio.\n     * @param {string} base64String",
        "* Return the current timestamp.\n     * @return {number}",
        "******************************************************************************",
        "* Game over panel.\n     * @param {!HTMLCanvasElement} canvas\n     * @param {Object} textImgPos\n     * @param {Object} restartImgPos\n     * @param {!Object} dimensions Canvas dimensions.\n     * @constructor",
        "* Dimensions used in the panel.\n     * @enum {number}",
        "* Update the panel dimensions.\n         * @param {number} width New canvas width.\n         * @param {number} opt_height Optional new canvas height.",
        "* Draw the panel.",
        "******************************************************************************",
        "* Check for a collision.\n     * @param {!Obstacle} obstacle\n     * @param {!Trex} tRex T-rex object.\n     * @param {HTMLCanvasContext} opt_canvasCtx Optional canvas context for drawing\n     *    collision boxes.\n     * @return {Array<CollisionBox>}",
        "* Adjust the collision box.\n     * @param {!CollisionBox} box The original box.\n     * @param {!CollisionBox} adjustment Adjustment box.\n     * @return {CollisionBox} The adjusted collision box object.",
        "* Draw the collision boxes for debug.",
        "* Compare two collision boxes for a collision.\n     * @param {CollisionBox} tRexBox\n     * @param {CollisionBox} obstacleBox\n     * @return {boolean} Whether the boxes intersected.",
        "******************************************************************************",
        "* Collision box object.\n     * @param {number} x X position.\n     * @param {number} y Y Position.\n     * @param {number} w Width.\n     * @param {number} h Height.",
        "******************************************************************************",
        "* Obstacle.\n     * @param {HTMLCanvasCtx} canvasCtx\n     * @param {Obstacle.type} type\n     * @param {Object} spritePos Obstacle position in sprite.\n     * @param {Object} dimensions\n     * @param {number} gapCoefficient Mutipler in determining the gap.\n     * @param {number} speed\n     * @param {number} opt_xOffset",
        "* Coefficient for calculating the maximum gap.\n     * @const",
        "* Maximum obstacle grouping count.\n     * @const",
        "* Initialise the DOM for the obstacle.\n             * @param {number} speed",
        "* Draw and crop based on size.",
        "* Obstacle frame update.\n             * @param {number} deltaTime\n             * @param {number} speed",
        "* Calculate a random gap size.\n             * - Minimum gap gets wider as speed increses\n             * @param {number} gapCoefficient\n             * @param {number} speed\n             * @return {number} The gap size.",
        "* Check if obstacle is visible.\n             * @return {boolean} Whether the obstacle is in the game area.",
        "* Make a copy of the collision boxes, since these will change based on\n             * obstacle type and size.",
        "* Obstacle definitions.\n     * minGap: minimum pixel space betweeen obstacles.\n     * multipleSpeed: Speed at which multiples are allowed.\n     * speedOffset: speed faster / slower than the horizon.\n     * minSpeed: Minimum speed which the obstacle can make an appearance.",
        "******************************************************************************",
        "* T-rex game character.\n     * @param {HTMLCanvas} canvas\n     * @param {Object} spritePos Positioning within image sprite.\n     * @constructor",
        "* T-rex player config.\n     * @enum {number}",
        "* Used in collision detection.\n     * @type {Array<CollisionBox>}",
        "* Animation states.\n     * @enum {string}",
        "* Blinking coefficient.\n     * @const",
        "* Animation config for different states.\n     * @enum {Object}",
        "* T-rex player initaliser.\n         * Sets the t-rex to blink at random intervals.",
        "* Setter for the jump velocity.\n         * The approriate drop velocity is also set.",
        "* Set the animation status.\n         * @param {!number} deltaTime\n         * @param {Trex.status} status Optional status to switch to.",
        "* Draw the t-rex to a particular position.\n         * @param {number} x\n         * @param {number} y",
        "* Sets a random time for the blink to happen.",
        "* Make t-rex blink at random intervals.\n         * @param {number} time Current time in milliseconds.",
        "* Initialise a jump.\n         * @param {number} speed",
        "* Jump is complete, falling down.",
        "* Update frame for a jump.\n         * @param {number} deltaTime\n         * @param {number} speed",
        "* Set the speed drop. Immediately cancels the current jump.",
        "* @param {boolean} isDucking.",
        "* Reset the t-rex to running at start of game.",
        "******************************************************************************",
        "* Handles displaying the distance meter.\n     * @param {!HTMLCanvasElement} canvas\n     * @param {Object} spritePos Image position in sprite.\n     * @param {number} canvasWidth\n     * @constructor",
        "* @enum {number}",
        "* Y positioning of the digits in the sprite sheet.\n     * X position is always 0.\n     * @type {Array<number>}",
        "* Distance meter config.\n     * @enum {number}",
        "* Initialise the distance meter to '00000'.\n         * @param {number} width Canvas width in px.",
        "* Calculate the xPos in the canvas.\n         * @param {number} canvasWidth",
        "* Draw a digit to canvas.\n         * @param {number} digitPos Position of the digit.\n         * @param {number} value Digit value 0-9.\n         * @param {boolean} opt_highScore Whether drawing the high score.",
        "* Covert pixel distance to a 'real' distance.\n         * @param {number} distance Pixel distance ran.\n         * @return {number} The 'real' distance ran.",
        "* Update the distance meter.\n         * @param {number} distance\n         * @param {number} deltaTime\n         * @return {boolean} Whether the acheivement sound fx should be played.",
        "* Draw the high score.",
        "* Set the highscore as a array string.\n         * Position of char in the sprite: H - 10, I - 11.\n         * @param {number} distance Distance ran in pixels.",
        "* Reset the distance meter back to '00000'.",
        "******************************************************************************",
        "* Cloud background item.\n     * Similar to an obstacle object but without collision boxes.\n     * @param {HTMLCanvasElement} canvas Canvas element.\n     * @param {Object} spritePos Position of image in sprite.\n     * @param {number} containerWidth",
        "* Cloud object config.\n     * @enum {number}",
        "* Initialise the cloud. Sets the Cloud height.",
        "* Draw the cloud.",
        "* Update the cloud position.\n         * @param {number} speed",
        "* Check if the cloud is visible on the stage.\n         * @return {boolean}",
        "******************************************************************************",
        "* Nightmode shows a moon and stars on the horizon.",
        "* @enum {number}",
        "* Update moving moon, changing phases.\n         * @param {boolean} activated Whether night mode is activated.\n         * @param {number} delta",
        "******************************************************************************",
        "* Horizon Line.\n     * Consists of two connecting lines. Randomly assigns a flat / bumpy horizon.\n     * @param {HTMLCanvasElement} canvas\n     * @param {Object} spritePos Horizon position in sprite.\n     * @constructor",
        "* Horizon line dimensions.\n     * @enum {number}",
        "* Set the source dimensions of the horizon line.",
        "* Return the crop x position of a type.",
        "* Draw the horizon line.",
        "* Update the x position of an indivdual piece of the line.\n         * @param {number} pos Line position.\n         * @param {number} increment",
        "* Update the horizon line.\n         * @param {number} deltaTime\n         * @param {number} speed",
        "* Reset horizon to the starting position.",
        "******************************************************************************",
        "* Horizon background class.\n     * @param {HTMLCanvasElement} canvas\n     * @param {Object} spritePos Sprite positioning.\n     * @param {Object} dimensions Canvas dimensions.\n     * @param {number} gapCoefficient\n     * @constructor",
        "* Horizon config.\n     * @enum {number}",
        "* Initialise the horizon. Just add the line and a cloud. No obstacles.",
        "* @param {number} deltaTime\n         * @param {number} currentSpeed\n         * @param {boolean} updateObstacles Used as an override to prevent\n         *     the obstacles from being updated / added. This happens in the\n         *     ease in section.\n         * @param {boolean} showNightMode Night mode activated.",
        "* Update the cloud positions.\n         * @param {number} deltaTime\n         * @param {number} currentSpeed",
        "* Update the obstacle positions.\n         * @param {number} deltaTime\n         * @param {number} currentSpeed",
        "* Add a new obstacle.\n         * @param {number} currentSpeed",
        "* Returns whether the previous two obstacles are the same as the next one.\n         * Maximum duplication is set in config value MAX_OBSTACLE_DUPLICATION.\n         * @return {boolean}",
        "* Reset the horizon layer.\n         * Remove existing obstacles and reposition the horizon line.",
        "* Update the canvas width and scaling.\n         * @param {number} width Canvas width.\n         * @param {number} height Canvas height.",
        "* Add a new cloud to the horizon."
    ],
    "functions": [
        "Runner",
        "getRandomNum",
        "vibrate",
        "createCanvas",
        "decodeBase64ToArrayBuffer",
        "getTimeStamp",
        "GameOverPanel",
        "checkForCollision",
        "createAdjustedCollisionBox",
        "drawCollisionBoxes",
        "boxCompare",
        "CollisionBox",
        "Obstacle",
        "Trex",
        "DistanceMeter",
        "Cloud",
        "NightMode",
        "HorizonLine",
        "Horizon",
        "onDocumentLoad"
    ],
    "classes": []
}