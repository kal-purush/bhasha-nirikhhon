{
    "identifiers": [
        "Outcome",
        "OutcomeError",
        "value",
        "resolve",
        "resolve",
        "func",
        "options",
        "func",
        "options",
        "outcome",
        "outcome",
        "outcome",
        "outcome",
        "JobCancellationException",
        "JobCancellationException",
        "JobCancellationReason",
        "JobCancellationException",
        "JobCancellationReason",
        "JobCancellationException",
        "JobCancellationReason",
        "JobCancellationException",
        "JobCancellationReason",
        "func",
        "Job",
        "func",
        "func",
        "func",
        "result",
        "e",
        "e",
        "JobCancellationException",
        "Outcome",
        "e",
        "JobCancellationException",
        "JobCancellationReason",
        "e",
        "milliseconds",
        "setTimeout",
        "milliseconds",
        "result",
        "result",
        "result",
        "JobCancellationException",
        "result",
        "result",
        "func",
        "func",
        "result",
        "milliseconds",
        "resolve",
        "setTimeout",
        "resolve",
        "milliseconds",
        "reason",
        "JobCancellationException",
        "JobCancellationReason",
        "Outcome",
        "reason",
        "JobCancellationException",
        "JobCancellationReason",
        "reason",
        "childrenCopy",
        "job",
        "job",
        "reason",
        "JobCancellationException",
        "JobCancellationReason",
        "child",
        "child",
        "child",
        "child",
        "Job",
        "parent",
        "parent",
        "job",
        "func",
        "func",
        "func",
        "milliseconds",
        "reason",
        "reason",
        "reason",
        "JobCancellationReason"
    ],
    "literals": [
        "\"@ethossoftworks/outcome\"",
        "string",
        "\"JobCancellationException\"",
        "string",
        "${this.reason}"
    ],
    "variables": [
        "result",
        "result",
        "childrenCopy"
    ],
    "comments": [
        "Check parent"
    ],
    "docstrings": [
        "* A cancellable unit of work with optional cancellation hierarchy.\n *\n * Cancellation is cooperative, meaning the user has to define pause/suspension points in the task via the [pause] or\n * [ensureActive] methods or by checking [isActive].\n *\n * Cancelling a parent Job will cancel all children Jobs launched with the job defined as its parent. All children must\n * also cooperatively check for cancellation.\n *\n * A parent job will not wait for any children jobs unless explicitly awaited on in the provided [JobFunc]. In this\n * instance, if the parent completes before its child has completed, the parent will be marked as completed and the\n * children will be cancelled at the next pause point.\n *\n * If an exception is thrown during a JobFunc, the job will cancel itself and its children and then rethrow the\n * exception to be handled by the user.\n *\n * Running a job more than once will result in a [JobCancellationException].\n *\n * Note: When adding a try/catch mechanism inside of a [JobFunc], make sure to rethrow any [JobCancellationException]\n * exceptions, otherwise job cancellation will not work as intended.\n *\n * Example:\n * ```\n const job = Job(async (job) => {\n *     // This creates a pause point. If the job is cancelled while this operation is running,\n *     // the job will immediately return [Error] with a [JobCancellationException] as its result.\n *     const result = await job.pause(someLongRunningTask());\n *\n *     if (result.error != null) {\n *         return Outcome.error(\"Problem\");\n *     }\n *     return Outcome.ok(\"All good!\");\n * });\n *\n * const jobResult = await job.run();\n * ```",
        "* Returns true if the given outcome was cancelled",
        "* Returns true if both the parent job (if one exists) and the current job are both active. A job is active at\n     * creation and remains active until it has completed or been cancelled.",
        "* Returns true if the job was completed successfully",
        "* Returns true if the job was cancelled for any reason, either by explicit invocation of cancel or because its\n     * parent was cancelled. This does not imply that the job has fully completed because it may still be finishing\n     * whatever it was doing and waiting for its children to complete.",
        "* Checks if the parent job and current job are active and throws [JobCancellationException] if either are inactive.\n     *\n     * Note: This should only be used inside of a [JobFunc].",
        "* The current number of active children jobs.",
        "* Creates and returns a new job with the current job as the parent.",
        "* Creates a new job with the current job as the parent and executes it returning its result.\n     *\n     * Note: This should only be used inside of a [JobFunc].",
        "* Execute the job and return its result.\n     *\n     * [run] handles all [JobCancellationException] and will return an [Error] if a cancellation occurs.",
        "* Executes the job and cancels the job if it takes longer than the timeout to complete/cancel.",
        "* Await a given [func] and ensures the job is active before and after [func] execution. This effectively\n     * creates a pause/suspend point for the job and prevents returning a result or performing an action on a result\n     * if the job has been completed/cancelled.\n     *\n     * Note: This should only be used inside of a [JobFunc].",
        "* Delays a job for the specified amount of time and checks for cancellation before and after the delay.",
        "* Cancels the current job and all children jobs.",
        "* Cancels all children jobs without cancelling the current job.",
        "* A helper extension of [Job] that never completes until it is cancelled. This effectively provides a long-running\n * context to launch children jobs in.",
        "* The block of work a [Job] executes. The [job] parameter is a handle of the job's instance to allow\n * launching of new jobs or pausing the job.",
        "* A handle for the current job used in [JobFunc]. This interface is equivalent to [Job]'s interface with the exception\n * of [run] and [runWithTimeout] to prevent recursive running of the [Job] inside its [JobFunc].",
        "* Thrown when a job or its parent is cancelled or if a job is run more than once.",
        "* The reason a job was cancelled.\n *\n * [ParentJobCancelled]: The parent job was cancelled\n * [ParentJobCompleted]: The parent job completed\n * [JobCancelled]: The current job was cancelled\n * [JobCompleted]: The current job was already completed. This only happens if the same job is run more than once."
    ],
    "functions": [
        "isActive",
        "isCompleted",
        "isCancelled",
        "ensureActive",
        "childCount",
        "launch",
        "launchAndRun",
        "run",
        "runWithTimeout",
        "_validateResult",
        "pause",
        "delay",
        "cancel",
        "cancelChildren",
        "_addChild",
        "_removeChild"
    ],
    "classes": [
        "Job",
        "SupervisorJob",
        "JobCancellationException"
    ]
}