{
    "identifiers": [
        "os",
        "llnl",
        "util",
        "tty",
        "tty",
        "spack",
        "config",
        "spack",
        "environment",
        "ev",
        "spack",
        "util",
        "spack_yaml",
        "syaml",
        "spack",
        "environment",
        "config_dict",
        "env",
        "name",
        "config_dict",
        "env",
        "yaml",
        "get",
        "entry",
        "includes",
        "entry",
        "name",
        "env",
        "inc",
        "prepend",
        "config_dict",
        "env",
        "yaml",
        "get",
        "len",
        "include",
        "env",
        "yaml",
        "insert",
        "config_dict",
        "env",
        "yaml",
        "get",
        "prepend",
        "include",
        "insert",
        "inc",
        "include",
        "append",
        "inc",
        "env",
        "write",
        "view",
        "spec",
        "template",
        "format",
        "name",
        "spec",
        "name",
        "short_spec",
        "spec",
        "format",
        "prefix",
        "view",
        "get_projection_for_spec",
        "spec",
        "path",
        "view_key",
        "black_list",
        "white_list",
        "ev",
        "Environment",
        "path",
        "env",
        "check_views",
        "env",
        "views",
        "view_key",
        "KeyError",
        "ev",
        "SpackEnvironmentError",
        "view_key",
        "path",
        "env",
        "_get_environment_specs",
        "env",
        "roots",
        "s",
        "view",
        "specs_for_view",
        "specs",
        "roots",
        "black_list",
        "s",
        "name",
        "black_list",
        "data",
        "write_spec",
        "view",
        "s",
        "white_list",
        "s",
        "name",
        "white_list",
        "data",
        "write_spec",
        "view",
        "s",
        "data",
        "write_spec",
        "view",
        "s",
        "syaml",
        "load_config",
        "data",
        "parser",
        "args",
        "ev",
        "active_environment",
        "env",
        "tty",
        "die",
        "ev",
        "is_env_dir",
        "args",
        "path",
        "tty",
        "die",
        "os",
        "path",
        "abspath",
        "os",
        "path",
        "join",
        "env",
        "path",
        "args",
        "name",
        "create_external_yaml_from_env",
        "args",
        "path",
        "args",
        "view",
        "args",
        "blacklist",
        "args",
        "whitelist",
        "ev",
        "SpackEnvironmentError",
        "e",
        "tty",
        "die",
        "e",
        "long_message",
        "include_entry_exists",
        "env",
        "args",
        "name",
        "args",
        "merge",
        "spack",
        "config",
        "read_config_file",
        "inc_name_abs",
        "spack",
        "config",
        "section_schemas",
        "spack",
        "config",
        "merge_yaml",
        "src",
        "dest",
        "combined",
        "src",
        "add_include_entry",
        "env",
        "args",
        "name",
        "src",
        "open",
        "inc_name_abs",
        "fout",
        "syaml",
        "dump_config",
        "stream",
        "fout",
        "default_flow_style",
        "parser",
        "command_dict",
        "parser",
        "add_parser",
        "help",
        "conflict_handler",
        "ext",
        "add_argument",
        "required",
        "help",
        "ext",
        "add_argument",
        "required",
        "help",
        "ext",
        "add_argument",
        "required",
        "action",
        "help",
        "ext",
        "add_mutually_exclusive_group",
        "select",
        "add_argument",
        "nargs",
        "required",
        "help",
        "select",
        "add_argument",
        "nargs",
        "required",
        "help",
        "ext",
        "add_argument",
        "help",
        "ext",
        "set_defaults",
        "merge",
        "view",
        "name",
        "external"
    ],
    "literals": [
        "'include'",
        "'include'",
        "'spack'",
        "'include'",
        "'include'",
        "'{name}{@version}{%compiler}{variants}{arch=architecture}'",
        "'Requested view %s does not exist in %s'",
        "\"packages:\\n\"",
        "'spack manager external requires an active environment'",
        "'path must point to a spack environment'",
        "'packages'",
        "'w'",
        "'external'",
        "'tools for configuring precompiled'",
        "' binaries'",
        "'resolve'",
        "'-n'",
        "'--name'",
        "'name the new include file for the '",
        "'externals with this name'",
        "'-v'",
        "'--view'",
        "'default'",
        "'name of view to use in the environment'",
        "'-m'",
        "'--merge'",
        "'store_true'",
        "'merge existing yaml files '",
        "'together'",
        "'-w'",
        "'--whitelist'",
        "'*'",
        "'(not implemeted) specs that should '",
        "'be added (omit all others)'",
        "'-b'",
        "'--blacklist'",
        "'*'",
        "'(not implemented) specs that should '",
        "'be omitted (add all others)'",
        "'path'",
        "'The location of the external install '",
        "'directory'",
        "'default'",
        "'externals.yaml'",
        "'external'"
    ],
    "variables": [
        "includes",
        "include",
        "include",
        "template",
        "env",
        "view",
        "specs",
        "roots",
        "data",
        "env",
        "inc_name_abs",
        "src",
        "dest",
        "combined",
        "ext",
        "select",
        "command_dict"
    ],
    "comments": [
        "includes is missing, need to add it",
        "not sure why I can't find SpackEnvironmentViewError from the module",
        "check that directory of ext view exists",
        "copy the file and overwrite any that may exist (or merge?)",
        "merge the existing includes with the new one",
        "giving precedent to the new data coming in"
    ],
    "docstrings": [
        "\"\"\"  {name}:\n    externals:\n    - spec: {short_spec}\n      prefix: {prefix}\n    buildable: false\\n\"\"\""
    ],
    "functions": [
        "include_entry_exists",
        "add_include_entry",
        "write_spec",
        "create_external_yaml_from_env",
        "external",
        "add_command"
    ],
    "classes": []
}