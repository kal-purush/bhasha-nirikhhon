{
    "identifiers": [
        "dagre",
        "graphlib",
        "opt",
        "label",
        "edgeObj",
        "outNodeName",
        "inNodeName",
        "name",
        "edgeObj",
        "outNodeName",
        "inNodeName",
        "name",
        "inNodeName",
        "outNodeName",
        "outNodeName",
        "inNodeName",
        "outNodeName",
        "inNodeName",
        "edge",
        "callback",
        "v",
        "w",
        "name",
        "value",
        "key",
        "sourceId",
        "targetId",
        "value",
        "name",
        "parentName",
        "name",
        "name",
        "id",
        "childName",
        "name",
        "name",
        "callback",
        "nodeId",
        "callback",
        "nodeId",
        "name",
        "label",
        "childName",
        "parentName",
        "name",
        "nodeName",
        "json",
        "read",
        "graph",
        "write",
        "graph",
        "alg",
        "components",
        "graph",
        "dijkstra",
        "graph",
        "source",
        "weightFn",
        "edgeFn",
        "dijkstraAll",
        "graph",
        "weightFn",
        "edgeFn",
        "findCycles",
        "graph",
        "floydWarchall",
        "graph",
        "weightFn",
        "edgeFn",
        "isAcyclic",
        "graph",
        "postorder",
        "graph",
        "nodeNames",
        "preorder",
        "graph",
        "nodeNames",
        "prim",
        "graph",
        "weightFn",
        "tarjam",
        "graph",
        "topsort",
        "graph",
        "graph",
        "layout",
        "key"
    ],
    "literals": [
        "'@dagrejs/graphlib'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'l'",
        "'c'",
        "'r'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "export interface Graph<T = {}>  {",
        "constructor(opt?: { directed?: boolean | undefined; multigraph?: boolean | undefined; compound?: boolean | undefined }): any;",
        "graph(): GraphLabel;",
        "isDirected(): boolean;",
        "isMultigraph(): boolean;",
        "setGraph(label: GraphLabel): Graph<T>;",
        "edge(edgeObj: Edge): GraphEdge;",
        "edge(outNodeName: string, inNodeName: string, name?: string): GraphEdge;",
        "edgeCount(): number;",
        "edges(): Edge[];",
        "hasEdge(edgeObj: Edge): boolean;",
        "hasEdge(outNodeName: string, inNodeName: string, name?: string): boolean;",
        "inEdges(inNodeName: string, outNodeName?: string): Edge[] | undefined;",
        "outEdges(outNodeName: string, inNodeName?: string): Edge[] | undefined;",
        "removeEdge(outNodeName: string, inNodeName: string): Graph<T>;",
        "removeEdge(edge: Edge): Graph<T>;",
        "setDefaultEdgeLabel(callback: string | ((v: string, w: string, name?: string) => string | Label)): Graph<T>;",
        "setEdge(params: Edge, value?: string | { [key: string]: any }): Graph<T>;",
        "setEdge(sourceId: string, targetId: string, value?: string | Label, name?: string): Graph<T>;",
        "children(parentName?: string): string[] | undefined;",
        "hasNode(name: string): boolean;",
        "neighbors(name: string): Node<T>[] | undefined;",
        "node(id: string | Label): Node<T>;",
        "nodeCount(): number;",
        "nodes(): string[];",
        "parent(childName: string): string | undefined;",
        "predecessors(name: string): Node<T>[] | undefined;",
        "removeNode(name: string): Graph<T>;",
        "filterNodes(callback: (nodeId: string) => boolean): Graph<T>;",
        "setDefaultNodeLabel(callback: string | ((nodeId: string) => string | Label)): Graph<T>;",
        "setNode(name: string, label: string | Label): Graph<T>;",
        "setParent(childName: string, parentName: string): void;",
        "sinks(): Node<T>[];",
        "sources(): Node<T>[];",
        "successors(name: string): Node<T>[] | undefined;",
        "nodeEdges(nodeName: string): Edge[];",
        "_nodes?: Node[];",
        "}",
        "// tslint:disable-next-line",
        "export interface json {",
        "read(graph: any): Graph;",
        "write(graph: Graph): any;",
        "}",
        "// tslint:disable-next-line",
        "export interface alg {",
        "components(graph: Graph): string[][];",
        "dijkstra(graph: Graph, source: string, weightFn?: WeightFn, edgeFn?: EdgeFn): any;",
        "dijkstraAll(graph: Graph, weightFn?: WeightFn, edgeFn?: EdgeFn): any;",
        "findCycles(graph: Graph): string[][];",
        "floydWarchall(graph: Graph, weightFn?: WeightFn, edgeFn?: EdgeFn): any;",
        "isAcyclic(graph: Graph): boolean;",
        "postorder(graph: Graph, nodeNames: string | string[]): string[];",
        "preorder(graph: Graph, nodeNames: string | string[]): string[];",
        "prim<T>(graph: Graph<T>, weightFn?: WeightFn): Graph<T>;",
        "tarjam(graph: Graph): string[][];",
        "topsort(graph: Graph): string[];",
        "}",
        "export interface Label {",
        "[key: string]: any;",
        "}",
        "export type WeightFn = (edge: Edge) => number;",
        "export type EdgeFn = (outNodeName: string) => GraphEdge[];"
    ],
    "docstrings": [],
    "functions": [],
    "classes": [
        "Graph"
    ]
}