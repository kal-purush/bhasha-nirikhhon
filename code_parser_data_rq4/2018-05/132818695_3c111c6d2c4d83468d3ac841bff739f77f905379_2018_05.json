{
    "identifiers": [
        "print_function",
        "argparse",
        "os",
        "random",
        "torch",
        "torch",
        "nn",
        "nn",
        "torch",
        "nn",
        "parallel",
        "torch",
        "backends",
        "cudnn",
        "cudnn",
        "torch",
        "optim",
        "optim",
        "torch",
        "utils",
        "data",
        "torchvision",
        "transforms",
        "transforms",
        "torchvision",
        "utils",
        "vutils",
        "torch",
        "autograd",
        "Variable",
        "torch",
        "nn",
        "functional",
        "F",
        "torchvision",
        "datasets",
        "torchvision",
        "utils",
        "save_image",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "opt",
        "os",
        "makedirs",
        "opt",
        "outf",
        "OSError",
        "opt",
        "manualSeed",
        "random",
        "randint",
        "opt",
        "manualSeed",
        "random",
        "seed",
        "opt",
        "manualSeed",
        "torch",
        "manual_seed",
        "opt",
        "manualSeed",
        "opt",
        "cuda",
        "torch",
        "cuda",
        "manual_seed_all",
        "opt",
        "manualSeed",
        "opt",
        "cuda",
        "torch",
        "cuda",
        "is_available",
        "opt",
        "cuda",
        "torch",
        "utils",
        "data",
        "DataLoader",
        "datasets",
        "MNIST",
        "train",
        "download",
        "transform",
        "transforms",
        "ToTensor",
        "batch_size",
        "opt",
        "batchSize",
        "shuffle",
        "kwargs",
        "opt",
        "ngpu",
        "opt",
        "nz",
        "opt",
        "ngf",
        "opt",
        "ndf",
        "m",
        "m",
        "__class__",
        "classname",
        "find",
        "m",
        "weight",
        "data",
        "normal_",
        "classname",
        "find",
        "m",
        "weight",
        "data",
        "normal_",
        "m",
        "bias",
        "data",
        "fill_",
        "nn",
        "Module",
        "ngpu",
        "_netG",
        "ngpu",
        "nn",
        "Sequential",
        "nn",
        "ConvTranspose2d",
        "nz",
        "ngf",
        "bias",
        "nn",
        "BatchNorm2d",
        "ngf",
        "nn",
        "ReLU",
        "nn",
        "ConvTranspose2d",
        "ngf",
        "ngf",
        "bias",
        "nn",
        "BatchNorm2d",
        "ngf",
        "nn",
        "ReLU",
        "nn",
        "ConvTranspose2d",
        "ngf",
        "ngf",
        "bias",
        "nn",
        "BatchNorm2d",
        "ngf",
        "nn",
        "ReLU",
        "nn",
        "ConvTranspose2d",
        "ngf",
        "nc",
        "bias",
        "nn",
        "Sigmoid",
        "input",
        "isinstance",
        "input",
        "data",
        "torch",
        "cuda",
        "FloatTensor",
        "ngpu",
        "nn",
        "parallel",
        "data_parallel",
        "main",
        "input",
        "ngpu",
        "main",
        "input",
        "output",
        "_netG",
        "ngpu",
        "netG",
        "apply",
        "weights_init",
        "opt",
        "netG",
        "netG",
        "load_state_dict",
        "torch",
        "load",
        "opt",
        "netG",
        "netG",
        "nn",
        "Module",
        "ngpu",
        "_netD",
        "ngpu",
        "nn",
        "Sequential",
        "nn",
        "Conv2d",
        "nc",
        "ndf",
        "bias",
        "nn",
        "LeakyReLU",
        "inplace",
        "nn",
        "Conv2d",
        "ndf",
        "ndf",
        "bias",
        "nn",
        "BatchNorm2d",
        "ndf",
        "nn",
        "LeakyReLU",
        "inplace",
        "nn",
        "Conv2d",
        "ndf",
        "ndf",
        "bias",
        "nn",
        "BatchNorm2d",
        "ndf",
        "nn",
        "LeakyReLU",
        "inplace",
        "nn",
        "Conv2d",
        "ndf",
        "bias",
        "nn",
        "Sigmoid",
        "input",
        "isinstance",
        "input",
        "data",
        "torch",
        "cuda",
        "FloatTensor",
        "ngpu",
        "nn",
        "parallel",
        "data_parallel",
        "main",
        "input",
        "ngpu",
        "main",
        "input",
        "output",
        "view",
        "squeeze",
        "_netD",
        "ngpu",
        "netD",
        "apply",
        "weights_init",
        "opt",
        "netD",
        "netD",
        "load_state_dict",
        "torch",
        "load",
        "opt",
        "netD",
        "netD",
        "nn",
        "BCELoss",
        "torch",
        "FloatTensor",
        "opt",
        "batchSize",
        "nc",
        "opt",
        "imageSize",
        "opt",
        "imageSize",
        "torch",
        "FloatTensor",
        "opt",
        "batchSize",
        "nz",
        "torch",
        "FloatTensor",
        "opt",
        "batchSize",
        "nz",
        "normal_",
        "torch",
        "FloatTensor",
        "opt",
        "batchSize",
        "opt",
        "cuda",
        "netD",
        "cuda",
        "netG",
        "cuda",
        "criterion",
        "cuda",
        "input",
        "cuda",
        "label",
        "cuda",
        "noise",
        "cuda",
        "fixed_noise",
        "cuda",
        "Variable",
        "fixed_noise",
        "optim",
        "Adam",
        "netD",
        "parameters",
        "lr",
        "opt",
        "lr",
        "betas",
        "opt",
        "beta1",
        "optim",
        "Adam",
        "netG",
        "parameters",
        "lr",
        "opt",
        "lr",
        "betas",
        "opt",
        "beta1",
        "epoch",
        "opt",
        "niter",
        "i",
        "data",
        "train_loader",
        "netD",
        "zero_grad",
        "data",
        "real_cpu",
        "size",
        "opt",
        "cuda",
        "real_cpu",
        "cuda",
        "input",
        "resize_as_",
        "real_cpu",
        "copy_",
        "real_cpu",
        "label",
        "resize_",
        "batch_size",
        "fill_",
        "real_label",
        "Variable",
        "input",
        "Variable",
        "label",
        "netD",
        "inputv",
        "criterion",
        "output",
        "labelv",
        "errD_real",
        "backward",
        "output",
        "data",
        "mean",
        "noise",
        "resize_",
        "batch_size",
        "nz",
        "normal_",
        "Variable",
        "noise",
        "netG",
        "noisev",
        "Variable",
        "label",
        "fill_",
        "fake_label",
        "netD",
        "fake",
        "detach",
        "criterion",
        "output",
        "labelv",
        "errD_fake",
        "backward",
        "output",
        "data",
        "mean",
        "errD_real",
        "errD_fake",
        "optimizerD",
        "step",
        "netG",
        "zero_grad",
        "Variable",
        "label",
        "fill_",
        "real_label",
        "netD",
        "fake",
        "criterion",
        "output",
        "labelv",
        "errG",
        "backward",
        "output",
        "data",
        "mean",
        "optimizerG",
        "step",
        "epoch",
        "opt",
        "niter",
        "i",
        "len",
        "train_loader",
        "errD",
        "data",
        "errG",
        "data",
        "D_x",
        "D_G_z1",
        "D_G_z2",
        "i",
        "D_G_list",
        "append",
        "D_G_z1",
        "G_losses",
        "append",
        "errG",
        "data",
        "i",
        "vutils",
        "save_image",
        "real_cpu",
        "opt",
        "outf",
        "netG",
        "fixed_noise",
        "vutils",
        "save_image",
        "fake",
        "data",
        "opt",
        "outf",
        "epoch",
        "torch",
        "save",
        "netG",
        "state_dict",
        "opt",
        "outf",
        "epoch",
        "torch",
        "save",
        "netD",
        "state_dict",
        "opt",
        "outf",
        "epoch",
        "numpy",
        "np",
        "fake",
        "data",
        "cpu",
        "numpy",
        "np",
        "array",
        "mydata",
        "i",
        "flatten",
        "i",
        "mydata",
        "shape",
        "np",
        "savetxt",
        "opt",
        "outf",
        "epoch",
        "mydata",
        "delimiter",
        "real_cpu",
        "cpu",
        "numpy",
        "np",
        "array",
        "mydata",
        "i",
        "flatten",
        "i",
        "mydata",
        "shape",
        "np",
        "savetxt",
        "opt",
        "outf",
        "epoch",
        "mydata",
        "delimiter",
        "np",
        "array",
        "D_G_list",
        "np",
        "savetxt",
        "opt",
        "outf",
        "epoch",
        "D_G_array",
        "delimiter",
        "np",
        "array",
        "G_losses",
        "np",
        "savetxt",
        "opt",
        "outf",
        "epoch",
        "G_losses_array",
        "delimiter"
    ],
    "literals": [
        "'--dataset'",
        "'cifar10 | lsun | imagenet | folder | lfw | fake'",
        "'--dataroot'",
        "'path to dataset'",
        "'--workers'",
        "'number of data loading workers'",
        "'--batchSize'",
        "'input batch size'",
        "'--imageSize'",
        "'the height / width of the input image to network'",
        "'--nz'",
        "'size of the latent z vector'",
        "'--ngf'",
        "'--ndf'",
        "'--niter'",
        "'number of epochs to train for'",
        "'--lr'",
        "'learning rate, default=0.0002'",
        "'--beta1'",
        "'beta1 for adam. default=0.5'",
        "'--cuda'",
        "'store_true'",
        "'enables cuda'",
        "'--ngpu'",
        "'number of GPUs to use'",
        "'--netG'",
        "''",
        "\"path to netG (to continue training)\"",
        "'--netD'",
        "''",
        "\"path to netD (to continue training)\"",
        "'--outf'",
        "'.'",
        "'folder to output images and model checkpoints'",
        "'--manualSeed'",
        "'manual seed'",
        "\"Random Seed: \"",
        "'num_workers'",
        "'pin_memory'",
        "\"WARNING: You have a CUDA device, so you should probably run with --cuda\"",
        "'../data'",
        "'Conv'",
        "'BatchNorm'",
        "''",
        "''",
        "'[%d/%d][%d/%d] Loss_D: %.4f Loss_G: %.4f D(x): %.4f D(G(z)): %.4f / %.4f'",
        "'%s/real_samples.png'",
        "'%s/fake_samples_epoch_%03d.png'",
        "'%s/netG_epoch_%d.pth'",
        "'%s/netD_epoch_%d.pth'",
        "'%s/fake_images%d_gan_mnist.csv'",
        "\",\"",
        "'%s/real_images%d_gan_mnist.csv'",
        "\",\"",
        "'%s/D_G_z%d_gan_mnist.csv'",
        "\",\"",
        "'%s/G_losses%d_gan_mnist.csv'",
        "\",\""
    ],
    "variables": [
        "parser",
        "opt",
        "opt",
        "manualSeed",
        "cudnn",
        "benchmark",
        "kwargs",
        "train_loader",
        "ngpu",
        "nz",
        "ngf",
        "ndf",
        "nc",
        "classname",
        "ngpu",
        "main",
        "output",
        "output",
        "netG",
        "ngpu",
        "main",
        "output",
        "output",
        "netD",
        "criterion",
        "input",
        "noise",
        "fixed_noise",
        "label",
        "real_label",
        "fake_label",
        "input",
        "label",
        "noise",
        "fixed_noise",
        "fixed_noise",
        "optimizerD",
        "optimizerG",
        "D_G_list",
        "G_losses",
        "real_cpu",
        "_",
        "batch_size",
        "real_cpu",
        "inputv",
        "labelv",
        "output",
        "errD_real",
        "D_x",
        "noisev",
        "fake",
        "labelv",
        "output",
        "errD_fake",
        "D_G_z1",
        "errD",
        "labelv",
        "output",
        "errG",
        "D_G_z2",
        "fake",
        "mydata",
        "mydata",
        "mydata",
        "mydata",
        "D_G_array",
        "G_losses_array"
    ],
    "comments": [
        "import torchvision.datasets as dset",
        "parser.add_argument('--vae_epochs', type=int, default=5, help='number of epochs to train for')",
        "",
        "if opt.dataset in ['imagenet', 'folder', 'lfw']:",
        "# folder dataset",
        "dataset = dset.ImageFolder(root=opt.dataroot,",
        "transform=transforms.Compose([",
        "transforms.Resize(opt.imageSize),",
        "transforms.CenterCrop(opt.imageSize),",
        "transforms.ToTensor(),",
        "transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),",
        "]))",
        "elif opt.dataset == 'lsun':",
        "dataset = dset.LSUN(root=opt.dataroot, classes=['bedroom_train'],",
        "transform=transforms.Compose([",
        "transforms.Resize(opt.imageSize),",
        "transforms.CenterCrop(opt.imageSize),",
        "transforms.ToTensor(),",
        "transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),",
        "]))",
        "elif opt.dataset == 'cifar10':",
        "dataset = dset.CIFAR10(root=opt.dataroot, download=True,",
        "transform=transforms.Compose([",
        "transforms.Resize(opt.imageSize),",
        "transforms.ToTensor(),",
        "",
        "]))",
        "elif opt.dataset == 'fake':",
        "dataset = dset.FakeData(image_size=(3, opt.imageSize, opt.imageSize),",
        "transform=transforms.ToTensor())",
        "assert dataset",
        "dataloader = torch.utils.data.DataLoader(dataset, batch_size=opt.batchSize,",
        "shuffle=True, num_workers=int(opt.workers))",
        "pretrain_loader = torch.utils.data.DataLoader(",
        "datasets.MNIST('../data', train=False, download=True, transform=transforms.ToTensor()),",
        "batch_size=opt.batchSize, shuffle=True, **kwargs)",
        "custom weights initialization called on netG and netD",
        "input is Z, going into a convolution",
        "state size. (ngf*4) x 4 x 4",
        "state size. (ngf*2) x 8 x 8",
        "state size. (ngf) x 14 x 14",
        "nn.BatchNorm2d(ngf),",
        "nn.ReLU(True),",
        "state size. (ngf) x  x 32",
        "nn.ConvTranspose2d(    ngf,      nc, 4, 2, 1, bias=False),",
        "nn.Tanh()",
        "state size. (nc) x 28 x 28",
        "input is (nc) x 28 x 28",
        "state size. (ndf) x 32 x 32",
        "nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False),",
        "nn.BatchNorm2d(ndf * 2),",
        "nn.LeakyReLU(0.2, inplace=True),",
        "state size. (ndf) x 14 x 14",
        "state size. (ndf*4) x 8 x 8",
        "state size. (ndf*8) x 4 x 4",
        "nn.BCEWithLogitsLoss more numerically stable",
        "setup optimizer",
        "",
        "(1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))",
        "",
        "train with real",
        "train with fake",
        "",
        "(2) Update G network: maximize log(D(G(z)))",
        "",
        "fake labels are real for generator cost",
        "do checkpointing",
        "Save final images for t-SNE",
        "print(mydata.shape)",
        "(16, 3, 64, 64)",
        "Real images",
        "save D_G"
    ],
    "docstrings": [],
    "functions": [
        "weights_init",
        "forward",
        "forward"
    ],
    "classes": [
        "_netG",
        "_netD"
    ]
}