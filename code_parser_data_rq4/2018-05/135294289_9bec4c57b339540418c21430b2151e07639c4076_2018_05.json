{
    "identifiers": [
        "re",
        "os",
        "subprocess",
        "requests",
        "time",
        "tempfile",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "strip",
        "split",
        "line",
        "lines",
        "line",
        "startswith",
        "line",
        "strip",
        "subprocess",
        "check_output",
        "cmd",
        "subprocess",
        "Popen",
        "cmd",
        "stdin",
        "subprocess",
        "PIPE",
        "stdout",
        "subprocess",
        "PIPE",
        "proc",
        "communicate",
        "decode",
        "strip",
        "split",
        "re",
        "findall",
        "RELEASE_BRANCH_REGEX",
        "len",
        "tags",
        "ValueError",
        "format",
        "RELEASE_BRANCH_REGEX",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "strip",
        "split",
        "tag",
        "tags",
        "tag",
        "split",
        "component",
        "component_tags",
        "first_commit_id",
        "tag",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "component_tags",
        "component",
        "append",
        "tag",
        "strip",
        "component_tags",
        "pre_tag",
        "cur_tag",
        "pre_tag",
        "cur_tag",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "line",
        "line",
        "split",
        "line",
        "strip",
        "line",
        "lines",
        "re",
        "findall",
        "FT_REGEX",
        "line",
        "re",
        "findall",
        "GITHUB_PULL_ID_REGEX",
        "line",
        "strip",
        "strip",
        "line",
        "strip",
        "strip",
        "split",
        "os",
        "path",
        "join",
        "cur_tag",
        "strip",
        "split",
        "commit_id",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "strip",
        "split",
        "f",
        "files",
        "f",
        "strip",
        "f",
        "strip",
        "startswith",
        "dir_path",
        "file_changed",
        "tickets",
        "append",
        "date",
        "commit_id",
        "title",
        "ft",
        "pull_id",
        "tickets",
        "fts",
        "ft",
        "fts",
        "ft",
        "tickets",
        "append",
        "JIRA_ISSUE_REST_API",
        "ft",
        "_",
        "requests",
        "get",
        "url",
        "auth",
        "JIRA_ACCOUNT",
        "JIRA_TOKEN",
        "r",
        "status_code",
        "r",
        "json",
        "tickets",
        "append",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "format",
        "ft",
        "r",
        "status_code",
        "time",
        "sleep",
        "sleep_sec",
        "sleep_sec",
        "requests",
        "HTTPError",
        "format",
        "ft",
        "tickets",
        "title",
        "headers",
        "rows",
        "row",
        "rows",
        "len",
        "headers",
        "len",
        "row",
        "ValueError",
        "text",
        "format",
        "title",
        "text",
        "format",
        "join",
        "headers",
        "text",
        "format",
        "join",
        "len",
        "header",
        "header",
        "headers",
        "row",
        "rows",
        "text",
        "join",
        "row",
        "text",
        "text",
        "text",
        "component_tags",
        "format",
        "ques",
        "component",
        "tags",
        "component_tags",
        "items",
        "idx",
        "format",
        "idx",
        "component",
        "component",
        "format",
        "idx",
        "end",
        "input",
        "option_number",
        "ValueError",
        "format",
        "option_number",
        "option_number",
        "idx",
        "ValueError",
        "format",
        "idx",
        "option_number",
        "end",
        "input",
        "strip",
        "end",
        "input",
        "strip",
        "idx_component",
        "option_number",
        "component_tags",
        "component",
        "rsplit",
        "format",
        "cur_version",
        "end",
        "input",
        "strip",
        "re",
        "findall",
        "VERSION_REGEX",
        "version",
        "version",
        "find_version",
        "ValueError",
        "format",
        "find_version",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "strip",
        "split",
        "component",
        "component_tags",
        "component_tags",
        "component",
        "append",
        "format",
        "component",
        "version",
        "latest_commit_id",
        "component",
        "version",
        "component_tags",
        "format",
        "ques",
        "end",
        "input",
        "strip",
        "lower",
        "open_vim",
        "ValueError",
        "open_vim",
        "os",
        "environ",
        "get",
        "tempfile",
        "NamedTemporaryFile",
        "f",
        "f",
        "close",
        "subprocess",
        "check_call",
        "editor",
        "f",
        "name",
        "subprocess",
        "CalledProcessError",
        "e",
        "IOError",
        "format",
        "editor",
        "e",
        "returncode",
        "open",
        "f",
        "name",
        "g",
        "g",
        "read",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "strip",
        "ValueError",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "subprocess",
        "CalledProcessError",
        "ValueError",
        "component",
        "tags",
        "component_tags",
        "items",
        "i",
        "len",
        "tags",
        "format",
        "tags",
        "i",
        "fetch_github_tickets",
        "tags",
        "i",
        "tags",
        "i",
        "ticket",
        "ticket",
        "github_tickets",
        "fetch_jira_tickets",
        "fts",
        "github_tickets",
        "i",
        "jira_tickets",
        "i",
        "i",
        "len",
        "fts",
        "ticket",
        "tickets",
        "rows",
        "append",
        "ticket",
        "ticket",
        "ticket",
        "ticket",
        "ticket",
        "ticket",
        "format",
        "ticket",
        "GITHUB_PULL_URL",
        "ticket",
        "format",
        "ticket",
        "JIRA_TICKET_URL",
        "ticket",
        "component",
        "component_text",
        "generate_markdown_text",
        "tags",
        "i",
        "headers",
        "rows",
        "component_text",
        "component",
        "text",
        "component",
        "text",
        "component_text",
        "items",
        "COMPONENT_FILE_PATH",
        "format",
        "component",
        "format",
        "f_path",
        "open",
        "f_path",
        "f",
        "f",
        "write",
        "text",
        "component",
        "version",
        "format",
        "component",
        "version",
        "format",
        "tag",
        "end",
        "input",
        "strip",
        "lower",
        "run_script",
        "ValueError",
        "run_script",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "format",
        "tag",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "format",
        "tag",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "format",
        "tag",
        "end",
        "input",
        "strip",
        "lower",
        "run_script",
        "ValueError",
        "format",
        "tag",
        "format",
        "tag",
        "format",
        "tag",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "abspath",
        "os",
        "sep",
        "join",
        "cur_dir",
        "split",
        "os",
        "sep",
        "os",
        "chdir",
        "project_dir",
        "get_current_branch",
        "fetch_github_release",
        "command_prompt_step1",
        "component_tags",
        "command_prompt_step2",
        "component_tags",
        "command_prompt_step3_step4",
        "component",
        "version",
        "main"
    ],
    "literals": [
        "'https://github.com/Formlabs/factory-software/commit/'",
        "'https://github.com/Formlabs/factory-software/pull/'",
        "'https://formlabs.atlassian.net/browse/'",
        "'https://formlabs.atlassian.net/rest/api/2/issue/'",
        "'steve.liu@formlabs.com'",
        "'WEG7yCBj03YHnwPJkDRL34F7'",
        "'[A-Z]{2}-[0-9]+|$'",
        "' #[0-9]+ |$'",
        "'release/[0-1a-z-]+/(?:[0-9]+\\.)+[0-9]'",
        "'(?:[0-9]+\\.)+[0-9]|$'",
        "'components/{}/release-notes.md'",
        "'git'",
        "'branch'",
        "'unicode_escape'",
        "'\\n'",
        "'* '",
        "'git'",
        "'tag'",
        "'sort'",
        "'-V'",
        "'utf-8'",
        "'\\n'",
        "'No Tags matching pattern {} found.'",
        "'git'",
        "'log'",
        "'--pretty=format:%H'",
        "'--reverse'",
        "'unicode_escape'",
        "'/'",
        "'tag'",
        "'commit_id'",
        "'git'",
        "'rev-list'",
        "'-n'",
        "'1'",
        "'unicode_escape'",
        "'tag'",
        "'commit_id'",
        "'git'",
        "'--no-pager'",
        "'log'",
        "'--format=\"%ad %H %s\"'",
        "'--date=short'",
        "'commit_id'",
        "'...'",
        "'commit_id'",
        "'unicode_escape'",
        "'\\n'",
        "'#'",
        "'\"'",
        "' '",
        "'components'",
        "'tag'",
        "'/'",
        "'/'",
        "'git'",
        "'--no-pager'",
        "'show'",
        "'--stat'",
        "'unicode_escape'",
        "'\\n'",
        "'\\n'",
        "''",
        "'date'",
        "'commit_id'",
        "'title'",
        "'ft'",
        "'pull_id'",
        "'summary'",
        "''",
        "'description'",
        "''",
        "'assignee_name'",
        "''",
        "'reporter_name'",
        "''",
        "'priority_name'",
        "''",
        "'priority_icon_url'",
        "''",
        "'status_name'",
        "''",
        "'status_icon_url'",
        "''",
        "'jira_url'",
        "''",
        "'summary'",
        "'fields'",
        "'summary'",
        "'description'",
        "'fields'",
        "'description'",
        "'assignee_name'",
        "'fields'",
        "'assignee'",
        "'name'",
        "'fields'",
        "'assignee'",
        "''",
        "'reporter_name'",
        "'fields'",
        "'reporter'",
        "'name'",
        "'priority_name'",
        "'fields'",
        "'priority'",
        "'name'",
        "'priority_icon_url'",
        "'fields'",
        "'priority'",
        "'iconUrl'",
        "'status_name'",
        "'fields'",
        "'status'",
        "'name'",
        "'status_icon_url'",
        "'fields'",
        "'status'",
        "'iconUrl'",
        "'jira_url'",
        "'https://formlabs.atlassian.net/browse/{}'",
        "'connection to JIRA with ticket {} failed after 3 times'",
        "'In Markdown table, we expect the length of row is equal to the headers.'",
        "'\\n'",
        "'## {}\\n\\n'",
        "'| {} |\\n'",
        "' | '",
        "'|{}|\\n'",
        "'|'",
        "'-'",
        "'|'",
        "'|'",
        "'|'",
        "'\\n'",
        "'\\n'",
        "'1. Which component you are going to release?'",
        "'{}\\n'",
        "'    [0] Release a new component'",
        "'    ---------------------------'",
        "'    [{}] {}'",
        "'Input the number of component [0~{}]: '",
        "''",
        "'{} is not an integer'",
        "'The number of component should be between 0 and {}'",
        "\"Input name of new component: \"",
        "''",
        "'Input the version number: '",
        "''",
        "'tag'",
        "'/'",
        "'Input the version (current latest version is {}): '",
        "''",
        "'{} is not a valid version format.'",
        "'git'",
        "'log'",
        "'--pretty=format:%H'",
        "'unicode_escape'",
        "'tag'",
        "'release/{}/{}'",
        "'commit_id'",
        "'2. Would you like to add summaries to this release? [Y/N]: '",
        "'{}'",
        "''",
        "'y'",
        "'n'",
        "'yes'",
        "'no'",
        "'Only \"Y\", \"N\", \"Yes\" and \"NO\" are allowed'",
        "'y'",
        "'yes'",
        "'EDITOR'",
        "'vim'",
        "'{} exited with code {}.'",
        "'git'",
        "'ls-files'",
        "'--other'",
        "'--directory'",
        "'--exclude-standard'",
        "'unicode_escape'",
        "'You have untracked files. Please stage all the files.'",
        "'git'",
        "'diff-index'",
        "'--quiet'",
        "'HEAD'",
        "'--'",
        "'unicode_escape'",
        "'You have uncommited files. Please commit all the changes.'",
        "'    \"{}\" release notes is generating...'",
        "'tag'",
        "'ft'",
        "'Date'",
        "'Summary'",
        "'Assignee'",
        "'Reporter'",
        "'Priority'",
        "'Status'",
        "'Github'",
        "'JIRA'",
        "'date'",
        "'summary'",
        "'assignee_name'",
        "'reporter_name'",
        "'priority_name'",
        "'status_name'",
        "'[{}]({}{})'",
        "'ft'",
        "'pull_id'",
        "'[{}]({}{})'",
        "'ft'",
        "'ft'",
        "''",
        "'tag'",
        "'    \"{}\" file is generated'",
        "'w'",
        "'release/{}/{}'",
        "'3. The release script is going to run the following COMMIT and TAG commands.'",
        "'    >> git add .'",
        "'    >> git commit -m '",
        "'    >> git tag {}'",
        "'Do you want the release script run these commands for you? [Y/N]: '",
        "''",
        "'y'",
        "'n'",
        "'yes'",
        "'no'",
        "'Only \"Y\", \"N\", \"Yes\" and \"No\" are allowed'",
        "'y'",
        "'yes'",
        "'git'",
        "'add'",
        "'.'",
        "'unicode_escape'",
        "'git'",
        "'commit'",
        "'-m'",
        "'Release {}'",
        "'unicode_escape'",
        "'git'",
        "'tag'",
        "'{}'",
        "'unicode_escape'",
        "'4. The release script is going to run the following PUSH commands.'",
        "'    >> git push upstream master'",
        "'    >> git push upstream {}'",
        "'Do you want the script run these commands for you? [Y/N]: '",
        "''",
        "'y'",
        "'n'",
        "'yes'",
        "'no'",
        "'Only \"Y\", \"N\", \"Yes\" and \"No\" are allowed'",
        "'4. Please type the following commands to commit, tag and push the codes by yourself.'",
        "'    >> git add .'",
        "'    >> git commit -m '",
        "'    >> git tag {}'",
        "'    >> git push upstream master'",
        "'    >> git tag {}'",
        "''",
        "'__main__'"
    ],
    "variables": [
        "GITHUB_COMMIT_URL",
        "GITHUB_PULL_URL",
        "JIRA_TICKET_URL",
        "JIRA_ISSUE_REST_API",
        "JIRA_ACCOUNT",
        "JIRA_TOKEN",
        "FT_REGEX",
        "GITHUB_PULL_ID_REGEX",
        "RELEASE_BRANCH_REGEX",
        "VERSION_REGEX",
        "COMPONENT_FILE_PATH",
        "cmd",
        "lines",
        "cmd",
        "cmd",
        "proc",
        "tags",
        "tags",
        "cmd",
        "first_commit_id",
        "component_tags",
        "_",
        "component",
        "version",
        "component_tags",
        "component",
        "cmd",
        "cmd",
        "tickets",
        "lines",
        "ft",
        "pull_id",
        "date",
        "commit_id",
        "title",
        "file_changed",
        "dir_path",
        "cmd",
        "files",
        "file_changed",
        "tickets",
        "url",
        "sleep_sec",
        "r",
        "data",
        "text",
        "ques",
        "idx",
        "idx_component",
        "idx_component",
        "idx",
        "option_number",
        "option_number",
        "component",
        "version",
        "component",
        "cur_version",
        "version",
        "find_version",
        "cmd",
        "latest_commit_id",
        "ques",
        "open_vim",
        "editor",
        "cmd",
        "cmd",
        "component_text",
        "github_tickets",
        "fts",
        "jira_tickets",
        "tickets",
        "headers",
        "rows",
        "component_text",
        "component",
        "text",
        "f_path",
        "tag",
        "run_script",
        "cmd",
        "cmd",
        "cmd",
        "run_script",
        "cur_dir",
        "project_dir",
        "branch",
        "remote",
        "component_tags",
        "component",
        "version"
    ],
    "comments": [
        "!/usr/bin/python3",
        "github",
        "jira",
        "",
        "1) Atlassian API TOKEN (https://confluence.atlassian.com/cloud/api-tokens-938839638.html)",
        "",
        "i.e: curl -v https://mysite.atlassian.net --user me@example.com:my-api-token",
        "",
        "2) JIRA Server Get Issue API (https://docs.atlassian.com/software/jira/docs/api/REST/7.6.1/#api/2/issue-getIssue)",
        "",
        "i.e: curl \\",
        "-u steve.liu@formlabs.com:WEG7yCBj03YHnwPJkDRL34F7 \\",
        "-X GET \\",
        "https://formlabs.atlassian.net/rest/api/2/issue/FT-1778",
        "",
        "regex",
        "misc",
        "find all tags",
        "find all tags",
        "sort by version number",
        "find the first commit",
        "group the version number",
        "find commit id by tag",
        "find commits between two commits",
        "find valid tickets mentioned in those commits",
        "find files changed",
        "goes from the end of line to find the matching directory",
        "a ticket is valid if we found the FT, Pull Request ID and files under the directory changed",
        "The length of each row should be equal to the headers",
        "table title",
        "table header",
        "table separator",
        "tables rows",
        "prompt the description",
        "get the choose component",
        "further component and version",
        "check the format of version",
        "get latest commit id",
        "we add new component & tag",
        "return [component, version]",
        "question",
        "yes/no flag to open editor",
        "TODO: how to integrate into MD?",
        "Launch editor on an empty temporary file, wait for it to exit, and",
        "if it exited successfully, return the contents of the file.",
        "check if there is any unstaged or untracked files",
        "generate notes text",
        "Iterate the versions from latest to oldest",
        "List all github/jira tickets between them",
        "Merge two tickets into one",
        "concatenate the Markdown text",
        "write text into the files",
        "question",
        "get the yes/no flag",
        "add & commit & tag",
        "list the description TODO replace the master & git push -u upstream",
        "get the yes/no flag",
        "TODO: git push commands",
        "list the description TODO replace the master & git push -u upstream",
        "change work directory",
        "use the `os.sep` concatenate ['', 'a', 'b', 'c'] to /a/b/c",
        "get branch name",
        "fetch release tags",
        "step 1: choose component",
        "step 2: open editor and generate docs",
        "step 3 & 4: commit the codes and push the codes"
    ],
    "docstrings": [
        "\"\"\"Get current branch name.\n    \"\"\"",
        "\"\"\"Return a dictionary contain the branches and version numbers.\n    \"\"\"",
        "\"\"\"Return a list of dict with Github information.\n    \"\"\"",
        "\"\"\"Return a list of dict which JIRA information.\n    \"\"\"",
        "\"\"\"Return string for the MarkDown Table.\n\n    A Single Markdown Table:\n\n    ### title\n\n    | header[0]  | header[1]  | header[2]  | header[3]  |\n    -----------------------------------------------------\n    | rows[0][0] | rows[0][1] | rows[0][2] | rows[0][3] |\n    | rows[1][0] | rows[1][1] | rows[1][2] | rows[1][3] |\n    | rows[2][0] | rows[2][1] | rows[2][2] | rows[2][3] |\n    | rows[3][0] | rows[3][1] | rows[3][2] | rows[3][3] |\n\n    \"\"\"",
        "\"\"\"Get the component to create or release.\n    \"\"\"",
        "\"\"\"Prompt the Vim to edit the Markdown file.\n    \"\"\"",
        "\"\"\"Stage and commit all the documentations and then tag the commitment.\n    \"\"\""
    ],
    "functions": [
        "get_current_branch",
        "fetch_github_release",
        "fetch_github_tickets",
        "fetch_jira_tickets",
        "generate_markdown_text",
        "command_prompt_step1",
        "command_prompt_step2",
        "command_prompt_step3_step4",
        "main"
    ],
    "classes": []
}