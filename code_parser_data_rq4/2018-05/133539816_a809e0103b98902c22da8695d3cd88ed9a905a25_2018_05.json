{
    "identifiers": [
        "path",
        "os",
        "DebugProtocol",
        "DebugSession",
        "InitializedEvent",
        "TerminatedEvent",
        "ThreadEvent",
        "StoppedEvent",
        "OutputEvent",
        "StackFrame",
        "Scope",
        "Source",
        "Handles",
        "existsSync",
        "lstatSync",
        "basename",
        "dirname",
        "extname",
        "spawn",
        "ChildProcess",
        "execSync",
        "spawnSync",
        "Client",
        "RPCConnection",
        "parseEnvFile",
        "getBinPathWithPreferredGopath",
        "resolveHomeDir",
        "getGoRuntimePath",
        "getInferredGopath",
        "getCurrentGoWorkspaceFromGOPATH",
        "envPath",
        "fixDriveCasingInWindows",
        "logger",
        "require",
        "GoReflectKind",
        "DebugProtocol",
        "key",
        "process",
        "err",
        "err",
        "err",
        "err",
        "logger",
        "errMessage",
        "err",
        "args",
        "args",
        "arg",
        "arg",
        "arg",
        "arg",
        "args",
        "logger",
        "logArgsToString",
        "args",
        "args",
        "logger",
        "logArgsToString",
        "args",
        "args",
        "logger",
        "logArgsToString",
        "args",
        "filePath",
        "process",
        "filePath",
        "path",
        "filePath",
        "fixDriveCasingInWindows",
        "filePath",
        "filePath",
        "code",
        "remotePath",
        "port",
        "host",
        "program",
        "launchArgs",
        "normalizePath",
        "program",
        "remotePath",
        "launchArgs",
        "dirname",
        "program",
        "launchArgs",
        "resolve",
        "reject",
        "program",
        "reject",
        "lstatSync",
        "program",
        "pstats",
        "mode",
        "logError",
        "program",
        "reject",
        "dlvCwd",
        "program",
        "isProgramDirectory",
        "mode",
        "extname",
        "program",
        "logError",
        "program",
        "reject",
        "e",
        "logError",
        "program",
        "e",
        "reject",
        "fileEnv",
        "parseEnvFile",
        "launchArgs",
        "e",
        "reject",
        "e",
        "process",
        "fileEnv",
        "launchArgsEnv",
        "isProgramDirectory",
        "program",
        "path",
        "program",
        "env",
        "mode",
        "mode",
        "env",
        "getInferredGopath",
        "dirname",
        "env",
        "verbose",
        "env",
        "launchArgs",
        "mode",
        "isProgramDirectory",
        "spawn",
        "getGoRuntimePath",
        "program",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "code",
        "logError",
        "code",
        "code",
        "err",
        "reject",
        "err",
        "resolve",
        "mode",
        "serverRunning",
        "connectClient",
        "port",
        "host",
        "getBinPathWithPreferredGopath",
        "resolveHomeDir",
        "env",
        "process",
        "existsSync",
        "dlv",
        "verbose",
        "process",
        "env",
        "env",
        "envPath",
        "reject",
        "getCurrentGoWorkspaceFromGOPATH",
        "env",
        "dirname",
        "mode",
        "mode",
        "dlvArgs",
        "dlvArgs",
        "program",
        "currentGOWorkspace",
        "dlvArgs",
        "dlvArgs",
        "dirname",
        "currentGOWorkspace",
        "dlvArgs",
        "dlvArgs",
        "host",
        "port",
        "launchArgs",
        "dlvArgs",
        "dlvArgs",
        "launchArgs",
        "launchArgs",
        "dlvArgs",
        "dlvArgs",
        "launchArgs",
        "launchArgs",
        "dlvArgs",
        "dlvArgs",
        "launchArgs",
        "launchArgs",
        "dlvArgs",
        "dlvArgs",
        "launchArgs",
        "launchArgs",
        "dlvArgs",
        "dlvArgs",
        "launchArgs",
        "launchArgs",
        "mode",
        "dlvArgs",
        "dlvArgs",
        "launchArgs",
        "launchArgs",
        "dlvArgs",
        "dlvArgs",
        "launchArgs",
        "verbose",
        "dlv",
        "dlvArgs",
        "spawn",
        "dlv",
        "dlvArgs",
        "dlvCwd",
        "port",
        "host",
        "setTimeout",
        "Client",
        "port",
        "host",
        "client",
        "err",
        "conn",
        "err",
        "reject",
        "err",
        "resolve",
        "conn",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "serverRunning",
        "serverRunning",
        "connectClient",
        "port",
        "host",
        "code",
        "logError",
        "code",
        "code",
        "err",
        "reject",
        "err",
        "command",
        "args",
        "callback",
        "err",
        "results",
        "conn",
        "conn",
        "command",
        "args",
        "callback",
        "err",
        "callback",
        "err",
        "command",
        "args",
        "resolve",
        "reject",
        "conn",
        "conn",
        "command",
        "args",
        "err",
        "res",
        "err",
        "reject",
        "err",
        "resolve",
        "res",
        "err",
        "reject",
        "err",
        "err",
        "state",
        "err",
        "logError",
        "err",
        "state",
        "err",
        "logError",
        "killTree",
        "DebugSession",
        "debuggerLinesStartAt1",
        "isServer",
        "debuggerLinesStartAt1",
        "isServer",
        "Handles",
        "path",
        "os",
        "logger",
        "e",
        "e",
        "logPath",
        "isServer",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "verbose",
        "response",
        "response",
        "verbose",
        "path",
        "path",
        "path",
        "response",
        "DebugProtocol",
        "args",
        "args",
        "args",
        "logger",
        "args",
        "logger",
        "logger",
        "logger",
        "logLevel",
        "args",
        "response",
        "args",
        "args",
        "args",
        "random",
        "args",
        "remotePath",
        "localPath",
        "remotePath",
        "localPath",
        "remotePath",
        "i",
        "llist",
        "i",
        "llist",
        "i",
        "rlist",
        "i",
        "llist",
        "i",
        "i",
        "localPath",
        "llist",
        "i",
        "remotePath",
        "rlist",
        "i",
        "remotePath",
        "remotePath",
        "remotePath",
        "remotePath",
        "remotePath",
        "Delve",
        "remotePath",
        "port",
        "host",
        "localPath",
        "args",
        "OutputEvent",
        "OutputEvent",
        "code",
        "code",
        "response",
        "TerminatedEvent",
        "verbose",
        "verbose",
        "InitializedEvent",
        "verbose",
        "response",
        "err",
        "response",
        "err",
        "verbose",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "verbose",
        "response",
        "args",
        "verbose",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "verbose",
        "StoppedEvent",
        "verbose",
        "response",
        "DebugProtocol",
        "response",
        "path",
        "path",
        "path",
        "pathToConvert",
        "pathToConvert",
        "pathToConvert",
        "pathToConvert",
        "process",
        "goroot",
        "index",
        "path",
        "goroot",
        "pathToConvert",
        "index",
        "pathToConvert",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "verbose",
        "normalizePath",
        "args",
        "file",
        "file",
        "file",
        "file",
        "existingBP",
        "verbose",
        "existingBP",
        "existingBP",
        "verbose",
        "args",
        "line",
        "verbose",
        "file",
        "line",
        "verbose",
        "file",
        "remoteFile",
        "line",
        "remoteFile",
        "err",
        "verbose",
        "err",
        "newBreakpoints",
        "verbose",
        "newBreakpoints",
        "newBreakpoints",
        "bp",
        "i",
        "bp",
        "bp",
        "args",
        "i",
        "file",
        "newBreakpoints",
        "x",
        "x",
        "breakpoints",
        "breakpoints",
        "response",
        "response",
        "verbose",
        "err",
        "response",
        "err",
        "logError",
        "err",
        "response",
        "DebugProtocol",
        "verbose",
        "err",
        "goroutines",
        "response",
        "response",
        "err",
        "logError",
        "response",
        "err",
        "verbose",
        "goroutines",
        "goroutines",
        "goroutine",
        "goroutine",
        "goroutine",
        "goroutine",
        "goroutine",
        "goroutine",
        "response",
        "response",
        "verbose",
        "threads",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "verbose",
        "args",
        "args",
        "err",
        "locations",
        "err",
        "logError",
        "response",
        "err",
        "verbose",
        "locations",
        "locations",
        "location",
        "i",
        "StackFrame",
        "i",
        "location",
        "location",
        "Source",
        "basename",
        "location",
        "location",
        "location",
        "response",
        "response",
        "verbose",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "verbose",
        "args",
        "err",
        "locals",
        "err",
        "logError",
        "response",
        "err",
        "verbose",
        "locals",
        "args",
        "err",
        "args",
        "err",
        "logError",
        "response",
        "err",
        "verbose",
        "args",
        "args",
        "locals",
        "vars",
        "scopes",
        "Scope",
        "localVariables",
        "response",
        "response",
        "verbose",
        "v",
        "i",
        "v",
        "GoReflectKind",
        "v",
        "v",
        "GoReflectKind",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "GoReflectKind",
        "v",
        "v",
        "v",
        "v",
        "v",
        "GoReflectKind",
        "v",
        "v",
        "v",
        "GoReflectKind",
        "v",
        "v",
        "v",
        "v",
        "val",
        "v",
        "v",
        "v",
        "v",
        "val",
        "v",
        "v",
        "v",
        "v",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "verbose",
        "args",
        "vari",
        "GoReflectKind",
        "vari",
        "GoReflectKind",
        "variables",
        "vari",
        "v",
        "i",
        "v",
        "i",
        "i",
        "result",
        "vari",
        "GoReflectKind",
        "variables",
        "i",
        "vari",
        "i",
        "i",
        "vari",
        "vari",
        "i",
        "i",
        "vari",
        "i",
        "i",
        "variables",
        "mapKey",
        "mapValue",
        "mapValue",
        "variables",
        "vari",
        "v",
        "i",
        "v",
        "i",
        "v",
        "result",
        "response",
        "response",
        "verbose",
        "variables",
        "reason",
        "TerminatedEvent",
        "verbose",
        "err",
        "goroutines",
        "err",
        "logError",
        "id",
        "needsToBeStopped",
        "id",
        "goroutine",
        "goroutines",
        "needsToBeStopped",
        "goroutine",
        "goroutine",
        "ThreadEvent",
        "goroutine",
        "goroutine",
        "needsToBeStopped",
        "id",
        "ThreadEvent",
        "id",
        "id",
        "StoppedEvent",
        "reason",
        "stoppedEvent",
        "stoppedEvent",
        "verbose",
        "reason",
        "response",
        "DebugProtocol",
        "verbose",
        "err",
        "state",
        "err",
        "logError",
        "verbose",
        "state",
        "state",
        "response",
        "verbose",
        "response",
        "DebugProtocol",
        "verbose",
        "err",
        "state",
        "err",
        "logError",
        "verbose",
        "state",
        "state",
        "response",
        "verbose",
        "response",
        "DebugProtocol",
        "verbose",
        "err",
        "state",
        "err",
        "logError",
        "verbose",
        "state",
        "state",
        "response",
        "verbose",
        "response",
        "DebugProtocol",
        "verbose",
        "err",
        "state",
        "err",
        "logError",
        "verbose",
        "state",
        "state",
        "response",
        "verbose",
        "response",
        "DebugProtocol",
        "verbose",
        "err",
        "state",
        "err",
        "logError",
        "response",
        "err",
        "verbose",
        "state",
        "response",
        "verbose",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "verbose",
        "args",
        "args",
        "evalSymbolArgs",
        "err",
        "variable",
        "err",
        "logError",
        "evalSymbolArgs",
        "response",
        "err",
        "response",
        "variable",
        "response",
        "verbose",
        "low",
        "high",
        "high",
        "low",
        "low",
        "processId",
        "process",
        "execSync",
        "TASK_KILL",
        "processId",
        "err",
        "path",
        "__dirname",
        "spawnSync",
        "cmd",
        "processId",
        "err",
        "DebugSession",
        "GoDebugSession"
    ],
    "literals": [
        "'path'",
        "'os'",
        "'vscode-debugprotocol'",
        "'vscode-debugadapter'",
        "'fs'",
        "'path'",
        "'child_process'",
        "'json-rpc2'",
        "'../goPath'",
        "'vscode-debug-logger'",
        "'console-stamp'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'verbose'",
        "string",
        "string",
        "string",
        "'uncaughtException'",
        "Unhandled error in debug adapter: ${errMessage}",
        "string",
        "'string'",
        "' '",
        "string",
        "'win32'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'The program attribute is missing in the debug configuration in launch.json'",
        "'exec'",
        "The program \"${program}\" must not be a directory in exec mode",
        "'The program attribute must be an executable in exec mode'",
        "'exec'",
        "'.go'",
        "The program \"${program}\" must be a valid go file in debug mode",
        "'The program attribute must be a directory or .go file in debug mode'",
        "The program \"${program}\" does not exist: ${e}",
        "'The program attribute must point to valid directory, .go file or executable.'",
        "'GOPATH'",
        "'debug'",
        "'test'",
        "'GOPATH'",
        "'GOPATH'",
        "Using GOPATH: ${env['GOPATH']}",
        "'GOPATH'",
        "'debug'",
        "'run'",
        "'data'",
        "'data'",
        "'close'",
        "'Process exiting with code: '",
        "'error'",
        "'remote'",
        "'dlv'",
        "'GOPATH'",
        "'GOPATH'",
        "Couldnt find dlv at ${process.env['GOPATH']}${env['GOPATH'] ? ', ' + env['GOPATH'] : ''} or ${envPath}",
        "'GOPATH'",
        "'GOPATH'",
        "', '",
        "'GOPATH'",
        "''",
        "Cannot find Delve debugger. Install from https://github.com/derekparker/delve & ensure it is in your \"GOPATH/bin\" or \"PATH\".",
        "'GOPATH'",
        "'debug'",
        "'exec'",
        "'--headless=true'",
        "'--listen='",
        "':'",
        "'--log='",
        "'--wd='",
        "'--build-flags='",
        "'--init='",
        "'--backend='",
        "'debug'",
        "'--output='",
        "'--'",
        "Running: ${dlv} ${dlvArgs.join(' ')}",
        "' '",
        "string",
        "'data'",
        "'data'",
        "'close'",
        "'Process exiting with code: '",
        "'error'",
        "string",
        "'RPCServer.'",
        "string",
        "'RPCServer.'",
        "'Command'",
        "'halt'",
        "'Failed to halt.'",
        "'Restart'",
        "'Failed to restart.'",
        "string",
        "string",
        "string",
        "string",
        "'vscode-go-debug.txt'",
        "'InitializeRequest'",
        "'InitializeResponse'",
        "'\\\\'",
        "'/'",
        "'/'",
        "'\\\\'",
        "'verbose'",
        "'Failed to continue: The program attribute is missing in the debug configuration in launch.json'",
        "''",
        "'127.0.0.1'",
        "'src'",
        "'\\\\'",
        "'/'",
        "string",
        "'stdout'",
        "string",
        "'stderr'",
        "'Failed to continue: Check the debug console for details.'",
        "'TerminatedEvent'",
        "'Delve is closed'",
        "'InitializeEvent'",
        "'Failed to continue: \"{e}\"'",
        "'ContinueResponse'",
        "'DisconnectRequest'",
        "'DisconnectResponse'",
        "'ConfigurationDoneRequest'",
        "'breakpoint'",
        "'StoppedEvent(\"breakpoint\")'",
        "string",
        "string",
        "string",
        "string",
        "${this.remotePathSeparator}src${this.remotePathSeparator}",
        "'GOROOT'",
        "'SetBreakPointsRequest'",
        "'Clearing: '",
        "'ClearBreakpoint'",
        "'All cleared'",
        "'Creating on: '",
        "':'",
        "'Creating on: '",
        "' ('",
        "') :'",
        "'CreateBreakpoint'",
        "'Error on CreateBreakpoint: '",
        "'All set:'",
        "'SetBreakPointsResponse'",
        "'Failed to set breakpoint: \"{e}\"'",
        "'ThreadsRequest'",
        "'ListGoroutines'",
        "'Failed to get threads.'",
        "'Unable to display threads: \"{e}\"'",
        "'goroutines'",
        "'@'",
        "'ThreadsResponse'",
        "'StackTraceRequest'",
        "'StacktraceGoroutine'",
        "'Failed to produce stack trace!'",
        "'Unable to produce stack trace: \"{e}\"'",
        "'locations'",
        "'<unknown>'",
        "'StackTraceResponse'",
        "'ScopesRequest'",
        "'ListLocalVars'",
        "'Failed to list local variables.'",
        "'Unable to list locals: \"{e}\"'",
        "'locals'",
        "'ListFunctionArgs'",
        "'Failed to list function args.'",
        "'Unable to list args: \"{e}\"'",
        "'functionArgs'",
        "'Local'",
        "''",
        "''",
        "''",
        "''",
        "'Local'",
        "'ScopesResponse'",
        "string",
        "unsafe.Pointer(0x${v.children[0].addr.toString(16)})",
        "'nil <'",
        "'>'",
        "'void'",
        "'void'",
        "'<'",
        "'>'",
        "'<'",
        "'> (length: '",
        "', cap: '",
        "')'",
        "'<'",
        "'>'",
        "...+${v.len - v.value.length} more",
        "'<'",
        "'>'",
        "'\"'",
        "'\"'",
        "'<'",
        "'>'",
        "'VariablesRequest'",
        "'['",
        "']'",
        "'VariablesResponse'",
        "' '",
        "string",
        "'TerminatedEvent'",
        "'ListGoroutines'",
        "'Failed to get threads.'",
        "'started'",
        "'exited'",
        "'StoppedEvent(\"'",
        "'\")'",
        "'ContinueRequest'",
        "'Command'",
        "'continue'",
        "'Failed to continue.'",
        "'continue state'",
        "'breakpoint'",
        "'ContinueResponse'",
        "'NextRequest'",
        "'Command'",
        "'next'",
        "'Failed to next.'",
        "'next state'",
        "'step'",
        "'NextResponse'",
        "'StepInRequest'",
        "'Command'",
        "'step'",
        "'Failed to step.'",
        "'stop state'",
        "'step'",
        "'StepInResponse'",
        "'StepOutRequest'",
        "'Command'",
        "'stepOut'",
        "'Failed to stepout.'",
        "'stepout state'",
        "'step'",
        "'StepOutResponse'",
        "'PauseRequest'",
        "'Command'",
        "'halt'",
        "'Failed to halt.'",
        "'Unable to halt execution: \"{e}\"'",
        "'pause state'",
        "'PauseResponse'",
        "'EvaluateRequest'",
        "'EvalSymbol'",
        "'Failed to eval expression: '",
        "' '",
        "'Unable to eval expression: \"{e}\"'",
        "'EvaluateResponse'",
        "'win32'",
        "'C:\\\\Windows\\\\System32\\\\taskkill.exe'",
        "${TASK_KILL} /F /T /PID ${processId}",
        "'../../../scripts/terminateProcess.sh'"
    ],
    "variables": [
        "errMessage",
        "mode",
        "dlvCwd",
        "isProgramDirectory",
        "launchArgsEnv",
        "pstats",
        "fileEnv",
        "env",
        "dirname",
        "serverRunning",
        "dlv",
        "currentGOWorkspace",
        "dlvArgs",
        "client",
        "logPath",
        "logLevel",
        "localPath",
        "remotePath",
        "port",
        "host",
        "llist",
        "rlist",
        "i",
        "index",
        "goroot",
        "file",
        "remoteFile",
        "breakpoints",
        "threads",
        "stackFrames",
        "vars",
        "scopes",
        "localVariables",
        "val",
        "vari",
        "variables",
        "i",
        "mapKey",
        "mapValue",
        "needsToBeStopped",
        "stoppedEvent",
        "evalSymbolArgs",
        "TASK_KILL",
        "cmd"
    ],
    "comments": [
        "---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------",
        "This enum should stay in sync with https://golang.org/pkg/reflect/#Kind",
        "These types should stay in sync with:",
        "https://github.com/derekparker/delve/blob/master/service/api/types.go",
        "This interface should always match the schema found in `package.json`.",
        "Optional path to .env file.",
        "Validations on the program",
        "read env from disk and merge into env variables",
        "If no GOPATH is set, then infer it from the file/package path",
        "Not applicable to exec mode in which case `program` need not point to source code under GOPATH",
        "assume server is running when in remote mode",
        "Add a slight delay to avoid issues on Linux with",
        "Delve failing calls made shortly after connection.",
        "TODO: Report `dlv` crash to user.",
        "This debug adapter implements the configurationDoneRequest.",
        "Launch the Delve debugger on the program",
        "Fix for https://github.com/Microsoft/vscode-go/issues/1178",
        "When the pathToConvert is under GOROOT, replace the remote GOROOT with local GOROOT",
        "If the program exits very quickly, the initial threadsRequest will complete after it has exited.",
        "A TerminatedEvent has already been sent. Ignore the err returned in this case.",
        "[TODO] Can we avoid doing this? https://github.com/Microsoft/vscode/issues/40#issuecomment-161999881",
        "Assume we need to stop all the threads we saw before...",
        "...but delete from list of threads to stop if we still see it",
        "Send started event if it's new",
        "Send existed event if it's no longer there",
        "when killing a process in Windows its child processes are *not* killed but become root processes.",
        "Therefore we use TASKKILL.EXE",
        "on linux and OS X we kill all direct and indirect child processes as well"
    ],
    "docstrings": [],
    "functions": [
        "logArgsToString",
        "verbose",
        "log",
        "logError",
        "normalizePath",
        "connectClient",
        "call",
        "callPromise",
        "close",
        "initializeRequest",
        "findPathSeperator",
        "launchRequest",
        "disconnectRequest",
        "configurationDoneRequest",
        "toDebuggerPath",
        "toLocalPath",
        "setBreakPointsRequest",
        "threadsRequest",
        "stackTraceRequest",
        "scopesRequest",
        "convertDebugVariableToProtocolVariable",
        "variablesRequest",
        "handleReenterDebug",
        "continueRequest",
        "nextRequest",
        "stepInRequest",
        "stepOutRequest",
        "pauseRequest",
        "evaluateRequest",
        "random",
        "killTree"
    ],
    "classes": [
        "Delve",
        "GoDebugSession"
    ]
}