{
    "identifiers": [
        "IAppOperation",
        "OperationType",
        "IMetaData",
        "ICallConfig",
        "IOnixSchema",
        "Utils",
        "NodeJS",
        "NodeJS",
        "NodeJS",
        "config",
        "payload",
        "metadata",
        "config",
        "resolve",
        "reject",
        "metadata",
        "Utils",
        "OperationType",
        "config",
        "config",
        "config",
        "config",
        "process",
        "response",
        "response",
        "operation",
        "response",
        "OperationType",
        "response",
        "response",
        "reject",
        "response",
        "resolve",
        "response",
        "process",
        "process",
        "operation",
        "handler",
        "payload",
        "metadata",
        "metadata",
        "config",
        "metadata",
        "metadata",
        "Utils",
        "OperationType",
        "config",
        "config",
        "config",
        "config",
        "process",
        "response",
        "response",
        "operation",
        "response",
        "OperationType",
        "handler",
        "response",
        "response",
        "process",
        "process",
        "operation",
        "config",
        "e",
        "e"
    ],
    "literals": [
        "'../interfaces'",
        "'@onixjs/sdk/dist/utils'",
        "'@onixjs/sdk/dist/adapters/node.adapters'",
        "http://${\n        this.config.broker.host ? this.config.broker.host : '127.0.0.1'\n      }:${this.config.broker.port}/.well-known/onixjs-schema",
        "'127.0.0.1'",
        "'rpc'",
        "${config.app}.${config.module}.${config.component}.${\n            config.method\n          }",
        "'message'",
        "'rpc'",
        "${config.app}.${config.module}.${config.component}.${\n          config.method\n        }",
        "'message'",
        "string",
        "ONIXJS: The app \"${\n          this.config.app\n        }\" is not hosted by the provided broker.",
        "ONIXJS: The module \"${this.config.module}\" doesn't belongs to app \"${\n          this.config.app\n        }\".",
        "ONIXJS: The component \"${\n          this.config.component\n        }\" doesn't belongs to module \"${this.config.module}\".",
        "ONIXJS: The method \"${\n          this.config.method\n        }\" doesn't belongs to component \"${this.config.component}\".",
        "ONIXJS: The method ${this.config.method} is not type of ${type}."
    ],
    "variables": [
        "config",
        "operation",
        "config",
        "operation"
    ],
    "comments": [
        "Singleton schema",
        "If the user is sending a token then verify with the sso.",
        "TODO Add Result Interace from @onixjs/sdk",
        "Hard copy the configuration",
        "Make sure everything is well configured in order to make this call",
        "Ok cool, lets make the call to the broker",
        "Set metadata for this call not being a stream",
        "Create App Operation",
        "Listen for broker response",
        "Send result back to broker",
        "Hard copy the configuration",
        "Make sure everything is well configured in order to make this call",
        "complete metadata in case is not existent",
        "Create App Operation",
        "Listen for broker response",
        "Send result back to broker",
        "Wait for schema to available",
        "Verify the config makes sense"
    ],
    "docstrings": [
        "* @class CallConnect\n * @author Jonathan Casarrubias\n * @license MIT\n * @description This class will provide connectivity\n * between soa services.\n *\n * It will provide connection throgh IO Streams to other\n * services living in the same cluster.",
        "* @property client\n   * @description This property creates an HTTP client\n   * instance to call for the broker schema.",
        "* @property schema\n   * @description This property contains a reference\n   * of the onix schema",
        "* @constructor\n   * @param config\n   * @description Receives the ICallConfig in order\n   * to validate calls, streams and schema.\n   * Only valid calls and streams will be executed,\n   * of course avoiding sending falsy information to\n   * the broker.",
        "* @method getSchema\n   * @description This method assigns a singleton schema\n   * that will be pulled once from the current onix broker.",
        "* @method call\n   * @param payload\n   * @param metadata\n   * @description This method will coordinate with the OnixJS Broker to\n   * execute a RPC, that can be either on this SOA Service or within\n   * any other SOA Service living in the same cluster.",
        "* @method stream\n   * @param handler\n   * @param metadata\n   * @description This method will register a stream connection\n   * to other service living in the same cluster of services.",
        "* @method validate\n   * @param type\n   * @param config\n   * @description This method will validate if the current configuration\n   * is correct verifying with the OnixJS Schema."
    ],
    "functions": [
        "getSchema",
        "call",
        "stream",
        "validate"
    ],
    "classes": [
        "CallConnect"
    ]
}