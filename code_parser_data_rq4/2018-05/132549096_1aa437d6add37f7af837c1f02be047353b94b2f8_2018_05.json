{
    "identifiers": [
        "ete2",
        "Tree",
        "sys",
        "re",
        "n",
        "tt",
        "n",
        "get_leaf_names",
        "name",
        "kids",
        "re",
        "match",
        "tt",
        "name",
        "res",
        "n",
        "tt",
        "tag",
        "n",
        "get_leaf_names",
        "name",
        "kids",
        "re",
        "match",
        "tag",
        "tt",
        "name",
        "t",
        "tag",
        "re",
        "match",
        "t",
        "name",
        "t",
        "imm",
        "imm",
        "append",
        "t",
        "imm",
        "l",
        "t",
        "t",
        "get_common_ancestor",
        "l",
        "nm",
        "l",
        "S",
        "r",
        "get_distance",
        "nm",
        "S",
        "l",
        "__len__",
        "l",
        "t",
        "t",
        "get_common_ancestor",
        "l",
        "nm",
        "l",
        "S",
        "append",
        "r",
        "get_distance",
        "nm",
        "max",
        "S",
        "l",
        "t",
        "t",
        "get_common_ancestor",
        "l",
        "nm",
        "l",
        "S",
        "append",
        "r",
        "get_distance",
        "nm",
        "min",
        "S",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "exit",
        "open",
        "tf",
        "line",
        "tf",
        "tag",
        "append",
        "line",
        "rstrip",
        "ntags",
        "sys",
        "exit",
        "Tree",
        "sys",
        "argv",
        "format",
        "sys",
        "argv",
        "sys",
        "exit",
        "Tree",
        "sys",
        "argv",
        "format",
        "sys",
        "argv",
        "sys",
        "exit",
        "t1",
        "get_leaf_names",
        "t2",
        "get_leaf_names",
        "g",
        "tag",
        "grps",
        "append",
        "tmp",
        "grps1",
        "append",
        "tt",
        "tag",
        "__len__",
        "i",
        "ntagn",
        "nm",
        "nms1",
        "re",
        "match",
        "tag",
        "i",
        "nm",
        "grps",
        "i",
        "append",
        "nm",
        "grps",
        "i",
        "__len__",
        "tag",
        "i",
        "sys",
        "exit",
        "tag",
        "i",
        "grps",
        "i",
        "__len__",
        "i",
        "ntagn",
        "nm",
        "nms2",
        "re",
        "match",
        "tag",
        "i",
        "nm",
        "grps1",
        "i",
        "append",
        "nm",
        "grps",
        "i",
        "__len__",
        "tag",
        "i",
        "sys",
        "exit",
        "tag",
        "i",
        "grps",
        "i",
        "__len__",
        "i",
        "ntagn",
        "ca",
        "append",
        "t1",
        "get_common_ancestor",
        "grps",
        "i",
        "ca1",
        "append",
        "t2",
        "get_common_ancestor",
        "grps1",
        "i",
        "i",
        "ntagn",
        "is_clade",
        "ca",
        "i",
        "tag",
        "i",
        "is_clade",
        "ca1",
        "i",
        "tag",
        "i",
        "ind",
        "pphyl0",
        "append",
        "i",
        "ind",
        "pphyl1",
        "append",
        "i",
        "tag",
        "i",
        "ind",
        "ind",
        "i",
        "ntagn",
        "j",
        "i",
        "ntagn",
        "t1",
        "get_distance",
        "ca",
        "i",
        "t1",
        "get_common_ancestor",
        "ca",
        "i",
        "ca",
        "j",
        "t1",
        "get_distance",
        "ca",
        "j",
        "t1",
        "get_common_ancestor",
        "ca",
        "i",
        "ca",
        "j",
        "t1",
        "get_distance",
        "ca",
        "i",
        "ca",
        "j",
        "tag",
        "i",
        "tag",
        "j",
        "d1",
        "d2",
        "d3",
        "j",
        "i",
        "ntagn",
        "t2",
        "get_distance",
        "ca1",
        "i",
        "t2",
        "get_common_ancestor",
        "ca1",
        "i",
        "ca1",
        "j",
        "t2",
        "get_distance",
        "ca1",
        "j",
        "t2",
        "get_common_ancestor",
        "ca1",
        "i",
        "ca1",
        "j",
        "t2",
        "get_distance",
        "ca1",
        "i",
        "ca1",
        "j",
        "tag",
        "i",
        "tag",
        "j",
        "d1",
        "d2",
        "d3",
        "pphyl0",
        "__len__",
        "pphyl1",
        "__len__",
        "sys",
        "exit",
        "c",
        "pphyl0",
        "ca",
        "c",
        "get_leaf_names",
        "cn",
        "n",
        "cn",
        "re",
        "match",
        "n",
        "tag",
        "c",
        "others",
        "append",
        "n",
        "t1",
        "get_distance",
        "t1",
        "get_common_ancestor",
        "cn",
        "t1",
        "get_common_ancestor",
        "others",
        "tag",
        "c",
        "dt",
        "c",
        "pphyl1",
        "ca1",
        "c",
        "get_leaf_names",
        "n",
        "cn",
        "re",
        "match",
        "n",
        "tag",
        "c",
        "others",
        "append",
        "n",
        "t2",
        "get_distance",
        "t2",
        "get_common_ancestor",
        "cn",
        "t2",
        "get_common_ancestor",
        "others",
        "tag",
        "c",
        "dt",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "\"tagfile\"",
        "'\\n'",
        "\"\\n\\tWrong or absent file %s!\\n\"",
        "\"\\n\\tWrong or absent file %s!\\n\"",
        "\"group of %s in the mitochondrial tree is empty! Quitting\"",
        "\"group of %s in the mitochondrial tree consists of %i OTU\"",
        "\"group of %s in the nuclear tree is empty! Quitting\"",
        "\"group of %s in the nuclear tree consists of %i OTU\"",
        "\"Clade is monopyletic (1/0), 1st column is first tree\"",
        "\"--------------------------------------------------\"",
        "\"Tag:\\t%s\\t %i\\t%i\"",
        "\"--------------------------------------------------\\n\"",
        "\"\\nDistance from common ancestor of a clade to\"",
        "\"the common root of the two clades (CA_x/ROOT)\"",
        "\"----------------------------------------------------------------\"",
        "\"Tags:\\t %s/%s\\t%f\\t%f\\t%f\"",
        "\"Tree2:\\t %s/%s\\t%f\\t%f\\t%f\"",
        "\"----------------------------------------------------------------\"",
        "\"\\n\"",
        "\"THERE ARE NO POLYPHYLETIC GROUPS!\"",
        "\"tree1: distance between CA of %s and CA of immigrants is %f\"",
        "\"tree2: distance between CA of %s and CA of immigramts is %f\"",
        "'__main__'"
    ],
    "variables": [
        "kids",
        "res",
        "res",
        "kids",
        "imm",
        "r",
        "S",
        "r",
        "S",
        "r",
        "S",
        "t",
        "tt",
        "tag",
        "ntags",
        "t1",
        "t2",
        "nms1",
        "nms2",
        "grps",
        "grps1",
        "tmp",
        "tt",
        "ntagn",
        "ca",
        "ca1",
        "pphyl0",
        "pphyl1",
        "ind",
        "ind",
        "ind",
        "d1",
        "d2",
        "d3",
        "d1",
        "d2",
        "d3",
        "cn",
        "others",
        "dt",
        "cn",
        "others",
        "dt"
    ],
    "comments": [
        "!/usr/bin/python",
        ",TreeStyle,NodeStyle",
        "names from the 1st tree",
        "names from the 2nd tree",
        "There may be more than 2 groups! We do as many as there are in the tagfile",
        "Still we need only two tags to obtain full stat!",
        "number of tags",
        "second tree",
        "common ancestors for species",
        "for i in range(0,ntagn):"
    ],
    "docstrings": [
        "'''\n\tcheck if all descendants of node n contain the tag\n\t'''",
        "'''\n\tfor a polyphyletc cluster it finds all tags of the immigrants,\n\tn node\n\ttt: NUMBER of \"local\" tag\n\ttaf: list of all tags among which to look for the immigrants\n\t'''",
        "'''\n\t==============================================   \n\t\t\tUSAGE:\n\t==============================================\n\t\tTwo filenames are required\n\t\tas argumets:\n\t\t1) treefile containing mitochondrial tree\n\t\t2) treefile containing nuclear tree\n\t\t\n\t==============================================\n\t\t'''",
        "'''\n\t===============================================\n\t\tYou need file called tagfile in the same \n\t\tdirectory as the data. It contains tags \n\t\tused to distinguish between the groups. \n\t\tTags must be valid REGEX expressions, \n\t\tone tag per line\n\t\t\n\t\tEXAMPLE:\n\t\t^B OTU names begin with \"B\"\n\t\t1A OTU names contain \"1A\" somewhere\n\n\t!!! IMPORTANT !!!\n\tThere should be no empty line ant the bottom \n\tof the tagfile\n\n\t================================================ \n\t\t'''"
    ],
    "functions": [
        "is_clade",
        "is_foreign",
        "tmrca",
        "tmrca_m",
        "tmrca_min",
        "main"
    ],
    "classes": []
}