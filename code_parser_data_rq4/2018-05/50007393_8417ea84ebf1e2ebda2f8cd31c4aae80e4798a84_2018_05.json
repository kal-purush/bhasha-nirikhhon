{
    "identifiers": [
        "k",
        "key_types",
        "k",
        "v",
        "value_types",
        "template",
        "replace",
        "k",
        "replace",
        "v",
        "replace",
        "k",
        "upper",
        "replace",
        "v",
        "upper",
        "k",
        "key_types",
        "v",
        "value_types",
        "k",
        "v",
        "k",
        "upper",
        "v",
        "upper",
        "k",
        "v",
        "k",
        "upper",
        "v",
        "upper",
        "k",
        "v",
        "k",
        "upper",
        "v",
        "upper",
        "k",
        "v",
        "k",
        "key_types",
        "k",
        "v",
        "value_types",
        "v",
        "v",
        "k",
        "upper",
        "v",
        "upper",
        "write",
        "tpl",
        "replace",
        "k",
        "replace",
        "v",
        "k",
        "key_types",
        "v",
        "value_types",
        "k",
        "v",
        "k",
        "upper",
        "v",
        "upper"
    ],
    "literals": [
        "\"Byte\"",
        "\"Short\"",
        "\"Char\"",
        "\"Int\"",
        "\"Float\"",
        "\"Long\"",
        "\"Double\"",
        "\"Boolean\"",
        "\"Byte\"",
        "\"Short\"",
        "\"Char\"",
        "\"Int\"",
        "\"Float\"",
        "\"Long\"",
        "\"Double\"",
        "\"TypeHandlerPairs:\"",
        "\"    //region \"",
        "\" -> Primitive\"",
        "\"Ktype\"",
        "\"Vtype\"",
        "\"KTYPE\"",
        "\"VTYPE\"",
        "\"    //endregion\"",
        "\"TypeHandlerPairs registrations:\"",
        "\"add(\"",
        "\"Map.class, TypeHandlerPair.\"",
        "\"_\"",
        "\");\"",
        "\"add(Mutable\"",
        "\"Map.class, TypeHandlerPair.\"",
        "\"_\"",
        "\");\"",
        "\"add(Immutable\"",
        "\"Map.class, TypeHandlerPair.\"",
        "\"_\"",
        "\", \"",
        "\"Map::toImmutable);\"",
        "\"PrimitivePrimitiveMapSerializers:\"",
        "\"    //region \"",
        "\" -> Primitive\"",
        "\"Boolean\"",
        "\"writeBoolean(v)\"",
        "\"Char\"",
        "\"writeString(new char[]{v}, 0, 1)\"",
        "\"writeNumber(v)\"",
        "\"_\"",
        "\"Ktype\"",
        "\"Vtype\"",
        "\"    //endregion\"",
        "\"    static {\"",
        "\"        INSTANCES.put(\"",
        "\"Map.class, \"",
        "\"_\"",
        "\");\"",
        "\"    }\""
    ],
    "variables": [
        "key_types",
        "value_types",
        "template",
        "write",
        "write",
        "write",
        "tpl"
    ],
    "comments": [
        "!/usr/bin/env python3"
    ],
    "docstrings": [
        "\"\"\"\n    TypeHandlerPair<MutableKtypeVtypeMap, PrimitiveKVHandler.Ktype, PrimitiveKVHandler.Vtype> KTYPE_VTYPE =\n            new TypeHandlerPair<MutableKtypeVtypeMap, PrimitiveKVHandler.Ktype, PrimitiveKVHandler.Vtype>() {\n                @Override\n                public PrimitiveKVHandler.Ktype keyHandler(JavaType type) {\n                    return PrimitiveKVHandler.Ktype.INSTANCE;\n                }\n\n                @Override\n                public PrimitiveKVHandler.Vtype valueHandler(JavaType type) {\n                    return PrimitiveKVHandler.Vtype.INSTANCE;\n                }\n\n                @Override\n                public MutableKtypeVtypeMap createEmpty() {\n                    return KtypeVtypeMaps.mutable.empty();\n                }\n\n                @Override\n                public void add(\n                        MutableKtypeVtypeMap target,\n                        PrimitiveKVHandler.Ktype kh, PrimitiveKVHandler.Vtype vh,\n                        DeserializationContext ctx, String k, JsonParser v\n                ) throws IOException {\n                    target.put(kh.key(ctx, k), vh.value(ctx, v));\n                }\n            };\"\"\"",
        "\"\"\"    public static final PrimitiveMapSerializer<KtypeVtypeMap> \"\"\"",
        "\"\"\" =\n            new PrimitiveMapSerializer<KtypeVtypeMap>(KtypeVtypeMap.class) {\n                @Override\n                protected void serializeEntries(KtypeVtypeMap value, JsonGenerator gen, SerializerProvider serializers) {\n                    value.forEachKeyValue((k, v) -> {\n                        try {\n                            gen.writeFieldName(String.valueOf(k));\n                            gen.\"\"\"",
        "\"\"\";\n                        } catch (IOException e) {\n                            rethrowUnchecked(e);\n                        }\n                    });\n                }\n            };\"\"\""
    ],
    "functions": [],
    "classes": []
}