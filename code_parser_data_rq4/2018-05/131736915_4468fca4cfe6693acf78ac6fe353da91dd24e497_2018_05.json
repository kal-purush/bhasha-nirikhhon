{
    "identifiers": [
        "print_function",
        "getpass",
        "inspect",
        "os",
        "psutil",
        "re",
        "shutil",
        "subprocess",
        "sys",
        "time",
        "sys",
        "version_info",
        "unittest2",
        "unittest",
        "unittest",
        "configuration",
        "IrodsConfig",
        "controller",
        "IrodsController",
        "core_file",
        "temporary_core_file",
        "CoreFile",
        "test",
        "settings",
        "lib",
        "resource_suite",
        "ResourceSuite",
        "ResourceBase",
        "test_chunkydevtest",
        "ChunkyDevTest",
        "session",
        "rule_texts_for_tests",
        "rule_texts",
        "path",
        "os",
        "path",
        "exists",
        "path",
        "os",
        "path",
        "dirname",
        "path",
        "os",
        "statvfs",
        "path",
        "ResourceSuite",
        "ChunkyDevTest",
        "unittest",
        "TestCase",
        "IrodsConfig",
        "default_rule_engine_plugin",
        "lib",
        "get_hostname",
        "session",
        "make_session_for_existing_admin",
        "admin_session",
        "admin_session",
        "assert_icommand",
        "input",
        "admin_session",
        "assert_icommand",
        "hostname",
        "Test_Resource_Unixfilesystem",
        "setUp",
        "Test_Resource_Unixfilesystem",
        "tearDown",
        "session",
        "make_session_for_existing_admin",
        "admin_session",
        "admin_session",
        "assert_icommand",
        "admin_session",
        "assert_icommand",
        "input",
        "shutil",
        "rmtree",
        "IrodsConfig",
        "irods_directory",
        "ignore_errors",
        "lib",
        "make_file",
        "filename",
        "filesize",
        "admin",
        "assert_icommand",
        "format",
        "free_space",
        "free_space",
        "admin",
        "assert_icommand",
        "format",
        "minimum",
        "admin",
        "assert_icommand",
        "filename",
        "free_space",
        "filesize",
        "admin",
        "assert_icommand",
        "format",
        "minimum",
        "admin",
        "assert_icommand",
        "filename",
        "free_space",
        "filesize",
        "admin",
        "assert_icommand",
        "format",
        "minimum",
        "admin",
        "assert_icommand",
        "filename",
        "lib",
        "make_file",
        "filename",
        "lib",
        "make_dir_p",
        "admin",
        "get_vault_path",
        "temporary_core_file",
        "core",
        "time",
        "sleep",
        "core",
        "add_rule",
        "rule_texts",
        "plugin_name",
        "class_name",
        "inspect",
        "currentframe",
        "f_code",
        "co_name",
        "time",
        "sleep",
        "user0",
        "assert_icommand",
        "filename",
        "psutil",
        "disk_usage",
        "admin",
        "get_vault_path",
        "free",
        "admin",
        "run_icommand",
        "l",
        "ilsresc_output",
        "splitlines",
        "l",
        "startswith",
        "l",
        "rpartition",
        "ilsresc_output",
        "abs",
        "free_space",
        "ilsresc_freespace",
        "format",
        "free_space",
        "ilsresc_freespace",
        "os",
        "unlink",
        "filename",
        "os",
        "environ",
        "copy",
        "IrodsController",
        "IrodsConfig",
        "injected_environment",
        "env",
        "restart",
        "lib",
        "make_file",
        "lib",
        "get_file_size_by_path",
        "IrodsConfig",
        "server_log_path",
        "user0",
        "assert_icommand",
        "lib",
        "count_occurrences_of_string_in_log",
        "IrodsConfig",
        "server_log_path",
        "start_index",
        "initial_log_size",
        "lib",
        "get_file_size_by_path",
        "IrodsConfig",
        "server_log_path",
        "user0",
        "assert_icommand",
        "lib",
        "count_occurrences_of_string_in_log",
        "IrodsConfig",
        "server_log_path",
        "start_index",
        "initial_log_size",
        "IrodsController",
        "restart",
        "os",
        "path",
        "exists",
        "os",
        "unlink",
        "os",
        "path",
        "exists",
        "os",
        "unlink",
        "unittest",
        "skipIf",
        "test",
        "settings",
        "RUN_IN_TOPOLOGY",
        "lib",
        "create_local_testfile",
        "filename",
        "lib",
        "file_digest",
        "filepath",
        "encoding",
        "admin",
        "assert_icommand",
        "admin",
        "session_collection",
        "long_collection_name",
        "admin",
        "session_collection",
        "long_collection_name",
        "filename",
        "admin",
        "assert_icommand",
        "full_logical_path",
        "admin",
        "assert_icommand",
        "filepath",
        "full_logical_path",
        "admin",
        "assert_icommand",
        "full_logical_path",
        "filename",
        "os",
        "path",
        "join",
        "admin",
        "get_vault_session_path",
        "long_collection_name",
        "filename",
        "admin",
        "assert_icommand",
        "full_logical_path",
        "orig_digest",
        "admin",
        "assert_icommand",
        "filename",
        "orig_digest",
        "admin",
        "assert_icommand",
        "long_collection_name",
        "filename",
        "admin",
        "assert_icommand",
        "file_vault_full_path",
        "open",
        "file_vault_full_path",
        "f",
        "f",
        "seek",
        "file",
        "f",
        "end",
        "admin",
        "assert_icommand",
        "file_vault_full_path",
        "lib",
        "cat",
        "file_vault_full_path",
        "lib",
        "file_digest",
        "file_vault_full_path",
        "encoding",
        "admin",
        "assert_icommand",
        "file_vault_full_path",
        "admin",
        "assert_icommand",
        "full_logical_path",
        "admin",
        "assert_icommand",
        "file_vault_full_path",
        "full_logical_path",
        "admin",
        "assert_icommand",
        "file_vault_full_path",
        "admin",
        "assert_icommand",
        "full_logical_path",
        "new_digest",
        "admin",
        "assert_icommand",
        "file_vault_full_path",
        "os",
        "remove",
        "filepath"
    ],
    "literals": [
        "'Test_Resource_Unixfilesystem'",
        "\"iadmin modresc demoResc name origResc\"",
        "'STDOUT_SINGLELINE'",
        "'rename'",
        "'yes\\n'",
        "\"iadmin mkresc demoResc 'unixfilesystem' \"",
        "\":/mnt/nfs/demoRescVault\"",
        "'STDOUT_SINGLELINE'",
        "'unixfilesystem'",
        "\"iadmin rmresc demoResc\"",
        "\"iadmin modresc origResc name demoResc\"",
        "'STDOUT_SINGLELINE'",
        "'rename'",
        "'yes\\n'",
        "\"/demoRescVault\"",
        "'test_unix_filesystem_free_space__3306.txt'",
        "'iadmin modresc demoResc freespace {0}'",
        "'iadmin modresc demoResc context minimum_free_space_for_create_in_bytes={0}'",
        "'iput '",
        "' file1'",
        "'STDERR_SINGLELINE'",
        "'USER_FILE_TOO_LARGE'",
        "'iadmin modresc demoResc context minimum_free_space_for_create_in_bytes={0}'",
        "'iput '",
        "' file2'",
        "'STDERR_SINGLELINE'",
        "'USER_FILE_TOO_LARGE'",
        "'iadmin modresc demoResc context minimum_free_space_for_create_in_bytes={0}'",
        "'iput '",
        "' file3'",
        "'test_msi_update_unixfilesystem_resource_free_space_and_acPostProcForParallelTransferReceived'",
        "'demoResc'",
        "'iput'",
        "'demoResc'",
        "'ilsresc'",
        "'-l'",
        "'demoResc'",
        "'free space:'",
        "':'",
        "'\"free space:\" not found in ilsresc output:\\n'",
        "'free_space {0}, ilsresc free space {1}'",
        "'spLogLevel'",
        "'11'",
        "'file.txt'",
        "'iput --kv_pass=\"put_key=val1\" file.txt'",
        "'key [put_key] - value [val1]'",
        "'iget -f --kv_pass=\"get_key=val3\" file.txt other.txt'",
        "'key [get_key] - value [val3]'",
        "'file.txt'",
        "'file.txt'",
        "'other.txt'",
        "'other.txt'",
        "\"Skip for Topology Testing: Checks local file\"",
        "'fsckfile.txt'",
        "'sha256'",
        "'base64'",
        "'255_byte_directory_name_abcdefghijklmnopqrstuvwxyz12_abcdefghijklmnopqrstuvwxyz12_abcdefghijklmnopqrstuvwxyz12_abcdefghijklmnopqrstuvwxyz12_abcdefghijklmnopqrstuvwxyz12_abcdefghijklmnopqrstuvwxyz12_abcdefghijklmnopqrstuvwxyz12_abcdefghijklmnopqrstuvwxyz12'",
        "\"imkdir \"",
        "\"/\"",
        "\"/\"",
        "\"/\"",
        "'ils -L '",
        "'STDERR_SINGLELINE'",
        "'does not exist'",
        "'iput -K '",
        "' '",
        "'ils -L '",
        "'STDOUT_SINGLELINE'",
        "'ichksum -K '",
        "'STDOUT_MULTILINE'",
        "'Total checksum performed = 1, Failed checksum = 0'",
        "'sha2:'",
        "\"iquest \\\"select DATA_CHECKSUM where DATA_NAME = '%s'\\\"\"",
        "'STDOUT_SINGLELINE'",
        "'DATA_CHECKSUM = sha2:'",
        "'ils -L '",
        "'STDOUT_SINGLELINE'",
        "'ifsck -K '",
        "'r+t'",
        "\"x\"",
        "''",
        "'ifsck -K '",
        "'STDOUT_SINGLELINE'",
        "'CORRUPTION'",
        "'checksum not consistent with iRODS object'",
        "'extra letters'",
        "'sha256'",
        "'base64'",
        "'ifsck '",
        "'STDOUT_SINGLELINE'",
        "'CORRUPTION'",
        "'not consistent with iRODS object'",
        "'irm -U '",
        "'ireg '",
        "' '",
        "'ifsck -K '",
        "'STDOUT_SINGLELINE'",
        "'WARNING: checksum not available'",
        "'ichksum -f '",
        "'STDOUT_MULTILINE'",
        "'Total checksum performed = 1, Failed checksum = 0'",
        "'sha2:'",
        "'ifsck -K '"
    ],
    "variables": [
        "path",
        "plugin_name",
        "class_name",
        "hostname",
        "filename",
        "filesize",
        "free_space",
        "minimum",
        "minimum",
        "minimum",
        "filename",
        "filepath",
        "free_space",
        "ilsresc_output",
        "ilsresc_freespace",
        "env",
        "env",
        "initial_log_size",
        "initial_log_size",
        "filename",
        "filepath",
        "orig_digest",
        "long_collection_name",
        "full_logical_path",
        "file_vault_full_path",
        "new_digest"
    ],
    "comments": [
        "this test assumes that the iRODS server has a mount point /mnt/nfs that points to the stornext share.",
        "free_space already below threshold - should NOT accept new file",
        "free_space will be below threshold if replica is created - should NOT accept new file",
        "after replica creation, free_space will still be greater than minimum - should accept new file",
        "make sure the physical path exists",
        "remove once file hash fix is committed #2279",
        "remove once file hash fix is committed #2279",
        "double print if collection missing",
        "double print if collection missing",
        "local setup",
        "assertions",
        "should not be listed",
        "iput",
        "should be listed",
        "method 1",
        "ichksum",
        "method 2",
        "iquest",
        "method 3",
        "ils",
        "ifsck",
        "change content in vault",
        "ifsck",
        "change size in vault",
        "ifsck",
        "unregister, reregister (to update filesize in iCAT), recalculate checksum, and confirm",
        "ifsck",
        "ifsck",
        "local cleanup"
    ],
    "docstrings": [],
    "functions": [
        "statvfs_path_or_parent",
        "setUp",
        "tearDown",
        "test_unix_filesystem_free_space__3306",
        "test_msi_update_unixfilesystem_resource_free_space_and_acPostProcForParallelTransferReceived",
        "test_key_value_passthru",
        "test_ifsck__2650"
    ],
    "classes": [
        "Test_Resource_Unixfilesystem"
    ]
}