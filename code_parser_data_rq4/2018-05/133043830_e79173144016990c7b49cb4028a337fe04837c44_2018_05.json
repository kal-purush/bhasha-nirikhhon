{
    "identifiers": [
        "sitimeunit",
        "SITimeUnit",
        "hightimedelta",
        "Hightimedelta",
        "highdatetime",
        "Highdatetime"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "\"\"\"hightime - rick.ratzel@ni.com\n\nFIXME: update this docstring to reflect the name change to \"hightime\" and that\nit extends datetime.\n\nThis package defines a universal timestamp type which can be used to represent\na point in time - in whole or arbitrary fractional units of seconds - since a\npredetermined Epoch.  This type is currently \"Epoch-less\" in that it simply\nmaintains a count, but may be extended in the future to also indicate the Epoch\nfor which the count is relative to in describing the point in time.  In\npractice, the Epoch is understood to be part of a larger application context\nwhich is known by users, for example, time.time() returns a count from the\nPOSIX Epoch on a Linux system.\n\nThe classes defined in this package are intended to provide utilities that make\nit easy to work with timestamps.  This includes common operators (subtraction,\naddition, comparisons) and human-readable string representations using standard\nunits.  Other helper utilities will be added as needed.\n\nThese classes are based on Python's \"long\" (for Python versions 2.x that\nsupport it) or \"int\" (for Python version 3.x that support int as long) types,\nwhich are implementations of BIGNUM\n(https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic) and allow users\nto express timestamps to virtually limitless precision.  This seems more\n\"pythonic\" in that it is consistent with other numeric types that do not\nrequire the user to know the size upfront.\n\nThe classes defined in this package are:\n\n   Timespan\n\n      A Timespan represents a time duration.  Instances of Timespans are\n      commonly used when adding or subtracting to or from a Timestamp to get a\n      different Timestamp that represents a different point in time.  A\n      Timespan is also returned when two Timestamps are subtracted from each\n      other, and in this case, it represents the difference in time between the\n      two points. Timespans can have a negative value that can be used during\n      Timestamp subtractions to indicate if a Timestamp is \"ahead\" or \"behind\"\n      another.\n\n      A Timespan can be constructed in a number of different ways:\n         Timespan( <int n seconds>, [exponent=<multiplier>] )\n\n            Create a timespan of length n seconds.  exponent defaults to a 1.0\n            multiplier, representing whole seconds.  If a unit is specified,\n            the span will be a duration of length n exponent.\n\n         Timespan( <float n seconds>, [exponent=<multiplier>] )\n\n            Create a timespan of length n seconds with potential fractional\n            seconds included.  The exponent of the fractional seconds depends on\n            the number of sig figs after the decimal point, as determined by\n            the default string repr of the float.\n\n            NOTE: the nature of floating point numbers could lead to excessive\n            false precision when represented in a timespan. To get exactly the\n            precision needed, construct with either a string repr of the\n            floating point (inconvenient, but used frequently in examples for\n            the Python Decimal module), or use separate seconds,\n            fractionalSeconds constructor args.\n\n         Timespan( <string n seconds>, [exponent=<multiplier>] )\n\n            Like the float constructor, but allows for exact number\n            representation rather than floating point noise.\n\n         Timespan( <int n seconds>,\n                   <int m fractional_seconds>, [frac_exponent=<multiplier>] )\n\n            Constructs a timespan using whole seconds and separate fractional\n            seconds both represented as integers.  The default exponent for\n            fractional seconds is nanoseconds, but if frac_exponent is specified,\n            will be in frac_exponent.\n\n      A Timespan also supports __add__(), __sub__(), __eq__(), __lt__(),\n      __gt__() which should work \"as expected\".\n\n\n   Timestamp\n\n      Timestamp inherits from Timespan and adds a restriction that it cannot be\n      negative, since it represents a moment in time.\n\n\nOther useful constants are:\n\n   seconds, milliseconds, microseconds, nanoseconds, picoseconds,\n   femtoseconds, attoseconds, zeptoseconds, yoctoseconds\n\n      These can be used as values to the \"exponent\" or \"frac_exponent\" kwargs when\n      constructing a Timestamp or Timespan.  Their values are the\n      multiplication factor corresponding to the metric prefix they represent.\n      For example, nanoseconds is 1e-9.\n\nExamples:\n>>> from hightime import *\n\n>>> print Hightime( 22 )\n22s\n\n>>> print Hightime( 22.23 )\n22s 230ms\n\n>>> print Hightime( 22.23, exponent=microseconds )\n0s 22230ns\n\n>>> print Hightime( 22.23, exponent=microseconds ) + 12345e6\n12345000000s 22230ns\n\n>>> print Hightime( 22.23, exponent=microseconds ) + 12345.1\n12345s 100022230ns\n\n>>> print Hightime( time.time() )\n1504804266s 472007036209ps\n\n>>> print Hightime( 1234567890, 123456789 )\n1234567890s 123456789ns\n\n>>> print Hightime( 0, 1000000000 )\n1s 0ns\n\n>>> print Hightime( 1, 2222222222 )\n3s 222222222ns\n\n>>> print Hightime( \"9\" * 99, exponent=yoctoseconds )\n999999999999999999999999999999999999999999999999999999999999999999999999999s 999999999999999999999999000e-27s\n\n>>> delta_t = Hightime( 22.23 ) - Hightime( 0.1 )\n>>> delta_t\n<hightimedelta.Hightimedelta object at 0x7f682e322cd0>\n>>> print delta_t\n22s 130ms\n\n\"\"\""
    ],
    "functions": [],
    "classes": []
}