{
    "identifiers": [
        "print_function",
        "baseclient",
        "BaseClient",
        "_BaseClient",
        "baseclient",
        "BaseClient",
        "_BaseClient",
        "time",
        "url",
        "timeout",
        "user_id",
        "password",
        "token",
        "ignore_authrc",
        "trust_all_ssl_certificates",
        "auth_svc",
        "service_ver",
        "async_job_check_time_ms",
        "async_job_check_time_scale_percent",
        "async_job_check_max_time_ms",
        "url",
        "ValueError",
        "service_ver",
        "_BaseClient",
        "url",
        "timeout",
        "timeout",
        "user_id",
        "user_id",
        "password",
        "password",
        "token",
        "token",
        "ignore_authrc",
        "ignore_authrc",
        "trust_all_ssl_certificates",
        "trust_all_ssl_certificates",
        "auth_svc",
        "auth_svc",
        "async_job_check_time_ms",
        "async_job_check_time_ms",
        "async_job_check_time_scale_percent",
        "async_job_check_time_scale_percent",
        "async_job_check_max_time_ms",
        "async_job_check_max_time_ms",
        "job_id",
        "_client",
        "_check_job",
        "job_id",
        "context",
        "_client",
        "_submit_job",
        "_service_ver",
        "context",
        "context",
        "_genbank_to_genome_submit",
        "context",
        "_client",
        "async_job_check_time",
        "time",
        "sleep",
        "async_job_check_time",
        "async_job_check_time",
        "_client",
        "async_job_check_time_scale_percent",
        "async_job_check_time",
        "_client",
        "async_job_check_max_time",
        "_client",
        "async_job_check_max_time",
        "_check_job",
        "job_id",
        "job_state",
        "job_state",
        "context",
        "_client",
        "_submit_job",
        "_service_ver",
        "context",
        "context",
        "_genome_to_gff_submit",
        "context",
        "_client",
        "async_job_check_time",
        "time",
        "sleep",
        "async_job_check_time",
        "async_job_check_time",
        "_client",
        "async_job_check_time_scale_percent",
        "async_job_check_time",
        "_client",
        "async_job_check_max_time",
        "_client",
        "async_job_check_max_time",
        "_check_job",
        "job_id",
        "job_state",
        "job_state",
        "context",
        "_client",
        "_submit_job",
        "_service_ver",
        "context",
        "context",
        "_genome_to_genbank_submit",
        "context",
        "_client",
        "async_job_check_time",
        "time",
        "sleep",
        "async_job_check_time",
        "async_job_check_time",
        "_client",
        "async_job_check_time_scale_percent",
        "async_job_check_time",
        "_client",
        "async_job_check_max_time",
        "_client",
        "async_job_check_max_time",
        "_check_job",
        "job_id",
        "job_state",
        "job_state",
        "context",
        "_client",
        "_submit_job",
        "_service_ver",
        "context",
        "context",
        "_export_genome_as_genbank_submit",
        "context",
        "_client",
        "async_job_check_time",
        "time",
        "sleep",
        "async_job_check_time",
        "async_job_check_time",
        "_client",
        "async_job_check_time_scale_percent",
        "async_job_check_time",
        "_client",
        "async_job_check_max_time",
        "_client",
        "async_job_check_max_time",
        "_check_job",
        "job_id",
        "job_state",
        "job_state",
        "context",
        "_client",
        "_submit_job",
        "_service_ver",
        "context",
        "context",
        "_fasta_gff_to_genome_submit",
        "context",
        "_client",
        "async_job_check_time",
        "time",
        "sleep",
        "async_job_check_time",
        "async_job_check_time",
        "_client",
        "async_job_check_time_scale_percent",
        "async_job_check_time",
        "_client",
        "async_job_check_max_time",
        "_client",
        "async_job_check_max_time",
        "_check_job",
        "job_id",
        "job_state",
        "job_state",
        "context",
        "_client",
        "_submit_job",
        "_service_ver",
        "context",
        "context",
        "_save_one_genome_submit",
        "context",
        "_client",
        "async_job_check_time",
        "time",
        "sleep",
        "async_job_check_time",
        "async_job_check_time",
        "_client",
        "async_job_check_time_scale_percent",
        "async_job_check_time",
        "_client",
        "async_job_check_max_time",
        "_client",
        "async_job_check_max_time",
        "_check_job",
        "job_id",
        "job_state",
        "job_state",
        "context",
        "_client",
        "_submit_job",
        "_service_ver",
        "context",
        "_client",
        "async_job_check_time",
        "time",
        "sleep",
        "async_job_check_time",
        "async_job_check_time",
        "_client",
        "async_job_check_time_scale_percent",
        "async_job_check_time",
        "_client",
        "async_job_check_max_time",
        "_client",
        "async_job_check_max_time",
        "_check_job",
        "job_id",
        "job_state",
        "job_state"
    ],
    "literals": [
        "'https://kbase.us/services/authorization/Sessions/Login'",
        "'release'",
        "'A url is required'",
        "'GenomeFileUtil'",
        "'GenomeFileUtil.genbank_to_genome'",
        "'finished'",
        "'result'",
        "'GenomeFileUtil.genome_to_gff'",
        "'finished'",
        "'result'",
        "'GenomeFileUtil.genome_to_genbank'",
        "'finished'",
        "'result'",
        "'GenomeFileUtil.export_genome_as_genbank'",
        "'finished'",
        "'result'",
        "'GenomeFileUtil.fasta_gff_to_genome'",
        "'finished'",
        "'result'",
        "'GenomeFileUtil.save_one_genome'",
        "'finished'",
        "'result'",
        "'GenomeFileUtil.status'",
        "'finished'",
        "'result'"
    ],
    "variables": [
        "_service_ver",
        "_client",
        "job_id",
        "async_job_check_time",
        "async_job_check_time",
        "async_job_check_time",
        "job_state",
        "job_id",
        "async_job_check_time",
        "async_job_check_time",
        "async_job_check_time",
        "job_state",
        "job_id",
        "async_job_check_time",
        "async_job_check_time",
        "async_job_check_time",
        "job_state",
        "job_id",
        "async_job_check_time",
        "async_job_check_time",
        "async_job_check_time",
        "job_state",
        "job_id",
        "async_job_check_time",
        "async_job_check_time",
        "async_job_check_time",
        "job_state",
        "job_id",
        "async_job_check_time",
        "async_job_check_time",
        "async_job_check_time",
        "job_state",
        "job_id",
        "async_job_check_time",
        "async_job_check_time",
        "async_job_check_time",
        "job_state"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "",
        "",
        "Autogenerated by the KBase type compiler -",
        "any changes made here will be overwritten",
        "",
        "",
        "the following is a hack to get the baseclient to import whether we're in a",
        "package or not. This makes pep8 unhappy hence the annotations.",
        "baseclient and this client are in a package",
        "@UnusedImport",
        "no they aren't",
        "@Reimport"
    ],
    "docstrings": [
        "\"\"\"\n        :param params: instance of type \"GenbankToGenomeParams\" (genome_name\n           - becomes the name of the object workspace_name - the name of the\n           workspace it gets saved to. source - Source of the file typically\n           something like RefSeq or Ensembl taxon_ws_name - where the\n           reference taxons are : ReferenceTaxons taxon_reference - if\n           defined, will try to link the Genome to the specified taxonomy\n           object insteas of performing the lookup during upload release -\n           Release or version number of the data per example Ensembl has\n           numbered releases of all their data: Release 31\n           generate_ids_if_needed - If field used for feature id is not\n           there, generate ids (default behavior is raising an exception)\n           genetic_code - Genetic code of organism. Overwrites determined GC\n           from taxon object type - Reference, Representative or User upload)\n           -> structure: parameter \"file\" of type \"File\" -> structure:\n           parameter \"path\" of String, parameter \"shock_id\" of String,\n           parameter \"ftp_url\" of String, parameter \"genome_name\" of String,\n           parameter \"workspace_name\" of String, parameter \"source\" of\n           String, parameter \"taxon_wsname\" of String, parameter\n           \"taxon_reference\" of String, parameter \"release\" of String,\n           parameter \"generate_ids_if_needed\" of String, parameter\n           \"genetic_code\" of Long, parameter \"type\" of String, parameter\n           \"metadata\" of type \"usermeta\" -> mapping from String to String\n        :returns: instance of type \"GenomeSaveResult\" -> structure: parameter\n           \"genome_ref\" of String\n        \"\"\"",
        "\"\"\"\n        :param params: instance of type \"GenomeToGFFParams\" (is_gtf -\n           optional flag switching export to GTF format (default is 0, which\n           means GFF) target_dir - optional target directory to create file\n           in (default is temporary folder with name 'gff_<timestamp>'\n           created in scratch)) -> structure: parameter \"genome_ref\" of\n           String, parameter \"ref_path_to_genome\" of list of String,\n           parameter \"is_gtf\" of type \"boolean\" (A boolean - 0 for false, 1\n           for true. @range (0, 1)), parameter \"target_dir\" of String\n        :returns: instance of type \"GenomeToGFFResult\" (from_cache is 1 if\n           the file already exists and was just returned, 0 if the file was\n           generated during this call.) -> structure: parameter \"gff_file\" of\n           type \"File\" -> structure: parameter \"path\" of String, parameter\n           \"shock_id\" of String, parameter \"ftp_url\" of String, parameter\n           \"from_cache\" of type \"boolean\" (A boolean - 0 for false, 1 for\n           true. @range (0, 1))\n        \"\"\"",
        "\"\"\"\n        :param params: instance of type \"GenomeToGenbankParams\" -> structure:\n           parameter \"genome_ref\" of String, parameter \"ref_path_to_genome\"\n           of list of String\n        :returns: instance of type \"GenomeToGenbankResult\" (from_cache is 1\n           if the file already exists and was just returned, 0 if the file\n           was generated during this call.) -> structure: parameter\n           \"genbank_file\" of type \"File\" -> structure: parameter \"path\" of\n           String, parameter \"shock_id\" of String, parameter \"ftp_url\" of\n           String, parameter \"from_cache\" of type \"boolean\" (A boolean - 0\n           for false, 1 for true. @range (0, 1))\n        \"\"\"",
        "\"\"\"\n        :param params: instance of type \"ExportParams\" (input and output\n           structure functions for standard downloaders) -> structure:\n           parameter \"input_ref\" of String\n        :returns: instance of type \"ExportOutput\" -> structure: parameter\n           \"shock_id\" of String\n        \"\"\"",
        "\"\"\"\n        :param params: instance of type \"FastaGFFToGenomeParams\" (genome_name\n           - becomes the name of the object workspace_name - the name of the\n           workspace it gets saved to. source - Source of the file typically\n           something like RefSeq or Ensembl taxon_ws_name - where the\n           reference taxons are : ReferenceTaxons taxon_reference - if\n           defined, will try to link the Genome to the specified taxonomy\n           object insteas of performing the lookup during upload release -\n           Release or version number of the data per example Ensembl has\n           numbered releases of all their data: Release 31 genetic_code -\n           Genetic code of organism. Overwrites determined GC from taxon\n           object type - Reference, Representative or User upload) ->\n           structure: parameter \"fasta_file\" of type \"File\" -> structure:\n           parameter \"path\" of String, parameter \"shock_id\" of String,\n           parameter \"ftp_url\" of String, parameter \"gff_file\" of type \"File\"\n           -> structure: parameter \"path\" of String, parameter \"shock_id\" of\n           String, parameter \"ftp_url\" of String, parameter \"genome_name\" of\n           String, parameter \"workspace_name\" of String, parameter \"source\"\n           of String, parameter \"taxon_wsname\" of String, parameter\n           \"taxon_reference\" of String, parameter \"release\" of String,\n           parameter \"genetic_code\" of Long, parameter \"type\" of String,\n           parameter \"scientific_name\" of String, parameter \"metadata\" of\n           type \"usermeta\" -> mapping from String to String\n        :returns: instance of type \"GenomeSaveResult\" -> structure: parameter\n           \"genome_ref\" of String\n        \"\"\"",
        "\"\"\"\n        :param params: instance of type \"SaveOneGenomeParams\" -> structure:\n           parameter \"workspace\" of String, parameter \"name\" of String,\n           parameter \"data\" of type \"Genome\" (Genome object holds much of the\n           data relevant for a genome in KBase Genome publications should be\n           papers about the genome, not papers about certain features of the\n           genome (which go into the Feature object) Should the Genome object\n           have a list of feature ids? (in addition to having a list of\n           feature_refs) Should the Genome object contain a list of\n           contig_ids too? @optional assembly_ref quality close_genomes\n           analysis_events features source_id source contigs contig_ids\n           publications md5 taxonomy gc_content complete dna_size num_contigs\n           contig_lengths contigset_ref @metadata ws gc_content as GC content\n           @metadata ws taxonomy as Taxonomy @metadata ws md5 as MD5\n           @metadata ws dna_size as Size @metadata ws genetic_code as Genetic\n           code @metadata ws domain as Domain @metadata ws source_id as\n           Source ID @metadata ws source as Source @metadata ws\n           scientific_name as Name @metadata ws length(close_genomes) as\n           Close genomes @metadata ws length(features) as Number features\n           @metadata ws num_contigs as Number contigs) -> structure:\n           parameter \"id\" of type \"Genome_id\" (KBase genome ID @id kb),\n           parameter \"scientific_name\" of String, parameter \"domain\" of\n           String, parameter \"genetic_code\" of Long, parameter \"dna_size\" of\n           Long, parameter \"num_contigs\" of Long, parameter \"contigs\" of list\n           of type \"Contig\" (Type spec for a \"Contig\" subobject in the\n           \"ContigSet\" object Contig_id id - ID of contig in contigset string\n           md5 - unique hash of contig sequence string sequence - sequence of\n           the contig string description - Description of the contig (e.g.\n           everything after the ID in a FASTA file) @optional length md5\n           genetic_code cell_compartment replicon_geometry replicon_type name\n           description complete) -> structure: parameter \"id\" of type\n           \"Contig_id\" (ContigSet contig ID @id external), parameter \"length\"\n           of Long, parameter \"md5\" of String, parameter \"sequence\" of\n           String, parameter \"genetic_code\" of Long, parameter\n           \"cell_compartment\" of String, parameter \"replicon_type\" of String,\n           parameter \"replicon_geometry\" of String, parameter \"name\" of\n           String, parameter \"description\" of String, parameter \"complete\" of\n           type \"Bool\", parameter \"contig_lengths\" of list of Long, parameter\n           \"contig_ids\" of list of type \"Contig_id\" (ContigSet contig ID @id\n           external), parameter \"source\" of String, parameter \"source_id\" of\n           type \"source_id\" (Reference to a source_id @id external),\n           parameter \"md5\" of String, parameter \"taxonomy\" of String,\n           parameter \"gc_content\" of Double, parameter \"complete\" of Long,\n           parameter \"publications\" of list of type \"publication\" (Structure\n           for a publication (from ER API) also want to capture authors,\n           journal name (not in ER)) -> tuple of size 7: parameter \"id\" of\n           Long, parameter \"source_db\" of String, parameter \"article_title\"\n           of String, parameter \"link\" of String, parameter \"pubdate\" of\n           String, parameter \"authors\" of String, parameter \"journal_name\" of\n           String, parameter \"features\" of list of type \"Feature\" (Structure\n           for a single feature of a genome Should genome_id contain the\n           genome_id in the Genome object, the workspace id of the Genome\n           object, a genomeref, something else? Should sequence be in\n           separate objects too? We may want to add additional fields for\n           other CDM functions (e.g., atomic regulons, coexpressed fids,\n           co_occurring fids,...) @optional orthologs quality\n           feature_creation_event md5 location function ontology_terms\n           protein_translation protein_families subsystems publications\n           subsystem_data aliases annotations regulon_data atomic_regulons\n           coexpressed_fids co_occurring_fids dna_sequence\n           protein_translation_length dna_sequence_length) -> structure:\n           parameter \"id\" of type \"Feature_id\" (KBase Feature ID @id\n           external), parameter \"location\" of list of tuple of size 4: type\n           \"Contig_id\" (ContigSet contig ID @id external), Long, String,\n           Long, parameter \"type\" of String, parameter \"function\" of String,\n           parameter \"ontology_terms\" of mapping from String to mapping from\n           String to type \"OntologyData\" -> structure: parameter \"id\" of\n           String, parameter \"ontology_ref\" of String, parameter\n           \"term_lineage\" of list of String, parameter \"term_name\" of String,\n           parameter \"evidence\" of list of type \"OntologyEvidence\" (@optional\n           translation_provenance alignment_evidence) -> structure: parameter\n           \"method\" of String, parameter \"method_version\" of String,\n           parameter \"timestamp\" of String, parameter\n           \"translation_provenance\" of tuple of size 3: parameter\n           \"ontologytranslation_ref\" of String, parameter \"namespace\" of\n           String, parameter \"source_term\" of String, parameter\n           \"alignment_evidence\" of list of tuple of size 4: parameter \"start\"\n           of Long, parameter \"stop\" of Long, parameter \"align_length\" of\n           Long, parameter \"identify\" of Double, parameter \"md5\" of String,\n           parameter \"protein_translation\" of String, parameter\n           \"dna_sequence\" of String, parameter \"protein_translation_length\"\n           of Long, parameter \"dna_sequence_length\" of Long, parameter\n           \"publications\" of list of type \"publication\" (Structure for a\n           publication (from ER API) also want to capture authors, journal\n           name (not in ER)) -> tuple of size 7: parameter \"id\" of Long,\n           parameter \"source_db\" of String, parameter \"article_title\" of\n           String, parameter \"link\" of String, parameter \"pubdate\" of String,\n           parameter \"authors\" of String, parameter \"journal_name\" of String,\n           parameter \"subsystems\" of list of String, parameter\n           \"protein_families\" of list of type \"ProteinFamily\" (Structure for\n           a protein family @optional query_begin query_end subject_begin\n           subject_end score evalue subject_description release_version) ->\n           structure: parameter \"id\" of String, parameter \"subject_db\" of\n           String, parameter \"release_version\" of String, parameter\n           \"subject_description\" of String, parameter \"query_begin\" of Long,\n           parameter \"query_end\" of Long, parameter \"subject_begin\" of Long,\n           parameter \"subject_end\" of Long, parameter \"score\" of Double,\n           parameter \"evalue\" of Double, parameter \"aliases\" of list of\n           String, parameter \"orthologs\" of list of tuple of size 2: String,\n           Double, parameter \"annotations\" of list of type \"annotation\" (a\n           notation by a curator of the genome object) -> tuple of size 3:\n           parameter \"comment\" of String, parameter \"annotator\" of String,\n           parameter \"annotation_time\" of Double, parameter \"subsystem_data\"\n           of list of type \"subsystem_data\" (Structure for subsystem data\n           (from CDMI API)) -> tuple of size 3: parameter \"subsystem\" of\n           String, parameter \"variant\" of String, parameter \"role\" of String,\n           parameter \"regulon_data\" of list of type \"regulon_data\" (Structure\n           for regulon data (from CDMI API)) -> tuple of size 3: parameter\n           \"regulon_id\" of String, parameter \"regulon_set\" of list of type\n           \"Feature_id\" (KBase Feature ID @id external), parameter \"tfs\" of\n           list of type \"Feature_id\" (KBase Feature ID @id external),\n           parameter \"atomic_regulons\" of list of type \"atomic_regulon\"\n           (Structure for an atomic regulon (from CDMI API)) -> tuple of size\n           2: parameter \"atomic_regulon_id\" of String, parameter\n           \"atomic_regulon_size\" of Long, parameter \"coexpressed_fids\" of\n           list of type \"coexpressed_fid\" (Structure for coexpressed fids\n           (from CDMI API)) -> tuple of size 2: parameter \"scored_fid\" of\n           type \"Feature_id\" (KBase Feature ID @id external), parameter\n           \"score\" of Double, parameter \"co_occurring_fids\" of list of type\n           \"co_occurring_fid\" (Structure for co-occurring fids (from CDMI\n           API)) -> tuple of size 2: parameter \"scored_fid\" of type\n           \"Feature_id\" (KBase Feature ID @id external), parameter \"score\" of\n           Double, parameter \"quality\" of type \"Feature_quality_measure\"\n           (@optional weighted_hit_count hit_count existence_priority\n           overlap_rules pyrrolysylprotein truncated_begin truncated_end\n           existence_confidence frameshifted selenoprotein) -> structure:\n           parameter \"truncated_begin\" of type \"Bool\", parameter\n           \"truncated_end\" of type \"Bool\", parameter \"existence_confidence\"\n           of Double, parameter \"frameshifted\" of type \"Bool\", parameter\n           \"selenoprotein\" of type \"Bool\", parameter \"pyrrolysylprotein\" of\n           type \"Bool\", parameter \"overlap_rules\" of list of String,\n           parameter \"existence_priority\" of Double, parameter \"hit_count\" of\n           Double, parameter \"weighted_hit_count\" of Double, parameter\n           \"feature_creation_event\" of type \"Analysis_event\" (@optional\n           tool_name execution_time parameters hostname) -> structure:\n           parameter \"id\" of type \"Analysis_event_id\", parameter \"tool_name\"\n           of String, parameter \"execution_time\" of Double, parameter\n           \"parameters\" of list of String, parameter \"hostname\" of String,\n           parameter \"contigset_ref\" of type \"ContigSet_ref\" (Reference to a\n           ContigSet object containing the contigs for this genome in the\n           workspace @id ws KBaseGenomes.ContigSet), parameter \"assembly_ref\"\n           of type \"Assembly_ref\" (Reference to an Assembly object in the\n           workspace @id ws KBaseGenomeAnnotations.Assembly), parameter\n           \"quality\" of type \"Genome_quality_measure\" (@optional\n           frameshift_error_rate sequence_error_rate) -> structure: parameter\n           \"frameshift_error_rate\" of Double, parameter \"sequence_error_rate\"\n           of Double, parameter \"close_genomes\" of list of type\n           \"Close_genome\" (@optional genome closeness_measure) -> structure:\n           parameter \"genome\" of type \"Genome_id\" (KBase genome ID @id kb),\n           parameter \"closeness_measure\" of Double, parameter\n           \"analysis_events\" of list of type \"Analysis_event\" (@optional\n           tool_name execution_time parameters hostname) -> structure:\n           parameter \"id\" of type \"Analysis_event_id\", parameter \"tool_name\"\n           of String, parameter \"execution_time\" of Double, parameter\n           \"parameters\" of list of String, parameter \"hostname\" of String,\n           parameter \"hidden\" of type \"boolean\" (A boolean - 0 for false, 1\n           for true. @range (0, 1))\n        :returns: instance of type \"SaveGenomeResult\" -> structure: parameter\n           \"info\" of type \"object_info\" (Information about an object,\n           including user provided metadata. obj_id objid - the numerical id\n           of the object. obj_name name - the name of the object. type_string\n           type - the type of the object. timestamp save_date - the save date\n           of the object. obj_ver ver - the version of the object. username\n           saved_by - the user that saved or copied the object. ws_id wsid -\n           the workspace containing the object. ws_name workspace - the\n           workspace containing the object. string chsum - the md5 checksum\n           of the object. int size - the size of the object in bytes.\n           usermeta meta - arbitrary user-supplied metadata about the\n           object.) -> tuple of size 11: parameter \"objid\" of type \"obj_id\"\n           (The unique, permanent numerical ID of an object.), parameter\n           \"name\" of type \"obj_name\" (A string used as a name for an object.\n           Any string consisting of alphanumeric characters and the\n           characters |._- that is not an integer is acceptable.), parameter\n           \"type\" of type \"type_string\" (A type string. Specifies the type\n           and its version in a single string in the format\n           [module].[typename]-[major].[minor]: module - a string. The module\n           name of the typespec containing the type. typename - a string. The\n           name of the type as assigned by the typedef statement. major - an\n           integer. The major version of the type. A change in the major\n           version implies the type has changed in a non-backwards compatible\n           way. minor - an integer. The minor version of the type. A change\n           in the minor version implies that the type has changed in a way\n           that is backwards compatible with previous type definitions. In\n           many cases, the major and minor versions are optional, and if not\n           provided the most recent version will be used. Example:\n           MyModule.MyType-3.1), parameter \"save_date\" of type \"timestamp\" (A\n           time in the format YYYY-MM-DDThh:mm:ssZ, where Z is either the\n           character Z (representing the UTC timezone) or the difference in\n           time to UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500\n           (EST time) 2013-04-03T08:56:32+0000 (UTC time)\n           2013-04-03T08:56:32Z (UTC time)), parameter \"version\" of Long,\n           parameter \"saved_by\" of type \"username\" (Login name of a KBase\n           user account.), parameter \"wsid\" of type \"ws_id\" (The unique,\n           permanent numerical ID of a workspace.), parameter \"workspace\" of\n           type \"ws_name\" (A string used as a name for a workspace. Any\n           string consisting of alphanumeric characters and \"_\", \".\", or \"-\"\n           that is not an integer is acceptable. The name may optionally be\n           prefixed with the workspace owner's user name and a colon, e.g.\n           kbasetest:my_workspace.), parameter \"chsum\" of String, parameter\n           \"size\" of Long, parameter \"meta\" of type \"usermeta\" (User provided\n           metadata about an object. Arbitrary key-value pairs provided by\n           the user.) -> mapping from String to String\n        \"\"\""
    ],
    "functions": [
        "_check_job",
        "_genbank_to_genome_submit",
        "genbank_to_genome",
        "_genome_to_gff_submit",
        "genome_to_gff",
        "_genome_to_genbank_submit",
        "genome_to_genbank",
        "_export_genome_as_genbank_submit",
        "export_genome_as_genbank",
        "_fasta_gff_to_genome_submit",
        "fasta_gff_to_genome",
        "_save_one_genome_submit",
        "save_one_genome",
        "status"
    ],
    "classes": [
        "GenomeFileUtil"
    ]
}