{
    "identifiers": [
        "pandas",
        "pd",
        "networkx",
        "Graph",
        "MultiGraph",
        "dataframe",
        "threshold_by_percent_unique",
        "threshold_by_count_unique",
        "node_id_columns",
        "node_property_columns",
        "edge_property_columns",
        "collapse_edges",
        "edge_agg_key",
        "isinstance",
        "dataframe",
        "pd",
        "DataFrame",
        "format",
        "dataframe",
        "MultiGraph",
        "len",
        "node_id_columns",
        "node_id_columns",
        "threshold_by_count_unique",
        "col",
        "dataframe",
        "col",
        "nunique",
        "threshold_by_count_unique",
        "col",
        "dataframe",
        "col",
        "nunique",
        "dataframe",
        "shape",
        "threshold_by_percent_unique",
        "sorted",
        "col",
        "col",
        "dataframe",
        "columns",
        "node_criterion",
        "col",
        "node_type",
        "node_columns",
        "M",
        "add_nodes_from",
        "node",
        "node_type",
        "node",
        "dataframe",
        "node_type",
        "unique",
        "i",
        "row",
        "dataframe",
        "iterrows",
        "k",
        "row",
        "k",
        "k",
        "edge_property_columns",
        "node_type",
        "node_columns",
        "row",
        "node_type",
        "M",
        "nodes",
        "node_id",
        "k",
        "node_property_columns",
        "k",
        "node",
        "row",
        "k",
        "isinstance",
        "node",
        "k",
        "row",
        "k",
        "node",
        "k",
        "node",
        "k",
        "format",
        "row",
        "k",
        "row",
        "k",
        "node",
        "k",
        "node",
        "k",
        "format",
        "row",
        "k",
        "other_node_id",
        "other_node_type",
        "node_buffer",
        "join",
        "sorted",
        "node_type",
        "other_node_type",
        "M",
        "add_edge",
        "node_id",
        "other_node_id",
        "edge_properties",
        "node_buffer",
        "append",
        "node_id",
        "node_type",
        "collapse_edges",
        "Graph",
        "M",
        "u",
        "v",
        "data",
        "M",
        "edges",
        "data",
        "data",
        "edge_agg_key",
        "edge_agg_key",
        "data",
        "G",
        "u",
        "v",
        "w",
        "edge",
        "edge_agg_key",
        "edge_agg_key",
        "edge",
        "w",
        "G",
        "M"
    ],
    "literals": [
        "'weight'",
        "\"{} is not a pandas DataFrame\"",
        "'type'",
        "\"|{}\"",
        "\"|{}\"",
        "'type'",
        "'_'"
    ],
    "variables": [
        "M",
        "node_columns",
        "node_criterion",
        "node_criterion",
        "node_columns",
        "edge_properties",
        "node_buffer",
        "node_id",
        "node",
        "node",
        "k",
        "node",
        "k",
        "edge_properties",
        "G",
        "w",
        "edge",
        "edge",
        "edge_agg_key"
    ],
    "comments": [
        "if explicit specification of node_id_columns is provided, use those",
        "otherwise, compute with thresholds based on the contents of the dataframe",
        "use the unique values for each node column as node types",
        "iterate over the rows and generate an edge for each pair of node columns",
        "assemble the edge properties as a dictionary",
        "iterate over the node_ids in each node_column of the dataframe row",
        "get a reference to the node and assign any specified node properties",
        "if values are not identical for every occurence of node, append with a pipe delimiter",
        "build edges using precomputed edge properties",
        "sort node_type so undirected edges all share the same type independent of order",
        "store the node from this column in the buffer for future edge building",
        "convert the MultiGraph to a Graph",
        "preserve the edge count as a sum of the weight values (or other user-supplied key)"
    ],
    "docstrings": [
        "'''\n    Build an undirected graph from a pandas dataframe.\n    This function attempts to infer which cells should become nodes based on either:\n        a) what percentage of the column are unique values (defaults to 10%)\n        b) an explicit count of unique values (i.e. any column with 10 unique columns or less)\n        c) an explicit list of column keys (i.e ['employee_id', 'location_code'])\n    '''"
    ],
    "functions": [
        "graph_from_dataframe"
    ],
    "classes": []
}