{
    "identifiers": [
        "argparse",
        "retro",
        "baselines",
        "deepq",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "retro",
        "make",
        "args",
        "game",
        "args",
        "state",
        "retro",
        "STATE_DEFAULT",
        "scenario",
        "args",
        "scenario",
        "record",
        "args",
        "record",
        "args",
        "verbose",
        "args",
        "quiet",
        "deepq",
        "models",
        "mlp",
        "deepq",
        "learn",
        "env",
        "q_func",
        "model",
        "lr",
        "max_timesteps",
        "buffer_size",
        "exploration_fraction",
        "exploration_final_eps",
        "print_freq",
        "callback",
        "callback",
        "lcl",
        "_glb",
        "lcl",
        "sum",
        "lcl",
        "is_solved",
        "format",
        "args",
        "game",
        "args",
        "state",
        "output_string",
        "act",
        "save",
        "output_string",
        "env",
        "reset",
        "done",
        "env",
        "render",
        "env",
        "step",
        "act",
        "obs",
        "episode_rew",
        "rew",
        "episode_rew"
    ],
    "literals": [
        "'game'",
        "'the name or path for the game to run'",
        "'state'",
        "'?'",
        "'the initial state file to load, minus the extension'",
        "'--scenario'",
        "'-s'",
        "'scenario'",
        "'the scenario file to load, minus the extension'",
        "'t'",
        "'episode_rewards'",
        "'Saving model to {0} {1}'",
        "\"Episode reward\""
    ],
    "variables": [
        "parser",
        "args",
        "env",
        "verbosity",
        "model",
        "act",
        "is_solved",
        "output_string",
        "obs",
        "done",
        "episode_rew",
        "obs",
        "rew",
        "done",
        "_"
    ],
    "comments": [
        "Based on:",
        "https://github.com/openai/baselines/blob/master/baselines/deepq/experiments/train_cartpole.py",
        "https://github.com/openai/retro/blob/master/examples/random_agent.py",
        "if training is slow try varying parameters here",
        "stop training if reward exceeds 1000000"
    ],
    "docstrings": [],
    "functions": [
        "callback"
    ],
    "classes": []
}