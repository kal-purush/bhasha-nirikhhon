{
    "identifiers": [
        "prefs",
        "project"
    ],
    "literals": [
        "'ignored_resources'",
        "'*.pyc'",
        "'*~'",
        "'.ropeproject'",
        "'.hg'",
        "'.svn'",
        "'_svn'",
        "'.git'",
        "'.tox'",
        "'save_objectdb'",
        "'compress_objectdb'",
        "'automatic_soa'",
        "'soa_followed_calls'",
        "'perform_doa'",
        "'validate_objectdb'",
        "'max_history_items'",
        "'save_history'",
        "'compress_history'",
        "'indent_size'",
        "'extension_modules'",
        "'import_dynload_stdmods'",
        "'ignore_syntax_errors'",
        "'ignore_bad_imports'",
        "'prefer_module_from_imports'",
        "'split_imports'",
        "'pull_imports_to_top'",
        "'sort_imports_alphabetically'",
        "'type_hinting_factory'",
        "'rope.base.oi.type_hinting.factory.default_type_hinting_factory'"
    ],
    "variables": [
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs",
        "prefs"
    ],
    "comments": [
        "The default ``config.py``",
        "flake8: noqa",
        "Specify which files and folders to ignore in the project.",
        "Changes to ignored resources are not added to the history and",
        "VCSs.  Also they are not returned in `Project.get_files()`.",
        "Note that ``?`` and ``*`` match all characters but slashes.",
        "'*.pyc': matches 'test.pyc' and 'pkg/test.pyc'",
        "'mod*.pyc': matches 'test/mod1.pyc' but not 'mod/1.pyc'",
        "'.svn': matches 'pkg/.svn' and all of its children",
        "'build/*.o': matches 'build/lib.o' but not 'build/sub/lib.o'",
        "'build//*.o': matches 'build/lib.o' and 'build/sub/lib.o'",
        "Specifies which files should be considered python files.  It is",
        "useful when you have scripts inside your project.  Only files",
        "ending with ``.py`` are considered to be python files by",
        "default.",
        "prefs['python_files'] = ['*.py']",
        "Custom source folders:  By default rope searches the project",
        "for finding source folders (folders that should be searched",
        "for finding modules).  You can add paths to that list.  Note",
        "that rope guesses project source folders correctly most of the",
        "time; use this if you have any problems.",
        "The folders should be relative to project root and use '/' for",
        "separating folders regardless of the platform rope is running on.",
        "'src/my_source_folder' for instance.",
        "prefs.add('source_folders', 'src')",
        "You can extend python path for looking up modules",
        "prefs.add('python_path', '~/python/')",
        "Should rope save object information or not.",
        "If `True`, rope analyzes each module when it is being saved.",
        "The depth of calls to follow in static object analysis",
        "If `False` when running modules or unit tests \"dynamic object",
        "analysis\" is turned off.  This makes them much faster.",
        "Rope can check the validity of its object DB when running.",
        "How many undos to hold?",
        "Shows whether to save history across sessions.",
        "Set the number spaces used for indenting.  According to",
        ":PEP:`8`, it is best to use 4 spaces.  Since most of rope's",
        "unit-tests use 4 spaces it is more reliable, too.",
        "Builtin and c-extension modules that are allowed to be imported",
        "and inspected by rope.",
        "Add all standard c-extensions to extension_modules list.",
        "If `True` modules with syntax errors are considered to be empty.",
        "The default value is `False`; When `False` syntax errors raise",
        "`rope.base.exceptions.ModuleSyntaxError` exception.",
        "If `True`, rope ignores unresolvable imports.  Otherwise, they",
        "appear in the importing namespace.",
        "If `True`, rope will insert new module imports as",
        "`from <package> import <module>` by default.",
        "If `True`, rope will transform a comma list of imports into",
        "multiple separate import statements when organizing",
        "imports.",
        "If `True`, rope will remove all top-level import statements and",
        "reinsert them at the top of the module when making changes.",
        "If `True`, rope will sort imports alphabetically by module name instead of",
        "alphabetically by import statement, with from imports after normal",
        "imports.",
        "Location of implementation of rope.base.oi.type_hinting.interfaces.ITypeHintingFactory",
        "In general case, you don't have to change this value, unless you're an rope expert.",
        "Change this value to inject you own implementations of interfaces",
        "listed in module rope.base.oi.type_hinting.providers.interfaces",
        "For example, you can add you own providers for Django Models, or disable the search",
        "type-hinting in a class hierarchy, etc.",
        "Do whatever you like here!"
    ],
    "docstrings": [
        "\"\"\"This function is called before opening the project\"\"\"",
        "\"\"\"This function is called after opening the project\"\"\""
    ],
    "functions": [
        "set_prefs",
        "project_opened"
    ],
    "classes": []
}