{
    "identifiers": [
        "os",
        "copy",
        "deepcopy",
        "types",
        "sys",
        "argparse",
        "ArgumentParser",
        "subprocess",
        "json",
        "datetime",
        "dateutil",
        "tz",
        "os",
        "path",
        "dirname",
        "sys",
        "argv",
        "subprocess",
        "Popen",
        "format",
        "directory",
        "shell",
        "stdout",
        "subprocess",
        "PIPE",
        "stdout",
        "read",
        "split",
        "decode",
        "args",
        "os",
        "makedirs",
        "args",
        "log_dir",
        "exist_ok",
        "args",
        "exist_ok",
        "open",
        "os",
        "path",
        "join",
        "args",
        "log_dir",
        "f",
        "json",
        "dump",
        "vars",
        "args",
        "f",
        "indent",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "required",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "args",
        "model",
        "args",
        "val_tasks",
        "deepcopy",
        "args",
        "train_tasks",
        "args",
        "val_tasks",
        "args",
        "val_tasks",
        "remove",
        "len",
        "args",
        "gpus",
        "args",
        "gpus",
        "join",
        "datetime",
        "datetime",
        "now",
        "tz",
        "tz",
        "tzoffset",
        "strftime",
        "split",
        "len",
        "args",
        "train_tasks",
        "args",
        "train_iterations",
        "len",
        "args",
        "train_iterations",
        "len",
        "args",
        "train_tasks",
        "len",
        "args",
        "train_tasks",
        "args",
        "train_iterations",
        "len",
        "args",
        "train_batch_tokens",
        "len",
        "args",
        "train_tasks",
        "len",
        "args",
        "train_tasks",
        "args",
        "train_batch_tokens",
        "len",
        "args",
        "val_batch_size",
        "len",
        "args",
        "val_tasks",
        "len",
        "args",
        "val_tasks",
        "args",
        "val_batch_size",
        "get_commit",
        "join",
        "args",
        "train_tasks",
        "len",
        "args",
        "train_tasks",
        "train_out",
        "join",
        "x",
        "x",
        "args",
        "train_iterations",
        "os",
        "path",
        "join",
        "args",
        "save",
        "args",
        "timestamp",
        "train_out",
        "join",
        "args",
        "val_tasks",
        "args",
        "val_tasks",
        "args",
        "train_tasks",
        "args",
        "model",
        "args",
        "world_size",
        "args",
        "commit",
        "os",
        "path",
        "join",
        "args",
        "log_dir",
        "save_args",
        "args",
        "args"
    ],
    "literals": [
        "\"cd {} && git log | head -n 1\"",
        "'config.json'",
        "'wt'",
        "'--data'",
        "'/runtime/.data/'",
        "'where to load data from.'",
        "'--save'",
        "'/runtime/results'",
        "'where to save results.'",
        "'--embeddings'",
        "'/runtime/.embeddings'",
        "'where to save embeddings.'",
        "'--train_tasks'",
        "'+'",
        "'tasks to use for training'",
        "'--train_iterations'",
        "'+'",
        "'number of iterations to focus on each task'",
        "'--train_batch_tokens'",
        "'+'",
        "'Number of tokens to use for dynamic batching, corresponging to tasks in train tasks'",
        "'--jump_start'",
        "'number of iterations to give jump started tasks'",
        "'--n_jump_start'",
        "'how many tasks to jump start (presented in order)'",
        "'--num_print'",
        "'how many validation examples with greedy output to print to std out'",
        "'--log_every'",
        "'how often to log results in # of iterations'",
        "'--save_every'",
        "'how often to save a checkpoint in # of iterations'",
        "'--val_tasks'",
        "'+'",
        "'tasks to collect evaluation metrics for'",
        "'--val_every'",
        "'how often to run validation in # of iterations'",
        "'--val_no_filter'",
        "'store_false'",
        "'val_filter'",
        "'whether to allow filtering on the validation sets'",
        "'--val_batch_size'",
        "'+'",
        "'Batch size for validation corresponding to tasks in val tasks'",
        "'--vocab_tasks'",
        "'+'",
        "'tasks to use in the construction of the vocabulary'",
        "'--max_output_length'",
        "'maximum output length for generation'",
        "'--max_effective_vocab'",
        "'max effective vocabulary size for pretrained embeddings'",
        "'--max_generative_vocab'",
        "'max vocabulary for the generative softmax'",
        "'--max_train_context_length'",
        "'maximum length of the contexts during training'",
        "'--max_val_context_length'",
        "'maximum length of the contexts during validation'",
        "'--max_answer_length'",
        "'maximum length of answers during training and validation'",
        "'--subsample'",
        "'subsample the datasets'",
        "'--preserve_case'",
        "'store_false'",
        "'lower'",
        "'whether to preserve casing for all text'",
        "'--model'",
        "'CoattentiveMultipointerGenerator'",
        "'which model to import'",
        "'--dimension'",
        "'output dimensions for all layers'",
        "'--rnn_layers'",
        "'number of layers for RNN modules'",
        "'--transformer_layers'",
        "'number of layers for transformer modules'",
        "'--transformer_hidden'",
        "'hidden size of the transformer modules'",
        "'--transformer_heads'",
        "'number of heads for transformer modules'",
        "'--dropout_ratio'",
        "'dropout for the model'",
        "'--no_transformer_lr'",
        "'store_false'",
        "'transformer_lr'",
        "'turns off the transformer learning rate strategy'",
        "'--warmup'",
        "'warmup for learning rate'",
        "'--grad_clip'",
        "'gradient clipping'",
        "'--beta0'",
        "'alternative momentum for Adam (only when not using transformer_lr)'",
        "'--load'",
        "'path to checkpoint to load model from inside args.save'",
        "'--resume'",
        "'store_true'",
        "'whether to resume training with past optimizers'",
        "'--seed'",
        "'Random seed.'",
        "'--gpus'",
        "'+'",
        "'gpus to use'",
        "'--backend'",
        "'gloo'",
        "'backend for distributed training'",
        "'--exist_ok'",
        "'store_true'",
        "'Ok if the save directory already exists, i.e. overwrite is ok'",
        "'--token_testing'",
        "'store_true'",
        "'if true, sorts all iterators'",
        "'--reverse'",
        "'store_true'",
        "'if token_testing and true, sorts all iterators in reverse'",
        "'mcqa'",
        "'imdb'",
        "'imdb'",
        "'-'",
        "\"%y/%m/%d/%H/%M\"",
        "f'{\",\".join(args.train_tasks)}'",
        "\",\"",
        "f'{\"-\".join([str(x) for x in args.train_iterations])}'",
        "\"-\"",
        "f'{train_out}{(\",val=\" + \",\".join(args.val_tasks)) if args.val_tasks != args.train_tasks else \"\"},{args.model},'",
        "\",val=\"",
        "\",\"",
        "\"\"",
        "f'{args.world_size}g'",
        "'distributed_sync_file'"
    ],
    "variables": [
        "directory",
        "parser",
        "args",
        "args",
        "model",
        "args",
        "val_tasks",
        "args",
        "world_size",
        "args",
        "timestamp",
        "args",
        "train_iterations",
        "args",
        "train_iterations",
        "args",
        "train_batch_tokens",
        "args",
        "val_batch_size",
        "args",
        "commit",
        "train_out",
        "args",
        "log_dir",
        "args",
        "dist_sync_file"
    ],
    "comments": [
        "postprocess arguments"
    ],
    "docstrings": [
        "\"\"\"\n    Returns the arguments from the command line.\n    \"\"\""
    ],
    "functions": [
        "get_commit",
        "save_args",
        "parse"
    ],
    "classes": []
}