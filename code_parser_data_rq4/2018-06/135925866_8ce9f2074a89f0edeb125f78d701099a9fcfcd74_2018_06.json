{
    "identifiers": [
        "AutomationContextAware",
        "Configuration",
        "HandlerContext",
        "guid",
        "AutomationEventListenerSupport",
        "addressEvent",
        "CommandReferencingAction",
        "Destination",
        "isSlackMessage",
        "MessageOptions",
        "SlackDestination",
        "Action",
        "_",
        "AutomationEventListenerSupport",
        "message",
        "destinations",
        "options",
        "ctx",
        "options",
        "options",
        "options",
        "options",
        "isSlackMessage",
        "message",
        "ignore",
        "_",
        "message",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "key",
        "cra",
        "cra",
        "key",
        "parameters",
        "key",
        "cra",
        "key",
        "cra",
        "key",
        "cra",
        "ctx",
        "cra",
        "action",
        "options",
        "options",
        "guid",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "message",
        "message",
        "message",
        "message",
        "destinations",
        "destinations",
        "ctx",
        "msg",
        "addressEvent",
        "NotificationRootType",
        "destinations",
        "destinations",
        "destinations",
        "dest",
        "d",
        "d",
        "sd",
        "sd",
        "channel",
        "sd",
        "users",
        "sd",
        "u",
        "sd",
        "u",
        "channel",
        "ctx",
        "msg",
        "addressEvent",
        "NotificationRootType",
        "users",
        "user",
        "_",
        "users",
        "ctx",
        "LoginQuery",
        "user",
        "user",
        "_",
        "chatId",
        "login",
        "ctx",
        "_",
        "msg",
        "addressEvent",
        "UserNotificationRootType",
        "configuration",
        "configuration",
        "DashboardAutomationEventListener",
        "configuration"
    ],
    "literals": [
        "\"@atomist/automation-client\"",
        "\"@atomist/automation-client/HandlerContext\"",
        "\"@atomist/automation-client/internal/util/string\"",
        "\"@atomist/automation-client/server/AutomationEventListener\"",
        "\"@atomist/automation-client/spi/message/MessageClient\"",
        "\"@atomist/slack-messages\"",
        "\"lodash\"",
        "\"Notification\"",
        "\"UserNotification\"",
        "string",
        "string",
        "string",
        "\"text/plain\"",
        "\"application/x-atomist-slack+json\"",
        "string",
        "string",
        "string",
        "\"text/plain\"",
        "\"application/x-atomist-slack+json\"",
        "string",
        "string",
        "\"button\"",
        "\"menu\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"global\"",
        "\"comment\"",
        "\"react\"",
        "string",
        "string",
        "string",
        "query ChatIdByScreenName($teamId: ID, $screenName: String!) {\n  ChatTeam(id: $teamId) {\n    members(screenName: $screenName) {\n      person {\n        gitHubId {\n          login\n        }\n      }\n    }\n  }\n}",
        "\"lifecycle\"",
        "\"button\"",
        "\"string\"",
        "\"string\"",
        "\"text/plain\"",
        "\"application/x-atomist-slack+json\"",
        "string",
        "string",
        "\"ChatTeam[0].members[0].person.gitHubId.login\""
    ],
    "variables": [
        "NotificationRootType",
        "UserNotificationRootType",
        "LoginQuery",
        "ignore",
        "actions",
        "cra",
        "parameters",
        "action",
        "msg",
        "users",
        "channel",
        "dest",
        "sd",
        "chatId",
        "login"
    ],
    "comments": [
        "Response message",
        "Addressed message",
        "channel-addressed will be send as workspace Notification",
        "user-addressed will be send as UserNotification in the workspace",
        "We have the screenName but need the GitHub login"
    ],
    "docstrings": [
        "* Root-type for the workspace-wide notifications",
        "* Root-tyoe for the user notifications",
        "* Configure this automation client to send messages to Dashboard workspace and user notifications.\n * Note: Messages that are being send with 'options.dashboard = false' not forwarded as notifications.\n * @param {Configuration} configuration\n * @returns {Promise<Configuration>}"
    ],
    "functions": [
        "messageSent",
        "configureDashboardNotifications"
    ],
    "classes": [
        "DashboardAutomationEventListener"
    ]
}