{
    "identifiers": [
        "Parameter",
        "ParameterType",
        "hex2VarBytes",
        "num2hexstring",
        "str2hexstr",
        "opcode",
        "pushBool",
        "param",
        "param",
        "result",
        "num2hexstring",
        "opcode",
        "result",
        "num2hexstring",
        "opcode",
        "result",
        "pushInt",
        "param",
        "param",
        "result",
        "num2hexstring",
        "opcode",
        "param",
        "result",
        "num2hexstring",
        "opcode",
        "param",
        "param",
        "opcode",
        "param",
        "result",
        "num2hexstring",
        "num",
        "param",
        "result",
        "pushHexString",
        "biHex",
        "result",
        "pushHexString",
        "param",
        "param",
        "len",
        "opcode",
        "result",
        "num2hexstring",
        "len",
        "len",
        "result",
        "num2hexstring",
        "opcode",
        "result",
        "num2hexstring",
        "len",
        "len",
        "result",
        "num2hexstring",
        "opcode",
        "result",
        "num2hexstring",
        "len",
        "result",
        "num2hexstring",
        "opcode",
        "result",
        "num2hexstring",
        "len",
        "result",
        "param",
        "result",
        "buildSmartContractParam",
        "functionName",
        "i",
        "i",
        "i",
        "ParameterType",
        "result",
        "pushBool",
        "i",
        "ParameterType",
        "result",
        "pushInt",
        "i",
        "ParameterType",
        "str2hexstr",
        "i",
        "result",
        "pushHexString",
        "value",
        "ParameterType",
        "result",
        "pushHexString",
        "i",
        "i",
        "result",
        "num2hexstring",
        "result",
        "paramsLen",
        "result",
        "paramsEnd",
        "result",
        "hex2VarBytes",
        "functionName",
        "result",
        "buildWasmContractParam",
        "p",
        "p",
        "ParameterType",
        "o",
        "p",
        "ParameterType",
        "o",
        "p",
        "ParameterType",
        "o",
        "p",
        "ParameterType",
        "o",
        "p",
        "ParameterType",
        "o",
        "p",
        "pList",
        "o",
        "pList",
        "str2hexstr",
        "result",
        "buildNativeContractParam",
        "i",
        "i",
        "i",
        "p",
        "ParameterType",
        "result",
        "pushHexString",
        "p",
        "ParameterType",
        "result",
        "pushInt",
        "p",
        "ParameterType",
        "result",
        "pushInt",
        "p",
        "ParameterType",
        "result",
        "pushBool",
        "p",
        "result"
    ],
    "literals": [
        "'../common/bigInt'",
        "'../smartcontract/abi/parameter'",
        "'../utils'",
        "'./opcode'",
        "''",
        "''",
        "string",
        "''",
        "string",
        "''",
        "'Unsupported param type: '",
        "'00'",
        "'c1'",
        "'string'",
        "'int'",
        "'int64'",
        "'int_array'",
        "'int_array'",
        "''"
    ],
    "variables": [
        "pushBool",
        "result",
        "pushInt",
        "result",
        "num",
        "biHex",
        "pushHexString",
        "result",
        "len",
        "buildSmartContractParam",
        "result",
        "i",
        "value",
        "paramsLen",
        "paramsEnd",
        "buildWasmContractParam",
        "pList",
        "o",
        "result",
        "buildNativeContractParam",
        "result",
        "i",
        "p"
    ],
    "comments": [
        "params is like [param1, param2...]",
        "case \"[object Object]\":\n                let temp = []\n                let keys = Object.keys(params[i])\n                for(let k of keys) {\n                    temp.push( params[i][k])\n                }\n                result += buildSmartContractParam(temp)\n                break;",
        "to work with vm"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}