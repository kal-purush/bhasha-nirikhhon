{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "keras",
        "keras",
        "layers",
        "Activation",
        "Dense",
        "Input",
        "keras",
        "layers",
        "Conv2D",
        "Flatten",
        "keras",
        "layers",
        "Reshape",
        "Conv2DTranspose",
        "keras",
        "models",
        "Model",
        "keras",
        "backend",
        "K",
        "keras",
        "datasets",
        "mnist",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "x_train",
        "_",
        "x_test",
        "_",
        "mnist",
        "load_data",
        "x_train",
        "shape",
        "np",
        "reshape",
        "x_train",
        "image_size",
        "image_size",
        "np",
        "reshape",
        "x_test",
        "image_size",
        "image_size",
        "x_train",
        "astype",
        "x_test",
        "astype",
        "np",
        "random",
        "normal",
        "loc",
        "scale",
        "size",
        "x_train",
        "shape",
        "x_train",
        "noise",
        "np",
        "random",
        "normal",
        "loc",
        "scale",
        "size",
        "x_test",
        "shape",
        "x_test",
        "noise",
        "np",
        "clip",
        "x_train_noisy",
        "np",
        "clip",
        "x_test_noisy",
        "image_size",
        "image_size",
        "Input",
        "shape",
        "input_shape",
        "name",
        "inputs",
        "filters",
        "layer_filters",
        "Conv2D",
        "filters",
        "filters",
        "kernel_size",
        "kernel_size",
        "strides",
        "activation",
        "padding",
        "x",
        "K",
        "int_shape",
        "x",
        "Flatten",
        "x",
        "Dense",
        "latent_dim",
        "name",
        "x",
        "Model",
        "inputs",
        "latent",
        "name",
        "encoder",
        "summary",
        "Input",
        "shape",
        "latent_dim",
        "name",
        "Dense",
        "shape",
        "shape",
        "shape",
        "latent_inputs",
        "Reshape",
        "shape",
        "shape",
        "shape",
        "x",
        "filters",
        "layer_filters",
        "Conv2DTranspose",
        "filters",
        "filters",
        "kernel_size",
        "kernel_size",
        "strides",
        "activation",
        "padding",
        "x",
        "Conv2DTranspose",
        "filters",
        "kernel_size",
        "kernel_size",
        "padding",
        "x",
        "Activation",
        "name",
        "x",
        "Model",
        "latent_inputs",
        "outputs",
        "name",
        "decoder",
        "summary",
        "Model",
        "inputs",
        "decoder",
        "encoder",
        "inputs",
        "name",
        "autoencoder",
        "summary",
        "autoencoder",
        "compile",
        "loss",
        "optimizer",
        "autoencoder",
        "fit",
        "x_train_noisy",
        "x_train",
        "validation_data",
        "x_test_noisy",
        "x_test",
        "epochs",
        "batch_size",
        "batch_size",
        "autoencoder",
        "predict",
        "x_test_noisy",
        "np",
        "concatenate",
        "x_test_noisy",
        "x_decoded",
        "imgs",
        "reshape",
        "image_size",
        "image_size",
        "np",
        "vstack",
        "np",
        "hstack",
        "i",
        "i",
        "imgs",
        "plt",
        "figure",
        "plt",
        "axis",
        "plt",
        "title",
        "plt",
        "imshow",
        "imgs",
        "interpolation",
        "cmap",
        "plt",
        "savefig",
        "plt",
        "show"
    ],
    "literals": [
        "'float32'",
        "'float32'",
        "'encoder_input'",
        "'relu'",
        "'same'",
        "'latent_vector'",
        "'encoder'",
        "'decoder_input'",
        "'relu'",
        "'same'",
        "'same'",
        "'sigmoid'",
        "'decoder_output'",
        "'decoder'",
        "'autoencoder'",
        "'mse'",
        "'adam'",
        "'off'",
        "'Corrupted Input: top 2 rows, Output is Denoised Input: last 2 rows'",
        "'none'",
        "'gray'",
        "'corrupted_and_denoised.png'"
    ],
    "variables": [
        "image_size",
        "x_train",
        "x_test",
        "x_train",
        "x_test",
        "noise",
        "x_train_noisy",
        "noise",
        "x_test_noisy",
        "x_train_noisy",
        "x_test_noisy",
        "input_shape",
        "batch_size",
        "kernel_size",
        "latent_dim",
        "layer_filters",
        "inputs",
        "x",
        "x",
        "shape",
        "x",
        "latent",
        "encoder",
        "latent_inputs",
        "x",
        "x",
        "x",
        "x",
        "outputs",
        "decoder",
        "autoencoder",
        "x_decoded",
        "imgs",
        "imgs",
        "imgs"
    ],
    "comments": [
        "MNIST dataset",
        "Generate corrupted MNIST images by adding noise with normal dist",
        "centered at 0.5 and std=0.5",
        "Network parameters",
        "Encoder/Decoder number of CNN layers and filters per layer",
        "Build the Autoencoder Model",
        "First build the Encoder Model",
        "Stack of Conv2D blocks",
        "Notes:",
        "1) Use Batch Normalization before ReLU on deep networks",
        "2) Use MaxPooling2D as alternative to strides>1",
        "- faster but not as good as strides>1",
        "Shape info needed to build Decoder Model",
        "Generate the latent vector",
        "Instantiate Encoder Model",
        "Build the Decoder Model",
        "Stack of Transposed Conv2D blocks",
        "Notes:",
        "1) Use Batch Normalization before ReLU on deep networks",
        "2) Use UpSampling2D as alternative to strides>1",
        "- faster but not as good as strides>1",
        "Instantiate Decoder Model",
        "Autoencoder = Encoder + Decoder",
        "Instantiate Autoencoder Model",
        "Mean Square Error (MSE) loss function, Adam optimizer",
        "Train the autoencoder",
        "Predict the Autoencoder output from corrupted test images",
        "Display the 1st 8 corrupted and denoised images"
    ],
    "docstrings": [
        "'''Trains a denoising autoenconder on MNIST dataset.\n\nDenoising is one of the classic applications of autoencoders.\nThe denoising process removes unwanted noise that corrupted the\ntrue signal.\n\nNoise + Data ---> Denoising Autoencoder ---> Data\n\nGiven a training dataset of corrupted data as input and\ntrue signal as output, a denoising autoencoder can recover the\nhidden structure to generate clean data.\n\nThis example has modular design. The encoder, decoder and autoencoder\nare 3 models that share weights. For example, after training the\nautoencoder, the encoder can be used to  generate latent vectors\nof input data for low-dim visualization like PCA or TSNE.\n'''"
    ],
    "functions": [],
    "classes": []
}