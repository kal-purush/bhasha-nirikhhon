{
    "identifiers": [
        "sys",
        "os",
        "sys",
        "path",
        "insert",
        "os",
        "path",
        "abspath",
        "sklearn",
        "preprocessing",
        "LabelEncoder",
        "skimage",
        "skimage",
        "data",
        "skimage",
        "transform",
        "sklearn",
        "model_selection",
        "train_test_split",
        "keras",
        "utils",
        "np_utils",
        "keras",
        "layers",
        "convolutional",
        "Convolution2D",
        "keras",
        "layers",
        "convolutional",
        "MaxPooling2D",
        "keras",
        "layers",
        "core",
        "Activation",
        "keras",
        "layers",
        "core",
        "Flatten",
        "keras",
        "layers",
        "core",
        "Dropout",
        "keras",
        "layers",
        "core",
        "Dense",
        "keras",
        "models",
        "Sequential",
        "datetime",
        "keras",
        "optimizers",
        "SGD",
        "pyimagesearch",
        "callbacks",
        "trainingMonitor",
        "matplotlib",
        "matplotlib",
        "use",
        "sklearn",
        "metrics",
        "classification_report",
        "numpy",
        "np",
        "os",
        "csv",
        "data_directory",
        "NB_CATEGORIES",
        "os",
        "path",
        "join",
        "outputBaseDirectory",
        "d",
        "d",
        "os",
        "listdir",
        "data_directory",
        "os",
        "path",
        "isdir",
        "os",
        "path",
        "join",
        "data_directory",
        "d",
        "format",
        "len",
        "directories",
        "open",
        "dataAnalysisReportFile",
        "output",
        "csv",
        "writer",
        "output",
        "lineterminator",
        "os",
        "linesep",
        "d",
        "directories",
        "os",
        "path",
        "join",
        "data_directory",
        "d",
        "os",
        "path",
        "join",
        "label_directory",
        "f",
        "f",
        "os",
        "listdir",
        "label_directory",
        "f",
        "endswith",
        "fileType",
        "writer",
        "writerow",
        "d",
        "len",
        "file_names",
        "format",
        "len",
        "file_names",
        "d",
        "f",
        "file_names",
        "images",
        "append",
        "skimage",
        "data",
        "imread",
        "f",
        "labels",
        "append",
        "d",
        "format",
        "len",
        "images",
        "output",
        "close",
        "format",
        "dataAnalysisReportFile",
        "images",
        "labels",
        "images",
        "WIDTH",
        "HEIGHT",
        "transform",
        "resize",
        "image",
        "HEIGHT",
        "WIDTH",
        "image",
        "images",
        "np",
        "array",
        "images",
        "images",
        "images",
        "labels",
        "train_test_split",
        "images",
        "labels",
        "test_size",
        "TEST_SIZE",
        "random_state",
        "format",
        "X_train",
        "shape",
        "len",
        "y_train",
        "format",
        "X_test",
        "shape",
        "len",
        "y_test",
        "y_train",
        "X_train",
        "y_test",
        "X_test",
        "y_train",
        "y_test",
        "categories",
        "LabelEncoder",
        "le",
        "fit",
        "categories",
        "le",
        "transform",
        "y_train",
        "le",
        "transform",
        "y_test",
        "np_utils",
        "to_categorical",
        "y_train",
        "len",
        "categories",
        "np_utils",
        "to_categorical",
        "y_test",
        "len",
        "categories",
        "y_train",
        "y_test",
        "imageHeight",
        "imageWidth",
        "imageHeight",
        "imageWidth",
        "len",
        "categories",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "Sequential",
        "none",
        "addLayer",
        "model",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "addLayer",
        "model",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "model",
        "add",
        "Flatten",
        "model",
        "add",
        "Dense",
        "modelParameters",
        "model",
        "add",
        "Activation",
        "modelParameters",
        "format",
        "modelParameters",
        "modelParameters",
        "model",
        "add",
        "Dense",
        "modelParameters",
        "model",
        "add",
        "Activation",
        "format",
        "modelParameters",
        "model",
        "model",
        "nbFilters",
        "sizeFilters",
        "imageHeight",
        "imageWidth",
        "imageNbChannels",
        "activation",
        "poolSize",
        "poolStride",
        "dropoutRatio",
        "model",
        "add",
        "Convolution2D",
        "nbFilters",
        "sizeFilters",
        "sizeFilters",
        "border_mode",
        "input_shape",
        "imageHeight",
        "imageWidth",
        "imageNbChannels",
        "format",
        "nbFilters",
        "sizeFilters",
        "sizeFilters",
        "model",
        "add",
        "Activation",
        "activation",
        "format",
        "activation",
        "model",
        "add",
        "MaxPooling2D",
        "pool_size",
        "poolSize",
        "strides",
        "poolStride",
        "format",
        "poolSize",
        "poolStride",
        "dropoutRatio",
        "model",
        "add",
        "Dropout",
        "dropoutRatio",
        "format",
        "dropoutRatio",
        "model",
        "loadWatchesData",
        "datasetPath",
        "len",
        "categories",
        "normalizeData",
        "images",
        "RESIZE_WIDTH",
        "RESIZE_HEIGHT",
        "splitDataset",
        "images",
        "labels",
        "encodeLabels",
        "y_train",
        "y_test",
        "categories",
        "format",
        "X_train",
        "shape",
        "X_test",
        "shape",
        "datetime",
        "datetime",
        "now",
        "initializeModelParameters",
        "RESIZE_HEIGHT",
        "RESIZE_WIDTH",
        "buildModel",
        "modelParams",
        "SGD",
        "lr",
        "decay",
        "momentum",
        "nesterov",
        "model",
        "compile",
        "loss",
        "optimizer",
        "sgd",
        "metrics",
        "os",
        "path",
        "sep",
        "join",
        "outputBaseDirectory",
        "format",
        "os",
        "getpid",
        "os",
        "path",
        "sep",
        "join",
        "outputBaseDirectory",
        "format",
        "os",
        "getpid",
        "trainingMonitor",
        "figPath",
        "jsonPath",
        "jsonPath",
        "model",
        "fit",
        "X_train",
        "y_train",
        "batch_size",
        "validation_data",
        "X_test",
        "y_test",
        "nb_epoch",
        "modelParams",
        "callbacks",
        "callbacks",
        "verbose",
        "model",
        "evaluate",
        "X_test",
        "y_test",
        "batch_size",
        "verbose",
        "format",
        "accuracy",
        "datetime",
        "datetime",
        "now",
        "time_start",
        "total_seconds",
        "format",
        "timeSpent",
        "os",
        "path",
        "join",
        "outputBaseDirectory",
        "model",
        "save",
        "outputModelPath"
    ],
    "literals": [
        "'..'",
        "\"Agg\"",
        "\"\\\\\\\\192.168.1.37\\\\Multimedia\\\\datasets\\\\watches_categories\"",
        "\"Women watches\"",
        "\"Balls-like hours ticks\"",
        "\"Balls and digits hours ticks\"",
        "\"Bars and Roman digits\"",
        "\"unknown 1\"",
        "\"Bars hours ticks\"",
        "\"Bars and digits\"",
        "\"unknown 2\"",
        "\"Ball and Roman digits\"",
        "\"Big digits\"",
        "\"Colored\"",
        "\"Connected\"",
        "\"Digital\"",
        "\"Diver\"",
        "\"Ice\"",
        "\"Jewel\"",
        "\"Multi screens\"",
        "\"No hours\"",
        "\"original\"",
        "\"pilot\"",
        "\"rectangular\"",
        "\"robust\"",
        "\"roman\"",
        "\"sport\"",
        "\"output\"",
        "'.jpg'",
        "\"categoriesAnalysis.csv\"",
        "\"Found {} categories\"",
        "\"w\"",
        "\"Found {} files in directory {}\"",
        "\"[INFO] - Loaded {} files from disk\"",
        "\"[INFO] - Categories Analysis report created in: {}\"",
        "\"[INFO] - Resizing images\"",
        "\"[INFO] : Splitting data\"",
        "\"Training size: {} Training label size: {}\"",
        "\"Testing size: {} Testing label size: {}\"",
        "\"[INFO] : Encoding labels...\"",
        "\"MODEL_TYPE\"",
        "\"Sequential\"",
        "\"IMAGE_CHANNELS\"",
        "\"IMAGE_HEIGHT\"",
        "\"IMAGE_WIDTH\"",
        "\"DROPOUT\"",
        "\"K_FILTERS_1\"",
        "\"FILTER_SIZE_1\"",
        "\"POOL_SIZE_1\"",
        "\"POOL_STRIDE_1\"",
        "\"DROPOUT_1\"",
        "\"K_FILTERS_2\"",
        "\"FILTER_SIZE_2\"",
        "\"POOL_SIZE_2\"",
        "\"POOL_STRIDE_2\"",
        "\"DROPOUT_2\"",
        "\"FC_SIZE\"",
        "\"NB_CATEGORIES\"",
        "\"ACTIVATION\"",
        "\"tanh\"",
        "\"NB_EPOCH\"",
        "\"MODEL_TYPE\"",
        "\"Sequential\"",
        "\"[INFO] - Started construction of a sequential neural model\"",
        "\"[ERROR] - Model type unrecognized\"",
        "\"K_FILTERS_1\"",
        "\"FILTER_SIZE_1\"",
        "\"IMAGE_HEIGHT\"",
        "\"IMAGE_WIDTH\"",
        "\"IMAGE_CHANNELS\"",
        "\"ACTIVATION\"",
        "\"POOL_SIZE_1\"",
        "\"POOL_STRIDE_1\"",
        "\"DROPOUT_1\"",
        "\"K_FILTERS_2\"",
        "\"FILTER_SIZE_2\"",
        "\"IMAGE_HEIGHT\"",
        "\"IMAGE_WIDTH\"",
        "\"IMAGE_CHANNELS\"",
        "\"ACTIVATION\"",
        "\"POOL_SIZE_2\"",
        "\"POOL_STRIDE_2\"",
        "\"DROPOUT_2\"",
        "\"FC_SIZE\"",
        "\"ACTIVATION\"",
        "\"[INFO] - Added fully connected layer of {} size and {} activation function\"",
        "\"FC_SIZE\"",
        "\"ACTIVATION\"",
        "\"NB_CATEGORIES\"",
        "\"softmax\"",
        "\"[INFO] - Added final fully connected layer of {} size and softmax activation function\"",
        "\"NB_CATEGORIES\"",
        "\"[INFO] - LENET NEURAL NETWORK CREATED\"",
        "\"same\"",
        "\"[INFO] - Added filter layer of {} filters, of size {},{}\"",
        "\"[INFO] - Using {} activation function for layer\"",
        "\"[INFO] - Added pool layer of size {} , with stride {}\"",
        "\"[INFO] - Using {} dropout for layer\"",
        "\"[INFO] - Size of training set {} / Size of test set: {}\"",
        "\"[INFO] - compiling model...\"",
        "\"categorical_crossentropy\"",
        "\"accuracy\"",
        "\"{}.png\"",
        "\"{}.json\"",
        "\"[INFO] - starting training...\"",
        "\"NB_EPOCH\"",
        "\"[INFO] - accuracy: {:.2f}%\"",
        "\"[INFO] - duration in seconds: {}\"",
        "\"[INFO] - dumping architecture and weights to file...\"",
        "\"watches_lenet.hdf5\""
    ],
    "variables": [
        "datasetPath",
        "categories",
        "outputBaseDirectory",
        "fileType",
        "dataAnalysisReportFile",
        "directories",
        "labels",
        "images",
        "writer",
        "label_directory",
        "file_names",
        "images",
        "images",
        "TEST_SIZE",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "le",
        "y_train",
        "y_test",
        "y_train",
        "y_test",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "modelParameters",
        "model",
        "images",
        "labels",
        "RESIZE_WIDTH",
        "RESIZE_HEIGHT",
        "images",
        "y_train",
        "X_train",
        "y_test",
        "X_test",
        "y_train",
        "y_test",
        "time_start",
        "modelParams",
        "model",
        "sgd",
        "figPath",
        "jsonPath",
        "callbacks",
        "loss",
        "accuracy",
        "timeSpent",
        "outputModelPath"
    ],
    "comments": [
        "Path hack.",
        "import needed to load the image set and preprocess it",
        "https://stackoverflow.com/questions/32876962/python-module-import-why-are-components-only-available-when-explicitly-importe",
        "used to resize the image to a standard size",
        "import needed to build the model",
        "create a convolutional layer",
        "create a pooling layer",
        "activation functions of the neurons",
        "flatten multi-dimensional volumes from a convolution layer to a 1D array that will fed a fully connected layer",
        "random disconnection of nodes to reduce overfitting",
        "create a fully connected layer",
        "CNN are feedforward sequential networks",
        "let measure the time taken by the training",
        "use the stochastic gradient optimizer",
        "import needed to plot accuracy",
        "set the matplotlib backend so figures can be saved in the background",
        "import needed to create the classification report",
        "the output subdirectory",
        "This function gets images and their corresponding categories from the images directory",
        "It generates a CSV file displaying the number of images per categories for data analysis purposes",
        "We want to use only the images in JPG format.",
        "creates the path of the CSV file",
        "get the list categories from the image directory",
        "parse the subdirectories in the directory of images",
        "initialize the list that will contain the image categories",
        "initialize the list that will contain the images themselves.",
        "Feed back the user to how many categories of images are available",
        "prepare the generation of the CSV file",
        "Loop on each subdirectory (=each categories of images)",
        "construct the path of the sub-directory that will be explored",
        "gather paths of all jpg images from that category in a list",
        "add a row in the CSV file for taht category.",
        "for each images in that caetegory",
        "make use of the skimage library to read the image and normalize the pixel intensities to values between 0 and 1",
        "the subdirectory name reflect the category name of the image in human readable format.",
        "Feed back to the user on how many images are found in the category.",
        "close the CSV file when all images are loaded.",
        "Feed back to the user on where to find the report file.",
        "return the images and their categories",
        "images are now normalized to a standard size of 60 rows on 45 columns",
        "transform uses (row,cols) resize params",
        "https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html",
        "this is the percentage of images from the dataset taht will be used as testing set.",
        "and the dataset is split into training set and test set, the test set size is 33% of the total set and the training set is 67%",
        "Feed back to the user",
        "usage of the sk_learn function to split",
        "we now have a training set of images and their categories",
        "And a testing set of images ant their categories",
        "transform the training and testing labels into vectors in the range",
        "[0, numClasses] -- this generates a vector for each label, where the",
        "index of the label is set to `1` and all other entries to `0`",
        "feed back to the user",
        "init the label encoder with the categories values from the directory list.",
        "The LabelEncoder class of sklearn package is used",
        "encode the categories as integer",
        "transform the categories name (=directory names) to integers",
        "transform the categories name (=directory names) to integers",
        "build the array of vectors",
        "for ease of use all model parameters are stored here. An alternative is to create a model object and intialize in its constructor.",
        "returns a dict of parameters of the model",
        "https://keras.io/getting-started/sequential-model-guide/",
        "input images are in 3 channels, RGB",
        "height of the input images",
        "widthof the input images",
        "make usage of dropout after each convolutional layer",
        "the first layer will contain 20 filter of size 5x5",
        "It will be followed by a pooling that reduces the size of the image by 2",
        "finally a dropout of 25% of the nodes will be applied before moving to next layer",
        "the second layer is made of 50 filter of size 5x5",
        "It will be followed by a pooling that reduces the size of the image by 2",
        "finally a dropout of 50% of the nodes will be applied before moving to next layer",
        "the first fully connected layer will contain 500 nodes,",
        "the softmas will drive them down to the whished nb of categories",
        "and the activation function is always tanh.",
        "the dataset will be fed 20 times to the network.",
        "Add the first layer",
        "Add the second layer",
        "Add the first fully connected layer",
        "add the final layer with softmax",
        "Load images and labels from disk to memory",
        "Now that we have our dataset ready, let's start building the network",
        "Build the model using SGD",
        "Let's start a timer to check how long it takes to train",
        "get model parameters",
        "Initialize the model",
        "select the SGD as optimizer and compile it",
        "construct the plot callbacks",
        "at each epoch, a measure of the testing and training set accuracy will be taken and saved as a picture and json file",
        "the file name is taken from the process id",
        "the file name is taken from the process id",
        "Use the trainingMonitor Keras function to build the graph after each epoch",
        "start the training process",
        "show the accuracy on the testing set",
        "compute and print duration",
        "save the model to disk"
    ],
    "docstrings": [],
    "functions": [
        "loadWatchesData",
        "normalizeData",
        "splitDataset",
        "encodeLabels",
        "initializeModelParameters",
        "buildModel",
        "addLayer"
    ],
    "classes": []
}