{
    "identifiers": [
        "boto3",
        "sys",
        "json",
        "time",
        "uuid",
        "datetime",
        "botocore",
        "re",
        "threading",
        "multiprocessing",
        "pool",
        "ThreadPool",
        "traceback",
        "msg",
        "format",
        "datetime",
        "datetime",
        "utcnow",
        "msg",
        "threading",
        "local",
        "boto3",
        "session",
        "Session",
        "region_name",
        "region_name",
        "client",
        "s3_staging_folder",
        "s3_staging_folder",
        "sql_query",
        "s3_output_folder",
        "start_query_execution",
        "sql_query",
        "sql_query",
        "s3_output_folder",
        "s3_output_folder",
        "__wait_for_query_to_complete",
        "QueryExecutionId",
        "result_status_result",
        "result_status_result",
        "sql_query",
        "use_cache",
        "start_query_execution",
        "sql_query",
        "sql_query",
        "use_cache",
        "use_cache",
        "get_results",
        "QueryExecutionId",
        "QueryExecutionId",
        "sql_query",
        "use_cache",
        "s3_output_folder",
        "s3_staging_folder",
        "s3_output_folder",
        "s3_output_folder",
        "outputLocation",
        "client",
        "start_query_execution",
        "QueryString",
        "sql_query",
        "ClientRequestToken",
        "uuid",
        "uuid4",
        "use_cache",
        "sql_query",
        "ljust",
        "hash",
        "sql_query",
        "ResultConfiguration",
        "outputLocation",
        "response",
        "QueryExecutionId",
        "__wait_for_query_to_complete",
        "QueryExecutionId",
        "result_status_result",
        "client",
        "get_paginator",
        "paginator",
        "paginate",
        "QueryExecutionId",
        "QueryExecutionId",
        "page_object",
        "page_response",
        "result",
        "page_object",
        "result_status_result",
        "len",
        "result",
        "result",
        "result",
        "extend",
        "page_object",
        "result",
        "result",
        "result_status_result",
        "QueryExecutionId",
        "status",
        "client",
        "get_query_execution",
        "QueryExecutionId",
        "QueryExecutionId",
        "response",
        "time",
        "sleep",
        "botocore",
        "exceptions",
        "ClientError",
        "ce",
        "error_count",
        "error_count",
        "ce",
        "ce",
        "boto3",
        "session",
        "Session",
        "region_name",
        "region_name",
        "client",
        "status",
        "status",
        "response",
        "status",
        "response",
        "strip",
        "upper",
        "split",
        "response",
        "response",
        "response",
        "response",
        "response",
        "response",
        "strip",
        "upper",
        "split",
        "response",
        "response",
        "response",
        "QueryExecutionId",
        "NextToken",
        "MaxResults",
        "__wait_for_query_to_complete",
        "QueryExecutionId",
        "result_status_result",
        "NextToken",
        "MaxResults",
        "client",
        "get_query_results",
        "QueryExecutionId",
        "QueryExecutionId",
        "MaxResults",
        "MaxResults",
        "result_status_result",
        "len",
        "result",
        "result",
        "client",
        "get_query_results",
        "QueryExecutionId",
        "QueryExecutionId",
        "NextToken",
        "NextToken",
        "MaxResults",
        "MaxResults",
        "result",
        "table_name",
        "table_name",
        "my_print",
        "format",
        "sql_query",
        "start_query_execution",
        "sql_query",
        "sql_query",
        "get_results",
        "QueryExecutionId",
        "QueryExecutionId",
        "row",
        "result",
        "data",
        "row",
        "output",
        "append",
        "data",
        "sorted",
        "output",
        "athena_table_partitions",
        "sql",
        "attempt",
        "hasattr",
        "thread_data",
        "AthenaUtil",
        "s3_staging_folder",
        "thread_data",
        "util",
        "util",
        "start_query_execution",
        "sql_query",
        "sql",
        "util",
        "__wait_for_query_to_complete",
        "result",
        "query_status_result",
        "query_status_result",
        "e",
        "attempt",
        "e",
        "sql",
        "time",
        "sleep",
        "attempt",
        "sql_queries",
        "thread_pool_size",
        "len",
        "sql_queries",
        "time",
        "time",
        "thread_pool_size",
        "thread_pool_size",
        "len",
        "sql_queries",
        "POOL_SIZE",
        "len",
        "sql_queries",
        "ThreadPool",
        "POOL_SIZE",
        "format",
        "POOL_SIZE",
        "len",
        "sql_queries",
        "count",
        "failed_count",
        "OPERATIONS",
        "i",
        "r",
        "pool",
        "imap_unordered",
        "start_query_execution_and_wait_for_completion",
        "sql_queries",
        "r",
        "failed_count",
        "r",
        "r",
        "failed_count",
        "r",
        "count",
        "sys",
        "stderr",
        "write",
        "format",
        "count",
        "OPERATIONS",
        "count",
        "failed_count",
        "OPERATIONS",
        "e",
        "e",
        "failed_count",
        "e",
        "e",
        "failed_count",
        "time",
        "time",
        "start_time",
        "OPERATIONS",
        "POOL_SIZE",
        "OPERATIONS",
        "failed_count",
        "pool",
        "close",
        "pool",
        "join",
        "result",
        "count",
        "OPERATIONS",
        "result",
        "result",
        "x",
        "x",
        "col",
        "header",
        "result",
        "pandas",
        "get_header",
        "result",
        "result",
        "data",
        "len",
        "data",
        "pandas",
        "io",
        "json",
        "json_normalize",
        "data",
        "df",
        "apply",
        "pandas",
        "Series",
        "df",
        "drop",
        "axis",
        "df",
        "applymap",
        "x",
        "x",
        "pandas",
        "DataFrame",
        "columns",
        "header",
        "df",
        "KeyError",
        "traceback",
        "format_exc"
    ],
    "literals": [
        "\"{} {}\"",
        "'us-west-2'",
        "'athena'",
        "\"SUCCESS\"",
        "'OutputLocation'",
        "\"QueryExecutionId\"",
        "\"SUCCESS\"",
        "'get_query_results'",
        "\"QUERY_TYPE\"",
        "\"SELECT\"",
        "\"ResultSet\"",
        "\"Rows\"",
        "\"ResultSet\"",
        "\"Rows\"",
        "\"ResultSet\"",
        "\"Rows\"",
        "\"ResultSet\"",
        "\"Rows\"",
        "\"ResponseMetadata\"",
        "\"HTTPHeaders\"",
        "\"content-length\"",
        "\"QUEUED\"",
        "\"QUEUED','RUNNING\"",
        "\"QueryExecution\"",
        "\"Status\"",
        "\"State\"",
        "\"FAILED\"",
        "\"ExpiredTokenException\"",
        "'athena'",
        "\"FAILED\"",
        "\"CANCELLED\"",
        "\"SUCCESS\"",
        "\"STATUS\"",
        "\"QUERY_TYPE\"",
        "\"QueryExecution\"",
        "\"Query\"",
        "\" \"",
        "\"QUERY\"",
        "\"QueryExecution\"",
        "\"Query\"",
        "\"StateChangeReason\"",
        "\"QueryExecution\"",
        "\"Status\"",
        "\"StateChangeReason\"",
        "\"StateChangeReason\"",
        "\"QueryExecution\"",
        "\"Status\"",
        "\"SUCCESS\"",
        "\"QueryExecution\"",
        "\"Status\"",
        "\"State\"",
        "\"SUCCEEDED\"",
        "\"STATUS\"",
        "\"QueryExecution\"",
        "\"Status\"",
        "\"State\"",
        "\"QUERY_TYPE\"",
        "\"QueryExecution\"",
        "\"Query\"",
        "\" \"",
        "\"QUERY\"",
        "\"QueryExecution\"",
        "\"Query\"",
        "\"StateChangeReason\"",
        "\"QueryExecution\"",
        "\"Status\"",
        "\"StateChangeReason\"",
        "\"StateChangeReason\"",
        "\"QueryExecution\"",
        "\"Status\"",
        "\"SUCCESS\"",
        "\"QUERY_TYPE\"",
        "\"SELECT\"",
        "\"ResultSet\"",
        "\"Rows\"",
        "\"ResultSet\"",
        "\"Rows\"",
        "\"SHOW PARTITIONS \"",
        "\"executing  athena SQL {}\"",
        "\"ResultSet\"",
        "\"Rows\"",
        "\"Data\"",
        "\"VarCharValue\"",
        "'util'",
        "\"SUCCESS\"",
        "\"attempt\"",
        "\"Using pool size of {}\"",
        "\"SUCCESS\"",
        "\"SUCCESS\"",
        "\"QUERY\"",
        "'\\r{0:%} completed {1}, failed {2}, TOTAL: {3}'",
        "\"#\"",
        "\"test_threaded_metric_log --- %s seconds ---for %s get ops using %s threads\"",
        "\"total: \"",
        "\", failed: \"",
        "\"Operation successful\"",
        "\"Operation had errors\"",
        "\"Operation had errors\"",
        "'ResultSet'",
        "'ResultSetMetadata'",
        "'ColumnInfo'",
        "'Name'",
        "'ResultSet'",
        "'Rows'",
        "'Data'",
        "'Data'",
        "'VarCharValue'",
        "'No Data!'"
    ],
    "variables": [
        "thread_data",
        "region_name",
        "client",
        "s3_staging_folder",
        "s3_staging_folder",
        "QueryExecutionId",
        "result_status_result",
        "QueryExecutionId",
        "outputLocation",
        "response",
        "result_status_result",
        "result",
        "paginator",
        "page_response",
        "result",
        "status",
        "error_count",
        "response",
        "response",
        "status",
        "error_count",
        "status",
        "client",
        "result_status_result",
        "MaxResults",
        "result",
        "result",
        "sql_query",
        "QueryExecutionId",
        "result",
        "output",
        "athena_table_partitions",
        "query_status_result",
        "util",
        "thread_data",
        "util",
        "util",
        "result",
        "query_status_result",
        "start_time",
        "thread_pool_size",
        "POOL_SIZE",
        "POOL_SIZE",
        "pool",
        "count",
        "failed_count",
        "OPERATIONS",
        "result",
        "failed_count",
        "result",
        "failed_count",
        "result",
        "col",
        "header",
        "header",
        "data",
        "df",
        "df",
        "header",
        "df",
        "df",
        "df"
    ],
    "comments": [
        "thread local data",
        "return self.get_results(QueryExecutionId=response[\"QueryExecutionId\"])",
        "print(result_status_result)",
        "PageResponse Holds 1000 objects at a time and will continue to repeat in chunks of 1000.",
        "removes column header from 1st row (Athena returns 1st row as col header)",
        "assumed",
        "can be QUEUED | RUNNING | SUCCEEDED | FAILED | CANCELLED",
        "my_print(status)",
        "out of the loop",
        "print(response)",
        "print(result_status_result)",
        "removes column header from 1st row (Athena returns 1st row as col header)",
        "print(query_status_result)",
        "print(\"attempt\",attempt,query_status_result, sql)",
        "Make the Pool of workers",
        "print(count,failed_count,OPERATIONS)",
        "print(i,r)",
        "break",
        "your code",
        "elapsed_time = time.time() - start_time",
        "sys.stderr.write('\\r{0:%} {} {}'.format((count*1.0/OPERATIONS),count,elapsed_time))",
        "print(traceback.format_exc())",
        "print('#',sys.exc_info()[1])",
        "pass",
        "print(traceback.format_exc())",
        "print('$',sys.exc_info()[1])",
        "close the pool and wait for the work to finish",
        "utilities to convert result object in pandas dataframe",
        "print(header)"
    ],
    "docstrings": [
        "'''\nCreated on Aug, 2017\n@author: sbellad\n'''",
        "\"\"\" constructor requires s3 staging folder for storing results\n        Parameters:\n        s3_staging_folder = s3 folder with write permissions for storing results\n        \"\"\"",
        "\"\"\" executes query and returns results\n        Parameters:\n        sql_query = SQL query to execute on Athena\n        use_cache = to reuse previous results if found (might give back stale results)\n\n        Returns:\n        ResultSet see http://boto3.readthedocs.io/en/latest/reference/services/athena.html#Athena.Client.get_query_results\n        \"\"\"",
        "\"\"\" starts  query execution\n        Parameters:\n        sql_query = SQL query to execute on Athena\n        use_cache = to reuse previous results if found (might give back stale results)\n\n        Returns:\n        QueryExecutionId that  identifies the query, can be used to get_results or get_results_by_page\n        \"\"\"",
        "\"\"\" waits for query to complete and returns results\n        Parameters:\n        QueryExecutionId that  identifies the query\n\n\n        Returns:\n        ResultSet see http://boto3.readthedocs.io/en/latest/reference/services/athena.html#Athena.Client.get_query_results\n        or Exception in case of error\n        \"\"\"",
        "\"\"\" private do not user, waits for query to execute \"\"\"",
        "\"\"\" waits for query to complete and returns result based on NextToken and MaxResults per page.\n        Parameters:\n        QueryExecutionId that  identifies the query\n        NextToken from previous page of result set\n        MaxResults max records per page\n\n        Returns:\n        ResultSet for a Page see http://boto3.readthedocs.io/en/latest/reference/services/athena.html#Athena.Client.get_query_results\n        or Exception in case of error\n        \"\"\"",
        "\"\"\" queries and returns partitions of a table in Athena\n        Parameters:\n        table_name name of table name with database prefix\n\n        Returns:\n        array of string partitions\n        \"\"\"",
        "\"\"\" starts a query execution an waits for it to complete, use this for last queries where u need a query id and want to download results page by page.\n        Parameters:\n        sql  query to execute\n\n        Returns:\n        query_status_result dictionary with following structure:\n                    {\"SUCCESS\" : False | True,\n                    \"STATUS\" :  status\n                    , \"QUERY_TYPE\" : \"FIRST WORD OF QUERY e.g. SELECT or INSERT or ALTER\"\n                    , \"QUERY\" : \"ACTUAL QUERY\"\n                    , \"StateChangeReason\" : None | \"Error string if any\"}\n        \"\"\"",
        "\"\"\" executes a array of SQLs using threads and returns results, useful for threaded batch operations\n        Parameters:\n        sql_queries array of SQL queries to execute\n        thread_pool_size pool size to use, MAX a/c limit in PROD is 50 so its recommended to keep it around 2-5.\n\n        Returns:\n        True if all SQLs have been executed successfully, else False\n        \"\"\"",
        "'''\n        utilities to convert result object in pandas dataframe\n        :param result: object returned by boto athena client containing data & meta data\n        :return: pandas dataframe\n            - df with column header & data\n            - empty dataframe with columns header only in case of resultset is empty\n            - none if irregular shape result object\n            - throws error in any other case\n        '''"
    ],
    "functions": [
        "my_print",
        "execute_save_s3",
        "execute_query",
        "start_query_execution",
        "get_results",
        "__wait_for_query_to_complete",
        "get_results_by_page",
        "get_table_partitions",
        "start_query_execution_and_wait_for_completion",
        "execute_sqls_threaded",
        "get_header",
        "get_pandas_frame"
    ],
    "classes": [
        "AthenaUtil"
    ]
}