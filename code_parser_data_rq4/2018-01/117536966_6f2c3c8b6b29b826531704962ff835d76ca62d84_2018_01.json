{
    "identifiers": [
        "argparse",
        "collections",
        "functools",
        "random",
        "re",
        "DIGIT_NAMES",
        "NUMBER_NAMES",
        "len",
        "ILLIONS",
        "number",
        "number",
        "number",
        "number",
        "number",
        "use_and",
        "number",
        "DIGIT_NAMES",
        "number",
        "number",
        "abs",
        "number",
        "collections",
        "deque",
        "last_to_first_digit",
        "number",
        "chunk_index",
        "chunk",
        "chunks",
        "chunk",
        "words",
        "append",
        "chunk",
        "chunk",
        "tens",
        "UNIQUE_NUMBER_NAMES",
        "UNIQUE_NUMBER_NAMES",
        "tens",
        "tens",
        "tens",
        "digit",
        "NUMBER_NAMES",
        "tens",
        "DIGIT_NAMES",
        "digit",
        "hundreds",
        "add_word",
        "DIGIT_NAMES",
        "hundreds",
        "add_word",
        "use_and",
        "tens",
        "add_word",
        "tens",
        "add_word",
        "tens_name",
        "chunk_index",
        "add_word",
        "chunk_index",
        "add_word",
        "ILLIONS",
        "chunk_index",
        "thousand_chunks",
        "appendleft",
        "join",
        "words",
        "sign_prefix",
        "join",
        "thousand_chunks",
        "re",
        "compile",
        "INT_PATTERN",
        "re",
        "compile",
        "INT_PATTERN",
        "INT_PATTERN",
        "number",
        "isinstance",
        "number",
        "INT_REGEX",
        "fullmatch",
        "number",
        "integer_string",
        "number",
        "isinstance",
        "number",
        "integer_string",
        "number",
        "number",
        "split",
        "ValueError",
        "ValueError",
        "number",
        "integer_string",
        "integer",
        "join",
        "DIGIT_NAMES",
        "digit",
        "digit",
        "points",
        "integer_part",
        "points_part",
        "max_digits",
        "random",
        "randrange",
        "random",
        "randrange",
        "max_digits",
        "join",
        "random",
        "choices",
        "digits",
        "k",
        "integer_count",
        "first",
        "tail",
        "max_integer_digits",
        "max_decimal_points",
        "random_integer_string",
        "max_integer_digits",
        "random",
        "random",
        "integer",
        "integer",
        "random_integer_string",
        "max_decimal_points",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "nargs",
        "parser",
        "add_argument",
        "action",
        "parser",
        "parse_args",
        "args",
        "number",
        "args",
        "max",
        "MAX",
        "number",
        "random_number_string",
        "number",
        "number_string",
        "number",
        "main"
    ],
    "literals": [
        "'zero'",
        "'one'",
        "'two'",
        "'three'",
        "'four'",
        "'five'",
        "'six'",
        "'seven'",
        "'eight'",
        "'nine'",
        "'ten'",
        "'eleven'",
        "'twelve'",
        "'thirteen'",
        "'fourteen'",
        "'fifteen'",
        "'sixteen'",
        "'seventeen'",
        "'eighteen'",
        "'nineteen'",
        "'twenty'",
        "'thirty'",
        "'forty'",
        "'fifty'",
        "'sixty'",
        "'seventy'",
        "'eighty'",
        "'ninety'",
        "'m'",
        "'b'",
        "'tr'",
        "'quadr'",
        "'quint'",
        "'sext'",
        "'sept'",
        "'oct'",
        "'non'",
        "'dec'",
        "'undec'",
        "'duodec'",
        "'tredec'",
        "'quattuordec'",
        "'quindec'",
        "'sexdec'",
        "'septendec'",
        "'octodec'",
        "'novemdec'",
        "'vigint'",
        "'unvigint'",
        "'duovigint'",
        "'trevigint'",
        "'quattuorvigint'",
        "'quinvigint'",
        "'sexvigint'",
        "'septenvigint'",
        "'octovigint'",
        "'novemvigint'",
        "'trigint'",
        "'untrigint'",
        "'duotrigint'",
        "'minus '",
        "''",
        "f'{NUMBER_NAMES[tens]}-{DIGIT_NAMES[digit]}'",
        "'hundred'",
        "'and'",
        "'thousand'",
        "'illion'",
        "' '",
        "', '",
        "r'0|([1-9]\\d+(_\\d+)*)'",
        "r'\\.'",
        "'.'",
        "f'Cannot parse number as float: {number}'",
        "' '",
        "f'{integer_part} point {points_part}'",
        "''",
        "'.'",
        "'number'",
        "'?'",
        "'--max'",
        "'store_true'",
        "f'{number}: {number_string(number)}'",
        "'__main__'"
    ],
    "variables": [
        "DIGIT_NAMES",
        "NUMBER_NAMES",
        "UNIQUE_NUMBER_NAMES",
        "ILLIONS",
        "MAX",
        "sign_prefix",
        "number",
        "thousand_chunks",
        "chunks",
        "words",
        "add_word",
        "hundreds",
        "tens",
        "tens_name",
        "digit",
        "tens_name",
        "INT_PATTERN",
        "INT_REGEX",
        "FLOAT_REGEX",
        "integer",
        "points",
        "integer_part",
        "points_part",
        "first",
        "integer_count",
        "tail",
        "integer",
        "parser",
        "args",
        "number",
        "number",
        "number"
    ],
    "comments": [
        "Crudely calculated maximum representable number.",
        "Group is zero, skip.",
        "String handling.",
        "Integer handling.",
        "Float handling."
    ],
    "docstrings": [
        "\"\"\"\nFunctions for representing numbers in plain English.\n\"\"\"",
        "\"\"\" Yield each digit of an integer, from least significant to most.\n    \"\"\"",
        "\"\"\" Return an integers value in plain English.\n    \"\"\"",
        "\"\"\" Return a numbers value in plain English.\n    \"\"\"",
        "\"\"\" Return a string representing a number with a random number\n    (between 1 and max_digits) of digits.\n    \"\"\"",
        "\"\"\" Return a random length number string, equal chance of a float or\n    an integer.\n    \"\"\""
    ],
    "functions": [
        "last_to_first_digit",
        "integer_string",
        "number_string",
        "random_integer_string",
        "random_number_string",
        "main"
    ],
    "classes": []
}