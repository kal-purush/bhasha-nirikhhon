{
    "identifiers": [
        "math",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "scipy",
        "stats",
        "st",
        "tqdm",
        "tqdm",
        "parameters",
        "np",
        "random",
        "seed",
        "parameters",
        "t",
        "i",
        "len",
        "t",
        "W",
        "append",
        "W",
        "np",
        "random",
        "normal",
        "np",
        "sqrt",
        "t",
        "i",
        "t",
        "i",
        "W",
        "show",
        "i",
        "T",
        "n",
        "i",
        "n",
        "__W",
        "time_steps",
        "__W",
        "time_steps",
        "np",
        "exp",
        "r",
        "np",
        "array",
        "time_steps",
        "np",
        "exp",
        "b1",
        "sigma_1",
        "sigma_1",
        "np",
        "array",
        "time_steps",
        "sigma_1",
        "np",
        "array",
        "W1",
        "np",
        "exp",
        "b2",
        "sigma_2",
        "sigma_2",
        "np",
        "array",
        "time_steps",
        "sigma_2",
        "np",
        "array",
        "W2",
        "show",
        "plt",
        "figure",
        "plt",
        "plot",
        "time_steps",
        "S0",
        "label",
        "plt",
        "plot",
        "time_steps",
        "S1",
        "label",
        "plt",
        "plot",
        "time_steps",
        "S2",
        "label",
        "plt",
        "title",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "legend",
        "loc",
        "plt",
        "show",
        "S0",
        "S1",
        "S2",
        "W1",
        "W2",
        "np",
        "array",
        "b1",
        "r",
        "sigma_1",
        "b2",
        "r",
        "sigma_2",
        "np",
        "dot",
        "eta",
        "eta",
        "np",
        "array",
        "sigma_1",
        "sigma_2",
        "__market_2_assets",
        "S0",
        "S1",
        "S2",
        "W1",
        "W2",
        "market_evolution",
        "n",
        "gamma",
        "W1",
        "W1",
        "i",
        "gamma",
        "W2",
        "W2",
        "i",
        "T",
        "i",
        "n",
        "gamma",
        "i",
        "considered_length",
        "np",
        "array",
        "W1",
        "i",
        "W2",
        "i",
        "sum",
        "l",
        "i",
        "T",
        "n",
        "i",
        "tqdm",
        "considered_length",
        "desc",
        "leave",
        "np",
        "exp",
        "np",
        "dot",
        "eta",
        "np",
        "array",
        "W1",
        "i",
        "W2",
        "i",
        "i",
        "T",
        "n",
        "eta_square",
        "i",
        "considered_length",
        "v",
        "eta",
        "v",
        "l",
        "np",
        "array",
        "sum",
        "np",
        "dot",
        "f",
        "i_1",
        "B",
        "i_1",
        "B",
        "i_1",
        "i_1",
        "i_2",
        "i_2",
        "tqdm",
        "considered_length",
        "desc",
        "leave",
        "np",
        "array",
        "sum",
        "np",
        "dot",
        "f",
        "i_1",
        "f",
        "i_1",
        "i_1",
        "i_2",
        "T",
        "n",
        "i_2",
        "tqdm",
        "considered_length",
        "desc",
        "leave",
        "np",
        "exp",
        "int_1",
        "int_2",
        "A",
        "n",
        "T",
        "x",
        "A",
        "np",
        "exp",
        "r",
        "i",
        "T",
        "n",
        "y",
        "M",
        "i",
        "i",
        "corresponding_indice",
        "c_outsider",
        "np",
        "exp",
        "r",
        "i",
        "T",
        "n",
        "y",
        "M_tilda",
        "i",
        "i",
        "corresponding_indice",
        "c_insider",
        "consumption",
        "consumption",
        "i",
        "consumption",
        "i",
        "i",
        "len",
        "consumption",
        "np",
        "log",
        "np",
        "exp",
        "r",
        "t1",
        "c1",
        "np",
        "log",
        "np",
        "exp",
        "r",
        "t0",
        "c0",
        "t0",
        "c0",
        "t1",
        "c1",
        "consecutive_consumption",
        "abs",
        "np",
        "log",
        "np",
        "exp",
        "r",
        "t1",
        "c1",
        "np",
        "log",
        "np",
        "exp",
        "r",
        "t0",
        "c0",
        "t1",
        "t0",
        "eta_square",
        "np",
        "sqrt",
        "t1",
        "t0",
        "eta_square",
        "t0",
        "c0",
        "t1",
        "c1",
        "consecutive_consumption",
        "critical_regions",
        "__compute_critical_region",
        "i",
        "T",
        "n",
        "c_insider",
        "i",
        "i",
        "len",
        "c_insider",
        "__compute_critical_region",
        "i",
        "T",
        "n",
        "c_outsider",
        "i",
        "i",
        "len",
        "c_outsider",
        "SimpleModel",
        "model",
        "simulate",
        "model",
        "compute_optimal_strategy",
        "model",
        "apply_statistical_test",
        "sum",
        "model",
        "critical_regions_outsider",
        "sum",
        "model",
        "critical_regions_insider"
    ],
    "literals": [
        "'default'",
        "'default'",
        "\"Bond\"",
        "\"Risky asset S1\"",
        "\"Risky asset S2\"",
        "\"Representation of asset prices\"",
        "\"Time\"",
        "\"Asset prices\"",
        "'best'",
        "'Computing Bt'",
        "'Computing M_tilda'",
        "'Computing M_tilda'",
        "\"__main__\""
    ],
    "variables": [
        "T",
        "A",
        "n",
        "r",
        "b1",
        "sigma_1",
        "b2",
        "sigma_2",
        "x",
        "market_evolution",
        "eta",
        "eta_square",
        "gamma",
        "l",
        "B",
        "M",
        "M_tilda",
        "XA_insider",
        "c_insider",
        "critical_regions_insider",
        "XA_outsider",
        "c_outsider",
        "critical_regions_outsider",
        "T",
        "A",
        "n",
        "r",
        "b1",
        "sigma_1",
        "b2",
        "sigma_2",
        "x",
        "W",
        "time_steps",
        "W1",
        "W2",
        "S0",
        "S1",
        "S2",
        "eta",
        "eta_square",
        "gamma",
        "market_evolution",
        "considered_length",
        "l",
        "B",
        "M",
        "f",
        "int_1",
        "int_2",
        "M_tilda",
        "corresponding_indice",
        "y",
        "c_outsider",
        "XA_outsider",
        "c_insider",
        "XA_insider",
        "consecutive_consumption",
        "Y",
        "critical_regions",
        "critical_regions_insider",
        "critical_regions_outsider",
        "model"
    ],
    "comments": [
        "!/usr/bin/env python",
        "# -*- coding: utf-8 -*-",
        "Imports.",
        "Set seed for reproductibility.",
        "Parameters of the model.",
        "Total time (arbitrary unit).",
        "Time at which to compute health.",
        "Size of discretization.",
        "Interest rate of the bond.",
        "Drift of first asset.",
        "Volatility of first asset",
        "Drift of second asset.",
        "Volatility of second asset.",
        "Initial wealth.",
        "Market evolution.",
        "Evolution of the market as [[S0, S1, S2], [W1, W2]], each Si being Si = [Si(0), ... Si(T)] and Wi being brownian motion (time is discretized in n equal values between 0 and T).",
        "Values that are computed during simulation.",
        "Eta (constant vector).",
        "The sqared norm of eta.",
        "Gamma (constant vector).",
        "l (2-D vector).",
        "New Brownian motion.",
        "Helper value (outsider agent).",
        "Helper value (insider agent).",
        "Wealth and consumption of the insider.",
        "Wealth of the insider at time A, as [(A, wealth(A)), ...].",
        "Consumption of the insider at time A, as [(A, consumption(A)), ...].",
        "Array of booleans whether the insider consumption is within the critical region or not.",
        "Wealth and consumption of the outsider.",
        "Wealth of the outsider at time A, as [(A, wealth(A)), ...].",
        "Consumption of the outsider at time A, as [(A, consumption(A)), ...].",
        "Array of booleans whether the outsider consumption is within the critical region or not.",
        "Actually initialize parameters of the model if parameters == 'default'.",
        "Time input.",
        "Total time (arbitrary unit).",
        "Time at which to compute wealth.",
        "Size of discretization.",
        "Market parameters input.",
        "Interest rate of the bond.",
        "Drift of first asset.",
        "Volatility of first asset",
        "Drift of second asset.",
        "Volatility of second asset.",
        "Initial wealth of the agent.",
        "Initial wealth.",
        "Simulation of the brownian motion.",
        "Simulation of market.",
        "Discretisation of time.",
        "Compute 2 brownian motions.",
        "Compute S0 (bond) and S1/S2 (risky assets) in the Black-Scholes model.",
        "Plot evolution of assets if asked.",
        "Return result.",
        "Simulation of the model as per the cited paper.",
        "",
        "Step 1 : Compute eta, eta_square, and gamma. #",
        "",
        "",
        "Step 2 : Simulate Brownian Motion and Market. #",
        "",
        "Get market values over time.",
        "",
        "Step 3 : Compute 2-d vector l.                         #",
        "We compute l on [0, ..., A] with the formula:          #",
        "l(r) = 1 / (T - r) * int(gamma . dWs, [r, T]) * gamma. #",
        "",
        "",
        "Step 4 : Compute B.                           #",
        "We compute B on [0, ..., A] with the formula: #",
        "B(t) = W(t) - int(l(u) . du, [0, t])          #",
        "",
        "",
        "Step 5 : Compute M and M_tilda. #",
        "",
        "Computation of M.",
        "Computation of M_tilda.",
        "Compute optimal strategy of agents, as per the cited paper.",
        "Compute optimal health.",
        "Optimal wealth at time A for the non-insider.",
        "In this model, optimal consumption equals optimal wealth.",
        "Optimal wealth at time A for the insider.",
        "In this model, optimal consumption equals optimal wealth.",
        "Computation of critical retions, as per the cited paper.",
        "Compute Y_i = \\log(R_{t_{i+1}} c_{t_{i+1}}) - \\log(R_t C_t)",
        "Where R_t = \\exp(- r * t) is the discounting factor, and C_t is the consumption at time t.",
        "Compute critical regions values.",
        "Application of statistical test, as per the cited paper.",
        "Initialize model.",
        "Simulate market.",
        "Compute optimal strategies for agents.",
        "Apply statistical test.",
        "Print results."
    ],
    "docstrings": [
        "\"\"\"\nThe purpose of this script is to make simulations of insider trading.\nContents are based on the article :\n    \"Grorud, Axel & Pontier, Monique. (2011). Insider Trading in a Continuous\n    Time Market Model. International Journal of Theoretical and Applied Finance\"\n\nPython version : 3.*\nAuthors :  Heang Kitiyavirayuth, Lucas Broux\n\"\"\"",
        "\"\"\"\n    This class proposes a simple model for simulation of insider trading.\n\n    We suppose :\n      - The market consists in one bond(r) and 2 assets (bi, sigma_i).\n      - The insider knows the variable L = ln(S1(T)) - ln(S2(T)).\n      - The utility function to optimize is logarithmic (U1 = U2 = ln).\n    Then, according to the article, we can compute the wealth and consumption at time A < T by the following steps.\n    \"\"\"",
        "\"\"\"\n        Constructor for the class. Initialize variables of the class by setting them to false.\n        \"\"\"",
        "\"\"\"\n        Simulation of the brownian motion W_tn.\n\n        :param t: The array [t1, ... tn], tn being the highest value.\n        :return: The array [W(t1n)m, ..., W(tn)m].\n        \"\"\"",
        "\"\"\"\n            Simulation of a market with 2 risky assets S1 and S2, and a bond S0.\n\n            We create a regular discretization of the time in n equal values between 0 and T.\n\n            :param show: Whether to show the plotted view.\n            :return: The market as [[S0, S1, S2], [W1, W2]], each Si being Si = [Si(0), ... Si(T)] and Wi being brownian motion.\n            \"\"\"",
        "\"\"\"\n        Compute the optimal wealth of an insider and of a non-insider in a simplified case.\n\n        We create a regular discretization of the time in n equal values between 0 and T.\n        We suppose :\n          - The market consists in one bond(r) and 2 assets (bi, sigma_i).\n          - The insider knows the variable L = ln(S1(T)) - ln(S2(T)).\n          - The utility function to optimize is logarithmic (U1 = U2 = ln).\n        Then, according to the article, we can compute the wealth at time A < T by the following steps.\n        We actualize the values that were set to False in the __init__ function.\n        \"\"\"",
        "\"\"\"\n        Compute the optimal strategy of insider and outsider agents, according to the cited paper.\n        \"\"\"",
        "\"\"\"\n        Computes the statistical test for the given consumption process.\n\n        :param consumption: The consumption of an agent, under the form of an array [(time, consumption(time))] of the consumption at different times.\n        :return: Boolean array [b_1, ..., b_{n-1}] to attest whether the agent is in the critical region at time i.\n        \"\"\"",
        "\"\"\"\n        Apply the statistical test to the simulated values of consumption for both the insider and non-insider agent.\n        \"\"\""
    ],
    "functions": [
        "__W",
        "__market_2_assets",
        "simulate",
        "compute_optimal_strategy",
        "__compute_critical_region",
        "apply_statistical_test"
    ],
    "classes": [
        "SimpleModel"
    ]
}