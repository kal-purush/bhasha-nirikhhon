{
    "identifiers": [
        "os",
        "sys",
        "time",
        "codecs",
        "itemgetter",
        "sys",
        "argv",
        "us_tv_and_film",
        "english_wikipedia",
        "passwords",
        "surnames",
        "male_names",
        "female_names",
        "data_dir",
        "filename",
        "os",
        "listdir",
        "data_dir",
        "os",
        "path",
        "splitext",
        "filename",
        "freq_list_name",
        "DICTIONARIES",
        "msg",
        "freq_list_name",
        "data_dir",
        "codecs",
        "open",
        "os",
        "path",
        "join",
        "data_dir",
        "filename",
        "f",
        "i",
        "line",
        "f",
        "i",
        "line",
        "split",
        "rank",
        "token_to_rank",
        "freq_list_name",
        "DICTIONARIES",
        "freq_list_name",
        "freq_lists",
        "msg",
        "freq_list",
        "data_dir",
        "freq_lists",
        "token",
        "rank",
        "rank",
        "len",
        "token",
        "token",
        "rank",
        "lst_name",
        "token",
        "token",
        "freq_lists",
        "name",
        "freq_lists",
        "name",
        "token_to_rank",
        "freq_lists",
        "iteritems",
        "token",
        "rank",
        "token_to_rank",
        "iteritems",
        "token",
        "minimum_rank",
        "token",
        "minimum_name",
        "rank",
        "name",
        "token",
        "minimum_name",
        "minimum_name",
        "token",
        "name",
        "name",
        "minimum_rank",
        "token",
        "rank",
        "min_rank",
        "rank",
        "name",
        "name",
        "token_to_rank",
        "freq_lists",
        "iteritems",
        "token",
        "rank",
        "token_to_rank",
        "iteritems",
        "minimum_name",
        "token",
        "name",
        "is_rare_and_short",
        "token",
        "rank",
        "has_comma_or_double_quote",
        "token",
        "rank",
        "name",
        "filtered_token_and_rank",
        "name",
        "append",
        "token",
        "rank",
        "token_count",
        "name",
        "name",
        "token_rank_pairs",
        "filtered_token_and_rank",
        "iteritems",
        "token_rank_pairs",
        "sort",
        "key",
        "itemgetter",
        "DICTIONARIES",
        "name",
        "cutoff_limit",
        "len",
        "token_rank_pairs",
        "cutoff_limit",
        "token_rank_pairs",
        "cutoff_limit",
        "pair",
        "pair",
        "token_rank_pairs",
        "result",
        "lst",
        "lst_name",
        "join",
        "l",
        "replace",
        "replace",
        "l",
        "lst",
        "lst_name",
        "val",
        "len",
        "sys",
        "argv",
        "usage",
        "sys",
        "exit",
        "sys",
        "argv",
        "parse_frequency_lists",
        "data_dir",
        "filter_frequency_lists",
        "unfiltered_freq_lists",
        "codecs",
        "open",
        "output_file",
        "f",
        "os",
        "path",
        "split",
        "sys",
        "argv",
        "f",
        "write",
        "script_name",
        "f",
        "write",
        "name",
        "lst",
        "freq_lists",
        "iteritems",
        "lines",
        "append",
        "to_kv",
        "lst",
        "name",
        "f",
        "write",
        "join",
        "lines",
        "f",
        "write",
        "main"
    ],
    "literals": [
        "'Warning: %s appears in %s directory but not in DICTIONARY settings. Excluding.'",
        "'r'",
        "'utf8'",
        "'Warning: %s appears in DICTIONARY settings but not in %s directory. Excluding.'",
        "','",
        "'\"'",
        "'same token occurs multiple times in %s'",
        "', '",
        "'\"%s\"'",
        "'\"'",
        "'\\\\\"'",
        "'\\\\'",
        "'\\\\\\\\'",
        "'\\t\"%s\": {%s},'",
        "'w'",
        "'utf8'",
        "'package frequency // generated by %s\\n\\n'",
        "'var FrequencyLists = map[string][]string {\\n'",
        "'\\n  '",
        "'\\n}\\n'",
        "'__main__'"
    ],
    "variables": [
        "DICTIONARIES",
        "freq_lists",
        "freq_list_name",
        "ext",
        "msg",
        "token_to_rank",
        "rank",
        "token",
        "token_to_rank",
        "token",
        "freq_lists",
        "freq_list_name",
        "msg",
        "filtered_token_and_rank",
        "token_count",
        "filtered_token_and_rank",
        "name",
        "token_count",
        "name",
        "minimum_rank",
        "minimum_name",
        "minimum_rank",
        "token",
        "minimum_name",
        "token",
        "min_rank",
        "minimum_rank",
        "token",
        "minimum_name",
        "token",
        "result",
        "cutoff_limit",
        "token_rank_pairs",
        "result",
        "name",
        "val",
        "data_dir",
        "output_file",
        "unfiltered_freq_lists",
        "freq_lists",
        "script_name",
        "lines"
    ],
    "comments": [
        "!/usr/bin/python",
        "maps dict name to num words. None value means \"include all words\"",
        "returns {list_name: {token: rank}}, as tokens and ranks occur in each file.",
        "rank starts at 1",
        "hax, switch to csv or similar if this excludes too much.",
        "simple comma joining has the advantage of being easy to process",
        "client-side w/o needing a lib, and so far this only excludes a few",
        "very high-rank tokens eg 'ps8,000' at rank 74868 from wikipedia list.",
        "maps {name: [(token, rank), ...]}",
        "maps freq list name: current token count.",
        "maps token -> lowest token rank across all freq lists",
        "maps token -> freq list name with lowest token rank",
        "discard rank post-sort"
    ],
    "docstrings": [
        "'''\nusage:\n%s data-dir frequency_lists.coffee\n\ngenerates frequency_lists.coffee (zxcvbn's ranked dictionary file) from word frequency data.\ndata-dir should contain frequency counts, as generated by the data-scripts/count_* scripts.\n\nDICTIONARIES controls which frequency data will be included and at maximum how many tokens\nper dictionary.\n\nIf a token appears in multiple frequency lists, it will only appear once in emitted .coffee file,\nin the dictionary where it has lowest rank.\n\nShort tokens, if rare, are also filtered out. If a token has higher rank than 10**(token.length),\nit will be excluded because a bruteforce match would have given it a lower guess score.\n\nA warning will be printed if DICTIONARIES contains a dictionary name that doesn't appear in\npassed data dir, or vice-versa.\n    '''",
        "'''\n    filters frequency data according to:\n        - filter out short tokens if they are too rare.\n        - filter out tokens if they already appear in another dict\n          at lower rank.\n        - cut off final freq_list at limits set in DICTIONARIES, if any.\n    '''"
    ],
    "functions": [
        "usage",
        "parse_frequency_lists",
        "is_rare_and_short",
        "has_comma_or_double_quote",
        "filter_frequency_lists",
        "to_kv",
        "main"
    ],
    "classes": []
}