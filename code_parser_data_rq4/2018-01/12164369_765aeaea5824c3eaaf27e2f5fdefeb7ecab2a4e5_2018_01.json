{
    "identifiers": [
        "print_function",
        "collections",
        "namedtuple",
        "os",
        "shutil",
        "subprocess",
        "tarfile",
        "unicodedata",
        "django",
        "test",
        "TestCase",
        "metsrw",
        "plugins",
        "premisrw",
        "pytest",
        "common",
        "utils",
        "gpgutils",
        "locations",
        "models",
        "gpg",
        "Package",
        "space",
        "format",
        "GPG_VERSION",
        "premisrw",
        "PREMISAgent",
        "data",
        "premisrw",
        "PREMIS_META",
        "format",
        "SS_VERSION",
        "namedtuple",
        "namedtuple",
        "namedtuple",
        "namedtuple",
        "namedtuple",
        "namedtuple",
        "namedtuple",
        "namedtuple",
        "FakeGPGRet",
        "ok",
        "status",
        "SUCCESS_STATUS",
        "stderr",
        "FakeGPGRet",
        "ok",
        "status",
        "DECRYPT_RET_FAIL_STATUS",
        "stderr",
        "kwargs",
        "kwargs",
        "get",
        "SOME_FINGERPRINT",
        "kwargs",
        "get",
        "save_called",
        "_should_have_pointer_file",
        "pytest",
        "mark",
        "parametrize",
        "MoveToCase",
        "src_path",
        "dst_path",
        "src_exists1",
        "src_exists2",
        "encr_path",
        "expect",
        "MoveToCase",
        "src_path",
        "dst_path",
        "src_exists1",
        "src_exists2",
        "encr_path",
        "expect",
        "MoveToCase",
        "src_path",
        "dst_path",
        "src_exists1",
        "src_exists2",
        "encr_path",
        "expect",
        "MoveToCase",
        "src_path",
        "dst_path",
        "src_exists1",
        "src_exists2",
        "encr_path",
        "expect",
        "mocker",
        "src_path",
        "dst_path",
        "src_exists1",
        "src_exists2",
        "encr_path",
        "expect",
        "gpg",
        "GPG",
        "key",
        "SOME_FINGERPRINT",
        "space",
        "space",
        "Space",
        "mocker",
        "patch",
        "gpg_space",
        "space",
        "mocker",
        "patch",
        "gpg_space",
        "space",
        "mocker",
        "patch",
        "gpg",
        "mocker",
        "patch",
        "gpg",
        "mocker",
        "patch",
        "gpg",
        "return_value",
        "SOME_FINGERPRINT",
        "mocker",
        "patch",
        "gpg",
        "return_value",
        "encr_path",
        "mocker",
        "patch",
        "os",
        "path",
        "side_effect",
        "src_exists1",
        "src_exists2",
        "expect",
        "gpg_space",
        "move_to_storage_service",
        "src_path",
        "dst_path",
        "ret",
        "pytest",
        "raises",
        "gpg",
        "GPGException",
        "excinfo",
        "gpg_space",
        "move_to_storage_service",
        "src_path",
        "dst_path",
        "encr_path",
        "format",
        "src_path",
        "excinfo",
        "value",
        "src_exists2",
        "format",
        "src_path",
        "encr_path",
        "excinfo",
        "value",
        "src_exists2",
        "encr_path",
        "gpg_space",
        "space",
        "move_rsync",
        "assert_called_once_with",
        "src_path",
        "dst_path",
        "gpg_space",
        "space",
        "move_rsync",
        "called",
        "src_exists1",
        "gpg",
        "_gpg_decrypt",
        "assert_called_once_with",
        "dst_path",
        "gpg",
        "_gpg_encrypt",
        "called",
        "gpg",
        "_get_encrypted_path",
        "assert_called_once_with",
        "src_path",
        "encr_path",
        "gpg",
        "_gpg_encrypt",
        "assert_called_once_with",
        "encr_path",
        "SOME_FINGERPRINT",
        "gpg",
        "_gpg_decrypt",
        "assert_called_once_with",
        "encr_path",
        "gpg_space",
        "space",
        "create_local_directory",
        "assert_called_once_with",
        "dst_path",
        "pytest",
        "mark",
        "parametrize",
        "MoveFromCase",
        "src_path",
        "dst_path",
        "MockPackage",
        "encrypt_ret",
        "ENCRYPT_RET_SUCCESS",
        "expect",
        "MoveFromCase",
        "src_path",
        "dst_path",
        "MockPackage",
        "should_have_pointer",
        "encrypt_ret",
        "ENCRYPT_RET_SUCCESS",
        "expect",
        "MoveFromCase",
        "src_path",
        "dst_path",
        "MockPackage",
        "fingerprint",
        "SOME_OTHER_FINGERPRINT",
        "encrypt_ret",
        "ENCRYPT_RET_SUCCESS",
        "expect",
        "MoveFromCase",
        "src_path",
        "dst_path",
        "MockPackage",
        "encrypt_ret",
        "gpg",
        "GPGException",
        "expect",
        "MoveFromCase",
        "src_path",
        "dst_path",
        "encrypt_ret",
        "ENCRYPT_RET_SUCCESS",
        "expect",
        "mocker",
        "src_path",
        "dst_path",
        "encrypt_ret",
        "expect",
        "encryption_key_fingerprint",
        "isinstance",
        "encrypt_ret",
        "mocker",
        "patch",
        "gpg",
        "side_effect",
        "encrypt_ret",
        "mocker",
        "patch",
        "gpg",
        "return_value",
        "encrypt_ret",
        "gpg",
        "GPG",
        "key",
        "SOME_FINGERPRINT",
        "space",
        "space",
        "Space",
        "mocker",
        "patch",
        "gpg_space",
        "space",
        "mocker",
        "patch",
        "gpg_space",
        "space",
        "mocker",
        "patch",
        "gpg",
        "return_value",
        "encryption_event",
        "expect",
        "gpg_space",
        "move_from_storage_service",
        "src_path",
        "dst_path",
        "should_have_pointer_file",
        "ret",
        "events",
        "encryption_event",
        "callable",
        "ret",
        "composition_level_updater",
        "ret",
        "inhibitors",
        "ret",
        "orig_pkg_key",
        "gpg_space",
        "key",
        "encryption_key_fingerprint",
        "gpg_space",
        "key",
        "save_called",
        "pytest",
        "raises",
        "gpg",
        "GPGException",
        "excinfo",
        "gpg_space",
        "move_from_storage_service",
        "src_path",
        "dst_path",
        "excinfo",
        "value",
        "encrypt_ret",
        "excinfo",
        "value",
        "gpg_space",
        "space",
        "create_local_directory",
        "assert_called_once_with",
        "dst_path",
        "gpg_space",
        "space",
        "move_rsync",
        "assert_any_call",
        "src_path",
        "dst_path",
        "try_mv_local",
        "expect",
        "gpg_space",
        "space",
        "move_rsync",
        "assert_any_call",
        "dst_path",
        "src_path",
        "try_mv_local",
        "gpg",
        "_gpg_encrypt",
        "assert_called_once_with",
        "dst_path",
        "gpg_space",
        "key",
        "pytest",
        "mark",
        "parametrize",
        "BrowseCase",
        "path",
        "encrpath",
        "existsafter",
        "expect",
        "BrowseCase",
        "path",
        "encrpath",
        "existsafter",
        "expect",
        "BrowseCase",
        "path",
        "encrpath",
        "existsafter",
        "expect",
        "BrowseCase",
        "path",
        "encrpath",
        "existsafter",
        "expect",
        "mocker",
        "path",
        "encr_path",
        "exists_after_decrypt",
        "expect",
        "mocker",
        "patch",
        "gpg",
        "return_value",
        "encr_path",
        "mocker",
        "patch",
        "gpg",
        "mocker",
        "patch",
        "gpg",
        "mocker",
        "patch",
        "gpg",
        "return_value",
        "SOME_FINGERPRINT",
        "mocker",
        "patch",
        "os",
        "path",
        "return_value",
        "exists_after_decrypt",
        "mocker",
        "patch",
        "space",
        "return_value",
        "expect",
        "path",
        "rstrip",
        "gpg",
        "GPG",
        "browse",
        "path",
        "expect",
        "ret",
        "expect",
        "ret",
        "BROWSE_FAIL_DICT",
        "gpg",
        "_get_encrypted_path",
        "assert_called_once_with",
        "fixed_path",
        "encr_path",
        "gpg",
        "_gpg_decrypt",
        "assert_called_once_with",
        "encr_path",
        "gpg",
        "_encr_path2key_fingerprint",
        "assert_called_once_with",
        "encr_path",
        "gpg",
        "_gpg_encrypt",
        "assert_called_once_with",
        "encr_path",
        "SOME_FINGERPRINT",
        "pytest",
        "mark",
        "parametrize",
        "EncryptCase",
        "path",
        "isdir",
        "encrpathisfile",
        "encryptret",
        "ENCRYPT_RET_SUCCESS",
        "expected",
        "EncryptCase",
        "path",
        "isdir",
        "encrpathisfile",
        "encryptret",
        "ENCRYPT_RET_SUCCESS",
        "expected",
        "EncryptCase",
        "path",
        "isdir",
        "encrpathisfile",
        "encryptret",
        "ENCRYPT_RET_SUCCESS",
        "expected",
        "EncryptCase",
        "path",
        "isdir",
        "encrpathisfile",
        "encryptret",
        "ENCRYPT_RET_FAIL",
        "expected",
        "mocker",
        "path",
        "isdir",
        "encr_path_is_file",
        "encrypt_ret",
        "expected",
        "format",
        "path",
        "mocker",
        "patch",
        "os",
        "path",
        "return_value",
        "isdir",
        "mocker",
        "patch",
        "os",
        "mocker",
        "patch",
        "os",
        "mocker",
        "patch",
        "gpg",
        "mocker",
        "patch",
        "gpg",
        "mocker",
        "patch",
        "gpgutils",
        "return_value",
        "encr_path",
        "encrypt_ret",
        "mocker",
        "patch",
        "os",
        "path",
        "return_value",
        "encr_path_is_file",
        "expected",
        "gpg",
        "_gpg_encrypt",
        "path",
        "SOME_FINGERPRINT",
        "os",
        "remove",
        "assert_called_once_with",
        "path",
        "os",
        "rename",
        "assert_called_once_with",
        "encr_path",
        "path",
        "ret",
        "path",
        "encrypt_ret",
        "gpg",
        "_extract_tar",
        "called",
        "pytest",
        "raises",
        "gpg",
        "GPGException",
        "excinfo",
        "gpg",
        "_gpg_encrypt",
        "path",
        "SOME_FINGERPRINT",
        "format",
        "path",
        "excinfo",
        "value",
        "isdir",
        "gpg",
        "_extract_tar",
        "assert_called_once_with",
        "path",
        "os",
        "path",
        "isdir",
        "assert_called_once_with",
        "path",
        "os",
        "path",
        "isfile",
        "assert_called_once_with",
        "encr_path",
        "isdir",
        "gpg",
        "_create_tar",
        "assert_called_once_with",
        "path",
        "monkeypatch",
        "path",
        "path",
        "monkeypatch",
        "setattr",
        "os",
        "path",
        "mock_isfile",
        "gpg",
        "_get_encrypted_path",
        "gpg",
        "_get_encrypted_path",
        "gpg",
        "_get_encrypted_path",
        "gpg",
        "_get_encrypted_path",
        "gpg",
        "_get_encrypted_path",
        "pytest",
        "mark",
        "parametrize",
        "encode",
        "unicodedata",
        "normalize",
        "encode",
        "inp",
        "outp",
        "outp",
        "gpg",
        "escape",
        "inp",
        "pytest",
        "mark",
        "parametrize",
        "DecryptCase",
        "path",
        "isfile",
        "createsdecryptfile",
        "decryptret",
        "DECRYPT_RET_SUCCESS",
        "expected",
        "DecryptCase",
        "path",
        "isfile",
        "createsdecryptfile",
        "decryptret",
        "DECRYPT_RET_FAIL",
        "expected",
        "DecryptCase",
        "path",
        "isfile",
        "createsdecryptfile",
        "decryptret",
        "DECRYPT_RET_FAIL",
        "expected",
        "mocker",
        "path",
        "isfile",
        "will_create_decrypt_file",
        "decrypt_ret",
        "expected",
        "mocker",
        "patch",
        "mocker",
        "patch",
        "mocker",
        "patch",
        "tarfile",
        "return_value",
        "mocker",
        "patch",
        "gpgutils",
        "return_value",
        "decrypt_ret",
        "mocker",
        "patch",
        "gpg",
        "path_",
        "path_",
        "path",
        "isfile",
        "will_create_decrypt_file",
        "mocker",
        "patch",
        "os",
        "path",
        "side_effect",
        "isfilemock",
        "gpgutils",
        "gpg_decrypt_file",
        "called",
        "format",
        "path",
        "expected",
        "gpg",
        "_gpg_decrypt",
        "path",
        "os",
        "remove",
        "assert_called_once_with",
        "path",
        "os",
        "rename",
        "assert_called_once_with",
        "decr_path",
        "path",
        "tarfile",
        "is_tarfile",
        "assert_called_once_with",
        "path",
        "gpg",
        "_extract_tar",
        "assert_called_once_with",
        "path",
        "ret",
        "path",
        "pytest",
        "raises",
        "gpg",
        "GPGException",
        "excinfo",
        "gpg",
        "_gpg_decrypt",
        "path",
        "isfile",
        "format",
        "path",
        "DECRYPT_RET_FAIL_STATUS",
        "excinfo",
        "value",
        "format",
        "path",
        "excinfo",
        "value",
        "os",
        "remove",
        "called",
        "os",
        "rename",
        "called",
        "tarfile",
        "is_tarfile",
        "called",
        "gpg",
        "_extract_tar",
        "called",
        "isfile",
        "gpgutils",
        "gpg_decrypt_file",
        "assert_called_once_with",
        "path",
        "decr_path",
        "gpgutils",
        "gpg_decrypt_file",
        "called",
        "GPG_VERSION",
        "gpg",
        "_parse_gpg_version",
        "RAW_GPG_VERSION",
        "mocker",
        "mocker",
        "patch",
        "subprocess",
        "return_value",
        "RAW_GPG_VERSION",
        "mocker",
        "patch",
        "utils",
        "return_value",
        "TEST_AGENTS",
        "FakeGPGRet",
        "ok",
        "status",
        "SUCCESS_STATUS",
        "stderr",
        "stderr",
        "gpg",
        "create_encryption_event",
        "encr_result",
        "SOME_FINGERPRINT",
        "data",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "format",
        "GPG_VERSION",
        "SOME_FINGERPRINT",
        "x",
        "x",
        "x",
        "x",
        "x",
        "eoi",
        "x",
        "x",
        "x",
        "eoi",
        "x",
        "format",
        "SUCCESS_STATUS",
        "stderr",
        "replace",
        "x",
        "x",
        "x",
        "x",
        "x",
        "lai",
        "x",
        "format",
        "SS_VERSION",
        "utils",
        "get_ss_premis_agents",
        "assert_called_once",
        "subprocess",
        "check_output",
        "assert_called_once_with",
        "pytest",
        "mark",
        "parametrize",
        "ExTarCase",
        "path",
        "isdir",
        "raises",
        "expected",
        "ExTarCase",
        "path",
        "isdir",
        "raises",
        "expected",
        "ExTarCase",
        "path",
        "isdir",
        "raises",
        "expected",
        "mocker",
        "path",
        "will_be_dir",
        "sp_raises",
        "expected",
        "sp_raises",
        "mocker",
        "patch",
        "subprocess",
        "side_effect",
        "OSError",
        "mocker",
        "patch",
        "subprocess",
        "mocker",
        "patch",
        "os",
        "mocker",
        "patch",
        "os",
        "will_be_dir",
        "mocker",
        "patch",
        "os",
        "path",
        "return_value",
        "mocker",
        "patch",
        "os",
        "path",
        "return_value",
        "format",
        "path",
        "os",
        "path",
        "dirname",
        "tarpath_ext",
        "expected",
        "gpg",
        "_extract_tar",
        "path",
        "ret",
        "os",
        "remove",
        "assert_called_once_with",
        "tarpath_ext",
        "pytest",
        "raises",
        "gpg",
        "GPGException",
        "excinfo",
        "gpg",
        "_extract_tar",
        "path",
        "format",
        "path",
        "excinfo",
        "value",
        "os",
        "rename",
        "assert_any_call",
        "tarpath_ext",
        "path",
        "os",
        "remove",
        "called",
        "os",
        "rename",
        "assert_any_call",
        "path",
        "tarpath_ext",
        "subprocess",
        "check_output",
        "assert_called_once_with",
        "tarpath_ext",
        "dirname",
        "pytest",
        "mark",
        "parametrize",
        "CrTarCase",
        "path",
        "isfile",
        "istar",
        "raises",
        "expected",
        "CrTarCase",
        "path",
        "isfile",
        "istar",
        "raises",
        "expected",
        "CrTarCase",
        "path",
        "isfile",
        "istar",
        "raises",
        "expected",
        "CrTarCase",
        "path",
        "isfile",
        "istar",
        "raises",
        "expected",
        "CrTarCase",
        "path",
        "isfile",
        "istar",
        "raises",
        "expected",
        "mocker",
        "path",
        "will_be_file",
        "will_be_tar",
        "sp_raises",
        "expected",
        "sp_raises",
        "mocker",
        "patch",
        "subprocess",
        "side_effect",
        "OSError",
        "mocker",
        "patch",
        "subprocess",
        "mocker",
        "patch",
        "os",
        "path",
        "return_value",
        "will_be_file",
        "mocker",
        "patch",
        "tarfile",
        "return_value",
        "will_be_tar",
        "mocker",
        "patch",
        "os",
        "mocker",
        "patch",
        "shutil",
        "path",
        "rstrip",
        "format",
        "fixed_path",
        "expected",
        "gpg",
        "_create_tar",
        "path",
        "shutil",
        "rmtree",
        "assert_called_once_with",
        "fixed_path",
        "os",
        "rename",
        "assert_called_once_with",
        "tarpath",
        "fixed_path",
        "tarfile",
        "is_tarfile",
        "assert_any_call",
        "fixed_path",
        "ret",
        "pytest",
        "raises",
        "gpg",
        "GPGException",
        "excinfo",
        "gpg",
        "_create_tar",
        "path",
        "format",
        "tarpath",
        "fixed_path",
        "excinfo",
        "value",
        "shutil",
        "rmtree",
        "called",
        "os",
        "rename",
        "called",
        "sp_raises",
        "os",
        "path",
        "isfile",
        "assert_called_once_with",
        "tarpath",
        "will_be_file",
        "tarfile",
        "is_tarfile",
        "assert_any_call",
        "tarpath",
        "TestCase",
        "Package",
        "objects",
        "get",
        "pk",
        "current_path",
        "exp_curr_path",
        "encryption_key_fingerprint",
        "EXP_FINGERPRINT",
        "exp_curr_path",
        "gpg",
        "_encr_path2key_fingerprint",
        "encr_path",
        "EXP_FINGERPRINT",
        "format",
        "exp_curr_path",
        "gpg",
        "_encr_path2key_fingerprint",
        "encr_path",
        "EXP_FINGERPRINT",
        "format",
        "exp_curr_path",
        "gpg",
        "_encr_path2key_fingerprint",
        "encr_path",
        "EXP_FINGERPRINT",
        "format",
        "exp_curr_path",
        "gpg",
        "_encr_path2key_fingerprint",
        "encr_path",
        "EXP_FINGERPRINT",
        "pytest",
        "raises",
        "gpg",
        "GPGException",
        "excinfo",
        "gpg",
        "_encr_path2key_fingerprint",
        "encr_path",
        "format",
        "encr_path",
        "excinfo",
        "value"
    ],
    "literals": [
        "'1.4.16'",
        "'0.11.0'",
        "'good times'",
        "'bad stuff happened'",
        "'gpg (GnuPG) {}\\n'",
        "'and some other nonsense\\n'",
        "'and some more nonsense'",
        "'B9C518917A958DD0B1F5E1B80C3D34DDA5958532'",
        "'BBBB18917A958DD0B1F5E1B80C3D34DDA595BBBB'",
        "'agent'",
        "'agent_identifier'",
        "'agent_identifier_type'",
        "'preservation system'",
        "'agent_identifier_value'",
        "'Archivematica-Storage-Service-{}'",
        "'agent_name'",
        "'Archivematica Storage Service'",
        "'agent_type'",
        "'software'",
        "'directories'",
        "'entries'",
        "'properties'",
        "'FakeGPGRet'",
        "'ok status stderr'",
        "'ExTarCase'",
        "'path isdir raises expected'",
        "'CrTarCase'",
        "'path isfile istar raises expected'",
        "'DecryptCase'",
        "'path isfile createsdecryptfile decryptret expected'",
        "'EncryptCase'",
        "'path isdir encrpathisfile encryptret expected'",
        "'BrowseCase'",
        "'path encrpath existsafter expect'",
        "'MoveFromCase'",
        "'src_path dst_path package encrypt_ret expect'",
        "'MoveToCase'",
        "'src_path dst_path src_exists1 src_exists2 encr_path expect'",
        "''",
        "''",
        "'fingerprint'",
        "'should_have_pointer'",
        "'src_path, dst_path, src_exists1, src_exists2, encr_path, expect'",
        "'/a/b/c'",
        "'/x/y/z'",
        "'/a/b/c'",
        "'success'",
        "'/a/b/c/somefile.jpg'",
        "'/x/y/z/somefile.jpg'",
        "'/a/b/c'",
        "'success'",
        "'/a/b/c/somefile.jpg'",
        "'/x/y/z/somefile.jpg'",
        "'fail'",
        "'/a/b/c/somefile.jpg'",
        "'/x/y/z/somefile.jpg'",
        "'/a/b/c'",
        "'fail'",
        "'create_local_directory'",
        "'move_rsync'",
        "'_gpg_decrypt'",
        "'_gpg_encrypt'",
        "'_encr_path2key_fingerprint'",
        "'_get_encrypted_path'",
        "'exists'",
        "'success'",
        "'Unable to move {}; this file/dir does not exist;'",
        "' nor is it in an encrypted directory.'",
        "'Unable to move {}; this file/dir does not'",
        "' exist, not even in encrypted directory'",
        "' {}.'",
        "'src_path, dst_path, package, encrypt_ret, expect'",
        "'/a/b/c/'",
        "'/x/y/z'",
        "''",
        "'success'",
        "'/a/b/c/'",
        "'/x/y/z'",
        "''",
        "'success'",
        "'/a/b/c/'",
        "'/x/y/z'",
        "''",
        "'success'",
        "'/a/b/c/'",
        "'/x/y/z'",
        "'gotcha!'",
        "'fail'",
        "'/a/b/c/'",
        "'/x/y/z'",
        "''",
        "'fail'",
        "'_gpg_encrypt'",
        "'_gpg_encrypt'",
        "'create_local_directory'",
        "'move_rsync'",
        "'create_encryption_event'",
        "'success'",
        "'inhibitors'",
        "'GPG spaces can only contain packages'",
        "'success'",
        "'path, encr_path, exists_after_decrypt, expect'",
        "'/a/b/c/'",
        "'/a/b/c'",
        "'success'",
        "'/a/b/c/somefile.jpg'",
        "'/a/b/c'",
        "'success'",
        "'/a/b/c/somefile.jpg'",
        "'fail'",
        "'/a/b/c/'",
        "'/a/b/c'",
        "'fail'",
        "'_get_encrypted_path'",
        "'_gpg_decrypt'",
        "'_gpg_encrypt'",
        "'_encr_path2key_fingerprint'",
        "'exists'",
        "'path2browse_dict'",
        "'/'",
        "'success'",
        "'path, isdir, encr_path_is_file, encrypt_ret, expected'",
        "'/a/b/c'",
        "'success'",
        "'/a/b/c'",
        "'success'",
        "'/a/b/c'",
        "'fail'",
        "'/a/b/c'",
        "'fail'",
        "'{}.gpg'",
        "'isdir'",
        "'remove'",
        "'rename'",
        "'_create_tar'",
        "'_extract_tar'",
        "'gpg_encrypt_file'",
        "'isfile'",
        "'success'",
        "'An error occured when attempting to encrypt {}'",
        "'/a/b/c'",
        "'/a/b/d'",
        "'isfile'",
        "'/some/silly/path'",
        "'/a/b/c'",
        "'/a/b/c'",
        "'/a/b/c/d/e'",
        "'/a/b/c'",
        "'/a/b/d/f/h'",
        "'/a/b/d'",
        "'/a/b'",
        "'inp, outp'",
        "'abc'",
        "'abc'",
        "u'change\\u0301'",
        "u'change\\u0301'",
        "u'change\\u0301'",
        "'utf8'",
        "u'change\\u0301'",
        "'NFC'",
        "u'change\\u0301'",
        "'latin1'",
        "u'chang\\uFFFD'",
        "'path, isfile, will_create_decrypt_file, decrypt_ret, expected'",
        "'/a/b/c'",
        "'success'",
        "'/x/y/z'",
        "'fail'",
        "'/a/b/c'",
        "'fail'",
        "'os.remove'",
        "'os.rename'",
        "'is_tarfile'",
        "'gpg_decrypt_file'",
        "'_extract_tar'",
        "'isfile'",
        "'{}.decrypted'",
        "'success'",
        "'Failed to decrypt {}. Reason: {}'",
        "'Cannot decrypt file at {}; no such file.'",
        "'check_output'",
        "'get_ss_premis_agents'",
        "'me contain \" quote'",
        "'event'",
        "'event_type'",
        "'encryption'",
        "'event_detail'",
        "'program=GPG; version={}; key={}'",
        "'event_outcome_information'",
        "'event_outcome'",
        "'success'",
        "'event_outcome_detail'",
        "'Status=\"{}\"; Standard Error=\"{}\"'",
        "'\"'",
        "r'\\\"'",
        "'linking_agent_identifier'",
        "'linking_agent_identifier_value'",
        "'Archivematica-Storage-Service-{}'",
        "'gpg'",
        "'--version'",
        "'path, will_be_dir, sp_raises, expected'",
        "'/a/b/c'",
        "'success'",
        "'/a/b/d'",
        "'fail'",
        "'/a/b/c'",
        "'fail'",
        "'check_output'",
        "'gotcha!'",
        "'check_output'",
        "'rename'",
        "'remove'",
        "'isdir'",
        "'isdir'",
        "'{}.tar'",
        "'success'",
        "'Failed to extract {} to a directory at the same'",
        "' location.'",
        "'tar'",
        "'-xf'",
        "'-C'",
        "'path, will_be_file, will_be_tar, sp_raises, expected'",
        "'/a/b/c'",
        "'success'",
        "'/a/b/c/'",
        "'success'",
        "'/a/b/c'",
        "'fail'",
        "'/a/b/c'",
        "'fail'",
        "'/a/b/c'",
        "'fail'",
        "'check_output'",
        "'gotcha!'",
        "'check_output'",
        "'isfile'",
        "'is_tarfile'",
        "'rename'",
        "'rmtree'",
        "'/'",
        "'{}.tar'",
        "'success'",
        "'Failed to create a tarfile at {} for dir at {}'",
        "'base.json'",
        "'package.json'",
        "'gpg.json'",
        "'some/relative/path/to/'",
        "'images-transfer-abcdabcd-97dd-48e0-8417-03be78359531'",
        "'/abs/path/to/{}'",
        "'{}/data/objects/somefile.jpg'",
        "'/abs/path/to/{}/data/objects/somefile.jpg'",
        "'/some/non/matching/path.jpg'",
        "'Unable to find package matching encrypted path {}'"
    ],
    "variables": [
        "GPG_VERSION",
        "SS_VERSION",
        "SUCCESS_STATUS",
        "DECRYPT_RET_FAIL_STATUS",
        "RAW_GPG_VERSION",
        "SOME_FINGERPRINT",
        "EXP_FINGERPRINT",
        "SOME_OTHER_FINGERPRINT",
        "TEST_AGENTS",
        "BROWSE_FAIL_DICT",
        "FakeGPGRet",
        "ExTarCase",
        "CrTarCase",
        "DecryptCase",
        "EncryptCase",
        "BrowseCase",
        "MoveFromCase",
        "MoveToCase",
        "ENCRYPT_RET_SUCCESS",
        "DECRYPT_RET_SUCCESS",
        "ENCRYPT_RET_FAIL",
        "DECRYPT_RET_FAIL",
        "encryption_key_fingerprint",
        "_should_have_pointer_file",
        "save_called",
        "gpg_space",
        "ret",
        "orig_pkg_key",
        "gpg_space",
        "encryption_event",
        "ret",
        "fixed_path",
        "ret",
        "encr_path",
        "ret",
        "decr_path",
        "ret",
        "stderr",
        "encr_result",
        "eoi",
        "lai",
        "tarpath_ext",
        "dirname",
        "ret",
        "ret",
        "fixed_path",
        "tarpath",
        "ret",
        "ret",
        "fixtures",
        "exp_curr_path",
        "encr_path",
        "encr_path",
        "encr_path",
        "encr_path",
        "encr_path"
    ],
    "comments": [
        "-*- coding: utf8 -*-"
    ],
    "docstrings": [
        "\"\"\"Tests for the GPG encrypted space.\"\"\""
    ],
    "functions": [
        "save",
        "should_have_pointer_file",
        "test_move_to_storage_service",
        "test_move_from_storage_service",
        "test_browse",
        "test__gpg_encrypt",
        "test__get_encrypted_path",
        "mock_isfile",
        "test_escape",
        "test__gpg_decrypt",
        "isfilemock",
        "test__parse_gpg_version",
        "test_create_encryption_event",
        "test__extract_tar",
        "test__create_tar",
        "test__encr_path2key_fingerprint"
    ],
    "classes": [
        "MockPackage",
        "TestGPG"
    ]
}