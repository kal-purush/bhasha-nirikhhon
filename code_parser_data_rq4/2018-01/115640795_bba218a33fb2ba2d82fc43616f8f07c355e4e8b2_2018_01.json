{
    "identifiers": [
        "po",
        "org",
        "apache",
        "poi",
        "xssf",
        "usermodel",
        "XSSFCell",
        "org",
        "apache",
        "poi",
        "xssf",
        "usermodel",
        "XSSFRow",
        "org",
        "apache",
        "poi",
        "xssf",
        "usermodel",
        "XSSFSheet",
        "org",
        "apache",
        "poi",
        "xssf",
        "usermodel",
        "XSSFWorkbook",
        "po",
        "utils",
        "Logger",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "FileNotFoundException",
        "java",
        "io",
        "FileOutputStream",
        "java",
        "io",
        "TEST_DATA",
        "TEST_OUT_PUT",
        "SHEET",
        "INDEX",
        "testData",
        "testData",
        "getDataFrom",
        "TEST_DATA",
        "testData",
        "row",
        "testData",
        "getSheet",
        "SHEET",
        "getRow",
        "INDEX",
        "Logger",
        "info",
        "INDEX",
        "SHEET",
        "KIND_OF_SORT",
        "row",
        "getCell",
        "getStringCellValue",
        "closeWorkBook",
        "testData",
        "KIND_OF_SORT",
        "SHEET",
        "INDEX",
        "PRICE_FROM_SITE",
        "wb",
        "wb",
        "getDataFrom",
        "TEST_OUT_PUT",
        "wb",
        "wb",
        "wb",
        "getDataFrom",
        "TEST_DATA",
        "wb",
        "row",
        "wb",
        "getSheet",
        "SHEET",
        "getRow",
        "INDEX",
        "Logger",
        "info",
        "INDEX",
        "SHEET",
        "cell",
        "row",
        "createCell",
        "row",
        "getLastCellNum",
        "cell",
        "setCellValue",
        "PRICE_FROM_SITE",
        "fileOut",
        "fileOut",
        "getFileOutInstance",
        "fileOut",
        "wb",
        "write",
        "fileOut",
        "fileOut",
        "flush",
        "fileOut",
        "close",
        "e",
        "e",
        "printStackTrace",
        "closeWorkBook",
        "wb",
        "ANY_XLSX_FILE",
        "WorkBook",
        "WorkBook",
        "ANY_XLSX_FILE",
        "Logger",
        "info",
        "ANY_XLSX_FILE",
        "e",
        "Logger",
        "info",
        "ANY_XLSX_FILE",
        "e",
        "printStackTrace",
        "WorkBook",
        "WorkBook",
        "WorkBook",
        "close",
        "Logger",
        "info",
        "e",
        "Logger",
        "info",
        "e",
        "printStackTrace",
        "fileOut",
        "fileOut",
        "TEST_OUT_PUT",
        "e",
        "e",
        "printStackTrace",
        "fileOut"
    ],
    "literals": [
        "\"src/main/resources/TestData.xlsx\"",
        "\"src/main/resources/TestOutPut.xlsx\"",
        "\"Row number \"",
        "\" exist on \"",
        "\" in TestData.xlsx\"",
        "\"Row number \"",
        "\" exist on \"",
        "\" was found\"",
        "\" was NOT found\"",
        "\"WorkBook was closed\"",
        "\"WorkBook was NOT closed\""
    ],
    "variables": [],
    "comments": [
        "https://tproger.ru/translations/how-to-read-write-excel-file-java-poi-example/",
        "import java.io.FileInputStream;",
        "import java.io.FileOutputStream;",
        "import java.io.IOException;",
        "import java.io.InputStream;",
        "import java.util.Iterator;",
        "import org.apache.poi.hssf.usermodel.HSSFCell;",
        "import org.apache.poi.hssf.usermodel.HSSFRow;",
        "import org.apache.poi.hssf.usermodel.HSSFSheet;",
        "import org.apache.poi.hssf.usermodel.HSSFWorkbook;",
        "import org.apache.poi.xssf.usermodel.XSSFCell;",
        "import org.apache.poi.xssf.usermodel.XSSFRow;",
        "import org.apache.poi.xssf.usermodel.XSSFSheet;",
        "import org.apache.poi.xssf.usermodel.XSSFWorkbook;",
        "public class ReadWriteExcelFile {",
        "public static void readXLSFile() throws IOException {",
        "InputStream ExcelFileToRead = new FileInputStream(\"C:/Test.xls\");",
        "HSSFWorkbook wb = new HSSFWorkbook(ExcelFileToRead);",
        "HSSFSheet sheet = wb.getSheetAt(0);",
        "HSSFRow row;",
        "HSSFCell cell;",
        "Iterator rows = sheet.rowIterator();",
        "while (rows.hasNext()) {",
        "row = (HSSFRow) rows.next();",
        "Iterator cells = row.cellIterator();",
        "while (cells.hasNext()) {",
        "cell = (HSSFCell) cells.next();",
        "if (cell.getCellType() == HSSFCell.CELL_TYPE_STRING) {",
        "System.out.print(cell.getStringCellValue() + \" \");",
        "} else if (cell.getCellType() == HSSFCell.CELL_TYPE_NUMERIC) {",
        "System.out.print(cell.getNumericCellValue() + \" \");",
        "} else {",
        "//U Can Handel Boolean, Formula, Errors",
        "}}",
        "}}",
        "",
        "public static void writeXLSFile() throws IOException {",
        "String excelFileName = \"C:/Test.xls\";//name of excel file",
        "String sheetName = \"Sheet1\";//name of sheet",
        "HSSFWorkbook wb = new HSSFWorkbook();",
        "HSSFSheet sheet = wb.createSheet(sheetName);",
        "//iterating r number of rows",
        "for (int r = 0; r < 5; r++) {",
        "HSSFRow row = sheet.createRow(r);",
        "//iterating c number of columns",
        "for (int c = 0; c < 5; c++) {",
        "HSSFCell cell = row.createCell(c);",
        "cell.setCellValue(\"Cell \" + r + \" \" + c);",
        "}}",
        "FileOutputStream fileOut = new FileOutputStream(excelFileName);",
        "//write this workbook to an Outputstream.",
        "wb.write(fileOut);",
        "fileOut.flush();",
        "fileOut.close();",
        "}",
        "public static void readXLSXFile() throws IOException {",
        "InputStream ExcelFileToRead = new FileInputStream(\"C:/Test.xlsx\");",
        "XSSFWorkbook wb = new XSSFWorkbook(ExcelFileToRead);",
        "XSSFWorkbook test = new XSSFWorkbook();",
        "XSSFSheet sheet = wb.getSheetAt(0);",
        "XSSFRow row;",
        "XSSFCell cell;",
        "Iterator rows = sheet.rowIterator();",
        "while (rows.hasNext()) {",
        "row = (XSSFRow) rows.next();",
        "Iterator cells = row.cellIterator();",
        "while (cells.hasNext()) {",
        "cell = (XSSFCell) cells.next();",
        "if (cell.getCellType() == XSSFCell.CELL_TYPE_STRING) {",
        "System.out.print(cell.getStringCellValue() + \" \");",
        "} else if (cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {",
        "System.out.print(cell.getNumericCellValue() + \" \");",
        "} else {",
        "//U Can Handel Boolean, Formula, Errors",
        "}}",
        "}}",
        "",
        "public static void writeXLSXFile() throws IOException {",
        "String excelFileName = \"C:/Test.xlsx\";//name of excel file",
        "String sheetName = \"Sheet1\";//name of sheet",
        "XSSFWorkbook wb = new XSSFWorkbook();",
        "XSSFSheet sheet = wb.createSheet(sheetName);",
        "//iterating r number of rows",
        "for (int r = 0; r < 5; r++) {",
        "XSSFRow row = sheet.createRow(r);",
        "//iterating c number of columns",
        "for (int c = 0; c < 5; c++) {",
        "XSSFCell cell = row.createCell(c);",
        "cell.setCellValue(\"Cell \" + r + \" \" + c);",
        "}}",
        "FileOutputStream fileOut = new FileOutputStream(excelFileName);",
        "//write this workbook to an Outputstream.",
        "wb.write(fileOut);",
        "fileOut.flush();",
        "fileOut.close();",
        "}",
        "",
        "public static void main(String[] args) throws IOException {",
        "writeXLSFile();",
        "readXLSFile();",
        "writeXLSXFile();",
        "readXLSXFile();",
        "}",
        "}"
    ],
    "docstrings": [
        "* Found here: https://gist.github.com/madan712/3912272"
    ],
    "functions": [
        "loadSortByText",
        "loadInExcel",
        "XSSFWorkbook",
        "getDataFrom",
        "closeWorkBook",
        "FileOutputStream",
        "getFileOutInstance"
    ],
    "classes": [
        "WorkWithExcelFiles"
    ]
}