{
    "identifiers": [
        "io",
        "confluent",
        "kafka",
        "serializers",
        "io",
        "confluent",
        "kafka",
        "schemaregistry",
        "client",
        "SchemaMetadata",
        "org",
        "apache",
        "avro",
        "Schema",
        "org",
        "apache",
        "avro",
        "generic",
        "GenericContainer",
        "org",
        "apache",
        "avro",
        "generic",
        "GenericDatumReader",
        "org",
        "apache",
        "avro",
        "io",
        "DatumReader",
        "org",
        "apache",
        "avro",
        "io",
        "DecoderFactory",
        "org",
        "apache",
        "avro",
        "specific",
        "SpecificData",
        "org",
        "apache",
        "avro",
        "specific",
        "SpecificDatumReader",
        "org",
        "apache",
        "avro",
        "specific",
        "SpecificRecord",
        "org",
        "apache",
        "kafka",
        "common",
        "config",
        "ConfigException",
        "org",
        "apache",
        "kafka",
        "common",
        "errors",
        "SerializationException",
        "org",
        "codehaus",
        "jackson",
        "node",
        "JsonNodeFactory",
        "java",
        "io",
        "java",
        "nio",
        "ByteBuffer",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "ConcurrentHashMap",
        "io",
        "confluent",
        "kafka",
        "schemaregistry",
        "client",
        "rest",
        "exceptions",
        "RestClientException",
        "kafka",
        "utils",
        "VerifiableProperties",
        "SCHEMA_REGISTRY_SCHEMA_VERSION_PROP",
        "decoderFactory",
        "DecoderFactory",
        "get",
        "useSpecificAvroReader",
        "readerSchemaCache",
        "config",
        "configureClientProperties",
        "config",
        "useSpecificAvroReader",
        "config",
        "getBoolean",
        "KafkaAvroDeserializerConfig",
        "SPECIFIC_AVRO_READER_CONFIG",
        "props",
        "props",
        "e",
        "e",
        "getMessage",
        "props",
        "props",
        "props",
        "e",
        "e",
        "getMessage",
        "payload",
        "buffer",
        "ByteBuffer",
        "wrap",
        "payload",
        "buffer",
        "get",
        "MAGIC_BYTE",
        "buffer",
        "payload",
        "deserialize",
        "payload",
        "payload",
        "readerSchema",
        "deserialize",
        "payload",
        "readerSchema",
        "includeSchemaAndVersion",
        "topic",
        "isKey",
        "payload",
        "readerSchema",
        "payload",
        "id",
        "buffer",
        "getByteBuffer",
        "payload",
        "id",
        "buffer",
        "getInt",
        "subject",
        "includeSchemaAndVersion",
        "getSubjectName",
        "topic",
        "isKey",
        "schema",
        "schemaMetadata",
        "schema",
        "schemaRegistry",
        "getBySubjectAndID",
        "subject",
        "id",
        "ex",
        "ex",
        "getErrorCode",
        "schemaMetadata",
        "schemaRegistry",
        "getLatestSchemaMetadata",
        "subject",
        "id",
        "schemaMetadata",
        "getId",
        "schema",
        "parse",
        "schemaMetadata",
        "getSchema",
        "ex",
        "length",
        "buffer",
        "limit",
        "idSize",
        "result",
        "schema",
        "getType",
        "equals",
        "Schema",
        "Type",
        "BYTES",
        "length",
        "buffer",
        "get",
        "length",
        "result",
        "start",
        "buffer",
        "position",
        "buffer",
        "arrayOffset",
        "reader",
        "getDatumReader",
        "schema",
        "readerSchema",
        "reader",
        "read",
        "decoderFactory",
        "binaryDecoder",
        "buffer",
        "array",
        "start",
        "length",
        "schema",
        "getType",
        "equals",
        "Schema",
        "Type",
        "STRING",
        "toString",
        "result",
        "includeSchemaAndVersion",
        "version",
        "schemaMetadata",
        "schemaMetadata",
        "getVersion",
        "schemaRegistry",
        "getVersion",
        "subject",
        "schema",
        "schema",
        "getType",
        "Schema",
        "Type",
        "UNION",
        "memberSchema",
        "schema",
        "getTypes",
        "memberSchema",
        "getType",
        "Schema",
        "Type",
        "NULL",
        "memberSchema",
        "addProp",
        "SCHEMA_REGISTRY_SCHEMA_VERSION_PROP",
        "JsonNodeFactory",
        "instance",
        "numberNode",
        "version",
        "schema",
        "addProp",
        "SCHEMA_REGISTRY_SCHEMA_VERSION_PROP",
        "JsonNodeFactory",
        "instance",
        "numberNode",
        "version",
        "schema",
        "getType",
        "equals",
        "Schema",
        "Type",
        "RECORD",
        "result",
        "schema",
        "result",
        "result",
        "e",
        "id",
        "e",
        "e",
        "id",
        "e",
        "topic",
        "isKey",
        "payload",
        "deserialize",
        "topic",
        "isKey",
        "payload",
        "writerSchema",
        "readerSchema",
        "writerSchemaIsPrimitive",
        "getPrimitiveSchemas",
        "values",
        "contains",
        "writerSchema",
        "useSpecificAvroReader",
        "writerSchemaIsPrimitive",
        "readerSchema",
        "readerSchema",
        "getReaderSchema",
        "writerSchema",
        "writerSchema",
        "readerSchema",
        "readerSchema",
        "writerSchema",
        "writerSchema",
        "readerSchema",
        "SuppressWarnings",
        "writerSchema",
        "readerSchema",
        "readerSchemaCache",
        "get",
        "writerSchema",
        "getFullName",
        "readerSchema",
        "readerClass",
        "SpecificData",
        "get",
        "getClass",
        "writerSchema",
        "readerClass",
        "readerSchema",
        "readerClass",
        "newInstance",
        "getSchema",
        "e",
        "writerSchema",
        "getFullName",
        "e",
        "writerSchema",
        "getFullName",
        "readerSchemaCache",
        "put",
        "writerSchema",
        "getFullName",
        "readerSchema",
        "writerSchema",
        "getFullName",
        "readerSchema"
    ],
    "literals": [
        "\"schema.registry.schema.version\"",
        "\"Unknown magic byte!\"",
        "\"Error deserializing Avro message for id \"",
        "\"Error retrieving Avro schema for id \"",
        "\"unchecked\"",
        "\" specified by the \"",
        "\"writers schema could not be instantiated to find the readers schema.\"",
        "\" specified by the \"",
        "\"writers schema is not allowed to be instantiated to find the readers schema.\"",
        "\"Could not find class \"",
        "\" specified in writer's schema whilst finding reader's schema for a SpecificRecord.\""
    ],
    "variables": [
        "schema",
        "result"
    ],
    "comments": [
        "The Object return type is a bit messy, but this is the simplest way to have flexible decoding and not duplicate",
        "deserialization code multiple times for different variants.",
        "Even if the caller requests schema & version, if the payload is null we cannot include it. The caller must handle",
        "this case.",
        "Utf8 -> String",
        "Annotate the schema with the version. Note that we only do this if the schema +",
        "version are requested, i.e. in Kafka Connect converters. This is critical because that",
        "code *will not* rely on exact schema equality. Regular deserializers *must not* include",
        "this information because it would return schemas which are not equivalent.",
        "",
        "Note, however, that we also do not fill in the connect.version field. This allows the",
        "Converter to let a version provided by a Kafka Connect source take priority over the",
        "schema registry's ordering (which is implicit by auto-registration time rather than",
        "explicit from the Connector).",
        "Can't set additional properties on a union schema since it's just a list, so set it",
        "on the first non-null entry",
        "avro deserialization may throw AvroRuntimeException, NullPointerException, etc",
        "do not use SpecificDatumReader if writerSchema is a primitive"
    ],
    "docstrings": [
        "* Copyright 2014 Confluent Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Sets properties for this deserializer without overriding the schema registry client itself.\n     * Useful for testing, where a mock client is injected.",
        "* Deserializes the payload without including schema information for primitive types, maps, and arrays. Just the resulting\n     * deserialized object is returned.\n     *\n     * This behavior is the norm for Decoders/Deserializers.\n     *\n     * @param payload serialized data\n     * @return the deserialized object\n     * @throws SerializationException",
        "* Just like single-parameter version but accepts an Avro schema to use for reading\n     *\n     * @param payload serialized data\n     * @param readerSchema schema to use for Avro read (optional, enables Avro projection)\n     * @return the deserialized object\n     * @throws SerializationException",
        "* Deserializes the payload and includes schema information, with version information from the schema registry embedded\n     * in the schema.\n     *\n     * @param payload the serialized data\n     * @return a GenericContainer with the schema and data, either as a {@link NonRecordContainer},\n     *         {@link org.apache.avro.generic.GenericRecord}, or {@link SpecificRecord}\n     * @throws SerializationException"
    ],
    "functions": [
        "configure",
        "KafkaAvroDeserializerConfig",
        "deserializerConfig",
        "KafkaAvroDeserializerConfig",
        "deserializerConfig",
        "ByteBuffer",
        "getByteBuffer",
        "deserialize",
        "deserialize",
        "deserialize",
        "GenericContainer",
        "deserializeWithSchemaAndVersion",
        "DatumReader",
        "getDatumReader",
        "Schema",
        "getReaderSchema"
    ],
    "classes": [
        "AbstractKafkaAvroDeserializer"
    ]
}