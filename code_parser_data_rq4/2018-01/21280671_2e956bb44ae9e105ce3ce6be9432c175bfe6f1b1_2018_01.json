{
    "identifiers": [
        "MathNet",
        "Spatial",
        "Internals",
        "SA1203",
        "SA1101",
        "SA1600",
        "SA1512",
        "SA1515",
        "SA1503",
        "SA1028",
        "SA1308",
        "SA1512",
        "SA1202",
        "SA1311",
        "SA1028",
        "SA1132",
        "SA1309",
        "SA1108",
        "SA1520",
        "Collections",
        "Generic",
        "ComponentModel",
        "Diagnostics",
        "CodeAnalysis",
        "Runtime",
        "CompilerServices",
        "HashCode",
        "GenerateGlobalSeed",
        "Random",
        "r",
        "Next",
        "seed",
        "T1",
        "T1",
        "value1",
        "value1",
        "GetHashCode",
        "MixEmptyState",
        "hash",
        "hash",
        "QueueRound",
        "hash",
        "hc1",
        "hash",
        "MixFinal",
        "hash",
        "hash",
        "T1",
        "T2",
        "T1",
        "value1",
        "T2",
        "value2",
        "value1",
        "GetHashCode",
        "value2",
        "GetHashCode",
        "MixEmptyState",
        "hash",
        "hash",
        "QueueRound",
        "hash",
        "hc1",
        "hash",
        "QueueRound",
        "hash",
        "hc2",
        "hash",
        "MixFinal",
        "hash",
        "hash",
        "T1",
        "T2",
        "T3",
        "T1",
        "value1",
        "T2",
        "value2",
        "T3",
        "value3",
        "value1",
        "GetHashCode",
        "value2",
        "GetHashCode",
        "value3",
        "GetHashCode",
        "MixEmptyState",
        "hash",
        "hash",
        "QueueRound",
        "hash",
        "hc1",
        "hash",
        "QueueRound",
        "hash",
        "hc2",
        "hash",
        "QueueRound",
        "hash",
        "hc3",
        "hash",
        "MixFinal",
        "hash",
        "hash",
        "T1",
        "T2",
        "T3",
        "T4",
        "T1",
        "value1",
        "T2",
        "value2",
        "T3",
        "value3",
        "T4",
        "value4",
        "value1",
        "GetHashCode",
        "value2",
        "GetHashCode",
        "value3",
        "GetHashCode",
        "value4",
        "GetHashCode",
        "Initialize",
        "v1",
        "v2",
        "v3",
        "v4",
        "v1",
        "Round",
        "v1",
        "hc1",
        "v2",
        "Round",
        "v2",
        "hc2",
        "v3",
        "Round",
        "v3",
        "hc3",
        "v4",
        "Round",
        "v4",
        "hc4",
        "MixState",
        "v1",
        "v2",
        "v3",
        "v4",
        "hash",
        "hash",
        "MixFinal",
        "hash",
        "hash",
        "T1",
        "T2",
        "T3",
        "T4",
        "T5",
        "T1",
        "value1",
        "T2",
        "value2",
        "T3",
        "value3",
        "T4",
        "value4",
        "T5",
        "value5",
        "value1",
        "GetHashCode",
        "value2",
        "GetHashCode",
        "value3",
        "GetHashCode",
        "value4",
        "GetHashCode",
        "value5",
        "GetHashCode",
        "Initialize",
        "v1",
        "v2",
        "v3",
        "v4",
        "v1",
        "Round",
        "v1",
        "hc1",
        "v2",
        "Round",
        "v2",
        "hc2",
        "v3",
        "Round",
        "v3",
        "hc3",
        "v4",
        "Round",
        "v4",
        "hc4",
        "MixState",
        "v1",
        "v2",
        "v3",
        "v4",
        "hash",
        "hash",
        "QueueRound",
        "hash",
        "hc5",
        "hash",
        "MixFinal",
        "hash",
        "hash",
        "T1",
        "T2",
        "T3",
        "T4",
        "T5",
        "T6",
        "T1",
        "value1",
        "T2",
        "value2",
        "T3",
        "value3",
        "T4",
        "value4",
        "T5",
        "value5",
        "T6",
        "value6",
        "value1",
        "GetHashCode",
        "value2",
        "GetHashCode",
        "value3",
        "GetHashCode",
        "value4",
        "GetHashCode",
        "value5",
        "GetHashCode",
        "value6",
        "GetHashCode",
        "Initialize",
        "v1",
        "v2",
        "v3",
        "v4",
        "v1",
        "Round",
        "v1",
        "hc1",
        "v2",
        "Round",
        "v2",
        "hc2",
        "v3",
        "Round",
        "v3",
        "hc3",
        "v4",
        "Round",
        "v4",
        "hc4",
        "MixState",
        "v1",
        "v2",
        "v3",
        "v4",
        "hash",
        "hash",
        "QueueRound",
        "hash",
        "hc5",
        "hash",
        "QueueRound",
        "hash",
        "hc6",
        "hash",
        "MixFinal",
        "hash",
        "hash",
        "T1",
        "T2",
        "T3",
        "T4",
        "T5",
        "T6",
        "T7",
        "T1",
        "value1",
        "T2",
        "value2",
        "T3",
        "value3",
        "T4",
        "value4",
        "T5",
        "value5",
        "T6",
        "value6",
        "T7",
        "value7",
        "value1",
        "GetHashCode",
        "value2",
        "GetHashCode",
        "value3",
        "GetHashCode",
        "value4",
        "GetHashCode",
        "value5",
        "GetHashCode",
        "value6",
        "GetHashCode",
        "value7",
        "GetHashCode",
        "Initialize",
        "v1",
        "v2",
        "v3",
        "v4",
        "v1",
        "Round",
        "v1",
        "hc1",
        "v2",
        "Round",
        "v2",
        "hc2",
        "v3",
        "Round",
        "v3",
        "hc3",
        "v4",
        "Round",
        "v4",
        "hc4",
        "MixState",
        "v1",
        "v2",
        "v3",
        "v4",
        "hash",
        "hash",
        "QueueRound",
        "hash",
        "hc5",
        "hash",
        "QueueRound",
        "hash",
        "hc6",
        "hash",
        "QueueRound",
        "hash",
        "hc7",
        "hash",
        "MixFinal",
        "hash",
        "hash",
        "T1",
        "T2",
        "T3",
        "T4",
        "T5",
        "T6",
        "T7",
        "T8",
        "T1",
        "value1",
        "T2",
        "value2",
        "T3",
        "value3",
        "T4",
        "value4",
        "T5",
        "value5",
        "T6",
        "value6",
        "T7",
        "value7",
        "T8",
        "value8",
        "value1",
        "GetHashCode",
        "value2",
        "GetHashCode",
        "value3",
        "GetHashCode",
        "value4",
        "GetHashCode",
        "value5",
        "GetHashCode",
        "value6",
        "GetHashCode",
        "value7",
        "GetHashCode",
        "value8",
        "GetHashCode",
        "Initialize",
        "v1",
        "v2",
        "v3",
        "v4",
        "v1",
        "Round",
        "v1",
        "hc1",
        "v2",
        "Round",
        "v2",
        "hc2",
        "v3",
        "Round",
        "v3",
        "hc3",
        "v4",
        "Round",
        "v4",
        "hc4",
        "v1",
        "Round",
        "v1",
        "hc5",
        "v2",
        "Round",
        "v2",
        "hc6",
        "v3",
        "Round",
        "v3",
        "hc7",
        "v4",
        "Round",
        "v4",
        "hc8",
        "MixState",
        "v1",
        "v2",
        "v3",
        "v4",
        "hash",
        "hash",
        "MixFinal",
        "hash",
        "hash",
        "value",
        "count",
        "value",
        "count",
        "value",
        "count",
        "v1",
        "v2",
        "v3",
        "v4",
        "v1",
        "s_seed",
        "Prime1",
        "Prime2",
        "v2",
        "s_seed",
        "Prime2",
        "v3",
        "s_seed",
        "v4",
        "s_seed",
        "Prime1",
        "hash",
        "input",
        "hash",
        "input",
        "Prime2",
        "hash",
        "Rol",
        "hash",
        "hash",
        "Prime1",
        "hash",
        "hash",
        "queuedValue",
        "hash",
        "queuedValue",
        "Prime3",
        "Rol",
        "hash",
        "Prime4",
        "v1",
        "v2",
        "v3",
        "v4",
        "Rol",
        "v1",
        "Rol",
        "v2",
        "Rol",
        "v3",
        "Rol",
        "v4",
        "s_seed",
        "Prime5",
        "hash",
        "hash",
        "hash",
        "hash",
        "Prime2",
        "hash",
        "hash",
        "hash",
        "Prime3",
        "hash",
        "hash",
        "hash",
        "T",
        "T",
        "value",
        "Add",
        "value",
        "GetHashCode",
        "T",
        "T",
        "value",
        "IEqualityComparer",
        "T",
        "comparer",
        "Add",
        "comparer",
        "comparer",
        "GetHashCode",
        "value",
        "value",
        "GetHashCode",
        "value",
        "value",
        "_length",
        "previousLength",
        "position",
        "_queue1",
        "val",
        "position",
        "_queue2",
        "val",
        "position",
        "_queue3",
        "val",
        "previousLength",
        "Initialize",
        "_v1",
        "_v2",
        "_v3",
        "_v4",
        "_v1",
        "Round",
        "_v1",
        "_queue1",
        "_v2",
        "Round",
        "_v2",
        "_queue2",
        "_v3",
        "Round",
        "_v3",
        "_queue3",
        "_v4",
        "Round",
        "_v4",
        "val",
        "length",
        "length",
        "MixEmptyState",
        "MixState",
        "_v1",
        "_v2",
        "_v3",
        "_v4",
        "hash",
        "length",
        "position",
        "hash",
        "QueueRound",
        "hash",
        "_queue1",
        "position",
        "hash",
        "QueueRound",
        "hash",
        "_queue2",
        "position",
        "hash",
        "QueueRound",
        "hash",
        "_queue3",
        "hash",
        "MixFinal",
        "hash",
        "hash",
        "Obsolete",
        "error",
        "EditorBrowsable",
        "EditorBrowsableState",
        "Never",
        "NotSupportedException",
        "Obsolete",
        "error",
        "EditorBrowsable",
        "EditorBrowsableState",
        "Never",
        "obj",
        "NotSupportedException"
    ],
    "literals": [
        "\"HashCode is a mutable struct and should not be compared with other HashCodes. Use ToHashCode to retrieve the computed hash code.\"",
        "\"GetHasCode not supported\"",
        "\"HashCode is a mutable struct and should not be compared with other HashCodes.\"",
        "\"Equals is not supported\""
    ],
    "variables": [
        "s_seed",
        "Prime1",
        "Prime2",
        "Prime3",
        "Prime4",
        "Prime5",
        "_v1",
        "_v2",
        "_v3",
        "_v4",
        "_queue1",
        "_queue2",
        "_queue3",
        "_length",
        "Random",
        "r",
        "seed",
        "hc1",
        "hash",
        "hc1",
        "hc2",
        "hash",
        "hc1",
        "hc2",
        "hc3",
        "hash",
        "hc1",
        "hc2",
        "hc3",
        "hc4",
        "hash",
        "hc1",
        "hc2",
        "hc3",
        "hc4",
        "hc5",
        "hash",
        "hc1",
        "hc2",
        "hc3",
        "hc4",
        "hc5",
        "hc6",
        "hash",
        "hc1",
        "hc2",
        "hc3",
        "hc4",
        "hc5",
        "hc6",
        "hc7",
        "hash",
        "hc1",
        "hc2",
        "hc3",
        "hc4",
        "hc5",
        "hc6",
        "hc7",
        "hc8",
        "hash",
        "val",
        "previousLength",
        "position",
        "length",
        "_length",
        "position",
        "hash"
    ],
    "comments": [
        "The contents of this file is taken from https://github.com/dotnet/coreclr/blob/master/src/mscorlib/shared/System/HashCode.cs",
        "To be replaced by the framework implementation when released for the appropriate builds",
        "Licensed to the .NET Foundation under one or more agreements.",
        "The .NET Foundation licenses this file to you under the MIT license.",
        "See the LICENSE file in the project root for more information.",
        "The xxHash32 implementation is based on the code published by Yann Collet:\n    https://raw.githubusercontent.com/Cyan4973/xxHash/5c174cfa4e45a42f94082dc0d4539b39696afea1/xxhash.c\n\n      xxHash - Fast Hash algorithm\n      Copyright (C) 2012-2016, Yann Collet\n\n      BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)\n\n      Redistribution and use in source and binary forms, with or without\n      modification, are permitted provided that the following conditions are\n      met:\n\n      * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n      * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following disclaimer\n      in the documentation and/or other materials provided with the\n      distribution.\n\n      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n      \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n      A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n      You can contact the author at :\n      - xxHash homepage: http://www.xxhash.com\n      - xxHash source repository : https://github.com/Cyan4973/xxHash",
        "xxHash32 is used for the hash code.",
        "https://github.com/Cyan4973/xxHash",
        "Generates a hashcode",
        "</summary>",
        "NOTE: Modified from original unsafe implementation. Might be better to use a more random seed.",
        "Provide a way of diffusing bits from something with a limited",
        "input hash space. For example, many enums only have a few",
        "possible hashes, only using the bottom few bits of the code. Some",
        "collections are built on the assumption that hashes are spread",
        "over a larger space, so diffusing the bits may help the",
        "collection work more efficiently.",
        "[MethodImpl(MethodImplOptions.AggressiveInlining)]",
        "[MethodImpl(MethodImplOptions.AggressiveInlining)]",
        "[MethodImpl(MethodImplOptions.AggressiveInlining)]",
        "[MethodImpl(MethodImplOptions.AggressiveInlining)]",
        "[MethodImpl(MethodImplOptions.AggressiveInlining)]",
        "[MethodImpl(MethodImplOptions.AggressiveInlining)]",
        "The original xxHash works as follows:",
        "0. Initialize immediately. We can't do this in a struct (no",
        "default ctor).",
        "1. Accumulate blocks of length 16 (4 uints) into 4 accumulators.",
        "2. Accumulate remaining blocks of length 4 (1 uint) into the",
        "hash.",
        "3. Accumulate remaining blocks of length 1 into the hash.",
        "There is no need for #3 as this type only accepts ints. _queue1,",
        "_queue2 and _queue3 are basically a buffer so that when",
        "ToHashCode is called we can execute #2 correctly.",
        "We need to initialize the xxHash32 state (_v1 to _v4) lazily (see",
        "#0) nd the last place that can be done if you look at the",
        "original code is just before the first block of 16 bytes is mixed",
        "in. The xxHash32 state is never used for streams containing fewer",
        "than 16 bytes.",
        "To see what's really going on here, have a look at the Combine",
        "methods.",
        "Storing the value of _length locally shaves of quite a few bytes",
        "in the resulting machine code.",
        "Switch can't be inlined.",
        "position == 3",
        "Storing the value of _length locally shaves of quite a few bytes",
        "in the resulting machine code.",
        "position refers to the *next* queue position in this method, so",
        "position == 1 means that _queue1 is populated; _queue2 would have",
        "been populated on the next call to Add.",
        "If the length is less than 4, _v1 to _v4 don't contain anything",
        "yet. xxHash32 treats this differently.",
        "_length is incremented once per Add(Int32) and is therefore 4",
        "times too small (xxHash length is in bytes, not ints).",
        "Mix what remains in the queue",
        "Switch can't be inlined right now, so use as few branches as",
        "possible by manually excluding impossible scenarios (position > 1",
        "is always false if position is not > 0).",
        "Obsolete member 'memberA' overrides non-obsolete member 'memberB'.",
        "Disallowing GetHashCode and Equals is by design",
        "as this would be weird, both naming-wise as well as from a",
        "behavioral standpoint (GetHashCode() should return the object's",
        "hash code, not the one being computed).",
        "this implementation, it is not part of the contract. If the",
        "implementation has to change in the future we don't want to worry",
        "about people who might have incorrectly used this type."
    ],
    "docstrings": [
        "<summary>",
        "* We decided to not override GetHashCode() to produce the hash code",
        "* Even though ToHashCode() can be called safely multiple times on"
    ],
    "functions": [
        "GenerateGlobalSeed",
        "Combine",
        "Combine",
        "Combine",
        "Combine",
        "Combine",
        "Combine",
        "Combine",
        "Combine",
        "Rol",
        "Initialize",
        "Round",
        "QueueRound",
        "MixState",
        "MixEmptyState",
        "MixFinal",
        "Add",
        "Add",
        "Add",
        "ToHashCode",
        "GetHashCode",
        "Equals"
    ],
    "classes": []
}