{
    "identifiers": [
        "size",
        "size",
        "_",
        "size",
        "_",
        "size",
        "_",
        "size",
        "_",
        "size",
        "graph",
        "k",
        "v",
        "graph",
        "items",
        "sk",
        "sv",
        "v",
        "items",
        "distance",
        "k",
        "sk",
        "sv",
        "discovered",
        "k",
        "sk",
        "k",
        "i",
        "size",
        "distance",
        "i",
        "graph",
        "populate",
        "graph",
        "discovered",
        "distance",
        "k",
        "size",
        "i",
        "size",
        "j",
        "size",
        "distance",
        "i",
        "j",
        "distance",
        "i",
        "k",
        "distance",
        "k",
        "j",
        "distance",
        "i",
        "distance",
        "i",
        "k",
        "distance",
        "k",
        "j",
        "discovered",
        "i",
        "discovered",
        "k",
        "j",
        "discovered",
        "distance",
        "i",
        "size",
        "distance",
        "i",
        "i",
        "FloydWarshal",
        "len",
        "graph",
        "fw",
        "floyd_warshal",
        "graph"
    ],
    "literals": [
        "'inf'",
        "''",
        "\"There is a negative weight cycle\"",
        "'__main__'",
        "'0'",
        "'1'",
        "'2'",
        "'3'",
        "'1'",
        "'2'",
        "'2'",
        "'3'",
        "'3'",
        "'0'"
    ],
    "variables": [
        "size",
        "distance",
        "discovered",
        "i",
        "j",
        "j",
        "graph",
        "fw"
    ],
    "comments": [
        "TODO: This is important!!"
    ],
    "docstrings": [
        "\"\"\"\n    Goal, to find shortest path for all pair of vertices and\n    to find if there is a negative weight cycle (which also\n    means this algorithm can work with negative weight edges)\n    \"\"\"",
        "\"\"\"\n        Note: distances are inf and discovered is None\n        \"\"\"",
        "\"\"\"\n        Initiate distance and discovered for directly\n        connected vertices\n\n        Note: You also need to set discovered[i][i] to 0,\n        i.e. distance from vertex i to vertex i is 0\n        \"\"\"",
        "\"\"\"\n        Its all about finding a path from i to j through k.\n        If there is such a distance (that is less then the current\n        distance from i to j) then update that distance.\n\n        As for the discovered matrix, If there is a shorter path from\n        i to j via k then update the path from i to j to path from k to j\n        (basically saying you discovered a path from i to j via k)\n\n        To check for negative weight cycle, check for the diagonal values\n        in the distance matrix, if any of the values is negative then\n        there is a negative weight cycle\n\n        NOTE: The ordering of the for loops (its:  k, i, j)\n        \"\"\""
    ],
    "functions": [
        "populate",
        "floyd_warshal"
    ],
    "classes": [
        "FloydWarshal"
    ]
}