{
    "identifiers": [
        "print_function",
        "ansible",
        "module_utils",
        "basic",
        "AnsibleModule",
        "pyVim",
        "connect",
        "SmartConnect",
        "Disconnect",
        "pyVmomi",
        "vim",
        "ssl",
        "atexit",
        "content",
        "vimtype",
        "name",
        "content",
        "viewManager",
        "CreateContainerView",
        "content",
        "rootFolder",
        "vimtype",
        "c",
        "container",
        "view",
        "name",
        "c",
        "name",
        "name",
        "c",
        "c",
        "obj",
        "task",
        "task",
        "info",
        "state",
        "task",
        "info",
        "state",
        "task",
        "info",
        "error",
        "msg",
        "content",
        "source_vm",
        "dest_vm_name",
        "custom_specs",
        "si",
        "vmware_hosts_cluster",
        "source_vm",
        "parent",
        "get_obj",
        "content",
        "vim",
        "Datastore",
        "source_vm",
        "datastore",
        "info",
        "name",
        "get_obj",
        "content",
        "vim",
        "ClusterComputeResource",
        "vmware_hosts_cluster",
        "cluster",
        "resourcePool",
        "si",
        "content",
        "customizationSpecManager",
        "GetCustomizationSpec",
        "name",
        "custom_specs",
        "vim",
        "vm",
        "RelocateSpec",
        "datastore",
        "resource_pool",
        "vim",
        "vm",
        "CloneSpec",
        "relospec",
        "guest_customization_spec",
        "spec",
        "source_vm",
        "Clone",
        "folder",
        "destfolder",
        "name",
        "dest_vm_name",
        "spec",
        "clonespec",
        "wait_for_task",
        "task",
        "AnsibleModule",
        "argument_spec",
        "fields",
        "hasattr",
        "ssl",
        "ssl",
        "_create_unverified_context",
        "SmartConnect",
        "host",
        "ansiblemodule",
        "user",
        "ansiblemodule",
        "pwd",
        "ansiblemodule",
        "port",
        "ansiblemodule",
        "sslContext",
        "context",
        "si",
        "ansiblemodule",
        "fail_json",
        "msg",
        "atexit",
        "register",
        "Disconnect",
        "si",
        "si",
        "RetrieveContent",
        "get_obj",
        "content",
        "vim",
        "VirtualMachine",
        "ansiblemodule",
        "source_vm",
        "clone_vm",
        "content",
        "content",
        "source_vm",
        "source_vm",
        "dest_vm_name",
        "ansiblemodule",
        "custom_specs",
        "ansiblemodule",
        "si",
        "si",
        "vmware_hosts_cluster",
        "ansiblemodule",
        "result",
        "ansiblemodule",
        "exit_json",
        "changed",
        "msg",
        "ansiblemodule",
        "fail_json",
        "msg",
        "result",
        "ansiblemodule",
        "fail_json",
        "msg",
        "Disconnect",
        "si",
        "main"
    ],
    "literals": [
        "'success'",
        "'task_done'",
        "'error'",
        "''",
        "'error'",
        "'task_done'",
        "'error'",
        "'There was an error when creating the VM: %s'",
        "\"vmware_host\"",
        "\"required\"",
        "\"type\"",
        "\"str\"",
        "\"vmware_user\"",
        "\"required\"",
        "\"type\"",
        "\"str\"",
        "\"vmware_pwd\"",
        "\"required\"",
        "\"type\"",
        "\"str\"",
        "\"vmware_port\"",
        "\"required\"",
        "\"type\"",
        "\"str\"",
        "\"vmware_hosts_cluster\"",
        "\"required\"",
        "\"type\"",
        "\"str\"",
        "\"vmware_source_vm\"",
        "\"required\"",
        "\"type\"",
        "\"str\"",
        "\"vmware_dest_vm\"",
        "\"required\"",
        "\"type\"",
        "\"str\"",
        "'_create_unverified_context'",
        "'vmware_host'",
        "'vmware_user'",
        "'vmware_pwd'",
        "'vmware_port'",
        "\"Could not connect to the specified host using specified username and password\"",
        "'vmware_source_vm'",
        "'vmware_dest_vm'",
        "'vmware_dest_vm'",
        "'vmware_hosts_cluster'",
        "'task_done'",
        "\"The new VM has been created\"",
        "'error'",
        "\"Source VM not found!\"",
        "\"__main__\""
    ],
    "variables": [
        "obj",
        "container",
        "obj",
        "obj",
        "destfolder",
        "datastore",
        "cluster",
        "resource_pool",
        "guest_customization_spec",
        "relospec",
        "relospec",
        "datastore",
        "relospec",
        "pool",
        "clonespec",
        "clonespec",
        "location",
        "clonespec",
        "powerOn",
        "clonespec",
        "customization",
        "task",
        "fields",
        "ansiblemodule",
        "context",
        "context",
        "si",
        "content",
        "source_vm",
        "result"
    ],
    "comments": [
        "!/usr/bin/env python",
        "get info about the path/folder of the current vm",
        "get info about the datastore of the current vm",
        "get info about the host and cluster of the current vm",
        "This gets the MOID of the Guest Customization Spec that is saved in the vCenter DB",
        "now we have all the info of the current vm and we'll go and clone it",
        "Sending order to clone to VCenter...",
        "Waiting for VM to be cloned...",
        "first we get the params from Ansible playbook",
        "no we connect to Vmware with the info we received",
        "now we get info of the current vm we want to clone from",
        "and finally we create the vm if we found the info for the current one",
        "Start program"
    ],
    "docstrings": [
        "\"\"\"\nPython program for cloning a vm on an ESX / vCenter host\n\"\"\"",
        "\"\"\"\n    Return an object (vm, for example) by name, if name is None the\n    first found object is returned\n    \"\"\"",
        "\"\"\" wait for a vCenter task to finish \"\"\"",
        "\"\"\"\n    Clone a VM from another vm, specifying which source_vm to use.\n    \"custom_specs\" refers to a template with predefined hardware specs we want to use for the new vm\n    \"si\" is the connection handler to Vmware\n    \"\"\"",
        "\"\"\"\n    Simple program for cloning a virtual machine.\n    \"\"\""
    ],
    "functions": [
        "get_obj",
        "wait_for_task",
        "clone_vm",
        "main"
    ],
    "classes": []
}