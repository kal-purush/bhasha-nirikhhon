{
    "identifiers": [
        "f",
        "f",
        "f",
        "f_name",
        "hex",
        "unpack",
        "a",
        "hex",
        "unpack",
        "a",
        "hex",
        "unpack",
        "a",
        "hex",
        "unpack",
        "a",
        "hex",
        "unpack",
        "a",
        "hex",
        "unpack",
        "a",
        "hex",
        "unpack",
        "a",
        "f",
        "open",
        "f",
        "read",
        "f",
        "files",
        "i",
        "read_files",
        "thread_info_process",
        "i"
    ],
    "literals": [
        "\"thread_info: 0x\"",
        "\"task_struct: \"",
        "\"<I\"",
        "\"exec_domain: \"",
        "\"<I\"",
        "\"flags: \"",
        "\"<I\"",
        "\"status: \"",
        "\"<I\"",
        "\"cpu: \"",
        "\"<I\"",
        "\"preempt_count: \"",
        "\"<L\"",
        "\"addr_limit: \"",
        "\"<L\"",
        "\"file1ab1000\"",
        "\"file376c2000\"",
        "\"file3752d000\"",
        "\"file37716000\"",
        "\"file375af000\"",
        "\"file3772f000\"",
        "\"file375c8000\"",
        "\"file1ab1000\"",
        "'>'",
        "'c'",
        "\"rb\"",
        "\"-------------------------\""
    ],
    "variables": [
        "f_name",
        "a",
        "files",
        "parse",
        "read_files"
    ],
    "comments": [
        "Format\tC Type\tPython type\tStandard size\tNotes",
        "x\tpad byte\tno value",
        "c\tchar\tstring of length 1\t1",
        "b\tsigned char\tinteger\t1\t(3)",
        "B\tunsigned char\tinteger\t1\t(3)",
        "?\t_Bool\tbool\t1\t(1)",
        "h\tshort\tinteger\t2\t(3)",
        "H\tunsigned short\tinteger\t2\t(3)",
        "i\tint\tinteger\t4\t(3)",
        "I\tunsigned int\tinteger\t4\t(3)",
        "l\tlong\tinteger\t4\t(3)",
        "L\tunsigned long\tinteger\t4\t(3)",
        "q\tlong long\tinteger\t8\t(2), (3)",
        "Q\tunsigned long long\tinteger\t8\t(2), (3)",
        "f\tfloat\tfloat\t4\t(4)",
        "d\tdouble\tfloat\t8\t(4)",
        "s\tchar[]\tstring",
        "p\tchar[]\tstring",
        "P\tvoid *\tinteger\t \t(5), (3)",
        "print(z)",
        "a = open(\"file1ab1000\",\"rb\").read()",
        "struct task_info {",
        "int task_offset;\t\t\t/**< Offset of task_struct in the thread_info struct. */",
        "#ifdef CPU_DEFS_H",
        "/* included from qemu code */",
        "/** The address of the `task_struct` of `init`. Can be used to traverse the `task_struct` list. */",
        "target_ulong init_addr;",
        "#else",
        "/* used to compile the kernelinfo module */",
        "/** The address of the `task_struct` of `init`. Can be used to traverse the `task_struct` list. */",
        "void *init_addr;",
        "#endif",
        "size_t size;\t\t\t\t/**< Size of `struct task_struct`. */",
        "int tasks_offset;\t\t\t/**< TODO: add documentation for the rest of the struct members */",
        "int pid_offset;",
        "int tgid_offset;",
        "int group_leader_offset;",
        "int thread_group_offset;",
        "int real_parent_offset;",
        "int parent_offset;",
        "int mm_offset;",
        "int stack_offset;",
        "int real_cred_offset;",
        "int cred_offset;",
        "int comm_offset;\t\t\t/**< Offset of the command name in `struct task_struct`. */",
        "size_t comm_size;\t\t\t/**< Size of the command name. */",
        "int files_offset;\t\t\t/**< Offset for open files information. */",
        "};",
        "size_t = \"I\"",
        "int_t = \"I\"",
        "void_p = \"P\"",
        "task_info = int_t+int_t+void_p+size_t+(int_t*12)+size_t+size_t",
        "cred_into = int_t*4",
        "mm_info = int_t*6",
        "vma_info = int_t*6",
        "fs_info = int_t*12",
        "print(len(a))",
        "# 7840",
        "print(hex(ord(a[7839])))",
        "print(hex(ord(a[7840])))",
        "for i in read_files:",
        "print(, )",
        "z = unpack(parse, a[0:len(a)])",
        "# print(z)",
        "for i,j in zip(z,range(8192)):",
        "print(j,hex(ord(i)))",
        "for i in z:",
        "if i == 560:",
        "print(i)"
    ],
    "docstrings": [],
    "functions": [
        "thread_info_process"
    ],
    "classes": []
}