{
    "identifiers": [
        "facedetection",
        "org",
        "opencv",
        "core",
        "Mat",
        "org",
        "opencv",
        "core",
        "MatOfRect",
        "org",
        "opencv",
        "core",
        "Rect",
        "org",
        "opencv",
        "core",
        "Size",
        "org",
        "opencv",
        "imgproc",
        "Imgproc",
        "org",
        "opencv",
        "objdetect",
        "CascadeClassifier",
        "org",
        "opencv",
        "objdetect",
        "Objdetect",
        "java",
        "util",
        "lbpClassifier",
        "haarClassifier",
        "faceCascade",
        "faceCascade",
        "lbpClassifier",
        "haarClassifier",
        "faceCascade",
        "load",
        "frame",
        "grayFrame",
        "Imgproc",
        "cvtColor",
        "frame",
        "grayFrame",
        "Imgproc",
        "COLOR_BGR2GRAY",
        "Imgproc",
        "equalizeHist",
        "grayFrame",
        "grayFrame",
        "minSize",
        "height",
        "grayFrame",
        "rows",
        "round",
        "height",
        "minSize",
        "round",
        "height",
        "detectedFacesRectangulars",
        "faceCascade",
        "detectMultiScale",
        "grayFrame",
        "detectedFacesRectangulars",
        "Objdetect",
        "CASCADE_DO_CANNY_PRUNING",
        "minSize",
        "minSize",
        "grayFrame",
        "size",
        "detectedFacesRectangulars",
        "toList"
    ],
    "literals": [
        "\"data/haarcascades/haarcascade_frontalface_alt2.xml\""
    ],
    "variables": [
        "faceCascade"
    ],
    "comments": [
        "2,5,7",
        "this.faceCascade.load(\"data/lbpcascades/lbpcascade_frontalface.xml\");",
        "not much",
        "this.faceCascade.load(\"data/lbpcascades/lbpcascade_profileface.xml\");",
        "2",
        "this.faceCascade.load(\"data/haarcascades/haarcascade_profileface.xml\");",
        "1,2,5,7",
        "this.faceCascade.load(\"data/haarcascades/haarcascade_frontalface_extended.xml\");",
        "this.faceCascade.load(\"data/haarcascades/haarcascade_frontalface_default.xml\");",
        "1,2,5,7",
        "this.faceCascade.load(\"data/haarcascades/haarcascade_frontalface_alt.xml\");",
        "2,5",
        "this.faceCascade.load(\"data/haarcascades/haarcascade_frontalface_alt_tree.xml\");",
        "1,2,5,7",
        "equalize the frame histogram to improve the result",
        "compute minimum face size (20% of the frame height, in our case)"
    ],
    "docstrings": [
        "* Detect faces.",
        "* Detects faces on the input and returns a list of rectangulars around each detected face."
    ],
    "functions": [
        "FaceDetector",
        "detectFace"
    ],
    "classes": [
        "FaceDetector"
    ]
}