{
    "identifiers": [
        "uni",
        "bielefeld",
        "cmg",
        "reflexiv",
        "io",
        "scala",
        "Tuple2",
        "scala",
        "Tuple4",
        "uni",
        "bielefeld",
        "cmg",
        "reflexiv",
        "util",
        "DefaultParam",
        "uni",
        "bielefeld",
        "cmg",
        "reflexiv",
        "util",
        "InfoDumper",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "java",
        "io",
        "Serializable",
        "java",
        "util",
        "java",
        "util",
        "param",
        "contigIDTable",
        "reflexivContigList",
        "totalNum",
        "name",
        "contigId",
        "seq",
        "seqBuilder",
        "info",
        "param",
        "param",
        "param",
        "fasta",
        "line",
        "line",
        "fasta",
        "readLine",
        "line",
        "startsWith",
        "info",
        "readMessage",
        "info",
        "screenDump",
        "name",
        "line",
        "substring",
        "contigId",
        "totalNum",
        "info",
        "readMessage",
        "info",
        "screenDump",
        "exit",
        "e",
        "e",
        "printStackTrace",
        "fasta",
        "line",
        "line",
        "fasta",
        "readLine",
        "line",
        "startsWith",
        "contigIDTable",
        "put",
        "contigId",
        "name",
        "seq",
        "seqBuilder",
        "toString",
        "seq",
        "length",
        "param",
        "kmerSize",
        "info",
        "readMessage",
        "name",
        "info",
        "screenDump",
        "subKmerSuffixBinary",
        "getBinaryReflexivKmer",
        "seq",
        "contigId",
        "reflexivContigList",
        "add",
        "subKmerSuffixBinary",
        "seqBuilder",
        "contigId",
        "totalNum",
        "name",
        "line",
        "substring",
        "seqBuilder",
        "append",
        "line",
        "e",
        "e",
        "printStackTrace",
        "contigIDTable",
        "put",
        "contigId",
        "name",
        "seq",
        "seqBuilder",
        "toString",
        "seq",
        "length",
        "param",
        "kmerSize",
        "info",
        "readMessage",
        "name",
        "info",
        "screenDump",
        "subKmerSuffixBinary",
        "getBinaryReflexivKmer",
        "seq",
        "contigId",
        "reflexivContigList",
        "add",
        "subKmerSuffixBinary",
        "contig",
        "Id",
        "length",
        "contig",
        "length",
        "suffixLength",
        "length",
        "param",
        "subKmerSize",
        "suffixBlockSize",
        "suffixLength",
        "firstSuffixLength",
        "suffixLength",
        "suffixLongArray",
        "suffixBlockSize",
        "i",
        "i",
        "suffixBlockSize",
        "i",
        "suffixLongArray",
        "i",
        "subKmer",
        "nucleotides",
        "contig",
        "toCharArray",
        "i",
        "i",
        "param",
        "subKmerSize",
        "i",
        "nucleotideBinary",
        "nucleotideValue",
        "nucleotides",
        "i",
        "subKmer",
        "nucleotideBinary",
        "param",
        "subKmerSize",
        "i",
        "i",
        "length",
        "i",
        "firstSuffixLength",
        "param",
        "subKmerSize",
        "i",
        "nucleotideBinary",
        "nucleotideValue",
        "nucleotides",
        "i",
        "suffixLongArray",
        "i",
        "firstSuffixLength",
        "param",
        "subKmerSize",
        "nucleotideBinary",
        "length",
        "i",
        "i",
        "firstSuffixLength",
        "param",
        "subKmerSize",
        "i",
        "param",
        "subKmerSize",
        "i",
        "nucleotideBinary",
        "nucleotideValue",
        "nucleotides",
        "i",
        "suffixLongArray",
        "nucleotideBinary",
        "firstSuffixLength",
        "param",
        "subKmerSize",
        "i",
        "suffixLongArray",
        "firstSuffixLength",
        "subKmer",
        "suffixLongArray",
        "Id",
        "Id",
        "a",
        "value",
        "a",
        "a",
        "value",
        "a",
        "a",
        "value",
        "a",
        "a",
        "value",
        "value",
        "value",
        "inputFaPath",
        "refReader",
        "refReader",
        "bufferInputFile",
        "inputFaPath",
        "fasta",
        "refReader",
        "getFastaBufferedReader",
        "loadFirstLine",
        "fasta",
        "loadContig",
        "fasta",
        "fasta",
        "close",
        "e",
        "e",
        "printStackTrace",
        "logLastContig",
        "reflexivContigList"
    ],
    "literals": [
        "\"\"",
        "\">\"",
        "\"Input reference file is not fasta format\"",
        "\"Input reference file empty!\"",
        "\">\"",
        "\"Contig : \"",
        "\"is shorter than a Kmer, skip it.\"",
        "\"Contig : \"",
        "\"is shorter than a Kmer, skip it.\""
    ],
    "variables": [
        "param",
        "totalNum",
        "name",
        "line",
        "line",
        "value"
    ],
    "comments": [
        "first time encounter a \">\"",
        "String[] head = line.split(\"\\\\s+\");",
        "contigIDTable.put(0, name);",
        "contigId++;",
        "totalNum++;",
        "2nd and so on",
        "first block",
        "add C marker",
        "T t N"
    ],
    "docstrings": [
        "* Created by Liren Huang on 18.12.17.\n *\n *      Reflexiv\n *\n * Copyright (c) 2015-2015\n * Liren Huang      <huanglr at cebitec.uni-bielefeld.de>\n *\n * SparkHit is free software: you can redistribute it and/or modify it\n * under the terms of the GNU General Public License as published by the Free\n * Software Foundation, either version 3 of the License, or (at your option)\n * any later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; Without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n * more detail.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program. If not, see <http://www.gnu.org/licenses>.",
        "info dumper",
        "* This method sets all correspond parameters for reference\n     * data structure construction.\n     *\n     * @param param {@link DefaultParam}.",
        "* This method loads the first line of a fasta file.\n     *\n     * @param fasta {@link BufferedReader}.",
        "* This method loads the all contigs from a reference genome.\n     *\n     * @param fasta {@link BufferedReader}.",
        "these are information of former contig",
        "*",
        "* This method load the genome sequences from the input reference file.\n     *\n     * @param inputFaPath the full path of the input file for reference genomes."
    ],
    "functions": [
        "setParameter",
        "loadFirstLine",
        "loadContig",
        "logLastContig",
        "getBinaryReflexivKmer",
        "nucleotideValue",
        "loadRef",
        "getReflexivContigList"
    ],
    "classes": [
        "ContigReader"
    ]
}