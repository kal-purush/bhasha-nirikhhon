{
    "identifiers": [
        "Collections",
        "DataStructures",
        "BitArray",
        "IComparable",
        "ICloneable",
        "IEnumerator",
        "N",
        "N",
        "field",
        "N",
        "i",
        "N",
        "i",
        "field",
        "i",
        "sequence",
        "sequence",
        "Length",
        "Match",
        "sequence",
        "field",
        "sequence",
        "Length",
        "Compile",
        "sequence",
        "bits",
        "field",
        "bits",
        "sequence",
        "sequence",
        "sequence",
        "Trim",
        "sequence",
        "Length",
        "field",
        "Length",
        "Match",
        "sequence",
        "sequence",
        "Length",
        "field",
        "Length",
        "difference",
        "field",
        "Length",
        "sequence",
        "Length",
        "i",
        "difference",
        "i",
        "tmp",
        "tmp",
        "sequence",
        "sequence",
        "tmp",
        "i",
        "sequence",
        "Length",
        "i",
        "sequence",
        "i",
        "field",
        "i",
        "field",
        "i",
        "number",
        "number",
        "binaryNumber",
        "Convert",
        "ToString",
        "number",
        "binaryNumber",
        "Length",
        "field",
        "Length",
        "binaryNumber",
        "Length",
        "field",
        "Length",
        "difference",
        "field",
        "Length",
        "binaryNumber",
        "Length",
        "i",
        "difference",
        "i",
        "tmp",
        "tmp",
        "binaryNumber",
        "binaryNumber",
        "tmp",
        "i",
        "binaryNumber",
        "Length",
        "i",
        "binaryNumber",
        "i",
        "field",
        "i",
        "field",
        "i",
        "number",
        "number",
        "binaryNumber",
        "Convert",
        "ToString",
        "number",
        "binaryNumber",
        "Length",
        "field",
        "Length",
        "binaryNumber",
        "Length",
        "field",
        "Length",
        "difference",
        "field",
        "Length",
        "binaryNumber",
        "Length",
        "i",
        "difference",
        "i",
        "tmp",
        "tmp",
        "binaryNumber",
        "binaryNumber",
        "tmp",
        "i",
        "binaryNumber",
        "Length",
        "i",
        "binaryNumber",
        "i",
        "field",
        "i",
        "field",
        "i",
        "i",
        "field",
        "Length",
        "i",
        "field",
        "i",
        "ans",
        "ans",
        "ans",
        "field",
        "Length",
        "BitArray",
        "BitArray",
        "one",
        "BitArray",
        "two",
        "one",
        "ToString",
        "two",
        "ToString",
        "one",
        "Length",
        "two",
        "Length",
        "one",
        "Length",
        "two",
        "Length",
        "difference",
        "one",
        "Length",
        "two",
        "Length",
        "i",
        "difference",
        "i",
        "tmp",
        "tmp",
        "two",
        "ToString",
        "sequence2",
        "tmp",
        "difference",
        "two",
        "Length",
        "one",
        "Length",
        "i",
        "difference",
        "i",
        "tmp",
        "tmp",
        "one",
        "ToString",
        "sequence1",
        "tmp",
        "ans",
        "BitArray",
        "one",
        "Length",
        "i",
        "one",
        "Length",
        "i",
        "sequence1",
        "i",
        "result",
        "sequence2",
        "i",
        "result",
        "result",
        "result",
        "result",
        "Trim",
        "ans",
        "Compile",
        "result",
        "ans",
        "BitArray",
        "BitArray",
        "one",
        "BitArray",
        "two",
        "one",
        "ToString",
        "two",
        "ToString",
        "one",
        "Length",
        "two",
        "Length",
        "one",
        "Length",
        "two",
        "Length",
        "difference",
        "one",
        "Length",
        "two",
        "Length",
        "i",
        "difference",
        "i",
        "tmp",
        "tmp",
        "two",
        "ToString",
        "sequence2",
        "tmp",
        "difference",
        "two",
        "Length",
        "one",
        "Length",
        "i",
        "difference",
        "i",
        "tmp",
        "tmp",
        "one",
        "ToString",
        "sequence1",
        "tmp",
        "ans",
        "BitArray",
        "one",
        "Length",
        "i",
        "one",
        "Length",
        "i",
        "sequence1",
        "i",
        "sequence2",
        "i",
        "result",
        "result",
        "result",
        "result",
        "result",
        "Trim",
        "ans",
        "Compile",
        "result",
        "ans",
        "BitArray",
        "BitArray",
        "one",
        "BitArray",
        "one",
        "Length",
        "one",
        "ToString",
        "ch",
        "sequence",
        "ch",
        "result",
        "result",
        "result",
        "result",
        "Trim",
        "ans",
        "Compile",
        "result",
        "ans",
        "BitArray",
        "BitArray",
        "other",
        "n",
        "BitArray",
        "other",
        "Length",
        "n",
        "i",
        "other",
        "Length",
        "i",
        "ans",
        "i",
        "other",
        "i",
        "ans",
        "BitArray",
        "BitArray",
        "one",
        "BitArray",
        "two",
        "one",
        "ToString",
        "two",
        "ToString",
        "one",
        "Length",
        "two",
        "Length",
        "one",
        "Length",
        "two",
        "Length",
        "difference",
        "one",
        "Length",
        "two",
        "Length",
        "i",
        "difference",
        "i",
        "tmp",
        "tmp",
        "two",
        "ToString",
        "sequence2",
        "tmp",
        "difference",
        "two",
        "Length",
        "one",
        "Length",
        "i",
        "difference",
        "i",
        "tmp",
        "tmp",
        "one",
        "ToString",
        "sequence1",
        "tmp",
        "ans",
        "BitArray",
        "one",
        "Length",
        "i",
        "one",
        "Length",
        "i",
        "sequence1",
        "i",
        "sequence2",
        "i",
        "result",
        "result",
        "sequence2",
        "i",
        "result",
        "result",
        "result",
        "result",
        "Trim",
        "ans",
        "Compile",
        "result",
        "ans",
        "BitArray",
        "BitArray",
        "other",
        "n",
        "BitArray",
        "other",
        "Length",
        "n",
        "i",
        "other",
        "Length",
        "n",
        "i",
        "ans",
        "i",
        "other",
        "i",
        "ans",
        "BitArray",
        "one",
        "BitArray",
        "two",
        "one",
        "Length",
        "two",
        "Length",
        "i",
        "one",
        "Length",
        "i",
        "one",
        "i",
        "two",
        "i",
        "status",
        "status",
        "BitArray",
        "one",
        "BitArray",
        "two",
        "one",
        "two",
        "offset",
        "field",
        "offset",
        "field",
        "offset",
        "value",
        "bit",
        "field",
        "bit",
        "counter",
        "counter",
        "bit",
        "field",
        "bit",
        "counter",
        "counter",
        "NumberOfOneBits",
        "NumberOfOneBits",
        "field",
        "Length",
        "ToString",
        "Convert",
        "ToInt64",
        "sequence",
        "field",
        "Length",
        "ToString",
        "Convert",
        "ToInt32",
        "sequence",
        "i",
        "field",
        "Length",
        "i",
        "field",
        "i",
        "flag",
        "i",
        "field",
        "Length",
        "i",
        "field",
        "i",
        "flag",
        "other",
        "ToInt64",
        "BitArray",
        "other",
        "otherBitArray",
        "ToInt64",
        "valueThis",
        "valueOther",
        "status",
        "valueOther",
        "valueThis",
        "status",
        "status",
        "other",
        "BitArray",
        "other",
        "Length",
        "otherBitArray",
        "Length",
        "i",
        "Length",
        "i",
        "field",
        "i",
        "otherBitArray",
        "i",
        "status",
        "status",
        "ToInt32",
        "BitArray",
        "Length",
        "i",
        "Length",
        "i",
        "theClone",
        "i",
        "field",
        "i",
        "theClone",
        "field",
        "position",
        "IndexOutOfRangeException",
        "InvalidOperationException",
        "position",
        "field",
        "Length",
        "position",
        "position",
        "sequence",
        "ch",
        "sequence",
        "ch",
        "ch",
        "status",
        "status"
    ],
    "literals": [
        "\"BitArray: N must been greater or equal to 1\"",
        "\"BitArray: the sequence may only \"",
        "\"be allowed contains onese or zeros.\"",
        "\"BitArray: sequence must been greater or equal as 1\"",
        "\"\"",
        "\"Compile: the sequence may only \"",
        "\"be allowed contains onese or zeros.\"",
        "\"Compile: not equal length!\"",
        "\"\"",
        "\"\"",
        "\"Compile: not apt length!\"",
        "\"Compile: only positive numbers > 0\"",
        "\"\"",
        "\"\"",
        "\"Compile: not apt length!\"",
        "\"Compile: only positive numbers > 0\"",
        "\"\"",
        "\"1\"",
        "\"0\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"== : inputs haven't same length!\"",
        "\"ToInt: field is too long.\"",
        "\"ToInt: field is too long.\"",
        "\"== : inputs haven't same length!\""
    ],
    "variables": [
        "field",
        "position",
        "i",
        "difference",
        "tmp",
        "i",
        "i",
        "difference",
        "binaryNumber",
        "tmp",
        "i",
        "i",
        "difference",
        "binaryNumber",
        "tmp",
        "i",
        "i",
        "ans",
        "i",
        "Length",
        "sequence1",
        "sequence2",
        "result",
        "BitArray",
        "ans",
        "difference",
        "tmp",
        "i",
        "i",
        "i",
        "sequence1",
        "sequence2",
        "result",
        "BitArray",
        "ans",
        "difference",
        "tmp",
        "i",
        "i",
        "i",
        "BitArray",
        "ans",
        "sequence",
        "result",
        "BitArray",
        "ans",
        "i",
        "sequence1",
        "sequence2",
        "result",
        "BitArray",
        "ans",
        "difference",
        "tmp",
        "i",
        "i",
        "i",
        "BitArray",
        "ans",
        "i",
        "status",
        "i",
        "counter",
        "counter",
        "sequence",
        "sequence",
        "i",
        "i",
        "status",
        "valueThis",
        "BitArray",
        "otherBitArray",
        "valueOther",
        "status",
        "BitArray",
        "otherBitArray",
        "i",
        "BitArray",
        "theClone",
        "i",
        "Current",
        "status"
    ],
    "comments": [
        "the actual bit-field",
        "position for enumerator",
        "fills up the field with zero-bits.",
        "error case",
        "precondition I",
        "precondition II",
        "error case II",
        "error case I",
        "precondition I",
        "precondition II",
        "for appropriate scaling",
        "actual compile procedure.",
        "error case II",
        "error case I",
        "precondition I",
        "converts to binary representation",
        "precondition II",
        "for appropriate scaling",
        "actual compile procedure.",
        "error case II",
        "error case I",
        "precondition I",
        "converts to binary representation",
        "precondition II",
        "for appropriate scaling",
        "actual compile procedure.",
        "error case II",
        "error case I",
        "creates return-string",
        "for scaling of same length.",
        "one is greater",
        "fills up with 0's",
        "two is greater",
        "fills up with 0's",
        "end scaling",
        "for scaling of same length.",
        "one is greater",
        "fills up with 0's",
        "two is greater",
        "fills up with 0's",
        "end scaling",
        "actual shifting process",
        "for scaling of same length.",
        "one is greater",
        "fills up with 0's",
        "two is greater",
        "fills up with 0's",
        "end scaling",
        "actual shifting process.",
        "counting one-bits.",
        "counting zero-bits",
        "Precondition",
        "Precondition"
    ],
    "docstrings": [
        "* Author: Christian Bender\n * Class: BitArray\n * \n * implements IComparable, ICloneable, IEnumerator, IEnumerable\n * \n * This class implements a bit-array and provides some\n * useful functions/operations to deal with this type of\n * data structure. You see a overview about the functionality, below.\n * \n * \n * \t\t\t\t\tOverview\n * \n * Constructor (N : int)\n * \tThe constructor receives a length (N) of the to create bit-field.\n * \n * Constructor (sequence : string)\n * \tsetups the array with the input sequence.\n * \tassumes: the sequence may only be allowed contains onese or zeros.\n * \n * Constructor (bits : bool[] ) \n * \tsetups the bit-field with the input array.\n * \n * Compile(sequence : string)\n * \tcompiles a string sequence of 0's and 1's in the inner structure.\n * \tassumes: the sequence may only be allowed contains onese or zeros.\n * \n * Compile (number : int)\n * \tcompiles a positive integer number in the inner data structure.\n * \n * Compile (number : long)\n * \tcompiles a positive long integer number in the inner data structure.\n * \n * ToString ()\n * \treturns a string representation of the inner structure. \n * \tThe returned string is a sequence of 0's and 1's.\n * \n * Length : int\n * \tIs a property that returns the length of the bit-field.\n * \n * Indexer : bool\n * \tindexer for selecting the individual bits of the bit array.\n * \n * NumberOfOneBits() : int\n * \treturns the number of One-bits.\n * \n * NumberOfZeroBits() : int\n * \treturns the number of Zero-Bits.\n * \n * EvenParity() : bool\n * \treturns true if parity is even, otherwise false.\n * \n * OddParity() : bool\n * \treturns true if parity is odd, otherwise false.\n * \n * ToInt64() : long\n *\treturns a long integer representation of the bit-array.\n *\tassumes: the bit-array length must been smaller or equal to 64 bit. \n *\n * ToInt32() : int\n *\treturns a integer representation of the bit-array.\n *\tassumes: the bit-array length must been smaller or equal to 32 bit. \n *\n * ResetField() : void\n * \tsets all bits on false.\n * \n * SetAll(flag : bool) : void\n * \tsets all bits on the value of the flag.\n * \n * GetHashCode() : int\n * \treturns hash-code (ToInt32())\n * \n * Equals (other : Object) : bool\n * \treturns true if there inputs are equal otherwise false.\n * \tassumes: the input bit-arrays must have same length.\n * \n * CompareTo (other : Object) : int  (interface IComparable)\n * \toutput:  0 - if the bit-arrays a equal.\n * \t\t  \t-1 - if this bit-array is smaller.\n * \t\t\t 1 - if this bit-array is greater.\n *  assumes: bit-array lentgh must been smaller or equal to 64 bit\n *\n * Clone () : object\n * \treturns a copy of this bit-array\n * \n * Current : object\n * \treturns the current selected bit.\n * \n * MoveNext() : bool\n * \tpurpose: increases the position of the enumerator\n * \treturns true if 'position' successful increased otherwise false.\n * \n * Reset() : void \n * \tresets the position of the enumerator.\n * \n * GetEnumerator() : IEnumerator\n * \treturns a enumerator for this BitArray-object.\n * \n * Operations:\n * \n * \t& bitwise AND\n * \t| bitwise OR\n * \t~ bitwise NOT\n * \t>> bitwise shift right\n * \t<< bitwise shift left\n *  ^ bitwise XOR\n * \n * Each operation (above) returns a new BitArray-object. \n * \n * \t== equal operator. : bool\n * \t\treturns true if there inputs are equal otherwise false.\n * \t\tassumes: the input bit-arrays must have same length.\n * \n * \t!= not-equal operator : bool\n * \t\treturns true if there inputs aren't equal otherwise false.\n *\t\tassumes: the input bit-arrays must have same length.\n * \n *",
        "* constructor\n\t\t * input: length (N) of the array\n\t\t * output: none\n\t\t * purpose: setups the array with false-values.\n\t\t *",
        "* constructor\n\t\t * input: a string sequence of 0's and 1's. \n\t\t * output: none\n\t\t * purpose: setups the array with the input sequence.\n\t\t * assumes: sequence must been greater or equal to 1.\n\t\t * \t\t\tthe sequence may only be allowed contains onese or zeros.\n\t\t *",
        "* constructor\n\t\t * input: a boolean array of bits.  \n\t\t * output: none\n\t\t * purpose: setups the bit-array with the input array.\n\t\t *",
        "* Compile\n\t\t * input: a string sequence of 0's and 1's\n\t\t * output: none\n\t\t * purpose: compiles the binary sequence into the inner data structure.\n\t\t * assumes: the sequence must have the same length, as the bit-array.\n\t\t * \t\t\tthe sequence may only be allowed contains onese or zeros.\n\t\t *",
        "* Compile\n\t\t * input: an positive integer number\n\t\t * output: none\n\t\t * purpose: compiles integer number into the inner data structure.\n\t\t * assumes: the number must have the same bit length.\n\t\t *",
        "* Compile\n\t\t * input: an positive long integer number\n\t\t * output: none\n\t\t * purpose: compiles integer number into the inner data structure.\n\t\t * assumes: the number must have the same bit length.\n\t\t *",
        "* ToString\n\t\t * input: none\n\t\t * output: a string representation of the inner data structure.\n\t\t * ToString: is the opposit of the Compile(...) method.\n\t\t * \n\t\t *",
        "* Property\n\t\t * Length: returns the length of the current bit array.\n\t\t *",
        "* Operator &\n\t\t * input: two bit-arrays with equal length.\n\t\t * output: bit-array that represents the bit by bit AND.\n\t\t * assumes: the arrays have the same length.\n\t\t *",
        "* Operator |\n\t\t * input: two bit-arrays with equal length.\n\t\t * output: bit-array that represents the bit by bit OR.\n\t\t * assumes: the arrays have the same length.\n\t\t *",
        "* Operator ~\n\t\t * input: BitArray\n\t\t * output: bitwise not \n\t\t *",
        "* Operator << (bitwise shift left)\n\t\t * input: a BitArray and a number of bits.\n\t\t * output: bitwise shifted BitArray. \n\t\t *",
        "* operator ^ (bitwise XOR operation)\n\t\t * input: two bit-arrays.\n\t\t * output: BitArray \n\t\t *",
        "* Operator >> (bitwise shift right)\n\t\t * input: a BitArray and a number of bits.\n\t\t * output: bitwise shifted BitArray. \n\t\t *",
        "* Operator == (equal)\n\t\t * input: two bit-arrays\n\t\t * output: returns true if there inputs are equal otherwise false.\n\t\t * assumes: the input bit-arrays must have same length.\n\t\t *",
        "* Operator != (not-equal)\n\t\t * input: two bit-arrays\n\t\t * output: returns true if there inputs aren't equal otherwise false.\n\t\t * assumes: the input bit-arrays must have same length.\n\t\t *",
        "* Indexer\n\t\t * for selecting the individual bits.\n\t\t *",
        "* NumberOfOneBits\n\t\t * input: none\n\t\t * output: the number of one-bits in the field. \n\t\t *",
        "* NumberOfZeroBits\n\t\t * input: none\n\t\t * output: the number of one-bits in the field. \n\t\t *",
        "* EvenParity\n\t\t * input: none\n\t\t * output: returns true if parity is even, otherwise false.\n\t\t *",
        "* OddParity\n\t\t * input: none\n\t\t * output: returns true if parity is odd, otherwise false.\n\t\t *",
        "* ToInt64\n\t\t * input: none\n\t\t * output: returns a long integer representation of the bit-array.\n\t\t * assumes: the bit-array length must been smaller or equal to 64 bit. \n\t\t *",
        "* ToInt32\n\t\t * input: none\n\t\t * output: returns a integer representation of the bit-array.\n\t\t * assumes: the bit-array length must been smaller or equal to 32 bit. \n\t\t *",
        "* Reset\n\t\t * input: none\n\t\t * output: none\n\t\t * purpose: sets all bits on false.\n\t\t *",
        "* SetAll\n\t\t * input: a boolean flag\n\t\t * output: none\n\t\t * purpose: sets all bits on the value of the flag.\n\t\t *",
        "* CompareTo (interfaces IComparable)\n\t\t * input: BitArray\n\t\t * output: 0 - if the bit-array a equal.\n\t\t * \t\t   -1 - if this bit-array is smaller.\n\t\t * \t\t\t1 - if this bit-array is greater.\n\t\t * assumes: bit-array lentgh must been smaller or equal to 64 bit\n\t\t *",
        "* Equals\n\t\t * input: BitArray\n\t\t * output: returns true if there inputs are equal otherwise false.\n\t\t * assumes: the input bit-arrays must have same length.\n\t\t *",
        "* GetHashCode\n\t\t * input: none\n\t\t * output: hash-code for this BitArray instanz.\n\t\t * assumes: bit-array lentgh must been smaller or equal to 32\n\t\t *",
        "* Clone (interface ICloneable)\n\t\t * input: none\n\t\t * output: a copy of this bit-array\n\t\t *",
        "* Property (for interface IEnumerator)\n\t\t * returns the current bit of the bit-field.\n\t\t *",
        "* MoveNext (for interface IEnumerator)\n\t\t * input: none\n\t\t * output: returns true if 'position' successful increased otherwise false.\n\t\t *",
        "* Reset (for interface IEnumerator)\n\t\t * \tresets the position of the enumerator.\n\t\t *",
        "* GetEnumerator (for interface IEnumerable)\n\t\t * input: none\n\t\t * output: returns a enumerator for this BitArray-Object.\n\t\t *",
        "*\n\t\t * Utility method\n\t\t * input: string sequence\n\t\t * output: returns true if sequence contains only zeros and ones,\n\t\t * \t\t\totherwise false.\n\t\t * purpose: checks a given sequence contains only zeros and ones.\n\t\t * \t\t\tThis method will used in Constructor (sequence : string) \n\t\t * \t\t\tand Compile(sequence : string) \n\t\t * \n\t\t *"
    ],
    "functions": [
        "BitArray",
        "BitArray",
        "BitArray",
        "Compile",
        "Compile",
        "Compile",
        "ToString",
        "NumberOfOneBits",
        "NumberOfZeroBits",
        "EvenParity",
        "OddParity",
        "ToInt64",
        "ToInt32",
        "ResetField",
        "SetAll",
        "CompareTo",
        "Equals",
        "GetHashCode",
        "Clone",
        "MoveNext",
        "Reset",
        "IEnumerator",
        "GetEnumerator",
        "Match"
    ],
    "classes": [
        "BitArray"
    ]
}