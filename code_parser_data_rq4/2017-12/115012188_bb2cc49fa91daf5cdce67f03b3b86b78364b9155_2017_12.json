{
    "identifiers": [
        "com",
        "isfce",
        "pidw",
        "web",
        "java",
        "io",
        "UnsupportedEncodingException",
        "java",
        "util",
        "javax",
        "validation",
        "Valid",
        "org",
        "apache",
        "log4j",
        "Logger",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Autowired",
        "org",
        "springframework",
        "stereotype",
        "Controller",
        "org",
        "springframework",
        "ui",
        "Model",
        "org",
        "springframework",
        "validation",
        "BindingResult",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "ModelAttribute",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "PathVariable",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestMapping",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestMethod",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestParam",
        "org",
        "springframework",
        "web",
        "servlet",
        "mvc",
        "support",
        "RedirectAttributes",
        "org",
        "springframework",
        "web",
        "util",
        "UriUtils",
        "com",
        "isfce",
        "pidw",
        "data",
        "IEtudiantJpaDAO",
        "com",
        "isfce",
        "pidw",
        "data",
        "IProfesseurJpaDAO",
        "com",
        "isfce",
        "pidw",
        "model",
        "Etudiant",
        "com",
        "isfce",
        "pidw",
        "model",
        "Professeur",
        "Controller",
        "RequestMapping",
        "logger",
        "Logger",
        "getLogger",
        "professeurDAO",
        "Autowired",
        "professeurDAO",
        "professeurDAO",
        "professeurDAO",
        "RequestMapping",
        "model",
        "model",
        "addAttribute",
        "professeurDAO",
        "findAll",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "GET",
        "ModelAttribute",
        "professeur",
        "model",
        "logger",
        "debug",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "GET",
        "PathVariable",
        "code",
        "model",
        "logger",
        "debug",
        "code",
        "professeurDAO",
        "exists",
        "code",
        "code",
        "professeur",
        "professeurDAO",
        "findOne",
        "code",
        "model",
        "addAttribute",
        "professeur",
        "model",
        "addAttribute",
        "professeur",
        "getCode",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "POST",
        "Valid",
        "professeur",
        "errors",
        "RequestParam",
        "value",
        "required",
        "savedId",
        "model",
        "rModel",
        "logger",
        "debug",
        "professeur",
        "getCode",
        "savedId",
        "errors",
        "hasErrors",
        "savedId",
        "model",
        "addAttribute",
        "savedId",
        "logger",
        "debug",
        "professeur",
        "getCode",
        "logger",
        "debug",
        "savedId",
        "logger",
        "debug",
        "professeurDAO",
        "exists",
        "professeur",
        "getCode",
        "logger",
        "debug",
        "professeur",
        "getCode",
        "savedId",
        "errors",
        "rejectValue",
        "logger",
        "debug",
        "savedId",
        "equals",
        "professeur",
        "getCode",
        "professeurDAO",
        "exists",
        "professeur",
        "getCode",
        "logger",
        "debug",
        "professeur",
        "getCode",
        "savedId",
        "professeur",
        "getCode",
        "professeurDAO",
        "savedId",
        "professeurDAO",
        "professeur",
        "getCode",
        "logger",
        "debug",
        "savedId",
        "professeurDAO",
        "save",
        "professeur",
        "rModel",
        "addFlashAttribute",
        "professeur",
        "adr",
        "professeur",
        "getCode",
        "adr",
        "UriUtils",
        "encodePath",
        "adr",
        "logger",
        "debug",
        "adr",
        "e",
        "adr",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "POST",
        "PathVariable",
        "code",
        "logger",
        "debug",
        "code",
        "professeurDAO",
        "exists",
        "code",
        "code",
        "professeurDAO",
        "code",
        "logger",
        "debug",
        "code",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "GET",
        "PathVariable",
        "code",
        "model",
        "model",
        "containsAttribute",
        "logger",
        "debug",
        "code",
        "professeur",
        "getProfesseur",
        "code",
        "professeur",
        "code",
        "model",
        "addAttribute",
        "professeur",
        "logger",
        "debug",
        "code",
        "code",
        "professeurDAO",
        "findOne",
        "code"
    ],
    "literals": [
        "\"/professeur\"",
        "\"/liste\"",
        "\"professeurList\"",
        "\"professeur/listeProfesseur\"",
        "\"/add\"",
        "\"affiche la vue pour ajouter un Professeur \"",
        "\"professeur/addProfesseur\"",
        "\"/{code}/update\"",
        "\"affiche la vue pour modifier un Professeur:\"",
        "\"Le professeur n'existe pas\"",
        "\"professeur\"",
        "\"savedId\"",
        "\"professeur/addProfesseur\"",
        "\"/add\"",
        "\"savedId\"",
        "\"Professeur Info:\"",
        "\" savedId \"",
        "\"savedId\"",
        "\"Erreurs dans les données de professeur:\"",
        "\"professeur/addProfesseur\"",
        "\"Professeur Info: no errors\"",
        "\"Professeur Info: code = null \"",
        "\"Le professeur existe:\"",
        "\" savedId \"",
        "\"id\"",
        "\"Professeur.id.doubon\"",
        "\"Existe déjà!\"",
        "\"professeur/addProfesseur\"",
        "\"professeur Info: code != null \"",
        "\"Le Professeur Existe:\"",
        "\" savedId \"",
        "\"Le Professeur \"",
        "\" existe déjà\"",
        "\"Mise à jour du professeur: \"",
        "\"redirect:/professeur/\"",
        "\"UTF8\"",
        "\"UriUtils:Etudiant Adresse de redirection: \"",
        "\"/{code}/delete\"",
        "\"<DEBUT> Supression du professeur: \"",
        "\"Professeur non trouvé pour suppression\"",
        "\"Supression du professeur: \"",
        "\"redirect:/professeur/liste\"",
        "\"/{code}\"",
        "\"professeur\"",
        "\"Recherche le professeur: \"",
        "\"Ce professeur existe déjà \"",
        "\"professeur\"",
        "\"Utilisation d'un FlashAttribute pour le professeur: \"",
        "\"professeur/professeur\""
    ],
    "variables": [
        "professeurDAO"
    ],
    "comments": [
        "import com.isfce.pidw.data.ICoursJpaDAO;",
        "Logger",
        "on recupre la liste de cours et etudiant depois L'usine (factory)",
        "private ICoursJpaDAO coursDAO;",
        "private  List<Etudiant> listeEtudiant ;",
        "private  List<Cours> listeCours  ;",
        "Création de la liste de données pour le 1er exemple",
        "listeEtudiant = etudiantDAO.findAll() ;",
        "listeCours = coursDAO.findAll() ;",
        "Liste des profs",
        "Méthode Get pour ajouter un professeur",
        "Méthode Get pour faire un update d'un prof",
        "recherche le Professeur dans la liste",
        "Ajout au Modèle",
        "Attribut maison pour distinguer un add d'un update",
        "model.addAttribute(\"nouveau\",false);",
        "Gestion de la validation",
        "Attribut maison pour distinguer un add d'un update",
        "distinction d'un update ou d'un add",
        "cas ADD",
        "Vérification doublon",
        "Exemple de gestion d'erreur en modifiant l'objet 'errors' et",
        "en retournant la vue",
        "Autre solution en générant une exception",
        "throw new DuplicateException(\"Le Etudiant \" + Etudiant.getId() + \" existe déjà",
        "\");",
        "cas d'un Update",
        "Est ce que le id a changé?",
        "professeur.setCode( professeur.getCode() ) ;",
        "code à changé",
        "Vérifie si pas en doublon avec un autre",
        "retire le professeur avec l'ancien code",
        "retire le cours de la liste",
        "ajoute le nouveau ou le Professeur nouvellement modifié",
        "Préparation des attribut Flash pour survivre à la redirection",
        "Gestion de la redirection pour l'UTF8 en cas d'accents",
        "encode l'URI en percent-encoding pour les accents",
        "Vérifie si le cours existe",
        "@ExceptionHandler(DuplicateException.class)",
        "private ModelAndView doublonHandler(HttpServletRequest req, Exception e) {",
        "ModelAndView m = new ModelAndView();",
        "m.addObject(\"exception\", e);",
        "m.addObject(\"url\", req.getRequestURL());",
        "m.setViewName(\"error\");// nom logique de la page d'erreur",
        "return m;",
        "}",
        "Affichage du détail d'un Etudiant",
        "Vérifie si on ne recoit pas le Etudiant suite à une redirection",
        "recherche le professeur dans la liste",
        "Vérifie si le prof existe",
        "gestion spécifique pour la non présence de professeur.",
        "Ajout au Modèle",
        "Renvoie un Optional de Etudiant"
    ],
    "docstrings": [
        "* Méthode POST pour un ajout ou un update de Etudiant. La distinction d'un add et\n\t * d'un update se fait sur le paramètre savedId (Id du Etudiant avant l'update) En\n\t * cas de doublon une exception est générée et traitée sur une page\n\t * personnalisée En cas d'erreur de validation, on retourne sur la même vue.\n\t * \n\t * @param Etudiant\n\t *            le Etudiant crée\n\t * @param errors\n\t *            les erreurs suite à une validation\n\t * @param savedId\n\t *            le id du Etudiant avant un update sinon null si un add\n\t * @param model\n\t *            l'objet modèle à retourner en cas d'erreur\n\t * @param rModel\n\t *            permet de mettre des flashs attributes pour la redirection\n\t * @return l'adresse URI de redirection",
        "* Supression d'un Etudiant\n\t * \n\t * @param id\n\t *            du Etudiant\n\t * @return le mapping de redirection",
        "* Réceptionne le traitement de l'exception DuplicateException pour tous les\n\t * déclenchements au sein de ce contrôleur. Cette méthode n'est pas apellée\n\t * explicitement\n\t * \n\t * @param req\n\t *            la request Http. Nécessaire pour fournir des données à la vue\n\t * @param e\n\t *            l'objet exception\n\t * @return un Modèle et une vue par le type ModelView"
    ],
    "functions": [
        "ProfesseurController",
        "listeProfesseur",
        "addProfesseurGet",
        "updateProfesseurGet",
        "addUpdateProfesseurPost",
        "deleteProfesseur",
        "detailProfesseur",
        "Professeur",
        "getProfesseur"
    ],
    "classes": [
        "ProfesseurController"
    ]
}