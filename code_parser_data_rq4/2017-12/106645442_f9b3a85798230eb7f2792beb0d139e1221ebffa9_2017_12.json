{
    "identifiers": [
        "jp",
        "co",
        "opst",
        "java9",
        "exercise",
        "lib",
        "exception",
        "processor",
        "processor",
        "processor",
        "processor",
        "acceptor",
        "resource",
        "resourceGenerator",
        "generate",
        "processed",
        "resourceProcessor",
        "process",
        "resource",
        "processor",
        "normalize",
        "processed",
        "whilePresent",
        "acceptor",
        "uncheck",
        "accept",
        "Acceptor",
        "nop",
        "generator",
        "generator",
        "Processor",
        "pipe",
        "resourceGenerator",
        "resourceProcessor",
        "resourceGenerator",
        "resourceProcessor",
        "resourceGenerator",
        "resourceGenerator",
        "resourceProcessor",
        "resourceProcessor",
        "mapper",
        "resourceGenerator",
        "resourceProcessor",
        "andThen",
        "mapper",
        "acceptor",
        "resource",
        "resourceGenerator",
        "generate",
        "acceptor",
        "accept",
        "resourceProcessor",
        "process",
        "resource",
        "processor",
        "resource",
        "resourceGenerator",
        "generate",
        "processor",
        "process",
        "resourceProcessor",
        "process",
        "resource",
        "processor",
        "processor"
    ],
    "literals": [],
    "variables": [
        "processor",
        "resourceGenerator",
        "resourceProcessor"
    ],
    "comments": [],
    "docstrings": [
        "* try-with-resourcesのリソースです。\n * \n * @param <A> オリジナルのリソース。このリソースがtry-with-resourcesのリソースになります\n * @param <P> リソースを加工した、実際のアクセスに用いるオブジェクト",
        "* リソースが結果を返している間、リソースへのアクセスを繰り返します。\n\t * \n\t * @param <R> リソースに対して繰り返しアクセスする関数の結果",
        "リソースに対して繰り返しアクセスする関数。",
        "* コンストラクター。\n\t\t * \n\t\t * @param processor リソースに対して繰り返しアクセスする関数",
        "* リソースが結果を返している間、リソースへのアクセスを繰り返した後、リソースを閉じます。\n\t\t * \n\t\t * <p>\n\t\t * リソースに対して繰り返しアクセスする関数がnullを返した時点で、繰り返しを終了します。\n\t\t * なお、結果を受け取る関数には、nullを渡しません。\n\t\t * </p>\n\t\t * \n\t\t * @param acceptor 結果を受け取る関数\n\t\t * @throws Exception リソースへのアクセスに失敗した場合",
        "* リソースが結果を返している間、リソースへのアクセスを繰り返した後、リソースを閉じます。\n\t\t * \n\t\t * <p>\n\t\t * リソースに対して繰り返しアクセスする関数がnullを返した時点で、繰り返しを終了します。\n\t\t * なお、結果は使用せずに破棄します。\n\t\t * </p>\n\t\t * \n\t\t * @throws Exception リソースへのアクセスに失敗した場合",
        "* リソースを生成します。\n\t * \n\t * @param <A> オリジナルのリソース\n\t * @param generator リソースを取得する関数。このリソースがtry-with-resourcesのリソースになります\n\t * @return リソース",
        "リソースを取得する関数。",
        "リソースを加工する関数。",
        "* コンストラクター。\n\t * \n\t * @param resourceGenerator リソースを取得する関数\n\t * @param resourceProcessor リソースを加工する関数",
        "* リソースを加工します。\n\t * \n\t * <p>\n\t * try-with-resourcesのリソースは、あくまで{@link #of(Generator)}の引数になります。\n\t * このリソースの加工は、主に{@link #whilePresent(Processor)}を実行するにあたっての前準備です。\n\t * </p>\n\t * \n\t * @param <PP> 加工後の新しいリソース\n\t * @param mapper リソースを加工する関数\n\t * @return 新しいリソース",
        "* リソースにアクセスした後、リソースを閉じます。\n\t * \n\t * @param acceptor 結果を受け取る関数\n\t * @throws Exception リソースへのアクセスに失敗した場合",
        "* リソースにアクセスした後、リソースを閉じます。\n\t * \n\t * @param <R> リソースから取得した値を処理した結果\n\t * @param processor リソースから取得した値を処理する関数\n\t * @return 結果\n\t * @throws Exception リソースへのアクセスに失敗した場合",
        "* リソースへの繰り返し操作を開始します。\n\t * \n\t * @param <R> リソースに対して繰り返しアクセスする関数の結果\n\t * @param processor リソースに対して繰り返しアクセスする関数\n\t * @return リソースが結果を返している間、リソースへのアクセスを繰り返すオブジェクト"
    ],
    "functions": [
        "WhilePresent",
        "accept",
        "cast",
        "of",
        "Resource",
        "accept",
        "R",
        "process",
        "whilePresent"
    ],
    "classes": [
        "Resource",
        "WhilePresent"
    ]
}