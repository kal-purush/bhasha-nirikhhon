{
    "identifiers": [
        "os",
        "sys",
        "getopt",
        "elftools",
        "elf",
        "elffile",
        "ELFFile",
        "elftools",
        "elf",
        "sections",
        "SymbolTableSection",
        "elftools",
        "elf",
        "segments",
        "Segment",
        "InterpSegment",
        "NoteSegment",
        "file",
        "atf_index",
        "phy_addr",
        "phy_addr",
        "file",
        "atf_index",
        "file",
        "file",
        "data",
        "file",
        "file",
        "file",
        "file",
        "file",
        "phy_addr",
        "atf_index",
        "file",
        "phy_addr",
        "file",
        "file",
        "file",
        "dtbs",
        "dtb",
        "dtbs",
        "os",
        "path",
        "basename",
        "dtb",
        "file",
        "cnt",
        "file",
        "dtname",
        "file",
        "dtb",
        "file",
        "file",
        "file",
        "file",
        "cnt",
        "file",
        "cnt",
        "dtname",
        "atf_cnt",
        "file",
        "cnt",
        "file",
        "dtname",
        "file",
        "file",
        "i",
        "atf_cnt",
        "file",
        "i",
        "i",
        "atf_cnt",
        "file",
        "file",
        "file",
        "file",
        "file",
        "file",
        "dtbs",
        "atf_cnt",
        "file",
        "file",
        "dtb",
        "dtbs",
        "os",
        "path",
        "basename",
        "dtb",
        "append_conf_section",
        "file",
        "cnt",
        "dtname",
        "atf_cnt",
        "cnt",
        "file",
        "file",
        "fit_file_name",
        "bl31_file_name",
        "uboot_file_name",
        "dtbs_file_name",
        "fit_file_name",
        "sys",
        "stdout",
        "open",
        "fit_file_name",
        "sys",
        "stdout",
        "open",
        "uboot_file_name",
        "uboot_file",
        "ELFFile",
        "uboot_file",
        "i",
        "uboot",
        "num_segments",
        "uboot",
        "get_segment",
        "i",
        "seg",
        "__getitem__",
        "ELF_SEG_P_TYPE",
        "seg",
        "__getitem__",
        "ELF_SEG_P_PADDR",
        "num_load_seg",
        "p_paddr",
        "num_load_seg",
        "fit_file",
        "DT_HEADER",
        "p_paddr",
        "open",
        "bl31_file_name",
        "bl31_file",
        "ELFFile",
        "bl31_file",
        "i",
        "bl31",
        "num_segments",
        "bl31",
        "get_segment",
        "i",
        "seg",
        "__getitem__",
        "ELF_SEG_P_TYPE",
        "seg",
        "__getitem__",
        "ELF_SEG_P_PADDR",
        "seg",
        "__getitem__",
        "ELF_SEG_P_PADDR",
        "append_atf_node",
        "fit_file",
        "i",
        "paddr",
        "i",
        "append_fdt_node",
        "fit_file",
        "dtbs_file_name",
        "fit_file",
        "DT_IMAGES_NODE_END",
        "append_conf_node",
        "fit_file",
        "dtbs_file_name",
        "atf_cnt",
        "fit_file",
        "DT_END",
        "fit_file_name",
        "sys",
        "stdout",
        "fit_file",
        "close",
        "bl31_file_name",
        "open",
        "bl31_file_name",
        "bl31_file",
        "ELFFile",
        "bl31_file",
        "bl31",
        "num_segments",
        "i",
        "num",
        "bl31",
        "get_segment",
        "i",
        "seg",
        "__getitem__",
        "ELF_SEG_P_TYPE",
        "seg",
        "__getitem__",
        "ELF_SEG_P_PADDR",
        "paddr",
        "open",
        "file_name",
        "atf",
        "atf",
        "write",
        "seg",
        "data",
        "bl31_file_name",
        "open",
        "bl31_file_name",
        "bl31_file",
        "ELFFile",
        "bl31_file",
        "bl31",
        "num_segments",
        "bl31",
        "num_segments",
        "i",
        "num",
        "i",
        "bl31",
        "get_segment",
        "i",
        "seg",
        "ELF_SEG_P_TYPE",
        "seg",
        "ELF_SEG_P_OFFSET",
        "seg",
        "ELF_SEG_P_MEMSZ",
        "seg",
        "ELF_SEG_P_FILESZ",
        "ptype",
        "pfilesz",
        "pmemsz",
        "poffset",
        "seg",
        "ELF_SEG_P_PADDR",
        "paddr",
        "sys",
        "stdout",
        "getopt",
        "getopt",
        "sys",
        "argv",
        "opt",
        "val",
        "opts",
        "opt",
        "val",
        "opt",
        "val",
        "opt",
        "val",
        "opt",
        "__doc__",
        "sys",
        "exit",
        "args",
        "generate_atf_fit_dts",
        "FIT_ITS",
        "bl31_elf",
        "uboot_elf",
        "dtbs",
        "generate_atf_binary",
        "bl31_elf",
        "main"
    ],
    "literals": [
        "'p_type'",
        "'p_paddr'",
        "'p_vaddr'",
        "'p_offset'",
        "'p_filesz'",
        "'p_memsz'",
        "'bl31_0x%08x.bin'",
        "'\\t\\tatf@%d {'",
        "'\\t\\t\\tdescription = \\\"ARM Trusted Firmware\\\";'",
        "'\\t\\t\\tdata = /incbin/(\"%s\");'",
        "'\\t\\t\\ttype = \"firmware\";'",
        "'\\t\\t\\tarch = \"arm64\";'",
        "'\\t\\t\\tos = \"arm-trusted-firmware\";'",
        "'\\t\\t\\tcompression = \"none\";'",
        "'\\t\\t\\tload = <0x%08x>;'",
        "'\\t\\t\\tentry = <0x%08x>;'",
        "'\\t\\t};'",
        "''",
        "'\\t\\tfdt@%d {'",
        "'\\t\\t\\tdescription = \"%s\";'",
        "'\\t\\t\\tdata = /incbin/(\"%s\");'",
        "'\\t\\t\\ttype = \"flat_dt\";'",
        "'\\t\\t\\tcompression = \"none\";'",
        "'\\t\\t};'",
        "''",
        "'\\t\\tconfig@%d {'",
        "'\\t\\t\\tdescription = \"%s\";'",
        "'\\t\\t\\tfirmware = \"atf@1\";'",
        "'\\t\\t\\tloadables = \"uboot@1\",'",
        "'\"atf@%d\"'",
        "','",
        "';'",
        "'\\t\\t\\tfdt = \"fdt@1\";'",
        "'\\t\\t};'",
        "''",
        "'\\tconfigurations {'",
        "'\\t\\tdefault = \"config@1\";'",
        "'\\t};'",
        "''",
        "\"wb\"",
        "'PT_LOAD'",
        "'PT_LOAD'",
        "'%s'",
        "'%s'",
        "'PT_LOAD'",
        "'bl31_0x%08x.bin'",
        "\"wb\"",
        "'Number of Segments : %d'",
        "'Segment %d'",
        "'type: %s\\nfilesz: %08x\\nmemsz: %08x\\noffset: %08x'",
        "'paddr: %08x'",
        "\"./u-boot\"",
        "\"./bl31.elf\"",
        "\"o:u:b:h\"",
        "\"-o\"",
        "\"-u\"",
        "\"-b\"",
        "\"-h\"",
        "\"__main__\""
    ],
    "variables": [
        "ELF_SEG_P_TYPE",
        "ELF_SEG_P_PADDR",
        "ELF_SEG_P_VADDR",
        "ELF_SEG_P_OFFSET",
        "ELF_SEG_P_FILESZ",
        "ELF_SEG_P_MEMSZ",
        "DT_HEADER",
        "DT_IMAGES_NODE_END",
        "DT_END",
        "data",
        "cnt",
        "dtname",
        "cnt",
        "cnt",
        "dtname",
        "cnt",
        "fit_file",
        "fit_file",
        "num_load_seg",
        "p_paddr",
        "uboot",
        "seg",
        "p_paddr",
        "num_load_seg",
        "bl31",
        "seg",
        "paddr",
        "p",
        "atf_cnt",
        "bl31",
        "num",
        "seg",
        "paddr",
        "file_name",
        "bl31",
        "num",
        "seg",
        "ptype",
        "poffset",
        "pmemsz",
        "pfilesz",
        "paddr",
        "uboot_elf",
        "bl31_elf",
        "FIT_ITS",
        "opts",
        "args",
        "FIT_ITS",
        "uboot_elf",
        "bl31_elf",
        "dtbs"
    ],
    "comments": [
        "!/usr/bin/env python2",
        "pip install pyelftools",
        "get_bl31_segments_info(\"u-boot\")",
        "get_bl31_segments_info(\"bl31.elf\")"
    ],
    "docstrings": [
        "\"\"\"\nA script to generate FIT image source for rockchip boards\nwith ARM Trusted Firmware\nand multiple device trees (given on the command line)\n\nusage: $0 <dt_name> [<dt_name> [<dt_name] ...]\n\"\"\"",
        "\"\"\"/*\n * Copyright (C) 2017 Fuzhou Rockchip Electronics Co., Ltd\n *\n * Minimal dts for a SPL FIT image payload.\n *\n * SPDX-License-Identifier: GPL-2.0+  X11\n */\n/dts-v1/;\n\n/ {\n\tdescription = \"Configuration to load ATF before U-Boot\";\n\t#address-cells = <1>;\n\n\timages {\n\t\tuboot@1 {\n\t\t\tdescription = \"U-Boot (64-bit)\";\n\t\t\tdata = /incbin/(\"u-boot-nodtb.bin\");\n\t\t\ttype = \"standalone\";\n\t\t\tos = \"U-Boot\";\n\t\t\tarch = \"arm64\";\n\t\t\tcompression = \"none\";\n\t\t\tload = <0x%08x>;\n\t\t};\n\"\"\"",
        "\"\"\"\n    };\n\"\"\"",
        "\"\"\"\n};\n\"\"\"",
        "\"\"\"\n    Append ATF DT node to input FIT dts file.\n    \"\"\"",
        "\"\"\"\n    Append FDT nodes.\n    \"\"\"",
        "\"\"\"\n    Append configeration nodes.\n    \"\"\"",
        "\"\"\"\n    Generate FIT script for ATF image.\n    \"\"\"",
        "\"\"\"\n    Get load offset, physical offset, file size\n    from bl31 elf file program headers.\n    \"\"\""
    ],
    "functions": [
        "append_atf_node",
        "append_fdt_node",
        "append_conf_section",
        "append_conf_node",
        "generate_atf_fit_dts",
        "generate_atf_binary",
        "get_bl31_segments_info",
        "main"
    ],
    "classes": []
}