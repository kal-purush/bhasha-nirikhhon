{
    "identifiers": [
        "socket",
        "json",
        "threading",
        "ruamel",
        "yaml",
        "yaml",
        "HELP",
        "GOODBYE",
        "SET_syntax",
        "GET_syntax",
        "PREFIX_syntax",
        "GOODBYE_syntax",
        "HELP_syntax",
        "output_socket",
        "input_socket",
        "name",
        "name",
        "output_socket",
        "input_socket",
        "ALIVE",
        "connection_status",
        "ALIVE",
        "input_socket",
        "recv",
        "server_response",
        "GOODBYE",
        "input_socket",
        "close",
        "DEAD",
        "communication_round",
        "OK_GOODBYE",
        "server_response",
        "OK_GOODBYE",
        "input_socket",
        "close",
        "DEAD",
        "input_waiting_status",
        "server_response",
        "i",
        "len",
        "commands_list",
        "format",
        "i",
        "commands_list",
        "i",
        "user_command",
        "user_command",
        "split",
        "command_parsed",
        "user_command",
        "output_socket",
        "sendall",
        "user_command",
        "user_command",
        "output_socket",
        "sendall",
        "user_command",
        "input_waiting_status",
        "data",
        "server_response",
        "startswith",
        "ERROR",
        "server_response",
        "user_command",
        "output_socket",
        "sendall",
        "user_command",
        "input_waiting_status",
        "data",
        "server_response",
        "json",
        "loads",
        "server_response_json_enc",
        "server_response_json_dec",
        "key",
        "value",
        "server_response_json_dec",
        "items",
        "format",
        "key",
        "value",
        "user_command",
        "output_socket",
        "sendall",
        "user_command",
        "user_command",
        "command_parser",
        "user_command",
        "parsed_command",
        "GET",
        "len",
        "parsed_command",
        "get_func",
        "user_command",
        "parsed_command",
        "SET",
        "len",
        "parsed_command",
        "set_func",
        "user_command",
        "parsed_command",
        "HELP",
        "len",
        "parsed_command",
        "help_print",
        "parsed_command",
        "PREFIX",
        "len",
        "parsed_command",
        "prefix",
        "user_command",
        "parsed_command",
        "OK_GOODBYE",
        "ok_goodbye",
        "user_command",
        "output_socket",
        "close",
        "INVALID_SYNTAX",
        "output_socket",
        "sendall",
        "GOODBYE",
        "connection_status",
        "ALIVE",
        "raw_input",
        "HELP",
        "connection_status",
        "ALIVE",
        "user_command",
        "GOODBYE",
        "close_connection",
        "connection_status",
        "ALIVE",
        "output_socket",
        "close",
        "communication_round",
        "user_command",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "host_ip_address",
        "server_input_port",
        "my_socket",
        "connect",
        "server_input_address",
        "format",
        "host_ip_address",
        "server_input_port",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "host_ip_address",
        "server_output_port",
        "input_socket",
        "connect",
        "server_output_address",
        "format",
        "host_ip_address",
        "server_output_port",
        "format",
        "my_name",
        "my_socket",
        "sendall",
        "my_name",
        "input_socket",
        "recv",
        "server_response",
        "OK",
        "format",
        "server_response",
        "Client",
        "my_socket",
        "input_socket",
        "my_name",
        "threading",
        "target",
        "client_manager",
        "handle_ui",
        "args",
        "handle_ui_thread",
        "start",
        "threading",
        "target",
        "client_manager",
        "input_socket_handler",
        "args",
        "handle_input_thread",
        "start",
        "main"
    ],
    "literals": [
        "\"Shahar\"",
        "'127.0.0.1'",
        "'OK'",
        "'ok_goodbye'",
        "'help'",
        "'goodbye'",
        "'set key value'",
        "'set'",
        "'get key'",
        "'get'",
        "'prefix prefix_string'",
        "'prefix'",
        "\"Invalid syntax\"",
        "'Error'",
        "'alive'",
        "'dead'",
        "\"Available commands syntax: \"",
        "\"#{}: {}\"",
        "\"Key not found.\"",
        "\"The value retrieved is: \"",
        "\"No key found with asserted prefix\"",
        "\"The key:value pairs which match asserted prefix are: \"",
        "\"{} : {}\"",
        "'Enter your command, enter '",
        "' for available commands list\\n'",
        "\"Server closed connection.\"",
        "\"Connection closed.\"",
        "\"Connecting to host, output: {} at port: {}\"",
        "\"Connecting to host, input: {} at port: {}\"",
        "\"Connected to server :)\"",
        "\"sending user name, {}, to server...\"",
        "\"Name unconfirmed, server returned error: {}\"",
        "\"Server confirmed user name.\"",
        "'__main__'"
    ],
    "variables": [
        "my_name",
        "host_ip_address",
        "server_input_port",
        "server_output_port",
        "OK",
        "OK_GOODBYE",
        "HELP",
        "HELP_syntax",
        "GOODBYE",
        "GOODBYE_syntax",
        "SET_syntax",
        "SET",
        "GET_syntax",
        "GET",
        "PREFIX_syntax",
        "PREFIX",
        "commands_list",
        "INVALID_SYNTAX",
        "ILLEGAL_INPUT",
        "LEGAL_INPUT",
        "ERROR",
        "ALIVE",
        "DEAD",
        "name",
        "output_socket",
        "input_socket",
        "input_waiting_status",
        "data",
        "connection_status",
        "server_response",
        "connection_status",
        "connection_status",
        "data",
        "input_waiting_status",
        "command_parsed",
        "input_waiting_status",
        "server_response",
        "input_waiting_status",
        "server_response",
        "server_response_json_enc",
        "server_response_json_dec",
        "parsed_command",
        "user_command",
        "my_socket",
        "server_input_address",
        "input_socket",
        "server_output_address",
        "server_response",
        "client_manager",
        "handle_ui_thread",
        "handle_input_thread"
    ],
    "comments": [
        "connection constants",
        "host_ip_address = '10.35.77.231'",
        "commands name",
        "code words",
        "ERROR = 'ERROR'",
        "NKNOWN_COMMAND = 'Unknown command'",
        "fixed commands dictionary",
        "print type(server_response)",
        "print server_response",
        "sending command to server",
        "waiting to server to replay",
        "sending command to server",
        "waiting to server to replay",
        "print type(server_response)",
        "print server_response",
        "sending command to server",
        "operating the client",
        "Protocol first stage: sending the server my name",
        "Waiting for server to respond",
        "print \"started UI thread\"",
        "print \"started listening thread\""
    ],
    "docstrings": [
        "'''with open('config_yaml.yml', 'r') as open_file:\n    config_yaml_encoded = open_file.read()\n    condig_decoded = yaml.load(config_yaml_encoded)'''",
        "'''if command_parsed[0] == HELP:\n            self.print_help()\n        elif command_parsed[0] == SET:\n            if len(command_parsed) != 3:\n                print INVALID_SYNTAX\n                return (ILLEGAL_INPUT, None)\n        elif command_parsed[0] == '''"
    ],
    "functions": [
        "input_socket_handler",
        "help_print",
        "command_parser",
        "set_func",
        "get_func",
        "prefix",
        "ok_goodbye",
        "communication_round",
        "close_connection",
        "handle_ui",
        "main"
    ],
    "classes": [
        "Client"
    ]
}