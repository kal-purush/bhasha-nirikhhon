{
    "identifiers": [
        "mbed_host_tests",
        "BaseHostTest",
        "time",
        "calendar",
        "datetime",
        "BaseHostTest",
        "datetime",
        "datetime",
        "key",
        "value",
        "timestamp",
        "value",
        "RTC_FULL_LEAP_YEAR_SUPPORT",
        "datetime",
        "datetime",
        "key",
        "value",
        "timestamp",
        "date",
        "timetuple",
        "tm_wday",
        "date",
        "timetuple",
        "tm_yday",
        "full_leap_year_support",
        "date",
        "edge_date",
        "date",
        "date",
        "datetime",
        "timedelta",
        "days",
        "date",
        "timetuple",
        "tm_wday",
        "date",
        "year",
        "date",
        "timetuple",
        "tm_yday",
        "date_org",
        "timetuple",
        "tm_yday",
        "date",
        "month",
        "date",
        "day",
        "date",
        "year",
        "date_org",
        "timetuple",
        "tm_yday",
        "date",
        "year",
        "date",
        "month",
        "date",
        "day",
        "date",
        "hour",
        "date",
        "minute",
        "date",
        "second",
        "calendar",
        "timegm",
        "t",
        "value",
        "week_day",
        "year_day",
        "actual_timestamp",
        "expected_timestamp",
        "send_kv",
        "response",
        "send_kv",
        "expected_timestamp",
        "actual_timestamp",
        "first",
        "calendar",
        "monthrange",
        "date",
        "year",
        "date",
        "month",
        "date",
        "replace",
        "day",
        "days_range",
        "minute",
        "second",
        "first",
        "date",
        "datetime",
        "timedelta",
        "days",
        "date",
        "month",
        "year_id",
        "date",
        "replace",
        "year",
        "years",
        "year_id",
        "date",
        "replace",
        "day",
        "minute",
        "second",
        "first",
        "register_callback",
        "_verify_timestamp",
        "register_callback",
        "_set_leap_year_support",
        "__result"
    ],
    "literals": [
        "\"passed\"",
        "\"failed\"",
        "\"expected = %d, result = %d\"",
        "'timestamp'",
        "'leap_year_setup'"
    ],
    "variables": [
        "edge_date",
        "years",
        "year_id",
        "full_leap_year_support",
        "RTC_FULL_LEAP_YEAR_SUPPORT",
        "RTC_PARTIAL_LEAP_YEAR_SUPPORT",
        "full_leap_year_support",
        "full_leap_year_support",
        "first",
        "date",
        "year_id",
        "week_day",
        "year_day",
        "date_org",
        "week_day",
        "year_day",
        "year_day",
        "year_day",
        "year_day",
        "t",
        "expected_timestamp",
        "actual_timestamp",
        "response",
        "days_range",
        "date",
        "first",
        "date",
        "date",
        "first"
    ],
    "comments": [
        "week day in python is counted from sunday(0) and on mbed side week day is counted from monday(0).",
        "year day in python is counted from 1 and on mbed side year day is counted from 0.",
        "Fix for RTC which not have full leap year support.",
        "After 28.02.2100 we should be one day off - add this day and store original",
        "Adjust week day.",
        "Adjust year day.",
        "Last day in year",
        "Exception for year 2100 - ivalid handled by RTC without full leap year support",
        "convert to unsigned int",
        "encode week day and year day in the response",
        "response contains encoded week day and year day",
        "calculate next date"
    ],
    "docstrings": [
        "\"\"\"\nmbed SDK\nCopyright (c) 2011-2013 ARM Limited\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\"\"\"",
        "\"\"\"\n    This is the host part of the test to verify if:\n    - _rtc_mktime function converts a calendar time into time since UNIX epoch as a time_t,\n    - _rtc_localtime function converts a given time in seconds since epoch into calendar time.\n    \n    The same algoritm to generate next calendar time to be tested is used by both parts of the test.\n    We will check if correct time since UNIX epoch is calculated for the first and the last day\n    of each month and across valid years.\n    \n    Mbed part of the test sends calculated time since UNIX epoch.\n    This part validates given value and responds to indicate pass or fail.\n    Additionally it sends also encoded day of week and day of year which\n    will be needed to verify _rtc_localtime.\n    \n    Support for both types of RTC devices is provided:\n    - RTCs which handles all leap years in the mentioned year range correctly. Leap year is determined by checking if\n      the year counter value is divisible by 400, 100, and 4. No problem here.\n    - RTCs which handles leap years correctly up to 2100. The RTC does a simple bit comparison to see if the two\n      lowest order bits of the year counter are zero. In this case 2100 year will be considered\n      incorrectly as a leap year, so the last valid point in time will be 28.02.2100 23:59:59 and next day will be\n      29.02.2100 (invalid). So after 28.02.2100 the day counter will be off by a day.\n      \n    \"\"\""
    ],
    "functions": [
        "_set_leap_year_support",
        "_verify_timestamp",
        "setup",
        "result",
        "teardown"
    ],
    "classes": [
        "RTC_time_calc_test"
    ]
}