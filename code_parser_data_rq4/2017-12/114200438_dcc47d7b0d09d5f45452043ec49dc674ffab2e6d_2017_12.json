{
    "identifiers": [
        "sys",
        "exit",
        "sys",
        "argv",
        "pdb",
        "set_trace",
        "netCDF4",
        "nc",
        "mdtraj",
        "md",
        "simtk",
        "openmm",
        "app",
        "simtk",
        "openmm",
        "simtk",
        "unit",
        "numpy",
        "np",
        "pandas",
        "pd",
        "pymbar",
        "mb",
        "pymbar",
        "timeseries",
        "collections",
        "OrderedDict",
        "smarty",
        "openforcefield",
        "typing",
        "engines",
        "smirnoff",
        "openforcefield",
        "utils",
        "get_data_filename",
        "generateTopologyFromOEMol",
        "read_molecules",
        "openmmtools",
        "integrators",
        "ommtoolsints",
        "mdtraj",
        "md",
        "itertools",
        "product",
        "pickle",
        "ncfiles",
        "indkeep",
        "nc",
        "Dataset",
        "ncfiles",
        "data",
        "variables",
        "Quantity",
        "xyz",
        "indkeep",
        "angstroms",
        "data",
        "variables",
        "Quantity",
        "lens",
        "indkeep",
        "angstroms",
        "data",
        "variables",
        "Quantity",
        "angs",
        "indkeep",
        "degrees",
        "data",
        "xyzn",
        "lensn",
        "angsn",
        "ncfiles",
        "indkeep",
        "nc",
        "Dataset",
        "ncfiles",
        "data",
        "variables",
        "Quantity",
        "xyz",
        "indkeep",
        "angstroms",
        "data",
        "xyzn",
        "system",
        "positions",
        "vecs",
        "ommtoolsints",
        "LangevinIntegrator",
        "kelvin",
        "picoseconds",
        "femtoseconds",
        "mm",
        "Platform",
        "getPlatformByName",
        "mm",
        "Context",
        "system",
        "integrator",
        "platform",
        "context",
        "setPeriodicBoxVectors",
        "vecs",
        "context",
        "setPositions",
        "positions",
        "context",
        "getState",
        "getEnergy",
        "state",
        "getPotentialEnergy",
        "energy",
        "system",
        "positions",
        "ommtoolsints",
        "LangevinIntegrator",
        "kelvin",
        "picoseconds",
        "femtoseconds",
        "mm",
        "Platform",
        "getPlatformByName",
        "mm",
        "Context",
        "system",
        "integrator",
        "platform",
        "context",
        "setPositions",
        "positions",
        "context",
        "getState",
        "getEnergy",
        "state",
        "getPotentialEnergy",
        "energy",
        "coords",
        "topology",
        "vecs",
        "P",
        "T",
        "kB",
        "T",
        "i",
        "mol2files",
        "append",
        "i",
        "rsplit",
        "oechem",
        "OEIFlavor_Generic_Default",
        "oechem",
        "OEIFlavor_MOL2_Default",
        "oechem",
        "OEIFlavor_MOL2_Forcefield",
        "oechem",
        "OEMol",
        "mol2file",
        "mol2files",
        "oechem",
        "oemolistream",
        "mol2file",
        "ifs",
        "SetFlavor",
        "oechem",
        "OEFormat_MOL2",
        "flavor",
        "oechem",
        "OEGraphMol",
        "oechem",
        "OEReadMolecule",
        "ifs",
        "mol",
        "oechem",
        "OETriposAtomNames",
        "mol",
        "mols",
        "append",
        "oechem",
        "OEGraphMol",
        "mol",
        "len",
        "keys",
        "get_data_filename",
        "ForceField",
        "ffxml",
        "topology",
        "np",
        "zeros",
        "K",
        "len",
        "coords",
        "np",
        "float64",
        "np",
        "zeros",
        "K",
        "len",
        "coords",
        "np",
        "float64",
        "i",
        "j",
        "j",
        "k",
        "l",
        "AlkEthOH_id",
        "m",
        "n",
        "AlkEthOH_id",
        "l",
        "ff",
        "getParameter",
        "smirks",
        "n",
        "n",
        "n",
        "ff",
        "setParameter",
        "newparams",
        "smirks",
        "n",
        "ff",
        "createSystem",
        "top",
        "mols",
        "nonbondedMethod",
        "PME",
        "nonbondedCutoff",
        "angstroms",
        "MonteCarloBarostat",
        "P",
        "bar",
        "T",
        "kelvin",
        "system",
        "addForce",
        "barostat",
        "o",
        "p",
        "coords",
        "get_energy",
        "system",
        "p",
        "vecs",
        "o",
        "e",
        "_value",
        "e",
        "_value",
        "beta",
        "E_kn",
        "u_kn",
        "coords",
        "T",
        "kB",
        "T",
        "i",
        "mols",
        "append",
        "i",
        "mols",
        "len",
        "mols",
        "keys",
        "oechem",
        "oemolistream",
        "mol",
        "oechem",
        "OEMol",
        "oechem",
        "OEIFlavor_Generic_Default",
        "oechem",
        "OEIFlavor_MOL2_Default",
        "oechem",
        "OEIFlavor_MOL2_Forcefield",
        "ifs",
        "SetFlavor",
        "oechem",
        "OEFormat_MOL2",
        "flavor",
        "oechem",
        "OEReadMolecule",
        "ifs",
        "mol",
        "oechem",
        "OETriposAtomNames",
        "mol",
        "get_data_filename",
        "ForceField",
        "ffxml",
        "generateTopologyFromOEMol",
        "mol",
        "np",
        "zeros",
        "K",
        "len",
        "coords",
        "np",
        "float64",
        "np",
        "zeros",
        "K",
        "len",
        "coords",
        "np",
        "float64",
        "i",
        "j",
        "j",
        "k",
        "l",
        "AlkEthOH_id",
        "m",
        "n",
        "AlkEthOH_id",
        "l",
        "ff",
        "getParameter",
        "smirks",
        "n",
        "n",
        "n",
        "ff",
        "setParameter",
        "newparams",
        "smirks",
        "n",
        "ff",
        "createSystem",
        "topology",
        "mol",
        "o",
        "p",
        "coords",
        "get_energy_vac",
        "system",
        "p",
        "e",
        "_value",
        "e",
        "_value",
        "beta",
        "E_kn",
        "u_kn",
        "i",
        "rsplit",
        "split",
        "i",
        "files",
        "file_strings",
        "i",
        "i",
        "file_str",
        "i",
        "i",
        "file_str",
        "i",
        "i",
        "file_str",
        "i",
        "i",
        "file_str",
        "i",
        "rsplit",
        "rsplit",
        "i",
        "files",
        "i",
        "i",
        "i",
        "i",
        "file_tups_traj",
        "i",
        "file_tups_sd",
        "i",
        "file_tups_traj",
        "i",
        "file_tups_traj",
        "i",
        "file_tups_traj",
        "i",
        "file_tups_sd",
        "i",
        "file_tups_sd",
        "i",
        "file_tups_sd",
        "j",
        "i",
        "file_tups_traj",
        "ii",
        "i",
        "read_traj",
        "ii",
        "burnin",
        "IndexError",
        "burnin",
        "m",
        "n",
        "lens",
        "angs",
        "md",
        "utils",
        "lengths_and_angles_to_box_vectors",
        "m",
        "_value",
        "m",
        "_value",
        "m",
        "_value",
        "n",
        "_value",
        "n",
        "_value",
        "n",
        "_value",
        "vecs_orig",
        "j",
        "append",
        "vecs",
        "angstroms",
        "pos",
        "xyz",
        "xyz_orig",
        "j",
        "append",
        "pos",
        "states_traj",
        "j",
        "append",
        "i",
        "rsplit",
        "j",
        "i",
        "file_tups_traj_vac",
        "ii",
        "i",
        "read_traj_vac",
        "ii",
        "burnin_vac",
        "IndexError",
        "burnin",
        "pos",
        "xyz_vac",
        "xyz_orig_vac",
        "j",
        "append",
        "pos",
        "j",
        "i",
        "file_tups_sd",
        "pd",
        "read_csv",
        "ii",
        "sep",
        "burnin",
        "ii",
        "i",
        "pd",
        "concat",
        "datasets",
        "IndexError",
        "burnin",
        "e",
        "merged",
        "ener_orig",
        "j",
        "append",
        "e",
        "dens",
        "merged",
        "vol_orig",
        "j",
        "append",
        "MMcyc",
        "dens",
        "states_sd",
        "j",
        "append",
        "i",
        "rsplit",
        "j",
        "i",
        "file_tups_sd_vac",
        "pd",
        "read_csv",
        "ii",
        "sep",
        "burnin_vac",
        "ii",
        "i",
        "pd",
        "concat",
        "datasets",
        "IndexError",
        "burnin",
        "e",
        "merged",
        "ener_orig_vac",
        "j",
        "append",
        "e",
        "i",
        "ener_orig",
        "i",
        "vol_orig",
        "i",
        "ener_orig_vac",
        "i",
        "xyz_orig",
        "i",
        "xyz_orig_vac",
        "i",
        "vecs_orig",
        "ii",
        "value",
        "ener_orig",
        "value",
        "np",
        "zeros",
        "len",
        "ts",
        "np",
        "float64",
        "i",
        "t",
        "ts",
        "np",
        "count_nonzero",
        "t",
        "np",
        "timeseries",
        "statisticalInefficiency",
        "t",
        "np",
        "array",
        "len",
        "timeseries",
        "subsampleCorrelatedData",
        "t",
        "g",
        "b",
        "t",
        "b",
        "ts",
        "g",
        "timeseries",
        "subsampleCorrelatedData",
        "t",
        "g",
        "b",
        "t",
        "b",
        "ts",
        "g",
        "ind",
        "value",
        "j",
        "j",
        "inds",
        "vol_orig",
        "ii",
        "j",
        "j",
        "inds",
        "xyz_orig",
        "ii",
        "j",
        "j",
        "inds",
        "vecs_orig",
        "ii",
        "j",
        "j",
        "inds",
        "ener_sub",
        "vol_sub",
        "xyz_sub",
        "vecs_sub",
        "ii",
        "value",
        "ener_orig_vac",
        "value",
        "np",
        "zeros",
        "len",
        "ts",
        "np",
        "float64",
        "i",
        "t",
        "ts",
        "np",
        "count_nonzero",
        "t",
        "np",
        "timeseries",
        "statisticalInefficiency",
        "t",
        "np",
        "array",
        "len",
        "timeseries",
        "subsampleCorrelatedData",
        "t",
        "g",
        "b",
        "t",
        "b",
        "ts",
        "g",
        "timeseries",
        "subsampleCorrelatedData",
        "t",
        "g",
        "b",
        "t",
        "b",
        "ts",
        "g",
        "ind_vac",
        "value",
        "j",
        "j",
        "inds_vac",
        "xyz_orig_vac",
        "ii",
        "j",
        "j",
        "inds_vac",
        "ener_vac_sub",
        "xyz_vac_sub",
        "np",
        "linspace",
        "argv",
        "argv",
        "np",
        "linspace",
        "argv",
        "argv",
        "a",
        "a",
        "eps_vals",
        "a",
        "a",
        "rmin_vals",
        "product",
        "eps_vals",
        "rmin_vals",
        "new_states",
        "state_coords",
        "append",
        "orig_state",
        "i",
        "new_states",
        "state_coords",
        "append",
        "i",
        "PDBFile",
        "filename",
        "ii",
        "value",
        "xyz_orig_sub",
        "state_coords",
        "len",
        "MBAR_moves",
        "OrderedDict",
        "i",
        "val",
        "MBAR_moves",
        "i",
        "param_types",
        "j",
        "val",
        "j",
        "j",
        "len",
        "param_types",
        "D",
        "new_param_energy",
        "xyz_orig_sub",
        "ii",
        "D_mol",
        "pdb",
        "topology",
        "vecs_orig_sub",
        "ii",
        "T",
        "kB",
        "T",
        "np",
        "array",
        "vol_orig_sub",
        "u_kn",
        "betapV",
        "E_kn",
        "kB",
        "T",
        "betapV",
        "np",
        "shape",
        "u_kn",
        "np",
        "zeros",
        "K",
        "N",
        "n",
        "nBoots_work",
        "k",
        "len",
        "N_k_sub",
        "N_k_sub",
        "k",
        "n",
        "np",
        "array",
        "N_k_sub",
        "k",
        "np",
        "random",
        "randint",
        "N_k_sub",
        "k",
        "size",
        "N_k_sub",
        "k",
        "H_kn",
        "booti",
        "u_kn",
        "booti",
        "u_kn_boots",
        "append",
        "u_kn",
        "n",
        "mbar",
        "f_k",
        "mb",
        "MBAR",
        "u_kn_boot",
        "N_k",
        "verbose",
        "relative_tolerance",
        "initial_f_k",
        "initial_f_k",
        "mbar",
        "computeEffectiveSampleNumber",
        "verbose",
        "N_eff_boots",
        "append",
        "N_eff",
        "mbar",
        "computeExpectations",
        "E_kn_boot",
        "state_dependent",
        "mbar",
        "computeExpectations",
        "vol_sub",
        "state_dependent",
        "V_boots",
        "append",
        "Vol_expect",
        "dV_boots",
        "append",
        "dVol_expect",
        "np",
        "array",
        "E_kn",
        "i",
        "E_expect",
        "i",
        "i",
        "len",
        "E_expect",
        "mbar",
        "computeExpectations",
        "E_fluc_input",
        "state_dependent",
        "E_fluc_expect",
        "kB",
        "T",
        "dE_fluc_expect",
        "kB",
        "T",
        "Cp_boots",
        "append",
        "C_p_expect_meth2",
        "dCp_boots",
        "append",
        "dC_p_expect_meth2",
        "u_kn_boots",
        "N_eff_boots",
        "V_boots",
        "dV_boots",
        "Cp_boots",
        "dCp_boots",
        "np",
        "vstack",
        "Cp_boots",
        "np",
        "vstack",
        "V_boots",
        "np",
        "mean",
        "Cp_boots_vt",
        "a",
        "a",
        "np",
        "shape",
        "Cp_boots_vt",
        "np",
        "std",
        "Cp_boots_vt",
        "a",
        "a",
        "np",
        "shape",
        "Cp_boots_vt",
        "np",
        "mean",
        "V_boots_vt",
        "a",
        "a",
        "np",
        "shape",
        "V_boots_vt",
        "np",
        "std",
        "V_boots_vt",
        "a",
        "a",
        "np",
        "shape",
        "V_boots_vt",
        "len",
        "MBAR_moves",
        "OrderedDict",
        "i",
        "val",
        "MBAR_moves",
        "i",
        "param_types",
        "j",
        "val",
        "j",
        "j",
        "len",
        "param_types",
        "D",
        "new_param_energy_vac",
        "xyz_orig_vac_sub",
        "ii",
        "D_mol",
        "T",
        "np",
        "shape",
        "u_kn_vac",
        "np",
        "zeros",
        "K_vac",
        "N_vac",
        "n",
        "nBoots_work",
        "k",
        "len",
        "N_k_vac_sub",
        "N_k_vac_sub",
        "k",
        "n",
        "np",
        "array",
        "N_k_vac_sub",
        "k",
        "np",
        "random",
        "randint",
        "N_k_vac_sub",
        "k",
        "size",
        "N_k_vac_sub",
        "k",
        "E_kn_vac",
        "booti",
        "u_kn_vac",
        "booti",
        "u_kn_vac_boots",
        "append",
        "u_kn_vac",
        "n",
        "mbar_vac",
        "f_k",
        "mb",
        "MBAR",
        "u_kn_vac",
        "N_k_vac",
        "verbose",
        "relative_tolerance",
        "initial_f_k",
        "initial_f_k",
        "mbar_vac",
        "computeEffectiveSampleNumber",
        "verbose",
        "N_eff_vac_boots",
        "append",
        "N_eff_vac",
        "mbar_vac",
        "computeExpectations",
        "E_kn_vac",
        "state_dependent",
        "np",
        "array",
        "E_kn_vac",
        "i",
        "E_vac_expect",
        "i",
        "i",
        "len",
        "E_vac_expect",
        "mbar_vac",
        "computeExpectations",
        "E_vac_fluc_input",
        "state_dependent",
        "E_vac_fluc_expect",
        "kB",
        "T",
        "dE_vac_fluc_expect",
        "kB",
        "T",
        "Cp_vac_boots",
        "append",
        "C_p_vac_expect_meth2",
        "dCp_vac_boots",
        "append",
        "C_p_vac_expect_meth2",
        "u_kn_vac_boots",
        "N_eff_vac_boots",
        "Cp_vac_boots",
        "dCp_vac_boots",
        "np",
        "vstack",
        "Cp_vac_boots",
        "np",
        "mean",
        "Cp_vac_boots_vt",
        "a",
        "a",
        "np",
        "shape",
        "Cp_boots_vt",
        "np",
        "std",
        "Cp_vac_boots_vt",
        "a",
        "a",
        "np",
        "shape",
        "Cp_boots_vt",
        "bulk",
        "gas",
        "bulk",
        "gas",
        "C_p_expect_meth2",
        "C_p_vac_expect_meth2",
        "np",
        "sqrt",
        "bulk",
        "gas",
        "bulk",
        "gas",
        "dC_p_expect_meth2",
        "dC_p_vac_expect_meth2",
        "bulk",
        "gas",
        "bulk",
        "gas",
        "C_p_bootstrap",
        "C_p_vac_bootstrap",
        "np",
        "sqrt",
        "bulk",
        "gas",
        "bulk",
        "gas",
        "dC_p_bootstrap",
        "dC_p_vac_bootstrap",
        "Vol_expect",
        "C_p_res_expect",
        "dVol_expect",
        "dVol_bootstrap",
        "dC_p_res_expect",
        "dC_p_res_bootstrap",
        "pd",
        "DataFrame",
        "MBAR_moves",
        "Vol_expect",
        "dVol_expect",
        "C_p_res_expect",
        "dC_p_res_expect",
        "Vol_bootstrap",
        "dVol_bootstrap",
        "C_p_res_bootstrap",
        "dC_p_res_bootstrap",
        "N_eff",
        "df",
        "to_csv",
        "argv",
        "argv",
        "argv",
        "argv",
        "sep",
        "open",
        "f",
        "pickle",
        "dump",
        "MBAR_moves",
        "f",
        "open",
        "f",
        "pickle",
        "dump",
        "u_kn",
        "f",
        "open",
        "f",
        "pickle",
        "dump",
        "u_kn_vac",
        "f"
    ],
    "literals": [
        "'coordinates'",
        "'cell_lengths'",
        "'cell_angles'",
        "'coordinates'",
        "'CPU'",
        "'CPU'",
        "'monomers/'",
        "' '",
        "'.mol2'",
        "'cyclohexane'",
        "'forcefield/smirnoff99Frosst.ffxml'",
        "\"Anotha one\"",
        "'monomers/'",
        "'.mol2'",
        "'forcefield/smirnoff99Frosst.ffxml'",
        "\"Anotha one\"",
        "'cyclohexane_250_[#6X4:1]_epsilon0.1094_rmin_half1.9080.nc'",
        "'.'",
        "'_'",
        "'netCDF4Data_cychex_neat/cyclohexane_250_'",
        "'_wAllConstraints_lowPMEco_1fs.nc'",
        "'netCDF4Data_cychex_neat/cyclohexane_'",
        "'_wAllConstraints_vacuum.nc'",
        "'StateData_cychex_neat/cyclohexane_250_'",
        "'_wAllConstraints_lowPMEco_1fs.csv'",
        "'StateData_cychex_neat/cyclohexane_'",
        "'_wAllConstraints_vacuum.csv'",
        "'.'",
        "'_'",
        "'Analyzing Cyclohexane neat liquid trajectories'",
        "\"The trajectory had fewer than %s frames\"",
        "'.'",
        "\"The trajectory had fewer than %s frames\"",
        "','",
        "\"The state data record had fewer than %s frames\"",
        "\"Potential Energy (kJ/mole)\"",
        "\"Density (g/mL)\"",
        "'.'",
        "','",
        "\"The state data record had fewer than %s frames\"",
        "\"Potential Energy (kJ/mole)\"",
        "'epsilon'",
        "'rmin_half'",
        "\"WARNING FLAG\"",
        "\"Sub-sampling\"",
        "\"WARNING FLAG\"",
        "\"Sub-sampling\"",
        "'0.1094'",
        "'1.9080'",
        "'packmol_boxes/cyclohexane_250.pdb'",
        "\"Number of MBAR calculations for liquid cyclohexane: %s\"",
        "\"starting MBAR calculations\"",
        "'State'",
        "' '",
        "\"[#6X4:1]\"",
        "'cyclohexane'",
        "\"Number of MBAR calculations for cyclohexane in vacuum: %s\"",
        "\"starting MBAR calculations\"",
        "'State'",
        "' '",
        "\"[#6X4:1]\"",
        "'cyclohexane'",
        "'param_value'",
        "'Vol_expect (mL/mol)'",
        "'dVol_expect (mL/mol)'",
        "'C_p_res_expect (J/mol/K)'",
        "'dC_p_res_expect (J/mol/K)'",
        "'Vol_bootstrap (mL/mol)'",
        "'dVol_bootstrap (mL/mol)'",
        "'C_p_res_bootstrap (J/mol/K)'",
        "'dC_p_res_bootstrap (J/mol/K)'",
        "'N_eff'",
        "'MBAR_estimates_[6X4:1]_eps'",
        "'-'",
        "'_rmin'",
        "'-'",
        "'_baro10step_wAllConstraints_VVVR_1fs.csv'",
        "';'",
        "'param_states_1fs.pkl'",
        "'wb'",
        "'u_kn_bulk_1fs.pkl'",
        "'wb'",
        "'u_kn_vac_1fs.pkl'",
        "'wb'"
    ],
    "variables": [
        "data",
        "xyz",
        "xyzn",
        "lens",
        "lensn",
        "angs",
        "angsn",
        "data",
        "xyz",
        "xyzn",
        "integrator",
        "platform",
        "context",
        "state",
        "energy",
        "integrator",
        "platform",
        "context",
        "state",
        "energy",
        "kB",
        "beta",
        "mol2files",
        "flavor",
        "mols",
        "mol",
        "ifs",
        "mol",
        "K",
        "ffxml",
        "ff",
        "top",
        "E_kn",
        "u_kn",
        "AlkEthOH_id",
        "newparams",
        "newparams",
        "system",
        "barostat",
        "e",
        "E_kn",
        "k",
        "o",
        "u_kn",
        "k",
        "o",
        "kB",
        "beta",
        "mols",
        "mol",
        "K",
        "verbose",
        "ifs",
        "mol",
        "flavor",
        "ffxml",
        "ff",
        "topology",
        "E_kn",
        "u_kn",
        "AlkEthOH_id",
        "newparams",
        "newparams",
        "system",
        "e",
        "E_kn",
        "k",
        "o",
        "u_kn",
        "k",
        "o",
        "kB",
        "T",
        "N_Av",
        "N_part",
        "files",
        "file_strings",
        "file_str",
        "file_tups_traj",
        "file_tups_traj_vac",
        "file_tups_sd",
        "file_tups_sd_vac",
        "MMcyc",
        "states_traj",
        "states_sd",
        "xyz_orig",
        "xyz_orig_vac",
        "vol_orig",
        "ener_orig",
        "ener_orig_vac",
        "vecs_orig",
        "burnin",
        "burnin_vac",
        "data",
        "xyz",
        "lens",
        "angs",
        "vecs",
        "data_vac",
        "xyz_vac",
        "datasets",
        "merged",
        "datasets",
        "merged",
        "state_coord",
        "param_types",
        "ener_orig_sub",
        "vol_orig_sub",
        "ener_orig_vac_sub",
        "xyz_orig_sub",
        "xyz_orig_vac_sub",
        "vecs_orig_sub",
        "ts",
        "g",
        "g",
        "i",
        "g",
        "i",
        "N_k_sub",
        "ind",
        "inds",
        "ener_sub",
        "vol_sub",
        "xyz_sub",
        "vecs_sub",
        "ener_orig_sub",
        "ii",
        "vol_orig_sub",
        "ii",
        "xyz_orig_sub",
        "ii",
        "vecs_orig_sub",
        "ii",
        "ts",
        "g",
        "g",
        "i",
        "g",
        "i",
        "N_k_vac_sub",
        "ind_vac",
        "inds_vac",
        "ener_vac_sub",
        "xyz_vac_sub",
        "ener_orig_vac_sub",
        "ii",
        "xyz_orig_vac_sub",
        "ii",
        "eps_vals",
        "rmin_vals",
        "eps_vals",
        "rmin_vals",
        "new_states",
        "new_states",
        "orig_state",
        "N_eff_list",
        "param_type_list",
        "param_val_list",
        "state_coords",
        "filename",
        "pdb",
        "MBAR_moves",
        "D",
        "D",
        "D_mol",
        "E_kn",
        "u_kn",
        "betapV",
        "H_kn",
        "K",
        "N",
        "N_k",
        "N_k",
        "N_eff_boots",
        "u_kn_boots",
        "V_boots",
        "dV_boots",
        "Cp_boots",
        "dCp_boots",
        "nBoots_work",
        "booti",
        "booti",
        "E_kn_boot",
        "u_kn_boot",
        "initial_f_k",
        "initial_f_k",
        "mbar",
        "N_eff",
        "E_expect",
        "dE_expect",
        "Vol_expect",
        "dVol_expect",
        "E_fluc_input",
        "E_fluc_expect",
        "dE_fluc_expect",
        "C_p_expect_meth2",
        "dC_p_expect_meth2",
        "u_kn",
        "N_eff",
        "Vol_expect",
        "dVol_expect",
        "C_p_expect_meth2",
        "dC_p_expect_meth2",
        "Cp_boots_vt",
        "V_boots_vt",
        "C_p_bootstrap",
        "dC_p_bootstrap",
        "Vol_bootstrap",
        "dVol_bootstrap",
        "D",
        "D",
        "D_mol",
        "E_kn_vac",
        "u_kn_vac",
        "K_vac",
        "N_vac",
        "N_k_vac",
        "N_k_vac",
        "N_eff_vac_boots",
        "u_kn_vac_boots",
        "Cp_vac_boots",
        "dCp_vac_boots",
        "nBoots_work",
        "booti",
        "booti",
        "E_kn_vac",
        "u_kn_vac",
        "initial_f_k",
        "initial_f_k",
        "mbar_vac",
        "N_eff_vac",
        "E_vac_expect",
        "dE_vac_expect",
        "E_vac_fluc_input",
        "E_vac_fluc_expect",
        "dE_vac_fluc_expect",
        "C_p_vac_expect_meth2",
        "dC_p_vac_expect_meth2",
        "u_kn_vac",
        "N_eff_vac",
        "C_p_vac_expect_meth2",
        "dC_p_vac_expect_meth2",
        "Cp_vac_boots_vt",
        "C_p_vac_bootstrap",
        "dC_p_vac_bootstrap",
        "C_p_res_expect",
        "dC_p_res_expect",
        "C_p_res_bootstrap",
        "dC_p_res_bootstrap",
        "df"
    ],
    "comments": [
        "-------------------------------------------------",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "------------------------------------------------------------------",
        "---------------------------------------------------",
        "-------------------",
        "CONSTANTS",
        "-------------------",
        "Boltzmann constant (Gas constant) in kJ/(mol*K)",
        "-------------------",
        "PARAMETERS",
        "-------------------",
        "Determine number of states we wish to estimate potential energies for",
        "Load forcefield file",
        "Generate a topology",
        "generateTopologyFromOEMol(mol)",
        "-----------------",
        "MAIN",
        "-----------------",
        "Calculate energies",
        "---------------------------------------------------------------------------",
        "-------------------",
        "CONSTANTS",
        "-------------------",
        "Boltzmann constant (Gas constant) in kJ/(mol*K)",
        "-------------------",
        "PARAMETERS",
        "-------------------",
        "Determine number of states we wish to estimate potential energies for",
        "-------------",
        "SYSTEM SETUP",
        "-------------",
        "suppress echos from OEtoolkit functions",
        "This uses parm@frosst atom types, so make sure to use the forcefield-flavor reader",
        "Perceive tripos types",
        "Load forcefield file",
        "Generate a topology",
        "-----------------",
        "MAIN",
        "-----------------",
        "Calculate energies",
        "print(newparams)",
        "-------------------------------------------------------------------------",
        "Boltzmann constant (kJ/mol/K)",
        "Temperature (K)",
        "particles per mole",
        "particles of cyclohexane in box",
        "g/mol",
        "1000",
        "3750",
        "WORKS^^",
        "Define new parameter states we wish to evaluate energies at",
        "len(state_orig))]",
        "Produce the u_kn matrix for MBAR based on the subsampled configurations",
        "E_kn_292, u_kn_292 = new_param_energy(xyz_sub[ii], D_mol, pdb.topology, vecs_orig_sub[ii], T = 292.15)",
        "E_kn_294, u_kn_294 = new_param_energy(xyz_sub[ii], D_mol, pdb.topology, vecs_orig_sub[ii], T = 294.15)",
        "Alter u_kn by adding reduced pV term and create an H_kn matrix",
        "implement bootstrapping to get variance estimates",
        "Initialize MBAR with Newton-Raphson",
        "Use Adaptive Method (Both Newton-Raphson and Self-Consistent, testing which is better)",
        "",
        "start from zero",
        "start from the previous final free energies to speed convergence",
        "Mean of Cp calculated with bootstrapping",
        "Standard error of Cp from bootstrap",
        "Mean of Cp calculated with bootstrapping",
        "Standard error of Cp from bootstrap",
        "len(state_orig))]",
        "Produce the u_kn matrix for MBAR based on the subsampled configurations",
        "E_kn_vac_292, u_kn_vac_292 = new_param_energy_vac(xyz_orig_vac_sub[ii], D_mol, T = 292.15)",
        "E_kn_vac_294, u_kn_vac_294 = new_param_energy_vac(xyz_orig_vac_sub[ii], D_mol, T = 294.15)",
        "Initialize MBAR with Newton-Raphson",
        "Use Adaptive Method (Both Newton-Raphson and Self-Consistent, testing which is better)",
        "",
        "start from zero",
        "start from the previous final free energies to speed convergence",
        "Mean of Cp calculated with bootstrapping",
        "Standard error of Cp from bootstrap",
        "",
        "Calculate residual heat capacity",
        ""
    ],
    "docstrings": [
        "\"\"\"\n    Take multiple .nc files and read in coordinates in order to re-valuate energies based on parameter changes\n\n    Parameters\n    -----------\n    ncfiles - a list of trajectories in netcdf format\n\n    Returns\n    ----------\n    data - all of the data contained in the netcdf file\n    xyzn - the coordinates from the netcdf in angstroms\n    \"\"\"",
        "\"\"\"\n    Return the potential energy.\n    Parameters\n    ----------\n    system : simtk.openmm.System\n        The system to check\n    positions : simtk.unit.Quantity of dimension (natoms,3) with units of length\n        The positions to use\n    vecs : simtk.unit.Quantity of dimension 3 with unit of length\n        Box vectors to use \n    Returns\n    ---------\n    energy\n    \"\"\"",
        "\"\"\"\n    Return the potential energy.\n    Parameters\n    ----------\n    system : simtk.openmm.System\n        The system to check\n    positions : simtk.unit.Quantity of dimension (natoms,3) with units of length\n        The positions to use\n\n    Returns\n    ---------\n    energy\n    \"\"\"",
        "\"\"\"\n    Return potential energies associated with specified parameter perturbations.\n    Parameters\n    ----------\n    coords: coordinates from the simulation(s) ran on the given molecule\n    params:  arbitrary length dictionary of changes in parameter across arbitrary number of states. Highest level key is the molecule AlkEthOH_ID,\n             second level of keys are the new state, the values of each of these subkeys are a arbitrary length list of length 3 lists where the\n             length 3 lists contain information on a parameter to change in the form: [SMIRKS, parameter type, parameter value]. I.e. :\n\n             params = {'AlkEthOH_c1143':{'State 1':[['[6X4:1]-[#1:2]','k','620'],['[6X4:1]-[#6X4:2]','length','1.53'],...],'State 2':[...],...}}\n    P: Pressure of the system. By default set to 1.01 bar.\n    T: Temperature of the system. By default set to 300 K.\n\n    Returns\n    -------\n    E_kn: a kxN matrix of the dimensional energies associated with the forcfield parameters used as input\n    u_kn: a kxN matrix of the dimensionless energies associated with the forcfield parameters used as input\n    \"\"\"",
        "\"\"\"\n    Return potential energies associated with specified parameter perturbations.\n    Parameters\n    ----------\n    coords: coordinates from the simulation(s) ran on the given molecule\n    params:  arbitrary length dictionary of changes in parameter across arbitrary number of states. Highest level key is the molecule AlkEthOH_ID,\n             second level of keys are the new state, the values of each of these subkeys are a arbitrary length list of length 3 lists where the\n             length 3 lists contain information on a parameter to change in the form: [SMIRKS, parameter type, parameter value]. I.e. :\n\n             params = {'AlkEthOH_c1143':{'State 1':[['[6X4:1]-[#1:2]','k','620'],['[6X4:1]-[#6X4:2]','length','1.53'],...],'State 2':[...],...}}\n    T: Temperature of the system. By default set to 300 K.\n\n    Returns\n    -------\n    E_kn: a kxN matrix of the dimensional energies associated with the forcfield parameters used as input\n    u_kn: a kxN matrix of the dimensionless energies associated with the forcfield parameters used as input\n    \"\"\"",
        "\"\"\"\nfiles = nc.glob('MBAR_estimates_*_baro10step_wAllConstraints_VVVR_1fs.csv')\n\neps_values = []\nrmin_values = []\nVol_expect = []\ndVol_expect = []\nC_p_expect = []\ndC_p_expect = []\nVol_boot = []\ndVol_boot = []\nC_p_boot = []\ndC_p_boot = []\nN_eff = []\n\nfor i in files:\n    df = pd.read_csv(i,sep=';')\n    print(i,df.columns)\n    new_cols = ['eps_vals', 'rmin_vals']\n    df[new_cols] = df['param_value'].str[1:-1].str.split(',', expand=True).astype(str)\n    \n    df['eps_vals'] = df.eps_vals.apply(lambda x: x.replace(\"'\",\"\"))\n    df['rmin_vals'] = df.rmin_vals.apply(lambda x: x.replace(\"'\",\"\"))\n    \n    df['eps_vals'] = df.eps_vals.apply(lambda x: float(x))\n    df['rmin_vals'] = df.rmin_vals.apply(lambda x: float(x))\n \n    eps_temp = df.eps_vals.values.tolist()\n    rmin_temp = df.rmin_vals.values.tolist()\n    Vol_temp = df['Vol_expect (mL/mol)'].values.tolist()\n    dVol_temp = df['dVol_expect (mL/mol)'].values.tolist()\n    Cp_temp = df['C_p_res_expect (J/mol/K)'].values.tolist()\n    dCp_temp = df['dC_p_res_expect (J/mol/K)'].values.tolist()\n    Vol_boot_temp = df['Vol_bootstrap (mL/mol)'].values.tolist()\n    dVol_boot_temp = df['dVol_bootstrap (mL/mol)'].values.tolist()\n    Cp_boot_temp = df['C_p_res_bootstrap (J/mol/K)'].values.tolist()\n    dCp_boot_temp = df['dC_p_res_bootstrap (J/mol/K)'].values.tolist()\n    Neff_temp = df.N_eff.values.tolist()\n\n    for i in eps_temp:\n        eps_values.append(i)\n    for i in rmin_temp:\n        rmin_values.append(i)\n    for i in Vol_temp:\n        Vol_expect.append(i)\n    for i in dVol_temp:\n        dVol_expect.append(i)\n    for i in Cp_temp:\n        C_p_expect.append(i)\n    for i in dCp_temp:\n        dC_p_expect.append(i)\n    for i in Vol_boot_temp:\n        Vol_boot.append(i)\n    for i in dVol_boot_temp:\n        dVol_boot.append(i)\n    for i in Cp_boot_temp:\n        C_p_boot.append(i)\n    for i in dCp_boot_temp:\n        dC_p_boot.append(i)\n    for i in Neff_temp:\n        N_eff.append(i)\nprint(len(eps_values),len(rmin_values),len(C_p_expect),len(dVol_boot),len(N_eff))\n\ndf2 = pd.DataFrame(\n                  {'epsilon values': eps_values,\n                   'rmin_half values': rmin_values,\n                   'Vol_expect (mL/mol)': Vol_expect,\n                   'dVol_expect (mL/mol)': dVol_expect,\n                   'C_p_res_expect (J/mol/K)': C_p_expect,\n                   'dC_p_res_expect (J/mol/K)': dC_p_expect,\n                   'Vol_bootstrap (mL/mol)': Vol_boot,\n                   'dVol_bootstrap (mL/mol)': dVol_boot,\n                   'C_p_res_bootstrap (J/mol/K)': C_p_boot,\n                   'dC_p_res_bootstrap (J/mol/K)': dC_p_boot,\n                   'N_eff': N_eff\n                  })\n\ndf2 = df2.drop_duplicates()\n\ndf2.to_csv('MBAR_estimates_[6X4:1]_eps_0.1022-0.1157_rmin_half_1.8870-1.9260_total_baro10step_wAllConstraints_vvvr_1fs.csv',sep=';')\n\"\"\""
    ],
    "functions": [
        "read_traj",
        "read_traj_vac",
        "get_energy",
        "get_energy_vac",
        "new_param_energy",
        "new_param_energy_vac"
    ],
    "classes": []
}