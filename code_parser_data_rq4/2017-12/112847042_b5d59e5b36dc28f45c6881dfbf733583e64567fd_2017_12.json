{
    "identifiers": [
        "java",
        "io",
        "java",
        "nio",
        "charset",
        "StandardCharsets",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Paths",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "N",
        "M",
        "adj",
        "Adjacency_List",
        "filePath",
        "lines",
        "Files",
        "readAllLines",
        "Paths",
        "get",
        "filePath",
        "StandardCharsets",
        "UTF_8",
        "set_1",
        "line",
        "lines",
        "nodesNumber",
        "line",
        "split",
        "nodeNumber",
        "nodesNumber",
        "set_1",
        "add",
        "nodeNumber",
        "N",
        "set_1",
        "size",
        "set_2",
        "line",
        "lines",
        "ordersNumber",
        "line",
        "split",
        "orderNumber",
        "ordersNumber",
        "set_2",
        "add",
        "orderNumber",
        "M",
        "set_2",
        "size",
        "adj",
        "N",
        "Adjacency_List",
        "i",
        "i",
        "N",
        "i",
        "Adjacency_List",
        "put",
        "i",
        "addEdgesToGraph",
        "lines",
        "N",
        "M",
        "N",
        "N",
        "M",
        "M",
        "Adjacency_List",
        "i",
        "i",
        "N",
        "i",
        "Adjacency_List",
        "put",
        "i",
        "lines",
        "line",
        "lines",
        "nodesNumber",
        "line",
        "split",
        "node1Index",
        "parseInt",
        "nodesNumber",
        "node2Index",
        "parseInt",
        "nodesNumber",
        "addEdge",
        "node1Index",
        "node2Index",
        "u",
        "v",
        "start_list",
        "Adjacency_List",
        "get",
        "u",
        "start_list",
        "contains",
        "v",
        "start_list",
        "add",
        "v",
        "end_list",
        "Adjacency_List",
        "get",
        "v",
        "end_list",
        "contains",
        "u",
        "end_list",
        "add",
        "u",
        "v",
        "MAX",
        "Adjacency_List",
        "get",
        "size",
        "MIN",
        "Adjacency_List",
        "get",
        "size",
        "SUM",
        "i",
        "i",
        "N",
        "i",
        "MAX",
        "max",
        "MAX",
        "Adjacency_List",
        "get",
        "i",
        "size",
        "MIN",
        "min",
        "MIN",
        "Adjacency_List",
        "get",
        "i",
        "size",
        "SUM",
        "SUM",
        "Adjacency_List",
        "get",
        "i",
        "size",
        "MAX",
        "MIN",
        "SUM",
        "N",
        "Adjacency_List",
        "get",
        "v",
        "i",
        "i",
        "N",
        "i",
        "i",
        "j",
        "j",
        "j",
        "Adjacency_List",
        "get",
        "i",
        "size",
        "Adjacency_List",
        "get",
        "i",
        "get",
        "j",
        "Adjacency_List",
        "get",
        "i",
        "get",
        "j",
        "N",
        "M",
        "Neighbors",
        "N"
    ],
    "literals": [
        "\" \"",
        "\"\\n\"",
        "\" \"",
        "\"THE MAX DEGREE IS: \"",
        "\"THE MIN DEGREE IS: \"",
        "\"THE AVERAGE DEGREE IS: \"",
        "\"Adjacency List of the graph  is :\"",
        "\"-->\"",
        "\"-->\"",
        "\"THE NUMBER OF NODES IS : \"",
        "\"THE NUMBER OF EDGES IS : \""
    ],
    "variables": [
        "N",
        "M",
        "adj",
        "Adjacency_List"
    ],
    "comments": [
        "Define a class Graph containing three attributes",
        "the order of the graph (number of nodes)",
        "the size of the graph (the number of edges)",
        "//an adjacency list",
        "representation of the",
        "graph",
        "Initializes a graph from a specified input stream and reading the graph",
        "from the graph.txt file",
        "get order from txt",
        "get size from txt",
        "keyboard input",
        "string to int",
        "for (int i = 0; i <= N; i++) {",
        "}",
        "System.out.println(u +\"->\"+start_list);",
        "for (int i = 0; i <= N; i++) {",
        "}",
        "max , min and average DEGREE"
    ],
    "docstrings": [],
    "functions": [
        "Graph",
        "Graph",
        "addEdgesToGraph",
        "addEdge",
        "Neighbors"
    ],
    "classes": [
        "Graph"
    ]
}