{
    "identifiers": [
        "org",
        "apache",
        "storm",
        "daemon",
        "nimbus",
        "org",
        "apache",
        "storm",
        "blobstore",
        "BlobStoreAclHandler",
        "READ",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "ConcurrentHashMap",
        "javax",
        "security",
        "auth",
        "Subject",
        "org",
        "apache",
        "storm",
        "blobstore",
        "BlobStore",
        "org",
        "apache",
        "storm",
        "blobstore",
        "BlobStoreAclHandler",
        "org",
        "apache",
        "storm",
        "generated",
        "AccessControl",
        "org",
        "apache",
        "storm",
        "generated",
        "AuthorizationException",
        "org",
        "apache",
        "storm",
        "generated",
        "KeyAlreadyExistsException",
        "org",
        "apache",
        "storm",
        "generated",
        "KeyNotFoundException",
        "org",
        "apache",
        "storm",
        "generated",
        "ReadableBlobMeta",
        "org",
        "apache",
        "storm",
        "generated",
        "SettableBlobMeta",
        "org",
        "apache",
        "storm",
        "generated",
        "StormTopology",
        "org",
        "apache",
        "storm",
        "utils",
        "ConfigUtils",
        "org",
        "apache",
        "storm",
        "utils",
        "Utils",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "LOG",
        "LoggerFactory",
        "getLogger",
        "acl",
        "data",
        "acl",
        "data",
        "acl",
        "acl",
        "data",
        "data",
        "store",
        "aclHandler",
        "topos",
        "confs",
        "store",
        "conf",
        "store",
        "store",
        "aclHandler",
        "conf",
        "topoId",
        "who",
        "key",
        "ConfigUtils",
        "masterStormCodeKey",
        "topoId",
        "cached",
        "topos",
        "get",
        "topoId",
        "cached",
        "topo",
        "Utils",
        "deserialize",
        "store",
        "readBlob",
        "key",
        "who",
        "meta",
        "store",
        "getBlobMeta",
        "key",
        "who",
        "cached",
        "meta",
        "get_settable",
        "get_acl",
        "topo",
        "previous",
        "topos",
        "putIfAbsent",
        "topoId",
        "cached",
        "previous",
        "cached",
        "previous",
        "aclHandler",
        "hasPermissions",
        "cached",
        "acl",
        "READ",
        "who",
        "key",
        "cached",
        "data",
        "topoId",
        "who",
        "key",
        "ConfigUtils",
        "masterStormCodeKey",
        "topoId",
        "store",
        "deleteBlob",
        "key",
        "who",
        "topos",
        "remove",
        "topoId",
        "topoId",
        "who",
        "topo",
        "key",
        "ConfigUtils",
        "masterStormCodeKey",
        "topoId",
        "acl",
        "BlobStoreAclHandler",
        "DEFAULT",
        "store",
        "createBlob",
        "key",
        "Utils",
        "serialize",
        "topo",
        "acl",
        "who",
        "topos",
        "put",
        "topoId",
        "acl",
        "topo",
        "topoId",
        "who",
        "topo",
        "key",
        "ConfigUtils",
        "masterStormCodeKey",
        "topoId",
        "store",
        "updateBlob",
        "key",
        "Utils",
        "serialize",
        "topo",
        "who",
        "acl",
        "BlobStoreAclHandler",
        "DEFAULT",
        "old",
        "topos",
        "get",
        "topoId",
        "old",
        "acl",
        "old",
        "acl",
        "acl",
        "store",
        "getBlobMeta",
        "key",
        "who",
        "get_settable",
        "get_acl",
        "topos",
        "put",
        "topoId",
        "acl",
        "topo",
        "topoId",
        "who",
        "key",
        "ConfigUtils",
        "masterStormConfKey",
        "topoId",
        "cached",
        "confs",
        "get",
        "topoId",
        "cached",
        "topoConf",
        "Utils",
        "fromCompressedJsonConf",
        "store",
        "readBlob",
        "key",
        "who",
        "meta",
        "store",
        "getBlobMeta",
        "key",
        "who",
        "cached",
        "meta",
        "get_settable",
        "get_acl",
        "topoConf",
        "previous",
        "confs",
        "putIfAbsent",
        "topoId",
        "cached",
        "previous",
        "cached",
        "previous",
        "aclHandler",
        "hasPermissions",
        "cached",
        "acl",
        "READ",
        "who",
        "key",
        "cached",
        "data",
        "topoId",
        "who",
        "key",
        "ConfigUtils",
        "masterStormConfKey",
        "topoId",
        "store",
        "deleteBlob",
        "key",
        "who",
        "confs",
        "remove",
        "topoId",
        "topoId",
        "who",
        "topoConf",
        "key",
        "ConfigUtils",
        "masterStormConfKey",
        "topoId",
        "acl",
        "BlobStoreAclHandler",
        "DEFAULT",
        "store",
        "createBlob",
        "key",
        "Utils",
        "toCompressedJsonConf",
        "topoConf",
        "acl",
        "who",
        "confs",
        "put",
        "topoId",
        "acl",
        "topoConf",
        "topoId",
        "who",
        "topoConf",
        "key",
        "ConfigUtils",
        "masterStormConfKey",
        "topoId",
        "store",
        "updateBlob",
        "key",
        "Utils",
        "toCompressedJsonConf",
        "topoConf",
        "who",
        "acl",
        "BlobStoreAclHandler",
        "DEFAULT",
        "old",
        "confs",
        "get",
        "topoId",
        "old",
        "acl",
        "old",
        "acl",
        "acl",
        "store",
        "getBlobMeta",
        "key",
        "who",
        "get_settable",
        "get_acl",
        "confs",
        "put",
        "topoId",
        "acl",
        "topoConf",
        "confs",
        "clear",
        "topos",
        "clear"
    ],
    "literals": [],
    "variables": [
        "acl",
        "data",
        "store",
        "aclHandler"
    ],
    "comments": [
        "We need to read a new one",
        "Check if the user is allowed to read this",
        "We need to read a new one",
        "Check if the user is allowed to read this"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * <p>\n * http://www.apache.org/licenses/LICENSE-2.0\n * <p>\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Cache topologies and topology confs from the blob store.\n * Makes reading this faster because it can skip\n * deserialization in many cases.",
        "* Read a topology.\n     * @param topoId the id of the topology to read\n     * @param who who to read it as\n     * @return the deserialized topology.\n     * @throws IOException on any error while reading the blob.\n     * @throws AuthorizationException if who is not allowed to read the blob\n     * @throws KeyNotFoundException if the blob could not be found",
        "* Delete a topology when we are done.\n     * @param topoId the id of the topology\n     * @param who who is deleting it\n     * @throws AuthorizationException if who is not allowed to delete the blob\n     * @throws KeyNotFoundException if the blob could not be found",
        "* Add a new topology.\n     * @param topoId the id of the topology\n     * @param who who is doing it\n     * @param topo the topology itself\n     * @throws AuthorizationException if who is not allowed to add a topology\n     * @throws KeyAlreadyExistsException if the topology already exists\n     * @throws IOException on any error interacting with the blob store",
        "* Update an existing topology .\n     * @param topoId the id of the topology\n     * @param who who is doing it\n     * @param topo the new topology to save\n     * @throws AuthorizationException if who is not allowed to update a topology\n     * @throws KeyNotFoundException if the topology is not found in the blob store\n     * @throws IOException on any error interacting with the blob store",
        "* Read a topology conf.\n     * @param topoId the id of the topology to read the conf for\n     * @param who who to read it as\n     * @return the deserialized config.\n     * @throws IOException on any error while reading the blob.\n     * @throws AuthorizationException if who is not allowed to read the blob\n     * @throws KeyNotFoundException if the blob could not be found",
        "* Delete a topology conf when we are done.\n     * @param topoId the id of the topology\n     * @param who who is deleting it\n     * @throws AuthorizationException if who is not allowed to delete the topo conf\n     * @throws KeyNotFoundException if the topo conf is not found in the blob store",
        "* Add a new topology config.\n     * @param topoId the id of the topology\n     * @param who who is doing it\n     * @param topoConf the topology conf itself\n     * @throws AuthorizationException if who is not allowed to add a topology conf\n     * @throws KeyAlreadyExistsException if the toplogy conf already exists in the blob store\n     * @throws IOException on any error interacting with the blob store.",
        "* Update an existing topology conf.\n     * @param topoId the id of the topology\n     * @param who who is doing it\n     * @param topoConf the new topology conf to save\n     * @throws AuthorizationException if who is not allowed to update the topology conf\n     * @throws KeyNotFoundException if the topology conf is not found in the blob store\n     * @throws IOException on any error interacting with the blob store.",
        "* Clear all entries from the Cache. This typically happens right after becoming a leader, just to be sure\n     * nothing has changed while we were not the leader."
    ],
    "functions": [
        "WithAcl",
        "TopoCache",
        "StormTopology",
        "readTopology",
        "deleteTopology",
        "addTopology",
        "updateTopology",
        "readTopoConf",
        "deleteTopoConf",
        "addTopoConf",
        "updateTopoConf",
        "clear"
    ],
    "classes": [
        "TopoCache",
        "WithAcl"
    ]
}