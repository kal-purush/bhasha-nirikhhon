{
    "identifiers": [
        "root",
        "factory",
        "define",
        "define",
        "define",
        "p5",
        "factory",
        "p5",
        "exports",
        "factory",
        "require",
        "factory",
        "root",
        "p5",
        "p5",
        "e",
        "p",
        "getContainer",
        "p",
        "e",
        "e",
        "e",
        "res",
        "container",
        "e",
        "res",
        "res",
        "res",
        "res",
        "e",
        "e",
        "e",
        "res",
        "container",
        "e",
        "res",
        "container",
        "e",
        "res",
        "res",
        "res",
        "res",
        "res",
        "wrapElement",
        "res",
        "p5",
        "e",
        "p",
        "getContainer",
        "p",
        "e",
        "e",
        "e",
        "res",
        "container",
        "e",
        "res",
        "container",
        "e",
        "res",
        "j",
        "res",
        "j",
        "wrapElement",
        "res",
        "j",
        "arr",
        "obj",
        "arr",
        "p",
        "p",
        "p",
        "p",
        "p",
        "container",
        "p",
        "p",
        "p5",
        "container",
        "p",
        "p",
        "HTMLElement",
        "container",
        "p",
        "container",
        "elt",
        "elt",
        "elt",
        "p5",
        "elt",
        "converted",
        "arguments",
        "arguments",
        "converted",
        "elt",
        "elt",
        "p5",
        "elt",
        "elt",
        "createSelect",
        "p5",
        "elt",
        "p5",
        "elt",
        "p5",
        "e",
        "i",
        "i",
        "i",
        "HTMLCanvasElement",
        "i",
        "elt",
        "pInst",
        "media",
        "pInst",
        "pInst",
        "node",
        "elt",
        "media",
        "p5",
        "elt",
        "p5",
        "elt",
        "pInst",
        "c",
        "c",
        "tags",
        "tag",
        "tag",
        "tag",
        "p5",
        "method",
        "html",
        "tag",
        "elt",
        "html",
        "html",
        "addElement",
        "elt",
        "p5",
        "elt",
        "elt",
        "elt",
        "elt",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "elt",
        "args",
        "args",
        "args",
        "elt",
        "args",
        "elt",
        "setAttrs",
        "addElement",
        "elt",
        "p5",
        "href",
        "html",
        "target",
        "elt",
        "href",
        "elt",
        "html",
        "target",
        "elt",
        "target",
        "addElement",
        "elt",
        "p5",
        "min",
        "max",
        "value",
        "step",
        "elt",
        "elt",
        "min",
        "elt",
        "max",
        "step",
        "elt",
        "step",
        "elt",
        "step",
        "value",
        "elt",
        "value",
        "addElement",
        "elt",
        "p5",
        "label",
        "value",
        "elt",
        "label",
        "value",
        "elt",
        "value",
        "addElement",
        "elt",
        "p5",
        "checkbox",
        "elt",
        "checkbox",
        "addElement",
        "elt",
        "cb",
        "arguments",
        "cb",
        "arguments",
        "cb",
        "cb",
        "val",
        "val",
        "arguments",
        "checkbox",
        "ran",
        "label",
        "ran",
        "arguments",
        "label",
        "arguments",
        "elt",
        "label",
        "arguments",
        "checkbox",
        "p5",
        "arguments",
        "arg",
        "arg",
        "arg",
        "elt",
        "arg",
        "elt",
        "arg",
        "arg",
        "elt",
        "addElement",
        "elt",
        "name",
        "value",
        "i",
        "i",
        "i",
        "name",
        "index",
        "i",
        "index",
        "value",
        "index",
        "index",
        "index",
        "index",
        "index",
        "value",
        "index",
        "value",
        "opt",
        "name",
        "arguments",
        "opt",
        "value",
        "opt",
        "name",
        "elt",
        "opt",
        "value",
        "arguments",
        "i",
        "i",
        "value",
        "i",
        "i",
        "arg",
        "i",
        "i",
        "arr",
        "i",
        "arr",
        "p5",
        "radios",
        "radios",
        "radios",
        "radios",
        "count",
        "i",
        "length",
        "i",
        "current",
        "radios",
        "i",
        "prev",
        "current",
        "count",
        "prev",
        "current",
        "radios",
        "count",
        "addElement",
        "elt",
        "name",
        "value",
        "opt",
        "opt",
        "name",
        "arguments",
        "opt",
        "value",
        "opt",
        "name",
        "opt",
        "count",
        "elt",
        "opt",
        "name",
        "times",
        "opt",
        "count",
        "times",
        "label",
        "count",
        "times",
        "label",
        "name",
        "elt",
        "label",
        "opt",
        "arguments",
        "i",
        "length",
        "i",
        "i",
        "arguments",
        "i",
        "i",
        "length",
        "i",
        "i",
        "i",
        "arguments",
        "i",
        "length",
        "i",
        "i",
        "arguments",
        "i",
        "i",
        "length",
        "i",
        "i",
        "i",
        "p5",
        "value",
        "elt",
        "value",
        "elt",
        "value",
        "addElement",
        "elt",
        "p5",
        "callback",
        "multiple",
        "elt",
        "multiple",
        "elt",
        "evt",
        "evt",
        "i",
        "files",
        "i",
        "files",
        "i",
        "FileReader",
        "theFile",
        "p5",
        "theFile",
        "e",
        "p5file",
        "e",
        "callback",
        "p5file",
        "reader",
        "makeLoader",
        "f",
        "f",
        "reader",
        "f",
        "reader",
        "f",
        "elt",
        "handleFileSelect",
        "addElement",
        "elt",
        "pInst",
        "src",
        "callback",
        "src",
        "src",
        "src",
        "src",
        "i",
        "src",
        "i",
        "source",
        "src",
        "i",
        "elt",
        "source",
        "callback",
        "callback",
        "elt",
        "callbackHandler",
        "elt",
        "callbackHandler",
        "addElement",
        "elt",
        "pInst",
        "c",
        "elt",
        "c",
        "elt",
        "c",
        "elt",
        "c",
        "c",
        "elt",
        "c",
        "c",
        "elt",
        "c",
        "c",
        "p5",
        "src",
        "callback",
        "createMedia",
        "src",
        "callback",
        "p5",
        "src",
        "callback",
        "createMedia",
        "src",
        "callback",
        "p5",
        "p5",
        "navigator",
        "navigator",
        "navigator",
        "navigator",
        "navigator",
        "p5",
        "i",
        "arguments",
        "i",
        "arguments",
        "i",
        "p5",
        "useAudio",
        "arguments",
        "i",
        "p5",
        "useVideo",
        "arguments",
        "i",
        "constraints",
        "arguments",
        "i",
        "arguments",
        "i",
        "cb",
        "arguments",
        "i",
        "navigator",
        "constraints",
        "constraints",
        "useVideo",
        "useAudio",
        "navigator",
        "constraints",
        "stream",
        "elt",
        "stream",
        "cb",
        "cb",
        "stream",
        "e",
        "e",
        "addElement",
        "elt",
        "c",
        "elt",
        "elt",
        "elt",
        "c",
        "elt",
        "elt",
        "c",
        "elt",
        "elt",
        "c",
        "c",
        "elt",
        "c",
        "c",
        "elt",
        "c",
        "c",
        "p5",
        "tag",
        "content",
        "tag",
        "content",
        "elt",
        "content",
        "addElement",
        "elt",
        "p5",
        "c",
        "c",
        "c",
        "p5",
        "c",
        "c",
        "regex",
        "p5",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "p5",
        "c",
        "c",
        "c",
        "p5",
        "align",
        "hidden",
        "parentHidden",
        "pos",
        "pos",
        "align",
        "align",
        "wOffset",
        "hOffset",
        "align",
        "wOffset",
        "y",
        "align",
        "x",
        "hOffset",
        "style",
        "hidden",
        "parentHidden",
        "p5",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "p5",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "p5",
        "transform",
        "transform",
        "transform",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "transform",
        "p5",
        "transform",
        "transform",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "transform",
        "p5",
        "prop",
        "val",
        "val",
        "p5",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val",
        "prop",
        "styles",
        "prop",
        "style",
        "prop",
        "i",
        "attrs",
        "i",
        "attrs",
        "i",
        "parts",
        "parts",
        "parts",
        "parts",
        "prop",
        "prop",
        "prop",
        "arguments",
        "trans",
        "trans",
        "f",
        "arguments",
        "prop",
        "val",
        "prop",
        "prop",
        "prop",
        "prop",
        "val",
        "prop",
        "parseInt",
        "numVal",
        "p5",
        "attr",
        "value",
        "value",
        "attr",
        "i",
        "i",
        "i",
        "attr",
        "value",
        "value",
        "attr",
        "attr",
        "value",
        "p5",
        "attr",
        "i",
        "i",
        "i",
        "attr",
        "attr",
        "p5",
        "arguments",
        "arguments",
        "parseFloat",
        "p5",
        "p5",
        "p5",
        "w",
        "h",
        "arguments",
        "p5",
        "aW",
        "AUTO",
        "aH",
        "AUTO",
        "aW",
        "AUTO",
        "aW",
        "h",
        "aH",
        "AUTO",
        "aH",
        "w",
        "HTMLCanvasElement",
        "prop",
        "k",
        "j",
        "prop",
        "k",
        "prop",
        "aW",
        "aH",
        "aW",
        "aH",
        "prop",
        "j",
        "prop",
        "j",
        "prop",
        "aW",
        "aH",
        "aW",
        "aH",
        "aW",
        "aH",
        "p5",
        "ev",
        "ev",
        "ev",
        "p5",
        "elt",
        "pInst",
        "p5",
        "elt",
        "pInst",
        "firstChildSrc",
        "srcVal",
        "firstChildSrc",
        "ret",
        "newValue",
        "i",
        "i",
        "i",
        "source",
        "newValue",
        "elt",
        "source",
        "newValue",
        "p5",
        "p5",
        "p5",
        "p5",
        "p5",
        "p5",
        "p5",
        "p5",
        "val",
        "val",
        "p5",
        "val",
        "val",
        "val",
        "p5",
        "val",
        "val",
        "val",
        "p5",
        "val",
        "val",
        "val",
        "p5",
        "p5",
        "p5",
        "p5",
        "p5",
        "x",
        "y",
        "w",
        "h",
        "p5",
        "x",
        "y",
        "w",
        "h",
        "p5",
        "x",
        "y",
        "w",
        "h",
        "p5",
        "x",
        "y",
        "w",
        "h",
        "x",
        "p5",
        "w",
        "p5",
        "x",
        "y",
        "w",
        "h",
        "p5",
        "x",
        "y",
        "imgOrCol",
        "p5",
        "x",
        "y",
        "imgOrCol",
        "p5",
        "p5",
        "arguments",
        "p5",
        "p5",
        "arguments",
        "p5",
        "callback",
        "callback",
        "p5",
        "obj",
        "p5",
        "audioContext",
        "p5",
        "masterOutput",
        "p5",
        "audioContext",
        "obj",
        "masterOutput",
        "audioContext",
        "e",
        "audioContext",
        "masterOutput",
        "obj",
        "obj",
        "obj",
        "obj",
        "masterOutput",
        "p5",
        "p5",
        "p5",
        "p5",
        "time",
        "callback",
        "val",
        "Cue",
        "callback",
        "time",
        "id",
        "val",
        "cue",
        "id",
        "p5",
        "id",
        "i",
        "i",
        "i",
        "id",
        "id",
        "i",
        "p5",
        "p5",
        "i",
        "i",
        "i",
        "i",
        "callbackTime",
        "callbackTime",
        "playbackTime",
        "i",
        "val",
        "playbackTime",
        "callback",
        "time",
        "id",
        "val",
        "callback",
        "time",
        "id",
        "val",
        "p5",
        "file",
        "pInst",
        "file",
        "pInst",
        "file",
        "typeList",
        "typeList",
        "file",
        "file"
    ],
    "literals": [
        "'function'",
        "'p5.dom'",
        "'p5'",
        "'object'",
        "'../p5'",
        "'p5'",
        "'.'",
        "'#'",
        "'.'",
        "'string'",
        "'#'",
        "\"INPUT\"",
        "\"checkbox\"",
        "\"VIDEO\"",
        "\"AUDIO\"",
        "\"SELECT\"",
        "'div'",
        "'p'",
        "'span'",
        "'create'",
        "\"\"",
        "'img'",
        "'function'",
        "'function'",
        "'string'",
        "'a'",
        "'input'",
        "'range'",
        "\"number\"",
        "'button'",
        "'div'",
        "'input'",
        "'checkbox'",
        "'input'",
        "'label'",
        "'id'",
        "'object'",
        "'SELECT'",
        "'select'",
        "'boolean'",
        "'multiple'",
        "'true'",
        "'option'",
        "\"input[type=radio]\"",
        "'div'",
        "'input'",
        "'radio'",
        "'name'",
        "\"defaultradio\"",
        "'label'",
        "'id'",
        "\"defaultradio\"",
        "\"-\"",
        "\"defaultradio\"",
        "\"-\"",
        "\"\"",
        "'input'",
        "'text'",
        "'input'",
        "'file'",
        "'multiple'",
        "'text'",
        "'change'",
        "'The File APIs are not fully supported in this browser. Cannot create element.'",
        "''",
        "'string'",
        "'source'",
        "'undefined'",
        "'canplaythrough'",
        "'canplaythrough'",
        "'loadedmetadata'",
        "'video'",
        "'audio'",
        "'video'",
        "'audio'",
        "'object'",
        "'function'",
        "'video'",
        "'getUserMedia not supported in this browser'",
        "'loadedmetadata'",
        "'undefined'",
        "' '",
        "'(?:^|\\\\s)'",
        "'(?!\\\\S)'",
        "''",
        "\"\"",
        "'undefined'",
        "'string'",
        "'#'",
        "'none'",
        "'none'",
        "'block'",
        "'block'",
        "'both'",
        "'horizontal'",
        "'vertical'",
        "'display'",
        "'none'",
        "'x'",
        "'y'",
        "'absolute'",
        "'px'",
        "'px'",
        "'absolute'",
        "''",
        "''",
        "''",
        "'translate('",
        "'px, '",
        "'px)'",
        "'translate3d('",
        "'px,'",
        "'px,'",
        "'px)'",
        "'1000px'",
        "'px'",
        "''",
        "''",
        "''",
        "'rotate('",
        "'deg)'",
        "'rotate('",
        "'deg, '",
        "'deg)'",
        "'rotateX('",
        "'deg)'",
        "'rotateY('",
        "'deg)'",
        "'rotateZ('",
        "'deg)'",
        "'rgba('",
        "','",
        "','",
        "','",
        "')'",
        "'undefined'",
        "':'",
        "';'",
        "':'",
        "'rotate'",
        "'translate'",
        "'position'",
        "'_'",
        "'width'",
        "'height'",
        "'left'",
        "'top'",
        "''",
        "'checkbox'",
        "'radio'",
        "'undefined'",
        "'undefined'",
        "'checkbox'",
        "'radio'",
        "'range'",
        "'block'",
        "'none'",
        "'width'",
        "'height'",
        "'2d'",
        "'width'",
        "'height'",
        "'style'",
        "'width:'",
        "'px; height:'",
        "'px'",
        "'2d'",
        "'px'",
        "'px'",
        "'width'",
        "'height'",
        "'anonymous'",
        "'src'",
        "''",
        "'source'",
        "'loop'",
        "'loop'",
        "'autoplay'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'canvas'",
        "'2d'",
        "'undefined'",
        "'function'",
        "'connect() is meant to be used with Web Audio API or p5.sound.js'",
        "'nothing to disconnect'",
        "'text-align'",
        "'inherit'",
        "'/'"
    ],
    "variables": [
        "res",
        "container",
        "arr",
        "res",
        "container",
        "j",
        "obj",
        "container",
        "converted",
        "i",
        "node",
        "c",
        "tags",
        "method",
        "elt",
        "elt",
        "args",
        "arguments",
        "setAttrs",
        "elt",
        "elt",
        "elt",
        "elt",
        "checkbox",
        "cb",
        "ran",
        "label",
        "elt",
        "arg",
        "index",
        "i",
        "opt",
        "arr",
        "i",
        "i",
        "radios",
        "count",
        "length",
        "prev",
        "current",
        "i",
        "elt",
        "times",
        "opt",
        "ran",
        "label",
        "length",
        "i",
        "i",
        "length",
        "i",
        "i",
        "elt",
        "elt",
        "files",
        "i",
        "f",
        "reader",
        "p5file",
        "elt",
        "src",
        "i",
        "source",
        "callbackHandler",
        "c",
        "useVideo",
        "useAudio",
        "constraints",
        "cb",
        "i",
        "elt",
        "c",
        "elt",
        "regex",
        "style",
        "hidden",
        "parentHidden",
        "pos",
        "wOffset",
        "hOffset",
        "y",
        "x",
        "transform",
        "transform",
        "transform",
        "styles",
        "style",
        "attrs",
        "i",
        "parts",
        "trans",
        "f",
        "numVal",
        "i",
        "i",
        "aW",
        "w",
        "aH",
        "h",
        "AUTO",
        "j",
        "k",
        "firstChildSrc",
        "srcVal",
        "ret",
        "i",
        "source",
        "audioContext",
        "masterOutput",
        "id",
        "cue",
        "i",
        "playbackTime",
        "i",
        "callbackTime",
        "val",
        "Cue",
        "typeList"
    ],
    "comments": [
        "! p5.dom.js v0.3.4 Aug 11, 2017",
        "=============================================================================",
        "p5 additions",
        "=============================================================================",
        "INPUT *",
        "smallest valid step",
        "checkbox must be wrapped in p5.Element before label so that label appears after",
        "see if there is already an option with this name",
        "if there is an option with this name we will modify it",
        "if the user passed in false then delete that option",
        "otherwise if the name and value are the same then change both",
        "otherwise just change the value",
        "if it doesn't exist make it",
        "Is the file stuff supported?",
        "Yup, we're ok and make an input file selector",
        "If we get a second argument that evaluates to true",
        "then we are looking for multiple files",
        "Anything gets the job done",
        "Function to handle when a file is selected",
        "We're simplifying life and assuming that we always",
        "want to load every selected file",
        "These are the files",
        "Load each one and trigger a callback",
        "Making a p5.File object",
        "Text or data?",
        "This should likely be improved",
        "Now let's handle when a file was selected",
        "VIDEO STUFF *",
        "allow src to be empty",
        "set width and height onload metadata",
        "set elt width and height if not set",
        "AUDIO STUFF *",
        "CAMERA STUFF *",
        "set width and height onload metadata",
        "=============================================================================",
        "p5.Element additions",
        "=============================================================================",
        "PEND don't add class more than once",
        "var regex = new RegExp('[^a-zA-Z\\d:]?'+c+'[^a-zA-Z\\d:]?');",
        "if (this.elt.className.search(/[^a-zA-Z\\d:]?hi[^a-zA-Z\\d:]?/) === -1) {",
        "}",
        "prettify (optional)",
        "Helper method called by p5.Element.style()",
        "save out initial non-translate transform styling",
        "add any extra transform styling back on end",
        "Helper method called by p5.Element.style()",
        "save out initial non-rotate transform styling",
        "add remaining transform back on",
        "pend: is this necessary?",
        "handling for checkboxes and radios to ensure options get",
        "attributes not divs",
        "set diff for cnv vs normal div",
        "main canvas associated with p5 instance",
        "deregister events",
        "=============================================================================",
        "p5.MediaElement additions",
        "=============================================================================",
        "private _onended callback, set by the method: onended(callback)",
        "in Chrome, playback cannot resume after being stopped and must reload",
        "wait for metadata for w/h",
        "wait for metadata",
        "wait for metadata",
        "wait for metadata",
        "if p5.sound exists, same audio context",
        "create a Web Audio MediaElementAudioSourceNode if none already exists",
        "connect to master output when this method is first called",
        "connect to object if provided",
        "otherwise connect to master output of p5.sound / AudioContext",
        "must set style for the element to show on the page",
        "private method that checks for cues to be fired if events",
        "have been scheduled using addCue(callback, time).",
        "pass the scheduled callbackTime as parameter to the callback",
        "Cue inspired by JavaScript setTimeout, and the",
        "Tone.js Transport Timeline Event, MIT License Yotam Mann 2015 tonejs.org",
        "=============================================================================",
        "p5.File",
        "=============================================================================",
        "Splitting out the file type into two components",
        "This makes determining if image or text etc simpler"
    ],
    "docstrings": [
        "* <p>The web is much more than just canvas and p5.dom makes it easy to interact\n * with other HTML5 objects, including text, hyperlink, image, input, video,\n * audio, and webcam.</p>\n * <p>There is a set of creation methods, DOM manipulation methods, and\n * an extended p5.Element that supports a range of HTML elements. See the\n * <a href=\"https://github.com/processing/p5.js/wiki/Beyond-the-canvas\">\n * beyond the canvas tutorial</a> for a full overview of how this addon works.\n *\n * <p>Methods and properties shown in black are part of the p5.js core, items in\n * blue are part of the p5.dom library. You will need to include an extra file\n * in order to access the blue functions. See the\n * <a href=\"http://p5js.org/libraries/#using-a-library\">using a library</a>\n * section for information on how to include this library. p5.dom comes with\n * <a href=\"http://p5js.org/download\">p5 complete</a> or you can download the single file\n * <a href=\"https://raw.githubusercontent.com/lmccart/p5.js/master/lib/addons/p5.dom.js\">\n * here</a>.</p>\n * <p>See <a href=\"https://github.com/processing/p5.js/wiki/Beyond-the-canvas\">tutorial: beyond the canvas</a>\n * for more info on how to use this libary.</a>\n *\n * @module p5.dom\n * @submodule p5.dom\n * @for p5.dom\n * @main",
        "* Searches the page for an element with the given ID, class, or tag name (using the '#' or '.'\n   * prefixes to specify an ID or class respectively, and none for a tag) and returns it as\n   * a p5.Element. If a class or tag name is given with more than 1 element,\n   * only the first element will be returned.\n   * The DOM node itself can be accessed with .elt.\n   * Returns null if none found. You can also specify a container to search within.\n   *\n   * @method select\n   * @param  {String} name id, class, or tag name of element to search for\n   * @param  {String} [container] id, p5.Element, or HTML element to search within\n   * @return {Object|p5.Element|Null} p5.Element containing node found\n   * @example\n   * <div ><code class='norender'>\n   * function setup() {\n   *   createCanvas(100,100);\n   *   //translates canvas 50px down\n   *   select('canvas').position(100, 100);\n   * }\n   * </code></div>\n   * <div ><code class='norender'>\n   * // these are all valid calls to select()\n   * var a = select('#moo');\n   * var b = select('#blah', '#myContainer');\n   * var c = select('#foo', b);\n   * var d = document.getElementById('beep');\n   * var e = select('p', d);\n   * </code></div>\n   *",
        "* Searches the page for elements with the given class or tag name (using the '.' prefix\n   * to specify a class and no prefix for a tag) and returns them as p5.Elements\n   * in an array.\n   * The DOM node itself can be accessed with .elt.\n   * Returns an empty array if none found.\n   * You can also specify a container to search within.\n   *\n   * @method selectAll\n   * @param  {String} name class or tag name of elements to search for\n   * @param  {String} [container] id, p5.Element, or HTML element to search within\n   * @return {Array} Array of p5.Elements containing nodes found\n   * @example\n   * <div class='norender'><code>\n   * function setup() {\n   *   createButton('btn');\n   *   createButton('2nd btn');\n   *   createButton('3rd btn');\n   *   var buttons = selectAll('button');\n   *\n   *   for (var i = 0; i < buttons.length; i++){\n   *     buttons[i].size(100,100);\n   *   }\n   * }\n   * </code></div>\n   * <div class='norender'><code>\n   * // these are all valid calls to selectAll()\n   * var a = selectAll('.moo');\n   * var b = selectAll('div');\n   * var c = selectAll('button', '#myContainer');\n   * var d = select('#container');\n   * var e = selectAll('p', d);\n   * var f = document.getElementById('beep');\n   * var g = select('.blah', f);\n   * </code></div>\n   *",
        "* Helper function for select and selectAll",
        "* Helper function for getElement and getElements.",
        "* Removes all elements created by p5, except any canvas / graphics\n   * elements created by createCanvas or createGraphics.\n   * Event handlers are removed, and element is removed from the DOM.\n   * @method removeElements\n   * @example\n   * <div class='norender'><code>\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   createDiv('this is some text');\n   *   createP('this is a paragraph');\n   * }\n   * function mousePressed() {\n   *   removeElements(); // this will remove the div and p, not canvas\n   * }\n   * </code></div>\n   *",
        "* Helpers for create methods.",
        "* Creates a &lt;div&gt;&lt;/div&gt; element in the DOM with given inner HTML.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createDiv\n   * @param  {String} [html] inner HTML for element created\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div class='norender'><code>\n   * var myDiv;\n   * function setup() {\n   *   myDiv = createDiv('this is some text');\n   * }\n   * </code></div>",
        "* Creates a &lt;p&gt;&lt;/p&gt; element in the DOM with given inner HTML. Used\n   * for paragraph length text.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createP\n   * @param  {String} [html] inner HTML for element created\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div class='norender'><code>\n   * var myP;\n   * function setup() {\n   *   myP = createP('this is some text');\n   * }\n   * </code></div>",
        "* Creates a &lt;span&gt;&lt;/span&gt; element in the DOM with given inner HTML.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createSpan\n   * @param  {String} [html] inner HTML for element created\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div class='norender'><code>\n   * var mySpan;\n   * function setup() {\n   *   mySpan = createSpan('this is some text');\n   * }\n   * </code></div>",
        "* Creates an &lt;img&gt; element in the DOM with given src and\n   * alternate text.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createImg\n   * @param  {String} src src path or url for image\n   * @param  {String} [alt] alternate text to be used if image does not load\n   * @param  {Function} [successCallback] callback to be called once image data is loaded\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div class='norender'><code>\n   * var img;\n   * function setup() {\n   *   img = createImg('http://p5js.org/img/asterisk-01.png');\n   * }\n   * </code></div>",
        "* Creates an &lt;a&gt;&lt;/a&gt; element in the DOM for including a hyperlink.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createA\n   * @param  {String} href       url of page to link to\n   * @param  {String} html       inner html of link element to display\n   * @param  {String} [target]   target where new link should open,\n   *                             could be _blank, _self, _parent, _top.\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div class='norender'><code>\n   * var myLink;\n   * function setup() {\n   *   myLink = createA('http://p5js.org/', 'this is a link');\n   * }\n   * </code></div>",
        "* Creates a slider &lt;input&gt;&lt;/input&gt; element in the DOM.\n   * Use .size() to set the display length of the slider.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createSlider\n   * @param  {Number} min minimum value of the slider\n   * @param  {Number} max maximum value of the slider\n   * @param  {Number} [value] default value of the slider\n   * @param  {Number} [step] step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div><code>\n   * var slider;\n   * function setup() {\n   *   slider = createSlider(0, 255, 100);\n   *   slider.position(10, 10);\n   *   slider.style('width', '80px');\n   * }\n   *\n   * function draw() {\n   *   var val = slider.value();\n   *   background(val);\n   * }\n   * </code></div>\n   *\n   * <div><code>\n   * var slider;\n   * function setup() {\n   *   colorMode(HSB);\n   *   slider = createSlider(0, 360, 60, 40);\n   *   slider.position(10, 10);\n   *   slider.style('width', '80px');\n   * }\n   *\n   * function draw() {\n   *   var val = slider.value();\n   *   background(val, 100, 100, 1);\n   * }\n   * </code></div>",
        "* Creates a &lt;button&gt;&lt;/button&gt; element in the DOM.\n   * Use .size() to set the display size of the button.\n   * Use .mousePressed() to specify behavior on press.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createButton\n   * @param  {String} label label displayed on the button\n   * @param  {String} [value] value of the button\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div class='norender'><code>\n   * var button;\n   * function setup() {\n   *   createCanvas(100, 100);\n   *   background(0);\n   *   button = createButton('click me');\n   *   button.position(19, 19);\n   *   button.mousePressed(changeBG);\n   * }\n   *\n   * function changeBG() {\n   *   var val = random(255);\n   *   background(val);\n   * }\n   * </code></div>",
        "* Creates a checkbox &lt;input&gt;&lt;/input&gt; element in the DOM.\n   * Calling .checked() on a checkbox returns if it is checked or not\n   *\n   * @method createCheckbox\n   * @param  {String} [label] label displayed after checkbox\n   * @param  {boolean} [value] value of the checkbox; checked is true, unchecked is false.Unchecked if no value given\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div class='norender'><code>\n   * var checkbox;\n   *\n   * function setup() {\n   *   checkbox = createCheckbox('label', false);\n   *   checkbox.changed(myCheckedEvent);\n   * }\n   *\n   * function myCheckedEvent() {\n   *   if (this.checked()) {\n   *     console.log(\"Checking!\");\n   *   } else {\n   *     console.log(\"Unchecking!\");\n   *   }\n   * }\n   * </code></div>",
        "* Creates a dropdown menu &lt;select&gt;&lt;/select&gt; element in the DOM.\n   * It also helps to assign select-box methods to p5.Element when selecting existing select box\n   * @method createSelect\n   * @param {boolean} [multiple] true if dropdown should support multiple selections\n   * @return {p5.Element}\n   * @example\n   * <div><code>\n   * var sel;\n   *\n   * function setup() {\n   *   textAlign(CENTER);\n   *   background(200);\n   *   sel = createSelect();\n   *   sel.position(10, 10);\n   *   sel.option('pear');\n   *   sel.option('kiwi');\n   *   sel.option('grape');\n   *   sel.changed(mySelectEvent);\n   * }\n   *\n   * function mySelectEvent() {\n   *   var item = sel.value();\n   *   background(200);\n   *   text(\"it's a \"+item+\"!\", 50, 50);\n   * }\n   * </code></div>",
        "* @method createSelect\n   * @param {Object} existing DOM select element\n   * @return {p5.Element}",
        "* Creates a radio button &lt;input&gt;&lt;/input&gt; element in the DOM.\n   * The .option() method can be used to set options for the radio after it is\n   * created. The .value() method will return the currently selected option.\n   *\n   * @method createRadio\n   * @param  {String} [divId] the id and name of the created div and input field respectively\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div><code>\n   * var radio;\n   *\n   * function setup() {\n   *   radio = createRadio();\n   *   radio.option(\"black\");\n   *   radio.option(\"white\");\n   *   radio.option(\"gray\");\n   *   radio.style('width', '60px');\n   *   textAlign(CENTER);\n   *   fill(255, 0, 0);\n   * }\n   *\n   * function draw() {\n   *   var val = radio.value();\n   *   background(val);\n   *   text(val, width/2, height/2);\n   * }\n   * </code></div>\n   * <div><code>\n   * var radio;\n   *\n   * function setup() {\n   *   radio = createRadio();\n   *   radio.option('apple', 1);\n   *   radio.option('bread', 2);\n   *   radio.option('juice', 3);\n   *   radio.style('width', '60px');\n   *   textAlign(CENTER);\n   * }\n   *\n   * function draw() {\n   *   background(200);\n   *   var val = radio.value();\n   *   if (val) {\n   *     text('item cost is $'+val, width/2, height/2);\n   *   }\n   * }\n   * </code></div>",
        "* Creates an &lt;input&gt;&lt;/input&gt; element in the DOM for text input.\n   * Use .size() to set the display length of the box.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createInput\n   * @param {Number} [value] default value of the input box\n   * @param {String} [type] type of text, ie text, password etc. Defaults to text\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div class='norender'><code>\n   * function setup(){\n   *   var inp = createInput('');\n   *   inp.input(myInputEvent);\n   * }\n   *\n   * function myInputEvent(){\n   *   console.log('you are typing: ', this.value());\n   * }\n   *\n   * </code></div>",
        "* Creates an &lt;input&gt;&lt;/input&gt; element in the DOM of type 'file'.\n   * This allows users to select local files for use in a sketch.\n   *\n   * @method createFileInput\n   * @param  {Function} [callback] callback function for when a file loaded\n   * @param  {String} [multiple] optional to allow multiple files selected\n   * @return {Object|p5.Element} pointer to p5.Element holding created DOM element\n   * @example\n   * var input;\n   * var img;\n   *\n   * function setup() {\n   *   input = createFileInput(handleFile);\n   *   input.position(0, 0);\n   * }\n   *\n   * function draw() {\n   *   if (img) {\n   *     image(img, 0, 0, width, height);\n   *   }\n   * }\n   *\n   * function handleFile(file) {\n   *   print(file);\n   *   if (file.type === 'image') {\n   *     img = createImg(file.data);\n   *     img.hide();\n   *   }\n   * }",
        "* Creates an HTML5 &lt;video&gt; element in the DOM for simple playback\n   * of audio/video. Shown by default, can be hidden with .hide()\n   * and drawn into canvas using video(). Appends to the container\n   * node if one is specified, otherwise appends to body. The first parameter\n   * can be either a single string path to a video file, or an array of string\n   * paths to different formats of the same video. This is useful for ensuring\n   * that your video can play across different browsers, as each supports\n   * different formats. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\">this\n   * page</a> for further information about supported formats.\n   *\n   * @method createVideo\n   * @param  {String|Array} src  path to a video file, or array of paths for\n   *                             supporting different browsers\n   * @param  {Object} [callback] callback function to be called upon\n   *                             'canplaythrough' event fire, that is, when the\n   *                             browser can play the media, and estimates that\n   *                             enough data has been loaded to play the media\n   *                             up to its end without having to stop for\n   *                             further buffering of content\n   * @return {p5.MediaElement|p5.Element} pointer to video p5.Element",
        "* Creates a hidden HTML5 &lt;audio&gt; element in the DOM for simple audio\n   * playback. Appends to the container node if one is specified,\n   * otherwise appends to body. The first parameter\n   * can be either a single string path to a audio file, or an array of string\n   * paths to different formats of the same audio. This is useful for ensuring\n   * that your audio can play across different browsers, as each supports\n   * different formats. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats\">this\n   * page for further information about supported formats</a>.\n   *\n   * @method createAudio\n   * @param  {String|Array} src  path to an audio file, or array of paths for\n   *                             supporting different browsers\n   * @param  {Object} [callback] callback function to be called upon\n   *                             'canplaythrough' event fire, that is, when the\n   *                             browser can play the media, and estimates that\n   *                             enough data has been loaded to play the media\n   *                             up to its end without having to stop for\n   *                             further buffering of content\n   * @return {p5.MediaElement|p5.Element} pointer to audio p5.Element",
        "* <p>Creates a new &lt;video&gt; element that contains the audio/video feed\n   * from a webcam. This can be drawn onto the canvas using video().</p>\n   * <p>More specific properties of the feed can be passing in a Constraints object.\n   * See the\n   * <a href=\"http://w3c.github.io/mediacapture-main/getusermedia.html#media-track-constraints\"> W3C\n   * spec</a> for possible properties. Note that not all of these are supported\n   * by all browsers.</p>\n   * <p>Security note: A new browser security specification requires that getUserMedia,\n   * which is behind createCapture(), only works when you're running the code locally,\n   * or on HTTPS. Learn more <a href=\"http://stackoverflow.com/questions/34197653/getusermedia-in-chrome-47-without-using-https\">here</a>\n   * and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\">here</a>.</p>\n   *\n   * @method createCapture\n   * @param  {String|Constant|Object}   type type of capture, either VIDEO or\n   *                                    AUDIO if none specified, default both,\n   *                                    or a Constraints object\n   * @param  {Function}                 callback function to be called once\n   *                                    stream has loaded\n   * @return {Object|p5.Element} capture video p5.Element\n   * @example\n   * <div class='norender'><code>\n   * var capture;\n   *\n   * function setup() {\n   *   createCanvas(480, 120);\n   *   capture = createCapture(VIDEO);\n   * }\n   *\n   * function draw() {\n   *   image(capture, 0, 0, width, width*capture.height/capture.width);\n   *   filter(INVERT);\n   * }\n   * </code></div>\n   * <div class='norender'><code>\n   * function setup() {\n   *   createCanvas(480, 120);\n   *   var constraints = {\n   *     video: {\n   *       mandatory: {\n   *         minWidth: 1280,\n   *         minHeight: 720\n   *       },\n   *       optional: [\n   *         { maxFrameRate: 10 }\n   *       ]\n   *     },\n   *     audio: true\n   *   };\n   *   createCapture(constraints, function(stream) {\n   *     console.log(stream);\n   *   });\n   * }\n   * </code></div>",
        "* Creates element with given tag in the DOM with given content.\n   * Appends to the container node if one is specified, otherwise\n   * appends to body.\n   *\n   * @method createElement\n   * @param  {String} tag tag for the new element\n   * @param  {String} [content] html content to be inserted into the element\n   * @return {Object|p5.Element} pointer to p5.Element holding created node\n   * @example\n   * <div class='norender'><code>\n   * var h2 = createElement('h2','im an h2 p5.element!');\n   * </code></div>",
        "*\n   * Adds specified class to the element.\n   *\n   * @for p5.Element\n   * @method addClass\n   * @param  {String} class name of class to add\n   * @return {Object|p5.Element}\n   * @example\n   * <div class='norender'><code>\n   * var div = createDiv('div');\n   * div.addClass('myClass');\n   * </code></div>",
        "*\n   * Removes specified class from the element.\n   *\n   * @method removeClass\n   * @param  {String} class name of class to remove\n   * @return {Object|p5.Element}",
        "*\n   * Attaches the element  as a child to the parent specified.\n   * Accepts either a string ID, DOM node, or p5.Element.\n   * If no argument is specified, an array of children DOM nodes is returned.\n   *\n   * @method child\n   * @param  {String|Object|p5.Element} [child] the ID, DOM node, or p5.Element\n   *                         to add to the current element\n   * @return {p5.Element}\n   * @example\n   * <div class='norender'><code>\n   * var div0 = createDiv('this is the parent');\n   * var div1 = createDiv('this is the child');\n   * div0.child(div1); // use p5.Element\n   * </code></div>\n   * <div class='norender'><code>\n   * var div0 = createDiv('this is the parent');\n   * var div1 = createDiv('this is the child');\n   * div1.id('apples');\n   * div0.child('apples'); // use id\n   * </code></div>\n   * <div class='norender'><code>\n   * var div0 = createDiv('this is the parent');\n   * var elt = document.getElementById('myChildDiv');\n   * div0.child(elt); // use element from page\n   * </code></div>",
        "* Centers a p5 Element either vertically, horizontally,\n   * or both, relative to its parent or according to\n   * the body if the Element has no parent. If no argument is passed\n   * the Element is aligned both vertically and horizontally.\n   *\n   * @param  {String} align       passing 'vertical', 'horizontal' aligns element accordingly\n   * @return {Object|p5.Element} pointer to p5.Element\n   * @example\n   * <div><code>\n   * function setup() {\n   *   var div = createDiv('').size(10,10);\n   *   div.style('background-color','orange');\n   *   div.center();\n   *\n   * }\n   * </code></div>",
        "*\n   * If an argument is given, sets the inner HTML of the element,\n   * replacing any existing html. If true is included as a second\n   * argument, html is appended instead of replacing existing html.\n   * If no arguments are given, returns\n   * the inner HTML of the element.\n   *\n   * @for p5.Element\n   * @method html\n   * @param  {String} [html] the HTML to be placed inside the element\n   * @param  {boolean} [append] whether to append HTML to existing\n   * @return {Object|p5.Element|String}\n   * @example\n   * <div class='norender'><code>\n   * var div = createDiv('').size(100,100);\n   * div.html('hi');\n   * </code></div>\n   * <div class='norender'><code>\n   * var div = createDiv('Hello ').size(100,100);\n   * div.html('World', true);\n   * </code></div>",
        "*\n   * Sets the position of the element relative to (0, 0) of the\n   * window. Essentially, sets position:absolute and left and top\n   * properties of style. If no arguments given returns the x and y position\n   * of the element in an object.\n   *\n   * @method position\n   * @param  {Number} [x] x-position relative to upper left of window\n   * @param  {Number} [y] y-position relative to upper left of window\n   * @return {Object|p5.Element}\n   * @example\n   * <div><code class='norender'>\n   * function setup() {\n   *   var cnv = createCanvas(100, 100);\n   *   // positions canvas 50px to the right and 100px\n   *   // below upper left corner of the window\n   *   cnv.position(50, 100);\n   * }\n   * </code></div>",
        "* Sets the given style (css) property (1st arg) of the element with the\n   * given value (2nd arg). If a single argument is given, .style()\n   * returns the value of the given property; however, if the single argument\n   * is given in css syntax ('text-align:center'), .style() sets the css\n   * appropriatly. .style() also handles 2d and 3d css transforms. If\n   * the 1st arg is 'rotate', 'translate', or 'position', the following arguments\n   * accept Numbers as values. ('translate', 10, 100, 50);\n   *\n   * @method style\n   * @param  {String} property   property to be set\n   * @param  {String|Number|p5.Color} [value]   value to assign to property (only String|Number for rotate/translate)\n   * @return {String|Object|p5.Element} value of property, if no value is specified\n   * or p5.Element\n   * @example\n   * <div><code class=\"norender\">\n   * var myDiv = createDiv(\"I like pandas.\");\n   * myDiv.style(\"font-size\", \"18px\");\n   * myDiv.style(\"color\", \"#ff0000\");\n   * </code></div>\n   * <div><code class=\"norender\">\n   * var col = color(25,23,200,50);\n   * var button = createButton(\"button\");\n   * button.style(\"background-color\", col);\n   * button.position(10, 10);\n   * </code></div>\n   * <div><code class=\"norender\">\n   * var myDiv = createDiv(\"I like lizards.\");\n   * myDiv.style(\"position\", 20, 20);\n   * myDiv.style(\"rotate\", 45);\n   * </code></div>\n   * <div><code class=\"norender\">\n   * var myDiv;\n   * function setup() {\n   *   background(200);\n   *   myDiv = createDiv(\"I like gray.\");\n   *   myDiv.position(20, 20);\n   * }\n   *\n   * function draw() {\n   *   myDiv.style(\"font-size\", mouseX+\"px\");\n   * }\n   * </code></div>",
        "*\n   * Adds a new attribute or changes the value of an existing attribute\n   * on the specified element. If no value is specified, returns the\n   * value of the given attribute, or null if attribute is not set.\n   *\n   * @method attribute\n   * @param  {String} attr       attribute to set\n   * @param  {String} [value]    value to assign to attribute\n   * @return {String|Object|p5.Element} value of attribute, if no value is\n   *                             specified or p5.Element\n   * @example\n   * <div class=\"norender\"><code>\n   * var myDiv = createDiv(\"I like pandas.\");\n   * myDiv.attribute(\"align\", \"center\");\n   * </code></div>",
        "*\n   * Removes an attribute on the specified element.\n   *\n   * @method removeAttribute\n   * @param  {String} attr       attribute to remove\n   * @return {Object|p5.Element}\n   *\n   * @example\n   * <div><code>\n   * var button;\n   * var checkbox;\n   *\n   * function setup() {\n   *   checkbox = createCheckbox('enable', true);\n   *   checkbox.changed(enableButton);\n   *   button = createButton('button');\n   *   button.position(10, 10);\n   * }\n   *\n   * function enableButton() {\n   *   if( this.checked() ) {\n   *     // Re-enable the button\n   *     button.removeAttribute('disabled');\n   *   } else {\n   *     // Disable the button\n   *     button.attribute('disabled','');\n   *   }\n   * }\n   * </code></div>",
        "* Either returns the value of the element if no arguments\n   * given, or sets the value of the element.\n   *\n   * @method value\n   * @param  {String|Number}     [value]\n   * @return {String|Object|p5.Element} value of element if no value is specified or p5.Element\n   * @example\n   * <div class='norender'><code>\n   * // gets the value\n   * var inp;\n   * function setup() {\n   *   inp = createInput('');\n   * }\n   *\n   * function mousePressed() {\n   *   print(inp.value());\n   * }\n   * </code></div>\n   * <div class='norender'><code>\n   * // sets the value\n   * var inp;\n   * function setup() {\n   *   inp = createInput('myValue');\n   * }\n   *\n   * function mousePressed() {\n   *   inp.value(\"myValue\");\n   * }\n   * </code></div>",
        "*\n   * Shows the current element. Essentially, setting display:block for the style.\n   *\n   * @method show\n   * @return {Object|p5.Element}\n   * @example\n   * <div class='norender'><code>\n   * var div = createDiv('div');\n   * div.style(\"display\", \"none\");\n   * div.show(); // turns display to block\n   * </code></div>",
        "* Hides the current element. Essentially, setting display:none for the style.\n   *\n   * @method hide\n   * @return {Object|p5.Element}\n   * @example\n   * <div class='norender'><code>\n   * var div = createDiv('this is a div');\n   * div.hide();\n   * </code></div>",
        "*\n   * Sets the width and height of the element. AUTO can be used to\n   * only adjust one dimension. If no arguments given returns the width and height\n   * of the element in an object.\n   *\n   * @method size\n   * @param  {Number} [w] width of the element\n   * @param  {Number} [h] height of the element\n   * @return {Object|p5.Element}\n   * @example\n   * <div class='norender'><code>\n   * var div = createDiv('this is a div');\n   * div.size(100, 100);\n   * </code></div>",
        "* Removes the element and deregisters all listeners.\n   * @method remove\n   * @example\n   * <div class='norender'><code>\n   * var myDiv = createDiv('this is some text');\n   * myDiv.remove();\n   * </code></div>",
        "* Extends p5.Element to handle audio and video. In addition to the methods\n   * of p5.Element, it also contains methods for controlling media. It is not\n   * called directly, but p5.MediaElements are created by calling createVideo,\n   * createAudio, and createCapture.\n   *\n   * @class p5.MediaElement\n   * @constructor\n   * @param {String} elt DOM node that is wrapped",
        "*  Path to the media element source.\n     *\n     *  @property src\n     *  @return {String} src",
        "* Play an HTML5 media element.\n   *\n   * @method play\n   * @return {Object|p5.Element}",
        "* Stops an HTML5 media element (sets current time to zero).\n   *\n   * @method stop\n   * @return {Object|p5.Element}",
        "* Pauses an HTML5 media element.\n   *\n   * @method pause\n   * @return {Object|p5.Element}",
        "* Set 'loop' to true for an HTML5 media element, and starts playing.\n   *\n   * @method loop\n   * @return {Object|p5.Element}",
        "* Set 'loop' to false for an HTML5 media element. Element will stop\n   * when it reaches the end.\n   *\n   * @method noLoop\n   * @return {Object|p5.Element}",
        "* Set HTML5 media element to autoplay or not.\n   *\n   * @method autoplay\n   * @param {Boolean} autoplay whether the element should autoplay\n   * @return {Object|p5.Element}",
        "* Sets volume for this HTML5 media element. If no argument is given,\n   * returns the current volume.\n   *\n   * @param {Number}            [val] volume between 0.0 and 1.0\n   * @return {Number|p5.MediaElement} current volume or p5.MediaElement\n   * @method volume",
        "* If no arguments are given, returns the current playback speed of the\n   * element. The speed parameter sets the speed where 2.0 will play the\n   * element twice as fast, 0.5 will play at half the speed, and -1 will play\n   * the element in normal speed in reverse.(Note that not all browsers support\n   * backward playback and even if they do, playback might not be smooth.)\n   *\n   * @method speed\n   * @param {Number} [speed]  speed multiplier for element playback\n   * @return {Number|Object|p5.MediaElement} current playback speed or p5.MediaElement",
        "* If no arguments are given, returns the current time of the element.\n   * If an argument is given the current time of the element is set to it.\n   *\n   * @method time\n   * @param {Number} [time] time to jump to (in seconds)\n   * @return {Number|Object|p5.MediaElement} current time (in seconds)\n   *                                  or p5.MediaElement",
        "* Returns the duration of the HTML5 media element.\n   *\n   * @method duration\n   * @return {Number} duration",
        "*  Schedule an event to be called when the audio or video\n   *  element reaches the end. If the element is looping,\n   *  this will not be called. The element is passed in\n   *  as the argument to the onended callback.\n   *\n   *  @method  onended\n   *  @param  {Function} callback function to call when the\n   *                              soundfile has ended. The\n   *                              media element will be passed\n   *                              in as the argument to the\n   *                              callback.\n   *  @return {Object|p5.MediaElement}\n   *  @example\n   *  <div><code>\n   *  function setup() {\n   *    audioEl = createAudio('assets/beat.mp3');\n   *    audioEl.showControls(true);\n   *    audioEl.onended(sayDone);\n   *  }\n   *\n   *  function sayDone(elt) {\n   *    alert('done playing ' + elt.src );\n   *  }\n   *  </code></div>",
        "* CONNECT TO WEB AUDIO API / p5.sound.js **",
        "*  Send the audio output of this element to a specified audioNode or\n   *  p5.sound object. If no element is provided, connects to p5's master\n   *  output. That connection is established when this method is first called.\n   *  All connections are removed by the .disconnect() method.\n   *\n   *  This method is meant to be used with the p5.sound.js addon library.\n   *\n   *  @method  connect\n   *  @param  {AudioNode|Object} audioNode AudioNode from the Web Audio API,\n   *  or an object from the p5.sound library",
        "*  Disconnect all Web Audio routing, including to master output.\n   *  This is useful if you want to re-route the output through\n   *  audio effects, for example.\n   *\n   *  @method  disconnect",
        "* SHOW / HIDE CONTROLS **",
        "*  Show the default MediaElement controls, as determined by the web browser.\n   *\n   *  @method  showControls",
        "*  Hide the default mediaElement controls.\n   *\n   *  @method hideControls",
        "* SCHEDULE EVENTS **",
        "*  Schedule events to trigger every time a MediaElement\n   *  (audio/video) reaches a playback cue point.\n   *\n   *  Accepts a callback function, a time (in seconds) at which to trigger\n   *  the callback, and an optional parameter for the callback.\n   *\n   *  Time will be passed as the first parameter to the callback function,\n   *  and param will be the second parameter.\n   *\n   *\n   *  @method  addCue\n   *  @param {Number}   time     Time in seconds, relative to this media\n   *                             element's playback. For example, to trigger\n   *                             an event every time playback reaches two\n   *                             seconds, pass in the number 2. This will be\n   *                             passed as the first parameter to\n   *                             the callback function.\n   *  @param {Function} callback Name of a function that will be\n   *                             called at the given time. The callback will\n   *                             receive time and (optionally) param as its\n   *                             two parameters.\n   *  @param {Object} [value]    An object to be passed as the\n   *                             second parameter to the\n   *                             callback function.\n   *  @return {Number} id ID of this cue,\n   *                      useful for removeCue(id)\n   *  @example\n   *  <div><code>\n   *  function setup() {\n   *    background(255,255,255);\n   *\n   *    audioEl = createAudio('assets/beat.mp3');\n   *    audioEl.showControls();\n   *\n   *    // schedule three calls to changeBackground\n   *    audioEl.addCue(0.5, changeBackground, color(255,0,0) );\n   *    audioEl.addCue(1.0, changeBackground, color(0,255,0) );\n   *    audioEl.addCue(2.5, changeBackground, color(0,0,255) );\n   *    audioEl.addCue(3.0, changeBackground, color(0,255,255) );\n   *    audioEl.addCue(4.2, changeBackground, color(255,255,0) );\n   *    audioEl.addCue(5.0, changeBackground, color(255,255,0) );\n   *  }\n   *\n   *  function changeBackground(val) {\n   *    background(val);\n   *  }\n   *  </code></div>",
        "*  Remove a callback based on its ID. The ID is returned by the\n   *  addCue method.\n   *\n   *  @method removeCue\n   *  @param  {Number} id ID of the cue, as returned by addCue",
        "*  Remove all of the callbacks that had originally been scheduled\n   *  via the addCue method.\n   *\n   *  @method  clearCues",
        "* Base class for a file\n   * Using this for createFileInput\n   *\n   * @class p5.File\n   * @constructor\n   * @param {File} file File that is wrapped",
        "* Underlying File object. All normal File methods can be called on this.\n     *\n     * @property file",
        "* File type (image, text, etc.)\n     *\n     * @property type",
        "* File subtype (usually the file extension jpg, png, xml, etc.)\n     *\n     * @property subtype",
        "* File name\n     *\n     * @property name",
        "* File size\n     *\n     * @property size",
        "* URL string containing image data.\n     *\n     * @property data"
    ],
    "functions": [
        "getContainer",
        "wrapElement",
        "addElement",
        "handleFileSelect",
        "makeLoader",
        "createMedia"
    ],
    "classes": []
}