{
    "identifiers": [
        "threading",
        "logging",
        "os",
        "time",
        "json",
        "datetime",
        "paho",
        "mqtt",
        "client",
        "mqtt",
        "pymongo",
        "MongoClient",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "DEBUG",
        "logging",
        "getLogger",
        "threading",
        "__class__",
        "name",
        "__class__",
        "threading",
        "Event",
        "MongoClient",
        "mongoc",
        "sensors",
        "mqtt",
        "Client",
        "client_id",
        "clean_session",
        "userdata",
        "mqttc",
        "_on_connect",
        "mqttc",
        "_on_message",
        "mqttc",
        "_on_subscribe",
        "mqttc",
        "_on_disconnect",
        "staticmethod",
        "client",
        "flags",
        "rc",
        "rc",
        "mqtt",
        "MQTT_ERR_SUCCESS",
        "LOGGER",
        "info",
        "refresh_subscriptions",
        "LOGGER",
        "error",
        "mqtt",
        "connack_string",
        "rc",
        "staticmethod",
        "client",
        "mid",
        "granted_qos",
        "LOGGER",
        "info",
        "mid",
        "granted_qos",
        "staticmethod",
        "client",
        "rc",
        "LOGGER",
        "info",
        "rc",
        "mqttc",
        "reconnect",
        "staticmethod",
        "client",
        "msg",
        "LOGGER",
        "info",
        "msg",
        "topic",
        "msg",
        "payload",
        "json",
        "loads",
        "msg",
        "payload",
        "msg",
        "topic",
        "data",
        "data",
        "pop",
        "datetime",
        "datetime",
        "now",
        "mongo_sensors",
        "environment",
        "insert_one",
        "data",
        "inserted_id",
        "LOGGER",
        "info",
        "data_id",
        "e",
        "LOGGER",
        "error",
        "e",
        "mqttc",
        "subscribe",
        "_stop",
        "_stop",
        "isSet",
        "LOGGER",
        "debug",
        "mqttc",
        "connect",
        "e",
        "LOGGER",
        "exception",
        "e",
        "stopped",
        "mqttc",
        "loop",
        "LOGGER",
        "info",
        "Listener",
        "listener",
        "start",
        "time",
        "sleep"
    ],
    "literals": [
        "'sensor_listener'",
        "'listener'",
        "\"Successfully connected, subscribing to sensors channel\"",
        "\"on_connect: received an error: %s\"",
        "\"subscription mid: %s, granted_qos: %s\"",
        "\"Disconnect rc: %s, trying reconnect.\"",
        "\"on_message: topic: %s, msg: %s\"",
        "'/sensors/wormbin'",
        "'status'",
        "'status'",
        "'location'",
        "'wormbin'",
        "'date'",
        "'mongo id: %s'",
        "\"Some problem with enqueuing message: %s\"",
        "'/sensors/#'",
        "\"trying to connect to mqtt server\"",
        "\"localhost\"",
        "\"Couldn't start mqtt message dispatcher: %s\"",
        "'__main__'",
        "'Start MQTT sensor listener...'"
    ],
    "variables": [
        "LOGGER",
        "daemon",
        "_stop",
        "mongoc",
        "mongo_sensors",
        "mqttc",
        "on_connect",
        "on_message",
        "on_subscribe",
        "on_disconnect",
        "data",
        "data",
        "data",
        "data_id",
        "listener"
    ],
    "comments": [
        "we pass an instance reference around to callbacks"
    ],
    "docstrings": [
        "\"\"\" A thread that iterates the mqtt loop and passes messages to\n    whatever handler objects happen to be registered.\n    Handler objects are responsible only for\n    1. having topic and qos properties\n    2. having a put() method\n    sw.mqtt.handlers.BaseHandler is an abstract base class which enforces those\n    When such an object is registered as a handler, it's msg_queue will receive all the raw\n    messages from it's topic and in its run() method it can do whatever processing it wants.\n    Can be constructed with a list of handlers or not\n\n    The @staticmethods below are written that way so we can hide their names inside the class\n    and still have access to self.\n    \"\"\"",
        "\"\"\"Can't subscribe to a topic until after we're connected\"\"\"",
        "\"\"\"Just to print a log message for now\"\"\"",
        "\"\"\"If we get disconnected for whatever reason, let's try to reconnect\"\"\"",
        "\"\"\"Look through our handlers and pass on appropriate messages\"\"\"",
        "\"\"\"Utility method for re-subscribing\"\"\"",
        "\"\"\"All we do here is pump the mqtt network loop until we're asked to stop\"\"\""
    ],
    "functions": [
        "_on_connect",
        "_on_subscribe",
        "_on_disconnect",
        "_on_message",
        "refresh_subscriptions",
        "stop",
        "stopped",
        "run"
    ],
    "classes": [
        "Listener"
    ]
}