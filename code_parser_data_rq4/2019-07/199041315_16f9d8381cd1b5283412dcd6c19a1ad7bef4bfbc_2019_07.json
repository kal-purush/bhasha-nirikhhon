{
    "identifiers": [
        "com",
        "digitalsoftware",
        "accounting",
        "com",
        "digitalsoftware",
        "accounting",
        "configuration",
        "Bootstrap",
        "com",
        "digitalsoftware",
        "accounting",
        "mapper",
        "DAO",
        "RoleMapper",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Autowired",
        "org",
        "springframework",
        "boot",
        "SpringApplication",
        "org",
        "springframework",
        "boot",
        "autoconfigure",
        "SpringBootApplication",
        "org",
        "springframework",
        "cache",
        "annotation",
        "EnableCaching",
        "org",
        "springframework",
        "context",
        "annotation",
        "Bean",
        "org",
        "springframework",
        "scheduling",
        "annotation",
        "EnableAsync",
        "org",
        "springframework",
        "security",
        "crypto",
        "bcrypt",
        "BCryptPasswordEncoder",
        "tk",
        "mybatis",
        "spring",
        "annotation",
        "MapperScan",
        "SpringBootApplication",
        "MapperScan",
        "basePackages",
        "EnableAsync",
        "EnableCaching",
        "Autowired",
        "bootstrap",
        "Autowired",
        "roleMapper",
        "Bean",
        "args",
        "SpringApplication",
        "run",
        "args"
    ],
    "literals": [
        "\"com.digitalsoftware.accounting.mapper.DAO\""
    ],
    "variables": [
        "bootstrap",
        "roleMapper"
    ],
    "comments": [
        "@Bean",
        "@Qualifier(\"mainDataSource\")",
        "public DataSource dataSource() {",
        "EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();",
        "EmbeddedDatabase db = builder",
        ".setType(EmbeddedDatabaseType.H2)",
        ".build();",
        "return db;",
        "}",
        "",
        "@Override",
        "public void run(String... strings) throws Exception {",
        "",
        "if (roleDAO.findByRole(RoleType.ROLE_USER) == null) {",
        "",
        "bootstrap.generateAll();",
        "}",
        "",
        "",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "BCryptPasswordEncoder",
        "passwordEncoder",
        "main"
    ],
    "classes": [
        "AccountingApplication"
    ]
}