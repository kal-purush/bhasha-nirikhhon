{
    "identifiers": [
        "org",
        "jboss",
        "projectmanipulator",
        "npm",
        "org",
        "junit",
        "Test",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "org",
        "hamcrest",
        "CoreMatchers",
        "org",
        "junit",
        "Assert",
        "assertThat",
        "Test",
        "manipulator",
        "availableSet",
        "highestNum",
        "manipulator",
        "findHighestIncrementalNum",
        "availableSet",
        "assertThat",
        "highestNum",
        "Test",
        "manipulator",
        "availableSet",
        "availableSet",
        "add",
        "availableSet",
        "add",
        "highestNum",
        "manipulator",
        "findHighestIncrementalNum",
        "availableSet",
        "assertThat",
        "highestNum",
        "Test",
        "manipulator",
        "availableSet",
        "availableSet",
        "add",
        "availableSet",
        "add",
        "availableSet",
        "add",
        "highestNum",
        "manipulator",
        "findHighestIncrementalNum",
        "availableSet",
        "assertThat",
        "highestNum",
        "Test",
        "manipulator",
        "newVersion",
        "manipulator",
        "generateNewVersion",
        "Collections",
        "emptySet",
        "assertThat",
        "newVersion",
        "Test",
        "manipulator",
        "availableSet",
        "availableSet",
        "add",
        "availableSet",
        "add",
        "newVersion",
        "manipulator",
        "generateNewVersion",
        "availableSet",
        "assertThat",
        "newVersion",
        "Test",
        "manipulator",
        "availableSet",
        "availableSet",
        "add",
        "availableSet",
        "add",
        "newVersion",
        "manipulator",
        "generateNewVersion",
        "availableSet",
        "assertThat",
        "newVersion",
        "Test",
        "versionOverride",
        "manipulator",
        "versionOverride",
        "availableSet",
        "availableSet",
        "add",
        "newVersion",
        "manipulator",
        "getNewVersion",
        "availableSet",
        "assertThat",
        "versionOverride",
        "newVersion"
    ],
    "literals": [
        "\"jboss\"",
        "\"1.0.0\"",
        "\"jboss\"",
        "\"1.0.1-jboss-1\"",
        "\"1.0.0-ncl-1\"",
        "\"1.0.0\"",
        "\"jboss\"",
        "\"1.0.0-jboss-00001\"",
        "\"1.0.0-jboss-00002\"",
        "\"1.0.0-ncl-1\"",
        "\"1.0.0\"",
        "\"jboss\"",
        "\"1.0.0\"",
        "\"1.0.0-jboss-00001\"",
        "\"jboss\"",
        "\"1.0.0-jboss-1\"",
        "\"1.0.0-jboss-00002\"",
        "\"1.0.0\"",
        "\"1.0.0-jboss-00003\"",
        "\"jboss\"",
        "\"1.0.0-jboss-1\"",
        "\"1.0.0-jboss-00002\"",
        "\"1.0.0-jboss-00004\"",
        "\"1.0.0-jboss-00003\"",
        "\"2.0.0-foo-001\"",
        "\"jboss\"",
        "\"bar-02\"",
        "\"1.0.0-jboss-1\"",
        "\"1.0.0\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "*",
        "* Test class for {@link NpmPackageVersionManipulator}.\n *\n * @author pkocandr",
        "* Tests that the {@link NpmPackageVersionManipulator#findHighestIncrementalNum(String, Set)} returns 0 when the\n     * available version set is empty.",
        "* Tests that the {@link NpmPackageVersionManipulator#findHighestIncrementalNum(String, Set)} returns 0 when the\n     * available version set is not empty, but contains only versions with non-matching major-minor-patch combination or\n     * with matching one, but non-matching suffix.",
        "* Tests that the {@link NpmPackageVersionManipulator#findHighestIncrementalNum(String, Set)} returns 2 when the\n     * available version set is not empty and contains a version with non-matching suffix and 2 matching ones with\n     * 00001 and 00002 after it.",
        "* Tests generation of new version when there is no pre-existing suffixed version. For version 1.0.0 it expects to\n     * get 1.0.0-jboss-00001.",
        "* Tests generation of new version when there are pre-existing suffixed versions - jboss-1 and jboss-00002. For\n     * version 1.0.0 it expects to get 1.0.0-jboss-00003.",
        "* Tests generation of new version for version that already contains the suffix when there are pre-existing suffixed\n     * versions - jboss-1 and jboss-00002. It expects that the original suffix will be removed and replaced by the\n     * generated one based on the highest available version, so for version 1.0.0-jboss-00004 it expects to get\n     * 1.0.0-jboss-00003.",
        "* Tests getting new version when the complete version is set to an override. It sets also versionSuffix and\n     * versionSuffixOverride, which should be both ignored and the result should be only the overriden version."
    ],
    "functions": [
        "findHighestIncrementalNumWithNoAvailableVersions",
        "findHighestIncrementalNumWithNoMatchingAvailableVersions",
        "findHighestIncrementalNumWithMatchingAvailableVersion",
        "generateNewVersionWhenNoSuffixedExists",
        "generateNewVersionWithAvailableSuffixedVersions",
        "generateNewVersionForSuffixedVersionWithPreexistingSuffixedVersions",
        "getNewVersionOverride"
    ],
    "classes": [
        "NpmPackageVersionManipulatorTest"
    ]
}