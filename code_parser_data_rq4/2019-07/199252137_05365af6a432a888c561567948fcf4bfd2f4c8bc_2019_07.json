{
    "identifiers": [
        "print_function",
        "argparse",
        "os",
        "shutil",
        "time",
        "torch",
        "torch",
        "nn",
        "nn",
        "torch",
        "nn",
        "parallel",
        "torch",
        "backends",
        "cudnn",
        "cudnn",
        "torch",
        "optim",
        "torch",
        "utils",
        "data",
        "torch",
        "nn",
        "functional",
        "F",
        "torchvision",
        "transforms",
        "transforms",
        "torchvision",
        "datasets",
        "datasets",
        "collections",
        "OrderedDict",
        "cv2",
        "numpy",
        "np",
        "sklearn",
        "sklearn",
        "metrics",
        "pairwise",
        "cosine_similarity",
        "light_cnn",
        "LightCNN_9Layers",
        "LightCNN_4Layers",
        "LightCNN_29Layers",
        "LightCNN_29Layers_v2",
        "pandas",
        "pd",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "metavar",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "help",
        "args",
        "parser",
        "parse_args",
        "args",
        "model",
        "LightCNN_9Layers",
        "num_classes",
        "args",
        "num_classes",
        "args",
        "model",
        "LightCNN_29Layers",
        "num_classes",
        "args",
        "num_classes",
        "args",
        "model",
        "LightCNN_4Layers",
        "num_classes",
        "args",
        "num_classes",
        "args",
        "model",
        "LightCNN_29Layers_v2",
        "num_classes",
        "args",
        "num_classes",
        "model",
        "eval",
        "args",
        "cuda",
        "torch",
        "nn",
        "DataParallel",
        "model",
        "cuda",
        "args",
        "resume",
        "os",
        "path",
        "isfile",
        "args",
        "resume",
        "args",
        "model",
        "torch",
        "load",
        "map_location",
        "model",
        "state_dict",
        "pre_trained_dict",
        "pop",
        "pre_trained_dict",
        "pop",
        "pre_trained_dict",
        "pop",
        "pre_trained_dict",
        "pop",
        "pre_trained_dict",
        "pop",
        "pre_trained_dict",
        "pop",
        "pre_trained_dict",
        "pop",
        "k",
        "v",
        "k",
        "v",
        "pre_trained_dict",
        "items",
        "k",
        "model_dict",
        "update",
        "my_dict",
        "model",
        "load_state_dict",
        "model_dict",
        "strict",
        "format",
        "args",
        "resume",
        "torch",
        "load",
        "args",
        "resume",
        "map_location",
        "OrderedDict",
        "k",
        "v",
        "state_dict",
        "items",
        "k",
        "k",
        "k",
        "v",
        "model",
        "load_state_dict",
        "new_state_dict",
        "strict",
        "format",
        "args",
        "resume",
        "read_list",
        "args",
        "img_list",
        "transforms",
        "Compose",
        "transforms",
        "ToTensor",
        "torch",
        "zeros",
        "np",
        "empty",
        "img_name",
        "img_list",
        "img_name",
        "count",
        "cv2",
        "imread",
        "os",
        "path",
        "join",
        "args",
        "root_path",
        "img_name",
        "cv2",
        "IMREAD_GRAYSCALE",
        "cv2",
        "resize",
        "img",
        "np",
        "reshape",
        "img",
        "transform",
        "img",
        "img",
        "time",
        "time",
        "torch",
        "no_grad",
        "input",
        "model",
        "input_var",
        "np",
        "append",
        "featuresmatrix",
        "features",
        "data",
        "cpu",
        "numpy",
        "axis",
        "time",
        "time",
        "start",
        "cosine_similarity",
        "featuresmatrix",
        "featuresmatrix",
        "np",
        "savetxt",
        "similarity_matrix",
        "fmt",
        "delimiter",
        "list_path",
        "open",
        "list_path",
        "f",
        "line",
        "f",
        "readlines",
        "line",
        "split",
        "img_list",
        "append",
        "img_path",
        "format",
        "len",
        "img_list",
        "img_list",
        "save_path",
        "img_name",
        "features",
        "os",
        "path",
        "join",
        "save_path",
        "img_name",
        "os",
        "path",
        "dirname",
        "img_path",
        "os",
        "path",
        "exists",
        "img_dir",
        "os",
        "makedirs",
        "img_dir",
        "os",
        "path",
        "splitext",
        "img_path",
        "fname",
        "open",
        "fname",
        "fid",
        "write",
        "features",
        "fid",
        "close",
        "main"
    ],
    "literals": [
        "'PyTorch DFW Feature Extracting for simlarity generation'",
        "'--arch'",
        "'-a'",
        "'ARCH'",
        "'LightCNN'",
        "'--cuda'",
        "'-c'",
        "'--resume'",
        "'./lightCNN_71_checkpoint.pth.tar'",
        "'PATH'",
        "'path to latest checkpoint (default: none)'",
        "'--model'",
        "'LightCNN-29v2'",
        "'Model'",
        "'model type: LightCNN-9, LightCNN-29'",
        "'--root_path'",
        "'../DFW2019/'",
        "'PATH'",
        "'root path of face images (default: none).'",
        "'--img_list'",
        "'../DFW2019/fileNames.txt'",
        "'PATH'",
        "'list of face images for feature extraction (default: none).'",
        "'--save_path'",
        "''",
        "'PATH'",
        "'save root path for features of face images.'",
        "'--num_classes'",
        "'N'",
        "'mini-batch size (default: 79077)'",
        "'LightCNN-9'",
        "'LightCNN-29'",
        "'LightCNN-4'",
        "'LightCNN-29v2'",
        "'Error model type\\n'",
        "'LightCNN-4'",
        "'./LightenedCNN_4_torch.pth'",
        "'cpu'",
        "'features.0.filter.weight'",
        "'0.weight'",
        "'features.0.filter.bias'",
        "'0.bias'",
        "'features.2.filter.weight'",
        "'2.weight'",
        "'features.2.filter.bias'",
        "'2.bias'",
        "'features.4.filter.weight'",
        "'4.weight'",
        "'features.4.filter.bias'",
        "'4.bias'",
        "'features.6.filter.weight'",
        "'6.weight'",
        "\"fc2\"",
        "\"=> loading checkpoint '{}'\"",
        "'cpu'",
        "'state_dict'",
        "'module.'",
        "\"=> no checkpoint found at '{}'\"",
        "\"similarity_score_testset2019_lightcnn29_71.txt\"",
        "\"%5.4f\"",
        "\" \"",
        "'r'",
        "'\\n'",
        "'There are {} images..'",
        "'/'",
        "'.feat'",
        "'wb'",
        "'__main__'"
    ],
    "variables": [
        "parser",
        "args",
        "model",
        "model",
        "model",
        "model",
        "model",
        "pre_trained_dict",
        "model_dict",
        "pre_trained_dict",
        "pre_trained_dict",
        "pre_trained_dict",
        "pre_trained_dict",
        "pre_trained_dict",
        "pre_trained_dict",
        "pre_trained_dict",
        "my_dict",
        "state_dict",
        "new_state_dict",
        "name",
        "name",
        "new_state_dict",
        "name",
        "img_list",
        "transform",
        "count",
        "input",
        "featuresmatrix",
        "img_name",
        "count",
        "img",
        "img",
        "img",
        "img",
        "input",
        "start",
        "input_var",
        "_",
        "features",
        "featuresmatrix",
        "end",
        "similarity_matrix",
        "img_list",
        "img_path",
        "img_path",
        "img_dir",
        "fname",
        "fname",
        "fid"
    ],
    "comments": [
        "parser.add_argument('--resume', default='./LightCNN_29_V2Layers_checkpoint.pth.tar', type=str, metavar='PATH',",
        "parser.add_argument('--root_path', default='../DisguisedFacesInTheWild/', type=str, metavar='PATH',",
        "parser.add_argument('--img_list', default='../DisguisedFacesInTheWild/Testing_data_face_name.txt', type=str, metavar='PATH',",
        "lambda storage, loc: storage)",
        "model = model.to(device)  #lightcnn model",
        "by DG",
        "checkpoint = torch.load(args.resume, map_location='cpu')['state_dict']",
        "torch.load(directory, map_location=lambda storage, loc: storage)",
        "state_dict = torch.load(args.resume, map_location=lambda storage, loc: storage)['state_dict']",
        "remove `module.`",
        "model.load_state_dict(checkpoint['state_dict'])",
        "print(len(img_list))",
        "print(os.path.join(args.root_path, img_name))",
        "img   = cv2.imread(os.path.join(args.root_path, 'Cropped_'+img_name), cv2.IMREAD_GRAYSCALE)",
        "torch.tensor(input)#, volatile=True)",
        "print(features.size())",
        "print(features)",
        "print(\"{}({}/{}). Time: {}\".format(os.path.join(args.root_path, img_name), count, len(img_list), end))",
        "save_feature(args.save_path, img_name, features.data.cpu().numpy()[0])",
        "print(featuresmatrix.shape)",
        "np.savetxt(\"similarity_score_validationset.txt\",similarity_matrix,fmt =\"%4.2f\", delimiter=\" \")",
        "similarity_matrix.tofile(\"similarity_score_testset2019.txt\",sep=' ', format ='%4.2f')  #It gives single line not a matrix",
        "pd.DataFrame(similarity_matrix).to_csv(\"similarity_score_testset2019.txt\")"
    ],
    "docstrings": [
        "'''\nExtract features and generate similarity score\n\n'''",
        "'''\n        if args.cuda:\n            input = input.cuda()\n        '''"
    ],
    "functions": [
        "main",
        "read_list",
        "save_feature"
    ],
    "classes": []
}