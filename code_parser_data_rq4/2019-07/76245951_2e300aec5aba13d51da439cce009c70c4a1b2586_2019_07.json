{
    "identifiers": [
        "unittest",
        "mock",
        "MagicMock",
        "patch",
        "pyps4_homeassistant",
        "credential",
        "get_ddp_message",
        "homeassistant",
        "components",
        "ps4",
        "homeassistant",
        "components",
        "media_player",
        "ATTR_INPUT_SOURCE",
        "ATTR_INPUT_SOURCE_LIST",
        "ATTR_MEDIA_CONTENT_ID",
        "ATTR_MEDIA_CONTENT_TYPE",
        "ATTR_MEDIA_TITLE",
        "MEDIA_TYPE_GAME",
        "homeassistant",
        "components",
        "ps4",
        "ATTR_MEDIA_IMAGE_URL",
        "CONFIG_ENTRY_VERSION",
        "VERSION",
        "DEFAULT_REGION",
        "DOMAIN",
        "GAMES_FILE",
        "PS4_DATA",
        "homeassistant",
        "ATTR_COMMAND",
        "ATTR_ENTITY_ID",
        "ATTR_LOCKED",
        "CONF_HOST",
        "CONF_NAME",
        "CONF_REGION",
        "CONF_TOKEN",
        "STATE_IDLE",
        "STATE_OFF",
        "STATE_PLAYING",
        "STATE_UNKNOWN",
        "homeassistant",
        "setup",
        "async_setup_component",
        "tests",
        "common",
        "MockConfigEntry",
        "mock_device_registry",
        "mock_registry",
        "mock_coro",
        "DEFAULT_REGION",
        "GAMES_FILE",
        "MEDIA_TYPE_GAME",
        "ATTR_LOCKED",
        "ATTR_MEDIA_CONTENT_TYPE",
        "MEDIA_TYPE_GAME",
        "ATTR_MEDIA_IMAGE_URL",
        "MOCK_TITLE_ART_URL",
        "ATTR_MEDIA_TITLE",
        "MOCK_TITLE_NAME",
        "ATTR_LOCKED",
        "ATTR_MEDIA_CONTENT_TYPE",
        "MEDIA_TYPE_GAME",
        "ATTR_MEDIA_IMAGE_URL",
        "MOCK_TITLE_ART_URL",
        "ATTR_MEDIA_TITLE",
        "MOCK_TITLE_NAME",
        "MOCK_HOST_TYPE",
        "MOCK_HOST",
        "MOCK_TCP_PORT",
        "MOCK_HOST_ID",
        "MOCK_HOST_NAME",
        "MOCK_TITLE_ID",
        "MOCK_TITLE_NAME",
        "MOCK_STATUS_ON",
        "MOCK_ON_CODE",
        "MOCK_DDP_VERSION",
        "MOCK_HOST_VERSION",
        "MOCK_HOST_TYPE",
        "MOCK_HOST",
        "MOCK_TCP_PORT",
        "MOCK_HOST_ID",
        "MOCK_HOST_NAME",
        "MOCK_STATUS_ON",
        "MOCK_ON_CODE",
        "MOCK_DDP_VERSION",
        "MOCK_HOST_VERSION",
        "MOCK_HOST_TYPE",
        "MOCK_HOST",
        "MOCK_TCP_PORT",
        "MOCK_HOST_ID",
        "MOCK_HOST_NAME",
        "MOCK_STATUS_STANDBY",
        "MOCK_STANDBY_CODE",
        "MOCK_DDP_VERSION",
        "MOCK_HOST_VERSION",
        "CONF_HOST",
        "MOCK_HOST",
        "CONF_NAME",
        "MOCK_NAME",
        "CONF_REGION",
        "MOCK_REGION",
        "CONF_TOKEN",
        "MOCK_CREDS",
        "MOCK_DEVICE",
        "MockConfigEntry",
        "domain",
        "DOMAIN",
        "data",
        "MOCK_DATA",
        "entry_id",
        "MOCK_ENTRY_ID",
        "hass",
        "entry",
        "entry",
        "MockConfigEntry",
        "domain",
        "ps4",
        "DOMAIN",
        "data",
        "MOCK_DATA",
        "version",
        "VERSION",
        "entry_id",
        "MOCK_ENTRY_ID",
        "entry",
        "mock_entry",
        "add_to_hass",
        "hass",
        "patch",
        "MOCK_LOAD",
        "return_value",
        "patch",
        "MOCK_SAVE",
        "side_effect",
        "MagicMock",
        "async_setup_component",
        "hass",
        "DOMAIN",
        "DOMAIN",
        "hass",
        "async_block_till_done",
        "hass",
        "states",
        "async_entity_ids",
        "mock_entities",
        "mock_entity_id",
        "hass",
        "mock_status_data",
        "games",
        "hass",
        "data",
        "PS4_DATA",
        "protocol",
        "mock_status_data",
        "get",
        "mock_status_data",
        "get",
        "format",
        "mock_code",
        "mock_status",
        "get_ddp_message",
        "mock_status_header",
        "mock_status_data",
        "encode",
        "games",
        "patch",
        "MOCK_LOAD",
        "return_value",
        "games",
        "patch",
        "MOCK_SAVE",
        "side_effect",
        "MagicMock",
        "mock_protocol",
        "datagram_received",
        "mock_response",
        "MOCK_HOST",
        "MOCK_RANDOM_PORT",
        "hass",
        "async_block_till_done",
        "hass",
        "setup_mock_component",
        "hass",
        "hass",
        "states",
        "get",
        "mock_entity_id",
        "state",
        "len",
        "hass",
        "data",
        "PS4_DATA",
        "protocol",
        "callbacks",
        "hass",
        "data",
        "PS4_DATA",
        "protocol",
        "mock_entity_id",
        "format",
        "MOCK_NAME",
        "mock_state",
        "STATE_UNKNOWN",
        "hass",
        "setup_mock_component",
        "hass",
        "mock_ddp_response",
        "hass",
        "MOCK_STATUS_OFF",
        "hass",
        "states",
        "get",
        "mock_entity_id",
        "state",
        "STATE_OFF",
        "hass",
        "setup_mock_component",
        "hass",
        "format",
        "patch",
        "mock_func",
        "return_value",
        "mock_coro",
        "patch",
        "MOCK_SAVE",
        "side_effect",
        "MagicMock",
        "mock_ddp_response",
        "hass",
        "MOCK_STATUS_PLAYING",
        "hass",
        "states",
        "get",
        "mock_entity_id",
        "state",
        "STATE_PLAYING",
        "hass",
        "setup_mock_component",
        "hass",
        "mock_ddp_response",
        "hass",
        "MOCK_STATUS_IDLE",
        "hass",
        "states",
        "get",
        "mock_entity_id",
        "state",
        "STATE_IDLE",
        "hass",
        "setup_mock_component",
        "hass",
        "hass",
        "states",
        "get",
        "mock_entity_id",
        "state",
        "STATE_UNKNOWN",
        "hass",
        "setup_mock_component",
        "hass",
        "format",
        "MagicMock",
        "MOCK_TITLE_NAME",
        "MOCK_TITLE_ART_URL",
        "patch",
        "mock_func",
        "return_value",
        "mock_coro",
        "mock_result",
        "mock_fetch",
        "patch",
        "MOCK_SAVE",
        "side_effect",
        "MagicMock",
        "mock_ddp_response",
        "hass",
        "MOCK_STATUS_PLAYING",
        "hass",
        "states",
        "get",
        "mock_entity_id",
        "mock_state",
        "attributes",
        "len",
        "mock_fetch",
        "mock_calls",
        "mock_state",
        "state",
        "STATE_PLAYING",
        "len",
        "mock_attrs",
        "get",
        "ATTR_INPUT_SOURCE_LIST",
        "mock_attrs",
        "get",
        "ATTR_INPUT_SOURCE_LIST",
        "MOCK_TITLE_NAME",
        "mock_attrs",
        "get",
        "ATTR_MEDIA_CONTENT_ID",
        "MOCK_TITLE_ID",
        "mock_attrs",
        "get",
        "ATTR_MEDIA_TITLE",
        "MOCK_TITLE_NAME",
        "mock_attrs",
        "get",
        "ATTR_MEDIA_CONTENT_TYPE",
        "MOCK_TITLE_TYPE",
        "hass",
        "setup_mock_component",
        "hass",
        "MOCK_TITLE_ID",
        "MOCK_GAMES_DATA_LOCKED",
        "format",
        "patch",
        "mock_func",
        "return_value",
        "mock_coro",
        "mock_fetch",
        "mock_ddp_response",
        "hass",
        "MOCK_STATUS_PLAYING",
        "mock_data",
        "hass",
        "states",
        "get",
        "mock_entity_id",
        "mock_state",
        "attributes",
        "mock_fetch",
        "mock_calls",
        "mock_state",
        "state",
        "STATE_PLAYING",
        "len",
        "mock_attrs",
        "get",
        "ATTR_INPUT_SOURCE_LIST",
        "mock_attrs",
        "get",
        "ATTR_INPUT_SOURCE_LIST",
        "MOCK_TITLE_NAME",
        "mock_attrs",
        "get",
        "ATTR_MEDIA_CONTENT_ID",
        "MOCK_TITLE_ID",
        "mock_attrs",
        "get",
        "ATTR_MEDIA_TITLE",
        "MOCK_TITLE_NAME",
        "mock_attrs",
        "get",
        "ATTR_MEDIA_CONTENT_TYPE",
        "MOCK_TITLE_TYPE",
        "hass",
        "mock_device_registry",
        "hass",
        "patch",
        "return_value",
        "MOCK_STATUS_OFF",
        "setup_mock_component",
        "hass",
        "hass",
        "async_block_till_done",
        "MOCK_STATUS_OFF",
        "mock_version",
        "format",
        "mock_version",
        "mock_version",
        "hass",
        "states",
        "get",
        "mock_entity_id",
        "state",
        "mock_d_registry",
        "devices",
        "mock_d_registry",
        "async_get_device",
        "identifiers",
        "DOMAIN",
        "MOCK_HOST_ID",
        "connections",
        "mock_state",
        "STATE_OFF",
        "len",
        "mock_d_entries",
        "mock_entry",
        "name",
        "MOCK_HOST_NAME",
        "mock_entry",
        "model",
        "MOCK_DEVICE_MODEL",
        "mock_entry",
        "sw_version",
        "mock_version",
        "mock_entry",
        "identifiers",
        "DOMAIN",
        "MOCK_HOST_ID",
        "hass",
        "mock_device_registry",
        "hass",
        "mock_d_registry",
        "async_get_or_create",
        "config_entry_id",
        "MOCK_ENTRY_ID",
        "name",
        "MOCK_HOST_NAME",
        "model",
        "MOCK_DEVICE_MODEL",
        "identifiers",
        "DOMAIN",
        "MOCK_HOST_ID",
        "sw_version",
        "MOCK_HOST_VERSION",
        "mock_d_registry",
        "devices",
        "len",
        "mock_d_entries",
        "ps4",
        "format_unique_id",
        "MOCK_CREDS",
        "MOCK_HOST_ID",
        "mock_registry",
        "hass",
        "mock_e_registry",
        "async_get_or_create",
        "DOMAIN",
        "mock_unique_id",
        "config_entry_id",
        "MOCK_ENTRY_ID",
        "mock_e_registry",
        "async_get_entity_id",
        "DOMAIN",
        "mock_unique_id",
        "setup_mock_component",
        "hass",
        "hass",
        "states",
        "get",
        "mock_entity_id",
        "state",
        "mock_state",
        "STATE_UNKNOWN",
        "hass",
        "states",
        "async_entity_ids",
        "len",
        "mock_entities",
        "mock_entities",
        "mock_entity_id",
        "hass",
        "mock_device_registry",
        "hass",
        "setup_mock_component",
        "hass",
        "hass",
        "states",
        "get",
        "mock_entity_id",
        "state",
        "mock_d_registry",
        "devices",
        "mock_state",
        "STATE_UNKNOWN",
        "mock_d_entries",
        "hass",
        "setup_mock_component",
        "hass",
        "format",
        "patch",
        "mock_func",
        "return_value",
        "MagicMock",
        "mock_call",
        "hass",
        "services",
        "async_call",
        "ATTR_ENTITY_ID",
        "mock_entity_id",
        "hass",
        "async_block_till_done",
        "len",
        "mock_call",
        "mock_calls",
        "hass",
        "setup_mock_component",
        "hass",
        "format",
        "patch",
        "mock_func",
        "return_value",
        "MagicMock",
        "mock_call",
        "hass",
        "services",
        "async_call",
        "ATTR_ENTITY_ID",
        "mock_entity_id",
        "hass",
        "async_block_till_done",
        "len",
        "mock_call",
        "mock_calls",
        "hass",
        "setup_mock_component",
        "hass",
        "format",
        "patch",
        "mock_func",
        "return_value",
        "MagicMock",
        "mock_call",
        "hass",
        "services",
        "async_call",
        "ATTR_ENTITY_ID",
        "mock_entity_id",
        "hass",
        "async_block_till_done",
        "len",
        "mock_call",
        "mock_calls",
        "hass",
        "setup_mock_component",
        "hass",
        "format",
        "patch",
        "mock_func",
        "return_value",
        "MagicMock",
        "mock_call",
        "hass",
        "services",
        "async_call",
        "ATTR_ENTITY_ID",
        "mock_entity_id",
        "hass",
        "async_block_till_done",
        "len",
        "mock_call",
        "mock_calls",
        "hass",
        "MOCK_TITLE_ID",
        "MOCK_GAMES_DATA",
        "patch",
        "return_value",
        "MOCK_STATUS_IDLE",
        "patch",
        "MOCK_LOAD",
        "return_value",
        "mock_data",
        "setup_mock_component",
        "hass",
        "format",
        "patch",
        "mock_func",
        "return_value",
        "MagicMock",
        "mock_call",
        "hass",
        "services",
        "async_call",
        "ATTR_ENTITY_ID",
        "mock_entity_id",
        "ATTR_INPUT_SOURCE",
        "MOCK_TITLE_NAME",
        "hass",
        "async_block_till_done",
        "len",
        "mock_call",
        "mock_calls",
        "hass",
        "MOCK_TITLE_ID",
        "MOCK_GAMES_DATA",
        "patch",
        "return_value",
        "MOCK_STATUS_IDLE",
        "patch",
        "MOCK_LOAD",
        "return_value",
        "mock_data",
        "setup_mock_component",
        "hass",
        "format",
        "patch",
        "mock_func",
        "return_value",
        "MagicMock",
        "mock_call",
        "hass",
        "services",
        "async_call",
        "ATTR_ENTITY_ID",
        "mock_entity_id",
        "ATTR_INPUT_SOURCE",
        "MOCK_TITLE_NAME",
        "upper",
        "hass",
        "async_block_till_done",
        "len",
        "mock_call",
        "mock_calls",
        "hass",
        "MOCK_TITLE_ID",
        "MOCK_GAMES_DATA",
        "patch",
        "return_value",
        "MOCK_STATUS_IDLE",
        "patch",
        "MOCK_LOAD",
        "return_value",
        "mock_data",
        "setup_mock_component",
        "hass",
        "format",
        "patch",
        "mock_func",
        "return_value",
        "MagicMock",
        "mock_call",
        "hass",
        "services",
        "async_call",
        "ATTR_ENTITY_ID",
        "mock_entity_id",
        "ATTR_INPUT_SOURCE",
        "MOCK_TITLE_ID",
        "hass",
        "async_block_till_done",
        "len",
        "mock_call",
        "mock_calls",
        "hass",
        "setup_mock_component",
        "hass",
        "format",
        "patch",
        "mock_func",
        "return_value",
        "MagicMock",
        "mock_call",
        "hass",
        "services",
        "async_call",
        "DOMAIN",
        "ATTR_ENTITY_ID",
        "mock_entity_id",
        "ATTR_COMMAND",
        "hass",
        "async_block_till_done",
        "len",
        "mock_call",
        "mock_calls",
        "hass",
        "MockConfigEntry",
        "domain",
        "ps4",
        "DOMAIN",
        "data",
        "MOCK_DATA",
        "version",
        "VERSION",
        "entry_id",
        "MOCK_ENTRY_ID",
        "setup_mock_component",
        "hass",
        "mock_entry",
        "ps4",
        "async_unload_entry",
        "hass",
        "mock_entry",
        "mock_unload",
        "hass",
        "data",
        "PS4_DATA",
        "devices",
        "hass",
        "data",
        "PS4_DATA",
        "protocol",
        "callbacks",
        "hass",
        "states",
        "get",
        "mock_entity_id"
    ],
    "literals": [
        "'123412341234abcd12341234abcd12341234abcd12341234abcd12341234abcd'",
        "'ha_ps4_name'",
        "'192.168.0.2'",
        "'Fake PS4'",
        "'A0000A0AA000'",
        "'09879011'",
        "'PS4'",
        "'Server Standby'",
        "'Ok'",
        "'00020020'",
        "'1234'",
        "'CUSA00000'",
        "'Random Game'",
        "'https://somecoverurl'",
        "'host-type'",
        "'host-ip'",
        "'host-request-port'",
        "'host-id'",
        "'host-name'",
        "'running-app-titleid'",
        "'running-app-name'",
        "'status'",
        "'status_code'",
        "'device-discovery-protocol-version'",
        "'system-version'",
        "'host-type'",
        "'host-ip'",
        "'host-request-port'",
        "'host-id'",
        "'host-name'",
        "'status'",
        "'status_code'",
        "'device-discovery-protocol-version'",
        "'system-version'",
        "'host-type'",
        "'host-ip'",
        "'host-request-port'",
        "'host-id'",
        "'host-name'",
        "'status'",
        "'status_code'",
        "'device-discovery-protocol-version'",
        "'system-version'",
        "'SomeID'",
        "'PlayStation 4'",
        "'devices'",
        "'homeassistant.components.ps4.media_player.load_games'",
        "'homeassistant.components.ps4.save_json'",
        "'status_code'",
        "'status'",
        "'{} {}'",
        "'media_player.{}'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.async_get_ps_store_data'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.async_get_ps_store_data'",
        "'game'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.async_get_ps_store_data'",
        "'pyps4_homeassistant.ps4.get_status'",
        "'system-version'",
        "\"{}.{}\"",
        "'media_player'",
        "'media_player'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.wakeup'",
        "'media_player'",
        "'turn_on'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.standby'",
        "'media_player'",
        "'turn_off'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.remote_control'",
        "'media_player'",
        "'media_pause'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.remote_control'",
        "'media_player'",
        "'media_stop'",
        "'pyps4_homeassistant.ps4.get_status'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.start_title'",
        "'media_player'",
        "'select_source'",
        "'pyps4_homeassistant.ps4.get_status'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.start_title'",
        "'media_player'",
        "'select_source'",
        "'pyps4_homeassistant.ps4.get_status'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.start_title'",
        "'media_player'",
        "'select_source'",
        "'{}{}'",
        "'homeassistant.components.ps4.media_player.'",
        "'pyps4.Ps4Async.remote_control'",
        "'send_command'",
        "'ps'"
    ],
    "variables": [
        "MOCK_CREDS",
        "MOCK_NAME",
        "MOCK_REGION",
        "MOCK_GAMES_FILE",
        "MOCK_HOST",
        "MOCK_HOST_NAME",
        "MOCK_HOST_ID",
        "MOCK_HOST_VERSION",
        "MOCK_HOST_TYPE",
        "MOCK_STATUS_STANDBY",
        "MOCK_STATUS_ON",
        "MOCK_STANDBY_CODE",
        "MOCK_ON_CODE",
        "MOCK_TCP_PORT",
        "MOCK_DDP_PORT",
        "MOCK_DDP_VERSION",
        "MOCK_RANDOM_PORT",
        "MOCK_TITLE_ID",
        "MOCK_TITLE_NAME",
        "MOCK_TITLE_TYPE",
        "MOCK_TITLE_ART_URL",
        "MOCK_GAMES_DATA",
        "MOCK_GAMES_DATA_LOCKED",
        "MOCK_STATUS_PLAYING",
        "MOCK_STATUS_IDLE",
        "MOCK_STATUS_OFF",
        "MOCK_DEVICE",
        "MOCK_ENTRY_ID",
        "MOCK_DEVICE_MODEL",
        "MOCK_DATA",
        "MOCK_CONFIG",
        "MOCK_LOAD",
        "MOCK_SAVE",
        "mock_entry",
        "mock_entry",
        "mock_entities",
        "mock_entity_id",
        "mock_protocol",
        "mock_code",
        "mock_status",
        "mock_status_header",
        "mock_response",
        "games",
        "mock_entity_id",
        "mock_state",
        "mock_entity_id",
        "mock_entity_id",
        "mock_func",
        "mock_entity_id",
        "mock_entity_id",
        "mock_entity_id",
        "mock_func",
        "mock_result",
        "mock_result",
        "name",
        "mock_result",
        "cover_art",
        "mock_result",
        "game_type",
        "mock_state",
        "mock_attrs",
        "mock_entity_id",
        "mock_data",
        "mock_func",
        "mock_state",
        "mock_attrs",
        "mock_d_registry",
        "mock_entity_id",
        "mock_version",
        "mock_version",
        "mock_version",
        "mock_state",
        "mock_d_entries",
        "mock_entry",
        "mock_d_registry",
        "mock_d_entries",
        "mock_unique_id",
        "mock_e_registry",
        "mock_entity_id",
        "mock_entity_id",
        "mock_state",
        "mock_entities",
        "mock_d_registry",
        "mock_entity_id",
        "mock_state",
        "mock_d_entries",
        "mock_entity_id",
        "mock_func",
        "mock_entity_id",
        "mock_func",
        "mock_entity_id",
        "mock_func",
        "mock_entity_id",
        "mock_func",
        "mock_data",
        "mock_entity_id",
        "mock_func",
        "mock_data",
        "mock_entity_id",
        "mock_func",
        "mock_data",
        "mock_entity_id",
        "mock_func",
        "mock_entity_id",
        "mock_func",
        "mock_entry",
        "mock_entity_id",
        "mock_unload"
    ],
    "comments": [
        "Don't use an actual file.",
        "Assert status updated callback is added to protocol.",
        "Test that entity is added to hass.",
        "Mock result from fetching data.",
        "Ensure that data is not fetched.",
        "Reformat mock status-sw_version for assertion.",
        "Create a device registry entry with device info.",
        "Create a entity_registry entry which is using identifiers from device.",
        "Ensure that state is not set.",
        "Ensure that entity_id is the same as the existing.",
        "Ensure that state is not set.",
        "With no state/status and no existing entries, registry should be empty.",
        "Test with title name.",
        "Test with title name in caps.",
        "Test with title ID.",
        "Test that callback listener for entity is removed from protocol."
    ],
    "docstrings": [
        "\"\"\"Tests for the PS4 media player platform.\"\"\"",
        "\"\"\"Set up Mock Media Player.\"\"\"",
        "\"\"\"Mock raw UDP response from device.\"\"\"",
        "\"\"\"Test entity is setup correctly with entry correctly.\"\"\"",
        "\"\"\"Test that state is set to off.\"\"\"",
        "\"\"\"Test that state is set to playing.\"\"\"",
        "\"\"\"Test that state is set to idle.\"\"\"",
        "\"\"\"Test that state is set to None.\"\"\"",
        "\"\"\"Test that media attributes are fetched.\"\"\"",
        "\"\"\"Test that media attributes are loaded.\"\"\"",
        "\"\"\"Test that device info is set correctly from status update.\"\"\"",
        "\"\"\"Test that device info is assumed if device is unavailable.\"\"\"",
        "\"\"\"Reverse test that device info assumption works.\"\"\"",
        "\"\"\"Test that turn on service calls function.\"\"\"",
        "\"\"\"Test that turn off service calls function.\"\"\"",
        "\"\"\"Test that media pause service calls function.\"\"\"",
        "\"\"\"Test that media stop service calls function.\"\"\"",
        "\"\"\"Test that select source service calls function with title.\"\"\"",
        "\"\"\"Test that select source service calls function with upper case title.\"\"\"",
        "\"\"\"Test that select source service calls function with Title ID.\"\"\"",
        "\"\"\"Test that ps4 send command service calls function.\"\"\"",
        "\"\"\"Test that entry is unloaded.\"\"\""
    ],
    "functions": [
        "setup_mock_component",
        "mock_ddp_response",
        "test_media_player_is_setup_correctly_with_entry",
        "test_state_off_is_set",
        "test_state_playing_is_set",
        "test_state_idle_is_set",
        "test_state_none_is_set",
        "test_media_attributes_are_fetched",
        "test_media_attributes_are_loaded",
        "test_device_info_is_set_from_status_correctly",
        "test_device_info_is_assummed",
        "test_device_info_assummed_works",
        "test_turn_on",
        "test_turn_off",
        "test_media_pause",
        "test_media_stop",
        "test_select_source",
        "test_select_source_caps",
        "test_select_source_id",
        "test_ps4_send_command",
        "test_entry_is_unloaded"
    ],
    "classes": []
}