{
    "identifiers": [
        "os",
        "pandas",
        "pd",
        "pd",
        "options",
        "mode",
        "numpy",
        "np",
        "scipy",
        "collections",
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "model_selection",
        "cross_validate",
        "sklearn",
        "model_selection",
        "cross_val_score",
        "sklearn",
        "linear_model",
        "sklearn",
        "ensemble",
        "RandomForestRegressor",
        "sklearn",
        "ensemble",
        "GradientBoostingRegressor",
        "xgboost",
        "xgb",
        "sklearn",
        "metrics",
        "r2_score",
        "sklearn",
        "decomposition",
        "NMF",
        "scipy",
        "linalg",
        "svd",
        "matplotlib",
        "pyplot",
        "plt",
        "seaborn",
        "sns",
        "sns",
        "rc",
        "plotly",
        "plotly",
        "graph_objs",
        "go",
        "plotly",
        "graph_objects",
        "go",
        "plotly",
        "figure_factory",
        "ff",
        "IPython",
        "display",
        "display",
        "Markdown",
        "Latex",
        "ipywidgets",
        "widgets",
        "dash",
        "dash_core_components",
        "dcc",
        "dash_html_components",
        "html",
        "dash",
        "dependencies",
        "Input",
        "Output",
        "zipfile",
        "requests",
        "pickle",
        "urllib",
        "request",
        "tqdm",
        "tqdm",
        "tqdm",
        "b",
        "bsize",
        "tsize",
        "tsize",
        "tsize",
        "update",
        "b",
        "bsize",
        "n",
        "url",
        "output_path",
        "DownloadProgressBar",
        "unit",
        "unit_scale",
        "miniters",
        "desc",
        "url",
        "split",
        "t",
        "urllib",
        "request",
        "urlretrieve",
        "url",
        "filename",
        "output_path",
        "reporthook",
        "t",
        "update_to",
        "os",
        "path",
        "curdir",
        "os",
        "chdir",
        "path",
        "paths",
        "paths",
        "os",
        "makedirs",
        "pth",
        "exist_ok",
        "pth",
        "paths",
        "values",
        "vec",
        "weights",
        "weights",
        "np",
        "mean",
        "abs",
        "vec",
        "vec",
        "mean",
        "vec",
        "vec",
        "mean",
        "vec",
        "std",
        "vec",
        "weights",
        "weights",
        "np",
        "sqrt",
        "vec",
        "vec",
        "vec",
        "np",
        "sqrt",
        "vec",
        "vec",
        "vec",
        "weights",
        "weights",
        "vec",
        "sum",
        "vec",
        "vec",
        "sum",
        "vec",
        "weights",
        "weights",
        "vec",
        "max",
        "vec",
        "min",
        "stop_divide_by_zero",
        "vec",
        "vec",
        "min",
        "vec",
        "max",
        "vec",
        "min",
        "stop_divide_by_zero",
        "a",
        "isinstance",
        "a",
        "os",
        "path",
        "isfile",
        "fips_codes_exists",
        "download_url",
        "pd",
        "read_excel",
        "dfips",
        "set_index",
        "to_dict",
        "dfips",
        "set_index",
        "to_dict",
        "name_to_fips",
        "fips_to_name",
        "v",
        "k",
        "k",
        "v",
        "state_to_abbrev",
        "items",
        "state_to_abbrev",
        "abbrev_to_state",
        "os",
        "path",
        "isfile",
        "pums_datadic_exists",
        "download_url",
        "pd",
        "read_csv",
        "drop_duplicates",
        "census",
        "groupby",
        "first",
        "to_dict",
        "name_or_fipsnr",
        "datadic",
        "abbrev_to_state",
        "get",
        "name_or_fipsnr",
        "name_or_fipsnr",
        "translate_fips",
        "get",
        "nn",
        "name_or_abbrev",
        "translate_state_abbrev",
        "get",
        "name_or_abbrev",
        "variable_code",
        "census_variable_definitions",
        "get",
        "variable_code",
        "census_col",
        "search_string",
        "census",
        "census_col",
        "fillna",
        "apply",
        "x",
        "search_string",
        "lower",
        "x",
        "lower",
        "search_string",
        "census",
        "clk",
        "search_string",
        "clk",
        "search_string",
        "Datadic",
        "path",
        "paths",
        "name",
        "source",
        "path",
        "name",
        "source",
        "path",
        "name",
        "os",
        "path",
        "isfile",
        "zip_file",
        "onet_exists",
        "download_url",
        "source",
        "zip_file",
        "zipfile",
        "ZipFile",
        "zip_file",
        "make_toc",
        "data",
        "socp_shave",
        "drop_duplicates",
        "sep",
        "np",
        "array",
        "namelist",
        "nlst",
        "pd",
        "DataFrame",
        "nlst",
        "pd",
        "DataFrame",
        "nl",
        "apply",
        "x",
        "np",
        "split",
        "x",
        "replace",
        "dr",
        "sep",
        "to_dict",
        "index",
        "T",
        "tocdf",
        "name_contains",
        "extension",
        "tocdf",
        "extension",
        "selection",
        "selection",
        "extension",
        "name_contains",
        "name_contains",
        "selection",
        "selection",
        "apply",
        "x",
        "search_string",
        "lower",
        "x",
        "lower",
        "selection",
        "label",
        "socp_shave",
        "label",
        "dataset",
        "keys",
        "dataset",
        "label",
        "df",
        "apply",
        "x",
        "x",
        "replace",
        "replace",
        "apply",
        "x",
        "x",
        "socp_shave",
        "dataset",
        "label",
        "path",
        "name",
        "label",
        "os",
        "path",
        "isfile",
        "pkl_name",
        "pkl_exists",
        "label",
        "namelist",
        "label",
        "pd",
        "read_excel",
        "extract",
        "xlsx_name",
        "to_pickle",
        "pkl_name",
        "pd",
        "read_pickle",
        "pkl_name",
        "df",
        "apply",
        "x",
        "x",
        "replace",
        "replace",
        "apply",
        "x",
        "x",
        "socp_shave",
        "dataset",
        "df",
        "dataset",
        "label",
        "label",
        "columns",
        "data_value",
        "scale_name",
        "pd",
        "DataFrame",
        "data",
        "label",
        "copy",
        "groupby",
        "columns",
        "apply",
        "x",
        "x",
        "data_value",
        "values",
        "grp",
        "label",
        "xx",
        "yy",
        "socp_shave",
        "data_value",
        "scale_name",
        "show",
        "norm",
        "label",
        "xx",
        "yy",
        "socp_shave",
        "data_value",
        "scale_name",
        "norm",
        "matrix_dic",
        "keys",
        "yy",
        "xx",
        "data",
        "label",
        "socp_shave",
        "socp_shave",
        "groupby",
        "columns",
        "grpb",
        "mean",
        "loc",
        "scale_name",
        "data_value",
        "unstack",
        "grpb",
        "std",
        "loc",
        "scale_name",
        "data_value",
        "unstack",
        "grpb",
        "count",
        "loc",
        "scale_name",
        "data_value",
        "unstack",
        "T",
        "iloc",
        "T",
        "norm",
        "mat_mean",
        "apply",
        "col",
        "norm",
        "col",
        "weights",
        "mat_mean",
        "apply",
        "norm",
        "mat_std",
        "w",
        "matrix_dic",
        "mat_mean",
        "mat_std",
        "mat_count",
        "matrix_dic",
        "label",
        "xx",
        "yy",
        "socp_shave",
        "data_value",
        "scale_name",
        "norm",
        "show",
        "Onet",
        "path",
        "paths",
        "name",
        "source",
        "path",
        "name",
        "source",
        "state",
        "socp_shave",
        "datadic",
        "state_to_abbrev",
        "get",
        "state",
        "state",
        "path",
        "name",
        "state_abbr",
        "os",
        "path",
        "isfile",
        "pkl_name",
        "pkl_exists",
        "import_from_source",
        "state",
        "pd",
        "read_pickle",
        "pkl_name",
        "df",
        "apply",
        "x",
        "x",
        "socp_shave",
        "replace",
        "x",
        "x",
        "dataset",
        "df",
        "dataset",
        "state_abbr",
        "state",
        "state",
        "datadic",
        "state_to_abbrev",
        "get",
        "state",
        "state",
        "download_url",
        "source",
        "state_zipfile_name",
        "state_abbr",
        "path",
        "name",
        "zipfile",
        "ZipFile",
        "path",
        "name",
        "zipObj",
        "zipObj",
        "extractall",
        "path",
        "path",
        "datadic",
        "fips",
        "state",
        "path",
        "name",
        "state_abbr",
        "pd",
        "read_csv",
        "csv_filename",
        "to_pickle",
        "pkl_filename",
        "os",
        "remove",
        "csv_filename",
        "state_abbr",
        "state_abbr",
        "lower",
        "Census",
        "census",
        "onet",
        "y_label",
        "census",
        "onet",
        "y_label",
        "pd",
        "merge",
        "census",
        "y_label",
        "onet",
        "left_on",
        "right_index",
        "merged",
        "groupby",
        "sum",
        "Xy",
        "drop",
        "y_label",
        "axis",
        "Xy",
        "y_label",
        "X",
        "n",
        "norm",
        "norm_dot",
        "n",
        "X",
        "NMF",
        "n_components",
        "n",
        "init",
        "random_state",
        "max_iter",
        "tol",
        "model",
        "fit_transform",
        "X",
        "pd",
        "DataFrame",
        "w",
        "index",
        "X",
        "index",
        "o",
        "T",
        "apply",
        "norm",
        "T",
        "on",
        "copy",
        "occ",
        "occ",
        "index",
        "occ",
        "set_index",
        "model",
        "components_",
        "pd",
        "DataFrame",
        "h",
        "columns",
        "X",
        "columns",
        "f",
        "T",
        "apply",
        "norm",
        "T",
        "fig_scale",
        "metric",
        "method",
        "vertical",
        "fig_scale",
        "metric",
        "method",
        "vertical",
        "param",
        "plot_features_dic",
        "keys",
        "plot_features_dic",
        "param",
        "fig",
        "fig",
        "np",
        "square",
        "fn",
        "vertical",
        "sns",
        "clustermap",
        "df",
        "T",
        "robust",
        "z_score",
        "figsize",
        "n",
        "fig_scale",
        "X",
        "shape",
        "fig_scale",
        "method",
        "method",
        "metric",
        "metric",
        "sns",
        "clustermap",
        "df",
        "robust",
        "z_score",
        "figsize",
        "X",
        "shape",
        "fig_scale",
        "n",
        "fig_scale",
        "method",
        "method",
        "metric",
        "metric",
        "fig",
        "fig",
        "fig_scale",
        "metric",
        "method",
        "vertical",
        "fig_scale",
        "metric",
        "method",
        "vertical",
        "param",
        "plot_occupations_dic",
        "keys",
        "plot_occupations_dic",
        "param",
        "fig",
        "fig",
        "np",
        "square",
        "occ",
        "vertical",
        "sns",
        "clustermap",
        "df",
        "figsize",
        "n",
        "fig_scale",
        "X",
        "shape",
        "fig_scale",
        "method",
        "method",
        "metric",
        "metric",
        "sns",
        "clustermap",
        "df",
        "T",
        "figsize",
        "X",
        "shape",
        "fig_scale",
        "n",
        "fig_scale",
        "method",
        "method",
        "metric",
        "metric",
        "plot_occupations_dic",
        "fig",
        "fig",
        "fig",
        "sklearn",
        "model_selection",
        "train_test_split",
        "sklearn",
        "model_selection",
        "cross_validate",
        "sklearn",
        "model_selection",
        "cross_val_score",
        "sklearn",
        "linear_model",
        "sklearn",
        "ensemble",
        "RandomForestRegressor",
        "sklearn",
        "ensemble",
        "GradientBoostingRegressor",
        "xgboost",
        "xgb",
        "X",
        "y",
        "Xsamples",
        "regressor",
        "xgb",
        "XGBRegressor",
        "itr",
        "xval",
        "xval",
        "X",
        "columns",
        "i",
        "itr",
        "Xsamples",
        "train_test_split",
        "X",
        "sample",
        "Xsamples",
        "axis",
        "y",
        "test_size",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "cross_validate",
        "regressor",
        "X_train",
        "values",
        "y_train",
        "values",
        "cv",
        "n",
        "return_estimator",
        "y_test",
        "res_xboo",
        "res_xboo",
        "j",
        "predict",
        "X_test",
        "values",
        "j",
        "n",
        "res_xboo",
        "j",
        "score",
        "X_test",
        "values",
        "y_test",
        "values",
        "j",
        "n",
        "res_xboo",
        "j",
        "feature_importances_",
        "j",
        "n",
        "np",
        "concatenate",
        "np",
        "array",
        "scor",
        "values",
        "pd",
        "concat",
        "pd",
        "DataFrame",
        "feat_imp",
        "i",
        "i",
        "itr",
        "feat_tot",
        "reset_index",
        "inplace",
        "drop",
        "pd",
        "concat",
        "feat_tot",
        "mean",
        "feat_tot",
        "std",
        "axis",
        "feat_mean",
        "feat_mean",
        "X",
        "y",
        "res",
        "ypred",
        "ytest",
        "pd",
        "DataFrame",
        "scor",
        "T",
        "scor_tot",
        "mean",
        "scor_tot",
        "std",
        "feat_imp",
        "feat_mean",
        "sort_values",
        "ascending",
        "itr",
        "xval",
        "X",
        "u",
        "s",
        "vt",
        "svd",
        "np",
        "array",
        "X",
        "pd",
        "DataFrame",
        "vt",
        "columns",
        "X",
        "columns",
        "pd",
        "DataFrame",
        "u",
        "columns",
        "X",
        "index",
        "keep_volume",
        "collections",
        "namedtuple",
        "s",
        "cumsum",
        "a1",
        "a1",
        "np",
        "argmin",
        "np",
        "square",
        "a2",
        "keep_volume",
        "dotted_dic",
        "s",
        "s",
        "n_max",
        "f",
        "f",
        "iloc",
        "n_max",
        "o",
        "o",
        "iloc",
        "n_max",
        "cut_dic",
        "state",
        "state_cols",
        "fte",
        "y_label",
        "X_label",
        "socp_shave",
        "norm",
        "norm_dot",
        "state",
        "y_label",
        "X_label",
        "socp_shave",
        "fte",
        "onet",
        "matrix",
        "X_label",
        "socp_shave",
        "socp_shave",
        "norm",
        "norm",
        "state_cols",
        "census_cols",
        "census",
        "data",
        "state",
        "socp_shave",
        "socp_shave",
        "cols",
        "fte",
        "census",
        "dropna",
        "c0",
        "c0",
        "fte",
        "fte",
        "c1",
        "c1",
        "c1",
        "c1",
        "fte",
        "MakeXy",
        "census",
        "onet",
        "y_label",
        "y_label",
        "make_Xy",
        "X",
        "make_Xy",
        "y",
        "make_Xy",
        "Xy",
        "Svd",
        "X",
        "n",
        "norm",
        "norm_dot",
        "n",
        "archetypes_dic",
        "keys",
        "archetypes_dic",
        "n",
        "norm",
        "Archetypes",
        "X",
        "n",
        "norm",
        "norm",
        "archetypes_dic",
        "n",
        "norm",
        "arch_n1",
        "arch_n2",
        "n_arch",
        "kind",
        "svd",
        "f",
        "svd",
        "o",
        "archetypes",
        "n_arch",
        "f",
        "archetypes",
        "n_arch",
        "o",
        "T",
        "arch",
        "kind",
        "iloc",
        "arch_n1",
        "tr",
        "kind",
        "T",
        "arch",
        "kind",
        "iloc",
        "arch_n2",
        "tr",
        "kind",
        "T",
        "artr_1",
        "artr_2",
        "arch",
        "arch",
        "plot_features",
        "clusmap",
        "dendrogram_col",
        "data",
        "index",
        "clusmap",
        "dendrogram_col",
        "reordered_ind",
        "clusmap",
        "dendrogram_col",
        "data",
        "reindex",
        "clus_ind",
        "clus_df",
        "dash",
        "Dash",
        "external_stylesheets",
        "external_stylesheets",
        "html",
        "Div",
        "html",
        "Div",
        "html",
        "Div",
        "html",
        "Img",
        "src",
        "className",
        "style",
        "html",
        "H1",
        "children",
        "className",
        "style",
        "html",
        "Div",
        "children",
        "className",
        "className",
        "html",
        "Div",
        "html",
        "Div",
        "html",
        "Label",
        "style",
        "dcc",
        "Dropdown",
        "id",
        "value",
        "multi",
        "className",
        "style",
        "html",
        "Div",
        "html",
        "Label",
        "style",
        "dcc",
        "RadioItems",
        "id",
        "options",
        "value",
        "className",
        "style",
        "html",
        "Div",
        "html",
        "Label",
        "style",
        "dcc",
        "RadioItems",
        "id",
        "options",
        "value",
        "className",
        "style",
        "html",
        "Div",
        "html",
        "Label",
        "style",
        "dcc",
        "Dropdown",
        "id",
        "options",
        "value",
        "className",
        "style",
        "className",
        "html",
        "Div",
        "html",
        "Div",
        "html",
        "Label",
        "style",
        "dcc",
        "Dropdown",
        "id",
        "options",
        "k",
        "v",
        "k",
        "v",
        "datadic",
        "state_to_abbrev",
        "items",
        "value",
        "multi",
        "className",
        "style",
        "html",
        "Div",
        "html",
        "Label",
        "style",
        "dcc",
        "Dropdown",
        "id",
        "options",
        "k",
        "k",
        "k",
        "value",
        "multi",
        "className",
        "style",
        "html",
        "Div",
        "html",
        "Label",
        "style",
        "dcc",
        "Dropdown",
        "id",
        "options",
        "value",
        "className",
        "style",
        "html",
        "Div",
        "html",
        "Label",
        "style",
        "dcc",
        "Dropdown",
        "id",
        "options",
        "value",
        "className",
        "style",
        "className",
        "html",
        "Div",
        "html",
        "Div",
        "dcc",
        "Graph",
        "id",
        "html",
        "Div",
        "dcc",
        "Graph",
        "id",
        "className",
        "className",
        "className",
        "df",
        "ff",
        "create_dendrogram",
        "df",
        "orientation",
        "orientation",
        "labels",
        "df",
        "index",
        "dendro_arch",
        "ff",
        "create_dendrogram",
        "df",
        "T",
        "orientation",
        "orientation",
        "labels",
        "df",
        "T",
        "index",
        "dendro_other",
        "df",
        "dendro_other_leaves",
        "loc",
        "dendro_arch_leaves",
        "clustered_df",
        "dendro_arch",
        "dendro_other",
        "app",
        "callback",
        "dash",
        "dependencies",
        "Output",
        "dash",
        "dependencies",
        "Input",
        "feature_set",
        "i",
        "i",
        "i",
        "onet",
        "matrix",
        "feature_set",
        "shape",
        "app",
        "callback",
        "dash",
        "dependencies",
        "Output",
        "dash",
        "dependencies",
        "Input",
        "dash",
        "dependencies",
        "Input",
        "dash",
        "dependencies",
        "Input",
        "dash",
        "dependencies",
        "Input",
        "dash",
        "dependencies",
        "Input",
        "dash",
        "dependencies",
        "Input",
        "dash",
        "dependencies",
        "Input",
        "dash",
        "dependencies",
        "Input",
        "plots",
        "n_archs",
        "state",
        "feature_set",
        "occupations",
        "feature_norm",
        "arch_feat_norm",
        "norm_axis",
        "Xyzzy",
        "state",
        "X_label",
        "feature_set",
        "socp_shave",
        "occupations",
        "norm",
        "eval",
        "feature_norm",
        "archetypes",
        "n_archs",
        "plots",
        "df",
        "f",
        "plots",
        "df",
        "o",
        "T",
        "clustermap",
        "dfp",
        "go",
        "Figure",
        "go",
        "Heatmap",
        "z",
        "f",
        "apply",
        "eval",
        "arch_feat_norm",
        "axis",
        "norm_axis",
        "values",
        "y",
        "f",
        "index",
        "x",
        "f",
        "columns",
        "layout",
        "go",
        "Layout",
        "xaxis",
        "yaxis",
        "figure",
        "app",
        "run_server",
        "host",
        "debug"
    ],
    "literals": [
        "'figure.figsize'",
        "'B'",
        "'/'",
        "'data'",
        "'./data'",
        "'census'",
        "'data'",
        "'/census'",
        "'onet'",
        "'data'",
        "'/onet'",
        "'data/state-geocodes-v2016.xls'",
        "'*** FIPS State Geocodes is missing. Downloading from Census...'",
        "'https://www2.census.gov/programs-surveys/popest/geographies/2016/state-geocodes-v2016.xls'",
        "'./data/state-geocodes-v2016.xls'",
        "'*** Complete.'",
        "'data/state-geocodes-v2016.xls'",
        "'Unnamed: 3'",
        "'Unnamed: 2'",
        "'Unnamed: 2'",
        "'Unnamed: 3'",
        "'Alabama'",
        "'AL'",
        "'Alaska'",
        "'AK'",
        "'Arizona'",
        "'AZ'",
        "'Arkansas'",
        "'AR'",
        "'California'",
        "'CA'",
        "'Colorado'",
        "'CO'",
        "'Connecticut'",
        "'CT'",
        "'Delaware'",
        "'DE'",
        "'District of Columbia'",
        "'DC'",
        "'Florida'",
        "'FL'",
        "'Georgia'",
        "'GA'",
        "'Hawaii'",
        "'HI'",
        "'Idaho'",
        "'ID'",
        "'Illinois'",
        "'IL'",
        "'Indiana'",
        "'IN'",
        "'Iowa'",
        "'IA'",
        "'Kansas'",
        "'KS'",
        "'Kentucky'",
        "'KY'",
        "'Louisiana'",
        "'LA'",
        "'Maine'",
        "'ME'",
        "'Maryland'",
        "'MD'",
        "'Massachusetts'",
        "'MA'",
        "'Michigan'",
        "'MI'",
        "'Minnesota'",
        "'MN'",
        "'Mississippi'",
        "'MS'",
        "'Missouri'",
        "'MO'",
        "'Montana'",
        "'MT'",
        "'Nebraska'",
        "'NE'",
        "'Nevada'",
        "'NV'",
        "'New Hampshire'",
        "'NH'",
        "'New Jersey'",
        "'NJ'",
        "'New Mexico'",
        "'NM'",
        "'New York'",
        "'NY'",
        "'North Carolina'",
        "'NC'",
        "'North Dakota'",
        "'ND'",
        "'Ohio'",
        "'OH'",
        "'Oklahoma'",
        "'OK'",
        "'Oregon'",
        "'OR'",
        "'Pennsylvania'",
        "'PA'",
        "'Rhode Island'",
        "'RI'",
        "'South Carolina'",
        "'SC'",
        "'South Dakota'",
        "'SD'",
        "'Tennessee'",
        "'TN'",
        "'Texas'",
        "'TX'",
        "'Utah'",
        "'UT'",
        "'Vermont'",
        "'VT'",
        "'Virginia'",
        "'VA'",
        "'Washington'",
        "'WA'",
        "'West Virginia'",
        "'WV'",
        "'Wisconsin'",
        "'WI'",
        "'Wyoming'",
        "'WY'",
        "'./data/census/PUMS_Data_Dictionary.csv'",
        "'*** Census ACS/PUMS Data Dictionary is missing. Downloading from Census...'",
        "'https://www2.census.gov/programs-surveys/acs/tech_docs/pums/data_dict/PUMS_Data_Dictionary_2017.csv'",
        "'./data/census/PUMS_Data_Dictionary.csv'",
        "'*** Complete.'",
        "\"data/census/PUMS_Data_Dictionary.csv\"",
        "'RT'",
        "'Record Type'",
        "'nan'",
        "'Record Type'",
        "'Unnamed: 6'",
        "'onet'",
        "'onet'",
        "'https://www.onetcenter.org/dl_files/database/db_23_3_excel.zip'",
        "'/'",
        "'.zip'",
        "'*** Onet database does not exist. Downloading from Onet...'",
        "'*** Complete.'",
        "'Alternate Titles'",
        "'SOCP_shave'",
        "'Title'",
        "'.'",
        "''",
        "'.'",
        "'name'",
        "'extension'",
        "'extension'",
        "'name'",
        "'name'",
        "'name'",
        "'SOCP_shave'",
        "'O*NET-SOC Code'",
        "'.'",
        "''",
        "'-'",
        "''",
        "'/'",
        "'_'",
        "'.pkl'",
        "'*** '",
        "'.pkl does not exist. Creating...'",
        "'.xlsx'",
        "'*** Complete.'",
        "'SOCP_shave'",
        "'O*NET-SOC Code'",
        "'.'",
        "''",
        "'-'",
        "''",
        "'Scale Name'",
        "'Element Name'",
        "'Data Value'",
        "'Level'",
        "'Element Name'",
        "'SOCP_shave'",
        "'Data Value'",
        "'Level'",
        "'mean'",
        "'*** Onet matrix not in dictionary. Constructing....'",
        "'Scale Name'",
        "'mean'",
        "'std'",
        "'count'",
        "'*** Complete'",
        "'census'",
        "'census'",
        "'https://www2.census.gov/programs-surveys/acs/data/pums/2017/5-Year/'",
        "'/'",
        "'_'",
        "'.pkl'",
        "'SOCP_shave'",
        "'SOCP'",
        "'X'",
        "'0'",
        "'*** Downloading '",
        "' ACS/PUMS dataset from US Census...'",
        "'/'",
        "\"_tmp.zip\"",
        "'*** Reformatting...'",
        "'/'",
        "\"_tmp.zip\"",
        "'r'",
        "'/psam_p'",
        "'.csv'",
        "'/'",
        "'_'",
        "'.pkl'",
        "'*** Complete.'",
        "'csv_p'",
        "'.zip'",
        "'fte'",
        "'SOCP_shave'",
        "'SOCP_shave'",
        "'SOCP_shave'",
        "'random'",
        "'Occupations'",
        "'Occupations'",
        "'cosine'",
        "'single'",
        "'cosine'",
        "'single'",
        "'estimator'",
        "'estimator'",
        "'estimator'",
        "'mean'",
        "'std'",
        "'ratio'",
        "'std'",
        "'mean'",
        "'mean'",
        "'std'",
        "'mean'",
        "'dotted_dic'",
        "'s f o'",
        "'WAGP'",
        "'WKHP'",
        "'fulltime'",
        "'min_hours'",
        "'min_fte'",
        "'fte'",
        "'Abilities'",
        "'SOCP_shave'",
        "'WKHP'",
        "'min_hours'",
        "'fte'",
        "'fulltime'",
        "'WAGP'",
        "'WKHP'",
        "'fte'",
        "'min_fte'",
        "'features'",
        "'features'",
        "'occupations'",
        "'features'",
        "'occupations'",
        "'https://codepen.io/chriddyp/pen/bWLwgP.css'",
        "'Occupational Archetypes'",
        "\"https://i4j.info/wp-content/uploads/2018/08/logo-only-171ox.png\"",
        "'three columns'",
        "'height'",
        "'10%'",
        "'width'",
        "'10%'",
        "'float'",
        "'right'",
        "'position'",
        "'relative'",
        "'margin-top'",
        "'margin-right'",
        "'OCCUPATIONAL ARCHETYPES'",
        "\"nine columns\"",
        "'margin-top'",
        "'margin-right'",
        "'nine columns'",
        "\"row\"",
        "'#Archetypes'",
        "'font-weight'",
        "'bold'",
        "'NoA'",
        "'one columns offset-by-one'",
        "'margin-top'",
        "'30'",
        "'Plot'",
        "'font-weight'",
        "'bold'",
        "'Plots'",
        "'label'",
        "'Features'",
        "'value'",
        "'f'",
        "'label'",
        "'Occupations'",
        "'value'",
        "'o'",
        "'f'",
        "'two columns'",
        "'margin-top'",
        "'30'",
        "'Normalize'",
        "'font-weight'",
        "'bold'",
        "'norm_axis'",
        "'label'",
        "'Archetypes'",
        "'value'",
        "'label'",
        "'Other'",
        "'value'",
        "'two columns'",
        "'margin-top'",
        "'30'",
        "'Archetype Normalization'",
        "'font-weight'",
        "'bold'",
        "'arch_feat_norm'",
        "'label'",
        "'Scale:     Max = 1, Min = 0'",
        "'value'",
        "'scale'",
        "'label'",
        "'Intensity: Sum = 1'",
        "'value'",
        "'norm_sum'",
        "'label'",
        "'Cosine Similarity'",
        "'value'",
        "'norm_dot'",
        "'label'",
        "'Statistic: Mean = 0, St.Dev. = 1'",
        "'value'",
        "'norm_stat'",
        "'norm_sum'",
        "'three columns'",
        "'margin-top'",
        "'30'",
        "\"row\"",
        "'State'",
        "'font-weight'",
        "'bold'",
        "'State'",
        "'label'",
        "'value'",
        "'ID'",
        "'two columns offset-by-one'",
        "'margin-top'",
        "'30'",
        "'Feature Set'",
        "'font-weight'",
        "'bold'",
        "'Features'",
        "'label'",
        "'value'",
        "'Abilities'",
        "'Knowledge'",
        "'Skills'",
        "'Abilities'",
        "'two columns'",
        "'margin-top'",
        "'30'",
        "'Occupations'",
        "'font-weight'",
        "'bold'",
        "'Occupations'",
        "'label'",
        "'Major Groups'",
        "'value'",
        "'label'",
        "'Minor Groups'",
        "'value'",
        "'label'",
        "'Broad Occupations'",
        "'value'",
        "'label'",
        "'Detailed Occupations'",
        "'value'",
        "'two columns'",
        "'margin-top'",
        "'30'",
        "'Input Feature Normalization'",
        "'font-weight'",
        "'bold'",
        "'feature_norm'",
        "'label'",
        "'Scale:     Max = 1, Min = 0'",
        "'value'",
        "'scale'",
        "'label'",
        "'Intensity: Sum = 1'",
        "'value'",
        "'norm_sum'",
        "'label'",
        "'Cosine Similarity'",
        "'value'",
        "'norm_dot'",
        "'label'",
        "'Statistic: Mean = 0, St.Dev. = 1'",
        "'value'",
        "'norm_stat'",
        "'scale'",
        "'three columns'",
        "'margin-top'",
        "'30'",
        "\"row\"",
        "'example-graph'",
        "'example-graph-2'",
        "\"row\"",
        "\"row\"",
        "'twelve columns'",
        "'arch'",
        "'right'",
        "'other'",
        "'bottom'",
        "'arch'",
        "'layout'",
        "'yaxis'",
        "'ticktext'",
        "'other'",
        "'layout'",
        "'xaxis'",
        "'ticktext'",
        "'heatmap'",
        "'arch_dendro'",
        "'other_dendro'",
        "'NoA'",
        "'options'",
        "'Features'",
        "'value'",
        "'label'",
        "'value'",
        "'example-graph'",
        "'figure'",
        "'Plots'",
        "'value'",
        "'NoA'",
        "'value'",
        "'State'",
        "'value'",
        "'Features'",
        "'value'",
        "'Occupations'",
        "'value'",
        "'feature_norm'",
        "'value'",
        "'arch_feat_norm'",
        "'value'",
        "'norm_axis'",
        "'value'",
        "'f'",
        "'o'",
        "'heatmap'",
        "'type'",
        "'category'",
        "'type'",
        "'category'",
        "'__main__'",
        "\"0.0.0.0\""
    ],
    "variables": [
        "chained_assignment",
        "total",
        "path",
        "paths",
        "paths",
        "paths",
        "paths",
        "stop_divide_by_zero",
        "fips_codes_exists",
        "dfips",
        "name_to_fips",
        "fips_to_name",
        "translate_fips",
        "state_to_abbrev",
        "abbrev_to_state",
        "translate_state_abbrev",
        "pums_datadic_exists",
        "census",
        "census_variable_definitions",
        "nn",
        "datadic",
        "path",
        "name",
        "source",
        "dataset",
        "matrix_dic",
        "zip_file",
        "onet_exists",
        "tocdf",
        "socp_titles",
        "nlst",
        "dr",
        "nl",
        "tocdf",
        "selection",
        "selection",
        "search_string",
        "selection",
        "df",
        "df",
        "pkl_name",
        "pkl_exists",
        "xlsx_name",
        "df",
        "df",
        "label",
        "grp",
        "columns",
        "grpb",
        "mat_mean",
        "mat_std",
        "mat_count",
        "w",
        "mat_mean",
        "mat_std",
        "label",
        "xx",
        "yy",
        "socp_shave",
        "data_value",
        "scale_name",
        "norm",
        "onet",
        "path",
        "name",
        "source",
        "dataset",
        "state_abbr",
        "pkl_name",
        "pkl_exists",
        "df",
        "df",
        "state_abbr",
        "state_abbr",
        "csv_filename",
        "pkl_filename",
        "census",
        "census",
        "onet",
        "y_label",
        "merged",
        "Xy",
        "X",
        "y",
        "n",
        "X",
        "model",
        "w",
        "o",
        "on",
        "occ",
        "occ",
        "h",
        "f",
        "fn",
        "plot_occupations_dic",
        "plot_features_dic",
        "param",
        "fig",
        "df",
        "fig",
        "fig",
        "features_plot",
        "param",
        "fig",
        "df",
        "fig",
        "fig",
        "param",
        "n",
        "feature_names",
        "res",
        "ypred",
        "ytest",
        "scor",
        "feat_imp",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "res_xboo",
        "ytest",
        "i",
        "res",
        "i",
        "ypred",
        "i",
        "scor",
        "i",
        "feat_imp",
        "i",
        "scor_tot",
        "feat_tot",
        "feat_mean",
        "feat_mean",
        "columns",
        "feat_mean",
        "X",
        "y",
        "fit",
        "y_predict",
        "y_test",
        "scores",
        "score",
        "feature_importances",
        "feature_importance",
        "itr",
        "xv",
        "f",
        "o",
        "dotted_dic",
        "a1",
        "a2",
        "n_max",
        "cut_dic",
        "state",
        "y_label",
        "X_label",
        "socp_shave",
        "fte",
        "onet",
        "census_cols",
        "cols",
        "census",
        "c0",
        "c1",
        "c1",
        "census",
        "make_Xy",
        "X",
        "y",
        "Xy",
        "svd",
        "archetypes_dic",
        "tr",
        "arch",
        "artr_1",
        "artr_2",
        "clusmap",
        "clus_ind",
        "clus_df",
        "external_stylesheets",
        "app",
        "app",
        "title",
        "app",
        "layout",
        "orientation",
        "dendro_arch",
        "dendro_arch_leaves",
        "dendro_other",
        "dendro_other_leaves",
        "clustered_df",
        "df",
        "dfp",
        "ax",
        "dfp",
        "ax",
        "f"
    ],
    "comments": [
        "%%",
        "IMPORT LIBRARIES",
        "OS",
        "MANAGE",
        "default='warn'",
        "FIT",
        "DECOMPOSITION",
        "PRESENTATION",
        "Graphics",
        "Rich text",
        "Apps & Widgets",
        "I/O",
        "DOWNLOAD",
        "## NLP",
        "import nltk",
        "lemmatizer = nltk.stem.WordNetLemmatizer()",
        "from nltk.corpus import stopwords",
        "set(stopwords.words('english'))",
        "from nltk.tokenize import RegexpTokenizer",
        "tokenizer = RegexpTokenizer(r'\\w+')",
        "CREATE PATHS / DIRECTORIES",
        "path to home directory (the location of this file)",
        "path0 = !pwd",
        "path = path0.n",
        "Check if directories exist - creat directories if needed",
        "GENERAL FUNCTIONS",
        "NORMALIZATION",
        "Statistic normalization - subtract mean, scale by standard deviation",
        "Algebraic normalization - dot product",
        "Algebraic normalization - dot product",
        "",
        "Scaled Normalization -",
        "SELECTION",
        "CLASSES",
        "DATA DICTIONARY",
        "Set up FIPS CODES for states and regions",
        "!curl -o ./data/state-geocodes-v2016.xls -O https://www2.census.gov/programs-surveys/popest/geographies/2016/state-geocodes-v2016.xls",
        "five first rows are comment",
        "Set up CENSUS/ACS PUMS DATA DICTIONARY",
        "!curl -o ./data/census/PUMS_Data_Dictionary.csv -O https://www2.census.gov/programs-surveys/acs/tech_docs/pums/data_dict/PUMS_Data_Dictionary_2017.csv",
        "All definitions containing a select string",
        "shcmd = 'curl -o '+zip_file+' -O '+source",
        "!$shcmd'",
        "If dataframe in dictionary:",
        "If dataframe NOT in dictionary:",
        "If pickled dataframe does not exist, create from zipped excel",
        "Read pickled dataframe into dictionary",
        "Default columns",
        "Instantiate Onet() as 'onet'",
        "Create and execute shell command fetching state census zip-file",
        "shcmd = \"curl -o \"+self.path+'/'+self.name+\"_tmp.zip -O \"+ self.source +self.state_zipfile_name(state_abbr)",
        "! $shcmd",
        "! rm $csv_filename",
        "Instantiate Census() as 'census'",
        "# Xy - matrix",
        "# MATRIX-FACTORIZATION: DIMENSIONALITY REDUCTION & ARCHETYPING",
        "## CLUSTER FEATURES INTO OCCUPATION CATEGORIES",
        "## Use non-zero matrix factorization for clustering",
        "## Use singular value decomposition first state for determining overall similarity",
        "self.occ['Occupations'] = self.occ['Occupations'].apply(onet_socp_name)",
        "horizontal",
        "return",
        "horizontal",
        "return",
        "FITTING",
        "# feat_tot.columns = X.columns",
        "STORING RESULTS AS ATTRIBUTES",
        "## NLP UNDER DEVELOPMENT #################",
        "def drop_stopwords(wordvec,language='English'):",
        "wv = np.array(wordvec)",
        "stw = np.array(stopwords.words(language))",
        "without_stopwords = wv[[not word in stw for word in wv]]",
        "return without_stopwords",
        "def lemmatize(wordvec):",
        "return [lemmatizer.lemmatize(word) for word in wordvec ]",
        "def nlp_prep(string):",
        "wordvec = tokenizer.tokenize(string.lower())",
        "return np.array(lemmatize(drop_stopwords(wordvec)))",
        "def word_matrix(df_col):",
        "title_vec = onet.socp_titles['Title'].apply(nlp_prep)",
        "onet.socp_titles['title_vec'] = title_vec",
        "onet.socp_titles['title_vec']",
        "tt = onet.socp_titles.set_index('SOCP_shave')[['title_vec']]",
        "keywords = np.array(list(set(tt['title_vec'].apply(list).sum())))",
        "df = pd.DataFrame(index = keywords, columns = tt.index)",
        "for socp,keyw in tt['title_vec'].to_dict().items():",
        "df[socp].loc[keyw]=1",
        "sp = scipy.sparse.csr_matrix(df.fillna(0))",
        "Macro function",
        "seaborn clustermap object",
        "clustermap as df",
        "DASH/PLOTLY  WEB APP",
        "], className = 'row'),",
        "@app.callback(",
        "dash.dependencies.Output('example-graph-2', 'figure'),",
        "[dash.dependencies.Input('Cities', 'value')])",
        "def update_graph_src(selector):",
        "data = []",
        "for city in selector:",
        "data.append({'x': city_data[city]['x'], 'y': city_data[city]['y'],",
        "'type': 'line', 'name': city})",
        "figure = {",
        "'data': data,",
        "'layout': {",
        "'title': 'Graph 1',",
        "'xaxis' : dict(",
        "title='x Axis',",
        "titlefont=dict(",
        "family='Courier New, monospace',",
        "size=20,",
        "color='#7f7f7f'",
        ")),",
        "'yaxis' : dict(",
        "title='y Axis',",
        "titlefont=dict(",
        "family='Helvetica, monospace',",
        "size=20,",
        "color='#7f7f7f'",
        "))",
        "}",
        "}",
        "%%"
    ],
    "docstrings": [
        "'''\n    Normalizes a vector v-v.mean())/v.std() \n    '''",
        "'''\n    Normalizes the columns of a DataFrame (dot product)\n    '''",
        "'''\n    Normalizes the columns of a DataFrame (dot product)\n    '''",
        "'''\n    typically used for Boolean masking in Pandas, e.g.  \n               df[df['column'].apply(is_string)] \n    returns all rows in df where df['column'] has a string value   \n    '''",
        "'''\n    Onet() is an object based on the Onet labor market database. \n\n    my_onet.source  - string: URL for importing the onet database from source\n    my_onet.path    - string: local path to the directory where the onet database is stored. (set in 'paths' dictionary)\n    my_onet.name    - string: the prefix of stored files, e.g. zipped DB:      path + '/'+ name +'.zip'\n    my_onet.toc()   - function: returns table of contents for onet database\n\n   # Data in Onet database\n    my_onet.data()\n                    - function: returns dataset named by label.\n    my_onet.matrix() \n                    - function: returns onet dataset in matrix form\n    my_onet.n_matrix() \n                    - function: normalized onet matrix\n \n   \n    '''",
        "'''\n        Creates table of contents for Onet Database, returns as my_onet.tocdf (dataframe)\n        '''",
        "'''\n        Returns table of contents for Onet Database (dataframe) masked by string and/or extension\n        '''",
        "'''\n        Returns onet dataset named 'label'\n        '''",
        "'''\n        Converts onet dataset into a matrix \n        xx          - matrix columns\n        yy          - matrix index\n        scale_name  - value category \n        data_value  - data values\n        socp_shave  - number of digits in 'shaved' SOCP number\n        show        - output matrix shows 'mean'(default), 'std' or 'count' (relevant for groupby socp_shave)\n        norm        - columns are normalized: 'norm = norm_dot'  [ col/sqrt(col@col) ] \n                                              'norm = norm_stat' [ (col - col.mean) / col.std ] \n                                         \n        '''",
        "'''\n    Census() is an object containing census ACS/PUMS data \n    my_census.source    - string: URL for importing the census data from US Census online\n    my_census.path      - string: local path to the directory where the census data is stored. (set in 'paths' dictionary)\n    my_census.name      - string: the prefix of stored files, e.g. pickle:      path + '/'+ name +'.pkl'\n\n    my_census.data(self,state, socp_shave = n)\n                        - function: returns the acs/pums for 'state', with an SOCP number of 'n' digits (default n=6)\n    my_census.dataset   - dataframe: acs/pums data for a state (state abbreviation used for naming)\n    my_census.import_from_source(self,state)\n                        - function: imports data for 'state' from my_census.source and converts to pickled dataframe \n\n\n    # my_census.state    – String: name of state, e.g. 'California', or abbreviation, e.g. 'CA'\n    # my_census.data     – DataFrame: imported census ACS/PUMS data (from pickle)\n    # my_census.workers  – DataFrame: people fulfilling 'workers' criteria (see below)\n    # my_census.occupations         – DataFrame: Occupations of the workers (groupby SOCP-number)\n    \n    # my_census.workers_occupations(age_low = 40, age_high = 65, std_max = 0.5, socp_granularity = 5):\n    #      - Function: populates my_census.workers / .occupations according to criteria\n    #          – Workers: age_low (default 40)  and age_high (default 65)\n    #          – Occupations: socp_granularity (default 5) ; the length of the SOCP number, default 5 digits.\n    \n    '''",
        "'''\n        READ CENSUS/ACS PUMS DATABASE. Search order: Dictionary, Pickle; Create dictionary/pickle if non-existent.\n        socp_shave  : number of digits in 'shaved' SOCP number\n        '''",
        "'''\n        Imports ACS/PUMS dataset from US Census online, URL: my_census.source\n        '''",
        "'''\n        Input: State name abbreviation. Returns census-convention name of zipped csv-file\n        '''",
        "'''\n    MakeXy is an object containing a combination of census and onet data\n    \n    my_makeXy = MakeXy(my_census,my_onet)\n    \n    my_makeXy.Xy     : Merges my_census and my_onet with 'SOCP_shave' (occupational code)\n                                as common variable and my_census[y_label] as target variable, and groups: \n                                my_make.Xy(y_label) = merged.groupby('SOCP_shave').sum() \n    my_makeXy.X      : X-matrix / independent variables\n    my_makeXy.y      : y-matrix / target\n    \n    '''",
        "'''\n    Archetypes: Performs NMF of order n on X and stores the result as attributes. \n    Archetypes are normalized: cosine similarity a(i) @ a(i) = 1. \n    Atributes:\n        my_archetypes.n         - order / number of archetypes\n        my_archetypes.X         - input matrix\n        \n        my_archetypes.model     - NMF model \n        my_archetypes.w         - NMF w-matrix \n        my_archetypes.h         - NMF h-matrix\n        \n        my_archetypes.o         - occupations x archetypes matrix (from w-matrix)\n        my_archetypes.on        - occupations x normalized archetypes matrix (from w-matrix) - SOCP number as index. \n        my_archetypes.occ       - occupations x normalized archetypes matrix - Occupation names as index\n        \n        my_archetypes.f         - features x archetypes matrix (from h-matrix)\n        my_archetypes.fn        - features x normalized archetypes matrix\n        \n    '''",
        "'''\n        Plot Archetypes as x and features as y. \n        Utilizes Seaborn Clustermap, with hierarchical clustering along both axes. \n        This clusters features and archetypes in a way that visualizes similarities and diffferences\n        between the archetypes. \n        \n        Archetypes are normalized (cosine-similarity): dot product archetype[i] @ archetype[i] = 1.\n        The plot shows intensities (= squared feature coefficients) so that the sum of intensities = 1.  \n\n        fig_scale: default values (x/1, y/3.5) scales the axes so that all feature labels are included in the plot.\n        \n        For other hyperparameters, see seaborn.clustermap\n     \n        '''",
        "'''\n        Plot Archetypes as x and occupations as y. \n        Utilizes Seaborn Clustermap, with hierarchical clustering along both axes. \n        This clusters occupations and archetypes in a way that visualizes similarities and diffferences\n        between the archetypes. \n        \n        Occupations are normalized (cosine-similarity): dot product occupation[i] @ occupation[i] = 1.\n        The plot shows intensities (= squared feature coefficients) so that the sum of intensities = 1.  \n\n        fig_scale: default values (x/1, y/3.5) scales the axes so that all feature labels are included in the plot.\n        \n        For other hyperparameters, see seaborn.clustermap\n     \n        '''",
        "'''\n    Xfit is a 'fit-as-an-object' solution:\n        my_fit = Xfit(X,y,Xsamples=False, my_regressor, itr, xval) \n            does the following:\n            0. SAMPLES X - unless Xsamples is 'False' [default value], X is replaced by n random samples of itself  \n            1. SPLITS X and y into test and training sets. \n            2. FITS a cross-validation, slicing the training data into 'xval' slices : cross_validate(regressor,X_train.values, y_train.values, cv=xval) \n            3. BOOTSTRAPS: Repeats (1-2) 'itr' number of times\n            4. RETURNS RESULTS as attributes:\n                my_fit.X          – List: The original X input data\n                my_fit.itr        – Number of iterations / fits\n                my_fit.y          – List: The original y input data\n                my_fit.xval       – Number of slices in the cross validation\n                my_fit.fit        – Dictionary: the 'itr' number of cross-validated fits, including estimators\n                my_fit.y_test     – Dictionary: the y_test (list) for each fit\n                my_fit.y_predict  – Dictionary: the predicted y for each fit\n                my_fit.scores     – Pandas.DataFrame: validation scores for all fits \n                my_fit.score      – Dictionary: the mean score and standard deviation. \n                my_fit.features_importances        – Dictionary: feature_importances for all fits (for estimators with '.feature_importance_' as an attribute )\n                my_fit.feature_importance          – Pandas.DataFrame: the average feature importances and standard deviations.           \n    '''",
        "''''\n    Singular value decomposition-as-an-object\n        my_svd = Svd(X) returns\n        my_svd.u/.s/.vt – U S and VT from the Singular Value Decomposition (see manual)\n        my_svd.f        – Pandas.DataFrame: f=original features x svd_features\n        my_svd.o        - Pandas.DataFrame: o=occupations x svd_features\n        my_svd.volume(keep_volume) \n                        - collections.namedtuple ('dotted dicionary'): \n                          Dimensionality reduction. keeps 'keep_volume' of total variance\n                          \n                          \n    '''",
        "''' \n        Dimensionality reduction, keeps 'keep_volume' proportion of original variance\n        Type: collections.namedtuple ('dotted dictionary')\n        Examples of usage:\n        my_svd.volume(0.9).s - np.array: eigenvalues for 90% variance \n        my_svd.volume(0.8).f - dataframe: features for 80% variance\n        my_svd.volume(0.5).o - dataframe: occupations for 50% variance      \n        '''",
        "'''\n    Xyzzy is a 'front-end for the back-end' and pipeline for the archetypes package. \n    Its purpose is to simplify the archetypal analysis of labor markets, where the US Census ACS/PUMS database \n    is used for mapping demographics with social and economic variables onto occupations, such \n    as ages and incomes of workers in a specific demographic, and where the O-net database \n    is used for mapping occupations onto variables, such as knowledge, skills or abilities. \n\n    Xyzzy was not designed to be a macro command language but the door can be kept open ;)\n    \n    #### Hyper parameters:\n    \n    state       : [str ] For census.data(state), e.g. 'California' or 'CA'. \n    state_cols  : [list] columns to include from census, default value ['WAGP','WKHP'] \n                    - wage & work hours per week. (definitions in census data dictionary)\n    fte         : [dict] Unless 'fte=False', 'fte' column (full-time wage equivalent) is added \n                    to the census data. Requires ['WAGP','WKHP']. \n                    Drops rows not fulfilling screeing requirements 'min_hours' and 'min_fte'\n                    Dictionary keys:\n                        'fulltime'  - work hours for fulltime        (default 40)\n                        'min_hours' - minimum nweekly hours required (default 15)\n                        'min_fte'   - minimum fte wage required      (default 0)\n    y_label     : [str] Name of census target variable/column\n    X_label     : [str] Name of O-net set of variables \n    socp_shave  : [int] occupational number length. Sets granularity of occupations.\n    norm        : [function] Function for normalizing the X-matrix, can be (but not restricted to) \n                    norm_dot  norm(vec) @ norm(vec) = 1 \n                    norm_stat norm(vec).mean = 0 ; norm(vec).std = 1\n                    norm_sum  norm(vec).sum = 1\n                    scale     norm(vec).min=0 ; norm(vec).max=1\n  \n    \n    \n    '''",
        "'''\n        MakeXy / Archetypes wizard. \n        '''",
        "'''\n                        Archetypes are patterns, i.e. clusters of co-occuring features. The O-net database maps a thousand occupations onto feature sets, such as\n                        knowledge, skills and abilities. US Census provides the distributions of occupations within demographies. By combining the two, \n                        archetypes - clusters of features and occupations - are computed from the data.  \n                        '''"
    ],
    "functions": [
        "update_to",
        "download_url",
        "norm_stat",
        "norm_dot",
        "norm_sum",
        "scale",
        "is_string",
        "fips",
        "state_abbrev",
        "census_def",
        "clk",
        "census_about",
        "make_toc",
        "toc",
        "data",
        "grpby",
        "matrix",
        "data",
        "import_from_source",
        "state_zipfile_name",
        "plot_features",
        "plot_occupations",
        "volume",
        "archetypes",
        "arch_dot",
        "clustermap_df",
        "clustermap",
        "set_number_of_archetypes_options",
        "update_graph_src"
    ],
    "classes": [
        "DownloadProgressBar",
        "Datadic",
        "Onet",
        "Census",
        "MakeXy",
        "Archetypes",
        "Xfit",
        "Svd",
        "Xyzzy"
    ]
}