{
    "identifiers": [
        "com",
        "example",
        "demo",
        "com",
        "shazam",
        "shazamcrest",
        "matcher",
        "Matchers",
        "sameBeanAs",
        "org",
        "hamcrest",
        "CoreMatchers",
        "org",
        "junit",
        "Assert",
        "assertThat",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "org",
        "junit",
        "runner",
        "RunWith",
        "org",
        "skyscreamer",
        "jsonassert",
        "JSONAssert",
        "org",
        "springframework",
        "boot",
        "test",
        "context",
        "SpringBootTest",
        "org",
        "springframework",
        "boot",
        "test",
        "web",
        "client",
        "TestRestTemplate",
        "org",
        "springframework",
        "boot",
        "web",
        "server",
        "LocalServerPort",
        "org",
        "springframework",
        "http",
        "HttpEntity",
        "org",
        "springframework",
        "http",
        "HttpHeaders",
        "org",
        "springframework",
        "http",
        "HttpMethod",
        "org",
        "springframework",
        "http",
        "ResponseEntity",
        "org",
        "springframework",
        "test",
        "context",
        "junit4",
        "SpringRunner",
        "com",
        "example",
        "demo",
        "models",
        "Book",
        "RunWith",
        "SpringBootTest",
        "webEnvironment",
        "SpringBootTest",
        "WebEnvironment",
        "RANDOM_PORT",
        "LocalServerPort",
        "port",
        "restTemplate",
        "headers",
        "uri",
        "uri"
    ],
    "literals": [
        "\"http://localhost:8080\""
    ],
    "variables": [
        "port"
    ],
    "comments": [
        "resource https://www.baeldung.com/rest-template",
        "@Test",
        "public void addBook() throws Exception {",
        "Book book=new Book();",
        "book.setDescription(\"stringtest\");",
        "book.setIsbn(\"stringtest\");",
        "book.setTitle(\"stringtest\");",
        "HttpEntity<Book> entity = new HttpEntity<Book>(book, headers);",
        "ResponseEntity<String> response = restTemplate.exchange(createURLWithPort(\"/book/add\"),HttpMethod.POST, entity, String.class);",
        "assertThat(response.getBody(),is(\"success\"));",
        "}",
        "@Test",
        "public void testRetrieveBookgetAll() throws Exception {",
        "HttpEntity<String> entity = new HttpEntity<String>(null, headers);",
        "ResponseEntity<String> response = restTemplate.exchange(",
        "createURLWithPort(\"/book/getAll\"), HttpMethod.GET, entity, String.class);",
        "String expected = \"[{\\\"identifier\\\":3,\\\"version\\\":0,\\\"title\\\":\\\"string\\\",\\\"isbn\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}]\";",
        "JSONAssert.assertEquals(expected, response.getBody(), false);",
        "}",
        "",
        "@Test",
        "public void testRetrieveBookById() throws Exception {",
        "HttpEntity<String> entity = new HttpEntity<String>(null, headers);",
        "ResponseEntity<String> response = restTemplate.exchange(",
        "createURLWithPort(\"/book/get/3\"), HttpMethod.GET, entity, String.class);",
        "String expected = \"{\\\"identifier\\\":3,\\\"version\\\":0,\\\"title\\\":\\\"string\\\",\\\"isbn\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}\";",
        "JSONAssert.assertEquals(expected, response.getBody(), false);",
        "}",
        "@Test",
        "public void updateBook() throws Exception {",
        "",
        "Book book=new Book();",
        "book.setIdentifier(3l);",
        "book.setVersion(0l);",
        "book.setDescription(\"string\");",
        "book.setIsbn(\"string\");",
        "book.setTitle(\"string\");",
        "headers.add(\"If-Match\", book.getVersion().toString());",
        "HttpEntity<Book> entity = new HttpEntity<Book>(book, headers);",
        "ResponseEntity<Book> response = restTemplate.exchange(createURLWithPort(\"/book/update\"), HttpMethod.PUT, entity, Book.class);",
        "book.setVersion(1l);",
        "assertThat(response.getBody(),sameBeanAs(book));",
        "}",
        ""
    ],
    "docstrings": [],
    "functions": [
        "createURLWithPort"
    ],
    "classes": [
        "IntegrationTest"
    ]
}