{
    "identifiers": [
        "os",
        "re",
        "sys",
        "traceback",
        "warnings",
        "builder",
        "builder_registry",
        "ParserRejectedMarkup",
        "dammit",
        "UnicodeDammit",
        "element",
        "CData",
        "Comment",
        "DEFAULT_OUTPUT_ENCODING",
        "Declaration",
        "Doctype",
        "NavigableString",
        "PageElement",
        "ProcessingInstruction",
        "ResultSet",
        "SoupStrainer",
        "Tag",
        "Tag",
        "markup",
        "features",
        "builder",
        "parse_only",
        "from_encoding",
        "exclude_encodings",
        "kwargs",
        "kwargs",
        "kwargs",
        "warnings",
        "warn",
        "kwargs",
        "kwargs",
        "warnings",
        "warn",
        "kwargs",
        "kwargs",
        "warnings",
        "warn",
        "kwargs",
        "kwargs",
        "warnings",
        "warn",
        "kwargs",
        "kwargs",
        "warnings",
        "warn",
        "old_name",
        "new_name",
        "old_name",
        "kwargs",
        "warnings",
        "warn",
        "old_name",
        "new_name",
        "kwargs",
        "old_name",
        "kwargs",
        "old_name",
        "value",
        "parse_only",
        "deprecated_argument",
        "from_encoding",
        "deprecated_argument",
        "from_encoding",
        "isinstance",
        "markup",
        "warnings",
        "warn",
        "builder",
        "features",
        "isinstance",
        "builder",
        "builder",
        "builder",
        "isinstance",
        "features",
        "features",
        "features",
        "len",
        "features",
        "DEFAULT_BUILDER_FEATURES",
        "builder_registry",
        "lookup",
        "features",
        "builder_class",
        "FeatureNotFound",
        "join",
        "features",
        "builder",
        "builder_class",
        "kwargs",
        "original_builder",
        "original_features",
        "builder",
        "NAME",
        "original_features",
        "builder",
        "ALTERNATE_NAMES",
        "builder",
        "is_xml",
        "sys",
        "_getframe",
        "ValueError",
        "caller",
        "caller",
        "f_globals",
        "caller",
        "f_lineno",
        "sys",
        "__dict__",
        "globals",
        "get",
        "filename",
        "filename",
        "lower",
        "fnl",
        "endswith",
        "filename",
        "filename",
        "filename",
        "filename",
        "line_number",
        "line_number",
        "parser",
        "builder",
        "NAME",
        "markup_type",
        "markup_type",
        "warnings",
        "warn",
        "NO_PARSER_SPECIFIED_WARNING",
        "values",
        "stacklevel",
        "kwargs",
        "warnings",
        "warn",
        "builder",
        "builder",
        "is_xml",
        "is_xml",
        "parse_only",
        "builder",
        "initialize_soup",
        "hasattr",
        "markup",
        "markup",
        "read",
        "len",
        "markup",
        "isinstance",
        "markup",
        "markup",
        "isinstance",
        "markup",
        "markup",
        "isinstance",
        "markup",
        "os",
        "path",
        "supports_unicode_filenames",
        "markup",
        "encode",
        "markup",
        "os",
        "path",
        "exists",
        "possible_filename",
        "e",
        "is_file",
        "isinstance",
        "markup",
        "markup",
        "encode",
        "warnings",
        "warn",
        "markup",
        "_check_markup_is_url",
        "markup",
        "markup",
        "original_encoding",
        "declared_html_encoding",
        "contains_replacement_characters",
        "builder",
        "prepare_markup",
        "markup",
        "from_encoding",
        "exclude_encodings",
        "exclude_encodings",
        "reset",
        "_feed",
        "ParserRejectedMarkup",
        "builder",
        "encode",
        "builder",
        "builder",
        "from_encoding",
        "original_encoding",
        "copy",
        "__dict__",
        "d",
        "builder",
        "picklable",
        "d",
        "staticmethod",
        "markup",
        "isinstance",
        "markup",
        "isinstance",
        "markup",
        "markup",
        "startswith",
        "prefix",
        "prefix",
        "cant_start_with",
        "space",
        "markup",
        "isinstance",
        "markup",
        "markup",
        "decode",
        "markup",
        "warnings",
        "warn",
        "decoded_markup",
        "builder",
        "reset",
        "builder",
        "feed",
        "markup",
        "endData",
        "currentTag",
        "name",
        "ROOT_TAG_NAME",
        "popTag",
        "Tag",
        "builder",
        "ROOT_TAG_NAME",
        "builder",
        "reset",
        "pushTag",
        "name",
        "nsprefix",
        "attrs",
        "kwattrs",
        "kwattrs",
        "update",
        "attrs",
        "Tag",
        "builder",
        "name",
        "nsprefix",
        "kwattrs",
        "s",
        "subclass",
        "NavigableString",
        "subclass",
        "s",
        "successor",
        "NotImplementedError",
        "successor",
        "NotImplementedError",
        "tagStack",
        "pop",
        "preserve_whitespace_tag_stack",
        "tag",
        "preserve_whitespace_tag_stack",
        "preserve_whitespace_tag_stack",
        "pop",
        "tagStack",
        "tagStack",
        "currentTag",
        "tag",
        "currentTag",
        "currentTag",
        "contents",
        "append",
        "tag",
        "tagStack",
        "append",
        "tag",
        "tagStack",
        "tag",
        "name",
        "builder",
        "preserve_whitespace_tags",
        "preserve_whitespace_tag_stack",
        "append",
        "tag",
        "containerClass",
        "NavigableString",
        "current_data",
        "join",
        "current_data",
        "preserve_whitespace_tag_stack",
        "i",
        "current_data",
        "i",
        "ASCII_SPACES",
        "strippable",
        "current_data",
        "parse_only",
        "len",
        "tagStack",
        "parse_only",
        "text",
        "parse_only",
        "search",
        "current_data",
        "containerClass",
        "current_data",
        "object_was_parsed",
        "o",
        "o",
        "parent",
        "most_recent_element",
        "parent",
        "currentTag",
        "most_recent_element",
        "most_recent_element",
        "_most_recent_element",
        "isinstance",
        "o",
        "Tag",
        "o",
        "next_element",
        "o",
        "next_sibling",
        "o",
        "previous_sibling",
        "previous_element",
        "o",
        "previous_element",
        "parent",
        "next_element",
        "o",
        "setup",
        "parent",
        "previous_element",
        "next_element",
        "previous_sibling",
        "next_sibling",
        "o",
        "parent",
        "contents",
        "append",
        "o",
        "fix",
        "_linkage_fixer",
        "parent",
        "el",
        "el",
        "contents",
        "el",
        "contents",
        "child",
        "child",
        "first",
        "el",
        "parent",
        "child",
        "child",
        "previous_element",
        "prev_el",
        "prev_el",
        "el",
        "el",
        "isinstance",
        "child",
        "Tag",
        "child",
        "contents",
        "child",
        "_last_descendant",
        "el",
        "target",
        "target",
        "next_sibling",
        "target",
        "next_sibling",
        "target",
        "next_sibling",
        "child",
        "target",
        "parent",
        "name",
        "nsprefix",
        "inclusivePop",
        "name",
        "ROOT_TAG_NAME",
        "len",
        "tagStack",
        "i",
        "stack_size",
        "tagStack",
        "i",
        "name",
        "t",
        "name",
        "nsprefix",
        "t",
        "prefix",
        "inclusivePop",
        "popTag",
        "popTag",
        "most_recently_popped",
        "name",
        "nsprefix",
        "attrs",
        "endData",
        "parse_only",
        "len",
        "tagStack",
        "parse_only",
        "text",
        "parse_only",
        "search_tag",
        "name",
        "attrs",
        "Tag",
        "builder",
        "name",
        "nsprefix",
        "attrs",
        "currentTag",
        "_most_recent_element",
        "tag",
        "tag",
        "_most_recent_element",
        "_most_recent_element",
        "tag",
        "tag",
        "pushTag",
        "tag",
        "tag",
        "name",
        "nsprefix",
        "endData",
        "_popToTag",
        "name",
        "nsprefix",
        "data",
        "current_data",
        "append",
        "data",
        "pretty_print",
        "eventual_encoding",
        "DEFAULT_OUTPUT_ENCODING",
        "formatter",
        "is_xml",
        "eventual_encoding",
        "eventual_encoding",
        "encoding_part",
        "pretty_print",
        "prefix",
        "BeautifulSoup",
        "decode",
        "indent_level",
        "eventual_encoding",
        "formatter",
        "BeautifulSoup",
        "BeautifulSoup",
        "BeautifulSoup",
        "args",
        "kwargs",
        "warnings",
        "warn",
        "BeautifulStoneSoup",
        "args",
        "kwargs",
        "ValueError",
        "sys",
        "BeautifulSoup",
        "sys",
        "stdin",
        "soup",
        "prettify"
    ],
    "literals": [
        "\"Leonard Richardson (leonardr@segfault.org)\"",
        "\"4.8.0\"",
        "\"Copyright (c) 2004-2019 Leonard Richardson\"",
        "\"MIT\"",
        "'BeautifulSoup'",
        "'You are trying to run the Python 2 version of Beautiful Soup under Python 3. This will not work.'",
        "'You need to convert the code, either by installing it (`python setup.py install`) or by running 2to3 (`2to3 -w bs4`).'",
        "'[document]'",
        "'html'",
        "'fast'",
        "'\\x20\\x0a\\x09\\x0c\\x0d'",
        "\"No parser was explicitly specified, so I'm using the best available %(markup_type)s parser for this system (\\\"%(parser)s\\\"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\\n\\nThe code that caused this warning is on line %(line_number)s of the file %(filename)s. To get rid of this warning, pass the additional argument 'features=\\\"%(parser)s\\\"' to the BeautifulSoup constructor.\\n\"",
        "\"\"",
        "'convertEntities'",
        "'convertEntities'",
        "\"BS4 does not respect the convertEntities argument to the \"",
        "\"BeautifulSoup constructor. Entities are always converted \"",
        "\"to Unicode characters.\"",
        "'markupMassage'",
        "'markupMassage'",
        "\"BS4 does not respect the markupMassage argument to the \"",
        "\"BeautifulSoup constructor. The tree builder is responsible \"",
        "\"for any necessary markup massage.\"",
        "'smartQuotesTo'",
        "'smartQuotesTo'",
        "\"BS4 does not respect the smartQuotesTo argument to the \"",
        "\"BeautifulSoup constructor. Smart quotes are always converted \"",
        "\"to Unicode characters.\"",
        "'selfClosingTags'",
        "'selfClosingTags'",
        "\"BS4 does not respect the selfClosingTags argument to the \"",
        "\"BeautifulSoup constructor. The tree builder is responsible \"",
        "\"for understanding self-closing tags.\"",
        "'isHTML'",
        "'isHTML'",
        "\"BS4 does not respect the isHTML argument to the \"",
        "\"BeautifulSoup constructor. Suggest you use \"",
        "\"features='lxml' for HTML and features='lxml-xml' for \"",
        "\"XML.\"",
        "'The \"%s\" argument to the BeautifulSoup constructor '",
        "'has been renamed to \"%s.\"'",
        "\"parseOnlyThese\"",
        "\"parse_only\"",
        "\"fromEncoding\"",
        "\"from_encoding\"",
        "\"You provided Unicode markup but also provided a value for from_encoding. Your from_encoding will be ignored.\"",
        "\"Couldn't find a tree builder with the features you \"",
        "\"requested: %s. Do you need to install a parser library?\"",
        "\",\"",
        "\"XML\"",
        "\"HTML\"",
        "'__file__'",
        "\".pyc\"",
        "\".pyo\"",
        "\"Keyword arguments to the BeautifulSoup constructor will be ignored. These would normally be passed into the TreeBuilder constructor, but a TreeBuilder instance was passed in as `builder`.\"",
        "'read'",
        "b'<'",
        "'<'",
        "\"utf8\"",
        "\"utf8\"",
        "'\"%s\" looks like a filename, not markup. You should'",
        "' probably open this file and pass the filehandle into'",
        "' Beautiful Soup.'",
        "'utf-8'",
        "'utf-8'",
        "'builder'",
        "'builder'",
        "b' '",
        "b\"http:\"",
        "b\"https:\"",
        "' '",
        "\"http:\"",
        "\"https:\"",
        "'utf-8'",
        "'replace'",
        "'\"%s\" looks like a URL. Beautiful Soup is not an'",
        "' HTTP client. You should probably use an HTTP client like'",
        "' requests to get the document behind the URL, and feed'",
        "' that document to Beautiful Soup.'",
        "\"BeautifulSoup objects don't support insert_before().\"",
        "\"BeautifulSoup objects don't support insert_after().\"",
        "''",
        "'\\n'",
        "'\\n'",
        "' '",
        "\"minimal\"",
        "''",
        "' encoding=\"%s\"'",
        "'<?xml version=\"1.0\"%s?>\\n'",
        "''",
        "'features'",
        "'xml'",
        "'The BeautifulStoneSoup class is deprecated. Instead of using '",
        "'it, pass features=\"xml\" into the BeautifulSoup constructor.'",
        "'__main__'"
    ],
    "variables": [
        "__author__",
        "__version__",
        "__copyright__",
        "__license__",
        "__all__",
        "ROOT_TAG_NAME",
        "DEFAULT_BUILDER_FEATURES",
        "ASCII_SPACES",
        "NO_PARSER_SPECIFIED_WARNING",
        "value",
        "parse_only",
        "from_encoding",
        "from_encoding",
        "original_builder",
        "original_features",
        "builder_class",
        "builder",
        "features",
        "features",
        "builder_class",
        "builder",
        "markup_type",
        "markup_type",
        "caller",
        "caller",
        "globals",
        "line_number",
        "globals",
        "line_number",
        "filename",
        "fnl",
        "filename",
        "values",
        "builder",
        "is_xml",
        "known_xml",
        "_namespaces",
        "parse_only",
        "markup",
        "possible_filename",
        "possible_filename",
        "is_file",
        "is_file",
        "markup",
        "markup",
        "soup",
        "copy",
        "copy",
        "original_encoding",
        "d",
        "d",
        "space",
        "cant_start_with",
        "space",
        "cant_start_with",
        "decoded_markup",
        "decoded_markup",
        "hidden",
        "current_data",
        "currentTag",
        "tagStack",
        "preserve_whitespace_tag_stack",
        "tag",
        "currentTag",
        "currentTag",
        "current_data",
        "strippable",
        "strippable",
        "current_data",
        "current_data",
        "current_data",
        "o",
        "parent",
        "previous_element",
        "previous_element",
        "next_element",
        "previous_sibling",
        "next_sibling",
        "next_element",
        "next_sibling",
        "previous_sibling",
        "previous_element",
        "fix",
        "_most_recent_element",
        "first",
        "child",
        "descendant",
        "el",
        "next_element",
        "prev_el",
        "prev_el",
        "next_element",
        "child",
        "previous_element",
        "child",
        "previous_sibling",
        "child",
        "next_sibling",
        "descendant",
        "descendant",
        "next_element",
        "descendant",
        "next_sibling",
        "target",
        "descendant",
        "next_element",
        "previous_element",
        "target",
        "most_recently_popped",
        "stack_size",
        "t",
        "most_recently_popped",
        "most_recently_popped",
        "tag",
        "next_element",
        "_most_recent_element",
        "encoding_part",
        "encoding_part",
        "prefix",
        "prefix",
        "indent_level",
        "indent_level",
        "_s",
        "_soup",
        "kwargs",
        "soup"
    ],
    "comments": [
        "Use of this source code is governed by the MIT license.",
        "The very first thing we do is give a useful error if someone is",
        "running this code under Python 3 without converting it.",
        "If the end-user gives no indication which tree builder they",
        "want, look for one with these features.",
        "We need this information to track whether or not the builder",
        "was specified well enough that we can omit the 'you need to",
        "specify a parser' warning.",
        "A builder class was passed in; it needs to be instantiated.",
        "At this point either we have a TreeBuilder instance in",
        "builder, or we have a builder_class that we can instantiate",
        "with the remaining **kwargs.",
        "This code adapted from warnings.py so that we get the same line",
        "of code as our warnings.warn() call gets, even if the answer is wrong",
        "(as it may be in a multithreading situation).",
        "If there is no filename at all, the user is most likely in a REPL,",
        "and the warning is not necessary.",
        "It's a file-type object.",
        "Print out warnings for a couple beginner problems",
        "involving passing non-markup to Beautiful Soup.",
        "Beautiful Soup will still parse the input as markup,",
        "just in case that's what the user really wants.",
        "This is almost certainly a problem involving",
        "characters not valid in filenames on this",
        "system. Just let it go.",
        "Clear out the markup and remove the builder's circular",
        "reference to this object.",
        "Although we encoded the tree to UTF-8, that may not have",
        "been the encoding of the original markup. Set the copy's",
        ".original_encoding to reflect the original object's",
        ".original_encoding.",
        "Frequently a tree builder can't be pickled.",
        "Convert the document to Unicode.",
        "Close out any unfinished strings and close all the open tags.",
        "print \"Pop\", tag.name",
        "print \"Push\", tag.name",
        "If whitespace is not preserved, and this string contains",
        "nothing but ASCII spaces, replace it with a single space",
        "or newline.",
        "Reset the data collector.",
        "Should we add this string to the tree at all?",
        "Check if we are inserting into an already parsed node.",
        "Parent should be linked to first child",
        "We are no longer linked to whatever this element is",
        "First child should be linked to the parent, and no previous siblings.",
        "We have no sibling as we've been appended as the last.",
        "This index is a tag, dig deeper for a \"last descendant\"",
        "As the final step, link last descendant. It should be linked",
        "to the parent's next sibling (if found), else walk up the chain",
        "and find a parent with a sibling. It should have no next sibling.",
        "print \"Popping to %s\" % name",
        "The BeautifulSoup object itself can never be popped.",
        "print \"Start tag %s: %s\" % (name, attrs)",
        "print \"End tag: \" + name",
        "Print the XML declaration",
        "Alias to make it easier to type import: 'from bs4 import _soup'",
        "By default, act as an HTML pretty-printer."
    ],
    "docstrings": [
        "\"\"\"Beautiful Soup\nElixir and Tonic\n\"The Screen-Scraper's Friend\"\nhttp://www.crummy.com/software/BeautifulSoup/\n\nBeautiful Soup uses a pluggable XML or HTML parser to parse a\n(possibly invalid) document into a tree representation. Beautiful Soup\nprovides methods and Pythonic idioms that make it easy to navigate,\nsearch, and modify the parse tree.\n\nBeautiful Soup works with Python 2.7 and up. It works better if lxml\nand/or html5lib is installed.\n\nFor more than you ever wanted to know about Beautiful Soup, see the\ndocumentation:\nhttp://www.crummy.com/software/BeautifulSoup/bs4/doc/\n\n\"\"\"",
        "\"\"\"\n    This class defines the basic interface called by the tree builders.\n\n    These methods will be called by the parser:\n      reset()\n      feed(markup)\n\n    The tree builder may call these methods from its feed() implementation:\n      handle_starttag(name, attrs) # See note about return value\n      handle_endtag(name)\n      handle_data(data) # Appends to the current data node\n      endData(containerClass=NavigableString) # Ends the current data node\n\n    No matter how complicated the underlying parser is, you should be\n    able to build a tree using 'start tag' events, 'end tag' events,\n    'data' events, and \"done with data\" events.\n\n    If you encounter an empty-element tag (aka a self-closing tag,\n    like HTML's <br> tag), call handle_starttag and then\n    handle_endtag.\n    \"\"\"",
        "\"\"\"Constructor.\n\n        :param markup: A string or a file-like object representing\n        markup to be parsed.\n\n        :param features: Desirable features of the parser to be used. This\n        may be the name of a specific parser (\"lxml\", \"lxml-xml\",\n        \"html.parser\", or \"html5lib\") or it may be the type of markup\n        to be used (\"html\", \"html5\", \"xml\"). It's recommended that you\n        name a specific parser, so that Beautiful Soup gives you the\n        same results across platforms and virtual environments.\n\n        :param builder: A TreeBuilder subclass to instantiate (or\n        instance to use) instead of looking one up based on\n        `features`. You only need to use this if you've implemented a\n        custom TreeBuilder.\n\n        :param parse_only: A SoupStrainer. Only parts of the document\n        matching the SoupStrainer will be considered. This is useful\n        when parsing part of a document that would otherwise be too\n        large to fit into memory.\n\n        :param from_encoding: A string indicating the encoding of the\n        document to be parsed. Pass this in if Beautiful Soup is\n        guessing wrongly about the document's encoding.\n\n        :param exclude_encodings: A list of strings indicating\n        encodings known to be wrong. Pass this in if you don't know\n        the document's encoding but you know Beautiful Soup's guess is\n        wrong.\n\n        :param kwargs: For backwards compatibility purposes, the\n        constructor accepts certain keyword arguments used in\n        Beautiful Soup 3. None of these arguments do anything in\n        Beautiful Soup 4; they will result in a warning and then be ignored.\n\n        Apart from this, any keyword arguments passed into the BeautifulSoup\n        constructor are propagated to the TreeBuilder constructor. This\n        makes it possible to configure a TreeBuilder beyond saying\n        which one to use.\n\n        \"\"\"",
        "\"\"\" \n        Check if markup looks like it's actually a url and raise a warning \n        if so. Markup can be unicode or str (py2) / bytes (py3).\n        \"\"\"",
        "\"\"\"Create a new tag associated with this soup.\"\"\"",
        "\"\"\"Create a new NavigableString associated with this soup.\"\"\"",
        "\"\"\"Add an object to the parse tree.\"\"\"",
        "\"\"\"Make sure linkage of this fragment is sound.\"\"\"",
        "\"\"\"Pops the tag stack up to and including the most recent\n        instance of the given tag. If inclusivePop is false, pops the tag\n        stack up to but *not* including the most recent instqance of\n        the given tag.\"\"\"",
        "\"\"\"Push a start tag on to the stack.\n\n        If this method returns None, the tag was rejected by the\n        SoupStrainer. You should proceed as if the tag had not occurred\n        in the document. For instance, if this was a self-closing tag,\n        don't call handle_endtag.\n        \"\"\"",
        "\"\"\"Returns a string or Unicode representation of this document.\n        To get Unicode, pass None for encoding.\"\"\"",
        "\"\"\"Deprecated interface to an XML parser.\"\"\""
    ],
    "functions": [
        "deprecated_argument",
        "__copy__",
        "__getstate__",
        "_check_markup_is_url",
        "_feed",
        "reset",
        "new_tag",
        "new_string",
        "insert_before",
        "insert_after",
        "popTag",
        "pushTag",
        "endData",
        "object_was_parsed",
        "_linkage_fixer",
        "_popToTag",
        "handle_starttag",
        "handle_endtag",
        "handle_data",
        "decode"
    ],
    "classes": [
        "BeautifulSoup",
        "BeautifulStoneSoup",
        "StopParsing",
        "FeatureNotFound"
    ]
}