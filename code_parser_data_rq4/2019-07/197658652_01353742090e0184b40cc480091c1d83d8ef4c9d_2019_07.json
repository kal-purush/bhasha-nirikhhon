{
    "identifiers": [
        "keras",
        "models",
        "Model",
        "keras",
        "layers",
        "Input",
        "GRU",
        "Dense",
        "Flatten",
        "Concatenate",
        "Bidirectional",
        "Lambda",
        "BatchNormalization",
        "keras",
        "layers",
        "embeddings",
        "Embedding",
        "keras",
        "constraints",
        "max_norm",
        "keras",
        "regularizers",
        "Input",
        "shape",
        "max_len",
        "name",
        "Input",
        "shape",
        "max_len",
        "name",
        "Embedding",
        "max_token_index",
        "d",
        "input_length",
        "max_len",
        "name",
        "embedding",
        "question_input",
        "embedding",
        "column_input",
        "Bidirectional",
        "GRU",
        "d",
        "return_state",
        "encoder_question",
        "Q_embedding",
        "Bidirectional",
        "GRU",
        "d",
        "return_state",
        "encoder_column",
        "C_embedding",
        "Concatenate",
        "Q_state_h1",
        "Q_state_h2",
        "C_state_h1",
        "C_state_h2",
        "Dense",
        "activation",
        "con",
        "Model",
        "question_input",
        "column_input",
        "model",
        "load_weights",
        "model"
    ],
    "literals": [
        "'Q_input'",
        "'C_input'",
        "'embedding'",
        "'softmax'",
        "'select_agg_best_model.h5'"
    ],
    "variables": [
        "max_len",
        "max_token_index",
        "d",
        "question_input",
        "column_input",
        "embedding",
        "Q_embedding",
        "C_embedding",
        "encoder_question",
        "_",
        "Q_state_h1",
        "Q_state_h2",
        "encoder_column",
        "_",
        "C_state_h1",
        "C_state_h2",
        "con",
        "model"
    ],
    "comments": [
        "dimension",
        "Define an input sequence and process it.",
        "embedding_C= Embedding(max_token_index, d, input_length=max_len,name='embedding_C')",
        "embeddings_constraint=max_norm(2.),",
        "embeddings_regularizer=regularizers.l1_l2(l1=0.001, l2=0.001))"
    ],
    "docstrings": [],
    "functions": [
        "get_agg_model"
    ],
    "classes": []
}