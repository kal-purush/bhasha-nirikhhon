{
    "identifiers": [
        "ast",
        "ast",
        "alias",
        "Assign",
        "Load",
        "Name",
        "NameConstant",
        "Num",
        "Return",
        "Store",
        "Str",
        "re",
        "tvm",
        "tvm",
        "relay",
        "tvm",
        "relay",
        "adt",
        "Pattern",
        "tvm",
        "relay",
        "backend",
        "compile_engine",
        "tvm",
        "relay",
        "expr",
        "Expr",
        "GlobalVar",
        "Var",
        "tvm",
        "relay",
        "expr_functor",
        "ExprFunctor",
        "ast",
        "Import",
        "alias",
        "ast",
        "Import",
        "alias",
        "ast",
        "ImportFrom",
        "alias",
        "ast",
        "ImportFrom",
        "alias",
        "alias",
        "alias",
        "alias",
        "ExprFunctor",
        "mod",
        "target",
        "mod",
        "target",
        "compile_engine",
        "get",
        "prog",
        "Expr",
        "optimize",
        "prog",
        "body",
        "PROLOGUE",
        "body",
        "convert_module",
        "visit",
        "optimized",
        "body",
        "extra_defs",
        "body",
        "append",
        "Assign",
        "Name",
        "OUTPUT_VAR_NAME",
        "Store",
        "prog_body",
        "ast",
        "fix_missing_locations",
        "ast",
        "Module",
        "body",
        "body",
        "prog",
        "Expr",
        "prog",
        "astuple",
        "isinstance",
        "prog",
        "relay",
        "TupleWrapper",
        "prog",
        "relay",
        "analysis",
        "well_formed",
        "unwrapped",
        "mod",
        "from_expr",
        "unwrapped",
        "mod",
        "functions",
        "mod",
        "type_definitions",
        "relay",
        "transform",
        "Sequential",
        "relay",
        "transform",
        "SimplifyInference",
        "relay",
        "transform",
        "FuseOps",
        "fuse_opt_level",
        "opts",
        "mod",
        "mod",
        "optimized",
        "isinstance",
        "unwrapped",
        "optimized",
        "body",
        "name",
        "re",
        "sub",
        "name",
        "name_hint",
        "format",
        "sanitize",
        "name_hint",
        "var_no",
        "var_no",
        "name",
        "name_hint",
        "format",
        "sanitize",
        "name_hint",
        "fun_no",
        "fun_no",
        "name",
        "Expr",
        "var_map",
        "var_map",
        "generate_var_name",
        "name_hint",
        "var_map",
        "name",
        "name",
        "Expr",
        "assign",
        "get_var_name",
        "Name",
        "name",
        "Store",
        "assign",
        "Load",
        "name",
        "name",
        "split",
        "Name",
        "attributes",
        "Load",
        "i",
        "len",
        "attributes",
        "ast",
        "Attribute",
        "ret",
        "attributes",
        "i",
        "Load",
        "ret",
        "arr",
        "i",
        "NameConstant",
        "i",
        "isinstance",
        "i",
        "Num",
        "i",
        "arr",
        "ndim",
        "parse_single",
        "arr",
        "item",
        "arr",
        "ndim",
        "ast",
        "parse_single",
        "i",
        "item",
        "i",
        "arr",
        "Load",
        "row",
        "arr",
        "elts",
        "append",
        "parse_numpy_array",
        "row",
        "ast",
        "elts",
        "Load",
        "fields",
        "Expr",
        "field",
        "fields",
        "visit",
        "field",
        "bodies",
        "append",
        "member_body",
        "defs",
        "member_defs",
        "bodies",
        "defs",
        "name_hint",
        "expr",
        "Expr",
        "visit",
        "expr",
        "generate_function_name",
        "name_hint",
        "create_def",
        "thunk_name",
        "defs",
        "Return",
        "body",
        "thunk",
        "thunk_name",
        "func",
        "name_var",
        "name_var",
        "generate_function_name",
        "isinstance",
        "name_var",
        "GlobalVar",
        "name_var",
        "name_hint",
        "isinstance",
        "name_var",
        "Var",
        "get_var_name",
        "name_var",
        "get_var_name",
        "func",
        "visit",
        "func",
        "body",
        "create_def",
        "func_name",
        "var_names",
        "defs",
        "Return",
        "body",
        "ret",
        "func_name",
        "func",
        "mod",
        "functions",
        "items",
        "optimize",
        "func",
        "convert_func_node",
        "opt_func",
        "defs",
        "append",
        "converted_func",
        "defs",
        "func_name",
        "arguments",
        "ast",
        "Call",
        "parse_name",
        "func_name",
        "arguments",
        "func_name",
        "arguments",
        "body",
        "ast",
        "FunctionDef",
        "func_name",
        "ast",
        "arguments",
        "ast",
        "arg",
        "argument",
        "argument",
        "arguments",
        "body",
        "op",
        "relay_args",
        "py_args",
        "compile_engine",
        "CCacheKey",
        "op",
        "tgt",
        "relay",
        "analysis",
        "structural_hash",
        "op",
        "format",
        "func_hash",
        "tvm",
        "get_global_func",
        "op_name",
        "allow_missing",
        "engine",
        "jit",
        "cc_key",
        "tgt",
        "tvm",
        "register_func",
        "op_name",
        "jitted",
        "py_input",
        "arg_type",
        "isinstance",
        "arg_type",
        "relay",
        "TensorType",
        "ast",
        "Attribute",
        "py_input",
        "Load",
        "isinstance",
        "arg_type",
        "relay",
        "TupleType",
        "i",
        "len",
        "arg_type",
        "fields",
        "ret",
        "convert_input",
        "ast",
        "Subscript",
        "ast",
        "Attribute",
        "py_input",
        "Load",
        "ast",
        "Index",
        "Num",
        "i",
        "Load",
        "arg_type",
        "fields",
        "i",
        "ret",
        "ret_type",
        "isinstance",
        "ret_type",
        "relay",
        "TensorType",
        "generate_var_name",
        "Name",
        "output_var_name",
        "Load",
        "ast",
        "Tuple",
        "Num",
        "dim",
        "dim",
        "ret_type",
        "concrete_shape",
        "Load",
        "Assign",
        "Name",
        "output_var_name",
        "Store",
        "create_call",
        "create_call",
        "shape",
        "Str",
        "ret_type",
        "dtype",
        "ast",
        "Attribute",
        "output_var",
        "Load",
        "assign_output",
        "extra_arg",
        "output_var",
        "isinstance",
        "ret_type",
        "relay",
        "TupleType",
        "t",
        "ret_type",
        "fields",
        "convert_output",
        "t",
        "assignments",
        "inner_assignments",
        "extra_args",
        "inner_args",
        "fields",
        "append",
        "inner_output",
        "assignments",
        "extra_args",
        "create_call",
        "fields",
        "generate_function_name",
        "format",
        "op_name",
        "generate_var_name",
        "format",
        "i",
        "i",
        "len",
        "py_args",
        "i",
        "len",
        "py_args",
        "inner_call_args",
        "convert_input",
        "Name",
        "wrap_args",
        "i",
        "Load",
        "relay_args",
        "i",
        "checked_type",
        "convert_output",
        "op",
        "checked_type",
        "ret_type",
        "generate_var_name",
        "create_call",
        "Str",
        "op_name",
        "Assign",
        "Name",
        "op_var",
        "Store",
        "op_call",
        "create_call",
        "op_var",
        "inner_call_args",
        "aux_args",
        "output_assignments",
        "op_assign",
        "ast",
        "Expr",
        "inner_call",
        "Return",
        "output",
        "create_def",
        "wrap_name",
        "wrap_args",
        "body",
        "wrap_def",
        "create_call",
        "wrap_name",
        "py_args",
        "pattern",
        "Pattern",
        "data",
        "isinstance",
        "pattern",
        "relay",
        "PatternWildcard",
        "relay",
        "PatternVar",
        "NameConstant",
        "ast",
        "Compare",
        "ast",
        "Attribute",
        "data",
        "Load",
        "ast",
        "Eq",
        "ast",
        "Num",
        "pattern",
        "tag",
        "i",
        "len",
        "pattern",
        "patterns",
        "pattern",
        "patterns",
        "i",
        "isinstance",
        "nested_pat",
        "relay",
        "PatternConstructor",
        "ast",
        "Subscript",
        "ast",
        "Attribute",
        "data",
        "Load",
        "ast",
        "Index",
        "Num",
        "i",
        "Load",
        "conds",
        "append",
        "create_match_check",
        "nested_pat",
        "field_index",
        "len",
        "conds",
        "conds",
        "ast",
        "BoolOp",
        "ast",
        "And",
        "conds",
        "pattern",
        "Pattern",
        "body",
        "Expr",
        "pat",
        "val",
        "isinstance",
        "pat",
        "relay",
        "PatternWildcard",
        "isinstance",
        "pat",
        "relay",
        "PatternVar",
        "Assign",
        "include_var",
        "pat",
        "assign",
        "val",
        "i",
        "len",
        "pat",
        "patterns",
        "ast",
        "Subscript",
        "ast",
        "Attribute",
        "val",
        "Load",
        "ast",
        "Index",
        "Num",
        "i",
        "Load",
        "assignments",
        "collect_var_assignments",
        "pat",
        "patterns",
        "i",
        "field",
        "assignments",
        "generate_function_name",
        "generate_var_name",
        "visit",
        "body",
        "collect_var_assignments",
        "pattern",
        "Name",
        "arg_name",
        "Load",
        "create_def",
        "func_name",
        "arg_name",
        "defs",
        "assignments",
        "Return",
        "clause_body",
        "func_def",
        "func_name",
        "Expr",
        "include_var",
        "assign",
        "gvar",
        "Expr",
        "Name",
        "gvar",
        "name_hint",
        "Load",
        "letexp",
        "Expr",
        "visit",
        "letexp",
        "body",
        "generate_function_name",
        "create_def",
        "func_name",
        "get_var_name",
        "letexp",
        "bind_defs",
        "Return",
        "bind_body",
        "isinstance",
        "letexp",
        "value",
        "convert_func_node",
        "letexp",
        "value",
        "letexp",
        "create_call",
        "func_name",
        "Name",
        "value_name",
        "Load",
        "value_def",
        "binding_func",
        "visit",
        "letexp",
        "value",
        "value_defs",
        "append",
        "binding_func",
        "create_call",
        "func_name",
        "value_body",
        "binding_call",
        "value_defs",
        "tup",
        "Expr",
        "convert_fields",
        "tup",
        "fields",
        "create_call",
        "fields",
        "ret_defs",
        "tgi",
        "Expr",
        "visit",
        "tgi",
        "tuple_value",
        "ast",
        "Subscript",
        "tup",
        "ast",
        "Index",
        "Num",
        "tgi",
        "index",
        "Load",
        "ret",
        "tup_defs",
        "if_block",
        "Expr",
        "visit",
        "if_block",
        "cond",
        "visit",
        "if_block",
        "true_branch",
        "visit",
        "if_block",
        "false_branch",
        "ast",
        "Call",
        "ast",
        "Attribute",
        "cond_body",
        "Load",
        "ast",
        "IfExp",
        "cond_check",
        "true_body",
        "false_body",
        "ret",
        "cond_defs",
        "true_defs",
        "false_defs",
        "constant",
        "Expr",
        "constant",
        "data",
        "asnumpy",
        "ast",
        "Call",
        "ast",
        "Attribute",
        "Name",
        "Load",
        "Load",
        "parse_numpy_array",
        "value",
        "ast",
        "keyword",
        "Str",
        "constant",
        "checked_type",
        "dtype",
        "create_call",
        "const_expr",
        "func",
        "Expr",
        "convert_func_node",
        "func",
        "Name",
        "func_name",
        "Load",
        "converted_func",
        "call",
        "Expr",
        "call",
        "op",
        "convert_fields",
        "call",
        "args",
        "isinstance",
        "func",
        "relay",
        "Op",
        "isinstance",
        "func",
        "relay",
        "Constructor",
        "create_call",
        "ast",
        "Num",
        "func",
        "tag",
        "ast",
        "fields",
        "Load",
        "NameConstant",
        "field_defs",
        "isinstance",
        "func",
        "func",
        "attrs",
        "func",
        "attrs",
        "Primitive",
        "value",
        "create_op_call",
        "func",
        "call",
        "args",
        "fields",
        "op_call",
        "field_defs",
        "op_call_def",
        "visit",
        "func",
        "defs",
        "field_defs",
        "ast",
        "Call",
        "converted_func",
        "fields",
        "defs",
        "Expr",
        "visit",
        "value",
        "create_call",
        "val",
        "defs",
        "read",
        "Expr",
        "visit",
        "read",
        "ast",
        "Attribute",
        "Load",
        "defs",
        "write",
        "Expr",
        "visit",
        "write",
        "visit",
        "write",
        "value",
        "generate_function_name",
        "create_def",
        "thunk_name",
        "ref_defs",
        "val_defs",
        "Assign",
        "ast",
        "Attribute",
        "Store",
        "val",
        "Return",
        "create_call",
        "create_call",
        "thunk_name",
        "thunk",
        "match",
        "Expr",
        "visit",
        "match",
        "data",
        "generate_var_name",
        "Assign",
        "Name",
        "data_var",
        "Store",
        "data",
        "clause",
        "match",
        "clauses",
        "create_match_check",
        "clause",
        "lhs",
        "Name",
        "data_var",
        "Load",
        "create_match_clause_body",
        "clause",
        "lhs",
        "clause",
        "rhs",
        "defs",
        "append",
        "body_def",
        "thunk_body",
        "append",
        "ast",
        "If",
        "check_expr",
        "Return",
        "create_call",
        "body_name",
        "Name",
        "data_var",
        "Load",
        "thunk_body",
        "append",
        "ast",
        "Assert",
        "NameConstant",
        "Str",
        "generate_function_name",
        "create_def",
        "thunk_name",
        "defs",
        "thunk_body",
        "create_call",
        "thunk_name",
        "thunk_def",
        "_",
        "_",
        "expr",
        "Expr",
        "mod",
        "target",
        "tvm",
        "target",
        "create",
        "mod",
        "mod",
        "relay",
        "Module",
        "PythonConverter",
        "mod",
        "target",
        "converter",
        "convert",
        "expr",
        "expr",
        "Expr",
        "mod",
        "target",
        "tvm",
        "target",
        "create",
        "mod",
        "mod",
        "relay",
        "Module",
        "to_python",
        "expr",
        "mod",
        "target",
        "compile",
        "py_ast",
        "OUTPUT_VAR_NAME",
        "exec",
        "code",
        "var_map",
        "var_map",
        "var_map",
        "OUTPUT_VAR_NAME"
    ],
    "literals": [
        "'_py_out'",
        "'numpy'",
        "'tvm'",
        "'tvm'",
        "'relay'",
        "'tvm.relay.backend.interpreter'",
        "'RefValue'",
        "'TupleValue'",
        "'TensorValue'",
        "'ConstructorValue'",
        "'main'",
        "r'\\W'",
        "''",
        "'{}_var_{}'",
        "'{}_fun_{}'",
        "'.'",
        "'_anon_func'",
        "'_lowered_op_{}'",
        "'data'",
        "'fields'",
        "'_out'",
        "'TensorValue'",
        "'numpy.empty'",
        "'data'",
        "'TupleValue'",
        "'_{}_wrapper'",
        "'_arg_{}'",
        "'_op'",
        "'tvm.get_global_func'",
        "'tag'",
        "'fields'",
        "'fields'",
        "'_match_clause_body'",
        "'_match_clause_body'",
        "'_let_func'",
        "'TupleValue'",
        "'asnumpy'",
        "'numpy'",
        "'array'",
        "'dtype'",
        "'TensorValue'",
        "'Operators should have been lowered and eliminated'",
        "'ConstructorValue'",
        "'RefValue'",
        "'value'",
        "'_ref_write_thunk'",
        "'value'",
        "'TupleValue'",
        "'_match_data'",
        "'Match was not exhaustive'",
        "'_match_thunk'",
        "'llvm'",
        "'llvm'",
        "'<string>'",
        "'exec'"
    ],
    "variables": [
        "OUTPUT_VAR_NAME",
        "PROLOGUE",
        "mod",
        "tgt",
        "engine",
        "fun_no",
        "var_no",
        "var_map",
        "optimized",
        "body",
        "prog_body",
        "extra_defs",
        "unwrapped",
        "mod",
        "opts",
        "mod",
        "optimized",
        "name",
        "name",
        "name",
        "name",
        "attributes",
        "ret",
        "ret",
        "parse_single",
        "elts",
        "bodies",
        "defs",
        "member_body",
        "member_defs",
        "body",
        "defs",
        "thunk_name",
        "thunk",
        "func_name",
        "func_name",
        "func_name",
        "var_names",
        "body",
        "defs",
        "ret",
        "defs",
        "opt_func",
        "converted_func",
        "_",
        "cc_key",
        "func_hash",
        "op_name",
        "jitted",
        "ret",
        "output_var_name",
        "output_var",
        "shape",
        "assign_output",
        "extra_arg",
        "assignments",
        "extra_args",
        "fields",
        "inner_assignments",
        "inner_args",
        "inner_output",
        "wrap_name",
        "wrap_args",
        "inner_call_args",
        "output_assignments",
        "aux_args",
        "output",
        "op_var",
        "op_call",
        "op_assign",
        "inner_call",
        "body",
        "wrap_def",
        "conds",
        "nested_pat",
        "field_index",
        "assignments",
        "field",
        "func_name",
        "arg_name",
        "clause_body",
        "defs",
        "assignments",
        "func_def",
        "bind_body",
        "bind_defs",
        "func_name",
        "binding_func",
        "value_def",
        "value_name",
        "value_body",
        "value_defs",
        "binding_call",
        "fields",
        "ret_defs",
        "tup",
        "tup_defs",
        "ret",
        "cond_body",
        "cond_defs",
        "true_body",
        "true_defs",
        "false_body",
        "false_defs",
        "cond_check",
        "ret",
        "value",
        "const_expr",
        "converted_func",
        "func_name",
        "func",
        "fields",
        "field_defs",
        "op_call_def",
        "op_call",
        "converted_func",
        "defs",
        "val",
        "defs",
        "defs",
        "ref_defs",
        "val",
        "val_defs",
        "thunk_name",
        "thunk",
        "data",
        "defs",
        "data_var",
        "thunk_body",
        "check_expr",
        "body_def",
        "body_name",
        "thunk_name",
        "thunk_def",
        "mod",
        "converter",
        "mod",
        "py_ast",
        "code",
        "var_map"
    ],
    "comments": [
        "Licensed to the Apache Software Foundation (ASF) under one",
        "or more contributor license agreements.  See the NOTICE file",
        "distributed with this work for additional information",
        "regarding copyright ownership.  The ASF licenses this file",
        "to you under the Apache License, Version 2.0 (the",
        "\"License\"); you may not use this file except in compliance",
        "with the License.  You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing,",
        "software distributed under the License is distributed on an",
        "\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY",
        "KIND, either express or implied.  See the License for the",
        "specific language governing permissions and limitations",
        "under the License.",
        "corresponds to:",
        "import numpy",
        "import tvm",
        "from tvm import relay",
        "from tvm.relay.backend.interpreter import RefValue, TupleValue, TensorValue, ConstructorValue",
        "start with conversion prelude (imports) and convert global defs",
        "we finally must assign the final expression to the output var",
        "so it can be read after running EXEC",
        "unwrap tuple wrappers (some op calls produce them)",
        "necessary pass: SimplifyInference (otherwise we can't generate code for some operators)",
        "and fusion (to get primitive functions)",
        "optimize the definition so any operators used are lowered",
        "compile the function and register globally",
        "equivalent: input.data",
        "convert each input.fields[i]",
        "create a new TensorValue of the right shape and dtype",
        "we pass the data field as an argument",
        "create a function to wrap the call of the lowered op and return",
        "a call to that function",
        "equiv: _op = tvm.get_global_func(op_name)",
        "equiv: _op(args)",
        "wildcard or var match everything",
        "constructor patterns check whether the constructors match",
        "and also the matches of any nested patterns",
        "equiv: (arg.tag == patern_constructor.tag)",
        "now check for any nested patterns",
        "can safely skip var or wildcard patterns: they will",
        "never cause a check to fail",
        "index into the value corresponding to the subpattern",
        "if we do not need to check nested pattern, just return the single check",
        "otherwise AND together any nested checks",
        "constructor pattern: assign each field of the value",
        "based on subpatterns",
        "we want the assignments for val.fields[i]",
        "Convention for the expr visitor: Each visit function returns a tuple of two members.",
        "",
        "The first is a Python AST comprised of a single *expression* that evaluates to an equivalent",
        "result to the desired Relay expression (and executes all effects in the right order).",
        "",
        "The second is a list of function definition *statements* defining thunks and other",
        "auxiliary functions needed in the translated AST object. The defs in the second object",
        "will always have unique names and will never perform any effects, so as long as they",
        "appear in the Python program before the first statement is executed, there should not",
        "be any problems.",
        "we don't need to add numbers to global var names because",
        "the *names* are checked for uniqueness in the mod",
        "To properly account for scoping and ensure that the entire node produces an expression,",
        "we translate the let binding as a function that we call with the value we intend to bind.",
        "Yes, this is somewhat ugly.",
        "we call the binding func with the intended value for the bound variable",
        "special case: if the value is a function literal, we must ensure it can be",
        "recursive by naming it after the var",
        "need to get the value out of a TensorValue to check the condition",
        "equvialent to: val.asnumpy()",
        "Python's lambdas are very restrictive, so we do \"name\" inline functions",
        "produce a constructor value",
        "lowered operator: generate a call to a function that gets the PackedFunc",
        "from TVM's registry",
        "ordinary function",
        "must ensure the data clause is executed exactly once",
        "equiv: if check(data): return body(data)",
        "finally if nothing matches we have a failed assert (should never happen)",
        "these are both handled in the \"call\" case",
        "pylint: disable=exec-used"
    ],
    "docstrings": [
        "\"\"\"Utility for converting Relay code into a Python script with equivalent semantics\"\"\"",
        "\"\"\"Functor for translating Relay programs into Python ASTs.\"\"\"",
        "\"\"\"This method converts the passed Relay expression into a Python\n        AST object with equivalent semantics.\n\n        The Python AST can be executed using exec(); it can be turned\n        into text and inspected using astor.\n        \"\"\"",
        "\"\"\"Performs optimizations necessary to be able to generate code for prog.\"\"\"",
        "\"\"\"Removes any invalid characters (only underscores, numbers, and letters permitted)\n        from the given name. Since we append a number and underscore to var names anyway,\n        it doesn't matter if the name is the empty string.\"\"\"",
        "\"\"\"Generates a unique variable name starting from the hint.\"\"\"",
        "\"\"\"Generates a unique function name starting from the hint.\"\"\"",
        "\"\"\"Returns the var name for the given Realy variable.\"\"\"",
        "\"\"\"Returns a variable AST node for the given Relay var depending on\n        whether it must appear in an assignment or not.\"\"\"",
        "\"\"\"Given the name of a Python method with dots (e.g., 'relay.var'),\n        returns an appropriate AST object corresponding to that name.\"\"\"",
        "\"\"\"Given a Numpy array, produces an appropriate Python array\n        or numerical literal representing its contents.\"\"\"",
        "\"\"\"Given a list of call args or tuple fields, converts\n        each and returns their ASTs and their defs lists (in order).\"\"\"",
        "\"\"\"Wraps the passed expression in a thunk.\"\"\"",
        "\"\"\"Converts the given Relay function into a Python function, with\n        special for named functions (locally or globally)\"\"\"",
        "\"\"\"Converts all the global functions defined in the module and returns\n        them as a list of definitions\"\"\"",
        "\"\"\"Creates a simple function call.\"\"\"",
        "\"\"\"Wrapper over function definition AST node, whose constructor is inconvenient.\"\"\"",
        "\"\"\"Lowers the passed primitive function, registers it in TVM's\n        global compiler, and produces a call to the lowered function in\n        the generated Python code.\"\"\"",
        "\"\"\"Use the types of the function arguments to determine whether we expect\n               a tensor or tuple (returns list of inputs to the lowered op call)\"\"\"",
        "\"\"\"Use the function return type to produce auxiliary variables to store outputs.\n            Returns ([assignments of output vars], [extra arguments to pass to op call],\n            expression collecting output)\"\"\"",
        "\"\"\"Given an ADT match pattern and a (Python) expression pointing to\n        an ADT value, this generates a Python expression that checks if the\n        ADT value matches the given pattern (returning True or False).\"\"\"",
        "\"\"\"Given a match clause pattern and a clause body,\n        generates a Python function that when called with an ADT\n        that matches the pattern, returns the result of evaluating\n        the clause body. This function returns a function definition\n        and the name of the generated function.\"\"\"",
        "\"\"\"This helper function ensures that the pattern is used to\n            properly assign all subfields of the given AST for use\n            in the clause body\n\n            E.g., for PatternConstructor(A, PatternVar(v), PatternWildcard(),\n            PatternConstructor(B, PatternVar(w)))\n            we would want to have\n            v = a.fields[0]\n            w = a.fields[2].fields[0]\n            \"\"\"",
        "\"\"\"\n        let var = value in body\n        =======================\n        def let_thunk(var):\n            return body\n        let_thunk(value)\n        \"\"\"",
        "\"\"\"Proceeds by converting constant value to a numpy array\n        and converting it to the appropriate value in the generated\n        code (whether it be a Python scalar or a Numpy array)\"\"\"",
        "\"\"\"For calls, we must distinguish between ordinary functions,\n        operators, and constructor calls.\"\"\"",
        "\"\"\"For writing refs, we wrap the update in a thunk\n        (returning an empty tuple to match Relay's semantics)\n        that we execute at the right time. This ensures such assignments\n        can be properly nested, since assignments are statements\n        in Python but expressions in Relay\"\"\"",
        "\"\"\"For matches, we wrap the entire expression in a thunk\n        because it is easiest to implement them using if statements.\n        For each clause, we generate a function that checks if the\n        pattern matches. If yes, we call a function that assigns\n        the variables appropriately and invokes the clause body.\"\"\"",
        "\"\"\"Converts the given Relay expression into a Python script (as a Python AST object).\n    For easiest debugging, import the astor package and use to_source().\"\"\"",
        "\"\"\"Converts the given Relay expression into a Python script and\n    executes it.\"\"\""
    ],
    "functions": [
        "convert",
        "optimize",
        "sanitize",
        "generate_var_name",
        "generate_function_name",
        "get_var_name",
        "include_var",
        "parse_name",
        "parse_numpy_array",
        "convert_fields",
        "convert_to_thunk",
        "convert_func_node",
        "convert_module",
        "create_call",
        "create_def",
        "create_op_call",
        "convert_input",
        "convert_output",
        "create_match_check",
        "create_match_clause_body",
        "collect_var_assignments",
        "visit_var",
        "visit_global_var",
        "visit_let",
        "visit_tuple",
        "visit_tuple_getitem",
        "visit_if",
        "visit_constant",
        "visit_function",
        "visit_call",
        "visit_ref_create",
        "visit_ref_read",
        "visit_ref_write",
        "visit_match",
        "visit_constructor",
        "visit_op",
        "to_python",
        "run_as_python"
    ],
    "classes": [
        "PythonConverter"
    ]
}