{
    "identifiers": [
        "com",
        "ach",
        "androidcertf",
        "activities",
        "toast",
        "android",
        "content",
        "Context",
        "android",
        "content",
        "res",
        "Configuration",
        "android",
        "content",
        "res",
        "Resources",
        "android",
        "graphics",
        "PixelFormat",
        "android",
        "os",
        "Handler",
        "android",
        "os",
        "IBinder",
        "android",
        "os",
        "Looper",
        "android",
        "os",
        "Message",
        "android",
        "os",
        "RemoteException",
        "android",
        "support",
        "annotation",
        "IntDef",
        "android",
        "support",
        "annotation",
        "NonNull",
        "android",
        "support",
        "annotation",
        "android",
        "support",
        "annotation",
        "StringRes",
        "android",
        "util",
        "Log",
        "android",
        "view",
        "Gravity",
        "android",
        "view",
        "LayoutInflater",
        "android",
        "view",
        "View",
        "android",
        "view",
        "WindowManager",
        "android",
        "view",
        "accessibility",
        "AccessibilityEvent",
        "android",
        "view",
        "accessibility",
        "AccessibilityManager",
        "android",
        "widget",
        "TextView",
        "android",
        "widget",
        "Toast",
        "java",
        "lang",
        "annotation",
        "Retention",
        "java",
        "lang",
        "annotation",
        "RetentionPolicy",
        "TAG",
        "localLOGV",
        "IntDef",
        "prefix",
        "value",
        "LENGTH_SHORT",
        "LENGTH_LONG",
        "Retention",
        "RetentionPolicy",
        "SOURCE",
        "Duration",
        "LENGTH_SHORT",
        "LENGTH_LONG",
        "mContext",
        "mTN",
        "mDuration",
        "mNextView",
        "context",
        "context",
        "NonNull",
        "context",
        "looper",
        "mContext",
        "context",
        "mTN",
        "context",
        "getPackageName",
        "looper",
        "mTN",
        "mY",
        "context",
        "getResources",
        "getDimensionPixelSize",
        "com",
        "android",
        "R",
        "dimen",
        "toast_y_offset",
        "mTN",
        "mGravity",
        "context",
        "getResources",
        "getInteger",
        "com",
        "android",
        "R",
        "integer",
        "config_toastDefaultGravity",
        "mNextView",
        "service",
        "getService",
        "pkg",
        "mContext",
        "getOpPackageName",
        "tn",
        "mTN",
        "tn",
        "mNextView",
        "mNextView",
        "service",
        "enqueueToast",
        "pkg",
        "tn",
        "mDuration",
        "e",
        "mTN",
        "cancel",
        "view",
        "mNextView",
        "view",
        "mNextView",
        "Duration",
        "duration",
        "mDuration",
        "duration",
        "mTN",
        "mDuration",
        "duration",
        "Duration",
        "mDuration",
        "horizontalMargin",
        "verticalMargin",
        "mTN",
        "mHorizontalMargin",
        "horizontalMargin",
        "mTN",
        "mVerticalMargin",
        "verticalMargin",
        "mTN",
        "mHorizontalMargin",
        "mTN",
        "mVerticalMargin",
        "gravity",
        "xOffset",
        "yOffset",
        "mTN",
        "mGravity",
        "gravity",
        "mTN",
        "mX",
        "xOffset",
        "mTN",
        "mY",
        "yOffset",
        "mTN",
        "mGravity",
        "mTN",
        "mX",
        "mTN",
        "mY",
        "mTN",
        "mParams",
        "context",
        "text",
        "Duration",
        "duration",
        "makeText",
        "context",
        "text",
        "duration",
        "NonNull",
        "context",
        "looper",
        "NonNull",
        "text",
        "Duration",
        "duration",
        "result",
        "context",
        "looper",
        "inflate",
        "context",
        "getSystemService",
        "Context",
        "LAYOUT_INFLATER_SERVICE",
        "v",
        "inflate",
        "inflate",
        "com",
        "android",
        "R",
        "layout",
        "transient_notification",
        "tv",
        "v",
        "findViewById",
        "com",
        "android",
        "R",
        "id",
        "message",
        "tv",
        "setText",
        "text",
        "result",
        "mNextView",
        "v",
        "result",
        "mDuration",
        "duration",
        "result",
        "context",
        "StringRes",
        "resId",
        "Duration",
        "duration",
        "makeText",
        "context",
        "context",
        "getResources",
        "getText",
        "resId",
        "duration",
        "StringRes",
        "resId",
        "setText",
        "mContext",
        "getText",
        "resId",
        "s",
        "mNextView",
        "tv",
        "mNextView",
        "findViewById",
        "com",
        "android",
        "R",
        "id",
        "message",
        "tv",
        "tv",
        "setText",
        "s",
        "sService",
        "sService",
        "sService",
        "sService",
        "INotificationManager",
        "Stub",
        "asInterface",
        "ServiceManager",
        "getService",
        "sService",
        "mParams",
        "SHOW",
        "HIDE",
        "CANCEL",
        "mHandler",
        "mGravity",
        "mX",
        "mY",
        "mHorizontalMargin",
        "mVerticalMargin",
        "mView",
        "mNextView",
        "mDuration",
        "mWM",
        "mPackageName",
        "SHORT_DURATION_TIMEOUT",
        "LONG_DURATION_TIMEOUT",
        "packageName",
        "looper",
        "mParams",
        "height",
        "WindowManager",
        "LayoutParams",
        "WRAP_CONTENT",
        "width",
        "WindowManager",
        "LayoutParams",
        "WRAP_CONTENT",
        "format",
        "PixelFormat",
        "TRANSLUCENT",
        "windowAnimations",
        "com",
        "android",
        "R",
        "style",
        "Animation_Toast",
        "WindowManager",
        "LayoutParams",
        "TYPE_TOAST",
        "setTitle",
        "flags",
        "WindowManager",
        "LayoutParams",
        "FLAG_KEEP_SCREEN_ON",
        "WindowManager",
        "LayoutParams",
        "FLAG_NOT_FOCUSABLE",
        "WindowManager",
        "LayoutParams",
        "FLAG_NOT_TOUCHABLE",
        "mPackageName",
        "packageName",
        "looper",
        "looper",
        "Looper",
        "myLooper",
        "looper",
        "mHandler",
        "looper",
        "Override",
        "msg",
        "msg",
        "what",
        "SHOW",
        "token",
        "msg",
        "obj",
        "handleShow",
        "token",
        "HIDE",
        "handleHide",
        "mNextView",
        "CANCEL",
        "handleHide",
        "mNextView",
        "getService",
        "cancelToast",
        "mPackageName",
        "TN",
        "e",
        "Override",
        "windowToken",
        "localLOGV",
        "Log",
        "v",
        "TAG",
        "mHandler",
        "obtainMessage",
        "SHOW",
        "windowToken",
        "sendToTarget",
        "Override",
        "localLOGV",
        "Log",
        "v",
        "TAG",
        "mHandler",
        "obtainMessage",
        "HIDE",
        "sendToTarget",
        "localLOGV",
        "Log",
        "v",
        "TAG",
        "mHandler",
        "obtainMessage",
        "CANCEL",
        "sendToTarget",
        "windowToken",
        "localLOGV",
        "Log",
        "v",
        "TAG",
        "mView",
        "mNextView",
        "mHandler",
        "hasMessages",
        "CANCEL",
        "mHandler",
        "hasMessages",
        "HIDE",
        "mView",
        "mNextView",
        "handleHide",
        "mView",
        "mNextView",
        "context",
        "mView",
        "getContext",
        "getApplicationContext",
        "packageName",
        "mView",
        "getContext",
        "getOpPackageName",
        "context",
        "context",
        "mView",
        "getContext",
        "mWM",
        "context",
        "getSystemService",
        "Context",
        "WINDOW_SERVICE",
        "config",
        "mView",
        "getContext",
        "getResources",
        "getConfiguration",
        "gravity",
        "Gravity",
        "getAbsoluteGravity",
        "mGravity",
        "config",
        "getLayoutDirection",
        "mParams",
        "gravity",
        "gravity",
        "gravity",
        "Gravity",
        "HORIZONTAL_GRAVITY_MASK",
        "Gravity",
        "FILL_HORIZONTAL",
        "mParams",
        "horizontalWeight",
        "gravity",
        "Gravity",
        "VERTICAL_GRAVITY_MASK",
        "Gravity",
        "FILL_VERTICAL",
        "mParams",
        "verticalWeight",
        "mParams",
        "x",
        "mX",
        "mParams",
        "y",
        "mY",
        "mParams",
        "verticalMargin",
        "mVerticalMargin",
        "mParams",
        "horizontalMargin",
        "mHorizontalMargin",
        "mParams",
        "packageName",
        "packageName",
        "mParams",
        "hideTimeoutMilliseconds",
        "mDuration",
        "Toast",
        "LENGTH_LONG",
        "LONG_DURATION_TIMEOUT",
        "SHORT_DURATION_TIMEOUT",
        "mParams",
        "token",
        "windowToken",
        "mView",
        "getParent",
        "localLOGV",
        "Log",
        "v",
        "TAG",
        "mView",
        "mWM",
        "removeView",
        "mView",
        "localLOGV",
        "Log",
        "v",
        "TAG",
        "mView",
        "mWM",
        "addView",
        "mView",
        "mParams",
        "trySendAccessibilityEvent",
        "e",
        "accessibilityManager",
        "AccessibilityManager",
        "getInstance",
        "mView",
        "getContext",
        "accessibilityManager",
        "isEnabled",
        "AccessibilityEvent",
        "obtain",
        "AccessibilityEvent",
        "TYPE_NOTIFICATION_STATE_CHANGED",
        "setClassName",
        "getClass",
        "getName",
        "setPackageName",
        "mView",
        "getContext",
        "getPackageName",
        "mView",
        "dispatchPopulateAccessibilityEvent",
        "accessibilityManager",
        "sendAccessibilityEvent",
        "localLOGV",
        "Log",
        "v",
        "TAG",
        "mView",
        "mView",
        "mView",
        "getParent",
        "localLOGV",
        "Log",
        "v",
        "TAG",
        "mView",
        "mWM",
        "removeViewImmediate",
        "mView",
        "getService",
        "finishToken",
        "mPackageName",
        "e",
        "mView"
    ],
    "literals": [
        "\"Toast\"",
        "\"LENGTH_\"",
        "\"setView must have been called\"",
        "\"This Toast was not created with Toast.makeText()\"",
        "\"This Toast was not created with Toast.makeText()\"",
        "\"notification\"",
        "\"Toast\"",
        "\"Can't toast on a thread that has not called Looper.prepare()\"",
        "\"SHOW: \"",
        "\"HIDE: \"",
        "\"CANCEL: \"",
        "\"HANDLE SHOW: \"",
        "\" mView=\"",
        "\" mNextView=\"",
        "\"REMOVE! \"",
        "\" in \"",
        "\"ADD! \"",
        "\" in \"",
        "\"HANDLE HIDE: \"",
        "\" mView=\"",
        "\"REMOVE! \"",
        "\" in \""
    ],
    "variables": [
        "mContext",
        "mTN",
        "mDuration",
        "mNextView",
        "sService",
        "mHandler",
        "mGravity",
        "mX",
        "mY",
        "mHorizontalMargin",
        "mVerticalMargin",
        "mView",
        "mNextView",
        "mDuration",
        "mWM",
        "mPackageName"
    ],
    "comments": [
        "not sure why this rejected syntax is allowed, but  probably it has to do with the RetentionPolicy type which discards the declaration on compile",
        "Duration type is an IntDef https://developer.android.com/reference/kotlin/androidx/annotation/IntDef",
        "https://stackoverflow.com/questions/3572463/what-is-context-on-android",
        "Context is declared to provide access to resources and addition to the running env of the app",
        "https://developer.android.com/reference/android/content/Context.html#getOpPackageName()",
        "Empty",
        "Inits a Toast object by passing context and a looper https://stackoverflow.com/a/34522758/8939897",
        "=======================================================================================",
        "All the gunk below is the interaction with the Notification Service, which handles",
        "the proper ordering of these system-wide.",
        "=======================================================================================",
        "A helper class only used for Toast so It's declared inside the class, it mainly used a handler to display the toast messages for a defined period of time",
        "https://medium.com/@manishgiri/android-handler-tutorial-ccda6994f01c",
        "for difference between a thread and a handler https://stackoverflow.com/questions/31761351/difference-between-thread-and-handler",
        "XXX This should be changed to use a Dialog, with a Theme.Toast",
        "defined that sets up the layout params appropriately.",
        "Use Looper.myLooper() if looper is not specified.",
        "Don't do this in handleHide() because it is also invoked by",
        "handleShow()",
        "Don't do this in handleHide() because it is also invoked by",
        "handleShow()",
        "If a cancel/hide is pending - no need to show - at this point",
        "the window token is already invalid and no need to do any work.",
        "remove the old view if necessary",
        "We can resolve the Gravity here by using the Locale for getting",
        "the layout direction",
        "Since the notification manager service cancels the token right",
        "after it notifies us to cancel the toast there is an inherent",
        "race and we may attempt to add a window after the token has been",
        "invalidated. Let us hedge against that.",
        "on show toast a window manager is used to display the constructed view with the required params",
        "for more info on window manager check https://stackoverflow.com/questions/19846541/what-is-windowmanager-in-android",
        "to show",
        "treat toasts as notifications since they are used to",
        "announce a transient piece of information to the user",
        "for more info https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent",
        "an accessibility event communicates changes in the UI to an accessibility service",
        "https://developer.android.com/reference/android/accessibilityservice/AccessibilityService",
        "https://medium.com/@vanshikaa937/a-complete-guide-to-accessibility-service-part-1-c00387230019",
        "note: checking parent() just to make sure the view has",
        "been added...  i have seen cases where we get here when",
        "the view isn't yet added, so let's try not to crash.",
        "Now that we've removed the view it's safe for the server to release",
        "the resources."
    ],
    "docstrings": [
        "* Copyright (C) 2007 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* A toast is a view containing a quick little message for the user.  The toast class\n * helps you create and show those.\n * {@more}\n *\n * <p>\n * When the view is shown to the user, appears as a floating view over the\n * application.  It will never receive focus.  The user will probably be in the\n * middle of typing something else.  The idea is to be as unobtrusive as\n * possible, while still showing the user the information you want them to see.\n * Two examples are the volume control, and the brief message saying that your\n * settings have been saved.\n * <p>\n * The easiest way to use this class is to call one of the static methods that constructs\n * everything you need and returns a new Toast object.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about creating Toast notifications, read the\n * <a href=\"{@docRoot}guide/topics/ui/notifiers/toasts.html\">Toast Notifications</a> developer\n * guide.</p>\n * </div>",
        "* @hide",
        "// retention policy of an IntDef is of type SOURCE : RetentionPolicy.SOURCE: Discard during the compile. These annotations don't make any sense after the compile has completed, so they aren't written to the bytecode.\n     //    Example: @Override, @SuppressWarnings",
        "* Show the view or text notification for a short period of time.  This time\n     * could be user-definable.  This is the default.\n     *\n     * @see #setDuration",
        "* Show the view or text notification for a long period of time.  This time\n     * could be user-definable.\n     *\n     * @see #setDuration",
        "* Construct an empty Toast object.  You must call {@link #setView} before you\n     * can call {@link #show}.\n     *\n     * @param context The context to use.  Usually your {@link android.app.Application}\n     *                or {@link android.app.Activity} object.",
        "* Constructs an empty Toast object.  If looper is null, Looper.myLooper() is used.\n     *\n     * @hide",
        "* Show the view for the specified duration.",
        "* Close the view if it's showing, or don't show it if it isn't showing yet.\n     * You do not normally have to call this.  Normally view will disappear on its own\n     * after the appropriate duration.",
        "* Set the view to show.\n     *\n     * @see #getView",
        "* Return the view.\n     *\n     * @see #setView",
        "* Set how long to show the view for.\n     *\n     * @see #LENGTH_SHORT\n     * @see #LENGTH_LONG",
        "* Return the duration.\n     *\n     * @see #setDuration",
        "* Set the margins of the view.\n     *\n     * @param horizontalMargin The horizontal margin, in percentage of the\n     *                         container width, between the container's edges and the\n     *                         notification\n     * @param verticalMargin   The vertical margin, in percentage of the\n     *                         container height, between the container's edges and the\n     *                         notification",
        "* Return the horizontal margin.",
        "* Return the vertical margin.",
        "* Set the location at which the notification should appear on the screen.\n     *\n     * @see android.view.Gravity\n     * @see #getGravity",
        "* Get the location at which the notification should appear on the screen.\n     *\n     * @see android.view.Gravity\n     * @see #getGravity",
        "* Return the X offset in pixels to apply to the gravity's location.",
        "* Return the Y offset in pixels to apply to the gravity's location.",
        "* Gets the LayoutParams for the Toast window.\n     *\n     * @hide",
        "* Make a standard toast that just contains a text view.\n     *\n     * @param context  The context to use.  Usually your {@link android.app.Application}\n     *                 or {@link android.app.Activity} object.\n     * @param text     The text to show.  Can be formatted text.\n     * @param duration How long to display the message.  Either {@link #LENGTH_SHORT} or\n     *                 {@link #LENGTH_LONG}",
        "* Make a standard toast to display using the specified looper.\n     * If looper is null, Looper.myLooper() is used.\n     *\n     * @hide",
        "* Make a standard toast that just contains a text view with the text from a resource.\n     *\n     * @param context  The context to use.  Usually your {@link android.app.Application}\n     *                 or {@link android.app.Activity} object.\n     * @param resId    The resource id of the string resource to use.  Can be formatted text.\n     * @param duration How long to display the message.  Either {@link #LENGTH_SHORT} or\n     *                 {@link #LENGTH_LONG}\n     * @throws Resources.NotFoundException if the resource can't be found.",
        "* Update the text in a Toast that was previously created using one of the makeText() methods.\n     *\n     * @param resId The new text for the Toast.",
        "* Update the text in a Toast that was previously created using one of the makeText() methods.\n     *\n     * @param s The new text for the Toast.",
        "* schedule handleShow into the right thread",
        "* schedule handleHide into the right thread",
        "ignore"
    ],
    "functions": [
        "Toast",
        "Toast",
        "show",
        "cancel",
        "setView",
        "View",
        "getView",
        "setDuration",
        "getDuration",
        "setMargin",
        "getHorizontalMargin",
        "getVerticalMargin",
        "setGravity",
        "getGravity",
        "getXOffset",
        "getYOffset",
        "getWindowParams",
        "Toast",
        "makeText",
        "Toast",
        "makeText",
        "Toast",
        "makeText",
        "setText",
        "setText",
        "INotificationManager",
        "getService",
        "TN",
        "handleMessage",
        "show",
        "hide",
        "cancel",
        "handleShow",
        "trySendAccessibilityEvent",
        "handleHide"
    ],
    "classes": [
        "CustomToast",
        "TN"
    ]
}