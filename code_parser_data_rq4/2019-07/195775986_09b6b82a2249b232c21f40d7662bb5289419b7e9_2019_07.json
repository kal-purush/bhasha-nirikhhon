{
    "identifiers": [
        "com",
        "com",
        "InvalidNiveauException",
        "com",
        "TooHighAttributesException",
        "org",
        "junit",
        "jupiter",
        "api",
        "BeforeEach",
        "org",
        "junit",
        "jupiter",
        "api",
        "DisplayName",
        "org",
        "junit",
        "jupiter",
        "api",
        "Tag",
        "org",
        "junit",
        "jupiter",
        "api",
        "Test",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "niveau",
        "force",
        "agilite",
        "intelligence",
        "nom",
        "niveau",
        "force",
        "agilite",
        "intelligence",
        "nom",
        "Override",
        "cible",
        "Override",
        "cible",
        "herculeMock",
        "BeforeEach",
        "herculeMock",
        "e",
        "e",
        "printStackTrace",
        "Test",
        "DisplayName",
        "Tag",
        "assertTrue",
        "herculeMock",
        "estVivant",
        "assertEquals",
        "herculeMock",
        "getVie",
        "assertEquals",
        "herculeMock",
        "getNom",
        "Test",
        "DisplayName",
        "Tag",
        "throwable",
        "assertThrows",
        "assertAll",
        "assertEquals",
        "throwable",
        "getMessage",
        "Test",
        "DisplayName",
        "Tag",
        "throwable",
        "assertThrows",
        "assertAll",
        "assertEquals",
        "throwable",
        "getMessage",
        "Test",
        "assertTrue",
        "herculeMock",
        "estVivant",
        "assertEquals",
        "herculeMock",
        "getVie",
        "herculeMock",
        "prendreDegats",
        "assertTrue",
        "herculeMock",
        "estVivant",
        "assertEquals",
        "herculeMock",
        "getVie",
        "Test",
        "assertTrue",
        "herculeMock",
        "estVivant",
        "herculeMock",
        "vie",
        "assertTrue",
        "herculeMock",
        "estVivant",
        "herculeMock",
        "vie",
        "assertTrue",
        "herculeMock",
        "estVivant",
        "Test",
        "herculeMock",
        "vie",
        "assertFalse",
        "herculeMock",
        "estVivant",
        "Test",
        "assertTrue",
        "herculeMock",
        "estVivant",
        "assertEquals",
        "herculeMock",
        "getVie",
        "herculeMock",
        "prendreDegats",
        "assertTrue",
        "herculeMock",
        "estVivant",
        "assertEquals",
        "herculeMock",
        "getVie",
        "herculeMock",
        "prendreDegats",
        "assertTrue",
        "herculeMock",
        "estVivant",
        "assertEquals",
        "herculeMock",
        "getVie",
        "herculeMock",
        "prendreDegats",
        "assertFalse",
        "herculeMock",
        "estVivant",
        "assertEquals",
        "herculeMock",
        "getVie"
    ],
    "literals": [
        "\"Hercule\"",
        "\"Création de personnage fonctionnel\"",
        "\"constructor-testing\"",
        "\"Hercule\"",
        "\"Création de personnage avec un niveau trop haut\"",
        "\"constructor-testing\"",
        "\"error\"",
        "\"Le niveau 2000 n'est pas autorisé (max 100)\"",
        "\"Création de personnage avec des attributs trop haut\"",
        "\"constructor-testing\"",
        "\"error\"",
        "\"La somme des attribues (30) ne peux pas être supérieure au niveau du héro (2)\""
    ],
    "variables": [
        "herculeMock"
    ],
    "comments": [
        "TODO Auto-generated catch block",
        "teste la création d'un personnage et vérifie qu'il est en vie avec le bon nombre de points de vie",
        "teste la création d'un personnage avec un niveau trop élevé",
        "teste la création d'un héro avec un niveau trop élevé"
    ],
    "docstrings": [],
    "functions": [
        "CharacterMock",
        "attaqueBasique",
        "attaqueSpeciale",
        "init",
        "testCharacterOk",
        "testCharacterNokLVLTropHaut",
        "testHeroNokTropAttributs",
        "testPrendreDegats",
        "testEstVivantAvecHPSupA0",
        "testEstVivantSansHP",
        "testPrendreDegatsMortels"
    ],
    "classes": [
        "CharacterTest",
        "CharacterMock"
    ]
}