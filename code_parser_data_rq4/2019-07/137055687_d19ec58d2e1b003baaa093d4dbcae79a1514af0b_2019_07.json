{
    "identifiers": [
        "SocketConnectOpts",
        "EventEmitter",
        "ClientSocket",
        "SendOptions",
        "NetworkError",
        "NodeMessage",
        "EventEmitter",
        "name",
        "Infinity",
        "name",
        "retryTime",
        "maximumRetries",
        "handshakeTimeout",
        "options",
        "connectionListener",
        "port",
        "host",
        "connectionListener",
        "port",
        "connectionListener",
        "path",
        "connectionListener",
        "options",
        "ClientSocket",
        "options",
        "name",
        "name",
        "client",
        "client",
        "name",
        "name",
        "name",
        "name",
        "name",
        "ClientSocket",
        "name",
        "name",
        "name",
        "name",
        "data",
        "options",
        "name",
        "nodeSocket",
        "nodeSocket",
        "data",
        "options",
        "listener",
        "data",
        "client",
        "listener",
        "error",
        "client",
        "listener",
        "client",
        "listener",
        "client",
        "listener",
        "client",
        "listener",
        "client",
        "listener",
        "message",
        "client",
        "listener",
        "data",
        "client",
        "listener",
        "error",
        "client",
        "listener",
        "client",
        "listener",
        "client",
        "listener",
        "client",
        "listener",
        "client",
        "listener",
        "message",
        "client",
        "listener",
        "data",
        "client",
        "listener",
        "error",
        "client",
        "listener",
        "client",
        "listener",
        "client",
        "listener",
        "client",
        "listener",
        "client",
        "listener",
        "message",
        "client",
        "data",
        "client",
        "error",
        "client",
        "client",
        "client",
        "client",
        "client",
        "message",
        "client",
        "NodeClient",
        "Client"
    ],
    "literals": [
        "'net'",
        "'events'",
        "'./ClientSocket'",
        "'./Util/Shared'",
        "'./Structures/NodeMessage'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "The socket ${name} is not connected to this one.",
        "string",
        "'string'",
        "'Expected a string or a ClientSocket instance.'",
        "string",
        "string",
        "'Failed to send to the socket: It is not connected to this client.'",
        "'raw'",
        "'error'",
        "'connecting'",
        "'connect'",
        "'ready'",
        "'disconnect'",
        "'message'",
        "'raw'",
        "'error'",
        "'connecting'",
        "'connect'",
        "'ready'",
        "'disconnect'",
        "'message'",
        "'raw'",
        "'error'",
        "'connecting'",
        "'connect'",
        "'ready'",
        "'disconnect'",
        "'message'",
        "'raw'",
        "'error'",
        "'connecting'",
        "'connect'",
        "'ready'",
        "'disconnect'",
        "'message'"
    ],
    "variables": [
        "client",
        "nodeSocket"
    ],
    "comments": [
        "@ts-ignore"
    ],
    "docstrings": [
        "* Connect to a socket\n\t * @param name The label name for the socket\n\t * @param options The options to pass to connect",
        "* Disconnect from a socket, this will also reject all messages\n\t * @param name The label name of the socket to disconnect",
        "* Get a NodeSocket by its name or Socket\n\t * @param name The NodeSocket to get",
        "* Check if a NodeSocket exists by its name of Socket\n\t * @param name The NodeSocket to get",
        "* Send a message to a connected socket\n\t * @param name The label name of the socket to send the message to\n\t * @param data The data to send to the socket\n\t * @param options The options for this message",
        "* Emitted when the client receives data from any of the connected servers.",
        "* Emitted when an error occurs.",
        "* Emitted a connection to a server is in progress.",
        "* Emitted when a connection to a server is made and set up.",
        "* Emitted when a connection to a server is ready to be used.",
        "* Emitted when a connection to a server is closed.",
        "* Emitted when the client receives a message from any of the connected servers.",
        "* Emitted when the client receives data from any of the connected servers.",
        "* Emitted when an error occurs.",
        "* Emitted a connection to a server is in progress.",
        "* Emitted when a connection to a server is made and set up.",
        "* Emitted when a connection to a server is ready to be used.",
        "* Emitted when a connection to a server is closed.",
        "* Emitted when the client receives a message from any of the connected servers.",
        "* Emitted when the client receives data from any of the connected servers.",
        "* Emitted when an error occurs.",
        "* Emitted a connection to a server is in progress.",
        "* Emitted when a connection to a server is made and set up.",
        "* Emitted when a connection to a server is ready to be used.",
        "* Emitted when a connection to a server is closed.",
        "* Emitted when the client receives a message from any of the connected servers.",
        "* Emits raw data received from the underlying socket.",
        "* Emitted when an error occurs.",
        "* Emits a connecting event.",
        "* Emits a client error event.",
        "* Emitted when a connection to a server is ready to be used.",
        "* Emits a disconnection from a server.",
        "* Emits a parsed NodeMessage instance ready for usage."
    ],
    "functions": [
        "connectTo",
        "disconnectFrom",
        "get",
        "has",
        "sendTo"
    ],
    "classes": [
        "NodeClient"
    ]
}