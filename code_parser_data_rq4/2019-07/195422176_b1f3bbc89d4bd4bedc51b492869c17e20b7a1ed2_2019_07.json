{
    "identifiers": [
        "vscode",
        "context",
        "vscode",
        "vscode",
        "vscode",
        "context",
        "disposable",
        "vscode",
        "vscode",
        "position",
        "vscode",
        "token",
        "vscode",
        "context",
        "vscode",
        "vscode",
        "vscode",
        "snippetCompletion",
        "vscode",
        "snippetCompletion",
        "vscode",
        "vscode",
        "commitCharacterCompletion",
        "commitCharacterCompletion",
        "vscode",
        "vscode",
        "commandCompletion",
        "vscode",
        "commandCompletion",
        "commandCompletion",
        "simpleCompletion",
        "snippetCompletion",
        "commitCharacterCompletion",
        "commandCompletion",
        "vscode",
        "vscode",
        "position",
        "vscode",
        "position",
        "position",
        "linePrefix",
        "vscode",
        "vscode",
        "vscode",
        "vscode",
        "vscode",
        "vscode",
        "context",
        "provider1",
        "provider2"
    ],
    "literals": [
        "'vscode'",
        "'Congratulations, your extension \"completiontest\" is now active!'",
        "'extension.helloWorld'",
        "'Hello World!'",
        "'plaintext'",
        "'Hello World!'",
        "'Good part of the day'",
        "'Good ${1|morning,afternoon,evening|}. It is ${1}, right?'",
        "\"Inserts a snippet that lets you select the _appropriate_ part of the day for your greeting.\"",
        "'console'",
        "'.'",
        "'Press `.` to get `console.`'",
        "'new'",
        "'new '",
        "'editor.action.triggerSuggest'",
        "'Re-trigger completions...'",
        "'plaintext'",
        "'console.'",
        "'log'",
        "'warn'",
        "'error'",
        "'.'"
    ],
    "variables": [
        "disposable",
        "provider1",
        "simpleCompletion",
        "snippetCompletion",
        "commitCharacterCompletion",
        "commandCompletion",
        "provider2",
        "linePrefix"
    ],
    "comments": [
        "The module 'vscode' contains the VS Code extensibility API",
        "Import the module and reference it with the alias vscode in your code below",
        "this method is called when your extension is activated",
        "your extension is activated the very first time the command is executed",
        "Use the console to output diagnostic information (console.log) and errors (console.error)",
        "This line of code will only be executed once when your extension is activated",
        "The command has been defined in the package.json file",
        "Now provide the implementation of the command with registerCommand",
        "The commandId parameter must match the command field in package.json",
        "The code you place here will be executed every time your command is executed",
        "Display a message box to the user",
        "Reference",
        "https://code.visualstudio.com/api/references/vscode-api#CompletionContext",
        "https://code.visualstudio.com/api/references/vscode-api#languages",
        "a simple completion item which inserts `Hello World!`",
        "a completion item that inserts its text as snippet,",
        "the `insertText`-property is a `SnippetString` which we will",
        "honored by the editor.",
        "a completion item that can be accepted by a commit character,",
        "the `commitCharacters`-property is set which means that the completion will",
        "be inserted and then the character will be typed.",
        "a completion item that retriggers IntelliSense when being accepted,",
        "the `command`-property is set which the editor will execute after",
        "completion has been inserted. Also, the `insertText` is set so that",
        "a space is inserted after `new`",
        "return all completion items as array",
        "get all text until the `position` and check if it reads `console.`",
        "and iff so then complete if `log`, `warn`, and `error`",
        "triggered whenever a '.' is being typed",
        "this method is called when your extension is deactivated"
    ],
    "docstrings": [],
    "functions": [
        "activate",
        "provideCompletionItems",
        "provideCompletionItems",
        "deactivate"
    ],
    "classes": []
}