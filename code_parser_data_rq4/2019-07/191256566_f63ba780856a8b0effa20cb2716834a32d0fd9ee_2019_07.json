{
    "identifiers": [
        "screen",
        "FSM",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "write_ch",
        "fsm",
        "input_symbol",
        "fsm",
        "fsm",
        "memory",
        "append",
        "fsm",
        "input_symbol",
        "fsm",
        "fsm",
        "memory",
        "pop",
        "ns",
        "fsm",
        "input_symbol",
        "fsm",
        "memory",
        "append",
        "ns",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "cursor_back",
        "fsm",
        "fsm",
        "memory",
        "pop",
        "fsm",
        "memory",
        "screen",
        "cursor_back",
        "count",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "cursor_down",
        "fsm",
        "fsm",
        "memory",
        "pop",
        "fsm",
        "memory",
        "screen",
        "cursor_down",
        "count",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "cursor_forward",
        "fsm",
        "fsm",
        "memory",
        "pop",
        "fsm",
        "memory",
        "screen",
        "cursor_forward",
        "count",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "cursor_up_reverse",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "cursor_up",
        "fsm",
        "fsm",
        "memory",
        "pop",
        "fsm",
        "memory",
        "screen",
        "cursor_up",
        "count",
        "fsm",
        "fsm",
        "memory",
        "pop",
        "fsm",
        "memory",
        "pop",
        "fsm",
        "memory",
        "screen",
        "cursor_home",
        "r",
        "c",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "cursor_home",
        "r",
        "c",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "erase_down",
        "fsm",
        "fsm",
        "memory",
        "pop",
        "fsm",
        "memory",
        "arg",
        "screen",
        "erase_down",
        "arg",
        "screen",
        "erase_up",
        "arg",
        "screen",
        "erase_screen",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "erase_end_of_line",
        "fsm",
        "fsm",
        "memory",
        "pop",
        "fsm",
        "memory",
        "arg",
        "screen",
        "erase_end_of_line",
        "arg",
        "screen",
        "erase_start_of_line",
        "arg",
        "screen",
        "erase_line",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "scroll_screen",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "cursor_save_attrs",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "cursor_restore_attrs",
        "fsm",
        "fsm",
        "memory",
        "fsm",
        "memory",
        "pop",
        "fsm",
        "memory",
        "pop",
        "screen",
        "scroll_screen_rows",
        "r1",
        "r2",
        "fsm",
        "fsm",
        "memory",
        "fsm",
        "memory",
        "pop",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "open",
        "fout",
        "write",
        "fsm",
        "input_symbol",
        "fsm",
        "current_state",
        "fout",
        "close",
        "screen",
        "screen",
        "r",
        "c",
        "args",
        "kwargs",
        "screen",
        "screen",
        "r",
        "c",
        "args",
        "kwargs",
        "term",
        "r",
        "c",
        "args",
        "kwargs",
        "term",
        "r",
        "c",
        "args",
        "kwargs",
        "FSM",
        "FSM",
        "state",
        "set_default_transition",
        "DoLog",
        "state",
        "add_transition_any",
        "DoEmit",
        "state",
        "add_transition",
        "state",
        "add_transition_any",
        "DoLog",
        "state",
        "add_transition",
        "state",
        "add_transition",
        "state",
        "add_transition_list",
        "state",
        "add_transition_list",
        "state",
        "add_transition",
        "DoCursorSave",
        "state",
        "add_transition",
        "DoCursorRestore",
        "state",
        "add_transition",
        "DoUpReverse",
        "state",
        "add_transition",
        "DoUpReverse",
        "state",
        "add_transition",
        "DoUpReverse",
        "state",
        "add_transition",
        "state",
        "add_transition",
        "state",
        "add_transition_any",
        "state",
        "add_transition",
        "state",
        "add_transition",
        "DoHomeOrigin",
        "state",
        "add_transition",
        "DoBackOne",
        "state",
        "add_transition",
        "DoDownOne",
        "state",
        "add_transition",
        "DoForwardOne",
        "state",
        "add_transition",
        "DoUpOne",
        "state",
        "add_transition",
        "DoEraseDown",
        "state",
        "add_transition",
        "DoEraseEndOfLine",
        "state",
        "add_transition",
        "DoEnableScroll",
        "state",
        "add_transition",
        "do_sgr",
        "state",
        "add_transition",
        "state",
        "add_transition_list",
        "digits",
        "DoStartNumber",
        "state",
        "add_transition_list",
        "digits",
        "DoBuildNumber",
        "state",
        "add_transition",
        "DoBack",
        "state",
        "add_transition",
        "DoDown",
        "state",
        "add_transition",
        "DoForward",
        "state",
        "add_transition",
        "DoUp",
        "state",
        "add_transition",
        "DoErase",
        "state",
        "add_transition",
        "DoEraseLine",
        "state",
        "add_transition",
        "DoMode",
        "state",
        "add_transition",
        "do_sgr",
        "state",
        "add_transition",
        "do_decsca",
        "state",
        "add_transition_list",
        "digits",
        "DoStartNumber",
        "state",
        "add_transition_list",
        "digits",
        "DoBuildNumber",
        "state",
        "add_transition",
        "do_modecrap",
        "state",
        "add_transition",
        "do_modecrap",
        "state",
        "add_transition",
        "state",
        "add_transition_any",
        "DoLog",
        "state",
        "add_transition_list",
        "digits",
        "DoStartNumber",
        "state",
        "add_transition_list",
        "digits",
        "DoBuildNumber",
        "state",
        "add_transition_any",
        "DoLog",
        "state",
        "add_transition",
        "DoHome",
        "state",
        "add_transition",
        "DoHome",
        "state",
        "add_transition",
        "DoScrollRegion",
        "state",
        "add_transition",
        "do_sgr",
        "state",
        "add_transition",
        "do_decsca",
        "state",
        "add_transition",
        "state",
        "add_transition_any",
        "DoLog",
        "state",
        "add_transition_list",
        "digits",
        "DoStartNumber",
        "state",
        "add_transition_list",
        "digits",
        "DoBuildNumber",
        "state",
        "add_transition_any",
        "DoLog",
        "state",
        "add_transition",
        "do_sgr",
        "state",
        "add_transition",
        "do_decsca",
        "state",
        "add_transition",
        "c",
        "isinstance",
        "c",
        "_decode",
        "c",
        "state",
        "process",
        "c",
        "l",
        "write",
        "l",
        "s",
        "isinstance",
        "s",
        "_decode",
        "s",
        "c",
        "s",
        "process",
        "c",
        "ch",
        "isinstance",
        "ch",
        "_decode",
        "ch",
        "ch",
        "ch",
        "cr",
        "ch",
        "crlf",
        "ch",
        "chr",
        "screen",
        "BS",
        "cursor_back",
        "put_abs",
        "cur_r",
        "cur_c",
        "ch",
        "cur_r",
        "cur_c",
        "cursor_forward",
        "old_c",
        "cur_c",
        "cursor_down",
        "old_r",
        "cur_r",
        "cursor_home",
        "cur_r",
        "scroll_up",
        "cursor_home",
        "cur_r",
        "erase_line",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "fsm",
        "fsm",
        "memory",
        "screen",
        "fsm",
        "fsm",
        "memory",
        "screen"
    ],
    "literals": [
        "'log'",
        "'a'",
        "','",
        "'\\n'",
        "'INIT'",
        "'INIT'",
        "'INIT'",
        "'INIT'",
        "'\\x1b'",
        "'INIT'",
        "'ESC'",
        "'ESC'",
        "'INIT'",
        "'('",
        "'ESC'",
        "'G0SCS'",
        "')'",
        "'ESC'",
        "'G1SCS'",
        "'AB012'",
        "'G0SCS'",
        "'INIT'",
        "'AB012'",
        "'G1SCS'",
        "'INIT'",
        "'7'",
        "'ESC'",
        "'INIT'",
        "'8'",
        "'ESC'",
        "'INIT'",
        "'M'",
        "'ESC'",
        "'INIT'",
        "'>'",
        "'ESC'",
        "'INIT'",
        "'<'",
        "'ESC'",
        "'INIT'",
        "'='",
        "'ESC'",
        "'INIT'",
        "'#'",
        "'ESC'",
        "'GRAPHICS_POUND'",
        "'GRAPHICS_POUND'",
        "'INIT'",
        "'['",
        "'ESC'",
        "'ELB'",
        "'H'",
        "'ELB'",
        "'INIT'",
        "'D'",
        "'ELB'",
        "'INIT'",
        "'B'",
        "'ELB'",
        "'INIT'",
        "'C'",
        "'ELB'",
        "'INIT'",
        "'A'",
        "'ELB'",
        "'INIT'",
        "'J'",
        "'ELB'",
        "'INIT'",
        "'K'",
        "'ELB'",
        "'INIT'",
        "'r'",
        "'ELB'",
        "'INIT'",
        "'m'",
        "'ELB'",
        "'INIT'",
        "'?'",
        "'ELB'",
        "'MODECRAP'",
        "'ELB'",
        "'NUMBER_1'",
        "'NUMBER_1'",
        "'NUMBER_1'",
        "'D'",
        "'NUMBER_1'",
        "'INIT'",
        "'B'",
        "'NUMBER_1'",
        "'INIT'",
        "'C'",
        "'NUMBER_1'",
        "'INIT'",
        "'A'",
        "'NUMBER_1'",
        "'INIT'",
        "'J'",
        "'NUMBER_1'",
        "'INIT'",
        "'K'",
        "'NUMBER_1'",
        "'INIT'",
        "'l'",
        "'NUMBER_1'",
        "'INIT'",
        "'m'",
        "'NUMBER_1'",
        "'INIT'",
        "'q'",
        "'NUMBER_1'",
        "'INIT'",
        "'MODECRAP'",
        "'MODECRAP_NUM'",
        "'MODECRAP_NUM'",
        "'MODECRAP_NUM'",
        "'l'",
        "'MODECRAP_NUM'",
        "'INIT'",
        "'h'",
        "'MODECRAP_NUM'",
        "'INIT'",
        "';'",
        "'NUMBER_1'",
        "'SEMICOLON'",
        "'SEMICOLON'",
        "'INIT'",
        "'SEMICOLON'",
        "'NUMBER_2'",
        "'NUMBER_2'",
        "'NUMBER_2'",
        "'NUMBER_2'",
        "'INIT'",
        "'H'",
        "'NUMBER_2'",
        "'INIT'",
        "'f'",
        "'NUMBER_2'",
        "'INIT'",
        "'r'",
        "'NUMBER_2'",
        "'INIT'",
        "'m'",
        "'NUMBER_2'",
        "'INIT'",
        "'q'",
        "'NUMBER_2'",
        "'INIT'",
        "';'",
        "'NUMBER_2'",
        "'SEMICOLON_X'",
        "'SEMICOLON_X'",
        "'INIT'",
        "'SEMICOLON_X'",
        "'NUMBER_X'",
        "'NUMBER_X'",
        "'NUMBER_X'",
        "'NUMBER_X'",
        "'INIT'",
        "'m'",
        "'NUMBER_X'",
        "'INIT'",
        "'q'",
        "'NUMBER_X'",
        "'INIT'",
        "';'",
        "'NUMBER_X'",
        "'SEMICOLON_X'",
        "u'\\r'",
        "u'\\n'"
    ],
    "variables": [
        "screen",
        "ns",
        "ns",
        "screen",
        "count",
        "screen",
        "screen",
        "count",
        "screen",
        "screen",
        "count",
        "screen",
        "screen",
        "screen",
        "count",
        "screen",
        "c",
        "r",
        "screen",
        "c",
        "r",
        "screen",
        "screen",
        "arg",
        "screen",
        "screen",
        "arg",
        "screen",
        "screen",
        "screen",
        "screen",
        "screen",
        "r2",
        "r1",
        "screen",
        "mode",
        "screen",
        "fsm",
        "memory",
        "fout",
        "state",
        "c",
        "s",
        "ch",
        "ch",
        "old_r",
        "old_c",
        "screen",
        "fsm",
        "memory",
        "screen",
        "fsm",
        "memory",
        "screen",
        "fsm",
        "memory"
    ],
    "comments": [
        "references:",
        "http://en.wikipedia.org/wiki/ANSI_escape_code",
        "http://www.retards.org/terminals/vt102.html",
        "http://vt100.net/docs/vt102-ug/contents.html",
        "http://vt100.net/docs/vt220-rm/",
        "http://www.termsys.demon.co.uk/vtansi.htm",
        "",
        "The 'Do.*' functions are helper functions for the ANSI class.",
        "",
        "Should be 4",
        "screen.setReplaceMode ()",
        "self.screen = screen (24,80)",
        "Selects application keypad.",
        "ELB means Escape Left Bracket. That is ^[[",
        "It gets worse... the 'm' code can have infinite number of",
        "number;number;number before it. I've never seen more than two,",
        "but the specs say it's allowed. crap!",
        "LED control. Same implementation problem as 'm' code.",
        "\\E[?47h switch to alternate screen",
        "\\E[?47l restores to normal screen from alternate screen.",
        "RM   Reset Mode                Esc [ Ps l                   none",
        "It gets worse... the 'm' code can have infinite number of",
        "number;number;number before it. I've never seen more than two,",
        "but the specs say it's allowed. crap!",
        "LED control. Same problem as 'm' code.",
        "Create a state for 'q' and 'm' which allows an infinite number of ignored numbers",
        "\\r and \\n both produce a call to cr() and lf(), respectively."
    ],
    "docstrings": [
        "'''This implements an ANSI (VT100) terminal emulator as a subclass of screen.\n\nPEXPECT LICENSE\n\n    This license is approved by the OSI and FSF as GPL-compatible.\n        http://opensource.org/licenses/isc-license.txt\n\n    Copyright (c) 2012, Noah Spurrier <noah@noah.org>\n    PERMISSION TO USE, COPY, MODIFY, AND/OR DISTRIBUTE THIS SOFTWARE FOR ANY\n    PURPOSE WITH OR WITHOUT FEE IS HEREBY GRANTED, PROVIDED THAT THE ABOVE\n    COPYRIGHT NOTICE AND THIS PERMISSION NOTICE APPEAR IN ALL COPIES.\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n'''",
        "'''This class is an abstract, generic terminal.\n    This does nothing. This is a placeholder that\n    provides a common base class for other terminals\n    such as an ANSI terminal. '''",
        "'''This class implements an ANSI (VT100) terminal.\n    It is a stream filter that recognizes ANSI terminal\n    escape sequences and maintains the state of a screen object. '''",
        "\"\"\"Process a single character. Called by :meth:`write`.\"\"\"",
        "\"\"\"Process text, writing it to the virtual screen while handling\n        ANSI escape codes.\n        \"\"\"",
        "'''This puts a character at the current cursor position. The cursor\n        position is moved forward with wrap-around, but no scrolling is done if\n        the cursor hits the lower-right corner of the screen. '''",
        "'''Select Graphic Rendition, e.g. color. '''",
        "'''Select character protection attribute. '''",
        "'''Handler for \\x1b[?<number>h and \\x1b[?<number>l. If anyone\n        wanted to actually use these, they'd need to add more states to the\n        FSM rather than just improve or override this method. '''"
    ],
    "functions": [
        "DoEmit",
        "DoStartNumber",
        "DoBuildNumber",
        "DoBackOne",
        "DoBack",
        "DoDownOne",
        "DoDown",
        "DoForwardOne",
        "DoForward",
        "DoUpReverse",
        "DoUpOne",
        "DoUp",
        "DoHome",
        "DoHomeOrigin",
        "DoEraseDown",
        "DoErase",
        "DoEraseEndOfLine",
        "DoEraseLine",
        "DoEnableScroll",
        "DoCursorSave",
        "DoCursorRestore",
        "DoScrollRegion",
        "DoMode",
        "DoLog",
        "process",
        "process_list",
        "write",
        "flush",
        "write_ch",
        "do_sgr",
        "do_decsca",
        "do_modecrap"
    ],
    "classes": [
        "term",
        "ANSI"
    ]
}