{
    "identifiers": [
        "numpy",
        "np",
        "scipy",
        "linalg",
        "data_train1",
        "data_train2",
        "m",
        "i",
        "np",
        "shape",
        "data_train1",
        "data_train1",
        "i",
        "j",
        "np",
        "shape",
        "X1",
        "X1",
        "j",
        "np",
        "mean",
        "X1",
        "j",
        "X1",
        "dot",
        "X1",
        "T",
        "np",
        "sum",
        "np",
        "diag",
        "X1",
        "dot",
        "X1",
        "T",
        "Rh",
        "rh",
        "i",
        "np",
        "shape",
        "data_train2",
        "data_train2",
        "i",
        "j",
        "np",
        "shape",
        "X1",
        "X1",
        "j",
        "np",
        "mean",
        "X1",
        "j",
        "X1",
        "dot",
        "X1",
        "T",
        "np",
        "sum",
        "np",
        "diag",
        "X1",
        "dot",
        "X1",
        "T",
        "Rf",
        "rh",
        "linalg",
        "eig",
        "Rh",
        "Rf",
        "Eig_values",
        "real",
        "Eig_vectors",
        "real",
        "np",
        "argsort",
        "Eig_values",
        "Eig_vectors",
        "Ind",
        "np",
        "concatenate",
        "Eig_vectors",
        "m",
        "Eig_vectors",
        "len",
        "Eig_vectors",
        "m",
        "len",
        "Eig_vectors",
        "axis",
        "W"
    ],
    "literals": [],
    "variables": [
        "Rh",
        "Rf",
        "X1",
        "X1",
        "j",
        "rh",
        "Rh",
        "rh",
        "X1",
        "X1",
        "j",
        "rh",
        "Rf",
        "Eig_values",
        "Eig_vectors",
        "Eig_values",
        "Eig_vectors",
        "Ind",
        "Eig_vectors",
        "W"
    ],
    "comments": [
        "X1 = X1 - np.mean(X1, axis=0)  # Normalize data1",
        "Rh = Rh / np.shape(data_train1)[0]",
        "X1 = X1 - np.mean(X1, axis=0)  # Normalize data1",
        "Rf = Rf / np.shape(data_train2)[0]",
        "Generalized eigen value decomposition",
        "Sorted descending"
    ],
    "docstrings": [],
    "functions": [
        "common_spatial_pattern"
    ],
    "classes": []
}