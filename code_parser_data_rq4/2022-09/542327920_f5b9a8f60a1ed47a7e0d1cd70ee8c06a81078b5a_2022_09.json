{
    "identifiers": [
        "net",
        "minecraft",
        "src",
        "java",
        "util",
        "Random",
        "par1",
        "par1",
        "Material",
        "circuits",
        "SetAxesEffectiveOn",
        "setHardness",
        "InitBlockBounds",
        "setStepSound",
        "soundStoneFootstep",
        "setUnlocalizedName",
        "Override",
        "blockAccess",
        "i",
        "j",
        "k",
        "Override",
        "blockAccess",
        "i",
        "j",
        "k",
        "iFacing",
        "blockAccess",
        "getBlockMetadata",
        "i",
        "j",
        "k",
        "iFacing",
        "AxisAlignedBB",
        "getAABBPool",
        "getAABB",
        "AxisAlignedBB",
        "getAABBPool",
        "getAABB",
        "AxisAlignedBB",
        "getAABBPool",
        "getAABB",
        "AxisAlignedBB",
        "getAABBPool",
        "getAABB",
        "AxisAlignedBB",
        "getAABBPool",
        "getAABB",
        "Override",
        "world",
        "i",
        "j",
        "k",
        "GetBlockBoundsFromPoolBasedOnState",
        "world",
        "i",
        "j",
        "k",
        "offset",
        "i",
        "j",
        "k",
        "par1World",
        "par2",
        "par3",
        "par4",
        "par5EntityLiving",
        "par6ItemStack",
        "var7",
        "MathHelper",
        "floor_double",
        "par5EntityLiving",
        "rotationYaw",
        "par1World",
        "setBlockMetadataWithNotify",
        "par2",
        "par3",
        "par4",
        "var7",
        "par1World",
        "par1World",
        "par2",
        "par3",
        "par4",
        "SHMod",
        "hat",
        "itemID",
        "par1World",
        "par2",
        "par3",
        "par4",
        "var5",
        "par1World",
        "getBlockTileEntity",
        "par2",
        "par3",
        "par4",
        "var5",
        "var5",
        "var5",
        "getHatType",
        "getDamageValue",
        "par1World",
        "par2",
        "par3",
        "par4",
        "par1",
        "par1",
        "par1World",
        "par2",
        "par3",
        "par4",
        "par5",
        "par6",
        "par7",
        "par1World",
        "par2",
        "par3",
        "par4",
        "par5",
        "par6EntityPlayer",
        "par6EntityPlayer",
        "capabilities",
        "isCreativeMode",
        "par5",
        "par1World",
        "setBlockMetadataWithNotify",
        "par2",
        "par3",
        "par4",
        "par5",
        "onBlockHarvested",
        "par1World",
        "par2",
        "par3",
        "par4",
        "par5",
        "par6EntityPlayer",
        "par1World",
        "par2",
        "par3",
        "par4",
        "par5",
        "par6",
        "par1World",
        "isRemote",
        "par6",
        "var7",
        "SHMod",
        "hat",
        "itemID",
        "getDamageValue",
        "par1World",
        "par2",
        "par3",
        "par4",
        "var8",
        "par1World",
        "getBlockTileEntity",
        "par2",
        "par3",
        "par4",
        "dropBlockAsItem_do",
        "par1World",
        "par2",
        "par3",
        "par4",
        "var7",
        "breakBlock",
        "par1World",
        "par2",
        "par3",
        "par4",
        "par5",
        "par6",
        "par1",
        "par2Random",
        "par3",
        "SHMod",
        "hat",
        "itemID",
        "par1World",
        "par2",
        "par3",
        "par4",
        "par5",
        "par1World",
        "getBlockId",
        "par2",
        "par3",
        "par4",
        "blockID",
        "var6",
        "par1World",
        "getBlockTileEntity",
        "par2",
        "par3",
        "par4",
        "var6",
        "var6",
        "var6",
        "getHatType",
        "par5",
        "par1IconRegister",
        "par1",
        "par2",
        "Block",
        "slowSand",
        "getBlockTextureFromSide",
        "par1",
        "SHItemHat",
        "textureNames",
        "Override",
        "blockAccess",
        "i",
        "j",
        "k",
        "iMetadata",
        "blockAccess",
        "getBlockMetadata",
        "i",
        "j",
        "k",
        "iMetadata",
        "Override",
        "blockAccess",
        "i",
        "j",
        "k",
        "Override",
        "world",
        "i",
        "j",
        "k",
        "bReverse",
        "tileEnt",
        "world",
        "getBlockTileEntity",
        "i",
        "j",
        "k",
        "tileEnt",
        "tileEnt",
        "skullEnt",
        "tileEnt",
        "iSkullFacing",
        "skullEnt",
        "GetSkullRotationServerSafe",
        "bReverse",
        "iSkullFacing",
        "iSkullFacing",
        "iSkullFacing",
        "iSkullFacing",
        "iSkullFacing",
        "iSkullFacing",
        "skullEnt",
        "setHatRotation",
        "iSkullFacing",
        "world",
        "markBlockForUpdate",
        "i",
        "j",
        "k",
        "Override",
        "world",
        "i",
        "j",
        "k",
        "Override",
        "renderBlocks",
        "i",
        "j",
        "k"
    ],
    "literals": [
        "\"SHBlockHat\""
    ],
    "variables": [],
    "comments": [
        "Based on FCBlockSkull",
        "override to deprecate parent",
        "don't allow skulls to be retrieved because their code is a mess",
        "----------- Client Side Functionality -----------//"
    ],
    "docstrings": [
        "* The type of render function that is called for this block",
        "* Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two\n     * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.",
        "* If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)",
        "* Updates the blocks bounds based on its current state. Args: world, x, y, z",
        "* Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been\n     * cleared to be reused)",
        "* Called when the block is placed in the world.",
        "* Returns a new instance of a block's tile entity class. Called on placing the block.",
        "* only called by clickMiddleMouseButton , and passed to inventory.setCurrentItem (along with isCreative)",
        "* Get the block's damage value (for use with pick block).",
        "* Determines the damage on the item the block drops. Used in cloth and wood.",
        "* Drops the block items with a specified chance of dropping the specified items",
        "* Called when the block is attempted to be harvested",
        "* ejects contained items into the world, and notifies neighbours of an update, as appropriate",
        "* Returns the ID of the items to drop on destruction.",
        "* When this method is called, your block should register all the icons it needs with the given IconRegister. This\n     * is the only chance you get to register icons.",
        "* From the specified side and block metadata retrieves the blocks texture. Args: side, metadata",
        "* Gets the icon name of the ItemBlock corresponding to this block. Used by hoppers."
    ],
    "functions": [
        "SHBlockHat",
        "getRenderType",
        "isOpaqueCube",
        "renderAsNormalBlock",
        "setBlockBoundsBasedOnState",
        "AxisAlignedBB",
        "GetBlockBoundsFromPoolBasedOnState",
        "AxisAlignedBB",
        "getCollisionBoundingBoxFromPool",
        "onBlockPlacedBy",
        "TileEntity",
        "createNewTileEntity",
        "idPicked",
        "getDamageValue",
        "damageDropped",
        "dropBlockAsItemWithChance",
        "onBlockHarvested",
        "breakBlock",
        "idDropped",
        "func_82528_d",
        "registerIcons",
        "Icon",
        "getIcon",
        "getItemIconName",
        "IsBlockRestingOnThatBelow",
        "CanRotateOnTurntable",
        "RotateAroundJAxis",
        "ItemStack",
        "GetStackRetrievedByBlockDispenser",
        "RenderBlock"
    ],
    "classes": [
        "SHBlockHat"
    ]
}