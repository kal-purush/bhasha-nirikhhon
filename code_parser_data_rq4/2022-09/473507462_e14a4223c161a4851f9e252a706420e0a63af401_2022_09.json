{
    "identifiers": [
        "test",
        "org",
        "junit",
        "Assert",
        "assertFalse",
        "org",
        "junit",
        "Assert",
        "assertTrue",
        "org",
        "junit",
        "Assert",
        "fail",
        "org",
        "junit",
        "jupiter",
        "api",
        "Assertions",
        "assertEquals",
        "java",
        "util",
        "model",
        "classes",
        "UniqueQueue",
        "generalUniqueQueueTest",
        "e",
        "e",
        "printStackTrace",
        "fail",
        "codaUnica",
        "assertEquals",
        "codaUnica",
        "size",
        "assertTrue",
        "codaUnica",
        "add",
        "assertFalse",
        "codaUnica",
        "add",
        "assertTrue",
        "codaUnica",
        "add",
        "assertEquals",
        "codaUnica",
        "peek",
        "assertTrue",
        "codaUnica",
        "remove",
        "assertEquals",
        "codaUnica",
        "peek",
        "assertTrue",
        "codaUnica",
        "add",
        "assertEquals",
        "codaUnica",
        "peek",
        "secondaCoda",
        "i",
        "i",
        "i",
        "assertTrue",
        "secondaCoda",
        "add",
        "i",
        "assertTrue",
        "codaUnica",
        "addAll",
        "secondaCoda",
        "assertFalse",
        "codaUnica",
        "addAll",
        "secondaCoda",
        "assertTrue",
        "codaUnica",
        "removeAll",
        "secondaCoda",
        "assertFalse",
        "codaUnica",
        "removeAll",
        "secondaCoda"
    ],
    "literals": [
        "\"Unexpected exception!\""
    ],
    "variables": [],
    "comments": [
        "Lanciamo la prima batteria di test",
        "Se arriviamo qui qualcosa Ã¨ andato storto",
        "Iniziamo creando una \"codaUnica\"",
        "Testiamo l'efficacia dal punto di vista della coda",
        "Creiamo una seconda coda con 10 elementi"
    ],
    "docstrings": [
        "* Per la creazione della coda unica abbiamo deciso di sfruttare dei metodi\n\t * primitivi che quindi non andremo a testare.\n\t * Le modifiche sono state effettuate unicamente nella fase di aggiunta e di rimozione\n\t * degli elementi, motivo per il quale i test si concentreranno unicamente su questi metodi",
        "* Continiuamo verificando il corretto funzionamento dei metodi di inserimento\n\t\t * testando l'efficacia dal punto di vista del set",
        "* Continiuamo verificando il corretto funzionamento dei metodi di rimozione\n\t\t * testando l'efficacia dal punto di vista della coda, ossia eliminando un elemento\n\t\t * dalla testa, il secondo elemento diventa la nuova testa anche a seguito di\n\t\t * un'aggiunta",
        "* Verifichiamo il corretto funzionamento dei metodi di inserimento\n\t\t * che restituiranno un booleano true in caso venga aggiunto anche \n\t\t * solo un elemento",
        "* Verifichiamo il corretto funzionamento dei metodi di rimozione\n\t\t * che restituiranno un booleano true in caso venga rimosso anche \n\t\t * solo un elemento"
    ],
    "functions": [
        "uniqueQueueTests",
        "generalUniqueQueueTest"
    ],
    "classes": [
        "UniqueQueueTest"
    ]
}