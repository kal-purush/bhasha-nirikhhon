{
    "identifiers": [
        "components",
        "components",
        "Set1L",
        "components",
        "simplereader",
        "SimpleReader",
        "components",
        "simplereader",
        "SimpleReader1L",
        "components",
        "simplewriter",
        "SimpleWriter",
        "components",
        "simplewriter",
        "SimpleWriter1L",
        "sepStr",
        "sepSet",
        "sepStr",
        "sepSet",
        "sepSet",
        "clear",
        "i",
        "i",
        "sepStr",
        "length",
        "i",
        "sepSet",
        "contains",
        "sepStr",
        "charAt",
        "i",
        "sepSet",
        "add",
        "sepStr",
        "charAt",
        "i",
        "text",
        "position",
        "sepSet",
        "text",
        "position",
        "position",
        "text",
        "length",
        "isSep",
        "sepSet",
        "contains",
        "text",
        "charAt",
        "position",
        "i",
        "position",
        "i",
        "text",
        "length",
        "isSep",
        "sepSet",
        "contains",
        "text",
        "charAt",
        "i",
        "i",
        "text",
        "substring",
        "position",
        "i",
        "candidate",
        "solution",
        "status",
        "i",
        "i",
        "candidate",
        "length",
        "i",
        "candidate",
        "charAt",
        "i",
        "solution",
        "charAt",
        "i",
        "status",
        "status",
        "solution",
        "indexOf",
        "candidate",
        "charAt",
        "i",
        "status",
        "status",
        "status",
        "status",
        "status",
        "wordsLeft",
        "wordsLeft",
        "maxPoss",
        "numPoss",
        "min",
        "maxPoss",
        "wordsLeft",
        "size",
        "wordsLeft",
        "size",
        "wordsLeft",
        "size",
        "numPoss",
        "wordsLeft",
        "size",
        "temp",
        "wordsLeft",
        "newInstance",
        "temp",
        "size",
        "numPoss",
        "removed",
        "wordsLeft",
        "removeAny",
        "temp",
        "add",
        "removed",
        "removed",
        "temp",
        "size",
        "removed",
        "temp",
        "removeAny",
        "wordsLeft",
        "add",
        "removed",
        "wordsLeft",
        "size",
        "wordsLeft",
        "removeAny",
        "index",
        "letter",
        "status",
        "wordsLeft",
        "wordsLeft",
        "eliminated",
        "wordsLeft",
        "size",
        "wordBank",
        "wordsLeft",
        "newInstance",
        "wordBank",
        "transferFrom",
        "wordsLeft",
        "status",
        "wordBank",
        "size",
        "candidate",
        "wordBank",
        "removeAny",
        "candidate",
        "indexOf",
        "letter",
        "wordsLeft",
        "add",
        "candidate",
        "wordBank",
        "size",
        "candidate",
        "wordBank",
        "removeAny",
        "candidate",
        "indexOf",
        "letter",
        "candidate",
        "indexOf",
        "letter",
        "index",
        "wordsLeft",
        "add",
        "candidate",
        "wordBank",
        "size",
        "candidate",
        "wordBank",
        "removeAny",
        "candidate",
        "charAt",
        "index",
        "letter",
        "wordsLeft",
        "add",
        "candidate",
        "eliminated",
        "wordsLeft",
        "size",
        "eliminated",
        "word",
        "status",
        "wordsLeft",
        "eliminated",
        "i",
        "i",
        "word",
        "length",
        "i",
        "eliminated",
        "eliminateWordsFromChar",
        "i",
        "word",
        "charAt",
        "i",
        "status",
        "charAt",
        "i",
        "wordsLeft",
        "eliminated",
        "word",
        "wordsLeft",
        "wordsLeft",
        "sumEliminated",
        "origWordsLeft",
        "wordsLeft",
        "newInstance",
        "wordsLeftArray",
        "wordsLeft",
        "size",
        "wordNum",
        "wordsLeft",
        "origWordsLeft",
        "add",
        "wordsLeftArray",
        "wordNum",
        "wordNum",
        "i",
        "i",
        "wordsLeftArray",
        "length",
        "i",
        "possibleSolution",
        "wordsLeftArray",
        "i",
        "status",
        "generateStatus",
        "word",
        "possibleSolution",
        "sumEliminated",
        "eliminateWords",
        "word",
        "status",
        "wordsLeft",
        "origWordsLeft",
        "wordsLeft",
        "contains",
        "wordsLeft",
        "add",
        "round",
        "sumEliminated",
        "wordsLeft",
        "size",
        "wordsLeft",
        "wordsLeft",
        "origWordsLeft",
        "wordsLeft",
        "newInstance",
        "wordsLeftArray",
        "wordsLeft",
        "size",
        "wordNum",
        "wordsLeft",
        "origWordsLeft",
        "add",
        "wordsLeftArray",
        "wordNum",
        "wordNum",
        "bestGuess",
        "maxAvg",
        "avg",
        "i",
        "i",
        "wordsLeftArray",
        "length",
        "i",
        "possibleGuess",
        "wordsLeftArray",
        "i",
        "avg",
        "avgWordsEliminated",
        "possibleGuess",
        "wordsLeft",
        "avg",
        "maxAvg",
        "maxAvg",
        "avg",
        "bestGuess",
        "possibleGuess",
        "bestGuess",
        "bestGuess",
        "args",
        "wordleDay",
        "guessNum",
        "dicWords",
        "allWords",
        "line",
        "allWords",
        "nextLine",
        "sepStr",
        "sepSet",
        "generateElements",
        "sepStr",
        "sepSet",
        "oldWords",
        "wordsLeft",
        "allFiveLetterWords",
        "pos",
        "pos",
        "line",
        "length",
        "token",
        "nextWordOrSeparator",
        "line",
        "pos",
        "sepSet",
        "sepSet",
        "contains",
        "token",
        "charAt",
        "oldWords",
        "size",
        "wordleDay",
        "oldWords",
        "add",
        "token",
        "wordsLeft",
        "add",
        "token",
        "allFiveLetterWords",
        "add",
        "token",
        "pos",
        "token",
        "length",
        "dicWords",
        "atEOS",
        "token",
        "dicWords",
        "nextLine",
        "allFiveLetterWords",
        "contains",
        "token",
        "allFiveLetterWords",
        "add",
        "token",
        "wordsLeft",
        "size",
        "eliminated",
        "guessNum",
        "word",
        "nextLine",
        "status",
        "nextLine",
        "eliminated",
        "eliminateWords",
        "word",
        "status",
        "wordsLeft",
        "eliminated",
        "printRemainingPossibilities",
        "wordsLeft",
        "wordsLeft",
        "size",
        "printBestNextGuess",
        "wordsLeft",
        "guessNum",
        "guessNum",
        "allWords",
        "close",
        "close",
        "close"
    ],
    "literals": [
        "\"Violation of: str is not null\"",
        "\"Violation of: charSet is not null\"",
        "\"Violation of: text is not null\"",
        "\"Violation of: 0 <= position\"",
        "\"Violation of: position < |text|\"",
        "\"\"",
        "\"Violation of: text is not null\"",
        "\"Violation of: wordsLeft is not null\"",
        "\"Remaining possiblities: \"",
        "\"\\n\"",
        "\" possibilities (of \"",
        "\"): \"",
        "\"\\t\"",
        "\"\\n--------------------------------------------\\n\"",
        "\"ONE POSSIBILITY REMAINING!!\"",
        "\"\\n\\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$'               `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  \\r\\n\"",
        "\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$'                   `$$$$$$$$$$$$$$$$$$$$$$$$$$$$\\r\\n\"",
        "\"$$$'`$$$$$$$$$$$$$'`$$$$$$!                       !$$$$$$'`$$$$$$$$$$$$$'`$$$\\r\\n\"",
        "\"$$$$  $$$$$$$$$$$  $$$$$$$                         $$$$$$$  $$$$$$$$$$$  $$$$\\r\\n\"",
        "\"$$$$. `$' \\\\' \\\\$`  $$$$$$$!                         !$$$$$$$  '$/ `/ `$' .$$$$\\r\\n\"",
        "\"$$$$$. !\\\\  i  i .$$$$$$$$                           $$$$$$$$. i  i  /! .$$$$$\\r\\n\"",
        "\"$$$$$$   `--`--.$$$$$$$$$                           $$$$$$$$$.--'--'   $$$$$$\\r\\n\"",
        "\"$$$$$$L        `$$$$$^^$$                           $$^^$$$$$'        J$$$$$$\\r\\n\"",
        "\"$$$$$$$.   .'   \\\"\\\"~   $$$    $.                 .$  $$$   ~\\\"\\\"   `.   .$$$$$$$\\r\\n\"",
        "\"$$$$$$$$.  ;      .e$$$$$!    $$.             .$$  !$$$$$e,      ;  .$$$$$$$$\\r\\n\"",
        "\"$$$$$$$$$   `.$$$$$$$$$$$$     $$$.         .$$$   $$$$$$$$$$$$.'   $$$$$$$$$\\r\\n\"",
        "\"$$$$$$$$    .$$$$$$$$$$$$$!     $$`$$$$$$$$'$$    !$$$$$$$$$$$$$.    $$$$$$$$\\r\\n\"",
        "\"$$$$$$$     $$$$$$$$$$$$$$$$.    $    $$    $   .$$$$$$$$$$$$$$$$     $$$$$$$\\r\\n\"",
        "\"                                 $    $$    $\\r\\n\"",
        "\"                                 $.   $$   .$\\r\\n\"",
        "\"                                 `$        $'\\r\\n\"",
        "\"                                  `$$$$$$$$'\"",
        "\"\\nSOLUTION: \"",
        "\"Remaining possiblities: 0\"",
        "\"Hmm... are you sure you're playing today's Wordle?\"",
        "\"Violation of: wordsLeft is not null\"",
        "\"Violation of: wordsLeft is not null\"",
        "\"Violation of: wordsLeft is not null\"",
        "\"\"",
        "\"BEST NEXT GUESS: \"",
        "\"data/dictionaryWords.txt\"",
        "\"data/allWords.txt\"",
        "\" ,\\\"\\'\\n\"",
        "\"Hello! Welcome to the Wordle Solver. Enter your first guess below...\\n\"",
        "\"BEST NEXT GUESS: raise\"",
        "\"Enter word (guess #\"",
        "\"): \"",
        "\"\\nStatus Codes ~\"",
        "\"\\tNot In Word - r\\n\\tElsewhere - y\\n\\tCorrect - g\"",
        "\"\\nEnter status (ex: rgyry): \"",
        "\"\\n*** Calculating ***\\n\"",
        "\" words eliminated.\"",
        "\"GUESSES NEEDED: \""
    ],
    "variables": [
        "avg"
    ],
    "comments": [
        "Clear the character set",
        "Add every (unique) character in the string to the set",
        "Only add the character if it isn't already in the set",
        "Stores whether the first character is a separator or not",
        "Begin iterating after the first character",
        "As long as the current character matches the first character's state",
        "(separator or not a separator), continue looking through characters",
        "Number of possibilities to print",
        "Print possibilities, storing removed words in temp",
        "Transfer words from temp back to wordsLeft",
        "Transfer all words to wordBank",
        "Remove all words with the letter",
        "If candidate doesn't contain the letter, add it back",
        "Remove all words without the letter, or with letter at that position",
        "If candidate contains the letter, add it back",
        "Remove all words without the letter in specific position",
        "If candidate has letter at specific position, add it back",
        "Create copy of wordsLeft, and array",
        "Iterates through every possible solution",
        "Sum of words eliminated for each possible solution",
        "Restore wordsLeft",
        "Create copy of wordsLeft, and array",
        "out.println(avg);",
        "Queue<Map.Pair<String, Integer>> guesses = new Queue1L<Map.Pair<String, Integer>>();",
        "// Iterates through every possible next guess (wordsLeft)",
        "for (int i = 0; i < wordsLeft.size(); i++) {",
        "String possibleGuess = wordsLeft.removeAny();",
        "sumEliminated += eliminateWords(word, status, wordsLeft);",
        "}",
        "",
        "Can increase, in case user would like eliminate past words",
        "Keep track of number of guesses",
        "DICTIONARY",
        "Open allWords file",
        "Create separator set",
        "Old words - populate with past Wordle words",
        "New words",
        "All five-letter words - include words outside of the Wordle word bank",
        "Put this in function getPossibleWords();",
        "Token will either be a word or separator",
        "If the token is a word",
        "Add word to either oldWords or newWords",
        "Greet user",
        "Ask for word",
        "Ask for character info",
        "Eliminate words using characters' hints",
        "Print guesses used"
    ],
    "docstrings": [
        "* Put a short phrase describing the program here.\n *\n * @author Jessie Kong\n *",
        "* Private constructor so this utility class cannot be instantiated.",
        "* Generates the set of characters in the given {@code String} into the\n     * given {@code Set}.\n     *\n     * @param sepStr\n     *            the given {@code String}\n     * @param sepSet\n     *            the {@code Set} to be replaced\n     * @replaces charSet\n     * @ensures charSet = entries(sepStr)",
        "* Returns the first \"word\" (maximal length string of characters not in\n     * {@code separators}) or \"separator string\" (maximal length string of\n     * characters in {@code separators}) in the given {@code text} starting at\n     * the given {@code position}.\n     *\n     * @param text\n     *            the {@code String} from which to get the word or separator\n     *            string\n     * @param position\n     *            the starting index\n     * @param sepSet\n     *            the {@code Set} of separator characters\n     * @return the first word or separator string found in {@code text} starting\n     *         at index {@code position}\n     * @requires 0 <= position < |text|\n     * @ensures <pre>\n     * nextWordOrSeparator =\n     *   text[position, position + |nextWordOrSeparator|)  and\n     * if entries(text[position, position + 1)) intersection separators = {}\n     * then\n     *   entries(nextWordOrSeparator) intersection separators = {}  and\n     *   (position + |nextWordOrSeparator| = |text|  or\n     *    entries(text[position, position + |nextWordOrSeparator| + 1))\n     *      intersection separators /= {})\n     * else\n     *   entries(nextWordOrSeparator) is subset of separators  and\n     *   (position + |nextWordOrSeparator| = |text|  or\n     *    entries(text[position, position + |nextWordOrSeparator| + 1))\n     *      is not subset of separators)\n     * </pre>",
        "* Creates string of status codes given candidate and true solution.\n     *\n     * @param candidate\n     *            possible word\n     * @param solution\n     *            correct word\n     *\n     * @return string of status codes",
        "* Prints number of remaining possible words.\n     *\n     * @param out\n     *            stream to print\n     * @param wordsLeft\n     *            the {@code Set} of remaining possible words\n     *",
        "* Eliminates words given a character's index and status.\n     *\n     * @param index\n     *            position of character in word\n     * @param letter\n     *            the character\n     * @param status\n     *            relationship between character and word (either r, y, or g)\n     * @param wordsLeft\n     *            the {@code Set} of remaining possible words\n     * @return number of words eliminated",
        "* Eliminates words given a word and its status string.\n     *\n     * @param word\n     *            the guess\n     * @param status\n     *            string of codes (characters: r, y, or g)\n     * @param wordsLeft\n     *            the {@code Set} of remaining possible words\n     * @return number of words eliminated",
        "* Calculates the number of words the candidate elimianted on average.\n     *\n     * @param word\n     *            candidate\n     * @param wordsLeft\n     *            the {@code Set} of remaining possible words\n     * @return average number of words eliminated",
        "* Determines word that eliminates most words on average.\n     *\n     * @param wordsLeft\n     *            the {@code Set} of remaining possible words\n     * @param out\n     *            output stream\n     * @return average number of words eliminated",
        "* Main method.\n     *\n     * @param args\n     *            the command line arguments",
        "* Test every possible word and words remaining Find average number of\n         * guesses eliminated (1.0/wordsLeft.size * (# eliminated) Best word:\n         * highest avg",
        "* Close input and output streams"
    ],
    "functions": [
        "WordleSolver",
        "generateElements",
        "nextWordOrSeparator",
        "generateStatus",
        "printRemainingPossibilities",
        "eliminateWordsFromChar",
        "eliminateWords",
        "avgWordsEliminated",
        "printBestNextGuess",
        "main"
    ],
    "classes": [
        "WordleSolver"
    ]
}