{
    "identifiers": [
        "data",
        "left",
        "right",
        "data",
        "left",
        "right",
        "left",
        "right",
        "root",
        "root",
        "root",
        "node",
        "isLeaf",
        "node",
        "data",
        "end",
        "node",
        "left",
        "node",
        "left",
        "node",
        "right",
        "root",
        "root",
        "root",
        "isLeaf",
        "printRightBoundary",
        "root",
        "right",
        "root",
        "right",
        "root",
        "left",
        "root",
        "data",
        "end",
        "root",
        "root",
        "printLeafNodes",
        "root",
        "left",
        "root",
        "isLeaf",
        "root",
        "data",
        "end",
        "printLeafNodes",
        "root",
        "right",
        "root",
        "root",
        "root",
        "data",
        "end",
        "printLeftBoundary",
        "root",
        "left",
        "root",
        "isLeaf",
        "printLeafNodes",
        "root",
        "printRightBoundary",
        "root",
        "right",
        "Node",
        "Node",
        "Node",
        "root",
        "left",
        "Node",
        "root",
        "left",
        "Node",
        "root",
        "right",
        "Node",
        "root",
        "right",
        "Node",
        "root",
        "left",
        "left",
        "Node",
        "root",
        "left",
        "left",
        "Node",
        "root",
        "left",
        "right",
        "Node",
        "root",
        "right",
        "right",
        "Node",
        "root",
        "left",
        "left",
        "right",
        "Node",
        "root",
        "left",
        "left",
        "right",
        "Node",
        "root",
        "right",
        "right",
        "left",
        "Node",
        "performBoundaryTraversal",
        "root"
    ],
    "literals": [
        "' '",
        "' '",
        "' '",
        "' '",
        "'__main__'"
    ],
    "variables": [
        "data",
        "left",
        "right",
        "node",
        "node",
        "root",
        "root",
        "left",
        "root",
        "right",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "right",
        "left",
        "left",
        "right",
        "left"
    ],
    "comments": [
        "https://www.techiedelight.com/boundary-traversal-binary-tree/",
        "A class to store a binary tree node",
        "Utility function to check if a given node is a leaf node",
        "Recursive function to print the left boundary of the given binary tree",
        "in a top-down fashion, except for the leaf nodes",
        "base case: root is empty",
        "do for all non-leaf nodes",
        "print the current node",
        "next process, the left child of `root` if it exists;",
        "otherwise, move to the right child",
        "Recursive function to print the right boundary of the given binary tree",
        "in a bottom-up fashion, except for the leaf nodes",
        "base case: root is empty, or root is a leaf node",
        "recur for the right child of `root` if it exists;",
        "otherwise, recur for the left child",
        "To ensure bottom-up order, print the value of the nodes",
        "after recursion unfolds",
        "Recursive function to print the leaf nodes of the given",
        "binary tree in an inorder fashion",
        "base case",
        "recur for the left subtree",
        "print only leaf nodes",
        "recur for the right subtree",
        "Function to perform the boundary traversal on a given tree",
        "base case",
        "print the root node",
        "print the left boundary (except leaf nodes)",
        "print all leaf nodes",
        "print the right boundary (except leaf nodes)",
        "construct a binary tree as per the above diagram"
    ],
    "docstrings": [],
    "functions": [
        "isLeaf",
        "printLeftBoundary",
        "printRightBoundary",
        "printLeafNodes",
        "performBoundaryTraversal"
    ],
    "classes": [
        "Node"
    ]
}