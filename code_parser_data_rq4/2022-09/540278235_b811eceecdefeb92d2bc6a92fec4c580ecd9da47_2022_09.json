{
    "identifiers": [
        "torch",
        "numpy",
        "np",
        "learnableToken",
        "sp_indice",
        "batch_p",
        "batch_h",
        "mask_p",
        "mask_h",
        "learnableToken",
        "sp_indice",
        "mask_p",
        "unsqueeze",
        "expand_as",
        "batch_p",
        "learnableToken",
        "sp_indice",
        "mask_h",
        "unsqueeze",
        "expand_as",
        "batch_h",
        "mask_p_convert",
        "l_p",
        "batch_p",
        "mask_h_convert",
        "l_h",
        "batch_h",
        "data",
        "batch_size",
        "phase",
        "c_ratio",
        "concat",
        "mean_agg_unalign",
        "no_unalign",
        "mean_agg_unalign",
        "mean_agg_unalign",
        "batch_size",
        "data",
        "len",
        "data",
        "phase",
        "c_ratio",
        "concat",
        "no_unalign",
        "len",
        "data",
        "shuffle",
        "shuffle",
        "np",
        "random",
        "shuffle",
        "data",
        "embeddings1",
        "embeddings2",
        "pos",
        "indice_c1",
        "indice_c2",
        "len",
        "embeddings1",
        "len",
        "embeddings2",
        "no_unalign",
        "len",
        "pos",
        "length1",
        "length2",
        "len",
        "pos",
        "concat",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "unmask_length",
        "item",
        "pos",
        "torch",
        "zeros",
        "length1",
        "torch",
        "zeros",
        "length2",
        "item",
        "item",
        "torch",
        "mm",
        "helper_tensor_p",
        "embeddings1",
        "torch",
        "mm",
        "helper_tensor_h",
        "embeddings2",
        "i_p",
        "i_h",
        "no_unalign",
        "i",
        "indice_c1",
        "torch",
        "zeros",
        "length1",
        "torch",
        "mm",
        "helper_tensor_p",
        "embeddings1",
        "i_p",
        "i_h",
        "i",
        "indice_c2",
        "torch",
        "zeros",
        "length2",
        "torch",
        "mm",
        "helper_tensor_h",
        "embeddings2",
        "i_p",
        "i_h",
        "tensors_p",
        "tensors_h",
        "mask",
        "p_token_mask",
        "h_token_mask",
        "embeddings1",
        "embeddings2",
        "pos",
        "indice_c1",
        "indice_c2",
        "len",
        "embeddings1",
        "len",
        "embeddings2",
        "no_unalign",
        "len",
        "indice_c1",
        "len",
        "indice_c2",
        "len",
        "pos",
        "has_c1",
        "has_c2",
        "concat",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "torch",
        "zeros",
        "max_length",
        "unmask_length",
        "item",
        "pos",
        "torch",
        "zeros",
        "length1",
        "torch",
        "zeros",
        "length2",
        "item",
        "item",
        "torch",
        "mm",
        "helper_tensor_p",
        "embeddings1",
        "torch",
        "mm",
        "helper_tensor_h",
        "embeddings2",
        "i_p",
        "i_h",
        "no_unalign",
        "len",
        "indice_c1",
        "i",
        "indice_c1",
        "torch",
        "zeros",
        "length1",
        "mean_unaligned_p",
        "append",
        "torch",
        "mm",
        "helper_tensor_p",
        "embeddings1",
        "torch",
        "stack",
        "mean_unaligned_p",
        "mean",
        "dim",
        "mean_unaligned_p",
        "i_p",
        "i_h",
        "len",
        "indice_c2",
        "i",
        "indice_c2",
        "torch",
        "zeros",
        "length2",
        "mean_unaligned_h",
        "append",
        "torch",
        "mm",
        "helper_tensor_h",
        "embeddings2",
        "torch",
        "stack",
        "mean_unaligned_h",
        "mean",
        "dim",
        "mean_unaligned_h",
        "tensors_p",
        "tensors_h",
        "mask",
        "p_token_mask",
        "h_token_mask",
        "epoch_reset",
        "shuffle",
        "phase",
        "pos",
        "length_data",
        "i",
        "batch_size",
        "data",
        "pos",
        "item",
        "item",
        "item",
        "item",
        "item",
        "item",
        "phase",
        "ii",
        "pos",
        "aligned",
        "append",
        "c_p",
        "ii",
        "c_h",
        "ii",
        "ii",
        "indice_c1",
        "p_unaligned",
        "append",
        "c_p",
        "ii",
        "ii",
        "indice_c2",
        "h_unaligned",
        "append",
        "c_h",
        "ii",
        "indice",
        "append",
        "this_id",
        "aligned_text",
        "append",
        "aligned",
        "p_unaligned",
        "h_unaligned",
        "concat",
        "torch",
        "cat",
        "torch",
        "from_numpy",
        "item",
        "torch",
        "from_numpy",
        "item",
        "torch",
        "cat",
        "torch",
        "from_numpy",
        "item",
        "torch",
        "from_numpy",
        "item",
        "c_ratio",
        "torch",
        "from_numpy",
        "item",
        "torch",
        "from_numpy",
        "item",
        "c_ratio",
        "torch",
        "from_numpy",
        "item",
        "torch",
        "from_numpy",
        "item",
        "torch",
        "from_numpy",
        "item",
        "c_ratio",
        "torch",
        "from_numpy",
        "item",
        "c_ratio",
        "torch",
        "from_numpy",
        "item",
        "c_ratio",
        "torch",
        "from_numpy",
        "item",
        "c_ratio",
        "item",
        "mean_agg_unalign",
        "aggregate_mean_unalign",
        "embeddings1",
        "embeddings2",
        "pos",
        "indice_c1",
        "indice_c2",
        "aggregate",
        "embeddings1",
        "embeddings2",
        "pos",
        "indice_c1",
        "indice_c2",
        "result_tensors_p",
        "append",
        "tensors_p",
        "result_tensors_h",
        "append",
        "tensors_h",
        "masks",
        "append",
        "mask",
        "p_token_masks",
        "append",
        "p_token_mask",
        "h_token_masks",
        "append",
        "h_token_mask",
        "labels",
        "append",
        "torch",
        "LongTensor",
        "label",
        "pos",
        "pos",
        "length_data",
        "torch",
        "stack",
        "result_tensors_p",
        "torch",
        "stack",
        "result_tensors_h",
        "torch",
        "stack",
        "masks",
        "torch",
        "stack",
        "p_token_masks",
        "torch",
        "stack",
        "h_token_masks",
        "torch",
        "cat",
        "labels",
        "aligned_text",
        "indice"
    ],
    "literals": [
        "'train'",
        "'id'",
        "'c_p'",
        "'c_h'",
        "'p_not_aligned'",
        "'h_not_aligned'",
        "'p_h_aligned'",
        "'test'",
        "'ccem1'",
        "'cem1'",
        "'ccem2'",
        "'cem2'",
        "'ccem1'",
        "'ccem2'",
        "'cem1'",
        "'cem2'",
        "'ccem1'",
        "'cem1'",
        "'ccem2'",
        "'cem2'",
        "'label'"
    ],
    "variables": [
        "l_p",
        "mask_p_convert",
        "l_h",
        "mask_h_convert",
        "mean_agg_unalign",
        "max_length",
        "max_length",
        "batch_size",
        "data",
        "length_data",
        "phase",
        "c_ratio",
        "concat",
        "pos",
        "no_unalign",
        "pos",
        "length1",
        "length2",
        "unmask_length",
        "unmask_length",
        "tensors_p",
        "tensors_h",
        "tensors_p",
        "tensors_h",
        "p_token_mask",
        "h_token_mask",
        "mask",
        "mask",
        "i_p",
        "i_h",
        "helper_tensor_p",
        "helper_tensor_h",
        "helper_tensor_p",
        "helper_tensor_h",
        "tensors_p",
        "i_p",
        "tensors_h",
        "i_h",
        "helper_tensor_p",
        "helper_tensor_p",
        "i",
        "tensors_p",
        "i_p",
        "h_token_mask",
        "i_h",
        "helper_tensor_h",
        "helper_tensor_h",
        "i",
        "tensors_h",
        "i_h",
        "p_token_mask",
        "i_p",
        "length1",
        "length2",
        "has_c1",
        "has_c2",
        "has_c1",
        "has_c2",
        "unmask_length",
        "tensors_p",
        "tensors_h",
        "tensors_p",
        "tensors_h",
        "p_token_mask",
        "h_token_mask",
        "mask",
        "mask",
        "i_p",
        "i_h",
        "helper_tensor_p",
        "helper_tensor_h",
        "helper_tensor_p",
        "helper_tensor_h",
        "tensors_p",
        "i_p",
        "tensors_h",
        "i_h",
        "mean_unaligned_p",
        "helper_tensor_p",
        "helper_tensor_p",
        "i",
        "mean_unaligned_p",
        "tensors_p",
        "i_p",
        "h_token_mask",
        "i_h",
        "mean_unaligned_h",
        "helper_tensor_h",
        "helper_tensor_h",
        "i",
        "mean_unaligned_h",
        "tensors_h",
        "i_h",
        "p_token_mask",
        "i_p",
        "aligned_text",
        "result_tensors_p",
        "result_tensors_h",
        "masks",
        "p_token_masks",
        "h_token_masks",
        "labels",
        "indice",
        "item",
        "this_id",
        "c_p",
        "c_h",
        "indice_c1",
        "indice_c2",
        "pos",
        "aligned",
        "p_unaligned",
        "h_unaligned",
        "embeddings1",
        "embeddings2",
        "embeddings1",
        "embeddings2",
        "embeddings1",
        "embeddings2",
        "embeddings1",
        "embeddings2",
        "label",
        "tensors_p",
        "tensors_h",
        "mask",
        "p_token_mask",
        "h_token_mask",
        "tensors_p",
        "tensors_h",
        "mask",
        "p_token_mask",
        "h_token_mask"
    ],
    "comments": [
        "print(helper_tensor_p.shape, embeddings1.shape, torch.mm(helper_tensor_p, embeddings1).shape)",
        "tensors_h[i_h, :] = self.sp_embeddings(1)",
        "tensors_p[i_p, :] = self.sp_embeddings(0)",
        "print(helper_tensor_p.shape, embeddings1.shape, torch.mm(helper_tensor_p, embeddings1).shape)",
        "---------------------------------------------------------------------------",
        "random aligner",
        "np.random.seed(i)",
        "aligned_length = len(pos)",
        "indice_c1 = np.arange(0, len(c_p)).tolist()",
        "indice_c2 = np.arange(0, len(c_h)).tolist()",
        "np.random.seed(i)",
        "a = np.random.choice(indice_c1, size=aligned_length, replace=False)",
        "np.random.seed(i)",
        "b = np.random.choice(indice_c2, size=aligned_length, replace=False)",
        "pos = []",
        "for i in range(aligned_length):",
        "pos.append((a[i], b[i]))",
        "for ii in pos:",
        "indice_c1.remove(ii[0])",
        "indice_c2.remove(ii[1])",
        "---------------------------------------------------------------------------",
        "labels.append(torch.LongTensor([label]) * torch.ones([self.max_length]).long())",
        "yield torch.stack(result_tensors_p), torch.stack(result_tensors_h), torch.stack(masks), torch.stack(p_token_masks), torch.stack(h_token_masks), torch.stack(labels), aligned_text, indice"
    ],
    "docstrings": [],
    "functions": [
        "insert_embedding_to_batch",
        "__len__",
        "epoch_reset",
        "aggregate",
        "aggregate_mean_unalign",
        "get_batch"
    ],
    "classes": [
        "DataLoader"
    ]
}