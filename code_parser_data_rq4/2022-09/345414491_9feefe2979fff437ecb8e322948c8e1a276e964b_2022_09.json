{
    "identifiers": [
        "json",
        "sys",
        "requests",
        "re",
        "typing",
        "Optional",
        "cryptography",
        "hazmat",
        "primitives",
        "asymmetric",
        "utils",
        "crypto",
        "cryptography",
        "hazmat",
        "primitives",
        "asymmetric",
        "ec",
        "cryptography",
        "hazmat",
        "primitives",
        "hashes",
        "hashlib",
        "user_id",
        "user_id",
        "address",
        "pub_key",
        "value",
        "signature",
        "address",
        "pub_key",
        "signature",
        "value",
        "user",
        "ENDPOINT",
        "user",
        "requests",
        "request",
        "url",
        "headers",
        "HEADERS",
        "json",
        "re",
        "findall",
        "result",
        "url",
        "Optional",
        "VerificationData",
        "requests",
        "request",
        "url",
        "headers",
        "HEADERS",
        "json",
        "validate_json",
        "result",
        "VerificationData",
        "result",
        "result",
        "result",
        "result",
        "ValueError",
        "json",
        "all",
        "key",
        "json",
        "key",
        "data",
        "VerificationData",
        "len",
        "data",
        "signature",
        "data",
        "signature",
        "data",
        "signature",
        "crypto",
        "encode_dss_signature",
        "r",
        "s",
        "ec",
        "EllipticCurvePublicKey",
        "from_encoded_point",
        "ec",
        "SECP256K1",
        "fromhex",
        "data",
        "pub_key",
        "public_key",
        "verify",
        "sig",
        "fromhex",
        "data",
        "value",
        "ec",
        "ECDSA",
        "hashes",
        "SHA256",
        "data",
        "VerificationData",
        "hashlib",
        "fromhex",
        "data",
        "pub_key",
        "digest",
        "hashlib",
        "s",
        "digest",
        "data",
        "address",
        "upper",
        "r",
        "hex",
        "upper",
        "values",
        "CallData",
        "values",
        "CallData",
        "values",
        "args",
        "fromhex",
        "args",
        "json",
        "loads",
        "decoded",
        "check_values",
        "json_obj",
        "get_urls_from_description",
        "call_data",
        "user_id",
        "len",
        "urls",
        "call_data",
        "user_id",
        "url",
        "urls",
        "get_signature_from_url",
        "url",
        "result",
        "result",
        "data",
        "call_data",
        "user_id",
        "verify_signature",
        "data",
        "signature_valid",
        "verify_address",
        "data",
        "address_valid",
        "data",
        "value",
        "data",
        "signature",
        "call_data",
        "user_id",
        "main",
        "sys",
        "argv",
        "e",
        "e",
        "file",
        "sys",
        "stderr",
        "sys",
        "exit"
    ],
    "literals": [
        "\"https://themis.morpheus.desmos.network/youtube\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "f\"{ENDPOINT}/users/{user}\"",
        "\"GET\"",
        "r'(https?://[^\\s]+)'",
        "'description'",
        "\"GET\"",
        "'address'",
        "'pub_key'",
        "'value'",
        "'signature'",
        "'value'",
        "'pub_key'",
        "'signature'",
        "'address'",
        "\"sha256\"",
        "\"ripemd160\"",
        "\"user_id\"",
        "\"Missing 'user_id' value\"",
        "\"user_id\"",
        "f\"No URL found inside {call_data.user_id} description\"",
        "f\"No valid signature data found inside {call_data.user_id} description\"",
        "\"Invalid signature\"",
        "\"Invalid address\"",
        "f\"{data.value},{data.signature},{call_data.user_id}\"",
        "\"__main__\""
    ],
    "variables": [
        "ENDPOINT",
        "HEADERS",
        "user_id",
        "address",
        "pub_key",
        "signature",
        "value",
        "url",
        "result",
        "result",
        "r",
        "s",
        "sig",
        "public_key",
        "s",
        "r",
        "decoded",
        "json_obj",
        "call_data",
        "urls",
        "data",
        "result",
        "data",
        "signature_valid",
        "address_valid"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Create signature for dss signature",
        "Create public key instance",
        "Verify the signature",
        "Get the URLs to check from the user description",
        "Find the signature following the URLs",
        "Verify the signature",
        "Verify the address"
    ],
    "docstrings": [
        "\"\"\"\n    Contains the data that has been used to call the script\n    \"\"\"",
        "\"\"\"\n    Contains the data needed to verify the proof submitted by the user.\n    \"\"\"",
        "\"\"\"\n    Returns all the URLs that are found inside the description of the user having the given user id.\n    :param user: Login name of the Youtube user.\n    :return: List of URLs that are found inside the description\n    \"\"\"",
        "\"\"\"\n    Tries getting the signature object linked to the given URL.\n    :param url: URL that should contain the signature object.\n    :return: A dictionary containing 'valid' to tell whether the search was valid, and an optional 'data' containing\n    the signature object.\n    \"\"\"",
        "\"\"\"\n    Tells whether or not the given JSON is a valid signature JSON object.\n    :param json: JSON object to be checked.\n    :return: True if the provided JSON has a valid signature schema, or False otherwise.\n    \"\"\"",
        "\"\"\"\n    Verifies the signature using the given pubkey and value.\n    :param data: Data used to verify the signature.\n    :return True if the signature is valid, False otherwise\n    \"\"\"",
        "\"\"\"\n    Verifies that the given address is the one associated with the provided HEX encoded compact public key.\n    :param data: Data used to verify the address\n    \"\"\"",
        "\"\"\"\n    Checks the validity of the given dictionary making sure it contains the proper data.\n    :param values: Dictionary that should be checked.\n    :return: A CallData instance.\n    \"\"\"",
        "\"\"\"\n    Gets the signature data from Youtube reading it from a description.\n\n    :param args Hex encoded JSON object containing the arguments to be used during the execution.\n    In order to be valid, the encoded JSON object must contain a field named \"user_id\" that represents the\n    Youtube user id of the user to be verified.\n\n    The link must be public and its content must be a JSON object formed as follows:\n\n    ```json\n    {\n      \"address\": \"Hex encoded address of the signer\",\n      \"pub_key\": \"Hex encoded public key that has been used to sign the value\",\n      \"value\": \"Hex encoded value that has been signed\",\n      \"signature\": \"Hex encoded Secp256k1 signature\"\n    }\n    ```\n\n    Example argument value:\n    7B22757365726E616D65223A2272616E646F6D75736572227D\n\n    This is the hex encoded representation of the following JSON object:\n\n    ```json\n    {\n      \"user_id\":\"randomuser\"\n    }\n    ```\n\n    :param args: JSON encoded parameters used during the execution.\n    :return The signed value and the signature as a single comma separated string.\n    :raise Exception if anything is wrong during the process. This can happen if:\n            1. The user description does not contain any valid URL that link to a valid signature data object\n            2. The provided signature is not valid\n            3. The provided address is not linked to the provided public key\n    \"\"\""
    ],
    "functions": [
        "get_urls_from_description",
        "get_signature_from_url",
        "validate_json",
        "verify_signature",
        "verify_address",
        "check_values",
        "main"
    ],
    "classes": [
        "CallData",
        "VerificationData"
    ]
}