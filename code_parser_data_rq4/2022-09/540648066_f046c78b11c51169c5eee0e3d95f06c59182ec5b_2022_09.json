{
    "identifiers": [
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Stream",
        "args",
        "add",
        "add",
        "add",
        "add",
        "add",
        "add",
        "stream",
        "s",
        "s",
        "startsWith",
        "forEach",
        "stream",
        "limit",
        "forEach",
        "stream",
        "skip",
        "forEach",
        "stream",
        "skip",
        "limit",
        "forEach",
        "s1",
        "stream",
        "limit",
        "s2",
        "stream",
        "skip",
        "s3",
        "Stream",
        "concat",
        "s1",
        "s2",
        "s3",
        "distinct",
        "forEach",
        "stream",
        "sorted",
        "forEach",
        "stream",
        "sorted",
        "str1",
        "str2",
        "str1",
        "length",
        "str2",
        "length",
        "forEach",
        "stream",
        "sorted",
        "str1",
        "str2",
        "num1",
        "str1",
        "length",
        "str2",
        "length",
        "num2",
        "num1",
        "str1",
        "compareTo",
        "str2",
        "num1",
        "num2",
        "forEach"
    ],
    "literals": [
        "\"Zelda\"",
        "\"Zero\"",
        "\"Moon\"",
        "\"June\"",
        "\"April\"",
        "\"Monica\"",
        "\"Z\"",
        "\"--------\"",
        "\"---------\"",
        "\"-------\"",
        "\"-------\"",
        "\"-------\"",
        "\"-------\"",
        "\"-------\"",
        "\"-------\""
    ],
    "variables": [],
    "comments": [
        "p 391",
        "s3.forEach(System.out::println);"
    ],
    "docstrings": [
        "1.3 stream中间流操作",
        "1. create a arraylist\n            2. add 6 different name into the list\n            3. using filter  to get name start with \"Z\" (s.startsWith())",
        "* q1. 取前3个元素，输出",
        "* q2. 跳过3个元素， 输出剩下的元素",
        "* q3. 跳过2个，把剩下元素中的前2个输出",
        "* q4. 取前4个数据组成一个流， 跳过前2个数据组成一个流， 合成一个新流\n           * 去除重复值",
        "* sorted(), sort element by it's first char;\n           * sorted(Comparator comparator)"
    ],
    "functions": [
        "main"
    ],
    "classes": [
        "App"
    ]
}