{
    "identifiers": [
        "io",
        "micrometer",
        "docs",
        "commons",
        "utils",
        "io",
        "micrometer",
        "common",
        "util",
        "logging",
        "InternalLogger",
        "io",
        "micrometer",
        "common",
        "util",
        "logging",
        "InternalLoggerFactory",
        "io",
        "micrometer",
        "docs",
        "commons",
        "ObservationConventionEntry",
        "org",
        "jboss",
        "forge",
        "roaster",
        "_shade",
        "org",
        "eclipse",
        "jdt",
        "core",
        "dom",
        "Javadoc",
        "org",
        "jboss",
        "forge",
        "roaster",
        "_shade",
        "org",
        "eclipse",
        "jdt",
        "core",
        "dom",
        "TagElement",
        "org",
        "jboss",
        "forge",
        "roaster",
        "_shade",
        "org",
        "eclipse",
        "jdt",
        "core",
        "dom",
        "TextElement",
        "org",
        "jboss",
        "forge",
        "roaster",
        "model",
        "source",
        "JavaDocSource",
        "java",
        "util",
        "java",
        "util",
        "regex",
        "Pattern",
        "java",
        "util",
        "stream",
        "Collectors",
        "java",
        "util",
        "stream",
        "Stream",
        "LOGGER",
        "InternalLoggerFactory",
        "getInstance",
        "NEWLINE",
        "lineSeparator",
        "LINE_BREAK",
        "NEWLINE",
        "PARAGRAPH_BREAK",
        "NEWLINE",
        "NEWLINE",
        "NEWLINE_PATTERN",
        "Pattern",
        "compile",
        "line",
        "assumeLiOrdered",
        "asciidoc",
        "line",
        "replaceAll",
        "PARAGRAPH_BREAK",
        "replaceAll",
        "LINE_BREAK",
        "replaceAll",
        "PARAGRAPH_BREAK",
        "replaceAll",
        "PARAGRAPH_BREAK",
        "replaceAll",
        "replaceAll",
        "replaceAll",
        "NEWLINE",
        "replaceAll",
        "NEWLINE",
        "replaceAll",
        "NEWLINE",
        "replaceAll",
        "NEWLINE",
        "assumeLiOrdered",
        "asciidoc",
        "replaceAll",
        "tagletName",
        "tagletFragments",
        "equals",
        "tagletName",
        "equals",
        "tagletName",
        "tagletFragments",
        "stream",
        "o",
        "o",
        "toString",
        "trim",
        "collect",
        "Collectors",
        "joining",
        "equals",
        "tagletName",
        "equals",
        "tagletName",
        "stream",
        "tagletFragments",
        "stream",
        "o",
        "o",
        "toString",
        "trim",
        "tagletFragments",
        "size",
        "stream",
        "skip",
        "collect",
        "Collectors",
        "joining",
        "stream",
        "collect",
        "Collectors",
        "joining",
        "Stream",
        "concat",
        "Stream",
        "of",
        "tagletName",
        "tagletFragments",
        "stream",
        "o",
        "o",
        "toString",
        "trim",
        "collect",
        "Collectors",
        "joining",
        "javadoc",
        "javadoc",
        "getInternal",
        "javadoc",
        "getText",
        "internalJavadoc",
        "SuppressWarnings",
        "tagList",
        "internalJavadoc",
        "tags",
        "text",
        "openedOrderedList",
        "tagElement",
        "tagList",
        "tagElement",
        "getTagName",
        "fragment",
        "tagElement",
        "fragments",
        "fragment",
        "textElement",
        "fragment",
        "line",
        "textElement",
        "getText",
        "line",
        "contains",
        "line",
        "contains",
        "line",
        "contains",
        "openedOrderedList",
        "line",
        "contains",
        "openedOrderedList",
        "text",
        "append",
        "simpleHtmlToAsciidoc",
        "line",
        "openedOrderedList",
        "text",
        "append",
        "line",
        "append",
        "fragment",
        "tagFragment",
        "fragment",
        "text",
        "append",
        "simpleTagletToAsciidoc",
        "tagFragment",
        "getTagName",
        "tagFragment",
        "fragments",
        "LOGGER",
        "debug",
        "tagElement",
        "trimmed",
        "NEWLINE_PATTERN",
        "splitAsStream",
        "text",
        "line",
        "line",
        "replaceAll",
        "replaceAll",
        "collect",
        "Collectors",
        "joining",
        "lineSeparator",
        "trimmed"
    ],
    "literals": [
        "\" +\"",
        "\"\\\\R\"",
        "\"<p/?>\"",
        "\"<br/?>\"",
        "\"<strong>\"",
        "\"IMPORTANT: \"",
        "\"</strong>\\\\h+\"",
        "\"</?b>\"",
        "\"*\"",
        "\"</?i>\"",
        "\"_\"",
        "\"<ul>\"",
        "\"<ol>\"",
        "\"</[uo]l>\"",
        "\"<li>\"",
        "\" 1. \"",
        "\" - \"",
        "\"<[^<>]*>\"",
        "\"\"",
        "\"@code\"",
        "\"@value\"",
        "\" \"",
        "\"`\"",
        "\"`\"",
        "\"@link\"",
        "\"@linkplain\"",
        "\" \"",
        "\" \"",
        "\"`\"",
        "\"`\"",
        "\" \"",
        "\"`{\"",
        "\"}`\"",
        "\"unchecked\"",
        "\"<\"",
        "\">\"",
        "\"<ul>\"",
        "\"<ol>\"",
        "\"dropped fragment during javadoc to asciidoc parsing: %s\"",
        "\"\\\\h\\\\h+\"",
        "\" \"",
        "\"\\\\h+$\"",
        "\"\""
    ],
    "variables": [],
    "comments": [
        "strip all other tags (closing tags, unknown tags)",
        "render the full taglet as an inline code block",
        "only consider the javadoc description",
        "ignored: SimpleName",
        "inline taglets will be separate fragments. we only care for embedded HTML subset",
        "only reset the li type when explicitly encountering an ol or ul.",
        "note ol takes precedence, and this doesn't really work with nested ol/ul combinations.",
        "we append a space at the end so that javadoc linebreaks in the middle of a simple text translate to a space",
        "second pass on each line to trim undesirable spaces",
        "we don't want multiple spaces in a row",
        "we don't want trailing whitespaces, trim() doesn't work because we do want leading space when relevant"
    ],
    "docstrings": [
        "* Copyright 2022 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Utilities to parse javadoc fragments in various form (String, modelling objects) to asciidoc strings."
    ],
    "functions": [
        "simpleHtmlToAsciidoc",
        "simpleTagletToAsciidoc",
        "javadocToAsciidoc"
    ],
    "classes": [
        "AsciidocUtils"
    ]
}