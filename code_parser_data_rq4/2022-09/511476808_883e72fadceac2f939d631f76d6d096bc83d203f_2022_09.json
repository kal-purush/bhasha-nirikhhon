{
    "identifiers": [
        "os",
        "path",
        "os",
        "environ",
        "os",
        "pathsep",
        "scripts",
        "GazeboRosPaths",
        "ament_index_python",
        "packages",
        "get_package_share_directory",
        "launch",
        "LaunchDescription",
        "launch",
        "actions",
        "IncludeLaunchDescription",
        "SetEnvironmentVariable",
        "DeclareLaunchArgument",
        "ExecuteProcess",
        "Shutdown",
        "RegisterEventHandler",
        "TimerAction",
        "LogInfo",
        "launch",
        "launch_description_sources",
        "PythonLaunchDescriptionSource",
        "launch",
        "substitutions",
        "PathJoinSubstitution",
        "TextSubstitution",
        "LaunchConfiguration",
        "PythonExpression",
        "EnvironmentVariable",
        "launch_ros",
        "actions",
        "Node",
        "launch_ros",
        "substitutions",
        "FindPackageShare",
        "launch",
        "event_handlers",
        "OnExecutionComplete",
        "OnProcessExit",
        "OnProcessIO",
        "OnProcessStart",
        "OnShutdown",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "LaunchConfiguration",
        "PathJoinSubstitution",
        "FindPackageShare",
        "LaunchConfiguration",
        "Node",
        "executable",
        "output",
        "parameters",
        "agent_conf_file",
        "PathJoinSubstitution",
        "FindPackageShare",
        "world_file_name",
        "Node",
        "executable",
        "output",
        "parameters",
        "world_file",
        "gz_obs",
        "rate",
        "robot_name",
        "global_frame",
        "ignore_models",
        "RegisterEventHandler",
        "OnProcessStart",
        "target_action",
        "hunav_loader_node",
        "on_start",
        "LogInfo",
        "msg",
        "TimerAction",
        "period",
        "actions",
        "hunav_gazebo_worldgen_node",
        "PathJoinSubstitution",
        "FindPackageShare",
        "get_package_share_directory",
        "path",
        "join",
        "pkg_dir",
        "config_file_name",
        "GazeboRosPaths",
        "get_paths",
        "environ",
        "model",
        "pathsep",
        "environ",
        "environ",
        "plugin",
        "pathsep",
        "environ",
        "environ",
        "media",
        "pathsep",
        "environ",
        "model",
        "plugin",
        "media",
        "env",
        "SetEnvironmentVariable",
        "name",
        "value",
        "EnvironmentVariable",
        "my_gazebo_models",
        "SetEnvironmentVariable",
        "name",
        "value",
        "EnvironmentVariable",
        "my_gazebo_models",
        "SetEnvironmentVariable",
        "name",
        "value",
        "EnvironmentVariable",
        "plugin",
        "PathJoinSubstitution",
        "FindPackageShare",
        "use_nvidia_gpu",
        "world_path",
        "_boolean_command",
        "config_file",
        "use_nvidia_gpu",
        "_boolean_command",
        "ExecuteProcess",
        "cmd",
        "gzserver_cmd",
        "output",
        "shell",
        "on_exit",
        "Shutdown",
        "ExecuteProcess",
        "cmd",
        "gzclient_cmd",
        "output",
        "shell",
        "on_exit",
        "Shutdown",
        "PathJoinSubstitution",
        "FindPackageShare",
        "IncludeLaunchDescription",
        "PythonLaunchDescriptionSource",
        "gazebo_spawn",
        "launch_arguments",
        "scan_model",
        "use_rgbd",
        "gz_x",
        "gz_y",
        "gz_Y",
        "items",
        "RegisterEventHandler",
        "OnProcessStart",
        "target_action",
        "hunav_gazebo_worldgen_node",
        "on_start",
        "LogInfo",
        "msg",
        "TimerAction",
        "period",
        "actions",
        "gzserver_process",
        "gzclient_process",
        "Node",
        "executable",
        "name",
        "output",
        "parameters",
        "Node",
        "executable",
        "output",
        "arguments",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "DeclareLaunchArgument",
        "default_value",
        "description",
        "LaunchDescription",
        "ld",
        "add_action",
        "set_env_gazebo_model",
        "ld",
        "add_action",
        "set_env_gazebo_resource",
        "ld",
        "add_action",
        "set_env_gazebo_plugin",
        "ld",
        "add_action",
        "declare_agents_conf_file",
        "ld",
        "add_action",
        "declare_arg_world",
        "ld",
        "add_action",
        "declare_gz_obs",
        "ld",
        "add_action",
        "declare_update_rate",
        "ld",
        "add_action",
        "declare_robot_name",
        "ld",
        "add_action",
        "declare_frame_to_publish",
        "ld",
        "add_action",
        "declare_ignore_models",
        "ld",
        "add_action",
        "declare_arg_verbose",
        "ld",
        "add_action",
        "declare_arg_namespace",
        "ld",
        "add_action",
        "declare_arg_laser",
        "ld",
        "add_action",
        "declare_arg_rgbd",
        "ld",
        "add_action",
        "declare_arg_px",
        "ld",
        "add_action",
        "declare_arg_py",
        "ld",
        "add_action",
        "declare_arg_pz",
        "ld",
        "add_action",
        "declare_arg_pR",
        "ld",
        "add_action",
        "declare_arg_pP",
        "ld",
        "add_action",
        "declare_arg_pY",
        "ld",
        "add_action",
        "hunav_loader_node",
        "ld",
        "add_action",
        "ordered_launch_event",
        "ld",
        "add_action",
        "ordered_launch_event2",
        "ld",
        "add_action",
        "spawn_robot",
        "ld",
        "add_action",
        "human_nav_manager_node",
        "ld",
        "arg",
        "arg",
        "LaunchConfiguration",
        "arg",
        "PythonExpression",
        "cmd",
        "py_cmd"
    ],
    "literals": [
        "'__NV_PRIME_RENDER_OFFLOAD=1 '",
        "'__GLX_VENDOR_LIBRARY_NAME=nvidia '",
        "'base_world'",
        "'use_gazebo_obs'",
        "'update_rate'",
        "'robot_name'",
        "'global_frame_to_publish'",
        "'ignore_models'",
        "'robot_namespace'",
        "'laser_model'",
        "'rgbd_sensors'",
        "'gzpose_x'",
        "'gzpose_y'",
        "'gzpose_z'",
        "'gzpose_R'",
        "'gzpose_P'",
        "'gzpose_Y'",
        "'hunav_agent_manager'",
        "'config'",
        "'configuration_file'",
        "'hunav_agent_manager'",
        "'hunav_loader'",
        "'screen'",
        "'hunav_gazebo_wrapper'",
        "'worlds'",
        "'hunav_gazebo_wrapper'",
        "'hunav_gazebo_world_generator'",
        "'screen'",
        "'base_world'",
        "'use_gazebo_obs'",
        "'update_rate'",
        "'robot_name'",
        "'global_frame_to_publish'",
        "'ignore_models'",
        "'HunNavLoader started, launching HuNav_Gazebo_world_generator after 2 seconds...'",
        "'hunav_gazebo_wrapper'",
        "'models'",
        "'params.yaml'",
        "'hunav_gazebo_wrapper'",
        "'launch'",
        "'GAZEBO_MODEL_PATH'",
        "'GAZEBO_MODEL_PATH'",
        "'GAZEBO_PLUGIN_PATH'",
        "'GAZEBO_PLUGIN_PATH'",
        "'GAZEBO_RESOURCE_PATH'",
        "'GAZEBO_RESOURCE_PATH'",
        "'GAZEBO_MODEL_PATH'",
        "'GAZEBO_PLUGIN_PATH'",
        "'GAZEBO_RESOURCE_PATH'",
        "'env:'",
        "'GAZEBO_MODEL_PATH'",
        "'GAZEBO_MODEL_PATH'",
        "'GAZEBO_RESOURCE_PATH'",
        "'GAZEBO_RESOURCE_PATH'",
        "'GAZEBO_PLUGIN_PATH'",
        "'GAZEBO_PLUGIN_PATH'",
        "'hunav_gazebo_wrapper'",
        "'worlds'",
        "'generatedWorld.world'",
        "'gzserver '",
        "'--pause '",
        "'verbose'",
        "''",
        "'-s '",
        "'libgazebo_ros_init.so'",
        "'-s '",
        "'libgazebo_ros_factory.so'",
        "'--ros-args'",
        "'--params-file'",
        "'gzclient'",
        "'verbose'",
        "' '",
        "'screen'",
        "'screen'",
        "\"pmb2_gazebo\"",
        "\"launch\"",
        "\"pmb2_spawn.launch.py\"",
        "'robot_namespace'",
        "'laser_model'",
        "'rgbd_sensors'",
        "'gzpose_x'",
        "'gzpose_y'",
        "'gzpose_Y'",
        "'GenerateWorld started, launching Gazebo after 2 seconds...'",
        "'hunav_agent_manager'",
        "'hunav_agent_manager'",
        "'hunav_agent_manager'",
        "'screen'",
        "'use_sim_time'",
        "\"tf2_ros\"",
        "\"static_transform_publisher\"",
        "'screen'",
        "'0'",
        "'0'",
        "'0'",
        "'0'",
        "'0'",
        "'0'",
        "'map'",
        "'odom'",
        "'configuration_file'",
        "'agents.yaml'",
        "'Specify configuration file name in the cofig directory'",
        "'base_world'",
        "'small_house.world'",
        "'Specify world file name'",
        "'use_gazebo_obs'",
        "'true'",
        "'Whether to fill the agents obstacles with closest Gazebo obstacle or not'",
        "'update_rate'",
        "'100.0'",
        "'Update rate of the plugin'",
        "'robot_name'",
        "'pmb2'",
        "'Specify the name of the robot Gazebo model'",
        "'global_frame_to_publish'",
        "'map'",
        "'Name of the global frame in which the position of the agents are provided'",
        "'ignore_models'",
        "'ground_plane cafe FloorB_01_001'",
        "'list of Gazebo models that the agents should ignore as obstacles as the ground_plane. Indicate the models with a blank space between them'",
        "'verbose'",
        "'true'",
        "'Set \"true\" to increase messages written to terminal.'",
        "'robot_namespace'",
        "''",
        "'The type of robot'",
        "'gzpose_x'",
        "'0.0'",
        "'The robot initial position in the X axis of the world'",
        "'gzpose_y'",
        "'0.0'",
        "'The robot initial position in the Y axis of the world'",
        "'gzpose_z'",
        "'0.30'",
        "'The robot initial position in the Z axis of the world'",
        "'gzpose_R'",
        "'0.0'",
        "'The robot initial roll angle in the world'",
        "'gzpose_P'",
        "'0.0'",
        "'The robot initial pitch angle in the world'",
        "'gzpose_Y'",
        "'0.0'",
        "'The robot initial yaw angle in the world'",
        "'laser_model'",
        "'sick-571'",
        "'the laser model to be used'",
        "'rgbd_sensors'",
        "'false'",
        "'whether to use rgbd cameras or not'",
        "'\"--'",
        "'\" if \"true\" == \"'",
        "'\" else \"\"'"
    ],
    "variables": [
        "use_nvidia_gpu",
        "world_file_name",
        "gz_obs",
        "rate",
        "robot_name",
        "global_frame",
        "ignore_models",
        "scan_model",
        "use_rgbd",
        "gz_x",
        "gz_y",
        "gz_z",
        "gz_R",
        "gz_P",
        "gz_Y",
        "agent_conf_file",
        "hunav_loader_node",
        "world_file",
        "hunav_gazebo_worldgen_node",
        "ordered_launch_event",
        "my_gazebo_models",
        "config_file_name",
        "pkg_dir",
        "config_file",
        "model",
        "plugin",
        "media",
        "env",
        "set_env_gazebo_model",
        "set_env_gazebo_resource",
        "set_env_gazebo_plugin",
        "world_path",
        "gzserver_cmd",
        "gzclient_cmd",
        "gzserver_process",
        "gzclient_process",
        "gazebo_spawn",
        "spawn_robot",
        "ordered_launch_event2",
        "human_nav_manager_node",
        "static_tf_node",
        "declare_agents_conf_file",
        "declare_arg_world",
        "declare_gz_obs",
        "declare_update_rate",
        "declare_robot_name",
        "declare_frame_to_publish",
        "declare_ignore_models",
        "declare_arg_verbose",
        "declare_arg_namespace",
        "declare_arg_px",
        "declare_arg_py",
        "declare_arg_pz",
        "declare_arg_pR",
        "declare_arg_pP",
        "declare_arg_pY",
        "declare_arg_laser",
        "declare_arg_rgbd",
        "ld",
        "cmd",
        "py_cmd"
    ],
    "comments": [
        "to activate the use of nvidia gpu",
        "World generation parameters",
        "Robot parameters",
        "agent configuration file",
        "Read the yaml file and load the parameters",
        "arguments=['--ros-args', '--params-file', conf_file]",
        "world base file",
        "the node looks for the base_world file in the directory 'worlds'",
        "of the package hunav_gazebo_plugin direclty. So we do not need to",
        "indicate the path",
        "arguments=['--ros-args', '--params-file', conf_file]",
        "Then, launch the generated world in Gazebo",
        "print('model:', model)",
        "'empty_cafe.world' #'pmb2_cafe.world'",
        "Pass through arguments to gzserver",
        "'-s ', #'libgazebo_ros_state.so',",
        "additional_env=env,",
        "condition=IfCondition(LaunchConfiguration('server_required')),",
        "additional_env=env,",
        "condition=IfCondition(LaunchConfiguration('server_required')),",
        "Finally, spawn the pmb2 robot in Gazebo",
        "OnProcessExit(",
        "target_action=hunav_gazebo_worldgen_node,",
        "on_exit=[",
        "LogInfo(msg='GenerateWorld started, launching Gazebo after 1 second...'),",
        "TimerAction(",
        "period=1.0,",
        "actions=[gzserver_process, gzclient_process],",
        ")",
        "]",
        ")",
        "DO NOT Launch this if any robot localization is launched",
        "other option: arguments = \"0 0 0 0 0 0 pmb2 base_footprint\".split(' ')",
        "DeclareLaunchArgument('gzpose', default_value='-x 0.0 -y 0.0 -z 0.1 -R 0.0 -P 0.0 -Y 1.57',",
        "description='The robot initial position in the world')",
        "set environment variables",
        "Declare the launch arguments",
        "Generate the world with the agents",
        "launch hunav_loader and the WorldGenerator",
        "2 seconds later",
        "launch Gazebo after worldGenerator",
        "(wait a bit for the world generation)",
        "ld.add_action(gzserver_process)",
        "ld.add_action(gzclient_process)",
        "spawn robot in Gazebo",
        "human nav behaviors node",
        "Add boolean commands if true"
    ],
    "docstrings": [],
    "functions": [
        "generate_launch_description",
        "_boolean_command"
    ],
    "classes": []
}