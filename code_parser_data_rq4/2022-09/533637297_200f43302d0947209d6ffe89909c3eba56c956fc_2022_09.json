{
    "identifiers": [
        "com",
        "miracleFactoryTutorial",
        "com",
        "miracleFactoryTutorial",
        "Parser",
        "java",
        "util",
        "com",
        "miracleFactoryTutorial",
        "Parser",
        "Operators",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "ASTree",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "BinaryExpr",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "BlockStmnt",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "IfStmnt",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "Name",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "NegativeExpr",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "NumberLiteral",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "NullStmnt",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "PrimaryExpr",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "StringLiteral",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "WhenStmnt",
        "com",
        "miracleFactoryTutorial",
        "ast",
        "WhileStmnt",
        "reserved",
        "operators",
        "expr0",
        "rule",
        "primary",
        "rule",
        "rule",
        "sep",
        "ast",
        "expr0",
        "sep",
        "rule",
        "number",
        "rule",
        "identifier",
        "reserved",
        "rule",
        "factor",
        "rule",
        "rule",
        "sep",
        "ast",
        "primary",
        "primary",
        "expr",
        "expr0",
        "expression",
        "factor",
        "operators",
        "statement0",
        "rule",
        "block",
        "rule",
        "sep",
        "option",
        "statement0",
        "repeat",
        "rule",
        "sep",
        "Token",
        "EOL",
        "option",
        "statement0",
        "sep",
        "simple",
        "rule",
        "ast",
        "expr",
        "statement",
        "statement0",
        "rule",
        "sep",
        "ast",
        "expr",
        "ast",
        "block",
        "option",
        "rule",
        "sep",
        "ast",
        "block",
        "rule",
        "sep",
        "ast",
        "expr",
        "ast",
        "block",
        "rule",
        "sep",
        "ast",
        "expr",
        "ast",
        "block",
        "simple",
        "program",
        "rule",
        "statement",
        "rule",
        "sep",
        "Token",
        "EOL",
        "reserved",
        "add",
        "reserved",
        "add",
        "reserved",
        "add",
        "Token",
        "EOL",
        "operators",
        "add",
        "Operators",
        "RIGHT",
        "operators",
        "add",
        "Operators",
        "LEFT",
        "operators",
        "add",
        "Operators",
        "LEFT",
        "operators",
        "add",
        "Operators",
        "LEFT",
        "operators",
        "add",
        "Operators",
        "LEFT",
        "operators",
        "add",
        "Operators",
        "LEFT",
        "operators",
        "add",
        "Operators",
        "LEFT",
        "operators",
        "add",
        "Operators",
        "LEFT",
        "operators",
        "add",
        "Operators",
        "LEFT",
        "lexer",
        "program",
        "parse",
        "lexer"
    ],
    "literals": [
        "\"(\"",
        "\")\"",
        "\"-\"",
        "\"{\"",
        "\";\"",
        "\"}\"",
        "\"if\"",
        "\"else\"",
        "\"when\"",
        "\"while\"",
        "\";\"",
        "\";\"",
        "\"}\"",
        "\"=\"",
        "\"==\"",
        "\">\"",
        "\"<\"",
        "\"+\"",
        "\"-\"",
        "\"*\"",
        "\"/\"",
        "\"%\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* primary : either a primary expression class, or\n     *\t Primary \"(\" expr \")\" | number | identifier | string",
        "* factor: a negative primary expression ( when it is a number ), or a primary expression",
        "* expression : factor or a operator + factor",
        "* block    : \"{\" [ statement ] {(\";\" | EOL) [ statement]} \"}\"",
        "* simple   : expr",
        "* statement : \"if\" expr block [ \"else\" block ]\n     *           | \"while\" expr block\n     *           | \"when\" expr block\n     *           | simple",
        "* program   : [ statement ] (\";\" | EOL)",
        "*",
        "*\n     * @param lexer\n     * @return\n     * @throws ParseException"
    ],
    "functions": [
        "BasicParser",
        "ASTree",
        "parse"
    ],
    "classes": [
        "BasicParser"
    ]
}