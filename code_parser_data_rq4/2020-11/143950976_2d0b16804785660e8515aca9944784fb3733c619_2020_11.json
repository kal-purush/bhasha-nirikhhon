{
    "identifiers": [
        "org",
        "apache",
        "cassandra",
        "distributed",
        "test",
        "java",
        "io",
        "java",
        "util",
        "UUID",
        "java",
        "util",
        "BiConsumer",
        "org",
        "junit",
        "Assert",
        "org",
        "junit",
        "Ignore",
        "org",
        "junit",
        "Test",
        "org",
        "apache",
        "cassandra",
        "db",
        "Keyspace",
        "org",
        "apache",
        "cassandra",
        "db",
        "marshal",
        "Int32Type",
        "org",
        "apache",
        "cassandra",
        "dht",
        "Murmur3Partitioner",
        "org",
        "apache",
        "cassandra",
        "dht",
        "Token",
        "org",
        "apache",
        "cassandra",
        "distributed",
        "Cluster",
        "org",
        "apache",
        "cassandra",
        "distributed",
        "api",
        "ConsistencyLevel",
        "org",
        "apache",
        "cassandra",
        "distributed",
        "api",
        "ICoordinator",
        "org",
        "apache",
        "cassandra",
        "distributed",
        "api",
        "IInstance",
        "org",
        "apache",
        "cassandra",
        "distributed",
        "api",
        "IMessageFilters",
        "org",
        "apache",
        "cassandra",
        "distributed",
        "impl",
        "Instance",
        "org",
        "apache",
        "cassandra",
        "net",
        "MessagingService",
        "org",
        "apache",
        "cassandra",
        "service",
        "StorageService",
        "org",
        "apache",
        "cassandra",
        "utils",
        "UUIDGen",
        "org",
        "apache",
        "cassandra",
        "distributed",
        "shared",
        "AssertUtils",
        "assertRows",
        "org",
        "apache",
        "cassandra",
        "distributed",
        "shared",
        "AssertUtils",
        "fail",
        "org",
        "apache",
        "cassandra",
        "distributed",
        "shared",
        "AssertUtils",
        "row",
        "org",
        "apache",
        "cassandra",
        "net",
        "MessagingService",
        "Verb",
        "PAXOS_COMMIT",
        "org",
        "apache",
        "cassandra",
        "net",
        "MessagingService",
        "Verb",
        "PAXOS_PREPARE",
        "org",
        "apache",
        "cassandra",
        "net",
        "MessagingService",
        "Verb",
        "PAXOS_PROPOSE",
        "org",
        "apache",
        "cassandra",
        "net",
        "MessagingService",
        "Verb",
        "READ",
        "org",
        "junit",
        "Assert",
        "assertFalse",
        "org",
        "junit",
        "Assert",
        "assertTrue",
        "Test",
        "cluster",
        "init",
        "Cluster",
        "create",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "SERIAL",
        "row",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "SERIAL",
        "row",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "SERIAL",
        "row",
        "Test",
        "cluster",
        "init",
        "Cluster",
        "create",
        "config",
        "config",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "Assert",
        "fail",
        "wrapped",
        "Assert",
        "assertEquals",
        "wrapped",
        "getCause",
        "getMessage",
        "drop",
        "off",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "SERIAL",
        "Test",
        "cluster",
        "init",
        "Cluster",
        "create",
        "config",
        "config",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "drop1",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "Assert",
        "fail",
        "wrapped",
        "Assert",
        "assertEquals",
        "wrapped",
        "getCause",
        "getMessage",
        "drop1",
        "off",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "SERIAL",
        "row",
        "Test",
        "cluster",
        "init",
        "Cluster",
        "create",
        "config",
        "config",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "drop1",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_COMMIT",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "Assert",
        "fail",
        "wrapped",
        "Assert",
        "assertEquals",
        "wrapped",
        "getCause",
        "getMessage",
        "drop1",
        "off",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "SERIAL",
        "row",
        "MessagingService",
        "Verb",
        "PAXOS_PREPARE",
        "ordinal",
        "MessagingService",
        "Verb",
        "PAXOS_PROPOSE",
        "ordinal",
        "MessagingService",
        "Verb",
        "PAXOS_COMMIT",
        "ordinal",
        "MessagingService",
        "Verb",
        "READ",
        "ordinal",
        "postTimeoutOperation1",
        "postTimeoutOperation2",
        "loseCommitOfOperation1",
        "cluster",
        "init",
        "Cluster",
        "create",
        "config",
        "config",
        "table",
        "KEYSPACE",
        "cluster",
        "schemaChange",
        "table",
        "dropProposeFilter",
        "cluster",
        "filters",
        "inbound",
        "verbs",
        "MessagingService",
        "Verb",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "coordinator",
        "execute",
        "table",
        "ConsistencyLevel",
        "ONE",
        "fail",
        "e",
        "e",
        "getCause",
        "getClass",
        "getSimpleName",
        "equals",
        "e",
        "dropProposeFilter",
        "off",
        "ignoreNode3Filter",
        "cluster",
        "filters",
        "verbs",
        "paxosAndReadVerbs",
        "to",
        "drop",
        "dropCommitFilter",
        "loseCommitOfOperation1",
        "dropCommitFilter",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_COMMIT",
        "ordinal",
        "to",
        "drop",
        "postTimeoutOperation1",
        "accept",
        "table",
        "cluster",
        "coordinator",
        "ignoreNode3Filter",
        "off",
        "dropCommitFilter",
        "dropCommitFilter",
        "off",
        "ignoreNode2Filter",
        "cluster",
        "filters",
        "verbs",
        "paxosAndReadVerbs",
        "to",
        "drop",
        "postTimeoutOperation2",
        "accept",
        "table",
        "cluster",
        "coordinator",
        "ignoreNode2Filter",
        "off",
        "Test",
        "operation",
        "table",
        "coordinator",
        "assertRows",
        "coordinator",
        "execute",
        "table",
        "ConsistencyLevel",
        "SERIAL",
        "consistencyAfterWriteTimeoutTest",
        "operation",
        "operation",
        "consistencyAfterWriteTimeoutTest",
        "operation",
        "operation",
        "Test",
        "operation",
        "table",
        "coordinator",
        "assertCasNotApplied",
        "coordinator",
        "execute",
        "table",
        "ConsistencyLevel",
        "ANY",
        "consistencyAfterWriteTimeoutTest",
        "operation",
        "operation",
        "consistencyAfterWriteTimeoutTest",
        "operation",
        "operation",
        "Test",
        "operation1",
        "table",
        "coordinator",
        "assertRows",
        "coordinator",
        "execute",
        "table",
        "ConsistencyLevel",
        "SERIAL",
        "operation2",
        "table",
        "coordinator",
        "assertCasNotApplied",
        "coordinator",
        "execute",
        "table",
        "ConsistencyLevel",
        "QUORUM",
        "consistencyAfterWriteTimeoutTest",
        "operation1",
        "operation2",
        "consistencyAfterWriteTimeoutTest",
        "operation1",
        "operation2",
        "Test",
        "operation1",
        "table",
        "coordinator",
        "assertCasNotApplied",
        "coordinator",
        "execute",
        "table",
        "ConsistencyLevel",
        "ANY",
        "operation2",
        "table",
        "coordinator",
        "assertRows",
        "coordinator",
        "execute",
        "table",
        "ConsistencyLevel",
        "SERIAL",
        "consistencyAfterWriteTimeoutTest",
        "operation1",
        "operation2",
        "consistencyAfterWriteTimeoutTest",
        "operation1",
        "operation2",
        "resultSet",
        "assertFalse",
        "resultSet",
        "length",
        "assertFalse",
        "resultSet",
        "length",
        "wasApplied",
        "resultSet",
        "assertTrue",
        "wasApplied",
        "getClass",
        "wasApplied",
        "assertFalse",
        "wasApplied",
        "Ignore",
        "Test",
        "cluster",
        "Cluster",
        "create",
        "config",
        "config",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "cluster",
        "get",
        "acceptsOnInstance",
        "Instance",
        "removeFromRing",
        "accept",
        "cluster",
        "get",
        "pk",
        "pk",
        "cluster",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_COMMIT",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "ONE",
        "pk",
        "row",
        "i",
        "i",
        "i",
        "cluster",
        "get",
        "i",
        "acceptsOnInstance",
        "Instance",
        "addToRingNormal",
        "accept",
        "cluster",
        "get",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "ONE",
        "pk",
        "row",
        "pk",
        "Ignore",
        "Test",
        "cluster",
        "Cluster",
        "create",
        "config",
        "config",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "cluster",
        "get",
        "acceptsOnInstance",
        "Instance",
        "removeFromRing",
        "accept",
        "cluster",
        "get",
        "pk",
        "pk",
        "cluster",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_COMMIT",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "ONE",
        "pk",
        "row",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_COMMIT",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "ONE",
        "pk",
        "row",
        "pk",
        "Ignore",
        "Test",
        "cluster",
        "Cluster",
        "create",
        "config",
        "config",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "i",
        "i",
        "i",
        "cluster",
        "get",
        "acceptsOnInstance",
        "Instance",
        "removeFromRing",
        "accept",
        "cluster",
        "get",
        "cluster",
        "get",
        "acceptsOnInstance",
        "Instance",
        "addToRingBootstrapping",
        "accept",
        "cluster",
        "get",
        "pk",
        "pk",
        "cluster",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_COMMIT",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "ONE",
        "pk",
        "row",
        "i",
        "i",
        "i",
        "cluster",
        "get",
        "i",
        "acceptsOnInstance",
        "Instance",
        "addToRingNormal",
        "accept",
        "cluster",
        "get",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "SERIAL",
        "pk",
        "row",
        "pk",
        "Ignore",
        "Test",
        "cluster",
        "Cluster",
        "create",
        "config",
        "config",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "i",
        "i",
        "i",
        "cluster",
        "get",
        "acceptsOnInstance",
        "Instance",
        "removeFromRing",
        "accept",
        "cluster",
        "get",
        "cluster",
        "get",
        "acceptsOnInstance",
        "Instance",
        "addToRingBootstrapping",
        "accept",
        "cluster",
        "get",
        "pk",
        "pk",
        "cluster",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_COMMIT",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "ONE",
        "pk",
        "row",
        "i",
        "i",
        "i",
        "cluster",
        "get",
        "i",
        "acceptsOnInstance",
        "Instance",
        "addToRingNormal",
        "accept",
        "cluster",
        "get",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "ONE",
        "pk",
        "row",
        "pk",
        "Ignore",
        "Test",
        "cluster",
        "Cluster",
        "create",
        "config",
        "config",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "i",
        "i",
        "i",
        "cluster",
        "get",
        "acceptsOnInstance",
        "Instance",
        "removeFromRing",
        "accept",
        "cluster",
        "get",
        "cluster",
        "get",
        "acceptsOnInstance",
        "Instance",
        "addToRingBootstrapping",
        "accept",
        "cluster",
        "get",
        "pk",
        "pk",
        "cluster",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "pk",
        "Assert",
        "assertTrue",
        "wrapped",
        "Assert",
        "assertEquals",
        "wrapped",
        "getCause",
        "getMessage",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_COMMIT",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "ONE",
        "pk",
        "row",
        "i",
        "i",
        "i",
        "cluster",
        "get",
        "i",
        "acceptsOnInstance",
        "Instance",
        "addToRingNormal",
        "accept",
        "cluster",
        "get",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "SERIAL",
        "pk",
        "row",
        "pk",
        "Ignore",
        "Test",
        "cluster",
        "Cluster",
        "create",
        "config",
        "config",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "cluster",
        "schemaChange",
        "KEYSPACE",
        "i",
        "i",
        "i",
        "cluster",
        "get",
        "acceptsOnInstance",
        "Instance",
        "removeFromRing",
        "accept",
        "cluster",
        "get",
        "cluster",
        "get",
        "acceptsOnInstance",
        "Instance",
        "addToRingBootstrapping",
        "accept",
        "cluster",
        "get",
        "pk",
        "pk",
        "cluster",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "QUORUM",
        "pk",
        "Assert",
        "assertTrue",
        "wrapped",
        "Assert",
        "assertEquals",
        "wrapped",
        "getCause",
        "getMessage",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_COMMIT",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "ONE",
        "pk",
        "row",
        "i",
        "i",
        "i",
        "cluster",
        "get",
        "i",
        "acceptsOnInstance",
        "Instance",
        "addToRingNormal",
        "accept",
        "cluster",
        "get",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PREPARE",
        "ordinal",
        "READ",
        "ordinal",
        "to",
        "drop",
        "cluster",
        "filters",
        "verbs",
        "PAXOS_PROPOSE",
        "ordinal",
        "to",
        "drop",
        "assertRows",
        "cluster",
        "coordinator",
        "execute",
        "KEYSPACE",
        "ConsistencyLevel",
        "ONE",
        "pk",
        "row",
        "cluster",
        "lb",
        "ub",
        "pk",
        "cluster",
        "get",
        "lb",
        "cluster",
        "get",
        "ub",
        "lb",
        "ub",
        "pk",
        "Murmur3Partitioner",
        "instance",
        "getTokenFactory",
        "fromString",
        "lb",
        "config",
        "getString",
        "Murmur3Partitioner",
        "instance",
        "getTokenFactory",
        "fromString",
        "ub",
        "config",
        "getString",
        "lb",
        "ub",
        "pk",
        "pkt",
        "lb",
        "compareTo",
        "pkt",
        "Murmur3Partitioner",
        "instance",
        "getToken",
        "Int32Type",
        "instance",
        "decompose",
        "pk",
        "ub",
        "compareTo",
        "pkt",
        "pk",
        "pk",
        "cluster",
        "pk",
        "i",
        "i",
        "cluster",
        "size",
        "i",
        "i",
        "cluster",
        "get",
        "i",
        "appliesOnInstance",
        "v",
        "StorageService",
        "instance",
        "getNaturalAndPendingEndpoints",
        "KEYSPACE",
        "Murmur3Partitioner",
        "instance",
        "getToken",
        "Int32Type",
        "instance",
        "decompose",
        "v",
        "apply",
        "pk",
        "cluster",
        "pk",
        "cfid",
        "cluster",
        "get",
        "callOnInstance",
        "Keyspace",
        "open",
        "KEYSPACE",
        "getColumnFamilyStore",
        "metadata",
        "cfId",
        "i",
        "i",
        "cluster",
        "size",
        "i",
        "row",
        "cluster",
        "get",
        "i",
        "executeInternal",
        "Int32Type",
        "instance",
        "decompose",
        "pk",
        "cfid",
        "i",
        "row",
        "UUIDGen",
        "microsTimestamp",
        "row",
        "row",
        "UUIDGen",
        "microsTimestamp",
        "row",
        "row",
        "UUIDGen",
        "microsTimestamp",
        "row"
    ],
    "literals": [
        "\"CREATE TABLE \"",
        "\".tbl (pk int, ck int, v int, PRIMARY KEY (pk, ck))\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v) VALUES (1, 1, 1) IF NOT EXISTS\"",
        "\"SELECT * FROM \"",
        "\".tbl WHERE pk = 1\"",
        "\"UPDATE \"",
        "\".tbl SET v = 3 WHERE pk = 1 and ck = 1 IF v = 2\"",
        "\"SELECT * FROM \"",
        "\".tbl WHERE pk = 1\"",
        "\"UPDATE \"",
        "\".tbl SET v = 2 WHERE pk = 1 and ck = 1 IF v = 1\"",
        "\"SELECT * FROM \"",
        "\".tbl WHERE pk = 1\"",
        "\"write_request_timeout_in_ms\"",
        "\"cas_contention_timeout_in_ms\"",
        "\"CREATE TABLE \"",
        "\".tbl (pk int, ck int, v int, PRIMARY KEY (pk, ck))\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v) VALUES (1, 1, 1) IF NOT EXISTS\"",
        "\"Operation timed out - received only 1 responses.\"",
        "\"UPDATE \"",
        "\".tbl SET v = 2 WHERE pk = 1 and ck = 1 IF v = 1\"",
        "\"SELECT * FROM \"",
        "\".tbl WHERE pk = 1\"",
        "\"write_request_timeout_in_ms\"",
        "\"cas_contention_timeout_in_ms\"",
        "\"CREATE TABLE \"",
        "\".tbl (pk int, ck int, v int, PRIMARY KEY (pk, ck))\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v) VALUES (1, 1, 1) IF NOT EXISTS\"",
        "\"Operation timed out - received only 1 responses.\"",
        "\"UPDATE \"",
        "\".tbl SET v = 2 WHERE pk = 1 and ck = 1 IF v = 1\"",
        "\"SELECT * FROM \"",
        "\".tbl WHERE pk = 1\"",
        "\"write_request_timeout_in_ms\"",
        "\"cas_contention_timeout_in_ms\"",
        "\"CREATE TABLE \"",
        "\".tbl (pk int, ck int, v int, PRIMARY KEY (pk, ck))\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v) VALUES (1, 1, 1) IF NOT EXISTS\"",
        "\"Operation timed out - received only 1 responses.\"",
        "\"UPDATE \"",
        "\".tbl SET v = 2 WHERE pk = 1 and ck = 1 IF v = 1\"",
        "\"SELECT * FROM \"",
        "\".tbl WHERE pk = 1\"",
        "\"write_request_timeout_in_ms\"",
        "\"cas_contention_timeout_in_ms\"",
        "\".t\"",
        "\"CREATE TABLE \"",
        "\" (k int PRIMARY KEY, v int)\"",
        "\"INSERT INTO \"",
        "\"(k, v) VALUES (0, 0) IF NOT EXISTS\"",
        "\"The insertion should have timed-out\"",
        "\"WriteTimeoutException\"",
        "\"SELECT * FROM \"",
        "\" WHERE k=0\"",
        "\"UPDATE \"",
        "\" SET v = 1 WHERE k = 0 IF v = 0\"",
        "\"SELECT * FROM \"",
        "\" WHERE k=0\"",
        "\"UPDATE \"",
        "\" SET v = 1 WHERE k = 0 IF v = 0\"",
        "\"UPDATE \"",
        "\" SET v = 1 WHERE k = 0 IF v = 0\"",
        "\"SELECT * FROM \"",
        "\" WHERE k=0\"",
        "\"Expected a CAS resultSet (with at least application result) but got an empty one.\"",
        "\"Invalid empty first row in CAS resultSet.\"",
        "\"Expected 1st column of CAS resultSet to be a boolean, but got a \"",
        "\"Expected CAS to not be applied, but was applied.\"",
        "\"write_request_timeout_in_ms\"",
        "\"cas_contention_timeout_in_ms\"",
        "\"CREATE KEYSPACE \"",
        "\" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};\"",
        "\"CREATE TABLE \"",
        "\".tbl (pk int, ck int, v1 int, v2 int, PRIMARY KEY (pk, ck))\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v1) VALUES (?, 1, 1) IF NOT EXISTS\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v2) VALUES (?, 1, 2) IF NOT EXISTS\"",
        "\"write_request_timeout_in_ms\"",
        "\"cas_contention_timeout_in_ms\"",
        "\"CREATE KEYSPACE \"",
        "\" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};\"",
        "\"CREATE TABLE \"",
        "\".tbl (pk int, ck int, v1 int, v2 int, PRIMARY KEY (pk, ck))\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v1) VALUES (?, 1, 1) IF NOT EXISTS\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v2) VALUES (?, 1, 2) IF NOT EXISTS\"",
        "\"write_request_timeout_in_ms\"",
        "\"cas_contention_timeout_in_ms\"",
        "\"CREATE KEYSPACE \"",
        "\" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};\"",
        "\"CREATE TABLE \"",
        "\".tbl (pk int, ck int, v int, PRIMARY KEY (pk, ck))\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v) VALUES (?, 1, 1) IF NOT EXISTS\"",
        "\"SELECT * FROM \"",
        "\".tbl WHERE pk = ?\"",
        "\"write_request_timeout_in_ms\"",
        "\"cas_contention_timeout_in_ms\"",
        "\"CREATE KEYSPACE \"",
        "\" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};\"",
        "\"CREATE TABLE \"",
        "\".tbl (pk int, ck int, v1 int, v2 int, PRIMARY KEY (pk, ck))\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v1) VALUES (?, 1, 1) IF NOT EXISTS\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v2) VALUES (?, 1, 2) IF NOT EXISTS\"",
        "\"write_request_timeout_in_ms\"",
        "\"cas_contention_timeout_in_ms\"",
        "\"CREATE KEYSPACE \"",
        "\" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};\"",
        "\"CREATE TABLE \"",
        "\".tbl (pk int, ck int, v1 int, v2 int, PRIMARY KEY (pk, ck))\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v1) VALUES (?, 1, 1) IF NOT EXISTS\"",
        "\"Operation timed out - received only 1 responses.\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v2) VALUES (?, 1, 2) IF NOT EXISTS\"",
        "\"SELECT * FROM \"",
        "\".tbl WHERE pk = ?\"",
        "\"write_request_timeout_in_ms\"",
        "\"cas_contention_timeout_in_ms\"",
        "\"CREATE KEYSPACE \"",
        "\" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};\"",
        "\"CREATE TABLE \"",
        "\".tbl (pk int, ck int, v1 int, v2 int, PRIMARY KEY (pk, ck))\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v1) VALUES (?, 1, 1) IF NOT EXISTS\"",
        "\"Operation timed out - received only 1 responses.\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v2) VALUES (?, 1, 2) IF NOT EXISTS\"",
        "\"INSERT INTO \"",
        "\".tbl (pk, ck, v2) VALUES (?, 1, 2) IF NOT EXISTS\"",
        "\"initial_token\"",
        "\"initial_token\"",
        "\": \"",
        "\"tbl\"",
        "\"select in_progress_ballot, proposal_ballot, most_recent_commit_at from system.paxos where row_key = ? and cf_id = ?\"",
        "\": \"",
        "\", \"",
        "\", \""
    ],
    "variables": [
        "pkt"
    ],
    "comments": [
        "make sure we encounter one of the in-progress proposals so we complete it",
        "make sure we see one of the successful commits",
        "We do a CAS insertion, but have with the PROPOSE message dropped on node 1 and 2. The CAS will not get",
        "through and should timeout. Importantly, node 3 does receive and answer the PROPOSE.",
        "NOTE: the consistency below is the \"commit\" one, so it doesn't matter at all here.",
        "We expect a write timeout. If we get one, the test can continue, otherwise, we rethrow. Note that we",
        "look at the root cause because the dtest framework effectively wrap the exception in a RuntimeException",
        "(we could just look at the immediate cause, but this feel a bit more resilient this way).",
        "TODO: we can't use an instanceof below because the WriteTimeoutException we get is from a different class",
        "loader than the one the test run under, and that's our poor-man work-around. This kind of things should",
        "be improved at the dtest API level.",
        "Isolates node 3 and executes the SERIAL operation. As neither node 1 or 2 got the initial insert proposal,",
        "there is nothing to \"replay\" and the operation should assert the table is still empty.",
        "Node 3 is now back and we isolate node 2 to ensure the next read hits node 1 and 3.",
        "What we want to ensure is that despite node 3 having the initial insert in its paxos state in a position of",
        "being replayed, that insert is _not_ replayed (it would contradict serializability since the previous",
        "operation asserted nothing was inserted). It is this execution that failed before CASSANDRA-12126.",
        "Note: we use CL.ANY so that the operation don't timeout in the case where we \"lost\" the operation1 commits.",
        "The commit CL shouldn't have impact on this test anyway, so this doesn't diminishes the test.",
        "Note: we use CL.ANY so that the operation don't timeout in the case where we \"lost\" the operation1 commits.",
        "The commit CL shouldn't have impact on this test anyway, so this doesn't diminishes the test.",
        "TODO: this shoud probably be moved into the dtest API.",
        "make it so {1} is unaware (yet) that {4} is an owner of the token",
        "{1} promises and accepts on !{3} => {1, 2}; commits on !{2,3} => {1}",
        "{4} reads from !{2} => {3, 4}",
        "make it so {1} is unaware (yet) that {4} is an owner of the token",
        "{4} promises, accepts and commits on !{2} => {3, 4}",
        "{1} promises, accepts and commmits on !{3} => {1, 2}",
        "make it so {4} is bootstrapping, and this has not propagated to other nodes yet",
        "{1} promises and accepts on !{3} => {1, 2}; commmits on !{2, 3} => {1}",
        "finish topology change",
        "{3} reads from !{2} => {3, 4}",
        "make it so {4} is bootstrapping, and this has not propagated to other nodes yet",
        "{1} promises and accepts on !{3} => {1, 2}; commits on !{2, 3} => {1}",
        "finish topology change",
        "{3} reads from !{2} => {3, 4}",
        "TODO: repair and verify base table state",
        "make it so {4} is bootstrapping, and this has not propagated to other nodes yet",
        "{4} promises and accepts on !{1} => {2, 3, 4}; commits on !{1, 2, 3} => {4}",
        "{1} promises and accepts on !{3} => {1, 2}; commits on !{2, 3} => {1}",
        "finish topology change",
        "{3} reads from !{2} => {3, 4}",
        "make it so {4} is bootstrapping, and this has not propagated to other nodes yet",
        "{4} promises and accepts on !{1} => {2, 3, 4}; commits on !{1, 2, 3} => {4}",
        "{1} promises and accepts on !{3} => {1, 2}; commits on !{2, 3} => {1}",
        "finish topology change",
        "{3} reads from !{2} => {3, 4}"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Base test to ensure that if a write times out but with a proposal accepted by some nodes (less then quorum), and\n     * a following SERIAL operation does not observe that write (the node having accepted it do not participate in that\n     * following operation), then that write is never applied, even when the nodes having accepted the original proposal\n     * participate.\n     *\n     * <p>In other words, if an operation timeout, it may or may not be applied, but that \"fate\" is persistently decided\n     * by the very SERIAL operation that \"succeed\" (in the sense of 'not timing out or throwing some other exception').\n     *\n     * @param postTimeoutOperation1 a SERIAL operation executed after an initial write that inserts the row [0, 0] times\n     *                              out. It is executed with a QUORUM of nodes that have _not_ see the timed out\n     *                              proposal, and so that operation should expect that the [0, 0] write has not taken\n     *                              place.\n     * @param postTimeoutOperation2 a 2nd SERIAL operation executed _after_ {@code postTimeoutOperation1}, with no\n     *                              write executed between the 2 operation. Contrarily to the 1st operation, the QORUM\n     *                              for this operation _will_ include the node that got the proposal for the [0, 0]\n     *                              insert but didn't participated to {@code postTimeoutOperation1}}. That operation\n     *                              should also no witness that [0, 0] write (since {@code postTimeoutOperation1}\n     *                              didn't).\n     * @param loseCommitOfOperation1 if {@code true}, the test will also drop the \"commits\" messages for\n     *                               {@code postTimeoutOperation1}. In general, the test should behave the same with or\n     *                               without that flag since a value is decided as soon as it has been \"accepted by\n     *                               quorum\" and the commits should always be properly replayed.",
        "* Tests that if a write timeouts and a following serial read does not see that write, then no following reads sees\n     * it, even if some nodes still have the write in their paxos state.\n     *\n     * <p>This specifically test for the inconsistency described/fixed by CASSANDRA-12126.",
        "* Tests that if a write timeouts, then a following CAS succeed but does not apply in a way that indicate the write\n     * has not applied, then no following CAS can see that initial insert , even if some nodes still have the write in\n     * their paxos state.\n     *\n     * <p>This specifically test for the inconsistency described/fixed by CASSANDRA-12126.",
        "* Tests that if a write timeouts and a following serial read does not see that write, then no following CAS see\n     * that initial insert, even if some nodes still have the write in their paxos state.\n     *\n     * <p>This specifically test for the inconsistency described/fixed by CASSANDRA-12126.",
        "* Tests that if a write timeouts and a following CAS succeed but does not apply in a way that indicate the write\n     * has not applied, then following serial reads do no see that write, even if some nodes still have the write in\n     * their paxos state.\n     *\n     * <p>This specifically test for the inconsistency described/fixed by CASSANDRA-12126.",
        "* Failed write (by node that did not yet witness a range movement via gossip) is witnessed later as successful\n     * conflicting with another successful write performed by a node that did witness the range movement\n     * Prepare, Propose and Commit A to {1, 2}\n     * Range moves to {2, 3, 4}\n     * Prepare and Propose B (=> !A) to {3, 4}",
        "* Failed write (by node that did not yet witness a range movement via gossip) is witnessed later as successful\n     * conflicting with another successful write performed by a node that did witness the range movement\n     *  - Range moves from {1, 2, 3} to {2, 3, 4}, witnessed by X (not by !X)\n     *  -  X: Prepare, Propose and Commit A to {3, 4}\n     *  - !X: Prepare and Propose B (=>!A) to {1, 2}",
        "* Successful write during range movement, not witnessed by read after range movement.\n     * Very similar to {@link #testConflictingWritesWithStaleRingInformation}.\n     *\n     *  - Range moves from {1, 2, 3} to {2, 3, 4}; witnessed by X (not by !X)\n     *  -  !X: Prepare and Propose to {1, 2}\n     *  - Range movement witnessed by !X\n     *  - Any: Prepare and Read from {3, 4}",
        "* Successful write during range movement not witnessed by write after range movement\n     *\n     *  - Range moves from {1, 2, 3} to {2, 3, 4}; witnessed by X (not by !X)\n     *  -  !X: Prepare and Propose to {1, 2}\n     *  - Range movement witnessed by !X\n     *  - Any: Prepare and Propose to {3, 4}",
        "* During a range movement, a CAS may fail leaving side effects that are not witnessed by another operation\n     * being performed with stale ring information.\n     * This is a particular special case of stale ring information sequencing, which probably would be resolved\n     * by fixing each of the more isolated cases (but is unique, so deserving of its own test case).\n     * See CASSANDRA-15745\n     *\n     *  - Range moves from {1, 2, 3} to {2, 3, 4}; witnessed by X (not by !X)\n     *  -   X: Prepare to {2, 3, 4}\n     *  -   X: Propose to {4}\n     *  -  !X: Prepare and Propose to {1, 2}\n     *  - Range move visible by !X\n     *  - Any: Prepare and Read from {3, 4}",
        "* During a range movement, a CAS may fail leaving side effects that are not witnessed by another operation\n     * being performed with stale ring information.\n     * This is a particular special case of stale ring information sequencing, which probably would be resolved\n     * by fixing each of the more isolated cases (but is unique, so deserving of its own test case).\n     * See CASSANDRA-15745\n     *\n     *  - Range moves from {1, 2, 3} to {2, 3, 4}; witnessed by X (not by !X)\n     *  -   X: Prepare to {2, 3, 4}\n     *  -   X: Propose to {4}\n     *  -  !X: Prepare and Propose to {1, 2}\n     *  - Range move visible by !X\n     *  - Any: Prepare and Propose to {3, 4}"
    ],
    "functions": [
        "simpleUpdate",
        "incompletePrepare",
        "incompletePropose",
        "incompleteCommit",
        "paxosAndReadVerbs",
        "consistencyAfterWriteTimeoutTest",
        "readConsistencyAfterWriteTimeoutTest",
        "nonApplyingCasConsistencyAfterWriteTimeout",
        "mixedReadAndNonApplyingCasConsistencyAfterWriteTimeout",
        "mixedNonApplyingCasAndReadConsistencyAfterWriteTimeout",
        "assertCasNotApplied",
        "testSuccessfulWriteBeforeRangeMovement",
        "testConflictingWritesWithStaleRingInformation",
        "testSucccessfulWriteDuringRangeMovementFollowedByRead",
        "testSuccessfulWriteDuringRangeMovementFollowedByConflicting",
        "testIncompleteWriteFollowedBySuccessfulWriteWithStaleRingDuringRangeMovementFollowedByRead",
        "testIncompleteWriteFollowedBySuccessfulWriteWithStaleRingDuringRangeMovementFollowedByWrite",
        "pk",
        "pk",
        "pk",
        "debugOwnership",
        "debugPaxosState"
    ],
    "classes": [
        "CASTest"
    ]
}