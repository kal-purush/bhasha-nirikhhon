{
    "identifiers": [
        "org",
        "apache",
        "fop",
        "fo",
        "flow",
        "table",
        "java",
        "util",
        "org",
        "apache",
        "fop",
        "fo",
        "Constants",
        "org",
        "apache",
        "fop",
        "layoutmgr",
        "Keep",
        "org",
        "apache",
        "fop",
        "layoutmgr",
        "table",
        "TableRowIterator",
        "org",
        "apache",
        "fop",
        "traits",
        "MinOptMax",
        "org",
        "apache",
        "fop",
        "util",
        "BreakUtil",
        "FIRST_IN_PART",
        "GridUnit",
        "FIRST_IN_PART",
        "LAST_IN_PART",
        "GridUnit",
        "LAST_IN_PART",
        "gridUnits",
        "index",
        "bodyType",
        "height",
        "explicitHeight",
        "index",
        "bodyType",
        "gridUnits",
        "index",
        "index",
        "bodyType",
        "bodyType",
        "gridUnits",
        "gridUnits",
        "gu",
        "gridUnits",
        "gu",
        "gu",
        "setRowIndex",
        "index",
        "index",
        "bodyType",
        "getGridUnit",
        "getRow",
        "height",
        "mom",
        "height",
        "mom",
        "explicitHeight",
        "mom",
        "explicitHeight",
        "mom",
        "gridUnits",
        "column",
        "gridUnits",
        "get",
        "column",
        "column",
        "column",
        "gridUnits",
        "size",
        "gridUnits",
        "get",
        "column",
        "which",
        "which",
        "FIRST_IN_PART",
        "getGridUnit",
        "getFlag",
        "GridUnit",
        "FIRST_IN_PART",
        "which",
        "LAST_IN_PART",
        "getGridUnit",
        "getFlag",
        "GridUnit",
        "LAST_IN_PART",
        "which",
        "keep",
        "Keep",
        "KEEP_AUTO",
        "row",
        "getTableRow",
        "row",
        "keep",
        "Keep",
        "getKeep",
        "row",
        "getKeepWithPrevious",
        "gridUnit",
        "gridUnits",
        "gu",
        "gridUnit",
        "gu",
        "isPrimary",
        "keep",
        "keep",
        "compare",
        "gu",
        "getPrimary",
        "getKeepWithPrevious",
        "keep",
        "keep",
        "Keep",
        "KEEP_AUTO",
        "row",
        "getTableRow",
        "row",
        "keep",
        "Keep",
        "getKeep",
        "row",
        "getKeepWithNext",
        "gridUnit",
        "gridUnits",
        "gu",
        "gridUnit",
        "gu",
        "isEmpty",
        "gu",
        "getColSpanIndex",
        "gu",
        "isLastGridUnitRowSpan",
        "keep",
        "keep",
        "compare",
        "gu",
        "getPrimary",
        "getKeepWithNext",
        "keep",
        "row",
        "getTableRow",
        "keep",
        "Keep",
        "KEEP_AUTO",
        "row",
        "keep",
        "Keep",
        "getKeep",
        "row",
        "getKeepTogether",
        "keep",
        "breakBefore",
        "Constants",
        "EN_AUTO",
        "gridUnit",
        "gridUnits",
        "gu",
        "gridUnit",
        "gu",
        "isPrimary",
        "breakBefore",
        "BreakUtil",
        "compareBreakClasses",
        "breakBefore",
        "gu",
        "getPrimary",
        "getBreakBefore",
        "breakBefore",
        "breakAfter",
        "Constants",
        "EN_AUTO",
        "gridUnit",
        "gridUnits",
        "gu",
        "gridUnit",
        "gu",
        "isEmpty",
        "gu",
        "getColSpanIndex",
        "gu",
        "isLastGridUnitRowSpan",
        "breakAfter",
        "BreakUtil",
        "compareBreakClasses",
        "breakAfter",
        "gu",
        "getPrimary",
        "getBreakAfter",
        "breakAfter",
        "sb",
        "sb",
        "append",
        "index",
        "getBodyType",
        "TableRowIterator",
        "BODY",
        "sb",
        "append",
        "getBodyType",
        "TableRowIterator",
        "HEADER",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "append",
        "height",
        "sb",
        "append",
        "append",
        "explicitHeight",
        "sb",
        "append",
        "append",
        "gridUnits",
        "size",
        "append",
        "sb",
        "append",
        "sb",
        "toString"
    ],
    "literals": [
        "\"Illegal flag queried: \"",
        "\"EffRow {\"",
        "\" in body\"",
        "\" in header\"",
        "\" in footer\"",
        "\", \"",
        "\", \"",
        "\", \"",
        "\" gu\"",
        "\"}\""
    ],
    "variables": [
        "index",
        "bodyType",
        "height",
        "explicitHeight"
    ],
    "comments": [
        "TODO this is ugly, but we may eventually be able to do without that index"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "$Id: EffRow.java 1761020 2016-09-16 11:17:35Z ssteiner $",
        "* This class represents an effective row in a table and holds a list of grid units occupying\n * the row as well as some additional values.",
        "Indicates that the row is the first in a table-body",
        "Indicates that the row is the last in a table-body",
        "One of HEADER, FOOTER, BODY",
        "* Creates a new effective row instance.\n     * @param index index of the row\n     * @param bodyType type of body (one of HEADER, FOOTER, BODY as found on TableRowIterator)\n     * @param gridUnits the grid units this row is made of",
        "@return the index of the EffRow in the sequence of rows",
        "* @return an indicator what type of body this EffRow is in (one of HEADER, FOOTER, BODY\n     * as found on TableRowIterator)",
        "@return the table-row FO for this EffRow, or null if there is no table-row.",
        "* Returns the calculated height for this EffRow, including the cells'\n     * bpds/paddings/borders, and the table's border-separation.\n     *\n     * @return the row's height",
        "* Sets the calculated height for this EffRow, including everything (cells' bpds,\n     * paddings, borders, and border-separation).\n     *\n     * @param mom the calculated height",
        "@return the explicit height of the EffRow (as specified through properties)",
        "* Sets the height for this row that resulted from the explicit height properties specified\n     * by the user.\n     * @param mom the height",
        "@return the list of GridUnits for this EffRow",
        "* Returns the grid unit at a given position.\n     * @param column index of the grid unit in the row (zero based)\n     * @return the requested grid unit.",
        "* Returns the grid unit at a given position. In contrast to getGridUnit() this\n     * method returns null if there's no grid unit at the given position. The number of\n     * grid units for row x can be smaller than the number of grid units for row x-1.\n     * @param column index of the grid unit in the row (zero based)\n     * @return the requested grid unit or null if there's no grid unit at this position.",
        "* Returns a flag for this effective row. Only a subset of the flags on GridUnit is supported.\n     * The flag is determined by inspecting flags on the EffRow's GridUnits.\n     * @param which the requested flag (one of {@link EffRow#FIRST_IN_PART} or {@link\n     * EffRow#LAST_IN_PART})\n     * @return true if the flag is set",
        "* Returns the strength of the keep constraint if the enclosing (if any) fo:table-row element\n     * of this row, or if any of the cells starting on this row, have keep-with-previous set.\n     *\n     * @return the strength of the keep-with-previous constraint",
        "* Returns the strength of the keep constraint if the enclosing (if any) fo:table-row element\n     * of this row, or if any of the cells ending on this row, have keep-with-next set.\n     *\n     * @return the strength of the keep-with-next constraint",
        "* Returns the keep-together strength for this element. Note: The keep strength returned does\n     * not take the parent table's keeps into account!\n     * @return the keep-together strength",
        "* Returns the break class for this row. This is a combination of break-before set on\n     * the first children of any cells starting on this row.\n     * <p><strong>Note:</strong> this method doesn't take into account break-before set on\n     * the enclosing fo:table-row element, if any, as it must be ignored if the row\n     * belongs to a group of spanned rows (see XSL-FO 1.1, 7.20.2).\n     * <p><strong>Note:</strong> this works only after getNextKuthElements on the\n     * corresponding TableCellLM have been called!</p>\n     *\n     * @return one of {@link Constants#EN_AUTO}, {@link Constants#EN_COLUMN}, {@link\n     * Constants#EN_PAGE}, {@link Constants#EN_EVEN_PAGE}, {@link Constants#EN_ODD_PAGE}",
        "* Returns the break class for this row. This is a combination of break-after set on\n     * the last children of any cells ending on this row.\n     * <p><strong>Note:</strong> this method doesn't take into account break-after set on\n     * the enclosing fo:table-row element, if any, as it must be ignored if the row\n     * belongs to a group of spanned rows (see XSL-FO 1.1, 7.20.1).\n     * <p><strong>Note:</strong> this works only after getNextKuthElements on the\n     * corresponding TableCellLM have been called!</p>\n     *\n     * @return one of {@link Constants#EN_AUTO}, {@link Constants#EN_COLUMN}, {@link\n     * Constants#EN_PAGE}, {@link Constants#EN_EVEN_PAGE}, {@link Constants#EN_ODD_PAGE}",
        "{@inheritDoc}"
    ],
    "functions": [
        "EffRow",
        "getIndex",
        "getBodyType",
        "TableRow",
        "getTableRow",
        "MinOptMax",
        "getHeight",
        "setHeight",
        "MinOptMax",
        "getExplicitHeight",
        "setExplicitHeight",
        "getGridUnits",
        "GridUnit",
        "getGridUnit",
        "GridUnit",
        "safelyGetGridUnit",
        "getFlag",
        "Keep",
        "getKeepWithPrevious",
        "Keep",
        "getKeepWithNext",
        "Keep",
        "getKeepTogether",
        "getBreakBefore",
        "getBreakAfter",
        "toString"
    ],
    "classes": [
        "EffRow"
    ]
}