{
    "identifiers": [
        "errno",
        "glob",
        "multiprocessing",
        "optparse",
        "os",
        "re",
        "subprocess",
        "sys",
        "threading",
        "sys",
        "version",
        "is_py2",
        "queue",
        "queue",
        "queue",
        "multiprocessing",
        "cpu_count",
        "command",
        "open",
        "os",
        "devnull",
        "subprocess",
        "Popen",
        "command",
        "stdout",
        "subprocess",
        "PIPE",
        "stderr",
        "devnull",
        "proc",
        "communicate",
        "output",
        "decode",
        "path",
        "os",
        "makedirs",
        "path",
        "OSError",
        "e",
        "e",
        "errno",
        "errno",
        "EEXIST",
        "os",
        "path",
        "isdir",
        "path",
        "options",
        "binaries",
        "queue",
        "threading",
        "Lock",
        "options",
        "dumpsyms_bin",
        "q",
        "get",
        "options",
        "verbose",
        "print_lock",
        "binary",
        "GetCommandOutput",
        "dump_syms",
        "binary",
        "re",
        "match",
        "syms",
        "module_line",
        "print_lock",
        "binary",
        "q",
        "task_done",
        "os",
        "path",
        "join",
        "options",
        "symbols_dir",
        "module_line",
        "group",
        "module_line",
        "group",
        "mkdir_p",
        "output_path",
        "module_line",
        "group",
        "open",
        "os",
        "path",
        "join",
        "output_path",
        "symbol_file",
        "f",
        "write",
        "syms",
        "f",
        "close",
        "q",
        "task_done",
        "binary",
        "binaries",
        "q",
        "put",
        "binary",
        "_",
        "options",
        "jobs",
        "threading",
        "target",
        "_Worker",
        "t",
        "start",
        "q",
        "join",
        "optparse",
        "OptionParser",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "action",
        "help",
        "parser",
        "add_option",
        "CONCURRENT_TASKS",
        "action",
        "help",
        "parser",
        "add_option",
        "action",
        "help",
        "parser",
        "parse_args",
        "options",
        "dumpsyms_bin",
        "options",
        "symbols_dir",
        "options",
        "build_dir",
        "options",
        "binary",
        "os",
        "access",
        "options",
        "binary",
        "os",
        "X_OK",
        "options",
        "binary",
        "options",
        "clear",
        "shutil",
        "rmtree",
        "options",
        "symbols_dir",
        "options",
        "binary",
        "os",
        "path",
        "abspath",
        "options",
        "binary",
        "binaries",
        "glob",
        "glob",
        "binary",
        "GenerateSymbols",
        "options",
        "binaries",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "'2'",
        "'w'",
        "\"Generating symbols for %s\"",
        "\"MODULE [^ ]+ [^ ]+ ([0-9A-Fa-f]+) (.*)\\r\\n\"",
        "\"Failed to get symbols for %s\"",
        "\"%s.sym\"",
        "'w'",
        "''",
        "'--dumpsyms-bin'",
        "''",
        "'The dump_syms binary.'",
        "''",
        "'--build-dir'",
        "''",
        "'The build output directory.'",
        "''",
        "'--symbols-dir'",
        "''",
        "'The directory where to write the symbols file.'",
        "''",
        "'--binary'",
        "''",
        "'The path of the binary to generate symbols for.'",
        "''",
        "'--clear'",
        "'store_true'",
        "'Clear the symbols directory before writing new '",
        "'symbols.'",
        "'-j'",
        "'--jobs'",
        "'store'",
        "'int'",
        "'Number of parallel tasks to run.'",
        "'-v'",
        "'--verbose'",
        "'store_true'",
        "'Print verbose status output.'",
        "\"Required option --dumpsyms-bin missing.\"",
        "\"Required option --symbols-dir missing.\"",
        "\"Required option --build-dir missing.\"",
        "\"Required option --binary missing.\"",
        "\"Cannot find %s.\"",
        "\"Required binary: %s\"",
        "'__main__'"
    ],
    "variables": [
        "is_py2",
        "CONCURRENT_TASKS",
        "devnull",
        "proc",
        "output",
        "q",
        "print_lock",
        "dump_syms",
        "binary",
        "syms",
        "module_line",
        "output_path",
        "symbol_file",
        "f",
        "t",
        "t",
        "daemon",
        "parser",
        "options",
        "directories",
        "binary",
        "binaries"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Copyright (c) 2013 GitHub, Inc. All rights reserved.",
        "Copyright (c) 2013 The Chromium Authors. All rights reserved.",
        "Use of this source code is governed by a BSD-style license that can be",
        "found in the LICENSE file.",
        "",
        "Modified 2020 MuseScore BVBA and others",
        "Added option --dumpsyms-bin",
        "strip .pdb",
        "pdbs = []",
        "for directory in directories:",
        "pdbs += glob.glob(os.path.join(directory, '*.exe.pdb'))",
        "pdbs += glob.glob(os.path.join(directory, '*.dll.pdb'))",
        "GenerateSymbols(options, pdbs)"
    ],
    "docstrings": [
        "\"\"\"Convert pdb to sym for given directories\"\"\"",
        "\"\"\"Runs the command list, returning its output.\n\n  Prints the given command (which should be a list of one or more strings),\n  then runs it and returns its output (stdout) as a string.\n\n  From chromium_utils.\n  \"\"\"",
        "\"\"\"Simulates mkdir -p.\"\"\"",
        "\"\"\"Dumps the symbols of binary and places them in the given directory.\"\"\""
    ],
    "functions": [
        "GetCommandOutput",
        "mkdir_p",
        "GenerateSymbols",
        "_Worker",
        "main"
    ],
    "classes": []
}