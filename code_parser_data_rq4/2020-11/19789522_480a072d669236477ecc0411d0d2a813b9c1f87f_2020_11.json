{
    "identifiers": [
        "BaseTrie",
        "FoundNodeFunction",
        "PrioritizedTaskExecutor",
        "BranchNode",
        "ExtensionNode",
        "LeafNode",
        "Nibbles",
        "TrieNode",
        "onNode",
        "trie",
        "poolSize",
        "onNode",
        "PrioritizedTaskExecutor",
        "poolSize",
        "trie",
        "onNode",
        "trie",
        "root",
        "poolSize",
        "WalkStrategy",
        "onNode",
        "trie",
        "poolSize",
        "strategy",
        "root",
        "root",
        "resolve",
        "resolve",
        "root",
        "root",
        "node",
        "node",
        "key",
        "node",
        "LeafNode",
        "node",
        "ExtensionNode",
        "children",
        "node",
        "node",
        "node",
        "BranchNode",
        "children",
        "node",
        "b",
        "b",
        "b",
        "children",
        "child",
        "children",
        "child",
        "child",
        "key",
        "keyExtension",
        "childKey",
        "childRef",
        "childKey",
        "priority",
        "nodeRef",
        "key",
        "priority",
        "priority",
        "key",
        "taskCallback",
        "nodeRef",
        "taskCallback",
        "nodeRef",
        "childNode",
        "key",
        "node",
        "key",
        "childIndex",
        "priority",
        "node",
        "BranchNode",
        "node",
        "childIndex",
        "childRef",
        "key",
        "childKey",
        "childIndex",
        "priority",
        "childKey",
        "childRef",
        "childKey",
        "prio",
        "nodeRef",
        "node",
        "key",
        "node",
        "nodeRef",
        "node",
        "key"
    ],
    "literals": [
        "'..'",
        "'../baseTrie'",
        "'../prioritizedTaskExecutor'",
        "'../trieNode'",
        "'Expected branch node'",
        "'Could not get branch of childIndex'"
    ],
    "variables": [
        "strategy",
        "node",
        "children",
        "keyExtension",
        "childRef",
        "childKey",
        "priority",
        "childNode",
        "childRef",
        "childKey",
        "prio"
    ],
    "comments": [
        "Node has no children",
        "TODO check if we can remove this and default to `BranchNode` in function sig",
        "This copies the key to a new array."
    ],
    "docstrings": [
        "* Creates a new WalkStrategy\n   * @param onNode - The `FoundNodeFunction` to call if a node is found\n   * @param trie - The `Trie` to walk on",
        "* Async function to create and start a new walk over a trie.\n   * @param onNode - The `FoundNodeFunction to call if a node is found\n   * @param trie - The trie to walk on\n   * @param root - The root key to walk on\n   * @param poolSize - Task execution pool size to prevent OOM errors. Defaults to 500.",
        "* Run all children of a node. Priority of these nodes are the key length of the children\n   * @param node - Node to get all children of and call onNode on\n   * @param key - The current `key` which would yield the `node` when trying to get this node with a `get` operation.",
        "*\n   * @param nodeRef - Push a node reference to the event queue. This reference is a 32-byte keccak hash of the value corresponding to the `key`.\n   * @param key - The current key.\n   * @param priority - Optional priority, defaults to key length",
        "* Push a branch of a certain BranchNode to the event queue\n   * @param node - The node to select a branch on. Should be a BranchNode\n   * @param key - The current key which leads to the corresponding node\n   * @param childIndex - The child index to add to the event queue\n   * @param priority - Optional priority of the event, defaults to the total key length"
    ],
    "functions": [
        "newWalk",
        "startWalk",
        "allChildren",
        "pushNode",
        "onlyBranchIndex",
        "processNode"
    ],
    "classes": [
        "WalkStrategy"
    ]
}