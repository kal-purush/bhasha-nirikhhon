{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Godot",
        "InputType",
        "Horizontal",
        "Vertical",
        "Item",
        "Up",
        "Down",
        "Left",
        "Right",
        "InputType",
        "InputType",
        "InputType",
        "Horizontal",
        "InputType",
        "Vertical",
        "InputType",
        "Item",
        "InputType",
        "Up",
        "InputType",
        "Down",
        "InputType",
        "Left",
        "InputType",
        "Right",
        "Input",
        "IsActionPressed",
        "InputTypes",
        "InputType",
        "Left",
        "Input",
        "IsActionJustPressed",
        "InputTypes",
        "InputType",
        "Left",
        "Input",
        "IsActionPressed",
        "InputTypes",
        "InputType",
        "Right",
        "Input",
        "IsActionJustPressed",
        "InputTypes",
        "InputType",
        "Right",
        "Input",
        "IsActionPressed",
        "InputTypes",
        "InputType",
        "Up",
        "Input",
        "IsActionJustPressed",
        "InputTypes",
        "InputType",
        "Up",
        "Input",
        "IsActionPressed",
        "InputTypes",
        "InputType",
        "Down",
        "Input",
        "IsActionJustPressed",
        "InputTypes",
        "InputType",
        "Down",
        "IsLeftArrowPressed",
        "IsRightArrowPressed",
        "IsUpArrowPressed",
        "IsDownArrowPressed",
        "Input",
        "IsActionPressed",
        "InputTypes",
        "InputType",
        "Item",
        "value",
        "min",
        "IsSafelyLessThan",
        "value",
        "min",
        "min",
        "value",
        "value",
        "max",
        "IsSafelyGreaterThan",
        "value",
        "max",
        "max",
        "value",
        "value",
        "min",
        "max",
        "SafelyClampMin",
        "SafelyClampMax",
        "value",
        "max",
        "min",
        "f1",
        "f2",
        "f1",
        "f2",
        "Mathf",
        "IsEqualApprox",
        "f1",
        "f2",
        "f1",
        "f2",
        "f1",
        "f2",
        "Mathf",
        "IsEqualApprox",
        "f1",
        "f2",
        "InputType",
        "inputType",
        "ignoreExclusions",
        "InputTypes",
        "value",
        "Value",
        "Input",
        "IsActionPressed",
        "value",
        "Key",
        "inputType",
        "isActionPressed",
        "activeInclusions",
        "Add",
        "value",
        "isActionPressed",
        "activeExclusions",
        "Add",
        "value",
        "activeInclusions",
        "Any",
        "ignoreExclusions",
        "activeExclusions",
        "Except",
        "activeInclusions",
        "Any"
    ],
    "literals": [
        "\"move_left\"",
        "\"move_right\"",
        "\"move_up\"",
        "\"move_down\"",
        "\"use_item\"",
        "\"move_up\"",
        "\"move_down\"",
        "\"move_left\"",
        "\"move_right\""
    ],
    "variables": [
        "InputTypes",
        "activeInclusions",
        "activeExclusions",
        "isActionPressed"
    ],
    "comments": [
        "Whether or not the specified input type is the only active input.",
        "</summary>",
        "<param name=\"inputType\"></param>",
        "<param name=\"ignoreExclusions\">if true, bypass exclusivity requirement for active input",
        "<br/>",
        "Useful when the desired action from the specified input is already being executed,",
        "since ignoring exclusivity prevents said action from being canceled when",
        "an excluded input becomes active.",
        "<br/>",
        "For example, holding the right arrow key down",
        "and running, and you want to disable jumping (space bar) while running. If the",
        "player is already running, and exclusivity of input is required, i.e., in order",
        "to run, ONLY the right arrow key may be pressed, then pressing the space bar will",
        "cancel the running because the input is no longer exclusive. In this case you would",
        "want to IGNORE exclusivity, continuing to run even when the space bar is pressed in",
        "addition to the right arrow key.",
        "<br/>",
        "Then as long as you implement the same thing for running as with jumping, then jumping",
        "will not work when running for the same reason; i.e., the space bar requires exclusivity.",
        "The exception for ignoring exclusions would be if already jumping; however, in this example",
        "the player is running, so exclusions would NOT be ignored for jumping, therefore jumping",
        "would be disabled while running because the right arrow key is already being pressed.",
        "</param>",
        "<returns></returns>",
        "If not ignoring exclusions, active exclusions must be unique; i.e., must not be an active inclusion.",
        "E.g., InputType.Vertical & InputType.Up both contain \"move_up\", so if the specified input type is",
        "Vertical and \"move_up\" is an active inclusion, then InputType.Up [\"move_up\"] will not count as an",
        "active exclusion, since it isn't unique (even though it is active)."
    ],
    "docstrings": [
        "<summary>"
    ],
    "functions": [
        "IsLeftArrowPressed",
        "WasLeftArrowPressedOnce",
        "IsRightArrowPressed",
        "WasRightArrowPressedOnce",
        "IsUpArrowPressed",
        "WasUpArrowPressedOnce",
        "IsDownArrowPressed",
        "WasDownArrowPressedOnce",
        "IsAnyHorizontalArrowPressed",
        "IsAnyVerticalArrowPressed",
        "IsItemKeyPressed",
        "SafelyClampMin",
        "SafelyClampMax",
        "SafelyClamp",
        "IsSafelyLessThan",
        "IsSafelyGreaterThan",
        "IsExclusivelyActiveUnless"
    ],
    "classes": [
        "Tools"
    ]
}