{
    "identifiers": [],
    "literals": [],
    "variables": [],
    "comments": [
        "import { Directory, File } from '../models';\nimport { app } from '../app';\n\nimport supertest from 'supertest';\nimport jwt from 'jsonwebtoken';\nimport fs from 'fs';\n\nimport { config } from '../config';\n\nconst allAccessToken = jwt.sign({ scope: 'filebank:read filebank:write filebank:delete' }, 'v3rys3cr3tK3y');\n\nexport const createDirectory = (obj: any) => new Directory(obj).save();\nexport const createFile = (obj: any) => new File(obj).save();\n\ntype BaseCallback = (...filePieces: string[]) => void;\n\nconst getRoutes = (fileVerifyCb: BaseCallback) => {\n  describe('GET route', () => {\n    it('can list items in root directory', async () => {\n      await Promise.all([\n        createDirectory({ name: 'test', refId: 'test' }),\n        createDirectory({ name: 'test2', refId: 'test2' }),\n        createDirectory({ name: 'test3', refId: 'test3' }),\n        createFile({ name: 'test.txt', refId: 'test.txt', mimetype: 'application/octet-stream' }),\n        createFile({ name: 'test2.txt', refId: 'test2.txt', mimetype: 'application/octet-stream' }),\n        createFile({ name: 'test3.txt', refId: 'test3.txt', mimetype: 'application/octet-stream' }),\n      ]);\n      return supertest(app)\n        .get('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.length).toEqual(6);\n        });\n    });\n\n    it('can list items in subdirectory', async () => {\n      const directory = await createDirectory({ name: 'subdir', refId: 'subdir' });\n      await Promise.all([\n        createDirectory({ name: 'test', refId: 'test', parent: directory._id }),\n        createDirectory({ name: 'test2', refId: 'test2', parent: directory._id }),\n        createFile({ name: 'test.txt', refId: 'test.txt', mimetype: 'application/octet-stream', directory: directory._id }),\n        createFile({ name: 'test2.txt', refId: 'test2.txt', mimetype: 'application/octet-stream', directory: directory._id }),\n      ]);\n      return supertest(app)\n        .get('/subdir')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.length).toEqual(4);\n        });\n    });\n\n    it('cannot list items in non-existing directory', async () => {\n      await supertest(app)\n        .get('/nonexisting')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .expect(404);\n      expect(await fileVerifyCb('nonexisting')).toEqual(false);\n    });\n\n    it('can get file content', async () => {\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('type', 'file')\n        .attach('file', `${__dirname}/resources/64-64.jpg`)\n        .expect('Content-Type', /json/)\n        .expect(200);\n      expect(await fileVerifyCb('64-64.jpg')).toEqual(true);\n      await supertest(app)\n        .get('/64-64.jpg')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .expect(200)\n        .expect('Content-Type', 'image/jpeg')\n        .then((res) => {\n          expect(res.body instanceof Buffer).toBeTruthy();\n          const file = fs.readFileSync(`${__dirname}/resources/64-64.jpg`);\n          expect(res.body.length).toEqual(file.length);\n        });\n    });\n  });\n};\n\nconst postRoutes = (fileVerifyCb: BaseCallback) => {\n  describe('POST route', () => {\n    it('can create directory on fs root', async () => {\n      const dir = await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ name: 'test-1', type: 'directory' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('test-1')).toBeTruthy();\n          expect(res.body.type).toEqual('directory');\n        });\n      expect(await fileVerifyCb('test-1')).toEqual(true);\n      return dir;\n    });\n\n    it('can create directory on subdir', async () => {\n      const subdir = await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ name: 'test-2', type: 'directory' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('test-2')).toBe(true);\n          expect(res.body.type).toEqual('directory');\n          return res.body;\n        });\n      const d = await supertest(app)\n        .post('/test-2')\n        .send({ name: 'test-3', type: 'directory' })\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('test-2/test-3')).toBe(true);\n          expect(res.body.type).toEqual('directory');\n          expect(res.body.parent).toEqual(subdir._id);\n        });\n      expect(await fileVerifyCb('test-2', 'test-3')).toEqual(true);\n      return d;\n    });\n\n    it('cannot create directory with invalid metadata', async () => {\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({\n          name: 'faildir',\n          type: 'directory',\n          metadata: {\n            deepMeta: { thing: 'this should be number', another: 2, third: false },\n            metaField: 'nottrue',\n          },\n          schema: 'Test',\n        })\n        .expect('Content-Type', /json/)\n        .expect(400);\n      expect(await fileVerifyCb('faildir')).toEqual(false);\n    });\n\n    it('can create file on root dir', async () => {\n      const metadata = {\n        deepMeta: { thing: 1, another: 2, third: 'third' },\n        metaField: true,\n      };\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('metadata', JSON.stringify(metadata))\n        .field('type', 'file')\n        .field('schema', 'Test')\n        .attach('file', `${__dirname}/resources/fire.jpg`)\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.mimetype).toEqual('image/jpeg');\n          expect(res.body.refId.startsWith('fire.jpg')).toBe(true);\n          expect(res.body.type).toEqual('file');\n          expect(res.body.metadata).toEqual(metadata);\n          expect(res.body.metadata.deepMeta.another).toEqual(2);\n        });\n      expect(await fileVerifyCb('fire.jpg')).toEqual(true);\n    });\n\n    it('can create file on sub dir', async () => {\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ name: 'test-4', type: 'directory' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('test-4')).toEqual(true);\n          expect(res.body.type).toEqual('directory');\n        });\n      const metadata = {\n        deepMeta: { thing: 1, another: 2, third: 'third' },\n        metaField: true,\n      };\n      await supertest(app)\n        .post('/test-4')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('metadata', JSON.stringify(metadata))\n        .field('type', 'file')\n        .field('schema', 'Test')\n        .attach('file', `${__dirname}/resources/fire.pdf`)\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.mimetype).toEqual('application/pdf');\n          expect(res.body.refId.startsWith('test-4/fire.pdf')).toEqual(true);\n          expect(res.body.type).toEqual('file');\n          expect(res.body.metadata).toEqual(metadata);\n          expect(res.body.metadata.deepMeta.third).toEqual('third');\n        });\n      expect(await fileVerifyCb('test-4', 'fire.pdf')).toEqual(true);\n    });\n\n    it('can create file with different name', async () => {\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('metadata', JSON.stringify({\n          deepMeta: { thing: 1, another: 2, third: 'third' },\n          metaField: true,\n        }))\n        .field('type', 'file')\n        .field('name', 'another-fire.jpg')\n        .field('schema', 'Test')\n        .attach('file', `${__dirname}/resources/fire.jpg`)\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.mimetype).toEqual('image/jpeg');\n          expect(res.body.refId.startsWith('another-fire.jpg')).toEqual(true);\n          expect(res.body.type).toEqual('file');\n          expect(res.body.metadata.deepMeta.another).toEqual(2);\n        });\n      expect(await fileVerifyCb('another-fire.jpg')).toEqual(true);\n    });\n\n    it('cannot create file when schema is missing and required', async () => {\n      config.schemaRequired = true;\n      try {\n        const promise = await supertest(app)\n          .post('/')\n          .set('Authorization', `Bearer ${allAccessToken}`)\n          .field('metadata', JSON.stringify({}))\n          .field('type', 'file')\n          .attach('file', `${__dirname}/resources/fire.pdf`)\n          .expect('Content-Type', /json/)\n          .expect(400);\n        expect(await fileVerifyCb('fire.pdf')).toEqual(false);\n        return promise;\n      } finally {\n        config.schemaRequired = false;\n      }\n    });\n\n    it('cannot create directory when schema is missing and required', async () => {\n      config.schemaRequired = true;\n      try {\n        await supertest(app)\n          .post('/')\n          .set('Authorization', `Bearer ${allAccessToken}`)\n          .send({\n            name: 'faildir',\n            type: 'directory',\n            metadata: {\n              deepMeta: { thing: 1, another: 2, third: 'third' },\n              metaField: true,\n            },\n          })\n          .expect('Content-Type', /json/)\n          .expect(400);\n      } finally {\n        config.schemaRequired = false;\n      }\n    });\n  });\n};\n\nconst putMetaRoutes = (fileVerifyCb: BaseCallback) => {\n  describe('PUT .meta route', () => {\n    it('cannot create file with invalid metadata', async () => {\n      const promise = await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('metadata', JSON.stringify({\n          deepMeta: { thing: 'this should be number', another: 2, third: false },\n          metaField: 'nottrue',\n        }))\n        .field('type', 'file')\n        .field('schema', 'Test')\n        .attach('file', `${__dirname}/resources/fire.pdf`)\n        .expect('Content-Type', /json/)\n        .expect(400);\n      expect(await fileVerifyCb('fire.pdf')).toEqual(false);\n      return promise;\n    });\n\n    it('can update metadata for directory', async () => {\n      const dir = await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({\n          name: 'metadir',\n          type: 'directory',\n          metadata: {\n            deepMeta: { thing: 1, another: 2, third: 'third' },\n            metaField: true,\n          },\n          schema: 'Test',\n        })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('metadir')).toEqual(true);\n          expect(res.body.type).toEqual('directory');\n          return res.body;\n        });\n      return await supertest(app)\n        .put(`/${dir._id}.meta`)\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({\n          deepMeta: { thing: 2, another: 4, third: 'fourth' },\n          metaField: false,\n          schema: 'Test',\n        })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.metadata.metaField).toEqual(false);\n          expect(res.body.metadata.deepMeta.thing).toEqual(2);\n          expect(res.body.metadata.deepMeta.another).toEqual(4);\n          expect(res.body.metadata.deepMeta.third).toEqual('fourth');\n        });\n    });\n\n    it('cannot update invalid metadata for directory', async () => {\n      const dir = await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({\n          name: 'metadir-2',\n          type: 'directory',\n          metadata: {\n            deepMeta: { thing: 1, another: 2, third: 'third' },\n            metaField: true,\n          },\n          schema: 'Test',\n        })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('metadir-2')).toEqual(true);\n          expect(res.body.type).toEqual('directory');\n          return res.body;\n        });\n      await supertest(app)\n        .put(`/${dir._id}.meta`)\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({\n          deepMeta: { thing: 'should be number', another: 4, third: false },\n          metaField: 'should be boolean',\n          schema: 'Test',\n        })\n        .expect('Content-Type', /json/)\n        .expect(400);\n    });\n\n    it('can update file metadata', async () => {\n      const file = await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('metadata', JSON.stringify({\n          deepMeta: { thing: 1, another: 2, third: 'third' },\n          metaField: true,\n        }))\n        .field('type', 'file')\n        .field('name', 'meta.pdf')\n        .field('schema', 'Test')\n        .attach('file', `${__dirname}/resources/fire.pdf`)\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then(res => res.body);\n      await supertest(app)\n        .put(`/${file._id}.meta`)\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({\n          deepMeta: { thing: 2, another: 4, third: 'fourth' },\n          metaField: false,\n          schema: 'Test',\n        })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.metadata.metaField).toEqual(false);\n          expect(res.body.metadata.deepMeta.thing).toEqual(2);\n          expect(res.body.metadata.deepMeta.another).toEqual(4);\n          expect(res.body.metadata.deepMeta.third).toEqual('fourth');\n        });\n    });\n\n    it('cannot update file with invalid metadata', async () => {\n      const file = await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('metadata', JSON.stringify({\n          deepMeta: { thing: 1, another: 2, third: 'third' },\n          metaField: true,\n        }))\n        .field('type', 'file')\n        .field('name', 'meta.pdf')\n        .field('schema', 'Test')\n        .attach('file', `${__dirname}/resources/fire.pdf`)\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then(res => res.body);\n      await supertest(app)\n        .put(`/${file._id}.meta`)\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({\n          deepMeta: { thing: 'should be number', another: 4, third: 'fourth' },\n          metaField: 'should be boolean',\n          schema: 'Test',\n        })\n        .expect('Content-Type', /json/)\n        .expect(400);\n    });\n\n    it('cannot update metadata non-existing item', async () => {\n      await supertest(app)\n        .put('/ffffffffffffffffffffffff.meta')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({\n          deepMeta: { thing: 2, another: 4, third: 'fourth' },\n          metaField: false,\n          schema: 'Test',\n        })\n        .expect(404);\n    });\n  });\n};\n\nconst deleteRoutes = (fileVerifyCb: BaseCallback) => {\n  describe('DELETE route', () => {\n    it('can delete directory on fs root', async () => {\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ name: 'deletethis', type: 'directory' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('deletethis')).toEqual(true);\n          expect(res.body.type).toEqual('directory');\n        });\n      await supertest(app)\n        .delete('/deletethis')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .expect(204);\n      expect(await fileVerifyCb('deletethis')).toEqual(false);\n    });\n\n    it('cannot delete non-existing directory', async () => {\n      await supertest(app)\n        .delete('/nonexisting')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .expect(404);\n      expect(await fileVerifyCb('nonexisting')).toEqual(false);\n    });\n\n    it('can delete file on fs root', async () => {\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('type', 'file')\n        .attach('file', `${__dirname}/resources/64-64.jpg`)\n        .expect('Content-Type', /json/)\n        .expect(200);\n      expect(await fileVerifyCb('64-64.jpg')).toEqual(true);\n      await supertest(app)\n        .delete('/64-64.jpg')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .expect(204);\n      expect(await fileVerifyCb('64-64.jpg')).toEqual(false);\n    });\n\n    it('cannot delete non-existing file', async () => {\n      await supertest(app)\n        .delete('/nonexisting.jpg')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .expect(404);\n      expect(await fileVerifyCb('nonexisting.jpg')).toEqual(false);\n    });\n  });\n};\n\nconst putRoutes = (fileVerifyCb: BaseCallback) => {\n  describe('PUT route', () => {\n    it('can move file', async () => {\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('type', 'file')\n        .field('name', 'moveme.jpg')\n        .attach('file', `${__dirname}/resources/64-64.jpg`)\n        .expect('Content-Type', /json/)\n        .expect(200);\n      expect(await fileVerifyCb('moveme.jpg')).toEqual(true);\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ name: 'movehere', type: 'directory' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('movehere')).toEqual(true);\n          expect(res.body.type).toEqual('directory');\n        });\n      await supertest(app)\n        .put('/moveme.jpg')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ target: '/movehere' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('movehere/moveme.jpg')).toEqual(true);\n          expect(res.body.type).toEqual('file');\n        });\n      expect(await fileVerifyCb('movehere', 'moveme.jpg')).toEqual(true);\n    });\n\n    it('cannot move file to nonexisting directory', async () => {\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('type', 'file')\n        .field('name', 'moveme2.jpg')\n        .attach('file', `${__dirname}/resources/64-64.jpg`)\n        .expect('Content-Type', /json/)\n        .expect(200);\n      expect(await fileVerifyCb('moveme2.jpg')).toEqual(true);\n      await supertest(app)\n        .put('/moveme2.jpg')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ target: '/movehere' })\n        .expect(404);\n      expect(await fileVerifyCb('movehere', 'moveme2.jpg')).toEqual(false);\n    });\n\n    it('can move directory', async () => {\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ name: 'movethisdir', type: 'directory' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('movethisdir')).toEqual(true);\n          expect(res.body.type).toEqual('directory');\n        });\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ name: 'moveheredir', type: 'directory' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('moveheredir')).toEqual(true);\n          expect(res.body.type).toEqual('directory');\n        });\n      await supertest(app)\n        .post('/movethisdir')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('type', 'file')\n        .field('name', 'moveme.jpg')\n        .attach('file', `${__dirname}/resources/64-64.jpg`)\n        .expect('Content-Type', /json/)\n        .expect(200);\n      expect(await fileVerifyCb('movethisdir', 'moveme.jpg')).toEqual(true);\n      await supertest(app)\n        .put('/movethisdir')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ target: '/moveheredir' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('moveheredir/movethisdir')).toEqual(true);\n          expect(res.body.type).toEqual('directory');\n        });\n      expect(await fileVerifyCb('moveheredir', 'movethisdir')).toEqual(true);\n    });\n\n    it('can rename directory', async () => {\n      await supertest(app)\n        .post('/')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ name: 'movethisdir1', type: 'directory' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('movethisdir1')).toEqual(true);\n          expect(res.body.type).toEqual('directory');\n        });\n      await supertest(app)\n        .post('/movethisdir1')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .field('type', 'file')\n        .field('name', 'moveme.jpg')\n        .attach('file', `${__dirname}/resources/64-64.jpg`)\n        .expect('Content-Type', /json/)\n        .expect(200);\n      expect(await fileVerifyCb('movethisdir1', 'moveme.jpg')).toEqual(true);\n      await supertest(app)\n        .put('/movethisdir1')\n        .set('Authorization', `Bearer ${allAccessToken}`)\n        .send({ target: '/moveheredir1' })\n        .expect('Content-Type', /json/)\n        .expect(200)\n        .then((res) => {\n          expect(res.body.refId.startsWith('moveheredir1')).toEqual(true);\n          expect(res.body.type).toEqual('directory');\n        });\n      expect(await fileVerifyCb('moveheredir1')).toEqual(true);\n    });\n  });\n};\n\nmodule.exports = {\n  getRoutes,\n  postRoutes,\n  putMetaRoutes,\n  deleteRoutes,\n  putRoutes,\n};"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}