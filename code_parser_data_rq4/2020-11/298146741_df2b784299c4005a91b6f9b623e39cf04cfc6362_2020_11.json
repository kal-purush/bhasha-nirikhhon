{
    "identifiers": [
        "frontcontroller",
        "MVC",
        "builder",
        "FlyingVenueBuilder",
        "builder",
        "RacingTrackBuilder",
        "builder",
        "StadiumBuilder",
        "builder",
        "StadiumDirector",
        "entity",
        "SportsMan",
        "entity",
        "Stadium",
        "entity",
        "ScoreBoard",
        "java",
        "util",
        "Authorization",
        "name",
        "flag",
        "temp",
        "Authorization",
        "name",
        "equals",
        "temp",
        "name",
        "equals",
        "Authorization",
        "moveToStadium",
        "moveToSportsMan",
        "name",
        "flag",
        "flag",
        "moveToScoreBoard",
        "name",
        "man",
        "name",
        "testView",
        "testController",
        "man",
        "testView",
        "testController",
        "printDetails",
        "name",
        "scoreBoard",
        "scoreBoardView",
        "scoreBoardController",
        "scoreBoard",
        "scoreBoardView",
        "scoreBoardController",
        "printDetails",
        "scoreBoard",
        "stadiumView",
        "stadiumConstractor",
        "racingTrackBuilder",
        "flyingVenueBuilder",
        "stadiumConstractor",
        "CompetitionAreaCount",
        "SpectatorAreaCount",
        "setStadiumBuilder",
        "racingTrackBuilder",
        "stadiumConstractor",
        "constructStadium",
        "stadiumController1",
        "stadiumConstractor",
        "stadiumView",
        "stadiumConstractor",
        "CompetitionAreaCount",
        "SpectatorAreaCount",
        "setStadiumBuilder",
        "flyingVenueBuilder",
        "stadiumConstractor",
        "constructStadium",
        "stadiumController2",
        "stadiumConstractor",
        "stadiumView"
    ],
    "literals": [
        "\"root\"",
        "\"Healy\"",
        "\"Gerald\"",
        "\"Trice\"",
        "\"Yennefa\"",
        "\"Kant\"",
        "\"你好，管理员！--查看场地信息--\"",
        "\"你好，运动员！--查看自己的个人信息--\"",
        "\"你好，来宾！--查看比赛情况--\""
    ],
    "variables": [],
    "comments": [
        "否则不在名单之中",
        "如果主main里面有全局变量，这里man就可以直接由全局变量给出。",
        "这里年龄随便给了。",
        "这个scoreBoard还是应该先用callback模式去构建一下增添信息",
        "由于另一个同学的计分板是需要和观众互动（需要输入），建议这个直接写到主main里面展示。",
        "到时候这个scoreBoard作为一个全局变量，改动这里的代码，让用户先输入有具体输赢战绩再展示。",
        "这里的两个构造器builder直接默认给出。",
        "主main合并可以由全局变量给出。",
        "Stadium的construct接口直接打印输出信息。。。。View再调用就显得多余，要不要改一改Builder?",
        "stadiumController1.printDetails();",
        "stadiumController2.printDetails();"
    ],
    "docstrings": [
        "* 这个数组模拟数据库，通过名字来验证是否有权利查看对应信息",
        "* 这里情况model是和数据库的表对应，\n     * 但这里没有直接new一个对象代替，\n     * 没有数据库的情况下要在构建controller{model,view}加很多参数\n     * 用在这个项目里面挺不合理的。\n     * 这个对象的构建过程建议在最后合并的时候由其他设计模式先构建。\n     * 此处给出的model的构建方法都不太合理，展示的信息效果不是很好。\n     * @param name",
        "* 管理员",
        "* 普通运动员",
        "* 其他人"
    ],
    "functions": [
        "identityVerification",
        "moveToSportsMan",
        "moveToScoreBoard",
        "moveToStadium"
    ],
    "classes": [
        "FrontController"
    ]
}