{
    "identifiers": [
        "Linq",
        "HashLib",
        "NBitcoin",
        "DataEncoders",
        "NBitcoin",
        "IBitcoinSerializable",
        "data",
        "BloomLength",
        "data",
        "data",
        "Length",
        "BloomLength",
        "ArgumentException",
        "BloomLength",
        "nameof",
        "data",
        "data",
        "CopyBloom",
        "data",
        "Bloom",
        "bloom",
        "i",
        "data",
        "Length",
        "i",
        "data",
        "i",
        "bloom",
        "data",
        "i",
        "input",
        "Keccak256",
        "input",
        "i",
        "i",
        "hashBytes",
        "i",
        "hashBytes",
        "i",
        "low8Bits",
        "high3Bits",
        "SetBit",
        "index",
        "input",
        "HashFactory",
        "Crypto",
        "SHA3",
        "CreateKeccak256",
        "ComputeBytes",
        "input",
        "GetBytes",
        "test",
        "Bloom",
        "compare",
        "Add",
        "test",
        "Test",
        "compare",
        "Bloom",
        "bloom",
        "Bloom",
        "bloom",
        "ToBytes",
        "copy",
        "Or",
        "Equals",
        "copy",
        "index",
        "index",
        "index",
        "bitInByteIndex",
        "data",
        "byteIndex",
        "mask",
        "BitcoinStream",
        "stream",
        "stream",
        "Serializing",
        "CopyBloom",
        "data",
        "stream",
        "ReadWrite",
        "b",
        "BloomLength",
        "stream",
        "ReadWrite",
        "b",
        "data",
        "b",
        "CopyBloom",
        "data",
        "Encoders",
        "Hex",
        "EncodeData",
        "data",
        "Bloom",
        "obj1",
        "Bloom",
        "obj2",
        "ReferenceEquals",
        "obj1",
        "ReferenceEquals",
        "obj2",
        "SequenceEqual",
        "obj1",
        "data",
        "obj2",
        "data",
        "Bloom",
        "obj1",
        "Bloom",
        "obj2",
        "obj1",
        "obj2",
        "obj",
        "Equals",
        "obj",
        "Bloom",
        "Bloom",
        "obj",
        "ReferenceEquals",
        "obj",
        "ReferenceEquals",
        "obj",
        "obj",
        "HashCode",
        "Combine",
        "data",
        "bloom",
        "BloomLength",
        "Buffer",
        "BlockCopy",
        "bloom",
        "result",
        "BloomLength",
        "result",
        "BloomLength",
        "ToBytes",
        "maxSize",
        "i",
        "b",
        "Length",
        "i",
        "b",
        "i",
        "zeros",
        "MaxValue",
        "j",
        "maxSize",
        "b",
        "c",
        "j",
        "zeros",
        "c",
        "j",
        "b",
        "i",
        "zeros",
        "zeros",
        "MaxValue",
        "zeros",
        "zeros",
        "j",
        "maxSize",
        "b",
        "c",
        "j",
        "zeros",
        "j",
        "Copy",
        "c",
        "res",
        "j",
        "res",
        "data",
        "data",
        "Length",
        "Bloom",
        "BloomLength",
        "Bloom",
        "data",
        "Bloom",
        "BloomLength",
        "i",
        "data",
        "Length",
        "i",
        "data",
        "i",
        "zeros",
        "b",
        "j",
        "i",
        "data",
        "Length",
        "b",
        "j",
        "data",
        "i",
        "j",
        "Bloom",
        "BloomLength",
        "InvalidOperationException",
        "Bloom",
        "b",
        "GetCompressedBloom",
        "Length",
        "BitcoinStream",
        "stream",
        "Bloom",
        "bloom",
        "MaxValue",
        "Bloom",
        "BloomLength",
        "maxSerializedSize",
        "InvalidOperationException",
        "nameof",
        "ReadWriteCompressed",
        "maxSerializedSize",
        "stream",
        "Serializing",
        "bloom",
        "GetCompressedBloom",
        "ser",
        "Length",
        "stream",
        "ReadWrite",
        "len",
        "stream",
        "ReadWrite",
        "ser",
        "stream",
        "ReadWrite",
        "len",
        "len",
        "NotImplementedException",
        "len",
        "stream",
        "ReadWrite",
        "c",
        "bloom",
        "Bloom",
        "GetDecompressedBloom",
        "c"
    ],
    "literals": [
        "\"The decompressed bloom filter is not the expected length.\"",
        "\"The bloom compression format is not supported.\""
    ],
    "variables": [
        "BloomLength",
        "data",
        "i",
        "hashBytes",
        "i",
        "low8Bits",
        "high3Bits",
        "index",
        "compare",
        "copy",
        "byteIndex",
        "bitInByteIndex",
        "mask",
        "b",
        "b",
        "result",
        "maxSize",
        "b",
        "c",
        "zeros",
        "j",
        "i",
        "res",
        "b",
        "j",
        "i",
        "zeros",
        "maxSerializedSize",
        "ser",
        "len",
        "len",
        "c"
    ],
    "comments": [
        "Type representation of data used in a bloom filter.",
        "</summary>",
        "Length of the bloom data in bytes. 2048 bits.",
        "</summary>",
        "The actual bloom value represented as a byte array.",
        "</summary>",
        "Given this and another bloom, bitwise-OR all the data to get a bloom filter representing a range of data.",
        "</summary>",
        "Add some input to the bloom filter.",
        "</summary>",
        "<remarks>",
        "From the Ethereum yellow paper (yellowpaper.io):",
        "M3:2048 is a specialised Bloom filter that sets three bits",
        "out of 2048, given an arbitrary byte series. It does this through",
        "taking the low-order 11 bits of each of the first three pairs of",
        "bytes in a Keccak-256 hash of the byte series.",
        "</remarks>",
        "for first 3 pairs, calculate value of first 11 bits",
        "AND with 2047 wipes any bits higher than our desired 11.",
        "Returns a 32-byte Keccak256 hash of the given bytes.",
        "</summary>",
        "<param name=\"input\"></param>",
        "<returns></returns>",
        "Determine whether some input is possibly contained within the filter.",
        "</summary>",
        "<param name=\"test\">The byte array to test.</param>",
        "<returns>Whether this data could be contained within the filter.</returns>",
        "Determine whether a second bloom is possibly contained within the filter.",
        "</summary>",
        "<param name=\"bloom\">The second bloom to test.</param>",
        "<returns>Whether this data could be contained within the filter.</returns>",
        "Sets the specific bit to 1 within our 256-byte array.",
        "</summary>",
        "<param name=\"index\">Index (0-2047) of the bit to assign to 1.</param>",
        "Returns the raw bytes of this filter.",
        "</summary>",
        "<returns></returns>",
        "Compresses a bloom filter to the following encoding:",
        "(length of encoding) [[(number of zeros)(explicit byte) ...]",
        "</summary>",
        "<param name=\"maxSize\">The maximum size of the compressed bytes.</param>",
        "<returns>The compressed bytes  or <c>null</c> if <paramref name=\"maxSize\"/> is exceeded.</returns>",
        "The compressed version should be shorter than the uncompressed version.",
        "Derives a bloom filter by decompressing the following encoding:",
        "(length of encoding) [[(number of zeros)(explicit byte) ...]",
        "</summary>",
        "<param name=\"data\">The data to decompress.</param>",
        "<returns>The bloom object.</returns>",
        "Ensure that the length can be serialized using a single byte.",
        "Writing to stream.",
        "Reading from stream.",
        "A value of 0 can be used to support larger blooms in the future. For now its not supported."
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "Bloom",
        "Bloom",
        "Or",
        "Add",
        "Keccak256",
        "Test",
        "Test",
        "SetBit",
        "ReadWrite",
        "ToBytes",
        "ToString",
        "Equals",
        "Equals",
        "GetHashCode",
        "CopyBloom",
        "GetCompressedBloom",
        "Bloom",
        "GetDecompressedBloom",
        "GetCompressedSize",
        "ReadWriteCompressed"
    ],
    "classes": [
        "Bloom",
        "BloomStreamExt"
    ]
}