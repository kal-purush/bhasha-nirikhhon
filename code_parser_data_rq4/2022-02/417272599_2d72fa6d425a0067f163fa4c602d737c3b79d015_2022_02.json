{
    "identifiers": [
        "rospy",
        "std_msgs",
        "msg",
        "Header",
        "sensor_msgs",
        "msg",
        "PointCloud2",
        "PointField",
        "sensor_msgs",
        "point_cloud2",
        "pc2",
        "ros_numpy",
        "math",
        "pi",
        "cos",
        "sin",
        "numpy",
        "np",
        "rospy",
        "init_node",
        "anonymous",
        "rospy",
        "Rate",
        "NODE_RATE",
        "rospy",
        "Subscriber",
        "PointCloud2",
        "callback",
        "rospy",
        "Publisher",
        "PointCloud2",
        "queue_size",
        "rot_matrix",
        "ROLL",
        "PITCH",
        "YAW",
        "rospy",
        "spin",
        "pc2_data",
        "ros_numpy",
        "point_cloud2",
        "pointcloud2_to_xyz_array",
        "pc2_data",
        "np",
        "matmul",
        "np_pc2",
        "rotation_matrx",
        "xyz_array_to_pointcloud2",
        "rotated_np_pc2",
        "frame_id",
        "pub",
        "publish",
        "final_output",
        "roll",
        "pitch",
        "yaw",
        "yaw",
        "pi",
        "pitch",
        "pi",
        "roll",
        "pi",
        "np",
        "array",
        "cos",
        "alpha",
        "sin",
        "alpha",
        "sin",
        "alpha",
        "cos",
        "alpha",
        "np",
        "array",
        "cos",
        "beta",
        "sin",
        "beta",
        "sin",
        "beta",
        "cos",
        "beta",
        "np",
        "array",
        "cos",
        "gamma",
        "sin",
        "gamma",
        "sin",
        "gamma",
        "cos",
        "gamma",
        "np",
        "matmul",
        "np",
        "matmul",
        "Rz",
        "Ry",
        "Rx",
        "A_R_B",
        "points",
        "stamp",
        "frame_id",
        "PointCloud2",
        "stamp",
        "msg",
        "header",
        "stamp",
        "frame_id",
        "msg",
        "header",
        "frame_id",
        "len",
        "points",
        "shape",
        "points",
        "shape",
        "points",
        "shape",
        "len",
        "points",
        "PointField",
        "PointField",
        "FLOAT32",
        "PointField",
        "PointField",
        "FLOAT32",
        "PointField",
        "PointField",
        "FLOAT32",
        "points",
        "shape",
        "np",
        "isfinite",
        "points",
        "all",
        "np",
        "asarray",
        "points",
        "np",
        "float32",
        "tostring",
        "msg",
        "Orient",
        "rospy",
        "ROSInterruptException"
    ],
    "literals": [
        "'orientation'",
        "'rslidar_points_front'",
        "'rotated_point_cloud'",
        "'rslidar_front'",
        "'x'",
        "'y'",
        "'z'",
        "'__main__'"
    ],
    "variables": [
        "NODE_RATE",
        "ROLL",
        "PITCH",
        "YAW",
        "rate",
        "sub",
        "pub",
        "rotation_matrx",
        "np_pc2",
        "rotated_np_pc2",
        "final_output",
        "alpha",
        "beta",
        "gamma",
        "Rz",
        "Ry",
        "Rx",
        "A_R_B",
        "msg",
        "stamp",
        "frame_id",
        "msg",
        "height",
        "msg",
        "width",
        "msg",
        "height",
        "msg",
        "width",
        "msg",
        "fields",
        "msg",
        "is_bigendian",
        "msg",
        "point_step",
        "msg",
        "row_step",
        "msg",
        "is_dense",
        "msg",
        "data"
    ],
    "comments": [
        "!/usr/bin/env python",
        "license removed for brevity",
        "Hz"
    ],
    "docstrings": [
        "''' Compute Rotation Matrix from {B} to {A} = A_R_B given RPY angles using \n            {A} as fixed axis about which RPY of {B} is given: \n            Roll is about x axis, Pitch about y axis, and Yaw about z axis. \n\n            Inputs: Roll, pitch, and yaw angles in degrees \n            Outputs: A_R_B (3x3) \n        '''",
        "'''\n        Create a sensor_msgs.PointCloud2 from an array\n        of points.\n        '''"
    ],
    "functions": [
        "callback",
        "rot_matrix",
        "xyz_array_to_pointcloud2"
    ],
    "classes": [
        "Orient"
    ]
}