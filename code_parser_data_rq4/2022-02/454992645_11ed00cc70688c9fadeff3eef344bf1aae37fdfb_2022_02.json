{
    "identifiers": [
        "edu",
        "ufl",
        "cise",
        "plc",
        "edu",
        "ufl",
        "cise",
        "plc",
        "IToken",
        "Kind",
        "java",
        "util",
        "State",
        "START",
        "IN_IDENT",
        "HAVE_ZERO",
        "HAVE_DOT",
        "IN_FLOAT",
        "IN_NUM",
        "HAVE_EQ",
        "HAVE_MINUS",
        "input",
        "pos",
        "startPos",
        "len",
        "state",
        "State",
        "START",
        "chars",
        "input",
        "toCharArray",
        "ch",
        "chars",
        "pos",
        "state",
        "State",
        "START",
        "startPos",
        "pos",
        "ch",
        "pos",
        "newToken",
        "Kind",
        "PLUS",
        "toString",
        "ch",
        "startPos",
        "pos",
        "newToken",
        "Kind",
        "TIMES",
        "toString",
        "ch",
        "startPos",
        "pos",
        "state",
        "State",
        "HAVE_EQ",
        "pos",
        "state",
        "State",
        "HAVE_EQ",
        "ch",
        "newToken",
        "Kind",
        "EQUALS",
        "toString",
        "ch",
        "startPos",
        "pos",
        "state",
        "State",
        "IN_NUM",
        "tokenPos",
        "numbers",
        "ch",
        "tokenPos",
        "pos",
        "numbers",
        "add",
        "ch",
        "newToken",
        "Kind",
        "INT_LIT",
        "numbers",
        "toString",
        "tokenPos",
        "pos",
        "tokenPos",
        "state",
        "State",
        "START"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "START CASE",
        "issue: if there is no 0, then we are stuck?",
        "WHERE AM I STORING THE TOKENS??",
        "instructions say to add an EOF token?",
        "throw an exception or something?",
        "store the numbers as we go along in this character array"
    ],
    "docstrings": [],
    "functions": [
        "Lexer"
    ],
    "classes": [
        "Lexer"
    ]
}