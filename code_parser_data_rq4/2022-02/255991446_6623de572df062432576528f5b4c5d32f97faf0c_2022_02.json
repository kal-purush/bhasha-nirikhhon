{
    "identifiers": [
        "time",
        "pytest",
        "factiva",
        "core",
        "tools",
        "load_environment_value",
        "factiva",
        "news",
        "Listener",
        "Stream",
        "StreamResponse",
        "load_environment_value",
        "load_environment_value",
        "message",
        "subscription_id",
        "subscription_id",
        "message",
        "Stream",
        "stream_id",
        "VALID_STREAM_ID",
        "stream",
        "get_suscription_by_index",
        "subscription",
        "listener",
        "isinstance",
        "listener",
        "Listener",
        "Stream",
        "stream_id",
        "VALID_STREAM_ID",
        "pytest",
        "raises",
        "ValueError",
        "stream",
        "get_suscription_by_index",
        "subscription",
        "listener",
        "isinstance",
        "listener",
        "Listener",
        "Stream",
        "stream_id",
        "VALID_STREAM_ID",
        "stream",
        "get_suscription_by_id",
        "VALID_SUSCRIPTION_ID",
        "subscription",
        "listener",
        "isinstance",
        "listener",
        "Listener",
        "Stream",
        "stream_id",
        "VALID_STREAM_ID",
        "pytest",
        "raises",
        "ValueError",
        "stream",
        "get_suscription_by_id",
        "subscription",
        "listener",
        "isinstance",
        "listener",
        "Listener"
    ],
    "literals": [
        "'FACTIVA_STREAMID'",
        "'FACTIVA_SUBSCRIPTION_ID'",
        "\"publication_datetime >= '2022-01-01 00:00:00' AND LOWER(language_code)='en' AND UPPER(source_code) = 'DJDN'\"",
        "\"Dummy-id\""
    ],
    "variables": [
        "VALID_STREAM_ID",
        "VALID_SUSCRIPTION_ID",
        "VALID_WHERE_STATEMENT",
        "stream",
        "subscription",
        "listener",
        "stream",
        "subscription",
        "listener",
        "stream",
        "subscription",
        "listener",
        "stream",
        "subscription",
        "listener"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\" def test_listener():\n    stream = Stream(query=VALID_WHERE_STATEMENT)\n    stream_response = stream.create()\n    assert isinstance(stream_response, StreamResponse)\n    assert len(stream_response.id) > 0\n\n    subscription = stream.get_suscription_by_index(0)\n    listener = subscription.listener\n    listener.listen(handle_message, 10)\n\n    time.sleep(60)\n    delete_suscription = stream.delete_subscription(subscription)\n    assert delete_suscription == True\n\n    time.sleep(15)\n    delete_stream = stream.delete()\n    assert isinstance(delete_stream, StreamResponse) \"\"\""
    ],
    "functions": [
        "handle_message",
        "test_get_listener_by_index",
        "test_get_listener_by_index_fails",
        "test_get_listener_by_suscription_id",
        "test_get_listener_by_suscription_id_fails"
    ],
    "classes": []
}