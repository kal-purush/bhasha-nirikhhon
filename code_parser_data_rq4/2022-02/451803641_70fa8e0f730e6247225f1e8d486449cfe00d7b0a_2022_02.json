{
    "identifiers": [
        "io",
        "ecocode",
        "java",
        "checks",
        "batch",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableList",
        "org",
        "sonar",
        "check",
        "Rule",
        "org",
        "sonar",
        "plugins",
        "java",
        "api",
        "IssuableSubscriptionVisitor",
        "org",
        "sonar",
        "plugins",
        "java",
        "api",
        "semantic",
        "MethodMatchers",
        "org",
        "sonar",
        "plugins",
        "java",
        "api",
        "tree",
        "java",
        "util",
        "Rule",
        "key",
        "name",
        "sensorListenerMethodMatcher",
        "MethodMatchers",
        "create",
        "ofTypes",
        "names",
        "withAnyParameters",
        "build",
        "Override",
        "ImmutableList",
        "of",
        "Tree",
        "Kind",
        "METHOD_INVOCATION",
        "Override",
        "tree",
        "tree",
        "Tree",
        "Kind",
        "METHOD_INVOCATION",
        "mit",
        "tree",
        "sensorListenerMethodMatcher",
        "matches",
        "mit",
        "isFourthArgumentNumberPositive",
        "mit",
        "arguments",
        "reportIssue",
        "mit",
        "arguments",
        "arguments",
        "size",
        "arguments",
        "get",
        "Tree",
        "Kind",
        "TYPE_CAST",
        "arguments",
        "get",
        "Tree",
        "Kind",
        "MEMBER_SELECT",
        "arguments",
        "get",
        "Tree",
        "Kind",
        "PARENTHESIZED_EXPRESSION",
        "arguments",
        "checkArgumentComplexType",
        "arguments",
        "get",
        "arguments",
        "get",
        "asConstant",
        "isPresent",
        "arguments",
        "get",
        "Tree",
        "Kind",
        "INT_LITERAL",
        "arguments",
        "get",
        "Tree",
        "Kind",
        "LONG_LITERAL",
        "arguments",
        "get",
        "Tree",
        "Kind",
        "FLOAT_LITERAL",
        "arguments",
        "get",
        "Tree",
        "Kind",
        "DOUBLE_LITERAL",
        "arguments",
        "get",
        "asConstant",
        "get",
        "doubleValue",
        "argument",
        "argument",
        "kind",
        "MEMBER_SELECT",
        "memberSelectExpressionTree",
        "argument",
        "memberSelectExpressionTree",
        "identifier",
        "TYPE_CAST",
        "typeCastTree",
        "argument",
        "typeCastTree",
        "expression",
        "PARENTHESIZED_EXPRESSION",
        "parenthesizedTree",
        "argument",
        "parenthesizedTree",
        "expression",
        "argument"
    ],
    "literals": [
        "\"EBAT002\"",
        "\"ecoCodeSensorCoalesce\"",
        "\"android.hardware.SensorManager\"",
        "\"registerListener\"",
        "\"Avoid using registerListener without a fourth parameter maxReportLatencyUs\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* ecoCode SonarQube Plugin\n * Copyright (C) 2020-2021 Snapp' - Universit√© de Pau et des Pays de l'Adour\n * mailto: contact@ecocode.io\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.",
        "* Check the call of the method \"registerListener\" of \"android.hardware.SensorManager\" with 4 parameters (the 4th one being maxReportLatencyUs).\n * If argument value isn't present, report issue.",
        "* Method that checks if first, the method contains 4 or more argument, then if the 4th argument is a number (int, float ...)\n     * Finally it checks if the 4th argument is strictly positive\n     *\n     * @param arguments the arguments of the method",
        "* Method that gives the argument child value when it's of a complex type\n     *\n     * @param argument the argument with a complex type"
    ],
    "functions": [
        "SensorCoalesceRule",
        "nodesToVisit",
        "visitNode",
        "isFourthArgumentNumberPositive",
        "checkArgumentComplexType"
    ],
    "classes": [
        "SensorCoalesceRule"
    ]
}