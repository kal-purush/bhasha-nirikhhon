{
    "identifiers": [
        "org",
        "ihiw",
        "management",
        "service",
        "org",
        "ihiw",
        "management",
        "config",
        "Constants",
        "org",
        "ihiw",
        "management",
        "domain",
        "org",
        "ihiw",
        "management",
        "repository",
        "org",
        "ihiw",
        "management",
        "security",
        "AuthoritiesConstants",
        "org",
        "ihiw",
        "management",
        "security",
        "SecurityUtils",
        "org",
        "ihiw",
        "management",
        "service",
        "dto",
        "LabDTO",
        "org",
        "ihiw",
        "management",
        "service",
        "dto",
        "ProjectDTO",
        "org",
        "ihiw",
        "management",
        "service",
        "dto",
        "UploadDTO",
        "org",
        "ihiw",
        "management",
        "service",
        "dto",
        "UserDTO",
        "org",
        "ihiw",
        "management",
        "service",
        "util",
        "RandomUtil",
        "org",
        "ihiw",
        "management",
        "web",
        "rest",
        "errors",
        "EmailAlreadyUsedException",
        "org",
        "ihiw",
        "management",
        "web",
        "rest",
        "errors",
        "InvalidPasswordException",
        "org",
        "ihiw",
        "management",
        "web",
        "rest",
        "errors",
        "LabDoesNotExistException",
        "org",
        "ihiw",
        "management",
        "web",
        "rest",
        "errors",
        "LoginAlreadyUsedException",
        "org",
        "ihiw",
        "management",
        "web",
        "rest",
        "vm",
        "ManagedUserVM",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "org",
        "springframework",
        "cache",
        "CacheManager",
        "org",
        "springframework",
        "data",
        "domain",
        "Page",
        "org",
        "springframework",
        "data",
        "domain",
        "Pageable",
        "org",
        "springframework",
        "scheduling",
        "annotation",
        "Scheduled",
        "org",
        "springframework",
        "security",
        "crypto",
        "password",
        "PasswordEncoder",
        "org",
        "springframework",
        "stereotype",
        "Service",
        "org",
        "springframework",
        "transaction",
        "annotation",
        "Transactional",
        "java",
        "time",
        "Instant",
        "java",
        "time",
        "ZonedDateTime",
        "java",
        "time",
        "temporal",
        "ChronoUnit",
        "java",
        "util",
        "java",
        "util",
        "stream",
        "Collectors",
        "Service",
        "Transactional",
        "log",
        "LoggerFactory",
        "getLogger",
        "userRepository",
        "projectRepository",
        "ihiwUserRepository",
        "ihiwLabRepository",
        "uploadRepository",
        "passwordEncoder",
        "authorityRepository",
        "cacheManager",
        "uploadRepository",
        "userRepository",
        "projectRepository",
        "ihiwUserRepository",
        "ihiwLabRepository",
        "passwordEncoder",
        "authorityRepository",
        "cacheManager",
        "userRepository",
        "userRepository",
        "ihiwLabRepository",
        "ihiwLabRepository",
        "ihiwUserRepository",
        "ihiwUserRepository",
        "projectRepository",
        "projectRepository",
        "uploadRepository",
        "uploadRepository",
        "passwordEncoder",
        "passwordEncoder",
        "authorityRepository",
        "authorityRepository",
        "cacheManager",
        "cacheManager",
        "uploadDTO",
        "upload",
        "upload",
        "setId",
        "uploadDTO",
        "getId",
        "upload",
        "setValidations",
        "uploadDTO",
        "getValidations",
        "upload",
        "setCreatedBy",
        "uploadDTO",
        "getCreatedBy",
        "upload",
        "setCreatedAt",
        "uploadDTO",
        "getCreatedAt",
        "upload",
        "setProject",
        "uploadDTO",
        "getProject",
        "upload",
        "setParentUpload",
        "uploadDTO",
        "getParentUpload",
        "upload",
        "setFileName",
        "uploadDTO",
        "getFileName",
        "upload",
        "setType",
        "uploadDTO",
        "getType",
        "upload",
        "setEnabled",
        "uploadDTO",
        "isEnabled",
        "uploadRepository",
        "save",
        "upload",
        "log",
        "debug",
        "upload",
        "upload",
        "uploadDTO",
        "Optional",
        "of",
        "uploadRepository",
        "findById",
        "uploadDTO",
        "getId",
        "Optional",
        "isPresent",
        "Optional",
        "get",
        "upload",
        "upload",
        "setParentUpload",
        "uploadDTO",
        "getParentUpload",
        "upload",
        "setProject",
        "uploadDTO",
        "getProject",
        "upload",
        "setEnabled",
        "uploadDTO",
        "isEnabled",
        "upload",
        "setCreatedAt",
        "uploadDTO",
        "getCreatedAt",
        "upload",
        "setFileName",
        "uploadDTO",
        "getFileName",
        "upload",
        "setId",
        "uploadDTO",
        "getId",
        "upload",
        "setCreatedBy",
        "uploadDTO",
        "getCreatedBy",
        "upload",
        "setModifiedAt",
        "uploadDTO",
        "getModifiedAt",
        "upload",
        "setType",
        "uploadDTO",
        "getType",
        "log",
        "debug",
        "uploadDTO",
        "upload",
        "UploadDTO",
        "login",
        "userRepository",
        "findOneByLogin",
        "login",
        "ifPresent",
        "user",
        "userRepository",
        "user",
        "log",
        "debug",
        "user",
        "Transactional",
        "readOnly",
        "pageable",
        "uploadRepository",
        "findAll",
        "pageable",
        "UploadDTO",
        "Transactional",
        "readOnly",
        "pageable",
        "users",
        "uploadRepository",
        "findByCreatedByIn",
        "users",
        "pageable",
        "UploadDTO",
        "Transactional",
        "readOnly",
        "pageable",
        "users",
        "projects",
        "userIds",
        "ihiwUser",
        "users",
        "userIds",
        "add",
        "ihiwUser",
        "getId",
        "projectIds",
        "project",
        "projects",
        "projectIds",
        "add",
        "project",
        "getId",
        "uploadRepository",
        "findByUsersAndProjects",
        "userIds",
        "projectIds",
        "pageable",
        "UploadDTO",
        "Transactional",
        "readOnly",
        "login",
        "userRepository",
        "findOneWithAuthoritiesByLogin",
        "login",
        "Transactional",
        "readOnly",
        "id",
        "userRepository",
        "findOneWithAuthoritiesById",
        "id",
        "Transactional",
        "readOnly",
        "pageable",
        "projectRepository",
        "findAll",
        "pageable",
        "ProjectDTO",
        "Transactional",
        "readOnly",
        "SecurityUtils",
        "getCurrentUserLogin",
        "flatMap",
        "userRepository",
        "findOneWithAuthoritiesByLogin"
    ],
    "literals": [
        "\"Created Information for Upload: {}\"",
        "\"Changed Information for Upload: {}\"",
        "\"Deleted User: {}\""
    ],
    "variables": [
        "userRepository",
        "projectRepository",
        "ihiwUserRepository",
        "ihiwLabRepository",
        "uploadRepository",
        "passwordEncoder",
        "authorityRepository",
        "cacheManager"
    ],
    "comments": [
        "upload.setValidations(uploadDTO.getValidations());"
    ],
    "docstrings": [
        "* Service class for managing users.",
        "* Update basic information (first name, last name, email, language) for the current user.\n     *\n     * @param firstName first name of user.\n     * @param lastName  last name of user.\n     * @param email     email id of user.\n     * @param langKey   language key.\n     * @param imageUrl  image URL of user.",
        "ublic void updateUpload(String firstName, String lastName, String email, String langKey, String imageUrl) {\n        SecurityUtils.getCurrentUserLogin()\n            .flatMap(userRepository::findOneByLogin)\n            .ifPresent(user -> {\n                user.setFirstName(firstName);\n                user.setLastName(lastName);\n                user.setEmail(email.toLowerCase());\n                user.setLangKey(langKey);\n                user.setImageUrl(imageUrl);\n                log.debug(\"Changed Information for User: {}\", user);\n            });\n    }",
        "* Update all information for a specific user, and return the modified user.\n     *\n     * @param uploadDTO user to update.\n     * @return updated upload.",
        "ploadDTO.getAuthorities().stream()\n                    .map(authorityRepository::findById)\n                    .filter(Optional::isPresent)\n                    .map(Optional::get)\n                    .forEach(managedAuthorities::add);"
    ],
    "functions": [
        "UploadService",
        "Upload",
        "createUpload",
        "updateUpload",
        "deleteUser",
        "getAllUploads",
        "getAllUploadsByUserId",
        "getAllUploadsByUsersAndProjects",
        "getUserWithAuthoritiesByLogin",
        "getUserWithAuthorities",
        "getAllProjects",
        "getUserWithAuthorities"
    ],
    "classes": [
        "UploadService"
    ]
}