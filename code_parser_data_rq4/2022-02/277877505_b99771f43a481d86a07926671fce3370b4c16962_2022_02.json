{
    "identifiers": [
        "pathlib",
        "re",
        "typing",
        "Any",
        "Optional",
        "Type",
        "appdirs",
        "loguru",
        "logger",
        "commonwealth",
        "settings",
        "settings",
        "BaseSettings",
        "SettingsFromTheFuture",
        "project_name",
        "settings_type",
        "Type",
        "BaseSettings",
        "config_folder",
        "Optional",
        "pathlib",
        "Path",
        "load",
        "project_name",
        "issubclass",
        "settings_type",
        "BaseSettings",
        "project_name",
        "config_folder",
        "joinpath",
        "project_name",
        "config_folder",
        "pathlib",
        "Path",
        "appdirs",
        "user_config_dir",
        "project_name",
        "config_folder",
        "mkdir",
        "parents",
        "exist_ok",
        "settings_type",
        "logger",
        "debug",
        "project_name",
        "settings_type",
        "config_folder",
        "load",
        "load",
        "property",
        "Any",
        "_settings",
        "load",
        "_settings",
        "settings",
        "setter",
        "value",
        "Any",
        "_settings",
        "load",
        "value",
        "save",
        "pathlib",
        "Path",
        "config_folder",
        "joinpath",
        "Manager",
        "SETTINGS_NAME_PREFIX",
        "settings_type",
        "VERSION",
        "staticmethod",
        "settings_type",
        "Type",
        "BaseSettings",
        "file_path",
        "pathlib",
        "Path",
        "Any",
        "issubclass",
        "settings_type",
        "BaseSettings",
        "settings_type",
        "file_path",
        "exists",
        "settings_data",
        "load",
        "file_path",
        "settings_data",
        "save",
        "file_path",
        "settings_data",
        "settings",
        "save",
        "settings_file_path",
        "filename",
        "pathlib",
        "Path",
        "re",
        "search",
        "Manager",
        "SETTINGS_NAME_PREFIX",
        "filename",
        "name",
        "result",
        "len",
        "result",
        "groups",
        "result",
        "group",
        "possible_file",
        "possible_file",
        "config_folder",
        "iterdir",
        "possible_file",
        "name",
        "startswith",
        "Manager",
        "SETTINGS_NAME_PREFIX",
        "valid_files",
        "sort",
        "key",
        "get_settings_version_from_filename",
        "reverse",
        "logger",
        "debug",
        "valid_files",
        "valid_file",
        "valid_files",
        "logger",
        "debug",
        "valid_file",
        "Manager",
        "load_from_file",
        "settings_type",
        "valid_file",
        "logger",
        "debug",
        "valid_file",
        "SettingsFromTheFuture",
        "exception",
        "logger",
        "debug",
        "exception",
        "Manager",
        "load_from_file",
        "settings_type",
        "settings_file_path"
    ],
    "literals": [
        "\"settings-\"",
        "\"project_name should be not empty\"",
        "\"settings_type should use BaseSettings as subclass\"",
        "f\"Starting {project_name} settings with {settings_type.__name__}, configuration path: {config_folder}\"",
        "f\"{Manager.SETTINGS_NAME_PREFIX}{self.settings_type.VERSION}.json\"",
        "\"settings_type should use BaseSettings as subclass\"",
        "f\"{Manager.SETTINGS_NAME_PREFIX}(\\\\d+)\"",
        "f\"Found possible candidates for settings source: {valid_files}\"",
        "f\"Checking {valid_file} for settings\"",
        "f\"Using {valid_file} as settings source\"",
        "\"Invalid settings, going to try another file:\""
    ],
    "variables": [
        "SETTINGS_NAME_PREFIX",
        "project_name",
        "config_folder",
        "settings_type",
        "_settings",
        "_settings",
        "settings_data",
        "result",
        "valid_files",
        "_settings",
        "_settings"
    ],
    "comments": [
        "Get all possible settings candidates and sort it by version"
    ],
    "docstrings": [
        "\"\"\"Getter point for settings\n\n        Returns:\n            [Type[BaseSettings]]: The settings defined in the constructor\n        \"\"\"",
        "\"\"\"Setter point for settings. Save settings for every change\n\n        Args:\n            value ([Type[BaseSettings]]): The settings defined in the constructor\n        \"\"\"",
        "\"\"\"Return the settings file for the version specified in the constructor settings\n\n        Returns:\n            pathlib.Path: Path for the settings file\n        \"\"\"",
        "\"\"\"Load settings from a generic location and settings type\n\n        Args:\n            settings_type (BaseSettings): Settings type that inherits from BaseSettings.\n            file_path (pathlib.Path): Path for a valid settings file\n\n        Returns:\n            Any: The settings based on settings_type\n        \"\"\"",
        "\"\"\"Save settings\"\"\"",
        "\"\"\"Load settings\"\"\""
    ],
    "functions": [
        "settings",
        "settings",
        "settings_file_path",
        "load_from_file",
        "save",
        "load",
        "get_settings_version_from_filename"
    ],
    "classes": [
        "Manager"
    ]
}