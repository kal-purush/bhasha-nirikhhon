{
    "identifiers": [
        "re",
        "subprocess",
        "typing",
        "t",
        "t",
        "NamedTuple",
        "t",
        "Optional",
        "t",
        "Optional",
        "property",
        "major",
        "minor",
        "patch",
        "version",
        "patch",
        "pre",
        "version",
        "pre",
        "version",
        "property",
        "Semver",
        "major",
        "major",
        "minor",
        "minor",
        "patch",
        "pre",
        "subprocess",
        "check_output",
        "decode",
        "version",
        "Semver",
        "re",
        "match",
        "SEMVER_REGEX",
        "version",
        "match",
        "ValueError",
        "version",
        "match",
        "groupdict",
        "groups",
        "groups",
        "Semver",
        "major",
        "groups",
        "minor",
        "groups",
        "patch",
        "patch",
        "pre",
        "groups",
        "get",
        "name",
        "value",
        "name",
        "value",
        "_read_current_version",
        "current_version",
        "parse_version_str",
        "current_version",
        "bump_minor",
        "version_str",
        "next_version",
        "_set_github_output",
        "next_version",
        "main"
    ],
    "literals": [
        "f\"{self.major}.{self.minor}\"",
        "f\".{self.patch}\"",
        "f\".{self.pre}\"",
        "\"python3\"",
        "\"setup.py\"",
        "\"--version\"",
        "r\"(?P<major>[0-9]+)\\.(?P<minor>[0-9]+)(\\.(?P<patch>[0-9]+))?([-\\.](?P<pre>.+))?\"",
        "f\"Can't parse version string '{version}'\"",
        "\"patch\"",
        "\"patch\"",
        "\"major\"",
        "\"minor\"",
        "\"pre\"",
        "f\"::set-output name={name}::{value}\"",
        "f\"Read current version as: {current_version}\"",
        "f\"Next version: {next_version}\"",
        "\"next_version\"",
        "\"__main__\""
    ],
    "variables": [
        "major",
        "minor",
        "patch",
        "pre",
        "version",
        "SEMVER_REGEX",
        "match",
        "groups",
        "patch",
        "patch",
        "current_version",
        "next_version"
    ],
    "comments": [
        "! /usr/bin/env python3",
        "This script ia intended to be run from within a Github Action.",
        "Reads current project version, bumps \"minor\", and sets the \"next_version\" output",
        "variable using Github's special stdout syntax.",
        "TODO: make it more resilient to versions with missing components if we need it.",
        "We should be fine for some time, because setuptools_scm return all components.",
        "re sets up `None` as the value for a missing group",
        "Special Github syntax for setting outputs from steps in Github Actions. See:",
        "https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter"
    ],
    "docstrings": [
        "\"\"\"Run the actual script logic.\n\n    Args:\n        version_verride: should contain Github Action input. Empty strings are treated\n            as \"nil\" values. This is because that's how bash passes nils.\n    \"\"\""
    ],
    "functions": [
        "version_str",
        "bump_minor",
        "_read_current_version",
        "parse_version_str",
        "_set_github_output",
        "main"
    ],
    "classes": [
        "Semver"
    ]
}