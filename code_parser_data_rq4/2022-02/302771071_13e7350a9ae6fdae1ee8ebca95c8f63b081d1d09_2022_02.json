{
    "identifiers": [
        "BaseError",
        "registerExtension",
        "registerMultipleExtensions",
        "readState",
        "getCoreContext",
        "ExtensionRegistration",
        "ExtensionRegistry",
        "describe",
        "describe",
        "it",
        "registerExtension",
        "extension",
        "getExtensions",
        "expect",
        "registeredExtensions",
        "mockComponent",
        "unregisterExtension",
        "registeredExtensions",
        "getExtensions",
        "expect",
        "registeredExtensions",
        "it",
        "expect",
        "BaseError",
        "registerExtension",
        "extension",
        "registerExtension",
        "extension",
        "error",
        "expect",
        "error",
        "expectedError",
        "unregisterExtension",
        "it",
        "registerExtension",
        "extension",
        "unregisterExtension",
        "unregisterExtension",
        "getExtensions",
        "expect",
        "registeredExtensions",
        "describe",
        "beforeEach",
        "extensionsToRegister",
        "extension",
        "extension",
        "extension",
        "extension",
        "it",
        "registerMultipleExtensions",
        "extensionsToRegister",
        "expect",
        "getExtensions",
        "mockComponent",
        "mockComponent",
        "mockComponent",
        "mockComponent",
        "unregisterFunctions",
        "unregisterFunctions",
        "expect",
        "getExtensions",
        "mockComponent",
        "mockComponent",
        "unregisterFunctions",
        "unregisterFunctions",
        "expect",
        "getExtensions",
        "mockComponent",
        "mockComponent",
        "readState",
        "getCoreContext",
        "state",
        "state"
    ],
    "literals": [
        "'@equinor/echo-base'",
        "'../../../actions/coreActions/extensions'",
        "'../../../actions/coreActions/globalActions'",
        "'../../../state/globalState'",
        "'./../../../types/registry/extension.types'",
        "'extensions'",
        "'registerExtension()'",
        "'should register and unregister a given extension into the state'",
        "'MyFavEchopediaWebComponent'",
        "'unique-key'",
        "'should ignore the registration if the passed key already exists'",
        "'EchoExtensionKeyAlreadyExistsError'",
        "[Echo.Core.RegisterExtension] Duplicate registration with key \"unique-key\" for component \"MyFavEchopediaWebComponent\": an extension with this key already exists for this component.",
        "'unique-key'",
        "'extendableComponentName'",
        "'should handle multiple calls of one given unregister function'",
        "'registerMultipleExtensions()'",
        "'key-1'",
        "'key-2'",
        "'key-0'",
        "'TheBestEchopediaWebComponent'",
        "'should register and unregister multiple extensions'",
        "'unique-key'",
        "'MyFavEchopediaWebComponent'",
        "'key-1'",
        "'MyFavEchopediaWebComponent'",
        "'key-2'",
        "'MyFavEchopediaWebComponent'",
        "'key-0'",
        "'TheBestEchopediaWebComponent'",
        "'key-1'",
        "'MyFavEchopediaWebComponent'",
        "'key-0'",
        "'TheBestEchopediaWebComponent'",
        "'unique-key'",
        "'MyFavEchopediaWebComponent'"
    ],
    "variables": [
        "unregisterExtension",
        "registeredExtensions",
        "expectedError",
        "unregisterExtension",
        "unregisterExtension",
        "registeredExtensions",
        "extensionsToRegister",
        "unregisterFunctions",
        "mockComponent",
        "extension"
    ],
    "comments": [
        "when",
        "then",
        "when",
        "then",
        "given",
        "when",
        "then",
        "given",
        "when",
        "then",
        "when",
        "then",
        "when",
        "then",
        "when",
        "then"
    ],
    "docstrings": [],
    "functions": [
        "getExtensions"
    ],
    "classes": []
}