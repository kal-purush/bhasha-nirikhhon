{
    "identifiers": [
        "arr",
        "k",
        "x",
        "arr",
        "arr",
        "length",
        "n",
        "arr",
        "length",
        "low",
        "high",
        "n",
        "k",
        "result",
        "low",
        "high",
        "mid",
        "low",
        "high",
        "low",
        "distS",
        "x",
        "arr",
        "mid",
        "distE",
        "arr",
        "mid",
        "k",
        "x",
        "distS",
        "distE",
        "low",
        "mid",
        "high",
        "mid",
        "i",
        "low",
        "i",
        "low",
        "k",
        "i",
        "result",
        "add",
        "arr",
        "i",
        "result"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "Time Complexity : O(log (n-k))",
        "Space Complexity : O(1)",
        "Did this code successfully run on Leetcode : Yes",
        "Any problem you faced while coding this : No",
        "Iterative: TC O(n), SC O(1)",
        "class Solution {",
        "public List<Integer> findClosestElements(int[] arr, int k, int x) {",
        "if(arr == null || arr.length ==0){",
        "return new ArrayList<>();",
        "}",
        "int start = 0;",
        "int end = arr.length - 1;",
        "List<Integer> result = new ArrayList<>();",
        "while(end - start + 1 > k){",
        "int distS = x - arr[start];",
        "int distE = arr[end] - x;",
        "if(distS > distE){",
        "start++;",
        "}",
        "else{ // if distE is higher or euqal",
        "end--;",
        "}",
        "}",
        "for(int i = start; i<=end; i++){",
        "result.add(arr[i]);",
        "}",
        "return result;",
        "}",
        "}",
        "BS: TC O(log(n-k)), SC O(1)",
        "mid element is starting index"
    ],
    "docstrings": [],
    "functions": [
        "findClosestElements"
    ],
    "classes": [
        "Solution"
    ]
}