{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "require",
        "express",
        "bcrypt",
        "app",
        "express",
        "app",
        "express",
        "app",
        "cookieParser",
        "app",
        "express",
        "__dirname",
        "app",
        "cors",
        "mongoose",
        "process",
        "app",
        "req",
        "res",
        "res",
        "app",
        "req",
        "res",
        "req",
        "User",
        "bcrypt",
        "password",
        "bcryptSalt",
        "res",
        "userDoc",
        "e",
        "res",
        "e",
        "app",
        "req",
        "res",
        "req",
        "User",
        "email",
        "userDoc",
        "bcrypt",
        "password",
        "userDoc",
        "passOk",
        "jwt",
        "userDoc",
        "userDoc",
        "jwtSecret",
        "err",
        "token",
        "err",
        "err",
        "res",
        "token",
        "userDoc",
        "res",
        "res",
        "app",
        "req",
        "res",
        "req",
        "token",
        "jwt",
        "token",
        "jwtSecret",
        "err",
        "userData",
        "err",
        "err",
        "User",
        "userData",
        "res",
        "res",
        "app",
        "req",
        "res",
        "res",
        "app",
        "req",
        "res",
        "req",
        "imageDownloader",
        "link",
        "__dirname",
        "newName",
        "res",
        "newName",
        "multer",
        "app",
        "photosMiddleware",
        "req",
        "res",
        "i",
        "req",
        "i",
        "req",
        "i",
        "originalname",
        "parts",
        "parts",
        "path",
        "ext",
        "fs",
        "path",
        "newPath",
        "uploadedFiles",
        "newPath",
        "res",
        "uploadedFiles",
        "app",
        "req",
        "res",
        "req",
        "req",
        "jwt",
        "token",
        "jwtSecret",
        "err",
        "userData",
        "err",
        "err",
        "Place",
        "userData",
        "res",
        "placeDoc",
        "app",
        "req",
        "res",
        "req",
        "jwt",
        "token",
        "jwtSecret",
        "err",
        "userData",
        "res",
        "Place",
        "id",
        "app",
        "req",
        "res",
        "req",
        "res",
        "Place",
        "id",
        "app",
        "req",
        "res",
        "req",
        "req",
        "jwt",
        "token",
        "jwtSecret",
        "err",
        "userData",
        "Place",
        "id",
        "price",
        "userData",
        "placeDoc",
        "placeDoc",
        "placeDoc",
        "res",
        "app",
        "req",
        "res",
        "res",
        "Place",
        "app",
        "req",
        "res",
        "getUserDataFromReq",
        "req",
        "req",
        "BookingModel",
        "userData",
        "doc",
        "res",
        "doc",
        "err",
        "error",
        "req",
        "resolve",
        "reject",
        "jwt",
        "req",
        "jwtSecret",
        "err",
        "userData",
        "err",
        "err",
        "resolve",
        "userData",
        "app",
        "req",
        "res",
        "getUserDataFromReq",
        "req",
        "res",
        "BookingModel",
        "userData",
        "app"
    ],
    "literals": [
        "\"express\"",
        "\"cors\"",
        "\"mongodb\"",
        "\"dotenv\"",
        "\"mongoose\"",
        "\"bcryptjs\"",
        "\"jsonwebtoken\"",
        "\"./models/User.js\"",
        "\"cookie-parser\"",
        "\"image-downloader\"",
        "\"multer\"",
        "\"./models/Place.js\"",
        "\"fs\"",
        "\"./models/Place.js\"",
        "\"./models/Booking.js\"",
        "\"mysecret\"",
        "\"/uploads\"",
        "\"/uploads\"",
        "\"http://localhost:5173\"",
        "\"/test\"",
        "\"test ok\"",
        "\"/register\"",
        "\"/login\"",
        "\"token\"",
        "\"pass not ok\"",
        "\"not found\"",
        "\"/profile\"",
        "\"/logout\"",
        "\"token\"",
        "\"\"",
        "\"/upload-by-link\"",
        "\"photo\"",
        "\".jpg\"",
        "\"/uploads/\"",
        "\"uploads/\"",
        "\"/upload\"",
        "\"photos\"",
        "\".\"",
        "\".\"",
        "\"uploads\\\\\"",
        "\"\"",
        "\"/places\"",
        "\"/user-places\"",
        "\"/places/:id\"",
        "\"/places\"",
        "\"ok\"",
        "\"/places\"",
        "\"/booking\"",
        "\"/bookings\"",
        "\"place\""
    ],
    "variables": [
        "express",
        "cors",
        "mongoose",
        "bcrypt",
        "jwt",
        "User",
        "cookieParser",
        "imageDownloader",
        "multer",
        "Place",
        "fs",
        "PlaceModel",
        "BookingModel",
        "app",
        "bcryptSalt",
        "jwtSecret",
        "userDoc",
        "userDoc",
        "passOk",
        "newName",
        "photosMiddleware",
        "uploadedFiles",
        "i",
        "parts",
        "ext",
        "newPath",
        "placeDoc",
        "userData",
        "placeDoc",
        "userData",
        "userData"
    ],
    "comments": [
        "res.json(\"yes\");",
        "res.json({ token });",
        "const { MongoClient, ServerApiVersion } = require('mongodb');",
        "const uri = \"mongodb+srv://booking:test@cluster0.hjsxgok.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\";",
        "// Create a MongoClient with a MongoClientOptions object to set the Stable API version",
        "const client = new MongoClient(uri, {",
        "serverApi: {",
        "version: ServerApiVersion.v1,",
        "strict: true,",
        "deprecationErrors: true,",
        "}",
        "});",
        "async function run() {",
        "try {",
        "// Connect the client to the server\t(optional starting in v4.7)",
        "await client.connect();",
        "// Send a ping to confirm a successful connection",
        "await client.db(\"admin\").command({ ping: 1 });",
        "console.log(\"Pinged your deployment. You successfully connected to MongoDB!\");",
        "} finally {",
        "// Ensures that the client will close when you finish/error",
        "await client.close();",
        "}",
        "}",
        "run().catch(console.dir)"
    ],
    "docstrings": [],
    "functions": [
        "getUserDataFromReq"
    ],
    "classes": []
}