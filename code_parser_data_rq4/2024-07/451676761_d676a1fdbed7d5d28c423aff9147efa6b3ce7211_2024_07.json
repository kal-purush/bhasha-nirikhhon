{
    "identifiers": [
        "CodeDom",
        "Compiler",
        "Collections",
        "Generic",
        "ValuePair",
        "ValuePair",
        "i",
        "nums",
        "Length",
        "i",
        "valuePairs",
        "Add",
        "ValuePair",
        "nums",
        "i",
        "i",
        "nums",
        "Length",
        "i",
        "nums",
        "i",
        "ToString",
        "c",
        "temp",
        "mapping",
        "Parse",
        "c",
        "ToString",
        "valuePairs",
        "i",
        "setMappedValue",
        "Parse",
        "ValuePair",
        "changed",
        "changed",
        "i",
        "valuePairs",
        "Count",
        "i",
        "valuePairs",
        "i",
        "getMappedValue",
        "valuePairs",
        "i",
        "getMappedValue",
        "hold",
        "valuePairs",
        "i",
        "valuePairs",
        "i",
        "valuePairs",
        "i",
        "valuePairs",
        "i",
        "hold",
        "changed",
        "WriteLine",
        "i",
        "nums",
        "Length",
        "i",
        "Write",
        "nums",
        "i",
        "WriteLine",
        "WriteLine",
        "i",
        "nums",
        "Length",
        "i",
        "Write",
        "valuePairs",
        "i",
        "getInitialValue",
        "WriteLine",
        "WriteLine",
        "i",
        "nums",
        "Length",
        "i",
        "Write",
        "valuePairs",
        "i",
        "getMappedValue",
        "WriteLine",
        "initialValue",
        "mappedValue",
        "a",
        "initialValue",
        "a",
        "mappedValue",
        "a",
        "mappedValue",
        "a",
        "initialValue",
        "mappedValue"
    ],
    "literals": [
        "\"\"",
        "\"Original values..\"",
        "\" \"",
        "\"\\n\"",
        "\"Sorted by custom mapping..\"",
        "\" \"",
        "\"\\n\\n\\n\"",
        "\"Sorted mapped values.. (for validation)\"",
        "\" \"",
        "\"\\n\\n\\n\""
    ],
    "variables": [
        "mapping",
        "nums",
        "valuePairs",
        "i",
        "i",
        "temp",
        "changed",
        "ValuePair",
        "hold",
        "i",
        "i",
        "i",
        "i",
        "initialValue",
        "mappedValue"
    ],
    "comments": [
        "You are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. \nmapping[i] = j means the digit i should be mapped to digit j in this system.\n\nThe mapped value of an integer is the new integer obtained by replacing each occurrence of gigit i in the integer with mapping [i] for all 0<= i <= 9\n\nyou are also given another integer array nums.\nreturn the array nums sorted in non-decreasing order based on the mapped values of its elements\n\n\nso...............\nwe are given an array of numbers\nwe change the number values in accordance to the given mapping array\nthen evaluate and sort the original array based off of the new \"value\" \nbut return the old values / just sorted by the mapped value\ncustom weights?\n\ncan't use a sorted array or any data type that sorts via key/pair because these sort based off of the key\nthe key must be unique\nin this case, the key is not necessarily unique and breaks all of those solutions\n\nmy solution is to use an object to store the mapped value and the original value\nI can then sort by the mapped value even if it isn't unique since I have full control over the sort\nsince the object stores both values, the values are always connected\nso I can easily sort by either one and print the other and have them be connected\nso I sort by the mapped value and then print the original value\nwhich causes the original value to be maintained and sorted appropriately\n\ntested with both examples and it works \n\n\n\nimprovements..\nbetter sort\n surely O(n^2) is not the most efficient way to sort a custom object list\n different container?\n\ndo you really need to use an object? \n\nbeter way to convert value -> mapped value?\n - currently converting value to a string\n - mapping each char of that string to the new value one by one\n - then stitching it back together and reverting to int\nseems rather.. barbaric?",
        "given variables",
        "//TEST2\n        int[] mapping = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n        int[] nums = { 789, 456, 123 };",
        "additonal variables",
        "instatiate object array",
        "generate mapped values (weights)",
        "LMAO",
        "Sort object list",
        "O(n^2) probably not the best sort..",
        "PRINT FINAL RESULT",
        "Object class to store value and mapped value",
        "set functions",
        "get functions"
    ],
    "docstrings": [],
    "functions": [
        "sortByCustomMapping",
        "solve",
        "ValuePair",
        "ValuePair",
        "setMappedValue",
        "getInitialValue",
        "getMappedValue"
    ],
    "classes": [
        "sortByCustomMapping",
        "ValuePair"
    ]
}