{
    "identifiers": [
        "CommissioningControllerOptions",
        "ControllerEnvironmentOptions",
        "NodeCommissioningOptions",
        "MatterController",
        "RootCertificateManager",
        "ImplementationError",
        "CommissionableDevice",
        "CommissionableDeviceIdentifiers",
        "DiscoveryData",
        "Scanner",
        "NodeId",
        "Environment",
        "MdnsService",
        "FabricJsonObject",
        "Logger",
        "MdnsScanner",
        "Network",
        "UdpInterface",
        "ControllerDiscovery",
        "TypeFromPartialBitSchema",
        "DiscoveryCapabilitiesBitmap",
        "Logger",
        "RootCertificateManager",
        "options",
        "options",
        "ImplementationError",
        "options",
        "environment",
        "errorText",
        "ImplementationError",
        "errorText",
        "MdnsService",
        "ipv4Disabled",
        "mdnsService",
        "mdnsScanner",
        "mdnsService",
        "ipv4Disabled",
        "netInterfaceIpv4",
        "UdpInterface",
        "Network",
        "localPort",
        "listeningAddressIpv4",
        "netInterfaceIpv6",
        "UdpInterface",
        "Network",
        "localPort",
        "listeningAddressIpv6",
        "logger",
        "MatterController",
        "nodeOptions",
        "completeCommissioningCallback",
        "peerNodeId",
        "discoveryData",
        "controller",
        "nodeOptions",
        "completeCommissioningCallback",
        "runtime",
        "identifierData",
        "discoveryCapabilities",
        "DiscoveryCapabilitiesBitmap",
        "controller",
        "discoveryCapabilities",
        "scanner",
        "ControllerDiscovery",
        "scanner",
        "identifierData",
        "identifierData",
        "discoveryCapabilities",
        "DiscoveryCapabilitiesBitmap",
        "discoveredCallback",
        "device",
        "timeoutSeconds",
        "ControllerDiscovery",
        "controller",
        "discoveryCapabilities",
        "timeoutSeconds",
        "identifierData",
        "discoveredCallback"
    ],
    "literals": [
        "\"./CommissioningController.js\"",
        "\"./MatterController.js\"",
        "\"./certificate/RootCertificateManager.js\"",
        "\"./common/MatterError.js\"",
        "\"./common/Scanner.js\"",
        "\"./datatype/NodeId.js\"",
        "\"./environment/Environment.js\"",
        "\"./environment/MdnsService.js\"",
        "\"./fabric/Fabric.js\"",
        "\"./log/Logger.js\"",
        "\"./mdns/MdnsScanner.js\"",
        "\"./net/Network.js\"",
        "\"./net/UdpInterface.js\"",
        "\"./protocol/ControllerDiscovery.js\"",
        "\"./schema/BitmapSchema.js\"",
        "\"./schema/PairingCodeSchema.js\"",
        "\"PaseCommissioner\"",
        "\"environment\"",
        "\"You need to prove an environment for the commissioner.\"",
        "string",
        "\"Controller instance not yet started. Please call start() first.\"",
        "\"udp4\"",
        "\"udp6\"",
        "\"No networking available, using only BLE\""
    ],
    "variables": [
        "logger",
        "mdnsScanner",
        "ipv4Disabled",
        "netInterfaceIpv4",
        "netInterfaceIpv6",
        "mdnsService",
        "controller",
        "runtime",
        "controller",
        "controller"
    ],
    "comments": [
        "The environment for the controller.",
        "The root certificate data for the controller.",
        "The fabric data of the controller.",
        "Internal method to initialize a MatterController instance.",
        "Disconnects all connected nodes and Closes the network connections and other resources of the controller.",
        "Initialize the controller."
    ],
    "docstrings": [
        "* @license\n * Copyright 2022-2024 Matter.js Authors\n * SPDX-License-Identifier: Apache-2.0",
        "* This represents a lightweight commissioner that can be used to start the commissioning process to commission\n * devices into an existing controller fabric. Once the initial commissioning process is completed, it uses a callback\n * to all to complete the commissioning process.",
        "* Creates a new CommissioningController instance\n     *\n     * @param options The options for the CommissioningController",
        "* Commissions/Pairs a new device into the controller fabric. The method returns the NodeId of the commissioned node.\n     *\n     * Use the connectNodeAfterCommissioning callback to implement an own logic to do the operative device discovery and\n     * to complete the commissioning process.\n     * Return true when the commissioning process is completed successfully, false on error."
    ],
    "functions": [
        "nodeId",
        "assertControllerIsStarted",
        "initializeController",
        "commissionNode",
        "close",
        "start",
        "cancelCommissionableDeviceDiscovery",
        "discoverCommissionableDevices"
    ],
    "classes": [
        "PaseCommissioner"
    ]
}