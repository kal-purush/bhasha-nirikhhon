{
    "identifiers": [
        "ProcessedClass",
        "elem",
        "DOMParser",
        "elem",
        "text",
        "text",
        "match",
        "match",
        "selector",
        "parentElement",
        "parentElement",
        "selector",
        "parentElement",
        "selector",
        "resolve",
        "MutationObserver",
        "mutations",
        "parentElement",
        "selector",
        "matchedAddedNodes",
        "observer",
        "resolve",
        "matchedAddedNodes",
        "observer",
        "parentElement",
        "elem",
        "selector",
        "elem2",
        "elem2",
        "selector",
        "elem2",
        "elem2",
        "elem2",
        "elem",
        "selector",
        "elem2",
        "returnElem",
        "elem2",
        "selector",
        "elem2",
        "elem2",
        "returnElem",
        "elem",
        "elem",
        "elem",
        "elem",
        "elem",
        "elem",
        "ProcessedClass",
        "selector",
        "selector",
        "Element",
        "selector",
        "hasClosest",
        "selector",
        "Element",
        "selector",
        "hasClosestSelector",
        "selector",
        "Element",
        "hideElement",
        "Element",
        "showElement",
        "Element",
        "processElement"
    ],
    "literals": [
        "\"@shared/sharedData.ts\"",
        "string",
        "\"text/html\"",
        "\"&\"",
        "\"&amp;\"",
        "\"'\"",
        "\"&#x27;\"",
        "\"`\"",
        "\"&#x60;\"",
        "'\"'",
        "\"&quot;\"",
        "\"<\"",
        "\"&lt;\"",
        "\">\"",
        "\"&gt;\"",
        "\"=\"",
        "\"&equals;\"",
        "\";\"",
        "\"&semi;\"",
        "\"\\\\r\"",
        "\"\\r\"",
        "string",
        "string",
        "string",
        "\"TUIC_DISPNONE\"",
        "\"TUIC_DISPNONE\"",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "observer",
        "matchedAddedNodes",
        "elem2",
        "elem",
        "elem2",
        "elem",
        "returnElem"
    ],
    "comments": [],
    "docstrings": [
        "* HTMLとしてパースします。\n *\n * @param {string} elem パースするHTMLを表す文字列\n * @return {HTMLCollection} パースされた後のHTML(複数の可能性もあり)",
        "* HTMLで用いるために&'`\"<>=;を&を用いた表記にエンコードします。\n *\n * @param {string} text エンコード前の文字列\n * @return {text} エンコード後の文字列",
        "* parentElementで指定されたElementの子孫ノードにselectorに合致するElementが生えてくるまで待ちます。\n *\n * @param {string} selector 待つ対象のElementのセレクター\n * @param {Element} elem 探索元のElement\n * @return {Element[]} 待った結果生えてきたElement",
        "* selectorで指定された要素を子孫ノードに持つまでelemから文書ルートに向かって探索します。\n *\n * セレクターの判断にはquerySelectorを使うので、子結合子の1つ目のセレクターなどが返り値よりも親にある場合があります。\n * それを防ぐためには擬似クラスの:scopeをお使いください\n * @param {Element} elem 探索元のElement\n * @param {string} selector 探索するElementのセレクター\n * @return {Element} 指定されたElementを子孫ノードに持つセレクター",
        "* selectorで指定された要素を子孫ノードに持つまでelemから文書ルートに向かって探索し、見つかったselectorで指定された要素を返します。\n *\n * セレクターの判断にはquerySelectorを使うので、子結合子の1つ目のセレクターなどが折り返し地点よりも親にある場合があります。\n * それを防ぐためには擬似クラスの:scopeをお使いください\n * @param {Element} elem 探索元のElement\n * @param {string} selector 探索するElementのセレクター\n * @return {Element} 指定されたElementを子孫ノードに持つセレクター",
        "* elemで指定された要素を非表示にします。\n *\n * @param {Element} elem 対象のElement",
        "* hide()で非表示にした要素のうち、elemで指定された要素を再び表示します。\n *\n * @param {Element} elem 対象のElement",
        "* elemで指定された要素を処理済みとマークします。\n *\n * @param {Element} elem 対象のElement",
        "* selectorで指定された要素を子孫ノードに持つまで文書ルートに向かって探索するElementのメソッドです。\n         *\n         * セレクターの判断にはquerySelectorを使うので、子結合子の1つ目のセレクターなどが返り値よりも親にある場合があります。\n         * それを防ぐためには擬似クラスの:scopeをお使いください\n         * @param {string} selector 探索するElementのセレクター\n         * @return {Element} 指定されたElementを子孫ノードに持つセレクター",
        "* selectorで指定された要素を子孫ノードに持つまで文書ルートに向かって探索し、見つかった要素を返すElementのメソッドです。\n         *\n         * セレクターの判断にはquerySelectorを使うので、子結合子の1つ目のセレクターなどが折り返し地点よりも親にある場合があります。\n         * それを防ぐためには擬似クラスの:scopeをお使いください\n         * @param {string} selector 探索するElementのセレクター\n         * @return {Element} 指定されたElement",
        "* 要素を非表示にするElementのメソッドです。",
        "* Element.hide()で非表示にした要素を再び表示するElementのメソッドです。",
        "* 要素を処理済みとマークするElementのメソッドです"
    ],
    "functions": [
        "parseHtml",
        "escapeToUseHTML",
        "waitForElement",
        "hasClosest",
        "hasClosestSelector",
        "hideElement",
        "showElement",
        "processElement"
    ],
    "classes": []
}