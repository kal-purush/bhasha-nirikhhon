{
    "identifiers": [
        "collections",
        "co",
        "csv",
        "errno",
        "glob",
        "itertools",
        "it",
        "math",
        "m",
        "os",
        "pty",
        "re",
        "shlex",
        "shutil",
        "signal",
        "subprocess",
        "sp",
        "threading",
        "th",
        "time",
        "toml",
        "path",
        "mode",
        "buffering",
        "path",
        "mode",
        "os",
        "fdopen",
        "os",
        "dup",
        "sys",
        "stdin",
        "fileno",
        "mode",
        "buffering",
        "os",
        "fdopen",
        "os",
        "dup",
        "sys",
        "stdout",
        "fileno",
        "mode",
        "buffering",
        "open",
        "path",
        "mode",
        "buffering",
        "config",
        "args",
        "config",
        "pop",
        "config",
        "pop",
        "config",
        "pop",
        "config",
        "pop",
        "config",
        "pop",
        "isinstance",
        "if_",
        "if_",
        "config",
        "pop",
        "config",
        "pop",
        "config",
        "pop",
        "config",
        "pop",
        "config",
        "pop",
        "isinstance",
        "suite_defines",
        "suite_defines",
        "config",
        "pop",
        "isinstance",
        "defines",
        "defines",
        "v",
        "i",
        "len",
        "v",
        "v",
        "i",
        "parens",
        "v",
        "i_",
        "i",
        "i",
        "v",
        "i",
        "parens",
        "v",
        "i",
        "parens",
        "v",
        "i_",
        "strip",
        "v",
        "i_",
        "v",
        "isinstance",
        "v",
        "v_",
        "v",
        "parse_define",
        "v_",
        "isinstance",
        "v",
        "v_",
        "csplit",
        "v",
        "re",
        "search",
        "v_",
        "m",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "m",
        "lastindex",
        "start",
        "x",
        "start",
        "stop",
        "step",
        "parse_define",
        "v_",
        "m",
        "start",
        "x",
        "v_",
        "m",
        "end",
        "v_",
        "isinstance",
        "v",
        "v",
        "v",
        "suite_defines_",
        "suite_defines",
        "defines",
        "suite_defines_",
        "keys",
        "defines_",
        "defines",
        "defines",
        "defines_",
        "keys",
        "permutations",
        "extend",
        "perm",
        "perm",
        "it",
        "product",
        "k",
        "v",
        "v",
        "parse_define",
        "vs",
        "k",
        "vs",
        "sorted",
        "suite_defines_",
        "defines_",
        "items",
        "k",
        "config",
        "keys",
        "args",
        "args",
        "name",
        "k",
        "file",
        "sys",
        "stderr",
        "path",
        "args",
        "path",
        "os",
        "path",
        "basename",
        "path",
        "name",
        "endswith",
        "name",
        "len",
        "open",
        "path",
        "f",
        "toml",
        "load",
        "f",
        "f",
        "seek",
        "i",
        "line",
        "f",
        "re",
        "match",
        "line",
        "match",
        "match",
        "group",
        "case_linenos",
        "append",
        "i",
        "match",
        "group",
        "match",
        "match",
        "group",
        "code_linenos",
        "append",
        "i",
        "case_linenos",
        "sort",
        "config",
        "pop",
        "lineno",
        "name",
        "nlineno",
        "_",
        "it",
        "zip_longest",
        "case_linenos",
        "case_linenos",
        "fillvalue",
        "min",
        "l",
        "l",
        "code_linenos",
        "l",
        "lineno",
        "l",
        "nlineno",
        "cases",
        "name",
        "lineno",
        "cases",
        "name",
        "code_lineno",
        "config",
        "pop",
        "isinstance",
        "if_",
        "if_",
        "config",
        "pop",
        "min",
        "l",
        "l",
        "code_linenos",
        "case_linenos",
        "l",
        "case_linenos",
        "config",
        "pop",
        "config",
        "pop",
        "name",
        "sorted",
        "cases",
        "items",
        "key",
        "c",
        "c",
        "get",
        "cases",
        "append",
        "BenchCase",
        "config",
        "name",
        "path",
        "name",
        "defines",
        "in_",
        "args",
        "args",
        "union",
        "defines",
        "cases",
        "k",
        "config",
        "keys",
        "args",
        "args",
        "name",
        "k",
        "file",
        "sys",
        "stderr",
        "bench_paths",
        "args",
        "path",
        "bench_paths",
        "os",
        "path",
        "isdir",
        "path",
        "path",
        "path",
        "glob",
        "glob",
        "path",
        "paths",
        "append",
        "path",
        "paths",
        "bench_paths",
        "sys",
        "exit",
        "BenchSuite",
        "path",
        "args",
        "path",
        "paths",
        "suites",
        "sort",
        "key",
        "s",
        "s",
        "name",
        "suite",
        "suites",
        "suite",
        "name",
        "seen",
        "args",
        "args",
        "suite",
        "name",
        "suite",
        "path",
        "seen",
        "suite",
        "name",
        "path",
        "file",
        "sys",
        "stderr",
        "suite",
        "name",
        "suite",
        "suite",
        "cases",
        "name",
        "seen",
        "isinstance",
        "seen",
        "name",
        "BenchSuite",
        "seen",
        "name",
        "cases",
        "args",
        "args",
        "name",
        "path",
        "seen",
        "name",
        "path",
        "file",
        "sys",
        "stderr",
        "name",
        "args",
        "get",
        "len",
        "suites",
        "bench_paths",
        "sys",
        "exit",
        "suites",
        "args",
        "openio",
        "args",
        "f",
        "f",
        "write",
        "s",
        "f",
        "lineno",
        "s",
        "count",
        "_write",
        "s",
        "s",
        "f",
        "lineno",
        "s",
        "count",
        "_write",
        "s",
        "_write",
        "write",
        "writeln",
        "f",
        "writeln",
        "sys",
        "argv",
        "f",
        "writeln",
        "f",
        "writeln",
        "join",
        "sys",
        "argv",
        "f",
        "writeln",
        "f",
        "writeln",
        "f",
        "writeln",
        "args",
        "f",
        "writeln",
        "f",
        "suite",
        "defines",
        "i",
        "defines",
        "permutations",
        "k",
        "v",
        "sorted",
        "defines",
        "items",
        "v",
        "define_cbs",
        "name",
        "k",
        "i",
        "name",
        "f",
        "writeln",
        "name",
        "f",
        "writeln",
        "v",
        "f",
        "writeln",
        "f",
        "writeln",
        "f",
        "writeln",
        "name",
        "len",
        "suite",
        "defines",
        "defines",
        "permutations",
        "f",
        "writeln",
        "k",
        "v",
        "sorted",
        "defines",
        "items",
        "f",
        "writeln",
        "k",
        "define_cbs",
        "v",
        "f",
        "writeln",
        "f",
        "writeln",
        "f",
        "writeln",
        "suite",
        "if_",
        "if_",
        "f",
        "writeln",
        "name",
        "f",
        "writeln",
        "join",
        "if_",
        "if_",
        "suite",
        "if_",
        "if_",
        "if_",
        "f",
        "writeln",
        "f",
        "writeln",
        "f",
        "writeln",
        "name",
        "f",
        "writeln",
        "name",
        "code_lineno",
        "f",
        "writeln",
        "code_lineno",
        "suite",
        "path",
        "f",
        "write",
        "code",
        "code_lineno",
        "f",
        "writeln",
        "f",
        "lineno",
        "args",
        "f",
        "writeln",
        "f",
        "writeln",
        "args",
        "get",
        "suite",
        "code",
        "suite",
        "code_lineno",
        "f",
        "writeln",
        "suite",
        "code_lineno",
        "suite",
        "path",
        "f",
        "write",
        "suite",
        "code",
        "suite",
        "code_lineno",
        "f",
        "writeln",
        "f",
        "lineno",
        "args",
        "f",
        "writeln",
        "suite",
        "defines",
        "i",
        "define",
        "sorted",
        "suite",
        "defines",
        "f",
        "writeln",
        "define",
        "f",
        "writeln",
        "define",
        "i",
        "f",
        "writeln",
        "define",
        "define",
        "f",
        "writeln",
        "f",
        "writeln",
        "suite",
        "cases",
        "in_",
        "write_case_functions",
        "f",
        "suite",
        "defines",
        "f",
        "writeln",
        "name",
        "len",
        "suite",
        "defines",
        "suite",
        "if_",
        "if_",
        "f",
        "writeln",
        "name",
        "f",
        "writeln",
        "name",
        "f",
        "writeln",
        "f",
        "writeln",
        "f",
        "writeln",
        "suite",
        "name",
        "f",
        "writeln",
        "suite",
        "name",
        "f",
        "writeln",
        "suite",
        "path",
        "f",
        "writeln",
        "suite",
        "defines",
        "f",
        "writeln",
        "len",
        "suite",
        "defines",
        "k",
        "sorted",
        "suite",
        "defines",
        "f",
        "writeln",
        "k",
        "k",
        "f",
        "writeln",
        "f",
        "writeln",
        "len",
        "suite",
        "defines",
        "f",
        "writeln",
        "suite",
        "cases",
        "f",
        "writeln",
        "f",
        "writeln",
        "name",
        "f",
        "writeln",
        "path",
        "f",
        "writeln",
        "f",
        "writeln",
        "len",
        "permutations",
        "defines",
        "f",
        "writeln",
        "name",
        "suite",
        "if_",
        "if_",
        "f",
        "writeln",
        "name",
        "f",
        "writeln",
        "name",
        "f",
        "writeln",
        "f",
        "writeln",
        "f",
        "writeln",
        "len",
        "suite",
        "cases",
        "f",
        "writeln",
        "f",
        "writeln",
        "f",
        "writeln",
        "args",
        "open",
        "args",
        "sf",
        "shutil",
        "copyfileobj",
        "sf",
        "f",
        "f",
        "writeln",
        "suite",
        "suites",
        "suite",
        "cases",
        "in_",
        "os",
        "path",
        "normpath",
        "in_",
        "os",
        "path",
        "normpath",
        "args",
        "suite",
        "defines",
        "i",
        "define",
        "sorted",
        "suite",
        "defines",
        "f",
        "writeln",
        "define",
        "f",
        "writeln",
        "define",
        "i",
        "f",
        "writeln",
        "define",
        "define",
        "f",
        "writeln",
        "define",
        "f",
        "writeln",
        "f",
        "writeln",
        "write_case_functions",
        "f",
        "suite",
        "suite",
        "defines",
        "define",
        "sorted",
        "suite",
        "defines",
        "f",
        "writeln",
        "define",
        "f",
        "writeln",
        "define",
        "f",
        "writeln",
        "define",
        "f",
        "writeln",
        "define",
        "f",
        "writeln",
        "f",
        "writeln",
        "runner",
        "args",
        "runner",
        "copy",
        "args",
        "get",
        "args",
        "args",
        "get",
        "args",
        "args",
        "get",
        "args",
        "args",
        "args",
        "get",
        "args",
        "args",
        "get",
        "args",
        "args",
        "get",
        "args",
        "args",
        "get",
        "args",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "args",
        "get",
        "define",
        "args",
        "get",
        "cmd",
        "append",
        "define",
        "cmd",
        "runner",
        "bench_ids",
        "args",
        "find_runner",
        "runner",
        "args",
        "bench_ids",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "get",
        "cmd",
        "append",
        "args",
        "get",
        "join",
        "shlex",
        "quote",
        "c",
        "c",
        "cmd",
        "sp",
        "call",
        "cmd",
        "runner_",
        "ids",
        "args",
        "co",
        "defaultdict",
        "runner_",
        "ids",
        "args",
        "get",
        "join",
        "shlex",
        "quote",
        "c",
        "c",
        "cmd",
        "sp",
        "Popen",
        "cmd",
        "stdout",
        "sp",
        "PIPE",
        "stderr",
        "sp",
        "PIPE",
        "args",
        "get",
        "universal_newlines",
        "errors",
        "close_fds",
        "re",
        "compile",
        "line",
        "it",
        "islice",
        "proc",
        "stdout",
        "pattern",
        "match",
        "line",
        "m",
        "m",
        "group",
        "m",
        "group",
        "expected_case_perms",
        "m",
        "group",
        "filtered",
        "expected_perms",
        "filtered",
        "total_perms",
        "perms",
        "proc",
        "wait",
        "proc",
        "returncode",
        "args",
        "get",
        "line",
        "proc",
        "stderr",
        "sys",
        "stdout",
        "write",
        "line",
        "sys",
        "exit",
        "runner_",
        "ids",
        "args",
        "get",
        "join",
        "shlex",
        "quote",
        "c",
        "c",
        "cmd",
        "sp",
        "Popen",
        "cmd",
        "stdout",
        "sp",
        "PIPE",
        "stderr",
        "sp",
        "PIPE",
        "args",
        "get",
        "universal_newlines",
        "errors",
        "close_fds",
        "re",
        "compile",
        "line",
        "it",
        "islice",
        "proc",
        "stdout",
        "pattern",
        "match",
        "line",
        "m",
        "m",
        "group",
        "os",
        "path",
        "basename",
        "path",
        "suite",
        "endswith",
        "suite",
        "len",
        "m",
        "group",
        "suite",
        "proc",
        "wait",
        "proc",
        "returncode",
        "args",
        "get",
        "line",
        "proc",
        "stderr",
        "sys",
        "stdout",
        "write",
        "line",
        "sys",
        "exit",
        "co",
        "defaultdict",
        "suite",
        "case_suites",
        "items",
        "expected_suite_perms",
        "suite",
        "expected_case_perms",
        "case_suites",
        "expected_suite_perms",
        "expected_case_perms",
        "expected_perms",
        "total_perms",
        "runner_",
        "id",
        "args",
        "runner_",
        "id",
        "args",
        "get",
        "join",
        "shlex",
        "quote",
        "c",
        "c",
        "cmd",
        "sp",
        "Popen",
        "cmd",
        "stdout",
        "sp",
        "PIPE",
        "stderr",
        "sp",
        "PIPE",
        "args",
        "get",
        "universal_newlines",
        "errors",
        "close_fds",
        "re",
        "compile",
        "line",
        "it",
        "islice",
        "proc",
        "stdout",
        "pattern",
        "match",
        "line",
        "m",
        "path",
        "m",
        "group",
        "m",
        "group",
        "path_",
        "lineno",
        "proc",
        "wait",
        "proc",
        "returncode",
        "args",
        "get",
        "line",
        "proc",
        "stderr",
        "sys",
        "stdout",
        "write",
        "line",
        "sys",
        "exit",
        "path",
        "runner_",
        "id",
        "args",
        "runner_",
        "id",
        "args",
        "get",
        "join",
        "shlex",
        "quote",
        "c",
        "c",
        "cmd",
        "sp",
        "Popen",
        "cmd",
        "stdout",
        "sp",
        "PIPE",
        "stderr",
        "sp",
        "PIPE",
        "args",
        "get",
        "universal_newlines",
        "errors",
        "close_fds",
        "co",
        "OrderedDict",
        "re",
        "compile",
        "line",
        "proc",
        "stdout",
        "pattern",
        "match",
        "line",
        "m",
        "m",
        "group",
        "m",
        "group",
        "value",
        "proc",
        "wait",
        "proc",
        "returncode",
        "args",
        "get",
        "line",
        "proc",
        "stderr",
        "sys",
        "stdout",
        "write",
        "line",
        "sys",
        "exit",
        "defines",
        "path",
        "head",
        "tail",
        "openio",
        "path",
        "th",
        "Lock",
        "head",
        "tail",
        "csv",
        "DictWriter",
        "f",
        "head",
        "tail",
        "f",
        "close",
        "_",
        "f",
        "close",
        "row",
        "rows",
        "append",
        "row",
        "all",
        "k",
        "head",
        "k",
        "tail",
        "k",
        "row",
        "keys",
        "writer",
        "writerow",
        "row",
        "head",
        "extend",
        "row",
        "keys",
        "head",
        "tail",
        "f",
        "seek",
        "f",
        "truncate",
        "csv",
        "DictWriter",
        "f",
        "head",
        "tail",
        "writer",
        "writeheader",
        "row",
        "rows",
        "writer",
        "writerow",
        "row",
        "id",
        "returncode",
        "stdout",
        "assert_",
        "id",
        "returncode",
        "stdout",
        "assert_",
        "name",
        "runner_",
        "ids",
        "stdout_",
        "trace_",
        "output_",
        "args",
        "find_perms",
        "runner_",
        "ids",
        "args",
        "co",
        "defaultdict",
        "co",
        "defaultdict",
        "re",
        "compile",
        "th",
        "local",
        "runner_",
        "ids",
        "passed_suite_perms",
        "passed_case_perms",
        "passed_perms",
        "readed",
        "proged",
        "erased",
        "locals",
        "runner_",
        "ids",
        "args",
        "get",
        "join",
        "shlex",
        "quote",
        "c",
        "c",
        "cmd",
        "pty",
        "openpty",
        "sp",
        "Popen",
        "cmd",
        "stdout",
        "spty",
        "stderr",
        "spty",
        "close_fds",
        "os",
        "close",
        "spty",
        "children",
        "add",
        "proc",
        "os",
        "fdopen",
        "mpty",
        "co",
        "deque",
        "maxlen",
        "args",
        "get",
        "mpty",
        "readline",
        "OSError",
        "e",
        "e",
        "errno",
        "errno",
        "EIO",
        "line",
        "last_stdout",
        "append",
        "line",
        "stdout_",
        "stdout_",
        "write",
        "line",
        "stdout_",
        "flush",
        "BrokenPipeError",
        "pattern",
        "match",
        "line",
        "m",
        "m",
        "group",
        "m",
        "group",
        "op",
        "locals",
        "seen_perms",
        "m",
        "group",
        "last_stdout",
        "clear",
        "op",
        "m",
        "group",
        "case_suites",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "passed_suite_perms",
        "suite",
        "passed_case_perms",
        "passed_perms",
        "readed",
        "readed_",
        "proged",
        "proged_",
        "erased",
        "erased_",
        "output_",
        "find_defines",
        "runner_",
        "m",
        "group",
        "args",
        "output_",
        "writerow",
        "suite",
        "readed_",
        "proged_",
        "erased_",
        "defines",
        "op",
        "locals",
        "seen_perms",
        "op",
        "m",
        "group",
        "m",
        "group",
        "m",
        "group",
        "args",
        "get",
        "proc",
        "kill",
        "KeyboardInterrupt",
        "BenchFailure",
        "last_id",
        "last_stdout",
        "children",
        "remove",
        "proc",
        "mpty",
        "close",
        "proc",
        "wait",
        "proc",
        "returncode",
        "BenchFailure",
        "last_id",
        "proc",
        "returncode",
        "last_stdout",
        "last_assert",
        "runner_",
        "ids",
        "start",
        "step",
        "failures",
        "killed",
        "locals",
        "start",
        "step",
        "start",
        "total_perms",
        "runner_",
        "copy",
        "args",
        "get",
        "args",
        "get",
        "job_runner",
        "append",
        "start",
        "start",
        "step",
        "step",
        "job_runner",
        "append",
        "start",
        "step",
        "run_runner",
        "job_runner",
        "ids",
        "locals",
        "seen_perms",
        "start",
        "locals",
        "seen_perms",
        "step",
        "BenchFailure",
        "failure",
        "output_",
        "failure",
        "id",
        "split",
        "case_suites",
        "find_defines",
        "runner_",
        "failure",
        "id",
        "args",
        "output_",
        "writerow",
        "suite",
        "defines",
        "failures",
        "args",
        "get",
        "failures",
        "append",
        "failure",
        "args",
        "get",
        "killed",
        "locals",
        "seen_perms",
        "start",
        "locals",
        "seen_perms",
        "step",
        "child",
        "children",
        "copy",
        "child",
        "kill",
        "args",
        "job",
        "args",
        "runners",
        "append",
        "th",
        "target",
        "run_job",
        "args",
        "runner_",
        "ids",
        "job",
        "args",
        "daemon",
        "runners",
        "append",
        "th",
        "target",
        "run_job",
        "args",
        "runner_",
        "ids",
        "daemon",
        "done",
        "args",
        "get",
        "args",
        "done",
        "sys",
        "stdout",
        "write",
        "args",
        "done",
        "failures",
        "args",
        "name",
        "args",
        "join",
        "sum",
        "passed_suite_perms",
        "k",
        "v",
        "k",
        "v",
        "expected_suite_perms",
        "items",
        "len",
        "expected_suite_perms",
        "args",
        "get",
        "args",
        "get",
        "sum",
        "passed_case_perms",
        "k",
        "v",
        "k",
        "v",
        "expected_case_perms",
        "items",
        "len",
        "expected_case_perms",
        "args",
        "get",
        "passed_perms",
        "expected_perms",
        "args",
        "len",
        "failures",
        "expected_perms",
        "args",
        "failures",
        "done",
        "sys",
        "stdout",
        "flush",
        "r",
        "runners",
        "r",
        "start",
        "r",
        "is_alive",
        "r",
        "runners",
        "time",
        "sleep",
        "print_update",
        "KeyboardInterrupt",
        "print_update",
        "r",
        "runners",
        "r",
        "join",
        "expected_perms",
        "passed_perms",
        "readed",
        "proged",
        "erased",
        "failures",
        "killed",
        "runner",
        "bench_ids",
        "args",
        "find_runner",
        "runner",
        "args",
        "join",
        "shlex",
        "quote",
        "c",
        "c",
        "runner_",
        "find_perms",
        "runner_",
        "bench_ids",
        "args",
        "len",
        "expected_suite_perms",
        "len",
        "expected_case_perms",
        "expected_perms",
        "total_perms",
        "args",
        "get",
        "len",
        "os",
        "sched_getaffinity",
        "args",
        "get",
        "openio",
        "args",
        "args",
        "get",
        "openio",
        "args",
        "args",
        "get",
        "BenchOutput",
        "args",
        "time",
        "time",
        "by",
        "bench_ids",
        "bench_ids",
        "expected_case_perms",
        "keys",
        "args",
        "get",
        "expected_suite_perms",
        "keys",
        "args",
        "get",
        "run_stage",
        "by",
        "runner_",
        "by",
        "by",
        "stdout",
        "trace",
        "output",
        "args",
        "expected",
        "expected_",
        "passed",
        "passed_",
        "readed",
        "readed_",
        "proged",
        "proged_",
        "erased",
        "erased_",
        "failures",
        "extend",
        "failures_",
        "failures",
        "args",
        "get",
        "killed",
        "time",
        "time",
        "stdout",
        "stdout",
        "close",
        "BrokenPipeError",
        "trace",
        "trace",
        "close",
        "BrokenPipeError",
        "output",
        "output",
        "close",
        "failures",
        "args",
        "args",
        "join",
        "readed",
        "proged",
        "erased",
        "stop",
        "start",
        "failure",
        "failures",
        "failure",
        "id",
        "join",
        "shlex",
        "quote",
        "c",
        "c",
        "runner_",
        "failure",
        "find_path",
        "runner_",
        "failure",
        "id",
        "args",
        "find_defines",
        "runner_",
        "failure",
        "id",
        "args",
        "args",
        "path",
        "lineno",
        "args",
        "args",
        "failure",
        "id",
        "join",
        "k",
        "v",
        "k",
        "v",
        "defines",
        "items",
        "defines",
        "failure",
        "stdout",
        "failure",
        "stdout",
        "failure",
        "assert_",
        "stdout",
        "line",
        "stdout",
        "args",
        "get",
        "sys",
        "stdout",
        "write",
        "line",
        "failure",
        "assert_",
        "failure",
        "assert_",
        "args",
        "path",
        "lineno",
        "args",
        "args",
        "message",
        "open",
        "path",
        "f",
        "next",
        "it",
        "islice",
        "f",
        "lineno",
        "strip",
        "line",
        "failures",
        "args",
        "get",
        "args",
        "get",
        "args",
        "get",
        "failures",
        "runner_",
        "failure",
        "id",
        "args",
        "get",
        "find_path",
        "runner_",
        "failure",
        "id",
        "args",
        "args",
        "path",
        "lineno",
        "args",
        "get",
        "find_path",
        "runner_",
        "failure",
        "id",
        "args",
        "args",
        "path",
        "lineno",
        "failure",
        "assert_",
        "args",
        "args",
        "args",
        "get",
        "join",
        "shlex",
        "quote",
        "c",
        "c",
        "cmd",
        "os",
        "execvp",
        "cmd",
        "cmd",
        "failures",
        "args",
        "args",
        "get",
        "sys",
        "stdout",
        "isatty",
        "args",
        "get",
        "args",
        "get",
        "compile",
        "args",
        "args",
        "get",
        "args",
        "get",
        "args",
        "get",
        "args",
        "get",
        "args",
        "get",
        "args",
        "get",
        "args",
        "get",
        "args",
        "get",
        "args",
        "get",
        "list_",
        "args",
        "run",
        "args",
        "argparse",
        "sys",
        "argparse",
        "ArgumentParser",
        "_",
        "argparse",
        "_ArgumentGroup",
        "_",
        "argparse",
        "ArgumentParser",
        "description",
        "allow_abbrev",
        "conflict_handler",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "choices",
        "help",
        "parser",
        "add_argument_group",
        "bench_parser",
        "add_argument",
        "nargs",
        "x",
        "x",
        "split",
        "help",
        "RUNNER_PATH",
        "bench_parser",
        "add_argument",
        "nargs",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "nargs",
        "x",
        "x",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "x",
        "x",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "x",
        "x",
        "split",
        "GDB_PATH",
        "help",
        "GDB_PATH",
        "bench_parser",
        "add_argument",
        "e",
        "e",
        "split",
        "help",
        "bench_parser",
        "add_argument",
        "action",
        "help",
        "bench_parser",
        "add_argument",
        "x",
        "x",
        "split",
        "VALGRIND_PATH",
        "help",
        "VALGRIND_PATH",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "help",
        "bench_parser",
        "add_argument",
        "x",
        "x",
        "split",
        "PERF_SCRIPT",
        "help",
        "PERF_SCRIPT",
        "bench_parser",
        "add_argument",
        "x",
        "x",
        "split",
        "help",
        "parser",
        "add_argument_group",
        "comp_parser",
        "add_argument",
        "nargs",
        "help",
        "comp_parser",
        "add_argument",
        "action",
        "help",
        "comp_parser",
        "add_argument",
        "help",
        "comp_parser",
        "add_argument",
        "HEADER_PATH",
        "help",
        "HEADER_PATH",
        "comp_parser",
        "add_argument",
        "help",
        "parser",
        "parse_intermixed_args",
        "join",
        "args",
        "runner",
        "args",
        "bench_ids",
        "args",
        "runner",
        "RUNNER_PATH",
        "sys",
        "exit",
        "main",
        "k",
        "v",
        "k",
        "v",
        "vars",
        "args",
        "items",
        "v"
    ],
    "literals": [
        "'./runners/bench_runner'",
        "'runners/bench_runner.h'",
        "'gdb'",
        "'valgrind'",
        "'./scripts/perf.py'",
        "'r'",
        "'-'",
        "'r'",
        "'name'",
        "'path'",
        "'suite'",
        "'lineno'",
        "'if'",
        "'true'",
        "'false'",
        "'code'",
        "'code_lineno'",
        "'in'",
        "'suite_in'",
        "'suite_defines'",
        "'defines'",
        "','",
        "'([{'",
        "'}])'",
        "r'\\brange\\b\\s*\\('",
        "'(?P<start>[^,\\s]*)'",
        "'\\s*(?:,\\s*(?P<stop>[^,\\s]*)'",
        "'\\s*(?:,\\s*(?P<step>[^,\\s]*)\\s*)?)?\\)'",
        "'start'",
        "'start'",
        "'stop'",
        "'stop'",
        "'step'",
        "'step'",
        "'%s(%d)%s'",
        "'true'",
        "'false'",
        "'%swarning:%s in %s, found unused key %r'",
        "'\\x1b[01;33m'",
        "'color'",
        "''",
        "'\\x1b[m'",
        "'color'",
        "''",
        "'.toml'",
        "'.toml'",
        "'(?P<case>\\[\\s*cases\\s*\\.\\s*(?P<name>\\w+)\\s*\\])'",
        "'|'",
        "'(?P<code>code\\s*=)'",
        "'case'",
        "'name'",
        "'code'",
        "'cases'",
        "'inf'",
        "'lineno'",
        "'code_lineno'",
        "'if'",
        "'true'",
        "'false'",
        "'code'",
        "'defines'",
        "'in'",
        "'lineno'",
        "'name'",
        "'path'",
        "':%d'",
        "'lineno'",
        "'lineno'",
        "''",
        "'suite'",
        "'suite_defines'",
        "'suite_in'",
        "'%swarning:%s in %s, found unused key %r'",
        "'\\x1b[01;33m'",
        "'color'",
        "''",
        "'\\x1b[m'",
        "'color'",
        "''",
        "'/*.toml'",
        "'no bench suites found in %r?'",
        "'%swarning:%s conflicting suite %r, %s and %s'",
        "'\\x1b[01;33m'",
        "'color'",
        "''",
        "'\\x1b[m'",
        "'color'",
        "''",
        "'%swarning:%s conflicting case %r, %s and %s'",
        "'\\x1b[01;33m'",
        "'color'",
        "''",
        "'\\x1b[m'",
        "'color'",
        "''",
        "'source'",
        "'more than one bench suite for compilation? (%r)'",
        "'output'",
        "'output'",
        "'w'",
        "'\\n'",
        "''",
        "'\\n'",
        "'\\n'",
        "\"// Generated by %s:\"",
        "\"//\"",
        "\"// %s\"",
        "' '",
        "\"//\"",
        "\"#include \\\"%s\\\"\"",
        "'include'",
        "'__bench__%s__%s__%d'",
        "'intmax_t %s('",
        "'__attribute__((unused)) '",
        "'void *data) {'",
        "' '",
        "'return %s;'",
        "'}'",
        "'const bench_define_t '",
        "'__bench__%s__defines[]['",
        "'BENCH_IMPLICIT_DEFINE_COUNT+%d] = {'",
        "' '",
        "'{'",
        "' '",
        "'[%-24s] = {%s, NULL},'",
        "'_i'",
        "' '",
        "'},'",
        "'};'",
        "'bool __bench__%s__filter(void) {'",
        "' '",
        "'return %s;'",
        "' && '",
        "'(%s)'",
        "'}'",
        "'void __bench__%s__run('",
        "'__attribute__((unused)) struct lfs_config *cfg) {'",
        "' '",
        "'// bench case %s'",
        "' '",
        "'#line %d \"%s\"'",
        "' '",
        "'#line %d \"%s\"'",
        "'output'",
        "'}'",
        "'source'",
        "'#line %d \"%s\"'",
        "'#line %d \"%s\"'",
        "'output'",
        "'#ifndef %s'",
        "'#define %-24s '",
        "'BENCH_IMPLICIT_DEFINE_COUNT+%d'",
        "'_i'",
        "'#define %-24s '",
        "'BENCH_DEFINE(%s)'",
        "'_i'",
        "'#endif'",
        "'extern const bench_define_t '",
        "'__bench__%s__defines[]['",
        "'BENCH_IMPLICIT_DEFINE_COUNT+%d];'",
        "'extern bool __bench__%s__filter('",
        "'void);'",
        "'extern void __bench__%s__run('",
        "'struct lfs_config *cfg);'",
        "'__attribute__((section(\"_bench_suites\"), '",
        "'aligned(1)))'",
        "'const struct bench_suite __bench__%s__suite = {'",
        "' '",
        "'.name = \"%s\",'",
        "' '",
        "'.path = \"%s\",'",
        "' '",
        "'.flags = 0,'",
        "' '",
        "'.define_names = (const char *const['",
        "'BENCH_IMPLICIT_DEFINE_COUNT+%d]){'",
        "' '",
        "'[%-24s] = \"%s\",'",
        "'_i'",
        "' '",
        "'},'",
        "' '",
        "'.define_count = '",
        "'BENCH_IMPLICIT_DEFINE_COUNT+%d,'",
        "' '",
        "'.cases = (const struct bench_case[]){'",
        "' '",
        "'{'",
        "' '",
        "'.name = \"%s\",'",
        "' '",
        "'.path = \"%s\",'",
        "' '",
        "'.flags = 0,'",
        "' '",
        "'.permutations = %d,'",
        "' '",
        "'.defines '",
        "'= (const bench_define_t*)__bench__%s__defines,'",
        "' '",
        "'.filter = __bench__%s__filter,'",
        "' '",
        "'.run = __bench__%s__run,'",
        "' '",
        "'},'",
        "' '",
        "'},'",
        "' '",
        "'.case_count = %d,'",
        "'};'",
        "'#line 1 \"%s\"'",
        "'source'",
        "'source'",
        "'source'",
        "'#ifndef %s'",
        "'#define %-24s '",
        "'BENCH_IMPLICIT_DEFINE_COUNT+%d'",
        "'_i'",
        "'#define %-24s '",
        "'BENCH_DEFINE(%s)'",
        "'_i'",
        "'#define '",
        "'__BENCH__%s__NEEDS_UNDEF'",
        "'#endif'",
        "'#ifdef __BENCH__%s__NEEDS_UNDEF'",
        "'#undef __BENCH__%s__NEEDS_UNDEF'",
        "'#undef %s'",
        "'#undef %s'",
        "'_i'",
        "'#endif'",
        "'exec'",
        "'exec'",
        "'valgrind'",
        "'valgrind_path'",
        "'--leak-check=full'",
        "'--track-origins=yes'",
        "'--error-exitcode=4'",
        "'-q'",
        "'perf'",
        "'perf_script'",
        "'-R'",
        "'--perf-freq=%s'",
        "'perf_freq'",
        "'perf_freq'",
        "'--perf-period=%s'",
        "'perf_period'",
        "'perf_period'",
        "'--perf-events=%s'",
        "'perf_events'",
        "'perf_events'",
        "'--perf-path=%s'",
        "'perf_path'",
        "'perf_path'",
        "'-o%s'",
        "'perf'",
        "'geometry'",
        "'-G%s'",
        "'geometry'",
        "'disk'",
        "'-d%s'",
        "'disk'",
        "'trace'",
        "'-t%s'",
        "'trace'",
        "'trace_backtrace'",
        "'--trace-backtrace'",
        "'trace_period'",
        "'--trace-period=%s'",
        "'trace_period'",
        "'trace_freq'",
        "'--trace-freq=%s'",
        "'trace_freq'",
        "'read_sleep'",
        "'--read-sleep=%s'",
        "'read_sleep'",
        "'prog_sleep'",
        "'--prog-sleep=%s'",
        "'prog_sleep'",
        "'erase_sleep'",
        "'--erase-sleep=%s'",
        "'erase_sleep'",
        "'define'",
        "'define'",
        "'-D%s'",
        "'summary'",
        "'--summary'",
        "'list_suites'",
        "'--list-suites'",
        "'list_cases'",
        "'--list-cases'",
        "'list_suite_paths'",
        "'--list-suite-paths'",
        "'list_case_paths'",
        "'--list-case-paths'",
        "'list_defines'",
        "'--list-defines'",
        "'list_permutation_defines'",
        "'--list-permutation-defines'",
        "'list_implicit_defines'",
        "'--list-implicit-defines'",
        "'list_geometries'",
        "'--list-geometries'",
        "'verbose'",
        "' '",
        "'--list-cases'",
        "'verbose'",
        "' '",
        "'verbose'",
        "'replace'",
        "'^(?P<case>[^\\s]+)'",
        "'\\s+(?P<flags>[^\\s]+)'",
        "'\\s+(?P<filtered>\\d+)/(?P<perms>\\d+)'",
        "'filtered'",
        "'perms'",
        "'case'",
        "'verbose'",
        "'--list-case-paths'",
        "'verbose'",
        "' '",
        "'verbose'",
        "'replace'",
        "'^(?P<case>[^\\s]+)'",
        "'\\s+(?P<path>[^:]+):(?P<lineno>\\d+)'",
        "'path'",
        "'.toml'",
        "'.toml'",
        "'case'",
        "'verbose'",
        "'--list-case-paths'",
        "'verbose'",
        "' '",
        "'verbose'",
        "'replace'",
        "'^(?P<case>[^\\s]+)'",
        "'\\s+(?P<path>[^:]+):(?P<lineno>\\d+)'",
        "'path'",
        "'lineno'",
        "'verbose'",
        "'--list-permutation-defines'",
        "'verbose'",
        "' '",
        "'verbose'",
        "'replace'",
        "'^(?P<define>\\w+)=(?P<value>.+)'",
        "'define'",
        "'value'",
        "'verbose'",
        "'w+'",
        "'^(?:'",
        "'(?P<op>running|finished|skipped|powerloss)'",
        "' (?P<id>(?P<case>[^:]+)[^\\s]*)'",
        "'(?: (?P<readed>\\d+))?'",
        "'(?: (?P<proged>\\d+))?'",
        "'(?: (?P<erased>\\d+))?'",
        "'|'",
        "'(?P<path>[^:]+):(?P<lineno>\\d+):(?P<op_>assert):'",
        "' *(?P<message>.*)'",
        "')$'",
        "'verbose'",
        "' '",
        "'r'",
        "'context'",
        "'op'",
        "'op_'",
        "'running'",
        "'id'",
        "'finished'",
        "'case'",
        "'readed'",
        "'proged'",
        "'erased'",
        "'id'",
        "'suite'",
        "'case'",
        "'bench_readed'",
        "'bench_proged'",
        "'bench_erased'",
        "'skipped'",
        "'assert'",
        "'path'",
        "'lineno'",
        "'message'",
        "'keep_going'",
        "'isolate'",
        "'valgrind'",
        "'-s%s,%s,%s'",
        "'-s%s,,%s'",
        "':'",
        "'suite'",
        "'case'",
        "'keep_going'",
        "'keep_going'",
        "'jobs'",
        "'jobs'",
        "'jobs'",
        "'verbose'",
        "'color'",
        "'%s%srunning %s%s:%s %s%s'",
        "'\\r\\x1b[K'",
        "'color'",
        "''",
        "'\\x1b[?7l'",
        "''",
        "'\\x1b[34m'",
        "'\\x1b[31m'",
        "'color'",
        "''",
        "'\\x1b[m'",
        "'color'",
        "''",
        "', '",
        "'%d/%d suites'",
        "'by_suites'",
        "'by_cases'",
        "'%d/%d cases'",
        "'by_cases'",
        "'%d/%d perms'",
        "'%s%d/%d failures%s'",
        "'\\x1b[31m'",
        "'color'",
        "''",
        "'\\x1b[m'",
        "'color'",
        "''",
        "'\\x1b[?7h'",
        "'\\n'",
        "'using runner: %s'",
        "' '",
        "'found %d suites, %d cases, %d/%d permutations'",
        "'jobs'",
        "'jobs'",
        "'stdout'",
        "'stdout'",
        "'w'",
        "'trace'",
        "'trace'",
        "'w'",
        "'output'",
        "'output'",
        "'suite'",
        "'case'",
        "'bench_readed'",
        "'bench_proged'",
        "'bench_erased'",
        "'by_cases'",
        "'by_suites'",
        "'benches'",
        "'keep_going'",
        "'%sdone:%s %s'",
        "'\\x1b[34m'",
        "'\\x1b[31m'",
        "'color'",
        "''",
        "'\\x1b[m'",
        "'color'",
        "''",
        "', '",
        "'%d readed'",
        "'%d proged'",
        "'%d erased'",
        "'in %.2fs'",
        "'%s broken? %r'",
        "' '",
        "'%s%s:%d:%sfailure:%s %s%s failed'",
        "'\\x1b[01m'",
        "'color'",
        "''",
        "'\\x1b[01;31m'",
        "'color'",
        "''",
        "'\\x1b[m'",
        "'color'",
        "''",
        "' (%s)'",
        "', '",
        "'%s=%s'",
        "''",
        "'context'",
        "'%s%s:%d:%sassert:%s %s'",
        "'\\x1b[01m'",
        "'color'",
        "''",
        "'\\x1b[01;31m'",
        "'color'",
        "''",
        "'\\x1b[m'",
        "'color'",
        "''",
        "'\\n'",
        "'gdb'",
        "'gdb_case'",
        "'gdb_main'",
        "'gdb_main'",
        "'gdb_path'",
        "'-ex'",
        "'break main'",
        "'-ex'",
        "'break %s:%d'",
        "'-ex'",
        "'run'",
        "'--args'",
        "'gdb_case'",
        "'gdb_path'",
        "'-ex'",
        "'break %s:%d'",
        "'-ex'",
        "'run'",
        "'--args'",
        "'gdb_path'",
        "'-ex'",
        "'run'",
        "'-ex'",
        "'frame function raise'",
        "'-ex'",
        "'up 2'",
        "'--args'",
        "'gdb_path'",
        "'-ex'",
        "'run'",
        "'--args'",
        "'verbose'",
        "' '",
        "'color'",
        "'auto'",
        "'color'",
        "'color'",
        "'always'",
        "'color'",
        "'color'",
        "'compile'",
        "'summary'",
        "'list_suites'",
        "'list_cases'",
        "'list_suite_paths'",
        "'list_case_paths'",
        "'list_defines'",
        "'list_permutation_defines'",
        "'list_implicit_defines'",
        "'list_geometries'",
        "\"__main__\"",
        "\"Build and run benches.\"",
        "'ignore'",
        "'-v'",
        "'--verbose'",
        "'store_true'",
        "\"Output commands that run behind the scenes.\"",
        "'--color'",
        "'never'",
        "'always'",
        "'auto'",
        "'auto'",
        "\"When to use terminal colors. Defaults to 'auto'.\"",
        "'bench options'",
        "'runner'",
        "'?'",
        "\"Bench runner to use for benching. Defaults to %r.\"",
        "'bench_ids'",
        "'*'",
        "\"Description of benches to run.\"",
        "'-Y'",
        "'--summary'",
        "'store_true'",
        "\"Show quick summary.\"",
        "'-l'",
        "'--list-suites'",
        "'store_true'",
        "\"List bench suites.\"",
        "'-L'",
        "'--list-cases'",
        "'store_true'",
        "\"List bench cases.\"",
        "'--list-suite-paths'",
        "'store_true'",
        "\"List the path for each bench suite.\"",
        "'--list-case-paths'",
        "'store_true'",
        "\"List the path and line number for each bench case.\"",
        "'--list-defines'",
        "'store_true'",
        "\"List all defines in this bench-runner.\"",
        "'--list-permutation-defines'",
        "'store_true'",
        "\"List explicit defines in this bench-runner.\"",
        "'--list-implicit-defines'",
        "'store_true'",
        "\"List implicit defines in this bench-runner.\"",
        "'--list-geometries'",
        "'store_true'",
        "\"List the available disk geometries.\"",
        "'-D'",
        "'--define'",
        "'append'",
        "\"Override a bench define.\"",
        "'-G'",
        "'--geometry'",
        "\"Comma-separated list of disk geometries to bench.\"",
        "'-d'",
        "'--disk'",
        "\"Direct block device operations to this file.\"",
        "'-t'",
        "'--trace'",
        "\"Direct trace output to this file.\"",
        "'--trace-backtrace'",
        "'store_true'",
        "\"Include a backtrace with every trace statement.\"",
        "'--trace-period'",
        "\"Sample trace output at this period in cycles.\"",
        "'--trace-freq'",
        "\"Sample trace output at this frequency in hz.\"",
        "'-O'",
        "'--stdout'",
        "\"Direct stdout to this file. Note stderr is already merged here.\"",
        "'-o'",
        "'--output'",
        "\"CSV file to store results.\"",
        "'--read-sleep'",
        "\"Artificial read delay in seconds.\"",
        "'--prog-sleep'",
        "\"Artificial prog delay in seconds.\"",
        "'--erase-sleep'",
        "\"Artificial erase delay in seconds.\"",
        "'-j'",
        "'--jobs'",
        "'?'",
        "\"Number of parallel runners to run. 0 runs one runner per core.\"",
        "'-k'",
        "'--keep-going'",
        "'store_true'",
        "\"Don't stop on first error.\"",
        "'-i'",
        "'--isolate'",
        "'store_true'",
        "\"Run each bench permutation in a separate process.\"",
        "'-b'",
        "'--by-suites'",
        "'store_true'",
        "\"Step through benches by suite.\"",
        "'-B'",
        "'--by-cases'",
        "'store_true'",
        "\"Step through benches by case.\"",
        "'--context'",
        "\"Show this many lines of stdout on bench failure. \"",
        "\"Defaults to 5.\"",
        "'--gdb'",
        "'store_true'",
        "\"Drop into gdb on bench failure.\"",
        "'--gdb-case'",
        "'store_true'",
        "\"Drop into gdb on bench failure but stop at the beginning \"",
        "\"of the failing bench case.\"",
        "'--gdb-main'",
        "'store_true'",
        "\"Drop into gdb on bench failure but stop at the beginning \"",
        "\"of main.\"",
        "'--gdb-path'",
        "\"Path to the gdb executable, may include flags. \"",
        "\"Defaults to %r.\"",
        "'--exec'",
        "\"Run under another executable.\"",
        "'--valgrind'",
        "'store_true'",
        "\"Run under Valgrind to find memory errors. Implicitly sets \"",
        "\"--isolate.\"",
        "'--valgrind-path'",
        "\"Path to the Valgrind executable, may include flags. \"",
        "\"Defaults to %r.\"",
        "'-p'",
        "'--perf'",
        "\"Run under Linux's perf to sample performance counters, writing \"",
        "\"samples to this file.\"",
        "'--perf-freq'",
        "\"perf sampling frequency. This is passed directly to the perf \"",
        "\"script.\"",
        "'--perf-period'",
        "\"perf sampling period. This is passed directly to the perf \"",
        "\"script.\"",
        "'--perf-events'",
        "\"perf events to record. This is passed directly to the perf \"",
        "\"script.\"",
        "'--perf-script'",
        "\"Path to the perf script to use. Defaults to %r.\"",
        "'--perf-path'",
        "\"Path to the perf executable, may include flags. This is passed \"",
        "\"directly to the perf script\"",
        "'compilation options'",
        "'bench_paths'",
        "'*'",
        "\"Description of *.toml files to compile. May be a directory \"",
        "\"or a list of paths.\"",
        "'-c'",
        "'--compile'",
        "'store_true'",
        "\"Compile a bench suite or source file.\"",
        "'-s'",
        "'--source'",
        "\"Source file to compile, possibly injecting internal benches.\"",
        "'--include'",
        "\"Inject this header file into every compiled bench file. \"",
        "\"Defaults to %r.\"",
        "'-o'",
        "'--output'",
        "\"Output file.\"",
        "' '"
    ],
    "variables": [
        "RUNNER_PATH",
        "HEADER_PATH",
        "GDB_PATH",
        "VALGRIND_PATH",
        "PERF_SCRIPT",
        "name",
        "path",
        "suite",
        "lineno",
        "if_",
        "if_",
        "code",
        "code_lineno",
        "in_",
        "defines",
        "permutations",
        "suite_defines",
        "suite_defines",
        "defines",
        "defines",
        "parens",
        "i_",
        "i_",
        "m",
        "start",
        "stop",
        "step",
        "start",
        "stop",
        "path",
        "name",
        "name",
        "config",
        "case_linenos",
        "code_linenos",
        "match",
        "cases",
        "code_lineno",
        "if_",
        "if_",
        "code",
        "code_lineno",
        "defines",
        "in_",
        "cases",
        "defines",
        "paths",
        "path",
        "suites",
        "seen",
        "seen",
        "seen",
        "suite",
        "_write",
        "f",
        "lineno",
        "f",
        "write",
        "f",
        "writeln",
        "define_cbs",
        "name",
        "define_cbs",
        "v",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "case_suites",
        "expected_case_perms",
        "expected_perms",
        "total_perms",
        "cmd",
        "proc",
        "pattern",
        "m",
        "filtered",
        "perms",
        "cmd",
        "proc",
        "pattern",
        "m",
        "path",
        "suite",
        "suite",
        "case_suites",
        "expected_suite_perms",
        "path",
        "cmd",
        "proc",
        "pattern",
        "m",
        "path_",
        "lineno",
        "path",
        "cmd",
        "proc",
        "defines",
        "pattern",
        "m",
        "define",
        "value",
        "defines",
        "define",
        "f",
        "head",
        "tail",
        "writer",
        "rows",
        "writer",
        "id",
        "returncode",
        "stdout",
        "assert_",
        "case_suites",
        "expected_suite_perms",
        "expected_case_perms",
        "expected_perms",
        "total_perms",
        "passed_suite_perms",
        "passed_case_perms",
        "passed_perms",
        "readed",
        "proged",
        "erased",
        "failures",
        "killed",
        "pattern",
        "locals",
        "children",
        "cmd",
        "mpty",
        "spty",
        "proc",
        "mpty",
        "last_id",
        "last_stdout",
        "last_assert",
        "line",
        "m",
        "op",
        "last_id",
        "last_assert",
        "suite",
        "readed_",
        "proged_",
        "erased_",
        "defines",
        "last_assert",
        "start",
        "step",
        "job_runner",
        "locals",
        "seen_perms",
        "_",
        "suite",
        "defines",
        "killed",
        "runners",
        "killed",
        "runner_",
        "_",
        "expected_suite_perms",
        "expected_case_perms",
        "expected_perms",
        "total_perms",
        "args",
        "stdout",
        "stdout",
        "trace",
        "trace",
        "output",
        "output",
        "start",
        "expected",
        "passed",
        "readed",
        "proged",
        "erased",
        "failures",
        "expected_",
        "passed_",
        "readed_",
        "proged_",
        "erased_",
        "failures_",
        "killed",
        "stop",
        "path",
        "lineno",
        "defines",
        "stdout",
        "stdout",
        "path",
        "lineno",
        "message",
        "line",
        "failure",
        "cmd",
        "path",
        "lineno",
        "cmd",
        "path",
        "lineno",
        "cmd",
        "cmd",
        "cmd",
        "args",
        "args",
        "args",
        "_handle_conflict_ignore",
        "_handle_conflict_ignore",
        "parser",
        "bench_parser",
        "comp_parser",
        "args",
        "args",
        "bench_paths",
        "args",
        "runner"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "",
        "Script to compile and runs benches.",
        "",
        "Example:",
        "./scripts/bench.py runners/bench_runner -b",
        "",
        "Copyright (c) 2022, The littlefs authors.",
        "SPDX-License-Identifier: BSD-3-Clause",
        "",
        "allow '-' for stdin/stdout",
        "create a BenchCase object from a config",
        "figure out defines and build possible permutations",
        "defines can be a dict or a list or dicts",
        "split commas but only outside of parens",
        "a define entry can be a list",
        "or a string",
        "which can be comma-separated values, with optional",
        "range statements. This matches the runtime define parser in",
        "the runner itself.",
        "or a literal value",
        "build possible permutations",
        "create a BenchSuite object from a toml file",
        "load toml file and parse bench cases",
        "load benches",
        "find line numbers",
        "sort in case toml parsing did not retain order",
        "a couple of these we just forward to all cases",
        "combine per-case defines",
        "find .toml files",
        "load the suites",
        "check for name conflicts, these will cause ambiguity problems later",
        "when running benches",
        "only allow conflicts if a case and its suite share a name",
        "we can only compile one bench suite at a time",
        "write generated bench source",
        "include bench_runner.h in every generated file",
        "write out generated functions, this can end up in different",
        "files depending on the \"in\" attribute",
        "",
        "note it's up to the specific generated file to declare",
        "the bench defines",
        "create case define functions",
        "deduplicate defines by value to try to reduce the",
        "number of functions we generate",
        "create case filter function",
        "create case run function",
        "create case functions",
        "create suite struct",
        "",
        "note we place this in the custom bench_suites section with",
        "minimum alignment, otherwise GCC ups the alignment to",
        "32-bytes for some reason",
        "create suite define names",
        "create case structs",
        "copy source",
        "write any internal benches",
        "write defines, but note we need to undef any",
        "new defines since we're in someone else's file",
        "run under some external command?",
        "run under valgrind?",
        "run under perf?",
        "other context",
        "defines?",
        "query cases from the runner",
        "skip the first line",
        "get which suite each case belongs to via paths",
        "skip the first line",
        "strip path/suffix here",
        "figure out expected suite perms",
        "query from runner",
        "skip the first line",
        "query permutation defines from runner",
        "Thread-safe CSV writer",
        "can simply append",
        "need to rewrite the file",
        "A bench failure",
        "get expected suite/case/perm counts",
        "run the benches!",
        "parse a line for state changes",
        "get defines and write to csv",
        "go ahead and kill the process, aborting takes a while",
        "run the benches",
        "keep track of failures",
        "get defines and write to csv",
        "race condition for multiple failures?",
        "resume after failed bench",
        "stop other benches",
        "parallel jobs?",
        "this is handled by the runner threads, we just",
        "need to not abort here",
        "query runner for benches",
        "automatic job detection?",
        "truncate and open logs here so they aren't disconnected between benches",
        "measure runtime",
        "spawn runners",
        "spawn jobs for stage",
        "collect passes/failures",
        "show summary",
        "print each failure",
        "get some extra info from runner",
        "show summary of failure",
        "drop into gdb?",
        "we don't really need the case breakpoint here, but it",
        "can be helpful",
        "exec gdb interactively",
        "figure out what color should be",
        "bench flags",
        "compilation flags",
        "runner/bench_paths overlap, so need to do some munging here"
    ],
    "docstrings": [],
    "functions": [
        "openio",
        "csplit",
        "parse_define",
        "compile",
        "write",
        "writeln",
        "write_case_functions",
        "find_runner",
        "list_",
        "find_perms",
        "find_path",
        "find_defines",
        "close",
        "__enter__",
        "__exit__",
        "writerow",
        "run_stage",
        "run_runner",
        "run_job",
        "print_update",
        "run",
        "main"
    ],
    "classes": [
        "BenchCase",
        "BenchSuite",
        "BenchOutput",
        "BenchFailure"
    ]
}