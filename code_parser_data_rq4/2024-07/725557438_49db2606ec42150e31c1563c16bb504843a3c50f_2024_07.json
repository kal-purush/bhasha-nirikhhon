{
    "identifiers": [
        "execUtils",
        "semverUtils",
        "Filename",
        "npath",
        "ppath",
        "xfs",
        "parseSyml",
        "tests",
        "describe",
        "describe",
        "TESTED_URLS",
        "process",
        "runOnCI",
        "test",
        "test",
        "testFn",
        "url",
        "makeTemporaryEnv",
        "url",
        "run",
        "xfs",
        "ppath",
        "path",
        "Filename",
        "parseSyml",
        "content",
        "url",
        "expect",
        "key",
        "expect",
        "url",
        "expect",
        "source",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "run",
        "expect",
        "source",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "run",
        "expect",
        "source",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "tests",
        "url",
        "url",
        "run",
        "expect",
        "source",
        "expect",
        "source",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "tests",
        "url",
        "url",
        "run",
        "expect",
        "source",
        "expect",
        "source",
        "expect",
        "source",
        "expect",
        "source",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "tests",
        "url",
        "url",
        "run",
        "expect",
        "source",
        "expect",
        "source",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "expect",
        "run",
        "expect",
        "source",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "run",
        "expect",
        "source",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "expect",
        "run",
        "tests",
        "expect",
        "source",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "tests",
        "url",
        "url",
        "execUtils",
        "path",
        "code",
        "stderr",
        "stdout",
        "semverUtils",
        "npmVersion",
        "doesNpmSupportWorkspaces",
        "run",
        "expect",
        "source",
        "expect",
        "source",
        "expect",
        "run",
        "npmVersion",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "expect",
        "run",
        "npath",
        "npath",
        "path",
        "expect",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "expect",
        "run",
        "npath",
        "npath",
        "path",
        "test",
        "makeTemporaryEnv",
        "tests",
        "url",
        "url",
        "expect",
        "run",
        "expect",
        "source"
    ],
    "literals": [
        "'@yarnpkg/core'",
        "'@yarnpkg/fslib'",
        "'@yarnpkg/parsers'",
        "'pkg-tests-core'",
        "git://github.com/yarnpkg/util-deprecate.git#v1.0.1",
        "1.0.1",
        "git+ssh://git@github.com/yarnpkg/util-deprecate.git#v1.0.1",
        "1.0.1",
        "https://github.com/yarnpkg/util-deprecate.git#semver:^1.0.0",
        "1.0.2",
        "https://github.com/yarnpkg/util-deprecate.git#semver:>=1.0.0 <1.0.2",
        "1.0.1",
        "https://github.com/yarnpkg/util-deprecate.git#v1.0.0",
        "1.0.0",
        "https://github.com/yarnpkg/util-deprecate.git#master",
        "1.0.2",
        "https://github.com/yarnpkg/util-deprecate.git#b3562c2798507869edb767da869cd7b85487726d",
        "1.0.0",
        "Protocols",
        "git:",
        "it should resolve a git dependency (${url})",
        "util-deprecate",
        "install",
        "utf8",
        "util-deprecate@${url}",
        "util-deprecate@${url}",
        "require('util-deprecate/package.json')",
        "util-deprecate",
        "it should install dependencies and run prepack if needed",
        "has-prepack",
        "${url}/repositories/has-prepack.git",
        "install",
        "require('has-prepack')",
        "it shouldn't install dependencies for packages without prepack",
        "no-prepack",
        "${url}/repositories/no-prepack.git",
        "install",
        "require('no-prepack')",
        "it should support installing packages from projects in subfolders",
        "pkg-a",
        "${url}/repositories/deep-projects.git#cwd=projects/pkg-a",
        "pkg-b",
        "${url}/repositories/deep-projects.git#cwd=projects/pkg-b",
        "install",
        "require('pkg-a/package.json')",
        "pkg-a",
        "1.0.0",
        "require('pkg-b/package.json')",
        "pkg-b",
        "1.0.0",
        "it should support installing workspace packages from projects in subfolders",
        "lib-a",
        "${url}/repositories/deep-projects.git#cwd=projects/pkg-a&workspace=lib",
        "lib-b",
        "${url}/repositories/deep-projects.git#cwd=projects/pkg-b&workspace=lib",
        "install",
        "require('lib-a/package.json')",
        "lib",
        "1.0.0",
        "require('lib-b/package.json')",
        "lib",
        "1.0.0",
        "require('lib-a')",
        "pkg-a",
        "require('lib-b')",
        "pkg-b",
        "it should support installing specific workspaces",
        "pkg-a",
        "${url}/repositories/workspaces.git#workspace=pkg-a",
        "pkg-b",
        "${url}/repositories/workspaces.git#workspace=pkg-b",
        "install",
        "require('pkg-a/package.json')",
        "pkg-a",
        "1.0.0",
        "require('pkg-b/package.json')",
        "pkg-b",
        "1.0.0",
        "it should use Yarn Classic to setup classic repositories",
        "yarn-1-project",
        "${url}/repositories/yarn-1-project.git",
        "install",
        "production",
        "require('yarn-1-project')",
        "it should use npm to setup npm repositories",
        "npm-project",
        "${url}/repositories/npm-project.git",
        "install",
        "require('npm-project')",
        "it should guarantee that all dependencies will be installed when using npm to setup npm repositories",
        "npm-has-prepack",
        "${url}/repositories/npm-has-prepack.git",
        "install",
        "production",
        "true",
        "true",
        "require('npm-has-prepack')",
        "it should support installing specific workspaces from npm repositories",
        "pkg-a",
        "${url}/repositories/npm-workspaces.git#workspace=pkg-a",
        "pkg-b",
        "${url}/repositories/npm-workspaces.git#workspace=pkg-b",
        "npm",
        "--version",
        "Couldn't get npm version: ${stderr}",
        ">=7.x",
        "install",
        "require('pkg-a/package.json')",
        "pkg-a",
        "1.0.0",
        "require('pkg-b/package.json')",
        "pkg-b",
        "1.0.0",
        "install",
        "Workspaces aren't supported by npm@${npmVersion}",
        "it should not use Corepack to fetch Yarn Classic",
        "yarn-1-project",
        "${url}/repositories/yarn-1-project.git",
        "install",
        "404",
        "true",
        "Saving the new release",
        "it should not use Corepack to install repositories that are installed via Yarn 2+",
        "no-lockfile-project",
        "${url}/repositories/no-lockfile-project.git",
        "install",
        "404",
        "true",
        "it should not add a 'packageManager' field to a Yarn classic project",
        "yarn-1-project",
        "${url}/repositories/yarn-1-project.git",
        "install",
        "require('yarn-1-project/package.json').packageManager"
    ],
    "variables": [
        "TESTED_URLS",
        "url",
        "testFn",
        "content",
        "key",
        "npmVersion",
        "doesNpmSupportWorkspaces"
    ],
    "comments": [
        "We've picked util-deprecate because it doesn't have any dependency, and",
        "thus doesn't crash when installing through our mock registry. We also",
        "could have made our own repository (and maybe we will), but it was simpler",
        "this way.",
        "",
        "Edit 2019 Dec 6 - we now have the ability to serve local repositories",
        "through our test server (cf following tests); still, these tests are",
        "useful since they test various different protocols such as ssh.",
        "if this is set then yarn 1 will be executed as if `--production` was passed during the install",
        "but `yarn-1-project` requires dev dependencies to be present so this is a good way to",
        "verify that yarn isn't throw off by this when handling the clone, install, and pack process",
        "for git dependencies (see: https://classic.yarnpkg.com/lang/en/docs/cli/install/#toc-yarn-install-production-true-false)",
        "if this is set then npm will be executed as if `--omit=dev` was passed during the install",
        "but `has-prepack-npm` requires dev dependencies to be present so this is a good way to",
        "verify that yarn isn't throw off by this when handling the clone, install, and pack process",
        "for git dependencies (see: https://docs.npmjs.com/cli/v8/using-npm/config#omit)",
        "same for NPM_CONFIG_PRODUCTION which acts just like the `--production` flat during install step",
        "(see: https://docs.npmjs.com/cli/v8/using-npm/config#environment-variables, https://docs.npmjs.com/cli/v8/using-npm/config#production)",
        "also force npm to use the package server as the registry so that the `has-bin-entry` dependency can be resolved",
        "This checks that the `set version classic` part of `scriptUtils.prepareExternalProject` doesn't use Corepack.",
        "The rest of the install will fail though."
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}