{
    "identifiers": [
        "org",
        "apache",
        "cassandra",
        "spark",
        "stats",
        "org",
        "apache",
        "cassandra",
        "spark",
        "data",
        "SSTable",
        "org",
        "apache",
        "cassandra",
        "spark",
        "utils",
        "streaming",
        "CassandraFile",
        "org",
        "apache",
        "cassandra",
        "spark",
        "utils",
        "streaming",
        "CassandraFileSource",
        "BufferingInputStreamStats",
        "ssTable",
        "ssTable",
        "throwable",
        "ssTable",
        "nanos",
        "ssTable",
        "length",
        "ssTable",
        "length",
        "queueSize",
        "percentComplete",
        "ssTable",
        "ssTable",
        "runTimeNanos",
        "totalNanosBlocked",
        "ssTable",
        "bufferedSkipped",
        "rangeSkipped"
    ],
    "literals": [],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.",
        "* Stats for {@link org.apache.cassandra.spark.utils.streaming.BufferingInputStream}.\n * @param <T>",
        "* When {@link org.apache.cassandra.spark.utils.streaming.BufferingInputStream} queue is full, usually indicating\n     * job is CPU-bound and blocked on the CompactionIterator\n     *\n     * @param ssTable the SSTable source for this input stream",
        "* Failure occurred in the {@link org.apache.cassandra.spark.utils.streaming.BufferingInputStream}\n     *\n     * @param ssTable   the SSTable source for this input stream\n     * @param throwable throwable",
        "* Time the {@link org.apache.cassandra.spark.utils.streaming.BufferingInputStream} spent blocking on queue\n     * waiting for bytes. High time spent blocking indicates the job is network-bound, or blocked on the\n     * {@link org.apache.cassandra.spark.utils.streaming.CassandraFileSource} to supply the bytes.\n     *\n     * @param ssTable the SSTable source for this input stream\n     * @param nanos   time in nanoseconds",
        "* Bytes written to {@link org.apache.cassandra.spark.utils.streaming.BufferingInputStream}\n     * by the {@link org.apache.cassandra.spark.utils.streaming.CassandraFileSource}\n     *\n     * @param ssTable the SSTable source for this input stream\n     * @param length  number of bytes written",
        "* Bytes read from {@link org.apache.cassandra.spark.utils.streaming.BufferingInputStream}\n     *\n     * @param ssTable         the SSTable source for this input stream\n     * @param length          number of bytes read\n     * @param queueSize       current queue size\n     * @param percentComplete % completion",
        "* {@link org.apache.cassandra.spark.utils.streaming.CassandraFileSource} has finished writing\n     * to {@link org.apache.cassandra.spark.utils.streaming.BufferingInputStream} after reaching expected file length\n     *\n     * @param ssTable the SSTable source for this input stream",
        "* {@link org.apache.cassandra.spark.utils.streaming.BufferingInputStream} finished and closed\n     *\n     * @param ssTable           the SSTable source for this input stream\n     * @param runTimeNanos      total time open in nanoseconds\n     * @param totalNanosBlocked total time blocked on queue waiting for bytes in nanoseconds",
        "* Called when the InputStream skips bytes\n     *\n     * @param ssTable         the SSTable source for this input stream\n     * @param bufferedSkipped the number of bytes already buffered in memory skipped\n     * @param rangeSkipped    the number of bytes skipped\n     *                        by efficiently incrementing the start range for the next request"
    ],
    "functions": [
        "doNothingStats",
        "inputStreamQueueFull",
        "inputStreamFailure",
        "inputStreamTimeBlocked",
        "inputStreamBytesWritten",
        "inputStreamByteRead",
        "inputStreamEndBuffer",
        "inputStreamEnd",
        "inputStreamBytesSkipped"
    ],
    "classes": []
}