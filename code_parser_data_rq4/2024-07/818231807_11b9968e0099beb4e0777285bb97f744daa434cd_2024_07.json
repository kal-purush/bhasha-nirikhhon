{
    "identifiers": [
        "typing",
        "Any",
        "Generator",
        "sqlalchemy",
        "create_engine",
        "sqlalchemy",
        "engine",
        "Engine",
        "sqlalchemy",
        "ext",
        "declarative",
        "declarative_base",
        "sqlalchemy",
        "orm",
        "sessionmaker",
        "Session",
        "contextlib",
        "contextmanager",
        "settings",
        "settings",
        "settings",
        "DB_TYPE",
        "settings",
        "DB_NAME",
        "settings",
        "DB_USER",
        "settings",
        "DB_PASSWORD",
        "settings",
        "DB_HOST",
        "settings",
        "DB_PORT",
        "Engine",
        "db_type",
        "db_user",
        "db_password",
        "db_host",
        "db_port",
        "db_name",
        "create_engine",
        "database_url",
        "db_type",
        "create_engine",
        "database_url",
        "connect_args",
        "ValueError",
        "get_db_engine",
        "db_engine",
        "url",
        "render_as_string",
        "sessionmaker",
        "autocommit",
        "autoflush",
        "bind",
        "db_engine",
        "declarative_base",
        "Any",
        "Base",
        "metadata",
        "create_all",
        "bind",
        "db_engine",
        "contextmanager",
        "Generator",
        "Session",
        "Session",
        "SessionLocal",
        "database",
        "database",
        "close",
        "SessionLocal",
        "database"
    ],
    "literals": [
        "\"postgresql\"",
        "f\"postgresql://{db_user}:{db_password}@\\\n            {db_host}:{db_port}/{db_name}\"",
        "\"sqlite\"",
        "\"sqlite:///./database.db\"",
        "\"check_same_thread\"",
        "\"Database type not supported\"",
        "\"Connected to the database\""
    ],
    "variables": [
        "db_type",
        "db_name",
        "db_user",
        "db_password",
        "db_host",
        "db_port",
        "database_url",
        "database_url",
        "db_engine",
        "DATABASE_URL",
        "SessionLocal",
        "Base",
        "database",
        "database"
    ],
    "comments": [
        "database.py",
        "create_database()"
    ],
    "docstrings": [
        "\"\"\"This file contains the database connection and session.\"\"\"",
        "\"\"\"\n    Get db engine:\n        This function returns the database engine.\n        it create a sqlite database if not connected to a\n        postgresql database.\n\n    Returns:\n        create_engine: The database engine.\n    \"\"\"",
        "\"\"\"\n    Create database:\n        This function creates the database if it is not present and\n        creates all the tables in the database. It returns the\n        database engine.\n\n        This function is called in the main.py file. If a LOCAL\n        environment variable is set to True\n    \"\"\"",
        "\"\"\"\n    Get db:\n        This function returns the database session.\n        It is used in the in any router file to get\n        the database session.\n    \"\"\"",
        "\"\"\"\n    Get db unyield:\n        This function returns the database session.\n        It is used mainly for writing to the database externally\n        from the entire application.\n    \"\"\""
    ],
    "functions": [
        "get_db_engine",
        "create_database",
        "get_db",
        "get_db_unyield"
    ],
    "classes": []
}