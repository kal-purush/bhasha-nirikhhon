{
    "identifiers": [
        "com",
        "networknt",
        "openapi",
        "com",
        "networknt",
        "config",
        "Config",
        "com",
        "networknt",
        "exception",
        "ExpiredTokenException",
        "com",
        "networknt",
        "handler",
        "Handler",
        "com",
        "networknt",
        "handler",
        "MiddlewareHandler",
        "com",
        "networknt",
        "handler",
        "config",
        "HandlerConfig",
        "com",
        "networknt",
        "httpstring",
        "AttachmentConstants",
        "com",
        "networknt",
        "httpstring",
        "HttpStringConstants",
        "com",
        "networknt",
        "oas",
        "model",
        "Operation",
        "com",
        "networknt",
        "oas",
        "model",
        "Path",
        "com",
        "networknt",
        "security",
        "IJwtVerifyHandler",
        "com",
        "networknt",
        "security",
        "JwtVerifier",
        "com",
        "networknt",
        "security",
        "SecurityConfig",
        "com",
        "networknt",
        "security",
        "UndertowVerifyHandler",
        "com",
        "networknt",
        "utility",
        "Constants",
        "com",
        "networknt",
        "utility",
        "ModuleRegistry",
        "io",
        "undertow",
        "Handlers",
        "io",
        "undertow",
        "server",
        "HttpHandler",
        "io",
        "undertow",
        "server",
        "HttpServerExchange",
        "io",
        "undertow",
        "util",
        "HeaderMap",
        "io",
        "undertow",
        "util",
        "Headers",
        "io",
        "undertow",
        "util",
        "HttpString",
        "org",
        "jose4j",
        "jwt",
        "JwtClaims",
        "org",
        "jose4j",
        "jwt",
        "MalformedClaimException",
        "org",
        "jose4j",
        "jwt",
        "consumer",
        "InvalidJwtException",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "java",
        "util",
        "logger",
        "LoggerFactory",
        "getLogger",
        "OPENAPI_SECURITY_CONFIG",
        "STATUS_INVALID_AUTH_TOKEN",
        "STATUS_AUTH_TOKEN_EXPIRED",
        "STATUS_MISSING_AUTH_TOKEN",
        "STATUS_METHOD_NOT_ALLOWED",
        "config",
        "jwtVerifier",
        "basePath",
        "next",
        "config",
        "SecurityConfig",
        "load",
        "OPENAPI_SECURITY_CONFIG",
        "jwtVerifier",
        "config",
        "handlerConfig",
        "HandlerConfig",
        "load",
        "basePath",
        "handlerConfig",
        "handlerConfig",
        "getBasePath",
        "Override",
        "SuppressWarnings",
        "exchange",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "reqPath",
        "exchange",
        "getRequestPath",
        "config",
        "getSkipPathPrefixes",
        "config",
        "getSkipPathPrefixes",
        "stream",
        "anyMatch",
        "reqPath",
        "startsWith",
        "logger",
        "isTraceEnabled",
        "logger",
        "trace",
        "reqPath",
        "Handler",
        "next",
        "exchange",
        "next",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "handleJwt",
        "exchange",
        "reqPath",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "Handler",
        "next",
        "exchange",
        "next",
        "exchange",
        "pathPrefix",
        "reqPath",
        "jwkServiceIds",
        "auditInfo",
        "headerMap",
        "exchange",
        "getRequestHeaders",
        "authorization",
        "headerMap",
        "getFirst",
        "Headers",
        "AUTHORIZATION",
        "logger",
        "isTraceEnabled",
        "authorization",
        "authorization",
        "length",
        "logger",
        "trace",
        "authorization",
        "substring",
        "authorization",
        "setExchangeStatus",
        "exchange",
        "STATUS_MISSING_AUTH_TOKEN",
        "exchange",
        "endExchange",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "authorization",
        "trim",
        "length",
        "setExchangeStatus",
        "exchange",
        "STATUS_INVALID_AUTH_TOKEN",
        "exchange",
        "endExchange",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "authorization",
        "getScopeToken",
        "authorization",
        "headerMap",
        "ignoreExpiry",
        "config",
        "isIgnoreJwtExpiry",
        "jwt",
        "JwtVerifier",
        "getTokenFromAuthorization",
        "authorization",
        "jwt",
        "logger",
        "isTraceEnabled",
        "logger",
        "trace",
        "jwt",
        "substring",
        "claims",
        "jwtVerifier",
        "verifyJwt",
        "jwt",
        "ignoreExpiry",
        "pathPrefix",
        "reqPath",
        "jwkServiceIds",
        "logger",
        "isTraceEnabled",
        "logger",
        "trace",
        "claims",
        "toJson",
        "auditInfo",
        "exchange",
        "getAttachment",
        "AttachmentConstants",
        "AUDIT_INFO",
        "auditInfo",
        "auditInfo",
        "exchange",
        "putAttachment",
        "AttachmentConstants",
        "AUDIT_INFO",
        "auditInfo",
        "clientId",
        "claims",
        "getStringClaimValue",
        "Constants",
        "CLIENT_ID_STRING",
        "userId",
        "claims",
        "getStringClaimValue",
        "Constants",
        "USER_ID_STRING",
        "issuer",
        "claims",
        "getStringClaimValue",
        "Constants",
        "ISS_STRING",
        "clientId",
        "clientId",
        "claims",
        "getStringClaimValue",
        "Constants",
        "CID_STRING",
        "userId",
        "userId",
        "claims",
        "getStringClaimValue",
        "Constants",
        "UID_STRING",
        "auditInfo",
        "put",
        "Constants",
        "USER_ID_STRING",
        "userId",
        "auditInfo",
        "put",
        "Constants",
        "SUBJECT_CLAIMS",
        "claims",
        "auditInfo",
        "put",
        "Constants",
        "CLIENT_ID_STRING",
        "clientId",
        "auditInfo",
        "put",
        "Constants",
        "ISSUER_CLAIMS",
        "issuer",
        "config",
        "isEnableH2c",
        "checkForH2CRequest",
        "headerMap",
        "setExchangeStatus",
        "exchange",
        "STATUS_METHOD_NOT_ALLOWED",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "callerId",
        "headerMap",
        "getFirst",
        "HttpStringConstants",
        "CALLER_ID",
        "callerId",
        "auditInfo",
        "put",
        "Constants",
        "CALLER_ID_STRING",
        "callerId",
        "config",
        "getPassThroughClaims",
        "config",
        "getPassThroughClaims",
        "size",
        "entry",
        "config",
        "getPassThroughClaims",
        "entrySet",
        "key",
        "entry",
        "getKey",
        "header",
        "entry",
        "getValue",
        "value",
        "claims",
        "getClaimValue",
        "key",
        "logger",
        "isTraceEnabled",
        "logger",
        "trace",
        "header",
        "value",
        "headerMap",
        "put",
        "header",
        "value",
        "toString",
        "logger",
        "isTraceEnabled",
        "logger",
        "trace",
        "exchange",
        "getRequestURI",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "e",
        "logger",
        "error",
        "e",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "setExchangeStatus",
        "exchange",
        "STATUS_INVALID_AUTH_TOKEN",
        "exchange",
        "endExchange",
        "e",
        "logger",
        "error",
        "e",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "setExchangeStatus",
        "exchange",
        "STATUS_AUTH_TOKEN_EXPIRED",
        "exchange",
        "endExchange",
        "logger",
        "isDebugEnabled",
        "logger",
        "debug",
        "setExchangeStatus",
        "exchange",
        "STATUS_MISSING_AUTH_TOKEN",
        "exchange",
        "endExchange",
        "authorization",
        "headerMap",
        "returnToken",
        "authorization",
        "returnToken",
        "returnToken",
        "substring",
        "equalsIgnoreCase",
        "returnToken",
        "headerMap",
        "getFirst",
        "HttpStringConstants",
        "SCOPE_TOKEN",
        "logger",
        "isTraceEnabled",
        "returnToken",
        "returnToken",
        "length",
        "logger",
        "trace",
        "returnToken",
        "substring",
        "returnToken",
        "Override",
        "next",
        "Override",
        "next",
        "Handlers",
        "handlerNotNull",
        "next",
        "next",
        "next",
        "Override",
        "config",
        "isEnableVerifyJwt",
        "Override",
        "ModuleRegistry",
        "registerModule",
        "OPENAPI_SECURITY_CONFIG",
        "getName",
        "Config",
        "getNoneDecryptedInstance",
        "getJsonMapConfigNoCache",
        "OPENAPI_SECURITY_CONFIG",
        "Override",
        "config",
        "reload",
        "OPENAPI_SECURITY_CONFIG",
        "jwtVerifier",
        "config",
        "ModuleRegistry",
        "registerModule",
        "OPENAPI_SECURITY_CONFIG",
        "getName",
        "Config",
        "getNoneDecryptedInstance",
        "getJsonMapConfigNoCache",
        "OPENAPI_SECURITY_CONFIG",
        "Override",
        "jwtVerifier"
    ],
    "literals": [
        "\"openapi-security\"",
        "\"ERR10000\"",
        "\"ERR10001\"",
        "\"ERR10002\"",
        "\"ERR10008\"",
        "\"/\"",
        "\"unchecked\"",
        "\"SimpleJwtVerifyHandler.handleRequest starts.\"",
        "\"Skip request path base on skipPathPrefixes for {}\"",
        "\"SimpleJwtVerifyHandler.handleRequest ends.\"",
        "\"SimpleJwtVerifyHandler.handleRequest ends.\"",
        "\"Authorization header = {}\"",
        "\"SimpleJwtVerifyHandler.handleRequest ends with an error.\"",
        "\"SimpleJwtVerifyHandler.handleRequest ends with an error.\"",
        "\"parsed jwt from authorization = {}\"",
        "\"claims = {}\"",
        "\"SimpleJwtVerifyHandler.handleRequest ends with an error.\"",
        "\"pass through header {} with value {}\"",
        "\"complete JWT verification for request path = {}\"",
        "\"SimpleJwtVerifyHandler.handleRequest ends.\"",
        "\"InvalidJwtException: \"",
        "\"SimpleJwtVerifyHandler.handleRequest ends with an error.\"",
        "\"ExpiredTokenException\"",
        "\"SimpleJwtVerifyHandler.handleRequest ends with an error.\"",
        "\"SimpleJwtVerifyHandler.handleRequest ends with an error.\"",
        "\"Bearer\"",
        "\"The replaced authorization from X-Scope-Token header = {}\""
    ],
    "variables": [
        "config",
        "jwtVerifier",
        "basePath",
        "next"
    ],
    "comments": [
        "make this static variable public so that it can be accessed from the server-info module",
        "at this moment, we assume that the OpenApiHandler is fully loaded with a single spec or multiple specs.",
        "And the basePath is the correct one from the OpenApiHandler helper or helperMap if multiple is used.",
        "in case that the specification doesn't exist, get the basePath from the handler.yml for endpoint lookup.",
        "if request path is in the skipPathPrefixes in the config, call the next handler directly to skip the security check.",
        "only UnifiedSecurityHandler will have the jwkServiceIds as the third parameter.",
        "if an empty authorization header or a value length less than 6 (\"Basic \"), return an error",
        "try to get the cid as some OAuth tokens name it as cid like Okta.",
        "try to get the uid as some OAuth tokens name it as uid like Okta.",
        "pass through claims through request headers after verification is done.",
        "only log it and unauthorized is returned.",
        "in the gateway case, the authorization header might be a basic header for the native API or other authentication headers.",
        "this will allow the Basic authentication be wrapped up with a JWT token between proxy client and proxy server for native.",
        "get the jwt token from the X-Scope-Token header in this case and allow the verification done with the secondary token."
    ],
    "docstrings": [
        "* This is very simple jwt verify handler that is used to verify jwt token without scopes. Other than scopes, it is\n * the same as the normal JwtVerifyHandler.\n *\n * @author Steve Hu",
        "if no auditInfo has been set previously, we populate here",
        "* Get authToken from X-Scope-Token header.\n     * This covers situations where there is a secondary auth token.\n     *\n     * @param authorization - The auth token from authorization header\n     * @param headerMap - complete header map\n     * @return - return either x-scope-token or the initial auth token"
    ],
    "functions": [
        "SimpleJwtVerifyHandler",
        "handleRequest",
        "handleJwt",
        "getScopeToken",
        "HttpHandler",
        "getNext",
        "MiddlewareHandler",
        "setNext",
        "isEnabled",
        "register",
        "reload",
        "JwtVerifier",
        "getJwtVerifier"
    ],
    "classes": [
        "SimpleJwtVerifyHandler"
    ]
}