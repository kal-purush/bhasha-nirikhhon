{
    "identifiers": [
        "$",
        "typ",
        "db",
        "isInfoExistResult",
        "isInfoExistResult",
        "$",
        "db",
        "typ",
        "result",
        "$",
        "db",
        "typ",
        "typ",
        "db",
        "$",
        "db",
        "typ",
        "result",
        "typ",
        "db",
        "isInfoExist",
        "typ",
        "db",
        "isInfoExistResult",
        "$",
        "db",
        "typ",
        "result",
        "result",
        "parseInt",
        "result",
        "typ",
        "db",
        "version",
        "isInfoExist",
        "typ",
        "db",
        "exists",
        "$",
        "db",
        "typ",
        "version",
        "version"
    ],
    "literals": [
        "\"bun\"",
        "'local'",
        "'remote'",
        "string",
        "\"Legacy database, check top field\"",
        "bunx wrangler d1 execute ${db}  --${typ} --json --command \"SELECT name FROM pragma_table_info('feeds') WHERE name='top'\"",
        "\"Adding top field to feeds table\"",
        "bunx wrangler d1 execute ${db}  --${typ} --json --command \"ALTER TABLE feeds ADD COLUMN top INTEGER DEFAULT 0\"",
        "\"Top field already exists in feeds table\"",
        "\"New database, skip top field check\"",
        "'local'",
        "'remote'",
        "string",
        "bunx wrangler d1 execute ${db}  --${typ} --json --command \"SELECT name FROM sqlite_master WHERE type='table' AND name='info'\"",
        "\"info table not exists\"",
        "\"info table already exists\"",
        "'local'",
        "'remote'",
        "string",
        "\"Legacy database, migration_version not exists\"",
        "bunx wrangler d1 execute ${db}  --${typ} --json --command \"SELECT value FROM info WHERE key='migration_version'\"",
        "\"migration_version not exists\"",
        "\"migration_version:\"",
        "'local'",
        "'remote'",
        "string",
        "\"info table not exists, skip update migration_version\"",
        "\"info table not exists\"",
        "bunx wrangler d1 execute ${db}  --${typ} --json --command \"UPDATE info SET value='${version}' WHERE key='migration_version'\"",
        "\"Updated migration_version to\""
    ],
    "variables": [
        "result",
        "result",
        "isInfoExistResult",
        "result",
        "exists"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "fixTopField",
        "isInfoExist",
        "getMigrationVersion",
        "updateMigrationVersion"
    ],
    "classes": []
}