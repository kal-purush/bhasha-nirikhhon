{
    "identifiers": [
        "Classes",
        "java",
        "math",
        "BigDecimal",
        "java",
        "math",
        "RoundingMode",
        "java",
        "sql",
        "java",
        "text",
        "SimpleDateFormat",
        "java",
        "util",
        "java",
        "util",
        "Calendar",
        "java",
        "util",
        "Comparator",
        "java",
        "util",
        "GregorianCalendar",
        "java",
        "util",
        "java",
        "util",
        "SimpleTimeZone",
        "java",
        "util",
        "SortedMap",
        "java",
        "util",
        "TimeZone",
        "java",
        "util",
        "TreeMap",
        "javax",
        "swing",
        "JOptionPane",
        "stateName",
        "stateAbbrv",
        "stateWPP",
        "stateDaysToLate",
        "timeZone",
        "Override",
        "pc",
        "pchecks",
        "cHist",
        "mDay",
        "message",
        "eol",
        "getProperty",
        "unaddable",
        "priorWagesIsComplete",
        "pchecks",
        "unaddable",
        "message",
        "JOptionPane",
        "showMessageDialog",
        "message",
        "pchecks",
        "newPC",
        "priorWeekStart",
        "timeZone",
        "priorWeekStart",
        "setTime",
        "cHist",
        "getPriorWeekStart",
        "getTime",
        "earliestPriorWageDate",
        "timeZone",
        "earliestPriorWageDate",
        "setTime",
        "cHist",
        "getEarliestPriorWageDate",
        "getTime",
        "pcPPS",
        "timeZone",
        "pcPPS",
        "setTime",
        "pc",
        "getPayPeriodStart",
        "getTime",
        "mPCPPS",
        "pcPPS",
        "getTimeInMillis",
        "formatter",
        "formatter",
        "setLenient",
        "formatter",
        "setTimeZone",
        "timeZone",
        "ePWD",
        "earliestPriorWageDate",
        "getTime",
        "mPWeekEnd",
        "priorWeekStart",
        "getTimeInMillis",
        "mDay",
        "pWeekEnd",
        "timeZone",
        "pWeekEnd",
        "setTimeInMillis",
        "mPWeekEnd",
        "priorWeekEnd",
        "normalizeCalendarTime",
        "pWeekEnd",
        "pcPPE",
        "timeZone",
        "pcPPE",
        "setTime",
        "pc",
        "getPayPeriodEnd",
        "getTime",
        "dPWE",
        "priorWeekEnd",
        "getTime",
        "pcPPS",
        "compareTo",
        "priorWeekEnd",
        "message",
        "eol",
        "formatter",
        "format",
        "pcPPS",
        "getTime",
        "JOptionPane",
        "showMessageDialog",
        "message",
        "pchecks",
        "pcPPS",
        "compareTo",
        "earliestPriorWageDate",
        "pcPPE",
        "compareTo",
        "earliestPriorWageDate",
        "pcE",
        "pcPPE",
        "getTimeInMillis",
        "mEPW",
        "earliestPriorWageDate",
        "getTimeInMillis",
        "mNewPP",
        "pcE",
        "mEPW",
        "mDay",
        "PPDays",
        "ceil",
        "mNewPP",
        "mDay",
        "pc",
        "setPayPeriodStart",
        "earliestPriorWageDate",
        "pcPeriod",
        "valueOf",
        "pcE",
        "subtract",
        "valueOf",
        "mPCPPS",
        "percentGross",
        "valueOf",
        "mNewPP",
        "divide",
        "pcPeriod",
        "RoundingMode",
        "HALF_EVEN",
        "gA",
        "pc",
        "getGrossAmount",
        "pGAMult",
        "gA",
        "multiply",
        "percentGross",
        "nG",
        "pGAMult",
        "setScale",
        "RoundingMode",
        "HALF_EVEN",
        "newGross",
        "valueOf",
        "nG",
        "pc",
        "setGrossAmount",
        "newGross",
        "message",
        "valueOf",
        "PPDays",
        "JOptionPane",
        "showMessageDialog",
        "message",
        "message",
        "formatter",
        "format",
        "ePWD",
        "formatter",
        "format",
        "pcPPE",
        "getTime",
        "JOptionPane",
        "showMessageDialog",
        "message",
        "pchecks",
        "pcPPE",
        "compareTo",
        "priorWeekEnd",
        "pcPPS",
        "compareTo",
        "priorWeekEnd",
        "pcE",
        "pcPPE",
        "getTimeInMillis",
        "mNewPP",
        "mPWeekEnd",
        "mPCPPS",
        "mDay",
        "PPDays",
        "ceil",
        "mNewPP",
        "mDay",
        "pcPeriod",
        "valueOf",
        "pcE",
        "subtract",
        "valueOf",
        "mPCPPS",
        "percentGross",
        "valueOf",
        "mNewPP",
        "divide",
        "pcPeriod",
        "RoundingMode",
        "HALF_EVEN",
        "gA",
        "pc",
        "getGrossAmount",
        "pGAMult",
        "gA",
        "multiply",
        "percentGross",
        "nG",
        "pGAMult",
        "setScale",
        "RoundingMode",
        "HALF_EVEN",
        "newGross",
        "valueOf",
        "nG",
        "newPC",
        "newGross",
        "pc",
        "getPaymentDate",
        "pc",
        "getPayPeriodStart",
        "priorWeekEnd",
        "message",
        "valueOf",
        "PPDays",
        "JOptionPane",
        "showMessageDialog",
        "message",
        "message",
        "formatter",
        "format",
        "dPWE",
        "formatter",
        "format",
        "pcPPS",
        "getTime",
        "JOptionPane",
        "showMessageDialog",
        "message",
        "pchecks",
        "newPC",
        "pchecks",
        "add",
        "newPC",
        "pchecks",
        "add",
        "pc",
        "cHist",
        "setPriorWages",
        "pchecks",
        "eol",
        "cHist",
        "listPriorWages",
        "pchecks",
        "Override",
        "pc",
        "pchecks",
        "priorWeekStart",
        "lightDutyStart",
        "mDay",
        "message",
        "pcPPS",
        "pc",
        "getPayPeriodStart",
        "mPWeekEnd",
        "priorWeekStart",
        "getTimeInMillis",
        "mDay",
        "pWeekEnd",
        "timeZone",
        "pWeekEnd",
        "setTimeInMillis",
        "mPWeekEnd",
        "priorWeekEnd",
        "normalizeCalendarTime",
        "pWeekEnd",
        "pcPPE",
        "pc",
        "getPayPeriodEnd",
        "lightDutyStart",
        "pc",
        "getPayPeriodStart",
        "before",
        "lightDutyStart",
        "pc",
        "setPayPeriodStart",
        "lightDutyStart",
        "pcPPE",
        "compareTo",
        "priorWeekEnd",
        "message",
        "JOptionPane",
        "showMessageDialog",
        "message",
        "pchecks",
        "pcPPS",
        "compareTo",
        "priorWeekEnd",
        "pchecks",
        "add",
        "pc",
        "pchecks",
        "Override",
        "wcPC",
        "wcPayments",
        "priorWeekStart",
        "mDay",
        "mWeek",
        "mDay",
        "message",
        "pcPPS",
        "wcPC",
        "getPayPeriodStart",
        "formatter",
        "formatter",
        "setLenient",
        "mEPPS",
        "priorWeekStart",
        "getTimeInMillis",
        "mWeek",
        "ePPSt",
        "timeZone",
        "epcPPS",
        "mEPPS",
        "ePPSt",
        "setTime",
        "epcPPS",
        "ePPS",
        "normalizeCalendarTime",
        "ePPSt",
        "pcPPS",
        "compareTo",
        "ePPS",
        "message",
        "formatter",
        "format",
        "epcPPS",
        "JOptionPane",
        "showMessageDialog",
        "message",
        "wcPayments",
        "wcPayments",
        "add",
        "wcPC",
        "wcPayments",
        "Override",
        "wcPC",
        "wcPayments",
        "priorWeekStart",
        "mDay",
        "mWeek",
        "mDay",
        "message",
        "wcPRD",
        "wcPC",
        "getPaymentDate",
        "formatter",
        "formatter",
        "setLenient",
        "mEPPS",
        "priorWeekStart",
        "getTimeInMillis",
        "mWeek",
        "ePPSt",
        "timeZone",
        "epcPPS",
        "mEPPS",
        "ePPSt",
        "setTime",
        "epcPPS",
        "ePPS",
        "normalizeCalendarTime",
        "ePPSt",
        "wcPRD",
        "compareTo",
        "ePPS",
        "message",
        "formatter",
        "format",
        "epcPPS",
        "JOptionPane",
        "showMessageDialog",
        "message",
        "wcPayments",
        "wcPayments",
        "add",
        "wcPC",
        "wcPayments",
        "pc",
        "cHist",
        "mDay",
        "splitPCs",
        "fpc",
        "pc",
        "pw",
        "addAndTrimToPriorWages",
        "pc",
        "cHist",
        "get",
        "splitPCs",
        "pw",
        "pwPPE",
        "pw",
        "getPayPeriodEnd",
        "getTimeInMillis",
        "tpdPPS",
        "timeZone",
        "tpdPPS",
        "setTimeInMillis",
        "pwPPE",
        "mDay",
        "tpdPC",
        "fpc",
        "getGrossAmount",
        "subtract",
        "pw",
        "getGrossAmount",
        "toString",
        "fpc",
        "getPaymentDate",
        "tpdPPS",
        "fpc",
        "getPayPeriodEnd",
        "splitPCs",
        "tpdPC",
        "splitPCs",
        "Override",
        "grossAmnt",
        "calculatedWeeklyPayment",
        "tenth",
        "calculatedWeeklyPayment",
        "multiply",
        "tenthAdded",
        "calculatedWeeklyPayment",
        "add",
        "tenth",
        "diff",
        "tenthAdded",
        "subtract",
        "grossAmnt",
        "diff",
        "setScale",
        "RoundingMode",
        "HALF_EVEN",
        "Override",
        "priorWages",
        "pWT",
        "priorWT",
        "pWT",
        "priorWageTotal",
        "priorWT",
        "setScale",
        "RoundingMode",
        "HALF_EVEN",
        "p",
        "priorWages",
        "priorWageTotal",
        "priorWageTotal",
        "add",
        "p",
        "getGrossAmount",
        "avgPriorGrossWeeklyPayment",
        "priorWageTotal",
        "divide",
        "stateWPP",
        "RoundingMode",
        "HALF_EVEN",
        "avgPriorGrossWeeklyPayment",
        "Override",
        "avgPGrossWeekPay",
        "two3",
        "divide",
        "RoundingMode",
        "HALF_UP",
        "cWP",
        "avgPGrossWeekPay",
        "multiply",
        "two3",
        "cWP",
        "toPlainString",
        "cWP",
        "setScale",
        "RoundingMode",
        "HALF_EVEN",
        "Override",
        "priorWeekStart",
        "mDay",
        "mWeek",
        "mDay",
        "mPWS",
        "priorWeekStart",
        "getTimeInMillis",
        "mEPW",
        "mPWS",
        "mWeek",
        "ePWDate",
        "timeZone",
        "ePWDate",
        "setTimeInMillis",
        "mEPW",
        "normalizeCalendarTime",
        "ePWDate",
        "Override",
        "workPayment",
        "avgPriorGrossWeeklyPayment",
        "mDay",
        "mWeek",
        "mDay",
        "mPP",
        "workPayment",
        "getPayPeriodEnd",
        "getTimeInMillis",
        "mDay",
        "workPayment",
        "getPayPeriodStart",
        "getTimeInMillis",
        "payPWeeks",
        "valueOf",
        "mPP",
        "divide",
        "valueOf",
        "mWeek",
        "RoundingMode",
        "HALF_UP",
        "ppSupplementalPayment",
        "avgPriorGrossWeeklyPayment",
        "multiply",
        "payPWeeks",
        "subtract",
        "workPayment",
        "getGrossAmount",
        "multiply",
        "divide",
        "RoundingMode",
        "HALF_UP",
        "ppSupplementalPayment",
        "compareTo",
        "ppSupplementalPayment",
        "setScale",
        "RoundingMode",
        "HALF_EVEN",
        "Override",
        "payPeriodEnd",
        "payReceived",
        "isLate",
        "mDay",
        "mPPE",
        "payPeriodEnd",
        "getTimeInMillis",
        "mPRD",
        "payReceived",
        "getTimeInMillis",
        "daysLate",
        "ceil",
        "mPRD",
        "mPPE",
        "mDay",
        "daysLate",
        "stateDaysToLate",
        "isLate",
        "isLate",
        "isLate",
        "Override",
        "calendar",
        "calendar",
        "get",
        "Calendar",
        "HOUR",
        "calendar",
        "get",
        "Calendar",
        "HOUR_OF_DAY",
        "calendar",
        "get",
        "Calendar",
        "MINUTE",
        "calendar",
        "get",
        "Calendar",
        "SECOND",
        "calendar",
        "get",
        "Calendar",
        "MILLISECOND",
        "calendar",
        "newCal",
        "timeZone",
        "year",
        "calendar",
        "get",
        "Calendar",
        "YEAR",
        "month",
        "calendar",
        "get",
        "Calendar",
        "MONTH",
        "date",
        "calendar",
        "get",
        "Calendar",
        "DATE",
        "offSet",
        "calendar",
        "getTimeZone",
        "getOffset",
        "calendar",
        "getTimeInMillis",
        "calendar",
        "setTimeInMillis",
        "calendar",
        "getTimeInMillis",
        "offSet",
        "calendar",
        "get",
        "Calendar",
        "YEAR",
        "year",
        "calendar",
        "Calendar",
        "YEAR",
        "year",
        "calendar",
        "get",
        "Calendar",
        "MONTH",
        "month",
        "calendar",
        "Calendar",
        "MONTH",
        "month",
        "calendar",
        "get",
        "Calendar",
        "DATE",
        "date",
        "calendar",
        "Calendar",
        "DATE",
        "date",
        "newCal",
        "setLenient",
        "newCal",
        "Calendar",
        "YEAR",
        "year",
        "newCal",
        "Calendar",
        "MONTH",
        "month",
        "newCal",
        "Calendar",
        "DATE",
        "date",
        "newCal",
        "Calendar",
        "AM_PM",
        "Calendar",
        "AM",
        "newCal",
        "Calendar",
        "HOUR",
        "newCal",
        "Calendar",
        "HOUR_OF_DAY",
        "newCal",
        "Calendar",
        "MINUTE",
        "newCal",
        "Calendar",
        "SECOND",
        "newCal",
        "Calendar",
        "MILLISECOND",
        "newCal",
        "Override",
        "pcMap",
        "Override",
        "p1",
        "p2",
        "p1",
        "compareTo",
        "p2",
        "getPayPeriodStart",
        "putAll",
        "pcMap",
        "Override",
        "wcpcMap",
        "Override",
        "p1",
        "p2",
        "p1",
        "compareTo",
        "p2",
        "getPayPeriodStart",
        "putAll",
        "wcpcMap",
        "Override",
        "DefaultStateLawCalculation",
        "stateAbbrv",
        "DefaultStateLawCalculation",
        "stateDaysToLate",
        "Override",
        "DefaultStateLawCalculation",
        "stateName",
        "DefaultStateLawCalculation",
        "stateWPP",
        "Override",
        "DefaultStateLawCalculation",
        "timeZone",
        "Override",
        "priorWages",
        "mDay",
        "mWeek",
        "mDay",
        "mPeriod",
        "p1",
        "priorWages",
        "mP1S",
        "p1",
        "getPayPeriodStart",
        "getTimeInMillis",
        "mP1E",
        "p1",
        "getPayPeriodEnd",
        "getTimeInMillis",
        "mPeriod",
        "mP1E",
        "mP1S",
        "mDay",
        "stateWPP",
        "compareTo",
        "BigDecimal",
        "valueOf",
        "ceil",
        "mPeriod",
        "mWeek",
        "Override",
        "tpdWork",
        "pc",
        "i",
        "j",
        "tpdWork",
        "size",
        "i",
        "j",
        "i",
        "j",
        "pc",
        "doPayPeriodsOverlap",
        "tpdWork",
        "get",
        "i",
        "pc",
        "doPayPeriodsOverlap",
        "tpdWork",
        "get",
        "j",
        "j",
        "i",
        "i",
        "pc",
        "doPayPeriodsOverlap",
        "tpdWork",
        "get",
        "i"
    ],
    "literals": [
        "\"Default\"",
        "\"USA\"",
        "\"13.0\"",
        "\"Standard\"",
        "\"\"",
        "\"line.separator\"",
        "\"Paycheck cannot be added. Total time period of prior wages entered meets Missouri Law criteria.\"",
        "\"MMM-dd-yyyy\"",
        "\"Invalid paycheck start date. Pay Period Start Date must be before the end of the week immediately prior to week of injury.\"",
        "\"Date Entered: \"",
        "\"Only last \"",
        "\" Days of submitted Pay Check entered and calculated for Gross Amount due to earliest accepted date for prior wages relative to date of injury\"",
        "\"Invalid paycheck end date. Pay Period End Date must be after \"",
        "\" based on date of injury in accordance with State law.\"",
        "\"Invalid PPE Date: MOCalc - first condition. Date: \"",
        "\"Only first \"",
        "\" Days of entered Pay Check entered and calculated for Gross Amount due to last accepted date for prior wages relative to date of injury (end of prior week)\"",
        "\"Invalid paycheck start date. Pay Period Start Date must be before \"",
        "\" based on date of injury in accordance with State law.\"",
        "\"Invalid PPS Date: MOCalc - last condition. Date: \"",
        "\"Prior Wages: \"",
        "\"\"",
        "\"Invalid paycheck end date. Pay Period End Date must be after the end of the week immediately prior to week of injury.\"",
        "\"Paycheck Start Date must be trimmed using ReimbursementSummary.trimWorkPayment(Paycheck, totalHrsWorked, weekInjHrsWorked)\"",
        "\"\"",
        "\"MMM-dd-yyyy\"",
        "\"Invalid paycheck start date. Pay Period Start Date must be on or after \"",
        "\" based on date of injury in accordance with Missouri law.\"",
        "\"\"",
        "\"MMM-dd-yyyy\"",
        "\"Invalid paycheck pay date. Pay Date must be on or after \"",
        "\" based on date of injury in accordance with Missouri law.\"",
        "\"0.10\"",
        "\"0.00\"",
        "\"2\"",
        "\"3\"",
        "\"Calculated Weelkly Payment (unrounded): $\"",
        "\"2\"",
        "\"3\"",
        "\"0\"",
        "\"0\""
    ],
    "variables": [],
    "comments": [
        "TODO Auto-generated constructor stub",
        "24 hours in milliseconds",
        "long mWeek = mDay * 7;",
        "Calendar pcPD = pc.getPaymentDate();",
        "long pcPDate = pcPD.getTimeInMillis();",
        "System.out.println(\"EPW Date: \"+formatter.format(ePWD));",
        "System.out.println(\"PWS Date: \"+formatter.format(priorWeekStart.getTime()));",
        "Date dPPS = (Date) pcPPS.getTime();",
        "Date dPPE = (Date) pcPPE.getTime();",
        "if period overlaps ePWD, alter the paycheck to represent only applicable portion (days after ePWD)",
        "String pG = String.valueOf(mNewPP / (pcE - mPCPPS));",
        "System.out.print(\"If work hours used to calculate pay during this period were not evenly distributed for the above number of days,\");",
        "System.out.print(\"please manually enter Gross Income ONLY for the hours worked this pay period STARTING on \" + formatter.format(ePWD) +\".\");",
        "System.out.println(\"Gross Amount is currently set at: \" + pc.getGrossAmount() + \"Enter '1' to set Gross Income manually ONLY if meeting above criteria.\");",
        "System.out.println(\"Enter '2' to confirm and finish adding Paycheck.\");",
        "int selection = s.nextInt();",
        "if PPE is past PWE, alter the paycheck to represent days up to PWE",
        "pc.setPayPeriodEnd(priorWeekEnd);",
        "String pG = String.valueOf(mNewPP / (pcE - mPCPPS));",
        "pc.setGrossAmount(newGross);",
        "System.out.println(newPC.toString());",
        "System.out.println(pc.toString());",
        "24 hours in milliseconds",
        "long pcPPSDate = pcPPS.getTimeInMillis();",
        "SimpleDateFormat formatter = new SimpleDateFormat(\"MMM-dd-yyyy\");",
        "formatter.setLenient(false);",
        "Date dPPS = (Date) pcPPS.getTime();",
        "Date dPPE = (Date) pcPPE.getTime();",
        "Date dPWE = (Date) priorWeekEnd.getTime();",
        "24 hours in milliseconds",
        "Calendar wcPRD = pc.getPaymentDate();",
        "long wcPRDate = wcPRD.getTimeInMillis();",
        "long pcPPSDate = pcPPS.getTimeInMillis();",
        "Date dPPS = pcPPS.getTime();",
        "Calendar pcPPE = pc.getPayPeriodEnd();",
        "Date dPPE = pcPPE.getTime();",
        "24 hours in milliseconds",
        "24 hours in milliseconds",
        "24 hours in milliseconds",
        "based on Missouri Law (13 weeks of paychecks starting with the week immediately preceding the week injured)",
        "formulas based on law at: http://www.moga.mo.gov/mostatutes/stathtml/28700001801.html",
        "returns Work Comp supplemental payment amount (BigDecimal) for hours actually worked during TPD period. Amount calculated based on Missouri Law.",
        "24 hours in milliseconds",
        "long days = workPayment.getDaysInPayPeriod();",
        "long mPPDays = (long) Math.ceil(mPP/mDay);",
        "System.out.println(\"Days in Pay Period(sLC manual): \"+mPPDays);",
        "System.out.println(\"Days in Pay Period(sLC): \"+days);",
        "long mDR = mPP % mWeek;",
        "long daysRemaining = Math.round((mPP % mWeek) / mDay);",
        "BigDecimal week = new BigDecimal(String.valueOf(mWeek));",
        "BigDecimal weekPercentRemainder =  week.divide(new BigDecimal(String.valueOf(Math.round((mPP % mWeek) / mDay))), RoundingMode.UNNECESSARY);",
        "24 hours in milliseconds",
        "long mWeek = mDay * 7;",
        "ensures Calendar time is set to 00:00 on same date",
        "long dstOffSet = calendar.get(Calendar.DST_OFFSET);",
        "HashMap<Paycheck, Integer> result = new HashMap<Paycheck, Integer>();",
        "sort by PPS Date of key",
        "HashMap<WorkCompPaycheck, Integer> result = new HashMap<WorkCompPaycheck, Integer>();",
        "sort by PPS Date of key",
        "24 hours in milliseconds"
    ],
    "docstrings": [
        "hile(selection < 1 || selection > 2){\n\t\t\t\t\tSystem.out.println(\"Invalid input.\");\n\t\t\t\t\tSystem.out.println(\"Please Select an Option:\");\n\t\t\t\t\tSystem.out.println(\"1) Enter Manual Gross Income for pay period starting on \" + formatter.format(ePWD) +\".\");\n\t\t\t\t\tSystem.out.println(\"2) Confirm and finish adding Paycheck.\");\n\t\t\t\t\tselection = s.nextInt();\n\t\t\t\t}\n\n\t\t\t\tif (selection == 1){\n\t\t\t\t\tSystem.out.println(\"Enter Manual Gross Income for wages earned by hours worked from \" + formatter.format(ePWD) +\" through \" + formatter.format(dPPE) + \":\");\n\t\t\t\t\tString gI = s.next();\n\t\t\t\t\tpc.setGrossAmount(gI);\n\t\t\t\t}",
        "ystem.out.println(\"If work hours used to calculate pay during this period were not evenly distributed for the above number of days,\");\n\t\t\t\tSystem.out.println(\"please manually enter Gross Income ONLY for the hours worked this pay period STARTING on \" + formatter.format(dPPS) + \" through \" + formatter.format(dPWE) + \".\");\n\t\t\t\tSystem.out.println(\"Gross Amount is currently set at: \" + pc.getGrossAmount() + \"Enter '1' to set Gross Income manually ONLY if meeting above criteria.\");\n\t\t\t\tSystem.out.println(\"Enter '2' to confirm and finish adding Paycheck.\");\n\t\t\t\tint selection = s.nextInt();\n\t\t\t\twhile(selection < 1 || selection > 2){\n\t\t\t\t\tSystem.out.println(\"Invalid input.\");\n\t\t\t\t\tSystem.out.println(\"Please Select an Option:\");\n\t\t\t\t\tSystem.out.println(\"1) Enter Manual Gross Income for pay period starting on \" + formatter.format(dPPS) + \" through \" + formatter.format(dPWE) + \".\");\n\t\t\t\t\tSystem.out.println(\"2) Confirm and finish adding Paycheck.\");\n\t\t\t\t\tselection = s.nextInt();\n\t\t\t\t}\n\n\t\t\t\tif (selection == 1){\n\t\t\t\t\tSystem.out.println(\"Enter Manual Gross Income for wages earned by hours worked from \" + formatter.format(dPPS) +\" through \" + formatter.format(dPWE) + \":\");\n\t\t\t\t\tString gI = s.next();\n\t\t\t\t\tpc.setGrossAmount(gI);\n\t\t\t\t}",
        "probably wont need, will delete or implement later \n\t * @Override\n\tpublic BigDecimal computeAmountNotPaid(ArrayList<WorkCompPaycheck> wcPayments, BigDecimal calcWP) {\n\t\tString aNP = \"0.00\";\n\t\tBigDecimal amountNotPaid = new BigDecimal(aNP);\n\t\t\n\t\tfor (WorkCompPaycheck p : this.wcPayments){\n\t\t\tBigDecimal aSO = this.calculatedWeeklyPayment.subtract(p.getGrossAmount());\n\t\t\tamountNotPaid = amountNotPaid.add(aSO);\n\t\t\taSO = aSO.setScale(2, RoundingMode.HALF_EVEN);\n\t\t\tp.setAmountStillOwed(aSO);\n\t\t}\n\t\tamountNotPaid = amountNotPaid.setScale(2, RoundingMode.HALF_EVEN);\n\t\tthis.amountNotPaid = amountNotPaid;\t\treturn null;\n\t}",
        "long newOffset = newCal.getTimeZone().getOffset(newCal.getTimeInMillis());\n\t    if (newOffset != 0){\n\t    \tnewCal.setTimeInMillis(newCal.getTimeInMillis() + newOffset);\n\t    \tif (newCal.get(Calendar.YEAR) != year){\n\t\t\t\tnewCal.set(Calendar.YEAR, year);\n\t\t\t}\n\t\t\tif (newCal.get(Calendar.MONTH) != month){\n\t\t\t\tnewCal.set(Calendar.MONTH, month);\n\t\t\t}\n\t\t\tif (newCal.get(Calendar.DATE) != date){\n\t\t\t\tnewCal.set(Calendar.DATE, date);\n\t\t\t}\n\t\t\tnewCal.set(Calendar.AM_PM, Calendar.AM);\n\t\t    newCal.set(Calendar.HOUR, 0);\n\t\t    newCal.set(Calendar.HOUR_OF_DAY, 0);\n\t\t    newCal.set(Calendar.MINUTE, 0);\n\t\t    newCal.set(Calendar.SECOND, 0);\n\t\t    newCal.set(Calendar.MILLISECOND, 0);\n\t    }\n\t    \n\t    \n\t    long dstOffSet = newCal.get(Calendar.DST_OFFSET);\n\t    if (newCal.get(Calendar.HOUR) != 0 || newCal.get(Calendar.HOUR_OF_DAY) != 0){\n\t    \tnewCal.setTimeInMillis(newCal.getTimeInMillis() - dstOffSet);\n\t    }",
        "cMap.entrySet().stream().sorted(Map.Entry.<Paycheck, Integer>comparingByKey(new Comparator<Paycheck>(){\n                \t@Override\n        \t\t\tpublic int compare(Paycheck p1, Paycheck p2) {\n        \t\t\t\t\n        \t\t\t\treturn p1.compareTo(p2.getPayPeriodStart());\n                \t}}))\n                .forEachOrdered(x -> result.put(x.getKey(), x.getValue()));",
        "cpcMap.entrySet().stream().sorted(Map.Entry.<WorkCompPaycheck, Integer>comparingByKey(new Comparator<WorkCompPaycheck>(){\n        \t@Override\n\t\t\tpublic int compare(WorkCompPaycheck p1, WorkCompPaycheck p2) {\n\t\t\t\t\n\t\t\t\treturn p1.compareTo(p2.getPayPeriodStart());\n        \t}}))\n        .forEachOrdered(x -> result.put(x.getKey(), x.getValue()));",
        "for testing purposes\n\tpublic void main(){\n\t\tWorkCompPaycheck wc = new WorkCompPaycheck();\n\t\tBigDecimal test = computeWCSupplementalPayment(wc, new BigDecimal(\"500\"));\n\t}"
    ],
    "functions": [
        "DefaultStateLawCalculation",
        "addAndTrimToPriorWages",
        "addTPDWorkPaycheck",
        "addWCPaycheck",
        "addWCPaycheckNoKnownPP",
        "splitDateInjuredPayPeriodChecks",
        "BigDecimal",
        "computeAnyLatePaymentCompensation",
        "BigDecimal",
        "computeAvgPriorGrossWeeklyPayment",
        "BigDecimal",
        "computeCalculatedWeeklyPayment",
        "Calendar",
        "computeEarliestPriorWageDate",
        "BigDecimal",
        "computeWCSupplementalPayment",
        "determineAndSetIsLate",
        "Calendar",
        "normalizeCalendarTime",
        "sortPCHashMapByDate",
        "compare",
        "sortWCPCHashMapByDate",
        "compare",
        "getStateAbbrv",
        "getStateDaysToLate",
        "getStateName",
        "BigDecimal",
        "getStateWeeksPriorPeriod",
        "TimeZone",
        "getTimeZone",
        "priorWagesIsComplete",
        "isWithinTPDPeriod"
    ],
    "classes": [
        "DefaultStateLawCalculation"
    ]
}