{
    "identifiers": [
        "Neural",
        "NET",
        "Core",
        "Collections",
        "Generic",
        "MathNet",
        "Numerics",
        "MathNet",
        "Numerics",
        "Distributions",
        "MathNet",
        "Numerics",
        "LinearAlgebra",
        "MathNet",
        "Numerics",
        "Providers",
        "LinearAlgebra",
        "numFeatures",
        "IReadOnlyList",
        "numHiddenNodes",
        "numOutputNodes",
        "LayerCount",
        "numHiddenNodes",
        "Count",
        "InputNodeCount",
        "numFeatures",
        "OutputNodeCount",
        "numOutputNodes",
        "NodesPerLayer",
        "LayerCount",
        "Biases",
        "LayerCount",
        "Weights",
        "Matrix",
        "LayerCount",
        "Control",
        "TryUseNativeMKL",
        "NodesPerLayer",
        "InputNodeCount",
        "NodesPerLayer",
        "LayerCount",
        "OutputNodeCount",
        "i",
        "LayerCount",
        "i",
        "NodesPerLayer",
        "i",
        "numHiddenNodes",
        "i",
        "i",
        "LayerCount",
        "i",
        "Biases",
        "i",
        "Build",
        "Random",
        "NodesPerLayer",
        "i",
        "Normal",
        "Weights",
        "i",
        "Matrix",
        "Build",
        "Random",
        "NodesPerLayer",
        "i",
        "NodesPerLayer",
        "i",
        "Normal",
        "Control",
        "LinearAlgebraProvider",
        "Matrix",
        "activation",
        "Build",
        "DenseOfArray",
        "activation",
        "i",
        "LayerCount",
        "i",
        "_activation",
        "Sigmoid",
        "Weights",
        "i",
        "Multiply",
        "_activation",
        "Add",
        "Biases",
        "i",
        "_activation",
        "MaximumIndex",
        "vector",
        "derivative",
        "derivative",
        "vector",
        "Exp",
        "x",
        "Exp",
        "x",
        "Zeros",
        "Include",
        "vector",
        "Exp",
        "x",
        "Zeros",
        "Include"
    ],
    "literals": [],
    "variables": [
        "i",
        "i",
        "ILinearAlgebraProvider",
        "Provider",
        "InputNodeCount",
        "LayerCount",
        "Weights",
        "NodesPerLayer",
        "OutputNodeCount",
        "Biases",
        "_activation",
        "i"
    ],
    "comments": [
        "-----------------------------------------------------------------------",
        "<copyright file=\"Network.cs\" company=\"Joseph Meyer (Individual)\">",
        "Copyright (c) Joseph Meyer. All rights reserved.",
        "</copyright>",
        "-----------------------------------------------------------------------",
        "The class that represents a neural network.",
        "</summary>",
        "Initializes a new instance of the <see cref=\"Network\"/> class.",
        "</summary>",
        "<param name=\"numFeatures\">Number of features (input nodes) for the net.</param>",
        "<param name=\"numHiddenNodes\">A <see cref=\"IReadOnlyList{int}\"/> of how many hidden nodes should be in each hidden layer.</param>",
        "<param name=\"numOutputNodes\">How many nodes should be in the output layer.</param>",
        "Initialize the size of our arrays",
        "Fill our NumberOfNodes array",
        "Need to randomly make a list of vectors for biases and weights. One between each layer.",
        "Gets the current provider so the user can check to see which one the network decided to use.",
        "</summary>",
        "Gets or sets the number of input nodes in our network",
        "</summary>",
        "Gets or sets the value of how many layers exist in the network.",
        "</summary>",
        "Gets or sets the matrix array holding all weights in our network",
        "</summary>",
        "Gets or sets an array that holds how many nodes are in each layer",
        "</summary>",
        "Gets or sets the number of output nodes in our network",
        "</summary>",
        "Gets or sets the vector array holding all biases in our network",
        "</summary>",
        "This is the public facing feed forward.",
        "</summary>",
        "<param name=\"activation\">The values for the input layer.</param>",
        "<returns>The index of the largest value from the network (it's guess).</returns>",
        "Applies the sigmoid function to all elements of a vector",
        "</summary>",
        "<param name=\"vector\">The vector holding the values to run the sigmoid operation on.</param>",
        "<returns>A vector with the sigmoid operation ran on all values.</returns>",
        "Sigmoid(x) is 1 / (1 + e^-x). The derivative is Sigmoid(x) * (1 - Sigmoid(x))"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "Network",
        "FeedForward",
        "Sigmoid"
    ],
    "classes": [
        "Network"
    ]
}