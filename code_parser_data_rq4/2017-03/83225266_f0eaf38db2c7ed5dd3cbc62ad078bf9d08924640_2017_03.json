{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "unicode_literals",
        "argparse",
        "os",
        "sys",
        "xml",
        "parsers",
        "expat",
        "mako",
        "template",
        "Template",
        "Template",
        "output_encoding",
        "name",
        "i",
        "j",
        "substitutions",
        "items",
        "name",
        "replace",
        "i",
        "j",
        "name",
        "name",
        "to_alphanum",
        "name",
        "name",
        "isalpha",
        "name",
        "name",
        "z",
        "z",
        "z",
        "z",
        "z",
        "other",
        "tenx",
        "other",
        "tenx",
        "hash",
        "tenx",
        "other",
        "tenx",
        "other",
        "tenx",
        "token",
        "padded",
        "tenx",
        "gen",
        "gen",
        "padded",
        "token",
        "token",
        "format",
        "gen",
        "token",
        "pad",
        "container_name",
        "name",
        "container_name",
        "name",
        "safe_name",
        "join",
        "container_name",
        "name",
        "gen",
        "xml_attrs",
        "isinstance",
        "gen",
        "Gen",
        "xml_attrs",
        "xml_attrs",
        "bits_by_gen",
        "end",
        "start",
        "gen",
        "isinstance",
        "gen",
        "Gen",
        "Gen",
        "gen",
        "bits_by_gen",
        "get",
        "gen",
        "fields",
        "xml",
        "parsers",
        "expat",
        "ParserCreate",
        "parser",
        "start_element",
        "parser",
        "end_element",
        "fields",
        "filename",
        "open",
        "filename",
        "f",
        "parser",
        "ParseFile",
        "f",
        "name",
        "attrs",
        "name",
        "Gen",
        "attrs",
        "name",
        "start_container",
        "attrs",
        "name",
        "start_field",
        "attrs",
        "name",
        "name",
        "name",
        "attrs",
        "container_name",
        "attrs",
        "attrs",
        "container_name",
        "attrs",
        "get",
        "field_name",
        "container_name",
        "field_name",
        "key",
        "fields",
        "fields",
        "Field",
        "container_name",
        "field_name",
        "fields",
        "key",
        "add_gen",
        "gen",
        "attrs",
        "argparse",
        "ArgumentParser",
        "p",
        "add_argument",
        "help",
        "p",
        "add_argument",
        "help",
        "p",
        "add_argument",
        "metavar",
        "nargs",
        "p",
        "parse_args",
        "pargs",
        "output",
        "pargs",
        "cpp_guard",
        "os",
        "path",
        "basename",
        "pargs",
        "output",
        "upper",
        "replace",
        "pargs",
        "parse_args",
        "source",
        "pargs",
        "xml_sources",
        "XmlParser",
        "fields",
        "parse",
        "source",
        "open",
        "pargs",
        "output",
        "f",
        "f",
        "write",
        "TEMPLATE",
        "render",
        "fields",
        "fields",
        "guard",
        "pargs",
        "cpp_guard",
        "main"
    ],
    "literals": [
        "'utf-8'",
        "' '",
        "''",
        "'/'",
        "''",
        "'['",
        "''",
        "']'",
        "''",
        "'('",
        "''",
        "')'",
        "''",
        "'-'",
        "''",
        "':'",
        "''",
        "'.'",
        "''",
        "','",
        "''",
        "'='",
        "''",
        "'>'",
        "''",
        "'#'",
        "''",
        "'α'",
        "'alpha'",
        "'&'",
        "''",
        "'*'",
        "''",
        "'\"'",
        "''",
        "'+'",
        "''",
        "'\\''",
        "''",
        "'_'",
        "''",
        "' '",
        "'_'",
        "'GEN{}_{}{}'",
        "'_'",
        "'bits'",
        "'start'",
        "'end'",
        "'genxml'",
        "'gen'",
        "'instruction'",
        "'struct'",
        "'register'",
        "'field'",
        "'genxml'",
        "'instruction'",
        "'struct'",
        "'register'",
        "'name'",
        "'name'",
        "'-o'",
        "'--output'",
        "\"If OUTPUT is unset or '-', then it defaults to '/dev/stdout'\"",
        "'--cpp-guard'",
        "'If unset, then CPP_GUARD is derived from OUTPUT.'",
        "'xml_sources'",
        "'XML_SOURCE'",
        "'+'",
        "'-'",
        "'/dev/stdout'",
        "'.'",
        "'_'",
        "'wb'",
        "'__main__'"
    ],
    "variables": [
        "TEMPLATE",
        "substitutions",
        "name",
        "name",
        "name",
        "z",
        "tenx",
        "gen",
        "pad",
        "pad",
        "token",
        "container_name",
        "name",
        "token_name",
        "bits_by_gen",
        "start",
        "end",
        "gen",
        "gen",
        "parser",
        "StartElementHandler",
        "EndElementHandler",
        "gen",
        "container_name",
        "fields",
        "gen",
        "gen",
        "container_name",
        "container_name",
        "field_name",
        "key",
        "key",
        "p",
        "pargs",
        "pargs",
        "output",
        "pargs",
        "cpp_guard",
        "pargs",
        "fields"
    ],
    "comments": [
        "encoding=utf-8",
        "Copyright © 2017 Intel Corporation",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "The above copyright notice and this permission notice shall be included in",
        "all copies or substantial portions of the Software.",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE.",
        "Convert potential \"major.minor\" string",
        "Maps (container_name, field_name) => Field"
    ],
    "docstrings": [
        "\"\"\"\\\n<%!\nfrom operator import itemgetter\n%>\\\n/*\n * Copyright © 2017 Intel Corporation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice (including the next\n * paragraph) shall be included in all copies or substantial portions of the\n * Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* THIS FILE HAS BEEN GENERATED, DO NOT HAND EDIT.\n *\n * Sizes of bitfields in genxml instructions, structures, and registers.\n */\n\n#ifndef ${guard}\n#define ${guard}\n\n#include <stdint.h>\n\n#include \"common/gen_device_info.h\"\n#include \"util/macros.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n% for _, field in sorted(fields.iteritems(), key=itemgetter(0)):\n\n/* ${field.container_name}::${field.name} */\n% for gen, bits in sorted(field.bits_by_gen.iteritems(), reverse=True):\n#define ${gen.prefix(field.token_name, padded=True)}    ${bits}\n% endfor\n\nstatic inline uint32_t ATTRIBUTE_PURE\n${field.token_name}(const struct gen_device_info *devinfo)\n{\n   switch (devinfo->gen) {\n   case 9: return ${field.bits(9)};\n   case 8: return ${field.bits(8)};\n   case 7:\n      if (devinfo->is_haswell) {\n         return ${field.bits(7.5)};\n      } else {\n         return ${field.bits(7)};\n      }\n   case 6: return ${field.bits(6)};\n   case 5: return ${field.bits(5)};\n   case 4:\n      if (devinfo->is_g4x) {\n         return ${field.bits(4.5)};\n      } else {\n         return ${field.bits(4)};\n      }\n   default:\n      unreachable(\"Invalid hardware generation\");\n   }\n}\n% endfor\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* ${guard} */\"\"\""
    ],
    "functions": [
        "to_alphanum",
        "safe_name",
        "__lt__",
        "__hash__",
        "__eq__",
        "prefix",
        "add_gen",
        "bits",
        "parse",
        "start_element",
        "end_element",
        "start_container",
        "start_field",
        "parse_args",
        "main"
    ],
    "classes": [
        "Gen",
        "Field",
        "XmlParser"
    ]
}