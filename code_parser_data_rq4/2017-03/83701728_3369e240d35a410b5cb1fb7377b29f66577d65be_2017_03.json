{
    "identifiers": [
        "my_history",
        "their_history",
        "my_score",
        "their_score",
        "my_history",
        "their_history",
        "my_score",
        "their_score",
        "result",
        "move",
        "my_history",
        "their_history",
        "my_score",
        "their_score",
        "real_result",
        "result",
        "join",
        "my_history",
        "their_history",
        "my_score",
        "their_score",
        "real_result",
        "result",
        "test_move",
        "my_history",
        "their_history",
        "my_score",
        "their_score",
        "result",
        "test_move",
        "my_history",
        "their_history",
        "my_score",
        "their_score",
        "result"
    ],
    "literals": [
        "'The name the team gives to itself'",
        "'The name the team gives to this strategy'",
        "'How does this strategy decide?'",
        "'c'",
        "\"move(\"",
        "\", \"",
        "\"'\"",
        "\"'\"",
        "\"'\"",
        "\"'\"",
        "\") returned \"",
        "\"'\"",
        "\"'\"",
        "\" and should have returned '\"",
        "\"'\"",
        "'__main__'",
        "''",
        "''",
        "'b'",
        "'Test passed'",
        "'bbbbbb'",
        "'cccccc'",
        "'b'"
    ],
    "variables": [
        "team_name",
        "strategy_name",
        "strategy_description",
        "real_result"
    ],
    "comments": [
        "",
        "Each team's file must define four tokens:",
        "team_name: a string",
        "strategy_name: a string",
        "strategy_description: a string",
        "move: A function that returns 'c' or 'b'",
        "",
        "Only 10 chars displayed.",
        "my_history: a string with one letter (c or b) per round that has been played with this opponent.",
        "their_history: a string of the same length as history, possibly empty.",
        "The first round between these two players is my_history[0] and their_history[0].",
        "The most recent round is my_history[-1] and their_history[-1].",
        "Analyze my_history and their_history and/or my_score and their_score.",
        "Decide whether to return 'c' or 'b'.",
        "Test 1: Betray on first move.",
        "Test 2: Continue betraying if they collude despite being betrayed.",
        "Note the scores are for testing move().",
        "The history and scores don't need to match unless",
        "that is relevant to the test of move(). Here,",
        "the simulation (if working correctly) would have awarded",
        "300 to me and -750 to them. This test will pass if and only if",
        "move('bbb', 'ccc', 0, 0) returns 'b'."
    ],
    "docstrings": [
        "''' Arguments accepted: my_history, their_history are strings.\n    my_score, their_score are ints.\n    \n    Make my move.\n    Returns 'c' or 'b'. \n    '''",
        "'''calls move(my_history, their_history, my_score, their_score)\n    from this module. Prints error if return value != result.\n    Returns True or False, dpending on whether result was as expected.\n    '''"
    ],
    "functions": [
        "move",
        "test_move"
    ],
    "classes": []
}