{
    "identifiers": [
        "json",
        "unittest",
        "logging",
        "wishlists",
        "persistence",
        "db",
        "DatabaseEngine",
        "flask_api",
        "status",
        "unittest",
        "TestCase",
        "wishlists",
        "app",
        "wishlists",
        "app",
        "logger",
        "addHandler",
        "logging",
        "StreamHandler",
        "wishlists",
        "app",
        "logger",
        "setLevel",
        "logging",
        "CRITICAL",
        "wishlists",
        "db",
        "create_wishlist",
        "wishlists",
        "db",
        "add_item",
        "wishlists",
        "db",
        "wishlists",
        "app",
        "test_client",
        "DatabaseEngine",
        "json",
        "dumps",
        "new_wl",
        "app",
        "put",
        "data",
        "data",
        "content_type",
        "assertEqual",
        "resp",
        "status_code",
        "status",
        "HTTP_200_OK",
        "json",
        "loads",
        "resp",
        "data",
        "assertEqual",
        "new_json",
        "json",
        "dumps",
        "new_wl",
        "app",
        "put",
        "data",
        "data",
        "content_type",
        "assertEqual",
        "resp",
        "status_code",
        "status",
        "HTTP_200_OK",
        "json",
        "loads",
        "resp",
        "data",
        "assertEqual",
        "new_json",
        "app",
        "put",
        "data",
        "content_type",
        "assertEqual",
        "resp",
        "status_code",
        "status",
        "HTTP_400_BAD_REQUEST",
        "app",
        "put",
        "data",
        "content_type",
        "assertEqual",
        "resp",
        "status_code",
        "status",
        "HTTP_400_BAD_REQUEST",
        "unittest",
        "main"
    ],
    "literals": [
        "'wl1'",
        "'palak'",
        "'id'",
        "'item1'",
        "'description'",
        "'test item 1'",
        "'name'",
        "'wl2'",
        "'user_id'",
        "'pala'",
        "'/wishlists/1'",
        "'application/json'",
        "'user_id'",
        "'pala'",
        "'description'",
        "'updated'",
        "'/wishlists/1/items/item1'",
        "'application/json'",
        "'items'",
        "'item1'",
        "'description'",
        "'updated'",
        "'/wishlists/1'",
        "'application/json'",
        "'/wishlists/1/items/item1'",
        "'application/json'",
        "'__main__'"
    ],
    "variables": [
        "debug",
        "db",
        "app",
        "wishlists",
        "db",
        "new_wl",
        "data",
        "resp",
        "new_json",
        "new_wl",
        "data",
        "resp",
        "new_json",
        "resp",
        "resp"
    ],
    "comments": [
        "Test cases can be run with either of the following:",
        "python -m unittest discover",
        "nosetests -v --rednose --nologcapture",
        "def test_add_wishlist(self):",
        "wishlist_count = len(self.db._wishlist_resources)",
        "new_wl = {'name' : 'wl2', 'user_id' : 'palak'}",
        "data = json.dumps(new_wl)",
        "resp = self.app.post('/wishlists', data=data, content_type='application/json')",
        "self.assertEqual(status.HTTP_201_CREATED, resp.status_code)",
        "print resp",
        "print new_json",
        "def test_update_wishlist_with_text_data(self):",
        "resp = self.app.put('/wishlists/1', data=\"hello\", content_type='text/plain')",
        "self.assertEqual( resp.status_code, status.HTTP_400_BAD_REQUEST )",
        "def test_update_item_with_text_data(self):",
        "resp = self.app.put('/wishlists/1', data=\"hello\", content_type='text/plain')",
        "self.assertEqual( resp.status_code, status.HTTP_400_BAD_REQUEST )"
    ],
    "docstrings": [],
    "functions": [
        "setUp",
        "tearDown",
        "test_update_wishlist",
        "test_update_item",
        "test_update_wishlist_with_no_data",
        "test_update_item_with_no_data"
    ],
    "classes": [
        "WishlistTestCase"
    ]
}