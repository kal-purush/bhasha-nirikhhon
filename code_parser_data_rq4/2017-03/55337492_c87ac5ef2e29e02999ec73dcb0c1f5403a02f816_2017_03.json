{
    "identifiers": [
        "re",
        "subprocess",
        "charmhelpers",
        "core",
        "unitdata",
        "bin_name",
        "unitdata",
        "kv",
        "db",
        "get",
        "BIN_VERSIONS",
        "bin_versions",
        "get",
        "bin_name",
        "cached_version",
        "cached_version",
        "_get_bin_version",
        "bin_name",
        "version",
        "db",
        "BIN_VERSIONS",
        "bin_versions",
        "version",
        "unitdata",
        "kv",
        "db",
        "unset",
        "BIN_VERSIONS",
        "bin_name",
        "format",
        "bin_name",
        "split",
        "subprocess",
        "check_output",
        "cmd",
        "decode",
        "q",
        "q",
        "re",
        "findall",
        "version_string"
    ],
    "literals": [
        "'bin_versions'",
        "'{} --version'",
        "'utf-8'",
        "\"[0-9]+\""
    ],
    "variables": [
        "BIN_VERSIONS",
        "db",
        "bin_versions",
        "cached_version",
        "version",
        "bin_versions",
        "bin_name",
        "db",
        "cmd",
        "version_string"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Copyright 2015 The Kubernetes Authors.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License."
    ],
    "docstrings": [
        "\"\"\"Get the version of an installed Kubernetes binary.\n\n    :param str bin_name: Name of binary\n    :return: 3-tuple version (maj, min, patch)\n\n    Example::\n\n        >>> `get_version('kubelet')\n        (1, 6, 0)\n\n    \"\"\"",
        "\"\"\"Reset the cache of bin versions.\n\n    \"\"\"",
        "\"\"\"Get a binary version by calling it with --version and parsing output.\n\n    \"\"\""
    ],
    "functions": [
        "get_version",
        "reset_versions",
        "_get_bin_version"
    ],
    "classes": []
}