{
    "identifiers": [
        "$",
        "F_Global",
        "NSINKA_Global",
        "NSINKA_Global",
        "a",
        "a",
        "a",
        "check",
        "navigator",
        "navigator",
        "NSINKA_Global",
        "check",
        "check",
        "$",
        "$",
        "wW",
        "wH",
        "wW",
        "wH",
        "wH",
        "wW",
        "factor",
        "$",
        "$",
        "wW",
        "wH",
        "wW",
        "wH",
        "wH",
        "wW",
        "factor",
        "url",
        "fnAfter",
        "NSINKA_Global",
        "NSINKA_Global",
        "NSINKA_Global",
        "$",
        "url",
        "data",
        "$data",
        "$",
        "data",
        "item",
        "item",
        "item",
        "item",
        "title",
        "$data",
        "item",
        "item",
        "item",
        "$",
        "$",
        "title",
        "fnAfter",
        "$data",
        "id",
        "data",
        "data",
        "data",
        "_",
        "$",
        "id",
        "data",
        "$body",
        "$body",
        "$body",
        "$",
        "$",
        "$body",
        "$body",
        "$",
        "$this",
        "$",
        "jsaction",
        "i",
        "fn",
        "fn",
        "fn",
        "NSINKA_Actions",
        "fn",
        "NSINKA_Actions",
        "fn",
        "$this",
        "attrs",
        "fn",
        "attrs",
        "$this",
        "attrs",
        "$this",
        "e",
        "e",
        "e",
        "$",
        "$html",
        "opened_class",
        "$this",
        "button_active_class",
        "$html",
        "opened_class",
        "$this",
        "button_active_class",
        "$html",
        "opened_class",
        "$this",
        "$this",
        "e",
        "percentage",
        "percentage",
        "$this",
        "$this",
        "$this",
        "$",
        "$",
        "$this",
        "$this",
        "$this",
        "NSINKA_Map",
        "$this",
        "$",
        "e",
        "route",
        "calcDuration",
        "route",
        "showWaypoints",
        "route",
        "route",
        "route",
        "$",
        "route",
        "i",
        "waypoint",
        "duration",
        "waypoint",
        "$this",
        "duration",
        "route",
        "$",
        "NSINKA_Global",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "$this",
        "$tmpl",
        "$tmpl",
        "i",
        "NSINKA_Map",
        "i",
        "$tmpl",
        "ui",
        "NSINKA_Map",
        "$tmpl",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Actions",
        "$tmpl",
        "$this",
        "$this",
        "$",
        "$this",
        "$row",
        "deactivatedClass",
        "$row",
        "deactivatedClass",
        "$row",
        "deactivatedClass",
        "$changeIcon",
        "$this",
        "$this",
        "$this",
        "$this",
        "$changeIcon",
        "NSINKA_Map",
        "$row",
        "inactive",
        "NSINKA_Map",
        "NSINKA_Map",
        "$this",
        "$this",
        "e",
        "e",
        "e",
        "$",
        "$form",
        "$form",
        "activeClass",
        "$form",
        "activeClass",
        "$input",
        "$form",
        "activeClass",
        "$input",
        "$this",
        "$this",
        "$",
        "NSINKA_Global",
        "NSINKA_Map",
        "$",
        "$tmpl",
        "$tmpl",
        "$locations__wrapper",
        "$this",
        "$tmpl",
        "$locations__wrapper",
        "$locations__wrapper",
        "$tmpl",
        "$tmpl",
        "$tmpl",
        "transitionEndTrigger",
        "$tmpl",
        "setTimeout",
        "$tmpl",
        "$this",
        "$this",
        "NSINKA_Map",
        "$",
        "NSINKA_Map",
        "$this",
        "$this",
        "$header",
        "$this",
        "e",
        "percentage",
        "percentage",
        "$header",
        "headerStandardValue",
        "$header",
        "jQuery",
        "fn",
        "$",
        "$",
        "e",
        "e",
        "e",
        "e",
        "fn",
        "$",
        "$",
        "ResizeSensor",
        "$content",
        "$content",
        "$",
        "$",
        "$",
        "ResizeSensor",
        "$this",
        "$this",
        "$this",
        "$this",
        "$",
        "$this",
        "$content",
        "$",
        "$body",
        "$body",
        "$body",
        "$",
        "$",
        "e",
        "e",
        "e",
        "e",
        "NSINKA_Global",
        "NSINKA_Layers",
        "$body",
        "$body",
        "$body",
        "$",
        "$",
        "$body",
        "$",
        "$",
        "item",
        "item",
        "item",
        "item",
        "$data",
        "$main",
        "$",
        "$data",
        "item",
        "item",
        "item",
        "NSINKA_Layers",
        "$main",
        "$",
        "$",
        "$main",
        "$",
        "$ajaxSibling",
        "$",
        "$ajaxSibling",
        "$sChildLayer",
        "$tChildLayer",
        "$t",
        "$sChildLayer",
        "$tChildLayer",
        "$tChildLayer",
        "$sChildLayer",
        "$tChildLayer",
        "$t",
        "$sChildLayer",
        "$",
        "$layers",
        "$",
        "$main",
        "$",
        "$",
        "$",
        "$",
        "$layerContentHeader",
        "$layerContentHeader",
        "handle",
        "$",
        "$",
        "handle",
        "parseFloat",
        "$",
        "$",
        "$",
        "$",
        "$",
        "id",
        "$",
        "id",
        "e",
        "preventThisPropagation",
        "e",
        "$",
        "$",
        "preventThisPropagation",
        "$",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "$",
        "$",
        "i",
        "$item",
        "$item",
        "$",
        "e",
        "e",
        "$",
        "e",
        "e",
        "e",
        "e",
        "e",
        "currentClientY",
        "calc",
        "currentClientY",
        "calc",
        "calc",
        "$",
        "calc",
        "calc",
        "calc",
        "calc",
        "currentClientY",
        "e",
        "e",
        "finalHeight",
        "transitionEndTrigger",
        "$",
        "_this",
        "$",
        "$",
        "$",
        "e",
        "e",
        "Event",
        "CustomEvent",
        "e",
        "e",
        "simulatedEvent",
        "simulatedEvent",
        "Event",
        "NSINKA_Global",
        "$",
        "i",
        "eventType",
        "_this",
        "eventType",
        "_this",
        "Event",
        "$",
        "Event",
        "Event",
        "$",
        "Event",
        "Event",
        "afterFn",
        "$",
        "afterFn",
        "afterFn",
        "$layer",
        "$",
        "$layer",
        "$layer",
        "NSINKA_Layers",
        "$layer",
        "$layer",
        "NSINKA_Layers",
        "setTimeout",
        "$layer",
        "transitionEndTrigger",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "google",
        "NSINKA_Map",
        "google",
        "NSINKA_Map",
        "google",
        "google",
        "NSINKA_Map",
        "google",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "$",
        "google",
        "NSINKA_Map",
        "NSINKA_Map",
        "$",
        "$",
        "NSINKA_Map",
        "i",
        "waypoint",
        "NSINKA_Map",
        "google",
        "waypoint",
        "waypoint",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "select",
        "NSINKA_Map",
        "select",
        "NSINKA_Map",
        "$",
        "NSINKA_Map",
        "i",
        "elem",
        "$",
        "i",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "i",
        "NSINKA_Map",
        "i",
        "$",
        "NSINKA_Map",
        "i",
        "route",
        "route",
        "route",
        "NSINKA_Map",
        "i",
        "NSINKA_Map",
        "pos",
        "pos",
        "NSINKA_Map",
        "google",
        "pos",
        "pos",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "google",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "google",
        "NSINKA_Map",
        "NSINKA_Map",
        "google",
        "s",
        "s",
        "s",
        "google",
        "s",
        "s",
        "r",
        "NSINKA_Map",
        "NSINKA_Map",
        "pos",
        "compass",
        "pos",
        "NSINKA_Map",
        "pos",
        "NSINKA_Map",
        "pos",
        "compass",
        "NSINKA_Map",
        "icon",
        "compass",
        "icon",
        "NSINKA_Map",
        "icon",
        "eventData",
        "compassdir",
        "compassdir",
        "NSINKA_Map",
        "compassdir",
        "$",
        "compassdir",
        "navigator",
        "navigator",
        "fnAfter",
        "navigator",
        "fnAfter",
        "fnAfter",
        "pos",
        "NSINKA_Map",
        "google",
        "pos",
        "pos",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "NSINKA_Map",
        "google",
        "NSINKA_Map",
        "NSINKA_Map",
        "$",
        "$",
        "NSINKA_Map",
        "i",
        "waypoint",
        "waypoint",
        "waypoint",
        "waypoints_inactive",
        "waypoint",
        "waypoints_active",
        "waypoint",
        "waypoints_active",
        "active_length",
        "NSINKA_Map",
        "NSINKA_Map",
        "google",
        "waypoints_active",
        "google",
        "waypoints_active",
        "active_length",
        "start",
        "end",
        "$",
        "$",
        "waypoints_active",
        "waypoint",
        "waypoint",
        "google",
        "response",
        "status",
        "status",
        "google",
        "NSINKA_Map",
        "response",
        "response",
        "$",
        "response",
        "waypoint",
        "i",
        "waypoint",
        "waypoints_active",
        "i",
        "response",
        "NSINKA_Map",
        "$",
        "response",
        "$",
        "NSINKA_Map",
        "i",
        "item",
        "item",
        "response",
        "response",
        "$",
        "waypoints_active",
        "i",
        "marker",
        "google",
        "google",
        "marker",
        "marker",
        "NSINKA_Map",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "google",
        "_marker",
        "waypoints_active",
        "i",
        "NSINKA_Map",
        "_marker",
        "NSINKA_Map",
        "_marker",
        "setTimeout",
        "NSINKA_Map",
        "status",
        "$",
        "$",
        "waypoints_inactive",
        "i",
        "marker",
        "google",
        "google",
        "marker",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "google",
        "_marker",
        "marker",
        "NSINKA_Map",
        "_marker",
        "NSINKA_Map",
        "_marker",
        "_marker",
        "NSINKA_Map",
        "waypoints_active",
        "setTimeout",
        "$",
        "browserHasGeolocation",
        "pos",
        "NSINKA_Map",
        "pos",
        "NSINKA_Map",
        "browserHasGeolocation",
        "marker",
        "marker",
        "$",
        "NSINKA_Global",
        "marker",
        "NSINKA_Map",
        "marker",
        "google",
        "NSINKA_Map",
        "$",
        "$win",
        "setPos",
        "$win",
        "$win",
        "NSINKA_Map",
        "$win",
        "$win",
        "NSINKA_Map",
        "$win",
        "$",
        "NSINKA_Map",
        "i",
        "NSINKA_Map",
        "NSINKA_Map",
        "$win",
        "$win",
        "$win",
        "$win",
        "$",
        "google",
        "google",
        "$elem",
        "NSINKA_Map",
        "gmap",
        "gmap",
        "gmap",
        "gmap",
        "gmap",
        "gmap",
        "marker",
        "google",
        "worldPoint",
        "bottomLeft",
        "scale",
        "worldPoint",
        "topRight",
        "scale",
        "$elem",
        "point",
        "$elem",
        "point",
        "$elem",
        "NSINKA_Map",
        "NSINKA_Specifics",
        "NSINKA_Specifics",
        "$",
        "e",
        "NSINKA_Specifics",
        "actions",
        "NSINKA_Specifics",
        "actions",
        "NSINKA_Specifics",
        "$",
        "actions",
        "i",
        "action",
        "NSINKA_Specifics",
        "action",
        "$",
        "NSINKA_Specifics",
        "e",
        "i",
        "action",
        "$",
        "action",
        "i",
        "_action",
        "action",
        "_action",
        "action",
        "action",
        "action",
        "$",
        "action",
        "i",
        "_action",
        "action",
        "action",
        "action",
        "action",
        "action",
        "$",
        "$",
        "$quicklinks",
        "$",
        "$",
        "ResizeSensor",
        "$quicklinks",
        "$map",
        "$map",
        "$map",
        "$",
        "$parent",
        "$quicklinks",
        "$footer",
        "$",
        "$parent",
        "$quicklinks",
        "$",
        "$",
        "$",
        "ResizeSensor",
        "$quicklinks",
        "$map",
        "$footer",
        "NSINKA_Chronicle",
        "$",
        "NSINKA_Global",
        "NSINKA_Chronicle",
        "NSINKA_Chronicle",
        "$",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "$handle",
        "NSINKA_Global",
        "$handle",
        "$",
        "i",
        "eventType",
        "$handle",
        "eventType",
        "_this",
        "Event",
        "e",
        "preventThisPropagation",
        "e",
        "$",
        "preventThisPropagation",
        "$",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "$",
        "$",
        "i",
        "$item",
        "$item",
        "$",
        "e",
        "e",
        "$",
        "e",
        "e",
        "e",
        "e",
        "e",
        "currentClientX",
        "calc",
        "currentClientX",
        "calc",
        "calc",
        "calc",
        "calc",
        "calc",
        "currentClientX",
        "e",
        "e",
        "finalWidth",
        "transitionEndTrigger",
        "$",
        "_this",
        "$",
        "$",
        "$",
        "e",
        "e",
        "Event",
        "CustomEvent",
        "e",
        "e",
        "simulatedEvent",
        "simulatedEvent",
        "$",
        "$",
        "$",
        "$",
        "$this",
        "$",
        "data",
        "thisYear",
        "$dd",
        "$",
        "$this",
        "$this",
        "$this",
        "data",
        "thisYear",
        "thisMonth",
        "data",
        "thisYear",
        "thisMonth",
        "data",
        "thisYear",
        "thisMonth",
        "thisTeaser",
        "$this",
        "i",
        "i",
        "$",
        "$dd",
        "$monthDiv",
        "$",
        "data",
        "thisYear",
        "i",
        "i",
        "entries",
        "$",
        "$monthDiv",
        "$dot",
        "data",
        "$",
        "$",
        "$this",
        "$article",
        "$this",
        "$containers",
        "$this",
        "$"
    ],
    "literals": [
        "'transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd'",
        "'TITLE'",
        "'MAIN'",
        "'TITLE'",
        "'title'",
        "\"html\"",
        "'#tmpl_'",
        "'body'",
        "'*[data-jsaction]'",
        "'[data-jsaction]'",
        "'jsaction'",
        "''",
        "','",
        "'undefined'",
        "'not found! function NSINKA_Actions.functions.'",
        "'('",
        "','",
        "')'",
        "'html'",
        "'nav_open'",
        "'is-active'",
        "'moveTransitionStatus'",
        "'layer'",
        "'transformed'",
        "'#logo__container span'",
        "'layer'",
        "'transformed'",
        "'#logo__container span'",
        "'scroll__header'",
        "'closeLayer'",
        "'routeHasBeenCalculated'",
        "' Std.'",
        "'routeSettings'",
        "'layer-content'",
        "'layer-content-opened'",
        "''",
        "'li'",
        "'ul'",
        "\"placeholder\"",
        "'li'",
        "\"y\"",
        "'clone'",
        "'.drag-handle'",
        "'a.deactivate'",
        "'deactivated'",
        "'li'",
        "'change-icon'",
        "'change-icon'",
        "'location-id'",
        "'button'",
        "'form'",
        "'input[type=\"search\"]'",
        "'active'",
        "'location'",
        "'body'",
        "'#locations__wrapper'",
        "'li'",
        "'location-id'",
        "'#location_prev,#location_next'",
        "'location_next'",
        "'slickNext'",
        "'slickPrev'",
        "'#location_close'",
        "'active'",
        "'active'",
        "'layer-content-header'",
        "'moveTransitionStatus'",
        "'Stadtrundgang'",
        "'click'",
        "'touchstart'",
        "'mousedown mousemove mouseup'",
        "'touchstart'",
        "'layer'",
        "'main>.content'",
        "'browserhack_inherit_height'",
        "'layer>article'",
        "'layer>article'",
        "'_resize'",
        "'_resize'",
        "'min-height'",
        "'_resize'",
        "'browserhack_inherit_height'",
        "'height'",
        "''",
        "'height'",
        "'browserhack_inherit_height'",
        "'body'",
        "'a[href]'",
        "'body'",
        "'layer'",
        "'main,layer'",
        "'#'",
        "''",
        "'>'",
        "'>'",
        "'#'",
        "''",
        "'MAIN'",
        "'layer'",
        "'layer[data-id=\"'",
        "'id'",
        "'\"]'",
        "'>layer'",
        "'>layer'",
        "'id'",
        "'id'",
        "'removeLayer'",
        "'layer'",
        "'layer'",
        "'layer-content'",
        "'>layer-content'",
        "'<layer-height-indicator />'",
        "'disabled'",
        "'layer-content-header'",
        "'handle'",
        "'min-height'",
        "'opened'",
        "'true'",
        "'whileOpenClose'",
        "'whileOpenClose'",
        "','",
        "'#'",
        "'moveTransitionStatus'",
        "'touchstart'",
        "'undefined'",
        "'undefined'",
        "'touchstartPositionY'",
        "'closeLayer'",
        "'open'",
        "'touchstart'",
        "'touchmove'",
        "'undefined'",
        "'undefined'",
        "'invertTouch'",
        "'true'",
        "'moveTransitionStatus'",
        "'touchstart'",
        "'touchmove'",
        "'touchend'",
        "'layer-opened'",
        "'moveTransitionStatus'",
        "'layer-closed'",
        "'moveTransitionStatus'",
        "'touchend'",
        "'open'",
        "'layerChange'",
        "'layerChange'",
        "\"mousedown\"",
        "\"touchstart\"",
        "\"mousemove\"",
        "\"touchmove\"",
        "\"mouseup\"",
        "\"touchend\"",
        "'touchend'",
        "'dev'",
        "'test'",
        "'touchend'",
        "'touchstart'",
        "'touchmove'",
        "'touchend'",
        "'touchcancel'",
        "'mousedown'",
        "'mousemove'",
        "'mouseup'",
        "'mouseup'",
        "'closeLayer'",
        "'touchstart'",
        "'touchend'",
        "'openLayer'",
        "'touchstart'",
        "'touchend'",
        "'undefined'",
        "'inactive'",
        "'inactive--transition'",
        "'inactive'",
        "'Route XY'",
        "'Eigene Route'",
        "'custom'",
        "'Freie Spiel- und Sportvereinigung, (FSSV) am Adenauerring'",
        "'Adenauerring 36'",
        "'Ludwig Marum, Ludwig-Marum-Straße'",
        "'Ludwig-Marum-Straße'",
        "'Adolf-Hitler-Haus,Ritterstraße 28/30'",
        "'Ritterstraße 28/30'",
        "'Arbeiterbildungsverein'",
        "'Wilhelmstraße 14'",
        "'August-Dosenbach-Straße'",
        "'August-Dosenbach-Straße'",
        "'Badisches Innenministerium'",
        "'Schlossplatz 19'",
        "'Bankhaus Veit L. Homburger'",
        "'Karlstraße 11'",
        "'DWM Deutsche Waffen- und Munitionsfabrik AG'",
        "'Lorenzstraße'",
        "'Führer-Verlag'",
        "'Kaiserstraße 133'",
        "'Gefängnis Riefstahlstraße'",
        "'Riefstahlstr.9'",
        "'Gestapo-Hauptstelle'",
        "'Ebertstr. 26'",
        "'Hauptbahnhof'",
        "'Bahnhofsplatz'",
        "'Jüdischer Friedhof'",
        "'Haid- und Neu-Str. 41, 45'",
        "'Wohn- und ehemaliges Gemeindehaus'",
        "'Herrenstraße 14'",
        "'HJ und BDM'",
        "'Rüppurrer Straße'",
        "'Hotel Nassauer Hof '",
        "'Kriegsstr. 88'",
        "'Jüdische Schule in der Lidellschule'",
        "'Markgrafenstraße'",
        "'Kaufhaus Hertie'",
        "'Kaiserstraße 92'",
        "'Kaufhaus Karstadt'",
        "'Kaiserstraße 147-159'",
        "'Ludwig-Marum-Straße'",
        "'Ludwig-Marum-Straße'",
        "'Marktplatz'",
        "'Karl-Friedrich-Straße 7'",
        "'Polizeipräsidium Marktplatz'",
        "''",
        "'Schlossplatz - Bücherverbrennung im Juni 1933'",
        "'Schlossplatz'",
        "'Staatliche Kunsthalle'",
        "'Hans-Thoma-Str. 2-6'",
        "'Synagoge in der - Karl-Friedrich-Straße 14-18'",
        "'Karl-Friedrich-Straße 14-18'",
        "'Synagoge Kronenstraße'",
        "'Kronenstraße 15'",
        "'Technische Hochschule'",
        "'Kaiserstraße 12'",
        "'\"Volkshaus\"'",
        "'Schützenstraße 14'",
        "'Wohnhaus Kreuzstraße 6-8'",
        "'Kreuzstraße 6-8'",
        "'Zentralverband der Angestellten'",
        "'Gartenstraße 25'",
        "''",
        "''",
        "'map'",
        "'layerChange'",
        "\"resize\"",
        "'custom'",
        "'M-'",
        "',0a'",
        "','",
        "' 0 1,0 '",
        "',0a'",
        "','",
        "' 0 1,0 -'",
        "',0'",
        "'#0066CC'",
        "'#0066CC'",
        "'M 0 0 L '",
        "' 0 L '",
        "' '",
        "' z'",
        "'#0066CC'",
        "'deviceorientation'",
        "'compassHeading'",
        "'no location'",
        "\"#000000\"",
        "'undefined'",
        "'routeHasBeenCalculated'",
        "'M-'",
        "',0a'",
        "','",
        "' 0 1,0 '",
        "',0a'",
        "','",
        "' 0 1,0 -'",
        "',0'",
        "'#f6ae95'",
        "'Directions request failed due to '",
        "'M-'",
        "',0a'",
        "','",
        "' 0 1,0 '",
        "',0a'",
        "','",
        "' 0 1,0 -'",
        "',0'",
        "'#000000'",
        "'routeHasBeenCalculated'",
        "'Error: The Geolocation service failed.'",
        "'Error: Your browser doesn\\'t support geolocation.'",
        "'click'",
        "'mapWindow'",
        "'idle'",
        "'#placeholder'",
        "'bounds_changed'",
        "'close'",
        "'zoom_changed'",
        "'close'",
        "'close'",
        "'.close'",
        "'close'",
        "'smartphone-actions tablet-actions desktop-actions'",
        "''",
        "','",
        "'_now'",
        "','",
        "'function'",
        "'resize,_now'",
        "'#quicklinks'",
        "'#map'",
        "'#footer'",
        "'_resize'",
        "'_resize'",
        "'_resize'",
        "'#quicklinks'",
        "'#map'",
        "'#footer'",
        "''",
        "'_resize'",
        "''",
        "'_resize'",
        "'resize__chronicle'",
        "'resize__chronicle'",
        "'.chronicle--global>.chronicle__handle'",
        "'article'",
        "'.article-content-wrapper'",
        "'touchstart'",
        "'touchmove'",
        "'touchend'",
        "'touchcancel'",
        "'mousedown'",
        "'mousemove'",
        "'mouseup'",
        "'mouseup'",
        "'article'",
        "'touchstart'",
        "'undefined'",
        "'undefined'",
        "'touchstartPositionX'",
        "'closeLayer'",
        "'open'",
        "'touchstart'",
        "'touchmove'",
        "'undefined'",
        "'undefined'",
        "'invertTouch'",
        "'true'",
        "'transform'",
        "'translateX('",
        "'px)'",
        "'touchstart'",
        "'touchmove'",
        "'touchend'",
        "'layer-opened'",
        "'moveTransitionStatus'",
        "'layer-closed'",
        "'moveTransitionStatus'",
        "'transform'",
        "'translateX('",
        "'px)'",
        "'touchend'",
        "'open'",
        "'layerChange'",
        "'layerChange'",
        "\"mousedown\"",
        "\"touchstart\"",
        "\"mousemove\"",
        "\"touchmove\"",
        "\"mouseup\"",
        "\"touchend\"",
        "'touchend'",
        "'dev'",
        "'test'",
        "'.chronicle__list'",
        "'dt'",
        "'dd'",
        "'.chronicle__list__month'",
        "'month'",
        "'teaser'",
        "' …'",
        "'undefined'",
        "'<div class=\"chronicle__list__month chronicle__list__month--tiny\">'",
        "'<div class=\"chronicle__list__month__dot\">'",
        "'.chronicle__container'",
        "'.content'",
        "'.chronicle__container'",
        "'input[type=\"range\"]'"
    ],
    "variables": [
        "transitionEndTrigger",
        "F_Global",
        "check",
        "wW",
        "wH",
        "factor",
        "wW",
        "wH",
        "factor",
        "NSINKA_Actions",
        "$this",
        "jsaction",
        "attrs",
        "fn",
        "$html",
        "opened_class",
        "button_active_class",
        "duration",
        "$tmpl",
        "deactivatedClass",
        "$this",
        "$row",
        "inactive",
        "inactive",
        "$form",
        "$input",
        "activeClass",
        "$tmpl",
        "$locations__wrapper",
        "$header",
        "headerStandardValue",
        "NSINKA_jQueryExtensions",
        "NSINKA_Layers",
        "$content",
        "$article",
        "$this",
        "$t",
        "$ajaxSibling",
        "$tChildLayer",
        "$sChildLayer",
        "layerTag",
        "layerContentTag",
        "$layerContentHeader",
        "_this",
        "currentClientY",
        "calc",
        "calc",
        "targetPosition",
        "finalHeight",
        "finalHeight",
        "simulatedEvent",
        "NSINKA_Map",
        "r",
        "s",
        "icon",
        "compassdir",
        "zoom",
        "waypoints_active",
        "waypoints_inactive",
        "active_length",
        "start",
        "end",
        "leg",
        "r",
        "legs",
        "_marker",
        "r",
        "_marker",
        "$win",
        "gmap",
        "topRight",
        "bottomLeft",
        "scale",
        "worldPoint",
        "point",
        "NSINKA_Specifics",
        "actions",
        "actions",
        "actions",
        "$quicklinks",
        "$parent",
        "$map",
        "$footer",
        "$quicklinks",
        "$map",
        "$footer",
        "NSINKA_Chronicle",
        "_this",
        "$handle",
        "currentClientX",
        "calc",
        "calc",
        "targetPosition",
        "finalWidth",
        "finalWidth",
        "_this",
        "simulatedEvent",
        "$chronicleList",
        "data",
        "$this",
        "$dd",
        "thisYear",
        "$this",
        "thisMonth",
        "thisTeaser",
        "i",
        "$monthDiv",
        "$dot",
        "$this",
        "$article",
        "$containers"
    ],
    "comments": [
        "$(window).width() > 414 &&",
        "$(window).width() > 414 &&",
        ".fadeIn()",
        ".fadeOut(function() {\n                        //$(this).hide();\n                    })",
        "var $logo = $this.find('#logo__container');",
        "$logo.after($logo.clone(true,true).addClass('clone'));",
        "$tmpl.find('#location_close').slick('slickPrev');",
        "Safari iOS browserhack inherit min-height",
        "e.preventDefault();",
        "if(this.direction != this.prevDirection) {\n                    console.log(this.direction, this.prevDirection);\n                    return;\n                }",
        "e.preventDefault();",
        "if(this.direction != this.prevDirection) {\n                    this.prevDirection = this.direction;\n                    return;\n                }",
        "$(window.currentTouchedElem).trigger('touchend');",
        "this.vars.$layerContent.trigger('touchend', this.eventHandler.touchend);",
        "this.vars.$handle.on(\n                'mousedown mousemove mouseup',\n                this.eventHandler.touchSimulation\n            );",
        "$(window).on('mouseup', this.eventHandler.touchSimulation);",
        "this.vars.$layerContent.trigger('touchstart').trigger('touchend');",
        "$(this).removeClass('inactive--transition');",
        "var listener = google.maps.event.addListener(NSINKA_Map.vars.map, \"idle\", function() {\n                NSINKA_Map.vars.map.setZoom(13);\n                google.maps.event.removeListener(listener);\n            });",
        "NSINKA_Map.vars.infoWindow = new google.maps.InfoWindow({map: NSINKA_Map.vars.map});",
        "on compass change",
        "on position change",
        "NSINKA_Map.vars.directionsService.setMap(null);",
        "Active markers",
        "if(i == (legs.length-1) || !i) {\n                                return;\n                            }",
        "Inactive markers",
        "infowindow.open(NSINKA_Map.vars.map, marker);",
        "calc = e.changedTouches[0].clientX;",
        "if(this.direction != this.prevDirection) {\n                            console.log(this.direction, this.prevDirection);\n                            return;\n                        }",
        "e.preventDefault();",
        "if(this.direction != this.prevDirection) {\n                            this.prevDirection = this.direction;\n                            return;\n                        }",
        "$(window.currentTouchedElem).trigger('touchend');",
        "handleClass: 'chronicle__rangeslider__handle'",
        "# sourceMappingURL=data:application/json;charset=utf8;base64,"
    ],
    "docstrings": [
        "* Description for GO_Global\n* @private\n* @property GO_Global",
        "* Description for init\n    * @private\n    * @method init\n    * @return {Object} description",
        "* Description for is_mobile\n    * @private\n    * @method is_mobile\n    * @return {Object} description",
        "* Description for tmpl\n    * @private\n    * @method tmpl\n    * @param {Object} id (required)\n    * @param {Object} data (default: null)\n    * @return {Object} jQuery elements",
        "* Description for NSINKA_Actions\n* @private\n* @property NSINKA_Actions",
        "* Description for NSINKA_Actions\n* @private\n* @property NSINKA_Actions",
        "* Description for NSINKA_Layers\n* @private\n* @property NSINKA_Layers",
        "* Description for NSINKA_Map\n* @private\n* @property NSINKA_Map",
        "* Description for NSINKA_Layers\n* @private\n* @property NSINKA_Layers",
        "* Set map layout"
    ],
    "functions": [
        "calcDuration",
        "showWaypoints",
        "setPos",
        "NSINKA_gMap"
    ],
    "classes": []
}