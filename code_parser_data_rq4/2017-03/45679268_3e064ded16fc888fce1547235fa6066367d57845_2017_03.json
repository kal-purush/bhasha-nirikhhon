{
    "identifiers": [
        "join",
        "existsSync",
        "chmodSync",
        "exec",
        "cp",
        "rm",
        "LogModule",
        "grunt",
        "relative",
        "info",
        "info",
        "key",
        "value",
        "exec",
        "key",
        "value",
        "consoleLogger",
        "cloneDir",
        "generatedDocsDir",
        "options",
        "cloneDir",
        "generatedDocsDir",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "process",
        "repo",
        "options",
        "options",
        "existsSync",
        "existsSync",
        "setConfig",
        "setConfig",
        "exec",
        "publishBranch",
        "error",
        "exec",
        "publishBranch",
        "exec",
        "publishBranch",
        "process",
        "exec",
        "branch",
        "skipDeploymentCredentials",
        "rm",
        "join",
        "publishDir",
        "cp",
        "join",
        "publishDir",
        "exec",
        "exec",
        "publishDir",
        "exec",
        "command",
        "options",
        "options",
        "relative",
        "options",
        "deployKey",
        "deployKey",
        "chmodSync",
        "deployKey",
        "exec",
        "relativeDeployKey",
        "command",
        "options",
        "exec",
        "command",
        "options"
    ],
    "literals": [
        "'path'",
        "'fs'",
        "'./exec'",
        "'shelljs'",
        "'path'",
        "'branch'",
        "'deployKey'",
        "'log'",
        "'shouldPush'",
        "'skipPublish'",
        "'subDirectory'",
        "'url'",
        "'writeln'",
        "string",
        "string",
        "string",
        "git config ${ global ? '--global ' : '' }${ key } ${ value }",
        "'--global '",
        "''",
        "string",
        "'gh-pages'",
        "string",
        "string",
        "string",
        "string",
        "'api'",
        "string",
        "string",
        "string",
        "'boolean'",
        "''",
        "git@github.com:${ repo }.git",
        "'boolean'",
        "'Push check failed -- not publishing API docs'",
        "'Only committing -- skipping push to repo'",
        "'user.name'",
        "'Travis CI'",
        "'user.email'",
        "'support@sitepen.com'",
        "Cloning ${ this.url }",
        "git clone ${ this.url } ${ this.cloneDir }",
        "git checkout ${ publishBranch }",
        "git checkout --orphan ${ publishBranch }",
        "'git rm -rf .'",
        "Created ${publishBranch} branch",
        "'git rev-parse --abbrev-ref HEAD'",
        "'master'",
        "'boolean'",
        "'-rf'",
        "'-r'",
        "'git status --porcelain'",
        "''",
        "'Nothing changed'",
        "git add ${publishDir}",
        "'git commit -m \"Update API docs\"'",
        "string",
        "string",
        "string",
        "string",
        "'600'",
        "ssh-agent bash -c 'ssh-add ${ relativeDeployKey }; ${ command }'",
        "'Publishing API docs'",
        "git push origin ${this.branch}",
        "Pushed ${this.branch} to origin"
    ],
    "variables": [
        "consoleLogger",
        "repo",
        "publishBranch",
        "branch",
        "skipDeploymentCredentials",
        "publishDir",
        "publishDir",
        "deployKey",
        "relativeDeployKey"
    ],
    "comments": [
        "optional configuration values",
        "TODO look up the repo information?",
        "optional method overrides",
        "Prerequisites for using git",
        "publish branch didn't exist, so create it"
    ],
    "docstrings": [
        "* The branch to publish API documents",
        "* The temporary directory for the local git clone",
        "* The deployment key to use",
        "* The directory where typedoc generates its docs",
        "* Logging utility",
        "* If publishing should be skipped",
        "* The directory to place API docs",
        "* The repo location",
        "* @return {boolean} if a deploy key exists in the file system",
        "* Publish the contents of { generatedDocsDirectory } in the clone at { cloneDir } in the directory\n\t * { subDirectory } and push to the { branch } branch.",
        "* Clone the target repository and switch to the deployment branch",
        "* @return {boolean} indicates whether doc updates should be pushed to the origin",
        "* If configuration information exists for obtaining a deployment key and prerequisites have been met to publish",
        "* Remove everything in preparation for the typedoc",
        "* Commit (but do not push) everything the new documentation",
        "* Execute a credentialed git command\n\t * @param command the command to execute\n\t * @param options execute options",
        "* Publish the document created by typedoc"
    ],
    "functions": [
        "writeln",
        "setConfig",
        "hasDeployCredentials",
        "publish",
        "setup",
        "shouldPush",
        "canPublish",
        "refreshTypeDoc",
        "commit",
        "execSSHAgent",
        "push"
    ],
    "classes": [
        "Publisher"
    ]
}