{
    "identifiers": [
        "udunits_wrap",
        "sys",
        "genutil",
        "collections",
        "OrderedDict",
        "sys",
        "version",
        "split",
        "split",
        "join",
        "version",
        "genutil",
        "__path__",
        "open",
        "udunits_name",
        "f",
        "readlines",
        "f",
        "close",
        "i",
        "len",
        "ln",
        "ln",
        "i",
        "ln",
        "i",
        "ln",
        "i",
        "ln",
        "i",
        "ln",
        "i",
        "strip",
        "ln",
        "i",
        "ln",
        "i",
        "split",
        "types",
        "get",
        "tmp",
        "append",
        "unit",
        "tmp",
        "OrderedDict",
        "sorted",
        "units",
        "iteritems",
        "OrderedDict",
        "sorted",
        "types",
        "iteritems",
        "units",
        "types",
        "name",
        "genutil",
        "udunits_init",
        "udunits_wrap",
        "init",
        "udunits_wrap",
        "addBaseUnit",
        "name",
        "name",
        "genutil",
        "udunits_init",
        "udunits_wrap",
        "init",
        "udunits_wrap",
        "addDimensionlessUnit",
        "name",
        "name",
        "scale",
        "original",
        "genutil",
        "udunits_init",
        "udunits_wrap",
        "init",
        "udunits_wrap",
        "addScaledUnit",
        "name",
        "scale",
        "original",
        "name",
        "offset",
        "original",
        "genutil",
        "udunits_init",
        "udunits_wrap",
        "init",
        "udunits_wrap",
        "addOffsettedUnit",
        "name",
        "offset",
        "original",
        "name",
        "unit1",
        "unit2",
        "genutil",
        "udunits_init",
        "udunits_wrap",
        "init",
        "udunits_wrap",
        "addMultipliedUnits",
        "name",
        "unit1",
        "unit2",
        "name",
        "unit1",
        "unit2",
        "genutil",
        "udunits_init",
        "udunits_wrap",
        "init",
        "udunits_wrap",
        "addDividedUnits",
        "name",
        "unit1",
        "unit2",
        "name",
        "original",
        "genutil",
        "udunits_init",
        "udunits_wrap",
        "init",
        "udunits_wrap",
        "addInvertedUnit",
        "name",
        "original",
        "value",
        "units",
        "isinstance",
        "value",
        "isinstance",
        "units",
        "units",
        "value",
        "tmp",
        "units",
        "value",
        "value",
        "isinstance",
        "units",
        "genutil",
        "udunits_init",
        "udunits_wrap",
        "init",
        "units",
        "value",
        "units",
        "isinstance",
        "units",
        "udunits",
        "units",
        "units",
        "units",
        "udunits_wrap",
        "convert",
        "units",
        "u",
        "udunits",
        "value",
        "s",
        "i",
        "u",
        "units",
        "isinstance",
        "units",
        "udunits",
        "units",
        "units",
        "units",
        "udunits_wrap",
        "convert",
        "units",
        "u",
        "s",
        "i",
        "known_units",
        "keys",
        "bytype",
        "known_units_units",
        "known_units_types",
        "known_units_units",
        "_readUnits",
        "bytype",
        "known_units_types",
        "known_units_units",
        "_units",
        "units",
        "value",
        "units",
        "units",
        "units",
        "udunits_wrap",
        "convert",
        "units",
        "units",
        "value",
        "s",
        "i",
        "units",
        "property",
        "_getunits",
        "_setunits",
        "value",
        "units",
        "value",
        "units",
        "_value",
        "value",
        "value",
        "property",
        "_getvalue",
        "_setvalue",
        "other",
        "isinstance",
        "other",
        "udunits",
        "udunits",
        "units",
        "value",
        "isinstance",
        "other",
        "udunits",
        "udunits_wrap",
        "convert",
        "other",
        "units",
        "units",
        "value",
        "other",
        "value",
        "s",
        "i",
        "value",
        "other",
        "other",
        "isinstance",
        "other",
        "udunits",
        "udunits",
        "units",
        "value",
        "isinstance",
        "other",
        "udunits",
        "udunits_wrap",
        "convert",
        "other",
        "units",
        "units",
        "value",
        "other",
        "value",
        "s",
        "i",
        "value",
        "other",
        "other",
        "isinstance",
        "other",
        "udunits",
        "udunits",
        "units",
        "value",
        "isinstance",
        "other",
        "udunits",
        "udunits_wrap",
        "convert",
        "other",
        "units",
        "units",
        "value",
        "other",
        "value",
        "s",
        "i",
        "value",
        "other",
        "other",
        "isinstance",
        "other",
        "udunits",
        "udunits",
        "units",
        "value",
        "isinstance",
        "other",
        "udunits",
        "udunits_wrap",
        "convert",
        "other",
        "units",
        "units",
        "other",
        "value",
        "s",
        "i",
        "value",
        "other",
        "value",
        "other",
        "isinstance",
        "other",
        "udunits",
        "udunits",
        "units",
        "units",
        "value",
        "isinstance",
        "other",
        "udunits",
        "udunits_wrap",
        "convert",
        "other",
        "units",
        "units",
        "value",
        "other",
        "value",
        "s",
        "i",
        "udunits",
        "units",
        "other",
        "units",
        "value",
        "other",
        "value",
        "udunits",
        "other",
        "value",
        "units",
        "other",
        "isinstance",
        "other",
        "udunits",
        "udunits",
        "units",
        "units",
        "value",
        "isinstance",
        "other",
        "udunits",
        "udunits_wrap",
        "convert",
        "other",
        "units",
        "units",
        "value",
        "other",
        "value",
        "s",
        "i",
        "udunits",
        "units",
        "other",
        "units",
        "value",
        "other",
        "value",
        "udunits",
        "other",
        "value",
        "units",
        "other",
        "isinstance",
        "other",
        "udunits",
        "udunits",
        "units",
        "value",
        "isinstance",
        "other",
        "udunits",
        "udunits_wrap",
        "convert",
        "other",
        "units",
        "units",
        "value",
        "other",
        "value",
        "s",
        "i",
        "udunits",
        "value",
        "other",
        "value",
        "units",
        "other",
        "units",
        "value",
        "other",
        "other",
        "isinstance",
        "other",
        "udunits",
        "udunits",
        "units",
        "value",
        "isinstance",
        "other",
        "udunits",
        "udunits_wrap",
        "convert",
        "other",
        "units",
        "units",
        "other",
        "value",
        "s",
        "i",
        "value",
        "udunits",
        "other",
        "value",
        "value",
        "other",
        "units",
        "units",
        "other",
        "value",
        "units",
        "other",
        "isinstance",
        "other",
        "udunits",
        "value",
        "other",
        "units",
        "other"
    ],
    "literals": [
        "'.'",
        "'.'",
        "'/udunits.dat'",
        "'???'",
        "'#'",
        "'#\\n'",
        "'#'",
        "'#\\n'",
        "'UNITS OF'",
        "'\\n'",
        "' '",
        "'units'",
        "'_units'",
        "'value'",
        "'_value'",
        "'Error, must provide at least one args as string representing units'",
        "' '",
        "\"udunits(\"",
        "',\"'",
        "'\")'",
        "\"Error must add a number or a udunit object\"",
        "\"Error must add a number or a udunit object\"",
        "\"Error must sub a number or a udunit object\"",
        "\"Error must sub a number or a udunit object\"",
        "\"Error must multiply a number or a udunit object\"",
        "'*'",
        "'*'",
        "\"Error must multiply a number or a udunit object\"",
        "'*'",
        "'*'",
        "\"Error must divide by a number or a udunit object\"",
        "'/'",
        "\"Error must divide by a number or a udunit object\"",
        "'/'",
        "'1/('",
        "')'",
        "\"Error must power to a number\"",
        "'**'"
    ],
    "variables": [
        "version",
        "version",
        "udunits_name",
        "known_units_units",
        "known_units_types",
        "f",
        "units",
        "types",
        "ln",
        "unit",
        "units",
        "unit",
        "tmp",
        "types",
        "units",
        "types",
        "genutil",
        "udunits_init",
        "genutil",
        "udunits_init",
        "genutil",
        "udunits_init",
        "genutil",
        "udunits_init",
        "genutil",
        "udunits_init",
        "genutil",
        "udunits_init",
        "genutil",
        "udunits_init",
        "__slots__",
        "tmp",
        "units",
        "value",
        "units",
        "value",
        "units",
        "genutil",
        "udunits_init",
        "_units",
        "_value",
        "u",
        "u",
        "s",
        "i",
        "u",
        "u",
        "s",
        "i",
        "known_units_units",
        "known_units_types",
        "_units",
        "s",
        "i",
        "value",
        "_units",
        "units",
        "_value",
        "value",
        "s",
        "i",
        "value",
        "s",
        "i",
        "value",
        "s",
        "i",
        "value",
        "s",
        "i",
        "value",
        "value",
        "s",
        "i",
        "value",
        "s",
        "i",
        "value",
        "s",
        "i",
        "s",
        "i",
        "value",
        "_units"
    ],
    "comments": [
        "udunits_name)",
        "udunits_name)",
        "udunits_name)",
        "udunits_name)",
        "udunits_name)",
        "udunits_name)",
        "udunits_name)",
        "udunits_name)",
        "Ok uncompatible units, just do the produce",
        "Ok uncompatible units, just do the produce",
        "Ok uncompatible units, just do the produce",
        "Ok uncompatible units, just do the produce"
    ],
    "docstrings": [
        "\"\"\"let you add to udunits2 system a new base unit with a specific name\"\"\"",
        "\"\"\"let you add to udunits2 system a new dimensionless unit with a specific name\"\"\"",
        "\"\"\"let you add to udunits2 system a new scaled unit with a specific name\n    from an original unit\"\"\"",
        "\"\"\"let you add to udunits2 system a new offsetted unit with a specific name\n    from an original unit\"\"\"",
        "\"\"\"let you add to udunits2 system a new unit with a specific name\n    which is the multiplication of two other units specified by name\"\"\"",
        "\"\"\"let you add to udunits2 system a new unit with a specific name\n    which is the division of two other units specified by name\"\"\"",
        "\"\"\"let you add to udunits2 system a new inverted unit with a specific name\n    from an original unit\"\"\"",
        "\"\"\"UNIDATA/UDUNITS Python Object\n\n    initialization: a=genutil(value,units)\n\n    availabe commands:\n    all of ufuncs are avalailable:\n    +,-,/,*, appropriate conversion to left side units is done on the fly\n    example:\n    a=genutil.udunits(5,'m')\n    b=genutil.udunits(6,'in')\n    c=a+b # udunits(5.1524,\"m\")\n    # but\n    c=b+a # udunits(202.850393701,\"in\")\n\n    # wrong units conversion will generate errors:\n    c=genutil.udunits(7,'K')\n    Traceback (most recent call last):\n    File \"<stdin>\", line 1, in ?\n    File \"/lgm/cdat/latest/lib/python2.3/site-packages/genutil/udunits.py\", line 111, in __add__\n    s,i=udunits_wrap.convert(other.units,self.units)\n    TypeError: Error Converting.\n\n    #a*c # works\n\n    Note: a/b # returns a number (unitless)\n    a+c #\n\n\n    OTHER FUNCTION\n\n    UNIT CONVERSION\n    a.units='feet'\n    print a # 16.4041994751 feet\n\n    c=a.to('km') # udunits(0.005,\"km\")\n\n    c=genutil.udunits(7,'K')\n    factor, offset = c.how('degF') # (1.7999999999999998, -459.67000000000002)\n\n    WHICH UNITS ?\n    By available (known) units\n    lst = c.available_units() #  returns list of all known units\n\n    By units:\n    dict = c.known_units() # returns a dictionary of units (keys) associated with type (values)\n    dict['k'] # returns : 'THERMODYNAMIC TEMPERATURE'\n\n    By type of units\n    # returns a dictionary of units type (keys) associated with a list of units for each type\n    dict = c.known_units(bytype=1)\n    e.g\n    dict['THERMODYNAMIC TEMPERATURE'] # returns['degree_Kelvin', 'degree_Celsius', ...]\n\n    \"\"\""
    ],
    "functions": [
        "_readUnits",
        "addBaseUnit",
        "addDimensionlessUnit",
        "addScaledUnit",
        "addOffsettedUnit",
        "addMultipliedUnits",
        "addDividedUnits",
        "addInvertedUnit",
        "to",
        "how",
        "available_units",
        "known_units",
        "_getunits",
        "_setunits",
        "__str__",
        "__repr__",
        "_getvalue",
        "_setvalue",
        "__add__",
        "__radd__",
        "__sub__",
        "__rsub__",
        "__mul__",
        "__rmul__",
        "__div__",
        "__rdiv__",
        "__pow__"
    ],
    "classes": [
        "udunits"
    ]
}