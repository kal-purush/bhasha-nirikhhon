{
    "identifiers": [
        "org",
        "bytemechanics",
        "typeex",
        "org",
        "bytemechanics",
        "typeex",
        "impl",
        "TypifiedException",
        "org",
        "bytemechanics",
        "typeex",
        "SimpleFormat",
        "org",
        "bytemechanics",
        "typeex",
        "TypeExHelper",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "Supplier",
        "ExceptionType",
        "Override",
        "TypeExHelper",
        "findSuitableConstructor",
        "flatMap",
        "TypeExHelper",
        "instance",
        "instance",
        "instance",
        "orElseThrow",
        "SimpleFormat",
        "format",
        "getExceptionClass",
        "Arrays",
        "asList",
        "getClass",
        "_cause",
        "TypeExHelper",
        "findSuitableConstructor",
        "flatMap",
        "TypeExHelper",
        "instance",
        "_cause",
        "instance",
        "instance",
        "orElseThrow",
        "SimpleFormat",
        "format",
        "getExceptionClass",
        "Arrays",
        "asList",
        "getClass",
        "_args",
        "TypeExHelper",
        "findSuitableConstructor",
        "flatMap",
        "TypeExHelper",
        "instance",
        "_args",
        "instance",
        "instance",
        "orElseThrow",
        "SimpleFormat",
        "format",
        "getExceptionClass",
        "Arrays",
        "asList",
        "getClass"
    ],
    "literals": [
        "\"Unable to find any suitable constructor for class {} with arguments {}\"",
        "\"Unable to find any suitable constructor for class {} with arguments {}\"",
        "\"Unable to find any suitable constructor for class {} with arguments {}\""
    ],
    "variables": [
        "_args"
    ],
    "comments": [
        "System.out.println(\"ARGS:\" +Arrays.asList(_args));"
    ],
    "docstrings": [
        "* Copyright 2017 afarre.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Main interface to apply over any exception type. Can be applied also over standard object or over enum although recommended place is over an enum. This interface also extend a supplier of\n * TypifiableException\n *\n * @param <T> Something extending typifiable exception\n * @see TypifiableException\n * @see Supplier\n * @author e103880\n * @since 0.1.0",
        "* Name of the exception type Note: It's mandatory to implement this method if the implementing class is not an enum, otherwise the enum already implements name() method\n\t *\n\t * @return the name (never should be null)\n\t * @since 0.1.0",
        "* Message to use with the exception generated Note: It's mandatory to implement this method The message will be formatted with the arguments passed replacing the expression {} with the argument\n\t * corresponding with the {} number of occurrence. \n\t * <br>Example: \"This {} is an exception: {}\" with arguments: (\"A\",\"B\") will be converted to \"This A is an exception: B\"\n\t *\n\t * @return the exception message for this kind of exception\n\t * @since 0.1.0",
        "* Exception class to use with this kind of exception \n\t * <br>Note: It's not mandatory to implement if TypifiedException is the type of exception you want to raise\n\t *\n\t * @return The T class assigned to this exception (by default TypifiedException)\n\t * @see TypifiedException\n\t * @see TypifiableException\n\t * @since 0.3.0",
        "* Returns the instance of the getExceptionClass() with this typified exception\n\t *\n\t * @return The T instance\n\t * @see TypifiableException\n\t * @since 0.3.0",
        "* Returns the instance of the getExceptionClass() with this typified exception with the given cause\n\t *\n\t * @param _cause cause of the exception\n\t * @return The T instance\n\t * @see TypifiableException\n\t * @since 0.3.0",
        "* Returns the instance of the getExceptionClass() with this typified exception with the given arguments\n\t *\n\t * @param _args arguments to replace to the getMessage() text with the same format basis explained above\n\t * @return The T instance\n\t * @see TypifiableException\n\t * @since 0.3.0"
    ],
    "functions": [
        "name",
        "getMessage",
        "getExceptionClass",
        "T",
        "get",
        "T",
        "T"
    ],
    "classes": []
}