{
    "identifiers": [
        "os",
        "subprocess",
        "call",
        "tarfile",
        "wave",
        "numpy",
        "np",
        "tensor2tensor",
        "data_generators",
        "generator_utils",
        "tensor2tensor",
        "data_generators",
        "problem",
        "tensor2tensor",
        "data_generators",
        "text_encoder",
        "tensor2tensor",
        "layers",
        "common_layers",
        "tensor2tensor",
        "utils",
        "modality",
        "tensor2tensor",
        "utils",
        "registry",
        "tensorflow",
        "tf",
        "directory",
        "input_ext",
        "transcription_ext",
        "root",
        "_",
        "filenames",
        "os",
        "walk",
        "directory",
        "filename",
        "filename",
        "filenames",
        "transcription_ext",
        "filename",
        "transcript",
        "transcripts",
        "os",
        "path",
        "join",
        "root",
        "transcript",
        "open",
        "transcript_path",
        "transcript_file",
        "transcript_line",
        "transcript_file",
        "transcript_line",
        "split",
        "len",
        "line_contents",
        "line_contents",
        "os",
        "path",
        "join",
        "root",
        "media_base",
        "key",
        "data_files",
        "media_base",
        "input_ext",
        "os",
        "path",
        "join",
        "root",
        "media_name",
        "media_path",
        "label",
        "data_files",
        "filepath",
        "filepath",
        "strip",
        "call",
        "filepath",
        "out_filepath",
        "wave",
        "open",
        "open",
        "out_filepath",
        "wav_file",
        "getnframes",
        "wav_file",
        "readframes",
        "frame_count",
        "np",
        "fromstring",
        "byte_array",
        "np",
        "uint8",
        "tolist",
        "data",
        "frame_count",
        "wav_file",
        "getsampwidth",
        "wav_file",
        "getnchannels",
        "text_encoder",
        "TextEncoder",
        "s",
        "_num_reserved_ids",
        "ord",
        "c",
        "c",
        "s",
        "ids",
        "id_",
        "ids",
        "id_",
        "_num_reserved_ids",
        "decoded_ids",
        "append",
        "text_encoder",
        "RESERVED_TOKENS",
        "id_",
        "decoded_ids",
        "append",
        "id_",
        "_num_reserved_ids",
        "join",
        "chr",
        "d",
        "d",
        "decoded_ids",
        "registry",
        "register_audio_modality",
        "modality",
        "Modality",
        "inputs",
        "tf",
        "variable_scope",
        "name",
        "x",
        "filters",
        "res_relu",
        "name",
        "tf",
        "variable_scope",
        "name",
        "common_layers",
        "separable_conv_block",
        "x",
        "filters",
        "first_relu",
        "padding",
        "force2d",
        "name",
        "common_layers",
        "pool",
        "y",
        "strides",
        "y",
        "common_layers",
        "conv_block",
        "x",
        "filters",
        "padding",
        "strides",
        "first_relu",
        "res_relu",
        "force2d",
        "name",
        "tf",
        "to_float",
        "inputs",
        "tf",
        "squeeze",
        "signals",
        "tf",
        "contrib",
        "signal",
        "stft",
        "signals",
        "frame_length",
        "frame_step",
        "fft_length",
        "tf",
        "abs",
        "stfts",
        "magnitude_spectrograms",
        "shape",
        "value",
        "tf",
        "contrib",
        "signal",
        "linear_to_mel_weight_matrix",
        "num_mel_bins",
        "num_spectrogram_bins",
        "sample_rate",
        "lower_edge_hertz",
        "upper_edge_hertz",
        "tf",
        "tensordot",
        "magnitude_spectrograms",
        "linear_to_mel_weight_matrix",
        "mel_spectrograms",
        "set_shape",
        "magnitude_spectrograms",
        "shape",
        "concatenate",
        "linear_to_mel_weight_matrix",
        "shape",
        "tf",
        "expand_dims",
        "mel_spectrograms",
        "x",
        "set_shape",
        "num_mel_bins",
        "i",
        "xrange",
        "_model_hparams",
        "audio_compression",
        "xnet_resblock",
        "x",
        "i",
        "i",
        "xnet_resblock",
        "x",
        "_body_input_depth",
        "registry",
        "register_problem",
        "problem",
        "Problem",
        "property",
        "property",
        "problem",
        "SpaceID",
        "AUDIO_SPECTRAL",
        "property",
        "problem",
        "SpaceID",
        "EN_CHR",
        "property",
        "property",
        "property",
        "property",
        "_",
        "text_encoder",
        "TextEncoder",
        "LibrispeechTextEncoder",
        "tf",
        "VarLenFeature",
        "tf",
        "int64",
        "tf",
        "VarLenFeature",
        "tf",
        "int64",
        "data_fields",
        "data_items_to_decoders",
        "data_dir",
        "tmp_dir",
        "training",
        "eos_list",
        "start_from",
        "how_many",
        "eos_list",
        "eos_list",
        "_LIBRISPEECH_TRAIN_DATASETS",
        "training",
        "_LIBRISPEECH_TEST_DATASETS",
        "feature_encoders",
        "num_reserved_ids",
        "url",
        "subdir",
        "datasets",
        "os",
        "path",
        "basename",
        "url",
        "generator_utils",
        "maybe_download",
        "tmp_dir",
        "filename",
        "url",
        "filename",
        "endswith",
        "tarfile",
        "open",
        "compressed_file",
        "read_type",
        "corpus_tar",
        "f",
        "corpus_tar",
        "os",
        "path",
        "isfile",
        "os",
        "path",
        "join",
        "tmp_dir",
        "f",
        "name",
        "members",
        "append",
        "f",
        "corpus_tar",
        "extractall",
        "tmp_dir",
        "members",
        "members",
        "os",
        "path",
        "join",
        "tmp_dir",
        "subdir",
        "_collect_data",
        "data_dir",
        "data_files",
        "values",
        "media_file",
        "text_data",
        "sorted",
        "data_pairs",
        "start_from",
        "how_many",
        "i",
        "how_many",
        "i",
        "_get_audio_data",
        "media_file",
        "num_reserved_ids",
        "ord",
        "c",
        "c",
        "text_data",
        "eos_list",
        "audio_data",
        "num_channels",
        "sample_count",
        "sample_width",
        "label",
        "data_dir",
        "tmp_dir",
        "task_id",
        "training_filepaths",
        "data_dir",
        "num_shards",
        "shuffled",
        "dev_filepaths",
        "data_dir",
        "num_dev_shards",
        "shuffled",
        "use_train_shards_for_dev",
        "train_paths",
        "dev_paths",
        "generator_utils",
        "generate_files",
        "generator",
        "data_dir",
        "tmp_dir",
        "all_paths",
        "generator_utils",
        "shuffle_dataset",
        "all_paths",
        "generator_utils",
        "generate_dataset_and_shuffle",
        "generator",
        "data_dir",
        "tmp_dir",
        "train_paths",
        "generator",
        "data_dir",
        "tmp_dir",
        "dev_paths",
        "defaults",
        "unused_model_hparams",
        "defaults",
        "registry",
        "Modalities",
        "SYMBOL",
        "example",
        "mode",
        "hparams",
        "example",
        "hparams",
        "hparams",
        "max_input_seq_length",
        "hparams",
        "max_input_seq_length",
        "hparams"
    ],
    "literals": [
        "\"http://www.openslr.org/resources/12/train-clean-100.tar.gz\"",
        "\"train-clean-100\"",
        "\"http://www.openslr.org/resources/12/train-clean-360.tar.gz\"",
        "\"train-clean-360\"",
        "\"http://www.openslr.org/resources/12/train-other-500.tar.gz\"",
        "\"train-other-500\"",
        "\"http://www.openslr.org/resources/12/dev-clean.tar.gz\"",
        "\"dev-clean\"",
        "\"http://www.openslr.org/resources/12/dev-other.tar.gz\"",
        "\"dev-other\"",
        "\"r\"",
        "\" \"",
        "\"%s.%s\"",
        "\".flac\"",
        "\".wav\"",
        "\"sox\"",
        "\"\"",
        "\"SAME\"",
        "\"sep_conv_block\"",
        "\"MAX\"",
        "\"SAME\"",
        "\"SAME\"",
        "\"res_conv0\"",
        "\"compress_block_%d\"",
        "\"compress_block_final\"",
        "\"inputs\"",
        "\"targets\"",
        "\"inputs\"",
        "\"targets\"",
        "\"targets\"",
        "\"r:gz\"",
        "\"tgz\"",
        "\"r\"",
        "\"LibriSpeech\"",
        "\"flac\"",
        "\"txt\"",
        "\"inputs\"",
        "\"audio/channel_count\"",
        "\"audio/sample_count\"",
        "\"audio/sample_width\"",
        "\"targets\"",
        "\"inputs\"",
        "\"audio:librispeech_modality\""
    ],
    "variables": [
        "_LIBRISPEECH_TRAIN_DATASETS",
        "_LIBRISPEECH_TEST_DATASETS",
        "data_files",
        "transcripts",
        "transcript_path",
        "line_contents",
        "media_base",
        "label",
        "key",
        "media_name",
        "media_path",
        "data_files",
        "key",
        "out_filepath",
        "wav_file",
        "frame_count",
        "byte_array",
        "data",
        "decoded_ids",
        "y",
        "y",
        "signals",
        "signals",
        "stfts",
        "magnitude_spectrograms",
        "num_spectrogram_bins",
        "lower_edge_hertz",
        "upper_edge_hertz",
        "num_mel_bins",
        "sample_rate",
        "linear_to_mel_weight_matrix",
        "mel_spectrograms",
        "x",
        "x",
        "data_fields",
        "data_items_to_decoders",
        "eos_list",
        "datasets",
        "num_reserved_ids",
        "i",
        "filename",
        "compressed_file",
        "read_type",
        "members",
        "data_dir",
        "data_files",
        "data_pairs",
        "audio_data",
        "sample_count",
        "sample_width",
        "num_channels",
        "label",
        "train_paths",
        "dev_paths",
        "all_paths",
        "p",
        "p",
        "stop_at_eos",
        "p",
        "input_modality",
        "p",
        "target_modality",
        "hparams",
        "batch_size",
        "hparams",
        "audio_compression",
        "hparams",
        "hidden_size",
        "hparams",
        "max_input_seq_length",
        "hparams",
        "max_target_seq_length",
        "hparams",
        "max_length",
        "hparams",
        "min_length_bucket",
        "hparams",
        "learning_rate",
        "hparams",
        "train_steps",
        "hparams",
        "num_hidden_layers"
    ],
    "comments": [
        "coding=utf-8",
        "Copyright 2017 The Tensor2Tensor Authors.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Dependency imports",
        "pylint: disable=line-too-long",
        "Directory from string to tuple pair of strings",
        "key: the filepath to a datafile including the datafile's basename. Example,",
        "if the datafile was \"/path/to/datafile.wav\" then the key would be",
        "\"/path/to/datafile\"",
        "value: a pair of strings (media_filepath, label)",
        "Construct a true .wav file.",
        "Assumes sox is installed on system. Sox converts from FLAC to WAV.",
        "TODO(aidangomez): Will need to sort out a better audio pipeline",
        "We only stride along the length dimension to preserve the spectral",
        "bins (which are tiny in dimensionality relative to length)",
        "Rescale from UINT8 to floats in [-1,-1]",
        "`stfts` is a complex64 Tensor representing the short-time Fourier",
        "Transform of each signal in `signals`. Its shape is",
        "[batch_size, ?, fft_unique_bins]",
        "where fft_unique_bins = fft_length // 2 + 1 = 513.",
        "An energy spectrogram is the magnitude of the complex-valued STFT.",
        "A float32 Tensor of shape [batch_size, ?, 513].",
        "Warp the linear-scale, magnitude spectrograms into the mel-scale.",
        "Note: Shape inference for tensordot does not currently handle this case.",
        "Create a subset of files that don't already exist.",
        "tarfile.extractall errors when encountering an existing file",
        "and tarfile.extract is extremely slow",
        "TODO(lukaszkaiser): clean up hparams or remove from here."
    ],
    "docstrings": [
        "\"\"\"Librispeech dataset.\"\"\"",
        "\"\"\"Traverses directory collecting input and target files.\"\"\"",
        "\"\"\"Transform a sequence of int ids into a human-readable string.\n\n    EOS is not expected in ids.\n\n    Args:\n      ids: list of integers to be converted.\n    Returns:\n      s: human-readable string.\n    \"\"\"",
        "\"\"\"Performs strided conv compressions for audio spectral data.\"\"\"",
        "\"\"\"Transform input from data space to model space.\n\n    Args:\n      inputs: A Tensor with shape [batch, ...]\n    Returns:\n      body_input: A Tensor with shape [batch, ?, ?, body_input_depth].\n    \"\"\"",
        "\"\"\"Problem spec for English word to dictionary definition.\"\"\"",
        "\"\"\"If true, we only generate training data and hold out shards for dev.\"\"\"",
        "\"\"\"Adding to base hparams the attributes for for librispeech.\"\"\""
    ],
    "functions": [
        "_collect_data",
        "_get_audio_data",
        "encode",
        "decode",
        "bottom",
        "xnet_resblock",
        "is_character_level",
        "input_space_id",
        "target_space_id",
        "num_shards",
        "use_subword_tokenizer",
        "num_dev_shards",
        "use_train_shards_for_dev",
        "feature_encoders",
        "example_reading_spec",
        "generator",
        "generate_data",
        "hparams",
        "preprocess_example",
        "add_librispeech_hparams"
    ],
    "classes": [
        "LibrispeechTextEncoder",
        "LibrispeechModality",
        "Librispeech"
    ]
}