{
    "identifiers": [
        "hou",
        "os",
        "subprocess",
        "hdefereval",
        "tempfile",
        "PySide2",
        "QtCore",
        "PySide2",
        "QtWidgets",
        "os",
        "environ",
        "get",
        "tempfile",
        "gettempdir",
        "hou",
        "applicationVersion",
        "format",
        "ver",
        "ver",
        "hou",
        "expandString",
        "os",
        "sep",
        "verStr",
        "os",
        "sep",
        "parm",
        "parm",
        "parmTemplate",
        "template",
        "dataType",
        "hou",
        "parmData",
        "hou",
        "parmData",
        "Int",
        "hou",
        "parmData",
        "parm",
        "parm",
        "expression",
        "exp",
        "hou",
        "OperationFailed",
        "exp",
        "parm",
        "deleteAllKeyframes",
        "QtWidgets",
        "QFileDialog",
        "getOpenFileName",
        "hou",
        "ui",
        "mainQtWindow",
        "r",
        "open",
        "cfg",
        "f",
        "f",
        "write",
        "r",
        "os",
        "path",
        "split",
        "r",
        "QtWidgets",
        "QMessageBox",
        "information",
        "hou",
        "ui",
        "mainQtWindow",
        "file",
        "r",
        "os",
        "environ",
        "get",
        "editor",
        "os",
        "path",
        "exists",
        "cfg",
        "open",
        "cfg",
        "f",
        "f",
        "read",
        "strip",
        "os",
        "path",
        "exists",
        "editor",
        "editor",
        "QtWidgets",
        "QMessageBox",
        "information",
        "hou",
        "ui",
        "mainQtWindow",
        "r",
        "set_external_editor",
        "QtCore",
        "Slot",
        "file_name",
        "getattr",
        "hou",
        "session",
        "parms_bindings",
        "parms_bindings",
        "get",
        "file_name",
        "parm",
        "open",
        "file_name",
        "f",
        "f",
        "read",
        "parm",
        "parmTemplate",
        "template",
        "dataType",
        "hou",
        "parmData",
        "parm",
        "data",
        "template",
        "dataType",
        "hou",
        "parmData",
        "data",
        "clean_exp",
        "parm",
        "parm",
        "data",
        "ValueError",
        "parm",
        "setExpression",
        "data",
        "template",
        "dataType",
        "hou",
        "parmData",
        "Int",
        "data",
        "clean_exp",
        "parm",
        "parm",
        "data",
        "ValueError",
        "parm",
        "setExpression",
        "data",
        "e",
        "e",
        "parm",
        "parm",
        "parmTemplate",
        "template",
        "tags",
        "get",
        "lower",
        "editorlang",
        "editorlang",
        "parm",
        "expressionLanguage",
        "hou",
        "exprLanguage",
        "Python",
        "hou",
        "OperationFailed",
        "parm",
        "parm",
        "node",
        "node",
        "sessionId",
        "sid",
        "node",
        "name",
        "parm",
        "name",
        "get_file_ext",
        "parm",
        "TEMP_FOLDER",
        "os",
        "sep",
        "file_name",
        "file_path",
        "getattr",
        "hou",
        "session",
        "getattr",
        "hou",
        "session",
        "parm",
        "get_file_name",
        "parm",
        "os",
        "path",
        "exists",
        "file_path",
        "os",
        "remove",
        "file_path",
        "parm",
        "expression",
        "hou",
        "OperationFailed",
        "parm",
        "eval",
        "open",
        "file_path",
        "f",
        "f",
        "write",
        "data",
        "get_external_editor",
        "vsc",
        "hou",
        "ui",
        "setStatusMessage",
        "severity",
        "hou",
        "severityType",
        "QtCore",
        "QProcess",
        "parent",
        "hou",
        "ui",
        "mainQtWindow",
        "p",
        "start",
        "vsc",
        "file_path",
        "get_file_watcher",
        "watcher",
        "QtCore",
        "QFileSystemWatcher",
        "file_path",
        "parent",
        "hou",
        "ui",
        "mainQtWindow",
        "watcher",
        "fileChanged",
        "connect",
        "filechanged",
        "hou",
        "session",
        "watcher",
        "file_path",
        "watcher",
        "files",
        "watcher",
        "addPath",
        "file_path",
        "get_parm_bindings",
        "parms_bindings",
        "hou",
        "session",
        "hou",
        "session",
        "PARMS_BINDINGS",
        "parm",
        "parm",
        "get_file_name",
        "parm",
        "get_file_watcher",
        "watcher",
        "get_parm_bindings",
        "parms_bindings",
        "file_name",
        "parms_bindings",
        "keys",
        "parm",
        "get_file_name",
        "parm",
        "get_file_watcher",
        "watcher",
        "file_name",
        "watcher",
        "files",
        "watcher",
        "removePath",
        "file_name",
        "QtWidgets",
        "QMessageBox",
        "information",
        "hou",
        "ui",
        "mainQtWindow",
        "file_name"
    ],
    "literals": [
        "\"ASYNC_EDIT_FOLDER\"",
        "\"houdini{}.{}\"",
        "\"$HOME\"",
        "\"ExternalEditor.cfg\"",
        "\"\"",
        "\"Select an external editor program\"",
        "'w'",
        "\"Editor set\"",
        "\"External editor set to: \"",
        "\"EDITOR\"",
        "'r'",
        "\"\"",
        "\"Editor not set\"",
        "\"No external editor set, pick one ?\"",
        "\"Yes\"",
        "\"Cancel\"",
        "\"PARMS_BINDINGS\"",
        "'r'",
        "\"Watcher error: \"",
        "\"editorlang\"",
        "\"\"",
        "\"vex\"",
        "\".vfl\"",
        "\"python\"",
        "\".py\"",
        "\".py\"",
        "\".txt\"",
        "\".txt\"",
        "'_'",
        "'_'",
        "\"FILE_WATCHER\"",
        "\"PARMS_BINDINGS\"",
        "'w'",
        "\"No external editor set\"",
        "\"Watcher Removed\"",
        "\"Watcher removed on file: \""
    ],
    "variables": [
        "TEMP_FOLDER",
        "ver",
        "verStr",
        "cfg",
        "template",
        "exp",
        "exp",
        "exp",
        "r",
        "root",
        "file",
        "editor",
        "editor",
        "editor",
        "r",
        "parms_bindings",
        "parm",
        "data",
        "template",
        "data",
        "data",
        "template",
        "editorlang",
        "node",
        "sid",
        "file_name",
        "file_path",
        "file_path",
        "data",
        "data",
        "vsc",
        "p",
        "watcher",
        "watcher",
        "FILE_WATCHER",
        "parms_bindings",
        "PARMS_BINDINGS",
        "parms_bindings",
        "parms_bindings",
        "file_path",
        "file_name",
        "watcher",
        "parms_bindings",
        "file_name",
        "watcher"
    ],
    "comments": [
        "MIT License",
        "",
        "Copyright (c) 2017 Guillaume Jobst, www.cgtoolbox.com",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in all",
        "copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE.",
        "",
        "fetch parm content, either raw value or expression if any"
    ],
    "docstrings": [
        "\"\"\" Signal emitted by the watcher to update the parameter contents.\n        TODO: set expression when not a string parm.\n    \"\"\"",
        "\"\"\" Get the file name's extention according to parameter's temaplate.\n    \"\"\"",
        "\"\"\" Construct an unique file name from a parameter with right extension.\n    \"\"\"",
        "\"\"\" Create a file with the current parameter contents and \n        create a file watcher, if not already created and found in hou.Session,\n        add the file to the list of watched files.\n\n        Link the file created to a parameter where the tool has been executed from\n        and when the file changed, edit the parameter contents with text contents.\n    \"\"\"",
        "\"\"\" Check if a parameter has a watcher attached to it\n        Used to display or hide \"Remove Watcher\" menu.\n    \"\"\"",
        "\"\"\" Check if a given parameter's watched file exist and remove it\n        from watcher list, do not remove the file itself.\n    \"\"\""
    ],
    "functions": [
        "is_valid_parm",
        "clean_exp",
        "set_external_editor",
        "get_external_editor",
        "filechanged",
        "get_file_ext",
        "get_file_name",
        "get_file_watcher",
        "get_parm_bindings",
        "add_watcher",
        "parm_has_watcher",
        "remove_file_watched"
    ],
    "classes": []
}