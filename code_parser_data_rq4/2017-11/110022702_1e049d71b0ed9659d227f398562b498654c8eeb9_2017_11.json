{
    "identifiers": [
        "com",
        "salesforce",
        "test",
        "kafka",
        "com",
        "google",
        "common",
        "collect",
        "Maps",
        "kafka",
        "server",
        "KafkaConfig",
        "kafka",
        "server",
        "KafkaServerStartable",
        "org",
        "apache",
        "curator",
        "test",
        "InstanceSpec",
        "org",
        "apache",
        "curator",
        "test",
        "TestingServer",
        "org",
        "apache",
        "kafka",
        "clients",
        "admin",
        "AdminClient",
        "org",
        "apache",
        "kafka",
        "clients",
        "admin",
        "CreateTopicsResult",
        "org",
        "apache",
        "kafka",
        "clients",
        "admin",
        "KafkaAdminClient",
        "org",
        "apache",
        "kafka",
        "clients",
        "admin",
        "NewTopic",
        "org",
        "apache",
        "kafka",
        "clients",
        "consumer",
        "KafkaConsumer",
        "org",
        "apache",
        "kafka",
        "clients",
        "producer",
        "KafkaProducer",
        "org",
        "apache",
        "kafka",
        "common",
        "errors",
        "TopicExistsException",
        "org",
        "apache",
        "kafka",
        "common",
        "serialization",
        "ByteArrayDeserializer",
        "org",
        "apache",
        "kafka",
        "common",
        "serialization",
        "ByteArraySerializer",
        "org",
        "apache",
        "kafka",
        "common",
        "serialization",
        "StringSerializer",
        "java",
        "io",
        "File",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "Properties",
        "java",
        "util",
        "concurrent",
        "ExecutionException",
        "zkServer",
        "kafka",
        "zkServer",
        "kafka",
        "getKafkaServer",
        "serverConfig",
        "advertisedPort",
        "getZookeeperServer",
        "getPort",
        "zkInstanceSpec",
        "zkServer",
        "zkInstanceSpec",
        "zkConnectionString",
        "getZookeeperServer",
        "getConnectString",
        "logDir",
        "toHexString",
        "random",
        "logDir",
        "deleteOnExit",
        "kafkaPort",
        "valueOf",
        "InstanceSpec",
        "getRandomPort",
        "hostname",
        "kafkaProperties",
        "kafkaProperties",
        "setProperty",
        "zkConnectionString",
        "kafkaProperties",
        "setProperty",
        "kafkaPort",
        "kafkaProperties",
        "setProperty",
        "logDir",
        "getAbsolutePath",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "hostname",
        "kafkaProperties",
        "setProperty",
        "hostname",
        "kafkaProperties",
        "setProperty",
        "kafkaPort",
        "kafkaProperties",
        "setProperty",
        "hostname",
        "kafkaPort",
        "kafkaProperties",
        "setProperty",
        "hostname",
        "kafkaPort",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "kafkaProperties",
        "setProperty",
        "config",
        "kafkaProperties",
        "kafka",
        "config",
        "getKafkaServer",
        "startup",
        "topicName",
        "createTopic",
        "topicName",
        "topicName",
        "partitions",
        "replicationFactor",
        "adminClient",
        "KafkaAdminClient",
        "create",
        "buildDefaultClientConfig",
        "newTopic",
        "topicName",
        "partitions",
        "replicationFactor",
        "createTopicsResult",
        "adminClient",
        "createTopics",
        "Collections",
        "singleton",
        "newTopic",
        "createTopicsResult",
        "values",
        "get",
        "topicName",
        "get",
        "e",
        "e",
        "getCause",
        "e",
        "getMessage",
        "e",
        "close",
        "keySerializer",
        "valueSerializer",
        "kafkaProducerConfig",
        "Maps",
        "newHashMap",
        "kafkaProducerConfig",
        "put",
        "getKafkaConnectString",
        "kafkaProducerConfig",
        "put",
        "keySerializer",
        "kafkaProducerConfig",
        "put",
        "valueSerializer",
        "kafkaProducerConfig",
        "put",
        "kafkaProducerConfig",
        "put",
        "kafkaProducerConfig",
        "put",
        "getClass",
        "getSimpleName",
        "kafkaProducerConfig",
        "put",
        "kafkaProducerConfig",
        "getKafkaProducer",
        "getName",
        "getName",
        "keyDeserializer",
        "valueDeserializer",
        "kafkaConsumerConfig",
        "buildDefaultClientConfig",
        "kafkaConsumerConfig",
        "put",
        "keyDeserializer",
        "kafkaConsumerConfig",
        "put",
        "valueDeserializer",
        "kafkaConsumerConfig",
        "put",
        "kafkaConsumerConfig",
        "getKafkaConsumer",
        "getName",
        "getName",
        "defaultClientConfig",
        "Maps",
        "newHashMap",
        "defaultClientConfig",
        "put",
        "getKafkaConnectString",
        "defaultClientConfig",
        "put",
        "defaultClientConfig",
        "Override",
        "getKafkaServer",
        "getKafkaServer",
        "shutdown",
        "kafka",
        "getZookeeperServer",
        "getZookeeperServer",
        "close",
        "zkServer"
    ],
    "literals": [
        "\"127.0.0.1:\"",
        "\"127.0.0.1:\"",
        "\"/tmp/kafka-logs-\"",
        "\"127.0.0.1\"",
        "\"zookeeper.connect\"",
        "\"port\"",
        "\"log.dir\"",
        "\"auto.create.topics.enable\"",
        "\"true\"",
        "\"zookeeper.session.timeout.ms\"",
        "\"30000\"",
        "\"broker.id\"",
        "\"1\"",
        "\"auto.offset.reset\"",
        "\"latest\"",
        "\"host.name\"",
        "\"advertised.host.name\"",
        "\"advertised.port\"",
        "\"advertised.listeners\"",
        "\"PLAINTEXT://\"",
        "\":\"",
        "\"listeners\"",
        "\"PLAINTEXT://\"",
        "\":\"",
        "\"num.io.threads\"",
        "\"2\"",
        "\"num.network.threads\"",
        "\"2\"",
        "\"log.flush.interval.messages\"",
        "\"1\"",
        "\"offsets.topic.replication.factor\"",
        "\"1\"",
        "\"offset.storage.replication.factor\"",
        "\"1\"",
        "\"transaction.state.log.replication.factor\"",
        "\"1\"",
        "\"config.storage.replication.factor\"",
        "\"1\"",
        "\"status.storage.replication.factor\"",
        "\"1\"",
        "\"default.replication.factor\"",
        "\"1\"",
        "\"bootstrap.servers\"",
        "\"key.serializer\"",
        "\"value.serializer\"",
        "\"max.in.flight.requests.per.connection\"",
        "\"retries\"",
        "\"client.id\"",
        "\" Producer\"",
        "\"batch.size\"",
        "\"key.deserializer\"",
        "\"value.deserializer\"",
        "\"partition.assignment.strategy\"",
        "\"org.apache.kafka.clients.consumer.RoundRobinAssignor\"",
        "\"bootstrap.servers\"",
        "\"client.id\"",
        "\"test-consumer-id\""
    ],
    "variables": [
        "zkServer",
        "kafka"
    ],
    "comments": [
        "Start zookeeper",
        "Create temp path to store logs",
        "Determine what port to run kafka on",
        "Assume local host.",
        "Build properties",
        "Ensure that we're advertising appropriately",
        "Lower active threads.",
        "Define replication factor for internal topics to 1",
        "Create admin client",
        "Define topic",
        "Create topic, which is async call.",
        "Since the call is Async, Lets wait for it to complete.",
        "TopicExistsException - Swallow this exception, just means the topic already exists.",
        "Create producer",
        "Return our producer"
    ],
    "docstrings": [
        "* Copyright (c) 2017, Salesforce.com, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the\n * following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n *   disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n *   disclaimer in the documentation and/or other materials provided with the distribution.\n *\n * * Neither the name of Salesforce.com nor the names of its contributors may be used to endorse or promote products\n *   derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "* This will spin up a ZooKeeper and Kafka server for use in integration tests. Simply\n * create an instance of KafkaTestServer and call start() and you can publish to Kafka\n * topics in an integration test. Be sure to call shutdown() when the test is complete\n * or use the AutoCloseable interface.",
        "* @return Internal Zookeeper Server.",
        "* @return Internal Kafka Server.",
        "* @return The proper connect string to use for Kafka.",
        "* @return The proper connect string to use for Zookeeper.",
        "* Creates and starts ZooKeeper and Kafka server instances.",
        "* Creates a namespace in Kafka. If the namespace already exists this does nothing.\n     * Will create a namespace with exactly 1 partition.\n     * @param topicName - the namespace name to create.",
        "* Creates a topic in Kafka. If the topic already exists this does nothing.\n     * @param topicName - the namespace name to create.\n     * @param partitions - the number of partitions to create.",
        "* Shuts down the ZooKeeper and Kafka server instances. This *must* be called before the integration\n     * test completes in order to clean up any running processes and data that was created.",
        "* Creates a kafka producer that is connected to our test server.",
        "* Creates a kafka producer that is connected to our test server.\n     * Uses the String serializer for key, and ByteArray Serializer for value.\n     * @Deprecated Use getKafkaConsumer(final String keyDeserializer, final String valueDeserializer)",
        "* Return Kafka Consumer configured to consume from internal Kafka Server.\n     * @param keyDeserializer which deserializer to use for key\n     * @param valueDeserializer which deserializer to use for value",
        "* @return Kafka Consumer configured to consume from internal Kafka Server using byte array deserializer.\n     * @Deprecated Use getKafkaProducer(final String keySerializer, final String valueSerializer)",
        "* Internal helper method to build a default configuration.",
        "* Closes the internal servers. Failing to call this at the end of your tests will likely\n     * result in leaking instances."
    ],
    "functions": [
        "TestingServer",
        "getZookeeperServer",
        "KafkaServerStartable",
        "getKafkaServer",
        "getKafkaConnectString",
        "getZookeeperConnectString",
        "start",
        "createTopic",
        "createTopic",
        "shutdown",
        "KafkaProducer",
        "getKafkaProducer",
        "KafkaProducer",
        "getKafkaProducer",
        "KafkaConsumer",
        "getKafkaConsumer",
        "getKafkaConsumer",
        "buildDefaultClientConfig",
        "close"
    ],
    "classes": [
        "KafkaTestServer"
    ]
}