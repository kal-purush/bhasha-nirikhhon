{
    "identifiers": [
        "root",
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "root",
        "factory",
        "root",
        "root",
        "options",
        "options",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "_applyRemainingDefaultOptions",
        "DocumentTouch",
        "selector",
        "_applyRemainingDefaultOptions",
        "visibleOptionToUse",
        "visibleOptionToUse",
        "visibleOptionToUse",
        "selector",
        "selector",
        "elements",
        "_getElements",
        "selector",
        "elements",
        "_addBaselineStyles",
        "elsWithIds",
        "idList",
        "elsWithIds",
        "assign",
        "el",
        "el",
        "i",
        "i",
        "elements",
        "i",
        "elements",
        "i",
        "indexesToDrop",
        "i",
        "elements",
        "i",
        "elementID",
        "elements",
        "i",
        "elements",
        "i",
        "elementID",
        "elements",
        "i",
        "tidyText",
        "elements",
        "i",
        "newTidyText",
        "tidyText",
        "count",
        "index",
        "newTidyText",
        "tidyText",
        "count",
        "index",
        "idList",
        "newTidyText",
        "count",
        "index",
        "index",
        "idList",
        "newTidyText",
        "elements",
        "i",
        "newTidyText",
        "elementID",
        "newTidyText",
        "readableID",
        "elementID",
        "anchor",
        "anchor",
        "anchor",
        "elementID",
        "anchor",
        "readableID",
        "anchor",
        "visibleOptionToUse",
        "anchor",
        "anchor",
        "anchor",
        "anchor",
        "anchor",
        "anchor",
        "elements",
        "i",
        "anchor",
        "elements",
        "i",
        "anchor",
        "elements",
        "i",
        "anchor",
        "i",
        "i",
        "indexesToDrop",
        "i",
        "elements",
        "indexesToDrop",
        "i",
        "i",
        "elements",
        "selector",
        "_getElements",
        "selector",
        "i",
        "elements",
        "i",
        "domAnchor",
        "elements",
        "i",
        "domAnchor",
        "index",
        "elements",
        "i",
        "index",
        "index",
        "elements",
        "i",
        "domAnchor",
        "text",
        "_applyRemainingDefaultOptions",
        "urlText",
        "text",
        "nonsafeChars",
        "urlText",
        "el",
        "el",
        "el",
        "el",
        "el",
        "hasLeftAnchor",
        "hasRightAnchor",
        "input",
        "input",
        "input",
        "elements",
        "input",
        "input",
        "input",
        "NodeList",
        "elements",
        "input",
        "elements",
        "style",
        "style",
        "firstStyleEl",
        "firstStyleEl",
        "style",
        "style",
        "firstStyleEl",
        "style",
        "linkRule",
        "style",
        "style",
        "hoverRule",
        "style",
        "style",
        "pseudoElContent",
        "style",
        "style",
        "anchorjsLinkFontFace",
        "style",
        "AnchorJS"
    ],
    "literals": [
        "'use strict'",
        "'function'",
        "'object'",
        "'use strict'",
        "'icon'",
        "'\\ue9cb'",
        "'visible'",
        "'hover'",
        "'placement'",
        "'right'",
        "'class'",
        "''",
        "'truncate'",
        "'ontouchstart'",
        "'touch'",
        "'always'",
        "'hover'",
        "'h2, h3, h4, h5, h6'",
        "'[id]'",
        "'id'",
        "'id'",
        "'data-anchor-id'",
        "'data-anchor-id'",
        "'-'",
        "'id'",
        "' '",
        "'a'",
        "'anchorjs-link '",
        "'#'",
        "'aria-label'",
        "'Anchor link for: '",
        "'data-anchorjs-icon'",
        "'always'",
        "'1'",
        "'\\ue9cb'",
        "'1em/1 anchorjs-icons'",
        "'left'",
        "'inherit'",
        "'left'",
        "'absolute'",
        "'-1em'",
        "'0.5em'",
        "'0.375em'",
        "'.anchorjs-link'",
        "''",
        "'-'",
        "'-'",
        "''",
        "' '",
        "' '",
        "' anchorjs-link '",
        "' '",
        "' '",
        "' anchorjs-link '",
        "'string'",
        "'The selector provided to AnchorJS was invalid.'",
        "'style.anchorjs'",
        "'style'",
        "' .anchorjs-link {'",
        "'   opacity: 0;'",
        "'   text-decoration: none;'",
        "'   -webkit-font-smoothing: antialiased;'",
        "'   -moz-osx-font-smoothing: grayscale;'",
        "' }'",
        "' *:hover > .anchorjs-link,'",
        "' .anchorjs-link:focus  {'",
        "'   opacity: 1;'",
        "' }'",
        "' @font-face {'",
        "'   font-family: \"anchorjs-icons\";'",
        "'   src: url(data:n/a;base64,AAEAAAALAIAAAwAwT1MvMg8yG2cAAAE4AAAAYGNtYXDp3gC3AAABpAAAAExnYXNwAAAAEAAAA9wAAAAIZ2x5ZlQCcfwAAAH4AAABCGhlYWQHFvHyAAAAvAAAADZoaGVhBnACFwAAAPQAAAAkaG10eASAADEAAAGYAAAADGxvY2EACACEAAAB8AAAAAhtYXhwAAYAVwAAARgAAAAgbmFtZQGOH9cAAAMAAAAAunBvc3QAAwAAAAADvAAAACAAAQAAAAEAAHzE2p9fDzz1AAkEAAAAAADRecUWAAAAANQA6R8AAAAAAoACwAAAAAgAAgAAAAAAAAABAAADwP/AAAACgAAA/9MCrQABAAAAAAAAAAAAAAAAAAAAAwABAAAAAwBVAAIAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAMCQAGQAAUAAAKZAswAAACPApkCzAAAAesAMwEJAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAg//0DwP/AAEADwABAAAAAAQAAAAAAAAAAAAAAIAAAAAAAAAIAAAACgAAxAAAAAwAAAAMAAAAcAAEAAwAAABwAAwABAAAAHAAEADAAAAAIAAgAAgAAACDpy//9//8AAAAg6cv//f///+EWNwADAAEAAAAAAAAAAAAAAAAACACEAAEAAAAAAAAAAAAAAAAxAAACAAQARAKAAsAAKwBUAAABIiYnJjQ3NzY2MzIWFxYUBwcGIicmNDc3NjQnJiYjIgYHBwYUFxYUBwYGIwciJicmNDc3NjIXFhQHBwYUFxYWMzI2Nzc2NCcmNDc2MhcWFAcHBgYjARQGDAUtLXoWOR8fORYtLTgKGwoKCjgaGg0gEhIgDXoaGgkJBQwHdR85Fi0tOAobCgoKOBoaDSASEiANehoaCQkKGwotLXoWOR8BMwUFLYEuehYXFxYugC44CQkKGwo4GkoaDQ0NDXoaShoKGwoFBe8XFi6ALjgJCQobCjgaShoNDQ0NehpKGgobCgoKLYEuehYXAAAADACWAAEAAAAAAAEACAAAAAEAAAAAAAIAAwAIAAEAAAAAAAMACAAAAAEAAAAAAAQACAAAAAEAAAAAAAUAAQALAAEAAAAAAAYACAAAAAMAAQQJAAEAEAAMAAMAAQQJAAIABgAcAAMAAQQJAAMAEAAMAAMAAQQJAAQAEAAMAAMAAQQJAAUAAgAiAAMAAQQJAAYAEAAMYW5jaG9yanM0MDBAAGEAbgBjAGgAbwByAGoAcwA0ADAAMABAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAH//wAP) format(\"truetype\");'",
        "' }'",
        "' [data-anchorjs-icon]::after {'",
        "'   content: attr(data-anchorjs-icon);'",
        "' }'",
        "'anchorjs'",
        "''",
        "'[rel=\"stylesheet\"], style'"
    ],
    "variables": [
        "elements",
        "elsWithIds",
        "idList",
        "elementID",
        "i",
        "index",
        "count",
        "tidyText",
        "newTidyText",
        "readableID",
        "anchor",
        "visibleOptionToUse",
        "indexesToDrop",
        "index",
        "domAnchor",
        "elements",
        "i",
        "nonsafeChars",
        "urlText",
        "hasLeftAnchor",
        "hasRightAnchor",
        "elements",
        "style",
        "linkRule",
        "hoverRule",
        "anchorjsLinkFontFace",
        "pseudoElContent",
        "firstStyleEl"
    ],
    "comments": [
        "eslint-env amd, node",
        "https://github.com/umdjs/umd/blob/master/templates/returnExports.js",
        "AMD. Register as an anonymous module.",
        "Node. Does not work with strict CommonJS, but",
        "only CommonJS-like environments that support module.exports,",
        "like Node.",
        "Browser globals (root is window)",
        "Accepts characters (and also URLs?), like  '#', '¶', '❡', or '§'.",
        "Also accepts 'always' & 'touch'",
        "Also accepts 'left'",
        "Accepts any class name.",
        "Using Math.floor here will ensure the value is Number-cast and an integer.",
        "Accepts any value that can be typecast to a number.",
        "We reapply options here because somebody may have overwritten the default options object when setting options.",
        "For example, this overwrites all options but visible:",
        "",
        "anchors.options = { visible: 'always'; }",
        "Provide a sensible default selector, if none is given.",
        "We produce a list of existing IDs so we don't generate a duplicate.",
        "Compare our generated ID to existing IDs (and increment it if needed)",
        "before we add it to the page.",
        "The following code builds the following DOM structure in a more effiecient (albeit opaque) way.",
        "'<a class=\"anchorjs-link ' + this.options.class + '\" href=\"#' + elementID + '\" aria-label=\"Anchor link for: ' + readableID + '\" data-anchorjs-icon=\"' + this.options.icon + '\"></a>';",
        "We set lineHeight = 1 here because the `anchorjs-icons` font family could otherwise affect the",
        "height of the heading. This isn't the case for icons with `placement: left`, so we restore",
        "line-height: inherit in that case, ensuring they remain positioned correctly. For more info,",
        "see https://github.com/bryanbraun/anchorjs/issues/39.",
        "if the option provided is `right` (or anything else).",
        "Drop the element from our main list, if it's in there.",
        "Remove the anchor from the DOM.",
        "Regex for finding the nonsafe URL characters (many need escaping): & +$,:;=?@\"#{}|^~[`%!'<>]./()*\\",
        "The reason we include this _applyRemainingDefaultOptions is so urlify can be called independently,",
        "even after setting options. This can be useful for tests or other applications.",
        "Note: we trim hyphens after truncating because truncating can cause dangling hyphens.",
        "Example string:                                  // \" ⚡⚡ Don't forget: URL fragments should be i18n-friendly, hyphenated, short, and clean.\"",
        "\"⚡⚡ Don't forget: URL fragments should be i18n-friendly, hyphenated, short, and clean.\"",
        "\"⚡⚡ Dont forget: URL fragments should be i18n-friendly, hyphenated, short, and clean.\"",
        "\"⚡⚡-Dont-forget--URL-fragments-should-be-i18n-friendly--hyphenated--short--and-clean-\"",
        "\"⚡⚡-Dont-forget-URL-fragments-should-be-i18n-friendly-hyphenated-short-and-clean-\"",
        "\"⚡⚡-Dont-forget-URL-fragments-should-be-i18n-friendly-hyphenated-\"",
        "\"⚡⚡-Dont-forget-URL-fragments-should-be-i18n-friendly-hyphenated\"",
        "\"⚡⚡-dont-forget-url-fragments-should-be-i18n-friendly-hyphenated\"",
        "See https://davidwalsh.name/nodelist-array for the technique transforming nodeList -> Array.",
        "I checked the 'input instanceof NodeList' test in IE9 and modern browsers and it worked for me.",
        "We don't want to add global baseline styles if they've been added before.",
        "Icon from icomoon; 10px wide & 10px tall; 2 empty below & 4 above",
        "Necessary for Webkit.",
        "We place it in the head with the other style tags, if possible, so as to",
        "not look out of place. We insert before the others so these styles can be",
        "overridden if necessary."
    ],
    "docstrings": [
        "* Assigns options to the internal options object, and provides defaults.\n     * @param {Object} opts - Options object",
        "* Checks to see if this device supports touch. Uses criteria pulled from Modernizr:\n     * https://github.com/Modernizr/Modernizr/blob/da22eb27631fc4957f67607fe6042e85c0a84656/feature-detects/touchevents.js#L40\n     * @return {Boolean} - true if the current device supports touch.",
        "* Add anchor links to page elements.\n     * @param  {String|Array|Nodelist} selector - A CSS selector for targeting the elements you wish to add anchor links\n     *                                            to. Also accepts an array or nodeList containing the relavant elements.\n     * @return {this}                           - The AnchorJS object",
        "* Removes all anchorjs-links from elements targed by the selector.\n     * @param  {String|Array|Nodelist} selector - A CSS selector string targeting elements with anchor links,\n     *                                            OR a nodeList / array containing the DOM elements.\n     * @return {this}                           - The AnchorJS object",
        "* Removes all anchorjs links. Mostly used for tests.",
        "* Urlify - Refine text so it makes a good ID.\n     *\n     * To do this, we remove apostrophes, replace nonsafe characters with hyphens,\n     * remove extra hyphens, truncate, trim hyphens, and make lowercase.\n     *\n     * @param  {String} text - Any text. Usually pulled from the webpage element we are linking to.\n     * @return {String}      - hyphen-delimited text for use in IDs and URLs.",
        "* Determines if this element already has an AnchorJS link on it.\n     * Uses this technique: http://stackoverflow.com/a/5898748/1154642\n     * @param    {HTMLElemnt}  el - a DOM node\n     * @return   {Boolean}     true/false",
        "* Turns a selector, nodeList, or array of elements into an array of elements (so we can use array methods).\n     * It also throws errors on any other inputs. Used to handle inputs to .add and .remove.\n     * @param  {String|Array|Nodelist} input - A CSS selector string targeting elements with anchor links,\n     *                                         OR a nodeList / array containing the DOM elements.\n     * @return {Array} - An array containing the elements we want.",
        "* _addBaselineStyles\n     * Adds baseline styles to the page, used by all AnchorJS links irregardless of configuration."
    ],
    "functions": [
        "AnchorJS",
        "_applyRemainingDefaultOptions",
        "_getElements",
        "_addBaselineStyles"
    ],
    "classes": []
}