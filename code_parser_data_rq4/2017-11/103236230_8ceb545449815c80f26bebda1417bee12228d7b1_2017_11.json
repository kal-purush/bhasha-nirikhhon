{
    "identifiers": [
        "json",
        "logging",
        "re",
        "traceback",
        "operation",
        "logging",
        "info",
        "format",
        "operation",
        "re",
        "compile",
        "access_pattern",
        "re",
        "compile",
        "filter_pattern",
        "re",
        "compile",
        "index_pattern",
        "re",
        "match",
        "access_regex",
        "operation",
        "match_object",
        "logging",
        "debug",
        "match_object",
        "groups",
        "re",
        "match",
        "filter_regex",
        "operation",
        "match_object",
        "logging",
        "debug",
        "match_object",
        "groups",
        "re",
        "match",
        "index_regex",
        "operation",
        "match_object",
        "logging",
        "debug",
        "match_object",
        "groups",
        "logging",
        "warn",
        "json_object",
        "operations",
        "json_object",
        "logging",
        "warn",
        "operations",
        "logging",
        "warn",
        "stack",
        "append",
        "json_object",
        "operation",
        "operations",
        "split",
        "_parse_operation",
        "operation",
        "logging",
        "debug",
        "format",
        "stack",
        "operation_type",
        "logging",
        "debug",
        "stack_item",
        "stack",
        "stack_item",
        "get",
        "stack_item_value",
        "stack_buffer",
        "append",
        "stack_item_value",
        "operation_type",
        "logging",
        "debug",
        "stack_item",
        "stack",
        "stack_item",
        "get",
        "format",
        "condition",
        "value",
        "logging",
        "debug",
        "format",
        "filter_value",
        "condition",
        "value",
        "eval",
        "eval_string",
        "stack_buffer",
        "append",
        "stack_item",
        "operation_type",
        "logging",
        "debug",
        "index",
        "logging",
        "debug",
        "stack_item",
        "stack",
        "isinstance",
        "stack_item",
        "item",
        "stack_item",
        "stack_buffer",
        "append",
        "item",
        "index",
        "isdigit",
        "stack_buffer",
        "append",
        "stack",
        "index",
        "logging",
        "warn",
        "stack_buffer",
        "logging",
        "debug",
        "format",
        "stack",
        "len",
        "stack",
        "len",
        "stack",
        "stack",
        "stack",
        "e",
        "logging",
        "warn",
        "traceback",
        "print_exc",
        "json_object",
        "operations_map",
        "name",
        "operations",
        "operations_map",
        "iteritems",
        "perform_operations_on_json",
        "json_object",
        "operations",
        "operations",
        "output"
    ],
    "literals": [
        "\"Parsing operation: {}\"",
        "\"^([^{[]+)$\"",
        "\"^\\{([^!=><]+)(\\=\\=|\\!\\=|\\>|\\>\\=|\\<|\\<\\=)([^!=><]+)\\}$\"",
        "\"^\\[(\\d+|\\*)\\]$\"",
        "\"Access operation\"",
        "'access'",
        "\"Filter operation\"",
        "'filter'",
        "\"Index operation\"",
        "'index'",
        "\"Unknown operation type\"",
        "\"JSON data not provided\"",
        "\"Operations str not specified\"",
        "'.'",
        "\"Processing JSON: {}\"",
        "'access'",
        "\"Performing access operation\"",
        "'filter'",
        "\"Performing filter operation\"",
        "\"{}{}{}\"",
        "\"filter_value\"",
        "\"Evaluating {}{}{}\"",
        "'index'",
        "\"Performing index operation\"",
        "\"*\"",
        "\"Received * index. Stacking all \"",
        "\"entries within list\"",
        "\"Unknown operation type. \"",
        "\"Cannot process further\"",
        "\"Processed JSON: {}\"",
        "\"Exception while processing json\""
    ],
    "variables": [
        "access_pattern",
        "filter_pattern",
        "index_pattern",
        "access_regex",
        "filter_regex",
        "index_regex",
        "match_object",
        "match_object",
        "match_object",
        "stack",
        "stack_buffer",
        "operation_type",
        "stack_item_value",
        "condition",
        "value",
        "filter_value",
        "eval_string",
        "index",
        "stack",
        "output",
        "output",
        "name"
    ],
    "comments": [
        "Matching operation string against the three operation types",
        "If result has a single item then return that item",
        "else return the list of items"
    ],
    "docstrings": [
        "\"\"\"\n    Given an operation string, method returns the name of the operation \n    and a tuple of the parsed operations. Supported operations are\n    access: Match any character that is not { or [\n    filter: Must be enclosed between {}. Within braces should match format\n        <string><operator><string>. Operator should match \n        ==, !=, >, >=, <, <=\n    index: Must be enclosed between []. Within brackets should match any \n        digit or * character\n        \n    :param operation: Operation string \n    :type param: str\n    \"\"\"",
        "\"\"\"\n    Perform operations on json and return the result.\n    Operations is a sequential set of operation seperated by a dot. \n    Operation is one of 3 types - access, filter and index. \n    \n    Operation Types:\n    Access operation is specified as a string and returns a matching \n    object from dict\n    \n    Filter operation is specified in {<string><operator><string>} format.\n    <operator> should match ==, !=, >, >=, <, <=. Operates on a dict and \n    returns the dict as is if the filter condition is met\n    \n    Index operation is specified in  [<index>] format. <index> can be a \n    number or *. When number is specified it returns the object at that \n    index location. When star is specified it de-nests a list i.e. passes\n    through each list item and returns the objects in the list.\n    \n    E.g. input_json = { 'name':  {'first':'Dilly', 'last':'Berty'},\n                        'phone': [ \n                                 {'area':111, 'number':222333}, \n                                 {'area':444, 'number':555666},\n                                 {'area':'aaa', 'number':'bbbccc'}\n                                 ]\n                        }\n    perform_operations_on_json(input_json, 'name')\n    {'first': 'Dilly', 'last': 'Berty'}\n    \n    perform_operations_on_json(input_json, 'name.first')\n    'Dilly'\n    \n    perform_operations_on_json(input_json, 'phone.{area==\"aaa\"}')\n    None\n    \n    perform_operations_on_json(input_json, 'phone.[*].{area==\"aaa\"}')\n    {'area': 'aaa', 'number': 'bbbccc'}\n    \n    perform_operations_on_json(input_json, 'phone.[*].{area!=111}')\n    [{'number': 555666, 'area': 444}, {'number': 'bbbccc', 'area': 'aaa'}]\n    \n    perform_operations_on_json(input_json, 'phone.[*].{area!=111}.[0]')\n    {'number': 555666, 'area': 444}\n    \n    :param json_object: JSON Object\n    :type json_object: Python object\n    :param operations:Operation string\n    :type operations: str\n    \"\"\"",
        "\"\"\"\n    Return a dictionary with name and output from performing corresponding \n    operations on json_object. See perform_operations_on_json \n    documentation for more details\n    \n    E.g. perform_multiple_operations_on_json(\n    input_json, \n    {'first_name': 'name.first', 'phone': 'phone.[*].[0]'}\n    )\n    {'first_name': 'Dilly', 'phone': {'area': 111, 'number': 222333}}\n    \n    :param json_object: JSON Object\n    :type json_object: Python object\n    :param operations_map: Mapping of name and operations. \n    E.g. {'first_name': 'name.first', 'phone': 'phone.[*].[0]'}\n    :param operations_map: dict\n    \"\"\""
    ],
    "functions": [
        "_parse_operation",
        "perform_operations_on_json",
        "perform_multiple_operations_on_json"
    ],
    "classes": []
}