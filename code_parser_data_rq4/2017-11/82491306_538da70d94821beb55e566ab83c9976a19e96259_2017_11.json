{
    "identifiers": [
        "os",
        "ycm_core",
        "os",
        "path",
        "exists",
        "compilation_database_folder",
        "ycm_core",
        "CompilationDatabase",
        "compilation_database_folder",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "abspath",
        "flags",
        "working_directory",
        "working_directory",
        "flags",
        "flag",
        "flags",
        "flag",
        "make_next_absolute",
        "flag",
        "startswith",
        "os",
        "path",
        "join",
        "working_directory",
        "flag",
        "path_flag",
        "path_flags",
        "flag",
        "path_flag",
        "flag",
        "startswith",
        "path_flag",
        "flag",
        "len",
        "path_flag",
        "path_flag",
        "os",
        "path",
        "join",
        "working_directory",
        "path",
        "new_flag",
        "new_flags",
        "append",
        "new_flag",
        "new_flags",
        "filename",
        "os",
        "path",
        "splitext",
        "filename",
        "extension",
        "filename",
        "IsHeaderFile",
        "filename",
        "os",
        "path",
        "splitext",
        "filename",
        "extension",
        "SOURCE_EXTENSIONS",
        "basename",
        "extension",
        "os",
        "path",
        "exists",
        "replacement_file",
        "database",
        "GetCompilationInfoForFile",
        "replacement_file",
        "compilation_info",
        "compiler_flags_",
        "compilation_info",
        "database",
        "GetCompilationInfoForFile",
        "filename",
        "filename",
        "kwargs",
        "database",
        "GetCompilationInfoForFile",
        "filename",
        "compilation_info",
        "MakeRelativePathsInFlagsAbsolute",
        "compilation_info",
        "compiler_flags_",
        "compilation_info",
        "compiler_working_dir_",
        "DirectoryOfThisScript",
        "MakeRelativePathsInFlagsAbsolute",
        "flags",
        "relative_to",
        "final_flags"
    ],
    "literals": [
        "'-D'",
        "'__AVR_ATmega328P__'",
        "'-D'",
        "'F_CPU=16000000UL'",
        "'-g'",
        "'dwarf-2'",
        "'-O'",
        "'s'",
        "'-funsigned-char'",
        "'-funsigned-bitfields'",
        "'-fpack-struct'",
        "'-fshort-enums'",
        "'-Wall'",
        "'-Wstrict-prototypes'",
        "'-Wno-unknown-attributes'",
        "'-std=gnu99'",
        "'-x'",
        "'c'",
        "'-isystem'",
        "'/usr/avr/include'",
        "''",
        "'.cpp'",
        "'.cxx'",
        "'.cc'",
        "'.c'",
        "'.m'",
        "'.mm'",
        "'-isystem'",
        "'-I'",
        "'-iquote'",
        "'--sysroot='",
        "'/'",
        "'.h'",
        "'.hxx'",
        "'.hpp'",
        "'.hh'",
        "'flags'"
    ],
    "variables": [
        "flags",
        "compilation_database_folder",
        "database",
        "database",
        "SOURCE_EXTENSIONS",
        "new_flags",
        "make_next_absolute",
        "path_flags",
        "new_flag",
        "make_next_absolute",
        "new_flag",
        "make_next_absolute",
        "path",
        "new_flag",
        "extension",
        "basename",
        "replacement_file",
        "compilation_info",
        "compilation_info",
        "final_flags",
        "relative_to",
        "final_flags"
    ],
    "comments": [
        "Copyright (C) 2014 Google Inc.",
        "",
        "This file is part of ycmd.",
        "",
        "ycmd is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "ycmd is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with ycmd.  If not, see <http://www.gnu.org/licenses/>.",
        "These are the compilation flags that will be used in case there's no",
        "compilation database set (by default, one is not set).",
        "CHANGE THIS LIST OF FLAGS. YES, THIS IS THE DROID YOU HAVE BEEN LOOKING FOR.",
        "AVR magic macros and stuff",
        "This is only to prevent errors, the real freq. value is in the makefile",
        "other compiler directives (stolen from avr Makefile)",
        "turn off warnings for unknown attributes",
        "THIS IS IMPORTANT! Without a \"-std=<something>\" flag, clang won't know which",
        "language to use when compiling headers. So it will guess. Badly. So C++",
        "headers will be compiled as C headers. You don't want that so ALWAYS specify",
        "a \"-std=<something>\".",
        "For a C project, you would set this to something like 'c99' instead of",
        "'c++11'.",
        "...and the same thing goes for the magic -x option which specifies the",
        "language that the files to be compiled are written in. This is mostly",
        "relevant for c++ headers.",
        "For a C project, you would set this to 'c' instead of 'c++'.",
        "AVR Include files",
        "Set this to the absolute path to the folder (NOT the file!) containing the",
        "compile_commands.json file to use that instead of 'flags'. See here for",
        "more details: http://clang.llvm.org/docs/JSONCompilationDatabase.html",
        "",
        "Most projects will NOT need to set this to anything; you can just change the",
        "'flags' list of compilation flags.",
        "The compilation_commands.json file generated by CMake does not have entries",
        "for header files. So we do our best by asking the db for flags for a",
        "corresponding source file, if any. If one exists, the flags for that file",
        "should be good enough.",
        "This is the entry point; this function is called by ycmd to produce flags for",
        "a file.",
        "Bear in mind that compilation_info.compiler_flags_ does NOT return a",
        "python list, but a \"list-like\" StringVec object"
    ],
    "docstrings": [],
    "functions": [
        "DirectoryOfThisScript",
        "MakeRelativePathsInFlagsAbsolute",
        "IsHeaderFile",
        "GetCompilationInfoForFile",
        "FlagsForFile"
    ],
    "classes": []
}