{
    "identifiers": [
        "org",
        "opencastproject",
        "assetmanager",
        "util",
        "org",
        "apache",
        "commons",
        "io",
        "FilenameUtils",
        "org",
        "apache",
        "commons",
        "lang3",
        "StringUtils",
        "org",
        "osgi",
        "framework",
        "BundleContext",
        "org",
        "osgi",
        "service",
        "component",
        "ComponentContext",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "java",
        "io",
        "File",
        "java",
        "net",
        "URI",
        "java",
        "nio",
        "file",
        "Paths",
        "logger",
        "LoggerFactory",
        "getLogger",
        "CONFIG_ASSET_MANAGER_ROOT",
        "CONFIG_STORAGE_DIR",
        "componentContext",
        "componentContext",
        "componentContext",
        "getBundleContext",
        "bundleContext",
        "componentContext",
        "getBundleContext",
        "assetManagerDir",
        "StringUtils",
        "trimToNull",
        "bundleContext",
        "getProperty",
        "CONFIG_ASSET_MANAGER_ROOT",
        "assetManagerDir",
        "assetManagerDir",
        "StringUtils",
        "trimToNull",
        "bundleContext",
        "getProperty",
        "CONFIG_STORAGE_DIR",
        "assetManagerDir",
        "assetManagerDir",
        "assetManagerDir",
        "getAbsolutePath",
        "assetManagerDir",
        "assetManagerDir",
        "isDirectory",
        "logger",
        "debug",
        "assetManagerDir",
        "assetManagerDir",
        "localPath",
        "organizationId",
        "uri",
        "localPath",
        "organizationId",
        "uri",
        "getScheme",
        "startsWith",
        "uri",
        "getPath",
        "startsWith",
        "assetPath",
        "uri",
        "getPath",
        "split",
        "assetPath",
        "length",
        "mediaPackageID",
        "assetPath",
        "mediaPackageElementID",
        "assetPath",
        "version",
        "assetPath",
        "filename",
        "mediaPackageElementID",
        "FilenameUtils",
        "getExtension",
        "assetPath",
        "file",
        "Paths",
        "get",
        "localPath",
        "organizationId",
        "mediaPackageID",
        "version",
        "filename",
        "toFile",
        "file",
        "isFile",
        "logger",
        "debug",
        "uri",
        "file",
        "file",
        "logger",
        "debug",
        "uri",
        "file"
    ],
    "literals": [
        "\"org.opencastproject.episode.rootdir\"",
        "\"org.opencastproject.storage.dir\"",
        "\"archive\"",
        "\"Found local asset manager directory at {}\"",
        "\"http\"",
        "\"/assets/assets/\"",
        "\"/\"",
        "\"Converted {} to local file at {}\"",
        "\"Local file for {} not available. {} does not exist.\""
    ],
    "variables": [],
    "comments": [
        "Is the asset manager available locally?",
        "/assets/assets/{mediaPackageID}/{mediaPackageElementID}/{version}/{filenameIgnore}"
    ],
    "docstrings": [
        "* Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n *\n * The Apereo Foundation licenses this file to you under the Educational\n * Community License, Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of the License\n * at:\n *\n *   http://opensource.org/licenses/ecl2.txt\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n * License for the specific language governing permissions and limitations under\n * the License.\n *",
        "*",
        "Key defining the asset manager root directory",
        "Key defining the main storage directory",
        "* Get the local mount point of the asset manager if it exists.\n   *\n   * @param componentContext\n   *        The OSGI component context\n   * @return Path to the local asset manager directory if it exists",
        "* Splits up an asset manager URI and returns a local path instead.\n   *\n   * @param localPath\n   *          Path to the local asset manager directory\n   * @param organizationId\n   *          Organization identifier\n   * @param uri\n   *          URI to the asset\n   * @return Local file"
    ],
    "functions": [
        "AssetPathUtils",
        "getAssetManagerPath",
        "File",
        "getLocalFile"
    ],
    "classes": [
        "AssetPathUtils"
    ]
}