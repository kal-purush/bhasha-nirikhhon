{
    "identifiers": [
        "java",
        "util",
        "args",
        "tokens",
        "evalRPN",
        "tokens",
        "tokens",
        "st",
        "num1",
        "num2",
        "i",
        "i",
        "tokens",
        "length",
        "i",
        "tokens",
        "i",
        "equals",
        "st",
        "push",
        "st",
        "pop",
        "st",
        "pop",
        "tokens",
        "i",
        "equals",
        "st",
        "push",
        "st",
        "pop",
        "st",
        "pop",
        "tokens",
        "i",
        "equals",
        "num1",
        "st",
        "pop",
        "num2",
        "st",
        "pop",
        "st",
        "push",
        "num2",
        "num1",
        "tokens",
        "i",
        "equals",
        "num1",
        "st",
        "pop",
        "num2",
        "st",
        "pop",
        "st",
        "push",
        "num2",
        "num1",
        "st",
        "push",
        "parseInt",
        "tokens",
        "i",
        "st",
        "pop"
    ],
    "literals": [
        "\"10\"",
        "\"6\"",
        "\"9\"",
        "\"3\"",
        "\"+\"",
        "\"-11\"",
        "\"*\"",
        "\"/\"",
        "\"*\"",
        "\"17\"",
        "\"+\"",
        "\"5\"",
        "\"+\"",
        "\"+\"",
        "\"*\"",
        "\"/\"",
        "\"-\""
    ],
    "variables": [
        "num1",
        "num2"
    ],
    "comments": [],
    "docstrings": [
        "Evaluate the value of an arithmetic expression in Reverse Polish Notation.\n\nValid operators are +, -, *, /. Each operand may be an integer or another expression.\n\nNote:\n\nDivision between two integers should truncate toward zero.\nThe given RPN expression is always valid.\n That means the expression would always evaluate to a result \n and there won't be any divide by zero operation.\nExample 1:\n\nInput: [\"2\", \"1\", \"+\", \"3\", \"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9\nExample 2:\n\nInput: [\"4\", \"13\", \"5\", \"/\", \"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6\nExample 3:\n\nInput: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\nOutput: 22\nExplanation: \n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22"
    ],
    "functions": [
        "main",
        "evalRPN"
    ],
    "classes": [
        "EvaluateReversePolishNotation"
    ]
}