{
    "identifiers": [
        "numpy",
        "np",
        "scipy",
        "ndimage",
        "ndi",
        "image_dim",
        "connectivity",
        "offset",
        "connectivity",
        "np",
        "isscalar",
        "connectivity",
        "ndi",
        "generate_binary_structure",
        "image_dim",
        "connectivity",
        "np",
        "array",
        "connectivity",
        "c_connectivity",
        "ndim",
        "image_dim",
        "ValueError",
        "offset",
        "x",
        "x",
        "c_connectivity",
        "shape",
        "ValueError",
        "np",
        "array",
        "c_connectivity",
        "shape",
        "c_connectivity",
        "offset",
        "image_shape",
        "structure",
        "center",
        "order",
        "structure",
        "copy",
        "center",
        "np",
        "transpose",
        "np",
        "nonzero",
        "structure",
        "np",
        "ravel_multi_index",
        "connection_indices",
        "T",
        "image_shape",
        "order",
        "order",
        "np",
        "ravel_multi_index",
        "center",
        "image_shape",
        "order",
        "order",
        "np",
        "sum",
        "connection_indices",
        "center",
        "axis",
        "offsets",
        "np",
        "argsort",
        "squared_distances"
    ],
    "literals": [
        "\"Connectivity dimension must be same as image\"",
        "\"Connectivity array must have an unambiguous \"",
        "\"center\"",
        "'C'"
    ],
    "variables": [
        "connectivity",
        "c_connectivity",
        "c_connectivity",
        "offset",
        "structure",
        "structure",
        "connection_indices",
        "offsets",
        "squared_distances"
    ],
    "comments": [
        "Don't modify original input",
        "Ignore the center; it's not a neighbor"
    ],
    "docstrings": [
        "\"\"\"Convert any valid connectivity to a structuring element and offset.\n\n    Parameters\n    ----------\n    image_dim : int\n        The number of dimensions of the input image.\n    connectivity : int, array, or None\n        The neighborhood connectivity. An integer is interpreted as in\n        ``scipy.ndimage.generate_binary_structure``, as the maximum number\n        of orthogonal steps to reach a neighbor. An array is directly\n        interpreted as a structuring element and its shape is validated against\n        the input image shape. ``None`` is interpreted as a connectivity of 1.\n    offset : tuple of int, or None\n        The coordinates of the center of the structuring element.\n\n    Returns\n    -------\n    c_connectivity : array of bool\n        The structuring element corresponding to the input `connectivity`.\n    offset : array of int\n        The offset corresponding to the center of the structuring element.\n\n    Raises\n    ------\n    ValueError:\n        If the image dimension and the connectivity or offset dimensions don't\n        match.\n    \"\"\"",
        "\"\"\"Compute offsets to a samples neighbors if the image would be raveled.\n\n    Parameters\n    ----------\n    image_shape : tuple\n        The shape of the image for which the offsets are computed.\n    structure : ndarray\n        A structuring element determining the neighborhood expressed as an\n        n-D array of 1's and 0's.\n    center : sequence\n        Tuple of indices specifying the center of `selem`.\n\n    Returns\n    -------\n    offsets : ndarray\n        Linear offsets to a samples neighbors in the raveled image, sorted by\n        their Euclidean distance from the center.\n\n    Examples\n    --------\n    >>> _offsets_to_raveled_neighbors((4, 5), np.ones((4, 3)), (1, 1))\n    array([-5, -1,  1,  5, -6, -4,  4,  6, 10,  9, 11])\n    \"\"\""
    ],
    "functions": [
        "_validate_connectivity",
        "_offsets_to_raveled_neighbors"
    ],
    "classes": []
}