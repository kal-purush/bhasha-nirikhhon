{
    "identifiers": [
        "JsonPointer",
        "describe",
        "it",
        "JsonPointer",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "key",
        "expect",
        "result",
        "key",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "expect",
        "result",
        "it",
        "JsonPointer",
        "subObjectWithEvaluatedProperty",
        "expect",
        "result"
    ],
    "literals": [
        "'./jsonpointer.functions'",
        "'abc'",
        "'JsonPointer.evaluateExpression'",
        "'should return true when subObject and corresponding key is given'",
        "'abc'",
        "'name==\\'abc\\''",
        "'should not fail when subObject is null'",
        "'name==\\'abc\\''",
        "'should not fail when subObject is undefined'",
        "'name==\\'abc\\''",
        "'should return false when key is undefined'",
        "'should return false when key is null'",
        "'should return false when key corrupted'",
        "'name=\\'abc\\''",
        "'should return the same key when key corrupted'",
        "'name=\\'abc\\''",
        "'should return the first part of key when key contains equals'",
        "'name==\\'abc\\''",
        "'name'",
        "'should not return the first part of key when key contains not equals'",
        "'name!=\\'abc\\''",
        "'name'",
        "'should return false when key equals does not correspond to the subObject property'",
        "'somethingElse==\\'abc\\''",
        "'should return true when key not equals does not correspond to the subObject property'",
        "'somethingElse!=\\'abc\\''",
        "'should return the first part of key when key does not equal to the property value'",
        "'name!=\\'cba\\''",
        "'name'",
        "'should return the first part of key when key does equal to the property value'",
        "'name==\\'abc\\''",
        "'name'",
        "'should return false when key is different'",
        "'eman==\\'abc\\''",
        "'should return true when key is without quotes'",
        "'abc'",
        "'name==abc'",
        "'should return false when key has different value'",
        "'name==\\'cba\\''"
    ],
    "variables": [
        "subObjectWithEvaluatedProperty",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "key",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}