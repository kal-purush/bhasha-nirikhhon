{
    "identifiers": [
        "typing",
        "Any",
        "Dict",
        "Mapping",
        "Optional",
        "Tuple",
        "Union",
        "numpy",
        "np",
        "cirq",
        "protocols",
        "value",
        "cirq",
        "ops",
        "raw_types",
        "value",
        "LinearDict",
        "raw_types",
        "Gate",
        "terms",
        "Mapping",
        "raw_types",
        "Gate",
        "value",
        "Scalar",
        "terms",
        "validator",
        "_is_compatible",
        "Optional",
        "next",
        "iter",
        "any_gate",
        "num_qubits",
        "gate",
        "raw_types",
        "Gate",
        "num_qubits",
        "num_qubits",
        "gate",
        "num_qubits",
        "other",
        "Union",
        "raw_types",
        "Gate",
        "isinstance",
        "other",
        "LinearCombinationOfGates",
        "other",
        "wrap_in_linear_combination",
        "__add__",
        "other",
        "other",
        "Union",
        "raw_types",
        "Gate",
        "isinstance",
        "other",
        "LinearCombinationOfGates",
        "other",
        "wrap_in_linear_combination",
        "__iadd__",
        "other",
        "other",
        "Union",
        "raw_types",
        "Gate",
        "isinstance",
        "other",
        "LinearCombinationOfGates",
        "other",
        "wrap_in_linear_combination",
        "__sub__",
        "other",
        "other",
        "Union",
        "raw_types",
        "Gate",
        "isinstance",
        "other",
        "LinearCombinationOfGates",
        "other",
        "wrap_in_linear_combination",
        "__isub__",
        "other",
        "np",
        "ndarray",
        "num_qubits",
        "num_qubits",
        "ValueError",
        "num_qubits",
        "np",
        "zeros",
        "num_dim",
        "num_dim",
        "dtype",
        "np",
        "complex128",
        "gate",
        "coefficient",
        "items",
        "result",
        "protocols",
        "unitary",
        "gate",
        "coefficient",
        "result",
        "value",
        "LinearDict",
        "value",
        "LinearDict",
        "gate",
        "coefficient",
        "items",
        "result",
        "protocols",
        "pauli_expansion",
        "gate",
        "coefficient",
        "result"
    ],
    "literals": [
        "'LinearCombinationOfGates'",
        "'LinearCombinationOfGates'",
        "'LinearCombinationOfGates'",
        "'LinearCombinationOfGates'",
        "'LinearCombinationOfGates'",
        "'LinearCombinationOfGates'",
        "'LinearCombinationOfGates'",
        "'LinearCombinationOfGates'",
        "'Unknown number of qubits'"
    ],
    "variables": [
        "any_gate",
        "other",
        "other",
        "other",
        "other",
        "num_qubits",
        "num_dim",
        "result",
        "result"
    ],
    "comments": [
        "Copyright 2019 The Cirq Developers",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "https://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "type: value.LinearDict[str]"
    ],
    "docstrings": [
        "\"\"\"Represents linear operator defined by a linear combination of gates.\n\n    Suppose G1, G2, ..., Gn are gates and b1, b2, ..., bn are complex\n    numbers. Then\n\n        LinearCombinationOfGates({G1: b1, G2: b2, ..., Gn: bn})\n\n    represents the linear operator\n\n        A = b1 G1 + b2 G2 + ... + bn * Gn\n\n    Note that A may not be unitary or even normal.\n\n    Rather than creating LinearCombinationOfGates instance explicitly, one may\n    use overloaded arithmetic operators. For example,\n\n        cirq.LinearCombinationOfGates({cirq.X: 2, cirq.Z: -2})\n\n    is equivalent to\n\n        2 * cirq.X - 2 * cirq.Z\n    \"\"\"",
        "\"\"\"Initializes linear combination from a collection of terms.\n\n        Args:\n            terms: Mapping of gates to coefficients in the linear combination\n                being initialized.\n        \"\"\"",
        "\"\"\"Returns number of qubits in the domain if known, None if unknown.\"\"\"",
        "\"\"\"Reconstructs matrix of self using unitaries of underlying gates.\n\n        Raises:\n            TypeError: if any of the gates in self does not provide a unitary.\n        \"\"\""
    ],
    "functions": [
        "num_qubits",
        "_is_compatible",
        "__add__",
        "__iadd__",
        "__sub__",
        "__isub__",
        "matrix",
        "_pauli_expansion_"
    ],
    "classes": [
        "LinearCombinationOfGates"
    ]
}