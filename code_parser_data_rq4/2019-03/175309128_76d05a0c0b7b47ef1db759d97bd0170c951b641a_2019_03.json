{
    "identifiers": [
        "random",
        "queue",
        "math",
        "matplotlib",
        "pyplot",
        "plt",
        "n",
        "p",
        "i",
        "n",
        "i",
        "n",
        "graph",
        "i",
        "j",
        "i",
        "n",
        "graph",
        "j",
        "random",
        "random",
        "p",
        "adj_set_i",
        "add",
        "j",
        "adj_set_j",
        "add",
        "i",
        "graph",
        "file",
        "open",
        "file",
        "f",
        "f",
        "readlines",
        "x",
        "rstrip",
        "x",
        "content",
        "len",
        "content",
        "elem",
        "elem",
        "fb_graph",
        "elem",
        "content",
        "elem",
        "split",
        "node",
        "connection",
        "fb_graph",
        "node",
        "add",
        "connection",
        "fb_graph",
        "connection",
        "add",
        "node",
        "fb_graph",
        "G",
        "i",
        "j",
        "queue",
        "visited",
        "add",
        "i",
        "j_candidate",
        "G",
        "i",
        "q",
        "put",
        "j_candidate",
        "visited",
        "add",
        "j_candidate",
        "q",
        "empty",
        "q",
        "get",
        "j_candidate",
        "j",
        "distances",
        "j_candidate",
        "j_candidate_neighbour",
        "G",
        "j_candidate",
        "j_candidate_neighbour",
        "visited",
        "visited",
        "add",
        "j_candidate_neighbour",
        "q",
        "put",
        "j_candidate_neighbour",
        "distances",
        "j_candidate",
        "G",
        "g_size",
        "iterations",
        "filename",
        "open",
        "filename",
        "file",
        "t",
        "iterations",
        "random",
        "randint",
        "g_size",
        "random",
        "randint",
        "g_size",
        "i",
        "j",
        "random",
        "randint",
        "g_size",
        "shortest_path",
        "G",
        "i",
        "j",
        "math",
        "isinf",
        "length",
        "sum_len",
        "iterations",
        "sum_len",
        "length",
        "file",
        "write",
        "format",
        "i",
        "i",
        "j",
        "j",
        "length",
        "length",
        "sum_len",
        "iterations",
        "p_init",
        "iterations",
        "p_arr",
        "p_increment",
        "path_arr",
        "file",
        "n",
        "i",
        "iterations",
        "p_arr",
        "append",
        "p_init",
        "create_graph",
        "n",
        "p_init",
        "avg_shortest_path",
        "G",
        "n",
        "n",
        "math",
        "isinf",
        "avg_short_path",
        "create_graph",
        "n",
        "p_init",
        "avg_shortest_path",
        "G",
        "n",
        "n",
        "path_arr",
        "append",
        "avg_short_path",
        "file",
        "write",
        "format",
        "p",
        "p_init",
        "avg_shortest_path",
        "avg_short_path",
        "p_init",
        "p_increment",
        "n",
        "open",
        "file",
        "varying_p_iterations",
        "p_init",
        "p_init",
        "iterations",
        "iterations",
        "p_arr",
        "p_arr",
        "p_increment",
        "p_increment",
        "path_arr",
        "path_arr",
        "file",
        "file",
        "n",
        "n",
        "varying_p_iterations",
        "p_init",
        "p_init",
        "iterations",
        "iterations",
        "p_arr",
        "p_arr",
        "p_increment",
        "p_increment",
        "path_arr",
        "path_arr",
        "file",
        "file",
        "n",
        "n",
        "plt",
        "plot",
        "p_arr",
        "path_arr",
        "plt",
        "savefig",
        "create_graph",
        "avg_shortest_path",
        "G",
        "varying_p",
        "n",
        "create_fb_graph",
        "avg_shortest_path",
        "fb_graph",
        "create_graph",
        "avg_shortest_path",
        "FB"
    ],
    "literals": [
        "'\\n'",
        "'length'",
        "' '",
        "\"inf\"",
        "'w'",
        "\"({i}, {j}, {length})\\n\"",
        "'varying_p.txt'",
        "'disconnected, recreating'",
        "'varying_p.txt'",
        "\"({p}, {avg_shortest_path})\\n\"",
        "'tracing_p.txt'",
        "'w'",
        "'tracing_p.png'",
        "'__main__'",
        "'avg_shortest_path.txt'",
        "\"/Users/joanneloh/Documents/Networks and Markets/facebook_combined.txt\"",
        "'fb_shortest_path.txt'",
        "'fb_data.txt'"
    ],
    "variables": [
        "graph",
        "graph",
        "i",
        "adj_set_i",
        "adj_set_j",
        "content",
        "content",
        "fb_graph",
        "fb_graph",
        "elem",
        "node",
        "connection",
        "node",
        "connection",
        "q",
        "visited",
        "distances",
        "distances",
        "j_candidate",
        "j_candidate",
        "distances",
        "j_candidate_neighbour",
        "sum_len",
        "i",
        "j",
        "j",
        "length",
        "G",
        "avg_short_path",
        "G",
        "avg_short_path",
        "p_init",
        "p_increment",
        "iterations",
        "p_arr",
        "path_arr",
        "p_init",
        "p_increment",
        "iterations",
        "p_arr",
        "path_arr",
        "G",
        "fb_graph",
        "FB"
    ],
    "comments": [
        "initialize adj set",
        "iterate over all other nodes, making sure each (i, j) pair i only compared once",
        "with probability p assign an edge",
        "are guaranteed to visit",
        "generate a pair",
        "in case they are the same",
        "short circuit for efficiency",
        "in case it is disconnected"
    ],
    "docstrings": [],
    "functions": [
        "create_graph",
        "create_fb_graph",
        "shortest_path",
        "avg_shortest_path",
        "varying_p_iterations",
        "varying_p"
    ],
    "classes": []
}