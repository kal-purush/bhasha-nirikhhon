{
    "identifiers": [
        "os",
        "json",
        "pytest",
        "boto3",
        "format",
        "os",
        "environ",
        "get",
        "name",
        "payload",
        "boto3",
        "client",
        "region_name",
        "lambda_client",
        "invoke",
        "FunctionName",
        "format",
        "SERVICE_PREFIX",
        "name",
        "InvocationType",
        "Payload",
        "payload",
        "pytest",
        "mark",
        "parametrize",
        "input",
        "invoke",
        "json",
        "dumps",
        "input",
        "response",
        "json",
        "loads",
        "response",
        "read",
        "content",
        "json",
        "loads",
        "content",
        "body",
        "input",
        "pytest",
        "mark",
        "parametrize",
        "input",
        "invoke",
        "json",
        "dumps",
        "input",
        "response",
        "json",
        "loads",
        "response",
        "read",
        "content",
        "json",
        "loads",
        "content",
        "body",
        "input"
    ],
    "literals": [
        "'epsagon-acceptance-{}-dev'",
        "'TRAVIS_BUILD_NUMBER'",
        "''",
        "'lambda'",
        "'us-east-1'",
        "'{}-{}'",
        "'RequestResponse'",
        "\"input\"",
        "''",
        "'{afwe'",
        "'test'",
        "'test'",
        "'test'",
        "'test'",
        "'more'",
        "'3'",
        "'sanity'",
        "'StatusCode'",
        "'Payload'",
        "'statusCode'",
        "'body'",
        "'input'",
        "\"input\"",
        "''",
        "'{afwe'",
        "'test'",
        "'test'",
        "'test'",
        "'test'",
        "'more'",
        "'3'",
        "'labels'",
        "'StatusCode'",
        "'Payload'",
        "'statusCode'",
        "'body'",
        "'input'"
    ],
    "variables": [
        "SERVICE_PREFIX",
        "lambda_client",
        "response",
        "content",
        "body",
        "response",
        "content",
        "body"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    invokes a lambda\n    :param name: the name of the lambda to invoke\n    :param payload: the payload\n    :return: the response\n    \"\"\""
    ],
    "functions": [
        "invoke",
        "test_sanity_valid_input",
        "test_labels"
    ],
    "classes": [
        "TestLambdaWrapper"
    ]
}