{
    "identifiers": [
        "IO",
        "Xunit",
        "Dicom",
        "Collection",
        "Fact",
        "DicomDataset",
        "ds",
        "Add",
        "DicomTag",
        "StudyInstanceUID",
        "validUid",
        "Assert",
        "Equal",
        "validUid",
        "ds",
        "GetSingleValue",
        "DicomTag",
        "StudyInstanceUID",
        "Fact",
        "DicomDataset",
        "Assert",
        "Throws",
        "DicomValidationException",
        "ds",
        "Add",
        "DicomTag",
        "StudyInstanceUID",
        "invalidUid",
        "ds",
        "AutoValidate",
        "ds",
        "Add",
        "DicomTag",
        "StudyInstanceUID",
        "invalidUid",
        "Assert",
        "Equal",
        "invalidUid",
        "ds",
        "GetSingleValue",
        "DicomTag",
        "StudyInstanceUID",
        "Path",
        "GetTempFileName",
        "ds",
        "Add",
        "DicomTag",
        "SOPClassUID",
        "DicomUID",
        "SecondaryCaptureImageStorage",
        "ds",
        "Add",
        "DicomTag",
        "SOPInstanceUID",
        "DicomUIDGenerator",
        "GenerateNew",
        "UID",
        "DicomFile",
        "ds",
        "Save",
        "tmpFile",
        "DicomFile",
        "Open",
        "tmpFile",
        "Assert",
        "Equal",
        "invalidUid",
        "dsFile",
        "Dataset",
        "GetSingleValue",
        "DicomTag",
        "StudyInstanceUID",
        "Assert",
        "Throws",
        "DicomValidationException",
        "dsFile",
        "Dataset",
        "Validate",
        "Fact",
        "DicomDataset",
        "ds",
        "Add",
        "DicomTag",
        "StudyInstanceUID",
        "validUid",
        "Assert",
        "Equal",
        "validUid",
        "ds",
        "GetSingleValue",
        "DicomTag",
        "StudyInstanceUID",
        "validUid",
        "validUid",
        "Assert",
        "ThrowsAny",
        "DicomValidationException",
        "ds",
        "AddOrUpdate",
        "DicomTag",
        "StudyInstanceUID",
        "tooLongUid",
        "Assert",
        "Contains",
        "ex",
        "Message",
        "validUid",
        "Assert",
        "ThrowsAny",
        "DicomValidationException",
        "ds",
        "AddOrUpdate",
        "DicomTag",
        "SeriesInstanceUID",
        "leadingZeroUid",
        "Assert",
        "Contains",
        "ex2",
        "Message",
        "Fact",
        "DicomDataset",
        "ds",
        "Add",
        "DicomTag",
        "ReferencedFileID",
        "validAETitle",
        "Assert",
        "Throws",
        "DicomValidationException",
        "ds",
        "AddOrUpdate",
        "DicomTag",
        "ReferencedFileID",
        "Assert",
        "Throws",
        "DicomValidationException",
        "ds",
        "AddOrUpdate",
        "DicomTag",
        "ReferencedFileID",
        "Assert",
        "Throws",
        "DicomValidationException",
        "ds",
        "AddOrUpdate",
        "DicomTag",
        "ReferencedFileID"
    ],
    "literals": [
        "\"General\"",
        "\"1.2.315.6666.0.8965.19187632.1\"",
        "\"1.2.315.6666.008965..19187632.1\"",
        "\"1.2.315.6666.0.0.0.8965.19187632.1\"",
        "\".\"",
        "\"length\"",
        "\".03\"",
        "\"leading zero\"",
        "\"HUGO1\"",
        "\"Hugo1\"",
        "\"HUGO-1\"",
        "\"HUGOHUGOHUGOHUGO1\""
    ],
    "variables": [
        "ds",
        "validUid",
        "ds",
        "invalidUid",
        "tmpFile",
        "dsFile",
        "ds",
        "validUid",
        "tooLongUid",
        "ex",
        "leadingZeroUid",
        "ex2",
        "ds",
        "validAETitle"
    ],
    "comments": [
        "Copyright (c) 2012-2018 fo-dicom contributors.",
        "Licensed under the Microsoft Public License (MS-PL).",
        "trying to add this invalidUid should throw exception",
        "if AutoValidate is turned off, the invalidUid should be able to be added",
        "save this invalid dicomdataset",
        "reading of this invalid dicomdataset should be possible",
        "but the validation should still work"
    ],
    "docstrings": [],
    "functions": [
        "DicomValidation_AddValidData",
        "DicomValidation_AddInvalidData",
        "DicomValidation_ValidateUID",
        "DicomValidation_ValidateCodeString"
    ],
    "classes": [
        "DicomValidationTest"
    ]
}