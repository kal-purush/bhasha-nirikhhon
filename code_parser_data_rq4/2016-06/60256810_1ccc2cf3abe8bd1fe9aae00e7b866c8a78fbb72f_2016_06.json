{
    "identifiers": [
        "absolute_import",
        "print_function",
        "os",
        "os",
        "path",
        "os_path",
        "threading",
        "lmdb",
        "biggraphite",
        "accessor",
        "bg_accessor",
        "threading",
        "Lock",
        "accessor",
        "path",
        "threading",
        "Lock",
        "accessor",
        "threading",
        "Lock",
        "os_path",
        "join",
        "path",
        "__env",
        "os",
        "makedirs",
        "__path",
        "OSError",
        "lmdb",
        "open",
        "__path",
        "metasync",
        "writemap",
        "max_readers",
        "_MAX_READERS",
        "max_dbs",
        "max_spare_txns",
        "__env",
        "open_db",
        "__env",
        "__env",
        "close",
        "metadata",
        "__accessor",
        "create_metric",
        "metadata",
        "_cache",
        "metadata",
        "metric_name",
        "__env",
        "begin",
        "__metric_to_metadata_db",
        "write",
        "txn",
        "txn",
        "get",
        "metric_name",
        "metadata_str",
        "hit_count",
        "__json_cache_lock",
        "__json_cache",
        "get",
        "metadata_str",
        "metadata",
        "bg_accessor",
        "MetricMetadata",
        "from_json",
        "metadata_str",
        "__json_cache",
        "metadata",
        "metadata",
        "miss_count",
        "__accessor_lock",
        "__accessor",
        "get_metric",
        "metric_name",
        "_cache",
        "metadata",
        "metadata",
        "metadata",
        "metadata",
        "metadata",
        "as_json",
        "__env",
        "begin",
        "__metric_to_metadata_db",
        "write",
        "txn",
        "txn",
        "put",
        "metadata",
        "name",
        "metadata_json",
        "dupdata",
        "overwrite"
    ],
    "literals": [
        "\"biggraphite\"",
        "\"cache\"",
        "\"version0\"",
        "\"metric_to_meta\""
    ],
    "variables": [
        "__SINGLETONS",
        "__SINGLETONS_LOCK",
        "_MAX_READERS",
        "hit_count",
        "miss_count",
        "__accessor_lock",
        "__accessor",
        "__env",
        "__json_cache_lock",
        "__json_cache",
        "__metric_to_metadata_db",
        "__path",
        "__env",
        "__metric_to_metadata_db",
        "__env",
        "metadata_str",
        "metadata",
        "metadata",
        "metadata_str",
        "metadata",
        "metadata_json"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Copyright 2016 Criteo",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Maximum number of concurrent readers.",
        "Used to size a file that is mmapped in all readers. Cannot be raised while the DB is opened.",
        "According to LMDB's author, 128 readers is about 8KiB of RAM, 1024 is about 128kiB and even",
        "4096 is safe: https://twitter.com/armon/status/534867803426533376",
        "__json_cache associates unparsed json to metadata instances. The idea is that there are",
        "very few configs in use in a given cluster so the few same strings will show up over",
        "and over.",
        "Directory already exists",
        "Only one sync per transaction, system crash can undo a transaction.",
        "Use mmap()",
        "Max number of concurrent readers, see _MAX_READERS for details",
        "How many DBs we may create (until we increase version prefix).",
        "A cache of read-only transactions, should match max number of threads.",
        "Only transactions that are actually used concurrently allocate memory,",
        "so setting a high number doesn't cost much even if thread count is low.",
        "on disk cache hit",
        "on disk cache miss",
        "Do not cache absent metrics, they will probably soon be created."
    ],
    "docstrings": [
        "\"\"\"Implements the DiskCache for metrics metadata.\n\nThe DiskCache is implemented with lmdb, an on-disk file DB that can be accessed\nby multiple processes. Keys are metric names, values are json-serialised metadata.\nIn deployment the graphite storage dir is used as a rendez-vous point where all processes\n(carbon, graphite, ...) can find the metadata.\n\nTODO(b.arnould): Currently that cache never expires, as we don't allow for deletion.\n\"\"\"",
        "\"\"\"Base class for all exceptions from this module.\"\"\"",
        "\"\"\"Callee did not follow requirements on the arguments.\"\"\"",
        "\"\"\"A metadata cache that can be shared between processes trusting each other.\n\n    open() and close() are the only thread unsafe methods.\n    See module-level comments for the design.\n    \"\"\"",
        "\"\"\"Create a new DiskCache.\"\"\"",
        "\"\"\"Allocate ressources used by the cache.\n\n        Safe to call again after close() returned.\n        \"\"\"",
        "\"\"\"Free resources allocated by open().\n\n        Safe to call multiple time.\n        \"\"\"",
        "\"\"\"Create a metric definition from a MetricMetadata.\n\n        Args:\n          metadata: The metric definition.\n        \"\"\"",
        "\"\"\"Return a MetricMetadata for this metric_name, None if no such metric.\"\"\"",
        "\"\"\"If metadata add it to the cache.\"\"\""
    ],
    "functions": [
        "open",
        "close",
        "create_metric",
        "get_metric",
        "_cache"
    ],
    "classes": [
        "InvalidArgumentError",
        "DiskCache"
    ]
}