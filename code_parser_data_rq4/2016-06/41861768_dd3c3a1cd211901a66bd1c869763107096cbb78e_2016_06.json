{
    "identifiers": [
        "Position",
        "line",
        "character",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Range",
        "create",
        "start",
        "end",
        "create",
        "startLine",
        "startCharacter",
        "endLine",
        "endCharacter",
        "one",
        "two",
        "three",
        "four",
        "Is",
        "one",
        "Is",
        "two",
        "Is",
        "three",
        "Is",
        "four",
        "Position",
        "one",
        "two",
        "Position",
        "three",
        "four",
        "Position",
        "one",
        "Position",
        "two",
        "one",
        "two",
        "one",
        "two",
        "three",
        "four",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Position",
        "candidate",
        "Position",
        "candidate",
        "Location",
        "uri",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Range",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "DiagnosticSeverity",
        "Diagnostic",
        "message",
        "severity",
        "code",
        "source",
        "Is",
        "severity",
        "result",
        "severity",
        "Is",
        "code",
        "result",
        "code",
        "Is",
        "source",
        "result",
        "source",
        "result",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Range",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Command",
        "title",
        "command",
        "args",
        "Is",
        "args",
        "args",
        "result",
        "args",
        "result",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "TextEdit",
        "newText",
        "position",
        "newText",
        "position",
        "position",
        "uri",
        "position",
        "newText",
        "newText",
        "uri",
        "uri",
        "edits",
        "edits",
        "position",
        "newText",
        "TextEdit",
        "position",
        "newText",
        "newText",
        "TextEdit",
        "newText",
        "TextEdit",
        "uri",
        "result",
        "uri",
        "edits",
        "result",
        "TextEditChangeImpl",
        "edits",
        "uri",
        "result",
        "result",
        "TextDocumentIdentifier",
        "uri",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "VersionedTextDocumentIdentifier",
        "uri",
        "version",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "TextDocumentItem",
        "uri",
        "languageId",
        "version",
        "text",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "CompletionItemKind",
        "CompletionItem",
        "label",
        "CompletionList",
        "items",
        "isIncomplete",
        "items",
        "items",
        "isIncomplete",
        "ParameterInformation",
        "label",
        "documentation",
        "documentation",
        "SignatureInformation",
        "label",
        "documentation",
        "parameters",
        "Is",
        "documentation",
        "result",
        "documentation",
        "Is",
        "parameters",
        "result",
        "parameters",
        "result",
        "result",
        "DocumentHighlightKind",
        "DocumentHighlight",
        "kind",
        "Is",
        "kind",
        "result",
        "kind",
        "result",
        "SymbolKind",
        "SymbolInformation",
        "name",
        "kind",
        "uri",
        "containerName",
        "containerName",
        "result",
        "containerName",
        "result",
        "CodeActionContext",
        "diagnostics",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Diagnostic",
        "CodeLens",
        "data",
        "Is",
        "data",
        "result",
        "data",
        "result",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Range",
        "candidate",
        "Is",
        "candidate",
        "Command",
        "candidate",
        "key",
        "FormattingOptions",
        "tabSize",
        "insertSpaces",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "offset",
        "position",
        "TextDocument",
        "uri",
        "languageId",
        "version",
        "content",
        "FullTextDocument",
        "uri",
        "languageId",
        "version",
        "content",
        "value",
        "value",
        "value",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "Is",
        "candidate",
        "uri",
        "languageId",
        "version",
        "content",
        "uri",
        "languageId",
        "version",
        "content",
        "version",
        "version",
        "i",
        "text",
        "i",
        "isLineStart",
        "lineOffsets",
        "i",
        "isLineStart",
        "text",
        "i",
        "isLineStart",
        "ch",
        "ch",
        "ch",
        "i",
        "text",
        "text",
        "i",
        "i",
        "isLineStart",
        "text",
        "lineOffsets",
        "text",
        "lineOffsets",
        "offset",
        "offset",
        "offset",
        "lineOffsets",
        "high",
        "Position",
        "offset",
        "low",
        "high",
        "low",
        "high",
        "lineOffsets",
        "mid",
        "offset",
        "high",
        "mid",
        "low",
        "mid",
        "low",
        "Position",
        "line",
        "offset",
        "lineOffsets",
        "line",
        "position",
        "position",
        "lineOffsets",
        "position",
        "lineOffsets",
        "position",
        "position",
        "lineOffsets",
        "lineOffsets",
        "position",
        "lineOffset",
        "position",
        "nextLineOffset",
        "lineOffset",
        "Is",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "toString",
        "value",
        "value",
        "value",
        "toString",
        "value",
        "value",
        "value",
        "toString",
        "value",
        "value",
        "check",
        "value",
        "value",
        "value",
        "value",
        "check"
    ],
    "literals": [
        "'use strict'",
        "Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "''",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'\\r'",
        "'\\n'",
        "'\\r'",
        "'\\n'",
        "'undefined'",
        "'undefined'",
        "string",
        "'[object String]'",
        "'[object Number]'",
        "'[object Function]'"
    ],
    "variables": [
        "candidate",
        "candidate",
        "candidate",
        "result",
        "candidate",
        "result",
        "candidate",
        "result",
        "edits",
        "candidate",
        "candidate",
        "candidate",
        "result",
        "result",
        "result",
        "candidate",
        "result",
        "candidate",
        "candidate",
        "candidate",
        "lineOffsets",
        "text",
        "isLineStart",
        "i",
        "ch",
        "lineOffsets",
        "low",
        "high",
        "mid",
        "line",
        "lineOffsets",
        "lineOffset",
        "nextLineOffset",
        "toString"
    ],
    "comments": [
        "--------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------",
        "creates: { [uri: string]: string; };",
        "deletes: string[];",
        "low is the least x for which the line offset is larger than the current offset",
        "or array.length if no line offset is larger than the current offset"
    ],
    "docstrings": [
        "* Position in a text document expressed as zero-based line and character offset.",
        "* Line position in a document (zero-based).",
        "* Character offset on a line in a document (zero-based).",
        "* The Position namespace provides helper functions to work with\n * [Position](#Position) literals.",
        "* Creates a new Position literal from the given line and character.\n\t * @param line The position's line.\n\t * @param character The position's character.",
        "* Checks whether the given liternal conforms to the [Position](#Position) interface.",
        "* A range in a text document expressed as (zero-based) start and end positions.",
        "* The range's start position",
        "* The range's end position",
        "* The Range namespace provides helper functions to work with\n * [Range](#Range) literals.",
        "* Create a new Range liternal.\n\t * @param start The range's start position.\n\t * @param end The range's end position.",
        "* Create a new Range liternal.\n\t * @param startLine The start line number.\n\t * @param startCharacter The start character.\n\t * @param endLine The end line number.\n\t * @param endCharacter The end character.",
        "* Checks whether the given literal conforms to the [Range](#Range) interface.",
        "* Represents a location inside a resource, such as a line\n * inside a text file.",
        "* The Location namespace provides helper functions to work with\n * [Location](#Location) literals.",
        "* Creates a Location literal.\n\t * @param uri The location's uri.\n\t * @param range The location's range.",
        "* Checks whether the given literal conforms to the [Location](#Location) interface.",
        "* The diagnostic's serverity.",
        "* Reports an error.",
        "* Reports a warning.",
        "* Reports an information.",
        "* Reports a hint.",
        "* Represents a diagnostic, such as a compiler error or warning. Diagnostic objects\n * are only valid in the scope of a resource.",
        "* The range at which the message applies",
        "* The diagnostic's severity. Can be omitted. If omitted it is up to the\n\t * client to interpret diagnostics as error, warning, info or hint.",
        "* The diagnostic's code. Can be omitted.",
        "* A human-readable string describing the source of this\n\t * diagnostic, e.g. 'typescript' or 'super lint'.",
        "* The diagnostic's message.",
        "* The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.",
        "* Creates a new Diagnostic literal.",
        "* Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.",
        "* Represents a reference to a command. Provides a title which\n * will be used to represent a command in the UI and, optionally,\n * an array of arguments which will be passed to the command handler\n * function when invoked.",
        "* Title of the command, like `save`.",
        "* The identifier of the actual command handler.",
        "* Arguments that the command handler should be\n\t * invoked with.",
        "* The Command namespace provides helper functions to work with\n * [Command](#Command) literals.",
        "* Creates a new Command literal.",
        "* Checks whether the given literal conforms to the [Command](#Command) interface.",
        "* A text edit applicable to a text document.",
        "* The range of the text document to be manipulated. To insert\n\t * text into a document create a range where start === end.",
        "* The string to be inserted. For delete operations use an\n\t * empty string.",
        "* The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.",
        "* Creates a replace text edit.\n\t * @param range The range of text to be replaced.\n\t * @param newText The new text.",
        "* Creates a insert text edit.\n\t * @param psotion The position to insert the text at.\n\t * @param newText The text to be inserted.",
        "* Creates a delete text edit.\n\t * @param range The range of text to be deleted.",
        "* A workspace edit represents changes to many resources managed\n * in the workspace.",
        "* Holds changes to existing resources.",
        "* A change to capture text edits for existing resources.",
        "* Gets all text edits for this change.\n\t *\n\t * @return An array of text edits.",
        "* Clears the edits for this change.",
        "* Insert the given text at the given position.\n\t *\n\t * @param position A position.\n\t * @param newText A string.",
        "* Replace the given range with given text for the given resource.\n\t *\n\t * @param range A range.\n\t * @param newText A string.",
        "* Delete the text at the given range.\n\t *\n\t * @param range A range.",
        "* A workspace change helps constructing changes to a workspace.",
        "* Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n\t * use to be returned from a workspace edit operation like rename.",
        "* Returns the [TextEditChange](#TextEditChange) to manage text edits\n\t * for resources.",
        "* A literal to identify a text document in the client.",
        "* The text document's uri.",
        "* The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.",
        "* Creates a new TextDocumentIdentifier literal.\n\t * @param uri The document's uri.",
        "* Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.",
        "* An identifier to denote a specific version of a text document.",
        "* The version number of this document.",
        "* The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.",
        "* Creates a new VersionedTextDocumentIdentifier literal.\n\t * @param uri The document's uri.\n\t * @param uri The document's text.",
        "* Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.",
        "* An item to transfer a text document from the client to the\n * server.",
        "* The text document's uri.",
        "* The text document's language identifier",
        "* The version number of this document (it will strictly increase after each\n\t * change, including undo/redo).",
        "* The content of the opened text document.",
        "* The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.",
        "* Creates a new TextDocumentItem literal.\n\t * @param uri The document's uri.\n\t * @param uri The document's language identifier.\n\t * @param uri The document's version number.\n\t * @param uri The document's text.",
        "* Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.",
        "* The kind of a completion entry.",
        "* A completion item represents a text snippet that is\n * proposed to complete text that is being typed.",
        "* The label of this completion item. By default\n\t * also the text that is inserted when selecting\n\t * this completion.",
        "* The kind of this completion item. Based of the kind\n\t * an icon is chosen by the editor.",
        "* A human-readable string with additional information\n\t * about this item, like type or symbol information.",
        "* A human-readable string that represents a doc-comment.",
        "* A string that shoud be used when comparing this item\n\t * with other items. When `falsy` the [label](#CompletionItem.label)\n\t * is used.",
        "* A string that should be used when filtering a set of\n\t * completion items. When `falsy` the [label](#CompletionItem.label)\n\t * is used.",
        "* A string that should be inserted a document when selecting\n\t * this completion. When `falsy` the [label](#CompletionItem.label)\n\t * is used.",
        "* An [edit](#TextEdit) which is applied to a document when selecting\n\t * this completion. When an edit is provided the value of\n\t * [insertText](#CompletionItem.insertText) is ignored.",
        "* An data entry field that is preserved on a completion item between\n\t * a [CompletionRequest](#CompletionRequest) and a [CompletionResolveRequest]\n\t * (#CompletionResolveRequest)",
        "* The CompletionItem namespace provides functions to deal with\n * completion items.",
        "* Create a completion item and seed it with a label.\n\t * @param label The completion item's label",
        "* Represents a collection of [completion items](#CompletionItem) to be presented\n * in the editor.",
        "* This list it not complete. Further typing should result in recomputing\n\t * this list.",
        "* The completion items.",
        "* The CompletionList namespace provides functions to deal with\n * completion lists.",
        "* Creates a new completion list.\n\t *\n\t * @param items The completion items.\n\t * @param isIncomplete The list is not complete.",
        "* The result of a hove request.",
        "* The hover's content",
        "* An optional range",
        "* Represents a parameter of a callable-signature. A parameter can\n * have a label and a doc-comment.",
        "* The label of this signature. Will be shown in\n\t * the UI.",
        "* The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.",
        "* The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.",
        "* Creates a new parameter information literal.\n\t *\n\t * @param label A label string.\n\t * @param documentation A doc string.",
        "* Represents the signature of something callable. A signature\n * can have a label, like a function-name, a doc-comment, and\n * a set of parameters.",
        "* The label of this signature. Will be shown in\n\t * the UI.",
        "* The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.",
        "* The parameters of this signature.",
        "* The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.",
        "* Signature help represents the signature of something\n * callable. There can be multiple signature but only one\n * active and only one active parameter.",
        "* One or more signatures.",
        "* The active signature.",
        "* The active parameter of the active signature.",
        "* The definition of a symbol represented as one or many [locations](#Location).\n * For most programming languages there is only one location at which a symbol is\n * defined.",
        "* Value-object that contains additional information when\n * requesting references.",
        "* Include the declaration of the current symbol.",
        "* A document highlight kind.",
        "* A textual occurrance.",
        "* Read-access of a symbol, like reading a variable.",
        "* Write-access of a symbol, like writing to a variable.",
        "* A document highlight is a range inside a text document which deserves\n * special attention. Usually a document highlight is visualized by changing\n * the background color of its range.",
        "* The range this highlight applies to.",
        "* The highlight kind, default is [text](#DocumentHighlightKind.Text).",
        "* DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.",
        "* Create a DocumentHighlight object.\n\t * @param range The range the highlight applies to.",
        "* A symbol kind.",
        "* Represents information about programming constructs like variables, classes,\n * interfaces etc.",
        "* The name of this symbol.",
        "* The kind of this symbol.",
        "* The location of this symbol.",
        "* The name of the symbol containing this symbol.",
        "* Creates a new symbol information literal.\n\t *\n\t * @param name The name of the symbol.\n\t * @param kind The kind of the symbol.\n\t * @param range The range of the location of the symbol.\n\t * @param uri The resource of the location of symbol, defaults to the current document.\n\t * @param containerName The name of the symbol containg the symbol.",
        "* Parameters for a [DocumentSymbolRequest](#DocumentSymbolRequest).",
        "* The text document.",
        "* The parameters of a [WorkspaceSymbolRequest](#WorkspaceSymbolRequest).",
        "* A non-empty query string",
        "* Contains additional diagnostic information about the context in which\n * a [code action](#CodeActionProvider.provideCodeActions) is run.",
        "* An array of diagnostics.",
        "* The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.",
        "* Creates a new CodeActionContext literal.",
        "* Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.",
        "* A code lens represents a [command](#Command) that should be shown along with\n * source text, like the number of references, a way to run tests, etc.\n *\n * A code lens is _unresolved_ when no command is associated to it. For performance\n * reasons the creation of a code lens and resolving should be done to two stages.",
        "* The range in which this code lens is valid. Should only span a single line.",
        "* The command this code lens represents.",
        "* An data entry field that is preserved on a code lens item between\n\t * a [CodeLensRequest](#CodeLensRequest) and a [CodeLensResolveRequest]\n\t * (#CodeLensResolveRequest)",
        "* The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.",
        "* Creates a new CodeLens literal.",
        "* Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.",
        "* Value-object describing what options formatting should use.",
        "* Size of a tab in spaces.",
        "* Prefer spaces over tabs.",
        "* Signature for further properties.",
        "* The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.",
        "* Creates a new FormattingOptions literal.",
        "* Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.",
        "* A simple text document. Not to be implemenented.",
        "* The associated URI for this document. Most documents have the __file__-scheme, indicating that they\n\t * represent files on disk. However, some documents may have other schemes indicating that they are not\n\t * available on disk.\n\t *\n\t * @readonly",
        "* The identifier of the language associated with this document.\n\t *\n\t * @readonly",
        "* The version number of this document (it will strictly increase after each\n\t * change, including undo/redo).\n\t *\n\t * @readonly",
        "* Get the text of this document.\n\t *\n\t * @return The text of this document.",
        "* Converts a zero-based offset to a position.\n     *\n     * @param offset A zero-based offset.\n     * @return A valid [position](#Position).",
        "* Converts the position to a zero-based offset.\n     *\n     * The position will be [adjusted](#TextDocument.validatePosition).\n     *\n     * @param position A position.\n     * @return A valid zero-based offset.",
        "* The number of lines in this document.\n     *\n     * @readonly",
        "* Creates a new ITextDocument literal from the given uri and content.\n\t * @param uri The document's uri.\n\t * @param languageId  The document's language Id.\n\t * @param content The document's content.",
        "* Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.",
        "* Event to signal changes to a simple text document.",
        "* The document that has changed.",
        "* An event describing a change to a text document. If range and rangeLength are omitted\n * the new text is considered to be the full content of the document.",
        "* The range of the document that changed.",
        "* The length of the range that got replaced.",
        "* The new text of the document."
    ],
    "functions": [
        "create",
        "create",
        "create",
        "create",
        "create",
        "replace",
        "insert",
        "edit",
        "getTextEditChange",
        "insert",
        "replace",
        "all",
        "clear",
        "create",
        "create",
        "create",
        "create",
        "create",
        "create",
        "create",
        "create",
        "create",
        "create",
        "create",
        "create",
        "create",
        "uri",
        "languageId",
        "version",
        "getText",
        "update",
        "getLineOffsets",
        "positionAt",
        "offsetAt",
        "lineCount",
        "defined",
        "number",
        "func",
        "typedArray"
    ],
    "classes": [
        "WorkspaceChange",
        "TextEditChangeImpl",
        "FullTextDocument"
    ]
}