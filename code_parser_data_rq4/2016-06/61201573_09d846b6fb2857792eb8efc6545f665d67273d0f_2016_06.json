{
    "identifiers": [
        "logging",
        "pika",
        "time",
        "logging",
        "getLogger",
        "callback",
        "url",
        "port",
        "credentials",
        "exchange",
        "exchange_type",
        "queue",
        "routing_keys",
        "timeout",
        "callback",
        "url",
        "port",
        "credentials",
        "exchange",
        "exchange_type",
        "queue",
        "routing_keys",
        "timeout",
        "LOGGER",
        "info",
        "url",
        "pika",
        "SelectConnection",
        "pika",
        "ConnectionParameters",
        "credentials",
        "credentials",
        "host",
        "url",
        "port",
        "port",
        "on_connection_open",
        "stop_ioloop_on_close",
        "_",
        "LOGGER",
        "info",
        "add_on_connection_close_callback",
        "open_channel",
        "LOGGER",
        "info",
        "connection",
        "add_on_close_callback",
        "on_connection_closed",
        "connection",
        "reply_code",
        "reply_text",
        "closing",
        "connection",
        "ioloop",
        "stop",
        "LOGGER",
        "warning",
        "reply_code",
        "reply_text",
        "connection",
        "add_timeout",
        "reconnect",
        "connection",
        "ioloop",
        "stop",
        "closing",
        "connect",
        "connection",
        "ioloop",
        "start",
        "LOGGER",
        "info",
        "connection",
        "channel",
        "on_open_callback",
        "on_channel_open",
        "channel",
        "LOGGER",
        "info",
        "channel",
        "add_on_channel_close_callback",
        "setup_exchange",
        "exchange",
        "LOGGER",
        "info",
        "channel",
        "add_on_close_callback",
        "on_channel_closed",
        "channel",
        "reply_code",
        "reply_text",
        "LOGGER",
        "warning",
        "channel",
        "reply_code",
        "reply_text",
        "connection",
        "close",
        "exchange_name",
        "LOGGER",
        "info",
        "channel",
        "exchange_declare",
        "on_exchange_declareok",
        "exchange_name",
        "exchange_type",
        "durable",
        "_",
        "LOGGER",
        "info",
        "queue",
        "setup_queue",
        "queue",
        "queue_name",
        "channel",
        "queue_declare",
        "on_queue_declareok",
        "queue",
        "queue",
        "get",
        "queue",
        "get",
        "queue",
        "get",
        "queue",
        "get",
        "queue",
        "get",
        "queue",
        "get",
        "_",
        "len",
        "routing_keys",
        "routing_key",
        "routing_keys",
        "LOGGER",
        "info",
        "exchange",
        "queue",
        "routing_key",
        "channel",
        "queue_bind",
        "on_bindok",
        "queue",
        "exchange",
        "routing_key",
        "_",
        "binding_left",
        "LOGGER",
        "info",
        "len",
        "routing_keys",
        "binding_left",
        "len",
        "routing_keys",
        "binding_left",
        "start_consuming",
        "LOGGER",
        "info",
        "add_on_cancel_callback",
        "channel",
        "basic_consume",
        "on_message",
        "queue",
        "LOGGER",
        "info",
        "channel",
        "add_on_cancel_callback",
        "on_consumer_cancelled",
        "_",
        "LOGGER",
        "info",
        "channel",
        "channel",
        "close",
        "channel",
        "basic_deliver",
        "properties",
        "body",
        "LOGGER",
        "info",
        "basic_deliver",
        "delivery_tag",
        "properties",
        "app_id",
        "callback",
        "channel",
        "basic_deliver",
        "properties",
        "body",
        "LOGGER",
        "info",
        "basic_deliver",
        "delivery_tag",
        "channel",
        "basic_ack",
        "delivery_tag",
        "basic_deliver",
        "delivery_tag",
        "LOGGER",
        "info",
        "basic_deliver",
        "delivery_tag",
        "time",
        "sleep",
        "timeout",
        "channel",
        "basic_nack",
        "delivery_tag",
        "basic_deliver",
        "delivery_tag",
        "channel",
        "LOGGER",
        "info",
        "channel",
        "basic_cancel",
        "on_cancelok",
        "consumer_tag",
        "_",
        "LOGGER",
        "info",
        "close_channel",
        "LOGGER",
        "info",
        "channel",
        "close",
        "connect",
        "connection",
        "ioloop",
        "start",
        "LOGGER",
        "info",
        "stop_consuming",
        "connection",
        "ioloop",
        "start",
        "LOGGER",
        "info",
        "LOGGER",
        "info",
        "connection",
        "close"
    ],
    "literals": [
        "''",
        "'fanout'",
        "'Connecting to %s'",
        "'Connection opened'",
        "'Adding connection close callback'",
        "'Connection closed, reopening in 5 seconds: (%s) %s'",
        "'Creating a new channel'",
        "'Channel opened'",
        "'Adding channel close callback'",
        "'Channel %i was closed: (%s) %s'",
        "'Exchange declared'",
        "'Declaring queue %s'",
        "'name'",
        "'name'",
        "'passive'",
        "'durable'",
        "'exclusive'",
        "'auto_delete'",
        "'nowait'",
        "'arguments'",
        "'Binding %s to %s with %s'",
        "'name'",
        "'name'",
        "'Queue %d of %d bound'",
        "'Issuing consumer related commands'",
        "'name'",
        "'Adding consumer cancellation callback'",
        "'Consumer was cancelled remotely, shutting down'",
        "'Received message # %s from %s'",
        "'Acknowledging message %s'",
        "'NACKing message %s and sleeping'",
        "'Sending Basic.Cancel command to RabbitMQ'",
        "'Consumer cancellation acknowledged'",
        "'Closing the channel'",
        "'Stoping...'",
        "'Stopped'",
        "'Closing connection'"
    ],
    "variables": [
        "LOGGER",
        "connection",
        "channel",
        "closing",
        "consumer_tag",
        "callback",
        "url",
        "port",
        "credentials",
        "exchange",
        "exchange_type",
        "queue",
        "routing_keys",
        "timeout",
        "binding_left",
        "channel",
        "connection",
        "channel",
        "binding_left",
        "consumer_tag",
        "connection",
        "closing"
    ],
    "comments": [
        "create a new connection",
        "There is now a new connection"
    ],
    "docstrings": [
        "\"\"\"RabbitMQ consumer that will handle connection drop due to timeout\n    or whatever reason, push these occurrence to metrics\"\"\"",
        "\"\"\"\n        Create a new instance of the consumer\n\n        :param function callback: The function use to handle the messages\n        it should return the result as a boolean value.\n        :param str url: The RabbitMQ url to connect to\n        :param integer port: The RabbitMQ port to connect through\n        :param pika.PlainCredentials credentials: The AMQP credentials\n        :param str exchange: The name of the exchange to consume\n        :param str exchange_type: The type of the exchange to consume\n        :param dict queue: Dict representing the queue\n        :param list routing_keys: the routing keys to bind the queue to\n        with the name of the queue, and the list of routing key to bind\n        :param int timeout: The time in seconds to wait between two\n        nack\n        \"\"\"",
        "\"\"\"This method connects to RabbitMQ, returning the connection.\n        When the connection is established, the on_connection_open method\n        will be invoked by pika\n\n        :rtype: pika.SelectConnection\"\"\"",
        "\"\"\"This method is called by pika once the connection to\n        RabbitMQ has been established, It passes the handle to the\n        connection object, but we do not use it\"\"\"",
        "\"\"\"This method is called whenever the connection is closed\n        unexpectedly.\"\"\"",
        "\"\"\"This method is invoked by pika when the connection to RabbitMQ\n        is closed unexpectedly. We will reconnect in this case\n\n        :param pika.connection.Connection connection: The closed connection obj\n        :param int reply_code: The server provided reply_code if given\n        :param str reply_text: The server provided reply_text if given\n        \"\"\"",
        "\"\"\"Will be invoked by the IOLopp timer if the connection is\n        closed\"\"\"",
        "\"\"\"Open a new channel with RabbitMQ, when RabbitMQ responds that\n        the channel is open, the on_channel_open callback will be\n        invoked\"\"\"",
        "\"\"\"This method is invoked by pika when the channel has been\n        opened. The channel object is passed in so we can make use of\n        it\"\"\"",
        "\"\"\"This method tells pika to call the on_channel_closed method if\n        RabbitMQ unexpectedly closes the channel\"\"\"",
        "\"\"\"When the channel close we will close the connection\"\"\"",
        "\"\"\"Setup the exchange we will be consuming from\n\n        :param str exchange_name: the name of the exchange\"\"\"",
        "\"\"\"Invoked when the exchange set up has finashed, is called\n        with an unused frame\"\"\"",
        "\"\"\"Setup the queue on RabbitMQ\n\n        :param dict queue_name: the name of the queue to declare\"\"\"",
        "\"\"\"\"Method invoked when the queue declaration has completed\n        that will bind every binding keys declared in the queue dict\n        to the queue\n        \"\"\"",
        "\"\"\"Method invoked when the binding of the queue and the routing\n        key has completed\"\"\"",
        "\"\"\"This method first ensure that the consumer has a cancel\n        callback and then start the consume\"\"\"",
        "\"\"\"Add a callback to permit to close cleanly the consumer\"\"\"",
        "\"\"\"Invoked by pika when RabbitMQ send a cancel for a consumer\"\"\"",
        "\"\"\"Invoked when the consumer receive a message. The channel\n        is passed, the basic_deliver holds the exchange, the routing key,\n        the delivery tag and a redelivered flag. The body is the message\n        that was sent. If the callback return true, it will ack the message\n        if not, it will nack it.\n        :param pika.channel.Channel channel\n        :param pika.Spec.Basic.Deliver: basic_deliver method\n        :param pika.Spec.BasicProperties: properties\n        :param str|unicode: body\"\"\"",
        "\"\"\"Tell RabbitMQ that you would like to stop consuming by\n        sending a cancel\"\"\"",
        "\"\"\"Invoked when RabbitMQ acknowledges the cancellation of a\n        consumer. We will then close the channel, with the\n        on_channel_closed method, that will close the connection\"\"\"",
        "\"\"\"Close the channel connection\"\"\"",
        "\"\"\"\"Run the consumer by connecting to RabbitMQ and then start\n        the IOLoop to block and allow the SelectConnection\"\"\"",
        "\"\"\"\"Cleanly close the connection to RabbitMQ by stopping\n        the consumer with RabbitMQ. When RabbitMQ confirms the cancellation,\n        on_cancelok will be invoked, which will close the channel and\n        then the connection\n\n        The IOLoop is started again because this method is invoked\n        when CTRL-C is pressed, raising a KeyboardInterrupt exception.\n        This exception stops the IOLoop which needs to be running for pika\n        to communicate with RabbitMQ\"\"\"",
        "\"\"\"This method closes the connection to RabbitMQ.\"\"\""
    ],
    "functions": [
        "connect",
        "on_connection_open",
        "add_on_connection_close_callback",
        "on_connection_closed",
        "reconnect",
        "open_channel",
        "on_channel_open",
        "add_on_channel_close_callback",
        "on_channel_closed",
        "setup_exchange",
        "on_exchange_declareok",
        "setup_queue",
        "on_queue_declareok",
        "on_bindok",
        "start_consuming",
        "add_on_cancel_callback",
        "on_consumer_cancelled",
        "on_message",
        "stop_consuming",
        "on_cancelok",
        "close_channel",
        "run",
        "stop",
        "close_connection"
    ],
    "classes": [
        "RMQConsumer"
    ]
}