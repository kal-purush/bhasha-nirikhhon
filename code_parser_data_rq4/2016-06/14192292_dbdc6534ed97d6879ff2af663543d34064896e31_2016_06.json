{
    "identifiers": [
        "sif3",
        "common",
        "model",
        "java",
        "io",
        "Serializable",
        "sif3",
        "common",
        "header",
        "HeaderProperties",
        "serialVersionUID",
        "httpHeaderParams",
        "httpHeaderParams",
        "setHttpHeaderParams",
        "httpHeaderParams",
        "httpHeaderParams",
        "httpHeaderParams",
        "httpHeaderParams",
        "httpHeaderParams",
        "httpHeaderParams",
        "httpHeaderParams",
        "parameterName",
        "value",
        "getHttpHeaderParams",
        "setHeaderProperty",
        "parameterName",
        "value",
        "parameterName",
        "getHttpHeaderParams",
        "setHeaderProperty",
        "parameterName",
        "parameterName",
        "getHttpHeaderParams",
        "getHeaderProperty",
        "parameterName",
        "parameterName",
        "getHTTPParameter",
        "parameterName",
        "Override",
        "httpHeaderParams"
    ],
    "literals": [
        "\"ResponseParameters [httpHeaderParams=\"",
        "\"]\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* ResponseParameters.java\n * Created: 27/05/2016\n *\n * Copyright 2016 Systemic Pty Ltd\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software distributed under the License \n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied.\n * See the License for the specific language governing permissions and limitations under the License.",
        "* This class is intended to be a base class for some response parameter management such as HTTP Header fields.<br/><br/>\n * \n * The main intend of this class is to allow providers to pass custom HTTP header fields to a consumer in a response.\n * The SIF Specification allows for this, so that functionality is provided in the SIF3 Framework through that class. \n * \n * @author Joerg Huber",
        "* Constructor.",
        "* Constructor.\n     *  \n     * @param httpHeaderParams Available HTTP header parameters of the response. Can be null.",
        "* Sets the HTTP Headers to the required values.\n     * \n     * @param httpHeaderParams If null then all existing values will be removed.",
        "------------------------",
        "- Convenience Methods --",
        "------------------------",
        "* This method adds the given parameter and value to the list of HTTP header parameters. If there is already a parameter\n     * with that name then it will be overridden. The parameterName is case insensitive, so 'Param1' and 'param1' as the \n     * parameter name are treated as the same parameters. This behaviour matches the HTTP specification. If any of the\n     * two parameters is empty or null then they are not added to the list of HTTP Headers parameters.\n     * \n     * @param parameterName The name of the HTTP header parameter.\n     * @param value The value of the HTTP header parameter.",
        "* This method will remove the given HTTP header parameter from the list of HTTP headers. If there is no such parameter\n     * in the current list or the parameterName is null then no action is taken. The parameterName is case insensitive.\n     * \n     * @param parameterName The name of the parameter to be removed.",
        "* This method returns the value of the given HTTP header field as a string. If no HTTP header field with that name\n     * exists then null is returned. The parameterName is case insensitive.\n     * \n     * @param parameterName Name of the HTTP header field for which the value shall be returned.\n     * \n     * @return See desc.",
        "* This method return true if a given HTTP header parameter is already part of the list. If it doesn't exist then false\n     * is returned.\n     * \n     * @param parameterName The HTTP header parameter to check for.\n     * \n     * @return See desc."
    ],
    "functions": [
        "ResponseParameters",
        "ResponseParameters",
        "HeaderProperties",
        "getHttpHeaderParams",
        "setHttpHeaderParams",
        "addHTTPHeaderParameter",
        "removeHTTPHeaderParameter",
        "getHTTPParameter",
        "existHTTPParameter",
        "toString"
    ],
    "classes": [
        "ResponseParameters"
    ]
}