{
    "identifiers": [
        "Drawing",
        "Runtime",
        "InteropServices",
        "Threading",
        "Text",
        "MediaPortal",
        "ExtensionMethods",
        "MediaPortal",
        "Player",
        "OSDMOUSECALLBACK",
        "name",
        "IntPtr",
        "context",
        "message",
        "IntPtr",
        "wParam",
        "posX",
        "posY",
        "ComImport",
        "Security",
        "SuppressUnmanagedCodeSecurity",
        "Guid",
        "InterfaceType",
        "ComInterfaceType",
        "InterfaceIsIUnknown",
        "IOsdRenderCallback",
        "PreserveSig",
        "Out",
        "IntPtr",
        "dev",
        "PreserveSig",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "name",
        "Out",
        "IntPtr",
        "frameStart",
        "Out",
        "Rectangle",
        "fullOutputRect",
        "Out",
        "Rectangle",
        "activeVideoRect",
        "PreserveSig",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "name",
        "Out",
        "IntPtr",
        "frameStart",
        "Out",
        "Rectangle",
        "fullOutputRect",
        "Out",
        "Rectangle",
        "activeVideoRect",
        "ComImport",
        "Security",
        "SuppressUnmanagedCodeSecurity",
        "Guid",
        "InterfaceType",
        "ComInterfaceType",
        "InterfaceIsIUnknown",
        "IMadVROsdServices",
        "PreserveSig",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "name",
        "In",
        "IntPtr",
        "leftEye",
        "In",
        "IntPtr",
        "rightEye",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "U4",
        "colorKey",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "U4",
        "posX",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "U4",
        "posY",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "Bool",
        "posRelativeToVideoRect",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "U4",
        "zOrder",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "U4",
        "duration",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "U4",
        "flags",
        "Out",
        "OSDMOUSECALLBACK",
        "callback",
        "Out",
        "IntPtr",
        "callbackContext",
        "IntPtr",
        "reserved",
        "PreserveSig",
        "Out",
        "Rectangle",
        "fullOutputRect",
        "Out",
        "Rectangle",
        "activeVideoRect",
        "PreserveSig",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "name",
        "Out",
        "IOsdRenderCallback",
        "callback",
        "IntPtr",
        "reserved",
        "PreserveSig",
        "ComImport",
        "Guid",
        "ComImport",
        "Security",
        "SuppressUnmanagedCodeSecurity",
        "Guid",
        "InterfaceType",
        "ComInterfaceType",
        "InterfaceIsIUnknown",
        "IMadVRTextOsd",
        "PreserveSig",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "text",
        "In",
        "MarshalAs",
        "UnmanagedType",
        "U4",
        "milliseconds",
        "PreserveSig",
        "ComImport",
        "Security",
        "SuppressUnmanagedCodeSecurity",
        "Guid",
        "InterfaceType",
        "ComInterfaceType",
        "InterfaceIsIUnknown",
        "IMadVRSeekbarControl",
        "PreserveSig",
        "IntPtr",
        "disable",
        "ComImport",
        "Security",
        "SuppressUnmanagedCodeSecurity",
        "Guid",
        "InterfaceType",
        "ComInterfaceType",
        "InterfaceIsIUnknown",
        "IMadVRExclusiveModeControl",
        "PreserveSig",
        "IntPtr",
        "disable",
        "ComImport",
        "Security",
        "SuppressUnmanagedCodeSecurity",
        "Guid",
        "InterfaceType",
        "ComInterfaceType",
        "InterfaceIsIUnknown",
        "IMadVRExclusiveModeInfo",
        "PreserveSig",
        "PreserveSig",
        "Out",
        "MarshalAs",
        "UnmanagedType",
        "I1",
        "Status",
        "ComImport",
        "Security",
        "SuppressUnmanagedCodeSecurity",
        "Guid",
        "InterfaceType",
        "ComInterfaceType",
        "InterfaceIsIUnknown",
        "IMadVRCommand",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPStr",
        "In",
        "command",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPStr",
        "In",
        "command",
        "parameter",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPStr",
        "In",
        "command",
        "parameter",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPStr",
        "In",
        "command",
        "Size",
        "parameter",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPStr",
        "In",
        "command",
        "Rectangle",
        "parameter",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPStr",
        "In",
        "command",
        "parameter",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPStr",
        "In",
        "command",
        "parameter",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPStr",
        "In",
        "command",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "In",
        "parameter",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPStr",
        "In",
        "command",
        "IntPtr",
        "parameter",
        "size",
        "ComImport",
        "Security",
        "SuppressUnmanagedCodeSecurity",
        "Guid",
        "InterfaceType",
        "ComInterfaceType",
        "InterfaceIsIUnknown",
        "IMadVRSettings",
        "PreserveSig",
        "revision",
        "PreserveSig",
        "Out",
        "IntPtr",
        "buf",
        "size",
        "PreserveSig",
        "IntPtr",
        "buf",
        "size",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "In",
        "path",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "In",
        "value",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "In",
        "path",
        "value",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "In",
        "path",
        "value",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "In",
        "path",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "Out",
        "StringBuilder",
        "value",
        "bufLenInChars",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "In",
        "path",
        "value",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "In",
        "path",
        "value",
        "PreserveSig",
        "MarshalAs",
        "UnmanagedType",
        "LPWStr",
        "In",
        "path",
        "value",
        "bufLenInBytes",
        "_madVR",
        "madVR",
        "_madVR",
        "madVR",
        "IMadVRSettings",
        "setting",
        "value",
        "IsValid",
        "_madVR",
        "SettingsSetString",
        "setting",
        "value",
        "setting",
        "Empty",
        "IsValid",
        "StringBuilder",
        "sbLen",
        "_madVR",
        "SettingsGetString",
        "setting",
        "smMode",
        "sbLen",
        "sbLen",
        "smMode",
        "Capacity",
        "smMode",
        "StringBuilder",
        "sbLen",
        "success",
        "_madVR",
        "SettingsGetString",
        "setting",
        "smMode",
        "sbLen",
        "success",
        "retVal",
        "smMode",
        "ToString",
        "retVal",
        "setting",
        "value",
        "IsValid",
        "retVal",
        "_madVR",
        "SettingsSetBoolean",
        "setting",
        "value",
        "retVal",
        "setting",
        "IsValid",
        "_madVR",
        "SettingsGetBoolean",
        "setting",
        "retVal",
        "retVal",
        "setting",
        "value",
        "IsValid",
        "retVal",
        "_madVR",
        "SettingsSetInteger",
        "setting",
        "value",
        "retVal",
        "setting",
        "IsValid",
        "_madVR",
        "SettingsGetInteger",
        "setting",
        "retVal",
        "retVal",
        "Message",
        "DisplayTime",
        "MadVR",
        "madvr",
        "IMadVRTextOsd",
        "madvr",
        "osd",
        "OsdDisplayMessage",
        "Message",
        "DisplayTime",
        "name",
        "IntPtr",
        "leftEye",
        "Posx",
        "Posy",
        "Duration",
        "ImagePriority",
        "MadVR",
        "madvr",
        "IntPtr",
        "Zero",
        "reserved",
        "IntPtr",
        "Zero",
        "IMadVROsdServices",
        "madvr",
        "Posy",
        "ScreenBottom",
        "name",
        "CurrentName",
        "name",
        "CurrentLeftEye",
        "leftEye",
        "CurrentPosX",
        "Posx",
        "CurrentPosY",
        "Posy",
        "CurrentDuration",
        "Duration",
        "CurrentImagePriority",
        "ImagePriority",
        "startTransition",
        "Posy",
        "ScreenBottom",
        "osdServices",
        "OsdSetBitmap",
        "name",
        "leftEye",
        "rightEye",
        "colorkey",
        "Posx",
        "ScreenBottom",
        "ImagePriority",
        "Duration",
        "mouseCallback",
        "callbackContext",
        "reserved",
        "Posy",
        "ScreenBottom",
        "ScreenBottom",
        "Posy",
        "ScreenBottom",
        "ScreenBottom",
        "Posy",
        "ScreenBottom",
        "ScreenBottom",
        "Posy",
        "ScreenBottom",
        "ScreenBottom",
        "name",
        "Posy",
        "ScreenBottom",
        "ScreenBottom",
        "Posy",
        "ScreenBottom",
        "ScreenBottom",
        "Posy",
        "ScreenBottom",
        "ScreenBottom",
        "Posy",
        "ScreenBottom",
        "ScreenBottom",
        "Sleep",
        "osdServices",
        "OsdSetBitmap",
        "name",
        "leftEye",
        "rightEye",
        "colorkey",
        "Posx",
        "ScreenBottom",
        "ImagePriority",
        "Duration",
        "mouseCallback",
        "callbackContext",
        "reserved",
        "startTransition",
        "osdServices",
        "OsdSetBitmap",
        "name",
        "leftEye",
        "rightEye",
        "colorkey",
        "Posx",
        "Posy",
        "ImagePriority",
        "Duration",
        "mouseCallback",
        "callbackContext",
        "reserved",
        "osdServices",
        "OsdSetBitmap",
        "name",
        "leftEye",
        "rightEye",
        "colorkey",
        "Posx",
        "Posy",
        "ImagePriority",
        "Duration",
        "mouseCallback",
        "callbackContext",
        "reserved",
        "osdServices",
        "OsdSetBitmap",
        "name",
        "leftEye",
        "rightEye",
        "colorkey",
        "Posx",
        "Posy",
        "ImagePriority",
        "Duration",
        "mouseCallback",
        "callbackContext",
        "reserved",
        "name",
        "ToLower",
        "Contains",
        "name",
        "ToLower",
        "StartsWith",
        "osdServices",
        "OsdRedrawFrame",
        "MadVR",
        "madvr",
        "IMadVROsdServices",
        "madvr",
        "osdServices",
        "OsdRedrawFrame",
        "enable",
        "madvr",
        "madvr",
        "IMadVRCommand",
        "eModeCommand",
        "eModeCommand",
        "SendCommandBool",
        "enable",
        "madvr",
        "madvr",
        "IMadVRCommand",
        "eModeCommand",
        "eModeCommand",
        "SendCommand",
        "madvr",
        "IMadVROsdServices",
        "madvr",
        "osdServices",
        "OsdSetRenderCallback",
        "reserved",
        "osdServices",
        "SafeDispose",
        "e",
        "MadVR",
        "madvr",
        "madvr",
        "IMadVRExclusiveModeInfo",
        "exclusiveInfo",
        "exclusiveInfo",
        "IsExclusiveModeActive"
    ],
    "literals": [
        "\"57FBF6DC-3E5F-4641-935A-CB62F00C9958\"",
        "\"3AE03A88-F613-4BBA-AD3E-EE236976BF9A\"",
        "\"E1A8B82A-32CE-4B0D-BE0D-AA68C772E423\"",
        "\"ABA34FDA-DD22-4E00-9AB4-4ABF927D0B0C\"",
        "\"D2D3A520-7CFA-46EB-BA3B-6194A028781C\"",
        "\"88A69329-3CD3-47D6-ADEF-89FA23AFC7F3\"",
        "\"D6EE8031-214E-4E9E-A3A7-458925F933AB\"",
        "\"5E9599D1-C5DB-4A84-98A9-09BC5F8F1B79\"",
        "\"6F8A566C-4E19-439E-8F07-20E46ED06DEE\"",
        "\"transportTime\"",
        "\"iMovieInfoImage\"",
        "\"pause\"",
        "\"pause\"",
        "\"disableExclusiveMode\"",
        "\"restoreDisplayModeNow\"",
        "\"MP-GUI\""
    ],
    "variables": [
        "IMadVRSettings",
        "_madVR",
        "IsValid",
        "retVal",
        "sbLen",
        "StringBuilder",
        "smMode",
        "success",
        "retVal",
        "retVal",
        "success",
        "retVal",
        "retVal",
        "success",
        "OSDMOUSECALLBACK",
        "mouseCallback",
        "IntPtr",
        "callbackContext",
        "IntPtr",
        "reserved",
        "IOsdRenderCallback",
        "osdRenderCallback",
        "osd",
        "CurrentName",
        "IntPtr",
        "CurrentLeftEye",
        "CurrentPosX",
        "CurrentPosY",
        "CurrentDuration",
        "CurrentImagePriority",
        "startTransition",
        "IntPtr",
        "rightEye",
        "colorkey",
        "IMadVROsdServices",
        "osdServices",
        "ScreenBottom",
        "osdServices",
        "eModeCommand",
        "eModeCommand",
        "IMadVROsdServices",
        "osdServices",
        "exclusiveInfo"
    ],
    "comments": [
        "using Microsoft.DirectX.PrivateImplementationDetails;",
        "when using the (1) bitmaps method, you can register a mouse callback",
        "this callback will be called whenever a mouse event occurs",
        "mouse pos (0, 0) is the left top corner of the OSD bitmap element",
        "return \"true\" if your callback has handled the mouse message and",
        "if you want the mouse message to be \"eaten\" (instead of passed on)",
        "when using the (2) render callbacks method, you need to provide",
        "madVR with an instance of the IOsdRenderCallback interface",
        "it contains three callbacks you have to provide",
        "IDirect3DDevice9",
        "this is the main interface which madVR provides to you",
        "this API provides the (1) bitmap based method",
        "name of the OSD element, e.g. \"YourMediaPlayer.SeekBar\"",
        "OSD bitmap, should be 24bit or 32bit, NULL deletes the OSD element",
        "specify when your OSD is 3D, otherwise set to NULL",
        "transparency color key, set to 0 if your bitmap has an 8bit alpha channel",
        "where to draw the OSD element?",
        "",
        "draw relative to TRUE: the active video rect; FALSE: the full output rect",
        "high zOrder OSD elements are drawn on top of those with smaller zOrder values",
        "how many milliseconds shall the OSD element be shown (0 = infinite)?",
        "undefined - set to 0",
        "optional callback for mouse events",
        "this context is passed to the callback",
        "undefined - set to NULL",
        "this API allows you to ask the current video rectangles",
        "(0, 0, outputSurfaceWidth, outputSurfaceHeight)",
        "active video rendering rect inside of fullOutputRect",
        "this API provides the (2) render callback based method",
        "name of the OSD callback, e.g. \"YourMediaPlayer.OsdCallbacks\"",
        "OSD callback interface, set to NULL to unregister the callback",
        "undefined - set to NULL",
        "this API allows you to force madVR to redraw the current video frame",
        "useful when using the (2) render callback method, when the graph is paused",
        "IMadVRTextOsd",
        "---------------------------------------------------------------------------",
        "This interface allows you to draw simple text messages.",
        "madVR uses it internally, too, for showing various messages to the user.",
        "The messages are shown in the top left corner of the video rendering window.",
        "The messages work in both windowed and fullscreen exclusive mode.",
        "There can always be only one message active at the same time, so basically",
        "the messages are overwriting each other.",
        "IMadVRSeekbarControl",
        "---------------------------------------------------------------------------",
        "if you draw your own seekbar and absolutely insist on disliking madVR's",
        "own seekbar, you can forcefully hide it by using this interface",
        "using this interface only affects the current madVR instance",
        "IMadVRExclusiveModeControl",
        "---------------------------------------------------------------------------",
        "you can use this interface to turn madVR's automatic exclusive mode on/off",
        "using this interface only affects the current madVR instance",
        "IMadVRExclusiveModeInfo",
        "---------------------------------------------------------------------------",
        "this interface allows you to ask...",
        "... whether madVR is currently in exclusive mode",
        "... whether the madVR exclusive mode seek bar is currently enabled",
        "If madVR is in fullscreen exclusive mode, you should be careful with",
        "which GUI you show, because showing any window based GUI will make madVR",
        "automatically switch back to windowed mode. That's ok if that's what you",
        "really want, just be aware of that. A good alternative is to use the",
        "graphical or text base OSD interfaces (see above). Using them instead of",
        "a window based GUI means that madVR can stay in exclusive mode all the",
        "time.",
        "Since madVR has its own seek bar (which is only shown in fullscreen",
        "exclusive mode, though), before showing your own seek bar you should",
        "check whether madVR is in fullscreen exclusive mode and whether the",
        "user has enabled madVR's own seek bar. If so, you should probably not",
        "show your own seek bar. If the user, however, has the madVR seek bar",
        "disabled, you should still show your own seek bar, because otherwise",
        "the user will have no way to seek at all.",
        "void IsExclusiveModeActive([Out, MarshalAs(UnmanagedType.I1)] out bool Status);",
        "---------------------------------------------------------------------------",
        "IMadVRCommand",
        "---------------------------------------------------------------------------",
        "This interface allows you to give commands to madVR. These commands only",
        "affect the current madVR instance. They don't change permanent settings.",
        "Command names and LPWSTR values are treated case insensitive.",
        "available commands:",
        "-------------------",
        "disableSeekbar,          bool,      turn madVR's automatic exclusive mode on/off",
        "disableExclusiveMode,    bool,      turn madVR's automatic exclusive mode on/off",
        "keyPress                 int,       interpret as \"BYTE keyPress[4]\"; keyPress[0] = key code (e.g. VK_F1); keyPress[1-3] = BOOLEAN \"shift/ctrl/menu\" state",
        "setZoomMode,             LPWSTR,    video target size: \"autoDetect|touchInside|touchOutside|stretch|100%|10%|20%|25%|30%|33%|40%|50%|60%|66%|70%|75%|80%|90%|110%|120%|125%|130%|140%|150%|160%|170%|175%|180%|190%|200%|225%|250%|300%|350%|400%|450%|500%|600%|700%|800%\"",
        "setZoomFactorX,          double,    additional X zoom factor (applied after zoom mode), default/neutral = 1.0",
        "setZoomFactorY,          double,    additional Y zoom factor (applied after zoom mode), default/neutral = 1.0",
        "setZoomAlignX,           LPWSTR,    video X pos alignment: left|center|right",
        "setZoomAlignY,           LPWSTR,    video Y pos alignment: top|center|bottom",
        "setZoomOffsetX,          double,    additional X pos offset in percent, default/neutral = 0.0",
        "setZoomOffsetY,          double,    additional Y pos offset in percent, default/neutral = 0.0",
        "setArOverride,           double,    aspect ratio override (before cropping), default/neutral = 0.0",
        "rotate,                  int,       rotates the video by 90, 180 or 270 degrees (0 = no rotation)",
        "redraw,                             forces madVR to redraw the current frame (in paused mode)",
        "restoreDisplayModeNow,              makes madVR immediately restore the original display mode",
        "---------------------------------------------------------------------------",
        "IMadVRSettings",
        "---------------------------------------------------------------------------",
        "this interface allows you to read and write madVR settings",
        "For each folder and value there exists both a short ID and a long",
        "description. The short ID will never change. The long description may be",
        "modified in a future version. So it's preferable to use the ID, but you can",
        "also address settings by using the clear text description.",
        "The \"path\" parameter can simply be set to the ID or to the description of",
        "the setting value. Alternatively you can use a partial or full path to the",
        "setting value. E.g. the following calls will all return the same value:",
        "(1) GetBoolean(L\"dontDither\", &boolVal);",
        "(2) GetBoolean(L\"don't use dithering\", &boolVal);",
        "(3) GetBoolean(L\"tradeQuality\\dontDither\", &boolVal);",
        "(4) GetBoolean(L\"performanceTweaks\\trade quality for performance\\dontDither\", &boolVal);",
        "Using the full path can make sense if you want to access a specific profile.",
        "If you don't specify a path, you automatically access the currently active",
        "profile.",
        "returns the revision number of the settings record",
        "the revision number is increased by 1 every time a setting changes",
        "export the whole settings record to a binary data buffer",
        "the buffer is allocated by mvrSettings_Export by using LocalAlloc",
        "it's the caller's responsibility to free the buffer again by using LocalFree",
        "import the settings from a binary data buffer",
        "modify a specific value",
        "The buffer for mvrSettings_GetString must be provided by the caller and",
        "bufLenInChars set to the buffer's length (please note: 1 char -> 2 bytes).",
        "If the buffer is too small, the API fails and GetLastError returns",
        "ERROR_MORE_DATA. On return, bufLenInChars is set to the required buffer size.",
        "The buffer for mvrSettings_GetBinary is allocated by mvrSettings_GetBinary.",
        "The caller is responsible for freeing it by using LocalAlloc().",
        "mouseCallback = new OSDMOUSECALLBACK(OnMouseEvent);",
        "Madvr_VideoPlayer.Plugin.Madvr_VideoPlayer.VideoPlayer.ScreenHeight;",
        "else if (Madvr_VideoPlayer.Plugin.Madvr_VideoPlayer.VideoPlayer.m_state == \"Paused\")",
        "{",
        "osdServices.OsdRedrawFrame();",
        "}",
        "public static void ClearMadVrBitmap(string name, MeediOS.Media.MadVR madvr)",
        "{",
        "try",
        "{",
        "if (madvr == null)",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"[Madvr Interface] Showbitmap Interface error: madvr is null\");",
        "return;",
        "}",
        "IntPtr leftEye = IntPtr.Zero;",
        "IntPtr rightEye = IntPtr.Zero;",
        "uint colorkey = 0;",
        "int Posx = 0;",
        "int Posy = 0;",
        "uint Duration = 1;",
        "int ImagePriority = 100;",
        "reserved = IntPtr.Zero;",
        "IMadVROsdServices osdServices = (IMadVROsdServices)madvr;",
        "//osdServices.OsdSetBitmap(name, leftEye, rightEye, colorkey, Posx, Posy, false, ImagePriority, Duration, 0, mouseCallback, callbackContext, reserved);",
        "int ScreenBottom = Madvr_VideoPlayer.Plugin.Madvr_VideoPlayer.VideoPlayer.ScreenHeight;",
        "if (CurrentPosY > (ScreenBottom / 2))",
        "{",
        "if (name != \"transportTime\")",
        "{",
        "if (startTransition == true",
        "&& name == CurrentName",
        "&& (Madvr_VideoPlayer.Plugin.ArrowDirection == \"up\" || Madvr_VideoPlayer.Plugin.ArrowDirection == \"down\"))",
        "{",
        "while (CurrentPosY < ScreenBottom)",
        "{",
        "osdServices.OsdSetBitmap(CurrentName, CurrentLeftEye, rightEye, colorkey, CurrentPosX, CurrentPosY, false, CurrentImagePriority, CurrentDuration, 0, mouseCallback, callbackContext, reserved);",
        "if (CurrentPosY < ScreenBottom)",
        "{",
        "CurrentPosY++;",
        "}",
        "if (CurrentPosY < ScreenBottom)",
        "{",
        "CurrentPosY++;",
        "}",
        "if (CurrentPosY < ScreenBottom)",
        "{",
        "CurrentPosY++;",
        "}",
        "if (CurrentPosY < ScreenBottom)",
        "{",
        "CurrentPosY++;",
        "}",
        "if (name == \"iMovieInfoImage\")",
        "{",
        "if (CurrentPosY < ScreenBottom)",
        "{",
        "CurrentPosY++;",
        "}",
        "if (CurrentPosY < ScreenBottom)",
        "{",
        "CurrentPosY++;",
        "}",
        "if (CurrentPosY < ScreenBottom)",
        "{",
        "CurrentPosY++;",
        "}",
        "if (CurrentPosY < ScreenBottom)",
        "{",
        "CurrentPosY++;",
        "}",
        "}",
        "Thread.Sleep(1);",
        "}",
        "osdServices.OsdSetBitmap(name, leftEye, rightEye, colorkey, Posx, Posy, false, ImagePriority, Duration, 0, mouseCallback, callbackContext, reserved);",
        "startTransition = false;",
        "}",
        "else",
        "{",
        "osdServices.OsdSetBitmap(name, leftEye, rightEye, colorkey, Posx, Posy, false, ImagePriority, Duration, 0, mouseCallback, callbackContext, reserved);",
        "}",
        "}",
        "else",
        "{",
        "osdServices.OsdSetBitmap(name, leftEye, rightEye, colorkey, Posx, Posy, false, ImagePriority, Duration, 0, mouseCallback, callbackContext, reserved);",
        "}",
        "}",
        "else",
        "{",
        "osdServices.OsdSetBitmap(name, leftEye, rightEye, colorkey, Posx, Posy, false, ImagePriority, Duration, 0, mouseCallback, callbackContext, reserved);",
        "}",
        "}",
        "catch (Exception e)",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"[Madvr Interface] MadVr Clear Bitmap Error: \" + e);",
        "}",
        "}",
        "public static void EnableExclusiveMode(bool enable, object madvr)",
        "{",
        "var eModeControl = madvr as IMadVRExclusiveModeControl;",
        "if (enable)",
        "{",
        "var size = Marshal.SizeOf(typeof (Int32));",
        "var pBool = Marshal.AllocHGlobal(size);",
        "Marshal.WriteInt32(pBool, 0, 1); // last parameter 0 (FALSE), 1 (TRUE)",
        "eModeControl?.DisableExclusiveMode(pBool);",
        "Marshal.FreeHGlobal(pBool);",
        "pBool = IntPtr.Zero;",
        "}",
        "else //Works - Set to Windowed Mode",
        "{",
        "var size = Marshal.SizeOf(typeof (Int32));",
        "var pBool = Marshal.AllocHGlobal(size);",
        "Marshal.WriteInt32(pBool, 0, 0); // last parameter 0 (FALSE), 1 (TRUE)",
        "eModeControl?.DisableExclusiveMode(pBool);",
        "Marshal.FreeHGlobal(pBool);",
        "pBool = IntPtr.Zero;",
        "}",
        "}",
        "public static bool MadvrSeekBarEnabled(MeediOS.Media.MadVR madvr)",
        "{",
        "try",
        "{",
        "IMadVRExclusiveModeInfo exclusiveInfo = (IMadVRExclusiveModeInfo)madvr;",
        "bool status = false;",
        "exclusiveInfo.IsMadVRSeekbarEnabled(out status);",
        "return status;",
        "}",
        "catch (Exception e)",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"[Madvr Interface] Get madvr seek bar enabled interface error: \" + e);",
        "}",
        "return false;",
        "}",
        "public static void EnableMadvrSeekBar(bool enable, MeediOS.Media.MadVR madvr)",
        "{",
        "try",
        "{",
        "if (madvr == null)",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"[Madvr Interface] Madvr seek bar error: madvr is null\");",
        "return;",
        "}",
        "Int32 iEnable;",
        "if (enable == true)",
        "{",
        "iEnable = 1;",
        "}",
        "else",
        "{",
        "iEnable = 0;",
        "}",
        "int size = Marshal.SizeOf(iEnable);",
        "IntPtr pBool = Marshal.AllocHGlobal(size);",
        "Marshal.WriteInt32(pBool, 0, 1);  // last parameter 0 (FALSE), 1 (TRUE)",
        "IMadVRSeekbarControl mvrSeekbar = (IMadVRSeekbarControl)madvr;",
        "mvrSeekbar.DisableSeekbar(pBool);",
        "Marshal.FreeHGlobal(pBool);",
        "}",
        "catch (Exception e)",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"[Madvr Interface] Exclusive mode interface: \" + e);",
        "}",
        "}",
        "public static void SetRenderCallback(MeediOS.Media.MadVR madvr)",
        "{",
        "try",
        "{",
        "IMadVROsdServices osdServices = (IMadVROsdServices)madvr;",
        "osdServices.OsdSetRenderCallback(\"MeediosPlayer\", osdRenderCallback, reserved);",
        "IDirect3DDevice9 test;",
        "osdRenderCallback.SetDevice(out test);",
        "}",
        "catch (Exception e)",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"[Madvr Interface] Error setting callback: \" + e);",
        "}",
        "}",
        "public static Rectangle GetMediaDimensions(bool GetActiveVideo, MeediOS.Media.MadVR madvr)",
        "{",
        "if (madvr == null)",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"[Madvr Interface] Madvr is null\");",
        "}",
        "Rectangle FullOutput = new Rectangle();",
        "Rectangle ActiveVideo = new Rectangle();",
        "try",
        "{",
        "IMadVROsdServices osdServices = (IMadVROsdServices)madvr;",
        "osdServices.OsdGetVideoRects(out FullOutput, out ActiveVideo);",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Active video width: \" + ActiveVideo.Width.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Active video height: \" + ActiveVideo.Height.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Active video left: \" + ActiveVideo.Left.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Active video right: \" + ActiveVideo.Right.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Active video top: \" + ActiveVideo.Top.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Active video bottom: \" + ActiveVideo.Bottom.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Full output width: \" + FullOutput.Width.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Full output height: \" + FullOutput.Height.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Full output left: \" + FullOutput.Left.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Full output right: \" + FullOutput.Right.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Full output top: \" + FullOutput.Top.ToString());",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Full output bottom: \" + FullOutput.Bottom.ToString());",
        "if (GetActiveVideo == true)",
        "{",
        "return ActiveVideo;",
        "}",
        "else",
        "{",
        "return FullOutput;",
        "}",
        "}",
        "catch (Exception e)",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"[Madvr Interface] Error getting dimensions: \" + e);",
        "}",
        "return FullOutput;",
        "}",
        "public static void GetMadvrSettings(MeediOS.Media.MadVR madvr)",
        "{",
        "try",
        "{",
        "IMadVRSettings mvrSettings = (IMadVRSettings)madvr;",
        "//string path = \"decodeH264\";",
        "//string value = \"\";",
        "//int bufferSize = 25;",
        "//int decodeh264 = mvrSettings.SettingsGetString(path, out value, bufferSize);",
        "string path = \"autoActivateDeinterlacing\";",
        "IntPtr settingbool;",
        "int autoActivateDeinterlacing = mvrSettings.SettingsGetBoolean(path, out settingbool);",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Madvr Setting: \" + path + \": \" + settingbool.ToString());",
        "}",
        "catch (Exception e)",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Madvr Setting Error: \" + e);",
        "}",
        "try",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Getting Madvr Setting\");",
        "SettingFilePath = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\madVR\\\\settings.bin\";",
        "string s1;",
        "byte b1;",
        "int i1;",
        "float f1;",
        "double d1;",
        "char[] ca;",
        "using (BinaryReader binReader = new BinaryReader(File.Open(SettingFilePath, FileMode.Open)))",
        "{",
        "try",
        "{",
        "while (true)",
        "{",
        "s1 = binReader.ReadString();",
        "b1 = binReader.ReadByte();",
        "i1 = binReader.ReadInt32();",
        "f1 = binReader.ReadSingle();",
        "d1 = binReader.ReadDouble();",
        "ca = binReader.ReadChars(5);",
        "//Console.WriteLine(f1);",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Madvr Setting: \" + s1);",
        "}",
        "}",
        "catch (EndOfStreamException ex)",
        "{",
        "// end of file reached",
        "}",
        "}",
        "}",
        "catch (Exception e)",
        "{",
        "Madvr_VideoPlayer.Plugin.WriteLog(\"Madvr Setting Error: \" + e);",
        "}",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "SetDevice",
        "ClearBackground",
        "RenderOsd",
        "OsdSetBitmap",
        "OsdGetVideoRects",
        "OsdSetRenderCallback",
        "OsdRedrawFrame",
        "OsdDisplayMessage",
        "OsdClearMessage",
        "DisableSeekbar",
        "DisableExclusiveMode",
        "IsExclusiveModeActive",
        "IsMadVRSeekbarEnabled",
        "SendCommand",
        "SendCommandBool",
        "SendCommandInt",
        "SendCommandSize",
        "SendCommandRect",
        "SendCommandUlonglong",
        "SendCommandDouble",
        "SendCommandString",
        "SendCommandBin",
        "SettingsGetRevision",
        "SettingsExport",
        "SettingsImport",
        "SettingsSetString",
        "SettingsSetInteger",
        "SettingsSetBoolean",
        "SettingsGetString",
        "SettingsGetInteger",
        "SettingsGetBoolean",
        "SettingsGetBinary",
        "MadVRSettings",
        "SetString",
        "GetString",
        "SetBool",
        "GetBool",
        "SetInt",
        "GetInt",
        "ShowMadVrMessage",
        "ShowMadVrBitmap",
        "RedrawFrame",
        "EnableExclusiveMode",
        "restoreDisplayModeNow",
        "OsdSetRenderCallback",
        "InExclusiveMode"
    ],
    "classes": [
        "MadVR",
        "MadVRSettings",
        "MadvrInterface"
    ]
}