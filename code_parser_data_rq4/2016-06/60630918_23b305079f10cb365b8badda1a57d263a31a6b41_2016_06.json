{
    "identifiers": [
        "IRichLanguageConfiguration",
        "monaco",
        "ILanguage",
        "monaco",
        "name",
        "TAG_PREFIX",
        "name",
        "TOKEN_HEADER_LEAD",
        "TOKEN_HEADER",
        "TOKEN_HEADER",
        "TOKEN_EXT_HEADER",
        "TOKEN_SEPARATOR",
        "TOKEN_QUOTE",
        "TOKEN_LIST",
        "TOKEN_BLOCK",
        "TOKEN_BLOCK",
        "TOKEN_BLOCK",
        "TOKEN_BLOCK",
        "TOKEN_BLOCK",
        "TOKEN_BLOCK",
        "TOKEN_BLOCK_CODE",
        "TOKEN_BLOCK_CODE",
        "TOKEN_BLOCK_CODE",
        "getTag",
        "getTag",
        "getTag",
        "getTag",
        "ATTRIB_NAME",
        "DELIM_ASSIGN",
        "ATTRIB_VALUE",
        "ATTRIB_VALUE",
        "ATTRIB_VALUE",
        "ATTRIB_NAME",
        "DELIM_ASSIGN",
        "ATTRIB_VALUE",
        "ATTRIB_VALUE",
        "ATTRIB_VALUE",
        "ATTRIB_NAME",
        "DELIM_ASSIGN",
        "ATTRIB_VALUE",
        "ATTRIB_NAME",
        "getTag",
        "getTag",
        "getTag",
        "getTag",
        "getTag"
    ],
    "literals": [
        "'use strict'",
        "'entity.name.tag'",
        "'entity.name.tag'",
        "'entity.other.attribute-name'",
        "'meta.separator'",
        "'comment'",
        "'keyword'",
        "'string'",
        "'variable.source'",
        "'punctuation.definition.meta.tag.end.html'",
        "'punctuation.definition.meta.tag.begin.html'",
        "'meta.tag.assign.html'",
        "'entity.other.attribute-name.html'",
        "'string.html'",
        "'comment.html.content'",
        "'comment.html'",
        "'entity.other.attribute-name.html'",
        "'entity.name.tag.html'",
        "'entity.name.tag.tag-'",
        "string",
        "'<!--'",
        "'-->'",
        "'{'",
        "'}'",
        "'['",
        "']'",
        "'('",
        "')'",
        "'<'",
        "'>'",
        "''",
        "'.md'",
        "'area'",
        "'base'",
        "'basefont'",
        "'br'",
        "'col'",
        "'frame'",
        "'hr'",
        "'img'",
        "'input'",
        "'isindex'",
        "'link'",
        "'meta'",
        "'param'",
        "'white'",
        "'@codeblock'",
        "'@codeblockgh'",
        "'$1'",
        "'@codeblock'",
        "'@linecontent'",
        "'@pop'",
        "'@pop'",
        "'@rematch'",
        "'@codeblockghend'",
        "'@pop'",
        "'@pop'",
        "'@rematch'",
        "'@pop'",
        "'string.escape'",
        "'escape'",
        "'strong'",
        "'strong'",
        "'emphasis'",
        "'emphasis'",
        "'variable'",
        "'string.target'",
        "'string.link'",
        "''",
        "'string.link'",
        "'string.link'",
        "'html'",
        "'$1'",
        "'@empty'",
        "'$1'",
        "'@tag.$1'",
        "'@default'",
        "'$1'",
        "'@open'",
        "'@tag.$1'",
        "'$1'",
        "'@close'",
        "'comment'",
        "'@comment'",
        "'comment.content'",
        "'comment'",
        "'@pop'",
        "'comment.content.invalid'",
        "'comment.content'",
        "'white'",
        "'@tag.$S2.$4'",
        "'@tag.$S2.$4'",
        "'$S2'",
        "'@pop'",
        "'$S2==style'",
        "'$S2'",
        "'@embedded.$S2'",
        "'text/css'",
        "'$S2==script'",
        "'$S3'",
        "'$S2'",
        "'@embedded.$S2'",
        "'$S3'",
        "'@default'",
        "'$S2'",
        "'@embedded.$S2'",
        "'text/javascript'",
        "'@default'",
        "'$S2'",
        "'@pop'",
        "''",
        "'$1==$S2'",
        "'@rematch'",
        "'@pop'",
        "'@pop'",
        "'@default'",
        "''",
        "'string.invalid'",
        "'string.invalid'",
        "'string'",
        "'@string.\"'",
        "'string'",
        "'@string.\\''",
        "''",
        "'string'",
        "'string.escape'",
        "'string.escape.invalid'",
        "'$#==$S2'",
        "'string'",
        "'@pop'",
        "'@default'",
        "'string'"
    ],
    "variables": [
        "TOKEN_HEADER_LEAD",
        "TOKEN_HEADER",
        "TOKEN_EXT_HEADER",
        "TOKEN_SEPARATOR",
        "TOKEN_QUOTE",
        "TOKEN_LIST",
        "TOKEN_BLOCK",
        "TOKEN_BLOCK_CODE",
        "DELIM_END",
        "DELIM_START",
        "DELIM_ASSIGN",
        "ATTRIB_NAME",
        "ATTRIB_VALUE",
        "COMMENT",
        "DELIM_COMMENT",
        "DOCTYPE",
        "DELIM_DOCTYPE",
        "TAG_PREFIX",
        "conf",
        "language"
    ],
    "comments": [
        "---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------",
        "escape codes",
        "escape codes for javascript/CSS strings",
        "non matched elements",
        "headers (with #)",
        "headers (with =)",
        "headers (with ***)",
        "quote",
        "list (starting with * or number)",
        "code block (4 spaces indent)",
        "code block (3 tilde)",
        "github style code blocks (with backticks and language)",
        "github style code blocks (with backticks but no language)",
        "markup within lines",
        "github style code blocks",
        "escapes",
        "various markup",
        "links",
        "or html",
        "Note: it is tempting to rather switch to the real HTML mode instead of building our own here",
        "but currently there is a limitation in Monarch that prevents us from doing it: The opening",
        "'<' would start the HTML mode, however there is no way to jump 1 character back to let the",
        "HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,",
        "we cannot correctly tokenize it in that mode yet.",
        "html tags",
        "Almost full HTML tag matching, complete with embedded scripts & styles",
        "non-teminated string",
        "non-teminated string",
        "scan embedded strings in javascript or css"
    ],
    "docstrings": [],
    "functions": [
        "getTag"
    ],
    "classes": []
}