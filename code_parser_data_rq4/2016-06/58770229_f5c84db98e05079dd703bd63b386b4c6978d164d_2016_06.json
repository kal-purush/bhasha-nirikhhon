{
    "identifiers": [
        "subprocess32",
        "os",
        "unittest",
        "taprunner",
        "time",
        "sys",
        "random",
        "argparse",
        "os",
        "environ",
        "copy",
        "os",
        "environ",
        "copy",
        "ciao_env",
        "ciao_env",
        "ciao_env",
        "uuid",
        "retry_count",
        "count",
        "get_instances",
        "i",
        "instances",
        "i",
        "uuid",
        "i",
        "time",
        "sleep",
        "count",
        "uuid",
        "num",
        "uuid",
        "num",
        "subprocess32",
        "check_output",
        "args",
        "env",
        "ciao_user_env",
        "timeout",
        "cli_timeout",
        "output",
        "splitlines",
        "iter",
        "lines",
        "line",
        "line_iter",
        "line",
        "split",
        "lstrip",
        "rstrip",
        "wait_till_active",
        "uuid",
        "done",
        "subprocess32",
        "CalledProcessError",
        "err",
        "err",
        "output",
        "num",
        "get_all_workloads",
        "workloads",
        "random",
        "randint",
        "len",
        "workloads",
        "launch_workload",
        "workloads",
        "index",
        "num",
        "num",
        "get_all_workloads",
        "workloads",
        "workload",
        "workloads",
        "launch_workload",
        "workload",
        "num",
        "success",
        "subprocess32",
        "check_output",
        "args",
        "env",
        "ciao_user_env",
        "timeout",
        "cli_timeout",
        "subprocess32",
        "CalledProcessError",
        "err",
        "err",
        "output",
        "workloads",
        "output",
        "splitlines",
        "iter",
        "lines",
        "line",
        "line_iter",
        "line",
        "startswith",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "workloads",
        "append",
        "workload",
        "workloads",
        "subprocess32",
        "check_output",
        "args",
        "env",
        "ciao_admin_env",
        "timeout",
        "cli_timeout",
        "subprocess32",
        "CalledProcessError",
        "err",
        "err",
        "output",
        "tenants",
        "output",
        "splitlines",
        "iter",
        "lines",
        "line",
        "line_iter",
        "line",
        "startswith",
        "next",
        "line_iter",
        "split",
        "next",
        "line_iter",
        "split",
        "uuid",
        "name",
        "tenants",
        "append",
        "tenant",
        "tenants",
        "subprocess32",
        "check_output",
        "args",
        "env",
        "ciao_admin_env",
        "timeout",
        "cli_timeout",
        "subprocess32",
        "CalledProcessError",
        "err",
        "err",
        "output",
        "output",
        "splitlines",
        "lines",
        "split",
        "lines",
        "split",
        "total",
        "ready",
        "subprocess32",
        "check_output",
        "args",
        "env",
        "ciao_admin_env",
        "timeout",
        "cli_timeout",
        "subprocess32",
        "CalledProcessError",
        "err",
        "err",
        "output",
        "cncis",
        "output",
        "splitlines",
        "iter",
        "lines",
        "line",
        "line_iter",
        "line",
        "startswith",
        "next",
        "line_iter",
        "split",
        "next",
        "line_iter",
        "split",
        "next",
        "line_iter",
        "split",
        "cncis",
        "append",
        "cnci",
        "cncis",
        "subprocess32",
        "check_output",
        "args",
        "env",
        "ciao_user_env",
        "timeout",
        "cli_timeout",
        "subprocess32",
        "CalledProcessError",
        "err",
        "err",
        "output",
        "output",
        "startswith",
        "retry_count",
        "count",
        "len",
        "get_instances",
        "time",
        "sleep",
        "count",
        "ciao_user_env",
        "subprocess32",
        "check_output",
        "args",
        "env",
        "myenv",
        "timeout",
        "cli_timeout",
        "subprocess32",
        "CalledProcessError",
        "err",
        "err",
        "output",
        "instances",
        "output",
        "splitlines",
        "iter",
        "lines",
        "line",
        "line_iter",
        "line",
        "startswith",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "next",
        "line_iter",
        "split",
        "lstrip",
        "rstrip",
        "instances",
        "append",
        "instance",
        "instances",
        "unittest",
        "TestCase",
        "delete_all_instances",
        "time",
        "sleep",
        "failUnless",
        "get_all_tenants",
        "failUnless",
        "check_cluster_status",
        "failUnless",
        "get_all_workloads",
        "failUnless",
        "launch_all_workloads",
        "failUnless",
        "launch_all_workloads",
        "failUnless",
        "start_random_workload",
        "failUnless",
        "get_cnci",
        "failUnless",
        "start_random_workload",
        "time",
        "sleep",
        "get_instances",
        "failUnless",
        "len",
        "instances",
        "failUnless",
        "start_random_workload",
        "failUnless",
        "delete_all_instances",
        "failUnless",
        "get_instances",
        "cli_timeout",
        "retry_count",
        "envvars",
        "os",
        "environ",
        "sys",
        "exit",
        "err",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "add_argument",
        "action",
        "dest",
        "help",
        "parser",
        "parse_args",
        "args",
        "cli_timeout",
        "args",
        "retry_count",
        "open",
        "unittest",
        "main",
        "testRunner",
        "taprunner",
        "TAPTestRunner",
        "stream",
        "outfile",
        "main"
    ],
    "literals": [
        "\"CIAO_USERNAME\"",
        "\"CIAO_ADMIN_USERNAME\"",
        "\"CIAO_PASSWORD\"",
        "\"CIAO_ADMIN_PASSWORD\"",
        "\"uuid\"",
        "\"status\"",
        "\"active\"",
        "'ciao-cli'",
        "'instance'",
        "'add'",
        "'-workload'",
        "'-instances'",
        "\":\"",
        "' '",
        "\"1\"",
        "\"uuid\"",
        "\"1\"",
        "\"uuid\"",
        "'ciao-cli'",
        "'workload'",
        "'list'",
        "\"Workload\"",
        "\"name\"",
        "\":\"",
        "' '",
        "\"uuid\"",
        "\":\"",
        "' '",
        "\"image_uuid\"",
        "\":\"",
        "' '",
        "\"cpus\"",
        "\":\"",
        "' '",
        "\"mem\"",
        "\":\"",
        "' '",
        "'ciao-cli'",
        "'tenant'",
        "'list'",
        "'-all'",
        "\"Tenant\"",
        "\" \"",
        "\" \"",
        "\"uuid\"",
        "\"name\"",
        "'ciao-cli'",
        "'node'",
        "'status'",
        "\" \"",
        "\" \"",
        "'ciao-cli'",
        "'node'",
        "'list'",
        "'-cnci'",
        "\"CNCI\"",
        "\"uuid\"",
        "\":\"",
        "\"tenant_uuid\"",
        "\":\"",
        "\"ip\"",
        "\":\"",
        "'ciao-cli'",
        "'instance'",
        "'delete'",
        "'-all'",
        "\"os-delete\"",
        "'ciao-cli'",
        "'instance'",
        "'list'",
        "\"Instance\"",
        "\"uuid\"",
        "\":\"",
        "' '",
        "\"status\"",
        "\":\"",
        "' '",
        "\"ip\"",
        "\":\"",
        "' '",
        "\"mac\"",
        "\":\"",
        "' '",
        "\"cn_uuid\"",
        "\":\"",
        "' '",
        "\"image_uuid\"",
        "\":\"",
        "' '",
        "\"tenant_uuid\"",
        "\":\"",
        "' '",
        "\"10\"",
        "\"CIAO_IDENTITY\"",
        "\"CIAO_CONTROLLER\"",
        "\"CIAO_USERNAME\"",
        "\"CIAO_PASSWORD\"",
        "\"CIAO_ADMIN_USERNAME\"",
        "\"CIAO_ADMIN_PASSWORD\"",
        "\"env var %s not set\"",
        "\"ciao Basic Acceptance Tests\"",
        "\"--command_timeout\"",
        "\"store\"",
        "\"cli_timeout\"",
        "\"Seconds to wait for a command to complete\"",
        "\"--cluster_timeout\"",
        "\"store\"",
        "\"retry_count\"",
        "\"Seconds to wait for cluster to respond\"",
        "\"./report.tap\"",
        "\"w\"",
        "'__main__'"
    ],
    "variables": [
        "cli_timeout",
        "retry_count",
        "ciao_env",
        "ciao_env",
        "ciao_env",
        "count",
        "instances",
        "args",
        "output",
        "lines",
        "line_iter",
        "uuid",
        "done",
        "workloads",
        "index",
        "workloads",
        "success",
        "args",
        "workloads",
        "output",
        "lines",
        "line_iter",
        "workload",
        "args",
        "tenants",
        "output",
        "lines",
        "line_iter",
        "uuid",
        "name",
        "tenant",
        "args",
        "output",
        "lines",
        "total",
        "ready",
        "args",
        "cncis",
        "output",
        "lines",
        "line_iter",
        "cnci",
        "args",
        "output",
        "count",
        "args",
        "instances",
        "myenv",
        "output",
        "lines",
        "line_iter",
        "instance",
        "instances",
        "envvars",
        "err",
        "parser",
        "args",
        "cli_timeout",
        "retry_count",
        "outfile"
    ],
    "comments": [
        "",
        "Copyright (c) 2016 Intel Corporation",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "",
        "implement a wait loop that waits for all instances to move to \"active\"",
        "but timeout after so many tries.",
        "quit on first failure"
    ],
    "docstrings": [
        "\"\"\" Basic Acceptance Tests for the ciao project\n\nThis module contains a set of tests that should be run on a ciao\ncluster prior to submitting a pull request. The tests can be\nrun on a physical cluster, or on the ciao single VM setup.\nThe output is a TAP (Test Anything Protocol) format file, report.tap.\nThese tests utilize the python unittest framework.\n\nPrior to running the tests, the following environment variables\nmust be set:\n    \"CIAO_IDENTITY\" - the URL and port number of your identity service\n    \"CIAO_CONTROLLER\" - the URL and port number of the ciao compute service\n    \"CIAO_USERNAME\" - a test user with user level access to a test tenant\n    \"CIAO_PASSWORD\" - your test user's password\n    \"CIAO_ADMIN_USERNAME\" - your cluster admin user name\n    \"CIAO_ADMIN_PASSWORD\" - your cluster admin pass word.\n\nThere are 2 configurable parameters that may be set:\n\n    command_timeout - the length of time the test will wait for a\n                      ciao-cli command to return. (default is 30 seconds)\n    cluster_timeout - the length of time to wait till an action has occurred\n                      in the cluster (default is 60 seconds).\n\n\"\"\"",
        "\"\"\"Sets the user environment up for ciao-cli with the user role\n\n    Copies the current environment and returns an environment\n    that ciao-cli will use for user role operations\n\n    Returns:\n        an os env dict\n\n    \"\"\"",
        "\"\"\"Sets the user environment up for ciao-cli with the admin role\n\n    Copies the current environment and returns an environment\n    that ciao-cli will use for admin role operations\n\n    Returns:\n        an os env dict\n\n    \"\"\"",
        "\"\"\"Wait in a loop till an instances status has changed to active\n\n    This function will loop for retry_count number of times checking\n    the status of an Instance. If the status is not active, it\n    will sleep for one second and try again.\n\n    Returns:\n        A boolean indicating whether the instance is active or not\n\n    \"\"\"",
        "\"\"\"Attempt to start a number of instances of a specified workload type\n\n    This function will call ciao-cli and tell it to create an instance\n    of a particular workload.\n\n    Args:\n        uuid: The workload UUID to start\n        num: The number of instances of this workload to start\n\n    Returns:\n        A boolean indicating whether the instances were successfully started\n    \"\"\"",
        "\"\"\"Attempt to start a number of instances of a random workload\n\n    This function will get all the possible workloads, then randomly\n    pick one to start.\n\n    Args:\n        num: the number of instances to create. Default is 1\n\n    Returns:\n        A boolean indicating whether the instances where successfully started\n    \"\"\"",
        "\"\"\"Attempt to create an instance for all possible workloads\n\n    This function will get all the possible workloads, then\n    attempt to create an instance for each one.\n\n    Args:\n        num: the number of instances per workload to create. Default is 1\n\n    Returns:\n        A boolean indicating whether the instances where successfully started\n    \"\"\"",
        "\"\"\"Retrieves the list of workload templates from the ciao cluster\n\n    Returns:\n        A list of dictionary representations of the workloads found\n    \"\"\"",
        "\"\"\"Retrieves the list of all tenants from the keystone service\n\n    This function uses ciao-cli to get a list of all possible tenants\n    from the keystone service. It is called using the admin context.\n\n    Returns:\n        A list of dictionary representations of the tenants found\n    \"\"\"",
        "\"\"\"Confirms that the ciao cluster is fully operational\n\n    This function uses ciao-cli to get the list of all compute/network nodes.\n    It confirms that the number of ready nodes is equal to the total number of nodes\n    It is called with the admin context.\n\n    Returns:\n        A boolean indicating whether the cluster is ready or not.\n    \"\"\"",
        "\"\"\"Gets a list of all CNCIs on the ciao cluster.\n\n    This function is called with the admin context.\n\n    Returns:\n        A list of dictionary representations of a CNCI\n    \"\"\"",
        "\"\"\"Deletes all instances for a particular tenant\n\n    This function uses ciao-cli to try to delete all previously created instances.\n    It then confirms that the instances were deleted by looping for retry_count\n    waiting for the instance to no longer appear in the tenants instance list.\n\n    Returns:\n        A boolean indicating that the instances have all been confirmed deleted.\n    \"\"\"",
        "\"\"\"Retrieve all created instances for a tenant\n\n    Returns:\n        A list of dictionary representations of an instance\n    \"\"\"",
        "\"\"\"Basic Acceptance Tests for the ciao project\"\"\"",
        "\"\"\"Get all tenants\"\"\"",
        "\"\"\"Confirm that the cluster is ready\"\"\"",
        "\"\"\"Get all available workloads\"\"\"",
        "\"\"\"Start one instance of all workloads\"\"\"",
        "\"\"\"Start 10 instances of all workloads\"\"\"",
        "\"\"\"Start a random workload, then get CNCI information\"\"\"",
        "\"\"\"Start a random workload, then make sure it's listed\"\"\"",
        "\"\"\"Start a random workload, then delete it\"\"\"",
        "\"\"\"Start the BAT tests\n\n    Confirm that the user has defined the environment variables we need,\n    and check for optional arguments. Start the unittests - output in\n    TAP format.\n\n    Returns:\n        Error if ENV is not set\n    \"\"\""
    ],
    "functions": [
        "ciao_user_env",
        "ciao_admin_env",
        "wait_till_active",
        "launch_workload",
        "start_random_workload",
        "launch_all_workloads",
        "get_all_workloads",
        "get_all_tenants",
        "check_cluster_status",
        "get_cnci",
        "delete_all_instances",
        "get_instances",
        "setUp",
        "tearDown",
        "test_get_tenants",
        "test_cluster_status",
        "test_get_workloads",
        "test_start_all_workloads",
        "test_start_all_workloads10",
        "test_get_cncis",
        "test_get_instances",
        "test_delete_all_instances",
        "main"
    ],
    "classes": [
        "BATTests"
    ]
}