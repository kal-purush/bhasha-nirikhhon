{
    "identifiers": [
        "logging",
        "gensim",
        "interfaces",
        "gensim",
        "topic_coherence",
        "segmentation",
        "probability_estimation",
        "direct_confirmation_measure",
        "indirect_confirmation_measure",
        "aggregation",
        "gensim",
        "corpora",
        "gensim",
        "matutils",
        "argsort",
        "gensim",
        "utils",
        "is_corpus",
        "gensim",
        "models",
        "ldamodel",
        "LdaModel",
        "gensim",
        "models",
        "wrappers",
        "LdaVowpalWabbit",
        "logging",
        "getLogger",
        "interfaces",
        "TransformationABC",
        "model",
        "texts",
        "corpus",
        "dictionary",
        "coherence",
        "texts",
        "corpus",
        "ValueError",
        "coherence",
        "is_corpus",
        "corpus",
        "dictionary",
        "model",
        "id2word",
        "ValueError",
        "model",
        "id2word",
        "dictionary",
        "corpus",
        "texts",
        "texts",
        "dictionary",
        "texts",
        "dictionary",
        "dictionary",
        "doc2bow",
        "text",
        "text",
        "texts",
        "ValueError",
        "coherence",
        "coherence",
        "texts",
        "ValueError",
        "coherence",
        "texts",
        "texts",
        "dictionary",
        "doc2bow",
        "text",
        "text",
        "texts",
        "ValueError",
        "coherence",
        "model",
        "_get_topics",
        "coherence",
        "coherence",
        "segmentation",
        "s_one_pre",
        "probability_estimation",
        "p_boolean_document",
        "direct_confirmation_measure",
        "log_conditional_probability",
        "aggregation",
        "arithmetic_mean",
        "coherence",
        "segmentation",
        "s_one_set",
        "probability_estimation",
        "p_boolean_sliding_window",
        "indirect_confirmation_measure",
        "cosine_similarity",
        "aggregation",
        "arithmetic_mean",
        "seg",
        "prob",
        "conf",
        "aggr",
        "isinstance",
        "model",
        "LdaModel",
        "topic",
        "model",
        "state",
        "get_lambda",
        "argsort",
        "topic",
        "topn",
        "reverse",
        "topics",
        "append",
        "bestn",
        "isinstance",
        "model",
        "LdaVowpalWabbit",
        "topic",
        "model",
        "_get_topics",
        "argsort",
        "topic",
        "topn",
        "reverse",
        "topics",
        "append",
        "bestn",
        "topics",
        "coherence",
        "seg",
        "topics",
        "prob",
        "corpus",
        "segmented_topics",
        "conf",
        "segmented_topics",
        "per_topic_postings",
        "num_docs",
        "aggr",
        "confirmed_measures",
        "coherence",
        "seg",
        "topics",
        "prob",
        "texts",
        "texts",
        "segmented_topics",
        "segmented_topics",
        "dictionary",
        "dictionary",
        "window_size",
        "conf",
        "topics",
        "segmented_topics",
        "per_topic_postings",
        "num_windows",
        "aggr",
        "confirmed_measures"
    ],
    "literals": [
        "'c_v'",
        "\"One of texts or corpus has to be provided.\"",
        "'u_mass'",
        "\"The associated dictionary should be provided with the corpus or 'id2word' for topic model\"",
        "\"should be set as the dictionary.\"",
        "\"Either 'corpus' with 'dictionary' or 'texts' should be provided for %s coherence.\"",
        "'c_v'",
        "\"'texts' should be provided for %s coherence.\"",
        "\"%s coherence is not currently supported.\"",
        "'u_mass'",
        "'c_v'",
        "\"CoherenceModel(segmentation=%s, probability estimation=%s, confirmation measure=%s, aggregation=%s)\"",
        "'u_mass'",
        "'c_v'",
        "'nlr'"
    ],
    "variables": [
        "logger",
        "dictionary",
        "dictionary",
        "corpus",
        "texts",
        "dictionary",
        "dictionary",
        "corpus",
        "texts",
        "dictionary",
        "corpus",
        "model",
        "topics",
        "coherence",
        "seg",
        "prob",
        "conf",
        "aggr",
        "seg",
        "prob",
        "conf",
        "aggr",
        "topics",
        "bestn",
        "bestn",
        "segmented_topics",
        "per_topic_postings",
        "num_docs",
        "confirmed_measures",
        "segmented_topics",
        "per_topic_postings",
        "num_windows",
        "confirmed_measures"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "",
        "Copyright (C) 2010 Radim Rehurek <radimrehurek@seznam.cz>",
        "Licensed under the GNU LGPL v2.1 - http://www.gnu.org/licenses/lgpl.html",
        "Set pipeline parameters:",
        "FIXME : Meant to work for LDAModel, LdaVowpalWabbit right now. Make it work for others.",
        "FIXME : Change window size to 110 finally."
    ],
    "docstrings": [
        "\"\"\"\nModule for calculating topic coherence in python. This is the implementation of\nthe four stage topic coherence pipeline from the paper [1].\nThe four stage pipeline is basically:\n\nSegmentation -> Probability Estimation -> Confirmation Measure -> Aggregation.\n\nImplementation of this pipeline allows for the user to in essence \"make\" a\ncoherence measure of his/her choice by choosing a method in each of the pipelines.\n\n[1] Michael Roeder, Andreas Both and Alexander Hinneburg. Exploring the space of topic\ncoherence measures. http://svn.aksw.org/papers/2015/WSDM_Topic_Evaluation/public.pdf.\n\"\"\"",
        "\"\"\"\n    Objects of this class allow for building and maintaining a model for topic\n    coherence.\n\n    The main methods are:\n\n    1. constructor, which initializes the four stage pipeline by accepting a coherence measure,\n    2. the ``get_coherence()`` method, which returns the topic coherence.\n\n    >>> cm = CoherenceModel(model=tm, corpus=corpus, coherence='u_mass')  # tm is the trained topic model\n    >>> cm.get_coherence()\n\n    Model persistency is achieved via its load/save methods.\n    \"\"\"",
        "\"\"\"\n        Args:\n        ----\n        model : Pre-trained topic model.\n        texts : Tokenized texts. Needed for coherence models that use sliding window based probability estimator.\n        corpus : Gensim document corpus.\n        dictionary : Gensim dictionary mapping of id word to create corpus.\n        coherence : Coherence measure to be used. Supported values are:\n                    u_mass\n                    c_v\n        \"\"\"",
        "\"\"\"Internal helper function to return topics from a trained topic model.\"\"\""
    ],
    "functions": [
        "__str__",
        "_get_topics",
        "get_coherence"
    ],
    "classes": [
        "CoherenceModel"
    ]
}