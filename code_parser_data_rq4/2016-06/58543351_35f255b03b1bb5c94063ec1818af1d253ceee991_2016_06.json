{
    "identifiers": [
        "org",
        "apache",
        "hadoop",
        "io",
        "retry",
        "com",
        "google",
        "common",
        "Preconditions",
        "org",
        "apache",
        "hadoop",
        "classification",
        "InterfaceAudience",
        "org",
        "apache",
        "hadoop",
        "classification",
        "InterfaceStability",
        "org",
        "apache",
        "hadoop",
        "ipc",
        "Client",
        "org",
        "apache",
        "hadoop",
        "util",
        "Daemon",
        "org",
        "apache",
        "hadoop",
        "util",
        "Time",
        "org",
        "apache",
        "hadoop",
        "util",
        "concurrent",
        "AsyncGet",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "java",
        "lang",
        "reflect",
        "Method",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "concurrent",
        "TimeoutException",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicReference",
        "InterfaceAudience",
        "Private",
        "LOG",
        "LoggerFactory",
        "getLogger",
        "LOWER_LAYER_ASYNC_RETURN",
        "ASYNC_RETURN",
        "InterfaceStability",
        "Unstable",
        "SuppressWarnings",
        "asyncGet",
        "ASYNC_RETURN",
        "get",
        "asyncGet",
        "ASYNC_RETURN",
        "asyncGet",
        "getLowerLayerAsyncReturn",
        "InterfaceStability",
        "Unstable",
        "asyncReturn",
        "LOWER_LAYER_ASYNC_RETURN",
        "asyncReturn",
        "asyncGet",
        "LOWER_LAYER_ASYNC_RETURN",
        "get",
        "Preconditions",
        "checkNotNull",
        "asyncGet",
        "LOWER_LAYER_ASYNC_RETURN",
        "asyncGet",
        "queue",
        "emptyStartTime",
        "Time",
        "monotonicNow",
        "queue",
        "size",
        "time",
        "queue",
        "isEmpty",
        "Time",
        "monotonicNow",
        "emptyStartTime",
        "time",
        "c",
        "added",
        "queue",
        "offer",
        "c",
        "Preconditions",
        "checkState",
        "added",
        "Preconditions",
        "checkState",
        "queue",
        "isEmpty",
        "t",
        "queue",
        "poll",
        "queue",
        "isEmpty",
        "emptyStartTime",
        "Time",
        "monotonicNow",
        "t",
        "queue",
        "processor",
        "call",
        "LOG",
        "isDebugEnabled",
        "LOG",
        "debug",
        "call",
        "queue",
        "offer",
        "call",
        "processor",
        "tryStart",
        "size",
        "queue",
        "size",
        "i",
        "i",
        "size",
        "i",
        "c",
        "queue",
        "poll",
        "c",
        "isDone",
        "queue",
        "offer",
        "c",
        "GRACE_PERIOD",
        "SLEEP_PERIOD",
        "running",
        "d",
        "d",
        "running",
        "get",
        "current",
        "currentThread",
        "running",
        "compareAndSet",
        "current",
        "daemon",
        "Override",
        "isRunning",
        "sleep",
        "SLEEP_PERIOD",
        "e",
        "kill",
        "checkCalls",
        "tryStop",
        "running",
        "compareAndSet",
        "current",
        "daemon",
        "Preconditions",
        "checkState",
        "LOG",
        "isDebugEnabled",
        "LOG",
        "debug",
        "daemon",
        "daemon",
        "start",
        "d",
        "queue",
        "isEmpty",
        "GRACE_PERIOD",
        "kill",
        "d",
        "d",
        "LOG",
        "isDebugEnabled",
        "LOG",
        "debug",
        "d",
        "running",
        "compareAndSet",
        "d",
        "Preconditions",
        "checkState",
        "value",
        "timeout",
        "unit",
        "value",
        "value",
        "AsyncGet",
        "Util",
        "wait",
        "timeout",
        "unit",
        "value",
        "value",
        "timeout",
        "unit",
        "v",
        "Preconditions",
        "checkNotNull",
        "v",
        "Preconditions",
        "checkState",
        "value",
        "value",
        "v",
        "notify",
        "value",
        "asyncCallHandler",
        "asyncCallReturn",
        "lowerLayerAsyncGet",
        "method",
        "args",
        "isRpc",
        "callId",
        "counters",
        "retryInvocationHandler",
        "asyncCallHandler",
        "method",
        "args",
        "isRpc",
        "callId",
        "counters",
        "retryInvocationHandler",
        "asyncCallHandler",
        "asyncCallHandler",
        "r",
        "invokeOnce",
        "r",
        "getState",
        "RETURNED",
        "EXCEPTION",
        "asyncCallReturn",
        "r",
        "RETRY",
        "invokeOnce",
        "ASYNC_CALL_IN_PROGRESS",
        "ASYNC_INVOKED",
        "Preconditions",
        "checkState",
        "Override",
        "LOG",
        "debug",
        "getClass",
        "getSimpleName",
        "lowerLayerAsyncGet",
        "isDone",
        "lowerLayerAsyncGet",
        "isDone",
        "LOG",
        "trace",
        "isDone",
        "isDone",
        "CallReturn",
        "ASYNC_CALL_IN_PROGRESS",
        "lowerLayerAsyncGet",
        "get",
        "TimeUnit",
        "SECONDS",
        "lowerLayerAsyncGet",
        "LOG",
        "trace",
        "mode",
        "Client",
        "isAsynchronousMode",
        "Client",
        "setAsynchronousMode",
        "r",
        "invokeMethod",
        "Preconditions",
        "checkState",
        "r",
        "lowerLayerAsyncGet",
        "getLowerLayerAsyncReturn",
        "counters",
        "isZeros",
        "LOG",
        "trace",
        "asyncCallHandler",
        "initAsyncCall",
        "asyncCallReturn",
        "CallReturn",
        "ASYNC_INVOKED",
        "Client",
        "setAsynchronousMode",
        "mode",
        "asyncCalls",
        "hasSuccessfulCall",
        "method",
        "args",
        "isRpc",
        "callId",
        "counters",
        "retryInvocationHandler",
        "method",
        "args",
        "isRpc",
        "callId",
        "counters",
        "retryInvocationHandler",
        "hasSuccessfulCall",
        "asyncCall",
        "asyncCallReturn",
        "asyncCalls",
        "addCall",
        "asyncCall",
        "asyncGet",
        "Override",
        "timeout",
        "unit",
        "c",
        "asyncCallReturn",
        "waitAsyncValue",
        "timeout",
        "unit",
        "r",
        "c",
        "getReturnValue",
        "hasSuccessfulCall",
        "r",
        "Override",
        "asyncCallReturn",
        "isDone",
        "ASYNC_RETURN",
        "asyncGet"
    ],
    "literals": [
        "\"unchecked\"",
        "\"add \"",
        "\"Starting AsyncCallQueue.Processor \"",
        "\"Killing \"",
        "\"waitCallReturn timed out \"",
        "\" \"",
        "\"{}.invoke {}\"",
        "\"invoke: lowerLayerAsyncGet.isDone()? {}\"",
        "\"invoke: ASYNC_INVOKED\"",
        "\"invoke: initAsyncCall\""
    ],
    "variables": [
        "value",
        "asyncCallHandler",
        "lowerLayerAsyncGet"
    ],
    "comments": [
        "the call is not done yet, add it back.",
        "the async call is done",
        "nothing to do",
        "async call was submitted early, check the lower level async call",
        "submit a new async call",
        "invokeMethod should set LOWER_LAYER_ASYNC_RETURN and return null.",
        "first async attempt, initialize"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "Handle async calls.",
        "@return the async return value from {@link AsyncCallHandler}.",
        "For the lower rpc layers to set the async return value.",
        "A simple concurrent queue which keeping track the empty start time.",
        "Is the queue empty for more than the given time in millisecond?",
        "A queue for handling async calls.",
        "Process the async calls in the queue.",
        "@return true if the call is done; otherwise, return false."
    ],
    "functions": [
        "getAsyncReturn",
        "setLowerLayerAsyncReturn",
        "getLowerLayerAsyncReturn",
        "size",
        "isEmpty",
        "offer",
        "T",
        "poll",
        "addCall",
        "checkCalls",
        "isRunning",
        "tryStart",
        "run",
        "tryStop",
        "kill",
        "V",
        "waitAsyncValue",
        "isDone",
        "AsyncCall",
        "isDone",
        "CallReturn",
        "invoke",
        "AsyncCall",
        "newAsyncCall",
        "hasSuccessfulCall",
        "initAsyncCall",
        "get",
        "isDone"
    ],
    "classes": [
        "AsyncCallHandler",
        "ConcurrentQueue",
        "AsyncCallQueue",
        "Processor",
        "AsyncValue",
        "AsyncCall"
    ]
}