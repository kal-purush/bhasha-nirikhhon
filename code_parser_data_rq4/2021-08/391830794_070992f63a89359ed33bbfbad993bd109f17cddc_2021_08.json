{
    "identifiers": [
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "i",
        "i",
        "i",
        "val",
        "startingBoard",
        "j",
        "startingBoard",
        "j",
        "val",
        "i",
        "i",
        "startingBoard",
        "j",
        "validBoard",
        "startingBoard",
        "inputValid",
        "inputIsInvalid",
        "solve",
        "startingBoard",
        "updateBoard",
        "answer",
        "inputValid",
        "board",
        "solved",
        "board",
        "board",
        "nextBoards",
        "board",
        "keepOnlyValid",
        "possibilities",
        "searchForSolution",
        "validBoards",
        "boards",
        "boards",
        "boards",
        "solve",
        "first",
        "tryPath",
        "tryPath",
        "searchForSolution",
        "boards",
        "board",
        "i",
        "i",
        "j",
        "j",
        "board",
        "i",
        "j",
        "board",
        "findEmptySquare",
        "board",
        "firstEmpty",
        "firstEmpty",
        "firstEmpty",
        "i",
        "i",
        "board",
        "newBoard",
        "y",
        "row",
        "x",
        "i",
        "newBoard",
        "y",
        "row",
        "res",
        "newBoard",
        "res",
        "board",
        "i",
        "i",
        "j",
        "j",
        "board",
        "i",
        "j",
        "i",
        "j",
        "boards",
        "i",
        "boards",
        "i",
        "validBoard",
        "boards",
        "i",
        "res",
        "boards",
        "i",
        "res",
        "board",
        "rowsGood",
        "board",
        "columnsGood",
        "board",
        "boxesGood",
        "board",
        "board",
        "i",
        "i",
        "j",
        "j",
        "cur",
        "board",
        "i",
        "j",
        "board",
        "i",
        "j",
        "cur",
        "board",
        "i",
        "j",
        "board",
        "i",
        "i",
        "j",
        "j",
        "cur",
        "board",
        "j",
        "i",
        "board",
        "j",
        "i",
        "cur",
        "board",
        "j",
        "i",
        "board",
        "y",
        "y",
        "x",
        "x",
        "i",
        "i",
        "boxCoordinates",
        "i",
        "coordinates",
        "y",
        "coordinates",
        "x",
        "cur",
        "board",
        "coordinates",
        "coordinates",
        "board",
        "coordinates",
        "coordinates",
        "cur",
        "board",
        "coordinates",
        "coordinates",
        "board",
        "board",
        "i",
        "i",
        "i",
        "i",
        "i",
        "i",
        "j",
        "j",
        "row",
        "row",
        "row",
        "board",
        "i",
        "j",
        "row",
        "row",
        "board",
        "i",
        "j",
        "i",
        "row",
        "i",
        "i",
        "i",
        "i"
    ],
    "literals": [
        "\"\"",
        "\"row \"",
        "\"NO SOLUTION EXISTS TO THE GIVEN BOARD\"",
        "\"\"",
        "\"\"",
        "\"\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\"",
        "\"row \"",
        "\"row \"",
        "\"THE GIVEN BOARD IS INVALID\""
    ],
    "variables": [
        "b",
        "bd1",
        "bd2",
        "bd3",
        "bd4",
        "startingBoard",
        "j",
        "i",
        "val",
        "inputValid",
        "answer",
        "possibilities",
        "validBoards",
        "first",
        "tryPath",
        "i",
        "j",
        "res",
        "firstEmpty",
        "y",
        "x",
        "i",
        "newBoard",
        "row",
        "i",
        "j",
        "res",
        "i",
        "i",
        "cur",
        "j",
        "i",
        "cur",
        "j",
        "boxCoordinates",
        "y",
        "x",
        "cur",
        "i",
        "coordinates",
        "i",
        "row",
        "j"
    ],
    "comments": [
        "// ____DATA DEFINITIONS____ // //",
        "Board is List[List[Int]] or false",
        "interp. as a sudoku board, or false if the given board is invalid",
        "EXAMPLE BOARDS",
        "// ____FUNCTION DEFINITIONS____ // //",
        "null -> null",
        "populate the board with whatever the user inputted",
        "console.log(startingBoard)",
        "THIS FUNCTION WORKS.",
        "Board -> Board",
        "solves the given sudoku board",
        "ASSUME the given sudoku board is valid",
        "______TESTS______ //",
        "console.log(solve(bd4))",
        "______TESTS______ //",
        "List[Board] -> Board or false",
        "finds a valid solution to the sudoku problem",
        "backtracking search for solution",
        "THIS FUNCTION WORKS.",
        "Board -> Boolean",
        "checks to see if the given puzzle is solved",
        "______TESTS______ //",
        "console.log(solved(bd3))",
        "______TESTS______ //",
        "THIS FUNCTION WORKS.",
        "Board -> List[Board]",
        "finds the first emply square and generates 9 different boards filling in that square with numbers 1...9",
        "THIS FUNCTION WORKS.",
        "Board -> [Int, Int]",
        "(get the i j coordinates for the first empty square)",
        "______TESTS______ //",
        "console.log(nextBoards(bd3))",
        "console.log(findEmptySquare(bd3))",
        "______TESTS______ //",
        "THIS FUNCTION WORKS.",
        "List[Board] -> List[Board]",
        "filters out all of the invalid boards from the list",
        "______TESTS______ //",
        "console.log(keepOnlyValid([bd1, bd2, bd3]))",
        "______TESTS______ //",
        "THIS FUNCTION WORKS.",
        "Board -> Boolean",
        "checks to see if given board is valid",
        "THIS FUNCTION WORKS.",
        "Board -> Boolean",
        "makes sure there are no repeating numbers for each row",
        "THIS FUNCTION WORKS.",
        "Board -> Boolean",
        "makes sure there are no repeating numbers for each column",
        "transform this everywhere to update res",
        "THIS FUNCTION WORKS.",
        "Board -> Boolean",
        "makes sure there are no repeating numbers for each box",
        "each traversal should examine each box",
        "______TESTS______ //",
        "console.log(\"Rows:\")",
        "console.log(rowsGood(bd1))",
        "console.log(rowsGood(bd2))",
        "console.log(rowsGood(bd3))",
        "console.log(\"Columns:\")",
        "console.log(columnsGood(bd1))",
        "console.log(columnsGood(bd2))",
        "console.log(columnsGood(bd3))",
        "console.log(\"Boxes:\")",
        "console.log(boxesGood(bd1))",
        "console.log(boxesGood(bd2))",
        "console.log(boxesGood(bd3))",
        "console.log(\"Valid?\")",
        "console.log(validBoard(bd1))",
        "console.log(validBoard(bd2))",
        "console.log(validBoard(bd3))",
        "______TESTS______ //",
        "THIS FUNCTION WORKS.",
        "Board -> null",
        "update the DOM with the answer",
        "starting board is invalid or puzzle is insolvable"
    ],
    "docstrings": [],
    "functions": [
        "initiate",
        "solve",
        "searchForSolution",
        "solved",
        "nextBoards",
        "findEmptySquare",
        "keepOnlyValid",
        "validBoard",
        "rowsGood",
        "columnsGood",
        "boxesGood",
        "updateBoard",
        "inputIsInvalid"
    ],
    "classes": []
}