{
    "identifiers": [
        "os",
        "sys",
        "random",
        "math",
        "re",
        "time",
        "numpy",
        "np",
        "tensorflow",
        "tf",
        "matplotlib",
        "matplotlib",
        "pyplot",
        "plt",
        "matplotlib",
        "patches",
        "patches",
        "os",
        "getcwd",
        "ROOT_DIR",
        "endswith",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "dirname",
        "ROOT_DIR",
        "sys",
        "path",
        "append",
        "ROOT_DIR",
        "mrcnn",
        "utils",
        "mrcnn",
        "visualize",
        "mrcnn",
        "visualize",
        "display_images",
        "mrcnn",
        "model",
        "modellib",
        "mrcnn",
        "model",
        "log",
        "ship",
        "ship",
        "shipConfig",
        "config",
        "__class__",
        "InferenceConfig",
        "config",
        "display",
        "rows",
        "cols",
        "size",
        "plt",
        "subplots",
        "rows",
        "cols",
        "figsize",
        "size",
        "cols",
        "size",
        "rows",
        "ax",
        "ship",
        "shipDataset",
        "dataset",
        "load_ship",
        "ship_DIR",
        "dataset",
        "prepare",
        "format",
        "len",
        "dataset",
        "image_ids",
        "dataset",
        "class_names",
        "tf",
        "device",
        "DEVICE",
        "modellib",
        "MaskRCNN",
        "mode",
        "model_dir",
        "MODEL_DIR",
        "config",
        "config",
        "weights_path",
        "model",
        "load_weights",
        "weights_path",
        "by_name",
        "random",
        "choice",
        "dataset",
        "image_ids",
        "modellib",
        "load_image_gt",
        "dataset",
        "config",
        "image_id",
        "use_mini_mask",
        "dataset",
        "image_info",
        "image_id",
        "format",
        "info",
        "info",
        "image_id",
        "dataset",
        "image_reference",
        "image_id",
        "model",
        "detect",
        "image",
        "verbose",
        "get_ax",
        "results",
        "visualize",
        "display_instances",
        "image",
        "r",
        "r",
        "r",
        "dataset",
        "class_names",
        "r",
        "ax",
        "ax",
        "title",
        "log",
        "gt_class_id",
        "log",
        "gt_bbox",
        "log",
        "gt_mask",
        "ship",
        "color_splash",
        "image",
        "r",
        "display_images",
        "splash",
        "cols",
        "modellib",
        "build_rpn_targets",
        "image",
        "shape",
        "model",
        "anchors",
        "gt_class_id",
        "gt_bbox",
        "model",
        "config",
        "log",
        "target_rpn_match",
        "log",
        "target_rpn_bbox",
        "np",
        "where",
        "target_rpn_match",
        "np",
        "where",
        "target_rpn_match",
        "np",
        "where",
        "target_rpn_match",
        "model",
        "anchors",
        "positive_anchor_ix",
        "model",
        "anchors",
        "negative_anchor_ix",
        "model",
        "anchors",
        "neutral_anchor_ix",
        "log",
        "positive_anchors",
        "log",
        "negative_anchors",
        "log",
        "neutral_anchors",
        "utils",
        "apply_box_deltas",
        "positive_anchors",
        "target_rpn_bbox",
        "positive_anchors",
        "shape",
        "model",
        "config",
        "RPN_BBOX_STD_DEV",
        "log",
        "refined_anchors",
        "visualize",
        "draw_boxes",
        "image",
        "boxes",
        "positive_anchors",
        "refined_boxes",
        "refined_anchors",
        "ax",
        "get_ax",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "ancestor",
        "pillar",
        "nms_node",
        "model",
        "ancestor",
        "pillar",
        "nms_node",
        "model",
        "ancestor",
        "pillar",
        "model",
        "run_graph",
        "image",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "ancestor",
        "pillar",
        "model",
        "ancestor",
        "pillar",
        "model",
        "ancestor",
        "pillar",
        "nms_node",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "np",
        "argsort",
        "rpn",
        "flatten",
        "visualize",
        "draw_boxes",
        "image",
        "boxes",
        "model",
        "anchors",
        "sorted_anchor_ids",
        "limit",
        "ax",
        "get_ax",
        "get_ax",
        "utils",
        "denorm_boxes",
        "rpn",
        "image",
        "shape",
        "utils",
        "denorm_boxes",
        "rpn",
        "image",
        "shape",
        "utils",
        "denorm_boxes",
        "rpn",
        "image",
        "shape",
        "visualize",
        "draw_boxes",
        "image",
        "boxes",
        "pre_nms_anchors",
        "limit",
        "refined_boxes",
        "refined_anchors",
        "limit",
        "ax",
        "ax",
        "visualize",
        "draw_boxes",
        "image",
        "refined_boxes",
        "refined_anchors_clipped",
        "limit",
        "ax",
        "ax",
        "rpn",
        "limit",
        "visualize",
        "draw_boxes",
        "image",
        "refined_boxes",
        "refined_anchors_clipped",
        "ixs",
        "ax",
        "get_ax",
        "config",
        "IMAGE_SHAPE",
        "rpn",
        "limit",
        "np",
        "array",
        "h",
        "w",
        "h",
        "w",
        "visualize",
        "draw_boxes",
        "image",
        "refined_boxes",
        "proposals",
        "ax",
        "get_ax",
        "model",
        "run_graph",
        "image",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "mrcnn",
        "astype",
        "np",
        "int32",
        "np",
        "where",
        "det_class_ids",
        "det_class_ids",
        "det_count",
        "mrcnn",
        "det_count",
        "format",
        "det_count",
        "np",
        "array",
        "dataset",
        "class_names",
        "det_class_ids",
        "format",
        "dataset",
        "class_names",
        "c",
        "s",
        "c",
        "c",
        "s",
        "detections",
        "detections",
        "visualize",
        "draw_boxes",
        "image",
        "refined_boxes",
        "utils",
        "denorm_boxes",
        "detections",
        "image",
        "shape",
        "visibilities",
        "len",
        "detections",
        "captions",
        "captions",
        "title",
        "ax",
        "get_ax",
        "config",
        "IMAGE_SHAPE",
        "np",
        "around",
        "mrcnn",
        "np",
        "array",
        "h",
        "w",
        "h",
        "w",
        "astype",
        "np",
        "int32",
        "np",
        "argmax",
        "mrcnn",
        "axis",
        "mrcnn",
        "np",
        "arange",
        "roi_class_ids",
        "shape",
        "roi_class_ids",
        "np",
        "array",
        "dataset",
        "class_names",
        "roi_class_ids",
        "np",
        "where",
        "roi_class_ids",
        "format",
        "np",
        "sum",
        "np",
        "proposals",
        "axis",
        "proposals",
        "shape",
        "format",
        "len",
        "roi_positive_ixs",
        "np",
        "unique",
        "roi_class_names",
        "return_counts",
        "np",
        "random",
        "randint",
        "proposals",
        "shape",
        "limit",
        "format",
        "dataset",
        "class_names",
        "c",
        "s",
        "c",
        "c",
        "s",
        "roi_class_ids",
        "ixs",
        "roi_scores",
        "ixs",
        "visualize",
        "draw_boxes",
        "image",
        "boxes",
        "proposals",
        "ixs",
        "visibilities",
        "np",
        "where",
        "roi_class_ids",
        "ixs",
        "captions",
        "captions",
        "title",
        "ax",
        "get_ax",
        "mrcnn",
        "np",
        "arange",
        "proposals",
        "shape",
        "roi_class_ids",
        "log",
        "roi_bbox_specific",
        "utils",
        "apply_box_deltas",
        "proposals",
        "roi_bbox_specific",
        "config",
        "BBOX_STD_DEV",
        "astype",
        "np",
        "int32",
        "log",
        "refined_proposals",
        "np",
        "random",
        "randint",
        "len",
        "roi_positive_ixs",
        "limit",
        "format",
        "dataset",
        "class_names",
        "c",
        "s",
        "c",
        "c",
        "s",
        "roi_class_ids",
        "roi_positive_ixs",
        "ids",
        "roi_scores",
        "roi_positive_ixs",
        "ids",
        "visualize",
        "draw_boxes",
        "image",
        "boxes",
        "proposals",
        "roi_positive_ixs",
        "ids",
        "refined_boxes",
        "refined_proposals",
        "roi_positive_ixs",
        "ids",
        "visibilities",
        "np",
        "where",
        "roi_class_ids",
        "roi_positive_ixs",
        "ids",
        "captions",
        "captions",
        "title",
        "ax",
        "get_ax",
        "np",
        "where",
        "roi_class_ids",
        "format",
        "keep",
        "shape",
        "keep",
        "np",
        "intersect1d",
        "keep",
        "np",
        "where",
        "roi_scores",
        "config",
        "DETECTION_MIN_CONFIDENCE",
        "format",
        "config",
        "DETECTION_MIN_CONFIDENCE",
        "keep",
        "shape",
        "keep",
        "refined_proposals",
        "keep",
        "roi_scores",
        "keep",
        "roi_class_ids",
        "keep",
        "class_id",
        "np",
        "unique",
        "pre_nms_class_ids",
        "np",
        "where",
        "pre_nms_class_ids",
        "class_id",
        "utils",
        "non_max_suppression",
        "pre_nms_boxes",
        "ixs",
        "pre_nms_scores",
        "ixs",
        "config",
        "DETECTION_NMS_THRESHOLD",
        "keep",
        "ixs",
        "class_keep",
        "np",
        "union1d",
        "nms_keep",
        "class_keep",
        "format",
        "dataset",
        "class_names",
        "class_id",
        "keep",
        "ixs",
        "class_keep",
        "np",
        "intersect1d",
        "keep",
        "nms_keep",
        "astype",
        "np",
        "int32",
        "format",
        "keep",
        "shape",
        "keep",
        "np",
        "arange",
        "len",
        "keep",
        "format",
        "dataset",
        "class_names",
        "c",
        "s",
        "c",
        "c",
        "s",
        "roi_class_ids",
        "keep",
        "ixs",
        "roi_scores",
        "keep",
        "ixs",
        "visualize",
        "draw_boxes",
        "image",
        "boxes",
        "proposals",
        "keep",
        "ixs",
        "refined_boxes",
        "refined_proposals",
        "keep",
        "ixs",
        "visibilities",
        "np",
        "where",
        "roi_class_ids",
        "keep",
        "ixs",
        "captions",
        "captions",
        "title",
        "ax",
        "get_ax",
        "display_images",
        "np",
        "transpose",
        "gt_mask",
        "cmap",
        "model",
        "run_graph",
        "image",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "mrcnn",
        "astype",
        "np",
        "int32",
        "np",
        "where",
        "det_class_ids",
        "det_class_ids",
        "det_count",
        "format",
        "det_count",
        "np",
        "array",
        "dataset",
        "class_names",
        "det_class_ids",
        "utils",
        "denorm_boxes",
        "mrcnn",
        "image",
        "shape",
        "np",
        "array",
        "mrcnn",
        "i",
        "c",
        "i",
        "c",
        "det_class_ids",
        "np",
        "array",
        "utils",
        "unmold_mask",
        "m",
        "det_boxes",
        "i",
        "image",
        "shape",
        "i",
        "m",
        "det_mask_specific",
        "log",
        "det_mask_specific",
        "log",
        "det_masks",
        "display_images",
        "det_mask_specific",
        "cmap",
        "interpolation",
        "model",
        "run_graph",
        "image",
        "tf",
        "identity",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "model",
        "keras_model",
        "get_layer",
        "output",
        "plt",
        "imshow",
        "modellib",
        "unmold_image",
        "activations",
        "config",
        "display_images",
        "np",
        "transpose",
        "activations",
        "cols"
    ],
    "literals": [
        "\"C:\\\\Users\\\\Mathithayani\\\\Mask_RCNN-master\"",
        "'C:\\\\Users\\\\Mathithayani\\\\Mask_RCNN-master\\\\logs'",
        "\"C:\\\\Users\\\\Mathithayani\\\\Mask_RCNN-master\\\\logs\\\\ship20200111T1328\\\\mask_rcnn_ship_0015.h5\"",
        "'C:\\\\Users\\\\Mathithayani\\\\Mask_RCNN-master\\\\dataset'",
        "'/gpu:0'",
        "\"inference\"",
        "\"val\"",
        "\"Images: {}\\nClasses: {}\"",
        "\"inference\"",
        "\"C:\\\\Users\\\\Mathithayani\\\\Mask_RCNN-master\\\\logs\\\\ship20200111T1328\\\\mask_rcnn_ship_0030.h5\"",
        "\"Loading weights \"",
        "\"image ID: {}.{} ({}) {}\"",
        "\"source\"",
        "\"id\"",
        "'rois'",
        "'masks'",
        "'class_ids'",
        "'scores'",
        "\"Predictions\"",
        "\"gt_class_id\"",
        "\"gt_bbox\"",
        "\"gt_mask\"",
        "'masks'",
        "\"target_rpn_match\"",
        "\"target_rpn_bbox\"",
        "\"positive_anchors\"",
        "\"negative_anchors\"",
        "\"neutral anchors\"",
        "\"refined_anchors\"",
        "\"ROI\"",
        "\"ROI/rpn_non_max_suppression:0\"",
        "\"ROI/rpn_non_max_suppression/NonMaxSuppressionV2:0\"",
        "\"ROI/rpn_non_max_suppression/NonMaxSuppressionV3:0\"",
        "\"rpn_class\"",
        "\"rpn_class\"",
        "\"pre_nms_anchors\"",
        "\"ROI/pre_nms_anchors:0\"",
        "\"refined_anchors\"",
        "\"ROI/refined_anchors:0\"",
        "\"refined_anchors_clipped\"",
        "\"ROI/refined_anchors_clipped:0\"",
        "\"post_nms_anchor_ix\"",
        "\"proposals\"",
        "\"ROI\"",
        "'rpn_class'",
        "\"pre_nms_anchors\"",
        "\"refined_anchors\"",
        "\"refined_anchors_clipped\"",
        "\"post_nms_anchor_ix\"",
        "'proposals'",
        "\"proposals\"",
        "\"ROI\"",
        "\"probs\"",
        "\"mrcnn_class\"",
        "\"deltas\"",
        "\"mrcnn_bbox\"",
        "\"masks\"",
        "\"mrcnn_mask\"",
        "\"detections\"",
        "\"mrcnn_detection\"",
        "'detections'",
        "'detections'",
        "\"{} detections: {}\"",
        "\"{} {:.3f}\"",
        "\"\"",
        "\"Detections\"",
        "\"proposals\"",
        "\"probs\"",
        "\"probs\"",
        "\"{} Valid proposals out of {}\"",
        "\"{} Positive ROIs\"",
        "\"{} {:.3f}\"",
        "\"\"",
        "\"ROIs Before Refinement\"",
        "\"deltas\"",
        "\"roi_bbox_specific\"",
        "\"refined_proposals\"",
        "\"{} {:.3f}\"",
        "\"\"",
        "\"ROIs After Refinement\"",
        "\"Keep {} detections:\\n{}\"",
        "\"Remove boxes below {} confidence. Keep {}:\\n{}\"",
        "\"{:22}: {} -> {}\"",
        "\"\\nKept after per-class NMS: {}\\n{}\"",
        "\"{} {:.3f}\"",
        "\"\"",
        "\"Detections after NMS\"",
        "\"Blues\"",
        "\"detections\"",
        "\"mrcnn_detection\"",
        "\"masks\"",
        "\"mrcnn_mask\"",
        "'detections'",
        "\"{} detections: {}\"",
        "\"detections\"",
        "\"masks\"",
        "\"det_mask_specific\"",
        "\"det_masks\"",
        "\"Blues\"",
        "\"none\"",
        "\"input_image\"",
        "\"input_image\"",
        "\"res2c_out\"",
        "\"res2c_out\"",
        "\"res3c_out\"",
        "\"res3c_out\"",
        "\"res4w_out\"",
        "\"res4w_out\"",
        "\"rpn_bbox\"",
        "\"rpn_bbox\"",
        "\"roi\"",
        "\"ROI\"",
        "\"input_image\"",
        "\"res2c_out\""
    ],
    "variables": [
        "ROOT_DIR",
        "ROOT_DIR",
        "MODEL_DIR",
        "SHIP_WEIGHTS_PATH",
        "config",
        "ship_DIR",
        "GPU_COUNT",
        "IMAGES_PER_GPU",
        "config",
        "DEVICE",
        "TEST_MODE",
        "_",
        "ax",
        "dataset",
        "model",
        "weights_path",
        "image_id",
        "image",
        "image_meta",
        "gt_class_id",
        "gt_bbox",
        "gt_mask",
        "info",
        "results",
        "ax",
        "r",
        "splash",
        "target_rpn_match",
        "target_rpn_bbox",
        "positive_anchor_ix",
        "negative_anchor_ix",
        "neutral_anchor_ix",
        "positive_anchors",
        "negative_anchors",
        "neutral_anchors",
        "refined_anchors",
        "pillar",
        "nms_node",
        "nms_node",
        "nms_node",
        "rpn",
        "limit",
        "sorted_anchor_ids",
        "limit",
        "ax",
        "pre_nms_anchors",
        "refined_anchors",
        "refined_anchors_clipped",
        "limit",
        "ixs",
        "limit",
        "h",
        "w",
        "proposals",
        "mrcnn",
        "det_class_ids",
        "det_count",
        "det_class_ids",
        "detections",
        "captions",
        "h",
        "w",
        "proposals",
        "roi_class_ids",
        "roi_scores",
        "roi_class_names",
        "roi_positive_ixs",
        "limit",
        "ixs",
        "captions",
        "roi_bbox_specific",
        "refined_proposals",
        "limit",
        "ids",
        "captions",
        "keep",
        "keep",
        "pre_nms_boxes",
        "pre_nms_scores",
        "pre_nms_class_ids",
        "nms_keep",
        "ixs",
        "class_keep",
        "class_keep",
        "nms_keep",
        "keep",
        "ixs",
        "captions",
        "mrcnn",
        "det_class_ids",
        "det_count",
        "det_class_ids",
        "det_boxes",
        "det_mask_specific",
        "det_masks",
        "activations",
        "_"
    ],
    "comments": [
        "Root directory of the project",
        "Go up two levels to the repo root",
        "Import Mask RCNN",
        "Import Mask RCNN",
        "To find local version of the library",
        "matplotlib inline",
        "Directory to save logs and trained model",
        "Path to Ballon trained weights",
        "You can download this file from the Releases page",
        "https://github.com/matterport/Mask_RCNN/releases",
        "TODO: update this",
        "================================================================================================",
        "Configurations",
        "Override the training configurations with a few",
        "changes for inferencing.",
        "Run detection on one image at a time",
        "=======================================================",
        "Notebook Preferences",
        "Device to load the neural network on.",
        "Useful if you're training a model on the same",
        "machine, in which case use CPU and leave the",
        "GPU for training.",
        "/cpu:0 or /gpu:0",
        "Inspect the model in training or inference modes",
        "values: 'inference' or 'training'",
        "TODO: code for 'training' test mode not ready yet",
        "=========================================================",
        "Load Validation Dataset",
        "Load validation dataset",
        "Must call before using the dataset",
        "=========================================================",
        "Load model",
        "Create model in inference mode",
        "Set path to balloon weights file",
        "Download file from the Releases page and set its path",
        "https://github.com/matterport/Mask_RCNN/releases",
        "Or, load the last model you trained",
        "weights_path = model.find_last()[1]",
        "Load weights",
        "=====================================================",
        "Run detection",
        "image_id =190",
        "Run object detection",
        "Display results",
        "======================================================",
        "Color splash",
        "==========================================================",
        "==========================================================",
        "==========================================================",
        "Stage 1: Region Proposal Network",
        "The Region Proposal Network (RPN) runs a lightweight binary classifier on a lot of boxes (anchors) over the image and returns object/no-object scores. Anchors with high objectness score (positive anchors) are passed to the stage two to be classified.",
        "Often, even positive anchors don't cover objects fully. So the RPN also regresses a refinement (a delta in location and size) to be applied to the anchors to shift it and resize it a bit to the correct boundaries of the object.",
        "1.a RPN Targets",
        "The RPN targets are the training values for the RPN. To generate the targets, we start with a grid of anchors that cover the full image at different scales, and then we compute the IoU of the anchors with ground truth object. Positive anchors are those that have an IoU >= 0.7 with any ground truth object, and negative anchors are those that don't cover any object by more than 0.3 IoU. Anchors in between (i.e. cover an object by IoU >= 0.3 but < 0.7) are considered neutral and excluded from training.",
        "To train the RPN regressor, we also compute the shift and resizing needed to make the anchor cover the ground truth object completely.",
        "Generate RPN trainig targets",
        "target_rpn_match is 1 for positive anchors, -1 for negative anchors",
        "and 0 for neutral anchors.",
        "Apply refinement deltas to positive anchors",
        "Display positive anchors before refinement (dotted) and",
        "after refinement (solid).",
        "============================================================",
        "1.b RPN Predictions",
        "Here we run the RPN graph and display its predictions.",
        "Run RPN sub-graph",
        "node to start searching from",
        "TF 1.4 and 1.9 introduce new versions of NMS. Search for all names to support TF 1.3~1.10",
        "TF 1.9-1.10",
        "Show top anchors by score (before refinement)",
        "Show top anchors with refinement. Then with clipping to image boundaries",
        "Show refined anchors after non-max suppression",
        "Show final proposals",
        "These are the same as the previous step (refined anchors",
        "after NMS) but with coordinates normalized to [0, 1] range.",
        "Convert back to image coordinates for display",
        "=================================================================================",
        "Stage 2: Proposal Classification",
        "This stage takes the region proposals from the RPN and classifies them.",
        "2.a Proposal Classification",
        "Run the classifier heads on proposals to generate class propbabilities and bounding box regressions.",
        "Get input and output to classifier and mask heads.",
        "Get detection class IDs. Trim zero padding.",
        "2.c Step by Step Detection",
        "Here we dive deeper into the process of processing the detections.",
        "Proposals are in normalized coordinates. Scale them",
        "to image coordinates.",
        "Class ID, score, and mask per proposal",
        "How many ROIs vs empty rows?",
        "Class counts",
        "Display a random sample of proposals.",
        "Proposals classified as background are dotted, and",
        "the rest show their class and confidence score.",
        "======================",
        "Apply Bounding Box Refinement",
        "Class-specific bounding box shifts.",
        "Apply bounding box transformations",
        "Shape: [N, (y1, x1, y2, x2)]",
        "Show positive proposals",
        "ids = np.arange(roi_boxes.shape[0])  # Display all",
        "Display random sample",
        "Filter Low Confidence Detections",
        "Remove boxes classified as background",
        "Remove low confidence detections",
        "Per-Class Non-Max Suppression",
        "Apply per-class non-max suppression",
        "Pick detections of this class",
        "Apply NMS",
        "Map indicies",
        "Show final detections",
        "Display all",
        "ixs = np.random.randint(0, len(keep), 10)  # Display random sample",
        "===============================================",
        "",
        "Stage 3: Generating Masks",
        "This stage takes the detections (refined bounding boxes and class IDs) from the previous layer and runs the mask head to generate segmentation masks for every instance.",
        "3.a Mask Targets",
        "These are the training targets for the mask branch",
        "3.b Predicted Masks",
        "Get predictions of mask head",
        "Get detection class IDs. Trim zero padding.",
        "Masks",
        "=========================================",
        "Visualize Activations",
        "In some cases it helps to look at the output from different layers and visualize them to catch issues and odd patterns.",
        "Get activations of a few sample layers",
        "for resnet100",
        "Input image (normalized)",
        "Backbone feature map"
    ],
    "docstrings": [
        "\"\"\"Return a Matplotlib Axes array to be used in\n    all visualizations in the notebook. Provide a\n    central point to control graph sizes.\n    \n    Adjust the size attribute to control how big to render images\n    \"\"\""
    ],
    "functions": [
        "get_ax"
    ],
    "classes": [
        "InferenceConfig"
    ]
}