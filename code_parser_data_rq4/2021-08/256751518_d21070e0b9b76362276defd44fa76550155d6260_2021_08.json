{
    "identifiers": [
        "print_function",
        "itertools",
        "os",
        "sys",
        "optparse",
        "OptionParser",
        "random",
        "torch",
        "torch",
        "nn",
        "parallel",
        "torch",
        "utils",
        "data",
        "torchvision",
        "utils",
        "vutils",
        "utils",
        "tensor_utils",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "loaders",
        "dataset_loader",
        "trainers",
        "ffa_trainer",
        "early_stopper",
        "constants",
        "OptionParser",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "parser",
        "add_option",
        "help",
        "opts",
        "opts",
        "server_config",
        "constants",
        "server_config",
        "opts",
        "iteration",
        "opts",
        "num_workers",
        "constants",
        "END_TO_END_DEHAZER_VERSION",
        "constants",
        "ITERATION",
        "constants",
        "num_workers",
        "constants",
        "END_TO_END_CHECKPATH",
        "constants",
        "server_config",
        "opts",
        "iteration",
        "opts",
        "num_workers",
        "opts",
        "albedo_checkpt",
        "constants",
        "END_TO_END_DEHAZER_VERSION",
        "constants",
        "ITERATION",
        "constants",
        "num_workers",
        "constants",
        "END_TO_END_CHECKPATH",
        "img_tensor",
        "caption",
        "torch",
        "device",
        "torch",
        "cuda",
        "is_available",
        "plt",
        "figure",
        "figsize",
        "constants",
        "FIG_SIZE",
        "plt",
        "axis",
        "plt",
        "title",
        "caption",
        "plt",
        "imshow",
        "np",
        "transpose",
        "vutils",
        "make_grid",
        "img_tensor",
        "to",
        "device",
        "constants",
        "display_size",
        "nrow",
        "padding",
        "normalize",
        "cpu",
        "plt",
        "show",
        "argv",
        "parser",
        "parse_args",
        "argv",
        "update_config",
        "opts",
        "constants",
        "server_config",
        "torch",
        "cuda",
        "is_available",
        "torch",
        "cuda",
        "device_count",
        "torch",
        "version",
        "cuda",
        "random",
        "randint",
        "random",
        "seed",
        "manualSeed",
        "torch",
        "manual_seed",
        "manualSeed",
        "torch",
        "device",
        "opts",
        "cuda_device",
        "torch",
        "cuda",
        "is_available",
        "device",
        "ffa_trainer",
        "FFATrainer",
        "constants",
        "END_TO_END_DEHAZER_VERSION",
        "constants",
        "ITERATION",
        "device",
        "blocks",
        "opts",
        "gen_blocks",
        "lr",
        "opts",
        "g_lr",
        "dehazer",
        "update_penalties",
        "opts",
        "clarity_weight",
        "early_stopper",
        "EarlyStopper",
        "early_stopper",
        "EarlyStopperMethod",
        "L1_TYPE",
        "opts",
        "load_previous",
        "torch",
        "load",
        "constants",
        "END_TO_END_CHECKPATH",
        "dehaze_checkpoint",
        "dehaze_checkpoint",
        "dehazer",
        "load_saved_state",
        "iteration",
        "dehaze_checkpoint",
        "constants",
        "END_TO_END_CHECKPATH",
        "start_epoch",
        "dataset_loader",
        "load_end_to_end_dehazing_dataset",
        "constants",
        "DATASET_HAZY_END_TO_END_PATH",
        "constants",
        "DATASET_CLEAN_END_TO_END_PATH",
        "opts",
        "batch_size",
        "opts",
        "img_to_load",
        "opts",
        "num_workers",
        "dataset_loader",
        "load_end_to_end_dehazing_dataset",
        "constants",
        "DATASET_HAZY_END_TO_END_PATH_TEST",
        "constants",
        "DATASET_CLEAN_END_TO_END_PATH_TEST",
        "opts",
        "batch_size",
        "opts",
        "img_to_load",
        "constants",
        "server_config",
        "next",
        "iter",
        "train_loader",
        "show_images",
        "hazy_batch",
        "show_images",
        "clear_batch",
        "next",
        "iter",
        "test_loaders",
        "show_images",
        "hazy_batch",
        "show_images",
        "clear_batch",
        "epoch",
        "start_epoch",
        "constants",
        "num_epochs",
        "i",
        "train_data",
        "test_data",
        "train_loader",
        "itertools",
        "cycle",
        "test_loaders",
        "train_data",
        "hazy_batch",
        "to",
        "device",
        "clear_batch",
        "to",
        "device",
        "dehazer",
        "train",
        "hazy_tensor",
        "clear_tensor",
        "iteration",
        "test_data",
        "hazy_batch",
        "to",
        "device",
        "clear_batch",
        "to",
        "device",
        "dehazer",
        "test",
        "hazy_tensor",
        "early_stopper_l1",
        "test",
        "epoch",
        "clear_like",
        "clear_tensor",
        "i",
        "dehazer",
        "save_states",
        "epoch",
        "iteration",
        "early_stopper_l1",
        "test",
        "epoch",
        "clear_like",
        "clear_tensor",
        "main",
        "sys",
        "argv"
    ],
    "literals": [
        "'--server_config'",
        "\"Is running on COARE?\"",
        "'--cuda_device'",
        "\"CUDA Device?\"",
        "\"cuda:0\"",
        "'--img_to_load'",
        "\"Image to load?\"",
        "'--load_previous'",
        "\"Load previous?\"",
        "'--iteration'",
        "\"Style version?\"",
        "\"1\"",
        "'--clarity_weight'",
        "\"Weight\"",
        "\"1.0\"",
        "'--gen_blocks'",
        "\"Weight\"",
        "\"19\"",
        "'--batch_size'",
        "\"batch_size\"",
        "\"64\"",
        "'--num_workers'",
        "\"Workers\"",
        "\"12\"",
        "'--g_lr'",
        "\"LR\"",
        "\"0.0002\"",
        "'checkpoint/'",
        "\"_\"",
        "'.pt'",
        "\"Using COARE configuration. Workers: \"",
        "\"Path: \"",
        "\"/scratch1/scratch2/neil.delgallego/Synth Hazy 3/clean - styled/\"",
        "\"/scratch1/scratch2/neil.delgallego/Synth Hazy 3/albedo/\"",
        "\"/scratch1/scratch2/neil.delgallego/Synth Hazy 3/albedo - pseudo/\"",
        "\"/scratch1/scratch2/neil.delgallego/Synth Hazy 3/depth/\"",
        "\"/scratch1/scratch2/neil.delgallego/Hazy Dataset Benchmark/O-HAZE/hazy/\"",
        "\"/scratch1/scratch2/neil.delgallego/Hazy Dataset Benchmark/O-HAZE/GT/\"",
        "\"/scratch1/scratch2/neil.delgallego/Hazy Dataset Benchmark/RESIDE-Unannotated/\"",
        "\"/scratch1/scratch2/neil.delgallego/Hazy Dataset Benchmark/RESIDE-Unannotated/\"",
        "'checkpoint/'",
        "\"_\"",
        "'.pt'",
        "\"Using CCS configuration. Workers: \"",
        "\"Path: \"",
        "\"clean - styled/\"",
        "\"depth/\"",
        "\"Hazy Dataset Benchmark/O-HAZE/hazy/\"",
        "\"Hazy Dataset Benchmark/O-HAZE/GT/\"",
        "\"Hazy Dataset Benchmark/Standard/\"",
        "\"Hazy Dataset Benchmark/RESIDE-Unannotated/\"",
        "\"cuda:0\"",
        "\"cpu\"",
        "\"off\"",
        "\"=====================BEGIN============================\"",
        "\"Server config? %d Has GPU available? %d Count: %d\"",
        "\"Torch CUDA version: %s\"",
        "\"cpu\"",
        "\"Device: %s\"",
        "'epoch'",
        "'iteration'",
        "\"Loaded checkpt: %s Current epoch: %d\"",
        "\"===================================================\"",
        "\"Training - Hazy Images\"",
        "\"Training - Clean Images\"",
        "\"Test - Hazy Images\"",
        "\"Test - Clean Images\"",
        "\"Starting Training Loop...\"",
        "\"__main__\""
    ],
    "variables": [
        "parser",
        "constants",
        "server_config",
        "constants",
        "ITERATION",
        "constants",
        "num_workers",
        "constants",
        "END_TO_END_CHECKPATH",
        "constants",
        "DATASET_CLEAN_PATH_COMPLETE_STYLED_3",
        "constants",
        "DATASET_ALBEDO_PATH_COMPLETE_3",
        "constants",
        "DATASET_ALBEDO_PATH_PSEUDO_3",
        "constants",
        "DATASET_DEPTH_PATH_COMPLETE_3",
        "constants",
        "DATASET_OHAZE_HAZY_PATH_COMPLETE",
        "constants",
        "DATASET_OHAZE_CLEAN_PATH_COMPLETE",
        "constants",
        "DATASET_RESIDE_TEST_PATH_COMPLETE",
        "constants",
        "DATASET_STANDARD_PATH_COMPLETE",
        "constants",
        "ITERATION",
        "constants",
        "num_workers",
        "constants",
        "ALBEDO_CHECKPT",
        "constants",
        "END_TO_END_CHECKPATH",
        "constants",
        "DATASET_CLEAN_PATH_COMPLETE_STYLED_3",
        "constants",
        "DATASET_DEPTH_PATH_COMPLETE_3",
        "constants",
        "DATASET_OHAZE_HAZY_PATH_COMPLETE",
        "constants",
        "DATASET_OHAZE_CLEAN_PATH_COMPLETE",
        "constants",
        "DATASET_STANDARD_PATH_COMPLETE",
        "constants",
        "DATASET_RESIDE_TEST_PATH_COMPLETE",
        "device",
        "opts",
        "args",
        "manualSeed",
        "device",
        "dehazer",
        "early_stopper_l1",
        "start_epoch",
        "iteration",
        "dehaze_checkpoint",
        "start_epoch",
        "iteration",
        "train_loader",
        "test_loaders",
        "index",
        "_",
        "hazy_batch",
        "clear_batch",
        "_",
        "hazy_batch",
        "clear_batch",
        "_",
        "hazy_batch",
        "clear_batch",
        "hazy_tensor",
        "clear_tensor",
        "iteration",
        "_",
        "hazy_batch",
        "clear_batch",
        "hazy_tensor",
        "clear_tensor",
        "clear_like"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "--img_to_load=-1 --load_previous=0",
        "Update config if on COARE",
        "use if you want new results",
        "Create the dataloader",
        "Plot some training images",
        "for i in range(len(unseen_loaders)):",
        "_, hazy_batch = next(iter(unseen_loaders[i]))",
        "hazy_tensor = hazy_batch.to(device)",
        "",
        "dehazer.visdom_infer_test(hazy_tensor, i)",
        "",
        "for i, test_data in enumerate(test_loaders[0], 0):",
        "_, hazy_batch, clear_batch = test_data",
        "hazy_tensor = hazy_batch.to(device)",
        "clear_tensor = clear_batch.to(device)",
        "",
        "dehazer.visdom_infer_test_paired(hazy_tensor, clear_tensor, i)",
        "break",
        "For each batch in the dataloader",
        "dehazer.visdom_report(iteration)",
        "_, hazy_batch, transmission_batch, clear_batch, atmosphere_batch = train_data",
        "hazy_tensor = hazy_batch.to(device)",
        "clear_tensor = clear_batch.to(device)",
        "transmission_tensor = transmission_batch.to(device).float()",
        "atmosphere_tensor = atmosphere_batch.to(device).float()",
        "",
        "dehazer.visdom_infer_train(hazy_tensor, transmission_tensor, atmosphere_tensor, clear_tensor)",
        "",
        "_, hazy_batch, clear_batch = test_data",
        "hazy_tensor = hazy_batch.to(device)",
        "clear_tensor = clear_batch.to(device)",
        "dehazer.visdom_infer_test_paired(hazy_tensor, clear_tensor, 0)",
        "FIX for broken pipe num_workers issue."
    ],
    "docstrings": [
        "\"\"\"\nMain entry for GAN training\nCreated on Sun Apr 19 13:22:06 2020\n\n@author: delgallegon\n\"\"\""
    ],
    "functions": [
        "update_config",
        "show_images",
        "main"
    ],
    "classes": []
}