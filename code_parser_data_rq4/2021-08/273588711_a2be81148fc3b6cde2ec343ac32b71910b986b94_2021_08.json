{
    "identifiers": [
        "logging",
        "typing",
        "Dict",
        "typing",
        "boto3",
        "neo4j",
        "cartography",
        "util",
        "aws_handle_regions",
        "cartography",
        "util",
        "run_cleanup_job",
        "cartography",
        "util",
        "timeit",
        "logging",
        "getLogger",
        "timeit",
        "aws_handle_regions",
        "boto3_session",
        "boto3",
        "session",
        "Session",
        "region",
        "Dict",
        "boto3_session",
        "client",
        "region_name",
        "region",
        "Dict",
        "client",
        "describe_configuration_recorders",
        "recorder",
        "response",
        "get",
        "recorders",
        "append",
        "recorder",
        "recorders",
        "timeit",
        "aws_handle_regions",
        "boto3_session",
        "boto3",
        "session",
        "Session",
        "region",
        "Dict",
        "boto3_session",
        "client",
        "region_name",
        "region",
        "Dict",
        "client",
        "describe_delivery_channels",
        "channel",
        "response",
        "get",
        "channels",
        "append",
        "channel",
        "channels",
        "timeit",
        "aws_handle_regions",
        "boto3_session",
        "boto3",
        "session",
        "Session",
        "region",
        "Dict",
        "boto3_session",
        "client",
        "region_name",
        "region",
        "client",
        "get_paginator",
        "Dict",
        "page",
        "paginator",
        "paginate",
        "rules",
        "extend",
        "page",
        "rules",
        "timeit",
        "neo4j_session",
        "neo4j",
        "Session",
        "data",
        "Dict",
        "region",
        "current_aws_account_id",
        "aws_update_tag",
        "recorder",
        "data",
        "recorder",
        "current_aws_account_id",
        "region",
        "neo4j_session",
        "run",
        "ingest_configuration_recorders",
        "Recorders",
        "data",
        "Region",
        "region",
        "AWS_ACCOUNT_ID",
        "current_aws_account_id",
        "aws_update_tag",
        "aws_update_tag",
        "timeit",
        "neo4j_session",
        "neo4j",
        "Session",
        "data",
        "Dict",
        "region",
        "current_aws_account_id",
        "aws_update_tag",
        "channel",
        "data",
        "channel",
        "current_aws_account_id",
        "region",
        "neo4j_session",
        "run",
        "ingest_delivery_channels",
        "Channels",
        "data",
        "Region",
        "region",
        "AWS_ACCOUNT_ID",
        "current_aws_account_id",
        "aws_update_tag",
        "aws_update_tag",
        "timeit",
        "neo4j_session",
        "neo4j",
        "Session",
        "data",
        "Dict",
        "region",
        "current_aws_account_id",
        "aws_update_tag",
        "rule",
        "data",
        "rule",
        "get",
        "get",
        "detail",
        "rule",
        "details",
        "append",
        "detail",
        "details",
        "neo4j_session",
        "run",
        "ingest_config_rules",
        "Rules",
        "data",
        "Region",
        "region",
        "AWS_ACCOUNT_ID",
        "current_aws_account_id",
        "aws_update_tag",
        "aws_update_tag",
        "timeit",
        "neo4j_session",
        "neo4j",
        "Session",
        "common_job_parameters",
        "Dict",
        "run_cleanup_job",
        "neo4j_session",
        "common_job_parameters",
        "timeit",
        "neo4j_session",
        "neo4j",
        "Session",
        "boto3_session",
        "boto3",
        "session",
        "Session",
        "regions",
        "current_aws_account_id",
        "update_tag",
        "common_job_parameters",
        "Dict",
        "region",
        "regions",
        "logger",
        "info",
        "region",
        "current_aws_account_id",
        "get_configuration_recorders",
        "boto3_session",
        "region",
        "load_configuration_recorders",
        "neo4j_session",
        "recorders",
        "region",
        "current_aws_account_id",
        "update_tag",
        "get_delivery_channels",
        "boto3_session",
        "region",
        "load_delivery_channels",
        "neo4j_session",
        "channels",
        "region",
        "current_aws_account_id",
        "update_tag",
        "get_config_rules",
        "boto3_session",
        "region",
        "load_config_rules",
        "neo4j_session",
        "rules",
        "region",
        "current_aws_account_id",
        "update_tag",
        "cleanup_config",
        "neo4j_session",
        "common_job_parameters"
    ],
    "literals": [
        "'config'",
        "'ConfigurationRecorders'",
        "'config'",
        "'DeliveryChannels'",
        "'config'",
        "'describe_config_rules'",
        "'ConfigRules'",
        "'_id'",
        "f'{recorder[\"name\"]}:{current_aws_account_id}:{region}'",
        "\"name\"",
        "'_id'",
        "f'{channel[\"name\"]}:{current_aws_account_id}:{region}'",
        "\"name\"",
        "'Source'",
        "'SourceDetails'",
        "\"Source\"",
        "\"SourceDetails\"",
        "f'{detail}'",
        "\"_source_details\"",
        "'aws_import_config_cleanup.json'",
        "\"Syncing AWS Config for region '%s' in account '%s'.\""
    ],
    "variables": [
        "logger",
        "client",
        "recorders",
        "response",
        "client",
        "channels",
        "response",
        "client",
        "paginator",
        "rules",
        "ingest_configuration_recorders",
        "recorder",
        "ingest_delivery_channels",
        "channel",
        "ingest_config_rules",
        "details",
        "rule",
        "recorders",
        "channels",
        "rules"
    ],
    "comments": [
        "Recorders don't have a unique ID, as the name is autoset to \"default\", but we can",
        "generate a unique id using a combo of the name, account id and region, since the name",
        "itself is unique per region.",
        "noqa:E501",
        "Delivery channels don't have a unique ID, as the name is autoset to \"default\", but we can",
        "generate a unique id using a combo of the name, account id and region, since the name",
        "itself is unique per region."
    ],
    "docstrings": [
        "\"\"\"\n    UNWIND {Recorders} as recorder\n        MERGE (n:AWSConfigurationRecorder{id: recorder._id})\n        ON CREATE SET n.firstseen = timestamp()\n        SET n.name = recorder.name, n.role_arn = recorder.roleARN,\n            n.recording_group_all_supported = recorder.recordingGroup.allSupported,\n            n.recording_group_include_global_resource_types = recorder.recordingGroup.includeGlobalResourceTypes,\n            n.recording_group_resource_types = recorder.recordingGroup.resourceTypes,\n            n.region = {Region}, n.lastupdated = {aws_update_tag}\n        WITH n\n        MATCH (owner:AWSAccount{id: {AWS_ACCOUNT_ID}})\n        MERGE (owner)-[r:RESOURCE]->(n)\n        ON CREATE SET r.firstseen = timestamp()\n        SET r.lastupdated = {aws_update_tag}\n    \"\"\"",
        "\"\"\"\n    UNWIND {Channels} as channel\n        MERGE (n:AWSConfigDeliveryChannel{id: channel._id})\n        ON CREATE SET n.firstseen = timestamp()\n        SET n.name = channel.name,\n            n.s3_bucket_name = channel.s3BucketName,\n            n.s3_key_prefix = channel.s3KeyPrefix,\n            n.s3_kms_key_arn = channel.s3KmsKeyArn,\n            n.sns_topic_arn = channel.snsTopicARN,\n            n.config_snapshot_delivery_properties_delivery_frequency = channel.configSnapshotDeliveryProperties.deliveryFrequency,\n            n.region = {Region}, n.lastupdated = {aws_update_tag}\n        WITH n\n        MATCH (owner:AWSAccount{id: {AWS_ACCOUNT_ID}})\n        MERGE (owner)-[r:RESOURCE]->(n)\n        ON CREATE SET r.firstseen = timestamp()\n        SET r.lastupdated = {aws_update_tag}\n    \"\"\"",
        "\"\"\"\n    UNWIND {Rules} as rule\n        MERGE (n:AWSConfigRule{id: rule.ConfigRuleArn})\n        ON CREATE SET n.firstseen = timestamp()\n        SET n.name = rule.ConfigRuleName, n.description = rule.Description,\n            n.arn = rule.ConfigRuleArn,\n            n.rule_id = rule.ConfigRuleId,\n            n.scope_compliance_resource_types = rule.Scope.ComplianceResourceTypes,\n            n.scope_tag_key = rule.Scope.TagKey,\n            n.scope_tag_value = rule.Scope.TagValue,\n            n.scope_tag_compliance_resource_id = rule.Scope.ComplianceResourceId,\n            n.source_owner = rule.Source.Owner,\n            n.source_identifier = rule.Source.SourceIdentifier,\n            n.source_details = rule._source_details,\n            n.input_parameters = rule.InputParameters,\n            n.maximum_execution_frequency = rule.MaximumExecutionFrequency,\n            n.created_by = rule.CreatedBy,\n            n.region = {Region}, n.lastupdated = {aws_update_tag}\n        WITH n\n        MATCH (owner:AWSAccount{id: {AWS_ACCOUNT_ID}})\n        MERGE (owner)-[r:RESOURCE]->(n)\n        ON CREATE SET r.firstseen = timestamp()\n        SET r.lastupdated = {aws_update_tag}\n    \"\"\""
    ],
    "functions": [
        "get_configuration_recorders",
        "get_delivery_channels",
        "get_config_rules",
        "load_configuration_recorders",
        "load_delivery_channels",
        "load_config_rules",
        "cleanup_config",
        "sync"
    ],
    "classes": []
}