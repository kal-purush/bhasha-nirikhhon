{
    "identifiers": [
        "typing",
        "Any",
        "Callable",
        "Optional",
        "missing",
        "MISSING",
        "attr",
        "passthrough",
        "transform",
        "Optional",
        "Callable",
        "Any",
        "Any",
        "fallback",
        "MISSING",
        "attr",
        "transform",
        "passthrough",
        "fallback",
        "property",
        "host_attr",
        "passthrough",
        "attr",
        "passthrough",
        "host_attr",
        "instance",
        "Any",
        "owner",
        "instance",
        "host_attr",
        "hasattr",
        "instance",
        "override_attr",
        "getattr",
        "instance",
        "override_attr",
        "transform",
        "x",
        "x",
        "getattr",
        "instance",
        "attr",
        "AttributeError",
        "fallback",
        "MISSING",
        "fallback",
        "RecursionError",
        "e",
        "ValueError",
        "instance",
        "__class__",
        "attr",
        "e",
        "instance",
        "value",
        "override_attr",
        "AttributeError",
        "setattr",
        "instance",
        "override_attr",
        "value",
        "instance",
        "delattr",
        "instance",
        "override_attr",
        "owner",
        "name",
        "name"
    ],
    "literals": [
        "f\"__spec_class_attrproxy_{self.host_attr}_override\"",
        "f\"AttrProxy for `{instance.__class__.__name__}.{self.attr}` appears \"",
        "\"to be self-referential. Please change the `attr` argument to point \"",
        "\"to a different attribute.\""
    ],
    "variables": [
        "attr",
        "transform",
        "passthrough",
        "fallback",
        "host_attr",
        "host_attr"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    When instantiated using `AttrProxy('<attribute name>')`, and set as the\n    value of an attribute; that attribute will return the value of '<attribute name>'\n    instead. If some transform is required to satisfy (e.g.) types, then you\n    can also optionally specify a unary transform using\n    `AttrProxy('<attribute name>', transform=<function>)`. By default, proxied\n    attributes are locally mutable; that is, they store local overrides when\n    assigned new values. If you want mutations to be passed through to the\n    proxied attribute, then you need to specify `passthrough=True`.\n\n    A `fallback` can also be specified for whenever the host attribute has not\n    been specified or results in an AttributeError when `AttrProxy` attempts to\n    retrieve it.\n    \"\"\""
    ],
    "functions": [
        "override_attr",
        "__get__",
        "__set__",
        "__delete__",
        "__set_name__"
    ],
    "classes": [
        "AttrProxy"
    ]
}