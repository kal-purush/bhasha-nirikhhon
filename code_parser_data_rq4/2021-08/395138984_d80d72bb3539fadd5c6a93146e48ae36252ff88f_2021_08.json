{
    "identifiers": [
        "end",
        "children",
        "TrieNode",
        "word",
        "root",
        "index",
        "w",
        "word",
        "ord",
        "w",
        "ord",
        "cur",
        "children",
        "word_index",
        "cur",
        "children",
        "TrieNode",
        "cur",
        "children",
        "word_index",
        "word",
        "root",
        "index",
        "w",
        "word",
        "ord",
        "w",
        "ord",
        "cur",
        "children",
        "word_index",
        "cur",
        "children",
        "word_index",
        "cur",
        "isend",
        "prefix",
        "root",
        "index",
        "w",
        "prefix",
        "ord",
        "w",
        "ord",
        "cur",
        "children",
        "word_index",
        "cur",
        "children",
        "word_index"
    ],
    "literals": [
        "'a'",
        "'a'",
        "'a'"
    ],
    "variables": [
        "isend",
        "children",
        "root",
        "cur",
        "word_index",
        "word_index",
        "cur",
        "cur",
        "isend",
        "cur",
        "word_index",
        "cur",
        "cur",
        "word_index",
        "cur"
    ],
    "comments": [
        "Time complexity :                      Space complexity:",
        "insert : O(L)                              insert: O(L)",
        "search : O(L)                              search : O(1)",
        "prefix : O(p)                              prefix : O(1)",
        "Did code run successfully on Leetcode : yes",
        "Your Trie object will be instantiated and called as such:",
        "obj = Trie()",
        "obj.insert(word)",
        "param_2 = obj.search(word)",
        "param_3 = obj.startsWith(prefix)"
    ],
    "docstrings": [
        "\"\"\"\n        Initialize your data structure here.\n        \"\"\"",
        "\"\"\"\n        Inserts a word into the trie.\n        \"\"\"",
        "\"\"\"\n        Returns if the word is in the trie.\n        \"\"\"",
        "\"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\""
    ],
    "functions": [
        "insert",
        "search",
        "startsWith"
    ],
    "classes": [
        "TrieNode",
        "Trie"
    ]
}