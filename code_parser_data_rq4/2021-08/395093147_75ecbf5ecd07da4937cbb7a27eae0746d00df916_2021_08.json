{
    "identifiers": [
        "division",
        "print_function",
        "argparse",
        "math",
        "time",
        "torch",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "choices",
        "parser",
        "add_argument",
        "action",
        "parser",
        "add_argument",
        "action",
        "parser",
        "add_argument",
        "parser",
        "parse_args",
        "cuda",
        "bmm",
        "BMM",
        "torch",
        "device",
        "options",
        "cuda",
        "torch",
        "device",
        "torch",
        "float32",
        "dtype",
        "device",
        "torch",
        "randint",
        "len",
        "r_size",
        "options",
        "n",
        "math",
        "inf",
        "math",
        "inf",
        "BMM",
        "i",
        "options",
        "n",
        "torch",
        "randn",
        "options",
        "batch_size",
        "r_size",
        "index",
        "i",
        "kwargs",
        "torch",
        "randn",
        "r_size",
        "index",
        "i",
        "r_size",
        "index",
        "i",
        "kwargs",
        "torch",
        "zeros",
        "options",
        "batch_size",
        "r_size",
        "index",
        "i",
        "kwargs",
        "torch",
        "matmul",
        "A_s",
        "B_s",
        "A",
        "append",
        "A_s",
        "B",
        "append",
        "B_s",
        "C",
        "append",
        "C_s",
        "mshapes",
        "append",
        "A_s",
        "shape",
        "nshapes",
        "append",
        "B_s",
        "shape",
        "kshapes",
        "append",
        "A_s",
        "shape",
        "sum_size_A",
        "A_s",
        "numel",
        "sum_size_B",
        "B_s",
        "numel",
        "sum_size_C",
        "C_s",
        "numel",
        "mshapes",
        "append",
        "nshapes",
        "append",
        "kshapes",
        "append",
        "torch",
        "zeros",
        "sum_size_A",
        "kwargs",
        "torch",
        "zeros",
        "sum_size_B",
        "kwargs",
        "torch",
        "zeros",
        "sum_size_C",
        "kwargs",
        "offset_A",
        "offset_B",
        "offset_C",
        "i",
        "options",
        "n",
        "offset_A",
        "A",
        "i",
        "numel",
        "offset_A",
        "torch",
        "reshape",
        "A",
        "i",
        "offset_B",
        "B",
        "i",
        "numel",
        "offset_B",
        "torch",
        "reshape",
        "B",
        "i",
        "offset_C",
        "C",
        "i",
        "numel",
        "offset_C",
        "torch",
        "reshape",
        "C",
        "i",
        "offset_A",
        "A",
        "i",
        "numel",
        "offset_B",
        "B",
        "i",
        "numel",
        "offset_C",
        "C",
        "i",
        "numel",
        "all_offset_A",
        "append",
        "offset_A",
        "all_offset_B",
        "append",
        "offset_B",
        "all_offset_C",
        "append",
        "offset_C",
        "torch",
        "cuda",
        "IntTensor",
        "mshapes",
        "torch",
        "cuda",
        "IntTensor",
        "nshapes",
        "torch",
        "cuda",
        "IntTensor",
        "kshapes",
        "BMM",
        "forward",
        "A_con",
        "B_con",
        "C_con",
        "m_arr",
        "n_arr",
        "k_arr",
        "options",
        "n",
        "all_offset_A",
        "all_offset_B",
        "all_offset_C",
        "j",
        "options",
        "runs",
        "i",
        "options",
        "n",
        "time",
        "time",
        "torch",
        "matmul",
        "A",
        "i",
        "B",
        "i",
        "time",
        "time",
        "start",
        "min",
        "pytorch_min",
        "elapsed",
        "pytorch_time",
        "elapsed",
        "C_true",
        "append",
        "C_s_true",
        "time",
        "time",
        "BMM",
        "forward",
        "A_con",
        "B_con",
        "C_con",
        "m_arr",
        "n_arr",
        "k_arr",
        "options",
        "n",
        "all_offset_A",
        "all_offset_B",
        "all_offset_C",
        "time",
        "time",
        "start",
        "min",
        "magma_min",
        "elapsed",
        "magma_time",
        "elapsed",
        "k",
        "options",
        "n",
        "C_con",
        "all_offset_C",
        "k",
        "C_true",
        "k",
        "numel",
        "all_offset_C",
        "k",
        "torch",
        "allclose",
        "C",
        "k",
        "view_as",
        "C_true",
        "k",
        "C_true",
        "k",
        "C",
        "k",
        "view_as",
        "C_true",
        "k",
        "C_true",
        "k",
        "TIME_SCALES",
        "options",
        "scale",
        "pytorch_min",
        "scale",
        "magma_min",
        "scale",
        "pytorch_time",
        "options",
        "runs",
        "scale",
        "magma_time",
        "options",
        "runs",
        "scale",
        "format",
        "pytorch_min",
        "pytorch_average",
        "magma_min",
        "magma_average",
        "options",
        "scale"
    ],
    "literals": [
        "'s'",
        "'ms'",
        "'us'",
        "'-b'",
        "'--batch-size'",
        "'-f'",
        "'--features'",
        "'-r'",
        "'--runs'",
        "'--scale'",
        "'s'",
        "'ms'",
        "'us'",
        "'us'",
        "'-c'",
        "'--cuda'",
        "'store_true'",
        "'-d'",
        "'--double'",
        "'store_true'",
        "'-n'",
        "'--n'",
        "\"cuda\"",
        "\"cpu\"",
        "'dtype'",
        "'device'",
        "'requires_grad'",
        "'#'",
        "'PyTorch: {0:.3f}/{1:.3f} {4} | Magma {2:.3f}/{3:.3f} {4}'"
    ],
    "variables": [
        "TIME_SCALES",
        "parser",
        "options",
        "options",
        "cuda",
        "device",
        "dtype",
        "kwargs",
        "r_size",
        "A",
        "B",
        "C",
        "C_true",
        "mshapes",
        "nshapes",
        "kshapes",
        "index",
        "pytorch_min",
        "pytorch_time",
        "magma_min",
        "magma_time",
        "Mul",
        "sum_size_A",
        "sum_size_B",
        "sum_size_C",
        "A_s",
        "B_s",
        "C_s",
        "C_s_true",
        "sum_size_A",
        "sum_size_B",
        "sum_size_C",
        "A_con",
        "B_con",
        "C_con",
        "offset_A",
        "offset_B",
        "offset_C",
        "all_offset_A",
        "all_offset_B",
        "all_offset_C",
        "A_con",
        "B_con",
        "C_con",
        "offset_A",
        "offset_B",
        "offset_C",
        "m_arr",
        "n_arr",
        "k_arr",
        "result",
        "C_true",
        "start",
        "C_s_true",
        "elapsed",
        "pytorch_min",
        "start",
        "result",
        "elapsed",
        "magma_min",
        "C",
        "k",
        "scale",
        "pytorch_average",
        "magma_average"
    ],
    "comments": [
        "change this line",
        "generate \"n\" random matrix with different #columns",
        "r_size = [2,4,8,16]",
        "print(A_s.dtype)",
        "print(B_s.dtype)",
        "print(C_s.dtype)",
        "Force CUDA initialization",
        "adding one extra elements since magma needs it",
        "making a contiguous tensor",
        "print('tensors created with size:', sum_size_A)",
        "Force CUDA initialization",
        "Force CUDA initialization",
        "print(m_arr.dtype)",
        "print(n_arr.dtype)",
        "print(k_arr.dtype)",
        "# Force CUDA initialization",
        "Force CUDA initialization",
        "Force CUDA initialization",
        "Force CUDA initialization",
        "result = BMM.forward(A, B, C, m_arr, n_arr, k_arr, options.n)",
        "calling magma",
        "print('start calling mamgma')",
        "result_single = BMM.single(A_s, B_s, C_s, A_s.shape[0], B_s.shape[1], A_s.shape[1])",
        "print('Single mode: C true:', C_s_true)",
        "print('Single mode: C magma:', C_s)",
        "Force CUDA initialization",
        "new_h, new_C = rnn(X, (h, C))",
        "(new_h.sum() + new_C.sum()).backward()",
        "for _ in range(options.runs):",
        "rnn.zero_grad()",
        "start = time.time()",
        "new_h, new_C = rnn(X, (h, C))",
        "elapsed = time.time() - start",
        "forward_min = min(forward_min, elapsed)",
        "forward_time += elapsed",
        "start = time.time()",
        "(new_h.sum() + new_C.sum()).backward()",
        "elapsed = time.time() - start",
        "backward_min = min(backward_min, elapsed)",
        "backward_time += elapsed"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}