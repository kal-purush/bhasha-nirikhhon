{
    "identifiers": [
        "builtins",
        "unicode",
        "re",
        "__init_regex",
        "staticmethod",
        "re",
        "compile",
        "regex",
        "append",
        "re",
        "compile",
        "format",
        "r",
        "regex",
        "append",
        "re",
        "compile",
        "regex",
        "append",
        "re",
        "compile",
        "regex",
        "append",
        "re",
        "compile",
        "regex",
        "append",
        "re",
        "compile",
        "regex",
        "append",
        "re",
        "compile",
        "regex",
        "append",
        "re",
        "compile",
        "regex",
        "append",
        "re",
        "compile",
        "regex",
        "append",
        "re",
        "compile",
        "regex",
        "value",
        "isinstance",
        "value",
        "unicode",
        "r",
        "regex",
        "r",
        "get",
        "match",
        "value",
        "r",
        "get",
        "value",
        "__checktype",
        "value",
        "iterable",
        "isinstance",
        "iterable",
        "unicode",
        "__checktype",
        "iterable",
        "len",
        "dt",
        "results",
        "append",
        "dt",
        "iterable",
        "isinstance",
        "iterable",
        "item",
        "iterable",
        "isinstance",
        "item",
        "isinstance",
        "item",
        "results",
        "extend",
        "check_iterable",
        "item",
        "__checktype",
        "item",
        "len",
        "dt",
        "results",
        "append",
        "dt",
        "item",
        "isinstance",
        "iterable",
        "_",
        "item",
        "iterable",
        "items",
        "isinstance",
        "item",
        "isinstance",
        "item",
        "results",
        "extend",
        "check_iterable",
        "item",
        "__checktype",
        "item",
        "len",
        "dt",
        "results",
        "append",
        "dt",
        "item",
        "results"
    ],
    "literals": [
        "'type'",
        "'ip'",
        "'regex'",
        "r'[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'",
        "'('",
        "'([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|'",
        "'([0-9a-fA-F]{1,4}:){1,7}:|'",
        "'([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|'",
        "'([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|'",
        "'([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|'",
        "'([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|'",
        "'([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|'",
        "'[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|'",
        "':((:[0-9a-fA-F]{1,4}){1,7}|:)|'",
        "'fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|'",
        "'::(ffff(:0{1,4}){0,1}:){0,1}'",
        "'((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}'",
        "'(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|'",
        "'([0-9a-fA-F]{1,4}:){1,4}:'",
        "'((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}'",
        "'(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])'",
        "')'",
        "'type'",
        "'ip'",
        "'regex'",
        "r'{}'",
        "'type'",
        "'url'",
        "'regex'",
        "r'^(http\\:\\/\\/|https:\\/\\/)'",
        "'type'",
        "'domain'",
        "'regex'",
        "r'^(?!http\\:\\/\\/|https\\:\\/\\/)^[\\w\\-]+\\.\\w+$'",
        "'type'",
        "'hash'",
        "'regex'",
        "r'^([0-9a-fA-F]{32}|[0-9a-fA-F]{40}|[0-9a-fA-F]{64})$'",
        "'type'",
        "'user-agent'",
        "'regex'",
        "r'^(Mozilla\\/[45]\\.0 |AppleWebKit\\/[0-9]{3}\\.[0-9]{2} |Chrome\\/[0-9]{2}\\.[0-9]\\.'",
        "r'[0-9]{4}\\.[0-9]{3} |Safari\\/[0-9]{3}\\.[0-9]{2} ).*?$'",
        "'type'",
        "'uri_path'",
        "'regex'",
        "r'^(?!http\\:\\/\\/|https\\:\\/\\/)[A-Za-z]*\\:\\/\\/'",
        "'type'",
        "'registry'",
        "'regex'",
        "r'^(HKEY|HKLM|HKCU|HKCR|HKCC)'",
        "r'(_LOCAL_MACHINE|_CURRENT_USER|_CURRENT_CONFIG|_CLASSES_ROOT|)[\\\\a-zA-Z0-9]+$'",
        "'type'",
        "'mail'",
        "'regex'",
        "r'[\\w\\.\\-]+@\\w+\\.[\\w\\.]+'",
        "'type'",
        "'fqdn'",
        "'regex'",
        "r'^(?!http\\:\\/\\/|https\\:\\/\\/)^[\\w\\-\\.]+\\.[\\w\\-]+\\.\\w+$'",
        "'regex'",
        "'type'",
        "''",
        "'type'",
        "'value'",
        "'type'",
        "'value'",
        "'type'",
        "'value'",
        "'Not supported type.'"
    ],
    "variables": [
        "regex",
        "regex",
        "r",
        "results",
        "dt",
        "dt",
        "dt"
    ],
    "comments": [
        "!/usr/bin/env python",
        "IPv4",
        "IPv6",
        "RegEx from https://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses",
        "URL",
        "domain",
        "hash",
        "user-agent",
        "uri_path",
        "regkey",
        "mail",
        "fqdn",
        "Only the string left"
    ],
    "docstrings": [
        "\"\"\"\n    The extractor class tries to detect ioc attribute types using regex-matching. Two functions are provided:\n      - ``check_string(str)`` which checks a string for a regex match and just returns the type\n      - ``check_iterable(itr)`` that iterates over a list or a dictionary and returns a list of {type, value} dicts\n\n    Currently, this is not a fulltext search, so the the ioc's must be isolated strings, to get found.\n    This can be iterated for ioc's.\n    \"\"\"",
        "\"\"\"\n        Returns compiled regex list.\n\n        :return: List of {type, regex} dicts\n        :rtype: list\n        \"\"\"",
        "\"\"\"Checks if the given value is a known datatype\n\n        :param value: The value to check\n        :type value: str        \n        :return: Data type of value, if known, else empty string\n        :rtype: str\n        \"\"\"",
        "\"\"\"\n        Checks if a string matches a datatype.\n\n        :param value: String to test\n        :type value: str\n        :return: Data type or empty string\n        :rtype: str\n        \"\"\"",
        "\"\"\"\n        Checks values of a list or a dict on ioc's. Returns a list of dict {type, value}. Raises TypeError, if iterable\n        is not an expected type.\n\n        :param iterable: List or dict of values\n        :type iterable: list dict str\n        :return: List of ioc's matching the regex\n        :rtype: list\n        \"\"\""
    ],
    "functions": [
        "__init_regex",
        "__checktype",
        "check_string",
        "check_iterable"
    ],
    "classes": [
        "Extractor"
    ]
}