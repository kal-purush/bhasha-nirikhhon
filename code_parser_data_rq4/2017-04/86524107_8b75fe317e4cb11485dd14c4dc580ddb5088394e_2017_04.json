{
    "identifiers": [
        "sys",
        "threading",
        "time",
        "os",
        "urllib2",
        "numpy",
        "np",
        "cv2",
        "mesos",
        "mesos",
        "mesos_pb2",
        "mesos",
        "mesos",
        "Executor",
        "driver",
        "task",
        "task",
        "task_id",
        "value",
        "mesos_pb2",
        "TaskStatus",
        "update",
        "task_id",
        "task",
        "task_id",
        "value",
        "mesos_pb2",
        "TASK_RUNNING",
        "driver",
        "sendStatusUpdate",
        "update",
        "main_func",
        "mesos_pb2",
        "TaskStatus",
        "update",
        "task_id",
        "task",
        "task_id",
        "value",
        "mesos_pb2",
        "TASK_FINISHED",
        "driver",
        "sendStatusUpdate",
        "update",
        "threading",
        "target",
        "run_task",
        "thread",
        "start",
        "driver",
        "message",
        "driver",
        "sendFrameworkMessage",
        "message",
        "url",
        "urllib2",
        "urlopen",
        "url",
        "timeout",
        "np",
        "asarray",
        "resp",
        "read",
        "dtype",
        "cv2",
        "imdecode",
        "image",
        "cv2",
        "IMREAD_COLOR",
        "image",
        "urllib2",
        "urlopen",
        "url",
        "timeout",
        "resp",
        "read",
        "open",
        "file",
        "write",
        "face_cascade",
        "file",
        "close",
        "url",
        "name",
        "url_to_image",
        "url",
        "os",
        "path",
        "exists",
        "write_cascade",
        "image",
        "cv2",
        "CascadeClassifier",
        "cv2",
        "cvtColor",
        "image",
        "cv2",
        "COLOR_BGR2GRAY",
        "face_cascade",
        "detectMultiScale",
        "gray",
        "x",
        "y",
        "w",
        "h",
        "faces",
        "cv2",
        "rectangle",
        "image",
        "x",
        "y",
        "x",
        "w",
        "y",
        "h",
        "cv2",
        "imwrite",
        "name",
        "image",
        "os",
        "listdir",
        "input_folder_name",
        "os",
        "path",
        "exists",
        "output_folder_name",
        "os",
        "makedirs",
        "output_folder_name",
        "file_name",
        "fileList",
        "i",
        "no_images",
        "itr",
        "no_images",
        "itr",
        "file_name",
        "open",
        "input_folder_name",
        "file_name",
        "f",
        "f",
        "readlines",
        "line",
        "content",
        "k",
        "k",
        "split",
        "line",
        "len",
        "link",
        "link",
        "find_faces_img",
        "link",
        "output_folder_name",
        "file_name",
        "link",
        "i",
        "sys",
        "path",
        "mesos",
        "MesosExecutorDriver",
        "MyExecutor",
        "sys",
        "exit",
        "driver",
        "run",
        "mesos_pb2",
        "DRIVER_STOPPED"
    ],
    "literals": [
        "\"Running task %s\"",
        "'data with a \\0 byte'",
        "\"Sending status update...\"",
        "'data with a \\0 byte'",
        "\"Sent status update\"",
        "\"uint8\"",
        "\"Error reading from URL\"",
        "\"https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml\"",
        "\"cascade.xml\"",
        "'w'",
        "\"Error reading cascade\"",
        "\"cascade.xml\"",
        "\"Writing cascade\"",
        "\"cascade.xml\"",
        "\"Error finding faces\"",
        "\"Started\"",
        "\"/home/vgg_face_dataset/files/\"",
        "\"/home/output/\"",
        "\"Reading file\"",
        "\"Getting image from URL::\"",
        "\".jpg\"",
        "\"__main__\"",
        "\"Starting executor\""
    ],
    "variables": [
        "update",
        "value",
        "update",
        "state",
        "update",
        "data",
        "update",
        "value",
        "update",
        "state",
        "update",
        "data",
        "thread",
        "resp",
        "image",
        "image",
        "url",
        "resp",
        "face_cascade",
        "file",
        "image",
        "face_cascade",
        "gray",
        "faces",
        "image",
        "i",
        "itr",
        "no_images",
        "input_folder_name",
        "fileList",
        "output_folder_name",
        "content",
        "k",
        "link",
        "driver"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Licensed to the Apache Software Foundation (ASF) under one",
        "or more contributor license agreements.  See the NOTICE file",
        "distributed with this work for additional information",
        "regarding copyright ownership.  The ASF licenses this file",
        "to you under the Apache License, Version 2.0 (the",
        "\"License\"); you may not use this file except in compliance",
        "with the License.  You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Create a thread to run the task. Tasks should always be run in new",
        "threads or processes, rather than inside launchTask itself.",
        "This is where one would perform the requested task.",
        "Send it back to the scheduler.",
        "download the image, convert it to a NumPy array, and then read",
        "it into OpenCV format",
        "return the image"
    ],
    "docstrings": [],
    "functions": [
        "launchTask",
        "run_task",
        "frameworkMessage",
        "url_to_image",
        "write_cascade",
        "find_faces_img",
        "main_func"
    ],
    "classes": [
        "MyExecutor"
    ]
}