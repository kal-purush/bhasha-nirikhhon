{
    "identifiers": [
        "std",
        "std",
        "std",
        "std",
        "for_each",
        "val",
        "first",
        "last",
        "fn",
        "for_each_n",
        "first",
        "n",
        "fn",
        "val",
        "all_of",
        "first",
        "last",
        "pred",
        "val",
        "any_of",
        "first",
        "last",
        "pred",
        "val",
        "none_of",
        "first",
        "last",
        "pred",
        "val",
        "equal",
        "first1",
        "last1",
        "first2",
        "equal",
        "first1",
        "last1",
        "first2",
        "pred",
        "x",
        "y",
        "lexicographical_compare",
        "first1",
        "last1",
        "first2",
        "last2",
        "lexicographical_compare",
        "first1",
        "last1",
        "first2",
        "last2",
        "compare",
        "x",
        "y",
        "find",
        "first",
        "last",
        "val",
        "find_if",
        "first",
        "last",
        "pred",
        "val",
        "find_if_not",
        "first",
        "last",
        "pred",
        "val",
        "find_end",
        "first1",
        "last1",
        "first2",
        "last2",
        "find_end",
        "first1",
        "last1",
        "first2",
        "last2",
        "pred",
        "x",
        "y",
        "find_first_of",
        "first1",
        "last1",
        "first2",
        "last2",
        "find_first_of",
        "first1",
        "last1",
        "first2",
        "last2",
        "pred",
        "x",
        "y",
        "adjacent_find",
        "first",
        "last",
        "adjacent_find",
        "first",
        "last",
        "pred",
        "x",
        "y",
        "search",
        "first1",
        "last1",
        "first2",
        "last2",
        "search",
        "first1",
        "last1",
        "first2",
        "last2",
        "pred",
        "x",
        "y",
        "search_n",
        "first",
        "last",
        "count",
        "val",
        "search_n",
        "first",
        "last",
        "count",
        "val",
        "pred",
        "x",
        "y",
        "mismatch",
        "first1",
        "last1",
        "first2",
        "mismatch",
        "first1",
        "last1",
        "first2",
        "compare",
        "x",
        "y",
        "count",
        "first",
        "last",
        "val",
        "count_if",
        "first",
        "last",
        "pred",
        "val",
        "std",
        "copy",
        "first",
        "last",
        "result",
        "copy_n",
        "first",
        "n",
        "result",
        "copy_if",
        "first",
        "last",
        "result",
        "pred",
        "x",
        "copy_backward",
        "first",
        "last",
        "result",
        "fill",
        "first",
        "last",
        "val",
        "fill_n",
        "first",
        "n",
        "val",
        "transform",
        "first",
        "last",
        "result",
        "op",
        "val",
        "transform",
        "first1",
        "last1",
        "first2",
        "result",
        "binary_op",
        "x",
        "y",
        "generate",
        "first",
        "last",
        "gen",
        "generate_n",
        "first",
        "n",
        "gen",
        "unique",
        "first",
        "last",
        "unique",
        "first",
        "last",
        "pred",
        "left",
        "right",
        "unique_copy",
        "first",
        "last",
        "result",
        "unique_copy",
        "first",
        "last",
        "result",
        "pred",
        "x",
        "y",
        "remove",
        "first",
        "last",
        "val",
        "remove_if",
        "first",
        "last",
        "pred",
        "left",
        "remove_copy",
        "first",
        "last",
        "result",
        "val",
        "remove_copy_if",
        "first",
        "last",
        "result",
        "pred",
        "val",
        "replace",
        "first",
        "last",
        "old_val",
        "new_val",
        "replace_if",
        "first",
        "last",
        "pred",
        "val",
        "new_val",
        "replace_copy",
        "first",
        "last",
        "result",
        "old_val",
        "new_val",
        "replace_copy_if",
        "first",
        "last",
        "result",
        "pred",
        "val",
        "new_val",
        "iter_swap",
        "x",
        "y",
        "swap_ranges",
        "first1",
        "last1",
        "first2",
        "reverse",
        "first",
        "last",
        "reverse_copy",
        "first",
        "last",
        "result",
        "rotate",
        "first",
        "middle",
        "last",
        "rotate_copy",
        "first",
        "middle",
        "last",
        "result",
        "random_shuffle",
        "first",
        "last",
        "shuffle",
        "first",
        "last",
        "std",
        "sort",
        "first",
        "last",
        "sort",
        "first",
        "last",
        "compare",
        "left",
        "right",
        "stable_sort",
        "first",
        "last",
        "stable_sort",
        "first",
        "last",
        "compare",
        "left",
        "right",
        "partial_sort",
        "first",
        "middle",
        "last",
        "partial_sort",
        "first",
        "middle",
        "last",
        "compare",
        "x",
        "y",
        "partial_sort_copy",
        "first",
        "last",
        "result_first",
        "result_last",
        "partial_sort_copy",
        "first",
        "last",
        "result_first",
        "result_last",
        "compare",
        "x",
        "y",
        "nth_element",
        "first",
        "nth",
        "last",
        "nth_element",
        "first",
        "nth",
        "last",
        "compare",
        "left",
        "right",
        "is_sorted",
        "first",
        "last",
        "is_sorted",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "is_sorted_until",
        "first",
        "last",
        "is_sorted_until",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "std",
        "make_heap",
        "first",
        "last",
        "make_heap",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "push_heap",
        "first",
        "last",
        "push_heap",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "pop_heap",
        "first",
        "last",
        "pop_heap",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "is_heap",
        "first",
        "last",
        "is_heap",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "is_heap_until",
        "first",
        "last",
        "is_heap_until",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "sort_heap",
        "first",
        "last",
        "sort_heap",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "std",
        "lower_bound",
        "first",
        "last",
        "val",
        "lower_bound",
        "first",
        "last",
        "val",
        "compare",
        "x",
        "y",
        "upper_bound",
        "first",
        "last",
        "val",
        "upper_bound",
        "first",
        "last",
        "val",
        "compare",
        "x",
        "y",
        "equal_range",
        "first",
        "last",
        "val",
        "equal_range",
        "first",
        "last",
        "val",
        "compare",
        "x",
        "y",
        "binary_search",
        "first",
        "last",
        "val",
        "binary_search",
        "first",
        "last",
        "val",
        "compare",
        "x",
        "y",
        "std",
        "is_partitioned",
        "first",
        "last",
        "pred",
        "x",
        "partition",
        "first",
        "last",
        "pred",
        "x",
        "stable_partition",
        "first",
        "last",
        "pred",
        "x",
        "partition_copy",
        "first",
        "last",
        "result_true",
        "result_false",
        "pred",
        "val",
        "partition_point",
        "first",
        "last",
        "pred",
        "x",
        "std",
        "merge",
        "first1",
        "last1",
        "first2",
        "last2",
        "result",
        "merge",
        "first1",
        "last1",
        "first2",
        "last2",
        "result",
        "compare",
        "x",
        "y",
        "inplace_merge",
        "first",
        "middle",
        "last",
        "inplace_merge",
        "first",
        "middle",
        "last",
        "compare",
        "x",
        "y",
        "includes",
        "first1",
        "last1",
        "first2",
        "last2",
        "includes",
        "first1",
        "last1",
        "first2",
        "last2",
        "compare",
        "x",
        "y",
        "set_union",
        "first1",
        "last1",
        "first2",
        "last2",
        "result",
        "set_union",
        "first1",
        "last1",
        "first2",
        "last2",
        "result",
        "compare",
        "x",
        "y",
        "set_intersection",
        "first1",
        "last1",
        "first2",
        "last2",
        "result",
        "set_intersection",
        "first1",
        "last1",
        "first2",
        "last2",
        "result",
        "compare",
        "x",
        "y",
        "set_difference",
        "first1",
        "last1",
        "first2",
        "last2",
        "result",
        "set_difference",
        "first1",
        "last1",
        "first2",
        "last2",
        "result",
        "compare",
        "x",
        "y",
        "set_symmetric_difference",
        "first1",
        "last1",
        "first2",
        "last2",
        "result",
        "set_symmetric_difference",
        "first1",
        "last1",
        "first2",
        "last2",
        "result",
        "compare",
        "x",
        "y",
        "std",
        "min",
        "args",
        "max",
        "args",
        "minmax",
        "args",
        "min_element",
        "first",
        "last",
        "min_element",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "max_element",
        "first",
        "last",
        "max_element",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "minmax_element",
        "first",
        "last",
        "minmax_element",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "clamp",
        "v",
        "lo",
        "hi",
        "clamp",
        "v",
        "lo",
        "hi",
        "comp",
        "x",
        "y",
        "is_permutation",
        "first1",
        "last1",
        "first2",
        "is_permutation",
        "first1",
        "last1",
        "first2",
        "pred",
        "x",
        "y",
        "prev_permutation",
        "first",
        "last",
        "prev_permutation",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "next_permutation",
        "first",
        "last",
        "next_permutation",
        "first",
        "last",
        "compare",
        "x",
        "y",
        "std",
        "begin",
        "end",
        "items",
        "position",
        "begin",
        "end",
        "obj",
        "std",
        "Container",
        "index",
        "index",
        "val",
        "val",
        "val",
        "val",
        "pos",
        "val",
        "pos",
        "n",
        "val",
        "pos",
        "first",
        "last",
        "pos",
        "val",
        "pos",
        "n",
        "val",
        "pos",
        "first",
        "last",
        "position",
        "val",
        "position",
        "n",
        "val",
        "pos",
        "first",
        "last",
        "it",
        "first",
        "last",
        "it",
        "first",
        "last",
        "first",
        "last",
        "std",
        "std",
        "array",
        "n",
        "n",
        "val",
        "container",
        "begin",
        "end",
        "begin",
        "end",
        "n",
        "val",
        "index",
        "index",
        "val",
        "items",
        "val",
        "position",
        "first",
        "last",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "std",
        "items",
        "size",
        "val",
        "container",
        "begin",
        "end",
        "begin",
        "end",
        "n",
        "val",
        "capacity",
        "index",
        "index",
        "val",
        "index",
        "capacity",
        "items",
        "val",
        "val",
        "pos",
        "first",
        "last",
        "pos",
        "first",
        "last",
        "first",
        "last",
        "size",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "Container",
        "prev",
        "next",
        "val",
        "it",
        "first",
        "last",
        "val",
        "val",
        "val",
        "val",
        "items",
        "position",
        "val",
        "position",
        "size",
        "val",
        "position",
        "begin",
        "end",
        "position",
        "n",
        "val",
        "position",
        "begin",
        "end",
        "position",
        "begin",
        "end",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "std",
        "items",
        "size",
        "val",
        "container",
        "begin",
        "end",
        "prev",
        "next",
        "val",
        "it",
        "n",
        "val",
        "begin",
        "end",
        "position",
        "val",
        "position",
        "size",
        "val",
        "position",
        "begin",
        "end",
        "position",
        "val",
        "position",
        "size",
        "val",
        "position",
        "begin",
        "end",
        "position",
        "begin",
        "end",
        "position",
        "begin",
        "end",
        "binary_pred",
        "left",
        "right",
        "val",
        "pred",
        "val",
        "obj",
        "obj",
        "compare",
        "left",
        "right",
        "position",
        "obj",
        "position",
        "obj",
        "it",
        "position",
        "obj",
        "begin",
        "end",
        "compare",
        "left",
        "right",
        "first",
        "last",
        "compare",
        "first",
        "last",
        "compare",
        "obj",
        "obj",
        "std",
        "Container",
        "begin",
        "end",
        "val",
        "val",
        "val",
        "items",
        "hint",
        "val",
        "hint",
        "val",
        "begin",
        "end",
        "val",
        "hint",
        "val",
        "begin",
        "end",
        "val",
        "it",
        "begin",
        "end",
        "it",
        "begin",
        "end",
        "first",
        "last",
        "val",
        "first",
        "last",
        "obj",
        "source",
        "first",
        "last",
        "first",
        "last",
        "_ListContainer",
        "associative",
        "prev",
        "next",
        "val",
        "it",
        "std",
        "SetContainer",
        "key",
        "val",
        "hint",
        "val",
        "hint",
        "val",
        "begin",
        "end",
        "val",
        "it",
        "it",
        "val",
        "it",
        "it",
        "source",
        "std",
        "std",
        "compare",
        "x",
        "y",
        "array",
        "array",
        "compare",
        "x",
        "y",
        "container",
        "container",
        "compare",
        "x",
        "y",
        "begin",
        "end",
        "begin",
        "end",
        "compare",
        "x",
        "y",
        "val",
        "x",
        "y",
        "x",
        "y",
        "val",
        "val",
        "val",
        "val",
        "hint",
        "val",
        "first",
        "last",
        "first",
        "last",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "std",
        "items",
        "container",
        "begin",
        "end",
        "key",
        "index",
        "index",
        "index",
        "index",
        "n",
        "z",
        "key",
        "n",
        "n",
        "val",
        "hint",
        "val",
        "first",
        "last",
        "first",
        "last",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "SetContainer",
        "val",
        "hint",
        "val",
        "hint",
        "val",
        "begin",
        "end",
        "source",
        "std",
        "std",
        "compare",
        "x",
        "y",
        "array",
        "array",
        "compare",
        "x",
        "y",
        "container",
        "container",
        "compare",
        "x",
        "y",
        "begin",
        "end",
        "begin",
        "end",
        "compare",
        "x",
        "y",
        "val",
        "val",
        "x",
        "y",
        "x",
        "y",
        "val",
        "val",
        "val",
        "val",
        "hint",
        "val",
        "first",
        "last",
        "first",
        "last",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "std",
        "items",
        "container",
        "begin",
        "end",
        "key",
        "key",
        "index",
        "index",
        "index",
        "index",
        "n",
        "z",
        "key",
        "n",
        "n",
        "val",
        "hint",
        "val",
        "first",
        "last",
        "first",
        "last",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "Container",
        "first",
        "last",
        "key",
        "key",
        "key",
        "args",
        "args",
        "hint",
        "key",
        "val",
        "hint",
        "key",
        "val",
        "hint",
        "pair",
        "hint",
        "pair",
        "hint",
        "pair",
        "hint",
        "pair",
        "hint",
        "hint",
        "first",
        "last",
        "pair",
        "hint",
        "pair",
        "hint",
        "first",
        "last",
        "key",
        "it",
        "begin",
        "end",
        "it",
        "begin",
        "end",
        "key",
        "first",
        "last",
        "first",
        "last",
        "obj",
        "source",
        "first",
        "last",
        "first",
        "last",
        "_ListContainer",
        "associative",
        "prev",
        "next",
        "val",
        "it",
        "std",
        "MapContainer",
        "key",
        "key",
        "key",
        "val",
        "key",
        "value",
        "pair",
        "pair",
        "hint",
        "pair",
        "hint",
        "pair",
        "hint",
        "hint",
        "first",
        "last",
        "key",
        "value",
        "hint",
        "key",
        "value",
        "hint",
        "key",
        "value",
        "key",
        "value",
        "hint",
        "key",
        "value",
        "key",
        "it",
        "it",
        "key",
        "it",
        "it",
        "source",
        "std",
        "std",
        "compare",
        "x",
        "y",
        "array",
        "array",
        "compare",
        "x",
        "y",
        "array",
        "array",
        "compare",
        "x",
        "y",
        "container",
        "container",
        "compare",
        "x",
        "y",
        "begin",
        "end",
        "begin",
        "end",
        "compare",
        "x",
        "y",
        "key",
        "x",
        "y",
        "x",
        "y",
        "key",
        "key",
        "key",
        "pair",
        "hint",
        "pair",
        "first",
        "last",
        "first",
        "last",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "std",
        "items",
        "array",
        "container",
        "begin",
        "end",
        "key",
        "index",
        "index",
        "index",
        "index",
        "index",
        "z",
        "key",
        "n",
        "n",
        "pair",
        "hint",
        "pair",
        "first",
        "last",
        "first",
        "last",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "MapContainer",
        "key",
        "value",
        "pair",
        "pair",
        "hint",
        "pair",
        "hint",
        "pair",
        "hint",
        "hint",
        "first",
        "last",
        "source",
        "std",
        "std",
        "compare",
        "x",
        "y",
        "array",
        "array",
        "compare",
        "x",
        "y",
        "array",
        "array",
        "compare",
        "x",
        "y",
        "container",
        "container",
        "compare",
        "x",
        "y",
        "begin",
        "end",
        "begin",
        "end",
        "compare",
        "x",
        "y",
        "key",
        "key",
        "x",
        "y",
        "x",
        "y",
        "key",
        "key",
        "key",
        "pair",
        "hint",
        "pair",
        "first",
        "last",
        "first",
        "last",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "std",
        "items",
        "array",
        "container",
        "begin",
        "end",
        "key",
        "key",
        "index",
        "index",
        "index",
        "index",
        "n",
        "z",
        "key",
        "n",
        "n",
        "pair",
        "hint",
        "pair",
        "first",
        "last",
        "first",
        "last",
        "first",
        "last",
        "obj",
        "obj",
        "std",
        "stack",
        "val",
        "obj",
        "std",
        "container",
        "val",
        "obj",
        "std",
        "compare",
        "left",
        "right",
        "array",
        "array",
        "compare",
        "left",
        "right",
        "container",
        "container",
        "compare",
        "left",
        "right",
        "begin",
        "end",
        "begin",
        "end",
        "compare",
        "left",
        "right",
        "val",
        "obj",
        "std",
        "message",
        "std",
        "message",
        "LogicError",
        "message",
        "LogicError",
        "message",
        "LogicError",
        "message",
        "LogicError",
        "message",
        "std",
        "message",
        "RuntimeError",
        "message",
        "RuntimeError",
        "message",
        "RuntimeError",
        "message",
        "std",
        "val",
        "category",
        "val",
        "category",
        "std",
        "RuntimeError",
        "code",
        "code",
        "message",
        "val",
        "category",
        "val",
        "category",
        "message",
        "std",
        "val",
        "val",
        "val_code",
        "cond",
        "code",
        "val_cond",
        "std",
        "val",
        "category",
        "std",
        "val",
        "category",
        "std",
        "terminate",
        "set_terminate",
        "f",
        "get_terminate",
        "std",
        "equal_to",
        "x",
        "y",
        "not_equal_to",
        "x",
        "y",
        "less",
        "x",
        "y",
        "less_equal",
        "x",
        "y",
        "greater",
        "x",
        "y",
        "greater_equal",
        "x",
        "y",
        "logical_and",
        "x",
        "y",
        "logical_or",
        "x",
        "y",
        "logical_not",
        "x",
        "bit_and",
        "x",
        "y",
        "bit_or",
        "x",
        "y",
        "bit_xor",
        "x",
        "y",
        "hash",
        "val",
        "hash",
        "hash",
        "obj",
        "swap",
        "left",
        "right",
        "swap",
        "left",
        "right",
        "swap",
        "left",
        "right",
        "swap",
        "left",
        "right",
        "swap",
        "left",
        "right",
        "swap",
        "left",
        "right",
        "std",
        "bind",
        "fn",
        "args",
        "args",
        "args",
        "bind",
        "fn",
        "args",
        "thisArg",
        "args",
        "args",
        "std",
        "index",
        "std",
        "size",
        "container",
        "empty",
        "container",
        "distance",
        "first",
        "last",
        "advance",
        "it",
        "n",
        "prev",
        "it",
        "n",
        "next",
        "it",
        "n",
        "begin",
        "container",
        "begin",
        "container",
        "begin",
        "container",
        "begin",
        "container",
        "begin",
        "container",
        "begin",
        "container",
        "rbegin",
        "container",
        "rbegin",
        "container",
        "rbegin",
        "container",
        "rbegin",
        "container",
        "end",
        "container",
        "end",
        "container",
        "end",
        "container",
        "end",
        "container",
        "end",
        "container",
        "end",
        "container",
        "rend",
        "container",
        "rend",
        "container",
        "rend",
        "container",
        "rend",
        "container",
        "rend",
        "container",
        "make_reverse_iterator",
        "it",
        "make_reverse_iterator",
        "it",
        "make_reverse_iterator",
        "it",
        "make_reverse_iterator",
        "it",
        "std",
        "first",
        "second",
        "pair",
        "pair",
        "std",
        "is_node",
        "make_pair",
        "x",
        "y",
        "std",
        "_Hash",
        "size",
        "index",
        "val",
        "val",
        "val",
        "std",
        "_HashBuckets",
        "key",
        "std",
        "_HashBuckets",
        "val",
        "std",
        "index",
        "index",
        "val",
        "std",
        "val",
        "std",
        "n",
        "z",
        "key",
        "n",
        "n",
        "std",
        "n",
        "z",
        "key",
        "n",
        "n",
        "std",
        "begin",
        "end",
        "n",
        "val",
        "val",
        "val",
        "val",
        "position",
        "val",
        "position",
        "n",
        "val",
        "position",
        "first",
        "last",
        "std",
        "x",
        "y",
        "x",
        "y",
        "key",
        "key",
        "key",
        "std",
        "x",
        "y",
        "x",
        "y",
        "val",
        "val",
        "val",
        "std",
        "source",
        "n",
        "obj",
        "obj",
        "std",
        "Iterator",
        "n",
        "obj",
        "obj",
        "std",
        "Iterator",
        "source",
        "prev",
        "next",
        "value",
        "step",
        "obj",
        "obj",
        "std",
        "Iterator",
        "data",
        "index",
        "n",
        "obj",
        "obj",
        "std",
        "Iterator",
        "index",
        "value",
        "n",
        "obj",
        "obj",
        "std",
        "Iterator",
        "source",
        "index",
        "n",
        "obj",
        "obj",
        "std",
        "ReverseIterator",
        "std",
        "_Color",
        "std",
        "compare",
        "x",
        "y",
        "val",
        "node",
        "val",
        "N",
        "N",
        "N",
        "node",
        "node",
        "val",
        "N",
        "N",
        "N",
        "N",
        "N",
        "node",
        "node",
        "node",
        "oldNode",
        "newNode",
        "node",
        "std",
        "_XTree",
        "compare",
        "x",
        "y",
        "itCompare",
        "x",
        "y",
        "key",
        "key",
        "key",
        "key",
        "x",
        "y",
        "x",
        "y",
        "std",
        "_MapTree",
        "compare",
        "x",
        "y",
        "val",
        "key",
        "key",
        "std",
        "_XTree",
        "compare",
        "x",
        "y",
        "itCompare",
        "x",
        "y",
        "val",
        "val",
        "val",
        "val",
        "x",
        "y",
        "x",
        "y",
        "std",
        "_SetTree",
        "compare",
        "x",
        "y",
        "val",
        "val",
        "std",
        "_MapTree",
        "compare",
        "x",
        "y",
        "key",
        "key",
        "std",
        "_SetTree",
        "compare",
        "x",
        "y",
        "val",
        "val",
        "std",
        "value",
        "color",
        "std",
        "std",
        "source",
        "prev",
        "next",
        "value",
        "step",
        "obj",
        "obj",
        "std",
        "std",
        "source",
        "prev",
        "next",
        "val",
        "step",
        "obj",
        "obj",
        "obj",
        "std",
        "std",
        "source",
        "prev",
        "next",
        "val",
        "size",
        "obj",
        "obj",
        "obj",
        "std",
        "std",
        "std",
        "vector",
        "deque",
        "PriorityQueue",
        "TreeSet",
        "multiset",
        "TreeMultiSet",
        "unordered_set",
        "unordered_multiset",
        "HashMultiSet",
        "TreeMap",
        "multimap",
        "TreeMultiMap",
        "unordered_map",
        "unordered_multimap",
        "HashMultiMap",
        "LogicError",
        "DomainError",
        "InvalidArgument",
        "LengthError",
        "OutOfRange",
        "RuntimeError",
        "OverflowError",
        "UnderflowError",
        "RangeError",
        "SystemError",
        "ErrorCategory",
        "ErrorCondition",
        "ErrorCode",
        "std",
        "obj",
        "obj"
    ],
    "literals": [
        "\"tstl\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "_1",
        "_2",
        "_3",
        "_4",
        "_5",
        "_6",
        "_7",
        "_8",
        "_9",
        "_10",
        "_11",
        "_12",
        "_13",
        "_14",
        "_15",
        "_16",
        "_17",
        "_18",
        "_19",
        "_20",
        "stack",
        "queue",
        "priority_queue",
        "exception",
        "logic_error",
        "domain_error",
        "invalid_argument",
        "length_error",
        "out_of_range",
        "runtime_error",
        "overflow_error",
        "underflow_error",
        "range_error",
        "system_error",
        "error_category",
        "error_condition",
        "error_code"
    ],
    "comments": [
        "Type definitions for TSTL v1.4.8",
        "Project: https://github.com/samchon/tstl",
        "Definitions by: Jeongho Nam <http://samchon.org>",
        "Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped"
    ],
    "docstrings": [
        "* # <u>T</u>ypeScript-<u>STL</u>\n *\n * <a href=\"https://nodei.co/npm/tstl\">\n *\t<img src=\"https://nodei.co/npm/tstl.png?downloads=true&downloadRank=true&stars=true\"> </a>\n *\n * STL (Standard Template Library) Containers and Algorithms for TypeScript.\n *\n * **T**ypeScript-**STL** is a TypeScript's <b>Standard Template Library</b> who is migrated from C++ STL. Most of classes\n * and functions of STL have implemented. Just enjoy it.\n *\n * @git https://github.com/samchon/tstl\n * @author Jeongho Nam <http://samchon.org>",
        "* Base classes composing STL in background.\n *\n * @author Jeongho Nam <http://samchon.org>",
        "* Apply function to range.\n     *\n     * Applies function <i>fn</i> to each of the elements in the range [<i>first</i>, <i>last</i>).\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param fn Unary function that accepts an element in the range as argument. This can either be a function p\n     *\t\t\t ointer or a move constructible function object. Its return value, if any, is ignored.",
        "* Apply function to range.\n     *\n     * Applies function *fn* to each of the elements in the range [*first*, *first + n*).\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param n the number of elements to apply the function to\n     * @param fn Unary function that accepts an element in the range as argument. This can either be a function p\n     *\t\t\t ointer or a move constructible function object. Its return value, if any, is ignored.\n     *\n     * @return first + n",
        "* Test condition on all elements in range.\n     *\n     * Returns <code>true</code> if <i>pred</i> returns <code>true</code> for all the elements in the range\n     * [<i>first</i>, <i>last</i>) or if the range is {@link Container.empty empty}, and <code>false</code> otherwise.\n     *\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument and returns a value convertible to\n     *\t\t\t   <code>boolean</code>. The value returned indicates whether the element fulfills the condition\n     *\t\t\t   checked by this function. The function shall not modify its argument.\n     *\n     * @return <code>true</code> if pred returns true for all the elements in the range or if the range is\n     *\t\t   {@link Container.empty empty}, and <code>false</code> otherwise.",
        "* Test if any element in range fulfills condition.\n     *\n     * Returns <code>true</code> if <i>pred</i> returns true for any of the elements in the range\n     * [<i>first</i>, <i>last</i>), and <code>false</code> otherwise.\n     *\n     * If [<i>first</i>, <i>last</i>) is an {@link Container.empty empty} range, the function returns\n     * <code>false</code>.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument and returns a value convertible to\n     *\t\t\t   <code>boolean</code>. The value returned indicates whether the element fulfills the condition\n     *\t\t\t   checked by this function. The function shall not modify its argument.\n     *\n     * @return <code>true</code> if <i>pred</i> returns <code>true</code> for any of the elements in the range\n     *\t\t   [<i>first</i>, <i>last</i>), and <code>false</code> otherwise. If [<i>first</i>, <i>last</i>) is an\n     *\t\t   {@link Container.empty empty} range, the function returns <code>false</code>.",
        "* Test if no elements fulfill condition.\n     *\n     * Returns <code>true</code> if <i>pred</i> returns false for all the elements in the range\n     * [<i>first</i>, <i>last</i>) or if the range is {@link Container.empty empty}, and <code>false</code> otherwise.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument and returns a value convertible to\n     *\t\t\t   <code>boolean</code>. The value returned indicates whether the element fulfills the condition\n     *\t\t\t   checked by this function. The function shall not modify its argument.\n     *\n     * @return <code>true</code> if <i>pred</i> returns <code>false</code> for all the elements in the range\n     *\t\t   [<i>first</i>, <i>last</i>) or if the range is {@link Container.empty empty}, and <code>false</code>\n     *\t\t   otherwise.",
        "* Test whether the elements in two ranges are equal.\n     *\n     * Compares the elements in the range [<i>first1</i>, <i>last1</i>) with those in the range beginning at\n     * <i>first2</i>, and returns <code>true</code> if all of the elements in both ranges match.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the second sequence. The comparison includes up to\n     *\t\t\t\t as many elements of this sequence as those in the range [<i>first1</i>, <i>last1</i>).\n     *\n     * @return <code>true</code> if all the elements in the range [<i>first1</i>, <i>last1</i>) compare equal to those\n     *\t\t   of the range starting at <i>first2</i>, and <code>false</code> otherwise.",
        "* Test whether the elements in two ranges are equal.\n     *\n     * Compares the elements in the range [<i>first1</i>, <i>last1</i>) with those in the range beginning at\n     * <i>first2</i>, and returns <code>true</code> if all of the elements in both ranges match.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the second sequence. The comparison includes up to\n     *\t\t\t\t as many elements of this sequence as those in the range [<i>first1</i>, <i>last1</i>).\n     * @param pred Binary function that accepts two elements as argument (one of each of the two sequences, in the same\n     *\t\t\t   order), and returns a value convertible to <code>bool</code>. The value returned indicates whether\n     *\t\t\t   the elements are considered to match in the context of this function.\n     *\n     * @return <code>true</code> if all the elements in the range [<i>first1</i>, <i>last1</i>) compare equal to those\n     *\t\t   of the range starting at <i>first2</i>, and <code>false</code> otherwise.",
        "* Lexicographical less-than comparison.\n     *\n     * Returns <code>true</code> if the range [<i>first1</i>, <i>last1</i>) compares <i>lexicographically less</i>\n     * than the range [<i>first2</i>, <i>last2</i>).\n     *\n     * A <i>lexicographical comparison</i> is the kind of comparison generally used to sort words alphabetically in\n     * dictionaries; It involves comparing sequentially the elements that have the same position in both ranges against\n     * each other until one element is not equivalent to the other. The result of comparing these first non-matching\n     * elements is the result of the lexicographical comparison.\n     *\n     * If both sequences compare equal until one of them ends, the shorter sequence is <i>lexicographically less</i>\n     * than the longer one.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the second sequence.\n     * @param last2 An {@link base.Iterator} to the final position of the second sequence. The ranged used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     *\n     * @return <code>true</code> if the first range compares <i>lexicographically less</i> than than the second.\n     *\t\t   <code>false</code> otherwise (including when all the elements of both ranges are equivalent).",
        "* Lexicographical comparison.\n     *\n     * Returns <code>true</code> if the range [<i>first1</i>, <i>last1</i>) compares <i>lexicographically\n     * relationship</i> than the range [<i>first2</i>, <i>last2</i>).\n     *\n     * A <i>lexicographical comparison</i> is the kind of comparison generally used to sort words alphabetically in\n     * dictionaries; It involves comparing sequentially the elements that have the same position in both ranges against\n     * each other until one element is not equivalent to the other. The result of comparing these first non-matching\n     * elements is the result of the lexicographical comparison.\n     *\n     * If both sequences compare equal until one of them ends, the shorter sequence is <i>lexicographically\n     * relationship</i> than the longer one.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the second sequence.\n     * @param last2 An {@link base.Iterator} to the final position of the second sequence. The ranged used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param compare Binary function that accepts two arguments of the types pointed by the iterators, and returns a\n     *\t\t  value convertible to <code>bool</code>. The value returned indicates whether the first argument is\n     *\t\t  considered to go before the second in the specific <i>strict weak ordering</i> it defines.\n     *\n     * @return <code>true</code> if the first range compares <i>lexicographically relationship</i> than than the\n     *\t\t   second. <code>false</code> otherwise (including when all the elements of both ranges are equivalent).",
        "* Find value in range.\n     *\n     * Returns an iterator to the first element in the range [<i>first</i>, <i>last</i>) that compares equal to\n     * <i>val</i>. If no such element is found, the function returns <i>last</i>.\n     *\n     * The function uses {@link equal_to equal_to} to compare the individual elements to <i>val</i>.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value to search for in the range.\n     *\n     * @return An {@link base.Iterator} to the first element in the range that compares equal to <i>val</i>. If no elements\n     *\t\t   match, the function returns <i>last</i>.",
        "* Find element in range.\n     *\n     * Returns an iterator to the first element in the range [<i>first</i>, <i>last</i>) for which pred returns\n     * <code>true</code>. If no such element is found, the function returns <i>last</i>.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument and returns a value convertible\n     *\t\t\t   to <code>bool</code>. The value returned indicates whether the element is considered a match in\n     *\t\t\t   the context of this function. The function shall not modify its argument.\n     *\n     * @return An {@link base.Iterator} to the first element in the range for which <i>pred</i> does not return\n     *\t\t   <code>false</code>. If <i>pred</i> is <code>false</code> for all elements, the function returns\n     *\t\t   <i>last</i>.",
        "* Find element in range.\n     *\n     * Returns an iterator to the first element in the range [<i>first</i>, <i>last</i>) for which pred returns\n     * <code>true</code>. If no such element is found, the function returns <i>last</i>.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument and returns a value convertible\n     *\t\t\t   to <code>bool</code>. The value returned indicates whether the element is considered a match in\n     *\t\t\t   the context of this function. The function shall not modify its argument.\n     *\n     * @return An {@link base.Iterator} to the first element in the range for which <i>pred</i> returns <code>false</code>.\n     *\t\t   If <i>pred</i> is <code>true</code> for all elements, the function returns <i>last</i>.",
        "* Find last subsequence in range.\n     *\n     * Searches the range [<i>first1</i>, <i>last1</i>) for the last occurrence of the sequence defined by\n     * [<i>first2</i>, <i>last2</i>), and returns an {@link base.Iterator} to its first element, or <i>last1,/i> if no\n     * occurrences are found.\n     *\n     * The elements in both ranges are compared sequentially using {@link equal_to}: A subsequence of\n     * [<i>first1</i>, <i>last1</i>) is considered a match only when this is <code>true</code> for all the elements of\n     * [<i>first2</i>, <i>last2</i>).\n     *\n     * This function returns the last of such occurrences. For an algorithm that returns the first instead, see\n     * {@link search}.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the element values to be searched for.\n     * @param last2 An {@link base.Iterator} to the final position of the element values to be searched for. The range used\n     *\t\t\t\tis [<i>first2</i>, <i>last2</i>).\n     * @param pred Binary function that accepts two elements as arguments (one of each of the two sequences, in the\n     *\t\t\t   same order), and returns a value convertible to <code>bool</code>. The value returned indicates\n     *\t\t\t   whether the elements are considered to match in the context of this function.\n     *\n     * @return An {@link base.Iterator} to the first element of the last occurrence of [<i>first2</i>, <i>last2</i>) in\n     *\t\t   [<i>first1</i>, <i>last1</i>). If the sequence is not found, the function returns ,i>last1</i>. Otherwise\n     *\t\t   [<i>first2</i>, <i>last2</i>) is an empty range, the function returns <i>last1</i>.",
        "* Find last subsequence in range.\n     *\n     * Searches the range [<i>first1</i>, <i>last1</i>) for the last occurrence of the sequence defined by\n     * [<i>first2</i>, <i>last2</i>), and returns an {@link base.Iterator} to its first element, or <i>last1,/i> if no\n     * occurrences are found.\n     *\n     * The elements in both ranges are compared sequentially using <i>pred</i>: A subsequence of\n     * [<i>first1</i>, <i>last1</i>) is considered a match only when this is <code>true</code> for all the elements of\n     * [<i>first2</i>, <i>last2</i>).\n     *\n     * This function returns the last of such occurrences. For an algorithm that returns the first instead, see\n     * {@link search}.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the element values to be searched for.\n     * @param last2 An {@link base.Iterator} to the final position of the element values to be searched for. The range used\n     *\t\t\t\tis [<i>first2</i>, <i>last2</i>).\n     * @param pred Binary function that accepts two elements as arguments (one of each of the two sequences, in the\n     *\t\t\t   same order), and returns a value convertible to <code>bool</code>. The value returned indicates\n     *\t\t\t   whether the elements are considered to match in the context of this function.\n     *\n     * @return An {@link base.Iterator} to the first element of the last occurrence of [<i>first2</i>, <i>last2</i>) in\n     *\t\t   [<i>first1</i>, <i>last1</i>). If the sequence is not found, the function returns ,i>last1</i>. Otherwise\n     *\t\t   [<i>first2</i>, <i>last2</i>) is an empty range, the function returns <i>last1</i>.",
        "* Find element from set in range.\n     *\n     * Returns an iterator to the first element in the range [<i>first1</i>, <i>last1</i>) that matches any of the\n     * elements in [<i>first2</i>, <i>last2</i>). If no such element is found, the function returns <i>last1</i>.\n     *\n     * The elements in [<i>first1</i>, <i>last1</i>) are sequentially compared to each of the values in\n     * [<i>first2</i>, <i>last2</i>) using {@link equal_to}, until a pair matches.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the element values to be searched for.\n     * @param last2 An {@link base.Iterator} to the final position of the element values to be searched for. The range used\n     *\t\t\t\tis [<i>first2</i>, <i>last2</i>).\n     *\n     * @return An {@link base.Iterator} to the first element in [<i>first1</i>, <i>last1</i>) that is part of\n     *\t\t   [<i>first2</i>, <i>last2</i>). If no matches are found, the function returns <i>last1</i>.",
        "* Find element from set in range.\n     *\n     * Returns an iterator to the first element in the range [<i>first1</i>, <i>last1</i>) that matches any of the\n     * elements in [<i>first2</i>, <i>last2</i>). If no such element is found, the function returns <i>last1</i>.\n     *\n     * The elements in [<i>first1</i>, <i>last1</i>) are sequentially compared to each of the values in\n     * [<i>first2</i>, <i>last2</i>) using <i>pred</i>, until a pair matches.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the element values to be searched for.\n     * @param last2 An {@link base.Iterator} to the final position of the element values to be searched for. The range used\n     *\t\t\t\tis [<i>first2</i>, <i>last2</i>).\n     * @param pred Binary function that accepts two elements as arguments (one of each of the two sequences, in the\n     *\t\t\t   same order), and returns a value convertible to <code>bool</code>. The value returned indicates\n     *\t\t\t   whether the elements are considered to match in the context of this function.\n     *\n     * @return An {@link base.Iterator} to the first element in [<i>first1</i>, <i>last1</i>) that is part of\n     *\t\t   [<i>first2</i>, <i>last2</i>). If no matches are found, the function returns <i>last1</i>.",
        "* Find equal adjacent elements in range.\n     *\n     * Searches the range [<i>first</i>, <i>last</i>) for the first occurrence of two consecutive elements that match,\n     * and returns an {@link base.Iterator} to the first of these two elements, or <i>last</i> if no such pair is found.\n     *\n     * Two elements match if they compare equal using {@link equal_to}.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     *\n     * @return An {@link base.Iterator} to the first element of the first pair of matching consecutive elements in the range\n     *\t\t   [<i>first</i>, <i>last</i>). If no such pair is found, the function returns <i>last</i>.",
        "* Find equal adjacent elements in range.\n     *\n     * Searches the range [<i>first</i>, <i>last</i>) for the first occurrence of two consecutive elements that match,\n     * and returns an {@link base.Iterator} to the first of these two elements, or <i>last</i> if no such pair is found.\n     *\n     * Two elements match if they compare equal using <i>pred</i>.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether the element is considered a match in the\n     *\t\t\t   context of this function. The function shall not modify its argument.\n     *\n     * @return An {@link base.Iterator} to the first element of the first pair of matching consecutive elements in the range\n     *\t\t   [<i>first</i>, <i>last</i>). If no such pair is found, the function returns <i>last</i>.",
        "* Search range for subsequence.\n     *\n     * Searches the range [<i>first1</i>, <i>last1</i>) for the first occurrence of the sequence defined by\n     * [<i>first2</i>, <i>last2</i>), and returns an iterator to its first element, or <i>last1</i> if no occurrences are\n     * found.\n     *\n     * The elements in both ranges are compared sequentially using {@link equal_to}: A subsequence of\n     * [<i>first1</i>, <i>last1</i>) is considered a match only when this is true for <b>all</b> the elements of\n     * [<i>first2</i>, <i>last2</i>).\n     *\n     * This function returns the first of such occurrences. For an algorithm that returns the last instead, see\n     * {@link find_end}.\n     *\n     * @param first1 {@link base.Iterator Forward iterator} to the initial position of the searched sequence.\n     * @param last1 {@link base.Iterator Forward iterator} to the final position of the searched sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Forward iterator} to the initial position of the sequence to be searched for.\n     * @param last2 {@link base.Iterator Forward iterator} to the final position of the sequence to be searched for. The range\n     *\t\t\t\tused is [<i>first2</i>, <i>last2</i>).\n     *\n     * @return An iterator to the first element of the first occurrence of [<i>first2</i>, <i>last2</i>) in <i>first1</i>\n     *\t\t   and <i>last1</i>. If the sequence is not found, the function returns <i>last1</i>. Otherwise\n     *\t\t   [<i>first2</i>, <i>last2</i>) is an empty range, the function returns <i>first1</i>.",
        "* Search range for subsequence.\n     *\n     * Searches the range [<i>first1</i>, <i>last1</i>) for the first occurrence of the sequence defined by\n     * [<i>first2</i>, <i>last2</i>), and returns an iterator to its first element, or <i>last1</i> if no occurrences are\n     * found.\n     *\n     * The elements in both ranges are compared sequentially using <i>pred</i>: A subsequence of\n     * [<i>first1</i>, <i>last1</i>) is considered a match only when this is true for <b>all</b> the elements of\n     * [<i>first2</i>, <i>last2</i>).\n     *\n     * This function returns the first of such occurrences. For an algorithm that returns the last instead, see\n     * {@link find_end}.\n     *\n     * @param first1 {@link base.Iterator Forward iterator} to the initial position of the searched sequence.\n     * @param last1 {@link base.Iterator Forward iterator} to the final position of the searched sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Forward iterator} to the initial position of the sequence to be searched for.\n     * @param last2 {@link base.Iterator Forward iterator} to the final position of the sequence to be searched for. The range\n     *\t\t\t\tused is [<i>first2</i>, <i>last2</i>).\n     * @param pred Binary function that accepts two elements as arguments (one of each of the two sequences, in the same\n     *\t\t\t   order), and returns a value convertible to bool. The returned value indicates whether the elements are\n     *\t\t\t   considered to match in the context of this function. The function shall not modify any of its\n     *\t\t\t   arguments.\n     *\n     * @return An iterator to the first element of the first occurrence of [<i>first2</i>, <i>last2</i>) in\n     *\t\t   [<i>first1</i>, <i>last1</i>). If the sequence is not found, the function returns last1. Otherwise\n     *\t\t   [<i>first2</i>, <i>last2</i>) is an empty range, the function returns <i>first1</i>.",
        "* Search range for elements.\n     *\n     * Searches the range [<i>first</i>, <i>last</i>) for a sequence of <i>count</i> elements, each comparing equal to\n     * <i>val</i>.\n     *\n     * The function returns an iterator to the first of such elements, or <i>last</i> if no such sequence is found.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of the searched sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of the searched sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param count Minimum number of successive elements to match.\n     * @param val Individual value to be compared, or to be used as argument for {@link equal_to}.\n     *\n     * @return An iterator to the first element of the sequence. If no such sequence is found, the function returns\n     *\t\t   <i>last</i>.",
        "* Search range for elements.\n     *\n     * Searches the range [<i>first</i>, <i>last</i>) for a sequence of <i>count</i> elements, each comparing equal to\n     * <i>val</i>.\n     *\n     * The function returns an iterator to the first of such elements, or <i>last</i> if no such sequence is found.\n     *\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of the searched sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of the searched sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param count Minimum number of successive elements to match.\n     * @param val Individual value to be compared, or to be used as argument for <i>pred</i>.\n     * @param pred Binary function that accepts two arguments (one element from the sequence as first, and <i>val</i> as\n     *\t\t\t   second), and returns a value convertible to <code>bool</code>. The value returned indicates whether the\n     *\t\t\t   element is considered a match in the context of this function. The function shall not modify any of its\n     *\t\t\t   arguments.\n     *\n     * @return An {@link base.Iterator} to the first element of the sequence. If no such sequence is found, the function\n     *\t\t   returns <i>last</i>.",
        "* Return first position where two ranges differ.\n     *\n     * Compares the elements in the range [<i>first1</i>, <i>last1</i>) with those in the range beginning at\n     * <i>first2</i>, and returns the first element of both sequences that does not match.\n     *\n     * The function returns a {@link Pair} of {@link iterators base.Iterator} to the first element in each range that\n     * does not match.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the second sequence. The comparison includes up to\n     *\t\t\t\t as many elements of this sequence as those in the range [<i>first1</i>, <i>last1</i>).\n     *\n     * @return A {@link Pair}, where its members {@link Pair.first first} and {@link Pair.second second} point to the\n     *\t\t   first element in both sequences that did not compare equal to each other. If the elements compared in\n     *\t\t   both sequences have all matched, the function returns a {@link Pair} with {@link Pair.first first} set\n     *\t\t   to <i>last1</i> and {@link Pair.second second} set to the element in that same relative position in the\n     *\t\t   second sequence. If none matched, it returns {@link make_pair}(<i>first1</i>, <i>first2</i>).",
        "* Return first position where two ranges differ.\n     *\n     * Compares the elements in the range [<i>first1</i>, <i>last1</i>) with those in the range beginning at\n     * <i>first2</i>, and returns the first element of both sequences that does not match.\n     *\n     * The function returns a {@link Pair} of {@link iterators base.Iterator} to the first element in each range that\n     * does not match.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the second sequence. The comparison includes up to\n     *\t\t\t\t as many elements of this sequence as those in the range [<i>first1</i>, <i>last1</i>).\n     * @param pred Binary function that accepts two elements as argument (one of each of the two sequences, in the same\n     *\t\t\t   order), and returns a value convertible to <code>bool</code>. The value returned indicates whether\n     *\t\t\t   the elements are considered to match in the context of this function.\n     *\n     * @return A {@link Pair}, where its members {@link Pair.first first} and {@link Pair.second second} point to the\n     *\t\t   first element in both sequences that did not compare equal to each other. If the elements compared in\n     *\t\t   both sequences have all matched, the function returns a {@link Pair} with {@link Pair.first first} set\n     *\t\t   to <i>last1</i> and {@link Pair.second second} set to the element in that same relative position in the\n     *\t\t   second sequence. If none matched, it returns {@link make_pair}(<i>first1</i>, <i>first2</i>).",
        "* Count appearances of value in range.\n     *\n     * Returns the number of elements in the range [<i>first</i>, <i>last</i>) that compare equal to <i>val</i>.\n     *\n     * The function uses {@link equal_to} to compare the individual elements to <i>val</i>.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value to match.\n     *\n     * @return The number of elements in the range [<i>first</i>, <i>last</i>) that compare equal to <i>val</i>.",
        "* Return number of elements in range satisfying condition.\n     *\n     * Returns the number of elements in the range [<i>first</i>, <i>last</i>) for which pred is <code>true</code>.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument, and returns a value convertible\n     *\t\t\t   to <code>bool</code>. The value returned indicates whether the element is counted by this function.\n     *\t\t\t   The function shall not modify its argument. This can either be a function pointer or a function\n     *\t\t\t   object.",
        "* Copy range of elements.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) into the range beginning at <i>result</i>.\n     *\n     * The function returns an iterator to the end of the destination range (which points to the element following the\n     * last element copied).\n     *\n     * The ranges shall not overlap in such a way that result points to an element in the range\n     * [<i>first</i>, <i>last</i>). For such cases, see {@link copy_backward}.\n     *\n     * @param first {@link base.Iterator Input iterator} to the initial position in a sequence to be copied.\n     * @param last {@link base.Iterator Input iterator} to the initial position in a sequence to be copied. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result {@link base.Iterator Output iterator} to the initial position in the destination sequence. This shall not\n     *\t\t\t\t point to any element in the range [<i>first</i>, <i>last</i>).\n     *\n     * @return An iterator to the end of the destination range where elements have been copied.",
        "* Copy elements.\n     *\n     * Copies the first <i>n</i> elements from the range beginning at <i>first</i> into the range beginning at\n     * <i>result</i>.\n     *\n     * The function returns an iterator to the end of the destination range (which points to one past the last element\n     * copied).\n     *\n     * If <i>n</i> is negative, the function does nothing.\n     *\n     * If the ranges overlap, some of the elements in the range pointed by result may have undefined but valid values.\n     *\n     * @param first {@link base.Iterator Input iterator} to the initial position in a sequence of at least <i>n</i> elements to\n     *\t\t\t\tbe copied. <i>InputIterator</i> shall point to a type assignable to the elements pointed by\n     *\t\t\t\t<i>OutputIterator</i>.\n     * @param n Number of elements to copy. If this value is negative, the function does nothing.\n     * @param result {@link base.Iterator Output iterator} to the initial position in the destination sequence of at least\n     *\t\t\t\t <i>n</i> elements. This shall not point to any element in the range [<i>first</i>, last].\n     *\n     * @return An iterator to the end of the destination range where elements have been copied.",
        "* Copy certain elements of range.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) for which pred returns <code>true</code> to the\n     * range beginning at <i>result</i>.\n     *\n     * @param first {@link base.Iterator Input iterator} to the initial position in a sequence to be copied.\n     * @param last {@link base.Iterator Input iterator} to the initial position in a sequence to be copied. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result {@link base.Iterator Output iterator} to the initial position in the destination sequence. This shall not\n     *\t\t\t\t point to any element in the range [<i>first</i>, <i>last</i>).\n     * @param pred Unary function that accepts an element in the range as argument, and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether the element is to be copied (if\n     *\t\t\t   <code>true</code>, it is copied). The function shall not modify any of its arguments.\n     *\n     * @return An iterator to the end of the destination range where elements have been copied.",
        "* Copy range of elements backward.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) starting from the end into the range terminating\n     * at <i>result</i>.\n     *\n     * The function returns an iterator to the first element in the destination range.\n     *\n     * The resulting range has the elements in the exact same order as [<i>first</i>, <i>last</i>). To reverse their\n     * order, see {@link reverse_copy}.\n     *\n     * The function begins by copying <code>*(last-1)</code> into <code>*(result-1)</code>, and then follows backward\n     * by the elements preceding these, until <i>first</i> is reached (and including it).\n     *\n     * The ranges shall not overlap in such a way that <i>result</i> (which is the <i>past-the-end element</i> in the\n     * destination range) points to an element in the range (first,last]. For such cases, see {@link copy}.\n     *\n     * @param first {@link base.Iterator Bidirectional iterator} to the initial position in a sequence to be copied.\n     * @param last {@link base.Iterator Bidirectional iterator} to the initial position in a sequence to be copied. The range\n     *\t\t\t   used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and\n     *\t\t\t   <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result {@link base.Iterator Bidirectional iterator} to the initial position in the destination sequence. This\n     *\t\t\t\t shall not point to any element in the range [<i>first</i>, <i>last</i>).\n     *\n     * @return An iterator to the first element of the destination sequence where elements have been copied.",
        "* Fill range with value.\n     *\n     * Assigns val to all the elements in the range [<i>first</i>, <i>last</i>).\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position in a sequence of elements that support being\n     *\t\t\t\tassigned a value of type <i>T</i>.\n     * @param last {@link base.Iterator Forward iterator} to the final position in a sequence of elements that support being\n     *\t\t\t\tassigned a value of type <i>T</i>.. The range filled is [<i>first</i>, <i>last</i>), which contains\n     *\t\t\t\tall the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i>\n     *\t\t\t\tbut not the element pointed by <i>last</i>.\n     * @param val Value to assign to the elements in the filled range.",
        "* Fill sequence with value.\n     *\n     * Assigns <i>val</i> to the first <i>n</i> elements of the sequence pointed by <i>first</i>.\n     *\n     * @param first {@link base.Iterator Output iterator} to the initial position in a sequence of elements that support being\n     *\t\t\t\tassigned a value of type <i>T</i>.\n     * @param n Number of elements to fill. If negative, the function does nothing.\n     * @param val Value to be used to fill the range.\n     *\n     * @return An iterator pointing to the element that follows the last element filled.",
        "* Transform range.\n     *\n     * Applies <i>op</i> to each of the elements in the range [<i>first</i>, <i>last</i>) and stores the value returned\n     * by each operation in the range that begins at <i>result</i>.\n     *\n     * @param first {@link base.Iterator Input iterator} to the initial position in a sequence to be transformed.\n     * @param last {@link base.Iterator Input iterator} to the initial position in a sequence to be transformed. The range\n     *\t\t\t   used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and\n     *\t\t\t   <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result {@link base.Iterator Output} iterator to the initial position of the range where the operation results are\n     *\t\t\t\t stored. The range includes as many elements as [<i>first</i>, <i>last</i>).\n     * @param op Unary function that accepts one element of the type pointed to by <i>InputIterator</i> as argument, and\n     *\t\t\t returns some result value convertible to the type pointed to by <i>OutputIterator</i>.\n     *\n     * @return An iterator pointing to the element that follows the last element written in the <i>result</i> sequence.",
        "* Transform range.\n     *\n     * Calls <i>binary_op</i> using each of the elements in the range [<i>first1</i>, <i>last1</i>) as first argument,\n     * and the respective argument in the range that begins at <i>first2</i> as second argument. The value returned by\n     * each call is stored in the range that begins at <i>result</i>.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second range. The range includes as\n     *\t\t\t\t many elements as [<i>first1</i>, <i>last1</i>).\n     * @param result {@link base.Iterator Output} iterator to the initial position of the range where the operation results are\n     *\t\t\t\t stored. The range includes as many elements as [<i>first1</i>, <i>last1</i>).\n     * @param binary_op Binary function that accepts two elements as argument (one of each of the two sequences), and\n     *\t\t\t\t\treturns some result value convertible to the type pointed to by <i>OutputIterator</i>.\n     *\n     * @return An iterator pointing to the element that follows the last element written in the <i>result</i> sequence.",
        "* Generate values for range with function.\n     *\n     * Assigns the value returned by successive calls to gen to the elements in the range [<i>first</i>, <i>last</i>).\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position in a sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position in a sequence. The range affected is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param gen Generator function that is called with no arguments and returns some value of a type convertible to\n     *\t\t\t  those pointed by the iterators.",
        "* Generate values for sequence with function.\n     *\n     * Assigns the value returned by successive calls to <i>gen</i> to the first <i>n</i> elements of the sequence\n     * pointed by <i>first</i>.\n     *\n     * @param first {@link base.Iterator Output iterator} to the initial position in a sequence of at least <i>n</i> elements\n     *\t\t\t\tthat support being assigned a value of the type returned by <i>gen</i>.\n     * @param n Number of values to generate. If negative, the function does nothing.\n     * @param gen Generator function that is called with no arguments and returns some value of a type convertible to\n     *\t\t\t  those pointed by the iterators.\n     *\n     * @return An iterator pointing to the element that follows the last element whose value has been generated.",
        "* Remove consecutive duplicates in range.\n     *\n     * Removes all but the first element from every consecutive group of equivalent elements in the range\n     * [<i>first</i>, <i>last</i>).\n     *\n     * The function cannot alter the properties of the object containing the range of elements (i.e., it cannot\n     * alter the size of an array or a container): The removal is done by replacing the duplicate elements by the next\n     * element that is not a duplicate, and signaling the new size of the shortened range by returning an iterator to\n     * the element that should be considered its new past-the-last element.\n     *\n     * The relative order of the elements not removed is preserved, while the elements between the returned\n     * iterator and last are left in a valid but unspecified state.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     *\n     * @return An iterator to the element that follows the last element not removed. The range between <i>first</i> and\n     *\t\t   this iterator includes all the elements in the sequence that were not considered duplicates.",
        "* Remove consecutive duplicates in range.\n     *\n     * Removes all but the first element from every consecutive group of equivalent elements in the range\n     * [<i>first</i>, <i>last</i>).\n     *\n     * The function cannot alter the properties of the object containing the range of elements (i.e., it cannot\n     * alter the size of an array or a container): The removal is done by replacing the duplicate elements by the next\n     * element that is not a duplicate, and signaling the new size of the shortened range by returning an iterator to\n     * the element that should be considered its new past-the-last element.\n     *\n     * The relative order of the elements not removed is preserved, while the elements between the returned\n     * iterator and last are left in a valid but unspecified state.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Binary function that accepts two elements in the range as argument, and returns a value convertible\n     *\t\t\t   to <code>bool</code>. The value returned indicates whether both arguments are considered equivalent\n     *\t\t\t  (if <code>true</code>, they are equivalent and one of them is removed). The function shall not modify\n     *\t\t\t  any of its arguments.\n     *\n     * @return An iterator to the element that follows the last element not removed. The range between <i>first</i> and\n     *\t\t   this iterator includes all the elements in the sequence that were not considered duplicates.",
        "* Copy range removing duplicates.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) to the range beginning at <i>result</i>, except\n     * consecutive duplicates (elements that compare equal to the element preceding).\n     *\n     * Only the first element from every consecutive group of equivalent elements in the range\n     * [<i>first</i>, <i>last</i>) is copied.\n     *\n     * The comparison between elements is performed by applying {@lnk equal_to}.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position in a sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position in a sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result Output iterator to the initial position of the range where the resulting range of values is stored.\n     *\t\t\t\t The pointed type shall support being assigned the value of an element in the range\n     *\t\t\t\t [<i>first</i>, <i>last</i>).\n     *\n     * @return An iterator pointing to the end of the copied range, which contains no consecutive duplicates.",
        "* Copy range removing duplicates.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) to the range beginning at <i>result</i>, except\n     * consecutive duplicates (elements that compare equal to the element preceding).\n     *\n     * Only the first element from every consecutive group of equivalent elements in the range\n     * [<i>first</i>, <i>last</i>) is copied.\n     *\n     * The comparison between elements is performed by applying <i>pred</i>.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position in a sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position in a sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result Output iterator to the initial position of the range where the resulting range of values is stored.\n     *\t\t\t\t The pointed type shall support being assigned the value of an element in the range\n     *\t\t\t\t [<i>first</i>, <i>last</i>).\n     * @param pred Binary function that accepts two elements in the range as argument, and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether both arguments are considered equivalent (if\n     *\t\t\t   <code>true</code>, they are equivalent and one of them is removed). The function shall not modify any\n     *\t\t\t   of its arguments.\n     *\n     * @return An iterator pointing to the end of the copied range, which contains no consecutive duplicates.",
        "* Remove value from range.\n     *\n     * Transforms the range [<i>first</i>, <i>last</i>) into a range with all the elements that compare equal to\n     * <i>val</i> removed, and returns an iterator to the new last of that range.\n     *\n     * The function cannot alter the properties of the object containing the range of elements (i.e., it cannot alter\n     * the size of an array or a container): The removal is done by replacing the elements that compare equal to\n     * <i>val</i> by the next element that does not, and signaling the new size of the shortened range by returning an\n     * iterator to the element that should be considered its new past-the-last element.\n     *\n     * The relative order of the elements not removed is preserved, while the elements between the returned iterator\n     * and last are left in a valid but unspecified state.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value to be removed.",
        "* Remove elements from range.\n     *\n     * Transforms the range [<i>first</i>, <i>last</i>) into a range with all the elements for which pred returns\n     * <code>true</code> removed, and returns an iterator to the new last of that range.\n     *\n     * The function cannot alter the properties of the object containing the range of elements (i.e., it cannot\n     * alter the size of an array or a container): The removal is done by replacing the elements for which pred returns\n     * <code>true</code> by the next element for which it does not, and signaling the new size of the shortened range\n     * by returning an iterator to the element that should be considered its new past-the-last element.\n     *\n     * The relative order of the elements not removed is preserved, while the elements between the returned\n     * iterator and last are left in a valid but unspecified state.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument, and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether the element is to be removed (if\n     *\t\t\t   <code>true</code>, it is removed). The function shall not modify its argument.",
        "* Copy range removing value.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) to the range beginning at <i>result</i>, except\n     * those elements that compare equal to <i>val</i>.\n     *\n     * The resulting range is shorter than [<i>first</i>, <i>last</i>) by as many elements as matches in the sequence,\n     * which are \"removed\".\n     *\n     * The function uses {@link equal_to} to compare the individual elements to <i>val</i>.\n     *\n     * @param first {@link base.Iterator InputIterator} to the initial position in a sequence.\n     * @param last {@link base.Iterator InputIterator} to the final position in a sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element in the range\n     *\t\t\t\t [<i>first</i>, <i>last</i>).\n     * @param val Value to be removed.\n     *\n     * @return An iterator pointing to the end of the copied range, which includes all the elements in\n     *\t\t   [<i>first</i>, <i>last</i>) except those that compare equal to <i>val</i>.",
        "* Copy range removing values.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) to the range beginning at <i>result</i>, except\n     * those elements for which <i>pred</i> returns <code>true</code>.\n     *\n     * The resulting range is shorter than [<i>first</i>, <i>last</i>) by as many elements as matches, which are\n     * \"removed\".\n     *\n     * @param first {@link base.Iterator InputIterator} to the initial position in a sequence.\n     * @param last {@link base.Iterator InputIterator} to the final position in a sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element in the range\n     *\t\t\t\t [<i>first</i>, <i>last</i>).\n     * @param pred Unary function that accepts an element in the range as argument, and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether the element is to be removed from the copy (if\n     *\t\t\t   <code>true</code>, it is not copied). The function shall not modify its argument.\n     *\n     * @return An iterator pointing to the end of the copied range, which includes all the elements in\n     *\t\t   [<i>first</i>, <i>last</i>) except those for which <i>pred</i> returns <code>true</code>.",
        "* Replace value in range.\n     *\n     * Assigns <i>new_val</i> to all the elements in the range [<i>first</i>, <i>last</i>) that compare equal to\n     * <i>old_val</i>.\n     *\n     * The function uses {@link equal_to} to compare the individual elements to old_val.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param old_val Value to be replaced.\n     * @param new_val Replacement value.",
        "* Replace value in range.\n     *\n     * Assigns <i>new_val</i> to all the elements in the range [<i>first</i>, <i>last</i>) for which pred returns\n     * <code>true</code>.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument, and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether the element is to be replaced (if\n     *\t\t\t   <code>true</code>, it is replaced). The function shall not modify its argument.\n     * @param new_val Value to assign to replaced elements.",
        "* Copy range replacing value.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) to the range beginning at <i>result</i>, replacing\n     * the appearances of <i>old_value</i> by <i>new_value</i>.\n     *\n     * The function uses {@link equal_to} to compare the individual elements to <i>old_value</i>.\n     *\n     * The ranges shall not overlap in such a way that result points to an element in the range\n     * [<i>first</i>, <i>last</i>).\n     *\n     * @param first {@link base.Iterator InputIterator} to the initial position in a sequence.\n     * @param last {@link base.Iterator InputIterator} to the final position in a sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element in the range\n     *\t\t\t\t [<i>first</i>, <i>last</i>).\n     * @param old_val Value to be replaced.\n     * @param new_val Replacement value.\n     *\n     * @return An iterator pointing to the element that follows the last element written in the result sequence.",
        "* Copy range replacing value.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) to the range beginning at <i>result</i>, replacing\n     * those for which <i>pred</i> returns <code>true</code> by <i>new_value</i>.\n     *\n     * @param first {@link base.Iterator InputIterator} to the initial position in a sequence.\n     * @param last {@link base.Iterator InputIterator} to the final position in a sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element in the range\n     *\t\t\t\t [<i>first</i>, <i>last</i>).\n     * @param pred Unary function that accepts an element in the range as argument, and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether the element is to be removed from the copy (if\n     *\t\t\t   <code>true</code>, it is not copied). The function shall not modify its argument.\n     * @param new_val Value to assign to replaced values.\n     *\n     * @return An iterator pointing to the element that follows the last element written in the result sequence.",
        "* Exchange values of objects pointed to by two iterators.\n     *\n     * Swaps the elements pointed to by <i>x</i> and <i>y</i>.\n     *\n     * The function calls {@link base.Iterator.swap} to exchange the elements.\n     *\n     * @param x {@link base.Iterator Forward iterator} to the objects to swap.\n     * @param y {@link base.Iterator Forward iterator} to the objects to swap.",
        "* Exchange values of two ranges.\n     *\n     * Exchanges the values of each of the elements in the range [<i>first1</i>, <i>last1</i>) with those of their\n     * respective elements in the range beginning at <i>first2</i>.\n     *\n     * The function calls {@link base.Iterator.swap} to exchange the elements.\n     *\n     * @param first1 {@link base.Iterator Forward iterator} to the initial position of the first sequence.\n     * @param last1 {@link base.Iterator Forward iterator} to the final position of the first sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Forward iterator} to the initial position of the second range. The range includes as\n     *\t\t\t\t many elements as [<i>first1</i>, <i>last1</i>). The two ranges shall not overlap.\n     *\n     * @return An iterator to the last element swapped in the second sequence.",
        "* Reverse range.\n     *\n     * Reverses the order of the elements in the range [<i>first</i>, <i>last</i>).\n     *\n     * The function calls {@link iter_swap} to swap the elements to their new locations.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.",
        "* Copy range reversed.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) to the range beginning at <i>result</i>, but in\n     * reverse order.\n     *\n     * @param first {@link base.Iterator Bidirectional iterator} to the initial position in a sequence to be copied.\n     * @param last {@link base.Iterator Bidirectional iterator} to the initial position in a sequence to be copied. The range\n     *\t\t\t   used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and\n     *\t\t\t   <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the reserved range is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element in the range\n     *\t\t\t\t [<i>first</i>, <i>last</i>).\n     *\n     * @return An output iterator pointing to the end of the copied range, which contains the same elements in reverse\n     *\t\t   order.",
        "* Rotate left the elements in range.\n     *\n     * Rotates the order of the elements in the range [<i>first</i>, <i>last</i>), in such a way that the element\n     * pointed by middle becomes the new first element.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param middle An {@link base.Iterator} pointing to the element within the range [<i>first</i>, <i>last</i>) that is\n     *\t\t\t\t moved to the first position in the range.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.\n     *\n     * @return An iterator pointing to the element that now contains the value previously pointed by <i>first</i>.",
        "* Copy range rotated left.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) to the range beginning at <i>result</i>, but\n     * rotating the order of the elements in such a way that the element pointed by <i>middle</i> becomes the first\n     * element in the resulting range.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of the range to be copy-rotated.\n     * @param middle Forward iterator pointing to the element within the range [<i>first</i>, <i>last</i>) that is copied as the first element in the resulting range.\n     * @param last {@link base.Iterator Forward iterator} to the final positions of the range to be copy-rotated. The range\n     *\t\t\t   used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and\n     *\t\t\t   <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   Notice that in this function, these are not consecutive parameters, but the first and <b>third</b> ones.\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the reserved range is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element in the range\n     *\t\t\t\t [<i>first</i>, <i>last</i>).\n     *\n     * @return An output iterator pointing to the end of the copied range.",
        "* Randomly rearrange elements in range.\n     *\n     * Rearranges the elements in the range [<i>first</i>, <i>last</i>) randomly.\n     *\n     * The function swaps the value of each element with that of some other randomly picked element. When provided,\n     * the function gen determines which element is picked in every case. Otherwise, the function uses some unspecified\n     * source of randomness.\n     *\n     * To specify a uniform random generator, see {@link shuffle}.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.",
        "* Randomly rearrange elements in range using generator.\n     *\n     * Rearranges the elements in the range [<i>first</i>, <i>last</i>) randomly, using <i>g</i> as uniform random\n     * number generator.\n     *\n     * The function swaps the value of each element with that of some other randomly picked element. The function\n     * determines the element picked by calling <i>g()</i>.\n     *\n     * To shuffle the elements of the range without such a generator, see {@link random_shuffle} instead.\n     *\n     * <h5> Note </h5>\n     * Using random generator engine is not implemented yet.\n     *\n     * @param first An {@link base.Iterator} to the initial position in a sequence.\n     * @param last An {@link base.Iterator} to the final position in a sequence. The range used is [<i>first</i>, <i>last</i>),\n     *\t\t\t  which contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t  <i>first</i> but not the element pointed by <i>last</i>.",
        "* Sort elements in range.\n     *\n     * Sorts the elements in the range [<i>first</i>, <i>last</i>) into ascending order. The elements are compared\n     * using {@link less}.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence to be sorted.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be sorted.\n     *\t\t\t  The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i>\n     *\t\t\t  and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by\n     *\t\t\t  <i>last</i>. {@link IArrayIterator RandomAccessIterator} shall point to a type for which\n     *\t\t\t  {@link base.Iterator.swap swap} is properly defined.",
        "* Sort elements in range.\n     *\n     * Sorts the elements in the range [<i>first</i>, <i>last</i>) into specific order. The elements are compared\n     * using <i>compare</i>.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence to be sorted.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be sorted.\n     *\t\t\t  The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i>\n     *\t\t\t  and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by\n     *\t\t\t  <i>last</i>. {@link IArrayIterator RandomAccessIterator} shall point to a type for which\n     *\t\t\t  {@link base.Iterator.swap swap} is properly defined.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>boolean</code>. The value returned indicates whether the element passed as first\n     *\t\t\t\t  argument is considered to go before the second in the specific strict weak ordering it defines. The\n     *\t\t\t\t  function shall not modify any of its arguments. This can either be a function pointer or a function\n     *\t\t\t\t  object.",
        "* Sort elements preserving order of equivalents\n     *\n     * Sorts the elements in the range [*first*, *last*) into ascending order, like {@link sort}, but {@link stable_sort}\n     * preserves the relative order of the elements with equivalent values.\n     *\n     * The elements are compared using {@link less}.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence to be sorted.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be sorted.\n     *\t\t\t   The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i>\n     *\t\t\t   and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by\n     *\t\t\t   <i>last</i>. {@link IArrayIterator RandomAccessIterator} shall point to a type for which\n     *\t\t\t   {@link base.Iterator.swap swap} is properly defined.",
        "* Sort elements preserving order of equivalents\n     *\n     * Sorts the elements in the range [*first*, *last*) into ascending order, like {@link sort}, but {@link stable_sort}\n     * preserves the relative order of the elements with equivalent values.\n     *\n     * The elements are compared using *compare*.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence to be sorted.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be sorted.\n     *\t\t\t   The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i>\n     *\t\t\t   and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by\n     *\t\t\t   <i>last</i>. {@link IArrayIterator RandomAccessIterator} shall point to a type for which\n     *\t\t\t   {@link base.Iterator.swap swap} is properly defined.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>boolean</code>. The value returned indicates whether the element passed as first\n     *\t\t\t\t  argument is considered to go before the second in the specific strict weak ordering it defines. The\n     *\t\t\t\t  function shall not modify any of its arguments. This can either be a function pointer or a function\n     *\t\t\t\t  object.",
        "* Partially sort elements in range.\n     *\n     * Rearranges the elements in the range [<i>first</i>, <i>last</i>), in such a way that the elements before\n     * <i>middle</i> are the smallest elements in the entire range and are sorted in ascending order, while the remaining\n     * elements are left without any specific order.\n     *\n     * The elements are compared using {@link less}.\n     *\n     * @param last {@link IArrayIterator Random-access iterator} to the first position of the sequence to be sorted.\n     * @param middle {@link IArrayIterator Random-access iterator} pointing to the element within the range [<i>first</i>, <i>last</i>) that is used as the upper boundary of the elements that are fully sorted.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be sorted.\n     *\t\t\t  The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i>\n     *\t\t\t  and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by\n     *\t\t\t  <i>last</i>.",
        "* Partially sort elements in range.\n     *\n     * Rearranges the elements in the range [<i>first</i>, <i>last</i>), in such a way that the elements before\n     * <i>middle</i> are the smallest elements in the entire range and are sorted in ascending order, while the remaining\n     * elements are left without any specific order.\n     *\n     * The elements are compared using <i>comp</i>.\n     *\n     * @param last {@link IArrayIterator Random-access iterator} to the first position of the sequence to be sorted.\n     * @param middle {@link IArrayIterator Random-access iterator} pointing to the element within the range [<i>first</i>, <i>last</i>) that is used as the upper boundary of the elements that are fully sorted.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be sorted.\n     *\t\t\t   The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i>\n     *\t\t\t   and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by\n     *\t\t\t   <i>last</i>.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>boolean</code>. The value returned indicates whether the element passed as\n     *\t\t\t\t  first argument is considered to go before the second in the specific strict weak ordering it\n     *\t\t\t\t  defines. The function shall not modify any of its arguments.",
        "* Copy and partially sort range.\n     *\n     * Copies the smallest  elements in the range [<i>first</i>, <i>last</i>) to\n     * [<i>result_first</i>, <i>result_last</i>), sorting the elements copied. The number of elements copied is the same\n     * as the {@link distance} between <i>result_first</i> and <i>result_last</i> (unless this is more than the amount of\n     * elements in [<i>first</i>, <i>last</i>)).\n     *\n     * The range [<i>first</i>, <i>last</i>) is not modified.\n     *\n     * The elements are compared using {@link less}.\n     *\n     * @param first {@link base.Iterator Input iterator} to the initial position of the sequence to copy from.\n     * @param last {@link base.Iterator Input iterator} to the final position of the sequence to copy from. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   <i>InputIterator</i> shall point to a type assignable to the elements pointed by\n     *\t\t\t   <i>RandomAccessIterator</i>.\n     * @param result_first {@link base.Iterator Random-access iterator} to the initial position of the destination sequence.\n     * @param result_last {@link base.Iterator Random-access iterator} to the final position of the destination sequence.\n     *\t\t\t\t\t  The range used is [<i>result_first</i>, <i>result_last</i>).\n     * @param compare Binary function that accepts two elements in the result range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>bool</code>. The value returned indicates whether the element passed as first\n     *\t\t\t\t  argument is considered to go before the second in the specific <i>strict weak ordering</i> it\n     *\t\t\t\t  defines. The function shall not modify any of its arguments.\n     *\n     * @return An iterator pointing to the element that follows the last element written in the result sequence.",
        "* Copy and partially sort range.\n     *\n     * Copies the smallest (or largest) elements in the range [<i>first</i>, <i>last</i>) to\n     * [<i>result_first</i>, <i>result_last</i>), sorting the elements copied. The number of elements copied is the same\n     * as the {@link distance} between <i>result_first</i> and <i>result_last</i> (unless this is more than the amount of\n     * elements in [<i>first</i>, <i>last</i>)).\n     *\n     * The range [<i>first</i>, <i>last</i>) is not modified.\n     *\n     * The elements are compared using <i>compare</i>.\n     *\n     * @param first {@link base.Iterator Input iterator} to the initial position of the sequence to copy from.\n     * @param last {@link base.Iterator Input iterator} to the final position of the sequence to copy from. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   <i>InputIterator</i> shall point to a type assignable to the elements pointed by\n     *\t\t\t   <i>RandomAccessIterator</i>.\n     * @param result_first {@link base.Iterator Random-access iterator} to the initial position of the destination sequence.\n     * @param result_last {@link base.Iterator Random-access iterator} to the final position of the destination sequence.\n     *\t\t\t\t\t  The range used is [<i>result_first</i>, <i>result_last</i>).\n     * @param compare Binary function that accepts two elements in the result range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>bool</code>. The value returned indicates whether the element passed as first\n     *\t\t\t\t  argument is considered to go before the second in the specific <i>strict weak ordering</i> it\n     *\t\t\t\t  defines. The function shall not modify any of its arguments.\n     *\n     * @return An iterator pointing to the element that follows the last element written in the result sequence.",
        "* Sort element in range\n     *\n     * Rearranges the elements in the range [*first*, *last*), in such a way that the element at the *nth* position\n     * is the element that would be in that position in a sorted sequence.\n     *\n     * The other elements are left without any specific order, except that none of the elements preceding *nth* are\n     * greater than it, and none of the elements following it are less.\n     *\n     * The elements are compared using {@link less}.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence to be sorted.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be sorted.\n     *\t\t\t   The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i>\n     *\t\t\t   and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by\n     *\t\t\t   <i>last</i>. {@link IArrayIterator RandomAccessIterator} shall point to a type for which\n     *\t\t\t   {@link base.Iterator.swap swap} is properly defined.",
        "* Sort element in range\n     *\n     * Rearranges the elements in the range [*first*, *last*), in such a way that the element at the *nth* position\n     * is the element that would be in that position in a sorted sequence.\n     *\n     * The other elements are left without any specific order, except that none of the elements preceding *nth* are\n     * greater than it, and none of the elements following it are less.\n     *\n     * The elements are compared using *compare*.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence to be sorted.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be sorted.\n     *\t\t\t   The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i>\n     *\t\t\t   and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by\n     *\t\t\t   <i>last</i>. {@link IArrayIterator RandomAccessIterator} shall point to a type for which\n     *\t\t\t   {@link base.Iterator.swap swap} is properly defined.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>boolean</code>. The value returned indicates whether the element passed as first\n     *\t\t\t\t  argument is considered to go before the second in the specific strict weak ordering it defines. The\n     *\t\t\t\t  function shall not modify any of its arguments. This can either be a function pointer or a function\n     *\t\t\t\t  object.",
        "* Check whether range is sorted.\n     *\n     * Returns <code>true</code> if the range [<i>first</i>, <i>last</i>) is sorted into ascending order.\n     *\n     * The elements are compared using {@link less}.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of the sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of the sequence. The range checked is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\n     * @return <code>true</code> if the range [<i>first</i>, <i>last</i>) is sorted into ascending order,\n     *\t\t   <code>false</code> otherwise. If the range [<i>first</i>, <i>last</i>) contains less than two elements,\n     *\t\t   the function always returns <code>true</code>.",
        "* Check whether range is sorted.\n     *\n     * Returns <code>true</code> if the range [<i>first</i>, <i>last</i>) is sorted into ascending order.\n     *\n     * The elements are compared using <i>compare</i>.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of the sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of the sequence. The range checked is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value convertible\n     *\t\t\t\t  to <code>bool</code>. The value returned indicates whether the element passed as first argument is\n     *\t\t\t\t  considered to go before the second in the specific strict weak ordering it defines. The function\n     *\t\t\t\t  shall not modify any of its arguments.\n     *\n     * @return <code>true</code> if the range [<i>first</i>, <i>last</i>) is sorted into ascending order,\n     *\t\t   <code>false</code> otherwise. If the range [<i>first</i>, <i>last</i>) contains less than two elements,\n     *\t\t   the function always returns <code>true</code>.",
        "* Find first unsorted element in range.\n     *\n     * Returns an iterator to the first element in the range [<i>first</i>, <i>last</i>) which does not follow an\n     * ascending order.\n     *\n     * The range between <i>first</i> and the iterator returned {@link is_sorted is sorted}.\n     *\n     * If the entire range is sorted, the function returns <i>last</i>.\n     *\n     * The elements are compared using {@link equal_to}.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of the sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of the sequence. The range checked is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value convertible\n     *\t\t\t\t  to <code>bool</code>. The value returned indicates whether the element passed as first argument is\n     *\t\t\t\t  considered to go before the second in the specific strict weak ordering it defines. The function\n     *\t\t\t\t  shall not modify any of its arguments.\n     *\n     * @return An iterator to the first element in the range which does not follow an ascending order, or <i>last</i> if\n     *\t\t   all elements are sorted or if the range contains less than two elements.",
        "* Find first unsorted element in range.\n     *\n     * Returns an iterator to the first element in the range [<i>first</i>, <i>last</i>) which does not follow an\n     * ascending order.\n     *\n     * The range between <i>first</i> and the iterator returned {@link is_sorted is sorted}.\n     *\n     * If the entire range is sorted, the function returns <i>last</i>.\n     *\n     * The elements are compared using <i>compare</i>.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of the sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of the sequence. The range checked is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value convertible\n     *\t\t\t\t  to <code>bool</code>. The value returned indicates whether the element passed as first argument is\n     *\t\t\t\t  considered to go before the second in the specific strict weak ordering it defines. The function\n     *\t\t\t\t  shall not modify any of its arguments.\n     *\n     * @return An iterator to the first element in the range which does not follow an ascending order, or <i>last</i> if\n     *\t\t   all elements are sorted or if the range contains less than two elements.",
        "* Make heap from range.\n     *\n     * Rearranges the elements in the range [<i>first</i>, <i>last</i>) in such a way that they form a heap.\n     *\n     * A heap is a way to organize the elements of a range that allows for fast retrieval of the element with the\n     * highest value at any moment (with {@link pop_heap}), even repeatedly, while allowing for fast insertion of new\n     * elements (with {@link push_heap}).\n     *\n     * The element with the highest value is always pointed by first. The order of the other elements depends on the\n     * particular implementation, but it is consistent throughout all heap-related functions of this header.\n     *\n     * The elements are compared using {@link less}: The element with the highest value is an element for which this\n     * would return false when compared to every other element in the range.\n     *\n     * The standard container adaptor {@link PriorityQueue} calls {@link make_heap}, {@link push_heap} and\n     * {@link pop_heap} automatically to maintain heap properties for a container.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence to be\n     *\t\t\t\ttransformed into a heap.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be transformed\n     *\t\t\t   into a heap. The range used is [<i>first</i>, <i>last</i>), which contains all the elements between\n     *\t\t\t   <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed\n     *\t\t\t   by <i>last</i>. {@link IArrayIterator RandomAccessIterator} shall point to a type for which\n     *\t\t\t   {@link base.Iterator.swap swap} is properly defined.",
        "* Make heap from range.\n     *\n     * Rearranges the elements in the range [<i>first</i>, <i>last</i>) in such a way that they form a heap.\n     *\n     * A heap is a way to organize the elements of a range that allows for fast retrieval of the element with the\n     * highest value at any moment (with {@link pop_heap}), even repeatedly, while allowing for fast insertion of new\n     * elements (with {@link push_heap}).\n     *\n     * The element with the highest value is always pointed by first. The order of the other elements depends on the\n     * particular implementation, but it is consistent throughout all heap-related functions of this header.\n     *\n     * The elements are compared using <i>compare</i>: The element with the highest value is an element for which this\n     * would return false when compared to every other element in the range.\n     *\n     * The standard container adaptor {@link PriorityQueue} calls {@link make_heap}, {@link push_heap} and\n     * {@link pop_heap} automatically to maintain heap properties for a container.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence to be\n     *\t\t\t\ttransformed into a heap.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be transformed\n     *\t\t\t   into a heap. The range used is [<i>first</i>, <i>last</i>), which contains all the elements between\n     *\t\t\t   <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed\n     *\t\t\t   by <i>last</i>. {@link IArrayIterator RandomAccessIterator} shall point to a type for which\n     *\t\t\t   {@link base.Iterator.swap swap} is properly defined.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>boolean</code>. The value returned indicates whether the element passed as\n     *\t\t\t\t  first argument is considered to go before the second in the specific strict weak ordering it defines.\n     *\t\t\t\t  The function shall not modify any of its arguments. This can either be a function pointer or a\n     *\t\t\t\t  function object.",
        "* Push element into heap range.\n     *\n     * Given a heap in the range [<i>first</i>, <i>last</i> - 1), this function extends the range considered a heap to\n     * [<i>first</i>, <i>last</i>) by placing the value in (<i>last</i> - 1) into its corresponding location within it.\n     *\n     *\n     * A range can be organized into a heap by calling {@link make_heap}. After that, its heap properties are\n     * preserved if elements are added and removed from it using {@link push_heap} and {@link pop_heap}, respectively.\n     *\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the new heap range, including\n     *\t\t\t\tthe pushed element.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the new heap range, including\n     *\t\t\t   the pushed element.  The range used is [<i>first</i>, <i>last</i>), which contains all the elements\n     *\t\t\t   between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the element\n     *\t\t\t   pointed by <i>last</i>. {@link IArrayIterator RandomAccessIterator} shall point to a type for which\n     *\t\t\t   {@link base.Iterator.swap swap} is properly defined.",
        "* Push element into heap range.\n     *\n     * Given a heap in the range [<i>first</i>, <i>last</i> - 1), this function extends the range considered a heap to\n     * [<i>first</i>, <i>last</i>) by placing the value in (<i>last</i> - 1) into its corresponding location within it.\n     *\n     * A range can be organized into a heap by calling {@link make_heap}. After that, its heap properties are\n     * preserved if elements are added and removed from it using {@link push_heap} and {@link pop_heap}, respectively.\n     *\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the new heap range, including\n     *\t\t\t\tthe pushed element.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the new heap range, including\n     *\t\t\t   the pushed element.  The range used is [<i>first</i>, <i>last</i>), which contains all the elements\n     *\t\t\t   between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the element\n     *\t\t\t   pointed by <i>last</i>. {@link IArrayIterator RandomAccessIterator} shall point to a type for which\n     *\t\t\t   {@link base.Iterator.swap swap} is properly defined.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>boolean</code>. The value returned indicates whether the element passed as\n     *\t\t\t\t  first argument is considered to go before the second in the specific strict weak ordering it defines.\n     *\t\t\t\t  The function shall not modify any of its arguments. This can either be a function pointer or a\n     *\t\t\t\t  function object.",
        "* Pop element from heap range.\n     *\n     * Rearranges the elements in the heap range [<i>first</i>, <i>last</i>) in such a way that the part considered a\n     * heap is shortened by one: The element with the highest value is moved to (<i>last</i> - 1).\n     *\n     * While the element with the highest value is moved from first to (<i>last</i> - 1) (which now is out of the\n     * heap), the other elements are reorganized in such a way that the range [<i>first</i>, <i>last</i> - 1) preserves\n     * the properties of a heap.\n     *\n     * A range can be organized into a heap by calling {@link make_heap}. After that, its heap properties are\n     * preserved if elements are added and removed from it using {@link push_heap} and {@link pop_heap}, respectively.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the heap to be shrank by one.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the heap to be shrank by one.\n     *\t\t\t   The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and\n     *\t\t\t   <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   {@link IArrayIterator RandomAccessIterator} shall point to a type for which {@link base.Iterator.swap swap}\n     *\t\t\t   is properly defined.",
        "* Pop element from heap range.\n     *\n     * Rearranges the elements in the heap range [<i>first</i>, <i>last</i>) in such a way that the part considered a\n     * heap is shortened by one: The element with the highest value is moved to (<i>last</i> - 1).\n     *\n     * While the element with the highest value is moved from first to (<i>last</i> - 1) (which now is out of the\n     * heap), the other elements are reorganized in such a way that the range [<i>first</i>, <i>last</i> - 1) preserves\n     * the properties of a heap.\n     *\n     * A range can be organized into a heap by calling {@link make_heap}. After that, its heap properties are\n     * preserved if elements are added and removed from it using {@link push_heap} and {@link pop_heap}, respectively.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the heap to be shrank by one.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the heap to be shrank by one.\n     *\t\t\t   The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and\n     *\t\t\t   <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   {@link IArrayIterator RandomAccessIterator} shall point to a type for which {@link base.Iterator.swap swap}\n     *\t\t\t   is properly defined.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>boolean</code>. The value returned indicates whether the element passed as\n     *\t\t\t\t  first argument is considered to go before the second in the specific strict weak ordering it defines.\n     *\t\t\t\t  The function shall not modify any of its arguments. This can either be a function pointer or a\n     *\t\t\t\t  function object.",
        "* Test if range is heap.\n     *\n     * Returns true if the range [<i>first</i>, <i>last</i>) forms a heap, as if constructed with {@link make_heap}.\n     *\n     * The elements are compared using {@link less}.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   {@link IArrayIterator RandomAccessIterator} shall point to a type for which {@link base.Iterator.swap swap}\n     *\t\t\t   is properly defined.\n     *\n     * @return <code>true</code> if the range [<i>first</i>, <i>last</i>) is a heap (as if constructed with\n     *\t\t   {@link make_heap}), <code>false</code> otherwise. If the range [<i>first</i>, <i>last</i>) contains less\n     *\t\t   than two elements, the function always returns <code>true</code>.",
        "* Test if range is heap.\n     *\n     * Returns true if the range [<i>first</i>, <i>last</i>) forms a heap, as if constructed with {@link make_heap}.\n     *\n     * The elements are compared using <i>compare</i>.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   {@link IArrayIterator RandomAccessIterator} shall point to a type for which {@link base.Iterator.swap swap}\n     *\t\t\t   is properly defined.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>boolean</code>. The value returned indicates whether the element passed as\n     *\t\t\t\t  first argument is considered to go before the second in the specific strict weak ordering it defines.\n     *\t\t\t\t  The function shall not modify any of its arguments. This can either be a function pointer or a\n     *\t\t\t\t  function object.\n     *\n     * @return <code>true</code> if the range [<i>first</i>, <i>last</i>) is a heap (as if constructed with\n     *\t\t   {@link make_heap}), <code>false</code> otherwise. If the range [<i>first</i>, <i>last</i>) contains less\n     *\t\t   than two elements, the function always returns <code>true</code>.",
        "* Find first element not in heap order.\n     *\n     * Returns an iterator to the first element in the range [<i>first</i>, <i>last</i>) which is not in a valid\n     * position if the range is considered a heap (as if constructed with {@link make_heap}).\n     *\n     * The range between first and the iterator returned is a heap.\n     *\n     * If the entire range is a valid heap, the function returns <i>last</i>.\n     *\n     * The elements are compared using {@link less}.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   {@link IArrayIterator RandomAccessIterator} shall point to a type for which {@link base.Iterator.swap swap}\n     *\t\t\t   is properly defined.",
        "* Find first element not in heap order.\n     *\n     * Returns an iterator to the first element in the range [<i>first</i>, <i>last</i>) which is not in a valid\n     * position if the range is considered a heap (as if constructed with {@link make_heap}).\n     *\n     * The range between first and the iterator returned is a heap.\n     *\n     * If the entire range is a valid heap, the function returns <i>last</i>.\n     *\n     * The elements are compared using {@link less}.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   {@link IArrayIterator RandomAccessIterator} shall point to a type for which {@link base.Iterator.swap swap}\n     *\t\t\t   is properly defined.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>boolean</code>. The value returned indicates whether the element passed as\n     *\t\t\t\t  first argument is considered to go before the second in the specific strict weak ordering it defines.\n     *\t\t\t\t  The function shall not modify any of its arguments. This can either be a function pointer or a\n     *\t\t\t\t  function object.",
        "* Sort elements of heap.\n     *\n     * Sorts the elements in the heap range [<i>first</i>, <i>last</i>) into ascending order.\n     *\n     * The elements are compared using {@link less}, which shall be the same as used to construct the heap.\n     *\n     * The range loses its properties as a heap.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence to be sorted.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be sorted.\n     *\t\t\t   The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and\n     *\t\t\t   <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   {@link IArrayIterator RandomAccessIterator} shall point to a type for which {@link base.Iterator.swap swap}\n     *\t\t\t   is properly defined.",
        "* Sort elements of heap.\n     *\n     * Sorts the elements in the heap range [<i>first</i>, <i>last</i>) into ascending order.\n     *\n     * The elements are compared using <i>compare</i>, which shall be the same as used to construct the heap.\n     *\n     * The range loses its properties as a heap.\n     *\n     * @param first {@link IArrayIterator Random-access iterator} to the initial position of the sequence to be sorted.\n     * @param last {@link IArrayIterator Random-access iterator} to the final position of the sequence to be sorted.\n     *\t\t\t   The range used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and\n     *\t\t\t   <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\t\t\t   {@link IArrayIterator RandomAccessIterator} shall point to a type for which {@link base.Iterator.swap swap}\n     *\t\t\t   is properly defined.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value\n     *\t\t\t\t  convertible to <code>boolean</code>. The value returned indicates whether the element passed as\n     *\t\t\t\t  first argument is considered to go before the second in the specific strict weak ordering it defines.\n     *\t\t\t\t  The function shall not modify any of its arguments. This can either be a function pointer or a\n     *\t\t\t\t  function object.",
        "* Return iterator to lower bound.\n     *\n     * Returns an iterator pointing to the first element in the range [<i>first</i>, <i>last</i>) which does not\n     * compare less than <i>val</i>.\n     *\n     * The elements are compared using {@link less}. The elements in the range shall already be {@link is_sorted sorted}\n     * according to this same criterion ({@link less}), or at least {@link is_partitioned partitioned} with respect to\n     * <i>val</i>.\n     *\n     * The function optimizes the number of comparisons performed by comparing non-consecutive elements of the sorted\n     * range, which is specially efficient for {@link IArrayIterator random-access iterators}.\n     *\n     * Unlike {@link upper_bound}, the value pointed by the iterator returned by this function may also be equivalent\n     * to <i>val</i>, and not only greater.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of a {@link is_sorted sorted} (or properly\n     *\t\t\t\t{@link is_partitioned partitioned}) sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of a {@link is_sorted sorted} (or properly\n     *\t\t\t   {@link is_partitioned partitioned}) sequence. The range used is [<i>first</i>, <i>last</i>), which\n     *\t\t\t   contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t   <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value of the lower bound to search for in the range. <i>T</i> shall be a type supporting being compared\n     *\t\t\t  with elements of the range [<i>first</i>, <i>last</i>) as the left-hand side operand of {@link less}.\n     *\n     * @return An iterator to the lower bound of <i>val</i> in the range. If all the element in the range compare less than\n     *\t\t   <i>val</i>, the function returns <i>last</i>.",
        "* Return iterator to lower bound.\n     *\n     * Returns an iterator pointing to the first element in the range [<i>first</i>, <i>last</i>) which does not\n     * compare less than <i>val</i>.\n     *\n     * The elements are compared using <i>compare</i>. The elements in the range shall already be\n     * {@link is_sorted sorted} according to this same criterion (<i>compare</i>), or at least\n     * {@link is_partitioned partitioned} with respect to <i>val</i>.\n     *\n     * The function optimizes the number of comparisons performed by comparing non-consecutive elements of the sorted\n     * range, which is specially efficient for {@link IArrayIterator random-access iterators}.\n     *\n     * Unlike {@link upper_bound}, the value pointed by the iterator returned by this function may also be equivalent\n     * to <i>val</i>, and not only greater.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of a {@link is_sorted sorted} (or properly\n     *\t\t\t\t{@link is_partitioned partitioned}) sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of a {@link is_sorted sorted} (or properly\n     *\t\t\t   {@link is_partitioned partitioned}) sequence. The range used is [<i>first</i>, <i>last</i>), which\n     *\t\t\t   contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t   <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value of the lower bound to search for in the range.\n     * @param compare Binary function that accepts two arguments (the first of the type pointed by <i>ForwardIterator</i>,\n     *\t\t\t\t  and the second, always <i>val</i>), and returns a value convertible to <code>bool</code>. The value\n     *\t\t\t\t  returned indicates whether the first argument is considered to go before the second. The function\n     *\t\t\t\t  shall not modify any of its arguments.\n     *\n     * @return An iterator to the lower bound of <i>val</i> in the range. If all the element in the range compare less than\n     *\t\t   <i>val</i>, the function returns <i>last</i>.",
        "* Return iterator to upper bound.\n     *\n     * Returns an iterator pointing to the first element in the range [<i>first</i>, <i>last</i>) which compares\n     * greater than <i>val</i>.\n     *\n     * The elements are compared using {@link less}. The elements in the range shall already be {@link is_sorted sorted}\n     * according to this same criterion ({@link less}), or at least {@link is_partitioned partitioned} with respect to\n     * <i>val</i>.\n     *\n     * The function optimizes the number of comparisons performed by comparing non-consecutive elements of the sorted\n     * range, which is specially efficient for {@link IArrayIterator random-access iterators}.\n     *\n     * Unlike {@link lower_bound}, the value pointed by the iterator returned by this function cannot be equivalent to\n     * <i>val</i>, only greater.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of a {@link is_sorted sorted} (or properly\n     *\t\t\t\t{@link is_partitioned partitioned}) sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of a {@link is_sorted sorted} (or properly\n     *\t\t\t   {@link is_partitioned partitioned}) sequence. The range used is [<i>first</i>, <i>last</i>), which\n     *\t\t\t   contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t   <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value of the lower bound to search for in the range. <i>T</i> shall be a type supporting being compared\n     *\t\t\t  with elements of the range [<i>first</i>, <i>last</i>) as the left-hand side operand of {@link less}.\n     *\n     * @return An iterator to the upper bound of <i>val</i> in the range. If no element in the range comparse greater than\n     *\t\t   <i>val</i>, the function returns <i>last</i>.",
        "* Return iterator to upper bound.\n     *\n     * Returns an iterator pointing to the first element in the range [<i>first</i>, <i>last</i>) which compares\n     * greater than <i>val</i>.\n     *\n     * The elements are compared using <i>compare</i>. The elements in the range shall already be\n     * {@link is_sorted sorted} according to this same criterion (<i>compare</i>), or at least\n     * {@link is_partitioned partitioned} with respect to <i>val</i>.\n     *\n     * The function optimizes the number of comparisons performed by comparing non-consecutive elements of the sorted\n     * range, which is specially efficient for {@link IArrayIterator random-access iterators}.\n     *\n     * Unlike {@link lower_bound}, the value pointed by the iterator returned by this function cannot be equivalent to\n     * <i>val</i>, only greater.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of a {@link is_sorted sorted} (or properly\n     *\t\t\t\t{@link is_partitioned partitioned}) sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of a {@link is_sorted sorted} (or properly\n     *\t\t\t   {@link is_partitioned partitioned}) sequence. The range used is [<i>first</i>, <i>last</i>), which\n     *\t\t\t   contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t   <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value of the lower bound to search for in the range.\n     * @param compare Binary function that accepts two arguments (the first of the type pointed by <i>ForwardIterator</i>,\n     *\t\t\t\t  and the second, always <i>val</i>), and returns a value convertible to <code>bool</code>. The value\n     *\t\t\t\t  returned indicates whether the first argument is considered to go before the second. The function\n     *\t\t\t\t  shall not modify any of its arguments.\n     *\n     * @return An iterator to the upper bound of <i>val</i> in the range. If no element in the range comparse greater than\n     *\t\t   <i>val</i>, the function returns <i>last</i>.",
        "* Get subrange of equal elements.\n     *\n     * Returns the bounds of the subrange that includes all the elements of the range [<i>first</i>, <i>last</i>) with\n     * values equivalent to <i>val</i>.\n     *\n     * The elements are compared using {@link less}. Two elements, <i>ax/i> and <i>y</i> are considered equivalent\n     * <code>if (!less(x, y) && !less(y, x))</code>.\n     *\n     * The elements in the range shall already be {@link is_sorted sorted} according to this same criterion\n     * ({@link less}), or at least {@link is_partitioned partitioned} with respect to <i>val</i>.\n     *\n     * If <i>val</i> is not equivalent to any value in the range, the subrange returned has a length of zero, with both\n     * iterators pointing to the nearest value greater than <i>val</i>, if any, or to <i>last</i>, if <i>val</i> compares\n     * greater than all the elements in the range.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of a {@link is_sorted sorted} (or properly\n     *\t\t\t\t{@link is_partitioned partitioned}) sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of a {@link is_sorted sorted} (or properly\n     *\t\t\t   {@link is_partitioned partitioned}) sequence. The range used is [<i>first</i>, <i>last</i>), which\n     *\t\t\t   contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t   <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value of the lower bound to search for in the range. <i>T</i> shall be a type supporting being compared\n     *\t\t\t  with elements of the range [<i>first</i>, <i>last</i>) as the left-hand side operand of {@link less}.\n     *\n     * @return A {@link Pair} object, whose member {@link Pair.first} is an iterator to the lower bound of the subrange of\n     *\t\t   equivalent values, and {@link Pair.second} its upper bound. The values are the same as those that would be\n     *\t\t   returned by functions {@link lower_bound} and {@link upper_bound} respectively.",
        "* Get subrange of equal elements.\n     *\n     * Returns the bounds of the subrange that includes all the elements of the range [<i>first</i>, <i>last</i>) with\n     * values equivalent to <i>val</i>.\n     *\n     * The elements are compared using <i>compare</i>. Two elements, <i>ax/i> and <i>y</i> are considered equivalent\n     * <code>if (!compare(x, y) && !compare(y, x))</code>.\n     *\n     * The elements in the range shall already be {@link is_sorted sorted} according to this same criterion\n     * (<i>compare</i>), or at least {@link is_partitioned partitioned} with respect to <i>val</i>.\n     *\n     * If <i>val</i> is not equivalent to any value in the range, the subrange returned has a length of zero, with both\n     * iterators pointing to the nearest value greater than <i>val</i>, if any, or to <i>last</i>, if <i>val</i> compares\n     * greater than all the elements in the range.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of a {@link is_sorted sorted} (or properly\n     *\t\t\t\t{@link is_partitioned partitioned}) sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of a {@link is_sorted sorted} (or properly\n     *\t\t\t   {@link is_partitioned partitioned}) sequence. The range used is [<i>first</i>, <i>last</i>), which\n     *\t\t\t   contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t   <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value of the lower bound to search for in the range.\n     * @param compare Binary function that accepts two arguments of the type pointed by <i>ForwardIterator</i> (and of type\n     *\t\t\t\t  <i>T</i>), and returns a value convertible to <code>bool</code>. The value returned indicates whether\n     *\t\t\t\t  the first argument is considered to go before the second. The function shall not modify any of its\n     *\t\t\t\t  arguments.\n     *\n     * @return A {@link Pair} object, whose member {@link Pair.first} is an iterator to the lower bound of the subrange of\n     *\t\t   equivalent values, and {@link Pair.second} its upper bound. The values are the same as those that would be\n     *\t\t   returned by functions {@link lower_bound} and {@link upper_bound} respectively.",
        "* Get subrange of equal elements.\n     *\n     * Returns the bounds of the subrange that includes all the elements of the range [<i>first</i>, <i>last</i>) with\n     * values equivalent to <i>val</i>.\n     *\n     * The elements are compared using {@link less}. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!less(x, y) && !less(y, x))</code>.\n     *\n     * The elements in the range shall already be {@link is_sorted sorted} according to this same criterion\n     * ({@link less}), or at least {@link is_partitioned partitioned} with respect to <i>val</i>.\n     *\n     * If <i>val</i> is not equivalent to any value in the range, the subrange returned has a length of zero, with both\n     * iterators pointing to the nearest value greater than <i>val</i>, if any, or to <i>last</i>, if <i>val</i> compares\n     * greater than all the elements in the range.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of a {@link is_sorted sorted} (or properly\n     *\t\t\t\t{@link is_partitioned partitioned}) sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of a {@link is_sorted sorted} (or properly\n     *\t\t\t   {@link is_partitioned partitioned}) sequence. The range used is [<i>first</i>, <i>last</i>), which\n     *\t\t\t   contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t   <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value of the lower bound to search for in the range. <i>T</i> shall be a type supporting being compared\n     *\t\t\t  with elements of the range [<i>first</i>, <i>last</i>) as the left-hand side operand of {@link less}.\n     *\n     * @return <code>true</code> if an element equivalent to <i>val</i> is found, and <code>false</code> otherwise.",
        "* Get subrange of equal elements.\n     *\n     * Returns the bounds of the subrange that includes all the elements of the range [<i>first</i>, <i>last</i>) with\n     * values equivalent to <i>val</i>.\n     *\n     * The elements are compared using {<i>compare</i>}. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!compare(x, y) && !compare(y, x))</code>.\n     *\n     * The elements in the range shall already be {@link is_sorted sorted} according to this same criterion\n     * (<i>compare</i>), or at least {@link is_partitioned partitioned} with respect to <i>val</i>.\n     *\n     * If <i>val</i> is not equivalent to any value in the range, the subrange returned has a length of zero, with both\n     * iterators pointing to the nearest value greater than <i>val</i>, if any, or to <i>last</i>, if <i>val</i> compares\n     * greater than all the elements in the range.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of a {@link is_sorted sorted} (or properly\n     *\t\t\t\t{@link is_partitioned partitioned}) sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of a {@link is_sorted sorted} (or properly\n     *\t\t\t   {@link is_partitioned partitioned}) sequence. The range used is [<i>first</i>, <i>last</i>), which\n     *\t\t\t   contains all the elements between <i>first</i> and <i>last</i>, including the element pointed by\n     *\t\t\t   <i>first</i> but not the element pointed by <i>last</i>.\n     * @param val Value of the lower bound to search for in the range.\n     * @param compare Binary function that accepts two arguments of the type pointed by <i>ForwardIterator</i> (and of type\n     *\t\t\t\t  <i>T</i>), and returns a value convertible to <code>bool</code>. The value returned indicates whether\n     *\t\t\t\t  the first argument is considered to go before the second. The function shall not modify any of its\n     *\t\t\t\t  arguments.\n     *\n     * @return <code>true</code> if an element equivalent to <i>val</i> is found, and <code>false</code> otherwise.",
        "* Test whether range is partitioned.\n     *\n     * Returns <code>true</code> if all the elements in the range [<i>first</i>, <i>last</i>) for which <i>pred</i>\n     * returns <code>true</code> precede those for which it returns <code>false</code>.\n     *\n     * If the range is {@link Container.empty empty}, the function returns <code>true</code>.\n     *\n     * @param first {@link base.Iterator Input iterator} to the initial position of the sequence.\n     * @param last {@link base.Iterator Input iterator} to the final position of the sequence. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument, and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether the element belongs to the first group (if\n     *\t\t\t   <code>true</code>, the element is expected before all the elements for which it returns\n     *\t\t\t   <code>false</code>). The function shall not modify its argument.\n     *\n     * @return <code>true</code> if all the elements in the range [<i>first</i>, <i>last</i>) for which <i>pred</i> returns\n     *\t\t   <code>true</code> precede those for which it returns <code>false</code>. Otherwise it returns\n     *\t\t   <code>false</code>. If the range is {@link Container.empty empty}, the function returns <code>true</code>.",
        "* Partition range in two.\n     *\n     * Rearranges the elements from the range [<i>first</i>, <i>last</i>), in such a way that all the elements for\n     * which <i>pred</i> returns <code>true</code> precede all those for which it returns <code>false</code>. The iterator\n     * returned points to the first element of the second group.\n     *\n     * The relative ordering within each group is not necessarily the same as before the call. See\n     * {@link stable_partition} for a function with a similar behavior but with stable ordering within each group.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of the sequence to partition.\n     * @param last {@link base.Iterator Forward iterator} to the final position of the sequence to partition. The range used is\n     *\t\t\t   [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument, and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether the element belongs to the first group (if\n     *\t\t\t   <code>true</code>, the element is expected before all the elements for which it returns\n     *\t\t\t   <code>false</code>). The function shall not modify its argument.\n     *\n     * @return An iterator that points to the first element of the second group of elements (those for which <i>pred</i>\n     *\t\t   returns <code>false</code>), or <i>last</i> if this group is {@link Container.empty empty}.",
        "* Partition range in two - stable ordering.\n     *\n     * Rearranges the elements in the range [<i>first</i>, <i>last</i>), in such a way that all the elements for which\n     * <i>pred</i> returns <code>true</code> precede all those for which it returns <code>false</code>, and, unlike\n     * function {@link partition}, the relative order of elements within each group is preserved.\n     *\n     * This is generally implemented using an internal temporary buffer.\n     *\n     * @param first {@link base.Iterator Bidirectional iterator} to the initial position of the sequence to partition.\n     * @param last {@link base.Iterator Bidirectional iterator} to the final position of the sequence to partition. The range\n     *\t\t\t   used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and\n     *\t\t\t   <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument, and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether the element belongs to the first group (if\n     *\t\t\t   <code>true</code>, the element is expected before all the elements for which it returns\n     *\t\t\t   <code>false</code>). The function shall not modify its argument.\n     *\n     * @return An iterator that points to the first element of the second group of elements (those for which <i>pred</i>\n     *\t\t   returns <code>false</code>), or <i>last</i> if this group is {@link Container.empty empty}.",
        "* Partition range into two.\n     *\n     * Copies the elements in the range [<i>first</i>, <i>last</i>) for which <i>pred</i> returns <code>true</code>\n     * into the range pointed by <i>result_true</i>, and those for which it does not into the range pointed by\n     * <i>result_false</i>.\n     *\n     * @param first {@link base.Iterator Input iterator} to the initial position of the range to be copy-partitioned.\n     * @param last {@link base.Iterator Input iterator} to the final position of the range to be copy-partitioned. The range\n     *\t\t\t   used is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and\n     *\t\t\t   <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param result_true {@link base.Iterator Output iterator} to the initial position of the range where the elements for\n     *\t\t\t\t\t  which <i>pred</i> returns <code>true</code> are stored.\n     * @param result_false {@link base.Iterator Output iterator} to the initial position of the range where the elements for\n     *\t\t\t\t\t   which <i>pred</i> returns <code>false</code> are stored.\n     * @param pred Unary function that accepts an element pointed by <i>InputIterator</i> as argument, and returns a value\n     *\t\t\t   convertible to <code>bool</code>. The value returned indicates on which result range the element is\n     *\t\t\t   copied. The function shall not modify its argument.\n     *\n     * @return A {@link Pair} of iterators with the end of the generated sequences pointed by <i>result_true</i> and\n     *\t\t   <i>result_false</i>, respectivelly. Its member {@link Pair.first first} points to the element that follows\n     *\t\t   the last element copied to the sequence of elements for which <i>pred</i> returned <code>true</code>. Its\n     *\t\t   member {@link Pair.second second} points to the element that follows the last element copied to the sequence\n     *\t\t   of elements for which <i>pred</i> returned <code>false</code>.",
        "* Get partition point.\n     *\n     * Returns an iterator to the first element in the partitioned range [<i>first</i>, <i>last</i>) for which\n     * <i>pred</i> is not <code>true</code>, indicating its partition point.\n     *\n     * The elements in the range shall already {@link is_partitioned be partitioned}, as if {@link partition} had been\n     * called with the same arguments.\n     *\n     * The function optimizes the number of comparisons performed by comparing non-consecutive elements of the sorted\n     * range, which is specially efficient for {@link Iteartor random-access iterators}.\n     *\n     * @param first {@link base.Iterator Forward iterator} to the initial position of the partitioned sequence.\n     * @param last {@link base.Iterator Forward iterator} to the final position of the partitioned sequence. The range checked\n     *\t\t  is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> an <i>last</i>,\n     *\t\t  including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param pred Unary function that accepts an element in the range as argument, and returns a value convertible to\n     *\t\t\t   <code>bool</code>. The value returned indicates whether the element goes before the partition point (if\n     *\t\t\t   <code>true</code>, it goes before; if <code>false</code> goes at or after it). The function shall not\n     *\t\t\t   modify its argument.\n     *\n     * @return An iterator to the first element in the partitioned range [<i>first</i>, <i>last</i>) for which <i>pred</i>\n     *\t\t   is not <code>true</code>, or <i>last</i> if it is not <code>true</code> for any element.",
        "* Merge sorted ranges.\n     *\n     * Combines the elements in the sorted ranges [<i>first1</i>, <i>last1</i>) and [<i>first2</i>, <i>last2</i>), into\n     * a new range beginning at <i>result</i> with all its elements sorted.\n     *\n     * The elements are compared using {@link less}. The elements in both ranges shall already be ordered according to\n     * this same criterion ({@link less}). The resulting range is also sorted according to this.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. The range used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting combined\n     *\t\t\t\t range is stored. Its size is equal to the sum of both ranges above.\n     *\n     * @return An iterator pointing to the past-the-end element in the resulting sequence.",
        "* Merge sorted ranges.\n     *\n     * Combines the elements in the sorted ranges [<i>first1</i>, <i>last1</i>) and [<i>first2</i>, <i>last2</i>), into\n     * a new range beginning at <i>result</i> with all its elements sorted.\n     *\n     * The elements are compared using {@link less}. The elements in both ranges shall already be ordered according to\n     * this same criterion (<i>compare</i>). The resulting range is also sorted according to this.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. The range used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting combined\n     *\t\t\t\t range is stored. Its size is equal to the sum of both ranges above.\n     * @param compare Binary function that accepts two arguments of the types pointed by the iterators, and returns a value\n     *\t\t\t\t  convertible to <code>bool</code>. The value returned indicates whether the first argument is\n     *\t\t\t\t  considered to go before the second in the specific <i>strict weak ordering</i> it defines. The\n     *\t\t\t\t  function shall not modify any of its arguments.\n     *\n     * @return An iterator pointing to the past-the-end element in the resulting sequence.",
        "* Merge consecutive sorted ranges.\n     *\n     * Merges two consecutive sorted ranges: [<i>first</i>, <i>middle</i>) and [<i>middle</i>, <i>last</i>), putting\n     * the result into the combined sorted range [<i>first</i>, <i>last</i>).\n     *\n     * The elements are compared using {@link less}. The elements in both ranges shall already be ordered according to\n     * this same criterion ({@link less}). The resulting range is also sorted according to this.\n     *\n     * The function preserves the relative order of elements with equivalent values, with the elements in the first\n     * range preceding those equivalent in the second.\n     *\n     * @param first {@link base.Iterator Bidirectional iterator} to the initial position in the first sorted sequence to merge.\n     *\t\t\t\tThis is also the initial position where the resulting merged range is stored.\n     * @param middle {@link base.Iterator Bidirectional iterator} to the initial position of the second sorted sequence, which\n     *\t\t\t\t because both sequences must be consecutive, matches the <i>past-the-end</i> position of the first\n     *\t\t\t\t sequence.\n     * @param last {@link base.Iterator Bidirectional iterator} to the <i>past-the-end</i> position of the second sorted\n     *\t\t\t   sequence. This is also the <i>past-the-end</i> position of the range where the resulting merged range is\n     *\t\t\t   stored.",
        "* Merge consecutive sorted ranges.\n     *\n     * Merges two consecutive sorted ranges: [<i>first</i>, <i>middle</i>) and [<i>middle</i>, <i>last</i>), putting\n     * the result into the combined sorted range [<i>first</i>, <i>last</i>).\n     *\n     * The elements are compared using <i>compare</i>. The elements in both ranges shall already be ordered according\n     * to this same criterion (<i>compare</i>). The resulting range is also sorted according to this.\n     *\n     * The function preserves the relative order of elements with equivalent values, with the elements in the first\n     * range preceding those equivalent in the second.\n     *\n     * @param first {@link base.Iterator Bidirectional iterator} to the initial position in the first sorted sequence to merge.\n     *\t\t\t\tThis is also the initial position where the resulting merged range is stored.\n     * @param middle {@link base.Iterator Bidirectional iterator} to the initial position of the second sorted sequence, which\n     *\t\t\t\t because both sequences must be consecutive, matches the <i>past-the-end</i> position of the first\n     *\t\t\t\t sequence.\n     * @param last {@link base.Iterator Bidirectional iterator} to the <i>past-the-end</i> position of the second sorted\n     *\t\t\t   sequence. This is also the <i>past-the-end</i> position of the range where the resulting merged range is\n     *\t\t\t   stored.\n     * @param compare Binary function that accepts two arguments of the types pointed by the iterators, and returns a value\n     *\t\t\t\t  convertible to <code>bool</code>. The value returned indicates whether the first argument is\n     *\t\t\t\t  considered to go before the second in the specific <i>strict weak ordering</i> it defines. The\n     *\t\t\t\t  function shall not modify any of its arguments.",
        "* Test whether sorted range includes another sorted range.\n     *\n     * Returns <code>true</code> if the sorted range [<i>first1</i>, <i>last1</i>) contains all the elements in the\n     * sorted range [<i>first2</i>, <i>last2</i>).\n     *\n     * The elements are compared using {@link less}. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!less(x, y) && !less(y, x))</code>.\n     *\n     * The elements in the range shall already be ordered according to this same criterion ({@link less}).\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence (which is tested on\n     *\t\t\t\twhether it contains the second sequence). The range used is [<i>first1</i>, <i>last1</i>), which\n     *\t\t\t\tcontains all the elements between <i>first1</i> and <i>last1</i>, including the element pointed by\n     *\t\t\t\t<i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. (which is tested\n     *\t\t\t\ton whether it is contained in the first sequence). The range used is [<i>first2</i>, <i>last2</i>).\n     *\n     * @return <code>true</code> if every element in the range [<i>first2</i>, <i>last2</i>) is contained in the range\n     *\t\t   [<i>first1</i>, <i>last1</i>), <code>false</code> otherwise. If [<i>first2</i>, <i>last2</i>) is an empty\n     *\t\t   range, the function returns <code>true</code>.",
        "* Test whether sorted range includes another sorted range.\n     *\n     * Returns <code>true</code> if the sorted range [<i>first1</i>, <i>last1</i>) contains all the elements in the\n     * sorted range [<i>first2</i>, <i>last2</i>).\n     *\n     * The elements are compared using <i>compare</i>. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!compare(x, y) && !compare(y, x))</code>.\n     *\n     * The elements in the range shall already be ordered according to this same criterion (<i>compare</i>).\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence (which is tested on\n     *\t\t\t\twhether it contains the second sequence). The range used is [<i>first1</i>, <i>last1</i>), which\n     *\t\t\t\tcontains all the elements between <i>first1</i> and <i>last1</i>, including the element pointed by\n     *\t\t\t\t<i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. (which is tested\n     *\t\t\t\ton whether it is contained in the first sequence). The range used is [<i>first2</i>, <i>last2</i>).\n     * @param compare Binary function that accepts two elements as arguments (one from each of the two sequences, in the\n     *\t\t\t\t  same order), and returns a value convertible to <code>bool</code>. The value returned indicates\n     *\t\t\t\t  whether the element passed as first argument is considered to go before the second in the specific\n     *\t\t\t\t  <i>strict weak ordering</i> it defines. The function shall not modify any of its arguments.\n     *\n     * @return <code>true</code> if every element in the range [<i>first2</i>, <i>last2</i>) is contained in the range\n     *\t\t   [<i>first1</i>, <i>last1</i>), <code>false</code> otherwise. If [<i>first2</i>, <i>last2</i>) is an empty\n     *\t\t   range, the function returns <code>true</code>.",
        "* Union of two sorted ranges.\n     *\n     * Constructs a sorted range beginning in the location pointed by <i>result</i> with the <i>set union</i> of the\n     * two sorted ranges [<i>first1</i>, <i>last1</i>) and [<i>first2</i>, <i>last2</i>).\n     *\n     * The <i>union</i> of two sets is formed by the elements that are present in either one of the sets, or in both.\n     * Elements from the second range that have an equivalent element in the first range are not copied to the resulting\n     * range.\n     *\n     * The elements are compared using {@link less}. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!less(x, y) && !less(y, x))</code>.\n     *\n     * The elements in the ranges shall already be ordered according to this same criterion ({@link less}). The\n     * resulting range is also sorted according to this.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. The range used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element from the other ranges.\n     *\n     * @return An iterator to the end of the constructed range.",
        "* Union of two sorted ranges.\n     *\n     * Constructs a sorted range beginning in the location pointed by <i>result</i> with the <i>set union</i> of the\n     * two sorted ranges [<i>first1</i>, <i>last1</i>) and [<i>first2</i>, <i>last2</i>).\n     *\n     * The <i>union</i> of two sets is formed by the elements that are present in either one of the sets, or in both.\n     * Elements from the second range that have an equivalent element in the first range are not copied to the resulting\n     * range.\n     *\n     * The elements are compared using <i>compare</i>. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!compare(x, y) && !compare(y, x))</code>.\n     *\n     * The elements in the ranges shall already be ordered according to this same criterion (<i>compare</i>). The\n     * resulting range is also sorted according to this.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. The range used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element from the other ranges.\n     * @param compare Binary function that accepts two arguments of the types pointed by the input iterators, and returns a\n     *\t\t\t\t  value convertible to <code>bool</code>. The value returned indicates whether the first argument is\n     *\t\t\t\t  considered to go before the second in the specific <i>strict weak ordering</i> it defines. The\n     *\t\t\t\t  function shall not modify any of its arguments.\n     *\n     * @return An iterator to the end of the constructed range.",
        "* Intersection of two sorted ranges.\n     *\n     * Constructs a sorted range beginning in the location pointed by <i>result</i> with the <i>set intersection</i> of\n     * the two sorted ranges [<i>first1</i>, <i>last1</i>) and [<i>first2</i>, <i>last2</i>).\n     *\n     * The <i>intersection</i> of two sets is formed only by the elements that are present in both sets. The elements\n     * copied by the function come always from the first range, in the same order.\n     *\n     * The elements are compared using {@link less}. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!less(x, y) && !less(y, x))</code>.\n     *\n     * The elements in the ranges shall already be ordered according to this same criterion ({@link less}). The\n     * resulting range is also sorted according to this.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. The range used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element from the first range.\n     *\n     * @return An iterator to the end of the constructed range.",
        "* Intersection of two sorted ranges.\n     *\n     * Constructs a sorted range beginning in the location pointed by <i>result</i> with the <i>set intersection</i> of\n     * the two sorted ranges [<i>first1</i>, <i>last1</i>) and [<i>first2</i>, <i>last2</i>).\n     *\n     * The <i>intersection</i> of two sets is formed only by the elements that are present in both sets. The elements\n     * copied by the function come always from the first range, in the same order.\n     *\n     * The elements are compared using <i>compare</i>. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!compare(x, y) && !compare(y, x))</code>.\n     *\n     * The elements in the ranges shall already be ordered according to this same criterion (<i>compare</i>). The\n     * resulting range is also sorted according to this.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. The range used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element from the first range.\n     * @param compare Binary function that accepts two arguments of the types pointed by the input iterators, and returns a\n     *\t\t\t\t  value convertible to <code>bool</code>. The value returned indicates whether the first argument is\n     *\t\t\t\t  considered to go before the second in the specific <i>strict weak ordering</i> it defines. The\n     *\t\t\t\t  function shall not modify any of its arguments.\n     *\n     * @return An iterator to the end of the constructed range.",
        "* Difference of two sorted ranges.\n     *\n     * Constructs a sorted range beginning in the location pointed by <i>result</i> with the <i>set difference</i> of\n     * the sorted range [<i>first1</i>, <i>last1</i>) with respect to the sorted range [<i>first2</i>, <i>last2</i>).\n     *\n     * The <i>difference</i> of two sets is formed by the elements that are present in the first set, but not in the\n     * second one. The elements copied by the function come always from the first range, in the same order.\n     *\n     * For containers supporting multiple occurrences of a value, the <i>difference</i> includes as many occurrences of\n     * a given value as in the first range, minus the amount of matching elements in the second, preserving order.\n     *\n     * Notice that this is a directional operation - for a symmetrical equivalent, see {@link set_symmetric_difference}.\n     *\n     * The elements are compared using {@link less}. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!less(x, y) && !less(y, x))</code>.\n     *\n     * The elements in the ranges shall already be ordered according to this same criterion ({@link less}). The\n     * resulting range is also sorted according to this.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. The range used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element from the first range.\n     *\n     * @return An iterator to the end of the constructed range.",
        "* Difference of two sorted ranges.\n     *\n     * Constructs a sorted range beginning in the location pointed by <i>result</i> with the <i>set difference</i> of\n     * the sorted range [<i>first1</i>, <i>last1</i>) with respect to the sorted range [<i>first2</i>, <i>last2</i>).\n     *\n     * The <i>difference</i> of two sets is formed by the elements that are present in the first set, but not in the\n     * second one. The elements copied by the function come always from the first range, in the same order.\n     *\n     * For containers supporting multiple occurrences of a value, the <i>difference</i> includes as many occurrences of\n     * a given value as in the first range, minus the amount of matching elements in the second, preserving order.\n     *\n     * Notice that this is a directional operation - for a symmetrical equivalent, see {@link set_symmetric_difference}.\n     *\n     * The elements are compared using <i>compare</i>. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!compare(x, y) && !compare(y, x))</code>.\n     *\n     * The elements in the ranges shall already be ordered according to this same criterion (<i>compare</i>). The\n     * resulting range is also sorted according to this.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. The range used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element from the first range.\n     * @param compare Binary function that accepts two arguments of the types pointed by the input iterators, and returns a\n     *\t\t\t\t  value convertible to <code>bool</code>. The value returned indicates whether the first argument is\n     *\t\t\t\t  considered to go before the second in the specific <i>strict weak ordering</i> it defines. The\n     *\t\t\t\t  function shall not modify any of its arguments.\n     *\n     * @return An iterator to the end of the constructed range.",
        "* Symmetric difference of two sorted ranges.\n     *\n     * Constructs a sorted range beginning in the location pointed by0 <i>result</i> with the set\n     * <i>symmetric difference</i> of the two sorted ranges [<i>first1</i>, <i>last1</i>) and [<i>first2</i>, <i>last2</i>).\n     *\n     * The <i>symmetric difference</i> of two sets is formed by the elements that are present in one of the sets, but\n     * not in the other. Among the equivalent elements in each range, those discarded are those that appear before in the\n     * existent order before the call. The existing order is also preserved for the copied elements.\n     *\n     * The elements are compared using {@link less}. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!less(x, y) && !less(y, x))</code>.\n     *\n     * The elements in the ranges shall already be ordered according to this same criterion ({@link less}). The\n     * resulting range is also sorted according to this.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. The range used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element from the other ranges.\n     * @param compare Binary function that accepts two arguments of the types pointed by the input iterators, and returns a\n     *\t\t\t\t  value convertible to <code>bool</code>. The value returned indicates whether the first argument is\n     *\t\t\t\t  considered to go before the second in the specific <i>strict weak ordering</i> it defines. The\n     *\t\t\t\t  function shall not modify any of its arguments.\n     *\n     * @return An iterator to the end of the constructed range.",
        "* Symmetric difference of two sorted ranges.\n     *\n     * Constructs a sorted range beginning in the location pointed by0 <i>result</i> with the set\n     * <i>symmetric difference</i> of the two sorted ranges [<i>first1</i>, <i>last1</i>) and [<i>first2</i>, <i>last2</i>).\n     *\n     * The <i>symmetric difference</i> of two sets is formed by the elements that are present in one of the sets, but\n     * not in the other. Among the equivalent elements in each range, those discarded are those that appear before in the\n     * existent order before the call. The existing order is also preserved for the copied elements.\n     *\n     * The elements are compared using <i>compare</i>. Two elements, <i>x</i> and <i>y</i> are considered equivalent\n     * <code>if (!compare(x, y) && !compare(y, x))</code>.\n     *\n     * The elements in the ranges shall already be ordered according to this same criterion (<i>compare</i>). The\n     * resulting range is also sorted according to this.\n     *\n     * @param first1 {@link base.Iterator Input iterator} to the initial position of the first sorted sequence.\n     * @param last1 {@link base.Iterator Input iterator} to the final position of the first sorted sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), which contains all the elements between <i>first1</i> and <i>last1</i>,\n     *\t\t\t\tincluding the element pointed by <i>first1</i> but not the element pointed by <i>last1</i>.\n     * @param first2 {@link base.Iterator Input iterator} to the initial position of the second sorted sequence.\n     * @param last2 {@link base.Iterator Input iterator} to the final position of the second sorted sequence. The range used is\n     *\t\t\t\t[<i>first2</i>, <i>last2</i>).\n     * @param result {@link base.Iterator Output iterator} to the initial position of the range where the resulting sequence is\n     *\t\t\t\t stored. The pointed type shall support being assigned the value of an element from the other ranges.\n     * @param compare Binary function that accepts two arguments of the types pointed by the input iterators, and returns a\n     *\t\t\t\t  value convertible to <code>bool</code>. The value returned indicates whether the first argument is\n     *\t\t\t\t  considered to go before the second in the specific <i>strict weak ordering</i> it defines. The\n     *\t\t\t\t  function shall not modify any of its arguments.\n     *\n     * @return An iterator to the end of the constructed range.",
        "* Return the smallest.\n     *\n     * Returns the smallest of all the elements in the <i>args</i>.\n     *\n     * @param args Values to compare.\n     *\n     * @return The lesser of the values passed as arguments.",
        "* Return the largest.\n     *\n     * Returns the largest of all the elements in the <i>args</i>.\n     *\n     * @param args Values to compare.\n     *\n     * @return The largest of the values passed as arguments.",
        "* Return smallest and largest elements.\n     *\n     * Returns a {@link Pair} with the smallest of all the elements in the <i>args</i> as first element (the first of\n     * them, if there are more than one), and the largest as second (the last of them, if there are more than one).\n     *\n     * @param args Values to compare.\n     *\n     * @return The lesser and greatest of the values passed as arguments.",
        "* Return smallest element in range.\n     *\n     * Returns an iterator pointing to the element with the smallest value in the range  [<i>first</i>, <i>last</i>).\n     *\n     * The comparisons are performed using either {@link less}; An element is the smallest if no other element\n     * compares less than it. If more than one element fulfills this condition, the iterator returned points to the first\n     * of such elements.\n     *\n     * @param first {@link Iteartor Input iterator} to the initial final position of the sequence to compare.\n     * @param last {@link Iteartor Input iterator} to the final final position of the sequence to compare. The range used\n     *\t\t\t   is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\n     * @return An iterator to smallest value in the range, or <i>last</i> if the range is empty.",
        "* Return smallest element in range.\n     *\n     * Returns an iterator pointing to the element with the smallest value in the range  [<i>first</i>, <i>last</i>).\n     *\n     * The comparisons are performed using either <i>compare</i>; An element is the smallest if no other element\n     * compares less than it. If more than one element fulfills this condition, the iterator returned points to the first\n     * of such elements.\n     *\n     * @param first {@link Iteartor Input iterator} to the initial final position of the sequence to compare.\n     * @param last {@link Iteartor Input iterator} to the final final position of the sequence to compare. The range used\n     *\t\t\t   is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value convertible\n     *\t\t\t\t  to <code>bool</code>. The value returned indicates whether the element passed as first argument is\n     *\t\t\t\t  considered less than the second. The function shall not modify any of its arguments.\n     *\n     * @return An iterator to smallest value in the range, or <i>last</i> if the range is empty.",
        "* Return largest element in range.\n     *\n     * Returns an iterator pointing to the element with the largest value in the range  [<i>first</i>, <i>last</i>).\n     *\n     * The comparisons are performed using either {@link greater}; An element is the largest if no other element\n     * compares less than it. If more than one element fulfills this condition, the iterator returned points to the first\n     * of such elements.\n     *\n     * @param first {@link Iteartor Input iterator} to the initial final position of the sequence to compare.\n     * @param last {@link Iteartor Input iterator} to the final final position of the sequence to compare. The range used\n     *\t\t\t   is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     *\n     * @return An iterator to largest value in the range, or <i>last</i> if the range is empty.",
        "* Return largest element in range.\n     *\n     * Returns an iterator pointing to the element with the largest value in the range  [<i>first</i>, <i>last</i>).\n     *\n     * The comparisons are performed using either <i>compare</i>; An element is the largest if no other element\n     * compares less than it. If more than one element fulfills this condition, the iterator returned points to the first\n     * of such elements.\n     *\n     * @param first {@link Iteartor Input iterator} to the initial final position of the sequence to compare.\n     * @param last {@link Iteartor Input iterator} to the final final position of the sequence to compare. The range used\n     *\t\t\t   is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value convertible\n     *\t\t\t\t  to <code>bool</code>. The value returned indicates whether the element passed as first argument is\n     *\t\t\t\t  considered less than the second. The function shall not modify any of its arguments.\n     *\n     * @return An iterator to largest value in the range, or <i>last</i> if the range is empty.",
        "* Return smallest and largest elements in range.\n     *\n     * Returns a {@link Pair} with an iterator pointing to the element with the smallest value in the range\n     * [<i>first</i>, <i>last</i>) as first element, and the largest as second.\n     *\n     * The comparisons are performed using either {@link less} and {@link greater}.\n     *\n     * If more than one equivalent element has the smallest value, the first iterator points to the first of such\n     * elements.\n     *\n     * If more than one equivalent element has the largest value, the second iterator points to the last of such\n     * elements.\n     *\n     * @param first {@link Iteartor Input iterator} to the initial final position of the sequence to compare.\n     * @param last {@link Iteartor Input iterator} to the final final position of the sequence to compare. The range used\n     *\t\t\t   is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value convertible\n     *\t\t\t\t  to <code>bool</code>. The value returned indicates whether the element passed as first argument is\n     *\t\t\t\t  considered less than the second. The function shall not modify any of its arguments.\n     *\n     * @return A {@link Pair} with an iterator pointing to the element with the smallest value in the range\n     *\t\t   [<i>first</i>, <i>last</i>) as first element, and the largest as second.",
        "* Return smallest and largest elements in range.\n     *\n     * Returns a {@link Pair} with an iterator pointing to the element with the smallest value in the range\n     * [<i>first</i>, <i>last</i>) as first element, and the largest as second.\n     *\n     * The comparisons are performed using either <i>compare</i>.\n     *\n     * If more than one equivalent element has the smallest value, the first iterator points to the first of such\n     * elements.\n     *\n     * If more than one equivalent element has the largest value, the second iterator points to the last of such\n     * elements.\n     *\n     * @param first {@link Iteartor Input iterator} to the initial final position of the sequence to compare.\n     * @param last {@link Iteartor Input iterator} to the final final position of the sequence to compare. The range used\n     *\t\t\t   is [<i>first</i>, <i>last</i>), which contains all the elements between <i>first</i> and <i>last</i>,\n     *\t\t\t   including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.\n     * @param compare Binary function that accepts two elements in the range as arguments, and returns a value convertible\n     *\t\t\t\t  to <code>bool</code>. The value returned indicates whether the element passed as first argument is\n     *\t\t\t\t  considered less than the second. The function shall not modify any of its arguments.\n     *\n     * @return A {@link Pair} with an iterator pointing to the element with the smallest value in the range\n     *\t\t   [<i>first</i>, <i>last</i>) as first element, and the largest as second.",
        "* Clamp a value between a pair of boundary.\n     *\n     * @param v The value to clamp.\n     * @param lo Start of the boundaries to clamp *v* to.\n     * @param hi Terminal of the boundaries to clamp *v* to.\n     *\n     * @return *lo* if *v* is less than *lo*, *hi* if *hi* is less than *v*, otherwise *v*.",
        "* Clamp a value between a pair of boundary.\n     *\n     * @param v The value to clamp.\n     * @param lo Start of the boundaries to clamp *v* to.\n     * @param hi Terminal of the boundaries to clamp *v* to.\n     * @param comp Binary function that accepts two elements as arguments (one of each of the two sequences, in the\n     *\t\t\t   same order), and returns a value convertible to <code>bool</code>. The value returned indicates\n     *\t\t\t   whether the elements are considered to match in the context of this function.\n     *\n     * @return *lo* if *v* is less than *lo*, *hi* if *hi* is less than *v*, otherwise *v*.",
        "* Test whether range is permutation of another.\n     *\n     * Compares the elements in the range [<i>first1</i>, <i>last1</i>) with those in the range beginning at\n     * <i>first2</i>, and returns <code>true</code> if all of the elements in both ranges match, even in a different\n     * order.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the second sequence. The comparison includes up to\n     *\t\t\t\t as many elements of this sequence as those in the range [<i>first1</i>, <i>last1</i>).\n     *\n     * @return <code>true</code> if all the elements in the range [<i>first1</i>, <i>last1</i>) compare equal to those\n     *\t\t   of the range starting at <i>first2</i> in any order, and <code>false</code> otherwise.",
        "* Test whether range is permutation of another.\n     *\n     * Compares the elements in the range [<i>first1</i>, <i>last1</i>) with those in the range beginning at\n     * <i>first2</i>, and returns <code>true</code> if all of the elements in both ranges match, even in a different\n     * order.\n     *\n     * @param first1 An {@link base.Iterator} to the initial position of the first sequence.\n     * @param last1 An {@link base.Iterator} to the final position in a sequence. The range used is\n     *\t\t\t\t[<i>first1</i>, <i>last1</i>), including the element pointed by <i>first1</i>, but not the element\n     *\t\t\t\tpointed by <i>last1</i>.\n     * @param first2 An {@link base.Iterator} to the initial position of the second sequence. The comparison includes up to\n     *\t\t\t\t as many elements of this sequence as those in the range [<i>first1</i>, <i>last1</i>).\n     * @param pred Binary function that accepts two elements as argument (one of each of the two sequences, in the same\n     *\t\t\t   order), and returns a value convertible to <code>bool</code>. The value returned indicates whether\n     *\t\t\t   the elements are considered to match in the context of this function.\n     *\n     * @return <code>true</code> if all the elements in the range [<i>first1</i>, <i>last1</i>) compare equal to those\n     *\t\t   of the range starting at <i>first2</i> in any order, and <code>false</code> otherwise.",
        "* Transform range to previous permutation.\n     *\n     * Rearranges the elements in the range [*first*, *last*) into the previous *lexicographically-ordered* permutation.\n     *\n     * A *permutation* is each one of the N! possible arrangements the elements can take (where *N* is the number of\n     * elements in the range). Different permutations can be ordered according to how they compare\n     * {@link lexicographicaly lexicographical_compare} to each other; The first such-sorted possible permutation (the one\n     * that would compare *lexicographically smaller* to all other permutations) is the one which has all its elements\n     * sorted in ascending order, and the largest has all its elements sorted in descending order.\n     *\n     * The comparisons of individual elements are performed using the {@link less less()} function.\n     *\n     * If the function can determine the previous permutation, it rearranges the elements as such and returns true. If\n     * that was not possible (because it is already at the lowest possible permutation), it rearranges the elements\n     * according to the last permutation (sorted in descending order) and returns false.\n     *\n     * @param first Bidirectional iterators to the initial positions of the sequence\n     * @param last Bidirectional iterators to the final positions of the sequence. The range used is [*first*, *last*),\n     *\t\t\t   which contains all the elements between *first* and *last*, including the element pointed by *first*\n     *\t\t\t   but not the element pointed by *last*.\n     *\n     * @return true if the function could rearrange the object as a lexicographicaly smaller permutation. Otherwise, the\n     *\t\t   function returns false to indicate that the arrangement is not less than the previous, but the largest\n     *\t\t   possible (sorted in descending order).",
        "* Transform range to previous permutation.\n     *\n     * Rearranges the elements in the range [*first*, *last*) into the previous *lexicographically-ordered* permutation.\n     *\n     * A *permutation* is each one of the N! possible arrangements the elements can take (where *N* is the number of\n     * elements in the range). Different permutations can be ordered according to how they compare\n     * {@link lexicographicaly lexicographical_compare} to each other; The first such-sorted possible permutation (the one\n     * that would compare *lexicographically smaller* to all other permutations) is the one which has all its elements\n     * sorted in ascending order, and the largest has all its elements sorted in descending order.\n     *\n     * The comparisons of individual elements are performed using the *compare*.\n     *\n     * If the function can determine the previous permutation, it rearranges the elements as such and returns true. If\n     * that was not possible (because it is already at the lowest possible permutation), it rearranges the elements\n     * according to the last permutation (sorted in descending order) and returns false.\n     *\n     * @param first Bidirectional iterators to the initial positions of the sequence\n     * @param last Bidirectional iterators to the final positions of the sequence. The range used is [*first*, *last*),\n     *\t\t\t   which contains all the elements between *first* and *last*, including the element pointed by *first*\n     *\t\t\t   but not the element pointed by *last*.\n     * @param compare Binary function that accepts two arguments of the type pointed by BidirectionalIterator, and returns\n     *\t\t\t\t  a value convertible to bool. The value returned indicates whether the first argument is considered\n     *\t\t\t\t  to go before the second in the specific strict weak ordering it defines.\n     *\n     * @return true if the function could rearrange the object as a lexicographicaly smaller permutation. Otherwise, the\n     *\t\t   function returns false to indicate that the arrangement is not less than the previous, but the largest\n     *\t\t   possible (sorted in descending order).",
        "* Transform range to next permutation.\n     *\n     * Rearranges the elements in the range [*first*, *last*) into the next *lexicographically greater* permutation.\n     *\n     * A permutation is each one of the *N!* possible arrangements the elements can take (where *N* is the number of\n     * elements in the range). Different permutations can be ordered according to how they compare\n     * {@link lexicographicaly lexicographical_compare} to each other; The first such-sorted possible permutation (the one\n     * that would compare *lexicographically smaller* to all other permutations) is the one which has all its elements\n     * sorted in ascending order, and the largest has all its elements sorted in descending order.\n     *\n     * The comparisons of individual elements are performed using the {@link less} function.\n     *\n     * If the function can determine the next higher permutation, it rearranges the elements as such and returns true. If\n     * that was not possible (because it is already at the largest possible permutation), it rearranges the elements\n     * according to the first permutation (sorted in ascending order) and returns false.\n     *\n     * @param first Bidirectional iterators to the initial positions of the sequence\n     * @param last Bidirectional iterators to the final positions of the sequence. The range used is [*first*, *last*),\n     *\t\t\t   which contains all the elements between *first* and *last*, including the element pointed by *first*\n     *\t\t\t   but not the element pointed by *last*.\n     *\n     * @return true if the function could rearrange the object as a lexicographicaly greater permutation. Otherwise, the\n     *\t\t   function returns false to indicate that the arrangement is not greater than the previous, but the lowest\n     *\t\t   possible (sorted in ascending order).",
        "* Transform range to next permutation.\n     *\n     * Rearranges the elements in the range [*first*, *last*) into the next *lexicographically greater* permutation.\n     *\n     * A permutation is each one of the *N!* possible arrangements the elements can take (where *N* is the number of\n     * elements in the range). Different permutations can be ordered according to how they compare\n     * {@link lexicographicaly lexicographical_compare} to each other; The first such-sorted possible permutation (the one\n     * that would compare *lexicographically smaller* to all other permutations) is the one which has all its elements\n     * sorted in ascending order, and the largest has all its elements sorted in descending order.\n     *\n     * The comparisons of individual elements are performed using the *compare*.\n     *\n     * If the function can determine the next higher permutation, it rearranges the elements as such and returns true. If\n     * that was not possible (because it is already at the largest possible permutation), it rearranges the elements\n     * according to the first permutation (sorted in ascending order) and returns false.\n     *\n     * @param first Bidirectional iterators to the initial positions of the sequence\n     * @param last Bidirectional iterators to the final positions of the sequence. The range used is [*first*, *last*),\n     *\t\t\t   which contains all the elements between *first* and *last*, including the element pointed by *first*\n     *\t\t\t   but not the element pointed by *last*.\n     * @param compare Binary function that accepts two arguments of the type pointed by BidirectionalIterator, and returns\n     *\t\t\t\t  a value convertible to bool. The value returned indicates whether the first argument is considered\n     *\t\t\t\t  to go before the second in the specific strict weak ordering it defines.\n     *\n     * @return true if the function could rearrange the object as a lexicographicaly greater permutation. Otherwise, the\n     *\t\t   function returns false to indicate that the arrangement is not greater than the previous, but the lowest\n     *\t\t   possible (sorted in ascending order).",
        "* An abstract container.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/abstract_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/abstract_containers.png\" style=\"max-width: 100%\" />\n     * </a>\n     *\n     * ### Container properties\n     * <dl>\n     * \t<dt> Sequence </dt>\n     * \t<dd> Elements in sequence containers are ordered in a strict linear sequence. Individual elements are\n     *\t\t accessed by their position in this sequence. </dd>\n     *\n     * \t<dt> Doubly-linked list </dt>\n     *\t<dd> Each element keeps information on how to locate the next and the previous elements, allowing\n     *\t\t constant time insert and erase operations before or after a specific element (even of entire ranges),\n     *\t\t but no direct random access. </dd>\n     * </dl>\n     *\n     * @param <T> Type of elements.\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Default Constructor.",
        "* Assign new content to content.\n         *\n         * Assigns new contents to the container, replacing its current contents, and modifying its\n         * {@link size} accordingly.\n         *\n         * @param begin Input interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.",
        "* Clear content.\n         *\n         * Removes all elements from the Container, leaving the container with a size of 0.",
        "* Return iterator to beginning.\n         *\n         * Returns an iterator referring the first element in the\n         *\n         * #### Note\n         * If the container is {@link empty}, the returned iterator is same with {@link end end()}.\n         *\n         * @return An iterator to the first element in the  The iterator containes the first element's value.",
        "* Return iterator to end.\n         * Returns an iterator referring to the past-the-end element in the\n         *\n         * The past-the-end element is the theoretical element that would follow the last element in the\n         * It does not point to any element, and thus shall not be dereferenced.\n         *\n         * Because the ranges used by functions of the Container do not include the element reference by their\n         * closing iterator, this function is often used in combination with {@link Container}.{@link begin} to\n         * specify a range including all the elements in the container.\n         *\n         * #### Note\n         * Returned iterator from {@link Container}.{@link end} does not refer any element. Trying to accessing\n         * element by the iterator will cause throwing exception ({@link OutOfRange}).\n         *\n         * If the container is {@link empty}, this function returns the same as {@link Container}.{@link begin}.\n         *\n         *\n         * @return An iterator to the end element in the",
        "* Return {@link ReverseIterator reverse iterator} to <i>reverse beginning</i>.\n         *\n         * Returns a {@link ReverseIterator reverse iterator} pointing to the last element in the container (i.e.,\n         * its <i>reverse beginning</i>).\n         *\n         * {@link ReverseIterator reverse iterators} iterate backwards: increasing them moves them towards the\n         * beginning of the\n         *\n         * {@link rbegin} points to the element right before the one that would be pointed to by member {@link end}.\n         *\n         *\n         * @return A {@link ReverseIterator reverse iterator} to the <i>reverse beginning</i> of the sequence",
        "* Return {@link ReverseIterator reverse iterator} to <i>reverse end</i>.\n         *\n         * Returns a {@link ReverseIterator reverse iterator} pointing to the theoretical element preceding the\n         * first element in the container (which is considered its <i>reverse end</i>).\n         *\n         * The range between {@link Container}.{@link rbegin} and {@link Container}.{@link rend} contains all\n         * the elements of the container (in reverse order).\n         *\n         * @return A {@link ReverseIterator reverse iterator} to the <i>reverse end</i> of the sequence",
        "* Return the number of elements in the {@link Container}.\n         *\n         * @return The number of elements in the container.",
        "* Test whether the container is empty.\n         * Returns whether the container is empty (i.e. whether its size is 0).\n         *\n         * This function does not modify the container in any way. To clear the content of the container,\n         * see {@link clear clear()}.\n         *\n         * @return <code>true</code> if the container size is 0, <code>false</code> otherwise.",
        "* Insert elements.\n         *\n         * Appends new elements to the container, and returns the new size of the\n         *\n         * @param items New elements to insert.\n         *\n         * @return New size of the Container.",
        "* Insert an element.\n         *\n         * The container is extended by inserting a new element before the element at the specified\n         * <i>position</i>. This effectively increases the {@link Container.size container size} by the amount of\n         * elements inserted.\n         *\n         * @param position Position in the {@link Container} where the new element is inserted.\n         *\t\t\t\t   {@link iterator} is a member type, defined as a {@link Iterator random access iterator}\n         *\t\t\t\t   type that points to elements.\n         * @param val Value to be copied to the inserted element.\n         *\n         * @re\n        public abstract insert(position: Iterator<T>, val: T): Iterator<T>;\n\n        /* ---------------------------------------------------------\n            ERASE\n        ---------------------------------------------------------",
        "* Erase an element.\n         *\n         * Removes from the container a single element.\n         *\n         * This effectively reduces the container size by the number of element removed.\n         *\n         * @param position Iterator pointing to a single element to be removed from the Container.\n         *\n         * @return An iterator pointing to the element that followed the last element erased by the function\n         *\t\t   call. This is the {@link end Container.end} if the operation erased the last element in the\n         *\t\t   sequence.",
        "* Erase elements.\n         *\n         * Removes from the container a range of elements.\n         *\n         * This effectively reduces the container size by the number of elements removed.\n         *\n         * @param begin An iterator specifying a range of beginning to erase.\n         * @param end An iterator specifying a range of end to erase.\n         *\n         * @return An iterator pointing to the element that followed the last element erased by the function\n         *\t\t   call. This is the {@link end Container.end} if the operation erased the last element in\n         *\t\t   the sequence.",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link Container container} object with same type of elements. Sizes and container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were in <i>obj</i>\n         * before the call, and the elements of <i>obj</i> are those which were in this. All iterators, references and\n         * pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link Container container} of the same type of elements (i.e., instantiated\n         *\t\t\t  with the same template parameter, <b>T</b>) whose content is swapped with that of this\n         *\t\t\t  {@link Container container}.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Default Constructor.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Access element.\n         *\n         * Returns a value to the element at position *index* in the {@link ArrayContainer container}.\n         *\n         * The function automatically checks whether *index* is within the bounds of valid elements\n         * in the {@link ArrayContainer container}, throwing an {@link OutOfRange} exception if it is not (i.e.,\n         * if *index* is greater or equal than its {@link size}).\n         *\n         * @param index Position of an element in the\n         *\t\t\t\tIf this is greater than or equal to the {@link IArrayContainer container} {@link size}, an\n         *\t\t\t\texception of type {@link OutOfRange} is thrown. Notice that the first\n         *\t\t\t\telement has a position of 0 (not 1).\n         *\n         * @return The element at the specified position in the",
        "* Modify element.\n         *\n         * Replaces an element at the specified position (*index*) in this {@link ArrayContainer container}\n         * with the specified element (*val*).\n         *\n         * The function automatically checks whether *index* is within the bounds of valid elements\n         * in the {@link ArrayContainer container}, throwing an {@link OutOfRange} exception if it is not (i.e., if\n         * *index* is greater or equal than its {@link size}).\n         *\n         * @param index A specified position of the value to replace.\n         * @param val A value to be stored at the specified position.\n         *\n         * @return The previous element had stored at the specified position.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* Vector, the dynamic array.\n     *\n     * {@link Vector}s are sequence containers representing arrays that can change in size.\n     *\n     * Just like arrays, {@link Vector}s use contiguous storage locations for their elements, which means that\n     * their elements can also be accessed using offsets on regular pointers to its elements, and just as efficiently\n     * as in arrays. But unlike arrays, their size can change dynamically, with their storage being handled\n     * automatically by the container.\n     *\n     * Internally, {@link Vector}s use a dynamically allocated array to store their elements. This array may need\n     * to be reallocated in order to grow in size when new elements are inserted, which implies allocating a new\n     * array and moving all elements to it. This is a relatively expensive task in terms of processing time, and\n     * thus, {@link Vector}s do not reallocate each time an element is added to the container.\n     *\n     * Compared to the other dynamic sequence containers ({@link Deque}s, {@link List}s), {@link Vector Vectors}\n     * are very efficient accessing its elements (just like arrays) and relatively efficient adding or removing\n     * elements from its end. For operations that involve inserting or removing elements at positions other than the\n     * end, they perform worse than the others, and have less consistent iterators and references than {@link List}s.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" style=\"max-width: 100%\" />\n     * </a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Sequence </dt>\n     *\t<dd>\n     *\t\tElements in sequence containers are ordered in a strict linear sequence. Individual elements are\n     *\t\taccessed by their position in this sequence.\n     *\t</dd>\n     *\n     *\t<dt> Dynamic array </dt>\n     *\t<dd>\n     *\t\tAllows direct access to any element in the sequence, even through pointer arithmetics, and provides\n     *\t\trelatively fast addition/removal of elements at the end of the sequence.\n     *\t</dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements.\n     *\n     * @reference http://www.cplusplus.com/reference/vector/vector\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.\n         *\n         * Constructs an empty container, with no elements.",
        "* @inheritdoc",
        "* Initializer list Constructor.\n         *\n         * Constructs a container with a copy of each of the elements in <i>array</i>, in the same order.\n         *\n         * @param array An array containing elements to be copied and contained.",
        "* Fill Constructor.\n         *\n         * Constructs a container with <i>n</i> elements. Each element is a copy of <i>val</i> (if provided).\n         *\n         * @param n Initial container size (i.e., the number of elements in the container at construction).\n         * @param val Value to fill the container with. Each of the <i>n</i> elements in the container is\n         *\t\t\t  initialized to a copy of this value.",
        "* Copy Constructor.\n         *\n         * Constructs a container with a copy of each of the elements in <i>container</i>, in the same order.\n         *\n         * @param container Another container object of the same type (with the same class template\n         *\t\t\t\t\targuments <i>T</i>), whose contents are either copied or acquired.",
        "* Range Constructor.\n         *\n         * Constructs a container with as many elements as the range (<i>begin</i>, <i>end<i>), with each\n         * element emplace-constructed from its corresponding element in that range, in the same order.\n         *\n         * @param begin Input interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Access data.\n         *\n         * Returns a direct array which is used internally by the {@link vector} to store its owned elements.\n         *\n         * @returns An array.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @inheritdoc",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link Vector container} object with same type of elements. Sizes and container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were in <i>obj</i>\n         * before the call, and the elements of <i>obj</i> are those which were in this. All iterators, references and\n         * pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link Vector container} of the same type of elements (i.e., instantiated\n         *\t\t\t  with the same template parameter, <b>T</b>) whose content is swapped with that of this\n         *\t\t\t  {@link Vector container}.",
        "* @inheritdoc",
        "* Double ended queue.\n     *\n     * {@link Deque} (usually pronounced like \"<i>deck</i>\") is an irregular acronym of\n     * <b>d</b>ouble-<b>e</b>nded <b>q</b>ueue. Double-ended queues are sequence containers with dynamic sizes that can be\n     * expanded or contracted on both ends (either its front or its back).\n     *\n     * Specific libraries may implement deques in different ways, generally as some form of dynamic array. But in any\n     * case, they allow for the individual elements to be accessed directly through random access iterators, with storage\n     * handled automatically by expanding and contracting the container as needed.\n     *\n     * Therefore, they provide a functionality similar to vectors, but with efficient insertion and deletion of\n     * elements also at the beginning of the sequence, and not only at its end. But, unlike {@link Vector Vectors},\n     * {@link Deque Deques} are not guaranteed to store all its elements in contiguous storage locations: accessing\n     * elements in a <u>deque</u> by offsetting a pointer to another element causes undefined behavior.\n     *\n     * Both {@link Vector}s and {@link Deque}s provide a very similar interface and can be used for similar purposes,\n     * but internally both work in quite different ways: While {@link Vector}s use a single array that needs to be\n     * occasionally reallocated for growth, the elements of a {@link Deque} can be scattered in different chunks of\n     * storage, with the container keeping the necessary information internally to provide direct access to any of its\n     * elements in constant time and with a uniform sequential interface (through iterators). Therefore,\n     * {@link Deque Deques} are a little more complex internally than {@link Vector}s, but this allows them to grow more\n     * efficiently under certain circumstances, especially with very long sequences, where reallocations become more\n     * expensive.\n     *\n     * For operations that involve frequent insertion or removals of elements at positions other than the beginning or\n     * the end, {@link Deque Deques} perform worse and have less consistent iterators and references than\n     * {@link List Lists}.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" style=\"max-width: 100%\" /> </a>\n     *\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Sequence </dt>\n     *\t<dd> Elements in sequence containers are ordered in a strict linear sequence. Individual elements\n     *\t\t are accessed by their position in this sequence. </dd>\n     *\n     *\t<dt> Dynamic array </dt>\n     *\t<dd> Generally implemented as a dynamic array, it allows direct access to any element in the\n     *\t\t sequence and provides relatively fast addition/removal of elements at the beginning or the end\n     *\t\t of the sequence. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements.\n     *\n     * @reference http://www.cplusplus.com/reference/deque/deque/\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Default Constructor.\n         *\n         * Constructs an empty container, with no elements.",
        "* Initializer list Constructor.\n         *\n         * Constructs a container with a copy of each of the elements in <i>array</i>, in the same order.\n         *\n         * @param array An array containing elements to be copied and contained.",
        "* Fill Constructor.\n         *\n         * Constructs a container with <i>n</i> elements. Each element is a copy of <i>val</i> (if provided).\n         *\n         * @param n Initial container size (i.e., the number of elements in the container at construction).\n         * @param val Value to fill the container with. Each of the <i>n</i> elements in the container is\n         *\t\t\t  initialized to a copy of this value.",
        "* Copy Constructor.\n         *\n         * Constructs a container with a copy of each of the elements in <i>container</i>, in the same order.\n         *\n         * @param container Another container object of the same type (with the same class template\n         *\t\t\t\t\targuments <i>T</i>), whose contents are either copied or acquired.",
        "* Range Constructor.\n         *\n         * Constructs a container with as many elements as the range (<i>begin</i>, <i>end<i>), with each\n         * element emplace-constructed from its corresponding element in that range, in the same order.\n         *\n         * @param begin Input interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Request a change in capacity.\n         *\n         * Requests that the {@link Deque container} {@link capacity} be at least enough to contain\n         * <i>n</i> elements.\n         *\n         * If <i>n</i> is greater than the current {@link Deque container} {@link capacity}, the\n         * function causes the {@link Deque container} to reallocate its storage increasing its\n         * {@link capacity} to <i>n</i> (or greater).\n         *\n         * In all other cases, the function call does not cause a reallocation and the\n         * {@link Deque container} {@link capacity} is not affected.\n         *\n         * This function has no effect on the {@link Deque container} {@link size} and cannot alter\n         * its elements.\n         *\n         * @param n Minimum {@link capacity} for the {@link Deque container}.\n         *\t\t\tNote that the resulting {@link capacity} may be equal or greater than <i>n</i>.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Return size of allocated storage capacity.\n         *\n         * Returns the size of the storage space currently allocated for the {@link Deque container},\n         * expressed in terms of elements.\n         *\n         * This {@link capacity} is not necessarily equal to the {@link Deque container} {@link size}.\n         * It can be equal or greater, with the extra space allowing to accommodate for growth without the\n         * need to reallocate on each insertion.\n         *\n         * Notice that this {@link capacity} does not suppose a limit on the {@link size} of the\n         * {@link Deque container}. When this {@link capacity} is exhausted and more is needed, it is\n         * automatically expanded by the {@link Deque container} (reallocating it storage space).\n         * The theoretical limit on the {@link size} of a {@link Deque container} is given by member\n         * {@link max_size}.\n         *\n         * The {@link capacity} of a {@link Deque container} can be explicitly altered by calling member\n         * {@link Deque.reserve}.\n         *\n         * @return The size of the currently allocated storage capacity in the {@link Deque container},\n         *\t\t   measured in terms of the number elements it can hold.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link Deque container} object with same type of elements. Sizes and container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were in <i>obj</i>\n         * before the call, and the elements of <i>obj</i> are those which were in this. All iterators, references and\n         * pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link Deque container} of the same type of elements (i.e., instantiated\n         *\t\t\t  with the same template parameter, <b>T</b>) whose content is swapped with that of this\n         *\t\t\t  {@link Deque container}.",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Default Constructor.",
        "* @hidden",
        "* @hidden",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Insert an element.\n         *\n         * The container is extended by inserting a new element before the element at the specified\n         * <i>position</i>. This effectively increases the {@link List.size List size} by the amount of elements\n         * inserted.\n         *\n         * Unlike other standard sequence containers, {@link List} is specifically designed to be efficient\n         * inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position Position in the container where the new element is inserted.\n         *\t\t\t\t   {@link iterator}> is a member type, defined as a\n         *\t\t\t\t   {@link ListIterator bidirectional iterator} type that points to elements.\n         * @param val Value to be inserted as an element.\n         *\n         * @return An iterator that points to the newly inserted element; <i>val</i>.",
        "* Insert elements by repeated filling.\n         *\n         * The container is extended by inserting a new element before the element at the specified\n         * <i>position</i>. This effectively increases the {@link List.size List size} by the amount of elements\n         * inserted.\n         *\n         * Unlike other standard sequence containers, {@link List} is specifically designed to be efficient\n         * inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position Position in the container where the new elements are inserted. The {@link iterator} is a\n         *\t\t\t\t   member type, defined as a {@link ListIterator bidirectional iterator} type that points to\n         *\t\t\t\t   elements.\n         * @param size Number of elements to insert.\n         * @param val Value to be inserted as an element.\n         *\n         * @return An iterator that points to the first of the newly inserted elements.",
        "* Insert elements by range iterators.\n         *\n         * The container is extended by inserting a new element before the element at the specified\n         * <i>position</i>. This effectively increases the {@link List.size List size} by the amount of elements\n         * inserted.\n         *\n         * Unlike other standard sequence containers, {@link List} is specifically designed to be efficient\n         * inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position Position in the container where the new elements are inserted. The {@link iterator} is a\n         *\t\t\t\t   member type, defined as a {@link ListIterator bidirectional iterator} type that points to\n         *\t\t\t\t   elements.\n         * @param begin An iterator specifying range of the begining element.\n         * @param end An iterator specifying range of the ending element.\n         *\n         * @return An iterator that points to the first of the newly inserted elements.",
        "* @hidden",
        "* @hidden",
        "* Erase an element.\n         *\n         * Removes from the {@link List} either a single element; <i>position</i>.\n         *\n         * This effectively reduces the container size by the number of element removed.\n         *\n         * Unlike other standard sequence containers, {@link List} objects are specifically designed to be\n         * efficient inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position Iterator pointing to a single element to be removed from the {@link List}.\n         *\n         * @return An iterator pointing to the element that followed the last element erased by the function call.\n         *\t\t   This is the {@link end end()} if the operation erased the last element in the sequence.",
        "* Erase elements.\n         *\n         * Removes from the {@link List} container a range of elements.\n         *\n         * This effectively reduces the container {@link size} by the number of elements removed.\n         *\n         * Unlike other standard sequence containers, {@link List} objects are specifically designed to be\n         * efficient inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param begin An iterator specifying a range of beginning to erase.\n         * @param end An iterator specifying a range of end to erase.\n         *\n         * @return An iterator pointing to the element that followed the last element erased by the function call.\n         *\t\t   This is the {@link end end()} if the operation erased the last element in the sequence.",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link List container} object with same type of elements. Sizes and container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were in <i>obj</i>\n         * before the call, and the elements of <i>obj</i> are those which were in this. All iterators, references and\n         * pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link List container} of the same type of elements (i.e., instantiated\n         *\t\t\t  with the same template parameter, <b>T</b>) whose content is swapped with that of this\n         *\t\t\t  {@link List container}.",
        "* @inheritdoc",
        "* Doubly linked list.\n     *\n     * {@link List}s are sequence containers that allow constant time insert and erase operations anywhere within the\n     * sequence, and iteration in both directions.\n     *\n     * List containers are implemented as doubly-linked lists; Doubly linked lists can store each of the elements they\n     * contain in different and unrelated storage locations. The ordering is kept internally by the association to each\n     * element of a link to the element preceding it and a link to the element following it.\n     *\n     * Compared to other base standard sequence containers (array, vector and deque), lists perform generally better\n     * in inserting, extracting and moving elements in any position within the container for which an iterator has already\n     * been obtained, and therefore also in algorithms that make intensive use of these, like sorting algorithms.\n     *\n     * The main drawback of lists and forward_lists compared to these other sequence containers is that they lack\n     * direct access to the elements by their position; For example, to access the sixth element in a list, one has to\n     * iterate from a known position (like the beginning or the end) to that position, which takes linear time in the\n     * distance between these. They also consume some extra memory to keep the linking information associated to each\n     * element (which may be an important factor for large lists of small-sized elements).\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     *\n     * ### Container properties\n     * <dl>\n     * \t<dt> Sequence </dt>\n     * \t<dd> Elements in sequence containers are ordered in a strict linear sequence. Individual elements are accessed by\n     *\t\t their position in this sequence. </dd>\n     *\n     * \t<dt> Doubly-linked list </dt>\n     *\t<dd> Each element keeps information on how to locate the next and the previous elements, allowing constant time\n     *\t\t insert and erase operations before or after a specific element (even of entire ranges), but no direct random\n     *\t\t access. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements.\n     *\n     * @reference http://www.cplusplus.com/reference/list/list/\n     * @author Jeongho Nam <http://samchon.org>",
        "* Default Constructor.\n         *\n         * Constructs an empty container, with no elements.",
        "* Initializer list Constructor.\n         *\n         * Constructs a container with a copy of each of the elements in <i>array</i>, in the same order.\n         *\n         * @param array An array containing elements to be copied and contained.",
        "* Fill Constructor.\n         *\n         * Constructs a container with <i>n</i> elements. Each element is a copy of <i>val</i> (if provided).\n         *\n         * @param n Initial container size (i.e., the number of elements in the container at construction).\n         * @param val Value to fill the container with. Each of the <i>n</i> elements in the container is\n         *\t\t\t  initialized to a copy of this value.",
        "* Copy Constructor.\n         *\n         * Constructs a container with a copy of each of the elements in <i>container</i>, in the same order.\n         *\n         * @param container Another container object of the same type (with the same class template\n         *\t\t\t\t\targuments <i>T</i>), whose contents are either copied or acquired.",
        "* Range Constructor.\n         *\n         * Constructs a container with as many elements as the range (<i>begin</i>, <i>end<i>), with each\n         * element emplace-constructed from its corresponding element in that range, in the same order.\n         *\n         * @param begin Input interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.",
        "* @hidden",
        "* @hidden",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Insert an element.\n         *\n         * The container is extended by inserting a new element before the element at the specified\n         * <i>position</i>. This effectively increases the {@link List.size List size} by the amount of elements\n         * inserted.\n         *\n         * Unlike other standard sequence containers, {@link List} is specifically designed to be efficient\n         * inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position Position in the container where the new element is inserted.\n         *\t\t\t\t   {@link iterator}> is a member type, defined as a\n         *\t\t\t\t   {@link ListIterator bidirectional iterator} type that points to elements.\n         * @param val Value to be inserted as an element.\n         *\n         * @return An iterator that points to the newly inserted element; <i>val</i>.",
        "* Insert elements by repeated filling.\n         *\n         * The container is extended by inserting a new element before the element at the specified\n         * <i>position</i>. This effectively increases the {@link List.size List size} by the amount of elements\n         * inserted.\n         *\n         * Unlike other standard sequence containers, {@link List} is specifically designed to be efficient\n         * inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position Position in the container where the new elements are inserted. The {@link iterator} is a\n         *\t\t\t\t   member type, defined as a {@link ListIterator bidirectional iterator} type that points to\n         *\t\t\t\t   elements.\n         * @param size Number of elements to insert.\n         * @param val Value to be inserted as an element.\n         *\n         * @return An iterator that points to the first of the newly inserted elements.",
        "* Insert elements by range iterators.\n         *\n         * The container is extended by inserting a new element before the element at the specified\n         * <i>position</i>. This effectively increases the {@link List.size List size} by the amount of elements\n         * inserted.\n         *\n         * Unlike other standard sequence containers, {@link List} is specifically designed to be efficient\n         * inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position Position in the container where the new elements are inserted. The {@link iterator} is a\n         *\t\t\t\t   member type, defined as a {@link ListIterator bidirectional iterator} type that points to\n         *\t\t\t\t   elements.\n         * @param begin An iterator specifying range of the begining element.\n         * @param end An iterator specifying range of the ending element.\n         *\n         * @return An iterator that points to the first of the newly inserted elements.",
        "* Insert an element.\n         *\n         * The container is extended by inserting a new element before the element at the specified\n         * <i>position</i>. This effectively increases the {@link List.size List size} by the amount of elements\n         * inserted.\n         *\n         * Unlike other standard sequence containers, {@link List} is specifically designed to be efficient\n         * inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position Position in the container where the new element is inserted.\n         *\t\t\t\t   {@link iterator}> is a member type, defined as a\n         *\t\t\t\t   {@link ListReverseIterator bidirectional iterator} type that points to elements.\n         * @param val Value to be inserted as an element.\n         *\n         * @return An iterator that points to the newly inserted element; <i>val</i>.",
        "* Insert elements by repeated filling.\n         *\n         * The container is extended by inserting a new element before the element at the specified\n         * <i>position</i>. This effectively increases the {@link List.size List size} by the amount of elements\n         * inserted.\n         *\n         * Unlike other standard sequence containers, {@link List} is specifically designed to be efficient\n         * inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position Position in the container where the new elements are inserted. The {@link iterator} is a\n         *\t\t\t\t   member type, defined as a {@link ListReverseIterator bidirectional iterator} type that points to\n         *\t\t\t\t   elements.\n         * @param size Number of elements to insert.\n         * @param val Value to be inserted as an element.\n         *\n         * @return An iterator that points to the first of the newly inserted elements.",
        "* Insert elements by range iterators.\n         *\n         * The container is extended by inserting a new element before the element at the specified\n         * <i>position</i>. This effectively increases the {@link List.size List size} by the amount of elements\n         * inserted.\n         *\n         * Unlike other standard sequence containers, {@link List} is specifically designed to be efficient\n         * inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position Position in the container where the new elements are inserted. The {@link iterator} is a\n         *\t\t\t\t   member type, defined as a {@link ListReverseIterator bidirectional iterator} type that points to\n         *\t\t\t\t   elements.\n         * @param begin An iterator specifying range of the begining element.\n         * @param end An iterator specifying range of the ending element.\n         *\n         * @return An iterator that points to the first of the newly inserted elements.",
        "* Erase an element.\n         *\n         * Removes from the {@link List} either a single element; <i>position</i>.\n         *\n         * This effectively reduces the container size by the number of element removed.\n         *\n         * Unlike other standard sequence containers, {@link List} objects are specifically designed to be\n         * efficient inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position base.Iterator pointing to a single element to be removed from the {@link List}.\n         *\n         * @return An iterator pointing to the element that followed the last element erased by the function call.\n         *\t\t   This is the {@link end end()} if the operation erased the last element in the sequence.",
        "* Erase elements.\n         *\n         * Removes from the {@link List} container a range of elements.\n         *\n         * This effectively reduces the container {@link size} by the number of elements removed.\n         *\n         * Unlike other standard sequence containers, {@link List} objects are specifically designed to be\n         * efficient inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param begin An iterator specifying a range of beginning to erase.\n         * @param end An iterator specifying a range of end to erase.\n         *\n         * @return An iterator pointing to the element that followed the last element erased by the function call.\n         *\t\t   This is the {@link end end()} if the operation erased the last element in the sequence.",
        "* Erase an element.\n         *\n         * Removes from the {@link List} either a single element; <i>position</i>.\n         *\n         * This effectively reduces the container size by the number of element removed.\n         *\n         * Unlike other standard sequence containers, {@link List} objects are specifically designed to be\n         * efficient inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param position base.Iterator pointing to a single element to be removed from the {@link List}.\n         *\n         * @return An iterator pointing to the element that followed the last element erased by the function call.\n         *\t\t   This is the {@link rend rend()} if the operation erased the last element in the sequence.",
        "* Erase elements.\n         *\n         * Removes from the {@link List} container a range of elements.\n         *\n         * This effectively reduces the container {@link size} by the number of elements removed.\n         *\n         * Unlike other standard sequence containers, {@link List} objects are specifically designed to be\n         * efficient inserting and removing elements in any position, even in the middle of the sequence.\n         *\n         * @param begin An iterator specifying a range of beginning to erase.\n         * @param end An iterator specifying a range of end to erase.\n         *\n         * @return An iterator pointing to the element that followed the last element erased by the function call.\n         *\t\t   This is the {@link rend rend()} if the operation erased the last element in the sequence.",
        "* Remove duplicate values.\n         *\n         * Removes all but the first element from every consecutive group of equal elements in the\n         *\n         * Notice that an element is only removed from the {@link List} container if it compares equal to the\n         * element immediately preceding it. Thus, this function is especially useful for sorted lists.",
        "* Remove duplicate values.\n         *\n         * Removes all but the first element from every consecutive group of equal elements in the\n         *\n         * The argument <i>binary_pred</i> is a specific comparison function that determine the <u>uniqueness</u>\n         * of an element. In fact, any behavior can be implemented (and not only an equality comparison), but notice\n         * that the function will call <code>binary_pred(it.value, it.prev().value)</code> for all pairs of elements\n         * (where <code>it</code> is an iterator to an element, starting from the second) and remove <code>it</code>\n         * from the {@link List} if the predicate returns <code>true</code>.\n         *\n         * Notice that an element is only removed from the {@link List} container if it compares equal to the\n         * element immediately preceding it. Thus, this function is especially useful for sorted lists.\n         *\n         * @param binary_pred Binary predicate that, taking two values of the same type than those contained in the\n         *\t\t\t\t\t  {@link List}, returns <code>true</code> to remove the element passed as first argument\n         *\t\t\t\t\t  from the container, and <code>false</code> otherwise. This shall be a function pointer\n         *\t\t\t\t\t  or a function object.",
        "* Remove elements with specific value.\n         *\n         * Removes from the container all the elements that compare equal to <i>val</i>. This calls the\n         * destructor of these objects and reduces the container {@link size} by the number of elements removed.\n         *\n         * Unlike member function {@link List.erase}, which erases elements by their position (using an\n         * iterator), this function ({@link List.remove}) removes elements by their value.\n         *\n         * A similar function, {@link List.remove_if}, exists, which allows for a condition other than an\n         * equality comparison to determine whether an element is removed.\n         *\n         * @param val Value of the elements to be removed.",
        "* Remove elements fulfilling condition.\n         *\n         * Removes from the container all the elements for which <i>pred</i> returns <code>true</code>. This\n         * calls the destructor of these objects and reduces the container {@link size} by the number of elements\n         * removed.\n         *\n         * The function calls <code>pred(it.value)</code> for each element (where <code>it</code> is an iterator\n         * to that element). Any of the elements in the list for which this returns <code>true</code>, are removed\n         * from the\n         *\n         * @param pred Unary predicate that, taking a value of the same type as those contained in the forward_list\n         *\t\t\t   object, returns <code>true</code> for those values to be removed from the container, and\n         *\t\t\t   <code>false</code> for those remaining. This can either be a function pointer or a function\n         *\t\t\t   object.",
        "* Merge sorted {@link List Lists}.\n         *\n         * Merges <i>obj</i> into the {@link List} by transferring all of its elements at their respective\n         * ordered positions into the container (<font color='red'>both containers shall already be ordered</font>).\n         *\n         *\n         * This effectively removes all the elements in <i>obj</i> (which becomes {@link empty}), and inserts\n         * them into their ordered position within container (which expands in {@link size} by the number of elements\n         * transferred). The operation is performed without constructing nor destroying any element: they are\n         * transferred, no matter whether <i>obj</i> is an lvalue or an rvalue, or whether the value_type supports\n         * move-construction or not.\n         *\n         * This function requires that the {@link List} containers have their elements already ordered by value\n         * ({@link less}) before the call. For an alternative on unordered {@link List Lists}, see\n         * {@link List.splice}.\n         *\n         * Assuming such ordering, each element of <i>obj</i> is inserted at the position that corresponds to its\n         * value according to the strict weak ordering defined by {@link less}. The resulting order of equivalent\n         * elements is stable (i.e., equivalent elements preserve the relative order they had before the call, and\n         * existing elements precede those equivalent inserted from <i>obj</i>).\n         *\n         * The function does nothing if <code>this == obj</code>.\n         *\n         * @param obj A {@link List} object of the same type (i.e., with the same template parameters, <b>T</b>).\n         * \t\t\t  Note that this function modifies <i>obj</i> no matter whether an lvalue or rvalue reference is\n         *\t\t\t  passed.",
        "* Merge sorted {@link List Lists}.\n         *\n         * Merges <i>obj</i> into the {@link List} by transferring all of its elements at their respective\n         * ordered positions into the container (<font color='red'>both containers shall already be ordered</font>).\n         *\n         *\n         * This effectively removes all the elements in <i>obj</i> (which becomes {@link empty}), and inserts\n         * them into their ordered position within container (which expands in {@link size} by the number of elements\n         * transferred). The operation is performed without constructing nor destroying any element: they are\n         * transferred, no matter whether <i>obj</i> is an lvalue or an rvalue, or whether the value_type supports\n         * move-construction or not.\n         *\n         * The argument <i>compare</i> is a specific predicate to perform the comparison operation between\n         * elements. This comparison shall produce a strict weak ordering of the elements (i.e., a consistent\n         * transitive comparison, without considering its reflexiveness).\n         *\n         * This function requires that the {@link List} containers have their elements already ordered by\n         * <i>compare</i> before the call. For an alternative on unordered {@link List Lists}, see\n         * {@link List.splice}.\n         *\n         * Assuming such ordering, each element of <i>obj</i> is inserted at the position that corresponds to its\n         * value according to the strict weak ordering defined by <i>compare</i>. The resulting order of equivalent\n         * elements is stable (i.e., equivalent elements preserve the relative order they had before the call, and\n         * existing elements precede those equivalent inserted from <i>obj</i>).\n         *\n         * The function does nothing if <code>this == obj</code>.\n         *\n         * @param obj A {@link List} object of the same type (i.e., with the same template parameters, <b>T</b>).\n         * \t\t\t  Note that this function modifies <i>obj</i> no matter whether an lvalue or rvalue reference is\n         *\t\t\t  passed.\n         * @param compare Binary predicate that, taking two values of the same type than those contained in the\n         *\t\t\t\t  {@link list}, returns <code>true</code> if the first argument is considered to go before\n         *\t\t\t\t  the second in the strict weak ordering it defines, and <code>false</code> otherwise.\n         *\t\t\t\t  This shall be a function pointer or a function object.",
        "* Transfer elements from {@link List} to {@link List}.\n         *\n         * Transfers elements from <i>obj</i> into the container, inserting them at <i>position</i>.\n         *\n         * This effectively inserts all elements into the container and removes them from <i>obj</i>, altering\n         * the sizes of both containers. The operation does not involve the construction or destruction of any\n         * element. They are transferred, no matter whether <i>obj</i> is an lvalue or an rvalue, or whether the\n         * value_type supports move-construction or not.\n         *\n         * This first version (1) transfers all the elements of <i>obj</i> into the\n         *\n         * @param position Position within the container where the elements of <i>obj</i> are inserted.\n         * @param obj A {@link List} object of the same type (i.e., with the same template parameters, <b>T</b>).",
        "* Transfer an element from {@link List} to {@link List}.\n         *\n         * Transfers an element from <i>obj</i>, which is pointed by an {@link ListIterator iterator} <i>it</i>,\n         * into the container, inserting the element at specified <i>position</i>.\n         *\n         * This effectively inserts an element into the container and removes it from <i>obj</i>, altering the\n         * sizes of both containers. The operation does not involve the construction or destruction of any element.\n         * They are transferred, no matter whether <i>obj</i> is an lvalue or an rvalue, or whether the value_type\n         * supports move-construction or not.\n         *\n         * This second version (2) transfers only the element pointed by <i>it</i> from <i>obj</i> into the\n         *\n         *\n         * @param position Position within the container where the element of <i>obj</i> is inserted.\n         * @param obj A {@link List} object of the same type (i.e., with the same template parameters, <b>T</b>).\n         *\t\t\t  This parameter may be <code>this</code> if <i>position</i> points to an element not actually\n         *\t\t\t  being spliced.\n         * @param it {@link ListIterator base.Iterator} to an element in <i>obj</i>. Only this single element is\n         *\t\t\t transferred.",
        "* Transfer elements from {@link List} to {@link List}.\n         *\n         * Transfers elements from <i>obj</i> into the container, inserting them at <i>position</i>.\n         *\n         * This effectively inserts those elements into the container and removes them from <i>obj</i>, altering\n         * the sizes of both containers. The operation does not involve the construction or destruction of any\n         * element. They are transferred, no matter whether <i>obj</i> is an lvalue or an rvalue, or whether the\n         * value_type supports move-construction or not.\n         *\n         * This third version (3) transfers the range [<i>begin</i>, <i>end</i>) from <i>obj</i> into the\n         *\n         *\n         * @param position Position within the container where the elements of <i>obj</i> are inserted.\n         * @param obj A {@link List} object of the same type (i.e., with the same template parameters, <b>T</b>).\n         *\t\t\t  This parameter may be <code>this</code> if <i>position</i> points to an element not actually\n         *\t\t\t  being spliced.\n         * @param begin {@link ListIterator An base.Iterator} specifying initial position of a range of elements in\n         *\t\t\t\t<i>obj</i>. Transfers the elements in the range [<b><i>begin</i></b>, <i>end</i>) to\n         *\t\t\t\t<i>position</i>.\n         * @param end {@link ListIterator An base.Iterator} specifying final position of a range of elements in\n         *\t\t\t  <i>obj</i>. Transfers the elements in the range [<i>begin</i>, <b><i>end</i></b>) to\n         *\t\t\t  <i>position</i>. Notice that the range includes all the elements between <i>begin<i/> and\n         *\t\t\t  <i>end</i>, including the element pointed by <i>begin</i> but not the one pointed by <i>end</i>.",
        "* Sort elements in\n         *\n         * Sorts the elements in the {@link List}, altering their position within the\n         *\n         * The sorting is performed by applying an algorithm that uses {@link less}. This comparison shall\n         * produce a strict weak ordering of the elements (i.e., a consistent transitive comparison, without\n         * considering its reflexiveness).\n         *\n         * The resulting order of equivalent elements is stable: i.e., equivalent elements preserve the relative\n         * order they had before the call.\n         *\n         * The entire operation does not involve the construction, destruction or copy of any element object.\n         * Elements are moved within the",
        "* Sort elements in\n         *\n         * Sorts the elements in the {@link List}, altering their position within the\n         *\n         * The sorting is performed by applying an algorithm that uses <i>compare</i>. This comparison shall\n         * produce a strict weak ordering of the elements (i.e., a consistent transitive comparison, without\n         * considering its reflexiveness).\n         *\n         * The resulting order of equivalent elements is stable: i.e., equivalent elements preserve the relative\n         * order they had before the call.\n         *\n         * The entire operation does not involve the construction, destruction or copy of any element object.\n         * Elements are moved within the\n         *\n         * @param compare Binary predicate that, taking two values of the same type of those contained in the\n         *\t\t\t\t  {@link List}, returns <code>true</code> if the first argument goes before the second\n         *\t\t\t\t  argument in the strict weak ordering it defines, and <code>false</code> otherwise. This\n         *\t\t\t\t  shall be a function pointer or a function object.",
        "* @hidden",
        "* @hidden",
        "* Reverse the order of elements.\n         *\n         * Reverses the order of the elements in the list container.",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link List container} object with same type of elements. Sizes and container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were in <i>obj</i>\n         * before the call, and the elements of <i>obj</i> are those which were in this. All iterators, references and\n         * pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link List container} of the same type of elements (i.e., instantiated\n         *\t\t\t  with the same template parameter, <b>T</b>) whose content is swapped with that of this\n         *\t\t\t  {@link List container}.",
        "* @inheritdoc",
        "* An abstract set.\n     *\n     * {@link SetContainer SetContainers} are containers that store elements allowing fast retrieval of\n     * individual elements based on their value.\n     *\n     * In an {@link SetContainer}, the value of an element is at the same time its <i>key</i>, used to\n     * identify it. <i>Keys</i> are immutable, therefore, the elements in an {@link SetContainer} cannot be\n     * modified once in the container - they can be inserted and removed, though.\n     *\n     * {@link SetContainer} stores elements, keeps sequence and enables indexing by inserting elements into a\n     * {@link List} and registering {@link ListIterator iterators} of the *list container* to an index table\n     * like *tree* or *hash-table*.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/set_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd>\n     *\t\tElements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\tposition in the container.\n     *\t</dd>\n     *\n     *\t<dt> Set </dt>\n     *\t<dd> The value of an element is also the <i>key</i> used to identify it. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements. Each element in a {@link SetContainer} container is also identified\n     *\t\t\t  by this value (each value is itself also the element's <i>key</i>).\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* {@link List} storing elements.\n         *\n         * Storing elements and keeping those sequence of the {@link SetContainer} are implemented by\n         * {@link data_ this list container}. Implementing index-table is also related with {@link data_ this list}\n         * by storing {@link ListIterator iterators} ({@link SetIterator} references {@link ListIterator}) who are\n         * created from {@link data_ here}.",
        "* Default Constructor.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Get iterator to element.\n         *\n         * Searches the container for an element with <i>key</i> as value and returns an iterator to it if found,\n         * otherwise it returns an iterator to {@link end end()} (the element past the end of the container).\n         *\n         * Another member function, {@link count count()}, can be used to just check whether a particular element\n         * exists.\n         *\n         * @param key Key to be searched for.\n         *\n         * @return An iterator to the element, if the specified value is found, or {@link end end()} if it is not\n         *\t\t   found in the",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Whether have the item or not.\n         *\n         * Indicates whether a set has an item having the specified identifier.\n         *\n         * @param key Key value of the element whose mapped value is accessed.\n         *\n         * @return Whether the set has an item having the specified identifier.",
        "* Count elements with a specific key.\n         *\n         * Searches the container for elements with a value of k and returns the number of elements found.\n         *\n         * @param key Value of the elements to be counted.\n         *\n         * @return The number of elements in the container with a <i>key</i>.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Insert an element with hint.\n         *\n         * Extends the container by inserting new elements, effectively increasing the container size by the\n         * number of elements inserted.\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param val Value to be inserted as an element.\n         *\n         * @return An iterator pointing to either the newly inserted element or to the element that already had its\n         *\t\t   same value in the {@link SetContainer}.",
        "* Insert an element with hint.\n         *\n         * Extends the container by inserting new elements, effectively increasing the container size by the\n         * number of elements inserted.\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param val Value to be inserted as an element.\n         *\n         * @return An iterator pointing to either the newly inserted element or to the element that already had its\n         *\t\t   same value in the {@link SetContainer}.",
        "* Insert elements with a range of a\n         *\n         * Extends the container by inserting new elements, effectively increasing the container size by the\n         * number of elements inserted.\n         *\n         * @param begin An iterator specifying range of the begining element.\n         * @param end An iterator specifying range of the ending element.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Erase an element.\n         * Removes from the set container the elements whose value is <i>key</i>.\n         *\n         * This effectively reduces the container size by the number of elements removed.\n         *\n         * @param key Value of the elements to be erased.\n         *\n         * @return Number of elements erased.",
        "* @inheritdoc",
        "* Erase elements.\n         * Removes from the set container a range of elements..\n         *\n         * This effectively reduces the container size by the number of elements removed.\n         *\n         * @param begin An iterator specifying a range of beginning to erase.\n         * @param end An iterator specifying a range of end to erase.",
        "* @inheritdoc",
        "* Erase elements.\n         * Removes from the set container a range of elements..\n         *\n         * This effectively reduces the container size by the number of elements removed.\n         *\n         * @param begin An iterator specifying a range of beginning to erase.\n         * @param end An iterator specifying a range of end to erase.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Merge two sets.\n         *\n         * Extracts and transfers elements from *source* to this container.\n         *\n         * @param source A {@link SetContainer set container} to transfer the elements from.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* An abstract set.\n     *\n     * {@link SetContainer SetContainers} are containers that store elements allowing fast retrieval of\n     * individual elements based on their value.\n     *\n     * In an {@link SetContainer}, the value of an element is at the same time its <i>key</i>, used to uniquely\n     * identify it. <i>Keys</i> are immutable, therefore, the elements in an {@link SetContainer} cannot be modified\n     * once in the container - they can be inserted and removed, though.\n     *\n     * {@link UniqueSet} stores elements, keeps sequence and enables indexing by inserting elements into a\n     * {@link List} and registering {@link ListIterator iterators} of the *list container* to an index table\n     * like *tree* or *hash-table*.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/set_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd>\n     *\t\tElements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\tposition in the container.\n     *\t</dd>\n     *\n     *\t<dt> Set </dt>\n     *\t<dd> The value of an element is also the <i>key</i> used to identify it. </dd>\n     *\n     *\t<dt> Unique keys </dt>\n     *\t<dd> No two elements in the container can have equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements. Each element in a {@link SetContainer} container is also identified\n     *\t\t\t  by this value (each value is itself also the element's <i>key</i>).\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* @inheritdoc",
        "* Insert an element.\n         *\n         * Extends the container by inserting new elements, effectively increasing the container {@link size} by\n         * the number of element inserted (zero or one).\n         *\n         * Because elements in a {@link UniqueSet UniqueSets} are unique, the insertion operation checks whether\n         * each inserted element is equivalent to an element already in the container, and if so, the element is not\n         * inserted, returning an iterator to this existing element (if the function returns a value).\n         *\n         * For a similar container allowing for duplicate elements, see {@link MultiSet}.\n         *\n         * @param key Value to be inserted as an element.\n         *\n         * @return A {@link Pair}, with its member {@link Pair.first} set to an iterator pointing to either the newly\n         *\t\t   inserted element or to the equivalent element already in the {@link UniqueSet}. The\n         *\t\t   {@link Pair.second} element in the {@link Pair} is set to true if a new element was inserted or\n         *\t\t   false if an equivalent element already existed.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Extract an element.\n         *\n         * Extracts the element pointed to by <i>val</i> and erases it from the {@link UniqueSet}.\n         *\n         * @param val Value to be extracted.\n         *\n         * @return A value.",
        "* Extract an element.\n         *\n         * Extracts the element pointed to by <i>key</i> and erases it from the {@link UniqueMap}.\n         *\n         * @param it An iterator pointing an element to extract.\n         *\n         * @return An iterator pointing to the element immediately following <i>it</i> prior to the element being\n         *\t\t   erased. If no such element exists,returns {@link end end()}.",
        "* Extract an element.\n         *\n         * Extracts the element pointed to by <i>key</i> and erases it from the {@link UniqueMap}.\n         *\n         * @param it An iterator pointing an element to extract.\n         *\n         * @return An iterator pointing to the element immediately following <i>it</i> prior to the element being\n         *\t\t   erased. If no such element exists,returns {@link end end()}.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Merge two sets.\n         *\n         * Attempts to extract each element in *source* and insert it into this container. If there's an element in this\n         * container with key equivalent to the key of an element from *source*, tnen that element is not extracted from\n         * the *source*. Otherwise, no element with same key exists in this container, then that element will be\n         * transfered from the *source* to this container.\n         *\n         * @param source A {@link SetContainer set container} to transfer the elements from.",
        "* Tree-structured set, <code>std::set</code> of STL.\n     *\n     * {@link TreeSet}s are containers that store unique elements following a specific order.\n     *\n     * In a {@link TreeSet}, the value of an element also identifies it (the value is itself the\n     * <i>key</i>, of type <i>T</i>), and each value must be unique. The value of the elements in a\n     * {@link TreeSet} cannot be modified once in the container (the elements are always const), but they\n     * can be inserted or removed from the container.\n     *\n     * Internally, the elements in a {@link TreeSet} are always sorted following a specific strict weak\n     * ordering criterion indicated by its internal comparison method (of {@link less}).\n     *\n     * {@link TreeSet} containers are generally slower than {@link HashSet} containers to access\n     * individual elements by their <i>key</i>, but they allow the direct iteration on subsets based on their\n     * order.\n     *\n     * {@link TreeSet}s are typically implemented as binary search trees.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" style=\"max-width: 100%\" /> </a></p>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd>\n     *\t\tElements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\tposition in the container.\n     *\t</dd>\n     *\n     *\t<dt> Ordered </dt>\n     *\t<dd>\n     *\t\tThe elements in the container follow a strict order at all times. All inserted elements are\n     *\t\tgiven a position in this order.\n     *\t</dd>\n     *\n     *\t<dt> Set </dt>\n     *\t<dd> The value of an element is also the <i>key</i> used to identify it. </dd>\n     *\n     *\t<dt> Unique keys </dt>\n     *\t<dd> No two elements in the container can have equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements.\n     *\t\t\t  Each element in an {@link TreeSet} is also uniquely identified by this value.\n     *\n     * @reference http://www.cplusplus.com/reference/set/set\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from compare.\n         *\n         * @param compare A binary predicate determines order of elements.",
        "* Contruct from elements.\n         *\n         * @param array Elements to be contained.",
        "* Contruct from elements with compare.\n         *\n         * @param array Elements to be contained.\n         * @param compare A binary predicate determines order of elements.",
        "* Copy Constructor.",
        "* Copy Constructor with compare.\n         *\n         * @param container A container to be copied.\n         * @param compare A binary predicate determines order of elements.",
        "* Range Constructor.\n         *\n         * @param begin Input interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.",
        "* Construct from range and compare.\n         *\n         * @param begin Input interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.\n         * @param compare A binary predicate determines order of elements.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link TreeSet set} of the same type. Sizes abd container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were\n         * in <i>obj</i> before the call, and the elements of <i>obj</i> are those which were in this. All\n         * iterators, references and pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link TreeSet set container} of the same type of elements as this (i.e.,\n         *\t\t\t  with the same template parameters, <b>Key</b> and <b>T</b>) whose content is swapped\n         *\t\t\t  with that of this {@link TreeSet container}.",
        "* @inheritdoc",
        "* Hashed, unordered set.\n     *\n     * {@link HashSet}s are containers that store unique elements in no particular order, and which\n     * allow for fast retrieval of individual elements based on their value.\n     *\n     * In an {@link HashSet}, the value of an element is at the same time its <i>key</i>, that\n     * identifies it uniquely. Keys are immutable, therefore, the elements in an {@link HashSet} cannot be\n     * modified once in the container - they can be inserted and removed, though.\n     *\n     * Internally, the elements in the {@link HashSet} are not sorted in any particular order, but\n     * organized into buckets depending on their hash values to allow for fast access to individual elements\n     * directly by their <i>values</i> (with a constant average time complexity on average).\n     *\n     * {@link HashSet} containers are faster than {@link TreeSet} containers to access individual\n     * elements by their <i>key</i>, although they are generally less efficient for range iteration through a\n     * subset of their elements.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd> Elements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\t position in the container. </dd>\n     *\n     *\t<dt> Hashed </dt>\n     *\t<dd> Hashed containers organize their elements using hash tables that allow for fast access to elements\n     *\t\t by their <i>key</i>. </dd>\n     *\n     *\t<dt> Set </dt>\n     *\t<dd> The value of an element is also the <i>key</i> used to identify it. </dd>\n     *\n     *\t<dt> Unique keys </dt>\n     *\t<dd> No two elements in the container can have equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements.\n     *\t\t\t  Each element in an {@link HashSet} is also uniquely identified by this value.\n     *\n     * @reference http://www.cplusplus.com/reference/unordered_set/unordered_set\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from elements.",
        "* Copy Constructor.",
        "* Construct from range iterators.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link HashSet set} of the same type. Sizes abd container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were\n         * in <i>obj</i> before the call, and the elements of <i>obj</i> are those which were in this. All\n         * iterators, references and pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link HashSet set container} of the same type of elements as this (i.e.,\n         *\t\t\t  with the same template parameters, <b>Key</b> and <b>T</b>) whose content is swapped\n         *\t\t\t  with that of this {@link HashSet container}.",
        "* @inheritdoc",
        "* An abstract set.\n     *\n     * {@link SetContainer SetContainers} are containers that store elements allowing fast retrieval of\n     * individual elements based on their value.\n     *\n     * In an {@link SetContainer}, the value of an element is at the same time its <i>key</i>, used to\n     * identify it. <i>Keys</i> are immutable, therefore, the elements in an {@link SetContainer} cannot be\n     * modified once in the container - they can be inserted and removed, though.\n     *\n     * {@link MultiSet} stores elements, keeps sequence and enables indexing by inserting elements into a\n     * {@link List} and registering {@link ListIterator iterators} of the *list container* to an index table\n     * like *tree* or *hash-table*.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd>\n     *\t\tElements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\tposition in the container.\n     *\t</dd>\n     *\n     *\t<dt> Set </dt>\n     *\t<dd> The value of an element is also the <i>key</i> used to identify it. </dd>\n     *\n     *\t<dt> Multiple equivalent keys </dt>\n     *\t<dd> Multiple elements in the container can have equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements. Each element in a {@link SetContainer} container is also identified\n     *\t\t\t  by this value (each value is itself also the element's <i>key</i>).\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Insert an element.\n         *\n         * Extends the container by inserting new elements, effectively increasing the container {@link size} by\n         * the number of elements inserted.\n         *\n         * @param key Value to be inserted as an element.\n         *\n         * @return An iterator to the newly inserted element.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Tree-structured multiple-key set.\n     *\n     * {@link TreeMultiSet TreeMultiSets} are containers that store elements following a specific order, and\n     * where multiple elements can have equivalent values.\n     *\n     * In a {@link TreeMultiSet}, the value of an element also identifies it (the value is itself\n     * the <i>key</i>, of type <i>T</i>). The value of the elements in a {@link TreeMultiSet} cannot\n     * be modified once in the container (the elements are always const), but they can be inserted or removed\n     * from the container.\n     *\n     * Internally, the elements in a {@link TreeMultiSet TreeMultiSets} are always sorted following a strict\n     * weak ordering criterion indicated by its internal comparison method (of {@link IComparable.less less}).\n     *\n     * {@link TreeMultiSet} containers are generally slower than {@link HashMultiSet} containers\n     * to access individual elements by their <i>key</i>, but they allow the direct iteration on subsets based on\n     * their order.\n     *\n     * {@link TreeMultiSet TreeMultiSets} are typically implemented as binary search trees.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" style=\"max-width: 100%\" /> </a></p>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd>\n     *\t\tElements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\tposition in the container.\n     *\t</dd>\n     *\n     *\t<dt> Ordered </dt>\n     *\t<dd>\n     *\t\tThe elements in the container follow a strict order at all times. All inserted elements are\n     *\t\tgiven a position in this order.\n     *\t</dd>\n     *\n     *\t<dt> Set </dt>\n     *\t<dd> The value of an element is also the <i>key</i> used to identify it. </dd>\n     *\n     *\t<dt> Multiple equivalent keys </dt>\n     *\t<dd> Multiple elements in the container can have equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements. Each element in a {@link TreeMultiSet} container is also identified\n     *\t\t\t  by this value (each value is itself also the element's <i>key</i>).\n     *\n     * @reference http://www.cplusplus.com/reference/set/multiset\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from compare.\n         *\n         * @param compare A binary predicate determines order of elements.",
        "* Contruct from elements.\n         *\n         * @param array Elements to be contained.",
        "* Contruct from elements with compare.\n         *\n         * @param array Elements to be contained.\n         * @param compare A binary predicate determines order of elements.",
        "* Copy Constructor.",
        "* Copy Constructor with compare.\n         *\n         * @param container A container to be copied.\n         * @param compare A binary predicate determines order of elements.",
        "* Range Constructor.\n         *\n         * @param begin Input interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.",
        "* Construct from range and compare.\n         *\n         * @param begin Input interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.\n         * @param compare A binary predicate determines order of elements.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link TreeMultiSet set} of the same type. Sizes abd container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were\n         * in <i>obj</i> before the call, and the elements of <i>obj</i> are those which were in this. All\n         * iterators, references and pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link TreeMultiSet set container} of the same type of elements as this (i.e.,\n         *\t\t\t  with the same template parameters, <b>Key</b> and <b>T</b>) whose content is swapped\n         *\t\t\t  with that of this {@link TreeMultiSet container}.",
        "* @inheritdoc",
        "* Hashed, unordered Multiset.\n     *\n     * {@link HashMultiSet HashMultiSets} are containers that store elements in no particular order, allowing fast\n     * retrieval of individual elements based on their value, much like {@link HashMultiSet} containers,\n     * but allowing different elements to have equivalent values.\n     *\n     * In an {@link HashMultiSet}, the value of an element is at the same time its <i>key</i>, used to\n     * identify it. <i>Keys</i> are immutable, therefore, the elements in an {@link HashMultiSet} cannot be\n     * modified once in the container - they can be inserted and removed, though.\n     *\n     * Internally, the elements in the {@link HashMultiSet} are not sorted in any particular, but\n     * organized into <i>buckets</i> depending on their hash values to allow for fast access to individual\n     * elements directly by their <i>values</i> (with a constant average time complexity on average).\n     *\n     * Elements with equivalent values are grouped together in the same bucket and in such a way that an\n     * iterator can iterate through all of them. Iterators in the container are doubly linked iterators.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd> Elements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\t position in the container. </dd>\n     *\n     *\t<dt> Hashed </dt>\n     *\t<dd> Hashed containers organize their elements using hash tables that allow for fast access to elements\n     *\t\t by their <i>key</i>. </dd>\n     *\n     *\t<dt> Set </dt>\n     *\t<dd> The value of an element is also the <i>key</i> used to identify it. </dd>\n     *\n     *\t<dt> Multiple equivalent keys </dt>\n     *\t<dd> The container can hold multiple elements with equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements.\n     *\t\t   Each element in an {@link UnorderedMultiSet} is also identified by this value..\n     *\n     * @reference http://www.cplusplus.com/reference/unordered_set/unordered_multiset\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from elements.",
        "* Copy Constructor.",
        "* Construct from range iterators.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link HashMultiSet set} of the same type. Sizes abd container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were\n         * in <i>obj</i> before the call, and the elements of <i>obj</i> are those which were in this. All\n         * iterators, references and pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link HashMultiSet set container} of the same type of elements as this (i.e.,\n         *\t\t\t  with the same template parameters, <b>Key</b> and <b>T</b>) whose content is swapped\n         *\t\t\t  with that of this {@link HashMultiSet container}.",
        "* @inheritdoc",
        "* An abstract map.\n     *\n     * {@link MapContainer MapContainers} are associative containers that store elements formed by a combination\n     * of a <i>key value</i> (<i>Key</i>) and a <i>mapped value</i> (<i>T</i>), and which allows for fast retrieval\n     * of individual elements based on their keys.\n     *\n     * In a {@link MapContainer}, the <i>key values</i> are generally used to identify the elements, while the\n     * <i>mapped values</i> store the content associated to this key. The types of <i>key</i> and\n     * <i>mapped value</i> may differ, and are grouped together in member type <i>value_type</i>, which is a\n     * {@link Pair} type combining both:\n     *\n     * <code>typedef pair<const Key, T> value_type;</code>\n     *\n     * {@link MapContainer} stores elements, keeps sequence and enables indexing by inserting elements into a\n     * {@link List} and registering {@link ListIterator iterators} of the *list container* to an index table like\n     * *tree* or *hash-table*.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram\" style=\"max-width: 100%\" /></a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd>\n     *\t\tElements in associative containers are referenced by their <i>key</i> and not by their absolute position\n     *\t\tin the container.\n     *\t</dd>\n     *\n     *\t<dt> Map </dt>\n     *\t<dd>\n     *\t\tEach element associates a <i>key</i> to a <i>mapped value</i>:\n     *\t\t<i>Keys</i> are meant to identify the elements whose main content is the <i>mapped value</i>.\n     *\t</dd>\n     * </dl>\n     *\n     * @param <Key> Type of the keys. Each element in a map is identified by its key value.\n     * @param <T> Type of the mapped value. Each element in a map stores some data as its mapped value.\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Get iterator to element.\n         *\n         * Searches the container for an element with a identifier equivalent to <i>key</i> and returns an\n         * iterator to it if found, otherwise it returns an iterator to {@link end end()}.\n         *\n         * Two keys are considered equivalent if the container's comparison object returns false reflexively\n         * (i.e., no matter the order in which the elements are passed as arguments).\n         *\n         * Another member functions, {@link has has()} and {@link count count()}, can be used to just check\n         * whether a particular <i>key</i> exists.\n         *\n         * @param key Key to be searched for\n         * @return An iterator to the element, if an element with specified <i>key</i> is found, or\n         *\t\t   {@link end end()} otherwise.",
        "* Return iterator to beginning.\n         *\n         * Returns an iterator referring the first element in the\n         *\n         * #### Note\n         * If the container is {@link empty}, the returned iterator is same with {@link end end()}.\n         *\n         * @return An iterator to the first element in the  The iterator containes the first element's value.",
        "* Return iterator to end.\n         * Returns an iterator referring to the past-the-end element in the\n         *\n         * The past-the-end element is the theoretical element that would follow the last element in the\n         *  It does not point to any element, and thus shall not be dereferenced.\n         *\n         * Because the ranges used by functions of the container do not include the element reference by their\n         * closing iterator, this function is often used in combination with {@link MapContainer}.{@link begin} to\n         * specify a range including all the elements in the\n         *\n         * #### Note\n         * Returned iterator from {@link MapContainer}.{@link end} does not refer any element. Trying to accessing\n         * element by the iterator will cause throwing exception ({@link OutOfRange}).\n         *\n         * If the container is {@link empty}, this function returns the same as {@link begin}.\n         *\n         * @return An iterator to the end element in the",
        "* Return {@link MapReverseIterator reverse iterator} to <i>reverse beginning</i>.\n         *\n         * Returns a {@link MapReverseIterator reverse iterator} pointing to the last element in the container\n         * (i.e., its <i>reverse beginning</i>).\n         *\n         * {@link MapReverseIterator Reverse iterators} iterate backwards: increasing them moves them towards the\n         * beginning of the container.\n         *\n         * {@link rbegin} points to the element preceding the one that would be pointed to by member {@link end}.\n         *7\n         *\n         * @return A {@link MapReverseIterator reverse iterator} to the <i>reverse beginning</i> of the sequence\n         *",
        "* Return {@link MapReverseIterator reverse iterator} to <i>reverse end</i>.\n         *\n         * Returns a {@link MapReverseIterator reverse iterator} pointing to the theoretical element right before\n         * the first element in the {@link MapContainer map container} (which is considered its <i>reverse end</i>).\n         *\n         *\n         * The range between {@link MapContainer}.{@link rbegin} and {@link MapContainer}.{@link rend} contains\n         * all the elements of the container (in reverse order).\n         *\n         * @return A {@link MapReverseIterator reverse iterator} to the <i>reverse end</i> of the sequence",
        "* Whether have the item or not.\n         *\n         * Indicates whether a map has an item having the specified identifier.\n         *\n         * @param key Key value of the element whose mapped value is accessed.\n         *\n         * @return Whether the map has an item having the specified identifier.",
        "* Count elements with a specific key.\n         *\n         * Searches the container for elements whose key is <i>key</i> and returns the number of elements found.\n         *\n         * @param key Key value to be searched for.\n         *\n         * @return The number of elements in the container with a <i>key</i>.",
        "* Return the number of elements in the map.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Construct and insert element with hint\n         *\n         * Inserts a new element in the {@link MapContainer map container}. This new element is constructed in\n         * place using *args* as the arguments for the element's constructor. *hint* points to a location in the\n         * container suggested as a hint on where to start the search for its insertion point (the container may or\n         * may not use this suggestion to optimize the insertion operation).\n         *\n         * A similar member function exists, {@link insert}, which either copies or moves an existing object into\n         * the container, and may also take a position *hint*.\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param key The key used both to look up and to insert if not found.\n         * @param value Value, the item.\n         *\n         * @return An iterator pointing to either the newly inserted element or to the element that already had an\n         *\t\t   equivalent key in the {@link MapContainer}.",
        "* Construct and insert element with hint\n         *\n         * Inserts a new element in the {@link MapContainer map container}. This new element is constructed in\n         * place using *args* as the arguments for the element's constructor. *hint* points to a location in the\n         * container suggested as a hint on where to start the search for its insertion point (the container may or\n         * may not use this suggestion to optimize the insertion operation).\n         *\n         * A similar member function exists, {@link insert}, which either copies or moves an existing object into\n         * the container, and may also take a position *hint*.\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param key The key used both to look up and to insert if not found.\n         * @param value Value, the item.\n         *\n         * @return An {@link MapIterator iterator} pointing to either the newly inserted element or to the element\n         *\t\t   that already had an equivalent key in the {@link MapContainer}.",
        "* Construct and insert element with hint\n         *\n         * Inserts a new element in the {@link MapContainer map container}. This new element is constructed in\n         * place using *args* as the arguments for the element's constructor. *hint* points to a location in the\n         * container suggested as a hint on where to start the search for its insertion point (the container may or\n         * may not use this suggestion to optimize the insertion operation).\n         *\n         * A similar member function exists, {@link insert}, which either copies or moves an existing object into\n         * the container, and may also take a position *hint*.\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param pair A single argument of a {@link Pair} type with a value for the *key* as\n         *\t\t\t   {@link Pair.first first} member, and a *value* for the mapped value as\n         *\t\t\t   {@link Pair.second second}.\n         *\n         * @return An iterator pointing to either the newly inserted element or to the element that already had an\n         *\t\t   equivalent key in the {@link MapContainer}.",
        "* Construct and insert element with hint\n         *\n         * Inserts a new element in the {@link MapContainer map container}. This new element is constructed in\n         * place using *args* as the arguments for the element's constructor. *hint* points to a location in the\n         * container suggested as a hint on where to start the search for its insertion point (the container may or\n         * may not use this suggestion to optimize the insertion operation).\n         *\n         * A similar member function exists, {@link insert}, which either copies or moves an existing object into\n         * the container, and may also take a position *hint*.\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param pair A single argument of a {@link Pair} type with a value for the *key* as\n         *\t\t\t   {@link Pair.first first} member, and a *value* for the mapped value as\n         *\t\t\t   {@link Pair.second second}.\n         *\n         * @return An {@link MapIterator iterator} pointing to either the newly inserted element or to the element\n         *\t\t   that already had an equivalent key in the {@link MapContainer}.",
        "* Insert an element.\n         *\n         * Extends the container by inserting a new element, effectively increasing the container {@link size}\n         * by the number of element inserted (zero or one).\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param pair A single argument of a {@link Pair} type with a value for the *key* as\n         *\t\t\t   {@link Pair.first first} member, and a *value* for the mapped value as\n         *\t\t\t   {@link Pair.second second}.\n         *\n         * @return An iterator pointing to either the newly inserted element or to the element that already had an\n         *\t\t   equivalent key in the {@link MapContainer}.",
        "* Insert an element.\n         *\n         * Extends the container by inserting a new element, effectively increasing the container {@link size}\n         * by the number of element inserted (zero or one).\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param pair A single argument of a {@link Pair} type with a value for the *key* as\n         *\t\t\t   {@link Pair.first first} member, and a *value* for the mapped value as\n         *\t\t\t   {@link Pair.second second}.\n         *\n         * @return An iterator pointing to either the newly inserted element or to the element that already had an\n         *\t\t   equivalent key in the {@link MapContainer}.",
        "* Insert an element.\n         *\n         * Extends the container by inserting new elements, effectively increasing the container {@link size}\n         * by the number of elements inserted.\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param tuple Tuple represensts the {@link Pair} to be inserted as an element.\n         *\n         * @return An iterator pointing to either the newly inserted element or to the element that already had an\n         *\t\t   equivalent key in the {@link MapContainer}.",
        "* Insert an element.\n         *\n         * Extends the container by inserting new elements, effectively increasing the container {@link size}\n         * by the number of elements inserted.\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param tuple Tuple represensts the {@link Pair} to be inserted as an element.\n         *\n         * @return An iterator pointing to either the newly inserted element or to the element that already had an\n         *\t\t   equivalent key in the {@link MapContainer}.",
        "* Insert elements from range iterators.\n         *\n         * Extends the container by inserting new elements, effectively increasing the container {@link size} by\n         * the number of elements inserted.\n         *\n         * @param begin Input iterator specifying initial position of a range of elements.\n         * @param end Input iterator specifying final position of a range of elements.\n         *\t\t\t  Notice that the range includes all the elements between <i>begin</i> and <i>end</i>,\n         *\t\t\t  including the element pointed by <i>begin</i> but not the one pointed by <i>end</i>.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Erase an elemet by key.\n         *\n         * Removes from the {@link MapContainer map container} a single element.\n         *\n         * This effectively reduces the container {@link size} by the number of element removed (zero or one),\n         * which are destroyed.\n         *\n         * @param key Key of the element to be removed from the {@link MapContainer}.",
        "* Erase an elemet by iterator.\n         *\n         * Removes from the {@link MapContainer map container} a single element.\n         *\n         * This effectively reduces the container {@link size} by the number of element removed (zero or one),\n         * which are destroyed.\n         *\n         * @param it Iterator specifying position winthin the {@link MapContainer map contaier} to be removed.",
        "* Erase elements by range iterators.\n         *\n         * Removes from the {@link MapContainer map container} a range of elements.\n         *\n         * This effectively reduces the container {@link size} by the number of elements removed, which are\n         * destroyed.\n         *\n         * @param begin An iterator specifying initial position of a range within {@link MapContainer map container}\n         *\t\t\t\tto be removed.\n         * @param end An iterator specifying initial position of a range within {@link MapContainer map container}\n         *\t\t\t  to be removed.\n         *\t\t\t  Notice that the range includes all the elements between <i>begin</i> and <i>end</i>,\n         *\t\t\t  including the element pointed by <i>begin</i> but not the one pointed by <i>end</i>.",
        "* Erase an elemet by iterator.\n         *\n         * Removes from the {@link MapContainer map container} a single element.\n         *\n         * This effectively reduces the container {@link size} by the number of element removed (zero or one),\n         * which are destroyed.\n         *\n         * @param it Iterator specifying position winthin the {@link MapContainer map contaier} to be removed.",
        "* Erase elements by range iterators.\n         *\n         * Removes from the {@link MapContainer map container} a range of elements.\n         *\n         * This effectively reduces the container {@link size} by the number of elements removed, which are\n         * destroyed.\n         *\n         * @param begin An iterator specifying initial position of a range within {@link MapContainer map container}\n         *\t\t\t\tto be removed.\n         * @param end An iterator specifying initial position of a range within {@link MapContainer map container}\n         *\t\t\t  to be removed.\n         *\t\t\t  Notice that the range includes all the elements between <i>begin</i> and <i>end</i>,\n         *\t\t\t  including the element pointed by <i>begin</i> but not the one pointed by <i>end</i>.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Merge two maps.\n         *\n         * Extracts and transfers elements from *source* to this container.\n         *\n         * @param source A {@link MapContainer map container} to transfer the elements from.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* An abstract unique-map.\n     *\n     * {@link UniqueMap UniqueMaps} are associative containers that store elements formed by a combination of a\n     * <i>key value</i> (<i>Key</i>) and a <i>mapped value</i> (<i>T</i>), and which allows for fast retrieval of\n     * individual elements based on their keys.\n     *\n     * In a {@link MapContainer}, the <i>key values</i> are generally used to uniquely identify the elements,\n     * while the <i>mapped values</i> store the content associated to this key. The types of <i>key</i> and\n     * <i>mapped value</i> may differ, and are grouped together in member type <i>value_type</i>, which is a\n     * {@link Pair} type combining both:\n     *\n     * <code>typedef pair<const Key, T> value_type;</code>\n     *\n     * {@link UniqueMap} stores elements, keeps sequence and enables indexing by inserting elements into a\n     * {@link List} and registering {@link ListIterator iterators} of the *list container* to an index table like\n     * *tree* or *hash-table*.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram\" style=\"max-width: 100%\" /></a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd>\n     *\t\tElements in associative containers are referenced by their <i>key</i> and not by their absolute position\n     *\t\tin the container.\n     *\t</dd>\n     *\n     *\t<dt> Map </dt>\n     *\t<dd>\n     *\t\tEach element associates a <i>key</i> to a <i>mapped value</i>:\n     *\t\t<i>Keys</i> are meant to identify the elements whose main content is the <i>mapped value</i>.\n     *\t</dd>\n     *\n     *\t<dt> Unique keys </dt>\n     *\t<dd> No two elements in the container can have equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <Key> Type of the keys. Each element in a map is uniquely identified by its key value.\n     * @param <T> Type of the mapped value. Each element in a map stores some data as its mapped value.\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* @inheritdoc",
        "* Get an element\n         *\n         * Returns a reference to the mapped value of the element identified with <i>key</i>.\n         *\n         * @param key Key value of the element whose mapped value is accessed.\n         *\n         * @throw exception out of range\n         *\n         * @return A reference object of the mapped value (_Ty)",
        "* Set an item as the specified identifier.\n         *\n         * If the identifier is already in map, change value of the identifier. If not, then insert the object\n         * with the identifier.\n         *\n         * @param key Key value of the element whose mapped value is accessed.\n         * @param val Value, the item.",
        "* Construct and insert element.\n         *\n         * Inserts a new element in the {@link UniqueMap} if its *key* is unique. This new element is constructed in\n         * place using args as the arguments for the construction of a *value_type* (which is an  object of a\n         * {@link Pair} type).\n         *\n         * The insertion only takes place if no other element in the container has a *key equivalent* to the one\n         * being emplaced (*keys* in a {@link UniqueMap} container are unique).\n         *\n         * If inserted, this effectively increases the container {@link size} by one.\n         *\n         * A similar member function exists, {@link insert}, which either copies or moves existing objects into the\n         * container.\n         *\n         * @param key The key used both to look up and to insert if not found.\n         * @param value Value, the item.\n         *\n         * @return If the function successfully inserts the element (because no equivalent element existed already in\n         *\t\t   the {@link UniqueMap}), the function returns a {@link Pair} of an {@link MapIterator iterator} to\n         *\t\t   the newly inserted element and a value of true. Otherwise, it returns an\n         *\t\t   {@link MapIterator iterator} to the equivalent element within the container and a value of false.",
        "* Construct and insert element.\n         *\n         * Inserts a new element in the {@link UniqueMap} if its *key* is unique. This new element is constructed in\n         * place using args as the arguments for the construction of a *value_type* (which is an  object of a\n         * {@link Pair} type).\n         *\n         * The insertion only takes place if no other element in the container has a *key equivalent* to the one\n         * being emplaced (*keys* in a {@link UniqueMap} container are unique).\n         *\n         * If inserted, this effectively increases the container {@link size} by one.\n         *\n         * A similar member function exists, {@link insert}, which either copies or moves existing objects into the\n         * container.\n         *\n         * @param pair A single argument of a {@link Pair} type with a value for the *key* as\n         *\t\t\t   {@link Pair.first first} member, and a *value* for the mapped value as\n         *\t\t\t   {@link Pair.second second}.\n         *\n         * @return If the function successfully inserts the element (because no equivalent element existed already in\n         *\t\t   the {@link UniqueMap}), the function returns a {@link Pair} of an {@link MapIterator iterator} to\n         *\t\t   the newly inserted element and a value of true. Otherwise, it returns an\n         *\t\t   {@link MapIterator iterator} to the equivalent element within the container and a value of false.",
        "* Insert an element.\n         *\n         * Extends the container by inserting new elements, effectively increasing the container {@link size} by\n         * one.\n         *\n         * Because element <i>keys</i> in a {@link UniqueMap} are unique, the insertion operation checks whether\n         * each inserted element has a <i>key</i> equivalent to the one of an element already in the container, and\n         * if so, the element is not inserted, returning an iterator to this existing element (if the function\n         * returns a value).\n         *\n         * For a similar container allowing for duplicate elements, see {@link MultiMap}.\n         *\n         * @param pair A single argument of a {@link Pair} type with a value for the *key* as\n         *\t\t\t   {@link Pair.first first} member, and a *value* for the mapped value as\n         *\t\t\t   {@link Pair.second second}.\n         *\n         * @return A {@link Pair}, with its member {@link Pair.first} set to an iterator pointing to either the newly\n         *\t\t   inserted element or to the element with an equivalent key in the {@link UniqueMap}. The\n         *\t\t   {@link Pair.second} element in the {@link Pair} is set to true if a new element was inserted or\n         *\t\t   false if an equivalent key already existed.",
        "* Insert an element.\n         *\n         * Extends the container by inserting a new element, effectively increasing the container size by the\n         * number of elements inserted.\n         *\n         * Because element <i>keys</i> in a {@link UniqueMap} are unique, the insertion operation checks whether\n         * each inserted element has a <i>key</i> equivalent to the one of an element already in the container, and\n         * if so, the element is not inserted, returning an iterator to this existing element (if the function\n         * returns a value).\n         *\n         * For a similar container allowing for duplicate elements, see {@link MultiMap}.\n         *\n         * @param tuple Tuple represensts the {@link Pair} to be inserted as an element.\n         *\n         * @return A {@link Pair}, with its member {@link Pair.first} set to an iterator pointing to either the newly\n         *\t\t   inserted element or to the element with an equivalent key in the {@link UniqueMap}. The\n         *\t\t   {@link Pair.second} element in the {@link Pair} is set to true if a new element was inserted or\n         *\t\t   false if an equivalent key already existed.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Insert or assign an element.\n         *\n         * Inserts an element or assigns to the current element if the <i>key</i> already exists.\n         *\n         * Because element <i>keys</i> in a {@link UniqueMap} are unique, the insertion operation checks whether\n         * each inserted element has a <i>key</i> equivalent to the one of an element already in the container, and\n         * if so, the element is assigned, returning an iterator to this existing element (if the function returns a\n         * value).\n         *\n         * For a similar container allowing for duplicate elements, see {@link MultiMap}.\n         *\n         * @param key The key used both to look up and to insert if not found.\n         * @param value Value, the item.\n         *\n         * @return A {@link Pair}, with its member {@link Pair.first} set to an iterator pointing to either the newly\n         *\t\t   inserted element or to the element with an equivalent key in the {@link UniqueMap}. The\n         *\t\t   {@link Pair.second} element in the {@link Pair} is set to true if a new element was inserted or\n         *\t\t   false if an equivalent key already existed so the <i>value</i> is assigned.",
        "* Insert or assign an element.\n         *\n         * Inserts an element or assigns to the current element if the <i>key</i> already exists.\n         *\n         * Because element <i>keys</i> in a {@link UniqueMap} are unique, the insertion operation checks whether\n         * each inserted element has a <i>key</i> equivalent to the one of an element already in the container, and\n         * if so, the element is assigned, returning an iterator to this existing element (if the function returns a\n         * value).\n         *\n         * For a similar container allowing for duplicate elements, see {@link MultiMap}.\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param key The key used both to look up and to insert if not found.\n         * @param value Value, the item.\n         *\n         * @return An iterator pointing to either the newly inserted element or to the element that already had an\n         *\t\t   equivalent key in the {@link UniqueMap}.",
        "* Insert or assign an element.\n         *\n         * Inserts an element or assigns to the current element if the <i>key</i> already exists.\n         *\n         * Because element <i>keys</i> in a {@link UniqueMap} are unique, the insertion operation checks whether\n         * each inserted element has a <i>key</i> equivalent to the one of an element already in the container, and\n         * if so, the element is assigned, returning an iterator to this existing element (if the function returns a\n         * value).\n         *\n         * For a similar container allowing for duplicate elements, see {@link MultiMap}.\n         *\n         * @param hint Hint for the position where the element can be inserted.\n         * @param key The key used both to look up and to insert if not found.\n         * @param value Value, the item.\n         *\n         * @return An iterator pointing to either the newly inserted element or to the element that already had an\n         *\t\t   equivalent key in the {@link UniqueMap}.",
        "* @hidden",
        "* @hidden",
        "* Extract an element.\n         *\n         * Extracts the element pointed to by <i>key</i> and erases it from the {@link UniqueMap}.\n         *\n         * @param key Key value of the element whose mapped value is accessed.\n         *\n         * @return A {@link Pair} containing the value pointed to by <i>key</i>.",
        "* Extract an element.\n         *\n         * Extracts the element pointed to by <i>key</i> and erases it from the {@link UniqueMap}.\n         *\n         * @param it An iterator pointing an element to extract.\n         *\n         * @return An iterator pointing to the element immediately following <i>it</i> prior to the element being\n         *\t\t   erased. If no such element exists,returns {@link end end()}.",
        "* Extract an element.\n         *\n         * Extracts the element pointed to by <i>key</i> and erases it from the {@link UniqueMap}.\n         *\n         * @param it An iterator pointing an element to extract.\n         *\n         * @return An iterator pointing to the element immediately following <i>it</i> prior to the element being\n         *\t\t   erased. If no such element exists,returns {@link end end()}.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Merge two maps.\n         *\n         * Attempts to extract each element in *source* and insert it into this container. If there's an element in this\n         * container with key equivalent to the key of an element from *source*, tnen that element is not extracted from\n         * the *source*. Otherwise, no element with same key exists in this container, then that element will be\n         * transfered from the *source* to this container.\n         *\n         * @param source A {@link MapContainer map container} to transfer the elements from.",
        "* Tree-structured map, <code>std::map</code> of STL.\n     *\n     * {@link TreeMap TreeMaps} are associative containers that store elements formed by a combination of a\n     * <i>key value</i> (<i>Key</i>) and a <i>mapped value</i> (<i>T</i>), following order.\n     *\n     * In a {@link TreeMap}, the <i>key values</i> are generally used to sort and uniquely identify the elements,\n     * while the <i>mapped values</i> store the content associated to this key. The types of <i>key</i> and\n     * <i>mapped value</i> may differ, and are grouped together in member type <i>value_type</i>, which is a {@link Pair}\n     * type combining both:\n     *\n     * <code>typedef Pair<Key, T> value_type;</code>\n     *\n     * Internally, the elements in a {@link TreeMap} are always sorted by its <i>key</i> following a\n     * <i>strict weak ordering</i> criterion indicated by its internal comparison method {@link less}.\n     *\n     * {@link TreeMap} containers are generally slower than {@link HashMap HashMap} containers to access individual\n     * elements by their <i>key</i>, but they allow the direct iteration on subsets based on their order.\n     *\n     * {@link TreeMap}s are typically implemented as binary search trees.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" style=\"max-width: 100%\" /> </a></p>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd> Elements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\t position in the container. </dd>\n     *\n     *\t<dt> Ordered </dt>\n     *\t<dd> The elements in the container follow a strict order at all times. All inserted elements are\n     *\t\t given a position in this order. </dd>\n     *\n     *\t<dt> Map </dt>\n     *\t<dd> Each element associates a <i>key</i> to a <i>mapped value</i>:\n     *\t\t <i>Keys</i> are meant to identify the elements whose main content is the <i>mapped value</i>. </dd>\n     *\n     *\t<dt> Unique keys </dt>\n     *\t<dd> No two elements in the container can have equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <Key> Type of the keys. Each element in a map is uniquely identified by its key value.\n     * @param <T> Type of the mapped value. Each element in a map stores some data as its mapped value.\n     *\n     * @reference http://www.cplusplus.com/reference/map/map\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from compare.\n         *\n         * @param compare A binary predicate determines order of elements.",
        "* Contruct from elements.\n         *\n         * @param array Elements to be contained.",
        "* Contruct from elements.\n         *\n         * @param array Elements to be contained.\n         * @param compare A binary predicate determines order of elements.",
        "* Contruct from tuples.\n         *\n         * @param array Tuples to be contained.",
        "* Contruct from tuples.\n         *\n         * @param array Tuples to be contained.\n         * @param compare A binary predicate determines order of elements.",
        "* Copy Constructor.\n         *\n         * @param container Another map to copy.",
        "* Copy Constructor.\n         *\n         * @param container Another map to copy.\n         * @param compare A binary predicate determines order of elements.",
        "* Range Constructor.\n         *\n         * @param begin nput interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.",
        "* Range Constructor.\n         *\n         * @param begin nput interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.\n         * @param compare A binary predicate determines order of elements.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link TreeMap map} of the same type. Sizes abd container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were\n         * in <i>obj</i> before the call, and the elements of <i>obj</i> are those which were in this. All\n         * iterators, references and pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link TreeMap map container} of the same type of elements as this (i.e.,\n         *\t\t\t  with the same template parameters, <b>Key</b> and <b>T</b>) whose content is swapped\n         *\t\t\t  with that of this {@link TreeMap container}.",
        "* @inheritdoc",
        "* Hashed, unordered map.\n     *\n     * {@link HashMap}s are associative containers that store elements formed by the combination of a <i>key value</i>\n     * and a <i>mapped value</i>, and which allows for fast retrieval of individual elements based on their <i>keys</i>.\n     *\n     * In an {@link HashMap}, the <i>key value</i> is generally used to uniquely identify the element, while the\n     * <i>mapped value</i> is an object with the content associated to this <i>key</i>. Types of <i>key</i> and\n     * <i>mapped value</i> may differ.\n     *\n     * Internally, the elements in the {@link HashMap} are not sorted in any particular order with respect to either\n     * their <i>key</i> or <i>mapped values</i>, but organized into <i>buckets</i> depending on their hash values to allow\n     * for fast access to individual elements directly by their <i>key values</i> (with a constant average time complexity\n     * on average).\n     *\n     * {@link HashMap} containers are faster than {@link TreeMap} containers to access individual elements by their\n     * <i>key</i>, although they are generally less efficient for range iteration through a subset of their elements.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * ### Container properties\n     * <dl>\n     * \t<dt> Associative </dt>\n     * \t<dd> Elements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\t position in the container. </dd>\n     *\n     * \t<dt> Hashed </dt>\n     * \t<dd> Hashed containers organize their elements using hash tables that allow for fast access to elements\n     *\t\t by their <i>key</i>. </dd>\n     *\n     * \t<dt> Map </dt>\n     * \t<dd> Each element associates a <i>key</i> to a <i>mapped value</i>:\n     *\t\t <i>Keys</i> are meant to identify the elements whose main content is the <i>mapped value</i>. </dd>\n     *\n     * \t<dt> Unique keys </dt>\n     * \t<dd> No two elements in the container can have equivalent keys. </dd>\n     * </dl>\n     *\n     * @param <Key> Type of the key values.\n     *\t\t\t\tEach element in an {@link HashMap} is uniquely identified by its key value.\n     * @param <T> Type of the mapped value.\n     *\t\t\t  Each element in an {@link HashMap} is used to store some data as its mapped value.\n     *\n     * @reference http://www.cplusplus.com/reference/unordered_map/unordered_map\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from elements.",
        "* Contruct from tuples.\n         *\n         * @param array Tuples to be contained.",
        "* Copy Constructor.",
        "* Construct from range iterators.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link HashMap map} of the same type. Sizes abd container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were\n         * in <i>obj</i> before the call, and the elements of <i>obj</i> are those which were in this. All\n         * iterators, references and pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link HashMap map container} of the same type of elements as this (i.e.,\n         *\t\t\t  with the same template parameters, <b>Key</b> and <b>T</b>) whose content is swapped\n         *\t\t\t  with that of this {@link HashMap container}.",
        "* @inheritdoc",
        "* An abstract multi-map.\n     *\n     * {@link MultiMap MultiMaps} are associative containers that store elements formed by a combination of a\n     * <i>key value</i> (<i>Key</i>) and a <i>mapped value</i> (<i>T</i>), and which allows for fast retrieval of\n     * individual elements based on their keys.\n     *\n     * In a {@link MapContainer}, the <i>key values</i> are generally used to identify the elements, while the\n     * <i>mapped values</i> store the content associated to this <i>key</i>. The types of <i>key</i> and\n     * <i>mapped value</i> may differ, and are grouped together in member type <i>value_type</i>, which is a\n     * {@link Pair} type combining both:\n     *\n     * <code>typedef pair<const Key, T> value_type;</code>\n     *\n     * {@link MultiMap} stores elements, keeps sequence and enables indexing by inserting elements into a\n     * {@link List} and registering {@link ListIterator iterators} of the *list container* to an index table like\n     * *tree* or *hash-table*.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd>\n     *\t\tElements in associative containers are referenced by their <i>key</i> and not by their absolute position\n     *\t\tin the container.\n     *\t</dd>\n     *\n     *\t<dt> Map </dt>\n     *\t<dd>\n     *\t\tEach element associates a <i>key</i> to a <i>mapped value</i>:\n     *\t\t<i>Keys</i> are meant to identify the elements whose main content is the <i>mapped value</i>.\n     *\t</dd>\n     *\n     *\t<dt> Multiple equivalent keys </dt>\n     *\t<dd> Multiple elements in the container can have equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <Key> Type of the keys. Each element in a map is identified by its key value.\n     * @param <T> Type of the mapped value. Each element in a map stores some data as its mapped value.\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct and insert element.\n         *\n         * Inserts a new element in the {@link MultiMap}. This new element is constructed in place using <i>args</i>\n         * as the arguments for the element's constructor.\n         *\n         * This effectively increases the container {@link size} by one.\n         *\n         * A similar member function exists, {@link insert}, which either copies or moves existing objects into the\n         * container.\n         *\n         * @param key The key used both to look up and to insert if not found.\n         * @param value Value, the item.\n         *\n         * @return An {@link MapIterator iterator} to the newly inserted element.",
        "* Construct and insert element.\n         *\n         * Inserts a new element in the {@link MultiMap}. This new element is constructed in place using <i>args</i>\n         * as the arguments for the element's constructor.\n         *\n         * This effectively increases the container {@link size} by one.\n         *\n         * A similar member function exists, {@link insert}, which either copies or moves existing objects into the\n         * container.\n         *\n         * @param pair A single argument of a {@link Pair} type with a value for the *key* as\n         *\t\t\t   {@link Pair.first first} member, and a *value* for the mapped value as\n         *\t\t\t   {@link Pair.second second}.\n         * @return An {@link MapIterator iterator} to the newly inserted element.",
        "* Insert elements.\n         *\n         * Extends the container by inserting new elements, effectively increasing the container {@link size} by\n         * the number of elements inserted.\n         *\n         * @param pair A single argument of a {@link Pair} type with a value for the *key* as\n         *\t\t\t   {@link Pair.first first} member, and a *value* for the mapped value as\n         *\t\t\t   {@link Pair.second second}.\n         *\n         * @return An iterator pointing to the newly inserted element.",
        "* Insert elements.\n         *\n         * Extends the container by inserting new elements, effectively increasing the container {@link size} by\n         * the number of elements inserted.\n         *\n         * @param tuple Tuple represensts the {@link Pair} to be inserted as an element.\n         *\n         * @return An iterator pointing to the newly inserted element.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Tree-structured multiple-key map.\n     *\n     * {@link TreeMultiMap TreeMultiMaps} are associative containers that store elements formed by a combination of\n     * a <i>key value</i> and a <i>mapped value</i>, following a specific order, and where multiple elements can\n     * have equivalent keys.\n     *\n     * In a {@link TreeMultiMap}, the <i>key values</i> are generally used to sort and uniquely identify\n     * the elements, while the <i>mapped values</i> store the content associated to this <i>key</i>. The types of\n     * <i>key</i> and <i>mapped value</i> may differ, and are grouped together in member type\n     * <code>value_type</code>, which is a {@link Pair} type combining both:\n     *\n     * <code>typedef Pair<const Key, T> value_type;</code>\n     *\n     * Internally, the elements in a {@link TreeMultiMap}are always sorted by its key following a\n     * strict weak ordering criterion indicated by its internal comparison method (of {@link less}).\n     *\n     * {@link TreeMultiMap}containers are generally slower than {@link HashMap} containers\n     * to access individual elements by their <i>key</i>, but they allow the direct iteration on subsets based\n     * on their order.\n     *\n     * {@link TreeMultiMap TreeMultiMaps} are typically implemented as binary search trees.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" target=\"_blank\"> <\n     * img src=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" style=\"max-width: 100%\" /> </a></p>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd>\n     *\t\tElements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\tposition in the container.\n     *\t</dd>\n     *\n     *\t<dt> Ordered </dt>\n     *\t<dd>\n     *\t\tThe elements in the container follow a strict order at all times. All inserted elements are\n     *\t\tgiven a position in this order.\n     *\t</dd>\n     *\n     *\t<dt> Map </dt>\n     *\t<dd>\n     *\t\tEach element associates a <i>key</i> to a <i>mapped value</i>:\n     *\t\t<i>Keys</i> are meant to identify the elements whose main content is the <i>mapped value</i>.\n     *\t</dd>\n     *\n     *\t<dt> Multiple equivalent keys </dt>\n     *\t<dd> Multiple elements in the container can have equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <Key> Type of the keys. Each element in a map is uniquely identified by its key value.\n     * @param <T> Type of the mapped value. Each element in a map stores some data as its mapped value.\n     *\n     * @reference http://www.cplusplus.com/reference/map/multimap\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from compare.\n         *\n         * @param compare A binary predicate determines order of elements.",
        "* Contruct from elements.\n         *\n         * @param array Elements to be contained.",
        "* Contruct from elements.\n         *\n         * @param array Elements to be contained.\n         * @param compare A binary predicate determines order of elements.",
        "* Contruct from tuples.\n         *\n         * @param array Tuples to be contained.",
        "* Contruct from tuples.\n         *\n         * @param array Tuples to be contained.\n         * @param compare A binary predicate determines order of elements.",
        "* Copy Constructor.\n         *\n         * @param container Another map to copy.",
        "* Copy Constructor.\n         *\n         * @param container Another map to copy.\n         * @param compare A binary predicate determines order of elements.",
        "* Range Constructor.\n         *\n         * @param begin nput interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.",
        "* Range Constructor.\n         *\n         * @param begin nput interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.\n         * @param compare A binary predicate determines order of elements.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link TreeMapMulti map} of the same type. Sizes abd container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were\n         * in <i>obj</i> before the call, and the elements of <i>obj</i> are those which were in this. All\n         * iterators, references and pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link TreeMapMulti map container} of the same type of elements as this (i.e.,\n         *\t\t\t  with the same template parameters, <b>Key</b> and <b>T</b>) whose content is swapped\n         *\t\t\t  with that of this {@link TreeMapMulti container}.",
        "* @inheritdoc",
        "* Hashed, unordered Multimap.\n     *\n     * {@link HashMultiMap}s are associative containers that store elements formed by the combination of\n     * a <i>key value</i> and a <i>mapped value</i>, much like {@link HashMultiMap} containers, but allowing\n     * different elements to have equivalent <i>keys</i>.\n     *\n     * In an {@link HashMultiMap}, the <i>key value</i> is generally used to uniquely identify the\n     * element, while the <i>mapped value</i> is an object with the content associated to this <i>key</i>.\n     * Types of <i>key</i> and <i>mapped value</i> may differ.\n     *\n     * Internally, the elements in the {@link HashMultiMap} are not sorted in any particular order with\n     * respect to either their <i>key</i> or <i>mapped values</i>, but organized into <i>buckets</i> depending on\n     * their hash values to allow for fast access to individual elements directly by their <i>key values</i>\n     * (with a constant average time complexity on average).\n     *\n     * Elements with equivalent <i>keys</i> are grouped together in the same bucket and in such a way that\n     * an iterator can iterate through all of them. Iterators in the container are doubly linked iterators.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd> Elements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\t position in the container. </dd>\n     *\n     *\t<dt> Hashed </dt>\n     *\t<dd> Hashed containers organize their elements using hash tables that allow for fast access to elements\n     *\t\t by their <i>key</i>. </dd>\n     *\n     *\t<dt> Map </dt>\n     *\t<dd> Each element associates a <i>key</i> to a <i>mapped value</i>:\n     *\t\t <i>Keys</i> are meant to identify the elements whose main content is the <i>mapped value</i>. </dd>\n     *\n     *\t<dt> Multiple equivalent keys </dt>\n     *\t<dd> The container can hold multiple elements with equivalent <i>keys</i>. </dd>\n     * </dl>\n     *\n     * @param <Key> Type of the key values.\n     *\t\t\t\tEach element in an {@link HashMultiMap} is identified by a key value.\n     * @param <T> Type of the mapped value.\n     *\t\t\t  Each element in an {@link HashMultiMap} is used to store some data as its mapped value.\n     *\n     * @reference http://www.cplusplus.com/reference/unordered_map/unordered_multimap\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from elements.",
        "* Contruct from tuples.\n         *\n         * @param array Tuples to be contained.",
        "* Copy Constructor.",
        "* Construct from range iterators.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Swap content.\n         *\n         * Exchanges the content of the container by the content of <i>obj</i>, which is another\n         * {@link HashMultiMap map} of the same type. Sizes abd container type may differ.\n         *\n         * After the call to this member function, the elements in this container are those which were\n         * in <i>obj</i> before the call, and the elements of <i>obj</i> are those which were in this. All\n         * iterators, references and pointers remain valid for the swapped objects.\n         *\n         * Notice that a non-member function exists with the same name, {@link swap swap}, overloading that\n         * algorithm with an optimization that behaves like this member function.\n         *\n         * @param obj Another {@link HashMultiMap map container} of the same type of elements as this (i.e.,\n         *\t\t\t  with the same template parameters, <b>Key</b> and <b>T</b>) whose content is swapped\n         *\t\t\t  with that of this {@link HashMultiMap container}.",
        "* @inheritdoc",
        "* LIFO stack.\n     *\n     * {@link Stack}s are a type of container adaptor, specifically designed to operate in a LIFO context\n     * (last-in first-out), where elements are inserted and extracted only from one end of the\n     *\n     * {@link Stack}s are implemented as containers adaptors, which are classes that use an encapsulated object of\n     * a specific container class as its <i>underlying container</i>, providing a specific set of member functions to\n     * access its elements. Elements are pushed/popped from the {@link ILinearContainer.back back()} of the\n     * {@link ILinearContainer specific container}, which is known as the top of the {@link Stack}.\n     *\n     * {@link container_ The underlying container} may be any of the standard container class templates or some\n     * other specifically designed container class. The container shall support the following operations:\n     *\n     * - {@link ILinearContainer.empty empty}\n     * - {@link ILinearContainer.size size}\n     * - {@link ILinearContainer.front front}\n     * - {@link ILinearContainer.back back}\n     * - {@link ILinearContainer.push_back push_back}\n     * - {@link ILinearContainer.pop_back pop_back}\n     *\n     * The standard container classes {@link Vector}, {@link Deque} and {@link List} fulfill these requirements.\n     * By default, if no container class is specified for a particular {@link Stack} class instantiation, the standard\n     * container {@link List} is used.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/linear_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * @param <T> Type of elements.\n     *\n     * @reference http://www.cplusplus.com/reference/stack/stack\n     * @author Jeongho Nam <http://samchon.org>",
        "* The <i>underlying object</i> for implementing the <i>LIFO</i>",
        "* Default Constructor.",
        "* Copy Constructor.",
        "* Return size.\n         *\n         * Returns the number of elements in the {@link Stack}.\n         *\n         * This member function effectively calls member {@link ILinearContainer.size size()} of the\n         * {@link container_ underlying container} object.\n         *\n         * @return The number of elements in the {@link container_ underlying container}.",
        "* Test whether container is empty.\n         *\n         * returns whether the {@link Stack} is empty: i.e. whether its <i>size</i> is zero.\n         *\n         * This member function effectively calls member {@link ILinearContainer.empty empty()} of the\n         * {@link container_ underlying container} object.\n         *\n         * @return <code>true</code> if the <i>underlying container</i>'s size is 0,\n         *\t\t   <code>false</code> otherwise.",
        "* Access next element.\n         *\n         * Returns a value of the top element in the {@link Stack}.\n         *\n         * Since {@link Stack}s are last-in first-out containers, the top element is the last element inserted into\n         * the {@link Stack}.\n         *\n         * This member function effectively calls member {@link ILinearContainer.back back()} of the\n         * {@link container_ underlying container} object.\n         *\n         * @return A value of the top element in the {@link Stack}.",
        "* Insert element.\n         *\n         * Inserts a new element at the top of the {@link Stack}, above its current top element.\n         *\n         * This member function effectively calls the member function\n         * {@link ILinearContainer.push_back push_back()} of the {@link container_ underlying container} object.\n         *\n         * @param val Value to which the inserted element is initialized.",
        "* Remove top element.\n         *\n         * Removes the element on top of the {@link Stack}, effectively reducing its size by one.\n         *\n         * The element removed is the latest element inserted into the {@link Stack}, whose value can be retrieved\n         * by calling member {@link top Stack.top()}.\n         *\n         * This member function effectively calls the member function {@link ILinearContainer.pop_back pop_back()}\n         * of the {@link container_ underlying container} object.",
        "* Swap contents.\n         *\n         * Exchanges the contents of the container adaptor (<i>this</i>) by those of <i>obj</i>.\n         *\n         * This member function calls the non-member function {@link Container.swap swap} (unqualified) to swap\n         * the {@link container_ underlying containers}.\n         *\n         * @param obj Another {@link Stack} container adaptor of the same type (i.e., instantiated with the same\n         *\t\t\t  template parameter, <b>T</b>). Sizes may differ.",
        "* FIFO queue.\n     *\n     * {@link Queue}s are a type of container adaptor, specifically designed to operate in a FIFO context\n     * (first-in first-out), where elements are inserted into one end of the container and extracted from the other.\n     *\n     * {@link Queue}s are implemented as containers adaptors, which are classes that use an encapsulated object of\n     * a specific container class as its underlying container, providing a specific set of member functions to access\n     * its elements. Elements are pushed into the {@link IDeque.back back()} of the specific container and popped from\n     * its {@link IDeque.front front()}.\n     *\n     * {@link container_ The underlying container} may be one of the standard container class template or some\n     * other specifically designed container class. This underlying container shall support at least the following\n     * operations:\n     *\n     * - {@link IDequeContainer.empty empty}\n     * - {@link IDequeContainer.size size}\n     * - {@link IDequeContainer.front front}\n     * - {@link IDequeContainer.back back}\n     * - {@link IDequeContainer.push_back push_back}\n     * - {@link IDequeContainer.pop_front pop_front}\n     *\n     * The standard container classes {@link Deque} and {@link List} fulfill these requirements.\n     * By default, if no container class is specified for a particular {@link Queue} class instantiation, the standard\n     * container {@link List} is used.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/linear_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * @param <T> Type of elements.\n     *\n     * @reference http://www.cplusplus.com/reference/queue/queue\n     * @author Jeongho Nam <http://samchon.org>",
        "* The <i>underlying object</i> for implementing the <i>FIFO</i>",
        "* Default Constructor.",
        "* Copy Constructor.",
        "* Return size.\n         *\n         * Returns the number of elements in the {@link Queue}.\n         *\n         * This member function effectively calls member {@link IDeque.size size()} of the\n         * {@link container_ underlying container} object.\n         *\n         * @return The number of elements in the {@link container_ underlying container}.",
        "* Test whether container is empty.\n         *\n         * returns whether the {@link Queue} is empty: i.e. whether its <i>size</i> is zero.\n         *\n         * This member function efeectively calls member {@link IDeque.empty empty()} of the\n         * {@link container_ underlying container} object.\n         *\n         * @return <code>true</code> if the {@link container_ underlying container}'s size is 0,\n         *\t\t   <code>false</code> otherwise.",
        "* Access next element.\n         *\n         * Returns a value of the next element in the {@link Queue}.\n         *\n         * The next element is the \"oldest\" element in the {@link Queue} and the same element that is popped out\n         * from the queue when {@link pop Queue.pop()} is called.\n         *\n         * This member function effectively calls member {@link IDeque.front front()} of the\n         * {@link container_ underlying container} object.\n         *\n         * @return A value of the next element in the {@link Queue}.",
        "* Access last element.\n         *\n         * Returns a vaue of the last element in the queue. This is the \"newest\" element in the queue (i.e. the\n         * last element pushed into the queue).\n         *\n         * This member function effectively calls the member function {@link IDeque.back back()} of the\n         * {@link container_ underlying container} object.\n         *\n         * @return A value of the last element in the {@link Queue}.",
        "* Insert element.\n         *\n         * Inserts a new element at the end of the {@link Queue}, after its current last element.\n         * The content of this new element is initialized to <i>val</i>.\n         *\n         * This member function effectively calls the member function {@link IDeque.push_back push_back()} of the\n         * {@link container_ underlying container} object.\n         *\n         * @param val Value to which the inserted element is initialized.",
        "* Remove next element.\n         *\n         * Removes the next element in the {@link Queue}, effectively reducing its size by one.\n         *\n         * The element removed is the \"oldest\" element in the {@link Queue} whose value can be retrieved by calling\n         * member {@link front Queue.front()}.\n         *\n         * This member function effectively calls the member function {@link IDeque.pop_front pop_front()} of the\n         * {@link container_ underlying container} object.",
        "* Swap contents.\n         *\n         * Exchanges the contents of the container adaptor (<i>this</i>) by those of <i>obj</i>.\n         *\n         * This member function calls the non-member function {@link Container.swap swap} (unqualified) to swap\n         * the {@link container_ underlying containers}.\n         *\n         * @param obj Another {@link Queue} container adaptor of the same type (i.e., instantiated with the same\n         *\t\t\t  template parameter, <b>T</b>). Sizes may differ.",
        "* Priority queue.\n     *\n     * {@link PriorityQueue Priority queues} are a type of container adaptors, specifically designed such that its\n     * first element is always the greatest of the elements it contains, according to some <i>strict weak ordering</i>\n     * criterion.\n     *\n     * This context is similar to a <i>heap</i>, where elements can be inserted at any moment, and only the\n     * <i>max heap</i> element can be retrieved (the one at the top in the {@link PriorityQueue priority queue}).\n     *\n     * {@link PriorityQueue Priority queues} are implemented as <i>container adaptors</i>, which are classes that\n     * use an encapsulated object of a specific container class as its {@link container_ underlying container},\n     * providing a specific set of member functions to access its elements. Elements are popped from the <i>\"back\"</i>\n     * of the specific container, which is known as the <i>top</i> of the {@link PriorityQueue Priority queue}.\n     *\n     * The {@link container_ underlying container} may be any of the standard container class templates or some\n     * other specifically designed container class. The container shall be accessible through\n     * {@link IArrayIterator random access iterators} and support the following operations:\n     *\n     * - {@link IArrayContainer.empty empty()}\n     * - {@link IArrayContainer.size size()}\n     * - {@link IArrayContainer.front front()}\n     * - {@link IArrayContainer.push_back push_back()}\n     * - {@link IArrayContainer.pop_back pop_back()}\n     *\n     * The standard container classes {@link Vector} and {@link Deque} fulfill these requirements. By default, if\n     * no container class is specified for a particular {@link PriorityQueue} class instantiation, the standard\n     * container {@link Vector} is used.\n     *\n     * Support of {@link IArrayIterator random access iterators} is required to keep a heap structure internally\n     * at all times. This is done automatically by the container adaptor by automatically calling the algorithm\n     * functions <i>make_heap</i>, <i>push_heap</i> and <i>pop_heap</i> when needed.\n     *\n     * @param <T> Type of the elements.\n     *\n     * @reference http://www.cplusplus.com/reference/queue/priority_queue/\n     * @author Jeongho Nam",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from compare.\n         *\n         * @param compare A binary predicate determines order of elements.",
        "* Contruct from elements.\n         *\n         * @param array Elements to be contained.",
        "* Contruct from elements with compare.\n         *\n         * @param array Elements to be contained.\n         * @param compare A binary predicate determines order of elements.",
        "* Copy Constructor.",
        "* Copy Constructor with compare.\n         *\n         * @param container A container to be copied.\n         * @param compare A binary predicate determines order of elements.",
        "* Range Constructor.\n         *\n         * @param begin Input interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.",
        "* Range Constructor with compare.\n         *\n         * @param begin Input interator of the initial position in a sequence.\n         * @param end Input interator of the final position in a sequence.\n         * @param compare A binary predicate determines order of elements.",
        "* Return size.\n         *\n         * Returns the number of elements in the {@link PriorityQueue}.\n         *\n         * This member function effectively calls member {@link IArrayContainer.size size} of the\n         * {@link IArrayContainer underlying container} object.\n         *\n         * @return The number of elements in the underlying",
        "* Test whether container is empty.\n         *\n         * Returns whether the {@link PriorityQueue} is empty: i.e. whether its {@link size} is zero.\n         *\n         * This member function effectively calls member {@link IARray.empty empty} of the\n         * {@link IArrayContainer underlying container} object.",
        "* Access top element.\n         *\n         * Returns a constant reference to the top element in the {@link PriorityQueue}.\n         *\n         * The top element is the element that compares higher in the {@link PriorityQueue}, and the next that is\n         * removed from the container when {@link PriorityQueue.pop} is called.\n         *\n         * This member function effectively calls member {@link IArrayContainer.front front} of the\n         * {@link IArrayContainer underlying container} object.\n         *\n         * @return A reference to the top element in the {@link PriorityQueue}.",
        "* Insert element.\n         *\n         * Inserts a new element in the {@link PriorityQueue}. The content of this new element is initialized to\n         * <i>val</i>.\n         *\n         * This member function effectively calls the member function {@link IArrayContainer.push_back push_back} of the\n         * {@link IArrayContainer underlying container} object, and then reorders it to its location in the heap by calling\n         * the <i>push_heap</i> algorithm on the range that includes all the elements of the\n         *\n         * @param val Value to which the inserted element is initialized.",
        "* Remove top element.\n         *\n         * Removes the element on top of the {@link PriorityQueue}, effectively reducing its {@link size} by one.\n         * The element removed is the one with the highest (or lowest) value.\n         *\n         * The value of this element can be retrieved before being popped by calling member\n         * {@link PriorityQueue.top}.\n         *\n         * This member function effectively calls the <i>pop_heap</i> algorithm to keep the heap property of\n         * {@link PriorityQueue PriorityQueues} and then calls the member function {@link IArrayContainer.pop_back pop_back} of\n         * the {@link IArrayContainer underlying container} object to remove the element.",
        "* Swap contents.\n         *\n         * Exchanges the contents of the container adaptor by those of <i>obj</i>, swapping both the\n         * {@link IArrayContainer underlying container} value and their comparison function using the corresponding\n         * {@link swap swap} non-member functions (unqualified).\n         *\n         * This member function has a <i>noexcept</i> specifier that matches the combined <i>noexcept</i> of the\n         * {@link IArrayContainer.swap swap} operations on the {@link IArrayContainer underlying container} and the comparison\n         * functions.\n         *\n         * @param obj {@link PriorityQueue} container adaptor of the same type (i.e., instantiated with the same\n         *\t\t\t  template parameters, <b>T</b>). Sizes may differ.",
        "* Standard exception class.\n     *\n     * Base class for standard exceptions.\n     *\n     * All objects thrown by components of the standard library are derived from this class.\n     * Therefore, all standard exceptions can be caught by catching this type by reference.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/exception/exception\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from a message.\n         *\n         * @param message A message representing specification about the Exception.",
        "* Get string identifying exception.\n         *\n         * Returns a string that may be used to identify the exception.\n         *\n         * The particular representation pointed by the returned value is implementation-defined.\n         * As a virtual function, derived classes may redefine this function so that specify value are\n         * returned.",
        "* Logic error exception.\n     *\n     * This class defines the type of objects thrown as exceptions to report errors in the internal\n     * logical of the program, such as violation of logical preconditions or class invariants.\n     *\n     * These errors are presumably detectable before the program executes.\n     *\n     * It is used as a base class for several logical error exceptions.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/stdexcept/logic_error\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from a message.\n         *\n         * @param message A message representing specification about the Exception.",
        "* Domain error exception.\n     *\n     * This class defines the type of objects thrown as exceptions to report domain errors.\n     *\n     * Generally, the domain of a mathematical function is the subset of values that it is defined for.\n     * For example, the square root function is only defined for non-negative numbers. Thus, a negative number\n     * for such a function would qualify as a domain error.\n     *\n     * No component of the standard library throws exceptions of this type. It is designed as a standard\n     * exception to be thrown by programs.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a></p>\n     *\n     * @reference http://www.cplusplus.com/reference/stdexcept/domain_error\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from a message.\n         *\n         * @param message A message representing specification about the Exception.",
        "* Invalid argument exception.\n     *\n     * This class defines the type of objects thrown as exceptions to report an invalid argument.\n     *\n     * It is a standard exception that can be thrown by programs. Some components of the standard library\n     * also throw exceptions of this type to signal invalid arguments.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/stdexcept/invalid_argument\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from a message.\n         *\n         * @param message A message representing specification about the Exception.",
        "* Length error exception.\n     *\n     * This class defines the type of objects thrown as exceptions to report a length error.\n     *\n     * It is a standard exception that can be thrown by programs. Some components of the standard library,\n     * such as vector and string also throw exceptions of this type to signal errors resizing.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/stdexcept/length_error\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from a message.\n         *\n         * @param message A message representing specification about the Exception.",
        "* Out-of-range exception.\n     *\n     * This class defines the type of objects thrown as exceptions to report an out-of-range error.\n     *\n     * It is a standard exception that can be thrown by programs. Some components of the standard library,\n     * such as vector, deque, string and bitset also throw exceptions of this type to signal arguments\n     * out of range.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/stdexcept/out_of_range\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from a message.\n         *\n         * @param message A message representing specification about the Exception.",
        "* Runtime error exception.\n     *\n     * This class defines the type of objects thrown as exceptions to report errors that can only be\n     * detected during runtime.\n     *\n     * It is used as a base class for several runtime error exceptions.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/stdexcept/runtime_error\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from a message.\n         *\n         * @param message A message representing specification about the Exception.",
        "* Overflow error exception.\n     *\n     * This class defines the type of objects thrown as exceptions to arithmetic overflow errors.\n     *\n     * It is a standard exception that can be thrown by programs. Some components of the standard library\n     * also throw exceptions of this type to signal range errors.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/stdexcept/overflow_error\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from a message.\n         *\n         * @param message A message representing specification about the Exception.",
        "* Underflow error exception.\n     *\n     * This class defines the type of objects thrown as exceptions to arithmetic underflow errors.\n     *\n     * No component of the standard library throws exceptions of this type. It is designed as a standard\n     * exception to be thrown by programs.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/stdexcept/underflow_error\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from a message.\n         *\n         * @param message A message representing specification about the Exception.",
        "* Range error exception.\n     *\n     * This class defines the type of objects thrown as exceptions to report range errors in internal\n     * computations.\n     *\n     * It is a standard exception that can be thrown by programs. Some components of the standard library\n     * also throw exceptions of this type to signal range errors.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/stdexcept/range_error\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from a message.\n         *\n         * @param message A message representing specification about the Exception.",
        "* An abstract error instance.\n     *\n     * {@link ErrorInstance} is an abstract class of {@link ErrorCode} and {@link ErrorCondition}\n     * holding an error instance's identifier {@link value}, associated with a {@link category}.\n     *\n     * The operating system and other low-level applications and libraries generate numerical error codes to\n     * represent possible results. These numerical values may carry essential information for a specific platform,\n     * but be non-portable from one platform to another.\n     *\n     * Objects of this class associate such numerical codes to {@link ErrorCategory error categories},\n     * so that they can be interpreted when needed as more abstract (and portable)\n     * {@link ErrorCondition error conditions}.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* @hidden",
        "* Default Constructor.",
        "* Construct from a numeric value and error category.\n         *\n         * @param val A numerical value identifying an error instance.\n         * @param category A reference to an {@link ErrorCategory} object.",
        "* Assign error instance.\n         *\n         * Assigns the {@link ErrorCode} object a value of val associated with the {@link ErrorCategory}.\n         *\n         * @param val A numerical value identifying an error instance.\n         * @param category A reference to an {@link ErrorCategory} object.",
        "* Clear error instance.\n         *\n         * Clears the value in the {@link ErrorCode} object so that it is set to a value of <i>0</i> of the\n         * {@link ErrorCategory.systemCategory ErrorCategory.systemCategory()} (indicating no error).",
        "* Get category.\n         *\n         * Returns a reference to the {@link ErrorCategory} associated with the {@link ErrorCode} object.\n         *\n         * @return A reference to a non-copyable object of a type derived from {@link ErrorCategory}.",
        "* Error value.\n         *\n         * Returns the error value associated with the {@link ErrorCode} object.\n         *\n         * @return The error value.",
        "* Get message.\n         *\n         * Returns the message associated with the error instance.\n         *\n         * Error messages are defined by the {@link category} the error instance belongs to.\n         *\n         * This function returns the same as if the following member was called:\n         *\n         * <code>category().message(value())</code>\n         *\n         * @return A string object with the message associated with the {@link ErrorCode}.",
        "* Default error condition.\n         *\n         * Returns the default {@link ErrorCondition}object associated with the {@link ErrorCode} object.\n         *\n         * This function returns the same as if the following member was called:\n         *\n         * <code>category().default_error_condition(value())</code>\n         *\n         * {@link ErrorCategory.default_error_condition ErrorCategory.default_error_condition()}\n         * is a virtual member function, that can operate differently for each category.\n         *\n         * @return An {@link ErrorCondition}object that corresponds to the {@link ErrorCode} object.",
        "* Convert to bool.\n         *\n         * Returns whether the error instance has a numerical {@link value} other than 0.\n         *\n         * If it is zero (which is generally used to represent no error), the function returns false, otherwise it returns true.\n         *\n         * @return <code>true</code> if the error's numerical value is not zero.\n         *\t\t   <code>false</code> otherwise.",
        "* System error exception.\n     *\n     * This class defines the type of objects thrown as exceptions to report conditions originating during\n     * runtime from the operating system or other low-level application program interfaces which have an\n     * associated {@link ErrorCode}.\n     *\n     * The class inherits from {@link RuntimeError}, to which it adds an {@link ErrorCode} as\n     * member code (and defines a specialized what member).\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/system_error/system_error\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Construct from an error code.\n         *\n         * @param code An {@link ErrorCode} object.",
        "* Construct from an error code and message.\n         *\n         * @param code An {@link ErrorCode} object.\n         * @param message A message incorporated in the string returned by member {@link what what()}.",
        "* Construct from a numeric value and error category.\n         *\n         * @param val A numerical value identifying an error code.\n         * @param category A reference to an {@link ErrorCode} object.",
        "* Construct from a numeric value, error category and message.\n         *\n         * @param val A numerical value identifying an error code.\n         * @param category A reference to an {@link ErrorCode} object.\n         * @param message A message incorporated in the string returned by member {@link what what()}.",
        "* Get error code.\n         *\n         * Returns the {@link ErrorCode} object associated with the exception.\n         *\n         * This value is either the {@link ErrorCode} passed to the construction or its equivalent\n         * (if constructed with a value and a {@link category}.\n         *\n         * @return The {@link ErrorCode} associated with the object.",
        "* Error category.\n     *\n     * This type serves as a base class for specific category types.\n     *\n     * Category types are used to identify the source of an error. They also define the relation between\n     * {@link ErrorCode} and {@link ErrorCondition}objects of its category, as well as the message set for {@link ErrorCode}\n     * objects.\n     *\n     * Objects of these types have no distinct values and are not-copyable and not-assignable, and thus can only be\n     * passed by reference. As such, only one object of each of these types shall exist, each uniquely identifying its own\n     * category: all error codes and conditions of a same category shall return a reference to same object.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/system_error/error_category\n     * @author Jeongho Nam <http://samchon.org>",
        "* Default Constructor.",
        "* Return category name.\n         *\n         * In derived classes, the function returns a string naming the category.\n         *\n         * In {@link ErrorCategory}, it is a pure virtual member function.\n         *\n         * <ul>\n         *\t<li> In the {@link GenericCategory} object, it returns <i>\"generic\"</i>. </li>\n         *\t<li> In the {@link SystemCategory} object, it returns <i>\"system\"</i>. </li>\n         *\t<li> In the {@link IOStreamCategory} object, it returns <i>\"iostream\"</i>. </li>\n         * </ul>\n         *\n         * @return The category name.",
        "* Error message.\n         *\n         * In derived classes, the function returns a string object with a message describing the error condition\n         * denoted by <i>val</i>.\n         *\n         * In {@link ErrorCategory}, it is a pure virtual member function.\n         *\n         * This function is called both by {@link ErrorCode.message ErrorCode.message()} and\n         * {@link ErrorCondition.message ErrorCondition.message()} to obtain the corresponding message in the\n         * {@link category}. Therefore, numerical values used by custom <i>error codes</i> and\n         * {@link ErrorCondition error conditions} should only match for a category if they describe the same error.\n         *\n         * @param val A numerical value identifying an error condition.\n         *\t\t\t  If the {@link ErrorCategory} object is the {@link GenericCategory}, this argument is equivalent to an\n         *\t\t\t  {@link errno} value.\n         *\n         * @return A string object with the message.",
        "* Default error condition.\n         *\n         * Returns the default {@link ErrorCondition}object of this category that is associated with the\n         * {@link ErrorCode} identified by a value of <i>val</i>.\n         *\n         * Its definition in the base class {@link ErrorCategory} returns the same as constructing an\n         * {@link ErrorCondition} object with:\n         *\n         * <code>new ErrorCondition(val, *this);</code>\n         *\n         * As a virtual member function, this behavior can be overriden in derived classes.\n         *\n         * This function is called by the default definition of member {@link equivalent equivalent()}, which is used to\n         * compare {@link ErrorCondition error conditions} with error codes.\n         *\n         * @param val A numerical value identifying an error condition.\n         *\n         * @return The default {@link ErrorCondition}object associated with condition value <i>val</i> for this category.",
        "* Check error code equivalence.\n         *\n         * Checks whether, for the category, an {@link ErrorCode error code} is equivalent to an\n         * {@link ErrorCondition error condition.\n         *\n         * This function is called by the overloads of comparison operators when an {@link ErrorCondition} object is\n         * compared to an {@link ErrorCode} object to check for equality or inequality. If either one of those objects'\n         * {@link ErrorCategory categories} considers the other equivalent using this function, they are considered\n         * equivalent by the operator.\n         *\n         * As a virtual member function, this behavior can be overridden in derived classes to define a different\n         * correspondence mechanism for each {@link ErrorCategory} type.\n         *\n         * @param val_code A numerical value identifying an error code.\n         * @param cond An object of an {@link ErrorCondition} type.\n         *\n         * @return <code>true</code> if the arguments are considered equivalent. <code>false</code> otherwise.",
        "* Check error code equivalence.\n         *\n         * Checks whether, for the category, an {@link ErrorCode error code} is equivalent to an\n         * {@link ErrorCondition error condition.\n         *\n         * This function is called by the overloads of comparison operators when an {@link ErrorCondition} object is\n         * compared to an {@link ErrorCode} object to check for equality or inequality. If either one of those objects'\n         * {@link ErrorCategory categories} considers the other equivalent using this function, they are considered\n         * equivalent by the operator.\n         *\n         * As a virtual member function, this behavior can be overridden in derived classes to define a different\n         * correspondence mechanism for each {@link ErrorCategory} type.\n         *\n         * @param code An object of an {@link ErrorCode} type.\n         * @param val_cond A numerical value identifying an error code.\n         *\n         * @return <code>true</code> if the arguments are considered equivalent. <code>false</code> otherwise.",
        "* Error condition.\n     *\n     * Objects of this type hold a condition {@link value} associated with a {@link category}.\n     *\n     * Objects of this type describe errors in a generic way so that they may be portable across different\n     * systems. This is in contrast with {@link ErrorCode} objects, that may contain system-specific\n     * information.\n     *\n     * Because {@link ErrorCondition}objects can be compared with error_code objects directly by using\n     * <code>relational operators</code>, {@link ErrorCondition}objects are generally used to check whether\n     * a particular {@link ErrorCode} obtained from the system matches a specific error condition no matter\n     * the system.\n     *\n     * The {@link ErrorCategory categories} associated with the {@link ErrorCondition} and the\n     * {@link ErrorCode} define the equivalences between them.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/system_error/error_condition\n     * @author Jeongho Nam <http://samchon.org>",
        "* Default Constructor.",
        "* Construct from a numeric value and error category.\n         *\n         * @param val A numerical value identifying an error condition.\n         * @param category A reference to an {@link ErrorCategory} object.",
        "* Error code.\n     *\n     * Objects of this type hold an error code {@link value} associated with a {@link category}.\n     *\n     * The operating system and other low-level applications and libraries generate numerical error codes to\n     * represent possible results. These numerical values may carry essential information for a specific platform,\n     * but be non-portable from one platform to another.\n     *\n     * Objects of this class associate such numerical codes to {@link ErrorCategory error categories}, so that they\n     * can be interpreted when needed as more abstract (and portable) {@link ErrorCondition error conditions}.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/exceptions.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/exceptions.png\" style=\"max-width: 100%\" /> </a>\n     *\n     * @reference http://www.cplusplus.com/reference/system_error/error_code\n     * @author Jeongho Nam <http://samchon.org>",
        "* Default Constructor.",
        "* Construct from a numeric value and error category.\n         *\n         * @param val A numerical value identifying an error code.\n         * @param category A reference to an {@link ErrorCategory} object.",
        "* Function handling termination on exception\n     *\n     * Calls the current terminate handler.\n     *\n     * By default, the terminate handler calls abort. But this behavior can be redefined by calling\n     * {@link set_terminate}.\n     *\n     * This function is automatically called when no <code>catch</code> handler can be found for a thrown exception,\n     * or for some other exceptional circumstance that makes impossible to continue the exception handling process.\n     *\n     * This function is provided so that the terminate handler can be explicitly called by a program that needs to\n     * abnormally terminate, and works even if {@link set_terminate} has not been used to set a custom terminate handler\n     * (calling abort in this case).",
        "* Set <i>terminate handler</i> function.\n     *\n     * A <i>terminate handler</i> function is a function automatically called when the exception handling process has\n     * to be abandoned for some reason. This happens when no catch handler can be found for a thrown exception, or for\n     * some other exceptional circumstance that makes impossible to continue the exception handling process.\n     *\n     * Before this function is called by the program for the first time, the default behavior is to call abort.\n     *\n     * A program may explicitly call the current terminate handler function by calling {@link terminate}.\n     *\n     * @param f Function that takes no parameters and returns no value (<i>void</i>).",
        "* Get <i>terminate handler</i> function.\n     *\n     * The <i>terminate handler</i> function is automatically called when no <code>catch</code> handler can be found\n     * for a thrown exception, or for some other exceptional circumstance that makes impossible to continue the exception\n     * handling process.\n     *\n     * If no such function has been set by a previous call to {@link set_terminate}, the function returns a\n     * <i>null-pointer</i>.\n     *\n     * @return If {@link set_terminate} has previously been called by the program, the function returns the current\n     *\t\t   <i>terminate handler</i> function. Otherwise, it returns a <i>null-pointer</i>.",
        "* Function object class for equality comparison.\n     *\n     * Binary function object class whose call returns whether its two arguments compare <i>equal</i> (as returned by\n     * operator ==).\n     *\n     * Generically, function objects are instances of a class with member function {@link IComparable.equal_to equal_to}\n     * defined. This member function allows the object to be used with the same syntax as a function call.\n     *\n     * @param x First element to compare.\n     * @param y Second element to compare.\n     *\n     * @return Whether the arguments are equal.",
        "* Function object class for non-equality comparison.\n     *\n     * Binary function object class whose call returns whether its two arguments compare <i>not equal</i> (as returned\n     * by operator operator!=).\n     *\n     * Generically, function objects are instances of a class with member function {@link IComparable.equal_to equal_to}\n     * defined. This member function allows the object to be used with the same syntax as a function call.\n     *\n     * @param x First element to compare.\n     * @param y Second element to compare.\n     *\n     * @return Whether the arguments are not equal.",
        "* Function for less-than inequality comparison.\n     *\n     * Binary function returns whether the its first argument compares less than the second.\n     *\n     * Generically, function objects are instances of a class with member function {@link IComparable.less less}\n     * defined. If an object doesn't have the method, then its own uid will be used to compare insteadly.\n     * This member function allows the object to be used with the same syntax as a function call.\n     *\n     * Objects of this class can be used on standard algorithms such as {@link sort sort()}</code>,\n     * {@link merge merge()} or {@link TreeMap.lower_bound lower_bound()}.\n     *\n     * @param <T> Type of arguments to compare by the function call. The type shall supporrt the operation\n     *\t\t\t  <i>operator<()</i> or method {@link IComparable.less less}.\n     *\n     * @param x First element, the standard of comparison.\n     * @param y Second element compare with the first.\n     *\n     * @return Whether the first parameter is less than the second.",
        "* Function object class for less-than-or-equal-to comparison.\n     *\n     * Binary function object class whose call returns whether the its first argument compares {@link less less than} or\n     * {@link equal_to equal to} the second (as returned by operator <=).\n     *\n     * Generically, <i>function objects</i> are instances of a class with member function {@link IComparable.less less}\n     * and {@link IComparable.equal_to equal_to} defined. This member function allows the object to be used with the same\n     * syntax as a function call.\n     *\n     * @param x First element, the standard of comparison.\n     * @param y Second element compare with the first.\n     *\n     * @return Whether the <i>x</i> is {@link less less than} or {@link equal_to equal to} the <i>y</i>.",
        "* Function for greater-than inequality comparison.\n     *\n     * Binary function returns whether the its first argument compares greater than the second.\n     *\n     * Generically, function objects are instances of a class with member function {@link less} and\n     * {@link equal_to equal_to()} defined. If an object doesn't have those methods, then its own uid will be used\n     * to compare insteadly. This member function allows the object to be used with the same syntax as a function\n     * call.\n     *\n     * Objects of this class can be used on standard algorithms such as {@link sort sort()},\n     * {@link merge merge()} or {@link TreeMap.lower_bound lower_bound()}.\n     *\n     * @param <T> Type of arguments to compare by the function call. The type shall supporrt the operation\n     *\t\t\t  <i>operator>()</i> or method {@link IComparable.greater greater}.\n     *\n     * @return Whether the <i>x</i> is greater than the <i>y</i>.",
        "* Function object class for greater-than-or-equal-to comparison.\n     *\n     * Binary function object class whose call returns whether the its first argument compares\n     * {@link greater greater than} or {@link equal_to equal to} the second (as returned by operator >=).\n     *\n     * Generically, function objects are instances of a class with member function {@link IComparable.less less}\n     * defined. If an object doesn't have the method, then its own uid will be used to compare insteadly.\n     * This member function allows the object to be used with the same syntax as a function call.\n     *\n     * @param x First element, the standard of comparison.\n     * @param y Second element compare with the first.\n     *\n     * @return Whether the <i>x</i> is {@link greater greater than} or {@link equal_to equal to} the <i>y</i>.",
        "* Logical AND function object class.\n     *\n     * Binary function object class whose call returns the result of the <i>logical \"and\"</i> operation between its two\n     * arguments (as returned by operator &&).\n     *\n     * Generically, function objects are instances of a class with member function operator() defined. This member\n     * function allows the object to be used with the same syntax as a function call.\n     *\n     * @param x First element.\n     * @param y Second element.\n     *\n     * @return Result of logical AND operation.",
        "* Logical OR function object class.\n     *\n     * Binary function object class whose call returns the result of the <i>logical \"or\"</i> operation between its two\n     * arguments (as returned by operator ||).\n     *\n     * Generically, function objects are instances of a class with member function operator() defined. This member\n     * function allows the object to be used with the same syntax as a function call.\n     *\n     * @param x First element.\n     * @param y Second element.\n     *\n     * @return Result of logical OR operation.",
        "* Logical NOT function object class.\n     *\n     * Unary function object class whose call returns the result of the <i>logical \"not\"</i> operation on its argument\n     * (as returned by operator !).\n     *\n     * Generically, function objects are instances of a class with member function operator() defined. This member\n     * function allows the object to be used with the same syntax as a function call.\n     *\n     * @param x Target element.\n     *\n     * @return Result of logical NOT operation.",
        "* Bitwise AND function object class.\n     *\n     * Binary function object class whose call returns the result of applying the <i>bitwise \"and\"</i> operation between\n     * its two arguments (as returned by operator &).\n     *\n     * @param x First element.\n     * @param y Second element.\n     *\n     * @return Result of bitwise AND operation.",
        "* Bitwise OR function object class.\n     *\n     * Binary function object class whose call returns the result of applying the <i>bitwise \"and\"</i> operation between\n     * its two arguments (as returned by operator &).\n     *\n     * @param x First element.\n     * @param y Second element.\n     *\n     * @return Result of bitwise OR operation.",
        "* Bitwise XOR function object class.\n     *\n     * Binary function object class whose call returns the result of applying the <i>bitwise \"exclusive or\"</i>\n     * operation between its two arguments (as returned by operator ^).\n     *\n     * @param x First element.\n     * @param y Second element.\n     *\n     * @return Result of bitwise XOR operation.",
        "* Default hash function for number.\n     *\n     * Unary function that defines the default hash function used by the standard library.\n     *\n     * The functional call returns a hash value of its argument: A hash value is a value that depends solely on\n     * its argument, returning always the same value for the same argument (for a given execution of a program). The\n     * value returned shall have a small likelihood of being the same as the one returned for a different argument.\n     *\n     *\n     * @param val Value to be hashed.\n     *\n     * @return Returns a hash value for its argument, as a value of type number. The number is an unsigned integer.",
        "* Default hash function for string.\n     *\n     * Unary function that defines the default hash function used by the standard library.\n     *\n     * The functional call returns a hash value of its argument: A hash value is a value that depends solely on\n     * its argument, returning always the same value for the same argument (for a given execution of a program). The\n     * value returned shall have a small likelihood of being the same as the one returned for a different argument.\n     *\n     * @param str A string to be hashed.\n     *\n     * @return Returns a hash value for its argument, as a value of type number. The number is an unsigned integer.",
        "* Default hash function for Object.\n     *\n     * Unary function that defines the default hash function used by the standard library.\n     *\n     * The functional call returns a hash value of its argument: A hash value is a value that depends solely on\n     * its argument, returning always the same value for the same argument (for a given execution of a program). The\n     * value returned shall have a small likelihood of being the same as the one returned for a different argument.\n     *\n     *\n     * The default {@link hash} function of Object returns a value returned from {@link hash hash(number)} with\n     * an <b>unique id</b> of each Object. If you want to specify {@link hash} function of a specific class, then\n     * define a member function <code>public hashCode(): number</code> in the class.\n     *\n     * @param obj Object to be hashed.\n     *\n     * @return Returns a hash value for its argument, as a value of type number. The number is an unsigned integer.",
        "* Exchange contents of {@link IContainers containers}.\n     *\n     * The contents of container <i>left</i> are exchanged with those of <i>right</i>. Both container objects must have\n     * same type of elements (same template parameters), although sizes may differ.\n     *\n     * After the call to this member function, the elements in <i>left</i> are those which were in <i>right</i> before\n     * the call, and the elements of <i>right</i> are those which were in <i>left</i>. All iterators, references and\n     * pointers remain valid for the swapped objects.\n     *\n     * This is an overload of the generic algorithm swap that improves its performance by mutually transferring\n     * ownership over their assets to the other container (i.e., the containers exchange references to their data, without\n     * actually performing any element copy or movement): It behaves as if <i>left</i>.\n     * {@link Container.swap swap}(<i>right</i>) was called.\n     *\n     * @param left A {@link Container container} to swap its contents.\n     * @param right A {@link Container container} to swap its contents.",
        "* Exchange contents of queues.\n     *\n     * Exchanges the contents of <i>left</i> and <i>right</i>.\n     *\n     * @param left A {@link Queue} container of the same type. Size may differ.\n     * @param right A {@link Queue} container of the same type. Size may differ.",
        "* Exchange contents of {@link PriorityQueue PriorityQueues}.\n     *\n     * Exchanges the contents of <i>left</i> and <i>right</i>.\n     *\n     * @param left A {@link PriorityQueue} container of the same type. Size may differ.\n     * @param right A {@link PriorityQueue} container of the same type. Size may differ.",
        "* Exchange contents of {@link Stack Stacks}.\n     *\n     * Exchanges the contents of <i>left</i> and <i>right</i>.\n     *\n     * @param left A {@link Stack} container of the same type. Size may differ.\n     * @param right A {@link Stack} container of the same type. Size may differ.",
        "* Exchanges the contents of two {@link UniqueMap unique maps}.\n     *\n     * The contents of container <i>left</i> are exchanged with those of <i>right</i>. Both container objects must\n     * be of the same type (same template parameters), although sizes may differ.\n     *\n     * After the call to this member function, the elements in <i>left</i> are those which were in <i>right</i>\n     * before the call, and the elements of <i>right</i> are those which were in <i>left</i>. All iterators, references\n     * and pointers remain valid for the swapped objects.\n     *\n     * This is an overload of the generic algorithm swap that improves its performance by mutually transferring\n     * ownership over their assets to the other container (i.e., the containers exchange references to their data,\n     * without actually performing any element copy or movement): It behaves as if\n     * <i>left</i>.{@link UniqueMap.swap swap}(<i>right</i>) was called.\n     *\n     * @param left An {@link UniqueMap unique map} to swap its conents.\n     * @param right An {@link UniqueMap unique map} to swap its conents.",
        "* Exchanges the contents of two {@link MultiMap multi maps}.\n     *\n     * The contents of container <i>left</i> are exchanged with those of <i>right</i>. Both container objects must\n     * be of the same type (same template parameters), although sizes may differ.\n     *\n     * After the call to this member function, the elements in <i>left</i> are those which were in <i>right</i>\n     * before the call, and the elements of <i>right</i> are those which were in <i>left</i>. All iterators, references\n     * and pointers remain valid for the swapped objects.\n     *\n     * This is an overload of the generic algorithm swap that improves its performance by mutually transferring\n     * ownership over their assets to the other container (i.e., the containers exchange references to their data,\n     * without actually performing any element copy or movement): It behaves as if\n     * <i>left</i>.{@link MultiMap.swap swap}(<i>right</i>) was called.\n     *\n     * @param left A {@link MultiMap multi map} to swap its conents.\n     * @param right A {@link MultiMap multi map} to swap its conents.",
        "* Bind function arguments.\n     *\n     * Returns a function object based on <i>fn</i>, but with its arguments bound to <i>args</i>.\n     *\n     * Each argument may either be bound to a value or be a {@link placeholders placeholder}:\n     * <ul>\n     *\t<li> If bound to a value, calling the returned function object will always use that value as argument. </li>\n     *\t<li>\n     *\t\tIf a {@link placeholders placeholder}, calling the returned function object forwards an argument passed to the\n     *\t\tcall (the one whose order number is specified by the placeholder).\n     *\t</li>\n     * </ul>\n     *\n     * Calling the returned object returns the same type as fn.\n     *\n     * @param fn A function object, pointer to function or pointer to member.\n     * @param args List of arguments to bind: either values, or {@link placeholders}.\n     *\n     * @return A function object that, when called, calls <i>fn</i> with its arguments bound to <i>args</i>. If <i>fn</i> is\n     *\t\t   a pointer to member, the first argument expected by the returned function is an object of the class <i>fn</i>\n     *\t\t   is a member.",
        "* Bind function arguments.\n     *\n     * Returns a function object based on <i>fn</i>, but with its arguments bound to <i>args</i>.\n     *\n     * Each argument may either be bound to a value or be a {@link placeholders placeholder}:\n     * <ul>\n     *\t<li> If bound to a value, calling the returned function object will always use that value as argument. </li>\n     *\t<li>\n     *\t\tIf a {@link placeholders placeholder}, calling the returned function object forwards an argument passed to the\n     *\t\tcall (the one whose order number is specified by the placeholder).\n     *\t</li>\n     * </ul>\n     *\n     * Calling the returned object returns the same type as fn.\n     *\n     * @param fn A function object, pointer to function or pointer to member.\n     * @param thisArg This argument, owner object of the member method <i>fn</i>.\n     * @param args List of arguments to bind: either values, or {@link placeholders}.\n     *\n     * @return A function object that, when called, calls <i>fn</i> with its arguments bound to <i>args</i>. If <i>fn</i> is\n     *\t\t   a pointer to member, the first argument expected by the returned function is an object of the class <i>fn</i>\n     *\t\t   is a member.",
        "* Bind argument placeholders.\n *\n * This namespace declares an unspecified number of objects: <i>_1</i>, <i>_2</i>, <i>_3</i>, ...</i>, which are\n * used to specify placeholders in calls to function {@link bind}.\n *\n * When the function object returned by bind is called, an argument with placeholder {@link _1} is replaced by the\n * first argument in the call, {@link _2} is replaced by the second argument in the call, and so on... For example:\n *\n * <code>\n * let vec: Vector<number> = new Vector<number>();\n *\n * let bind = bind(Vector.insert, _1, vec.end(), _2, _3);\n * bind.apply(vec, 5, 1); // vec.insert(vec.end(), 5, 1);\n * // [1, 1, 1, 1, 1]\n * </code>\n *\n * When a call to {@link bind} is used as a subexpression in another call to <i>bind</i>, the {@link placeholders}\n * are relative to the outermost {@link bind} expression.\n *\n * @reference http://www.cplusplus.com/reference/functional/placeholders/\n * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Replaced by the first argument in the function call.",
        "* Replaced by the second argument in the function call.",
        "* Replaced by the third argument in the function call.",
        "* Return the number of elements in the {@link Container}.\n     *\n     * @param container A container with a size method.\n     * @return The number of elements in the container.",
        "* Test whether the container is empty.\n     *\n     * Returns whether the {@link Container} is empty (i.e. whether its {@link size} is 0).\n     *\n     * @param container A container with a empty method.\n     * @return <code>true</code> if the container size is 0, <code>false</code> otherwise.",
        "* Return distance between {@link base.Iterator iterators}.\n     *\n     * Calculates the number of elements between <i>first</i> and <i>last</i>.\n     *\n     * If it is a {@link IArrayIterator random-access iterator}, the function uses operator- to calculate this.\n     * Otherwise, the function uses the increase operator {@link base.Iterator.next next()} repeatedly.\n     *\n     * @param first base.Iterator pointing to the initial element.\n     * @param last base.Iterator pointing to the final element. This must be reachable from first.\n     *\n     * @return The number of elements between first and last.",
        "* Advance iterator.\n     *\n     * Advances the iterator <i>it</i> by <i>n</i> elements positions.\n     *\n     * @param it base.Iterator to be advanced.\n     * @param n Number of element positions to advance.\n     *\n     * @return An iterator to the element <i>n</i> positions before <i>it</i>.",
        "* Get iterator to previous element.\n     *\n     * Returns an iterator pointing to the element that <i>it</i> would be pointing to if advanced <i>-n</i> positions.\n     *\n     * @param it base.Iterator to base position.\n     * @param n Number of element positions offset (1 by default).\n     *\n     * @return An iterator to the element <i>n</i> positions before <i>it</i>.",
        "* Get iterator to next element.\n     *\n     * Returns an iterator pointing to the element that <i>it</i> would be pointing to if advanced <i>n</i> positions.\n     *\n     * @param it base.Iterator to base position.\n     * @param n Number of element positions offset (1 by default).\n     *\n     * @return An iterator to the element <i>n</i> positions away from <i>it</i>.",
        "* base.Iterator to beginning.\n     *\n     * Returns an iterator pointing to the first element in the sequence.\n     *\n     * If the sequence is {@link empty}, the returned value shall not be dereferenced.\n     *\n     * @param container A container object of a class type for which member {@link begin} is defined.\n     * @return The same as returned by {@link begin begin()}.",
        "* base.Iterator to reverse-beginning.\n     *\n     * Returns a reverse iterator pointing to the last element in the sequence.\n     *\n     * If the sequence is {@link empty}, the returned value shall not be dereferenced.\n     *\n     * @param container A container object of a class type for which member {@link rbegin} is defined.\n     * @return The same as returned by {@link rbegin()}.",
        "* base.Iterator to end.\n     *\n     * Returns an iterator pointing to the <i>past-the-end</i> element in the sequence.\n     *\n     * If the sequence is {@link empty}, the returned value compares equal to the one returned by {@link begin} with the same argument.\n     *\n     * @param container A container of a class type for which member {@link end} is defined.\n     * @return The same as returned by {@link end end()}.",
        "* base.Iterator to end.\n     *\n     * Returns an iterator pointing to the <i>past-the-end</i> element in the sequence.\n     *\n     * If the sequence is {@link empty}, the returned value compares equal to the one returned by {@link begin} with the same argument.\n     *\n     * @param container A container of a class type for which member {@link end} is defined.\n     * @return The same as returned by {@link end end()}.",
        "* Make reverse iterator.\n     *\n     * @param it A reference of the base iterator, which iterates in the opposite direction.\n     * @return A {@link ReverseIterator reverse iterator} based on *it*.",
        "* Pair of values.\n     *\n     * This class couples together a pair of values, which may be of different types (<i>T1</i> and\n     * <i>T2</i>). The individual values can be accessed through its public members {@link first} and\n     * {@link second}.\n     *\n     * @param <T1> Type of member {@link first}.\n     * @param <T2> Type of member {@link second}.\n     *\n     * @reference http://www.cplusplus.com/reference/utility/pair\n     * @author Jeongho Nam <http://samchon.org>",
        "* A first value in the Pair.",
        "* A second value in the Pair.",
        "* Construct from pair values.\n         *\n         * @param first The first value of the Pair\n         * @param second The second value of the Pair",
        "* Whether a Pair is equal with the Pair.\n         *\n         * Compare each first and second value of two Pair(s) and returns whether they are equal or not.\n         *\n         * If stored key and value in a Pair are not number or string but an object like a class or struct,\n         * the comparison will be executed by a member method (SomeObject)::equals(). If the object does not have\n         * the member method equal_to(), only address of pointer will be compared.\n         *\n         * @param obj A Map to compare\n         * @return Indicates whether equal or not.",
        "* @inheritdoc",
        "* Running on Node.\n     *\n     * Test whether the JavaScript is running on Node.\n     *\n     * @references http://stackoverflow.com/questions/17575790/environment-detection-node-js-or-browser",
        "* Construct {@link Pair} object.\n     *\n     * Constructs a {@link Pair} object with its {@link Pair.first first} element set to <i>x</i> and its\n     * {@link Pair.second second} element set to <i>y</i>.\n     *\n     * The template types can be implicitly deduced from the arguments passed to {@link make_pair}.\n     *\n     * {@link Pair} objects can be constructed from other {@link Pair} objects containing different types, if the\n     * respective types are implicitly convertible.\n     *\n     * @param x Value for member {@link Pair.first first}.\n     * @param y Value for member {@link Pair.second second}.\n     *\n     * @return A {@link Pair} object whose elements {@link Pair.first first} and {@link Pair.second second} are set to\n     *\t\t   <i>x</i> and <i>y</i> respectivelly.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Array Container.\n     *\n     * {@link IArrayContainer} is an interface for sequence containers representing <i>arrays</i> that can change in\n     * {@link size}. However, compared to <i>arrays</i>, {@link IArrayContainer} objectss consume more memory in exchange for\n     * the ability to manage storage and grow dynamically in an efficient way.\n     *\n     * Both {@link Vector Vectors} and {@link Deque Deques} who implemented {@link IArrayContainer} provide a very\n     * similar interface and can be used for similar purposes, but internally both work in quite different ways:\n     * While {@link Vector Vectors} use a single array that needs to be occasionally reallocated for growth, the\n     * elements of a {@link Deque} can be scattered in different chunks of storage, with the container keeping the\n     * necessary information internally to provide direct access to any of its elements in constant time and with a\n     * uniform sequential interface (through iterators). Therefore, {@link Deque Deques} are a little more complex\n     * internally than {@link Vector Vectors}, but this allows them to grow more efficiently under certain\n     * circumstances, especially with very long sequences, where reallocations become more expensive.\n     *\n     * Both {@link Vector Vectors} and {@link Deque Deques} provide a very similar interface and can be used for\n     * similar purposes, but internally both work in quite different ways: While {@link Vector Vectors} use a single\n     * array that needs to be occasionally reallocated for growth, the elements of a {@link Deque} can be scattered\n     * in different chunks of storage, with the container keeping the necessary information internally to provide\n     * direct access to any of its elements in constant time and with a uniform sequential interface (through\n     * iterators). Therefore, {@link Deque Deques} are a little more complex internally than {@link Vector Vectors},\n     * but this allows them to grow more efficiently under certain circumstances, especially with very long\n     * sequences, where reallocations become more expensive.\n     *\n     * For operations that involve frequent insertion or removals of elements at positions other than the\n     * beginning or the end, {@link IArrayContainer} objects perform worse and have less consistent iterators and references\n     * than {@link List Lists}.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" style=\"max-width: 100%\" />\n     * </a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Sequence </dt>\n     *\t<dd>\n     *\t\tElements in sequence containers are ordered in a strict linear sequence. Individual elements are\n     *\t\taccessed by their position in this sequence.\n     *\t</dd>\n     *\n     *\t<dt> Dynamic array </dt>\n     *\t<dd>\n     *\t\tAllows direct access to any element in the sequence, even through pointer arithmetics, and provides\n     *\t\trelatively fast addition/removal of elements at the end of the sequence.\n     *\t</dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements.\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Access element.\n         *\n         * Returns a value to the element at position <i>index</i> in the {@link IArrayContainer container}.</p>\n         *\n         * The function automatically checks whether <i>index</i> is within the bounds of valid elements\n         * in the {@link IArrayContainer container}, throwing an {@link OutOfRange} exception if it is not (i.e.,\n         * if <i>index</i> is greater or equal than its {@link size}).\n         *\n         * @param index Position of an element in the\n         *\t\t\t\tIf this is greater than or equal to the {@link IArrayContainer container} {@link size}, an\n         *\t\t\t\texception of type {@link OutOfRange} is thrown. Notice that the first\n         *\t\t\t\telement has a position of 0 (not 1).\n         *\n         * @return The element at the specified position in the",
        "* Modify element.\n         *\n         * Replaces an element at the specified position (<i>index</i>) in this {@link IArrayContainer container}\n         * with the specified element (<i>val</i>).\n         *\n         * The function automatically checks whether <i>index</i> is within the bounds of valid elements\n         * in the {@link IArrayContainer container}, throwing an {@link OutOfRange} exception if it is not (i.e., if\n         * <i>index</i> is greater or equal than its {@link size}).\n         *\n         * @param index A specified position of the value to replace.\n         * @param val A value to be stored at the specified position.\n         *\n         * @return The previous element had stored at the specified position.",
        "* Random-access iterator.\n     *\n     * {@link IArrayIterator Random-access iterators} are iterators that can be used to access elements at an\n     * arbitrary offset position relative to the element they point to, offering the same functionality as pointers.\n     *\n     * {@link IArrayIterator Random-access iterators} are the most complete iterators in terms of functionality.\n     * All pointer types are also valid {@link IArrayIterator random-access iterators}.\n     *\n     * There is not a single type of {@link IArrayIterator random-access iterator}: Each container may define its\n     * own specific iterator type able to iterate through it and access its elements.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/linear_containers.png\" style=\"max-width: 100%\" />\n     * </a>\n     *\n     * @reference http://www.cplusplus.com/reference/iterator/RandomAccessIterator\n     * @author Jeongho Nam <http://samchon.org>",
        "* @inheritdoc",
        "* Get index, sequence number of the iterator in the source {@link IArrayContainer array}.\n         *\n         * @return Sequence number of the iterator in the source {@link IArrayContainer array}.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* An interface for deque\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/linear_containers.png\" style=\"max-width: 100%\" />\n     * </a>\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Insert element at beginning.\n         *\n         * Inserts a new element at the beginning of the {@link IDeque container}, right before its\n         * current first element. This effectively increases the {@link IDeque container} {@link size} by\n         * one.\n         *\n         * @param val Value to be inserted as an element.",
        "* Delete first element.\n         *\n         * Removes the first element in the {@link IDeque container}, effectively reducing its\n         * {@link size} by one.",
        "* Common interface for hash map.\n     *\n     * {@link IHashMap}s are associative containers that store elements formed by the combination of\n     * a <i>key value</i> and a <i>mapped value</i>.\n     *\n     * In an {@link IHashMap}, the <i>key value</i> is generally used to uniquely identify the\n     * element, while the <i>mapped value</i> is an object with the content associated to this <i>key</i>.\n     * Types of <i>key</i> and <i>mapped value</i> may differ.\n     *\n     * Internally, the elements in the {@link IHashMap} are not sorted in any particular order with\n     * respect to either their <i>key</i> or <i>mapped values</i>, but organized into <i>buckets</i> depending on\n     * their hash values to allow for fast access to individual elements directly by their <i>key values</i>\n     * (with a constant average time complexity on average).\n     *\n     * Elements with equivalent <i>keys</i> are grouped together in the same bucket and in such a way that\n     * an iterator can iterate through all of them. Iterators in the container are doubly linked iterators.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" style=\"max-width: 100%\" /> </a>\n     *\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd> Elements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\t position in the container. </dd>\n     *\n     *\t<dt> Hashed </dt>\n     *\t<dd> Hashed containers organize their elements using hash tables that allow for fast access to elements\n     *\t\t by their <i>key</i>. </dd>\n     *\n     *\t<dt> Map </dt>\n     *\t<dd> Each element associates a <i>key</i> to a <i>mapped value</i>:\n     *\t\t <i>Keys</i> are meant to identify the elements whose main content is the <i>mapped value</i>. </dd>\n     * </dl>\n     *\n     * @param <Key> Type of the key values.\n     *\t\t\t\tEach element in an {@link IHashMap} is identified by a key value.\n     * @param <T> Type of the mapped value.\n     *\t\t\t  Each element in an {@link IHashMap} is used to store some data as its mapped value.\n     *\n     * @reference http://www.cplusplus.com/reference/unordered_map\n     * @author Jeongho Nam <http://samchon.org>",
        "* Return number of buckets.\n         *\n         * Returns the number of buckets in the {@link IHashMap} container.\n         *\n         * A bucket is a slot in the container's internal hash table to which elements are assigned based on the\n         * hash value of their key.\n         *\n         * The number of buckets influences directly the {@link load_factor load factor} of the container's hash\n         * table (and thus the probability of collision). The container automatically increases the number of buckets to\n         * keep the load factor below a specific threshold (its {@link max_load_factor}), causing a {@link rehash} each\n         * time the number of buckets needs to be increased.\n         *\n         * @return The current amount of buckets.",
        "* Return bucket size.\n         *\n         * Returns the number of elements in bucket <i>n</i>.\n         *\n         * A bucket is a slot in the container's internal hash table to which elements are assigned based on the hash\n         * value of their key.\n         *\n         * The number of elements in a bucket influences the time it takes to access a particular element in the\n         * bucket. The container automatically increases the number of buckets to keep the {@link load_cator load factor}\n         * (which is the average bucket size) below its {@link max_load_factor}.\n         *\n         * @param n Bucket number. This shall be lower than {@link bucket_count}.\n         *\n         * @return The number of elements in bucket <i>n</i>.",
        "* Get maximum load factor.\n         *\n         * Returns the current maximum load factor for the {@link HashMultiMap} container.\n         *\n         * The load factor is the ratio between the number of elements in the container (its {@link size}) and the\n         * number of buckets ({@link bucket_count}).\n         *\n         * By default, {@link HashMultiMap} containers have a {@link max_load_factor} of 1.0.\n         *\n         * The load factor influences the probability of collision in the hash table (i.e., the probability of two\n         * elements being located in the same bucket). The container uses the value of max_load_factor as the threshold\n         * that forces an increase in the number of buckets (and thus causing a {@link rehash}).\n         *\n         * Note though, that implementations may impose an upper limit on the number of buckets (see\n         * {@link max_bucket_count}), which may force the container to ignore the {@link max_load_factor}.\n         *\n         * @return The current load factor.",
        "* Set maximum load factor.\n         *\n         * Sets <i>z</i> as the cnew maximum load factor for the {@link HashMultiMap} container.\n         *\n         * The load factor is the ratio between the number of elements in the container (its {@link size}) and the\n         * number of buckets ({@link bucket_count}).\n         *\n         * By default, {@link HashMultiMap} containers have a {@link max_load_factor} of 1.0.\n         *\n         * The load factor influences the probability of collision in the hash table (i.e., the probability of two\n         * elements being located in the same bucket). The container uses the value of max_load_factor as the threshold\n         * that forces an increase in the number of buckets (and thus causing a {@link rehash}).\n         *\n         * Note though, that implementations may impose an upper limit on the number of buckets (see\n         * {@link max_bucket_count}), which may force the container to ignore the {@link max_load_factor}.\n         *\n         * @param z The new maximum load factor.",
        "* Locate element's bucket.\n         *\n         * Returns the bucket number where the element with <i>key</i> is located.\n         *\n         * A bucket is a slot in the container's internal hash table to which elements are assigned based on the\n         * hash value of their <i>key</i>. Buckets are numbered from 0 to ({@link bucket_count} - 1).\n         *\n         * Individual elements in a bucket can be accessed by means of the range iterators returned by\n         * {@link begin} and {@link end}.\n         *\n         * @param key Key whose bucket is to be located.",
        "* Request a capacity change.\n         *\n         * Sets the number of buckets in the container ({@link bucket_count}) to the most appropriate to contain at\n         * least <i>n</i> elements.\n         *\n         * If <i>n</i> is greater than the current {@link bucket_count} multiplied by the {@link max_load_factor},\n         * the container's {@link bucket_count} is increased and a {@link rehash} is forced.\n         *\n         * If <i>n</i> is lower than that, the function may have no effect.\n         *\n         * @param n The number of elements requested as minimum capacity.",
        "* Set number of buckets.\n         *\n         * Sets the number of buckets in the container to <i>n</i> or more.\n         *\n         * If <i>n</i> is greater than the current number of buckets in the container ({@link bucket_count}), a\n         * {@link HashBuckets.rehash rehash} is forced. The new {@link bucket_count bucket count} can either be equal or\n         * greater than <i>n</i>.\n         *\n         * If <i>n</i> is lower than the current number of buckets in the container ({@link bucket_count}), the\n         * function may have no effect on the {@link bucket_count bucket count} and may not force a\n         * {@link HashBuckets.rehash rehash}.\n         *\n         * A {@link HashBuckets.rehash rehash} is the reconstruction of the hash table: All the elements in the\n         * container are rearranged according to their hash value into the new set of buckets. This may alter the order\n         * of iteration of elements within the container.\n         *\n         * {@link HashBuckets.rehash Rehashes} are automatically performed by the container whenever its\n         * {@link load_factor load factor} is going to surpass its {@link max_load_factor} in an operation.\n         *\n         * Notice that this function expects the number of buckets as argument. A similar function exists,\n         * {@link reserve}, that expects the number of elements in the container as argument.\n         *\n         * @param n The minimum number of buckets for the container hash table.",
        "* A common interface for hash set.\n     *\n     * {@link IHashSet}s are containers that store unique elements in no particular order, and which\n     * allow for fast retrieval of individual elements based on their value.\n     *\n     * In an {@link IHashSet}, the value of an element is at the same time its <i>key</i>, that\n     * identifies it uniquely. Keys are immutable, therefore, the elements in an {@link IHashSet} cannot be\n     * modified once in the container - they can be inserted and removed, though.\n     *\n     * Internally, the elements in the {@link IHashSet} are not sorted in any particular order, but\n     * organized into buckets depending on their hash values to allow for fast access to individual elements\n     * directly by their <i>values</i> (with a constant average time complexity on average).\n     *\n     * {@link IHashSet} containers are faster than {@link TreeSet} containers to access individual\n     * elements by their <i>key</i>, although they are generally less efficient for range iteration through a\n     * subset of their elements.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/set_containers.png\" style=\"max-width: 100%\" /> </a>\n     *\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd> Elements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\t position in the container. </dd>\n     *\n     *\t<dt> Hashed </dt>\n     *\t<dd> Hashed containers organize their elements using hash tables that allow for fast access to elements\n     *\t\t by their <i>key</i>. </dd>\n     *\n     *\t<dt> Set </dt>\n     *\t<dd> The value of an element is also the <i>key</i> used to identify it. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements.\n     *\t\t\t  Each element in an {@link IHashSet} is also uniquely identified by this value.\n     *\n     * @reference http://www.cplusplus.com/reference/unordered_set/unordered_set\n     * @author Jeongho Nam <http://samchon.org>",
        "* Return number of buckets.\n         *\n         * Returns the number of buckets in the {@link IHashSet} container.\n         *\n         * A bucket is a slot in the container's internal hash table to which elements are assigned based on the\n         * hash value of their key.\n         *\n         * The number of buckets influences directly the {@link load_factor load factor} of the container's hash\n         * table (and thus the probability of collision). The container automatically increases the number of buckets to\n         * keep the load factor below a specific threshold (its {@link max_load_factor}), causing a {@link rehash} each\n         * time the number of buckets needs to be increased.\n         *\n         * @return The current amount of buckets.",
        "* Return bucket size.\n         *\n         * Returns the number of elements in bucket <i>n</i>.\n         *\n         * A bucket is a slot in the container's internal hash table to which elements are assigned based on the hash\n         * value of their key.\n         *\n         * The number of elements in a bucket influences the time it takes to access a particular element in the\n         * bucket. The container automatically increases the number of buckets to keep the {@link load_cator load factor}\n         * (which is the average bucket size) below its {@link max_load_factor}.\n         *\n         * @param n Bucket number. This shall be lower than {@link bucket_count}.\n         *\n         * @return The number of elements in bucket <i>n</i>.",
        "* Get maximum load factor.\n         *\n         * Returns the current maximum load factor for the {@link HashMultiMap} container.\n         *\n         * The load factor is the ratio between the number of elements in the container (its {@link size}) and the\n         * number of buckets ({@link bucket_count}).\n         *\n         * By default, {@link HashMultiMap} containers have a {@link max_load_factor} of 1.0.\n         *\n         * The load factor influences the probability of collision in the hash table (i.e., the probability of two\n         * elements being located in the same bucket). The container uses the value of max_load_factor as the threshold\n         * that forces an increase in the number of buckets (and thus causing a {@link rehash}).\n         *\n         * Note though, that implementations may impose an upper limit on the number of buckets (see\n         * {@link max_bucket_count}), which may force the container to ignore the {@link max_load_factor}.\n         *\n         * @return The current load factor.",
        "* Set maximum load factor.\n         *\n         * Sets <i>z</i> as the cnew maximum load factor for the {@link HashMultiMap} container.\n         *\n         * The load factor is the ratio between the number of elements in the container (its {@link size}) and the\n         * number of buckets ({@link bucket_count}).\n         *\n         * By default, {@link HashMultiMap} containers have a {@link max_load_factor} of 1.0.\n         *\n         * The load factor influences the probability of collision in the hash table (i.e., the probability of two\n         * elements being located in the same bucket). The container uses the value of max_load_factor as the threshold\n         * that forces an increase in the number of buckets (and thus causing a {@link rehash}).\n         *\n         * Note though, that implementations may impose an upper limit on the number of buckets (see\n         * {@link max_bucket_count}), which may force the container to ignore the {@link max_load_factor}.\n         *\n         * @param z The new maximum load factor.",
        "* Locate element's bucket.\n         *\n         * Returns the bucket number where the element with <i>key</i> is located.\n         *\n         * A bucket is a slot in the container's internal hash table to which elements are assigned based on the\n         * hash value of their <i>key</i>. Buckets are numbered from 0 to ({@link bucket_count} - 1).\n         *\n         * Individual elements in a bucket can be accessed by means of the range iterators returned by\n         * {@link begin} and {@link end}.\n         *\n         * @param key Key whose bucket is to be located.",
        "* Request a capacity change.\n         *\n         * Sets the number of buckets in the container ({@link bucket_count}) to the most appropriate to contain at\n         * least <i>n</i> elements.\n         *\n         * If <i>n</i> is greater than the current {@link bucket_count} multiplied by the {@link max_load_factor},\n         * the container's {@link bucket_count} is increased and a {@link rehash} is forced.\n         *\n         * If <i>n</i> is lower than that, the function may have no effect.\n         *\n         * @param n The number of elements requested as minimum capacity.",
        "* Set number of buckets.\n         *\n         * Sets the number of buckets in the container to <i>n</i> or more.\n         *\n         * If <i>n</i> is greater than the current number of buckets in the container ({@link bucket_count}), a\n         * {@link HashBuckets.rehash rehash} is forced. The new {@link bucket_count bucket count} can either be equal or\n         * greater than <i>n</i>.\n         *\n         * If <i>n</i> is lower than the current number of buckets in the container ({@link bucket_count}), the\n         * function may have no effect on the {@link bucket_count bucket count} and may not force a\n         * {@link HashBuckets.rehash rehash}.\n         *\n         * A {@link HashBuckets.rehash rehash} is the reconstruction of the hash table: All the elements in the\n         * container are rearranged according to their hash value into the new set of buckets. This may alter the order\n         * of iteration of elements within the container.\n         *\n         * {@link HashBuckets.rehash Rehashes} are automatically performed by the container whenever its\n         * {@link load_factor load factor} is going to surpass its {@link max_load_factor} in an operation.\n         *\n         * Notice that this function expects the number of buckets as argument. A similar function exists,\n         * {@link reserve}, that expects the number of elements in the container as argument.\n         *\n         * @param n The minimum number of buckets for the container hash table.",
        "* An interface for linear containers.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/linear_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     *\n     * @author Jeonngho Nam",
        "* @inheritdoc",
        "* Assign container content.\n         *\n         * Assigns new contents to the {@link ILinearContainer container}, replacing its current contents,\n         * and modifying its {@link size} accordingly.\n         *\n         * @param n New size for the\n         * @param val Value to fill the container with. Each of the <u>n</u> elements in the container will\n         *\t\t\t  be initialized to a copy of this value.",
        "* Access first element.\n         *\n<<<<<<< HEAD\n         * Returns a value of the first element in the {@link IListContainer container}.\n=======\n         * Returns a value of the first element in the {@link ILinearContainer container}.\n>>>>>>> v1.4\n         *\n         * Unlike member {@link begin begin()}, which returns an iterator to this same element, this\n         * function returns a direct value.\n         *\n<<<<<<< HEAD\n         * Calling this function on an {@link empty} {@link IListContainer container} causes undefined behavior.\n         *\n         * @return A value of the first element of the {@link IListContainer container}.\n=======\n         * Calling this function on an {@link empty} {@link ILinearContainer container} causes undefined behavior.\n         *\n         * @return A value of the first element of the {@link ILinearContainer container}.\n>>>>>>> v1.4",
        "* Set first element.\n         *\n         * Modify a value of the first element in the {@link IListContainer container}.\n         *\n         * Unlike member {@link begin begin()}, which returns an iterator to this same element, this\n         * function modifies a direct value.\n         *\n         * Calling this funtion on an {@link empty} {@link IListContainer container} causes undefined behavior.\n         *\n<<<<<<< HEAD\n         * @param val Value to newly assign.\n=======\n         * @param val A value to newly assign at the first element.\n>>>>>>> v1.4",
        "* Access last element.\n         *\n<<<<<<< HEAD\n         * Returns a value of the last element in the {@link IListContainer container}.\n=======\n         * Returns a value of the last element in the {@link ILinearContainer container}.\n>>>>>>> v1.4\n         *\n         * Unlike member {@link end end()}, which returns an iterator just past this element,\n         * this function returns a direct value.\n         *\n<<<<<<< HEAD\n         * Calling this function on an {@link empty} {@link IListContainer container} causes undefined behavior.\n         *\n         * @return A value of the last element of the {@link IListContainer container}.\n=======\n         * Calling this function on an {@link empty} {@link ILinearContainer container} causes undefined behavior.\n         *\n         * @return A value of the last element of the {@link ILinearContainer container}.\n>>>>>>> v1.4",
        "* Set last element.\n         *\n         * Modify a value of the last element in the {@link IListContainer container}.\n         *\n         * Unlike member {@link end end()}, which returns an iterator just past this element,\n         * this function modifies a direct value.\n         *\n         * Calling this function on an {@link empty} {@link IListContainer container} causes undefined behavior.\n         *\n<<<<<<< HEAD\n         * @param val Value to newly assign.\n=======\n         * @param val A value to newly assign at the last element.\n>>>>>>> v1.4",
        "* Add element at the end.\n         *\n<<<<<<< HEAD\n         * Adds a new element at the end of the {@link IListContainer container}, after its current last element.\n         * This effectively increases the {@link IListContainer container} {@link size} by one.\n=======\n         * Adds a new element at the end of the {@link ILinearContainer container}, after its current last element.\n         * This effectively increases the {@link ILinearContainer container} {@link size} by one.\n>>>>>>> v1.4\n         *\n         * @param val Value to be copied to the new element.",
        "* Delete last element.\n         *\n<<<<<<< HEAD\n         * Removes the last element in the {@link IListContainer container}, effectively reducing the\n         * {@link IListContainer container} {@link size} by one.\n=======\n         * Removes the last element in the {@link ILinearContainer container}, effectively reducing the\n         * {@link ILinearContainer container} {@link size} by one.\n>>>>>>> v1.4",
        "* Insert an element.\n         *\n<<<<<<< HEAD\n         * The {@link IListContainer conatiner} is extended by inserting new element before the element at the\n         * specified <i>position</i>, effectively increasing the {@link IListContainer container} {@link size} by\n         * one.\n         *\n         * @param position Position in the {@link IListContainer container} where the new elements are inserted.\n=======\n         * The {@link ILinearContainer conatiner} is extended by inserting new element before the element at the\n         * specified <i>position</i>, effectively increasing the {@link ILinearContainer container} {@link size} by\n         * one.\n         *\n         * @param position Position in the {@link ILinearContainer container} where the new elements are inserted.\n>>>>>>> v1.4\n         *\t\t\t\t   {@link iterator} is a member type, defined as a {@link iterator random access iterator}\n         *\t\t\t\t   type that points to elements.\n         * @param val Value to be copied to the inserted element.\n         *\n         * @return An iterator that points to the newly inserted element.",
        "* Insert elements by range iterators.\n         *\n<<<<<<< HEAD\n         * The {@link IListContainer container} is extended by inserting new elements before the element at the\n         * specified <i>position</i>, effectively increasing the {@link IListContainer container} {@link size} by\n         * the number of repeating elements </i>n</i>.\n         *\n         * @param position Position in the {@link IListContainer container} where the new elements are inserted.\n=======\n         * The {@link ILinearContainer container} is extended by inserting new elements before the element at the\n         * specified <i>position</i>, effectively increasing the {@link ILinearContainer container} {@link size} by\n         * the number of repeating elements </i>n</i>.\n         *\n         * @param position Position in the {@link ILinearContainer container} where the new elements are inserted.\n>>>>>>> v1.4\n         *\t\t\t\t   {@link iterator} is a member type, defined as a {@link iterator random access iterator}\n         *\t\t\t\t   type that points to elements.\n         * @param n Number of elements to insert. Each element is initialized to a copy of <i>val</i>.\n         * @param val Value to be copied (or moved) to the inserted elements.\n         *\n         * @return An iterator that points to the first of the newly inserted elements.",
        "* Insert elements by range iterators.\n         *\n<<<<<<< HEAD\n         * The {@link IListContainer container} is extended by inserting new elements before the element at the\n         * specified <i>position</i>, effectively increasing the {@link IListContainer container} {@link size} by\n         * the number of elements inserted by range iterators.\n         *\n         * @param position Position in the {@link IListContainer container} where the new elements are inserted.\n=======\n         * The {@link ILinearContainer container} is extended by inserting new elements before the element at the\n         * specified <i>position</i>, effectively increasing the {@link ILinearContainer container} {@link size} by\n         * the number of elements inserted by range iterators.\n         *\n         * @param position Position in the {@link ILinearContainer container} where the new elements are inserted.\n>>>>>>> v1.4\n         *\t\t\t\t   {@link iterator} is a member type, defined as a {@link iterator random access iterator}\n         *\t\t\t\t   type that points to elements.\n         * @param first Input interator of the initial position in a sequence.\n         * @param last Input interator of the final position in a sequence.\n         *\n         * @return An iterator that points to the first of the newly inserted elements.",
        "* An interface for iterators from linear containers.\n     *\n     * {@link ILieanerIterator} is an bi-directional iterator which is created from the related\n     * {@link ILinearContainer linear containers}. Not only accessing to {@link value} of the pointed element from\n     * this {@link ILieanerIterator}, but also modifying the {@link value} is possible.\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Common interface for tree-structured map.\n     *\n     * {@link ITreeMap ITreeMaps} are associative containers that store elements formed by a combination of\n     * a <i>key value</i> and a <i>mapped value</i>, following a specific order.\n     *\n     * In a {@link ITreeMap}, the <i>key values</i> are generally used to sort and uniquely identify\n     * the elements, while the <i>mapped values</i> store the content associated to this <i>key</i>. The types of\n     * <i>key</i> and <i>mapped value</i> may differ, and are grouped together in member type\n     * <code>value_type</code>, which is a {@link Pair} type combining both:\n     *\n     * <code>typedef Pair<const Key, T> value_type;</code>\n     *\n     * Internally, the elements in a {@link ITreeMap}are always sorted by its key following a\n     * strict weak ordering criterion indicated by its internal comparison method (of {@link less}).\n     *\n     * {@link ITreeMap}containers are generally slower than {@link IHashMap} containers\n     * to access individual elements by their <i>key</i>, but they allow the direct iteration on subsets based\n     * on their order.\n     *\n     * {@link ITreeMap TreeMultiMaps} are typically implemented as binary search trees.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/map_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd> Elements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\t position in the container. </dd>\n     *\n     *\t<dt> Ordered </dt>\n     *\t<dd> The elements in the container follow a strict order at all times. All inserted elements are\n     *\t\t given a position in this order. </dd>\n     *\n     *\t<dt> Map </dt>\n     *\t<dd> Each element associates a <i>key</i> to a <i>mapped value</i>:\n     *\t\t <i>Keys</i> are meant to identify the elements whose main content is the <i>mapped value</i>. </dd>\n     * </dl>\n     *\n     * @param <Key> Type of the keys. Each element in a map is uniquely identified by its key value.\n     * @param <T> Type of the mapped value. Each element in a map stores some data as its mapped value.\n     *\n     * @reference http://www.cplusplus.com/reference/map\n     * @author Jeongho Nam <http://samchon.org>",
        "* Return key comparison function.\n         *\n         * Returns a references of the comparison function used by the container to compare <i>keys</i>.\n         *\n         * The <i>comparison object</i> of a {@link ITreeMap tree-map object} is set on\n         * {@link TreeMap.constructor construction}. Its type (<i>Key</i>) is the last parameter of the\n         * {@link ITreeMap.constructor constructors}. By default, this is a {@link less} function, which returns the same\n         * as <i>operator&lt;</i>.\n         *\n         * This function determines the order of the elements in the container: it is a function pointer that takes\n         * two arguments of the same type as the element <i>keys</i>, and returns <code>true</code> if the first argument\n         * is considered to go before the second in the strict weak ordering it defines, and <code>false</code> otherwise.\n         *\n         *\n         * Two keys are considered equivalent if {@link key_comp} returns <code>false</code> reflexively (i.e., no\n         * matter the order in which the keys are passed as arguments).\n         *\n         * @return The comparison function.",
        "* Return value comparison function.\n         *\n         * Returns a comparison function that can be used to compare two elements to get whether the key of the first\n         * one goes before the second.\n         *\n         * The arguments taken by this function object are of member type <code>Pair<Key, T></code> (defined in\n         * {@link ITreeMap}), but the mapped type (<i>T</i>) part of the value is not taken into consideration in this\n         * comparison.\n         *\n         * This comparison class returns <code>true</code> if the {@link Pair.first key} of the <i>first argument</i>\n         * is considered to go before that of the <i>second</i> (according to the strict weak ordering specified by the\n         * container's comparison function, {@link key_comp}), and <code>false</code> otherwise.\n         *\n         * @return The comparison function for element values.",
        "* Return iterator to lower bound.\n         *\n         * Returns an iterator pointing to the first element in the container whose key is not considered to\n         * go before <i>k</i> (i.e., either it is equivalent or goes after).\n         *\n         * The function uses its internal comparison object (key_comp) to determine this, returning an\n         * iterator to the first element for which key_comp(<i>k</i>, element_key) would return false.\n         *\n         * If the {@link ITreeMap} class is instantiated with the default comparison type ({@link less}),\n         * the function returns an iterator to the first element whose key is not less than <i>k</i>.\n         *\n         * A similar member function, {@link upper_bound}, has the same behavior as {@link lower_bound}, except\n         * in the case that the {@link ITreeMap} contains an element with a key equivalent to <i>k</i>: In this\n         * case, {@link lower_bound} returns an iterator pointing to that element, whereas {@link upper_bound}\n         * returns an iterator pointing to the next element.\n         *\n         * @param k Key to search for.\n         *\n         * @return An iterator to the the first element in the container whose key is not considered to go before\n         *\t\t   <i>k</i>, or {@link ITreeMap.end} if all keys are considered to go before <i>k</i>.",
        "* Return iterator to upper bound.\n         *\n         * Returns an iterator pointing to the first element in the container whose key is considered to\n         * go after <i>k</i>.\n         *\n         * The function uses its internal comparison object (key_comp) to determine this, returning an\n         * iterator to the first element for which key_comp(<i>k</i>, element_key) would return true.\n         *\n         * If the {@link ITreeMap} class is instantiated with the default comparison type ({@link less}),\n         * the function returns an iterator to the first element whose key is greater than <i>k</i>.\n         *\n         * A similar member function, {@link lower_bound}, has the same behavior as {@link upper_bound}, except\n         * in the case that the map contains an element with a key equivalent to <i>k</i>: In this case\n         * {@link lower_bound} returns an iterator pointing to that element, whereas {@link upper_bound} returns an\n         * iterator pointing to the next element.\n         *\n         * @param k Key to search for.\n         *\n         * @return An iterator to the the first element in the container whose key is considered to go after\n         *\t\t   <i>k</i>, or {@link TreeMap.end end} if no keys are considered to go after <i>k</i>.",
        "* Get range of equal elements.\n         *\n         * Returns the bounds of a range that includes all the elements in the container which have a key\n         * equivalent to <i>k</i>.\n         *\n         * If no matches are found, the range returned has a length of zero, with both iterators pointing to\n         * the first element that has a key considered to go after <i>k</i> according to the container's internal\n         * comparison object (key_comp).\n         *\n         * Two keys are considered equivalent if the container's comparison object returns false reflexively\n         * (i.e., no matter the order in which the keys are passed as arguments).\n         *\n         * @param k Key to search for.\n         *\n         * @return The function returns a {@link Pair}, whose member {@link Pair.first} is the lower bound of\n         *\t\t   the range (the same as {@link lower_bound}), and {@link Pair.second} is the upper bound\n         *\t\t   (the same as {@link upper_bound}).",
        "* A common interface for tree-structured set.\n     *\n     * {@link ITreeSet TreeMultiSets} are containers that store elements following a specific order.\n     *\n     * In a {@link ITreeSet}, the value of an element also identifies it (the value is itself\n     * the <i>key</i>, of type <i>T</i>). The value of the elements in a {@link ITreeSet} cannot\n     * be modified once in the container (the elements are always const), but they can be inserted or removed\n     * from the\n     *\n     * Internally, the elements in a {@link ITreeSet TreeMultiSets} are always sorted following a strict\n     * weak ordering criterion indicated by its internal comparison method (of {@link IComparable.less less}).\n     *\n     * {@link ITreeSet} containers are generally slower than {@link IHashSet} containers\n     * to access individual elements by their <i>key</i>, but they allow the direct iteration on subsets based on\n     * their order.\n     *\n     * {@link ITreeSet TreeMultiSets} are typically implemented as binary search trees.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/set_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * ### Container properties\n     * <dl>\n     *\t<dt> Associative </dt>\n     *\t<dd>\n     *\t\tElements in associative containers are referenced by their <i>key</i> and not by their absolute\n     *\t\tposition in the container.\n     *\t</dd>\n     *\n     *\t<dt> Ordered </dt>\n     *\t<dd>\n     *\t\tThe elements in the container follow a strict order at all times. All inserted elements are\n     *\t\tgiven a position in this order.\n     *\t</dd>\n     *\n     *\t<dt> Set </dt>\n     *\t<dd> The value of an element is also the <i>key</i> used to identify it. </dd>\n     * </dl>\n     *\n     * @param <T> Type of the elements. Each element in a {@link ITreeSet} container is also identified\n     *\t\t\t  by this value (each value is itself also the element's <i>key</i>).\n     *\n     * @reference http://www.cplusplus.com/reference/set\n     * @author Jeongho Nam <http://samchon.org>",
        "* Return comparison function.\n         *\n         * Returns a copy of the comparison function used by the container.\n         *\n         * By default, this is a {@link less} object, which returns the same as <i>operator<</i>.\n         *\n         * This object determines the order of the elements in the container: it is a function pointer or a function\n         * object that takes two arguments of the same type as the container elements, and returns <code>true</code> if\n         * the <i>first argument</i> is considered to go before the <i>second</i> in the <i>strict weak ordering</i> it\n         * defines, and <code>false</code> otherwise.\n         *\n         * Two elements of a {@link ITreeSet} are considered equivalent if {@link key_comp} returns <code>false</code>\n         * reflexively (i.e., no matter the order in which the elements are passed as arguments).\n         *\n         * In {@link ITreeSet} containers, the <i>keys</i> to sort the elements are the values (<i>T</i>) themselves,\n         * therefore {@link key_comp} and its sibling member function {@link value_comp} are equivalent.\n         *\n         * @return The comparison function.",
        "* Return comparison function.\n         *\n         * Returns a copy of the comparison function used by the container.\n         *\n         * By default, this is a {@link less} object, which returns the same as <i>operator<</i>.\n         *\n         * This object determines the order of the elements in the container: it is a function pointer or a function\n         * object that takes two arguments of the same type as the container elements, and returns <code>true</code> if\n         * the <i>first argument</i> is considered to go before the <i>second</i> in the <i>strict weak ordering</i> it\n         * defines, and <code>false</code> otherwise.\n         *\n         * Two elements of a {@link ITreeSet} are considered equivalent if {@link key_comp} returns <code>false</code>\n         * reflexively (i.e., no matter the order in which the elements are passed as arguments).\n         *\n         * In {@link ITreeSet} containers, the <i>keys</i> to sort the elements are the values (<i>T</i>) themselves,\n         * therefore {@link key_comp} and its sibling member function {@link value_comp} are equivalent.\n         *\n         * @return The comparison function.",
        "* Return iterator to lower bound.\n         *\n         * Returns an iterator pointing to the first element in the container which is not considered to\n         * go before <i>val</i> (i.e., either it is equivalent or goes after).\n         *\n         * The function uses its internal comparison object (key_comp) to determine this, returning an\n         * iterator to the first element for which key_comp(element,val) would return false.\n         *\n         * If the {@link ITreeSet} class is instantiated with the default comparison type ({@link less}),\n         * the function returns an iterator to the first element that is not less than <i>val</i>.\n\n         * A similar member function, {@link upper_bound}, has the same behavior as {@link lower_bound}, except\n         * in the case that the {@link ITreeSet} contains elements equivalent to <i>val</i>: In this case\n         * {@link lower_bound} returns an iterator pointing to the first of such elements, whereas\n         * {@link upper_bound} returns an iterator pointing to the element following the last.\n         *\n         * @param val Value to compare.\n         *\n         * @return An iterator to the the first element in the container which is not considered to go before\n         *\t\t   <i>val</i>, or {@link ITreeSet.end} if all elements are considered to go before <i>val</i>.",
        "* Return iterator to upper bound.\n         *\n         * Returns an iterator pointing to the first element in the container which is considered to go after\n         * <i>val</i>.\n\n         * The function uses its internal comparison object (key_comp) to determine this, returning an\n         * iterator to the first element for which key_comp(val,element) would return true.\n\n         * If the {@code ITreeSet} class is instantiated with the default comparison type (less), the\n         * function returns an iterator to the first element that is greater than <i>val</i>.\n         *\n         * A similar member function, {@link lower_bound}, has the same behavior as {@link upper_bound}, except\n         * in the case that the {@ITreeSet} contains elements equivalent to <i>val</i>: In this case\n         * {@link lower_bound} returns an iterator pointing to the first of such elements, whereas\n         * {@link upper_bound} returns an iterator pointing to the element following the last.\n         *\n         * @param val Value to compare.\n         *\n         * @return An iterator to the the first element in the container which is considered to go after\n         *\t\t   <i>val</i>, or {@link TreeSet.end end} if no elements are considered to go after <i>val</i>.",
        "* Get range of equal elements.\n         *\n         * Returns the bounds of a range that includes all the elements in the container that are equivalent\n         * to <i>val</i>.\n         *\n         * If no matches are found, the range returned has a length of zero, with both iterators pointing to\n         * the first element that is considered to go after val according to the container's\n         * internal comparison object (key_comp).\n         *\n         * Two elements of a multiset are considered equivalent if the container's comparison object returns\n         * false reflexively (i.e., no matter the order in which the elements are passed as arguments).\n         *\n         * @param key Value to search for.\n         *\n         * @return The function returns a {@link Pair}, whose member {@link Pair.first} is the lower bound of\n         *\t\t   the range (the same as {@link lower_bound}), and {@link Pair.second} is the upper bound\n         *\t\t   (the same as {@link upper_bound}).",
        "* Bi-directional iterator.\n     *\n     * {@link Iterator Bidirectional iterators} are iterators that can be used to access the sequence of elements\n     * in a range in both directions (towards the end and towards the beginning).\n     *\n     * All {@link IArrayIterator random-access iterators} are also valid {@link Iterrator bidirectional iterators}.\n     *\n     * There is not a single type of {@link Iterator bidirectional iterator}: {@link Container Each container}\n     * may define its own specific iterator type able to iterate through it and access its elements.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/abstract_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/abstract_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * @reference http://www.cplusplus.com/reference/iterator/BidirectionalIterator\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Construct from the source {@link Container container}.\n         *\n         * @param source The source container.",
        "* Get iterator to previous element.\n         *\n         * If current iterator is the first item(equal with {@link Container.begin Container.begin()}),\n         * returns {@link Container.end Container.end()}.\n         *\n         * @return An iterator of the previous item.",
        "* Get iterator to next element.\n         *\n         * If current iterator is the last item, returns {@link Container.end Container.end()}.\n         *\n         * @return An iterator of the next item.",
        "* Advances the {@link Iterator} by <i>n</i> element positions.\n         *\n         * @param n Number of element positions to advance.\n         * @return An advanced iterator.",
        "* Get source container.\n         *\n         * Get source container of this iterator is directing for.",
        "* Whether an iterator is equal with the iterator.\n         *\n         * Compare two iterators and returns whether they are equal or not.\n         *\n         * #### Note\n         * Iterator's {@link equals equals()} only compare souce container and index number.\n         *\n         * Although elements in a pair, key and value are {@link equal_to equal_to}, if the source map or\n         * index number is different, then the {@link equals equals()} will return false. If you want to\n         * compare the elements of a pair, compare them directly by yourself.\n         *\n         * @param obj An iterator to compare\n         * @return Indicates whether equal or not.",
        "* Get value of the iterator is pointing.\n         *\n         * @return A value of the iterator.",
        "* This class reverses the direction in which a bidirectional or random-access iterator iterates through a range.\n     *\n     * A copy of the original iterator (the {@link Iterator base iterator}) is kept internally and used to reflect\n     * the operations performed on the {@link ReverseIterator}: whenever the {@link ReverseIterator} is incremented, its\n     * {@link Iterator base iterator} is decreased, and vice versa. A copy of the {@link Iterator base iterator} with the\n     * current state can be obtained at any time by calling member {@link base}.\n     *\n     * Notice however that when an iterator is reversed, the reversed version does not point to the same element in\n     * the range, but to <b>the one preceding it</b>. This is so, in order to arrange for the past-the-end element of a\n     * range: An iterator pointing to a past-the-end element in a range, when reversed, is pointing to the last element\n     * (not past it) of the range (this would be the first element of the reversed range). And if an iterator to the\n     * first element in a range is reversed, the reversed iterator points to the element before the first element (this\n     * would be the past-the-end element of the reversed range).\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/abstract_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/abstract_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * @reference http://www.cplusplus.com/reference/iterator/reverse_iterator\n     * @author Jeongho Nam <http://samchon.org>",
        "* @hidden",
        "* Construct from base iterator.\n         *\n         * @param base A reference of the base iterator, which iterates in the opposite direction.",
        "* @hidden",
        "* Return base iterator.\n         *\n         * Return a reference of the base iteraotr.\n         *\n         * The base iterator is an iterator of the same type as the one used to construct the {@link ReverseIterator},\n         * but pointing to the element next to the one the {@link ReverseIterator} is currently pointing to\n         * (a {@link ReverseIterator} has always an offset of -1 with respect to its base iterator).\n         *\n         * @return A reference of the base iterator, which iterates in the opposite direction.",
        "* Get value of the iterator is pointing.\n         *\n         * @return A value of the reverse iterator.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Initializer Constructor.\n         *\n         * @param source The source {@link Container} to reference.\n         * @param prev A refenrece of previous node ({@link ListIterator iterator}).\n         * @param next A refenrece of next node ({@link ListIterator iterator}).\n         * @param value Value to be stored in the node (iterator).",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Construct from the source {@link ArrayContainer container}.\n         *\n         * #### Note\n         * Do not create the iterator directly, by yourself.\n         *\n         * Use {@link ArrayContainer.begin begin()}, {@link ArrayContainer.end end()} in {@link ArrayContainer container} instead.\n         *\n         * @param source The source {@link ArrayContainer container} to reference.\n         * @param index Sequence number of the element in the source {@link ArrayContainer}.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Set value of the iterator is pointing to.\n         *\n         * @param val Value to set.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* Construct from base iterator.\n         *\n         * @param base A reference of the base iterator, which iterates in the opposite direction.",
        "* @hidden",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* Default Constructor.",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* @hidden",
        "* An iterator, node of a List.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Initializer Constructor.\n         *\n         * #### Note\n         * Do not create the iterator directly, by yourself.\n         *\n         * Use {@link List.begin begin()}, {@link List.end end()} in {@link List container} instead.\n         *\n         * @param source The source {@link List container} to reference.\n         * @param prev A refenrece of previous node ({@link ListIterator iterator}).\n         * @param next A refenrece of next node ({@link ListIterator iterator}).\n         * @param value Value to be stored in the node (iterator).",
        "* @inheritdoc",
        "* @inheritdoc",
        "* Set value of the iterator is pointing to.\n         *\n         * @param val Value to set.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* A reverse-iterator of List.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram/linear_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * @param <T> Type of the elements.\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from base iterator.\n         *\n         * @param base A reference of the base iterator, which iterates in the opposite direction.",
        "* @hidden",
        "* @inheritdoc",
        "* Set value of the iterator is pointing to.\n         *\n         * @param val Value to set.",
        "* An iterator of {@link MapContainer map container}.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram\" style=\"max-width: 100%\" /></a>\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from the {@link MapContainer source map} and {@link ListIterator list iterator}.\n         *\n         * @param source The source {@link MapContainer}.\n         * @param list_iterator A {@link ListIterator} pointing {@link Pair} of <i>key</i> and <i>value</i>.",
        "* Get iterator to previous element.",
        "* Get iterator to next element.",
        "* Advances the Iterator by n element positions.\n         *\n         * @param step Number of element positions to advance.\n         * @return An advanced Iterator.",
        "* @hidden",
        "* Get first, key element.",
        "* Get second, value element.",
        "* Set second value.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* A reverse-iterator of {@link MapContainer map container}.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/design/class_diagram\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/design/class_diagram\" style=\"max-width: 100%\" /></a>\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from base iterator.\n         *\n         * @param base A reference of the base iterator, which iterates in the opposite direction.",
        "* @hidden",
        "* Get first, key element.",
        "* Get second, value element.",
        "* Set second value.",
        "* An iterator of a Set.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/set_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from source and index number.\n         *\n         * #### Note\n         * Do not create iterator directly.\n         *\n         * Use begin(), find() or end() in Map instead.\n         *\n         * @param map The source Set to reference.\n         * @param index Sequence number of the element in the source Set.",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* @inheritdoc",
        "* A reverse-iterator of Set.\n     *\n     * <a href=\"http://samchon.github.io/tstl/images/class_diagram/set_containers.png\" target=\"_blank\">\n     * <img src=\"http://samchon.github.io/tstl/images/class_diagram/set_containers.png\" style=\"max-width: 100%\" /></a>\n     *\n     * @param <T> Type of the elements.\n     *\n     * @author Jeongho Nam <http://samchon.org>",
        "* Construct from base iterator.\n         *\n         * @param base A reference of the base iterator, which iterates in the opposite direction.",
        "* @hidden",
        "* Type definition of {@link Vector} and it's the original name used in C++.",
        "* Type definition of {@link List} and it's the original name used in C++.",
        "* Type definition of {@link Deque} and it's the original name used in C++.",
        "* Type definition of {@link Stack} and it's the original name used in C++.",
        "* Type definition of {@link Queue} and it's the original name used in C++.",
        "* Type definition of {@link PriorityQueue} and it's the original name used in C++.",
        "* Type definition of {@link TreeSet} and it's the original name used in C++.",
        "* Type definition of {@link TreeMultiSet} and it's the original name used in C++.",
        "* Type definition of {@link HashSet} and it's the original name used in C++.",
        "* Type definition of {@link HashMultiSet} and it's the original name used in C++.",
        "* Type definition of {@link TreeMap} and it's the original name used in C++.",
        "* Type definition of {@link TreeMultiMap} and it's the original name used in C++.",
        "* Type definition of {@link HashMap} and it's the original name used in C++.",
        "* Type definition of {@link HashMultiMap} and it's the original name used in C++.",
        "* Comparable instance.\n     *\n     * {@link IComparable} is a common interface for objects who can compare each other.\n     *\n     * @reference https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html\n     * @author Jeongho Nam <http://samchon.org>",
        "* Indicates whether some other object is &quot;equal to&quot; this one.\n         *\n         * The {@link equal_to} method implements an equivalence relation on non-null object references:\n         *\n         * <ul>\n         *\t<li>\n         *\t\tIt is <b>reflexive</b>: for any non-null reference value <code>x</code>, <code>x.equal_to(x)</code>\n         *\t\tshould return <code>true</code>.\n         *\t</li>\n         *\t<li>\n         *\t\tIt is <b>symmetric</b>: for any non-null reference values <code>x</code> and <code>y</code>,\n         *\t\t<code>x.equal_to(y)</code> should return <code>true</code> if and only if <code>y.equal_to(x)</code>\n         *\t\treturns <code>true</code>. </li>\n         *\t<li>\n         *\t\tIt is <b>transitive</b>: for any non-null reference values <code>x</code>, <code>y</code>, and\n         *\t\t<code>z</code>, if <code>x.equal_to(y)</code> returns <code>true</code> and <code>y.equal_to(z)</code>\n         *\t\treturns <code>true</code>, then <code>x.equal_to(z)</code> should return <code>true</code>.\n         *\t</li>\n         *\t<li>\n         *\t\tIt is <b>consistent</b>: for any non-null reference values <code>x</code> and <code>y</code>, multiple\n         *\t\tinvocations of <code>x.equal_to(y)</code> consistently return <code>true</code> or consistently return\n         *\t\t<code>false</code>, provided no information used in equal_to comparisons on the objects is modified.\n         *\t</li>\n         *\t<li>\n         *\t\tFor any non-null reference value <code>x</code>, <code>x.equal_to(null)</code> should return\n         *\t\t<code>false</code>.\n         *\t</li>\n         * </ul>\n         *\n         * The {@link equal_to} method for interface {@link IComparable} implements the most discriminating possible\n         * equivalence relation on objects; that is, for any non-null reference values <code>x</code> and\n         * <code>y</code>, this method returns <code>true</code> if and only if <code>x</code> and <code>y</code>\n         * refer to the same object (<code>x == y</code> has the value <code>true</code>).\n         *\n         * Note that it is generally necessary to override the {@link hash_code} method whenever this method is\n         * overridden, so as to maintain the general contract for the {@link hash_code} method, which states that\n         * equal objects must have equal hash codes.\n         *\n         * - {@link IComparable.equal_to} is called by {@link equal_to}.\n         *\n         * @param obj the reference object with which to compare.\n         *\n         * @return <code>true</code> if this object is the same as the obj argument; <code>false</code> otherwise.",
        "* Less-than inequality comparison.\n         *\n         * Binary method returns whether the the instance compares less than the <i>obj</i>.\n         *\n         * <ul>\n         *\t<li>\n         *\t\t{@link IComparable.less} is called by {@link less}. Also, this method can be used on standard\n         *\t\talgorithms such as {@link sort sort()}</code>, {@link merge merge()} or\n         *\t\t{@link TreeMap.lower_bound lower_bound()}.\n         *\t</li>\n         * </ul>\n         *\n         * @param obj the reference object with which to compare.\n         *\n         * @return Whether the first parameter is less than the second.",
        "* Issue a hash code.\n         *\n         * Returns a hash code value for the object. This method is supported for the benefit of hash tables such\n         * as those provided by hash containers; {@link HashSet}, {@link HashMap}, {@link MultiHashSet} and\n         * {@link MultiHashMap}.\n         *\n         * As much as is reasonably practical, the {@link hash_code} method defined by interface\n         * {@link IComparable} does return distinct integers for distinct objects. (This is typically implemented by\n         * converting the internal address of the object into an integer, but this implementation technique is not\n         * required by the JavaScript programming language.)\n         *\n         * <ul>\n         *\t<li>\n         *\t\t{@link IComparable.hash_code} is called by {@link hash_code}. If you want to keep basically\n         *\t\tprovided hash function, then returns {@link Hash.code}; <code>return Hash.code(this);</code>\n         *\t</li>\n         * </ul>\n         *\n         * @return An hash code who represents the object."
    ],
    "functions": [],
    "classes": [
        "_SetElementList",
        "TreeSet",
        "TreeMultiSet",
        "HashMultiSet",
        "_MapElementList",
        "TreeMap",
        "TreeMultiMap",
        "HashMultiMap",
        "PriorityQueue",
        "LogicError",
        "DomainError",
        "InvalidArgument",
        "LengthError",
        "OutOfRange",
        "RuntimeError",
        "OverflowError",
        "UnderflowError",
        "RangeError",
        "SystemError",
        "ErrorCondition",
        "ErrorCode",
        "PlaceHolder",
        "Pair",
        "_MapHashBuckets",
        "_SetHashBuckets",
        "_NativeArrayIterator",
        "_Repeater",
        "ArrayIterator",
        "ArrayReverseIterator",
        "_MultiMapTree",
        "_MultiSetTree",
        "_UniqueMapTree",
        "_UniqueSetTree",
        "_XTreeNode",
        "ListIterator",
        "ListReverseIterator",
        "MapIterator",
        "MapReverseIterator",
        "SetIterator",
        "SetReverseIterator"
    ]
}