{
    "identifiers": [
        "pytest",
        "pytest",
        "fixture",
        "weighted_graph",
        "Graph",
        "Graph",
        "Graph",
        "Graph",
        "one_graph",
        "empty_graph",
        "new_graph",
        "pytest",
        "fixture",
        "weighted_graph",
        "Graph",
        "Graph",
        "graph",
        "add_edge",
        "graph",
        "add_edge",
        "graph",
        "add_edge",
        "graph",
        "add_edge",
        "graph",
        "add_edge",
        "graph",
        "add_edge",
        "graph",
        "add_edge",
        "graph",
        "sample_graph",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_node",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_node",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_node",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "nodes",
        "sample_graph",
        "nodes",
        "sample_graph",
        "sample_graph",
        "nodes",
        "many_nodes",
        "sort",
        "many_nodes",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "edges",
        "sorted",
        "all_edges",
        "sample_graph",
        "sample_graph",
        "edges",
        "sample_graph",
        "pytest",
        "raises",
        "IndexError",
        "sample_graph",
        "del_node",
        "sample_graph",
        "pytest",
        "raises",
        "IndexError",
        "sample_graph",
        "del_node",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "del_node",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "del_node",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "del_edge",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "pytest",
        "raises",
        "IndexError",
        "sample_graph",
        "del_edge",
        "sample_graph",
        "sample_graph",
        "has_node",
        "sample_graph",
        "sample_graph",
        "has_node",
        "sample_graph",
        "pytest",
        "raises",
        "KeyError",
        "sample_graph",
        "neighbours",
        "sample_graph",
        "pytest",
        "raises",
        "KeyError",
        "sample_graph",
        "neighbours",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "neighbours",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "pytest",
        "raises",
        "KeyError",
        "sample_graph",
        "adjacent",
        "pytest",
        "raises",
        "KeyError",
        "sample_graph",
        "adjacent",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "adjacent",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "adjacent",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "graph",
        "sample_graph",
        "sample_graph",
        "add_edge",
        "sample_graph",
        "graph",
        "sample_graph",
        "pytest",
        "raises",
        "ValueError",
        "sample_graph",
        "add_edge"
    ],
    "literals": [
        "'A'",
        "'A'",
        "'B'",
        "'C'",
        "'D'",
        "'A'",
        "'B'",
        "'C'",
        "'D'",
        "'E'",
        "'F'",
        "'G'",
        "'A'",
        "'B'",
        "'A'",
        "'C'",
        "'A'",
        "'E'",
        "'B'",
        "'D'",
        "'B'",
        "'F'",
        "'C'",
        "'G'",
        "'E'",
        "'F'",
        "'A'",
        "'A'",
        "'B'",
        "'C'",
        "'D'",
        "'B'",
        "'B'",
        "'E'",
        "'A'",
        "'B'",
        "'C'",
        "'D'",
        "'E'",
        "'A'",
        "'A'",
        "'A'",
        "'B'",
        "'A'",
        "'B'",
        "'A'",
        "'B'",
        "'A'",
        "'B'",
        "'B'",
        "'B'",
        "'A'",
        "'A'",
        "'B'",
        "'A'",
        "'A'",
        "'B'",
        "'A'",
        "'B'",
        "'B'",
        "'A'",
        "'A'",
        "'B'",
        "'C'",
        "'D'",
        "'A'",
        "'B'",
        "'C'",
        "'A'",
        "'C'",
        "'B'",
        "'A'",
        "'B'",
        "'C'",
        "'A'",
        "'C'",
        "'B'",
        "'X'",
        "'X'",
        "'A'",
        "'B'",
        "'A'",
        "'C'",
        "'A'",
        "'D'",
        "'B'",
        "'B'",
        "'A'",
        "'B'",
        "'A'",
        "'C'",
        "'A'",
        "'D'",
        "'B'",
        "'B'",
        "'A'",
        "'A'",
        "'B'",
        "'A'",
        "'C'",
        "'A'",
        "'D'",
        "'A'",
        "'B'",
        "'A'",
        "'C'",
        "'D'",
        "'A'",
        "'B'",
        "'A'",
        "'C'",
        "'A'",
        "'D'",
        "'A'",
        "'X'",
        "'A'",
        "'X'",
        "'X'",
        "'X'",
        "'A'",
        "'B'",
        "'A'",
        "'C'",
        "'A'",
        "'D'",
        "'A'",
        "'B'",
        "'C'",
        "'D'",
        "'A'",
        "'B'",
        "'A'",
        "'C'",
        "'A'",
        "'D'",
        "'X'",
        "'A'",
        "'B'",
        "'X'",
        "'A'",
        "'B'",
        "'A'",
        "'C'",
        "'A'",
        "'D'",
        "'A'",
        "'B'",
        "'A'",
        "'C'",
        "'A'",
        "'C'",
        "'A'",
        "'B'",
        "'A'",
        "'A'",
        "'B'",
        "'A'",
        "'A'",
        "'B'",
        "'C'"
    ],
    "variables": [
        "one_graph",
        "empty_graph",
        "new_graph",
        "graph",
        "many_nodes",
        "all_edges"
    ],
    "comments": [
        "def test_graph_depth_traversal(traversal_graph):",
        "\"\"\"Test depth traversal of graph.\"\"\"",
        "assert traversal_graph.depth_traversal('A') == ['A', 'B', 'D', 'F', 'C', 'G', 'E']",
        "def test_graph_depth_traversal_partial_graph(traversal_graph):",
        "\"\"\"Test depth traversal of node that only points to part of the graph.\"\"\"",
        "assert traversal_graph.depth_traversal('B') == ['B', 'D', 'F']",
        "def test_graph_depth_traversal_dead_end(traversal_graph):",
        "\"\"\"Test depth traversal of graph with no edges.\"\"\"",
        "assert traversal_graph.depth_traversal('G') == ['G']",
        "def test_graph_depth_traversal_invaid_node(traversal_graph):",
        "\"\"\"Test depth traversal of graph with node that doesn't exist.\"\"\"",
        "with pytest.raises(KeyError):",
        "assert traversal_graph.depth_traversal('H')",
        "def test_graph_depth_traversal_cyclical(traversal_graph):",
        "\"\"\"Test depth traversal of graph with no edges.\"\"\"",
        "traversal_graph.add_edge('G', 'A')",
        "traversal_graph.add_edge('B', 'A')",
        "assert traversal_graph.depth_traversal('A') == ['A', 'B', 'D', 'F', 'C', 'G', 'E']",
        "# def test_graph_breadth_traversal(traversal_graph):",
        "#     \"\"\"Test breadth traversal of graph.\"\"\"",
        "#     assert traversal_graph.breadth_traversal('A') == ['A', 'B', 'C', 'E', 'D', 'F', 'G']",
        "def test_graph_breadth_traversal_dead_end(traversal_graph):",
        "\"\"\"Test breadth traversal of graph with no edges.\"\"\"",
        "assert traversal_graph.breadth_traversal('D') == ['D']",
        "def test_graph_breadth_traversal_invaid_node(traversal_graph):",
        "\"\"\"Test depth traversal of graph with node that doesn't exist.\"\"\"",
        "with pytest.raises(KeyError):",
        "assert traversal_graph.breadth_traversal('H')",
        "def test_graph_breadth_traversal_cyclical(traversal_graph):",
        "\"\"\"Test depth traversal of graph with no edges.\"\"\"",
        "traversal_graph.add_edge('G', 'A')",
        "traversal_graph.add_edge('B', 'A')",
        "assert traversal_graph.depth_traversal('A') == ['A', 'B', 'D', 'F', 'C', 'G', 'E']"
    ],
    "docstrings": [
        "\"\"\"Test implementation of a simple unweighted directed graph.\"\"\"",
        "\"\"\"Create testing graph.\"\"\"",
        "\"\"\"Create a graph for traversal testing.\"\"\"",
        "\"\"\"Test initilaization of an empty graph.\"\"\"",
        "\"\"\"Test initialization of a graph with one data point.\"\"\"",
        "\"\"\"Test graph with multiple data points is initialized.\"\"\"",
        "\"\"\"Test add_node adds a node to graph with no connections.\"\"\"",
        "\"\"\"Test node is added to an existing graph.\"\"\"",
        "\"\"\"Test add and existingnode does not duplicate in graph.\"\"\"",
        "\"\"\"Test connections between existing nodes is created.\"\"\"",
        "\"\"\"Test connection between new node2 and existing is made.\"\"\"",
        "\"\"\"Test connection between new node1 and existing node2.\"\"\"",
        "\"\"\"Test connection between new node1 and new node2.\"\"\"",
        "\"\"\"Test nodes are displayed in a list.\"\"\"",
        "\"\"\"Test nodes in a graph of multiple nodes are returned.\"\"\"",
        "\"\"\"Test all edges are displayed in a list.\"\"\"",
        "\"\"\"Test no edges are displayed when there are none.\"\"\"",
        "\"\"\"Test deletion of node when it does not exist.\"\"\"",
        "\"\"\"Test deletion from empty graph.\"\"\"",
        "\"\"\"Test deletion from sample graph.\"\"\"",
        "\"\"\"Test deleted node is removed from edges.\"\"\"",
        "\"\"\"Test deletion of edge from graph.\"\"\"",
        "\"\"\"Test deletion of invalid edge from graph.\"\"\"",
        "\"\"\"Test that has_node works correctly for valid node.\"\"\"",
        "\"\"\"Test that has_node works correctly for invalid node.\"\"\"",
        "\"\"\"Test that neighbors throws error if invalid node.\"\"\"",
        "\"\"\"Test that neighbors throws error on empty graph.\"\"\"",
        "\"\"\"Test that neighbors returns node connections.\"\"\"",
        "\"\"\"Test that adjacent throws error if invalid node.\"\"\"",
        "\"\"\"Test that adjacent returns False if edge does not exist.\"\"\"",
        "\"\"\"Test that adjacent returns True for existing edgge.\"\"\"",
        "\"\"\"Test added edges have a default weight of 1.\"\"\"",
        "\"\"\"Test added edges have a specified weight.\"\"\"",
        "\"\"\"Test weight can only be a number.\"\"\""
    ],
    "functions": [
        "sample_graph",
        "traversal_graph",
        "test_initialization_of_graph",
        "test_initialization_of_graph_with_one_datapoint",
        "test_initialization_of_graph_with_multiple_datapoints",
        "test_add_a_node_adds_node_with_no_connections",
        "test_add_a_node_to_an_initialized_graph",
        "test_add_existing_node_do_not_duplicate",
        "test_add_edge_on_existing_nodes",
        "test_add_edge_when_node2_does_not_exist",
        "test_add_edge_when_node1_does_not_exist",
        "test_add_edge_when_node1_and_node2_does_not_exist",
        "test_list_of_nodes_is_displayed",
        "test_list_of_multiple_nodes_is_displayed",
        "test_edges_are_displayed",
        "test_edges_when_there_are_none",
        "test_delete_invalid_node",
        "test_delete_from_empty_graph",
        "test_delete_node_from_sample_graph",
        "test_del_node_from_graph_removed_edge",
        "test_delete_edge",
        "test_delete_invalid_edge",
        "test_had_valid_node",
        "test_had_invalid_node",
        "test_neighbors_invalid",
        "test_neighbors_invalid_empty",
        "test_neighbors_valid",
        "test_adjacent_invalid",
        "test_adjacent_for_invalid_edge",
        "test_adjacent_for_valid_edge",
        "test_edges_have_default_weight_of_one",
        "test_edges_have_weight_other_than_one",
        "test_weight_can_only_be_a_number"
    ],
    "classes": []
}