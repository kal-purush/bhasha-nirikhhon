{
    "identifiers": [
        "argparse",
        "base64",
        "glob",
        "re",
        "subprocess",
        "sys",
        "packet_lines",
        "packet_lines",
        "_DecodeText",
        "packet_lines",
        "classmethod",
        "cls",
        "packet_lines",
        "line",
        "packet_lines",
        "re",
        "match",
        "line",
        "re",
        "IGNORECASE",
        "m",
        "hexpart",
        "m",
        "group",
        "split",
        "packet_bytes",
        "append",
        "base64",
        "b16decode",
        "hexpart",
        "upper",
        "join",
        "packet_bytes",
        "name",
        "link_type",
        "name",
        "line",
        "packet_lines",
        "line",
        "name",
        "data",
        "data",
        "data",
        "data",
        "join",
        "ord",
        "c",
        "c",
        "linebytes",
        "name",
        "name",
        "link_type",
        "link_type",
        "name",
        "name",
        "link_type",
        "filename",
        "subprocess",
        "check_output",
        "filename",
        "output",
        "line",
        "output",
        "splitlines",
        "line",
        "whitespace",
        "pdata",
        "Packet",
        "pdata",
        "pdata",
        "append",
        "line",
        "pdata",
        "Packet",
        "pdata",
        "argparse",
        "ArgumentDefaultsHelpFormatter",
        "usage",
        "actions",
        "groups",
        "prefix",
        "header",
        "argparse",
        "ArgumentDefaultsHelpFormatter",
        "_format_usage",
        "usage",
        "actions",
        "groups",
        "prefix",
        "argparse",
        "ArgumentParser",
        "formatter_class",
        "CustomHelpFormatter",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "nargs",
        "help",
        "parser",
        "parse_args",
        "arg",
        "args",
        "files",
        "path",
        "glob",
        "glob",
        "arg",
        "i",
        "packet",
        "TcpdumpOutputToPackets",
        "GetTcpdumpOutput",
        "path",
        "join",
        "packet",
        "Test",
        "args",
        "name",
        "i",
        "args",
        "link_type",
        "main"
    ],
    "literals": [
        "r'\\s+0x[a-f\\d]+:\\s+((?:[\\da-f]{2,4}\\s)*)'",
        "''",
        "'// testPacket%s is the packet:'",
        "'//   '",
        "'var testPacket%s = []byte{'",
        "''",
        "'\\t'",
        "'0x%02x, '",
        "'}'",
        "'func TestPacket%s(t *testing.T) {'",
        "'\\tp := gopacket.NewPacket(testPacket%s, LinkType%s, gopacket.Default)'",
        "'\\tif p.ErrorLayer() != nil {'",
        "'\\t\\tt.Error(\"Failed to decode packet:\", p.ErrorLayer().Error())'",
        "'\\t}'",
        "'\\tcheckLayers(p, []gopacket.LayerType{LayerType%s, FILL_ME_IN_WITH_ACTUAL_LAYERS}, t)'",
        "'}'",
        "'func BenchmarkDecodePacket%s(b *testing.B) {'",
        "'\\tfor i := 0; i < b.N; i++ {'",
        "'\\t\\tgopacket.NewPacket(testPacket%s, LinkType%s, gopacket.NoCopy)'",
        "'\\t}'",
        "'}'",
        "'tcpdump'",
        "'-XX'",
        "'-s'",
        "'0'",
        "'-n'",
        "'-r'",
        "'TestCreator creates gopacket tests using a pcap file.\\n\\n'",
        "'Tests are written to standard out... they can then be \\n'",
        "'copied into the file of your choice and modified as \\n'",
        "'you see.\\n\\n'",
        "'--link_type'",
        "'Ethernet'",
        "'the link type (default: %(default)s)'",
        "'--name'",
        "'Packet%d'",
        "'the layer type, must have \"%d\" inside it'",
        "'files'",
        "'file.pcap'",
        "'+'",
        "'the files to process'",
        "'\\n'",
        "'__main__'"
    ],
    "variables": [
        "packet_lines",
        "data",
        "packet_bytes",
        "m",
        "data",
        "linebytes",
        "data",
        "pdata",
        "pdata",
        "header",
        "parser",
        "args"
    ],
    "comments": [
        "!/usr/bin/python",
        "Copyright 2012 Google, Inc. All rights reserved.",
        "First line is timestamp and stuff, skip it.",
        "Format: 0x0010:  0000 0020 3aff 3ffe 0000 0000 0000 0000  ....:.?........."
    ],
    "docstrings": [
        "\"\"\"TestCreator creates test templates from pcap files.\"\"\"",
        "\"\"\"Helper class encapsulating packet from a pcap file.\"\"\"",
        "\"\"\"Yields a test using this packet, as a set of lines.\"\"\"",
        "\"\"\"Runs tcpdump on the given file, returning output as string.\"\"\"",
        "\"\"\"Reads a pcap file with TCPDump, yielding Packet objects.\"\"\""
    ],
    "functions": [
        "_DecodeText",
        "Test",
        "GetTcpdumpOutput",
        "TcpdumpOutputToPackets",
        "main",
        "_format_usage"
    ],
    "classes": [
        "Packet",
        "CustomHelpFormatter"
    ]
}