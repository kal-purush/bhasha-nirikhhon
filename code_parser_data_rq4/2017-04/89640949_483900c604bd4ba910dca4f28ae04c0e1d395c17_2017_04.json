{
    "identifiers": [
        "deeprl_prj",
        "policy",
        "deeprl_prj",
        "objectives",
        "deeprl_prj",
        "preprocessors",
        "deeprl_prj",
        "utils",
        "deeprl_prj",
        "core",
        "numpy",
        "np",
        "sys",
        "gym",
        "wrappers",
        "tensorflow",
        "tf",
        "helper",
        "skimage",
        "transform",
        "args",
        "h_size",
        "num_frames",
        "num_actions",
        "rnn_cell",
        "myScope",
        "tf",
        "placeholder",
        "shape",
        "num_frames",
        "dtype",
        "tf",
        "float32",
        "tf",
        "transpose",
        "imageIn",
        "perm",
        "tf",
        "reshape",
        "image_permute",
        "tf",
        "squeeze",
        "tf",
        "gather",
        "tf",
        "reshape",
        "image_reshape",
        "num_frames",
        "tf",
        "summary",
        "merge",
        "tf",
        "summary",
        "image",
        "image_reshape_recoverd",
        "max_outputs",
        "num_frames",
        "tf",
        "contrib",
        "layers",
        "convolution2d",
        "inputs",
        "image_reshape",
        "num_outputs",
        "kernel_size",
        "stride",
        "padding",
        "activation_fn",
        "tf",
        "nn",
        "relu",
        "biases_initializer",
        "scope",
        "myScope",
        "tf",
        "contrib",
        "layers",
        "convolution2d",
        "inputs",
        "conv1",
        "num_outputs",
        "kernel_size",
        "stride",
        "padding",
        "activation_fn",
        "tf",
        "nn",
        "relu",
        "biases_initializer",
        "scope",
        "myScope",
        "tf",
        "contrib",
        "layers",
        "convolution2d",
        "inputs",
        "conv2",
        "num_outputs",
        "kernel_size",
        "stride",
        "padding",
        "activation_fn",
        "tf",
        "nn",
        "relu",
        "biases_initializer",
        "scope",
        "myScope",
        "tf",
        "placeholder",
        "dtype",
        "tf",
        "int32",
        "args",
        "a_t",
        "tf",
        "contrib",
        "layers",
        "fully_connected",
        "tf",
        "contrib",
        "layers",
        "flatten",
        "conv3",
        "h_size",
        "activation_fn",
        "tf",
        "nn",
        "relu",
        "tf",
        "reshape",
        "conv4",
        "batch_size",
        "num_frames",
        "h_size",
        "rnn_cell",
        "zero_state",
        "batch_size",
        "tf",
        "float32",
        "rnn_outputs",
        "rnn_state",
        "tf",
        "nn",
        "dynamic_rnn",
        "inputs",
        "convFlat",
        "cell",
        "rnn_cell",
        "dtype",
        "tf",
        "float32",
        "initial_state",
        "state_in",
        "scope",
        "myScope",
        "rnn_outputs",
        "get_shape",
        "as_list",
        "tf",
        "rnn_outputs",
        "num_frames",
        "tf",
        "squeeze",
        "rnn_last_output",
        "rnn",
        "get_shape",
        "as_list",
        "num_frames",
        "args",
        "selector",
        "tf",
        "contrib",
        "layers",
        "xavier_initializer",
        "tf",
        "constant_initializer",
        "tf",
        "reshape",
        "conv3",
        "batch_size",
        "num_frames",
        "L",
        "D",
        "tf",
        "split",
        "features",
        "num_frames",
        "axis",
        "len",
        "features_list",
        "features_list",
        "get_shape",
        "as_list",
        "tf",
        "contrib",
        "rnn",
        "BasicLSTMCell",
        "num_units",
        "H",
        "_get_initial_lstm",
        "features",
        "tf",
        "squeeze",
        "features_list",
        "myScope",
        "myScope",
        "t",
        "T",
        "tf",
        "squeeze",
        "features_list",
        "t",
        "_batch_norm",
        "features",
        "mode",
        "name",
        "myScope",
        "_project_features",
        "features",
        "features",
        "myScope",
        "myScope",
        "reuse",
        "t",
        "_attention_layer",
        "features",
        "features_proj",
        "h",
        "myScope",
        "myScope",
        "reuse",
        "t",
        "alpha_list",
        "append",
        "alpha",
        "selector",
        "_selector",
        "context",
        "h",
        "myScope",
        "myScope",
        "reuse",
        "t",
        "context",
        "get_shape",
        "as_list",
        "h",
        "get_shape",
        "as_list",
        "tf",
        "variable_scope",
        "myScope",
        "reuse",
        "t",
        "c",
        "h",
        "lstm_cell",
        "inputs",
        "tf",
        "concat",
        "context",
        "h",
        "state",
        "c",
        "h",
        "h",
        "get_shape",
        "as_list",
        "h",
        "args",
        "net_mode",
        "tf",
        "contrib",
        "layers",
        "fully_connected",
        "rnn",
        "h_size",
        "activation_fn",
        "tf",
        "nn",
        "relu",
        "scope",
        "myScope",
        "tf",
        "contrib",
        "layers",
        "fully_connected",
        "ad_hidden",
        "num_actions",
        "activation_fn",
        "scope",
        "myScope",
        "tf",
        "contrib",
        "layers",
        "fully_connected",
        "rnn",
        "h_size",
        "activation_fn",
        "tf",
        "nn",
        "relu",
        "scope",
        "myScope",
        "tf",
        "contrib",
        "layers",
        "fully_connected",
        "value_hidden",
        "activation_fn",
        "scope",
        "myScope",
        "Value",
        "tf",
        "subtract",
        "Advantage",
        "tf",
        "reduce_mean",
        "Advantage",
        "axis",
        "keep_dims",
        "tf",
        "contrib",
        "layers",
        "fully_connected",
        "rnn",
        "num_actions",
        "activation_fn",
        "tf",
        "argmax",
        "Qout",
        "tf",
        "placeholder",
        "shape",
        "dtype",
        "tf",
        "float32",
        "tf",
        "placeholder",
        "shape",
        "dtype",
        "tf",
        "int32",
        "tf",
        "one_hot",
        "actions",
        "num_actions",
        "dtype",
        "tf",
        "float32",
        "tf",
        "reduce_sum",
        "tf",
        "multiply",
        "Qout",
        "actions_onehot",
        "axis",
        "tf",
        "square",
        "targetQ",
        "Q",
        "tf",
        "reduce_mean",
        "td_error",
        "tf",
        "train",
        "AdamOptimizer",
        "learning_rate",
        "trainer",
        "minimize",
        "loss",
        "x",
        "mode",
        "name",
        "tf",
        "contrib",
        "layers",
        "batch_norm",
        "inputs",
        "x",
        "decay",
        "center",
        "scale",
        "is_training",
        "mode",
        "updates_collections",
        "scope",
        "name",
        "features",
        "myScope",
        "tf",
        "variable_scope",
        "myScope",
        "tf",
        "reduce_mean",
        "features",
        "tf",
        "get_variable",
        "D",
        "H",
        "initializer",
        "weight_initializer",
        "tf",
        "get_variable",
        "H",
        "initializer",
        "const_initializer",
        "tf",
        "nn",
        "tanh",
        "tf",
        "matmul",
        "features_mean",
        "w_h",
        "b_h",
        "tf",
        "get_variable",
        "D",
        "H",
        "initializer",
        "weight_initializer",
        "tf",
        "get_variable",
        "H",
        "initializer",
        "const_initializer",
        "tf",
        "nn",
        "tanh",
        "tf",
        "matmul",
        "features_mean",
        "w_c",
        "b_c",
        "c",
        "h",
        "features",
        "myScope",
        "reuse",
        "tf",
        "variable_scope",
        "myScope",
        "reuse",
        "reuse",
        "tf",
        "get_variable",
        "D",
        "D",
        "initializer",
        "weight_initializer",
        "tf",
        "reshape",
        "features",
        "D",
        "tf",
        "matmul",
        "features_flat",
        "w",
        "tf",
        "reshape",
        "features_proj",
        "L",
        "D",
        "features_proj",
        "features",
        "features_proj",
        "h",
        "myScope",
        "reuse",
        "tf",
        "variable_scope",
        "myScope",
        "reuse",
        "reuse",
        "tf",
        "get_variable",
        "H",
        "D",
        "initializer",
        "weight_initializer",
        "tf",
        "get_variable",
        "D",
        "initializer",
        "const_initializer",
        "tf",
        "get_variable",
        "D",
        "initializer",
        "weight_initializer",
        "tf",
        "nn",
        "relu",
        "features_proj",
        "tf",
        "expand_dims",
        "tf",
        "matmul",
        "h",
        "w",
        "b",
        "tf",
        "reshape",
        "tf",
        "matmul",
        "tf",
        "reshape",
        "h_att",
        "D",
        "w_att",
        "L",
        "tf",
        "nn",
        "softmax",
        "out_att",
        "tf",
        "reduce_sum",
        "features",
        "tf",
        "expand_dims",
        "alpha",
        "name",
        "context",
        "alpha",
        "context",
        "h",
        "myScope",
        "reuse",
        "tf",
        "variable_scope",
        "myScope",
        "reuse",
        "reuse",
        "tf",
        "get_variable",
        "H",
        "initializer",
        "weight_initializer",
        "tf",
        "get_variable",
        "initializer",
        "const_initializer",
        "tf",
        "nn",
        "sigmoid",
        "tf",
        "matmul",
        "h",
        "w",
        "b",
        "tf",
        "multiply",
        "beta",
        "context",
        "name",
        "context",
        "beta",
        "step",
        "name",
        "value",
        "writer",
        "tf",
        "Summary",
        "summary",
        "value",
        "add",
        "value",
        "name",
        "writer",
        "add_summary",
        "summary",
        "step",
        "args",
        "num_actions",
        "num_actions",
        "args",
        "frame_height",
        "args",
        "frame_width",
        "args",
        "num_frames",
        "HistoryPreprocessor",
        "args",
        "num_frames",
        "AtariPreprocessor",
        "ReplayMemory",
        "args",
        "LinearDecayGreedyEpsilonPolicy",
        "args",
        "initial_epsilon",
        "args",
        "final_epsilon",
        "args",
        "exploration_steps",
        "args",
        "gamma",
        "args",
        "target_update_freq",
        "args",
        "num_burn_in",
        "args",
        "train_freq",
        "args",
        "batch_size",
        "args",
        "learning_rate",
        "args",
        "frame_width",
        "args",
        "frame_height",
        "args",
        "num_frames",
        "args",
        "output",
        "args",
        "output",
        "args",
        "output",
        "args",
        "save_freq",
        "args",
        "load_network",
        "args",
        "load_network_path",
        "args",
        "ddqn",
        "args",
        "net_mode",
        "tf",
        "reset_default_graph",
        "tf",
        "contrib",
        "rnn",
        "BasicLSTMCell",
        "num_units",
        "h_size",
        "state_is_tuple",
        "tf",
        "contrib",
        "rnn",
        "BasicLSTMCell",
        "num_units",
        "h_size",
        "state_is_tuple",
        "Qnetwork",
        "args",
        "args",
        "h_size",
        "h_size",
        "num_frames",
        "num_frames",
        "num_actions",
        "num_actions",
        "rnn_cell",
        "cell",
        "myScope",
        "Qnetwork",
        "args",
        "args",
        "h_size",
        "h_size",
        "num_frames",
        "num_frames",
        "num_actions",
        "num_actions",
        "rnn_cell",
        "cellT",
        "myScope",
        "net_mode",
        "enable_ddqn",
        "args",
        "eval_freq",
        "args",
        "no_experience",
        "args",
        "no_target",
        "no_target",
        "no_experience",
        "tf",
        "global_variables_initializer",
        "tf",
        "train",
        "Saver",
        "max_to_keep",
        "tf",
        "trainable_variables",
        "trainables",
        "len",
        "trainables",
        "updateTargetGraph",
        "trainables",
        "tau",
        "tf",
        "ConfigProto",
        "config",
        "gpu_options",
        "tf",
        "Session",
        "config",
        "config",
        "sess",
        "run",
        "init",
        "updateTarget",
        "targetOps",
        "sess",
        "tf",
        "summary",
        "FileWriter",
        "output_path",
        "state",
        "state",
        "sess",
        "run",
        "q_network",
        "Qout",
        "feed_dict",
        "q_network",
        "imageIn",
        "state",
        "q_network",
        "batch_size",
        "Qout",
        "state",
        "is_training",
        "kwargs",
        "calc_q_values",
        "state",
        "is_training",
        "kwargs",
        "UniformRandomPolicy",
        "num_actions",
        "select_action",
        "policy",
        "select_action",
        "q_values",
        "is_training",
        "GreedyEpsilonPolicy",
        "select_action",
        "q_values",
        "current_sample",
        "batch_size",
        "no_experience",
        "np",
        "stack",
        "current_sample",
        "state",
        "np",
        "stack",
        "current_sample",
        "next_state",
        "np",
        "asarray",
        "current_sample",
        "reward",
        "np",
        "asarray",
        "current_sample",
        "is_terminal",
        "np",
        "zeros",
        "num_actions",
        "current_sample",
        "action",
        "memory",
        "sample",
        "batch_size",
        "atari_processor",
        "process_batch",
        "samples",
        "np",
        "stack",
        "x",
        "state",
        "x",
        "samples",
        "np",
        "asarray",
        "x",
        "action",
        "x",
        "samples",
        "np",
        "stack",
        "x",
        "next_state",
        "x",
        "samples",
        "np",
        "asarray",
        "x",
        "is_terminal",
        "x",
        "samples",
        "np",
        "asarray",
        "x",
        "reward",
        "x",
        "samples",
        "no_target",
        "q_network",
        "predict_on_batch",
        "next_states",
        "sess",
        "run",
        "target_network",
        "Qout",
        "feed_dict",
        "target_network",
        "imageIn",
        "next_states",
        "target_network",
        "batch_size",
        "batch_size",
        "enable_ddqn",
        "sess",
        "run",
        "q_network",
        "Qout",
        "feed_dict",
        "q_network",
        "imageIn",
        "next_states",
        "q_network",
        "batch_size",
        "batch_size",
        "np",
        "argmax",
        "qa_value",
        "axis",
        "next_qa_value",
        "batch_size",
        "max_actions",
        "np",
        "max",
        "next_qa_value",
        "axis",
        "rewards",
        "gamma",
        "mask",
        "next_qa_value",
        "sess",
        "run",
        "q_network",
        "loss",
        "q_network",
        "updateModel",
        "q_network",
        "rnn",
        "feed_dict",
        "q_network",
        "imageIn",
        "states",
        "q_network",
        "batch_size",
        "batch_size",
        "q_network",
        "actions",
        "actions",
        "q_network",
        "targetQ",
        "target",
        "np",
        "random",
        "random",
        "sess",
        "run",
        "q_network",
        "summary_merged",
        "feed_dict",
        "q_network",
        "imageIn",
        "states",
        "q_network",
        "batch_size",
        "batch_size",
        "q_network",
        "actions",
        "actions",
        "q_network",
        "targetQ",
        "target",
        "writer",
        "add_summary",
        "merged",
        "writer",
        "flush",
        "loss",
        "np",
        "mean",
        "target",
        "env",
        "num_iterations",
        "max_episode_length",
        "save_model",
        "env",
        "reset",
        "t",
        "num_burn_in",
        "num_iterations",
        "history_processor",
        "process_state_for_network",
        "atari_processor",
        "process_state_for_network",
        "state",
        "burn_in",
        "select_action",
        "action_state",
        "is_training",
        "policy_type",
        "policy_type",
        "atari_processor",
        "process_state_for_memory",
        "state",
        "env",
        "step",
        "action",
        "atari_processor",
        "process_state_for_network",
        "state",
        "np",
        "dstack",
        "action_state",
        "processed_next_state",
        "action_next_state",
        "atari_processor",
        "process_reward",
        "reward",
        "memory",
        "append",
        "processed_state",
        "action",
        "processed_reward",
        "done",
        "Sample",
        "action_state",
        "action",
        "processed_reward",
        "action_next_state",
        "done",
        "burn_in",
        "episode_frames",
        "episode_reward",
        "processed_reward",
        "episode_raw_reward",
        "reward",
        "episode_frames",
        "max_episode_length",
        "done",
        "atari_processor",
        "process_state_for_memory",
        "state",
        "memory",
        "append",
        "last_frame",
        "action",
        "done",
        "burn_in",
        "episode_target_value",
        "episode_frames",
        "t",
        "idx_episode",
        "episode_frames",
        "episode_reward",
        "episode_raw_reward",
        "episode_loss",
        "avg_target_value",
        "policy",
        "step",
        "memory",
        "current",
        "sys",
        "stdout",
        "flush",
        "save_scalar",
        "idx_episode",
        "episode_frames",
        "writer",
        "save_scalar",
        "idx_episode",
        "episode_reward",
        "writer",
        "save_scalar",
        "idx_episode",
        "episode_raw_reward",
        "writer",
        "save_scalar",
        "idx_episode",
        "episode_loss",
        "writer",
        "save_scalar",
        "idx_episode",
        "episode_reward",
        "episode_frames",
        "writer",
        "save_scalar",
        "idx_episode",
        "avg_target_value",
        "writer",
        "save_scalar",
        "idx_episode",
        "episode_loss",
        "episode_frames",
        "writer",
        "idx_episode",
        "t",
        "num_burn_in",
        "env",
        "reset",
        "atari_processor",
        "reset",
        "history_processor",
        "reset",
        "burn_in",
        "t",
        "train_freq",
        "update_policy",
        "current_sample",
        "episode_loss",
        "loss",
        "episode_target_value",
        "target_value",
        "t",
        "train_freq",
        "target_update_freq",
        "updateTarget",
        "targetOps",
        "sess",
        "t",
        "save_freq",
        "save_model",
        "idx_episode",
        "t",
        "eval_freq",
        "train_freq",
        "evaluate",
        "env",
        "eval_count",
        "max_episode_length",
        "save_scalar",
        "t",
        "episode_reward_mean",
        "writer",
        "save_scalar",
        "t",
        "episode_reward_std",
        "writer",
        "save_model",
        "idx_episode",
        "idx_episode",
        "output_path",
        "idx_episode",
        "saver",
        "save",
        "sess",
        "safe_path",
        "idx_episode",
        "safe_path",
        "env",
        "num_episodes",
        "eval_count",
        "max_episode_length",
        "monitor",
        "plt",
        "figure",
        "load_network",
        "q_network",
        "load_weights",
        "load_network_path",
        "load_network_path",
        "monitor",
        "wrappers",
        "Monitor",
        "env",
        "output_path_videos",
        "video_callable",
        "x",
        "resume",
        "env",
        "reset",
        "np",
        "zeros",
        "num_episodes",
        "idx_episode",
        "num_episodes",
        "t",
        "history_processor",
        "process_state_for_network",
        "atari_processor",
        "process_state_for_network",
        "state",
        "select_action",
        "action_state",
        "is_training",
        "policy_type",
        "np",
        "random",
        "random",
        "sess",
        "run",
        "q_network",
        "alpha_list",
        "feed_dict",
        "q_network",
        "imageIn",
        "action_state",
        "q_network",
        "batch_size",
        "alpha_idx",
        "len",
        "alpha_list",
        "plt",
        "subplot",
        "len",
        "alpha_list",
        "alpha_idx",
        "action_state",
        "alpha_idx",
        "plt",
        "imshow",
        "img",
        "cmap",
        "alpha_list",
        "alpha_idx",
        "reshape",
        "skimage",
        "transform",
        "pyramid_expand",
        "alp_curr",
        "upscale",
        "sigma",
        "plt",
        "imshow",
        "alp_img",
        "alpha",
        "plt",
        "axis",
        "plt",
        "savefig",
        "output_path_images",
        "eval_count",
        "episode_frames",
        "env",
        "step",
        "action",
        "episode_frames",
        "episode_reward",
        "idx_episode",
        "reward",
        "episode_frames",
        "max_episode_length",
        "done",
        "t",
        "idx_episode",
        "episode_frames",
        "episode_reward",
        "idx_episode",
        "eval_count",
        "eval_count",
        "save_scalar",
        "eval_count",
        "episode_reward",
        "idx_episode",
        "writer",
        "save_scalar",
        "eval_count",
        "episode_frames",
        "writer",
        "sys",
        "stdout",
        "flush",
        "env",
        "reset",
        "idx_episode",
        "atari_processor",
        "reset",
        "history_processor",
        "reset",
        "np",
        "mean",
        "episode_reward",
        "np",
        "std",
        "episode_reward",
        "num_episodes",
        "reward_mean",
        "reward_std",
        "sys",
        "stdout",
        "flush",
        "reward_mean",
        "reward_std",
        "eval_count"
    ],
    "literals": [
        "'image_reshape_recoverd'",
        "'VALID'",
        "'_conv1'",
        "'VALID'",
        "'_conv2'",
        "'VALID'",
        "'_conv3'",
        "'_rnn'",
        "\"======\"",
        "\"==========\"",
        "'train'",
        "'conv_features'",
        "\"========== context \"",
        "\"========== h \"",
        "'_lstmCell'",
        "\"========== h \"",
        "\"duel\"",
        "'_fc_advantage_hidden'",
        "'_fc_advantage'",
        "'_fc_value_hidden'",
        "'_fc_value'",
        "'train'",
        "'train'",
        "'batch_norm'",
        "'_initial_lstm'",
        "'w_h'",
        "'b_h'",
        "'w_c'",
        "'b_c'",
        "'_project_features'",
        "'w'",
        "'_attention_layer'",
        "'w'",
        "'b'",
        "'w_att'",
        "'context'",
        "'_selector'",
        "'w'",
        "'b'",
        "'beta'",
        "'selected_context'",
        "'/videos/'",
        "'/images/'",
        "\"QNet\"",
        "\"TargetNet\"",
        "\">>>> Net mode: %s, Using double dqn: %s\"",
        "\">>>> Target fixing: %s, Experience replay: %s\"",
        "'policy_type'",
        "'UniformRandomPolicy'",
        "'----- writer flushed.'",
        "\"Training starts.\"",
        "\"UniformRandomPolicy\"",
        "\"LinearDecayGreedyEpsilonPolicy\"",
        "\">>> Training: time %d, episode %d, length %d, reward %.0f, raw_reward %.0f, loss %.4f, target value %.4f, policy step %d, memory cap %d\"",
        "'train/episode_frames'",
        "'train/episode_reward'",
        "'train/episode_raw_reward'",
        "'train/episode_loss'",
        "'train_avg/avg_reward'",
        "'train_avg/avg_target_value'",
        "'train_avg/avg_loss'",
        "\"----- Synced.\"",
        "'eval/eval_episode_reward_mean'",
        "'eval/eval_episode_reward_std'",
        "\"/qnet\"",
        "\".cptk\"",
        "\"Network at\"",
        "\"saved to:\"",
        "\"Evaluation starts.\"",
        "\"Load network from:\"",
        "'GreedyEpsilonPolicy'",
        "'gray'",
        "'off'",
        "'%sattention_ep%d-frame%d.png'",
        "\"Eval: time %d, episode %d, length %d, reward %.0f. @eval_count %s\"",
        "'eval/eval_episode_raw_reward'",
        "'eval/eval_episode_raw_length'",
        "\"Evaluation summury: num_episodes [%d], reward_mean [%.3f], reward_std [%.3f]\""
    ],
    "variables": [
        "imageIn",
        "image_permute",
        "image_reshape",
        "image_reshape_recoverd",
        "summary_merged",
        "conv1",
        "conv2",
        "conv3",
        "batch_size",
        "conv4",
        "convFlat",
        "state_in",
        "rnn_last_output",
        "rnn",
        "L",
        "D",
        "T",
        "H",
        "selector",
        "weight_initializer",
        "const_initializer",
        "features",
        "features_list",
        "alpha_list",
        "lstm_cell",
        "c",
        "h",
        "features",
        "features",
        "features_proj",
        "context",
        "alpha",
        "context",
        "beta",
        "_",
        "rnn",
        "ad_hidden",
        "Advantage",
        "value_hidden",
        "Value",
        "Qout",
        "Qout",
        "predict",
        "targetQ",
        "actions",
        "actions_onehot",
        "Q",
        "td_error",
        "loss",
        "trainer",
        "updateModel",
        "features_mean",
        "w_h",
        "b_h",
        "h",
        "w_c",
        "b_c",
        "c",
        "w",
        "features_flat",
        "features_proj",
        "features_proj",
        "w",
        "b",
        "w_att",
        "h_att",
        "out_att",
        "alpha",
        "context",
        "w",
        "b",
        "beta",
        "context",
        "summary",
        "summary_value",
        "summary_value",
        "simple_value",
        "summary_value",
        "tag",
        "num_actions",
        "input_shape",
        "history_processor",
        "atari_processor",
        "memory",
        "policy",
        "gamma",
        "target_update_freq",
        "num_burn_in",
        "train_freq",
        "batch_size",
        "learning_rate",
        "frame_width",
        "frame_height",
        "num_frames",
        "output_path",
        "output_path_videos",
        "output_path_images",
        "save_freq",
        "load_network",
        "load_network_path",
        "enable_ddqn",
        "net_mode",
        "h_size",
        "tau",
        "cell",
        "cellT",
        "q_network",
        "target_network",
        "eval_freq",
        "no_experience",
        "no_target",
        "init",
        "saver",
        "trainables",
        "targetOps",
        "config",
        "allow_growth",
        "config",
        "allow_soft_placement",
        "sess",
        "writer",
        "state",
        "Qout",
        "q_values",
        "batch_size",
        "states",
        "next_states",
        "rewards",
        "mask",
        "action_mask",
        "action_mask",
        "samples",
        "samples",
        "states",
        "actions",
        "next_states",
        "mask",
        "rewards",
        "next_qa_value",
        "next_qa_value",
        "qa_value",
        "max_actions",
        "next_qa_value",
        "next_qa_value",
        "target",
        "loss",
        "_",
        "rnn",
        "merged",
        "is_training",
        "eval_count",
        "state",
        "burn_in",
        "idx_episode",
        "episode_loss",
        "episode_frames",
        "episode_reward",
        "episode_raw_reward",
        "episode_target_value",
        "action_state",
        "policy_type",
        "action",
        "processed_state",
        "state",
        "reward",
        "done",
        "info",
        "processed_next_state",
        "action_next_state",
        "action_next_state",
        "processed_reward",
        "current_sample",
        "done",
        "last_frame",
        "avg_target_value",
        "episode_frames",
        "episode_reward",
        "episode_raw_reward",
        "episode_loss",
        "episode_target_value",
        "burn_in",
        "state",
        "loss",
        "target_value",
        "episode_reward_mean",
        "episode_reward_std",
        "eval_count",
        "safe_path",
        "is_training",
        "env",
        "state",
        "idx_episode",
        "episode_frames",
        "episode_reward",
        "t",
        "action_state",
        "action",
        "alpha_list",
        "img",
        "alp_curr",
        "alp_img",
        "state",
        "reward",
        "done",
        "info",
        "done",
        "state",
        "episode_frames",
        "reward_mean",
        "reward_std"
    ],
    "comments": [
        "from keras.optimizers import (Adam, RMSprop)",
        "import keras",
        "from keras.layers import (Activation, Convolution2D, Dense, Flatten, Input,",
        "Permute, merge, Lambda, Reshape, TimeDistributed, LSTM)",
        "from keras.models import Model",
        "from keras import backend as K",
        "The network recieves a frame from the game, flattened into an array.",
        "It then resizes it and processes it through four convolutional layers.",
        "self.imageIn = tf.reshape(self.scalarInput,shape=[-1,84,84,1])",
        "(None, 10, 7, 7, 64)",
        "We take the output from the final convolutional layer and send it to a recurrent layer.",
        "The input must be reshaped into [batch x trace x units] for rnn processing,",
        "and then returned to [batch x units] when sent through the upper levles.",
        "10 [None, 1, 49, 64]",
        "The output from the recurrent player is then split into separate Value and Advantage streams",
        "Then combine them together to get our final Q-values.",
        "Below we obtain the loss by taking the sum of squares difference between the target and prediction Q values.",
        "(N, L, D)",
        "(N, L)",
        "(N, D)",
        "(N, 1)",
        "We define the cells for the primary and target q-networks",
        "initialize target network",
        "return self.q_network.predict_on_batch(state)",
        "print state.shape",
        "Qout = self.sess.run(self.q_network.rnn_outputs,\\",
        "feed_dict={self.q_network.imageIn: state, self.q_network.batch_size:1})",
        "print Qout.shape",
        "print Qout.shape",
        "linear decay greedy epsilon policy",
        "action_mask = np.zeros((batch_size, self.num_actions))",
        "action_mask[range(batch_size), actions] = 1.0",
        "next_qa_value = self.target_network.predict_on_batch(next_states)",
        "qa_value = self.q_network.predict_on_batch(next_states)",
        "print rewards.shape, mask.shape, next_qa_value.shape, batch_size",
        "print rnn[:5]",
        "return self.final_model.train_on_batch([states, action_mask], target), np.mean(target)",
        "adding last frame only to save last state",
        "action, reward, done doesn't matter here",
        "update freq is based on train_freq",
        "self.target_network.set_weights(self.q_network.get_weights())",
        "self.q_network.save_weights(safe_path)",
        "print alpha_list, len(alpha_list), alpha_list[0].shape #10 (1, 49)",
        "plt.show()",
        "plt.canvas.draw()"
    ],
    "docstrings": [
        "\"\"\"Main DQN agent.\"\"\"",
        "\"\"\"Save a scalar value to tensorboard.\n      Parameters\n      ----------\n      step: int\n        Training step (sets the position on x-axis of tensorboard graph.\n      name: str\n        Name of variable. Will be the name of the graph in tensorboard.\n      value: float\n        The value of the variable at this step.\n      writer: tf.FileWriter\n        The tensorboard FileWriter instance.\n      \"\"\"",
        "\"\"\"Class implementing DQN.\n\n    This is a basic outline of the functions/parameters you will need\n    in order to implement the DQNAgnet. This is just to get you\n    started. You may need to tweak the parameters, add new ones, etc.\n\n    Feel free to change the functions and funciton parameters that the class \n    provides.\n\n    We have provided docstrings to go along with our suggested API.\n\n    Parameters\n    ----------\n    q_network: keras.models.Model\n      Your Q-network model.\n    preprocessor: deeprl_hw2.core.Preprocessor\n      The preprocessor class. See the associated classes for more\n      details.\n    memory: deeprl_hw2.core.Memory\n      Your replay memory.\n    gamma: float\n      Discount factor.\n    target_update_freq: float\n      Frequency to update the target network. You can either provide a\n      number representing a soft target update (see utils.py) or a\n      hard target update (see utils.py and Atari paper.)\n    num_burn_in: int\n      Before you begin updating the Q-network your replay memory has\n      to be filled up with some number of samples. This number says\n      how many.\n    train_freq: int\n      How often you actually update your Q-Network. Sometimes\n      stability is improved if you collect a couple samples for your\n      replay memory, for every Q-network update that you run.\n    batch_size: int\n      How many samples in each minibatch.\n    \"\"\"",
        "\"\"\"Given a state (or batch of states) calculate the Q-values.\n\n        Basically run your network on these states.\n\n        Return\n        ------\n        Q-values for the state(s)\n        \"\"\"",
        "\"\"\"Select the action based on the current state.\n\n        You will probably want to vary your behavior here based on\n        which stage of training your in. For example, if you're still\n        collecting random samples you might want to use a\n        UniformRandomPolicy.\n\n        If you're testing, you might want to use a GreedyEpsilonPolicy\n        with a low epsilon.\n\n        If you're training, you might want to use the\n        LinearDecayGreedyEpsilonPolicy.\n\n        This would also be a good place to call\n        process_state_for_network in your preprocessor.\n\n        Returns\n        --------\n        selected action\n        \"\"\"",
        "\"\"\"Update your policy.\n\n        Behavior may differ based on what stage of training your\n        in. If you're in training mode then you should check if you\n        should update your network parameters based on the current\n        step and the value you set for train_freq.\n\n        Inside, you'll want to sample a minibatch, calculate the\n        target values, update your network, and then update your\n        target values.\n\n        You might want to return the loss and other metrics as an\n        output. They can help you monitor how training is going.\n        \"\"\"",
        "\"\"\"Fit your model to the provided environment.\n\n        Its a good idea to print out things like loss, average reward,\n        Q-values, etc to see if your agent is actually improving.\n\n        You should probably also periodically save your network\n        weights and any other useful info.\n\n        This is where you should sample actions from your network,\n        collect experience samples and add them to your replay memory,\n        and update your network parameters.\n\n        Parameters\n        ----------\n        env: gym.Env\n          This is your Atari environment. You should wrap the\n          environment using the wrap_atari_env function in the\n          utils.py\n        num_iterations: int\n          How many samples/updates to perform.\n        max_episode_length: int\n          How long a single episode should last before the agent\n          resets. Can help exploration.\n        \"\"\"",
        "\"\"\"Test your agent with a provided environment.\n        \n        You shouldn't update your network parameters here. Also if you\n        have any layers that vary in behavior between train/test time\n        (such as dropout or batch norm), you should set them to test.\n\n        Basically run your policy on the environment and collect stats\n        like cumulative reward, average episode length, etc.\n\n        You can also call the render function here if you want to\n        visually inspect your policy.\n        \"\"\""
    ],
    "functions": [
        "_batch_norm",
        "_get_initial_lstm",
        "_project_features",
        "_attention_layer",
        "_selector",
        "save_scalar",
        "calc_q_values",
        "select_action",
        "update_policy",
        "fit",
        "save_model",
        "evaluate"
    ],
    "classes": [
        "Qnetwork",
        "DQNAgent"
    ]
}