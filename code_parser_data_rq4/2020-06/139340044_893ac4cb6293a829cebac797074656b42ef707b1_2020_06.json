{
    "identifiers": [
        "password",
        "salt",
        "iterations",
        "length",
        "bits",
        "plaintext",
        "iv",
        "key",
        "ciphertext",
        "iv",
        "key",
        "message",
        "key",
        "text",
        "text",
        "password",
        "salt",
        "iterations",
        "length",
        "plaintext",
        "nonce",
        "key",
        "assocData",
        "ciphertext",
        "nonce",
        "key",
        "assocData",
        "text",
        "base64String",
        "a",
        "b"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Interface that clients have to implement to use snjs",
        "* Derives a key from a password and salt using PBKDF2 via WebCrypto.\n     * @param password - utf8 string\n     * @param salt - utf8 string\n     * @param iterations\n     * @param length - In bits\n     * @returns Hex string",
        "* Generates a random key in hex format\n     * @param bits - Length of key in bits\n     * @returns A string key in hex format",
        "* Encrypts a string using AES-CBC via WebCrypto.\n     * @param plaintext\n     * @param iv - In hex format\n     * @param key - In hex format\n     * @returns Ciphertext in Base64 format.",
        "* Decrypts a string using AES-CBC via WebCrypto.\n     * @param ciphertext - Base64 format\n     * @param iv - In hex format\n     * @param key - In hex format\n     * @returns Plain utf8 string or null if decryption fails",
        "* Runs HMAC with SHA-256 on a message with key.\n     * @param message - Plain utf8 string\n     * @param key - In hex format\n     * @returns Hex string or null if computation fails",
        "* @param text - Plain utf8 string\n     * @returns Hex string",
        "* Use only for legacy applications.\n     * @param text - Plain utf8 string\n     * @returns Hex string",
        "* Derives a key from a password and salt using\n     * argon2id (crypto_pwhash_ALG_DEFAULT).\n     * @param password - Plain text string\n     * @param salt - Salt in hex format\n     * @param iterations - The algorithm's opslimit (recommended min 2)\n     * @param bytes - The algorithm's memory limit (memlimit) (recommended min 67108864)\n     * @param length - The output key length\n     * @returns Derived key in hex format",
        "* Encrypt a message (and associated data) with XChaCha20-Poly1305.\n     * @param plaintext\n     * @param nonce - In hex format\n     * @param key - In hex format\n     * @param assocData\n     * @returns Base64 ciphertext string",
        "* Decrypt a message (and associated data) with XChaCha20-Poly1305\n     * @param ciphertext\n     * @param nonce - In hex format\n     * @param key - In hex format\n     * @param assocData\n     * @returns Plain utf8 string or null if decryption fails",
        "* Converts a plain string into base64\n     * @param text - A plain string\n     * @returns  A base64 encoded string",
        "* Converts a base64 string into a plain string\n     * @param base64String - A base64 encoded string\n     * @returns A plain string",
        "* Generates a UUID string syncronously.",
        "* Generates a UUID string asyncronously.\n     * Can be overriden by native platforms to provide async implementation",
        "* Constant-time string comparison\n     * @param a\n     * @param b"
    ],
    "functions": [],
    "classes": []
}