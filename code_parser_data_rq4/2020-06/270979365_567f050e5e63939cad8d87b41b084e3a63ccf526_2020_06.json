{
    "identifiers": [
        "print_function",
        "ortools",
        "constraint_solver",
        "routing_enums_pb2",
        "ortools",
        "constraint_solver",
        "pywrapcp",
        "matplotlib",
        "pyplot",
        "plt",
        "math",
        "file_with_routes",
        "open",
        "file_with_routes",
        "ins",
        "line",
        "ins",
        "line",
        "split",
        "line",
        "split",
        "line",
        "split",
        "line",
        "split",
        "line",
        "split",
        "line",
        "split",
        "len",
        "line",
        "split",
        "line",
        "split",
        "split",
        "isdigit",
        "line",
        "split",
        "split",
        "demand_section",
        "line",
        "split",
        "demand",
        "append",
        "point_section",
        "line",
        "split",
        "line",
        "split",
        "distance_matrix",
        "append",
        "var1",
        "var2",
        "num_of_vehicles",
        "round",
        "round",
        "sum",
        "demand",
        "round",
        "vehicle_capacity",
        "i",
        "len",
        "demand",
        "j",
        "len",
        "demand",
        "math",
        "sqrt",
        "distance_matrix",
        "j",
        "distance_matrix",
        "i",
        "distance_matrix",
        "j",
        "distance_matrix",
        "i",
        "round",
        "distance",
        "dist_temp",
        "append",
        "distance",
        "dist",
        "append",
        "dist_temp",
        "dist",
        "demand",
        "distance_matrix",
        "vehicle_capacity",
        "num_of_vehicles",
        "dist",
        "demand",
        "distance_matrix",
        "vehicle_capacity",
        "num_of_vehicles",
        "solver",
        "local_search",
        "time_limit",
        "dist",
        "demand",
        "vehicle_capacity",
        "num_of_vehicles",
        "dist",
        "num_of_vehicles",
        "demand",
        "num_of_vehicles",
        "vehicle_capacity",
        "data",
        "data",
        "manager",
        "routing",
        "assignment",
        "vehicle_id",
        "data",
        "routing",
        "Start",
        "vehicle_id",
        "format",
        "vehicle_id",
        "routing",
        "IsEnd",
        "index",
        "manager",
        "IndexToNode",
        "index",
        "route_load",
        "data",
        "node_index",
        "plan_output",
        "format",
        "node_index",
        "route_load",
        "index",
        "assignment",
        "Value",
        "routing",
        "NextVar",
        "index",
        "route_distance",
        "routing",
        "GetArcCostForVehicle",
        "previous_index",
        "index",
        "vehicle_id",
        "temp",
        "append",
        "node_index",
        "temp",
        "append",
        "plan_output",
        "format",
        "manager",
        "IndexToNode",
        "index",
        "route_load",
        "plan_output",
        "format",
        "route_distance",
        "plan_output",
        "format",
        "route_load",
        "plan_output",
        "total_distance",
        "route_distance",
        "total_load",
        "route_load",
        "routes",
        "append",
        "temp",
        "format",
        "total_distance",
        "format",
        "total_load",
        "routes",
        "solver",
        "local_search",
        "time_limit",
        "create_data_model",
        "dist",
        "demand",
        "vehicle_capacity",
        "num_of_vehicles",
        "pywrapcp",
        "RoutingIndexManager",
        "len",
        "data",
        "data",
        "data",
        "pywrapcp",
        "RoutingModel",
        "manager",
        "from_index",
        "to_index",
        "manager",
        "IndexToNode",
        "from_index",
        "manager",
        "IndexToNode",
        "to_index",
        "data",
        "from_node",
        "to_node",
        "routing",
        "RegisterTransitCallback",
        "distance_callback",
        "routing",
        "SetArcCostEvaluatorOfAllVehicles",
        "transit_callback_index",
        "from_index",
        "manager",
        "IndexToNode",
        "from_index",
        "data",
        "from_node",
        "routing",
        "RegisterUnaryTransitCallback",
        "demand_callback",
        "routing",
        "AddDimensionWithVehicleCapacity",
        "demand_callback_index",
        "data",
        "local_search",
        "pywrapcp",
        "DefaultRoutingSearchParameters",
        "routing_enums_pb2",
        "LocalSearchMetaheuristic",
        "GREEDY_DESCENT",
        "local_search",
        "pywrapcp",
        "DefaultRoutingSearchParameters",
        "routing_enums_pb2",
        "LocalSearchMetaheuristic",
        "GUIDED_LOCAL_SEARCH",
        "search_parameters",
        "time_limit",
        "time_limit",
        "local_search",
        "pywrapcp",
        "DefaultRoutingSearchParameters",
        "routing_enums_pb2",
        "LocalSearchMetaheuristic",
        "TABU_SEARCH",
        "search_parameters",
        "time_limit",
        "time_limit",
        "solver",
        "routing_enums_pb2",
        "FirstSolutionStrategy",
        "PATH_CHEAPEST_ARC",
        "solver",
        "routing_enums_pb2",
        "FirstSolutionStrategy",
        "CHRISTOFIDES",
        "routing",
        "SolveWithParameters",
        "search_parameters",
        "assignment",
        "print_solution",
        "data",
        "manager",
        "routing",
        "assignment",
        "j",
        "num_of_vehicles",
        "i",
        "len",
        "routes",
        "j",
        "x",
        "append",
        "distance_matrix",
        "routes",
        "j",
        "i",
        "y",
        "append",
        "distance_matrix",
        "routes",
        "j",
        "i",
        "plt",
        "plot",
        "distance_matrix",
        "routes",
        "j",
        "i",
        "distance_matrix",
        "routes",
        "j",
        "i",
        "marker",
        "plt",
        "ion",
        "plt",
        "plot",
        "x",
        "y",
        "plt",
        "plot",
        "distance_matrix",
        "distance_matrix",
        "marker",
        "color",
        "plt",
        "show",
        "main",
        "solver",
        "local_search",
        "time_limit",
        "input",
        "file_to_read",
        "p",
        "input",
        "solver",
        "solver",
        "solver",
        "solver",
        "solver",
        "solver",
        "p",
        "input",
        "local_search_strategy",
        "local_search_strategy",
        "local_search_strategy",
        "local_search_strategy",
        "local_search_strategy",
        "local_search_strategy",
        "local_search_strategy",
        "local_search_strategy",
        "local_search_strategy",
        "p",
        "input",
        "time_limit",
        "isdigit",
        "time_limit",
        "file_to_read",
        "chosed_solver",
        "chosed_local_search_strategy",
        "time_limit",
        "get_input_from_user",
        "readFile",
        "file_to_read",
        "algorithm",
        "dist",
        "demand",
        "distance_matrix",
        "vehicle_capacity",
        "num_of_vehicles",
        "solver",
        "local_search",
        "time_limit",
        "main_program",
        "input"
    ],
    "literals": [
        "\"r\"",
        "\"CAPACITY\"",
        "'NODE_COORD_SECTION'",
        "''",
        "'DEMAND_SECTION'",
        "''",
        "'DEPOT_SECTION'",
        "'COMMENT'",
        "','",
        "','",
        "'distance_matrix'",
        "'num_vehicles'",
        "'depot'",
        "'demands'",
        "'vehicle_capacities'",
        "'num_vehicles'",
        "'Route for vehicle {}:\\n'",
        "'demands'",
        "' {0} Load({1}) -> '",
        "' {0} Load({1})\\n'",
        "'Distance of the route: {}m\\n'",
        "'Load of the route: {}\\n'",
        "'Total distance of all routes: {}m'",
        "'Total load of all routes: {}'",
        "'distance_matrix'",
        "'num_vehicles'",
        "'depot'",
        "'distance_matrix'",
        "'demands'",
        "'vehicle_capacities'",
        "'Capacity'",
        "\"GREEDY_DESCENT\"",
        "\"GUIDED_LOCAL_SEARCH\"",
        "\"TABU_SEARCH\"",
        "\"PATH_CHEAPEST_ARC\"",
        "\"CHRISTOFIDES\"",
        "\".\"",
        "\"8\"",
        "'black'",
        "'__main__'",
        "'Write file name to read: E-n22-k4, E-n23-k3, P-n16-k8, X-n110-k13, X-n115-k10, X-n120-k6, Golden_1, Golden_2\\n'",
        "\".txt\"",
        "\"Chose algorithm, write shortcut: PC - path cheapest, C - Christofides algorithm\\n\"",
        "\"PC\"",
        "\"pc\"",
        "'Pc'",
        "\"pC\"",
        "\"PATH_CHEAPEST_ARC\"",
        "\"C\"",
        "\"c\"",
        "\"CHRISTOFIDES\"",
        "\"Wrong format\"",
        "'Chose metaheuristics, write shorcut: GD - greedy descent ,GLS - guided local search, T - tabu search \\n'",
        "\"GD\"",
        "\"gd\"",
        "\"Gd\"",
        "\"gD\"",
        "\"GREEDY_DESCENT\"",
        "\"gls\"",
        "\"GLS\"",
        "\"Gls\"",
        "\"GUIDED_LOCAL_SEARCH\"",
        "\"t\"",
        "\"T\"",
        "\"TABU_SEARCH\"",
        "\"Wrong format\"",
        "\"Time limit for finding solution in seconds:  \"",
        "\"Wrong format\"",
        "\"Calculaiting ...\""
    ],
    "variables": [
        "point_section",
        "demand_section",
        "distance_matrix",
        "demand",
        "dist",
        "num_of_vehicles",
        "vehicle_capacity",
        "vehicle_capacity",
        "point_section",
        "point_section",
        "demand_section",
        "demand_section",
        "num_of_vehicles",
        "num_of_vehicles",
        "num_of_vehicles",
        "var1",
        "var2",
        "num_of_vehicles",
        "dist_temp",
        "distance",
        "distance",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "total_distance",
        "total_load",
        "routes",
        "index",
        "plan_output",
        "route_distance",
        "route_load",
        "temp",
        "node_index",
        "previous_index",
        "index",
        "data",
        "manager",
        "routing",
        "from_node",
        "to_node",
        "transit_callback_index",
        "from_node",
        "demand_callback_index",
        "search_parameters",
        "search_parameters",
        "local_search_metaheuristic",
        "search_parameters",
        "search_parameters",
        "local_search_metaheuristic",
        "seconds",
        "search_parameters",
        "log_search",
        "search_parameters",
        "search_parameters",
        "local_search_metaheuristic",
        "seconds",
        "search_parameters",
        "log_search",
        "search_parameters",
        "first_solution_strategy",
        "search_parameters",
        "first_solution_strategy",
        "assignment",
        "routes",
        "x",
        "y",
        "x",
        "y",
        "file_to_read",
        "file_to_read",
        "p",
        "solver",
        "chosed_solver",
        "p",
        "chosed_solver",
        "p",
        "p",
        "p",
        "local_search_strategy",
        "chosed_local_search_strategy",
        "p",
        "chosed_local_search_strategy",
        "p",
        "chosed_local_search_strategy",
        "p",
        "p",
        "p",
        "time_limit",
        "time_limit",
        "p",
        "file_to_read",
        "solver",
        "local_search",
        "time_limit",
        "dist",
        "demand",
        "distance_matrix",
        "vehicle_capacity",
        "num_of_vehicles",
        "r"
    ],
    "comments": [
        "Instantiate the data problem.",
        "Create the routing index manager.",
        "Create Routing Model.",
        "Create and register a transit callback.",
        "Convert from routing variable Index to distance matrix NodeIndex.",
        "Define cost of each arc.",
        "Add Capacity constraint.",
        "Convert from routing variable Index to demands NodeIndex.",
        "null capacity slack",
        "vehicle maximum capacities",
        "start cumul to zero",
        "Setting first solution heuristic.",
        "Solve the problem.",
        "Print solution on console."
    ],
    "docstrings": [
        "\"\"\"Stores the data for the problem.\"\"\"",
        "\"\"\"Prints assignment on console.\"\"\"",
        "\"\"\"Solve the CVRP problem.\"\"\"",
        "\"\"\"Returns the distance between the two nodes.\"\"\"",
        "\"\"\"Returns the demand of the node.\"\"\""
    ],
    "functions": [
        "readFile",
        "algorithm",
        "create_data_model",
        "print_solution",
        "main",
        "distance_callback",
        "demand_callback",
        "get_input_from_user",
        "main_program"
    ],
    "classes": []
}