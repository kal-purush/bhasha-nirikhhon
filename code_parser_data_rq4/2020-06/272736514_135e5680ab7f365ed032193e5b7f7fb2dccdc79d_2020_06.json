{
    "identifiers": [
        "argparse",
        "sys",
        "time",
        "sleep",
        "time",
        "push_action",
        "utils",
        "get_branch_statuses",
        "get_required_actions",
        "get_required_checks",
        "get_workflow_run_jobs",
        "IN_MEMORY_CACHE",
        "remove_branch",
        "get_branch_statuses",
        "IN_MEMORY_CACHE",
        "get_required_actions",
        "required_statuses",
        "get_required_checks",
        "required_statuses",
        "IN_MEMORY_CACHE",
        "wait_interval",
        "IN_MEMORY_CACHE",
        "wait_timeout",
        "required_statuses",
        "len",
        "actions_required",
        "len",
        "_",
        "time",
        "time",
        "start_time",
        "IN_MEMORY_CACHE",
        "wait_timeout",
        "IN_MEMORY_CACHE",
        "wait_interval",
        "sleep",
        "IN_MEMORY_CACHE",
        "wait_interval",
        "job",
        "actions_required",
        "job",
        "_",
        "_",
        "actions_required",
        "_",
        "get",
        "_",
        "_",
        "actions_required",
        "run",
        "run_ids",
        "actions_required",
        "extend",
        "_",
        "_",
        "get_workflow_run_jobs",
        "run",
        "new_request",
        "_",
        "required_statuses",
        "_",
        "len",
        "actions_required",
        "unsuccessful_jobs",
        "RuntimeError",
        "unsuccessful_jobs",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "required",
        "parser",
        "add_argument",
        "help",
        "required",
        "parser",
        "add_argument",
        "help",
        "required",
        "parser",
        "add_argument",
        "help",
        "required",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "choices",
        "IN_MEMORY_CACHE",
        "parser",
        "parse_args",
        "IN_MEMORY_CACHE",
        "ACTION",
        "IN_MEMORY_CACHE",
        "temp_branch",
        "wait",
        "IN_MEMORY_CACHE",
        "ACTION",
        "IN_MEMORY_CACHE",
        "temp_branch",
        "remove_branch",
        "IN_MEMORY_CACHE",
        "temp_branch",
        "RuntimeError",
        "IN_MEMORY_CACHE",
        "ACTION",
        "RuntimeError",
        "exc",
        "repr",
        "exc",
        "IN_MEMORY_CACHE",
        "fail",
        "sys",
        "exit",
        "fail",
        "sys",
        "exit"
    ],
    "literals": [
        "\"args\"",
        "f\"\"\"\nConfiguration:\n    interval: {IN_MEMORY_CACHE['args'].wait_interval!s} seconds\n    timeout: {IN_MEMORY_CACHE['args'].wait_timeout!s} minutes\n    required status checks: {required_statuses}\n        of which are:\n            GitHub Action-related: {len(actions_required)}\n            Third-party checks: {len(_)}\n\"\"\"",
        "'args'",
        "'args'",
        "\"args\"",
        "f\"Waiting {IN_MEMORY_CACHE['args'].wait_interval} seconds ...\"",
        "'args'",
        "\"args\"",
        "\"status\"",
        "\"completed\"",
        "\"All required GitHub Actions jobs complete!\"",
        "\"conclusion\"",
        "\"\"",
        "\"success\"",
        "\"run_id\"",
        "\"name\"",
        "\"status\"",
        "\"completed\"",
        "f\"{len(actions_required)} required GitHub Actions jobs have not yet completed!\"",
        "f\"Required checks complete unsuccessfully:\\n{unsuccessful_jobs}\"",
        "\"--token\"",
        "\"GitHub Token from ${{ secrets.GITHUB_TOKEN }}\"",
        "\"--repo\"",
        "\"Repository name to push to\"",
        "\"--ref\"",
        "\"Target ref (branch/tag) for the push\"",
        "\"--temp-branch\"",
        "\"Temporary branch name for the action\"",
        "\"--wait-timeout\"",
        "\"Time (in minutes) of how long the wait_for_checks should run before timing out\"",
        "\"--wait-interval\"",
        "\"Time interval (in seconds) between each new check in the wait_for_checks run\"",
        "\"ACTION\"",
        "\"The action to do\"",
        "\"wait_for_checks\"",
        "\"remove_temp_branch\"",
        "\"args\"",
        "\"args\"",
        "\"wait_for_checks\"",
        "f\"Start waiting for status checks to finish for '{IN_MEMORY_CACHE['args'].temp_branch}'\"",
        "'args'",
        "\"args\"",
        "\"remove_temp_branch\"",
        "f\"Start removing temporary branch '{IN_MEMORY_CACHE['args'].temp_branch}'\"",
        "'args'",
        "\"args\"",
        "f\"Unknown ACTIONS {IN_MEMORY_CACHE['args'].ACTION!r}\"",
        "'args'"
    ],
    "variables": [
        "required_statuses",
        "actions_required",
        "_",
        "start_time",
        "unsuccessful_jobs",
        "run_ids",
        "actions_required",
        "parser",
        "IN_MEMORY_CACHE",
        "fail",
        "fail"
    ],
    "comments": [
        "TODO: Currently not implemented",
        "All jobs are completed",
        "Some jobs have not yet completed",
        "Handle inputs"
    ],
    "docstrings": [
        "\"\"\"Wait until status checks have finished\"\"\"",
        "\"\"\"Main function to run this module\"\"\"",
        "\"\"\"\n1) Get required statuses for branch (GitHub Actions jobs / third party status checks) from:\nhttps://api.github.com/repos/:owner/:repo/branches/:branch\nprotection -> required_status_checks -> contexts\n\n2) Get GitHub Actions runs for specific workflow:\nhttps://api.github.com/repos/:owner/:repo/actions/workflows/:workflow_id/runs\n:workflow_id can also be :workflow_file_name (e.g., 'main.yml')\nGet :run_id from this\n\n3) Get names and statuses of jobs in specific run:\nhttps://api.github.com/repos/:owner/:repo/actions/runs/:run_id/jobs\nMatch found required GitHub Actions runs found in 1)\n\n4) Wait and do 3) again until required GitHub Actions jobs have \"status\": \"completed\"\nIf \"conclusion\": \"success\" YAY\nIf \"conclusion\" != \"success\" FAIL this action\n\"\"\""
    ],
    "functions": [
        "wait",
        "main"
    ],
    "classes": []
}