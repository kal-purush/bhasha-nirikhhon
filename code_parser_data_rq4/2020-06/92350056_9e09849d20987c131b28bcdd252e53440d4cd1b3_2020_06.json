{
    "identifiers": [
        "_bootstrap",
        "abc",
        "metaclass",
        "abc",
        "ABCMeta",
        "spec",
        "fullname",
        "hasattr",
        "ImportError",
        "_bootstrap",
        "_load_module_shim",
        "fullname",
        "NotImplementedError"
    ],
    "literals": [
        "'exec_module'"
    ],
    "variables": [],
    "comments": [
        "By default, defer to default semantics for the new module.",
        "We don't define exec_module() here since that would break",
        "hasattr checks we do to support backward compatibility.",
        "The exception will cause ModuleType.__repr__ to ignore this method."
    ],
    "docstrings": [
        "\"\"\"Subset of importlib.abc used to reduce importlib.util imports.\"\"\"",
        "\"\"\"Abstract base class for import loaders.\"\"\"",
        "\"\"\"Return a module to initialize and into which to load.\n\n        This method should raise ImportError if anything prevents it\n        from creating a new module.  It may return None to indicate\n        that the spec should create the new module.\n        \"\"\"",
        "\"\"\"Return the loaded module.\n\n        The module must be added to sys.modules and have import-related\n        attributes set properly.  The fullname is a str.\n\n        ImportError is raised on failure.\n\n        This method is deprecated in favor of loader.exec_module(). If\n        exec_module() exists then it is used to provide a backwards-compatible\n        functionality for this method.\n\n        \"\"\"",
        "\"\"\"Return a module's repr.\n\n        Used by the module type when the method does not raise\n        NotImplementedError.\n\n        This method is deprecated.\n\n        \"\"\""
    ],
    "functions": [
        "create_module",
        "load_module",
        "module_repr"
    ],
    "classes": [
        "Loader"
    ]
}