{
    "identifiers": [
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "np",
        "np",
        "linspace",
        "np",
        "pi",
        "plt",
        "subplots",
        "ax",
        "plot",
        "x",
        "np",
        "sin",
        "x",
        "animated",
        "plt",
        "pause",
        "fig",
        "canvas",
        "copy_from_bbox",
        "fig",
        "bbox",
        "ax",
        "draw_artist",
        "ln",
        "fig",
        "canvas",
        "blit",
        "fig",
        "bbox",
        "j",
        "fig",
        "canvas",
        "restore_region",
        "bg",
        "ln",
        "set_ydata",
        "np",
        "sin",
        "x",
        "j",
        "np",
        "pi",
        "ax",
        "draw_artist",
        "ln",
        "fig",
        "canvas",
        "blit",
        "fig",
        "bbox",
        "canvas",
        "animated_artists",
        "canvas",
        "a",
        "animated_artists",
        "add_artist",
        "a",
        "canvas",
        "mpl_connect",
        "on_draw",
        "canvas",
        "canvas",
        "cv",
        "RuntimeError",
        "cv",
        "copy_from_bbox",
        "cv",
        "figure",
        "bbox",
        "_draw_animated",
        "art",
        "art",
        "figure",
        "canvas",
        "figure",
        "RuntimeError",
        "art",
        "set_animated",
        "_artists",
        "append",
        "art",
        "canvas",
        "figure",
        "a",
        "_artists",
        "fig",
        "draw_artist",
        "a",
        "canvas",
        "cv",
        "figure",
        "_bg",
        "on_draw",
        "cv",
        "restore_region",
        "_bg",
        "_draw_animated",
        "cv",
        "blit",
        "fig",
        "bbox",
        "cv",
        "flush_events",
        "plt",
        "subplots",
        "ax",
        "plot",
        "x",
        "np",
        "sin",
        "x",
        "animated",
        "ax",
        "annotate",
        "xycoords",
        "xytext",
        "textcoords",
        "ha",
        "va",
        "animated",
        "BlitManager",
        "fig",
        "canvas",
        "ln",
        "fr_number",
        "plt",
        "pause",
        "j",
        "ln",
        "set_ydata",
        "np",
        "sin",
        "x",
        "j",
        "np",
        "pi",
        "fr_number",
        "set_text",
        "format",
        "j",
        "j",
        "bm",
        "update"
    ],
    "literals": [
        "'draw_event'",
        "'0'",
        "'axes fraction'",
        "'offset points'",
        "'left'",
        "'top'",
        "'frame: {j}'"
    ],
    "variables": [
        "x",
        "fig",
        "ax",
        "ln",
        "bg",
        "canvas",
        "_bg",
        "_artists",
        "cid",
        "cv",
        "_bg",
        "fig",
        "cv",
        "fig",
        "fig",
        "ax",
        "ln",
        "fr_number",
        "bm"
    ],
    "comments": [
        "animated=True makes the artist be excluded from normal draw tree",
        "stop to admire our empty window axes and ensure it is drawn",
        "save a copy of the image sans animated artist",
        "draw the animated artist",
        "show the result to the screen",
        "put the un-changed background back",
        "update the artist.",
        "re-render the artist",
        "copy the result to the screen",
        "",
        "This example works and shows a simple animation, however because we are only",
        "grabbing the background once, if the size of dpi of the figure change, the",
        "background will be invalid and result in incorrect images.  There is also a",
        "global variable and a fair amount of boiler plate which suggests we should",
        "wrap this in a class.",
        "",
        "Class-based example",
        "-------------------",
        "",
        "We can use a class to encapsulate the boilerplate logic and state of",
        "restoring the background, drawing the artists, and then blitting the",
        "result to the screen.  Additionally, we can use the ``'draw_event'``",
        "callback to capture a new background whenever a full re-draw",
        "happens.",
        "grab the background on every draw",
        "paranoia in case we missed the draw event,",
        "restore the old background",
        "draw all of the animated artists",
        "update the screen",
        "let the GUI event loop process anything it has to do",
        "",
        "And now use our class.  This is a slightly more complicated example of the",
        "first case as we add a text frame counter as well.",
        "make a new figure",
        "add a line",
        "add a frame number",
        "update the artists",
        "tell the blitting manager to do it's thing"
    ],
    "docstrings": [
        "\"\"\"\n=================\nBlitting Tutorial\n=================\n\n'Blitting' is a `standard technique\n<https://en.wikipedia.org/wiki/Bit_blit>`__ in computer graphics that\nin the context of matplotlib can be used to (drastically) improve\nperformance of interactive figures.  It is used internally by the\n:mod:`~.animation` and :mod:`~.widgets` modules for this reason.\n\nThe source of the performance gains is simply not re-doing work we do\nnot have to.  For example, if the limits of an Axes have not changed,\nthen there is no reason we should re-draw all of the ticks and\ntick-labels (particularly because text is one of the more expensive\nthings to render).\n\nThe procedure to save our work is roughly:\n\n- draw the figure, but exclude an artists marked as 'animated'\n- save a copy of the Agg RBGA buffer\n\nIn the future, to update the 'animated' artists we\n\n- restore our copy of the RGBA buffer\n- redraw only the animated artists\n- show the resulting image on the screen\n\nthus saving us from having to re-draw everything which is _not_\nanimated.\n\nSimple Example\n--------------\n\nWe can implement this via methods on `.CanvasAgg` and setting\n``animated=True`` on our artist.\n\"\"\"",
        "\"\"\"\n        Parameters\n        ----------\n        canvas : CanvasAgg\n            The canvas to work with, this only works for sub-classes of the Agg\n            canvas which have the `~CanvasAgg.copy_from_bbox` and\n            `~CanvasAgg.restore_region` methods.\n\n        animated_artists : Optional[List[Artist]]\n            List of the artists to manage\n        \"\"\"",
        "\"\"\"Callback to register with 'draw_event'\n        \"\"\"",
        "\"\"\"Add a artist to be managed\n\n        Parameters\n        ----------\n        art : Artist\n            The artist to be added.  Will be set to 'animated' (just to be safe).\n            *art* must be in the figure associated with the canvas this class\n            is managing.\n        \"\"\"",
        "\"\"\"Draw all of the animated artists\n        \"\"\"",
        "\"\"\"Update the screen with animated artists\n        \"\"\""
    ],
    "functions": [
        "on_draw",
        "add_artist",
        "_draw_animated",
        "update"
    ],
    "classes": [
        "BlitManager"
    ]
}