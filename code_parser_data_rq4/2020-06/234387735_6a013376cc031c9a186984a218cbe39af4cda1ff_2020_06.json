{
    "identifiers": [
        "Collections",
        "Collections",
        "Generic",
        "Dungeonator",
        "UnityEngine",
        "ExpandTheGungeon",
        "ExpandUtilities",
        "ExpandTheGungeon",
        "ExpandObjects",
        "ExpandTheGungeon",
        "ExpandComponents",
        "CustomEngageDoer",
        "aiActor",
        "HasDonePlayerEnterCheck",
        "m_isFinished",
        "m_isFinished",
        "HandleChooseCorruptionEnemySource",
        "aiActor",
        "enabled",
        "behaviorSpeculator",
        "enabled",
        "aiActor",
        "ToggleRenderers",
        "specRigidbody",
        "enabled",
        "aiActor",
        "IsGone",
        "transform",
        "position",
        "GetAbsoluteRoom",
        "transform",
        "PositionVector2",
        "ToIntVector2",
        "currentRoom",
        "area",
        "basePosition",
        "aiShooter",
        "aiShooter",
        "ToggleGunAndHandRenderers",
        "ExpandGlitchedEnemies",
        "newEnemy",
        "glitchedEnemies",
        "SpawnRandomGlitchEnemy",
        "currentRoom",
        "cachedPosition",
        "newEnemy",
        "newEnemy",
        "GetComponent",
        "AIActor",
        "currentRoom",
        "DeregisterEnemy",
        "newEnemy",
        "GetComponent",
        "AIActor",
        "Destroy",
        "newEnemy",
        "glitchedEnemies",
        "newEnemy",
        "newEnemy",
        "GetComponent",
        "AIActor",
        "newEnemy",
        "GetComponent",
        "AIActor",
        "aiAnimator",
        "PlayDefaultAwakenedState",
        "newEnemy",
        "GetComponent",
        "AIActor",
        "aiActor",
        "State",
        "AIActor",
        "ActorState",
        "Normal",
        "newEnemy",
        "GetComponent",
        "AIActor",
        "aiActor",
        "invisibleUntilAwaken",
        "currentRoom",
        "DeregisterEnemy",
        "aiActor",
        "Destroy",
        "gameObject",
        "m_isFinished"
    ],
    "literals": [
        "\"ExpandCorruptedEnemyEngageDoer\""
    ],
    "variables": [
        "m_isFinished",
        "RoomHandler",
        "currentRoom",
        "IntVector2",
        "cachedPosition",
        "GameObject",
        "newEnemy",
        "ExpandGlitchedEnemies",
        "glitchedEnemies",
        "IsFinished"
    ],
    "comments": [
        "ValidTransformEnemies = new List<string> {\n                \"4d37ce3d666b4ddda8039929225b7ede\", // GrenadeGuyPrefab\n                \"f155fd2759764f4a9217db29dd21b7eb\", // IceCubeGuyPrefab\n                \"699cd24270af4cd183d671090d8323a1\", // KeybulletManPrefab\n                \"a446c626b56d4166915a4e29869737fd\", // ChanceBulletManPrefab\n                \"ffdc8680bdaa487f8f31995539f74265\", // SunburstPrefab\n                \"57255ed50ee24794b7aac1ac3cfb8a95\", // CultistPrefab\n                \"4db03291a12144d69fe940d5a01de376\", // GhostPrefab\n                \"05891b158cd542b1a5f3df30fb67a7ff\", // ArrowheadManPrefab\n                \"31a3ea0c54a745e182e22ea54844a82d\", // BulletRifleManPrefab\n                \"1a78cfb776f54641b832e92c44021cf2\", // AshBulletManPrefab\n                \"1bd8e49f93614e76b140077ff2e33f2b\", // AshBulletShotgunManPrefab\n                \"8bb5578fba374e8aae8e10b754e61d62\", // BulletCardinalPrefab\n                \"db35531e66ce41cbb81d507a34366dfe\", // BulletMachineGunManPrefab\n                \"5f3abc2d561b4b9c9e72b879c6f10c7e\", // BulletManDevilPrefab\n                \"e5cffcfabfae489da61062ea20539887\", // BulletManShroomedPrefab\n                \"95ec774b5a75467a9ab05fa230c0c143\", // BulletSkeletonHelmetPrefab\n                \"2752019b770f473193b08b4005dc781f\", // BulletShotgunManSawedOffPrefab\n                \"7f665bd7151347e298e4d366f8818284\", // BulletShotgunManMutantPrefab\n                \"d4a9836f8ab14f3fadd0f597438b1f1f\", // BulletManMutantPrefab\n                \"044a9f39712f456597b9762893fbc19c\", // BulletShotgrubManPrefab\n                \"88b6b6a93d4b4234a67844ef4728382c\", // BulletManBandanaPrefab\n                \"7b0b1b6d9ce7405b86b75ce648025dd6\", // FloatingEyePrefab\n                \"76bc43539fc24648bff4568c75c686d1\", // ChickenPrefab\n                \"1386da0f42fb4bcabc5be8feb16a7c38\", // SnakePrefab\n                \"c0ff3744760c4a2eb0bb52ac162056e6\", // AngryBookPrefab\n                \"6f22935656c54ccfb89fca30ad663a64\", // AngryBookBluePrefab\n                \"a400523e535f41ac80a43ff6b06dc0bf\", // AngryBookGreenPrefab\n                \"c50a862d19fc4d30baeba54795e8cb93\", // LeadWizardBluePrefab\n                \"ed37fa13e0fa4fcf8239643957c51293\", // BirdPrefab\n                \"72d2f44431da43b8a3bae7d8a114a46d\", // BulletSharkPrefab\n                \"b1540990a4f1480bbcb3bea70d67f60d\", // NecromancerPrefab\n                \"19b420dec96d4e9ea4aebc3398c0ba7a\", // BombsheePrefab\n                \"8b4a938cdbc64e64822e841e482ba3d2\", // JamromancerPrefab\n                \"1a4872dafdb34fd29fe8ac90bd2cea67\", // BullatGiantPrefab\n                \"0239c0680f9f467dbe5c4aab7dd1eca6\", // BlobulonPrefab\n                \"e61cab252cfb435db9172adc96ded75f\", // PoisbulonPrefab\n                \"98ca70157c364750a60f5e0084f9d3e2\", // PhaseSpiderPrefab\n                \"c4fba8def15e47b297865b18e36cbef8\", // WizardRedPrefab\n                \"206405acad4d4c33aac6717d184dc8d4\", // WizardYellowPrefab\n                \"9b2cf2949a894599917d4d391a0b7394\", // WizardBluePrefab\n                \"1cec0cdf383e42b19920787798353e46\", // PowderSkullBlackPrefab\n                \"f020570a42164e2699dcf57cac8a495c\", // BulletManKaliberPrefab\n                \"ddf12a4881eb43cfba04f36dd6377abb\", // BulletShotgunManCowboyPrefab\n                \"c5b11bfc065d417b9c4d03a5e385fe2c\", // BulletRifleProfessionalPrefab\n                \"70216cae6c1346309d86d4a0b4603045\", // BulletManEyepatchPrefab\n                \"6868795625bd46f3ae3e4377adce288b\", // ResourcefulRatBossPrefab\n                \"bb73eeeb9e584fbeaf35877ec176de28\", // ManfredsRivalPrefab\n                \"705e9081261446039e1ed9ff16905d04\", // CopPrefab\n                \"640238ba85dd4e94b3d6f68888e6ecb8\", // CopAndroidPrefab\n                \"3a077fa5872d462196bb9a3cb1af02a3\", // SuperSpaceTurtlePrefab\n                \"9216803e9c894002a4b931d7ea9c6bdf\", // CursedSuperSpaceTurtlePrefab\n                \"2976522ec560460c889d11bb54fbe758\", // PayDayShootPrefab\n                \"1ccdace06ebd42dc984d46cb1f0db6cf\", // R2G2Prefab\n                \"998807b57e454f00a63d67883fcf90d6\", // PortableTurretPrefab\n                \"e456b66ed3664a4cb590eab3a8ff3814\", // BabyGoodMimicPrefab\n                \"c07ef60ae32b404f99e294a6f9acba75\", // DogPrefab\n                \"ededff1deaf3430eaf8321d0c6b2bd80\", // WolfPrefab\n                \"c6c8e59d0f5d41969c74e802c9d67d07\", // SerJunkanPrefab\n                \"d375913a61d1465f8e4ffcf4894e4427\", // CaterpillarPrefab\n                \"e9fa6544000942a79ad05b6e4afb62db\", // RaccoonPrefab\n                \"6f9c28403d3248c188c391f5e40774c5\", // TurkeyPrefab\n                \"5695e8ffa77c4d099b4d9bd9536ff35e\", // BlankyPrefab\n                \"3f40178e10dc4094a1565cd4fdc4af56\", // BabyShelletonPrefab\n                \"d4dd2b2bbda64cc9bcec534b4e920518\", // Bullet King's Toadie Revenge\n                \"d1c9781fdac54d9e8498ed89210a0238\", // tiny blobulord\n                \"6ad1cafc268f4214a101dca7af61bc91\", // Rat\n                \"14ea47ff46b54bb4a98f91ffcffb656d\", // Rat Candle\n            };\n\n            ValidTransformSpecialEnemies = new List<string>() {\n                // \"0d3f7c641557426fbac8596b61c9fb45\", // LordOfTheJammedPrefab\n                \"ec6b674e0acd4553b47ee94493d66422\", // GatlingGullPrefab\n                \"ea40fcc863d34b0088f490f4e57f8913\", // BulletBrosSmileyPrefab\n                \"c00390483f394a849c36143eb878998f\", // BulletBrosShadesPrefab\n                \"ec8ea75b557d4e7b8ceeaacdf6f8238c\", // GunNutPrefab\n                \"383175a55879441d90933b5c4e60cf6f\", // GunNutSpectrePrefab\n                \"463d16121f884984abe759de38418e48\", // GunNutChainPrefab\n                \"9189f46c47564ed588b9108965f975c9\", // BossDoorMimicPrefab\n                \"6c43fddfd401456c916089fdd1c99b1c\", // HighPriestPrefab\n                \"4b992de5b4274168a8878ef9bf7ea36b\", // BeholsterPrefab\n                \"3f11bbbc439c4086a180eb0fb9990cb4\" // KillPillarsPrefab // Kill Pillars is technically a AIActorDummy object. The real AIActor objects are buried in the \"realPrefab\" field of said AiActorDummy component.\n            };\n\n\n            ValidSourceEnemies = new List<string>() {\n                \"4d37ce3d666b4ddda8039929225b7ede\", // GrenadeGuyPrefab\n                \"f155fd2759764f4a9217db29dd21b7eb\", // IceCubeGuyPrefab\n                \"4db03291a12144d69fe940d5a01de376\", // GhostPrefab\n                \"05891b158cd542b1a5f3df30fb67a7ff\", // ArrowheadManPrefab\n                \"31a3ea0c54a745e182e22ea54844a82d\", // BulletRifleManPrefab\n                \"1a78cfb776f54641b832e92c44021cf2\", // AshBulletManPrefab\n                \"1bd8e49f93614e76b140077ff2e33f2b\", // AshBulletShotgunManPrefab\n                \"8bb5578fba374e8aae8e10b754e61d62\", // BulletCardinalPrefab\n                \"db35531e66ce41cbb81d507a34366dfe\", // BulletMachineGunManPrefab\n                \"5f3abc2d561b4b9c9e72b879c6f10c7e\", // BulletManDevilPrefab\n                \"e5cffcfabfae489da61062ea20539887\", // BulletManShroomedPrefab\n                \"95ec774b5a75467a9ab05fa230c0c143\", // BulletSkeletonHelmetPrefab\n                \"2752019b770f473193b08b4005dc781f\", // BulletShotgunManSawedOffPrefab\n                \"7f665bd7151347e298e4d366f8818284\", // BulletShotgunManMutantPrefab\n                \"d4a9836f8ab14f3fadd0f597438b1f1f\", // BulletManMutantPrefab\n                \"044a9f39712f456597b9762893fbc19c\", // BulletShotgrubManPrefab\n                \"88b6b6a93d4b4234a67844ef4728382c\", // BulletManBandanaPrefab\n                \"7b0b1b6d9ce7405b86b75ce648025dd6\", // FloatingEyePrefab\n                \"c50a862d19fc4d30baeba54795e8cb93\", // LeadWizardBluePrefab\n                \"b1540990a4f1480bbcb3bea70d67f60d\", // NecromancerPrefab\n                \"8b4a938cdbc64e64822e841e482ba3d2\", // JamromancerPrefab\n                \"0239c0680f9f467dbe5c4aab7dd1eca6\", // BlobulonPrefab\n                \"f020570a42164e2699dcf57cac8a495c\", // BulletManKaliberPrefab\n                \"ddf12a4881eb43cfba04f36dd6377abb\", // BulletShotgunManCowboyPrefab\n                \"c5b11bfc065d417b9c4d03a5e385fe2c\", // BulletRifleProfessionalPrefab\n                \"70216cae6c1346309d86d4a0b4603045\" // BulletManEyepatchPrefab\n            };",
        "public List<string> ValidTransformEnemies;\n        public List<string> ValidTransformSpecialEnemies;\n        public List<string> ValidSourceEnemies;",
        "bool WillBeBigEnemy = UnityEngine.Random.value <= 0.2f;",
        "bool WillBeGlitchObject = UnityEngine.Random.value <= 0.2f;",
        "If something broke, destroy broken Enemy (if it exist) to prevent possible softlocks.",
        "string SelectedEnemyToBecome;\n\n            if (WillBeBigEnemy) {\n                SelectedEnemyToBecome = BraveUtility.RandomElement(ValidTransformSpecialEnemies);\n            } else {\n                SelectedEnemyToBecome = BraveUtility.RandomElement(ValidTransformEnemies);\n                ValidSourceEnemies.Remove(SelectedEnemyToBecome);\n            }\n            \n            string SelectedEnemyToUseAttacks = BraveUtility.RandomElement(ValidSourceEnemies);\n\n            ReplaceEnemyData(SelectedEnemyToBecome, SelectedEnemyToUseAttacks, WillBeBigEnemy, WillBeGlitchObject);\n\n            aiActor.enabled = true;\n            RegenerateCache();\n            behaviorSpeculator.enabled = true;\n            behaviorSpeculator.RegenerateCache();\n            // behaviorSpeculator.RefreshBehaviors();\n            aiActor.ToggleRenderers(true);\n            if (aiShooter) { aiShooter.ToggleGunAndHandRenderers(true, \"ExpandCorruptedEnemyEngageDoer\"); }\n            specRigidbody.enabled = true;\n            specRigidbody.RegenerateCache();\n            specRigidbody.RegenerateColliders = true;\n            // specRigidbody.Reinitialize();\n            healthHaver.RegenerateCache();\n            aiActor.IsGone = false;\n            aiAnimator.PlayDefaultAwakenedState();\n            aiActor.State = AIActor.ActorState.Normal;\n            aiActor.invisibleUntilAwaken = false;\n            // transform.position = cachedPosition;\n            // specRigidbody.Reinitialize();\n            return;",
        "private void ReplaceEnemyData(string EnemyToBecome, string EnemyToCloneAttacksFrom, bool isBigEnemy, bool isGlitchObject) {\n            AIActor aiActorToTransformInto;\n            AIActor aiActorToUseAttacksFrom = EnemyDatabase.GetOrLoadByGuid(EnemyToCloneAttacksFrom);\n\n            if (isBigEnemy && isGlitchObject) {\n                if (BraveUtility.RandomBool()) { isGlitchObject = false; } else { isBigEnemy = false; }\n            }\n            \n            if (isGlitchObject) {\n                aiActorToTransformInto = EnemyDatabase.GetOrLoadByGuid(\"01972dee89fc4404a5c408d50007dad5\");\n\n                HandleTransformIntoGlitchObject();\n\n                aiActorToTransformInto.healthHaver.SetHealthMaximum(100);\n            } else {\n\n                if (EnemyToBecome == \"3f11bbbc439c4086a180eb0fb9990cb4\") {\n                AIActorDummy KillPillarsDummy = EnemyDatabase.GetOrLoadByGuid(EnemyToBecome).gameObject.GetComponent<AIActorDummy>();\n                if (KillPillarsDummy) {\n                    aiActorToTransformInto = BraveUtility.RandomElement(KillPillarsDummy.realPrefab.GetComponent<BossStatuesController>().allStatues).gameObject.GetComponent<AIActor>();\n                    } else {\n                        aiActorToTransformInto = EnemyDatabase.GetOrLoadByGuid(\"ec8ea75b557d4e7b8ceeaacdf6f8238c\"); // gunnut\n                    }\n                } else {\n                    aiActorToTransformInto = EnemyDatabase.GetOrLoadByGuid(EnemyToBecome);\n                }\n\n                sprite.Collection = aiActorToUseAttacksFrom.sprite.Collection;\n                sprite.SetSprite(aiActorToTransformInto.sprite.spriteId);\n\n                if (aiActorToTransformInto.specRigidbody) { ExpandUtility.DuplicateComponent(specRigidbody, aiActorToTransformInto.specRigidbody); }\n\n                ExpandUtility.DuplicateComponent(spriteAnimator, aiActorToTransformInto.spriteAnimator);\n\n                ExpandUtility.DuplicateComponent(aiAnimator, aiActorToTransformInto.aiAnimator);\n\n                if (aiActorToTransformInto.healthHaver && !aiActorToTransformInto.healthHaver.IsBoss && !aiActorToTransformInto.gameObject.GetComponent<CompanionController>()) {\n                    healthHaver.SetHealthMaximum(aiActorToTransformInto.healthHaver.GetCurrentHealth());\n                } else if (aiActorToTransformInto.healthHaver && aiActorToTransformInto.gameObject.GetComponent<CompanionController>()) {\n                    healthHaver.SetHealthMaximum(100);\n                }\n\n                aiActor.EnemySwitchState = aiActorToTransformInto.EnemySwitchState;\n                aiActor.DiesOnCollison = aiActorToTransformInto.DiesOnCollison;\n\n                if (aiActorToTransformInto.GetComponent<SpawnShardsOnDeath>()) {\n                    SpawnShardsOnDeath shardSpawner = gameObject.AddComponent<SpawnShardsOnDeath>();\n                    ExpandUtility.DuplicateComponent(shardSpawner, aiActorToTransformInto.GetComponent<SpawnShardsOnDeath>());\n                }\n\n                if (aiActorToTransformInto.GetComponent<SpawnEnemyOnDeath>()) {\n                    SpawnEnemyOnDeath CachedSpawnEnemyOnDeath = gameObject.AddComponent<SpawnEnemyOnDeath>();\n                    ExpandUtility.DuplicateComponent(CachedSpawnEnemyOnDeath, aiActorToTransformInto.GetComponent<SpawnEnemyOnDeath>());\n                    CachedSpawnEnemyOnDeath.enemyGuidsToSpawn = ExpandLists.SpawnEnemyOnDeathGUIDList;\n                    if (EnemyToBecome != \"1a4872dafdb34fd29fe8ac90bd2cea67\") {\n                        CachedSpawnEnemyOnDeath.enemySelection = SpawnEnemyOnDeath.EnemySelection.Random;\n                        CachedSpawnEnemyOnDeath.minSpawnCount = 2;\n                        CachedSpawnEnemyOnDeath.maxSpawnCount = 3;\n                    }\n                }\n                \n                if (EnemyToBecome == \"6868795625bd46f3ae3e4377adce288b\") {\n                    ExpandSpawnGlitchObjectOnDeath ObjectSpawnerComponent = gameObject.AddComponent<ExpandSpawnGlitchObjectOnDeath>();\n                    ObjectSpawnerComponent.spawnRatCorpse = true;\n                    ObjectSpawnerComponent.ratCorpseSpawnsItemOnExplosion = BraveUtility.RandomBool();\n                }\n\n                if (isBigEnemy | aiActorToTransformInto.gameObject.GetComponent<CompanionController>()) {\n                    float spawnOdds = 0.1f;\n                    if (gameObject.GetComponent<CompanionController>()) { spawnOdds += 0.15f; }\n                    if (UnityEngine.Random.value <= spawnOdds) { gameObject.AddComponent<ExpandSpawnGlitchEnemyOnDeath>(); }\n                }\n            }\n\n            aiActor.MovementSpeed = aiActorToUseAttacksFrom.MovementSpeed;\n\n            if (aiActorToUseAttacksFrom.gameObject.GetComponent<ExplodeOnDeath>()) {\n                ExplodeOnDeath exploder = gameObject.AddComponent<ExplodeOnDeath>();\n                ExpandUtility.DuplicateComponent(exploder, aiActorToUseAttacksFrom.gameObject.GetComponent<ExplodeOnDeath>());\n            } else if (UnityEngine.Random.value <= 0.2f) {\n                gameObject.AddComponent<ExpandExplodeOnDeath>();\n            }\n            \n            if (aiActorToUseAttacksFrom.aiShooter) {\n                Transform GunAttachPoint = gameObject.transform.Find(\"GunAttachPoint\");\n\n                try {\n                    Bounds spriteBounds = sprite.GetBounds();\n                    Vector3 spriteSize = spriteBounds.max;\n                    GunAttachPoint.localPosition += new Vector3((spriteSize.x / 2), (spriteSize.y / 4), 0);\n                } catch (Exception) { }\n\n                if (EnemyToBecome == \"ec8ea75b557d4e7b8ceeaacdf6f8238c\") {\n                    GunAttachPoint.localPosition = new Vector3(0.7f, 0.5f, 0);\n                }\n\n                ExpandUtility.DuplicateAIShooterAndAIBulletBank(gameObject, aiActorToUseAttacksFrom.aiShooter, aiActorToUseAttacksFrom.bulletBank, aiActorToUseAttacksFrom.aiShooter.equippedGunId, gameObject.transform.Find(\"GunAttachPoint\"));\n            }\n            \n            if (aiActorToUseAttacksFrom.gameObject.GetComponent<AIBulletBank>() && gameObject.GetComponent<AIBulletBank>()) {\n                AIBulletBank currentBulletBank = gameObject.GetComponent<AIBulletBank>();\n                if (aiActorToUseAttacksFrom.bulletBank.transforms != null && aiActorToUseAttacksFrom.bulletBank.transforms.Count > 0) {\n                    currentBulletBank.transforms = new List<Transform>() { gameObject.transform.Find(\"shoot point\") };\n                    if (aiActorToUseAttacksFrom.bulletBank.transforms[0].name == \"shoot point\") {\n                        currentBulletBank.transforms[0].localPosition = aiActorToUseAttacksFrom.bulletBank.transforms[0].localPosition;\n                    }\n                }\n                currentBulletBank.RegenerateCache();\n            }\n            \n            if (gameObject.GetComponent<AIShooter>()) { gameObject.GetComponent<AIShooter>().Initialize(); }\n            \n            if (aiActorToUseAttacksFrom.GetComponent<CrazedController>()) {\n                aiActor.DiesOnCollison = true;\n                CrazedController crazedController = gameObject.AddComponent<CrazedController>();\n                ExpandUtility.DuplicateComponent(crazedController, aiActorToUseAttacksFrom.GetComponent<CrazedController>());\n            }\n\n            if (aiActorToUseAttacksFrom.GetComponent<KillOnRoomClear>()) {\n                gameObject.AddComponent<KillOnRoomClear>();\n                aiActor.IgnoreForRoomClear = aiActorToUseAttacksFrom.IgnoreForRoomClear;\n            }\n            \n            ExpandUtility.DuplicateComponent(behaviorSpeculator, aiActorToUseAttacksFrom.behaviorSpeculator);\n            \n\n            if (behaviorSpeculator.MovementBehaviors != null && behaviorSpeculator.MovementBehaviors.Count > 0) {\n                for (int i = 0; i < behaviorSpeculator.MovementBehaviors.Count; i++) {\n                    if (behaviorSpeculator.MovementBehaviors[i].GetType() == typeof(TakeCoverBehavior)) {\n                        behaviorSpeculator.MovementBehaviors.Remove(behaviorSpeculator.MovementBehaviors[i]);\n                    }\n                }\n            }\n            if (behaviorSpeculator.OverrideBehaviors != null && behaviorSpeculator.OverrideBehaviors.Count > 0) {\n                for (int i = 0; i < behaviorSpeculator.OverrideBehaviors.Count; i++) {\n                    if (behaviorSpeculator.OverrideBehaviors[i].GetType() == typeof(RedBarrelAwareness)) {\n                        behaviorSpeculator.OverrideBehaviors.Remove(behaviorSpeculator.OverrideBehaviors[i]);\n                    }\n                }\n            }\n\n            float RandomIntervalFloat = UnityEngine.Random.Range(0.02f, 0.06f);\n            float RandomDispFloat = UnityEngine.Random.Range(0.1f, 0.16f);\n            float RandomDispIntensityFloat = UnityEngine.Random.Range(0.1f, 0.4f);\n            float RandomColorProbFloat = UnityEngine.Random.Range(0.05f, 0.2f);\n            float RandomColorIntensityFloat = UnityEngine.Random.Range(0.1f, 0.25f);\n\n            \n            if (isGlitchObject | aiActorToTransformInto.GetComponent<CompanionController>()) {\n                if (!isGlitchObject) { aiActor.DiesOnCollison = true; }\n                ExpandShaders.Instance.ApplyGlitchShader(sprite, true, RandomIntervalFloat, RandomDispFloat, RandomDispIntensityFloat, RandomColorProbFloat, RandomColorIntensityFloat);\n            } else {\n                ExpandShaders.Instance.ApplySuperGlitchShader(sprite, aiActorToUseAttacksFrom.sprite, RandomIntervalFloat, RandomDispFloat, RandomDispIntensityFloat, RandomColorProbFloat, RandomColorIntensityFloat);\n            }\n            \n            if (aiActorToTransformInto.EnemyGuid == \"9216803e9c894002a4b931d7ea9c6bdf\") { aiActor.BecomeBlackPhantom(); }\n        }\n        \n        private void HandleTransformIntoGlitchObject() {\n            ExpandObjectDatabase objectDatabase = new ExpandObjectDatabase();\n\n            List<TalkDoerLite> NPCList = new List<TalkDoerLite>() {\n                objectDatabase.NPCEvilMuncher.GetComponent<TalkDoerLite>(),\n                objectDatabase.NPCGunMuncher.GetComponent<TalkDoerLite>(),\n                objectDatabase.NPCOldMan.GetComponent<TalkDoerLite>(),\n                objectDatabase.NPCTonic.GetComponent<TalkDoerLite>(),\n                objectDatabase.NPCTruthKnower.GetComponent<TalkDoerLite>(),\n                objectDatabase.NPCCursola.GetComponent<TalkDoerLite>()\n            };\n\n            List<tk2dBaseSprite> OtherObjectsList = new List<tk2dBaseSprite>() {\n                objectDatabase.ConvictPastCrowdNPC_01.GetComponent<tk2dBaseSprite>(),\n                objectDatabase.PlayerCorpse.GetComponent<tk2dBaseSprite>(),\n                objectDatabase.TimefallCorpse.GetComponent<tk2dBaseSprite>(),\n                ExpandPrefabs.Teleporter_Info_Sign.GetComponent<tk2dBaseSprite>(),\n                ExpandPrefabs.PlayerLostRatNote.GetComponent<tk2dBaseSprite>(),\n                objectDatabase.LockedDoor.GetComponent<tk2dBaseSprite>(),\n                ExpandPrefabs.MouseTrap1.GetComponent<tk2dBaseSprite>()\n            };\n\n            bool isConvictPastCrowdNPC = false;\n\n            TalkDoerLite m_SelectedNPC = BraveUtility.RandomElement(NPCList);\n            tk2dBaseSprite m_SelectedSprite = m_SelectedNPC.GetComponent<tk2dBaseSprite>();\n\n            if (UnityEngine.Random.value <= 0.2f) {\n                m_SelectedSprite = BraveUtility.RandomElement(OtherObjectsList);\n                isConvictPastCrowdNPC = true;\n            }\n\n            // ExpandUtility.ApplyCustomTexture(aiActor, prebuiltCollection: m_SelectedSprite.Collection);\n            sprite.Collection = m_SelectedSprite.Collection;\n            sprite.SetSprite(m_SelectedSprite.spriteId);\n\n            IntVector2 RigidBodyUnitSize = IntVector2.One;\n\n            if (isConvictPastCrowdNPC) {\n                if (m_SelectedSprite.name.StartsWith(\"Dancer\") | m_SelectedSprite == OtherObjectsList[3]) {\n                    RigidBodyUnitSize = new IntVector2(3, 4);\n                } else if(m_SelectedSprite == OtherObjectsList[1]) {\n                    RigidBodyUnitSize = new IntVector2(1, 2);\n                } else if(m_SelectedSprite == OtherObjectsList[2]) {\n                    RigidBodyUnitSize = new IntVector2(1, 1);\n                } else if(m_SelectedSprite == OtherObjectsList[5]) {\n                    RigidBodyUnitSize = new IntVector2(3, 2);\n                }\n            } else if (m_SelectedNPC == NPCList[0] | m_SelectedNPC == NPCList[1]) {\n                RigidBodyUnitSize = new IntVector2(3, 2);\n            } else if (m_SelectedNPC == NPCList[2] | m_SelectedNPC == NPCList[4] | m_SelectedNPC == NPCList[5]) {  \n                RigidBodyUnitSize = new IntVector2(2, 2);\n            } else if (m_SelectedNPC == NPCList[3]) {\n                RigidBodyUnitSize = new IntVector2(1, 1);\n            }\n\n            IntVector2 m_RigidBodyPixelSize = new IntVector2(RigidBodyUnitSize.x * 16, RigidBodyUnitSize.y * 16);\n\n            ExpandUtility.GenerateNewEnemyRigidBody(aiActor, IntVector2.Zero, m_RigidBodyPixelSize);\n\n            Destroy(gameObject.GetComponent<AIAnimator>());\n            ExpandUtility.GenerateBlankAIAnimator(gameObject);\n            specRigidbody.RegenerateColliders = true;\n            objectDatabase = null;\n        }"
    ],
    "docstrings": [],
    "functions": [
        "ExpandCorruptedEnemyEngageDoer",
        "Awake",
        "StartIntro",
        "HandleChooseCorruptionEnemySource"
    ],
    "classes": [
        "ExpandCorruptedEnemyEngageDoer"
    ]
}