{
    "identifiers": [
        "glob",
        "logging",
        "typing",
        "Iterator",
        "Tuple",
        "wostools",
        "article",
        "Article",
        "wostools",
        "exceptions",
        "InvalidReference",
        "logging",
        "getLogger",
        "files",
        "files",
        "file",
        "_files",
        "file",
        "seek",
        "classmethod",
        "cls",
        "pattern",
        "cls",
        "from_filenames",
        "glob",
        "glob",
        "pattern",
        "classmethod",
        "cls",
        "filenames",
        "open",
        "filename",
        "encoding",
        "filename",
        "filenames",
        "cls",
        "files",
        "property",
        "filehandle",
        "_files",
        "filehandle",
        "seek",
        "filehandle",
        "read",
        "filehandle",
        "seek",
        "article_text",
        "data",
        "split",
        "article_text",
        "article_text",
        "Article",
        "NotImplementedError",
        "Iterator",
        "Article",
        "article",
        "_articles",
        "article",
        "reference",
        "article",
        "references",
        "Article",
        "from_isi_citation",
        "reference",
        "InvalidReference",
        "logger",
        "info",
        "reference",
        "article",
        "label",
        "sum",
        "_",
        "property",
        "NotImplementedError",
        "property",
        "Tuple",
        "NotImplementedError",
        "property",
        "Tuple",
        "Article",
        "Article",
        "NotImplementedError"
    ],
    "literals": [
        "\"utf-8-sig\"",
        "\"\\n\\n\"",
        "\"EF\"",
        "\"Sub classes should know how to iterate over articles\"",
        "f\"Ignoring malformed reference '{reference}' from '{article.label}'\"",
        "\"Sub classes should know how to iterate over authors\"",
        "\"Sub classes should know how to iterate over coauthors\"",
        "\"Sub classes should know how to iterate over citation pairs\""
    ],
    "variables": [
        "logger",
        "_files",
        "files",
        "data"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\nBase collection for a shared API.\n\"\"\"",
        "\"\"\"\n    A collection of WOS text files.\n    \"\"\"",
        "\"\"\"Creates a new collection from a pattern using glob.\n\n        Args:\n            pattern (str): String with the pattern to be passed to glob.\n\n        Returns:\n            CollectionLazy: Collection with the articles by using the pattern.\n        \"\"\"",
        "\"\"\"Creates a new collection from a list of filenames.\n\n        Args:\n            filenames (str): String with the filename.\n\n        Returns:\n            CollectionLazy: Collection with the articles by reading the\n                filenames.\n        \"\"\"",
        "\"\"\"Iterates over all the single article texts in the colection.\n\n        Returns:\n            generator: A generator of strings with the text articles.\n        \"\"\"",
        "\"\"\"\n        Should iterate over all the articles in the ISI file, excluding references.\n        \"\"\"",
        "\"\"\"\n        Should iterate over all articles known in the collection.\n        \"\"\"",
        "\"\"\"Iterates over all article authors, including duplicates\n\n        Returns:\n            generator: A generator with the authors (one by one) of the\n                articles in the collection.\n        \"\"\"",
        "\"\"\"Iterates over coauthor pairs.\n\n        Returns:\n            generator: A generator with the pair of coauthors of the articles\n            in the collections.\n        \"\"\"",
        "\"\"\"\n        Computes the citation pairs for the articles in the collection.\n\n        Returns:\n            genertator: A generator with the citation links: pairs of article\n            labesl, where the firts element is the article which cites the\n            second element.\n        \"\"\""
    ],
    "functions": [
        "from_glob",
        "from_filenames",
        "_article_texts",
        "_articles",
        "__iter__",
        "__len__",
        "authors",
        "coauthors",
        "citation_pairs"
    ],
    "classes": [
        "BaseCollection"
    ]
}