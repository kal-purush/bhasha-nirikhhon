{
    "identifiers": [
        "JestMockFn",
        "TArguments",
        "$ReadOnlyArray",
        "TReturn",
        "args",
        "TArguments",
        "TReturn",
        "mock",
        "TArguments",
        "TReturn",
        "TReturn",
        "mockClear",
        "mockReset",
        "mockRestore",
        "mockImplementation",
        "fn",
        "args",
        "TArguments",
        "TReturn",
        "JestMockFn",
        "TArguments",
        "TReturn",
        "mockImplementationOnce",
        "fn",
        "args",
        "TArguments",
        "TReturn",
        "JestMockFn",
        "TArguments",
        "TReturn",
        "mockName",
        "name",
        "JestMockFn",
        "TArguments",
        "TReturn",
        "mockReturnThis",
        "mockReturnValue",
        "value",
        "TReturn",
        "JestMockFn",
        "TArguments",
        "TReturn",
        "mockReturnValueOnce",
        "value",
        "TReturn",
        "JestMockFn",
        "TArguments",
        "TReturn",
        "mockResolvedValue",
        "value",
        "TReturn",
        "JestMockFn",
        "TArguments",
        "TReturn",
        "mockResolvedValueOnce",
        "value",
        "TReturn",
        "JestMockFn",
        "TArguments",
        "TReturn",
        "mockRejectedValue",
        "value",
        "TReturn",
        "JestMockFn",
        "TArguments",
        "mockRejectedValueOnce",
        "value",
        "TReturn",
        "JestMockFn",
        "TArguments",
        "JestAsymmetricEqualityType",
        "value",
        "mixed",
        "JestCallsType",
        "mixed",
        "mixed",
        "number",
        "mixed",
        "mixed",
        "",
        "JestClockType",
        "mockDate",
        "date",
        "tick",
        "milliseconds",
        "",
        "number",
        "uninstall",
        "",
        "JestMatcherResult",
        "JestMatcher",
        "received",
        "actual",
        "JestMatcherResult",
        "JestMatcherResult",
        "JestPromiseType",
        "JestExpectType",
        "JestExpectType",
        "JestTestName",
        "JestStyledComponentsMatcherValue",
        "JestAsymmetricEqualityType",
        "JestStyledComponentsMatcherOptions",
        "JestStyledComponentsMatchersType",
        "property",
        "JestStyledComponentsMatcherValue",
        "JestStyledComponentsMatcherOptions",
        "",
        "EnzymeMatchersType",
        "toBePresent",
        "toBeChecked",
        "toBeDisabled",
        "toBeEmptyRender",
        "toContainMatchingElement",
        "selector",
        "toContainMatchingElements",
        "n",
        "number",
        "selector",
        "toContainExactlyOneMatchingElement",
        "selector",
        "toContainReact",
        "element",
        "React$Element",
        "toExist",
        "toHaveClassName",
        "className",
        "toHaveHTML",
        "html",
        "toHaveProp",
        "propKey",
        "propValue",
        "",
        "props",
        "",
        "toHaveRef",
        "refName",
        "toHaveState",
        "stateKey",
        "stateValue",
        "",
        "state",
        "",
        "toHaveStyle",
        "styleKey",
        "styleValue",
        "",
        "style",
        "",
        "toHaveTagName",
        "tagName",
        "toHaveText",
        "text",
        "toHaveValue",
        "value",
        "toIncludeText",
        "text",
        "toMatchElement",
        "element",
        "React$Element",
        "options",
        "ignoreProps",
        "verbose",
        "toMatchSelector",
        "selector",
        "toHaveDisplayName",
        "name",
        "DomTestingLibraryType",
        "container",
        "HTMLElement",
        "toBeInTheDocument",
        "toBeVisible",
        "toBeEmpty",
        "toBeDisabled",
        "toBeEnabled",
        "toBeInvalid",
        "toBeRequired",
        "toBeValid",
        "toContainElement",
        "element",
        "HTMLElement",
        "toContainHTML",
        "htmlText",
        "toHaveAttribute",
        "attr",
        "value",
        "",
        "toHaveClass",
        "classNames",
        "toHaveFocus",
        "toHaveFormValues",
        "expectedValues",
        "name",
        "toHaveStyle",
        "css",
        "name",
        "toHaveTextContent",
        "text",
        "options",
        "toHaveValue",
        "value",
        "",
        "number",
        "toHaveDisplayValue",
        "value",
        "",
        "toBeChecked",
        "JestJQueryMatchersType",
        "toHaveLength",
        "len",
        "number",
        "toHaveId",
        "id",
        "toHaveClass",
        "className",
        "toHaveTag",
        "tag",
        "toHaveAttr",
        "key",
        "val",
        "",
        "toHaveProp",
        "key",
        "val",
        "",
        "toHaveText",
        "text",
        "toHaveData",
        "key",
        "val",
        "",
        "toHaveValue",
        "val",
        "toHaveCss",
        "css",
        "key",
        "toBeChecked",
        "toBeDisabled",
        "toBeEmpty",
        "toBeHidden",
        "toBeSelected",
        "toBeVisible",
        "toBeFocused",
        "toBeInDom",
        "toBeMatchedBy",
        "sel",
        "toHaveDescendant",
        "sel",
        "toHaveDescendantWithText",
        "sel",
        "text",
        "",
        "JestExtendedMatchersType",
        "",
        "members",
        "",
        "",
        "",
        "predicate",
        "n",
        "toBeArray",
        "x",
        "number",
        "",
        "members",
        "",
        "",
        "members",
        "",
        "",
        "predicate",
        "n",
        "toBeBoolean",
        "toBeTrue",
        "toBeFalse",
        "toBeDate",
        "toBeFunction",
        "toHaveBeenCalledBefore",
        "mock",
        "JestMockFn",
        "",
        "toBeNumber",
        "toBeNaN",
        "toBeFinite",
        "toBePositive",
        "toBeNegative",
        "toBeEven",
        "toBeOdd",
        "toBeWithin",
        "start",
        "number",
        "end",
        "number",
        "toBeObject",
        "toContainKey",
        "key",
        "toContainKeys",
        "keys",
        "",
        "toContainAllKeys",
        "keys",
        "",
        "toContainAnyKeys",
        "keys",
        "",
        "toContainValue",
        "value",
        "toContainValues",
        "values",
        "toContainAllValues",
        "values",
        "toContainAnyValues",
        "values",
        "toContainEntry",
        "entry",
        "toContainEntries",
        "entries",
        "",
        "toContainAllEntries",
        "entries",
        "",
        "toContainAnyEntries",
        "entries",
        "",
        "toBeExtensible",
        "toBeFrozen",
        "toBeSealed",
        "toBeString",
        "toEqualCaseInsensitive",
        "toStartWith",
        "prefix",
        "toEndWith",
        "suffix",
        "toInclude",
        "substring",
        "toIncludeRepeated",
        "substring",
        "times",
        "number",
        "toIncludeMultiple",
        "substring",
        "SnapshotDiffType",
        "valueB",
        "options",
        "expand",
        "colors",
        "contextLines",
        "number",
        "stablePatchmarks",
        "aAnnotation",
        "bAnnotation",
        "testName",
        "JestExpectType",
        "JestExpectType",
        "EnzymeMatchersType",
        "DomTestingLibraryType",
        "JestJQueryMatchersType",
        "JestStyledComponentsMatchersType",
        "JestExtendedMatchersType",
        "SnapshotDiffType",
        "lastCalledWith",
        "args",
        "toBe",
        "value",
        "toBeCalledWith",
        "args",
        "toBeCloseTo",
        "num",
        "number",
        "delta",
        "toBeDefined",
        "toBeFalsy",
        "toBeGreaterThan",
        "number",
        "number",
        "toBeGreaterThanOrEqual",
        "number",
        "number",
        "toBeLessThan",
        "number",
        "number",
        "toBeLessThanOrEqual",
        "number",
        "number",
        "toBeInstanceOf",
        "cls",
        "Class",
        "toBeNull",
        "toBeTruthy",
        "toBeUndefined",
        "toContain",
        "item",
        "toContainEqual",
        "item",
        "toEqual",
        "value",
        "toHaveBeenCalled",
        "toBeCalled",
        "toHaveBeenCalledTimes",
        "number",
        "number",
        "toBeCalledTimes",
        "number",
        "number",
        "toHaveBeenNthCalledWith",
        "nthCall",
        "number",
        "args",
        "nthCalledWith",
        "nthCall",
        "number",
        "args",
        "toHaveReturned",
        "toReturn",
        "toHaveReturnedTimes",
        "number",
        "number",
        "toReturnTimes",
        "number",
        "number",
        "toHaveReturnedWith",
        "value",
        "toReturnWith",
        "value",
        "toHaveLastReturnedWith",
        "value",
        "lastReturnedWith",
        "value",
        "toHaveNthReturnedWith",
        "nthCall",
        "number",
        "value",
        "nthReturnedWith",
        "nthCall",
        "number",
        "value",
        "toHaveBeenCalledWith",
        "args",
        "toBeCalledWith",
        "args",
        "toHaveBeenLastCalledWith",
        "args",
        "lastCalledWith",
        "args",
        "toHaveLength",
        "number",
        "number",
        "toHaveProperty",
        "propPath",
        "$ReadOnlyArray",
        "value",
        "",
        "toMatch",
        "regexpOrString",
        "toMatchObject",
        "toStrictEqual",
        "value",
        "toMatchSnapshot",
        "propertyMatchers",
        "",
        "name",
        "",
        "toMatchSnapshot",
        "name",
        "toMatchInlineSnapshot",
        "snapshot",
        "",
        "toMatchInlineSnapshot",
        "propertyMatchers",
        "",
        "snapshot",
        "",
        "toThrow",
        "message",
        "Class",
        "toThrowError",
        "message",
        "Class",
        "toThrowErrorMatchingSnapshot",
        "toThrowErrorMatchingInlineSnapshot",
        "snapshot",
        "",
        "JestObjectType",
        "JestObjectType",
        "JestObjectType",
        "JestObjectType",
        "JestObjectType",
        "JestObjectType",
        "JestObjectType",
        "JestObjectType",
        "",
        "number",
        "moduleName",
        "moduleFactory",
        "JestObjectType",
        "dontMock",
        "moduleName",
        "JestObjectType",
        "fn",
        "TArguments",
        "$ReadOnlyArray",
        "TReturn",
        "implementation",
        "args",
        "TArguments",
        "TReturn",
        "JestMockFn",
        "TArguments",
        "TReturn",
        "isMockFunction",
        "fn",
        "genMockFromModule",
        "moduleName",
        "mock",
        "moduleName",
        "moduleFactory",
        "",
        "options",
        "",
        "JestObjectType",
        "requireActual",
        "moduleName",
        "requireMock",
        "moduleName",
        "resetModules",
        "JestObjectType",
        "isolateModules",
        "fn",
        "JestObjectType",
        "runAllTicks",
        "runAllTimers",
        "runAllImmediates",
        "advanceTimersByTime",
        "msToRun",
        "number",
        "runTimersToTime",
        "msToRun",
        "number",
        "runOnlyPendingTimers",
        "setMock",
        "moduleName",
        "moduleExports",
        "JestObjectType",
        "unmock",
        "moduleName",
        "JestObjectType",
        "useFakeTimers",
        "mode",
        "",
        "JestObjectType",
        "useRealTimers",
        "JestObjectType",
        "spyOn",
        "methodName",
        "accessType",
        "",
        "JestMockFn",
        "setTimeout",
        "timeout",
        "number",
        "JestObjectType",
        "JestSpyType",
        "JestCallsType",
        "JestDoneFn",
        "",
        "error",
        "afterEach",
        "fn",
        "done",
        "JestDoneFn",
        "mixed",
        "timeout",
        "number",
        "beforeEach",
        "fn",
        "done",
        "JestDoneFn",
        "mixed",
        "timeout",
        "number",
        "afterAll",
        "fn",
        "done",
        "JestDoneFn",
        "mixed",
        "timeout",
        "number",
        "beforeAll",
        "fn",
        "done",
        "JestDoneFn",
        "mixed",
        "timeout",
        "number",
        "describe",
        "name",
        "JestTestName",
        "fn",
        "only",
        "name",
        "JestTestName",
        "fn",
        "skip",
        "name",
        "JestTestName",
        "fn",
        "each",
        "table",
        "mixed",
        "mixed",
        "name",
        "JestTestName",
        "fn",
        "args",
        "mixed",
        "timeout",
        "number",
        "it",
        "JestTestName",
        "done",
        "JestDoneFn",
        "mixed",
        "timeout",
        "number",
        "",
        "name",
        "JestTestName",
        "fn",
        "done",
        "JestDoneFn",
        "mixed",
        "timeout",
        "number",
        "table",
        "mixed",
        "mixed",
        "name",
        "JestTestName",
        "fn",
        "args",
        "mixed",
        "timeout",
        "number",
        "skip",
        "name",
        "JestTestName",
        "fn",
        "done",
        "JestDoneFn",
        "mixed",
        "timeout",
        "number",
        "todo",
        "name",
        "concurrent",
        "name",
        "JestTestName",
        "fn",
        "done",
        "JestDoneFn",
        "mixed",
        "timeout",
        "number",
        "each",
        "table",
        "mixed",
        "mixed",
        "name",
        "JestTestName",
        "fn",
        "args",
        "mixed",
        "timeout",
        "number",
        "fit",
        "name",
        "JestTestName",
        "fn",
        "done",
        "JestDoneFn",
        "mixed",
        "timeout",
        "number",
        "test",
        "it",
        "xdescribe",
        "describe",
        "fdescribe",
        "describe",
        "xit",
        "it",
        "xtest",
        "it",
        "JestPrettyFormatColors",
        "JestPrettyFormatIndent",
        "JestPrettyFormatRefs",
        "JestPrettyFormatPrint",
        "JestPrettyFormatStringOrNull",
        "JestPrettyFormatOptions",
        "number",
        "number",
        "JestPrettyFormatPlugins",
        "JestPrettyFormatPlugin",
        "val",
        "JestPrettyFormatPrint",
        "JestPrettyFormatIndent",
        "JestPrettyFormatOptions",
        "JestPrettyFormatColors",
        "JestPrettyFormatPlugins",
        "JestPrettyFormatPlugin",
        "expect",
        "value",
        "JestExpectType",
        "JestPromiseType",
        "EnzymeMatchersType",
        "DomTestingLibraryType",
        "JestJQueryMatchersType",
        "JestStyledComponentsMatchersType",
        "JestExtendedMatchersType",
        "SnapshotDiffType",
        "matchers",
        "name",
        "JestMatcher",
        "addSnapshotSerializer",
        "pluginModule",
        "JestPrettyFormatPlugin",
        "assertions",
        "expectedAssertions",
        "number",
        "hasAssertions",
        "value",
        "mixed",
        "JestAsymmetricEqualityType",
        "anything",
        "arrayContaining",
        "value",
        "mixed",
        "mixed",
        "objectContaining",
        "value",
        "stringContaining",
        "value",
        "stringMatching",
        "value",
        "value",
        "$ReadOnlyArray",
        "mixed",
        "mixed",
        "value",
        "value",
        "value",
        "spyOn",
        "value",
        "mixed",
        "method",
        "jest",
        "JestObjectType",
        "jasmine",
        "number",
        "value",
        "mixed",
        "JestAsymmetricEqualityType",
        "value",
        "mixed",
        "mixed",
        "JestClockType",
        "name",
        "JestSpyType",
        "baseName",
        "methodName",
        "JestSpyType",
        "value",
        "value"
    ],
    "literals": [
        "'modern'",
        "'legacy'",
        "'get'",
        "'set'"
    ],
    "variables": [],
    "comments": [
        "flow-typed signature: 0ed73a588759fdbd9b6eb09d5ac062b3",
        "flow-typed version: 479edd3152/jest_v26.x.x/flow_>=v0.104.x",
        "5.x",
        "6.x",
        "7.x",
        "DOM testing library extensions (jest-dom)",
        "https://github.com/testing-library/jest-dom",
        "4.x",
        "5.x",
        "Jest JQuery Matchers: https://github.com/unindented/custom-jquery-matchers",
        "Jest Extended Matchers: https://github.com/jest-community/jest-extended",
        "pass(message: string): void;",
        "fail(message: string): void;",
        "Diffing snapshot utility for Jest (snapshot-diff)",
        "https://github.com/jest-community/snapshot-diff",
        "Runs this function after every test inside this context",
        "Runs this function before every test inside this context",
        "Runs this function after all tests have finished inside this context",
        "Runs this function before any tests have started inside this context",
        "A context for grouping tests together",
        "An individual test unit",
        "An individual test unit",
        "A disabled group of tests",
        "A focused group of tests",
        "A disabled individual test",
        "A disabled individual test",
        "The expect function is used every time you want to test a value",
        "The object that you want to make assertions against",
        "Add additional Jasmine matchers to Jest's roster",
        "Add a module that formats application-specific data structures.",
        "Matches any received string that contains the exact expected string.",
        "TODO handle return type",
        "http://jasmine.github.io/2.4/introduction.html#section-Spies",
        "Holds all functions related to manipulating test runner"
    ],
    "docstrings": [
        "* An object for introspecting mock calls",
        "* An array that represents all calls that have been made into this mock\n     * function. Each call is represented by an array of arguments that were\n     * passed during the call.",
        "* An array that contains all the object instances that have been\n     * instantiated from this mock function.",
        "* An array that contains all the object results that have been\n     * returned by this mock function call",
        "* Resets all information stored in the mockFn.mock.calls and\n   * mockFn.mock.instances arrays. Often this is useful when you want to clean\n   * up a mock's usage data between two assertions.",
        "* Resets all information stored in the mock. This is useful when you want to\n   * completely restore a mock back to its initial state.",
        "* Removes the mock and restores the initial implementation. This is useful\n   * when you want to mock functions in certain test cases and restore the\n   * original implementation in others. Beware that mockFn.mockRestore only\n   * works when mock was created with jest.spyOn. Thus you have to take care of\n   * restoration yourself when manually assigning jest.fn().",
        "* Accepts a function that should be used as the implementation of the mock.\n   * The mock itself will still record all calls that go into and instances\n   * that come from itself -- the only difference is that the implementation\n   * will also be executed when the mock is called.",
        "* Accepts a function that will be used as an implementation of the mock for\n   * one call to the mocked function. Can be chained so that multiple function\n   * calls produce different results.",
        "* Accepts a string to use in test result output in place of \"jest.fn()\" to\n   * indicate which mock function is being referenced.",
        "* Just a simple sugar function for returning `this`",
        "* Accepts a value that will be returned whenever the mock function is called.",
        "* Sugar for only returning a value once inside your mock",
        "* Sugar for jest.fn().mockImplementation(() => Promise.resolve(value))",
        "* Sugar for jest.fn().mockImplementationOnce(() => Promise.resolve(value))",
        "* Sugar for jest.fn().mockImplementation(() => Promise.reject(value))",
        "* Sugar for jest.fn().mockImplementationOnce(() => Promise.reject(value))",
        "* A custom Jasmine equality tester",
        "* Use rejects to unwrap the reason of a rejected promise so any other\n   * matcher can be chained. If the promise is fulfilled the assertion fails.",
        "* Use resolves to unwrap the value of a fulfilled promise so any other\n   * matcher can be chained. If the promise is rejected the assertion fails.",
        "* Jest allows functions and classes to be used as test names in test() and\n * describe()",
        "*  Plugin: jest-styled-components",
        "*  Plugin: jest-enzyme",
        "* @deprecated",
        "* Note: Currently unimplemented\n   * Passing assertion\n   *\n   * @param {String} message",
        "* Note: Currently unimplemented\n   * Failing assertion\n   *\n   * @param {String} message",
        "* Use .toBeEmpty when checking if a String '', Array [] or Object {} is empty.",
        "* Use .toBeOneOf when checking if a value is a member of a given Array.\n   * @param {Array.<*>} members",
        "* Use `.toBeNil` when checking a value is `null` or `undefined`.",
        "* Use `.toSatisfy` when you want to use a custom matcher by supplying a predicate function that returns a `Boolean`.\n   * @param {Function} predicate",
        "* Use `.toBeArray` when checking if a value is an `Array`.",
        "* Use `.toBeArrayOfSize` when checking if a value is an `Array` of size x.\n   * @param {Number} x",
        "* Use `.toIncludeAllMembers` when checking if an `Array` contains all of the same members of a given set.\n   * @param {Array.<*>} members",
        "* Use `.toIncludeAnyMembers` when checking if an `Array` contains any of the members of a given set.\n   * @param {Array.<*>} members",
        "* Use `.toSatisfyAll` when you want to use a custom matcher by supplying a predicate function that returns a `Boolean` for all values in an array.\n   * @param {Function} predicate",
        "* Use `.toBeBoolean` when checking if a value is a `Boolean`.",
        "* Use `.toBeTrue` when checking a value is equal (===) to `true`.",
        "* Use `.toBeFalse` when checking a value is equal (===) to `false`.",
        "* Use .toBeDate when checking if a value is a Date.",
        "* Use `.toBeFunction` when checking if a value is a `Function`.",
        "* Use `.toHaveBeenCalledBefore` when checking if a `Mock` was called before another `Mock`.\n   *\n   * Note: Required Jest version >22\n   * Note: Your mock functions will have to be asynchronous to cause the timestamps inside of Jest to occur in a differentJS event loop, otherwise the mock timestamps will all be the same\n   *\n   * @param {Mock} mock",
        "* Use `.toBeNumber` when checking if a value is a `Number`.",
        "* Use `.toBeNaN` when checking a value is `NaN`.",
        "* Use `.toBeFinite` when checking if a value is a `Number`, not `NaN` or `Infinity`.",
        "* Use `.toBePositive` when checking if a value is a positive `Number`.",
        "* Use `.toBeNegative` when checking if a value is a negative `Number`.",
        "* Use `.toBeEven` when checking if a value is an even `Number`.",
        "* Use `.toBeOdd` when checking if a value is an odd `Number`.",
        "* Use `.toBeWithin` when checking if a number is in between the given bounds of: start (inclusive) and end (exclusive).\n   *\n   * @param {Number} start\n   * @param {Number} end",
        "* Use `.toBeObject` when checking if a value is an `Object`.",
        "* Use `.toContainKey` when checking if an object contains the provided key.\n   *\n   * @param {String} key",
        "* Use `.toContainKeys` when checking if an object has all of the provided keys.\n   *\n   * @param {Array.<String>} keys",
        "* Use `.toContainAllKeys` when checking if an object only contains all of the provided keys.\n   *\n   * @param {Array.<String>} keys",
        "* Use `.toContainAnyKeys` when checking if an object contains at least one of the provided keys.\n   *\n   * @param {Array.<String>} keys",
        "* Use `.toContainValue` when checking if an object contains the provided value.\n   *\n   * @param {*} value",
        "* Use `.toContainValues` when checking if an object contains all of the provided values.\n   *\n   * @param {Array.<*>} values",
        "* Use `.toContainAllValues` when checking if an object only contains all of the provided values.\n   *\n   * @param {Array.<*>} values",
        "* Use `.toContainAnyValues` when checking if an object contains at least one of the provided values.\n   *\n   * @param {Array.<*>} values",
        "* Use `.toContainEntry` when checking if an object contains the provided entry.\n   *\n   * @param {Array.<String, String>} entry",
        "* Use `.toContainEntries` when checking if an object contains all of the provided entries.\n   *\n   * @param {Array.<Array.<String, String>>} entries",
        "* Use `.toContainAllEntries` when checking if an object only contains all of the provided entries.\n   *\n   * @param {Array.<Array.<String, String>>} entries",
        "* Use `.toContainAnyEntries` when checking if an object contains at least one of the provided entries.\n   *\n   * @param {Array.<Array.<String, String>>} entries",
        "* Use `.toBeExtensible` when checking if an object is extensible.",
        "* Use `.toBeFrozen` when checking if an object is frozen.",
        "* Use `.toBeSealed` when checking if an object is sealed.",
        "* Use `.toBeString` when checking if a value is a `String`.",
        "* Use `.toEqualCaseInsensitive` when checking if a string is equal (===) to another ignoring the casing of both strings.\n   *\n   * @param {String} string",
        "* Use `.toStartWith` when checking if a `String` starts with a given `String` prefix.\n   *\n   * @param {String} prefix",
        "* Use `.toEndWith` when checking if a `String` ends with a given `String` suffix.\n   *\n   * @param {String} suffix",
        "* Use `.toInclude` when checking if a `String` includes the given `String` substring.\n   *\n   * @param {String} substring",
        "* Use `.toIncludeRepeated` when checking if a `String` includes the given `String` substring the correct number of times.\n   *\n   * @param {String} substring\n   * @param {Number} times",
        "* Use `.toIncludeMultiple` when checking if a `String` includes all of the given substrings.\n   *\n   * @param {Array.<String>} substring",
        "* Compare the difference between the actual in the `expect()`\n   * vs the object inside `valueB` with some extra options.",
        "* If you have a mock function, you can use .lastCalledWith to test what\n   * arguments it was last called with.",
        "* toBe just checks that a value is what you expect. It uses === to check\n   * strict equality.",
        "* Use .toBeCalledWith to ensure that a mock function was called with\n   * specific arguments.",
        "* Using exact equality with floating point numbers is a bad idea. Rounding\n   * means that intuitive things fail.",
        "* Use .toBeDefined to check that a variable is not undefined.",
        "* Use .toBeFalsy when you don't care what a value is, you just want to\n   * ensure a value is false in a boolean context.",
        "* To compare floating point numbers, you can use toBeGreaterThan.",
        "* To compare floating point numbers, you can use toBeGreaterThanOrEqual.",
        "* To compare floating point numbers, you can use toBeLessThan.",
        "* To compare floating point numbers, you can use toBeLessThanOrEqual.",
        "* Use .toBeInstanceOf(Class) to check that an object is an instance of a\n   * class.",
        "* .toBeNull() is the same as .toBe(null) but the error messages are a bit\n   * nicer.",
        "* Use .toBeTruthy when you don't care what a value is, you just want to\n   * ensure a value is true in a boolean context.",
        "* Use .toBeUndefined to check that a variable is undefined.",
        "* Use .toContain when you want to check that an item is in a list. For\n   * testing the items in the list, this uses ===, a strict equality check.",
        "* Use .toContainEqual when you want to check that an item is in a list. For\n   * testing the items in the list, this matcher recursively checks the\n   * equality of all fields, rather than checking for object identity.",
        "* Use .toEqual when you want to check that two objects have the same value.\n   * This matcher recursively checks the equality of all fields, rather than\n   * checking for object identity.",
        "* Use .toHaveBeenCalled to ensure that a mock function got called.",
        "* Use .toHaveBeenCalledTimes to ensure that a mock function got called exact\n   * number of times.",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "* Use .toHaveBeenCalledWith to ensure that a mock function was called with\n   * specific arguments.",
        "* Use .toHaveBeenLastCalledWith to ensure that a mock function was last called\n   * with specific arguments.",
        "* Check that an object has a .length property and it is set to a certain\n   * numeric value.",
        "*",
        "* Use .toMatch to check that a string matches a regular expression or string.",
        "* Use .toMatchObject to check that a javascript object matches a subset of the properties of an object.",
        "* Use .toStrictEqual to check that a javascript object matches a subset of the properties of an object.",
        "* This ensures that an Object matches the most recent snapshot.",
        "* This ensures that an Object matches the most recent snapshot.",
        "* Use .toThrow to test that a function throws when it is called.\n   * If you want to test that a specific error gets thrown, you can provide an\n   * argument to toThrow. The argument can be a string for the error message,\n   * a class for the error, or a regex that should match the error.\n   *\n   * Alias: .toThrowError",
        "* Use .toThrowErrorMatchingSnapshot to test that a function throws a error\n   * matching the most recent snapshot when it is called.",
        "*  Disables automatic mocking in the module loader.\n   *\n   *  After this method is called, all `require()`s will return the real\n   *  versions of each module (rather than a mocked version).",
        "* An un-hoisted version of disableAutomock",
        "* Enables automatic mocking in the module loader.",
        "* An un-hoisted version of enableAutomock",
        "* Clears the mock.calls and mock.instances properties of all mocks.\n   * Equivalent to calling .mockClear() on every mocked function.",
        "* Resets the state of all mocks. Equivalent to calling .mockReset() on every\n   * mocked function.",
        "* Restores all mocks back to their original value.",
        "* Removes any pending timers from the timer system.",
        "* Returns the number of fake timers still left to run.",
        "* The same as `mock` but not moved to the top of the expectation by\n   * babel-jest.",
        "* The same as `unmock` but not moved to the top of the expectation by\n   * babel-jest.",
        "* Returns a new, unused mock function. Optionally takes a mock\n   * implementation.",
        "* Determines if the given function is a mocked function.",
        "* Given the name of a module, use the automatic mocking system to generate a\n   * mocked version of the module for you.",
        "* Mocks a module with an auto-mocked version when it is being required.\n   *\n   * The second argument can be used to specify an explicit module factory that\n   * is being run instead of using Jest's automocking feature.\n   *\n   * The third argument can be used to create virtual mocks -- mocks of modules\n   * that don't exist anywhere in the system.",
        "* Returns the actual module instead of a mock, bypassing all checks on\n   * whether the module should receive a mock implementation or not.",
        "* Returns a mock module instead of the actual module, bypassing all checks\n   * on whether the module should be required normally or not.",
        "* Resets the module registry - the cache of all required modules. This is\n   * useful to isolate modules where local state might conflict between tests.",
        "* Creates a sandbox registry for the modules that are loaded inside the\n   * callback function. This is useful to isolate specific modules for every\n   * test so that local module state doesn't conflict between tests.",
        "* Exhausts the micro-task queue (usually interfaced in node via\n   * process.nextTick).",
        "* Exhausts the macro-task queue (i.e., all tasks queued by setTimeout(),\n   * setInterval(), and setImmediate()).",
        "* Exhausts all tasks queued by setImmediate().",
        "* Executes only the macro task queue (i.e. all tasks queued by setTimeout()\n   * or setInterval() and setImmediate()).",
        "* Executes only the macro task queue (i.e. all tasks queued by setTimeout()\n   * or setInterval() and setImmediate()).\n   *\n   * Renamed to `advanceTimersByTime`.",
        "* Executes only the macro-tasks that are currently pending (i.e., only the\n   * tasks that have been queued by setTimeout() or setInterval() up to this\n   * point)",
        "* Explicitly supplies the mock object that the module system should return\n   * for the specified module. Note: It is recommended to use jest.mock()\n   * instead.",
        "* Indicates that the module system should never return a mocked version of\n   * the specified module from require() (e.g. that it should always return the\n   * real module).",
        "* Instructs Jest to use fake versions of the standard timer functions\n   * (setTimeout, setInterval, clearTimeout, clearInterval, nextTick,\n   * setImmediate and clearImmediate).",
        "* Instructs Jest to use the real versions of the standard timer functions.",
        "* Creates a mock function similar to jest.fn but also tracks calls to\n   * object[methodName].",
        "* Set the default timeout interval for tests and before/after hooks in milliseconds.\n   * Note: The default timeout interval is 5 seconds if this method is not called.",
        "* Creates a block that groups together several related tests in one \"test suite\"",
        "* Only run this describe block",
        "* Skip running this describe block",
        "* each runs this test against array of argument arrays per each run\n   *\n   * @param {table} table of Test",
        "* An individual test unit\n   *\n   * @param {JestTestName} Name of Test\n   * @param {Function} Test\n   * @param {number} Timeout for the test, in milliseconds.",
        "* Only run this test\n   *\n   * @param {JestTestName} Name of Test\n   * @param {Function} Test\n   * @param {number} Timeout for the test, in milliseconds.",
        "* Skip running this test\n   *\n   * @param {JestTestName} Name of Test\n   * @param {Function} Test\n   * @param {number} Timeout for the test, in milliseconds.",
        "* Highlight planned tests in the summary output\n   *\n   * @param {String} Name of Test to do",
        "* Run the test concurrently\n   *\n   * @param {JestTestName} Name of Test\n   * @param {Function} Test\n   * @param {number} Timeout for the test, in milliseconds.",
        "* each runs this test against array of argument arrays per each run\n   *\n   * @param {table} table of Test",
        "* The global Jasmine object, this is generally not exposed as the public API,\n * using features inside here could break in later versions of Jest."
    ],
    "functions": [],
    "classes": []
}