{
    "identifiers": [
        "pandas",
        "pd",
        "cleanData",
        "cleanData",
        "sklearn",
        "model_selection",
        "train_test_split",
        "encodeAttribs",
        "preprocess_pipeline",
        "baseLine",
        "BaseLine",
        "sklearn",
        "model_selection",
        "cross_val_score",
        "pickle",
        "sklearn",
        "ensemble",
        "RandomForest",
        "pandas",
        "pd",
        "psycopg2",
        "sql",
        "classifierEvaluation",
        "classifierEvaluation",
        "sql",
        "connect",
        "dbname",
        "pd",
        "read_sql_query",
        "query",
        "sql_mela",
        "cleanData",
        "mela",
        "train_test_split",
        "X",
        "y",
        "test_size",
        "stratify",
        "y",
        "random_state",
        "train_test_split",
        "X_train",
        "y_train",
        "test_size",
        "stratify",
        "y",
        "random_state",
        "preprocess_pipeline",
        "num_attribs",
        "cat_attribs",
        "fit",
        "X_train",
        "pipe",
        "transform",
        "X_train",
        "pipe",
        "transform",
        "X_cv",
        "pipe",
        "transform",
        "X_test",
        "BaseLine",
        "cross_val_score",
        "base_line_clf",
        "x_train",
        "y_train",
        "cv",
        "scoring",
        "base_scores",
        "mean",
        "RandomForestClassifier",
        "bootstrap",
        "max_features",
        "max_depth",
        "n_estimators",
        "forest_clf",
        "fit",
        "x_train",
        "y_train",
        "classifierEvaluation",
        "forest_clf",
        "x_train",
        "y_train",
        "classifierEvaluation",
        "forest_clf",
        "x_cv",
        "y_cv",
        "classifierEvaluation",
        "forest_clf",
        "x_test",
        "y_test",
        "pickle",
        "dump",
        "forest_clf",
        "open",
        "filename",
        "pickle",
        "dump",
        "pipe",
        "open",
        "filename"
    ],
    "literals": [
        "\"melanoma\"",
        "'AGE'",
        "'DEPTH'",
        "\"CS_EXTENSION\"",
        "\"MITOSES\"",
        "'SEX'",
        "'ULCERATION'",
        "'PRIMARY_SITE'",
        "\"accuracy\"",
        "'sqrt'",
        "\"Logistic Regression\"",
        "\"Training Data\"",
        "\"Logistic Regression\"",
        "\"Validation Data\"",
        "\"Logistic Regression\"",
        "\"Test Data\"",
        "'forest_clf.sav'",
        "'wb'",
        "'transform.sav'",
        "'wb'"
    ],
    "variables": [
        "sql_mela",
        "query",
        "mela",
        "X",
        "y",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "X_train",
        "X_cv",
        "y_train",
        "y_cv",
        "num_attribs",
        "cat_attribs",
        "pipe",
        "x_train",
        "x_cv",
        "x_test",
        "base_line_clf",
        "base_scores",
        "forest_clf",
        "filename",
        "filename"
    ],
    "comments": [
        "cleaning the data in cleanData",
        "query for matching JCO data",
        "query = \"\"\"SELECT \"AGE\", \"SEX\", \"DEPTH\", \"ULCERATION\", \"MITOSES\", \"CS_EXTENSION\", \"PRIMARY_SITE\", \"CS_LYMPH_NODE_METS\"",
        "FROM melanoma",
        "WHERE (\"DEPTH\" <= 400 AND \"DEPTH\" >= 100)",
        "OR ((\"DEPTH\" < 100 AND \"DEPTH\" >= 75) AND",
        "(\"ULCERATION\" >= 1 OR \"MITOSES\" >= 1 OR \"AGE\" < 40 )) OR",
        "((\"DEPTH\" < 75 AND \"DEPTH\" >= 54) AND",
        "((\"MITOSES\" >= 1 AND \"ULCERATION\" >= 1) OR (\"ULCERATION\" >= 1",
        "AND \"AGE\" < 40) OR (\"MITOSES\" >= 1 AND \"AGE\" < 40)));\"\"\"",
        "split the data into training and test sets",
        "using functions so easily adjusted",
        "transforming features according to the pipeline",
        "getting baseline accuracy (although not best comparison in this case)",
        "fitting to a logistic regression classifier",
        "evaluating the goodness of the logistic regression classifier",
        "dumps the trained model using pickle for the web-app to use.",
        "dumps the feature pipeline using pickle for the web-app to use"
    ],
    "docstrings": [
        "\"\"\"\nThis is the main function for creating the melanoma prediction model. It calls functions to\n1) Get the data from a postgresql database\n2) calls cleanData to clean data (see cleanData.py for the description of how that's done)\n3) Splits the data into train/CV/test sets\n4) Calls preprocess_pipeline in encodeAttribs.py to create numerical features of degree 3\nand one-hot encode the cateogrical attributes\n5) Trains a baseline classifier (see BaseLine.py for details)\n6) Fits a random forest classifier using sklearn\n7) Validates the model using classifierEvaluation.py\n8) Saves the model using pickle for the web-app's use\n\"\"\"",
        "\"\"\"SELECT \"AGE\", \"SEX\", \"DEPTH\", \"ULCERATION\", \"MITOSES\", \"CS_EXTENSION\", \"PRIMARY_SITE\", \"CS_LYMPH_NODE_METS\"\n            FROM melanoma\"\"\""
    ],
    "functions": [],
    "classes": []
}