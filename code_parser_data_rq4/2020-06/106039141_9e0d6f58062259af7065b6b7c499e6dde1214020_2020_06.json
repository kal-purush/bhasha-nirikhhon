{
    "identifiers": [
        "numbers",
        "Real",
        "re",
        "node",
        "Node",
        "traversal_order",
        "query",
        "query",
        "isinstance",
        "query",
        "attr_filter",
        "df_row",
        "k",
        "v",
        "attr_filter",
        "items",
        "k",
        "df_row",
        "keys",
        "isinstance",
        "df_row",
        "k",
        "isinstance",
        "v",
        "InvalidQueryFilter",
        "k",
        "re",
        "match",
        "v",
        "df_row",
        "k",
        "matches",
        "matches",
        "isinstance",
        "df_row",
        "k",
        "Real",
        "isinstance",
        "v",
        "v",
        "lower",
        "startswith",
        "compops",
        "matches",
        "eval",
        "format",
        "df_row",
        "k",
        "v",
        "isinstance",
        "v",
        "Real",
        "matches",
        "df_row",
        "k",
        "v",
        "InvalidQueryFilter",
        "format",
        "k",
        "InvalidQueryFilter",
        "matches",
        "filter_func",
        "attr_filter",
        "row",
        "elem",
        "query",
        "isinstance",
        "elem",
        "_add_node",
        "_convert_dict_to_filter",
        "elem",
        "isinstance",
        "elem",
        "isinstance",
        "elem",
        "_add_node",
        "elem",
        "isinstance",
        "elem",
        "isinstance",
        "elem",
        "isinstance",
        "elem",
        "isinstance",
        "elem",
        "_add_node",
        "elem",
        "_convert_dict_to_filter",
        "elem",
        "InvalidQueryPath",
        "InvalidQueryPath",
        "wildcard_spec",
        "filter_func",
        "row",
        "len",
        "query_pattern",
        "_add_node",
        "wildcard_spec",
        "filter_func",
        "wildcard_spec",
        "filter_func",
        "row",
        "_add_node",
        "wildcard_spec",
        "filter_func",
        "gf",
        "root",
        "sorted",
        "gf",
        "graph",
        "roots",
        "key",
        "traversal_order",
        "_apply_impl",
        "gf",
        "root",
        "visited",
        "matches",
        "len",
        "visited",
        "len",
        "gf",
        "graph",
        "matches",
        "wildcard_spec",
        "filter_func",
        "row",
        "isinstance",
        "wildcard_spec",
        "isinstance",
        "wildcard_spec",
        "callable",
        "filter_func",
        "isinstance",
        "wildcard_spec",
        "i",
        "wildcard_spec",
        "query_pattern",
        "append",
        "filter_func",
        "wildcard_spec",
        "wildcard_spec",
        "wildcard_spec",
        "query_pattern",
        "append",
        "wildcard_spec",
        "filter_func",
        "gf",
        "node",
        "isinstance",
        "node",
        "Node",
        "i",
        "node_query",
        "query_pattern",
        "node_query",
        "filter_func",
        "gf",
        "dataframe",
        "loc",
        "node",
        "matches",
        "append",
        "i",
        "search_cache",
        "node",
        "_hatchet_nid",
        "matches",
        "gf",
        "node",
        "wcard_idx",
        "node",
        "_hatchet_nid",
        "search_cache",
        "_cache_node",
        "gf",
        "node",
        "wcard_idx",
        "search_cache",
        "node",
        "_hatchet_nid",
        "wcard_idx",
        "search_cache",
        "node",
        "_hatchet_nid",
        "len",
        "node",
        "children",
        "wcard_idx",
        "len",
        "query_pattern",
        "node",
        "child",
        "sorted",
        "node",
        "children",
        "key",
        "traversal_order",
        "_match_0_or_more",
        "gf",
        "child",
        "wcard_idx",
        "sub_match",
        "matches",
        "extend",
        "sub_match",
        "len",
        "matches",
        "m",
        "m",
        "matches",
        "t",
        "t",
        "tmp",
        "node",
        "m",
        "m",
        "matches",
        "wcard_idx",
        "len",
        "query_pattern",
        "gf",
        "node",
        "wcard_idx",
        "node",
        "_hatchet_nid",
        "search_cache",
        "_cache_node",
        "gf",
        "node",
        "wcard_idx",
        "search_cache",
        "node",
        "_hatchet_nid",
        "len",
        "node",
        "children",
        "child",
        "sorted",
        "node",
        "children",
        "key",
        "traversal_order",
        "_match_0_or_more",
        "gf",
        "child",
        "wcard_idx",
        "sub_match",
        "matches",
        "extend",
        "sub_match",
        "len",
        "matches",
        "node",
        "m",
        "m",
        "matches",
        "gf",
        "node",
        "idx",
        "node",
        "_hatchet_nid",
        "search_cache",
        "_cache_node",
        "gf",
        "node",
        "child",
        "sorted",
        "node",
        "children",
        "key",
        "traversal_order",
        "child",
        "_hatchet_nid",
        "search_cache",
        "_cache_node",
        "gf",
        "child",
        "idx",
        "search_cache",
        "child",
        "_hatchet_nid",
        "matches",
        "append",
        "child",
        "len",
        "matches",
        "matches",
        "gf",
        "pattern_root",
        "isinstance",
        "pattern_root",
        "Node",
        "pattern_root",
        "pattern_idx",
        "len",
        "query_pattern",
        "query_pattern",
        "pattern_idx",
        "m",
        "matches",
        "wcard",
        "_match_1",
        "gf",
        "m",
        "pattern_idx",
        "s",
        "sub_match",
        "append",
        "s",
        "sub_match",
        "extend",
        "s",
        "wcard",
        "child",
        "sorted",
        "m",
        "children",
        "key",
        "traversal_order",
        "_match_0_or_more",
        "gf",
        "child",
        "pattern_idx",
        "s",
        "sub_match",
        "append",
        "s",
        "sub_match",
        "extend",
        "s",
        "wcard",
        "child",
        "sorted",
        "m",
        "children",
        "key",
        "traversal_order",
        "_match_1_or_more",
        "gf",
        "child",
        "pattern_idx",
        "s",
        "sub_match",
        "append",
        "s",
        "sub_match",
        "extend",
        "s",
        "InvalidQueryFilter",
        "s",
        "sub_match",
        "s",
        "new_matches",
        "append",
        "m",
        "s",
        "new_matches",
        "len",
        "matches",
        "pattern_idx",
        "matches",
        "gf",
        "node",
        "visited",
        "matches",
        "node",
        "node",
        "_hatchet_nid",
        "visited",
        "node",
        "_hatchet_nid",
        "search_cache",
        "_cache_node",
        "gf",
        "node",
        "search_cache",
        "node",
        "_hatchet_nid",
        "_match_pattern",
        "gf",
        "node",
        "sub_match",
        "matches",
        "extend",
        "sub_match",
        "visited",
        "add",
        "node",
        "_hatchet_nid",
        "child",
        "sorted",
        "node",
        "children",
        "key",
        "traversal_order",
        "_apply_impl",
        "gf",
        "child",
        "visited",
        "matches"
    ],
    "literals": [
        "\"<\"",
        "\">\"",
        "\"==\"",
        "\">=\"",
        "\"<=\"",
        "\"<>\"",
        "\"!=\"",
        "\"Value for attribute {} must be a string.\"",
        "r\"\\Z\"",
        "\"{} {}\"",
        "\"Attribute {} has a numeric type. Valid filters for this attribute are a string starting with a comparison operator or a real number.\"",
        "\"Filter must be one of the following:\\n  * A regex string for a String attribute\\n  * A string starting with a comparison operator for a Numeric attribute\\n  * A number for a Numeric attribute\\n\"",
        "\".\"",
        "\"The first value of a tuple entry in a path must be either a string or integer.\"",
        "\"A query path must be a list containing String, Integer, Dict, or Tuple elements\"",
        "\".\"",
        "\".\"",
        "\".\"",
        "\".\"",
        "\".\"",
        "\"*\"",
        "\"+\"",
        "\".\"",
        "\"*\"",
        "\"+\"",
        "'Query wildcards must be one of \".\", \"*\", or \"+\"'"
    ],
    "variables": [
        "query_pattern",
        "search_cache",
        "compops",
        "matches",
        "matches",
        "matches",
        "matches",
        "matches",
        "query_pattern",
        "search_cache",
        "matches",
        "visited",
        "matches",
        "_",
        "filter_func",
        "matches",
        "sub_match",
        "tmp",
        "matches",
        "matches",
        "sub_match",
        "matches",
        "pattern_idx",
        "matches",
        "wcard",
        "_",
        "new_matches",
        "sub_match",
        "s",
        "s",
        "s",
        "matches",
        "sub_match"
    ],
    "comments": [
        "Copyright 2017-2020 Lawrence Livermore National Security, LLC and other",
        "Hatchet Project Developers. See the top-level LICENSE file for details.",
        "",
        "SPDX-License-Identifier: MIT",
        "Initialize containers for query and memoization cache.",
        "If a high-level API list is provided, process it.",
        ",",
        "Currently not supported",
        "\"is\", \"is not\", \"in\", \"not in\")",
        "Applies each filtering function to the node to cache which",
        "query nodes the current node matches.",
        "Cache the node if it's not already cached",
        "If the node matches with the next non-wildcard query node,",
        "end the recursion and return the node.",
        "If the node matches the \"*\" wildcard query, recursively",
        "apply this function to the current node's children. Then,",
        "collect their returned matches, and prepend the current node.",
        "If the current node doesn't match the current \"*\" wildcard or",
        "the next non-wildcard query node, return None.",
        "Cache the node if it's not already cached",
        "If the current node doesn't match the \"+\" wildcard, return None.",
        "Since a query can't end on a wildcard, return None if the",
        "current node has no children.",
        "Use _match_0_or_more to collect all additional wildcard matches.",
        "Since _match_0_or_more will capture the query node that follows",
        "the wildcard, if no paths were retrieved from that function,",
        "the pattern does not continue after the \"+\" wildcard. Thus,",
        "since a pattern cannot end on a wildcard, the function",
        "returns None.",
        "Cache the node if it's not already cached",
        "To be consistent with the other matching functions, return",
        "None instead of an empty list.",
        "Starting query node",
        "Starting matching pattern",
        "Get the wildcard type",
        "Consider each existing match individually so that more",
        "nodes can be added to them.",
        "Get the portion of the subgraph that matches the next",
        "part of the query.",
        "Merge the next part of the match path with the",
        "existing part.",
        "Overwrite the old matches with the updated matches",
        "If all the existing partial matches were not able to be",
        "expanded into full matches, return None.",
        "Update the query node",
        "If the node has already been visited (or is None for some",
        "reason), skip it.",
        "Cache the node if it's not already cached",
        "If the node matches the starting/root node of the query,",
        "try to get all query matches in the subgraph rooted at",
        "this node.",
        "Note that the node is now visited.",
        "Continue the Depth First Search."
    ],
    "docstrings": [
        "\"\"\"Process and apply queries to GraphFrames.\"\"\"",
        "\"\"\"Create a new QueryMatcher object.\n\n        Arguments:\n            query (list, optional): if provided, convert the contents of the high-level API query into an internal representation.\n        \"\"\"",
        "\"\"\"Converts high-level API attribute filter to a lambda\"\"\"",
        "\"\"\"Lambda filter function for high-level API\"\"\"",
        "\"\"\"Start a query with a root node described by the arguments.\n\n        Arugments:\n            wildcard_spec (str, optional, \".\", \"*\", or \"+\"): the wildcard status of the node (follows standard Regex styntax)\n            filter_func (callable, optional): a callable accepting only a row from a Pandas DataFrame that is used to filter this node in the query\n\n        Returns:\n            (QueryMatcher): The instance of the class that called this function (enables fluent design).\n        \"\"\"",
        "\"\"\"Add another edge and node to the query.\n        Arugments:\n            wildcard_spec (str, optional, \".\", \"*\", or \"+\"): the wildcard status of the node (follows standard Regex styntax)\n            filter_func (callable, optional): a callable accepting only a row from a Pandas DataFrame that is used to filter this node in the query\n\n        Returns:\n            (QueryMatcher): The instance of the class that called this function (enables fluent design).\n        \"\"\"",
        "\"\"\"Apply the query to a GraphFrame.\n\n        Arguments:\n            gf (GraphFrame): the GraphFrame on which to apply the query.\n\n        Returns:\n            (list): A list of lists representing the set of paths that match this query.\n        \"\"\"",
        "\"\"\"Add a node to the query.\n        Arugments:\n            wildcard_spec (str, optional, \".\", \"*\", or \"+\"): the wildcard status of the node (follows standard Regex styntax)\n            filter_func (callable, optional): a callable accepting only a row from a Pandas DataFrame that is used to filter this node in the query\n        \"\"\"",
        "\"\"\"Cache (Memoize) the parts of the query that the node matches.\n\n        Arguments:\n            gf (GraphFrame): the GraphFrame containing the node to be cached.\n            node (Node): the Node to be cached.\n        \"\"\"",
        "\"\"\"Process a \"*\" wildcard in the query on a subgraph.\n\n        Arguments:\n            gf (GraphFrame): the GraphFrame being queried.\n            node (Node): the node being queried against the \"*\" wildcard.\n            wcard_idx (int): the index associated with the \"*\" wildcard query.\n\n        Returns:\n            (list): a list of lists representing the paths rooted at \"node\" that match the \"*\" wildcard and/or the next query node. Will return None if there is no match for the \"*\" wildcard or the next query node.\n        \"\"\"",
        "\"\"\"Process a \"+\" wildcard in the query on a subgraph.\n\n        Arguments:\n            gf (GraphFrame): the GraphFrame being queried.\n            node (Node): the node being queried against the \"+\" wildcard.\n            wcard_idx (int): the index associated with the \"+\" wildcard query.\n\n        Returns:\n            (list): a list of lists representing the paths rooted at \"node\" that match the \"+\" wildcard and/or the next query node. Will return None if there is no match for the \"+\" wildcard or the next query node.\n        \"\"\"",
        "\"\"\"Process a \".\" wildcard in the query on a subgraph.\n\n        Arguments:\n            gf (GraphFrame): the GraphFrame being queried.\n            node (Node): the node being queried against the \".\" wildcard.\n            wcard_idx (int): the index associated with the \".\" wildcard query.\n\n        Returns:\n            (list): A list of lists representing the children of \"node\" that match the \".\" wildcard being considered. Will return None if there are no matches for the \".\" wildcard.\n        \"\"\"",
        "\"\"\"Try to match the query pattern starting at the provided root node.\n\n        Arugments:\n            gf (GraphFrame): the GraphFrame being queried.\n            pattern_root (Node): the root node of the subgraph that is being queried.\n\n        Returns:\n            (list): A list of lists representing the paths rooted at \"pattern_root\" that match the query.\n        \"\"\"",
        "\"\"\"Traverse the subgraph with the specified root, and collect all paths that match the query.\n\n        Arugments:\n            gf (GraphFrame): the GraphFrame being queried.\n            node (Node): the root node of the subgraph that is being queried.\n            visited (set): a set that keeps track of what nodes have been visited in the traversal to minimize the amount of work that is repeated.\n            matches (list): the list in which the final set of matches are stored.\n        \"\"\"",
        "\"\"\"Raised when a query does not have the correct syntax\"\"\"",
        "\"\"\"Raised when a query filter does not have a valid syntax\"\"\""
    ],
    "functions": [
        "_convert_dict_to_filter",
        "filter_func",
        "match",
        "rel",
        "apply",
        "_add_node",
        "_cache_node",
        "_match_0_or_more",
        "_match_1_or_more",
        "_match_1",
        "_match_pattern",
        "_apply_impl"
    ],
    "classes": [
        "QueryMatcher",
        "InvalidQueryPath",
        "InvalidQueryFilter"
    ]
}