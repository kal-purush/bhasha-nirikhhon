{
    "identifiers": [
        "autokeras",
        "ak",
        "ak",
        "ImageInput",
        "ak",
        "Normalization",
        "input_node",
        "ak",
        "ImageAugmentation",
        "output_node",
        "ak",
        "ConvBlock",
        "output_node",
        "ak",
        "ResNetBlock",
        "version",
        "output_node",
        "ak",
        "Merge",
        "output_node1",
        "output_node2",
        "ak",
        "ClassificationHead",
        "output_node",
        "ak",
        "AutoModel",
        "inputs",
        "input_node",
        "outputs",
        "output_node",
        "max_trials",
        "tensorflow",
        "keras",
        "datasets",
        "mnist",
        "x_train",
        "y_train",
        "x_test",
        "y_test",
        "mnist",
        "load_data",
        "x_train",
        "shape",
        "y_train",
        "shape",
        "y_train",
        "auto_model",
        "fit",
        "x_train",
        "y_train",
        "auto_model",
        "predict",
        "x_test",
        "auto_model",
        "evaluate",
        "x_test",
        "y_test",
        "autokeras",
        "ak",
        "tensorflow",
        "tf",
        "ak",
        "Block",
        "hp",
        "inputs",
        "tf",
        "python",
        "util",
        "nest",
        "flatten",
        "inputs",
        "tf",
        "keras",
        "layers",
        "Dense",
        "hp",
        "Int",
        "min_value",
        "max_value",
        "step",
        "layer",
        "input_node",
        "output_node",
        "ak",
        "Input",
        "SingleDenseLayerBlock",
        "input_node",
        "ak",
        "RegressionHead",
        "output_node",
        "ak",
        "AutoModel",
        "input_node",
        "output_node",
        "max_trials",
        "np",
        "random",
        "rand",
        "num_instances",
        "astype",
        "np",
        "float32",
        "np",
        "random",
        "rand",
        "num_instances",
        "astype",
        "np",
        "float32",
        "np",
        "random",
        "rand",
        "num_instances",
        "astype",
        "np",
        "float32",
        "np",
        "random",
        "rand",
        "num_instances",
        "astype",
        "np",
        "float32",
        "auto_model",
        "fit",
        "x_train",
        "y_train",
        "auto_model",
        "evaluate",
        "x_test",
        "y_test"
    ],
    "literals": [
        "'v2'",
        "'num_units'"
    ],
    "variables": [
        "input_node",
        "output_node",
        "output_node",
        "output_node1",
        "output_node2",
        "output_node",
        "output_node",
        "auto_model",
        "predicted_y",
        "input_node",
        "layer",
        "output_node",
        "input_node",
        "output_node",
        "output_node",
        "auto_model",
        "num_instances",
        "x_train",
        "y_train",
        "x_test",
        "y_test"
    ],
    "comments": [
        "(60000, 28, 28)",
        "(60000,)",
        "array([7, 2, 1], dtype=uint8)",
        "Feed the AutoModel with training data.",
        "Predict with the best model.",
        "Evaluate the best model with testing data.",
        "Get the input_node from inputs.",
        "Build the AutoModel",
        "Prepare Data",
        "Train the model"
    ],
    "docstrings": [
        "\"\"\"shell\npip install autokeras\n\"\"\"",
        "\"\"\"\nIn this tutorial, we show how to customize your search space with\n[AutoModel](/auto_model/#automodel-class) and how to implement your own block as search space.\nThis API is mainly for advanced users who already know what their model should look like.\n\n## Customized Search Space\nFirst, let us see how we can build the following neural network using the building blocks in AutoKeras.\n\n<div class=\"mermaid\">\ngraph LR\n    id1(ImageInput) --> id2(Normalization)\n    id2 --> id3(Image Augmentation)\n    id3 --> id4(Convolutional)\n    id3 --> id5(ResNet V2)\n    id4 --> id6(Merge)\n    id5 --> id6\n    id6 --> id7(Classification Head)\n</div>\n\nWe can make use of the [AutoModel](/auto_model/#automodel-class) API in AutoKeras to implemented as follows.\nThe usage is the same as the [Keras functional API](https://www.tensorflow.org/guide/keras/functional).\n\"\"\"",
        "\"\"\"\nWhild building the model, the blocks used need to follow this topology:\n`Preprocessor` -> `Block` -> `Head`. `Normalization` and `ImageAugmentation` are `Preprocessor`s.\n`ClassificationHead` is `Head`. The rest are `Block`s.\n\nIn the code above, we use `ak.ResNetBlock(version='v2')` to specify the version of ResNet to use.\nThere are many other arguments to specify for each building block.\nFor most of the arguments, if not specified, they would be tuned automatically.\nPlease refer to the documentation links at the bottom of the page for more details.\n\nThen, we prepare some data to run the model.\n\"\"\"",
        "\"\"\"\nFor multiple input nodes and multiple heads search space, you can refer to [this section](/tutorial/multi/#customized-search-space).\n\n## Validation Data\nIf you would like to provide your own validation data or change the ratio of the validation data, please refer to\nthe Validation Data section of the tutorials of\n[Image Classification](/tutorial/image_classification/#validation-data),\n[Text Classification](/tutorial/text_classification/#validation-data),\n[Structured Data Classification](/tutorial/structured_data_classification/#validation-data),\n[Multi-task and Multiple Validation](/tutorial/multi/#validation-data).\n\n## Data Format\nYou can refer to the documentation of\n[ImageInput](/node/#imageinput-class),\n[StructuredDataInput](/node/#structureddatainput-class),\n[TextInput](/node/#textinput-class),\n[RegressionHead](/head/#regressionhead-class),\n[ClassificationHead](/head/#classificationhead-class),\nfor the format of different types of data.\nYou can also refer to the Data Format section of the tutorials of\n[Image Classification](/tutorial/image_classification/#data-format),\n[Text Classification](/tutorial/text_classification/#data-format),\n[Structured Data Classification](/tutorial/structured_data_classification/#data-format).\n\n## Implement New Block\n\nYou can extend the [Block](/base/#block-class) \nclass to implement your own building blocks and use it with \n[AutoModel](/auto_model/#automodel-class).\n\nThe first step is to learn how to write a build function for [KerasTuner](https://keras-team.github.io/keras-tuner/#usage-the-basics).\nYou need to override the [build function](/base/#build-method) of the block.\nThe following example shows how to implement a single Dense layer block whose number of neurons is tunable.\n\"\"\"",
        "\"\"\"\nYou can connect it with other blocks and build it into an\n[AutoModel](/auto_model/#automodel-class).\n\"\"\"",
        "\"\"\"\n## Reference\n\n[AutoModel](/auto_model/#automodel-class)\n\n**Nodes**:\n[ImageInput](/node/#imageinput-class),\n[Input](/node/#input-class),\n[StructuredDataInput](/node/#structureddatainput-class),\n[TextInput](/node/#textinput-class).\n\n**Preprocessors**:\n[FeatureEngineering](/preprocessor/#featureengineering-class),\n[ImageAugmentation](/preprocessor/#imageaugmentation-class),\n[LightGBM](/preprocessor/#lightgbm-class),\n[Normalization](/preprocessor/#normalization-class),\n[TextToIntSequence](/preprocessor/#texttointsequence-class),\n[TextToNgramVector](/preprocessor/#texttongramvector-class).\n\n**Blocks**:\n[ConvBlock](/block/#convblock-class),\n[DenseBlock](/block/#denseblock-class),\n[Embedding](/block/#embedding-class),\n[Merge](/block/#merge-class),\n[ResNetBlock](/block/#resnetblock-class),\n[RNNBlock](/block/#rnnblock-class),\n[SpatialReduction](/block/#spatialreduction-class),\n[TemporalReduction](/block/#temporalreduction-class),\n[XceptionBlock](/block/#xceptionblock-class),\n[ImageBlock](/block/#imageblock-class),\n[StructuredDataBlock](/block/#structureddatablock-class),\n[TextBlock](/block/#textblock-class).\n\"\"\""
    ],
    "functions": [
        "build"
    ],
    "classes": [
        "SingleDenseLayerBlock"
    ]
}