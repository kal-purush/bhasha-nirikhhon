{
    "identifiers": [
        "time",
        "math",
        "random",
        "rplidar",
        "RPLidar",
        "RPLidar",
        "PORT_NAME",
        "lidar",
        "set_pwm",
        "pygame",
        "pygame",
        "init",
        "pygame",
        "display",
        "set_mode",
        "pygame",
        "font",
        "Font",
        "pygame",
        "font",
        "get_default_font",
        "screen",
        "fill",
        "nValue",
        "nPrecision",
        "round",
        "nValue",
        "nradius",
        "xpass",
        "ypass",
        "xpass",
        "ypass",
        "nScaleDown",
        "xpass",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "ypass",
        "xpass",
        "ypass",
        "nScaleDown",
        "xpass",
        "nXAdjust",
        "abs",
        "nScaleDown",
        "ypass",
        "nYAdjust",
        "xpass",
        "ypass",
        "nXAdjust",
        "abs",
        "nScaleDown",
        "xpass",
        "abs",
        "nScaleDown",
        "ypass",
        "nYAdjust",
        "xpass",
        "ypass",
        "nXAdjust",
        "abs",
        "nScaleDown",
        "xpass",
        "nYAdjust",
        "nScaleDown",
        "ypass",
        "pygame",
        "draw",
        "circle",
        "screen",
        "xpass",
        "ypass",
        "nradius",
        "pygame",
        "display",
        "flip",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nYAdjust",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "pygame",
        "draw",
        "circle",
        "screen",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "font",
        "render",
        "screen",
        "blit",
        "text_surface",
        "nXAdjust",
        "nScaleDown",
        "nYAdjust",
        "pygame",
        "display",
        "flip",
        "_PositionArray",
        "_Color",
        "PaintMeasures",
        "nIteration",
        "len",
        "_PositionArray",
        "_PositionArray",
        "nIteration",
        "_PositionArray",
        "nIteration",
        "xpass",
        "ypass",
        "nScaleDown",
        "xpass",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "ypass",
        "xpass",
        "ypass",
        "nScaleDown",
        "xpass",
        "nXAdjust",
        "abs",
        "nScaleDown",
        "ypass",
        "nYAdjust",
        "xpass",
        "ypass",
        "nXAdjust",
        "abs",
        "nScaleDown",
        "xpass",
        "abs",
        "nScaleDown",
        "ypass",
        "nYAdjust",
        "xpass",
        "ypass",
        "nXAdjust",
        "abs",
        "nScaleDown",
        "xpass",
        "nYAdjust",
        "nScaleDown",
        "ypass",
        "pygame",
        "draw",
        "circle",
        "screen",
        "_Color",
        "xpass",
        "ypass",
        "pygame",
        "display",
        "flip",
        "nDegrees",
        "nIteration",
        "len",
        "nXYNewPoints",
        "nAngleFromNewOrigin",
        "nIteration",
        "nDegrees",
        "CustomRound",
        "nDistancefromNewOrigin",
        "nIteration",
        "math",
        "sin",
        "math",
        "pi",
        "nAngleFromNewOrigin",
        "nIteration",
        "CustomRound",
        "nDistancefromNewOrigin",
        "nIteration",
        "math",
        "cos",
        "math",
        "pi",
        "nAngleFromNewOrigin",
        "nIteration",
        "x",
        "y",
        "nShiftX",
        "nShiftY",
        "math",
        "sqrt",
        "nShiftX",
        "nShiftY",
        "nIteration",
        "len",
        "nXYNewPoints",
        "nXYNewPoints",
        "nIteration",
        "nShiftX",
        "nXYNewPoints",
        "nIteration",
        "nShiftY",
        "nNewDist",
        "time",
        "time",
        "measurment",
        "lidar",
        "iter_measurments",
        "measurment",
        "measurment",
        "nMaxRange",
        "measurment",
        "nMinRange",
        "CustomRound",
        "measurment",
        "math",
        "sin",
        "math",
        "pi",
        "measurment",
        "CustomRound",
        "measurment",
        "math",
        "cos",
        "math",
        "pi",
        "measurment",
        "x",
        "y",
        "nXYPoints",
        "nFound",
        "nAngleFromOrigin",
        "append",
        "round",
        "measurment",
        "nDistancefromOrigin",
        "append",
        "measurment",
        "nXYPoints",
        "append",
        "x",
        "y",
        "nTries",
        "nFound",
        "nTries",
        "nMapCoverage",
        "nTries",
        "RefreshMap",
        "nXYPoints",
        "len",
        "nXYPoints",
        "time",
        "time",
        "input",
        "lidar",
        "stop",
        "lidar",
        "disconnect",
        "RPLidar",
        "PORT_NAME",
        "lidar",
        "set_pwm",
        "measurment",
        "lidar",
        "iter_measurments",
        "measurment",
        "measurment",
        "nMaxRange",
        "measurment",
        "nMinRange",
        "CustomRound",
        "measurment",
        "math",
        "sin",
        "math",
        "pi",
        "measurment",
        "CustomRound",
        "measurment",
        "math",
        "cos",
        "math",
        "pi",
        "measurment",
        "x",
        "y",
        "nXYNewPoints",
        "nFound",
        "nAngleFromNewOrigin",
        "append",
        "round",
        "measurment",
        "nDistancefromNewOrigin",
        "append",
        "measurment",
        "nXYNewPoints",
        "append",
        "x",
        "y",
        "nTries",
        "nFound",
        "nTries",
        "nMapCoverage",
        "nTries",
        "RefreshMap",
        "nXYNewPoints",
        "Count",
        "Count",
        "nCurXAdjust",
        "nCurYAdjust",
        "nIteration",
        "random",
        "randint",
        "len",
        "nXYNewPoints",
        "nXYNewPoints",
        "nRandom",
        "nCurXAdjust",
        "nXYNewPoints",
        "nRandom",
        "nCurYAdjust",
        "nNewSpot",
        "nXYPoints",
        "nFindCount",
        "nFindCount",
        "nIteration",
        "nImageMatchGoal",
        "nCurXAdjust",
        "nCurYAdjust",
        "Count",
        "nFindCount",
        "nIteration",
        "nIteration",
        "random",
        "randint",
        "len",
        "nXYNewPoints",
        "nXYNewPoints",
        "nRandom",
        "nCurXAdjust",
        "nXYNewPoints",
        "nRandom",
        "nCurYAdjust",
        "nNewSpot",
        "nXYPoints",
        "nFindCount",
        "nCurXAdjust",
        "nCurYAdjust",
        "Count",
        "nFindCount",
        "nIteration",
        "nFindCount",
        "nIteration",
        "nImageMatchGoal",
        "nCurXAdjust",
        "nCurYAdjust",
        "nFindCount",
        "nIteration",
        "input",
        "ShiftNewMap",
        "nCurXAdjust",
        "nCurYAdjust",
        "screen",
        "fill",
        "RefreshMap",
        "nXYPoints",
        "RefreshMap",
        "nXYNewPoints",
        "nFindCount",
        "nIteration",
        "nImageMatchGoal",
        "nFindCount",
        "nIteration",
        "nImageMatchGoal",
        "RotateNewMap",
        "screen",
        "fill",
        "RefreshMap",
        "nXYPoints",
        "RefreshMap",
        "nXYNewPoints",
        "time",
        "time",
        "time",
        "sleep",
        "KeyboardInterrupt",
        "lidar",
        "stop",
        "lidar",
        "disconnect",
        "pygame",
        "quit"
    ],
    "literals": [
        "'/dev/ttyUSB0'",
        "'Recording measurements... '",
        "\"exiting measurements\"",
        "\" first map complete, x\"",
        "\" readings \"",
        "\"MOVE and press key\"",
        "\"exiting new measurements\"",
        "\"degree\"",
        "\"2nd try at \"",
        "\"2nd RESULTS at \"",
        "\"match \"",
        "\"x.y,% \"",
        "\"key for shift\"",
        "\"rotate\"",
        "\"sleeping\"",
        "'Stoping.'"
    ],
    "variables": [
        "PORT_NAME",
        "lidar",
        "screen",
        "font",
        "nMinRange",
        "nMaxRange",
        "nXAdjust",
        "nYAdjust",
        "nScaleDown",
        "nImageMatchGoal",
        "nMapCoverage",
        "xpass",
        "ypass",
        "xpass",
        "ypass",
        "xpass",
        "ypass",
        "xpass",
        "ypass",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "text_surface",
        "xpass",
        "ypass",
        "xpass",
        "ypass",
        "xpass",
        "ypass",
        "xpass",
        "ypass",
        "xpass",
        "ypass",
        "nAngleFromNewOrigin",
        "nIteration",
        "x",
        "y",
        "nXYNewPoints",
        "nIteration",
        "nNewDist",
        "nXYNewPoints",
        "nIteration",
        "nDistancefromNewOrigin",
        "nIteration",
        "nXYPoints",
        "nDistancefromOrigin",
        "nAngleFromOrigin",
        "nFound",
        "nTries",
        "x",
        "y",
        "nFound",
        "nTries",
        "nTries",
        "nFound",
        "nXYNewPoints",
        "nAngleFromNewOrigin",
        "nDistancefromNewOrigin",
        "lidar",
        "x",
        "y",
        "nFound",
        "nTries",
        "nTries",
        "nFound",
        "nCurXAdjust",
        "nCurYAdjust",
        "nFindCount",
        "Count",
        "nFindCount",
        "nIteration",
        "nRandom",
        "nNewSpot",
        "nFindCount",
        "nFindCount",
        "nIteration",
        "nRandom",
        "nNewSpot",
        "nFindCount"
    ],
    "comments": [
        "# !/usr/bin/env python3",
        "'''Records measurments to a given file. Usage example:",
        "$ ./record_measurments.py out.txt'''",
        "#mport sys",
        "Import and initialize the pygame library",
        "Set up the drawing window",
        "Fill the background with white",
        "Based on LIDAR specs",
        "needed for placing things on the grid, what is the origin in the screen variable above, using center of screen",
        "makes image fit on screen, scales everything down",
        "how accurate do you want the match when comparing known map with current map",
        "percentage",
        "cotrols the number or readings when you scan the room",
        "used to round values consistently / experimentation",
        "value is starting amount",
        "precision is the modulus  eg. 10 rounds to the nearest 10",
        "-1 is rounded to 10's left of decimal",
        "print(xpass,ypass)",
        "Quad 2",
        "paint room on screen",
        "grid values",
        "print(xpass,ypass)",
        "Quad 2",
        "rotate the new map to assist with matching to the new map",
        "moves new map around, changes the readings",
        "nAngleFromNewOrigin.append(nAngleFromOrigin[nIteration])",
        "nXYNewPoints[nIteration] = (nXYNewPoints[nIteration][0] + nShiftX, nXYNewPoints[nIteration][1] + nShiftY)",
        "nAngleFromNewOrigin.append(nAngleFromOrigin[nIteration])",
        "print(nDistancefromOrigin[nIteration] )",
        "used to see how many duplicate readings you avoided.   when you hit target percentage over last 1000 readings, exit.  the map is accurate enough",
        "collect points for initial map",
        "convert angle and distance to x and y",
        "from lidar library",
        "position 1 = accuracy",
        "2 is angle from lidar unit",
        "3 is distance from lidar unit",
        "avoids duplicates",
        "nXPositions.append(x)",
        "nYPositions.append(y)",
        "if over the last 1000 iterrations, the hit percentages is high, then exit",
        "else:",
        "print(\"tries, arraysize\", (nFound/nTries) * 100, len(nAngleFromOrigin))",
        "update display",
        "variables for 2nd map",
        "make reasings",
        "convert angle and distance to x and y",
        "avoids duplicates",
        "if over the last 1000 iterrations, the hit percentages is high, then exit",
        "else:",
        "print(\"tries, arraysize\", (nFound/nTries) * 100, len(nAngleFromOrigin))",
        "adds 2nd map to the screen",
        "TRY TO FIND THE NEW POSITION BY MATCHING THE MAPPING",
        "code not finished, currently only searches top right quadrant of the grid",
        "# temp, generates a map using the original instead of scannning for test purposes only",
        "searching a grid increments of 10 to match the accuracy of the initial readings",
        "fewer readings speeds up search",
        "different distances",
        "compare 20 different random points at this distance and the current angle",
        "pick random matches not 20 in a row",
        "calculate the adjusted position of the 2nd map to see if it matches the original",
        "if close , try again with more points to confirm the final location",
        "pick random matches not 20 in a row",
        "found a match when you it target accuracy goal, exit",
        "shift the map and see the 2 are perfectly overlayed (proof you found the current location from the origin)",
        "rotate 1 degree at a time and then compare at all positions on the grid again",
        "Done! Time to quit."
    ],
    "docstrings": [],
    "functions": [
        "CustomRound",
        "PrintAtSpot",
        "PaintMeasures",
        "RefreshMap",
        "RotateNewMap",
        "ShiftNewMap"
    ],
    "classes": []
}