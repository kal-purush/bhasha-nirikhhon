{
    "identifiers": [
        "pytest",
        "pytest",
        "param",
        "itertools",
        "product",
        "numpy",
        "np",
        "numpy",
        "core",
        "_rational_tests",
        "rational",
        "numpy",
        "testing",
        "assert_array_equal",
        "assert_warns",
        "IS_PYPY",
        "a",
        "a",
        "param",
        "ndarray",
        "id",
        "np",
        "ndarray",
        "a",
        "a",
        "view",
        "MyArr",
        "subclass",
        "a",
        "a",
        "dtype",
        "a",
        "param",
        "ArrayDunder",
        "id",
        "param",
        "id",
        "a",
        "a",
        "a",
        "__array_interface__",
        "param",
        "ArrayInterface",
        "id",
        "a",
        "a",
        "a",
        "__array_struct__",
        "param",
        "ArrayStruct",
        "id",
        "times",
        "extended_precision",
        "user_dtype",
        "param",
        "np",
        "sqrt",
        "np",
        "float16",
        "id",
        "param",
        "np",
        "sqrt",
        "np",
        "float32",
        "id",
        "param",
        "np",
        "sqrt",
        "np",
        "float64",
        "id",
        "extended_precision",
        "param",
        "np",
        "sqrt",
        "np",
        "longdouble",
        "id",
        "param",
        "np",
        "sqrt",
        "np",
        "complex64",
        "id",
        "param",
        "np",
        "sqrt",
        "np",
        "complex128",
        "id",
        "extended_precision",
        "param",
        "np",
        "sqrt",
        "np",
        "longcomplex",
        "id",
        "param",
        "np",
        "int8",
        "id",
        "param",
        "np",
        "int16",
        "id",
        "param",
        "np",
        "int32",
        "id",
        "param",
        "np",
        "int64",
        "id",
        "param",
        "np",
        "uint8",
        "id",
        "param",
        "np",
        "uint16",
        "id",
        "param",
        "np",
        "uint32",
        "id",
        "param",
        "np",
        "uint64",
        "id",
        "user_dtype",
        "param",
        "rational",
        "id",
        "np",
        "array",
        "isinstance",
        "structured",
        "np",
        "structured",
        "dtype",
        "np",
        "dtype",
        "param",
        "structured",
        "id",
        "times",
        "param",
        "np",
        "timedelta64",
        "id",
        "param",
        "np",
        "timedelta64",
        "id",
        "param",
        "np",
        "timedelta64",
        "id",
        "param",
        "np",
        "datetime64",
        "id",
        "param",
        "np",
        "datetime64",
        "id",
        "param",
        "np",
        "bytes_",
        "id",
        "param",
        "np",
        "unicode_",
        "id",
        "param",
        "np",
        "id",
        "dtype",
        "dtype",
        "itemsize",
        "issubclass",
        "dtype",
        "np",
        "datetime64",
        "np",
        "timedelta64",
        "dtype",
        "name",
        "endswith",
        "pytest",
        "mark",
        "parametrize",
        "ids",
        "obj",
        "isinstance",
        "obj",
        "pytest",
        "xfail",
        "len",
        "obj",
        "np",
        "dtype",
        "length",
        "np",
        "array",
        "obj",
        "dtype",
        "dtype",
        "expected",
        "np",
        "array",
        "obj",
        "dtype",
        "dtype",
        "expected",
        "np",
        "array",
        "obj",
        "dtype",
        "np",
        "array",
        "arr",
        "dtype",
        "dtype",
        "expected",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "pytest",
        "mark",
        "parametrize",
        "ids",
        "obj",
        "len",
        "obj",
        "np",
        "dtype",
        "length",
        "np",
        "array",
        "obj",
        "dtype",
        "np",
        "array",
        "arr",
        "arr",
        "dtype",
        "dtype",
        "expected",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "pytest",
        "mark",
        "parametrize",
        "arraylikes",
        "arraylike",
        "np",
        "array",
        "np",
        "array",
        "len",
        "obj",
        "np",
        "dtype",
        "length",
        "arraylike",
        "obj",
        "np",
        "array",
        "obj",
        "dtype",
        "arr",
        "shape",
        "arr",
        "dtype",
        "expected",
        "np",
        "array",
        "dtype",
        "arr",
        "shape",
        "np",
        "array",
        "dtype",
        "arr",
        "shape",
        "np",
        "array",
        "dtype",
        "arr",
        "shape",
        "arr",
        "dtype",
        "np",
        "array",
        "dtype",
        "arr",
        "shape",
        "arr",
        "dtype",
        "i",
        "np",
        "MAXDIMS",
        "nested",
        "np",
        "array",
        "nested",
        "dtype",
        "arr",
        "shape",
        "np",
        "MAXDIMS",
        "pytest",
        "raises",
        "ValueError",
        "np",
        "array",
        "nested",
        "dtype",
        "np",
        "array",
        "arr",
        "shape",
        "arr",
        "dtype",
        "np",
        "dtype",
        "pytest",
        "mark",
        "parametrize",
        "scalar_instances",
        "scalar",
        "np",
        "array",
        "scalar",
        "arr",
        "shape",
        "arr",
        "dtype",
        "scalar",
        "dtype",
        "scalar",
        "np",
        "bytes_",
        "pytest",
        "xfail",
        "np",
        "array",
        "scalar",
        "scalar",
        "arr",
        "shape",
        "arr",
        "dtype",
        "scalar",
        "dtype",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "sc1",
        "sc2",
        "product",
        "scalar_instances",
        "scalar_instances",
        "sc1",
        "values",
        "sc2",
        "values",
        "np",
        "array",
        "sc1",
        "sc2",
        "arr",
        "shape",
        "sc1",
        "dtype",
        "sc2",
        "dtype",
        "np",
        "promote_types",
        "dt1",
        "dt2",
        "arr",
        "dtype",
        "expected_dtype",
        "e",
        "arr",
        "dtype",
        "np",
        "dtype",
        "pytest",
        "mark",
        "parametrize",
        "scalar_instances",
        "scalar",
        "isinstance",
        "scalar",
        "np",
        "inexact",
        "scalar",
        "scalar",
        "is_parametric_dtype",
        "scalar",
        "dtype",
        "scalar",
        "rational",
        "pytest",
        "xfail",
        "np",
        "array",
        "scalar",
        "dtype",
        "astype",
        "scalar",
        "dtype",
        "np",
        "array",
        "scalar",
        "reshape",
        "np",
        "array",
        "scalar",
        "np",
        "empty",
        "dtype",
        "scalar",
        "dtype",
        "scalar",
        "np",
        "empty",
        "dtype",
        "scalar",
        "dtype",
        "scalar",
        "assert_array_equal",
        "arr",
        "arr1",
        "assert_array_equal",
        "arr",
        "arr2",
        "assert_array_equal",
        "arr",
        "arr3",
        "assert_array_equal",
        "arr",
        "arr4",
        "pytest",
        "mark",
        "xfail",
        "IS_PYPY",
        "reason",
        "pytest",
        "mark",
        "filterwarnings",
        "pytest",
        "mark",
        "parametrize",
        "scalar_instances",
        "times",
        "cast_to",
        "cast_to",
        "dtype",
        "scalar",
        "scalar_instances",
        "times",
        "extended_precision",
        "user_dtype",
        "scalar",
        "values",
        "dtype",
        "np",
        "scalar",
        "dtype",
        "fields",
        "dtype",
        "fields",
        "pytest",
        "raises",
        "np",
        "array",
        "scalar",
        "astype",
        "dtype",
        "np",
        "array",
        "scalar",
        "dtype",
        "dtype",
        "np",
        "array",
        "scalar",
        "astype",
        "dtype",
        "ValueError",
        "RuntimeError",
        "pytest",
        "raises",
        "np",
        "array",
        "scalar",
        "dtype",
        "dtype",
        "np",
        "zeros",
        "dtype",
        "dtype",
        "pytest",
        "raises",
        "scalar",
        "np",
        "array",
        "scalar",
        "dtype",
        "dtype",
        "assert_array_equal",
        "arr",
        "cast",
        "np",
        "zeros",
        "dtype",
        "dtype",
        "scalar",
        "assert_array_equal",
        "ass",
        "cast",
        "pytest",
        "mark",
        "parametrize",
        "np",
        "int64",
        "np",
        "float32",
        "pytest",
        "mark",
        "parametrize",
        "param",
        "np",
        "timedelta64",
        "id",
        "param",
        "np",
        "timedelta64",
        "id",
        "param",
        "np",
        "datetime64",
        "id",
        "param",
        "np",
        "datetime64",
        "id",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "dtype",
        "scalar",
        "np",
        "array",
        "scalar",
        "dtype",
        "dtype",
        "np",
        "array",
        "scalar",
        "astype",
        "dtype",
        "np",
        "ones",
        "dtype",
        "dtype",
        "scalar",
        "assert_array_equal",
        "arr",
        "cast",
        "assert_array_equal",
        "cast",
        "cast",
        "pytest",
        "mark",
        "parametrize",
        "np",
        "int64",
        "np",
        "float32",
        "pytest",
        "mark",
        "parametrize",
        "param",
        "np",
        "timedelta64",
        "id",
        "param",
        "np",
        "timedelta64",
        "id",
        "dtype",
        "scalar",
        "np",
        "array",
        "scalar",
        "dtype",
        "dtype",
        "np",
        "array",
        "scalar",
        "astype",
        "dtype",
        "np",
        "ones",
        "dtype",
        "dtype",
        "scalar",
        "assert_array_equal",
        "arr",
        "cast",
        "assert_array_equal",
        "cast",
        "cast",
        "pytest",
        "mark",
        "parametrize",
        "param",
        "id",
        "param",
        "id",
        "pytest",
        "mark",
        "parametrize",
        "np",
        "datetime64",
        "np",
        "timedelta64",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "scalar_type",
        "val",
        "unit",
        "scalar_type",
        "val",
        "unit",
        "pytest",
        "raises",
        "RuntimeError",
        "np",
        "array",
        "scalar",
        "dtype",
        "pytest",
        "raises",
        "RuntimeError",
        "np",
        "array",
        "scalar",
        "astype",
        "np",
        "ones",
        "dtype",
        "pytest",
        "raises",
        "RuntimeError",
        "scalar",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "initial",
        "i",
        "np",
        "MAXDIMS",
        "nested",
        "np",
        "array",
        "nested",
        "dtype",
        "arr",
        "shape",
        "np",
        "MAXDIMS",
        "pytest",
        "raises",
        "ValueError",
        "np",
        "array",
        "nested",
        "dtype",
        "assert_warns",
        "np",
        "VisibleDeprecationWarning",
        "np",
        "array",
        "nested",
        "arr",
        "dtype",
        "np",
        "dtype",
        "arr",
        "shape",
        "np",
        "MAXDIMS",
        "arr",
        "item",
        "initial",
        "l",
        "append",
        "l",
        "np",
        "array",
        "l",
        "l",
        "l",
        "dtype",
        "arr",
        "shape",
        "np",
        "MAXDIMS",
        "np",
        "array",
        "l",
        "l",
        "dtype",
        "arr",
        "shape",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "pytest",
        "mark",
        "parametrize",
        "arraylikes",
        "arraylike",
        "arraylike",
        "np",
        "ones",
        "initial",
        "i",
        "np",
        "MAXDIMS",
        "nested",
        "pytest",
        "raises",
        "ValueError",
        "np",
        "array",
        "nested",
        "dtype",
        "np",
        "array",
        "nested",
        "dtype",
        "arr",
        "shape",
        "np",
        "MAXDIMS",
        "arr",
        "item",
        "np",
        "array",
        "initial",
        "item",
        "pytest",
        "mark",
        "parametrize",
        "arraylikes",
        "arraylike",
        "np",
        "arange",
        "reshape",
        "arraylike",
        "arr",
        "np",
        "array",
        "arr",
        "arr",
        "dtype",
        "shape",
        "arr",
        "isinstance",
        "arr",
        "np",
        "ndarray",
        "pytest",
        "xfail",
        "pytest",
        "raises",
        "ValueError",
        "np",
        "array",
        "arr",
        "arr",
        "arr",
        "dtype",
        "np",
        "array",
        "dtype",
        "arr",
        "shape",
        "pytest",
        "raises",
        "ValueError",
        "np",
        "array",
        "np",
        "empty",
        "dtype",
        "obj",
        "append",
        "__len__",
        "obj",
        "append",
        "mylist",
        "pytest",
        "raises",
        "ValueError",
        "np",
        "array",
        "obj",
        "__len__",
        "obj",
        "append",
        "obj",
        "append",
        "mylist",
        "np",
        "array",
        "obj",
        "obj",
        "ValueError",
        "obj",
        "append",
        "np",
        "array",
        "baditem",
        "np",
        "array",
        "obj",
        "pytest",
        "mark",
        "parametrize",
        "arraylikes",
        "arraylike",
        "np",
        "array",
        "arraylike",
        "arr",
        "np",
        "array",
        "obj",
        "dtype",
        "assert_array_equal",
        "arr",
        "res",
        "np",
        "array",
        "obj",
        "dtype",
        "res",
        "obj",
        "np",
        "ndarray",
        "np",
        "array",
        "arr",
        "view",
        "ArraySubclass",
        "np",
        "array",
        "obj",
        "assert_array_equal",
        "arr",
        "res",
        "pytest",
        "raises",
        "np",
        "array",
        "obj",
        "arr",
        "np",
        "array",
        "obj",
        "assert_array_equal",
        "arr",
        "res",
        "pytest",
        "raises",
        "ValueError",
        "np",
        "array",
        "obj"
    ],
    "literals": [
        "\"ndarray\"",
        "\"__array__\"",
        "\"memoryview\"",
        "\"__array_interface__\"",
        "\"__array_struct__\"",
        "\"float16\"",
        "\"float32\"",
        "\"float64\"",
        "\"longdouble\"",
        "\"complex64\"",
        "\"complex128\"",
        "\"clongdouble\"",
        "\"int8\"",
        "\"int16\"",
        "\"int32\"",
        "\"int64\"",
        "\"uint8\"",
        "\"uint16\"",
        "\"uint32\"",
        "\"uint64\"",
        "\"rational\"",
        "\"i,i\"",
        "\"i,i\"",
        "\"structured\"",
        "\"timedelta64[generic]\"",
        "\"s\"",
        "\"timedelta64[s]\"",
        "\"NaT\"",
        "\"s\"",
        "\"timedelta64[s](NaT)\"",
        "\"NaT\"",
        "\"datetime64[generic](NaT)\"",
        "\"2020-06-07 12:43\"",
        "\"ms\"",
        "\"datetime64[ms]\"",
        "b\"1234\"",
        "\"bytes\"",
        "\"2345\"",
        "\"unicode\"",
        "b\"4321\"",
        "\"unstructured_void\"",
        "\"64\"",
        "\"obj\"",
        "\"string\"",
        "\"object\"",
        "\"1.2\"",
        "\"10**43\"",
        "\"None\"",
        "\"string\"",
        "\"The Single object (first assert) uses a different branch \"",
        "\"and thus gives a different result (either wrong or longer\"",
        "\"string than normally discovered).\"",
        "f\"S{length}\"",
        "\"S\"",
        "\"S\"",
        "\"O\"",
        "\"S\"",
        "\"Only single array unpacking is supported\"",
        "\"obj\"",
        "\"string\"",
        "\"object\"",
        "\"1.2\"",
        "\"10**43\"",
        "\"None\"",
        "\"string\"",
        "f\"S{length}\"",
        "\"O\"",
        "\"S\"",
        "\"Only single array unpacking is supported\"",
        "\"arraylike\"",
        "f\"S{length}\"",
        "\"S\"",
        "\"i,i,i\"",
        "\"i,i,i\"",
        "\"string\"",
        "\"c\"",
        "\"c\"",
        "\"string\"",
        "\"c\"",
        "\"c\"",
        "\"string\"",
        "'c'",
        "\"c\"",
        "\"O\"",
        "\"scalar\"",
        "\"Nested bytes use len(str(scalar)) currently.\"",
        "\"Coercion to string is not symmetric\"",
        "\"O\"",
        "\"scalar\"",
        "\"0-D object array to a unit-less datetime cast fails\"",
        "\"`int(np.complex128(3))` fails on PyPy\"",
        "\"ignore::numpy.ComplexWarning\"",
        "\"cast_to\"",
        "\"dtype\"",
        "\"scalar\"",
        "\"NaT\"",
        "\"s\"",
        "\"timedelta64[s](NaT)\"",
        "\"s\"",
        "\"timedelta64[s]\"",
        "\"NaT\"",
        "\"generic\"",
        "\"datetime64[generic](NaT)\"",
        "\"D\"",
        "\"datetime64[D]\"",
        "\"This uses int(scalar) or float(scalar) to assign, which \"",
        "\"fails.  However, casting currently does not fail.\"",
        "\"dtype\"",
        "\"scalar\"",
        "\"ns\"",
        "\"timedelta64[ns]\"",
        "\"generic\"",
        "\"timedelta64[generic]\"",
        "\"val\"",
        "\"unit\"",
        "\"s\"",
        "\"[s]\"",
        "\"D\"",
        "\"[D]\"",
        "\"scalar_type\"",
        "\"Error not raised for assignment\"",
        "\"S6\"",
        "\"S6\"",
        "\"S6\"",
        "\"No deprecation warning given.\"",
        "\"float64\"",
        "\"float64\"",
        "\"O\"",
        "\"For arrays and memoryview, this used to not complain \"",
        "\"and assign to a too small array instead. For other \"",
        "\"array-likes the error is different because fewer (only \"",
        "\"MAXDIM-1) dimensions are found, failing the last test.\"",
        "\"arraylike\"",
        "\"float64\"",
        "\"arraylike\"",
        "\"does not raise ValueError below, because it discovers \"",
        "\"the dimension as (2,) and not (2, 2, 2)\"",
        "\"not actually a sequence!\"",
        "\"arraylike\"",
        "\"e.g. quantities raise on this\""
    ],
    "variables": [
        "a",
        "a",
        "__array_interface__",
        "a",
        "__array_struct__",
        "structured",
        "length",
        "expected",
        "arr",
        "length",
        "expected",
        "arr",
        "obj",
        "obj",
        "length",
        "expected",
        "obj",
        "arr",
        "arr",
        "arr",
        "arr",
        "arr",
        "nested",
        "nested",
        "arr",
        "arr",
        "arr",
        "arr",
        "sc1",
        "sc2",
        "arr",
        "dt1",
        "dt2",
        "expected_dtype",
        "scalar",
        "arr",
        "arr1",
        "arr2",
        "arr3",
        "arr3",
        "arr4",
        "arr4",
        "dtype",
        "scalar",
        "cast",
        "res",
        "res",
        "arr",
        "ass",
        "ass",
        "arr",
        "cast",
        "ass",
        "ass",
        "arr",
        "cast",
        "ass",
        "ass",
        "scalar",
        "cast",
        "ass",
        "ass",
        "initial",
        "nested",
        "nested",
        "arr",
        "arr",
        "l",
        "arr",
        "arr",
        "initial",
        "nested",
        "nested",
        "arr",
        "arr",
        "arr",
        "arr",
        "obj",
        "obj",
        "obj",
        "obj",
        "arr",
        "obj",
        "res",
        "res",
        "arr",
        "obj",
        "res",
        "obj",
        "res"
    ],
    "comments": [
        "base array:",
        "subclass:",
        "Array-interface",
        "memory-view",
        "Array-interface",
        "need to hold on to keep interface valid",
        "Array-Struct",
        "need to hold on to keep struct valid",
        "Hard-coded list of scalar instances.",
        "Floats:",
        "Complex:",
        "Bool:",
        "XFAIL: Bool should be added, but has some bad properties when it",
        "comes to strings, see also gh-9875",
        "yield param(np.bool_(0), id=\"bool\")",
        "Integers:",
        "Rational:",
        "Cannot create a structured void scalar directly:",
        "Datetimes and timedelta",
        "Strings and unstructured void:",
        "Generic time units",
        "A nested array is also discovered correctly",
        "We unpack exactly one level of array likes",
        "the length of the included item, not of the float dtype",
        "casting to string usually calls str(obj)",
        "Void dtypes with structures discover tuples as elements",
        "Check that the character special case errors correctly if the",
        "array is too deep:",
        "2 dimensions (due to string being sequence)",
        "Additionally to string this test also runs into a corner case",
        "with datetime promotion (the difference is the promotion order).",
        "test all combinations:",
        "Will currently always go to object dtype",
        "This tests various scalar coercion paths, mainly for the numerical",
        "types.  It includes some paths not directly related to `np.array`",
        "Ensure we have a full-precision number if available",
        "datetime with unit will be named \"datetime64[unit]\"",
        "Rational generally fails due to a missing cast. In the future",
        "object casts should automatically be defined based on `setitem`.",
        "Use casting from object:",
        "Test various ways to create an array containing this scalar:",
        "All of these methods should yield the same results",
        "After change, can enable times here, and below and it will work,",
        "Right now times are too complex, so map out some details below.",
        "use to parametrize only the target dtype",
        "XFAIL: Some extended precision tests fail, because assigning to",
        "complex256 will use float(float128). Rational fails currently.",
        "Here, coercion to \"V6\" works, but the cast fails.",
        "Since the types are identical, SETITEM takes care of",
        "this, but has different rules than the cast.",
        "XFAIL: np.array(scalar, dtype=dtype)",
        "The main test, we first try to use casting and if it succeeds",
        "continue below testing that things are the same, otherwise",
        "test that the alternative paths at least also fail.",
        "coercion should also raise (error type may change)",
        "assignment should also raise",
        "Non error path:",
        "assignment behaves the same",
        "raises, as would np.array([scalar], dtype=dtype)",
        "Only \"ns\" and \"generic\" timedeltas can be converted to numbers",
        "so these are slightly special.",
        "raises, as would np.array([scalar], dtype=dtype)",
        "The error type is not ideal, fails because string is too short:",
        "We discover object automatically at this time:",
        "Test that this also works for two nested sequences",
        "Also check a ragged case:",
        "We try storing an array like into an array, but the array-like",
        "will have too many dimensions.  This means the shape discovery",
        "decides that the array-like must be treated as an object (a special",
        "case of ragged discovery).  The result will be an array with one",
        "dimension less than the maximum dimensions, and the array being",
        "assigned to it (which does work for object or if `float(arraylike)`",
        "works).",
        "if not isinstance(initial, (np.ndarray, memoryview)):",
        "pytest.xfail(",
        "\"When coercing to object, these cases currently discover \"",
        "\"fewer dimensions than ndarray failing the second part.\")",
        "It will refuse to assign the array into",
        "If this is object, we end up assigning a (1, 1) array into (1,)",
        "(due to running out of dimensions), this is currently supported but",
        "a special case which is not ideal.",
        "Array is ragged in the second dimension already:",
        "Array is ragged in the third dimension:",
        "This is a broadcast error during assignment, because",
        "the array shape would be (2, 2, 2) but `arr[0, 0] = arr` fails.",
        "The empty sequence stops further dimension discovery, so the",
        "result shape will be (0,) which leads to an error during:",
        "These are tests for bad objects passed into `np.array`, in general",
        "these have undefined behaviour.  In the old code they partially worked",
        "when now they will fail.  We could (and maybe should) create a copy",
        "of all sequences to be safe against bad-actors.",
        "List to coerce, `mylist` will append to it during coercion",
        "changes to RuntimeError",
        "Note: We do not test a shrinking list.  These do very evil things",
        "and the only way to fix them would be to copy all sequences.",
        "(which may be a real option in the future).",
        "List to coerce, `mylist` will mutate the first element",
        "replace with a different list.",
        "with pytest.raises(RuntimeError):  # Will error in the future",
        "List to coerce, `mylist` will mutate the first element",
        "replace with a different list.",
        "Runs into a corner case in the new code, the `array(2)` is cached",
        "so replacing it invalidates the cache.",
        "with pytest.raises(RuntimeError):  # Will error in the future",
        "A single array-like is always converted:",
        "But a single 0-D nested array-like never:",
        "The subclass is simply cast:",
        "If the 0-D array-like is included, __float__ is currently",
        "guaranteed to be used.  We may want to change that, quantities",
        "and masked arrays half make use of this.",
        "The same holds for memoryview:",
        "The error type does not matter much here."
    ],
    "docstrings": [
        "\"\"\"\nTests for array coercion, mainly through testing `np.array` results directly.\nNote that other such tests exist e.g. in `test_api.py` and many corner-cases\nare tested (sometimes indirectly) elsewhere.\n\"\"\"",
        "\"\"\"\n    Generator for functions converting an array into various array-likes.\n    If full is True (default) includes array-likes not capable of handling\n    all dtypes\n    \"\"\"",
        "\"\"\"Returns True if the the dtype is a parametric legacy dtype (itemsize\n    is 0, or a datetime without units)\n    \"\"\"",
        "\"\"\"\n        Test that in most cases:\n           * `np.array(scalar, dtype=dtype)`\n           * `np.empty((), dtype=dtype)[()] = scalar`\n           * `np.array(scalar).astype(dtype)`\n        should behave the same.  The only exceptions are paramteric dtypes\n        (mainly datetime/timedelta without unit) and void without fields.\n        \"\"\""
    ],
    "functions": [
        "arraylikes",
        "ndarray",
        "subclass",
        "__array__",
        "scalar_instances",
        "is_parametric_dtype",
        "test_basic_stringlength",
        "test_nested_arrays_stringlength",
        "test_unpack_first_level",
        "test_void_special_case",
        "test_char_special_case",
        "test_char_special_case_deep",
        "test_unknown_object",
        "test_scalar",
        "test_scalar_promotion",
        "test_scalar_coercion",
        "test_scalar_coercion_same_as_cast_and_assignment",
        "test_coercion_basic",
        "test_coercion_timedelta_convert_to_number",
        "test_coercion_assignment_times",
        "test_nested_simple",
        "test_pathological_self_containing",
        "test_nested_arraylikes",
        "test_uneven_depth_ragged",
        "test_empty_sequence",
        "test_growing_list",
        "__len__",
        "test_mutated_list",
        "__len__",
        "test_replace_0d_array",
        "__len__",
        "__getitem__",
        "test_0d_object_special_case",
        "test_0d_generic_special_case",
        "__float__"
    ],
    "classes": [
        "MyArr",
        "ArrayDunder",
        "ArrayInterface",
        "ArrayStruct",
        "TestStringDiscovery",
        "TestScalarDiscovery",
        "TestTimeScalars",
        "TestNested",
        "TestBadSequences",
        "mylist",
        "mylist",
        "baditem",
        "TestArrayLikes",
        "ArraySubclass"
    ]
}