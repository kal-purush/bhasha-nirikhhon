{
    "identifiers": [
        "torch",
        "torchvision",
        "torchvision",
        "transforms",
        "transforms",
        "argparse",
        "numpy",
        "np",
        "torch",
        "autograd",
        "Variable",
        "experiment",
        "ex",
        "model",
        "load_model",
        "utils",
        "post_config_hook",
        "modules",
        "LogisticRegression",
        "modules",
        "simclr",
        "simclrnet",
        "modules",
        "transformations",
        "TransformsSimCLR",
        "cifar",
        "CIFAR10",
        "CIFAR100",
        "coteachingloss",
        "loss_coteaching",
        "torch",
        "nn",
        "functional",
        "F",
        "numpy",
        "np",
        "shutil",
        "copy",
        "args",
        "train_loader",
        "epoch",
        "model1",
        "optimizer1",
        "model2",
        "optimizer2",
        "rate_schedule",
        "noise_or_not",
        "step",
        "images",
        "labels",
        "cleanlabels",
        "indexes",
        "train_loader",
        "indexes",
        "cpu",
        "numpy",
        "transpose",
        "step",
        "args",
        "num_iter_per_epoch",
        "Variable",
        "images",
        "to",
        "args",
        "device",
        "Variable",
        "labels",
        "to",
        "args",
        "device",
        "model1",
        "images",
        "logits1",
        "argmax",
        "train_total",
        "len",
        "images",
        "train_correct",
        "pred1",
        "labels",
        "sum",
        "item",
        "model2",
        "images",
        "logits2",
        "argmax",
        "train_total2",
        "len",
        "images",
        "train_correct2",
        "pred2",
        "labels",
        "sum",
        "item",
        "loss_coteaching",
        "logits1",
        "logits2",
        "labels",
        "rate_schedule",
        "epoch",
        "ind",
        "noise_or_not",
        "pure_ratio_1_list",
        "append",
        "pure_ratio_1",
        "pure_ratio_2_list",
        "append",
        "pure_ratio_2",
        "optimizer1",
        "zero_grad",
        "loss_1",
        "backward",
        "optimizer1",
        "step",
        "optimizer2",
        "zero_grad",
        "loss_2",
        "backward",
        "optimizer2",
        "step",
        "train_correct",
        "train_total",
        "train_correct2",
        "train_total2",
        "step",
        "epoch",
        "args",
        "n_epoch",
        "step",
        "len",
        "train_loader",
        "rate_schedule",
        "epoch",
        "train_acc1",
        "train_acc2",
        "loss_1",
        "item",
        "loss_2",
        "item",
        "np",
        "sum",
        "pure_ratio_1_list",
        "len",
        "pure_ratio_1_list",
        "np",
        "sum",
        "pure_ratio_2_list",
        "len",
        "pure_ratio_2_list",
        "train_correct",
        "train_total",
        "train_correct2",
        "train_total2",
        "train_acc1",
        "train_acc2",
        "pure_ratio_1_list",
        "pure_ratio_2_list",
        "args",
        "test_loader",
        "model1",
        "model2",
        "model1",
        "eval",
        "images",
        "labels",
        "cleanlabels",
        "index",
        "test_loader",
        "Variable",
        "images",
        "to",
        "args",
        "device",
        "Variable",
        "labels",
        "to",
        "args",
        "device",
        "model1",
        "images",
        "F",
        "softmax",
        "logits1",
        "dim",
        "outputs1",
        "argmax",
        "total1",
        "labels",
        "size",
        "pred1",
        "labels",
        "sum",
        "item",
        "model2",
        "eval",
        "images",
        "labels",
        "cleanlabels",
        "index",
        "test_loader",
        "images",
        "to",
        "args",
        "device",
        "labels",
        "to",
        "args",
        "device",
        "model2",
        "images",
        "F",
        "softmax",
        "logits2",
        "dim",
        "outputs2",
        "argmax",
        "total2",
        "labels",
        "size",
        "pred2",
        "labels",
        "sum",
        "item",
        "correct1",
        "total1",
        "correct2",
        "total2",
        "acc1",
        "acc2",
        "ex",
        "automain",
        "_run",
        "_log",
        "argparse",
        "Namespace",
        "_run",
        "config",
        "post_config_hook",
        "args",
        "_run",
        "torch",
        "device",
        "args",
        "forget_rate",
        "args",
        "noise_rate",
        "args",
        "forget_rate",
        "args",
        "lr",
        "args",
        "n_epoch",
        "mom1",
        "args",
        "n_epoch",
        "i",
        "args",
        "epoch_decay_start",
        "args",
        "n_epoch",
        "args",
        "n_epoch",
        "i",
        "args",
        "n_epoch",
        "args",
        "epoch_decay_start",
        "args",
        "lr",
        "mom2",
        "optimizer",
        "epoch",
        "param_group",
        "optimizer",
        "param_groups",
        "alpha_plan",
        "epoch",
        "beta1_plan",
        "epoch",
        "np",
        "ones",
        "args",
        "n_epoch",
        "forget_rate",
        "args",
        "exponent",
        "args",
        "num_gradual",
        "np",
        "linspace",
        "forget_rate",
        "args",
        "exponent",
        "args",
        "num_gradual",
        "args",
        "dataset",
        "torchvision",
        "datasets",
        "STL10",
        "root",
        "split",
        "download",
        "transform",
        "TransformsSimCLR",
        "size",
        "test_transform",
        "torchvision",
        "datasets",
        "STL10",
        "root",
        "split",
        "download",
        "transform",
        "TransformsSimCLR",
        "size",
        "test_transform",
        "args",
        "dataset",
        "CIFAR10",
        "root",
        "download",
        "train",
        "transform",
        "transforms",
        "ToTensor",
        "noise_type",
        "args",
        "noise_type",
        "noise_rate",
        "args",
        "noise_rate",
        "CIFAR10",
        "root",
        "download",
        "train",
        "transform",
        "transforms",
        "ToTensor",
        "noise_type",
        "args",
        "noise_type",
        "noise_rate",
        "args",
        "noise_rate",
        "args",
        "dataset",
        "CIFAR100",
        "root",
        "download",
        "train",
        "transform",
        "transforms",
        "ToTensor",
        "noise_type",
        "args",
        "noise_type",
        "noise_rate",
        "args",
        "noise_rate",
        "CIFAR100",
        "root",
        "download",
        "train",
        "transform",
        "transforms",
        "ToTensor",
        "noise_type",
        "args",
        "noise_type",
        "noise_rate",
        "args",
        "noise_rate",
        "NotImplementedError",
        "train_dataset",
        "noise_or_not",
        "torch",
        "utils",
        "data",
        "DataLoader",
        "train_dataset",
        "batch_size",
        "args",
        "logistic_batch_size",
        "shuffle",
        "drop_last",
        "num_workers",
        "args",
        "workers",
        "torch",
        "utils",
        "data",
        "DataLoader",
        "test_dataset",
        "batch_size",
        "args",
        "logistic_batch_size",
        "shuffle",
        "drop_last",
        "num_workers",
        "args",
        "workers",
        "torch",
        "autograd",
        "set_detect_anomaly",
        "load_model",
        "args",
        "train_loader",
        "reload_model",
        "copy",
        "deepcopy",
        "simclr_model",
        "simclr_model",
        "n_features",
        "simclrnet",
        "args",
        "simclr_model",
        "encoder",
        "n_classes",
        "in_feature",
        "to",
        "args",
        "device",
        "simclrnet",
        "args",
        "simclr_model2",
        "encoder",
        "n_classes",
        "in_feature",
        "to",
        "args",
        "device",
        "simclr_model1",
        "eval",
        "simclr_model2",
        "eval",
        "torch",
        "optim",
        "Adam",
        "simclr_model1",
        "parameters",
        "lr",
        "args",
        "lr",
        "torch",
        "optim",
        "Adam",
        "simclr_model2",
        "parameters",
        "lr",
        "args",
        "lr",
        "args",
        "device",
        "evaluate",
        "args",
        "test_loader",
        "simclr_model1",
        "simclr_model2",
        "epoch",
        "args",
        "n_epoch",
        "len",
        "test_dataset",
        "test_acc1",
        "test_acc2",
        "mean_pure_ratio1",
        "mean_pure_ratio2",
        "epoch",
        "args",
        "n_epoch",
        "simclr_model1",
        "train",
        "adjust_learning_rate",
        "optimizer1",
        "epoch",
        "simclr_model2",
        "train",
        "adjust_learning_rate",
        "optimizer2",
        "epoch",
        "train",
        "args",
        "train_loader",
        "epoch",
        "simclr_model1",
        "optimizer1",
        "simclr_model2",
        "optimizer2",
        "rate_schedule",
        "noise_or_not",
        "evaluate",
        "args",
        "test_loader",
        "simclr_model1",
        "simclr_model2",
        "sum",
        "pure_ratio_1_list",
        "len",
        "pure_ratio_1_list",
        "sum",
        "pure_ratio_2_list",
        "len",
        "pure_ratio_2_list",
        "epoch",
        "args",
        "n_epoch",
        "len",
        "test_dataset",
        "test_acc1",
        "test_acc2",
        "mean_pure_ratio1",
        "mean_pure_ratio2"
    ],
    "literals": [
        "'Epoch [%d/%d], Iter [%d/%d] , rate %.4f,Training Accuracy1: %.4F, Training Accuracy2: %.4f, Loss1: %.4f, Loss2: %.4f, Pure Ratio1: %.4f, Pure Ratio2 %.4f'",
        "\"cuda:7\"",
        "'lr'",
        "'betas'",
        "\"./datasets\"",
        "\"STL10\"",
        "\"train\"",
        "\"test\"",
        "\"CIFAR10\"",
        "'./datasets/'",
        "'./datasets/'",
        "\"CIFAR100\"",
        "'./datasets/'",
        "'./datasets/'",
        "'===> Evaluate first'",
        "'Epoch [%d/%d] Test Accuracy on the %s test images: Model1 %.4f %% Model2 %.4f %% Pure Ratio1 %.4f %% Pure Ratio2 %.4f %%'",
        "'===> Training stage'",
        "'Epoch [%d/%d] Test Accuracy on the %s test images: Model1 %.4f %% Model2 %.4f %%, Pure Ratio 1 %.4f %%, Pure Ratio 2 %.4f %%'"
    ],
    "variables": [
        "pure_ratio_list",
        "pure_ratio_1_list",
        "pure_ratio_2_list",
        "train_total",
        "train_correct",
        "train_total2",
        "train_correct2",
        "ind",
        "images",
        "labels",
        "logits1",
        "pred1",
        "train_total",
        "train_correct",
        "logits2",
        "pred2",
        "train_total2",
        "train_correct2",
        "loss_1",
        "loss_2",
        "pure_ratio_1",
        "pure_ratio_2",
        "train_acc1",
        "train_acc2",
        "train_acc1",
        "train_acc2",
        "correct1",
        "total1",
        "images",
        "labels",
        "logits1",
        "outputs1",
        "pred1",
        "correct1",
        "correct2",
        "total2",
        "images",
        "labels",
        "logits2",
        "outputs2",
        "pred2",
        "correct2",
        "acc1",
        "acc2",
        "args",
        "args",
        "args",
        "device",
        "forget_rate",
        "forget_rate",
        "mom1",
        "mom2",
        "alpha_plan",
        "beta1_plan",
        "alpha_plan",
        "i",
        "beta1_plan",
        "i",
        "param_group",
        "param_group",
        "rate_schedule",
        "rate_schedule",
        "root",
        "train_dataset",
        "test_dataset",
        "train_dataset",
        "test_dataset",
        "train_dataset",
        "test_dataset",
        "noise_or_not",
        "train_loader",
        "test_loader",
        "simclr_model",
        "_",
        "_",
        "simclr_model2",
        "in_feature",
        "n_classes",
        "simclr_model1",
        "simclr_model2",
        "optimizer1",
        "optimizer2",
        "mean_pure_ratio1",
        "mean_pure_ratio2",
        "epoch",
        "train_acc1",
        "train_acc2",
        "test_acc1",
        "test_acc2",
        "train_acc1",
        "train_acc2",
        "pure_ratio_1_list",
        "pure_ratio_2_list",
        "test_acc1",
        "test_acc2",
        "mean_pure_ratio1",
        "mean_pure_ratio2"
    ],
    "comments": [
        "Train the Model",
        "Forward + Backward + Optimize",
        "Evaluate the Model",
        "Change model to 'eval' mode.",
        "Change model to 'eval' mode",
        "Adjust learning rate and betas for Adam Optimizer",
        "Only change beta1",
        "define drop rate schedule",
        "with torch.autograd.set_detect_anomaly(True):",
        "simclr_model2=simclrnet(args,simclr_model.encoder,n_classes,in_feature).to(args.device)",
        "criterion = torch.nn.CrossEntropyLoss()",
        "evaluate models with random weights",
        "training stage",
        "train models",
        "evaluate models",
        "save results"
    ],
    "docstrings": [
        "'''\ndef train(args, loader, simclr_model, criterion, optimizer):\n    loss_epoch = 0\n    accuracy_epoch = 0\n    clean_accuracy = 0\n    for step, (x, y,cleany,_) in enumerate(loader):\n   \n        optimizer.zero_grad()\n\n        x = x.to(args.device)\n        y = y.to(args.device)\n        cleany = cleany.to(args.device)\n\n        output = simclr_model(x)\n        loss = criterion(output, y)\n\n        predicted = output.argmax(1)\n        acc = (predicted == y).sum().item() / y.size(0)\n        cleanacc =(predicted == cleany).sum().item() / cleany.size(0)\n        accuracy_epoch += acc\n        clean_accuracy += cleanacc\n\n        loss.backward()\n        optimizer.step()\n\n        loss_epoch += loss.item()\n        # if step % 100 == 0:\n        #     print(\n        #         f\"Step [{step}/{len(loader)}]\\t Loss: {loss.item()}\\t Accuracy: {acc}\"\n        #     )\n\n    return loss_epoch, accuracy_epoch,clean_accuracy\n\n\ndef test(args, loader, simclr_model, criterion, optimizer):\n    loss_epoch = 0\n    accuracy_epoch = 0\n    simclr_model.eval()\n    for step, (x, y,_,_) in enumerate(loader):\n        simclr_model.zero_grad()\n\n        x = x.to(args.device)\n        y = y.to(args.device)\n\n        output = simclr_model(x)\n        loss = criterion(output, y)\n\n        predicted = output.argmax(1)\n        acc = (predicted == y).sum().item() / y.size(0)\n        accuracy_epoch += acc\n\n        loss_epoch += loss.item()\n\n    return loss_epoch, accuracy_epoch\n    \n#label and unlabel stage\nlabeldata=[]\nunlabeldata=[]\naccuracy_epoch=0\nclean_accuracy=0\nfor step, (x, y,cleany,_) in enumerate(train_loader):\n\n    x = x.to(args.device)\n    y = y.to(args.device)\n    cleany = cleany.to(args.device)\n\n    output = simclr_model(x)\n\n    predicted = output.argmax(1)\n    for i in range(len(predicted)):\n        if predicted[i]==y[i]:\n            labeldata.append((x,y))\n        else:\n            unlabeldata.append(x)\n    acc = (predicted == y).sum().item() / y.size(0)\n    cleanacc =(predicted == cleany).sum().item() / cleany.size(0)\n    accuracy_epoch += acc\n    clean_accuracy += cleanacc\nprint(\"\\t Accuracy: {accuracy_epoch / len(train_loader)}\\t Clean_accuracy: {clean_accuracy / len(train_loader)}\")\nprint('*'*30+'labeled data length'+'*'*30)\nprint(len(labeldata))\nprint('*'*30+'unlabeled data length'+'*'*30)\nprint(len(unlabeldata))\n\n'''",
        "'''\n    rate_schedule=[]\n    tmp=forget_rate\n    for i in range(args.n_epoch):\n        rate_schedule.append(tmp)\n        tmp=tmp*1.05\n    rate_schedule=np.array(rate_schedule)\n    \n    rate_schedule = np.ones(args.n_epoch)*(forget_rate**args.exponent)\n    rate_schedule[:args.num_gradual] = np.linspace(forget_rate, forget_rate**args.exponent, args.num_gradual)\n    '''"
    ],
    "functions": [
        "train",
        "evaluate",
        "main",
        "adjust_learning_rate"
    ],
    "classes": []
}