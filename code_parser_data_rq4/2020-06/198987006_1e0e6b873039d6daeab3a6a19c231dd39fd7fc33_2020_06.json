{
    "identifiers": [
        "argparse",
        "subprocess",
        "pathlib",
        "sys",
        "textwrap",
        "os",
        "time",
        "program",
        "os",
        "path",
        "split",
        "program",
        "fpath",
        "os",
        "path",
        "isfile",
        "fpath",
        "os",
        "access",
        "fpath",
        "os",
        "X_OK",
        "program",
        "path",
        "os",
        "environ",
        "split",
        "os",
        "pathsep",
        "os",
        "path",
        "join",
        "path",
        "program",
        "os",
        "path",
        "isfile",
        "exe_file",
        "os",
        "access",
        "exe_file",
        "os",
        "X_OK",
        "exe_file",
        "args",
        "args",
        "url",
        "args",
        "args",
        "args",
        "url",
        "which",
        "url",
        "retries",
        "retries",
        "subprocess",
        "getstatusoutput",
        "args",
        "args",
        "name",
        "namespace_flag",
        "ret_code",
        "ret_code",
        "output",
        "len",
        "output",
        "output",
        "output",
        "url",
        "url",
        "args",
        "yamlpath",
        "args",
        "match",
        "PLATFORM_RULE_DIR",
        "args",
        "rule",
        "rule_path",
        "oval_path",
        "rule_path",
        "pathlib",
        "Path",
        "oval_path",
        "mkdir",
        "parents",
        "exist_ok",
        "open",
        "rule_yaml_path",
        "f",
        "f",
        "write",
        "RULE_TEMPLATE",
        "format",
        "URL",
        "url",
        "TITLE",
        "args",
        "title",
        "SEV",
        "args",
        "severity",
        "IDENT",
        "args",
        "identifiers",
        "rule_yaml_path",
        "open",
        "shared_xml_path",
        "f",
        "f",
        "write",
        "OVAL_TEMPLATE",
        "format",
        "TITLE",
        "args",
        "title",
        "DESC",
        "args",
        "description",
        "URL",
        "url",
        "YAMLPATH",
        "args",
        "yamlpath",
        "MATCH",
        "args",
        "match",
        "NEGATE",
        "args",
        "negate",
        "lower",
        "shared_xml_path",
        "rule",
        "open",
        "PROFILE_PATH",
        "f",
        "f",
        "write",
        "PROFILE_TEMPLATE",
        "format",
        "RULE_NAME",
        "rule",
        "args",
        "which",
        "args",
        "rule",
        "os",
        "path",
        "exists",
        "PLATFORM_RULE_DIR",
        "args",
        "rule",
        "args",
        "rule",
        "args",
        "skip_deploy",
        "subprocess",
        "getstatusoutput",
        "args",
        "skip_build",
        "createTestProfile",
        "args",
        "rule",
        "subprocess",
        "getstatusoutput",
        "build_cmd",
        "ret_code",
        "output",
        "os",
        "remove",
        "profile_path",
        "OSError",
        "subprocess",
        "getstatusoutput",
        "ret_code",
        "time",
        "sleep",
        "subprocess",
        "Popen",
        "apply_cmd",
        "stdin",
        "subprocess",
        "PIPE",
        "stdout",
        "subprocess",
        "PIPE",
        "proc",
        "proc",
        "communicate",
        "input",
        "TEST_SCAN_TEMPLATE",
        "format",
        "PROFILE",
        "profile",
        "encode",
        "proc",
        "returncode",
        "err",
        "os",
        "remove",
        "profile_path",
        "OSError",
        "time",
        "time",
        "subprocess",
        "getstatusoutput",
        "output",
        "output",
        "output",
        "startswith",
        "output",
        "time",
        "time",
        "timeout",
        "time",
        "sleep",
        "scan_result",
        "scan_result",
        "args",
        "which",
        "args",
        "rule",
        "args",
        "skip_build",
        "createTestProfile",
        "args",
        "rule",
        "subprocess",
        "getstatusoutput",
        "ret_code",
        "args",
        "contentdir",
        "args",
        "objectdir",
        "OSCAP_TEST_IMAGE",
        "OSCAP_CMD_OPTS",
        "subprocess",
        "getoutput",
        "pod_cmd",
        "os",
        "getenv",
        "argparse",
        "ArgumentParser",
        "prog",
        "formatter_class",
        "argparse",
        "RawDescriptionHelpFormatter",
        "description",
        "textwrap",
        "dedent",
        "PROG_DESC",
        "parser",
        "add_subparsers",
        "dest",
        "title",
        "help",
        "required",
        "subparser",
        "add_parser",
        "help",
        "PLATFORM_RULE_DIR",
        "create_parser",
        "add_argument",
        "required",
        "help",
        "create_parser",
        "add_argument",
        "required",
        "help",
        "create_parser",
        "add_argument",
        "required",
        "help",
        "create_parser",
        "add_argument",
        "required",
        "help",
        "create_parser",
        "add_argument",
        "required",
        "help",
        "create_parser",
        "add_argument",
        "help",
        "create_parser",
        "add_argument",
        "help",
        "create_parser",
        "add_argument",
        "help",
        "create_parser",
        "add_argument",
        "help",
        "create_parser",
        "add_argument",
        "action",
        "help",
        "create_parser",
        "add_argument",
        "help",
        "create_parser",
        "add_argument",
        "help",
        "create_parser",
        "set_defaults",
        "func",
        "createFunc",
        "subparser",
        "add_parser",
        "help",
        "cluster_test_parser",
        "add_argument",
        "required",
        "help",
        "cluster_test_parser",
        "add_argument",
        "action",
        "help",
        "cluster_test_parser",
        "add_argument",
        "action",
        "help",
        "cluster_test_parser",
        "set_defaults",
        "func",
        "clusterTestFunc",
        "subparser",
        "add_parser",
        "help",
        "test_parser",
        "add_argument",
        "required",
        "help",
        "test_parser",
        "add_argument",
        "help",
        "test_parser",
        "add_argument",
        "action",
        "help",
        "test_parser",
        "add_argument",
        "help",
        "test_parser",
        "set_defaults",
        "func",
        "testFunc",
        "parser",
        "parse_args",
        "args",
        "func",
        "args",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "'applications/openshift'",
        "'quay.io/compliance-operator/openscap-ocp:1.3.3'",
        "'oscap xccdf eval --verbose INFO --fetch-remote-resources --profile xccdf_org.ssgproject.content_profile_test --results-arf /tmp/report-arf.xml /content/ssg-ocp4-ds.xml'",
        "'ocp4/profiles/test.profile'",
        "\"PATH\"",
        "''",
        "'-n '",
        "'oc'",
        "'oc is required if --url is not provided.'",
        "'oc get %s/%s -o template=\"{{.metadata.selfLink}}\" %s'",
        "'error running oc, check connection to the cluster: %d\\n %s'",
        "'/api'",
        "'there was a problem finding the URL from the oc debug output. Hint: override this automatic check with --url'",
        "'creating check for \"%s\" with yamlpath \"%s\" satisfying match of \"%s\"'",
        "'/'",
        "'/oval'",
        "'/shared.xml'",
        "'/rule.yml'",
        "'w'",
        "'wrote '",
        "'w'",
        "'wrote '",
        "'w'",
        "'utils/build_ds_container.sh ocp4'",
        "'oc'",
        "'oc is required to test a rule in-cluster.'",
        "'testing rule %s in-cluster'",
        "'/'",
        "'no rule for %s, run \"create\" first'",
        "'deploying compliance-operator'",
        "\"utils/deploy_compliance_operator.sh\"",
        "'pushing image build to cluster'",
        "'oc delete compliancescans/test'",
        "'waiting for cleanup from a previous test run'",
        "'xccdf_org.ssgproject.content_profile_test'",
        "'oc'",
        "'apply'",
        "'-f'",
        "'-'",
        "'error applying scan object: %s'",
        "'oc get compliancescans/test -o template=\"{{.status.phase}} {{.status.result}}\"'",
        "'output from last phase check: %s'",
        "'DONE'",
        "'timeout waiting for scan to finish'",
        "'podman'",
        "'podman is required'",
        "'testing rule %s locally'",
        "'./build_product ocp4'",
        "'build failed: %s'",
        "'podman run -it --security-opt label=disable -v \"%s:/content\" -v \"%s:/tmp\" %s %s'",
        "'KUBECONFIG'",
        "'export KUBECONFIG needed'",
        "\"add_platform_rule.py\"",
        "'subcommand'",
        "'subcommands'",
        "'pick one'",
        "'create'",
        "'Bootstrap the XML and YML files under %s for a new check.'",
        "'--rule'",
        "'The name of the rule to create. Required.'",
        "'--name'",
        "'The name of the Kubernetes object to check. Required.'",
        "'--type'",
        "'The type of Kubernetes object, e.g., configmap. Required.'",
        "'--yamlpath'",
        "'The yaml-path of the element to match against.'",
        "'--match'",
        "'A string value or regex providing the matching criteria. Required'",
        "'--namespace'",
        "'The namespace of the Kubernetes object (optional for cluster-scoped objects)'",
        "'--title'",
        "'A short description of the check.'",
        "'--url'",
        "'The direct api path (metadata.selfLink) of the object, which overrides --type --name and --namespace options.'",
        "'--description'",
        "'A human-readable description of the provided matching criteria.'",
        "'--negate'",
        "\"store_true\"",
        "'negate the given matching criteria (does NOT match). Default is false.'",
        "'--identifiers'",
        "\"TBD\"",
        "'an identifier for the rule (CCE number)'",
        "'--severity'",
        "\"unknown\"",
        "'the severity of the rule.'",
        "'cluster-test'",
        "'Test a rule on a running OCP cluster using the compliance-operator.'",
        "'--rule'",
        "'The name of the rule to test. Required.'",
        "'--skip-deploy'",
        "\"store_true\"",
        "'Skip deploying the compliance-operator. Default is to deploy.'",
        "'--skip-build'",
        "\"store_true\"",
        "'Skip building and pushing the datastream. Default is true.'",
        "'test'",
        "'Test a rule locally against a directory of mocked object files using podman and an oscap container.'",
        "'--rule'",
        "'The name of the rule to test.'",
        "'--contentdir'",
        "\"./build\"",
        "'The path to the directory containing the datastream'",
        "'--skip-build'",
        "\"store_true\"",
        "'Skip building the datastream. Default is false.'",
        "'--objectdir'",
        "\"/tmp\"",
        "'The path to a directory structure of yaml objects to test against.'",
        "\"__main__\""
    ],
    "variables": [
        "PROG_DESC",
        "PLATFORM_RULE_DIR",
        "OSCAP_TEST_IMAGE",
        "OSCAP_CMD_OPTS",
        "PROFILE_PATH",
        "RULE_TEMPLATE",
        "OVAL_TEMPLATE",
        "PROFILE_TEMPLATE",
        "TEST_SCAN_TEMPLATE",
        "fpath",
        "fname",
        "exe_file",
        "url",
        "retries",
        "namespace_flag",
        "namespace_flag",
        "ret_code",
        "output",
        "url",
        "rule_path",
        "oval_path",
        "shared_xml_path",
        "rule_yaml_path",
        "build_cmd",
        "ret_code",
        "output",
        "ret_code",
        "output",
        "profile",
        "apply_cmd",
        "err",
        "timeout",
        "scan_result",
        "ret_code",
        "output",
        "scan_result",
        "ret_code",
        "pod_cmd",
        "parser",
        "subparser",
        "create_parser",
        "cluster_test_parser",
        "test_parser",
        "args"
    ],
    "comments": [
        "!/usr/bin/python3",
        "create a solo profile for rule",
        "execute the build_ds_container script",
        "if previous compliancescans were actually deleted, wait a bit to allow resources to clean up.",
        "create a single-rule scan",
        "poll for the DONE result",
        "A minute is generous for the platform scan."
    ],
    "docstrings": [
        "''' Create and test content files for Kubernetes API checks.\n\nThis script is intended to help content writers create a new application check\nfor OCP4/Kubernetes.\n\n- The 'create' subcommand creates the initial files for a new rule and fetches\n  the raw URL of the object in question (unless you specify the URL).\n\n- The 'test' subcommand builds your content locally and tests directly using an\n  openscap podman container. The scan container will test against yaml files\n  staged under --objectdir.\n\n- The 'cluster-test' subcommand pushes the content to your cluster, and then\n  runs a Platform scan for your rule with compliance-operator.\n\nExample workflow:\n\n$ utils/add_platform_rule.py create --rule=ocp_proxy_has_ca \\\n  --type=\"proxies.config\" --name=\"cluster\" \\\n  --yamlpath=\".spec.trustedCA.name\" --match=\"[a-zA-Z0-9]*\"\ncreating check for \"/apis/config.openshift.io/v1/proxies/cluster\" with yamlpath \".spec.trustedCA.name\" satisfying match of \"[a-zA-Z0-9]*\"\nwrote applications/openshift/ocp_proxy_has_ca/rule.yml\nwrote applications/openshift/ocp_proxy_has_ca/oval/shared.xml\n\n$ mkdir -p /tmp/apis/config.openshift.io/v1/proxies/\n$ oc get proxies.config/cluster -o yaml > /tmp/apis/config.openshift.io/v1/proxies/cluster\n$ utils/add_platform_rule.py test --rule=ocp_proxy_has_ca\ntesting rule ocp_proxy_has_ca locally\nTitle\n        None\nRule\n        xccdf_org.ssgproject.content_rule_ocp_proxy_has_ca\nIdent\n        CCE-84209-6\nResult\n        pass\n\n$ utils/add_platform_rule.py cluster-test --rule=ocp_proxy_has_ca\ntesting rule ocp_proxy_has_ca in-cluster\ndeploying compliance-operator\npushing image build to cluster\nwaiting for cleanup from previous test run\noutput from last phase check: LAUNCHING NOT-AVAILABLE\noutput from last phase check: RUNNING NOT-AVAILABLE\noutput from last phase check: AGGREGATING NOT-AVAILABLE\noutput from last phase check: DONE COMPLIANT\nCOMPLIANT\n\n'''",
        "'''prodtype: ocp4\n\ntitle: {TITLE}\n\ndescription: TBD\n\nrationale: TBD\n\nidentifiers: {{}}\n\nseverity: {SEV}\n\nwarnings:\n    - general: |-\n        {{{{{{ openshift_cluster_setting(\"{URL}\") | indent(8) }}}}}}\n'''",
        "'''{{{{% set YAML_TEST_OVAL_VERSION = [5, 11] %}}}}\n\n{{{{% if target_oval_version >= YAML_TEST_OVAL_VERSION %}}}}\n<def-group>\n      <definition class=\"compliance\" version=\"1\" id=\"{{{{{{ rule_id }}}}}}\">\n      <metadata>\n        <title>{TITLE}</title>\n        {{{{{{- oval_affected(products) }}}}}}\n        <description>{DESC}</description>\n      </metadata>\n      <criteria operator=\"AND\">\n        <criterion comment=\"{DESC}\" negate=\"{NEGATE}\" test_ref=\"test_{{{{{{ rule_id }}}}}}\"/>\n        <criterion comment=\"Make sure that there is the actual file to scan\" test_ref=\"test_file_for_{{{{{{ rule_id }}}}}}\"/>\n      </criteria>\n    </definition>\n\n    <ind:yamlfilecontent_test id=\"test_{{{{{{ rule_id }}}}}}\" check=\"at least one\" comment=\"Find one match\" version=\"1\">\n            <ind:object object_ref=\"object_{{{{{{ rule_id }}}}}}\"/>\n            <ind:state state_ref=\"state_{{{{{{ rule_id }}}}}}\"/>\n    </ind:yamlfilecontent_test>\n\n    <local_variable id=\"{{{{{{ rule_id }}}}}}_dump_location\" datatype=\"string\" comment=\"The actual filepath of the file to scan.\" version=\"1\">\n       <concat>\n              <variable_component var_ref=\"ocp_data_root\"/>\n              <literal_component>{URL}</literal_component>\n       </concat>\n    </local_variable>\n\n    <unix:file_test id=\"test_file_for_{{{{{{ rule_id }}}}}}\" check=\"only one\" comment=\"Find the actual file to be scanned.\" version=\"1\">\n            <unix:object object_ref=\"object_file_for_{{{{{{ rule_id }}}}}}\"/>\n    </unix:file_test>\n\n    <unix:file_object id=\"object_file_for_{{{{{{ rule_id }}}}}}\" version=\"1\">\n      <unix:filepath var_ref=\"{{{{{{ rule_id }}}}}}_dump_location\"/>\n    </unix:file_object>\n\n    <ind:yamlfilecontent_object id=\"object_{{{{{{ rule_id }}}}}}\" version=\"1\">\n      <ind:filepath var_ref=\"{{{{{{ rule_id }}}}}}_dump_location\"/>\n      <ind:yamlpath>{YAMLPATH}</ind:yamlpath>\n    </ind:yamlfilecontent_object>\n\n    <ind:yamlfilecontent_state id=\"state_{{{{{{ rule_id }}}}}}\" version=\"1\">\n            <ind:value_of datatype=\"string\" operation=\"pattern match\">{MATCH}</ind:value_of>\n    </ind:yamlfilecontent_state>\n\n   <external_variable comment=\"Root of downloaded stuff\" datatype=\"string\" id=\"ocp_data_root\" version=\"1\" />\n</def-group>\n{{{{% endif  %}}}}\n'''",
        "'''documentation_complete: true\n\ntitle: 'Test Profile for {RULE_NAME}'\n\ndescription: |-\n    Test Profile\nselections:\n\n    - {RULE_NAME}\n'''",
        "'''apiVersion: compliance.openshift.io/v1alpha1\nkind: ComplianceScan\nmetadata:\n  name: test\nspec:\n    scanType: Platform\n    profile: {PROFILE}\n    content: ssg-ocp4-ds.xml\n    contentImage: image-registry.openshift-image-registry.svc:5000/openshift-compliance/openscap-ocp4-ds:latest\n    debug: True\n'''"
    ],
    "functions": [
        "which",
        "createFunc",
        "createTestProfile",
        "clusterTestFunc",
        "testFunc",
        "main"
    ],
    "classes": []
}