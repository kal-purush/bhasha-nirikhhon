{
    "identifiers": [
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "np",
        "networkx",
        "nx",
        "row",
        "num_vertices",
        "num_vertices",
        "len",
        "row",
        "num_vertices",
        "all",
        "x",
        "x",
        "row",
        "row",
        "row",
        "ValueError",
        "input",
        "split",
        "row_valid",
        "first_row",
        "first_row",
        "len",
        "first_row",
        "i",
        "num_vertices",
        "input",
        "split",
        "row_valid",
        "row",
        "num_vertices",
        "matrix",
        "append",
        "row",
        "matrix",
        "open",
        "encoding",
        "f",
        "row",
        "f",
        "row_valid",
        "row",
        "strip",
        "split",
        "matrix",
        "append",
        "row",
        "matrix",
        "matrix",
        "color",
        "colored_vertices",
        "vertex",
        "i",
        "vertex",
        "matrix",
        "vertex",
        "i",
        "colored_vertices",
        "i",
        "color",
        "matrix",
        "vertex",
        "colored_vertices",
        "color_list",
        "vertex",
        "len",
        "colored_vertices",
        "colored_vertices",
        "color",
        "color_list",
        "check_color",
        "matrix",
        "color",
        "colored_vertices",
        "vertex",
        "color",
        "backtracking_search",
        "matrix",
        "vertex",
        "colored_vertices",
        "color_list",
        "result",
        "result",
        "matrix",
        "color_map",
        "nx",
        "from_numpy_matrix",
        "np",
        "array",
        "matrix",
        "nx",
        "draw",
        "data",
        "node_color",
        "color_map",
        "with_labels",
        "plt",
        "show",
        "input",
        "input_method",
        "read_input",
        "input_method",
        "read_file",
        "nx",
        "from_numpy_matrix",
        "np",
        "array",
        "matrix",
        "nx",
        "algorithms",
        "planarity",
        "check_planarity",
        "graph",
        "len",
        "matrix",
        "backtracking_search",
        "matrix",
        "num_vertices",
        "color_list",
        "graph_visualize",
        "matrix",
        "result",
        "main"
    ],
    "literals": [
        "'01'",
        "\"Input is wrong\"",
        "\"Введіть матрицю суміжності порядково, розділяючи одиниці ти нулі \"",
        "\"ПРОБІЛАМИ (не комами), наприклад: 1 0 0 1\"",
        "'matrix.txt'",
        "'r'",
        "'utf-8'",
        "\"If you want to read matrix from matrix.txt, \"",
        "\"enter 1, if from terminal manually, enter 0: \"",
        "'0'",
        "'1'",
        "\"It is not possible to color the graph in 4 colors\"",
        "'red'",
        "'green'",
        "'blue'",
        "'yellow'",
        "'__main__'"
    ],
    "variables": [
        "row",
        "first_row",
        "first_row",
        "matrix",
        "num_vertices",
        "row",
        "row",
        "matrix",
        "row",
        "colored_vertices",
        "vertex",
        "result",
        "data",
        "input_method",
        "matrix",
        "matrix",
        "graph",
        "color_list",
        "num_vertices",
        "result"
    ],
    "comments": [
        "Перевірка на довжину рядка",
        "Якщо рядок правильний і складається з 0 і 1, то повертаємо його",
        "Як ні, то помилка вводу",
        "Зчитування першого рядка",
        "перевірка на правильнісь вводу",
        "Записую перший рядок в матрицю та визначаю кількість вершин",
        "Проходжусь по решті рядків, зчитую їх в матрицю",
        "перевірка на правильнісь вводу",
        "Зчитую рядок в матрицю",
        "Зчитую дані з файлу в матрицю",
        "Перевірка вводу",
        "Проходжусь по вершинах, які вже мають колір",
        "Якщо вершини суміжні, та її колір співпадає з нашим, то не підходить",
        "Інакше, ми можемо використати цей колір",
        "Якщо ми дійшли до останньої вершини, то розв'язок знайдено",
        "Перебираємо всі можливі кольори:",
        "Якщо ми можемо вибрати даний колір, то беремо його і йдемо далі",
        "Якщо розв'язок існує, повертаємо його і йдемо назад",
        "Якщо всі варіанти перебрані і розв'язку не знайдено, повертаємо False",
        "Перетворення матриці в NumPy array(потрібно для візуалізації)",
        "Власне малюнок графа",
        "Вивфд користувачу",
        "Читання матриці суміжності з файлу чи терміналу",
        "Перевірка на планарність за формулою ейлера",
        "Якщо граф непланарний, то я сходу можу дати відповідь(тисячні секунди)",
        "Якщо граф планарний, то робимо бектрекінг",
        "Візуалізація"
    ],
    "docstrings": [
        "\"\"\"\n    Checks if the row is valid and converts it to int\n    :param row: list\n    :param num_vertices: int\n    :return: list\n    \"\"\"",
        "\"\"\"\n    Reads an adjacent matrix row by row\n    :return: list\n    \"\"\"",
        "\"\"\"\n    Reads a matrix from matrix.txt\n    :return: list\n    \"\"\"",
        "\"\"\"\n    Returns True if we can use this color in vertex, False otherwise\n    :param colored_vertices: list\n    :param matrix: list\n    :param color: string\n    :param vertex: int\n    :return: bool\n    \"\"\"",
        "\"\"\"\n    Assigns one of 4 colors (Red, Green, Blue, Yellow) to every vertex,\n    returns False if not possible, using Backtracking\n    :param matrix: int\n    :return: list\n    \"\"\"",
        "\"\"\"\n    Visualize the graph in a convenient way\n    :param matrix: list\n    :param color_map: list\n    :return: None\n    \"\"\"",
        "\"\"\"\n    Main function that runs the program\n    \"\"\""
    ],
    "functions": [
        "row_valid",
        "read_input",
        "read_file",
        "check_color",
        "backtracking_search",
        "graph_visualize",
        "main"
    ],
    "classes": []
}