{
    "identifiers": [
        "print_function",
        "keras",
        "models",
        "Model",
        "keras",
        "layers",
        "Input",
        "LSTM",
        "Dense",
        "numpy",
        "np",
        "utils",
        "config",
        "DATASETS_DIR",
        "format",
        "DATASETS_DIR",
        "open",
        "data_path",
        "encoding",
        "f",
        "f",
        "read",
        "split",
        "line",
        "lines",
        "min",
        "num_samples",
        "len",
        "lines",
        "line",
        "split",
        "target_text",
        "input_texts",
        "append",
        "input_text",
        "target_texts",
        "append",
        "target_text",
        "input_text",
        "input_characters",
        "input_characters",
        "add",
        "target_text",
        "target_characters",
        "target_characters",
        "add",
        "sorted",
        "input_characters",
        "sorted",
        "target_characters",
        "len",
        "input_characters",
        "len",
        "target_characters",
        "max",
        "len",
        "txt",
        "txt",
        "input_texts",
        "max",
        "len",
        "txt",
        "txt",
        "target_texts",
        "len",
        "input_texts",
        "num_encoder_tokens",
        "num_decoder_tokens",
        "max_encoder_seq_length",
        "max_decoder_seq_length",
        "i",
        "i",
        "input_characters",
        "i",
        "i",
        "target_characters",
        "np",
        "zeros",
        "len",
        "input_texts",
        "max_encoder_seq_length",
        "num_encoder_tokens",
        "dtype",
        "np",
        "zeros",
        "len",
        "input_texts",
        "max_decoder_seq_length",
        "num_decoder_tokens",
        "dtype",
        "np",
        "zeros",
        "len",
        "input_texts",
        "max_decoder_seq_length",
        "num_decoder_tokens",
        "dtype",
        "i",
        "input_text",
        "target_text",
        "input_texts",
        "target_texts",
        "t",
        "input_text",
        "input_token_index",
        "t",
        "input_token_index",
        "t",
        "target_text",
        "target_token_index",
        "t",
        "t",
        "target_token_index",
        "t",
        "target_token_index",
        "t",
        "target_token_index",
        "Input",
        "shape",
        "num_encoder_tokens",
        "LSTM",
        "latent_dim",
        "return_state",
        "encoder",
        "encoder_inputs",
        "state_h",
        "state_c",
        "Input",
        "shape",
        "num_decoder_tokens",
        "LSTM",
        "latent_dim",
        "return_sequences",
        "return_state",
        "decoder_lstm",
        "decoder_inputs",
        "initial_state",
        "encoder_states",
        "Dense",
        "num_decoder_tokens",
        "activation",
        "decoder_dense",
        "decoder_outputs",
        "Model",
        "encoder_inputs",
        "decoder_inputs",
        "decoder_outputs",
        "model",
        "compile",
        "optimizer",
        "loss",
        "metrics",
        "model",
        "fit",
        "encoder_input_data",
        "decoder_input_data",
        "decoder_target_data",
        "batch_size",
        "batch_size",
        "epochs",
        "validation_split",
        "Model",
        "encoder_inputs",
        "decoder_inputs",
        "state_h",
        "layers",
        "predict",
        "encoder_input_data",
        "decoder_input_data",
        "model",
        "save",
        "Model",
        "encoder_inputs",
        "encoder_states",
        "Input",
        "shape",
        "latent_dim",
        "Input",
        "shape",
        "latent_dim",
        "decoder_state_input_h",
        "decoder_state_input_c",
        "decoder_lstm",
        "decoder_inputs",
        "initial_state",
        "decoder_states_inputs",
        "state_h",
        "state_c",
        "decoder_dense",
        "decoder_outputs",
        "Model",
        "decoder_inputs",
        "decoder_states_inputs",
        "decoder_outputs",
        "decoder_states",
        "i",
        "i",
        "input_token_index",
        "items",
        "i",
        "i",
        "target_token_index",
        "items",
        "input_seq",
        "encoder_model",
        "predict",
        "input_seq",
        "np",
        "zeros",
        "num_decoder_tokens",
        "target_token_index",
        "stop_condition",
        "decoder_model",
        "predict",
        "target_seq",
        "states_value",
        "np",
        "argmax",
        "output_tokens",
        "reverse_target_char_index",
        "sampled_token_index",
        "decoded_sentence",
        "sampled_char",
        "sampled_char",
        "len",
        "decoded_sentence",
        "max_decoder_seq_length",
        "np",
        "zeros",
        "num_decoder_tokens",
        "h",
        "c",
        "decoded_sentence",
        "seq_index",
        "encoder_input_data",
        "seq_index",
        "seq_index",
        "decode_sequence",
        "input_seq",
        "input_texts",
        "seq_index",
        "decoded_sentence"
    ],
    "literals": [
        "'{}/cmn.txt'",
        "'r'",
        "'utf-8'",
        "'\\n'",
        "'\\t'",
        "'\\t'",
        "'\\n'",
        "'Number of samples:'",
        "'Number of unique input tokens:'",
        "'Number of unique output tokens:'",
        "'Max sequence length for inputs:'",
        "'Max sequence length for outputs:'",
        "'float32'",
        "'float32'",
        "'float32'",
        "' '",
        "' '",
        "' '",
        "'softmax'",
        "'rmsprop'",
        "'categorical_crossentropy'",
        "'accuracy'",
        "'s2s.h5'",
        "'\\t'",
        "''",
        "'\\n'",
        "'-'",
        "'Input sentence:'",
        "'Decoded sentence:'"
    ],
    "variables": [
        "batch_size",
        "epochs",
        "latent_dim",
        "num_samples",
        "data_path",
        "input_texts",
        "target_texts",
        "input_characters",
        "target_characters",
        "lines",
        "input_text",
        "target_text",
        "_",
        "target_text",
        "input_characters",
        "target_characters",
        "num_encoder_tokens",
        "num_decoder_tokens",
        "max_encoder_seq_length",
        "max_decoder_seq_length",
        "input_token_index",
        "target_token_index",
        "encoder_input_data",
        "decoder_input_data",
        "decoder_target_data",
        "encoder_input_data",
        "i",
        "t",
        "encoder_input_data",
        "i",
        "decoder_input_data",
        "i",
        "t",
        "decoder_target_data",
        "i",
        "decoder_input_data",
        "i",
        "decoder_target_data",
        "i",
        "encoder_inputs",
        "encoder",
        "encoder_outputs",
        "state_h",
        "state_c",
        "encoder_states",
        "decoder_inputs",
        "decoder_lstm",
        "decoder_outputs",
        "_",
        "_",
        "decoder_dense",
        "decoder_outputs",
        "model",
        "layers",
        "t",
        "encoder_model",
        "decoder_state_input_h",
        "decoder_state_input_c",
        "decoder_states_inputs",
        "decoder_outputs",
        "state_h",
        "state_c",
        "decoder_states",
        "decoder_outputs",
        "decoder_model",
        "reverse_input_char_index",
        "reverse_target_char_index",
        "states_value",
        "target_seq",
        "target_seq",
        "stop_condition",
        "decoded_sentence",
        "output_tokens",
        "h",
        "c",
        "sampled_token_index",
        "sampled_char",
        "stop_condition",
        "target_seq",
        "target_seq",
        "sampled_token_index",
        "states_value",
        "input_seq",
        "decoded_sentence"
    ],
    "comments": [
        "Batch size for training.",
        "Number of epochs to train for.",
        "Latent dimensionality of the encoding space.",
        "Number of samples to train on.",
        "Path to the data txt file on disk.",
        "Vectorize the data.",
        "We use \"tab\" as the \"start sequence\" character",
        "for the targets, and \"\\n\" as \"end sequence\" character.",
        "decoder_target_data is ahead of decoder_input_data by one timestep",
        "decoder_target_data will be ahead by one timestep",
        "and will not include the start character.",
        "Define an input sequence and process it.",
        "We discard `encoder_outputs` and only keep the states.",
        "Set up the decoder, using `encoder_states` as initial state.",
        "We set up our decoder to return full output sequences,",
        "and to return internal states as well. We don't use the",
        "return states in the training model, but we will use them in inference.",
        "Define the model that will turn",
        "`encoder_input_data` & `decoder_input_data` into `decoder_target_data`",
        "Run training",
        "Save model",
        "Next: inference mode (sampling).",
        "Here's the drill:",
        "1) encode input and retrieve initial decoder state",
        "2) run one step of decoder with this initial state",
        "and a \"start of sequence\" token as target.",
        "Output will be the next target token",
        "3) Repeat with the current target token and current states",
        "Define sampling models",
        "Reverse-lookup token index to decode sequences back to",
        "something readable.",
        "Encode the input as state vectors.",
        "Generate empty target sequence of length 1.",
        "Populate the first character of target sequence with the start character.",
        "Sampling loop for a batch of sequences",
        "(to simplify, here we assume a batch of size 1).",
        "Sample a token",
        "Exit condition: either hit max length",
        "or find stop character.",
        "Update the target sequence (of length 1).",
        "Update states",
        "Take one sequence (part of the training set)",
        "for trying out decoding."
    ],
    "docstrings": [
        "'''\n#Sequence to sequence example in Keras (character-level).\nThis script demonstrates how to implement a basic character-level\nsequence-to-sequence model. We apply it to translating\nshort English sentences into short French sentences,\ncharacter-by-character. Note that it is fairly unusual to\ndo character-level machine translation, as word-level\nmodels are more common in this domain.\n**Summary of the algorithm**\n- We start with input sequences from a domain (e.g. English sentences)\n    and corresponding target sequences from another domain\n    (e.g. French sentences).\n- An encoder LSTM turns input sequences to 2 state vectors\n    (we keep the last LSTM state and discard the outputs).\n- A decoder LSTM is trained to turn the target sequences into\n    the same sequence but offset by one timestep in the future,\n    a training process called \"teacher forcing\" in this context.\n    It uses as initial state the state vectors from the encoder.\n    Effectively, the decoder learns to generate `targets[t+1...]`\n    given `targets[...t]`, conditioned on the input sequence.\n- In inference mode, when we want to decode unknown input sequences, we:\n    - Encode the input sequence into state vectors\n    - Start with a target sequence of size 1\n        (just the start-of-sequence character)\n    - Feed the state vectors and 1-char target sequence\n        to the decoder to produce predictions for the next character\n    - Sample the next character using these predictions\n        (we simply use argmax).\n    - Append the sampled character to the target sequence\n    - Repeat until we generate the end-of-sequence character or we\n        hit the character limit.\n**Data download**\n[English to French sentence pairs.\n](http://www.manythings.org/anki/fra-eng.zip)\n[Lots of neat sentence pairs datasets.\n](http://www.manythings.org/anki/)\n**References**\n- [Sequence to Sequence Learning with Neural Networks\n   ](https://arxiv.org/abs/1409.3215)\n- [Learning Phrase Representations using\n    RNN Encoder-Decoder for Statistical Machine Translation\n    ](https://arxiv.org/abs/1406.1078)\n'''"
    ],
    "functions": [
        "decode_sequence"
    ],
    "classes": []
}