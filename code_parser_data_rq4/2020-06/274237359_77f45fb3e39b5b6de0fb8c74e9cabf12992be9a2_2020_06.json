{
    "identifiers": [
        "prev",
        "curr",
        "first",
        "last",
        "flag",
        "root",
        "root",
        "temp",
        "inOrder",
        "root",
        "first",
        "last",
        "temp",
        "last",
        "val",
        "last",
        "val",
        "first",
        "val",
        "first",
        "val",
        "temp",
        "root",
        "st",
        "root",
        "st",
        "isEmpty",
        "root",
        "st",
        "push",
        "root",
        "root",
        "root",
        "left",
        "root",
        "st",
        "pop",
        "prev",
        "prev",
        "val",
        "root",
        "val",
        "flag",
        "flag",
        "first",
        "prev",
        "last",
        "root",
        "last",
        "root",
        "prev",
        "root",
        "root",
        "root",
        "right",
        "prev",
        "first",
        "last",
        "flag",
        "root",
        "root",
        "temp",
        "inOrder",
        "root",
        "first",
        "last",
        "temp",
        "last",
        "val",
        "last",
        "val",
        "first",
        "val",
        "first",
        "val",
        "temp",
        "root",
        "root",
        "inOrder",
        "root",
        "left",
        "prev",
        "prev",
        "val",
        "root",
        "val",
        "flag",
        "flag",
        "first",
        "prev",
        "last",
        "root",
        "last",
        "root",
        "prev",
        "root",
        "inOrder",
        "root",
        "right"
    ],
    "literals": [],
    "variables": [
        "prev",
        "curr",
        "first",
        "last",
        "temp",
        "prev",
        "first",
        "last",
        "temp"
    ],
    "comments": [
        "APPROACH 1: inOrder iterative solution",
        "time complexity O(n) since we are visiting each node",
        "space complexity O(n) stack space used is n in worst case",
        "APPROACH 2: recursive solution",
        "time complexity O(n)",
        "space complexity O(n) no auxillary space. only recursive stack space"
    ],
    "docstrings": [
        "* Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }",
        "* Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }"
    ],
    "functions": [
        "recoverTree",
        "inOrder",
        "recoverTree",
        "inOrder"
    ],
    "classes": [
        "Solution",
        "Solution"
    ]
}