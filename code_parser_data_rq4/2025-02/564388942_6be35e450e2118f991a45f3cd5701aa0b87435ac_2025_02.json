{
    "identifiers": [
        "io",
        "stargate",
        "sgv2",
        "jsonapi",
        "service",
        "projection",
        "io",
        "stargate",
        "sgv2",
        "jsonapi",
        "config",
        "constants",
        "DocumentConstants",
        "io",
        "stargate",
        "sgv2",
        "jsonapi",
        "exception",
        "ProjectionException",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Objects",
        "segments",
        "DOC_ID",
        "ProjectionPath",
        "DocumentConstants",
        "Fields",
        "DOC_ID",
        "VECTOR_EMBEDDING_FIELD",
        "ProjectionPath",
        "DocumentConstants",
        "Fields",
        "VECTOR_EMBEDDING_FIELD",
        "VECTOR_EMBEDDING_TEXT_FIELD",
        "ProjectionPath",
        "DocumentConstants",
        "Fields",
        "VECTOR_EMBEDDING_TEXT_FIELD",
        "segments",
        "segments",
        "segments",
        "DOC_ID",
        "VECTOR_EMBEDDING_FIELD",
        "VECTOR_EMBEDDING_TEXT_FIELD",
        "path",
        "Objects",
        "requireNonNull",
        "path",
        "decode",
        "path",
        "segments",
        "size",
        "index",
        "segments",
        "get",
        "index",
        "join",
        "segments",
        "path",
        "decodedSegments",
        "segment",
        "i",
        "i",
        "path",
        "length",
        "i",
        "ch",
        "path",
        "charAt",
        "i",
        "ch",
        "segment",
        "isEmpty",
        "ProjectionException",
        "Code",
        "UNSUPPORTED_PROJECTION_PATH",
        "get",
        "path",
        "decodedSegments",
        "add",
        "segment",
        "toString",
        "segment",
        "setLength",
        "ch",
        "i",
        "path",
        "length",
        "ProjectionException",
        "Code",
        "UNSUPPORTED_AMPERSAND_ESCAPE_USAGE",
        "get",
        "path",
        "next",
        "path",
        "charAt",
        "i",
        "next",
        "next",
        "segment",
        "append",
        "next",
        "i",
        "ProjectionException",
        "Code",
        "UNSUPPORTED_AMPERSAND_ESCAPE_USAGE",
        "get",
        "path",
        "segment",
        "append",
        "ch",
        "segment",
        "isEmpty",
        "ProjectionException",
        "Code",
        "UNSUPPORTED_PROJECTION_PATH",
        "get",
        "path",
        "decodedSegments",
        "add",
        "segment",
        "toString",
        "decodedSegments",
        "Override",
        "encodeNoEscaping"
    ],
    "literals": [
        "\"path cannot be null\"",
        "\".\"",
        "\"unsupportedProjectionPath\"",
        "\"unsupportedAmpersandEscape\"",
        "\"unsupportedAmpersandEscape\"",
        "\"unsupportedProjectionPath\""
    ],
    "variables": [
        "segments"
    ],
    "comments": [
        "Make a defensive copy to preserve immutability.",
        "If the dot is encountered, the current segment is complete.",
        "If the current segment is empty, error out.",
        "reset the segment",
        "Escape character encountered",
        "Valid escape: append the next character and skip it",
        "Invalid escape: the next character is not either '.' or '&'",
        "Regular character: add to the current segment",
        "Add the last segment and check if it's empty"
    ],
    "docstrings": [
        "* An immutable representation of a projection path composed of segments.\n *\n * <p>A projection path is created from an encoded string (e.g., \"pricing.price&amp;.usd\"), where\n * segments are separated by dots ('.') and the escape character ('&amp;') allows literal dots or\n * ampersands within segments.\n *\n * <p>Use {@link #from(String)} to create an instance, {@link #getSegment(int)} to access the\n * segments, and {@link #encodeNoEscaping()} to get the dot-separated path string.",
        "projection path for document id",
        "projection path for vector embedding field",
        "projection path for vector embedding text field",
        "Accessor method to get the projection path for document id",
        "Accessor method to get the projection path for vector embedding field",
        "Accessor method to get the projection path for vector embedding text field",
        "* Factory method to create a ProjectionPath from the given encoded path string. Handles escape\n   * sequences where '&' escapes a dot or an ampersand.\n   *\n   * @param path the encoded path string (e.g., \"pricing.price&.usd\")\n   * @return a new ProjectionPath instance containing the decoded segments\n   * @throws IllegalArgumentException if the escape sequence is invalid",
        "Returns the number of segments in this projection path.",
        "Returns the segment at the specified index.",
        "* Encodes the ProjectionPath back into a string by joining segments with a dot. This encoding is\n   * used for filter and sort use cases, where escapes are not allowed.\n   *\n   * @return the encoded path string (e.g., \"pricing.price.usd\")",
        "* Decodes a path string into its constituent segments based on custom rules.\n   *\n   * <p>The decoding process follows these steps:\n   *\n   * <ol>\n   *   <li>\n   *       <p>Scan the encoded path string character-by-character to build segments.\n   *   <li>\n   *       <p>If the scanned character is {@code '.'}, consider the current segment complete.\n   *       <ul>\n   *         <li>If the current segment is empty, an error is thrown (this handles cases where the\n   *             path starts with a dot, ends with a dot, or contains consecutive dots).\n   *         <li>Otherwise, the current segment is added to the list, and a new segment is started.\n   *       </ul>\n   *   <li>\n   *       <p>If the scanned character is {@code '&'}, check for a following character:\n   *       <ul>\n   *         <li>\n   *             <p>If there is no following character, an error is thrown.\n   *         <li>\n   *             <p>If the following character is either {@code '.'} or {@code '&'}, append that\n   *             following character into current segment, and the escape is skipped.\n   *         <li>\n   *             <p>If it is any other character, an error is thrown (only {@code '&'} and {@code\n   *             '.'} are allowed to be escaped).\n   *       </ul>\n   *   <li>\n   *       <p>If the scanned character is neither {@code '&'} nor {@code '.'}, append it to the\n   *       current segment.\n   *   <li>\n   *       <p>When the end of the expression is reached, consider the last segment complete.\n   * </ol>\n   *\n   * <p>For example, the input {@code \"pricing.price&.usd\"} results in: {@code [\"pricing\",\n   * \"price.usd\"]}.\n   *\n   * @param path the encoded path string.\n   * @return a list of decoded segments.",
        "* Returns the string representation of the ProjectionPath. By default, it returns the encoded\n   * form"
    ],
    "functions": [
        "ProjectionPath",
        "ProjectionPath",
        "forDocId",
        "ProjectionPath",
        "forVectorEmbeddingField",
        "ProjectionPath",
        "forVectorEmbeddingTextField",
        "ProjectionPath",
        "getSegmentsSize",
        "getSegment",
        "encodeNoEscaping",
        "decode",
        "toString"
    ],
    "classes": [
        "ProjectionPath"
    ]
}