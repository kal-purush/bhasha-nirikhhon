{
    "identifiers": [
        "os",
        "json",
        "streamlit",
        "st",
        "gspread",
        "time",
        "pytz",
        "uuid",
        "random",
        "oauth2client",
        "service_account",
        "ServiceAccountCredentials",
        "datetime",
        "datetime",
        "langchain_core",
        "runnables",
        "RunnableBranch",
        "RunnableLambda",
        "RunnableParallel",
        "RunnablePassthrough",
        "langchain_core",
        "messages",
        "AIMessage",
        "HumanMessage",
        "SystemMessage",
        "langchain_core",
        "output_parsers",
        "StrOutputParser",
        "langchain_core",
        "prompts",
        "ChatPromptTemplate",
        "langchain_core",
        "prompts",
        "prompt",
        "PromptTemplate",
        "langchain_core",
        "runnables",
        "ConfigurableField",
        "neo4j",
        "GraphDatabase",
        "langchain_community",
        "vectorstores",
        "Neo4jVector",
        "langchain_community",
        "graphs",
        "Neo4jGraph",
        "neo4j",
        "GraphDatabase",
        "typing",
        "Tuple",
        "Optional",
        "pydantic",
        "BaseModel",
        "Field",
        "field_validator",
        "ConfigDict",
        "langchain_community",
        "vectorstores",
        "neo4j_vector",
        "remove_lucene_chars",
        "langchain_nomic",
        "NomicEmbeddings",
        "langchain_ollama",
        "ChatOllama",
        "langchain_groq",
        "ChatGroq",
        "langchain_google_genai",
        "ChatGoogleGenerativeAI",
        "dotenv",
        "load_dotenv",
        "langchain_community",
        "embeddings",
        "JinaEmbeddings",
        "langchain",
        "retrievers",
        "ContextualCompressionRetriever",
        "langchain_community",
        "document_compressors",
        "JinaRerank",
        "st",
        "set_page_config",
        "page_title",
        "page_icon",
        "layout",
        "load_dotenv",
        "time",
        "perf_counter",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "conversion_done",
        "st",
        "session_state",
        "conversion_done",
        "st",
        "toast",
        "icon",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "random",
        "randint",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "st",
        "session_state",
        "text",
        "special_chars",
        "text",
        "text",
        "replace",
        "text",
        "strip",
        "st",
        "cache_resource",
        "KEY",
        "ChatGroq",
        "model",
        "temperature",
        "api_key",
        "KEY",
        "load_llm_groq",
        "st",
        "secrets",
        "st",
        "cache_resource",
        "st",
        "secrets",
        "ServiceAccountCredentials",
        "from_json_keyfile_dict",
        "credentials_dict",
        "scope",
        "gspread",
        "authorize",
        "creds",
        "client",
        "name",
        "rating",
        "feedback",
        "chat_message",
        "connect_to_google_sheets",
        "client",
        "open_by_url",
        "sheet1",
        "len",
        "chat_message",
        "chat",
        "chat_message",
        "chat",
        "chat",
        "chats",
        "append",
        "role",
        "content",
        "comma",
        "join",
        "_chat",
        "_chat",
        "chats",
        "sheet",
        "append_row",
        "datetime",
        "now",
        "pytz",
        "timezone",
        "strftime",
        "name",
        "rating",
        "feedback",
        "conversation",
        "st",
        "cache_resource",
        "Neo4jGraph",
        "url",
        "st",
        "secrets",
        "username",
        "st",
        "secrets",
        "password",
        "st",
        "secrets",
        "load_knowledge_graph",
        "st",
        "cache_resource",
        "Neo4jVector",
        "from_existing_graph",
        "JinaEmbeddings",
        "model",
        "search_type",
        "node_label",
        "text_node_properties",
        "embedding_node_property",
        "url",
        "st",
        "secrets",
        "username",
        "st",
        "secrets",
        "password",
        "st",
        "secrets",
        "vector_index",
        "create_vector_space_from_graph",
        "BaseModel",
        "Field",
        "description",
        "field_validator",
        "mode",
        "cls",
        "value",
        "isinstance",
        "value",
        "json",
        "loads",
        "value",
        "json",
        "JSONDecodeError",
        "ValueError",
        "isinstance",
        "value",
        "ValueError",
        "value",
        "ChatPromptTemplate",
        "from_messages",
        "prompt",
        "llm_groq",
        "with_structured_output",
        "Entities",
        "input",
        "el",
        "el",
        "remove_lucene_chars_cust",
        "input",
        "split",
        "el",
        "word",
        "words",
        "full_text_query",
        "word",
        "full_text_query",
        "words",
        "full_text_query",
        "strip",
        "question",
        "entity_chain",
        "invoke",
        "question",
        "question",
        "entities",
        "entity",
        "entities",
        "names",
        "graph",
        "query",
        "generate_full_text_query",
        "entity",
        "result",
        "join",
        "el",
        "el",
        "response",
        "result",
        "question",
        "remove_lucene_chars_cust",
        "question",
        "el",
        "el",
        "vector_index",
        "similarity_search",
        "question",
        "k",
        "question",
        "structured_retriever",
        "question",
        "retrieve_context_by_vector",
        "question",
        "doc",
        "unstructured_data",
        "doc",
        "metadata",
        "sections",
        "doc",
        "metadata",
        "doc",
        "metadata",
        "sections",
        "doc",
        "metadata",
        "doc",
        "metadata",
        "sections",
        "doc",
        "metadata",
        "doc",
        "metadata",
        "sections",
        "doc",
        "metadata",
        "doc",
        "metadata",
        "sections",
        "doc",
        "metadata",
        "documents",
        "append",
        "sections",
        "doc",
        "page_content",
        "replace",
        "structured_data",
        "nl",
        "join",
        "documents",
        "final_data",
        "final_data",
        "PromptTemplate",
        "from_template",
        "_template",
        "chat_history",
        "Tuple",
        "human",
        "ai",
        "chat_history",
        "buffer",
        "append",
        "HumanMessage",
        "content",
        "human",
        "buffer",
        "append",
        "AIMessage",
        "content",
        "ai",
        "buffer",
        "RunnableBranch",
        "RunnableLambda",
        "x",
        "x",
        "get",
        "with_config",
        "run_name",
        "RunnablePassthrough",
        "assign",
        "chat_history",
        "x",
        "_format_chat_history",
        "x",
        "CONDENSE_QUESTION_PROMPT",
        "llm_groq",
        "StrOutputParser",
        "RunnableLambda",
        "x",
        "x",
        "ChatPromptTemplate",
        "from_template",
        "template",
        "RunnableParallel",
        "_search_query",
        "retriever",
        "RunnablePassthrough",
        "prompt",
        "llm_groq",
        "StrOutputParser",
        "st",
        "write",
        "st",
        "session_state",
        "st",
        "dialog",
        "st",
        "form",
        "key",
        "enter_to_submit",
        "clear_on_submit",
        "st",
        "text_input",
        "st",
        "text_area",
        "st",
        "feedback",
        "options",
        "st",
        "form_submit_button",
        "selected_rating",
        "save_feedback_to_google_sheets",
        "name",
        "rating",
        "selected_rating",
        "feedback",
        "st",
        "session_state",
        "messages_product_knowledge",
        "st",
        "success",
        "st",
        "error",
        "feedback",
        "response",
        "delay",
        "res",
        "response",
        "res",
        "time",
        "sleep",
        "delay",
        "st",
        "expander",
        "icon",
        "expanded",
        "st",
        "markdown",
        "body",
        "st",
        "button",
        "send_feedback",
        "message",
        "st",
        "session_state",
        "messages_product_knowledge",
        "st",
        "chat_message",
        "message",
        "avatar",
        "message",
        "markdown",
        "message",
        "st",
        "session_state",
        "need_greetings_product_knowledge",
        "st",
        "chat_message",
        "avatar",
        "markdown",
        "greetings",
        "st",
        "session_state",
        "messages_product_knowledge",
        "append",
        "greetings",
        "st",
        "session_state",
        "st",
        "chat_input",
        "prompt",
        "st",
        "chat_message",
        "st",
        "markdown",
        "prompt",
        "chain",
        "stream",
        "st",
        "session_state",
        "chat_history_product_knowledge",
        "prompt",
        "st",
        "session_state",
        "messages_product_knowledge",
        "append",
        "prompt",
        "st",
        "chat_message",
        "avatar",
        "st",
        "write_stream",
        "stream_response",
        "response",
        "st",
        "session_state",
        "messages_product_knowledge",
        "append",
        "response",
        "st",
        "session_state",
        "chat_history_product_knowledge",
        "append",
        "prompt",
        "response",
        "len",
        "st",
        "session_state",
        "chat_history_product_knowledge",
        "st",
        "session_state",
        "st",
        "session_state",
        "chat_history_product_knowledge",
        "st",
        "session_state",
        "st",
        "session_state",
        "uuid",
        "uuid4",
        "time",
        "perf_counter",
        "end_counter",
        "start_counter",
        "st",
        "session_state",
        "total_time",
        "e",
        "st",
        "error"
    ],
    "literals": [
        "\"PPKS | Chat Bot\"",
        "\"assets/ELA 1x1.jpg\"",
        "\"centered\"",
        "'messages_product_knowledge'",
        "'_log'",
        "'_log'",
        "'chat_history_product_knowledge'",
        "'need_greetings_product_knowledge'",
        "'convert_status'",
        "'conversion_done'",
        "'conversion_running'",
        "'idx_llm'",
        "'idx_llm'",
        "'total_time'",
        "'total_time'",
        "\"Document conversion finished!\"",
        "\"✅\"",
        "'current_main_key_idx'",
        "'use_backup'",
        "'backup_idx'",
        "\"+\"",
        "\"-\"",
        "\"&\"",
        "\"|\"",
        "\"!\"",
        "\"(\"",
        "\")\"",
        "\"{\"",
        "\"}\"",
        "\"[\"",
        "\"]\"",
        "\"^\"",
        "'\"'",
        "\"~\"",
        "\"*\"",
        "\"?\"",
        "\":\"",
        "\"\\\\\"",
        "\"/\"",
        "\" \"",
        "'llama-3.1-70b-versatile'",
        "'groq_key'",
        "'groq_1'",
        "\"https://spreadsheets.google.com/feeds\"",
        "\"https://www.googleapis.com/auth/drive\"",
        "\"gspread_credential\"",
        "\"https://docs.google.com/spreadsheets/d/12E4rDwSjblz-eDY6xiBpOECd0a8dwqOR1qQWsyXP1F4/edit?usp=sharing\"",
        "\",\\n\"",
        "rf\"\"",
        "\"role\"",
        "\"content\"",
        "f\"{role}:{content}\"",
        "f\"\"\"\n{comma.join([_chat for _chat in chats])}\n\"\"\"",
        "\"Asia/Jakarta\"",
        "\"%Y-%m-%d %H:%M:%S\"",
        "'neo4j_product_knowledge'",
        "\"NEO4J_URI\"",
        "'neo4j_product_knowledge'",
        "\"NEO4J_USERNAME\"",
        "'neo4j_product_knowledge'",
        "\"NEO4J_PASSWORD\"",
        "\"jina-clip-v2\"",
        "\"hybrid\"",
        "\"Document\"",
        "\"text\"",
        "\"embedding\"",
        "'neo4j_product_knowledge'",
        "\"NEO4J_URI\"",
        "'neo4j_product_knowledge'",
        "\"NEO4J_USERNAME\"",
        "'neo4j_product_knowledge'",
        "\"NEO4J_PASSWORD\"",
        "\"All the person, organization, product, or business entities that \"",
        "\"appear in the text\"",
        "\"names\"",
        "'before'",
        "\"Invalid list format; unable to parse string as list.\"",
        "\"items must be a list of strings.\"",
        "\"system\"",
        "\"You are extracting organization, product, and person entities from the text.\"",
        "\"human\"",
        "\"Use the given format to extract information from the following \"",
        "\"input: {question}\"",
        "\"\"",
        "f\" {word}~2 AND\"",
        "f\" {words[-1]}~2\"",
        "\"\"",
        "\"question\"",
        "\"=\"",
        "\"Question : \"",
        "\"Entities : \"",
        "\"=\"",
        "\"query\"",
        "\"\\n\"",
        "'output'",
        "\"\"",
        "\"Header 1\"",
        "f\"Header 1 - {doc.metadata['Header 1']}\\n\"",
        "'Header 1'",
        "\"Header 2\"",
        "f\"Header 2 - {doc.metadata['Header 2']}\\n\"",
        "'Header 2'",
        "\"Header 3\"",
        "f\"Header 3 - {doc.metadata['Header 3']}\\n\"",
        "'Header 3'",
        "\"Header 4\"",
        "f\"Header 4 - {doc.metadata['Header 4']}\\n\"",
        "'Header 4'",
        "\"Header 5\"",
        "f\"Header 5 - {doc.metadata['Header 5']}\\n\"",
        "'Header 5'",
        "f\"\"\"\nSection :\n{sections}\nContent :\n{doc.page_content.replace(\"text: \", \"\")}\n\"\"\"",
        "\"text: \"",
        "\"\"",
        "\"\\n---\\n\"",
        "\"\\n\"",
        "f\"\"\"\n\nStructured data:\n{structured_data}\n\n\nUnstructured data:\n{nl.join(documents)}\n\n\"\"\"",
        "\"chat_history\"",
        "\"HasChatHistoryCheck\"",
        "\"chat_history\"",
        "\"question\"",
        "\"context\"",
        "\"question\"",
        "'feedback'",
        "\"Berikan Feedback\"",
        "\"feedback_input\"",
        "\"Nama\"",
        "\"Feedback\"",
        "\"stars\"",
        "\"Submit\"",
        "\"Terimakasih atas umpan balik anda!\"",
        "\"Tolong berikan rating 🙏\"",
        "\"INI FEEDBACK: \"",
        "\"ChatBot PPKS\"",
        "\":material/priority_high:\"",
        "\"Feedback Form\"",
        "\"primary\"",
        "'role'",
        "\"assets/ELA 1x1.jpg\"",
        "'role'",
        "\"assistant\"",
        "'content'",
        "\"Selamat Datang, Saya adalah El**Ai**s, asisten virtual dari Pusat Penelitian Kelapa Sawit Indonesia (PPKS) yang dapat memberikan informasi seputar profil, produk dan layanan yang ada di PPKS, ada yang bisa saya bantu?\"",
        "\"assistant\"",
        "\"assets/ELA 1x1.jpg\"",
        "'role'",
        "'assistant'",
        "'content'",
        "\"user\"",
        "\"chat_history\"",
        "\"question\"",
        "'role'",
        "'user'",
        "'content'",
        "\"assistant\"",
        "\"assets/ELA 1x1.jpg\"",
        "'role'",
        "'assistant'",
        "'content'",
        "\"session_id\"",
        "'total_time'",
        "\"Sedang Terjadi Error, silahkan refresh laman dan coba lagi!\""
    ],
    "variables": [
        "start_counter",
        "messages_product_knowledge",
        "chat_history_product_knowledge",
        "need_greetings_product_knowledge",
        "convert_status",
        "conversion_done",
        "conversion_running",
        "conversion_done",
        "current_main_key_idx",
        "use_backup",
        "backup_idx",
        "special_chars",
        "text",
        "llm_groq",
        "scope",
        "credentials_dict",
        "creds",
        "client",
        "client",
        "sheet",
        "chats",
        "comma",
        "conversation",
        "role",
        "content",
        "conversation",
        "graph",
        "vector_index",
        "vector_index",
        "names",
        "value",
        "prompt",
        "entity_chain",
        "full_text_query",
        "words",
        "result",
        "entities",
        "response",
        "question",
        "structured_data",
        "unstructured_data",
        "documents",
        "sections",
        "nl",
        "new_line",
        "final_data",
        "_template",
        "CONDENSE_QUESTION_PROMPT",
        "buffer",
        "_search_query",
        "template",
        "prompt",
        "chain",
        "name",
        "feedback",
        "rating",
        "selected_rating",
        "greetings",
        "need_greetings_product_knowledge",
        "prompt",
        "response",
        "response",
        "chat_history_product_knowledge",
        "session_id",
        "end_counter",
        "total_time"
    ],
    "comments": [
        "Installing Dependencies",
        "Load environtment app",
        "Start Counter",
        "Setup a session state to hold up all the old messages",
        "st.write(st.session_state.convert_status)",
        "Or use st.success",
        "Reset to avoid repeated toasts",
        "Pilih main key secara acak",
        "if char == \"/\":",
        "text = text.replace(char, \"\\\\/\")",
        "else :",
        "Load llm model using Groq",
        "llama-3.1-70b-versatile, llama-3.1-8b-instant",
        "# Get list main api keys",
        "main_keys = [",
        "st.secrets['groq_key']['groq_1'],",
        "st.secrets['groq_key']['groq_2'],",
        "st.secrets['groq_key']['groq_3'],",
        "st.secrets['groq_key']['groq_4'],",
        "st.secrets['groq_key']['groq_5'],",
        "# st.secrets['groq_key']['groq_6'],",
        "# st.secrets['groq_key']['groq_7'],",
        "# st.secrets['groq_key']['groq_8'],",
        "# st.secrets['groq_key']['groq_9'],",
        "# st.secrets['groq_key']['groq_10'],",
        "]",
        "# Get list backup api keys",
        "backup_keys = [",
        "st.secrets['groq_key']['groq_11'],",
        "st.secrets['groq_key']['groq_12'],",
        "st.secrets['groq_key']['groq_13'],",
        "st.secrets['groq_key']['groq_14'],",
        "# st.secrets['groq_key']['groq_15'],",
        "# st.secrets['groq_key']['groq_16'],",
        "# st.secrets['groq_key']['groq_17'],",
        "# st.secrets['groq_key']['groq_18'],",
        "# st.secrets['groq_key']['groq_19'],",
        "# st.secrets['groq_key']['groq_20'],",
        "]",
        "# Determine the api key currently in use",
        "if not st.session_state.use_backup:",
        "current_key = main_keys[st.session_state.current_main_key_idx]",
        "else:",
        "current_key = backup_keys[st.session_state.backup_idx]",
        "llms_groq = [load_llm_groq(st.secrets['groq_key']['groq_1']), load_llm_groq(st.secrets['groq_key']['groq_2']), load_llm_groq(st.secrets['groq_key']['groq_3']), load_llm_groq(st.secrets['groq_key']['groq_4']), load_llm_groq(st.secrets['groq_key']['groq_5'])]",
        "random_idx = random.randint(0, 4)",
        "llm_groq = llms_groq[random_idx]",
        "Define the scope",
        "Authenticate credentials",
        "Save feedback to Google Sheets",
        "Connect to Google Sheets",
        "Open the Google Sheet by name",
        "print(conversation)",
        "Append the feedback",
        "Load knowledge graph fron neo4j",
        "@st.cache_resource",
        "def load_reranker():",
        "return JinaRerank(",
        "model=\"jina-reranker-v2-base-multilingual\"",
        ")",
        "Create retrival flow",
        "Extract entities from text",
        "Attempt to parse the string as JSON",
        "Generate Query",
        "Fulltext index query and retirieve context",
        "def _retriever():",
        "retriever =  vector_index.as_retriever(",
        "search_type = 'similarity',",
        "search_kwargs = {",
        "'k' : 5,",
        "}",
        ")",
        "return retriever",
        "compressor = load_reranker()",
        "Retrival knowledge",
        "print(f\"Search query: {question}\")",
        "retriever = _retriever()",
        "compression_retriever = ContextualCompressionRetriever(",
        "base_compressor=compressor, base_retriever=retriever",
        ")",
        "compressed_docs = compression_retriever.get_relevant_documents(",
        "question",
        ")",
        "for key, value in doc.metadata.items() :",
        "sections += f\"{key} - {value}\\n\"",
        "Reference:",
        "{new_line.join(references)}",
        "Chat history fromatter",
        "Extract chat history if exists",
        "If input includes chat_history, we condense it with the follow-up question",
        "Condense follow-up question and chat into a standalone_question",
        "Else, we have no chat history, so just pass through the question",
        "Prompt to real prompt",
        "Creating chain for llm",
        "print(\"INI FEEDBACK: \", feedback)",
        "Save data to Google Sheets",
        "st.write(feedback)",
        "Displaying all historical messages",
        "greet users",
        "Getting chat input from user",
        "Displaying chat prompt",
        "Displaying user chat prompt",
        "Getting response from llm model",
        "Saving user prompt to session state",
        "Displaying response",
        "Saving response to chat history in session state",
        "Saving user and llm response to chat history",
        "Just use 3 latest chat to chat history",
        "Buat session ID jika belum ada",
        "Cetak session ID",
        "st.write(\"Session ID:\", st.session_state.session_id)",
        "st.write(st.session_state['total_time'], st.session_state['idx_llm'], random_idx)"
    ],
    "docstrings": [
        "\"\"\"Remove Lucene special characters\"\"\"",
        "\"\"\"Identifying information about entities.\"\"\"",
        "\"\"\"CALL db.index.fulltext.queryNodes('entity', $query, {limit:2})\n            YIELD node,score\n            CALL(node) {\n              MATCH (node)-[r:!MENTIONS]->(neighbor)\n              RETURN node.id + ' - ' + type(r) + ' -> ' + neighbor.id AS output\n              UNION ALL\n              MATCH (node)<-[r:!MENTIONS]-(neighbor)\n              RETURN neighbor.id + ' - ' + type(r) + ' -> ' +  node.id AS output\n            }\n            RETURN output\n            \"\"\"",
        "\"\"\"\nYou are an assistant skilled in paraphrasing questions, ensuring they align with the current conversation context. Every time a new question appears, check the recent chat history to decide if it’s on the same topic or if there’s a new topic shift. \n\nGuidelines:\n1. If the latest question is vague (e.g., \"What is its capital?\"), identify the most recent *explicitly mentioned topic* in the chat history and use it as context.\n2. When a new complete question introduces a different topic, assume it’s a topic shift and use this new topic in the next responses until another shift occurs.\n3. Prioritize the most recent complete topic if multiple topics are discussed in history.\n\n**Examples:**\n\nExample 1:\n**Chat History:**\n- User: \"Who is the president of Indonesia?\"\n- AI: \"The president of Indonesia is Joko Widodo.\"\n\n**Latest Question:**  \nUser: \"When did it gain independence?\"\n\n**Paraphrased Question:**  \n\"When did Indonesia gain independence?\"\n\n---\n\nExample 2 (Topic Shift):\n**Chat History:**\n- User: \"Who is the president of Indonesia?\"\n- AI: \"The president of Indonesia is Joko Widodo.\"\n- User: \"What is its capital?\"\n- AI: \"The capital of Indonesia is Jakarta.\"\n- User: \"Who is the president of Vietnam?\"\n- AI: \"The president of Vietnam is Tran Dai Quang.\"\n\n**Latest Question:**  \nUser: \"What is its capital?\"\n\n**Paraphrased Question:**  \n\"What is the capital of Vietnam?\"\n\n---\n\nExample 3:\n**Chat History:**\n- User: \"Who is the CEO of Apple?\"\n- AI: \"The CEO of Apple is Tim Cook.\"\n  \n**Latest Question:**  \nUser: \"How many employees does it have?\"\n\n**Paraphrased Question:**  \n\"How many employees does Apple have?\"\n\n---\n\nExample 4 (Topic Shift):\n**Chat History:**\n- User: \"Who is the CEO of Apple?\"\n- AI: \"The CEO of Apple is Tim Cook.\"\n- User: \"What is the companys revenue?\"\n- AI: \"Apple's revenue is $274.5 billion.\"\n\n**Latest Question:**  \nUser: \"What is his revenue?\"\n\n**Paraphrased Question:**  \n\"What is the revenue of CEO Apple?\"\n\n---\n\nNow, parafrase the latest question based on the recent topic or topic shift, using the latest chat history provided.\nBut don't explain in  output. just give the parafrased question as output.\n\n**Chat History:**\n{chat_history}\n\n**Latest Question:**\n{question}\n\n**Paraphrased Question:**\n\"\"\"",
        "\"\"\"Your name is El**Ai**s. You are a great, friendly and professional AI chat bot about product from the \"Pusat Penelitian Kelapa Sawit Indonesia (PPKS) or Indonesian Oil Palm Research Institute (IOPRI)\". The website (https://iopri.co.id/).\n\n### User Question:\n{question}\n\n### Retrieved Context:\n{context}\n\n### Important Instructions:\n- Base your response only on the provided context. Do not assume facts not included here.\n\nYour Answer: \"\"\"",
        "\"\"\"\nEl**Ai**s merupakan asisten virtual dari Pusat Penelitian Kelapa Sawit Indonesia (PPKS) yang dapat memberikan informasi seputar produk dan layanan yang ada di **Product Knowledge : 2023** PPKS.\n\n**Aplikasi** ini sedang dalam pengembangan dan memerlukan **Feedback** dari pengguna.\n\nSilahkan coba untuk menanyakan sesuatu seputar Produk dan Layanan. Setelah itu, mohon untuk mengisi *Feedback Form* dibawah ini\n\"\"\""
    ],
    "functions": [
        "remove_lucene_chars_cust",
        "load_llm_groq",
        "connect_to_google_sheets",
        "save_feedback_to_google_sheets",
        "load_knowledge_graph",
        "create_vector_space_from_graph",
        "parse_stringified_list",
        "generate_full_text_query",
        "structured_retriever",
        "retrieve_context_by_vector",
        "retriever",
        "_format_chat_history",
        "store_text_area_value",
        "send_feedback",
        "stream_response"
    ],
    "classes": [
        "Entities"
    ]
}