{
    "identifiers": [
        "typing",
        "Optional",
        "pennylane",
        "qml",
        "pennylane",
        "drawer",
        "tape_mpl",
        "_add_operation_to_drawer",
        "pennylane",
        "measurements",
        "mid_measure",
        "MeasurementValue",
        "MidMeasureMP",
        "pennylane",
        "wires",
        "Wires",
        "MidMeasureMP",
        "wires",
        "Optional",
        "Wires",
        "angle",
        "Optional",
        "plane",
        "Optional",
        "reset",
        "Optional",
        "postselect",
        "Optional",
        "id",
        "Optional",
        "wires",
        "Wires",
        "wires",
        "reset",
        "reset",
        "postselect",
        "postselect",
        "id",
        "id",
        "plane",
        "angle",
        "angle",
        "raw_wires",
        "plane",
        "reset",
        "id",
        "metadata",
        "property",
        "__class__",
        "plane",
        "angle",
        "wires",
        "tolist",
        "id",
        "hash",
        "fingerprint",
        "_shortname",
        "plane",
        "lower",
        "wires",
        "tolist",
        "angle",
        "property",
        "plane",
        "qml",
        "PhaseShift",
        "angle",
        "wires",
        "qml",
        "H",
        "wires",
        "plane",
        "qml",
        "RY",
        "angle",
        "wires",
        "plane",
        "qml",
        "RX",
        "angle",
        "wires",
        "NotImplementedError",
        "plane",
        "decimals",
        "base_label",
        "cache",
        "join",
        "superscripts",
        "i",
        "i",
        "plane",
        "_plane",
        "decimals",
        "_label",
        "angle",
        "decimals",
        "postselect",
        "_label",
        "postselect",
        "_label",
        "reset",
        "_label",
        "_add_operation_to_drawer",
        "register",
        "op",
        "ParametricMidMeasureMP",
        "drawer",
        "layer",
        "_",
        "op",
        "plane",
        "drawer",
        "measure",
        "layer",
        "op",
        "wires",
        "text",
        "text",
        "op",
        "reset",
        "drawer",
        "erase_wire",
        "layer",
        "op",
        "wires",
        "drawer",
        "box_gate",
        "layer",
        "op",
        "wires",
        "box_options",
        "text_options",
        "results",
        "results",
        "qml",
        "transform",
        "tape",
        "op",
        "tape",
        "operations",
        "isinstance",
        "op",
        "ParametricMidMeasureMP",
        "op",
        "diagonalizing_gates",
        "new_operations",
        "extend",
        "diag_gates",
        "qml",
        "QueuingManager",
        "stop_recording",
        "MidMeasureMP",
        "op",
        "wires",
        "reset",
        "op",
        "reset",
        "postselect",
        "op",
        "postselect",
        "id",
        "op",
        "id",
        "new_operations",
        "append",
        "new_mp",
        "new_mp",
        "isinstance",
        "op",
        "qml",
        "ops",
        "Conditional",
        "op",
        "meas_val",
        "processing_fn",
        "mps_mapping",
        "get",
        "op",
        "op",
        "op",
        "op",
        "meas_val",
        "measurements",
        "MeasurementValue",
        "mps",
        "processing_fn",
        "processing_fn",
        "isinstance",
        "op",
        "ParametricMidMeasureMP",
        "qml",
        "QueuingManager",
        "stop_recording",
        "qml",
        "ops",
        "Conditional",
        "expr",
        "expr",
        "then_op",
        "gate",
        "gate",
        "op",
        "diagonalizing_gates",
        "MidMeasureMP",
        "op",
        "wires",
        "reset",
        "op",
        "reset",
        "postselect",
        "op",
        "postselect",
        "id",
        "op",
        "id",
        "qml",
        "ops",
        "Conditional",
        "expr",
        "expr",
        "then_op",
        "new_mp",
        "new_operations",
        "extend",
        "diag_gates",
        "new_operations",
        "append",
        "new_cond",
        "op",
        "new_mp",
        "qml",
        "QueuingManager",
        "stop_recording",
        "qml",
        "ops",
        "Conditional",
        "expr",
        "expr",
        "then_op",
        "op",
        "new_operations",
        "append",
        "new_cond",
        "new_operations",
        "append",
        "op",
        "tape",
        "copy",
        "operations",
        "new_operations",
        "new_tape",
        "null_postprocessing"
    ],
    "literals": [
        "\"measure\"",
        "\"angle\"",
        "\"wires\"",
        "\"plane\"",
        "\"reset\"",
        "\"id\"",
        "f\"{self._shortname}_{self.plane.lower()}(wires={self.wires.tolist()}, angle={self.angle})\"",
        "\"XY\"",
        "\"ZX\"",
        "\"YZ\"",
        "f\"{self.plane} plane not implemented. Available plans are 'XY' 'ZX' and 'YZ'.\"",
        "r\"\"\"How the mid-circuit measurement is represented in diagrams and drawings.\n\n        Args:\n            decimals=None (Int): If ``None``, no parameters are included. Else,\n                how to round the parameters.\n            base_label=None (Iterable[str]): overwrite the non-parameter component of the label.\n                Required to match general call signature. Not used.\n            cache=None (dict): dictionary that carries information between label calls\n                in the same drawing. Required to match general call signature. Not used.\n\n        Returns:\n            str: label to use in drawings\n        \"\"\"",
        "\"X\"",
        "\"ˣ\"",
        "\"Y\"",
        "\"ʸ\"",
        "\"Z\"",
        "\"ᶻ\"",
        "\"\"",
        "f\"┤↗{_plane}\"",
        "f\"({self.angle:.{decimals}f})\"",
        "\"₁\"",
        "\"₀\"",
        "\"├\"",
        "\"│  │0⟩\"",
        "\"|0⟩\"",
        "\"zorder\"",
        "\"zorder\""
    ],
    "variables": [
        "_shortname",
        "batch_size",
        "plane",
        "angle",
        "metadata",
        "fingerprint",
        "superscripts",
        "_plane",
        "_label",
        "text",
        "new_operations",
        "mps_mapping",
        "diag_gates",
        "new_mp",
        "mps_mapping",
        "op",
        "processing_fn",
        "mps",
        "expr",
        "diag_gates",
        "new_mp",
        "new_cond",
        "mps_mapping",
        "new_cond",
        "new_tape"
    ],
    "comments": [
        "Copyright 2025 Xanadu Quantum Technologies Inc.",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "pylint: disable=too-many-arguments",
        "pylint: disable=arguments-renamed, arguments-differ",
        "pylint: disable=unused-argument",
        "assume one wire",
        "add diagonalizing gates to tape",
        "add computational basis MCM to tape",
        "track mapping from original to computational basis MCMs",
        "from MCM mapping, map any MCMs in the condition if needed",
        "add conditional diagonalizing gates + conditional MCM to the tape",
        "track mapping from original to computational basis MCMs"
    ],
    "docstrings": [
        "\"\"\"This module contains the classes and functions for creating and diagonalizing\nmid-circuit measurements with a parameterized measurement axis.\"\"\"",
        "\"\"\"Parametric mid-circuit measurement. The basis for the measurement is parametrized by\n    a plane (\"XY\", \"YZ\" or \"ZX\"), and an angle within the plane.\n\n    This class additionally stores information about unknown measurement outcomes in the qubit model.\n    Measurements on a single qubit are assumed.\n\n    .. warning::\n        Measurements should be diagonalized before execution for any device that only natively supports\n        mid-circuit measurements in the computational basis. To diagonalize, the :func:`diagonalize_mcms <pennylane.ftqc.diagonalize_mcms>`\n        transform can be applied.\n\n        Skipping diagonalization for a circuit containing parametric mid-circuit measurements may result\n        in a completed execution with incorrect results.\n\n    Args:\n        wires (.Wires): The wires the measurement process applies to.\n            This can only be specified if an observable was not provided.\n\n    Keyword Args:\n        angle (float): The angle in radians\n        plane (str): The plane the measurement basis lies in. Options are \"XY\", \"ZX\" and \"YZ\"\n        reset (bool): Whether to reset the wire after measurement.\n        postselect (Optional[int]): Which basis state to postselect after a mid-circuit\n            measurement. None by default. If postselection is requested, only the post-measurement\n            state that is used for postselection will be considered in the remaining circuit.\n        id (str): Custom label given to a measurement instance.\n    \"\"\"",
        "\"\"\"int: Returns an integer hash uniquely representing the measurement process\"\"\"",
        "\"\"\"Representation of this class.\"\"\"",
        "\"\"\"Whether there are gates that need to be applied to diagonalize the measurement\"\"\"",
        "\"\"\"Decompose to a diagonalizing gate and a standard MCM in the computational basis\"\"\"",
        "\"\"\"A postprocessing function returned by a transform that only converts the batch of results\n    into a result for a single ``QuantumTape``.\n    \"\"\"",
        "\"\"\"Diagonalize any mid-circuit measurements in a parameterized basis into the computational basis.\n\n    Args:\n        tape (QNode or QuantumScript or Callable): The quantum circuit to modify the mid-circuit measurements of.\n\n    Returns:\n        qnode (QNode) or tuple[List[QuantumScript], function]: The transformed circuit as described in :func:`qml.transform <pennylane.transform>`.\n\n    **Examples:**\n\n    This transform allows us to transform mid-circuit measurements into the measurement basis by adding\n    the relevant diagonalizing gates to the tape just before the measurement is performed.\n\n    .. code-block:: python3\n\n        from pennylane.ftqc import diagonalize_mcms, ParametricMidMeasureMP\n\n        dev = qml.device(\"default.qubit\")\n\n        @diagonalize_mcms\n        @qml.qnode(dev)\n        def circuit(x):\n            qml.RY(x[0], wires=0)\n            ParametricMidMeasureMP(0, angle=x[1], plane=\"XY\")\n            return qml.expval(qml.Z(0))\n\n    Applying the transform inserts the relevant gates before the measurement to allow\n    measurements to be in the Z basis, so the original circuit\n\n    >>> print(qml.draw(circuit, level=0)([np.pi/4, np.pi]))\n    0: ──RY(0.79)──┤↗ˣʸ(3.14)├─┤  <Z>\n\n    becomes\n\n    >>> print(qml.draw(circuit)([np.pi/4, np.pi]))\n    ──RY(0.79)──Rϕ(-3.14)──H──┤↗├─┤  <Z>\n    \"\"\""
    ],
    "functions": [
        "_flatten",
        "hash",
        "__repr__",
        "has_diagonalizing_gates",
        "diagonalizing_gates",
        "label",
        "_",
        "null_postprocessing",
        "diagonalize_mcms"
    ],
    "classes": [
        "ParametricMidMeasureMP"
    ]
}