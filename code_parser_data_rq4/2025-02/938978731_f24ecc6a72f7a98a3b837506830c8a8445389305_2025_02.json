{
    "identifiers": [
        "vis_nav_game",
        "Player",
        "Action",
        "Phase",
        "pygame",
        "cv2",
        "numpy",
        "np",
        "os",
        "pickle",
        "sklearn",
        "cluster",
        "KMeans",
        "sklearn",
        "neighbors",
        "BallTree",
        "tqdm",
        "tqdm",
        "natsort",
        "natsorted",
        "logging",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "INFO",
        "format",
        "Player",
        "Action",
        "IDLE",
        "KeyboardPlayerPyGame",
        "os",
        "path",
        "exists",
        "save_dir",
        "save_dir",
        "cv2",
        "SIFT_create",
        "sift_descriptors",
        "codebook",
        "os",
        "path",
        "exists",
        "np",
        "load",
        "os",
        "path",
        "exists",
        "pickle",
        "load",
        "open",
        "Action",
        "IDLE",
        "pygame",
        "init",
        "pygame",
        "K_LEFT",
        "Action",
        "LEFT",
        "pygame",
        "K_RIGHT",
        "Action",
        "RIGHT",
        "pygame",
        "K_UP",
        "Action",
        "FORWARD",
        "pygame",
        "K_DOWN",
        "Action",
        "BACKWARD",
        "pygame",
        "K_SPACE",
        "Action",
        "CHECKIN",
        "pygame",
        "K_ESCAPE",
        "Action",
        "QUIT",
        "pygame",
        "get",
        "pygame",
        "QUIT",
        "pygame",
        "quit",
        "Action",
        "QUIT",
        "Action",
        "QUIT",
        "pygame",
        "KEYDOWN",
        "key",
        "keymap",
        "last_act",
        "keymap",
        "key",
        "show_target_images",
        "pygame",
        "KEYUP",
        "key",
        "keymap",
        "last_act",
        "keymap",
        "key",
        "last_act",
        "get_target_images",
        "targets",
        "len",
        "targets",
        "cv2",
        "hconcat",
        "targets",
        "cv2",
        "hconcat",
        "targets",
        "cv2",
        "vconcat",
        "hor1",
        "hor2",
        "concat_img",
        "shape",
        "cv2",
        "line",
        "concat_img",
        "h",
        "h",
        "w",
        "color",
        "cv2",
        "line",
        "concat_img",
        "w",
        "h",
        "w",
        "color",
        "cv2",
        "FONT_HERSHEY_SIMPLEX",
        "cv2",
        "LINE_AA",
        "cv2",
        "putText",
        "concat_img",
        "h_offset",
        "w_offset",
        "font",
        "size",
        "color",
        "stroke",
        "line",
        "cv2",
        "putText",
        "concat_img",
        "h",
        "h_offset",
        "w_offset",
        "font",
        "size",
        "color",
        "stroke",
        "line",
        "cv2",
        "putText",
        "concat_img",
        "h_offset",
        "w",
        "w_offset",
        "font",
        "size",
        "color",
        "stroke",
        "line",
        "cv2",
        "putText",
        "concat_img",
        "h",
        "h_offset",
        "w",
        "w_offset",
        "font",
        "size",
        "color",
        "stroke",
        "line",
        "cv2",
        "imshow",
        "concat_img",
        "cv2",
        "waitKey",
        "images",
        "KeyboardPlayerPyGame",
        "set_target_images",
        "images",
        "show_target_images",
        "id",
        "window_name",
        "save_dir",
        "id",
        "os",
        "path",
        "exists",
        "path",
        "cv2",
        "imread",
        "path",
        "cv2",
        "imshow",
        "window_name",
        "img",
        "cv2",
        "waitKey",
        "id",
        "natsorted",
        "x",
        "x",
        "os",
        "listdir",
        "save_dir",
        "x",
        "endswith",
        "img",
        "tqdm",
        "files",
        "desc",
        "cv2",
        "imread",
        "os",
        "path",
        "join",
        "save_dir",
        "img",
        "sift",
        "detectAndCompute",
        "img",
        "sift_descriptors",
        "extend",
        "des",
        "np",
        "asarray",
        "sift_descriptors",
        "img",
        "sift",
        "detectAndCompute",
        "img",
        "codebook",
        "predict",
        "des",
        "codebook",
        "cluster_centers_",
        "codebook",
        "n_clusters",
        "np",
        "zeros",
        "k",
        "des",
        "shape",
        "i",
        "k",
        "np",
        "sum",
        "pred_labels",
        "i",
        "np",
        "sum",
        "des",
        "pred_labels",
        "i",
        "centroids",
        "i",
        "axis",
        "VLAD_feature",
        "flatten",
        "np",
        "sign",
        "VLAD_feature",
        "np",
        "sqrt",
        "np",
        "abs",
        "VLAD_feature",
        "VLAD_feature",
        "np",
        "linalg",
        "norm",
        "VLAD_feature",
        "VLAD_feature",
        "img",
        "get_VLAD",
        "img",
        "reshape",
        "tree",
        "query",
        "q_VLAD",
        "index",
        "sift_descriptors",
        "compute_sift_features",
        "np",
        "save",
        "sift_descriptors",
        "codebook",
        "KMeans",
        "n_clusters",
        "init",
        "n_init",
        "verbose",
        "fit",
        "sift_descriptors",
        "pickle",
        "dump",
        "codebook",
        "open",
        "database",
        "natsorted",
        "x",
        "x",
        "os",
        "listdir",
        "save_dir",
        "x",
        "endswith",
        "img",
        "tqdm",
        "exploration_observation",
        "desc",
        "cv2",
        "imread",
        "os",
        "path",
        "join",
        "save_dir",
        "img",
        "get_VLAD",
        "img",
        "database",
        "append",
        "VLAD",
        "BallTree",
        "database",
        "leaf_size",
        "tree",
        "KeyboardPlayerPyGame",
        "pre_navigation",
        "pre_nav_compute",
        "get_neighbor",
        "fpv",
        "display_img_from_id",
        "index",
        "index",
        "goal",
        "fpv",
        "fpv",
        "len",
        "fpv",
        "shape",
        "fpv",
        "screen",
        "fpv",
        "shape",
        "pygame",
        "display",
        "set_mode",
        "w",
        "h",
        "opencv_image",
        "opencv_image",
        "opencv_image",
        "shape",
        "pygame",
        "image",
        "frombuffer",
        "opencv_image",
        "tobytes",
        "shape",
        "pygame_image",
        "pygame",
        "display",
        "set_caption",
        "_state",
        "_state",
        "Phase",
        "EXPLORATION",
        "_state",
        "Phase",
        "NAVIGATION",
        "goal",
        "get_target_images",
        "get_neighbor",
        "targets",
        "index",
        "goal",
        "pygame",
        "key",
        "get_pressed",
        "keys",
        "pygame",
        "K_q",
        "display_next_best_view",
        "convert_opencv_img_to_pygame",
        "fpv",
        "screen",
        "blit",
        "rgb",
        "pygame",
        "display",
        "update",
        "vis_nav_game",
        "vis_nav_game",
        "play",
        "the_player",
        "KeyboardPlayerPyGame"
    ],
    "literals": [
        "'%(asctime)s - %(message)s'",
        "\"data/images_subsample/\"",
        "f\"Directory {self.save_dir} does not exist, please download exploration data.\"",
        "\"sift_descriptors.npy\"",
        "\"sift_descriptors.npy\"",
        "\"codebook.pkl\"",
        "\"codebook.pkl\"",
        "\"rb\"",
        "'Front View'",
        "'Right View'",
        "'Back View'",
        "'Left View'",
        "f'KeyboardPlayer:target_images'",
        "\".jpg\"",
        "f\"Image with ID {id} does not exist\"",
        "'.jpg'",
        "\"Processing images\"",
        "\"Computing SIFT features...\"",
        "\"sift_descriptors.npy\"",
        "\"Loaded SIFT features from sift_descriptors.npy\"",
        "\"Computing codebook...\"",
        "'k-means++'",
        "\"codebook.pkl\"",
        "\"wb\"",
        "\"Loaded codebook from codebook.pkl\"",
        "\"Computing VLAD embeddings...\"",
        "'.jpg'",
        "\"Processing images\"",
        "\"Building BallTree...\"",
        "f'Next Best View'",
        "f'Next View ID: {index+3} || Goal ID: {self.goal}'",
        "'RGB'",
        "\"KeyboardPlayer:fpv\"",
        "f'Goal ID: {self.goal}'",
        "\"__main__\""
    ],
    "variables": [
        "fpv",
        "last_act",
        "screen",
        "keymap",
        "save_dir",
        "sift",
        "sift_descriptors",
        "codebook",
        "database",
        "goal",
        "fpv",
        "last_act",
        "screen",
        "keymap",
        "last_act",
        "targets",
        "hor1",
        "hor2",
        "concat_img",
        "w",
        "h",
        "color",
        "concat_img",
        "concat_img",
        "w_offset",
        "h_offset",
        "font",
        "line",
        "size",
        "stroke",
        "path",
        "img",
        "files",
        "sift_descriptors",
        "img",
        "_",
        "des",
        "_",
        "des",
        "pred_labels",
        "centroids",
        "k",
        "VLAD_feature",
        "VLAD_feature",
        "i",
        "VLAD_feature",
        "VLAD_feature",
        "VLAD_feature",
        "q_VLAD",
        "_",
        "index",
        "sift_descriptors",
        "codebook",
        "database",
        "exploration_observation",
        "img",
        "VLAD",
        "tree",
        "tree",
        "index",
        "fpv",
        "h",
        "w",
        "_",
        "screen",
        "opencv_image",
        "shape",
        "pygame_image",
        "targets",
        "index",
        "goal",
        "keys",
        "rgb"
    ],
    "comments": [
        "import necessary libraries and modules",
        "Define a class for a player controlled by keyboard input using pygame",
        "Initialize class variables",
        "First-person view image",
        "Last action taken by the player",
        "Pygame screen",
        "Mapping of keyboard keys to actions",
        "Variables for reading exploration data",
        "Initialize SIFT detector",
        "SIFT stands for Scale-Invariant Feature Transform",
        "Load pre-trained sift features and codebook",
        "Initialize database for storing VLAD descriptors of FPV",
        "Reset the player state",
        "Initialize pygame",
        "Define key mappings for actions",
        "Quit if user closes window or presses escape",
        "Check if a key has been pressed",
        "Check if the pressed key is in the keymap",
        "If yes, bitwise OR the current action with the new one",
        "This allows for multiple actions to be combined into a single action",
        "If a key is pressed that is not mapped to an action, then display target images",
        "Check if a key has been released",
        "Check if the released key is in the keymap",
        "If yes, bitwise XOR the current action with the new one",
        "This allows for updating the accumulated actions to reflect the current sate of the keyboard inputs accurately",
        "Return if the target is not set yet",
        "Create a 2x2 grid of the 4 views of target location",
        "Pass the image to sift detector and get keypoints + descriptions",
        "We only need the descriptors",
        "These descriptors represent local features extracted from the image.",
        "Extend the sift_descriptors list with descriptors of the current image",
        "SIFT Gets us scale invariant (so featues can always be detected)",
        "We store descriptors. But find why OpenCV is 128 Dimensional per keypoint (VERY VERY IMPORTANT )",
        "Geneartes n by 128 which n is the num of images, so we have 3000 images",
        "We use a SIFT in combination with VLAD as a feature extractor as it offers several benefits",
        "1. SIFT features are invariant to scale and rotation changes in the image",
        "2. SIFT features are designed to capture local patterns which makes them more robust against noise",
        "3. VLAD aggregates local SIFT descriptors into a single compact representation for each image",
        "4. VLAD descriptors typically require less memory storage compared to storing the original set of SIFT",
        "descriptors for each image. It is more practical for storing and retrieving large image databases efficicently.",
        "Pass the image to sift detector and get keypoints + descriptions",
        "Again we only need the descriptors",
        "Get the cluster labels for each descriptor",
        "We then predict the cluster labels using the pre-trained codebook",
        "Each descriptor is assigned to a cluster, and the predicted cluster label is returned",
        "Get number of clusters that each descriptor belongs to it",
        "Ball analogy (Color, and Size) if a REALLY blue ball but inbetween small & med size, I will say it goes to Blue. So Strongest to the cluster center",
        "Get the cluster centroids from the codebook",
        "Get the number of clusters from the codebook",
        "Loop over the clusters",
        "If the current cluster label matches the predicted one",
        "Then, sum the residual vectors (difference between descriptors and cluster centroids)",
        "for all the descriptors assigned to that clusters",
        "axis=0 indicates summing along the rows (each row represents a descriptor)",
        "This way we compute the VLAD vector for the current cluster i",
        "This operation captures not only the presence of features but also their spatial distribution within the image",
        "128 by 1 since we have 128 Dimensional descriptors from SIFT",
        "Apply power normalization to the VLAD feature vector",
        "It takes the element-wise square root of the absolute values of the VLAD feature vector and then multiplies",
        "it by the element-wise sign of the VLAD feature vector",
        "This makes the resulting descriptor robust to noice and variations in illumination which helps improve the",
        "robustness of VPR systems",
        "Finally, the VLAD feature vector is normalized by dividing it by its L2 norm, ensuring that it has unit length",
        "Get the VLAD feature of the image",
        "This function returns the index of the closest match of the provided VLAD feature from the database the tree was created",
        "The '1' indicates the we want 1 nearest neighbor",
        "Compute sift features for images in the database",
        "KMeans clustering algorithm is used to create a visual vocabulary, also known as a codebook,",
        "from the computed SIFT descriptors.",
        "n_clusters = 64: Specifies the number of clusters (visual words) to be created in the codebook. In this case, 64 clusters are being used.",
        "init='k-means++': This specifies the method for initializing centroids. 'k-means++' is a smart initialization technique that selects initial",
        "cluster centers in a way that speeds up convergence.",
        "n_init=10: Specifies the number of times the KMeans algorithm will be run with different initial centroid seeds. The final result will be",
        "the best output of n_init consecutive runs in terms of inertia (sum of squared distances).",
        "The fit() method of KMeans is then called with sift_descriptors as input data.",
        "This fits the KMeans model to the SIFT descriptors, clustering them into n_clusters clusters based on their feature vectors",
        "TODO: try tuning the function parameters for better performance",
        "Increasing computational time according to # clusters & can reduce acc if not enough information.",
        "get VLAD emvedding for each image in the exploration phase",
        "Global Feature Extractor.",
        "Assigns a feature to a cluster centeroid based on proximity",
        "Classify into general clusters.",
        "Build a BallTree for fast nearest neighbor search",
        "We create this tree to efficiently perform nearest neighbor searches later on which will help us navigate and reach the target location",
        "TODO: try tuning the leaf size for better performance",
        "TODO: could you write this function in a smarter way to not simply display the image that closely",
        "matches the current FPV but the image that can efficiently help you reach the target?",
        "Get the neighbor of current FPV",
        "In other words, get the image from the database that closely matches current FPV",
        "Display the image 5 frames ahead of the neighbor, so that next best view is not exactly same as current FPV",
        "Display the next best view id along with the goal id to understand how close/far we are from the goal",
        "Return if fpv is not available",
        "If the pygame screen has not been initialized, initialize it with the size of the fpv image",
        "This allows subsequent rendering of the first-person view image onto the pygame screen",
        "BGR->RGB",
        "(height,width,Number of colors) -> (width, height)",
        "If game has started",
        "If in exploration stage",
        "TODO: could you employ any technique to strategically perform exploration instead of random exploration",
        "to improve performance (reach target location faster)?",
        "Nothing to do here since exploration data has been provided",
        "If in navigation stage",
        "TODO: could you do something else, something smarter than simply getting the image closest to the current FPV?",
        "Get the neighbor nearest to the front view of the target image and set it as goal",
        "Key the state of the keys",
        "If 'q' key is pressed, then display the next best view based on the current FPV",
        "Display the first-person view image on the pygame screen",
        "Start the game with the KeyboardPlayerPyGame player"
    ],
    "docstrings": [
        "\"\"\"\n        Handle player actions based on keyboard input\n        \"\"\"",
        "\"\"\"\n        Display front, right, back, and left views of target location in 2x2 grid manner\n        \"\"\"",
        "\"\"\"\n        Set target images\n        \"\"\"",
        "\"\"\"\n        Display image from database based on its ID using OpenCV\n        \"\"\"",
        "\"\"\"\n        Compute SIFT features for images in the data directory\n        \"\"\"",
        "\"\"\"\n        Compute VLAD (Vector of Locally Aggregated Descriptors) descriptor for a given image\n        \"\"\"",
        "\"\"\"\n        Find the nearest neighbor in the database based on VLAD descriptor\n        \"\"\"",
        "\"\"\"\n        Build BallTree for nearest neighbor search and find the goal ID\n        \"\"\"",
        "\"\"\"\n        Computations to perform before entering navigation and after exiting exploration\n        \"\"\"",
        "\"\"\"\n        Display the next best view based on the current first-person view\n        \"\"\"",
        "\"\"\"\n        Set the first-person view input\n        \"\"\"",
        "\"\"\"\n            Convert OpenCV images for Pygame.\n\n            see https://blanktar.jp/blog/2016/01/pygame-draw-opencv-image.html\n            \"\"\""
    ],
    "functions": [
        "reset",
        "act",
        "show_target_images",
        "set_target_images",
        "display_img_from_id",
        "compute_sift_features",
        "get_VLAD",
        "get_neighbor",
        "pre_nav_compute",
        "pre_navigation",
        "display_next_best_view",
        "see",
        "convert_opencv_img_to_pygame"
    ],
    "classes": [
        "KeyboardPlayerPyGame"
    ]
}