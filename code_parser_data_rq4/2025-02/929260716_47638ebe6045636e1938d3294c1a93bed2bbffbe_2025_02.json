{
    "identifiers": [
        "flask",
        "Blueprint",
        "request",
        "jsonify",
        "boto3",
        "json",
        "uuid",
        "flask_cors",
        "cross_origin",
        "Blueprint",
        "boto3",
        "client",
        "wf_s3_bp",
        "route",
        "methods",
        "request",
        "json",
        "data",
        "get",
        "data",
        "get",
        "user_id",
        "workflow",
        "jsonify",
        "isinstance",
        "workflow",
        "flush",
        "workflow",
        "json",
        "dumps",
        "workflow",
        "uuid",
        "uuid4",
        "hex",
        "user_id",
        "unique_id",
        "s3_client",
        "put_object",
        "Bucket",
        "S3_BUCKET_NAME",
        "Key",
        "s3_key",
        "Body",
        "workflow_json",
        "jsonify",
        "s3_key",
        "e",
        "jsonify",
        "e",
        "wf_s3_bp",
        "route",
        "methods",
        "request",
        "args",
        "get",
        "request",
        "args",
        "get",
        "user_id",
        "project_name",
        "jsonify",
        "user_id",
        "project_name",
        "s3_client",
        "get_object",
        "Bucket",
        "S3_BUCKET_NAME",
        "Key",
        "file_key",
        "json",
        "loads",
        "response",
        "read",
        "decode",
        "jsonify",
        "workflow_data",
        "s3_client",
        "exceptions",
        "NoSuchKey",
        "jsonify",
        "e",
        "jsonify",
        "e",
        "wf_s3_bp",
        "route",
        "methods",
        "request",
        "args",
        "get",
        "user_id",
        "jsonify",
        "s3_client",
        "list_objects_v2",
        "Bucket",
        "S3_BUCKET_NAME",
        "Prefix",
        "user_id",
        "response",
        "jsonify",
        "obj",
        "split",
        "obj",
        "response",
        "sorted",
        "response",
        "key",
        "x",
        "x",
        "reverse",
        "obj",
        "split",
        "obj",
        "sorted_workflows",
        "jsonify",
        "workflow_names",
        "e",
        "jsonify",
        "e"
    ],
    "literals": [
        "\"wf_s3\"",
        "\"hax-all-data-test\"",
        "\"s3\"",
        "\"/upload_workflows\"",
        "\"POST\"",
        "\"user_id\"",
        "\"workflow\"",
        "\"error\"",
        "\"Missing user_id or workflow\"",
        "\"Warning: workflow is already a string. Avoiding double encoding.\"",
        "f\"{user_id}/workflow_{unique_id}.json\"",
        "\"message\"",
        "\"Workflow saved successfully\"",
        "\"s3_path\"",
        "\"error\"",
        "\"/get_workflow\"",
        "\"GET\"",
        "\"user_id\"",
        "\"project_name\"",
        "\"error\"",
        "\"Missing user_id or project_name\"",
        "f\"{user_id}/{project_name}\"",
        "\"Body\"",
        "\"utf-8\"",
        "\"workflow\"",
        "\"error\"",
        "\"Workflow not found\"",
        "\"error\"",
        "\"/list_workflows\"",
        "\"GET\"",
        "\"user_id\"",
        "\"error\"",
        "\"Missing user_id\"",
        "f\"{user_id}/\"",
        "\"Contents\"",
        "\"workflows\"",
        "\"Key\"",
        "\"/\"",
        "\"Contents\"",
        "\"Contents\"",
        "\"LastModified\"",
        "\"Key\"",
        "\"/\"",
        "\"workflows\"",
        "\"error\""
    ],
    "variables": [
        "wf_s3_bp",
        "S3_BUCKET_NAME",
        "s3_client",
        "data",
        "user_id",
        "workflow",
        "workflow_json",
        "workflow_json",
        "unique_id",
        "s3_key",
        "user_id",
        "project_name",
        "file_key",
        "response",
        "workflow_data",
        "user_id",
        "response",
        "workflow_files",
        "sorted_workflows",
        "workflow_names"
    ],
    "comments": [
        "AWS S3 Configuration",
        "Get JSON data from frontend",
        "Unique Google ID",
        "Workflow data",
        "Keep as is",
        "Convert if necessary",
        "Generate unique filename",
        "Upload to S3",
        "Retrieve from query params",
        "Retrieve from query params",
        "Get user ID from frontend",
        "Get all objects under the user's directory in S3",
        "No files found",
        "Extract workflow file names from S3 response",
        "Sort by last modified time (if available) - Optional"
    ],
    "docstrings": [],
    "functions": [
        "upload_s3",
        "get_workflow",
        "list_workflows"
    ],
    "classes": []
}