{
    "identifiers": [
        "TextEncoder",
        "RemoteLangGraphEventSource",
        "telemetry",
        "constructLGCRemoteAction",
        "constructRemoteActions",
        "createHeaders",
        "execute",
        "jest",
        "jest",
        "jest",
        "jest",
        "jest",
        "jest",
        "jest",
        "jest",
        "jest",
        "logger",
        "dummyAgent",
        "beforeEach",
        "jest",
        "describe",
        "describe",
        "it",
        "TextEncoder",
        "jest",
        "dummyEncodedEvent",
        "Uint8Array",
        "readerMock",
        "execute",
        "jest",
        "dummyResponse",
        "jest",
        "RemoteLangGraphEventSource",
        "jest",
        "jest",
        "jest",
        "jest",
        "processLangGraphEventsMock",
        "constructLGCRemoteAction",
        "expect",
        "actions",
        "actions",
        "expect",
        "action",
        "dummyAgent",
        "action",
        "dummyAgent",
        "expect",
        "processLangGraphEventsMock",
        "expect",
        "result",
        "expect",
        "telemetry",
        "expect",
        "describe",
        "jest",
        "it",
        "jest",
        "jest",
        "constructRemoteActions",
        "expect",
        "actionsArray",
        "actionsArray",
        "actionHandler",
        "expect",
        "result",
        "expect",
        "url",
        "expect",
        "expect",
        "expect",
        "it",
        "TextEncoder",
        "jest",
        "dummyEncodedAgentEvent",
        "Uint8Array",
        "agentReaderMock",
        "jest",
        "jest",
        "dummyStreamResponse",
        "jest",
        "RemoteLangGraphEventSource",
        "jest",
        "jest",
        "jest",
        "jest",
        "processLangGraphEventsMock",
        "constructRemoteActions",
        "expect",
        "actionsArray",
        "actionsArray",
        "remoteAgentHandler",
        "expect",
        "processLangGraphEventsMock",
        "expect",
        "result",
        "expect",
        "telemetry",
        "expect",
        "describe",
        "it",
        "jest",
        "createHeaders",
        "onBeforeRequest",
        "graphqlContext",
        "expect",
        "headers",
        "it",
        "createHeaders",
        "graphqlContext",
        "expect",
        "headers"
    ],
    "literals": [
        "\"util\"",
        "\"../../../agents/langgraph/event-source\"",
        "\"../../telemetry-client\"",
        "\"../remote-action-constructors\"",
        "\"../remote-lg-action\"",
        "\"../remote-lg-action\"",
        "\"../../telemetry-client\"",
        "\"../../../agents/langgraph/event-source\"",
        "\"value\"",
        "\"agent1\"",
        "\"{}\"",
        "\"{}\"",
        "\"agent1\"",
        "\"test agent\"",
        "\"http://dummy.deployment\"",
        "\"dummykey\"",
        "\"remote action constructors\"",
        "\"constructLGCRemoteAction\"",
        "\"should create an agent with langGraphAgentHandler that processes events\"",
        "\"test\"",
        "\"\\n\"",
        "\"processed events\"",
        "\"thread1\"",
        "\"node1\"",
        "\"processed events\"",
        "\"oss.runtime.remote_action_executed\"",
        "\"langgraph-platform\"",
        "\"constructRemoteActions\"",
        "\"agent2\"",
        "\"agent desc\"",
        "\"action1\"",
        "\"action desc\"",
        "\"value\"",
        "\"http://dummy.api\"",
        "\"Bearer token\"",
        "\"should create remote action handler that calls fetch and returns the result\"",
        "\"action result\"",
        "\"bar\"",
        "\"action result\"",
        "${url}/actions/execute",
        "\"POST\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"Bearer token\"",
        "\"should create remote agent handler that processes events\"",
        "'{\"event\":\"data\"}\\n'",
        "\"ok\"",
        "\"agent events processed\"",
        "\"agent2\"",
        "\"thread2\"",
        "\"node2\"",
        "\"agent events processed\"",
        "\"oss.runtime.remote_action_executed\"",
        "\"self-hosted\"",
        "\"createHeaders\"",
        "\"should merge headers from onBeforeRequest\"",
        "\"X-Test\"",
        "\"123\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "\"X-Test\"",
        "\"123\"",
        "\"should return only Content-Type if no additional headers\"",
        "\"Content-Type\"",
        "\"application/json\""
    ],
    "variables": [
        "logger",
        "graphqlContext",
        "agentStates",
        "dummyAgent",
        "endpoint",
        "dummyEncodedEvent",
        "readerMock",
        "dummyResponse",
        "processLangGraphEventsMock",
        "actions",
        "action",
        "result",
        "json",
        "url",
        "onBeforeRequest",
        "actionsArray",
        "actionHandler",
        "result",
        "dummyEncodedAgentEvent",
        "agentReaderMock",
        "dummyStreamResponse",
        "processLangGraphEventsMock",
        "actionsArray",
        "remoteAgentHandler",
        "result",
        "onBeforeRequest",
        "headers",
        "headers"
    ],
    "comments": [
        "Mock external dependencies",
        "Dummy logger",
        "Dummy graphqlContext",
        "Dummy agent state",
        "Dummy agent used in constructLGCRemoteAction",
        "Clear mocks before each test",
        "Arrange: simulate execute returning a dummy ReadableStream",
        "Mock RemoteLangGraphEventSource to return a dummy processed result",
        "Act: build the action and call langGraphAgentHandler",
        "Assert: processLangGraphEvents is called and result returned",
        "Check telemetry.capture was called with agentExecution true",
        "Arrange: mock fetch for action handler",
        "There should be one action (from json.actions) and one agent (from json.agents)",
        "Arrange: mock fetch for agent handler to return a dummy stream",
        "The remote agent is the second item in the array",
        "Check telemetry.capture for agent execution"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}