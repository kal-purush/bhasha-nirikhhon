{
    "identifiers": [
        "typing",
        "Any",
        "Dict",
        "Optional",
        "qdrant_client",
        "QdrantClient",
        "qdrant_client",
        "http",
        "models",
        "PointStruct",
        "PointIdsList",
        "Filter",
        "VectorParams",
        "Distance",
        "qdrant_client",
        "models",
        "concurrent",
        "futures",
        "ThreadPoolExecutor",
        "as_completed",
        "utils",
        "vectordbinterface",
        "DocumentManager",
        "qdrant_client",
        "http",
        "models",
        "Distance",
        "DocumentManager",
        "collection_name",
        "embedding",
        "metric",
        "Distance",
        "Distance",
        "COSINE",
        "force_recreate",
        "kwargs",
        "Any",
        "QdrantClient",
        "kwargs",
        "collection_name",
        "embedding",
        "metric",
        "_ensure_collection_exists",
        "force_recreate",
        "force_recreate",
        "dense_vectors_config",
        "Optional",
        "VectorParams",
        "sparse_vector_config",
        "Optional",
        "force_recreate",
        "force_recreate",
        "_delete_collection",
        "_build_collection_config",
        "dense_vectors_config",
        "sparse_vector_config",
        "client",
        "create_collection",
        "collection_name",
        "collection_name",
        "collection_config",
        "collection_name",
        "collection_config",
        "client",
        "delete_collection",
        "collection_name",
        "collection_name",
        "delete_exception",
        "collection_name",
        "delete_exception",
        "dense_vectors_config",
        "Optional",
        "VectorParams",
        "sparse_vector_config",
        "Optional",
        "dense_vectors_config",
        "dense_vectors_config",
        "sparse_vector_config",
        "sparse_vector_config",
        "collection_config",
        "ValueError",
        "collection_config",
        "force_recreate",
        "sparse_embedding",
        "len",
        "embedding",
        "embed_query",
        "VectorParams",
        "size",
        "vector_size",
        "distance",
        "metric",
        "sparse_embedding",
        "models",
        "SparseVectorParams",
        "index",
        "models",
        "SparseIndexParams",
        "on_disk",
        "_collection_exists",
        "force_recreate",
        "collection_name",
        "create_collection",
        "dense_vectors_config",
        "dense_vectors_config",
        "sparse_vector_config",
        "sparse_vector_config",
        "force_recreate",
        "force_recreate",
        "client",
        "get_collection",
        "collection_name",
        "collection_info",
        "texts",
        "metadatas",
        "Optional",
        "ids",
        "Optional",
        "PointStruct",
        "PointStruct",
        "id",
        "ids",
        "i",
        "ids",
        "i",
        "vector",
        "embedding",
        "embed_query",
        "texts",
        "i",
        "payload",
        "texts",
        "i",
        "metadatas",
        "i",
        "i",
        "len",
        "texts",
        "texts",
        "metadatas",
        "Optional",
        "ids",
        "Optional",
        "kwargs",
        "Any",
        "_create_points",
        "texts",
        "metadatas",
        "ids",
        "client",
        "upsert",
        "collection_name",
        "collection_name",
        "points",
        "points",
        "ids",
        "ids",
        "i",
        "i",
        "len",
        "texts",
        "texts",
        "metadatas",
        "Optional",
        "ids",
        "Optional",
        "start",
        "end",
        "_create_points",
        "texts",
        "start",
        "end",
        "metadatas",
        "start",
        "end",
        "metadatas",
        "ids",
        "start",
        "end",
        "ids",
        "client",
        "upsert",
        "collection_name",
        "collection_name",
        "points",
        "batch_points",
        "ids",
        "start",
        "end",
        "ids",
        "i",
        "i",
        "start",
        "end",
        "texts",
        "metadatas",
        "Optional",
        "ids",
        "Optional",
        "batch_size",
        "workers",
        "kwargs",
        "Any",
        "ThreadPoolExecutor",
        "max_workers",
        "workers",
        "executor",
        "executor",
        "submit",
        "batch_upsert",
        "texts",
        "metadatas",
        "ids",
        "i",
        "min",
        "i",
        "batch_size",
        "len",
        "texts",
        "i",
        "len",
        "texts",
        "batch_size",
        "future",
        "as_completed",
        "futures",
        "all_ids",
        "extend",
        "future",
        "result",
        "all_ids",
        "query",
        "k",
        "kwargs",
        "Any",
        "Dict",
        "Any",
        "client",
        "search",
        "collection_name",
        "collection_name",
        "query_vector",
        "embedding",
        "embed_query",
        "query",
        "limit",
        "k",
        "kwargs",
        "result",
        "payload",
        "result",
        "id",
        "result",
        "score",
        "result",
        "search_results",
        "ids",
        "Optional",
        "filters",
        "Optional",
        "Filter",
        "kwargs",
        "Any",
        "ids",
        "PointIdsList",
        "points",
        "ids",
        "client",
        "collection_name",
        "collection_name",
        "points_selector",
        "points_selector",
        "filters",
        "client",
        "collection_name",
        "collection_name",
        "filters",
        "scroll_filter",
        "with_vectors",
        "k",
        "Dict",
        "Any",
        "k",
        "min",
        "k",
        "total_retrieved",
        "client",
        "scroll",
        "collection_name",
        "collection_name",
        "limit",
        "limit",
        "scroll_filter",
        "scroll_filter",
        "offset",
        "next_page_offset",
        "with_payload",
        "with_vectors",
        "with_vectors",
        "all_records",
        "extend",
        "response",
        "total_retrieved",
        "len",
        "response",
        "next_page_offset",
        "k",
        "total_retrieved",
        "k",
        "e",
        "e",
        "all_records"
    ],
    "literals": [
        "f\"Collection '{self.collection_name}' created successfully with configuration: {collection_config}\"",
        "f\"Collection '{self.collection_name}' deleted for recreation.\"",
        "f\"Failed to delete existing collection '{self.collection_name}': {delete_exception}\"",
        "\"vectors_config\"",
        "\"sparse_vectors_config\"",
        "\"At least one of dense_vectors_config or sparse_vector_config must be provided.\"",
        "\"vector size check\"",
        "\"sparse-vector\"",
        "f\"Collection '{self.collection_name}' does not exist or force recreate is enabled. Creating new collection...\"",
        "\"page_content\"",
        "\"metadata\"",
        "\"payload\"",
        "\"id\"",
        "\"score\"",
        "f\"Error retrieving records: {e}\""
    ],
    "variables": [
        "client",
        "collection_name",
        "embedding",
        "metric",
        "collection_config",
        "collection_config",
        "collection_config",
        "collection_config",
        "vector_size",
        "dense_vectors_config",
        "sparse_vector_config",
        "sparse_vector_config",
        "collection_info",
        "points",
        "batch_points",
        "all_ids",
        "futures",
        "search_results",
        "points_selector",
        "all_records",
        "next_page_offset",
        "total_retrieved",
        "limit",
        "response",
        "next_page_offset"
    ],
    "comments": [
        "Convert text to vector",
        "Store original text in 'content'",
        "Return the ids used for the upsert operation"
    ],
    "docstrings": [
        "\"\"\"Manages document operations with Qdrant, including upsert, search, and delete.\n\n    This class interfaces with Qdrant to perform operations such as inserting,\n    updating, searching, and deleting documents in a specified collection.\n    \"\"\"",
        "\"\"\"Initializes the QdrantDocumentManager with a collection name and embedding model.\n\n        Args:\n            collection_name (str): The name of the collection in Qdrant.\n            embedding: The embedding model used to convert texts into vectors.\n            metric (Distance): The distance metric for vector comparisons.\n            force_recreate (bool): Whether to forcefully recreate the collection if it exists.\n            **kwargs (Any): Additional keyword arguments for QdrantClient configuration.\n        \"\"\"",
        "\"\"\"Converts strings into Qdrant's point structure.\n\n        Args:\n            texts (Iterable[str]): The texts to be converted into points.\n            metadatas (Optional[List[dict]]): Optional metadata for each text.\n            ids (Optional[List[str]]): Optional list of ids for each text.\n\n        Returns:\n            List[PointStruct]: A list of PointStruct objects ready for insertion into Qdrant.\n        \"\"\"",
        "\"\"\"Upserts documents into the collection and returns the upserted ids.\n\n        Args:\n            texts (Iterable[str]): The texts to be upserted.\n            metadatas (Optional[List[dict]]): Optional metadata for each text.\n            ids (Optional[List[str]]): Optional list of ids for each text.\n            **kwargs (Any): Additional keyword arguments for the upsert operation.\n\n        Returns:\n            List[str]: The list of successfully upserted ids.\n        \"\"\"",
        "\"\"\"Performs batch upsert and returns the upserted ids.\n\n        Args:\n            texts (Iterable[str]): The texts to be upserted.\n            metadatas (Optional[List[dict]]): Optional metadata for each text.\n            ids (Optional[List[str]]): Optional list of ids for each text.\n            start (int): The starting index of the batch.\n            end (int): The ending index of the batch.\n\n        Returns:\n            List[str]: The list of upserted ids.\n        \"\"\"",
        "\"\"\"Performs parallel upsert of documents and returns the upserted ids.\n\n        Args:\n            texts (Iterable[str]): The texts to be upserted.\n            metadatas (Optional[List[dict]]): Optional metadata for each text.\n            ids (Optional[List[str]]): Optional list of ids for each text.\n            batch_size (int): The size of each batch for upsert. Default is 32.\n            workers (int): The number of worker threads to use. Default is 10.\n            **kwargs (Any): Additional keyword arguments.\n\n        Returns:\n            List[str]: The list of upserted ids.\n        \"\"\"",
        "\"\"\"Performs a search query and returns a list of relevant documents.\n\n        Args:\n            query (str): The search query string to find similar documents.\n            k (int): The number of top documents to return. Default is 10.\n            **kwargs (Any): Additional keyword arguments for the search operation.\n\n        Returns:\n            List[Dict[str, Any]]: A list of dictionaries containing the payload, id, and score of each result.\n        \"\"\"",
        "\"\"\"Deletes documents from the collection based on ids or filters.\n\n        Args:\n            ids (Optional[List[str]]): A list of document ids to delete. If None, no id-based deletion is performed.\n            filters (Optional[Filter]): A Filter object to apply for deletion. If None, no filter-based deletion is performed.\n            **kwargs (Any): Additional keyword arguments for the delete operation.\n\n        Returns:\n            None\n        \"\"\"",
        "\"\"\"\n        Retrieve records from a Qdrant collection using the scroll method.\n\n        Args:\n            scroll_filter: The filter condition to apply for retrieving records.\n            k (int, optional): The number of top records to return. If None, retrieve all records.\n\n        Returns:\n            List[Dict[str, Any]]: A list of records in the collection.\n        \"\"\""
    ],
    "functions": [
        "create_collection",
        "_delete_collection",
        "_build_collection_config",
        "_ensure_collection_exists",
        "_collection_exists",
        "_create_points",
        "upsert",
        "batch_upsert",
        "upsert_parallel",
        "search",
        "scroll"
    ],
    "classes": [
        "QdrantDocumentManager"
    ]
}