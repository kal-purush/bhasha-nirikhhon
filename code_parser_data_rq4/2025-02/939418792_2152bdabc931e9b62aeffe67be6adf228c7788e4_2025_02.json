{
    "identifiers": [
        "argparse",
        "logging",
        "math",
        "os",
        "random",
        "shutil",
        "pathlib",
        "Path",
        "random",
        "accelerate",
        "datasets",
        "deepspeed",
        "comm",
        "numpy",
        "np",
        "torch",
        "torch",
        "nn",
        "functional",
        "F",
        "torch",
        "utils",
        "checkpoint",
        "torch",
        "utils",
        "data",
        "data",
        "transformers",
        "torchvision",
        "accelerate",
        "Accelerator",
        "accelerate",
        "logging",
        "get_logger",
        "accelerate",
        "state",
        "AcceleratorState",
        "accelerate",
        "utils",
        "ProjectConfiguration",
        "set_seed",
        "huggingface_hub",
        "create_repo",
        "upload_folder",
        "packaging",
        "version",
        "PIL",
        "Image",
        "tqdm",
        "auto",
        "tqdm",
        "transformers",
        "CLIPTextModel",
        "CLIPTokenizer",
        "transformers",
        "utils",
        "ContextManagers",
        "diffusers",
        "diffusers",
        "AutoencoderKL",
        "DDPMScheduler",
        "DDIMScheduler",
        "EulerDiscreteScheduler",
        "diffusers",
        "optimization",
        "get_scheduler",
        "diffusers",
        "training_utils",
        "EMAModel",
        "diffusers",
        "utils",
        "check_min_version",
        "deprecate",
        "is_wandb_available",
        "diffusers",
        "utils",
        "import_utils",
        "is_xformers_available",
        "torchvision",
        "transforms",
        "utils",
        "custom_video_datasets",
        "VideoNuscenesDataset",
        "diffusers",
        "StableVideoDiffusionPipeline",
        "diffusers",
        "models",
        "UNetSpatioTemporalConditionModel",
        "AutoencoderKLTemporalDecoder",
        "transformers",
        "CLIPTokenizer",
        "CLIPTextModelWithProjection",
        "CLIPVisionModelWithProjection",
        "CLIPImageProcessor",
        "CLIPFeatureExtractor",
        "diffusers",
        "pipelines",
        "stable_video_diffusion",
        "pipeline_stable_video_diffusion",
        "_resize_with_antialiasing",
        "diffusers",
        "utils",
        "torch_utils",
        "randn_tensor",
        "is_wandb_available",
        "wandb",
        "src",
        "model",
        "unet_spatio_temporal_condition_multiview_cond_dome",
        "UNetSpatioTemporalConditionModelMultiviewCondDome",
        "transformers",
        "deepspeed",
        "is_deepspeed_zero3_enabled",
        "set_hf_deepspeed_config",
        "unset_hf_deepspeed_config",
        "contextlib",
        "accelerate",
        "utils",
        "deepspeed",
        "HfDeepSpeedConfig",
        "accelerate",
        "utils",
        "dataclasses",
        "DeepSpeedPlugin",
        "deepspeed",
        "mmengine",
        "Config",
        "mmengine",
        "registry",
        "MODELS",
        "get_logger",
        "log_level",
        "imgs",
        "rows",
        "cols",
        "len",
        "imgs",
        "rows",
        "cols",
        "imgs",
        "size",
        "Image",
        "size",
        "cols",
        "w",
        "rows",
        "h",
        "i",
        "img",
        "imgs",
        "grid",
        "paste",
        "img",
        "box",
        "i",
        "cols",
        "w",
        "i",
        "cols",
        "h",
        "grid",
        "cls",
        "config_path",
        "model_file",
        "ignore_mismatched_sizes",
        "torch_dtype",
        "freeze",
        "cls",
        "load_config",
        "config_path",
        "cls",
        "from_config",
        "config",
        "safetensors",
        "safe_open",
        "safe_open",
        "model_file",
        "framework",
        "device",
        "f",
        "key",
        "f",
        "keys",
        "f",
        "get_tensor",
        "key",
        "model",
        "_convert_deprecated_attention_blocks",
        "state_dict",
        "cls",
        "_load_pretrained_model",
        "model",
        "state_dict",
        "model_file",
        "model_file",
        "ignore_mismatched_sizes",
        "ignore_mismatched_sizes",
        "freeze",
        "param_name",
        "param",
        "model",
        "named_parameters",
        "param_name",
        "missing_keys",
        "update_param_list",
        "append",
        "param_name",
        "param",
        "requires_grad_",
        "param_name",
        "param",
        "requires_grad_",
        "param",
        "requires_grad_",
        "len",
        "update_param_list",
        "len",
        "missing_keys",
        "missing_keys",
        "unexpected_keys",
        "mismatched_keys",
        "error_msgs",
        "torch_dtype",
        "isinstance",
        "torch_dtype",
        "torch",
        "dtype",
        "ValueError",
        "torch_dtype",
        "torch_dtype",
        "torch_dtype",
        "model",
        "to",
        "torch_dtype",
        "model",
        "eval",
        "model",
        "args",
        "repo_id",
        "images",
        "repo_folder",
        "len",
        "images",
        "make_image_grid",
        "images",
        "len",
        "args",
        "validation_prompts",
        "image_grid",
        "save",
        "os",
        "path",
        "join",
        "repo_folder",
        "img_str",
        "args",
        "pretrained_model_name_or_path",
        "args",
        "dataset_name",
        "repo_id",
        "args",
        "pretrained_model_name_or_path",
        "args",
        "dataset_name",
        "args",
        "validation_prompts",
        "img_str",
        "repo_id",
        "args",
        "validation_prompts",
        "args",
        "num_train_epochs",
        "args",
        "learning_rate",
        "args",
        "train_batch_size",
        "args",
        "gradient_accumulation_steps",
        "args",
        "resolution",
        "args",
        "mixed_precision",
        "is_wandb_available",
        "wandb",
        "run",
        "wandb",
        "run",
        "url",
        "wandb_run_url",
        "wandb_run_url",
        "model_card",
        "wandb_info",
        "open",
        "os",
        "path",
        "join",
        "repo_folder",
        "f",
        "f",
        "write",
        "yaml",
        "model_card",
        "vae",
        "condition_encoder",
        "unet",
        "args",
        "accelerator",
        "weight_dtype",
        "epoch",
        "logger",
        "info",
        "StableVideoDiffusionPipeline",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "vae",
        "accelerator",
        "unwrap_model",
        "vae",
        "unet",
        "accelerator",
        "unwrap_model",
        "unet",
        "safety_checker",
        "revision",
        "args",
        "revision",
        "torch_dtype",
        "weight_dtype",
        "pipeline",
        "to",
        "accelerator",
        "device",
        "pipeline",
        "set_progress_bar_config",
        "disable",
        "args",
        "enable_xformers_memory_efficient_attention",
        "pipeline",
        "enable_xformers_memory_efficient_attention",
        "args",
        "seed",
        "torch",
        "Generator",
        "device",
        "accelerator",
        "device",
        "manual_seed",
        "args",
        "seed",
        "i",
        "len",
        "args",
        "validation_prompts",
        "torch",
        "autocast",
        "pipeline",
        "args",
        "validation_prompts",
        "i",
        "num_inference_steps",
        "generator",
        "generator",
        "images",
        "images",
        "append",
        "image",
        "tracker",
        "accelerator",
        "trackers",
        "tracker",
        "name",
        "np",
        "stack",
        "np",
        "asarray",
        "img",
        "img",
        "images",
        "tracker",
        "writer",
        "add_images",
        "np_images",
        "epoch",
        "dataformats",
        "tracker",
        "name",
        "tracker",
        "log",
        "wandb",
        "Image",
        "image",
        "caption",
        "i",
        "args",
        "validation_prompts",
        "i",
        "i",
        "image",
        "images",
        "logger",
        "warn",
        "tracker",
        "name",
        "pipeline",
        "torch",
        "cuda",
        "empty_cache",
        "images",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "required",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "choices",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "action",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "parser",
        "add_argument",
        "help",
        "parser",
        "parse_args",
        "os",
        "environ",
        "get",
        "env_local_rank",
        "env_local_rank",
        "args",
        "local_rank",
        "env_local_rank",
        "args",
        "dataset_name",
        "args",
        "train_data_dir",
        "ValueError",
        "args",
        "non_ema_revision",
        "args",
        "revision",
        "args",
        "parse_args",
        "args",
        "non_ema_revision",
        "deprecate",
        "message",
        "os",
        "path",
        "join",
        "args",
        "output_dir",
        "args",
        "logging_dir",
        "ProjectConfiguration",
        "project_dir",
        "args",
        "output_dir",
        "logging_dir",
        "logging_dir",
        "Accelerator",
        "gradient_accumulation_steps",
        "args",
        "gradient_accumulation_steps",
        "mixed_precision",
        "args",
        "mixed_precision",
        "log_with",
        "args",
        "report_to",
        "project_config",
        "accelerator_project_config",
        "torch",
        "Generator",
        "device",
        "accelerator",
        "device",
        "manual_seed",
        "args",
        "seed_for_gen",
        "logging",
        "basicConfig",
        "format",
        "datefmt",
        "level",
        "logging",
        "INFO",
        "logger",
        "info",
        "accelerator",
        "state",
        "main_process_only",
        "accelerator",
        "is_local_main_process",
        "datasets",
        "utils",
        "logging",
        "set_verbosity_warning",
        "transformers",
        "utils",
        "logging",
        "set_verbosity_warning",
        "diffusers",
        "utils",
        "logging",
        "set_verbosity_info",
        "datasets",
        "utils",
        "logging",
        "set_verbosity_error",
        "transformers",
        "utils",
        "logging",
        "set_verbosity_error",
        "diffusers",
        "utils",
        "logging",
        "set_verbosity_error",
        "args",
        "seed",
        "set_seed",
        "args",
        "seed",
        "accelerator",
        "is_main_process",
        "args",
        "output_dir",
        "os",
        "makedirs",
        "args",
        "output_dir",
        "exist_ok",
        "args",
        "push_to_hub",
        "create_repo",
        "repo_id",
        "args",
        "hub_model_id",
        "Path",
        "args",
        "output_dir",
        "name",
        "exist_ok",
        "token",
        "args",
        "hub_token",
        "repo_id",
        "accelerator",
        "is_main_process",
        "vars",
        "args",
        "tracker_config",
        "pop",
        "accelerator",
        "init_trackers",
        "args",
        "tracker_project_name",
        "tracker_config",
        "EulerDiscreteScheduler",
        "args",
        "scheduler_config_path",
        "Diff_Scheduler",
        "load_config",
        "args",
        "scheduler_config_path",
        "Diff_Scheduler",
        "from_config",
        "scheduler_config",
        "logger",
        "info",
        "args",
        "scheduler_config_path",
        "logger",
        "info",
        "scheduler_config",
        "logger",
        "info",
        "Diff_Scheduler",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "AcceleratorState",
        "deepspeed_plugin",
        "accelerate",
        "state",
        "is_initialized",
        "deepspeed_plugin",
        "deepspeed_plugin",
        "zero3_init_context_manager",
        "enable",
        "contextlib",
        "contextmanager",
        "is_deepspeed_zero3_enabled",
        "AcceleratorState",
        "deepspeed_plugin",
        "unset_hf_deepspeed_config",
        "set_hf_deepspeed_config",
        "deepspeed_plugin",
        "hf_ds_config",
        "args",
        "nframes_past",
        "UNetSpatioTemporalConditionModel",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "revision",
        "args",
        "non_ema_revision",
        "args",
        "nframes",
        "UNetSpatioTemporalConditionModelMultiviewCondDome",
        "from_unet_spatio_temporal_condition",
        "unet_origin",
        "unet_param",
        "Config",
        "fromfile",
        "utils",
        "DOME",
        "model",
        "utils",
        "DOME",
        "dataset",
        "get_dataloader",
        "get_nuScenes_label_name",
        "temporarily_disable_deepspeed_zero3",
        "CLIPImageProcessor",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "revision",
        "args",
        "revision",
        "CLIPVisionModelWithProjection",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "revision",
        "args",
        "revision",
        "AutoencoderKLTemporalDecoder",
        "from_pretrained",
        "args",
        "pretrained_model_name_or_path",
        "subfolder",
        "revision",
        "args",
        "revision",
        "MODELS",
        "build",
        "cfg",
        "model",
        "vae",
        "torch",
        "load",
        "cfg",
        "vae_load_from",
        "map_location",
        "ckpt_occ_vae",
        "ckpt_occ_vae",
        "ckpt_occ_vae",
        "occ_vae",
        "load_state_dict",
        "state_dict",
        "strict",
        "vae",
        "requires_grad_",
        "image_encoder",
        "requires_grad_",
        "occ_vae",
        "eval",
        "occ_vae",
        "requires_grad_",
        "args",
        "use_ema",
        "UNetSpatioTemporalConditionModelMultiview",
        "from_unet_spatio_temporal_condition",
        "unet_origin",
        "unet_param",
        "EMAModel",
        "ema_unet",
        "parameters",
        "model_cls",
        "UNetSpatioTemporalConditionModelMultiview",
        "model_config",
        "ema_unet",
        "config",
        "args",
        "enable_xformers_memory_efficient_attention",
        "is_xformers_available",
        "xformers",
        "version",
        "parse",
        "xformers",
        "__version__",
        "xformers_version",
        "version",
        "parse",
        "logger",
        "warn",
        "unet",
        "enable_xformers_memory_efficient_attention",
        "ValueError",
        "timesteps",
        "noise_scheduler",
        "alphas_cumprod",
        "alphas_cumprod",
        "alphas_cumprod",
        "sqrt_alphas_cumprod",
        "to",
        "device",
        "timesteps",
        "device",
        "timesteps",
        "len",
        "sqrt_alphas_cumprod",
        "shape",
        "len",
        "timesteps",
        "shape",
        "sqrt_alphas_cumprod",
        "sqrt_alphas_cumprod",
        "expand",
        "timesteps",
        "shape",
        "sqrt_one_minus_alphas_cumprod",
        "to",
        "device",
        "timesteps",
        "device",
        "timesteps",
        "len",
        "sqrt_one_minus_alphas_cumprod",
        "shape",
        "len",
        "timesteps",
        "shape",
        "sqrt_one_minus_alphas_cumprod",
        "sqrt_one_minus_alphas_cumprod",
        "expand",
        "timesteps",
        "shape",
        "alpha",
        "sigma",
        "snr",
        "version",
        "parse",
        "accelerate",
        "__version__",
        "version",
        "parse",
        "models",
        "weights",
        "output_dir",
        "args",
        "use_ema",
        "ema_unet",
        "save_pretrained",
        "os",
        "path",
        "join",
        "output_dir",
        "i",
        "model",
        "models",
        "model",
        "save_pretrained",
        "os",
        "path",
        "join",
        "output_dir",
        "all_models",
        "i",
        "weights",
        "pop",
        "models",
        "input_dir",
        "args",
        "use_ema",
        "EMAModel",
        "from_pretrained",
        "os",
        "path",
        "join",
        "input_dir",
        "UNetSpatioTemporalConditionModel",
        "ema_unet",
        "load_state_dict",
        "load_model",
        "state_dict",
        "ema_unet",
        "to",
        "accelerator",
        "device",
        "load_model",
        "i",
        "len",
        "models",
        "models",
        "pop",
        "i",
        "UNetSpatioTemporalConditionModelMultiview",
        "from_pretrained",
        "input_dir",
        "subfolder",
        "model",
        "register_to_config",
        "load_model",
        "config",
        "model",
        "load_state_dict",
        "load_model",
        "state_dict",
        "load_model",
        "CLIPVisionModelWithProjection",
        "from_pretrained",
        "input_dir",
        "subfolder",
        "model",
        "load_state_dict",
        "load_model",
        "state_dict",
        "load_model",
        "accelerator",
        "register_save_state_pre_hook",
        "save_model_hook",
        "accelerator",
        "register_load_state_pre_hook",
        "load_model_hook",
        "args",
        "gradient_checkpointing",
        "unet",
        "enable_gradient_checkpointing",
        "args",
        "allow_tf32",
        "torch",
        "backends",
        "cuda",
        "matmul",
        "args",
        "scale_lr",
        "args",
        "learning_rate",
        "args",
        "gradient_accumulation_steps",
        "args",
        "train_batch_size",
        "accelerator",
        "num_processes",
        "args",
        "use_8bit_adam",
        "bitsandbytes",
        "bnb",
        "ImportError",
        "ImportError",
        "bnb",
        "optim",
        "AdamW8bit",
        "torch",
        "optim",
        "AdamW",
        "unet",
        "parameters",
        "optimizer_cls",
        "all_parameters",
        "lr",
        "args",
        "learning_rate",
        "betas",
        "args",
        "adam_beta1",
        "args",
        "adam_beta2",
        "weight_decay",
        "args",
        "adam_weight_decay",
        "eps",
        "args",
        "adam_epsilon",
        "transforms",
        "Compose",
        "transforms",
        "ToTensor",
        "transforms",
        "Normalize",
        "args",
        "dataset_name",
        "args",
        "load_from_pkl",
        "accelerator",
        "is_main_process",
        "args",
        "interval",
        "VideoNuscenesDataset",
        "data_root",
        "args",
        "dataset_name",
        "video_transforms",
        "train_transforms",
        "video_length",
        "args",
        "nframes",
        "interval",
        "args",
        "interval",
        "img_size",
        "args",
        "image_width",
        "args",
        "image_height",
        "multi_view",
        "accelerator",
        "is_main_process",
        "captions",
        "tokenizer",
        "captions",
        "max_length",
        "tokenizer",
        "model_max_length",
        "padding",
        "truncation",
        "return_tensors",
        "inputs",
        "input_ids",
        "get_dataloader",
        "cfg",
        "train_dataset_config",
        "cfg",
        "val_dataset_config",
        "cfg",
        "train_wrapper_config",
        "cfg",
        "val_wrapper_config",
        "cfg",
        "train_loader",
        "cfg",
        "val_loader",
        "math",
        "ceil",
        "len",
        "train_dataloader",
        "args",
        "gradient_accumulation_steps",
        "args",
        "max_train_steps",
        "args",
        "num_train_epochs",
        "num_update_steps_per_epoch",
        "get_scheduler",
        "args",
        "lr_scheduler",
        "optimizer",
        "optimizer",
        "num_warmup_steps",
        "args",
        "lr_warmup_steps",
        "args",
        "gradient_accumulation_steps",
        "num_training_steps",
        "args",
        "max_train_steps",
        "args",
        "gradient_accumulation_steps",
        "accelerator",
        "prepare",
        "unet",
        "optimizer",
        "train_dataloader",
        "lr_scheduler",
        "args",
        "use_ema",
        "ema_unet",
        "to",
        "accelerator",
        "device",
        "torch",
        "float32",
        "accelerator",
        "mixed_precision",
        "torch",
        "float16",
        "accelerator",
        "mixed_precision",
        "accelerator",
        "mixed_precision",
        "torch",
        "bfloat16",
        "accelerator",
        "mixed_precision",
        "image_encoder",
        "to",
        "accelerator",
        "device",
        "dtype",
        "weight_dtype",
        "vae",
        "to",
        "accelerator",
        "device",
        "dtype",
        "weight_dtype",
        "occ_vae",
        "to",
        "accelerator",
        "device",
        "dtype",
        "weight_dtype",
        "math",
        "ceil",
        "len",
        "train_dataloader",
        "args",
        "gradient_accumulation_steps",
        "overrode_max_train_steps",
        "args",
        "num_train_epochs",
        "num_update_steps_per_epoch",
        "math",
        "ceil",
        "args",
        "max_train_steps",
        "num_update_steps_per_epoch",
        "args",
        "train_batch_size",
        "accelerator",
        "num_processes",
        "args",
        "gradient_accumulation_steps",
        "logger",
        "info",
        "logger",
        "info",
        "len",
        "train_dataset",
        "logger",
        "info",
        "args",
        "num_train_epochs",
        "logger",
        "info",
        "args",
        "train_batch_size",
        "logger",
        "info",
        "total_batch_size",
        "logger",
        "info",
        "args",
        "gradient_accumulation_steps",
        "logger",
        "info",
        "args",
        "max_train_steps",
        "args",
        "resume_from_checkpoint",
        "args",
        "resume_from_checkpoint",
        "os",
        "path",
        "basename",
        "args",
        "resume_from_checkpoint",
        "os",
        "listdir",
        "args",
        "output_dir",
        "d",
        "d",
        "dirs",
        "d",
        "startswith",
        "sorted",
        "dirs",
        "key",
        "x",
        "x",
        "split",
        "dirs",
        "len",
        "dirs",
        "path",
        "accelerator",
        "args",
        "resume_from_checkpoint",
        "accelerator",
        "path",
        "accelerator",
        "load_state",
        "os",
        "path",
        "join",
        "args",
        "output_dir",
        "path",
        "path",
        "split",
        "global_step",
        "args",
        "gradient_accumulation_steps",
        "global_step",
        "num_update_steps_per_epoch",
        "resume_global_step",
        "num_update_steps_per_epoch",
        "args",
        "gradient_accumulation_steps",
        "tqdm",
        "global_step",
        "args",
        "max_train_steps",
        "disable",
        "accelerator",
        "is_local_main_process",
        "progress_bar",
        "set_description",
        "args",
        "nframes",
        "len",
        "cfg",
        "model",
        "vae",
        "encoder_cfg",
        "ch_mult",
        "epoch",
        "first_epoch",
        "args",
        "num_train_epochs",
        "unet",
        "train",
        "step",
        "batch",
        "train_dataloader",
        "args",
        "resume_from_checkpoint",
        "epoch",
        "first_epoch",
        "step",
        "resume_step",
        "step",
        "args",
        "gradient_accumulation_steps",
        "progress_bar",
        "update",
        "accelerator",
        "accumulate",
        "unet",
        "batch",
        "input_occs",
        "x",
        "shape",
        "occ_vae",
        "forward_encoder",
        "x",
        "occ_vae",
        "sample_z",
        "x",
        "x",
        "cfg",
        "model",
        "vae",
        "scaling_factor",
        "x",
        "pixel_values",
        "images",
        "batch",
        "reshape",
        "batch",
        "shape",
        "vae",
        "encode",
        "batch",
        "reshape",
        "batch",
        "shape",
        "to",
        "weight_dtype",
        "latent_dist",
        "latent_dist",
        "sample",
        "latents",
        "vae",
        "config",
        "scaling_factor",
        "latents",
        "reshape",
        "nframes",
        "latents",
        "shape",
        "latents",
        "shape",
        "args",
        "context_frame_augmentation",
        "math",
        "exp",
        "random",
        "normalvariate",
        "mu",
        "sigma",
        "batch",
        "first_frame_image",
        "noise_aug_strength",
        "torch",
        "randn_like",
        "first_frame_image",
        "vae",
        "encode",
        "first_frame_image",
        "to",
        "weight_dtype",
        "latent_dist",
        "mode",
        "vae",
        "config",
        "scaling_factor",
        "first_frame_latent",
        "unsqueeze",
        "repeat",
        "nframes",
        "args",
        "p_std",
        "args",
        "p_mean",
        "torch",
        "randn",
        "bsz",
        "device",
        "latents",
        "device",
        "rnd_normal",
        "P_std",
        "P_mean",
        "exp",
        "sigma",
        "sigma",
        "sigma",
        "sigma",
        "sigma",
        "log",
        "reshape",
        "bsz",
        "sigma",
        "sigma",
        "latents",
        "torch",
        "randn_like",
        "latents",
        "sigma",
        "cur_cam_img",
        "batch",
        "cur_cam_img",
        "first_frame_info",
        "_resize_with_antialiasing",
        "image",
        "image",
        "image_list",
        "append",
        "image",
        "torch",
        "cat",
        "image_list",
        "dim",
        "torchvision",
        "transforms",
        "Compose",
        "torchvision",
        "transforms",
        "Normalize",
        "image",
        "permute",
        "cond_transforms",
        "image",
        "image_encoder",
        "image",
        "to",
        "weight_dtype",
        "image_embeds",
        "image_embeddings",
        "unsqueeze",
        "image_embeddings",
        "args",
        "conditioning_dropout_prob",
        "torch",
        "rand",
        "bsz",
        "device",
        "latents",
        "device",
        "random_p0",
        "args",
        "conditioning_dropout_prob",
        "prompt_mask",
        "reshape",
        "bsz",
        "prompt_mask",
        "reshape",
        "bsz",
        "torch",
        "where",
        "prompt_mask",
        "torch",
        "zeros_like",
        "encoder_hidden_states",
        "encoder_hidden_states",
        "torch",
        "where",
        "prompt_mask_concat",
        "torch",
        "zeros_like",
        "first_frame_latents",
        "first_frame_latents",
        "args",
        "prediction_type",
        "noise_scheduler",
        "register_to_config",
        "prediction_type",
        "args",
        "prediction_type",
        "torch",
        "cat",
        "c_in",
        "noisy_latents",
        "first_frame_latents",
        "vae",
        "config",
        "scaling_factor",
        "dim",
        "args",
        "fps",
        "fps",
        "motion_bucket_id",
        "noise_aug_strength",
        "torch",
        "tensor",
        "add_time_ids",
        "device",
        "latents",
        "device",
        "unsqueeze",
        "expand",
        "bsz",
        "unet",
        "input_latents",
        "c_noise",
        "encoder_hidden_states",
        "encoder_hidden_states",
        "added_time_ids",
        "add_time_ids",
        "occ_latent",
        "occ_latent",
        "metas",
        "metas",
        "sample",
        "c_out",
        "model_pred",
        "c_skip",
        "noisy_latents",
        "pred_final",
        "latents",
        "loss_weight",
        "mean",
        "accelerator",
        "gather",
        "loss",
        "repeat",
        "args",
        "train_batch_size",
        "mean",
        "train_loss",
        "avg_loss",
        "item",
        "args",
        "gradient_accumulation_steps",
        "accelerator",
        "backward",
        "loss",
        "accelerator",
        "sync_gradients",
        "accelerator",
        "clip_grad_norm_",
        "all_parameters",
        "args",
        "max_grad_norm",
        "optimizer",
        "step",
        "lr_scheduler",
        "step",
        "optimizer",
        "zero_grad",
        "accelerator",
        "sync_gradients",
        "args",
        "use_ema",
        "torch",
        "distributed",
        "fsdp",
        "FullyShardedDataParallel",
        "FSDP",
        "FSDP",
        "summon_full_params",
        "unet",
        "ema_unet",
        "step",
        "unet",
        "parameters",
        "progress_bar",
        "update",
        "global_step",
        "accelerator",
        "log",
        "train_loss",
        "step",
        "global_step",
        "global_step",
        "args",
        "checkpointing_steps",
        "accelerator",
        "is_main_process",
        "args",
        "checkpoints_total_limit",
        "os",
        "listdir",
        "args",
        "output_dir",
        "d",
        "d",
        "checkpoints",
        "d",
        "startswith",
        "sorted",
        "checkpoints",
        "key",
        "x",
        "x",
        "split",
        "len",
        "checkpoints",
        "args",
        "checkpoints_total_limit",
        "len",
        "checkpoints",
        "args",
        "checkpoints_total_limit",
        "checkpoints",
        "num_to_remove",
        "logger",
        "info",
        "len",
        "checkpoints",
        "len",
        "removing_checkpoints",
        "logger",
        "info",
        "join",
        "removing_checkpoints",
        "removing_checkpoint",
        "removing_checkpoints",
        "os",
        "path",
        "join",
        "args",
        "output_dir",
        "removing_checkpoint",
        "shutil",
        "rmtree",
        "removing_checkpoint",
        "os",
        "path",
        "join",
        "args",
        "output_dir",
        "global_step",
        "accelerator",
        "unwrap_model",
        "unet",
        "deepspeed",
        "zero",
        "GatheredParameters",
        "unet_ckpt",
        "parameters",
        "modifier_rank",
        "deepspeed",
        "comm",
        "get_rank",
        "StableVideoDiffusionPipeline",
        "image_encoder",
        "image_encoder",
        "vae",
        "vae",
        "unet",
        "unet_ckpt",
        "scheduler",
        "noise_scheduler",
        "feature_extractor",
        "feature_extractor",
        "pipeline",
        "save_pretrained",
        "save_path",
        "logger",
        "info",
        "save_path",
        "loss",
        "detach",
        "item",
        "lr_scheduler",
        "get_last_lr",
        "progress_bar",
        "set_postfix",
        "logs",
        "global_step",
        "args",
        "max_train_steps",
        "accelerator",
        "is_main_process",
        "args",
        "validation_prompts",
        "epoch",
        "args",
        "validation_epochs",
        "accelerator",
        "wait_for_everyone",
        "accelerator",
        "unwrap_model",
        "unet",
        "deepspeed",
        "zero",
        "GatheredParameters",
        "unet_ckpt",
        "parameters",
        "modifier_rank",
        "deepspeed",
        "comm",
        "get_rank",
        "StableVideoDiffusionPipeline",
        "image_encoder",
        "image_encoder",
        "vae",
        "vae",
        "unet",
        "unet_ckpt",
        "scheduler",
        "noise_scheduler",
        "feature_extractor",
        "feature_extractor",
        "pipeline",
        "save_pretrained",
        "args",
        "output_dir",
        "accelerator",
        "is_main_process",
        "args",
        "validation_prompts",
        "logger",
        "info",
        "pipeline",
        "to",
        "accelerator",
        "device",
        "weight_dtype",
        "pipeline",
        "set_progress_bar_config",
        "disable",
        "args",
        "enable_xformers_memory_efficient_attention",
        "pipeline",
        "enable_xformers_memory_efficient_attention",
        "args",
        "seed",
        "torch",
        "Generator",
        "device",
        "accelerator",
        "device",
        "manual_seed",
        "args",
        "seed",
        "i",
        "len",
        "args",
        "validation_prompts",
        "torch",
        "autocast",
        "pipeline",
        "args",
        "validation_prompts",
        "i",
        "num_inference_steps",
        "generator",
        "generator",
        "images",
        "images",
        "append",
        "image",
        "args",
        "push_to_hub",
        "save_model_card",
        "args",
        "repo_id",
        "images",
        "repo_folder",
        "args",
        "output_dir",
        "upload_folder",
        "repo_id",
        "repo_id",
        "folder_path",
        "args",
        "output_dir",
        "commit_message",
        "ignore_patterns",
        "accelerator",
        "end_training",
        "main"
    ],
    "literals": [
        "\"INFO\"",
        "\"RGB\"",
        "\"pt\"",
        "\"cpu\"",
        "'attn'",
        "\"missing_keys\"",
        "\"unexpected_keys\"",
        "\"mismatched_keys\"",
        "\"error_msgs\"",
        "f\"{torch_dtype} needs to be of type `torch.dtype`, e.g. `torch.float16`, but is {type(torch_dtype)}.\"",
        "\"\"",
        "\"val_imgs_grid.png\"",
        "\"![val_imgs_grid](./val_imgs_grid.png)\\n\"",
        "f\"\"\"\n---\nlicense: creativeml-openrail-m\nbase_model: {args.pretrained_model_name_or_path}\ndatasets:\n- {args.dataset_name}\ntags:\n- stable-diffusion\n- stable-diffusion-diffusers\n- text-to-image\n- diffusers\ninference: true\n---\n    \"\"\"",
        "f\"\"\"\n# Text-to-image finetuning - {repo_id}\n\nThis pipeline was finetuned from **{args.pretrained_model_name_or_path}** on the **{args.dataset_name}** dataset. Below are some example images generated with the finetuned pipeline using the following prompts: {args.validation_prompts}: \\n\n{img_str}\n\n## Pipeline usage\n\nYou can use the pipeline like so:\n\n```python\nfrom diffusers import DiffusionPipeline\nimport torch\n\npipeline = DiffusionPipeline.from_pretrained(\"{repo_id}\", torch_dtype=torch.float16)\nprompt = \"{args.validation_prompts[0]}\"\nimage = pipeline(prompt).images[0]\nimage.save(\"my_image.png\")\n```\n\n## Training info\n\nThese are the key hyperparameters used during training:\n\n* Epochs: {args.num_train_epochs}\n* Learning rate: {args.learning_rate}\n* Batch size: {args.train_batch_size}\n* Gradient accumulation steps: {args.gradient_accumulation_steps}\n* Image resolution: {args.resolution}\n* Mixed-precision: {args.mixed_precision}\n\n\"\"\"",
        "\"\"",
        "f\"\"\"\nMore information on all the CLI arguments and the environment are available on your [`wandb` run page]({wandb_run_url}).\n\"\"\"",
        "\"README.md\"",
        "\"w\"",
        "\"Running validation... \"",
        "\"cuda\"",
        "\"tensorboard\"",
        "\"validation\"",
        "\"NHWC\"",
        "\"wandb\"",
        "\"validation\"",
        "f\"{i}: {args.validation_prompts[i]}\"",
        "f\"image logging not implemented for {tracker.name}\"",
        "\"Simple example of a training script.\"",
        "\"--interval\"",
        "\"Number of interval frames.\"",
        "\"--random_frame_mask\"",
        "\"store_true\"",
        "\"random_frame_mask or fix masked frame number.\"",
        "\"--given_frame_num\"",
        "\"If fix masked frame number, the number of it.\"",
        "\"--nframes\"",
        "\"Number of video frames.\"",
        "\"--conditioning_dropout_prob\"",
        "\"Conditioning dropout probability. Drops out the conditionings (image and edit prompt) used in training InstructPix2Pix. See section 3.2.1 in the paper: https://arxiv.org/abs/2211.09800.\"",
        "\"--input_perturbation\"",
        "\"The scale of input perturbation. Recommended 0.1.\"",
        "\"--pretrained_model_name_or_path\"",
        "\"Path to pretrained model or model identifier from huggingface.co/models.\"",
        "\"--revision\"",
        "\"Revision of pretrained model identifier from huggingface.co/models.\"",
        "\"--dataset_name\"",
        "\"The name of the Dataset (from the HuggingFace hub) to train on (could be your own, possibly private,\"",
        "\" dataset). It can also be a path pointing to a local copy of a dataset in your filesystem,\"",
        "\" or to a folder containing files that 🤗 Datasets can understand.\"",
        "\"--dataset_config_name\"",
        "\"The config of the Dataset, leave as None if there's only one config.\"",
        "\"--train_data_dir\"",
        "\"A folder containing the training data. Folder contents must follow the structure described in\"",
        "\" https://huggingface.co/docs/datasets/image_dataset#imagefolder. In particular, a `metadata.jsonl` file\"",
        "\" must exist to provide the captions for the images. Ignored if `dataset_name` is specified.\"",
        "\"--image_column\"",
        "\"image\"",
        "\"The column of the dataset containing an image.\"",
        "\"--caption_column\"",
        "\"text\"",
        "\"The column of the dataset containing a caption or a list of captions.\"",
        "\"--max_train_samples\"",
        "\"For debugging purposes or quicker training, truncate the number of training examples to this \"",
        "\"value if set.\"",
        "\"--validation_prompts\"",
        "\"+\"",
        "\"A set of prompts evaluated every `--validation_epochs` and logged to `--report_to`.\"",
        "\"--output_dir\"",
        "\"sd-model-finetuned\"",
        "\"The output directory where the model predictions and checkpoints will be written.\"",
        "\"--cache_dir\"",
        "\"The directory where the downloaded models and datasets will be stored.\"",
        "\"--seed\"",
        "\"A seed for reproducible training.\"",
        "\"--seed_for_gen\"",
        "\"A seed for generator.\"",
        "\"--random_flip\"",
        "\"store_true\"",
        "\"whether to randomly flip images horizontally\"",
        "\"--train_batch_size\"",
        "\"Batch size (per device) for the training dataloader.\"",
        "\"--num_train_epochs\"",
        "\"--max_train_steps\"",
        "\"Total number of training steps to perform.  If provided, overrides num_train_epochs.\"",
        "\"--gradient_accumulation_steps\"",
        "\"Number of updates steps to accumulate before performing a backward/update pass.\"",
        "\"--gradient_checkpointing\"",
        "\"store_true\"",
        "\"Whether or not to use gradient checkpointing to save memory at the expense of slower backward pass.\"",
        "\"--learning_rate\"",
        "\"Initial learning rate (after the potential warmup period) to use.\"",
        "\"--scale_lr\"",
        "\"store_true\"",
        "\"Scale the learning rate by the number of GPUs, gradient accumulation steps, and batch size.\"",
        "\"--lr_scheduler\"",
        "\"constant\"",
        "'The scheduler type to use. Choose between [\"linear\", \"cosine\", \"cosine_with_restarts\", \"polynomial\",'",
        "' \"constant\", \"constant_with_warmup\"]'",
        "\"--lr_warmup_steps\"",
        "\"Number of steps for the warmup in the lr scheduler.\"",
        "\"--snr_gamma\"",
        "\"SNR weighting gamma to be used if rebalancing the loss. Recommended value is 5.0. \"",
        "\"More details here: https://arxiv.org/abs/2303.09556.\"",
        "\"--use_8bit_adam\"",
        "\"store_true\"",
        "\"Whether or not to use 8-bit Adam from bitsandbytes.\"",
        "\"--allow_tf32\"",
        "\"store_true\"",
        "\"Whether or not to allow TF32 on Ampere GPUs. Can be used to speed up training. For more information, see\"",
        "\" https://pytorch.org/docs/stable/notes/cuda.html#tensorfloat-32-tf32-on-ampere-devices\"",
        "\"--use_ema\"",
        "\"store_true\"",
        "\"Whether to use EMA model.\"",
        "\"--non_ema_revision\"",
        "\"Revision of pretrained non-ema model identifier. Must be a branch, tag or git identifier of the local or\"",
        "\" remote repository specified with --pretrained_model_name_or_path.\"",
        "\"--dataloader_num_workers\"",
        "\"Number of subprocesses to use for data loading. 0 means that the data will be loaded in the main process.\"",
        "\"--adam_beta1\"",
        "\"The beta1 parameter for the Adam optimizer.\"",
        "\"--adam_beta2\"",
        "\"The beta2 parameter for the Adam optimizer.\"",
        "\"--adam_weight_decay\"",
        "\"Weight decay to use.\"",
        "\"--adam_epsilon\"",
        "\"Epsilon value for the Adam optimizer\"",
        "\"--max_grad_norm\"",
        "\"Max gradient norm.\"",
        "\"--push_to_hub\"",
        "\"store_true\"",
        "\"Whether or not to push the model to the Hub.\"",
        "\"--hub_token\"",
        "\"The token to use to push to the Model Hub.\"",
        "\"--prediction_type\"",
        "\"The prediction_type that shall be used for training. Choose between 'epsilon' or 'v_prediction' or leave `None`. If left to `None` the default prediction type of the scheduler: `noise_scheduler.config.prediciton_type` is chosen.\"",
        "\"--hub_model_id\"",
        "\"The name of the repository to keep in sync with the local `output_dir`.\"",
        "\"--logging_dir\"",
        "\"logs\"",
        "\"[TensorBoard](https://www.tensorflow.org/tensorboard) log directory. Will default to\"",
        "\" *output_dir/runs/**CURRENT_DATETIME_HOSTNAME***.\"",
        "\"--mixed_precision\"",
        "\"no\"",
        "\"fp16\"",
        "\"bf16\"",
        "\"Whether to use mixed precision. Choose between fp16 and bf16 (bfloat16). Bf16 requires PyTorch >=\"",
        "\" 1.10.and an Nvidia Ampere GPU.  Default to the value of accelerate config of the current system or the\"",
        "\" flag passed with the `accelerate.launch` command. Use this argument to override the accelerate config.\"",
        "\"--report_to\"",
        "\"tensorboard\"",
        "'The integration to report the results and logs to. Supported platforms are `\"tensorboard\"`'",
        "' (default), `\"wandb\"` and `\"comet_ml\"`. Use `\"all\"` to report to all integrations.'",
        "\"--local_rank\"",
        "\"For distributed training: local_rank\"",
        "\"--checkpointing_steps\"",
        "\"Save a checkpoint of the training state every X updates. These checkpoints are only suitable for resuming\"",
        "\" training using `--resume_from_checkpoint`.\"",
        "\"--checkpoints_total_limit\"",
        "\"Max number of checkpoints to store.\"",
        "\"--resume_from_checkpoint\"",
        "\"Whether training should be resumed from a previous checkpoint. Use a path saved by\"",
        "' `--checkpointing_steps`, or `\"latest\"` to automatically select the last available checkpoint.'",
        "\"--enable_xformers_memory_efficient_attention\"",
        "\"store_true\"",
        "\"Whether or not to use xformers.\"",
        "\"--noise_offset\"",
        "\"The scale of noise offset.\"",
        "\"--validation_epochs\"",
        "\"Run validation every X epochs.\"",
        "\"--tracker_project_name\"",
        "\"text2image-fine-tune\"",
        "\"The `project_name` argument passed to Accelerator.init_trackers for\"",
        "\" more information see https://huggingface.co/docs/accelerate/v0.17.0/en/package_reference/accelerator#accelerate.Accelerator\"",
        "\"--load_from_disk\"",
        "\"store_true\"",
        "\"Whether to from prepared parquet data.\"",
        "\"--load_from_pkl\"",
        "\"store_true\"",
        "\"Whether to from prepared pkl data.\"",
        "\"--fixed_caption\"",
        "\"--unet_pretrained_path\"",
        "\"--unet_config_path\"",
        "\"--old_loading\"",
        "\"store_true\"",
        "\"--config_path\"",
        "\"--subfolder\"",
        "\"--scheduler_config_path\"",
        "\"--ddim\"",
        "\"store_true\"",
        "\"Whether to DDIM.\"",
        "\"--freeze_pretrain\"",
        "\"store_true\"",
        "\"Whether to freeze single image pretrain params.\"",
        "\"--init_caption\"",
        "''",
        "\"--p_mean\"",
        "\"--p_std\"",
        "\"--context_frame_augmentation\"",
        "\"store_true\"",
        "\"Whether to use noise augmentation for context frame.\"",
        "\"--image_height\"",
        "\"--image_width\"",
        "\"--fps\"",
        "\"--nframes_past\"",
        "\"Number of past video frames.\"",
        "\"LOCAL_RANK\"",
        "\"Need either a dataset name or a training folder.\"",
        "\"non_ema_revision!=None\"",
        "\"0.15.0\"",
        "\"Downloading 'non_ema' weights from revision branches of the Hub is deprecated. Please make sure to\"",
        "\" use `--variant=non_ema` instead.\"",
        "\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\"",
        "\"%m/%d/%Y %H:%M:%S\"",
        "\"validation_prompts\"",
        "f'******** Using scheduler config: {args.scheduler_config_path} ********'",
        "f'******** Scheduler config: {scheduler_config} ********'",
        "'Using default scheduler from pretrain'",
        "\"scheduler\"",
        "\"unet\"",
        "\"trainable_state\"",
        "\"only_new\"",
        "\"neighboring_view_pair\"",
        "\"neighboring_attn_type\"",
        "\"add\"",
        "\"zero_module_type\"",
        "\"zero_linear\"",
        "\"crossview_attn_type\"",
        "'basic'",
        "\"img_size\"",
        "\"cur_num_frames\"",
        "'examples/world_model/utils/DOME/config/custom_train_dome.py'",
        "\"feature_extractor\"",
        "\"image_encoder\"",
        "\"vae\"",
        "'cpu'",
        "'state_dict'",
        "'state_dict'",
        "\"0.0.16\"",
        "\"xFormers 0.0.16 cannot be used for training in some GPUs. If you observe problems during training, please update xFormers to at least 0.0.17. See https://huggingface.co/docs/diffusers/main/en/optimization/xformers for more details.\"",
        "\"xformers is not available. Make sure it is installed correctly\"",
        "\"0.16.0\"",
        "'unet'",
        "'image_encoder'",
        "\"unet_ema\"",
        "\"unet_ema\"",
        "\"unet\"",
        "\"image_encoder\"",
        "\"Please install bitsandbytes to use 8-bit Adam. You can do so by running `pip install bitsandbytes`\"",
        "'************** Loading Dataset From PKL **************'",
        "'interval'",
        "'************** finish loading *************'",
        "\"max_length\"",
        "\"pt\"",
        "\"fp16\"",
        "\"bf16\"",
        "\"***** Running training *****\"",
        "f\"  Num examples = {len(train_dataset)}\"",
        "f\"  Num Epochs = {args.num_train_epochs}\"",
        "f\"  Instantaneous batch size per device = {args.train_batch_size}\"",
        "f\"  Total train batch size (w. parallel, distributed & accumulation) = {total_batch_size}\"",
        "f\"  Gradient Accumulation steps = {args.gradient_accumulation_steps}\"",
        "f\"  Total optimization steps = {args.max_train_steps}\"",
        "\"latest\"",
        "\"checkpoint\"",
        "\"-\"",
        "f\"Checkpoint '{args.resume_from_checkpoint}' does not exist. Starting a new training run.\"",
        "f\"Resuming from checkpoint {path}\"",
        "\"-\"",
        "\"Steps\"",
        "\"pixel_values\"",
        "'images'",
        "\"pixel_values\"",
        "\"pixel_values\"",
        "\"pixel_values\"",
        "\"pixel_values\"",
        "\"pixel_values\"",
        "\"pixel_values\"",
        "'images'",
        "\"train_loss\"",
        "\"checkpoint\"",
        "\"-\"",
        "f\"{len(checkpoints)} checkpoints already exist, removing {len(removing_checkpoints)} checkpoints\"",
        "f\"removing checkpoints: {', '.join(removing_checkpoints)}\"",
        "', '",
        "f\"checkpoint-{global_step}\"",
        "f\"Saved state to {save_path}\"",
        "\"step_loss\"",
        "\"lr\"",
        "\"Running inference for collecting generated images...\"",
        "\"cuda\"",
        "\"End of training\"",
        "\"step_*\"",
        "\"epoch_*\"",
        "\"__main__\""
    ],
    "variables": [
        "logger",
        "w",
        "h",
        "grid",
        "config",
        "model",
        "state_dict",
        "state_dict",
        "key",
        "model",
        "missing_keys",
        "unexpected_keys",
        "mismatched_keys",
        "error_msgs",
        "update_param_list",
        "loading_info",
        "model",
        "img_str",
        "image_grid",
        "yaml",
        "model_card",
        "wandb_info",
        "wandb_run_url",
        "wandb_run_url",
        "wandb_info",
        "pipeline",
        "pipeline",
        "generator",
        "generator",
        "images",
        "image",
        "np_images",
        "parser",
        "args",
        "env_local_rank",
        "args",
        "local_rank",
        "args",
        "non_ema_revision",
        "args",
        "logging_dir",
        "accelerator_project_config",
        "accelerator",
        "generator",
        "repo_id",
        "tracker_config",
        "Diff_Scheduler",
        "scheduler_config",
        "noise_scheduler",
        "noise_scheduler",
        "deepspeed_plugin",
        "deepspeed_plugin",
        "nframes_past",
        "unet_origin",
        "unet_param",
        "unet",
        "cfg",
        "feature_extractor",
        "image_encoder",
        "vae",
        "occ_vae",
        "ckpt_occ_vae",
        "state_dict",
        "state_dict",
        "ema_unet",
        "ema_unet",
        "xformers_version",
        "alphas_cumprod",
        "sqrt_alphas_cumprod",
        "sqrt_one_minus_alphas_cumprod",
        "sqrt_alphas_cumprod",
        "sqrt_alphas_cumprod",
        "alpha",
        "sqrt_one_minus_alphas_cumprod",
        "sqrt_one_minus_alphas_cumprod",
        "sigma",
        "snr",
        "all_models",
        "load_model",
        "model",
        "load_model",
        "load_model",
        "allow_tf32",
        "args",
        "learning_rate",
        "optimizer_cls",
        "optimizer_cls",
        "all_parameters",
        "optimizer",
        "train_transforms",
        "train_dataset",
        "inputs",
        "train_dataloader",
        "val_dataloader",
        "overrode_max_train_steps",
        "num_update_steps_per_epoch",
        "args",
        "max_train_steps",
        "overrode_max_train_steps",
        "lr_scheduler",
        "unet",
        "optimizer",
        "train_dataloader",
        "lr_scheduler",
        "weight_dtype",
        "weight_dtype",
        "args",
        "mixed_precision",
        "weight_dtype",
        "args",
        "mixed_precision",
        "num_update_steps_per_epoch",
        "args",
        "max_train_steps",
        "args",
        "num_train_epochs",
        "total_batch_size",
        "global_step",
        "first_epoch",
        "path",
        "dirs",
        "dirs",
        "dirs",
        "path",
        "args",
        "resume_from_checkpoint",
        "global_step",
        "resume_global_step",
        "first_epoch",
        "resume_step",
        "progress_bar",
        "nframes",
        "vae_scale_factor",
        "train_loss",
        "input_occs",
        "target_occs",
        "pixel_values",
        "images",
        "metas",
        "x",
        "bs",
        "_",
        "_",
        "_",
        "_",
        "x",
        "shape",
        "x",
        "_",
        "_",
        "occ_latent",
        "batch",
        "batch",
        "latent_dist",
        "latents",
        "latents",
        "latents",
        "bsz",
        "noise_aug_strength",
        "noise_aug_strength",
        "first_frame_image",
        "first_frame_image",
        "first_frame_latent",
        "first_frame_latents",
        "P_std",
        "P_mean",
        "rnd_normal",
        "sigma",
        "c_skip",
        "c_out",
        "c_in",
        "c_noise",
        "loss_weight",
        "noisy_latents",
        "image_list",
        "first_frame_info",
        "image",
        "image",
        "image",
        "image",
        "cond_transforms",
        "image",
        "image",
        "image_embeddings",
        "image_embeddings",
        "encoder_hidden_states",
        "random_p0",
        "prompt_mask",
        "prompt_mask",
        "prompt_mask_concat",
        "encoder_hidden_states",
        "first_frame_latents",
        "input_latents",
        "fps",
        "motion_bucket_id",
        "add_time_ids",
        "add_time_ids",
        "model_pred",
        "pred_final",
        "loss",
        "avg_loss",
        "train_loss",
        "checkpoints",
        "checkpoints",
        "checkpoints",
        "num_to_remove",
        "removing_checkpoints",
        "removing_checkpoint",
        "save_path",
        "unet_ckpt",
        "pipeline",
        "logs",
        "unet_ckpt",
        "pipeline",
        "images",
        "pipeline",
        "pipeline",
        "torch_dtype",
        "generator",
        "generator",
        "image"
    ],
    "comments": [
        "!/usr/bin/env python",
        "coding=utf-8",
        "Copyright 2023 The HuggingFace Inc. team. All rights reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "ours code base",
        "from utils.video_datasets import VideoNuscenesDataset",
        "from src.model.unet_spatio_temporal_condition_multiview import UNetSpatioTemporalConditionModelMultiview",
        "from transformers.integrations import PeftAdapterMixin, deepspeed_config, is_deepspeed_zero3_enabled",
        "from transformers.integrations.deepspeed import (",
        "is_deepspeed_zero3_enabled,",
        "set_hf_deepspeed_config,",
        "unset_hf_deepspeed_config,",
        ")",
        "os.environ['CUDA_LAUNCH_BLOCKING'] = '1'",
        "import mmcv",
        "state_dict = torch.load(model_file, map_location=\"cpu\")",
        "not used in the function",
        "Set model in evaluation mode to deactivate DropOut modules by default",
        "Sanity checks",
        "default to using the same revision for the non-ema model if not specified",
        "Make one log on every process with the configuration for debugging.",
        "If passed along, set the training seed now.",
        "Handle the repository creation",
        "move accelerate init here",
        "Load scheduler and models.",
        "Currently Accelerate doesn't know how to handle multiple models under Deepspeed ZeRO stage 3.",
        "For this to work properly all models must be run through `accelerate.prepare`. But accelerate",
        "will try to assign the same optimizer with the same weights to all models during",
        "`deepspeed.initialize`, which of course doesn't work.",
        "",
        "For now the following workaround will partially support Deepspeed ZeRO-3, by excluding the 2",
        "frozen models from being partitioned during `zero.Init` which gets called during",
        "`from_pretrained` So CLIPTextModel and AutoencoderKL will not enjoy the parameter sharding",
        "across multiple gpus and only UNet2DConditionModel will get ZeRO sharded.",
        "unet = UNetSpatioTemporalConditionModel.from_pretrained(args.pretrained_model_name_or_path, subfolder=\"unet\", revision=args.non_ema_revision)",
        "only_new or all",
        "\"neighboring_view_pair\": {0: [2, 1],",
        "1: [0, 2],",
        "2: [1, 0]},",
        "\"nframes_past\": nframes_past,",
        "unet = UNetSpatioTemporalConditionModelMultiview.from_unet_spatio_temporal_condition(unet_origin, **unet_param)",
        "tokenizer = CLIPTokenizer.from_pretrained(",
        "args.pretrained_model_name_or_path, subfolder=\"tokenizer\", revision=args.revision",
        ")",
        "with ContextManagers(deepspeed_zero_init_disabled_context_manager()):",
        "feature_extractor = CLIPImageProcessor.from_pretrained(args.pretrained_model_name_or_path, subfolder=\"feature_extractor\", revision=args.revision)",
        "image_encoder = CLIPVisionModelWithProjection.from_pretrained(",
        "args.pretrained_model_name_or_path, subfolder=\"image_encoder\", revision=args.revision",
        ")",
        "vae = AutoencoderKLTemporalDecoder.from_pretrained(",
        "args.pretrained_model_name_or_path, subfolder=\"vae\", revision=args.revision",
        ")",
        "load config",
        "load vae",
        "assert cfg.vae_load_from and osp.exists(cfg.vae_load_from)",
        "Freeze",
        "Create EMA for the unet.",
        "ema_unet = UNetSpatioTemporalConditionModel.from_pretrained(args.pretrained_model_name_or_path, subfolder=\"unet\", revision=args.revision)",
        "ema_unet = EMAModel(ema_unet.parameters(), model_cls=UNetSpatioTemporalConditionModel, model_config=ema_unet.config)",
        "Expand the tensors.",
        "Adapted from https://github.com/TiankaiHang/Min-SNR-Diffusion-Training/blob/521b624bd70c67cee4bdf49225915f5945a872e3/guided_diffusion/gaussian_diffusion.py#L1026",
        "Compute SNR.",
        "`accelerate` 0.16.0 will have better support for customized saving",
        "create custom saving & loading hooks so that `accelerator.save_state(...)` serializes in a nice format",
        "make sure to pop weight so that corresponding model is not saved again",
        "pop models so that they are not loaded again",
        "load_model = UNetSpatioTemporalConditionModel.from_pretrained(input_dir, subfolder=\"unet\")",
        "model.register_to_config(**load_model.config)",
        "Enable TF32 for faster training on Ampere GPUs,",
        "cf https://pytorch.org/docs/stable/notes/cuda.html#tensorfloat-32-tf32-on-ampere-devices",
        "Initialize the optimizer",
        "Initialize the optimizer",
        "In distributed training, the load_dataset function guarantees that only one local process can concurrently",
        "download the dataset.",
        "tokenizer=tokenizer,",
        "DataLoaders creation:",
        "train_dataloader = torch.utils.data.DataLoader(",
        "train_dataset,",
        "shuffle=True,",
        "batch_size=args.train_batch_size,",
        "# batch_size=2,",
        "num_workers=args.dataloader_num_workers,",
        ")",
        "Scheduler and math around the number of training steps.",
        "Prepare everything with our `accelerator`.",
        "For mixed precision training we cast all non-trainable weigths (vae, non-lora condition_encoder and non-lora unet) to half-precision",
        "as these weights are only used for inference, keeping weights in full precision is not required.",
        "Move the text encoder to gpu and cast to weight_dtype",
        "We need to recalculate our total training steps as the size of the training dataloader may have changed.",
        "Afterwards we recalculate our number of training epochs",
        "Train!",
        "Potentially load in the weights and states from a previous save",
        "Only show the progress bar once on each machine.",
        "with torch.no_grad():",
        "save_path = os.path.join(args.output_dir, f\"checkpoint-{global_step}\")",
        "unet_ckpt = accelerator.unwrap_model(unet)",
        "with deepspeed.zero.GatheredParameters(unet_ckpt.parameters(), modifier_rank=0):",
        "if deepspeed.comm.get_rank() == 0:",
        "pipeline = StableVideoDiffusionPipeline(",
        "image_encoder=image_encoder,",
        "vae=vae,",
        "unet=unet_ckpt,",
        "scheduler=noise_scheduler,",
        "feature_extractor=feature_extractor,",
        ")",
        "pipeline.save_pretrained(save_path)",
        "batch['pixel_values'] = batch['pixel_values'][:, :3]",
        "batch['images'] = batch['images'][:3]",
        "Skip steps until we reach the resumed step",
        "16 128 50 50",
        "vae sample",
        "16 64 50 50",
        "if x.dim()==4:",
        "x = rearrange(x, '(b f) c h w -> b f c h w', b=bs).contiguous()",
        "elif x.dim()==5:",
        "x = rearrange(x, 'b c f h w -> b f c h w', b=bs).contiguous()",
        "else:",
        "raise NotImplementedError",
        "Convert images to latent space",
        "B, T, C, H, W",
        "keep same with the inference",
        "first_frame_image = batch[\"pixel_values\"][:, :nframes_past]",
        "first_frame_image = first_frame_image.reshape(-1, *first_frame_image.shape[-3:])",
        "first_frame_image = first_frame_image + noise_aug_strength * torch.randn_like(first_frame_image)",
        "first_frame_latent = vae.encode(first_frame_image.to(weight_dtype)).latent_dist.mode()* vae.config.scaling_factor",
        "first_frame_latent = first_frame_latent.reshape(bsz, nframes_past, *first_frame_latent.shape[-3:])",
        "first_frame_latent = first_frame_latent.reshape(bsz, -1, *first_frame_latent.shape[-2:])",
        "first_frame_latents = first_frame_latent.unsqueeze(1).repeat(1, nframes, 1, 1, 1)",
        "first_frame_image = batch[\"pixel_values\"][:, nframes_past-1]",
        "first_frame_image = first_frame_image + noise_aug_strength * torch.randn_like(first_frame_image)",
        "first_frame_latent = vae.encode(first_frame_image.to(weight_dtype)).latent_dist.mode()* vae.config.scaling_factor",
        "first_frame_latents = first_frame_latent.unsqueeze(1).repeat(1, nframes, 1, 1, 1)",
        "Add noise to the latents according to the noise magnitude at each timestep, keep same to EDM formulation",
        "sigma = sigma.repeat_interleave(batch[\"pixel_values\"].shape[1], dim=1)",
        "cond_mask = torch.zeros_like(sigma)",
        "cond_mask[:, :nframes_past] = 1",
        "sigma = (1 - cond_mask) * sigma",
        "condition",
        "first_frame_info = batch['images'][0][0]",
        "We normalize the image before resizing to match with the original implementation.",
        "Then we unnormalize it after resizing.",
        "image_list = []",
        "for cur_cam_img in batch['images']:",
        "cur_image_list = []",
        "for idx_frame in range(nframes_past):",
        "first_frame_info = cur_cam_img[idx_frame][0]",
        "# We normalize the image before resizing to match with the original implementation.",
        "# Then we unnormalize it after resizing.",
        "image = first_frame_info * 2.0 - 1.0",
        "image = _resize_with_antialiasing(image, (224, 224))",
        "image = (image + 1.0) / 2.0",
        "cur_image_list.append(image)",
        "cur_image = torch.cat(cur_image_list, dim=1)",
        "image_list.append(cur_image)",
        "Normalize the image with for CLIP input",
        "image_embeddings = image_encoder(image).image_embeds",
        "image_embeddings = image_embeddings.reshape(bsz, nframes_past, -1)",
        "sample masks for the edit prompts",
        "Get the target for loss depending on the prediction type",
        "set prediction_type of scheduler if defined",
        "don't understand this",
        "Predict the noise residual and compute loss",
        "model_pred = unet(input_latents, c_noise, cond_mask, encoder_hidden_states=encoder_hidden_states, added_time_ids=add_time_ids).sample",
        "pred_final = pred_final * (1 - cond_mask) + latents * cond_mask",
        "Compute the loss",
        "Gather the losses across all processes for logging (if we use distributed training).",
        "Grad accumulation",
        "Checks if the accelerator has performed an optimization step behind the scenes",
        "_before_ saving state, check if this save would set us over the `checkpoints_total_limit`",
        "before we save the new checkpoint, we need to have at _most_ `checkpoints_total_limit - 1` checkpoints",
        "Create the pipeline using the trained modules and save it.",
        "unet = UNetSpatioTemporalConditionModel.from_pretrained(args.pretrained_model_name_or_path, subfolder=\"unet\", revision=args.non_ema_revision)",
        "unet = UNetSpatioTemporalConditionModelMultiview.from_unet_spatio_temporal_condition(unet_origin, **unet_param)",
        "unet_ckpt = accelerator.unwrap_model(unet)",
        "if args.use_ema:",
        "ema_unet.copy_to(unet.parameters())",
        "pipeline = StableVideoDiffusionPipeline(",
        "image_encoder=image_encoder,",
        "vae=vae,",
        "unet=unet,",
        "scheduler=noise_scheduler,",
        "feature_extractor=feature_extractor,",
        ")",
        "pipeline.save_pretrained(args.output_dir)",
        "Run a final round of inference."
    ],
    "docstrings": [
        "\"\"\"\n        returns either a context list that includes one that will disable zero.Init or an empty context list\n        \"\"\"",
        "\"\"\"\n        Computes SNR as per https://github.com/TiankaiHang/Min-SNR-Diffusion-Training/blob/521b624bd70c67cee4bdf49225915f5945a872e3/guided_diffusion/gaussian_diffusion.py#L847-L849\n        \"\"\""
    ],
    "functions": [
        "make_image_grid",
        "init_model_from_config_and_load_pretrain",
        "save_model_card",
        "log_validation",
        "parse_args",
        "main",
        "deepspeed_zero_init_disabled_context_manager",
        "temporarily_disable_deepspeed_zero3",
        "compute_snr",
        "save_model_hook",
        "load_model_hook",
        "tokenize_captions_null"
    ],
    "classes": []
}