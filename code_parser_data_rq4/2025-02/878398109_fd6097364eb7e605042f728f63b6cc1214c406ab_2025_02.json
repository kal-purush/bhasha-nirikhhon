{
    "identifiers": [
        "Phases",
        "Common",
        "org",
        "json",
        "JSONObject",
        "org",
        "json",
        "JSONException",
        "java",
        "io",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "Paths",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "regex",
        "Matcher",
        "java",
        "util",
        "regex",
        "Pattern",
        "args",
        "loadMethodBlockCostsFromJSON",
        "e",
        "e",
        "getMessage",
        "getBackendBlockCost",
        "METHOD_VTUNE_BLOCK_COST_MAP",
        "BACKEND_BLOCK_COST_MAP",
        "VTUNE_BLOCK_PATTERN",
        "Pattern",
        "compile",
        "filePath",
        "Files",
        "exists",
        "Paths",
        "get",
        "filePath",
        "filePath",
        "jsonContent",
        "Files",
        "readAllBytes",
        "Paths",
        "get",
        "filePath",
        "root",
        "root",
        "jsonContent",
        "e",
        "e",
        "getMessage",
        "e",
        "methodName",
        "root",
        "keySet",
        "methodBlocks",
        "root",
        "optJSONObject",
        "methodName",
        "methodBlocks",
        "vtuneCostMap",
        "backendVtuneCostMap",
        "blockKey",
        "methodBlocks",
        "keySet",
        "equals",
        "blockKey",
        "backendObj",
        "methodBlocks",
        "optJSONObject",
        "blockKey",
        "backendObj",
        "backendKey",
        "backendObj",
        "keySet",
        "cost",
        "backendObj",
        "optInt",
        "backendKey",
        "vtuneBlockNum",
        "extractVtuneBlockNumber",
        "backendKey",
        "vtuneBlockNum",
        "backendVtuneCostMap",
        "put",
        "vtuneBlockNum",
        "cost",
        "cost",
        "methodBlocks",
        "optInt",
        "blockKey",
        "vtuneBlockNum",
        "extractVtuneBlockNumber",
        "blockKey",
        "vtuneBlockNum",
        "vtuneCostMap",
        "put",
        "vtuneBlockNum",
        "cost",
        "METHOD_VTUNE_BLOCK_COST_MAP",
        "put",
        "methodName",
        "vtuneCostMap",
        "BACKEND_BLOCK_COST_MAP",
        "put",
        "methodName",
        "backendVtuneCostMap",
        "key",
        "matcher",
        "VTUNE_BLOCK_PATTERN",
        "matcher",
        "key",
        "matcher",
        "matches",
        "parseInt",
        "matcher",
        "group",
        "ignored",
        "methodName",
        "vtuneBlockNumber",
        "index",
        "methodName",
        "indexOf",
        "index",
        "methodName",
        "methodName",
        "substring",
        "index",
        "trim",
        "blockCostMap",
        "METHOD_VTUNE_BLOCK_COST_MAP",
        "get",
        "methodName",
        "blockCostMap",
        "cost",
        "blockCostMap",
        "get",
        "vtuneBlockNumber",
        "cost",
        "cost",
        "methodName",
        "vtuneBlockNumber",
        "index",
        "methodName",
        "indexOf",
        "index",
        "methodName",
        "methodName",
        "substring",
        "index",
        "trim",
        "backendCostMap",
        "BACKEND_BLOCK_COST_MAP",
        "get",
        "methodName",
        "backendCostMap",
        "cost",
        "backendCostMap",
        "get",
        "vtuneBlockNumber",
        "cost",
        "cost"
    ],
    "literals": [
        "\"/home/hb478/repos/GTSlowdownSchedular/FinalDataRefined100/Havlak/Final_Havlak.json\"",
        "\"Failed to load method block costs: \"",
        "\"havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$1\"",
        "\".*\\\\(Vtune Block\\\\s*(\\\\d+)\\\\).*\"",
        "\"Could not locate \"",
        "\"Skipping loading (this might cause a fatal crash if GTSlowdown is on)\"",
        "\"Failed to parse JSON: \"",
        "\"Backend Blocks\""
    ],
    "variables": [
        "root"
    ],
    "comments": [
        "Regex to capture the number after \"(Vtune Block ...)\"",
        "For each methodName in the root",
        "Value is expected to be a JSONObject with block keys",
        "skip if it's not a valid JSON object",
        "We'll store normal blocks here",
        "We'll store backend blocks here",
        "For each key in methodBlocks, we have either \"NN (Vtune Block MM)\" or \"Backend Blocks\"",
        "If it's \"Backend Blocks\", parse those separately",
        "It's a normal block entry \"NN (Vtune Block MM)\": cost",
        "Store in the main maps",
        "fall through",
        "Optionally strip parentheses, e.g. \"foo(int)\" -> \"foo\"",
        "Optionally strip parentheses, e.g. \"foo(int)\" -> \"foo\""
    ],
    "docstrings": [
        "* For normal method blocks:\n     *   methodName -> (vtuneBlockNumber -> cost)",
        "* For backend blocks:\n     *   methodName -> (vtuneBlockNumber -> cost)",
        "* Reads the JSON file, parses each method entry, and extracts the Vtune block and cost.\n     * Example snippet:\n     *\n     * {\n     *   \"havlak.HavlakLoopFinder.lambda$stepEProcessNonBackPreds$1\": {\n     *       \"3 (Vtune Block 5)\": 5,\n     *       \"98 (Vtune Block 145)\": 6,\n     *       \"150 (Vtune Block 26)\": 7,\n     *       \"Backend Blocks\": {\n     *           \"99 (Vtune Block 500)\": 20,\n     *           \"102 (Vtune Block 501)\": 15\n     *       }\n     *   },\n     *   ...\n     * }",
        "* Extracts the integer that appears after \"(Vtune Block ...)\".\n     * Returns -1 if not found or cannot parse.",
        "* Returns the cost associated with a given methodName and Vtune block (for normal blocks).\n     *\n     * For example, if the JSON has:\n     *   \"32 (Vtune Block 129)\": 14\n     * The methodName's map will have (129 -> 14).",
        "* Returns the cost associated with a given methodName and Vtune block (for backend blocks).\n     *\n     * For example, if under \"Backend Blocks\" you have:\n     *   \"99 (Vtune Block 500)\": 20\n     * Then the methodName's backend map will have (500 -> 20)."
    ],
    "functions": [
        "main",
        "loadMethodBlockCostsFromJSON",
        "extractVtuneBlockNumber",
        "getBlockCost",
        "getBackendBlockCost"
    ],
    "classes": [
        "SlowdownFileRetriever"
    ]
}