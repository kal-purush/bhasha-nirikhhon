{
    "identifiers": [
        "val",
        "val",
        "root",
        "root",
        "node",
        "node",
        "maxDepthOfBTree",
        "node",
        "left",
        "maxDepthOfBTree",
        "node",
        "right",
        "max",
        "left",
        "right",
        "node",
        "sum",
        "node",
        "sum",
        "pathSum",
        "node",
        "left",
        "sum",
        "node",
        "val",
        "pathSum",
        "node",
        "right",
        "sum",
        "node",
        "val",
        "left",
        "right",
        "root",
        "p",
        "q",
        "node",
        "p",
        "q",
        "node",
        "node",
        "p",
        "node",
        "q",
        "node",
        "lowestCommonAncestor",
        "node",
        "left",
        "p",
        "q",
        "lowestCommonAncestor",
        "node",
        "right",
        "p",
        "q",
        "left",
        "right",
        "node",
        "left",
        "left",
        "right",
        "dfs",
        "root",
        "p",
        "q",
        "root",
        "node",
        "node",
        "depth",
        "node",
        "left",
        "depth",
        "node",
        "right",
        "max",
        "diameter",
        "left",
        "right",
        "max",
        "left",
        "right",
        "depth",
        "root",
        "diameter"
    ],
    "literals": [],
    "variables": [
        "val",
        "left",
        "right",
        "root",
        "left",
        "right",
        "left",
        "right",
        "left",
        "right",
        "diameter",
        "left",
        "right",
        "diameter"
    ],
    "comments": [
        "If the current node is one of the nodes we are looking for",
        "Search for LCA in the left and right subtrees",
        "If p and q are found in left and right subtrees, node is their LCA",
        "If one of the subtrees is None, return the non-None value"
    ],
    "docstrings": [],
    "functions": [
        "maxDepthOfBTree",
        "pathSum",
        "lowestCommonAncestor",
        "dfs",
        "diameterOfBinaryTree",
        "depth"
    ],
    "classes": [
        "TreeNode",
        "DFS"
    ]
}