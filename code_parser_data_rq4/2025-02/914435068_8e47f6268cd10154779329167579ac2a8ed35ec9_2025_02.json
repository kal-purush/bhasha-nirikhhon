{
    "identifiers": [
        "annotations",
        "asyncio",
        "copy",
        "time",
        "warnings",
        "typing",
        "Any",
        "Dict",
        "Generic",
        "Optional",
        "Type",
        "TypeVar",
        "pydantic",
        "BaseModel",
        "ConfigDict",
        "Field",
        "NonNegativeFloat",
        "PositiveInt",
        "model_validator",
        "BaseModel",
        "ConfigDict",
        "extra",
        "frozen",
        "PositiveInt",
        "Field",
        "description",
        "NonNegativeFloat",
        "Field",
        "description",
        "BaseModel",
        "ConfigDict",
        "extra",
        "Field",
        "description",
        "NodeParams",
        "Field",
        "Field",
        "ge",
        "le",
        "Optional",
        "PositiveInt",
        "NodeParams",
        "PositiveInt",
        "Field",
        "description",
        "Field",
        "description",
        "NodeParams",
        "PositiveInt",
        "Field",
        "description",
        "PositiveInt",
        "Field",
        "description",
        "TypeVar",
        "bound",
        "NodeParams",
        "Generic",
        "TParams",
        "Dict",
        "BaseNode",
        "TParams",
        "TParams",
        "Dict",
        "Any",
        "set_params",
        "classmethod",
        "cls",
        "Type",
        "TParams",
        "cls",
        "__orig_bases__",
        "__args__",
        "TParams",
        "Dict",
        "Any",
        "isinstance",
        "BaseModel",
        "get_params_model",
        "model_validate",
        "node",
        "BaseNode",
        "action",
        "BaseNode",
        "isinstance",
        "action",
        "action",
        "isidentifier",
        "ValueError",
        "action",
        "action",
        "_successors",
        "warnings",
        "warn",
        "action",
        "_successors",
        "node",
        "node",
        "action",
        "Optional",
        "BaseNode",
        "_successors",
        "get",
        "action",
        "shared",
        "Dict",
        "Any",
        "Any",
        "prep_res",
        "Any",
        "Any",
        "NotImplementedError",
        "shared",
        "Dict",
        "Any",
        "prep_res",
        "Any",
        "exec_res",
        "Any",
        "Any",
        "shared",
        "Dict",
        "Any",
        "Any",
        "prep",
        "shared",
        "_retry_execute",
        "prep_res",
        "post",
        "shared",
        "prep_res",
        "exec_res",
        "prep_res",
        "Any",
        "Any",
        "attempt",
        "max_retries",
        "exec",
        "prep_res",
        "e",
        "attempt",
        "max_retries",
        "wait",
        "time",
        "sleep",
        "wait",
        "RuntimeError",
        "other",
        "BaseNode",
        "BaseNode",
        "add_successor",
        "other",
        "action",
        "_ConditionalTransition",
        "_ConditionalTransition",
        "action",
        "BaseNode",
        "NodeParams",
        "prep_res",
        "Any",
        "Any",
        "prep_res",
        "BaseNode",
        "LLMParams",
        "prep_res",
        "call_llm",
        "prep_res",
        "BaseNode",
        "BatchParams",
        "items",
        "Any",
        "Any",
        "_retry_execute",
        "item",
        "item",
        "items",
        "prep_res",
        "Any",
        "Any",
        "result",
        "batch",
        "_chunk",
        "prep_res",
        "batch_size",
        "result",
        "_execute_batch",
        "batch",
        "staticmethod",
        "lst",
        "Any",
        "size",
        "Any",
        "lst",
        "i",
        "i",
        "size",
        "i",
        "len",
        "lst",
        "size",
        "BaseNode",
        "AsyncParams",
        "shared",
        "Dict",
        "Any",
        "Any",
        "prep_res",
        "Any",
        "Any",
        "NotImplementedError",
        "shared",
        "Dict",
        "Any",
        "prep_res",
        "Any",
        "exec_res",
        "Any",
        "Any",
        "shared",
        "Dict",
        "Any",
        "Any",
        "prep_async",
        "shared",
        "_retry_execute_async",
        "prep_res",
        "post_async",
        "shared",
        "prep_res",
        "exec_res",
        "prep_res",
        "Any",
        "Any",
        "attempt",
        "max_retries",
        "asyncio",
        "wait_for",
        "exec_async",
        "prep_res",
        "timeout",
        "timeout",
        "e",
        "attempt",
        "max_retries",
        "wait",
        "asyncio",
        "sleep",
        "wait",
        "RuntimeError",
        "AsyncNode",
        "ConfigDict",
        "validate_assignment",
        "model_validator",
        "mode",
        "concurrent_limit",
        "warnings",
        "warn",
        "prep_res",
        "Semaphore",
        "concurrent_limit",
        "call_llm_async",
        "prep_res",
        "BaseNode",
        "FlowParams",
        "start_node",
        "BaseNode",
        "FlowParams",
        "Dict",
        "Any",
        "start_node",
        "shared",
        "Dict",
        "Any",
        "copy",
        "copy",
        "start_node",
        "current",
        "current",
        "_execute",
        "shared",
        "current",
        "get_successor",
        "result",
        "prep_res",
        "Dict",
        "Any",
        "_orchestrate",
        "prep_res",
        "e",
        "stop_on_error",
        "warnings",
        "warn",
        "e",
        "Flow",
        "shared",
        "Dict",
        "Any",
        "copy",
        "copy",
        "start_node",
        "current",
        "isinstance",
        "current",
        "AsyncNode",
        "current",
        "_execute_async",
        "shared",
        "current",
        "_execute",
        "shared",
        "current",
        "get_successor",
        "result",
        "prep_res",
        "Dict",
        "Any",
        "_orchestrate_async",
        "prep_res",
        "e",
        "stop_on_error",
        "warnings",
        "warn",
        "e",
        "src",
        "BaseNode",
        "action",
        "src",
        "action",
        "tgt",
        "BaseNode",
        "BaseNode",
        "src",
        "add_successor",
        "tgt",
        "action",
        "concurrency",
        "asyncio",
        "Semaphore",
        "concurrency",
        "semaphore",
        "acquire",
        "exc_type",
        "exc",
        "tb",
        "semaphore",
        "release",
        "prompt",
        "LLMParams",
        "litellm",
        "completion",
        "ImportError",
        "ImportError",
        "completion",
        "model",
        "model_name",
        "messages",
        "prompt",
        "response",
        "choices",
        "message",
        "content",
        "prompt",
        "LLMParams",
        "litellm",
        "acompletion",
        "ImportError",
        "ImportError",
        "acompletion",
        "model",
        "model_name",
        "messages",
        "prompt",
        "temperature",
        "temperature",
        "max_tokens",
        "max_tokens",
        "response",
        "choices",
        "message",
        "content",
        "messages",
        "Dict",
        "LLMParams",
        "litellm",
        "acompletion",
        "ImportError",
        "ImportError",
        "acompletion",
        "model",
        "model_name",
        "messages",
        "messages",
        "temperature",
        "temperature",
        "max_tokens",
        "max_tokens",
        "response",
        "choices",
        "message",
        "content",
        "messages",
        "Dict",
        "LLMParams",
        "litellm",
        "acompletion",
        "ImportError",
        "ImportError",
        "acompletion",
        "model",
        "model_name",
        "messages",
        "messages",
        "temperature",
        "temperature",
        "max_tokens",
        "max_tokens",
        "response",
        "choices",
        "message",
        "content"
    ],
    "literals": [
        "\"forbid\"",
        "\"Maximum number of execution retries\"",
        "\"Seconds to wait between retries\"",
        "\"forbid\"",
        "\"Stop flow on any node error\"",
        "\"gemini/gemini-2.0-flash\"",
        "\"Items per batch\"",
        "\"Stop batch on first error\"",
        "\"Timeout in seconds\"",
        "\"Max concurrent operations\"",
        "\"TParams\"",
        "\"default\"",
        "f\"Invalid action key: {action}. Must be valid Python identifier\"",
        "f\"Overwriting successor for action '{action}'\"",
        "\"default\"",
        "\"Execution failed after retries\"",
        "f\"Processed {prep_res}\"",
        "\"Async execution failed after retries\"",
        "\"after\"",
        "\"High concurrency may cause rate limiting\"",
        "f\"Flow continued after error: {str(e)}\"",
        "f\"Async flow continued after error: {str(e)}\"",
        "\"litellm required for LLM calls\"",
        "\"role\"",
        "\"user\"",
        "\"content\"",
        "\"litellm required for LLM calls\"",
        "\"role\"",
        "\"user\"",
        "\"content\"",
        "\"text\"",
        "\"litellm required for LLM calls\"",
        "\"litellm required for LLM calls\""
    ],
    "variables": [
        "model_config",
        "max_retries",
        "wait",
        "model_config",
        "stop_on_error",
        "model_name",
        "temperature",
        "max_tokens",
        "batch_size",
        "fail_fast",
        "timeout",
        "concurrent_limit",
        "TParams",
        "_successors",
        "_successors",
        "action",
        "prep_res",
        "exec_res",
        "prep_res",
        "exec_res",
        "model_config",
        "start_node",
        "current",
        "result",
        "current",
        "current",
        "result",
        "result",
        "current",
        "src",
        "action",
        "semaphore",
        "response",
        "response",
        "response",
        "response"
    ],
    "comments": [
        "!/usr/bin/env -S uv run",
        "/// script",
        "# requires-python = \">=3.12\"",
        "dependencies = [",
        "\"pydantic\",",
        "\"litellm\",",
        "]",
        "///",
        "--------------------------",
        "Pydantic Models",
        "--------------------------",
        "--------------------------",
        "Core Node Classes",
        "--------------------------",
        "type: ignore",
        "Execution lifecycle methods",
        "--------------------------",
        "Specialized Node Types",
        "--------------------------",
        "--------------------------",
        "Async Implementation",
        "--------------------------",
        "--------------------------",
        "Flow Control",
        "--------------------------",
        "--------------------------",
        "Helper Classes/Functions",
        "--------------------------",
        "Vertex AI expects content as a list with text"
    ],
    "docstrings": [
        "\"\"\"Base parameters for all nodes\"\"\"",
        "\"\"\"Base parameters for flows\"\"\"",
        "\"\"\"Parameters for LLM nodes\"\"\"",
        "\"\"\"Parameters for batch processing\"\"\"",
        "\"\"\"Async-specific parameters\"\"\"",
        "\"\"\"Initialize node with validated parameters\"\"\"",
        "\"\"\"Get the Pydantic model for this node's parameters\"\"\"",
        "\"\"\"Validate and set parameters\"\"\"",
        "\"\"\"Add a successor node with action key validation\"\"\"",
        "\"\"\"Get successor with type checking\"\"\"",
        "\"\"\"Preparation phase (sync)\"\"\"",
        "\"\"\"Execution phase (sync)\"\"\"",
        "\"\"\"Post-processing phase (sync)\"\"\"",
        "\"\"\"Internal execution flow\"\"\"",
        "\"\"\"Retry logic with validated parameters\"\"\"",
        "\"\"\"Operator overload for adding default successor\"\"\"",
        "\"\"\"Operator overload for conditional transitions\"\"\"",
        "\"\"\"Basic synchronous node\"\"\"",
        "\"\"\"Example implementation\"\"\"",
        "\"\"\"LLM node with validated parameters\"\"\"",
        "\"\"\"Execute LLM call with validated parameters\"\"\"",
        "\"\"\"Batch processing node\"\"\"",
        "\"\"\"Batch execution with size control\"\"\"",
        "\"\"\"Asynchronous node base class\"\"\"",
        "\"\"\"Async preparation phase\"\"\"",
        "\"\"\"Async execution phase\"\"\"",
        "\"\"\"Async post-processing phase\"\"\"",
        "\"\"\"Internal async execution flow\"\"\"",
        "\"\"\"Async retry logic with timeout\"\"\"",
        "\"\"\"Async LLM node with rate limiting\"\"\"",
        "\"\"\"Execute async LLM call with concurrency control\"\"\"",
        "\"\"\"Workflow orchestrator\"\"\"",
        "\"\"\"Execute workflow with validated parameters\"\"\"",
        "\"\"\"Execute full workflow\"\"\"",
        "\"\"\"Asynchronous workflow orchestrator\"\"\"",
        "\"\"\"Async workflow execution\"\"\"",
        "\"\"\"Execute async workflow\"\"\"",
        "\"\"\"Context manager for async rate limiting\"\"\"",
        "\"\"\"\n        Asynchronous context manager entry method.\n\n        This magic method is called when entering an async context manager block.\n        It acquires the semaphore before allowing execution to proceed.\n\n        Returns:\n            self: Returns the instance itself to be used as the context manager.\n\n        Raises:\n            Any exceptions that may occur during semaphore acquisition.\n        \"\"\"",
        "\"\"\"\n        Exit the asynchronous context manager and release the semaphore.\n\n        This method is called when exiting the async context manager (i.e., at the end of an 'async with' block).\n        It releases the semaphore that was acquired in __aenter__, allowing other tasks to proceed.\n\n        Args:\n            exc_type: Type of the exception that caused the context to be exited (None if no exception)\n            exc: Exception instance that caused the context to be exited (None if no exception)\n            tb: Traceback of the exception that caused the context to be exited (None if no exception)\n\n        Returns:\n            None\n        \"\"\"",
        "\"\"\"Execute LLM call with validated parameters\"\"\"",
        "\"\"\"Execute async LLM call with validated parameters\"\"\"",
        "\"\"\"Execute async LLM call with multiple messages\"\"\"",
        "\"\"\"Execute async LLM call with multiple messages\"\"\""
    ],
    "functions": [
        "get_params_model",
        "set_params",
        "add_successor",
        "get_successor",
        "prep",
        "exec",
        "post",
        "_execute",
        "_retry_execute",
        "__rshift__",
        "__sub__",
        "exec",
        "exec",
        "_execute_batch",
        "exec",
        "_chunk",
        "prep_async",
        "exec_async",
        "post_async",
        "_execute_async",
        "_retry_execute_async",
        "validate_concurrency",
        "exec_async",
        "_orchestrate",
        "exec",
        "_orchestrate_async",
        "exec_async",
        "__rshift__",
        "__aenter__",
        "__aexit__",
        "call_llm",
        "call_llm_async",
        "call_llm_messages",
        "call_llm_message_async"
    ],
    "classes": [
        "NodeParams",
        "FlowParams",
        "LLMParams",
        "BatchParams",
        "AsyncParams",
        "BaseNode",
        "Node",
        "LLMNode",
        "BatchNode",
        "AsyncNode",
        "AsyncLLMNode",
        "Flow",
        "AsyncFlow",
        "_ConditionalTransition",
        "Semaphore"
    ]
}