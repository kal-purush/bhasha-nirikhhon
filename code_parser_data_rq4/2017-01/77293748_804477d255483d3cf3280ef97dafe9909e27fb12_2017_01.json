{
    "identifiers": [
        "React",
        "React",
        "onfulfilled",
        "value",
        "onrejected",
        "reason",
        "onrejected",
        "reason",
        "callback",
        "value",
        "init",
        "resolve",
        "value",
        "reject",
        "reason",
        "init",
        "resolve",
        "value",
        "reject",
        "reason",
        "values",
        "values",
        "values",
        "reason",
        "reason",
        "value",
        "x",
        "y",
        "width",
        "height",
        "pageX",
        "pageY",
        "x",
        "y",
        "width",
        "height",
        "left",
        "top",
        "width",
        "height",
        "subscriber",
        "eventType",
        "subscription",
        "eventType",
        "subscription",
        "eventType",
        "emitter",
        "subscriber",
        "listener",
        "context",
        "subscriber",
        "eventType",
        "listener",
        "args",
        "context",
        "eventType",
        "listener",
        "args",
        "context",
        "eventType",
        "subscription",
        "eventType",
        "eventType",
        "eventType",
        "listener",
        "args",
        "callback",
        "callback",
        "relativeToNativeNode",
        "onSuccess",
        "onFail",
        "nativeProps",
        "key",
        "createElement",
        "React",
        "props",
        "children",
        "React",
        "React",
        "appParameters",
        "React",
        "config",
        "appKey",
        "getComponentFunc",
        "appKey",
        "func",
        "rootTag",
        "appKey",
        "appParameters",
        "config",
        "onAnimationDidEnd",
        "duration",
        "creationProp",
        "shapeTypes",
        "key",
        "config",
        "onAnimationDidEnd",
        "config",
        "onAnimationDidEnd",
        "config",
        "onAnimationDidEnd",
        "style",
        "React",
        "React",
        "anchor",
        "focus",
        "anchor",
        "focus",
        "maxLength",
        "start",
        "end",
        "key",
        "React",
        "text",
        "textFieldID",
        "textFieldID",
        "React",
        "React",
        "position",
        "React",
        "React",
        "React",
        "state",
        "React",
        "selectedPage",
        "selectedPage",
        "React",
        "React",
        "key",
        "React",
        "React",
        "React",
        "React",
        "React",
        "value",
        "React",
        "React",
        "route",
        "n",
        "route",
        "route",
        "route",
        "route",
        "route",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "newDate",
        "React",
        "React",
        "React",
        "JSX",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "itemValue",
        "itemPosition",
        "React",
        "React",
        "value",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "y",
        "x",
        "animated",
        "JSX",
        "React",
        "React",
        "value",
        "value",
        "React",
        "React",
        "value",
        "React",
        "error",
        "key",
        "React",
        "React",
        "React",
        "uri",
        "success",
        "width",
        "height",
        "failure",
        "error",
        "url",
        "requestId",
        "urls",
        "React",
        "visibleRows",
        "sectionId",
        "rowID",
        "changedRows",
        "sectionId",
        "rowID",
        "React",
        "React",
        "rowData",
        "sectionID",
        "rowID",
        "highlightRow",
        "React",
        "props",
        "React",
        "sectionData",
        "sectionId",
        "React",
        "sectionID",
        "rowID",
        "adjacentRowHighlighted",
        "React",
        "setTimeout",
        "clearTimeout",
        "setInterval",
        "clearInterval",
        "setImmediate",
        "clearImmediate",
        "requestAnimationFrame",
        "cancelAnimationFrame",
        "React",
        "y",
        "x",
        "animated",
        "React",
        "region",
        "region",
        "React",
        "React",
        "React",
        "React",
        "e",
        "e",
        "e",
        "e",
        "React",
        "React",
        "React",
        "React",
        "React",
        "React",
        "value",
        "React",
        "React",
        "color",
        "borderless",
        "React",
        "key",
        "React",
        "route",
        "routeStack",
        "React",
        "NavigatorStatic",
        "route",
        "navigator",
        "React",
        "childContext",
        "eventType",
        "listener",
        "useCapture",
        "eventType",
        "data",
        "didEmitCallback",
        "clearHandle",
        "callback",
        "eventEmitter",
        "eventType",
        "listener",
        "context",
        "React",
        "NavigatorStatic",
        "NavigatorStatic",
        "route",
        "route",
        "n",
        "route",
        "route",
        "index",
        "route",
        "routes",
        "route",
        "route",
        "route",
        "NavigatorStatic",
        "route",
        "nav",
        "index",
        "navState",
        "React",
        "route",
        "nav",
        "index",
        "navState",
        "React",
        "route",
        "nav",
        "index",
        "navState",
        "React",
        "React",
        "React",
        "route",
        "navigator",
        "React",
        "route",
        "navigator",
        "React",
        "route",
        "navigator",
        "React",
        "route",
        "navigator",
        "React",
        "React",
        "React",
        "StyleSheet",
        "create",
        "styles",
        "flatten",
        "style",
        "name",
        "handler",
        "name",
        "state",
        "name",
        "handler",
        "name",
        "callback",
        "enabled",
        "profileName",
        "args",
        "profileName",
        "profileName",
        "cookie",
        "profileName",
        "value",
        "relayProfiler",
        "objectName",
        "methodNames",
        "objName",
        "fnName",
        "func",
        "r1",
        "r2",
        "h1",
        "h2",
        "dataBlob",
        "sectionID",
        "rowID",
        "dataBlob",
        "sectionID",
        "onAsset",
        "dataBlob",
        "key",
        "rowIdentities",
        "dataBlob",
        "key",
        "sectionIdentities",
        "rowIdentities",
        "sectionIndex",
        "rowIndex",
        "sectionIndex",
        "rowIndex",
        "index",
        "index",
        "sectionIndex",
        "sectionIndex",
        "React",
        "React",
        "React",
        "React",
        "layoutSize",
        "layoutSize",
        "specifics",
        "listener",
        "data",
        "context",
        "dim",
        "dims",
        "key",
        "eventType",
        "listener",
        "context",
        "task",
        "handle",
        "deadline",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "x",
        "y",
        "animated",
        "rect",
        "animated",
        "nodeHandle",
        "additionalOffset",
        "preventNegativeScrollOffset",
        "left",
        "top",
        "width",
        "height",
        "e",
        "e",
        "e",
        "e",
        "e",
        "React",
        "React",
        "React",
        "React",
        "y",
        "x",
        "animated",
        "JSX",
        "y",
        "x",
        "React",
        "React",
        "dataBlob",
        "sectionIdentities",
        "rowIdentities",
        "rowID",
        "React",
        "rowData",
        "sectionID",
        "rowID",
        "highlightRow",
        "React",
        "rowData",
        "sectionID",
        "rowID",
        "React",
        "React",
        "options",
        "callback",
        "buttonIndex",
        "options",
        "failureCallback",
        "error",
        "successCallback",
        "success",
        "method",
        "content",
        "options",
        "title",
        "message",
        "buttons",
        "options",
        "title",
        "message",
        "buttons",
        "options",
        "onSuccess",
        "deviceId",
        "onFailure",
        "err",
        "onSuccess",
        "hasTracking",
        "onFailure",
        "err",
        "title",
        "message",
        "callbackOrButtons",
        "title",
        "message",
        "callbackOrButtons",
        "value",
        "defaultValue",
        "listener",
        "state",
        "listener",
        "state",
        "key",
        "callback",
        "error",
        "result",
        "key",
        "value",
        "callback",
        "error",
        "key",
        "callback",
        "error",
        "key",
        "value",
        "callback",
        "error",
        "callback",
        "error",
        "callback",
        "error",
        "keys",
        "keys",
        "callback",
        "errors",
        "result",
        "keyValuePairs",
        "callback",
        "errors",
        "keys",
        "callback",
        "errors",
        "keyValuePairs",
        "callback",
        "errors",
        "eventName",
        "handler",
        "eventName",
        "handler",
        "tag",
        "tag",
        "tag",
        "content",
        "options",
        "eventName",
        "listener",
        "result",
        "eventName",
        "listener",
        "result",
        "url",
        "url",
        "callback",
        "supported",
        "callback",
        "url",
        "handler",
        "handler",
        "url",
        "url",
        "handler",
        "handler",
        "url",
        "url",
        "callback",
        "supported",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "e",
        "gestureState",
        "config",
        "key",
        "permission",
        "permission",
        "rationale",
        "details",
        "details",
        "userInfo",
        "number",
        "callback",
        "badge",
        "callback",
        "notifications",
        "handler",
        "notification",
        "handler",
        "notification",
        "permissions",
        "permissions",
        "callback",
        "permissions",
        "key",
        "settings",
        "keys",
        "callback",
        "watchId",
        "React",
        "React",
        "React",
        "React",
        "hidden",
        "animation",
        "style",
        "animated",
        "visible",
        "color",
        "animated",
        "translucent",
        "options",
        "message",
        "duration",
        "message",
        "duration",
        "gravity",
        "view",
        "options",
        "React",
        "React",
        "value",
        "React",
        "pattern",
        "repeat",
        "value",
        "s",
        "x1",
        "y1",
        "x2",
        "y2",
        "easing",
        "easing",
        "easing",
        "Animated",
        "Animated",
        "AnimatedWithChildren",
        "config",
        "input",
        "state",
        "AnimatedWithChildren",
        "value",
        "value",
        "offset",
        "callback",
        "id",
        "callback",
        "value",
        "config",
        "value",
        "AnimatedWithChildren",
        "valueIn",
        "value",
        "offset",
        "callback",
        "value",
        "callback",
        "id",
        "key",
        "key",
        "result",
        "callback",
        "decay",
        "value",
        "config",
        "value",
        "config",
        "value",
        "add",
        "a",
        "b",
        "AnimatedInterpolation",
        "multiply",
        "a",
        "b",
        "AnimatedInterpolation",
        "modulo",
        "a",
        "modulus",
        "AnimatedInterpolation",
        "diffClamp",
        "a",
        "min",
        "max",
        "AnimatedInterpolation",
        "delay",
        "time",
        "sequence",
        "animations",
        "stagger",
        "time",
        "animations",
        "spring",
        "value",
        "config",
        "parallel",
        "animations",
        "config",
        "key",
        "argMapping",
        "config",
        "args",
        "createAnimatedComponent",
        "component",
        "allowRTL",
        "forceRTL",
        "geo_success",
        "position",
        "geo_error",
        "error",
        "geo_options",
        "success",
        "position",
        "error",
        "error",
        "options",
        "watchID",
        "callback",
        "value",
        "callback",
        "value",
        "config",
        "successCallback",
        "args",
        "cancelCallback",
        "args",
        "config",
        "successCallback",
        "args",
        "cancelCallback",
        "args",
        "uri",
        "callback",
        "hasImage",
        "uri",
        "base64ImageData",
        "success",
        "uri",
        "failure",
        "error",
        "uri",
        "success",
        "base64ImageData",
        "failure",
        "error",
        "url",
        "options",
        "fn",
        "time",
        "fn",
        "id",
        "index",
        "route",
        "onNavigate",
        "action",
        "JSX",
        "subViewProps",
        "JSX",
        "React",
        "JSX",
        "React",
        "Animated",
        "React",
        "props",
        "React",
        "React",
        "React",
        "state",
        "key",
        "state",
        "key",
        "state",
        "key",
        "state",
        "route",
        "state",
        "state",
        "index",
        "state",
        "key",
        "state",
        "state",
        "state",
        "key",
        "route",
        "state",
        "index",
        "route",
        "state",
        "routes",
        "index",
        "value",
        "config",
        "a",
        "b",
        "a",
        "b",
        "React",
        "React",
        "uri",
        "cropData",
        "success",
        "uri",
        "failure",
        "error",
        "requireNativeComponent",
        "viewName",
        "componentInterface",
        "extraConfig",
        "React",
        "processColor",
        "color",
        "__spread",
        "target",
        "sources",
        "fn",
        "addons",
        "done",
        "indicator",
        "indicator"
    ],
    "literals": [
        "'react'",
        "\"react\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"flex-start\"",
        "\"flex-end\"",
        "\"center\"",
        "\"stretch\"",
        "\"flex-start\"",
        "\"flex-end\"",
        "\"center\"",
        "\"space-between\"",
        "\"space-around\"",
        "\"row\"",
        "\"column\"",
        "\"row-reverse\"",
        "\"column-reverse\"",
        "\"auto\"",
        "\"wrap\"",
        "\"nowrap\"",
        "\"visible\"",
        "\"hidden\"",
        "\"scroll\"",
        "\"absolute\"",
        "\"relative\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"solid\"",
        "\"double\"",
        "\"dotted\"",
        "\"dashed\"",
        "\"auto\"",
        "\"ltr\"",
        "\"rtl\"",
        "\"auto\"",
        "\"top\"",
        "\"bottom\"",
        "\"center\"",
        "string",
        "string",
        "\"normal\"",
        "\"italic\"",
        "\"normal\"",
        "\"bold\"",
        "\"100\"",
        "\"200\"",
        "\"300\"",
        "\"400\"",
        "\"500\"",
        "\"600\"",
        "\"700\"",
        "\"800\"",
        "\"900\"",
        "\"auto\"",
        "\"left\"",
        "\"right\"",
        "\"center\"",
        "\"none\"",
        "\"underline\"",
        "\"line-through\"",
        "\"underline line-through\"",
        "\"solid\"",
        "\"double\"",
        "\"dotted\"",
        "\"dashed\"",
        "string",
        "string",
        "string",
        "'head'",
        "'middle'",
        "'tail'",
        "'clip'",
        "'head'",
        "'middle'",
        "'tail'",
        "'clip'",
        "string",
        "'phoneNumber'",
        "'link'",
        "'address'",
        "'calendarEvent'",
        "'none'",
        "'all'",
        "'never'",
        "'while-editing'",
        "'unless-editing'",
        "'always'",
        "'default'",
        "'light'",
        "'dark'",
        "string",
        "string",
        "string",
        "string",
        "\"default\"",
        "\"email-address\"",
        "\"numeric\"",
        "\"phone-pad\"",
        "\"ascii-capable\"",
        "\"numbers-and-punctuation\"",
        "\"url\"",
        "\"number-pad\"",
        "\"name-phone-pad\"",
        "\"decimal-pad\"",
        "\"twitter\"",
        "\"web-search\"",
        "\"done\"",
        "\"go\"",
        "\"next\"",
        "\"search\"",
        "\"send\"",
        "\"none\"",
        "\"previous\"",
        "\"default\"",
        "\"google\"",
        "\"join\"",
        "\"route\"",
        "\"yahoo\"",
        "\"emergency-call\"",
        "\"none\"",
        "\"sentences\"",
        "\"words\"",
        "\"characters\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"always\"",
        "\"ifRoom\"",
        "\"never\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"visible\"",
        "\"hidden\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"solid\"",
        "\"dotted\"",
        "\"dashed\"",
        "string",
        "\"visible\"",
        "\"hidden\"",
        "string",
        "string",
        "'none'",
        "'button'",
        "'radiobutton_checked'",
        "'radiobutton_unchecked'",
        "'none'",
        "'polite'",
        "'assertive'",
        "'auto'",
        "'yes'",
        "'no'",
        "'no-hide-descendants'",
        "string",
        "\"box-none\"",
        "\"none\"",
        "\"box-only\"",
        "\"auto\"",
        "string",
        "'none'",
        "'button'",
        "'link'",
        "'header'",
        "'search'",
        "'image'",
        "'selected'",
        "'plays'",
        "'key'",
        "'text'",
        "'summary'",
        "'disabled'",
        "'frequentUpdates'",
        "'startsMedia'",
        "'adjustable'",
        "'allowsDirectInteraction'",
        "'pageTurn'",
        "'none'",
        "'button'",
        "'radiobutton_checked'",
        "'radiobutton_unchecked'",
        "\"Idle\"",
        "\"Dragging\"",
        "\"Settling\"",
        "\"none\"",
        "\"on-drag\"",
        "'height'",
        "'position'",
        "'padding'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'other'",
        "'click'",
        "string",
        "\"normal\"",
        "\"fast\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'small'",
        "'large'",
        "string",
        "'small'",
        "'large'",
        "\"date\"",
        "\"time\"",
        "\"datetime\"",
        "string",
        "\"unlocked\"",
        "\"locked-closed\"",
        "\"locked-open\"",
        "\"none\"",
        "\"on-drag\"",
        "\"Idle\"",
        "\"Dragging\"",
        "\"Settling\"",
        "string",
        "string",
        "string",
        "string",
        "\"dialog\"",
        "\"dropdown\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"Horizontal\"",
        "\"Normal\"",
        "\"Small\"",
        "\"Large\"",
        "\"Inverse\"",
        "\"SmallInverse\"",
        "\"LargeInverse\"",
        "string",
        "string",
        "\"default\"",
        "\"bar\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"contain\"",
        "\"cover\"",
        "\"stretch\"",
        "\"center\"",
        "\"repeat\"",
        "string",
        "\"visible\"",
        "\"hidden\"",
        "string",
        "string",
        "\"visible\"",
        "\"hidden\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'cover'",
        "'contain'",
        "'stretch'",
        "'center'",
        "'auto'",
        "'resize'",
        "'scale'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'memory'",
        "'disk'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'standard'",
        "'satellite'",
        "'hybrid'",
        "string",
        "string",
        "string",
        "\"none\"",
        "\"slide\"",
        "\"fade\"",
        "'portrait'",
        "'portrait-upside-down'",
        "'landscape'",
        "'landscape-left'",
        "'landscape-right'",
        "'none'",
        "'button'",
        "'radiobutton_checked'",
        "'radiobutton_unchecked'",
        "'none'",
        "'button'",
        "'link'",
        "'header'",
        "'search'",
        "'image'",
        "'selected'",
        "'plays'",
        "'key'",
        "'text'",
        "'summary'",
        "'disabled'",
        "'frequentUpdates'",
        "'startsMedia'",
        "'adjustable'",
        "'allowsDirectInteraction'",
        "'pageTurn'",
        "string",
        "string",
        "'RippleAndroid'",
        "'ThemeAttrAndroid'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"bookmarks\"",
        "\"contacts\"",
        "\"downloads\"",
        "\"favorites\"",
        "\"featured\"",
        "\"history\"",
        "\"more\"",
        "\"most-recent\"",
        "\"most-viewed\"",
        "\"recents\"",
        "\"search\"",
        "\"top-rated\"",
        "string",
        "string",
        "'fill'",
        "'center'",
        "'auto'",
        "string",
        "string",
        "'ios'",
        "'android'",
        "string",
        "\"window\"",
        "\"screen\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"visible\"",
        "\"hidden\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"solid\"",
        "\"dotted\"",
        "\"dashed\"",
        "\"visible\"",
        "\"hidden\"",
        "string",
        "\"fast\"",
        "\"normal\"",
        "\"default\"",
        "\"black\"",
        "\"white\"",
        "\"start\"",
        "\"center\"",
        "\"end\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"default\"",
        "\"cancel\"",
        "\"destructive\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"default\"",
        "\"cancel\"",
        "\"destructive\"",
        "\"default\"",
        "\"plain-text\"",
        "\"secure-text\"",
        "\"login-password\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"change\"",
        "\"memoryWarning\"",
        "\"active\"",
        "\"background\"",
        "\"inactive\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"hardwareBackPress\"",
        "string",
        "string",
        "string",
        "\"Album\"",
        "\"All\"",
        "\"Event\"",
        "\"Faces\"",
        "\"Library\"",
        "\"PhotoStream\"",
        "\"SavedPhotos\"",
        "\"All\"",
        "\"Videos\"",
        "\"Photos\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'photo'",
        "'video'",
        "string",
        "string",
        "'photo'",
        "'video'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"none\"",
        "\"wifi\"",
        "\"cell\"",
        "\"unknown\"",
        "\"NONE\"",
        "\"MOBILE\"",
        "\"WIFI\"",
        "\"MOBILE_MMS\"",
        "\"MOBILE_SUPL\"",
        "\"MOBILE_DUN\"",
        "\"MOBILE_HIPRI\"",
        "\"WIMAX\"",
        "\"BLUETOOTH\"",
        "\"DUMMY\"",
        "\"ETHERNET\"",
        "\"MOBILE_FOTA\"",
        "\"MOBILE_IMS\"",
        "\"MOBILE_CBS\"",
        "\"WIFI_P2P\"",
        "\"MOBILE_IA\"",
        "\"MOBILE_EMERGENCY\"",
        "\"PROXY\"",
        "\"VPN\"",
        "\"UNKNOWN\"",
        "string",
        "string",
        "\"android.permission.READ_CALENDAR\"",
        "\"android.permission.WRITE_CALENDAR\"",
        "\"android.permission.CAMERA\"",
        "\"android.permission.READ_CONTACTS\"",
        "\"android.permission.WRITE_CONTACTS\"",
        "\"android.permission.GET_ACCOUNTS\"",
        "\"android.permission.ACCESS_FINE_LOCATION\"",
        "\"android.permission.ACCESS_COARSE_LOCATION\"",
        "\"android.permission.RECORD_AUDIO\"",
        "\"android.permission.READ_PHONE_STATE\"",
        "\"android.permission.CALL_PHONE\"",
        "\"android.permission.READ_CALL_LOG\"",
        "\"android.permission.WRITE_CALL_LOG\"",
        "\"com.android.voicemail.permission.ADD_VOICEMAIL\"",
        "\"android.permission.USE_SIP\"",
        "\"android.permission.PROCESS_OUTGOING_CALLS\"",
        "\"android.permission.BODY_SENSORS\"",
        "\"android.permission.SEND_SMS\"",
        "\"android.permission.RECEIVE_SMS\"",
        "\"android.permission.READ_SMS\"",
        "\"android.permission.RECEIVE_WAP_PUSH\"",
        "\"android.permission.RECEIVE_MMS\"",
        "\"android.permission.READ_EXTERNAL_STORAGE\"",
        "\"android.permission.WRITE_EXTERNAL_STORAGE\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"notification\"",
        "\"localNotification\"",
        "\"register\"",
        "\"registrationError\"",
        "string",
        "string",
        "string",
        "\"default\"",
        "\"light-content\"",
        "\"none\"",
        "\"fade\"",
        "\"slide\"",
        "\"fade\"",
        "\"slide\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'window'",
        "'png'",
        "'jpeg'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'extend'",
        "'identity'",
        "'clamp'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'horizontal'",
        "'vertical'",
        "'horizontal'",
        "'vertical'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'contain'",
        "'cover'",
        "'stretch'",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "NavigationBar",
        "BreadcrumbNavigationBar",
        "hairlineWidth",
        "absoluteFill",
        "absoluteFillObject",
        "timing",
        "View",
        "Image",
        "Text",
        "fetch",
        "ActivityIndicator",
        "ActivityIndicatorIOS",
        "DatePickerIOS",
        "DrawerLayoutAndroid",
        "Image",
        "ImagePickerIOS",
        "LayoutAnimation",
        "ListView",
        "MapView",
        "Modal",
        "Navigator",
        "NavigatorIOS",
        "Picker",
        "PickerIOS",
        "ProgressBarAndroid",
        "ProgressViewIOS",
        "RefreshControl",
        "RecyclerViewBackedScrollView",
        "SegmentedControlIOS",
        "Slider",
        "SliderIOS",
        "StatusBar",
        "ScrollView",
        "SnapshotViewIOS",
        "Systrace",
        "SwipeableListView",
        "Switch",
        "SwitchIOS",
        "TabBarIOS",
        "Text",
        "TextInput",
        "ToolbarAndroid",
        "TouchableHighlight",
        "TouchableNativeFeedback",
        "TouchableOpacity",
        "TouchableWithoutFeedback",
        "View",
        "ViewPagerAndroid",
        "WebView",
        "ActionSheetIOS",
        "Share",
        "AdSupportIOS",
        "Alert",
        "AlertAndroid",
        "AlertIOS",
        "AppState",
        "AppStateIOS",
        "AsyncStorage",
        "BackAndroid",
        "Button",
        "CameraRoll",
        "Clipboard",
        "DatePickerAndroid",
        "Geolocation",
        "I18nManager",
        "ImageEditor",
        "ImageStore",
        "InteractionManager",
        "IntentAndroid",
        "Keyboard",
        "KeyboardAvoidingView",
        "Linking",
        "LinkingIOS",
        "NativeMethodsMixin",
        "NativeComponent",
        "NetInfo",
        "PanResponder",
        "PermissionsAndroid",
        "PushNotificationIOS",
        "Settings",
        "StatusBarIOS",
        "TimePickerAndroid",
        "ToastAndroid",
        "UIManager",
        "VibrationIOS",
        "Vibration",
        "Dimensions",
        "ShadowPropTypesIOS",
        "NavigationExperimental",
        "Easing",
        "DeviceEventEmitter",
        "NativeEventEmitter",
        "NativeAppEventEmitter",
        "NativeModules",
        "Platform",
        "PixelRatio",
        "TestModule",
        "ColorPropType",
        "EdgeInsetsPropType",
        "PointPropType",
        "__DEV__"
    ],
    "comments": [
        "Forked for react-native-web",
        "",
        "Type definitions for react-native 0.37",
        "Project: https://github.com/facebook/react-native",
        "Definitions by: Needs A Maintainer <https://github.com/DefinitelyTyped>",
        "Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped",
        "",
        "",
        "USING: these definitions are meant to be used with the TSC compiler target set to ES6",
        "",
        "USAGE EXAMPLES: check the RNTSExplorer project at https://github.com/bgrieder/RNTSExplorer",
        "",
        "CONTRIBUTING: please open pull requests",
        "",
        "CREDITS: This work is based on an original work made by Bernd Paradies: https://github.com/bparadie",
        "",
        "",
        "react-native \"extends\" react",
        "not in lib.es6.d.ts but called by react-native",
        "@see lib.es6.d.ts",
        "NativeMethodsMixin provides methods to access the underlying native component directly.\n   * This can be useful in cases when you want to focus a view or measure its on-screen dimensions,\n   * for example.\n   * The methods described here are available on most of the default components provided by React Native.\n   * Note, however, that they are not available on composite components that aren't directly backed by a\n   * native view. This will generally include most components that you define in your own app.\n   * For more information, see [Direct Manipulation](http://facebook.github.io/react-native/docs/direct-manipulation.html).\n   * @see https://github.com/facebook/react-native/blob/master/Libraries/ReactIOS/NativeMethodsMixin.js",
        "currently unused",
        "see react-jsx.d.ts",
        "Similar to React.SyntheticEvent except for nativeEvent",
        "https://github.com/facebook/react-native/blob/master/Libraries/AppRegistry/AppRegistry.js",
        "LayoutAnimationTypes",
        "LayoutAnimationProperties",
        "Automatically animates views to their new positions when the next layout happens.\n   * A common way to use this API is to call LayoutAnimation.configureNext before\n   * calling setState.",
        "Schedules an animation to happen on the next layout.\n     * @param config Specifies animation properties:\n     * `duration` in milliseconds\n     * `create`, config for animating in new views (see Anim type)\n     * `update`, config for animating views that have been updated (see Anim type)\n     * @param onAnimationDidEnd Called when the animation finished. Only supported on iOS.",
        "Helper for creating a config for configureNext.",
        "@see TextProperties.onLayout",
        "@see https://facebook.github.io/react-native/docs/text.html#style",
        "https://facebook.github.io/react-native/docs/text.html#props",
        "@see https://facebook.github.io/react-native/docs/view.html#style",
        "Deprecated: Use the `source` prop instead.",
        "Undocumented",
        "Only `animated` is documented. The JS code says `animated` is",
        "deprecated and `animationType` is preferred.",
        "These methods are undocumented but still being used by TouchableMixin internals",
        "If the gesture can end and restart during one continuous touch",
        "How far the swipe must drag to start transitioning",
        "Amplitude of release velocity that is considered still",
        "Fraction of directional move required.",
        "Velocity to transition with when the gesture release was \"not moving\"",
        "Region that can trigger swipe. iOS default is 30px from the left edge",
        "Ratio of gesture completion when non-velocity release will cause action",
        "see /NavigatorSceneConfigs.js",
        "A list of all gestures that are enabled on this scene",
        "Rebound spring parameters when transitioning FROM this scene",
        "Velocity to start at when transitioning without gesture",
        "Animation interpolators for horizontal transitioning:",
        "see /NavigatorSceneConfigs.js",
        "anything else",
        "Commonly found properties",
        "@see NavigationBarStyle.ios.js",
        "Animating *into* the center stage from the right",
        "Animating out of the center stage, to the left",
        "Both stages (animating *past* the center stage)",
        "TODO &see NavigatorBreadcrumbNavigationBar.js",
        "in samples...",
        "@see https://github.com/facebook/react-native/blob/0.34-stable\\Libraries\\StyleSheet\\StyleSheetTypes.js",
        "This is not called by default due to perf overhead but it's useful\n        if you want to find traces which spend too much time in JSON.",
        "Returns the device pixel density. Some examples:\n         PixelRatio.get() === 1\n         mdpi Android devices (160 dpi)\n         PixelRatio.get() === 1.5\n         hdpi Android devices (240 dpi)\n         PixelRatio.get() === 2\n         iPhone 4, 4S\n         iPhone 5, 5c, 5s\n         iPhone 6\n         xhdpi Android devices (320 dpi)\n         PixelRatio.get() === 3\n         iPhone 6 plus\n         xxhdpi Android devices (480 dpi)\n         PixelRatio.get() === 3.5\n         Nexus 6",
        "Returns the scaling factor for font sizes. This is the ratio that is\n      used to calculate the absolute font size, so any elements that\n       heavily depend on that should use this to do calculations.\n\n     If a font scale is not set, this returns the device pixel ratio.\n\n     Currently this is only implemented on Android and reflects the user\n      preference set in Settings > Display > Font size,\n       on iOS it will always return the default pixel ratio.",
        "Used by Dimensions below",
        "deprecated, put this inside the rect argument instead",
        "true",
        "zeros",
        "zeros",
        "true",
        "null",
        "zeroes",
        "Undocumented",
        "Deprecated, do not use.",
        "A callback when the Snapshot view is ready to be compared",
        "A name to identify the individual instance to the SnapshotView",
        "Deduced from",
        "https://github.com/facebook/react-native/commit/052cd7eb8afa7a805ef13e940251be080499919c",
        "Maximum distance to open to after a swipe",
        "Callback method to render the swipeable view",
        "Callback method to render the view that will be unveiled on swipe",
        "",
        "",
        "A P I s",
        "",
        "",
        "The activities to exclude from the ActionSheet.\n     * For example: ['com.apple.UIKit.activity.PostToTwitter']",
        "@platform android",
        "'Album','All','Event','Faces','Library','PhotoStream','SavedPhotos'",
        "\"All\", \"Videos\", \"Photos\"",
        "Clipboard gives you an interface for setting and getting content from Clipboard on both iOS and Android",
        "Deduced from DatePickerAndroid.android.js",
        "\"dateSetAction\" | \"dismissedAction\"",
        "Opens the standard Android date picker dialog.\n\n     The available keys for the options object are:\n     * date (Date object or timestamp in milliseconds) - date to show by default\n     * minDate (Date object or timestamp in milliseconds) - minimum date that can be selected\n     * maxDate (Date object or timestamp in milliseconds) - maximum date that can be selected\n\n     Returns a Promise which will be invoked an object containing action, year, month (0-11), day if the user picked a date. If the user dismissed the dialog, the Promise will still be resolved with action being DatePickerAndroid.dismissedAction and all the other keys being undefined. Always check whether the action before reading the values.\n\n     Note the native date picker dialog has some UI glitches on Android 4 and lower when using the minDate and maxDate options.",
        "This is from code, a few items more than documentation@0.25",
        "All `gestureState` accounts for timeStamps up until:",
        "`gravity` may be ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER",
        "Toast duration constants",
        "Toast gravity constants",
        "Most (all?) functions where AnimatedValue is used any subclass of Animated can be used as well.",
        "Internal class, no public API.",
        "Internal class, no public API.",
        "If one is stopped, stop all.  default: true",
        "Defaults to false",
        "Defaults to true",
        "Defaults to false",
        "[imageURL|tempImageTag, height, width]",
        "Network Polyfill",
        "TODO: Add proper support for fetch",
        "Timers polyfill",
        "Object Instances",
        "Value  & Structs.",
        "Similar to `NavigationTransitionProps`, except that the prop `scene`",
        "represents the scene for the renderer to render.",
        "helpers",
        "Bundled propTypes.",
        "propTypes",
        "TODO: fix this",
        "The layout of the transitioner of the scenes.",
        "The navigation state of the transitioner.",
        "The progressive index of the transitioner's navigation state.",
        "The value that represents the progress of the transition when navigation",
        "state changes from one to another. Its numberic value will range from 0",
        "to 1.",
        "progress.__getAnimatedValue() < 1 : transtion is happening.",
        "progress.__getAnimatedValue() == 1 : transtion completes.",
        "All the scenes of the transitioner.",
        "The active scene, corresponding to the route at",
        "`navigationState.routes[navigationState.index]`.",
        "The gesture distance for `horizontal` and `vertical` transitions",
        "An easing function from `Easing`.",
        "A timing function such as `Animated.timing`.",
        "Core",
        "Views",
        "AnimatedView: NavigationAnimatedViewStatic;",
        "CustomComponents:",
        "",
        "Interfacing with Native Modules",
        "https://facebook.github.io/react-native/docs/native-modules-ios.html",
        "",
        "",
        "",
        "R E - E X P O R T S",
        "",
        "",
        "TODO: The following components need to be added",
        "- [ ] ART",
        "APIS //////////////",
        "http://facebook.github.io/react-native/blog/2016/08/19/right-to-left-support-for-react-native-apps.html",
        "Plugins //////////////",
        "",
        "",
        "Additional ( and controversial)",
        "",
        "",
        "",
        "Add-Ons",
        "",
        "FIXME: Documentation ?",
        "",
        "Prop Types",
        "",
        "FIXME: These are also defined by the node types and thus result in duplicate identifiers.",
        "",
        "declare global {",
        "const global: React.GlobalStatic;",
        "function require(name: string): any;",
        "}"
    ],
    "docstrings": [
        "* Represents the completion of an asynchronous operation\n   * @see lib.es6.d.ts",
        "* Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.",
        "* Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.",
        "* A reference to the prototype.",
        "* Creates a new Promise.\n     * @param init A callback used to initialize the promise. This callback is passed two arguments:\n     * a resolve callback used resolve the promise with a value or the result of another promise,\n     * and a reject callback used to reject the promise with a provided reason or error.",
        "* Creates a Promise that is resolved with an array of results when all of the provided Promises\n     * resolve, or rejected when any Promise is rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.",
        "* Creates a Promise that is resolved with an array of results when all of the provided Promises\n     * resolve, or rejected when any Promise is rejected.\n     * @param values An array of values.\n     * @returns A new Promise.",
        "* Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n     * or rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.",
        "* Creates a new rejected promise for the provided reason.\n     * @param reason The reason the promise was rejected.\n     * @returns A new rejected Promise.",
        "* Creates a new rejected promise for the provided reason.\n     * @param reason The reason the promise was rejected.\n     * @returns A new rejected Promise.",
        "* Creates a new resolved promise for the provided value.\n     * @param value A promise.\n     * @returns A promise whose internal state matches the provided promise.",
        "* Creates a new resolved promise .\n     * @returns A resolved promise.",
        "* EventSubscription represents a subscription to a particular event. It can\n   * remove its own subscription.",
        "* @param {EventSubscriptionVendor} subscriber the subscriber that controls\n     *   this subscription.",
        "* Removes this subscription from the subscriber that controls it.",
        "* EventSubscriptionVendor stores a set of EventSubscriptions that are\n   * subscribed to a particular event type.",
        "* Adds a subscription keyed by an event type.\n     *\n     * @param {string} eventType\n     * @param {EventSubscription} subscription",
        "* Removes a bulk set of the subscriptions.\n     *\n     * @param {?string} eventType - Optional name of the event type whose\n     *   registered supscriptions to remove, if null remove all subscriptions.",
        "* Removes a specific subscription. Instead of calling this function, call\n     * `subscription.remove()` directly.\n     *\n     * @param {object} subscription",
        "* Returns the array of subscriptions that are currently registered for the\n     * given event type.\n     *\n     * Note: This array can be potentially sparse as subscriptions are deleted\n     * from it when they are removed.\n     *\n     * @param {string} eventType\n     * @returns {?array}",
        "* EmitterSubscription represents a subscription with listener and context data.",
        "* @param {EventEmitter} emitter - The event emitter that registered this\n     *   subscription\n     * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n     *   this subscription\n     * @param {function} listener - Function to invoke when the specified event is\n     *   emitted\n     * @param {*} context - Optional context object to use when invoking the\n     *   listener",
        "* Removes this subscription from the emitter that registered it.\n     * Note: we're overriding the `remove()` method of EventSubscription here\n     * but deliberately not calling `super.remove()` as the responsibility\n     * for removing the subscription lies with the EventEmitter.",
        "* @constructor\n     *\n     * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n     *   to use. If omitted, a new subscriber will be created for the emitter.",
        "* Adds a listener to be invoked when events of the specified type are\n     * emitted. An optional calling context may be provided. The data arguments\n     * emitted will be passed to the listener function.\n     *\n     * @param {string} eventType - Name of the event to listen to\n     * @param {function} listener - Function to invoke when the specified event is\n     *   emitted\n     * @param {*} context - Optional context object to use when invoking the\n     *   listener",
        "* Similar to addListener, except that the listener is removed after it is\n     * invoked once.\n     *\n     * @param {string} eventType - Name of the event to listen to\n     * @param {function} listener - Function to invoke only once when the\n     *   specified event is emitted\n     * @param {*} context - Optional context object to use when invoking the\n     *   listener",
        "* Removes all of the registered listeners, including those registered as\n     * listener maps.\n     *\n     * @param {?string} eventType - Optional name of the event whose registered\n     *   listeners to remove",
        "* Provides an API that can be called during an eventing cycle to remove the\n     * last listener that was invoked. This allows a developer to provide an event\n     * object that can remove the listener (or listener map) during the\n     * invocation.\n     *\n     * If it is called when not inside of an emitting cycle it will throw.\n     *\n     * @throws {Error} When called not during an eventing cycle\n     *\n     * @example\n     *   var subscription = emitter.addListenerMap({\n     *     someEvent: function(data, event) {\n     *       console.log(data);\n     *       emitter.removeCurrentListener();\n     *     }\n     *   });\n     *\n     *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n     *   emitter.emit('someEvent', 'def'); // does not log anything",
        "* Removes a specific subscription. Called by the `remove()` method of the\n     * subscription itself to ensure any necessary cleanup is performed.",
        "* Returns an array of listeners that are currently registered for the given\n     * event.\n     *\n     * @param {string} eventType - Name of the event to query\n     * @returns {array}",
        "* Emits an event of the given type with the given data. All handlers of that\n     * particular type will be notified.\n     *\n     * @param {string} eventType - Name of the event to emit\n     * @param {...*} Arbitrary arguments to be passed to each registered listener\n     *\n     * @example\n     *   emitter.addListener('someEvent', function(message) {\n     *     console.log(message);\n     *   });\n     *\n     *   emitter.emit('someEvent', 'abc'); // logs 'abc'",
        "* Removes the given listener for event of specific type.\n     *\n     * @param {string} eventType - Name of the event to emit\n     * @param {function} listener - Function to invoke when the specified event is\n     *   emitted\n     *\n     * @example\n     *   emitter.removeListener('someEvent', function(message) {\n     *     console.log(message);\n     *   }); // removes the listener if already registered\n     *",
        "* Determines the location on screen, width, and height of the given view and\n     * returns the values via an async callback. If successful, the callback will\n     * be called with the following arguments:\n     *\n     *  - x\n     *  - y\n     *  - width\n     *  - height\n     *  - pageX\n     *  - pageY\n     *\n     * Note that these measurements are not available until after the rendering\n     * has been completed in native. If you need the measurements as soon as\n     * possible, consider using the [`onLayout`\n     * prop](docs/view.html#onlayout) instead.",
        "* Determines the location of the given view in the window and returns the\n     * values via an async callback. If the React root view is embedded in\n     * another native view, this will give you the absolute coordinates. If\n     * successful, the callback will be called with the following\n     * arguments:\n     *\n     *  - x\n     *  - y\n     *  - width\n     *  - height\n     *\n     * Note that these measurements are not available until after the rendering\n     * has been completed in native.",
        "* Like [`measure()`](#measure), but measures the view relative an ancestor,\n     * specified as `relativeToNativeNode`. This means that the returned x, y\n     * are relative to the origin x, y of the ancestor view.\n     *\n     * As always, to obtain a native node handle for a component, you can use\n     * `React.findNodeHandle(component)`.",
        "* This function sends props straight to native. They will not participate in\n     * future diff process - this means that if you do not include them in the\n     * next render, they will remain active (see [Direct\n     * Manipulation](docs/direct-manipulation.html)).",
        "* Requests focus for the given input or view. The exact behavior triggered\n     * will depend on the platform and type of view.",
        "* Removes focus from an input or view. This is the opposite of `focus()`.",
        "* Array of all touch events that have changed since the last event",
        "* The ID of the touch",
        "* The X position of the touch, relative to the element",
        "* The Y position of the touch, relative to the element",
        "* The X position of the touch, relative to the screen",
        "* The Y position of the touch, relative to the screen",
        "* The node id of the element receiving the touch event",
        "* A time identifier for the touch, useful for velocity calculation",
        "* Array of all current touches on the screen",
        "* //FIXME: need to find documentation on which component is a TTouchable and can implement that interface\n   * @see React.DOMAtributes",
        "* `AppRegistry` is the JS entry point to running all React Native apps.  App\n   * root components should register themselves with\n   * `AppRegistry.registerComponent`, then the native system can load the bundle\n   * for the app and then actually run the app when it's ready by invoking\n   * `AppRegistry.runApplication`.\n   *\n   * To \"stop\" an application when a view should be destroyed, call\n   * `AppRegistry.unmountApplicationComponentAtRootTag` with the tag that was\n   * pass into `runApplication`. These should always be used as a pair.\n   *\n   * `AppRegistry` should be `require`d early in the `require` sequence to make\n   * sure the JS execution environment is setup before other modules are\n   * `require`d.",
        "* Flex Prop Types\n   * @see https://facebook.github.io/react-native/docs/flexbox.html#proptypes\n   * @see LayoutPropTypes.js",
        "* @platform ios",
        "* @see ShadowPropTypesIOS.js",
        "* Sets the drop shadow color\n     * @platform ios",
        "* Sets the drop shadow offset\n     * @platform ios",
        "* Sets the drop shadow opacity (multiplied by the color's alpha component)\n     * @platform ios",
        "* Sets the drop shadow blur radius\n     * @platform ios",
        "* Specifies font weight. The values 'normal' and 'bold' are supported\n     * for most fonts. Not all fonts have a variant for each of the numeric\n     * values, in that case the closest one is chosen.",
        "* Specifies text alignment.\n     * The value 'justify' is only supported on iOS.",
        "* Specifies whether fonts should scale to respect Text Size accessibility setting on iOS. The\n     * default is `true`.",
        "* Specifies whether font should be scaled down automatically to fit given style constraints.",
        "* Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).",
        "* When `true`, no visual change is made when text is pressed down. By\n     * default, a gray oval highlights the text on press down.",
        "* Lets the user select text, to use the native copy and paste functionality.",
        "* When set to `true`, indicates that the view is an accessibility element. The default value\n     * for a `Text` element is `true`.\n     *\n     * See the\n     * [Accessibility guide](/react-native/docs/accessibility.html#accessible-ios-android)\n     * for more information.",
        "* This can be one of the following values:\n     *\n     * - `head` - The line is displayed so that the end fits in the container and the missing text\n     * at the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n     * - `middle` - The line is displayed so that the beginning and end fit in the container and the\n     * missing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n     * - `tail` - The line is displayed so that the beginning fits in the container and the\n     * missing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n     * - `clip` - Lines are not drawn past the edge of the text container.\n     *\n     * The default is `tail`.\n     *\n     * `numberOfLines` must be set in conjunction with this prop.\n     *\n     * > `clip` is working only for iOS",
        "* Line Break mode. Works only with numberOfLines.\n     * clip is working only for iOS",
        "* Used to truncate the text with an ellipsis after computing the text\n     * layout, including line wrapping, such that the total number of lines\n     * does not exceed this number.\n     *\n     * This prop is commonly used with `ellipsizeMode`.",
        "* Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.",
        "* This function is called on press.\n     * Text intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).",
        "* This function is called on long press.\n     * e.g., `onLongPress={this.increaseSize}>``",
        "* @see https://facebook.github.io/react-native/docs/text.html#style",
        "* Used to locate this view in end-to-end tests.",
        "* A React component for displaying text which supports nesting, styling, and touch handling.",
        "* DocumentSelectionState is responsible for maintaining selection information\n   * for a document.\n   *\n   * It is intended for use by AbstractTextEditor-based components for\n   * identifying the appropriate start/end positions to modify the\n   * DocumentContent, and for programatically setting browser selection when\n   * components re-render.",
        "* Apply an update to the state. If either offset value has changed,\n     * set the values and emit the `change` event. Otherwise no-op.\n     *\n     * @param {number} anchor\n     * @param {number} focus",
        "* Given a max text length, constrain our selection offsets to ensure\n     * that the selection remains strictly within the text range.\n     *\n     * @param {number} maxLength",
        "* IOS Specific properties for TextInput\n   * @see https://facebook.github.io/react-native/docs/textinput.html#props",
        "* enum('never', 'while-editing', 'unless-editing', 'always')\n     * When the clear button should appear on the right side of the text view",
        "* If true, clears the text field automatically when editing begins",
        "* Determines the types of data converted to clickable URLs in the text input.\n     * Only valid if `multiline={true}` and `editable={false}`.\n     * By default no data types are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`",
        "* If true, the keyboard disables the return key when there is no text and automatically enables it when there is text.\n     * The default value is false.",
        "* Determines the color of the keyboard.",
        "* Callback that is called when a key is pressed.\n     * Pressed key value is passed as an argument to the callback handler.\n     * Fires before onChange callbacks.",
        "* See DocumentSelectionState.js, some state that is responsible for maintaining selection information for a document",
        "* Android Specific properties for TextInput\n   * @see https://facebook.github.io/react-native/docs/textinput.html#props",
        "* If defined, the provided image resource will be rendered on the left.",
        "* Padding between the inline image, if any, and the text input itself.",
        "* Sets the number of lines for a TextInput.\n     * Use it with multiline set to true to be able to fill the lines.",
        "* Sets the return key to the label. Use it instead of `returnKeyType`.\n     * @platform android",
        "* The color of the textInput underline.",
        "* @see https://facebook.github.io/react-native/docs/textinput.html#props",
        "* Can tell TextInput to automatically capitalize certain characters.\n     *      characters: all characters,\n     *      words: first letter of each word\n     *      sentences: first letter of each sentence (default)\n     *      none: don't auto capitalize anything\n     *\n     * https://facebook.github.io/react-native/docs/textinput.html#autocapitalize",
        "* If false, disables auto-correct.\n     * The default value is true.",
        "* If true, focuses the input on componentDidMount.\n     * The default value is false.",
        "* If true, the text field will blur when submitted.\n     * The default value is true.",
        "* Provides an initial value that will change when the user starts typing.\n     * Useful for simple use-cases where you don't want to deal with listening to events\n     * and updating the value prop to keep the controlled state in sync.",
        "* If false, text is not editable. The default value is true.",
        "* enum(\"default\", 'numeric', 'email-address', \"ascii-capable\", 'numbers-and-punctuation', 'url', 'number-pad', 'phone-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search')\n     * Determines which keyboard to open, e.g.numeric.\n     * The following values work across platforms: - default - numeric - email-address - phone-pad",
        "* Limits the maximum number of characters that can be entered.\n     * Use this instead of implementing the logic in JS to avoid flicker.",
        "* If true, the text input can be multiple lines. The default value is false.",
        "* Callback that is called when the text input is blurred",
        "* Callback that is called when the text input's text changes.",
        "* Callback that is called when the text input's text changes.\n     * Changed text is passed as an argument to the callback handler.",
        "* Callback that is called when the text input's content size changes.\n     * This will be called with\n     * `{ nativeEvent: { contentSize: { width, height } } }`.\n     *\n     * Only called for multiline text inputs.",
        "* Callback that is called when text input ends.",
        "* Callback that is called when the text input is focused",
        "* Callback that is called when the text input selection is changed.",
        "* Callback that is called when the text input's submit button is pressed.",
        "* The string that will be rendered before text input has been entered",
        "* The text color of the placeholder string",
        "* enum('default', 'go', 'google', 'join', 'next', 'route', 'search', 'send', 'yahoo', 'done', 'emergency-call')\n     * Determines how the return key should look.",
        "* If true, the text input obscures the text entered so that sensitive text like passwords stay secure.\n     * The default value is false.",
        "* If true, all text will automatically be selected on focus",
        "* The start and end of the text input's selection. Set start and end to\n     * the same value to position the cursor.",
        "* The highlight (and cursor on ios) color of the text input",
        "* Styles",
        "* Used to locate this view in end-to-end tests",
        "* The value to show for the text input. TextInput is a controlled component,\n     * which means the native value will be forced to match this value prop if provided.\n     * For most uses this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same.\n     * In addition to simply setting the same value, either set editable={false},\n     * or set/update maxLength to prevent unwanted edits without flicker.",
        "* This class is responsible for coordinating the \"focused\"\n   * state for TextInputs. All calls relating to the keyboard\n   * should be funneled through here",
        "* Returns the ID of the currently focused text field, if one exists\n     * If no text field is focused it returns null",
        "* @param {number} TextInputID id of the text field to focus\n     * Focuses the specified text field\n     * noop if the text field was already focused",
        "* @param {number} textFieldID id of the text field to focus\n     * Unfocuses the specified text field\n     * noop if it wasn't focused",
        "* @see https://facebook.github.io/react-native/docs/textinput.html#methods",
        "* Returns if the input is currently focused.",
        "* Removes all text from the input.",
        "*  title: required, the title of this action",
        "* icon: the icon for this action, e.g. require('./some_icon.png')",
        "* show: when to show this action as an icon or hide it in the overflow menu: always, ifRoom or never",
        "* showWithText: boolean, whether to show text alongside the icon or not",
        "* Sets possible actions on the toolbar as part of the action menu. These are displayed as icons\n     * or text on the right side of the widget. If they don't fit they are placed in an 'overflow'\n     * menu.\n     *\n     * This property takes an array of objects, where each object has the following keys:\n     *\n     * * `title`: **required**, the title of this action\n     * * `icon`: the icon for this action, e.g. `require('./some_icon.png')`\n     * * `show`: when to show this action as an icon or hide it in the overflow menu: `always`,\n     * `ifRoom` or `never`\n     * * `showWithText`: boolean, whether to show text alongside the icon or not",
        "* Sets the content inset for the toolbar ending edge.\n     * The content inset affects the valid area for Toolbar content other\n     * than the navigation button and menu. Insets define the minimum\n     * margin for these components and can be used to effectively align\n     * Toolbar content along well-known gridlines.",
        "* Sets the content inset for the toolbar starting edge.\n     * The content inset affects the valid area for Toolbar content\n     * other than the navigation button and menu. Insets define the\n     * minimum margin for these components and can be used to effectively\n     * align Toolbar content along well-known gridlines.",
        "* Sets the toolbar logo.",
        "* Sets the navigation icon.",
        "* Callback that is called when an action is selected. The only\n     * argument that is passed to the callback is the position of the\n     * action in the actions array.",
        "* Callback called when the icon is selected.",
        "* Sets the overflow icon.",
        "* Used to set the toolbar direction to RTL.\n     * In addition to this property you need to add\n     * android:supportsRtl=\"true\"\n     * to your application AndroidManifest.xml and then call\n     * setLayoutDirection(LayoutDirection.RTL) in your MainActivity\n     * onCreate method.",
        "* Sets the toolbar subtitle.",
        "* Sets the toolbar subtitle color.",
        "* Used to locate this view in end-to-end tests.",
        "* Sets the toolbar title.",
        "* Sets the toolbar title color.",
        "* React component that wraps the Android-only [`Toolbar` widget][0]. A Toolbar can display a logo,\n   * navigation icon (e.g. hamburger menu), a title & subtitle and a list of actions. The title and\n   * subtitle are expanded so the logo and navigation icons are displayed on the left, title and\n   * subtitle in the middle and the actions on the right.\n   *\n   * If the toolbar has an only child, it will be displayed between the title and actions.\n   *\n   * Although the Toolbar supports remote images for the logo, navigation and action icons, this\n   * should only be used in DEV mode where `require('./some_icon.png')` translates into a packager\n   * URL. In release mode you should always use a drawable resource for these icons. Using\n   * `require('./some_icon.png')` will do this automatically for you, so as long as you don't\n   * explicitly use e.g. `{uri: 'http://...'}`, you will be good.\n   *\n   * [0]: https://developer.android.com/reference/android/support/v7/widget/Toolbar.html",
        "* Gesture recognition on mobile devices is much more complicated than web.\n   * A touch can go through several phases as the app determines what the user's intention is.\n   * For example, the app needs to determine if the touch is scrolling, sliding on a widget, or tapping.\n   * This can even change during the duration of a touch. There can also be multiple simultaneous touches.\n   *\n   * The touch responder system is needed to allow components to negotiate these touch interactions\n   * without any additional knowledge about their parent or child components.\n   * This system is implemented in ResponderEventPlugin.js, which contains further details and documentation.\n   *\n   * Best Practices\n   * Users can feel huge differences in the usability of web apps vs. native, and this is one of the big causes.\n   * Every action should have the following attributes:\n   *      Feedback/highlighting- show the user what is handling their touch, and what will happen when they release the gesture\n   *      Cancel-ability- when making an action, the user should be able to abort it mid-touch by dragging their finger away\n   *\n   * These features make users more comfortable while using an app,\n   * because it allows people to experiment and interact without fear of making mistakes.\n   *\n   * TouchableHighlight and Touchable*\n   * The responder system can be complicated to use.\n   * So we have provided an abstract Touchable implementation for things that should be \"tappable\".\n   * This uses the responder system and allows you to easily configure tap interactions declaratively.\n   * Use TouchableHighlight anywhere where you would use a button or link on web.",
        "* A view can become the touch responder by implementing the correct negotiation methods.\n     * There are two methods to ask the view if it wants to become responder:",
        "* Does this view want to become responder on the start of a touch?",
        "* Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?",
        "* If the View returns true and attempts to become the responder, one of the following will happen:",
        "* The View is now responding for touch events.\n     * This is the time to highlight and show the user what is happening",
        "* Something else is the responder right now and will not release it",
        "* If the view is responding, the following handlers can be called:",
        "* The user is moving their finger",
        "* Fired at the end of the touch, ie \"touchUp\"",
        "*  Something else wants to become responder.\n     *  Should this view release the responder? Returning true allows release",
        "* The responder has been taken from the View.\n     * Might be taken by other views after a call to onResponderTerminationRequest,\n     * or might be taken by the OS without asking (happens with control center/ notification center on iOS)",
        "* onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\n     * where the deepest node is called first.\n     * That means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\n     * This is desirable in most cases, because it makes sure all controls and buttons are usable.\n     *\n     * However, sometimes a parent will want to make sure that it becomes responder.\n     * This can be handled by using the capture phase.\n     * Before the responder system bubbles up from the deepest component,\n     * it will do a capture phase, firing on*ShouldSetResponderCapture.\n     * So if a parent View wants to prevent the child from becoming responder on a touch start,\n     * it should have a onStartShouldSetResponderCapture handler which returns true.",
        "* onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\n     * where the deepest node is called first.\n     * That means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\n     * This is desirable in most cases, because it makes sure all controls and buttons are usable.\n     *\n     * However, sometimes a parent will want to make sure that it becomes responder.\n     * This can be handled by using the capture phase.\n     * Before the responder system bubbles up from the deepest component,\n     * it will do a capture phase, firing on*ShouldSetResponderCapture.\n     * So if a parent View wants to prevent the child from becoming responder on a touch start,\n     * it should have a onStartShouldSetResponderCapture handler which returns true.",
        "* Provides additional traits to screen reader.\n     * By default no traits are provided unless specified otherwise in element\n     *\n     * @enum('none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text','summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn')",
        "* Whether this view should be rendered as a bitmap before compositing.\n     *\n     * On iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\n     * for example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\n     * and quickly composite it during each frame.\n     *\n     * Rasterization incurs an off-screen drawing pass and the bitmap consumes memory.\n     * Test and measure when using this property.",
        "* Indicates to accessibility services to treat UI component like a native one.\n     * Works for Android only.\n     *\n     * @enum('none', 'button', 'radiobutton_checked', 'radiobutton_unchecked' )",
        "* Indicates to accessibility services whether the user should be notified when this view changes.\n     * Works for Android API >= 19 only.\n     * See http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
        "* Views that are only used to layout their children or otherwise don't draw anything\n     * may be automatically removed from the native hierarchy as an optimization.\n     * Set this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.",
        "* Controls how view is important for accessibility which is if it fires accessibility events\n     * and if it is reported to accessibility services that query the screen.\n     * Works for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n     *\n     * Possible values:\n     *      'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     *      'yes' - The view is important for accessibility.\n     *      'no' - The view is not important for accessibility.\n     *      'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.",
        "* Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\n     * The default (false) falls back to drawing the component and its children\n     * with an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\n     * This default may be noticeable and undesired in the case where the View you are setting an opacity on\n     * has multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n     *\n     * Rendering offscreen to preserve correct alpha behavior is extremely expensive\n     * and hard to debug for non-native developers, which is why it is not turned on by default.\n     * If you do need to enable this property for an animation,\n     * consider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\n     * If that property is enabled, this View will be rendered off-screen once,\n     * saved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.",
        "* Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n     *\n     * On Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\n     * in those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\n     * re-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.",
        "* @see https://facebook.github.io/react-native/docs/view.html#props",
        "* Overrides the text that's read by the screen reader when the user interacts with the element. By default, the label is constructed by traversing all the children and accumulating all the Text nodes separated by space.",
        "* When true, indicates that the view is an accessibility element.\n     * By default, all the touchable elements are accessible.",
        "* This defines how far a touch event can start away from the view.\n    * Typical interface guidelines recommend touch targets that are at least\n    * 30 - 40 points/density-independent pixels. If a Touchable view has\n    * a height of 20 the touchable height can be extended to 40 with\n    * hitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\n    * NOTE The touch area never extends past the parent view bounds and\n    * the Z-index of sibling views always takes precedence if a touch\n    * hits two overlapping views.",
        "* When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
        "* Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.",
        "* When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
        "*\n     * In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n     *\n     * .box-none {\n     *   pointer-events: none;\n     * }\n     * .box-none * {\n     *   pointer-events: all;\n     * }\n     *\n     * box-only is the equivalent of\n     *\n     * .box-only {\n     *   pointer-events: all;\n     * }\n     * .box-only * {\n     *   pointer-events: none;\n     * }\n     *\n     * But since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\n     * we opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.",
        "*\n     * This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\n     * most of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\n     * The subviews must also have overflow: hidden, as should the containing view (or one of its superviews).",
        "* Used to locate this view in end-to-end tests.",
        "* The most fundamental component for building UI, View is a container that supports layout with flexbox, style, some touch handling,\n   * and accessibility controls, and is designed to be nested inside other views and to have 0 to many children of any type.\n   * View maps directly to the native view equivalent on whatever platform React is running on,\n   * whether that is a UIView, <div>, android.view, etc.",
        "* Is 3D Touch / Force Touch available (i.e. will touch events include `force`)\n     * @platform ios",
        "* @see https://facebook.github.io/react-native/docs/viewpagerandroid.html#props",
        "* Index of initial page that should be selected. Use `setPage` method to\n     * update the page, and `onPageSelected` to monitor page changes",
        "* When false, the content does not scroll.\n     * The default value is true.",
        "* Executed when transitioning between pages (ether because of animation for\n     * the requested page change or when user is swiping/dragging between pages)\n     * The `event.nativeEvent` object for this callback will carry following data:\n     *  - position - index of first page from the left that is currently visible\n     *  - offset - value from range [0,1) describing stage between page transitions.\n     *    Value x means that (1 - x) fraction of the page at \"position\" index is\n     *    visible, and x fraction of the next page is visible.",
        "* This callback will be called once ViewPager finish navigating to selected page\n     * (when user swipes between pages). The `event.nativeEvent` object passed to this\n     * callback will have following fields:\n     *  - position - index of page that has been selected",
        "* Function called when the page scrolling state has changed.\n     * The page scrolling state can be in 3 states:\n     * - idle, meaning there is no interaction with the page scroller happening at the time\n     * - dragging, meaning there is currently an interaction with the page scroller\n     * - settling, meaning that there was an interaction with the page scroller, and the\n     *   page scroller is now finishing it's closing or opening animation",
        "* Determines whether the keyboard gets dismissed in response to a drag.\n     *   - 'none' (the default), drags do not dismiss the keyboard.\n     *   - 'on-drag', the keyboard is dismissed when a drag begins.",
        "* Blank space to show between pages. This is only visible while scrolling, pages are still\n     * edge-to-edge.",
        "* A helper function to scroll to a specific page in the ViewPager.\n     * The transition between pages will be animated.",
        "* A helper function to scroll to a specific page in the ViewPager.\n     * The transition between pages will *not* be animated.",
        "* It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard.\n   * It can automatically adjust either its position or bottom padding based on the position of the keyboard.",
        "* The style of the content container(View) when behavior is 'position'.",
        "* This is the distance between the top of the user screen and the react native view,\n     * may be non-zero in some use cases.",
        "* //FIXME: No documentation extracted from code comment on WebView.ios.js",
        "* Passed data from WebView via window.postMessage.",
        "* The data sent from a WebView; can only be a string.",
        "* Used for android only, JS is enabled by default for WebView on iOS",
        "* Used on Android only, controls whether DOM Storage is enabled\n     * or not android",
        "* Determines whether HTML5 videos play inline or use the native\n     * full-screen controller. default value false\n     * NOTE : \"In order * for video to play inline, not only does\n     * this property need to be set to true, but the video element\n     * in the HTML document must also include the webkit-playsinline\n     * attribute.\"",
        "* Boolean value that determines whether the web view bounces\n     * when it reaches the edge of the content. The default value is `true`.\n     * @platform ios",
        "* A floating-point number that determines how quickly the scroll\n     * view decelerates after the user lifts their finger. You may also\n     * use string shortcuts \"normal\" and \"fast\" which match the\n     * underlying iOS settings for UIScrollViewDecelerationRateNormal\n     * and UIScrollViewDecelerationRateFast respectively.\n     * - normal: 0.998 - fast: 0.99 (the default for iOS WebView)",
        "* Allows custom handling of any webview requests by a JS handler.\n     * Return true or false from this method to continue loading the\n     * request.",
        "* Boolean value that determines whether scrolling is enabled in the\n     * `WebView`. The default value is `true`.",
        "* The URI to load in the WebView. Can be a local or remote file.",
        "* The HTTP Method to use. Defaults to GET if not specified.\n     * NOTE: On Android, only GET and POST are supported.",
        "* Additional HTTP headers to send with the request.\n     * NOTE: On Android, this can only be used with GET requests.",
        "* The HTTP body to send with the request. This must be a valid\n     * UTF-8 string, and will be sent exactly as specified, with no\n     * additional encoding (e.g. URL-escaping or base64) applied.\n     * NOTE: On Android, this can only be used with POST requests.",
        "* A static HTML page to display in the WebView.",
        "* The base URL to be used for any relative links in the HTML.",
        "* @see https://facebook.github.io/react-native/docs/webview.html#props",
        "* Controls whether to adjust the content inset for web views that are\n     * placed behind a navigation bar, tab bar, or toolbar. The default value\n     * is `true`.",
        "* The amount by which the web view content is inset from the edges of\n     * the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.",
        "* @deprecated",
        "* Set this to provide JavaScript that will be injected into the web page\n     * when the view loads.",
        "* Invoked when load fails",
        "* Invoked when load finish",
        "* Invoked when load either succeeds or fails",
        "* Invoked on load start",
        "* Invoked when window.postMessage is called from WebView.",
        "* Function that is invoked when the `WebView` loading starts or ends.",
        "* Function that returns a view to show if there's an error.",
        "* Function that returns a loading indicator.",
        "* Boolean value that forces the `WebView` to show the loading view\n     * on the first load.",
        "* Determines whether HTML5 audio & videos require the user to tap\n     * before they can start playing. The default value is false.",
        "* sets whether the webpage scales to fit the view and the user can change the scale",
        "* Go back one page in the webview's history.",
        "* Go forward one page in the webview's history.",
        "* Reloads the current page.",
        "* Stop loading the current page.",
        "* Returns the native webview node.",
        "* @see https://facebook.github.io/react-native/docs/segmentedcontrolios.html\n* @see SegmentedControlIOS.ios.js",
        "* If false the user won't be able to interact with the control. Default value is true.",
        "* If true, then selecting a segment won't persist visually.\n     * The onValueChange callback will still work as expected.",
        "* Callback that is called when the user taps a segment;\n     * passes the event as an argument\n     * @param event",
        "* Callback that is called when the user taps a segment; passes the segment's value as an argument\n     * @param value",
        "* The index in props.values of the segment to be (pre)selected.",
        "* Accent color of the control.",
        "* The labels for the control's segment buttons, in order.",
        "* Use `SegmentedControlIOS` to render a UISegmentedControl iOS.\n   *\n   * #### Programmatically changing selected index\n   *\n   * The selected index can be changed on the fly by assigning the\n   * selectIndex prop to a state variable, then changing that variable.\n   * Note that the state variable would need to be updated as the user\n   * selects a value and changes the index, as shown in the example below.\n   *\n   * ````\n   * <SegmentedControlIOS\n   *   values={['One', 'Two']}\n   *   selectedIndex={this.state.selectedIndex}\n   *   onChange={(event) => {\n   *     this.setState({selectedIndex: event.nativeEvent.selectedSegmentIndex});\n   *   }}\n   * />\n   * ````",
        "* The default background color of the navigation bar.",
        "* NavigatorIOS uses \"route\" objects to identify child views, their props, and navigation bar configuration.\n     * \"push\" and all the other navigation operations expect routes to be like this",
        "* The default wrapper style for components in the navigator.\n     * A common use case is to set the backgroundColor for every page",
        "* Boolean value that indicates whether the interactive pop gesture is\n     * enabled. This is useful for enabling/disabling the back swipe navigation\n     * gesture.\n     *\n     * If this prop is not provided, the default behavior is for the back swipe\n     * gesture to be enabled when the navigation bar is shown and disabled when\n     * the navigation bar is hidden. Once you've provided the\n     * `interactivePopGestureEnabled` prop, you can never restore the default\n     * behavior.",
        "* A Boolean value that indicates whether the navigation bar is hidden",
        "* A Boolean value that indicates whether to hide the 1px hairline shadow",
        "* The color used for buttons in the navigation bar",
        "* The text color of the navigation bar title",
        "* A Boolean value that indicates whether the navigation bar is translucent",
        "* NOT IN THE DOC BUT IN THE EXAMPLES",
        "* A navigator is an object of navigation functions that a view can call.\n   * It is passed as a prop to any component rendered by NavigatorIOS.\n   *\n   * Navigator functions are also available on the NavigatorIOS component:\n   *\n   * @see https://facebook.github.io/react-native/docs/navigatorios.html#navigator",
        "* Navigate forward to a new route",
        "* Go back one page",
        "* Go back N pages at once. When N=1, behavior matches pop()",
        "* Replace the route for the current page and immediately load the view for the new route",
        "* Replace the route/view for the previous page",
        "* Replaces the previous route/view and transitions back to it",
        "* Replaces the top item and popToTop",
        "* Go back to the item for a particular route object",
        "* Go back to the top item",
        "* @see https://facebook.github.io/react-native/docs/activityindicator.html#props",
        "* Whether to show the indicator (true, the default) or hide it (false).",
        "* The foreground color of the spinner (default is gray).",
        "* Whether the indicator should hide when not animating (true by default).",
        "* Size of the indicator.\n     * Small has a height of 20, large has a height of 36.\n     *\n     * enum('small', 'large')",
        "* @see https://facebook.github.io/react-native/docs/activityindicatorios.html#props",
        "* Whether to show the indicator (true, the default) or hide it (false).",
        "* The foreground color of the spinner (default is gray).",
        "* Whether the indicator should hide when not animating (true by default).",
        "* Invoked on mount and layout changes with",
        "* Size of the indicator.\n     * Small has a height of 20, large has a height of 36.\n     *\n     * enum('small', 'large')",
        "* @Deprecated since version 0.28.0",
        "* The currently selected date.",
        "* Maximum date.\n     * Restricts the range of possible date/time values.",
        "* Maximum date.\n     * Restricts the range of possible date/time values.",
        "*  enum(1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30)\n     *  The interval at which minutes can be selected.",
        "*  enum('date', 'time', 'datetime')\n     *  The date picker mode.",
        "* Date change handler.\n     * This is called when the user changes the date or time in the UI.\n     * The first and only argument is a Date object representing the new date and time.",
        "* Timezone offset in minutes.\n     * By default, the date picker will use the device's timezone. With this parameter, it is possible to force a certain timezone offset.\n     * For instance, to show times in Pacific Standard Time, pass -7 * 60.",
        "* @see DrawerLayoutAndroid.android.js",
        "* Specifies the background color of the drawer. The default value\n     * is white. If you want to set the opacity of the drawer, use rgba.\n     * Example:\n     * return (\n     *   <DrawerLayoutAndroid drawerBackgroundColor=\"rgba(0,0,0,0.5)\">\n     *   </DrawerLayoutAndroid>\n     *);",
        "* Specifies the lock mode of the drawer. The drawer can be locked\n     * in 3 states:\n     *\n     * - unlocked (default), meaning that the drawer will respond\n     *   (open/close) to touch gestures.\n     *\n     * - locked-closed, meaning that the drawer will stay closed and not\n     *   respond to gestures.\n     *\n     * - locked-open, meaning that the drawer will stay opened and\n     *   not respond to gestures. The drawer may still be opened and\n     *   closed programmatically (openDrawer/closeDrawer).",
        "* Specifies the side of the screen from which the drawer will slide in.\n     * enum(DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right)",
        "* Specifies the width of the drawer, more precisely the width of the\n     * view that be pulled in from the edge of the window.",
        "* Determines whether the keyboard gets dismissed in response to a drag.\n     * - 'none' (the default), drags do not dismiss the keyboard.\n     * - 'on-drag', the keyboard is dismissed when a drag begins.",
        "* Function called whenever the navigation view has been closed.",
        "* Function called whenever the navigation view has been opened.",
        "* Function called whenever there is an interaction with the navigation view.\n     * @param event",
        "* Function called when the drawer state has changed.\n     * The drawer can be in 3 states:\n     * - idle, meaning there is no interaction with the navigation\n     *   view happening at the time\n     * - dragging, meaning there is currently an interaction with the\n     *   navigation view\n     * - settling, meaning that there was an interaction with the\n     *   navigation view, and the navigation view is now finishing\n     *   it's closing or opening animation\n     * @param event",
        "* The navigation view that will be rendered to the side of the\n     * screen and can be pulled in.",
        "* Make the drawer take the entire screen and draw the background of\n     * the status bar to allow it to open over the status bar. It will\n     * only have an effect on API 21+.",
        "* Opens the drawer.",
        "* Closes the drawer.",
        "* @see PickerIOS.ios.js",
        "* @see PickerIOS.ios.js",
        "* @see Picker.js",
        "* Style to apply to each of the item labels.\n     * @platform ios",
        "* If set to false, the picker will be disabled, i.e. the user will not be able to make a\n     * selection.\n     * @platform android",
        "* On Android, specifies how to display the selection items when the user taps on the picker:\n     *\n     *   - 'dialog': Show a modal dialog. This is the default.\n     *   - 'dropdown': Shows a dropdown anchored to the picker view\n     *\n     * @platform android",
        "* Prompt string for this picker, used on Android in dialog mode as the title of the dialog.\n     * @platform android",
        "* @see https://facebook.github.io/react-native/docs/picker.html\n   * @see Picker.js",
        "* Callback for when an item is selected. This is called with the\n     * following parameters:\n     * - itemValue: the value prop of the item that was selected\n     * - itemPosition: the index of the selected item in this picker\n     * @param itemValue\n     * @param itemPosition",
        "* Value matching value of one of the items.\n     * Can be a string or an integer.",
        "* Used to locate this view in end-to-end tests.",
        "* @see https://facebook.github.io/react-native/docs/picker.html\n   * @see Picker.js",
        "* On Android, display the options in a dialog.",
        "* On Android, display the options in a dropdown (this is the default).",
        "* @see https://facebook.github.io/react-native/docs/pickerios.html\n   * @see PickerIOS.ios.js",
        "* @see https://facebook.github.io/react-native/docs/pickerios.html\n   * @see PickerIOS.ios.js",
        "* @see https://facebook.github.io/react-native/docs/progressbarandroid.html\n   * @see ProgressBarAndroid.android.js",
        "* Style of the ProgressBar. One of:\n         Horizontal\n         Normal (default)\n         Small\n         Large\n         Inverse\n         SmallInverse\n         LargeInverse",
        "* If the progress bar will show indeterminate progress.\n     * Note that this can only be false if styleAttr is Horizontal.",
        "* The progress value (between 0 and 1).",
        "* Color of the progress bar.",
        "* Used to locate this view in end-to-end tests.",
        "* React component that wraps the Android-only `ProgressBar`. This component is used to indicate\n   * that the app is loading or there is some activity in the app.",
        "* @see https://facebook.github.io/react-native/docs/progressviewios.html\n   * @see ProgressViewIOS.ios.js",
        "* The progress bar style.",
        "* The progress value (between 0 and 1).",
        "* The tint color of the progress bar itself.",
        "* The tint color of the progress bar track.",
        "* A stretchable image to display as the progress bar.",
        "* A stretchable image to display behind the progress bar.",
        "* The color of the refresh indicator.",
        "* The title displayed under the refresh indicator.",
        "* Title color.",
        "* The colors (at least one) that will be used to draw the refresh indicator.",
        "* Whether the pull to refresh functionality is enabled.",
        "* The background color of the refresh indicator.",
        "* Size of the refresh indicator, see RefreshControl.SIZE.",
        "* Progress view top offset\n     * @platform android",
        "* Called when the view starts refreshing.",
        "* Whether the view should be indicating an active refresh.",
        "* This component is used inside a ScrollView or ListView to add pull to refresh\n   * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n   * triggers an `onRefresh` event.\n   *\n   * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n   * in the `onRefresh` function otherwise the refresh indicator will stop immediately.",
        "* Wrapper around android native recycler view.\n   *\n   * It simply renders rows passed as children in a separate recycler view cells\n   * similarly to how `ScrollView` is doing it. Thanks to the fact that it uses\n   * native `RecyclerView` though, rows that are out of sight are going to be\n   * automatically detached (similarly on how this would work with\n   * `removeClippedSubviews = true` on a `ScrollView.js`).\n   *\n   * CAUTION: This is an experimental component and should only be used together\n   * with javascript implementation of list view (see ListView.js). In order to\n   * use it pass this component as `renderScrollComponent` to the list view. For\n   * now only horizontal scrolling is supported.",
        "* A helper function to scroll to a specific point  in the scrollview.\n     * This is currently used to help focus on child textviews, but can also\n     * be used to quickly scroll to any element we want to focus. Syntax:\n     *\n     * scrollResponderScrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})\n     *\n     * Note: The weird argument signature is due to the fact that, for historical reasons,\n     * the function also accepts separate arguments as as alternative to the options object.\n     * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.",
        "* Returns a reference to the underlying scroll responder, which supports\n     * operations like `scrollTo`. All ScrollView-like components should\n     * implement this method so that they can be composed while providing access\n     * to the underlying scroll responder's methods.",
        "* Assigns a maximum track image. Only static images are supported.\n     * The leftmost pixel of the image will be stretched to fill the track.",
        "* The color used for the track to the right of the button.\n     * Overrides the default blue gradient image.",
        "* Assigns a minimum track image. Only static images are supported.\n     * The rightmost pixel of the image will be stretched to fill the track.",
        "* The color used for the track to the left of the button.\n     * Overrides the default blue gradient image.",
        "* Sets an image for the thumb. Only static images are supported.",
        "* Assigns a single image for the track. Only static images\n     * are supported. The center pixel of the image will be stretched\n     * to fill the track.",
        "* If true the user won't be able to move the slider.\n     * Default value is false.",
        "* Initial maximum value of the slider. Default value is 1.",
        "* Initial minimum value of the slider. Default value is 0.",
        "* Callback called when the user finishes changing the value (e.g. when the slider is released).\n     * @param value",
        "* Callback continuously called while the user is dragging the slider.\n     * @param value",
        "* Step value of the slider. The value should be between 0 and (maximumValue - minimumValue). Default value is 0.",
        "* Used to style and layout the Slider. See StyleSheet.js and ViewStylePropTypes.js for more info.",
        "* Used to locate this view in UI automation tests.",
        "* Initial value of the slider. The value should be between minimumValue\n     * and maximumValue, which default to 0 and 1 respectively.\n     * Default value is 0.\n     * This is not a controlled component, you don't need to update\n     * the value during dragging.",
        "* A component used to select a single value from a range of values.",
        "* https://facebook.github.io/react-native/docs/switchios.html#props",
        "* If true the user won't be able to toggle the switch. Default value is false.",
        "* Background color when the switch is turned on.",
        "* Callback that is called when the user toggles the switch.",
        "* Background color for the switch round button.",
        "* Background color when the switch is turned off.",
        "* The value of the switch, if true the switch will be turned on. Default value is false.",
        "*\n   * Use SwitchIOS to render a boolean input on iOS.\n   *\n   * This is a controlled component, so you must hook in to the onValueChange callback and update the value prop in order for the component to update,\n   * otherwise the user's change will be reverted immediately to reflect props.value as the source of truth.\n   *\n   * @see https://facebook.github.io/react-native/docs/switchios.html",
        "* @see ImageResizeMode.js",
        "* contain - The image will be resized such that it will be completely\n     * visible, contained within the frame of the View.",
        "* cover - The image will be resized such that the entire area of the view\n     * is covered by the image, potentially clipping parts of the image.",
        "* stretch - The image will be stretched to fill the entire frame of the\n     * view without clipping.  This may change the aspect ratio of the image,\n     * distoring it.  Only supported on iOS.",
        "* center - The image will be scaled down such that it is completely visible,\n     * if bigger than the area of the view.\n     * The image will not be scaled up.",
        "* repeat - The image will be repeated to cover the frame of the View. The\n     * image will keep it's size and aspect ratio.",
        "* Image style\n   * @see https://facebook.github.io/react-native/docs/image.html#style",
        "* The text that's read by the screen reader when the user interacts with the image.",
        "* When true, indicates the image is an accessibility element.",
        "* blurRadius: the blur radius of the blur filter added to the image\n    * @platform ios",
        "* When the image is resized, the corners of the size specified by capInsets will stay a fixed size,\n     * but the center content and borders of the image will be stretched.\n     * This is useful for creating resizable rounded buttons, shadows, and other resizable assets.\n     * More info on Apple documentation",
        "* A static image to display while downloading the final image off the network.",
        "* Invoked on load error with {nativeEvent: {error}}",
        "* Invoked on download progress with {nativeEvent: {loaded, total}}",
        "* Invoked when a partial load of the image is complete. The definition of\n     * what constitutes a \"partial load\" is loader specific though this is meant\n     * for progressive JPEG loads.\n     * @platform ios",
        "* @see https://github.com/facebook/react-native/blob/master/Libraries/Image/ImageSourcePropType.js",
        "* `uri` is a string representing the resource identifier for the image, which\n     * could be an http address, a local file path, or the name of a static image\n     * resource (which should be wrapped in the `require('./path/to/image.png')`\n     * function).",
        "* `bundle` is the iOS asset bundle which the image is included in. This\n     * will default to [NSBundle mainBundle] if not set.\n     * @platform ios",
        "* `method` is the HTTP Method to use. Defaults to GET if not specified.",
        "* `headers` is an object representing the HTTP headers to send along with the\n     * request for a remote image.",
        "* `body` is the HTTP body to send with the request. This must be a valid\n     * UTF-8 string, and will be sent exactly as specified, with no\n     * additional encoding (e.g. URL-escaping or base64) applied.",
        "* `width` and `height` can be specified if known at build time, in which case\n     * these will be used to set the default `<Image/>` component dimensions.",
        "* `scale` is used to indicate the scale factor of the image. Defaults to 1.0 if\n     * unspecified, meaning that one image pixel equates to one display point / DIP.",
        "* @see https://facebook.github.io/react-native/docs/image.html",
        "* onLayout function\n     *\n     * Invoked on mount and layout changes with\n     *\n     * {nativeEvent: { layout: {x, y, width, height}}}.",
        "* Invoked when load completes successfully",
        "* Invoked when load either succeeds or fails",
        "* Invoked on load start",
        "* Determines how to resize the image when the frame doesn't match the raw\n     * image dimensions.\n     *\n     * 'cover': Scale the image uniformly (maintain the image's aspect ratio)\n     * so that both dimensions (width and height) of the image will be equal\n     * to or larger than the corresponding dimension of the view (minus padding).\n     *\n     * 'contain': Scale the image uniformly (maintain the image's aspect ratio)\n     * so that both dimensions (width and height) of the image will be equal to\n     * or less than the corresponding dimension of the view (minus padding).\n     *\n     * 'stretch': Scale width and height independently, This may change the\n     * aspect ratio of the src.\n     *\n     * 'center': Scale the image down so that it is completely visible,\n     * if bigger than the area of the view.\n     * The image will not be scaled up.",
        "* The mechanism that should be used to resize the image when the image's dimensions\n     * differ from the image view's dimensions. Defaults to `auto`.\n     *\n     * - `auto`: Use heuristics to pick between `resize` and `scale`.\n     *\n     * - `resize`: A software operation which changes the encoded image in memory before it\n     * gets decoded. This should be used instead of `scale` when the image is much larger\n     * than the view.\n     *\n     * - `scale`: The image gets drawn downscaled or upscaled. Compared to `resize`, `scale` is\n     * faster (usually hardware accelerated) and produces higher quality images. This\n     * should be used if the image is smaller than the view. It should also be used if the\n     * image is slightly bigger than the view.\n     *\n     * More details about `resize` and `scale` can be found at http://frescolib.org/docs/resizing-rotating.html.\n     *\n     * @platform android",
        "* `uri` is a string representing the resource identifier for the image, which\n     * could be an http address, a local file path, or a static image\n     * resource (which should be wrapped in the `require('./path/to/image.png')` function).\n     * This prop can also contain several remote `uri`, specified together with\n     * their width and height. The native side will then choose the best `uri` to display\n     * based on the measured size of the image container.",
        "* similarly to `source`, this property represents the resource used to render\n     * the loading indicator for the image, displayed until image is ready to be\n     * displayed, typically after when it got downloaded from network.",
        "*\n     * Style",
        "* A unique identifier for this element to be used in UI Automation testing scripts.",
        "* @see https://facebook.github.io/react-native/docs/listview.html#props",
        "* An instance of [ListView.DataSource](docs/listviewdatasource.html) to use",
        "* Flag indicating whether empty section headers should be rendered.\n     * In the future release empty section headers will be rendered by\n     * default, and the flag will be deprecated. If empty sections are not\n     * desired to be rendered their indices should be excluded from\n     * sectionID object.",
        "* How many rows to render on initial component mount.  Use this to make\n     * it so that the first screen worth of data apears at one time instead of\n     * over the course of multiple frames.",
        "* (visibleRows, changedRows) => void\n     *\n     * Called when the set of visible rows changes.  `visibleRows` maps\n     * { sectionID: { rowID: true }} for all the visible rows, and\n     * `changedRows` maps { sectionID: { rowID: true | false }} for the rows\n     * that have changed their visibility, with true indicating visible, and\n     * false indicating the view has moved out of view.",
        "* Called when all rows have been rendered and the list has been scrolled\n     * to within onEndReachedThreshold of the bottom.  The native scroll\n     * event is provided.",
        "* Threshold in pixels for onEndReached.",
        "* Number of rows to render per event loop.",
        "* A performance optimization for improving scroll perf of\n     * large lists, used in conjunction with overflow: 'hidden' on the row\n     * containers.  Use at your own risk.",
        "* () => renderable\n     *\n     * The header and footer are always rendered (if these props are provided)\n     * on every render pass.  If they are expensive to re-render, wrap them\n     * in StaticContainer or other mechanism as appropriate.  Footer is always\n     * at the bottom of the list, and header at the top, on every render pass.",
        "* () => renderable\n     *\n     * The header and footer are always rendered (if these props are provided)\n     * on every render pass.  If they are expensive to re-render, wrap them\n     * in StaticContainer or other mechanism as appropriate.  Footer is always\n     * at the bottom of the list, and header at the top, on every render pass.",
        "* (rowData, sectionID, rowID) => renderable\n     * Takes a data entry from the data source and its ids and should return\n     * a renderable component to be rendered as the row.  By default the data\n     * is exactly what was put into the data source, but it's also possible to\n     * provide custom extractors.",
        "* A function that returns the scrollable component in which the list rows are rendered.\n     * Defaults to returning a ScrollView with the given props.",
        "* (sectionData, sectionID) => renderable\n     *\n     * If provided, a sticky header is rendered for this section.  The sticky\n     * behavior means that it will scroll with the content at the top of the\n     * section until it reaches the top of the screen, at which point it will\n     * stick to the top until it is pushed off the screen by the next section\n     * header.",
        "* (sectionID, rowID, adjacentRowHighlighted) => renderable\n     * If provided, a renderable component to be rendered as the separator below each row\n     * but not the last row if there is a section header below.\n     * Take a sectionID and rowID of the row above and whether its adjacent row is highlighted.",
        "* How early to start rendering rows before they come on screen, in\n     * pixels.",
        "* An array of child indices determining which children get docked to the\n     * top of the screen when scrolling. For example, passing\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n     * top of the scroll view. This property is not supported in conjunction\n     * with `horizontal={true}`.\n     * @platform ios",
        "* Exports some data, e.g. for perf investigations or analytics.",
        "* Provides a handle to the underlying scroll responder.",
        "* Scrolls to a given x, y offset, either immediately or with a smooth animation.\n     *\n     * See `ScrollView#scrollTo`.",
        "* If false points of interest won't be displayed on the map.\n     * Default value is true.",
        "* Map annotations with title/subtitle.",
        "* If true the map will follow the user's location whenever it changes.\n     * Note that this has no effect unless showsUserLocation is enabled.\n     * Default value is true.",
        "* Insets for the map's legal label, originally at bottom left of the map. See EdgeInsetsPropType.js for more information.",
        "* The map type to be displayed.\n     *     standard: standard road map (default)\n     *     satellite: satellite view\n     *     hybrid: satellite view with roads and points of interest overlayed\n     *\n     * enum('standard', 'satellite', 'hybrid')",
        "* Maximum size of area that can be displayed.",
        "* Minimum size of area that can be displayed.",
        "* Map overlays",
        "* If false compass won't be displayed on the map.\n     * Default value is true.",
        "* Callback that is called once, when the user taps an annotation.",
        "* Callback that is called continuously when the user is dragging the map.",
        "* Callback that is called once, when the user is done moving the map.",
        "* When this property is set to true and a valid camera is associated with the map,\n     * the camera’s pitch angle is used to tilt the plane of the map.\n     *\n     * When this property is set to false, the camera’s pitch angle is ignored and\n     * the map is always displayed as if the user is looking straight down onto it.",
        "* The region to be displayed by the map.\n     * The region is defined by the center coordinates and the span of coordinates to display.",
        "* When this property is set to true and a valid camera is associated with the map,\n     * the camera’s heading angle is used to rotate the plane of the map around its center point.\n     *\n     * When this property is set to false, the camera’s heading angle is ignored and the map is always oriented\n     * so that true north is situated at the top of the map view",
        "* If false the user won't be able to change the map region being displayed.\n     * Default value is true.",
        "* If true the app will ask for the user's location and focus on it.\n     * Default value is false.\n     *\n     * NOTE: You need to add NSLocationWhenInUseUsageDescription key in Info.plist to enable geolocation,\n     * otherwise it is going to fail silently!",
        "* Used to style and layout the MapView.\n     * See StyleSheet.js and ViewStylePropTypes.js for more info.",
        "* If false the user won't be able to pinch/zoom the map.\n     * Default value is true.",
        "* @see https://facebook.github.io/react-native/docs/mapview.html#content",
        "* The `animationType` prop controls how the modal animates.\n     *\n     * - `slide` slides in from the bottom\n     * - `fade` fades into view\n     * - `none` appears without an animation",
        "* The `transparent` prop determines whether your modal will fill the entire view.\n     * Setting this to `true` will render the modal over a transparent background.",
        "* The `visible` prop determines whether your modal is visible.",
        "* The `onRequestClose` prop allows passing a function that will be called once the modal has been dismissed.\n     * _On the Android platform, this is a required function._",
        "* The `onShow` prop allows passing a function that will be called once the modal has been shown.",
        "* The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\n     * On iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field.\n     * @platform ios",
        "* The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\n     * The orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.\n     * @platform ios",
        "* @see https://github.com/facebook/react-native/blob/0.34-stable\\Libraries\\Components\\Touchable\\Touchable.js",
        "* Invoked when the item should be highlighted. Mixers should implement this\n     * to visually distinguish the `VisualRect` so that the user knows that\n     * releasing a touch will result in a \"selection\" (analog to click).",
        "* Invoked when the item is \"active\" (in that it is still eligible to become\n     * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n     * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n     * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n     * again and the mixer should probably highlight the `VisualRect` again. This\n     * event will not fire on an `touchEnd/mouseUp` event, only move events while\n     * the user is depressing the mouse/touch.",
        "* Invoked when the item is \"selected\" - meaning the interaction ended by\n     * letting up while the item was either in the state\n     * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.",
        "* Invoked when the item is long pressed - meaning the interaction ended by\n     * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n     * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n     * be called as it normally is. If `touchableHandleLongPress` is provided, by\n     * default any `touchableHandlePress` callback will not be invoked. To\n     * override this default behavior, override `touchableLongPressCancelsPress`\n     * to return false. As a result, `touchableHandlePress` will be called when\n     * lifting up, even if `touchableHandleLongPress` has also been called.",
        "* Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n     * numbers mean the size expands outwards.",
        "* Returns the number of millis to wait before triggering a highlight.",
        "* Indicates to accessibility services to treat UI component like a native one.\n     * Works for Android only.\n     *\n     * @enum('none', 'button', 'radiobutton_checked', 'radiobutton_unchecked' )",
        "* Provides additional traits to screen reader.\n     * By default no traits are provided unless specified otherwise in element\n     *\n     * @enum('none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text','summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn')",
        "* @see https://facebook.github.io/react-native/docs/touchablewithoutfeedback.html#props",
        "* Called when the touch is released, but not if cancelled (e.g. by a scroll that steals the responder lock).",
        "* Delay in ms, from onPressIn, before onLongPress is called.",
        "* Delay in ms, from the start of the touch, before onPressIn is called.",
        "* Delay in ms, from the release of the touch, before onPressOut is called.",
        "* If true, disable all interactions for this component.",
        "* This defines how far your touch can start away from the button.\n     * This is added to pressRetentionOffset when moving off of the button.\n     * NOTE The touch area never extends past the parent view bounds and\n     * the Z-index of sibling views always takes precedence if a touch hits\n     * two overlapping views.",
        "* Invoked on mount and layout changes with\n     * {nativeEvent: {layout: {x, y, width, height}}}",
        "* Called when the touch is released,\n     * but not if cancelled (e.g. by a scroll that steals the responder lock).",
        "* //FIXME: not in doc but available in examples",
        "* When the scroll view is disabled, this defines how far your\n     * touch may move off of the button, before deactivating the button.\n     * Once deactivated, try moving it back and you'll see that the button\n     * is once again reactivated! Move it back and forth several times\n     * while the scroll view is disabled. Ensure you pass in a constant\n     * to reduce memory allocations.",
        "* Do not use unless you have a very good reason.\n   * All the elements that respond to press should have a visual feedback when touched.\n   * This is one of the primary reason a \"web\" app doesn't feel \"native\".\n   *\n   * @see https://facebook.github.io/react-native/docs/touchablewithoutfeedback.html",
        "* @see https://facebook.github.io/react-native/docs/touchablehighlight.html#props",
        "* Determines what the opacity of the wrapped view should be when touch is active.",
        "*\n     * Called immediately after the underlay is hidden",
        "* Called immediately after the underlay is shown",
        "* @see https://facebook.github.io/react-native/docs/view.html#style",
        "* The color of the underlay that will show through when the touch is active.",
        "* A wrapper for making views respond properly to touches.\n   * On press down, the opacity of the wrapped view is decreased,\n   * which allows the underlay color to show through, darkening or tinting the view.\n   * The underlay comes from adding a view to the view hierarchy,\n   * which can sometimes cause unwanted visual artifacts if not used correctly,\n   * for example if the backgroundColor of the wrapped view isn't explicitly set to an opaque color.\n   *\n   * NOTE: TouchableHighlight supports only one child\n   * If you wish to have several child components, wrap them in a View.\n   *\n   * @see https://facebook.github.io/react-native/docs/touchablehighlight.html",
        "* @see https://facebook.github.io/react-native/docs/touchableopacity.html#props",
        "* Determines what the opacity of the wrapped view should be when touch is active.\n     * Defaults to 0.2",
        "* A wrapper for making views respond properly to touches.\n   * On press down, the opacity of the wrapped view is decreased, dimming it.\n   * This is done without actually changing the view hierarchy,\n   * and in general is easy to add to an app without weird side-effects.\n   *\n   * @see https://facebook.github.io/react-native/docs/touchableopacity.html",
        "* Animate the touchable to a new opacity.",
        "* @see https://facebook.github.io/react-native/docs/touchableopacity.html#props",
        "* Determines the type of background drawable that's going to be used to display feedback.\n     * It takes an object with type property and extra data depending on the type.\n     * It's recommended to use one of the following static methods to generate that dictionary:\n     *      1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's default background for selectable elements (?android:attr/selectableItemBackground)\n     *      2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android theme's default background for borderless selectable elements (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n     *      3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable with specified color (as a string). If property borderless evaluates to true the ripple will render outside of the view bounds (see native actionbar buttons as an example of that behavior). This background type is available on Android API level 21+",
        "* A wrapper for making views respond properly to touches (Android only).\n   * On Android this component uses native state drawable to display touch feedback.\n   * At the moment it only supports having a single View instance as a child node,\n   * as it's implemented by replacing that View with another instance of RCTView node with some additional properties set.\n   *\n   * Background drawable of native feedback touchable can be customized with background property.\n   *\n   * @see https://facebook.github.io/react-native/docs/touchablenativefeedback.html#content",
        "* Creates an object that represents android theme's default background for\n     * selectable elements (?android:attr/selectableItemBackground).",
        "* Creates an object that represent android theme's default background for borderless\n     * selectable elements (?android:attr/selectableItemBackgroundBorderless).\n     * Available on android API level 21+.",
        "* Creates an object that represents ripple drawable with specified color (as a\n     * string). If property `borderless` evaluates to true the ripple will\n     * render outside of the view bounds (see native actionbar buttons as an\n     * example of that behavior). This background type is available on Android\n     * API level 21+.\n     *\n     * @param color The ripple color\n     * @param borderless If the ripple can render outside it's bounds",
        "* @see https://facebook.github.io/react-native/docs/navigator.html#content",
        "* Optional function that allows configuration about scene animations and gestures.\n     * Will be invoked with `route` and `routeStack` parameters, where `route`\n     * corresponds to the current scene being rendered by the `Navigator` and\n     * `routeStack` is the set of currently mounted routes that the navigator\n     *  could transition to. The function should return a scene configuration object.\n     * @param route\n     * @param routeStack",
        "* Specify a route to start on.\n     * A route is an object that the navigator will use to identify each scene to render.\n     * initialRoute must be a route in the initialRouteStack if both props are provided.\n     * The initialRoute will default to the last item in the initialRouteStack.",
        "* Provide a set of routes to initially mount.\n     * Required if no initialRoute is provided.\n     * Otherwise, it will default to an array containing only the initialRoute",
        "* Optionally provide a navigation bar that persists across scene transitions",
        "* Optionally provide the navigator object from a parent Navigator",
        "* @deprecated Use navigationContext.addListener('willfocus', callback) instead.",
        "* @deprecated Use navigationContext.addListener('willfocus', callback) instead.",
        "* Required function which renders the scene for a given route.\n     * Will be invoked with the route and the navigator object\n     * @param route\n     * @param navigator",
        "* Styles to apply to the container of each scene",
        "* Class that contains the info and methods for app navigation.",
        "* Schedule work for after all interactions have completed.\n     *\n     * @param {function} callback",
        "* Special form of calling `addListener` that *guarantees* that a\n     * subscription *must* be tied to a component instance, and therefore will\n     * be cleaned up when the component is unmounted. It is impossible to create\n     * the subscription and pass it in - this method must be the one to create\n     * the subscription and therefore can guarantee it is retained in a way that\n     * will be cleaned up.\n     *\n     * @param {EventEmitter} eventEmitter emitter to subscribe to.\n     * @param {string} eventType Type of event to listen to.\n     * @param {function} listener Function to invoke when event occurs.\n     * @param {object} context Object to use as listener context.",
        "* Use Navigator to transition between different scenes in your app.\n   * To accomplish this, provide route objects to the navigator to identify each scene,\n   * and also a renderScene function that the navigator can use to render the scene for a given route.\n   *\n   * To change the animation or gesture properties of the scene, provide a configureScene prop to get the config object for a given route.\n   * See Navigator.SceneConfigs for default animations and more info on scene config options.\n   * @see https://facebook.github.io/react-native/docs/navigator.html",
        "* returns the current list of routes",
        "* Jump backward without unmounting the current scen",
        "* Jump forward to the next scene in the route stack",
        "* Transition to an existing scene without unmounting",
        "* Navigate forward to a new scene, squashing any scenes that you could jumpForward to",
        "* Transition back and unmount the current scene",
        "* Go back N scenes at once. When N=1, behavior matches `pop()`.\n     * When N is invalid(negative or bigger than current routes count), do nothing.\n     * @param {number} n The number of scenes to pop. Should be an integer.",
        "* Replace the current scene with a new route",
        "* Replace a scene as specified by an index",
        "*  Replace the previous scene",
        "* Reset every scene with an array of routes",
        "* Pop to a particular scene, as specified by its route. All scenes after it will be unmounted",
        "* Pop to the first scene in the stack, unmounting every other scene",
        "*  Replace the previous scene and pop to it.",
        "* Navigate to a new scene and reset route stack.",
        "* @see NavigatorNavigationBar.js",
        "* Stop transtion, immediately resets the cached state and re-render the\n       * whole view.",
        "* @see NavigatorNavigationBar.js",
        "* Creates a StyleSheet style reference from the given object.",
        "* Flattens an array of style objects, into one aggregated style object.\n     * Alternatively, this method can be used to lookup IDs, returned by\n     * StyleSheet.register.\n     *\n     * > **NOTE**: Exercise caution as abusing this can tax you in terms of\n     * > optimizations.\n     * >\n     * > IDs enable optimizations through the bridge and memory in general. Refering\n     * > to style objects directly will deprive you of these optimizations.\n     *\n     * Example:\n     * ```\n     * var styles = StyleSheet.create({\n     *   listItem: {\n     *     flex: 1,\n     *     fontSize: 16,\n     *     color: 'white'\n     *   },\n     *   selectedListItem: {\n     *     color: 'green'\n     *   }\n     * });\n     *\n     * StyleSheet.flatten([styles.listItem, styles.selectedListItem])\n     * // returns { flex: 1, fontSize: 16, color: 'green' }\n     * ```\n     * Alternative use:\n     * ```\n     * StyleSheet.flatten(styles.listItem);\n     * // return { flex: 1, fontSize: 16, color: 'white' }\n     * // Simply styles.listItem would return its ID (number)\n     * ```\n     * This method internally uses `StyleSheetRegistry.getStyleByID(style)`\n     * to resolve style objects represented by IDs. Thus, an array of style\n     * objects (instances of StyleSheet.create), are individually resolved to,\n     * their respective objects, merged as one and then returned. This also explains\n     * the alternative use.",
        "* This is defined as the width of a thin line on the platform. It can be\n     * used as the thickness of a border or division between two elements.\n     * Example:\n     * ```\n     *   {\n     *     borderBottomColor: '#bbb',\n     *     borderBottomWidth: StyleSheet.hairlineWidth\n     *   }\n     * ```\n     *\n     * This constant will always be a round number of pixels (so a line defined\n     * by it look crisp) and will try to match the standard width of a thin line\n     * on the underlying platform. However, you should not rely on it being a\n     * constant size, because on different platforms and screen densities its\n     * value may be calculated differently.",
        "* A very common pattern is to create overlays with position absolute and zero positioning,\n     * so `absoluteFill` can be used for convenience and to reduce duplication of these repeated\n     * styles.",
        "* Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be\n     * used to create a customized entry in a `StyleSheet`, e.g.:\n     *\n     *   const styles = StyleSheet.create({\n     *     wrapper: {\n     *       ...StyleSheet.absoluteFillObject,\n     *       top: 10,\n     *       backgroundColor: 'transparent',\n     *     },\n     *   });",
        "* beginEvent/endEvent for starting and then ending a profile within the same call stack frame\n     *",
        "* beginAsyncEvent/endAsyncEvent for starting and then ending a profile where the end can either\n     * occur on another thread or out of the current stack frame, eg await\n     * the returned cookie variable should be used as input into the endAsyncEvent call to end the profile\n     *",
        "* counterEvent registers the value to the profileName on the systrace timeline\n     *",
        "* Relay profiles use await calls, so likely occur out of current stack frame\n     * therefore async variant of profiling is used\n     *",
        "* Measures multiple methods of a class. For example, you can do:\n     * Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);\n     *\n     * @param object\n     * @param objectName\n     * @param methodNames Map from method names to method display names.",
        "* Returns an profiled version of the input function. For example, you can:\n     * JSON.parse = Systrace.measure('JSON', 'parse', JSON.parse);\n     *\n     * @param objName\n     * @param fnName\n     * @param {function} func\n     * @return {function} replacement function",
        "* //FIXME: Could not find docs. Inferred from examples and jscode : ListViewDataSource.js",
        "* Provides efficient data processing and access to the\n   * `ListView` component.  A `ListViewDataSource` is created with functions for\n   * extracting data from the input blob, and comparing elements (with default\n   * implementations for convenience).  The input blob can be as simple as an\n   * array of strings, or an object with rows nested inside section objects.\n   *\n   * To update the data in the datasource, use `cloneWithRows` (or\n   * `cloneWithRowsAndSections` if you care about sections).  The data in the\n   * data source is immutable, so you can't modify it directly.  The clone methods\n   * suck in the new data and compute a diff for each row so ListView knows\n   * whether to re-render it or not.",
        "* You can provide custom extraction and `hasChanged` functions for section\n     * headers and rows.  If absent, data will be extracted with the\n     * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n     *\n     * The default extractor expects data of one of the following forms:\n     *\n     *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n     *\n     *    or\n     *\n     *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n     *\n     *    or\n     *\n     *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n     *\n     * The constructor takes in a params argument that can contain any of the\n     * following:\n     *\n     * - getRowData(dataBlob, sectionID, rowID);\n     * - getSectionHeaderData(dataBlob, sectionID);\n     * - rowHasChanged(prevRowData, nextRowData);\n     * - sectionHeaderHasChanged(prevSectionData, nextSectionData);",
        "* Clones this `ListViewDataSource` with the specified `dataBlob` and\n     * `rowIdentities`. The `dataBlob` is just an aribitrary blob of data. At\n     * construction an extractor to get the interesting informatoin was defined\n     * (or the default was used).\n     *\n     * The `rowIdentities` is is a 2D array of identifiers for rows.\n     * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n     * assumed that the keys of the section data are the row identities.\n     *\n     * Note: This function does NOT clone the data in this data source. It simply\n     * passes the functions defined at construction to a new data source with\n     * the data specified. If you wish to maintain the existing data you must\n     * handle merging of old and new data separately and then pass that into\n     * this function as the `dataBlob`.",
        "* This performs the same function as the `cloneWithRows` function but here\n     * you also specify what your `sectionIdentities` are. If you don't care\n     * about sections you should safely be able to use `cloneWithRows`.\n     *\n     * `sectionIdentities` is an array of identifiers for  sections.\n     * ie. ['s1', 's2', ...].  If not provided, it's assumed that the\n     * keys of dataBlob are the section identities.\n     *\n     * Note: this returns a new object!",
        "* Returns if the row is dirtied and needs to be rerendered",
        "* Gets the data required to render the row.",
        "* Gets the rowID at index provided if the dataSource arrays were flattened,\n     * or null of out of range indexes.",
        "* Gets the sectionID at index provided if the dataSource arrays were flattened,\n     * or null for out of range indexes.",
        "* Returns an array containing the number of rows in each section",
        "* Returns if the section header is dirtied and needs to be rerendered",
        "* Gets the data required to render the section header",
        "* @see https://facebook.github.io/react-native/docs/tabbarios-item.html#props",
        "* Little red bubble that sits at the top right of the icon.",
        "* A custom icon for the tab. It is ignored when a system icon is defined.",
        "* Callback when this tab is being selected,\n     * you should change the state of your component to set selected={true}.",
        "* If set to true it renders the image as original,\n     * it defaults to being displayed as a template",
        "* It specifies whether the children are visible or not. If you see a blank content, you probably forgot to add a selected one.",
        "* A custom icon when the tab is selected.\n     * It is ignored when a system icon is defined. If left empty, the icon will be tinted in blue.",
        "* React style object.",
        "* Items comes with a few predefined system icons.\n     * Note that if you are using them, the title and selectedIcon will be overriden with the system ones.\n     *\n     *  enum('bookmarks', 'contacts', 'downloads', 'favorites', 'featured', 'history', 'more', 'most-recent', 'most-viewed', 'recents', 'search', 'top-rated')",
        "* Text that appears under the icon. It is ignored when a system icon is defined.",
        "* @see https://facebook.github.io/react-native/docs/tabbarios.html#props",
        "* Background color of the tab bar",
        "* Specifies tab bar item positioning. Available values are:\n     * - fill - distributes items across the entire width of the tab bar\n     * - center - centers item in the available tab bar space\n     * - auto (default) - distributes items dynamically according to the\n     * user interface idiom. In a horizontally compact environment (e.g. iPhone 5)\n     * this value defaults to `fill`, in a horizontally regular one (e.g. iPad)\n     * it defaults to center.",
        "* Color of the currently selected tab icon",
        "* A Boolean value that indicates whether the tab bar is translucent",
        "* Color of text on unselected tabs",
        "* Converts a layout size (dp) to pixel size (px).\n     * Guaranteed to return an integer number.\n     * @param layoutSize",
        "* Rounds a layout size (dp) to the nearest layout size that\n     * corresponds to an integer number of pixels. For example,\n     * on a device with a PixelRatio of 3,\n     * PixelRatio.roundToNearestPixel(8.4) = 8.33,\n     * which corresponds to exactly (8.33 * 3) = 25 pixels.\n     * @param layoutSize",
        "* No-op for iOS, but used on the web. Should not be documented. [sic]",
        "* @see https://facebook.github.io/react-native/docs/platform-specific-code.html#content",
        "* @see https://facebook.github.io/react-native/docs/platform-specific-code.html#content",
        "* Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n   * adding all event listeners directly to RCTDeviceEventEmitter.",
        "* Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `var {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {Object?} Value for the dimension.\n   * @see https://facebook.github.io/react-native/docs/dimensions.html#content",
        "* Initial dimensions are set before runApplication is called so they\n     * should be available before any other require's are run, but may be\n     * updated later.\n     * Note: Although dimensions are available immediately, they may\n     * change (e.g due to device rotation) so any rendering logic or\n     * styles that depend on these constants should try to call this\n     * function on every render, rather than caching the value (for\n     * example, using inline styles rather than setting a value in a\n     * StyleSheet).\n     * Example: var {height, width} = Dimensions.get('window');\n     @param {string} dim Name of dimension as defined when calling set.\n     @returns {Object?} Value for the dimension.",
        "* This should only be called from native code by sending the didUpdateDimensions event.\n     * @param {object} dims Simple string-keyed object of dimensions to set",
        "* Schedule a function to run after all interactions have completed.\n     * Returns a cancellable\n     * @param fn",
        "* Notify manager that an interaction has started.",
        "* Notify manager that an interaction has completed.",
        "* A positive number will use setTimeout to schedule any tasks after\n     * the eventLoopRunningTime hits the deadline value, otherwise all\n     * tasks will be executed in one setImmediate batch (default).",
        "* Invoke this from an `onScroll` event.",
        "* Merely touch starting is not sufficient for a scroll view to become the\n     * responder. Being the \"responder\" means that the very next touch move/end\n     * event will result in an action/movement.\n     *\n     * Invoke this from an `onStartShouldSetResponder` event.\n     *\n     * `onStartShouldSetResponder` is used when the next move/end will trigger\n     * some UI movement/action, but when you want to yield priority to views\n     * nested inside of the view.\n     *\n     * There may be some cases where scroll views actually should return `true`\n     * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\n     * that gives priority to nested views.\n     *\n     * - If a single tap on the scroll view triggers an action such as\n     *   recentering a map style view yet wants to give priority to interaction\n     *   views inside (such as dropped pins or labels), then we would return true\n     *   from this method when there is a single touch.\n     *\n     * - Similar to the previous case, if a two finger \"tap\" should trigger a\n     *   zoom, we would check the `touches` count, and if `>= 2`, we would return\n     *   true.\n     *",
        "* There are times when the scroll view wants to become the responder\n     * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\n     * that *doesn't* give priority to nested views (hence the capture phase):\n     *\n     * - Currently animating.\n     * - Tapping anywhere that is not the focused input, while the keyboard is\n     *   up (which should dismiss the keyboard).\n     *\n     * Invoke this from an `onStartShouldSetResponderCapture` event.",
        "* Invoke this from an `onResponderReject` event.\n     *\n     * Some other element is not yielding its role as responder. Normally, we'd\n     * just disable the `UIScrollView`, but a touch has already began on it, the\n     * `UIScrollView` will not accept being disabled after that. The easiest\n     * solution for now is to accept the limitation of disallowing this\n     * altogether. To improve this, find a way to disable the `UIScrollView` after\n     * a touch has already started.",
        "* We will allow the scroll view to give up its lock iff it acquired the lock\n     * during an animation. This is a very useful default that happens to satisfy\n     * many common user experiences.\n     *\n     * - Stop a scroll on the left edge, then turn that into an outer view's\n     *   backswipe.\n     * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\n     *   view dismiss.\n     * - However, without catching the scroll view mid-bounce (while it is\n     *   motionless), if you drag far enough for the scroll view to become\n     *   responder (and therefore drag the scroll view a bit), any backswipe\n     *   navigation of a swipe gesture higher in the view hierarchy, should be\n     *   rejected.",
        "* Invoke this from an `onTouchEnd` event.\n     *\n     * @param {SyntheticEvent} e Event.",
        "* Invoke this from an `onResponderRelease` event.",
        "* Invoke this from an `onResponderGrant` event.",
        "* Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\n     * animation, and there's not an easy way to distinguish a drag vs. stopping\n     * momentum.\n     *\n     * Invoke this from an `onScrollBeginDrag` event.",
        "* Invoke this from an `onScrollEndDrag` event.",
        "* Invoke this from an `onMomentumScrollBegin` event.",
        "* Invoke this from an `onMomentumScrollEnd` event.",
        "* Invoke this from an `onTouchStart` event.\n     *\n     * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n     * order, after `ResponderEventPlugin`, we can detect that we were *not*\n     * permitted to be the responder (presumably because a contained view became\n     * responder). The `onResponderReject` won't fire in that case - it only\n     * fires when a *current* responder rejects our request.\n     *\n     * @param {SyntheticEvent} e Touch Start event.",
        "* Invoke this from an `onTouchMove` event.\n     *\n     * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n     * order, after `ResponderEventPlugin`, we can detect that we were *not*\n     * permitted to be the responder (presumably because a contained view became\n     * responder). The `onResponderReject` won't fire in that case - it only\n     * fires when a *current* responder rejects our request.\n     *\n     * @param {SyntheticEvent} e Touch Start event.",
        "* A helper function for this class that lets us quickly determine if the\n     * view is currently animating. This is particularly useful to know when\n     * a touch has just started or ended.",
        "* Returns the node that represents native view that can be scrolled.\n     * Components can pass what node to use by defining a `getScrollableNode`\n     * function otherwise `this` is used.",
        "* A helper function to scroll to a specific point  in the scrollview.\n     * This is currently used to help focus on child textviews, but can also\n     * be used to quickly scroll to any element we want to focus. Syntax:\n     *\n     * scrollResponderScrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})\n     *\n     * Note: The weird argument signature is due to the fact that, for historical reasons,\n     * the function also accepts separate arguments as as alternative to the options object.\n     * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.",
        "* A helper function to zoom to a specific rect in the scrollview. The argument has the shape\n     * {x: number; y: number; width: number; height: number; animated: boolean = true}\n     *\n     * @platform ios",
        "* This method should be used as the callback to onFocus in a TextInputs'\n     * parent view. Note that any module using this mixin needs to return\n     * the parent view's ref in getScrollViewRef() in order to use this method.\n     * @param {any} nodeHandle The TextInput node handle\n     * @param {number} additionalOffset The scroll view's top \"contentInset\".\n     *        Default is 0.\n     * @param {bool} preventNegativeScrolling Whether to allow pulling the content\n     *        down to make it meet the keyboard's top. Default is false.",
        "* The calculations performed here assume the scroll view takes up the entire\n     * screen - even if has some content inset. We then measure the offsets of the\n     * keyboard, and compensate both for the scroll view's \"contentInset\".\n     *\n     * @param {number} left Position of input w.r.t. table view.\n     * @param {number} top Position of input w.r.t. table view.\n     * @param {number} width Width of the text input.\n     * @param {number} height Height of the text input.",
        "* `componentWillMount` is the closest thing to a  standard \"constructor\" for\n     * React components.\n     *\n     * The `keyboardWillShow` is called before input focus.",
        "* Warning, this may be called several times for a single keyboard opening.\n     * It's best to store the information in this method and then take any action\n     * at a later point (either in `keyboardDidShow` or other).\n     *\n     * Here's the order that events occur in:\n     * - focus\n     * - willShow {startCoordinates, endCoordinates} several times\n     * - didShow several times\n     * - blur\n     * - willHide {startCoordinates, endCoordinates} several times\n     * - didHide several times\n     *\n     * The `ScrollResponder` providesModule callbacks for each of these events.\n     * Even though any user could have easily listened to keyboard events\n     * themselves, using these `props` callbacks ensures that ordering of events\n     * is consistent - and not dependent on the order that the keyboard events are\n     * subscribed to. This matters when telling the scroll view to scroll to where\n     * the keyboard is headed - the scroll responder better have been notified of\n     * the keyboard destination before being instructed to scroll to where the\n     * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\n     * will work.\n     *\n     * WARNING: These callbacks will fire even if a keyboard is displayed in a\n     * different navigation pane. Filter out the events to determine if they are\n     * relevant to you. (For example, only if you receive these callbacks after\n     * you had explicitly focused a node etc).",
        "* When true the scroll view bounces horizontally when it reaches the end\n     * even if the content is smaller than the scroll view itself. The default\n     * value is true when `horizontal={true}` and false otherwise.",
        "* When true the scroll view bounces vertically when it reaches the end\n     * even if the content is smaller than the scroll view itself. The default\n     * value is false when `horizontal={true}` and true otherwise.",
        "* Controls whether iOS should automatically adjust the content inset for scroll views that are placed behind a navigation bar or tab bar/ toolbar.\n     * The default value is true.",
        "* When true the scroll view bounces when it reaches the end of the\n     * content if the content is larger then the scroll view along the axis of\n     * the scroll direction. When false it disables all bouncing even if\n     * the `alwaysBounce*` props are true. The default value is true.",
        "* When true gestures can drive zoom past min/max and the zoom will animate\n     * to the min/max value at gesture end otherwise the zoom will not exceed\n     * the limits.",
        "* When false once tracking starts won't try to drag if the touch moves.\n     * The default value is true.",
        "* When true the scroll view automatically centers the content when the\n     * content is smaller than the scroll view bounds; when the content is\n     * larger than the scroll view this property has no effect. The default\n     * value is false.",
        "* The amount by which the scroll view content is inset from the edges of the scroll view.\n     * Defaults to {0, 0, 0, 0}.",
        "* Used to manually set the starting scroll offset.\n     * The default value is {x: 0, y: 0}",
        "* A floating-point number that determines how quickly the scroll view\n     * decelerates after the user lifts their finger. Reasonable choices include\n     *   - Normal: 0.998 (the default)\n     *   - Fast: 0.9",
        "* When true the ScrollView will try to lock to only vertical or horizontal\n     * scrolling while dragging.  The default value is false.",
        "* The style of the scroll indicators.\n     * - default (the default), same as black.\n     * - black, scroll indicator is black. This style is good against\n     *   a white content background.\n     * - white, scroll indicator is white. This style is good against\n     *   a black content background.",
        "* The maximum allowed zoom scale. The default value is 1.0.",
        "* The minimum allowed zoom scale. The default value is 1.0.",
        "* Called when a scrolling animation ends.",
        "* When false, the content does not scroll. The default value is true",
        "* This controls how often the scroll event will be fired while scrolling (in events per seconds).\n     * A higher number yields better accuracy for code that is tracking the scroll position,\n     * but can lead to scroll performance problems due to the volume of information being send over the bridge.\n     * The default value is zero, which means the scroll event will be sent only once each time the view is scrolled.",
        "* The amount by which the scroll view indicators are inset from the edges of the scroll view.\n     * This should normally be set to the same value as the contentInset.\n     * Defaults to {0, 0, 0, 0}.",
        "* When true the scroll view scrolls to top when the status bar is tapped.\n     * The default value is true.",
        "* When snapToInterval is set, snapToAlignment will define the relationship of the the snapping to the scroll view.\n     *      - start (the default) will align the snap at the left (horizontal) or top (vertical)\n     *      - center will align the snap in the center\n     *      - end will align the snap at the right (horizontal) or bottom (vertical)",
        "* When set, causes the scroll view to stop at multiples of the value of snapToInterval.\n     * This can be used for paginating through children that have lengths smaller than the scroll view.\n     * Used in combination with snapToAlignment.",
        "* An array of child indices determining which children get docked to the\n     * top of the screen when scrolling. For example passing\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n     * top of the scroll view. This property is not supported in conjunction\n     * with `horizontal={true}`.",
        "* The current scale of the scroll view content. The default value is 1.0.",
        "* Sometimes a scrollview takes up more space than its content fills.\n     * When this is the case, this prop will fill the rest of the\n     * scrollview with a color to avoid setting a background and creating\n     * unnecessary overdraw. This is an advanced optimization that is not\n     * needed in the general case.",
        "* Tag used to log scroll performance on this scroll view. Will force\n     * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n     * anything out of the box and you need to implement a custom native\n     * FpsListener for it to be useful.\n     * @platform android",
        "* These styles will be applied to the scroll view content container which\n     * wraps all of the child views. Example:\n     *\n     *   return (\n     *     <ScrollView contentContainerStyle={styles.contentContainer}>\n     *     </ScrollView>\n     *   );\n     *   ...\n     *   var styles = StyleSheet.create({\n     *     contentContainer: {\n     *       paddingVertical: 20\n     *     }\n     *   });",
        "* When true the scroll view's children are arranged horizontally in a row\n     * instead of vertically in a column. The default value is false.",
        "* Determines whether the keyboard gets dismissed in response to a drag.\n     *   - 'none' (the default) drags do not dismiss the keyboard.\n     *   - 'onDrag' the keyboard is dismissed when a drag begins.\n     *   - 'interactive' the keyboard is dismissed interactively with the drag\n     *     and moves in synchrony with the touch; dragging upwards cancels the\n     *     dismissal.",
        "* When false tapping outside of the focused text input when the keyboard\n     * is up dismisses the keyboard. When true the scroll view will not catch\n     * taps and the keyboard will not dismiss automatically. The default value\n     * is false.",
        "* Fires at most once per frame during scrolling.\n     * The frequency of the events can be contolled using the scrollEventThrottle prop.",
        "* Fires if a user initiates a scroll gesture.",
        "* Fires when a user has finished scrolling.",
        "* Fires when scroll view has finished moving",
        "* Fires when scroll view has begun moving",
        "* When true the scroll view stops on multiples of the scroll view's size\n     * when scrolling. This can be used for horizontal pagination. The default\n     * value is false.",
        "* Experimental: When true offscreen child views (whose `overflow` value is\n     * `hidden`) are removed from their native backing superview when offscreen.\n     * This canimprove scrolling performance on long lists. The default value is\n     * false.",
        "* When true, shows a horizontal scroll indicator.",
        "* When true, shows a vertical scroll indicator.",
        "* Style",
        "* A RefreshControl component, used to provide pull-to-refresh\n     * functionality for the ScrollView.",
        "* Scrolls to a given x, y offset, either immediately or with a smooth animation.\n     * Syntax:\n     *\n     * scrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})\n     *\n     * Note: The weird argument signature is due to the fact that, for historical reasons,\n     * the function also accepts separate arguments as as alternative to the options object.\n     * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.",
        "* Returns a reference to the underlying scroll responder, which supports\n     * operations like `scrollTo`. All ScrollView-like components should\n     * implement this method so that they can be composed while providing access\n     * to the underlying scroll responder's methods.",
        "* Data source wrapper around ListViewDataSource to allow for tracking of\n   * which row is swiped open and close opened row(s) when another row is swiped\n   * open.\n   *\n   * See https://github.com/facebook/react-native/pull/5602 for why\n   * ListViewDataSource is not subclassed.",
        "* To alert the user that swiping is possible, the first row can bounce\n     * on component mount.",
        "* Use `SwipeableListView.getNewDataSource()` to get a data source to use,\n     * then use it just like you would a normal ListView data source",
        "* A container component that renders multiple SwipeableRow's in a ListView\n   * implementation. This is designed to be a drop-in replacement for the\n   * standard React Native `ListView`, so use it as if it were a ListView, but\n   * with extra props, i.e.\n   *\n   * let ds = SwipeableListView.getNewDataSource();\n   * ds.cloneWithRowsAndSections(dataBlob, ?sectionIDs, ?rowIDs);\n   * // ..\n   * <SwipeableListView renderRow={..} renderQuickActions={..} {..ListView props} />\n   *\n   * SwipeableRow can be used independently of this component, but the main\n   * benefit of using this component is\n   *\n   * - It ensures that at most 1 row is swiped open (auto closes others)\n   * - It can bounce the 1st row of the list so users know it's swipeable\n   * - More to come",
        "* @see: http://facebook.github.io/react-native/docs/actionsheetios.html#content",
        "* @see https://facebook.github.io/react-native/docs/actionsheetios.html#content",
        "* Display an iOS action sheet. The `options` object must contain one or more\n     * of:\n     * - `options` (array of strings) - a list of button titles (required)\n     * - `cancelButtonIndex` (int) - index of cancel button in `options`\n     * - `destructiveButtonIndex` (int) - index of destructive button in `options`\n     * - `title` (string) - a title to show above the action sheet\n     * - `message` (string) - a message to show below the title",
        "* Display the iOS share sheet. The `options` object should contain\n     * one or both of `message` and `url` and can additionally have\n     * a `subject` or `excludedActivityTypes`:\n     *\n     * - `url` (string) - a URL to share\n     * - `message` (string) - a message to share\n     * - `subject` (string) - a subject for the message\n     * - `excludedActivityTypes` (array) - the activities to exclude from the ActionSheet\n     *\n     * NOTE: if `url` points to a local file, or is a base64-encoded\n     * uri, the file it points to will be loaded and shared directly.\n     * In this way, you can share images, videos, PDF files, etc.",
        "* Open a dialog to share text content.\n     *\n     * In iOS, Returns a Promise which will be invoked an object containing `action`, `activityType`.\n     * If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction`\n     * and all the other keys being undefined.\n     *\n     * In Android, Returns a Promise which always be resolved with action being `Share.sharedAction`.\n     *\n     * ### Content\n     *\n     *  - `message` - a message to share\n     *  - `title` - title of the message\n     *\n     * #### iOS\n     *\n     *  - `url` - an URL to share\n     *\n     * At least one of URL and message is required.\n     *\n     * ### Options\n     *\n     * #### iOS\n     *\n     * - `excludedActivityTypes`\n     * - `tintColor`\n     *\n     * #### Android\n     *\n     * - `dialogTitle`\n     *",
        "* @see https://facebook.github.io/react-native/docs/alert.html#content",
        "* Launches an alert dialog with the specified title and message.\n   *\n   * Optionally provide a list of buttons. Tapping any button will fire the\n   * respective onPress callback and dismiss the alert. By default, the only\n   * button will be an 'OK' button.\n   *\n   * This is an API that works both on iOS and Android and can show static\n   * alerts. To show an alert that prompts the user to enter some information,\n   * see `AlertIOS`; entering text in an alert is common on iOS only.\n   *\n   * ## iOS\n   *\n   * On iOS you can specify any number of buttons. Each button can optionally\n   * specify a style, which is one of 'default', 'cancel' or 'destructive'.\n   *\n   * ## Android\n   *\n   * On Android at most three buttons can be specified. Android has a concept\n   * of a neutral, negative and a positive button:\n   *\n   *   - If you specify one button, it will be the 'positive' one (such as 'OK')\n   *   - Two buttons mean 'negative', 'positive' (such as 'Cancel', 'OK')\n   *   - Three buttons mean 'neutral', 'negative', 'positive' (such as 'Later', 'Cancel', 'OK')\n   *\n   * ```\n   * // Works on both iOS and Android\n   * Alert.alert(\n   *   'Alert Title',\n   *   'My Alert Msg',\n   *   [\n   *     {text: 'Ask me later', onPress: () => console.log('Ask me later pressed')},\n   *     {text: 'Cancel', onPress: () => console.log('Cancel Pressed'), style: 'cancel'},\n   *     {text: 'OK', onPress: () => console.log('OK Pressed')},\n   *   ]\n   * )\n   * ```",
        "* Wrapper around the Android native module.",
        "* //FIXME: No documentation - inferred from RCTAdSupport.m",
        "* @description\n   * `AlertIOS` provides functionality to create an iOS alert dialog with a\n   * message or create a prompt for user input.\n   *\n   * We recommend using the [`Alert.alert`](/docs/alert.html) method for\n   * cross-platform support if you don't need to create iOS-only prompts.\n   *\n   * @see https://facebook.github.io/react-native/docs/alertios.html#content",
        "* Create and display a popup alert.\n     * @static\n     * @method alert\n     * @param title The dialog's title.\n     * @param message An optional message that appears below\n     *     the dialog's title.\n     * @param callbackOrButtons This optional argument should\n     *    be either a single-argument function or an array of buttons. If passed\n     *    a function, it will be called when the user taps 'OK'.\n     *\n     *    If passed an array of button configurations, each button should include\n     *    a `text` key, as well as optional `onPress` and `style` keys. `style`\n     *    should be one of 'default', 'cancel' or 'destructive'.\n     * @param type Deprecated, do not use.",
        "* Create and display a prompt to enter some text.\n     * @static\n     * @method prompt\n     * @param title The dialog's title.\n     * @param message An optional message that appears above the text\n     *    input.\n     * @param callbackOrButtons This optional argument should\n     *    be either a single-argument function or an array of buttons. If passed\n     *    a function, it will be called with the prompt's value when the user\n     *    taps 'OK'.\n     *\n     *    If passed an array of button configurations, each button should include\n     *    a `text` key, as well as optional `onPress` and `style` keys (see\n     *    example). `style` should be one of 'default', 'cancel' or 'destructive'.\n     * @param type This configures the text input. One of 'plain-text',\n     *    'secure-text' or 'login-password'.\n     * @param defaultValue The default text in text input.",
        "* AppStateIOS can tell you if the app is in the foreground or background,\n   * and notify you when the state changes.\n   *\n   * AppStateIOS is frequently used to determine the intent and proper behavior\n   * when handling push notifications.\n   *\n   * iOS App States\n   *      active - The app is running in the foreground\n   *      background - The app is running in the background. The user is either in another app or on the home screen\n   *      inactive - This is a transition state that currently never happens for typical React Native apps.\n   *\n   * For more information, see Apple's documentation: https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html\n   *\n   * @see https://facebook.github.io/react-native/docs/appstateios.html#content",
        "* Add a handler to AppState changes by listening to the change event\n     * type and providing the handler",
        "* Remove a handler by passing the change event type and the handler",
        "* AsyncStorage is a simple, unencrypted, asynchronous, persistent, key-value storage\n   * system that is global to the app.  It should be used instead of LocalStorage.\n   *\n   * It is recommended that you use an abstraction on top of `AsyncStorage`\n   * instead of `AsyncStorage` directly for anything more than light usage since\n   * it operates globally.\n   *\n   * On iOS, `AsyncStorage` is backed by native code that stores small values in a\n   * serialized dictionary and larger values in separate files. On Android,\n   * `AsyncStorage` will use either [RocksDB](http://rocksdb.org/) or SQLite\n   * based on what is available.\n   *\n   * @see https://facebook.github.io/react-native/docs/asyncstorage.html#content",
        "* Fetches key and passes the result to callback, along with an Error if there is any.",
        "* Sets value for key and calls callback on completion, along with an Error if there is any",
        "* Merges existing value with input value, assuming they are stringified json. Returns a Promise object.\n     * Not supported by all native implementation",
        "* Erases all AsyncStorage for all clients, libraries, etc. You probably don't want to call this.\n     * Use removeItem or multiRemove to clear only your own keys instead.",
        "* Gets all keys known to the app, for all callers, libraries, etc",
        "* multiGet invokes callback with an array of key-value pair arrays that matches the input format of multiSet",
        "* multiSet and multiMerge take arrays of key-value array pairs that match the output of multiGet,\n     *\n     * multiSet([['k1', 'val1'], ['k2', 'val2']], cb);",
        "* Delete all the keys in the keys array.",
        "* Merges existing values with input values, assuming they are stringified json.\n     * Returns a Promise object.\n     *\n     * Not supported by all native implementations.",
        "* Detect hardware back button presses, and programmatically invoke the\n   * default back button functionality to exit the app if there are no\n   * listeners or if none of the listeners return true.\n   * Methods don't have more detailed documentation as of 0.25.",
        "* CameraRoll provides access to the local camera roll / gallery.\n   * Before using this you must link the RCTCameraRoll library.\n   * You can refer to (Linking)[https://facebook.github.io/react-native/docs/linking-libraries-ios.html] for help.",
        "* Saves the image to the camera roll / gallery.\n     *\n     * @tag On Android, this is a local URI, such as \"file:///sdcard/img.png\".\n     * On iOS, the tag can be one of the following:\n     *      local URI\n     *      assets-library tag\n     *      a tag not maching any of the above, which means the image data will be stored in memory (and consume memory as long as the process is alive)\n     *\n     * @deprecated use saveToCameraRoll instead",
        "* Saves the photo or video to the camera roll / gallery.\n     *\n     * On Android, the tag must be a local image or video URI, such as `\"file:///sdcard/img.png\"`.\n     *\n     * On iOS, the tag can be any image URI (including local, remote asset-library and base64 data URIs)\n     * or a local video file URI (remote or data URIs are not supported for saving video at this time).\n     *\n     * If the tag has a file extension of .mov or .mp4, it will be inferred as a video. Otherwise\n     * it will be treated as a photo. To override the automatic choice, you can pass an optional\n     * `type` parameter that must be one of 'photo' or 'video'.\n     *\n     * Returns a Promise which will resolve with the new URI.",
        "* Saves the photo or video to the camera roll / gallery.\n     *\n     * On Android, the tag must be a local image or video URI, such as `\"file:///sdcard/img.png\"`.\n     *\n     * On iOS, the tag can be any image URI (including local, remote asset-library and base64 data URIs)\n     * or a local video file URI (remote or data URIs are not supported for saving video at this time).\n     *\n     * If the tag has a file extension of .mov or .mp4, it will be inferred as a video. Otherwise\n     * it will be treated as a photo. To override the automatic choice, you can pass an optional\n     * `type` parameter that must be one of 'photo' or 'video'.\n     *\n     * Returns a Promise which will resolve with the new URI.",
        "* Invokes callback with photo identifier objects from the local camera roll of the device matching shape defined by getPhotosReturnChecker.\n     *\n     * @param {object} params See getPhotosParamChecker.",
        "* A date has been selected.",
        "* The dialog has been dismissed.",
        "* eventName is expected to be `change`\n     * //FIXME: No doc - inferred from NetInfo.js",
        "* eventName is expected to be `change`\n     * //FIXME: No doc - inferred from NetInfo.js",
        "* Starts a corresponding external activity for the given URL.\n\n     For example, if the URL is \"https://www.facebook.com\", the system browser will be opened, or the \"choose application\" dialog will be shown.\n\n     You can use other URLs, like a location (e.g. \"geo:37.484847,-122.148386\"), a contact, or any other URL that can be opened with {@code Intent.ACTION_VIEW}.\n\n     NOTE: This method will fail if the system doesn't know how to open the specified URL. If you're passing in a non-http(s) URL, it's best to check {@code canOpenURL} first.\n\n     NOTE: For web URLs, the protocol (\"http://\", \"https://\") must be set accordingly!\n\n     @deprecated",
        "* Determine whether or not an installed app can handle a given URL.\n\n     You can use other URLs, like a location (e.g. \"geo:37.484847,-122.148386\"), a contact, or any other URL that can be opened with {@code Intent.ACTION_VIEW}.\n\n     NOTE: For web URLs, the protocol (\"http://\", \"https://\") must be set accordingly!\n\n     @param URL the URL to open\n\n     @deprecated",
        "* If the app launch was triggered by an app link with {@code Intent.ACTION_VIEW}, it will give the link url, otherwise it will give null\n\n     Refer http://developer.android.com/training/app-indexing/deep-linking.html#handling-intents\n\n     @deprecated",
        "* Add a handler to Linking changes by listening to the `url` event type\n     * and providing the handler",
        "* Remove a handler by passing the `url` event type and the handler",
        "* Try to open the given url with any of the installed apps.\n     * You can use other URLs, like a location (e.g. \"geo:37.484847,-122.148386\"), a contact, or any other URL that can be opened with the installed apps.\n     * NOTE: This method will fail if the system doesn't know how to open the specified URL. If you're passing in a non-http(s) URL, it's best to check {@code canOpenURL} first.\n     * NOTE: For web URLs, the protocol (\"http://\", \"https://\") must be set accordingly!",
        "* Determine whether or not an installed app can handle a given URL.\n     * NOTE: For web URLs, the protocol (\"http://\", \"https://\") must be set accordingly!\n     * NOTE: As of iOS 9, your app needs to provide the LSApplicationQueriesSchemes key inside Info.plist.\n     * @param URL the URL to open",
        "* If the app launch was triggered by an app link with, it will give the link url, otherwise it will give null\n     * NOTE: To support deep linking on Android, refer http://developer.android.com/training/app-indexing/deep-linking.html#handling-intents",
        "* Add a handler to LinkingIOS changes by listening to the url event type and providing the handler\n     @deprecated",
        "* Remove a handler by passing the url event type and the handler\n     @deprecated",
        "* Try to open the given url with any of the installed apps.\n     @deprecated",
        "* Determine whether or not an installed app can handle a given URL. The callback function will be called with bool supported as the only argument\n     NOTE: As of iOS 9, your app needs to provide the LSApplicationQueriesSchemes key inside Info.plist.\n     @deprecated",
        "* If the app launch was triggered by an app link, it will pop the link url, otherwise it will return null\n     @deprecated",
        "* NetInfo exposes info about online/offline status\n   *\n   * Asynchronously determine if the device is online and on a cellular network.\n   *\n   * - `none` - device is offline\n   * - `wifi` - device is online and connected via wifi, or is the iOS simulator\n   * - `cell` - device is connected via Edge, 3G, WiMax, or LTE\n   * - `unknown` - error case and the network status is unknown\n   * @see https://facebook.github.io/react-native/docs/netinfo.html#content",
        "*\n     * Available on all platforms.\n     * Asynchronously fetch a boolean to determine internet connectivity.",
        "* Available on Android. Detect if the current active connection is\n     * metered or not. A network is classified as metered when the user is\n     * sensitive to heavy data usage on that connection due to monetary\n     * costs, data limitations or battery/performance issues.",
        "*  ID of the gestureState- persisted as long as there at least one touch on",
        "*  the latest screen coordinates of the recently-moved touch",
        "*  the latest screen coordinates of the recently-moved touch",
        "* the screen coordinates of the responder grant",
        "* the screen coordinates of the responder grant",
        "* accumulated distance of the gesture since the touch started",
        "* accumulated distance of the gesture since the touch started",
        "* current velocity of the gesture",
        "* current velocity of the gesture",
        "* Number of touches currently on screen",
        "* @see documentation of GestureResponderHandlers",
        "* PanResponder reconciles several touches into a single gesture.\n   * It makes single-touch gestures resilient to extra touches,\n   * and can be used to recognize simple multi-touch gestures.\n   *\n   * It provides a predictable wrapper of the responder handlers provided by the gesture responder system.\n   * For each handler, it provides a new gestureState object alongside the normal event.",
        "* @param config Enhanced versions of all of the responder callbacks\n     * that provide not only the typical `ResponderSyntheticEvent`, but also the\n     * `PanResponder` gesture state.  Simply replace the word `Responder` with\n     * `PanResponder` in each of the typical `onResponder*` callbacks. For\n     * example, the `config` object would look like:\n     *\n     *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onPanResponderReject: (e, gestureState) => {...}`\n     *  - `onPanResponderGrant: (e, gestureState) => {...}`\n     *  - `onPanResponderStart: (e, gestureState) => {...}`\n     *  - `onPanResponderEnd: (e, gestureState) => {...}`\n     *  - `onPanResponderRelease: (e, gestureState) => {...}`\n     *  - `onPanResponderMove: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n     *\n     *  In general, for events that have capture equivalents, we update the\n     *  gestureState once in the capture phase and can use it in the bubble phase\n     *  as well.\n     *\n     *  Be careful with onStartShould* callbacks. They only reflect updated\n     *  `gestureState` for start/end events that bubble/capture to the Node.\n     *  Once the node is the responder, you can rely on every start/end event\n     *  being processed by the gesture and `gestureState` being updated\n     *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n     *  are the responder.",
        "* A list of specified \"dangerous\" permissions that require prompting the user",
        "* Returns a promise resolving to a boolean value as to whether the specified\n     * permissions has been granted",
        "* Prompts the user to enable a permission and returns a promise resolving to a\n     * boolean value indicating whether the user allowed or denied the request\n     *\n     * If the optional rationale argument is included (which is an object with a\n     * `title` and `message`), this function checks with the OS whether it is\n     * necessary to show a dialog explaining why the permission is needed\n     * (https://developer.android.com/training/permissions/requesting.html#explain)\n     * and then shows the system permission dialog",
        "* An alias for `getAlert` to get the notification's main message string",
        "* Gets the sound string from the `aps` object",
        "* Gets the notification's main message from the `aps` object",
        "* Gets the badge count number from the `aps` object",
        "* Gets the data object on the notif",
        "* Handle push notifications for your app, including permission handling and icon badge number.\n   * @see https://facebook.github.io/react-native/docs/pushnotificationios.html#content\n   *\n   * //FIXME: BGR: The documentation seems completely off compared to the actual js implementation. I could never get the example to run",
        "* Schedules the localNotification for immediate presentation.\n     * details is an object containing:\n     * alertBody : The message displayed in the notification alert.\n     * alertAction : The \"action\" displayed beneath an actionable notification. Defaults to \"view\";\n     * soundName : The sound played when the notification is fired (optional).\n     * category : The category of this notification, required for actionable notifications (optional).\n     * userInfo : An optional object containing additional notification data.\n     * applicationIconBadgeNumber (optional) : The number to display as the app's icon badge. The default value of this property is 0, which means that no badge is displayed.",
        "* Schedules the localNotification for future presentation.\n     * details is an object containing:\n     * fireDate : The date and time when the system should deliver the notification.\n     * alertBody : The message displayed in the notification alert.\n     * alertAction : The \"action\" displayed beneath an actionable notification. Defaults to \"view\";\n     * soundName : The sound played when the notification is fired (optional).\n     * category : The category of this notification, required for actionable notifications (optional).\n     * userInfo : An optional object containing additional notification data.\n     * applicationIconBadgeNumber (optional) : The number to display as the app's icon badge. Setting the number to 0 removes the icon badge.",
        "* Cancels all scheduled localNotifications",
        "* Cancel local notifications.\n     * Optionally restricts the set of canceled notifications to those notifications whose userInfo fields match the corresponding fields in the userInfo argument.",
        "* Sets the badge number for the app icon on the home screen",
        "* Gets the current badge number for the app icon on the home screen",
        "* Gets the local notifications that are currently scheduled.",
        "* Attaches a listener to remote notifications while the app is running in the\n     * foreground or the background.\n     *\n     * The handler will get be invoked with an instance of `PushNotificationIOS`\n     *\n     * The type MUST be 'notification'",
        "* Removes the event listener. Do this in `componentWillUnmount` to prevent\n     * memory leaks",
        "* Requests all notification permissions from iOS, prompting the user's\n     * dialog box.",
        "* Requests all notification permissions from iOS, prompting the user's\n     * dialog box.",
        "* Unregister for all remote notifications received via Apple Push\n     * Notification service.\n     * You should call this method in rare circumstances only, such as when\n     * a new version of the app removes support for all types of remote\n     * notifications. Users can temporarily prevent apps from receiving\n     * remote notifications through the Notifications section of the\n     * Settings app. Apps unregistered through this method can always\n     * re-register.",
        "* See what push permissions are currently enabled. `callback` will be\n     * invoked with a `permissions` object:\n     *\n     *  - `alert` :boolean\n     *  - `badge` :boolean\n     *  - `sound` :boolean",
        "* This method returns a promise that resolves to either the notification\n     * object if the app was launched by a push notification, or `null` otherwise.",
        "* @enum('default', 'light-content')",
        "* @enum('fade', 'slide')",
        "* Sets the color of the status bar text.",
        "* If the network activity indicator should be visible.",
        "* The transition effect when showing and hiding the status bar using\n     * the hidden prop. Defaults to 'fade'.",
        "* The background color of the status bar.",
        "* If the status bar is translucent. When translucent is set to true,\n     * the app will draw under the status bar. This is useful when using a\n     * semi transparent status bar color.",
        "* If the transition between status bar property changes should be\n     * animated. Supported for backgroundColor, barStyle and hidden.",
        "* If the status bar is hidden.",
        "* The current height of the status bar on the device.\n     * @platform android",
        "* Show or hide the status bar\n     * @param hidden The dialog's title.\n     * @param animation Optional animation when\n     *    changing the status bar hidden property.",
        "* Set the status bar style\n     * @param style Status bar style to set\n     * @param animated Animate the style change.",
        "* Control the visibility of the network activity indicator\n     * @param visible Show the indicator.",
        "* Set the background color for the status bar\n     * @param color Background color.\n     * @param animated Animate the style change.",
        "* Control the translucency of the status bar\n     * @param translucent Set as translucent.",
        "* StatusBarIOS is deprecated.\n   * Use `StatusBar` for mutating the status bar.",
        "* Opens the standard Android time picker dialog.\n   *\n   * ### Example\n   *\n   * ```\n   * try {\n   *   const {action, hour, minute} = await TimePickerAndroid.open({\n   *     hour: 14,\n   *     minute: 0,\n   *     is24Hour: false, // Will display '2 PM'\n   *   });\n   *   if (action !== TimePickerAndroid.dismissedAction) {\n   *     // Selected hour (0-23), minute (0-59)\n   *   }\n   * } catch ({code, message}) {\n   *   console.warn('Cannot open time picker', message);\n   * }\n   * ```",
        "* Opens the standard Android time picker dialog.\n     *\n     * The available keys for the `options` object are:\n     *   * `hour` (0-23) - the hour to show, defaults to the current time\n     *   * `minute` (0-59) - the minute to show, defaults to the current time\n     *   * `is24Hour` (boolean) - If `true`, the picker uses the 24-hour format. If `false`,\n     *     the picker shows an AM/PM chooser. If undefined, the default for the current locale\n     *     is used.\n     *\n     * Returns a Promise which will be invoked an object containing `action`, `hour` (0-23),\n     * `minute` (0-59) if the user picked a time. If the user dismissed the dialog, the Promise will\n     * still be resolved with action being `TimePickerAndroid.dismissedAction` and all the other keys\n     * being undefined. **Always** check whether the `action` before reading the values.",
        "* A time has been selected.",
        "* The dialog has been dismissed.",
        "* This exposes the native ToastAndroid module as a JS module. This has a function 'show'\n   * which takes the following parameters:\n   *\n   * 1. String message: A string with the text to toast\n   * 2. int duration: The duration of the toast. May be ToastAndroid.SHORT or ToastAndroid.LONG\n   *\n   * There is also a function `showWithGravity` to specify the layout gravity. May be\n   * ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER",
        "* String message: A string with the text to toast\n     * int duration: The duration of the toast.\n     * May be ToastAndroid.SHORT or ToastAndroid.LONG",
        "* Capture an image of the screen, window or an individual view. The image\n     * will be stored in a temporary file that will only exist for as long as the\n     * app is running.\n     *\n     * The `view` argument can be the literal string `window` if you want to\n     * capture the entire window, or it can be a reference to a specific\n     * React Native component.\n     *\n     * The `options` argument may include:\n     * - width/height (number) - the width and height of the image to capture.\n     * - format (string) - either 'png' or 'jpeg'. Defaults to 'png'.\n     * - quality (number) - the quality when using jpeg. 0.0 - 1.0 (default).\n     *\n     * Returns a Promise<string> (tempFilePath)\n     * @platform ios",
        "* Background color when the switch is turned on.",
        "* Color of the foreground switch grip.",
        "* Background color when the switch is turned off.",
        "* If true the user won't be able to toggle the switch.\n     * Default value is false.",
        "* Invoked with the new value when the value changes.",
        "* Used to locate this view in end-to-end tests.",
        "* The value of the switch. If true the switch will be turned on.\n     * Default value is false.",
        "* Renders a boolean input.\n   *\n   * This is a controlled component that requires an `onValueChange` callback that\n   * updates the `value` prop in order for the component to reflect user actions.\n   * If the `value` prop is not updated, the component will continue to render\n   * the supplied `value` prop instead of the expected result of any user actions.",
        "* NOTE: `VibrationIOS` is being deprecated. Use `Vibration` instead.\n   *\n   * The Vibration API is exposed at VibrationIOS.vibrate().\n   * On iOS, calling this function will trigger a one second vibration.\n   * The vibration is asynchronous so this method will return immediately.\n   *\n   * There will be no effect on devices that do not support Vibration, eg. the iOS simulator.\n   *\n   * Vibration patterns are currently unsupported.\n   *\n   * @see https://facebook.github.io/react-native/docs/vibrationios.html#content",
        "* @deprecated",
        "* The Vibration API is exposed at `Vibration.vibrate()`.\n   * The vibration is asynchronous so this method will return immediately.\n   *\n   * There will be no effect on devices that do not support Vibration, eg. the simulator.\n   *\n   * **Note for android**\n   * add `<uses-permission android:name=\"android.permission.VIBRATE\"/>` to `AndroidManifest.xml`\n   *\n   * **Android Usage:**\n   *\n   * [0, 500, 200, 500]\n   * V(0.5s) --wait(0.2s)--> V(0.5s)\n   *\n   * [300, 500, 200, 500]\n   * --wait(0.3s)--> V(0.5s) --wait(0.2s)--> V(0.5s)\n   *\n   * **iOS Usage:**\n   * if first argument is 0, it will not be included in pattern array.\n   *\n   * [0, 1000, 2000, 3000]\n   * V(fixed) --wait(1s)--> V(fixed) --wait(2s)--> V(fixed) --wait(3s)--> V(fixed)",
        "* Stop vibration",
        "* This class implements common easing functions. The math is pretty obscure,\n   * but this cool website has nice visual illustrations of what they represent:\n   * http://xaedes.de/dev/transitions/",
        "* Standard value for driving animations.  One `Animated.Value` can drive\n     * multiple properties in a synchronized fashion, but can only be driven by one\n     * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n     * or calling `setValue`) will stop any previous ones.",
        "* Directly set the value.  This will stop any animations running on the value\n       * and update all the bound properties.",
        "* Sets an offset that is applied on top of whatever value is set, whether via\n       * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n       * things like the start of a pan gesture.",
        "* Merges the offset value into the base value and resets the offset to zero.\n       * The final output of the value is unchanged.",
        "* Adds an asynchronous listener to the value so you can observe updates from\n       * animations.  This is useful because there is no way to\n       * synchronously read the value because it might be driven natively.",
        "* Stops any running animation or tracking.  `callback` is invoked with the\n       * final value after stopping the animation, which is useful for updating\n       * state to match the animation position with layout.",
        "* Interpolates the value before updating the property, e.g. mapping 0-1 to\n       * 0-10.",
        "* 2D Value for driving 2D animations, such as pan gestures.  Almost identical\n     * API to normal `Animated.Value`, but multiplexed.  Contains two regular\n     * `Animated.Value`s under the hood.",
        "* Converts `{x, y}` into `{left, top}` for use in style, e.g.\n       *\n       *```javascript\n       *  style={this.state.anim.getLayout()}\n       *```",
        "* Converts `{x, y}` into a useable translation transform, e.g.\n       *\n       *```javascript\n       *  style={{\n       *    transform: this.state.anim.getTranslateTransform()\n       *  }}\n       *```",
        "* Animates a value from an initial velocity to zero based on a decay\n     * coefficient.",
        "* Animates a value along a timed easing curve.  The `Easing` module has tons\n     * of pre-defined curves, or you can use your own function.",
        "* Creates a new Animated value composed from two Animated values added\n     * together.",
        "* Creates a new Animated value composed from two Animated values multiplied\n     * together.",
        "* Creates a new Animated value that is the (non-negative) modulo of the\n     * provided Animated value",
        "* Create a new Animated value that is limited between 2 values. It uses the\n   * difference between the last value so even if the value is far from the bounds\n   * it will start changing when the value starts getting closer again.\n   * (`value = clamp(value + diff, min, max)`).\n   *\n   * This is useful with scroll events, for example, to show the navbar when\n   * scrolling up and to hide it when scrolling down.",
        "* Starts an animation after the given delay.",
        "* Starts an array of animations in order, waiting for each to complete\n     * before starting the next.  If the current running animation is stopped, no\n     * following animations will be started.",
        "* Array of animations may run in parallel (overlap), but are started in\n     * sequence with successive delays.  Nice for doing trailing effects.",
        "* Spring animation based on Rebound and Origami.  Tracks velocity state to\n     * create fluid motions as the `toValue` updates, and can be chained together.",
        "* Starts an array of animations all at the same time.  By default, if one\n     * of the animations is stopped, they will all be stopped.  You can override\n     * this with the `stopTogether` flag.",
        "*  Takes an array of mappings and extracts values from each arg accordingly,\n     *  then calls `setValue` on the mapped outputs.  e.g.\n     *\n     *```javascript\n     *  onScroll={Animated.event(\n     *    [{nativeEvent: {contentOffset: {x: this._scrollX}}}]\n     *    {listener},          // Optional async listener\n     *  )\n     *  ...\n     *  onPanResponderMove: Animated.event([\n     *    null,                // raw event arg ignored\n     *    {dx: this._panX},    // gestureState arg\n     *  ]),\n     *```",
        "* Make any React component Animatable.  Used to create `Animated.View`, etc.",
        "* Animated variants of the basic native views. Accepts Animated.Value for\n       * props and style.",
        "* Invokes the success callback once with the latest location info.  Supported\n     * options: timeout (ms), maximumAge (ms), enableHighAccuracy (bool)\n     * On Android, this can return almost immediately if the location is cached or\n     * request an update, which might take a while.",
        "* Invokes the success callback whenever the location changes.  Supported\n     * options: timeout (ms), maximumAge (ms), enableHighAccuracy (bool), distanceFilter(m)",
        "* Check if the ImageStore contains image data for the specified URI.\n     * @platform ios",
        "* Delete an image from the ImageStore. Images are stored in memory and\n     * must be manually removed when you are finished with them, otherwise they\n     * will continue to use up RAM until the app is terminated. It is safe to\n     * call `removeImageForTag()` without first calling `hasImageForTag()`, it\n     * will simply fail silently.\n     * @platform ios",
        "* Stores a base64-encoded image in the ImageStore, and returns a URI that\n     * can be used to access or display the image later. Images are stored in\n     * memory only, and must be manually deleted when you are finished with\n     * them by calling `removeImageForTag()`.\n     *\n     * Note that it is very inefficient to transfer large quantities of binary\n     * data between JS and native code, so you should avoid calling this more\n     * than necessary.\n     * @platform ios",
        "* Retrieves the base64-encoded data for an image in the ImageStore. If the\n     * specified URI does not match an image in the store, the failure callback\n     * will be called.\n     *\n     * Note that it is very inefficient to transfer large quantities of binary\n     * data between JS and native code, so you should avoid calling this more\n     * than necessary. To display an image in the ImageStore, you can just pass\n     * the URI to an `<Image/>` component; there is no need to retrieve the\n     * base64 data.",
        "* Custom style applied to the card.",
        "* Direction of the cards movement. Value could be `horizontal` or\n     * `vertical`. Default value is `horizontal`.",
        "* The distance from the edge of the card which gesture response can start\n     * for. Defaults value is `30`.",
        "* Enable gestures. Default value is true",
        "* The controlled navigation state. Typically, the navigation state\n     * look like this:\n     *\n     * ```js\n     * const navigationState = {\n     *   index: 0, // the index of the selected route.\n     *   routes: [ // A list of routes.\n     *     {key: 'page 1'}, // The 1st route.\n     *     {key: 'page 2'}, // The second route.\n     *   ],\n     * };\n     * ```",
        "* Callback that is called when the \"back\" action is performed.\n     * This happens when the back button is pressed or the back gesture is\n     * performed.",
        "* Function that renders the header.",
        "* Function that renders the a scene for a route.",
        "* Custom style applied to the cards stack.",
        "* Utilities to perform atomic operation with navigate state and routes.\n   *\n   * ```javascript\n   * const state1 = {key: 'page 1'};\n   * const state2 = NavigationStateUtils.push(state1, {key: 'page 2'});\n   * ```",
        "* Call this method to un-subscribe from a native-event",
        "* Receive events from native-code\n   * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n   * adding all event listeners directly to RCTNativeAppEventEmitter.\n   * @see https://github.com/facebook/react-native/blob/0.34-stable\\Libraries\\EventEmitter\\RCTNativeAppEventEmitter.js\n   * @see https://facebook.github.io/react-native/docs/native-modules-ios.html#sending-events-to-javascript",
        "* The top-left corner of the cropped image, specified in the original\n     * image's coordinate space.",
        "* The size (dimensions) of the cropped image, specified in the original\n     * image's coordinate space.",
        "* (Optional) size to scale the cropped image to.",
        "* (Optional) the resizing mode to use when scaling the image. If the\n     * `displaySize` param is not specified, this has no effect.",
        "* Crop the image specified by the URI param. If URI points to a remote\n     * image, it will be downloaded automatically. If the image cannot be\n     * loaded/downloaded, the failure callback will be called.\n     *\n     * If the cropping process is successful, the resultant cropped image\n     * will be stored in the ImageStore, and the URI returned in the success\n     * callback will point to the image in the store. Remember to delete the\n     * cropped image from the ImageStore when you are done with it.",
        "* Abstract base class for implementing event-emitting modules. This implements\n   * a subset of the standard EventEmitter node module API.",
        "* Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n   * adding all event listeners directly to RCTNativeAppEventEmitter.",
        "* Native Modules written in ObjectiveC/Swift/Java exposed via the RCTBridge\n   * Define lazy getters for each module. These will return the module if already loaded, or load it if not.\n   * See https://facebook.github.io/react-native/docs/native-modules-ios.html\n   * Use:\n   * <code>const MyModule = NativeModules.ModuleName</code>",
        "* Used to create React components that directly wrap native component\n   * implementations.  Config information is extracted from data exported from the\n   * UIManager module.  You should also wrap the native component in a\n   * hand-written component with full propTypes definitions and other\n   * documentation - pass the hand-written component in as `componentInterface` to\n   * verify all the native props are documented via `propTypes`.\n   *\n   * If some native props shouldn't be exposed in the wrapper interface, you can\n   * pass null for `componentInterface` and call `verifyPropTypes` directly\n   * with `nativePropsToIgnore`;\n   *\n   * Common types are lined up with the appropriate prop differs with\n   * `TypeToDifferMap`.  Non-scalar types not in the map default to `deepDiffer`.",
        "* Accepts a function as its only argument and calls that function before the next repaint.\n     * It is an essential building block for animations that underlies all of the JavaScript-based animation APIs.\n     * In general, you shouldn't need to call this yourself - the animation API's will manage frame updates for you.\n     * @see https://facebook.github.io/react-native/docs/animations.html#requestanimationframe",
        "* This variable is set to true when react-native is running in Dev mode\n * Typical usage:\n * <code> if (__DEV__) console.log('Running in dev mode')</code>"
    ],
    "functions": [],
    "classes": [
        "AppRegistry",
        "Animated",
        "AnimatedWithChildren",
        "AnimatedInterpolation",
        "Value",
        "ValueXY",
        "AnimatedAddition",
        "AnimatedMultiplication",
        "AnimatedModulo",
        "AnimatedDiffClamp"
    ]
}