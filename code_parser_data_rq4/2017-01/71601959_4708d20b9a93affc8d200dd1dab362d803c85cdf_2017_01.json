{
    "identifiers": [
        "print_function",
        "keras",
        "backend",
        "K",
        "keras",
        "layers",
        "Convolution2D",
        "MaxPooling2D",
        "BatchNormalization",
        "keras",
        "layers",
        "Flatten",
        "Dense",
        "Input",
        "Activation",
        "keras",
        "models",
        "Model",
        "include_top",
        "weights",
        "input_tensor",
        "K",
        "image_dim_ordering",
        "include_top",
        "include_top",
        "input_tensor",
        "Input",
        "shape",
        "input_shape",
        "K",
        "is_keras_tensor",
        "input_tensor",
        "Input",
        "tensor",
        "input_tensor",
        "input_tensor",
        "Convolution2D",
        "border_mode",
        "name",
        "img_input",
        "Activation",
        "x",
        "BatchNormalization",
        "x",
        "MaxPooling2D",
        "strides",
        "name",
        "x",
        "Convolution2D",
        "border_mode",
        "name",
        "x",
        "Activation",
        "x",
        "BatchNormalization",
        "x",
        "include_top",
        "Flatten",
        "name",
        "x",
        "Dense",
        "activation",
        "name",
        "x",
        "Model",
        "img_input",
        "x",
        "weights",
        "m"
    ],
    "literals": [
        "'imagenet'",
        "'th'",
        "'same'",
        "'block1_conv1'",
        "'relu'",
        "'block1_pool'",
        "'same'",
        "'block1_conv2'",
        "'relu'",
        "'flatten'",
        "'sigmoid'",
        "'predictions'"
    ],
    "variables": [
        "input_shape",
        "input_shape",
        "input_shape",
        "input_shape",
        "img_input",
        "img_input",
        "img_input",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "m"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Determine proper input shape based on tensorflow or theano as a backend",
        "Block 1",
        "x = MaxPooling2D((2, 2), strides=(2, 2), name='block1_pool')(x)",
        "",
        "# Block 2",
        "x = Convolution2D(128, 3, 3, border_mode='same', name='block2_conv1')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = Convolution2D(128, 3, 3, border_mode='same', name='block2_conv2')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = MaxPooling2D((2, 2), strides=(2, 2), name='block2_pool')(x)",
        "",
        "# Block 3",
        "x = Convolution2D(256, 3, 3, border_mode='same', name='block3_conv1')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = Convolution2D(256, 3, 3, border_mode='same', name='block3_conv2')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = Convolution2D(256, 3, 3, border_mode='same', name='block3_conv3')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = MaxPooling2D((2, 2), strides=(2, 2), name='block3_pool')(x)",
        "",
        "# Block 4",
        "x = Convolution2D(512, 3, 3, border_mode='same', name='block4_conv1')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = Convolution2D(512, 3, 3, border_mode='same', name='block4_conv2')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = Convolution2D(512, 3, 3, border_mode='same', name='block4_conv3')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = MaxPooling2D((2, 2), strides=(2, 2), name='block4_pool')(x)",
        "",
        "# Block 5",
        "x = Convolution2D(512, 3, 3, border_mode='same', name='block5_conv1')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = Convolution2D(512, 3, 3, border_mode='same', name='block5_conv2')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = Convolution2D(512, 3, 3, border_mode='same', name='block5_conv3')(x)",
        "x = PReLU()(x)",
        "x = BatchNormalization()(x)",
        "",
        "x = MaxPooling2D((2, 2), strides=(2, 2), name='block5_pool')(x)",
        "Classification block",
        "x = Dense(16, name='fc1')(x)",
        "x = PReLU()(x)",
        "x = Dense(16, name='fc2')(x)",
        "x = PReLU()(x)",
        "x = Dense(32, activation='softmax')(x)",
        "x = PReLU()(x)",
        "Create model",
        "load weights",
        "TODO Load weights"
    ],
    "docstrings": [
        "\"\"\"\nVGG16 model for Keras.\n# Reference:\n- [Very Deep Convolutional Networks for Large-Scale Image Recognition](https://arxiv.org/abs/1409.1556)\n\"\"\"",
        "\"\"\"\n    Instantiate the VGG16 architecture\n    :param include_top: whether to include the 3 fully-connected\n                        layers at the top of the network.\n    :param weights:\n    :param input_tensor: optional Keras tensor (i.e. output of `layers.Input()`)\n                         to use as image input for the model.\n    :return:             a Keras model instance.\n    \"\"\""
    ],
    "functions": [
        "VGG16"
    ],
    "classes": []
}