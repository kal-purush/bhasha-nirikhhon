{
    "identifiers": [
        "com",
        "sendsafely",
        "java",
        "util",
        "com",
        "sendsafely",
        "enums",
        "PackageState",
        "packageId",
        "packageCode",
        "serverSecret",
        "keyCode",
        "files",
        "approverList",
        "needsApproval",
        "state",
        "life",
        "packageId",
        "packageId",
        "packageId",
        "packageId",
        "serverSecret",
        "serverSecret",
        "serverSecret",
        "serverSecret",
        "packageCode",
        "packageCode",
        "packageCode",
        "packageCode",
        "keyCode",
        "keyCode",
        "keyCode",
        "keyCode",
        "files",
        "files",
        "files",
        "files",
        "approverList",
        "approverList",
        "approverList",
        "approverList",
        "needsApproval",
        "needsApproval",
        "needsApproval",
        "needsApproval",
        "state",
        "state",
        "state",
        "state",
        "life",
        "life",
        "life",
        "life"
    ],
    "literals": [],
    "variables": [
        "packageId",
        "packageCode",
        "serverSecret",
        "keyCode",
        "files",
        "approverList",
        "needsApproval",
        "state",
        "life"
    ],
    "comments": [],
    "docstrings": [
        "* A Java Bean containing information about a package. \n * Only the Getters should be used from this object, since the server will populate the object. \n * Updating the setters will not change any state on the server and should be avoided.\n * @author Erik Larsson\n *",
        "* @description The package ID used to identify a given package\n\t * @return The package ID",
        "* @description Set internally by the API.\n\t * @param packageId",
        "* @description Get the server secret. The server secret is unique to a package and is used as part of the encryption key.\n\t * @return The server secret",
        "* @description Set internally by the API.\n\t * @param server secret",
        "* @description The package code is used in the link, sent out to the recipients. It will uniquely identify a package.\n\t * @return the package code",
        "* @description Set internally by the API.\n\t * @param packageCode",
        "* @description The key code is generated by the Java API when a new package is created. It must be passed into the API when a new file is uploaded and when the package is finalized. The key code is unique for every package.\n\t * @return",
        "* @description Set internally by the API.\n\t * @param keyCode",
        "* @description Get all files that are currently associated with the package\n\t * @returnType File\n\t * @return",
        "* @description Set internally by the API.\n\t * @param files",
        "* @description Returns a list of all potential approvers for the package.\n\t * @return",
        "* @description Set internally by the API.\n\t * @param approverList",
        "* @description Returns true if the package needs approval, false otherwise.\n\t * @return",
        "* @description Set internally by the API.\n\t * @param needsApproval",
        "* @description Returns the current state of the package. \n\t * @return",
        "* @description Set internally by the API.\n\t * @param state",
        "* @description Get the number of days the final package will be available for before it expires.\n\t * @return",
        "* @description Set internally by the API.\n\t * @param life"
    ],
    "functions": [
        "getPackageId",
        "setPackageId",
        "getServerSecret",
        "setServerSecret",
        "getPackageCode",
        "setPackageCode",
        "getKeyCode",
        "setKeyCode",
        "getFiles",
        "setFiles",
        "getApproverList",
        "setApproverList",
        "getNeedsApproval",
        "setNeedsApproval",
        "PackageState",
        "getState",
        "setState",
        "getLife",
        "setLife"
    ],
    "classes": [
        "BasePackage"
    ]
}