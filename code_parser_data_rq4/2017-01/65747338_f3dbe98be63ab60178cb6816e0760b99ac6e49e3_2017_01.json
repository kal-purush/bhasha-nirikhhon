{
    "identifiers": [
        "CLJ_TEXT_DELIMITER",
        "CLJ_TEXT_DELIMITER",
        "text",
        "text",
        "removeCljComments",
        "text",
        "getRelativeExpressionInfo",
        "text",
        "relativeExpressionInfo",
        "text",
        "relativeExpressionInfo",
        "functionName",
        "functionName",
        "functionName",
        "functionName",
        "functionName",
        "functionName",
        "R_CLJ_OPERATOR_DELIMITERS",
        "functionName",
        "relativeExpressionInfo",
        "text",
        "text",
        "lines",
        "lines",
        "line",
        "removeCljComments",
        "line",
        "lines",
        "line",
        "i",
        "line",
        "i",
        "line",
        "i",
        "CLJ_TEXT_DELIMITER",
        "insideString",
        "insideString",
        "line",
        "i",
        "CLJ_TEXT_ESCAPE",
        "line",
        "i",
        "CLJ_COMMENT_DELIMITER",
        "insideString",
        "uncommentedIndex",
        "i",
        "line",
        "uncommentedIndex",
        "text",
        "openChar",
        "text",
        "relativeExpressionInfo",
        "text",
        "relativeExpressionInfo",
        "openChar",
        "openChar",
        "CLJ_TEXT_DELIMITER",
        "text",
        "relativeExpressionInfo",
        "CLJ_TEXT_ESCAPE",
        "newParameterFound",
        "relativeExpressionInfo",
        "relativeExpressionInfo",
        "openChar",
        "CLJ_TEXT_DELIMITER",
        "relativeExpressionInfo",
        "CLJ_TEXT_DELIMITER",
        "containsValue",
        "CLJ_EXPRESSION_DELIMITERS",
        "R_CLJ_WHITE_SPACE",
        "newParameterFound",
        "relativeExpressionInfo",
        "newParameterFound",
        "relativeExpressionInfo",
        "CLJ_EXPRESSION_DELIMITERS",
        "expressionDelimiter",
        "getRelativeExpressionInfo",
        "text",
        "relativeExpressionInfo",
        "expressionDelimiter",
        "innerExpressionInfo",
        "relativeExpressionInfo",
        "innerExpressionInfo",
        "relativeExpressionInfo",
        "newParameterFound",
        "newParameterFound",
        "relativeExpressionInfo",
        "checkValue",
        "value",
        "value",
        "checkValue"
    ],
    "literals": [
        "'use strict'",
        "string",
        "\"",
        "\\\\",
        ";",
        "string",
        "string",
        "string",
        "string",
        "}",
        "{",
        ")",
        "(",
        "]",
        "[",
        "string",
        "string",
        "string",
        "\\n",
        "string",
        "string",
        "("
    ],
    "variables": [
        "CLJ_TEXT_DELIMITER",
        "CLJ_TEXT_ESCAPE",
        "CLJ_COMMENT_DELIMITER",
        "R_CLJ_WHITE_SPACE",
        "R_CLJ_OPERATOR_DELIMITERS",
        "CLJ_EXPRESSION_DELIMITERS",
        "relativeExpressionInfo",
        "functionName",
        "lines",
        "line",
        "uncommentedIndex",
        "insideString",
        "i",
        "relativeExpressionInfo",
        "newParameterFound",
        "expressionDelimiter",
        "innerExpressionInfo"
    ],
    "comments": [
        "{ close_char open_char }",
        "expression openning ignored",
        "trim left",
        "trim right according to operator delimiter",
        "split string by line",
        "remove comments from each line and concat them again after",
        "ignore comment delimiter inside a string",
        "check if found the beginning of the expression (string escape taken care of)",
        "ignore one parameter found if it's actually the function we're looking for",
        "ignore everything if searching inside a string",
        "invalid code if a beginning of an expression is found without being searched for",
        "keep searching if it's white space",
        "check for new expressions",
        "reached the beginning of the text without finding the start of the expression"
    ],
    "docstrings": [],
    "functions": [
        "getExpressionInfo",
        "removeCljComments",
        "getRelativeExpressionInfo",
        "containsValue"
    ],
    "classes": []
}