{
    "identifiers": [
        "Collections",
        "Generic",
        "SynchrotronNet",
        "file",
        "offset",
        "length",
        "Offset",
        "offset",
        "Length",
        "length",
        "Chunk",
        "file",
        "SliceJS",
        "offset",
        "offset",
        "length",
        "Side",
        "Conflict",
        "Left",
        "Old",
        "Right",
        "IComparable",
        "diff3Set",
        "diff3Set",
        "other",
        "file1offset",
        "other",
        "file1offset",
        "file1offset",
        "CompareTo",
        "other",
        "file1offset",
        "side",
        "CompareTo",
        "other",
        "side",
        "IMergeResultBlock",
        "IMergeResultBlock",
        "IMergeResultBlock",
        "file1",
        "file2",
        "CandidateThing",
        "CandidateThing",
        "candidates",
        "Add",
        "CandidateThing",
        "file1index",
        "file2index",
        "chain",
        "j",
        "file2",
        "Length",
        "j",
        "file2",
        "j",
        "equivalenceClasses",
        "ContainsKey",
        "line",
        "equivalenceClasses",
        "line",
        "Add",
        "j",
        "equivalenceClasses",
        "Add",
        "line",
        "j",
        "i",
        "file1",
        "Length",
        "i",
        "file1",
        "i",
        "equivalenceClasses",
        "ContainsKey",
        "line",
        "file2indices",
        "equivalenceClasses",
        "line",
        "file2indices",
        "candidates",
        "jX",
        "file2indices",
        "Count",
        "jX",
        "file2indices",
        "jX",
        "s",
        "r",
        "s",
        "candidates",
        "Count",
        "s",
        "candidates",
        "s",
        "file2index",
        "j",
        "s",
        "candidates",
        "Count",
        "candidates",
        "s",
        "file2index",
        "j",
        "s",
        "candidates",
        "Count",
        "CandidateThing",
        "file1index",
        "i",
        "file2index",
        "j",
        "chain",
        "candidates",
        "s",
        "candidates",
        "r",
        "c",
        "r",
        "s",
        "c",
        "newCandidate",
        "r",
        "candidates",
        "Count",
        "candidates",
        "r",
        "c",
        "candidates",
        "candidates",
        "Count",
        "commonOrDifferentThing",
        "common",
        "commonOrDifferentThing",
        "result",
        "common",
        "common",
        "Count",
        "common",
        "common",
        "Reverse",
        "result",
        "Add",
        "common",
        "common",
        "commonOrDifferentThing",
        "common",
        "commonOrDifferentThing",
        "file1",
        "file2",
        "commonOrDifferentThing",
        "file1",
        "Length",
        "file2",
        "Length",
        "commonOrDifferentThing",
        "common",
        "Diff",
        "longest_common_subsequence",
        "file1",
        "file2",
        "candidate",
        "candidate",
        "candidate",
        "chain",
        "commonOrDifferentThing",
        "file1",
        "file2",
        "tail1",
        "candidate",
        "file1index",
        "different",
        "file1",
        "Add",
        "file1",
        "tail1",
        "tail2",
        "candidate",
        "file2index",
        "different",
        "file2",
        "Add",
        "file2",
        "tail2",
        "different",
        "file1",
        "Count",
        "different",
        "file2",
        "Count",
        "processCommon",
        "common",
        "result",
        "different",
        "file1",
        "Reverse",
        "different",
        "file2",
        "Reverse",
        "result",
        "Add",
        "different",
        "tail1",
        "common",
        "common",
        "Add",
        "file1",
        "tail1",
        "processCommon",
        "common",
        "result",
        "result",
        "Reverse",
        "result",
        "patchResult",
        "file1",
        "file2",
        "patchResult",
        "file1",
        "Length",
        "file2",
        "Length",
        "Diff",
        "longest_common_subsequence",
        "file1",
        "file2",
        "candidate",
        "candidate",
        "candidate",
        "chain",
        "tail1",
        "candidate",
        "file1index",
        "tail2",
        "candidate",
        "file2index",
        "tail1",
        "candidate",
        "file1index",
        "tail2",
        "candidate",
        "file2index",
        "mismatchLength1",
        "mismatchLength2",
        "patchResult",
        "file1",
        "patchDescriptionThing",
        "file1",
        "candidate",
        "file1index",
        "mismatchLength1",
        "file2",
        "patchDescriptionThing",
        "file2",
        "candidate",
        "file2index",
        "mismatchLength2",
        "result",
        "Add",
        "thisResult",
        "result",
        "Reverse",
        "result",
        "patchResult",
        "patchResult",
        "patch",
        "patchResult",
        "i",
        "patch",
        "Count",
        "i",
        "patch",
        "i",
        "newpatch",
        "Add",
        "patchResult",
        "file1",
        "patchDescriptionThing",
        "Offset",
        "chunk",
        "file1",
        "Offset",
        "Length",
        "chunk",
        "file1",
        "Length",
        "file2",
        "patchDescriptionThing",
        "Chunk",
        "chunk",
        "file1",
        "Chunk",
        "newpatch",
        "patchResult",
        "patch",
        "i",
        "patch",
        "Count",
        "i",
        "patch",
        "i",
        "chunk",
        "file1",
        "chunk",
        "file1",
        "chunk",
        "file2",
        "chunk",
        "file2",
        "tmp",
        "targetOffset",
        "commonOffset",
        "file",
        "result",
        "commonOffset",
        "targetOffset",
        "result",
        "Add",
        "file",
        "commonOffset",
        "commonOffset",
        "file",
        "patchResult",
        "patch",
        "chunkIndex",
        "patch",
        "Count",
        "chunkIndex",
        "patch",
        "chunkIndex",
        "copyCommon",
        "chunk",
        "file1",
        "Offset",
        "commonOffset",
        "file",
        "result",
        "lineIndex",
        "chunk",
        "file2",
        "Chunk",
        "Count",
        "lineIndex",
        "result",
        "Add",
        "chunk",
        "file2",
        "Chunk",
        "lineIndex",
        "commonOffset",
        "chunk",
        "file1",
        "Length",
        "copyCommon",
        "file",
        "Length",
        "commonOffset",
        "file",
        "result",
        "result",
        "file1",
        "file2",
        "diff_patch",
        "file1",
        "file2",
        "chunkIndex",
        "diffPatches",
        "Count",
        "chunkIndex",
        "diffPatches",
        "chunkIndex",
        "chunk",
        "file2",
        "Length",
        "result",
        "AddRange",
        "file1",
        "SliceJS",
        "file1CompletedToOffset",
        "chunk",
        "file1",
        "Offset",
        "chunk",
        "file1",
        "Length",
        "file1CompletedToOffset",
        "chunk",
        "file1",
        "Offset",
        "chunk",
        "file1",
        "Length",
        "result",
        "AddRange",
        "chunk",
        "file2",
        "Chunk",
        "result",
        "AddRange",
        "file1",
        "SliceJS",
        "file1CompletedToOffset",
        "file1",
        "Length",
        "result",
        "diffSet",
        "file1",
        "file2",
        "diffSet",
        "file1",
        "Length",
        "file2",
        "Length",
        "Diff",
        "longest_common_subsequence",
        "file1",
        "file2",
        "candidate",
        "candidate",
        "candidate",
        "chain",
        "tail1",
        "candidate",
        "file1index",
        "tail2",
        "candidate",
        "file2index",
        "tail1",
        "candidate",
        "file1index",
        "tail2",
        "candidate",
        "file2index",
        "mismatchLength1",
        "mismatchLength2",
        "result",
        "Add",
        "diffSet",
        "file1",
        "chunkReference",
        "offset",
        "tail1",
        "length",
        "mismatchLength1",
        "file2",
        "chunkReference",
        "offset",
        "tail2",
        "length",
        "mismatchLength2",
        "result",
        "Reverse",
        "result",
        "diffSet",
        "h",
        "Side",
        "side",
        "diff3Set",
        "hunks",
        "hunks",
        "Add",
        "diff3Set",
        "side",
        "side",
        "file1offset",
        "h",
        "file1",
        "offset",
        "file1length",
        "h",
        "file1",
        "length",
        "file2offset",
        "h",
        "file2",
        "offset",
        "file2length",
        "h",
        "file2",
        "length",
        "targetOffset",
        "commonOffset",
        "patch3Set",
        "result",
        "targetOffset",
        "commonOffset",
        "result",
        "Add",
        "patch3Set",
        "side",
        "Side",
        "Old",
        "offset",
        "commonOffset",
        "length",
        "targetOffset",
        "commonOffset",
        "patch3Set",
        "a",
        "o",
        "b",
        "Diff",
        "diff_indices",
        "o",
        "a",
        "Diff",
        "diff_indices",
        "o",
        "b",
        "diff3Set",
        "i",
        "m1",
        "Count",
        "i",
        "addHunk",
        "m1",
        "i",
        "Side",
        "Left",
        "hunks",
        "i",
        "m2",
        "Count",
        "i",
        "addHunk",
        "m2",
        "i",
        "Side",
        "Right",
        "hunks",
        "hunks",
        "Sort",
        "patch3Set",
        "hunkIndex",
        "hunks",
        "Count",
        "hunkIndex",
        "hunks",
        "hunkIndex",
        "hunk",
        "file1offset",
        "regionLhs",
        "hunk",
        "file1length",
        "hunkIndex",
        "hunks",
        "Count",
        "hunks",
        "hunkIndex",
        "maybeOverlapping",
        "file1offset",
        "maybeLhs",
        "regionRhs",
        "regionRhs",
        "Max",
        "regionRhs",
        "maybeLhs",
        "maybeOverlapping",
        "file1length",
        "hunkIndex",
        "copyCommon2",
        "regionLhs",
        "commonOffset",
        "result",
        "firstHunkIndex",
        "hunkIndex",
        "hunk",
        "file2length",
        "result",
        "Add",
        "patch3Set",
        "side",
        "hunk",
        "side",
        "offset",
        "hunk",
        "file2offset",
        "length",
        "hunk",
        "file2length",
        "Side",
        "conflictRegion",
        "Side",
        "Left",
        "conflictRegion",
        "file1RegionStart",
        "a",
        "Length",
        "file1RegionEnd",
        "file2RegionStart",
        "o",
        "Length",
        "file2RegionEnd",
        "Side",
        "Right",
        "conflictRegion",
        "file1RegionStart",
        "b",
        "Length",
        "file1RegionEnd",
        "file2RegionStart",
        "o",
        "Length",
        "file2RegionEnd",
        "i",
        "hunkIndex",
        "i",
        "hunk",
        "hunks",
        "i",
        "hunk",
        "side",
        "regions",
        "side",
        "hunk",
        "file1offset",
        "oLhs",
        "hunk",
        "file1length",
        "hunk",
        "file2offset",
        "abLhs",
        "hunk",
        "file2length",
        "r",
        "file1RegionStart",
        "Min",
        "abLhs",
        "r",
        "file1RegionStart",
        "r",
        "file1RegionEnd",
        "Max",
        "abRhs",
        "r",
        "file1RegionEnd",
        "r",
        "file2RegionStart",
        "Min",
        "oLhs",
        "r",
        "file2RegionStart",
        "r",
        "file2RegionEnd",
        "Max",
        "oRhs",
        "r",
        "file2RegionEnd",
        "regions",
        "Side",
        "Left",
        "file1RegionStart",
        "regionLhs",
        "regions",
        "Side",
        "Left",
        "file2RegionStart",
        "regions",
        "Side",
        "Left",
        "file1RegionEnd",
        "regionRhs",
        "regions",
        "Side",
        "Left",
        "file2RegionEnd",
        "regions",
        "Side",
        "Right",
        "file1RegionStart",
        "regionLhs",
        "regions",
        "Side",
        "Right",
        "file2RegionStart",
        "regions",
        "Side",
        "Right",
        "file1RegionEnd",
        "regionRhs",
        "regions",
        "Side",
        "Right",
        "file2RegionEnd",
        "result",
        "Add",
        "patch3Set",
        "side",
        "Side",
        "Conflict",
        "offset",
        "aLhs",
        "length",
        "aRhs",
        "aLhs",
        "conflictOldOffset",
        "regionLhs",
        "conflictOldLength",
        "regionRhs",
        "regionLhs",
        "conflictRightOffset",
        "bLhs",
        "conflictRightLength",
        "bRhs",
        "bLhs",
        "commonOffset",
        "regionRhs",
        "copyCommon2",
        "o",
        "Length",
        "commonOffset",
        "result",
        "result",
        "okLines",
        "IMergeResultBlock",
        "result",
        "okLines",
        "Count",
        "MergeOKResultBlock",
        "okResult",
        "ContentLines",
        "okLines",
        "ToArray",
        "result",
        "Add",
        "okResult",
        "okLines",
        "Clear",
        "patch3Set",
        "rec",
        "a",
        "b",
        "rec",
        "length",
        "rec",
        "conflictRightLength",
        "rec",
        "offset",
        "rec",
        "conflictRightOffset",
        "j",
        "rec",
        "length",
        "j",
        "a",
        "j",
        "aoff",
        "b",
        "j",
        "boff",
        "IMergeResultBlock",
        "a",
        "o",
        "b",
        "excludeFalseConflicts",
        "IMergeResultBlock",
        "Side",
        "Side",
        "Left",
        "a",
        "Side",
        "Old",
        "o",
        "Side",
        "Right",
        "b",
        "Diff",
        "diff3_merge_indices",
        "a",
        "o",
        "b",
        "i",
        "indices",
        "Count",
        "i",
        "indices",
        "i",
        "x",
        "side",
        "side",
        "Side",
        "Conflict",
        "excludeFalseConflicts",
        "isTrueConflict",
        "x",
        "a",
        "b",
        "okLines",
        "AddRange",
        "files",
        "SliceJS",
        "x",
        "offset",
        "x",
        "offset",
        "x",
        "length",
        "flushOk",
        "okLines",
        "result",
        "result",
        "Add",
        "MergeConflictResultBlock",
        "LeftLines",
        "a",
        "SliceJS",
        "x",
        "offset",
        "x",
        "offset",
        "x",
        "length",
        "LeftIndex",
        "x",
        "offset",
        "OldLines",
        "o",
        "SliceJS",
        "x",
        "conflictOldOffset",
        "x",
        "conflictOldOffset",
        "x",
        "conflictOldLength",
        "OldIndex",
        "x",
        "conflictOldOffset",
        "RightLines",
        "b",
        "SliceJS",
        "x",
        "conflictRightOffset",
        "x",
        "conflictRightOffset",
        "x",
        "conflictRightLength",
        "RightIndex",
        "x",
        "offset",
        "okLines",
        "AddRange",
        "files",
        "side",
        "SliceJS",
        "x",
        "offset",
        "x",
        "offset",
        "x",
        "length",
        "flushOk",
        "okLines",
        "result",
        "result",
        "T",
        "T",
        "T",
        "array",
        "startingIndex",
        "followingIndex",
        "followingIndex",
        "array",
        "Length",
        "followingIndex",
        "array",
        "Length",
        "T",
        "T",
        "followingIndex",
        "startingIndex",
        "i",
        "outArray",
        "Length",
        "i",
        "outArray",
        "i",
        "array",
        "i",
        "startingIndex",
        "outArray",
        "Runtime",
        "CompilerServices",
        "AttributeUsage",
        "AttributeTargets",
        "Assembly",
        "AttributeTargets",
        "Class",
        "AttributeTargets",
        "Method",
        "Attribute"
    ],
    "literals": [],
    "variables": [
        "file1index",
        "file2index",
        "CandidateThing",
        "chain",
        "common",
        "file1",
        "file2",
        "Offset",
        "Length",
        "Chunk",
        "patchDescriptionThing",
        "file1",
        "patchDescriptionThing",
        "file2",
        "offset",
        "length",
        "chunkReference",
        "file1",
        "chunkReference",
        "file2",
        "Side",
        "side",
        "file1offset",
        "file1length",
        "file2offset",
        "file2length",
        "Side",
        "side",
        "offset",
        "length",
        "conflictOldOffset",
        "conflictOldLength",
        "conflictRightOffset",
        "conflictRightLength",
        "file1RegionStart",
        "file1RegionEnd",
        "file2RegionStart",
        "file2RegionEnd",
        "ContentLines",
        "LeftLines",
        "LeftIndex",
        "OldLines",
        "OldIndex",
        "RightLines",
        "RightIndex",
        "equivalenceClasses",
        "file2indices",
        "candidates",
        "j",
        "line",
        "i",
        "line",
        "r",
        "s",
        "CandidateThing",
        "c",
        "jX",
        "j",
        "newCandidate",
        "result",
        "tail1",
        "tail2",
        "commonOrDifferentThing",
        "common",
        "candidate",
        "commonOrDifferentThing",
        "different",
        "result",
        "tail1",
        "tail2",
        "candidate",
        "mismatchLength1",
        "mismatchLength2",
        "patchResult",
        "thisResult",
        "newpatch",
        "i",
        "chunk",
        "i",
        "chunk",
        "tmp",
        "result",
        "commonOffset",
        "chunkIndex",
        "chunk",
        "lineIndex",
        "result",
        "file1CompletedToOffset",
        "diffPatches",
        "chunkIndex",
        "chunk",
        "result",
        "tail1",
        "tail2",
        "candidate",
        "mismatchLength1",
        "mismatchLength2",
        "m1",
        "m2",
        "hunks",
        "i",
        "i",
        "result",
        "commonOffset",
        "hunkIndex",
        "firstHunkIndex",
        "hunkIndex",
        "hunk",
        "regionLhs",
        "regionRhs",
        "maybeOverlapping",
        "maybeLhs",
        "regions",
        "i",
        "firstHunkIndex",
        "side",
        "r",
        "oLhs",
        "oRhs",
        "abLhs",
        "abRhs",
        "aLhs",
        "aRhs",
        "bLhs",
        "bRhs",
        "okResult",
        "aoff",
        "boff",
        "j",
        "result",
        "files",
        "indices",
        "okLines",
        "i",
        "x",
        "side",
        "outArray",
        "i"
    ],
    "comments": [
        "Copyright (c) 2006, 2008 Tony Garnock-Jones <tonyg@lshift.net>",
        "Copyright (c) 2006, 2008 LShift Ltd. <query@lshift.net>",
        "",
        "Permission is hereby granted, free of charge, to any person",
        "obtaining a copy of this software and associated documentation files",
        "(the \"Software\"), to deal in the Software without restriction,",
        "including without limitation the rights to use, copy, modify, merge,",
        "publish, distribute, sublicense, and/or sell copies of the Software,",
        "and to permit persons to whom the Software is furnished to do so,",
        "subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be",
        "included in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,",
        "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND",
        "NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS",
        "BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN",
        "ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN",
        "CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE.",
        "",
        "",
        "",
        "Migration to C# (3.0 / .Net 2.0 for Visual Studio 2008) from",
        "Javascript, Copyright (c) 2012 Tao Klerks <tao@klerks.biz>",
        "",
        "This ported code is NOT cleaned up in terms of style, nor tested/optimized for",
        "performance, nor even tested for correctness across all methods - it is an",
        "extremely simplistic minimal-changes conversion/porting. The plan is to clean",
        "it up to be more pleasant to look at an deal with at a later time.",
        "To anyone who is familiar with and understands the original terminology of",
        "diff and diff3 concepts, I apologize for my fanciful naming strategy - I has",
        "to come up with object names and haven't yet had a chance to review the",
        "literature.",
        "Also added a \"diff_merge_keepall()\" implementation for simplistic 2-way merge.",
        "",
        "amusingly, I can't figure out anything they have in common.",
        "Text diff algorithm following Hunt and McIlroy 1976.\n\t\t\t * J. W. Hunt and M. D. McIlroy, An algorithm for differential file\n\t\t\t * comparison, Bell Telephone Laboratories CSTR #41 (1976)\n\t\t\t * http://www.cs.dartmouth.edu/~doug/\n\t\t\t *\n\t\t\t * Expects two arrays of strings.",
        "no point in examining further (j)s",
        "At this point, we know the LCS: it's in the reverse of the",
        "linked-list through .chain of",
        "candidates[candidates.length - 1].",
        "We apply the LCS to build a \"comm\"-style picture of the",
        "differences between file1 and file2.",
        "We apply the LCD to build a JSON representation of a",
        "diff(1)-style patch.",
        "Takes the output of Diff.diff_patch(), and removes",
        "information from it. It can still be used by patch(),",
        "below, but can no longer be inverted.",
        "Takes the output of Diff.diff_patch(), and inverts the",
        "sense of it, so that it can be applied to file2 to give",
        "file1 rather than the other way around.",
        "Applies a patch to a file.",
        "",
        "Given file1 and file2, Diff.patch(file1, Diff.diff_patch(file1, file2)) should give file2.",
        "Non-destructively merges two files.",
        "",
        "This is NOT a three-way merge - content will often be DUPLICATED by this process, eg",
        "when starting from the same file some content was moved around on one of the copies.",
        "",
        "To handle typical \"common ancestor\" situations and avoid incorrect duplication of",
        "content, use diff3_merge instead.",
        "",
        "This method's behaviour is similar to gnu diff's \"if-then-else\" (-D) format, but",
        "without the if/then/else lines!",
        "",
        "copy any not-yet-copied portion of file1 to the end of this patch entry",
        "copy the file2 portion of this patch entry",
        "copy any not-yet-copied portion of file1 to the end of the file",
        "We apply the LCS to give a simple representation of the",
        "offsets and lengths of mismatched chunks in the input",
        "files. This is used by diff3_merge_indices below.",
        "Given three files, A, O, and B, where both A and B are",
        "independently derived from O, returns a fairly complicated",
        "internal representation of merge decisions it's taken. The",
        "interested reader may wish to consult",
        "",
        "Sanjeev Khanna, Keshav Kunal, and Benjamin C. Pierce. \"A",
        "Formal Investigation of Diff3.\" In Arvind and Prasad,",
        "editors, Foundations of Software Technology and Theoretical",
        "Computer Science (FSTTCS), December 2007.",
        "",
        "( )",
        "The \"overlap\" was only one hunk long, meaning that",
        "there's no conflict here. Either a and o were the",
        "same, or b and o were the same.",
        "A proper conflict. Determine the extents of the",
        "regions involved from a, o and b. Effectively merge",
        "all the hunks on the left into one giant hunk, and",
        "do the same for the right; then, correct for skew",
        "in the regions of o that each side changed, and",
        "report appropriate spans for the three sides.",
        "Applies the output of Diff.diff3_merge_indices to actually",
        "construct the merged file; the returned result alternates",
        "between \"ok\" and \"conflict\" blocks."
    ],
    "docstrings": [],
    "functions": [
        "patchDescriptionThing",
        "patchDescriptionThing",
        "CompareTo",
        "CandidateThing",
        "longest_common_subsequence",
        "processCommon",
        "diff_comm",
        "diff_patch",
        "strip_patch",
        "invert_patch",
        "copyCommon",
        "patch",
        "diff_merge_keepall",
        "diff_indices",
        "addHunk",
        "copyCommon2",
        "diff3_merge_indices",
        "flushOk",
        "isTrueConflict",
        "diff3_merge",
        "SliceJS"
    ],
    "classes": [
        "Diff",
        "CandidateThing",
        "commonOrDifferentThing",
        "patchDescriptionThing",
        "patchResult",
        "chunkReference",
        "diffSet",
        "diff3Set",
        "patch3Set",
        "conflictRegion",
        "MergeOKResultBlock",
        "MergeConflictResultBlock",
        "ArrayExtension",
        "ExtensionAttribute"
    ]
}