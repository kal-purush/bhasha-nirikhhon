{
    "identifiers": [
        "soot",
        "jimple",
        "toolkits",
        "scalar",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "soot",
        "Body",
        "soot",
        "BodyTransformer",
        "soot",
        "DoubleType",
        "soot",
        "FloatType",
        "soot",
        "G",
        "soot",
        "IntType",
        "soot",
        "LongType",
        "soot",
        "Singletons",
        "soot",
        "Type",
        "soot",
        "Unit",
        "soot",
        "Value",
        "soot",
        "jimple",
        "AddExpr",
        "soot",
        "jimple",
        "AssignStmt",
        "soot",
        "jimple",
        "BinopExpr",
        "soot",
        "jimple",
        "DoubleConstant",
        "soot",
        "jimple",
        "FloatConstant",
        "soot",
        "jimple",
        "IntConstant",
        "soot",
        "jimple",
        "LongConstant",
        "soot",
        "jimple",
        "MulExpr",
        "soot",
        "jimple",
        "OrExpr",
        "soot",
        "jimple",
        "SubExpr",
        "g",
        "G",
        "v",
        "soot_jimple_toolkits_scalar_IdentityOperationEliminator",
        "Override",
        "b",
        "phaseName",
        "options",
        "unitIt",
        "b",
        "getUnits",
        "iterator",
        "unitIt",
        "hasNext",
        "u",
        "unitIt",
        "next",
        "u",
        "assignStmt",
        "u",
        "assignStmt",
        "getRightOp",
        "aer",
        "assignStmt",
        "getRightOp",
        "isConstZero",
        "aer",
        "getOp1",
        "assignStmt",
        "setRightOp",
        "aer",
        "getOp2",
        "isConstZero",
        "aer",
        "getOp2",
        "assignStmt",
        "setRightOp",
        "aer",
        "getOp1",
        "assignStmt",
        "getRightOp",
        "aer",
        "assignStmt",
        "getRightOp",
        "isConstZero",
        "aer",
        "getOp2",
        "assignStmt",
        "setRightOp",
        "aer",
        "getOp1",
        "assignStmt",
        "getRightOp",
        "aer",
        "assignStmt",
        "getRightOp",
        "isConstZero",
        "aer",
        "getOp1",
        "assignStmt",
        "setRightOp",
        "getZeroConst",
        "assignStmt",
        "getLeftOp",
        "getType",
        "isConstZero",
        "aer",
        "getOp2",
        "assignStmt",
        "setRightOp",
        "getZeroConst",
        "assignStmt",
        "getLeftOp",
        "getType",
        "assignStmt",
        "getRightOp",
        "orExpr",
        "assignStmt",
        "getRightOp",
        "isConstZero",
        "orExpr",
        "getOp1",
        "assignStmt",
        "setRightOp",
        "orExpr",
        "getOp2",
        "isConstZero",
        "orExpr",
        "getOp2",
        "assignStmt",
        "setRightOp",
        "orExpr",
        "getOp1",
        "unitIt",
        "b",
        "getUnits",
        "iterator",
        "unitIt",
        "hasNext",
        "u",
        "unitIt",
        "next",
        "u",
        "assignStmt",
        "u",
        "assignStmt",
        "getLeftOp",
        "assignStmt",
        "getRightOp",
        "unitIt",
        "remove",
        "IntConstant",
        "v",
        "LongConstant",
        "v",
        "FloatConstant",
        "v",
        "DoubleConstant",
        "v",
        "op",
        "op",
        "ic",
        "op",
        "ic",
        "value"
    ],
    "literals": [
        "\"Unsupported numeric type\""
    ],
    "variables": [],
    "comments": [
        "a = b + 0 --> a = b",
        "a = 0 + b --> a = b",
        "a = b - 0 --> a = b",
        "a = b * 0 --> a = 0",
        "a = 0 * b --> a = 0",
        "a = b | 0 --> a = b",
        "a = 0 | b --> a = b",
        "In a second step, we remove assingments such as <a = a>"
    ],
    "docstrings": [
        "* Transformer that eliminates unnecessary logic operations such as\n * \n * \t\t$z0 = a | 0\n * \n * which can more easily be repesented as\n * \n * \t\t$z0 = a\n * \n * @author Steven Arzt\n *",
        "* Gets the constant value 0 with the given type (integer, float, etc.)\n\t * @param type The type for which to get the constant zero value\n\t * @return The constant zero value of the given type",
        "* Checks whether the given value is the constant integer 0\n\t * @param op The value to check\n\t * @return True if the given value is the constant integer 0, otherwise\n\t * false"
    ],
    "functions": [
        "IdentityOperationEliminator",
        "IdentityOperationEliminator",
        "v",
        "internalTransform",
        "Value",
        "getZeroConst",
        "isConstZero"
    ],
    "classes": [
        "IdentityOperationEliminator"
    ]
}