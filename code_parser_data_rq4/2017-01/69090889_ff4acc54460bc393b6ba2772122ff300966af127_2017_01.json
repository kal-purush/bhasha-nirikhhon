{
    "identifiers": [
        "zlib",
        "datetime",
        "time",
        "can",
        "message",
        "Message",
        "can",
        "CAN",
        "Listener",
        "Struct",
        "Struct",
        "Struct",
        "Struct",
        "Struct",
        "timestamp",
        "timestamp",
        "timestamp",
        "datetime",
        "datetime",
        "fromtimestamp",
        "timestamp",
        "t",
        "year",
        "t",
        "month",
        "t",
        "isoweekday",
        "t",
        "day",
        "t",
        "hour",
        "t",
        "minute",
        "t",
        "second",
        "round",
        "t",
        "microsecond",
        "systemtime",
        "datetime",
        "datetime",
        "systemtime",
        "systemtime",
        "systemtime",
        "systemtime",
        "systemtime",
        "systemtime",
        "systemtime",
        "time",
        "mktime",
        "t",
        "timetuple",
        "systemtime",
        "ValueError",
        "filename",
        "open",
        "filename",
        "fp",
        "read",
        "FILE_HEADER_STRUCT",
        "size",
        "FILE_HEADER_STRUCT",
        "unpack",
        "data",
        "header",
        "systemtime_to_timestamp",
        "header",
        "fp",
        "read",
        "OBJ_HEADER_STRUCT",
        "size",
        "data",
        "OBJ_HEADER_STRUCT",
        "unpack",
        "data",
        "header",
        "header",
        "header",
        "OBJ_HEADER_STRUCT",
        "size",
        "fp",
        "read",
        "obj_data_size",
        "fp",
        "read",
        "obj_data_size",
        "obj_type",
        "LOG_CONTAINER",
        "header",
        "zlib",
        "decompress",
        "obj_data",
        "uncompressed_size",
        "tail",
        "tail",
        "data",
        "pos",
        "OBJ_HEADER_STRUCT",
        "size",
        "len",
        "data",
        "OBJ_HEADER_STRUCT",
        "unpack",
        "data",
        "pos",
        "pos",
        "OBJ_HEADER_STRUCT",
        "size",
        "header",
        "header",
        "pos",
        "obj_size",
        "len",
        "data",
        "data",
        "pos",
        "OBJ_HEADER_STRUCT",
        "size",
        "pos",
        "obj_size",
        "header",
        "header",
        "start_timestamp",
        "obj_type",
        "CAN_MESSAGE",
        "CAN_MSG_STRUCT",
        "unpack",
        "obj_data",
        "Message",
        "timestamp",
        "timestamp",
        "arbitration_id",
        "can_id",
        "extended_id",
        "can_id",
        "CAN_MSG_EXT",
        "is_remote_frame",
        "flags",
        "REMOTE_FLAG",
        "dlc",
        "dlc",
        "data",
        "can_data",
        "dlc",
        "channel",
        "msg",
        "obj_type",
        "CAN_ERROR",
        "CAN_ERROR_STRUCT",
        "unpack",
        "obj_data",
        "Message",
        "timestamp",
        "timestamp",
        "is_error_frame",
        "channel",
        "msg",
        "pos",
        "obj_size",
        "pos",
        "obj_size",
        "data",
        "pos",
        "fp",
        "close",
        "Listener",
        "filename",
        "channel",
        "open",
        "filename",
        "channel",
        "fp",
        "write",
        "FILE_HEADER_STRUCT",
        "size",
        "FILE_HEADER_STRUCT",
        "size",
        "msg",
        "start_timestamp",
        "msg",
        "timestamp",
        "msg",
        "timestamp",
        "msg",
        "timestamp",
        "start_timestamp",
        "msg",
        "is_error_frame",
        "OBJ_HEADER_STRUCT",
        "size",
        "CAN_MSG_STRUCT",
        "size",
        "OBJ_HEADER_STRUCT",
        "pack",
        "OBJ_HEADER_STRUCT",
        "size",
        "obj_size",
        "CAN_MESSAGE",
        "timestamp",
        "REMOTE_FLAG",
        "msg",
        "is_remote_frame",
        "msg",
        "arbitration_id",
        "msg",
        "id_type",
        "arb_id",
        "CAN_MSG_EXT",
        "CAN_MSG_STRUCT",
        "pack",
        "channel",
        "flags",
        "msg",
        "dlc",
        "arb_id",
        "msg",
        "data",
        "OBJ_HEADER_STRUCT",
        "size",
        "CAN_ERROR_STRUCT",
        "size",
        "OBJ_HEADER_STRUCT",
        "pack",
        "OBJ_HEADER_STRUCT",
        "size",
        "obj_size",
        "CAN_ERROR",
        "timestamp",
        "CAN_ERROR_STRUCT",
        "pack",
        "channel",
        "_add_data",
        "header",
        "data",
        "text",
        "timestamp",
        "timestamp",
        "stop_timestamp",
        "start_timestamp",
        "timestamp",
        "timestamp",
        "text",
        "encode",
        "LookupError",
        "text",
        "encode",
        "timestamp",
        "start_timestamp",
        "OBJ_HEADER_STRUCT",
        "size",
        "GLOBAL_MARKER_STRUCT",
        "size",
        "len",
        "text",
        "len",
        "marker",
        "len",
        "comment",
        "OBJ_HEADER_STRUCT",
        "pack",
        "OBJ_HEADER_STRUCT",
        "size",
        "obj_size",
        "GLOBAL_MARKER",
        "timestamp",
        "GLOBAL_MARKER_STRUCT",
        "pack",
        "len",
        "text",
        "len",
        "marker",
        "len",
        "comment",
        "_add_data",
        "header",
        "data",
        "text",
        "marker",
        "comment",
        "data",
        "len",
        "data",
        "data",
        "len",
        "data",
        "cache",
        "append",
        "data",
        "cache_size",
        "len",
        "data",
        "count_of_objects",
        "cache_size",
        "MAX_CACHE_SIZE",
        "_flush",
        "join",
        "cache",
        "cache",
        "cache",
        "MAX_CACHE_SIZE",
        "cache",
        "MAX_CACHE_SIZE",
        "tail",
        "len",
        "tail",
        "zlib",
        "compress",
        "uncompressed_data",
        "COMPRESSION_LEVEL",
        "OBJ_HEADER_STRUCT",
        "size",
        "len",
        "compressed_data",
        "OBJ_HEADER_STRUCT",
        "pack",
        "obj_size",
        "LOG_CONTAINER",
        "len",
        "uncompressed_data",
        "fp",
        "write",
        "header",
        "fp",
        "write",
        "compressed_data",
        "fp",
        "write",
        "obj_size",
        "uncompressed_size",
        "len",
        "uncompressed_data",
        "OBJ_HEADER_STRUCT",
        "size",
        "_flush",
        "fp",
        "tell",
        "fp",
        "close",
        "FILE_HEADER_STRUCT",
        "size",
        "APPLICATION_ID",
        "header",
        "extend",
        "filesize",
        "uncompressed_size",
        "count_of_objects",
        "header",
        "extend",
        "timestamp_to_systemtime",
        "start_timestamp",
        "header",
        "extend",
        "timestamp_to_systemtime",
        "stop_timestamp",
        "open",
        "fp",
        "name",
        "f",
        "f",
        "write",
        "FILE_HEADER_STRUCT",
        "pack",
        "header"
    ],
    "literals": [
        "\"<4sLBBBBBBBBQQLL8H8H72x\"",
        "\"<4sHHLLL2xHQ\"",
        "\"<HBBL8s\"",
        "\"<HH4x\"",
        "\"<LLL3xBLLL12x\"",
        "\"rb\"",
        "b\"LOGG\"",
        "\"Unknown file format\"",
        "b\"\"",
        "b\"LOBJ\"",
        "\"Parse error\"",
        "b\"LOBJ\"",
        "\"Parse error\"",
        "\"wb\"",
        "b\"\\x00\"",
        "b\"LOBJ\"",
        "b\"LOBJ\"",
        "\"mbcs\"",
        "\"ascii\"",
        "b\"Added by python-can\"",
        "b\"python-can\"",
        "b\"LOBJ\"",
        "b\"\\x00\"",
        "b\"\"",
        "b\"LOBJ\"",
        "b\"\\x00\"",
        "b\"LOGG\"",
        "\"r+b\""
    ],
    "variables": [
        "APPLICATION_ID",
        "FILE_HEADER_STRUCT",
        "OBJ_HEADER_STRUCT",
        "CAN_MSG_STRUCT",
        "CAN_ERROR_STRUCT",
        "GLOBAL_MARKER_STRUCT",
        "CAN_MESSAGE",
        "CAN_ERROR",
        "LOG_CONTAINER",
        "GLOBAL_MARKER",
        "CAN_MSG_EXT",
        "REMOTE_FLAG",
        "t",
        "t",
        "fp",
        "data",
        "header",
        "start_timestamp",
        "tail",
        "data",
        "header",
        "obj_type",
        "obj_data_size",
        "obj_data",
        "uncompressed_size",
        "data",
        "data",
        "pos",
        "header",
        "obj_size",
        "obj_data",
        "obj_type",
        "timestamp",
        "channel",
        "flags",
        "dlc",
        "can_id",
        "can_data",
        "msg",
        "msg",
        "channel",
        "channel",
        "length",
        "msg",
        "msg",
        "channel",
        "tail",
        "MAX_CACHE_SIZE",
        "COMPRESSION_LEVEL",
        "fp",
        "channel",
        "cache",
        "cache_size",
        "count_of_objects",
        "uncompressed_size",
        "start_timestamp",
        "stop_timestamp",
        "start_timestamp",
        "stop_timestamp",
        "timestamp",
        "obj_size",
        "header",
        "flags",
        "arb_id",
        "data",
        "obj_size",
        "header",
        "data",
        "timestamp",
        "start_timestamp",
        "stop_timestamp",
        "text",
        "text",
        "timestamp",
        "comment",
        "marker",
        "obj_size",
        "header",
        "data",
        "data",
        "cache",
        "uncompressed_data",
        "tail",
        "cache",
        "cache_size",
        "compressed_data",
        "obj_size",
        "header",
        "filesize",
        "header"
    ],
    "comments": [
        "0 = unknown, 2 = CANoe",
        "Header must be 144 bytes in total",
        "signature (\"LOGG\"), header size,",
        "application ID, application major, application minor, application build,",
        "bin log major, bin log minor, bin log build, bin log patch,",
        "file size, uncompressed size, count of objects, count of objects read,",
        "time start (SYSTEMTIME), time stop (SYSTEMTIME)",
        "signature (\"LOBJ\"), header size, header version (1), object size, object type,",
        "flags, object version, size uncompressed or timestamp",
        "channel, flags, dlc, arbitration id, data",
        "channel, length",
        "commented event type, foreground color, background color, relocatable,",
        "group name length, marker name length, description length",
        "Probably not a Unix timestamp",
        "print(header)",
        "EOF",
        "print(header)",
        "Read padding bytes",
        "print(header)",
        "Object continues in next log container",
        "Add padding bytes",
        "Save remaing data that could not be processed",
        ": Max log container size of uncompressed data",
        ": ZLIB compression level",
        "Header will be written after log is done",
        "Only works on Windows",
        "Nothing to write",
        "Save data that comes after max size to next round",
        "Write padding bytes",
        "Write header in the beginning of the file",
        "The meaning of \"count of objects read\" is unknown"
    ],
    "docstrings": [
        "\"\"\"\nImplements support for BLF (Binary Logging Format) which is a proprietary\nCAN log format from Vector Informatik GmbH.\n\nNo official specification of the binary logging format is available.\nThis implementation is based on Toby Lorenz' C++ library \"Vector BLF\" which is\nlicenced under GPLv3. https://bitbucket.org/tobylorenz/vector_blf.\nThe file starts with a header. The rest is one or more \"log containers\"\nwhich consists of a header and some zlib compressed data, usually up to 128 kB\nof uncompressed data each. This data contains the actual CAN messages and other\nobjects types.\n\"\"\"",
        "\"\"\"\n    Iterator of CAN messages from a Binary Logging File.\n\n    Only CAN messages and error frames are supported. Other object types are\n    silently ignored.\n    \"\"\"",
        "\"\"\"\n    Logs CAN data to a Binary Logging File compatible with Vector's tools.\n    \"\"\"",
        "\"\"\"Add an arbitrary message to the log file as a global marker.\n\n        :param str text:\n            The group name of the marker.\n        :param float timestamp:\n            Absolute timestamp in Unix timestamp format. If not given, the\n            marker will be placed along the last message.\n        \"\"\"",
        "\"\"\"Compresses and writes data in the cache to file.\"\"\"",
        "\"\"\"Stops logging and closes the file.\"\"\""
    ],
    "functions": [
        "timestamp_to_systemtime",
        "systemtime_to_timestamp",
        "__iter__",
        "on_message_received",
        "log_event",
        "_add_data",
        "_flush",
        "stop"
    ],
    "classes": [
        "BLFReader",
        "BLFWriter"
    ]
}