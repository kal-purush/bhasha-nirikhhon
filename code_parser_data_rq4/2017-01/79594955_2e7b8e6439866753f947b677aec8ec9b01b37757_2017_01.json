{
    "identifiers": [
        "SymbolTable",
        "VMWriter",
        "Tokenizer",
        "os",
        "sys",
        "strippedToken",
        "strippedToken",
        "keywordsArray",
        "taggedToken",
        "taggedToken",
        "taggedToken",
        "index",
        "taggedToken",
        "rindex",
        "token",
        "strip",
        "taggedToken",
        "taggedToken",
        "taggedToken",
        "index",
        "taggedToken",
        "index",
        "tabbedArray",
        "line",
        "line",
        "tabbedArray",
        "tokenizedArray",
        "tokenizedArray",
        "len",
        "tokenizedArray",
        "SymbolTable",
        "SymbolsTable",
        "VMWriter",
        "VMWriter",
        "comparisonVal",
        "stripTags",
        "tokenizedArray",
        "curIndex",
        "curToken",
        "comparisonVal",
        "curIndex",
        "isOpenBlock",
        "blockTitle",
        "isOpenBlock",
        "whiteSpaceStr",
        "indentLevel",
        "blockTitle",
        "updateIndentLevel",
        "updateIndentLevel",
        "whiteSpaceStr",
        "indentLevel",
        "blockTitle",
        "compiledArray",
        "append",
        "toAppend",
        "tokenizedLine",
        "compiledArray",
        "append",
        "whiteSpaceStr",
        "indentLevel",
        "tokenizedLine",
        "toIncrement",
        "toIncrement",
        "indentLevel",
        "INDENT_SIZE",
        "indentLevel",
        "INDENT_SIZE",
        "indentLevel",
        "tokenizedArray",
        "curIndex",
        "stripTags",
        "tokenizedArray",
        "curIndex",
        "curIndex",
        "tokenizedArraySize",
        "compileClass",
        "appendBlockTitle",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "stripTags",
        "getCurToken",
        "curToken",
        "curToken",
        "compileVarDec",
        "curToken",
        "curToken",
        "curToken",
        "compileSubroutine",
        "checkMatchForToken",
        "appendTokenizedLine",
        "getCurToken",
        "appendBlockTitle",
        "advanceIndex",
        "curIndex",
        "isClassVarDec",
        "isClassVarDec",
        "appendBlockTitle",
        "blockTitle",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "appendTokenizedLine",
        "getCurToken",
        "appendBlockTitle",
        "blockTitle",
        "advanceIndex",
        "checkMatchForToken",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "getTokenType",
        "getCurToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "appendTokenizedLine",
        "getCurToken",
        "appendBlockTitle",
        "blockTitle",
        "advanceIndex",
        "curIndex",
        "appendBlockTitle",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "getTokenType",
        "getCurToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileParameterList",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileSubroutineBody",
        "appendBlockTitle",
        "appendBlockTitle",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "checkMatchForToken",
        "compileVarDec",
        "compileStatements",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "appendBlockTitle",
        "advanceIndex",
        "appendBlockTitle",
        "checkMatchForToken",
        "appendBlockTitle",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "getTokenType",
        "getCurToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "getTokenType",
        "getCurToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "appendBlockTitle",
        "appendBlockTitle",
        "checkMatchForToken",
        "compileLet",
        "checkMatchForToken",
        "compileIf",
        "checkMatchForToken",
        "compileWhile",
        "checkMatchForToken",
        "compileDo",
        "checkMatchForToken",
        "compileReturn",
        "checkMatchForToken",
        "compileVarDec",
        "checkMatchForToken",
        "appendBlockTitle",
        "curIndex",
        "appendBlockTitle",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileSubroutineCall",
        "peekNextToken",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "appendBlockTitle",
        "advanceIndex",
        "appendBlockTitle",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "getTokenType",
        "getCurToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileExpression",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileExpression",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "appendBlockTitle",
        "advanceIndex",
        "appendBlockTitle",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileExpression",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileStatements",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "appendBlockTitle",
        "advanceIndex",
        "appendBlockTitle",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "compileExpression",
        "appendTokenizedLine",
        "getCurToken",
        "appendBlockTitle",
        "advanceIndex",
        "checkMatchForToken",
        "curIndex",
        "appendBlockTitle",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileExpression",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileStatements",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileStatements",
        "checkMatchForToken",
        "curIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendBlockTitle",
        "appendBlockTitle",
        "compileTerm",
        "stripTags",
        "getCurToken",
        "opTable",
        "stripTags",
        "getCurToken",
        "opTable",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileTerm",
        "appendBlockTitle",
        "appendBlockTitle",
        "getTokenType",
        "getCurToken",
        "getTokenType",
        "getCurToken",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "stripTags",
        "getCurToken",
        "keywordConstantsTable",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "stripTags",
        "getCurToken",
        "unaryOpTable",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileTerm",
        "checkMatchForToken",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileExpression",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "getTokenType",
        "getCurToken",
        "peekNextToken",
        "nextToken",
        "nextToken",
        "compileSubroutineCall",
        "nextToken",
        "nextToken",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileExpression",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendBlockTitle",
        "appendBlockTitle",
        "checkMatchForToken",
        "appendBlockTitle",
        "compileExpression",
        "checkMatchForToken",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileExpression",
        "appendBlockTitle",
        "nextToken",
        "nextToken",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileExpressionList",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "nextToken",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "compileExpressionList",
        "appendTokenizedLine",
        "getCurToken",
        "advanceIndex",
        "curIndex",
        "arrayToWrite",
        "fileNameStr",
        "isTokenized",
        "isTokenized",
        "arrayToWrite",
        "insert",
        "arrayToWrite",
        "insert",
        "len",
        "arrayToWrite",
        "fileNameStr",
        "replace",
        "open",
        "fileNameStr",
        "outFile",
        "line",
        "arrayToWrite",
        "outFile",
        "write",
        "line",
        "VMarray",
        "filenameStr",
        "open",
        "filenameStr",
        "outFile",
        "line",
        "VMarray",
        "outFile",
        "write",
        "line",
        "argv",
        "argv",
        "os",
        "path",
        "isdir",
        "inputStr",
        "file",
        "file",
        "os",
        "listdir",
        "inputStr",
        "file",
        "endswith",
        "file",
        "files",
        "Tokenizer",
        "tokenizeFile",
        "inputStr",
        "file",
        "Compiler",
        "Compiler",
        "handleTabsArray",
        "tokenizedArray",
        "compilerEng",
        "compileEngine",
        "file",
        "replace",
        "inputStr",
        "outputFileName",
        "writeArrayToFile",
        "compilerEng",
        "compiledArray",
        "outputStr",
        "inputStr",
        "file",
        "replace",
        "writeVMArrayToFile",
        "compilerEng",
        "VMWriter",
        "VMArray",
        "VMFileStr",
        "Tokenizer",
        "tokenizeFile",
        "inputStr",
        "Compiler",
        "Compiler",
        "Compiler",
        "handleTabsArray",
        "tokenizedArray",
        "compilerEng",
        "compileEngine",
        "inputStr",
        "replace",
        "writeArrayToFile",
        "compilerEng",
        "compiledArray",
        "outputFileName",
        "inputStr",
        "replace",
        "writeVMArrayToFile",
        "compilerEng",
        "VMWriter",
        "VMArray",
        "VMFileStr",
        "main",
        "sys",
        "argv"
    ],
    "literals": [
        "'let'",
        "'var'",
        "'do'",
        "'while'",
        "'if'",
        "'return'",
        "\">\"",
        "\"<\"",
        "\"<\"",
        "\">\"",
        "'\\t'",
        "''",
        "\" \"",
        "\"<\"",
        "\">\\n\"",
        "\"</\"",
        "\">\\n\"",
        "\" \"",
        "\"class\"",
        "\"{\"",
        "\"Error in compile class\"",
        "'static'",
        "'field'",
        "'constructor'",
        "'function'",
        "'method'",
        "\"}\"",
        "\"class\"",
        "\"Error in compiling class\"",
        "\"classVarDec\"",
        "\"varDec\"",
        "';'",
        "\",\"",
        "\"identifier\"",
        "\"Error in classVarDec\"",
        "\";\"",
        "\"Error in classVarDec\"",
        "\"subroutineDec\"",
        "\"identifier\"",
        "\"Error in compile subroutine\"",
        "\"subroutineDec\"",
        "\"subroutineBody\"",
        "\"{\"",
        "\"Error in compile subroutineBody\"",
        "\"var\"",
        "\"var\"",
        "\"}\"",
        "\"Error in compile subroutineBody\"",
        "\"subroutineBody\"",
        "\"parameterList\"",
        "')'",
        "\"parameterList\"",
        "\"identifier\"",
        "\"Error in compiling parameters list\"",
        "\",\"",
        "\"identifier\"",
        "\"Error in compiling parameters list\"",
        "\")\"",
        "\"parameterList\"",
        "\"statements\"",
        "\"let\"",
        "\"if\"",
        "\"while\"",
        "\"do\"",
        "\"return\"",
        "\"var\"",
        "\"}\"",
        "\"statements\"",
        "\"Error in compile statements line \"",
        "\"doStatement\"",
        "'do'",
        "\"Error in compile do \"",
        "\";\"",
        "\"Error in compile do \"",
        "\"doStatement\"",
        "\"letStatement\"",
        "'let'",
        "\"Error in compile let \"",
        "\"identifier\"",
        "\"Error in compile let \"",
        "\"[\"",
        "\"]\"",
        "\"Error in compile let \"",
        "\"=\"",
        "\"Error in compile let \"",
        "\";\"",
        "\"Error in compile let \"",
        "\"letStatement\"",
        "\"whileStatement\"",
        "\"while\"",
        "\"Error in compile while\"",
        "\"(\"",
        "\"Error in compile while\"",
        "\")\"",
        "\"Error in compile while\"",
        "\"{\"",
        "\"Error in compile while\"",
        "\"}\"",
        "\"Error in compile while\"",
        "\"whileStatement\"",
        "\"returnStatement\"",
        "\"return\"",
        "\"Error in compile return\"",
        "\";\"",
        "\"returnStatement\"",
        "\"if\"",
        "\"Error in compile if\"",
        "\"ifStatement\"",
        "\"(\"",
        "\"Error in compile if\"",
        "\")\"",
        "\"Error in compile if\"",
        "\"{\"",
        "\"Error in compile if\"",
        "\"}\"",
        "\"Error in compile if\"",
        "\"else\"",
        "\"{\"",
        "\"Error in compile if\"",
        "\"}\"",
        "\"Error in compile if\"",
        "\"ifStatement\"",
        "\"+\"",
        "\"-\"",
        "\"*\"",
        "'/'",
        "'&amp;'",
        "'|'",
        "'&lt;'",
        "'&gt;'",
        "\"=\"",
        "\"expression\"",
        "\"expression\"",
        "'-'",
        "'~'",
        "'true'",
        "'false'",
        "'null'",
        "'this'",
        "\"term\"",
        "'integerConstant'",
        "'stringConstant'",
        "\"(\"",
        "\"identifier\"",
        "'.'",
        "'('",
        "'['",
        "\"term\"",
        "\"expressionList\"",
        "')'",
        "\"expressionList\"",
        "\",\"",
        "\"expressionList\"",
        "'('",
        "'.'",
        "\"Error in compile subroutineCall\"",
        "'<tokens>\\n'",
        "\"</tokens>\\n\"",
        "\".xml\"",
        "\"T.xml\"",
        "'w'",
        "'w'",
        "'.jack'",
        "'/'",
        "\".jack\"",
        "\".xml\"",
        "'/'",
        "'/'",
        "\".jack\"",
        "\"1.vm\"",
        "\".jack\"",
        "\".xml\"",
        "\".jack\"",
        "\"1.vm\"",
        "\"I Love Nand\"",
        "\"__main__\""
    ],
    "variables": [
        "keywordsArray",
        "token",
        "tokenizedArray",
        "tokenizedArraySize",
        "curIndex",
        "indentLevel",
        "compiledArray",
        "INDENT_SIZE",
        "className",
        "symbolsTable",
        "VMWriter",
        "curToken",
        "whiteSpaceStr",
        "toAppend",
        "toAppend",
        "whiteSpaceStr",
        "indentLevel",
        "curToken",
        "blockTitle",
        "blockTitle",
        "opTable",
        "unaryOpTable",
        "keywordConstantsTable",
        "nextToken",
        "fileNameStr",
        "inputStr",
        "files",
        "tokenizedArray",
        "compilerEng",
        "outputFileName",
        "outputStr",
        "VMFileStr",
        "tokenizedArray",
        "compilerEng",
        "outputFileName",
        "VMFileStr"
    ],
    "comments": [
        "'class'",
        "'className'",
        "'open curly brackets'",
        "classVarDec or subRoutineDec",
        "close curly brackets",
        "static or field (identifier)",
        "type (identifier) or keyword",
        "varName (identifier)",
        "semicolon",
        "comma",
        "varName",
        "semicolon",
        "const func method",
        "void or type",
        "subroutineName",
        "open brackets",
        "closing brackets",
        "open curly brackets",
        "Closing curly brackets",
        "type, parameter list not empty",
        "varName",
        "comma",
        "type",
        "varName",
        "'do'",
        "semicolon",
        "let",
        "varName",
        "open square brackets",
        "close square brackets",
        "equal sign",
        "semicolon",
        "'while'",
        "open brackets",
        "close brackets",
        "open curly brackets",
        "close curly brackets",
        "'return'",
        "semicolon",
        "if",
        "open brackets",
        "close brackets",
        "open curly brackets",
        "close curly brackets",
        "'else'",
        "open curly brackets",
        "close curly brackets",
        "op sign",
        "'constant'",
        "keyword constant",
        "unary op ter,",
        "open brackets",
        "close brackets",
        "var name",
        "open square brackets",
        "close square brackets",
        "varName solo",
        "comma",
        "No need for appending new scope for subroutine",
        "subroutineName",
        "open brackets",
        "close brackets",
        "classname or varName",
        "dot",
        "subroutineName",
        "open brackets",
        "closing brackets"
    ],
    "docstrings": [
        "\"\"\"\nCompilation Enginge for EX11\n\"\"\"",
        "\"\"\"\nDetermines whether a value is in keywords array\n\"\"\"",
        "\"\"\"\nStrip tags from token line\n\"\"\"",
        "\"\"\"\nget type of Token\n\"\"\"",
        "\"\"\"represents the second stage of compiling a jack file to xm\n       receives the Txml in array format and runs compile engine\"\"\"",
        "\"\"\"\n    boolean method for validating if token matches grammar\n    \"\"\"",
        "\"\"\"\n    This is the only method that can advance the global index for current token\n    \"\"\"",
        "\"\"\"\n    Append title to scope in Xml array\n    \"\"\"",
        "\"\"\"\n    Append tokenized line to Xml array\n    \"\"\"",
        "\"\"\"\n    increment or decrement indent level\n    \"\"\"",
        "\"\"\"\n    get current token line\n    \"\"\"",
        "\"\"\"\n    Peeks at next token\n    \"\"\"",
        "\"\"\"\n    Runs compile engine\n    \"\"\"",
        "\"\"\"\nReceives VMArray and a file name string with .vm suffix.\nWrites the array to file\n\"\"\""
    ],
    "functions": [
        "checkIfTokenInArray",
        "stripTags",
        "getTokenType",
        "handleTabsArray",
        "checkMatchForToken",
        "advanceIndex",
        "appendBlockTitle",
        "appendTokenizedLine",
        "updateIndentLevel",
        "getCurToken",
        "peekNextToken",
        "compileEngine",
        "compileClass",
        "compileVarDec",
        "compileSubroutine",
        "compileSubroutineBody",
        "compileParameterList",
        "compileStatements",
        "compileDo",
        "compileLet",
        "compileWhile",
        "compileReturn",
        "compileIf",
        "compileExpression",
        "compileTerm",
        "compileExpressionList",
        "compileSubroutineCall",
        "writeArrayToFile",
        "writeVMArrayToFile",
        "main"
    ],
    "classes": [
        "Compiler"
    ]
}