{
    "identifiers": [
        "JsonLD",
        "Entities",
        "Context",
        "Newtonsoft",
        "Json",
        "Newtonsoft",
        "Json",
        "Linq",
        "NUnit",
        "Framework",
        "TestFixture",
        "JsonProperty",
        "AutoContext",
        "Person",
        "Test",
        "Person",
        "Context",
        "Assert",
        "That",
        "context",
        "name",
        "Is",
        "EqualTo",
        "Assert",
        "That",
        "context",
        "lastName",
        "Is",
        "EqualTo"
    ],
    "literals": [
        "\"http://example.com/vocab/Person\"",
        "\"lastName\"",
        "\"http://example.com/vocab/Person#name\"",
        "\"http://example.com/vocab/Person#lastName\""
    ],
    "variables": [
        "Type",
        "Name",
        "Surname",
        "JObject",
        "Context",
        "dynamic",
        "context"
    ],
    "comments": [
        "# Documentation\n\n## Building the `@context` shorthands\n\nThe JSON-LD `@context` can be build manually from scratch, but in some cases\nit may be possible to reduce the context to some common base for each property\nand set it up accordingly.\n\nCurrently there are two strategies for creating terms for properties.\n\n### Class identifier as base\n\nFirst way is to concatenate the class identifier with property names. This can be done\nin two ways:\n\n1. If the type is a hash URI, append to the hash fragment:\n\n    `http://example.com/vocab#Person` -> `http://example.com/vocab#Person/propertyName`\n\n1. Otherwise append the property name as hash fragment:\n\n    `http://example.com/vocab/Person` -> `http://example.com/vocab/Person#propertyName`\n *",
        "also works with custom property names",
        "given",
        "then",
        "Note that is if the class type doesn't have a statically resolvable Type identifier\n(that is, using a static property or annotation), then it will be necessary to create\n`AutoContext` with a constructor which takes URL as one of its parameter.\n \n*",
        "### Vocabulary IRI as base\n\n### Combining with existing context\n\n### Custom automatic context\n\nIf you ever find the need to implement a different logic for generating the \n`@context` you can implement the abstract [`AutoContextBase&lt;T&gt;`][acb] class\n\n[acb]: https://github.com/wikibus/JsonLD.Entities/blob/master/src/JsonLD.Entities/Context/AutoContextBase.cs\n\n*"
    ],
    "docstrings": [],
    "functions": [
        "Context_can_be_built_from_type_id"
    ],
    "classes": [
        "AutomaticContextBuilding",
        "Person"
    ]
}