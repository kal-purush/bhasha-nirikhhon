{
    "identifiers": [
        "math",
        "random",
        "ps2_visualize",
        "pylab",
        "ps2_verify_movement35",
        "testRobotMovement",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "angle",
        "speed",
        "getX",
        "getY",
        "angle",
        "speed",
        "math",
        "cos",
        "math",
        "radians",
        "angle",
        "speed",
        "math",
        "sin",
        "math",
        "radians",
        "angle",
        "old_x",
        "delta_x",
        "old_y",
        "delta_y",
        "Position",
        "new_x",
        "new_y",
        "x",
        "y",
        "width",
        "height",
        "NotImplementedError",
        "pos",
        "NotImplementedError",
        "m",
        "n",
        "NotImplementedError",
        "NotImplementedError",
        "NotImplementedError",
        "NotImplementedError",
        "pos",
        "NotImplementedError",
        "room",
        "speed",
        "NotImplementedError",
        "NotImplementedError",
        "NotImplementedError",
        "position",
        "NotImplementedError",
        "direction",
        "NotImplementedError",
        "NotImplementedError",
        "Robot",
        "NotImplementedError",
        "num_robots",
        "speed",
        "width",
        "height",
        "min_coverage",
        "num_trials",
        "robot_type",
        "NotImplementedError",
        "Robot",
        "NotImplementedError",
        "title",
        "x_label",
        "y_label",
        "num_robots",
        "num_robot_range",
        "num_robots",
        "times1",
        "append",
        "runSimulation",
        "num_robots",
        "StandardRobot",
        "times2",
        "append",
        "runSimulation",
        "num_robots",
        "RandomWalkRobot",
        "pylab",
        "plot",
        "num_robot_range",
        "times1",
        "pylab",
        "plot",
        "num_robot_range",
        "times2",
        "pylab",
        "title",
        "title",
        "pylab",
        "legend",
        "pylab",
        "xlabel",
        "x_label",
        "pylab",
        "ylabel",
        "y_label",
        "pylab",
        "show",
        "title",
        "x_label",
        "y_label",
        "width",
        "width",
        "width",
        "height",
        "aspect_ratios",
        "append",
        "width",
        "height",
        "times1",
        "append",
        "runSimulation",
        "width",
        "height",
        "StandardRobot",
        "times2",
        "append",
        "runSimulation",
        "width",
        "height",
        "RandomWalkRobot",
        "pylab",
        "plot",
        "aspect_ratios",
        "times1",
        "pylab",
        "plot",
        "aspect_ratios",
        "times2",
        "pylab",
        "title",
        "title",
        "pylab",
        "legend",
        "pylab",
        "xlabel",
        "x_label",
        "pylab",
        "ylabel",
        "y_label",
        "pylab",
        "show"
    ],
    "literals": [
        "\"(%0.2f, %0.2f)\"",
        "\"Plotting\"",
        "\"robots...\"",
        "'StandardRobot'",
        "'RandomWalkRobot'",
        "\"Plotting cleaning time for a room of width:\"",
        "\"by height:\"",
        "'StandardRobot'",
        "'RandomWalkRobot'"
    ],
    "variables": [
        "x",
        "y",
        "old_x",
        "old_y",
        "angle",
        "delta_y",
        "delta_x",
        "new_x",
        "new_y",
        "num_robot_range",
        "times1",
        "times2",
        "aspect_ratios",
        "times1",
        "times2",
        "height"
    ],
    "comments": [
        "6.00.2x Problem Set 2: Simulating robots",
        "For Python 3.5:",
        "If you get a \"Bad magic number\" ImportError, you are not using Python 3.5",
        "=== Provided class Position",
        "Compute the change in position",
        "Add that to the existing position",
        "=== Problem 1",
        "=== Problem 2",
        "don't change this!",
        "=== Problem 3",
        "Uncomment this line to see your implementation of StandardRobot in action!",
        "testRobotMovement(StandardRobot, RectangularRoom)",
        "=== Problem 4",
        "Uncomment this line to see how much your simulation takes on average",
        "print(runSimulation(1, 1.0, 10, 10, 0.75, 30, StandardRobot))",
        "=== Problem 5",
        "=== Problem 6",
        "NOTE: If you are running the simulation, you will have to close it",
        "before the plot will show up.",
        "",
        "1) Write a function call to showPlot1 that generates an appropriately-labeled",
        "plot.",
        "",
        "(... your call here ...)",
        "",
        "",
        "2) Write a function call to showPlot2 that generates an appropriately-labeled",
        "plot.",
        "",
        "(... your call here ...)",
        ""
    ],
    "docstrings": [
        "\"\"\"\n    A Position represents a location in a two-dimensional room.\n    \"\"\"",
        "\"\"\"\n        Initializes a position with coordinates (x, y).\n        \"\"\"",
        "\"\"\"\n        Computes and returns the new Position after a single clock-tick has\n        passed, with this object as the current position, and with the\n        specified angle and speed.\n\n        Does NOT test whether the returned position fits inside the room.\n\n        angle: number representing angle in degrees, 0 <= angle < 360\n        speed: positive float representing speed\n\n        Returns: a Position object representing the new position.\n        \"\"\"",
        "\"\"\"\n    A RectangularRoom represents a rectangular region containing clean or dirty\n    tiles.\n\n    A room has a width and a height and contains (width * height) tiles. At any\n    particular time, each of these tiles is either clean or dirty.\n    \"\"\"",
        "\"\"\"\n        Initializes a rectangular room with the specified width and height.\n\n        Initially, no tiles in the room have been cleaned.\n\n        width: an integer > 0\n        height: an integer > 0\n        \"\"\"",
        "\"\"\"\n        Mark the tile under the position POS as cleaned.\n\n        Assumes that POS represents a valid position inside this room.\n\n        pos: a Position\n        \"\"\"",
        "\"\"\"\n        Return True if the tile (m, n) has been cleaned.\n\n        Assumes that (m, n) represents a valid tile inside the room.\n\n        m: an integer\n        n: an integer\n        returns: True if (m, n) is cleaned, False otherwise\n        \"\"\"",
        "\"\"\"\n        Return the total number of tiles in the room.\n\n        returns: an integer\n        \"\"\"",
        "\"\"\"\n        Return the total number of clean tiles in the room.\n\n        returns: an integer\n        \"\"\"",
        "\"\"\"\n        Return a random position inside the room.\n\n        returns: a Position object.\n        \"\"\"",
        "\"\"\"\n        Return True if pos is inside the room.\n\n        pos: a Position object.\n        returns: True if pos is in the room, False otherwise.\n        \"\"\"",
        "\"\"\"\n    Represents a robot cleaning a particular room.\n\n    At all times the robot has a particular position and direction in the room.\n    The robot also has a fixed speed.\n\n    Subclasses of Robot should provide movement strategies by implementing\n    updatePositionAndClean(), which simulates a single time-step.\n    \"\"\"",
        "\"\"\"\n        Initializes a Robot with the given speed in the specified room. The\n        robot initially has a random direction and a random position in the\n        room. The robot cleans the tile it is on.\n\n        room:  a RectangularRoom object.\n        speed: a float (speed > 0)\n        \"\"\"",
        "\"\"\"\n        Return the position of the robot.\n\n        returns: a Position object giving the robot's position.\n        \"\"\"",
        "\"\"\"\n        Return the direction of the robot.\n\n        returns: an integer d giving the direction of the robot as an angle in\n        degrees, 0 <= d < 360.\n        \"\"\"",
        "\"\"\"\n        Set the position of the robot to POSITION.\n\n        position: a Position object.\n        \"\"\"",
        "\"\"\"\n        Set the direction of the robot to DIRECTION.\n\n        direction: integer representing an angle in degrees\n        \"\"\"",
        "\"\"\"\n        Simulate the raise passage of a single time-step.\n\n        Move the robot to a new position and mark the tile it is on as having\n        been cleaned.\n        \"\"\"",
        "\"\"\"\n    A StandardRobot is a Robot with the standard movement strategy.\n\n    At each time-step, a StandardRobot attempts to move in its current\n    direction; when it would hit a wall, it *instead* chooses a new direction\n    randomly.\n    \"\"\"",
        "\"\"\"\n        Simulate the raise passage of a single time-step.\n\n        Move the robot to a new position and mark the tile it is on as having\n        been cleaned.\n        \"\"\"",
        "\"\"\"\n    Runs NUM_TRIALS trials of the simulation and returns the mean number of\n    time-steps needed to clean the fraction MIN_COVERAGE of the room.\n\n    The simulation is run with NUM_ROBOTS robots of type ROBOT_TYPE, each with\n    speed SPEED, in a room of dimensions WIDTH x HEIGHT.\n\n    num_robots: an int (num_robots > 0)\n    speed: a float (speed > 0)\n    width: an int (width > 0)\n    height: an int (height > 0)\n    min_coverage: a float (0 <= min_coverage <= 1.0)\n    num_trials: an int (num_trials > 0)\n    robot_type: class of robot to be instantiated (e.g. StandardRobot or\n                RandomWalkRobot)\n    \"\"\"",
        "\"\"\"\n    A RandomWalkRobot is a robot with the \"random walk\" movement strategy: it\n    chooses a new direction at random at the end of each time-step.\n    \"\"\"",
        "\"\"\"\n        Simulate the passage of a single time-step.\n\n        Move the robot to a new position and mark the tile it is on as having\n        been cleaned.\n        \"\"\"",
        "\"\"\"\n    What information does the plot produced by this function tell you?\n    \"\"\"",
        "\"\"\"\n    What information does the plot produced by this function tell you?\n    \"\"\""
    ],
    "functions": [
        "getX",
        "getY",
        "getNewPosition",
        "__str__",
        "cleanTileAtPosition",
        "isTileCleaned",
        "getNumTiles",
        "getNumCleanedTiles",
        "getRandomPosition",
        "isPositionInRoom",
        "getRobotPosition",
        "getRobotDirection",
        "setRobotPosition",
        "setRobotDirection",
        "updatePositionAndClean",
        "updatePositionAndClean",
        "runSimulation",
        "updatePositionAndClean",
        "showPlot1",
        "showPlot2"
    ],
    "classes": [
        "Position",
        "RectangularRoom",
        "Robot",
        "StandardRobot",
        "RandomWalkRobot"
    ]
}