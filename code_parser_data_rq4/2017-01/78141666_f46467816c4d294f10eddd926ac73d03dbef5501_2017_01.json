{
    "identifiers": [
        "val",
        "val",
        "isNaN",
        "t",
        "t",
        "classes",
        "classes",
        "classes",
        "c",
        "col",
        "c",
        "col",
        "url",
        "width",
        "height",
        "convertToJpeg",
        "url",
        "url",
        "url",
        "url",
        "width",
        "url",
        "url",
        "width",
        "height",
        "url",
        "url",
        "height",
        "convertToJpeg",
        "url",
        "url",
        "url",
        "name",
        "QueryStringReader",
        "qsr",
        "q",
        "q",
        "name",
        "qs",
        "q",
        "qs",
        "queryString",
        "queryString",
        "queryString",
        "queryString",
        "decodeURI",
        "nameValuePairs",
        "pair",
        "pair",
        "queryStringValues",
        "items",
        "items",
        "queryStringValues",
        "width",
        "isSmallScreen",
        "width",
        "width",
        "element",
        "element",
        "element",
        "element",
        "coordinates",
        "coordinates",
        "coordinates",
        "coordinates",
        "element",
        "element",
        "element",
        "element",
        "coordinates",
        "coordinates",
        "coordinates",
        "coordinates",
        "element",
        "element",
        "coordinates",
        "coordinates",
        "element",
        "cssDisplay",
        "element",
        "cssDisplay",
        "element",
        "element",
        "element",
        "cssDisplay",
        "element",
        "element",
        "cssDisplay",
        "element",
        "element",
        "textOptions",
        "element",
        "textOptions",
        "element",
        "textOptions",
        "element",
        "textOptions",
        "el",
        "selector",
        "el",
        "el",
        "el",
        "el",
        "el",
        "matchesSelector",
        "el",
        "selector",
        "el",
        "el",
        "el",
        "n",
        "width",
        "z",
        "z",
        "z",
        "n",
        "n",
        "n",
        "width",
        "n",
        "width",
        "n",
        "z",
        "n",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "element",
        "element",
        "element",
        "elements",
        "el",
        "elements",
        "el",
        "el"
    ],
    "literals": [
        "'$'",
        "''",
        "string",
        "'div'",
        "'columns'",
        "string",
        "string",
        "'string'",
        "'http:'",
        "'https:'",
        "'wid='",
        "'hei='",
        "'fmt=pjpg'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'&'",
        "'='",
        "'block'",
        "'none'",
        "'block'",
        "'none'",
        "'none'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'0'",
        "''"
    ],
    "variables": [
        "t",
        "col",
        "qs",
        "qsr",
        "nameValuePairs",
        "queryStringValues",
        "items",
        "width",
        "width",
        "width",
        "coordinates",
        "coordinates",
        "coordinates",
        "matchesSelector"
    ],
    "comments": [
        "apple",
        "middle click, >IE9 + everyone else"
    ],
    "docstrings": [
        "* Format a number into currency format. Example, 1.23 => $1.23, or 1 => $1.00.\n * @param number value",
        "* Create a Foundation Grid Column Div HTML Node. Note: 'columns' class is already added for you.\n * @param classes",
        "* Updates scene7 image URL with specific height, width, and/or makes it a progressive JPEG.\n * @param Scene7 url string\n * @param width number\n * @param height number\n * @param convertToJpeg Update string to be a JPEG.",
        "* Class which handles extraction of name value pairs from a query string.",
        "* Takes in the window query string and attempts to find the given name.\n   * If not found, will return NULL.\n   * @param name The name of the query string to find.",
        "* Create a query string reader.\n   * @param queryString? string",
        "* Extract the name value pairs from a query string.\n   * @return QueryString[]",
        "* Determines whether or not the current screen is a small screen.",
        "* Determines whether or not the current screen is a medium screen.",
        "* Determines whether or not the current screen is a large screen.",
        "* Determines whether or not a given element is currently completely visible inside the viewport",
        "* Determines whether or not the top of a given element is currently visible inside the viewport",
        "* Determines whether or not the bottom of a given element is currently visible inside the viewport",
        "* Shows a given element.\n * @param cssDisplay = 'block'",
        "* Hides a given element.",
        "* Toggles the display status of an element between visible and hidden.\n * @param cssDisplay = 'block'",
        "* Toggles the innerHTML of an element between two strings.",
        "* Finds the closest parent node. Similar to jQuery's .closest function.\n * @param el Initial element\n * @param selector Selector to find\n * @return Node of found parent. If none found, return input node.",
        "* Pad a string with zeroes.\n * @param n string to pad\n * @param width how many digits\n * @param z string to prepend",
        "* Figure out if user is trying to open a new tab with a click.",
        "* Contains utility functions for verifying the validity of page elements.",
        "* Checks a single element against null and undefined.",
        "* Checks an array of elements against null and undefined.\n   * @param elements"
    ],
    "functions": [
        "formatPrice",
        "createColumnDivNode",
        "updateScene7ImageUrl",
        "findQueryString",
        "getAttributesAndValues",
        "isSmallScreen",
        "isMediumScreen",
        "isLargeScreen",
        "isFullyInViewport",
        "isTopInViewport",
        "isBottomInViewport",
        "show",
        "hide",
        "toggleDisplay",
        "toggleText",
        "closest",
        "pad",
        "isNewTabClick",
        "isValidElement",
        "areValidElements"
    ],
    "classes": [
        "QueryStringReader",
        "ElementValidator"
    ]
}