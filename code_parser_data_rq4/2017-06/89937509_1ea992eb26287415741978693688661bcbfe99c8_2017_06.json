{
    "identifiers": [
        "csv",
        "numpy",
        "np",
        "keras",
        "utils",
        "np_utils",
        "FeatureExtractor",
        "feat_ext",
        "keras",
        "models",
        "Sequential",
        "keras",
        "layers",
        "Dense",
        "keras",
        "wrappers",
        "scikit_learn",
        "KerasClassifier",
        "np",
        "random",
        "seed",
        "seed",
        "open",
        "csvfile",
        "csv",
        "reader",
        "csvfile",
        "delimiter",
        "row",
        "feareader",
        "data",
        "append",
        "row",
        "data",
        "open",
        "csvfile",
        "csv",
        "reader",
        "csvfile",
        "delimiter",
        "row",
        "tareader",
        "row",
        "targets",
        "append",
        "row",
        "np",
        "shape",
        "data",
        "np",
        "asmatrix",
        "data",
        "np",
        "asarray",
        "targets",
        "astype",
        "np",
        "data",
        "len",
        "data",
        "astype",
        "np",
        "data",
        "targets",
        "len",
        "targets",
        "len",
        "data",
        "sklearn",
        "model_selection",
        "train_test_split",
        "data",
        "np_utils",
        "to_categorical",
        "targets",
        "feat_ext",
        "baseline_model",
        "model",
        "load_weights",
        "model",
        "fit",
        "X_train",
        "dummy_y_train",
        "nb_epoch",
        "batch_size",
        "verbose",
        "model",
        "save_weights",
        "overwrite"
    ],
    "literals": [
        "'./Resources/features.csv'",
        "'rb'",
        "','",
        "'./Resources/targets2.csv'",
        "'rb'",
        "','",
        "'./EmoDashAnnotation/Resources/EmoDashANN_weights_v1.h5'",
        "'./EmoDashAnnotation/Resources/EmoDashANN_weights_v2.h5'"
    ],
    "variables": [
        "seed",
        "data",
        "targets",
        "feareader",
        "tareader",
        "data",
        "targets",
        "data",
        "X_train",
        "dummy_y_train",
        "model"
    ],
    "comments": [
        "show pca first two components wrt targets",
        ", X_test, y_train, y_test = train_test_split(data,targets, test_size = 0.2, random_state = 0)"
    ],
    "docstrings": [
        "'''import matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=2)\npca.fit(data)\ntoplotdata = pca.transform(data)\n\n\nplt.plot(toplotdata[:,0], toplotdata[:,1], 'ob')\nplt.plot(toplotdata[targets==4,0], toplotdata[targets==4,1], 'or')\nplt.plot(toplotdata[targets==0,0], toplotdata[targets==0,1], 'oy')\nplt.plot(toplotdata[targets==3,0], toplotdata[targets==3,1], 'om')\nplt.plot(toplotdata[targets==2,0], toplotdata[targets==2,1], 'oc')\nplt.plot(toplotdata[targets==6,0], toplotdata[targets==6,1], 'og')\n\n\nplt.show()\n'''",
        "'''classifier = KerasClassifier(build_fn=model, verbose=0, batch_size=10, epochs=90)\nkfold = KFold(n_splits=10, shuffle=True, random_state=seed)\nresults = cross_val_score(classifier, X_train, dummy_y_train, cv=kfold, n_jobs=-1)\nprint(\"Baseline: %.2f%% (%.2f%%)\" % (results.mean()*100, results.std()*100))\n'''"
    ],
    "functions": [],
    "classes": []
}