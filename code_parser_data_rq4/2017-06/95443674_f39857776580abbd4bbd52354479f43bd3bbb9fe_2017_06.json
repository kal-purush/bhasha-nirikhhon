{
    "identifiers": [
        "Bio",
        "SeqIO",
        "argparse",
        "random",
        "re",
        "os",
        "time",
        "itertools",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "nargs",
        "required",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "required",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "required",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "required",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "required",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "add_argument",
        "action",
        "help",
        "parser",
        "parse_args",
        "vars",
        "parse",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "verboseDebug",
        "get_list_from_args",
        "rmArg",
        "get_list_from_args",
        "setArg",
        "get_list_from_args",
        "rmCombiArg",
        "verbose",
        "len",
        "toRemove",
        "join",
        "toRemove",
        "len",
        "rmCombis",
        "join",
        "rmCombis",
        "get_tags_dict",
        "tagFile",
        "forNames",
        "revNames",
        "toRemove",
        "verbose",
        "get_all_combis",
        "setChoice",
        "primersF",
        "primersR",
        "nCombis",
        "rmCombis",
        "verbose",
        "join",
        "allCombis",
        "nCombis",
        "len",
        "allCombis",
        "nCombis",
        "len",
        "allCombis",
        "verbose",
        "round",
        "nCombis",
        "len",
        "allCombis",
        "nCombis",
        "len",
        "allCombis",
        "open",
        "outFileName",
        "log",
        "outFileName",
        "join",
        "time",
        "strftime",
        "split",
        "open",
        "logFileName",
        "o",
        "write",
        "tagFile",
        "o",
        "write",
        "randomArg",
        "o",
        "write",
        "bruteArg",
        "o",
        "write",
        "setChoice",
        "rmCombis",
        "len",
        "primersF",
        "len",
        "primersR",
        "o",
        "write",
        "o",
        "write",
        "o",
        "write",
        "join",
        "forNames",
        "o",
        "write",
        "join",
        "revNames",
        "o",
        "write",
        "join",
        "tagLen",
        "o",
        "write",
        "outFileName",
        "o",
        "write",
        "nCombis",
        "o",
        "write",
        "maxRep",
        "o",
        "write",
        "check_maxRep",
        "primersF",
        "primersR",
        "nCombis",
        "maxRep",
        "verbose",
        "randomArg",
        "make_random_design",
        "allCombis",
        "nCombis",
        "maxreps",
        "append",
        "numRep",
        "bruteArg",
        "maxRep",
        "numRep",
        "maxRep",
        "c",
        "step",
        "step",
        "make_pfpr_design",
        "randomArg",
        "primersF",
        "primersR",
        "allCombis",
        "nCombis",
        "maxRep",
        "step",
        "numRep",
        "verbose",
        "maxreps",
        "append",
        "numRep",
        "c",
        "setChoice",
        "rmCombis",
        "len",
        "primersF",
        "len",
        "primersR",
        "raw_input",
        "userChoice",
        "make_lsd",
        "nCombis",
        "len",
        "primersF",
        "shuffle_lsd",
        "lsd",
        "translate_to_primers",
        "lsd",
        "primersF",
        "primersR",
        "allCombis",
        "combis",
        "maxreps",
        "append",
        "numRep",
        "get_primer_usage",
        "combis",
        "tags",
        "tagLen",
        "get_base_props",
        "tagLen",
        "primerSet",
        "show_selection",
        "num",
        "usage",
        "combis",
        "primersF",
        "primersR",
        "verbose",
        "log",
        "o",
        "one",
        "raw_input",
        "userChoice",
        "get_base_props",
        "tagLen",
        "primerSet",
        "show_last_selection",
        "num",
        "combis",
        "verbose",
        "log",
        "o",
        "oOut",
        "n",
        "size",
        "size",
        "i",
        "size",
        "n",
        "size",
        "n",
        "size",
        "size",
        "nDiags",
        "iStart",
        "nDiags",
        "starts",
        "divis",
        "starts",
        "append",
        "curStart",
        "start",
        "starts",
        "start",
        "rowdx",
        "row",
        "lsd",
        "rowdx",
        "rowdx",
        "start",
        "len",
        "row",
        "lsd",
        "curRow",
        "curStart",
        "curStart",
        "remain",
        "get_larger_gap",
        "lsd",
        "size",
        "largerGap",
        "len",
        "largerGap",
        "start",
        "rowdx",
        "row",
        "lsd",
        "remain",
        "rowdx",
        "rowdx",
        "start",
        "len",
        "row",
        "lsd",
        "curRow",
        "curStart",
        "curStart",
        "remain",
        "lsd",
        "row",
        "size",
        "idx",
        "i",
        "row",
        "i",
        "gaps",
        "append",
        "idx",
        "i",
        "gaps",
        "append",
        "idx",
        "gaps",
        "append",
        "idx",
        "idx",
        "x",
        "gaps",
        "x",
        "max",
        "y",
        "y",
        "gaps",
        "random",
        "choice",
        "longest",
        "longest",
        "len",
        "gaps",
        "size",
        "gaps",
        "longest",
        "size",
        "longest",
        "longest",
        "gaps",
        "longest",
        "gaps",
        "longest",
        "lsd",
        "random",
        "shuffle",
        "lsd",
        "lsd",
        "lsd",
        "primersF",
        "primersR",
        "allCombis",
        "len",
        "lsd",
        "rdx",
        "row",
        "lsd",
        "reps",
        "append",
        "sum",
        "row",
        "fdx",
        "f",
        "row",
        "f",
        "colreps",
        "fdx",
        "primersF",
        "fdx",
        "primersR",
        "rdx",
        "curCombi",
        "allCombis",
        "combis",
        "append",
        "curCombi",
        "i",
        "colreps",
        "reps",
        "append",
        "i",
        "combis",
        "max",
        "reps",
        "pF",
        "n",
        "m",
        "sum",
        "d",
        "values",
        "n",
        "random",
        "choice",
        "pF",
        "d",
        "has_key",
        "cur",
        "d",
        "cur",
        "m",
        "d",
        "cur",
        "d",
        "fP",
        "rPrimers",
        "allCombis",
        "random",
        "choice",
        "rPrimers",
        "fP",
        "rP",
        "verboseDebug",
        "fP",
        "rPrimers",
        "rP",
        "curCombi",
        "curCombi",
        "allCombis",
        "random",
        "choice",
        "rPrimers",
        "fP",
        "rP",
        "rP",
        "rPrimers",
        "remove",
        "rP",
        "rP",
        "curRev",
        "rPrimers",
        "primersR",
        "step",
        "curRev",
        "candi",
        "rPrimers",
        "rev",
        "curRev",
        "abs",
        "primersR",
        "index",
        "rev",
        "primersR",
        "index",
        "candi",
        "curStep",
        "step",
        "dists",
        "append",
        "curStep",
        "okR",
        "dists",
        "d",
        "candiR_dico",
        "fP",
        "rPrimers",
        "dPrimersR",
        "allCombis",
        "curRev",
        "verbose",
        "random",
        "choice",
        "candiR_dico",
        "keys",
        "fP",
        "rP",
        "allCombis",
        "random",
        "choice",
        "rPrimers",
        "verboseDebug",
        "dPrimersR",
        "has_key",
        "rP",
        "rP",
        "dPrimersR",
        "rP",
        "curRev",
        "append",
        "rP",
        "IndexError",
        "rP",
        "curRev",
        "randomArg",
        "primersF",
        "primersR",
        "allCombis",
        "nCombis",
        "maxRep",
        "step",
        "numRep",
        "verbose",
        "get_dPrimersF",
        "primersF",
        "nCombis",
        "maxRep",
        "reduce",
        "n",
        "m",
        "n",
        "m",
        "x",
        "maxRep",
        "x",
        "primersR",
        "verboseDebug",
        "v",
        "w",
        "sorted",
        "dPrimersF",
        "v",
        "w",
        "dPrimersF",
        "w",
        "sum",
        "dPrimersF",
        "values",
        "rPrimers",
        "len",
        "rPrimers",
        "fP",
        "maxP",
        "sorted",
        "dPrimersF",
        "items",
        "indexP",
        "maxP",
        "verboseDebug",
        "fP",
        "indexP",
        "indexP",
        "get_revInit",
        "fP",
        "rPrimers",
        "allCombis",
        "verboseDebug",
        "rP",
        "get_candiD_dict",
        "rPrimers",
        "primersR",
        "step",
        "curRev",
        "get_revNext",
        "candiR_dico",
        "fP",
        "rPrimers",
        "dPrimersR",
        "allCombis",
        "curRev",
        "verbose",
        "rP",
        "verboseDebug",
        "rP",
        "cc",
        "cc",
        "step2",
        "step2",
        "cc",
        "dPrimersR",
        "has_key",
        "rP",
        "abs",
        "primersF",
        "index",
        "fP",
        "primersF",
        "index",
        "dPrimersR",
        "rP",
        "curStep2",
        "step2",
        "random",
        "choice",
        "rPrimers",
        "fP",
        "rP",
        "allCombis",
        "random",
        "choice",
        "rPrimers",
        "rPrimers",
        "remove",
        "rP",
        "verboseDebug",
        "rP",
        "combis",
        "append",
        "fP",
        "rP",
        "fP",
        "len",
        "combis",
        "nCombis",
        "combis",
        "numRep",
        "step",
        "allCombis",
        "nCombis",
        "random",
        "sample",
        "allCombis",
        "nCombis",
        "y",
        "split",
        "y",
        "combis",
        "count",
        "x",
        "x",
        "z",
        "split",
        "z",
        "combis",
        "y",
        "split",
        "y",
        "combis",
        "count",
        "x",
        "x",
        "z",
        "split",
        "z",
        "combis",
        "max",
        "fPrimers",
        "rPrimers",
        "combis",
        "numRep",
        "combis",
        "tags",
        "tagLen",
        "i",
        "combis",
        "n",
        "i",
        "split",
        "n",
        "p",
        "primerSet",
        "append",
        "tags",
        "p",
        "tagLen",
        "n",
        "usage",
        "n",
        "has_key",
        "px",
        "usage",
        "n",
        "px",
        "usage",
        "n",
        "primerSet",
        "usage",
        "num",
        "usage",
        "combis",
        "primersF",
        "primersR",
        "verbose",
        "log",
        "o",
        "log",
        "o",
        "write",
        "i",
        "sorted",
        "combis",
        "key",
        "x",
        "x",
        "split",
        "x",
        "split",
        "o",
        "write",
        "i",
        "o",
        "write",
        "o",
        "write",
        "o",
        "write",
        "i",
        "j",
        "sorted",
        "num",
        "items",
        "sum",
        "j",
        "values",
        "o",
        "write",
        "i",
        "join",
        "round",
        "j",
        "k",
        "su",
        "k",
        "sorted",
        "j",
        "o",
        "write",
        "j",
        "primersF",
        "index",
        "i",
        "primersR",
        "j",
        "i",
        "x",
        "split",
        "x",
        "split",
        "x",
        "combis",
        "o",
        "write",
        "j",
        "i",
        "o",
        "write",
        "index",
        "len",
        "primersR",
        "usage",
        "has_key",
        "j",
        "o",
        "write",
        "usage",
        "j",
        "o",
        "write",
        "o",
        "write",
        "i",
        "primersR",
        "usage",
        "has_key",
        "i",
        "o",
        "write",
        "usage",
        "i",
        "o",
        "write",
        "o",
        "write",
        "verbose",
        "i",
        "j",
        "sorted",
        "num",
        "items",
        "sum",
        "j",
        "values",
        "i",
        "join",
        "round",
        "j",
        "k",
        "su",
        "k",
        "sorted",
        "j",
        "j",
        "primersF",
        "index",
        "i",
        "primersR",
        "j",
        "i",
        "x",
        "split",
        "x",
        "split",
        "x",
        "combis",
        "j",
        "i",
        "index",
        "len",
        "primersR",
        "usage",
        "has_key",
        "j",
        "usage",
        "j",
        "i",
        "primersR",
        "usage",
        "has_key",
        "i",
        "usage",
        "i",
        "num",
        "combis",
        "verbose",
        "log",
        "o",
        "oOut",
        "verbose",
        "i",
        "j",
        "sorted",
        "num",
        "items",
        "sum",
        "j",
        "values",
        "i",
        "join",
        "round",
        "j",
        "k",
        "su",
        "k",
        "sorted",
        "j",
        "len",
        "combis",
        "verbose",
        "log",
        "o",
        "write",
        "o",
        "write",
        "o",
        "write",
        "i",
        "sorted",
        "combis",
        "key",
        "x",
        "x",
        "split",
        "x",
        "split",
        "oOut",
        "write",
        "join",
        "i",
        "split",
        "verbose",
        "i",
        "log",
        "o",
        "write",
        "join",
        "i",
        "split",
        "log",
        "o",
        "close",
        "oOut",
        "close",
        "tagLen",
        "primerSet",
        "posN",
        "max",
        "tagLen",
        "tagSeq",
        "primerSet",
        "len",
        "tagSeq",
        "posN",
        "tagSeq",
        "posN",
        "curPos",
        "curBase",
        "posN",
        "curPos",
        "num",
        "tagFile",
        "forNames",
        "revNames",
        "toRemove",
        "verbose",
        "open",
        "tagFile",
        "f",
        "i",
        "SeqIO",
        "parse",
        "f",
        "i",
        "id",
        "toRemove",
        "i",
        "id",
        "i",
        "seq",
        "len",
        "x",
        "forNames",
        "x",
        "i",
        "id",
        "primersF",
        "append",
        "i",
        "id",
        "len",
        "x",
        "revNames",
        "x",
        "i",
        "id",
        "primersR",
        "append",
        "i",
        "id",
        "verbose",
        "join",
        "primersF",
        "join",
        "primersR",
        "tags",
        "primersF",
        "primersR",
        "args",
        "args",
        "arg",
        "args",
        "os",
        "path",
        "isfile",
        "arg",
        "open",
        "arg",
        "f",
        "line",
        "f",
        "l",
        "append",
        "join",
        "line",
        "strip",
        "split",
        "l",
        "append",
        "arg",
        "l",
        "setChoice",
        "primersF",
        "primersR",
        "nCombis",
        "rmCombis",
        "setChoice",
        "x",
        "x",
        "setChoice",
        "x",
        "rmCombis",
        "retSet",
        "combi",
        "itertools",
        "product",
        "primersF",
        "primersR",
        "join",
        "combi",
        "curCombi",
        "rmCombis",
        "retSet",
        "append",
        "curCombi",
        "retSet",
        "primersF",
        "primersR",
        "nCombis",
        "maxRep",
        "verbose",
        "len",
        "primersF",
        "len",
        "primersR",
        "maxRep",
        "n_pF",
        "maxRep",
        "n_pR",
        "forMax",
        "nCombis",
        "revMax",
        "nCombis",
        "verbose",
        "maxRep",
        "nCombis",
        "n",
        "maxRep",
        "max",
        "n_pF",
        "n_pR",
        "n",
        "n_pF",
        "nCombis",
        "n",
        "n_pR",
        "nCombis",
        "n",
        "verbose",
        "maxRep",
        "verbose",
        "maxRep",
        "nCombis",
        "maxRep",
        "setMultiplex"
    ],
    "literals": [
        "\"Franck Lejzerowicz\"",
        "\"Copyright 2017, The Deep-Sea Microbiome Project\"",
        "\"Yoann Dufresne\"",
        "\"Jan Pawlowski\"",
        "\"GPL V3\"",
        "\"1.0\"",
        "\"Franck Lejzerowicz\"",
        "\"franck.lejzerowicz@unige.ch\"",
        "'-i'",
        "'?'",
        "'Tagged primers fasta file'",
        "'-o'",
        "'?'",
        "'Output file name'",
        "'-f'",
        "'*'",
        "'Forward primer generic name'",
        "'-r'",
        "'*'",
        "'Reverse generic name'",
        "'-n'",
        "'?'",
        "'Number of combinations to design. Enter different numbers in the same order of the different tags files'",
        "'-l'",
        "'Lengths of the forward and reverse tags (default = [8, 8])'",
        "'-m'",
        "'?'",
        "'Set a maximum primer usage frequency (automatically changed if too low to be possible) (default = 0)'",
        "'-s'",
        "'?'",
        "'Step-spacing between subsequent primers (if case of sequencial cross-contamination of the primers and if alphanumeric primer names) (default = 3)'",
        "'-rm'",
        "'*'",
        "'Single tagged primers not to include (either provide file(s) with single primer name(s) in line(s), or write it fully as space-separated arguents e.g. \"V4F-4 F1-A\")'",
        "'-rmCombi'",
        "'*'",
        "'File(s) with the combinations to avoid (fully written, space separated)'",
        "'-set'",
        "'*'",
        "'Restict the choice of multiplexing design(s) to a list of combinations (file(s) with forward and reverse primers names in 1st and 2nd columns, repaectively'",
        "'--one'",
        "'store_true'",
        "'Get the first selection only (default: off)'",
        "'--nolog'",
        "'store_false'",
        "'Write a log file with the tested combination sets (default: on)'",
        "'--random'",
        "'store_true'",
        "'Make random selection of mulitplexing design (default: off)'",
        "'--brute'",
        "'store_true'",
        "'Make selection using brute-force algorithm based on forward primers selection first and then reverse primers until criteria satisfied (default: off)'",
        "'--verbose'",
        "'store_true'",
        "'Print ongoing processes and results to stdout (default: off)'",
        "'i'",
        "'o'",
        "'n'",
        "'f'",
        "'r'",
        "'l'",
        "'m'",
        "'s'",
        "'rm'",
        "'set'",
        "'rmCombi'",
        "'one'",
        "'nolog'",
        "'random'",
        "'brute'",
        "'verbose'",
        "'To avoid primers:'",
        "'  \\n'",
        "'To avoid combinations:'",
        "'  \\n'",
        "'Candidate combinations:'",
        "'  \\n'",
        "'Too much requested samples for the number of possible combinations (%s)'",
        "'Exiting...'",
        "'Multiplexing design saturation = %s %s (%s samples for %s possible combinations)'",
        "'%'",
        "'w'",
        "'%s_%s.log'",
        "'-'",
        "\"%Y,%m,%d,%H,%M\"",
        "','",
        "'w'",
        "'%s\\n'",
        "'Options:\\n'",
        "'-algorithm\\trandom\\n'",
        "'-algorithm\\tbrute-force\\n'",
        "'-algorithm\\tbrute-force\\n'",
        "'-algorithm\\texact\\n'",
        "'-forNames\\t%s\\n'",
        "'\\t'",
        "'-revNames\\t%s\\n'",
        "'\\t'",
        "'-tagLen\\t%s\\n'",
        "'\\t'",
        "'-outFile\\t%s\\n'",
        "'-nCombis\\t%s\\n'",
        "'-maxRep\\t%s\\n'",
        "'\\n'",
        "'Random algorithm...'",
        "'Brute-force algorithm...'",
        "'Exact algorithm not yet functional if -set or -rmCombi options activated, or if not squared matrix.'",
        "'Continue with *** brute-force *** algorithm?\\n<ENTER> to continue search / <ANYTHING> to stop: '",
        "'Exact algorithm...'",
        "'\\n<ENTER> to continue search / <ANYTHING> to stop: '",
        "'x'",
        "'%s %s'",
        "'%s %s'",
        "'fP, rPrimers'",
        "'> rP:'",
        "'curCombi'",
        "'%s %s'",
        "'%s %s'",
        "'* 1 *'",
        "'Current dPrimersF'",
        "'-----------------'",
        "'idx, primer, number'",
        "'total:'",
        "'Current forward primer'",
        "'/'",
        "'---------------------------->'",
        "'*** 0 (1st choice):'",
        "'*** 0 (2nd choice #1):'",
        "'%s %s'",
        "'*** 0 (2nd choice #2):'",
        "'%s %s'",
        "' '",
        "' '",
        "' '",
        "' '",
        "' '",
        "'Candidate primer combinations:\\n'",
        "'%s\\n'",
        "'\\n'",
        "'Percent of each base per position:\\n'",
        "'base\\tA\\tC\\tG\\tT\\n'",
        "'%s\\t%s\\n'",
        "'\\t'",
        "'\\n'",
        "'%s%s'",
        "'%s%s'",
        "'%s+%s\\t'",
        "'0\\t'",
        "'%s\\t'",
        "'0\\t'",
        "'\\n'",
        "'%s\\t'",
        "'0\\t'",
        "'\\n'",
        "'=> Percent of each base per position:'",
        "'base\\tA\\tC\\tG\\tT'",
        "'%s\\t%s'",
        "'\\t'",
        "'%s%s'",
        "'%s%s'",
        "'%s+%s\\t'",
        "'0\\t'",
        "'%s\\t'",
        "'0\\t'",
        "'%s\\t'",
        "'0\\t'",
        "'percent of each base per position'",
        "'base\\tA\\tC\\tG\\tT'",
        "'%s\\t%s'",
        "'\\t'",
        "'Selected primer combinations:'",
        "'\\n'",
        "'FINAL SELECTION\\n'",
        "'---------------\\n'",
        "'%s\\n'",
        "'\\t'",
        "'%s\\n'",
        "'\\t'",
        "'A'",
        "'C'",
        "'G'",
        "'T'",
        "'fasta'",
        "'x'",
        "'x'",
        "'Forward tagged primers:'",
        "'\\n'",
        "'Reverse tagged primers:'",
        "'\\n'",
        "' '",
        "' '",
        "'The requested max primer-usage frequency of %s is too low to design %s combinations'",
        "'Automatically set to %s'",
        "'The requested max primer-usage frequency of %s is ok to design %s combinations'"
    ],
    "variables": [
        "__author__",
        "__copyright__",
        "__credits__",
        "__license__",
        "__version__",
        "__maintainer__",
        "__email__",
        "parser",
        "parse",
        "args",
        "tagFile",
        "outFileName",
        "nCombis",
        "forNames",
        "revNames",
        "tagLen",
        "maxRep",
        "step",
        "rmArg",
        "setArg",
        "rmCombiArg",
        "one",
        "log",
        "randomArg",
        "bruteArg",
        "verbose",
        "verboseDebug",
        "toRemove",
        "setChoice",
        "rmCombis",
        "tags",
        "primersF",
        "primersR",
        "allCombis",
        "oOut",
        "logFileName",
        "o",
        "maxRep",
        "maxreps",
        "combis",
        "numRep",
        "c",
        "numRep",
        "step",
        "combis",
        "numRep",
        "step",
        "userChoice",
        "bruteArg",
        "lsd",
        "lsd_shuffle",
        "combis",
        "numRep",
        "primerSet",
        "usage",
        "num",
        "userChoice",
        "num",
        "lsd",
        "nDiags",
        "remain",
        "divis",
        "starts",
        "curStart",
        "curStart",
        "curRow",
        "curStart",
        "largerGap",
        "start",
        "curStart",
        "curRow",
        "curStart",
        "gaps",
        "gap",
        "longest",
        "longest",
        "reps",
        "combis",
        "colreps",
        "curCombi",
        "d",
        "cur",
        "d",
        "cur",
        "rP",
        "curCombi",
        "rP",
        "curCombi",
        "curRev",
        "d",
        "dists",
        "okR",
        "curStep",
        "okR",
        "d",
        "candi",
        "rP",
        "rP",
        "combis",
        "dPrimersF",
        "rPrimers",
        "dPrimersR",
        "rP",
        "curRev",
        "candiR_dico",
        "rP",
        "curRev",
        "cc",
        "step2",
        "curStep2",
        "rP",
        "rP",
        "dPrimersR",
        "rP",
        "numRep",
        "combis",
        "fPrimers",
        "rPrimers",
        "numRep",
        "primerSet",
        "usage",
        "p",
        "px",
        "px",
        "su",
        "su",
        "su",
        "num",
        "curPos",
        "curPos",
        "curBase",
        "num",
        "tags",
        "primersF",
        "primersR",
        "tags",
        "l",
        "retSet",
        "retSet",
        "curCombi",
        "n_pF",
        "n_pR",
        "forMax",
        "revMax",
        "maxRep"
    ],
    "comments": [
        "!/usr/bin/env python",
        "prepare log file for writing every trial of multiplexing design",
        "stop design search after first obtained",
        "stop design search?",
        "for each remaining reverse primer",
        "for each currently selected reverse primer",
        "get the step distance",
        "record in the dico the reverse primer that has his step value to the already selected reverse below the step value (with these steps as values)",
        "get the forward primers usage frequencies dict {primer1: 3, primer2: 2, ...}",
        "get a list with each reverse primer appearing maxRep times",
        "for each forward primer present at least once",
        "for each of the times it is present",
        "get a random reverse primer and list initialized with this primer only",
        "get a dict {}",
        "get a list of numbers corresponding to the primers usage frequencies",
        "get a list of numbers corresponding to the primers usage frequencies",
        "get the maximum usage frequency for a primer",
        "px = p.split('-')[-1]"
    ],
    "docstrings": [
        "\"\"\"This script needs as input the tagged primers in fasta format, the prefix names of the forward and reverse pair(s), the output file name and a number of primer combinations. It only performs for short-construct primers corresponding to the fusion of n-nt long tags with an amplification primer. All tagged variants of an amplication must share the same prefix name, before a separator (default: \"-\").\"\"\""
    ],
    "functions": [
        "setMultiplex",
        "make_lsd",
        "get_larger_gap",
        "shuffle_lsd",
        "translate_to_primers",
        "get_dPrimersF",
        "get_revInit",
        "get_candiD_dict",
        "get_revNext",
        "make_pfpr_design",
        "make_random_design",
        "get_primer_usage",
        "show_selection",
        "show_last_selection",
        "get_base_props",
        "get_tags_dict",
        "get_list_from_args",
        "get_all_combis",
        "check_maxRep"
    ],
    "classes": []
}