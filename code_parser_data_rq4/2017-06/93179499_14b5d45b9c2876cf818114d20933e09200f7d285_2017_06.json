{
    "identifiers": [
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "FileReader",
        "org",
        "antlr",
        "v4",
        "runtime",
        "org",
        "antlr",
        "v4",
        "runtime",
        "tree",
        "args",
        "everything",
        "br",
        "sb",
        "line",
        "br",
        "readLine",
        "line",
        "sb",
        "append",
        "line",
        "sb",
        "append",
        "lineSeparator",
        "line",
        "br",
        "readLine",
        "everything",
        "sb",
        "toString",
        "br",
        "close",
        "input",
        "everything",
        "anblexer",
        "input",
        "anbtokens",
        "anblexer",
        "anbparser",
        "anbtokens",
        "tree",
        "anbparser",
        "anbDocument",
        "tree",
        "toStringTree",
        "anbparser"
    ],
    "literals": [
        "\"\"",
        "\"./study_cases/dh_auth.AnB\""
    ],
    "variables": [],
    "comments": [
        "begin parsing at rule 'r'",
        "CSVLexer lexer3 = new CSVLexer(input);",
        "",
        "CommonTokenStream tokens3 = new CommonTokenStream(lexer3);",
        "",
        "CSVParser parser3 = new CSVParser(tokens3);",
        "",
        "ParseTree tree = parser3.csvFile(); // begin parsing at rule 'r'",
        "",
        "System.out.println(tree.toStringTree(parser3)); // print LISP-style tree",
        "ANTLRInputStream input2 = new ANTLRInputStream();",
        "",
        "@SuppressWarnings(\"deprecation\")",
        "ANTLRInputStream input = new ANTLRInputStream( System.in);",
        "",
        "HelloLexer lexer = new HelloLexer(input);",
        "",
        "HTMLLexer lexer2 = new HTMLLexer(input);",
        "",
        "CSVLexer lexer3 = new CSVLexer(input);",
        "",
        "CommonTokenStream tokens = new CommonTokenStream(lexer);",
        "",
        "CommonTokenStream tokens2 = new CommonTokenStream(lexer2);",
        "",
        "CommonTokenStream tokens3 = new CommonTokenStream(lexer3);",
        "",
        "HelloParser parser = new HelloParser(tokens);",
        "",
        "HTMLParser parser2 = new HTMLParser(tokens2);",
        "",
        "CSVParser parser3 = new CSVParser(tokens3);",
        "",
        "ParseTree tree = parser3.csvFile(); // begin parsing at rule 'r'",
        "System.out.println(tree.toStringTree(parser3)); // print LISP-style tree"
    ],
    "docstrings": [],
    "functions": [
        "main"
    ],
    "classes": [
        "HelloRunner"
    ]
}