{
    "identifiers": [
        "fs",
        "path",
        "_iterator",
        "_iterator",
        "done",
        "done",
        "done",
        "condition",
        "value",
        "condition",
        "value",
        "condition",
        "value",
        "toSkip",
        "toTake",
        "mapFunction",
        "value",
        "iterator",
        "JavascriptIterator",
        "result",
        "result",
        "result",
        "result",
        "condition",
        "value",
        "condition",
        "result",
        "result",
        "value",
        "condition",
        "value",
        "result",
        "result",
        "condition",
        "value",
        "condition",
        "result",
        "result",
        "condition",
        "result",
        "value",
        "result",
        "value",
        "result",
        "condition",
        "value",
        "WhereIterator",
        "condition",
        "toSkip",
        "SkipIterator",
        "toSkip",
        "toTake",
        "TakeIterator",
        "toTake",
        "mapFunction",
        "value",
        "MapIterator",
        "mapFunction",
        "toConcatenate",
        "toConcatenate",
        "result",
        "toConcatenate",
        "toConcatenate",
        "toConcatenate",
        "result",
        "ConcatenateIterator",
        "toConcatenate",
        "result",
        "IteratorBase",
        "_innerIterator",
        "IteratorDecorator",
        "innerIterator",
        "_condition",
        "value",
        "innerIterator",
        "IteratorDecorator",
        "innerIterator",
        "_toSkip",
        "innerIterator",
        "IteratorDecorator",
        "innerIterator",
        "_toTake",
        "innerIterator",
        "isDefined",
        "_innerIterator",
        "_mapFunction",
        "value",
        "_innerIterator",
        "JavascriptIterator",
        "isDefined",
        "result",
        "condition",
        "value",
        "condition",
        "result",
        "result",
        "value",
        "condition",
        "value",
        "result",
        "result",
        "isDefined",
        "condition",
        "value",
        "condition",
        "value",
        "result",
        "value",
        "result",
        "condition",
        "value",
        "WhereIterator",
        "condition",
        "toSkip",
        "SkipIterator",
        "toSkip",
        "toTake",
        "TakeIterator",
        "toTake",
        "mapFunction",
        "value",
        "MapIterator",
        "mapFunction",
        "toConcatenate",
        "ConcatenateIterator",
        "toConcatenate",
        "IteratorBase",
        "_first",
        "_second",
        "condition",
        "value",
        "index",
        "index",
        "value",
        "comparison",
        "lhs",
        "rhs",
        "condition",
        "value",
        "condition",
        "value",
        "condition",
        "value",
        "toSkip",
        "toSkip",
        "toTake",
        "toTake",
        "mapFunction",
        "value",
        "toConcatenate",
        "values",
        "JavascriptIterator",
        "condition",
        "value",
        "condition",
        "index",
        "index",
        "iterator",
        "index",
        "index",
        "result",
        "iterator",
        "result",
        "index",
        "index",
        "iterator",
        "index",
        "index",
        "result",
        "iterator",
        "result",
        "value",
        "comparison",
        "iterableValue",
        "value",
        "comparison",
        "comparison",
        "iterableValue",
        "value",
        "iterableValue",
        "value",
        "iterableValue",
        "comparison",
        "iterableValue",
        "value",
        "condition",
        "value",
        "condition",
        "condition",
        "value",
        "condition",
        "condition",
        "value",
        "condition",
        "WhereIterable",
        "condition",
        "toSkip",
        "toSkip",
        "toSkip",
        "SkipIterable",
        "toSkip",
        "toSkip",
        "toSkip",
        "toSkip",
        "toSkip",
        "toTake",
        "toTake",
        "toTake",
        "TakeIterable",
        "toTake",
        "toTake",
        "toTake",
        "toTake",
        "result",
        "count",
        "toTake",
        "result",
        "result",
        "count",
        "toTake",
        "result",
        "mapFunction",
        "value",
        "mapFunction",
        "MapIterable",
        "mapFunction",
        "toConcatenate",
        "toConcatenate",
        "ConcatenateIterable",
        "toConcatenate",
        "values",
        "values",
        "result",
        "values",
        "valuesCount",
        "result",
        "valuesCount",
        "result",
        "result",
        "valuesCount",
        "values",
        "thisLastValuesIterator",
        "valuesIterator",
        "thisLastValuesIterator",
        "thisLastValuesIterator",
        "valuesIterator",
        "result",
        "result",
        "IterableBase",
        "_innerIterable",
        "_condition",
        "value",
        "IterableBase",
        "_innerIterable",
        "_toSkip",
        "result",
        "result",
        "result",
        "result",
        "index",
        "index",
        "IterableBase",
        "_innerIterable",
        "_toTake",
        "result",
        "result",
        "result",
        "index",
        "index",
        "index",
        "index",
        "_innerIterable",
        "_mapFunction",
        "value",
        "JavascriptIterator",
        "condition",
        "value",
        "condition",
        "index",
        "isDefined",
        "index",
        "index",
        "index",
        "index",
        "index",
        "isDefined",
        "index",
        "index",
        "index",
        "index",
        "value",
        "comparison",
        "lhs",
        "rhs",
        "comparison",
        "comparison",
        "lhs",
        "rhs",
        "lhs",
        "rhs",
        "iterableValue",
        "comparison",
        "iterableValue",
        "value",
        "condition",
        "value",
        "condition",
        "condition",
        "value",
        "condition",
        "condition",
        "value",
        "condition",
        "WhereIterable",
        "condition",
        "toSkip",
        "toSkip",
        "toSkip",
        "SkipIterable",
        "toSkip",
        "toSkip",
        "toSkip",
        "toSkip",
        "toSkip",
        "toTake",
        "toTake",
        "toTake",
        "TakeIterable",
        "toTake",
        "toTake",
        "toTake",
        "toTake",
        "result",
        "count",
        "toTake",
        "result",
        "result",
        "count",
        "toTake",
        "result",
        "mapFunction",
        "value",
        "mapFunction",
        "MapIterable",
        "mapFunction",
        "toConcatenate",
        "toConcatenate",
        "ConcatenateIterable",
        "toConcatenate",
        "values",
        "values",
        "result",
        "values",
        "valuesCount",
        "result",
        "valuesCount",
        "result",
        "result",
        "valuesCount",
        "values",
        "thisLastValuesIterator",
        "valuesIterator",
        "thisLastValuesIterator",
        "thisLastValuesIterator",
        "valuesIterator",
        "result",
        "result",
        "IterableBase",
        "first",
        "second",
        "first",
        "second",
        "IteratorBase",
        "_arrayList",
        "isDefined",
        "ArrayListIterator",
        "arrayList",
        "arrayList",
        "ArrayListIterator",
        "arrayList",
        "arrayList",
        "IterableBase",
        "values",
        "values",
        "ArrayListForwardIterator",
        "ArrayListReverseIterator",
        "index",
        "isDefined",
        "index",
        "index",
        "index",
        "result",
        "index",
        "result",
        "index",
        "value",
        "isDefined",
        "index",
        "index",
        "index",
        "index",
        "value",
        "value",
        "value",
        "condition",
        "value",
        "condition",
        "condition",
        "value",
        "value",
        "value",
        "values",
        "values",
        "value",
        "values",
        "value",
        "value",
        "comparer",
        "lhs",
        "rhs",
        "i",
        "i",
        "comparer",
        "comparer",
        "i",
        "value",
        "i",
        "value",
        "result",
        "i",
        "result",
        "index",
        "isDefined",
        "index",
        "index",
        "index",
        "result",
        "index",
        "i",
        "i",
        "i",
        "i",
        "result",
        "value",
        "comparer",
        "lhs",
        "rhs",
        "value",
        "comparer",
        "isDefined",
        "removeIndex",
        "result",
        "removeIndex",
        "result",
        "initialValues",
        "initialValues",
        "key",
        "value",
        "key",
        "value",
        "pair",
        "lhs",
        "rhs",
        "lhs",
        "rhs",
        "pair",
        "keyValuePairs",
        "keyValuePairs",
        "keyValuePair",
        "keyValuePairs",
        "keyValuePair",
        "keyValuePair",
        "key",
        "pair",
        "pair",
        "key",
        "key",
        "pair",
        "pair",
        "key",
        "pair",
        "pair",
        "value",
        "comparison",
        "lhs",
        "rhs",
        "value",
        "comparison",
        "value",
        "value",
        "value",
        "comparison",
        "lhs",
        "rhs",
        "value",
        "comparison",
        "value",
        "value",
        "value",
        "value",
        "result",
        "value",
        "result",
        "result",
        "value",
        "result",
        "documentText",
        "result",
        "result",
        "newResult",
        "newResult",
        "result",
        "result",
        "newResult",
        "result",
        "text",
        "quote",
        "escape",
        "text",
        "text",
        "text",
        "text",
        "text",
        "value",
        "value",
        "value",
        "value",
        "isDefined",
        "value",
        "value",
        "value",
        "prefix",
        "value",
        "prefix",
        "prefix",
        "value",
        "prefix",
        "value",
        "prefix",
        "value",
        "prefix",
        "prefix",
        "value",
        "prefix",
        "value",
        "suffix",
        "value",
        "suffix",
        "value",
        "suffix",
        "value",
        "value",
        "suffix",
        "suffix",
        "value",
        "searchString",
        "value",
        "searchString",
        "value",
        "searchString",
        "value",
        "count",
        "value",
        "count",
        "count",
        "i",
        "count",
        "i",
        "result",
        "value",
        "result",
        "value",
        "characterIndex",
        "isDefined",
        "value",
        "isDefined",
        "characterIndex",
        "characterIndex",
        "result",
        "i",
        "characterIndex",
        "i",
        "value",
        "i",
        "result",
        "result",
        "value",
        "characterIndex",
        "isDefined",
        "value",
        "isDefined",
        "characterIndex",
        "characterIndex",
        "result",
        "i",
        "characterIndex",
        "i",
        "value",
        "i",
        "result",
        "result",
        "result",
        "value",
        "characterIndex",
        "getColumnIndex",
        "value",
        "characterIndex",
        "isDefined",
        "columnIndex",
        "characterIndex",
        "columnIndex",
        "result",
        "value",
        "indentCharacterIndex",
        "value",
        "indentCharacterIndex",
        "result",
        "value",
        "indentCharacterIndex",
        "indentCharacterIndex",
        "result",
        "values",
        "values",
        "values",
        "values",
        "result",
        "values",
        "values",
        "result",
        "values",
        "result",
        "values",
        "values",
        "values",
        "values",
        "result",
        "values",
        "values",
        "values",
        "result",
        "values",
        "result",
        "values",
        "values",
        "values",
        "values",
        "values",
        "values",
        "values",
        "result",
        "startIndex",
        "afterEndIndex",
        "startIndex",
        "values",
        "values",
        "values",
        "result",
        "startIndex",
        "afterEndIndex",
        "startIndex",
        "result",
        "values",
        "values",
        "value",
        "values",
        "result",
        "value",
        "result",
        "values",
        "values",
        "result",
        "values",
        "result",
        "values",
        "values",
        "values",
        "values",
        "result",
        "values",
        "values",
        "values",
        "result",
        "values",
        "values",
        "value",
        "values",
        "result",
        "value",
        "result",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "result",
        "value",
        "value",
        "result",
        "cloneArray",
        "value",
        "result",
        "propertyName",
        "value",
        "result",
        "propertyName",
        "clone",
        "value",
        "propertyName",
        "result",
        "values",
        "values",
        "result",
        "values",
        "result",
        "result",
        "index",
        "values",
        "result",
        "index",
        "clone",
        "values",
        "index",
        "result",
        "parentPath",
        "packageJson",
        "path",
        "parentPath",
        "fileName",
        "fs",
        "packageJsonFilePath",
        "packageJson",
        "fs",
        "packageJsonFilePath",
        "parentPath",
        "path",
        "parentPath",
        "packageJson",
        "_startIndex",
        "_length",
        "LexType",
        "_text",
        "_startIndex",
        "_type",
        "LexType",
        "LexType",
        "LexType",
        "LexType",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "startIndex",
        "Lex",
        "startIndex",
        "LexType",
        "text",
        "startIndex",
        "Lex",
        "text",
        "startIndex",
        "LexType",
        "text",
        "startIndex",
        "Lex",
        "text",
        "startIndex",
        "LexType",
        "character",
        "startIndex",
        "Lex",
        "character",
        "startIndex",
        "LexType",
        "IteratorBase",
        "text",
        "startIndex",
        "StringIterator",
        "text",
        "startIndex",
        "isDefined",
        "LeftCurlyBracket",
        "currentLexStartIndex",
        "RightCurlyBracket",
        "currentLexStartIndex",
        "LeftSquareBracket",
        "currentLexStartIndex",
        "RightSquareBracket",
        "currentLexStartIndex",
        "LeftParenthesis",
        "currentLexStartIndex",
        "RightParenthesis",
        "currentLexStartIndex",
        "LeftAngleBracket",
        "currentLexStartIndex",
        "RightAngleBracket",
        "currentLexStartIndex",
        "DoubleQuote",
        "currentLexStartIndex",
        "SingleQuote",
        "currentLexStartIndex",
        "Dash",
        "currentLexStartIndex",
        "Plus",
        "currentLexStartIndex",
        "Comma",
        "currentLexStartIndex",
        "Colon",
        "currentLexStartIndex",
        "Semicolon",
        "currentLexStartIndex",
        "ExclamationPoint",
        "currentLexStartIndex",
        "Backslash",
        "currentLexStartIndex",
        "ForwardSlash",
        "currentLexStartIndex",
        "QuestionMark",
        "currentLexStartIndex",
        "EqualsSign",
        "currentLexStartIndex",
        "Period",
        "currentLexStartIndex",
        "Underscore",
        "currentLexStartIndex",
        "Ampersand",
        "currentLexStartIndex",
        "Space",
        "currentLexStartIndex",
        "Tab",
        "currentLexStartIndex",
        "CarriageReturn",
        "currentLexStartIndex",
        "CarriageReturnNewLine",
        "currentLexStartIndex",
        "NewLine",
        "currentLexStartIndex",
        "Asterisk",
        "currentLexStartIndex",
        "Percent",
        "currentLexStartIndex",
        "VerticalBar",
        "currentLexStartIndex",
        "Hash",
        "currentLexStartIndex",
        "isLetter",
        "Letters",
        "readLetters",
        "currentLexStartIndex",
        "isDigit",
        "Digits",
        "readDigits",
        "currentLexStartIndex",
        "Unrecognized",
        "currentLexStartIndex",
        "iterator",
        "condition",
        "character",
        "iterator",
        "iterator",
        "condition",
        "iterator",
        "result",
        "iterator",
        "result",
        "iterator",
        "readWhile",
        "iterator",
        "isLetter",
        "iterator",
        "readWhile",
        "iterator",
        "isWhitespace",
        "iterator",
        "readWhile",
        "iterator",
        "isDigit",
        "value",
        "value",
        "character",
        "character",
        "character",
        "character",
        "character",
        "character",
        "character",
        "character",
        "value",
        "value",
        "value",
        "value",
        "IteratorBase",
        "_text",
        "_startIndex",
        "_endIndex",
        "getLength",
        "_text",
        "_startIndex",
        "_endIndex",
        "_startIndex",
        "IterableBase",
        "_text",
        "StringIterator",
        "getLength",
        "StringIterator",
        "getLength"
    ],
    "literals": [
        "\"fs\"",
        "\"path\"",
        "string",
        "string",
        "string",
        "\"undefined\"",
        "\"null\"",
        "\"${value}\"",
        "string",
        "string",
        "string",
        "string",
        "\"\\n\"",
        "\"\\\\n\"",
        "\"\\t\"",
        "\"\\\\t\"",
        "\"\\r\"",
        "\"\\\\r\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"\"",
        "string",
        "\"\\n\"",
        "string",
        "\"\\n\"",
        "string",
        "string",
        "string",
        "\"\"",
        "\" \"",
        "\"\\t\"",
        "string",
        "string",
        "\"\"",
        "\"boolean\"",
        "\"number\"",
        "\"string\"",
        "string",
        "\"package.json\"",
        "string",
        "string",
        "\"\"",
        "string",
        "\"utf-8\"",
        "string",
        "[${this.startIndex},${this.afterEndIndex})",
        "string",
        "string",
        "\"{\"",
        "\"}\"",
        "\"[\"",
        "\"]\"",
        "\"<\"",
        "\">\"",
        "\"(\"",
        "\")\"",
        "\"'\"",
        "\"\\\"\"",
        "\",\"",
        "\":\"",
        "\";\"",
        "\"!\"",
        "\"\\\\\"",
        "\"/\"",
        "\"?\"",
        "\"-\"",
        "\"+\"",
        "\"=\"",
        "\".\"",
        "\"_\"",
        "\"&\"",
        "\"|\"",
        "\" \"",
        "\"\\t\"",
        "\"\\r\"",
        "\"\\n\"",
        "\"\\r\\n\"",
        "\"*\"",
        "\"%\"",
        "\"#\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"{\"",
        "\"}\"",
        "\"[\"",
        "\"]\"",
        "\"(\"",
        "\")\"",
        "\"<\"",
        "\">\"",
        "\"",
        "'",
        "\"-\"",
        "\"+\"",
        "\",\"",
        "\":\"",
        "\";\"",
        "\"!\"",
        "\"\\\\\"",
        "\"/\"",
        "\"?\"",
        "\"=\"",
        "\".\"",
        "\"_\"",
        "\"&\"",
        "\" \"",
        "\"\\t\"",
        "\"\\r\"",
        "\"\\n\"",
        "\"\\n\"",
        "\"*\"",
        "\"%\"",
        "\"|\"",
        "\"#\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\" \"",
        "\"\\t\"",
        "\"\\r\"",
        "string",
        "\"a\"",
        "\"z\"",
        "\"A\"",
        "\"Z\"",
        "string",
        "\"0\"",
        "\"9\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "done",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "iterator",
        "result",
        "iterator",
        "result",
        "count",
        "result",
        "valuesCount",
        "thisLastValuesIterator",
        "valuesIterator",
        "result",
        "result",
        "result",
        "count",
        "result",
        "valuesCount",
        "thisLastValuesIterator",
        "valuesIterator",
        "result",
        "result",
        "i",
        "result",
        "i",
        "index",
        "result",
        "removeIndex",
        "pair",
        "pair",
        "result",
        "result",
        "documentText",
        "newResult",
        "result",
        "result",
        "i",
        "result",
        "i",
        "result",
        "i",
        "result",
        "columnIndex",
        "indentCharacterIndex",
        "result",
        "result",
        "result",
        "startIndex",
        "afterEndIndex",
        "startIndex",
        "afterEndIndex",
        "result",
        "result",
        "result",
        "result",
        "result",
        "fileName",
        "parentPath",
        "__dirname",
        "packageJson",
        "packageJsonFilePath",
        "packageJsonFilePath",
        "currentLexStartIndex",
        "result"
    ],
    "comments": [],
    "docstrings": [
        "* An interface that iterates over a collection of values.",
        "* The iterator function that gets called when this object is passed into a for-of loop.",
        "* Whether or not this Iterator has stated iterating.",
        "* Whether or not this Iterator is currently pointing at a value or not. The Iterator could not\n     * be pointing at a value if it hasn't started iterating, or if it has finished iterating.",
        "* Move this Iterator to the next value in the collection. Return whether or not this Iterator\n     * has a current value when it is finished moving.",
        "* Get the current value that this Iterator is pointing at, or get undefined if the Iterator\n     * doesn't have a current value.",
        "* Get the current value and move this iterator to the next value in the collection.",
        "* Get whether or not this Iterator contains any values that match the provided condition. If\n     * the condition is not defined, then this function returns whether the collection contains any\n     * values. This function may advance the iterator.",
        "* Get the number of values that this Iterator can iterate. The Iterator will not have a current\n     * value when this function completes.",
        "* Get the first value in this Iterator that matches the provided condition. If no condition\n     * is provided, then the first value in the Iterator will be returned. If the Iterator is empty,\n     * then undefined will be returned.",
        "* Place each of the values of this Iterator into an array.",
        "* Place each of the values of this Iterator into an ArrayList.",
        "* Get an Iterator based on this Iterator that only returns values that match the provided\n     * condition.",
        "* Get an Iterator based on this Iterator that skips the provided number of values.",
        "* Get an Iterator based on this Iterator that only returns the provided number of values.",
        "* Get an Iterator based on this Iterator that maps each of this Iterator's values to a\n     * different value.",
        "* Return a new iterator that concatenates the contents of the provided iterator to the contents\n     * of this iterator.",
        "* An Iterator that only returns values from the inner iterator that match its condition.",
        "* An Iterator that skips the first number of values from the provided inner iterator.",
        "* An Iterator that only takes at most the first number of values from the provided inner iterator.",
        "* An interface of a collection that can have its contents iterated through.",
        "* Create an iterator for this collection.",
        "* Create an iterator for this collection that iterates the collection in reverse order.",
        "* Get whether or not this collection contains any values that match the provided condition. If\n     * the condition is not defined, then this function returns whether the collection contains any\n     * values.",
        "* Get the number of values that are contained in this collection.",
        "* Get the value in this collection at the provided index. If the provided index is not defined\n     * or is outside of this Iterable's bounds, then undefined will be returned.",
        "* Get the value in this collection at the provided index from the end of the collection. If the\n     * provided index is not defined or is outside of this Iterable's bounds, then undefined will be\n     * returned.",
        "* Get whether or not this Iterable contians the provided value using the provided comparison\n     * function. If no comparison function is provided, then a simple '===' comparison will be used.",
        "* Get the first value in this collection that matches the provided condition. If no condition\n     * is provided, then the first value in the collection will be returned. If the collection is\n     * empty, then undefined will be returned.",
        "* Get the last value in this collection. If the collection is empty, then undefined will be\n     * returned.",
        "* Get the values of this Iterable that match the provided condition.",
        "* Get an Iterable that skips the first toSkip number of values from this Iterable.",
        "* Get an Iterable that skips the last toSkip number of values from this Iterable.",
        "* Get the first toTake number of values from this Iterable<T>.",
        "* Get the last toTake number of values from this Iterable<T>.",
        "* Get an Iterable based on this Iterable that maps each of this Iterable's values to a\n     * different value.",
        "* Get an Iterable that concatenates the values of this Iterable with the values of the provided\n     * Iterable or Array.",
        "* Convert the values of this Iterable into an array.",
        "* Get whether or not this Iterable<T> ends with the provided values.",
        "* A base implementation of the Iterable<T> interface that classes can extend to make implementing\n * Iterable<T> easier.",
        "* Whether or not this ArrayListIterator is at the end of its iterating.",
        "* Set the ArrayList value at the provided index to be the provided value. If the index is not\n     * defined or is outside of the Arraylist's bounds, then this function will do nothing.",
        "* Set the last ArrayList value to be the provided value. If the ArrayList is empty, then this\n     * function will do nothing.",
        "* A map/dictionary collection that associates a key to a value.",
        "* Get the number of entries in this map.",
        "* Add the provide key value pair to the Map. If an entry already exists with the provided key,\n     * the existing entry will be overwritten by the provided values.",
        "* Add each of the provided pairs to this Map. If any of the entries already exists with the\n     * provided key, the existing entry will be overwritten by the provided value.",
        "* Get whether or not the map contains the provided key.",
        "* Get the value associated with the provided key. If the provided key is not found in the map,\n     * then undefined will be returned.",
        "* A stack collection that can only add and remove elements from one end.",
        "* Get whether or not this stack has any values.",
        "* Get the number of values that are on the stack.",
        "* Get whether this stack contains the provided value using the optional comparison. If the\n     * comparison function is not provided, then === will be used.\n     * @param value The value to search for in this stack.\n     * @param comparison The optional comparison function to use to compare values.",
        "* Add the provided value to the top of the stack.\n     * @param value The value to add.",
        "* Remove and return the value at the top of the stack.",
        "* Return (but don't remove) the value at the top of the stack.",
        "* A First-In-First-Out (FIFO) data structure.",
        "* Get whether or not this queue has any values.",
        "* Get the number of values that are in the queue.",
        "* Get whether or not this queue contains the provided value using the optional comparison. If\n     * The optional comparison is not provided, then === will be used.\n     * @param value The value to search for.\n     * @param comparison The optional comparison to compare values.",
        "* Add the provided value to the start of this queue.\n     * @param value The value to add to this queue.",
        "* Take the next value off of the end of this queue.",
        "* Get whether or not the provided value ends with the provided suffix.\n * @param value The value to check.\n * @param suffix The suffix to look for.",
        "* Get whether or not the provided value contains the provided searchString.\n * @param value The value to look in.\n * @param searchString The string to search for.",
        "* A value that has a startIndex property.",
        "* Get the start index of the provided values.\n * @param values",
        "* A value that has an afterEndIndex property.",
        "* Get the after end index of the provided values.\n * @param values",
        "* An object that has a getLength() method.",
        "* Get the combined length of the values in the provided array.",
        "* A value that has startIndex and afterEndIndex properties.",
        "* Get the combined length of the values in the provided array. This function assumes that the\n * values in the array don't have any gaps between them (the spans of the values are assumed to be\n * contiguous).",
        "* Get the combined text of the values in the provided array.",
        "* Create a deep copy of the provided value.",
        "* Find the nearest package.json file by looking in the current directory and each of its\n * parent directories.",
        "* A one-dimensional span object.",
        "* The inclusive index at which this Span starts.",
        "* The length/number of indexes that this Span encompasses.",
        "* The last index that is contained by this span.",
        "* The first index after this span that is not contained by this span.",
        "* Convert this Span to its string representation.",
        "* The different types of lexes.",
        "* An individual lex from a lexer.",
        "* The character index that this lex begins on.",
        "* The string value for this token.",
        "* The length of the text of this token.",
        "* The type of this token.",
        "* Create an unrecognized token with the provided character string.",
        "* A lexer that will break up a character stream into a stream of lexes.",
        "* Whether this object has started tokenizing its input stream or not.",
        "* Get whether this tokenizer has a current token or not.",
        "* The current lex that has been lexed from the source character stream.",
        "* Get the next lex in the stream.",
        "* Is the provided character a letter?",
        "* Is the provided character a digit?"
    ],
    "functions": [
        "next",
        "takeCurrent",
        "getCount",
        "first",
        "toArray",
        "toArrayList",
        "where",
        "skip",
        "take",
        "concatenate",
        "hasStarted",
        "hasCurrent",
        "next",
        "getCurrent",
        "next",
        "skipValues",
        "hasCurrent",
        "next",
        "getCurrent",
        "canTakeValue",
        "hasCurrent",
        "next",
        "getCurrent",
        "hasStarted",
        "hasCurrent",
        "next",
        "takeCurrent",
        "getCurrent",
        "getCount",
        "first",
        "toArray",
        "toArrayList",
        "where",
        "skip",
        "take",
        "concatenate",
        "hasStarted",
        "hasCurrent",
        "next",
        "getCurrent",
        "getCount",
        "get",
        "getLast",
        "contains",
        "first",
        "last",
        "where",
        "skip",
        "skipLast",
        "take",
        "takeLast",
        "concatenate",
        "toArray",
        "endsWith",
        "iterate",
        "iterateReverse",
        "iterate",
        "iterateReverse",
        "getCount",
        "get",
        "iterate",
        "iterateReverse",
        "getCount",
        "get",
        "iterate",
        "iterateReverse",
        "getCount",
        "get",
        "getLast",
        "contains",
        "first",
        "last",
        "where",
        "skip",
        "skipLast",
        "take",
        "takeLast",
        "concatenate",
        "toArray",
        "endsWith",
        "iterate",
        "iterateReverse",
        "hasStarted",
        "hasCurrent",
        "getCurrent",
        "atEnd",
        "next",
        "atEnd",
        "next",
        "iterate",
        "iterateReverse",
        "get",
        "setLast",
        "getCount",
        "add",
        "addAll",
        "indexOf",
        "removeAt",
        "remove",
        "removeFirst",
        "removeLast",
        "getCount",
        "add",
        "addAll",
        "contains",
        "get",
        "getCount",
        "contains",
        "push",
        "pop",
        "peek",
        "getCount",
        "contains",
        "enqueue",
        "dequeue",
        "quote",
        "escape",
        "escapeAndQuote",
        "toLowerCase",
        "isDefined",
        "getLength",
        "startsWith",
        "startsWithIgnoreCase",
        "endsWith",
        "contains",
        "repeat",
        "getLineIndex",
        "getColumnIndex",
        "getLineIndent",
        "getStartIndex",
        "getAfterEndIndex",
        "getSpan",
        "getCombinedLength",
        "getContiguousLength",
        "getCombinedText",
        "clone",
        "cloneArray",
        "getPackageJson",
        "startIndex",
        "length",
        "endIndex",
        "afterEndIndex",
        "toString",
        "startIndex",
        "afterEndIndex",
        "span",
        "toString",
        "getLength",
        "getType",
        "isWhitespace",
        "isNewLine",
        "LeftCurlyBracket",
        "RightCurlyBracket",
        "LeftSquareBracket",
        "RightSquareBracket",
        "LeftAngleBracket",
        "RightAngleBracket",
        "LeftParenthesis",
        "RightParenthesis",
        "SingleQuote",
        "DoubleQuote",
        "Comma",
        "Colon",
        "Semicolon",
        "ExclamationPoint",
        "Backslash",
        "ForwardSlash",
        "QuestionMark",
        "Dash",
        "Plus",
        "EqualsSign",
        "Period",
        "Underscore",
        "Ampersand",
        "VerticalBar",
        "Space",
        "Tab",
        "CarriageReturn",
        "NewLine",
        "CarriageReturnNewLine",
        "Asterisk",
        "Percent",
        "Hash",
        "Letters",
        "Digits",
        "Unrecognized",
        "hasStarted",
        "hasCurrent",
        "getCurrent",
        "getCurrentCharacterStartIndex",
        "hasCurrentCharacter",
        "getCurrentCharacter",
        "nextCharacter",
        "next",
        "readWhile",
        "readLetters",
        "readWhitespace",
        "readDigits",
        "isWhitespace",
        "isLetter",
        "isDigit",
        "absoluteValue",
        "currentIndex",
        "hasStarted",
        "hasCurrent",
        "getCurrent",
        "next",
        "hasMore",
        "iterate",
        "iterateReverse"
    ],
    "classes": [
        "JavascriptIterator",
        "WhereIterator",
        "SkipIterator",
        "TakeIterator",
        "MapIterator",
        "ConcatenateIterator",
        "WhereIterable",
        "SkipIterable",
        "TakeIterable",
        "MapIterable",
        "ConcatenateIterable",
        "ArrayListForwardIterator",
        "ArrayListReverseIterator",
        "Lex",
        "Lexer",
        "StringIterator",
        "StringIterable"
    ]
}