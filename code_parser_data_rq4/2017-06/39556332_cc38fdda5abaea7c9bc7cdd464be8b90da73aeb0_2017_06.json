{
    "identifiers": [
        "MutationObserver",
        "events",
        "events",
        "node",
        "parent",
        "mutations",
        "mutations",
        "mutation",
        "mutation",
        "mutation",
        "events",
        "parentList",
        "node",
        "mutation",
        "events",
        "mutation",
        "mutation",
        "toCheck",
        "i",
        "parents",
        "target",
        "index",
        "parents",
        "index",
        "removed",
        "child",
        "callback",
        "node",
        "found",
        "i",
        "toCheck",
        "found",
        "found",
        "fi",
        "toCheck",
        "fi",
        "entry",
        "node",
        "callback",
        "node",
        "thisArg",
        "node",
        "callback",
        "thisArg",
        "node",
        "parent",
        "result",
        "parent",
        "parent",
        "parent",
        "result",
        "node",
        "callback",
        "node",
        "thisArg",
        "node",
        "observer",
        "observer",
        "RemoveParentObserver",
        "observer",
        "observer",
        "node",
        "callback",
        "thisArg"
    ],
    "literals": [
        "'childList'"
    ],
    "variables": [
        "events",
        "toCheck",
        "node",
        "callback",
        "target",
        "removed",
        "found",
        "index",
        "child",
        "entry",
        "result",
        "parent",
        "node",
        "observer"
    ],
    "comments": [
        "just remove events",
        "build cache - create the list of parents all the time new to consider moving nodes?",
        "mark already found entries",
        "none of my parents were changed",
        "child to watch for removing",
        "me or one of my parents were removed",
        "mark for removal - reverse order for simpler splicing",
        "did we disable all? then we can stop early",
        "delete found ones and remove from toCheck list for the remaining events",
        "from top to bottom",
        "weak since if the root is gone anyhow, we don't care about its listener",
        "use body as root element"
    ],
    "docstrings": [
        "* Created by Samuel Gratzl on 20.06.2017.",
        "* the parents of the given node (including itself) from root to leaf\n * @param node\n * @return {Node[]}"
    ],
    "functions": [
        "enable",
        "disable",
        "onChange",
        "observe",
        "parentList",
        "observe"
    ],
    "classes": [
        "RemoveParentObserver",
        "RemoveNodeObserver"
    ]
}