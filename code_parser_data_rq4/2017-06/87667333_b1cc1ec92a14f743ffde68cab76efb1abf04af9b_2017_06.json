{
    "identifiers": [
        "Builder",
        "ConnectionPool",
        "Lease",
        "Lock",
        "Rangable",
        "Range",
        "RPC",
        "NSApplicator",
        "toBuffer",
        "NSApplicator",
        "RPC",
        "RPC",
        "RPC",
        "prefix",
        "pool",
        "key",
        "Builder",
        "Builder",
        "key",
        "Builder",
        "Builder",
        "key",
        "Builder",
        "Builder",
        "key",
        "Builder",
        "Builder",
        "ttl",
        "Lease",
        "ttl",
        "key",
        "Lock",
        "key",
        "key",
        "column",
        "Builder",
        "cmp",
        "Builder",
        "value",
        "Builder",
        "Builder",
        "key",
        "column",
        "cmp",
        "value",
        "r",
        "Range",
        "r",
        "prefix",
        "Namespace",
        "Buffer",
        "toBuffer",
        "prefix"
    ],
    "literals": [
        "'./builder'",
        "'./connection-pool'",
        "'./lease'",
        "'./lock'",
        "'./range'",
        "'./rpc'",
        "'./util'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Namespace is the class on which CRUD operations can be invoked. The default\n * namespace is the empty string, \"\". You can create nested namespaces by\n * calling the `namespace(prefix)` method.\n *\n * For example, if the current namespace is the default \"\" and you call\n * namespace('user1/'), all operations on that new namespace will be\n * automatically prefixed with `user1/`:\n *\n * ```\n * const client = new Etcd3();\n * const ns = client.namespace('user1/');\n *\n * await ns.put('foo').value('bar'); // sets the key `user1/foo` to `bar`\n * await ns.delete().all(); // deletes all keys with the prefix `user1/`\n * ```\n *\n * Namespacing is particularly useful to avoid clashing between multiple\n * applications and when using Etcd's access control.",
        "* `.get()` starts a query to look up a single key from etcd.",
        "* `.getAll()` starts a query to look up multiple keys from etcd.",
        "* `.put()` starts making a put request against etcd.",
        "* `.delete()` starts making a delete request against etcd.",
        "* `lease()` grants and returns a new Lease instance. The Lease is\n   * automatically kept alive for you until it is revoked. See the\n   * documentation on the Lease class for some examples.",
        "* `lock()` is a helper to provide distributed locking capability. See\n   * the documentation on the Lock class for more information and examples.",
        "* `if()` starts a new etcd transaction, which allows you to execute complex\n   * statements atomically. See documentation on the ComparatorBuilder for\n   * more information.",
        "* Creates a structure representing an etcd range. Used in permission grants\n   * and queries. This is a convenience method for `Etcd3.Range.from(...)`.",
        "* namespace adds a prefix and returns a new Namespace, which is used for\n   * operating on keys in a prefixed domain. For example, if the current\n   * namespace is the default \"\" and you call namespace('user1/'), all\n   * operations on that new namespace will be automatically prefixed\n   * with `user1/`. See the Namespace class for more details."
    ],
    "functions": [
        "get",
        "getAll",
        "put",
        "lease"
    ],
    "classes": [
        "Namespace"
    ]
}