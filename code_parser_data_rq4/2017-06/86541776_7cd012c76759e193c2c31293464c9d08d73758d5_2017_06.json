{
    "identifiers": [
        "require",
        "_stopEarly",
        "_stopEarly",
        "vars",
        "vars",
        "wantsDD",
        "wantsDD",
        "wantsU",
        "wantsU",
        "wantsCamel",
        "wantsCamel",
        "defaults",
        "defaults",
        "args",
        "args",
        "args",
        "arg",
        "arg",
        "arg",
        "arg",
        "args",
        "args",
        "ddIndex",
        "args",
        "ddIndex",
        "args",
        "ddIndex",
        "fn",
        "fn",
        "alias",
        "alias",
        "k",
        "keys",
        "k",
        "keys",
        "k",
        "aliases",
        "key",
        "alias",
        "key",
        "kk",
        "aliases",
        "key",
        "kk",
        "aliases",
        "key",
        "kk",
        "aliases",
        "x",
        "key",
        "aliases",
        "key",
        "y",
        "x",
        "y",
        "key",
        "arg",
        "allBools",
        "arg",
        "key",
        "bools",
        "key",
        "aliases",
        "key",
        "obj",
        "keys",
        "value",
        "keys",
        "keys",
        "keys",
        "i",
        "mostKeys",
        "i",
        "mostKeys",
        "i",
        "o",
        "k",
        "o",
        "k",
        "o",
        "o",
        "k",
        "o",
        "key",
        "bools",
        "key",
        "o",
        "key",
        "o",
        "key",
        "value",
        "o",
        "key",
        "o",
        "key",
        "value",
        "o",
        "key",
        "o",
        "key",
        "value",
        "key",
        "val",
        "arg",
        "arg",
        "unknownFn",
        "key",
        "arg",
        "unknownFn",
        "arg",
        "key",
        "isNum",
        "val",
        "value",
        "val",
        "argv",
        "key",
        "value",
        "aliases",
        "key",
        "aliases",
        "key",
        "a",
        "aliases",
        "key",
        "a",
        "argv",
        "aliases",
        "key",
        "a",
        "value",
        "key",
        "key",
        "x",
        "x",
        "bools",
        "key",
        "key",
        "aliases",
        "key",
        "aliases",
        "key",
        "bools",
        "bools",
        "bools",
        "bools",
        "key",
        "key",
        "key",
        "key",
        "key",
        "key",
        "arg",
        "arg",
        "m",
        "m",
        "key",
        "value",
        "value",
        "key",
        "value",
        "arg",
        "arg",
        "arg",
        "key",
        "arg",
        "arg",
        "arg",
        "args",
        "next",
        "next",
        "bools",
        "key",
        "allBools",
        "aliases",
        "key",
        "key",
        "key",
        "next",
        "arg",
        "next",
        "key",
        "next",
        "arg",
        "key",
        "key",
        "arg",
        "arg",
        "arg",
        "j",
        "letters",
        "j",
        "arg",
        "j",
        "next",
        "letters",
        "j",
        "next",
        "arg",
        "letters",
        "j",
        "next",
        "letters",
        "j",
        "next",
        "arg",
        "letters",
        "j",
        "next",
        "letters",
        "j",
        "next",
        "arg",
        "letters",
        "j",
        "letters",
        "j",
        "letters",
        "j",
        "arg",
        "j",
        "arg",
        "letters",
        "j",
        "letters",
        "j",
        "arg",
        "arg",
        "arg",
        "arg",
        "broken",
        "key",
        "args",
        "argc",
        "argc",
        "bools",
        "key",
        "aliases",
        "key",
        "key",
        "key",
        "argc",
        "arg",
        "argc",
        "argc",
        "key",
        "argc",
        "arg",
        "key",
        "key",
        "arg",
        "arg",
        "unknownFn",
        "unknownFn",
        "arg",
        "argv",
        "isNum",
        "arg",
        "arg",
        "arg",
        "_stopEarly",
        "argv",
        "argv",
        "args",
        "args",
        "args",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "_defaults",
        "_defaults",
        "d",
        "dKeys",
        "d",
        "dKeys",
        "d",
        "hasKey",
        "argv",
        "key",
        "_defaults",
        "key",
        "argv",
        "key",
        "val",
        "aliases",
        "key",
        "aliases",
        "key",
        "x",
        "argv",
        "x",
        "val",
        "wantsDD",
        "argv",
        "f",
        "notFlags",
        "f",
        "notFlags",
        "f",
        "wantsDD",
        "argv",
        "flag",
        "argv",
        "flag",
        "argv",
        "flag",
        "camelCaseKeys",
        "argv",
        "argv",
        "argv",
        "argv",
        "opts",
        "FunWithFlags",
        "argv",
        "fun",
        "opts",
        "fun",
        "argv",
        "opts",
        "fun",
        "argv",
        "arg",
        "opts",
        "fun",
        "opts",
        "opts",
        "fun",
        "opts",
        "opts",
        "fun",
        "opts",
        "opts",
        "opts",
        "fun",
        "opts",
        "opts",
        "opts",
        "fun",
        "opts",
        "fun",
        "opts",
        "fun",
        "opts",
        "fun",
        "opts",
        "opts",
        "fun",
        "opts",
        "opts",
        "fun",
        "argv",
        "fun",
        "argv",
        "fwf",
        "fwfArgv",
        "opts",
        "fwf",
        "process",
        "opts",
        "fwf",
        "fwf",
        "fwf",
        "FunWithFlags",
        "fwf",
        "fwf",
        "fwf",
        "fwf"
    ],
    "literals": [
        "'./utils'",
        "'--'",
        "'--'",
        "'boolean'",
        "'.'",
        "'.'",
        "'boolean'",
        "'false'",
        "'true'",
        "''",
        "''",
        "'-'",
        "'='",
        "''",
        "'-'",
        "'true'",
        "''",
        "'.'",
        "'.'",
        "'.'",
        "'--'",
        "'--'",
        "'--'",
        "'1.0.2'"
    ],
    "variables": [
        "ddIndex",
        "aliases",
        "keys",
        "k",
        "key",
        "kk",
        "x",
        "o",
        "obj",
        "key",
        "mostKeys",
        "i",
        "k",
        "value",
        "val",
        "a",
        "m",
        "key",
        "value",
        "key",
        "key",
        "next",
        "letters",
        "j",
        "next",
        "broken",
        "key",
        "argc",
        "i",
        "arg",
        "dKeys",
        "d",
        "key",
        "val",
        "f",
        "flag",
        "fun",
        "arg"
    ],
    "comments": [
        "eslint max-lines: [\"error\", 700]",
        "eslint complexity: \"off\"",
        "--- opts ---",
        "ensure it is only letters, dashes, equals, period, or numbers",
        "from beginning to end",
        "eslint-disable-next-line prefer-includes/prefer-includes",
        "@TODO: should .split",
        "go through alias",
        "make into arr, take from user alias into object alias",
        "go through that array",
        "--- building ---",
        "require('fliplog')",
        ".red('setKey')",
        ".data({obj, keys, value, mostKeys, key})",
        "// .trace()",
        ".echo()",
        "require('fliplog')",
        ".yellow('setArg')",
        ".data({key, val, arg, value, alias: aliases[key]})",
        ".echo()",
        "--- types, default ---",
        "minimist l#47 merged loops",
        "@TODO toarr",
        "--- parsing ---",
        "Using [\\s\\S] instead of . because js doesn't support the",
        "'dotall' regex modifier. See:",
        "http://stackoverflow.com/a/1068308/13216",
        "console.log('handleDoubleDash first condition satisfied')",
        "console.log(key, next, arg)",
        "console.log('handleDoubleDash second condition satisfied: boolean')",
        "console.log(key, next, arg)",
        "console.log('handleDoubleDash third: fallback')",
        "console.log(key, next, arg)",
        "when letters and `=`",
        "eslint-disable-next-line",
        "when letters and then numbers",
        "when letters and the next arg has whitespace",
        "fallback",
        "get the next character",
        "when the next character is not a flag and not broken",
        "current arg",
        "if it has not been set,",
        "or set to false,",
        "or set to fn that returns false",
        "console.log({arg}, 'dd=')",
        "console.log({arg}, 'no')",
        "console.log({arg}, 'dd')",
        "console.log({arg}, 'd')",
        "console.log({arg}, 'u')",
        "eslint-disable-next-line",
        "require('fliplog').red('defaults no key ').data(_defaults).echo()",
        "require('fliplog').blue('defaults ' + key).data(_defaults[key]).echo()",
        "require('fliplog').verbose().data(_defaults[key]).echo()",
        "require('fliplog')",
        ".blue('defaults no key ' + key)",
        ".data({val, argv})",
        ".echo()",
        "require('fliplog').quick(notFlags)",
        ".arg(argv).parse()"
    ],
    "docstrings": [
        "* @prop {Array<string>} args\n * @prop {Object} aliases\n * @prop {Array<string>} notFlags used by var\n * @prop {boolean} _stopEarly `.stopEarly`\n * @prop {boolean} wantsDD using `--` in `.dd`\n * @prop {boolean} wantsCamel\n * @prop {boolean} [allBools = false]\n * @prop {boolean} vars use variable arguments as dashed options\n * @prop {Object} argv={_: []}\n * @prop {Function} [unknownFn]\n * @prop {Object} [_defaults] `.defaults`\n * @prop {Object} bools values to treat as booleans\n * @prop {Object} string values to treat as strings\n * @prop {number} i current index to move forward and skip in loops",
        "* @desc stop at the first `--`\n   * @param {boolean} [_stopEarly=true]\n   * @return {FunWithFlags} @chainable",
        "* @example\n   *  ['globbing', \"'**'\"] -> ['--globbing', \"'**'\"]\n   *  ['noflag=flag'] -> ['--noflag=', 'flag']\n   *\n   *  can be done with allbools as well\n   *  ['noflag', 'flag'] -> ['--noflag', '--flag'],\n   *\n   * @desc allow arguments without dashes to be treated automatically as --\n   * @param {boolean} [vars=true]\n   * @return {FunWithFlags} @chainable",
        "* @aka '--'\n   * @desc doubledash: include args after -- in object rather than ._\n   * @param {boolean} [wantsDD=true]\n   * @return {FunWithFlags} @chainable",
        "* @desc delete the ._\n   * @param {boolean} [wantsU=true]\n   * @return {FunWithFlags} @chainable",
        "* @desc return camelCasedKeys (helpful when destructuring)\n   * @param {boolean} [wantsCamel=true]\n   * @return {FunWithFlags} @chainable",
        "* @desc fallback to these when values aren't passed in\n   * @param  {Object} [defaults={}] fallback values\n   * @return {FunWithFlags} @chainable",
        "* @param  {Array<string>} args\n   * @return {FunWithFlags} @chainable",
        "* @param  {Function} [fn=null]\n   * @return {FunWithFlags} @chainable",
        "* @TODO example input and output\n   * @param  {Object} [alias={}]\n   * @return {FunWithFlags}",
        "* @protected\n   * @param  {string} key\n   * @param  {string} arg\n   * @return {boolean}",
        "* @param {Object} obj\n   * @param {Array} keys\n   * @param {*} value\n   * @return {FunWithFlags} @chainable",
        "* @protected\n   * @param {string} key\n   * @param {string} val\n   * @param {string} arg\n   * @return {FunWithFlags} @chainable",
        "* @param  {string} key\n   * @return {boolean}",
        "* @TODO optimize\n   * @desc   ensure specific types of args\n   * @param  {Array | string | boolean | null} string\n   * @param  {Array | string | boolean | null} bools\n   * @return {FunWithFlags} @chainable",
        "* @protected\n   * @param  {string} arg\n   * @return {FunWithFlags} @chainable",
        "* @param  {string} arg\n   * @return {FunWithFlags} @chainable",
        "* @protected\n   * @param  {string} arg\n   * @return {FunWithFlags} @chainable",
        "* @protected\n   * @desc breaks letters into long, checks against aliases, breaks if needed\n   * @param  {string} arg\n   * @return {boolean} should break or not (if stop early)",
        "* @protected\n   * @desc single dash arg to double\n   * @param  {string} arg\n   * @return {FunWithFlags} @chainable",
        "* @desc when dashed & when alias exists and it aint a boolean\n       * @example\n       *    matches: '--1' from '--10'\n       *    matches: '--e' from '--eh'",
        "* @protected\n   * @param  {string} arg\n   * @return {boolean} whether to break",
        "* @desc go through the args, call the handlers\n   * @see FunWithFlags.handleDoubleDashEq\n   * @see FunWithFlags.handleNo\n   * @see FunWithFlags.handleDoubleDash\n   * @see FunWithFlags.handleSingle\n   * @see FunWithFlags.handleFallback\n   * @see FunWithFlags.finish, FunWithFlags.i, FunWithFlags.args\n   * @return {FunWithFlags} @chainable FunWithFlags.finish",
        "* @return {FunWithFlags} @chainable",
        "* @param  {Array | string | null} [argv=null] process.argv.slice(2)\n * @param  {Object | boolean | null} [opts=null] options\n * @return {FunWithFlags | Object} parsed arguments",
        "* @desc allows using default process.argv.slice(2)\n * @param {Object | boolean | null} [opts=null] options\n * @return {Object} parsed arguments"
    ],
    "functions": [
        "stopEarly",
        "allowVars",
        "dd",
        "underscore",
        "camelCase",
        "defaults",
        "arg",
        "alias",
        "argDefined",
        "setKey",
        "setArg",
        "aliasIsBoolean",
        "types",
        "handleDoubleDashEq",
        "handleNo",
        "handleDoubleDash",
        "handleSingle",
        "handleFallback",
        "parse",
        "finish",
        "fwf"
    ],
    "classes": [
        "FunWithFlags"
    ]
}