{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Net",
        "Sockets",
        "Text",
        "Threading",
        "Tasks",
        "Client",
        "args",
        "Connect",
        "TcpClient",
        "port",
        "Random",
        "data",
        "Convert",
        "ToByte",
        "rand",
        "Next",
        "data",
        "Convert",
        "ToByte",
        "rand",
        "Next",
        "data",
        "Convert",
        "ToByte",
        "rand",
        "Next",
        "data",
        "Convert",
        "ToByte",
        "rand",
        "Next",
        "client",
        "GetStream",
        "Text",
        "Encoding",
        "ASCII",
        "GetString",
        "data",
        "stream",
        "Write",
        "data",
        "data",
        "Length",
        "WriteLine",
        "message",
        "Empty",
        "stream",
        "Read",
        "data",
        "data",
        "Length",
        "responseData",
        "Text",
        "Encoding",
        "ASCII",
        "GetString",
        "data",
        "WriteLine",
        "responseData",
        "ArgumentNullException",
        "e",
        "WriteLine",
        "e",
        "SocketException",
        "e",
        "WriteLine",
        "e",
        "WriteLine",
        "Read"
    ],
    "literals": [
        "\"localhost\"",
        "\"Sent: {0}\"",
        "\"Received: {0}\"",
        "\"ArgumentNullException: {0}\"",
        "\"SocketException: {0}\"",
        "\"\\n Press Enter to continue...\""
    ],
    "variables": [
        "Int32",
        "port",
        "TcpClient",
        "client",
        "data",
        "Random",
        "rand",
        "NetworkStream",
        "stream",
        "message",
        "responseData",
        "Int32"
    ],
    "comments": [
        "Create a TcpClient.",
        "Note, for this client to work you need to have a TcpServer",
        "connected to the same address as specified by the server, port",
        "combination.",
        "Translate the passed message into ASCII and store it as a Byte array.",
        "This approach is for checking on receiving data whether IDs given to the actuators differs from     those given in 4DIAC.\n                      It works by sending an array of bytes where default value is 2 since 0/1 equals false/true respectively.",
        "for (int i = 0; i < data.Length; i++)\n                    {\n                        data[i] = (int)2;\n                    }",
        "Randomly generate values for actuators",
        "Send the message to the connected TcpServer.",
        "String to store the response ASCII representation.",
        "Read the first batch of the TcpServer response bytes.",
        "// Close everything.\n                    stream.Close();\n                    client.Close();"
    ],
    "docstrings": [],
    "functions": [
        "Main",
        "Connect"
    ],
    "classes": [
        "csClient"
    ]
}