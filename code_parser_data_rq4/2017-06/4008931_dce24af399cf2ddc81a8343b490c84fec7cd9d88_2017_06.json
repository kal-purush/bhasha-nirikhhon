{
    "identifiers": [
        "updateHostsFile",
        "Colors",
        "PY3",
        "colorize",
        "flush_dns_cache",
        "gather_custom_exclusions",
        "get_defaults",
        "get_file_by_url",
        "is_valid_domain_format",
        "move_hosts_file_into_place",
        "normalize_rule",
        "path_join_robust",
        "print_failure",
        "print_success",
        "supports_color",
        "query_yes_no",
        "recursive_glob",
        "strip_rule",
        "write_data",
        "updateHostsFile",
        "unittest",
        "locale",
        "sys",
        "os",
        "PY3",
        "io",
        "BytesIO",
        "StringIO",
        "unittest",
        "mock",
        "mock",
        "StringIO",
        "StringIO",
        "StringIO",
        "mock",
        "unittest",
        "TestCase",
        "staticmethod",
        "name",
        "mock",
        "patch",
        "name",
        "new_callable",
        "mock",
        "PropertyMock",
        "property",
        "sys",
        "platform",
        "Base",
        "StringIO",
        "sys",
        "stdout",
        "close",
        "sys",
        "__stdout__",
        "Base",
        "mock_property",
        "get_defaults",
        "sep",
        "sep",
        "sep",
        "sep",
        "sep",
        "sep",
        "assertDictEqual",
        "actual",
        "expected",
        "BaseStdout",
        "mock",
        "patch",
        "side_effect",
        "mock",
        "patch",
        "return_value",
        "_",
        "gather_custom_exclusions",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "side_effect",
        "mock",
        "patch",
        "return_value",
        "_",
        "gather_custom_exclusions",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "BaseStdout",
        "rule",
        "assertEqual",
        "normalize_rule",
        "rule",
        "sys",
        "stdout",
        "getvalue",
        "StringIO",
        "rule",
        "assertIn",
        "expected",
        "output",
        "Base",
        "line",
        "strip_rule",
        "line",
        "assertEqual",
        "output",
        "line",
        "strip_rule",
        "line",
        "assertEqual",
        "output",
        "line",
        "line",
        "strip_rule",
        "line",
        "assertEqual",
        "output",
        "line",
        "BaseStdout",
        "mock",
        "patch",
        "side_effect",
        "f",
        "f",
        "_",
        "mock_property",
        "mock",
        "Mock",
        "name",
        "move_hosts_file_into_place",
        "mock_file",
        "sys",
        "stdout",
        "getvalue",
        "assertEqual",
        "output",
        "expected",
        "mock",
        "patch",
        "side_effect",
        "f",
        "f",
        "_",
        "mock_property",
        "mock",
        "Mock",
        "name",
        "move_hosts_file_into_place",
        "mock_file",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "side_effect",
        "f",
        "f",
        "mock",
        "patch",
        "return_value",
        "_",
        "mock_property",
        "mock",
        "Mock",
        "name",
        "move_hosts_file_into_place",
        "mock_file",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "side_effect",
        "f",
        "f",
        "mock",
        "patch",
        "return_value",
        "_",
        "mock_property",
        "mock",
        "Mock",
        "name",
        "move_hosts_file_into_place",
        "mock_file",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "BaseStdout",
        "mock",
        "patch",
        "return_value",
        "_",
        "mock_property",
        "obj",
        "flush_dns_cache",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "return_value",
        "_",
        "mock_property",
        "obj",
        "flush_dns_cache",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock_property",
        "obj",
        "mock_property",
        "flush_dns_cache",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "return_value",
        "_",
        "mock_property",
        "obj",
        "mock_property",
        "flush_dns_cache",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "side_effect",
        "mock",
        "patch",
        "return_value",
        "_",
        "mock_property",
        "obj",
        "mock_property",
        "flush_dns_cache",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "side_effect",
        "mock",
        "patch",
        "return_value",
        "_",
        "mock_property",
        "obj",
        "mock_property",
        "flush_dns_cache",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "side_effect",
        "mock",
        "patch",
        "side_effect",
        "_",
        "mock_property",
        "obj",
        "mock_property",
        "flush_dns_cache",
        "sys",
        "stdout",
        "getvalue",
        "expected",
        "assertIn",
        "expected",
        "output",
        "url",
        "BytesIO",
        "url",
        "_",
        "_",
        "mock",
        "Mock",
        "fail_read",
        "m",
        "_",
        "_",
        "mock",
        "Mock",
        "fail_decode",
        "s",
        "mock",
        "Mock",
        "read",
        "m",
        "BaseStdout",
        "mock",
        "patch",
        "side_effect",
        "mock_url_open",
        "_",
        "get_file_by_url",
        "url",
        "assertEqual",
        "actual",
        "expected",
        "mock",
        "patch",
        "side_effect",
        "mock_url_open_fail",
        "_",
        "assertIsNone",
        "get_file_by_url",
        "url",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "side_effect",
        "mock_url_open_read_fail",
        "_",
        "assertIsNone",
        "get_file_by_url",
        "url",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "side_effect",
        "mock_url_open_decode_fail",
        "_",
        "assertIsNone",
        "get_file_by_url",
        "url",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "Base",
        "BytesIO",
        "write_data",
        "f",
        "data",
        "f",
        "getvalue",
        "assertEqual",
        "actual",
        "expected",
        "BytesIO",
        "write_data",
        "f",
        "data",
        "f",
        "getvalue",
        "assertEqual",
        "actual",
        "expected",
        "BaseStdout",
        "invalid_default",
        "assertRaises",
        "ValueError",
        "query_yes_no",
        "invalid_default",
        "mock",
        "patch",
        "side_effect",
        "_",
        "valid_default",
        "expected",
        "assertTrue",
        "query_yes_no",
        "valid_default",
        "sys",
        "stdout",
        "getvalue",
        "StringIO",
        "assertIn",
        "expected",
        "output",
        "mock",
        "patch",
        "side_effect",
        "_",
        "valid_default",
        "valid_default",
        "query_yes_no",
        "valid_default",
        "assertEqual",
        "actual",
        "expected",
        "mock",
        "patch",
        "side_effect",
        "_",
        "assertFalse",
        "query_yes_no",
        "mock",
        "patch",
        "side_effect",
        "_",
        "assertTrue",
        "query_yes_no",
        "mock",
        "patch",
        "side_effect",
        "_",
        "assertTrue",
        "query_yes_no",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "StringIO",
        "assertFalse",
        "query_yes_no",
        "sys",
        "stdout",
        "getvalue",
        "assertIn",
        "expected",
        "output",
        "BaseStdout",
        "assertFalse",
        "is_valid_domain_format",
        "sys",
        "stdout",
        "getvalue",
        "assertTrue",
        "expected",
        "output",
        "invalid_domain",
        "assertFalse",
        "is_valid_domain_format",
        "invalid_domain",
        "sys",
        "stdout",
        "getvalue",
        "StringIO",
        "assertIn",
        "expected",
        "output",
        "valid_domain",
        "assertTrue",
        "is_valid_domain_format",
        "valid_domain",
        "sys",
        "stdout",
        "getvalue",
        "StringIO",
        "assertEqual",
        "output",
        "stem",
        "stem",
        "f",
        "files",
        "stem",
        "f",
        "startswith",
        "stem",
        "matches",
        "append",
        "f",
        "matches",
        "Base",
        "staticmethod",
        "stem",
        "file_pattern",
        "recursive_glob",
        "stem",
        "file_pattern",
        "actual",
        "sort",
        "actual",
        "mock",
        "patch",
        "side_effect",
        "mock_walk",
        "_",
        "mock_property",
        "sorted_recursive_glob",
        "assertListEqual",
        "actual",
        "expected",
        "sorted_recursive_glob",
        "assertListEqual",
        "actual",
        "expected",
        "sorted_recursive_glob",
        "assertListEqual",
        "actual",
        "expected",
        "mock",
        "patch",
        "side_effect",
        "mock_walk",
        "_",
        "mock_property",
        "sorted_recursive_glob",
        "assertListEqual",
        "actual",
        "expected",
        "sorted_recursive_glob",
        "assertListEqual",
        "actual",
        "expected",
        "sorted_recursive_glob",
        "assertListEqual",
        "actual",
        "expected",
        "_",
        "UnicodeDecodeError",
        "Base",
        "path_join_robust",
        "assertEqual",
        "actual",
        "expected",
        "path_join_robust",
        "assertEqual",
        "actual",
        "expected",
        "i",
        "i",
        "sep",
        "i",
        "path_join_robust",
        "paths",
        "assertEqual",
        "actual",
        "expected",
        "i",
        "i",
        "sep",
        "i",
        "path_join_robust",
        "paths",
        "assertEqual",
        "actual",
        "expected",
        "mock",
        "patch",
        "side_effect",
        "mock_path_join",
        "_",
        "assertRaises",
        "locale",
        "path_join_robust",
        "BaseStdout",
        "mock_property",
        "mock_property",
        "obj",
        "assertTrue",
        "supports_color",
        "mock_property",
        "assertFalse",
        "supports_color",
        "mock_property",
        "mock_property",
        "assertFalse",
        "supports_color",
        "mock_property",
        "mock_property",
        "mock_property",
        "obj",
        "assertTrue",
        "supports_color",
        "mock_property",
        "mock_property",
        "assertFalse",
        "supports_color",
        "mock_property",
        "mock_property",
        "obj",
        "assertFalse",
        "supports_color",
        "Base",
        "mock",
        "patch",
        "return_value",
        "_",
        "color",
        "colors",
        "text",
        "colorize",
        "text",
        "color",
        "assertEqual",
        "actual",
        "expected",
        "mock",
        "patch",
        "return_value",
        "_",
        "color",
        "colors",
        "color",
        "text",
        "Colors",
        "ENDC",
        "colorize",
        "text",
        "color",
        "assertEqual",
        "actual",
        "expected",
        "BaseStdout",
        "TestPrintSuccess",
        "setUp",
        "mock",
        "patch",
        "return_value",
        "_",
        "print_success",
        "text",
        "text",
        "sys",
        "stdout",
        "getvalue",
        "assertEqual",
        "actual",
        "expected",
        "mock",
        "patch",
        "return_value",
        "_",
        "print_success",
        "text",
        "Colors",
        "SUCCESS",
        "text",
        "Colors",
        "ENDC",
        "sys",
        "stdout",
        "getvalue",
        "assertEqual",
        "actual",
        "expected",
        "BaseStdout",
        "TestPrintFailure",
        "setUp",
        "mock",
        "patch",
        "return_value",
        "_",
        "print_failure",
        "text",
        "text",
        "sys",
        "stdout",
        "getvalue",
        "assertEqual",
        "actual",
        "expected",
        "mock",
        "patch",
        "return_value",
        "_",
        "print_failure",
        "text",
        "Colors",
        "FAIL",
        "text",
        "Colors",
        "ENDC",
        "sys",
        "stdout",
        "getvalue",
        "assertEqual",
        "actual",
        "expected",
        "unittest",
        "main"
    ],
    "literals": [
        "\"\\\\\"",
        "\"win32\"",
        "\"/\"",
        "\"updateHostsFile.BASEDIR_PATH\"",
        "\"foo\"",
        "\"numberofrules\"",
        "\"datapath\"",
        "\"foo\"",
        "\"data\"",
        "\"freshen\"",
        "\"replace\"",
        "\"backup\"",
        "\"skipstatichosts\"",
        "\"keepdomaincomments\"",
        "\"extensionspath\"",
        "\"foo\"",
        "\"extensions\"",
        "\"extensions\"",
        "\"outputsubfolder\"",
        "\"\"",
        "\"hostfilename\"",
        "\"hosts\"",
        "\"targetip\"",
        "\"0.0.0.0\"",
        "\"ziphosts\"",
        "\"sourcedatafilename\"",
        "\"update.json\"",
        "\"sourcesdata\"",
        "\"readmefilename\"",
        "\"readme.md\"",
        "\"readmetemplate\"",
        "\"foo\"",
        "\"readme_template.md\"",
        "\"readmedata\"",
        "\"readmedatafilename\"",
        "\"foo\"",
        "\"readmeData.json\"",
        "\"exclusionpattern\"",
        "\"([a-zA-Z\\d-]+\\.){0,}\"",
        "\"exclusionregexs\"",
        "\"exclusions\"",
        "\"commonexclusions\"",
        "\"hulu.com\"",
        "\"blacklistfile\"",
        "\"foo\"",
        "\"blacklist\"",
        "\"whitelistfile\"",
        "\"foo\"",
        "\"whitelist\"",
        "\"updateHostsFile.raw_input\"",
        "\"foo\"",
        "\"no\"",
        "\"updateHostsFile.is_valid_domain_format\"",
        "\"Do you have more domains you want to enter? [Y/n]\"",
        "\"updateHostsFile.raw_input\"",
        "\"foo\"",
        "\"yes\"",
        "\"bar\"",
        "\"no\"",
        "\"updateHostsFile.is_valid_domain_format\"",
        "\"Do you have more domains you want to enter? [Y/n] \"",
        "\"Do you have more domains you want to enter? [Y/n]\"",
        "\"foo\"",
        "\"128.0.0.1\"",
        "\"bar.com/usa\"",
        "\"0.0.0 google\"",
        "\"0.1.2.3.4 foo/bar\"",
        "\"twitter.com\"",
        "\"==>\"",
        "\"<==\"",
        "\"0.0.0.0\"",
        "\"domain.com\"",
        "\"foo\"",
        "\"\"",
        "\"0.0.0.0 twitter.com\"",
        "\"127.0.0.1 facebook.com\"",
        "\"8.8.8.8 google.com\"",
        "\"1.2.3.4 foo.bar.edu\"",
        "\"0.0.0.0 twitter.com\"",
        "\"127.0.0.1 facebook.com\"",
        "\"8.8.8.8 google.com\"",
        "\"1.2.3.4 foo.bar.edu\"",
        "\" # comments here galore\"",
        "\"os.path.abspath\"",
        "\"os.name\"",
        "\"foo\"",
        "\"foo\"",
        "\"\"",
        "\"os.path.abspath\"",
        "\"os.name\"",
        "\"nt\"",
        "\"foo\"",
        "\"Automatically moving the hosts \"",
        "\"file in place is not yet supported.\\n\"",
        "\"Please move the generated file to \"",
        "\"%SystemRoot%\\system32\\drivers\\etc\\hosts\"",
        "\"os.path.abspath\"",
        "\"subprocess.call\"",
        "\"os.name\"",
        "\"posix\"",
        "\"foo\"",
        "\"Moving the file requires administrative \"",
        "\"privileges. You might need to enter your password.\"",
        "\"os.path.abspath\"",
        "\"subprocess.call\"",
        "\"os.name\"",
        "\"posix\"",
        "\"foo\"",
        "\"Moving the file failed.\"",
        "\"subprocess.call\"",
        "\"platform.system\"",
        "\"Darwin\"",
        "\"Flushing the DNS cache to utilize new hosts \"",
        "\"file...\\nFlushing the DNS cache requires \"",
        "\"administrative privileges. You might need to \"",
        "\"enter your password.\"",
        "\"subprocess.call\"",
        "\"platform.system\"",
        "\"Darwin\"",
        "\"Flushing the DNS cache failed.\"",
        "\"platform.system\"",
        "\"win32\"",
        "\"os.name\"",
        "\"nt\"",
        "\"Automatically flushing the DNS cache is \"",
        "\"not yet supported.\\nPlease copy and paste \"",
        "\"the command 'ipconfig /flushdns' in \"",
        "\"administrator command prompt after running \"",
        "\"this script.\"",
        "\"os.path.isfile\"",
        "\"platform.system\"",
        "\"Linux\"",
        "\"os.name\"",
        "\"posix\"",
        "\"Unable to determine DNS management tool.\"",
        "\"os.path.isfile\"",
        "\"subprocess.call\"",
        "\"platform.system\"",
        "\"Linux\"",
        "\"os.name\"",
        "\"posix\"",
        "\"Flushing the DNS cache by \"",
        "\"restarting nscd succeeded\"",
        "\"os.path.isfile\"",
        "\"subprocess.call\"",
        "\"platform.system\"",
        "\"Linux\"",
        "\"os.name\"",
        "\"posix\"",
        "\"Flushing the DNS cache by \"",
        "\"restarting nscd failed\"",
        "\"os.path.isfile\"",
        "\"subprocess.call\"",
        "\"platform.system\"",
        "\"Linux\"",
        "\"os.name\"",
        "\"posix\"",
        "\"Flushing the DNS cache by \"",
        "\"restarting nscd failed\"",
        "\"Flushing the DNS cache by restarting \"",
        "\"NetworkManager.service succeeded\"",
        "\"updateHostsFile.urlopen\"",
        "b\"www.google.com\"",
        "\"www.google.com\"",
        "\"updateHostsFile.urlopen\"",
        "b\"www.google.com\"",
        "\"Problem getting file:\"",
        "\"updateHostsFile.urlopen\"",
        "b\"www.google.com\"",
        "\"Problem getting file:\"",
        "\"updateHostsFile.urlopen\"",
        "b\"www.google.com\"",
        "\"Problem getting file:\"",
        "\"foo\"",
        "b\"foo\"",
        "u\"foo\"",
        "b\"foo\"",
        "\"foo\"",
        "\"bar\"",
        "\"baz\"",
        "\"?\"",
        "\"updateHostsFile.raw_input\"",
        "\"yes\"",
        "\"[y/n]\"",
        "\"yes\"",
        "\"[Y/n]\"",
        "\"no\"",
        "\"[y/N]\"",
        "\"?\"",
        "\"updateHostsFile.raw_input\"",
        "\"\"",
        "\"yes\"",
        "\"no\"",
        "\"yes\"",
        "\"?\"",
        "\"updateHostsFile.raw_input\"",
        "\"no\"",
        "\"NO\"",
        "\"N\"",
        "\"n\"",
        "\"No\"",
        "\"nO\"",
        "\"?\"",
        "\"updateHostsFile.raw_input\"",
        "\"yes\"",
        "\"YES\"",
        "\"Y\"",
        "\"yeS\"",
        "\"y\"",
        "\"YeS\"",
        "\"yES\"",
        "\"YEs\"",
        "\"?\"",
        "\"updateHostsFile.raw_input\"",
        "\"foo\"",
        "\"yes\"",
        "\"foo\"",
        "\"no\"",
        "\"Please respond with 'yes' or 'no'\"",
        "\"?\"",
        "\"?\"",
        "\"\"",
        "\"You didn't enter a domain. Try again.\"",
        "\"Do not include www.domain.com or \"",
        "\"http(s)://domain.com. Try again.\"",
        "\"www.subdomain.domain\"",
        "\"https://github.com\"",
        "\"http://www.google.com\"",
        "\"github.com\"",
        "\"travis.org\"",
        "\"twitter.com\"",
        "\"\"",
        "\"foo.txt\"",
        "\"bar.bat\"",
        "\"baz.py\"",
        "\"foo/foo.c\"",
        "\"foo/bar.doc\"",
        "\"foo/baz/foo.py\"",
        "\"bar/foo/baz.c\"",
        "\"bar/bar/foo.bat\"",
        "\".\"",
        "\"\"",
        "\"/\"",
        "\"\"",
        "\"_\"",
        "\"os.walk\"",
        "\"sys.version_info\"",
        "\"bar.bat\"",
        "\"bar/bar/foo.bat\"",
        "\"bar/foo/baz.c\"",
        "\"baz.py\"",
        "\"foo.txt\"",
        "\"foo/bar.doc\"",
        "\"foo/baz/foo.py\"",
        "\"foo/foo.c\"",
        "\"*\"",
        "\"*\"",
        "\"bar/bar/foo.bat\"",
        "\"bar/foo/baz.c\"",
        "\"bar\"",
        "\"*\"",
        "\"foo/bar.doc\"",
        "\"foo/baz/foo.py\"",
        "\"foo/foo.c\"",
        "\"foo\"",
        "\"*\"",
        "\"os.walk\"",
        "\"sys.version_info\"",
        "\"foo/baz/foo.py\"",
        "\"foo\"",
        "\"*.py\"",
        "\"bar/foo/baz.c\"",
        "\"foo/foo.c\"",
        "\"*\"",
        "\"*.c\"",
        "\"*\"",
        "\".xlsx\"",
        "\"foo\"",
        "b\"\"",
        "\"foo\"",
        "\"path1\"",
        "\"path1\"",
        "u\"path1\"",
        "\"pathNew\"",
        "\"path1\"",
        "\"pathNew\"",
        "\"path1\"",
        "u\"pathNew\"",
        "\"path1\"",
        "\"pathNew\"",
        "\"path1\"",
        "\"os.path.join\"",
        "\"path\"",
        "\"sys.platform\"",
        "\"Linux\"",
        "\"sys.stdout.isatty\"",
        "\"sys.platform\"",
        "\"Pocket PC\"",
        "\"sys.platform\"",
        "\"win32\"",
        "\"os.environ\"",
        "\"sys.platform\"",
        "\"win32\"",
        "\"os.environ\"",
        "\"ANSICON\"",
        "\"sys.stdout.isatty\"",
        "\"sys.platform\"",
        "\"Linux\"",
        "\"sys.stdout\"",
        "\"sys.platform\"",
        "\"Linux\"",
        "\"sys.stdout.isatty\"",
        "\"house\"",
        "\"red\"",
        "\"orange\"",
        "\"yellow\"",
        "\"green\"",
        "\"blue\"",
        "\"purple\"",
        "\"updateHostsFile.supports_color\"",
        "\"updateHostsFile.supports_color\"",
        "\"house\"",
        "\"updateHostsFile.supports_color\"",
        "\"\\n\"",
        "\"updateHostsFile.supports_color\"",
        "\"\\n\"",
        "\"house\"",
        "\"updateHostsFile.supports_color\"",
        "\"\\n\"",
        "\"updateHostsFile.supports_color\"",
        "\"\\n\"",
        "\"__main__\""
    ],
    "variables": [
        "unicode",
        "BytesIO",
        "sys",
        "stdout",
        "sys",
        "stdout",
        "updateHostsFile",
        "BASEDIR_PATH",
        "actual",
        "expected",
        "expected",
        "output",
        "expected",
        "output",
        "output",
        "sys",
        "stdout",
        "expected",
        "output",
        "output",
        "output",
        "os",
        "name",
        "mock_file",
        "expected",
        "output",
        "os",
        "name",
        "mock_file",
        "expected",
        "output",
        "os",
        "name",
        "mock_file",
        "expected",
        "output",
        "os",
        "name",
        "mock_file",
        "expected",
        "output",
        "obj",
        "return_value",
        "expected",
        "output",
        "obj",
        "return_value",
        "expected",
        "output",
        "obj",
        "return_value",
        "os",
        "name",
        "expected",
        "output",
        "obj",
        "return_value",
        "os",
        "name",
        "expected",
        "output",
        "obj",
        "return_value",
        "os",
        "name",
        "expected",
        "output",
        "obj",
        "return_value",
        "os",
        "name",
        "expected",
        "output",
        "obj",
        "return_value",
        "os",
        "name",
        "output",
        "m",
        "m",
        "read",
        "s",
        "s",
        "decode",
        "m",
        "m",
        "read",
        "url",
        "expected",
        "actual",
        "url",
        "expected",
        "output",
        "url",
        "expected",
        "output",
        "url",
        "expected",
        "output",
        "f",
        "data",
        "expected",
        "actual",
        "f",
        "data",
        "expected",
        "actual",
        "output",
        "sys",
        "stdout",
        "expected",
        "actual",
        "expected",
        "output",
        "sys",
        "stdout",
        "output",
        "output",
        "expected",
        "expected",
        "output",
        "sys",
        "stdout",
        "output",
        "sys",
        "stdout",
        "files",
        "stem",
        "matches",
        "actual",
        "sys",
        "version_info",
        "expected",
        "actual",
        "expected",
        "actual",
        "expected",
        "actual",
        "sys",
        "version_info",
        "expected",
        "actual",
        "expected",
        "actual",
        "expected",
        "actual",
        "expected",
        "actual",
        "actual",
        "paths",
        "expected",
        "actual",
        "paths",
        "expected",
        "actual",
        "sys",
        "platform",
        "obj",
        "return_value",
        "sys",
        "platform",
        "sys",
        "platform",
        "os",
        "environ",
        "sys",
        "platform",
        "os",
        "environ",
        "obj",
        "return_value",
        "sys",
        "platform",
        "sys",
        "stdout",
        "sys",
        "platform",
        "obj",
        "return_value",
        "text",
        "colors",
        "expected",
        "actual",
        "expected",
        "actual",
        "text",
        "expected",
        "actual",
        "expected",
        "actual",
        "text",
        "expected",
        "actual",
        "expected",
        "actual"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Script by gfyoung",
        "https://github.com/gfyoung",
        "",
        "Python script for testing updateHostFiles.py",
        "Base Test Classes",
        "End Base Test Classes",
        "Project Settings",
        "End Project Settings",
        "Exclusion Logic",
        "Can only test in the invalid domain case",
        "because of the settings global variable.",
        "End Exclusion Logic",
        "File Logic",
        "Can only test non-matches because they don't",
        "interact with the settings global variable.",
        "End File Logic",
        "Helper Functions",
        "The first time, we respond \"yes\"",
        "The second time, we respond \"no\"",
        "Colors",
        "End Helper Functions"
    ],
    "docstrings": [
        "\"\"\"\n    Mock of `urlopen` that returns the url in a `BytesIO` stream.\n\n    Parameters\n    ----------\n    url : str\n        The URL associated with the file to open.\n\n    Returns\n    -------\n    bytes_stream : BytesIO\n        The `url` input wrapped in a `BytesIO` stream.\n    \"\"\"",
        "\"\"\"\n    Mock of `urlopen` that fails with an Exception.\n    \"\"\"",
        "\"\"\"\n    Mock of `urlopen` that returns an object that fails on `read`.\n\n    Returns\n    -------\n    file_mock : mock.Mock\n        A mock of a file object that fails when reading.\n    \"\"\"",
        "\"\"\"\n    Mock of `urlopen` that returns an object that fails on during decoding\n    the output of `urlopen`.\n\n    Returns\n    -------\n    file_mock : mock.Mock\n        A mock of a file object that fails when decoding the output.\n    \"\"\"",
        "\"\"\"\n    Mock method for `os.walk`.\n\n    Please refer to the documentation of `os.walk` for information about\n    the provided parameters.\n    \"\"\"",
        "\"\"\"\n    Mock method for `os.path.join`.\n\n    Please refer to the documentation of `os.path.join` for information about\n    the provided parameters.\n    \"\"\""
    ],
    "functions": [
        "mock_property",
        "sep",
        "setUp",
        "tearDown",
        "test_get_defaults",
        "test_basic",
        "test_multiple",
        "test_no_match",
        "test_strip_empty",
        "test_strip_exactly_two",
        "test_strip_more_than_two",
        "test_move_hosts_no_name",
        "test_move_hosts_windows",
        "test_move_hosts_posix",
        "test_move_hosts_posix_fail",
        "test_flush_darwin",
        "test_flush_darwin_fail",
        "test_flush_windows",
        "test_flush_no_tool",
        "test_flush_posix",
        "test_flush_posix_fail",
        "test_flush_posix_fail_then_succeed",
        "mock_url_open",
        "mock_url_open_fail",
        "mock_url_open_read_fail",
        "fail_read",
        "mock_url_open_decode_fail",
        "fail_decode",
        "read",
        "test_read_url",
        "test_read_url_fail",
        "test_read_url_read_fail",
        "test_read_url_decode_fail",
        "test_write_basic",
        "test_write_unicode",
        "test_invalid_default",
        "test_valid_default",
        "test_use_valid_default",
        "test_valid_no",
        "test_valid_yes",
        "test_invalid_then_valid",
        "test_empty_domain",
        "test_invalid_domain",
        "test_valid_domain",
        "mock_walk",
        "sorted_recursive_glob",
        "test_all_match",
        "test_file_ending",
        "mock_path_join",
        "test_basic",
        "test_join",
        "test_join_unicode",
        "test_join_error",
        "test_posix",
        "test_pocket_pc",
        "test_windows_no_ansicon",
        "test_windows_ansicon",
        "test_no_isatty_attribute",
        "test_no_isatty",
        "setUp",
        "test_colorize_no_support",
        "test_colorize_support",
        "setUp",
        "test_print_success_no_support",
        "test_print_success_support",
        "setUp",
        "test_print_failure_no_support",
        "test_print_failure_support"
    ],
    "classes": [
        "Base",
        "BaseStdout",
        "TestGetDefaults",
        "TestGatherCustomExclusions",
        "TestNormalizeRule",
        "TestStripRule",
        "TestMoveHostsFile",
        "TestFlushDnsCache",
        "GetFileByUrl",
        "TestWriteData",
        "TestQueryYesOrNo",
        "TestIsValidDomainFormat",
        "TestRecursiveGlob",
        "TestPathJoinRobust",
        "TestSupportsColor",
        "TestColorize",
        "TestPrintSuccess",
        "TestPrintFailure"
    ]
}