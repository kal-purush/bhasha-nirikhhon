{
    "identifiers": [
        "sys",
        "os",
        "subprocess",
        "time",
        "hashlib",
        "Savoir",
        "Savoir",
        "Tkinter",
        "tkFileDialog",
        "tkMessageBox",
        "ImportError",
        "tkinter",
        "tkinter",
        "filedialog",
        "tkFileDialog",
        "tkinter",
        "tkmessagebox",
        "tkMessageBox",
        "ttk",
        "ImportError",
        "tkinter",
        "ttk",
        "ttk",
        "py3",
        "tkMessageBox",
        "showwarning",
        "m",
        "Debug",
        "m",
        "sys",
        "stdout",
        "flush",
        "f",
        "os",
        "path",
        "exists",
        "f",
        "tkMessageBox",
        "askokcancel",
        "f",
        "result",
        "infile",
        "hashlib",
        "md5",
        "open",
        "infile",
        "afile",
        "afile",
        "read",
        "BLOCKSIZE",
        "len",
        "buf",
        "hasher",
        "update",
        "buf",
        "afile",
        "read",
        "BLOCKSIZE",
        "hasher",
        "hexdigest",
        "outfile",
        "cmd",
        "outfile",
        "subprocess",
        "Popen",
        "cmd",
        "wait",
        "open",
        "outfile",
        "f",
        "f",
        "readline",
        "rstrip",
        "result",
        "infile",
        "outfile",
        "cmd",
        "infile",
        "outfile",
        "subprocess",
        "Popen",
        "cmd",
        "wait",
        "open",
        "outfile",
        "f",
        "f",
        "readline",
        "rstrip",
        "result",
        "data",
        "infile",
        "outfile",
        "cmd",
        "infile",
        "outfile",
        "subprocess",
        "Popen",
        "cmd",
        "wait",
        "outfile",
        "cmd",
        "outfile",
        "subprocess",
        "Popen",
        "cmd",
        "wait",
        "open",
        "outfile",
        "f",
        "f",
        "readline",
        "rstrip",
        "result",
        "infile",
        "outfile",
        "password",
        "password",
        "infile",
        "outfile",
        "subprocess",
        "Popen",
        "cmd",
        "wait",
        "infile",
        "outfile",
        "password",
        "password",
        "infile",
        "outfile",
        "subprocess",
        "Popen",
        "cmd",
        "wait",
        "infile",
        "password_generator",
        "infile",
        "infile",
        "simmetric_encrypt",
        "infile",
        "encinfile",
        "password",
        "os",
        "path",
        "exists",
        "encinfile",
        "encinfile",
        "password",
        "printD",
        "password",
        "Savoir",
        "rpcuser",
        "rpcpasswd",
        "rpchost",
        "rpcport",
        "chainname",
        "api",
        "getinfo",
        "api",
        "password",
        "printD",
        "rpcuser",
        "rpcpasswd",
        "rpchost",
        "rpcport",
        "chainname",
        "Savoir",
        "rpcuser",
        "rpcpasswd",
        "rpchost",
        "rpcport",
        "chainname",
        "api",
        "getinfo",
        "api",
        "data",
        "api"
    ],
    "literals": [
        "\"Danger ! need python 2.7. Do you launched the jupyter_envs_change_2.7.bat batch ?\"",
        "\"streamvcf\"",
        "\"Not already built !\"",
        "\"This function is WIP Work in Progress !\"",
        "\"File already exist !\"",
        "\"File '\"",
        "\"' already exists on the destination folder. Sure you want to overwrite ?\"",
        "'rb'",
        "'openssl'",
        "'genrsa'",
        "'-out'",
        "\"rb\"",
        "'openssl'",
        "'rsa'",
        "'-pubout'",
        "'-in'",
        "'-out'",
        "\"rb\"",
        "'openssl'",
        "'rsa'",
        "'-pubout'",
        "'-in'",
        "'-out'",
        "'openssl'",
        "'rand'",
        "'-base64'",
        "'48'",
        "'-out'",
        "\"rb\"",
        "'openssl aes-128-cbc -k %s -in \"%s\" -out \"%s\"'",
        "'openssl aes-128-cbc -d -k %s -in \"%s\" -out \"%s\"'",
        "\".pwd\"",
        "\".aes128\"",
        "'support.getApiData'",
        "'multichainrpc'",
        "'E1istHrjEXZqp396G9uWsX4yuMC2qTHtUg52CPU8E4zz'",
        "'localhost'",
        "'2900'",
        "'GeneChainData'",
        "'support.getApiData'",
        "'multichainrpc'",
        "'8H75HgFBxzv3Hd32RVP6QSp3e4U57Y3JvHk1x8UoqNJw'",
        "'localhost'",
        "'2896'",
        "'GeneChainCoin'",
        "\"API\"",
        "\"data\""
    ],
    "variables": [
        "py3",
        "py3",
        "Debug",
        "chunk_size",
        "stream",
        "result",
        "result",
        "BLOCKSIZE",
        "hasher",
        "buf",
        "buf",
        "cmd",
        "result",
        "cmd",
        "result",
        "cmd",
        "cmd",
        "result",
        "cmd",
        "cmd",
        "password",
        "encinfile",
        "rpcuser",
        "rpcpasswd",
        "rpcpasswd",
        "rpchost",
        "rpcport",
        "chainname",
        "api",
        "data",
        "data",
        "api",
        "rpcuser",
        "rpcpasswd",
        "rpchost",
        "rpcport",
        "chainname",
        "api",
        "data",
        "data",
        "api"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "maxmultichain stream size 64 MBytes = 32*1024*1024 in hexadecimal format",
        "print cmd",
        "print \" \".join(cmd)",
        "print cmd",
        "print \" \".join(cmd)",
        "Ancora da fare",
        "print cmd",
        "print \" \".join(cmd)",
        "with open(outfile,\"rb\") as f:",
        "result = f.readline().rstrip()",
        "return result",
        "openssl rand -base64 48 -out pippo.pwd",
        "print cmd",
        "print \" \".join(cmd)",
        "print(password)",
        "print(rpcuser, rpcpasswd, rpchost, rpcport, chainname)",
        "print(\"API\",api)",
        "print(\"data\",data)",
        "rpcpasswd = password"
    ],
    "docstrings": [],
    "functions": [
        "advice",
        "printD",
        "checkFileNotExist",
        "hash",
        "generate_private_key",
        "generate_public_key",
        "encrypt_with_public_key",
        "password_generator",
        "simmetric_encrypt",
        "simmetric_decrypt",
        "simmetric_encrypt_data",
        "getApiData",
        "getApiCoin"
    ],
    "classes": []
}