{
    "identifiers": [
        "NUnit",
        "Framework",
        "NUnit",
        "Framework",
        "Internal",
        "Linq",
        "Expressions",
        "Expression",
        "FastExpressionCompiler",
        "UnitTests",
        "TestFixture",
        "Test",
        "Lambda",
        "Action",
        "TryCatch",
        "Throw",
        "Constant",
        "DivideByZeroException",
        "Catch",
        "DivideByZeroException",
        "Throw",
        "Constant",
        "InvalidTimeZoneException",
        "expr",
        "CompileFast",
        "Assert",
        "IsNotNull",
        "func",
        "Assert",
        "Throws",
        "InvalidTimeZoneException",
        "func",
        "Test",
        "Lambda",
        "Action",
        "TryCatchFinally",
        "Throw",
        "Constant",
        "DivideByZeroException",
        "Throw",
        "Constant",
        "InvalidDataSourceException",
        "Catch",
        "DivideByZeroException",
        "Throw",
        "Constant",
        "InvalidTimeZoneException",
        "expr",
        "CompileFast",
        "Assert",
        "IsNotNull",
        "func",
        "Assert",
        "Throws",
        "InvalidDataSourceException",
        "func",
        "Test",
        "Lambda",
        "Action",
        "Throw",
        "Constant",
        "DivideByZeroException",
        "expr",
        "CompileFast",
        "Assert",
        "IsNotNull",
        "func",
        "Assert",
        "Throws",
        "DivideByZeroException",
        "func"
    ],
    "literals": [],
    "variables": [
        "expr",
        "func",
        "expr",
        "func",
        "expr",
        "func"
    ],
    "comments": [
        "TODO: Add suport for usage of exception parameter\n        [Test]\n        public void Can_use_exception_parameter()\n        {\n            var parExcep = Parameter(typeof(Exception), \"exc\");\n            MethodInfo getExceptionMessage = typeof(Exception)\n                .GetProperty(nameof(Exception.Message), BindingFlags.Public | BindingFlags.Instance).GetMethod;\n            MethodInfo writeLine = typeof(Console).GetMethod(nameof(Console.WriteLine), new [] { typeof(string) });\n\n            var expr = Lambda<Action>(TryCatch(\n                Throw(Constant(new DivideByZeroException())),\n                Catch(\n                    parExcep,\n                    Call(\n                        writeLine,\n                        Call(parExcep, getExceptionMessage)\n                    )\n                )\n            ));\n\n            var func = expr.CompileFast(true);\n            Assert.IsNotNull(func);\n            Assert.DoesNotThrow(()=> func());\n        }",
        "TODO: Add suport of try-catch expression in non-void method.\n        [Test]\n        public void Can_return_from_catch_block()\n        {\n            Expression<Func<bool>> expr = Lambda<Func<bool>>(TryCatch(\n                Block(\n                    Throw(Constant(new DivideByZeroException())),\n                    Constant(false)\n                ),\n                Catch(\n                    typeof(DivideByZeroException),\n                    Constant(true)\n                )\n            ));\n\n            var func = expr.CompileFast(true);\n\n            Assert.IsNotNull(func);\n            Assert.IsTrue(func());\n        }"
    ],
    "docstrings": [],
    "functions": [
        "Can_catch_exception",
        "Can_execute_finally",
        "Can_throw_an_exception"
    ],
    "classes": [
        "TryCatchTests"
    ]
}