{
    "identifiers": [
        "math",
        "os",
        "hashlib",
        "urllib",
        "request",
        "urlretrieve",
        "zipfile",
        "gzip",
        "shutil",
        "numpy",
        "np",
        "PIL",
        "Image",
        "tqdm",
        "tqdm",
        "bytestream",
        "np",
        "dtype",
        "np",
        "uint32",
        "newbyteorder",
        "np",
        "frombuffer",
        "bytestream",
        "read",
        "dtype",
        "dt",
        "save_path",
        "_",
        "database_name",
        "data_path",
        "format",
        "database_name",
        "zipfile",
        "ZipFile",
        "save_path",
        "zf",
        "zf",
        "extractall",
        "data_path",
        "save_path",
        "extract_path",
        "database_name",
        "_",
        "open",
        "save_path",
        "f",
        "gzip",
        "GzipFile",
        "fileobj",
        "f",
        "bytestream",
        "_read32",
        "bytestream",
        "magic",
        "ValueError",
        "format",
        "magic",
        "f",
        "name",
        "_read32",
        "bytestream",
        "_read32",
        "bytestream",
        "_read32",
        "bytestream",
        "bytestream",
        "read",
        "rows",
        "cols",
        "num_images",
        "np",
        "frombuffer",
        "buf",
        "dtype",
        "np",
        "uint8",
        "data",
        "reshape",
        "num_images",
        "rows",
        "cols",
        "image_i",
        "image",
        "tqdm",
        "data",
        "unit",
        "unit_scale",
        "miniters",
        "desc",
        "format",
        "database_name",
        "Image",
        "fromarray",
        "image",
        "save",
        "os",
        "path",
        "join",
        "extract_path",
        "format",
        "image_i",
        "image_path",
        "width",
        "height",
        "mode",
        "Image",
        "open",
        "image_path",
        "image",
        "size",
        "width",
        "height",
        "image",
        "size",
        "face_width",
        "image",
        "size",
        "face_height",
        "image",
        "crop",
        "j",
        "i",
        "j",
        "face_width",
        "i",
        "face_height",
        "image",
        "resize",
        "width",
        "height",
        "Image",
        "BILINEAR",
        "np",
        "array",
        "image",
        "convert",
        "mode",
        "image_files",
        "width",
        "height",
        "mode",
        "np",
        "array",
        "get_image",
        "sample_file",
        "width",
        "height",
        "mode",
        "sample_file",
        "image_files",
        "astype",
        "np",
        "float32",
        "len",
        "data_batch",
        "shape",
        "data_batch",
        "reshape",
        "data_batch",
        "shape",
        "data_batch",
        "images",
        "mode",
        "math",
        "floor",
        "np",
        "sqrt",
        "images",
        "shape",
        "images",
        "images",
        "min",
        "images",
        "max",
        "images",
        "min",
        "astype",
        "np",
        "uint8",
        "np",
        "reshape",
        "images",
        "save_size",
        "save_size",
        "save_size",
        "save_size",
        "images",
        "shape",
        "images",
        "shape",
        "images",
        "shape",
        "mode",
        "np",
        "squeeze",
        "images_in_square",
        "Image",
        "mode",
        "images",
        "shape",
        "save_size",
        "images",
        "shape",
        "save_size",
        "col_i",
        "col_images",
        "images_in_square",
        "image_i",
        "image",
        "col_images",
        "Image",
        "fromarray",
        "image",
        "mode",
        "new_im",
        "paste",
        "im",
        "col_i",
        "images",
        "shape",
        "image_i",
        "images",
        "shape",
        "new_im",
        "database_name",
        "data_path",
        "database_name",
        "DATASET_CELEBA_NAME",
        "os",
        "path",
        "join",
        "data_path",
        "os",
        "path",
        "join",
        "data_path",
        "_unzip",
        "database_name",
        "DATASET_MNIST_NAME",
        "os",
        "path",
        "join",
        "data_path",
        "os",
        "path",
        "join",
        "data_path",
        "_ungzip",
        "os",
        "path",
        "exists",
        "extract_path",
        "format",
        "database_name",
        "os",
        "path",
        "exists",
        "data_path",
        "os",
        "makedirs",
        "data_path",
        "os",
        "path",
        "exists",
        "save_path",
        "DLProgress",
        "unit",
        "unit_scale",
        "miniters",
        "desc",
        "format",
        "database_name",
        "pbar",
        "urlretrieve",
        "url",
        "save_path",
        "pbar",
        "hook",
        "hashlib",
        "md5",
        "open",
        "save_path",
        "read",
        "hexdigest",
        "hash_code",
        "format",
        "save_path",
        "os",
        "makedirs",
        "extract_path",
        "extract_fn",
        "save_path",
        "extract_path",
        "database_name",
        "data_path",
        "err",
        "shutil",
        "rmtree",
        "extract_path",
        "err",
        "os",
        "remove",
        "save_path",
        "dataset_name",
        "data_files",
        "dataset_name",
        "DATASET_CELEBA_NAME",
        "dataset_name",
        "DATASET_MNIST_NAME",
        "data_files",
        "len",
        "data_files",
        "IMAGE_WIDTH",
        "IMAGE_HEIGHT",
        "image_channels",
        "batch_size",
        "current_index",
        "batch_size",
        "shape",
        "get_batch",
        "data_files",
        "current_index",
        "current_index",
        "batch_size",
        "shape",
        "image_mode",
        "current_index",
        "batch_size",
        "data_batch",
        "IMAGE_MAX_VALUE",
        "tqdm",
        "block_num",
        "block_size",
        "total_size",
        "total_size",
        "update",
        "block_num",
        "last_block",
        "block_size",
        "block_num"
    ],
    "literals": [
        "'>'",
        "'Extracting {}...'",
        "'rb'",
        "'Invalid magic number {} in file: {}'",
        "'File'",
        "'Extracting {}'",
        "'L'",
        "'image_{}.jpg'",
        "'L'",
        "'celeba'",
        "'mnist'",
        "'https://s3-us-west-1.amazonaws.com/udacity-dlnfd/datasets/celeba.zip'",
        "'00d2c5bc6d35e252742224ab0c1e8fcb'",
        "'img_align_celeba'",
        "'celeba.zip'",
        "'http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz'",
        "'f68b3c2dcbeaaa9fbdd348bbdeb94873'",
        "'mnist'",
        "'train-images-idx3-ubyte.gz'",
        "'Found {} Data'",
        "'B'",
        "'Downloading {}'",
        "'rb'",
        "'{} file is corrupted.  Remove the file and try again.'",
        "'celeba'",
        "'mnist'",
        "'RGB'",
        "'L'"
    ],
    "variables": [
        "dt",
        "magic",
        "num_images",
        "rows",
        "cols",
        "buf",
        "data",
        "data",
        "image",
        "face_width",
        "face_height",
        "j",
        "i",
        "image",
        "image",
        "data_batch",
        "data_batch",
        "save_size",
        "images",
        "images_in_square",
        "images_in_square",
        "new_im",
        "im",
        "DATASET_CELEBA_NAME",
        "DATASET_MNIST_NAME",
        "url",
        "hash_code",
        "extract_path",
        "save_path",
        "extract_fn",
        "url",
        "hash_code",
        "extract_path",
        "save_path",
        "extract_fn",
        "DATASET_CELEBA_NAME",
        "DATASET_MNIST_NAME",
        "IMAGE_WIDTH",
        "IMAGE_HEIGHT",
        "image_mode",
        "image_channels",
        "image_mode",
        "image_channels",
        "data_files",
        "shape",
        "IMAGE_MAX_VALUE",
        "current_index",
        "data_batch",
        "last_block",
        "total",
        "last_block"
    ],
    "comments": [
        "Get data from save_path",
        "Save data to extract_path",
        "HACK - Check if image is from the CELEBA dataset",
        "Remove most pixels that aren't part of a face",
        "Make sure the images are in 4 dimensions",
        "Get maximum size for square grid of images",
        "Scale to 0-255",
        "Put images in a square arrangement",
        "Combine images to grid image",
        "Remove extraction folder if there is an error",
        "Remove compressed data"
    ],
    "docstrings": [
        "\"\"\"\n    Read 32-bit integer from bytesteam\n    :param bytestream: A bytestream\n    :return: 32-bit integer\n    \"\"\"",
        "\"\"\"\n    Unzip wrapper with the same interface as _ungzip\n    :param save_path: The path of the gzip files\n    :param database_name: Name of database\n    :param data_path: Path to extract to\n    :param _: HACK - Used to have to same interface as _ungzip\n    \"\"\"",
        "\"\"\"\n    Unzip a gzip file and extract it to extract_path\n    :param save_path: The path of the gzip files\n    :param extract_path: The location to extract the data to\n    :param database_name: Name of database\n    :param _: HACK - Used to have to same interface as _unzip\n    \"\"\"",
        "\"\"\"\n    Read image from image_path\n    :param image_path: Path of image\n    :param width: Width of image\n    :param height: Height of image\n    :param mode: Mode of image\n    :return: Image data\n    \"\"\"",
        "\"\"\"\n    Save images as a square grid\n    :param images: Images to be used for the grid\n    :param mode: The mode to use for images\n    :return: Image of images in a square grid\n    \"\"\"",
        "\"\"\"\n    Download and extract database\n    :param database_name: Database name\n    \"\"\"",
        "\"\"\"\n    Dataset\n    \"\"\"",
        "\"\"\"\n        Initalize the class\n        :param dataset_name: Database name\n        :param data_files: List of files in the database\n        \"\"\"",
        "\"\"\"\n        Generate batches\n        :param batch_size: Batch Size\n        :return: Batches of data\n        \"\"\"",
        "\"\"\"\n    Handle Progress Bar while Downloading\n    \"\"\"",
        "\"\"\"\n        A hook function that will be called once on establishment of the network connection and\n        once after each block read thereafter.\n        :param block_num: A count of blocks transferred so far\n        :param block_size: Block size in bytes\n        :param total_size: The total size of the file. This may be -1 on older FTP servers which do not return\n                            a file size in response to a retrieval request.\n        \"\"\""
    ],
    "functions": [
        "_read32",
        "_unzip",
        "_ungzip",
        "get_image",
        "get_batch",
        "images_square_grid",
        "download_extract",
        "get_batches",
        "hook"
    ],
    "classes": [
        "Dataset",
        "DLProgress"
    ]
}