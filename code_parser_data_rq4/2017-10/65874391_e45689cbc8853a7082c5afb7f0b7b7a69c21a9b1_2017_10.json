{
    "identifiers": [
        "botocore",
        "exceptions",
        "ClientError",
        "botocore",
        "utils",
        "get_service_module_name",
        "ClientError",
        "code_to_exception",
        "code_to_exception",
        "error_code",
        "_code_to_exception",
        "get",
        "error_code",
        "ClientError",
        "name",
        "exception_cls",
        "exception_cls",
        "_code_to_exception",
        "values",
        "AttributeError",
        "name",
        "join",
        "exception_cls_names",
        "service_model",
        "service_model",
        "service_name",
        "service_name",
        "_client_exceptions_cache",
        "_create_client_exceptions",
        "service_model",
        "_client_exceptions_cache",
        "client_exceptions",
        "_client_exceptions_cache",
        "service_name",
        "service_model",
        "shape_name",
        "service_model",
        "shape_names",
        "service_model",
        "shape_for",
        "shape_name",
        "shape",
        "metadata",
        "get",
        "shape",
        "name",
        "exception_name",
        "ClientError",
        "shape",
        "metadata",
        "get",
        "get",
        "exception_cls",
        "code",
        "exception_cls",
        "exception_cls",
        "get_service_module_name",
        "service_model",
        "cls_name",
        "BaseClientExceptions",
        "cls_props",
        "client_exceptions_cls",
        "code_to_exception"
    ],
    "literals": [
        "'%r object has no attribute %r. Valid exceptions are: %s'",
        "', '",
        "'exception'",
        "\"error\"",
        "\"code\"",
        "'Exceptions'"
    ],
    "variables": [
        "ClientError",
        "_code_to_exception",
        "exception_cls_names",
        "_client_exceptions_cache",
        "service_name",
        "client_exceptions",
        "service_name",
        "cls_props",
        "code_to_exception",
        "shape",
        "exception_name",
        "exception_cls",
        "code",
        "cls_props",
        "exception_name",
        "code_to_exception",
        "code",
        "code_to_exception",
        "exception_name",
        "cls_name",
        "client_exceptions_cls"
    ],
    "comments": [
        "Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\"). You",
        "may not use this file except in compliance with the License. A copy of",
        "the License is located at",
        "",
        "http://aws.amazon.com/apache2.0/",
        "",
        "or in the \"license\" file accompanying this file. This file is",
        "distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF",
        "ANY KIND, either express or implied. See the License for the specific",
        "language governing permissions and limitations under the License.",
        "Use the exception name if there is no explicit code",
        "modeled"
    ],
    "docstrings": [
        "\"\"\"Base class for exceptions object on a client\n\n        :type code_to_exception: dict\n        :param code_to_exception: Mapping of error codes (strings) to exception\n            class that should be raised when encountering a particular\n            error code.\n        \"\"\"",
        "\"\"\"Retrieves the error class based on the error code\n\n        This is helpful for identifying the exception class needing to be\n        caught based on the ClientError.parsed_reponse['Error']['Code'] value\n\n        :type error_code: string\n        :param error_code: The error code associated to a ClientError exception\n\n        :rtype: ClientError or a subclass of ClientError\n        :returns: The appropriate modeled exception class for that error\n            code. If the error code does not match any of the known\n            modeled exceptions then return a generic ClientError.\n        \"\"\"",
        "\"\"\"Creates a ClientExceptions object for the particular service client\n\n        :type service_model: botocore.model.ServiceModel\n        :param service_model: The service model for the client\n\n        :rtype: object that subclasses from BaseClientExceptions\n        :returns: The exceptions object of a client that can be used\n            to grab the various different modeled exceptions.\n        \"\"\""
    ],
    "functions": [
        "from_code",
        "__getattr__",
        "create_client_exceptions",
        "_create_client_exceptions"
    ],
    "classes": [
        "BaseClientExceptions",
        "ClientExceptionsFactory"
    ]
}