{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "IO",
        "Security",
        "Cryptography",
        "Lab02_DataEncription",
        "args",
        "exit",
        "RSA",
        "WriteLine",
        "SetCursorPosition",
        "CursorTop",
        "ReadLine",
        "rsa",
        "GenerateKeys",
        "WriteLine",
        "rsa",
        "j",
        "ToString",
        "WriteLine",
        "SetCursorPosition",
        "CursorTop",
        "entry",
        "ReadLine",
        "f",
        "DirectoryInfo",
        "entry",
        "Validation",
        "entry",
        "filePath",
        "ForegroundColor",
        "ConsoleColor",
        "Red",
        "WriteLine",
        "ForegroundColor",
        "ConsoleColor",
        "White",
        "ReadLine",
        "entry",
        "filePath",
        "entry",
        "Split",
        "current",
        "ToLower",
        "current",
        "Length",
        "current",
        "current",
        "current",
        "current",
        "current",
        "Split",
        "path",
        "Length",
        "path",
        "File",
        "Exists",
        "path",
        "filePath",
        "path"
    ],
    "literals": [
        "\"\"",
        "\"\"",
        "\"\"",
        "\"Write your user to generate key:\"",
        "\"your private key is:\"",
        "\"c:/encryption/:\"",
        "\"¡Error! Asegúrese de haber escrito correctamente los comandos del progama. Verifique que exista el archivo.\"",
        "\"exit\"",
        "\"exit\"",
        "\"-c0\"",
        "\"-d\"",
        "\"-c1\"",
        "\"-f\""
    ],
    "variables": [
        "DirectoryInfo",
        "f",
        "filePath",
        "entry",
        "exit",
        "RSA",
        "rsa",
        "user",
        "current",
        "path"
    ],
    "comments": [
        "rsa.Encryption();",
        "Here goes RSA",
        "exit = true;",
        "byte[] bytes;\n            using (var file = new FileStream(\"C:\\\\Users\\\\jsala\\\\Pictures\\\\emilyo.jpeg\", FileMode.Open))\n            {\n                using (var binaryFile = new BinaryReader(file, Encoding.ASCII))\n                {\n                    var mensaje = binaryFile.ReadBytes((int)file.Length);\n                    // Instanciamos el algorimo asimétrico RSA\n\n                    bytes = mensaje;\n                }\n            }\n            using (var file = new FileStream(\"C:\\\\Users\\\\jsala\\\\Pictures\\\\emilyo.txt\", FileMode.Append))\n            {\n                using (var binaryFile = new BinaryWriter(file, Encoding.ASCII))\n                {\n                   \n                    RSACryptoServiceProvider primerRSA = new RSACryptoServiceProvider();\n                    // Establecemos la longitud de la clave que queremos usar\n                    primerRSA.KeySize = 2048;\n                   \n                    bytes = primerRSA.Encrypt(bytes, true);\n                    for (int i = 0; i < bytes.Length; i++)\n                    {\n                        binaryFile.Write(bytes[i]);\n                    }\n\n                }\n            }",
        "Validation"
    ],
    "docstrings": [],
    "functions": [
        "Main",
        "Validation"
    ],
    "classes": [
        "Program"
    ]
}