{
    "identifiers": [
        "java",
        "util",
        "Comparator",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "root",
        "cmp",
        "cmp",
        "cmp",
        "cmp",
        "left",
        "right",
        "key",
        "height",
        "modIndex",
        "key",
        "height",
        "left",
        "right",
        "key",
        "key",
        "key",
        "index",
        "key",
        "modIndex",
        "add",
        "index",
        "key",
        "left",
        "right",
        "left",
        "left",
        "right",
        "right",
        "key",
        "key",
        "Override",
        "key",
        "toString",
        "height",
        "left",
        "right",
        "right",
        "right",
        "height",
        "left",
        "left",
        "height",
        "root",
        "key",
        "blockIndex",
        "aux",
        "add",
        "key",
        "root",
        "blockIndex",
        "aux",
        "root",
        "aux",
        "key",
        "current",
        "blockIndex",
        "aux",
        "current",
        "key",
        "blockIndex",
        "cmp",
        "compare",
        "key",
        "current",
        "key",
        "aux",
        "add",
        "key",
        "current",
        "left",
        "blockIndex",
        "aux",
        "aux",
        "current",
        "left",
        "current",
        "modIndex",
        "add",
        "blockIndex",
        "current",
        "left",
        "aux",
        "current",
        "height",
        "max",
        "current",
        "height",
        "current",
        "getLeftChildHeight",
        "cmp",
        "compare",
        "key",
        "current",
        "key",
        "aux",
        "add",
        "key",
        "current",
        "right",
        "blockIndex",
        "aux",
        "aux",
        "current",
        "right",
        "current",
        "modIndex",
        "add",
        "blockIndex",
        "current",
        "right",
        "aux",
        "current",
        "height",
        "max",
        "current",
        "height",
        "current",
        "getRightChildHeight",
        "current",
        "balance",
        "current",
        "blockIndex",
        "current",
        "current",
        "blockIndex",
        "balance",
        "getBalance",
        "current",
        "balance",
        "getBalance",
        "current",
        "left",
        "current",
        "rightRotation",
        "current",
        "blockIndex",
        "current",
        "left",
        "leftRotation",
        "current",
        "left",
        "blockIndex",
        "current",
        "rightRotation",
        "current",
        "blockIndex",
        "balance",
        "getBalance",
        "current",
        "right",
        "current",
        "leftRotation",
        "current",
        "blockIndex",
        "current",
        "right",
        "rightRotation",
        "current",
        "right",
        "blockIndex",
        "current",
        "leftRotation",
        "current",
        "blockIndex",
        "current",
        "current",
        "blockIndex",
        "auxright",
        "current",
        "right",
        "current",
        "right",
        "auxright",
        "left",
        "auxright",
        "left",
        "current",
        "current",
        "height",
        "max",
        "current",
        "getLeftChildHeight",
        "current",
        "getRightChildHeight",
        "auxright",
        "height",
        "max",
        "auxright",
        "height",
        "current",
        "height",
        "current",
        "modIndex",
        "add",
        "blockIndex",
        "auxright",
        "modIndex",
        "add",
        "blockIndex",
        "current",
        "right",
        "current",
        "right",
        "modIndex",
        "add",
        "blockIndex",
        "auxright",
        "current",
        "blockIndex",
        "auxleft",
        "current",
        "left",
        "current",
        "left",
        "auxleft",
        "right",
        "auxleft",
        "right",
        "current",
        "current",
        "height",
        "max",
        "current",
        "getLeftChildHeight",
        "current",
        "getRightChildHeight",
        "auxleft",
        "height",
        "max",
        "auxleft",
        "height",
        "current",
        "height",
        "current",
        "modIndex",
        "add",
        "blockIndex",
        "auxleft",
        "modIndex",
        "add",
        "blockIndex",
        "current",
        "left",
        "current",
        "left",
        "modIndex",
        "add",
        "blockIndex",
        "auxleft",
        "current",
        "current",
        "current",
        "getLeftChildHeight",
        "current",
        "getRightChildHeight",
        "key",
        "blockIndex",
        "aux",
        "remove",
        "key",
        "root",
        "blockIndex",
        "root",
        "aux",
        "getElement2",
        "aux",
        "getElement1",
        "key",
        "current",
        "blockIndex",
        "current",
        "aux",
        "node",
        "cmp",
        "compare",
        "key",
        "current",
        "key",
        "aux",
        "remove",
        "key",
        "current",
        "left",
        "blockIndex",
        "node",
        "aux",
        "getElement2",
        "current",
        "left",
        "node",
        "current",
        "modIndex",
        "add",
        "blockIndex",
        "current",
        "left",
        "node",
        "cmp",
        "compare",
        "key",
        "current",
        "key",
        "aux",
        "remove",
        "key",
        "current",
        "right",
        "blockIndex",
        "node",
        "aux",
        "getElement2",
        "current",
        "right",
        "node",
        "current",
        "modIndex",
        "add",
        "blockIndex",
        "current",
        "right",
        "node",
        "current",
        "deleteKey",
        "current",
        "blockIndex",
        "current",
        "balance",
        "current",
        "blockIndex",
        "current",
        "aux",
        "getElement1",
        "current",
        "height",
        "max",
        "current",
        "getLeftChildHeight",
        "current",
        "getRightChildHeight",
        "current",
        "balance",
        "current",
        "blockIndex",
        "aux",
        "getElement1",
        "current",
        "node",
        "blockIndex",
        "node",
        "right",
        "node",
        "left",
        "node",
        "right",
        "node",
        "left",
        "node",
        "left",
        "node",
        "right",
        "aux",
        "eliminateMostLeft",
        "node",
        "right",
        "blockIndex",
        "ret",
        "aux",
        "getElement2",
        "ret",
        "node",
        "right",
        "ret",
        "right",
        "ret",
        "right",
        "aux",
        "getElement1",
        "ret",
        "left",
        "node",
        "left",
        "ret",
        "height",
        "max",
        "ret",
        "getLeftChildHeight",
        "ret",
        "getRightChildHeight",
        "ret",
        "modIndex",
        "add",
        "blockIndex",
        "ret",
        "current",
        "blockIndex",
        "current",
        "aux",
        "current",
        "left",
        "aux",
        "eliminateMostLeft",
        "current",
        "left",
        "blockIndex",
        "current",
        "left",
        "aux",
        "getElement1",
        "current",
        "modIndex",
        "add",
        "blockIndex",
        "current",
        "left",
        "aux",
        "getElement1",
        "current",
        "current",
        "height",
        "max",
        "current",
        "getLeftChildHeight",
        "current",
        "getRightChildHeight",
        "current",
        "balance",
        "current",
        "blockIndex",
        "current",
        "aux",
        "getElement2",
        "inf",
        "sup",
        "result",
        "getInRange",
        "root",
        "result",
        "inf",
        "sup",
        "cmp",
        "result",
        "current",
        "result",
        "inf",
        "sup",
        "cmp",
        "current",
        "cmp",
        "compare",
        "inf",
        "current",
        "key",
        "cmp",
        "compare",
        "inf",
        "current",
        "key",
        "result",
        "add",
        "current",
        "key",
        "getInRange",
        "current",
        "right",
        "result",
        "inf",
        "sup",
        "cmp",
        "getInRange",
        "current",
        "left",
        "result",
        "inf",
        "sup",
        "cmp",
        "printNodesByLevel",
        "queue",
        "root",
        "queue",
        "offer",
        "root",
        "i",
        "number",
        "queue",
        "isEmpty",
        "aux",
        "queue",
        "remove",
        "log",
        "number",
        "log",
        "i",
        "log",
        "number",
        "log",
        "i",
        "aux",
        "queue",
        "offer",
        "aux",
        "left",
        "queue",
        "offer",
        "aux",
        "right",
        "aux",
        "toString",
        "number",
        "current",
        "current",
        "max",
        "getHeight",
        "current",
        "left",
        "getHeight",
        "current",
        "right",
        "key",
        "lookup",
        "key",
        "root",
        "key",
        "current",
        "current",
        "cmp",
        "compare",
        "key",
        "current",
        "key",
        "lookup",
        "key",
        "current",
        "left",
        "cmp",
        "compare",
        "key",
        "current",
        "key",
        "lookup",
        "key",
        "current",
        "right",
        "current",
        "modIndex",
        "key",
        "getLevel",
        "key",
        "root",
        "cmp",
        "key",
        "current",
        "level",
        "cmp",
        "current",
        "current",
        "key",
        "equals",
        "key",
        "level",
        "current",
        "right",
        "cmp",
        "compare",
        "key",
        "current",
        "key",
        "getLevel",
        "key",
        "current",
        "right",
        "level",
        "cmp",
        "current",
        "left",
        "cmp",
        "compare",
        "key",
        "current",
        "key",
        "getLevel",
        "key",
        "current",
        "left",
        "level",
        "cmp",
        "getLeavesCount",
        "root",
        "current",
        "current",
        "aux",
        "getLeavesCount",
        "current",
        "left",
        "getLeavesCount",
        "current",
        "right",
        "aux",
        "aux",
        "getMax",
        "root",
        "current",
        "current",
        "current",
        "right",
        "getMax",
        "current",
        "right",
        "current",
        "key",
        "node",
        "printDescendants",
        "root",
        "node",
        "current",
        "node",
        "descendant",
        "current",
        "descendant",
        "current",
        "equals",
        "node",
        "printDescendants",
        "current",
        "right",
        "node",
        "printDescendants",
        "current",
        "left",
        "node",
        "descendant",
        "current",
        "toString",
        "o",
        "o",
        "o",
        "bst",
        "o",
        "equals",
        "root",
        "bst",
        "root",
        "current",
        "other",
        "current",
        "other",
        "right",
        "left",
        "current",
        "key",
        "equals",
        "other",
        "key",
        "current",
        "height",
        "other",
        "height",
        "equals",
        "current",
        "right",
        "other",
        "right",
        "equals",
        "current",
        "left",
        "other",
        "left",
        "hashCode",
        "root",
        "current",
        "current",
        "current",
        "key",
        "hashCode",
        "hashCode",
        "current",
        "right",
        "hashCode",
        "current",
        "left",
        "size",
        "root",
        "current",
        "current",
        "size",
        "current",
        "right",
        "size",
        "current",
        "left",
        "root"
    ],
    "literals": [
        "\"There was no succesor inorder.\"",
        "\" LEVEL + 1 = \"",
        "\"    \"",
        "\"-EMPTY-    \""
    ],
    "variables": [
        "root",
        "cmp",
        "left",
        "right",
        "key",
        "aux",
        "aux",
        "node",
        "aux",
        "right",
        "left"
    ],
    "comments": [
        "calls recursive method.",
        "calls recursive method."
    ],
    "docstrings": [
        "*  @author L�r�nt Mikol�s",
        "ndexes of the BlockChain's blocks  that affected this node",
        "* Adds a new element to the AVLTree.\n     * This method serves as a wrapper.\n     * @param key element to add.\n     * @param blockIndex index of the BlockChain's block that has the add operation.\n     * @return boolean that is true if element is added or false otherwise",
        "* Adds a new element to the AVLTree recursively. Checks balance, updates height and\n     * and updates the indexes of the blocks that affected the node on the way back of the\n     * recursion.\n     * @param key element to add.\n     * @param current current element in the recursion.\n     * @param blockIndex index of the BlockChain's block that has the add operation.\n     * @return child node in recursion or null if key is already present in the AVLTree.",
        "f the leaf is reached, add a new node",
        "dvance through left child",
        "pdate current nodes height",
        "dvance through right child",
        "pdate current nodes height",
        "* Checks balance of the node.\n     * @param current Node that is verified for a correct factor of balance.\n     * @param blockIndex index of the BlockChain's block that has the add operation. It's used\n     *                   in case  a rotation is needed.\n     * @return a new node in case the current was affected by a rotation.",
        "hecks FB",
        "eft left",
        "eft right",
        "hecks FB",
        "ight right",
        "ight left",
        "* Performs a left rotation to the current node\n     * @param current node to be rotated.\n     * @param blockIndex index of the BlockChain's block that has the add operation. Every node\n     *                   affected by this rotation will update the indexes of the blocks that modified said node.\n     * @return the new root of the subtree.",
        "* Performs a right rotation to the current node\n     * @param current node to be rotated.\n     * @param blockIndex index of the BlockChain's block that has the add operation. Every node\n     *                   affected by this rotation will update the indexes of the blocks that modified said node.\n     * @return the new root of the subtree.",
        "* Calculates the height diference between left and right child. An Empty AVLTree is considered\n     * balanced.\n     * @param current Node to get balance from.\n     * @return FB.",
        "* Removes a key from the AVLTree.\n     *  A DataPair is used to allow for two return values for the remove method.\n     * @param key element to be removed from AVLTree.\n     * @param blockIndex index of the BlockChain's block that has the remove operation.\n     * @return true if removal was successful or false otherwise.",
        "* Removes a key from the AVLTree recursively. Checks balance, updates height and\n     * and updates the indexes of the blocks that affected the node on the way back of the\n     * recursion.\n     * This method serves a wrapper. A DataPair is used to allow for two return values for the remove method.\n     * @param key element to be removed from AVLTree.\n     * @param blockIndex index of the BlockChain's block that has the remove operation.\n     * @return a DataPair. The element1 of the DataPair indicates if the removal was successful or not with a\n     * boolean and element2 is the new child returned in the recursion.",
        "f the element was not found returns false (unsuccessfull removal)",
        "dvance through left child",
        "dvance through right child",
        "lement found",
        "f removal was successful, updates height and checks balance on the way back",
        "* Removes key from the AVLTree in different ways depending on the right and left child.\n     * @param node  to be removed from the AVLTree/\n     * @param blockIndex index of the BlockChain's block that has the remove operation.\n     * @return the new node or null that will take the place of the removed node.",
        "o childs",
        "as just left child",
        "as just right child",
        "earch for the successor inorder",
        "t may occur that the inorder successor is the right child",
        "* Removes the successor inorder from its current position and returns it recursively.  Checks balance, updates height and\n     * and updates the indexes of the blocks that affected the node on the way back of the\n     * recursion.\n     * @param current node in the recursion.\n     * @param blockIndex index of the BlockChain's block that has the remove operation.\n     * @return a DataPair in which the element1 is the new child in recursion and element2 is the succesor inorder.",
        "all recursion",
        "* Searches for key in the Tree and returns modIndex set.\n     * This method serves as a wrapper\n     * @param key to be searched in tree.\n     * @return a DatarPair in which element1 is a Boolean (true if key was found, false otherwise)\n     * and a Set of Integers with the indexes of the blocks that modified that node.",
        "* Searches for key in the Tree and returns modIndex set recursively.\n     * @param key to be searched in tree.\n     * @return a DatarPair in which element1 is a Boolean (true if key was found, false otherwise)\n     * and a Set of Integers with the indexes of the blocks that modified that node."
    ],
    "functions": [
        "AVLTree",
        "Node",
        "Node",
        "Node",
        "toString",
        "getHeight",
        "getLeft",
        "getRight",
        "getRightChildHeight",
        "getLeftChildHeight",
        "getRoot",
        "add",
        "add",
        "balance",
        "leftRotation",
        "rightRotation",
        "getBalance",
        "remove",
        "remove",
        "deleteKey",
        "eliminateMostLeft",
        "getInRange",
        "getInRange",
        "printNodesByLevel",
        "getHeight",
        "lookup",
        "lookup",
        "getLevel",
        "getLevel",
        "getLeavesCount",
        "getLeavesCount",
        "T",
        "getMax",
        "T",
        "getMax",
        "printDescendants",
        "printDescendants",
        "equals",
        "equals",
        "hashCode",
        "hashCode",
        "size",
        "size",
        "clearTree"
    ],
    "classes": [
        "AVLTree",
        "Node"
    ]
}