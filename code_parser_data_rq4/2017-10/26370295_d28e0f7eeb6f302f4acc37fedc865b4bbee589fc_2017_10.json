{
    "identifiers": [
        "json",
        "sys",
        "ROOT",
        "optparse",
        "LatinoAnalysis",
        "Gardener",
        "hwwtools",
        "hwwtools",
        "logging",
        "os",
        "path",
        "LatinoAnalysis",
        "Tools",
        "commonTools",
        "logging",
        "getLogger",
        "variables",
        "cuts",
        "samples",
        "outputDirDatacard",
        "variables",
        "cuts",
        "samples",
        "nuisances",
        "threshold",
        "variables",
        "samples",
        "cuts",
        "outputDirDatacard",
        "cutName",
        "_cuts",
        "cutName",
        "cuts",
        "cutName",
        "variableName",
        "variable",
        "_variables",
        "iteritems",
        "variableName",
        "variable",
        "cutName",
        "_outputDirDatacard",
        "cutName",
        "variableName",
        "tagNameToAppearInDatacard",
        "_outputDirDatacard",
        "cutName",
        "variableName",
        "tagNameToAppearInDatacard",
        "old_root_file_name",
        "new_root_file_name",
        "os",
        "system",
        "new_root_file_name",
        "old_root_file_name",
        "ROOT",
        "TFile",
        "Open",
        "old_root_file_name",
        "ROOT",
        "TFile",
        "Open",
        "new_root_file_name",
        "k",
        "rootFile",
        "GetListOfKeys",
        "k",
        "ReadObj",
        "h",
        "GetName",
        "re",
        "search",
        "histoName",
        "match",
        "h",
        "GetName",
        "h",
        "sampleName",
        "sample",
        "_samples",
        "iteritems",
        "nuisanceName",
        "nuisance",
        "nuisances",
        "iteritems",
        "sampleName",
        "nuisance",
        "sampleName",
        "nuisance",
        "sampleName",
        "nameTempUp",
        "histograms",
        "keys",
        "nameTempDown",
        "histograms",
        "keys",
        "histograms",
        "nameTemp",
        "histograms",
        "nameTempUp",
        "histograms",
        "nameTempDown",
        "ibin",
        "histo_nominal",
        "GetNbinsX",
        "histo_nominal",
        "GetBinError",
        "ibin",
        "histo_up",
        "GetBinError",
        "ibin",
        "histo_down",
        "GetBinError",
        "ibin",
        "nominal_uncertainty",
        "abs",
        "var_up_uncertainty",
        "nominal_uncertainty",
        "max_change_stat_uncertainty",
        "histo_up",
        "SetBinContent",
        "ibin",
        "histo_nominal",
        "GetBinContent",
        "ibin",
        "nominal_uncertainty",
        "abs",
        "var_down_uncertainty",
        "nominal_uncertainty",
        "max_change_stat_uncertainty",
        "histo_down",
        "SetBinContent",
        "ibin",
        "histo_nominal",
        "GetBinContent",
        "ibin",
        "histo_up",
        "Write",
        "histo_down",
        "Write",
        "sampleName",
        "sampleName",
        "histograms",
        "nameTemp",
        "histo_nominal",
        "Write",
        "histograms",
        "nameTemp",
        "histo_nominal",
        "Write",
        "optparse",
        "OptionParser",
        "usage",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "parser",
        "add_option",
        "dest",
        "help",
        "action",
        "callback",
        "list_maker",
        "hwwtools",
        "addOptions",
        "parser",
        "hwwtools",
        "loadOptDefaults",
        "parser",
        "parser",
        "parse_args",
        "opt",
        "pycfg",
        "opt",
        "threshold",
        "opt",
        "nameFileConfiguration",
        "opt",
        "outputDirDatacard",
        "opt",
        "nuisancesFile",
        "opt",
        "cardList",
        "ChainSawFactory",
        "os",
        "path",
        "exists",
        "opt",
        "samplesFile",
        "open",
        "opt",
        "samplesFile",
        "exec",
        "handle",
        "handle",
        "close",
        "os",
        "path",
        "exists",
        "opt",
        "variablesFile",
        "open",
        "opt",
        "variablesFile",
        "exec",
        "handle",
        "handle",
        "close",
        "os",
        "path",
        "exists",
        "opt",
        "cutsFile",
        "open",
        "opt",
        "cutsFile",
        "exec",
        "handle",
        "handle",
        "close",
        "len",
        "opt",
        "cardList",
        "iCut",
        "opt",
        "cardList",
        "iOptim",
        "optim",
        "newCuts",
        "append",
        "iCut",
        "iOptim",
        "newCuts",
        "opt",
        "cardList",
        "iCut",
        "cuts",
        "iCut",
        "opt",
        "cardList",
        "cut2del",
        "append",
        "iCut",
        "iCut",
        "cut2del",
        "cuts",
        "iCut",
        "opt",
        "nuisancesFile",
        "os",
        "path",
        "exists",
        "opt",
        "nuisancesFile",
        "open",
        "opt",
        "nuisancesFile",
        "exec",
        "handle",
        "handle",
        "close",
        "factory",
        "mkChainSaw",
        "opt",
        "outputDirDatacard",
        "variables",
        "cuts",
        "samples",
        "nuisances",
        "opt",
        "threshold"
    ],
    "literals": [
        "'ChainSawFactory'",
        "\"cut = \"",
        "\" :: \"",
        "\"variable = \"",
        "\" :: \"",
        "\"/\"",
        "\"/\"",
        "\"/shapes/\"",
        "\"old_histos_\"",
        "\".root\"",
        "\"/\"",
        "\"/\"",
        "\"/shapes/\"",
        "\"histos_\"",
        "\".root\"",
        "\" old_root_file_name = \"",
        "\" new_root_file_name = \"",
        "\"cp \"",
        "\"   \"",
        "\"READ\"",
        "\"RECREATE\"",
        "\"histo_\"",
        "'histo_'",
        "'_CMS_'",
        "'name'",
        "'Up'",
        "'histo_'",
        "'_CMS_'",
        "'name'",
        "'Down'",
        "'histo_'",
        "\"DATA\"",
        "\"histo_\"",
        "\"histo_Data\"",
        "'__main__'",
        "'usage: %prog [options]'",
        "\"-i\"",
        "\"--inputConfiguration\"",
        "\"nameFileConfiguration\"",
        "\"name configuration file with nuisances to remove\"",
        "'blabla.py'",
        "\"-t\"",
        "\"--threshold\"",
        "\"threshold\"",
        "\"threshold\"",
        "'float'",
        "'--outputDirDatacard'",
        "'outputDirDatacard'",
        "'output directory'",
        "'./'",
        "'--nuisancesFile'",
        "'nuisancesFile'",
        "'file with nuisances configurations'",
        "'--cardList'",
        "\"cardList\"",
        "\"List of cuts to produce datacards\"",
        "'string'",
        "'callback'",
        "'cardList'",
        "','",
        "\"opt.pycfg               = \"",
        "\"opt.threshold           = \"",
        "\"opt.inputConfiguration  = \"",
        "\"opt.outputDirDatacard   = \"",
        "\"opt.nuisancesFile       = \"",
        "\"opt.cardList            = \"",
        "'r'",
        "'r'",
        "'r'",
        "'_'",
        "\"No optim dictionary\"",
        "\" Please provide the nuisances structure if you want to add nuisances \"",
        "'r'"
    ],
    "variables": [
        "_logger",
        "variables",
        "_variables",
        "cuts",
        "_cuts",
        "samples",
        "_samples",
        "_variables",
        "_samples",
        "_cuts",
        "_outputDirDatacard",
        "tagNameToAppearInDatacard",
        "old_root_file_name",
        "new_root_file_name",
        "rootFile",
        "rootFileNew",
        "histograms",
        "h",
        "histoName",
        "match",
        "histograms",
        "nameTempUp",
        "nameTempDown",
        "nameTemp",
        "histo_nominal",
        "histo_up",
        "histo_down",
        "max_change_stat_uncertainty",
        "nominal_uncertainty",
        "var_up_uncertainty",
        "var_down_uncertainty",
        "nameTemp",
        "histo_nominal",
        "nameTemp",
        "histo_nominal",
        "usage",
        "parser",
        "opt",
        "args",
        "factory",
        "samples",
        "handle",
        "variables",
        "handle",
        "cuts",
        "handle",
        "newCuts",
        "opt",
        "cardList",
        "cut2del",
        "nuisances",
        "handle"
    ],
    "comments": [
        "!/usr/bin/env python",
        "",
        "___|  |            _)          ___|",
        "|      __ \\    _` |  |  __ \\  \\___ \\    _` | \\ \\  \\   /",
        "|      | | |  (   |  |  |   |       |  (   |  \\ \\  \\ /",
        "\\____| _| |_| \\__,_| _| _|  _| _____/  \\__,_|   \\_/\\_/",
        "|    |          |     _)                    _|                                _)",
        "__|  __ `__ \\    _ \\    _ \\   __|  __ \\       __ \\   |  __ \\    __|      |     _ \\    __|      __ \\   |   |  |   __|   _` |  __ \\    __|   _ \\   __|",
        "\\__ \\  |   |   |  (   |  (   |  |    | | |      |   |  |  |   | \\__ \\      __|  (   |  |         |   |  |   |  | \\__ \\  (   |  |   |  (      __/ \\__ \\",
        "____/ _|  _|  _| \\___/  \\___/  \\__| _| |_|     _.__/  _| _|  _| ____/     _|   \\___/  _|        _|  _| \\__,_| _| ____/ \\__,_| _|  _| \\___| \\___| ____/",
        "",
        "",
        "",
        "",
        "Common Tools & batch",
        "---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----",
        "_____________________________________________________________________________",
        "_____________________________________________________________________________",
        "a datacard for each \"cut\" and each \"variable\" will be produced, in separate sub-folders, names after \"cut/variable\"",
        "_____________________________________________________________________________",
        "loop over cuts",
        "loop over variables",
        "copy the default root file for bookkeeping",
        "get the histograms",
        "only 1d histograms supported",
        "loop over samples",
        "loop over nuisances",
        "print \" nameTempUp = \", nameTempUp",
        "maximum change in statistical uncertainty",
        "print \" correct : \", histo_nominal.GetBinContent(ibin+1), \" ---> var_up_uncertainty =\", var_up_uncertainty, \"  ; nominal_uncertainty = \", nominal_uncertainty, \" => \", abs((var_up_uncertainty / nominal_uncertainty)-1),",
        "print \"    ---> \", histo_up.GetBinContent(ibin+1),",
        "print \"    ---> \", histo_up.GetBinContent(ibin+1),",
        "print \"    --> \", str(sampleName) , \"   \",  (nuisance['name']),",
        "print \" ibin = \", ibin",
        "finally save the nominals",
        "nuisancesToPrune = {}",
        "if os.path.exists(nameFileConfiguration):",
        "handle = open(nameFileConfiguration,'r')",
        "exec(handle)",
        "handle.close()",
        "print \"nuisancesToPrune = \", nuisancesToPrune",
        "remove duplicates in \"sampleName\"",
        "used in scaling histograms in case of \"matching\"",
        "and in case the same sample name is used in several \"bin\"",
        "NB: the order is not preserved, but who cares!",
        "reducedsampleName = list(set(sampleName))",
        "modify sample rate in root file!",
        "for rootFileBin in rootFiles:",
        "print \"rootFile[\", rootFileBin, \"] = \",rootFiles[rootFileBin]",
        "check if root file is present (the name must end with .root)",
        "matchfile = re.search(\".root\", rootFiles[rootFileBin])",
        "if not matchfile:",
        "continue",
        "rootFile = ROOT.TFile.Open(str(thepath)+\"/\"+str(rootFiles[rootFileBin]))",
        "copy the default root file for bookkeeping",
        "old_root_file_name = str(thepath)+\"/\"+\"old_\"+str(rootFiles[rootFileBin])",
        "new_root_file_name = str(thepath)+\"/\"+str(rootFiles[rootFileBin])",
        "print \" old_root_file_name = \", old_root_file_name",
        "print \" new_root_file_name = \", new_root_file_name",
        "os.system (\"cp \" + new_root_file_name + \"   \" + old_root_file_name )",
        "rootFile    = ROOT.TFile.Open( old_root_file_name, \"READ\")",
        "rootFileNew = ROOT.TFile.Open( new_root_file_name, \"RECREATE\")",
        "get the histograms",
        "histograms = {}",
        "for k in rootFile.GetListOfKeys():",
        "h = k.ReadObj()",
        "only 1d histograms supported",
        "histoName = h.GetName()",
        "match = re.search(\"histo_\", histoName)",
        "if not match:",
        "continue",
        "histograms[h.GetName()] = h",
        "print \" histograms = \", histograms",
        "nuisance_to_be_removed = []",
        "nuisance_to_be_removed_sample_dependent = {}",
        "for nuisance in systematicsName :",
        "for  hr_list_nuisances_to_test, nuisance_to_test in nuisancesToPrune.iteritems() :",
        "print \" hr_list_nuisances_to_test = \", hr_list_nuisances_to_test, \" -> \", nuisance_to_test",
        "matchNuisance = fnmatch.fnmatch(str(nuisance), nuisance_to_test)",
        "if matchNuisance :",
        "print \"matchNuisance[\", nuisance_to_test, \"] -> \", nuisance",
        "relative variation",
        "nuisance_to_be_removed_samples = {}",
        "for sample in reducedsampleName:",
        "nameTempUp   = \"histo_\"+str(sample)+\"_\"+str(nuisance)+\"Up\"",
        "nameTempDown = \"histo_\"+str(sample)+\"_\"+str(nuisance)+\"Down\"",
        "nameTemp     = \"histo_\"+str(sample)",
        "if nameTempUp in histograms.keys() and  nameTempDown in histograms.keys() :",
        "histo_nominal = histograms[nameTemp]",
        "histo_up   = histograms[nameTempUp]",
        "histo_down = histograms[nameTempDown]",
        "maximum change in statistical uncertainty",
        "max_change_stat_uncertainty = 0.4",
        "for ibin in range( histo_nominal.GetNbinsX() ) :",
        "nominal_uncertainty  = histo_nominal.GetBinError(ibin+1)",
        "var_up_uncertainty   = histo_up.GetBinError(ibin+1)",
        "var_down_uncertainty = histo_down.GetBinError(ibin+1)",
        "if (nominal_uncertainty != 0) and ( abs((var_up_uncertainty / nominal_uncertainty)-1) > max_change_stat_uncertainty ) :",
        "histo_up.SetBinContent (ibin+1, histo_nominal.GetBinContent(ibin+1))",
        "if (nominal_uncertainty != 0) and ( abs((var_down_uncertainty / nominal_uncertainty)-1) > max_change_stat_uncertainty ) :",
        "histo_down.SetBinContent (ibin+1, histo_nominal.GetBinContent(ibin+1))",
        "histo_up.Write()",
        "histo_down.Write()",
        "else :",
        "for sample in reducedsampleName:",
        "nameTempUp   = \"histo_\"+str(sample)+\"_\"+str(nuisance)+\"Up\"",
        "nameTempDown = \"histo_\"+str(sample)+\"_\"+str(nuisance)+\"Down\"",
        "if nameTempUp in histograms.keys() and  nameTempDown in histograms.keys() :",
        "histo_up   = histograms[nameTempUp]",
        "histo_down = histograms[nameTempDown]",
        "histo_up.Write()",
        "histo_down.Write()",
        "finally save the nominals",
        "for sample in reducedsampleName:",
        "nameTemp     = \"histo_\"+str(sample)",
        "histo_nominal = histograms[nameTemp]",
        "histo_nominal.Write()",
        "",
        "read default parsing options as well",
        "~~~~",
        "~~~~"
    ],
    "docstrings": [
        "'''\n--------------------------------------------------------------------------------------------------\n\n            ___|  |            _)          ___|                            \n           |      __ \\    _` |  |  __ \\  \\___ \\    _` | \\ \\  \\   /         \n           |      | | |  (   |  |  |   |       |  (   |  \\ \\  \\ /          \n          \\____| _| |_| \\__,_| _| _|  _| _____/  \\__,_|   \\_/\\_/           \n\n--------------------------------------------------------------------------------------------------\n'''"
    ],
    "functions": [
        "mkChainSaw"
    ],
    "classes": [
        "ChainSawFactory"
    ]
}