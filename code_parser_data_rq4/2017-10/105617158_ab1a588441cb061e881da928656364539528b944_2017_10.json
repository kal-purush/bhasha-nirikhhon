{
    "identifiers": [
        "random",
        "randint",
        "numOfArms",
        "numOfArms",
        "i",
        "numOfArms",
        "append",
        "randint",
        "action",
        "action",
        "randint",
        "rewardProb",
        "numOfArms",
        "action",
        "max",
        "key",
        "itemgetter",
        "opt_action",
        "action",
        "probDistro",
        "len",
        "probDistro",
        "numOfOutcomes",
        "probDistro",
        "i",
        "numOfOutcomes",
        "range_var",
        "i",
        "probDistro",
        "i",
        "randint",
        "i",
        "numOfOutcomes",
        "x",
        "range_var",
        "i",
        "i",
        "numOfTests",
        "numOfTests",
        "Environment",
        "Agent",
        "k",
        "Agent",
        "k",
        "Agent",
        "k",
        "i",
        "numOfTests",
        "randint",
        "rand",
        "ep_val",
        "max",
        "list_action_val",
        "key",
        "itemgetter",
        "randint",
        "list_action_val",
        "action",
        "env",
        "interact",
        "action",
        "list_numb_action",
        "action",
        "round",
        "list_action_val",
        "action",
        "list_numb_action",
        "action",
        "result",
        "list_action_val",
        "action",
        "total_reward",
        "result",
        "env",
        "isOptimalAction",
        "action",
        "opt_action_chosen",
        "i",
        "opt_action_chosen",
        "total_reward",
        "i",
        "round",
        "Agent",
        "k",
        "Agent",
        "k",
        "i",
        "numOfTests",
        "distro_select",
        "list_action_val",
        "env",
        "interact",
        "action",
        "result",
        "list_action_val",
        "action",
        "alpha",
        "list_action_val",
        "action",
        "j",
        "len",
        "list_action_val",
        "j",
        "action",
        "alpha",
        "list_action_val",
        "j",
        "beta",
        "list_action_val",
        "action",
        "j",
        "len",
        "list_action_val",
        "j",
        "action",
        "beta",
        "Agent",
        "k",
        "beta",
        "list_action_val",
        "j",
        "total_reward",
        "result",
        "env",
        "isOptimalAction",
        "action",
        "opt_action_chosen",
        "i",
        "opt_action_chosen",
        "total_reward",
        "i",
        "Agent",
        "a",
        "run_greedy",
        "a",
        "run_learning_automata"
    ],
    "literals": [
        "\"Optimal Action Chosen: \"",
        "\", Avg Reward: \"",
        "\"Optimal Action Chosen: \"",
        "\", Avg Reward: \"",
        "\"The epsilon-greedy algorithm\"",
        "\"\"",
        "\"The linear reward-inaction and linear reward-penalty algorithm\""
    ],
    "variables": [
        "numOfArms",
        "rewardProb",
        "opt_action",
        "opt_act_val",
        "numOfOutcomes",
        "range_var",
        "range_var",
        "range_var",
        "i",
        "x",
        "k",
        "numOfTests",
        "env",
        "list_action_val",
        "list_numb_action",
        "ep_val",
        "opt_action_chosen",
        "total_reward",
        "rand",
        "action",
        "action_value",
        "action",
        "action_value",
        "result",
        "list_action_val",
        "action",
        "opt_action_chosen",
        "list_action_val",
        "alpha",
        "beta",
        "opt_action_chosen",
        "total_reward",
        "action",
        "result",
        "list_action_val",
        "action",
        "list_action_val",
        "j",
        "list_action_val",
        "action",
        "list_action_val",
        "j",
        "opt_action_chosen",
        "a"
    ],
    "comments": [
        "make a list of probabilities",
        "find the max prob",
        "number of arms",
        "number of times optimal action was chosen. For output",
        "Run the ep-greedy algorithm",
        "pick the max option",
        "random action",
        "update the number of times this action is performed",
        "update the probability",
        "amount of times award received. For output",
        "print the number of times optimal action was chosen and avg reward collected over time",
        "print self.env.get_list() , list_action_val, action, result",
        "make a list of probabilities that add to 0",
        "number of times optimal action was chosen. For output",
        "pick optimal option",
        "action, action_value = max(enumerate(list_action_val), key=operator.itemgetter(1))",
        "R-I algorithm",
        "update probability of the action chosen",
        "update probability of other action",
        "R-P algorithm",
        "amount of times award received. For output",
        "print the number of times optimal action was chosen and avg reward collected over time",
        "print self.env.get_list(), list_action_val, action, result"
    ],
    "docstrings": [
        "\"\"\"The k arm bandit\"\"\"",
        "\"\"\"Allows an agent to interact with the environment by selecting an action\"\"\""
    ],
    "functions": [
        "interact",
        "get_num_arms",
        "get_list",
        "isOptimalAction",
        "distro_select",
        "run_greedy",
        "run_learning_automata"
    ],
    "classes": [
        "Environment",
        "Agent"
    ]
}