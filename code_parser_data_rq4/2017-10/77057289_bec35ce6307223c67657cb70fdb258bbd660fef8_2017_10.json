{
    "identifiers": [
        "org",
        "thingsboard",
        "samples",
        "spark",
        "com",
        "fasterxml",
        "jackson",
        "core",
        "JsonProcessingException",
        "com",
        "fasterxml",
        "jackson",
        "databind",
        "JsonNode",
        "com",
        "fasterxml",
        "jackson",
        "databind",
        "ObjectMapper",
        "com",
        "fasterxml",
        "jackson",
        "databind",
        "node",
        "ObjectNode",
        "lombok",
        "slf4j",
        "Slf4j",
        "org",
        "apache",
        "kafka",
        "clients",
        "consumer",
        "ConsumerRecord",
        "org",
        "apache",
        "kafka",
        "common",
        "serialization",
        "StringDeserializer",
        "org",
        "apache",
        "spark",
        "SparkConf",
        "org",
        "apache",
        "spark",
        "api",
        "java",
        "JavaPairRDD",
        "org",
        "apache",
        "spark",
        "api",
        "java",
        "JavaRDD",
        "org",
        "apache",
        "spark",
        "api",
        "java",
        "org",
        "apache",
        "spark",
        "streaming",
        "Duration",
        "org",
        "apache",
        "spark",
        "streaming",
        "api",
        "java",
        "JavaInputDStream",
        "org",
        "apache",
        "spark",
        "streaming",
        "api",
        "java",
        "JavaStreamingContext",
        "org",
        "apache",
        "spark",
        "streaming",
        "kafka010",
        "ConsumerStrategies",
        "org",
        "apache",
        "spark",
        "streaming",
        "kafka010",
        "KafkaUtils",
        "org",
        "apache",
        "spark",
        "streaming",
        "kafka010",
        "LocationStrategies",
        "org",
        "eclipse",
        "paho",
        "client",
        "mqttv3",
        "org",
        "springframework",
        "http",
        "HttpEntity",
        "org",
        "springframework",
        "http",
        "HttpHeaders",
        "org",
        "springframework",
        "http",
        "ResponseEntity",
        "org",
        "springframework",
        "web",
        "client",
        "RestTemplate",
        "scala",
        "Tuple2",
        "java",
        "util",
        "KAFKA_BROKER_LIST",
        "THINGSBOARD_REST_ENDPOINT",
        "USERNAME",
        "PASSWORD",
        "ASSET_ID",
        "ASSET_PUBLISH_TELEMETRY_ENDPOINT",
        "THINGSBOARD_REST_ENDPOINT",
        "ASSET_ID",
        "STREAM_WINDOW_MILLISECONDS",
        "TOPICS",
        "Arrays",
        "asList",
        "APP_NAME",
        "kafkaParams",
        "kafkaParams",
        "put",
        "KAFKA_BROKER_LIST",
        "kafkaParams",
        "put",
        "kafkaParams",
        "put",
        "kafkaParams",
        "put",
        "kafkaParams",
        "put",
        "kafkaParams",
        "put",
        "kafkaParams",
        "args",
        "start",
        "Slf4j",
        "restTemplate",
        "token",
        "restTemplate",
        "conf",
        "setAppName",
        "APP_NAME",
        "setMaster",
        "ssc",
        "conf",
        "STREAM_WINDOW_MILLISECONDS",
        "loginRestTemplate",
        "stream",
        "KafkaUtils",
        "createDirectStream",
        "ssc",
        "LocationStrategies",
        "PreferConsistent",
        "ConsumerStrategies",
        "Subscribe",
        "TOPICS",
        "getKafkaParams",
        "stream",
        "foreachRDD",
        "rdd",
        "windRdd",
        "rdd",
        "windByZoneRdd",
        "windRdd",
        "mapToPair",
        "d",
        "d",
        "getGeoZone",
        "d",
        "getWindSpeed",
        "windByZoneRdd",
        "windByZoneRdd",
        "reduceByKey",
        "a",
        "b",
        "AvgWindSpeedData",
        "sum",
        "a",
        "b",
        "aggData",
        "windByZoneRdd",
        "t",
        "t",
        "_1",
        "t",
        "_2",
        "getAvgValue",
        "collect",
        "publishTelemetryToThingsBoardAsset",
        "aggData",
        "ssc",
        "start",
        "ssc",
        "awaitTermination",
        "loginRequest",
        "loginRequest",
        "put",
        "USERNAME",
        "loginRequest",
        "put",
        "PASSWORD",
        "tokenInfo",
        "restTemplate",
        "postForEntity",
        "THINGSBOARD_REST_ENDPOINT",
        "loginRequest",
        "token",
        "tokenInfo",
        "getBody",
        "get",
        "asText",
        "aggData",
        "requestHeaders",
        "requestHeaders",
        "add",
        "token",
        "aggData",
        "isEmpty",
        "d",
        "aggData",
        "httpEntity",
        "d",
        "requestHeaders",
        "result",
        "restTemplate",
        "postForEntity",
        "ASSET_PUBLISH_TELEMETRY_ENDPOINT",
        "httpEntity",
        "Override",
        "asyncActionToken",
        "log",
        "info",
        "Override",
        "asyncActionToken",
        "exception",
        "log",
        "error",
        "exception",
        "mapper",
        "Override",
        "record",
        "mapper",
        "readValue",
        "record",
        "value",
        "geoZone",
        "mapper",
        "json",
        "mapper",
        "createObjectNode",
        "json",
        "put",
        "geoZone",
        "mapper",
        "writeValueAsString",
        "json",
        "aggData",
        "mapper",
        "json",
        "mapper",
        "createObjectNode",
        "ts",
        "currentTimeMillis",
        "aggData",
        "forEach",
        "v",
        "zoneNode",
        "json",
        "putArray",
        "v",
        "getGeoZone",
        "addObject",
        "zoneNode",
        "put",
        "ts",
        "values",
        "zoneNode",
        "putObject",
        "values",
        "put",
        "v",
        "getWindSpeed",
        "mapper",
        "writeValueAsString",
        "json"
    ],
    "literals": [
        "\"localhost:9092\"",
        "\"http://localhost:8080\"",
        "\"tenant@thingsboard.org\"",
        "\"tenant\"",
        "\"ae19d9e0-b73c-11e7-96ba-31d2955bf1fb\"",
        "\"/api/plugins/telemetry/ASSET/\"",
        "\"/timeseries/values\"",
        "\"weather-stations-data\"",
        "\"Kafka Spark Streaming App\"",
        "\"bootstrap.servers\"",
        "\"key.deserializer\"",
        "\"value.deserializer\"",
        "\"group.id\"",
        "\"DEFAULT_GROUP_ID\"",
        "\"auto.offset.reset\"",
        "\"latest\"",
        "\"enable.auto.commit\"",
        "\"local\"",
        "\"username\"",
        "\"password\"",
        "\"/api/auth/login\"",
        "\"token\"",
        "\"X-Authorization\"",
        "\"Bearer \"",
        "\"Telemetry data updated!\"",
        "\"Telemetry data update failed!\"",
        "\"device\"",
        "\"ts\"",
        "\"values\"",
        "\"windSpeed\""
    ],
    "variables": [
        "restTemplate",
        "token"
    ],
    "comments": [
        "Kafka brokers URL for Spark Streaming to connect and fetched messages from.",
        "URL of ThingsBoard REST endpoint",
        "ThingsBoard User login",
        "ThingsBoard User password",
        "Asset ID to post the aggregated data inot",
        "Asset Publish Telemetry Endpoint",
        "Time interval in milliseconds of Spark Streaming Job, 10 seconds by default.",
        "10 seconds",
        "Kafka telemetry topic to subscribe to. This should match to the topic in the rule action.",
        "The application name",
        "Misc Kafka client properties",
        "Map incoming JSON to WindSpeedData objects",
        "Map WindSpeedData objects by GeoZone",
        "Reduce all data volume by GeoZone key",
        "Map <GeoZone, AvgWindSpeedData> back to WindSpeedData",
        "Push aggregated data to ThingsBoard using Gateway MQTT API"
    ],
    "docstrings": [
        "* Copyright Â© 2016 The Thingsboard Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License."
    ],
    "functions": [
        "getKafkaParams",
        "main",
        "StreamRunner",
        "start",
        "loginRestTemplate",
        "publishTelemetryToThingsBoardAsset",
        "IMqttActionListener",
        "getCallback",
        "onSuccess",
        "onFailure",
        "WindSpeedData",
        "call",
        "toConnectJson",
        "toDataJson"
    ],
    "classes": [
        "SparkKafkaAssetStreamingDemoMain",
        "StreamRunner",
        "WeatherStationDataMapper"
    ]
}