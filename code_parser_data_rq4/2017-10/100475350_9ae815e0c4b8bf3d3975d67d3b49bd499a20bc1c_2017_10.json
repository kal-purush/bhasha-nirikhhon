{
    "identifiers": [
        "numpy",
        "np",
        "num",
        "np",
        "exp",
        "num",
        "num",
        "num",
        "num",
        "np",
        "array",
        "np",
        "array",
        "np",
        "random",
        "seed",
        "num_layers",
        "neurons",
        "neurons",
        "num_layers",
        "index",
        "num_layers",
        "weights",
        "append",
        "np",
        "random",
        "random",
        "neurons",
        "index",
        "index",
        "training_round",
        "epochs",
        "sigmoid",
        "np",
        "dot",
        "inputs",
        "weights",
        "sigmoid",
        "np",
        "dot",
        "predicted_1",
        "weights",
        "training_round",
        "format",
        "training_round",
        "predicted_2",
        "outputs",
        "predicted_2",
        "error_2",
        "sigmoid_derivative",
        "predicted_2",
        "delta_2",
        "dot",
        "weights",
        "T",
        "error_1",
        "sigmoid_derivative",
        "predicted_1",
        "weights",
        "predicted_1",
        "T",
        "dot",
        "delta_2",
        "weights",
        "inputs",
        "T",
        "dot",
        "delta_1",
        "predicted_2",
        "main"
    ],
    "literals": [
        "'Predictions after {} training runs:'",
        "'Output after training:'",
        "'__main__'"
    ],
    "variables": [
        "inputs",
        "outputs",
        "epochs",
        "weights",
        "predicted_1",
        "predicted_2",
        "error_2",
        "delta_2",
        "error_1",
        "delta_1"
    ],
    "comments": [
        "Number if iterations for training.",
        "EPOCHS = 50000",
        "Inputs with a bias, always being 1.",
        "Seed for deterministic behaviour, mainly for debugging.",
        "Assert last layer has 1 neuron and len(neurons) == num_layers + 1.",
        "This is gonna change later as the o/p doesn't stay 1 bit later.",
        "Weights for each layer. Random (-1, 1) for now.",
        "nth weight means weights fron nth to (n+1)th row in network.",
        "for index, layer_num in enumerate(range(num_layers)):",
        "Make this into a multilaer network later.",
        "O/p of layer 1.",
        "Print predictions.",
        "Error computation.",
        "Update weights."
    ],
    "docstrings": [
        "\"\"\"The main function, with customizable network.\n\n  Args:\n    num_layers: Number of layers, excluding the o/p layer for now.\n    neurons: Array of number of neurons in each layer.\n  \"\"\""
    ],
    "functions": [
        "sigmoid",
        "sigmoid_derivative",
        "main"
    ],
    "classes": []
}