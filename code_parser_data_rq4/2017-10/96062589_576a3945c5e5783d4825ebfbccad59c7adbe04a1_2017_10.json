{
    "identifiers": [
        "ava",
        "WorldOverview",
        "setFetch",
        "login",
        "getWorlds",
        "Api",
        "readFile",
        "tick",
        "r",
        "setImmediate",
        "r",
        "getFile",
        "path",
        "res",
        "rej",
        "readFile",
        "path",
        "err",
        "data",
        "err",
        "rej",
        "err",
        "res",
        "data",
        "err",
        "result",
        "body",
        "init",
        "init",
        "init",
        "body",
        "body",
        "body",
        "body",
        "MockResponse",
        "body",
        "requests",
        "body",
        "requests",
        "requests",
        "makeResponse",
        "body",
        "input",
        "init",
        "input",
        "resolve",
        "reject",
        "requests",
        "input",
        "ava",
        "ava",
        "baseTest",
        "t",
        "makeMockFetch",
        "setFetch",
        "mockFetch",
        "t",
        "requests",
        "baseTest",
        "test",
        "t",
        "login",
        "respondToLastRequest",
        "t",
        "prom",
        "t",
        "err",
        "t",
        "err",
        "test",
        "t",
        "login",
        "respondToLastRequest",
        "t",
        "tick",
        "t",
        "t",
        "test",
        "t",
        "login",
        "respondToLastRequest",
        "t",
        "tick",
        "getFile",
        "respondToLastRequest",
        "t",
        "html",
        "tick",
        "prom",
        "t",
        "err",
        "t",
        "err",
        "test",
        "t",
        "login",
        "respondToLastRequest",
        "t",
        "tick",
        "getFile",
        "respondToLastRequest",
        "t",
        "html",
        "prom",
        "t",
        "test",
        "t",
        "getWorlds",
        "respondToLastRequest",
        "t",
        "getFile",
        "prom",
        "t",
        "worlds",
        "test",
        "t",
        "Api",
        "api",
        "t",
        "t",
        "respondToLastRequest",
        "t",
        "getFile",
        "prom",
        "t",
        "lists",
        "test",
        "t",
        "Api",
        "api",
        "respondToLastRequest",
        "t",
        "getFile",
        "prom",
        "t",
        "lists",
        "test",
        "t",
        "Api",
        "api",
        "t",
        "t",
        "t",
        "t",
        "test",
        "t",
        "Api",
        "api",
        "t",
        "t",
        "respondToLastRequest",
        "t",
        "getFile",
        "prom",
        "t",
        "overview",
        "test",
        "t",
        "Api",
        "api",
        "respondToLastRequest",
        "t",
        "getFile",
        "prom",
        "t",
        "overview",
        "test",
        "t",
        "Api",
        "api",
        "t",
        "t",
        "respondToLastRequest",
        "t",
        "prom",
        "t",
        "logs",
        "test",
        "t",
        "Api",
        "api",
        "t",
        "t",
        "t",
        "t",
        "respondToLastRequest",
        "t",
        "response",
        "prom",
        "t",
        "result",
        "response",
        "response",
        "test",
        "t",
        "Api",
        "api",
        "respondToLastRequest",
        "t",
        "prom",
        "t",
        "result",
        "test",
        "t",
        "Api",
        "api",
        "t",
        "prom",
        "t",
        "result",
        "test",
        "t",
        "Api",
        "api",
        "t",
        "t",
        "t",
        "t",
        "respondToLastRequest",
        "t",
        "prom",
        "test",
        "t",
        "Api",
        "api",
        "respondToLastRequest",
        "t",
        "prom",
        "t",
        "t",
        "test",
        "t",
        "Api",
        "api",
        "t",
        "t",
        "respondToLastRequest",
        "t",
        "prom",
        "test",
        "t",
        "Api",
        "api",
        "t",
        "t",
        "respondToLastRequest",
        "t",
        "prom",
        "test",
        "t",
        "Api",
        "api",
        "t",
        "t",
        "respondToLastRequest",
        "t",
        "prom"
    ],
    "literals": [
        "'ava'",
        "'./api'",
        "'./cloud'",
        "'fs'",
        "string",
        "'utf-8'",
        "string",
        "string",
        "'cors'",
        "string",
        "''",
        "'OK'",
        "'Method not implemented.'",
        "'Method not implemented.'",
        "'Method not implemented.'",
        "string",
        "'Method not implemented.'",
        "'string'",
        "'string'",
        "'input must be a string'",
        "'http://portal.theblockheads.net'",
        "''",
        "login should throw if the seed request does not return correctly",
        "'user'",
        "'pass'",
        "'error'",
        "'Bad API response.'",
        "login should hash the password with the response seeds",
        "'user'",
        "'pass'",
        "'ok'",
        "'salt1'",
        "'salt2'",
        "'seed'",
        "seed=seed&password=271d0274ba2611272725b7bd71d190255e5e04934e0baf7163c6b14bcc218b48cec1f17268f24d0b&username=USER",
        "login should throw if the password is invalid",
        "'user'",
        "'pass'",
        "'ok'",
        "'salt1'",
        "'salt2'",
        "'seed'",
        "'./test_data/invalid_password.html'",
        "'Invalid username or password.'",
        "login should resolve if the password is valid",
        "'user'",
        "'pass'",
        "'ok'",
        "'salt1'",
        "'salt2'",
        "'seed'",
        "'./test_data/worlds.html'",
        "getWorlds should return an array of world names and ids",
        "'./test_data/worlds.html'",
        "'AIRSTEDDING'",
        "'123'",
        "'DEMO'",
        "'11'",
        "'BIB\\'S CRIB'",
        "'10'",
        "getLists should return the world lists",
        "'AIRSTEDDING'",
        "'123'",
        "/worlds/lists/123",
        "'./test_data/lists.html'",
        "'%#&!\\'='",
        "'PERSON'",
        "'BIBLIOFILE'",
        "'-bib_phile-2'",
        "'ME: TEST :'",
        "'-bib_phile-2'",
        "'0x159'",
        "'ME: TEST :'",
        "'-bib_phile-2'",
        "'abcbib'",
        "'dkswoa'",
        "'test'",
        "getLists should return empty lists if not logged in",
        "'AIRSTEDDING'",
        "'123'",
        "'./test_data/invalid_password.html'",
        "setLists should encode names",
        "'AIRSTEDDING'",
        "'123'",
        "'%#&!&\\'='",
        "admins=%25%23%26!%26\\'%3D&modlist=&whitelist=&blacklist=",
        "/worlds/lists/123",
        "getOverview should correctly return the world overview",
        "'AIRSTEDDING'",
        "'123'",
        "'/worlds/123'",
        "'./test_data/overview.html'",
        "'AIRSTEDDING'",
        "'BIBLIOPHILE'",
        "'14 Jun 2015, 10:07 +0000'",
        "'05 Oct 2017, 21:05 +0000'",
        "'03 Feb 2018, 14:31 +0000'",
        "'http://theblockheads.net/join.php?id=6576223991974faf62774361d6cdd1cc'",
        "'searchable'",
        "'4x'",
        "getOverview should correctly return the world overview with online players",
        "'AIRSTEDDING'",
        "'123'",
        "'./test_data/overview2.html'",
        "'AIRSTEDDING'",
        "'BIBLIOPHILE'",
        "'14 Jun 2015, 10:07 +0000'",
        "'07 Oct 2017, 17:28 +0000'",
        "'03 Feb 2018, 14:31 +0000'",
        "'http://theblockheads.net/join.php?id=6576223991974faf62774361d6cdd1cc'",
        "'searchable'",
        "'4x'",
        "'BIBLIOPHILE'",
        "getLogs should return the parsed logs",
        "'AIRSTEDDING'",
        "'123'",
        "'/worlds/logs/123'",
        "''",
        "getMessages should return the nextId and the log",
        "'AIRSTEDDING'",
        "'123'",
        "/api",
        "command=getchat&worldId=123&firstId=0",
        "'ok'",
        "'a'",
        "getMessages should reset the nextId if the api returns an error",
        "'AIRSTEDDING'",
        "'123'",
        "'error'",
        "getMessages should not reset the nextId if there is a network error",
        "'AIRSTEDDING'",
        "'123'",
        "'Fake Network error'",
        "send should encode the message",
        "'AIRSTEDDING'",
        "'123'",
        "'Hello &'",
        "'/api'",
        "command=send&worldId=123&message=Hello%20%26",
        "'ok'",
        "send should throw if unable to send",
        "'AIRSTEDDING'",
        "'123'",
        "'Hello'",
        "'error'",
        "start should start the world",
        "'AIRSTEDDING'",
        "'123'",
        "command=start&worldId=123",
        "'ok'",
        "stop should stop the world",
        "'AIRSTEDDING'",
        "'123'",
        "command=stop&worldId=123",
        "'ok'",
        "restart should restart the world",
        "'AIRSTEDDING'",
        "'123'",
        "command=reboot&worldId=123",
        "'ok'"
    ],
    "variables": [
        "tick",
        "getFile",
        "requests",
        "baseTest",
        "test",
        "prom",
        "prom",
        "html",
        "prom",
        "html",
        "prom",
        "worlds",
        "api",
        "prom",
        "lists",
        "api",
        "prom",
        "lists",
        "api",
        "api",
        "prom",
        "overview",
        "api",
        "prom",
        "overview",
        "api",
        "prom",
        "logs",
        "api",
        "prom",
        "response",
        "result",
        "api",
        "prom",
        "result",
        "api",
        "prom",
        "result",
        "api",
        "prom",
        "api",
        "prom",
        "api",
        "prom",
        "api",
        "prom",
        "api",
        "prom"
    ],
    "comments": [
        "/api, /login, /worlds/lists/:id, /login, /worlds/:id",
        "Because we are mocking fetch, it is very difficult to test anything without using serial tests.",
        "We aren't testing the log parser here"
    ],
    "docstrings": [],
    "functions": [
        "clone",
        "arrayBuffer",
        "blob",
        "json",
        "text",
        "formData",
        "makeResponse",
        "respondToLastRequest",
        "makeMockFetch",
        "mockFetch"
    ],
    "classes": [
        "MockResponse"
    ]
}