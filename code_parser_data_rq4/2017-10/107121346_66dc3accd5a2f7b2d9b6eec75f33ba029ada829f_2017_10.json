{
    "identifiers": [
        "networkx",
        "nx",
        "state",
        "st",
        "matplotlib",
        "pyplot",
        "plt",
        "random",
        "rd",
        "graph",
        "state",
        "node",
        "graph",
        "node",
        "compare",
        "state",
        "node",
        "graph",
        "add_node",
        "state",
        "state",
        "st",
        "State",
        "state_counter",
        "nx",
        "DiGraph",
        "graph",
        "add_node",
        "current_state",
        "passes",
        "current_state",
        "has_influence_conflicts",
        "current_state",
        "get_conflicting_states",
        "state1",
        "next_state",
        "pending_states",
        "append",
        "current_state",
        "state2",
        "current_state",
        "next_state",
        "next_state",
        "resolve_dependencies",
        "graph",
        "add_edge",
        "get_state_node",
        "graph",
        "current_state",
        "get_state_node",
        "graph",
        "next_state",
        "next_state",
        "has_interstate_transition",
        "len",
        "pending_states",
        "pending_states",
        "pop",
        "pend_state",
        "next_state",
        "next_state",
        "resolve_dependencies",
        "graph",
        "add_edge",
        "get_state_node",
        "graph",
        "current_state",
        "get_state_node",
        "graph",
        "next_state",
        "rd",
        "random",
        "st",
        "State",
        "next_state",
        "to_list",
        "new_state",
        "flip_inflow_der",
        "graph",
        "add_edge",
        "get_state_node",
        "graph",
        "next_state",
        "get_state_node",
        "graph",
        "new_state",
        "new_state",
        "next_state",
        "passes",
        "len",
        "graph",
        "node",
        "graph",
        "node",
        "to_list",
        "nx",
        "draw",
        "graph",
        "plt",
        "show"
    ],
    "literals": [],
    "variables": [
        "state_counter",
        "current_state",
        "pending_states",
        "graph",
        "passes",
        "state1",
        "state2",
        "next_state",
        "next_state",
        "current_state",
        "pend_state",
        "next_state",
        "new_state",
        "current_state",
        "current_state"
    ],
    "comments": [
        "If the state is already in the graph, return it",
        "If the state was not found, add it and return it",
        "Create the initial state and add to the graph",
        "Pending states are created when there are multiple resolutions"
    ],
    "docstrings": [],
    "functions": [
        "get_state_node"
    ],
    "classes": []
}