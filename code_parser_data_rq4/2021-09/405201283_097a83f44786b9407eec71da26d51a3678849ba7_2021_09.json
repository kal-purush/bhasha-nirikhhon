{
    "identifiers": [
        "os",
        "makedirs",
        "os",
        "path",
        "join",
        "basename",
        "isfile",
        "isdir",
        "collections",
        "deque",
        "defaultdict",
        "functools",
        "partial",
        "lru_cache",
        "typing",
        "Tuple",
        "pathos",
        "multiprocessing",
        "ProcessingPool",
        "Pool",
        "multiprocessing",
        "cpu_count",
        "click",
        "util",
        "update_dict",
        "allkeys",
        "sum_dict",
        "scale_factor",
        "scale_dict",
        "round_dict",
        "file",
        "openzip",
        "readzip",
        "path2stem",
        "stem2rank",
        "read_ids",
        "id2file_from_dir",
        "id2file_from_map",
        "read_map_uniq",
        "read_map_1st",
        "write_readmap",
        "align",
        "plain_mapper",
        "classify",
        "assign_none",
        "assign_free",
        "assign_rank",
        "counter",
        "counter_size",
        "counter_strat",
        "counter_size_strat",
        "tree",
        "read_names",
        "read_nodes",
        "read_lineage",
        "read_newick",
        "read_columns",
        "fill_root",
        "ordinal",
        "ordinal_mapper",
        "read_gene_coords",
        "whether_prefix",
        "calc_gene_lens",
        "table",
        "prep_table",
        "write_table",
        "mapper",
        "files",
        "samples",
        "fmt",
        "demux",
        "trimsub",
        "tree",
        "rankdic",
        "namedic",
        "root",
        "ranks",
        "rank2dir",
        "outzip",
        "uniq",
        "major",
        "above",
        "subok",
        "sizes",
        "unasgd",
        "stratmap",
        "chunk",
        "cache",
        "zippers",
        "x",
        "x",
        "ranks",
        "assigners",
        "cache",
        "tree",
        "rankdic",
        "namedic",
        "root",
        "uniq",
        "major",
        "major",
        "above",
        "subok",
        "sizes",
        "unasgd",
        "rank2dir",
        "outzip",
        "outzip",
        "fp",
        "click",
        "echo",
        "basename",
        "fp",
        "nl",
        "readzip",
        "fp",
        "zippers",
        "fh",
        "qryque",
        "subque",
        "mapper",
        "fh",
        "fmt",
        "fmt",
        "n",
        "chunk",
        "nqry",
        "len",
        "qryque",
        "deque",
        "sorted",
        "strip_suffix",
        "subque",
        "trimsub",
        "trimsub",
        "subque",
        "demultiplex",
        "qryque",
        "subque",
        "samples",
        "demux",
        "files",
        "fp",
        "files",
        "qryque",
        "subque",
        "sample",
        "rmap",
        "rmaps",
        "items",
        "stratmap",
        "sample",
        "csample",
        "read_strata",
        "stratmap",
        "sample",
        "zippers",
        "sample",
        "rank",
        "ranks",
        "assign_readmap",
        "rmap",
        "data",
        "rank",
        "sample",
        "kwargs",
        "nqry",
        "nstep",
        "istep",
        "click",
        "echo",
        "istep",
        "nl",
        "nstep",
        "istep",
        "click",
        "echo",
        "click",
        "echo",
        "nqry",
        "data",
        "cpu_count",
        "num_processes",
        "Pool",
        "Pool",
        "num_processes",
        "classify_pool",
        "classify_file_mp",
        "sorted",
        "files",
        "classify_pool",
        "close",
        "classify_pool",
        "join",
        "results",
        "classify_results",
        "rank",
        "file",
        "results",
        "items",
        "data",
        "rank",
        "update",
        "file",
        "click",
        "echo",
        "data"
    ],
    "literals": [
        "'assigners'",
        "'cache'",
        "'tree'",
        "'rankdic'",
        "'namedic'",
        "'root'",
        "'uniq'",
        "'major'",
        "'above'",
        "'subok'",
        "'sizes'",
        "'unasgd'",
        "'rank2dir'",
        "'outzip'",
        "'none'",
        "f'Parsing alignment file {basename(fp)} '",
        "'strata'",
        "'.'",
        "' Done.'",
        "f'  Number of sequences classified: {nqry}.'",
        "'Classification completed.'"
    ],
    "variables": [
        "data",
        "assigners",
        "kwargs",
        "csample",
        "nqry",
        "nstep",
        "subque",
        "rmaps",
        "kwargs",
        "csample",
        "istep",
        "num_processes",
        "classify_pool",
        "classify_pool",
        "classify_results"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "----------------------------------------------------------------------------",
        "Copyright (c) 2020--, Qiyun Zhu.",
        "",
        "Distributed under the terms of the Modified BSD License.",
        "",
        "The full license is in the file LICENSE, distributed with this software.",
        "----------------------------------------------------------------------------",
        "assigners for each rank",
        "assignment parameters",
        "current sample Id",
        "parse input alignment file(s) and generate profile(s)",
        "read alignment file into query-to-subject(s) map",
        "query and progress counters",
        "parse alignment file by chunk",
        "(optional) strip indices and generate tuples",
        "(optional) demultiplex and generate per-sample maps",
        "assign reads at each rank",
        "(optional) read strata of current sample into cache",
        "call assignment workflow for each rank",
        "show progress",
        "create n processes where n is max 12 cores",
        "aggregate the results from all the processes into the \"data\" nested dict object"
    ],
    "docstrings": [
        "\"\"\"Main classification workflow.\n\nNotes\n-----\nOnly in this script can functions directly interface with the user by screen\noutput (via `click`) and file input/output, except for raising errors.\n\"\"\"",
        "\"\"\"Core of the classification workflow.\n\n    Parameters\n    ----------\n    mapper : object\n        Mapping module (Plain or Ordinal).\n    files : list or dict\n        Paths to input alignment files, if multiplexed, or dictionary of file\n        paths to sample IDs, if per-sample.\n    samples : list of str, optional\n        Sample ID list to include.\n    fmt : str, optional\n        Format of input alignment file. Options:\n        - 'b6o': BLAST tabular format.\n        - 'sam': SAM format.\n        - 'map': Simple map of query <tab> subject.\n        If None, program will automatically infer from file content.\n    demux : bool, optional\n        Whether perform demultiplexing.\n    trimsub : str, optional\n        Trim subject IDs at the last given delimiter.\n    tree : dict, optional\n        Taxonomic tree.\n    rankdic : dict, optional\n        Rank dictionary.\n    namedic : dict, optional\n        Taxon name dictionary.\n    root : str, optional\n        Root identifier.\n    ranks: list of str, optional\n        List of ranks at each of which sequences are to be classified. Can also\n        be \"none\" to omit classification (simply report subject IDs) or \"free\"\n        to perform free-rank classification (LCA of subjects regardless of rank\n        will be reported).\n    rank2dir : dict, otional\n        Write classification map per rank to directory.\n    outzip : str, optional\n        Output read map compression method (gz, bz2, xz or None).\n    uniq : bool, optional\n        Assignment must be unique. Otherwise, report all possible assignments\n        and normalize counts (for none- and fixed-rank assignments).\n    major : int, optional\n        In given-rank classification, perform majority-rule assignment based on\n        this percentage threshold. Range: [51, 99].\n    above : bool, optional\n        Allow assigning to a classification unit higher than given rank.\n    subok : bool, optional\n        In free-rank classification, allow assigning sequences to their direct\n        subjects instead of higher classification units, if applicable.\n    sizes : dict, optional\n        Subject size dictionary.\n    unasgd : bool, optional\n        Report unassigned sequences.\n    stratmap : dict, optional\n        Map of sample ID to stratification file.\n    chunk : int, optional\n        Number of lines per chunk to read from alignment file.\n    cache : int, optional\n        LRU cache size for classification results at each rank.\n    zippers : dict, optional\n        External compression programs.\n\n    Returns\n    -------\n    dict of dict\n        Per-rank profiles generated from classification.\n\n    Notes\n    -----\n    Subject(s) of each query are sorted and converted into a tuple, which is\n    hashable, a property necessary for subsequent assignment result caching.\n    \"\"\""
    ],
    "functions": [
        "classify",
        "classify_file_mp"
    ],
    "classes": []
}