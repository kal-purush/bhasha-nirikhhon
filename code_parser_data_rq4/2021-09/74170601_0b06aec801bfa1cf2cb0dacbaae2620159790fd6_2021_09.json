{
    "identifiers": [
        "pvlib",
        "pandas",
        "pd",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "rdtools",
        "normalization",
        "filtering",
        "aggregation",
        "degradation",
        "rdtools",
        "clearsky_temperature",
        "plotting",
        "warnings",
        "pv",
        "poa_global",
        "temperature_cell",
        "temperature_ambient",
        "gamma_pdc",
        "aggregation_freq",
        "pv_input",
        "windspeed",
        "power_expected",
        "temperature_model",
        "power_dc_rated",
        "interp_freq",
        "max_timedelta",
        "interp_freq",
        "normalization",
        "interpolate",
        "pv",
        "interp_freq",
        "max_timedelta",
        "poa_global",
        "normalization",
        "interpolate",
        "poa_global",
        "pv",
        "index",
        "max_timedelta",
        "temperature_cell",
        "normalization",
        "interpolate",
        "temperature_cell",
        "pv",
        "index",
        "max_timedelta",
        "temperature_ambient",
        "normalization",
        "interpolate",
        "temperature_ambient",
        "pv",
        "index",
        "max_timedelta",
        "power_expected",
        "normalization",
        "interpolate",
        "power_expected",
        "pv",
        "index",
        "max_timedelta",
        "isinstance",
        "windspeed",
        "pd",
        "Series",
        "normalization",
        "interpolate",
        "windspeed",
        "pv",
        "index",
        "max_timedelta",
        "pv_input",
        "pv",
        "normalization",
        "energy_from_power",
        "pv",
        "max_timedelta",
        "max_timedelta",
        "pv_input",
        "pv",
        "temperature_cell",
        "temperature_ambient",
        "poa_global",
        "gamma_pdc",
        "aggregation_freq",
        "windspeed",
        "power_expected",
        "temperature_model",
        "power_dc_rated",
        "interp_freq",
        "max_timedelta",
        "power_expected",
        "temperature_cell",
        "filter_params",
        "pvlib_location",
        "pv_azimuth",
        "pv_tilt",
        "poa_global_clearsky",
        "temperature_cell_clearsky",
        "temperature_ambient_clearsky",
        "albedo",
        "solar_position_method",
        "max_timedelta",
        "poa_global_clearsky",
        "normalization",
        "interpolate",
        "poa_global_clearsky",
        "pv_energy",
        "index",
        "max_timedelta",
        "temperature_cell_clearsky",
        "normalization",
        "interpolate",
        "temperature_cell_clearsky",
        "pv_energy",
        "index",
        "max_timedelta",
        "temperature_ambient_clearsky",
        "normalization",
        "interpolate",
        "temperature_ambient_clearsky",
        "pv_energy",
        "index",
        "max_timedelta",
        "isinstance",
        "pv_azimuth",
        "pd",
        "Series",
        "pd",
        "DataFrame",
        "normalization",
        "interpolate",
        "pv_azimuth",
        "pv_energy",
        "index",
        "max_timedelta",
        "isinstance",
        "pv_tilt",
        "pd",
        "Series",
        "pd",
        "DataFrame",
        "normalization",
        "interpolate",
        "pv_tilt",
        "pv_energy",
        "index",
        "max_timedelta",
        "pvlib_location",
        "pv_azimuth",
        "pv_tilt",
        "poa_global_clearsky",
        "temperature_cell_clearsky",
        "temperature_ambient_clearsky",
        "albedo",
        "solar_position_method",
        "times",
        "rescale",
        "kwargs",
        "times",
        "pd",
        "date_range",
        "poa_global",
        "index",
        "min",
        "poa_global",
        "index",
        "max",
        "freq",
        "pvlib_location",
        "ValueError",
        "pv_tilt",
        "pv_azimuth",
        "ValueError",
        "pvlib_location",
        "solar_position_method",
        "solar_position_method",
        "loc",
        "get_solarposition",
        "times",
        "solar_position_kwargs",
        "loc",
        "get_clearsky",
        "times",
        "solar_position",
        "sun",
        "pvlib",
        "irradiance",
        "get_total_irradiance",
        "pv_tilt",
        "pv_azimuth",
        "sun",
        "sun",
        "clearsky",
        "clearsky",
        "clearsky",
        "albedo",
        "albedo",
        "kwargs",
        "clearsky_poa",
        "aggregate",
        "pd",
        "Series",
        "len",
        "poa_global",
        "index",
        "poa_global",
        "index",
        "interval_id",
        "reindex",
        "times",
        "method",
        "clearsky_poa",
        "groupby",
        "interval_id",
        "mean",
        "poa_global",
        "index",
        "clearsky_poa",
        "iloc",
        "np",
        "nan",
        "rescale",
        "clearsky_poa",
        "index",
        "equals",
        "poa_global",
        "index",
        "ValueError",
        "normalization",
        "irradiance_rescale",
        "poa_global",
        "clearsky_poa",
        "method",
        "clearsky_poa",
        "poa_global",
        "temperature_ambient",
        "windspeed",
        "temperature_model",
        "isinstance",
        "temperature_model",
        "pvlib",
        "temperature",
        "TEMPERATURE_MODEL_PARAMETERS",
        "temperature_model",
        "isinstance",
        "temperature_model",
        "temperature_model",
        "temperature_model",
        "temperature_model",
        "temperature_model",
        "ValueError",
        "pvlib",
        "temperature",
        "sapm_cell",
        "poa_global",
        "poa_global",
        "temp_air",
        "temperature_ambient",
        "wind_speed",
        "windspeed",
        "model_params",
        "AttributeError",
        "e",
        "e",
        "cell_temp",
        "poa_global_clearsky",
        "index",
        "pvlib_location",
        "ValueError",
        "pvlib_location",
        "clearsky_temperature",
        "get_clearsky_tamb",
        "times",
        "loc",
        "latitude",
        "loc",
        "longitude",
        "cs_amb_temp",
        "poa_global",
        "temperature_cell",
        "power_dc_rated",
        "power_dc_rated",
        "gamma_pdc",
        "warnings",
        "warn",
        "poa_global",
        "power_dc_rated",
        "temperature_cell",
        "gamma_pdc",
        "normalization",
        "normalize_with_pvwatts",
        "pv_energy",
        "pvwatts_kws",
        "renorm",
        "energy_normalized",
        "np",
        "isfinite",
        "energy_normalized",
        "energy_normalized",
        "x",
        "quantile",
        "energy_normalized",
        "insolation",
        "energy_normalized",
        "pd",
        "Series",
        "index",
        "energy_normalized",
        "index",
        "poa_global",
        "temperature_cell",
        "poa_global_clearsky",
        "temperature_cell_clearsky",
        "filter_params",
        "filtering",
        "normalized_filter",
        "energy_normalized",
        "filter_params",
        "f",
        "filter_params",
        "poa",
        "ValueError",
        "filtering",
        "poa_filter",
        "poa",
        "filter_params",
        "f",
        "filter_params",
        "cell_temp",
        "ValueError",
        "filtering",
        "tcell_filter",
        "cell_temp",
        "filter_params",
        "f",
        "filter_params",
        "pv_power",
        "ValueError",
        "filtering",
        "clip_filter",
        "pv_power",
        "filter_params",
        "f",
        "poa_global",
        "poa_global_clearsky",
        "ValueError",
        "filtering",
        "csi_filter",
        "poa_global",
        "poa_global_clearsky",
        "filter_params",
        "f",
        "pd",
        "DataFrame",
        "filter_components",
        "fillna",
        "filter_params",
        "get",
        "filter_params",
        "ad_hoc_filter",
        "isnull",
        "warnings",
        "warn",
        "ad_hoc_filter",
        "fillna",
        "filter_components",
        "index",
        "equals",
        "ad_hoc_filter",
        "index",
        "warnings",
        "warn",
        "ad_hoc_filter",
        "reindex",
        "filter_components",
        "index",
        "fillna",
        "ad_hoc_filter",
        "filter_components",
        "all",
        "axis",
        "filter_components",
        "drop",
        "columns",
        "bool_filter",
        "filter_components",
        "bool_filter",
        "filter_components",
        "post_filter",
        "post_filter",
        "empty",
        "pd",
        "Timedelta",
        "post_filter",
        "index",
        "post_filter",
        "index",
        "post_filter_length",
        "pd",
        "Timedelta",
        "ValueError",
        "energy_normalized",
        "insolation",
        "aggregation",
        "aggregation_insol",
        "energy_normalized",
        "insolation",
        "aggregation_freq",
        "insolation",
        "resample",
        "aggregation_freq",
        "sum",
        "aggregated",
        "aggregated_insolation",
        "energy_normalized",
        "kwargs",
        "_filter_check",
        "energy_normalized",
        "degradation",
        "degradation_year_on_year",
        "energy_normalized",
        "kwargs",
        "yoy_rd",
        "yoy_ci",
        "yoy_info",
        "yoy_results",
        "energy_normalized_daily",
        "insolation_daily",
        "kwargs",
        "rdtools",
        "soiling",
        "pd",
        "tseries",
        "offsets",
        "Day",
        "energy_normalized_daily",
        "index",
        "freq",
        "daily_freq",
        "insolation_daily",
        "index",
        "freq",
        "daily_freq",
        "ValueError",
        "soiling",
        "soiling_srr",
        "energy_normalized_daily",
        "insolation_daily",
        "kwargs",
        "sr",
        "sr_ci",
        "soiling_info",
        "srr_results",
        "poa_global",
        "ValueError",
        "power_expected",
        "temperature_cell",
        "temperature_ambient",
        "ValueError",
        "temperature_cell",
        "_calc_cell_temperature",
        "poa_global",
        "temperature_ambient",
        "windspeed",
        "_pvwatts_norm",
        "poa_global",
        "temperature_cell",
        "normalization",
        "normalize_with_expected_power",
        "pv_energy",
        "power_expected",
        "poa_global",
        "pv_input",
        "_filter",
        "energy_normalized",
        "_aggregate",
        "energy_normalized",
        "sensor_filter",
        "insolation",
        "sensor_filter",
        "aggregated",
        "aggregated_insolation",
        "poa_global_clearsky",
        "_calc_clearsky_poa",
        "model",
        "AttributeError",
        "AttributeError",
        "temperature_cell_clearsky",
        "temperature_ambient_clearsky",
        "_calc_clearsky_tamb",
        "_calc_cell_temperature",
        "poa_global_clearsky",
        "temperature_ambient_clearsky",
        "power_expected",
        "_pvwatts_norm",
        "poa_global_clearsky",
        "temperature_cell_clearsky",
        "normalization",
        "normalize_with_expected_power",
        "pv_energy",
        "power_expected",
        "poa_global_clearsky",
        "pv_input",
        "_filter",
        "cs_normalized",
        "_aggregate",
        "cs_normalized",
        "clearsky_filter",
        "cs_insolation",
        "clearsky_filter",
        "cs_aggregated",
        "cs_aggregated_insolation",
        "analyses",
        "yoy_kwargs",
        "srr_kwargs",
        "_sensor_preprocess",
        "analyses",
        "_yoy_degradation",
        "sensor_aggregated_performance",
        "yoy_kwargs",
        "yoy_results",
        "analyses",
        "_srr_soiling",
        "sensor_aggregated_performance",
        "sensor_aggregated_insolation",
        "srr_kwargs",
        "srr_results",
        "results",
        "sensor_results",
        "analyses",
        "yoy_kwargs",
        "srr_kwargs",
        "_clearsky_preprocess",
        "analyses",
        "_yoy_degradation",
        "clearsky_aggregated_performance",
        "yoy_kwargs",
        "yoy_results",
        "analyses",
        "_srr_soiling",
        "clearsky_aggregated_performance",
        "clearsky_aggregated_insolation",
        "srr_kwargs",
        "srr_results",
        "results",
        "clearsky_results",
        "kwargs",
        "results",
        "sensor_aggregated_performance",
        "results",
        "clearsky_aggregated_performance",
        "ValueError",
        "plotting",
        "degradation_summary_plots",
        "results_dict",
        "results_dict",
        "results_dict",
        "aggregated",
        "kwargs",
        "fig",
        "kwargs",
        "results",
        "sensor_aggregated_performance",
        "results",
        "clearsky_aggregated_performance",
        "ValueError",
        "plotting",
        "soiling_monte_carlo_plot",
        "results_dict",
        "aggregated",
        "kwargs",
        "fig",
        "kwargs",
        "results",
        "sensor_aggregated_performance",
        "results",
        "clearsky_aggregated_performance",
        "ValueError",
        "plotting",
        "soiling_interval_plot",
        "results_dict",
        "aggregated",
        "kwargs",
        "fig",
        "kwargs",
        "results",
        "results",
        "ValueError",
        "plotting",
        "soiling_rate_histogram",
        "results_dict",
        "kwargs",
        "fig",
        "alpha",
        "kwargs",
        "poa_global",
        "poa_global_clearsky",
        "ValueError",
        "pd",
        "merge",
        "pd",
        "DataFrame",
        "poa",
        "pd",
        "DataFrame",
        "pv_energy",
        "left_index",
        "right_index",
        "plt",
        "subplots",
        "ax",
        "plot",
        "to_plot",
        "iloc",
        "to_plot",
        "iloc",
        "alpha",
        "alpha",
        "kwargs",
        "ax",
        "set_xlim",
        "ax",
        "set_xlabel",
        "ax",
        "set_ylabel",
        "fig"
    ],
    "literals": [
        "'D'",
        "'power'",
        "'power'",
        "'energy'",
        "'normalized_filter'",
        "'poa_filter'",
        "'tcell_filter'",
        "'clip_filter'",
        "'csi_filter'",
        "'ad_hoc_filter'",
        "'tcell_filter'",
        "'nrel_numpy'",
        "'1min'",
        "'pvlib location must be provided using set_clearsky()'",
        "'pv_tilt and pv_azimuth must be provided using set_clearsky()'",
        "'method'",
        "'apparent_zenith'",
        "'azimuth'",
        "'dni'",
        "'ghi'",
        "'dhi'",
        "'poa_global'",
        "'backfill'",
        "'rescale=True can only be used when clearsky poa is on same index as poa'",
        "'iterative'",
        "\"open_rack_glass_polymer\"",
        "'sapm'",
        "'a'",
        "'b'",
        "'deltaT'",
        "'pvlib temperature_model entry is neither '",
        "'a string nor a dictionary with correct '",
        "'entries. Try \"open_rack_glass_polymer\"'",
        "'Error: PVLib > 0.7 required'",
        "'pvlib location must be provided using set_clearsky()'",
        "'Temperature coefficient not passed in to TrendAnalysis'",
        "'. No temperature correction will be conducted.'",
        "\"poa_global\"",
        "\"power_dc_rated\"",
        "\"temperature_cell\"",
        "\"poa_global_ref\"",
        "\"temperature_cell_ref\"",
        "\"gamma_pdc\"",
        "'default'",
        "'sensor'",
        "'clearsky'",
        "'normalized_filter'",
        "'normalized_filter'",
        "'normalized_filter'",
        "'poa_filter'",
        "'poa must be available to use poa_filter'",
        "'poa_filter'",
        "'poa_filter'",
        "'tcell_filter'",
        "'Cell temperature must be available to use tcell_filter'",
        "'tcell_filter'",
        "'tcell_filter'",
        "'clip_filter'",
        "'PV power (not energy) is required for the clipping filter. '",
        "'Either omit the clipping filter, provide PV power at '",
        "'instantiation, or explicitly assign TrendAnalysis.pv_power.'",
        "'clip_filter'",
        "'clip_filter'",
        "'clearsky'",
        "'Both poa_global and poa_global_clearsky must be available to '",
        "'do clearsky filtering with csi_filter'",
        "'csi_filter'",
        "'csi_filter'",
        "'ad_hoc_filter'",
        "'ad_hoc_filter'",
        "'ad_hoc_filter contains NaN values; setting to False (excluding)'",
        "'ad_hoc_filter index does not match index of other filters; missing '",
        "'values will be set to True (kept). Align the index with the index '",
        "'of the filter_components attribute to prevent this warning'",
        "'ad_hoc_filter'",
        "'default'",
        "'sensor'",
        "'clearsky'",
        "'0d'",
        "'730d'",
        "\"Less than two years of data left after filtering\"",
        "'p50_rd'",
        "'rd_confidence_interval'",
        "'calc_info'",
        "'Soiling SRR analysis requires daily aggregation.'",
        "'p50_sratio'",
        "'sratio_confidence_interval'",
        "'calc_info'",
        "'poa_global must be available to perform _sensor_preprocess'",
        "'either cell or ambient temperature must be available '",
        "'to perform _sensor_preprocess'",
        "'energy'",
        "'sensor'",
        "'isotropic'",
        "\"No poa_global_clearsky. 'set_clearsky' must be run \"",
        "\"prior to 'clearsky_analysis'\"",
        "'energy'",
        "'clearsky'",
        "'yoy_degradation'",
        "'yoy_degradation'",
        "'yoy_degradation'",
        "'srr_soiling'",
        "'srr_soiling'",
        "'sensor'",
        "'yoy_degradation'",
        "'yoy_degradation'",
        "'yoy_degradation'",
        "'srr_soiling'",
        "'srr_soiling'",
        "'clearsky'",
        "'sensor'",
        "'sensor'",
        "'yoy_degradation'",
        "'clearsky'",
        "'clearsky'",
        "'yoy_degradation'",
        "\"case must be either 'sensor' or 'clearsky'\"",
        "'p50_rd'",
        "'rd_confidence_interval'",
        "'calc_info'",
        "'sensor'",
        "'sensor'",
        "'srr_soiling'",
        "'clearsky'",
        "'clearsky'",
        "'srr_soiling'",
        "\"case must be either 'sensor' or 'clearsky'\"",
        "'calc_info'",
        "'sensor'",
        "'sensor'",
        "'srr_soiling'",
        "'clearsky'",
        "'clearsky'",
        "'srr_soiling'",
        "\"case must be either 'sensor' or 'clearsky'\"",
        "'calc_info'",
        "'sensor'",
        "'sensor'",
        "'srr_soiling'",
        "'clearsky'",
        "'clearsky'",
        "'srr_soiling'",
        "\"case must be either 'sensor' or 'clearsky'\"",
        "'calc_info'",
        "'sensor'",
        "'clearsky'",
        "\"case must be either 'sensor' or 'clearsky'\"",
        "'o'",
        "'Irradiance (W/m$^2$)'",
        "'PV Energy (Wh/timestep)'"
    ],
    "variables": [
        "pv",
        "poa_global",
        "temperature_cell",
        "temperature_ambient",
        "power_expected",
        "windspeed",
        "pv_power",
        "pv_energy",
        "pv_power",
        "pv_energy",
        "temperature_cell",
        "temperature_ambient",
        "poa_global",
        "gamma_pdc",
        "aggregation_freq",
        "windspeed",
        "power_expected",
        "temperature_model",
        "power_dc_rated",
        "interp_freq",
        "max_timedelta",
        "results",
        "filter_params",
        "max_timedelta",
        "poa_global_clearsky",
        "temperature_cell_clearsky",
        "temperature_ambient_clearsky",
        "pv_azimuth",
        "pv_tilt",
        "pvlib_location",
        "pv_azimuth",
        "pv_tilt",
        "poa_global_clearsky",
        "temperature_cell_clearsky",
        "temperature_ambient_clearsky",
        "albedo",
        "solar_position_method",
        "aggregate",
        "times",
        "aggregate",
        "loc",
        "solar_position_kwargs",
        "solar_position_kwargs",
        "sun",
        "clearsky",
        "clearsky_poa",
        "clearsky_poa",
        "interval_id",
        "interval_id",
        "clearsky_poa",
        "clearsky_poa",
        "index",
        "clearsky_poa",
        "poa_global_clearsky",
        "temperature_model",
        "model_params",
        "model_params",
        "cell_temp",
        "times",
        "loc",
        "cs_amb_temp",
        "temperature_ambient_clearsky",
        "renorm",
        "power_dc_rated",
        "renorm",
        "power_dc_rated",
        "pvwatts_kws",
        "energy_normalized",
        "insolation",
        "x",
        "energy_normalized",
        "filter_components",
        "poa",
        "cell_temp",
        "poa",
        "cell_temp",
        "f",
        "filter_components",
        "f",
        "filter_components",
        "f",
        "filter_components",
        "f",
        "filter_components",
        "f",
        "filter_components",
        "filter_components",
        "ad_hoc_filter",
        "ad_hoc_filter",
        "ad_hoc_filter",
        "filter_components",
        "bool_filter",
        "filter_components",
        "sensor_filter",
        "sensor_filter_components",
        "clearsky_filter",
        "clearsky_filter_components",
        "post_filter_length",
        "post_filter_length",
        "aggregated",
        "aggregated_insolation",
        "yoy_rd",
        "yoy_ci",
        "yoy_info",
        "yoy_results",
        "daily_freq",
        "sr",
        "sr_ci",
        "soiling_info",
        "srr_results",
        "temperature_cell",
        "energy_normalized",
        "insolation",
        "energy_normalized",
        "insolation",
        "aggregated",
        "aggregated_insolation",
        "sensor_aggregated_performance",
        "sensor_aggregated_insolation",
        "temperature_cell_clearsky",
        "cs_normalized",
        "cs_insolation",
        "cs_normalized",
        "cs_insolation",
        "cs_aggregated",
        "cs_aggregated_insolation",
        "clearsky_aggregated_performance",
        "clearsky_aggregated_insolation",
        "sensor_results",
        "yoy_results",
        "sensor_results",
        "srr_results",
        "sensor_results",
        "clearsky_results",
        "yoy_results",
        "clearsky_results",
        "srr_results",
        "clearsky_results",
        "results_dict",
        "aggregated",
        "results_dict",
        "aggregated",
        "fig",
        "results_dict",
        "aggregated",
        "results_dict",
        "aggregated",
        "fig",
        "results_dict",
        "aggregated",
        "results_dict",
        "aggregated",
        "fig",
        "results_dict",
        "results_dict",
        "fig",
        "poa",
        "poa",
        "to_plot",
        "fig",
        "ax"
    ],
    "comments": [
        "Initialize to use default filter parameters",
        "use this to include an explict filter",
        "remove tcell_filter from list if power_expected is passed in",
        "workflow for pvlib >= 0.7",
        "default",
        "check if self.temperature_model is a string or dict with keys 'a', 'b' and 'deltaT'",
        "Normalize to the 95th percentile for convenience, this is renormalized out",
        "in the calculations but is relevant to normalized_filter()",
        "Combining filters is non-trivial because of the possibility of index",
        "mismatch.  Adding columns to an existing dataframe performs a left index",
        "join, but probably we actually want an outer join.  We can get an outer",
        "join by keeping this as a dictionary and converting it to a dataframe all",
        "at once.  However, we add a default value of True, with the same index as",
        "energy_normalized, so that the output is still correct even when all",
        "filters have been disabled.",
        "note: the previous implementation using the & operator treated NaN",
        "filter values as False, so we do the same here for consistency:",
        "apply special checks to ad_hoc_filter, as it is likely more prone to user error",
        "Thermal details required if power_expected is not manually set.",
        "self.power_expected passed in by user",
        "Note example notebook uses windspeed=0 in the clearskybranch",
        "self.power_expected passed in by user"
    ],
    "docstrings": [
        "'''\nThis module contains functions and classes for object-oriented\nend-to-end analysis\n'''",
        "'''\n    Class for end-to-end degradation and soiling analysis using\n    :py:meth:`~rdtools.TrendAnalysis.sensor_analysis` or\n    :py:meth:`~rdtools.TrendAnalysis.clearsky_analysis`\n\n    Parameters\n    ----------\n    pv : pandas.Series\n        Right-labeled time series PV energy or power. If energy, should *not*\n        be cumulative, but only for preceding time step.\n    poa_global : pandas.Series\n        Right-labeled time series measured plane of array irradiance in W/m^2\n    temperature_cell : pandas.Series\n        Right-labeled time series of cell temperature in Celsius. In practice,\n        back of module temperature works as a good approximation.\n    temperature_ambient : pandas.Series\n        Right-labeled time Series of ambient temperature in Celsius\n    gamma_pdc : float\n        Fractional PV power temperature coefficient\n    aggregation_freq : str or pandas.tseries.offsets.DateOffset\n        Pandas frequency specification with which to aggregate normalized PV\n        data for analysis. For more information, see\n        https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects\n    pv_input : str\n        'power' or 'energy' to specify type of input used for pv parameter\n    windspeed : numeric\n        Right-labeled Pandas Time Series or single numeric value indicating wind\n        speed in m/s for use in calculating cell temperature from ambient default\n        value of 0 neglects the wind in this calculation\n    power_expected : pandas.Series\n        Right-labeled time series of expected PV power. (Note: Expected energy\n        is not supported.)\n    temperature_model : str or dict\n        Model parameters for :py:func:`pvlib.temperature.sapm_cell`. Used in calculating cell\n        temperature from ambient. If string, must be a valid entry\n        for sapm model in :py:data:`pvlib.temperature.TEMPERATURE_MODEL_PARAMETERS`. If dict, must\n        have keys 'a', 'b', 'deltaT'. See :py:func:`pvlib.temperature.sapm_cell` documentation\n        for details.\n    power_dc_rated : float\n        Nameplate DC rating of PV array in Watts. If omitted, pv output will be internally\n        normalized in the normalization step based on it's 95th percentile\n        (see TrendAnalysis._pvwatts_norm() source).\n    interp_freq : str or pandas.tseries.offsets.DateOffset\n        Pandas frequency specification used to interpolate the input PV power\n        or energy. We recommend using the natural frequency of the\n        data, rather than up or down sampling. Analysis requires regular time series.\n        For more information see\n        https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects\n    max_timedelta : pandas.Timedelta\n        The maximum gap in the data to be interpolated/integrated across when\n        interpolating or calculating energy from power\n\n    Attributes\n    ----------\n    (not all attributes documented here)\n    filter_params: dict\n        parameters to be passed to rdtools.filtering functions. Keys are the\n        names of the rdtools.filtering functions. Values are dicts of parameters\n        to be passed to those functions. Also has a special key `ad_hoc_filter`\n        the associated value is a boolean mask joined with the rest of the filters.\n        filter_params defaults to empty dicts for each function in rdtools.filtering,\n        in which case those functions use default parameter values,  `ad_hoc_filter`\n        defaults to None. See examples for more information.\n    results : dict\n        Nested dict used to store the results of methods ending with `_analysis`\n    '''",
        "'''\n        Initialize values for a clearsky analysis which requires configuration\n        of location and orientation details. If optional parameters `poa_global_clearsky`,\n        `temperature_ambient_clearsky` are not passed, they will be modeled\n        based on location and orientation.\n\n        Parameters\n        ----------\n        pvlib_location : pvlib.location.Location\n            Used for calculating clearsky temperature and irradiance\n        pv_azimuth : numeric\n            Azimuth of PV array in degrees from north. Can be right-labeled\n            Pandas Time Series or single numeric value.\n        pv_tilt : numeric\n            Tilt of PV array in degrees from horizontal. Can be right-labeled\n            Pandas Time Series or single numeric value.\n        poa_global_clearsky : pandas.Series\n            Right-labeled time Series of clear-sky plane of array irradiance\n        temperature_cell_clearsky : pandas.Series\n            Right-labeled time series of cell temperature in clear-sky conditions\n            in Celsius. In practice, back of module temperature works as a good\n            approximation.\n        temperature_ambient_clearsky : pandas.Series\n            Right-label time series of ambient temperature in clear sky conditions\n            in Celsius\n        albedo : numeric\n            Albedo to be used in irradiance transposition calculations. Can be right-labeled\n            Pandas Time Series or single numeric value.\n        solar_position_method : str, default 'nrel_numpy'\n            Optional method name to pass to :py:func:`pvlib.solarposition.get_solarposition`.\n            Switching methods may improve calculation time.\n        '''",
        "'''\n        Calculate clearsky plane-of-array irradiance and stores in self.poa_global_clearsky\n\n        Parameters\n        ----------\n        times : pandas.DateTimeIndex\n            times on for which to calculate clearsky poa.  If not provided then\n            it will be simulated at 1-minute frequency and averaged to match the\n            index of self.poa_global\n        rescale : bool\n            Whether to attempt to rescale clearsky irradiance to measured\n        kwargs :\n            Extra parameters passed to pvlib.irradiance.get_total_irradiance()\n\n        Returns\n        -------\n        None\n        '''",
        "'''\n        Return cell temperature calculated from ambient conditions.\n\n        Parameters\n        ----------\n        poa_global : numeric\n            Plane of array irradiance in W/m^2\n        temperature_ambient : numeric\n            Ambient temperature in Celsius\n        windspeed = numeric\n            Wind speed in m/s\n\n        Returns\n        -------\n        numeric\n            calculated cell temperature\n        '''",
        "'''\n        Calculate clear-sky ambient temperature and store in self.temperature_ambient_clearsky\n        '''",
        "'''\n        Normalize PV energy to that expected from a PVWatts model.\n\n        Parameters\n        ---------\n        poa_global : numeric\n            plane of array irradiance in W/m^2\n        temperature_cell : numeric\n            cell temperature in Celsius\n\n        Returns\n        -------\n        pandas.Series\n            Normalized pv energy\n        pandas.Series\n            Associated insolation\n        '''",
        "'''\n        Calculate filters based on those in rdtools.filtering. Uses\n        self.filter_params, which is a dict, the keys of which are names of\n        functions in rdtools.filtering, and the values of which are dicts\n        containing the associated parameters with which to run the filtering\n        functions. See examples for details on how to modify filter parameters.\n\n        Parameters\n        ----------\n        energy_normalized : pandas.Series\n            Time series of normalized PV energy\n        case : str\n            'sensor' or 'clearsky' which filtering protocol to apply. Affects\n            whether filtering.csi_filter() is used and whether result is stored\n            in self.sensor_filter or self.clearsky_filter)\n\n        Returns\n        -------\n        None\n        '''",
        "'''\n        post-filter check for requisite 730 days of data\n\n        Parameters\n        ----------\n        post_filter : pandas.Series\n            Time series filtered by boolean output from self.filter\n        '''",
        "'''\n        Return insolation-weighted normalized PV energy and the associated aggregated insolation\n\n        Parameters\n        ----------\n        energy_normalized : pandas.Series\n            Time series of normalized PV energy\n        insolation : pandas.Series\n            Time Series of insolation associated with each `normalized` point\n\n        Returns\n        -------\n        pandas.Series\n            Insolation-weighted aggregated normalized PV energy\n        pandas.Series\n            Aggregated insolation\n        '''",
        "'''\n        Perform year-on-year degradation analysis on insolation-weighted\n        aggregated energy yield.\n\n        Parameters\n        ----------\n        energy_normalized : pandas.Series\n            Time Series of insolation-weighted aggregated normalized PV energy\n        kwargs :\n            Extra parameters passed to degradation.degradation_year_on_year()\n\n        Returns\n        -------\n        dict\n            Year-on-year degradation results with keys:\n            'p50_rd' : The median year-on-year degradation rate\n            'rd_confidence_interval' : lower and upper bounds of degradation\n                                       rate confidence interval as a list\n            'calc_info': Dict of detailed results\n                         (see degradation.degradation_year_on_year() docs)\n        '''",
        "'''\n        Perform stochastic rate and recovery soiling analysis.\n\n        Parameters\n        ---------\n        energy_normalized_daily : pandas.Series\n            Time Series of insolation-weighted aggregated normalized PV energy\n        insolation_daily : pandas.Series\n            Time Series of insolation, aggregated at same level as energy_normalized_daily\n        kwargs :\n            Extra parameters passed to soiling.soiling_srr()\n\n        Returns\n        -------\n        dict\n            Soiling results with keys:\n            'p50_sratio' : The median insolation-weighted soiling ratio\n            'sratio_confidence_interval' : list of lower and upper bounds of\n                                          insolation-weighted soiling ratio\n                                          confidence interval\n            'calc_info' : Dict of detailed results (see soiling.soiling_srr() docs)\n        '''",
        "'''\n        Perform sensor-based normalization, filtering, and aggregation.\n        If optional parameter self.power_expected is passed in,\n        normalize_with_expected_power will be used instead of pvwatts.\n        '''",
        "'''\n        Perform clear-sky-based normalization, filtering, and aggregation.\n        If optional parameter self.power_expected is passed in,\n        normalize_with_expected_power will be used instead of pvwatts.\n        '''",
        "'''\n        Perform entire sensor-based analysis workflow.\n        Results are stored in self.results['sensor']\n\n        Parameters\n        ---------\n        analyses : list\n            Analyses to perform as a list of strings. Valid entries are 'yoy_degradation'\n            and 'srr_soiling'\n        yoy_kwargs : dict\n            kwargs to pass to degradation.degradation_year_on_year()\n        srr_kwargs : dict\n            kwargs to pass to soiling.soiling_srr()\n\n        Returns\n        -------\n        None\n        '''",
        "'''\n        Perform entire clear-sky-based analysis workflow. Results are stored\n        in self.results['clearsky']\n\n        Parameters\n        ---------\n        analyses : list\n            Analyses to perform as a list of strings. Valid entries are 'yoy_degradation'\n            and 'srr_soiling'\n        yoy_kwargs : dict\n            kwargs to pass to degradation.degradation_year_on_year()\n        srr_kwargs : dict\n            kwargs to pass to soiling.soiling_srr()\n\n        Returns\n        -------\n        None\n        '''",
        "'''\n        Return a figure of a scatter plot and a histogram summarizing degradation rate analysis.\n\n        Parameters\n        ----------\n        case : str\n            The workflow result to plot, allowed values are 'sensor' and 'clearsky'\n        kwargs :\n            Extra parameters passed to plotting.degradation_summary_plots()\n\n        Returns\n        -------\n        matplotlib.figure.Figure\n        '''",
        "'''\n        Return a figure visualizing the Monte Carlo of soiling profiles used in\n        stochastic rate and recovery soiling analysis.\n\n        Parameters\n        ----------\n        case : str\n            The workflow result to plot, allowed values are 'sensor' and 'clearsky'\n        kwargs :\n            Extra parameters passed to plotting.soiling_monte_carlo_plot()\n\n        Returns\n        -------\n        matplotlib.figure.Figure\n        '''",
        "'''\n        Return a figure visualizing the valid soiling intervals used in\n        stochastic rate and recovery soiling analysis.\n\n        Parameters\n        ----------\n        case : str\n            The workflow result to plot, allowed values are 'sensor' and 'clearsky'\n        kwargs :\n            Extra parameters passed to plotting.soiling_interval_plot()\n\n        Returns\n        -------\n        matplotlib.figure.Figure\n        '''",
        "'''\n        Return a histogram of soiling rates found in the stochastic rate and recovery\n        soiling analysis\n\n        Parameters\n        ----------\n        case : str\n            The workflow result to plot, allowed values are 'sensor' and 'clearsky'\n        kwargs :\n            Extra parameters passed to plotting.soiling_rate_histogram()\n\n        Returns\n        -------\n        matplotlib.figure.Figure\n        '''",
        "'''\n        Plot PV energy vs irradiance, useful in diagnosing things like timezone problems or\n        transposition errors.\n\n        Parameters\n        ----------\n        case: str\n            The plane of array irradiance type to plot, allowed values are\n            'sensor' and 'clearsky'\n        alpha : float\n            transparency of the scatter plot\n        kwargs :\n            Extra parameters passed to matplotlib.pyplot.axis.plot()\n\n        Returns\n        -------\n        matplotlib.figure.Figure\n        '''"
    ],
    "functions": [
        "set_clearsky",
        "_calc_clearsky_poa",
        "_calc_cell_temperature",
        "_calc_clearsky_tamb",
        "_pvwatts_norm",
        "_filter",
        "_filter_check",
        "_aggregate",
        "_yoy_degradation",
        "_srr_soiling",
        "_sensor_preprocess",
        "_clearsky_preprocess",
        "sensor_analysis",
        "clearsky_analysis",
        "plot_degradation_summary",
        "plot_soiling_monte_carlo",
        "plot_soiling_interval",
        "plot_soiling_rate_histogram",
        "plot_pv_vs_irradiance"
    ],
    "classes": [
        "TrendAnalysis"
    ]
}