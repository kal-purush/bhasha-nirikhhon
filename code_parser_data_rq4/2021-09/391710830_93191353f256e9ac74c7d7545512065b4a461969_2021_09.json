{
    "identifiers": [
        "rule_name",
        "rule_name",
        "name",
        "recipe",
        "recipe",
        "recipe",
        "len",
        "follow",
        "follow",
        "follow",
        "follow",
        "name",
        "_type",
        "recipe",
        "name",
        "_type",
        "recipe",
        "grammar",
        "grammar",
        "split",
        "rule_line",
        "rule_list",
        "rule_line",
        "split",
        "RuleObject",
        "production_rule",
        "strip",
        "production_rule",
        "production_rule",
        "split",
        "obj",
        "recipe",
        "sub_rules",
        "obj",
        "recipe",
        "append",
        "production_rule",
        "rule_objs",
        "append",
        "obj",
        "obj",
        "rule_objs",
        "grammar",
        "grmr",
        "grammar",
        "split",
        "grmr",
        "split",
        "production_rule",
        "production_rule",
        "split",
        "sub",
        "sub_rules",
        "all_rules",
        "append",
        "sub",
        "all_rules",
        "append",
        "production_rule",
        "all_rules",
        "current_list",
        "all_prefixes",
        "current_list",
        "prefix",
        "all_prefixes",
        "prefix",
        "split",
        "i",
        "len",
        "current_list",
        "i",
        "len",
        "_prefix",
        "current_list",
        "i",
        "_prefix",
        "i",
        "i",
        "flag",
        "current_list",
        "rule_objs",
        "len",
        "current_list",
        "i",
        "list_len",
        "current_list",
        "i",
        "list_len",
        "rule",
        "rule_objs",
        "rule",
        "recipe",
        "recipe",
        "recipes",
        "recipe",
        "split",
        "len",
        "sub_list",
        "len",
        "tokens",
        "j",
        "len",
        "tokens",
        "sub_list",
        "j",
        "tokens",
        "j",
        "j",
        "trigger",
        "tokens",
        "sub_list",
        "current_list",
        "i",
        "first",
        "append",
        "rule",
        "name",
        "first",
        "i",
        "current_list",
        "current_list",
        "rule_objs",
        "rule",
        "rule_objs",
        "rule",
        "recipe",
        "recipe",
        "recipes",
        "recipe",
        "split",
        "len",
        "current_list",
        "len",
        "tokens",
        "i",
        "len",
        "tokens",
        "current_list",
        "i",
        "tokens",
        "i",
        "i",
        "trigger",
        "tokens",
        "recovery_list",
        "i",
        "source_list",
        "i",
        "len",
        "source_list",
        "source_list",
        "i",
        "source_list",
        "i",
        "split",
        "source",
        "recovery_list",
        "i",
        "flag",
        "i",
        "i",
        "source_code",
        "rule_objs",
        "grammar",
        "recovery_list",
        "source_code",
        "split",
        "create_existing_rules",
        "grammar",
        "i",
        "len",
        "source_list",
        "source_list",
        "i",
        "split",
        "current_list",
        "append",
        "source",
        "reduce",
        "current_list",
        "rule_objs",
        "f",
        "prefix_checker",
        "current_list",
        "all_prefixes",
        "recover",
        "source",
        "recovery_list",
        "i",
        "search",
        "current_list",
        "rule_objs",
        "f",
        "r",
        "rule",
        "r",
        "i",
        "create_grammar",
        "grammar",
        "create_existing_rules",
        "grammar",
        "source_code_scanner",
        "source",
        "rule_objs",
        "grammar",
        "recovery_list"
    ],
    "literals": [
        "'name: '",
        "\"recipe: \"",
        "'\\t'",
        "'\\t'",
        "\"\\n\"",
        "'->'",
        "'|'",
        "'|'",
        "\"\\n\"",
        "\"->\"",
        "\"|\"",
        "\"|\"",
        "\"current list is now : \"",
        "\"False>>>>\"",
        "'True'",
        "\"source_Code is \"",
        "\":\"",
        "'\\n'",
        "':'",
        "\"Syntax error\"",
        "\"r is \"",
        "\"func\"",
        "\"var\"",
        "\"while\"",
        "\"for\"",
        "\"openbracket\""
    ],
    "variables": [
        "name",
        "recipe",
        "follow",
        "name",
        "next",
        "recipe",
        "rule_objs",
        "rule_list",
        "production_rule",
        "obj",
        "sub_rules",
        "all_rules",
        "production_rule",
        "sub_rules",
        "match",
        "flag",
        "i",
        "_prefix",
        "flag",
        "i",
        "list_len",
        "sub_list",
        "recipes",
        "tokens",
        "trigger",
        "j",
        "trigger",
        "first",
        "recipes",
        "tokens",
        "trigger",
        "i",
        "trigger",
        "flag",
        "source",
        "flag",
        "i",
        "source_list",
        "current_list",
        "curr_grammar",
        "all_prefixes",
        "recovery",
        "source",
        "current_list",
        "f",
        "recover",
        "current_list",
        "rule",
        "f",
        "current_list",
        "grammar",
        "recovery_list",
        "source",
        "rule_objs",
        "all_rules"
    ],
    "comments": [
        "print('curr is ', current_list[i], ' and prefix is ',_prefix[i])",
        "curr_grammar = Node(source[0], source[1])"
    ],
    "docstrings": [
        "\"\"\"whileStmt -> while openbrace condition closebrace wBody\nforStmt -> for openbrace assign semicolon condition semicolon math closebrace forBody\nvariable -> var ID equ LITERAL fBody | var ID equ ID fBody | var param fBody |ID equ LITERAL fBody \ncondition -> CONDITIONAL\nmath -> MATH\nforBody -> openbracket fBody closebracket\nassign -> variable equ LITERAL fBody\nparam -> ID DATATYPE\ncommaParamList -> COMMA ID DATATYPE\nparamList -> param commaParamList\nfStmt -> func ID openbrace paramList closebrace fBody\t\nfBody -> openbracket wBody closebracket | openbracket forStmt closebracket | openbracket whileStmt closebracket | openbracket closebracket\nwBody -> variable\"\"\"",
        "\"\"\"\nvar hello = \"hello\"\n\nfunc main(argc int, argv []string)\n{\n\tvar hell string\n}\n\n\"\"\"",
        "\"\"\"var:var\nhello:ID\n=:equ\n\"hello\":LITERAL\nfunc:func\nmain:ID\n):closebrace\nargc:ID\nint:DATATYPE\n,:COMMA\nargv:ID\n[]string:DATATYPE\n):closebrace\n{:openbracket\nvar:var\n{:openbracket\n}:closebracket\nhell:ID\nstring:DATATYPE\n}:closebracket\"\"\""
    ],
    "functions": [
        "create_grammar",
        "create_existing_rules",
        "prefix_checker",
        "reduce",
        "search",
        "error_recovery",
        "source_code_scanner"
    ],
    "classes": [
        "RuleObject",
        "Node"
    ]
}