{
    "identifiers": [
        "asyncio",
        "sleep",
        "dataclasses",
        "dataclass",
        "field",
        "heapq",
        "heappush",
        "heappop",
        "typing",
        "Any",
        "math",
        "ceil",
        "wyzeapy",
        "types",
        "Device",
        "dataclass",
        "order",
        "Device",
        "field",
        "compare",
        "Any",
        "field",
        "compare",
        "field",
        "compare",
        "service",
        "device",
        "Device",
        "updates_per_interval",
        "service",
        "device",
        "updates_per_interval",
        "update_in",
        "updates_per_interval",
        "service",
        "update",
        "device",
        "device",
        "callback_function",
        "device",
        "tick_tock",
        "update_in",
        "update_in",
        "updates_per_interval",
        "updater",
        "DeviceUpdater",
        "item",
        "removed_updaters",
        "updater",
        "item",
        "heappop",
        "updaters",
        "check_if_removed",
        "updater",
        "heappop",
        "updaters",
        "removed_updaters",
        "remove",
        "updater",
        "tick_tock",
        "updater",
        "update",
        "heappush",
        "updaters",
        "updater",
        "sleep",
        "a_updater",
        "updaters",
        "current_slots",
        "ceil",
        "INTERVAL",
        "a_updater",
        "updates_per_interval",
        "current_slots",
        "a_updater",
        "updaters",
        "a_updater",
        "delay",
        "a_updater",
        "updaters",
        "a_updater",
        "tick_tock",
        "updater",
        "DeviceUpdater",
        "len",
        "updaters",
        "MAX_SLOTS",
        "filled_slots",
        "ceil",
        "INTERVAL",
        "updater",
        "updates_per_interval",
        "MAX_SLOTS",
        "decrease_updates_per_interval",
        "updater",
        "delay",
        "heappush",
        "updaters",
        "updater",
        "updater",
        "DeviceUpdater",
        "removed_updaters",
        "add",
        "updater"
    ],
    "literals": [
        "\"No more devices can be updated within the rate limit\""
    ],
    "variables": [
        "INTERVAL",
        "MAX_SLOTS",
        "device",
        "service",
        "update_in",
        "updates_per_interval",
        "service",
        "device",
        "update_in",
        "updates_per_interval",
        "update_in",
        "device",
        "updaters",
        "removed_updaters",
        "updater",
        "updater",
        "current_slots"
    ],
    "comments": [
        "The device that will be updated",
        "A countdown to zero that will tell the priority queue that it is time to update this device",
        "The number of updates that should happen every 5 minutes",
        "Always initialize at 0 so that we get the first update ASAP. The items will shift based on priority after this.",
        "We only want to update if the update_in counter is zero",
        "Once it reaches zero and we update the device we want to reset the update_in counter",
        "Get the updated info for the device from Wyze's API",
        "Callback to provide the updated info to the subscriber",
        "Don't update and instead just reduce the counter by 1",
        "Every time we update a device we want to reduce the update_in counter so that it will get closer to updating",
        "This should be called to reduce the number of updates per interval so that new devices can be added into the queue fairly",
        "Holds all the logic for when to update the devices",
        "This function should be called once every second",
        "First we get the next updater off the queue",
        "if the updater has been removed, pop the next and clear it from the removed updaters",
        "We then reduce the counter for all the other updaters",
        "Then we update the target device",
        "It will only update if it is time for it to update. Otherwise it just reduces its update_in counter.",
        "Then we put it back at the end of the queue. Or the front again if it wasn't ready to update",
        "This just returns the number of available slots",
        "This will add a delay for all devices so we can squeeze more in there",
        "This will reduce the update_in counter for all devices",
        "When we add a new updater it has to fit within the max slots or we will not add it",
        "If we are overflowing the available slots we will reduce the frequency of updates evenly for all devices until we can fit in one more.",
        "Once it fits we will add the new updater to the queue"
    ],
    "docstrings": [],
    "functions": [
        "update",
        "tick_tock",
        "delay",
        "check_if_removed",
        "update_next",
        "filled_slots",
        "decrease_updates_per_interval",
        "tick_tock",
        "add_updater",
        "del_updater"
    ],
    "classes": [
        "DeviceUpdater",
        "UpdateManager"
    ]
}