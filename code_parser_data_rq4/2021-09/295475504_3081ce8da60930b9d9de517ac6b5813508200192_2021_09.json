{
    "identifiers": [
        "matrix",
        "len",
        "matrix",
        "len",
        "matrix",
        "i",
        "M",
        "j",
        "N",
        "matrix",
        "i",
        "j",
        "i",
        "j",
        "i",
        "j",
        "matrix",
        "j",
        "i",
        "matrix",
        "i",
        "matrix",
        "matrix",
        "i",
        "i",
        "M",
        "matrix",
        "i",
        "N",
        "j",
        "N",
        "matrix",
        "j",
        "elem",
        "k",
        "j",
        "k",
        "elem",
        "row",
        "row",
        "matrix",
        "row",
        "N",
        "column",
        "j",
        "elem",
        "j",
        "elem",
        "layer",
        "layer",
        "matrix",
        "matrix",
        "matrix",
        "i",
        "len",
        "matrix",
        "len",
        "matrix",
        "j",
        "i",
        "span",
        "i",
        "matrix",
        "i",
        "j",
        "matrix",
        "i",
        "matrix",
        "span",
        "j",
        "i",
        "matrix",
        "span",
        "j",
        "matrix",
        "span",
        "i",
        "span",
        "j",
        "matrix",
        "span",
        "i",
        "span",
        "j",
        "matrix",
        "j",
        "span",
        "i",
        "matrix",
        "j",
        "span",
        "i",
        "tmp",
        "matrix",
        "len",
        "index2",
        "len",
        "index1",
        "index2",
        "lstring",
        "append",
        "index1",
        "letter_count",
        "index2",
        "letter_count",
        "lstring",
        "append",
        "index1",
        "letter_count",
        "join",
        "lstring",
        "len",
        "compressed_string",
        "len",
        "compressed_string",
        "string1",
        "string2",
        "abs",
        "len",
        "string1",
        "len",
        "string2",
        "index1",
        "len",
        "string1",
        "index2",
        "len",
        "string2",
        "string1",
        "index1",
        "string2",
        "index2",
        "index1",
        "index2",
        "len",
        "string1",
        "len",
        "string2",
        "count_differences",
        "index1",
        "index2",
        "len",
        "string1",
        "len",
        "string2",
        "count_differences",
        "index1",
        "len",
        "string2",
        "len",
        "string1",
        "count_differences",
        "index2",
        "count_differences",
        "phrase",
        "phrase",
        "casefold",
        "char_dict",
        "char_dict",
        "key",
        "char_dict",
        "keys",
        "char_dict",
        "key",
        "num_odd_chars",
        "num_odd_chars",
        "length",
        "len",
        "lstr",
        "length",
        "index1",
        "index2",
        "lstr",
        "index2",
        "lstr",
        "index2",
        "index1",
        "index1",
        "index1",
        "index2",
        "join",
        "lstr",
        "zerofy_matrix_inplace",
        "m1"
    ],
    "literals": [
        "\"\"",
        "\"\"",
        "\" \"",
        "f'The old string is: {str}'",
        "\" \"",
        "\"0\"",
        "\"2\"",
        "\"%\"",
        "\"\"",
        "\"__main__\"",
        "f\"The new matrix is {zerofy_matrix_inplace(m1)}\""
    ],
    "variables": [
        "M",
        "N",
        "row",
        "column",
        "row",
        "column",
        "row",
        "j",
        "column",
        "j",
        "matrix",
        "i",
        "matrix",
        "matrix",
        "matrix",
        "span",
        "tmp",
        "j",
        "i",
        "index1",
        "letter_count",
        "lstring",
        "index1",
        "letter_count",
        "compressed_string",
        "index1",
        "index2",
        "count_differences",
        "char_dict",
        "char_dict",
        "num_odd_chars",
        "lstr",
        "index1",
        "index2",
        "lstr",
        "index1",
        "lstr",
        "index1",
        "lstr",
        "index1",
        "lstr",
        "index1",
        "m",
        "m1"
    ],
    "comments": [
        "number of rows",
        "number of columns",
        "two boolean variables for the common element at [0][0]",
        "loop for number of squares/cycles we have",
        "loop for number of elements/sqaure that needs to be rotated",
        "4 elements are swapped in each iteration",
        "number of chars with odd occurences",
        "catch the position of the last letter in the string"
    ],
    "docstrings": [
        "\"\"\"place complexity is O(1) and time complexity is O(NM)\n    \"\"\"",
        "\"\"\"\n    rotates a matrix 90 degrees clockwise without the need for extra space, O(1)\n    \"\"\"",
        "\"\"\"\n    run-time is O(N)\n    space is O(N)\n    \"\"\"",
        "\"\"\"\n    \"\"\"",
        "\"\"\"\n    runtime is O(N)\n    space is O(N)\n    \"\"\"",
        "\"\"\"\n    The length is the actual length of the string: length = len(str) + 2 * #spaces. The run-time complexity is O(N), where N is the length of str. The space complexity is O(1).\n    \"\"\"",
        "\"\"\"\n    s = \"Hello Mr John Smith      \"\n    updated_s = URLify(s, 19)\n    print(f'The new string is: {updated_s}')\n    \"\"\"",
        "\"\"\"\n    phrase = \"azAZ\"\n    print(f\"Is the phrase {phrase} a palindrome permetation? {is_palindrome_permetation(phrase)}\")\n    \"\"\"",
        "\"\"\"\n    s1, s2 = \"pale\", \"pales'\"\n    print(f\"Are {s1} and {s2} one change away? {is_one_away(s1, s2)}\")\n    \"\"\"",
        "\"\"\"\n    s = \"aabcccccaaa\" #\"a2b1c5a3\"\n    print(f\"The compressed version of {s} is {string_compression(s)}\")\n    \"\"\"",
        "\"\"\"\n    # m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] #[[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n    m =  [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36]]\n    print(f\"The rotated matrix is {rotate_matrix_inplace(m)}\")\n    \"\"\""
    ],
    "functions": [
        "zerofy_matrix_inplace",
        "rotate_matrix_inplace",
        "string_compression",
        "is_one_away",
        "is_palindrome_permetation",
        "URLify"
    ],
    "classes": []
}