{
    "identifiers": [
        "bloxonedhcpleases",
        "bloxonedhcpleases",
        "rest",
        "ApiException",
        "json",
        "requests",
        "getpass",
        "xmltodict",
        "argparse",
        "argparse",
        "RawDescriptionHelpFormatter",
        "bloxone",
        "sys",
        "ipaddress",
        "ipaddress",
        "IPv4Address",
        "IPv4Network",
        "sty",
        "fg",
        "bg",
        "ef",
        "rs",
        "logging",
        "log",
        "requests",
        "packages",
        "urllib3",
        "disable_warnings",
        "LeasesApiInstance",
        "CSPlimit",
        "IPSpaces",
        "LeasesApiInstance",
        "lease_list",
        "limit",
        "CSPlimit",
        "tempLeases",
        "leases",
        "results",
        "isinstance",
        "leases",
        "bloxonedhcpleases",
        "LeasesListLeaseResponse",
        "len",
        "leases",
        "results",
        "CSPlimit",
        "offset",
        "CSPlimit",
        "LeasesApiInstance",
        "lease_list",
        "offset",
        "offset",
        "limit",
        "CSPlimit",
        "tempLeases",
        "leases",
        "results",
        "l",
        "tempLeases",
        "l",
        "state",
        "lower",
        "IPSpaces",
        "l",
        "space",
        "CSPleases",
        "update",
        "l",
        "address",
        "tempDict",
        "CSPleases",
        "B1Token",
        "requests",
        "request",
        "url",
        "headers",
        "B1Token",
        "json",
        "loads",
        "response",
        "content",
        "i",
        "spaces",
        "i",
        "i",
        "spaceNames",
        "B1Token",
        "getSpaceNamesbySpaceId",
        "B1Token",
        "requests",
        "request",
        "url",
        "headers",
        "B1Token",
        "json",
        "loads",
        "response",
        "content",
        "subn",
        "listSubn",
        "subn",
        "subn",
        "pop",
        "subn",
        "update",
        "spaceNames",
        "subn",
        "pop",
        "subn",
        "listSubnetsCSP",
        "ip",
        "getSubnets",
        "B1Token",
        "keys",
        "IPv4Address",
        "ip",
        "s",
        "subnets",
        "IPv4Network",
        "s",
        "ip",
        "s",
        "cidr",
        "CSPlimit",
        "LeasesApiInstance",
        "NIOSleases",
        "listSubnets",
        "LeasesApiInstance",
        "lease_list",
        "limit",
        "CSPlimit",
        "CSPleases",
        "leases",
        "results",
        "isinstance",
        "leases",
        "bloxonedhcpleases",
        "LeasesListLeaseResponse",
        "len",
        "leases",
        "results",
        "CSPlimit",
        "offset",
        "CSPlimit",
        "LeasesApiInstance",
        "lease_list",
        "offset",
        "offset",
        "limit",
        "CSPlimit",
        "CSPleases",
        "leases",
        "results",
        "l",
        "CSPleases",
        "subnet",
        "listSubnets",
        "IPv4Address",
        "l",
        "address",
        "IPv4Network",
        "subnet",
        "IPSpaces",
        "l",
        "space",
        "listSubnets",
        "subnet",
        "listSubnets",
        "subnet",
        "listSubnets",
        "subnet",
        "append",
        "l",
        "address",
        "listSubnets",
        "subnet",
        "update",
        "listSubnets",
        "subnet",
        "listSubnets",
        "subnet",
        "listSubnets",
        "subnet",
        "reportLeases",
        "config",
        "bloxone",
        "b1platform",
        "cfg_file",
        "config",
        "b1platform",
        "get_current_user",
        "json",
        "b1platform",
        "get_current_tenant",
        "BColors",
        "GREEN",
        "BColors",
        "ENDC",
        "BColors",
        "YELLOW",
        "BColors",
        "ENDC",
        "BColors",
        "CYAN",
        "b1user",
        "upper",
        "BColors",
        "ENDC",
        "BColors",
        "BOLD",
        "BColors",
        "LINE",
        "b1tenant",
        "BColors",
        "ENDC",
        "BColors",
        "GREEN",
        "BColors",
        "ENDC",
        "input",
        "answer",
        "upper",
        "sys",
        "exit",
        "gm_ip",
        "auth_usr",
        "auth_pwd",
        "NIOSlimit",
        "gm_ip",
        "NIOSlimit",
        "requests",
        "request",
        "url",
        "verify",
        "auth",
        "auth_usr",
        "auth_pwd",
        "json",
        "NIOSleases",
        "leases",
        "isinstance",
        "leases",
        "len",
        "leases",
        "NIOSlimit",
        "url",
        "leases",
        "requests",
        "request",
        "urlpaging",
        "verify",
        "auth",
        "auth_usr",
        "auth_pwd",
        "json",
        "NIOSleases",
        "leases",
        "NIOSleases",
        "xmlfile",
        "open",
        "xmlfile",
        "fxmml",
        "read",
        "xmltodict",
        "parse",
        "xml_content",
        "objects",
        "obj",
        "objects",
        "item",
        "obj",
        "item",
        "item",
        "listObjects",
        "append",
        "dictObject",
        "ob",
        "listObjects",
        "ob",
        "ob",
        "ob",
        "ob",
        "listObjects",
        "ob",
        "ob",
        "lower",
        "netViews",
        "ob",
        "ob",
        "ob",
        "tempObject",
        "listLeases",
        "CSPleases",
        "NIOSleases",
        "B1token",
        "getSpaceNamesbySpaceId",
        "CSPtoken",
        "ipNIOS",
        "NIOSleases",
        "countDHCPleases",
        "update",
        "ipNIOS",
        "ipCSP",
        "CSPleases",
        "ipNIOS",
        "NIOSleases",
        "ipNIOS",
        "ipCSP",
        "address",
        "ipNIOS",
        "ipNIOS",
        "spaces",
        "ipCSP",
        "space",
        "ipNIOS",
        "ipNIOS",
        "ipCSP",
        "address",
        "ipNIOS",
        "ipCSP",
        "client_id",
        "ipCSP",
        "ha_group",
        "ipCSP",
        "hardware",
        "ipCSP",
        "host",
        "ipCSP",
        "hostname",
        "ipCSP",
        "state",
        "countDHCPleases",
        "cidr",
        "countDHCPleases",
        "cidr",
        "countDHCPleases",
        "apiKey",
        "bloxonedhcpleases",
        "Configuration",
        "configuration",
        "api_key_prefix",
        "configuration",
        "api_key",
        "apiKey",
        "bloxonedhcpleases",
        "LeaseApi",
        "bloxonedhcpleases",
        "ApiClient",
        "configuration",
        "api_instance",
        "argparse",
        "ArgumentParser",
        "formatter_class",
        "RawDescriptionHelpFormatter",
        "description",
        "description",
        "add_help",
        "usage",
        "usage",
        "epilog",
        "epilog",
        "par",
        "add_argument_group",
        "required",
        "add_argument",
        "req_grp",
        "action",
        "dest",
        "help",
        "required",
        "req_grp",
        "action",
        "dest",
        "help",
        "required",
        "par",
        "add_argument_group",
        "optional",
        "add_argument",
        "opt_grp",
        "action",
        "dest",
        "help",
        "required",
        "opt_grp",
        "action",
        "help",
        "opt_grp",
        "action",
        "help",
        "argparse",
        "SUPPRESS",
        "dest",
        "required",
        "opt_grp",
        "action",
        "help",
        "par",
        "parse_args",
        "args",
        "sys",
        "argv",
        "reportLeases",
        "l",
        "reportLeases",
        "countNIOSLeases",
        "reportLeases",
        "l",
        "countCSPLeases",
        "reportLeases",
        "l",
        "reportLeases",
        "l",
        "reportLeases",
        "l",
        "reportLeases",
        "l",
        "reportLeases",
        "l",
        "fg",
        "red",
        "reportLeases",
        "l",
        "fg",
        "rs",
        "reportLeases",
        "l",
        "reportLeases",
        "l",
        "fg",
        "red",
        "reportLeases",
        "l",
        "fg",
        "rs",
        "reportLeases",
        "l",
        "l",
        "ljust",
        "reportLeases",
        "l",
        "ljust",
        "warning",
        "countNIOSLeases",
        "countCSPLeases",
        "CSPleases",
        "listSubnets",
        "NIOSleases",
        "subnet",
        "listSubnets",
        "b1",
        "CSPleases",
        "IPv4Address",
        "b1",
        "IPv4Network",
        "subnet",
        "listSubnets",
        "subnet",
        "CSPleases",
        "b1",
        "counterBloxOne",
        "lease",
        "NIOSleases",
        "IPv4Address",
        "lease",
        "IPv4Network",
        "subnet",
        "listSubnets",
        "subnet",
        "lease",
        "counterNIOS",
        "listSubnets",
        "subnet",
        "update",
        "counterNIOS",
        "counterBloxOne",
        "listSubnets",
        "CSPleases",
        "listSubnets",
        "NIOSleases",
        "subnet",
        "listSubnets",
        "b1",
        "CSPleases",
        "IPv4Address",
        "b1",
        "IPv4Network",
        "subnet",
        "subnet",
        "listSubnets",
        "keys",
        "listSubnets",
        "subnet",
        "CSPleases",
        "b1",
        "counterBloxOne",
        "lease",
        "NIOSleases",
        "IPv4Address",
        "lease",
        "IPv4Network",
        "subnet",
        "listSubnets",
        "subnet",
        "NIOSleases",
        "lease",
        "counterNIOS",
        "listSubnets",
        "subnet",
        "update",
        "counterNIOS",
        "counterBloxOne",
        "listSubnets",
        "get_args",
        "check_tenant",
        "args",
        "config",
        "bloxone",
        "b1ddi",
        "cfg_file",
        "args",
        "config",
        "b1ddi",
        "api_key",
        "AUTH",
        "apiKey",
        "apiKey",
        "getSpaceNamesbySpaceId",
        "B1Token",
        "getSubnets",
        "B1Token",
        "getBloxOneLeases",
        "LeasesApiInstance",
        "CSPlimit",
        "IPSpaces",
        "args",
        "lower",
        "input",
        "input",
        "getpass",
        "getpass",
        "getNIOSleasesWAPI",
        "gm_ip",
        "auth_usr",
        "auth_pwd",
        "NIOSlimit",
        "comparesLeasesWAPI_BloxOne",
        "CSPleases",
        "listSubnets",
        "NIOSleases",
        "ApiException",
        "e",
        "e",
        "args",
        "lower",
        "input",
        "getNIOSleasesGridBackup",
        "xmlfile",
        "comparesLeasesWAPI_BloxOne",
        "CSPleases",
        "listSubnets",
        "NIOSleases",
        "ApiException",
        "e",
        "e",
        "printReport",
        "reportLeases",
        "main",
        "sys",
        "exit"
    ],
    "literals": [
        "'active'",
        "'backup'",
        "'static'",
        "'used'",
        "'network_view'",
        "\"https://csp.infoblox.com/api/ddi/v1//ipam/ip_space?_fields=id,name\"",
        "\"GET\"",
        "'results'",
        "'id'",
        "'name'",
        "\"https://csp.infoblox.com/api/ddi/v1//ipam/subnet?_fields=address,cidr,space\"",
        "\"GET\"",
        "'results'",
        "'address'",
        "'/'",
        "'cidr'",
        "'network_view'",
        "'space'",
        "'network_view'",
        "'countCSP'",
        "'addressesCSP'",
        "'countCSP'",
        "'countCSP'",
        "'addressesCSP'",
        "'addressesCSP'",
        "'\\033[96m'",
        "'\\033[92m'",
        "'\\033[93m'",
        "'\\033[0m'",
        "'\\033[1m'",
        "'\\033[4m'",
        "'result'",
        "'name'",
        "f'{BColors.GREEN}--------------------------------------------------{BColors.ENDC}'",
        "f'{BColors.YELLOW}\\t\\tW A R N I N G{BColors.ENDC}\\n'",
        "f'{BColors.CYAN}\\t{b1user.upper()}{BColors.ENDC}'",
        "f'\\tIs wanting to access tenant:\\n'",
        "f'{BColors.BOLD}\\t{BColors.LINE}{b1tenant}{BColors.ENDC}'",
        "f'{BColors.GREEN}--------------------------------------------------{BColors.ENDC}\\n'",
        "f'Key in yes to continue'",
        "'YES'",
        "\"https://\"",
        "\"/wapi/v2.10/lease?_max_results=\"",
        "\"&_return_fields%2B=network,binding_state&_paging=1&_return_as_object=1\"",
        "\"GET\"",
        "'result'",
        "'result'",
        "'result'",
        "\"&_page_id=\"",
        "'next_page_id'",
        "\"GET\"",
        "'result'",
        "'r'",
        "'DATABASE'",
        "'OBJECT'",
        "'PROPERTY'",
        "'@NAME'",
        "'@VALUE'",
        "'__type'",
        "'.com.infoblox.dns.network_view'",
        "'id'",
        "'name'",
        "'__type'",
        "'.com.infoblox.dns.lease'",
        "'binding_state'",
        "'active'",
        "'static'",
        "'backup'",
        "'used'",
        "'network_view'",
        "'network_view'",
        "'binding_state'",
        "'binding_state'",
        "'ip_address'",
        "''",
        "'network'",
        "'counter'",
        "'listLeases'",
        "'binding_state'",
        "'ACTIVE'",
        "'STATIC'",
        "'address'",
        "'network'",
        "'network_view'",
        "'network'",
        "'network'",
        "'adddress'",
        "'network_view'",
        "'network_view'",
        "'id'",
        "'haGroup'",
        "'macAddress'",
        "'hostId'",
        "'hostname'",
        "'state'",
        "'counter'",
        "'countLeases'",
        "'counter'",
        "'Authorization'",
        "'token'",
        "'Authorization'",
        "' -c b1config.ini [ -i IP_WAPI | xml ] [ --delimiter x ] [ --yaml <yaml file> ] [ --help ]'",
        "'This is a NIOS CSV to Infoblox BloxOne DDI migration tool'",
        "'%(prog)s'",
        "'Required Arguments'",
        "'-c'",
        "'--config'",
        "\"store\"",
        "\"config\"",
        "\"Path to ini file with API key\"",
        "'-i'",
        "'--interface'",
        "\"store\"",
        "\"interface\"",
        "\"source from where NIOS data will be imported (WAPI | XML) \"",
        "'onedb.xml'",
        "'Optional Arguments'",
        "'--delimiter'",
        "\"store\"",
        "\"csvdelimiter\"",
        "\"Delimiter used in CSV data file\"",
        "'--yaml'",
        "\"store\"",
        "\"Alternate yaml file for supported objects\"",
        "'objects.yaml'",
        "'--debug'",
        "'store_true'",
        "'debug'",
        "'-h'",
        "'--help'",
        "'help'",
        "'show this help message and exit'",
        "'-h'",
        "'leasesNIOS'",
        "'leasesBloxOne'",
        "'leasesNIOS'",
        "'leasesBloxOne'",
        "'leasesNIOS'",
        "'leasesBloxOne'",
        "'BloxOne Lease Count :'",
        "'leasesBloxOne'",
        "'leasesNIOS'",
        "'leasesBloxOne'",
        "'BloxOne Lease Count :'",
        "'leasesBloxOne'",
        "'BloxOne Lease Count :'",
        "'leasesBloxOne'",
        "'Network :'",
        "'NIOS Lease Count :'",
        "'leasesNIOS'",
        "' ---> Review low number of leases'",
        "'Total number of leases in NIOS :'",
        "'Total number of leases in BloxOne :'",
        "'network_view'",
        "'network_view'",
        "'address'",
        "'network_view'",
        "'network_view'",
        "'leasesNIOS'",
        "'leasesBloxOne'",
        "'network_view'",
        "'network_view'",
        "'network_view'",
        "'network_view'",
        "'leasesNIOS'",
        "'leasesBloxOne'",
        "'Authorization'",
        "'Token '",
        "'wapi'",
        "'Please type the IP address of the Grid Master \\n'",
        "'Please enter NIOS admin account \\n'",
        "'Please enter your password \\n'",
        "\"Exception when calling LeaseApi->lease_list: %s\\n\"",
        "'xml'",
        "'Please type full path + name of the Grid backup file \\n'",
        "\"Exception when calling LeaseApi->lease_list: %s\\n\"",
        "'Invalid option, please select XML or WAPI'",
        "\"__main__\""
    ],
    "variables": [
        "tempLeases",
        "tempDict",
        "CSPleases",
        "offset",
        "leases",
        "leases",
        "tempDict",
        "spaceNames",
        "url",
        "response",
        "spaces",
        "spaceNames",
        "spaceNames",
        "listSubnetsCSP",
        "url",
        "response",
        "listSubn",
        "cidr",
        "listSubnetsCSP",
        "cidr",
        "subnets",
        "ip",
        "cidr",
        "CSPleases",
        "offset",
        "leases",
        "leases",
        "reportLeases",
        "subnet",
        "CYAN",
        "GREEN",
        "YELLOW",
        "ENDC",
        "BOLD",
        "LINE",
        "b1platform",
        "b1user",
        "b1tenant",
        "answer",
        "leases",
        "NIOSleases",
        "url",
        "leases",
        "urlpaging",
        "leases",
        "listObjects",
        "dictObject",
        "listLeases",
        "listSubnets",
        "netViews",
        "fxmml",
        "xml_content",
        "objects",
        "objects",
        "dictObject",
        "dictObject",
        "netViews",
        "tempObject",
        "tempObject",
        "tempObject",
        "listLeases",
        "spaces",
        "cidr",
        "tempLease",
        "countDHCPleases",
        "tempLease",
        "cidr",
        "tempLease",
        "tempLease",
        "tempLease",
        "tempLease",
        "tempLease",
        "tempLease",
        "tempLease",
        "tempLease",
        "tempLease",
        "tempLease",
        "configuration",
        "api_instance",
        "usage",
        "description",
        "epilog",
        "par",
        "required",
        "req_grp",
        "optional",
        "opt_grp",
        "countNIOSLeases",
        "countCSPLeases",
        "countNIOSLeases",
        "countCSPLeases",
        "warning",
        "warning",
        "warning",
        "counterNIOS",
        "counterBloxOne",
        "counterNIOS",
        "counterBloxOne",
        "NIOSleases",
        "reportLeases",
        "CSPleases",
        "CSPlimit",
        "NIOSlimit",
        "args",
        "b1ddi",
        "apiKey",
        "LeasesApiInstance",
        "B1Token",
        "IPSpaces",
        "listSubnets",
        "CSPleases",
        "gm_ip",
        "auth_usr",
        "auth_pwd",
        "NIOSleases",
        "reportLeases",
        "xmlfile",
        "NIOSleases",
        "reportLeases"
    ],
    "comments": [
        "!/usr/bin/python3",
        "run as: python3 nios2b1ddi_compareDHCPleases -c config.ini -i wapi|onedb.xml",
        "Receives NIOS leases as input",
        "Collects BloxOne leases from REST API",
        "Returns list of networks with NIOS and B1 leases compared",
        "log.info(f'{b1user} is now accessing {b1tenant}')",
        "DHCP leases from NIOS WAPI. Request network and binding_state extra fields",
        "Supports paging (usually big number of results so multiple pages can be necessary)",
        "Returns NIOSleases --> ['_ref', 'address', 'binding_state', 'network', 'network_view']",
        "Returns NIOSleases extracted from Grid Backup file --> ['_ref', 'address', 'binding_state', 'network', 'network_view']",
        "Separator",
        "Separator",
        "tempObject['address'] = ob['ip_address']",
        "At this point, we have the DHCP leases from the NIOS CSV export",
        "and the leases from BloxOne collected through the API or a Grid Backup",
        "First condition, lease is active",
        "Second condition, same IP address in both CSP and NIOS environments",
        "Third, same network view/IP space",
        "countDHCPleases[cidr['listLeases'].append(tempLease)",
        "",
        "Configure API key authorization: ApiKeyAuth and initialize some variables",
        "Parse arguments",
        "Required Argument(s)",
        "Optional Arguments(s)",
        "opt_grp('--version', action='version', version='%(prog)s ' + __version__)",
        "Filter from the output those networks that didn´t have any leases in NIOS",
        "Receives NIOS leases as input",
        "Receives NIOS leases as input",
        "",
        "Used to convert Space IDs into Space names --> Must match with the network_view in NIOS",
        "List of all subnets in B1             --> ['network']{['address', 'network_view']}",
        "Collect BloxOne leases from B1DDI API  --> ['address']{['network_view',}",
        "if WAPI --> it will get NIOS leases from the Grid WAPI interface",
        "Collect NIOS leases from NIOS WAPI     --> ['_ref', 'address', 'binding_state', 'network', 'network_view']",
        "All leases in CSP have been collected via B1DDI API interface",
        "if XML --> it will get NIOS leases from the Grid Backup (onedb.xml file)",
        "Leases from NIOS will be obtained from a Grid backup (default onedb.xml) ---> 'address': {'leasesNIOS', 'network_view', 'leasesBloxOne'}",
        "All leases in CSP have been collected via B1DDI API interface",
        "execute only if run as a script"
    ],
    "docstrings": [
        "\"\"\" Check Guard Rails \"\"\"",
        "''' def getNIOSleasesWAPI(gm_ip, auth_usr, auth_pwd, NIOSlimit, listSubnets, IPSpaces):    #DHCP leases from NIOS WAPI. Request network and binding_state extra fields\n    leases = {}\n    tempObject = {}\n    listSubnets = {}\n    NIOSleases = []\n    #Supports paging (usually big number of results so multiple pages can be necessary)\n    url = \"https://\" + gm_ip + \"/wapi/v2.10/lease?_max_results=\" + str(NIOSlimit) + \"&_paging=1&_return_as_object=1\"\n    leases = requests.request(\"GET\", url, verify=False, auth=(auth_usr, auth_pwd)).json()\n    NIOSleases += leases['result']\n    while isinstance(leases['result'],list) and len(leases['result'])==NIOSlimit:\n        urlpaging = url + \"&_page_id=\" + str(leases['next_page_id'])\n        leases = requests.request(\"GET\", urlpaging, verify=False, auth=(auth_usr, auth_pwd)).json()\n        NIOSleases += leases['result']\n    for l in NIOSleases:\n        for ntwrk in listSubnets:\n            if (IPv4Address(l['address']) in IPv4Network(ntwrk)):\n                viewId = listSubnets[ntwrk]['network_view']\n                if l['network_view'] == IPSpaces[listSubnets[ntwrk]['space']]:\n                    counter = listSubnets[ntwrk]['countNIOS'] + 1\n                    ipsNIOS = []\n                    #if (l not in listSubnets[ntwrk]['addressesNIOS']): #Avoid duplicates when a FOA has two leases for the same address (1 per node)\n                    if (listSubnets[ntwrk]['addressesNIOS'] is not None):\n                        ipsNIOS = (listSubnets[ntwrk]['addressesNIOS']).append(l)\n                    else:\n                        listSubnets[ntwrk]['addressesNIOS'] = l\n                    listSubnets[ntwrk].update({'countNIOS': counter,'addressesNIOS': ipsNIOS})\n    for i in range(len(listSubnets)):\n        tempObject['countNIOS'] = 0\n        tempObject['countCSP'] = 0\n        tempObject['network_view'] = listSubnets[i]['network_view']\n        NIOSleases[listSubnets[i]['address']] = tempObject\n    return NIOSleases '''",
        "''' elif ob['__type'] == '.com.infoblox.dns.network':\n            cidr =  + '/' + ob['cidr']\n            listSubnets[ob['address']] = {'address': ob['address'],'leasesNIOS': 0, 'network_view' : netViews[ob['network_view']], 'leasesBloxOne': 0} '''",
        "'''\n    sample b1config.ini\n        [BloxOne]\n        url = 'https://csp.infoblox.com'\n        api_version = 'v1'\n        api_key = 'API_KEY'\n        '''"
    ],
    "functions": [
        "getBloxOneLeases",
        "getSpaceNamesbySpaceId",
        "getSubnets",
        "getCIDR",
        "comparesLeasesWAPI_BloxOne",
        "check_tenant",
        "getNIOSleasesWAPI",
        "getNIOSleasesGridBackup",
        "compareLeasesNIOS_B1DDI",
        "AUTH",
        "get_args",
        "printReport",
        "comparesLeasesWAPI_BloxOne",
        "comparesLeasesWAPI_BloxOne",
        "main"
    ],
    "classes": [
        "BColors"
    ]
}