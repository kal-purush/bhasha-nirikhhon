{
    "identifiers": [
        "app",
        "packed",
        "hooks",
        "java",
        "lang",
        "annotation",
        "RetentionPolicy",
        "RUNTIME",
        "java",
        "lang",
        "annotation",
        "Annotation",
        "java",
        "lang",
        "annotation",
        "Documented",
        "java",
        "lang",
        "annotation",
        "ElementType",
        "java",
        "lang",
        "annotation",
        "Retention",
        "java",
        "lang",
        "annotation",
        "Target",
        "java",
        "lang",
        "reflect",
        "Field",
        "java",
        "util",
        "app",
        "packed",
        "packed",
        "hooks",
        "usesite",
        "UseSiteClassHookModel",
        "Target",
        "ElementType",
        "TYPE",
        "ElementType",
        "ANNOTATION_TYPE",
        "Retention",
        "RUNTIME",
        "Documented",
        "ClassHook",
        "allowAllAccess",
        "bootstrap",
        "matchesAnnotation",
        "matchesAssignableTo",
        "MemberOption",
        "builder",
        "b",
        "builder",
        "b",
        "b",
        "fields",
        "declaredFieldsOnly",
        "skipClasses",
        "builder",
        "fields",
        "declaredFieldsOnly",
        "skipClasses",
        "annotationClass",
        "getAnnotation",
        "annotationClass",
        "getAnnotations",
        "annotationClass",
        "getAnnotationsByType",
        "annotationClass",
        "builder",
        "model",
        "allowAllAccess",
        "annotationClass",
        "isAnnotationPresent",
        "annotationClass",
        "methods",
        "declaredMethodsOnly",
        "ignoreDefaultMethods",
        "skipClasses",
        "builder",
        "methods",
        "declaredMethodsOnly",
        "skipClasses",
        "builder"
    ],
    "literals": [
        "\"This method cannot be called outside of the #bootstrap() method. Maybe you tried to call #bootstrap() directly\""
    ],
    "variables": [
        "builder",
        "skipClasses",
        "skipClasses"
    ],
    "comments": [
        "Kan vi annotere Bootstrap med",
        "@MethodHook(annotatations = ...)",
        "Maybe we allow injection of a Lookup object.",
        "Eller ogsaa har vi metoderne direkte paa Bootstrap. Jaa",
        "Tror ikke bootstrap supportere injection af noget som helst...",
        "Alt er jo allerede bestemt",
        "Tror ikke vi kan bruge lookup. Vi har noget @OpenForAll annoterings vaerk.",
        "Og den vil lookup aldrig kunne forstaa.",
        "Hvordan passer den med ConstructorHook???",
        "boolean allowInstantiate() default false; <-- allows custom instantiation",
        "Tror det er noget med vi kan filtere fields/constructor/method/...",
        "matchesAssignableTo was Inherited, Extending... men",
        "We need to have some kind of isGettable, isSettable paa bootstrap tror jeg...",
        "Og det skal ikke inkludere om brugere har givet adgang. f.eks. med et lookup object.",
        "Det er altsammen separat fra bootstrap...",
        "Must use buildWith, or manageByClassBootstrap();",
        "b.setBuild();"
    ],
    "docstrings": [
        "* Copyright (c) 2008 Kasper Nielsen.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* The bootstrap class for a class hook. A new bootstrap instance will be created for every class hook that matches.\n * <p>\n * Implementations of this class must have a no-argument constructor.\n * \n * @see ClassHook#bootstrap()",
        "* A class hook allows for runtime",
        "The hook's {@link BeanClass} class.",
        "* Returns annotations\n         * \n         * @return",
        "The builder used for bootstrapping. Accessed by {@link UseSiteClassHookModel}.",
        "Invoked by Packed at bootstrap time.",
        "* Returns a builder object for this bootstrap.\n     * \n     * @return a builder object for this bootstrap",
        "* Returns a list of bootstraps for all of the constructors of the hooked class. If {@link #hasFullAccess()} is true,\n     * {@link ConstructorHook.BeanConstructor#methodHandle()} returns a valid method handle for the constructor.\n     * \n     * @return a list of bootstraps for all of the constructors of the hooked class",
        "* Returns true if an annotation for the specified type is <em>present</em> on the hooked class, else false.\n     * \n     * @param annotationClass\n     *            the Class object corresponding to the annotation type\n     * @return true if an annotation for the specified annotation type is present on the hooked class, else false\n     * \n     * @see Field#isAnnotationPresent(Class)",
        "* @param declaredMethodsOnly\n     *            whether or not to only include\n     * @param ignoreDefaultMethods\n     *            whether or not ignore default methods? Do we want to filter now? Maybe includeInterface is more\n     *            interesting?\n     * @param skipClasses\n     *            classes to skip when processing\n     * @return a list of method bootstraps",
        "* Returns the class for which this bootstrap has been created.\n     * \n     * @return the class for which this bootstrap has been created"
    ],
    "functions": [
        "MemberOption",
        "declaredOnly",
        "bootstrap",
        "builder",
        "constructors",
        "fields",
        "fields",
        "T",
        "getAnnotation",
        "getAnnotations",
        "getAnnotationsByType",
        "hasFullAccess",
        "isAnnotationPresent",
        "methods",
        "methods"
    ],
    "classes": [
        "BeanClass"
    ]
}