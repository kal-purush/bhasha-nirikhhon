{
    "identifiers": [
        "org",
        "jenkinsci",
        "plugins",
        "nomad",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "java",
        "security",
        "GeneralSecurityException",
        "java",
        "security",
        "KeyStore",
        "javax",
        "net",
        "ssl",
        "KeyManager",
        "javax",
        "net",
        "ssl",
        "KeyManagerFactory",
        "javax",
        "net",
        "ssl",
        "SSLContext",
        "javax",
        "net",
        "ssl",
        "TrustManager",
        "javax",
        "net",
        "ssl",
        "TrustManagerFactory",
        "javax",
        "net",
        "ssl",
        "X509TrustManager",
        "okhttp3",
        "OkHttpClient",
        "builder",
        "clientCertPath",
        "clientCertPass",
        "serverCertPath",
        "serverCertPass",
        "keyManagers",
        "createKeyManagers",
        "clientCertPath",
        "clientCertPass",
        "trustManagers",
        "createTrustManagers",
        "serverCertPath",
        "serverCertPass",
        "ctx",
        "createSSLContext",
        "keyManagers",
        "trustManagers",
        "builder",
        "sslSocketFactory",
        "ctx",
        "getSocketFactory",
        "trustManagers",
        "km",
        "tm",
        "context",
        "SSLContext",
        "getInstance",
        "context",
        "init",
        "km",
        "tm",
        "context",
        "path",
        "path",
        "path",
        "isEmpty",
        "factory",
        "KeyManagerFactory",
        "getInstance",
        "KeyManagerFactory",
        "getDefaultAlgorithm",
        "factory",
        "init",
        "createKeystore",
        "path",
        "toCharArray",
        "factory",
        "getKeyManagers",
        "path",
        "factory",
        "TrustManagerFactory",
        "getInstance",
        "TrustManagerFactory",
        "getDefaultAlgorithm",
        "path",
        "path",
        "isEmpty",
        "factory",
        "init",
        "factory",
        "init",
        "createKeystore",
        "path",
        "factory",
        "getTrustManagers",
        "path",
        "password",
        "ks",
        "KeyStore",
        "getInstance",
        "fis",
        "path",
        "ks",
        "load",
        "fis",
        "toCharArray",
        "password",
        "ks",
        "password",
        "password",
        "password",
        "toCharArray"
    ],
    "literals": [
        "\"TLS\"",
        "\"PKCS12\""
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* Class which helps with the {@link OkHttpClient} and with the configuration of the transport layer security in particular.",
        "* Initializes the transport layer security for a given OkHttpClient.Builder.\n     *\n     * @param builder OkHttpClient builder (not null, sslSocketFactory gets initialized)\n     * @param clientCertPath Path to the PKCS12 client certificate (public and private key) or null (then client auth is disabled)\n     * @param clientCertPass Password for PKCS12 client certificate (optional)\n     * @param serverCertPath Path to the PKCS12 server certificate (CA or public key) or null (then the default truststore is used instead)\n     * @param serverCertPass Password for PKCS12 client certificate (optional)\n     * @throws GeneralSecurityException if the client or server certificate is not valid\n     * @throws IOException              if the client or server certificate is not readable",
        "* Creates an instance of {@link SSLContext} from a given PKCS12 client and server certificate.\n     *\n     * @return SSLContext (not null)\n     * @throws GeneralSecurityException if the ssl context cannot be created",
        "* Creates a list of key managers from a given client certificate.\n     *\n     * @param path Path to the PKCS12 client certificate which contains public and private key (optional)\n     * @param pass Password for PKCS12 client certificate (optional)\n     * @return list of key managers or null if path is empty\n     * @throws GeneralSecurityException if the client certificate is not valid\n     * @throws IOException              if the client certificate is not readable",
        "* Creates a list of trust managers from a given server certificate. Note: If the path is empty then TLS is enabled but the server\n     * certificate is not validated.\n     *\n     * @param path Path to the PKCS12 server certificate (usually a common authority or a public key or empty).\n     * @param pass Password for PKCS12 client certificate (optional)\n     * @return list of trust managers (not null and not empty), when path is empty then the default truststore is returned\n     * @throws GeneralSecurityException if the server certificate is not valid\n     * @throws IOException              if the server certificate is not readable"
    ],
    "functions": [
        "OkHttpClientHelper",
        "initTLS",
        "SSLContext",
        "createSSLContext",
        "createKeyManagers",
        "createTrustManagers",
        "KeyStore",
        "createKeystore",
        "toCharArray"
    ],
    "classes": [
        "OkHttpClientHelper"
    ]
}