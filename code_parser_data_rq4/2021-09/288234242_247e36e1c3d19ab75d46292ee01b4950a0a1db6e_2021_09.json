{
    "identifiers": [
        "asyncio",
        "unittest",
        "mock",
        "Mock",
        "async_timeout",
        "pytest",
        "kopf",
        "_cogs",
        "aiokits",
        "aiotasks",
        "Scheduler",
        "mock",
        "args",
        "mock",
        "arg",
        "args",
        "isinstance",
        "arg",
        "asyncio",
        "Event",
        "arg",
        "isinstance",
        "arg",
        "asyncio",
        "sleep",
        "arg",
        "callable",
        "arg",
        "arg",
        "asyncio",
        "CancelledError",
        "mock",
        "mock",
        "timer",
        "timer",
        "async_timeout",
        "timeout",
        "Scheduler",
        "scheduler",
        "empty",
        "scheduler",
        "wait",
        "scheduler",
        "empty",
        "scheduler",
        "close",
        "scheduler",
        "empty",
        "timer",
        "seconds",
        "CODE_OVERHEAD",
        "timer",
        "Mock",
        "asyncio",
        "Event",
        "asyncio",
        "Event",
        "Scheduler",
        "scheduler",
        "spawn",
        "f",
        "mock",
        "flag1",
        "flag2",
        "result",
        "timer",
        "async_timeout",
        "timeout",
        "flag1",
        "wait",
        "timer",
        "seconds",
        "CODE_OVERHEAD",
        "mock",
        "call_args",
        "timer",
        "async_timeout",
        "timeout",
        "flag2",
        "wait",
        "timer",
        "seconds",
        "timer",
        "seconds",
        "CODE_OVERHEAD",
        "mock",
        "call_args",
        "scheduler",
        "close",
        "timer",
        "Mock",
        "asyncio",
        "Event",
        "asyncio",
        "Event",
        "Scheduler",
        "scheduler",
        "spawn",
        "f",
        "mock",
        "flag1",
        "flag2",
        "result",
        "timer",
        "async_timeout",
        "timeout",
        "flag1",
        "wait",
        "timer",
        "seconds",
        "CODE_OVERHEAD",
        "mock",
        "call_args",
        "timer",
        "async_timeout",
        "timeout",
        "scheduler",
        "close",
        "timer",
        "seconds",
        "CODE_OVERHEAD",
        "mock",
        "call_args",
        "Scheduler",
        "scheduler",
        "close",
        "scheduler",
        "_closed",
        "scheduler",
        "_spawning_task",
        "done",
        "scheduler",
        "_cleaning_task",
        "done",
        "async_timeout",
        "timeout",
        "pytest",
        "raises",
        "RuntimeError",
        "match",
        "scheduler",
        "spawn",
        "f",
        "Mock",
        "Mock",
        "Scheduler",
        "exception_handler",
        "exception_handler",
        "async_timeout",
        "timeout",
        "scheduler",
        "spawn",
        "f",
        "Mock",
        "scheduler",
        "wait",
        "scheduler",
        "close",
        "exception_handler",
        "call_count",
        "Mock",
        "Mock",
        "side_effect",
        "asyncio",
        "CancelledError",
        "Scheduler",
        "exception_handler",
        "exception_handler",
        "async_timeout",
        "timeout",
        "scheduler",
        "spawn",
        "f",
        "mock",
        "scheduler",
        "wait",
        "scheduler",
        "close",
        "exception_handler",
        "call_count",
        "ValueError",
        "Mock",
        "Mock",
        "side_effect",
        "exception",
        "Scheduler",
        "exception_handler",
        "exception_handler",
        "async_timeout",
        "timeout",
        "scheduler",
        "spawn",
        "f",
        "mock",
        "scheduler",
        "wait",
        "scheduler",
        "close",
        "exception_handler",
        "call_count",
        "exception_handler",
        "call_args",
        "exception",
        "timer",
        "asyncio",
        "Event",
        "asyncio",
        "Event",
        "asyncio",
        "Event",
        "asyncio",
        "Event",
        "Scheduler",
        "limit",
        "timer",
        "async_timeout",
        "timeout",
        "scheduler",
        "spawn",
        "f",
        "Mock",
        "task1_started",
        "task1_finished",
        "scheduler",
        "spawn",
        "f",
        "Mock",
        "task2_started",
        "task2_finished",
        "timer",
        "seconds",
        "CODE_OVERHEAD",
        "timer",
        "async_timeout",
        "timeout",
        "task1_finished",
        "wait",
        "task2_started",
        "is_set",
        "task2_finished",
        "wait",
        "timer",
        "seconds",
        "timer",
        "seconds",
        "CODE_OVERHEAD",
        "scheduler",
        "close",
        "timer",
        "asyncio",
        "Event",
        "asyncio",
        "Event",
        "asyncio",
        "Event",
        "asyncio",
        "Event",
        "Scheduler",
        "limit",
        "timer",
        "async_timeout",
        "timeout",
        "scheduler",
        "spawn",
        "f",
        "Mock",
        "task1_started",
        "task1_finished",
        "scheduler",
        "spawn",
        "f",
        "Mock",
        "task2_started",
        "task2_finished",
        "timer",
        "seconds",
        "CODE_OVERHEAD",
        "timer",
        "async_timeout",
        "timeout",
        "task1_finished",
        "wait",
        "task2_started",
        "is_set",
        "task2_finished",
        "wait",
        "timer",
        "seconds",
        "timer",
        "seconds",
        "CODE_OVERHEAD",
        "scheduler",
        "close"
    ],
    "literals": [
        "'started'",
        "'cancelled'",
        "'finished'",
        "'started'",
        "'finished'",
        "'started'",
        "'cancelled'",
        "r\"Cannot add new coroutines\"",
        "'hello'"
    ],
    "variables": [
        "CODE_OVERHEAD",
        "scheduler",
        "mock",
        "flag1",
        "flag2",
        "scheduler",
        "result",
        "mock",
        "flag1",
        "flag2",
        "scheduler",
        "result",
        "scheduler",
        "exception_handler",
        "scheduler",
        "exception_handler",
        "mock",
        "scheduler",
        "exception",
        "exception_handler",
        "mock",
        "scheduler",
        "task1_started",
        "task1_finished",
        "task2_started",
        "task2_finished",
        "scheduler",
        "task1_started",
        "task1_finished",
        "task2_started",
        "task2_finished",
        "scheduler"
    ],
    "comments": [
        "near-instant",
        "i.e. spawning is not not blocking",
        "i.e. spawning is not not blocking"
    ],
    "docstrings": [
        "\"\"\"\n    time:  ////////----------------------0.1s------------------0.2s--///\n    task1: ->spawn->start->sleep->finish->|\n    task2: ->spawn->start->sleep->finish->|\n    \"\"\"",
        "\"\"\"\n    time:  ////////----------------------0.1s------------------0.2s--///\n    task1: ->spawn->start->sleep->finish->|\n    task2: ->spawn->.....(pending)......->start->sleep->finish->|\n    \"\"\""
    ],
    "functions": [
        "f",
        "test_empty_scheduler_lifecycle",
        "test_task_spawning_and_graceful_finishing",
        "test_task_spawning_and_cancellation",
        "test_no_tasks_are_accepted_after_closing",
        "test_successes_are_not_reported",
        "test_cancellations_are_not_reported",
        "test_exceptions_are_reported",
        "test_tasks_are_parallel_if_limit_is_not_reached",
        "test_tasks_are_pending_if_limit_is_reached"
    ],
    "classes": []
}