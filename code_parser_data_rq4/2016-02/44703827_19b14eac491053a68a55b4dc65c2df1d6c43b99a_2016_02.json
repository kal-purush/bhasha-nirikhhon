{
    "identifiers": [
        "Util",
        "ENV",
        "VAR",
        "OPT",
        "ALL",
        "UNDEFINED",
        "Util",
        "_compose_mappings",
        "_invert_dict",
        "_build_resubst_dict",
        "VariablesWrapper",
        "_VariablesWrapper",
        "Proxy",
        "_ArgumentsProxy",
        "decls",
        "decls",
        "keys",
        "__init_supp_dicts",
        "decls",
        "n",
        "ALL",
        "n",
        "ALL",
        "n",
        "ALL",
        "n",
        "ALL",
        "decls",
        "__reset_supp_dicts",
        "decls",
        "ns",
        "ALL",
        "_rename_dict",
        "decls",
        "get_rename_dict",
        "ns",
        "_irename_dict",
        "decls",
        "get_irename_dict",
        "ns",
        "_resubst_dict",
        "decls",
        "get_resubst_dict",
        "ns",
        "_iresubst_dict",
        "decls",
        "get_iresubst_dict",
        "ns",
        "env",
        "args",
        "kw",
        "_compose_mappings",
        "_irename_dict",
        "VAR",
        "_rename_dict",
        "ENV",
        "_invert_dict",
        "rename",
        "_build_resubst_dict",
        "rename",
        "_build_resubst_dict",
        "irename",
        "_ArgumentsProxy",
        "env",
        "rename",
        "resubst",
        "irename",
        "iresubst",
        "args",
        "kw",
        "env",
        "args",
        "kw",
        "_compose_mappings",
        "_irename_dict",
        "OPT",
        "_rename_dict",
        "ENV",
        "_invert_dict",
        "rename",
        "_build_resubst_dict",
        "rename",
        "_build_resubst_dict",
        "irename",
        "_ArgumentsProxy",
        "env",
        "rename",
        "resubst",
        "irename",
        "iresubst",
        "args",
        "kw",
        "env",
        "args",
        "kw",
        "_ArgumentsProxy",
        "env",
        "_rename_dict",
        "ENV",
        "_resubst_dict",
        "ENV",
        "_irename_dict",
        "ENV",
        "_iresubst_dict",
        "ENV",
        "args",
        "kw",
        "__keys",
        "ns",
        "key",
        "_rename_dict",
        "ns",
        "key",
        "key",
        "_rename_dict",
        "ENV",
        "key",
        "key",
        "_rename_dict",
        "VAR",
        "key",
        "key",
        "_rename_dict",
        "OPT",
        "key",
        "env",
        "variables",
        "args",
        "VarEnvProxy",
        "env",
        "_VariablesWrapper",
        "variables",
        "Update",
        "proxy",
        "args",
        "env",
        "SCons",
        "Script",
        "Main",
        "GetOption",
        "OptEnvProxy",
        "env",
        "opt_key",
        "_irename_dict",
        "OPT",
        "GetOption",
        "opt_key",
        "opt_value",
        "opt_value",
        "UNDEFINED",
        "opt_value",
        "env",
        "variables",
        "use_options",
        "args",
        "variables",
        "update_env_from_vars",
        "env",
        "variables",
        "args",
        "use_options",
        "update_env_from_opts",
        "env",
        "variables",
        "filename",
        "env",
        "VarEnvProxy",
        "env",
        "_VariablesWrapper",
        "variables",
        "Save",
        "filename",
        "proxy",
        "variables",
        "env",
        "args",
        "kw",
        "VarEnvProxy",
        "env",
        "_VariablesWrapper",
        "variables",
        "GenerateHelpText",
        "proxy",
        "args",
        "kw",
        "env",
        "EnvProxy",
        "env",
        "strict",
        "EnvProxy",
        "res",
        "strict",
        "k",
        "__keys",
        "proxy1",
        "k",
        "KeyError",
        "v",
        "res",
        "staticmethod",
        "cur",
        "org",
        "v",
        "cur",
        "v",
        "KeyError",
        "org",
        "v",
        "KeyError",
        "org",
        "v",
        "KeyError",
        "curval",
        "orgval",
        "result",
        "env",
        "org",
        "EnvProxy",
        "env",
        "strict",
        "EnvProxy",
        "org",
        "strict",
        "EnvProxy",
        "res",
        "strict",
        "k",
        "__keys",
        "_Arguments",
        "_is_unaltered",
        "envp",
        "orgp",
        "k",
        "envp",
        "k",
        "res",
        "env",
        "org",
        "EnvProxy",
        "env",
        "strict",
        "EnvProxy",
        "org",
        "strict",
        "EnvProxy",
        "chg",
        "strict",
        "k",
        "__keys",
        "_Arguments",
        "_is_unaltered",
        "envp",
        "orgp",
        "k",
        "k",
        "k",
        "KeyError",
        "chg",
        "env",
        "org",
        "EnvProxy",
        "env",
        "strict",
        "EnvProxy",
        "org",
        "strict",
        "EnvProxy",
        "res",
        "strict",
        "k",
        "__keys",
        "_Arguments",
        "_is_unaltered",
        "envp",
        "orgp",
        "k",
        "k",
        "KeyError",
        "envp",
        "k",
        "KeyError",
        "envp",
        "k",
        "KeyError",
        "res",
        "env",
        "variables",
        "use_options",
        "ose",
        "args",
        "filename",
        "GetCurrentValues",
        "env",
        "UpdateEnvironment",
        "env",
        "variables",
        "use_options",
        "args",
        "GetAltered",
        "env",
        "org",
        "filename",
        "SaveVariables",
        "variables",
        "filename",
        "env",
        "OverwriteUnaltered",
        "env",
        "org",
        "ose",
        "alt",
        "update",
        "chg",
        "alt",
        "env",
        "EnvProxy",
        "env",
        "strict",
        "k",
        "__keys",
        "proxy",
        "k",
        "KeyError",
        "res"
    ],
    "literals": [
        "\"restructuredText\""
    ],
    "variables": [
        "__docformat__",
        "__keys",
        "_rename_dict",
        "_irename_dict",
        "_resubst_dict",
        "_iresubst_dict",
        "ns",
        "ns",
        "ns",
        "ns",
        "rename",
        "irename",
        "resubst",
        "iresubst",
        "rename",
        "irename",
        "resubst",
        "iresubst",
        "proxy",
        "proxy",
        "opt_value",
        "proxy",
        "opt_key",
        "proxy",
        "proxy",
        "res",
        "proxy1",
        "proxy2",
        "v",
        "proxy2",
        "k",
        "result",
        "curval",
        "result",
        "orgval",
        "result",
        "res",
        "envp",
        "orgp",
        "resp",
        "resp",
        "k",
        "chg",
        "envp",
        "orgp",
        "chgp",
        "envp",
        "k",
        "chgp",
        "k",
        "res",
        "envp",
        "orgp",
        "resp",
        "resp",
        "k",
        "resp",
        "k",
        "resp",
        "k",
        "org",
        "alt",
        "chg",
        "proxy",
        "res",
        "res",
        "k"
    ],
    "comments": [
        "",
        "Copyright (c) 2015 by Pawel Tomulik",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in all",
        "copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE",
        "",
        "========================================================================",
        "========================================================================",
        "========================================================================",
        "-------------------------------------------------------------------",
        "-------------------------------------------------------------------",
        "========================================================================",
        "========================================================================",
        "========================================================================",
        "========================================================================",
        "========================================================================",
        "========================================================================",
        "========================================================================",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "========================================================================",
        "========================================================================",
        "========================================================================",
        "========================================================================",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "========================================================================",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "FIXME: why not pass None to environment (currently it's skipped)?",
        "========================================================================",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "TODO: implement priority?",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "note: KeyError can be triggered by env.",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "cur[v] has been created in the meantime",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "Backup the values we've changed.",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "envp[k] may not exist (this handles _undefs)",
        "envp[k] may not exist (this handles _undefs)",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "--------------------------------------------------------------------",
        "Local Variables:",
        "# tab-width:4",
        "# indent-tabs-mode:nil",
        "# End:",
        "vim: set syntax=python expandtab tabstop=4 shiftwidth=4:"
    ],
    "docstrings": [
        "\"\"\"`SConsArguments.Arguments`\n\nTODO: Write documentation\n\"\"\"",
        "\"\"\"Binds *arguments* to their *endpoints* (construction variables,\n    command-line variables and command-line options).\n\n    In fact, the only internal data the object holds is a list of supplementary\n    dictionaries to map the names of variables between the namespace of\n    *arguments* and namespaces of their *endpoints*.\n\n    **Note**:\n\n        In several places we use ``ns`` as placeholder for one of the `ENV`,\n        `VAR` or `OPT` *endpoint* selectors.\n    \"\"\"",
        "\"\"\"Initializes `_Arguments` object from `_ArgumentDeclarations`.\n\n        :Parameters:\n            decls : `_ArgumentDeclarations`\n                declarations of *arguments*,\n        \"\"\"",
        "\"\"\"Initialize empty supplementary dictionaries to empty state. This is\n        internal method and IS **NOT a part of public API**\"\"\"",
        "\"\"\"Initialize supplementary dictionaries according to variable\n        declarations. This is internal method and IS **NOT a part of public\n        API**\"\"\"",
        "\"\"\"Return \"VAR-to-ENV\" proxy. With this proxy you may access\n        construction variables in SCons environment `env` while using keys from\n        `VAR` namespace (command-line variables).\"\"\"",
        "\"\"\"Return \"OPT-to-ENV\" proxy. With this proxy you may access\n        construction variables in SCons environment `env` while using keys from\n        `OPT` namespace (command-line options).\"\"\"",
        "\"\"\"Return proxy to SCons environment `env` which uses *argument* names\n        to access corresponding construction variables in SCons environment\n        `env`.\"\"\"",
        "\"\"\"Return the list of *argument* names.\"\"\"",
        "\"\"\"Map *argument* to a variable from `ENV`, `VAR` or `OPT` namespace.\n        Maps only names (keys), not values.\n\n        :Parameters:\n            ns : int\n                namespace identifier, one of `ENV`, `VAR` or `OPT`,\n            key : string\n                the input key (*argument* name) to be mapped.\n\n        :Return:\n            The name of mapped variable (resultant key) from namespace ``ns``.\n\n        **Example**::\n\n            import SConsArguments\n            decls = SConsArguments.DeclareArguments(\n                foo = { 'env_key' : 'ENV_FOO',\n                        'var_key' : 'VAR_FOO',\n                        'opt_key' : 'OPT_FOO', 'option' : '--foo' },\n                bar = { 'env_key' : 'ENV_BAR',\n                        'var_key' : 'VAR_BAR',\n                        'opt_key' : 'OPT_BAR', 'option' : '--bar' }\n            )\n            args = decls.Commit()\n            assert(args.get_key(SConsArguments.ENV, 'foo') == 'ENV_FOO')\n            assert(args.get_key(SConsArguments.VAR, 'foo') == 'VAR_FOO')\n            assert(args.get_key(SConsArguments.OPT, 'foo') == 'OPT_FOO')\n            assert(args.get_key(SConsArguments.ENV, 'bar') == 'ENV_BAR')\n            assert(args.get_key(SConsArguments.VAR, 'bar') == 'VAR_BAR')\n            assert(args.get_key(SConsArguments.OPT, 'bar') == 'OPT_BAR')\n        \"\"\"",
        "\"\"\"Similar to `get_key(ENV,key)`\"\"\"",
        "\"\"\"Similar to `get_key(VAR,key)`\"\"\"",
        "\"\"\"Similar to `get_key(OPT,key)`\"\"\"",
        "\"\"\"Update construction variables in SCons environment\n        (``env[\"VARIABLE\"]=VALUE``) according to values stored in their\n        corresponding command-line variables (``variable=value``).\n\n        **Note**:\n\n            This function calls the `variables.Update(proxy[,args])`_ method\n            passing `env` proxy (see `_ArgumentsProxy`) to the method in\n            order to enable mappings between ``ENV`` and ``VAR`` namespaces.\n\n        :Parameters:\n            env\n                `SCons environment`_ object to be updated,\n            variables\n                `SCons variables`_ object to take values from\n\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        .. _SCons variables: http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-variables\n        .. _variables.Update(proxy[,args]): http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html#Update\n        \"\"\"",
        "\"\"\"Update construction variables in SCons environment\n        (``env[\"VARIABLE\"]=VALUE``) according to values stored in their\n        corresponding `command-line options`_ (``--option=value``).\n\n        :Parameters:\n            env\n                `SCons environment`_ object to be updated\n\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        .. _command-line options: http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-options\n        \"\"\"",
        "\"\"\"Update construction variables in SCons environment\n        (``env[\"VARIABLE\"]=VALUE``) according to values stored in their\n        corresponding `command-line variables`_ (``variable=value``) and/or\n        `command-line options`_ (``--option=value``).\n\n        :Parameters:\n            env\n                `SCons environment`_ object to update,\n            variables : ``SCons.Variables.Variables`` | None\n                if not ``None``, it should be a `SCons.Variables.Variables`_\n                object with `SCons variables`_ to retrieve values from,\n            use_options : boolean\n                if ``True``, `command-line options`_ are taken into account\n                when updating `env`.\n            args\n                if not ``None``, passed verbatim to `update_env_from_vars()`.\n\n        .. _SCons.Variables.Variables: http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        .. _command-line variables: http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-variables\n        .. _SCons variables: http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-variables\n        .. _command-line options: http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-options\n        \"\"\"",
        "\"\"\"Save the `variables` to file, while mapping appropriately their names.\n\n        :Parameters:\n            variables : ``SCons.Variables.Variables``\n                if not ``None``, it should be an instance of\n                `SCons.Variables.Variables`_; this object is used to save\n                SCons variables,\n            filename : string\n                name of the file to save into\n            env\n                `SCons environment`_ object to update,\n\n        .. _SCons.Variables.Variables: http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        \"\"\"",
        "\"\"\"Generate help text for `variables` using\n        ``variables.GenerateHelpText()``.\n\n        Note:\n            this function handles properly mapping names between namespace\n            of SCons command line variables and namespace of SCons construction\n            variables.\n\n        :Parameters:\n            variables : ``SCons.Variables.Variables``\n                if not ``None``, it should be an instance of\n                `SCons.Variables.Variables`_; this object is used to save\n                SCons variables,\n            env\n                `SCons environment`_ object to update,\n            args\n                other arguments passed verbatim to ``GenerateHelpText()``\n\n        .. _SCons.Variables.Variables: http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        \"\"\"",
        "\"\"\"Get current values of *arguments* stored in environment\n\n        :Parameters:\n            env\n                `SCons environment`_ object to update,\n        :Return:\n            Dict containing current values.\n\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        \"\"\"",
        "\"\"\"Whether variable ``cur[v]`` has changed its value w.r.t. ``org[v]``.\n\n        :Parameters:\n            cur\n                *argument* proxy to `SCons Environment`_ or simply to a\n                dictionary which holds current values of variables. An\n                `_ArgumentsProxy` object.\n            org\n                *argument* proxy to a dictionary containig original values of\n                *arguments*.\n            v\n                *argument* name to be verified.\n\n        :Return:\n            ``True`` or ``False``\n\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        \"\"\"",
        "\"\"\"Return *arguments* stored in `env` which have changed with respect to `org`.\n\n        :Parameters:\n            env\n                `SCons environment`_ object or simply a dictionary which holds\n                current values of *arguments*.\n            org\n                Dict containing original (default) values of variables.\n\n        :Return:\n            Dictionary with *arguments* that changed their value. The keys are\n            in ENV namespace (i.e. they're same as keys in `env`).\n\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        \"\"\"",
        "\"\"\"Overwrite unaltered *arguments* in `env` with corresponding values\n        from `new`.\n\n        For every *argument* stored in `env`, if its value is same as\n        corresponding value in `org` the value in `env` gets replaced with\n        corresponding value in `new`.\n\n        :Parameters:\n            env\n                `SCons environment`_ object or simply a dict which holds\n                curreng values of *arguments*. It's also being updated with new\n                values; the keys in `env` should be in ENV namespace,\n            org\n                Dict containing original (default) values of variables;\n                the keys in `org` should be in ENV namespace,\n            new\n                Dict with new values to be used to update entries in `env`;\n                the keys in `new` should identify *argument* names (they're\n                not in ENV/VAR/OPT namespace as opposite to `env` and `org`).\n\n        :Return:\n            A dictionary containing only the values from `new` that were\n            assigned to `env`.\n\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        \"\"\"",
        "\"\"\"Return result of replacing *arguments* stored in `env` with\n        corresponding values from `new`, while replacing only unaltered\n        values (see `_is_unaltered()`).\n\n        :Parameters:\n            env\n                `SCons environment`_ object or simply a dict which holds\n                current values of *arguments*; the keys in `env` should be in\n                ENV namespace,\n            org\n                Dict containing orginal (default) values of variables;\n                the keys in `org` should be in ENV namespace,\n            new\n                Dict with new values to be used instead of those from `env`;\n                the keys in `new` should identify *argument* names (they're\n                not in ENV/VAR/OPT namespace as opposite to `env` and `org`).\n\n        :Return:\n            New dictionary with values taken from `env` with some of them\n            overwriten by corresponding values from `new`; the returned dict\n            will only contain variables that are present in in this object;\n\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        \"\"\"",
        "\"\"\"Postprocess `variables` and **options** updating variables in\n        `env` and optionally saving them to file.\n\n        This method gathers values from `variables`, command-line options and\n        writes them to `env`. After that it optionally saves the variables\n        to file (if `filename` is given) and updates variables with values\n        from `ose` (only those that were not changed by `variables` nor the\n        command-line options).\n\n        The effect of this method is the following:\n\n        - command line `variables` are handled,\n        - command line options are handled,\n        - command line `variables` are saved to filename if requested,\n        - additional source `ose` (usually ``os.environ``) handled,\n\n        The values from `ose` are not written to file. Also, they influence\n        only variables that were not set by `variables` nor the command-line\n        options. The intent is to not let the variables from OS environment to\n        overwrite these provided by commandline (or retrieved from file).\n\n        **Example**::\n\n            # SConstruct\n            import os\n            from SConsArguments import DeclareArguments\n\n            env = Environment()\n            var = Variables('.scons.variables')\n            decls = DeclareArguments( foo = { 'env_key' : 'foo', 'var_key' : 'foo' } )\n            args = decls.Commit(env, var, False)\n            args.Postprocess(env, var, False, os.environ, filename = '.scons.variables')\n\n            print \"env['foo']: %r\" % env['foo']\n\n        Sample session (the sequence order of the following commands is\n        important)::\n\n            ptomulik@tea:$ rm -f .scons.variables\n\n            ptomulik@tea:$ scons -Q\n            env['foo']: None\n            scons: `.' is up to date.\n\n            ptomulik@tea:$ foo=ose scons -Q\n            env['foo']: 'ose'\n            scons: `.' is up to date.\n\n            ptomulik@tea:$ scons -Q\n            env['foo']: None\n            scons: `.' is up to date.\n\n            ptomulik@tea:$ foo=ose scons -Q foo=var\n            env['foo']: 'var'\n            scons: `.' is up to date.\n\n            ptomulik@tea:$ cat .scons.variables\n            foo = 'var'\n\n            ptomulik@tea:$ scons -Q\n            env['foo']: 'var'\n            scons: `.' is up to date.\n\n            ptomulik@tea:$ foo=ose scons -Q\n            env['foo']: 'var'\n            scons: `.' is up to date.\n\n            ptomulik@tea:$ rm -f .scons.variables\n            ptomulik@tea:$ foo=ose scons -Q\n            env['foo']: 'ose'\n            scons: `.' is up to date.\n\n        :Parameters:\n            env\n                `SCons environment`_ object which holds current values of\n                *arguments*.\n            variables : ``SCons.Variables.Variables`` | None\n                if not ``None``, it should be a `SCons.Variables.Variables`_\n                object with `SCons variables`_ to retrieve values from,\n            use_options : boolean\n                if ``True``, `command-line options`_ are taken into account\n                when updating `env`.\n            ose : dict\n                third source of data, usually taken from ``os.environ``\n            args\n                passed as `args` to `UpdateEnvironment()`.\n            filename : str|None\n                Name of the file to save current values of `variables`.\n                By default (``None``) variables are not saved.\n\n        :Return:\n            New dictionary with only entries updated by either of the data\n            sources (variables, options or ose).\n\n        :Note:\n            Often you will have to preprocess ``os.environ`` before passing it\n            as `ose`. This is necessary especially when your *argument* use\n            ``converter``. In that case you have to pass values from\n            ``os.environ`` through a similar converter too.\n\n        .. _SCons.Variables.Variables: http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        .. _SCons variables: http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-variables\n        .. _command-line options: http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-options\n        \"\"\"",
        "\"\"\"Transform-back variables from ``ENV`` namespace to namespace of\n        *arguments*.\n\n        It is possible, that names of *arguments* are not same as names of\n        their associated construction variables in `env`. This method\n        returns a new dictionary having original *argument* names as keys\n        and with placeholders transformed-back to the namespace of *arguments*.\n\n        **Example**\n\n        .. python::\n\n\n            # SConstruct\n            from SConsArguments import DeclareArguments, UNDEFINED\n\n            env = Environment()\n            decls = DeclareArguments( foo = { 'env_key' : 'env_foo', 'default' : 'default ${foo}' } )\n            args = decls.Commit(env)\n            vars = args.Demangle(env)\n\n            print \"env['foo']: %r\" % env.get('foo', UNDEFINED)\n            print \"env['env_foo']: %r\" % env.get('env_foo', UNDEFINED)\n            print \"vars['foo']: %r\" % vars.get('foo', UNDEFINED)\n\n        The result of running the above SCons script is::\n\n            ptomulik@tea:$ scons -Q\n            env['foo']: UNDEFINED\n            env['env_foo']: 'default ${env_foo}'\n            vars['foo']: 'default ${foo}'\n            scons: `.' is up to date.\n\n        :Parameters:\n            env\n                `SCons environment`_ object or simply a dict which holds\n                current values of *arguments*.\n\n        :Return:\n            New dictionary with keys (and placeholders appearing in values)\n            transformed back to namespace of *arguments*.\n\n        .. _SCons environment:  http://www.scons.org/doc/HTML/scons-user.html#chap-environments\n        \"\"\""
    ],
    "functions": [
        "__reset_supp_dicts",
        "__init_supp_dicts",
        "VarEnvProxy",
        "OptEnvProxy",
        "EnvProxy",
        "get_keys",
        "get_key",
        "get_env_key",
        "get_var_key",
        "get_opt_key",
        "update_env_from_vars",
        "update_env_from_opts",
        "UpdateEnvironment",
        "SaveVariables",
        "GenerateVariablesHelpText",
        "GetCurrentValues",
        "_is_unaltered",
        "GetAltered",
        "OverwriteUnaltered",
        "ReplaceUnaltered",
        "Postprocess",
        "Demangle"
    ],
    "classes": [
        "_Arguments"
    ]
}