{
    "identifiers": [
        "android",
        "accessibilityservice",
        "android",
        "annotation",
        "NonNull",
        "android",
        "app",
        "Service",
        "android",
        "content",
        "Context",
        "android",
        "content",
        "Intent",
        "android",
        "os",
        "IBinder",
        "android",
        "os",
        "Looper",
        "android",
        "os",
        "Message",
        "android",
        "os",
        "RemoteException",
        "android",
        "util",
        "Log",
        "android",
        "view",
        "KeyEvent",
        "android",
        "view",
        "WindowManager",
        "android",
        "view",
        "WindowManagerImpl",
        "android",
        "view",
        "accessibility",
        "AccessibilityEvent",
        "android",
        "view",
        "accessibility",
        "AccessibilityInteractionClient",
        "android",
        "view",
        "accessibility",
        "AccessibilityNodeInfo",
        "android",
        "view",
        "accessibility",
        "AccessibilityWindowInfo",
        "com",
        "android",
        "os",
        "HandlerCaller",
        "com",
        "android",
        "os",
        "SomeArgs",
        "java",
        "util",
        "GESTURE_SWIPE_UP",
        "GESTURE_SWIPE_DOWN",
        "GESTURE_SWIPE_LEFT",
        "GESTURE_SWIPE_RIGHT",
        "GESTURE_SWIPE_LEFT_AND_RIGHT",
        "GESTURE_SWIPE_RIGHT_AND_LEFT",
        "GESTURE_SWIPE_UP_AND_DOWN",
        "GESTURE_SWIPE_DOWN_AND_UP",
        "GESTURE_SWIPE_LEFT_AND_UP",
        "GESTURE_SWIPE_LEFT_AND_DOWN",
        "GESTURE_SWIPE_RIGHT_AND_UP",
        "GESTURE_SWIPE_RIGHT_AND_DOWN",
        "GESTURE_SWIPE_UP_AND_LEFT",
        "GESTURE_SWIPE_UP_AND_RIGHT",
        "GESTURE_SWIPE_DOWN_AND_LEFT",
        "GESTURE_SWIPE_DOWN_AND_RIGHT",
        "SERVICE_INTERFACE",
        "SERVICE_META_DATA",
        "GLOBAL_ACTION_BACK",
        "GLOBAL_ACTION_HOME",
        "GLOBAL_ACTION_RECENTS",
        "GLOBAL_ACTION_NOTIFICATIONS",
        "GLOBAL_ACTION_QUICK_SETTINGS",
        "GLOBAL_ACTION_POWER_DIALOG",
        "LOG_TAG",
        "Callbacks",
        "connectionId",
        "windowToken",
        "gestureId",
        "mConnectionId",
        "mInfo",
        "mWindowToken",
        "mWindowManager",
        "gestureId",
        "AccessibilityInteractionClient",
        "getInstance",
        "getWindows",
        "mConnectionId",
        "AccessibilityInteractionClient",
        "getInstance",
        "getRootInActiveWindow",
        "mConnectionId",
        "action",
        "connection",
        "AccessibilityInteractionClient",
        "getInstance",
        "getConnection",
        "mConnectionId",
        "connection",
        "connection",
        "performGlobalAction",
        "action",
        "re",
        "Log",
        "w",
        "LOG_TAG",
        "re",
        "focus",
        "AccessibilityInteractionClient",
        "getInstance",
        "findFocus",
        "mConnectionId",
        "AccessibilityNodeInfo",
        "ANY_WINDOW_ID",
        "AccessibilityNodeInfo",
        "ROOT_NODE_ID",
        "focus",
        "connection",
        "AccessibilityInteractionClient",
        "getInstance",
        "getConnection",
        "mConnectionId",
        "connection",
        "connection",
        "getServiceInfo",
        "re",
        "Log",
        "w",
        "LOG_TAG",
        "re",
        "info",
        "mInfo",
        "info",
        "sendServiceInfo",
        "connection",
        "AccessibilityInteractionClient",
        "getInstance",
        "getConnection",
        "mConnectionId",
        "mInfo",
        "connection",
        "connection",
        "setServiceInfo",
        "mInfo",
        "mInfo",
        "AccessibilityInteractionClient",
        "getInstance",
        "clearCache",
        "re",
        "Log",
        "w",
        "LOG_TAG",
        "re",
        "Override",
        "ServiceName",
        "NonNull",
        "name",
        "getBaseContext",
        "WINDOW_SERVICE",
        "equals",
        "name",
        "mWindowManager",
        "mWindowManager",
        "getBaseContext",
        "getSystemService",
        "name",
        "mWindowManager",
        "getSystemService",
        "name",
        "Override",
        "intent",
        "getMainLooper",
        "Override",
        "AccessibilityService",
        "onServiceConnected",
        "Override",
        "AccessibilityService",
        "onInterrupt",
        "Override",
        "AccessibilityService",
        "onAccessibilityEvent",
        "Override",
        "connectionId",
        "windowToken",
        "mConnectionId",
        "connectionId",
        "mWindowToken",
        "windowToken",
        "wm",
        "getSystemService",
        "WINDOW_SERVICE",
        "wm",
        "setDefaultToken",
        "windowToken",
        "Override",
        "gestureId",
        "AccessibilityService",
        "onGesture",
        "gestureId",
        "Override",
        "AccessibilityService",
        "onKeyEvent",
        "DO_INIT",
        "DO_ON_INTERRUPT",
        "DO_ON_ACCESSIBILITY_EVENT",
        "DO_ON_GESTURE",
        "DO_CLEAR_ACCESSIBILITY_CACHE",
        "DO_ON_KEY_EVENT",
        "mCaller",
        "mCallback",
        "mConnectionId",
        "context",
        "looper",
        "callback",
        "mCallback",
        "callback",
        "mCaller",
        "context",
        "looper",
        "connection",
        "connectionId",
        "windowToken",
        "message",
        "mCaller",
        "obtainMessageIOO",
        "DO_INIT",
        "connectionId",
        "connection",
        "windowToken",
        "mCaller",
        "sendMessage",
        "message",
        "message",
        "mCaller",
        "obtainMessage",
        "DO_ON_INTERRUPT",
        "mCaller",
        "sendMessage",
        "message",
        "message",
        "mCaller",
        "obtainMessageO",
        "DO_ON_ACCESSIBILITY_EVENT",
        "mCaller",
        "sendMessage",
        "message",
        "gestureId",
        "message",
        "mCaller",
        "obtainMessageI",
        "DO_ON_GESTURE",
        "gestureId",
        "mCaller",
        "sendMessage",
        "message",
        "message",
        "mCaller",
        "obtainMessage",
        "DO_CLEAR_ACCESSIBILITY_CACHE",
        "mCaller",
        "sendMessage",
        "message",
        "Override",
        "sequence",
        "message",
        "mCaller",
        "obtainMessageIO",
        "DO_ON_KEY_EVENT",
        "sequence",
        "mCaller",
        "sendMessage",
        "message",
        "Override",
        "message",
        "message",
        "what",
        "DO_ON_ACCESSIBILITY_EVENT",
        "message",
        "obj",
        "AccessibilityInteractionClient",
        "getInstance",
        "onAccessibilityEvent",
        "mCallback",
        "onAccessibilityEvent",
        "recycle",
        "ise",
        "DO_ON_INTERRUPT",
        "mCallback",
        "onInterrupt",
        "DO_INIT",
        "mConnectionId",
        "message",
        "arg1",
        "args",
        "message",
        "obj",
        "connection",
        "args",
        "arg1",
        "windowToken",
        "args",
        "arg2",
        "args",
        "recycle",
        "connection",
        "AccessibilityInteractionClient",
        "getInstance",
        "addConnection",
        "mConnectionId",
        "connection",
        "mCallback",
        "init",
        "mConnectionId",
        "windowToken",
        "mCallback",
        "onServiceConnected",
        "AccessibilityInteractionClient",
        "getInstance",
        "removeConnection",
        "mConnectionId",
        "mConnectionId",
        "AccessibilityInteractionClient",
        "NO_ID",
        "AccessibilityInteractionClient",
        "getInstance",
        "clearCache",
        "mCallback",
        "init",
        "AccessibilityInteractionClient",
        "NO_ID",
        "DO_ON_GESTURE",
        "gestureId",
        "message",
        "arg1",
        "mCallback",
        "onGesture",
        "gestureId",
        "DO_CLEAR_ACCESSIBILITY_CACHE",
        "AccessibilityInteractionClient",
        "getInstance",
        "clearCache",
        "DO_ON_KEY_EVENT",
        "message",
        "obj",
        "connection",
        "AccessibilityInteractionClient",
        "getInstance",
        "getConnection",
        "mConnectionId",
        "connection",
        "result",
        "mCallback",
        "onKeyEvent",
        "sequence",
        "message",
        "arg1",
        "connection",
        "setOnKeyEventResult",
        "result",
        "sequence",
        "re",
        "recycle",
        "ise",
        "Log",
        "w",
        "LOG_TAG",
        "message",
        "what"
    ],
    "literals": [
        "\"android.accessibilityservice.AccessibilityService\"",
        "\"android.accessibilityservice\"",
        "\"AccessibilityService\"",
        "\"Error while calling performGlobalAction\"",
        "\"Error while getting AccessibilityServiceInfo\"",
        "\"Error while setting AccessibilityServiceInfo\"",
        "\"System services not available to Activities before onCreate()\"",
        "\"Unknown message type \""
    ],
    "variables": [
        "mConnectionId",
        "mInfo",
        "mWindowToken",
        "mWindowManager",
        "mCaller",
        "mCallback",
        "mConnectionId"
    ],
    "comments": [
        "Guarantee that we always return the same window manager instance.",
        "The client may have already obtained the window manager, so",
        "update the default token on whatever manager we gave them.",
        "Make sure the event is recycled.",
        "Make sure the event is recycled."
    ],
    "docstrings": [
        "* Copyright (C) 2009 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* An accessibility service runs in the background and receives callbacks by the system\n * when {@link AccessibilityEvent}s are fired. Such events denote some state transition\n * in the user interface, for example, the focus has changed, a button has been clicked,\n * etc. Such a service can optionally request the capability for querying the content\n * of the active window. Development of an accessibility service requires extending this\n * class and implementing its abstract methods.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about creating AccessibilityServices, read the\n * <a href=\"{@docRoot}guide/topics/ui/accessibility/index.html\">Accessibility</a>\n * developer guide.</p>\n * </div>\n *\n * <h3>Lifecycle</h3>\n * <p>\n * The lifecycle of an accessibility service is managed exclusively by the system and\n * follows the established service life cycle. Additionally, starting or stopping an\n * accessibility service is triggered exclusively by an explicit user action through\n * enabling or disabling it in the device settings. After the system binds to a service it\n * calls {@link AccessibilityService#onServiceConnected()}. This method can be\n * overriden by clients that want to perform post binding setup.\n * </p>\n * <h3>Declaration</h3>\n * <p>\n * An accessibility is declared as any other service in an AndroidManifest.xml but it\n * must also specify that it handles the \"android.accessibilityservice.AccessibilityService\"\n * {@link android.content.Intent}. Failure to declare this intent will cause the system to\n * ignore the accessibility service. Additionally an accessibility service must request the\n * {@link android.Manifest.permission#BIND_ACCESSIBILITY_SERVICE} permission to ensure\n * that only the system\n * can bind to it. Failure to declare this intent will cause the system to ignore the\n * accessibility service. Following is an example declaration:\n * </p>\n * <pre> &lt;service android:name=\".MyAccessibilityService\"\n *         android:permission=\"android.permission.BIND_ACCESSIBILITY_SERVICE\"&gt;\n *     &lt;intent-filter&gt;\n *         &lt;action android:name=\"android.accessibilityservice.AccessibilityService\" /&gt;\n *     &lt;/intent-filter&gt;\n *     . . .\n * &lt;/service&gt;</pre>\n * <h3>Configuration</h3>\n * <p>\n * An accessibility service can be configured to receive specific types of accessibility events,\n * listen only to specific packages, get events from each type only once in a given time frame,\n * retrieve window content, specify a settings activity, etc.\n * </p>\n * <p>\n * There are two approaches for configuring an accessibility service:\n * </p>\n * <ul>\n * <li>\n * Providing a {@link #SERVICE_META_DATA meta-data} entry in the manifest when declaring\n * the service. A service declaration with a meta-data tag is presented below:\n * <pre> &lt;service android:name=\".MyAccessibilityService\"&gt;\n *     &lt;intent-filter&gt;\n *         &lt;action android:name=\"android.accessibilityservice.AccessibilityService\" /&gt;\n *     &lt;/intent-filter&gt;\n *     &lt;meta-data android:name=\"android.accessibilityservice\" android:resource=\"@xml/accessibilityservice\" /&gt;\n * &lt;/service&gt;</pre>\n * <p class=\"note\">\n * <strong>Note:</strong> This approach enables setting all properties.\n * </p>\n * <p>\n * For more details refer to {@link #SERVICE_META_DATA} and\n * <code>&lt;{@link android.R.styleable#AccessibilityService accessibility-service}&gt;</code>.\n * </p>\n * </li>\n * <li>\n * Calling {@link AccessibilityService#setServiceInfo(AccessibilityServiceInfo)}. Note\n * that this method can be called any time to dynamically change the service configuration.\n * <p class=\"note\">\n * <strong>Note:</strong> This approach enables setting only dynamically configurable properties:\n * {@link AccessibilityServiceInfo#eventTypes},\n * {@link AccessibilityServiceInfo#feedbackType},\n * {@link AccessibilityServiceInfo#flags},\n * {@link AccessibilityServiceInfo#notificationTimeout},\n * {@link AccessibilityServiceInfo#packageNames}\n * </p>\n * <p>\n * For more details refer to {@link AccessibilityServiceInfo}.\n * </p>\n * </li>\n * </ul>\n * <h3>Retrieving window content</h3>\n * <p>\n * A service can specify in its declaration that it can retrieve the active window\n * content which is represented as a tree of {@link AccessibilityNodeInfo}. Note that\n * declaring this capability requires that the service declares its configuration via\n * an XML resource referenced by {@link #SERVICE_META_DATA}.\n * </p>\n * <p>\n * For security purposes an accessibility service can retrieve only the content of the\n * currently active window. The currently active window is defined as the window from\n * which was fired the last event of the following types:\n * {@link AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED},\n * {@link AccessibilityEvent#TYPE_VIEW_HOVER_ENTER},\n * {@link AccessibilityEvent#TYPE_VIEW_HOVER_EXIT},\n * In other words, the last window that was shown or the last window that the user has touched\n * during touch exploration.\n * </p>\n * <p>\n * The entry point for retrieving window content is through calling\n * {@link AccessibilityEvent#getSource() AccessibilityEvent.getSource()} of the last received\n * event of the above types or a previous event from the same window\n * (see {@link AccessibilityEvent#getWindowId() AccessibilityEvent.getWindowId()}). Invoking\n * this method will return an {@link AccessibilityNodeInfo} that can be used to traverse the\n * window content which represented as a tree of such objects.\n * </p>\n * <p class=\"note\">\n * <strong>Note</strong> An accessibility service may have requested to be notified for\n * a subset of the event types, thus be unaware that the active window has changed. Therefore\n * accessibility service that would like to retrieve window content should:\n * <ul>\n * <li>\n * Register for all event types with no notification timeout and keep track for the active\n * window by calling {@link AccessibilityEvent#getWindowId()} of the last received event and\n * compare this with the {@link AccessibilityNodeInfo#getWindowId()} before calling retrieval\n * methods on the latter.\n * </li>\n * <li>\n * Prepare that a retrieval method on {@link AccessibilityNodeInfo} may fail since the\n * active window has changed and the service did not get the accessibility event yet. Note\n * that it is possible to have a retrieval method failing even adopting the strategy\n * specified in the previous bullet because the accessibility event dispatch is asynchronous\n * and crosses process boundaries.\n * </li>\n * </ul>\n * </p>\n * <h3>Notification strategy</h3>\n * <p>\n * For each feedback type only one accessibility service is notified. Services are notified\n * in the order of registration. Hence, if two services are registered for the same\n * feedback type in the same package the first one wins. It is possible however, to\n * register a service as the default one for a given feedback type. In such a case this\n * service is invoked if no other service was interested in the event. In other words, default\n * services do not compete with other services and are notified last regardless of the\n * registration order. This enables \"generic\" accessibility services that work reasonably\n * well with most applications to coexist with \"polished\" ones that are targeted for\n * specific applications.\n * </p>\n * <p class=\"note\">\n * <strong>Note:</strong> The event notification timeout is useful to avoid propagating\n * events to the client too frequently since this is accomplished via an expensive\n * interprocess call. One can think of the timeout as a criteria to determine when\n * event generation has settled down.</p>\n * <h3>Event types</h3>\n * <ul>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_CLICKED}</li>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_LONG_CLICKED}</li>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_FOCUSED}</li>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_SELECTED}</li>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED}</li>\n * <li>{@link AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED}</li>\n * <li>{@link AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED}</li>\n * <li>{@link AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_START}</li>\n * <li>{@link AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_END}</li>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_HOVER_ENTER}</li>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_HOVER_EXIT}</li>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_SCROLLED}</li>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED}</li>\n * <li>{@link AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED}</li>\n * <li>{@link AccessibilityEvent#TYPE_ANNOUNCEMENT}</li>\n * <li>{@link AccessibilityEvent#TYPE_GESTURE_DETECTION_START}</li>\n * <li>{@link AccessibilityEvent#TYPE_GESTURE_DETECTION_END}</li>\n * <li>{@link AccessibilityEvent#TYPE_TOUCH_INTERACTION_START}</li>\n * <li>{@link AccessibilityEvent#TYPE_TOUCH_INTERACTION_END}</li>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED}</li>\n * <li>{@link AccessibilityEvent#TYPE_WINDOWS_CHANGED}</li>\n * <li>{@link AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED}</li>\n * </ul>\n * <h3>Feedback types</h3>\n * <ul>\n * <li>{@link AccessibilityServiceInfo#FEEDBACK_AUDIBLE}</li>\n * <li>{@link AccessibilityServiceInfo#FEEDBACK_HAPTIC}</li>\n * <li>{@link AccessibilityServiceInfo#FEEDBACK_AUDIBLE}</li>\n * <li>{@link AccessibilityServiceInfo#FEEDBACK_VISUAL}</li>\n * <li>{@link AccessibilityServiceInfo#FEEDBACK_GENERIC}</li>\n * <li>{@link AccessibilityServiceInfo#FEEDBACK_BRAILLE}</li>\n * </ul>\n * @see AccessibilityEvent\n * @see AccessibilityServiceInfo\n * @see android.view.accessibility.AccessibilityManager",
        "* The user has performed a swipe up gesture on the touch screen.",
        "* The user has performed a swipe down gesture on the touch screen.",
        "* The user has performed a swipe left gesture on the touch screen.",
        "* The user has performed a swipe right gesture on the touch screen.",
        "* The user has performed a swipe left and right gesture on the touch screen.",
        "* The user has performed a swipe right and left gesture on the touch screen.",
        "* The user has performed a swipe up and down gesture on the touch screen.",
        "* The user has performed a swipe down and up gesture on the touch screen.",
        "* The user has performed a left and up gesture on the touch screen.",
        "* The user has performed a left and down gesture on the touch screen.",
        "* The user has performed a right and up gesture on the touch screen.",
        "* The user has performed a right and down gesture on the touch screen.",
        "* The user has performed an up and left gesture on the touch screen.",
        "* The user has performed an up and right gesture on the touch screen.",
        "* The user has performed an down and left gesture on the touch screen.",
        "* The user has performed an down and right gesture on the touch screen.",
        "* The {@link Intent} that must be declared as handled by the service.",
        "* Name under which an AccessibilityService component publishes information\n     * about itself. This meta-data must reference an XML resource containing an\n     * <code>&lt;{@link android.R.styleable#AccessibilityService accessibility-service}&gt;</code>\n     * tag. This is a a sample XML file configuring an accessibility service:\n     * <pre> &lt;accessibility-service\n     *     android:accessibilityEventTypes=\"typeViewClicked|typeViewFocused\"\n     *     android:packageNames=\"foo.bar, foo.baz\"\n     *     android:accessibilityFeedbackType=\"feedbackSpoken\"\n     *     android:notificationTimeout=\"100\"\n     *     android:accessibilityFlags=\"flagDefault\"\n     *     android:settingsActivity=\"foo.bar.TestBackActivity\"\n     *     android:canRetrieveWindowContent=\"true\"\n     *     android:canRequestTouchExplorationMode=\"true\"\n     *     android:canRequestEnhancedWebAccessibility=\"true\"\n     *     . . .\n     * /&gt;</pre>",
        "* Action to go back.",
        "* Action to go home.",
        "* Action to open the recent apps.",
        "* Action to open the notifications.",
        "* Action to open the quick settings.",
        "* Action to open the power long-press dialog.",
        "* @hide",
        "* Callback for {@link android.view.accessibility.AccessibilityEvent}s.\n     *\n     * @param event An event.",
        "* Callback for interrupting the accessibility feedback.",
        "* This method is a part of the {@link AccessibilityService} lifecycle and is\n     * called after the system has successfully bound to the service. If is\n     * convenient to use this method for setting the {@link AccessibilityServiceInfo}.\n     *\n     * @see AccessibilityServiceInfo\n     * @see #setServiceInfo(AccessibilityServiceInfo)",
        "* Called by the system when the user performs a specific gesture on the\n     * touch screen.\n     *\n     * <strong>Note:</strong> To receive gestures an accessibility service must\n     * request that the device is in touch exploration mode by setting the\n     * {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE}\n     * flag.\n     *\n     * @param gestureId The unique id of the performed gesture.\n     *\n     * @return Whether the gesture was handled.\n     *\n     * @see #GESTURE_SWIPE_UP\n     * @see #GESTURE_SWIPE_UP_AND_LEFT\n     * @see #GESTURE_SWIPE_UP_AND_DOWN\n     * @see #GESTURE_SWIPE_UP_AND_RIGHT\n     * @see #GESTURE_SWIPE_DOWN\n     * @see #GESTURE_SWIPE_DOWN_AND_LEFT\n     * @see #GESTURE_SWIPE_DOWN_AND_UP\n     * @see #GESTURE_SWIPE_DOWN_AND_RIGHT\n     * @see #GESTURE_SWIPE_LEFT\n     * @see #GESTURE_SWIPE_LEFT_AND_UP\n     * @see #GESTURE_SWIPE_LEFT_AND_RIGHT\n     * @see #GESTURE_SWIPE_LEFT_AND_DOWN\n     * @see #GESTURE_SWIPE_RIGHT\n     * @see #GESTURE_SWIPE_RIGHT_AND_UP\n     * @see #GESTURE_SWIPE_RIGHT_AND_LEFT\n     * @see #GESTURE_SWIPE_RIGHT_AND_DOWN",
        "* Callback that allows an accessibility service to observe the key events\n     * before they are passed to the rest of the system. This means that the events\n     * are first delivered here before they are passed to the device policy, the\n     * input method, or applications.\n     * <p>\n     * <strong>Note:</strong> It is important that key events are handled in such\n     * a way that the event stream that would be passed to the rest of the system\n     * is well-formed. For example, handling the down event but not the up event\n     * and vice versa would generate an inconsistent event stream.\n     * </p>\n     * <p>\n     * <strong>Note:</strong> The key events delivered in this method are copies\n     * and modifying them will have no effect on the events that will be passed\n     * to the system. This method is intended to perform purely filtering\n     * functionality.\n     * <p>\n     *\n     * @param event The event to be processed.\n     * @return If true then the event will be consumed and not delivered to\n     *         applications, otherwise it will be delivered as usual.",
        "* Gets the windows on the screen. This method returns only the windows\n     * that a sighted user can interact with, as opposed to all windows.\n     * For example, if there is a modal dialog shown and the user cannot touch\n     * anything behind it, then only the modal window will be reported\n     * (assuming it is the top one). For convenience the returned windows\n     * are ordered in a descending layer order, which is the windows that\n     * are higher in the Z-order are reported first. Since the user can always\n     * interact with the window that has input focus by typing, the focused\n     * window is always returned (even if covered by a modal window).\n     * <p>\n     * <strong>Note:</strong> In order to access the windows your service has\n     * to declare the capability to retrieve window content by setting the\n     * {@link android.R.styleable#AccessibilityService_canRetrieveWindowContent}\n     * property in its meta-data. For details refer to {@link #SERVICE_META_DATA}.\n     * Also the service has to opt-in to retrieve the interactive windows by\n     * setting the {@link AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS}\n     * flag.\n     * </p>\n     *\n     * @return The windows if there are windows and the service is can retrieve\n     *         them, otherwise an empty list.",
        "* Gets the root node in the currently active window if this service\n     * can retrieve window content. The active window is the one that the user\n     * is currently touching or the window with input focus, if the user is not\n     * touching any window.\n     * <p>\n     * <strong>Note:</strong> In order to access the root node your service has\n     * to declare the capability to retrieve window content by setting the\n     * {@link android.R.styleable#AccessibilityService_canRetrieveWindowContent}\n     * property in its meta-data. For details refer to {@link #SERVICE_META_DATA}.\n     * </p>\n     *\n     * @return The root node if this service can retrieve window content.",
        "* Performs a global action. Such an action can be performed\n     * at any moment regardless of the current application or user\n     * location in that application. For example going back, going\n     * home, opening recents, etc.\n     *\n     * @param action The action to perform.\n     * @return Whether the action was successfully performed.\n     *\n     * @see #GLOBAL_ACTION_BACK\n     * @see #GLOBAL_ACTION_HOME\n     * @see #GLOBAL_ACTION_NOTIFICATIONS\n     * @see #GLOBAL_ACTION_RECENTS",
        "* Find the view that has the specified focus type. The search is performed\n     * across all windows.\n     * <p>\n     * <strong>Note:</strong> In order to access the windows your service has\n     * to declare the capability to retrieve window content by setting the\n     * {@link android.R.styleable#AccessibilityService_canRetrieveWindowContent}\n     * property in its meta-data. For details refer to {@link #SERVICE_META_DATA}.\n     * Also the service has to opt-in to retrieve the interactive windows by\n     * setting the {@link AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS}\n     * flag.Otherwise, the search will be performed only in the active window.\n     * </p>\n     *\n     * @param focus The focus to find. One of {@link AccessibilityNodeInfo#FOCUS_INPUT} or\n     *         {@link AccessibilityNodeInfo#FOCUS_ACCESSIBILITY}.\n     * @return The node info of the focused view or null.\n     *\n     * @see AccessibilityNodeInfo#FOCUS_INPUT\n     * @see AccessibilityNodeInfo#FOCUS_ACCESSIBILITY",
        "* Gets the an {@link AccessibilityServiceInfo} describing this\n     * {@link AccessibilityService}. This method is useful if one wants\n     * to change some of the dynamically configurable properties at\n     * runtime.\n     *\n     * @return The accessibility service info.\n     *\n     * @see AccessibilityServiceInfo",
        "* Sets the {@link AccessibilityServiceInfo} that describes this service.\n     * <p>\n     * Note: You can call this method any time but the info will be picked up after\n     *       the system has bound to this service and when this method is called thereafter.\n     *\n     * @param info The info.",
        "* Sets the {@link AccessibilityServiceInfo} for this service if the latter is\n     * properly set and there is an {@link IAccessibilityServiceConnection} to the\n     * AccessibilityManagerService.",
        "* Implement to return the implementation of the internal accessibility\n     * service interface.",
        "* Implements the internal {@link IAccessibilityServiceClient} interface to convert\n     * incoming calls to it back to calls on an {@link AccessibilityService}.\n     *\n     * @hide",
        "syncHandler",
        "ignore - best effort",
        "ignore",
        "ignore - best effort"
    ],
    "functions": [
        "onAccessibilityEvent",
        "onInterrupt",
        "onServiceConnected",
        "init",
        "onGesture",
        "onKeyEvent",
        "onAccessibilityEvent",
        "onInterrupt",
        "onServiceConnected",
        "onGesture",
        "onKeyEvent",
        "getWindows",
        "AccessibilityNodeInfo",
        "getRootInActiveWindow",
        "performGlobalAction",
        "AccessibilityNodeInfo",
        "findFocus",
        "AccessibilityServiceInfo",
        "getServiceInfo",
        "setServiceInfo",
        "sendServiceInfo",
        "getSystemService",
        "IBinder",
        "onBind",
        "onServiceConnected",
        "onInterrupt",
        "onAccessibilityEvent",
        "init",
        "onGesture",
        "onKeyEvent",
        "IAccessibilityServiceClientWrapper",
        "init",
        "onInterrupt",
        "onAccessibilityEvent",
        "onGesture",
        "clearAccessibilityCache",
        "onKeyEvent",
        "executeMessage"
    ],
    "classes": [
        "AccessibilityService",
        "IAccessibilityServiceClientWrapper"
    ]
}