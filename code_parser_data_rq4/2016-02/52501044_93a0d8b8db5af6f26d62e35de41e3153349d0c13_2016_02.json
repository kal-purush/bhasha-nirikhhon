{
    "identifiers": [
        "myUtil",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "arr",
        "min_idx",
        "min",
        "POSITIVE_INFINITY",
        "i",
        "i",
        "arr",
        "length",
        "i",
        "arr",
        "i",
        "min",
        "min_idx",
        "i",
        "min",
        "arr",
        "i",
        "min_idx",
        "arr",
        "max_idx",
        "max",
        "NEGATIVE_INFINITY",
        "i",
        "i",
        "arr",
        "length",
        "i",
        "arr",
        "i",
        "max",
        "max_idx",
        "i",
        "max",
        "arr",
        "i",
        "max_idx",
        "start",
        "end",
        "arr",
        "end",
        "start",
        "i",
        "start",
        "i",
        "end",
        "i",
        "arr",
        "i",
        "start",
        "i",
        "arr",
        "a1",
        "a2",
        "set1",
        "Arrays",
        "asList",
        "a1",
        "set2",
        "Arrays",
        "asList",
        "a2",
        "SetOps",
        "isEqual",
        "set1",
        "set2",
        "a1",
        "a2",
        "Arrays",
        "sort",
        "a1",
        "Arrays",
        "sort",
        "a2",
        "Arrays",
        "equals",
        "a1",
        "a2",
        "arr",
        "v",
        "i",
        "all_smaller",
        "all_smaller",
        "i",
        "arr",
        "length",
        "i",
        "all_smaller",
        "arr",
        "i",
        "v",
        "all_smaller"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "pre: start <= end",
        "create consecutive integers from start (inclusive) up to end (exclusive)",
        "TODO Auto-generated method stub"
    ],
    "docstrings": [
        "* Check if two arrays are actually the same set, only different in order \n\t * i.e. they are two different permutations of the same set\n\t *  (e.g. {3,2,1} is the same as {1,2,3}) \n\t *  Idea: their sorted versions should be the same\n\t * @param a1\n\t * @param a2\n\t * @return"
    ],
    "functions": [
        "whichMin",
        "whichMax",
        "intsInRange",
        "isEqual",
        "isEqual",
        "allLessThan"
    ],
    "classes": [
        "ArrayOps"
    ]
}