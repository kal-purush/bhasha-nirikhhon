{
    "identifiers": [
        "recognition",
        "shape",
        "shape",
        "recognition",
        "fc",
        "fc",
        "sc",
        "sc",
        "obj",
        "CanvasStyle",
        "recognition",
        "shape",
        "recognition",
        "shape",
        "ix",
        "ix",
        "iy",
        "iy",
        "cp1x",
        "cp1x",
        "cp1y",
        "cp1y",
        "cp2x",
        "cp2x",
        "cp2y",
        "cp2y",
        "x",
        "x",
        "y",
        "y",
        "close",
        "close",
        "CanvasStyle",
        "recognition",
        "shape",
        "recognition",
        "shape",
        "x",
        "x",
        "y",
        "y",
        "w",
        "w",
        "h",
        "h",
        "r",
        "r",
        "sa",
        "sa",
        "sa",
        "ea",
        "ea",
        "ea",
        "close",
        "close",
        "close",
        "CanvasStyle",
        "recognition",
        "shape",
        "recognition",
        "shape",
        "arr",
        "arr",
        "CanvasStyle",
        "recognition",
        "shape",
        "recognition",
        "shape",
        "image",
        "image",
        "x",
        "x",
        "x",
        "y",
        "y",
        "y",
        "w",
        "w",
        "w",
        "h",
        "h",
        "h",
        "sx",
        "sx",
        "sx",
        "sy",
        "sy",
        "sy",
        "sw",
        "sw",
        "sw",
        "sh",
        "sh",
        "sh",
        "obj",
        "obj",
        "fps",
        "fn",
        "obj",
        "id",
        "height",
        "height",
        "oCanvas",
        "width",
        "width",
        "oCanvas",
        "oCanvas",
        "alert",
        "oCanvas",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "i",
        "i",
        "i",
        "setTimeout",
        "arguments",
        "fn",
        "fn",
        "fn",
        "fps",
        "fps",
        "clearTimeout",
        "obj",
        "obj",
        "i",
        "i",
        "obj",
        "i",
        "width",
        "width",
        "width",
        "height",
        "height",
        "height",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "initpos",
        "initpos",
        "i",
        "obj",
        "i",
        "obj",
        "i",
        "obj",
        "i",
        "obj",
        "Image",
        "oImg",
        "obj",
        "oImg",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "oStage",
        "oImg",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "w",
        "h",
        "obj",
        "obj",
        "oStage",
        "oImg",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "obj",
        "oStage",
        "oImg",
        "obj",
        "obj",
        "shape",
        "shape",
        "shape",
        "shape",
        "CanvasStage",
        "shape",
        "CanvasShape",
        "shape",
        "shape",
        "CanvasBezier",
        "shape",
        "shape",
        "CanvasLine",
        "shape",
        "shape",
        "CanvasImage",
        "shape",
        "a",
        "b",
        "a",
        "b",
        "arr",
        "i",
        "arr",
        "arr",
        "i",
        "arr",
        "arr",
        "a",
        "b",
        "f",
        "arr",
        "arr",
        "x",
        "x",
        "x",
        "v",
        "v"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"bezier\"",
        "string",
        "\"circle\"",
        "string",
        "\"line\"",
        "string",
        "string",
        "\"image\"",
        "\"sorry,you browser does not support html canvas element\"",
        "'2d'",
        "\"function\"",
        "'circle'",
        "'rect'",
        "'bezier'",
        "'quadratic'",
        "'line'",
        "'error:shape'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "oCanvas",
        "initpos",
        "i",
        "oImg",
        "oStage",
        "w",
        "h",
        "a",
        "b",
        "f"
    ],
    "comments": [
        "canvas grunt store",
        "形状/贝塞尔 父类 : 样式 类",
        "由 最终类 中方法 判别 标识 独立性",
        "初始化 创建 时 默认不允许连缀",
        "形状/贝塞尔 接口      返回定义 可以直接定义为 某个接口 或者 是 某个实体类",
        "如果使用 接口可选属性 方案 但是 对比我这是不确定传入的参数，所以不适用",
        "返回值为 void 的接口 可以 重定义为 其他类型 的返回值 / 接口中的返回值可以被重定义",
        "贝塞尔曲线 类",
        "moveTo 的 初始点位",
        "控制点位",
        "结束点位",
        "默认绘制完成后关闭",
        "quadratic / bezier",
        "数据解构 默认为 可选参数",
        "形状 类",
        "默认绘制开始前关闭",
        "circle rect                          : arc:: 定义 特殊 arcTo    漏了画线",
        "继承 父类 构造函数",
        "解构 接收",
        "线 类",
        "默认绘制前关闭 并且 暂时 不提供 开关方案 与 语法相关 ...arr",
        "quadratic / bezier",
        "3.可能需要增加 close 的开关限制",
        "设立 独立 追加方案 : 针对 舞台类",
        "图片类 重构 样式设置",
        "待定",
        "舞台接口",
        "目前 支持 方法连缀 不支持 一次性多个图形的操作",
        "追加图片 方案",
        "默认 30 毫秒",
        "所有被添加的元素 集合组",
        "临时 集合组 过滤 aItem 配合使用",
        "1.此处 优化 方案   默认全部清空 可 重置 h,w 值",
        "检测 canvas 的支持",
        "不能解构 区别: 接下来需要 堆指向支持 ? 暂时 不支持一次性多个添加",
        "暂时不加 空间 防止 降低 灵活度",
        "返回 不为真 ，结束",
        "添加进 集合组",
        "默认 整张画布 全部 更新",
        "清空之后 重新 画布 添加 图形",
        "临时数组 记录 图形",
        "替换 集合组",
        "执行 引用函数 tickStage",
        "绑定 画布 更新",
        "2.目前 不对 机制 进行 错误判别",
        "关闭定时器 之前 在执行一次 ,让图形到满足关闭的位置",
        "情况: 关闭之前 规整,每次重新绘制 规整",
        "提供 在初始化 之后 更改参数的方式",
        "并不改变 canvas 本身 只是提供 清空范围参数",
        "封装   绘制过程",
        "形状判别       图形拓展？",
        "追加 图片 方案",
        "只 提供 new Image 方案",
        "判定 如果参数不够",
        "sx,sy,sw,sh,dx,dy,dw,dh    图片源的切割 以及 在canvas 中的位置",
        "最终接口",
        "定义舞台",
        "定义形状",
        "定义贝塞尔曲线",
        "定义线条",
        "定义图片",
        "计算 独立标识符",
        "V 0.1\n*\n* 1.创建一个舞台\n* 2.定义一个形状,此时只是定义记录相关参数（shape）\n* 3.定义形状的其他参数 (x,y,w,h)\n* 4.追加到舞台 (此时根据这个形状之前的相关参数,将其创建 添加进舞台)\n*\n*实现原理: 利用对象属性的形式 来 完成相关参数的记录 与 创建.\n*\n*",
        "V 0.2\n*  1.定义  舞台/形状 等 接口 并创建实现接口的实体类\n*  2.为实体类 提供可供使用的方法等\n*  3.定义 终极接口 以及 集成 其他实体类的 最终类\n*\n*  实现原理: 利用每次返回对象 , 堆指向原理\n*\n*",
        "V 0.3\n*  1.动态的实现: 提供所有 需要绘制对象 , 每次 利用定时器 重绘\n*  2.特殊 需要变动的 , 将新的变动值 代替就的变动值 , 然后 重绘\n*\n*  实现原理: 在最终类中 整合 并 提供 更新画布 方案\n*  修改实现方案: 由 舞台类 绑定更新 机制 , 每次 重新 回调 更新 机制 按照延迟定时器原则\n*\n*",
        "V 0.4\n*   1.在最终类中使用标识符 完成对每个图形独立化的确认\n*   2.抽离 贝塞尔/形状类 的相同部分 建立父类 并 整合 接口\n*   3.支持 正常情况下 各实例的方法连缀\n*\n*   实现原理: 继承 , 方法结束后返回 实例对象\n*\n*",
        "V 0.5\n*   1.语法方案: 基于 es6 数据解构.\n*   2.除了 舞台类 其他 类 全部 只定义相关参数,不进行 相关绘制\n*\n*   缺陷: 1. 每次新建一个形状 都必须 指定样式 , 无法继承之前的样式 ？针对 fc,sc\n*           造成原因: 每个都是独立的,相关的样式信息 记录在 形状类,并不是在舞台类\n*           解决方案: 可以通过fc,sc样式在舞台类中 共享 解决，但是这就无法判别 是否需要显示\n*           // 继续使用,现有方案.\n*         2. 追加 线条 类型 , 并且考虑是否 追加 在 一个路径结束之前 允许 多个 形状连接 绘制？\n*           ??? : 应该 不考虑 : 每次新开一个路径 开始绘制, 允许重叠 但是 不允许 一个路径多个形状链接,除非是 线条型\n*           // 线条型 允许 传递多个坐标点 进行 连接绘制,并且默认自动闭合 路径\n*         3. 追加: 在绘制结束之前 回调函数 来 增加 灵活性/可拓展性\n*         4. 追加 多图形重叠后 的 参数 : globalCompositeOperation\n*         5. 舞台类中增加 新方法: 追加图片 方案    / 图片 与 形状/贝塞尔等 追加 方案分离\n*\n*",
        "测试 ts 对 es6 的支持",
        "支持",
        "传入的是数组 自动解成 多个单独的参数 / 传入的是多个参数 自动合并成一个数组",
        "支持",
        "支持",
        "支持",
        "支持",
        "支持",
        "export / import                                  // 支持 但与 原生 有 区别",
        "fnF (){                                               // 不支持 promise 对象",
        "var promise = new Promise(function(resolve,reject){",
        "if(true){",
        "resolve(1);",
        "}else{",
        "reject(2);",
        "}",
        "});",
        "}",
        "fnE (){                                            // 不支持",
        "var s = new Set();",
        "[1,2,3,4,5].map(x=>s.add(x));",
        "for (let i of s){",
        "console.log(i);",
        "}",
        "}",
        "fnD = value => value.sort(function(a,b){return a-b});             // 有待在测试",
        "function* fnA(){                                  // Generator 对象，不支持",
        "yield \"hello\";",
        "}",
        "fnA (){                                            // 不支持",
        "var map = new Map();",
        "map.set('aa','aaa1');",
        "map.set('bbb','vvvv2');",
        "for(let [key,value] of map){",
        "console.log(key+\"is\"+value);",
        "}",
        "}",
        "createArrayFill (){                                     // 不支持",
        "return [1,2,3,4].fill(7);",
        "}",
        "createArrayForm (){                                     // 不支持",
        "let arr = [1,2,3,4,5,6];",
        "return Array.from(arr,i=>i*i);",
        "}",
        "createArray (){                                         // 不支持",
        "var arr = [1,2,3,4,5,6];",
        "var b =  [for (i of arr) i*i];",
        "return b;",
        "}"
    ],
    "docstrings": [
        "* Created by zhen on 2016/1/29.",
        "* fnC(arr){\n     * arr.map(x){\n     * return x*x;}\n     * }"
    ],
    "functions": [
        "setStyle",
        "setOption",
        "setOption",
        "setOption",
        "setOption",
        "setStyle",
        "appendShare",
        "updateStage",
        "tickStage",
        "setFps",
        "stopStage",
        "removeShare",
        "stageOption",
        "stageOption",
        "shapeSwitchDraw",
        "appendImage",
        "createStyle",
        "createArguments",
        "createArray2",
        "deCreateArray"
    ],
    "classes": [
        "CanvasStyle",
        "CanvasBezier",
        "CanvasShape",
        "CanvasLine",
        "CanvasImage",
        "CanvasStage",
        "CanvasStore",
        "Test"
    ]
}