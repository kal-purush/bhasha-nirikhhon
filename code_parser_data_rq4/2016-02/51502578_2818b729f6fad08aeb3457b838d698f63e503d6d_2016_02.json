{
    "identifiers": [
        "re",
        "MySQLdb",
        "mdb",
        "pymongo",
        "MongoClient",
        "LSI_similarities",
        "MongoClient",
        "client",
        "uriref",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "compile",
        "uriref",
        "re",
        "compile",
        "re",
        "compile",
        "literal",
        "litinfo",
        "unicode",
        "Node",
        "Node",
        "Node",
        "cls",
        "lit",
        "lang",
        "dtype",
        "lit",
        "unicode",
        "__new__",
        "cls",
        "n",
        "s",
        "p",
        "o",
        "length",
        "LSI_similarities",
        "lsi_main",
        "o",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "compile",
        "s",
        "s",
        "r_safe",
        "match",
        "s",
        "m",
        "s",
        "m",
        "end",
        "result",
        "append",
        "m",
        "group",
        "r_quot",
        "match",
        "s",
        "m",
        "s",
        "result",
        "append",
        "quot",
        "m",
        "group",
        "r_uniquot",
        "match",
        "s",
        "m",
        "s",
        "m",
        "end",
        "m",
        "groups",
        "u",
        "U",
        "codepoint",
        "ParseError",
        "codepoint",
        "result",
        "append",
        "unichr",
        "codepoint",
        "s",
        "startswith",
        "ParseError",
        "s",
        "ParseError",
        "s",
        "unicode",
        "join",
        "result",
        "validate",
        "s",
        "s",
        "decode",
        "re",
        "compile",
        "uri",
        "r_hibyte",
        "sub",
        "m",
        "ord",
        "m",
        "group",
        "uri",
        "validate",
        "uri",
        "uri",
        "sink",
        "sink",
        "sink",
        "Sink",
        "f",
        "hasattr",
        "f",
        "ParseError",
        "f",
        "readline",
        "line",
        "parseline",
        "ParseError",
        "ParseError",
        "line",
        "sink",
        "s",
        "isinstance",
        "s",
        "basestring",
        "ParseError",
        "cStringIO",
        "StringIO",
        "StringIO",
        "f",
        "write",
        "s",
        "f",
        "seek",
        "parse",
        "f",
        "buffer",
        "file",
        "read",
        "bufsiz",
        "buffer",
        "buffer",
        "r_line",
        "match",
        "buffer",
        "m",
        "buffer",
        "m",
        "end",
        "m",
        "group",
        "file",
        "read",
        "bufsiz",
        "buffer",
        "ParseError",
        "buffer",
        "buffer",
        "eat",
        "r_wspace",
        "line",
        "line",
        "startswith",
        "subject",
        "eat",
        "r_wspaces",
        "predicate",
        "eat",
        "r_wspaces",
        "eat",
        "r_tail",
        "line",
        "ParseError",
        "sink",
        "triple",
        "subject",
        "predicate",
        "token",
        "line",
        "startswith",
        "token",
        "pattern",
        "pattern",
        "match",
        "line",
        "m",
        "ParseError",
        "pattern",
        "line",
        "m",
        "end",
        "m",
        "uriref",
        "nodeid",
        "subj",
        "ParseError",
        "subj",
        "uriref",
        "pred",
        "ParseError",
        "pred",
        "uriref",
        "nodeid",
        "literal",
        "objt",
        "ParseError",
        "objt",
        "peek",
        "eat",
        "r_uriref",
        "group",
        "unquote",
        "uri",
        "uriquote",
        "uri",
        "URI",
        "uri",
        "peek",
        "bNode",
        "eat",
        "r_nodeid",
        "group",
        "peek",
        "eat",
        "r_literal",
        "groups",
        "lang",
        "dtype",
        "ParseError",
        "unquote",
        "lit",
        "Literal",
        "lit",
        "lang",
        "dtype",
        "uri",
        "urllib",
        "NTriplesParser",
        "urllib",
        "urlopen",
        "uri",
        "parser",
        "parse",
        "u",
        "u",
        "close",
        "sink",
        "length",
        "sys",
        "len",
        "sys",
        "argv",
        "parseURI",
        "sys",
        "argv",
        "__doc__",
        "main"
    ],
    "literals": [
        "\"wiki\"",
        "r'<([^:]+:[^\\s\"<>]+)>'",
        "r'\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"'",
        "r'(?:@([a-z]+(?:-[a-z0-9]+)*)|\\^\\^'",
        "r')?'",
        "r'([^\\r\\n]*)(?:\\r\\n|\\r|\\n)'",
        "r'[ \\t]*'",
        "r'[ \\t]+'",
        "r'[ \\t]*\\.[ \\t]*'",
        "r'_:([A-Za-z][A-Za-z0-9]*)'",
        "'t'",
        "'\\t'",
        "'n'",
        "'\\n'",
        "'r'",
        "'\\r'",
        "'\"'",
        "'\"'",
        "'\\\\'",
        "'\\\\'",
        "r'([\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]+)'",
        "r'\\\\(t|n|r|\"|\\\\)'",
        "r'\\\\u([0-9A-F]{4})|\\\\U([0-9A-F]{8})'",
        "\"Disallowed codepoint: %08X\"",
        "'\\\\'",
        "\"Illegal escape at: %s...\"",
        "\"Illegal literal character: %r\"",
        "''",
        "'unicode-escape'",
        "r'([\\x80-\\xFF])'",
        "'%%%02X'",
        "'read'",
        "\"Item to parse must be a file-like object.\"",
        "''",
        "\"Invalid line: %r\"",
        "\"Item to parse must be a string instance.\"",
        "\"EOF in line\"",
        "'#'",
        "\"Trailing garbage\"",
        "\"Failed to eat %s\"",
        "\"Subject must be uriref or nodeID\"",
        "\"Predicate must be uriref\"",
        "\"Unrecognised object type\"",
        "'<'",
        "'_'",
        "'\"'",
        "\"Can't have both a language and a datatype\"",
        "'Length of input:'",
        "\"__main__\""
    ],
    "variables": [
        "client",
        "db",
        "col",
        "uriref",
        "literal",
        "litinfo",
        "r_line",
        "r_wspace",
        "r_wspaces",
        "r_tail",
        "r_uriref",
        "r_nodeid",
        "r_literal",
        "bufsiz",
        "validate",
        "n",
        "length",
        "quot",
        "r_safe",
        "r_quot",
        "r_uniquot",
        "result",
        "m",
        "s",
        "m",
        "s",
        "m",
        "s",
        "u",
        "U",
        "codepoint",
        "r_hibyte",
        "sink",
        "sink",
        "file",
        "buffer",
        "line",
        "f",
        "buffer",
        "buffer",
        "m",
        "buffer",
        "buffer",
        "subject",
        "predicate",
        "m",
        "line",
        "subj",
        "pred",
        "objt",
        "uri",
        "uri",
        "uri",
        "lit",
        "lang",
        "dtype",
        "lit",
        "parser",
        "u",
        "sink"
    ],
    "comments": [
        "import gensim_test",
        "str(lang) + ' ' + str(dtype) + ' ' + lit",
        "dumper.insert(col,s,p,o)",
        "N-Triples lines end in either CRLF, CR, or LF",
        "Therefore, we can't just use f.readline()",
        "the more likely prospect",
        "The line is empty or a comment",
        "@@ Why can't we get the original pattern?",
        "@@ Consider using dictionary cases",
        "global col",
        "col=collection",
        "for triple in sink:",
        "print triple"
    ],
    "docstrings": [
        "\"\"\"\nN-Triples Parser\nCopyright 2004, Sean B. Palmer, inamidst.com\nLicensed under GPL 2, W3C, BSD, MIT, or EFL 2\nDocumentation: \n   http://inamidst.com/proj/rdf/ntriples-doc\nCommand line usage: \n   ./ntriples.py <URI>    - parses URI as N-Triples\n   ./ntriples.py --help   - prints out this help message\n# @@ fully empty document?\n\"\"\"",
        "\"\"\"Unquote an N-Triples string.\"\"\"",
        "\"\"\"An N-Triples Parser.\n      Usage: \n         p = NTriplesParser(sink=MySink())\n         sink = p.parse(f) # file; use parsestring for a string\n   \"\"\"",
        "\"\"\"Parse f as an N-Triples file.\"\"\"",
        "\"\"\"Parse s as an N-Triples string.\"\"\"",
        "\"\"\"Read an N-Triples line from buffered input.\"\"\""
    ],
    "functions": [
        "__new__",
        "triple",
        "unquote",
        "unquote",
        "uriquote",
        "uriquote",
        "parse",
        "parsestring",
        "readline",
        "parseline",
        "peek",
        "eat",
        "subject",
        "predicate",
        "uriref",
        "nodeid",
        "literal",
        "parseURI",
        "main"
    ],
    "classes": [
        "Node",
        "URI",
        "bNode",
        "Literal",
        "Sink",
        "ParseError",
        "NTriplesParser"
    ]
}