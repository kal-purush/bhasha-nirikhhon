{
    "identifiers": [
        "path",
        "defaultPath",
        "overridePath",
        "name",
        "defaultPath",
        "overridePath",
        "name",
        "name",
        "name",
        "defaultPath",
        "overridePath",
        "name",
        "key",
        "config",
        "key",
        "e",
        "config",
        "paths",
        "config",
        "values",
        "keys",
        "values",
        "keys",
        "keys",
        "values",
        "key",
        "keys",
        "values",
        "key",
        "values",
        "key",
        "filePath",
        "filePath",
        "filePath",
        "require",
        "filePath",
        "e",
        "filePath",
        "filePath",
        "paths",
        "paths",
        "paths",
        "paths",
        "config",
        "config",
        "config",
        "config",
        "defaultPath",
        "path",
        "config",
        "config",
        "overridePath",
        "path",
        "config",
        "path",
        "defaultPath",
        "configPath",
        "file",
        "overridePath",
        "path",
        "overridePath",
        "configPath",
        "file",
        "process",
        "path",
        "overridePath",
        "configPath",
        "file",
        "process",
        "key",
        "key",
        "splitted",
        "key",
        "splitted",
        "keys",
        "splitted",
        "keys",
        "key",
        "key",
        "filePath",
        "keys",
        "keys",
        "filePath",
        "keys",
        "keys"
    ],
    "literals": [
        "'path'",
        "string",
        "string",
        "'default'",
        "string",
        "string",
        "string",
        "\"Namespace already exists. Use 'overrideNamespace()' instead.\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "''",
        "'/'",
        "'/'",
        "'/'",
        "'.'",
        "string",
        "''",
        "':'",
        "':'",
        "\"Namespace not registered\"",
        "'/'",
        "'/'",
        "'.'",
        "'default'"
    ],
    "variables": [
        "config",
        "paths",
        "values",
        "key",
        "defaultPath",
        "overridePath",
        "configPath",
        "file",
        "keys",
        "filePath",
        "splitted"
    ],
    "comments": [
        "var configPath   = config.filePath.length > 0 ? '/' + config.filePath.join('/') : '/';"
    ],
    "docstrings": [
        "* Config class",
        "* @type {object}",
        "* @type {object}",
        "* @constructor\n     * @param {string} defaultPath - Path for default configuration\n     * @param {string} overridePath - Path for default configuration overrides",
        "* Register a configuration namespace\n     * @param {string} name - Namepsace name\n     * @param {string} defaultPath - Path for namespaced configuration\n     * @param {string} overridePath - Path for namespaced configuration overrides",
        "* Overrides a configuration namespace\n     * @param {string} name - Namepsace name\n     * @param {string} defaultPath - Path for namespaced configuration\n     * @param {string} overridePath - Path for namespaced configuration overrides",
        "* Get a configuration entry\n     * @param {string} key - Config key\n     * @returns {any} Config value",
        "* Find a configuration entry\n     * @param {string[]} keys\n     * @param {object} values\n     * @returns {any} Config value",
        "* Load a configuration file\n     * @param {string} filePath - Config file path\n     * @returns {object} Config object",
        "* Merges the default, override and env configurations\n     * @param {object} config - Config paths\n     * @returns {object} Merged configs",
        "* Identifies configuration paths\n     * @param {object} config\n     * @returns {object} Object with \"default\", \"override\"\" and \"env\" paths",
        "* Splits the key into namespace, filePath and keys\n     * @param {string} key\n     * @returns {object} Object with \"namespace\", \"filePath\", \"keys\""
    ],
    "functions": [
        "registerNamespace",
        "overrideNamespace",
        "get",
        "findValue",
        "loadConfigFile",
        "mergeConfigs",
        "identifyPaths",
        "splitKey"
    ],
    "classes": [
        "ConfigLoader"
    ]
}