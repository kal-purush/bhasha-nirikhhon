{
    "identifiers": [
        "edu",
        "wpi",
        "grip",
        "core",
        "com",
        "google",
        "common",
        "annotations",
        "VisibleForTesting",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableList",
        "com",
        "google",
        "common",
        "eventbus",
        "AllowConcurrentEvents",
        "com",
        "google",
        "common",
        "eventbus",
        "EventBus",
        "com",
        "google",
        "common",
        "eventbus",
        "Subscribe",
        "com",
        "google",
        "common",
        "util",
        "concurrent",
        "AbstractScheduledService",
        "com",
        "google",
        "inject",
        "Provider",
        "com",
        "google",
        "inject",
        "Singleton",
        "edu",
        "wpi",
        "grip",
        "core",
        "events",
        "RenderEvent",
        "edu",
        "wpi",
        "grip",
        "core",
        "events",
        "RunPipelineEvent",
        "edu",
        "wpi",
        "grip",
        "core",
        "events",
        "StopPipelineEvent",
        "edu",
        "wpi",
        "grip",
        "core",
        "util",
        "service",
        "AutoRestartingService",
        "edu",
        "wpi",
        "grip",
        "core",
        "util",
        "service",
        "RestartableService",
        "javax",
        "inject",
        "Inject",
        "java",
        "util",
        "concurrent",
        "Executor",
        "java",
        "util",
        "concurrent",
        "Semaphore",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "concurrent",
        "TimeoutException",
        "java",
        "util",
        "Supplier",
        "java",
        "util",
        "logging",
        "Logger",
        "Singleton",
        "logger",
        "Logger",
        "getLogger",
        "getClass",
        "getName",
        "pipelineFlag",
        "sourceSupplier",
        "stepSupplier",
        "pipelineService",
        "Inject",
        "eventBus",
        "pipelineProvider",
        "eventBus",
        "pipelineProvider",
        "get",
        "getSources",
        "pipelineProvider",
        "get",
        "getSteps",
        "eventBus",
        "sourceSupplier",
        "stepSupplier",
        "sourceSupplier",
        "sourceSupplier",
        "stepSupplier",
        "stepSupplier",
        "pipelineService",
        "Override",
        "logger",
        "info",
        "Override",
        "isRunning",
        "pipelineFlag",
        "acquire",
        "pipelineFlag",
        "acquire",
        "max",
        "pipelineFlag",
        "availablePermits",
        "isRunning",
        "runPipeline",
        "isRunning",
        "isRunning",
        "eventBus",
        "post",
        "Override",
        "logger",
        "info",
        "Override",
        "Scheduler",
        "newFixedRateSchedule",
        "TimeUnit",
        "MILLISECONDS",
        "Override",
        "Override",
        "pipelineService",
        "startAsync",
        "Override",
        "pipelineService",
        "isRunning",
        "Override",
        "pipelineService",
        "state",
        "Override",
        "pipelineService",
        "stopAsync",
        "pipelineFlag",
        "release",
        "Override",
        "stopAsync",
        "pipelineService",
        "stopAndAwait",
        "Override",
        "timeout",
        "unit",
        "stopAsync",
        "pipelineService",
        "stopAndAwait",
        "timeout",
        "unit",
        "Override",
        "pipelineService",
        "awaitRunning",
        "Override",
        "timeout",
        "unit",
        "pipelineService",
        "awaitRunning",
        "timeout",
        "unit",
        "Override",
        "pipelineService",
        "awaitTerminated",
        "Override",
        "timeout",
        "unit",
        "pipelineService",
        "awaitTerminated",
        "timeout",
        "unit",
        "Override",
        "pipelineService",
        "failureCause",
        "Override",
        "listener",
        "executor",
        "pipelineService",
        "addListener",
        "listener",
        "executor",
        "VisibleForTesting",
        "runPipeline",
        "isRunning",
        "sources",
        "sourceSupplier",
        "get",
        "steps",
        "stepSupplier",
        "get",
        "source",
        "sources",
        "isRunning",
        "get",
        "source",
        "updateOutputSockets",
        "step",
        "steps",
        "isRunning",
        "get",
        "step",
        "runPerformIfPossible",
        "Subscribe",
        "AllowConcurrentEvents",
        "pipelineShouldRun",
        "pipelineFlag",
        "release",
        "Subscribe",
        "stopAsync"
    ],
    "literals": [
        "\"Pipeline Starting\"",
        "\"Pipeline Shutting Down\"",
        "\"Pipeline Runner Service\""
    ],
    "variables": [
        "sourceSupplier",
        "stepSupplier",
        "pipelineService"
    ],
    "comments": [
        "Acquire the first this one should permit if there is at least one permit",
        "Acquire the rest of the permits from the flag",
        "Every time release is called another permit is added.",
        "We need to clean up any old permits that we may have been given.",
        "This should not block access to the steps array",
        "Ensure that we unblock the pipeline so it can actually stop",
        "Take a snapshot of both of the pipeline at the present time before running it.",
        "Now that we have a snapshot we can run the pipeline with our copy.",
        "if we have been stopped then we need to exit as soon as possible.",
        "then don't continue to run the pipeline."
    ],
    "docstrings": [
        "* Runs the pipeline in a separate thread.\n * The runner listens for {@link RunPipelineEvent RunPipelineEvents} and\n * releases the pipeline thread to update the sources and run the steps.",
        "* This is used to flag that the pipeline needs to run because of an update",
        "*\n                     * @throws InterruptedException This should never happen.",
        "* Starts the pipeline to run at the default rate.",
        "* This runs the pipeline immediately in the current thread."
    ],
    "functions": [
        "PipelineRunner",
        "PipelineRunner",
        "startUp",
        "runOneIteration",
        "shutDown",
        "Scheduler",
        "scheduler",
        "serviceName",
        "PipelineRunner",
        "startAsync",
        "isRunning",
        "State",
        "state",
        "PipelineRunner",
        "stopAsync",
        "stopAndAwait",
        "stopAndAwait",
        "awaitRunning",
        "awaitRunning",
        "awaitTerminated",
        "awaitTerminated",
        "failureCause",
        "addListener",
        "runPipeline",
        "runPipeline",
        "onRunPipeline",
        "onStopPipeline"
    ],
    "classes": [
        "PipelineRunner"
    ]
}