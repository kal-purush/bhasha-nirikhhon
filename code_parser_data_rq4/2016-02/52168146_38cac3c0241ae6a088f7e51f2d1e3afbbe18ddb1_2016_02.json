{
    "identifiers": [
        "bootstrap",
        "Component",
        "enableProdMode",
        "Injectable",
        "OnInit",
        "Http",
        "Headers",
        "HTTP_PROVIDERS",
        "URLSearchParams",
        "Response",
        "Observable",
        "FORM_DIRECTIVES",
        "RequestOptions",
        "Injectable",
        "http",
        "endpoint",
        "res",
        "res",
        "response",
        "response",
        "value",
        "value",
        "Headers",
        "RequestOptions",
        "headers",
        "value",
        "endpoint",
        "body",
        "options",
        "res",
        "res",
        "error",
        "error",
        "Observable",
        "error",
        "Component",
        "FORM_DIRECTIVES",
        "HTTP_PROVIDERS",
        "NodeApi",
        "nodeApi",
        "bootstrap",
        "App",
        "err",
        "err"
    ],
    "literals": [
        "'angular2/platform/browser'",
        "'angular2/core'",
        "'angular2/http'",
        "'rxjs/Rx'",
        "'rxjs/add/operator/map'",
        "\"angular2/common\"",
        "\"angular2/http\"",
        "'NodeApi Constructor'",
        "'http://127.0.0.1:8081/calls'",
        "' response '",
        "'in the post? '",
        "'https://127.0.0.1:8081/calls'",
        "'Content-Type'",
        "'application/json'",
        "\"value\"",
        "'Server error'",
        "'app'",
        "<div class=\"container\">\n        <div class=\"jumbotron text-center\">\n            <h3><span class=\"fa fa-thumbs-o-up\"></span> {{title}}</h3>\n        <!-- we use ngModel to allow two-way data-binding to the call_value defined in App-->\n            <div>\n                <!-- we use a simple form here (template form) to issue a call to our getter for the 8081 server -->\n                <form f=\"getForm\" (ngSubmit)=\"doGet()\">\n                    <button type=\"submit\" class=\"btn btn-warning btn-lg\">GET</button>\n                    {{call_value | async}}  <!--This pipe accepts a promise or observable as input, updating the view with the appropriate value(s) when the promise is resolved or observable emits a new value. -->\n                </form>\n            </div>\n            <div>\n                <form f=\"postForm\" (ngSubmit)=\"doPost()\">\n                    <button type=\"submit\" class=\"btn btn-warning btn-lg\">POST</button>\n                    <input [(ngModel)]=\"call_post\" placeholder=\"0\">\n                </form>\n            </div>\n        </div>\n        </div>",
        "'Simple Server'",
        "'FYI: console message appear in your browser console'",
        "'call_post '",
        "\"value\"",
        "'init called'"
    ],
    "variables": [
        "endpoint",
        "response",
        "endpoint",
        "headers",
        "options",
        "body"
    ],
    "comments": [
        "lib is large, add only the map operator as result",
        "http.get returns an Observable from RxJS lib and map is an operator in this lib",
        "the RxJS lib implements an asynchronous observable pattern",
        "in a real world app, we may send the server to some remote logging infrastructure",
        "instead of just logging it to the console",
        "this variable will be populated by a node server running in the background",
        "enableProdMode();"
    ],
    "docstrings": [],
    "functions": [
        "get",
        "post",
        "handleError",
        "doGet",
        "doPost",
        "ngOnInit"
    ],
    "classes": [
        "NodeApi",
        "App"
    ]
}