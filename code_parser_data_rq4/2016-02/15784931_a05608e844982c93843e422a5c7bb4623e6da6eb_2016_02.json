{
    "identifiers": [
        "com",
        "f2prateek",
        "dart",
        "processor",
        "com",
        "google",
        "common",
        "Joiner",
        "com",
        "google",
        "testing",
        "compile",
        "JavaFileObjects",
        "javax",
        "tools",
        "JavaFileObject",
        "org",
        "junit",
        "Test",
        "com",
        "google",
        "testing",
        "compile",
        "JavaSourceSubjectFactory",
        "javaSource",
        "org",
        "truth0",
        "Truth",
        "ASSERT",
        "Test",
        "source",
        "JavaFileObjects",
        "forSourceString",
        "Joiner",
        "on",
        "join",
        "expectedSource",
        "JavaFileObjects",
        "forSourceString",
        "Joiner",
        "on",
        "join",
        "ASSERT",
        "about",
        "javaSource",
        "that",
        "source",
        "processedWith",
        "ProcessorTestUtilities",
        "dartProcessors",
        "compilesWithoutError",
        "generatesSources",
        "expectedSource",
        "Test",
        "source",
        "JavaFileObjects",
        "forSourceString",
        "Joiner",
        "on",
        "join",
        "expectedSource",
        "JavaFileObjects",
        "forSourceString",
        "Joiner",
        "on",
        "join",
        "ASSERT",
        "about",
        "javaSource",
        "that",
        "source",
        "processedWith",
        "ProcessorTestUtilities",
        "dartProcessors",
        "compilesWithoutError",
        "generatesSources",
        "expectedSource",
        "Test",
        "source",
        "JavaFileObjects",
        "forSourceString",
        "Joiner",
        "on",
        "join",
        "expectedSource",
        "JavaFileObjects",
        "forSourceString",
        "Joiner",
        "on",
        "join",
        "ASSERT",
        "about",
        "javaSource",
        "that",
        "source",
        "processedWith",
        "ProcessorTestUtilities",
        "dartProcessors",
        "compilesWithoutError",
        "generatesSources",
        "expectedSource",
        "Test",
        "source",
        "JavaFileObjects",
        "forSourceString",
        "Joiner",
        "on",
        "join",
        "expectedSource",
        "JavaFileObjects",
        "forSourceString",
        "Joiner",
        "on",
        "join",
        "ASSERT",
        "about",
        "javaSource",
        "that",
        "source",
        "processedWith",
        "ProcessorTestUtilities",
        "dartProcessors",
        "compilesWithoutError",
        "generatesSources",
        "expectedSource"
    ],
    "literals": [
        "\"test.TestSerializableCollection\"",
        "\"package test;\"",
        "\"import android.app.Activity;\"",
        "\"import com.f2prateek.dart.InjectExtra;\"",
        "\"import java.lang.Object;\"",
        "\"import java.lang.String;\"",
        "\"import java.util.ArrayList;\"",
        "\"public class TestSerializableCollection extends Activity {\"",
        "\"  @InjectExtra(\\\"key\\\") ArrayList<String> extra;\"",
        "\"}\"",
        "\"test/TestSerializableCollection$$ExtraInjector\"",
        "\"package test;\"",
        "\"import com.f2prateek.dart.Dart;\"",
        "\"import java.lang.Object;\"",
        "\"public class TestSerializableCollection$$ExtraInjector {\"",
        "\"  public static void inject(Dart.Finder finder, TestSerializableCollection target, Object source) {\"",
        "\"    Object object;\"",
        "\"    object = finder.getExtra(source, \\\"key\\\");\"",
        "\"    if (object == null) {\"",
        "\"      throw new IllegalStateException(\\\"Required extra with key 'key' for field 'extra' was not found. If this extra is optional add '@Nullable' annotation.\\\");\"",
        "\"    }\"",
        "\"    target.extra = org.parceler.Parcels.unwrap((android.os.Parcelable) object);\"",
        "\"  }\"",
        "\"}\"",
        "\"test.TestNonSerializableNonParcelableCollection_withoutParceler\"",
        "\"package test;\"",
        "\"import android.app.Activity;\"",
        "\"import com.f2prateek.dart.InjectExtra;\"",
        "\"import java.lang.Object;\"",
        "\"import java.lang.String;\"",
        "\"import java.util.List;\"",
        "\"public class TestNonSerializableNonParcelableCollection_withoutParceler extends Activity {\"",
        "\"  @InjectExtra(\\\"key\\\") List<String> extra;\"",
        "\"}\"",
        "\"test/TestSerializableCollection$$ExtraInjector\"",
        "\"package test;\"",
        "\"import com.f2prateek.dart.Dart;\"",
        "\"import java.lang.Object;\"",
        "\"public class TestNonSerializableNonParcelableCollection_withoutParceler$$ExtraInjector {\"",
        "\"  public static void inject(Dart.Finder finder, TestNonSerializableNonParcelableCollection_withoutParceler target, Object source) {\"",
        "\"    Object object;\"",
        "\"    object = finder.getExtra(source, \\\"key\\\");\"",
        "\"    if (object == null) {\"",
        "\"      throw new IllegalStateException(\\\"Required extra with key 'key' for field 'extra' was not found. If this extra is optional add '@Nullable' annotation.\\\");\"",
        "\"    }\"",
        "\"    target.extra = org.parceler.Parcels.unwrap((android.os.Parcelable) object);\"",
        "\"  }\"",
        "\"}\"",
        "\"test.TestParcelAnnotated\"",
        "\"package test;\"",
        "\"import android.app.Activity;\"",
        "\"import com.f2prateek.dart.InjectExtra;\"",
        "\"import java.lang.Object;\"",
        "\"import java.lang.String;\"",
        "\"import org.parceler.Parcel;\"",
        "\"public class TestParcelAnnotated extends Activity {\"",
        "\"  @InjectExtra(\\\"key\\\") Foo extra;\"",
        "\"@Parcel static class Foo {}\"",
        "\"}\"",
        "\"test/TestParcelAnnotated$$ExtraInjector\"",
        "\"package test;\"",
        "\"import com.f2prateek.dart.Dart;\"",
        "\"import java.lang.Object;\"",
        "\"public class TestParcelAnnotated$$ExtraInjector {\"",
        "\"  public static void inject(Dart.Finder finder, TestParcelAnnotated target, Object source) {\"",
        "\"    Object object;\"",
        "\"    object = finder.getExtra(source, \\\"key\\\");\"",
        "\"    if (object == null) {\"",
        "\"      throw new IllegalStateException(\\\"Required extra with key 'key' for field 'extra' was not found. If this extra is optional add '@Nullable' annotation.\\\");\"",
        "\"    }\"",
        "\"    target.extra = org.parceler.Parcels.unwrap((android.os.Parcelable) object);\"",
        "\"  }\"",
        "\"}\"",
        "\"test.TestCollectionParcel\"",
        "\"package test;\"",
        "\"import android.app.Activity;\"",
        "\"import com.f2prateek.dart.InjectExtra;\"",
        "\"import java.lang.Object;\"",
        "\"import java.lang.String;\"",
        "\"import java.util.List;\"",
        "\"import org.parceler.Parcel;\"",
        "\"public class TestCollectionParcel extends Activity {\"",
        "\"  @InjectExtra(\\\"key\\\") List<Foo> extra;\"",
        "\"@Parcel static class Foo {}\"",
        "\"}\"",
        "\"test/TestCollectionParcel$$ExtraInjector\"",
        "\"package test;\"",
        "\"import com.f2prateek.dart.Dart;\"",
        "\"import java.lang.Object;\"",
        "\"public class TestCollectionParcel$$ExtraInjector {\"",
        "\"  public static void inject(Dart.Finder finder, TestCollectionParcel target, Object source) {\"",
        "\"    Object object;\"",
        "\"    object = finder.getExtra(source, \\\"key\\\");\"",
        "\"    if (object == null) {\"",
        "\"      throw new IllegalStateException(\\\"Required extra with key 'key' for field 'extra' was not found. If this extra is optional add '@Nullable' annotation.\\\");\"",
        "\"    }\"",
        "\"    target.extra = org.parceler.Parcels.unwrap((android.os.Parcelable) object);\"",
        "\"  }\"",
        "\"}\""
    ],
    "variables": [],
    "comments": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
    ],
    "docstrings": [
        "* Copyright 2013 Jake Wharton\n * Copyright 2014 Prateek Srivastava (@f2prateek)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License."
    ],
    "functions": [
        "serializableCollection",
        "nonSerializableNonParcelableCollection_withoutParceler",
        "parcelAnnotatedType",
        "collectionOfParcelAnnotatedType"
    ],
    "classes": [
        "InjectExtraWithParcelerTest"
    ]
}