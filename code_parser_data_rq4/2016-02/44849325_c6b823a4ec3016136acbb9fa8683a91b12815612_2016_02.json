{
    "identifiers": [
        "require",
        "chrome",
        "sniffer",
        "sniffer",
        "Listener",
        "request",
        "context",
        "inputStream",
        "offset",
        "count",
        "Components",
        "Components",
        "Components",
        "Components",
        "Components",
        "Components",
        "binaryInputStream",
        "inputStream",
        "storageStream",
        "count",
        "binaryOutputStream",
        "storageStream",
        "binaryInputStream",
        "count",
        "data",
        "binaryOutputStream",
        "data",
        "count",
        "request",
        "context",
        "storageStream",
        "offset",
        "count",
        "e",
        "e",
        "request",
        "context",
        "request",
        "context",
        "request",
        "context",
        "statusCode",
        "newResponseSource",
        "newResponseSource",
        "request",
        "context",
        "statusCode",
        "request",
        "Components",
        "Components",
        "Components",
        "Components",
        "Components",
        "storageStream",
        "newResponseSource",
        "binaryOutputStream",
        "storageStream",
        "binaryOutputStream",
        "newResponseSource",
        "newResponseSource",
        "channel",
        "context",
        "channel",
        "context",
        "storageStream",
        "newResponseSource",
        "channel",
        "context",
        "statusCode",
        "e",
        "e",
        "aIID",
        "aIID",
        "Components",
        "aIID",
        "Components",
        "Components",
        "sniffer",
        "subject",
        "topic",
        "data",
        "topic",
        "topic",
        "Listener",
        "sniffer",
        "subject",
        "Components",
        "newListener",
        "subject",
        "newListener",
        "subject",
        "topic",
        "data",
        "subject",
        "Components",
        "subject",
        "requestURL",
        "i",
        "i",
        "i",
        "sniffer",
        "sniffer",
        "sniffer",
        "is_match",
        "requestURL",
        "regex",
        "sniffer",
        "is_match",
        "requestURL",
        "sniffer",
        "is_match",
        "Sniffer",
        "sniffer",
        "subject",
        "topic",
        "data",
        "sniffer",
        "Components",
        "Components",
        "httpRequestObserver"
    ],
    "literals": [
        "'chrome'",
        "\"@mozilla.org/binaryinputstream;1\"",
        "\"@mozilla.org/storagestream;1\"",
        "\"@mozilla.org/binaryoutputstream;1\"",
        "''",
        "\"@mozilla.org/storagestream;1\"",
        "\"@mozilla.org/binaryoutputstream;1\"",
        "\"http-on-modify-request\"",
        "\"http-on-examine-response\"",
        "'httpSniffer=bypass'",
        "\"@mozilla.org/observer-service;1\"",
        "\"http-on-modify-request\"",
        "\"http-on-examine-response\"",
        "\"http-on-modify-request\"",
        "\"http-on-examine-response\""
    ],
    "variables": [
        "chrome",
        "Components",
        "binaryInputStream",
        "storageStream",
        "binaryOutputStream",
        "data",
        "newResponseSource",
        "channel",
        "storageStream",
        "binaryOutputStream",
        "Sniffer",
        "newListener",
        "httpRequestObserver",
        "httpChannel",
        "requestURL",
        "is_match",
        "i",
        "sniffer",
        "regex"
    ],
    "comments": [
        "PourBico",
        "array for incoming data.",
        "if modify -> copy response to this.receivedData",
        "copy received data as they come.",
        "if new",
        "other",
        "var req_resource_mat = requestURL.match(/https?:\\/\\/[^\\/]+hayhaytv[^\\/]+\\/req_resource\\/(.*)/);",
        "if (req_resource_mat) {",
        "GM.redirectTo(requestResource.getDataURI(req_resource_mat[1]), null, null);",
        "}",
        "if (requestURL.match(/^https?:\\/\\/[^\\/]+hayhaytv[^\\/]+/i)) {",
        "var request_header = GM.getRequestHeaders();",
        "if(request_header['Accept'].indexOf('image/') > -1){",
        "if(requestURL.indexOf('bypass=true') < 0){",
        "httpChannel.cancel(Components.results.NS_BINDING_ABORTED);",
        "}",
        "}",
        "}",
        "if(requestURL.match(/^https?:\\/\\/[^\\/]+hayhaytv[^\\/]+/)){",
        "httpChannel.setRequestHeader('User-Agent', 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0', true);",
        "}",
        "console.log('REQUEST');",
        "console.log(JSON.stringify(GM.getRequestHeaders(), null, 1));",
        "{",
        "link: 'http://www.hayhaytv.vn/', // string or regex",
        "break: true,",
        "response: { // just one method effect",
        "new: function () {",
        "return 'new response';",
        "},",
        "mod: function (data) {",
        "return 'modify response data'",
        "}",
        "}",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "Listener",
        "observerService"
    ],
    "classes": []
}