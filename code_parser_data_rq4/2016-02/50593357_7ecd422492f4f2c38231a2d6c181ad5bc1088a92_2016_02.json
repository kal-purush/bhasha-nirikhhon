{
    "identifiers": [
        "com",
        "hoho",
        "android",
        "usbserial",
        "driver",
        "android",
        "hardware",
        "usb",
        "UsbConstants",
        "android",
        "hardware",
        "usb",
        "UsbDevice",
        "android",
        "hardware",
        "usb",
        "UsbDeviceConnection",
        "android",
        "hardware",
        "usb",
        "UsbEndpoint",
        "android",
        "hardware",
        "usb",
        "UsbInterface",
        "android",
        "hardware",
        "usb",
        "UsbRequest",
        "android",
        "util",
        "Log",
        "java",
        "io",
        "java",
        "nio",
        "ByteBuffer",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "LinkedHashMap",
        "java",
        "util",
        "java",
        "util",
        "TAG",
        "getSimpleName",
        "mDevice",
        "mPort",
        "device",
        "mDevice",
        "device",
        "mPort",
        "device",
        "Override",
        "mDevice",
        "Override",
        "Collections",
        "singletonList",
        "mPort",
        "mEnableAsyncReads",
        "mControlInterface",
        "mDataInterface",
        "mControlEndpoint",
        "mReadEndpoint",
        "mWriteEndpoint",
        "mRts",
        "mDtr",
        "USB_RECIP_INTERFACE",
        "USB_RT_ACM",
        "UsbConstants",
        "USB_TYPE_CLASS",
        "USB_RECIP_INTERFACE",
        "SET_LINE_CODING",
        "GET_LINE_CODING",
        "SET_CONTROL_LINE_STATE",
        "SEND_BREAK",
        "device",
        "portNumber",
        "device",
        "portNumber",
        "mEnableAsyncReads",
        "Override",
        "CdcAcmSerialDriver",
        "Override",
        "connection",
        "mConnection",
        "mConnection",
        "connection",
        "opened",
        "Log",
        "d",
        "TAG",
        "mDevice",
        "getInterfaceCount",
        "mControlInterface",
        "mDevice",
        "getInterface",
        "Log",
        "d",
        "TAG",
        "mControlInterface",
        "mConnection",
        "claimInterface",
        "mControlInterface",
        "mControlEndpoint",
        "mControlInterface",
        "getEndpoint",
        "Log",
        "d",
        "TAG",
        "mControlEndpoint",
        "getDirection",
        "Log",
        "d",
        "TAG",
        "mDataInterface",
        "mDevice",
        "getInterface",
        "Log",
        "d",
        "TAG",
        "mDataInterface",
        "mConnection",
        "claimInterface",
        "mDataInterface",
        "mReadEndpoint",
        "mDataInterface",
        "getEndpoint",
        "Log",
        "d",
        "TAG",
        "mReadEndpoint",
        "getDirection",
        "mWriteEndpoint",
        "mDataInterface",
        "getEndpoint",
        "Log",
        "d",
        "TAG",
        "mWriteEndpoint",
        "getDirection",
        "mEnableAsyncReads",
        "Log",
        "d",
        "TAG",
        "Log",
        "d",
        "TAG",
        "opened",
        "opened",
        "mConnection",
        "request",
        "value",
        "buf",
        "mConnection",
        "controlTransfer",
        "USB_RT_ACM",
        "request",
        "value",
        "buf",
        "buf",
        "buf",
        "length",
        "Override",
        "mConnection",
        "mConnection",
        "close",
        "mConnection",
        "Override",
        "dest",
        "timeoutMillis",
        "mEnableAsyncReads",
        "request",
        "request",
        "initialize",
        "mConnection",
        "mReadEndpoint",
        "buf",
        "ByteBuffer",
        "wrap",
        "dest",
        "request",
        "queue",
        "buf",
        "dest",
        "length",
        "response",
        "mConnection",
        "requestWait",
        "response",
        "nread",
        "buf",
        "position",
        "nread",
        "nread",
        "request",
        "close",
        "numBytesRead",
        "mReadBufferLock",
        "readAmt",
        "min",
        "dest",
        "length",
        "mReadBuffer",
        "length",
        "numBytesRead",
        "mConnection",
        "bulkTransfer",
        "mReadEndpoint",
        "mReadBuffer",
        "readAmt",
        "timeoutMillis",
        "numBytesRead",
        "timeoutMillis",
        "MAX_VALUE",
        "arraycopy",
        "mReadBuffer",
        "dest",
        "numBytesRead",
        "numBytesRead",
        "Override",
        "src",
        "timeoutMillis",
        "offset",
        "offset",
        "src",
        "length",
        "writeLength",
        "amtWritten",
        "mWriteBufferLock",
        "writeBuffer",
        "writeLength",
        "min",
        "src",
        "length",
        "offset",
        "mWriteBuffer",
        "length",
        "offset",
        "writeBuffer",
        "src",
        "arraycopy",
        "src",
        "offset",
        "mWriteBuffer",
        "writeLength",
        "writeBuffer",
        "mWriteBuffer",
        "amtWritten",
        "mConnection",
        "bulkTransfer",
        "mWriteEndpoint",
        "writeBuffer",
        "writeLength",
        "timeoutMillis",
        "amtWritten",
        "writeLength",
        "offset",
        "src",
        "length",
        "Log",
        "d",
        "TAG",
        "amtWritten",
        "writeLength",
        "offset",
        "amtWritten",
        "offset",
        "Override",
        "baudRate",
        "dataBits",
        "stopBits",
        "parity",
        "stopBitsByte",
        "stopBits",
        "STOPBITS_1",
        "stopBitsByte",
        "STOPBITS_1_5",
        "stopBitsByte",
        "STOPBITS_2",
        "stopBitsByte",
        "stopBits",
        "parityBitesByte",
        "parity",
        "PARITY_NONE",
        "parityBitesByte",
        "PARITY_ODD",
        "parityBitesByte",
        "PARITY_EVEN",
        "parityBitesByte",
        "PARITY_MARK",
        "parityBitesByte",
        "PARITY_SPACE",
        "parityBitesByte",
        "parity",
        "msg",
        "baudRate",
        "baudRate",
        "baudRate",
        "baudRate",
        "stopBitsByte",
        "parityBitesByte",
        "dataBits",
        "sendAcmControlMessage",
        "SET_LINE_CODING",
        "msg",
        "Override",
        "Override",
        "Override",
        "Override",
        "mDtr",
        "Override",
        "value",
        "mDtr",
        "value",
        "setDtrRts",
        "Override",
        "Override",
        "mRts",
        "Override",
        "value",
        "mRts",
        "value",
        "setDtrRts",
        "value",
        "mRts",
        "mDtr",
        "sendAcmControlMessage",
        "SET_CONTROL_LINE_STATE",
        "value",
        "supportedDevices",
        "supportedDevices",
        "put",
        "valueOf",
        "UsbId",
        "VENDOR_ARDUINO",
        "UsbId",
        "ARDUINO_UNO",
        "UsbId",
        "ARDUINO_UNO_R3",
        "UsbId",
        "ARDUINO_MEGA_2560",
        "UsbId",
        "ARDUINO_MEGA_2560_R3",
        "UsbId",
        "ARDUINO_SERIAL_ADAPTER",
        "UsbId",
        "ARDUINO_SERIAL_ADAPTER_R3",
        "UsbId",
        "ARDUINO_MEGA_ADK",
        "UsbId",
        "ARDUINO_MEGA_ADK_R3",
        "UsbId",
        "ARDUINO_LEONARDO",
        "supportedDevices",
        "put",
        "valueOf",
        "UsbId",
        "VENDOR_VAN_OOIJEN_TECH",
        "UsbId",
        "VAN_OOIJEN_TECH_TEENSYDUINO_SERIAL",
        "supportedDevices",
        "put",
        "valueOf",
        "UsbId",
        "VENDOR_ATMEL",
        "UsbId",
        "ATMEL_LUFA_CDC_DEMO_APP",
        "supportedDevices",
        "put",
        "valueOf",
        "UsbId",
        "VENDOR_LEAFLABS",
        "UsbId",
        "LEAFLABS_MAPLE",
        "supportedDevices"
    ],
    "literals": [
        "\"Already open\"",
        "\"claiming interfaces, count=\"",
        "\"Control iface=\"",
        "\"Could not claim control interface.\"",
        "\"Control endpoint direction: \"",
        "\"Claiming data interface.\"",
        "\"data iface=\"",
        "\"Could not claim data interface.\"",
        "\"Read endpoint direction: \"",
        "\"Write endpoint direction: \"",
        "\"Async reads enabled\"",
        "\"Async reads disabled.\"",
        "\"Already closed\"",
        "\"Error queueing request.\"",
        "\"Null response\"",
        "\"Error writing \"",
        "\" bytes at offset \"",
        "\" length=\"",
        "\"Wrote amt=\"",
        "\" attempted=\"",
        "\"Bad value for stopBits: \"",
        "\"Bad value for parity: \""
    ],
    "variables": [
        "mDevice",
        "mPort",
        "mEnableAsyncReads",
        "mControlInterface",
        "mDataInterface",
        "mControlEndpoint",
        "mReadEndpoint",
        "mWriteEndpoint",
        "numBytesRead",
        "writeLength",
        "amtWritten",
        "writeBuffer",
        "stopBitsByte",
        "parityBitesByte"
    ],
    "comments": [
        "USB CDC 1.1 section 6.2",
        "(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1);",
        "class should be USB_CLASS_COMM",
        "class should be USB_CLASS_CDC_DATA",
        "Log.d(TAG, HexDump.dumpHexString(dest, 0, Math.min(32, dest.length)));",
        "This sucks: we get -1 on timeout, not 0 as preferred.",
        "We *should* use UsbRequest, except it has a bug/api oversight",
        "where there is no way to determine the number of bytes read",
        "in response :\\ -- http://b.android.com/28023",
        "Hack: Special case \"~infinite timeout\" as an error.",
        "TODO(mikey): Nearly identical to FtdiSerial write. Refactor.",
        "bulkTransfer does not support offsets, make a copy.",
        "TODO",
        "TODO",
        "TODO",
        "TODO"
    ],
    "docstrings": [
        "Copyright 2011-2013 Google Inc.\n * Copyright 2013 mike wakerly <opensource@hoho.com>\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,\n * USA.\n *\n * Project home page: https://github.com/mik3y/usb-serial-for-android",
        "* USB CDC/ACM serial driver implementation.\n *\n * @author mike wakerly (opensource@hoho.com)\n * @see <a\n *      href=\"http://www.usb.org/developers/devclass_docs/usbcdc11.pdf\">Universal\n *      Serial Bus Class Definitions for Communication Devices, v1.1</a>"
    ],
    "functions": [
        "CdcAcmSerialDriver",
        "UsbDevice",
        "getDevice",
        "getPorts",
        "CdcAcmSerialPort",
        "UsbSerialDriver",
        "getDriver",
        "open",
        "sendAcmControlMessage",
        "close",
        "read",
        "write",
        "setParameters",
        "getCD",
        "getCTS",
        "getDSR",
        "getDTR",
        "setDTR",
        "getRI",
        "getRTS",
        "setRTS",
        "setDtrRts",
        "getSupportedDevices"
    ],
    "classes": [
        "CdcAcmSerialDriver",
        "CdcAcmSerialPort"
    ]
}