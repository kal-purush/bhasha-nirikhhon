{
    "identifiers": [
        "org",
        "gusdb",
        "wdk",
        "model",
        "user",
        "dataset",
        "javax",
        "sql",
        "DataSource",
        "org",
        "apache",
        "logging",
        "log4j",
        "LogManager",
        "org",
        "apache",
        "logging",
        "log4j",
        "Logger",
        "org",
        "gusdb",
        "wdk",
        "model",
        "WdkModelException",
        "org",
        "gusdb",
        "wdk",
        "model",
        "user",
        "dataset",
        "UnsupportedTypeHandler",
        "org",
        "gusdb",
        "wdk",
        "model",
        "user",
        "dataset",
        "model",
        "UserDatasetEventStatus",
        "org",
        "gusdb",
        "wdk",
        "model",
        "user",
        "dataset",
        "model",
        "UserDatasetEventType",
        "org",
        "gusdb",
        "wdk",
        "model",
        "user",
        "dataset",
        "model",
        "UserDatasetUninstallEvent",
        "LOG",
        "LogManager",
        "getLogger",
        "projectID",
        "projectID",
        "LOG",
        "info",
        "appDb",
        "openAppDB",
        "handler",
        "initHandler",
        "appDb",
        "getDataSource",
        "events",
        "handler",
        "getCleanableEvents",
        "events",
        "LOG",
        "info",
        "getEventID",
        "handler",
        "shouldHandleEvent",
        "LOG",
        "info",
        "handler",
        "claimEvent",
        "LOG",
        "info",
        "getEventType",
        "UserDatasetEventType",
        "INSTALL",
        "LOG",
        "info",
        "handler",
        "handleNoOpEvent",
        "typeHandler",
        "getUserDatasetStore",
        "getTypeHandler",
        "getUserDatasetType",
        "UnsupportedTypeHandler",
        "NAME",
        "equals",
        "typeHandler",
        "getUserDatasetType",
        "getName",
        "error",
        "getUserDatasetType",
        "getName",
        "LOG",
        "error",
        "error",
        "handler",
        "failEvent",
        "error",
        "LOG",
        "info",
        "handler",
        "handleUninstallEvent",
        "getEventID",
        "getUserDatasetID",
        "getUserDatasetType",
        "typeHandler",
        "ex",
        "LOG",
        "warn",
        "ex",
        "handler",
        "failEvent",
        "ex",
        "handler",
        "sendErrorNotifications",
        "ex",
        "LOG",
        "error",
        "ex",
        "appDbDs",
        "appDbDs",
        "getUserDatasetSchemaName",
        "getProjectId",
        "getModelConfig"
    ],
    "literals": [
        "\"Beginning user dataset event cleanup.\"",
        "\"Processing event: \"",
        "\"Skipping event\"",
        "\"Event already claimed.\"",
        "\"Non-install event, marking as completed.\"",
        "\"Type handler for type \"",
        "\" has been removed.\"",
        "\"  Marking cleanup as failed.\"",
        "\"Attempting to run event cleanup.\"",
        "\"Exception occurred while attempting to process event cleanup.  Marking cleanup as failed.\"",
        "\"Fatal error occurred, halting event processing.\""
    ],
    "variables": [],
    "comments": [
        "Error recovery block.  Errors in this try/catch do not halt event",
        "processing.  Instead when an error occurs, the event will be marked",
        "with an error status and the process will continue.",
        "We only want to actually attempt to uninstall events of the",
        "\"install\" type.  Calling uninstall on other event types will leave",
        "the DB in a bad state.",
        "",
        "For example, calling uninstall on a SHARE event, will cause the",
        "successfully installed UD to be uninstalled even though it had no",
        "issues.  This would result in the UD's INSTALL event being undone",
        "without updating it's status.  Only the SHARE event would be marked",
        "as CLEANUP_COMPLETE.  This means the DB would say the UD is",
        "installed (and would prevent the UD being reinstalled) when it",
        "actually is not in the DB at all.",
        "",
        "Since the other event types are effectively idempotent, rerunning",
        "those events without doing any \"cleanup\" shouldn't cause any",
        "issues.  Instead we just mark the event as CLEANUP_COMPLETE and",
        "let the re-run of the event fix the issue.",
        "A type handler was removed after the event was \"installed\".  This",
        "should never happen, but safety first.",
        "null as the set of projects is not known, but is also not used for uninstalls."
    ],
    "docstrings": [
        "* Processes events in the {@link UserDatasetEventStatus#CLEANUP_READY} status\n * and attempts to uninstall those events.\n * <p>\n * Events that fail when attempting to uninstall will be updated to be in the\n * {@link UserDatasetEventStatus#CLEANUP_FAILED}.  Events in this status will\n * be ignored by future sync and cleanup runs.\n * <p>\n * Events that succeed when attempting to uninstall will be updated to the\n * {@link UserDatasetEventStatus#CLEANUP_COMPLETE} status.  Events in this\n * status will be picked up by the next sync run.\n * <p>\n * Events are placed in the {@code CLEANUP_READY} status after they have been\n * investigated and whatever the cause is resolved."
    ],
    "functions": [
        "UserDatasetEventCleanup",
        "cleanupFailedInstalls",
        "UserDatasetEventCleanupHandler",
        "initHandler"
    ],
    "classes": [
        "UserDatasetEventCleanup"
    ]
}