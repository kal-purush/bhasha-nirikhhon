{
    "identifiers": [
        "time",
        "threading",
        "pyglet",
        "pyglet",
        "util",
        "debug_print",
        "debug_print",
        "threading",
        "Lock",
        "target",
        "threading",
        "target",
        "_thread_run",
        "daemon",
        "target",
        "target",
        "threading",
        "Condition",
        "pyglet",
        "options",
        "pyglet",
        "_install_trace",
        "_threads_lock",
        "_threads",
        "add",
        "run",
        "_threads_lock",
        "_threads",
        "remove",
        "_thread",
        "start",
        "_debug",
        "condition",
        "condition",
        "notify",
        "_thread",
        "join",
        "timeout",
        "_debug",
        "timeout",
        "condition",
        "stopped",
        "condition",
        "wait",
        "timeout",
        "_debug",
        "condition",
        "condition",
        "notify",
        "_threads_lock",
        "_threads",
        "thread",
        "threads",
        "thread",
        "stop",
        "MediaThread",
        "condition",
        "_debug",
        "format",
        "time",
        "time",
        "stopped",
        "players",
        "player",
        "players",
        "player",
        "get_write_size",
        "write_size",
        "player",
        "min_buffer_size",
        "player",
        "refill",
        "write_size",
        "filled",
        "_nap_time",
        "_debug",
        "_sleep_time",
        "sleep_time",
        "sleep",
        "sleep_time",
        "sleep",
        "_nap_time",
        "player",
        "player",
        "_debug",
        "condition",
        "players",
        "add",
        "player",
        "condition",
        "notify",
        "player",
        "_debug",
        "condition",
        "player",
        "players",
        "players",
        "remove",
        "player",
        "condition",
        "notify"
    ],
    "literals": [
        "'debug_media'",
        "'debug_trace'",
        "'MediaThread.stop()'",
        "'MediaThread.sleep(%r)'",
        "'MediaThread.notify()'",
        "'PlayerWorker: woke up @{}'",
        "'PlayerWorker: No active players'",
        "'PlayerWorker: player added'",
        "'PlayerWorker: player removed'"
    ],
    "variables": [
        "_debug",
        "_threads",
        "_threads_lock",
        "_thread",
        "run",
        "condition",
        "stopped",
        "stopped",
        "threads",
        "_nap_time",
        "_sleep_time",
        "players",
        "sleep_time",
        "filled",
        "write_size",
        "filled",
        "sleep_time",
        "sleep_time"
    ],
    "comments": [
        "----------------------------------------------------------------------------",
        "pyglet",
        "Copyright (c) 2006-2008 Alex Holkner",
        "Copyright (c) 2008-2021 pyglet contributors",
        "All rights reserved.",
        "",
        "Redistribution and use in source and binary forms, with or without",
        "modification, are permitted provided that the following conditions",
        "are met:",
        "",
        "notice, this list of conditions and the following disclaimer.",
        "notice, this list of conditions and the following disclaimer in",
        "the documentation and/or other materials provided with the",
        "distribution.",
        "contributors may be used to endorse or promote products",
        "derived from this software without specific prior written",
        "permission.",
        "",
        "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
        "\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
        "LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS",
        "FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE",
        "COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,",
        "INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,",
        "BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;",
        "LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER",
        "CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT",
        "LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN",
        "ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE",
        "POSSIBILITY OF SUCH DAMAGE.",
        "----------------------------------------------------------------------------",
        "Time to wait if there are players, but they're all full.",
        "Time to wait if there are no players.",
        "This is a big lock, but ensures a player is not deleted while",
        "we're processing it -- this saves on extra checks in the",
        "player's methods that would otherwise have to check that it's",
        "still alive.",
        "We MUST sleep, or we will starve pyglet's main loop.  It",
        "also looks like if we don't sleep enough, we'll starve out",
        "various updates that stop us from properly removing players",
        "that should be removed."
    ],
    "docstrings": [
        "* Redistributions of source code must retain the above copyright",
        "* Redistributions in binary form must reproduce the above copyright",
        "* Neither the name of pyglet nor the names of its",
        "\"\"\"A thread that cleanly exits on interpreter shutdown, and provides\n    a sleep method that can be interrupted and a termination method.\n\n    :Ivariables:\n        `condition` : threading.Condition\n            Lock condition on all instance variables. \n        `stopped` : bool\n            True if `stop` has been called.\n\n    \"\"\"",
        "\"\"\"Stop the thread and wait for it to terminate.\n\n        The `stop` instance variable is set to ``True`` and the condition is\n        notified.  It is the responsibility of the `run` method to check\n        the value of `stop` after each sleep or wait and to return if set.\n        \"\"\"",
        "\"\"\"Wait for some amount of time, or until notified.\n\n        :Parameters:\n            `timeout` : float\n                Time to wait, in seconds.\n\n        \"\"\"",
        "\"\"\"Interrupt the current sleep operation.\n\n        If the thread is currently sleeping, it will be woken immediately,\n        instead of waiting the full duration of the timeout.\n        \"\"\"",
        "\"\"\"Worker thread for refilling players.\"\"\""
    ],
    "functions": [
        "run",
        "_thread_run",
        "start",
        "stop",
        "sleep",
        "notify",
        "__del__",
        "run",
        "add",
        "remove"
    ],
    "classes": [
        "MediaThread",
        "PlayerWorker"
    ]
}