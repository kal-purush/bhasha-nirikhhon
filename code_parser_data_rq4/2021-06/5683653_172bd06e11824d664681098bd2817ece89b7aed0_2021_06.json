{
    "identifiers": [
        "org",
        "apache",
        "drill",
        "exec",
        "store",
        "org",
        "apache",
        "drill",
        "common",
        "types",
        "TypeProtos",
        "DataMode",
        "org",
        "apache",
        "drill",
        "common",
        "types",
        "TypeProtos",
        "MinorType",
        "org",
        "apache",
        "drill",
        "exec",
        "physical",
        "resultSet",
        "RowSetLoader",
        "org",
        "apache",
        "drill",
        "exec",
        "record",
        "metadata",
        "ColumnMetadata",
        "org",
        "apache",
        "drill",
        "exec",
        "record",
        "metadata",
        "MetadataUtils",
        "org",
        "apache",
        "drill",
        "exec",
        "vector",
        "accessor",
        "ScalarWriter",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "java",
        "util",
        "java",
        "util",
        "logger",
        "LoggerFactory",
        "getLogger",
        "implicitColumns",
        "rowWriter",
        "rowWriter",
        "implicitColumns",
        "rowWriter",
        "rowWriter",
        "fieldName",
        "implicitColumns",
        "put",
        "fieldName",
        "fieldName",
        "rowWriter",
        "fieldName",
        "implicitColumns",
        "get",
        "fieldName",
        "column",
        "writer",
        "dataType",
        "value",
        "columnEntry",
        "implicitColumns",
        "entrySet",
        "column",
        "columnEntry",
        "getValue",
        "writer",
        "column",
        "writer",
        "dataType",
        "column",
        "dataType",
        "value",
        "column",
        "value",
        "dataType",
        "INT",
        "writer",
        "setInt",
        "value",
        "BIGINT",
        "writer",
        "setLong",
        "value",
        "FLOAT4",
        "writer",
        "setFloat",
        "value",
        "FLOAT8",
        "writer",
        "setDouble",
        "value",
        "VARCHAR",
        "writer",
        "setString",
        "value",
        "BIT",
        "writer",
        "setBoolean",
        "value",
        "logger",
        "warn",
        "dataType",
        "fieldName",
        "dataType",
        "columnIndex",
        "writer",
        "value",
        "fieldName",
        "dataType",
        "rowWriter",
        "dataType",
        "dataType",
        "fieldName",
        "fieldName",
        "columnIndex",
        "addImplicitColumnToSchema",
        "fieldName",
        "dataType",
        "rowWriter",
        "writer",
        "rowWriter",
        "scalar",
        "columnIndex",
        "fieldName",
        "dataType",
        "rowWriter",
        "value",
        "dataType",
        "dataType",
        "fieldName",
        "fieldName",
        "columnIndex",
        "addImplicitColumnToSchema",
        "fieldName",
        "dataType",
        "rowWriter",
        "writer",
        "rowWriter",
        "scalar",
        "columnIndex",
        "value",
        "value",
        "fieldName",
        "rowWriter",
        "colSchema",
        "MetadataUtils",
        "newScalar",
        "fieldName",
        "DataMode",
        "OPTIONAL",
        "colSchema",
        "setBooleanProperty",
        "ColumnMetadata",
        "EXCLUDE_FROM_WILDCARD",
        "rowWriter",
        "addColumn",
        "colSchema",
        "fieldName",
        "dataType",
        "columnIndex",
        "value",
        "v",
        "value",
        "v",
        "writer"
    ],
    "literals": [
        "\"{} types are not implemented as implicit fields.\""
    ],
    "variables": [
        "implicitColumns",
        "rowWriter",
        "column",
        "writer",
        "dataType",
        "value",
        "fieldName",
        "dataType",
        "columnIndex",
        "writer",
        "value"
    ],
    "comments": [],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* This class represents an implicit column in a dataset.  These columns are typically used for metadata that is consistent\n   * across an entire dataset.  A filename for example, or HTTP response codes.  It is good practice to name\n   * implicit fields with an underscore so that these field names do not conflict with fields from the user's\n   * data.  For example _http_response_code.\n   *\n   * Implicit fields do not appear in star queries so a user must explicitly include them in queries for them to appear.",
        "* Adds an implicit column.  If there already is a column with the same name, the previous column\n     * will be overwritten.\n     * @param fieldName Name of the implicit column. Recommended that this start with an underscore.\n     * @param type The Drill MinorType of the implicit column.  Currently only supports simple types.",
        "* Returns a requested ImplicitColumn.  If the column cannot be found, will return null.\n     * @param fieldName The field name of the desired column\n     * @return The specific column requested, null if that column does not exist.",
        "* This function writes the data to the implicit columns. This should be called in the next() method\n     * in a batch reader so that the columns get populated.  If there are no implicit columns, this function\n     * will do nothing, so null checks are not necessary.",
        "* Adds an implicit column to the schema. Implicit columns are by default optional and excluded from wildcard\n     * queries.  This should be used for file metadata or other metadata that you want to be present in a query, but only if\n     * a user specifically asks for it.\n     *\n     * @param fieldName The name of the implicit column to be added.  Should start with an underscore\n     * @param type The minor type of the implicit field.  Currently only non-complex types are supported with this class\n     * @param rowWriter The RowSetLoader\n     * @return The index of the newly added column."
    ],
    "functions": [
        "ImplicitColumns",
        "addImplicitColumn",
        "ImplicitColumn",
        "getColumn",
        "writeImplicitColumns",
        "ImplicitColumn",
        "ImplicitColumn",
        "addImplicitColumnToSchema",
        "getFieldName",
        "MinorType",
        "getDataType",
        "getColumnIndex",
        "getValue",
        "setValue",
        "ScalarWriter",
        "getWriter"
    ],
    "classes": [
        "ImplicitColumnUtils",
        "ImplicitColumns",
        "ImplicitColumn"
    ]
}