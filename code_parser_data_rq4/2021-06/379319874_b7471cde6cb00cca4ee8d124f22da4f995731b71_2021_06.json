{
    "identifiers": [
        "argparse",
        "rospy",
        "sensor_msgs",
        "msg",
        "Image",
        "std_msgs",
        "msg",
        "cv_bridge",
        "CvBridge",
        "CvBridgeError",
        "PIL",
        "Image",
        "PImage",
        "cv2",
        "io",
        "BytesIO",
        "base64",
        "cv_bridge",
        "CvBridge",
        "numpy",
        "np",
        "time",
        "image_topic",
        "net",
        "output_layers",
        "classes",
        "confidence_threashold",
        "net",
        "output_layers",
        "classes",
        "confidence_threshold",
        "CvBridge",
        "rospy",
        "Subscriber",
        "image_topic",
        "Image",
        "image_callback",
        "rospy",
        "Publisher",
        "queue_size",
        "rospy",
        "Publisher",
        "queue_size",
        "cv_image",
        "pub_topic",
        "PImage",
        "fromarray",
        "np",
        "uint8",
        "cv_image",
        "img",
        "split",
        "PImage",
        "merge",
        "r",
        "g",
        "b",
        "BytesIO",
        "img",
        "save",
        "buffer",
        "format",
        "base64",
        "b64encode",
        "buffer",
        "getvalue",
        "decode",
        "pub_topic",
        "publish",
        "image_as_str",
        "msg",
        "cv2",
        "FONT_HERSHEY_SIMPLEX",
        "time",
        "time",
        "bridge",
        "imgmsg_to_cv2",
        "msg",
        "cv2",
        "resize",
        "cv2_img",
        "interpolation",
        "cv2",
        "INTER_AREA",
        "publish_image",
        "img",
        "input_pub",
        "img",
        "shape",
        "cv2",
        "dnn",
        "blobFromImage",
        "img",
        "crop",
        "net",
        "setInput",
        "blob",
        "net",
        "forward",
        "output_layers",
        "outs",
        "detection",
        "detection",
        "np",
        "argmax",
        "scores",
        "scores",
        "class_id",
        "confidence",
        "confidence_threshold",
        "detection",
        "width",
        "detection",
        "height",
        "detection",
        "width",
        "detection",
        "height",
        "center_x",
        "w",
        "center_y",
        "h",
        "boxes",
        "append",
        "x",
        "y",
        "w",
        "h",
        "confidences",
        "append",
        "confidence",
        "class_ids",
        "append",
        "class_id",
        "cv2",
        "dnn",
        "NMSBoxes",
        "boxes",
        "confidences",
        "i",
        "len",
        "boxes",
        "i",
        "indexes",
        "boxes",
        "i",
        "classes",
        "class_ids",
        "i",
        "round",
        "confidences",
        "i",
        "cv2",
        "rectangle",
        "img",
        "x",
        "y",
        "x",
        "w",
        "y",
        "h",
        "cv2",
        "putText",
        "img",
        "label",
        "x",
        "y",
        "font",
        "time",
        "time",
        "start_time",
        "elapsed_time",
        "round",
        "fps",
        "cv2",
        "imshow",
        "img",
        "publish_image",
        "img",
        "adv_pub",
        "cv2",
        "waitKey",
        "CvBridgeError",
        "e",
        "e",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument",
        "help",
        "choices",
        "required",
        "parser",
        "parse_args",
        "args",
        "env",
        "args",
        "env",
        "rospy",
        "init_node",
        "cv2",
        "dnn",
        "readNet",
        "open",
        "f",
        "line",
        "strip",
        "line",
        "f",
        "readlines",
        "net",
        "getLayerNames",
        "layer_names",
        "i",
        "i",
        "net",
        "getUnconnectedOutLayers",
        "CVDetector",
        "image_topic",
        "net",
        "output_layers",
        "classes",
        "rospy",
        "spin"
    ],
    "literals": [
        "'/input_img'",
        "'/adv_img'",
        "\"RGB\"",
        "\"JPEG\"",
        "'utf-8'",
        "\"bgr8\"",
        "\"=\"",
        "\"%\"",
        "\"fps: \"",
        "\"Image\"",
        "'__main__'",
        "'Data Collection'",
        "'--env'",
        "'environment'",
        "'gazebo'",
        "'turtlebot'",
        "'gazebo'",
        "\"/camera/rgb/image_raw\"",
        "'turtlebot'",
        "\"/raspicam_node/image_raw\"",
        "'cv_detector'",
        "\"yolov4-tiny-traffic_final.weights\"",
        "\"yolov4-tiny-traffic.cfg\"",
        "\"obj.names\"",
        "\"r\""
    ],
    "variables": [
        "net",
        "output_layers",
        "classes",
        "confidence_threshold",
        "bridge",
        "input_pub",
        "adv_pub",
        "img",
        "b",
        "g",
        "r",
        "img",
        "buffer",
        "image_as_str",
        "font",
        "start_time",
        "cv2_img",
        "img",
        "height",
        "width",
        "channels",
        "blob",
        "outs",
        "class_ids",
        "confidences",
        "boxes",
        "scores",
        "class_id",
        "confidence",
        "center_x",
        "center_y",
        "w",
        "h",
        "x",
        "y",
        "indexes",
        "x",
        "y",
        "w",
        "h",
        "label",
        "elapsed_time",
        "fps",
        "parser",
        "args",
        "image_topic",
        "image_topic",
        "net",
        "classes",
        "classes",
        "layer_names",
        "output_layers",
        "confidence_threshold",
        "detector"
    ],
    "comments": [
        "Import Relevant Libraries",
        "rospy for the subscriber",
        "ROS Image message",
        "Image Processing",
        "ROS Image message -> OpenCV2 image converter",
        "from tensorflow.keras.models import load_model",
        "Instantiate CvBridge",
        "_, buffer = cv2.imencode('.jpg', cv_image)",
        "Convert your ROS Image message to OpenCV2",
        "Publish the model input image",
        "get image shape",
        "Detecting objects (YOLO)",
        "print(outs)",
        "Showing informations on the screen (YOLO)",
        "print(detection.shape)",
        "Object detected",
        "Rectangle coordinates",
        "Publish the output image",
        "Spin until ctrl + c",
        "net = cv2.dnn.readNet(\"yolov3_training_last.weights\", \"yolov3_training.cfg\")",
        "get last layers names",
        "Spin until ctrl + c"
    ],
    "docstrings": [
        "'''Load YOLO (YOLOv3 or YOLOv4-Tiny)'''"
    ],
    "functions": [
        "publish_image",
        "image_callback"
    ],
    "classes": [
        "CVDetector"
    ]
}