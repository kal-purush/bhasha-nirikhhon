{
    "identifiers": [
        "src_arr",
        "max_size",
        "max",
        "max_size",
        "len",
        "src_arr",
        "src_arr",
        "size",
        "len",
        "src_arr",
        "len",
        "src_arr",
        "i",
        "len",
        "length",
        "i",
        "length",
        "IndexError",
        "i",
        "i",
        "i",
        "length",
        "head",
        "i",
        "size",
        "size",
        "buf",
        "tail",
        "tail",
        "ex",
        "len",
        "buf",
        "head",
        "head",
        "ex",
        "len",
        "size",
        "len",
        "x",
        "is_full",
        "__extend",
        "buf",
        "tail",
        "x",
        "tail",
        "tail",
        "size",
        "x",
        "is_full",
        "__extend",
        "buf",
        "head",
        "size",
        "x",
        "head",
        "head",
        "size",
        "is_empty",
        "IndexError",
        "buf",
        "tail",
        "size",
        "tail",
        "tail",
        "size",
        "ret",
        "is_empty",
        "IndexError",
        "buf",
        "head",
        "head",
        "head",
        "size",
        "ret",
        "tail",
        "head",
        "size",
        "key",
        "buf",
        "__index",
        "key",
        "key",
        "value",
        "buf",
        "__index",
        "key",
        "value",
        "format"
    ],
    "literals": [
        "\"index out of range: \"",
        "\"pop() when buffer is empty\"",
        "\"popleft() when buffer is empty\"",
        "\"Deque({0})\""
    ],
    "variables": [
        "size",
        "buf",
        "head",
        "tail",
        "length",
        "ex",
        "size",
        "ret",
        "ret"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Usage:",
        "",
        "Initialize",
        "q = Deque()",
        "q = Deque([10, 20])",
        "q = Deque([10, 20], 500000)",
        "",
        "",
        "append, pop",
        "q = Deque([10, 20])",
        "print(q) # Deque([10, 20])",
        "q.append(30)",
        "print(q) # Deque([10, 20, 30])",
        "q.appendleft(40)",
        "print(q) # Deque([40, 10, 20, 30])",
        "a = q.pop()",
        "print(q, a) # Deque([40, 10, 20]) 30",
        "b = q.popleft()",
        "print(q, b) # Deque([10, 20]) 40",
        "",
        "",
        "get, set",
        "q = Deque([10, 20, 30, 40, 50])",
        "a = q[1]",
        "print(q, a) # Deque([10, 20, 30, 40, 50]) 20",
        "q[1] = 60",
        "print(q) # Deque([10, 60, 30, 40, 50])",
        "b = q[-2]",
        "print(q, b) # Deque([10, 60, 30, 40, 50]) 40",
        "q[-2] = 70",
        "print(q) # Deque([10, 60, 30, 70, 50])",
        "",
        "",
        "type conversion etc",
        "to list:",
        "list(q)",
        "",
        "to set:",
        "set(q)",
        "",
        "list(reversed(q))",
        "",
        "len(q)"
    ],
    "docstrings": [
        "\"\"\"A dequeue that can perform random accesses with O(1).\n\n    See:\n    https://prd-xxx.hateblo.jp/entry/2020/02/07/114818\n    \"\"\""
    ],
    "functions": [
        "__index",
        "__extend",
        "is_full",
        "is_empty",
        "append",
        "appendleft",
        "pop",
        "popleft",
        "__len__",
        "__getitem__",
        "__setitem__",
        "__str__"
    ],
    "classes": []
}