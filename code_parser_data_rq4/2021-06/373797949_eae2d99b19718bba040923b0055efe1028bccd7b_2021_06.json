{
    "identifiers": [
        "require",
        "value",
        "colorWarn",
        "value",
        "colorErr",
        "value",
        "colorReset",
        "value",
        "colorReset",
        "exports",
        "options",
        "getCallerLocationHelper",
        "error",
        "structuredStackTrace",
        "structuredStackTrace",
        "caller",
        "caller",
        "getCallerLocation",
        "getCallerLocationHelper",
        "stackObj",
        "stackObj",
        "originalFormatter",
        "result",
        "exports",
        "options",
        "options",
        "options",
        "options",
        "getCallerLocation",
        "util",
        "options",
        "arguments",
        "exports",
        "options",
        "options",
        "options",
        "options",
        "colorWarn",
        "colorReset",
        "getCallerLocation",
        "util",
        "options",
        "arguments",
        "exports",
        "options",
        "options",
        "options",
        "options",
        "colorErr",
        "colorReset",
        "getCallerLocation",
        "util",
        "options",
        "arguments"
    ],
    "literals": [
        "\"use strict\"",
        "'util'",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\\x1b[93m\"",
        "\"\"",
        "\"\\x1b[91m\"",
        "\"\"",
        "\"\\x1b[0m\"",
        "\"\"",
        "\"\"",
        "${caller.getFileName()}:${caller.getLineNumber()}",
        "\"\"",
        "\"INFO \"",
        "\"\"",
        "${getCallerLocation()}:",
        "\"\"",
        "\"WARN \"",
        "\"\"",
        "${getCallerLocation()}:",
        "\"\"",
        "\"ERR  \"",
        "\"\"",
        "${getCallerLocation()}:"
    ],
    "variables": [
        "util",
        "colorWarn",
        "colorErr",
        "colorReset",
        "options",
        "getCallerLocationHelper",
        "caller",
        "getCallerLocation",
        "originalFormatter",
        "stackObj",
        "result"
    ],
    "comments": [
        "https://en.wikipedia.org/wiki/ANSI_escape_code#Colors",
        "When `value` is true: yellow",
        "When `value` is true: red",
        "When `value` is true: reset to terminal default",
        "Skip over getCallerLocation(), and the exports.(entry method)",
        "to the 3rd element, the actual caller method's location.",
        "Read more about Error.prepareStackTrace and CallSite here: https://v8.dev/docs/stack-trace-api"
    ],
    "docstrings": [
        "* @type {ModuleOptions}",
        "* Global options for this module.\n * @type {ModuleOptions}",
        "* Extracts the module entrypoint's caller's location from the current callstack.\n * @param {Error} error The error object. Not used.\n * @param {Array<NodeJS.CallSite>} structuredStackTrace\n * @returns {string} The caller's location in the format: 'location/to/file:lineNumber'. Example: `/app/start.js:15`",
        "* Gets the external caller's location.\n * @returns {string} The caller's location in the format: 'location/to/file:lineNumber'. Example: `/app/start.js:15` or `c:\\app\\start.js:15`",
        "* Logs info message in the format: '{timestamp?} {INFO?} /path/to/file:lineNumber: rest of arguments'.\n * Set module `options` to control wether timestamp, and log level are shown.",
        "* Logs warning message in the format: '{timestamp?} {WARN?} /path/to/file:lineNumber: rest of arguments'\n * Set module `options` to control wether timestamp, and log level are shown.",
        "* Logs error message in the format: '{timestamp?} { ERR?} /path/to/file:lineNumber: rest of arguments'\n * Set module `options` to control wether timestamp, and log level are shown.",
        "* Gets the timestamp.\n * @callback TimeStampFormatterFn\n * @returns {string} The timestamp.",
        "* Calls the logging backend.\n * @callback LoggerFn\n * @param {string} timestamp An optional timestamp string.\n * @param {string} logLevel An optional log level string.\n * @param {string} callSite A string in the format `/path/to/file:lineNumber:`\n * @param {...any} rest The rest of arguments.\n * @returns {void}",
        "* @typedef {Object} ModuleOptions\n * @prop {TimeStampFormatterFn|undefined} timeStampFormatter\n * When `undefined`, logs are not timestamped. When assigned to a method, it will be called for every log method.\n *\n * Examples:\n *\n * `timeStampFormatter = () => new Date().toISOString();`\n * `timeStampFormatter = () => new Date().toLocaleTimeString();`\n * @prop {boolean} showLogLevel When set to true, the log level is displayed in log messages.\n * @prop {util.InspectOptions} inspectOptions The options instance passed to `util.formatWithOptions`.\n * @prop {LoggerFn} logInfoFn The method to call when logging an informational message, set to `console.log` by default.\n * @prop {LoggerFn} logWarnFn: The method to call when logging a warning message, set to `console.warn` by default.\n * @prop {LoggerFn} logErrorFn: The method to call when logging an error message, set to `console.error` by default.\n * @prop {boolean} logLevelColored When set to true and `showLogLevel` is also true, WARN is colored as yellow, and ERR is colored as red."
    ],
    "functions": [
        "logLevelColored",
        "logLevelColored"
    ],
    "classes": []
}