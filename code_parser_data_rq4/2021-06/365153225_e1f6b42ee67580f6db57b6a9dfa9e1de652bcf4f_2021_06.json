{
    "identifiers": [
        "openpyxl",
        "requests",
        "filename",
        "sheetname",
        "openpyxl",
        "load_workbook",
        "filename",
        "wb",
        "sheetname",
        "sheet",
        "max_row",
        "item",
        "row",
        "id_reg",
        "sheet",
        "cell",
        "row",
        "item",
        "column",
        "value",
        "url_reg",
        "sheet",
        "cell",
        "row",
        "item",
        "column",
        "value",
        "data_reg",
        "sheet",
        "cell",
        "row",
        "item",
        "column",
        "value",
        "expected_reg",
        "sheet",
        "cell",
        "row",
        "item",
        "column",
        "value",
        "list_1",
        "append",
        "dict_1",
        "list_1",
        "url",
        "data",
        "headers",
        "requests",
        "post",
        "url",
        "url",
        "json",
        "data",
        "headers",
        "headers",
        "res",
        "json",
        "res_res",
        "filename",
        "sheetname",
        "row",
        "column",
        "final_result",
        "openpyxl",
        "load_workbook",
        "filename",
        "wb",
        "sheetname",
        "sheet",
        "cell",
        "row",
        "row",
        "column",
        "column",
        "final_result",
        "wb",
        "save",
        "filename",
        "filename",
        "sheetname",
        "read_data",
        "filename",
        "sheetname",
        "res",
        "get",
        "get",
        "eval",
        "case_data",
        "eval",
        "case_expect",
        "func",
        "url",
        "case_url",
        "data",
        "case_data",
        "case_expect",
        "real_result",
        "format",
        "case_id",
        "format",
        "case_expect_msg",
        "format",
        "real_result_msg",
        "case_expect_msg",
        "real_result_msg",
        "write_data",
        "filename",
        "sheetname",
        "case_id",
        "final_result",
        "execute_function",
        "execute_function"
    ],
    "literals": [
        "\"X-Lemonban-Media-Type\"",
        "\"lemonban.v2\"",
        "\"Content-Type\"",
        "\"application/json\"",
        "'id_reg'",
        "'url_reg'",
        "'data_reg'",
        "'expected_reg'",
        "'msg'",
        "'msg'",
        "'用例编号：{}'",
        "'预期结果为：{}'",
        "'实际结果为：{}'",
        "'这条用例通过!!'",
        "'pass'",
        "'这条用例不通过!!!'",
        "'false'",
        "'*'",
        "'test_case_api_no.xlsx'",
        "'register'",
        "'test_case_api_no.xlsx'",
        "'login'"
    ],
    "variables": [
        "wb",
        "sheet",
        "row",
        "list_1",
        "dict_1",
        "res",
        "res_res",
        "wb",
        "sheet",
        "value",
        "res",
        "case_id",
        "case_url",
        "case_data",
        "case_expect",
        "case_data",
        "case_expect",
        "real_result",
        "case_expect_msg",
        "real_result_msg",
        "final_result",
        "final_result"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "@Author   :   YaMeng",
        "@File :   api_test.py",
        "@Software :   PyCharm",
        "@Time :   2021/6/15 14:03",
        "@company  :   湖南省零檬信息技术有限公司",
        "接口自动化的步骤：",
        "1、编写好测试用例，代码自动读取测试用例里的数据  read_data()",
        "2、发送接口请求，得到响应结果  -- 实际结果   func()",
        "3、执行结果  vs  预期结果",
        "4、写入最终的测试结果到测试用例  -- write_data()",
        "加载工作簿",
        "找到sheet",
        "获取最大的行数",
        "定义一个空列表，用来接收所有的测试用例",
        "取左不取右，左闭右开",
        "取id",
        "取url",
        "取data",
        "取expected",
        "将一条一条的测试用例都添加到列表里进行保存",
        "调用读取函数读取注册接口测试用例",
        "取出用例编号",
        "取出接口地址",
        "取值请求参数",
        "取出预期结果",
        "通过eavl()函数，将取出的字符串格式的data转换为字典格式的data",
        "转换预期结果",
        "调用发送函数传入参数",
        "预期结果的msg",
        "实际结果的msg",
        "设置变量来接收最终的结果传给写入函数",
        "写个3个函数和一个判断",
        "先读取数据，拿到数据后，执行发送请求，得到预期结果和实际结果",
        "做结果判断，然后再把最终的结果写入到测试用例里面"
    ],
    "docstrings": [],
    "functions": [
        "read_data",
        "func",
        "write_data",
        "execute_function"
    ],
    "classes": []
}