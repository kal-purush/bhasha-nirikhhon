{
    "identifiers": [
        "uuid",
        "ipaddress",
        "staticmethod",
        "value",
        "value",
        "value",
        "get",
        "value",
        "staticmethod",
        "uuid",
        "uuid4",
        "replace",
        "uuid_str",
        "uuid_str",
        "staticmethod",
        "address",
        "ipaddress",
        "ip_address",
        "address",
        "ValueError",
        "staticmethod",
        "cidr",
        "ipaddress",
        "IPv4Network",
        "cidr",
        "netmask",
        "r",
        "ValueError",
        "staticmethod",
        "netmask",
        "ipaddress",
        "IPv4Network",
        "netmask",
        "prefixlen",
        "r",
        "ValueError",
        "staticmethod",
        "x",
        "_list",
        "x",
        "len",
        "_list",
        "len",
        "_list"
    ],
    "literals": [
        "\"True\"",
        "\"true\"",
        "\"-\"",
        "\"\"",
        "f\"0.0.0.0/{cidr}\"",
        "f\"0.0.0.0/{netmask}\""
    ],
    "variables": [
        "uuid_str",
        "r",
        "r"
    ],
    "comments": [
        "@validates('ip')",
        "def validate_ip(self, _, value):",
        "\"\"\"",
        "0.0.0.0 able to bind with 47808 but it unable to start BACnet server due to some reason. And when we insert new",
        "IP it won't work, coz 47808 is been already reserved but bacnet client is not there to disconnect.",
        "\"\"\"",
        "if value == \"0.0.0.0\":",
        "raise ValueError(\"IP 0.0.0.0 doesn't not support\")",
        "return value"
    ],
    "docstrings": [],
    "functions": [
        "to_bool",
        "make_uuid",
        "is_valid_ip",
        "cidr_to_netmask",
        "netmask_to_cidr",
        "check_list_in_range"
    ],
    "classes": [
        "Functions"
    ]
}