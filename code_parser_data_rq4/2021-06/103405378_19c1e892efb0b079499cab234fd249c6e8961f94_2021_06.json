{
    "identifiers": [
        "describe",
        "Description",
        "autoDescribeRoute",
        "rest",
        "Resource",
        "girderformindlogger",
        "api",
        "access",
        "girderformindlogger",
        "constants",
        "TokenScope",
        "girderformindlogger",
        "exceptions",
        "AccessException",
        "ValidationException",
        "girderformindlogger",
        "models",
        "user",
        "User",
        "UserModel",
        "girderformindlogger",
        "models",
        "folder",
        "Folder",
        "FolderModel",
        "girderformindlogger",
        "models",
        "collection",
        "Collection",
        "bson",
        "objectid",
        "ObjectId",
        "Resource",
        "route",
        "createTheme",
        "route",
        "readTheme",
        "route",
        "updateTheme",
        "route",
        "deleteTheme",
        "Collection",
        "findOne",
        "themeCollection",
        "Collection",
        "createCollection",
        "Collection",
        "findOne",
        "themeCollection",
        "theme",
        "themeSettings",
        "theme",
        "update",
        "themeSettings",
        "FolderModel",
        "save",
        "theme",
        "validate",
        "FolderModel",
        "findOne",
        "ObjectId",
        "theme",
        "theme",
        "autoDescribeRoute",
        "Description",
        "notes",
        "errorResponse",
        "param",
        "dataType",
        "required",
        "param",
        "dataType",
        "required",
        "param",
        "dataType",
        "required",
        "param",
        "dataType",
        "required",
        "param",
        "dataType",
        "required",
        "param",
        "dataType",
        "required",
        "name",
        "logo",
        "backgroundImage",
        "primaryColor",
        "secondaryColor",
        "tertiaryColor",
        "getCurrentUser",
        "findThemeCollection",
        "FolderModel",
        "createFolder",
        "parent",
        "themeCollection",
        "name",
        "name",
        "parentType",
        "creator",
        "user",
        "allowRename",
        "newTheme",
        "logo",
        "backgroundImage",
        "primaryColor",
        "secondaryColor",
        "tertiaryColor",
        "updateThemeFolder",
        "newTheme",
        "themeSettings",
        "newTheme",
        "autoDescribeRoute",
        "Description",
        "notes",
        "param",
        "required",
        "param",
        "required",
        "errorResponse",
        "id",
        "name",
        "name",
        "FolderModel",
        "findOne",
        "name",
        "theme",
        "id",
        "FolderModel",
        "findOne",
        "ObjectId",
        "id",
        "theme",
        "findThemeCollection",
        "themeCollection",
        "ObjectId",
        "parentId",
        "FolderModel",
        "find",
        "query",
        "theme",
        "theme",
        "themes",
        "response",
        "autoDescribeRoute",
        "Description",
        "notes",
        "errorResponse",
        "param",
        "required",
        "param",
        "dataType",
        "required",
        "param",
        "dataType",
        "required",
        "param",
        "dataType",
        "required",
        "param",
        "dataType",
        "required",
        "param",
        "dataType",
        "required",
        "param",
        "dataType",
        "required",
        "id",
        "name",
        "logo",
        "backgroundImage",
        "primaryColor",
        "secondaryColor",
        "tertiaryColor",
        "getCurrentUser",
        "FolderModel",
        "findOne",
        "ObjectId",
        "id",
        "theme",
        "ValidationException",
        "id",
        "name",
        "name",
        "theme",
        "name",
        "FolderModel",
        "save",
        "theme",
        "name",
        "logo",
        "backgroundImage",
        "primaryColor",
        "secondaryColor",
        "tertiaryColor",
        "k",
        "v",
        "k",
        "v",
        "themeSettings",
        "items",
        "v",
        "updateThemeFolder",
        "newTheme",
        "themeSettings",
        "newTheme",
        "autoDescribeRoute",
        "Description",
        "notes",
        "param",
        "required",
        "errorResponse",
        "id",
        "FolderModel",
        "findOne",
        "ObjectId",
        "id",
        "theme",
        "ValidationException",
        "id",
        "FolderModel",
        "remove",
        "theme",
        "theme"
    ],
    "literals": [
        "'theme'",
        "'POST'",
        "'GET'",
        "'PUT'",
        "':id'",
        "'DELETE'",
        "':id'",
        "\"name\"",
        "\"Themes\"",
        "'Themes'",
        "\"name\"",
        "\"Themes\"",
        "'meta'",
        "'_id'",
        "'_id'",
        "'Create a new theme.'",
        "'This endpoint is used to define a theme that can be used to reskin/style an applet. <br>'",
        "'name'",
        "'Set the name of the theme. Usually the name of an institution e.g.: CMI. will raise an exception if the name already exists'",
        "'string'",
        "'logo'",
        "'a url of a logo of the institution creating the applet'",
        "'string'",
        "'backgroundImage'",
        "'url of an image to be displayed in the background of the applet'",
        "'string'",
        "'primaryColor'",
        "'set the main color for styling the applet. Used for header, footer, navbar and buttons'",
        "'string'",
        "'secondaryColor'",
        "'Set a secondary color'",
        "'string'",
        "'tertiaryColor'",
        "'Set a tertiary color'",
        "'string'",
        "'collection'",
        "\"name\"",
        "'name'",
        "\"logo\"",
        "\"backgroundImage\"",
        "\"primaryColor\"",
        "\"secondaryColor\"",
        "\"tertiaryColor\"",
        "'Get a theme by ID, name or return all.'",
        "'This endpoint is used to get a theme by name or id, or get all themes. <br>'",
        "'id'",
        "'ID of the theme'",
        "'name'",
        "'name of the theme'",
        "\"name\"",
        "'meta'",
        "\"_id\"",
        "'meta'",
        "\"_id\"",
        "\"parentId\"",
        "'meta'",
        "'Update an existing theme.'",
        "'This endpoint is used to update a theme that can be used to reskin/style an applet. <br>'",
        "'id'",
        "'the id of the theme'",
        "'name'",
        "'Set the name of the theme. Usually the name of an institution e.g.: CMI'",
        "'string'",
        "'logo'",
        "'a url of a logo of the institution creating the applet'",
        "'string'",
        "'backgroundImage'",
        "'url of an image to be displayed in the background of the applet'",
        "'string'",
        "'primaryColor'",
        "'set the main color for styling the applet. Used for header, footer, navbar and buttons'",
        "'string'",
        "'secondaryColor'",
        "'Set a secondary color'",
        "'string'",
        "'tertiaryColor'",
        "'Set a tertiary color'",
        "'string'",
        "\"_id\"",
        "f\"theme not found for id: {id}\"",
        "'name'",
        "'meta'",
        "'name'",
        "\"name\"",
        "\"logo\"",
        "\"backgroundImage\"",
        "\"primaryColor\"",
        "\"secondaryColor\"",
        "\"tertiaryColor\"",
        "'delete a theme by ID.'",
        "'This endpoint is used to delete a theme by id. <br>'",
        "'id'",
        "'ID of the theme'",
        "\"_id\"",
        "f\"theme not found for id: {id}\"",
        "'message'",
        "f\"Deleted theme '{theme['name']}'\"",
        "'name'"
    ],
    "variables": [
        "resourceName",
        "themeCollection",
        "themeCollection",
        "theme",
        "user",
        "themeCollection",
        "newTheme",
        "themeSettings",
        "newTheme",
        "theme",
        "theme",
        "themeCollection",
        "parentId",
        "query",
        "themes",
        "response",
        "user",
        "theme",
        "theme",
        "themeSettings",
        "themeSettings",
        "newTheme",
        "theme"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "themes are used to apply an organisations color, logo etc. to an applets",
        "",
        "Copyright 2013 Kitware Inc.",
        "",
        "Licensed under the Apache License, Version 2.0 ( the \"License\" );",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "",
        "create the theme collection if it isn't there",
        "@access.public(scope=TokenScope.USER_INFO_READ)",
        "TO DO -> require admin permission to create Theme",
        "if user is not an admin :",
        "raise AccessException(\"You must be an administrator to create a Theme.\")",
        "@access.public(scope=TokenScope.USER_INFO_READ)",
        "currentUser = self.getCurrentUser()",
        "if not currentUser:",
        "raise AccessException(",
        "\"You must be logged in to get invitation.\"",
        ")",
        "@access.public(scope=TokenScope.DATA_OWN)",
        "TO DO -> require admin permission to update a Theme",
        "if user==None:",
        "raise AccessException(\"You must be an administrator to update a Theme.\")",
        "get existing theme document",
        "update name",
        "filter out parameters that were not passed and update metadata",
        "@access.public(scope=TokenScope.DATA_OWN)"
    ],
    "docstrings": [
        "\"\"\"API Endpoint for themes.\"\"\"",
        "\"\"\"returns the theme collection,\n        creates the collection if it doesn't already exists\n        \"\"\"",
        "\"\"\"\n        save updates to the meta field of a theme folder. \n        query the db to return the updated document \n        \"\"\"",
        "\"\"\"\n        Create a theme\n        \"\"\"",
        "\"\"\"\n        Get a theme as a json document.\n        \"\"\"",
        "\"\"\"\n        endpoint for updating a theme\n        \"\"\"",
        "\"\"\"\n        delete a theme by ID.\n        \"\"\""
    ],
    "functions": [
        "findThemeCollection",
        "updateThemeFolder",
        "createTheme",
        "readTheme",
        "updateTheme",
        "deleteTheme"
    ],
    "classes": [
        "Theme"
    ]
}