{
    "identifiers": [
        "ether",
        "chai",
        "getLocalEip712Signature",
        "RelayRequest",
        "cloneRelayRequest",
        "Environment",
        "TypedRequestData",
        "getDomainSeparatorHash",
        "walletFactoryAbi",
        "relayHubAbi",
        "abiDecoder",
        "RelayHubInstance",
        "PenalizerInstance",
        "TestRecipientInstance",
        "IForwarderInstance",
        "TestVerifierEverythingAcceptedInstance",
        "SmartWalletInstance",
        "SmartWalletFactoryInstance",
        "TestTokenInstance",
        "deployHub",
        "getTestingEnvironment",
        "createSmartWallet",
        "getGaslessAccount",
        "createSmartWalletFactory",
        "chaiAsPromised",
        "AccountKeypair",
        "toBN",
        "chai",
        "chaiAsPromised",
        "artifacts",
        "artifacts",
        "artifacts",
        "artifacts",
        "abiDecoder",
        "TestRecipient",
        "abiDecoder",
        "walletFactoryAbi",
        "abiDecoder",
        "relayHubAbi",
        "contract",
        "describe",
        "beforeEach",
        "env",
        "getTestingEnvironment",
        "chainId",
        "env",
        "penalizer",
        "Penalizer",
        "relayHubInstance",
        "deployHub",
        "penalizer",
        "verifierContract",
        "TestVerifierEverythingAccepted",
        "gaslessAccount",
        "getGaslessAccount",
        "SmartWallet",
        "factory",
        "createSmartWalletFactory",
        "smartWalletTemplate",
        "recipientContract",
        "TestRecipient",
        "artifacts",
        "token",
        "testToken",
        "target",
        "recipientContract",
        "verifier",
        "verifierContract",
        "relayHub",
        "relayHubInstance",
        "forwarderInstance",
        "createSmartWallet",
        "_",
        "gaslessAccount",
        "factory",
        "gaslessAccount",
        "chainId",
        "forwarder",
        "forwarderInstance",
        "token",
        "forwarder",
        "sharedRelayRequestData",
        "relayHub",
        "target",
        "gaslessAccount",
        "forwarderInstance",
        "gasLimit",
        "token",
        "forwarder",
        "verifier",
        "getDomainSeparatorHash",
        "forwarder",
        "chainId",
        "context",
        "beforeEach",
        "relayHubInstance",
        "relayManager",
        "ether",
        "relayOwner",
        "encodedFunction",
        "recipientContract",
        "message",
        "relayHubInstance",
        "relayWorker",
        "relayManager",
        "relayHubInstance",
        "url",
        "relayManager",
        "relayRequest",
        "cloneRelayRequest",
        "sharedRelayRequestData",
        "relayRequest",
        "encodedFunction",
        "TypedRequestData",
        "chainId",
        "forwarder",
        "relayRequest",
        "signatureWithPermissiveVerifier",
        "getLocalEip712Signature",
        "dataToSign",
        "gaslessAccount",
        "context",
        "it",
        "succeed",
        "forwarderInstance",
        "token",
        "relayWorker",
        "toBN",
        "web3",
        "relayWorker",
        "token",
        "forwarder",
        "toBN",
        "web3",
        "forwarder",
        "token",
        "gaslessAccount",
        "toBN",
        "web3",
        "gaslessAccount",
        "Truffle",
        "transaction",
        "relayHubInstance",
        "relayRequest",
        "signatureWithPermissiveVerifier",
        "relayWorker",
        "gasSent",
        "error",
        "forwarderInstance",
        "nonceBefore",
        "nonceAfter",
        "token",
        "relayWorker",
        "workerTokenBalanceBefore",
        "workerTokenBalanceAfter",
        "token",
        "forwarder",
        "swTokenBalanceBefore",
        "swTokenBalanceAfter",
        "toBN",
        "web3",
        "relayWorker",
        "error",
        "workerRBTCBalanceBefore",
        "workerRBTCBalanceAfter",
        "gasSent",
        "workerRBTCBalanceBefore",
        "workerRBTCBalanceAfter",
        "workerRBTCBalanceBefore",
        "workerRBTCBalanceAfter",
        "gasSent",
        "workerRBTCBalanceBefore",
        "workerRBTCBalanceAfter",
        "toBN",
        "web3",
        "forwarder",
        "swRBTCBalanceBefore",
        "swRBTCBalanceAfter",
        "token",
        "gaslessAccount",
        "ownerTokenBalanceBefore",
        "ownerTokenBalanceAfter",
        "toBN",
        "web3",
        "gaslessAccount",
        "ownerRBTCBalanceBefore",
        "ownerRBTCBalanceAfter",
        "gasSent",
        "gasSent",
        "forwarderInstance",
        "nonceBefore",
        "nonceAfter",
        "web3",
        "transaction",
        "abiDecoder",
        "receipt",
        "logs",
        "e",
        "e",
        "e",
        "message",
        "sampleRecipientEmittedEvent",
        "forwarder",
        "sampleRecipientEmittedEvent",
        "relayWorker",
        "sampleRecipientEmittedEvent",
        "logs",
        "e",
        "e",
        "e",
        "transactionRelayedEvent",
        "token",
        "relayWorker",
        "workerTokenBalanceBefore",
        "toBN",
        "workerTokenBalanceAfter",
        "token",
        "forwarder",
        "swTokenBalanceBefore",
        "swTokenBalanceAfter",
        "toBN",
        "succeed",
        "startTime"
    ],
    "literals": [
        "'@openzeppelin/test-helpers'",
        "'chai'",
        "'../src/common/Utils'",
        "'../src/common/EIP712/RelayRequest'",
        "'../src/common/Environments'",
        "'../src/common/EIP712/TypedRequestData'",
        "'../src/common/interfaces/IWalletFactory.json'",
        "'../src/common/interfaces/IRelayHub.json'",
        "'abi-decoder'",
        "'../types/truffle-contracts'",
        "'./TestUtils'",
        "'chai-as-promised'",
        "'../src/relayclient/AccountManager'",
        "'web3-utils'",
        "'SmartWallet'",
        "'Penalizer'",
        "'TestVerifierEverythingAccepted'",
        "'TestRecipient'",
        "'RelayHub'",
        "string",
        "string",
        "string",
        "string",
        "'1000000'",
        "'1'",
        "'relayCall'",
        "'TestToken'",
        "'1000'",
        "'0x'",
        "'0'",
        "'1'",
        "'50000'",
        "'with staked and registered relay'",
        "'http://relay.com'",
        "'Enveloping RelayHub'",
        "string",
        "string",
        "'2'",
        "'with funded verifier'",
        "'relayCall atomicity cannot be broken using user-entered gas attacks'",
        "'Smart wallet nonce must be unchanged'",
        "'Worker token balance must be unchanged'",
        "'Smart wallet token balance must be unchanged'",
        "'basic cost is above the gas limit'",
        "RBTC balance of the worker must be the same, gasSent is ${gasSent}, balance before is ${workerRBTCBalanceBefore.toString()}, balance after is ${workerRBTCBalanceAfter.toString()}",
        "RBTC balance of the worker must have decreased, gasSent is ${gasSent}, balance before is ${workerRBTCBalanceBefore.toString()}, balance after is ${workerRBTCBalanceAfter.toString()}",
        "'Smart Wallet RBTC balance, if any, must be unchanged'",
        "'Smart wallet owner token balance, if any, must be unchanged'",
        "'Smart Wallet owner RBTC balance, if any, must be unchanged'",
        "'It worked with gas: '",
        "'SampleRecipientEmitted'",
        "'TransactionRelayed'",
        "'Worker token balance did not increase'",
        "'Smart wallet token balance did not decrease'",
        "'Start Time: '",
        "'End time: '"
    ],
    "variables": [
        "SmartWallet",
        "Penalizer",
        "TestVerifierEverythingAccepted",
        "TestRecipient",
        "_",
        "relayOwner",
        "relayManager",
        "relayWorker",
        "chainId",
        "relayHub",
        "penalizer",
        "relayHubInstance",
        "recipientContract",
        "verifierContract",
        "forwarderInstance",
        "target",
        "verifier",
        "forwarder",
        "gaslessAccount",
        "gasLimit",
        "gasPrice",
        "sharedRelayRequestData",
        "env",
        "token",
        "factory",
        "smartWalletTemplate",
        "testToken",
        "url",
        "message",
        "relayRequest",
        "encodedFunction",
        "signatureWithPermissiveVerifier",
        "dataToSign",
        "gasSent",
        "succeed",
        "startTime",
        "nonceBefore",
        "workerTokenBalanceBefore",
        "workerRBTCBalanceBefore",
        "swTokenBalanceBefore",
        "swRBTCBalanceBefore",
        "ownerTokenBalanceBefore",
        "ownerRBTCBalanceBefore",
        "transaction",
        "nonceAfter",
        "workerTokenBalanceAfter",
        "swTokenBalanceAfter",
        "workerRBTCBalanceAfter",
        "swRBTCBalanceAfter",
        "ownerTokenBalanceAfter",
        "ownerRBTCBalanceAfter",
        "nonceAfter",
        "receipt",
        "logs",
        "sampleRecipientEmittedEvent",
        "transactionRelayedEvent",
        "workerTokenBalanceAfter",
        "swTokenBalanceAfter"
    ],
    "comments": [
        "@ts-ignore",
        "@ts-ignore",
        "truffle-contract doesn't let us create method data from the class, we need an actual instance",
        "less gas wont even pass the node's transaction cost validation",
        "121620 is the gas used for this transaction in order to succeed"
    ],
    "docstrings": [
        "* The User's SmartWallet cannot be attacked by the Relayer with the following attack:\n         * The RelayServer carefully chooses the gas to send in the transaction in order to be able\n         * to collect the token payment from the user but avoiding the execution of the destination contract\n         *\n         * The design of the SmartWallet smart contract makes it obvious, but this test is another way of demonstrating this attack is not possible.\n         * This test works by increasing the gas sent to the transaction one by one (n times) until the transaction passes.\n         * All the other previous n-1 cases (where the gas was not enough) we prove that the transaction reverts as a whole, without any state changes\n         *\n         * This suite does not run by default, because this test can take hours to complete.\n         * If you want to try this test simply run it stand alone or add it in .circleci/config.yml\n         *"
    ],
    "functions": [],
    "classes": []
}