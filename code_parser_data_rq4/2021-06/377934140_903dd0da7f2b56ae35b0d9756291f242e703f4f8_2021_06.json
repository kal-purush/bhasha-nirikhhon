{
    "identifiers": [
        "geopandas",
        "gpd",
        "maup",
        "pandas",
        "pd",
        "matplotlib",
        "pyplot",
        "plt",
        "requests",
        "json",
        "csv",
        "io",
        "pydantic",
        "pydantic",
        "BaseModel",
        "typing",
        "Tuple",
        "pydantic",
        "BaseModel",
        "ids_url",
        "plans_url",
        "cois_url",
        "wr_url",
        "Tuple",
        "pd",
        "DataFrame",
        "pd",
        "DataFrame",
        "pd",
        "DataFrame",
        "retrieve_submission_ids_json",
        "ids_url",
        "submissions",
        "sort",
        "key",
        "x",
        "x",
        "id",
        "sub",
        "districtr_plan",
        "sub",
        "submissions",
        "sub",
        "plan_type",
        "sub",
        "districtr_plan",
        "sub",
        "submissions",
        "sub",
        "plan_type",
        "csv_read",
        "plans_url",
        "csv_read",
        "cois_url",
        "csv_read",
        "wr_url",
        "len",
        "plan_submissions",
        "len",
        "plan_submissions_df",
        "len",
        "coi_submissions",
        "len",
        "coi_submissions_df",
        "plan_submissions_df",
        "link",
        "link",
        "split",
        "split",
        "coi_submissions_df",
        "link",
        "link",
        "split",
        "split",
        "plan_submissions_df",
        "sort_values",
        "by",
        "ascending",
        "coi_submissions_df",
        "sort_values",
        "by",
        "ascending",
        "plan_submissions",
        "coi_submissions",
        "plan_submissions_df",
        "coi_submissions_df",
        "written_submissions_df",
        "plan_id",
        "plan_id",
        "requests",
        "get",
        "url",
        "json",
        "loads",
        "r",
        "text",
        "data",
        "url",
        "requests",
        "get",
        "url",
        "json",
        "loads",
        "r",
        "text",
        "ids",
        "subs_json",
        "ids",
        "plan_link",
        "split",
        "split",
        "ids",
        "submissions",
        "append",
        "Submission",
        "link",
        "plan_link",
        "plan_type",
        "plan_type",
        "id",
        "plan_id",
        "districtr_plan",
        "plan_read",
        "plan_id",
        "submissions",
        "url",
        "pd",
        "DataFrame",
        "requests",
        "get",
        "url",
        "headers",
        "headers",
        "content",
        "pd",
        "read_csv",
        "io",
        "StringIO",
        "r",
        "decode",
        "read_file"
    ],
    "literals": [
        "\"plan\"",
        "\"coi\"",
        "'plan_id'",
        "\"link\"",
        "\"/\"",
        "\"?\"",
        "'plan_id'",
        "\"link\"",
        "\"/\"",
        "\"?\"",
        "'plan_id'",
        "'plan_id'",
        "'districtr_data'",
        "'districtr_data'",
        "\"https://districtr.org/.netlify/functions/planRead?id=%s\"",
        "'ids'",
        "'link'",
        "\"/\"",
        "\"?\"",
        "'type'",
        "'User-Agent'",
        "'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36'",
        "'utf-8'"
    ],
    "variables": [
        "link",
        "districtr_plan",
        "plan_type",
        "id",
        "submissions",
        "plan_submissions",
        "coi_submissions",
        "plan_submissions_df",
        "coi_submissions_df",
        "written_submissions_df",
        "plan_submissions_df",
        "coi_submissions_df",
        "plan_submissions_df",
        "coi_submissions_df",
        "plan_submissions_df",
        "coi_submissions_df",
        "url",
        "r",
        "data",
        "r",
        "subs_json",
        "submissions",
        "plan_link",
        "plan_id",
        "plan_type",
        "headers",
        "r",
        "read_file"
    ],
    "comments": [
        "more imports than we need",
        "dict: districtr json obj",
        "sorts submission jsons by id",
        "filters plan",
        "filters cois",
        "gathers plan metadata in df",
        "gathers coi metadata in df",
        "gathers written metadata in df",
        "parse for plan id and add in submission dfs",
        "sort dfs by plan id to correctly join w/ json information",
        "join in districtr json assignments into 'districtr_data column'",
        "return relevant dataframes",
        "(dict: json obj)#",
        "list: list[Submission]",
        "Phase 1, retrieve link, id, type of plan",
        "Phase 2, fill submission with phase 1 + the ditrictr plan(assignment)",
        "TODO: temp fix for the purposes of user-agent api call barrier"
    ],
    "docstrings": [
        "\"\"\"\n    pydantic class containing districtr link, districtr plan (assignment),  ...\n    the type of the plan \n    \"\"\"",
        "\"\"\"\n    Takes in endpoint for all districtr ids in a portal along with csv api  ...\n    calls for plans, cois, and written submissions, and retrieves filled pd ...\n    dataframes for each submission type with metadata and districtr assignments\n    \"\"\"",
        "\"\"\"\n    takes in plan_id string, makes api call w/ plan_id to the planRead funct...\n    in netlify, and returns the data associated with the plan_id in JSON format\n    \"\"\"",
        "\"\"\"\n    retrieveSubmissionJson takes a url (an endpoint to a given state's...\n    submission portal), returns a list of filled Submission objects\n    \"\"\"",
        "\"\"\"\n    takes in a url (api endpt to query on given submission portal) to find  ...\n    in csv form data from the portal, and returns a pandas dataframe filled ...\n    with the portal info\n    \"\"\""
    ],
    "functions": [
        "submissions",
        "plan_read",
        "retrieve_submission_ids_json",
        "csv_read"
    ],
    "classes": [
        "Submission"
    ]
}