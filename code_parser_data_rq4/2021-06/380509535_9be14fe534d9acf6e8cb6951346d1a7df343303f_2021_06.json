{
    "identifiers": [
        "cv2",
        "time",
        "handtrackingmodule",
        "htm",
        "numpy",
        "np",
        "os",
        "np",
        "zeros",
        "np",
        "uint8",
        "os",
        "listdir",
        "folderPath",
        "imPath",
        "myList",
        "cv2",
        "imread",
        "folderPath",
        "imPath",
        "overlayList",
        "append",
        "image",
        "overlayList",
        "cv2",
        "VideoCapture",
        "cap",
        "cap",
        "htm",
        "handDetector",
        "detectionCon",
        "maxHands",
        "cap",
        "read",
        "cv2",
        "flip",
        "img",
        "detector",
        "findHands",
        "img",
        "detector",
        "findPosition",
        "img",
        "draw",
        "len",
        "lmList",
        "lmList",
        "lmList",
        "lmList",
        "lmList",
        "detector",
        "fingersUp",
        "fingers",
        "fingers",
        "y1",
        "x1",
        "overlayList",
        "x1",
        "overlayList",
        "x1",
        "overlayList",
        "x1",
        "overlayList",
        "cv2",
        "rectangle",
        "img",
        "x1",
        "y1",
        "x2",
        "y2",
        "drawColor",
        "cv2",
        "FILLED",
        "fingers",
        "fingers",
        "cv2",
        "circle",
        "img",
        "x1",
        "y1",
        "drawColor",
        "cv2",
        "FILLED",
        "xp",
        "yp",
        "x1",
        "y1",
        "drawColor",
        "cv2",
        "line",
        "img",
        "xp",
        "yp",
        "x1",
        "y1",
        "drawColor",
        "eraserThickness",
        "cv2",
        "line",
        "imgCanvas",
        "xp",
        "yp",
        "x1",
        "y1",
        "drawColor",
        "eraserThickness",
        "cv2",
        "line",
        "img",
        "xp",
        "yp",
        "x1",
        "y1",
        "drawColor",
        "brushThickness",
        "cv2",
        "line",
        "imgCanvas",
        "xp",
        "yp",
        "x1",
        "y1",
        "drawColor",
        "brushThickness",
        "x1",
        "y1",
        "cv2",
        "cvtColor",
        "imgCanvas",
        "cv2",
        "COLOR_BGR2GRAY",
        "cv2",
        "threshold",
        "imgGray",
        "cv2",
        "THRESH_BINARY_INV",
        "cv2",
        "cvtColor",
        "imgInv",
        "cv2",
        "COLOR_GRAY2BGR",
        "cv2",
        "bitwise_and",
        "img",
        "imgInv",
        "cv2",
        "bitwise_or",
        "img",
        "imgCanvas",
        "header",
        "cv2",
        "imshow",
        "img",
        "cv2",
        "waitKey"
    ],
    "literals": [
        "\"Header\"",
        "f'{folderPath}/{imPath}'",
        "\"Image\""
    ],
    "variables": [
        "overlayList",
        "brushThickness",
        "eraserThickness",
        "drawColor",
        "xp",
        "yp",
        "imgCanvas",
        "folderPath",
        "myList",
        "image",
        "header",
        "cap",
        "detector",
        "success",
        "img",
        "img",
        "img",
        "lmList",
        "bbox",
        "x1",
        "y1",
        "x2",
        "y2",
        "fingers",
        "xp",
        "yp",
        "header",
        "drawColor",
        "header",
        "drawColor",
        "header",
        "drawColor",
        "header",
        "drawColor",
        "xp",
        "yp",
        "xp",
        "yp",
        "imgGray",
        "_",
        "imgInv",
        "imgInv",
        "img",
        "img",
        "img"
    ],
    "comments": [
        "list to store all the images",
        "setting purple color",
        "defining canvas",
        "images in header folder",
        "getting all the images used in code",
        "print(myList)",
        "reading all the images from the folder",
        "inserting images one by one in the overlayList",
        "storing 1st image",
        "width",
        "height",
        "making object",
        "1. Import image",
        "for neglecting mirror inversion",
        "2. Find Hand Landmarks",
        "using functions fo connecting landmarks",
        "using function to find specific landmark position,draw false means no circles on landmarks",
        "print(lmList)",
        "tip of index finger",
        "tip of middle finger",
        "3. Check which fingers are up",
        "print(fingers)",
        "4. If Selection Mode - Two finger are up",
        "print(\"Selection Mode\")",
        "checking for click",
        "if i m clicking at purple brush",
        "if i m clicking at blue brush",
        "if i m clicking at green brush",
        "if i m clicking at eraser",
        "selection mode is represented as rectangle",
        "5. If Drawing Mode - Index finger is up",
        "drawing mode is represented as circle",
        "print(\"Drawing Mode\")",
        "initially xp and yp will be at 0,0 so it will draw a line from 0,0 to whichever point our tip is at",
        "so to avoid that we set xp=x1 and yp=y1",
        "till now we are creating our drawing but it gets removed as everytime our frames are updating so we have to define our canvas where we can draw and show also",
        "eraser",
        "gonna draw lines from previous coodinates to new positions",
        "giving values to xp,yp everytime",
        "merging two windows into one imgcanvas and img",
        "1 converting img to gray",
        "2 converting into binary image and thn inverting",
        "on canvas all the region in which we drew is black and where it is black it is cosidered as white,it will create a mask",
        "converting again to gray bcoz we have to add in a RGB image i.e img",
        "add original img with imgInv ,by doing this we get our drawing only in black color",
        "add img and imgcanvas,by doing this we get colors on img",
        "setting the header image",
        "on our frame we are setting our JPG image acc to H,W of jpg images",
        "cv2.imshow(\"Canvas\", imgCanvas)",
        "cv2.imshow(\"Inv\", imgInv)"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}