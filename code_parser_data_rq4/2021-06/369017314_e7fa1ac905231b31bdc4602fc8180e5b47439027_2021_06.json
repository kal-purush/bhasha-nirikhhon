{
    "identifiers": [
        "io",
        "siddhi",
        "extension",
        "sink",
        "io",
        "netty",
        "buffer",
        "ByteBuf",
        "io",
        "netty",
        "buffer",
        "Unpooled",
        "io",
        "netty",
        "handler",
        "codec",
        "base64",
        "Base64",
        "io",
        "netty",
        "handler",
        "codec",
        "http",
        "DefaultHttpRequest",
        "io",
        "netty",
        "handler",
        "codec",
        "http",
        "HttpHeaders",
        "io",
        "netty",
        "handler",
        "codec",
        "http",
        "HttpMethod",
        "io",
        "netty",
        "handler",
        "codec",
        "http",
        "HttpVersion",
        "io",
        "siddhi",
        "annotation",
        "Example",
        "io",
        "siddhi",
        "annotation",
        "Extension",
        "io",
        "siddhi",
        "annotation",
        "Parameter",
        "io",
        "siddhi",
        "annotation",
        "SystemParameter",
        "io",
        "siddhi",
        "annotation",
        "util",
        "DataType",
        "io",
        "siddhi",
        "core",
        "config",
        "SiddhiAppContext",
        "io",
        "siddhi",
        "core",
        "exception",
        "ConnectionUnavailableException",
        "io",
        "siddhi",
        "core",
        "exception",
        "SiddhiAppCreationException",
        "io",
        "siddhi",
        "core",
        "stream",
        "ServiceDeploymentInfo",
        "io",
        "siddhi",
        "core",
        "stream",
        "output",
        "sink",
        "Sink",
        "io",
        "siddhi",
        "core",
        "util",
        "config",
        "ConfigReader",
        "io",
        "siddhi",
        "core",
        "util",
        "snapshot",
        "state",
        "State",
        "io",
        "siddhi",
        "core",
        "util",
        "snapshot",
        "state",
        "StateFactory",
        "io",
        "siddhi",
        "core",
        "util",
        "transport",
        "DynamicOptions",
        "io",
        "siddhi",
        "core",
        "util",
        "transport",
        "Option",
        "io",
        "siddhi",
        "core",
        "util",
        "transport",
        "OptionHolder",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "metrics",
        "EndpointStatus",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "metrics",
        "SinkMetrics",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "sink",
        "ClientConnector",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "sink",
        "exception",
        "HttpSinkAdaptorRuntimeException",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "sink",
        "updatetoken",
        "AccessTokenCache",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "sink",
        "updatetoken",
        "DefaultListener",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "sink",
        "updatetoken",
        "HttpsClient",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "sink",
        "util",
        "HttpSinkUtil",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "util",
        "HttpConstants",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "util",
        "HttpIoUtil",
        "io",
        "siddhi",
        "query",
        "api",
        "definition",
        "StreamDefinition",
        "org",
        "apache",
        "log4j",
        "Logger",
        "org",
        "wso2",
        "carbon",
        "messaging",
        "Header",
        "org",
        "wso2",
        "carbon",
        "si",
        "metrics",
        "core",
        "MetricsDataHolder",
        "org",
        "wso2",
        "transport",
        "http",
        "netty",
        "contract",
        "Constants",
        "org",
        "wso2",
        "transport",
        "http",
        "netty",
        "contract",
        "HttpConnectorListener",
        "org",
        "wso2",
        "transport",
        "http",
        "netty",
        "contract",
        "HttpResponseFuture",
        "org",
        "wso2",
        "transport",
        "http",
        "netty",
        "contract",
        "config",
        "ChunkConfig",
        "org",
        "wso2",
        "transport",
        "http",
        "netty",
        "contract",
        "config",
        "ProxyServerConfiguration",
        "org",
        "wso2",
        "transport",
        "http",
        "netty",
        "contract",
        "config",
        "SenderConfiguration",
        "org",
        "wso2",
        "transport",
        "http",
        "netty",
        "contractimpl",
        "DefaultHttpWsConnectorFactory",
        "org",
        "wso2",
        "transport",
        "http",
        "netty",
        "contractimpl",
        "sender",
        "channel",
        "pool",
        "PoolConfiguration",
        "org",
        "wso2",
        "transport",
        "http",
        "netty",
        "message",
        "HttpCarbonMessage",
        "org",
        "wso2",
        "transport",
        "http",
        "netty",
        "message",
        "HttpMessageDataStreamer",
        "java",
        "io",
        "BufferedInputStream",
        "java",
        "io",
        "ByteArrayOutputStream",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "nio",
        "charset",
        "Charset",
        "java",
        "nio",
        "charset",
        "StandardCharsets",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "CountDownLatch",
        "java",
        "util",
        "concurrent",
        "Executor",
        "java",
        "util",
        "concurrent",
        "Executors",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "sink",
        "util",
        "HttpSinkUtil",
        "createConnectorFactory",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "sink",
        "util",
        "HttpSinkUtil",
        "createPoolConfigurations",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "sink",
        "util",
        "HttpSinkUtil",
        "createProxyServerConfiguration",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "util",
        "HttpConstants",
        "EMPTY_STRING",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "util",
        "HttpConstants",
        "FALSE",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "util",
        "HttpConstants",
        "PORT_HOST_SEPARATOR",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "util",
        "HttpConstants",
        "SOCKET_IDEAL_TIMEOUT_VALUE",
        "io",
        "siddhi",
        "extension",
        "io",
        "http",
        "util",
        "HttpConstants",
        "TRUE",
        "org",
        "wso2",
        "carbon",
        "analytics",
        "idp",
        "client",
        "external",
        "ExternalIdPClientConstants",
        "REQUEST_URL",
        "Extension",
        "name",
        "description",
        "parameters",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "INT",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "BOOL",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "BOOL",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "INT",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "INT",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "INT",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "STRING",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "BOOL",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "BOOL",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "INT",
        "optional",
        "defaultValue",
        "Parameter",
        "name",
        "description",
        "DataType",
        "BOOL",
        "optional",
        "defaultValue",
        "examples",
        "Example",
        "syntax",
        "description",
        "Example",
        "syntax",
        "description",
        "systemParameter",
        "SystemParameter",
        "name",
        "description",
        "defaultValue",
        "possibleParameters",
        "SystemParameter",
        "name",
        "description",
        "defaultValue",
        "possibleParameters",
        "SystemParameter",
        "name",
        "description",
        "defaultValue",
        "possibleParameters",
        "SystemParameter",
        "name",
        "description",
        "defaultValue",
        "possibleParameters",
        "SystemParameter",
        "name",
        "description",
        "defaultValue",
        "possibleParameters",
        "log",
        "Logger",
        "getLogger",
        "httpHeaderOption",
        "httpMethodOption",
        "streamID",
        "consumerKey",
        "consumerSecret",
        "authorizationHeader",
        "userName",
        "userPassword",
        "publisherURLOption",
        "clientStoreFile",
        "clientStorePass",
        "socketIdleTimeout",
        "sslProtocol",
        "tlsStoreType",
        "chunkDisabled",
        "parametersList",
        "clientBootstrapConfiguration",
        "configReader",
        "siddhiAppContext",
        "oauthUsername",
        "oauthUserPassword",
        "refreshToken",
        "authType",
        "accessTokenCache",
        "AccessTokenCache",
        "getInstance",
        "tokenURL",
        "hostnameVerificationEnabled",
        "sslVerificationDisabled",
        "executor",
        "publisherURL",
        "metrics",
        "startTime",
        "endTime",
        "httpConnectorFactory",
        "proxyServerConfiguration",
        "connectionPoolConfiguration",
        "Override",
        "Override",
        "HttpConstants",
        "HEADERS",
        "HttpConstants",
        "METHOD",
        "HttpConstants",
        "PUBLISHER_URL",
        "HttpConstants",
        "RECEIVER_REFRESH_TOKEN",
        "Override",
        "outputStreamDefinition",
        "optionHolder",
        "configReader",
        "siddhiAppContext",
        "configReader",
        "configReader",
        "siddhiAppContext",
        "siddhiAppContext",
        "streamID",
        "siddhiAppContext",
        "getName",
        "PORT_HOST_SEPARATOR",
        "outputStreamDefinition",
        "toString",
        "publisherURLOption",
        "optionHolder",
        "validateAndGetOption",
        "HttpConstants",
        "PUBLISHER_URL",
        "httpHeaderOption",
        "optionHolder",
        "getOrCreateOption",
        "HttpConstants",
        "HEADERS",
        "HttpConstants",
        "DEFAULT_HEADER",
        "httpMethodOption",
        "optionHolder",
        "getOrCreateOption",
        "HttpConstants",
        "METHOD",
        "HttpConstants",
        "DEFAULT_METHOD",
        "consumerKey",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "CONSUMER_KEY",
        "EMPTY_STRING",
        "consumerSecret",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "CONSUMER_SECRET",
        "EMPTY_STRING",
        "oauthUsername",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "RECEIVER_OAUTH_USERNAME",
        "EMPTY_STRING",
        "oauthUserPassword",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "RECEIVER_OAUTH_PASSWORD",
        "EMPTY_STRING",
        "refreshToken",
        "optionHolder",
        "getOrCreateOption",
        "HttpConstants",
        "RECEIVER_REFRESH_TOKEN",
        "EMPTY_STRING",
        "tokenURL",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "TOKEN_URL",
        "EMPTY_STRING",
        "clientStoreFile",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "CLIENT_TRUSTSTORE_PATH_PARAM",
        "HttpSinkUtil",
        "trustStorePath",
        "configReader",
        "clientStorePass",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "CLIENT_TRUSTSTORE_PASSWORD_PARAM",
        "HttpSinkUtil",
        "trustStorePassword",
        "configReader",
        "socketIdleTimeout",
        "parseInt",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "SOCKET_IDEAL_TIMEOUT",
        "SOCKET_IDEAL_TIMEOUT_VALUE",
        "sslProtocol",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "SSL_PROTOCOL",
        "EMPTY_STRING",
        "tlsStoreType",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "TLS_STORE_TYPE",
        "EMPTY_STRING",
        "chunkDisabled",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "CLIENT_CHUNK_DISABLED",
        "EMPTY_STRING",
        "connectionPoolConfiguration",
        "createPoolConfigurations",
        "optionHolder",
        "parametersList",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "SINK_PARAMETERS",
        "EMPTY_STRING",
        "clientBootstrapConfiguration",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "CLIENT_BOOTSTRAP_CONFIGURATION",
        "EMPTY_STRING",
        "hostnameVerificationEnabled",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "HOSTNAME_VERIFICATION_ENABLED",
        "TRUE",
        "sslVerificationDisabled",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "SSL_VERIFICATION_DISABLED",
        "FALSE",
        "userName",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "RECEIVER_USERNAME",
        "EMPTY_STRING",
        "userPassword",
        "optionHolder",
        "validateAndGetStaticValue",
        "HttpConstants",
        "RECEIVER_PASSWORD",
        "EMPTY_STRING",
        "HttpConstants",
        "EMPTY_STRING",
        "equals",
        "userName",
        "HttpConstants",
        "EMPTY_STRING",
        "equals",
        "userPassword",
        "authType",
        "HttpConstants",
        "BASIC_AUTH",
        "HttpConstants",
        "EMPTY_STRING",
        "equals",
        "consumerKey",
        "HttpConstants",
        "EMPTY_STRING",
        "equals",
        "consumerSecret",
        "HttpConstants",
        "EMPTY_STRING",
        "equals",
        "oauthUsername",
        "HttpConstants",
        "EMPTY_STRING",
        "equals",
        "oauthUserPassword",
        "authType",
        "HttpConstants",
        "OAUTH",
        "authType",
        "HttpConstants",
        "NO_AUTH",
        "EMPTY_STRING",
        "equals",
        "userName",
        "EMPTY_STRING",
        "equals",
        "userPassword",
        "HttpConstants",
        "HTTP_SINK_ID",
        "streamID",
        "siddhiAppContext",
        "getName",
        "EMPTY_STRING",
        "equals",
        "userName",
        "val",
        "userName",
        "HttpConstants",
        "AUTH_USERNAME_PASSWORD_SEPARATOR",
        "userPassword",
        "getBytes",
        "Charset",
        "defaultCharset",
        "authorizationHeader",
        "HttpConstants",
        "AUTHORIZATION_METHOD",
        "Base64",
        "encode",
        "Unpooled",
        "copiedBuffer",
        "val",
        "proxyServerConfiguration",
        "createProxyServerConfiguration",
        "optionHolder",
        "streamID",
        "siddhiAppContext",
        "getName",
        "httpConnectorFactory",
        "createConnectorFactory",
        "configReader",
        "initMetrics",
        "outputStreamDefinition",
        "getId",
        "Override",
        "Override",
        "payload",
        "dynamicOptions",
        "state",
        "startTime",
        "currentTimeMillis",
        "headers",
        "httpHeaderOption",
        "getValue",
        "dynamicOptions",
        "headersList",
        "HttpSinkUtil",
        "getHeaders",
        "headers",
        "clientConnector",
        "clientConnector",
        "createClientConnector",
        "payload",
        "authType",
        "equals",
        "HttpConstants",
        "BASIC_AUTH",
        "authType",
        "equals",
        "HttpConstants",
        "NO_AUTH",
        "sendRequest",
        "payload",
        "dynamicOptions",
        "headersList",
        "clientConnector",
        "sendOauthRequest",
        "payload",
        "dynamicOptions",
        "headersList",
        "clientConnector",
        "payload",
        "dynamicOptions",
        "headersList",
        "clientConnector",
        "httpMethod",
        "EMPTY_STRING",
        "equals",
        "httpMethodOption",
        "getValue",
        "dynamicOptions",
        "HttpConstants",
        "METHOD_DEFAULT",
        "httpMethodOption",
        "getValue",
        "dynamicOptions",
        "contentType",
        "HttpSinkUtil",
        "getContentType",
        "getMapper",
        "getType",
        "headersList",
        "messageBody",
        "getMessageBody",
        "payload",
        "httpReqMethod",
        "httpMethod",
        "cMessage",
        "HttpVersion",
        "HTTP_1_1",
        "httpReqMethod",
        "EMPTY_STRING",
        "cMessage",
        "generateCarbonMessage",
        "headersList",
        "contentType",
        "httpMethod",
        "cMessage",
        "clientConnector",
        "getHttpURLProperties",
        "publisherURL",
        "publisherURLOption",
        "getValue",
        "messageBody",
        "substring",
        "cMessage",
        "setRequestUrl",
        "publisherURL",
        "metrics",
        "metrics",
        "getTotalWritesMetric",
        "inc",
        "metrics",
        "getTotalHttpWritesMetric",
        "publisherURL",
        "inc",
        "metrics",
        "getRequestSizeMetric",
        "publisherURL",
        "inc",
        "HttpSinkUtil",
        "getByteSize",
        "messageBody",
        "cMessage",
        "completeMessage",
        "HttpConstants",
        "OAUTH",
        "equals",
        "authType",
        "latch",
        "listener",
        "latch",
        "authType",
        "responseFuture",
        "clientConnector",
        "send",
        "cMessage",
        "responseFuture",
        "setHttpConnectorListener",
        "listener",
        "latchCount",
        "latch",
        "await",
        "TimeUnit",
        "SECONDS",
        "latchCount",
        "log",
        "debug",
        "clientConnector",
        "getPublisherURL",
        "clientConnector",
        "getPublisherURL",
        "e",
        "log",
        "debug",
        "clientConnector",
        "getPublisherURL",
        "e",
        "clientConnector",
        "getPublisherURL",
        "e",
        "response",
        "listener",
        "getHttpResponseMessage",
        "response",
        "getNettyHttpResponse",
        "status",
        "code",
        "responseFuture",
        "clientConnector",
        "send",
        "cMessage",
        "responseListener",
        "payload",
        "dynamicOptions",
        "clientConnector",
        "getPublisherURL",
        "responseFuture",
        "setHttpConnectorListener",
        "responseListener",
        "HttpConstants",
        "SUCCESS_CODE",
        "bis",
        "result",
        "bos",
        "data",
        "data",
        "bis",
        "read",
        "bos",
        "write",
        "data",
        "result",
        "bos",
        "toString",
        "StandardCharsets",
        "UTF_8",
        "toString",
        "ioe",
        "log",
        "error",
        "result",
        "payload",
        "dynamicOptions",
        "headersList",
        "clientConnector",
        "consumerKeyValue",
        "consumerKey",
        "consumerSecret",
        "encodedAuth",
        "encodeBase64",
        "consumerKeyValue",
        "replaceAll",
        "HttpConstants",
        "NEW_LINE",
        "HttpConstants",
        "EMPTY_STRING",
        "setAccessToken",
        "encodedAuth",
        "dynamicOptions",
        "headersList",
        "clientConnector",
        "getPublisherURL",
        "response",
        "sendRequest",
        "payload",
        "dynamicOptions",
        "headersList",
        "clientConnector",
        "response",
        "HttpConstants",
        "AUTHENTICATION_FAIL_CODE",
        "handleOAuthFailure",
        "payload",
        "dynamicOptions",
        "headersList",
        "encodedAuth",
        "clientConnector",
        "HttpConstants",
        "SUCCESS_CODE",
        "response",
        "response",
        "HttpConstants",
        "MULTIPLE_CHOICES",
        "log",
        "info",
        "clientConnector",
        "getPublisherURL",
        "response",
        "HttpConstants",
        "INTERNAL_SERVER_FAIL_CODE",
        "log",
        "error",
        "clientConnector",
        "getPublisherURL",
        "response",
        "clientConnector",
        "getPublisherURL",
        "response",
        "log",
        "error",
        "clientConnector",
        "getPublisherURL",
        "response",
        "clientConnector",
        "getPublisherURL",
        "response",
        "payload",
        "dynamicOptions",
        "headersList",
        "encodedAuth",
        "clientConnector",
        "checkFromCache",
        "accessTokenCache",
        "checkAvailableKey",
        "encodedAuth",
        "checkFromCache",
        "getNewAccessTokenWithCache",
        "payload",
        "dynamicOptions",
        "headersList",
        "encodedAuth",
        "clientConnector",
        "requestForNewAccessToken",
        "payload",
        "dynamicOptions",
        "headersList",
        "encodedAuth",
        "clientConnector",
        "payload",
        "dynamicOptions",
        "headersList",
        "encodedAuth",
        "clientConnector",
        "accessToken",
        "accessTokenCache",
        "getAccessToken",
        "encodedAuth",
        "header",
        "headersList",
        "header",
        "getName",
        "equals",
        "HttpConstants",
        "AUTHORIZATION_HEADER",
        "header",
        "setValue",
        "accessToken",
        "response",
        "sendRequest",
        "payload",
        "dynamicOptions",
        "headersList",
        "clientConnector",
        "response",
        "HttpConstants",
        "SUCCESS_CODE",
        "log",
        "info",
        "clientConnector",
        "getPublisherURL",
        "response",
        "HttpConstants",
        "AUTHENTICATION_FAIL_CODE",
        "requestForNewAccessToken",
        "payload",
        "dynamicOptions",
        "headersList",
        "encodedAuth",
        "clientConnector",
        "response",
        "HttpConstants",
        "INTERNAL_SERVER_FAIL_CODE",
        "log",
        "error",
        "clientConnector",
        "getPublisherURL",
        "response",
        "clientConnector",
        "getPublisherURL",
        "response",
        "log",
        "error",
        "clientConnector",
        "getPublisherURL",
        "response",
        "clientConnector",
        "getPublisherURL",
        "response",
        "payload",
        "dynamicOptions",
        "headersList",
        "encodedAuth",
        "clientConnector",
        "checkRefreshToken",
        "accessTokenCache",
        "checkRefreshAvailableKey",
        "encodedAuth",
        "checkRefreshToken",
        "header",
        "headersList",
        "header",
        "getName",
        "equals",
        "HttpConstants",
        "RECEIVER_REFRESH_TOKEN",
        "accessTokenCache",
        "getRefreshtoken",
        "encodedAuth",
        "header",
        "setValue",
        "accessTokenCache",
        "getRefreshtoken",
        "encodedAuth",
        "getAccessToken",
        "dynamicOptions",
        "encodedAuth",
        "tokenURL",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "HttpConstants",
        "SUCCESS_CODE",
        "newAccessToken",
        "accessTokenCache",
        "getAccessToken",
        "encodedAuth",
        "accessTokenCache",
        "setAccessToken",
        "encodedAuth",
        "newAccessToken",
        "accessTokenCache",
        "getRefreshtoken",
        "encodedAuth",
        "accessTokenCache",
        "setRefreshtoken",
        "encodedAuth",
        "accessTokenCache",
        "getRefreshtoken",
        "encodedAuth",
        "header",
        "headersList",
        "header",
        "getName",
        "equals",
        "HttpConstants",
        "AUTHORIZATION_HEADER",
        "header",
        "setValue",
        "newAccessToken",
        "response",
        "sendRequest",
        "payload",
        "dynamicOptions",
        "headersList",
        "clientConnector",
        "response",
        "HttpConstants",
        "SUCCESS_CODE",
        "log",
        "info",
        "clientConnector",
        "getPublisherURL",
        "response",
        "HttpConstants",
        "AUTHENTICATION_FAIL_CODE",
        "log",
        "error",
        "clientConnector",
        "getPublisherURL",
        "response",
        "clientConnector",
        "getPublisherURL",
        "response",
        "response",
        "HttpConstants",
        "INTERNAL_SERVER_FAIL_CODE",
        "log",
        "error",
        "clientConnector",
        "getPublisherURL",
        "response",
        "clientConnector",
        "getPublisherURL",
        "response",
        "log",
        "error",
        "clientConnector",
        "getPublisherURL",
        "response",
        "clientConnector",
        "getPublisherURL",
        "response",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "HttpConstants",
        "AUTHENTICATION_FAIL_CODE",
        "log",
        "error",
        "clientConnector",
        "getPublisherURL",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "clientConnector",
        "getPublisherURL",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "log",
        "error",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "dynamicOptions",
        "encodedAuth",
        "tokenURL",
        "tokenURL",
        "tokenURL",
        "httpsClient",
        "HttpConstants",
        "EMPTY_STRING",
        "equals",
        "oauthUsername",
        "HttpConstants",
        "EMPTY_STRING",
        "equals",
        "oauthUserPassword",
        "httpsClient",
        "getPasswordGrantAccessToken",
        "tokenURL",
        "clientStoreFile",
        "clientStorePass",
        "oauthUsername",
        "oauthUserPassword",
        "encodedAuth",
        "HttpConstants",
        "EMPTY_STRING",
        "equals",
        "refreshToken",
        "getValue",
        "dynamicOptions",
        "accessTokenCache",
        "getRefreshtoken",
        "encodedAuth",
        "httpsClient",
        "getRefreshGrantAccessToken",
        "tokenURL",
        "clientStoreFile",
        "clientStorePass",
        "encodedAuth",
        "refreshToken",
        "getValue",
        "dynamicOptions",
        "httpsClient",
        "getClientGrantAccessToken",
        "tokenURL",
        "clientStoreFile",
        "clientStorePass",
        "encodedAuth",
        "encodedAuth",
        "dynamicOptions",
        "headersList",
        "publisherURL",
        "accessToken",
        "authAvailability",
        "header",
        "headersList",
        "header",
        "getName",
        "equals",
        "HttpConstants",
        "AUTHORIZATION_HEADER",
        "authAvailability",
        "authAvailability",
        "getAccessToken",
        "dynamicOptions",
        "encodedAuth",
        "tokenURL",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "HttpConstants",
        "SUCCESS_CODE",
        "headersList",
        "add",
        "HttpConstants",
        "AUTHORIZATION_HEADER",
        "accessTokenCache",
        "getAccessToken",
        "encodedAuth",
        "accessTokenCache",
        "getRefreshtoken",
        "encodedAuth",
        "headersList",
        "add",
        "HttpConstants",
        "RECEIVER_REFRESH_TOKEN",
        "accessTokenCache",
        "getRefreshtoken",
        "encodedAuth",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "HttpConstants",
        "AUTHENTICATION_FAIL_CODE",
        "log",
        "error",
        "publisherURL",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "publisherURL",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "HttpConstants",
        "INTERNAL_SERVER_FAIL_CODE",
        "log",
        "error",
        "publisherURL",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "publisherURL",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "log",
        "error",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "accessTokenCache",
        "getResponseCode",
        "encodedAuth",
        "accessTokenCache",
        "checkAvailableKey",
        "encodedAuth",
        "accessToken",
        "accessTokenCache",
        "getAccessToken",
        "encodedAuth",
        "header",
        "headersList",
        "header",
        "getName",
        "equals",
        "HttpConstants",
        "AUTHORIZATION_HEADER",
        "header",
        "setValue",
        "accessToken",
        "Override",
        "Override",
        "httpConnectorFactory",
        "httpConnectorFactory",
        "shutdownNow",
        "httpConnectorFactory",
        "Override",
        "streamName",
        "MetricsDataHolder",
        "getInstance",
        "getMetricService",
        "MetricsDataHolder",
        "getInstance",
        "getMetricManagementService",
        "isEnabled",
        "MetricsDataHolder",
        "getInstance",
        "getMetricManagementService",
        "isReporterRunning",
        "HttpConstants",
        "PROMETHEUS_REPORTER_NAME",
        "metrics",
        "siddhiAppContext",
        "getName",
        "streamName",
        "e",
        "log",
        "debug",
        "siddhiAppContext",
        "getName",
        "headers",
        "contentType",
        "httpMethod",
        "cMessage",
        "httpURLProperties",
        "cMessage",
        "setProperty",
        "Constants",
        "PROTOCOL",
        "httpURLProperties",
        "get",
        "Constants",
        "PROTOCOL",
        "cMessage",
        "setProperty",
        "Constants",
        "TO",
        "httpURLProperties",
        "get",
        "Constants",
        "TO",
        "cMessage",
        "setProperty",
        "Constants",
        "HTTP_HOST",
        "httpURLProperties",
        "get",
        "Constants",
        "HTTP_HOST",
        "cMessage",
        "setProperty",
        "Constants",
        "HTTP_PORT",
        "valueOf",
        "httpURLProperties",
        "get",
        "Constants",
        "HTTP_PORT",
        "cMessage",
        "setHttpMethod",
        "httpMethod",
        "cMessage",
        "setRequestUrl",
        "httpURLProperties",
        "get",
        "REQUEST_URL",
        "httpHeaders",
        "cMessage",
        "getHeaders",
        "userName",
        "equals",
        "EMPTY_STRING",
        "userPassword",
        "equals",
        "EMPTY_STRING",
        "httpHeaders",
        "HttpConstants",
        "AUTHORIZATION_HEADER",
        "authorizationHeader",
        "userName",
        "equals",
        "EMPTY_STRING",
        "userPassword",
        "equals",
        "EMPTY_STRING",
        "log",
        "error",
        "httpHeaders",
        "Constants",
        "HTTP_HOST",
        "cMessage",
        "getProperty",
        "Constants",
        "HTTP_HOST",
        "headers",
        "header",
        "headers",
        "httpHeaders",
        "header",
        "getName",
        "header",
        "getValue",
        "contentType",
        "contains",
        "getMapper",
        "getType",
        "httpHeaders",
        "HttpConstants",
        "HTTP_CONTENT_TYPE",
        "contentType",
        "cMessage",
        "setHttpMethod",
        "httpMethod",
        "cMessage",
        "payload",
        "HttpConstants",
        "MAP_KEYVALUE",
        "equals",
        "getMapper",
        "getType",
        "payload",
        "entrySet",
        "stream",
        "p",
        "encodeMessage",
        "p",
        "getKey",
        "encodeMessage",
        "p",
        "getValue",
        "reduce",
        "p1",
        "p2",
        "p1",
        "p2",
        "payload",
        "payload",
        "messageBody",
        "getMessageBody",
        "payload",
        "publisherURL",
        "publisherURLOption",
        "getValue",
        "messageBody",
        "substring",
        "authType",
        "equals",
        "HttpConstants",
        "OAUTH",
        "EMPTY_STRING",
        "equals",
        "consumerSecret",
        "EMPTY_STRING",
        "equals",
        "consumerKey",
        "HttpConstants",
        "CONSUMER_KEY",
        "HttpConstants",
        "CONSUMER_SECRET",
        "HttpConstants",
        "HTTP_SINK_ID",
        "streamID",
        "EMPTY_STRING",
        "equals",
        "tokenURL",
        "HttpConstants",
        "TOKEN_URL",
        "HttpConstants",
        "HTTP_SINK_ID",
        "streamID",
        "scheme",
        "HttpSinkUtil",
        "getScheme",
        "publisherURL",
        "httpURLProperties",
        "HttpSinkUtil",
        "getURLProperties",
        "publisherURL",
        "senderConfig",
        "HttpSinkUtil",
        "getSenderConfigurations",
        "httpURLProperties",
        "clientStoreFile",
        "clientStorePass",
        "configReader",
        "EMPTY_STRING",
        "equals",
        "publisherURL",
        "HttpConstants",
        "HTTP_SINK_ID",
        "streamID",
        "HttpConstants",
        "SCHEME_HTTPS",
        "equals",
        "scheme",
        "clientStoreFile",
        "clientStorePass",
        "streamID",
        "proxyServerConfiguration",
        "senderConfig",
        "setProxyServerConfiguration",
        "proxyServerConfiguration",
        "senderConfig",
        "setPoolConfiguration",
        "connectionPoolConfiguration",
        "socketIdleTimeout",
        "senderConfig",
        "setSocketIdleTimeout",
        "socketIdleTimeout",
        "EMPTY_STRING",
        "equals",
        "sslProtocol",
        "senderConfig",
        "setSSLProtocol",
        "sslProtocol",
        "EMPTY_STRING",
        "equals",
        "tlsStoreType",
        "senderConfig",
        "setTLSStoreType",
        "tlsStoreType",
        "EMPTY_STRING",
        "equals",
        "chunkDisabled",
        "chunkDisabled",
        "parseBoolean",
        "chunkDisabled",
        "senderConfig",
        "setChunkingConfig",
        "ChunkConfig",
        "NEVER",
        "senderConfig",
        "setChunkingConfig",
        "ChunkConfig",
        "ALWAYS",
        "EMPTY_STRING",
        "equals",
        "parametersList",
        "senderConfig",
        "setParameters",
        "HttpIoUtil",
        "populateParameters",
        "parametersList",
        "TRUE",
        "equalsIgnoreCase",
        "hostnameVerificationEnabled",
        "senderConfig",
        "setHostNameVerificationEnabled",
        "TRUE",
        "equalsIgnoreCase",
        "sslVerificationDisabled",
        "senderConfig",
        "disableSsl",
        "executor",
        "Executors",
        "newFixedThreadPool",
        "senderConfig",
        "getPoolConfiguration",
        "getExecutorServiceThreads",
        "bootStrapProperties",
        "HttpSinkUtil",
        "populateTransportConfiguration",
        "clientBootstrapConfiguration",
        "publisherURL",
        "httpURLProperties",
        "httpConnectorFactory",
        "createHttpClientConnector",
        "bootStrapProperties",
        "senderConfig",
        "s",
        "s",
        "toString",
        "consumerKeyValue",
        "byteBuf",
        "Unpooled",
        "wrappedBuffer",
        "consumerKeyValue",
        "getBytes",
        "StandardCharsets",
        "UTF_8",
        "encodedByteBuf",
        "Base64",
        "encode",
        "byteBuf",
        "encodedByteBuf",
        "toString",
        "StandardCharsets",
        "UTF_8",
        "payload",
        "dynamicOptions",
        "httpSink",
        "publisherURL",
        "payload",
        "dynamicOptions",
        "httpSink",
        "publisherURL",
        "payload",
        "payload",
        "dynamicOptions",
        "dynamicOptions",
        "httpSink",
        "httpSink",
        "publisherURL",
        "publisherURL",
        "Override",
        "httpCarbonMessage",
        "endTime",
        "currentTimeMillis",
        "metrics",
        "metrics",
        "setEndpointStatusMetric",
        "publisherURL",
        "EndpointStatus",
        "ONLINE",
        "metrics",
        "setLatencyMetric",
        "publisherURL",
        "endTime",
        "startTime",
        "metrics",
        "setLastEventTime",
        "publisherURL",
        "endTime",
        "httpCarbonMessage",
        "getHttpStatusCode",
        "metrics",
        "getTotalHttpErrorsMetric",
        "publisherURL",
        "inc",
        "executor",
        "executor",
        "execute",
        "Override",
        "getStringFromInputStream",
        "httpCarbonMessage",
        "getInputStream",
        "Override",
        "throwable",
        "metrics",
        "metrics",
        "getTotalHttpErrorsMetric",
        "publisherURL",
        "inc",
        "metrics",
        "setEndpointStatusMetric",
        "publisherURL",
        "EndpointStatus",
        "OFFLINE",
        "httpSink",
        "onError",
        "payload",
        "dynamicOptions",
        "httpSink",
        "streamID",
        "httpSink",
        "siddhiAppContext",
        "getName",
        "publisherURL",
        "throwable",
        "getMessage",
        "throwable"
    ],
    "literals": [
        "\"http-fix\"",
        "\"sink\"",
        "\"\"",
        "\"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, \"",
        "\"and DELETE on formats `text`, `XML` and `JSON`. It can also publish \"",
        "\"to endpoints protected by basic authentication or OAuth 2.0.\"",
        "\"publisher.url\"",
        "\"The URL to which the outgoing events should be published.\\n\"",
        "\"Examples:\\n\"",
        "\"`http://localhost:8080/endpoint`,\\n\"",
        "\"`https://localhost:8080/endpoint`\"",
        "\"basic.auth.username\"",
        "\"The username to be included in the authentication header when calling \"",
        "\"endpoints protected by basic authentication. `basic.auth.password` property \"",
        "\"should be also set when using this property.\"",
        "\"-\"",
        "\"basic.auth.password\"",
        "\"The password to be included in the authentication header when calling \"",
        "\"endpoints protected by basic authentication. `basic.auth.username` property \"",
        "\"should be also set when using this property.\"",
        "\"-\"",
        "\"https.truststore.file\"",
        "\"The file path of the client truststore when sending messages through `https`\"",
        "\" protocol.\"",
        "\"`${carbon.home}/resources/security/client-truststore.jks`\"",
        "\"https.truststore.password\"",
        "\"The password for the client-truststore.\"",
        "\"wso2carbon\"",
        "\"oauth.username\"",
        "\"The username to be included in the authentication header when calling \"",
        "\"endpoints protected by OAuth 2.0. `oauth.password` property \"",
        "\"should be also set when using this property.\"",
        "\"-\"",
        "\"oauth.password\"",
        "\"The password to be included in the authentication header when calling \"",
        "\"endpoints protected by OAuth 2.0. `oauth.username` property \"",
        "\"should be also set when using this property.\"",
        "\"-\"",
        "\"consumer.key\"",
        "\"Consumer key used for calling endpoints protected by OAuth 2.0\"",
        "\"-\"",
        "\"consumer.secret\"",
        "\"Consumer secret used for calling endpoints protected by OAuth 2.0\"",
        "\"-\"",
        "\"token.url\"",
        "\"Token URL to generate a new access tokens \"",
        "\"when calling endpoints protected by OAuth 2.0\"",
        "\"-\"",
        "\"refresh.token\"",
        "\"Refresh token used for generating new access tokens \"",
        "\"when calling endpoints protected by OAuth 2.0\"",
        "\"-\"",
        "\"headers\"",
        "\"HTTP request headers in format `\\\"'<key>:<value>','<key>:<value>'\\\"`.\\n\"",
        "\"When `Content-Type` header is not provided the system derives the \"",
        "\"Content-Type based on the provided sink mapper as following: \\n\"",
        "\" - `@map(type='xml')`: `application/xml`\\n\"",
        "\" - `@map(type='json')`: `application/json`\\n\"",
        "\" - `@map(type='text')`: `plain/text`\\n\"",
        "\" - `@map(type='keyvalue')`: `application/x-www-form-urlencoded`\\n\"",
        "\" - For all other cases system defaults to `plain/text`\\n\"",
        "\"Also the `Content-Length` header need not to be provided, as the system \"",
        "\"automatically defines it by calculating the size of the payload.\"",
        "\"Content-Type and Content-Length headers\"",
        "\"method\"",
        "\"The HTTP method used for calling the endpoint.\"",
        "\"POST\"",
        "\"socket.idle.timeout\"",
        "\"Socket timeout in millis.\"",
        "\"6000\"",
        "\"chunk.disabled\"",
        "\"Disable chunked transfer encoding.\"",
        "\"false\"",
        "\"ssl.protocol\"",
        "\"SSL/TLS protocol.\"",
        "\"TLS\"",
        "\"ssl.verification.disabled\"",
        "\"Disable SSL verification.\"",
        "\"false\"",
        "\"tls.store.type\"",
        "\"TLS store type.\"",
        "\"JKS\"",
        "\"ssl.configurations\"",
        "\"SSL/TSL configurations in format `\\\"'<key>:<value>','<key>:<value>'\\\"`.\\n\"",
        "\"Some supported parameters:\\n\"",
        "\" - SSL/TLS protocols: `'sslEnabledProtocols:TLSv1.1,TLSv1.2'`\\n\"",
        "\" - List of ciphers: `'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'`\\n\"",
        "\" - Enable session creation: `'client.enable.session.creation:true'`\\n\"",
        "\" - Supported server names: `'server.suported.server.names:server'`\\n\"",
        "\" - Add HTTP SNIMatcher: `'server.supported.snimatchers:SNIMatcher'`\"",
        "\"-\"",
        "\"proxy.host\"",
        "\"Proxy server host\"",
        "\"-\"",
        "\"proxy.port\"",
        "\"Proxy server port\"",
        "\"-\"",
        "\"proxy.username\"",
        "\"Proxy server username\"",
        "\"-\"",
        "\"proxy.password\"",
        "\"Proxy server password\"",
        "\"-\"",
        "\"client.bootstrap.configurations\"",
        "\"Client bootstrap configurations in format \"",
        "\"`\\\"'<key>:<value>','<key>:<value>'\\\"`.\\n\"",
        "\"Some supported configurations :\\n\"",
        "\" - Client connect timeout in millis: `'client.bootstrap.connect.timeout:15000'`\\n\"",
        "\" - Client socket timeout in seconds: `'client.bootstrap.socket.timeout:15'`\\n\"",
        "\" - Client socket reuse: `'client.bootstrap.socket.reuse:true'`\\n\"",
        "\" - Enable TCP no delay: `'client.bootstrap.nodelay:true'`\\n\"",
        "\" - Enable client keep alive: `'client.bootstrap.keepalive:true'`\\n\"",
        "\" - Send buffer size: `'client.bootstrap.sendbuffersize:1048576'`\\n\"",
        "\" - Receive buffer size: `'client.bootstrap.recievebuffersize:1048576'`\"",
        "\"-\"",
        "\"max.pool.active.connections\"",
        "\"Maximum possible number of active connection per client pool.\"",
        "\"-1\"",
        "\"min.pool.idle.connections\"",
        "\"Minimum number of idle connections that can exist per client pool.\"",
        "\"0\"",
        "\"max.pool.idle.connections\"",
        "\"Maximum number of idle connections that can exist per client pool.\"",
        "\"100\"",
        "\"min.evictable.idle.time\"",
        "\"Minimum time (in millis) a connection may sit idle in the \"",
        "\"client pool before it become eligible for eviction.\"",
        "\"300000\"",
        "\"time.between.eviction.runs\"",
        "\"Time between two eviction operations (in millis) on the client pool.\"",
        "\"30000\"",
        "\"max.wait.time\"",
        "\"The maximum time (in millis) the pool will wait (when there are no \"",
        "\"available connections) for a connection to be returned to the pool.\"",
        "\"60000\"",
        "\"test.on.borrow\"",
        "\"Enable connections to be validated \"",
        "\"before being borrowed from the client pool.\"",
        "\"true\"",
        "\"test.while.idle\"",
        "\"Enable connections to be validated during the eviction operation (if any).\"",
        "\"true\"",
        "\"exhausted.action\"",
        "\"Action that should be taken when the maximum number of active connections \"",
        "\"are being used. This action should be indicated as an int and possible \"",
        "\"action values are following.\\n\"",
        "\"0 - Fail the request.\\n\"",
        "\"1 - Block the request, until a connection returns to the \"",
        "\"pool.\\n\"",
        "\"2 - Grow the connection pool size.\"",
        "\"1 (Block when exhausted)\"",
        "\"hostname.verification.enabled\"",
        "\"Enable hostname verification.\"",
        "\"true\"",
        "\"\"",
        "\"@sink(type = 'http', publisher.url = 'http://stocks.com/stocks',\\n\"",
        "\"      @map(type = 'json'))\\n\"",
        "\"define stream StockStream (symbol string, price float, volume long);\"",
        "\"\"",
        "\"Events arriving on the StockStream will be published to the HTTP endpoint \"",
        "\"`http://stocks.com/stocks` using `POST` method with Content-Type `application/json` \"",
        "\"by converting those events to the default JSON format as following:\\n\"",
        "\"```{\\n\"",
        "\"  \\\"event\\\": {\\n\"",
        "\"    \\\"symbol\\\": \\\"FB\\\",\\n\"",
        "\"    \\\"price\\\": 24.5,\\n\"",
        "\"    \\\"volume\\\": 5000\\n\"",
        "\"  }\\n\"",
        "\"}```\"",
        "\"\"",
        "\"@sink(type='http', publisher.url = 'http://localhost:8009/foo',\\n\"",
        "\"      client.bootstrap.configurations = \\\"'client.bootstrap.socket.timeout:20'\\\",\\n\"",
        "\"      max.pool.active.connections = '1', headers = \\\"{{headers}}\\\",\\n\"",
        "\"      @map(type='xml', @payload(\\\"\\\"\\\"<stock>\\n{{payloadBody}}\\n</stock>\\\"\\\"\\\")))\\n\"",
        "\"define stream FooStream (payloadBody String, headers string);\"",
        "\"\"",
        "\"Events arriving on FooStream will be published to the HTTP endpoint \"",
        "\"`http://localhost:8009/foo` using `POST` method with Content-Type `application/xml` \"",
        "\"and setting `payloadBody` and `header` attribute values.\\n\"",
        "\"If the `payloadBody` contains\\n\"",
        "\"```<symbol>WSO2</symbol>\\n\"",
        "\"<price>55.6</price>\\n\"",
        "\"<volume>100</volume>```\"",
        "\"and `header` contains `'topic:foobar'` values, then the system will generate \"",
        "\"an output with the body:\\n\"",
        "\"```<stock>\\n\"",
        "\"<symbol>WSO2</symbol>\\n\"",
        "\"<price>55.6</price>\\n\"",
        "\"<volume>100</volume>\\n\"",
        "\"</stock>```\"",
        "\"and HTTP headers:\\n\"",
        "\"`Content-Length:xxx`,\\n\"",
        "\"`Content-Location:'xxx'`,\\n\"",
        "\"`Content-Type:'application/xml'`,\\n\"",
        "\"`HTTP_METHOD:'POST'`\"",
        "\"clientBootstrapClientGroupSize\"",
        "\"Number of client threads to perform non-blocking read and write to \"",
        "\"one or more channels.\"",
        "\"(Number of available processors) * 2\"",
        "\"Any positive integer\"",
        "\"clientBootstrapBossGroupSize\"",
        "\"Number of boss threads to accept incoming connections.\"",
        "\"Number of available processors\"",
        "\"Any positive integer\"",
        "\"clientBootstrapWorkerGroupSize\"",
        "\"Number of worker threads to accept the connections from boss threads and \"",
        "\"perform non-blocking read and write from one or more channels.\"",
        "\"(Number of available processors) * 2\"",
        "\"Any positive integer\"",
        "\"trustStoreLocation\"",
        "\"The default truststore file path.\"",
        "\"`${carbon.home}/resources/security/client-truststore.jks`\"",
        "\"Path to client truststore `.jks` file\"",
        "\"trustStorePassword\"",
        "\"The default truststore password.\"",
        "\"wso2carbon\"",
        "\"Truststore password as string\"",
        "\"Please provide user name and password in \"",
        "\" with the stream \"",
        "\" in Siddhi app \"",
        "\"Time out due to getting getting response from \"",
        "\". Message dropped.\"",
        "\"Time out due to getting getting response from \"",
        "\". Message dropped.\"",
        "\"Failed to get a response from \"",
        "\",\"",
        "\". Message dropped.\"",
        "\"Failed to get a response from \"",
        "\", \"",
        "\". Message dropped.\"",
        "\"Couldn't read the complete input stream\"",
        "\"\"",
        "\":\"",
        "\"Basic \"",
        "\"Request sent successfully to \"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', with response code: \"",
        "\"- Internal server error. Message dropped\"",
        "\"Error at sending oauth request to API endpoint, \"",
        "\"', with response code: \"",
        "\"- Internal server error. Message dropped.\"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', with response code: \"",
        "\". Message dropped.\"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', and response code: \"",
        "\". Message dropped.\"",
        "\"Request sent successfully to \"",
        "\"Error at sending oauth request to API endpoint, \"",
        "\"', with response code: \"",
        "\"- Internal server error. Message dropped\"",
        "\"Error at sending oauth request to API endpoint, \"",
        "\"', with response code: \"",
        "\"- Internal server error. Message dropped\"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', with response code: \"",
        "\". Message dropped.\"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', with response code: \"",
        "\". Message dropped.\"",
        "\"Request sent successfully to \"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', with response code: \"",
        "\"- Authentication Failure. Please provide a valid Consumer key, Consumer secret\"",
        "\" and token endpoint URL . Message dropped\"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', with response code: \"",
        "\"- Authentication Failure.\"",
        "\" Please provide a valid Consumer key, Consumer secret and token endpoint URL.\"",
        "\" Message dropped\"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', with response code: \"",
        "\"- Internal server error. Message dropped\"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', with response code: \"",
        "\"- Internal server error. Message dropped\"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', with response code: \"",
        "\". Message dropped.\"",
        "\"Error at sending oauth request to API endpoint \"",
        "\"', with response code: \"",
        "\". Message dropped.\"",
        "\"Failed to generate new access token for the expired access token to \"",
        "\"', \"",
        "\": Authentication Failure.cPlease provide a \"",
        "\"valid Consumer key, Consumer secret and token endpoint URL . Message dropped\"",
        "\"Failed to generate new access token for the expired access \"",
        "\"token to \"",
        "\"', \"",
        "\": Authentication Failure.Please provide a valid Consumer key, Consumer secret\"",
        "\" and token endpoint URL . Message dropped\"",
        "\"Failed to generate new access token for the expired access token. Error code: \"",
        "\". Message dropped.\"",
        "\"Failed to generate new access token for the expired\"",
        "\" access token. Error code: \"",
        "\". Message dropped.\"",
        "\"Failed to generate new access token for the expired access token to \"",
        "\"', with response code: \"",
        "\"- Authentication Failure.Please provide a valid Consumer key, Consumer secret\"",
        "\" and token endpoint URL . Message dropped\"",
        "\"Failed to generate new access token for the expired\"",
        "\" access token to \"",
        "\"', with response code: \"",
        "\"- Authentication Failure.\"",
        "\"Please provide a valid Consumer key, Consumer secret and token endpoint URL .\"",
        "\" Message dropped\"",
        "\"Failed to generate new access token for the expired access token to \"",
        "\"', with response code: \"",
        "\"- Internal server error. Message dropped\"",
        "\"Failed to generate new access token for the expired\"",
        "\" access token to \"",
        "\"', with response code: \"",
        "\"- Internal server error. Message dropped\"",
        "\"Failed to generate new access token for the expired access token. Error code: \"",
        "\". Message dropped.\"",
        "\"Failed to generate new access token for the expired\"",
        "\" access token. Error code: \"",
        "\". Message dropped.\"",
        "\"Prometheus reporter is not running. Hence http sink metrics will not be initialized for \"",
        "\"One of the basic authentication username or password missing. Hence basic authentication not \"",
        "\"supported.\"",
        "\"=\"",
        "\"\"",
        "\"&\"",
        "\" and \"",
        "\" found empty but it is Mandatory field in \"",
        "\" in \"",
        "\" found empty but it is Mandatory \"",
        "\"field in \"",
        "\" in \"",
        "\"Receiver URL found empty but it is Mandatory field in \"",
        "\"\"",
        "\" in \"",
        "\"Client trustStore file path or password are empty while \"",
        "\"default scheme is 'https'. Please provide client \"",
        "\"trustStore file path and password in \"",
        "\"HTTP sink on stream \"",
        "\" of Siddhi App '\"",
        "\"' failed to publish events to endpoint '\"",
        "\"'. \""
    ],
    "variables": [
        "httpHeaderOption",
        "httpMethodOption",
        "streamID",
        "consumerKey",
        "consumerSecret",
        "authorizationHeader",
        "userName",
        "userPassword",
        "publisherURLOption",
        "clientStoreFile",
        "clientStorePass",
        "socketIdleTimeout",
        "sslProtocol",
        "tlsStoreType",
        "chunkDisabled",
        "parametersList",
        "clientBootstrapConfiguration",
        "configReader",
        "siddhiAppContext",
        "oauthUsername",
        "oauthUserPassword",
        "refreshToken",
        "authType",
        "tokenURL",
        "hostnameVerificationEnabled",
        "sslVerificationDisabled",
        "publisherURL",
        "metrics",
        "startTime",
        "endTime",
        "httpConnectorFactory",
        "proxyServerConfiguration",
        "connectionPoolConfiguration",
        "clientConnector",
        "result",
        "data",
        "accessToken",
        "payload",
        "dynamicOptions",
        "httpSink",
        "publisherURL"
    ],
    "comments": [
        "String mapType;",
        "protected ClientConnector staticClientConnector;",
        "read configurations",
        "pool configurations",
        "if username and password both not equal to null consider as basic auth enabled if only one is null take it",
        "as exception",
        "if (publisherURLOption.isStatic()) {",
        "staticClientConnector = createClientConnector(null);",
        "}",
        "get the dynamic parameter",
        "if (staticClientConnector != null) {",
        "clientConnector = staticClientConnector;",
        "} else {",
        "}",
        "if (mapType == null) {",
        "mapType = getMapper().getType();",
        "}",
        "TODO - Add param for this logic",
        "if (!Constants.HTTP_GET_METHOD.equals(httpMethod)) {",
        "cMessage.addHttpContent(new DefaultLastHttpContent(Unpooled.wrappedBuffer(messageBody",
        ".getBytes(Charset.defaultCharset()))));",
        "}",
        "generate encoded base64 auth for getting refresh token",
        "check the availability of access token in the header",
        "send a request to API and get the response",
        "if authentication fails then get the new access token",
        "send a request to API with a new access token",
        "send a request to API with a new access token",
        "check the availability of the authorization",
        "generate encoded base64 auth for getting refresh token",
        "check the cache and update new access token into header",
        "if (staticClientConnector != null) {",
        "String publisherURL = staticClientConnector.getPublisherURL();",
        "staticClientConnector = null;",
        "log.debug(\"Server connector for url \" + publisherURL + \" disconnected.\");",
        "}",
        "Set protocol type http or https",
        "Set uri",
        "set Host",
        "set port",
        "Set method",
        "Set request URL",
        "if Authentication enabled",
        "Set request headers.",
        "Set user given Headers",
        "Set content type if content type is not included in headers",
        "set method-type header",
        "Generate basic sender configurations",
        "add advanced sender configurations",
        "overwrite default transport configuration",
        "Catch unsuccessful requests"
    ],
    "docstrings": [
        "* Copyright (c) 2021 Cable Television Laboratories, Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* TODO - Fix the http extension\n * TODO - This mapper is not being found by wso2si-tooling\n * {@code HttpSink } Handle the HTTP publishing tasks.",
        "* Returns the list of classes which this sink can consume.\n     * Based on the type of the sink, it may be limited to being able to publish specific type of classes.\n     * For example, a sink of type file can only write objects of type String .\n     *\n     * @return array of supported classes , if extension can support of any types of classes\n     * then return empty array .",
        "* Returns a list of supported dynamic options (that means for each event value of the option can change) by\n     * the transport.\n     *\n     * @return the list of supported dynamic option keys",
        "* The initialization method for {@link Sink}, which will be called before other methods and validate\n     * the all configuration and getting the intial values.\n     *\n     * @param outputStreamDefinition containing stream definition bind to the {@link Sink}\n     * @param optionHolder           Option holder containing static and dynamic configuration related\n     *                               to the {@link Sink}\n     * @param configReader           to read the sink related system configuration.\n     * @param siddhiAppContext       the context of the {@link io.siddhi.query.api.SiddhiApp} used to\n     *                               get siddhi related utilty functions.",
        "* Sending events via output transport.\n     *\n     * @param payload        payload of the event\n     * @param dynamicOptions one of the event constructing the payload\n     * @param state          current state of the sink\n     * @throws ConnectionUnavailableException throw when connections are unavailable.",
        "* This method will be called before the processing method.\n     * Intention to establish connection to publish event.\n     * such that the  system will take care retrying for connection",
        "* Called after all publishing is done, the steps needed to disconnect from the sink.",
        "* The method can be called when removing an event receiver.\n     * The cleanups that has to be done when removing the receiver has to be done here.",
        "* Initialize metrics.",
        "* The method is responsible of generating carbon message to send.\n     *\n     * @param headers           the headers set.\n     * @param contentType       the content type. Value is if user has to given it as a header or if not it is map type.\n     * @param httpMethod        http method type.\n     * @param cMessage          carbon message to be send to the endpoint.\n     * @param httpURLProperties http props\n     * @return generated carbon message.",
        "Read content from the input stream of the HTTP Carbon message\n                            and make sure that the Carbon message is cleaned up,\n                            for preventing leaks."
    ],
    "functions": [
        "getSupportedInputEventClasses",
        "getSupportedDynamicOptions",
        "StateFactory",
        "init",
        "ServiceDeploymentInfo",
        "exposeServiceDeploymentInfo",
        "publish",
        "sendRequest",
        "getStringFromInputStream",
        "sendOauthRequest",
        "handleOAuthFailure",
        "getNewAccessTokenWithCache",
        "requestForNewAccessToken",
        "getAccessToken",
        "setAccessToken",
        "connect",
        "disconnect",
        "destroy",
        "initMetrics",
        "HttpCarbonMessage",
        "generateCarbonMessage",
        "getMessageBody",
        "ClientConnector",
        "createClientConnector",
        "encodeMessage",
        "encodeBase64",
        "HTTPResponseListener",
        "onMessage",
        "run",
        "onError"
    ],
    "classes": [
        "HttpSinkFix",
        "HTTPResponseListener"
    ]
}