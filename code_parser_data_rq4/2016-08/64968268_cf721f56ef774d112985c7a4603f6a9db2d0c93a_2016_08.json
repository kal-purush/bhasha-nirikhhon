{
    "identifiers": [
        "division",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "pp",
        "astropy",
        "astropy",
        "io",
        "fits",
        "astropy",
        "io",
        "ascii",
        "scipy",
        "stats",
        "astropy",
        "io",
        "fits",
        "getval",
        "scipy",
        "spatial",
        "cKDTree",
        "sys",
        "scipy",
        "stats",
        "beta",
        "folder_name",
        "format",
        "folder_name",
        "folder_name",
        "fits",
        "getval",
        "f160w_file",
        "fits",
        "getval",
        "f160w_file",
        "stats",
        "uniform",
        "rvs",
        "xsize",
        "size",
        "n_samps",
        "stats",
        "uniform",
        "rvs",
        "ysize",
        "size",
        "n_samps",
        "format",
        "folder_name",
        "folder_name",
        "ascii",
        "read",
        "qcat_f160W",
        "format",
        "format",
        "folder_name",
        "folder_name",
        "ascii",
        "read",
        "qcat_f125W",
        "format",
        "np",
        "column_stack",
        "cat_f160W",
        "cat_f160W",
        "cKDTree",
        "xy",
        "np",
        "column_stack",
        "randx",
        "randy",
        "kd",
        "query",
        "test_pts",
        "k",
        "distance_upper_bound",
        "dist_bound",
        "cat_f160W",
        "ind",
        "dists",
        "np",
        "inf",
        "cat_f125W",
        "ind",
        "dists",
        "np",
        "inf",
        "len",
        "found_cat",
        "test_pts",
        "shape",
        "successes",
        "beta",
        "successes",
        "failures",
        "found_dist",
        "interval",
        "format",
        "successes",
        "failures",
        "successes",
        "found_frac",
        "found_frac",
        "found_cat",
        "found_cat",
        "phot_mask",
        "cat_f125W",
        "phot_mask",
        "len",
        "found_cat",
        "test_pts",
        "shape",
        "successes",
        "beta",
        "successes",
        "failures",
        "found_dist",
        "interval",
        "format",
        "successes",
        "failures",
        "successes",
        "found_frac",
        "found_frac",
        "cat_f125W",
        "found_cat",
        "color_jh",
        "found_cat",
        "color_mask",
        "len",
        "found_cat",
        "test_pts",
        "shape",
        "successes",
        "beta",
        "successes",
        "failures",
        "found_dist",
        "interval",
        "format",
        "successes",
        "failures",
        "successes",
        "found_frac",
        "found_frac",
        "dists",
        "np",
        "inf",
        "pp",
        "scatter",
        "randx",
        "randy",
        "c",
        "has_a_neighbor",
        "cmap",
        "pp",
        "show",
        "folder_name",
        "folder_names",
        "pp",
        "title",
        "folder_name",
        "rand_numb",
        "folder_name"
    ],
    "literals": [
        "'CFHQS-J003311.40-012524.9'",
        "'NDWFS-J142516.30+325409.0'",
        "'QSO-J0005-0006'",
        "'SDSS-J012958.51-003539.7'",
        "'SDSS-J020332.39+001229.3'",
        "'SDSS-J205406.42-000514.8'",
        "'/Users/Victoria/Documents/ASU/Research/Part_2_Hubble_Images/all_quasar_images/{folder_name}/F160W/{folder_name}_F160W_drz_sci.fits'",
        "'NAXIS1'",
        "'NAXIS2'",
        "'/Users/Victoria/Documents/ASU/Research/Part_2_Hubble_Images/all_quasar_images/{folder_name}/F160W/{folder_name}_F160W_phot.cat'",
        "'sextractor'",
        "'/Users/Victoria/Documents/ASU/Research/Part_2_Hubble_Images/all_quasar_images/{folder_name}/F125W/{folder_name}_F125W_phot.cat'",
        "'sextractor'",
        "'X_IMAGE'",
        "'Y_IMAGE'",
        "'Without Color Criteria'",
        "'Samples: {:d} Matched: {:d} Frac: {:0.3g}-{:0.3g}'",
        "'MAG_AUTO'",
        "'With Color Criteria'",
        "'Samples: {:d} Matched: {:d} Frac: {:0.3g}-{:0.3g}'",
        "'MAG_AUTO'",
        "'MAG_AUTO'",
        "'With Color Criteria F160W Mag + Color Cut'",
        "'Samples: {:d} Matched: {:d} Frac: {:0.3g}-{:0.3g}'",
        "'winter'"
    ],
    "variables": [
        "folder_names",
        "dist_bound",
        "n_samps",
        "f160w_file",
        "xsize",
        "ysize",
        "randx",
        "randy",
        "qcat_f160W",
        "cat_f160W",
        "qcat_f125W",
        "cat_f125W",
        "xy",
        "kd",
        "test_pts",
        "dists",
        "ind",
        "found_cat",
        "cat_f125W",
        "successes",
        "failures",
        "found_dist",
        "found_frac",
        "phot_mask",
        "found_cat",
        "cat_f125W",
        "successes",
        "failures",
        "found_dist",
        "found_frac",
        "color_jh",
        "color_mask",
        "found_cat",
        "successes",
        "failures",
        "found_dist",
        "found_frac",
        "has_a_neighbor"
    ],
    "comments": [
        "How far to search for objects",
        "How many sample points to try",
        "Name the files first but add folder_name so that can run",
        "call on the two catalogs f160W and f125W",
        "call on the x and y pixel count",
        "do the random number generator",
        "make cut based on those with found neighbors",
        "Check the definition of beta distribution, the +1 is basically so the",
        "math works even in the case where successes or failures is 0",
        "This gives us a 2-tuple of the 68% confidence interval",
        "i.e. there is 68% probability the value falls between (min, max)",
        "68% is the usally-quoted \"1-sigma\" statistical uncertainty",
        "take out the bad magnitudes",
        "Repeat beta above for magnitudes",
        "print((len(found_cat), len(cat_f125W))",
        "Add color cut",
        "Repeat Beta",
        "dists is by definition the same size as your query points (randx/y)",
        "So this makes an array that is True if the random x,y point had a neighbor (dist < infinity), False otherwise.",
        "c= sets the color of a point based on the value of the array you give it.",
        "True/False = 1/0 and will result in red and blue points, by default."
    ],
    "docstrings": [],
    "functions": [
        "rand_numb"
    ],
    "classes": []
}