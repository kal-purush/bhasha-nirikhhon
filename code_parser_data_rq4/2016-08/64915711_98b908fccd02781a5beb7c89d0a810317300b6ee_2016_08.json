{
    "identifiers": [
        "division",
        "itertools",
        "scipy",
        "sparse",
        "csr_matrix",
        "scipy",
        "special",
        "gammaln",
        "collections",
        "defaultdict",
        "sklearn",
        "preprocessing",
        "normalize",
        "scipy",
        "sparse",
        "sparsetools",
        "csr_scale_rows",
        "numpy",
        "np",
        "vocab",
        "vocab",
        "len",
        "vocab",
        "transitions_matrix",
        "transitions_matrix",
        "hypothesis",
        "structur",
        "k",
        "prior",
        "norm",
        "csr_matrix",
        "hypothesis",
        "copy",
        "csr_matrix",
        "structur",
        "copy",
        "k",
        "state_count",
        "hypothesis",
        "size",
        "norm",
        "hypothesis",
        "sum",
        "axis",
        "np",
        "where",
        "norm_h",
        "norm_h",
        "n_nzeros",
        "np",
        "array",
        "norm_h",
        "T",
        "csr_scale_rows",
        "hypothesis",
        "shape",
        "hypothesis",
        "shape",
        "hypothesis",
        "indptr",
        "hypothesis",
        "indices",
        "hypothesis",
        "data",
        "norm_h",
        "hypothesis",
        "pseudo_counts",
        "hypothesis",
        "sum",
        "axis",
        "np",
        "where",
        "norma",
        "pseudo_counts",
        "state_count",
        "hypothesis",
        "sum",
        "axis",
        "np",
        "where",
        "norm_h",
        "norm_h",
        "n_nzeros",
        "np",
        "array",
        "norm_h",
        "T",
        "csr_scale_rows",
        "hypothesis",
        "shape",
        "hypothesis",
        "shape",
        "hypothesis",
        "indptr",
        "hypothesis",
        "indices",
        "hypothesis",
        "data",
        "norm_h",
        "hypothesis",
        "pseudo_counts",
        "zero_rows_norm_eff1",
        "hypothesis",
        "structur",
        "k",
        "prior",
        "k",
        "transitions",
        "copy",
        "transitions_prior",
        "hypothesis",
        "evidence",
        "gammaln",
        "hypothesis",
        "sum",
        "axis",
        "state_count",
        "prior",
        "sum",
        "evidence",
        "gammaln",
        "transitions",
        "sum",
        "axis",
        "hypothesis",
        "sum",
        "axis",
        "state_count",
        "prior",
        "sum",
        "evidence",
        "gammaln",
        "transitions_prior",
        "data",
        "prior",
        "sum",
        "evidence",
        "gammaln",
        "hypothesis",
        "data",
        "prior",
        "sum",
        "len",
        "transitions_prior",
        "data",
        "len",
        "hypothesis",
        "data",
        "gammaln",
        "prior",
        "evidence",
        "hypothesis",
        "structur",
        "k",
        "hypothesis",
        "sum",
        "axis",
        "np",
        "where",
        "norma",
        "len",
        "n_zeros",
        "x",
        "i",
        "n_zeros",
        "x",
        "x",
        "len",
        "n_zeros",
        "np",
        "where",
        "structur",
        "i",
        "links",
        "k",
        "len",
        "links",
        "hypothesis",
        "structur",
        "k",
        "hypothesis",
        "sum",
        "axis",
        "np",
        "where",
        "norma",
        "x",
        "i",
        "n_zeros",
        "np",
        "where",
        "structur",
        "i",
        "k",
        "len",
        "links",
        "j",
        "links",
        "i_index",
        "append",
        "i",
        "j_index",
        "append",
        "j",
        "values",
        "append",
        "value",
        "hypothesis",
        "csr_matrix",
        "values",
        "i_index",
        "j_index",
        "shape",
        "hypothesis",
        "shape",
        "dtype",
        "np"
    ],
    "literals": [
        "'n_zeros'",
        "'n_zeros done'"
    ],
    "variables": [
        "vocab",
        "state_count",
        "transitions",
        "hypothesis",
        "structur",
        "pseudo_counts",
        "norm_h",
        "n_nzeros",
        "norm_h",
        "n_nzeros",
        "norm_h",
        "hypothesis",
        "norma",
        "n_zeros",
        "_",
        "hypothesis",
        "n_zeros",
        "norm_h",
        "n_nzeros",
        "norm_h",
        "n_nzeros",
        "norm_h",
        "hypothesis",
        "transitions_prior",
        "transitions_prior",
        "evidence",
        "norma",
        "n_zeros",
        "links",
        "hypothesis",
        "i",
        "norma",
        "n_zeros",
        "i_index",
        "j_index",
        "values",
        "links",
        "value",
        "hypothesis"
    ],
    "comments": [
        "further implementations can be found:",
        "Python: https://github.com/psinger/hyptrails",
        "Java: https://bitbucket.org/florian_lemmerich/hyptrails4j",
        "Apache spark: http://dmir.org/sparktrails/",
        "also see: http://www.philippsinger.info/hyptrails/",
        "print \"fit done\"",
        "care with copy here",
        "in case of memory issues set copy to False but then care about changed hypothesis matrix",
        "print \"in norm\"",
        "print \"in place mod\"",
        "modify sparse_csc_matrix in place",
        "distribute pseudo counts to matrix, row-based approach",
        "print \"after pseude counts\"",
        "also consider those rows which only include zeros",
        "print \"in norm\"",
        "print \"in place mod\"",
        "modify sparse_csc_matrix in place",
        "distribute pseudo counts to matrix, row-based approach",
        "TODO check if this line should be placed after the zero_rows_norm() call????",
        "self.zero_rows_norm(hypothesis, structur,k)",
        "if hypothesis matrix is empty, we can simply increase the proto prior parameter",
        "transition matrix with additional Dirichlet prior",
        "not memory efficient",
        "print \"after copy\"",
        "elegantly calculate evidence",
        "def zero_rows_norm_eff(self,hypothesis, structur):",
        "#find zero sum rows in hypothesis",
        "print 'sum hyp'",
        "norma = hypothesis.sum(axis=1)",
        "n_zeros = np.where(norma == 0)",
        "# norm the structure matrix",
        "print 'sum structure'",
        "tmp = structur[n_zeros]",
        "norm_s = tmp.sum(axis=1)",
        "norm_s = np.array(norm_s).T[0]",
        "tmp = tmp/norm_s[:,None]",
        "#replece the zero rows in hypothesis with the corresponding rows in the normed strcuture matrix",
        "print 'replace'",
        "hypotheis[n_zeros,:]=tmp[n_zeros,:]",
        "find zero sum rows in hypothesis",
        "print 'sum hyp'",
        "norm the structure matrix",
        "if x % 1000 == 0:",
        "print x, len(n_zeros[0])"
    ],
    "docstrings": [
        "\"\"\"\n    HypTrails\n    \"\"\"",
        "\"\"\"\n        Constructor for class HypTrails\n\n        Args:\n            vocab: optional vocabulary mapping states to indices\n        \"\"\"",
        "\"\"\"\n        Function for fitting the Markov Chain model given data\n\n        Args:\n            sequences: Data of sequences, list of lists\n        \"\"\"",
        "\"\"\"\n        Determines Bayesian evidence given fitted model and hypothesis\n\n        Args:\n            hypothesis: Hypothesis csr matrix,\n                        indices need to map those of transition matrix\n            k: Concentration parameter k\n            prior: proto Dirichlet prior\n            norm: Flag for normalizing hypothesis matrix\n        Returns\n            evidence\n        \"\"\""
    ],
    "functions": [
        "fit",
        "evidence",
        "zero_rows_norm",
        "zero_rows_norm_eff1"
    ],
    "classes": [
        "HypTrails"
    ]
}