{
    "identifiers": [
        "require",
        "Foo",
        "callback",
        "setTimeout",
        "that",
        "callback",
        "that",
        "Foo",
        "callback",
        "setTimeout",
        "that",
        "callback",
        "that",
        "Foo",
        "callback",
        "setTimeout",
        "that",
        "callback",
        "that",
        "Foo",
        "Foo",
        "JSChain",
        "obj",
        "arrayPrototypeNames",
        "arrayPrototypeNames",
        "arrayPrototypeNames",
        "obj",
        "obj",
        "obj",
        "arrayPrototypeNames",
        "arrayPrototypeNames",
        "arrayPrototypeNames",
        "serial",
        "__chainMethods",
        "arrayPrototypeNames",
        "obj",
        "arrayPrototypeNames",
        "arrayPrototypeNames",
        "prototype",
        "method",
        "idx",
        "method",
        "__prototypeWrapper",
        "method",
        "arrayPrototypeNames",
        "method",
        "idx",
        "__prototypeWrapper",
        "method",
        "name",
        "obj",
        "name",
        "obj",
        "name",
        "callback",
        "name",
        "resolve",
        "reject",
        "resolve",
        "that",
        "callbackContext",
        "callbackContext",
        "that",
        "arguments",
        "promise",
        "__onPromise",
        "method",
        "that",
        "callbackWrapper",
        "promise",
        "invokedMethod",
        "chainStack",
        "stackObject",
        "chainStack",
        "chainIndex",
        "chainIndex",
        "chainIndex",
        "invokedMethod",
        "chainStack",
        "chainIndex",
        "chainStack",
        "chainStack",
        "chainIndex",
        "chainIndex",
        "chainIndex",
        "chainStack",
        "chainStack",
        "serial",
        "JSChain",
        "foo",
        "JSChain",
        "foo2",
        "foo",
        "foo2",
        "foo",
        "foo2",
        "setTimeout",
        "foo",
        "data",
        "arguments"
    ],
    "literals": [
        "'promise'",
        "\">>>Called methodA\"",
        "\">>>finishedA ... calling callback\"",
        "\">>>Called methodB\"",
        "\">>>finishedB ... calling callback\"",
        "\">>>Called methodC\"",
        "'data'",
        "'1'",
        "'data'",
        "'2'",
        "\">>>finishedC ... calling callback\"",
        "'default'",
        "'Missing parameter when classing jsPrototypeChain'",
        "'object'",
        "'Must pass in an object when calling jsPrototypeChain'",
        "'default'",
        "'Optional parameter of type: '",
        "' is not an array'",
        "'default'",
        "\"chaining method:\"",
        "\">>>invoked method: \"",
        "\"callback wrapper\"",
        "'promise'",
        "'invokedMethod'",
        "\"index incremented:\"",
        "\">>promise complete: \"",
        "'invokedMethod'",
        "\"\\n\\n=================RESET and holding for 10 sec...\"",
        "\">>>>RUNNING NEW\"",
        "\"REQUIRED CALLBACK with data: \""
    ],
    "variables": [
        "Foo",
        "a",
        "that",
        "that",
        "that",
        "foo",
        "foo2",
        "JSChain",
        "serial",
        "prototype",
        "chainStack",
        "chainIndex",
        "method",
        "that",
        "promise",
        "callbackWrapper",
        "callbackContext",
        "callback",
        "invokedMethod",
        "stackObject"
    ],
    "comments": [
        "foo object",
        "console.info(\"Class: \", prototype);",
        "console.info(\"Object:\", obj);",
        "chaining",
        "selectively chain or chain everything",
        "console.info(\">>>wrapping name: \", name);",
        "bootstrap and run if it is the first one loaded onto stack",
        "cleanup",
        "implicit garbage collect?",
        "new JSChain(foo, ['methodA', 'methodB']);",
        "new JSChain(foo2);"
    ],
    "docstrings": [
        "* We build some prototype methods for chaining.\n* It is expected that these are not modified.",
        "* Instantiate a few objects",
        "* JSChain API\n* \n* \n* @param obj <Object> (required) — object target for chaining methods\n* @param arrayPrototypeNames <Array> (optional) - array list of methods targeted for chaining\n* \n* Note: Default behavior chains all prototype methods,\n* or you can selectively choose the methods by passing in array of method names.\n* Note: If object passed has a callback, this implementation requires that it is \n* located as the first parameter so as to preserve any additional arguments the caller\n* has set on the object.\n* \n* Note: \n*\n* - Enables objects to be chainable to all (or selective) method calls passed in \n* during initialization.\n* - When using selective chaining, be sure you are not accidently mixing your chainable\n* and non chainable calls.\n* - Chainable methods call the subsequent method ONLY AFTER previous\n* calls completes.\n* - If a callback exists on object's method, it is assumed it is the first parameter.\n* \n* Usage / Notes:\n* ================\n* //your object\n* var foo = new Foo();\n* //enable the chaining\n* JSChain(foo).serial();\n* //call by chaining\n* foo.callA().callB().callC()\n* \n* Assumption: The following 3 lines would be equivalent to the above call\n* if A,B,C are all enabled for chaining.  \n* \n* foo.callA().B().C()\n* //same as below: Might be good to pass into JSChain\n* params which would allow caller to set whether such calls are async, or still in serial.\n* foo.callA()\n* foo.callB()\n* foo.callC()\n* \n* However a 2nd foo would be asynchrounous to 1st foo object:\n* var foo1 = new Foo(); \n* var foo2 = new Foo();\n* JSChain(foo2).serial();\n* JSChain(foo1).serial();\n* foo1.callA().callA().callA()\n* foo2.callA().callA().callA()\n* \n* \n* For selective chaining pass in array of method names for enabling.\n* JSChain(foo, ['method1', 'method2']).serial();\n*\n* Tests:\n* =======\n* * Serial completes in order\n* * Returns a callback back to original caller\n* * Call order preserved when object makes calls in asynchrounous syntax.\n* * Object state propogated through chained serial calls.\n* * Selectively choose methods for chaining.\n* * Different chained instances are asynchrounous \n* \n* \n* TODO Features \n* ===============\n* * Return JSChain id to handle cases like aborting, stats, etc.\n* * Set MAX_TIMEOUT when any chained method call does not complete by specified time.\n* * Params to Continue or Abort if MAX_TIMEOUT already running serial chain.\n* * Async - option to simply make prototype methods to be chainable\n* * Params options to indicate how to handle async syntax on enabled chained methods: \n* * ie:  \n* *      foo.callA(); foo.callA();  // same as foo.callA().callA().\n* * option for setting callback location\n*",
        "*",
        "*",
        "*",
        "* quick testing"
    ],
    "functions": [
        "__chainMethods",
        "__prototypeWrapper",
        "__onPromise"
    ],
    "classes": []
}