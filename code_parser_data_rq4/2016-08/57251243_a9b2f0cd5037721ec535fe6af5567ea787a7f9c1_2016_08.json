{
    "identifiers": [
        "com",
        "nike",
        "wingtips",
        "zipkin",
        "com",
        "nike",
        "wingtips",
        "com",
        "nike",
        "wingtips",
        "lifecyclelistener",
        "SpanLifecycleListener",
        "com",
        "nike",
        "wingtips",
        "zipkin",
        "util",
        "WingtipsToZipkinSpanConverter",
        "com",
        "nike",
        "wingtips",
        "zipkin",
        "util",
        "WingtipsToZipkinSpanConverterDefaultImpl",
        "com",
        "nike",
        "wingtips",
        "zipkin",
        "util",
        "ZipkinSpanSender",
        "com",
        "nike",
        "wingtips",
        "zipkin",
        "util",
        "ZipkinSpanSenderDefaultHttpImpl",
        "zipkin",
        "Endpoint",
        "SuppressWarnings",
        "serviceName",
        "localComponentNamespace",
        "zipkinEndpoint",
        "zipkinSpanConverter",
        "zipkinSpanSender",
        "serviceName",
        "localComponentNamespace",
        "zipkinSpanConverter",
        "zipkinSpanSender",
        "serviceName",
        "serviceName",
        "localComponentNamespace",
        "localComponentNamespace",
        "zipkinEndpoint",
        "Endpoint",
        "builder",
        "serviceName",
        "serviceName",
        "build",
        "zipkinSpanConverter",
        "zipkinSpanConverter",
        "zipkinSpanSender",
        "zipkinSpanSender",
        "serviceName",
        "localComponentNamespace",
        "postZipkinSpansBaseUrl",
        "serviceName",
        "localComponentNamespace",
        "postZipkinSpansBaseUrl",
        "Override",
        "span",
        "Override",
        "span",
        "Override",
        "span",
        "zipkinSpan",
        "zipkinSpanConverter",
        "convertWingtipsSpanToZipkinSpan",
        "span",
        "zipkinEndpoint",
        "localComponentNamespace",
        "zipkinSpanSender",
        "handleSpan",
        "zipkinSpan"
    ],
    "literals": [
        "\"WeakerAccess\""
    ],
    "variables": [
        "serviceName",
        "localComponentNamespace",
        "zipkinEndpoint",
        "zipkinSpanConverter",
        "zipkinSpanSender"
    ],
    "comments": [
        "Do nothing",
        "Do nothing"
    ],
    "docstrings": [
        "* <p>\n *     A {@link SpanLifecycleListener} that converts Wingtips {@link Span}s to Zipkin {@link zipkin.Span}s and then sends them\n *     to a Zipkin server in periodic batches, essentially making Wingtips compatible with Zipkin.\n * </p>\n * <p>\n *     For a straightforward no-hassle integration simply use the basic constructor:\n *     {@link #WingtipsToZipkinLifecycleListener(String, String, String)}. If you want more flexibility in order to adjust how\n *     Wingtips spans are converted to Zipkin spans, or adjust how the Zipkin spans are batched up and sent to the Zipkin server, then you\n *     can use the {@link #WingtipsToZipkinLifecycleListener(String, String, WingtipsToZipkinSpanConverter, ZipkinSpanSender)}\n *     constructor.\n * </p>\n * <p>\n *     Note that it's easy to create an adapter that allows you to have a {@code SpanCollector} from the Zipkin Brave libraries function\n *     as a {@link ZipkinSpanSender}. So if you're accustomed to using specific Zipkin {@code SpanCollector}s you can use them with\n *     Wingtips unchanged.\n * </p>\n *\n * @author Nic Munroe",
        "* Kitchen-sink constructor that lets you set all the options.\n     *\n     * @param serviceName The name of this service. This is used to build the Zipkin {@link Endpoint} that will be used for client/server/local\n     *                    Zipkin annotations when sending spans to Zipkin.\n     * @param localComponentNamespace The {@link zipkin.Constants#LOCAL_COMPONENT} namespace that should be used when creating certain Zipkin\n     *                                annotations when the Wingtips span's {@link Span#getSpanPurpose()} is\n     *                                {@link com.nike.wingtips.Span.SpanPurpose#LOCAL_ONLY}. See the {@link zipkin.Constants#LOCAL_COMPONENT}\n     *                                javadocs for more information on what this is and how it's used by the Zipkin server, so you know\n     *                                what value you should send.\n     * @param zipkinSpanConverter The {@link WingtipsToZipkinSpanConverter} that should be used to convert Wingtips spans to Zipkin spans.\n     * @param zipkinSpanSender The {@link ZipkinSpanSender} for collecting and sending Zipkin spans to the Zipkin server.",
        "* Convenience constructor that uses {@link WingtipsToZipkinSpanConverterDefaultImpl} and {@link ZipkinSpanSenderDefaultHttpImpl} as the\n     * implementations for {@link #zipkinSpanConverter} and {@link #zipkinSpanSender}.\n     *\n     * @param serviceName The name of this service. This is used to build the Zipkin {@link Endpoint} that will be used for client/server/local\n     *                    Zipkin annotations when sending spans to Zipkin.\n     * @param localComponentNamespace The {@link zipkin.Constants#LOCAL_COMPONENT} namespace that should be used when creating certain Zipkin\n     *                                annotations when the Wingtips span's {@link Span#getSpanPurpose()} is\n     *                                {@link com.nike.wingtips.Span.SpanPurpose#LOCAL_ONLY}. See the {@link zipkin.Constants#LOCAL_COMPONENT}\n     *                                javadocs for more information on what this is and how it's used by the Zipkin server, so you know\n     *                                what value you should send.\n     * @param postZipkinSpansBaseUrl The base URL of the Zipkin server. This should include the scheme, host, and port (if non-standard for the scheme).\n     *                               e.g. {@code http://localhost:9411}, or {@code https://zipkinserver.doesnotexist.com/}"
    ],
    "functions": [
        "WingtipsToZipkinLifecycleListener",
        "WingtipsToZipkinLifecycleListener",
        "spanStarted",
        "spanSampled",
        "spanCompleted"
    ],
    "classes": [
        "WingtipsToZipkinLifecycleListener"
    ]
}