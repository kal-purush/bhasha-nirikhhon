{
    "identifiers": [
        "absolute_import",
        "unicode_literals",
        "division",
        "print_function",
        "abc",
        "numpy",
        "np",
        "core",
        "Model",
        "utils",
        "minversion",
        "scipy",
        "scipy",
        "interpolate",
        "interpn",
        "ImportError",
        "has_scipy",
        "minversion",
        "scipy",
        "Model",
        "abc",
        "abstractproperty",
        "points",
        "lookup_table",
        "method",
        "bounds_error",
        "fill_value",
        "np",
        "nan",
        "kwargs",
        "Tabular",
        "kwargs",
        "lookup_table",
        "np",
        "asarray",
        "lookup_table",
        "lookup_table",
        "ndim",
        "lookup_table",
        "ndim",
        "ValueError",
        "format",
        "lookup_table",
        "ndim",
        "lookup_table",
        "points",
        "np",
        "arange",
        "x",
        "dtype",
        "np",
        "x",
        "lookup_table",
        "shape",
        "lookup_table",
        "ndim",
        "points",
        "points",
        "len",
        "_points",
        "lookup_table",
        "ndim",
        "ValueError",
        "format",
        "lookup_table",
        "ndim",
        "len",
        "_points",
        "bounds_error",
        "method",
        "fill_value",
        "property",
        "_points",
        "inputs",
        "np",
        "array",
        "inputs",
        "n_inputs",
        "T",
        "has_scipy",
        "ImportError",
        "interpn",
        "points",
        "lookup_table",
        "inputs",
        "method",
        "method",
        "bounds_error",
        "bounds_error",
        "fill_value",
        "fill_value",
        "lookup_table",
        "name",
        "np",
        "asanyarray",
        "lookup_table",
        "format",
        "idx",
        "idx",
        "table",
        "ndim",
        "table",
        "inputs",
        "name",
        "Tabular",
        "_id",
        "Tabular",
        "_id",
        "format",
        "model_id",
        "name",
        "Tabular",
        "members"
    ],
    "literals": [
        "\"0.14\"",
        "'tabular_model'",
        "'Tabular'",
        "'tabular_model'",
        "'scipy'",
        "'y'",
        "'linear'",
        "\"lookup_table should be an array with \"",
        "\"{0} dimensions\"",
        "\"Expected grid points in \"",
        "\"{0} directions, got {1}\"",
        "\"This model requires scipy >= v0.14\"",
        "'x{0}'",
        "'lookup_table'",
        "'inputs'",
        "'Tabular{0}'"
    ],
    "variables": [
        "has_scipy",
        "has_scipy",
        "has_scipy",
        "__all__",
        "__doctest_requires__",
        "linear",
        "fittable",
        "standard_broadcasting",
        "outputs",
        "lookup_table",
        "_is_dynamic",
        "_id",
        "lookup_table",
        "lookup_table",
        "_points",
        "_points",
        "_points",
        "bounds_error",
        "method",
        "fill_value",
        "inputs",
        "table",
        "inputs",
        "members",
        "model_id",
        "name"
    ],
    "comments": [
        "Licensed under a 3-clause BSD style license - see LICENSE.rst"
    ],
    "docstrings": [
        "\"\"\"Tabular models.\"\"\"",
        "\"\"\"\n    Returns an interpolated lookup table value.\n\n    Parameters\n    ----------\n    points : tuple of ndarray of float, with shapes (m1, ), ..., (mn, ), optional\n        The points defining the regular grid in n dimensions.\n    lookup_table : array_like, shape (m1, ..., mn, ...)\n        The data on a regular grid in n dimensions.\n    method : str, optional\n        The method of interpolation to perform. Supported are \"linear\" and\n        \"nearest\", and \"splinef2d\". \"splinef2d\" is only supported for\n        2-dimensional data. Default is \"linear\".\n    bounds_error : bool, optional\n        If True, when interpolated values are requested outside of the\n        domain of the input data, a ValueError is raised.\n        If False, then `fill_value` is used.\n    fill_value : float, optional\n        If provided, the value to use for points outside of the\n        interpolation domain. If None, values outside\n        the domain are extrapolated.  Extrapolation is not supported by method\n        \"splinef2d\".\n\n    Returns\n    -------\n    value : ndarray\n        Interpolated values at input coordinates.\n\n    Raises\n    ------\n    ImportError\n        Scipy is not installed.\n\n    Notes\n    -----\n    Uses ``scipy.interpolate.interpn``\n\n    \"\"\"",
        "\"\"\"\n        Return the interpolated values at the input coordinates.\n\n        Parameters\n        ----------\n        inputs : list of scalars or ndarrays\n            Input coordinates. The number of inputs must be equal\n            to the dimensions of the lookup table.\n        \"\"\"",
        "\"\"\"\n    Make a ``Tabular`` model where ``n_inputs`` is\n    based on the dimension of the lookup_table.\n\n    This model has to be further initialized and when evaluated\n    returns the interpolated values.\n\n    Parameters\n    ----------\n    lookup_table : array_like, shape (m1, ..., mn)\n        The data on a regular grid in n dimensions.\n    name : str\n        Name for the class.\n\n    Examples\n    --------\n    >>> table = np.array([[ 3.,  0.,  0.],\n    ...                  [ 0.,  2.,  0.],\n    ...                  [ 0.,  0.,  0.]])\n\n    >>> tab = tabular_model(table, name='Tabular2D')\n    >>> print(tab)\n        <class 'abc.Tabular2D'>\n        Name: Tabular2D\n        Inputs: (u'x0', u'x1')\n        Outputs: (u'y',)\n\n    >>> points = ([1, 2, 3], [1, 2, 3])\n\n    Setting fill_value to None, allows extrapolation.\n    >>> m = tab(points, name='my_table', bounds_error=False, fill_value=None, method='nearest')\n\n    >>> xinterp = [0, 1, 1.5, 2.72, 3.14]\n    >>> m(xinterp, xinterp)\n        array([ 3., 3., 3., 0., 0.])\n\n    \"\"\""
    ],
    "functions": [
        "points",
        "evaluate",
        "tabular_model"
    ],
    "classes": [
        "Tabular"
    ]
}