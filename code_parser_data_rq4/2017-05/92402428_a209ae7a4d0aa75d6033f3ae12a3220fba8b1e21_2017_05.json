{
    "identifiers": [
        "division",
        "sys",
        "os",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "os",
        "environ",
        "sys",
        "path",
        "append",
        "sys",
        "path",
        "insert",
        "numpy",
        "ogrid",
        "repeat",
        "newaxis",
        "skimage",
        "io",
        "ogrid",
        "imsize",
        "imsize",
        "repeat",
        "x",
        "y",
        "newaxis",
        "imsize",
        "imsize",
        "skimage",
        "transform",
        "factor",
        "input_img",
        "skimage",
        "transform",
        "rescale",
        "input_img",
        "factor",
        "mode",
        "cval",
        "order",
        "upsample_skimage",
        "factor",
        "input_img",
        "img",
        "division",
        "numpy",
        "np",
        "tensorflow",
        "tf",
        "factor",
        "factor",
        "factor",
        "size",
        "size",
        "size",
        "factor",
        "factor",
        "np",
        "ogrid",
        "size",
        "size",
        "abs",
        "og",
        "center",
        "factor",
        "abs",
        "og",
        "center",
        "factor",
        "factor",
        "number_of_classes",
        "get_kernel_size",
        "factor",
        "np",
        "zeros",
        "filter_size",
        "filter_size",
        "number_of_classes",
        "number_of_classes",
        "dtype",
        "np",
        "float32",
        "upsample_filt",
        "filter_size",
        "i",
        "number_of_classes",
        "upsample_kernel",
        "weights",
        "factor",
        "input_img",
        "input_img",
        "shape",
        "input_img",
        "shape",
        "factor",
        "input_img",
        "shape",
        "factor",
        "np",
        "expand_dims",
        "input_img",
        "axis",
        "tf",
        "Graph",
        "as_default",
        "tf",
        "Session",
        "sess",
        "tf",
        "device",
        "tf",
        "placeholder",
        "tf",
        "float32",
        "tf",
        "placeholder",
        "tf",
        "float32",
        "bilinear_upsample_weights",
        "factor",
        "number_of_classes",
        "tf",
        "nn",
        "conv2d_transpose",
        "logits_pl",
        "upsample_filt_pl",
        "output_shape",
        "new_height",
        "new_width",
        "number_of_classes",
        "strides",
        "factor",
        "factor",
        "sess",
        "run",
        "res",
        "feed_dict",
        "upsample_filt_pl",
        "upsample_filter_np",
        "logits_pl",
        "expanded_img",
        "final_result",
        "squeeze",
        "upsample_tf",
        "factor",
        "input_img",
        "img",
        "factor",
        "upsample_skimage",
        "factor",
        "factor",
        "input_img",
        "img",
        "upsample_tf",
        "factor",
        "factor",
        "input_img",
        "img",
        "np",
        "allclose",
        "upsampled_img_skimage",
        "upsampled_img_tf",
        "matplotlib",
        "inline",
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "np",
        "os",
        "tensorflow",
        "tf",
        "urllib",
        "request",
        "datasets",
        "imagenet",
        "nets",
        "vgg",
        "preprocessing",
        "vgg_preprocessing",
        "tf",
        "contrib",
        "slim",
        "preprocessing",
        "vgg_preprocessing",
        "_mean_image_subtraction",
        "_R_MEAN",
        "_G_MEAN",
        "_B_MEAN",
        "tf",
        "contrib",
        "slim",
        "data",
        "labels_names",
        "title",
        "plt",
        "rcParams",
        "fig_size",
        "plt",
        "get_cmap",
        "np",
        "max",
        "data",
        "np",
        "min",
        "data",
        "plt",
        "matshow",
        "data",
        "cmap",
        "cmap",
        "vmin",
        "np",
        "min",
        "data",
        "vmax",
        "np",
        "max",
        "data",
        "plt",
        "colorbar",
        "mat",
        "ticks",
        "np",
        "arange",
        "np",
        "min",
        "data",
        "np",
        "max",
        "data",
        "labels_names",
        "cax",
        "ax",
        "set_yticklabels",
        "labels_names",
        "title",
        "plt",
        "suptitle",
        "title",
        "fontsize",
        "fontweight",
        "tf",
        "Graph",
        "as_default",
        "urllib",
        "request",
        "urlopen",
        "url",
        "read",
        "tf",
        "image",
        "decode_jpeg",
        "image_string",
        "channels",
        "tf",
        "to_float",
        "image",
        "name",
        "_mean_image_subtraction",
        "image_float",
        "_R_MEAN",
        "_G_MEAN",
        "_B_MEAN",
        "tf",
        "expand_dims",
        "processed_image",
        "slim",
        "arg_scope",
        "vgg",
        "vgg_arg_scope",
        "vgg",
        "vgg_16",
        "input_image",
        "num_classes",
        "is_training",
        "spatial_squeeze",
        "tf",
        "argmax",
        "logits",
        "dimension",
        "slim",
        "assign_from_checkpoint_fn",
        "os",
        "path",
        "join",
        "checkpoints_dir",
        "slim",
        "get_model_variables",
        "tf",
        "Session",
        "sess",
        "init_fn",
        "sess",
        "sess",
        "run",
        "pred",
        "image",
        "logits",
        "np",
        "squeeze",
        "segmentation",
        "imagenet",
        "create_readable_names_for_imagenet_labels",
        "np",
        "unique",
        "segmentation",
        "return_inverse",
        "segmentation",
        "shape",
        "relabeled_image",
        "reshape",
        "segmentation_size",
        "index",
        "current_class_number",
        "unique_classes",
        "labels_names",
        "append",
        "index",
        "names",
        "current_class_number",
        "plt",
        "figure",
        "plt",
        "imshow",
        "np_image",
        "astype",
        "np",
        "uint8",
        "plt",
        "suptitle",
        "fontsize",
        "fontweight",
        "plt",
        "axis",
        "plt",
        "show",
        "discrete_matshow",
        "data",
        "relabeled_image",
        "labels_names",
        "labels_names",
        "title"
    ],
    "literals": [
        "\"CUDA_VISIBLE_DEVICES\"",
        "'0'",
        "\"home/dpakhom1/workspace/models/slim\"",
        "'/home/dpakhom1/checkpoints'",
        "\"home/dpakhom1/workspace/models/slim\"",
        "'constant'",
        "\"/cpu:0\"",
        "'D:\\\\Git\\\\dpakhom1\\\\checkpoints'",
        "\"\"",
        "\"figure.figsize\"",
        "'Paired'",
        "'bold'",
        "\"file:///C:/Users/ASUS/Pictures/m2015012812503378.jpg\"",
        "'ToFloat'",
        "'vgg_16.ckpt'",
        "'vgg_16'",
        "' '",
        "\"Input Image\"",
        "'bold'",
        "'off'",
        "\"Segmentation\""
    ],
    "variables": [
        "checkpoints_dir",
        "imsize",
        "x",
        "y",
        "img",
        "upsampled_img_skimage",
        "factor",
        "center",
        "center",
        "og",
        "filter_size",
        "weights",
        "upsample_kernel",
        "weights",
        "i",
        "i",
        "number_of_classes",
        "new_height",
        "new_width",
        "expanded_img",
        "upsample_filt_pl",
        "logits_pl",
        "upsample_filter_np",
        "res",
        "final_result",
        "upsampled_img_tf",
        "upsampled_img_skimage",
        "upsampled_img_tf",
        "are_equal",
        "checkpoints_dir",
        "slim",
        "slim",
        "fig_size",
        "cmap",
        "mat",
        "cax",
        "url",
        "image_string",
        "image",
        "image_float",
        "processed_image",
        "input_image",
        "logits",
        "_",
        "pred",
        "init_fn",
        "segmentation",
        "np_image",
        "np_logits",
        "segmentation",
        "names",
        "unique_classes",
        "relabeled_image",
        "segmentation_size",
        "relabeled_image",
        "labels_names"
    ],
    "comments": [
        "A place where you have downloaded a network checkpoint -- look at the previous post",
        "%matplotlib inline",
        "Generate image that will be used for test upsampling",
        "Number of channels is 3 -- we also treat the number of",
        "samples like the number of classes, because later on",
        "that will be used to upsample predictions from the network",
        "io.imshow(img, interpolation='none')",
        "Pad with 0 values, similar to how Tensorflow does it.",
        "Order=1 is bilinear upsampling",
        "io.imshow(upsampled_img_skimage, interpolation='none')",
        "io.imshow(upsampled_img_tf)",
        "print(\"Check for factor {}: {}\".format(factor, are_equal))",
        "Load the mean pixel values and the function",
        "that performs the subtraction",
        "Function to nicely print segmentation results with",
        "colorbar showing class names",
        "get discrete colormap",
        "set limits .5 outside true range",
        "tell the colorbar to tick at integers",
        "The names to be printed aside the colorbar",
        "url = (\"https://upload.wikimedia.org/wikipedia/commons/d/d9/\"",
        "\"First_Student_IC_school_bus_202076.jpg\")",
        "image_filename = \"cat.jpg\"",
        "image_filename_placeholder = tf.placeholder(tf.string)",
        "feed_dict_to_use = {image_filename_placeholder: image_filename}",
        "image_tensor = tf.read_file(image_filename_placeholder)",
        "image_tensor = tf.image.decode_jpeg(image_tensor, channels=3)",
        "Convert image to float32 before subtracting the",
        "mean pixel value",
        "mage_float = tf.to_float(image, name='ToFloat')",
        "Subtract the mean pixel value from each pixel",
        "spatial_squeeze option enables to use network in a fully",
        "convolutional manner",
        "For each pixel we get predictions for each class",
        "out of 1000. We need to pick the one with the highest",
        "probability. To be more precise, these are not probabilities,",
        "because we didn't apply softmax. But if we pick a class",
        "with the highest value it will be equivalent to picking",
        "the highest value after applying softmax",
        "Remove the first empty dimension",
        "Let's get unique predicted classes (from 0 to 1000) and",
        "relable the original predictions so that classes are",
        "numerated starting from zero",
        "Show the downloaded image"
    ],
    "docstrings": [
        "\"\"\"\n    Find the kernel size given the desired factor of upsampling.\n    \"\"\"",
        "\"\"\"\n    Make a 2D bilinear kernel suitable for upsampling of the given (h, w) size.\n    \"\"\"",
        "\"\"\"\n    Create weights matrix for transposed convolution with bilinear filter\n    initialization.\n    \"\"\""
    ],
    "functions": [
        "upsample_skimage",
        "get_kernel_size",
        "upsample_filt",
        "bilinear_upsample_weights",
        "upsample_tf",
        "discrete_matshow"
    ],
    "classes": []
}