{
    "identifiers": [
        "psycopg2",
        "csv",
        "sys",
        "timeit",
        "datetime",
        "pandas",
        "pd",
        "dbname",
        "user",
        "host",
        "psw",
        "dbname",
        "user",
        "host",
        "psw",
        "psycopg2",
        "connect",
        "format",
        "dbname",
        "user",
        "host",
        "psw",
        "conn",
        "cursor",
        "conn",
        "close",
        "close_connection",
        "psycopg2",
        "connect",
        "format",
        "dbname",
        "user",
        "host",
        "psw",
        "conn",
        "cursor",
        "dbname",
        "verbose",
        "cur",
        "fetchall",
        "verbose",
        "k",
        "k",
        "psycopg2",
        "ProgrammingError",
        "end",
        "out_ret",
        "psql",
        "verbose",
        "timeit",
        "default_timer",
        "sum",
        "f",
        "psql",
        "lower",
        "f",
        "special_psql",
        "psql",
        "lower",
        "pd",
        "read_sql_query",
        "psql",
        "conn",
        "cur",
        "execute",
        "psql",
        "conn",
        "commit",
        "timeit",
        "default_timer",
        "verbose",
        "datetime",
        "timedelta",
        "seconds",
        "stop",
        "start",
        "r",
        "table",
        "old_col",
        "new_col",
        "send_psql",
        "format",
        "table",
        "old_col",
        "new_col",
        "psql",
        "send_psql",
        "psql",
        "pid",
        "get_dbname",
        "send_psql",
        "format",
        "pid",
        "dbname",
        "pid",
        "sys",
        "stdout",
        "flush",
        "summary",
        "reconnect",
        "send_psql",
        "format",
        "dbname",
        "sys",
        "stdout",
        "flush",
        "summary",
        "a",
        "a",
        "tablename",
        "verbose",
        "send_psql",
        "format",
        "tablename",
        "verbose",
        "tablename",
        "nrows",
        "verbose",
        "send_psql",
        "format",
        "tablename",
        "nrows",
        "verbose",
        "funcname",
        "verbose",
        "send_psql",
        "format",
        "funcname",
        "verbose",
        "schema",
        "verbose",
        "send_psql",
        "format",
        "schema",
        "verbose",
        "tablename",
        "verbose",
        "send_psql",
        "format",
        "tablename",
        "verbose",
        "tablename",
        "verbose",
        "send_psql",
        "format",
        "tablename",
        "verbose",
        "query",
        "conn",
        "isolation_level",
        "conn",
        "set_isolation_level",
        "cur",
        "execute",
        "query",
        "conn",
        "commit",
        "conn",
        "set_isolation_level",
        "old_isolation_level",
        "send_psql",
        "i",
        "get_all_table_status",
        "verbose",
        "relname",
        "values",
        "i",
        "get_size_table",
        "i",
        "pg_size_pretty",
        "values"
    ],
    "literals": [
        "\"dbname='{0}' user='{1}' host='{2}' password='{3}'\"",
        "\"\"",
        "\"dbname='{0}' user='{1}' host='{2}' password='{3}'\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "'create table '",
        "'create or replace function'",
        "'select '",
        "''",
        "\"time elapsed\"",
        "\"sec\"",
        "\"explain \"",
        "\"Process\"",
        "\"killed\"",
        "\"datid\"",
        "\"datname\"",
        "\"pid\"",
        "\"usesyid\"",
        "\"username\"",
        "\"application_name\"",
        "\"client_addr\"",
        "\"client_hostname\"",
        "\"client_port\"",
        "\"backend_start\"",
        "\"xact_start\"",
        "\"query_start\"",
        "\"state_change\"",
        "\"wait_event_type\"",
        "\"wait_event\"",
        "\"state\"",
        "\"backend_xid\"",
        "\"backend_xmin\"",
        "\"query\"",
        "'pid'",
        "'state'",
        "'query'",
        "\"select pg_get_functiondef(oid) from pg_proc where proname = '{0}';\"",
        "'public'",
        "\"select pg_size_pretty(pg_relation_size('{0}'))\"",
        "\"SELECT pg_size_pretty(pg_database_size('box'))\""
    ],
    "variables": [
        "dbname",
        "user",
        "host",
        "psw",
        "conn",
        "cur",
        "conn",
        "cur",
        "out_ret",
        "out_ret",
        "start",
        "special_psql",
        "r",
        "r",
        "stop",
        "dbname",
        "st_act",
        "a",
        "old_isolation_level"
    ],
    "comments": [
        "import osgeo.ogr",
        "import shapefile",
        "def create_table_from_shapefile(self, srcFile, tablename, createTable=True):",
        "sf = shapefile.Reader(srcFile)",
        "map_type = {'C':'character varying({})', 'N': 'NUMERIC({})'}",
        "all_vars = [str(f[0]) + ' '  + map_type[f[1]].format(f[2]) for f in sf.fields[1:]]",
        "if(createTable):",
        "self.cur.execute('CREATE TABLE %s (id serial,geom geometry, %s);' % (tablename, ' ,'.join(all_vars)))",
        "self.cur.execute('CREATE INDEX %s_gix on %s USING GIST (geom)' % (tablename, tablename))",
        "self.conn.commit()",
        "return [f[0] for f in sf.fields[1:]]",
        "def import_shapefile(self, srcDir, createTable = True):",
        "start = timeit.default_timer()",
        "sfosgeo = osgeo.ogr.Open(srcDir)",
        "layer = sfosgeo.GetLayer(0)",
        "# create table",
        "tablename = layer.GetName()",
        "names = self.create_table_from_shapefile(srcDir + '\\\\' + tablename, tablename, createTable)",
        "# fill the table",
        "f = layer.GetFeature(0)",
        "n = f.GetFieldCount()",
        "count = 0",
        "for i in range(layer.GetFeatureCount()):",
        "count += 1",
        "f = layer.GetFeature(i)",
        "wkt = f.GetGeometryRef().ExportToWkt()",
        "vals = [f.GetField(j) for j in range(0,n)]",
        "text = ''",
        "for j in vals:",
        "if j == None:",
        "add = 'NULL'",
        "else:",
        "add = \"'\" + j.replace(\"'\",\"\") + \"'\" if (type(j) == str) else j",
        "text += str(add) + ', '",
        "text = text[0:-2]",
        "self.cur.execute(\"\"\"INSERT INTO {0} (geom, {1})",
        "VALUES (ST_GeometryFromText('{2}', 4326), {3})",
        "\"\"\".format(tablename, ', '.join(names), wkt, text) )",
        "if count % 200000 == 0:",
        "self.conn.commit()",
        "self.conn.commit()",
        "stop = timeit.default_timer()",
        "print(\"time elapsed\", str(datetime.timedelta(seconds=stop - start)), \"sec\")"
    ],
    "docstrings": [
        "\"\"\"ALTER TABLE {0} RENAME {1} TO {2}\"\"\"",
        "'''SELECT pg_terminate_backend({0}) FROM pg_stat_activity \n        WHERE pid <> pg_backend_pid() AND datname = '{1}';'''",
        "'''select * from pg_stat_activity where datname = '{0}' '''",
        "'''select column_name from information_schema.columns where\n                              table_name='{0}';'''",
        "'''select * from {0} limit {1};'''",
        "\"\"\"SELECT relname, last_vacuum, last_autovacuum, last_analyze, last_autoanalyze  \n                                 FROM pg_stat_all_tables WHERE schemaname = '{0}'; \"\"\"",
        "\"\"\"COPY  {0}  TO  'D:\\Box_percorrenze\\{0}.csv'  \n                                 DELIMITER  ',' CSV HEADER\"\"\""
    ],
    "functions": [
        "close_connection",
        "reconnect",
        "get_dbname",
        "get_output",
        "send_psql",
        "change_col_name",
        "explain_psql",
        "kill_pid_process",
        "get_status_db",
        "get_column_name",
        "get_first_rows",
        "get_function_infos",
        "get_all_table_status",
        "create_csv_from_table",
        "get_size_table",
        "send_vacuum",
        "get_size_db",
        "get_size_all_table"
    ],
    "classes": [
        "myPostgresInterface"
    ]
}