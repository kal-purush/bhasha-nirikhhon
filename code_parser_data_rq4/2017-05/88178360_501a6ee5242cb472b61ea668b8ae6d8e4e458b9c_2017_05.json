{
    "identifiers": [
        "Http",
        "Headers",
        "Injectable",
        "Observable",
        "ConfigService",
        "Injectable",
        "category",
        "category",
        "category",
        "category",
        "category",
        "category",
        "category",
        "category",
        "category",
        "http",
        "config",
        "Headers",
        "slug",
        "slug",
        "slug",
        "name",
        "category",
        "category",
        "name",
        "res",
        "res",
        "categories",
        "categories",
        "category",
        "category",
        "slug",
        "slug",
        "Observable",
        "slug",
        "slug",
        "res",
        "res",
        "category",
        "category",
        "cb",
        "err",
        "cat",
        "cb",
        "err",
        "err",
        "err",
        "cat",
        "category",
        "category",
        "s",
        "cb",
        "cb",
        "category",
        "err",
        "category",
        "password",
        "cb",
        "err",
        "err",
        "err",
        "password",
        "cb",
        "cb",
        "category",
        "err",
        "category"
    ],
    "literals": [
        "'@angular/http'",
        "'@angular/core'",
        "'rxjs/Rx'",
        "'./config.service'",
        "string",
        "string",
        "''",
        "\"\"",
        "\"\"",
        "string",
        "'Content-Type'",
        "'application/json'",
        "\"Not implemented\"",
        "\"Already implemented\"",
        "'/v1/category'",
        "'/v1/category/'"
    ],
    "variables": [
        "cached",
        "category",
        "s",
        "category",
        "s"
    ],
    "comments": [
        "",
        "",
        "key is a slug",
        "",
        "check if already exist on cache and add in it if not the case",
        "slug -> \"url-isation\" of a string",
        "var cat=this.find({slug:slug});",
        "if (cat) {return cat.name;} else {return \"Inconnu\";}",
        "request with filter",
        ".catch;",
        "get c",
        "v√©rifie si dans le cache",
        "var loaded=Category.find({slug:slug});if (loaded){",
        "if(cb){cb(loaded);}",
        "return loaded;",
        "}",
        "var category=this, c=this.backend.get({category:slug},function() {",
        "//wrap = as Category",
        "category.wrap(s);",
        "if(cb){cb(category);}",
        "},err);",
        "return category;",
        "avec POST",
        "console.log(\"model\",this.photo)",
        "if (!err) { err = onerr; }\n    var category = this, s = this.backend.save({ category: this.slug }, this, function () {\n      category.wrap(s);\n      if (cb) { cb(category); }\n    }, err);\n    return category;"
    ],
    "docstrings": [],
    "functions": [
        "updateCache",
        "deleteCache",
        "addCache",
        "getCurrent",
        "findNameBySlug",
        "findBySlug",
        "findByGroup",
        "select",
        "get",
        "save",
        "create",
        "remove"
    ],
    "classes": [
        "Category",
        "CategoryService"
    ]
}