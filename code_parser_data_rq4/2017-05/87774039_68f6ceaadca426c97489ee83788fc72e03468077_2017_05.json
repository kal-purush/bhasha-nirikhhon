{
    "identifiers": [
        "Discord",
        "moment",
        "EventBot",
        "BotConfig",
        "ActionMap",
        "actions",
        "humanizeDate",
        "describe",
        "it",
        "describe",
        "it",
        "describe",
        "it",
        "EventBot",
        "actions",
        "config",
        "eb",
        "eb",
        "actions",
        "eb",
        "config",
        "describe",
        "it",
        "tests",
        "test",
        "humanizeDate",
        "test",
        "test",
        "test"
    ],
    "literals": [
        "\"mocha\"",
        "\"assert\"",
        "\"discord.js\"",
        "\"moment\"",
        "\"../bot\"",
        "\"../commands\"",
        "\"sanity check\"",
        "\"should pass\"",
        "\"sanity\"",
        "\"sanity\"",
        "\"create a new BotConfig\"",
        "\"should instantiate a BotConfig with the correct properties\"",
        "\"create a new EventBot\"",
        "\"should instantiate an EventBot with the correct properties\"",
        "\"a\"",
        "\"b\"",
        "\"c\"",
        "\"d\"",
        "\"testBot\"",
        "\"!testBot\"",
        "\"humanize event dates\"",
        "\"should humanize event dates and set the UTC offset\"",
        "string",
        "\"2017-04-03T22:30:00-07:00\"",
        "\"Tue Apr 4th, 12:30AM (-05:00)\"",
        "\"2017-04-20T12:00:00-00:00\"",
        "\"Thu Apr 20th, 8:00PM (+08:00)\"",
        "\"2017-04-20T12:00:00-05:00\"",
        "\"Thu Apr 20th, 5:00PM (+00:00)\"",
        "\"invalid date\""
    ],
    "variables": [
        "config",
        "eb",
        "tests"
    ],
    "comments": [],
    "docstrings": [
        "* Add tests for:\n * - onMessage (mock a Discord.Message, check that we get a response)\n * - getEvents (break out into useCache(lastFetched, maxAge): boolean function, unit test it)\n * - getEvents (integration test - spin up test server, hit it, return mocked results)"
    ],
    "functions": [],
    "classes": []
}