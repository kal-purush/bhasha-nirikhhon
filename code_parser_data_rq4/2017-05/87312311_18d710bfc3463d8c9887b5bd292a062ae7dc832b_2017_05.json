{
    "identifiers": [
        "numpy",
        "np",
        "spacy",
        "re",
        "keras",
        "models",
        "Sequential",
        "keras",
        "layers",
        "Dense",
        "Activation",
        "Dropout",
        "Flatten",
        "keras",
        "layers",
        "convolutional",
        "Conv1D",
        "keras",
        "layers",
        "pooling",
        "MaxPooling1D",
        "keras",
        "constraints",
        "maxnorm",
        "base_model",
        "BaseModel",
        "spacy",
        "load",
        "BaseModel",
        "append",
        "d",
        "row",
        "re",
        "compile",
        "re",
        "escape",
        "row",
        "re",
        "IGNORECASE",
        "name_re",
        "sub",
        "row",
        "nlp",
        "desc",
        "w",
        "strip",
        "w",
        "doc",
        "nlp",
        "vector",
        "doclist",
        "index",
        "ValueError",
        "i",
        "ind",
        "ind",
        "ind",
        "ind",
        "i",
        "i",
        "len",
        "doc",
        "append",
        "pad_vector",
        "append",
        "doc",
        "i",
        "vector",
        "np",
        "array",
        "get_row",
        "row",
        "index",
        "row",
        "d",
        "iterrows",
        "format",
        "cache",
        "fetch",
        "k",
        "get",
        "Sequential",
        "model",
        "add",
        "Conv1D",
        "input_shape",
        "model",
        "add",
        "MaxPooling1D",
        "model",
        "add",
        "Flatten",
        "model",
        "add",
        "Dense",
        "activation",
        "model",
        "add",
        "Dense",
        "n_out",
        "activation",
        "model"
    ],
    "literals": [
        "'en'",
        "\"epochs\"",
        "\"opt\"",
        "\"SGD\"",
        "\"bs\"",
        "\"lr\"",
        "\"n_words\"",
        "'name'",
        "\"THENAME\"",
        "'description'",
        "'.'",
        "\"THENAME\"",
        "'n_words'",
        "'n_words'",
        "\"conv/x/n_words={}\"",
        "'n_words'",
        "'relu'",
        "'sigmoid'"
    ],
    "variables": [
        "nlp",
        "version",
        "name_re",
        "desc",
        "doc",
        "doclist",
        "pad_vector",
        "ind",
        "ind",
        "k",
        "model"
    ],
    "comments": [
        "params = [",
        "{'opt': optimizers.SGD, 'epochs': 10, 'lr': 0.1, 'n_words': 3, 'hidden': [100]},",
        "{'opt': optimizers.SGD, 'epochs': 100, 'lr': 0.1, 'n_words': 3, 'hidden': [100]},",
        "{'opt': optimizers.SGD, 'epochs': 100, 'lr': 0.05, 'n_words': 3, 'hidden': [100]},",
        "{'opt': optimizers.SGD, 'epochs': 500, 'lr': 0.05, 'n_words': 3, 'hidden': [100]},",
        "]",
        "for epochs in [10, 100, 250]:",
        "for lr in [0.01, 0.05, 0.1]:",
        "for n_words in [2, 3, 5]:",
        "for l1 in [[10], [100], [1000]]:",
        "for l2 in [[], l1]:",
        "params.append({'opt': 'SGD', 'epochs': epochs, 'lr': lr, 'n_words': n_words, 'hidden': l1 + l2})",
        "for epochs in [250, 350]:",
        "for lr in [0.03]:",
        "for n_words in [10]:",
        "for l1 in [[1000], [1500], [2000]]:",
        "for nhidden in [2]:",
        "params.append({'bs': 256, 'opt': 'SGD', 'epochs': epochs, 'lr': lr, 'n_words': n_words, 'hidden': l1 * nhidden})",
        "params.append({'bs': 256, 'opt': 'SGD', 'epochs': 250, 'lr': 0.025, 'n_words': 5, 'hidden': [2000, 2000]})",
        "params.append({\"epochs\": 250, \"opt\": \"SGD\", \"bs\": 256, \"lr\": 0.05, \"n_words\": 10, \"hidden\": [1000, 1000]})",
        "params.append({\"epochs\": 250, \"opt\": \"SGD\", \"bs\": 256, \"lr\": 0.025, \"n_words\": 5, \"hidden\": [1000, 1000]})",
        "params.append({\"epochs\": 250, \"opt\": \"SGD\", \"bs\": 256, \"lr\": 0.025, \"n_words\": 10, \"hidden\": [1000, 1000, 1000]})",
        "params.append({\"epochs\": 1, \"opt\": \"SGD\", \"bs\": 256, \"lr\": 0.025, \"n_words\": 10, \"hidden\": [1000, 1000, 1000]})",
        "model.add(Dropout(self.params.get('dropout', 0)))",
        ", kernel_constraint=maxnorm(3)"
    ],
    "docstrings": [],
    "functions": [
        "get_x",
        "get_row",
        "get",
        "create_model"
    ],
    "classes": [
        "Model"
    ]
}