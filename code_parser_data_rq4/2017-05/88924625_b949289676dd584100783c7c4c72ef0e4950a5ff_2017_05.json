{
    "identifiers": [
        "math",
        "time",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "multiprocessing",
        "mp",
        "np",
        "zeros",
        "model",
        "Training_source",
        "Testing_source",
        "CrossValidation_source",
        "Training_source",
        "Testing_source",
        "CrossValidation_source",
        "open",
        "Training_source",
        "line",
        "fn",
        "line",
        "line",
        "split",
        "vlist1",
        "vlist1",
        "split",
        "item",
        "vlist",
        "xVariable",
        "append",
        "item",
        "TrainingSamples",
        "append",
        "xVariable",
        "vlist",
        "vlist",
        "TrainingLabels",
        "append",
        "label",
        "len",
        "TrainingSamples",
        "fn",
        "close",
        "model",
        "open",
        "Testing_source",
        "line",
        "fn",
        "line",
        "line",
        "split",
        "vlist1",
        "vlist1",
        "split",
        "item",
        "vlist",
        "xVariable",
        "append",
        "item",
        "TestingSampels",
        "append",
        "xVariable",
        "vlist",
        "vlist",
        "TestingLabels",
        "append",
        "label",
        "len",
        "TestingSampels",
        "fn",
        "close",
        "model",
        "open",
        "CrossValidation_source",
        "line",
        "fn",
        "line",
        "line",
        "split",
        "vlist1",
        "vlist1",
        "split",
        "item",
        "vlist",
        "xVariable",
        "append",
        "item",
        "CVSamples",
        "append",
        "xVariable",
        "vlist",
        "vlist",
        "CVLabels",
        "append",
        "label",
        "len",
        "TestingSampels",
        "fn",
        "close",
        "idx1",
        "alpha1",
        "idx2",
        "alpha2",
        "alpha_ini",
        "alpha_val",
        "b",
        "T",
        "C",
        "Step",
        "Max_iter",
        "Sigma",
        "Kernal_ini",
        "KernalType",
        "PolinomialR",
        "Polinomiald",
        "idx1",
        "alpha1",
        "alphas",
        "alpha1",
        "idx2",
        "alpha2",
        "alphas",
        "alpha2",
        "b",
        "b",
        "T",
        "T",
        "C",
        "C",
        "Step",
        "Step",
        "Max_iter",
        "Max_iter",
        "Sigma",
        "Sigma",
        "GaussinSigma",
        "PolinomialR",
        "PolinomialR",
        "PolinomailR",
        "Polinomiald",
        "Polinomiald",
        "Polinomaild",
        "KernalType",
        "KernalType",
        "KernalType",
        "Kernal_ini",
        "len",
        "TrainingSamples",
        "np",
        "ones",
        "shape",
        "SampleCount",
        "SampleCount",
        "idx1",
        "SampleCount",
        "stars",
        "stars",
        "idx2",
        "SampleCount",
        "TrainingSamples",
        "idx1",
        "TrainingSamples",
        "idx2",
        "KernalType",
        "_Cal_Linear_Kernal",
        "x1",
        "x2",
        "KernalType",
        "_Cal_Gaussin_Kernal",
        "x1",
        "x2",
        "Sigma",
        "_Cal_Polinomial_Kernal",
        "x1",
        "x2",
        "PolinomialR",
        "Polinomiald",
        "KernalCatch_Matrix",
        "itemset",
        "idx1",
        "idx2",
        "KernalVal",
        "alpha_ini",
        "len",
        "TrainingLabels",
        "alpha_val",
        "alpha_val",
        "SampleCount",
        "len",
        "alphas",
        "isinstance",
        "alpha_val",
        "alpha_val",
        "alpha_val",
        "SampleCount",
        "alpha_val",
        "isinstance",
        "alpha_val",
        "len",
        "alphas",
        "len",
        "alpha_val",
        "alpha_val",
        "alpha_val",
        "SampleCount",
        "idx1",
        "E1",
        "KernalType",
        "KernalType",
        "KernalType",
        "_Find_Alpha2_Nonbound",
        "idx1",
        "E1",
        "KernalType",
        "found",
        "_Find_Alpha2_MaxE",
        "idx1",
        "E1",
        "KernalType",
        "found",
        "alpha2",
        "eta",
        "idx1",
        "E1",
        "KernalType",
        "KernalType",
        "KernalType",
        "idx1",
        "idx2",
        "len",
        "alphas",
        "alpha1",
        "idx2",
        "_Cal_eta",
        "idx1",
        "idx2",
        "KernalType",
        "eta_tmp",
        "eta_tmp",
        "_Cal_Ei",
        "idx2",
        "KernalType",
        "math",
        "fabs",
        "E1",
        "E2",
        "tmp",
        "gap",
        "tmp",
        "idx2",
        "eta_tmp",
        "found",
        "alpha2",
        "eta",
        "idx1",
        "E1",
        "KernalType",
        "KernalType",
        "KernalType",
        "idx1",
        "idx2",
        "len",
        "alphas",
        "alpha1",
        "idx2",
        "alphas",
        "idx2",
        "alphas",
        "idx2",
        "C",
        "_Cal_eta",
        "idx1",
        "idx2",
        "KernalType",
        "eta_tmp",
        "eta_tmp",
        "_Cal_Ei",
        "idx2",
        "KernalType",
        "math",
        "fabs",
        "E1",
        "E2",
        "tmp",
        "gap",
        "tmp",
        "idx2",
        "eta_tmp",
        "found",
        "alpha2",
        "eta",
        "x2",
        "KernalType",
        "Mode",
        "KernalType",
        "KernalType",
        "Mode",
        "Mode",
        "_Fetch_Kernal",
        "x2",
        "Mode",
        "x1",
        "TrainingSamples",
        "val",
        "append",
        "_Cal_Kernal",
        "x1",
        "x2",
        "KernalType",
        "np",
        "array",
        "val",
        "np",
        "array",
        "TrainingLabels",
        "np",
        "array",
        "alphas",
        "sum",
        "alpha",
        "y",
        "Kernal_Val",
        "b",
        "round",
        "prediction_value",
        "idx1",
        "idx2",
        "idx2",
        "KernalCatch_Matrix",
        "idx1",
        "KernalCatch_Matrix",
        "idx1",
        "idx2",
        "x1",
        "x2",
        "mode",
        "sigma",
        "R",
        "d",
        "mode",
        "KernalType",
        "sigma",
        "GaussinSigma",
        "R",
        "PolinomailR",
        "d",
        "Polinomaild",
        "mode",
        "_Cal_Linear_Kernal",
        "x1",
        "x2",
        "mode",
        "_Cal_Gaussin_Kernal",
        "x1",
        "x2",
        "sigma",
        "mode",
        "_Cal_Polinomial_Kernal",
        "x1",
        "x2",
        "R",
        "d",
        "x1",
        "x2",
        "np",
        "dot",
        "x1",
        "x2",
        "round",
        "val",
        "x1",
        "x2",
        "sigma",
        "np",
        "array",
        "x1",
        "np",
        "array",
        "x2",
        "math",
        "exp",
        "np",
        "sum",
        "np",
        "square",
        "x1",
        "x2",
        "sigma",
        "sigma",
        "round",
        "val",
        "x1",
        "x2",
        "R",
        "d",
        "math",
        "pow",
        "_Cal_Linear_Kernal",
        "x1",
        "x2",
        "R",
        "d",
        "round",
        "val",
        "idx",
        "KernalType",
        "KernalType",
        "KernalType",
        "_Cal_F",
        "idx",
        "KernalType",
        "predict",
        "TrainingLabels",
        "idx",
        "Eidx_Training_list",
        "abs",
        "Eidx",
        "round",
        "Eidx",
        "idx1",
        "idx2",
        "new_alpha2",
        "TrainingLabels",
        "idx1",
        "TrainingLabels",
        "idx2",
        "alphas",
        "idx1",
        "alphas",
        "idx2",
        "old_alpha1",
        "y1",
        "y2",
        "old_alpha2",
        "new_alpha2",
        "round",
        "new_alpha1",
        "idx1",
        "idx2",
        "E1",
        "eta",
        "C",
        "Step",
        "KernalType",
        "KernalType",
        "KernalType",
        "C",
        "C",
        "Step",
        "Step",
        "TrainingLabels",
        "idx1",
        "TrainingLabels",
        "idx2",
        "alphas",
        "idx1",
        "alphas",
        "idx2",
        "_Cal_Ei",
        "idx2",
        "KernalType",
        "old_alpha2",
        "y2",
        "E1",
        "E2",
        "eta",
        "y1",
        "y2",
        "max",
        "old_alpha2",
        "old_alpha1",
        "C",
        "min",
        "C",
        "old_alpha2",
        "old_alpha1",
        "max",
        "old_alpha2",
        "old_alpha1",
        "min",
        "C",
        "C",
        "old_alpha1",
        "old_alpha2",
        "L",
        "H",
        "valid",
        "old_alpha2",
        "new_alpha2",
        "H",
        "H",
        "new_alpha2",
        "L",
        "L",
        "new_alpha2",
        "abs",
        "clipped_new_alpha2",
        "old_alpha2",
        "Step",
        "valid",
        "round",
        "clipped_new_alpha2",
        "idx1",
        "idx2",
        "KernalType",
        "KernalType",
        "KernalType",
        "_Fetch_Kernal",
        "idx1",
        "idx1",
        "_Fetch_Kernal",
        "idx2",
        "idx2",
        "_Fetch_Kernal",
        "idx1",
        "idx2",
        "K11",
        "K22",
        "K12",
        "round",
        "eta",
        "idx1",
        "idx2",
        "new_alpha1",
        "new_alpha2",
        "KernalType",
        "C",
        "KernalType",
        "KernalType",
        "C",
        "C",
        "b",
        "alphas",
        "idx1",
        "alphas",
        "idx2",
        "TrainingLabels",
        "idx1",
        "TrainingLabels",
        "idx2",
        "_Fetch_Kernal",
        "idx1",
        "idx1",
        "_Fetch_Kernal",
        "idx1",
        "idx2",
        "_Fetch_Kernal",
        "idx2",
        "idx2",
        "_Fetch_Kernal",
        "idx2",
        "idx1",
        "_Cal_Ei",
        "idx1",
        "KernalType",
        "_Cal_Ei",
        "idx2",
        "KernalType",
        "old_alpha1",
        "new_alpha1",
        "y1",
        "K11",
        "old_alpha2",
        "new_alpha2",
        "y2",
        "K21",
        "E1",
        "old_b",
        "old_alpha1",
        "new_alpha1",
        "y1",
        "K12",
        "old_alpha2",
        "new_alpha2",
        "y2",
        "K22",
        "E2",
        "old_b",
        "new_alpha1",
        "new_alpha1",
        "C",
        "new_alpha1",
        "new_alpha2",
        "new_alpha2",
        "C",
        "new_alpha2",
        "new_b1",
        "new_b2",
        "round",
        "new_b",
        "source",
        "Diff_mode",
        "KernalType",
        "Model",
        "source",
        "Diff_mode",
        "source",
        "TrainingSamples",
        "TrainingLabels",
        "source",
        "CVSamples",
        "CVLabels",
        "source",
        "TestingSampels",
        "TestingLabels",
        "Diff_mode",
        "source",
        "len",
        "TrainingLabels",
        "i",
        "len",
        "samples",
        "_Cal_F",
        "i",
        "KernalType",
        "Lidx_Training_list",
        "abs",
        "pre_label",
        "labels",
        "i",
        "sum",
        "Lidx_Training_list",
        "Diff_mode",
        "source",
        "len",
        "CVLabels",
        "i",
        "len",
        "samples",
        "_Cal_F",
        "samples",
        "i",
        "KernalType",
        "Mode",
        "Lidx_CV_list",
        "abs",
        "pre_label",
        "labels",
        "i",
        "sum",
        "Lidx_CV_list",
        "C",
        "T",
        "Loop",
        "KernalType",
        "Step",
        "Sigma",
        "Model_File",
        "Max_iter",
        "C",
        "C",
        "T",
        "T",
        "Loop",
        "KernalType",
        "KernalType",
        "Step",
        "Step",
        "Sigma",
        "GaussinSigma",
        "Model_File",
        "Max_iter",
        "Max_iter",
        "alphas",
        "alpha1_idx",
        "alphas",
        "alpha2_idx",
        "len",
        "TrainingLabels",
        "passes",
        "Loop",
        "iter",
        "iter",
        "alpha1_idx",
        "len",
        "alphas",
        "TrainingLabels",
        "alpha1_idx",
        "_Cal_Ei",
        "alpha1_idx",
        "KernalType",
        "stars",
        "stars",
        "old_alpha1",
        "C",
        "y1",
        "E1",
        "T",
        "old_alpha1",
        "y1",
        "E1",
        "T",
        "_Find_Alpha2",
        "alpha1_idx",
        "E1",
        "KernalType",
        "found",
        "_Cal_Alpha2",
        "alpha1_idx",
        "alpha2_idx",
        "E1",
        "eta",
        "C",
        "Step",
        "KernalType",
        "valid",
        "updated_alpha",
        "_Cal_Alpha1",
        "alpha1_idx",
        "alpha2_idx",
        "clipped_new_alpha2",
        "_Cal_b",
        "alpha1_idx",
        "alpha2_idx",
        "new_alpha1",
        "clipped_new_alpha2",
        "KernalType",
        "C",
        "_Update_Variables",
        "idx1",
        "alpha1_idx",
        "alpha1",
        "new_alpha1",
        "idx2",
        "alpha2_idx",
        "alpha2",
        "clipped_new_alpha2",
        "b",
        "new_b",
        "iter",
        "Max_iter",
        "updated_alpha",
        "passes",
        "alpha",
        "alphas",
        "alpha",
        "j",
        "iter",
        "j",
        "iter",
        "updated_alpha",
        "alphas",
        "sum",
        "Eidx_Training_list",
        "_Cal_Sum_Errors",
        "source",
        "Diff_mode",
        "KernalType",
        "KernalType",
        "Write_Model",
        "Model_File",
        "destination",
        "destination",
        "open",
        "destination",
        "fn",
        "write",
        "C",
        "fn",
        "write",
        "GaussinSigma",
        "item",
        "alphas",
        "fn",
        "write",
        "item",
        "destination",
        "fn",
        "close",
        "Model_File",
        "Model_File",
        "open",
        "Model_File",
        "fn",
        "readline",
        "fn",
        "readline",
        "line",
        "fn",
        "alpha_val",
        "append",
        "line",
        "_Update_Variables",
        "C",
        "C",
        "Sigma",
        "GaussinSigma",
        "alpha_val",
        "alpha_val",
        "alpha_ini",
        "KernalType",
        "Output",
        "From",
        "Result",
        "KernalType",
        "KernalType",
        "Output",
        "From",
        "Result",
        "PredictResult",
        "x",
        "len",
        "CVSamples",
        "stars",
        "stars",
        "_Cal_F",
        "CVSamples",
        "x",
        "KernalType",
        "Mode",
        "predict",
        "predict_label",
        "append",
        "val",
        "Eidx_CV",
        "abs",
        "predict",
        "CVLabels",
        "x",
        "_Cal_Sum_Errors",
        "source",
        "Diff_mode",
        "KernalType",
        "KernalType",
        "predict_label",
        "PredictResult",
        "Performance_Diag",
        "From",
        "Result",
        "Model",
        "Write_Test",
        "predict_label",
        "Precision",
        "Recall",
        "destination",
        "Output",
        "Model",
        "KernalType",
        "Output",
        "From",
        "Result",
        "KernalType",
        "KernalType",
        "Output",
        "From",
        "Result",
        "PredictResult",
        "x",
        "TestingSampels",
        "stars",
        "stars",
        "_Cal_F",
        "x",
        "KernalType",
        "Mode",
        "predict_label",
        "append",
        "val",
        "predict_label",
        "Performance_Diag",
        "From",
        "Result",
        "Model",
        "Write_Test",
        "predict_label",
        "Precision",
        "Recall",
        "destination",
        "Output",
        "Model",
        "predict_label",
        "Precision",
        "Recall",
        "destination",
        "Model",
        "Model",
        "TestingLabels",
        "CVLabels",
        "destination",
        "open",
        "destination",
        "fn",
        "write",
        "i",
        "len",
        "predict_label",
        "fn",
        "write",
        "predict_label",
        "i",
        "y_labels",
        "i",
        "fn",
        "write",
        "Precision",
        "fn",
        "write",
        "Recall",
        "destination",
        "fn",
        "close",
        "From",
        "Result",
        "Model",
        "Model",
        "Model",
        "TestingLabels",
        "Model",
        "CVLabels",
        "From",
        "From",
        "Result",
        "PredictResult",
        "i",
        "len",
        "Result",
        "Result",
        "i",
        "labels",
        "i",
        "TP",
        "FP",
        "labels",
        "i",
        "TN",
        "FN",
        "From",
        "Result",
        "open",
        "Result",
        "fn",
        "readline",
        "line",
        "fn",
        "line",
        "line",
        "split",
        "vlist1",
        "vlist1",
        "split",
        "vlist",
        "vlist",
        "vlist",
        "TestingLabels",
        "i",
        "TP",
        "FP",
        "TestingLabels",
        "i",
        "TN",
        "FN",
        "i",
        "TP",
        "FP",
        "round",
        "TP",
        "TP",
        "FP",
        "TP",
        "FN",
        "round",
        "TP",
        "TP",
        "FN",
        "round",
        "TP",
        "TN",
        "TP",
        "FP",
        "TN",
        "FN",
        "TP",
        "FP",
        "TN",
        "FN",
        "Precision",
        "Recall",
        "Overall_Accuracy",
        "Precision",
        "Recall",
        "Overall_Accuracy",
        "model",
        "base_parameter",
        "model",
        "len",
        "ModelLearningCurve",
        "i",
        "len",
        "ModelLearningCurve",
        "yTrain",
        "append",
        "ModelLearningCurve",
        "i",
        "yCV",
        "append",
        "ModelLearningCurve",
        "i",
        "x",
        "yTrain",
        "yCV",
        "plt",
        "plot",
        "x",
        "yTrain",
        "c",
        "label",
        "plt",
        "plot",
        "x",
        "yCV",
        "c",
        "label",
        "i",
        "j",
        "x",
        "yTrain",
        "plt",
        "annotate",
        "j",
        "xy",
        "i",
        "j",
        "i",
        "j",
        "x",
        "yCV",
        "plt",
        "annotate",
        "j",
        "xy",
        "i",
        "j",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "show",
        "raw_input",
        "profile",
        "pstats",
        "batch_test_C_Sigma",
        "SVMClassifier",
        "model",
        "LoadData",
        "Training_source",
        "CrossValidation_source",
        "model",
        "_Update_Variables",
        "C",
        "Sigma",
        "T",
        "Step",
        "KernalType",
        "alpha_ini",
        "alpha_val",
        "Kernal_ini",
        "Max_iter",
        "model",
        "Train_Model",
        "Loop",
        "Model_File",
        "model",
        "Load_Model",
        "model",
        "Cross_Validate_Model",
        "KernalType",
        "Output",
        "model",
        "Performance_Diag",
        "Model",
        "Precesion",
        "Recall",
        "Accuracy",
        "model",
        "Eidx_Training",
        "model",
        "Eidx_CV",
        "SVMClassifier",
        "model",
        "LoadData",
        "Training_source",
        "CrossValidation_source",
        "open",
        "each_C",
        "C",
        "each_Sigma",
        "Sigma",
        "model",
        "_Update_Variables",
        "C",
        "each_C",
        "Sigma",
        "each_Sigma",
        "T",
        "Step",
        "KernalType",
        "alpha_ini",
        "alpha_val",
        "Kernal_ini",
        "model",
        "Train_Model",
        "Loop",
        "Model_File",
        "model",
        "Load_Model",
        "model",
        "Cross_Validate_Model",
        "KernalType",
        "Output",
        "model",
        "Performance_Diag",
        "Model",
        "model",
        "ModelLearningCurve",
        "append",
        "model",
        "Eidx_Training",
        "model",
        "Eidx_CV",
        "fn",
        "writelines",
        "each_C",
        "each_Sigma",
        "Precesion",
        "Recall",
        "Accuracy",
        "model",
        "Eidx_Training",
        "model",
        "Eidx_CV",
        "fn",
        "close",
        "model",
        "Plot_Learning_Curve",
        "SVMClassifier",
        "model",
        "LoadData",
        "Training_source",
        "CrossValidation_source",
        "each_C",
        "C",
        "each_Sigma",
        "Sigma",
        "mp",
        "Process",
        "target",
        "task",
        "args",
        "each_C",
        "each_Sigma",
        "processes",
        "append",
        "p",
        "processes_pool",
        "tasks",
        "processes",
        "processors",
        "processors",
        "model",
        "Plot_Learning_Curve",
        "each_C",
        "each_Sigma",
        "SVMClassifier",
        "open",
        "model",
        "_Update_Variables",
        "C",
        "each_C",
        "Sigma",
        "each_Sigma",
        "T",
        "Step",
        "KernalType",
        "alpha_ini",
        "alpha_val",
        "Kernal_ini",
        "model",
        "Train_Model",
        "Loop",
        "Model_File",
        "model",
        "Load_Model",
        "model",
        "Cross_Validate_Model",
        "KernalType",
        "Output",
        "model",
        "Performance_Diag",
        "Model",
        "model",
        "ModelLearningCurve",
        "append",
        "model",
        "Eidx_Training",
        "model",
        "Eidx_CV",
        "fn",
        "writelines",
        "each_C",
        "each_Sigma",
        "Precesion",
        "Recall",
        "Accuracy",
        "model",
        "Eidx_Training",
        "model",
        "Eidx_CV",
        "fn",
        "close",
        "SVMClassifier",
        "open",
        "i",
        "len",
        "TrainingSource",
        "model",
        "LoadData",
        "Training_source",
        "TrainingSource",
        "i",
        "CrossValidation_source",
        "CVSource",
        "i",
        "model",
        "_Update_Variables",
        "C",
        "Sigma",
        "T",
        "Step",
        "KernalType",
        "alpha_ini",
        "alpha_val",
        "Kernal_ini",
        "Max_iter",
        "model",
        "Train_Model",
        "Loop",
        "Model_File",
        "model",
        "Load_Model",
        "model",
        "Cross_Validate_Model",
        "KernalType",
        "Output",
        "model",
        "Performance_Diag",
        "Model",
        "model",
        "ModelLearningCurve",
        "append",
        "round",
        "model",
        "Eidx_Training",
        "round",
        "model",
        "Eidx_CV",
        "fn",
        "writelines",
        "Precesion",
        "Recall",
        "Accuracy",
        "model",
        "Eidx_Training",
        "model",
        "Eidx_CV",
        "fn",
        "close",
        "model",
        "Plot_Learning_Curve",
        "SVMClassifier",
        "open",
        "i",
        "len",
        "TrainingSource",
        "model",
        "LoadData",
        "Training_source",
        "TrainingSource",
        "i",
        "CrossValidation_source",
        "CVSource",
        "i",
        "model",
        "_Update_Variables",
        "C",
        "Sigma",
        "T",
        "Step",
        "KernalType",
        "alpha_ini",
        "alpha_val",
        "Kernal_ini",
        "Max_iter",
        "model",
        "Train_Model",
        "Loop",
        "Model_File",
        "model",
        "Load_Model",
        "model",
        "Cross_Validate_Model",
        "KernalType",
        "Output",
        "model",
        "Performance_Diag",
        "Model",
        "model",
        "ModelLearningCurve",
        "append",
        "round",
        "model",
        "Lidx_Training",
        "round",
        "model",
        "Lidx_CV",
        "fn",
        "writelines",
        "Precesion",
        "Recall",
        "Accuracy",
        "model",
        "Eidx_Training",
        "model",
        "Eidx_CV",
        "model",
        "Lidx_Training",
        "model",
        "Lidx_CV",
        "fn",
        "close",
        "model",
        "Plot_Learning_Curve",
        "tasks",
        "processors",
        "len",
        "tasks",
        "task_total",
        "processors",
        "task_total",
        "task_finished",
        "i",
        "loop_total",
        "j",
        "processors",
        "j",
        "processors",
        "i",
        "k",
        "task_total",
        "tasks",
        "k",
        "start",
        "j",
        "j",
        "processors",
        "j",
        "processors",
        "i",
        "k",
        "task_total",
        "tasks",
        "k",
        "join",
        "j",
        "alive",
        "j",
        "processors",
        "j",
        "processors",
        "i",
        "k",
        "task_total",
        "tasks",
        "k",
        "is_alive",
        "time",
        "sleep",
        "i",
        "main"
    ],
    "literals": [
        "\"/home/marshao/SVMClassifier/\"",
        "'g'",
        "'TrainingSamples2.csv'",
        "'TestingSamples.csv'",
        "'CVSamples.csv'",
        "\"r\"",
        "\"/r\"",
        "\"\"",
        "\",\"",
        "\"Loaded %s Training Samples\"",
        "'Testing'",
        "'r'",
        "\"/r\"",
        "\"\"",
        "\",\"",
        "\"Loaded %s Testing Samples\"",
        "'CV'",
        "'r'",
        "\"/r\"",
        "\"\"",
        "\",\"",
        "\"Loaded %s CV Samples\"",
        "\"System is initializing Kernal Catch:\"",
        "\"*\"",
        "''",
        "'l'",
        "'g'",
        "''",
        "\"Model does not match with Training Samples.\"",
        "\"   eta %s should not be less than 0.\"",
        "\"   eta %s should not be less than 0.\"",
        "'Tr'",
        "'Tr'",
        "'Te'",
        "\"Wrong Mode in Prediction\"",
        "'l'",
        "'g'",
        "'p'",
        "\"No such kernal type, kernal must be in l/g/p\"",
        "'Train'",
        "'Lidx'",
        "'Train'",
        "'CV'",
        "'Test'",
        "'No such model'",
        "'Lidx'",
        "'Train'",
        "'Lidx'",
        "'CV'",
        "'Te'",
        "'SVMModel.csv'",
        "\"Iteration %s is start\"",
        "\"--------------------------------------------------------------------\"",
        "\"*\"",
        "''",
        "''",
        "\"In iteration %s, no more alphas be updated, in total %s alphas be updated\"",
        "\"In Iteraton %s, %s alphas has been updated\"",
        "\"____________________________________________________\"",
        "\"\"",
        "'Train'",
        "'Lidx'",
        "'SVMModel.csv'",
        "\"w\"",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "'Model has been writen to %s'",
        "'SVMModel.csv'",
        "'r'",
        "'SVMCVTest.csv'",
        "'l'",
        "\"Model Cross Validation Process is started:\"",
        "\"--------------------------------------------------------\"",
        "\"*\"",
        "''",
        "'Te'",
        "''",
        "\"Model Prediction is completed\"",
        "'CV'",
        "'Lidx'",
        "'C'",
        "'C'",
        "'SVMTest.csv'",
        "'l'",
        "\"Model Prediction is started:\"",
        "\"--------------------------------------------------------\"",
        "\"*\"",
        "''",
        "'Te'",
        "''",
        "\"Model Prediction is completed\"",
        "'T'",
        "'T'",
        "'T'",
        "'T'",
        "'SVMTest.csv'",
        "\"w\"",
        "\"Prediciton_Label,Test_Label\\n\"",
        "','",
        "\"\\n\"",
        "\"Precision,%s \\n\"",
        "\"Recall,%s \\n\"",
        "'Test Result has been writen to %s'",
        "'T'",
        "'T'",
        "'C'",
        "'No Such Model in Performance Diag'",
        "'l'",
        "'l'",
        "'f'",
        "'SVMTest.csv'",
        "'r'",
        "\"/r\"",
        "\"\"",
        "\",\"",
        "'Precision'",
        "'Recall'",
        "\"No such option\"",
        "\"TP=%s, FP=%s, TN=%s, FN=%s, Precision Rate is %s and Recall Rate is %s, Overall Accurate is %s\"",
        "'Parameter'",
        "'ob-'",
        "'g'",
        "u'TrainingError'",
        "'ob-'",
        "'r'",
        "u'CVError'",
        "u'Number of Parameters'",
        "u'Sum of Errors'",
        "\"Press any key to continue\"",
        "'CV'",
        "'TrainingLO.csv'",
        "'CVLO.csv'",
        "'g'",
        "'StockTrainingModel2.csv'",
        "'StockTrainingModel2.csv'",
        "'g'",
        "'StockTest2.csv'",
        "'C'",
        "'C: %s,  Sigma: %s, Precesion: %s, Recall: %s, Accuracy: %s, Eidx_Training: %s, Eidx_CV: %s \\n'",
        "'CV'",
        "'TrainingLO.csv'",
        "'CVLO.csv'",
        "'StockMultiModelResults.csv'",
        "\"w+\"",
        "'g'",
        "'StockTrainingModel2.csv'",
        "'StockTrainingModel2.csv'",
        "'g'",
        "'StockTest2.csv'",
        "'C'",
        "'C: %s,  Sigma: %s, Precesion: %s, Recall: %s, Accuracy: %s, Eidx_Training: %s, Eidx_CV: %s \\n'",
        "'CV'",
        "'TrainingLO.csv'",
        "'CVLO.csv'",
        "'StockMultiModelResults.csv'",
        "\"w+\"",
        "'g'",
        "'StockTrainingModel2.csv'",
        "'StockTrainingModel2.csv'",
        "'g'",
        "'StockTest2.csv'",
        "'C'",
        "'C: %s,  Sigma: %s, Precesion: %s, Recall: %s, Accuracy: %s, Eidx_Training: %s, Eidx_CV: %s \\n'",
        "'TrainingHO.csv'",
        "'TrainingLO.csv'",
        "'CVHO.csv'",
        "'CVLO.csv'",
        "'StockMultiParameterResults.csv'",
        "\"w+\"",
        "'CV'",
        "'g'",
        "'StockMultiParameterModel1.csv'",
        "'StockMultiParameterModel1.csv'",
        "'g'",
        "'StockMultiParameterTest1.csv'",
        "'C'",
        "'C: %s,  Sigma: %s, Precesion: %s, Recall: %s, Accuracy: %s, Eidx_Training: %s, Eidx_CV: %s \\n'",
        "'Training_100-30.csv'",
        "'Training_150-30.csv'",
        "'Training_200-30.csv'",
        "'Training_250-30.csv'",
        "'Training_298-30.csv'",
        "'CV_100-30.csv'",
        "'CV_100-30.csv'",
        "'CV_100-30.csv'",
        "'CV_100-30.csv'",
        "'CV_100-30.csv'",
        "'StockSampleSizesResults.csv'",
        "\"w+\"",
        "'CV'",
        "'g'",
        "'StockSampleSizesModel1.csv'",
        "'StockSampleSizesModel1.csv'",
        "'g'",
        "'StockSampleSizesTest1.csv'",
        "'C'",
        "'C: %s,  Sigma: %s, Precesion: %s, Recall: %s, Accuracy: %s, Eidx_Training: %s, Eidx_CV: %s, Lidx_Training: %s, Lidx_CV: %s\\n'",
        "'__main__'"
    ],
    "variables": [
        "source_path",
        "alphas",
        "b",
        "TrainingSamples",
        "TrainingLabels",
        "CVSamples",
        "CVLabels",
        "TestingSampels",
        "TestingLabels",
        "predicts",
        "T",
        "C",
        "Step",
        "Max_iter",
        "Models_Dict",
        "KernalType",
        "KernalCatch_Dict",
        "KernalCatch_Matrix",
        "GaussinSigma",
        "PolinomailR",
        "Polinomaild",
        "alpha1Idx",
        "alpha2Idx",
        "PredictResult",
        "ModelLearningCurve",
        "Eidx_Training_list",
        "Lidx_Training_list",
        "Eidx_Training",
        "Lidx_Training",
        "Eidx_CV",
        "Lidx_CV",
        "Training_source",
        "Testing_source",
        "CrossValidation_source",
        "TrainingSamples",
        "TrainingLabels",
        "CVSamples",
        "CVLabels",
        "TestingSampels",
        "TestingLabels",
        "predicts",
        "Eidx_Training_list",
        "fn",
        "xVariable",
        "line",
        "vlist1",
        "vlist",
        "label",
        "label",
        "fn",
        "xVariable",
        "line",
        "vlist1",
        "vlist",
        "label",
        "label",
        "fn",
        "xVariable",
        "line",
        "vlist1",
        "vlist",
        "label",
        "label",
        "idx1",
        "idx2",
        "b",
        "T",
        "C",
        "Step",
        "Max_iter",
        "GaussinSigma",
        "Sigma",
        "PolinomailR",
        "PolinomialR",
        "Polinomaild",
        "Polinomiald",
        "KernalType",
        "KernalType",
        "stars",
        "SampleCount",
        "KernalCatch_Matrix",
        "stars",
        "x1",
        "x2",
        "KernalVal",
        "KernalVal",
        "KernalVal",
        "SampleCount",
        "alpha_val",
        "alphas",
        "alphas",
        "alphas",
        "alphas",
        "alphas",
        "alphas",
        "KernalType",
        "found",
        "alpha2",
        "eta",
        "found",
        "alpha2",
        "eta",
        "KernalType",
        "alpha1",
        "alpha2",
        "gap",
        "eta",
        "found",
        "eta_tmp",
        "E2",
        "tmp",
        "gap",
        "alpha2",
        "eta",
        "found",
        "KernalType",
        "alpha1",
        "alpha2",
        "gap",
        "eta",
        "found",
        "eta_tmp",
        "E2",
        "tmp",
        "gap",
        "alpha2",
        "eta",
        "found",
        "KernalType",
        "Mode",
        "val",
        "Kernal_Val",
        "Kernal_Val",
        "y",
        "alpha",
        "prediction_value",
        "mode",
        "sigma",
        "R",
        "d",
        "val",
        "x1",
        "x2",
        "val",
        "val",
        "KernalType",
        "predict",
        "Eidx",
        "idx",
        "y1",
        "y2",
        "old_alpha1",
        "old_alpha2",
        "new_alpha1",
        "KernalType",
        "C",
        "Step",
        "y1",
        "y2",
        "old_alpha1",
        "old_alpha2",
        "L",
        "H",
        "valid",
        "E2",
        "new_alpha2",
        "L",
        "H",
        "L",
        "H",
        "valid",
        "clipped_new_alpha2",
        "clipped_new_alpha2",
        "clipped_new_alpha2",
        "valid",
        "KernalType",
        "K11",
        "K22",
        "K12",
        "eta",
        "KernalType",
        "C",
        "old_b",
        "old_alpha1",
        "old_alpha2",
        "y1",
        "y2",
        "K11",
        "K12",
        "K22",
        "K21",
        "E1",
        "E2",
        "new_b1",
        "new_b2",
        "new_b",
        "new_b",
        "new_b",
        "source",
        "Diff_mode",
        "samples",
        "labels",
        "samples",
        "labels",
        "samples",
        "labels",
        "Lidx_Training_list",
        "pre_label",
        "pre_label",
        "i",
        "Lidx_Training",
        "Lidx_CV_list",
        "pre_label",
        "pre_label",
        "i",
        "Lidx_CV",
        "C",
        "T",
        "Loop",
        "KernalType",
        "Step",
        "sigma",
        "Model_File",
        "Max_iter",
        "alpha1_idx",
        "alpha2_idx",
        "old_alpha1",
        "old_alpha2",
        "Eidx_Training_list",
        "iter",
        "passes",
        "stars",
        "updated_alpha",
        "y1",
        "E1",
        "stars",
        "done",
        "found",
        "alpha2_idx",
        "eta",
        "valid",
        "clipped_new_alpha2",
        "new_alpha1",
        "new_b",
        "j",
        "passes",
        "Eidx_Training",
        "destination",
        "fn",
        "Model_File",
        "fn",
        "C",
        "GaussinSigma",
        "alpha_val",
        "KernalType",
        "Output",
        "From",
        "Result",
        "predict_label",
        "stars",
        "Eidx_CV",
        "stars",
        "predict",
        "val",
        "val",
        "PredictResult",
        "Result",
        "Precision",
        "Recall",
        "Accuracy",
        "KernalType",
        "Output",
        "From",
        "Result",
        "predict_label",
        "stars",
        "stars",
        "val",
        "val",
        "PredictResult",
        "Precision",
        "Recall",
        "Accuracy",
        "y_labels",
        "y_labels",
        "destination",
        "fn",
        "TP",
        "FP",
        "FN",
        "TN",
        "Model",
        "labels",
        "labels",
        "From",
        "Result",
        "Result",
        "fn",
        "i",
        "line",
        "vlist1",
        "vlist",
        "Precision",
        "Precision",
        "Recall",
        "Recall",
        "Overall_Accuracy",
        "model",
        "base_parameter",
        "yTrain",
        "yCV",
        "x",
        "programPause",
        "model",
        "Precesion",
        "Recall",
        "Accuracy",
        "model",
        "Sigma",
        "C",
        "fn",
        "Precesion",
        "Recall",
        "Accuracy",
        "model",
        "Sigma",
        "C",
        "processors",
        "processes",
        "index_beg",
        "p",
        "model",
        "fn",
        "Precesion",
        "Recall",
        "Accuracy",
        "model",
        "TrainingSource",
        "CVSource",
        "fn",
        "Precesion",
        "Recall",
        "Accuracy",
        "model",
        "TrainingSource",
        "CVSource",
        "fn",
        "Precesion",
        "Recall",
        "Accuracy",
        "task_total",
        "loop_total",
        "alive",
        "task_finished",
        "task_alive",
        "task_remain",
        "count",
        "i",
        "k",
        "k",
        "n",
        "alive",
        "k",
        "alive"
    ],
    "comments": [
        "! /usr/env python",
        "-*- coding: utf8 -*-",
        "list of langarange multipliers of Samples",
        "b for determine function",
        "Matrix of Training Sample",
        "Matrix of Training Labels",
        "Matrix of CV samples",
        "Matrix of test samples",
        "Marix of testing labels",
        "Matrix of predicts",
        "Tolerance(Accuracy) of System",
        "Penotal Coefficients",
        "Min step length of alpha1",
        "Max loop time",
        "Dictonary to Store Models",
        "predefine the Kernal Type is linear Kernal",
        "Kernal Catch Values Dictionary",
        "Kernal Catch Values Matrix",
        "Define a default value of Delta for Gaussin Kernal",
        "Default value of Polinomail Kernal R",
        "Default value of Polinomail Kernal d",
        "Index of Alpha 1",
        "Index of Alpha 2",
        "List to save predictions",
        "list to catch Eidx of Training Set for each model",
        "A list to catch Eidx values of Train samples",
        "Reset all sample catches to 0",
        "Matrix of Training Sample",
        "Matrix of Training Labels",
        "Matrix of CV samples",
        "Matrix of test samples",
        "Marix of testing labels",
        "Remove the /r/n",
        "Omit empty line",
        "Get xVariables from Training Set",
        "Get Lables from Training Set",
        "Remove the /r/n",
        "Get xVariables from Testing Set",
        "Get Lables from Testing Set",
        "Remove the /r/n",
        "Get xVariables from CV Set",
        "Get Lables from CV Set",
        "Initalize self.Kernal_Catch",
        "Formatting Output",
        "Initailize the Kernal_Catch into Dictionary",
        "Initialize the Kernal values into Numpy Matrix",
        "if self.KernalCatch_Dict.has_key(key1):",
        "continue",
        "Initialize or update Alpha list",
        "i = 0",
        "This situation match two status:",
        "1. Initiate self.alphas with a alpha value Ex(0.1)",
        "2. Load Alphas from Model File",
        "There is also two situtions:",
        "1. alpha_val is a float, then this is alpha initializtion",
        "2. alpha_val is a list, them this is load alpha from modle file",
        "gap is |E1 - E2|",
        "print \"   Find alpha 2 from all\"",
        "eta is the distance of two Alphas, it must be > 0. If eta < 0, then the eta must be wrong",
        "if found:print \"   @@@-2 For Alpha1 at %s the best All Alpha2 is %s\"%(idx1, alpha2)",
        "gap is |E1 - E2|",
        "print \"   Find alpha 2 from non-boundary\"",
        "Two alpha should not be same",
        "Alpha2 should not have the boundary value",
        "eta is the distance of two Alphas, it must be > 0. If eta < 0, then the eta must be wrong",
        "if found:print \"   @@@-2 For Alpha1 at %s the best Non-Boundary Alpha2 is %s\"%(idx1, alpha2)",
        "Setting the default Kernal type",
        "Training Mode",
        "Calculate Kernal, return value is a ndarray",
        "for x1 in range(len(self.TrainingSamples)):",
        "val.append(self._Fetch_Kernal(x1, x2))",
        "Kernal_Val = np.array(val)",
        "Vectorize label y and alpha into ndarry for the next step of calculation",
        "print \"K, Y, A, %s %s\"%( len(y), len(alpha))",
        "print prediction_value",
        "print \"Prediction Lable of data sample %s is %s\"%(x2, prediction_value)",
        "key = str(idx1)+'-'+str(idx2)",
        "return  self.KernalCatch_Dict[key]",
        "print \"Linear Kernal Value is %s\"%val",
        "Convert x1 and x2 into Numpy ndarray",
        "val = math.exp((-1)*(math.pow(np.linalg.norm((x1-x2)),2)/(2*sigma*sigma)))",
        "print val",
        "Define the Kernal Type",
        "x2 is the sample vector waiting for be predicted.",
        "Update Error catch of this training",
        "print \"New Alpha1 %s value is %s\"%(idx1, new_alpha1)",
        "Get the value of Alpha",
        "Calculate new alpha2",
        "print \"   E1-E2=%s,  eta = %s, y2*(E1-E2)=%s, y2*(E1-E2)/eta=%s\"%((E1-E2), eta, (y2*(E1-E2)),(y2*(E1-E2)/eta))",
        "Set boundary for new_alpha2_value value",
        "Clip new_alpha2_value value",
        "print \"   For Alpha2 at index %s, old value is %s, new value is %s, clipped value is %s, L is %s, H is %s\"%(idx2, old_alpha2, new_alpha2, clipped_new_alpha2, L, H)",
        "Vrifile whether the clipped_new_alpha2 moved big enough > step",
        "---print \"   Old_Alpha2:Value %s:%s - clipped_New_Alpha2:%s = Diff %s cannot provide enough change to old Alpha2\"%(idx2, old_alpha2, clipped_new_alpha2, abs(clipped_new_alpha2 - old_alpha2))",
        "Define the default Kernal Type",
        "print \"eta value for x1 %s and x2 %s is %s\"%(idx1, idx2, eta)",
        "Calculate b",
        "print \"   new b is %s\"%new_b",
        "Setting Default Parameters",
        "loop is the times of no alphas be udpated",
        "Initiate the index of alpha1_idx and alpha2_idx as 0",
        "Set Eidx for this training to 0",
        "Max_iter the list of Alpha until the reach the max loop number or all alphas have no furthur change",
        "Alpha be changed in each loop",
        "Formatting the output",
        "find alpha1_idx's index by checking the violation of KKT condition",
        "print \"E1 value is %s\"%E1",
        "---print \"@@@-1 For Alpha1 at %s with value %s, label y1 is %s, E1 is %s, C is %s, T is %s, alpha1 value is %s, y1*E1 = %s\"%(alpha1_idx, old_alpha1, y1, E1, C, T, old_alpha1, y1*E1)",
        "Formatting output",
        "KKT condition vilation checking",
        "Find the most proper alpha2_idx's index",
        "print \"   Found Alpha2 is %s and Alpha2 is %s\"%(found, alpha2_idx)",
        "Cannot find proper Alpha2 for Alpha1, change to an new alpha1_idx",
        "print \"   Cannot find proper Alpha2 for Alpha1 %s, change to an new Alpha1\" % alpha1_idx",
        "Calculate new alpha2_idx",
        "print \"There is no valid value for alpha2 at index %s\"%alpha2_idx",
        "Calculate new alpha1_idx",
        "Calculate b when new alpha1 and alpha2 be calculated out",
        "update variables",
        "---print \"@@@-3  Max_iter:%s, Alpha1:idx1 = %s:%s; Alpha2:idx2 = %s:%s; Updated to:  Alpha1_New:%s and Alpha2_New:%s and b_new:%s\"%(iter,alpha1_idx, old_alpha1, alpha2_idx, old_alpha2, new_alpha1, clipped_new_alpha2,new_b)",
        "---print \"@@@-3 Alpha1:%s does not violate KKT conditions\"%old_alpha1",
        "Count the undated Alpha for each iteration",
        "print \"Passes = %s\"%passes",
        "Calculate Diff between predict value and y-Labels",
        "Calculate Diff between predict labels and y-labels",
        "fn.write('C value is:'+str( self.C)+'\\n')",
        "fn.write('Gaussin Sigma value is:'+str(self.GaussinSigma)+'\\n')",
        "fn.write('Alpha values are: \\n')",
        "print 'predict on CV sample is %s'%predict",
        "Calculate the sum Diff between predict labels and Y-Labels",
        "Predict results from list",
        "Remove the /r/n",
        "The least parameter count",
        "profile.run(\"run()\", \"prof1.txt\")",
        "p = pstats.Stats('prof1.txt')",
        "p.sort_stats('time').print_stats()",
        "singal_run()",
        "batch_test_parameters()",
        "batch_test_sample_sizes()",
        "model.Test_Model(KernalType='g', Output='StockTest2.csv')",
        "C = [0.6, 0.7, 0.8, 1.0, 1.3, 1.5, 1.8, 2.0, 3.0, 4.0]",
        "Sigma = [0.1]",
        "tmp = []",
        "C = [0.6, 0.7, 0.8, 1.0, 1.3, 1.5, 1.8, 2.0, 3.0, 4.0]",
        "Sigma = [0.1]",
        "fn = open('StockMultiModelResults.csv', \"w+\")",
        "model._Update_Variables(C=each_C, Sigma=each_Sigma, T=0.001, Step=0.01, KernalType='g', alpha_ini=True,",
        "alpha_val=0.1,",
        "Kernal_ini=True)",
        "model.Train_Model(Loop=3, Model_File='StockTrainingModel2.csv')",
        "model.Load_Model('StockTrainingModel2.csv')",
        "model.Cross_Validate_Model(KernalType='g', Output='StockTest2.csv')",
        "Precesion, Recall, Accuracy = model.Performance_Diag(Model='C')",
        "model.ModelLearningCurve.append([model.Eidx_Training, model.Eidx_CV])",
        "fn.writelines(",
        "'C: %s,  Sigma: %s, Precesion: %s, Recall: %s, Accuracy: %s, Eidx_Training: %s, Eidx_CV: %s \\n' % (",
        "each_C, each_Sigma, Precesion, Recall, Accuracy, model.Eidx_Training, model.Eidx_CV))",
        "fn.close()",
        "TrainingSource = ['StockTrainingParameter1.csv', 'StockTrainingParameter2.csv', 'StockTrainingParameter3.csv',",
        "'StockTrainingParameter4.csv', 'StockTrainingParameter5.csv', 'StockTrainingParameter6.csv']",
        "CVSource = ['StockCVParameter1.csv', 'StockCVParameter2.csv', 'StockCVParameter3.csv', 'StockCVParameter4.csv',",
        "'StockCVParameter5.csv', 'StockCVParameter6.csv']",
        "model.ModelLearningCurve.append([round(model.Eidx_Training,4), round(model.Eidx_CV,4)])",
        "This is a self made Multiprocess pool",
        "print \"task total is %s, loop_total is %s\" % (task_total, loop_total)",
        "print \"This is the %s round\" % i",
        "print \"executing task %s\" % k",
        "print \"This is the %s round of loop\"%i"
    ],
    "docstrings": [
        "'''Load Samples Data into Numpy Matrix\n           Initial Parameters\n        '''",
        "'''Find Alpha1 by checking the violation of KKT conditions'''",
        "'''Update Variables\n            idx1: Alpha1\n            idx2: Alpha2\n            b\n            T\n            C\n            Step\n            Max_iter\n        '''",
        "'''Find Alpha2 when Alpha1 is decided\n        Step1: Find Alpha2 by Max|E1-E2|\n        Step2: If (Alpha2New-Alpha2old)<Step, then find Alpha2 from boundary samples\n        Step3: If (Alpha2New-Alpha2old)<Step, then find Alpha2 from all samples\n        '''",
        "'''Find Alpha2 when Alpha1 is decided\n        Step1: Find Alpha2 by Max|E1-E2|\n        Step2: If (Alpha2New-Alpha2old)<Step, then find Alpha2 from boundary samples\n        Step3: If (Alpha2New-Alpha2old)<Step, then find Alpha2 from all samples\n        '''",
        "'''Find the alpha2 with Max |E1-E2| and which value is not the boudary value, boundary value is [0-C]'''",
        "'''The determine function F(x) to calculate the prediciton values\n            x2 is the sample (vector of atributes Ex:[0.34, 0.21, 0.57]) waiting to be predicted\n            Mode to distiguish Tr:Traing or Te:Testing\n        '''",
        "'''Fetch Kernal value from calculated Kernal Catch\n           idx1 and idx2 are the indexs\n        '''",
        "'''Kernal function to calculate Kernals\n            Linear Kernal\n            Gaussin Kernal RBF\n            Polinominal Kernal\n            Kernals are based on the Dot.Product of X-Predicting and X-Samples\n            x1 and x2 are the sample value\n            x1 and x2 should be type of python list, not vector.\n        '''",
        "'''Calculation of linear Kernal\n            Vector Solution: x1 and x2 are the sample vectors\n        '''",
        "'''Calculation of Gaussion Kernal\n            Vector Solution: x1 and x2 are the sample vectors\n            Sigma is squared diviation with default value 8\n        '''",
        "'''Calculation of Polinomial Kernal\n        Vector Solution: x1 and x2 are the sample vectors\n        R is the constant with default value 1\n        d is the power degree with default value 2\n        '''",
        "'''Function to calculate difference between label and prediction\n        E_idx=f(x_idx)-y_idx\n        idx is the index of sample vector waiting for be predicted\n        Kernal_Type is the type of Kernal in Using\n        Will this E1 function only usful when Training, otherwise the idx may be ambigous to pointing to sample in Training set or Test Set.Lets make is only for Tranining set first\n        '''",
        "'''Function to renew Alpha1\n            idx1 and idx 2 are the old alpha1 and alpha2 index\n            new_alpha2 is the new alpha2 value\n        '''",
        "'''Function to renew Alpha2\n            idx1 is the index of old Alpha1\n            idx2 is the index of old Alpha2\n            E1 is the Ei value for alpha with index idx1\n            eta is the eta value for Alpha1 and Alpha2\n            L and H are the low and high border of new Alpha2 value\n            C is the penalty coefficient\n            Step is min change of Alpha2\n        '''",
        "'''Function to calcate eta\n        eta = K11+K22-2K12\n        K is Knernal,\n        idx1 and idx2 is the index of Training Samples, also correspond to the index of Alpha\n        Kernal Type is the Kernal Type\n        Presume this eta Calculaton will only be using in Training Set\n        '''",
        "'''Function to calculate b value when Alpha1 and Alpha2 are renewed'''",
        "'''\n        This function is to sum of errors between Predict and YLabel\n        :param source: 'CV' or 'Train' or 'Test'\n        :param Diff_mode: 'Lidx'(Difference between Predict Label and Real Label), 'Eidx'(Difference between Predict Value and Real Label)\n        :param Model: 'Tr' or 'Te', transfer to self._Cal_F to indicate whehter use index to fetch kernal value or use sample vector to calculate kernal value\n        :return:\n        '''",
        "'''Function to train SVM models with training sample set\n            C is penalty coefficient with Default value self.C = 10\n            T is Tolerance coefficient with Default value self.T=0.001\n            Max_iter is max times of iteration with Default value self.Max_iter = 3000\n            Step is the minimal change of alpha with default value self.Step = 0.001\n            Loop is the max times that the system will tolorance for no alpha be udpated\n        '''",
        "'''Write out model configurations to a file'''",
        "'''Load Model Parameters from SVMModel.CSV'''",
        "'''Function to validate models with CV sample set\n            Output: The output desination file\n            From: The source type of prediction performance analysis\n            Result: The source of predoction performance analysis\n        '''",
        "'''Function to Test models with test sample set\n            Output: The output desination file\n            From: The source type of prediction performance analysis\n            Result: The source of predoction performance analysis\n        '''",
        "'''Write out model configurations to a file'''",
        "'''Function to use model to predict values'''",
        "'''Function to evaluate performance of models\n        From: The source of the prediction(List or File)\n        Result: The File of prediction result.\n        Model is to differentiate from Testing and CrossValidateion\n        Model value is in ['T','C']\n        * Precision = True_Positive/(True_Pos + False_Pos)\n        * Recall = True_Pos/(True_Pos _ False_Neg)\n        '''",
        "'''\n        Plot Learning Curves\n        :return:\n        '''"
    ],
    "functions": [
        "LoadData",
        "_Find_Alpha1",
        "_Update_Variables",
        "_Find_Alpha2",
        "_Find_Alpha2_MaxE",
        "_Find_Alpha2_Nonbound",
        "_Cal_F",
        "_Fetch_Kernal",
        "_Cal_Kernal",
        "_Cal_Linear_Kernal",
        "_Cal_Gaussin_Kernal",
        "_Cal_Polinomial_Kernal",
        "_Cal_Ei",
        "_Cal_Alpha1",
        "_Cal_Alpha2",
        "_Cal_eta",
        "_Cal_b",
        "_Cal_Sum_Errors",
        "Train_Model",
        "Write_Model",
        "Load_Model",
        "Cross_Validate_Model",
        "Test_Model",
        "Write_Test",
        "Predict",
        "Performance_Diag",
        "Plot_Learning_Curve",
        "pause",
        "main",
        "singal_run",
        "batch_test_C_Sigma",
        "multi_batch_test_C_Sigma",
        "task",
        "batch_test_parameters",
        "batch_test_sample_sizes",
        "processes_pool"
    ],
    "classes": [
        "SVMClassifier"
    ]
}