{
    "identifiers": [
        "project2",
        "scmaster",
        "rodo",
        "controller",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "java",
        "io",
        "UnsupportedEncodingException",
        "java",
        "net",
        "URLEncoder",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "javax",
        "servlet",
        "ServletOutputStream",
        "javax",
        "servlet",
        "http",
        "HttpServletResponse",
        "javax",
        "servlet",
        "http",
        "HttpSession",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Autowired",
        "org",
        "springframework",
        "stereotype",
        "Controller",
        "org",
        "springframework",
        "ui",
        "Model",
        "org",
        "springframework",
        "util",
        "FileCopyUtils",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestMapping",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestMethod",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "RequestParam",
        "org",
        "springframework",
        "web",
        "bind",
        "annotation",
        "ResponseBody",
        "org",
        "springframework",
        "web",
        "multipart",
        "MultipartFile",
        "org",
        "springframework",
        "web",
        "multipart",
        "MultipartHttpServletRequest",
        "project2",
        "scmaster",
        "rodo",
        "dao",
        "Rodo_QaBoardDao",
        "project2",
        "scmaster",
        "rodo",
        "util",
        "FileService",
        "project2",
        "scmaster",
        "rodo",
        "util",
        "PageNavigator",
        "project2",
        "scmaster",
        "rodo",
        "vo",
        "Rodo_FreeBoard",
        "project2",
        "scmaster",
        "rodo",
        "vo",
        "Rodo_QaBoard",
        "project2",
        "scmaster",
        "rodo",
        "vo",
        "Rodo_QaReply",
        "Controller",
        "reList",
        "fList",
        "num",
        "countPerPage",
        "pagePerGroup",
        "Autowired",
        "dao",
        "uploadPath",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "GET",
        "model",
        "RequestParam",
        "value",
        "defaultValue",
        "page",
        "RequestParam",
        "value",
        "defaultValue",
        "searchText",
        "total",
        "dao",
        "listsize",
        "searchText",
        "total",
        "navi",
        "countPerPage",
        "pagePerGroup",
        "page",
        "total",
        "dao",
        "navi",
        "getStartRecord",
        "navi",
        "getCountPerPage",
        "searchText",
        "reList",
        "rSize",
        "size",
        "num",
        "i",
        "i",
        "rSize",
        "i",
        "temp",
        "dao",
        "getReplyCount",
        "i",
        "temp",
        "temp",
        "reList",
        "add",
        "i",
        "temp",
        "reList",
        "add",
        "i",
        "temp",
        "fList",
        "j",
        "j",
        "rSize",
        "j",
        "temp2",
        "dao",
        "getFileCount",
        "j",
        "temp2",
        "temp2",
        "fList",
        "add",
        "j",
        "temp2",
        "fList",
        "add",
        "j",
        "temp2",
        "model",
        "addAttribute",
        "navi",
        "model",
        "addAttribute",
        "searchText",
        "model",
        "addAttribute",
        "model",
        "addAttribute",
        "reList",
        "model",
        "addAttribute",
        "fList",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "GET",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "POST",
        "board",
        "session",
        "model",
        "request",
        "response",
        "id",
        "session",
        "getAttribute",
        "board",
        "setQa_id",
        "id",
        "itr",
        "request",
        "getFileNames",
        "OriginalFilename",
        "Serversavedfile",
        "originalFile",
        "savedFile",
        "itr",
        "hasNext",
        "mpf",
        "request",
        "getFile",
        "itr",
        "next",
        "mpf",
        "getOriginalFilename",
        "mpf",
        "isEmpty",
        "Serversavedfile",
        "FileService",
        "saveFile",
        "mpf",
        "uploadPath",
        "originalFile",
        "add",
        "mpf",
        "getOriginalFilename",
        "savedFile",
        "add",
        "Serversavedfile",
        "savedFile",
        "board",
        "setQafile_original",
        "originalFile",
        "board",
        "setQafile_saved",
        "savedFile",
        "result",
        "dao",
        "write",
        "board",
        "boardNum",
        "result",
        "boardNum",
        "dao",
        "getsequence",
        "board",
        "setQa_boardnum",
        "boardNum",
        "a",
        "dao",
        "writefile",
        "board",
        "a",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "GET",
        "qa_boardnum",
        "model",
        "session",
        "oglist",
        "svlist",
        "board",
        "dao",
        "selectOne",
        "qa_boardnum",
        "dao",
        "hitsPlus",
        "qa_boardnum",
        "fileList",
        "dao",
        "QaFileList",
        "qa_boardnum",
        "file",
        "fileList",
        "file",
        "get",
        "oglist",
        "add",
        "file",
        "get",
        "svlist",
        "add",
        "file",
        "get",
        "oglist",
        "svlist",
        "board",
        "setQafile_original",
        "oglist",
        "board",
        "setQafile_saved",
        "svlist",
        "replylist",
        "dao",
        "findreply",
        "qa_boardnum",
        "model",
        "addAttribute",
        "board",
        "model",
        "addAttribute",
        "session",
        "getAttribute",
        "model",
        "addAttribute",
        "replylist",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "GET",
        "qa_boardnum",
        "session",
        "fileList",
        "dao",
        "QaFileList",
        "qa_boardnum",
        "oglist",
        "svlist",
        "file",
        "fileList",
        "oglist",
        "add",
        "file",
        "get",
        "svlist",
        "add",
        "file",
        "get",
        "i",
        "i",
        "oglist",
        "size",
        "i",
        "FileService",
        "deleteFile",
        "oglist",
        "get",
        "i",
        "FileService",
        "deleteFile",
        "svlist",
        "get",
        "i",
        "dao",
        "findreply",
        "qa_boardnum",
        "i",
        "i",
        "size",
        "i",
        "get",
        "i",
        "dao",
        "deletereply",
        "get",
        "i",
        "dao",
        "qa_boardnum",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "GET",
        "qa_boardnum",
        "model",
        "board",
        "dao",
        "selectOne",
        "qa_boardnum",
        "board",
        "model",
        "addAttribute",
        "board",
        "ResponseBody",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "POST",
        "board",
        "request",
        "response",
        "session",
        "i",
        "itr",
        "request",
        "getFileNames",
        "board",
        "toString",
        "OriginalFilename",
        "Serversavedfile",
        "originalFile",
        "savedFile",
        "itr",
        "hasNext",
        "mpf",
        "request",
        "getFile",
        "itr",
        "next",
        "mpf",
        "getOriginalFilename",
        "mpf",
        "isEmpty",
        "Serversavedfile",
        "FileService",
        "saveFile",
        "mpf",
        "uploadPath",
        "originalFile",
        "add",
        "mpf",
        "getOriginalFilename",
        "savedFile",
        "add",
        "Serversavedfile",
        "board",
        "setQafile_original",
        "originalFile",
        "board",
        "setQafile_saved",
        "savedFile",
        "board",
        "toString",
        "i",
        "dao",
        "updateqa",
        "board",
        "i",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "GET",
        "origin",
        "response",
        "response",
        "setHeader",
        "URLEncoder",
        "encode",
        "origin",
        "e1",
        "e1",
        "printStackTrace",
        "OriginfullPath",
        "uploadPath",
        "origin",
        "filein0",
        "fileout0",
        "filein0",
        "OriginfullPath",
        "fileout0",
        "response",
        "getOutputStream",
        "FileCopyUtils",
        "copy",
        "filein0",
        "fileout0",
        "filein0",
        "close",
        "fileout0",
        "close",
        "e",
        "e",
        "printStackTrace",
        "ResponseBody",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "POST",
        "reply",
        "session",
        "model",
        "id",
        "session",
        "getAttribute",
        "reply",
        "setQareply_id",
        "id",
        "dao",
        "writereply",
        "reply",
        "dao",
        "findreply",
        "reply",
        "getQa_boardnum",
        "ResponseBody",
        "RequestMapping",
        "value",
        "method",
        "RequestMethod",
        "GET",
        "reply",
        "session",
        "model",
        "id",
        "session",
        "getAttribute",
        "reply",
        "setQareply_id",
        "id",
        "dao",
        "deletereply",
        "reply",
        "dao",
        "findreply",
        "reply",
        "getQa_boardnum"
    ],
    "literals": [
        "\"/boardfile\"",
        "\"qaboardlist\"",
        "\"page\"",
        "\"1\"",
        "\"searchText\"",
        "\"\"",
        "\"Q & A 게시글 수 : \"",
        "\"navi\"",
        "\"searchText\"",
        "\"list\"",
        "\"reList\"",
        "\"fList\"",
        "\"qaboard/qaboardlist\"",
        "\"qaboardwrite\"",
        "\"qaboard/qaboardwrite\"",
        "\"qaboardwrite\"",
        "\"loginId\"",
        "\"\"",
        "\"\"",
        "\"유저가 저장한 원본파일이름 : \"",
        "\" uploaded!\"",
        "\"savedfile\"",
        "\"redirect:/qaboardlist\"",
        "\"qaboard/qaboardwrite\"",
        "\"qaboardread\"",
        "\"QAFILE_SAVED\"",
        "\"QAFILE_ORIGINAL\"",
        "\"QAFILE_SAVED\"",
        "\"board\"",
        "\"id\"",
        "\"loginId\"",
        "\"replylist\"",
        "\"qaboard/qaboardread\"",
        "\"deleteqaboard\"",
        "\"QAFILE_ORIGINAL\"",
        "\"QAFILE_SAVED\"",
        "\"redirect:/qaboardlist\"",
        "\"updateqaboard\"",
        "\"board\"",
        "\"qaboard/qaupdate\"",
        "\"qaboard/qaupdate\"",
        "\"updateqaboard\"",
        "\"asdfadfs\"",
        "\"\"",
        "\"\"",
        "\"유저가 저장한 원본파일이름 : \"",
        "\" uploaded!\"",
        "\".. 업데이트 전\"",
        "\"success\"",
        "\"fail\"",
        "\"qaLoad\"",
        "\"Content-Disposition\"",
        "\" attachment;filename=\"",
        "\"UTF-8\"",
        "\"/\"",
        "\"qareplywrite\"",
        "\"loginId\"",
        "\"qadeletereply\"",
        "\"loginId\""
    ],
    "variables": [
        "reList",
        "fList",
        "dao"
    ],
    "comments": [
        "서버 리부팅 이전 삭제 카운트 설정",
        "페이지 당 글 수",
        "페이지 이동 그룹 당 표시할 페이지 수",
        "리플 카운트 List 선언 (초기화)",
        "게시판 사이즈 + 글 삭제 했을 시 사이즈에 추가 할 변수",
        "게시판 사이즈 + 삭제한 카운트 만큼 반복",
        "해당 글 번호 리플 수를 Get!",
        "해당 글에 리플이 없는 경우 (해당 리스트 인덱스에 null 대입)",
        "해당 글에 리플이 있는 경우 (해당 리스트 인덱스에 가져 온 리플 카운트 대입)",
        "첨부 파일 카운트 List 선언 (초기화)",
        "파일 리스트 사이즈 + 글 삭제 했을 시 사이즈에 추가 할 변수",
        "(이하 위와 동일)",
        "게시 글 (모델)",
        "리플 카운트 (모델)",
        "파일 카운트 (모델)",
        "내가 저장할 파일의 이름.(hi.jpg)",
        "서버에 저장할 날짜로 이름이 바뀌어 저장되는",
        "vo에 담을 OriginalFile",
        "vo에 담을 SavedFile",
        "만약 파일이 있다면",
        "리퀘스트에서 파일을 하나씩 가져옴.",
        "역시 파일이 있다면.",
        "파일을 업로드패쓰의 경로에 저장.",
        "서버폴더에 저장하는 파일(바뀐 이름)을 보내서 섬네일파일의 이름을 가져옴.",
        "확장자가 없는 섬네일의 이름임.",
        "포토보드의 vo에 저장할 어레이리스트 세팅.",
        "String id = (String)session.getAttribute(\"loginId\");",
        "board.setQa_id(id);",
        "내가 저장할 파일의 이름.(hi.jpg)",
        "서버에 저장할 날짜로 이름이 바뀌어 저장되는",
        "파일.(170329//////////////////)",
        "vo에 담을 OriginalFile",
        "vo에 담을 SavedFile",
        "만약 파일이 있다면",
        "리퀘스트에서 파일을 하나씩 가져옴.",
        "역시 파일이 있다면.",
        "파일을 업로드패쓰의 경로에 저장.",
        "이때 오늘의 등록날짜시간으로 저장.",
        "서버폴더에 저장하는 파일(바뀐 이름)을 보내서 섬네일파일의 이름을 가져옴.",
        "포토보드의 vo에 저장할 어레이리스트 세팅.",
        "원래파일",
        "Spring의 파일 관련 유틸",
        "Rodo_QaReply reply = dao.selectreply(Qareply_replynum);",
        "return \"redirect:/read?Qa_boardnum=\"+reply.getQa_boardnum();"
    ],
    "docstrings": [
        "@ResponseBody\n\t@RequestMapping(value = \"updateqaboard\", method = RequestMethod.POST)\n\tpublic String updateqaboard\n\t(Rodo_QaBoard board, MultipartHttpServletRequest request, HttpServletResponse response, int qa_boardnum)\n\t{\t\n\t\tIterator<String> itr = request.getFileNames();\n\t\tSystem.out.println(board.toString() + \"exam\"); \n\t\t\n\t\tString OriginalFilename = \"\"; // 내가 저장할 파일의 이름.(hi.jpg)\n\t\tString Serversavedfile = \"\"; // 서버에 저장할 날짜로 이름이 바뀌어 저장되는\n\t\t\t\t\t\t\t\t\t\t// 파일.(170329//////////////////)\n\t\t\n\t\tArrayList<String> originalFile = new ArrayList<>(); // vo에 담을 OriginalFile\n\t\tArrayList<String> savedFile = new ArrayList<>(); // vo에 담을 SavedFile\n\t\t\n\t\twhile (itr.hasNext())\n\t\t{ //만약 파일이 있다면\n\t\t\tMultipartFile mpf = request.getFile(itr.next()); // 리퀘스트에서 파일을 하나씩 가져옴.\n\t\t\tSystem.out.println(\"유저가 저장한 원본 파일 이름 : \" + mpf.getOriginalFilename() + \" uploaded!\");\n\n\t\t\tif (!mpf.isEmpty())\n\t\t\t{ // 역시 파일이 있다면.\n\t\t\t\tServersavedfile = FileService.saveFile(mpf, uploadPath); //파일을 업로드패쓰의 경로에 저장.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//이 때 오늘의 등록날짜시간으로 저장.\n\t\t\t\t// 서버폴더에 저장하는 파일(바뀐 이름)을 보내서 섬네일파일의 이름을 가져옴.\n\t\t\t\t//포토보드의 vo에 저장할 어레이리스트 세팅.\n\t\t\t\toriginalFile.add(mpf.getOriginalFilename());\n\t\t\t\tsavedFile.add(Serversavedfile);\n\t\t\t}\n\t\t}\n\t\tboard.setQafile_original(originalFile);\n\t\tboard.setQafile_saved(savedFile);\n\t\n\t\tint i = dao.update(board);\n\t\t\n\t\tif (i != 0)\n\t\t{\n\t\t\treturn \"success\";\n\t\t}\n\t\treturn \"fail\";\n\t}",
        "* @RequestMapping(value = \"qadownload\", method = RequestMethod.GET)\n\tpublic String download(int qa_boardnum, HttpServletResponse response)\n\t{\n\t\tRodo_QaBoard board = dao.selectOne(qa_boardnum);\n\t\t\n\t\ttry \n\t\t{\n\t\t\tresponse.setHeader(\"Content-Disposition\", \"attachment;filename=\"+URLEncoder.encode(board.getQafile_original(), \"UTF-8\");\n\t\t}\n\t\t\n\t\tcatch (UnsupportedEncodingException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\t// 저장된 파일 경로\n\t\tString fullPath = uploadPath + \"/\" + board.getQa_savedfile();\n\t\t\n\t\t// 서버의 파일을 읽을 입력 스트림\n\t\t// 클라이언트에게 전달할 출력 스트림\n\t\tFileInputStream filein = null;\n\t\tServletOutputStream fileout = null;\n\t\t\n\t\ttry \n\t\t{\n\t\t\tfilein = new FileInputStream(fullPath);\n\t\t\tfileout = response.getOutputStream();\n\t\t\t\n\t\t\t// Spring 파일 관련 유틸\n\t\t\tFileCopyUtils.copy(filein, fileout);\n\t\t} \n\t\t\n\t\tcatch (IOException e) \n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\treturn null;\n\t}"
    ],
    "functions": [
        "qaboardlist",
        "qaboardwrite",
        "qaboardwrite",
        "qaboardread",
        "deleteqaboard",
        "updateqaboard",
        "updateqaboard",
        "qaLoad",
        "qareplywrite",
        "qadeletereply"
    ],
    "classes": [
        "QaBoardController"
    ]
}