{
    "identifiers": [
        "pandas",
        "numpy",
        "sum",
        "row",
        "open",
        "csvImport",
        "import_size",
        "rand_counter",
        "numpy",
        "random",
        "random_integers",
        "rows",
        "rand_nr",
        "rand_sample",
        "rand_sample",
        "append",
        "rand_nr",
        "rand_counter",
        "sorted",
        "rand_sample",
        "choose_rows",
        "pandas",
        "read_csv",
        "open",
        "csvImport",
        "skiprows",
        "x",
        "x",
        "choose_rows",
        "lines",
        "lines",
        "to_csv",
        "header",
        "index"
    ],
    "literals": [
        "\"cdbrfss1999.csv\"",
        "'chosen rows: %s'",
        "'sample.csv'",
        "\"csv sample.csv created \\n TASK 2 FINISHED\""
    ],
    "variables": [
        "csvImport",
        "rows",
        "import_size",
        "rand_sample",
        "rand_counter",
        "rand_nr",
        "choose_rows",
        "lines"
    ],
    "comments": [
        "2. The dataset \"cdbrfss1999.csv\" contains 159989 entries.",
        "2.1. Take a sample of 20000 from this dataset and export it to an ASCII file. Make sure that your method",
        "allows to draw more than one sample from the population.  [10 points]",
        "",
        "2.2.  Discuss your method to do so. Is your sampling a \"good sample\" in the sense that it is representative for",
        "the larger \"population\"?  [5 points]",
        "to run as module if imported otherwise as script",
        "def function():",
        "print(\"This is a module function\")",
        "",
        "if __name__==\"__main__\":",
        "print(\"This is a script\")",
        "with open('cdbrfss1999.csv') as csvImport:                              # opens file (, 'rb' -> r=read b=binary)",
        "counts lines",
        "sample size",
        "skip = sorted(random.sample(range(1, rows + 1), rows - import_size))    # creates a list of skipped lines (without header)",
        "random generator based on random function of numpy",
        "for i in range(import_size):",
        "StringIO(csvImport)",
        "print( type(lines) )",
        "sample_out = open( 'sample.txt', 'w' )"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}