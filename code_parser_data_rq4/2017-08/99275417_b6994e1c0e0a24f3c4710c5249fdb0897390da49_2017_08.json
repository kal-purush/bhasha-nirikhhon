{
    "identifiers": [
        "webpackUniversalModuleDefinition",
        "root",
        "factory",
        "exports",
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "exports",
        "exports",
        "factory",
        "root",
        "factory",
        "modules",
        "moduleId",
        "installedModules",
        "moduleId",
        "installedModules",
        "moduleId",
        "installedModules",
        "moduleId",
        "moduleId",
        "modules",
        "moduleId",
        "__webpack_require__",
        "__webpack_require__",
        "modules",
        "__webpack_require__",
        "installedModules",
        "__webpack_require__",
        "value",
        "value",
        "__webpack_require__",
        "exports",
        "name",
        "getter",
        "__webpack_require__",
        "exports",
        "name",
        "exports",
        "name",
        "getter",
        "__webpack_require__",
        "getDefault",
        "getModuleExports",
        "__webpack_require__",
        "getter",
        "getter",
        "getter",
        "__webpack_require__",
        "property",
        "property",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "Buffer",
        "exports",
        "SlowBuffer",
        "exports",
        "Buffer",
        "typedArraySupport",
        "exports",
        "kMaxLength",
        "Uint8Array",
        "arr",
        "Uint8Array",
        "arr",
        "arr",
        "arr",
        "e",
        "Buffer",
        "that",
        "length",
        "kMaxLength",
        "length",
        "RangeError",
        "Buffer",
        "that",
        "Uint8Array",
        "length",
        "that",
        "Buffer",
        "that",
        "that",
        "Buffer",
        "length",
        "that",
        "length",
        "that",
        "arg",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Buffer",
        "Buffer",
        "arg",
        "encodingOrOffset",
        "length",
        "arg",
        "encodingOrOffset",
        "allocUnsafe",
        "arg",
        "arg",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Buffer",
        "arr",
        "arr",
        "Buffer",
        "arr",
        "that",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "ArrayBuffer",
        "value",
        "ArrayBuffer",
        "fromArrayBuffer",
        "that",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "fromString",
        "that",
        "value",
        "encodingOrOffset",
        "fromObject",
        "that",
        "value",
        "Buffer",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Buffer",
        "Uint8Array",
        "Buffer",
        "Uint8Array",
        "Buffer",
        "Buffer",
        "Buffer",
        "size",
        "size",
        "size",
        "RangeError",
        "that",
        "size",
        "fill",
        "encoding",
        "assertSize",
        "size",
        "size",
        "createBuffer",
        "that",
        "size",
        "fill",
        "encoding",
        "createBuffer",
        "that",
        "size",
        "fill",
        "encoding",
        "createBuffer",
        "that",
        "size",
        "fill",
        "createBuffer",
        "that",
        "size",
        "Buffer",
        "size",
        "fill",
        "encoding",
        "alloc",
        "size",
        "fill",
        "encoding",
        "that",
        "size",
        "assertSize",
        "size",
        "that",
        "createBuffer",
        "that",
        "size",
        "size",
        "Buffer",
        "i",
        "size",
        "i",
        "that",
        "i",
        "that",
        "Buffer",
        "size",
        "allocUnsafe",
        "size",
        "Buffer",
        "size",
        "allocUnsafe",
        "size",
        "that",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "Buffer",
        "encoding",
        "byteLength",
        "encoding",
        "that",
        "createBuffer",
        "that",
        "length",
        "that",
        "encoding",
        "actual",
        "length",
        "that",
        "that",
        "actual",
        "that",
        "that",
        "array",
        "array",
        "array",
        "that",
        "createBuffer",
        "that",
        "length",
        "i",
        "length",
        "i",
        "that",
        "i",
        "array",
        "i",
        "that",
        "that",
        "array",
        "byteOffset",
        "length",
        "array",
        "byteOffset",
        "array",
        "byteOffset",
        "RangeError",
        "array",
        "byteOffset",
        "length",
        "RangeError",
        "byteOffset",
        "length",
        "array",
        "Uint8Array",
        "array",
        "length",
        "array",
        "Uint8Array",
        "array",
        "byteOffset",
        "array",
        "Uint8Array",
        "array",
        "byteOffset",
        "length",
        "Buffer",
        "that",
        "array",
        "that",
        "Buffer",
        "that",
        "fromArrayLike",
        "that",
        "array",
        "that",
        "that",
        "obj",
        "Buffer",
        "obj",
        "obj",
        "that",
        "createBuffer",
        "that",
        "len",
        "that",
        "that",
        "obj",
        "that",
        "len",
        "that",
        "obj",
        "ArrayBuffer",
        "obj",
        "ArrayBuffer",
        "obj",
        "obj",
        "isnan",
        "obj",
        "createBuffer",
        "that",
        "fromArrayLike",
        "that",
        "obj",
        "obj",
        "isArray",
        "obj",
        "fromArrayLike",
        "that",
        "obj",
        "length",
        "length",
        "kMaxLength",
        "RangeError",
        "kMaxLength",
        "length",
        "length",
        "length",
        "length",
        "length",
        "Buffer",
        "length",
        "Buffer",
        "isBuffer",
        "b",
        "b",
        "b",
        "Buffer",
        "compare",
        "a",
        "b",
        "Buffer",
        "a",
        "Buffer",
        "b",
        "a",
        "b",
        "a",
        "b",
        "x",
        "y",
        "i",
        "len",
        "i",
        "a",
        "i",
        "b",
        "i",
        "x",
        "a",
        "i",
        "y",
        "b",
        "i",
        "x",
        "y",
        "y",
        "x",
        "Buffer",
        "isEncoding",
        "encoding",
        "encoding",
        "Buffer",
        "concat",
        "length",
        "isArray",
        "Buffer",
        "length",
        "length",
        "i",
        "i",
        "i",
        "length",
        "i",
        "Buffer",
        "length",
        "i",
        "i",
        "i",
        "i",
        "Buffer",
        "buf",
        "buf",
        "buffer",
        "pos",
        "pos",
        "buf",
        "buffer",
        "encoding",
        "Buffer",
        "ArrayBuffer",
        "ArrayBuffer",
        "ArrayBuffer",
        "ArrayBuffer",
        "len",
        "encoding",
        "len",
        "utf8ToBytes",
        "len",
        "len",
        "base64ToBytes",
        "loweredCase",
        "utf8ToBytes",
        "encoding",
        "encoding",
        "loweredCase",
        "Buffer",
        "byteLength",
        "encoding",
        "start",
        "end",
        "start",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "end",
        "end",
        "start",
        "end",
        "start",
        "encoding",
        "encoding",
        "encoding",
        "hexSlice",
        "start",
        "end",
        "utf8Slice",
        "start",
        "end",
        "asciiSlice",
        "start",
        "end",
        "latin1Slice",
        "start",
        "end",
        "base64Slice",
        "start",
        "end",
        "utf16leSlice",
        "start",
        "end",
        "loweredCase",
        "encoding",
        "encoding",
        "encoding",
        "loweredCase",
        "Buffer",
        "b",
        "n",
        "m",
        "b",
        "n",
        "b",
        "n",
        "b",
        "m",
        "b",
        "m",
        "i",
        "Buffer",
        "swap16",
        "len",
        "RangeError",
        "i",
        "len",
        "i",
        "swap",
        "i",
        "i",
        "Buffer",
        "swap32",
        "len",
        "RangeError",
        "i",
        "len",
        "i",
        "swap",
        "i",
        "i",
        "swap",
        "i",
        "i",
        "Buffer",
        "swap64",
        "len",
        "RangeError",
        "i",
        "len",
        "i",
        "swap",
        "i",
        "i",
        "swap",
        "i",
        "i",
        "swap",
        "i",
        "i",
        "swap",
        "i",
        "i",
        "Buffer",
        "toString",
        "length",
        "arguments",
        "utf8Slice",
        "length",
        "slowToString",
        "arguments",
        "Buffer",
        "equals",
        "b",
        "Buffer",
        "b",
        "b",
        "Buffer",
        "b",
        "Buffer",
        "inspect",
        "exports",
        "max",
        "max",
        "Buffer",
        "compare",
        "target",
        "start",
        "end",
        "thisStart",
        "thisEnd",
        "Buffer",
        "target",
        "start",
        "start",
        "end",
        "end",
        "target",
        "target",
        "thisStart",
        "thisStart",
        "thisEnd",
        "thisEnd",
        "start",
        "end",
        "target",
        "thisStart",
        "thisEnd",
        "RangeError",
        "thisStart",
        "thisEnd",
        "start",
        "end",
        "thisStart",
        "thisEnd",
        "start",
        "end",
        "start",
        "end",
        "thisStart",
        "thisEnd",
        "target",
        "thisEnd",
        "thisStart",
        "end",
        "start",
        "x",
        "y",
        "thisStart",
        "thisEnd",
        "target",
        "start",
        "end",
        "i",
        "len",
        "i",
        "thisCopy",
        "i",
        "targetCopy",
        "i",
        "x",
        "thisCopy",
        "i",
        "y",
        "targetCopy",
        "i",
        "x",
        "y",
        "y",
        "x",
        "buffer",
        "val",
        "byteOffset",
        "encoding",
        "dir",
        "buffer",
        "byteOffset",
        "encoding",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "byteOffset",
        "isNaN",
        "byteOffset",
        "byteOffset",
        "dir",
        "buffer",
        "byteOffset",
        "byteOffset",
        "buffer",
        "byteOffset",
        "byteOffset",
        "buffer",
        "dir",
        "byteOffset",
        "buffer",
        "byteOffset",
        "dir",
        "byteOffset",
        "val",
        "val",
        "Buffer",
        "val",
        "encoding",
        "Buffer",
        "val",
        "val",
        "arrayIndexOf",
        "buffer",
        "val",
        "byteOffset",
        "encoding",
        "dir",
        "val",
        "val",
        "val",
        "Buffer",
        "Uint8Array",
        "dir",
        "Uint8Array",
        "buffer",
        "val",
        "byteOffset",
        "Uint8Array",
        "buffer",
        "val",
        "byteOffset",
        "arrayIndexOf",
        "buffer",
        "val",
        "byteOffset",
        "encoding",
        "dir",
        "arr",
        "val",
        "byteOffset",
        "encoding",
        "dir",
        "arr",
        "val",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "arr",
        "val",
        "indexSize",
        "arrLength",
        "valLength",
        "byteOffset",
        "buf",
        "i",
        "indexSize",
        "buf",
        "i",
        "buf",
        "i",
        "indexSize",
        "dir",
        "i",
        "byteOffset",
        "i",
        "arrLength",
        "i",
        "read",
        "arr",
        "i",
        "read",
        "val",
        "foundIndex",
        "i",
        "foundIndex",
        "foundIndex",
        "foundIndex",
        "i",
        "i",
        "foundIndex",
        "valLength",
        "foundIndex",
        "indexSize",
        "foundIndex",
        "i",
        "i",
        "foundIndex",
        "foundIndex",
        "byteOffset",
        "valLength",
        "arrLength",
        "byteOffset",
        "arrLength",
        "valLength",
        "i",
        "byteOffset",
        "i",
        "i",
        "j",
        "valLength",
        "j",
        "read",
        "arr",
        "i",
        "j",
        "read",
        "val",
        "j",
        "found",
        "found",
        "i",
        "Buffer",
        "includes",
        "val",
        "byteOffset",
        "encoding",
        "val",
        "byteOffset",
        "encoding",
        "Buffer",
        "indexOf",
        "val",
        "byteOffset",
        "encoding",
        "bidirectionalIndexOf",
        "val",
        "byteOffset",
        "encoding",
        "Buffer",
        "lastIndexOf",
        "val",
        "byteOffset",
        "encoding",
        "bidirectionalIndexOf",
        "val",
        "byteOffset",
        "encoding",
        "buf",
        "offset",
        "length",
        "offset",
        "offset",
        "buf",
        "offset",
        "length",
        "length",
        "remaining",
        "length",
        "length",
        "length",
        "remaining",
        "length",
        "remaining",
        "strLen",
        "length",
        "strLen",
        "length",
        "strLen",
        "i",
        "length",
        "i",
        "parseInt",
        "i",
        "isNaN",
        "parsed",
        "i",
        "buf",
        "offset",
        "i",
        "parsed",
        "i",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "utf8ToBytes",
        "buf",
        "offset",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "asciiToBytes",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "asciiWrite",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "base64ToBytes",
        "buf",
        "offset",
        "length",
        "buf",
        "offset",
        "length",
        "blitBuffer",
        "utf16leToBytes",
        "buf",
        "offset",
        "buf",
        "offset",
        "length",
        "Buffer",
        "write",
        "offset",
        "length",
        "encoding",
        "offset",
        "encoding",
        "length",
        "offset",
        "length",
        "offset",
        "encoding",
        "offset",
        "length",
        "offset",
        "isFinite",
        "offset",
        "offset",
        "offset",
        "isFinite",
        "length",
        "length",
        "length",
        "encoding",
        "encoding",
        "encoding",
        "length",
        "length",
        "offset",
        "length",
        "length",
        "remaining",
        "length",
        "remaining",
        "length",
        "offset",
        "offset",
        "RangeError",
        "encoding",
        "encoding",
        "encoding",
        "hexWrite",
        "offset",
        "length",
        "utf8Write",
        "offset",
        "length",
        "asciiWrite",
        "offset",
        "length",
        "latin1Write",
        "offset",
        "length",
        "base64Write",
        "offset",
        "length",
        "ucs2Write",
        "offset",
        "length",
        "loweredCase",
        "encoding",
        "encoding",
        "encoding",
        "loweredCase",
        "Buffer",
        "toJSON",
        "buf",
        "start",
        "end",
        "start",
        "end",
        "buf",
        "base64",
        "buf",
        "base64",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "buf",
        "i",
        "firstByte",
        "firstByte",
        "firstByte",
        "i",
        "bytesPerSequence",
        "end",
        "bytesPerSequence",
        "firstByte",
        "codePoint",
        "firstByte",
        "secondByte",
        "buf",
        "i",
        "secondByte",
        "tempCodePoint",
        "firstByte",
        "secondByte",
        "tempCodePoint",
        "codePoint",
        "tempCodePoint",
        "secondByte",
        "buf",
        "i",
        "thirdByte",
        "buf",
        "i",
        "secondByte",
        "thirdByte",
        "tempCodePoint",
        "firstByte",
        "secondByte",
        "thirdByte",
        "tempCodePoint",
        "tempCodePoint",
        "tempCodePoint",
        "codePoint",
        "tempCodePoint",
        "secondByte",
        "buf",
        "i",
        "thirdByte",
        "buf",
        "i",
        "fourthByte",
        "buf",
        "i",
        "secondByte",
        "thirdByte",
        "fourthByte",
        "tempCodePoint",
        "firstByte",
        "secondByte",
        "thirdByte",
        "fourthByte",
        "tempCodePoint",
        "tempCodePoint",
        "codePoint",
        "tempCodePoint",
        "codePoint",
        "codePoint",
        "bytesPerSequence",
        "codePoint",
        "codePoint",
        "res",
        "codePoint",
        "codePoint",
        "codePoint",
        "res",
        "codePoint",
        "i",
        "bytesPerSequence",
        "decodeCodePointsArray",
        "res",
        "codePoints",
        "codePoints",
        "len",
        "MAX_ARGUMENTS_LENGTH",
        "codePoints",
        "i",
        "len",
        "res",
        "codePoints",
        "i",
        "i",
        "MAX_ARGUMENTS_LENGTH",
        "res",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "i",
        "ret",
        "buf",
        "i",
        "ret",
        "buf",
        "start",
        "end",
        "end",
        "buf",
        "end",
        "i",
        "end",
        "i",
        "ret",
        "buf",
        "i",
        "ret",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "len",
        "end",
        "len",
        "i",
        "end",
        "i",
        "toHex",
        "buf",
        "i",
        "buf",
        "start",
        "end",
        "buf",
        "start",
        "end",
        "i",
        "i",
        "res",
        "i",
        "i",
        "res",
        "Buffer",
        "start",
        "end",
        "start",
        "start",
        "end",
        "end",
        "len",
        "end",
        "start",
        "start",
        "len",
        "start",
        "start",
        "start",
        "len",
        "start",
        "len",
        "end",
        "end",
        "len",
        "end",
        "end",
        "end",
        "len",
        "end",
        "len",
        "end",
        "start",
        "end",
        "start",
        "Buffer",
        "newBuf",
        "start",
        "end",
        "newBuf",
        "Buffer",
        "end",
        "start",
        "newBuf",
        "Buffer",
        "sliceLen",
        "i",
        "sliceLen",
        "i",
        "newBuf",
        "i",
        "i",
        "start",
        "newBuf",
        "offset",
        "ext",
        "length",
        "offset",
        "offset",
        "RangeError",
        "offset",
        "ext",
        "length",
        "RangeError",
        "Buffer",
        "readUIntLE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "byteLength",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "val",
        "Buffer",
        "readUIntBE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "byteLength",
        "byteLength",
        "mul",
        "val",
        "offset",
        "byteLength",
        "mul",
        "val",
        "Buffer",
        "readUInt8",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "Buffer",
        "readUInt16LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt16BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt32LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readUInt32BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readIntLE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "byteLength",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "mul",
        "val",
        "mul",
        "val",
        "byteLength",
        "val",
        "Buffer",
        "readIntBE",
        "offset",
        "byteLength",
        "noAssert",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "checkOffset",
        "offset",
        "byteLength",
        "offset",
        "i",
        "i",
        "mul",
        "val",
        "offset",
        "i",
        "mul",
        "mul",
        "val",
        "mul",
        "val",
        "byteLength",
        "val",
        "Buffer",
        "readInt8",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readInt16LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "val",
        "val",
        "val",
        "Buffer",
        "readInt16BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "val",
        "val",
        "val",
        "Buffer",
        "readInt32LE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readInt32BE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "offset",
        "offset",
        "offset",
        "offset",
        "Buffer",
        "readFloatLE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readFloatBE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readDoubleLE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "Buffer",
        "readDoubleBE",
        "offset",
        "noAssert",
        "noAssert",
        "checkOffset",
        "offset",
        "ieee754",
        "offset",
        "buf",
        "value",
        "offset",
        "ext",
        "max",
        "min",
        "Buffer",
        "buf",
        "value",
        "max",
        "value",
        "min",
        "RangeError",
        "offset",
        "ext",
        "buf",
        "RangeError",
        "Buffer",
        "writeUIntLE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "maxBytes",
        "offset",
        "value",
        "i",
        "byteLength",
        "mul",
        "offset",
        "i",
        "value",
        "mul",
        "offset",
        "byteLength",
        "Buffer",
        "writeUIntBE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "byteLength",
        "byteLength",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "maxBytes",
        "byteLength",
        "offset",
        "i",
        "value",
        "i",
        "mul",
        "offset",
        "i",
        "value",
        "mul",
        "offset",
        "byteLength",
        "Buffer",
        "writeUInt8",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "value",
        "value",
        "offset",
        "value",
        "offset",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "value",
        "value",
        "value",
        "buf",
        "offset",
        "i",
        "j",
        "i",
        "buf",
        "offset",
        "i",
        "value",
        "littleEndian",
        "i",
        "i",
        "littleEndian",
        "i",
        "i",
        "Buffer",
        "writeUInt16LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeUInt16BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "value",
        "value",
        "value",
        "buf",
        "offset",
        "i",
        "j",
        "i",
        "buf",
        "offset",
        "i",
        "value",
        "littleEndian",
        "i",
        "i",
        "Buffer",
        "writeUInt32LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeUInt32BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeIntLE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "limit",
        "limit",
        "offset",
        "value",
        "i",
        "byteLength",
        "mul",
        "value",
        "sub",
        "offset",
        "i",
        "sub",
        "offset",
        "i",
        "value",
        "mul",
        "sub",
        "offset",
        "byteLength",
        "Buffer",
        "writeIntBE",
        "value",
        "offset",
        "byteLength",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "byteLength",
        "checkInt",
        "value",
        "offset",
        "byteLength",
        "limit",
        "limit",
        "byteLength",
        "offset",
        "i",
        "value",
        "i",
        "mul",
        "value",
        "sub",
        "offset",
        "i",
        "sub",
        "offset",
        "i",
        "value",
        "mul",
        "sub",
        "offset",
        "byteLength",
        "Buffer",
        "writeInt8",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "value",
        "value",
        "value",
        "value",
        "value",
        "offset",
        "value",
        "offset",
        "Buffer",
        "writeInt16LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt16BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt16",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt32LE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "Buffer",
        "writeInt32BE",
        "value",
        "offset",
        "noAssert",
        "value",
        "value",
        "offset",
        "offset",
        "noAssert",
        "checkInt",
        "value",
        "offset",
        "value",
        "value",
        "value",
        "Buffer",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "offset",
        "value",
        "objectWriteUInt32",
        "value",
        "offset",
        "offset",
        "buf",
        "value",
        "offset",
        "ext",
        "max",
        "min",
        "offset",
        "ext",
        "buf",
        "RangeError",
        "offset",
        "RangeError",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "noAssert",
        "noAssert",
        "checkIEEE754",
        "buf",
        "value",
        "offset",
        "ieee754",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "offset",
        "Buffer",
        "writeFloatLE",
        "value",
        "offset",
        "noAssert",
        "writeFloat",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "writeFloatBE",
        "value",
        "offset",
        "noAssert",
        "writeFloat",
        "value",
        "offset",
        "noAssert",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "noAssert",
        "noAssert",
        "checkIEEE754",
        "buf",
        "value",
        "offset",
        "ieee754",
        "buf",
        "value",
        "offset",
        "littleEndian",
        "offset",
        "Buffer",
        "writeDoubleLE",
        "value",
        "offset",
        "noAssert",
        "writeDouble",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "writeDoubleBE",
        "value",
        "offset",
        "noAssert",
        "writeDouble",
        "value",
        "offset",
        "noAssert",
        "Buffer",
        "copy",
        "target",
        "targetStart",
        "start",
        "end",
        "start",
        "start",
        "end",
        "end",
        "end",
        "targetStart",
        "target",
        "targetStart",
        "target",
        "targetStart",
        "targetStart",
        "end",
        "end",
        "start",
        "end",
        "start",
        "end",
        "start",
        "target",
        "targetStart",
        "RangeError",
        "start",
        "start",
        "RangeError",
        "end",
        "RangeError",
        "end",
        "end",
        "target",
        "targetStart",
        "end",
        "start",
        "end",
        "target",
        "targetStart",
        "start",
        "end",
        "start",
        "target",
        "start",
        "targetStart",
        "targetStart",
        "end",
        "i",
        "len",
        "i",
        "i",
        "target",
        "i",
        "targetStart",
        "i",
        "start",
        "len",
        "Buffer",
        "i",
        "i",
        "len",
        "i",
        "target",
        "i",
        "targetStart",
        "i",
        "start",
        "Uint8Array",
        "target",
        "start",
        "start",
        "len",
        "targetStart",
        "len",
        "Buffer",
        "fill",
        "val",
        "start",
        "end",
        "encoding",
        "val",
        "start",
        "encoding",
        "start",
        "start",
        "end",
        "end",
        "encoding",
        "end",
        "end",
        "val",
        "val",
        "code",
        "val",
        "code",
        "encoding",
        "encoding",
        "encoding",
        "Buffer",
        "encoding",
        "encoding",
        "val",
        "val",
        "val",
        "start",
        "start",
        "end",
        "RangeError",
        "end",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "val",
        "val",
        "val",
        "i",
        "start",
        "i",
        "end",
        "i",
        "i",
        "val",
        "Buffer",
        "val",
        "val",
        "utf8ToBytes",
        "Buffer",
        "val",
        "encoding",
        "i",
        "i",
        "end",
        "start",
        "i",
        "i",
        "start",
        "i",
        "len",
        "stringtrim",
        "INVALID_BASE64_RE",
        "n",
        "n",
        "n",
        "n",
        "units",
        "units",
        "units",
        "Infinity",
        "i",
        "length",
        "i",
        "codePoint",
        "i",
        "codePoint",
        "codePoint",
        "leadSurrogate",
        "codePoint",
        "units",
        "i",
        "length",
        "units",
        "leadSurrogate",
        "codePoint",
        "codePoint",
        "units",
        "leadSurrogate",
        "codePoint",
        "codePoint",
        "leadSurrogate",
        "codePoint",
        "leadSurrogate",
        "units",
        "leadSurrogate",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "units",
        "codePoint",
        "codePoint",
        "codePoint",
        "codePoint",
        "i",
        "i",
        "byteArray",
        "i",
        "byteArray",
        "units",
        "i",
        "i",
        "units",
        "c",
        "i",
        "hi",
        "c",
        "lo",
        "c",
        "byteArray",
        "lo",
        "byteArray",
        "hi",
        "byteArray",
        "base64",
        "base64clean",
        "src",
        "dst",
        "offset",
        "length",
        "i",
        "length",
        "i",
        "i",
        "offset",
        "dst",
        "i",
        "src",
        "dst",
        "i",
        "offset",
        "src",
        "i",
        "i",
        "val",
        "val",
        "val",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "Stream",
        "__webpack_require__",
        "__webpack_require__",
        "inherits",
        "Stream",
        "EE",
        "Stream",
        "__webpack_require__",
        "Stream",
        "__webpack_require__",
        "Stream",
        "__webpack_require__",
        "Stream",
        "__webpack_require__",
        "Stream",
        "__webpack_require__",
        "Stream",
        "Stream",
        "EE",
        "Stream",
        "dest",
        "options",
        "chunk",
        "dest",
        "dest",
        "chunk",
        "source",
        "source",
        "source",
        "ondata",
        "source",
        "source",
        "source",
        "dest",
        "ondrain",
        "dest",
        "options",
        "options",
        "source",
        "onend",
        "source",
        "onclose",
        "didOnEnd",
        "didOnEnd",
        "dest",
        "didOnEnd",
        "didOnEnd",
        "dest",
        "dest",
        "er",
        "cleanup",
        "EE",
        "er",
        "source",
        "onerror",
        "dest",
        "onerror",
        "source",
        "ondata",
        "dest",
        "ondrain",
        "source",
        "onend",
        "source",
        "onclose",
        "source",
        "onerror",
        "dest",
        "onerror",
        "source",
        "cleanup",
        "source",
        "cleanup",
        "dest",
        "cleanup",
        "source",
        "cleanup",
        "source",
        "cleanup",
        "dest",
        "cleanup",
        "dest",
        "source",
        "dest",
        "exports",
        "inherits",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "ctor",
        "inherits",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "TempCtor",
        "superCtor",
        "ctor",
        "TempCtor",
        "ctor",
        "ctor",
        "exports",
        "setTimeout",
        "cachedSetTimeout",
        "setTimeout",
        "cachedSetTimeout",
        "defaultSetTimout",
        "e",
        "cachedSetTimeout",
        "defaultSetTimout",
        "clearTimeout",
        "cachedClearTimeout",
        "clearTimeout",
        "cachedClearTimeout",
        "defaultClearTimeout",
        "e",
        "cachedClearTimeout",
        "defaultClearTimeout",
        "fun",
        "cachedSetTimeout",
        "setTimeout",
        "setTimeout",
        "fun",
        "cachedSetTimeout",
        "defaultSetTimout",
        "cachedSetTimeout",
        "setTimeout",
        "cachedSetTimeout",
        "setTimeout",
        "setTimeout",
        "fun",
        "cachedSetTimeout",
        "fun",
        "e",
        "cachedSetTimeout",
        "fun",
        "e",
        "cachedSetTimeout",
        "fun",
        "marker",
        "cachedClearTimeout",
        "clearTimeout",
        "clearTimeout",
        "marker",
        "cachedClearTimeout",
        "defaultClearTimeout",
        "cachedClearTimeout",
        "clearTimeout",
        "cachedClearTimeout",
        "clearTimeout",
        "clearTimeout",
        "marker",
        "cachedClearTimeout",
        "marker",
        "e",
        "cachedClearTimeout",
        "marker",
        "e",
        "cachedClearTimeout",
        "marker",
        "draining",
        "currentQueue",
        "draining",
        "currentQueue",
        "queue",
        "currentQueue",
        "queue",
        "queueIndex",
        "queue",
        "drainQueue",
        "draining",
        "runTimeout",
        "cleanUpNextTick",
        "draining",
        "queue",
        "len",
        "currentQueue",
        "queue",
        "queue",
        "queueIndex",
        "len",
        "currentQueue",
        "currentQueue",
        "queueIndex",
        "queueIndex",
        "len",
        "queue",
        "currentQueue",
        "draining",
        "runClearTimeout",
        "timeout",
        "process",
        "fun",
        "arguments",
        "arguments",
        "i",
        "arguments",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "queue",
        "Item",
        "fun",
        "args",
        "queue",
        "draining",
        "runTimeout",
        "drainQueue",
        "fun",
        "array",
        "fun",
        "array",
        "Item",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "noop",
        "process",
        "name",
        "process",
        "name",
        "process",
        "process",
        "dir",
        "process",
        "exports",
        "__webpack_require__",
        "process",
        "exports",
        "f",
        "isString",
        "f",
        "i",
        "arguments",
        "i",
        "objects",
        "inspect",
        "arguments",
        "i",
        "objects",
        "args",
        "f",
        "formatRegExp",
        "x",
        "x",
        "i",
        "len",
        "x",
        "x",
        "args",
        "i",
        "args",
        "i",
        "args",
        "i",
        "_",
        "x",
        "args",
        "i",
        "i",
        "len",
        "x",
        "args",
        "i",
        "isNull",
        "x",
        "isObject",
        "x",
        "x",
        "inspect",
        "x",
        "exports",
        "fn",
        "msg",
        "isUndefined",
        "exports",
        "fn",
        "msg",
        "arguments",
        "process",
        "fn",
        "warned",
        "process",
        "msg",
        "process",
        "msg",
        "msg",
        "warned",
        "fn",
        "arguments",
        "deprecated",
        "exports",
        "isUndefined",
        "debugEnviron",
        "debugEnviron",
        "process",
        "debugs",
        "debugEnviron",
        "process",
        "debugs",
        "exports",
        "exports",
        "arguments",
        "pid",
        "msg",
        "debugs",
        "debugs",
        "obj",
        "opts",
        "stylizeNoColor",
        "arguments",
        "ctx",
        "arguments",
        "arguments",
        "ctx",
        "arguments",
        "isBoolean",
        "opts",
        "ctx",
        "opts",
        "opts",
        "exports",
        "ctx",
        "opts",
        "isUndefined",
        "ctx",
        "ctx",
        "isUndefined",
        "ctx",
        "ctx",
        "isUndefined",
        "ctx",
        "ctx",
        "isUndefined",
        "ctx",
        "ctx",
        "ctx",
        "ctx",
        "stylizeWithColor",
        "formatValue",
        "ctx",
        "obj",
        "ctx",
        "exports",
        "inspect",
        "inspect",
        "inspect",
        "styleType",
        "inspect",
        "styleType",
        "style",
        "inspect",
        "style",
        "inspect",
        "style",
        "styleType",
        "array",
        "array",
        "val",
        "idx",
        "hash",
        "val",
        "hash",
        "ctx",
        "value",
        "recurseTimes",
        "ctx",
        "value",
        "isFunction",
        "value",
        "value",
        "exports",
        "value",
        "value",
        "value",
        "value",
        "recurseTimes",
        "ctx",
        "isString",
        "ret",
        "ret",
        "formatValue",
        "ctx",
        "ret",
        "recurseTimes",
        "ret",
        "formatPrimitive",
        "ctx",
        "value",
        "primitive",
        "primitive",
        "value",
        "arrayToHash",
        "keys",
        "ctx",
        "keys",
        "value",
        "isError",
        "value",
        "keys",
        "keys",
        "formatError",
        "value",
        "keys",
        "isFunction",
        "value",
        "value",
        "value",
        "ctx",
        "name",
        "isRegExp",
        "value",
        "ctx",
        "value",
        "isDate",
        "value",
        "ctx",
        "value",
        "isError",
        "value",
        "formatError",
        "value",
        "isArray",
        "value",
        "array",
        "braces",
        "isFunction",
        "value",
        "value",
        "value",
        "n",
        "isRegExp",
        "value",
        "value",
        "isDate",
        "value",
        "value",
        "isError",
        "value",
        "formatError",
        "value",
        "keys",
        "array",
        "value",
        "braces",
        "braces",
        "recurseTimes",
        "isRegExp",
        "value",
        "ctx",
        "value",
        "ctx",
        "ctx",
        "value",
        "array",
        "output",
        "formatArray",
        "ctx",
        "value",
        "recurseTimes",
        "visibleKeys",
        "keys",
        "output",
        "keys",
        "key",
        "formatProperty",
        "ctx",
        "value",
        "recurseTimes",
        "visibleKeys",
        "key",
        "array",
        "ctx",
        "reduceToSingleString",
        "output",
        "braces",
        "ctx",
        "value",
        "isUndefined",
        "value",
        "ctx",
        "isString",
        "value",
        "value",
        "ctx",
        "simple",
        "isNumber",
        "value",
        "ctx",
        "value",
        "isBoolean",
        "value",
        "ctx",
        "value",
        "isNull",
        "value",
        "ctx",
        "value",
        "value",
        "ctx",
        "value",
        "recurseTimes",
        "visibleKeys",
        "keys",
        "value",
        "i",
        "l",
        "i",
        "hasOwnProperty",
        "value",
        "i",
        "output",
        "formatProperty",
        "ctx",
        "value",
        "recurseTimes",
        "visibleKeys",
        "i",
        "output",
        "keys",
        "key",
        "key",
        "output",
        "formatProperty",
        "ctx",
        "value",
        "recurseTimes",
        "visibleKeys",
        "key",
        "output",
        "ctx",
        "value",
        "recurseTimes",
        "visibleKeys",
        "key",
        "array",
        "desc",
        "value",
        "key",
        "value",
        "key",
        "desc",
        "desc",
        "ctx",
        "ctx",
        "desc",
        "ctx",
        "hasOwnProperty",
        "visibleKeys",
        "key",
        "name",
        "key",
        "ctx",
        "desc",
        "isNull",
        "recurseTimes",
        "formatValue",
        "ctx",
        "desc",
        "formatValue",
        "ctx",
        "desc",
        "recurseTimes",
        "array",
        "line",
        "line",
        "line",
        "line",
        "ctx",
        "isUndefined",
        "name",
        "array",
        "key",
        "name",
        "key",
        "name",
        "name",
        "name",
        "name",
        "name",
        "ctx",
        "name",
        "name",
        "name",
        "name",
        "ctx",
        "name",
        "name",
        "output",
        "braces",
        "output",
        "prev",
        "cur",
        "numLinesEst",
        "cur",
        "numLinesEst",
        "prev",
        "cur",
        "length",
        "braces",
        "output",
        "braces",
        "braces",
        "output",
        "braces",
        "ar",
        "ar",
        "exports",
        "isArray",
        "arg",
        "arg",
        "exports",
        "isBoolean",
        "arg",
        "arg",
        "exports",
        "isNull",
        "arg",
        "arg",
        "exports",
        "isNullOrUndefined",
        "arg",
        "arg",
        "exports",
        "isNumber",
        "arg",
        "arg",
        "exports",
        "isString",
        "arg",
        "arg",
        "exports",
        "isSymbol",
        "arg",
        "arg",
        "exports",
        "isUndefined",
        "re",
        "isObject",
        "re",
        "objectToString",
        "re",
        "exports",
        "isRegExp",
        "arg",
        "arg",
        "arg",
        "exports",
        "isObject",
        "d",
        "isObject",
        "d",
        "objectToString",
        "d",
        "exports",
        "isDate",
        "e",
        "isObject",
        "e",
        "objectToString",
        "e",
        "e",
        "exports",
        "isError",
        "arg",
        "arg",
        "exports",
        "isFunction",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "exports",
        "isPrimitive",
        "exports",
        "__webpack_require__",
        "o",
        "o",
        "n",
        "n",
        "n",
        "n",
        "pad",
        "d",
        "pad",
        "d",
        "pad",
        "d",
        "d",
        "months",
        "d",
        "time",
        "exports",
        "timestamp",
        "exports",
        "exports",
        "arguments",
        "exports",
        "__webpack_require__",
        "exports",
        "origin",
        "add",
        "add",
        "isObject",
        "add",
        "origin",
        "add",
        "keys",
        "i",
        "origin",
        "keys",
        "i",
        "add",
        "keys",
        "i",
        "origin",
        "obj",
        "prop",
        "obj",
        "prop",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "obj",
        "key",
        "obj",
        "keys",
        "key",
        "keys",
        "Duplex",
        "__webpack_require__",
        "__webpack_require__",
        "util",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "util",
        "Duplex",
        "Readable",
        "objectKeys",
        "Writable",
        "v",
        "keys",
        "v",
        "keys",
        "v",
        "Duplex",
        "method",
        "Duplex",
        "method",
        "Writable",
        "method",
        "options",
        "Duplex",
        "Duplex",
        "options",
        "Readable",
        "options",
        "Writable",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "onend",
        "processNextTick",
        "onEndNT",
        "xs",
        "f",
        "xs",
        "i",
        "l",
        "i",
        "f",
        "xs",
        "i",
        "i",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "exports",
        "exports",
        "exports",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "g",
        "g",
        "g",
        "eval",
        "e",
        "g",
        "g",
        "exports",
        "__webpack_require__",
        "Buffer",
        "arg",
        "arg",
        "objectToString",
        "arg",
        "exports",
        "isArray",
        "arg",
        "arg",
        "exports",
        "isBoolean",
        "arg",
        "arg",
        "exports",
        "isNull",
        "arg",
        "arg",
        "exports",
        "isNullOrUndefined",
        "arg",
        "arg",
        "exports",
        "isNumber",
        "arg",
        "arg",
        "exports",
        "isString",
        "arg",
        "arg",
        "exports",
        "isSymbol",
        "arg",
        "arg",
        "exports",
        "isUndefined",
        "re",
        "objectToString",
        "re",
        "exports",
        "isRegExp",
        "arg",
        "arg",
        "arg",
        "exports",
        "isObject",
        "d",
        "objectToString",
        "d",
        "exports",
        "isDate",
        "e",
        "objectToString",
        "e",
        "e",
        "exports",
        "isError",
        "arg",
        "arg",
        "exports",
        "isFunction",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "exports",
        "isPrimitive",
        "exports",
        "Buffer",
        "o",
        "o",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "Buffer",
        "promise",
        "stream",
        "stream",
        "stream",
        "resolve",
        "reject",
        "stream",
        "result",
        "results",
        "result",
        "resolve",
        "Buffer",
        "results",
        "Buffer",
        "results",
        "results",
        "reject",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "options",
        "defaults",
        "options",
        "options",
        "defaults",
        "key",
        "options",
        "key",
        "options",
        "key",
        "clone",
        "defaults",
        "key",
        "options",
        "exports",
        "__webpack_require__",
        "Buffer",
        "obj",
        "obj",
        "nativeMap",
        "_",
        "nativeMap",
        "nativeSet",
        "_",
        "nativeSet",
        "nativePromise",
        "_",
        "nativePromise",
        "parent",
        "circular",
        "depth",
        "prototype",
        "includeNonEnumerable",
        "circular",
        "depth",
        "circular",
        "prototype",
        "circular",
        "includeNonEnumerable",
        "circular",
        "circular",
        "circular",
        "Buffer",
        "circular",
        "circular",
        "depth",
        "depth",
        "Infinity",
        "parent",
        "depth",
        "parent",
        "depth",
        "parent",
        "parent",
        "parent",
        "_instanceof",
        "parent",
        "nativeMap",
        "child",
        "nativeMap",
        "_instanceof",
        "parent",
        "nativeSet",
        "child",
        "nativeSet",
        "_instanceof",
        "parent",
        "nativePromise",
        "child",
        "nativePromise",
        "resolve",
        "reject",
        "parent",
        "value",
        "resolve",
        "_clone",
        "value",
        "depth",
        "err",
        "reject",
        "_clone",
        "err",
        "depth",
        "clone",
        "parent",
        "child",
        "clone",
        "parent",
        "child",
        "parent",
        "__getRegExpFlags",
        "parent",
        "parent",
        "child",
        "parent",
        "clone",
        "parent",
        "child",
        "parent",
        "useBuffer",
        "Buffer",
        "parent",
        "child",
        "Buffer",
        "parent",
        "parent",
        "child",
        "child",
        "_instanceof",
        "parent",
        "child",
        "parent",
        "prototype",
        "proto",
        "parent",
        "child",
        "proto",
        "child",
        "prototype",
        "proto",
        "prototype",
        "circular",
        "allParents",
        "parent",
        "index",
        "allChildren",
        "index",
        "allParents",
        "parent",
        "allChildren",
        "child",
        "_instanceof",
        "parent",
        "nativeMap",
        "parent",
        "value",
        "key",
        "_clone",
        "key",
        "depth",
        "_clone",
        "value",
        "depth",
        "child",
        "keyChild",
        "valueChild",
        "_instanceof",
        "parent",
        "nativeSet",
        "parent",
        "value",
        "_clone",
        "value",
        "depth",
        "child",
        "entryChild",
        "i",
        "parent",
        "proto",
        "attrs",
        "proto",
        "i",
        "attrs",
        "attrs",
        "child",
        "i",
        "_clone",
        "parent",
        "i",
        "depth",
        "parent",
        "i",
        "symbols",
        "i",
        "symbols",
        "i",
        "parent",
        "symbol",
        "descriptor",
        "descriptor",
        "includeNonEnumerable",
        "child",
        "symbol",
        "_clone",
        "parent",
        "symbol",
        "depth",
        "descriptor",
        "child",
        "symbol",
        "includeNonEnumerable",
        "parent",
        "i",
        "allPropertyNames",
        "i",
        "allPropertyNames",
        "i",
        "parent",
        "propertyName",
        "descriptor",
        "descriptor",
        "child",
        "propertyName",
        "_clone",
        "parent",
        "propertyName",
        "depth",
        "child",
        "propertyName",
        "child",
        "_clone",
        "parent",
        "depth",
        "clone",
        "clonePrototype",
        "parent",
        "parent",
        "c",
        "parent",
        "c",
        "o",
        "o",
        "clone",
        "__objToStr",
        "o",
        "o",
        "__objToStr",
        "o",
        "clone",
        "__isDate",
        "o",
        "o",
        "__objToStr",
        "o",
        "clone",
        "__isArray",
        "o",
        "o",
        "__objToStr",
        "o",
        "clone",
        "__isRegExp",
        "re",
        "re",
        "flags",
        "re",
        "flags",
        "re",
        "flags",
        "flags",
        "clone",
        "__getRegExpFlags",
        "clone",
        "clone",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "buffer",
        "buffer",
        "buffer",
        "exports",
        "alloc",
        "size",
        "fill",
        "encoding",
        "Buffer",
        "Buffer",
        "size",
        "fill",
        "encoding",
        "encoding",
        "size",
        "size",
        "MAX_LEN",
        "RangeError",
        "_fill",
        "enc",
        "_fill",
        "Buffer",
        "size",
        "_fill",
        "Buffer",
        "_fill",
        "enc",
        "fillBuf",
        "i",
        "size",
        "buf",
        "i",
        "fillBuf",
        "i",
        "flen",
        "buf",
        "_fill",
        "buf",
        "exports",
        "allocUnsafe",
        "size",
        "Buffer",
        "Buffer",
        "size",
        "size",
        "size",
        "MAX_LEN",
        "RangeError",
        "Buffer",
        "size",
        "exports",
        "value",
        "encodingOrOffset",
        "length",
        "Buffer",
        "Uint8Array",
        "Buffer",
        "Buffer",
        "value",
        "encodingOrOffset",
        "length",
        "value",
        "value",
        "Buffer",
        "value",
        "encodingOrOffset",
        "ArrayBuffer",
        "value",
        "ArrayBuffer",
        "arguments",
        "Buffer",
        "value",
        "offset",
        "offset",
        "len",
        "len",
        "value",
        "offset",
        "offset",
        "value",
        "RangeError",
        "len",
        "value",
        "offset",
        "RangeError",
        "Buffer",
        "value",
        "offset",
        "offset",
        "len",
        "Buffer",
        "value",
        "Buffer",
        "value",
        "value",
        "value",
        "value",
        "value",
        "ArrayBuffer",
        "value",
        "ArrayBuffer",
        "value",
        "Buffer",
        "value",
        "value",
        "value",
        "Buffer",
        "value",
        "exports",
        "allocUnsafeSlow",
        "size",
        "Buffer",
        "Buffer",
        "size",
        "size",
        "size",
        "MAX_LEN",
        "RangeError",
        "SlowBuffer",
        "size",
        "exports",
        "__webpack_require__",
        "exports",
        "arr",
        "toString",
        "arr",
        "exports",
        "__webpack_require__",
        "process",
        "process",
        "process",
        "process",
        "process",
        "nextTick",
        "process",
        "fn",
        "arg1",
        "arg2",
        "arg3",
        "fn",
        "arguments",
        "len",
        "process",
        "fn",
        "process",
        "afterTickOne",
        "fn",
        "arg1",
        "process",
        "afterTickTwo",
        "fn",
        "arg1",
        "arg2",
        "process",
        "afterTickThree",
        "fn",
        "arg1",
        "arg2",
        "arg3",
        "args",
        "len",
        "i",
        "i",
        "args",
        "args",
        "i",
        "arguments",
        "i",
        "process",
        "afterTick",
        "fn",
        "args",
        "exports",
        "__webpack_require__",
        "exports",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "n",
        "isNumber",
        "n",
        "n",
        "isNaN",
        "n",
        "n",
        "EventEmitter",
        "isObject",
        "er",
        "arguments",
        "er",
        "er",
        "er",
        "err",
        "er",
        "err",
        "handler",
        "isUndefined",
        "handler",
        "isFunction",
        "handler",
        "arguments",
        "handler",
        "handler",
        "arguments",
        "handler",
        "arguments",
        "arguments",
        "args",
        "arguments",
        "handler",
        "args",
        "isObject",
        "handler",
        "args",
        "arguments",
        "listeners",
        "handler",
        "len",
        "listeners",
        "i",
        "i",
        "len",
        "i",
        "listeners",
        "i",
        "args",
        "EventEmitter",
        "listener",
        "isFunction",
        "listener",
        "isFunction",
        "listener",
        "listener",
        "listener",
        "listener",
        "isObject",
        "listener",
        "listener",
        "isObject",
        "isUndefined",
        "m",
        "m",
        "EventEmitter",
        "m",
        "m",
        "m",
        "EventEmitter",
        "EventEmitter",
        "EventEmitter",
        "listener",
        "isFunction",
        "listener",
        "g",
        "fired",
        "fired",
        "listener",
        "arguments",
        "g",
        "listener",
        "g",
        "EventEmitter",
        "listener",
        "isFunction",
        "listener",
        "length",
        "position",
        "listener",
        "isFunction",
        "listener",
        "listener",
        "isObject",
        "i",
        "length",
        "i",
        "i",
        "listener",
        "i",
        "i",
        "listener",
        "position",
        "i",
        "position",
        "position",
        "listener",
        "EventEmitter",
        "arguments",
        "arguments",
        "key",
        "key",
        "key",
        "listeners",
        "isFunction",
        "listeners",
        "listeners",
        "listeners",
        "listeners",
        "listeners",
        "listeners",
        "EventEmitter",
        "ret",
        "isFunction",
        "ret",
        "ret",
        "ret",
        "EventEmitter",
        "isFunction",
        "evlistener",
        "evlistener",
        "evlistener",
        "EventEmitter",
        "emitter",
        "emitter",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "exports",
        "__webpack_require__",
        "process",
        "setImmediate",
        "Writable",
        "__webpack_require__",
        "process",
        "process",
        "setImmediate",
        "processNextTick",
        "Writable",
        "WritableState",
        "__webpack_require__",
        "util",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "util",
        "Writable",
        "Stream",
        "chunk",
        "encoding",
        "cb",
        "chunk",
        "encoding",
        "cb",
        "options",
        "stream",
        "Duplex",
        "Duplex",
        "__webpack_require__",
        "options",
        "options",
        "options",
        "stream",
        "Duplex",
        "options",
        "options",
        "hwm",
        "hwm",
        "hwm",
        "defaultHwm",
        "options",
        "noDecode",
        "options",
        "er",
        "onwrite",
        "stream",
        "er",
        "CorkedRequest",
        "WritableState",
        "getBuffer",
        "current",
        "current",
        "current",
        "current",
        "WritableState",
        "internalUtil",
        "_",
        "realHasInstance",
        "Writable",
        "realHasInstance",
        "WritableState",
        "realHasInstance",
        "options",
        "Duplex",
        "Duplex",
        "__webpack_require__",
        "realHasInstance",
        "Writable",
        "Duplex",
        "Writable",
        "options",
        "WritableState",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "Stream",
        "Writable",
        "stream",
        "cb",
        "stream",
        "er",
        "processNextTick",
        "cb",
        "er",
        "stream",
        "state",
        "chunk",
        "cb",
        "chunk",
        "er",
        "chunk",
        "chunk",
        "state",
        "er",
        "er",
        "stream",
        "er",
        "processNextTick",
        "cb",
        "er",
        "valid",
        "valid",
        "Writable",
        "chunk",
        "encoding",
        "cb",
        "Buffer",
        "chunk",
        "encoding",
        "cb",
        "encoding",
        "encoding",
        "isBuf",
        "encoding",
        "encoding",
        "encoding",
        "state",
        "cb",
        "cb",
        "nop",
        "state",
        "writeAfterEnd",
        "cb",
        "isBuf",
        "validChunk",
        "state",
        "chunk",
        "cb",
        "state",
        "ret",
        "writeOrBuffer",
        "state",
        "isBuf",
        "chunk",
        "encoding",
        "cb",
        "ret",
        "Writable",
        "state",
        "Writable",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "clearBuffer",
        "state",
        "Writable",
        "setDefaultEncoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "state",
        "chunk",
        "encoding",
        "state",
        "state",
        "chunk",
        "chunk",
        "bufferShim",
        "chunk",
        "encoding",
        "chunk",
        "stream",
        "state",
        "isBuf",
        "chunk",
        "encoding",
        "cb",
        "isBuf",
        "chunk",
        "decodeChunk",
        "state",
        "chunk",
        "encoding",
        "Buffer",
        "chunk",
        "encoding",
        "state",
        "chunk",
        "state",
        "len",
        "state",
        "state",
        "ret",
        "state",
        "state",
        "state",
        "state",
        "state",
        "WriteReq",
        "chunk",
        "encoding",
        "cb",
        "last",
        "last",
        "state",
        "state",
        "state",
        "state",
        "doWrite",
        "stream",
        "state",
        "len",
        "chunk",
        "encoding",
        "cb",
        "ret",
        "stream",
        "state",
        "writev",
        "len",
        "chunk",
        "encoding",
        "cb",
        "state",
        "len",
        "state",
        "cb",
        "state",
        "state",
        "writev",
        "stream",
        "chunk",
        "state",
        "stream",
        "chunk",
        "encoding",
        "state",
        "state",
        "stream",
        "state",
        "sync",
        "er",
        "cb",
        "state",
        "sync",
        "processNextTick",
        "cb",
        "er",
        "cb",
        "er",
        "stream",
        "stream",
        "er",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "stream",
        "er",
        "stream",
        "state",
        "state",
        "onwriteStateUpdate",
        "state",
        "er",
        "onwriteError",
        "stream",
        "state",
        "sync",
        "er",
        "cb",
        "needFinish",
        "state",
        "finished",
        "state",
        "state",
        "state",
        "clearBuffer",
        "stream",
        "state",
        "sync",
        "asyncWrite",
        "afterWrite",
        "stream",
        "state",
        "finished",
        "cb",
        "afterWrite",
        "stream",
        "state",
        "finished",
        "cb",
        "stream",
        "state",
        "finished",
        "cb",
        "finished",
        "onwriteDrain",
        "stream",
        "state",
        "state",
        "cb",
        "finishMaybe",
        "stream",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "state",
        "stream",
        "stream",
        "state",
        "state",
        "state",
        "stream",
        "entry",
        "entry",
        "state",
        "l",
        "state",
        "holder",
        "entry",
        "entry",
        "buffer",
        "count",
        "entry",
        "entry",
        "entry",
        "count",
        "doWrite",
        "stream",
        "state",
        "state",
        "buffer",
        "holder",
        "state",
        "state",
        "holder",
        "state",
        "holder",
        "holder",
        "state",
        "CorkedRequest",
        "state",
        "entry",
        "entry",
        "entry",
        "entry",
        "state",
        "chunk",
        "doWrite",
        "stream",
        "state",
        "len",
        "chunk",
        "encoding",
        "cb",
        "entry",
        "entry",
        "state",
        "entry",
        "state",
        "state",
        "state",
        "entry",
        "state",
        "Writable",
        "chunk",
        "encoding",
        "cb",
        "cb",
        "Writable",
        "Writable",
        "chunk",
        "encoding",
        "cb",
        "chunk",
        "cb",
        "chunk",
        "chunk",
        "encoding",
        "encoding",
        "cb",
        "encoding",
        "encoding",
        "chunk",
        "chunk",
        "chunk",
        "encoding",
        "state",
        "state",
        "state",
        "state",
        "endWritable",
        "state",
        "cb",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "stream",
        "stream",
        "state",
        "needFinish",
        "state",
        "need",
        "state",
        "prefinish",
        "stream",
        "state",
        "state",
        "stream",
        "prefinish",
        "stream",
        "state",
        "need",
        "stream",
        "state",
        "cb",
        "state",
        "finishMaybe",
        "stream",
        "state",
        "cb",
        "state",
        "processNextTick",
        "cb",
        "stream",
        "cb",
        "state",
        "stream",
        "state",
        "err",
        "_this",
        "_this",
        "entry",
        "entry",
        "state",
        "cb",
        "err",
        "entry",
        "entry",
        "state",
        "state",
        "_this",
        "state",
        "_this",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "opts",
        "defaults",
        "opts",
        "Transform",
        "util",
        "FormatStream",
        "Transform",
        "FormatStream",
        "clean",
        "text",
        "text",
        "text",
        "reHesitation",
        "reRepeatedCharacter",
        "reDUnderscoreWords",
        "text",
        "text",
        "text",
        "FormatStream",
        "capitalize",
        "text",
        "text",
        "text",
        "FormatStream",
        "period",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "text",
        "FormatStream",
        "chunk",
        "encoding",
        "next",
        "chunk",
        "next",
        "FormatStream",
        "formatResult",
        "result",
        "encoding",
        "next",
        "result",
        "next",
        "FormatStream",
        "isInterim",
        "isInterim",
        "FormatStream",
        "formatResult",
        "data",
        "data",
        "clone",
        "data",
        "data",
        "data",
        "result",
        "i",
        "result",
        "i",
        "data",
        "result",
        "result",
        "alt",
        "alt",
        "alt",
        "textFinal",
        "alt",
        "alt",
        "alt",
        "ts",
        "j",
        "arr",
        "ts",
        "ts",
        "j",
        "ts",
        "ts",
        "j",
        "arr",
        "textFinal",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "alt",
        "data",
        "FormatStream",
        "__webpack_require__",
        "FormatStream",
        "exports",
        "__webpack_require__",
        "process",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "options",
        "options",
        "options",
        "options",
        "Duplex",
        "options",
        "options",
        "options",
        "util",
        "RecognizeStream",
        "Duplex",
        "RecognizeStream",
        "RecognizeStream",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "util",
        "options",
        "pick",
        "options",
        "QUERY_PARAMS_ALLOWED",
        "pick",
        "options",
        "QUERY_PARAMS_ALLOWED",
        "qs",
        "queryParams",
        "options",
        "queryString",
        "pick",
        "options",
        "OPENING_MESSAGE_PARAMS_ALLOWED",
        "openingMessage",
        "W3CWebSocket",
        "url",
        "options",
        "socket",
        "err",
        "RecognizeStream",
        "err",
        "err",
        "openingMessage",
        "e",
        "e",
        "e",
        "msg",
        "frame",
        "err",
        "err",
        "err",
        "msg",
        "err",
        "err",
        "msg",
        "err",
        "frame",
        "err",
        "socket",
        "frame",
        "frame",
        "emitError",
        "frame",
        "data",
        "frame",
        "jsonEx",
        "emitError",
        "frame",
        "jsonEx",
        "frame",
        "data",
        "data",
        "emitError",
        "data",
        "frame",
        "data",
        "socket",
        "options",
        "data",
        "data",
        "data",
        "result",
        "result",
        "result",
        "result",
        "RecognizeStream",
        "sendJSON",
        "msg",
        "msg",
        "msg",
        "RecognizeStream",
        "sendData",
        "data",
        "data",
        "data",
        "RecognizeStream",
        "RecognizeStream",
        "RecognizeStream",
        "chunk",
        "encoding",
        "callback",
        "RecognizeStream",
        "chunk",
        "ct",
        "ct",
        "err",
        "RecognizeStream",
        "err",
        "chunk",
        "callback",
        "chunk",
        "callback",
        "RecognizeStream",
        "afterSend",
        "next",
        "process",
        "next",
        "setTimeout",
        "next",
        "RecognizeStream",
        "RecognizeStream",
        "finish",
        "closingMessage",
        "closingMessage",
        "RecognizeStream",
        "__webpack_require__",
        "RecognizeStream",
        "buffer",
        "contentType",
        "buffer",
        "RecognizeStream",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "options",
        "options",
        "options",
        "options",
        "Transform",
        "options",
        "util",
        "ResultStream",
        "Transform",
        "ResultStream",
        "data",
        "encoding",
        "next",
        "data",
        "data",
        "result",
        "clone",
        "result",
        "cloned",
        "data",
        "cloned",
        "data",
        "next",
        "ResultStream",
        "__webpack_require__",
        "ResultStream",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "options",
        "options",
        "options",
        "options",
        "options",
        "Transform",
        "options",
        "util",
        "SpeakerStream",
        "Transform",
        "SpeakerStream",
        "SpeakerStream",
        "SpeakerStream",
        "speaker_label",
        "resultIndex",
        "timestampIndex",
        "result",
        "timestampIndex",
        "timestamp",
        "timestampIndex",
        "resultIndex",
        "result",
        "resultIndex",
        "timestamp",
        "result",
        "result",
        "timestampIndex",
        "timestamp",
        "timestamp",
        "FROM",
        "speaker_label",
        "timestamp",
        "TO",
        "speaker_label",
        "err",
        "SpeakerStream",
        "err",
        "speaker_label",
        "err",
        "timestamp",
        "err",
        "err",
        "err",
        "timestamp",
        "speaker_label",
        "result",
        "words",
        "words",
        "w",
        "w",
        "words",
        "arr",
        "word",
        "arr",
        "arr",
        "utterance",
        "utterance",
        "word",
        "utterance",
        "word",
        "utterance",
        "word",
        "word",
        "word",
        "arr",
        "utterance",
        "utterance",
        "word",
        "arr",
        "utterances",
        "utterance",
        "i",
        "utterances",
        "i",
        "utterance",
        "lastUtterance",
        "result",
        "result",
        "clone",
        "utterance",
        "result",
        "utterance",
        "result",
        "alt",
        "utterance",
        "ts",
        "ts",
        "WORD",
        "alt",
        "utterance",
        "result",
        "utterance",
        "utterance",
        "utterance",
        "utterance",
        "utterance",
        "walt",
        "walt",
        "start",
        "walt",
        "end",
        "result",
        "alts",
        "utterance",
        "original_keywords_result",
        "original_keywords_result",
        "keyword",
        "original_keywords_result",
        "keyword",
        "spotting",
        "spotting",
        "start",
        "spotting",
        "end",
        "spottings",
        "keywords_result",
        "keyword",
        "spottings",
        "result",
        "keywords_result",
        "result",
        "results",
        "SpeakerStream",
        "data",
        "noTimestamps",
        "data",
        "err",
        "noTimestamps",
        "err",
        "data",
        "result",
        "result",
        "result",
        "result",
        "SpeakerStream",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "SpeakerStream",
        "data",
        "data",
        "pullAllWith",
        "speaker_labels",
        "old",
        "nw",
        "old",
        "nw",
        "old",
        "nw",
        "data",
        "SpeakerStream",
        "SpeakerStream",
        "data",
        "encoding",
        "next",
        "data",
        "data",
        "data",
        "data",
        "message",
        "message",
        "message",
        "data",
        "data",
        "data",
        "message",
        "data",
        "data",
        "message",
        "message",
        "message",
        "next",
        "SpeakerStream",
        "done",
        "r",
        "r",
        "a",
        "b",
        "a",
        "b",
        "timestamps",
        "timestamps",
        "msg",
        "msg",
        "timestamps",
        "msg",
        "err",
        "SpeakerStream",
        "err",
        "err",
        "err",
        "done",
        "SpeakerStream",
        "__webpack_require__",
        "SpeakerStream",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "options",
        "options",
        "defaults",
        "options",
        "options",
        "options",
        "options",
        "Writable",
        "options",
        "options",
        "propMap",
        "options",
        "options",
        "util",
        "WritableElementStream",
        "Writable",
        "WritableElementStream",
        "writeString",
        "text",
        "encoding",
        "next",
        "text",
        "next",
        "WritableElementStream",
        "writeObject",
        "data",
        "encoding",
        "next",
        "data",
        "data",
        "result",
        "result",
        "result",
        "result",
        "next",
        "WritableElementStream",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "Buffer",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "isBufferEncoding",
        "encoding",
        "encoding",
        "exports",
        "encoding",
        "encoding",
        "assertEncoding",
        "encoding",
        "utf16DetectIncompleteChar",
        "base64DetectIncompleteChar",
        "passThroughWrite",
        "Buffer",
        "StringDecoder",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "available",
        "available",
        "buffer",
        "buffer",
        "available",
        "buffer",
        "charStr",
        "charStr",
        "charStr",
        "charCode",
        "charCode",
        "charStr",
        "buffer",
        "charStr",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "end",
        "end",
        "charStr",
        "buffer",
        "end",
        "charStr",
        "charStr",
        "end",
        "charCode",
        "charCode",
        "size",
        "size",
        "size",
        "size",
        "buffer",
        "size",
        "charStr",
        "end",
        "charStr",
        "StringDecoder",
        "buffer",
        "buffer",
        "buffer",
        "i",
        "i",
        "buffer",
        "buffer",
        "i",
        "i",
        "c",
        "i",
        "c",
        "i",
        "c",
        "i",
        "StringDecoder",
        "buffer",
        "buffer",
        "buffer",
        "res",
        "buffer",
        "res",
        "buf",
        "cr",
        "enc",
        "res",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "buffer",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "isEnumerable",
        "isEnumerable",
        "o",
        "o",
        "ctor",
        "ctor",
        "o",
        "k",
        "excludedKeys",
        "k",
        "has",
        "k",
        "k",
        "k",
        "equalsConstructorPrototype",
        "k",
        "e",
        "e",
        "o",
        "hasAutomationEqualityBug",
        "equalsConstructorPrototype",
        "o",
        "equalsConstructorPrototype",
        "o",
        "e",
        "keys",
        "toStr",
        "isArgs",
        "isObject",
        "toStr",
        "isObject",
        "isFunction",
        "isArguments",
        "hasProtoEnumBug",
        "isFunction",
        "isString",
        "has",
        "i",
        "i",
        "theKeys",
        "i",
        "isArguments",
        "j",
        "j",
        "theKeys",
        "j",
        "name",
        "skipProto",
        "name",
        "has",
        "name",
        "theKeys",
        "name",
        "hasDontEnumBug",
        "equalsConstructorPrototypeIfNotBuggy",
        "k",
        "dontEnums",
        "k",
        "skipConstructor",
        "dontEnums",
        "k",
        "has",
        "dontEnums",
        "k",
        "theKeys",
        "dontEnums",
        "k",
        "theKeys",
        "keysShim",
        "shimObjectKeys",
        "arguments",
        "keysWorksWithArguments",
        "keys",
        "isArgs",
        "originalKeys",
        "originalKeys",
        "keysShim",
        "keysShim",
        "keysShim",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "pick",
        "obj",
        "keys",
        "isObject",
        "obj",
        "obj",
        "keys",
        "keys",
        "obj",
        "res",
        "keys",
        "obj",
        "keys",
        "res",
        "keys",
        "idx",
        "len",
        "keys",
        "idx",
        "key",
        "obj",
        "res",
        "key",
        "obj",
        "key",
        "res",
        "exports",
        "__webpack_require__",
        "root",
        "NotSupportedError",
        "NotSupportedError",
        "cb",
        "setTimeout",
        "cb",
        "err",
        "navigator",
        "navigatorExists",
        "navigator",
        "navigator",
        "navigatorExists",
        "navigator",
        "navigator",
        "navigator",
        "navigator",
        "constraints",
        "isPromiseSupported",
        "FakePromise",
        "gump",
        "navigator",
        "constraints",
        "resolve",
        "reject",
        "gum",
        "reject",
        "NotSupportedError",
        "gum",
        "navigator",
        "constraints",
        "resolve",
        "reject",
        "getUserMedia",
        "NotSupportedError",
        "getUserMedia",
        "isPromiseSupported",
        "gump",
        "gum",
        "__WEBPACK_AMD_DEFINE_ARRAY__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "getUserMedia",
        "exports",
        "__WEBPACK_AMD_DEFINE_ARRAY__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "getUserMedia",
        "root",
        "root",
        "root",
        "root",
        "root",
        "root",
        "getUserMedia",
        "exports",
        "__webpack_require__",
        "Buffer",
        "process",
        "__webpack_require__",
        "__webpack_require__",
        "stream",
        "opts",
        "opts",
        "opts",
        "bufferSize",
        "opts",
        "bufferSize",
        "Readable",
        "opts",
        "e",
        "recording",
        "opts",
        "e",
        "Buffer",
        "e",
        "AudioContext",
        "context",
        "stream",
        "context",
        "bufferSize",
        "inputChannels",
        "outputChannels",
        "recorder",
        "recorderProcess",
        "audioInput",
        "recorder",
        "recorder",
        "context",
        "context",
        "stream",
        "ex",
        "recorder",
        "audioInput",
        "context",
        "ex",
        "recording",
        "process",
        "context",
        "util",
        "MicrophoneStream",
        "Readable",
        "MicrophoneStream",
        "MicrophoneStream",
        "toFloat32",
        "chunk",
        "Float32Array",
        "chunk",
        "MicrophoneStream",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "i",
        "letters",
        "i",
        "letters",
        "i",
        "letters",
        "i",
        "k",
        "obj",
        "actual",
        "k",
        "actual",
        "thrower",
        "e",
        "thrower",
        "getPolyfill",
        "implementation",
        "lacksProperEnumerationOrder",
        "implementation",
        "assignHasPendingExceptions",
        "implementation",
        "exports",
        "__webpack_require__",
        "process",
        "Readable",
        "__webpack_require__",
        "__webpack_require__",
        "Readable",
        "ReadableState",
        "__webpack_require__",
        "emitter",
        "emitter",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "util",
        "__webpack_require__",
        "__webpack_require__",
        "debugUtil",
        "debugUtil",
        "debug",
        "debugUtil",
        "debug",
        "__webpack_require__",
        "util",
        "Readable",
        "Stream",
        "emitter",
        "fn",
        "emitter",
        "emitter",
        "fn",
        "emitter",
        "emitter",
        "emitter",
        "fn",
        "isArray",
        "emitter",
        "emitter",
        "fn",
        "emitter",
        "fn",
        "emitter",
        "options",
        "stream",
        "Duplex",
        "Duplex",
        "__webpack_require__",
        "options",
        "options",
        "options",
        "stream",
        "Duplex",
        "options",
        "options",
        "hwm",
        "hwm",
        "hwm",
        "defaultHwm",
        "BufferList",
        "options",
        "options",
        "StringDecoder",
        "StringDecoder",
        "__webpack_require__",
        "StringDecoder",
        "options",
        "options",
        "options",
        "Duplex",
        "Duplex",
        "__webpack_require__",
        "Readable",
        "Readable",
        "options",
        "ReadableState",
        "options",
        "options",
        "options",
        "options",
        "Stream",
        "Readable",
        "chunk",
        "encoding",
        "state",
        "chunk",
        "encoding",
        "encoding",
        "state",
        "encoding",
        "state",
        "chunk",
        "bufferShim",
        "chunk",
        "encoding",
        "encoding",
        "readableAddChunk",
        "state",
        "chunk",
        "encoding",
        "Readable",
        "chunk",
        "readableAddChunk",
        "state",
        "chunk",
        "Readable",
        "stream",
        "state",
        "chunk",
        "encoding",
        "addToFront",
        "chunkInvalid",
        "state",
        "chunk",
        "er",
        "stream",
        "er",
        "chunk",
        "state",
        "onEofChunk",
        "stream",
        "state",
        "state",
        "chunk",
        "chunk",
        "state",
        "addToFront",
        "stream",
        "e",
        "state",
        "addToFront",
        "stream",
        "_e",
        "state",
        "addToFront",
        "encoding",
        "chunk",
        "state",
        "chunk",
        "skipAdd",
        "state",
        "chunk",
        "addToFront",
        "state",
        "skipAdd",
        "state",
        "state",
        "state",
        "stream",
        "chunk",
        "stream",
        "state",
        "state",
        "chunk",
        "addToFront",
        "state",
        "chunk",
        "state",
        "chunk",
        "state",
        "emitReadable",
        "stream",
        "maybeReadMore",
        "stream",
        "state",
        "addToFront",
        "state",
        "needMoreData",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "Readable",
        "enc",
        "StringDecoder",
        "StringDecoder",
        "__webpack_require__",
        "StringDecoder",
        "enc",
        "enc",
        "n",
        "n",
        "MAX_HWM",
        "n",
        "MAX_HWM",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "state",
        "n",
        "state",
        "state",
        "state",
        "n",
        "n",
        "state",
        "state",
        "state",
        "state",
        "n",
        "state",
        "state",
        "computeNewHighWaterMark",
        "n",
        "n",
        "state",
        "n",
        "state",
        "state",
        "state",
        "Readable",
        "n",
        "debug",
        "n",
        "n",
        "parseInt",
        "n",
        "n",
        "state",
        "n",
        "state",
        "state",
        "state",
        "state",
        "debug",
        "state",
        "state",
        "state",
        "state",
        "endReadable",
        "emitReadable",
        "n",
        "howMuchToRead",
        "n",
        "state",
        "n",
        "state",
        "state",
        "endReadable",
        "state",
        "debug",
        "doRead",
        "state",
        "state",
        "n",
        "state",
        "doRead",
        "debug",
        "doRead",
        "state",
        "state",
        "doRead",
        "debug",
        "doRead",
        "doRead",
        "debug",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "n",
        "howMuchToRead",
        "nOrig",
        "state",
        "n",
        "ret",
        "fromList",
        "n",
        "state",
        "ret",
        "ret",
        "state",
        "n",
        "state",
        "n",
        "state",
        "state",
        "state",
        "nOrig",
        "n",
        "state",
        "endReadable",
        "ret",
        "ret",
        "ret",
        "state",
        "chunk",
        "Buffer",
        "chunk",
        "chunk",
        "chunk",
        "chunk",
        "state",
        "er",
        "er",
        "stream",
        "state",
        "state",
        "state",
        "state",
        "chunk",
        "chunk",
        "state",
        "chunk",
        "state",
        "state",
        "chunk",
        "state",
        "emitReadable",
        "stream",
        "stream",
        "stream",
        "state",
        "state",
        "debug",
        "state",
        "state",
        "state",
        "processNextTick",
        "emitReadable_",
        "stream",
        "emitReadable_",
        "stream",
        "stream",
        "debug",
        "stream",
        "flow",
        "stream",
        "stream",
        "state",
        "state",
        "state",
        "processNextTick",
        "maybeReadMore_",
        "stream",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "debug",
        "stream",
        "len",
        "state",
        "len",
        "state",
        "state",
        "Readable",
        "n",
        "Readable",
        "dest",
        "pipeOpts",
        "state",
        "state",
        "dest",
        "state",
        "state",
        "dest",
        "state",
        "dest",
        "state",
        "debug",
        "state",
        "pipeOpts",
        "pipeOpts",
        "pipeOpts",
        "dest",
        "process",
        "dest",
        "process",
        "doEnd",
        "onend",
        "cleanup",
        "state",
        "processNextTick",
        "endFn",
        "src",
        "endFn",
        "dest",
        "onunpipe",
        "readable",
        "debug",
        "readable",
        "src",
        "cleanup",
        "debug",
        "dest",
        "pipeOnDrain",
        "src",
        "dest",
        "ondrain",
        "debug",
        "dest",
        "onclose",
        "dest",
        "onfinish",
        "dest",
        "ondrain",
        "dest",
        "onerror",
        "dest",
        "onunpipe",
        "src",
        "onend",
        "src",
        "cleanup",
        "src",
        "ondata",
        "cleanedUp",
        "state",
        "dest",
        "dest",
        "ondrain",
        "src",
        "ondata",
        "chunk",
        "debug",
        "increasedAwaitDrain",
        "dest",
        "chunk",
        "ret",
        "increasedAwaitDrain",
        "state",
        "state",
        "dest",
        "state",
        "indexOf",
        "state",
        "dest",
        "cleanedUp",
        "debug",
        "src",
        "src",
        "increasedAwaitDrain",
        "src",
        "er",
        "debug",
        "er",
        "unpipe",
        "dest",
        "onerror",
        "EElistenerCount",
        "dest",
        "dest",
        "er",
        "prependListener",
        "dest",
        "onerror",
        "dest",
        "onfinish",
        "unpipe",
        "dest",
        "onclose",
        "debug",
        "dest",
        "onclose",
        "unpipe",
        "dest",
        "onfinish",
        "debug",
        "src",
        "dest",
        "dest",
        "src",
        "state",
        "debug",
        "src",
        "dest",
        "src",
        "src",
        "debug",
        "state",
        "state",
        "state",
        "state",
        "EElistenerCount",
        "src",
        "state",
        "flow",
        "src",
        "Readable",
        "dest",
        "state",
        "state",
        "dest",
        "dest",
        "state",
        "dest",
        "dest",
        "state",
        "state",
        "state",
        "state",
        "dest",
        "dest",
        "dest",
        "state",
        "state",
        "state",
        "state",
        "state",
        "i",
        "len",
        "i",
        "dests",
        "i",
        "indexOf",
        "state",
        "dest",
        "index",
        "state",
        "index",
        "state",
        "state",
        "state",
        "state",
        "dest",
        "Readable",
        "ev",
        "fn",
        "Stream",
        "ev",
        "fn",
        "ev",
        "ev",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "processNextTick",
        "nReadingNextTick",
        "state",
        "emitReadable",
        "state",
        "res",
        "Readable",
        "Readable",
        "debug",
        "Readable",
        "state",
        "debug",
        "state",
        "resume",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "processNextTick",
        "resume_",
        "stream",
        "state",
        "stream",
        "state",
        "state",
        "debug",
        "stream",
        "state",
        "state",
        "stream",
        "flow",
        "stream",
        "state",
        "state",
        "stream",
        "Readable",
        "debug",
        "debug",
        "stream",
        "stream",
        "debug",
        "state",
        "state",
        "stream",
        "Readable",
        "stream",
        "stream",
        "debug",
        "state",
        "state",
        "state",
        "chunk",
        "chunk",
        "chunk",
        "stream",
        "chunk",
        "debug",
        "state",
        "chunk",
        "state",
        "chunk",
        "state",
        "chunk",
        "chunk",
        "state",
        "chunk",
        "chunk",
        "chunk",
        "ret",
        "paused",
        "stream",
        "i",
        "stream",
        "i",
        "stream",
        "i",
        "i",
        "method",
        "stream",
        "method",
        "stream",
        "arguments",
        "i",
        "n",
        "kProxyEvents",
        "n",
        "stream",
        "kProxyEvents",
        "n",
        "kProxyEvents",
        "n",
        "n",
        "debug",
        "n",
        "paused",
        "paused",
        "stream",
        "Readable",
        "fromList",
        "n",
        "state",
        "state",
        "state",
        "ret",
        "state",
        "n",
        "n",
        "state",
        "state",
        "ret",
        "state",
        "state",
        "ret",
        "state",
        "ret",
        "state",
        "state",
        "state",
        "ret",
        "fromListPartial",
        "n",
        "state",
        "state",
        "ret",
        "n",
        "hasStrings",
        "n",
        "ret",
        "n",
        "n",
        "n",
        "ret",
        "ret",
        "hasStrings",
        "copyFromBufferString",
        "n",
        "copyFromBuffer",
        "n",
        "ret",
        "n",
        "p",
        "n",
        "ret",
        "p",
        "p",
        "p",
        "n",
        "n",
        "nb",
        "ret",
        "ret",
        "n",
        "n",
        "nb",
        "n",
        "nb",
        "c",
        "p",
        "p",
        "p",
        "p",
        "nb",
        "c",
        "c",
        "ret",
        "n",
        "bufferShim",
        "n",
        "p",
        "ret",
        "n",
        "p",
        "p",
        "p",
        "p",
        "n",
        "buf",
        "buf",
        "n",
        "buf",
        "ret",
        "ret",
        "n",
        "nb",
        "n",
        "nb",
        "n",
        "nb",
        "buf",
        "c",
        "p",
        "p",
        "p",
        "p",
        "buf",
        "nb",
        "c",
        "c",
        "ret",
        "stream",
        "stream",
        "state",
        "state",
        "state",
        "processNextTick",
        "endReadableNT",
        "state",
        "stream",
        "state",
        "stream",
        "state",
        "state",
        "state",
        "stream",
        "stream",
        "xs",
        "f",
        "xs",
        "i",
        "l",
        "i",
        "f",
        "xs",
        "i",
        "i",
        "xs",
        "x",
        "xs",
        "i",
        "l",
        "i",
        "xs",
        "i",
        "x",
        "i",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "Transform",
        "__webpack_require__",
        "__webpack_require__",
        "util",
        "__webpack_require__",
        "util",
        "Transform",
        "Duplex",
        "stream",
        "er",
        "data",
        "afterTransform",
        "stream",
        "er",
        "data",
        "stream",
        "er",
        "data",
        "stream",
        "ts",
        "ts",
        "cb",
        "stream",
        "ts",
        "ts",
        "data",
        "data",
        "stream",
        "data",
        "cb",
        "er",
        "stream",
        "rs",
        "rs",
        "rs",
        "rs",
        "stream",
        "rs",
        "options",
        "Transform",
        "Transform",
        "options",
        "Duplex",
        "options",
        "TransformState",
        "options",
        "options",
        "options",
        "options",
        "options",
        "er",
        "data",
        "done",
        "stream",
        "er",
        "data",
        "done",
        "stream",
        "Transform",
        "chunk",
        "encoding",
        "Duplex",
        "chunk",
        "encoding",
        "Transform",
        "chunk",
        "encoding",
        "cb",
        "Transform",
        "chunk",
        "encoding",
        "cb",
        "ts",
        "cb",
        "ts",
        "chunk",
        "ts",
        "encoding",
        "ts",
        "ts",
        "rs",
        "rs",
        "rs",
        "rs",
        "Transform",
        "n",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "ts",
        "stream",
        "er",
        "data",
        "er",
        "stream",
        "er",
        "data",
        "data",
        "stream",
        "data",
        "stream",
        "stream",
        "ws",
        "ts",
        "stream",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "contentType",
        "header",
        "contentTypes",
        "header",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "url",
        "Audio",
        "audio",
        "url",
        "audio",
        "stop",
        "audio",
        "audio",
        "file",
        "contentType",
        "Audio",
        "audio",
        "contentType",
        "audio",
        "URL",
        "Blob",
        "file",
        "contentType",
        "audio",
        "contentType",
        "err",
        "FilePlayer",
        "err",
        "contentType",
        "err",
        "stop",
        "audio",
        "audio",
        "FilePlayer",
        "file",
        "resolve",
        "reject",
        "Blob",
        "file",
        "FileReader",
        "r",
        "blobToText",
        "r",
        "getContentTypeFromHeader",
        "r",
        "ct",
        "resolve",
        "ct",
        "err",
        "FilePlayer",
        "reject",
        "err",
        "file",
        "file",
        "UrlPlayer",
        "file",
        "getContentTypeFromFile",
        "file",
        "contentType",
        "FilePlayer",
        "file",
        "contentType",
        "FilePlayer",
        "getContentTypeFromFile",
        "playFile",
        "exports",
        "__webpack_require__",
        "noTimestamps",
        "data",
        "data",
        "result",
        "result",
        "result",
        "alt",
        "alt",
        "alt",
        "alt",
        "exports",
        "__webpack_require__",
        "Buffer",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "opts",
        "defaults",
        "opts",
        "TimingStream",
        "Transform",
        "opts",
        "util",
        "TimingStream",
        "Transform",
        "TimingStream",
        "TimingStream",
        "TimingStream",
        "msg",
        "encoding",
        "next",
        "msg",
        "Buffer",
        "next",
        "msg",
        "msg",
        "noTimestamps",
        "msg",
        "err",
        "noTimestamps",
        "next",
        "err",
        "msg",
        "msg",
        "msg",
        "objectMode",
        "hasTranscript",
        "msg",
        "msg",
        "objectMode",
        "hasTranscript",
        "setTimeout",
        "next",
        "msg",
        "delayMs",
        "next",
        "TimingStream",
        "msg",
        "TimingStream",
        "msg",
        "msg",
        "msg",
        "msg",
        "TimingStream",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg",
        "msg",
        "timestamps",
        "timestamps",
        "TimingStream",
        "msg",
        "msg",
        "msg",
        "msg",
        "TimingStream",
        "msg",
        "msg",
        "messageTime",
        "nextTickTime",
        "delayMs",
        "TimingStream",
        "time",
        "time",
        "TimingStream",
        "__webpack_require__",
        "TimingStream",
        "stop",
        "clearTimeout",
        "TimingStream",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "process",
        "Buffer",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "options",
        "options",
        "defaults",
        "options",
        "Transform",
        "options",
        "options",
        "options",
        "process",
        "util",
        "WebAudioL16Stream",
        "Transform",
        "WebAudioL16Stream",
        "emitFormat",
        "TARGET_SAMPLE_RATE",
        "WebAudioL16Stream",
        "downsample",
        "bufferNewSamples",
        "bufferNewSamples",
        "unusedSamples",
        "buffer",
        "Float32Array",
        "unusedSamples",
        "newSamples",
        "i",
        "i",
        "unusedSamples",
        "i",
        "buffer",
        "i",
        "i",
        "i",
        "i",
        "newSamples",
        "i",
        "buffer",
        "unusedSamples",
        "i",
        "bufferNewSamples",
        "i",
        "buffer",
        "bufferNewSamples",
        "TARGET_SAMPLE_RATE",
        "buffer",
        "samplingRateRatio",
        "Float32Array",
        "nOutputSamples",
        "i",
        "i",
        "buffer",
        "i",
        "offset",
        "samplingRateRatio",
        "i",
        "j",
        "j",
        "sample",
        "buffer",
        "offset",
        "j",
        "j",
        "outputBuffer",
        "i",
        "sample",
        "samplingRateRatio",
        "i",
        "buffer",
        "indexSampleAfterLastUsed",
        "remaining",
        "Float32Array",
        "remaining",
        "i",
        "i",
        "remaining",
        "i",
        "i",
        "buffer",
        "indexSampleAfterLastUsed",
        "i",
        "Float32Array",
        "outputBuffer",
        "WebAudioL16Stream",
        "input",
        "DataView",
        "ArrayBuffer",
        "input",
        "i",
        "input",
        "i",
        "input",
        "i",
        "output",
        "i",
        "input",
        "i",
        "multiplier",
        "Buffer",
        "output",
        "WebAudioL16Stream",
        "handleFirstAudioBuffer",
        "audioBuffer",
        "encoding",
        "next",
        "audioBuffer",
        "audioBuffer",
        "encoding",
        "next",
        "WebAudioL16Stream",
        "audioBuffer",
        "encoding",
        "next",
        "audioBuffer",
        "source",
        "source",
        "source",
        "next",
        "WebAudioL16Stream",
        "nodebuffer",
        "encoding",
        "next",
        "Float32Array",
        "nodebuffer",
        "source",
        "source",
        "source",
        "next",
        "WebAudioL16Stream",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "stringify",
        "queryParams",
        "queryParams",
        "key",
        "key",
        "key",
        "queryParams",
        "key",
        "encodeURIComponent",
        "queryParams",
        "key",
        "exports",
        "__webpack_require__",
        "Buffer",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Buffer",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "Buffer",
        "parent",
        "circular",
        "depth",
        "prototype",
        "circular",
        "depth",
        "circular",
        "prototype",
        "circular",
        "circular",
        "circular",
        "circular",
        "Buffer",
        "circular",
        "circular",
        "depth",
        "depth",
        "Infinity",
        "parent",
        "depth",
        "parent",
        "depth",
        "parent",
        "parent",
        "parent",
        "clone",
        "parent",
        "child",
        "clone",
        "parent",
        "child",
        "parent",
        "__getRegExpFlags",
        "parent",
        "parent",
        "child",
        "parent",
        "clone",
        "parent",
        "child",
        "parent",
        "useBuffer",
        "Buffer",
        "parent",
        "child",
        "Buffer",
        "parent",
        "parent",
        "child",
        "child",
        "prototype",
        "proto",
        "parent",
        "child",
        "proto",
        "child",
        "prototype",
        "proto",
        "prototype",
        "circular",
        "allParents",
        "parent",
        "index",
        "allChildren",
        "index",
        "allParents",
        "parent",
        "allChildren",
        "child",
        "i",
        "parent",
        "proto",
        "attrs",
        "proto",
        "i",
        "attrs",
        "attrs",
        "child",
        "i",
        "_clone",
        "parent",
        "i",
        "depth",
        "child",
        "_clone",
        "parent",
        "depth",
        "clone",
        "clonePrototype",
        "parent",
        "parent",
        "c",
        "parent",
        "c",
        "o",
        "o",
        "clone",
        "__objToStr",
        "o",
        "o",
        "__objToStr",
        "o",
        "clone",
        "__isDate",
        "o",
        "o",
        "__objToStr",
        "o",
        "clone",
        "__isArray",
        "o",
        "o",
        "__objToStr",
        "o",
        "clone",
        "__isRegExp",
        "re",
        "re",
        "flags",
        "re",
        "flags",
        "re",
        "flags",
        "flags",
        "clone",
        "__getRegExpFlags",
        "clone",
        "clone",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "byteLength",
        "exports",
        "toByteArray",
        "exports",
        "fromByteArray",
        "Uint8Array",
        "Uint8Array",
        "code",
        "i",
        "len",
        "i",
        "lookup",
        "i",
        "code",
        "i",
        "revLookup",
        "code",
        "i",
        "i",
        "revLookup",
        "revLookup",
        "b64",
        "b64",
        "len",
        "b64",
        "len",
        "b64",
        "len",
        "b64",
        "b64",
        "placeHoldersCount",
        "b64",
        "b64",
        "b64",
        "placeHolders",
        "placeHoldersCount",
        "b64",
        "arr",
        "Arr",
        "len",
        "placeHolders",
        "l",
        "placeHolders",
        "len",
        "len",
        "i",
        "j",
        "i",
        "l",
        "i",
        "j",
        "tmp",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "arr",
        "L",
        "tmp",
        "arr",
        "L",
        "tmp",
        "arr",
        "L",
        "tmp",
        "placeHolders",
        "tmp",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "arr",
        "L",
        "tmp",
        "placeHolders",
        "tmp",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "revLookup",
        "b64",
        "i",
        "arr",
        "L",
        "tmp",
        "arr",
        "L",
        "tmp",
        "arr",
        "num",
        "lookup",
        "num",
        "lookup",
        "num",
        "lookup",
        "num",
        "lookup",
        "num",
        "uint8",
        "start",
        "end",
        "i",
        "end",
        "i",
        "tmp",
        "uint8",
        "i",
        "uint8",
        "i",
        "uint8",
        "i",
        "output",
        "tripletToBase64",
        "tmp",
        "output",
        "uint8",
        "uint8",
        "len",
        "len",
        "extraBytes",
        "i",
        "len2",
        "i",
        "maxChunkLength",
        "parts",
        "encodeChunk",
        "uint8",
        "i",
        "i",
        "maxChunkLength",
        "len2",
        "len2",
        "i",
        "maxChunkLength",
        "extraBytes",
        "tmp",
        "uint8",
        "len",
        "output",
        "lookup",
        "tmp",
        "output",
        "lookup",
        "tmp",
        "output",
        "extraBytes",
        "tmp",
        "uint8",
        "len",
        "uint8",
        "len",
        "output",
        "lookup",
        "tmp",
        "output",
        "lookup",
        "tmp",
        "output",
        "lookup",
        "tmp",
        "output",
        "parts",
        "output",
        "parts",
        "exports",
        "__webpack_require__",
        "Buffer",
        "__webpack_require__",
        "__webpack_require__",
        "Uint8Array",
        "__webpack_require__",
        "opts",
        "cb",
        "ConcatStream",
        "ConcatStream",
        "opts",
        "cb",
        "opts",
        "cb",
        "opts",
        "opts",
        "opts",
        "opts",
        "opts",
        "encoding",
        "shouldInferEncoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "encoding",
        "Writable",
        "encoding",
        "shouldInferEncoding",
        "cb",
        "cb",
        "ConcatStream",
        "inherits",
        "ConcatStream",
        "Writable",
        "ConcatStream",
        "chunk",
        "enc",
        "next",
        "chunk",
        "next",
        "ConcatStream",
        "buff",
        "buff",
        "buff",
        "Buffer",
        "firstBuffer",
        "Uint8Array",
        "firstBuffer",
        "Uint8Array",
        "firstBuffer",
        "firstBuffer",
        "firstBuffer",
        "ConcatStream",
        "arrayConcat",
        "stringConcat",
        "bufferConcat",
        "u8Concat",
        "arr",
        "arr",
        "arr",
        "arr",
        "p",
        "p",
        "isArrayish",
        "p",
        "p",
        "p",
        "parts",
        "i",
        "parts",
        "i",
        "parts",
        "i",
        "p",
        "strings",
        "p",
        "Buffer",
        "p",
        "strings",
        "p",
        "isBufferish",
        "p",
        "strings",
        "Buffer",
        "p",
        "strings",
        "Buffer",
        "p",
        "Buffer",
        "parts",
        "strings",
        "Buffer",
        "strings",
        "strings",
        "strings",
        "strings",
        "strings",
        "strings",
        "parts",
        "i",
        "parts",
        "i",
        "parts",
        "i",
        "Buffer",
        "p",
        "bufs",
        "p",
        "isBufferish",
        "p",
        "bufs",
        "Buffer",
        "p",
        "bufs",
        "Buffer",
        "p",
        "Buffer",
        "bufs",
        "parts",
        "i",
        "parts",
        "i",
        "res",
        "res",
        "parts",
        "i",
        "res",
        "parts",
        "i",
        "parts",
        "i",
        "parts",
        "i",
        "parts",
        "i",
        "Buffer",
        "parts",
        "i",
        "len",
        "parts",
        "i",
        "U8",
        "len",
        "i",
        "parts",
        "i",
        "parts",
        "i",
        "j",
        "part",
        "j",
        "u8",
        "offset",
        "part",
        "j",
        "u8",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "implementation",
        "exports",
        "exports",
        "buffer",
        "offset",
        "isLE",
        "mLen",
        "nBytes",
        "nBytes",
        "mLen",
        "eLen",
        "eMax",
        "isLE",
        "nBytes",
        "isLE",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "e",
        "s",
        "nBits",
        "s",
        "nBits",
        "nBits",
        "eLen",
        "nBits",
        "e",
        "e",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "nBits",
        "m",
        "e",
        "nBits",
        "e",
        "nBits",
        "nBits",
        "mLen",
        "nBits",
        "m",
        "m",
        "buffer",
        "offset",
        "i",
        "i",
        "d",
        "nBits",
        "e",
        "e",
        "eBias",
        "e",
        "eMax",
        "m",
        "NaN",
        "s",
        "Infinity",
        "m",
        "m",
        "mLen",
        "e",
        "e",
        "eBias",
        "s",
        "m",
        "e",
        "mLen",
        "exports",
        "buffer",
        "value",
        "offset",
        "isLE",
        "mLen",
        "nBytes",
        "nBytes",
        "mLen",
        "eLen",
        "eMax",
        "mLen",
        "isLE",
        "nBytes",
        "isLE",
        "value",
        "value",
        "value",
        "value",
        "value",
        "isNaN",
        "value",
        "value",
        "Infinity",
        "m",
        "isNaN",
        "value",
        "e",
        "eMax",
        "e",
        "value",
        "value",
        "c",
        "e",
        "e",
        "c",
        "e",
        "eBias",
        "value",
        "rt",
        "c",
        "value",
        "rt",
        "eBias",
        "value",
        "c",
        "e",
        "c",
        "e",
        "eBias",
        "eMax",
        "m",
        "e",
        "eMax",
        "e",
        "eBias",
        "m",
        "value",
        "c",
        "mLen",
        "e",
        "e",
        "eBias",
        "m",
        "value",
        "eBias",
        "mLen",
        "e",
        "mLen",
        "buffer",
        "offset",
        "i",
        "m",
        "i",
        "d",
        "m",
        "mLen",
        "e",
        "e",
        "mLen",
        "m",
        "eLen",
        "mLen",
        "eLen",
        "buffer",
        "offset",
        "i",
        "e",
        "i",
        "d",
        "e",
        "eLen",
        "buffer",
        "offset",
        "i",
        "d",
        "s",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "isObject",
        "val",
        "val",
        "val",
        "isArray",
        "val",
        "exports",
        "array",
        "iteratee",
        "array",
        "array",
        "length",
        "index",
        "length",
        "result",
        "index",
        "iteratee",
        "array",
        "index",
        "index",
        "array",
        "result",
        "array",
        "predicate",
        "fromIndex",
        "fromRight",
        "array",
        "fromIndex",
        "fromRight",
        "fromRight",
        "index",
        "index",
        "length",
        "predicate",
        "array",
        "index",
        "index",
        "array",
        "index",
        "array",
        "value",
        "fromIndex",
        "value",
        "value",
        "baseFindIndex",
        "array",
        "baseIsNaN",
        "fromIndex",
        "fromIndex",
        "array",
        "index",
        "length",
        "array",
        "index",
        "value",
        "index",
        "array",
        "value",
        "fromIndex",
        "comparator",
        "fromIndex",
        "array",
        "index",
        "length",
        "comparator",
        "array",
        "index",
        "value",
        "index",
        "value",
        "value",
        "value",
        "func",
        "value",
        "func",
        "value",
        "arrayProto",
        "array",
        "values",
        "iteratee",
        "comparator",
        "comparator",
        "baseIndexOfWith",
        "baseIndexOf",
        "values",
        "array",
        "values",
        "values",
        "copyArray",
        "values",
        "iteratee",
        "seen",
        "arrayMap",
        "array",
        "baseUnary",
        "iteratee",
        "index",
        "length",
        "values",
        "index",
        "iteratee",
        "iteratee",
        "value",
        "value",
        "fromIndex",
        "indexOf",
        "seen",
        "computed",
        "fromIndex",
        "comparator",
        "seen",
        "array",
        "splice",
        "seen",
        "fromIndex",
        "splice",
        "array",
        "fromIndex",
        "array",
        "source",
        "array",
        "source",
        "array",
        "array",
        "length",
        "index",
        "length",
        "array",
        "index",
        "source",
        "index",
        "array",
        "array",
        "values",
        "comparator",
        "array",
        "array",
        "values",
        "values",
        "basePullAll",
        "array",
        "values",
        "comparator",
        "array",
        "pullAllWith",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "url",
        "options",
        "patchRequest",
        "options",
        "options",
        "isoFetch",
        "url",
        "options",
        "res",
        "patchResponse",
        "res",
        "fetch",
        "exports",
        "__webpack_require__",
        "Buffer",
        "__webpack_require__",
        "__webpack_require__",
        "blob",
        "opts",
        "ReadableBlobStream",
        "ReadableBlobStream",
        "blob",
        "opts",
        "opts",
        "opts",
        "opts",
        "Readable",
        "opts",
        "blob",
        "blob",
        "FileReader",
        "Uint8Array",
        "blob",
        "blob",
        "ReadableBlobStream",
        "inherits",
        "ReadableBlobStream",
        "Readable",
        "buf",
        "Buffer",
        "buf",
        "Buffer",
        "buf",
        "buf",
        "Uint8Array",
        "buf",
        "Buffer",
        "buf",
        "buf",
        "buf",
        "buf",
        "Uint8Array",
        "buf",
        "Buffer",
        "buf",
        "Buffer",
        "buf",
        "buf",
        "Uint8Array",
        "buf",
        "ReadableBlobStream",
        "ReadableBlobStream",
        "arguments",
        "Buffer",
        "buf",
        "buf",
        "Uint8Array",
        "buf",
        "bufferToUint8Array",
        "buf",
        "buf",
        "ReadableBlobStream",
        "chunkSize",
        "start",
        "end",
        "start",
        "chunkSize",
        "size",
        "end",
        "start",
        "start",
        "end",
        "FileReader",
        "reader",
        "Uint8Array",
        "reader",
        "buf",
        "uint8ArrayToBuffer",
        "buf",
        "buf",
        "reader",
        "reader",
        "reader",
        "chunk",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "v",
        "opts",
        "v",
        "o",
        "p",
        "p",
        "o",
        "o",
        "p",
        "ophop",
        "o",
        "p",
        "o",
        "o",
        "v",
        "v",
        "v",
        "v",
        "obj",
        "getOwnPropNames",
        "defineProp",
        "getOwnPropNames",
        "obj",
        "i",
        "i",
        "props",
        "i",
        "defineProp",
        "obj",
        "props",
        "i",
        "obj",
        "props",
        "i",
        "e",
        "defineProp",
        "defineProp",
        "o",
        "p",
        "desc",
        "o",
        "o",
        "ECMAScript",
        "desc",
        "o",
        "p",
        "desc",
        "ECMAScript",
        "desc",
        "o",
        "p",
        "desc",
        "ECMAScript",
        "desc",
        "o",
        "p",
        "desc",
        "o",
        "o",
        "o",
        "o",
        "p",
        "o",
        "ECMAScript",
        "o",
        "p",
        "props",
        "p",
        "props",
        "obj",
        "defineProp",
        "obj",
        "MAX_ARRAY_LENGTH",
        "RangeError",
        "index",
        "defineProp",
        "obj",
        "index",
        "obj",
        "index",
        "v",
        "obj",
        "index",
        "v",
        "i",
        "i",
        "obj",
        "i",
        "makeArrayAccessor",
        "i",
        "value",
        "bits",
        "bits",
        "value",
        "s",
        "s",
        "value",
        "bits",
        "bits",
        "value",
        "s",
        "s",
        "n",
        "n",
        "as_signed",
        "n",
        "n",
        "as_unsigned",
        "n",
        "n",
        "round",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "n",
        "as_signed",
        "n",
        "n",
        "n",
        "as_unsigned",
        "n",
        "n",
        "n",
        "n",
        "n",
        "as_signed",
        "n",
        "n",
        "n",
        "n",
        "n",
        "as_unsigned",
        "v",
        "ebits",
        "fbits",
        "ebits",
        "n",
        "floor",
        "n",
        "n",
        "w",
        "f",
        "w",
        "f",
        "w",
        "w",
        "w",
        "w",
        "v",
        "v",
        "e",
        "ebits",
        "f",
        "pow",
        "fbits",
        "s",
        "v",
        "Infinity",
        "v",
        "Infinity",
        "e",
        "ebits",
        "f",
        "s",
        "v",
        "v",
        "e",
        "f",
        "s",
        "v",
        "Infinity",
        "s",
        "v",
        "v",
        "abs",
        "v",
        "v",
        "pow",
        "bias",
        "e",
        "min",
        "floor",
        "log",
        "v",
        "LN2",
        "f",
        "roundToEven",
        "v",
        "pow",
        "e",
        "pow",
        "fbits",
        "f",
        "pow",
        "fbits",
        "e",
        "e",
        "f",
        "e",
        "bias",
        "e",
        "ebits",
        "f",
        "e",
        "e",
        "bias",
        "f",
        "f",
        "pow",
        "fbits",
        "e",
        "f",
        "roundToEven",
        "v",
        "pow",
        "bias",
        "fbits",
        "bits",
        "i",
        "fbits",
        "i",
        "i",
        "bits",
        "f",
        "f",
        "floor",
        "f",
        "i",
        "ebits",
        "i",
        "i",
        "bits",
        "e",
        "e",
        "floor",
        "e",
        "bits",
        "s",
        "bits",
        "bits",
        "parseInt",
        "ebits",
        "fbits",
        "i",
        "i",
        "i",
        "b",
        "i",
        "j",
        "j",
        "j",
        "bits",
        "b",
        "b",
        "b",
        "bits",
        "bits",
        "bias",
        "ebits",
        "s",
        "parseInt",
        "e",
        "parseInt",
        "ebits",
        "f",
        "parseInt",
        "ebits",
        "e",
        "ebits",
        "f",
        "NaN",
        "s",
        "Infinity",
        "e",
        "s",
        "pow",
        "e",
        "bias",
        "f",
        "pow",
        "fbits",
        "f",
        "s",
        "pow",
        "bias",
        "f",
        "pow",
        "fbits",
        "s",
        "b",
        "unpackIEEE754",
        "b",
        "v",
        "packIEEE754",
        "v",
        "b",
        "unpackIEEE754",
        "b",
        "v",
        "packIEEE754",
        "v",
        "ArrayBuffer",
        "length",
        "length",
        "ECMAScript",
        "length",
        "length",
        "RangeError",
        "length",
        "length",
        "i",
        "i",
        "i",
        "i",
        "configureProperties",
        "exports",
        "exports",
        "ArrayBuffer",
        "ArrayBufferView",
        "bytesPerElement",
        "pack",
        "unpack",
        "ctor",
        "buffer",
        "byteOffset",
        "length",
        "arguments",
        "arguments",
        "ECMAScript",
        "arguments",
        "length",
        "RangeError",
        "ArrayBuffer",
        "arguments",
        "arguments",
        "ctor",
        "array",
        "arguments",
        "array",
        "ArrayBuffer",
        "i",
        "i",
        "i",
        "i",
        "array",
        "i",
        "arguments",
        "arguments",
        "ArrayBuffer",
        "ECMAScript",
        "arguments",
        "sequence",
        "arguments",
        "ECMAScript",
        "sequence",
        "ArrayBuffer",
        "i",
        "i",
        "i",
        "s",
        "sequence",
        "i",
        "i",
        "s",
        "arguments",
        "arguments",
        "ArrayBuffer",
        "ECMAScript",
        "arguments",
        "buffer",
        "ECMAScript",
        "byteOffset",
        "RangeError",
        "RangeError",
        "arguments",
        "RangeError",
        "ECMAScript",
        "length",
        "RangeError",
        "ctor",
        "configureProperties",
        "makeArrayAccessors",
        "ctor",
        "ArrayBufferView",
        "ctor",
        "bytesPerElement",
        "ctor",
        "pack",
        "ctor",
        "unpack",
        "ctor",
        "bytesPerElement",
        "ctor",
        "index",
        "arguments",
        "SyntaxError",
        "index",
        "ECMAScript",
        "index",
        "index",
        "i",
        "o",
        "index",
        "i",
        "i",
        "o",
        "o",
        "ctor",
        "ctor",
        "ctor",
        "index",
        "value",
        "arguments",
        "SyntaxError",
        "index",
        "ECMAScript",
        "index",
        "index",
        "value",
        "i",
        "o",
        "index",
        "i",
        "i",
        "o",
        "o",
        "i",
        "ctor",
        "index",
        "value",
        "arguments",
        "SyntaxError",
        "arguments",
        "arguments",
        "array",
        "arguments",
        "offset",
        "ECMAScript",
        "arguments",
        "offset",
        "array",
        "RangeError",
        "byteOffset",
        "offset",
        "byteLength",
        "array",
        "array",
        "tmp",
        "i",
        "s",
        "array",
        "i",
        "byteLength",
        "i",
        "s",
        "tmp",
        "i",
        "array",
        "s",
        "i",
        "d",
        "byteOffset",
        "i",
        "byteLength",
        "i",
        "d",
        "d",
        "tmp",
        "i",
        "i",
        "s",
        "array",
        "d",
        "byteOffset",
        "i",
        "byteLength",
        "i",
        "s",
        "d",
        "d",
        "array",
        "s",
        "arguments",
        "arguments",
        "sequence",
        "arguments",
        "len",
        "ECMAScript",
        "sequence",
        "offset",
        "ECMAScript",
        "arguments",
        "offset",
        "len",
        "RangeError",
        "i",
        "i",
        "len",
        "i",
        "s",
        "sequence",
        "i",
        "offset",
        "i",
        "s",
        "ctor",
        "start",
        "end",
        "v",
        "min",
        "max",
        "v",
        "min",
        "min",
        "v",
        "max",
        "max",
        "v",
        "start",
        "ECMAScript",
        "start",
        "end",
        "ECMAScript",
        "end",
        "arguments",
        "start",
        "arguments",
        "end",
        "start",
        "start",
        "start",
        "end",
        "end",
        "end",
        "start",
        "clamp",
        "start",
        "end",
        "clamp",
        "end",
        "end",
        "start",
        "len",
        "len",
        "start",
        "len",
        "ctor",
        "makeConstructor",
        "packI8",
        "unpackI8",
        "makeConstructor",
        "packU8",
        "unpackU8",
        "makeConstructor",
        "packU8Clamped",
        "unpackU8",
        "makeConstructor",
        "packI16",
        "unpackI16",
        "makeConstructor",
        "packU16",
        "unpackU16",
        "makeConstructor",
        "packI32",
        "unpackI32",
        "makeConstructor",
        "packU32",
        "unpackU32",
        "makeConstructor",
        "packF32",
        "unpackF32",
        "makeConstructor",
        "packF64",
        "unpackF64",
        "exports",
        "exports",
        "Int8Array",
        "exports",
        "exports",
        "Uint8Array",
        "exports",
        "exports",
        "Uint8ClampedArray",
        "exports",
        "exports",
        "Int16Array",
        "exports",
        "exports",
        "Uint16Array",
        "exports",
        "exports",
        "Int32Array",
        "exports",
        "exports",
        "Uint32Array",
        "exports",
        "exports",
        "Float32Array",
        "exports",
        "exports",
        "Float64Array",
        "array",
        "index",
        "ECMAScript",
        "array",
        "array",
        "index",
        "array",
        "index",
        "exports",
        "exports",
        "u16array",
        "r",
        "u8array",
        "DataView",
        "buffer",
        "byteOffset",
        "byteLength",
        "arguments",
        "buffer",
        "exports",
        "buffer",
        "exports",
        "ECMAScript",
        "buffer",
        "buffer",
        "exports",
        "ECMAScript",
        "byteOffset",
        "RangeError",
        "arguments",
        "ECMAScript",
        "byteLength",
        "RangeError",
        "configureProperties",
        "arrayType",
        "byteOffset",
        "littleEndian",
        "byteOffset",
        "ECMAScript",
        "byteOffset",
        "byteOffset",
        "arrayType",
        "RangeError",
        "byteOffset",
        "exports",
        "byteOffset",
        "arrayType",
        "i",
        "i",
        "arrayType",
        "i",
        "r",
        "uint8Array",
        "i",
        "littleEndian",
        "IS_BIG_ENDIAN",
        "r",
        "arrayType",
        "exports",
        "DataView",
        "makeGetter",
        "exports",
        "DataView",
        "makeGetter",
        "exports",
        "DataView",
        "makeGetter",
        "exports",
        "DataView",
        "makeGetter",
        "exports",
        "DataView",
        "makeGetter",
        "exports",
        "DataView",
        "makeGetter",
        "exports",
        "DataView",
        "makeGetter",
        "exports",
        "DataView",
        "makeGetter",
        "exports",
        "arrayType",
        "byteOffset",
        "value",
        "littleEndian",
        "byteOffset",
        "ECMAScript",
        "byteOffset",
        "byteOffset",
        "arrayType",
        "RangeError",
        "arrayType",
        "value",
        "exports",
        "typeArray",
        "i",
        "i",
        "arrayType",
        "i",
        "r",
        "byteArray",
        "i",
        "littleEndian",
        "IS_BIG_ENDIAN",
        "byteView",
        "exports",
        "byteOffset",
        "arrayType",
        "byteView",
        "DataView",
        "makeSetter",
        "exports",
        "DataView",
        "makeSetter",
        "exports",
        "DataView",
        "makeSetter",
        "exports",
        "DataView",
        "makeSetter",
        "exports",
        "DataView",
        "makeSetter",
        "exports",
        "DataView",
        "makeSetter",
        "exports",
        "DataView",
        "makeSetter",
        "exports",
        "DataView",
        "makeSetter",
        "exports",
        "exports",
        "exports",
        "DataView",
        "exports",
        "bind",
        "that",
        "target",
        "toStr",
        "target",
        "funcType",
        "ERROR_MESSAGE",
        "target",
        "arguments",
        "bound",
        "target",
        "args",
        "arguments",
        "result",
        "result",
        "result",
        "target",
        "that",
        "args",
        "arguments",
        "target",
        "args",
        "i",
        "boundLength",
        "i",
        "boundArgs",
        "i",
        "bound",
        "boundArgs",
        "binder",
        "target",
        "Empty",
        "Empty",
        "target",
        "bound",
        "Empty",
        "Empty",
        "bound",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "exports",
        "Timeout",
        "apply",
        "setTimeout",
        "arguments",
        "clearTimeout",
        "exports",
        "Timeout",
        "apply",
        "setInterval",
        "arguments",
        "clearInterval",
        "exports",
        "exports",
        "timeout",
        "timeout",
        "timeout",
        "id",
        "clearFn",
        "id",
        "clearFn",
        "Timeout",
        "Timeout",
        "Timeout",
        "exports",
        "item",
        "msecs",
        "clearTimeout",
        "item",
        "item",
        "msecs",
        "exports",
        "item",
        "clearTimeout",
        "item",
        "item",
        "exports",
        "exports",
        "item",
        "clearTimeout",
        "item",
        "item",
        "msecs",
        "item",
        "setTimeout",
        "onTimeout",
        "item",
        "item",
        "msecs",
        "__webpack_require__",
        "exports",
        "setImmediate",
        "exports",
        "clearImmediate",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "readable",
        "resolve",
        "reject",
        "concat",
        "readable",
        "reject",
        "readable",
        "resolve",
        "stream",
        "readable",
        "stream",
        "bufferFromReadable",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "options",
        "options",
        "options",
        "options",
        "options",
        "bufferFromReadable",
        "options",
        "buffer",
        "options",
        "buffer",
        "options",
        "options",
        "patch",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "res",
        "res",
        "res",
        "res",
        "ReadableFromWhatwg",
        "res",
        "res",
        "res",
        "res",
        "res",
        "res",
        "res",
        "arrayBuffer",
        "ReadableFromArrayBuffer",
        "arrayBuffer",
        "res",
        "patch",
        "exports",
        "__webpack_require__",
        "Buffer",
        "__webpack_require__",
        "__webpack_require__",
        "arrayBuffer",
        "Readable",
        "Buffer",
        "arrayBuffer",
        "inherits",
        "ReadableFromArrayBuffer",
        "Readable",
        "ReadableFromArrayBuffer",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "Buffer",
        "__webpack_require__",
        "__webpack_require__",
        "stream",
        "Readable",
        "stream",
        "chunk",
        "chunk",
        "Buffer",
        "chunk",
        "err",
        "err",
        "inherits",
        "ReadableFromWhatwg",
        "Readable",
        "ReadableFromWhatwg",
        "exports",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "isArguments",
        "value",
        "toStr",
        "value",
        "isArgs",
        "isArgs",
        "value",
        "value",
        "value",
        "value",
        "toStr",
        "value",
        "isArgs",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "hasSymbols",
        "sym",
        "sym",
        "sym",
        "symObj",
        "obj",
        "sym",
        "symVal",
        "sym",
        "obj",
        "keys",
        "obj",
        "obj",
        "obj",
        "obj",
        "syms",
        "syms",
        "sym",
        "obj",
        "sym",
        "obj",
        "sym",
        "descriptor",
        "symVal",
        "descriptor",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "obj",
        "obj",
        "obj",
        "__webpack_require__",
        "bind",
        "bind",
        "hasSymbols",
        "assign",
        "target",
        "source1",
        "canBeObject",
        "target",
        "toObject",
        "target",
        "s",
        "s",
        "arguments",
        "s",
        "source",
        "toObject",
        "arguments",
        "s",
        "props",
        "keys",
        "source",
        "hasSymbols",
        "originalGetSymbols",
        "getSymbols",
        "syms",
        "getSymbols",
        "source",
        "i",
        "i",
        "syms",
        "i",
        "key",
        "syms",
        "i",
        "propIsEnumerable",
        "source",
        "key",
        "push",
        "props",
        "key",
        "i",
        "i",
        "props",
        "i",
        "key",
        "props",
        "i",
        "value",
        "source",
        "key",
        "propIsEnumerable",
        "source",
        "key",
        "objTarget",
        "key",
        "value",
        "objTarget",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "PassThrough",
        "__webpack_require__",
        "__webpack_require__",
        "util",
        "__webpack_require__",
        "util",
        "PassThrough",
        "Transform",
        "options",
        "PassThrough",
        "PassThrough",
        "options",
        "Transform",
        "options",
        "PassThrough",
        "chunk",
        "encoding",
        "cb",
        "cb",
        "chunk",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "BufferList",
        "BufferList",
        "v",
        "v",
        "entry",
        "entry",
        "entry",
        "BufferList",
        "v",
        "v",
        "entry",
        "entry",
        "BufferList",
        "ret",
        "BufferList",
        "BufferList",
        "s",
        "p",
        "p",
        "p",
        "ret",
        "s",
        "p",
        "ret",
        "BufferList",
        "n",
        "bufferShim",
        "bufferShim",
        "n",
        "p",
        "p",
        "ret",
        "i",
        "i",
        "p",
        "p",
        "p",
        "ret",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "process",
        "callback",
        "callback",
        "callback",
        "callback",
        "arguments",
        "i",
        "args",
        "i",
        "args",
        "i",
        "arguments",
        "i",
        "callback",
        "args",
        "tasksByHandle",
        "nextHandle",
        "task",
        "registerImmediate",
        "nextHandle",
        "nextHandle",
        "handle",
        "tasksByHandle",
        "handle",
        "task",
        "task",
        "task",
        "args",
        "callback",
        "callback",
        "args",
        "callback",
        "args",
        "args",
        "callback",
        "args",
        "args",
        "args",
        "callback",
        "args",
        "handle",
        "currentlyRunningATask",
        "setTimeout",
        "runIfPresent",
        "handle",
        "tasksByHandle",
        "handle",
        "task",
        "currentlyRunningATask",
        "run",
        "task",
        "clearImmediate",
        "handle",
        "currentlyRunningATask",
        "registerImmediate",
        "handle",
        "process",
        "runIfPresent",
        "handle",
        "postMessageIsAsynchronous",
        "oldOnMessage",
        "postMessageIsAsynchronous",
        "messagePrefix",
        "runIfPresent",
        "messagePrefix",
        "onGlobalMessage",
        "onGlobalMessage",
        "registerImmediate",
        "handle",
        "messagePrefix",
        "handle",
        "MessageChannel",
        "channel",
        "runIfPresent",
        "handle",
        "registerImmediate",
        "handle",
        "channel",
        "handle",
        "doc",
        "registerImmediate",
        "handle",
        "doc",
        "script",
        "runIfPresent",
        "handle",
        "script",
        "html",
        "script",
        "script",
        "html",
        "script",
        "registerImmediate",
        "handle",
        "setTimeout",
        "runIfPresent",
        "handle",
        "attachTo",
        "attachTo",
        "attachTo",
        "attachTo",
        "installNextTickImplementation",
        "canUsePostMessage",
        "installPostMessageImplementation",
        "installMessageChannelImplementation",
        "doc",
        "doc",
        "installReadyStateChangeImplementation",
        "installSetTimeoutImplementation",
        "attachTo",
        "setImmediate",
        "attachTo",
        "clearImmediate",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "__webpack_require__",
        "deprecate",
        "fn",
        "msg",
        "config",
        "fn",
        "warned",
        "config",
        "msg",
        "config",
        "msg",
        "msg",
        "warned",
        "fn",
        "arguments",
        "deprecated",
        "name",
        "_",
        "name",
        "val",
        "val",
        "exports",
        "__webpack_require__",
        "exports",
        "inherits",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "ctor",
        "inherits",
        "ctor",
        "superCtor",
        "ctor",
        "superCtor",
        "TempCtor",
        "superCtor",
        "ctor",
        "TempCtor",
        "ctor",
        "ctor",
        "exports",
        "isBuffer",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "arg",
        "exports",
        "__webpack_require__",
        "_global",
        "_global",
        "__webpack_require__",
        "uri",
        "protocols",
        "protocols",
        "native_instance",
        "NativeWebSocket",
        "uri",
        "protocols",
        "native_instance",
        "NativeWebSocket",
        "uri",
        "native_instance",
        "NativeWebSocket",
        "W3CWebSocket",
        "websocket_version",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "exports",
        "exports",
        "Blob",
        "e",
        "support",
        "obj",
        "obj",
        "DataView",
        "obj",
        "ArrayBuffer",
        "obj",
        "obj",
        "viewClasses",
        "obj",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "value",
        "value",
        "value",
        "value",
        "value",
        "items",
        "items",
        "value",
        "value",
        "support",
        "iterator",
        "iterator",
        "iterator",
        "headers",
        "headers",
        "Headers",
        "headers",
        "value",
        "name",
        "name",
        "value",
        "headers",
        "headers",
        "header",
        "header",
        "header",
        "headers",
        "headers",
        "name",
        "name",
        "headers",
        "name",
        "Headers",
        "name",
        "value",
        "name",
        "normalizeName",
        "name",
        "value",
        "normalizeValue",
        "value",
        "name",
        "name",
        "oldValue",
        "oldValue",
        "value",
        "value",
        "Headers",
        "name",
        "normalizeName",
        "name",
        "Headers",
        "name",
        "name",
        "normalizeName",
        "name",
        "name",
        "name",
        "Headers",
        "name",
        "normalizeName",
        "name",
        "Headers",
        "name",
        "value",
        "normalizeName",
        "name",
        "normalizeValue",
        "value",
        "Headers",
        "callback",
        "thisArg",
        "name",
        "name",
        "callback",
        "thisArg",
        "name",
        "name",
        "Headers",
        "value",
        "name",
        "items",
        "name",
        "iteratorFor",
        "items",
        "Headers",
        "value",
        "items",
        "value",
        "iteratorFor",
        "items",
        "Headers",
        "value",
        "name",
        "items",
        "name",
        "value",
        "iteratorFor",
        "items",
        "support",
        "Headers",
        "Headers",
        "body",
        "body",
        "body",
        "reader",
        "resolve",
        "reject",
        "reader",
        "resolve",
        "reader",
        "reader",
        "reject",
        "reader",
        "blob",
        "FileReader",
        "fileReaderReady",
        "reader",
        "reader",
        "blob",
        "promise",
        "blob",
        "FileReader",
        "fileReaderReady",
        "reader",
        "reader",
        "blob",
        "promise",
        "buf",
        "Uint8Array",
        "buf",
        "view",
        "i",
        "view",
        "i",
        "chars",
        "i",
        "view",
        "i",
        "chars",
        "buf",
        "buf",
        "buf",
        "Uint8Array",
        "buf",
        "view",
        "Uint8Array",
        "buf",
        "view",
        "body",
        "body",
        "body",
        "body",
        "body",
        "support",
        "Blob",
        "body",
        "body",
        "support",
        "FormData",
        "body",
        "body",
        "support",
        "URLSearchParams",
        "body",
        "body",
        "support",
        "support",
        "isDataView",
        "body",
        "bufferClone",
        "body",
        "Blob",
        "support",
        "ArrayBuffer",
        "body",
        "isArrayBufferView",
        "body",
        "bufferClone",
        "body",
        "body",
        "support",
        "URLSearchParams",
        "body",
        "support",
        "consumed",
        "rejected",
        "rejected",
        "Blob",
        "Blob",
        "consumed",
        "readBlobAsArrayBuffer",
        "consumed",
        "rejected",
        "rejected",
        "readBlobAsText",
        "readArrayBufferAsText",
        "support",
        "decode",
        "method",
        "method",
        "methods",
        "upcased",
        "upcased",
        "method",
        "input",
        "options",
        "options",
        "options",
        "options",
        "input",
        "Request",
        "input",
        "input",
        "input",
        "options",
        "Headers",
        "input",
        "input",
        "input",
        "body",
        "input",
        "body",
        "input",
        "input",
        "input",
        "options",
        "options",
        "Headers",
        "options",
        "normalizeMethod",
        "options",
        "options",
        "body",
        "body",
        "Request",
        "Request",
        "body",
        "FormData",
        "body",
        "split",
        "split",
        "form",
        "decodeURIComponent",
        "name",
        "decodeURIComponent",
        "value",
        "form",
        "rawHeaders",
        "Headers",
        "rawHeaders",
        "line",
        "line",
        "parts",
        "key",
        "parts",
        "headers",
        "key",
        "value",
        "headers",
        "Body",
        "Request",
        "bodyInit",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "Headers",
        "options",
        "options",
        "bodyInit",
        "Body",
        "Response",
        "Response",
        "Response",
        "Headers",
        "Response",
        "Response",
        "response",
        "response",
        "Response",
        "url",
        "status",
        "redirectStatuses",
        "status",
        "RangeError",
        "Response",
        "status",
        "url",
        "Headers",
        "Request",
        "Response",
        "input",
        "init",
        "resolve",
        "reject",
        "Request",
        "input",
        "init",
        "XMLHttpRequest",
        "xhr",
        "xhr",
        "xhr",
        "parseHeaders",
        "xhr",
        "options",
        "xhr",
        "xhr",
        "options",
        "xhr",
        "xhr",
        "xhr",
        "resolve",
        "Response",
        "body",
        "options",
        "xhr",
        "reject",
        "xhr",
        "reject",
        "xhr",
        "request",
        "request",
        "request",
        "xhr",
        "xhr",
        "support",
        "xhr",
        "request",
        "value",
        "name",
        "xhr",
        "name",
        "value",
        "xhr",
        "request",
        "request",
        "exports",
        "__webpack_require__",
        "getModels",
        "options",
        "options",
        "options",
        "fetch",
        "options",
        "reqOpts",
        "response",
        "response",
        "obj",
        "obj",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "recognizeFile",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "realtime",
        "options",
        "assign",
        "options",
        "RecognizeStream",
        "rsOpts",
        "recognizeStream",
        "options",
        "fetch",
        "options",
        "response",
        "response",
        "source",
        "source",
        "recognizeStream",
        "streams",
        "source",
        "er",
        "recognizeStream",
        "er",
        "BlobStream",
        "options",
        "source",
        "recognizeStream",
        "streams",
        "source",
        "realtime",
        "timingStream",
        "TimingStream",
        "options",
        "stream",
        "stream",
        "timingStream",
        "streams",
        "stream",
        "stream",
        "recognizeStream",
        "recognizeStream",
        "stream",
        "recognizeStream",
        "recognizeStream",
        "options",
        "stream",
        "stream",
        "SpeakerStream",
        "options",
        "streams",
        "stream",
        "options",
        "stream",
        "stream",
        "FormatStream",
        "options",
        "streams",
        "stream",
        "options",
        "FilePlayer",
        "options",
        "player",
        "recognizeStream",
        "player",
        "player",
        "recognizeStream",
        "player",
        "player",
        "timingStream",
        "options",
        "timingStream",
        "player",
        "fn",
        "player",
        "fn",
        "err",
        "streams",
        "s",
        "s",
        "s",
        "s",
        "stream",
        "s",
        "s",
        "stream",
        "stream",
        "err",
        "sources",
        "s",
        "s",
        "stream",
        "options",
        "streams",
        "stream",
        "WritableElementStream",
        "options",
        "options",
        "stream",
        "stream",
        "stream",
        "recognizeStream",
        "recognizeStream",
        "stream",
        "stream",
        "ResultStream",
        "stream",
        "stop",
        "streams",
        "stream",
        "streams",
        "prevStream",
        "prevStream",
        "stream",
        "prevStream",
        "stream",
        "stream",
        "stream",
        "timingStream",
        "stream",
        "timingStream",
        "timingStream",
        "stream",
        "recognizeStream",
        "recognizeStream",
        "stream",
        "recognizeStream",
        "stream",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "Writable",
        "chunk",
        "encoding",
        "callback",
        "callback",
        "recognizeMicrophone",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "assign",
        "options",
        "RecognizeStream",
        "rsOpts",
        "recognizeStream",
        "options",
        "keepMic",
        "preservedMicStream",
        "preservedMicStream",
        "bitBucket",
        "getMicStream",
        "preservedMicStream",
        "options",
        "options",
        "getUserMedia",
        "getMicStream",
        "pm",
        "mic",
        "MicrophoneStream",
        "mic",
        "options",
        "keepMic",
        "preservedMicStream",
        "micStream",
        "micStream",
        "options",
        "stream",
        "stream",
        "SpeakerStream",
        "options",
        "streams",
        "stream",
        "options",
        "stream",
        "stream",
        "FormatStream",
        "options",
        "streams",
        "stream",
        "options",
        "streams",
        "stream",
        "WritableElementStream",
        "options",
        "options",
        "stream",
        "stream",
        "ResultStream",
        "streams",
        "stream",
        "getMicStream",
        "err",
        "stream",
        "err",
        "err",
        "stream",
        "getMicStream",
        "micStream",
        "streams",
        "micStream",
        "L16",
        "micStream",
        "l16Stream",
        "recognizeStream",
        "streams",
        "l16Stream",
        "micStream",
        "l16Stream",
        "micStream",
        "bitBucket",
        "l16Stream",
        "keepMic",
        "recognizeStream",
        "end",
        "recognizeStream",
        "end",
        "recognizeStream",
        "micStream",
        "micStream",
        "recognizeStream",
        "micStream",
        "micStream",
        "recognizeStream",
        "recognizeStream",
        "streams",
        "prevStream",
        "prevStream",
        "stream",
        "prevStream",
        "stream",
        "stream",
        "stream",
        "recognizeStream",
        "stream",
        "recognizeStream",
        "recognizeStream",
        "stream",
        "recognizeStream",
        "stream",
        "getUserMedia",
        "exports",
        "__webpack_require__",
        "getVoices",
        "options",
        "options",
        "options",
        "fetch",
        "options",
        "reqOpts",
        "response",
        "response",
        "obj",
        "obj",
        "exports",
        "__webpack_require__",
        "__webpack_require__",
        "__webpack_require__",
        "synthesize",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "Audio",
        "audio",
        "audio",
        "qs",
        "pick",
        "options",
        "QUERY_PARAMS_ALLOWED",
        "options",
        "audio",
        "audio",
        "exports"
    ],
    "literals": [
        "'object'",
        "'object'",
        "'function'",
        "'object'",
        "\"WatsonSpeech\"",
        "\"WatsonSpeech\"",
        "'default'",
        "'a'",
        "\"\"",
        "\"use strict\"",
        "'function'",
        "'Invalid typed array length'",
        "'number'",
        "'string'",
        "'If encoding is specified then the first argument must be a string'",
        "'number'",
        "'\"value\" argument must not be a number'",
        "'undefined'",
        "'string'",
        "'undefined'",
        "'number'",
        "'\"size\" argument must be a number'",
        "'\"size\" argument must not be negative'",
        "'string'",
        "'string'",
        "''",
        "'utf8'",
        "'\"encoding\" must be a valid string encoding'",
        "'\\'offset\\' is out of bounds'",
        "'\\'length\\' is out of bounds'",
        "'undefined'",
        "'length'",
        "'number'",
        "'Buffer'",
        "'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'",
        "'Attempt to allocate Buffer larger than maximum '",
        "'size: 0x'",
        "' bytes'",
        "'Arguments must be Buffers'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'latin1'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'\"list\" argument must be an Array of Buffers'",
        "'\"list\" argument must be an Array of Buffers'",
        "'undefined'",
        "'function'",
        "'string'",
        "''",
        "'ascii'",
        "'latin1'",
        "'binary'",
        "'utf8'",
        "'utf-8'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'hex'",
        "'base64'",
        "''",
        "''",
        "''",
        "''",
        "'utf8'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'latin1'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'Unknown encoding: '",
        "''",
        "'Buffer size must be a multiple of 16-bits'",
        "'Buffer size must be a multiple of 32-bits'",
        "'Buffer size must be a multiple of 64-bits'",
        "''",
        "'Argument must be a Buffer'",
        "''",
        "'hex'",
        "' '",
        "' ... '",
        "'<Buffer '",
        "'>'",
        "'Argument must be a Buffer'",
        "'out of range index'",
        "'string'",
        "'string'",
        "'number'",
        "'function'",
        "'val must be string, number or Buffer'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'Invalid hex string'",
        "'utf8'",
        "'string'",
        "'utf8'",
        "'Buffer.write(string, encoding, offset[, length]) is no longer supported'",
        "'Attempt to write outside buffer bounds'",
        "'utf8'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'latin1'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'Unknown encoding: '",
        "''",
        "'Buffer'",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'offset is not uint'",
        "'Trying to access beyond buffer length'",
        "'\"buffer\" argument must be a Buffer instance'",
        "'\"value\" argument is out of bounds'",
        "'Index out of range'",
        "'Index out of range'",
        "'Index out of range'",
        "'targetStart out of bounds'",
        "'sourceStart out of bounds'",
        "'sourceEnd out of bounds'",
        "'string'",
        "'string'",
        "'string'",
        "'string'",
        "'encoding must be a string'",
        "'string'",
        "'Unknown encoding: '",
        "'number'",
        "'Out of range index'",
        "'number'",
        "''",
        "''",
        "'='",
        "''",
        "'0'",
        "'Invalid code point'",
        "'data'",
        "'drain'",
        "'end'",
        "'close'",
        "'function'",
        "'error'",
        "'error'",
        "'error'",
        "'data'",
        "'drain'",
        "'end'",
        "'close'",
        "'error'",
        "'error'",
        "'end'",
        "'close'",
        "'close'",
        "'end'",
        "'close'",
        "'close'",
        "'pipe'",
        "'function'",
        "'setTimeout has not been defined'",
        "'clearTimeout has not been defined'",
        "'function'",
        "'function'",
        "'browser'",
        "''",
        "'process.binding is not supported'",
        "'/'",
        "'process.chdir is not supported'",
        "' '",
        "'%%'",
        "'%'",
        "'%s'",
        "'%d'",
        "'%j'",
        "'[Circular]'",
        "' '",
        "' '",
        "''",
        "'\\\\b'",
        "'\\\\b'",
        "'i'",
        "'%s %d: %s'",
        "'bold'",
        "'italic'",
        "'underline'",
        "'inverse'",
        "'white'",
        "'grey'",
        "'black'",
        "'blue'",
        "'cyan'",
        "'green'",
        "'magenta'",
        "'red'",
        "'yellow'",
        "'special'",
        "'cyan'",
        "'number'",
        "'yellow'",
        "'boolean'",
        "'yellow'",
        "'undefined'",
        "'grey'",
        "'null'",
        "'bold'",
        "'string'",
        "'green'",
        "'date'",
        "'magenta'",
        "'regexp'",
        "'red'",
        "'\\u001b['",
        "'m'",
        "'\\u001b['",
        "'m'",
        "'message'",
        "'description'",
        "': '",
        "''",
        "'[Function'",
        "']'",
        "'special'",
        "'regexp'",
        "'date'",
        "''",
        "'{'",
        "'}'",
        "'['",
        "']'",
        "': '",
        "''",
        "' [Function'",
        "']'",
        "' '",
        "' '",
        "' '",
        "'regexp'",
        "'[Object]'",
        "'special'",
        "'undefined'",
        "'undefined'",
        "'\\''",
        "''",
        "\"\\\\'\"",
        "'\"'",
        "'\\''",
        "'string'",
        "''",
        "'number'",
        "''",
        "'boolean'",
        "'null'",
        "'null'",
        "'['",
        "']'",
        "''",
        "'[Getter/Setter]'",
        "'special'",
        "'[Getter]'",
        "'special'",
        "'[Setter]'",
        "'special'",
        "'['",
        "']'",
        "'\\n'",
        "'\\n'",
        "'  '",
        "'\\n'",
        "'\\n'",
        "'\\n'",
        "'   '",
        "'\\n'",
        "'[Circular]'",
        "'special'",
        "''",
        "'name'",
        "\"\\\\'\"",
        "'\"'",
        "\"'\"",
        "'string'",
        "': '",
        "'\\n'",
        "''",
        "''",
        "''",
        "'\\n '",
        "' '",
        "',\\n  '",
        "' '",
        "' '",
        "', '",
        "' '",
        "'boolean'",
        "'number'",
        "'string'",
        "'symbol'",
        "'[object RegExp]'",
        "'object'",
        "'[object Date]'",
        "'[object Error]'",
        "'function'",
        "'boolean'",
        "'number'",
        "'string'",
        "'symbol'",
        "'undefined'",
        "'0'",
        "'Jan'",
        "'Feb'",
        "'Mar'",
        "'Apr'",
        "'May'",
        "'Jun'",
        "'Jul'",
        "'Aug'",
        "'Sep'",
        "'Oct'",
        "'Nov'",
        "'Dec'",
        "':'",
        "' '",
        "'%s - %s'",
        "\"use strict\"",
        "'end'",
        "\"return this\"",
        "\"this\"",
        "\"object\"",
        "'[object Array]'",
        "'boolean'",
        "'number'",
        "'string'",
        "'symbol'",
        "'[object RegExp]'",
        "'object'",
        "'[object Date]'",
        "'[object Error]'",
        "'function'",
        "'boolean'",
        "'number'",
        "'string'",
        "'symbol'",
        "'undefined'",
        "\"use strict\"",
        "'data'",
        "'end'",
        "'error'",
        "'undefined'",
        "'use strict'",
        "'object'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'object'",
        "'undefined'",
        "'object'",
        "'[object Date]'",
        "'object'",
        "'[object Array]'",
        "'object'",
        "'[object RegExp]'",
        "''",
        "'g'",
        "'i'",
        "'m'",
        "'object'",
        "\"use strict\"",
        "'function'",
        "'number'",
        "'encoding must not be number'",
        "'number'",
        "'size must be a number'",
        "'size is too large'",
        "'string'",
        "'function'",
        "'number'",
        "'size must be a number'",
        "'size is too large'",
        "'function'",
        "'number'",
        "'\"value\" argument must not be a number'",
        "'string'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'\\'offset\\' is out of bounds'",
        "'\\'length\\' is out of bounds'",
        "'undefined'",
        "'length'",
        "'Buffer'",
        "'First argument must be a string, Buffer, '",
        "'ArrayBuffer, Array, or array-like object.'",
        "'function'",
        "'number'",
        "'size must be a number'",
        "'size is too large'",
        "'[object Array]'",
        "\"use strict\"",
        "'v0.'",
        "'v1.'",
        "'v1.8.'",
        "'function'",
        "'\"callback\" argument must be a function'",
        "'n must be a positive number'",
        "'error'",
        "'Uncaught, unspecified \"error\" event. ('",
        "')'",
        "'listener must be a function'",
        "'newListener'",
        "'(node) warning: possible EventEmitter memory '",
        "'leak detected. %d listeners added. '",
        "'Use emitter.setMaxListeners() to increase limit.'",
        "'function'",
        "'listener must be a function'",
        "'listener must be a function'",
        "'removeListener'",
        "'removeListener'",
        "'removeListener'",
        "'removeListener'",
        "'function'",
        "'number'",
        "'object'",
        "\"use strict\"",
        "'v0.10'",
        "'v0.9.'",
        "'utf8'",
        "'buffer'",
        "'_writableState.buffer is deprecated. Use _writableState.getBuffer '",
        "'instead.'",
        "'function'",
        "'function'",
        "'function'",
        "'function'",
        "'error'",
        "'Cannot pipe, not readable'",
        "'write after end'",
        "'error'",
        "'May not write null values to stream'",
        "'string'",
        "'Invalid non-string/buffer chunk'",
        "'error'",
        "'function'",
        "'buffer'",
        "'function'",
        "'string'",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'raw'",
        "''",
        "'Unknown encoding: '",
        "'string'",
        "'buffer'",
        "'error'",
        "'drain'",
        "''",
        "'_write() is not implemented'",
        "'function'",
        "'function'",
        "'prefinish'",
        "'finish'",
        "'finish'",
        "\"use strict\"",
        "''",
        "''",
        "'ja-JP'",
        "'zh-CN'",
        "' '",
        "''",
        "''",
        "''",
        "' '",
        "' '",
        "'\\u2026'",
        "' '",
        "'。'",
        "'. '",
        "\"use strict\"",
        "'inactivity_timeout'",
        "'timestamps'",
        "'word_confidence'",
        "'content-type'",
        "'interim_results'",
        "'keywords'",
        "'keywords_threshold'",
        "'max_alternatives'",
        "'word_alternatives_threshold'",
        "'profanity_filter'",
        "'smart_formatting'",
        "'speaker_labels'",
        "'customization_id'",
        "'model'",
        "'watson-token'",
        "'X-Watson-Learning-Opt-Out'",
        "'newListener'",
        "'results'",
        "'result'",
        "'speaker_labels'",
        "'Watson Speech to Text RecognizeStream: the '",
        "' event was deprecated. '",
        "\"Please set {objectMode: true} and listen for the 'data' event instead. \"",
        "'Pass {silent: true} to disable this message.'",
        "'connection-close'",
        "'Watson Speech to Text RecognizeStream: the '",
        "' event was deprecated. '",
        "\"Please listen for the 'close' event instead. \"",
        "'Pass {silent: true} to disable this message.'",
        "'connect'",
        "'Watson Speech to Text RecognizeStream: the '",
        "' event was deprecated. '",
        "\"Please listen for the 'open' event instead. \"",
        "'Pass {silent: true} to disable this message.'",
        "'WebSocket connection error'",
        "'watson-token'",
        "'watson-token'",
        "'content-type'",
        "'content-type'",
        "'X-WDC-PL-OPT-OUT'",
        "'X-Watson-Learning-Opt-Out'",
        "'X-Watson-Learning-Opt-Out'",
        "'X-WDC-PL-OPT-OUT'",
        "'customization_id'",
        "'en-US_BroadbandModel'",
        "'wss://stream.watsonplatform.net/speech-to-text/api'",
        "'ws'",
        "'/v1/recognize?'",
        "'start'",
        "'finish'",
        "'WebSocket connection error'",
        "'error'",
        "'open'",
        "'close'",
        "' '",
        "'error'",
        "'string'",
        "'Unexpected binary data received from server'",
        "'Invalid JSON received from service:'",
        "'message'",
        "'listening'",
        "'listening'",
        "'utf8'",
        "'send-json'",
        "'send-data'",
        "'UNRECOGNIZED_FORMAT'",
        "'content-type'",
        "'content-type'",
        "'Unable to determine content-type from file header, please specify manually.'",
        "'error'",
        "'open'",
        "'stop'",
        "'stop'",
        "'open'",
        "\"use strict\"",
        "\"use strict\"",
        "'MISMATCH'",
        "'Mismatch between speaker_label and word timestamp'",
        "'error'",
        "' '",
        "' '",
        "'SpeakerStream requires that timestamps and speaker_labels be enabled'",
        "'error'",
        "'No speaker_labels found. SpeakerStream requires speaker_labels to be enabled.'",
        "'Mismatch between number of word timestamps ('",
        "') and number of speaker_labels ('",
        "') - some data may be lost.'",
        "'error'",
        "\"use strict\"",
        "'string'",
        "'Watson Speech to Text WritableElementStream: missing outputElement'",
        "'value'",
        "'value'",
        "'textContent'",
        "''",
        "'hex'",
        "'utf8'",
        "'utf-8'",
        "'ascii'",
        "'binary'",
        "'base64'",
        "'ucs2'",
        "'ucs-2'",
        "'utf16le'",
        "'utf-16le'",
        "'raw'",
        "'Unknown encoding: '",
        "'utf8'",
        "''",
        "'utf8'",
        "'ucs2'",
        "'utf16le'",
        "'base64'",
        "''",
        "''",
        "''",
        "''",
        "\"use strict\"",
        "'toString'",
        "'prototype'",
        "'toString'",
        "'toLocaleString'",
        "'valueOf'",
        "'hasOwnProperty'",
        "'isPrototypeOf'",
        "'propertyIsEnumerable'",
        "'constructor'",
        "'undefined'",
        "'$'",
        "'object'",
        "'undefined'",
        "'object'",
        "'[object Function]'",
        "'[object String]'",
        "'Object.keys called on a non-object'",
        "'prototype'",
        "'constructor'",
        "''",
        "\"use strict\"",
        "'function'",
        "'string'",
        "'use strict'",
        "'NotSupportedError'",
        "'getUserMedia is not implemented in this browser'",
        "'undefined'",
        "\"undefined\"",
        "'object'",
        "\"use strict\"",
        "'undefined'",
        "'closed'",
        "'close'",
        "'format'",
        "\"use strict\"",
        "'abcdefghijklmnopqrst'",
        "''",
        "''",
        "'xy'",
        "'y'",
        "\"use strict\"",
        "'stream'",
        "'error'",
        "'close'",
        "'destroy'",
        "'pause'",
        "'resume'",
        "'function'",
        "'utf8'",
        "'function'",
        "'string'",
        "''",
        "''",
        "'error'",
        "'stream.push() after EOF'",
        "'error'",
        "'stream.unshift() after end event'",
        "'error'",
        "'data'",
        "'read'",
        "'read: emitReadable'",
        "'need readable'",
        "'length less than watermark'",
        "'reading or ended'",
        "'do read'",
        "'data'",
        "'string'",
        "'Invalid non-string/buffer chunk'",
        "'emitReadable'",
        "'emit readable'",
        "'readable'",
        "'maybeReadMore read 0'",
        "'error'",
        "'_read() is not implemented'",
        "'pipe count=%d opts=%j'",
        "'end'",
        "'unpipe'",
        "'onunpipe'",
        "'onend'",
        "'drain'",
        "'cleanup'",
        "'close'",
        "'finish'",
        "'drain'",
        "'error'",
        "'unpipe'",
        "'end'",
        "'end'",
        "'data'",
        "'data'",
        "'ondata'",
        "'false write response, pause'",
        "'onerror'",
        "'error'",
        "'error'",
        "'error'",
        "'error'",
        "'finish'",
        "'close'",
        "'onfinish'",
        "'close'",
        "'finish'",
        "'unpipe'",
        "'pipe'",
        "'pipe resume'",
        "'pipeOnDrain'",
        "'data'",
        "'unpipe'",
        "'unpipe'",
        "'unpipe'",
        "'data'",
        "'readable'",
        "'readable nexttick read 0'",
        "'resume'",
        "'resume read 0'",
        "'resume'",
        "'call pause flowing=%j'",
        "'pause'",
        "'pause'",
        "'flow'",
        "'end'",
        "'wrapped end'",
        "'data'",
        "'wrapped data'",
        "'function'",
        "'wrapped _read'",
        "''",
        "'\"endReadable()\" called on non-empty stream'",
        "'end'",
        "\"use strict\"",
        "'error'",
        "'no writecb in Transform class'",
        "'function'",
        "'function'",
        "'prefinish'",
        "'function'",
        "'_transform() is not implemented'",
        "'error'",
        "'Calling transform done when ws.length != 0'",
        "'Calling transform done when still transforming'",
        "\"use strict\"",
        "'audio/flac'",
        "'audio/wav'",
        "'audio/ogg; codecs=opus'",
        "\"use strict\"",
        "'Current browser is unable to play back '",
        "'UNSUPPORTED_FORMAT'",
        "'Unable to determine content type from file header; only wav, flac, and ogg/opus are supported.'",
        "'string'",
        "\"use strict\"",
        "'NO_TIMESTAMPS'",
        "\"use strict\"",
        "'TimingStream requires the source to be in objectMode'",
        "'TimingStream requires timestamps'",
        "'stop'",
        "\"use strict\"",
        "'format'",
        "\"use strict\"",
        "'='",
        "'watson-token'",
        "'&'",
        "\"use strict\"",
        "\"use strict\"",
        "'use strict'",
        "'object'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'object'",
        "'undefined'",
        "'object'",
        "'[object Date]'",
        "'object'",
        "'[object Array]'",
        "'object'",
        "'[object RegExp]'",
        "''",
        "'g'",
        "'i'",
        "'m'",
        "'object'",
        "\"use strict\"",
        "\"v0.33.1\"",
        "\"use strict\"",
        "'undefined'",
        "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'",
        "'-'",
        "'_'",
        "'Invalid string. Length must be a multiple of 4'",
        "'='",
        "'='",
        "''",
        "''",
        "'=='",
        "'='",
        "''",
        "'undefined'",
        "'function'",
        "'u8'",
        "'uint8'",
        "'uint8array'",
        "'finish'",
        "'buffer'",
        "'undefined'",
        "'uint8array'",
        "'array'",
        "'string'",
        "'string'",
        "\"[object Object]\"",
        "'object'",
        "'buffer'",
        "'array'",
        "'string'",
        "'buffer'",
        "'uint8array'",
        "'[object Array]'",
        "'string'",
        "'function'",
        "'string'",
        "'utf8'",
        "''",
        "'string'",
        "\"use strict\"",
        "'object'",
        "\"use strict\"",
        "'Missing argument \"blob\"'",
        "'function'",
        "'Given argument \"blob\" is not really a Blob/File or your environment does not support .slice()'",
        "'Your environment does not support FileReader'",
        "'Your environment does not support Uint8Array'",
        "'function'",
        "'Assertion error, buf should be an Uint8Array'",
        "'function'",
        "'Assertion error, buf should be an Uint8Array'",
        "'error'",
        "''",
        "'function'",
        "'x'",
        "\"Object.defineProperty called on non-object\"",
        "'get'",
        "'set'",
        "'value'",
        "\"Object.getOwnPropertyNames called on non-object\"",
        "\"Array too large for polyfill\"",
        "'get'",
        "'set'",
        "''",
        "''",
        "'ArrayBuffer size is not a small enough positive integer'",
        "'number'",
        "'ArrayBufferView size is not a small enough positive integer'",
        "'object'",
        "'object'",
        "'ArrayBuffer'",
        "'object'",
        "'ArrayBuffer'",
        "\"byteOffset out of range\"",
        "\"ArrayBuffer length minus the byteOffset is not a multiple of the element size.\"",
        "\"length of buffer minus byteOffset not a multiple of the element size\"",
        "\"byteOffset and length reference an area beyond the end of the buffer\"",
        "\"Unexpected argument type(s)\"",
        "\"Not enough arguments\"",
        "\"Not enough arguments\"",
        "\"Not enough arguments\"",
        "'object'",
        "\"Offset plus length of array is out of range\"",
        "'object'",
        "'undefined'",
        "\"Offset plus length of array is out of range\"",
        "\"Unexpected argument type(s)\"",
        "'ArrayBuffer'",
        "\"TypeError\"",
        "\"byteOffset out of range\"",
        "\"byteOffset and length reference an area beyond the end of the buffer\"",
        "\"Array index out of range\"",
        "\"Array index out of range\"",
        "'Function.prototype.bind called on incompatible '",
        "'[object Function]'",
        "'function'",
        "'$'",
        "'binder'",
        "'return function ('",
        "','",
        "'){ return binder.apply(this,arguments); }'",
        "'error'",
        "'end'",
        "'body already in use'",
        "'error'",
        "\"use strict\"",
        "'[object Arguments]'",
        "'[object Array]'",
        "'object'",
        "'number'",
        "'[object Function]'",
        "\"use strict\"",
        "'function'",
        "'function'",
        "'symbol'",
        "'test'",
        "'string'",
        "'[object Symbol]'",
        "'[object Symbol]'",
        "'function'",
        "'function'",
        "'function'",
        "\"use strict\"",
        "'undefined'",
        "'target must be an object'",
        "\"use strict\"",
        "\"use strict\"",
        "''",
        "''",
        "\"use strict\"",
        "\"function\"",
        "\"\"",
        "\"\"",
        "\"*\"",
        "\"setImmediate$\"",
        "\"$\"",
        "\"string\"",
        "\"message\"",
        "\"onmessage\"",
        "\"*\"",
        "\"script\"",
        "\"[object process]\"",
        "\"onreadystatechange\"",
        "\"script\"",
        "\"undefined\"",
        "\"undefined\"",
        "'noDeprecation'",
        "'throwDeprecation'",
        "'traceDeprecation'",
        "'true'",
        "'function'",
        "'object'",
        "'function'",
        "'function'",
        "'function'",
        "'w3cwebsocket'",
        "'version'",
        "\"_from\"",
        "\"websocket@^1.0.24\"",
        "\"_id\"",
        "\"websocket@1.0.24\"",
        "\"_inBundle\"",
        "\"_integrity\"",
        "\"sha1-dJA+dfJUW2suHeFCW8HJBZF6GJA=\"",
        "\"_location\"",
        "\"/websocket\"",
        "\"_phantomChildren\"",
        "\"_requested\"",
        "\"type\"",
        "\"range\"",
        "\"registry\"",
        "\"raw\"",
        "\"websocket@^1.0.24\"",
        "\"name\"",
        "\"websocket\"",
        "\"escapedName\"",
        "\"websocket\"",
        "\"rawSpec\"",
        "\"^1.0.24\"",
        "\"saveSpec\"",
        "\"fetchSpec\"",
        "\"^1.0.24\"",
        "\"_requiredBy\"",
        "\"/\"",
        "\"/watson-developer-cloud\"",
        "\"_resolved\"",
        "\"https://registry.npmjs.org/websocket/-/websocket-1.0.24.tgz\"",
        "\"_shasum\"",
        "\"74903e75f2545b6b2e1de1425bc1c905917a1890\"",
        "\"_spec\"",
        "\"websocket@^1.0.24\"",
        "\"_where\"",
        "\"/home/travis/build/watson-developer-cloud/speech-javascript-sdk\"",
        "\"author\"",
        "\"name\"",
        "\"Brian McKelvey\"",
        "\"email\"",
        "\"brian@worlize.com\"",
        "\"url\"",
        "\"https://www.worlize.com/\"",
        "\"browser\"",
        "\"lib/browser.js\"",
        "\"bugs\"",
        "\"url\"",
        "\"https://github.com/theturtle32/WebSocket-Node/issues\"",
        "\"bundleDependencies\"",
        "\"config\"",
        "\"verbose\"",
        "\"contributors\"",
        "\"name\"",
        "\"Iñaki Baz Castillo\"",
        "\"email\"",
        "\"ibc@aliax.net\"",
        "\"url\"",
        "\"http://dev.sipdoc.net\"",
        "\"dependencies\"",
        "\"debug\"",
        "\"^2.2.0\"",
        "\"nan\"",
        "\"^2.3.3\"",
        "\"typedarray-to-buffer\"",
        "\"^3.1.2\"",
        "\"yaeti\"",
        "\"^0.0.6\"",
        "\"deprecated\"",
        "\"description\"",
        "\"Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.\"",
        "\"devDependencies\"",
        "\"buffer-equal\"",
        "\"^1.0.0\"",
        "\"faucet\"",
        "\"^0.0.1\"",
        "\"gulp\"",
        "\"git+https://github.com/gulpjs/gulp.git#4.0\"",
        "\"gulp-jshint\"",
        "\"^2.0.4\"",
        "\"jshint\"",
        "\"^2.0.0\"",
        "\"jshint-stylish\"",
        "\"^2.2.1\"",
        "\"tape\"",
        "\"^4.0.1\"",
        "\"directories\"",
        "\"lib\"",
        "\"./lib\"",
        "\"engines\"",
        "\"node\"",
        "\">=0.8.0\"",
        "\"homepage\"",
        "\"https://github.com/theturtle32/WebSocket-Node\"",
        "\"keywords\"",
        "\"websocket\"",
        "\"websockets\"",
        "\"socket\"",
        "\"networking\"",
        "\"comet\"",
        "\"push\"",
        "\"RFC-6455\"",
        "\"realtime\"",
        "\"server\"",
        "\"client\"",
        "\"license\"",
        "\"Apache-2.0\"",
        "\"main\"",
        "\"index\"",
        "\"name\"",
        "\"websocket\"",
        "\"repository\"",
        "\"type\"",
        "\"git\"",
        "\"url\"",
        "\"git+https://github.com/theturtle32/WebSocket-Node.git\"",
        "\"scripts\"",
        "\"gulp\"",
        "\"gulp\"",
        "\"install\"",
        "\"(node-gyp rebuild 2> builderror.log) || (exit 0)\"",
        "\"test\"",
        "\"faucet test/unit\"",
        "\"version\"",
        "\"1.0.24\"",
        "'use strict'",
        "'URLSearchParams'",
        "'Symbol'",
        "'iterator'",
        "'FileReader'",
        "'Blob'",
        "'FormData'",
        "'ArrayBuffer'",
        "'[object Int8Array]'",
        "'[object Uint8Array]'",
        "'[object Uint8ClampedArray]'",
        "'[object Int16Array]'",
        "'[object Uint16Array]'",
        "'[object Int32Array]'",
        "'[object Uint32Array]'",
        "'[object Float32Array]'",
        "'[object Float64Array]'",
        "'string'",
        "'Invalid character in header field name'",
        "'string'",
        "','",
        "'delete'",
        "'Already read'",
        "''",
        "''",
        "'string'",
        "'unsupported BodyInit type'",
        "'content-type'",
        "'string'",
        "'content-type'",
        "'text/plain;charset=UTF-8'",
        "'content-type'",
        "'content-type'",
        "'application/x-www-form-urlencoded;charset=UTF-8'",
        "'could not read FormData body as blob'",
        "'could not read FormData body as text'",
        "'DELETE'",
        "'GET'",
        "'HEAD'",
        "'OPTIONS'",
        "'POST'",
        "'PUT'",
        "'Already read'",
        "'omit'",
        "'GET'",
        "'GET'",
        "'HEAD'",
        "'Body not allowed for GET or HEAD requests'",
        "'&'",
        "'='",
        "' '",
        "'='",
        "' '",
        "':'",
        "':'",
        "'default'",
        "'status'",
        "'statusText'",
        "'OK'",
        "''",
        "''",
        "'error'",
        "'Invalid status code'",
        "''",
        "'responseURL'",
        "'X-Request-URL'",
        "'response'",
        "'Network request failed'",
        "'Network request failed'",
        "'include'",
        "'responseType'",
        "'blob'",
        "'undefined'",
        "'undefined'",
        "\"use strict\"",
        "'Watson SpeechToText: missing required parameter: options.token'",
        "'omit'",
        "'application/json'",
        "'https://stream.watsonplatform.net/speech-to-text/api/v1/models?watson-token='",
        "\"use strict\"",
        "'WatsonSpeechToText: missing required parameter: opts.token'",
        "'WatsonSpeechToText recognizeFile(): Warning data option was renamed to file. Set silent: true to hide this warning.'",
        "'undefined'",
        "'undefined'",
        "'string'",
        "'error'",
        "'stop'",
        "'stop'",
        "'error'",
        "'string'",
        "'playing'",
        "'playing'",
        "'error'",
        "'error'",
        "'error'",
        "\"use strict\"",
        "'WatsonSpeechToText: missing required parameter: opts.token'",
        "'undefined'",
        "'content-type'",
        "'audio/l16;rate=16000'",
        "'error'",
        "'NotSupportedError'",
        "'end'",
        "'stop'",
        "'end'",
        "'stop'",
        "'error'",
        "'error'",
        "'error'",
        "\"use strict\"",
        "'Watson TextToSpeech: missing required parameter: options.token'",
        "'omit'",
        "'application/json'",
        "'https://stream.watsonplatform.net/text-to-speech/api/v1/voices?watson-token='",
        "\"use strict\"",
        "'voice'",
        "'X-WDC-PL-OPT-OUT'",
        "'X-Watson-Learning-Opt-Out'",
        "'text'",
        "'watson-token'",
        "'accept'",
        "'customization_id'",
        "'Watson TextToSpeech: missing required parameter: options.token'",
        "'watson-token'",
        "'anonymous'",
        "'https://stream.watsonplatform.net/text-to-speech/api/v1/synthesize?'"
    ],
    "variables": [
        "installedModules",
        "getter",
        "base64",
        "ieee754",
        "isArray",
        "arr",
        "i",
        "length",
        "actual",
        "length",
        "i",
        "len",
        "x",
        "y",
        "i",
        "len",
        "i",
        "buffer",
        "pos",
        "buf",
        "len",
        "loweredCase",
        "loweredCase",
        "i",
        "len",
        "i",
        "len",
        "i",
        "len",
        "i",
        "length",
        "max",
        "x",
        "y",
        "len",
        "thisCopy",
        "targetCopy",
        "i",
        "indexSize",
        "arrLength",
        "valLength",
        "i",
        "foundIndex",
        "found",
        "j",
        "remaining",
        "strLen",
        "i",
        "parsed",
        "remaining",
        "loweredCase",
        "res",
        "i",
        "start",
        "firstByte",
        "codePoint",
        "bytesPerSequence",
        "secondByte",
        "thirdByte",
        "fourthByte",
        "tempCodePoint",
        "MAX_ARGUMENTS_LENGTH",
        "len",
        "res",
        "i",
        "ret",
        "i",
        "start",
        "ret",
        "i",
        "start",
        "len",
        "i",
        "start",
        "res",
        "i",
        "len",
        "newBuf",
        "sliceLen",
        "i",
        "val",
        "mul",
        "i",
        "val",
        "mul",
        "val",
        "mul",
        "i",
        "i",
        "byteLength",
        "mul",
        "val",
        "val",
        "val",
        "maxBytes",
        "mul",
        "i",
        "maxBytes",
        "i",
        "mul",
        "i",
        "j",
        "i",
        "j",
        "limit",
        "i",
        "mul",
        "sub",
        "limit",
        "i",
        "mul",
        "sub",
        "len",
        "i",
        "code",
        "i",
        "len",
        "INVALID_BASE64_RE",
        "codePoint",
        "length",
        "leadSurrogate",
        "i",
        "byteArray",
        "i",
        "c",
        "hi",
        "lo",
        "byteArray",
        "i",
        "i",
        "EE",
        "inherits",
        "source",
        "didOnEnd",
        "TempCtor",
        "process",
        "cachedSetTimeout",
        "cachedClearTimeout",
        "queue",
        "draining",
        "currentQueue",
        "queueIndex",
        "timeout",
        "len",
        "args",
        "i",
        "formatRegExp",
        "objects",
        "i",
        "i",
        "args",
        "arguments",
        "len",
        "x",
        "warned",
        "debugs",
        "debugEnviron",
        "pid",
        "msg",
        "ctx",
        "style",
        "hash",
        "ret",
        "primitive",
        "keys",
        "visibleKeys",
        "name",
        "array",
        "braces",
        "n",
        "output",
        "simple",
        "output",
        "i",
        "l",
        "name",
        "desc",
        "numLinesEst",
        "length",
        "months",
        "d",
        "time",
        "keys",
        "i",
        "objectKeys",
        "keys",
        "processNextTick",
        "util",
        "Readable",
        "Writable",
        "keys",
        "v",
        "method",
        "i",
        "l",
        "g",
        "results",
        "clone",
        "clone",
        "nativeMap",
        "nativeSet",
        "nativePromise",
        "allParents",
        "allChildren",
        "useBuffer",
        "child",
        "proto",
        "index",
        "keyChild",
        "valueChild",
        "entryChild",
        "attrs",
        "symbols",
        "i",
        "symbol",
        "descriptor",
        "allPropertyNames",
        "i",
        "propertyName",
        "descriptor",
        "c",
        "flags",
        "buffer",
        "Buffer",
        "SlowBuffer",
        "MAX_LEN",
        "enc",
        "encoding",
        "_fill",
        "fill",
        "buf",
        "fillBuf",
        "flen",
        "i",
        "offset",
        "encodingOrOffset",
        "len",
        "length",
        "toString",
        "len",
        "args",
        "i",
        "er",
        "handler",
        "len",
        "args",
        "i",
        "listeners",
        "err",
        "m",
        "fired",
        "position",
        "length",
        "i",
        "key",
        "listeners",
        "ret",
        "evlistener",
        "processNextTick",
        "asyncWrite",
        "Duplex",
        "util",
        "internalUtil",
        "Stream",
        "Buffer",
        "bufferShim",
        "hwm",
        "defaultHwm",
        "noDecode",
        "current",
        "realHasInstance",
        "er",
        "valid",
        "er",
        "state",
        "ret",
        "isBuf",
        "state",
        "state",
        "len",
        "ret",
        "last",
        "state",
        "sync",
        "cb",
        "finished",
        "entry",
        "l",
        "buffer",
        "holder",
        "count",
        "chunk",
        "encoding",
        "cb",
        "len",
        "state",
        "need",
        "_this",
        "entry",
        "cb",
        "Transform",
        "util",
        "clone",
        "defaults",
        "reHesitation",
        "reRepeatedCharacter",
        "reDUnderscoreWords",
        "textFinal",
        "Duplex",
        "util",
        "pick",
        "W3CWebSocket",
        "contentType",
        "qs",
        "OPENING_MESSAGE_PARAMS_ALLOWED",
        "QUERY_PARAMS_ALLOWED",
        "options",
        "queryParams",
        "queryString",
        "url",
        "openingMessage",
        "socket",
        "err",
        "data",
        "ct",
        "err",
        "closingMessage",
        "Transform",
        "util",
        "clone",
        "cloned",
        "Transform",
        "util",
        "pullAllWith",
        "noTimestamps",
        "clone",
        "WORD",
        "FROM",
        "TO",
        "resultIndex",
        "timestampIndex",
        "words",
        "result",
        "timestamp",
        "err",
        "utterances",
        "utterance",
        "results",
        "result",
        "lastUtterance",
        "alt",
        "start",
        "end",
        "alts",
        "original_keywords_result",
        "keywords_result",
        "spottings",
        "err",
        "speaker_labels",
        "message",
        "timestamps",
        "msg",
        "err",
        "Writable",
        "util",
        "defaults",
        "propMap",
        "Buffer",
        "isBufferEncoding",
        "StringDecoder",
        "charStr",
        "available",
        "charCode",
        "end",
        "end",
        "charCode",
        "size",
        "i",
        "c",
        "res",
        "cr",
        "buf",
        "enc",
        "has",
        "toStr",
        "isArgs",
        "isEnumerable",
        "hasDontEnumBug",
        "hasProtoEnumBug",
        "dontEnums",
        "equalsConstructorPrototype",
        "ctor",
        "excludedKeys",
        "hasAutomationEqualityBug",
        "equalsConstructorPrototypeIfNotBuggy",
        "keysShim",
        "isObject",
        "isFunction",
        "isArguments",
        "isString",
        "theKeys",
        "skipProto",
        "i",
        "j",
        "skipConstructor",
        "k",
        "keysWorksWithArguments",
        "originalKeys",
        "isObject",
        "res",
        "len",
        "idx",
        "key",
        "__WEBPACK_AMD_DEFINE_ARRAY__",
        "__WEBPACK_AMD_DEFINE_RESULT__",
        "err",
        "isPromiseSupported",
        "navigatorExists",
        "gump",
        "gum",
        "Readable",
        "util",
        "bufferSize",
        "inputChannels",
        "outputChannels",
        "recording",
        "AudioContext",
        "context",
        "audioInput",
        "recorder",
        "implementation",
        "lacksProperEnumerationOrder",
        "letters",
        "i",
        "obj",
        "actual",
        "assignHasPendingExceptions",
        "thrower",
        "processNextTick",
        "isArray",
        "Duplex",
        "EE",
        "EElistenerCount",
        "Stream",
        "Buffer",
        "bufferShim",
        "util",
        "debugUtil",
        "debug",
        "BufferList",
        "StringDecoder",
        "kProxyEvents",
        "hwm",
        "defaultHwm",
        "state",
        "state",
        "er",
        "e",
        "_e",
        "skipAdd",
        "MAX_HWM",
        "state",
        "nOrig",
        "n",
        "doRead",
        "ret",
        "er",
        "chunk",
        "state",
        "len",
        "src",
        "state",
        "doEnd",
        "endFn",
        "ondrain",
        "cleanedUp",
        "increasedAwaitDrain",
        "ret",
        "state",
        "state",
        "dests",
        "len",
        "i",
        "index",
        "res",
        "state",
        "state",
        "state",
        "state",
        "paused",
        "chunk",
        "ret",
        "n",
        "ret",
        "ret",
        "p",
        "c",
        "ret",
        "nb",
        "ret",
        "p",
        "c",
        "buf",
        "nb",
        "state",
        "i",
        "l",
        "i",
        "l",
        "Duplex",
        "util",
        "ts",
        "cb",
        "rs",
        "stream",
        "ts",
        "rs",
        "ts",
        "ws",
        "ts",
        "contentTypes",
        "getContentTypeFromHeader",
        "audio",
        "audio",
        "err",
        "blobToText",
        "r",
        "ct",
        "err",
        "alt",
        "Transform",
        "util",
        "defaults",
        "noTimestamps",
        "err",
        "delayMs",
        "objectMode",
        "hasTranscript",
        "timestamps",
        "messageTime",
        "nextTickTime",
        "delayMs",
        "Transform",
        "util",
        "defaults",
        "TARGET_SAMPLE_RATE",
        "buffer",
        "newSamples",
        "unusedSamples",
        "i",
        "offset",
        "samplingRateRatio",
        "nOutputSamples",
        "outputBuffer",
        "sample",
        "j",
        "indexSampleAfterLastUsed",
        "remaining",
        "output",
        "i",
        "multiplier",
        "source",
        "source",
        "clone",
        "allParents",
        "allChildren",
        "useBuffer",
        "child",
        "proto",
        "index",
        "attrs",
        "c",
        "flags",
        "lookup",
        "revLookup",
        "Arr",
        "code",
        "i",
        "len",
        "len",
        "i",
        "j",
        "l",
        "tmp",
        "placeHolders",
        "arr",
        "len",
        "L",
        "tmp",
        "output",
        "i",
        "start",
        "tmp",
        "len",
        "extraBytes",
        "output",
        "parts",
        "maxChunkLength",
        "i",
        "len2",
        "Writable",
        "inherits",
        "U8",
        "U8",
        "Uint8Array",
        "encoding",
        "shouldInferEncoding",
        "firstBuffer",
        "isArray",
        "strings",
        "needsToString",
        "i",
        "p",
        "bufs",
        "i",
        "p",
        "res",
        "i",
        "len",
        "i",
        "u8",
        "i",
        "offset",
        "part",
        "j",
        "implementation",
        "e",
        "m",
        "eLen",
        "eMax",
        "eBias",
        "nBits",
        "i",
        "d",
        "s",
        "e",
        "m",
        "c",
        "eLen",
        "eMax",
        "eBias",
        "rt",
        "i",
        "d",
        "s",
        "isArray",
        "index",
        "length",
        "result",
        "length",
        "index",
        "index",
        "length",
        "index",
        "length",
        "arrayProto",
        "splice",
        "indexOf",
        "index",
        "length",
        "seen",
        "array",
        "fromIndex",
        "value",
        "computed",
        "index",
        "length",
        "isoFetch",
        "patchRequest",
        "patchResponse",
        "Readable",
        "inherits",
        "FileReader",
        "Uint8Array",
        "buf",
        "size",
        "start",
        "end",
        "chunk",
        "reader",
        "buf",
        "MAX_ARRAY_LENGTH",
        "ECMAScript",
        "opts",
        "ophop",
        "LN2",
        "abs",
        "floor",
        "log",
        "min",
        "pow",
        "round",
        "props",
        "i",
        "defineProp",
        "getOwnPropNames",
        "props",
        "p",
        "i",
        "s",
        "s",
        "bias",
        "s",
        "e",
        "f",
        "ln",
        "i",
        "bits",
        "w",
        "f",
        "bits",
        "i",
        "j",
        "b",
        "bias",
        "s",
        "e",
        "f",
        "ArrayBuffer",
        "i",
        "ArrayBufferView",
        "ctor",
        "array",
        "sequence",
        "i",
        "s",
        "i",
        "o",
        "i",
        "o",
        "array",
        "sequence",
        "offset",
        "len",
        "i",
        "s",
        "d",
        "byteOffset",
        "byteLength",
        "tmp",
        "len",
        "Int8Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "Int16Array",
        "Uint16Array",
        "Int32Array",
        "Uint32Array",
        "Float32Array",
        "Float64Array",
        "IS_BIG_ENDIAN",
        "u16array",
        "u8array",
        "DataView",
        "uint8Array",
        "i",
        "typeArray",
        "byteArray",
        "i",
        "byteView",
        "ERROR_MESSAGE",
        "toStr",
        "funcType",
        "target",
        "args",
        "bound",
        "binder",
        "result",
        "boundLength",
        "boundArgs",
        "i",
        "Empty",
        "apply",
        "msecs",
        "concat",
        "stream",
        "bufferFromReadable",
        "ReadableFromArrayBuffer",
        "ReadableFromWhatwg",
        "inherits",
        "Readable",
        "inherits",
        "Readable",
        "toStr",
        "isArgs",
        "keys",
        "obj",
        "sym",
        "symObj",
        "symVal",
        "syms",
        "descriptor",
        "keys",
        "bind",
        "canBeObject",
        "hasSymbols",
        "toObject",
        "push",
        "propIsEnumerable",
        "originalGetSymbols",
        "objTarget",
        "s",
        "source",
        "i",
        "props",
        "syms",
        "value",
        "key",
        "getSymbols",
        "Transform",
        "util",
        "Buffer",
        "bufferShim",
        "entry",
        "entry",
        "ret",
        "p",
        "ret",
        "ret",
        "p",
        "i",
        "nextHandle",
        "tasksByHandle",
        "currentlyRunningATask",
        "doc",
        "registerImmediate",
        "args",
        "i",
        "task",
        "callback",
        "args",
        "task",
        "postMessageIsAsynchronous",
        "oldOnMessage",
        "messagePrefix",
        "onGlobalMessage",
        "channel",
        "handle",
        "html",
        "script",
        "attachTo",
        "warned",
        "val",
        "TempCtor",
        "_global",
        "NativeWebSocket",
        "websocket_version",
        "native_instance",
        "support",
        "viewClasses",
        "isDataView",
        "isArrayBufferView",
        "iterator",
        "value",
        "oldValue",
        "items",
        "items",
        "items",
        "reader",
        "promise",
        "reader",
        "promise",
        "view",
        "chars",
        "i",
        "view",
        "rejected",
        "rejected",
        "methods",
        "upcased",
        "body",
        "form",
        "split",
        "name",
        "value",
        "headers",
        "parts",
        "key",
        "value",
        "response",
        "redirectStatuses",
        "request",
        "xhr",
        "options",
        "body",
        "reqOpts",
        "BlobStream",
        "RecognizeStream",
        "FilePlayer",
        "FormatStream",
        "TimingStream",
        "assign",
        "WritableElementStream",
        "ResultStream",
        "SpeakerStream",
        "fetch",
        "realtime",
        "rsOpts",
        "recognizeStream",
        "streams",
        "stream",
        "recognizeStream",
        "source",
        "timingStream",
        "fn",
        "sources",
        "stop",
        "getUserMedia",
        "MicrophoneStream",
        "RecognizeStream",
        "L16",
        "FormatStream",
        "assign",
        "WritableElementStream",
        "Writable",
        "ResultStream",
        "SpeakerStream",
        "preservedMicStream",
        "bitBucket",
        "rsOpts",
        "recognizeStream",
        "streams",
        "keepMic",
        "getMicStream",
        "pm",
        "micStream",
        "stream",
        "recognizeStream",
        "l16Stream",
        "reqOpts",
        "pick",
        "qs",
        "QUERY_PARAMS_ALLOWED",
        "audio"
    ],
    "comments": [
        "webpackBootstrap",
        "The module cache",
        "The require function",
        "Check if module is in cache",
        "Create a new module (and put it into the cache)",
        "Execute the module function",
        "Flag the module as loaded",
        "Return the exports of the module",
        "expose the modules object (__webpack_modules__)",
        "expose the module cache",
        "identity function for calling harmony imports with the correct context",
        "define getter function for harmony exports",
        "getDefaultExport function for compatibility with non-harmony modules",
        "Object.prototype.hasOwnProperty.call",
        "__webpack_public_path__",
        "Load entry module and return exports",
        "0",
        "",
        "WEBPACK VAR INJECTION",
        "!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT",
        "eslint-disable no-proto",
        "typed array instances can be augmented",
        "chrome 9-10 lack `subarray`",
        "ie10 has broken `subarray`",
        "Return an augmented `Uint8Array` instance, for best performance",
        "Fallback: Return an object instance of the Buffer class",
        "Common case.",
        "not used by this implementation",
        "TODO: Legacy, not needed anymore. Remove in next major version.",
        "Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97",
        "Only pay attention to encoding if it's a string. This",
        "prevents accidentally sending in a number that would",
        "be interpretted as a start offset.",
        "Writing a hex string, for example, that contains invalid characters will",
        "cause everything after the first invalid character to be ignored. (e.g.",
        "'abxxcd' will be treated as 'ab')",
        "this throws if `array` is not a valid ArrayBuffer",
        "Return an augmented `Uint8Array` instance, for best performance",
        "Fallback: Return an object instance of the Buffer class",
        "Note: cannot use `length < kMaxLength()` here because that fails when",
        "length is NaN (which is otherwise coerced to zero.)",
        "eslint-disable-line eqeqeq",
        "Use a for loop to avoid recursion",
        "assume utf8",
        "No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only",
        "property of a typed array.",
        "This behaves neither like String nor Uint8Array in that we set start/end",
        "to their upper/lower bounds if the value passed is out of range.",
        "undefined is handled specially as per ECMA-262 6th Edition,",
        "Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.",
        "Return early if start > this.length. Done here to prevent potential uint32",
        "coercion fail below.",
        "Force coersion to uint32. This will also coerce falsey/NaN values to 0.",
        "The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect",
        "Buffer instances.",
        "Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,",
        "OR the last index of `val` in `buffer` at offset <= `byteOffset`.",
        "",
        "Arguments:",
        "- buffer - a Buffer to search",
        "- val - a string, Buffer, or number",
        "- byteOffset - an index into `buffer`; will be clamped to an int32",
        "- encoding - an optional encoding, relevant is val is a string",
        "- dir - true for indexOf, false for lastIndexOf",
        "Empty buffer means no match",
        "Normalize byteOffset",
        "Coerce to Number.",
        "byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer",
        "Normalize byteOffset: negative offsets start from the end of the buffer",
        "Normalize val",
        "Finally, search either indexOf (if dir is true) or lastIndexOf",
        "Special case: looking for empty string/buffer always fails",
        "Search for a byte value [0-255]",
        "must be an even number of digits",
        "Buffer#write(string)",
        "Buffer#write(string, encoding)",
        "Buffer#write(string, offset[, length][, encoding])",
        "legacy write(string, encoding, offset, length) - remove in v0.13",
        "Warning: maxLength not taken into account in base64Write",
        "we did not generate a valid codePoint so insert a",
        "replacement char (U+FFFD) and advance only 1 byte",
        "encode to utf16 (surrogate pair dance)",
        "Based on http://stackoverflow.com/a/22747272/680742, the browser with",
        "the lowest limit is Chrome, with 0x10000 args.",
        "We go 1 magnitude less, for safety",
        "avoid extra slice()",
        "Decode in chunks to avoid \"call stack size exceeded\".",
        "copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)",
        "Copy 0 bytes; we're done",
        "Fatal error conditions",
        "Are we oob?",
        "descending copy from end",
        "ascending copy from start",
        "Usage:",
        "buffer.fill(number[, offset[, end]])",
        "buffer.fill(buffer[, offset[, end]])",
        "buffer.fill(string[, offset[, end]][, encoding])",
        "Handle string cases:",
        "Invalid ranges are not set to a default, so can range check early.",
        "HELPER FUNCTIONS",
        "================",
        "Node strips out invalid characters like \\n and \\t from the string, base64-js does not",
        "Node converts strings with length < 2 to ''",
        "Node allows for non-padded base64 strings (missing trailing ===), base64-js does not",
        "is surrogate component",
        "last char was a lead",
        "no lead yet",
        "unexpected trail",
        "unpaired lead",
        "valid lead",
        "2 leads in a row",
        "valid surrogate pair",
        "valid bmp char, but last char was a lead",
        "encode utf8",
        "Node's code seems to be doing this and not & 0x7F..",
        "eslint-disable-line no-self-compare",
        "WEBPACK VAR INJECTION",
        "",
        "1",
        "",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "Backwards-compat with node 0.4.x",
        "old-style streams.  Note that the pipe method (the only relevant",
        "part of this class) is overridden in the Readable class.",
        "If the 'end' option is not supplied, dest.end() will be called when",
        "source gets the 'end' or 'close' events.  Only dest.end() once.",
        "don't leave dangling pipes when there are errors.",
        "Unhandled stream error in pipe.",
        "remove all the event listeners that were added.",
        "Allow for unix-like usage: A.pipe(B).pipe(C)",
        "",
        "2",
        "",
        "implementation from standard node.js 'util' module",
        "old school shim for old browsers",
        "",
        "3",
        "",
        "shim for using process in browser",
        "cached from whatever global is present so that test runners that stub it",
        "don't break things.  But we need to wrap it in a try catch in case it is",
        "wrapped in strict mode code which doesn't define any globals.  It's inside a",
        "function because try/catches deoptimize in certain engines.",
        "normal enviroments in sane situations",
        "if setTimeout wasn't available but was latter defined",
        "when when somebody has screwed with setTimeout but no I.E. maddness",
        "When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally",
        "same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error",
        "normal enviroments in sane situations",
        "if clearTimeout wasn't available but was latter defined",
        "when when somebody has screwed with setTimeout but no I.E. maddness",
        "When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally",
        "same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.",
        "Some versions of I.E. have different rules for clearTimeout vs setTimeout",
        "v8 likes predictible objects",
        "empty string to avoid regexp issues",
        "",
        "4",
        "",
        "WEBPACK VAR INJECTION",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "Mark that a method should not be used.",
        "Returns a modified function which warns once by default.",
        "If --no-deprecation is set, then it is a no-op.",
        "Allow for deprecating things in the process of starting up.",
        "legacy: obj, showHidden, depth, colors",
        "default options",
        "legacy...",
        "legacy...",
        "got an \"options\" object",
        "set default options",
        "http://en.wikipedia.org/wiki/ANSI_escape_code#graphics",
        "Don't use 'blue' not visible on cmd.exe",
        "\"name\": intentionally not styling",
        "Provide a hook for user-specified inspect functions.",
        "Check that value is an object with an inspect function on it",
        "Filter out the util module, it's inspect function is special",
        "Also filter out any prototype objects using the circular check.",
        "Primitive types cannot have properties",
        "Look up the keys of the object.",
        "IE doesn't make error fields non-enumerable",
        "http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx",
        "Some type of object without properties can be shortcutted.",
        "Make Array say that they are Array",
        "Make functions say that they are functions",
        "Make RegExps say that they are RegExps",
        "Make dates with properties first say the date",
        "Make error with message first say the error",
        "For some reason typeof null is \"object\", so special case here.",
        "NOTE: These type checking functions intentionally don't use `instanceof`",
        "because it is fragile and can be easily faked with `Object.create()`.",
        "ES6 symbol",
        "26 Feb 16:19:34",
        "log is just a thin wrapper to console.log that prepends a timestamp",
        "Don't do anything if add isn't an object",
        "WEBPACK VAR INJECTION",
        "",
        "5",
        "",
        "a duplex stream is just a stream that is both readable and writable.",
        "Since JS doesn't have multiple prototypal inheritance, this class",
        "prototypally inherits from Readable, and then parasitically from",
        "Writable.",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "the no-half-open enforcer",
        "if we allow half-open state, or if the writable side ended,",
        "then we're ok.",
        "no more data can be written.",
        "But allow more writes to happen in this tick.",
        "",
        "6",
        "",
        "",
        "7",
        "",
        "This works in non-strict mode",
        "This works if eval is allowed (see CSP)",
        "This works if the window reference is available",
        "g can still be undefined, but nothing to do about it...",
        "We return undefined, instead of nothing here, so it's",
        "easier to handle this case. if(!global) { ...}",
        "",
        "8",
        "",
        "WEBPACK VAR INJECTION",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "NOTE: These type checking functions intentionally don't use `instanceof`",
        "because it is fragile and can be easily faked with `Object.create()`.",
        "ES6 symbol",
        "WEBPACK VAR INJECTION",
        "",
        "9",
        "",
        "WEBPACK VAR INJECTION",
        "WEBPACK VAR INJECTION",
        "",
        "10",
        "",
        "",
        "11",
        "",
        "WEBPACK VAR INJECTION",
        "maybe a reference error because no `Map`. Give it a dummy value that no",
        "value will ever be an instanceof.",
        "maintain two arrays for circular references, where corresponding parents",
        "and children have the same index",
        "recurse this function so we don't reset allParents and allChildren",
        "cloning null always returns null",
        "Don't need to worry about cloning a symbol because it is a primitive,",
        "like a number or string.",
        "private utility functions",
        "WEBPACK VAR INJECTION",
        "",
        "12",
        "",
        "WEBPACK VAR INJECTION",
        "WEBPACK VAR INJECTION",
        "",
        "13",
        "",
        "",
        "14",
        "",
        "WEBPACK VAR INJECTION",
        "WEBPACK VAR INJECTION",
        "",
        "15",
        "",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "Backwards-compat with node 0.10.x",
        "By default EventEmitters will print a warning if more than 10 listeners are",
        "added to it. This is a useful default which helps finding memory leaks.",
        "Obviously not all Emitters should be limited to 10. This function allows",
        "that to be increased. Set to zero for unlimited.",
        "If there is no 'error' event listener then throw.",
        "Unhandled 'error' event",
        "At least give some kind of context to the user",
        "fast cases",
        "slower",
        "To avoid recursion in the case that type === \"newListener\"! Before",
        "adding it to the listeners, first emit \"newListener\".",
        "Optimize the case of one listener. Don't need the extra array object.",
        "If we've already got an array, just append.",
        "Adding the second element, need to change to array.",
        "Check for listener leak",
        "not supported in IE 10",
        "emits a 'removeListener' event iff the listener was removed",
        "not listening for removeListener, no need to emit",
        "emit removeListener for all listeners on all events",
        "LIFO order",
        "",
        "16",
        "",
        "WEBPACK VAR INJECTION",
        "A bit simpler than readable streams.",
        "Implement an async ._write(chunk, encoding, cb), and it'll handle all",
        "the drain event emission and buffering.",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "object stream flag to indicate whether or not this stream",
        "contains buffers or objects.",
        "the point at which write() starts returning false",
        "Note: 0 is a valid value, means that we always return false if",
        "the entire buffer is not flushed immediately on write()",
        "cast to ints.",
        "drain event flag.",
        "at the start of calling end()",
        "when end() has been called, and returned",
        "when 'finish' is emitted",
        "should we decode strings into buffers before passing to _write?",
        "this is here so that some node-core streams can optimize string",
        "handling at a lower level.",
        "Crypto is kind of old and crusty.  Historically, its default string",
        "encoding is 'binary' so we have to make this configurable.",
        "Everything else in the universe uses 'utf8', though.",
        "not an actual buffer we keep track of, but a measurement",
        "of how much we're waiting to get pushed to some underlying",
        "socket or file.",
        "a flag to see when we're in the middle of a write.",
        "when true all writes will be buffered until .uncork() call",
        "a flag to be able to tell if the onwrite cb is called immediately,",
        "or on a later tick.  We set this to true at first, because any",
        "actions that shouldn't happen until \"later\" should generally also",
        "not happen before the first write call.",
        "a flag to know if we're processing previously buffered items, which",
        "may call the _write() callback in the same tick, so that we don't",
        "end up in an overlapped onwrite situation.",
        "the callback that's passed to _write(chunk,cb)",
        "the callback that the user supplies to write(chunk,encoding,cb)",
        "the amount that is being written when _write is called.",
        "number of pending user-supplied write callbacks",
        "this must be 0 before 'finish' can be emitted",
        "emit prefinish if the only thing we're waiting for is _write cbs",
        "This is relevant for synchronous Transform streams",
        "True if the error was already emitted and should not be thrown again",
        "count buffered requests",
        "allocate the first CorkedRequest, there is always",
        "one allocated and free to use, and we maintain at most two",
        "Test _writableState for inheritance to account for Duplex streams,",
        "whose prototype chain only points to Readable.",
        "Writable ctor is applied to Duplexes, too.",
        "`realHasInstance` is necessary because using plain `instanceof`",
        "would return false, as no `_writableState` property is attached.",
        "Trying to use the custom `instanceof` for Writable here will also break the",
        "Node.js LazyTransform implementation, which has a non-trivial getter for",
        "`_writableState` that would lead to infinite recursion.",
        "legacy.",
        "Otherwise people can pipe Writable streams, which is just wrong.",
        "TODO: defer error events consistently everywhere, not just the cb",
        "Checks that a user-supplied chunk is valid, especially for the particular",
        "mode the stream is in. Currently this means that `null` is never accepted",
        "and undefined/non-string values are only allowed in object mode.",
        "node::ParseEncoding() requires lower case.",
        "if we're already writing something, then just put this",
        "in the queue, and wait our turn.  Otherwise, call _write",
        "If we return false, then we need a drain event, so set that flag.",
        "we must ensure that previous needDrain will not be reset to false.",
        "Check if we're actually ready to finish, but don't emit yet",
        "<replacement>",
        "</replacement>",
        "Must force callback to be called on nextTick, so that we don't",
        "emit 'drain' before the write() consumer gets the 'false' return",
        "value, and has a chance to attach a 'drain' listener.",
        "if there's something in the buffer waiting, then process it",
        "Fast case, write everything using _writev()",
        "doWrite is almost always async, defer these to save a bit of time",
        "as the hot path ends with doWrite",
        "Slow case, write chunks one-by-one",
        "if we didn't call the onwrite immediately, then",
        "it means that we need to wait until it does.",
        "also, that means that the chunk and cb are currently",
        "being processed, so move the buffer counter past them.",
        ".end() fully uncorks",
        "ignore unnecessary end() calls.",
        "It seems a linked list but it is not",
        "there will be only 2 of these for each stream",
        "WEBPACK VAR INJECTION",
        "",
        "17",
        "",
        "some models should have all spaces removed",
        "false = don't convert strings to buffers before passing to _write",
        "http://www.ibm.com/watson/developercloud/doc/speech-to-text/output.shtml#hesitation - D_ is handled below",
        "detect the same character repeated three or more times and remove it",
        "replace D_(anything)",
        "clean out \"junk\"",
        "remove spaces for Japanese and Chinese",
        "we want exactly 1 space at the end",
        "capitalize first word, returns '' in the case of an empty word",
        "don't put a period down if the clean stage remove all of the text",
        "just add a space if the sentence ends in an ellipse",
        "if there are multiple interim results (as produced by the speaker stream),",
        "treat the text as final in all but the last result",
        "timestamps is an array of arrays, each sub-array is in the form [\"word\", startTime, endTime]'",
        "remove any timestamps without a word (due to cleaning out junk words)",
        "",
        "18",
        "",
        "WEBPACK VAR INJECTION",
        "this stream only supports objectMode on the output side.",
        "It must receive binary data input.",
        "eslint-disable-next-line no-console",
        "eslint-disable-next-line no-console",
        "eslint-disable-next-line no-console",
        "node params: requestUrl, protocols, origin, headers, extraRequestOptions",
        "browser params: requestUrl, protocols (all others ignored)",
        "when the input stops, let the service know that we're done",
        "if (self.listening) {",
        "}",
        "this is emitted both when the server is ready for audio, and after we send the close message to indicate that it's done processing",
        "size",
        "there's no easy way to control reads from the underlying library",
        "so, the best we can do here is a no-op",
        "can't send any more data after the stop message (although this shouldn't happen normally...)",
        "this is called both when the source stream finishes, and when .stop() is fired, but we only want to send the stop message once.",
        "the substr really shouldn't be necessary, but there's a bug somewhere that can cause buffer.slice(0,4) to return",
        "the entire contents of the buffer, so it's a failsafe to catch that",
        "WEBPACK VAR INJECTION",
        "",
        "19",
        "",
        "when speaker_labels is enabled, some messages won't have a results array",
        "usually there is exactly 1 result, but there can be 0 in some circumstances, and potentially more in future iterations",
        "",
        "20",
        "",
        "flag to signal that labels were recieved before results, and therefore",
        "the stream needs to emit on the next batch of final results",
        "positions in the timestamps 2d array",
        "first match all speaker_labeles to the appropriate word and result",
        "assumes that each speaker_label will have a matching word timestamp at the same index",
        "stops processing and emits an error if this assumption is violated",
        "eslint-disable-next-line camelcase",
        "this shouldn't happen normally, but the TimingStream could inadvertently cause a",
        "speaker_labels to be emitted before a result",
        "eslint-disable-next-line camelcase",
        "eslint-disable-next-line camelcase",
        "If one is off, then a bunch probably are. Just emit one error.",
        "assume that there's nothing new to emit right now,",
        "wait for new results to match our new labels",
        "filter out any nulls",
        "group the words together into utterances by speaker",
        "any time the speaker changes or the (original) result changes, create a new utterance",
        "and add it to the list",
        "otherwise just append the current word to the current result",
        "create new results",
        "if this is the first usage of this result, clone the original (to keep keywords and such)",
        "otherwise create a new one",
        "update the result object",
        "set the speaker",
        "overwrite the transcript and timestamps on the first alternative",
        "overwrite the final value",
        "overwrite the word_alternatives",
        "overwrite the keywords spotted",
        "eslint-disable camelcase",
        "eslint-enable camelcase",
        "result_index is always 0 because the results always includes the entire conversation so far.",
        "sorts by start time and then end time",
        "eslint-disable-line camelcase",
        "remove any values from the old speaker_labels that are duplicated in the new set",
        "next append the new labels to the remaining old ones",
        "finally, ensure the list is still sorted chronologically",
        "clean up if things got out of order",
        "",
        "21",
        "",
        "false = don't convert strings to buffers before passing to _write (only applies in string mode)",
        "for most elements we set the textContent, but for form elements, the value property is probably the expected target",
        "",
        "22",
        "",
        "Copyright Joyent, Inc. and other Node contributors.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a",
        "copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to permit",
        "persons to whom the Software is furnished to do so, subject to the",
        "following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included",
        "in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
        "OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN",
        "NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,",
        "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR",
        "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE",
        "USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "StringDecoder provides an interface for efficiently splitting a series of",
        "buffers into a series of JS strings without breaking apart multi-byte",
        "characters. CESU-8 is handled as part of the UTF-8 encoding.",
        "",
        "@TODO Handling all encodings inside a single object makes it very difficult",
        "to reason about this code, so it should be split up in the future.",
        "@TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code",
        "points as used by CESU-8.",
        "CESU-8 represents each of Surrogate Pair by 3-bytes",
        "UTF-16 represents each of Surrogate Pair by 2-bytes",
        "Base-64 stores 3 bytes in 4 chars, and pads the remainder.",
        "Enough space to store all bytes of a single character. UTF-8 needs 4",
        "bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).",
        "Number of bytes received for the current incomplete multi-byte character.",
        "Number of bytes expected for the current incomplete multi-byte character.",
        "write decodes the given buffer and returns it as JS string that is",
        "guaranteed to not contain any partial multi-byte characters. Any partial",
        "character found at the end of the buffer is buffered up, and will be",
        "returned when calling write again with the remaining bytes.",
        "",
        "Note: Converting a Buffer containing an orphan surrogate to a String",
        "currently works, but converting a String to a Buffer (via `new Buffer`, or",
        "Buffer#write) will replace incomplete surrogates with the unicode",
        "replacement character. See https://codereview.chromium.org/121173009/ .",
        "if our last write ended with an incomplete multibyte character",
        "determine how many remaining bytes this buffer has to offer for this char",
        "add the new bytes to the char buffer",
        "still not enough chars in this buffer? wait for more ...",
        "remove bytes belonging to the current character from the buffer",
        "get the character that was split",
        "CESU-8: lead surrogate (D800-DBFF) is also the incomplete character",
        "if there are no more bytes in this buffer, just emit our char",
        "determine and set charLength / charReceived",
        "buffer the incomplete character bytes we got",
        "CESU-8: lead surrogate (D800-DBFF) is also the incomplete character",
        "or just emit the charStr",
        "detectIncompleteChar determines if there is an incomplete UTF-8 character at",
        "the end of the given buffer. If so, it sets this.charLength to the byte",
        "length that character, and sets this.charReceived to the number of bytes",
        "that are available for this character.",
        "determine how many bytes we have to check at the end of this buffer",
        "Figure out if one of the last i bytes of our buffer announces an",
        "incomplete char.",
        "See http://en.wikipedia.org/wiki/UTF-8#Description",
        "110XXXXX",
        "1110XXXX",
        "11110XXX",
        "",
        "23",
        "",
        "modified from https://github.com/es-shims/es5-shim",
        "global window",
        "global window",
        "Safari 5.0 bug",
        "",
        "24",
        "",
        "!\n * object.pick <https://github.com/jonschlinkert/object.pick>\n *\n * Copyright (c) 2014-2015 Jon Schlinkert, contributors.\n * Licensed under the MIT License",
        "",
        "25",
        "",
        "loosely based on example code at https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia",
        "make it chainable like a real promise",
        "but always reject with an error",
        "checks for root.navigator to enable server-side rendering of things that depend on this",
        "(will need to be updated on client, but at least doesn't throw this way)",
        "gump = mondern promise-based interface",
        "gum = old callback-based interface",
        "ensure that Promises are supported and we have a navigator object",
        "Try the more modern, promise-based MediaDevices API first",
        "https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia",
        "fall back to the older method second, wrap it in a promise.",
        "if navigator doesn't exist, then we can't use the getUserMedia API. (And probably aren't even in a browser.)",
        "assuming it does, try getUserMedia and then all of the prefixed versions",
        "eslint-disable-next-line no-implicit-coercion",
        "UMD, loosely based on https://github.com/umdjs/umd/blob/master/templates/returnExportsGlobal.js",
        "AMD. Register as an anonymous module.",
        "Node. Does not work with strict CommonJS, but",
        "only CommonJS-like enviroments that support module.exports,",
        "like Node.",
        "Browser globals",
        "polyfill the MediaDevices API if it does not exist.",
        "",
        "26",
        "",
        "WEBPACK VAR INJECTION",
        "\"It is recommended for authors to not specify this buffer size and allow the implementation to pick a good",
        "buffer size to balance between latency and audio quality.\"",
        "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor",
        "however, webkitAudioContext (safari) requires it to be set'",
        "Possible values: null, 256, 512, 1024, 2048, 4096, 8192, 16384",
        "We can only emit one channel's worth of audio, so only one input. (Who has multiple microphones anyways?)",
        "we shouldn't need any output channels (going back to the browser), but chrome is buggy and won't give us any audio without one",
        "onaudioprocess can be called at least once after we've stopped",
        "other half of workaround for chrome bugs",
        "This fails in some older versions of chrome. Nothing we can do about it.",
        "returns a promise;",
        "this can also fail in older versions of chrome",
        "bytes",
        "no-op, (flow-control doesn't really work on sound)",
        "WEBPACK VAR INJECTION",
        "",
        "27",
        "",
        "v8, specifically in node 4.x, has a bug with incorrect property enumeration order",
        "note: this does not detect the bug unless there's 20 characters",
        "Firefox 37 still has \"pending exception\" logic in its Object.assign implementation,",
        "which is 72% slower than our shim, and Firefox 40's native implementation.",
        "",
        "28",
        "",
        "WEBPACK VAR INJECTION",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "<replacement>",
        "</replacement>",
        "Sadly this is not cacheable as some libraries bundle their own",
        "event emitter implementation with them.",
        "This is a hack to make sure that our error handler is attached before any",
        "userland ones.  NEVER DO THIS. This is here only because this code needs",
        "to continue to work with older versions of Node.js that do not include",
        "the prependListener() method. The goal is to eventually remove this hack.",
        "object stream flag. Used to make read(n) ignore n and to",
        "make all the buffer merging and length checks go away",
        "the point at which it stops calling _read() to fill the buffer",
        "Note: 0 is a valid value, means \"don't call _read preemptively ever\"",
        "cast to ints.",
        "A linked list is used to store data chunks instead of an array because the",
        "linked list can remove elements from the beginning faster than",
        "array.shift()",
        "a flag to be able to tell if the onwrite cb is called immediately,",
        "or on a later tick.  We set this to true at first, because any",
        "actions that shouldn't happen until \"later\" should generally also",
        "not happen before the first write call.",
        "whenever we return null, then we set a flag to say",
        "that we're awaiting a 'readable' event emission.",
        "Crypto is kind of old and crusty.  Historically, its default string",
        "encoding is 'binary' so we have to make this configurable.",
        "Everything else in the universe uses 'utf8', though.",
        "when piping, we only care about 'readable' events that happen",
        "after read()ing all the bytes and not getting any pushback.",
        "the number of writers that are awaiting a drain event in .pipe()s",
        "if true, a maybeReadMore has been scheduled",
        "legacy",
        "Manually shove something into the read() buffer.",
        "This returns true if the highWaterMark has not been hit yet,",
        "similar to how Writable.write() returns true if you should",
        "write() some more.",
        "Unshift should *always* be something directly out of read()",
        "Don't add to the buffer if we've decoded to an empty string chunk and",
        "we're not in object mode",
        "if we want the data now, just emit it.",
        "update the buffer info.",
        "if it's past the high water mark, we can push in some more.",
        "Also, if we have no data yet, we can stand some",
        "more bytes.  This is to work around cases where hwm=0,",
        "such as the repl.  Also, if the push() triggered a",
        "readable event, and the user called read(largeNumber) such that",
        "needReadable was set, then we ought to push more, so that another",
        "'readable' event will be triggered.",
        "backwards compatibility.",
        "Don't raise the hwm > 8MB",
        "Get the next highest power of 2 to prevent increasing hwm excessively in",
        "tiny amounts",
        "This function is designed to be inlinable, so please take care when making",
        "changes to the function body.",
        "Only flow one buffer at a time",
        "If we're asking for more than the current hwm, then raise the hwm.",
        "Don't have enough",
        "you can override either this method, or the async _read(n) below.",
        "if we're doing read(0) to trigger a readable event, but we",
        "already have a bunch of data in the buffer, then just trigger",
        "the 'readable' event and move on.",
        "if we've ended, and we're now clear, then finish it up.",
        "All the actual chunk generation logic needs to be",
        "synthetic stream cases, such as passthrough streams, _read",
        "may be a completely synchronous operation which may change",
        "the state of the read buffer, providing enough data when",
        "before there was *not* enough.",
        "",
        "So, the steps are:",
        "1. Figure out what the state of things will be after we do",
        "a read from the buffer.",
        "",
        "2. If that resulting state will trigger a _read, then call _read.",
        "Note that this may be asynchronous, or synchronous.  Yes, it is",
        "deeply ugly to write APIs this way, but that still doesn't mean",
        "that the Readable class should behave improperly, as streams are",
        "designed to be sync/async agnostic.",
        "Take note if the _read call is sync or async (ie, if the read call",
        "has returned yet), so that we know whether or not it's safe to emit",
        "'readable' etc.",
        "",
        "3. Actually pull the requested chunks out of the buffer and return.",
        "if we need a readable event, then we need to do some reading.",
        "if we currently have less than the highWaterMark, then also read some",
        "however, if we've ended, then there's no point, and if we're already",
        "reading, then it's unnecessary.",
        "if the length is currently zero, then we *need* a readable event.",
        "call internal read method",
        "If _read pushed data synchronously, then `reading` will be false,",
        "and we need to re-evaluate how much data we can return to the user.",
        "If we have nothing in the buffer, then we want to know",
        "as soon as we *do* get something into the buffer.",
        "If we tried to read() past the EOF, then emit end on the next tick.",
        "emit 'readable' now to make sure it gets picked up.",
        "Don't emit readable right away in sync mode, because this can trigger",
        "another read() call => stack overflow.  This way, it might trigger",
        "a nextTick recursion warning, but that's not so bad.",
        "at this point, the user has presumably seen the 'readable' event,",
        "and called read() to consume some data.  that may have triggered",
        "in turn another _read(n) call, in which case reading = true if",
        "it's in progress.",
        "However, if we're not ended, or reading, and the length < hwm,",
        "then go ahead and try to read some more preemptively.",
        "didn't get any data, stop spinning.",
        "abstract method.  to be overridden in specific implementation classes.",
        "call cb(er, data) where data is <= n in length.",
        "for virtual (non-string, non-buffer) streams, \"length\" is somewhat",
        "arbitrary, and perhaps not very meaningful.",
        "when the dest drains, it reduces the awaitDrain counter",
        "on the source.  This would be more elegant with a .once()",
        "handler in flow(), but adding and removing repeatedly is",
        "too slow.",
        "cleanup event handlers once the pipe is broken",
        "if the reader is waiting for a drain event from this",
        "specific writer, then it would cause it to never start",
        "flowing again.",
        "So, if this is awaiting a drain, then we just call it now.",
        "If we don't know, then assume that we are waiting for one.",
        "If the user pushes more data while we're writing to dest then we'll end up",
        "in ondata again. However, we only want to increase awaitDrain once because",
        "dest will only emit one 'drain' event for the multiple writes.",
        "=> Introduce a guard on increasing awaitDrain.",
        "If the user unpiped during `dest.write()`, it is possible",
        "to get stuck in a permanently paused state if that write",
        "also returned false.",
        "=> Check whether `dest` is still a piping destination.",
        "if the dest has an error, then stop piping into it.",
        "however, don't suppress the throwing behavior for this.",
        "Make sure our error handler is attached before userland ones.",
        "Both close and finish should trigger unpipe, but only once.",
        "tell the dest that it's being piped to",
        "start the flow if it hasn't been started already.",
        "if we're not piping anywhere, then do nothing.",
        "just one destination.  most common case.",
        "passed in one, but it's not the right one.",
        "got a match.",
        "slow case. multiple pipe destinations.",
        "remove all.",
        "try to find the right one.",
        "set up data events if they are asked for",
        "Ensure readable listeners eventually get something",
        "Start flowing on next tick if stream isn't explicitly paused",
        "pause() and resume() are remnants of the legacy readable stream API",
        "If the user uses them, then switch into old mode.",
        "wrap an old-style stream as the async data source.",
        "This is *not* part of the readable stream interface.",
        "It is an ugly unfortunate mess of history.",
        "don't skip over falsy values in objectMode",
        "proxy all the other methods.",
        "important when wrapping filters and duplexes.",
        "proxy certain important events.",
        "when we try to consume some more bytes, simply unpause the",
        "underlying stream.",
        "exposed for testing purposes only.",
        "Pluck off n bytes from an array of buffers.",
        "Length is the combined lengths of all the buffers in the list.",
        "This function is designed to be inlinable, so please take care when making",
        "changes to the function body.",
        "nothing buffered",
        "read it all, truncate the list",
        "read part of list",
        "Extracts only enough buffered data to satisfy the amount requested.",
        "This function is designed to be inlinable, so please take care when making",
        "changes to the function body.",
        "slice is the same for buffers and strings",
        "first chunk is a perfect match",
        "result spans more than one buffer",
        "Copies a specified amount of characters from the list of buffered data",
        "chunks.",
        "This function is designed to be inlinable, so please take care when making",
        "changes to the function body.",
        "Copies a specified amount of bytes from the list of buffered data chunks.",
        "This function is designed to be inlinable, so please take care when making",
        "changes to the function body.",
        "If we get here before consuming all the bytes, then that is a",
        "bug in node.  Should never happen.",
        "Check that we didn't get one last unshift.",
        "WEBPACK VAR INJECTION",
        "",
        "29",
        "",
        "a transform stream is a readable/writable stream where you do",
        "something with the data.  Sometimes it's called a \"filter\",",
        "but that's not a great name for it, since that implies a thing where",
        "some bits pass through, and others are simply ignored.  (That would",
        "be a valid example of a transform, of course.)",
        "",
        "While the output is causally related to the input, it's not a",
        "necessarily symmetric or synchronous transformation.  For example,",
        "a zlib stream might take multiple plain-text writes(), and then",
        "emit a single compressed chunk some time in the future.",
        "",
        "Here's how this works:",
        "",
        "The Transform stream has all the aspects of the readable and writable",
        "stream classes.  When you write(chunk), that calls _write(chunk,cb)",
        "internally, and returns false if there's a lot of pending writes",
        "buffered up.  When you call read(), that calls _read(n) until",
        "there's enough pending readable data buffered up.",
        "",
        "In a transform stream, the written data is placed in a buffer.  When",
        "_read(n) is called, it transforms the queued up data, calling the",
        "buffered _write cb's as it consumes chunks.  If consuming a single",
        "written chunk would result in multiple output chunks, then the first",
        "outputted bit calls the readcb, and subsequent chunks just go into",
        "the read buffer, and will cause it to emit 'readable' if necessary.",
        "",
        "This way, back-pressure is actually determined by the reading side,",
        "since _read has to be called to start processing a new chunk.  However,",
        "a pathological inflate type of transform can cause excessive buffering",
        "here.  For example, imagine a stream where every byte of input is",
        "interpreted as an integer from 0-255, and then results in that many",
        "bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in",
        "1kb of data being output.  In this case, you could write a very small",
        "amount of input, and end up with a very large amount of output.  In",
        "such a pathological inflating mechanism, there'd be no way to tell",
        "the system to stop doing the transform.  A single 4MB write could",
        "cause the system to run out of memory.",
        "",
        "However, even in such a pathological case, only a single written chunk",
        "would be consumed, and then the rest would wait (un-transformed) until",
        "the results of the previous transformed chunk were consumed.",
        "<replacement>",
        "</replacement>",
        "start out asking for a readable event once data is transformed.",
        "we have implemented the _read method, and done the other things",
        "that Readable wants before the first _read call, so unset the",
        "sync guard flag.",
        "When the writable side finishes, then flush out anything remaining.",
        "This is the part where you do stuff!",
        "override this function in implementation classes.",
        "'chunk' is an input chunk.",
        "",
        "Call `push(newChunk)` to pass along transformed output",
        "to the readable side.  You may call 'push' zero or more times.",
        "",
        "Call `cb(err)` when you are done with this chunk.  If you pass",
        "an error, then that'll put the hurt on the whole operation.  If you",
        "never call cb(), then you'll never get another chunk.",
        "Doesn't matter what the args are here.",
        "_transform does all the work.",
        "That we got here means that the readable side wants more data.",
        "mark that we need a transform, so that any data that comes in",
        "will get processed, now that we've asked for it.",
        "if there's nothing in the write buffer, then that means",
        "that nothing more will ever be provided",
        "",
        "30",
        "",
        "",
        "31",
        "",
        "these are the only content-types currently supported by the speech-to-tet service",
        "",
        "32",
        "",
        "if we emit an error, it prevents the promise from returning the actual result",
        "however, most browsers do not support flac, so this is a reasonably scenario",
        "",
        "33",
        "",
        "",
        "34",
        "",
        "WEBPACK VAR INJECTION",
        "keep the readable side open after the source closes",
        "to support stopping mid-stream",
        "to support text mode",
        "failsafe for unknown message types",
        "ms since epoch",
        "ms from right now",
        "never return a negative number",
        "when stop is called, immediately stop emitting results",
        "WEBPACK VAR INJECTION",
        "",
        "35",
        "",
        "WEBPACK VAR INJECTION",
        "Downsampling and low-pass filter:",
        "Input audio is typically 44.1kHz or 48kHz, this downsamples it to 16kHz.",
        "It uses a FIR (finite impulse response) Filter to remove (or, at least attinuate)",
        "audio frequencies > ~8kHz because sampled audio cannot accurately represent",
        "frequiencies greater than half of the sample rate.",
        "(Human voice tops out at < 4kHz, so nothing important is lost for transcription.)",
        "See http://dsp.stackexchange.com/a/37475/26392 for a good explination of this code.",
        "length is in bytes (8-bit), so *2 to get 16-bit length",
        "16-bit signed range is -32768 to 32767",
        "index, value, little edian",
        "new Float32Array(nodebuffer.buffer)",
        "WEBPACK VAR INJECTION",
        "",
        "36",
        "",
        "the server chokes if the token is correctly url-encoded",
        "",
        "37",
        "",
        "WEBPACK VAR INJECTION",
        "\"easy-mode\" API",
        "individual components to build more customized solutions",
        "external components exposed for convenience",
        "WEBPACK VAR INJECTION",
        "",
        "38",
        "",
        "",
        "39",
        "",
        "WEBPACK VAR INJECTION",
        "maintain two arrays for circular references, where corresponding parents",
        "and children have the same index",
        "recurse this function so we don't reset allParents and allChildren",
        "cloning null always returns null",
        "private utility functions",
        "WEBPACK VAR INJECTION",
        "",
        "40",
        "",
        "",
        "41",
        "",
        "the number of equal signs (place holders)",
        "if there are two placeholders, than the two characters before it",
        "represent one byte",
        "if there is only one, then the three characters before it represent 2 bytes",
        "this is just a cheap hack to not do indexOf twice",
        "base64 is 4/3 + up to two characters of the original data",
        "if there are placeholders, only get up to the last complete 4 chars",
        "if we have 1 byte left, pad 2 bytes",
        "must be multiple of 3",
        "go through the array every three bytes, we'll deal with trailing stuff later",
        "pad the end with zeros, but make sure to not forget the extra bytes",
        "",
        "42",
        "",
        "WEBPACK VAR INJECTION",
        "WEBPACK VAR INJECTION",
        "",
        "43",
        "",
        "",
        "44",
        "",
        "",
        "45",
        "",
        "!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.",
        "",
        "46",
        "",
        "Used for built-in method references.",
        "Built-in value references.",
        "",
        "47",
        "",
        "",
        "48",
        "",
        "WEBPACK VAR INJECTION",
        "When required from browserify, Buffer is also an Uint8Array, which is important for ejson.",
        "buf is now both an Uint8Array and an Buffer",
        "this is the check ejson uses",
        "this is the check ejson uses",
        "make sure it is a Uint8Array in case browserify's Buffer",
        "stops using Uint8Array",
        "exclusive",
        "reader.result is an ArrayBuffer",
        "WEBPACK VAR INJECTION",
        "",
        "49",
        "",
        "Paranoia",
        "Beyond this value, index getters/setters (i.e. array[0], array[1]) are so slow to",
        "create, and consume so much memory, that the browser appears frozen.",
        "Approximations of internal ECMAScript conversion functions",
        "Stash a copy in case other scripts modify these",
        "Class returns internal [[Class]] property, used to avoid cross-frame instanceof issues:",
        "Snapshot intrinsics",
        "ES5: lock down object properties",
        "emulate ES5 getter/setter API using legacy APIs",
        "http://blogs.msdn.com/b/ie/archive/2010/09/07/transitioning-existing-code-to-the-es5-getter-setter-apis.aspx",
        "(second clause tests for Object.defineProperty() in IE<9 that only supports extending DOM prototypes, but",
        "note that IE<9 does not support __defineGetter__ or __defineSetter__ so it just renders the method harmless)",
        "ES5: Make obj[index] an alias for obj._getter(index)/obj._setter(index, value)",
        "for index in 0 ... obj.length",
        "Internal conversion functions:",
        "pack<Type>()   - take a number (interpreted as Type), output a byte array",
        "unpack<Type>() - take a byte array, output a Type-like number",
        "Compute sign, exponent, fraction",
        "NaN",
        "http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping",
        "Overflow",
        "Normalized",
        "Denormalized",
        "Pack sign, exponent, fraction",
        "Bits to bytes",
        "Bytes to bits",
        "Unpack sign, exponent, fraction",
        "Produce number",
        "Normalized",
        "Denormalized",
        "",
        "3 The ArrayBuffer Type",
        "",
        "@constructor",
        "",
        "4 The ArrayBufferView Type",
        "",
        "NOTE: this constructor is not exported",
        "@constructor",
        "this.buffer = null;",
        "this.byteOffset = 0;",
        "this.byteLength = 0;",
        "",
        "5 The Typed Array View Types",
        "",
        "Each TypedArray type requires a distinct constructor instance with",
        "identical logic, which this produces.",
        "Constructor(unsigned long length)",
        "Constructor(TypedArray array)",
        "Constructor(sequence<type> array)",
        "Constructor(ArrayBuffer buffer,",
        "optional unsigned long byteOffset, optional unsigned long length)",
        "The given byteOffset must be a multiple of the element",
        "size of the specific type, otherwise an exception is raised.",
        "getter type (unsigned long index);",
        "NONSTANDARD: convenience alias for getter: type get(unsigned long index);",
        "setter void (unsigned long index, type value);",
        "void set(TypedArray array, optional unsigned long offset);",
        "void set(sequence<type> array, optional unsigned long offset);",
        "void set(TypedArray array, optional unsigned long offset);",
        "void set(sequence<type> array, optional unsigned long offset);",
        "TypedArray subarray(long begin, optional long end);",
        "",
        "6 The DataView View Type",
        "",
        "Constructor(ArrayBuffer buffer,",
        "optional unsigned long byteOffset,",
        "optional unsigned long byteLength)",
        "@constructor",
        "Get bytes",
        "Flip if necessary",
        "Write them",
        "",
        "50",
        "",
        "",
        "51",
        "",
        "the whatwg-fetch polyfill installs the fetch() function",
        "on the global object (window or self)",
        "",
        "Return that as the export for use in Webpack, Browserify etc.",
        "",
        "52",
        "",
        "DOM APIs, for completeness",
        "Does not start the time, just sets up the members needed.",
        "setimmediate attaches itself to the global object",
        "",
        "53",
        "",
        "",
        "54",
        "",
        "",
        "55",
        "",
        "not implemented in Firefix 51",
        "if (!res.body) {\n    return res\n  }",
        "",
        "56",
        "",
        "WEBPACK VAR INJECTION",
        "WEBPACK VAR INJECTION",
        "",
        "57",
        "",
        "WEBPACK VAR INJECTION",
        "WEBPACK VAR INJECTION",
        "",
        "58",
        "",
        "",
        "59",
        "",
        "temp disabled per https://github.com/ljharb/object.assign/issues/17",
        "if (sym instanceof Symbol) { return false; }",
        "temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4",
        "if (!(symObj instanceof Symbol)) { return false; }",
        "",
        "60",
        "",
        "modified from https://github.com/es-shims/es6-shim",
        "",
        "61",
        "",
        "",
        "62",
        "",
        "a passthrough stream.",
        "basically just the most minimal sort of Transform stream.",
        "Every written chunk gets output as-is.",
        "<replacement>",
        "</replacement>",
        "",
        "63",
        "",
        "<replacement>",
        "</replacement>",
        "",
        "64",
        "",
        "",
        "65",
        "",
        "",
        "66",
        "",
        "",
        "67",
        "",
        "WEBPACK VAR INJECTION",
        "Spec says greater than zero",
        "Callback can either be a function or a string",
        "Copy function arguments",
        "Store and register the task",
        "From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"",
        "So if we're currently running a task, we'll need to delay this invocation.",
        "Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a",
        "\"too much recursion\" error.",
        "The test against `importScripts` prevents this implementation from being installed inside a web worker,",
        "where `global.postMessage` means something completely different and can't be used for this purpose.",
        "Installs an event handler on `global` for the `message` event: see",
        "Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted",
        "into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.",
        "If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.",
        "Don't get fooled by e.g. browserify environments.",
        "For Node.js before 0.9",
        "For non-IE10 modern browsers",
        "For web workers, where supported",
        "For IE 6–8",
        "For older browsers",
        "WEBPACK VAR INJECTION",
        "",
        "68",
        "",
        "WEBPACK VAR INJECTION",
        "accessing global.localStorage can trigger a DOMException in sandboxed iframes",
        "WEBPACK VAR INJECTION",
        "",
        "69",
        "",
        "implementation from standard node.js 'util' module",
        "old school shim for old browsers",
        "",
        "70",
        "",
        "",
        "71",
        "",
        "",
        "72",
        "",
        "",
        "73",
        "",
        "",
        "74",
        "",
        "Build a destructive iterator for the value list",
        "IE 10-11 can't handle a DataView body.",
        "HTTP methods whose capitalization should be normalized",
        "",
        "75",
        "",
        "Returns a promise that resolves to an array of objects representing the available voice models.  Example:\n\n ```js\n [{\n    \"url\": \"https://stream.watsonplatform.net/speech-to-text/api/v1/models/en-UK_BroadbandModel\",\n    \"rate\": 16000,\n    \"name\": \"en-UK_BroadbandModel\",\n    \"language\": \"en-UK\",\n    \"description\": \"UK English broadband model.\"\n },\n //...\n ]\n ```\n Requires fetch, pollyfill available at https://github.com/github/fetch\n\n * @todo define format in @return statement\n * @param {Object} options\n * @param {String} options.token auth token\n * @return {Promise.<T>}",
        "",
        "76",
        "",
        "like regular fetch, but with an extra method on the response to get a node-style ReadableStream",
        "eslint-disable-line complexity",
        "eslint-disable-next-line no-console",
        "the WritableElementStream works best in objectMode",
        "the ResultExtractor only works in objectMode",
        "SpeakerStream requires objectMode and speaker_labels",
        "default format to true (capitals and periods)",
        "default smart_formatting to options.format value (dates, currency, etc.)",
        "the timing stream requires timestamps to work, so enable them automatically",
        "collect all of the streams so that we can bundle up errors and send them to the last one",
        "note: the TimingStream cannot currently handle results as regrouped by the SpeakerStream",
        "so it must come first",
        "note: the format stream should come after the speaker stream to format sentences correctly",
        "when file playback actually begins",
        "(mostly important for downloaded files)",
        "for files loaded via URL, restet the start time of the timing stream to when it begins playing",
        "eslint-disable-next-line func-style",
        "defaults to Date.now()",
        "Node.js automatically unpipes any source stream(s) when an error is emitted (on the assumption that the previous stream's output caused the error.)",
        "In this case, we don't want that behavior - a playback error should not stop the transcription",
        "So, we have to:",
        "1. find the source streams",
        "2. emit the error (causing the automatic unpipe)",
        "3. re-pipe the source streams",
        "we don't want to return the WES, just send data to it",
        "Capture errors from any stream except the last one and emit them on the last one",
        "expose the original stream to for debugging (and to support the JSON tab on the STT demo)",
        "",
        "77",
        "",
        "when the keepMicrophone option is enabled, unused audio data is sent here so that it isn't buffered by other streams.",
        "can still accept strings/buffers",
        "the WritableElementStream works best in objectMode",
        "the ResultExtractor only works in objectMode",
        "SpeakerStream requires objectMode and speaker_labels",
        "default format to true (capitals and periods)",
        "default smart_formatting to options.format value (dates, currency, etc.)",
        "collect all of the streams so that we can bundle up errors and send them to the last one",
        "set up the output first so that we have a place to emit errors",
        "if there's trouble with the input stream",
        "we don't want to return the WES, just send data to it",
        "end the stream",
        "trigger on both stop and end events:",
        "stop will not fire when a stream ends due to a timeout or having continuous: false",
        "but when stop does fire, we want to honor it immediately",
        "end will always fire, but it may take a few moments after stop",
        "Capture errors from any stream except the last one and emit them on the last one",
        "add a stop button to whatever the final stream ends up being",
        "expose the original stream to for debugging (and to support the JSON tab on the STT demo)",
        "",
        "78",
        "",
        "Returns a promise that resolves to an array of objects representing the available voices.  Example:\n\n ```js\n [{\n    \"name\": \"en-US_MichaelVoice\",\n    \"language\": \"en-US\",\n    \"customizable\": true,\n    \"gender\": \"male\",\n    \"url\": \"https://stream.watsonplatform.net/text-to-speech/api/v1/voices/en-US_MichaelVoice\",\n    \"description\": \"Michael: American English male voice.\"\n },\n //...\n ]\n ```\n Requires fetch, pollyfill available at https://github.com/github/fetch\n\n * @todo define format in @return statement\n * @param {Object} options\n * @param {String} options.token auth token\n * @return {Promise.<T>}",
        "",
        "79",
        "",
        "",
        "80",
        "",
        "(ignored)",
        ""
    ],
    "docstrings": [
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "***",
        "*********************************************************************",
        "***",
        "* If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.",
        "* Export kMaxLength after typed array support is determined.",
        "* The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.",
        "* Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n *",
        "* Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n *",
        "* Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n *",
        "* Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.",
        "* Need to make sure that buffer isn't trying to write out of bounds.",
        "* Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.",
        "* Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.",
        "* Helper method that can be bound to a stream - it sets the output to utf-8, captures all of the results, and returns a promise that resolves to the final text.\n * Essentially a smaller version of concat-stream wrapped in a promise\n *\n * @param {Stream} [stream=] optional stream param for when not bound to an existing stream instance\n * @return {Promise}",
        "* Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)",
        "* Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.",
        "* Applies some basic formatting to transcriptions:\n *  - Capitalize the first word of each sentence\n *  - Add a period to the end\n *  - Fix any \"cruft\" in the transcription\n *  - etc.\n *\n *  May be used as either a Stream, or a standalone helper.\n *\n * @param {Object} opts\n * @param {String} [opts.model] - some models / languages need special handling\n * @param {String} [opts.hesitation=''] - what to put down for a \"hesitation\" event, also consider \\u2026 (ellipsis: ...)\n * @param {Boolean} [options.objectMode=false] - emit `result` objects instead of string Buffers for the `data` events.\n * @constructor",
        "* Formats one or more words, removing special symbols, junk, and spacing for some languages\n * @param {String} text\n * @param {Boolean} isFinal\n * @return {String}",
        "* Capitalizes the first word of a sentence\n * @param {String} text\n * @return {string}",
        "* Puts a period on the end of a sentence\n * @param {String} text\n * @return {string}",
        "* Formats a single string result.\n *\n * May be used outside of Node.js streams\n *\n * @param {String} str - text to format\n * @param {bool} [isInterim=false] - set to true to prevent adding a period to the end of the sentence\n * @return {String}",
        "* Creates a new result with all transcriptions formatted\n *\n * May be used outside of Node.js streams\n *\n * @param {Object} data\n * @return {Object}",
        "* Copyright 2014 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* pipe()-able Node.js Duplex stream - accepts binary audio and emits text/objects in it's `data` events.\n *\n * Uses WebSockets under the hood. For audio with no recognizable speech, no `data` events are emitted.\n *\n * By default, only finalized text is emitted in the data events, however when `objectMode`/`readableObjectMode` and `interim_results` are enabled, both interim and final results objects are emitted.\n * WriteableElementStream uses this, for example, to live-update the DOM with word-by-word transcriptions.\n *\n * Note that the WebSocket connection is not established until the first chunk of data is recieved. This allows for auto-detection of content type (for wav/flac/opus audio).\n *\n * @param {Object} options\n * @param {String} [options.model='en-US_BroadbandModel'] - voice model to use. Microphone streaming only supports broadband models.\n * @param {String} [options.url='wss://stream.watsonplatform.net/speech-to-text/api'] base URL for service\n * @param {String} [options.token] - Auth token\n * @param {Object} [options.headers] - Only works in Node.js, not in browsers. Allows for custom headers to be set, including an Authorization header (preventing the need for auth tokens)\n * @param {String} [options.content-type='audio/wav'] - content type of audio; can be automatically determined from file header in most cases. only wav, flac, and ogg/opus are supported\n * @param {Boolean} [options.interim_results=true] - Send back non-final previews of each \"sentence\" as it is being processed. These results are ignored in text mode.\n * @param {Boolean} [options.word_confidence=false] - include confidence scores with results. Defaults to true when in objectMode.\n * @param {Boolean} [options.timestamps=false] - include timestamps with results. Defaults to true when in objectMode.\n * @param {Number} [options.max_alternatives=1] - maximum number of alternative transcriptions to include. Defaults to 3 when in objectMode.\n * @param {Array<String>} [options.keywords] - a list of keywords to search for in the audio\n * @param {Number} [options.keywords_threshold] - Number between 0 and 1 representing the minimum confidence before including a keyword in the results. Required when options.keywords is set\n * @param {Number} [options.word_alternatives_threshold] - Number between 0 and 1 representing the minimum confidence before including an alternative word in the results. Must be set to enable word alternatives,\n * @param {Boolean} [options.profanity_filter=false] - set to true to filter out profanity and replace the words with *'s\n * @param {Number} [options.inactivity_timeout=30] - how many seconds of silence before automatically closing the stream. use -1 for infinity\n * @param {Boolean} [options.readableObjectMode=false] - emit `result` objects instead of string Buffers for the `data` events. Does not affect input (which must be binary)\n * @param {Boolean} [options.objectMode=false] - alias for options.readableObjectMode\n * @param {Number} [options.X-Watson-Learning-Opt-Out=false] - set to true to opt-out of allowing Watson to use this request to improve it's services\n * @param {Boolean} [options.smart_formatting=false] - formats numeric values such as dates, times, currency, etc.\n * @param {String} [options.customization_id] - not yet supported on the public STT service\n *\n * @constructor",
        "* This can happen if the credentials are invalid - in that case, the response from DataPower doesn't include the\n   * necessary CORS headers, so JS can't even read it :(\n   *\n   * @param {Event} event - event object with essentially no useful information",
        "* emitted once the WebSocket connection has been established\n     * @event RecognizeStream#open",
        "* @event RecognizeStream#close\n     * @param {Number} reasonCode\n     * @param {String} description",
        "* @event RecognizeStream#error\n   * @param {String} msg custom error message\n   * @param {*} [frame] unprocessed frame (should have a .data property with either string or binary data)\n   * @param {Error} [err]",
        "* Emit any messages received over the wire, mainly used for debugging.\n     *\n     * @event RecognizeStream#message\n     * @param {Object} message - frame object with a data attribute that's either a string or a Buffer/TypedArray\n     * @param {Object} [data] - parsed JSON object (if possible);",
        "* Emitted when the Watson Service indicates readiness to transcribe audio. Any audio sent before this point will be buffered until now.\n         * @event RecognizeStream#listening",
        "* Object with interim or final results, possibly including confidence scores, alternatives, and word timing.\n         * @event RecognizeStream#data\n         * @param {Object} data",
        "* Finalized text\n             * @event RecognizeStream#data\n             * @param {String} transcript",
        "* Emits any JSON object sent to the service from the client. Mainly used for debugging.\n   * @event RecognizeStream#send-json\n   * @param {Object} msg",
        "* Emits any Binary object sent to the service from the client. Mainly used for debugging.\n   * @event RecognizeStream#send-data\n   * @param {Object} msg",
        "* Flow control - don't ask for more data until we've finished what we have\n *\n * Notes:\n *\n * This limits upload speed to 100 * options.highWaterMark / second.\n *\n * The default highWaterMark is 16kB, so the default max upload speed is ~1.6MB/s.\n *\n * Microphone input provides audio at a (downsampled) rate of:\n *   16000 samples/s * 16-bits * 1 channel = 32kB/s\n * (note the bits to Bytes conversion there)\n *\n * @private\n * @param {Function} next",
        "* Prevents any more audio from being sent over the WebSocket and gracefully closes the connection.\n * Additional data may still be emitted up until the `end` event is triggered.",
        "* Event emitted when the stop method is called. Mainly for synchronising with file reading and playback.\n   * @event RecognizeStream#stop",
        "* Copyright 2014 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Object-Mode stream that pulls result objects from the results array\n *\n * Also copies the top-level result_index to the individual results as .index\n *\n * @constructor\n * @param {Object} options",
        "* Copyright 2014 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Object-Mode stream that splits up results by speaker.\n *\n * Output format is similar to existing results formats, but with an extra speaker field,\n *\n * Output results array will usually contain multiple results.\n * All results are interim until the final batch; the text may change (if options.speakerlessInterim is enabled) or move from one interim result to another.\n *\n * Keywords, words_alternatives, and other features may appear on results that come slightly earlier than the timestamp due to the way things are split up.\n *\n * Ignores interim results from the service unless options.speakerlessInterim is enabled.\n *\n * @constructor\n * @param {Object} options\n * @param {boolean} [options.speakerlessInterim=false] - emit interim results before initial speaker has been identified (allows UI to update more quickly)",
        "* timestamps is a 2-d array.\n   * The sub-array is [word, from time, to time]\n   * Example:\n   * [\n       [\"Yes\", 28.92, 29.17],\n       [\"that's\", 29.17, 29.37],\n       [\"right\", 29.37, 29.64]\n    ]\n   * @type {Array<Array>}\n   * @private",
        "* speaker_labels is an array of objects.\n   * Example:\n   * [{\n      \"from\": 28.92,\n      \"to\": 29.17,\n      \"speaker\": 1,\n      \"confidence\": 0.641,\n      \"final\": false\n    }, {\n      \"from\": 29.17,\n      \"to\": 29.37,\n      \"speaker\": 1,\n      \"confidence\": 0.641,\n      \"final\": false\n    }, {\n      \"from\": 29.37,\n      \"to\": 29.64,\n      \"speaker\": 1,\n      \"confidence\": 0.641,\n      \"final\": false\n    }]\n   * @type {Array<Object>}\n   * @private",
        "* Builds a results object with everything we've got so far\n * @return {*}",
        "* Captures the timestamps out of results or errors if timestamps are missing\n * @param {Object} data",
        "* Only the very last labeled word gets final: true. Up until that point, all speaker_labels are considered interim and\n * may be repeated with a new speaker selected in a later set of speaker_labels.\n *\n * @private\n * @param {Object} data",
        "* Emit an object similar to the normal results object, only with multiple entries in the results Array (a new one\n     * each time the speaker changes), and with a speaker field on the results.\n     *\n     * result_index is always 0 because the results always includes the entire conversation so far.\n     *\n     * @event SpeakerStream#data\n     * @param {Object} results-format message with multiple results and an extra speaker field on each result",
        "* catches cases where speaker_labels was not enabled and internal errors that cause data loss\n *\n * @param {Function} done\n * @private",
        "* Writable stream that accepts results in either object or string mode and outputs the text to a supplied html element\n *\n * Can show interim results when in objectMode\n *\n * @param {Object} options\n * @param {String|DOMElement} options.outputElement\n * @param {String} [options.property] what property of the element should the text be set to. Defaults to `value` for `<input>`s and `<textarea>`s, `textContent` for everything else\n * @param {Boolean} [options.clear=true] delete any previous text\n * @constructor",
        "* Error thrown when any required feature is missing (Promises, navigator, getUserMedia)\n   * @constructor",
        "* Fake Promise instance that behaves like a Promise except that it always rejects with a NotSupportedError.\n   * Used for situations where there is no global Promise constructor.\n   *\n   * The message will report that the getUserMedia API is not available.\n   * This is technically true because every browser that supports getUserMedia also supports promises.\n   **\n   * @see http://caniuse.com/#feat=stream\n   * @see http://caniuse.com/#feat=promises\n   * @constructor",
        "* Wrapper for navigator.mediaDevices.getUserMedia.\n   * Always returns a Promise or Promise-like object, even in environments without a global Promise constructor\n   *\n   * @stream https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n   *\n   * @param {Object} constraints - must include one or both of audio/video along with optional details for video\n   * @param {Boolean} [constraints.audio] - include audio data in the stream\n   * @param {Boolean|Object} [constraints.video] - include video data in the stream. May be a boolean or an object with additional constraints, see\n   * @returns {Promise<MediaStream>} a promise that resolves to a MediaStream object",
        "* Turns a MediaStream object (from getUserMedia) into a Node.js Readable stream and optionally converts the audio to Buffers\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia\n *\n * @param {MediaStream} stream https://developer.mozilla.org/en-US/docs/Web/API/MediaStream\n * @param {Object} [opts] options\n * @param {Boolean} [opts.objectMode=false] Puts the stream into ObjectMode where it emits AudioBuffers instead of Buffers - see https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer\n * @param {Number|null} [opts.bufferSize=null] https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createScriptProcessor\n * @constructor",
        "* Convert and emit the raw audio data\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess\n   * @param {AudioProcessingEvent} e https://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent",
        "* Converts a Buffer back into the raw Float32Array format that browsers use.\n * Note: this is just a new DataView for the same underlying buffer -\n * the actual audio data is not copied or changed here.\n *\n * @param {Buffer} chunk node-style buffer of audio data from a 'data' event or read() call\n * @return {Float32Array} raw 32-bit float data view of audio data",
        "*below* the call to _read.  The reason is that in certain",
        "* Takes the beginning of an audio file and returns the associated content-type / mime type\n *\n * @param {String} header first 4 characters of the file as a UTF-8 string\n * @return {String|undefined} - the contentType of undefined",
        "* Plays audio from a URL\n * Compatible with Mobile Safari if triggered in direct response to a user interaction (e.g. click)\n * @param {String} url\n * @constructor",
        "* Stops the audio",
        "* Plays audio from File/Blob instances\n * @param {File|Blob} file\n * @param {String} contentType\n * @constructor",
        "* Stops the audio",
        "* Reads the first few bytes of a binary file and resolves to the content-type if recognized & supported\n * @param {File|Blob} file\n * @return {Promise}",
        "* Determines the file's content-type and then resolves to a FilePlayer instance\n * @param {File|Blob|String} file - binary data or URL of audio file (binary data playback may not work on mobile Safari)\n * @return {Promise.<FilePlayer>}",
        "* Returns true if the result is missing it's timestamps\n * @param {Object} data\n * @return {Boolean}",
        "* Slows results down to no faster than real time.\n *\n * Useful when running recognizeFile because the text can otherwise appear before the words are spoken\n *\n * @param {Object} [opts]\n * @param {*} [opts.emitAt=TimingStream.END] - set to TimingStream.START for a more subtitles-like output where results are returned as soon as the utterance begins\n * @param {Number} [opts.delay=0] - Additional delay (in seconds) to apply before emitting words, useful for precise syncing to audio tracks. May be negative\n * @constructor",
        "* Grabs the appropriate timestamp from the given message, depending on options.emitAt and the type of message\n *\n * @private\n * @param {Object} msg\n * @return {Number} timestamp",
        "* Gets the length of time to delay (in ms) before emitting the given message\n *\n * @private\n * @param {Object} msg\n * @return {Number} ms to delay",
        "* Overrides the start time, adjusting the delay applied to all pending results.\n *\n * Stream may emit up to 1 more result based on the older time after this is called.\n *\n * @param {Number} [time=Date.now()] Start time in Miliseconds since epoch",
        "* Transforms Buffers or AudioBuffers into a binary stream of l16 (raw wav) audio, downsampling in the process.\n *\n * The watson speech-to-text service works on 16kHz and internally downsamples audio received at higher samplerates.\n * WebAudio is usually 44.1kHz or 48kHz, so downsampling here reduces bandwidth usage by ~2/3.\n *\n * Format event + stream can be combined with https://www.npmjs.com/package/wav to generate a wav file with a proper header\n *\n * Todo: support multi-channel audio (for use with <audio>/<video> elements) - will require interleaving audio channels\n *\n * @param {Object} options\n * @constructor",
        "* Downsamples WebAudio to 16 kHz.\n *\n * Browsers can downsample WebAudio natively with OfflineAudioContext's but it was designed for non-streaming use and\n * requires a new context for each AudioBuffer. Firefox can handle this, but chrome (v47) crashes after a few minutes.\n * So, we'll do it in JS for now.\n *\n * This really belongs in it's own stream, but there's no way to create new AudioBuffer instances from JS, so its\n * fairly coupled to the wav conversion code.\n *\n * @param  {AudioBuffer} bufferNewSamples Microphone/MediaElement audio chunk\n * @return {Float32Array} 'audio/l16' chunk",
        "* Accepts a Float32Array of audio data and converts it to a Buffer of l16 audio data (raw wav)\n *\n * Explanation for the math: The raw values captured from the Web Audio API are\n * in 32-bit Floating Point, between -1 and 1 (per the specification).\n * The values for 16-bit PCM range between -32768 and +32767 (16-bit signed integer).\n * Filter & combine samples to reduce frequency, then multiply to by 0x7FFF (32767) to convert.\n * Store in little endian.\n *\n * @param {Float32Array} input\n * @return {Buffer}",
        "* Does some one-time setup to grab sampleRate and emit format, then sets _transform to the actual audio buffer handler and calls it.\n * @param {AudioBuffer} audioBuffer\n * @param {String} encoding\n * @param {Function} next",
        "* Accepts an AudioBuffer (for objectMode), then downsamples to 16000 and converts to a 16-bit pcm\n *\n * @param {AudioBuffer} audioBuffer\n * @param {String} encoding\n * @param {Function} next",
        "* Accepts a Buffer (for binary mode), then downsamples to 16000 and converts to a 16-bit pcm\n *\n * @param {Buffer} nodebuffer\n * @param {String} encoding\n * @param {Function} next",
        "* Stringify query params, Watson-style\n *\n * Why? The server that processes auth tokens currently only accepts the *exact* string, even if it's invalid for a URL.\n * Properly url-encoding percent characters causes it to reject the token.\n * So, this is a custom qs.stringify function that properly encodes everything except watson-token, passing it along verbatim\n *\n * @param {Object} queryParams\n * @return {String}",
        "* IBM Watson Speech to Text JavaScript SDK\n *\n * The primary methods for interacting with the Speech to Text JS SDK are:\n *  * `recognizeMicrophone()` for live microphone input\n *  * `recognizeFile()` for file `<input>`'s and other data sources (e.g. a Blob loaded via AJAX)\n *\n * However, the underlying streams and utils that they use are also exposed for advanced usage.\n *\n * @module watson-speech/speech-to-text",
        "* @see module:watson-speech/speech-to-text/recognize-microphone",
        "* @see module:watson-speech/speech-to-text/recognize-blob",
        "* @see module:watson-speech/speech-to-text/get-models",
        "* @see WebAudioL16Stream",
        "* @see RecognizeStream",
        "* @see FilePlayer",
        "* @see FormatStream",
        "* @see TimingStream",
        "* @see ResultStream",
        "* @see SpeakerStream",
        "* @see WritableElementStream",
        "* @see https://www.npmjs.com/package/get-user-media-promise",
        "* @see https://www.npmjs.com/package/microphone-stream",
        "* @see https://nodejs.org/api/buffer.html",
        "* Copyright 2015 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @module watson-speech/text-to-speech",
        "* @see module:watson-speech/text-to-speech/synthesize",
        "* @see module:watson-speech/text-to-speech/get-voices",
        "* Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).",
        "* Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.",
        "* Copyright 2015 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* IBM Watson Speech JavaScript SDK\n *\n * Top-level module includes the version, and both of the speech libraries.\n *\n * If using a bundler such as browserify, you may optionally include sub-modules directly to reduce the size of the final bundle\n *\n * @module watson-speech",
        "* Release version\n *\n * (for pre-built bundles only - if using via npm, read the package.json to determine the version)\n *\n * (This previously did `require('package.json').version` which works in browserify but causes webpack to choke with confusing errors unless extra plugins are included)\n *\n * envify automatically rewrites this during the release process",
        "*\n * @see module:watson-speech/speech-to-text",
        "*\n * @see module:watson-speech/text-to-speech",
        "* lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors",
        "* A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.",
        "* The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.",
        "* The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.",
        "* This function is like `baseIndexOf` except that it accepts a comparator.\n *\n * @private\n * @param {Array} array The array to search.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {number} Returns the index of the matched value, else `-1`.",
        "* The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.",
        "* The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.",
        "* The base implementation of `_.pullAllBy` without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.",
        "* Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.",
        "* This method is like `_.pullAll` except that it accepts `comparator` which\n * is invoked to compare elements of `array` to `values`. The comparator is\n * invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 4.6.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n *\n * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n * console.log(array);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]",
        "* Read W3C Blob & File objects as a Node stream.\n * @param {Blob} blob\n * @constructor",
        "* https://developer.mozilla.org/en/DOM/window.postMessage",
        "* http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages",
        "* Module exports.",
        "* Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public",
        "* Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private",
        "* Expose a W3C WebSocket class with just one or two arguments.",
        "* 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2",
        "* Module exports.",
        "* Copyright 2015 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @module watson-speech/speech-to-text/get-models",
        "* Copyright 2015 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @module watson-speech/speech-to-text/recognize-file",
        "* Create and return a RecognizeStream from a File or Blob\n * (e.g. from a file <input>, a dragdrop target, or an ajax request)\n *\n * @param {Object} options - Also passed to {MediaElementAudioStream} and to {RecognizeStream}\n * @param {String} options.token - Auth Token - see https://github.com/watson-developer-cloud/node-sdk#authorization\n * @param {Blob|FileString} options.file - String url or the raw audio data as a Blob or File instance to be transcribed (and optionally played). Playback may not with with Blob or File on mobile Safari.\n * @param {Boolean} [options.play=false] - If a file is set, play it locally as it's being uploaded\n * @param {Boolena} [options.format=true] - pipe the text through a {FormatStream} which performs light formatting. Also controls smart_formatting option unless explicitly set.\n * @param {Boolena} [options.realtime=options.play] - pipe the text through a {TimingStream} which slows the output down to real-time to match the audio playback.\n * @param {String|DOMElement} [options.outputElement] pipe the text to a WriteableElementStream targeting the specified element. Also defaults objectMode to true to enable interim results.\n * @param {Boolean} [options.extractResults=false] pipe results through a ResultExtractor stream to simplify the objects. (Default behavior before v0.22) Automatically enables objectMode.\n * @param {Boolean} [options.resultsBySpeaker=false] pipe results through a SpeakerStream. Causes each data event to include multiple results, each with a speaker field. Automatically enables objectMode and speaker_labels.  Adds some delay to processing.\n *\n * @return {RecognizeStream|SpeakerStream|FormatStream|ResultStream|TimingStream}",
        "* Copyright 2015 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @module watson-speech/speech-to-text/recognize-microphone",
        "* Create and return a RecognizeStream sourcing audio from the user's microphone\n *\n * @param {Object} options - Also passed to {RecognizeStream}, and {FormatStream} when applicable\n * @param {String} options.token - Auth Token - see https://github.com/watson-developer-cloud/node-sdk#authorization\n * @param {Boolean} [options.format=true] - pipe the text through a FormatStream which performs light formatting. Also controls smart_formatting option unless explicitly set.\n * @param {Boolean} [options.keepMicrophone=false] - keeps an internal reference to the microphone stream to reuse in subsequent calls (prevents multiple permissions dialogs in firefox)\n * @param {String|DOMElement} [options.outputElement] pipe the text to a [WriteableElementStream](WritableElementStream.html) targeting the specified element. Also defaults objectMode to true to enable interim results.\n * @param {Boolean} [options.extractResults=false] pipe results through a ResultStream stream to simplify the objects. (Default behavior before v0.22) Requires objectMode.\n * @param {Boolean} [options.resultsBySpeaker=false] Pipe results through a SpeakerStream. Forces speaker_labels and objectMode to be true.\n * @param {MediaStream} [options.mediaStream] Optionally pass in an existing MediaStream\n *\n * @return {RecognizeStream|SpeakerStream|FormatStream|ResultStream}",
        "* unpipes the mic stream to prevent any more audio from being sent over the wire\n     * temporarily re-pipes it to the bitBucket (basically /dev/null)  becuse\n     * otherwise it will buffer the audio from in between calls and prepend it to the next one\n     *\n     * @private",
        "* Copyright 2015 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @module watson-speech/text-to-speech/get-voices",
        "* Copyright 2015 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* @module watson-speech/text-to-speech/synthesize",
        "* Synthesize and play the supplied text over the computers speakers.\n *\n * Creates and returns a HTML5 `<audio>` element\n *\n * @param {Object} options\n * @param {String} options.token auth token\n * @param {String} options.text text to speak\n * @param {String} [options.voice=en-US_MichaelVoice] what voice to use - call getVoices() for a complete list.\n * @param {String} [options.customization_id] GUID of a custom voice model. Omit to use the voice with no customization.\n * @param {String} [options.accept] - specify desired audio format. Leave unset to allow (most) browsers to automatically negotiate an ideal format.\n * @param {Number} [options.X-Watson-Learning-Opt-Out=0] set to 1 to opt-out of allowing Watson to use this request to improve it's services\n * @param {Boolean} [options.autoPlay=true] automatically play the audio\n * @param {DOMAudioElement} [options.element] <audio> element - will be used instead of creating a new one if provided\n * @return {Audio}\n * @see module:watson-speech/text-to-speech/get-voices",
        "***"
    ],
    "functions": [
        "__webpack_require__",
        "typedArraySupport",
        "kMaxLength",
        "createBuffer",
        "Buffer",
        "assertSize",
        "alloc",
        "allocUnsafe",
        "fromString",
        "fromArrayLike",
        "fromArrayBuffer",
        "fromObject",
        "SlowBuffer",
        "byteLength",
        "slowToString",
        "swap",
        "bidirectionalIndexOf",
        "arrayIndexOf",
        "read",
        "hexWrite",
        "utf8Write",
        "asciiWrite",
        "latin1Write",
        "base64Write",
        "ucs2Write",
        "base64Slice",
        "utf8Slice",
        "decodeCodePointsArray",
        "asciiSlice",
        "latin1Slice",
        "hexSlice",
        "utf16leSlice",
        "checkOffset",
        "checkInt",
        "objectWriteUInt16",
        "objectWriteUInt32",
        "checkIEEE754",
        "writeFloat",
        "writeDouble",
        "base64clean",
        "stringtrim",
        "toHex",
        "utf8ToBytes",
        "asciiToBytes",
        "utf16leToBytes",
        "base64ToBytes",
        "blitBuffer",
        "isnan",
        "Stream",
        "ondata",
        "ondrain",
        "onend",
        "onclose",
        "onerror",
        "cleanup",
        "defaultSetTimout",
        "defaultClearTimeout",
        "runTimeout",
        "runClearTimeout",
        "cleanUpNextTick",
        "drainQueue",
        "Item",
        "noop",
        "deprecated",
        "inspect",
        "stylizeWithColor",
        "stylizeNoColor",
        "arrayToHash",
        "formatValue",
        "formatPrimitive",
        "formatError",
        "formatArray",
        "formatProperty",
        "reduceToSingleString",
        "isArray",
        "isBoolean",
        "isNull",
        "isNullOrUndefined",
        "isNumber",
        "isString",
        "isSymbol",
        "isUndefined",
        "isRegExp",
        "isObject",
        "isDate",
        "isError",
        "isFunction",
        "isPrimitive",
        "objectToString",
        "pad",
        "timestamp",
        "hasOwnProperty",
        "Duplex",
        "onend",
        "onEndNT",
        "forEach",
        "isArray",
        "isBoolean",
        "isNull",
        "isNullOrUndefined",
        "isNumber",
        "isString",
        "isSymbol",
        "isUndefined",
        "isRegExp",
        "isObject",
        "isDate",
        "isError",
        "isFunction",
        "isPrimitive",
        "objectToString",
        "_instanceof",
        "clone",
        "_clone",
        "__objToStr",
        "__isDate",
        "__isArray",
        "__isRegExp",
        "__getRegExpFlags",
        "nextTick",
        "EventEmitter",
        "g",
        "isFunction",
        "isNumber",
        "isObject",
        "isUndefined",
        "nop",
        "WriteReq",
        "WritableState",
        "Writable",
        "writeAfterEnd",
        "validChunk",
        "decodeChunk",
        "writeOrBuffer",
        "doWrite",
        "onwriteError",
        "onwriteStateUpdate",
        "onwrite",
        "afterWrite",
        "onwriteDrain",
        "clearBuffer",
        "needFinish",
        "prefinish",
        "finishMaybe",
        "endWritable",
        "CorkedRequest",
        "FormatStream",
        "RecognizeStream",
        "emitError",
        "ResultStream",
        "SpeakerStream",
        "WritableElementStream",
        "assertEncoding",
        "passThroughWrite",
        "utf16DetectIncompleteChar",
        "base64DetectIncompleteChar",
        "NotSupportedError",
        "FakePromise",
        "getUserMedia",
        "MicrophoneStream",
        "recorderProcess",
        "prependListener",
        "ReadableState",
        "Readable",
        "readableAddChunk",
        "needMoreData",
        "computeNewHighWaterMark",
        "howMuchToRead",
        "chunkInvalid",
        "onEofChunk",
        "emitReadable",
        "emitReadable_",
        "maybeReadMore",
        "maybeReadMore_",
        "onunpipe",
        "onend",
        "cleanup",
        "ondata",
        "onerror",
        "onclose",
        "onfinish",
        "unpipe",
        "pipeOnDrain",
        "nReadingNextTick",
        "resume",
        "resume_",
        "flow",
        "fromList",
        "fromListPartial",
        "copyFromBufferString",
        "copyFromBuffer",
        "endReadable",
        "endReadableNT",
        "forEach",
        "indexOf",
        "TransformState",
        "afterTransform",
        "Transform",
        "done",
        "UrlPlayer",
        "FilePlayer",
        "getContentTypeFromFile",
        "playFile",
        "TimingStream",
        "WebAudioL16Stream",
        "clone",
        "_clone",
        "__objToStr",
        "__isDate",
        "__isArray",
        "__isRegExp",
        "__getRegExpFlags",
        "placeHoldersCount",
        "byteLength",
        "toByteArray",
        "tripletToBase64",
        "encodeChunk",
        "fromByteArray",
        "ConcatStream",
        "isArrayish",
        "isBufferish",
        "stringConcat",
        "bufferConcat",
        "arrayConcat",
        "u8Concat",
        "arrayMap",
        "baseFindIndex",
        "baseIndexOf",
        "baseIndexOfWith",
        "baseIsNaN",
        "baseUnary",
        "basePullAll",
        "copyArray",
        "pullAllWith",
        "fetch",
        "ReadableBlobStream",
        "uint8ArrayToBuffer",
        "bufferToUint8Array",
        "configureProperties",
        "makeArrayAccessors",
        "makeArrayAccessor",
        "as_signed",
        "as_unsigned",
        "packI8",
        "unpackI8",
        "packU8",
        "unpackU8",
        "packU8Clamped",
        "packI16",
        "unpackI16",
        "packU16",
        "unpackU16",
        "packI32",
        "unpackI32",
        "packU32",
        "unpackU32",
        "packIEEE754",
        "roundToEven",
        "unpackIEEE754",
        "unpackF64",
        "packF64",
        "unpackF32",
        "packF32",
        "makeConstructor",
        "clamp",
        "r",
        "makeGetter",
        "makeSetter",
        "Timeout",
        "bufferFromReadable",
        "patch",
        "patch",
        "ReadableFromArrayBuffer",
        "ReadableFromWhatwg",
        "PassThrough",
        "BufferList",
        "setImmediate",
        "clearImmediate",
        "run",
        "runIfPresent",
        "installNextTickImplementation",
        "canUsePostMessage",
        "installPostMessageImplementation",
        "installMessageChannelImplementation",
        "installReadyStateChangeImplementation",
        "installSetTimeoutImplementation",
        "deprecate",
        "deprecated",
        "config",
        "W3CWebSocket",
        "normalizeName",
        "normalizeValue",
        "iteratorFor",
        "Headers",
        "consumed",
        "fileReaderReady",
        "readBlobAsArrayBuffer",
        "readBlobAsText",
        "readArrayBufferAsText",
        "bufferClone",
        "Body",
        "normalizeMethod",
        "Request",
        "decode",
        "parseHeaders",
        "Response",
        "end"
    ],
    "classes": []
}