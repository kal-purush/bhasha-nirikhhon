{
    "identifiers": [
        "com",
        "github",
        "dakusui",
        "actionunit",
        "core",
        "com",
        "github",
        "dakusui",
        "actionunit",
        "actions",
        "com",
        "github",
        "dakusui",
        "actionunit",
        "helpers",
        "InternalUtils",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "Predicate",
        "java",
        "util",
        "Supplier",
        "com",
        "github",
        "dakusui",
        "actionunit",
        "helpers",
        "Checks",
        "checkArgument",
        "com",
        "github",
        "dakusui",
        "actionunit",
        "helpers",
        "Checks",
        "checkNotNull",
        "com",
        "github",
        "dakusui",
        "actionunit",
        "helpers",
        "InternalUtils",
        "nonameIfNull",
        "java",
        "lang",
        "format",
        "java",
        "util",
        "Arrays",
        "asList",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "NANOSECONDS",
        "Context",
        "ID_GENERATOR_MANAGER",
        "ID_GENERATOR_MANAGER",
        "generateId",
        "description",
        "runnable",
        "Internal",
        "simple",
        "generateId",
        "description",
        "runnable",
        "name",
        "action",
        "Internal",
        "named",
        "generateId",
        "name",
        "action",
        "actions",
        "Internal",
        "concurrent",
        "generateId",
        "actions",
        "actions",
        "Internal",
        "concurrent",
        "generateId",
        "actions",
        "actions",
        "Internal",
        "sequential",
        "generateId",
        "actions",
        "actions",
        "Internal",
        "sequential",
        "generateId",
        "actions",
        "Internal",
        "nop",
        "generateId",
        "description",
        "Internal",
        "nop",
        "generateId",
        "description",
        "duration",
        "timeUnit",
        "Internal",
        "sleep",
        "generateId",
        "duration",
        "timeUnit",
        "elements",
        "Internal",
        "forEachOf",
        "generateId",
        "elements",
        "SuppressWarnings",
        "elements",
        "Internal",
        "forEachOf",
        "generateId",
        "elements",
        "value",
        "condition",
        "Internal",
        "whilst",
        "generateId",
        "value",
        "condition",
        "value",
        "condition",
        "Internal",
        "when",
        "generateId",
        "value",
        "condition",
        "action",
        "Internal",
        "timeout",
        "generateId",
        "action",
        "action",
        "Internal",
        "attempt",
        "generateId",
        "action",
        "action",
        "Internal",
        "retry",
        "generateId",
        "action",
        "description",
        "given",
        "Internal",
        "given",
        "generateId",
        "description",
        "given",
        "id",
        "description",
        "runnable",
        "Leaf",
        "create",
        "id",
        "description",
        "runnable",
        "id",
        "name",
        "action",
        "Named",
        "create",
        "id",
        "name",
        "action",
        "id",
        "actions",
        "concurrent",
        "id",
        "asList",
        "actions",
        "id",
        "actions",
        "Concurrent",
        "Factory",
        "INSTANCE",
        "create",
        "id",
        "actions",
        "id",
        "actions",
        "sequential",
        "id",
        "asList",
        "actions",
        "id",
        "actions",
        "Sequential",
        "Factory",
        "INSTANCE",
        "create",
        "id",
        "actions",
        "id",
        "nop",
        "id",
        "id",
        "description",
        "id",
        "Override",
        "Override",
        "nonameIfNull",
        "description",
        "id",
        "duration",
        "timeUnit",
        "checkArgument",
        "duration",
        "duration",
        "checkNotNull",
        "timeUnit",
        "id",
        "Override",
        "InternalUtils",
        "sleep",
        "duration",
        "timeUnit",
        "Override",
        "format",
        "InternalUtils",
        "formatDuration",
        "NANOSECONDS",
        "convert",
        "duration",
        "timeUnit",
        "id",
        "elements",
        "ForEach",
        "builder",
        "id",
        "elements",
        "SafeVarargs",
        "id",
        "elements",
        "ForEach",
        "builder",
        "id",
        "asList",
        "elements",
        "id",
        "value",
        "condition",
        "id",
        "value",
        "condition",
        "id",
        "value",
        "condition",
        "id",
        "value",
        "condition",
        "id",
        "action",
        "id",
        "action",
        "id",
        "action",
        "Attempt",
        "builder",
        "id",
        "action",
        "id",
        "action",
        "Retry",
        "builder",
        "id",
        "action",
        "id",
        "description",
        "given",
        "id",
        "given",
        "description",
        "given"
    ],
    "literals": [
        "\"unchecked\"",
        "\"(nop)\"",
        "\"duration must be non-negative but %s was given\"",
        "\"sleep for %s\""
    ],
    "variables": [
        "actions",
        "actions",
        "elements",
        "actions",
        "actions",
        "elements"
    ],
    "comments": [],
    "docstrings": [
        "* An interface that defines methods to create various actions and builders of\n * actions.",
        "* Creates a simple action object.\n   *\n   * @param description A string used by {@code describable()} method of a returned {@code Action} object.\n   * @param runnable    An object whose {@code run()} method run by a returned {@code Action} object.\n   * @return Created action\n   * @see Leaf",
        "* Creates a named action object.\n   *\n   * @param name   name of the action\n   * @param action action to be named.\n   * @return Created action",
        "* Creates an action which runs given {@code actions} in a concurrent manner.\n   *\n   * @param actions {@code Action} objects performed by returned {@code Action} object.\n   * @return Created action\n   * @see Concurrent",
        "* Creates an action which runs given {@code actions} in a concurrent manner.\n   *\n   * @param actions {@code Action} objects performed by returned {@code Action} object.\n   * @return Created action\n   * @see Concurrent",
        "* Creates an action which runs given {@code actions} in a sequential manner.\n   *\n   * @param actions {@code Action} objects performed by returned {@code Action} object.\n   * @return Created action\n   * @see Sequential",
        "* Creates an action which runs given {@code actions} in a sequential manner.\n   *\n   * @param actions {@code Action} objects performed by returned {@code Action} object.\n   * @return Created action\n   * @see Sequential",
        "* Returns an action that does nothing.\n   *\n   * @return Created action",
        "* Returns an action that does nothing.\n   *\n   * @param description A string that describes returned action.\n   * @return Created action",
        "* Returns an action that waits for given amount of time.\n   *\n   * @param duration Duration to wait for.\n   * @param timeUnit Time unit of the {@code duration}.\n   * @return Created action",
        "* Creates a builder for {@code ForEach} action.\n   *\n   * @param elements Elements iterated by a {@code ForEach} object that returned\n   *                 builder will build.\n   * @param <E>      Type of elements\n   * @return Created builder\n   * @see ForEach\n   * @see ForEach.Builder",
        "* Creates a builder for {@code ForEach} action.\n   *\n   * @param elements Elements iterated by a {@code ForEach} object that returned\n   *                 builder will build.\n   * @param <E>      Type of elements\n   * @return Created builder\n   * @see ForEach\n   * @see ForEach.Builder",
        "* Creates a builder for {@code While} action. This method was named {@code whilst}\n   * just because {@code while} is a reserved word in Java and it can't be used\n   * for a method name.\n   *\n   * @param value     A supplier that gives value to be examined by {@code condition}.\n   * @param condition A predicate that determines if an action created by {@code While}\n   *                  object should be executed or not.\n   * @param <T>       Type of value supplied by {@code value} and examined by {@code condition}\n   * @return Created builder\n   * @see While\n   * @see While.Builder",
        "* Creates a builder for {@code When} action.\n   *\n   * @param value     A supplier that gives value to be examined by {@code condition}.\n   * @param condition A predicate that determines if an action created by {@code While}\n   *                  object should be executed or not.\n   * @param <T>       Type of value supplied by {@code value} and examined by {@code condition}\n   * @return Created builder\n   * @see When\n   * @see When.Builder",
        "* Creates a builder for {@code TimeOut} action.\n   *\n   * @param action An action executed by {@code TimeOut} action that returned builder\n   *               builds\n   * @return Created builder\n   * @see TimeOut\n   * @see TimeOut.Builder",
        "* Creates a builder for {@code Attempt} action.\n   *\n   * @param action An action executed by {@code Attempt} action that returned builder\n   *               builds\n   * @param <T>    Type of a {@code Throwable} that action may throw.\n   * @return Created builder\n   * @see Attempt\n   * @see Attempt.Builder",
        "* Creates a builder for {@code Retry} action.\n   *\n   * @param action An action executed by {@code Retry} action that returned builder\n   *               builds\n   * @return Created builder\n   * @see Retry\n   * @see Retry.Builder",
        "* Creates a builder for {@code TestAction} action. A function to be tested\n   * will be passed to a {@code TestAction#when} method.\n   *\n   * @param description A string that describes a {@code given} supplier.\n   * @param given       A supplier that gives a value to be tested by {@code Test} action.\n   * @param <I>         Type of input to a function to be tested.\n   * @param <O>         Type of output from a function to be tested.\n   * @return Created builder\n   * @see TestAction\n   * @see TestAction.Builder"
    ],
    "functions": [
        "generateId",
        "Action",
        "simple",
        "Action",
        "named",
        "Action",
        "concurrent",
        "Action",
        "concurrent",
        "Action",
        "sequential",
        "Action",
        "sequential",
        "Action",
        "nop",
        "Action",
        "nop",
        "Action",
        "sleep",
        "forEachOf",
        "forEachOf",
        "whilst",
        "when",
        "timeout",
        "attempt",
        "retry",
        "given",
        "Action",
        "simple",
        "Action",
        "named",
        "Action",
        "concurrent",
        "Action",
        "concurrent",
        "Action",
        "sequential",
        "Action",
        "sequential",
        "Action",
        "nop",
        "Action",
        "nop",
        "perform",
        "toString",
        "Action",
        "sleep",
        "perform",
        "toString",
        "forEachOf",
        "forEachOf",
        "whilst",
        "when",
        "timeout",
        "attempt",
        "retry",
        "given"
    ],
    "classes": [
        "Impl",
        "Internal"
    ]
}