{
    "identifiers": [
        "com",
        "aromajoin",
        "controllersdksample",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "java",
        "util",
        "tinyb",
        "BluetoothDevice",
        "tinyb",
        "BluetoothGattService",
        "com",
        "aromajoin",
        "aromashooter",
        "com",
        "aromajoin",
        "aromashooter",
        "AromaShooterBLE",
        "AromaShooterPeripheral",
        "args",
        "productIds",
        "availableRS485AromaShooters",
        "AromaShooterSerial",
        "discoverConnectedAromaShooterRS485",
        "productIds",
        "iterator",
        "availableRS485AromaShooters",
        "iterator",
        "iterator",
        "hasNext",
        "rs485PortName",
        "iterator",
        "next",
        "productId",
        "productIds",
        "testRS485Device",
        "productId",
        "rs485PortName",
        "portName",
        "AromaShooterSerial",
        "isAromaShooter",
        "portName",
        "portName",
        "portName",
        "portName",
        "toString",
        "durationMilliSec",
        "density",
        "speed",
        "AromaShooterSerial",
        "BLOWING_SPEED_MIN",
        "ports",
        "blow",
        "durationMilliSec",
        "speed",
        "ports",
        "sleep",
        "durationMilliSec",
        "e",
        "e",
        "printStackTrace",
        "disconnect",
        "productId",
        "portName",
        "BUFFER_TIME_RS458_CONNECTION",
        "productId",
        "portName",
        "sleep",
        "BUFFER_TIME_RS458_CONNECTION",
        "e1",
        "e1",
        "printStackTrace",
        "durationMilliSec",
        "density",
        "speed",
        "AromaShooterSerial",
        "BLOWING_SPEED_MAX",
        "port4",
        "blow",
        "productId",
        "durationMilliSec",
        "speed",
        "port4",
        "sleep",
        "durationMilliSec",
        "portToRun",
        "blow",
        "getId",
        "durationMilliSec",
        "speed",
        "portToRun",
        "sleep",
        "durationMilliSec",
        "port3",
        "port6",
        "blow",
        "productId",
        "durationMilliSec",
        "speed",
        "port3",
        "blow",
        "productId",
        "durationMilliSec",
        "speed",
        "port6",
        "sleep",
        "durationMilliSec",
        "port1",
        "blow",
        "productId",
        "durationMilliSec",
        "density",
        "speed",
        "port1",
        "sleep",
        "durationMilliSec",
        "changeFanState",
        "AromaShooterSerial",
        "FAN_STATE_ON",
        "sleep",
        "durationMilliSec",
        "changeFanState",
        "AromaShooterSerial",
        "FAN_STATE_OFF",
        "e",
        "e",
        "printStackTrace",
        "disconnect",
        "aromaShooterBLE",
        "AromaShooterBLE",
        "getInstance",
        "fileredAromaShooters",
        "aromaShooterBLE",
        "startScanning",
        "fileredAromaShooters",
        "size",
        "asp",
        "fileredAromaShooters",
        "asp",
        "toString",
        "aromaShooterBLE",
        "connectDevice",
        "connectedASN",
        "aromaShooterBLE",
        "getConnectedDevices",
        "connectedASN",
        "toString",
        "aromaShooterBLE",
        "blow",
        "aromaShooterBLE",
        "getConnectedDevice",
        "connectedASN",
        "getBleAddress",
        "aromaShooterBLE",
        "disconnectDevice",
        "connectedASN",
        "aromaShooterBLE",
        "getConnectedDevices",
        "connectedASN",
        "toString"
    ],
    "literals": [
        "\"ASN1RA0011\"",
        "\"ASN1RA0018\"",
        "\"\"",
        "\" The connected device is an aroma shooter．\"",
        "\" The connected device is not an aroma shooter．\"",
        "\"\"",
        "\"Scanning devices....\"",
        "\"Filtered : \"",
        "\"Connecting device....\"",
        "\"78:C5:E5:6D:EA:B1\"",
        "\"Disconnecting device....\"",
        "\"78:C5:E5:6D:EA:B1\"",
        "\"Done.\""
    ],
    "variables": [],
    "comments": [
        "Discover available ports which were connected to Aroma Shooter USB devices",
        "Set<String> availableAromaShooterUSBs = AromaShooter.discoverConnectedAromaShooterUSB();",
        "Iterator<String> iterator = availableAromaShooterUSBs.iterator();",
        "Iterate on valid ports",
        "while(iterator.hasNext()){",
        "// Perform a test diffuse for each port.",
        "String usbPort = iterator.next();",
        "testUSBDevice(usbPort);",
        "}",
        "Discover available ports which were connected to Aroma Shooter RS-485 devices",
        "Iterate on valid ports",
        "Perform a test diffuse for each port.",
        "Specify the serial port to which the aroma shooter is connected (ex: COM3 on Windows or ttyUSB on Mac/Linux).",
        "String portName = \"/dev/ttyUSB1\";",
        "Confirm whether the device connected to the specified serial port is the Aroma shooter USB.",
        "Create an instance of the Aroma shooter class for USB protocol.",
        "Inject scent process",
        "Injection period (ms)",
        "Scent concentration (between 0 ~ 1)",
        "The injection speed can be adjusted in two values: BLOWING_SPEED_MIN or BLOWING_SPEED_MAX.",
        "Array of ports [1,2] want to inject scent that defined by port number in the aroma shooter",
        "Inject the scent under specified conditions.",
        "For USB protocol, productId is not required.",
        "Stop all running wind sources and remove the aroma shooter from the serial port.",
        "Specify the serial port to which the aroma shooter is connected (ex: COM 3).",
        "String portName = \"/dev/ttyUSB0\";",
        "Specify the product ID of the aroma shooter which provided in product package.",
        "String productId = \"ASN1RA0012\";",
        "Create an instance of the Aroma shooter class for USB protocol.",
        "Provides ProductId for communicate to RS-485 device.",
        "It should be wait for connection time.",
        "Inject scent process",
        "Injection period (ms)",
        "Scent concentration (between 0 ~ 1)",
        "The injection speed can be adjusted in two values: BLOWING_SPEED_MIN or BLOWING_SPEED_MAX.",
        "Array of ports [4] want to inject scent that defined by port number in the aroma shooter",
        "Inject the scent under specified conditions.",
        "For RS-485 protocol, productId is required.",
        "After executing the blow method, since control AS returns without waiting for the end of the injection,",
        "let the thread wait for the injection time.",
        "Blow without aroma density",
        "Blow without aroma density",
        "Control injection with control concentration (aroma density) is also possible",
        "When control a fan please change fan fan stop / stop with changeFanState",
        "Get service from UUID",
        "BluetoothDevice aromashooter = aromaShooterBLE.getConnectedDevice(connectedASN.getBleAddress());",
        "BluetoothGattService asnService = aromaShooterBLE.getService(aromashooter.getAddress(), \"00001802-0000-1000-8000-00805f9b34fb\");",
        "if (asnService == null) {",
        "System.err.println(\"This device does not have the service we are looking for.\");",
        "aromashooter.disconnect();",
        "System.exit(-1);",
        "}",
        "System.out.println(\"Found service \" + asnService.getUUID());"
    ],
    "docstrings": [
        "*",
        "* @author Hanh D TRAN\n * © Aromajoin Corporation\n *\n *  This is class provides two test functions for Aroma Shooter USB and RS-485 devices.\n *\n *  Please run to test functions:\n *      - testUSBDevice\n *      - testRS485Device",
        "* @param args",
        "* Test to control Aroma Shooter with USB protocol communication",
        "* The blow method returns without waiting for the injection to complete.\n         * Also, as injection stops as soon as the disconnect method is called, it pauses the thread until the injection is complete.",
        "* Test to control Aroma Shooter with RS-485 protocol communication",
        "*"
    ],
    "functions": [
        "main",
        "testUSBDevice",
        "testRS485Device",
        "testBLEDevices"
    ],
    "classes": [
        "MainSample"
    ]
}