{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Web",
        "Umbraco",
        "Core",
        "Umbraco",
        "Core",
        "Models",
        "Umbraco",
        "Web",
        "Routing",
        "Skybrud",
        "Umbraco",
        "Redirects",
        "Domains",
        "Uri",
        "current",
        "ApplicationContext",
        "Current",
        "Services",
        "DomainService",
        "GetAll",
        "domains",
        "domains",
        "Any",
        "DomainForUri",
        "domains",
        "current",
        "domain",
        "domain",
        "UmbracoDomain",
        "IDomain",
        "domains",
        "Uri",
        "current",
        "Func",
        "DomainAndUri",
        "DomainAndUri",
        "current",
        "Uri",
        "UriSchemeHttp",
        "current",
        "Scheme",
        "domains",
        "Where",
        "d",
        "IsWildcard",
        "Select",
        "SanitizeForBackwardCompatibility",
        "Select",
        "DomainAndUri",
        "d",
        "scheme",
        "OrderByDescending",
        "d",
        "Uri",
        "ToString",
        "ToArray",
        "domainsAndUris",
        "Any",
        "current",
        "domainAndUri",
        "domainsAndUris",
        "First",
        "current",
        "EndPathWithSlash",
        "domainAndUri",
        "domainsAndUris",
        "FirstOrDefault",
        "d",
        "Uri",
        "EndPathWithSlash",
        "IsBaseOf",
        "currentWithSlash",
        "domainAndUri",
        "domainAndUri",
        "domainAndUri",
        "domainsAndUris",
        "FirstOrDefault",
        "d",
        "Uri",
        "EndPathWithSlash",
        "IsBaseOf",
        "currentWithSlash",
        "WithoutPort",
        "domainAndUri",
        "domainAndUri",
        "domainAndUri",
        "domainsAndUris",
        "domainAndUri",
        "InvalidOperationException",
        "domainAndUri",
        "IDomain",
        "domain",
        "HttpContext",
        "Current",
        "context",
        "domain",
        "DomainName",
        "StartsWith",
        "context",
        "Request",
        "Url",
        "GetLeftPart",
        "UriPartial",
        "Authority",
        "domain",
        "DomainName",
        "authority",
        "domain",
        "DomainName",
        "domain"
    ],
    "literals": [
        "\"The filter returned null.\"",
        "\"/\""
    ],
    "variables": [
        "domains",
        "domain",
        "scheme",
        "domainsAndUris",
        "DomainAndUri",
        "domainAndUri",
        "currentWithSlash",
        "context",
        "authority"
    ],
    "comments": [
        "Static utility class with helper methods related to domains.",
        "</summary>",
        "Finds the domain matching the specified uri using the domain service.",
        "</summary>",
        "<param name=\"current\">The uri, or null.</param>",
        "<returns>The domain</returns>",
        "Finds the domain that best matches a specified uri, into a group of domains.",
        "</summary>",
        "<param name=\"domains\">The group of domains.</param>",
        "<param name=\"current\">The uri, or null.</param>",
        "<param name=\"filter\">A function to filter the list of domains, if more than one applies, or <c>null</c>.</param>",
        "<returns>The domain and its normalized uri, that best matches the specified uri.</returns>",
        "<remarks>Copied from Umbraco core, since it's an internal method there.</remarks>",
        "sanitize the list to have proper uris for comparison (scheme, path end with /)",
        "we need to end with / because example.com/foo cannot match example.com/foobar",
        "we need to order so example.com/foo matches before example.com/",
        "take the first one by default (what else can we do?)",
        ".First() protected by .Any() above",
        "look for the first domain that would be the base of the current url",
        "ie current is www.example.com/foo/bar, look for domain www.example.com",
        "if none matches, try again without the port",
        "ie current is www.example.com:1234/foo/bar, look for domain www.example.com",
        "if none matches, then try to run the filter to pick a domain",
        "if still nothing, pick the first one?",
        "no: move that constraint to the filter, but check",
        "Sanitize a Domain.",
        "</summary>",
        "<param name=\"domain\">The Domain to sanitize.</param>",
        "<returns>The sanitized domain.</returns>",
        "<remarks>Copied from Umbraco core, since it's an internal method there.</remarks>",
        "turn \"/en\" into \"http://whatever.com/en\" so it becomes a parseable uri"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "IDomain",
        "FindDomainForUri",
        "DomainAndUri",
        "DomainForUri",
        "IDomain",
        "SanitizeForBackwardCompatibility"
    ],
    "classes": [
        "DomainUtils"
    ]
}