{
    "identifiers": [
        "print_function",
        "division",
        "numpy",
        "np",
        "six",
        "keras",
        "datasets",
        "cifar10",
        "keras",
        "preprocessing",
        "image",
        "ImageDataGenerator",
        "keras",
        "optimizers",
        "SGD",
        "keras",
        "utils",
        "np_utils",
        "keras",
        "models",
        "Model",
        "keras",
        "layers",
        "Input",
        "Activation",
        "merge",
        "Dense",
        "Flatten",
        "keras",
        "layers",
        "convolutional",
        "Convolution2D",
        "MaxPooling2D",
        "AveragePooling2D",
        "keras",
        "layers",
        "normalization",
        "BatchNormalization",
        "keras",
        "regularizers",
        "l2",
        "keras",
        "backend",
        "K",
        "np",
        "random",
        "seed",
        "input",
        "BatchNormalization",
        "axis",
        "CHANNEL_AXIS",
        "input",
        "Activation",
        "norm",
        "conv_params",
        "conv_params",
        "conv_params",
        "conv_params",
        "conv_params",
        "setdefault",
        "conv_params",
        "setdefault",
        "conv_params",
        "setdefault",
        "conv_params",
        "setdefault",
        "l2",
        "input",
        "Convolution2D",
        "nb_filter",
        "nb_filter",
        "nb_row",
        "nb_row",
        "nb_col",
        "nb_col",
        "subsample",
        "subsample",
        "init",
        "init",
        "border_mode",
        "border_mode",
        "W_regularizer",
        "W_regularizer",
        "input",
        "_bn_relu",
        "conv",
        "f",
        "conv_params",
        "conv_params",
        "conv_params",
        "conv_params",
        "conv_params",
        "setdefault",
        "conv_params",
        "setdefault",
        "conv_params",
        "setdefault",
        "conv_params",
        "setdefault",
        "l2",
        "input",
        "_bn_relu",
        "input",
        "Convolution2D",
        "nb_filter",
        "nb_filter",
        "nb_row",
        "nb_row",
        "nb_col",
        "nb_col",
        "subsample",
        "subsample",
        "init",
        "init",
        "border_mode",
        "border_mode",
        "W_regularizer",
        "W_regularizer",
        "activation",
        "f",
        "input",
        "residual",
        "K",
        "int_shape",
        "input",
        "K",
        "int_shape",
        "residual",
        "round",
        "input_shape",
        "ROW_AXIS",
        "residual_shape",
        "ROW_AXIS",
        "round",
        "input_shape",
        "COL_AXIS",
        "residual_shape",
        "COL_AXIS",
        "input_shape",
        "CHANNEL_AXIS",
        "residual_shape",
        "CHANNEL_AXIS",
        "input",
        "stride_width",
        "stride_height",
        "equal_channels",
        "Convolution2D",
        "nb_filter",
        "residual_shape",
        "CHANNEL_AXIS",
        "nb_row",
        "nb_col",
        "subsample",
        "stride_width",
        "stride_height",
        "init",
        "border_mode",
        "W_regularizer",
        "l2",
        "input",
        "merge",
        "shortcut",
        "residual",
        "mode",
        "block_function",
        "nb_filter",
        "repetitions",
        "is_first_layer",
        "input",
        "i",
        "repetitions",
        "i",
        "is_first_layer",
        "block_function",
        "nb_filter",
        "nb_filter",
        "init_subsample",
        "init_subsample",
        "is_first_block_of_first_layer",
        "is_first_layer",
        "i",
        "input",
        "input",
        "f",
        "nb_filter",
        "init_subsample",
        "is_first_block_of_first_layer",
        "input",
        "is_first_block_of_first_layer",
        "Convolution2D",
        "nb_filter",
        "nb_filter",
        "nb_row",
        "nb_col",
        "subsample",
        "init_subsample",
        "init",
        "border_mode",
        "W_regularizer",
        "l2",
        "input",
        "_bn_relu_conv",
        "nb_filter",
        "nb_filter",
        "nb_row",
        "nb_col",
        "subsample",
        "init_subsample",
        "input",
        "_bn_relu_conv",
        "nb_filter",
        "nb_filter",
        "nb_row",
        "nb_col",
        "conv1",
        "_shortcut",
        "input",
        "residual",
        "f",
        "nb_filter",
        "init_subsample",
        "is_first_block_of_first_layer",
        "input",
        "is_first_block_of_first_layer",
        "Convolution2D",
        "nb_filter",
        "nb_filter",
        "nb_row",
        "nb_col",
        "subsample",
        "init_subsample",
        "init",
        "border_mode",
        "W_regularizer",
        "l2",
        "input",
        "_bn_relu_conv",
        "nb_filter",
        "nb_filter",
        "nb_row",
        "nb_col",
        "subsample",
        "init_subsample",
        "input",
        "_bn_relu_conv",
        "nb_filter",
        "nb_filter",
        "nb_row",
        "nb_col",
        "conv_1_1",
        "_bn_relu_conv",
        "nb_filter",
        "nb_filter",
        "nb_row",
        "nb_col",
        "conv_3_3",
        "_shortcut",
        "input",
        "residual",
        "f",
        "ROW_AXIS",
        "COL_AXIS",
        "CHANNEL_AXIS",
        "K",
        "image_dim_ordering",
        "identifier",
        "isinstance",
        "identifier",
        "six",
        "string_types",
        "globals",
        "get",
        "identifier",
        "res",
        "ValueError",
        "format",
        "identifier",
        "res",
        "identifier",
        "staticmethod",
        "input_shape",
        "num_outputs",
        "block_fn",
        "repetitions",
        "_handle_dim_ordering",
        "len",
        "input_shape",
        "K",
        "image_dim_ordering",
        "input_shape",
        "input_shape",
        "input_shape",
        "_get_block",
        "block_fn",
        "Input",
        "shape",
        "input_shape",
        "_conv_bn_relu",
        "nb_filter",
        "nb_row",
        "nb_col",
        "subsample",
        "input",
        "MaxPooling2D",
        "pool_size",
        "strides",
        "border_mode",
        "conv1",
        "pool1",
        "i",
        "r",
        "repetitions",
        "_residual_block",
        "block_fn",
        "nb_filter",
        "nb_filter",
        "repetitions",
        "r",
        "is_first_layer",
        "i",
        "block",
        "nb_filter",
        "_bn_relu",
        "block",
        "K",
        "int_shape",
        "block",
        "AveragePooling2D",
        "pool_size",
        "block_shape",
        "ROW_AXIS",
        "block_shape",
        "COL_AXIS",
        "strides",
        "block",
        "Flatten",
        "pool2",
        "Dense",
        "output_dim",
        "num_outputs",
        "init",
        "activation",
        "flatten1",
        "Model",
        "input",
        "input",
        "output",
        "dense",
        "model",
        "staticmethod",
        "input_shape",
        "num_outputs",
        "ResnetBuilder",
        "build",
        "input_shape",
        "num_outputs",
        "bottleneck",
        "staticmethod",
        "input_shape",
        "num_outputs",
        "ResnetBuilder",
        "build",
        "input_shape",
        "num_outputs",
        "bottleneck",
        "X_train",
        "y_train",
        "X_test",
        "y_test",
        "cifar10",
        "load_data",
        "X_train",
        "shape",
        "X_train",
        "shape",
        "X_test",
        "shape",
        "np_utils",
        "to_categorical",
        "y_train",
        "nb_classes",
        "np_utils",
        "to_categorical",
        "y_test",
        "nb_classes",
        "ResnetBuilder",
        "build_resnet_50",
        "nb_classes",
        "model",
        "summary",
        "model",
        "compile",
        "loss",
        "optimizer",
        "SGD",
        "metrics",
        "X_train",
        "astype",
        "X_test",
        "astype",
        "X_train",
        "X_test",
        "data_augmentation",
        "model",
        "fit",
        "X_train",
        "Y_train",
        "batch_size",
        "batch_size",
        "nb_epoch",
        "nb_epoch",
        "validation_data",
        "X_test",
        "Y_test",
        "shuffle",
        "history",
        "history",
        "ImageDataGenerator",
        "featurewise_center",
        "samplewise_center",
        "featurewise_std_normalization",
        "samplewise_std_normalization",
        "zca_whitening",
        "rotation_range",
        "width_shift_range",
        "height_shift_range",
        "horizontal_flip",
        "vertical_flip",
        "datagen",
        "fit",
        "X_train",
        "model",
        "fit_generator",
        "datagen",
        "flow",
        "X_train",
        "Y_train",
        "batch_size",
        "batch_size",
        "samples_per_epoch",
        "X_train",
        "shape",
        "nb_epoch",
        "nb_epoch",
        "validation_data",
        "X_test",
        "Y_test",
        "history",
        "history",
        "model",
        "evaluate",
        "X_test",
        "Y_test",
        "verbose",
        "score"
    ],
    "literals": [
        "\"relu\"",
        "\"nb_filter\"",
        "\"nb_row\"",
        "\"nb_col\"",
        "\"subsample\"",
        "\"init\"",
        "\"he_normal\"",
        "\"border_mode\"",
        "\"same\"",
        "\"W_regularizer\"",
        "\"nb_filter\"",
        "\"nb_row\"",
        "\"nb_col\"",
        "\"subsample\"",
        "\"init\"",
        "\"he_normal\"",
        "\"border_mode\"",
        "\"same\"",
        "\"W_regularizer\"",
        "\"he_normal\"",
        "\"valid\"",
        "\"sum\"",
        "\"he_normal\"",
        "\"same\"",
        "\"he_normal\"",
        "\"same\"",
        "'tf'",
        "'Invalid {}'",
        "\"Input shape should be a tuple (nb_channels, nb_rows, nb_cols)\"",
        "'tf'",
        "\"valid\"",
        "\"he_normal\"",
        "\"softmax\"",
        "'X_train shape:'",
        "'train samples'",
        "'test samples'",
        "'categorical_crossentropy'",
        "'accuracy'",
        "'float32'",
        "'float32'",
        "'Not using data augmentation.'",
        "\"Model training complete.\"",
        "\"TRAINING ACCURACY - \"",
        "'acc'",
        "'Using real-time data augmentation.'",
        "\"Model training complete.\"",
        "\"TRAINING ACCURACY - \"",
        "'acc'",
        "\"TEST ACCURACY - \""
    ],
    "variables": [
        "norm",
        "nb_filter",
        "nb_row",
        "nb_col",
        "subsample",
        "init",
        "border_mode",
        "W_regularizer",
        "conv",
        "nb_filter",
        "nb_row",
        "nb_col",
        "subsample",
        "init",
        "border_mode",
        "W_regularizer",
        "activation",
        "input_shape",
        "residual_shape",
        "stride_width",
        "stride_height",
        "equal_channels",
        "shortcut",
        "shortcut",
        "init_subsample",
        "init_subsample",
        "input",
        "conv1",
        "conv1",
        "residual",
        "conv_1_1",
        "conv_1_1",
        "conv_3_3",
        "residual",
        "ROW_AXIS",
        "COL_AXIS",
        "CHANNEL_AXIS",
        "CHANNEL_AXIS",
        "ROW_AXIS",
        "COL_AXIS",
        "res",
        "input_shape",
        "block_fn",
        "input",
        "conv1",
        "pool1",
        "block",
        "nb_filter",
        "block",
        "block",
        "block_shape",
        "pool2",
        "flatten1",
        "dense",
        "model",
        "batch_size",
        "nb_classes",
        "nb_epoch",
        "data_augmentation",
        "img_rows",
        "img_cols",
        "img_channels",
        "Y_train",
        "Y_test",
        "model",
        "X_train",
        "X_test",
        "history",
        "datagen",
        "history",
        "score"
    ],
    "comments": [
        "for reproducibility",
        "Expand channels of shortcut to match residual.",
        "Stride appropriately to match residual (width, height)",
        "Should be int if network architecture is correctly configured.",
        "1 X 1 conv if shape is different. Else identity.",
        "don't repeat bn->relu since we just did bn->relu->maxpool",
        "don't repeat bn->relu since we just did bn->relu->maxpool",
        "Permute dimension order if necessary",
        "Load function from str if needed.",
        "Last activation",
        "Classifier block",
        "Step 1. Prepare the training parameters",
        "Should be atleast 200 for ideal accuracy",
        "input image dimensions",
        "The CIFAR10 images are RGB.",
        "the data, shuffled and split between train and test sets",
        "Convert class vectors to binary class matrices.",
        "Step 2: Build the Resnet50 model for CIFAR 10 image dataset. Images in CIFAR small image dataset is 32*32 RGB (*3).",
        "There are 10 classes of images",
        "Step 3: Compile the model",
        "Step 4: Train the model.",
        "This will do preprocessing and realtime data augmentation:",
        "set input mean to 0 over the dataset",
        "set each sample mean to 0",
        "divide inputs by std of the dataset",
        "divide each input by its std",
        "apply ZCA whitening",
        "randomly rotate images in the range (degrees, 0 to 180)",
        "randomly shift images horizontally (fraction of total width)",
        "randomly shift images vertically (fraction of total height)",
        "randomly flip images",
        "randomly flip images",
        "Compute quantities required for featurewise normalization",
        "(std, mean, and principal components if ZCA whitening is applied).",
        "Fit the model on the batches generated by datagen.flow().",
        "STEP 5: Compute Test Accuracy."
    ],
    "docstrings": [
        "\"\"\"\n\nObjective\n=========\nTrains a Resnet50 network on CIFAR10 small image dataset.\n\nBenchmarks\n==========\n\nMXNet Backend\n=============\n\nTakes lot of time on a CPU machine. Recommended to run on GPU machine.\n\nIncrease number of epochs up to 200 for accuracy > 0.94\n\nEpochs - 10\nBatchsize - 32 per GPU.\n\nExample\n1 GPU   -> Batchsize = 32\n2 GPU   -> Batchsize = 64\n4 GPU   -> Batchsize = 128\n8 GPU   -> Batchsize = 256\n16 GPU  -> Batchsize = 512\n\n1 GPU\n=====\n        Average time per epoch: 160.93\n        Train Accuracy: 0.69\n        Test Accuracy: 0.67\n\n2 GPU\n=====\n        Average time per epoch: 97.19\n        Train Accuracy: 0.69\n        Test Accuracy: 0.52\n\n4 GPU\n=====\n        Average time per epoch: 51.49\n        Train Accuracy: 0.69\n        Test Accuracy: 0.60\n\n8 GPU\n=====\n        Average time per epoch: 41.80\n        Train Accuracy: 0.68\n        Test Accuracy: 0.59\n\n16 GPU\n=====\n        Average time per epoch: 41.36\n        Train Accuracy: 0.54\n        Test Accuracy: 0.42\n\nYou can edit the following parameters for your experimentation:\n1. batch_size - Batch size.\n2. nb_epoch - Number of epochs.\n\nReferences/Credits\n==================\nResnet50 code is borrowed from - https://github.com/raghakot/keras-resnet/blob/master/resnet.py\n\n\"\"\"",
        "\"\"\"Helper to build a BN -> relu block\n    \"\"\"",
        "\"\"\"Helper to build a conv -> BN -> relu block\n    \"\"\"",
        "\"\"\"Helper to build a BN -> relu -> conv block.\n    This is an improved scheme proposed in http://arxiv.org/pdf/1603.05027v2.pdf\n    \"\"\"",
        "\"\"\"Adds a shortcut between input and residual block and merges them with \"sum\"\n    \"\"\"",
        "\"\"\"Builds a residual block with repeating bottleneck blocks.\n    \"\"\"",
        "\"\"\"Basic 3 X 3 convolution blocks for use on resnets with layers <= 34.\n    Follows improved proposed scheme in http://arxiv.org/pdf/1603.05027v2.pdf\n    \"\"\"",
        "\"\"\"Bottleneck architecture for > 34 layer resnet.\n    Follows improved proposed scheme in http://arxiv.org/pdf/1603.05027v2.pdf\n    Returns:\n        A final conv layer of nb_filter * 4\n    \"\"\"",
        "\"\"\"Builds a custom ResNet like architecture.\n        Args:\n            input_shape: The input shape in the form (nb_channels, nb_rows, nb_cols)\n            num_outputs: The number of outputs at final softmax layer\n            block_fn: The block function to use. This is either `basic_block` or `bottleneck`.\n                The original paper used basic_block for layers < 50\n            repetitions: Number of repetitions of various block units.\n                At each block unit, the number of filters are doubled and the input size is halved\n        Returns:\n            The keras `Model`.\n        \"\"\"",
        "\"\"\"\n    For MXNet backend: If you are running on a GPU machine. Assuming you want to use 4 GPUs. Use below code to compile\n    the model.\n\n    model.compile(loss='categorical_crossentropy', optimizer=SGD(), metrics=['accuracy'], context=[\"gpu(0)\", \"gpu(1)\",\n                                                                                                  \"gpu(2)\", \"gpu(3)\"])\n\"\"\""
    ],
    "functions": [
        "_bn_relu",
        "_conv_bn_relu",
        "f",
        "_bn_relu_conv",
        "f",
        "_shortcut",
        "_residual_block",
        "f",
        "basic_block",
        "f",
        "bottleneck",
        "f",
        "_handle_dim_ordering",
        "_get_block",
        "build",
        "build_resnet_50",
        "build_resnet_152"
    ],
    "classes": [
        "ResnetBuilder"
    ]
}