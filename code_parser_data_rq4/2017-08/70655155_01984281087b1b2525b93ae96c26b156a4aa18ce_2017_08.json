{
    "identifiers": [
        "mpl_toolkits",
        "mplot3d",
        "Axes3D",
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "np",
        "spacy",
        "spacy",
        "en",
        "spacy",
        "en",
        "English",
        "textract",
        "ent_type",
        "ent_type",
        "dict_time",
        "ent_type",
        "dict_org",
        "ent_type",
        "dict_person",
        "ent_type",
        "dict_gpe",
        "ent_type",
        "dict_date",
        "ent_type",
        "dict_languages",
        "ent_type",
        "dict_facility",
        "ent_type",
        "dict_work_of_art",
        "ent_type",
        "dict_norp",
        "ent_type",
        "dict_loc",
        "bn_filextract",
        "configobj",
        "ConfigObj",
        "logging",
        "basicConfig",
        "filename",
        "level",
        "logging",
        "DEBUG",
        "plt",
        "figure",
        "fig",
        "add_subplot",
        "projection",
        "ax",
        "set_xlabel",
        "ax",
        "set_ylabel",
        "ax",
        "set_zlabel",
        "img",
        "doc",
        "entity",
        "img",
        "img_list",
        "img_list",
        "append",
        "img",
        "img_list",
        "index",
        "img",
        "doc",
        "doc_list",
        "doc_list",
        "append",
        "doc",
        "doc_list",
        "index",
        "doc",
        "entity",
        "entities_list",
        "entities_list",
        "append",
        "entity",
        "entities_list",
        "index",
        "entity",
        "img_id",
        "doc_id",
        "entity_id",
        "text",
        "entity_list",
        "nlp",
        "img",
        "doc",
        "nlp",
        "text",
        "logging",
        "debug",
        "i",
        "entity_list",
        "logging",
        "debug",
        "entity_list",
        "word",
        "spacy_doc",
        "word",
        "i",
        "word",
        "i",
        "end",
        "len",
        "spacy_doc",
        "spacy_doc",
        "end",
        "is_punct",
        "end",
        "spacy_doc",
        "start",
        "end",
        "word",
        "ent_type_",
        "entity_list",
        "word",
        "ent_type_",
        "lower",
        "entity_list",
        "getIdsForPlot",
        "img",
        "doc",
        "word",
        "plot3d",
        "x",
        "y",
        "z",
        "span",
        "end_char",
        "span",
        "start_char",
        "word",
        "ent_type_",
        "spans",
        "append",
        "end_char",
        "start_char",
        "ent_type",
        "get_dict",
        "word",
        "ent_type_",
        "lower",
        "edict",
        "word",
        "edict",
        "edict",
        "word",
        "word",
        "dict_ent",
        "word",
        "ent_type_",
        "lower",
        "spans",
        "dict_ent",
        "x",
        "y",
        "z",
        "ax",
        "scatter",
        "x",
        "y",
        "z",
        "c",
        "marker",
        "infile",
        "infile",
        "endswith",
        "infile",
        "endswith",
        "format",
        "infile",
        "os",
        "path",
        "splitext",
        "infile",
        "textract",
        "process",
        "infile",
        "file_ext",
        "unicode",
        "text",
        "infile",
        "codecs",
        "open",
        "infile",
        "f",
        "read",
        "infile",
        "input_file_contents",
        "filename",
        "ConfigObj",
        "filename",
        "config",
        "key",
        "entity_list_section",
        "entity_list_section",
        "key",
        "flag",
        "cfg_entity_list",
        "append",
        "key",
        "cfg_entity_list",
        "infile",
        "bg",
        "f",
        "os",
        "listdir",
        "infile",
        "infile",
        "f",
        "f_path",
        "logging",
        "debug",
        "f_path",
        "os",
        "path",
        "isdir",
        "f_path",
        "bcnlpProcessDir",
        "f_path",
        "bg",
        "logging",
        "debug",
        "f_path",
        "bcnlpProcessSingleFile",
        "f_path",
        "bg",
        "img",
        "doc",
        "text",
        "entity_list",
        "parse_en",
        "bg",
        "tagEnts",
        "text",
        "entity_list",
        "parse_en",
        "img",
        "doc",
        "infile",
        "bg",
        "infile",
        "bnParseConfigFile",
        "logging",
        "debug",
        "format",
        "infile",
        "outfile",
        "logging",
        "debug",
        "entity_list",
        "extractContents",
        "infile",
        "text",
        "infile",
        "tagEnts",
        "text",
        "entity_list",
        "img",
        "doc",
        "os",
        "path",
        "exists",
        "outfile",
        "logging",
        "debug",
        "outfile",
        "open",
        "outfile",
        "of",
        "text",
        "of",
        "write",
        "text_line",
        "encode",
        "UnicodeEncodeError",
        "e",
        "format",
        "e",
        "infile",
        "spans",
        "replace",
        "span_line",
        "replace",
        "unicode",
        "span_line",
        "of",
        "write",
        "span_line",
        "unicode",
        "entity_list",
        "of",
        "write",
        "ent_line",
        "format",
        "outfile",
        "outfile",
        "config_file",
        "section_name",
        "section_name",
        "config_file",
        "ConfigObj",
        "config_file",
        "config",
        "section_name",
        "key",
        "section",
        "key",
        "section_name",
        "key",
        "section",
        "key",
        "key",
        "i",
        "section_name",
        "entity_list_section",
        "key",
        "flag",
        "cfg_entity_list",
        "append",
        "key",
        "section_name",
        "cfg_entity_list",
        "spacy",
        "load",
        "bn_parse_config_file",
        "config_file",
        "BnFilextract",
        "ParseForEnts",
        "bn",
        "bnGetExFmtsFromConfigFile",
        "config_file",
        "bn",
        "exc_fmt_list",
        "img",
        "cfg_image",
        "cfg_image",
        "img",
        "bn",
        "bnExtractFiles",
        "ent",
        "cfg_image",
        "img",
        "i",
        "nlp",
        "config_file",
        "i",
        "plt",
        "show"
    ],
    "literals": [
        "'time'",
        "\"time\"",
        "'org'",
        "\"org\"",
        "'person'",
        "\"person\"",
        "'gpe'",
        "\"gpe\"",
        "'date'",
        "\"date\"",
        "'languages'",
        "\"languages\"",
        "'facility'",
        "\"facility\"",
        "'work_of_art'",
        "\"work_of_art\"",
        "'norp'",
        "'norp'",
        "'loc'",
        "\"loc\"",
        "\"bntm_config.txt\"",
        "'bcnlp.log'",
        "'3d'",
        "'Image'",
        "'Document'",
        "'Entity'",
        "\"SPACY_DOC Entities: \\n\"",
        "\"Entity list: %s\"",
        "\"end: \"",
        "\"start: \"",
        "\"type: \"",
        "'r'",
        "'.'",
        "'.span'",
        "'.txt'",
        "\"infile {} doesnt end with txt. So textracting\"",
        "\"Textract probably does not support extension \"",
        "'utf-8'",
        "\"Extracting Contents of file\"",
        "\"r\"",
        "\"utf-8\"",
        "\"Error reading file \"",
        "'entity_list_section'",
        "'/'",
        "\"\\n>> Processing file \"",
        "\"bcnlpProcessDir: Processing file %s \"",
        "\">>>> Processing single file %s \"",
        "'.span'",
        "\"bcnlp_config.txt\"",
        "\"infile:{}, outfile:{}\"",
        "\"Entity List:%s: \"",
        "\"textract returned None for file \"",
        "'writing spans to outfile %s '",
        "\"w\"",
        "\"const text = '\"",
        "\"'\"",
        "'utf8'",
        "\"Unicode Error({0}) \"",
        "\" ### Error in writing: \"",
        "'('",
        "'{'",
        "')'",
        "'}'",
        "\"const spans = \"",
        "'utf-8'",
        "\"%s\\n\"",
        "\"const ents = \"",
        "'utf-8'",
        "\"%s\\n\"",
        "\"Outfile {} exists. So skipping\"",
        "\"\\n\"",
        "\">> Wrote span info to output file \"",
        "\"bn_parse_config_file: Section: \"",
        "\"key: \"",
        "\"image_section\"",
        "\"entity_list_section\"",
        "\"entity_list_section\"",
        "\"__main__\"",
        "'en'",
        "\"bntm_config.txt\"",
        "\"image_section\"",
        "\"Excluded formats in config file: \"",
        "\"Extracting files from image \"",
        "\">> Plotting the results \""
    ],
    "variables": [
        "dict_ent",
        "dict_time",
        "dict_org",
        "dict_person",
        "dict_gpe",
        "dict_event",
        "dict_date",
        "dict_languages",
        "dict_facility",
        "dict_work_of_art",
        "dict_norp",
        "dict_loc",
        "partition_in",
        "config_file",
        "img_list",
        "doc_list",
        "entities_list",
        "spans",
        "fig",
        "ax",
        "img_id",
        "doc_id",
        "entity_id",
        "spacy_doc",
        "dict_ent",
        "i",
        "start",
        "end",
        "span",
        "x",
        "y",
        "z",
        "end_char",
        "start_char",
        "ent_type",
        "edict_name",
        "edict",
        "edict",
        "filename",
        "file_ext",
        "text",
        "input_file_contents",
        "f",
        "input_file_contents",
        "config",
        "entity_list_section",
        "cfg_entity_list",
        "flag",
        "f_path",
        "spans",
        "dict_ents",
        "outfile",
        "entity_list",
        "text",
        "spans",
        "dict_ents",
        "text_line",
        "span_line",
        "span_line",
        "span_line",
        "ent_line",
        "cfg_image",
        "config",
        "section",
        "i",
        "cfg_entity_list",
        "cfg_image",
        "i",
        "flag",
        "nlp",
        "config_file",
        "bn",
        "i",
        "ent",
        "bn",
        "exc_fmt_list"
    ],
    "comments": [
        "!/usr/bin/python",
        "coding=UTF-8",
        "",
        "BitCurator NLP (Disk Image Access for the Web)",
        "Copyright (C) 2014 - 2016",
        "All rights reserved.",
        "",
        "This code is distributed under the terms of the GNU General Public",
        "License, Version 3. See the text file \"COPYING\" for further details",
        "about the terms of this license.",
        "",
        "This file contains the main BitCurator NLP application for 3D plot.",
        "Dict to number of partitions in each image",
        "FIXME: Remove the globalization",
        "print \"ParseForEnts: getIdsForPlot: img_list: \", img_list",
        "print \"Appending IMG to img_list : \", img",
        "return the key as it already exists",
        "print \"ParseForEnts: getIdsForPlot: doc_list: \", doc_list",
        "print \"Appending DOC to doc_list : \", doc",
        "else:",
        "logging.debug(\"DOC %s ALREADY EXISTS \",doc)",
        "return the key as it already exists",
        "return the key as it already exists",
        "logging.debug(\"getIdsForPlot: returning img_id {}, doc_id {} and entity_id: entity_id \".format(img_id, doc_id, entity_id))",
        "logging.debug(\"Word: %s, ent_type: %s \", word, str(word.ent_type_))",
        "logging.debug(\"ENT: Image:%s Doc:%s Entity: %s ent_type:%s \",img, doc, word, word.ent_type_)",
        "logging.debug(\"ENT: Image:%s Doc:%s Entity: %s \",img, doc, word)",
        "logging.debug(\"[D]tagEnts: ent_type %s is in entity_list \", \\",
        "word.ent_type_)",
        "logging.debug(\"[D]tagEnts: Appended %s, New SPANS: %s \", \\",
        "word, self.spans)",
        "For generating histogram, a new dictionary is created for",
        "each entity. First time the value is initialized to 1.",
        "It is appended for subsequent words",
        "nlp expects a unicode text string.",
        "logging.debug(\"Cfg: Key: %s %s \", key, entity_list_section[key])",
        "logging.debug(\"Cfg: bnParseConfigFile: Appending key  %s: \", key)",
        "It is a file",
        "logging.debug(\"const ents = %s\", entity_list)",
        "Get the entity list from the config file:",
        "if key == cfg_string:",
        "found the string",
        "return section[key]",
        "print \"IMAGES: \", cfg_image",
        "parse_en = English()",
        "bn_parse_config_file(config_file)",
        "bn = bn_filextract.bcnlp()",
        "for each image extract the files and convert the convertable",
        "formats to text format",
        "image index",
        "Find the excluded formats from config file.",
        "bnExtractFiles(bn, ent, cfg_image[img], i, nlp)"
    ],
    "docstrings": [
        "\"\"\" Parses the given file(s) into entities and generates the span\n        Input: text, entity_list\n        Output: Span file(s)\n        entity_list can be configured in the file bcnlp_config.txt.\n    \"\"\"",
        "'''\n        for ent in self.spacy_doc.ents:\n            logging.debug(\"%s, %s, %s\", ent, ent.label, ent.label_)\n        '''",
        "'''\n            # Note: This is commented out to reduce noice in the log file.\n            else:\n                logging.debug(\"ent_type %s for word %s is NOT in entity_list\", \n                        word.ent_type_, word)\n            '''",
        "\"\"\" If infile is not in text format, it uses textract api to extract\n            text out of the given file.\n        \"\"\"",
        "'''\n            # Note: This is just in case we want to see the conversion\n            # copied to a file\n            filename, file_ext = os.path.splitext(infile)\n            print(\"Filename: {}, ext: {}\".format(filename, file_ext))\n    \n            new_infile = replace_suffix(infile,file_ext, 'txt')\n            print \"new_infile: \", new_infile\n    \n            f = codecs.open(new_infile, \"r\", \"utf-8\")\n            input_file_contents = f.read()\n    \n            '''",
        "\"\"\" Parses the configuration file plot_config.txt to \n            extract FIXME\n        \"\"\"",
        "\"\"\" Recursively calls itself till it finds a file which is not a \n            directory, to process the file contents.\n        \"\"\"",
        "\"\"\" Given a file, it extracts the contents and calls tagEnts to\n            create the spans for the entities given in the config file. \n        \"\"\"",
        "'''\n        # NOTE: just for debugging purpose. Produces a lot of log\n        logging.debug(\"const text = %s\", text)\n        logging.debug(\"const spans = %s\", str(spans)) \n        logging.debug(\"const ents = %s\", entity_list)\n        '''",
        "'''\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n    \n    xs = \n    ys = \n    zz = randrange(n, 0, 100)\n    '''"
    ],
    "functions": [
        "get_dict",
        "getIdsForPlot",
        "tagEnts",
        "plot3d",
        "extractContents",
        "bnParseConfigFileForEnts",
        "bcnlpProcessDir",
        "bcnlpProcessText",
        "bcnlpProcessSingleFile",
        "bn_parse_config_file"
    ],
    "classes": [
        "ParseForEnts"
    ]
}