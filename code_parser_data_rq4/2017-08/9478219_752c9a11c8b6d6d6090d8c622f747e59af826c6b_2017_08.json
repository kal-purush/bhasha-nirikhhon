{
    "identifiers": [
        "itertools",
        "pprint",
        "random",
        "deepdiff",
        "DeepDiff",
        "elasticsearch",
        "Elasticsearch",
        "elasticsearch",
        "helpers",
        "scan",
        "argparse",
        "ArgumentParser",
        "ArgumentParser",
        "description",
        "description",
        "parser",
        "add_argument",
        "dest",
        "required",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "dest",
        "required",
        "nargs",
        "help",
        "parser",
        "add_argument",
        "dest",
        "action",
        "help",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "parse_args",
        "iterable",
        "n",
        "iter",
        "iterable",
        "n",
        "itertools",
        "izip_longest",
        "args",
        "old_doc",
        "new_doc",
        "DeepDiff",
        "old_doc",
        "new_doc",
        "diff_doc",
        "diff_doc",
        "keys",
        "diff_types",
        "format",
        "new_doc",
        "diff_type",
        "diff_types",
        "field",
        "ignorable_fields",
        "diff_type",
        "diff_doc",
        "isinstance",
        "diff_doc",
        "diff_type",
        "diff_doc",
        "diff_type",
        "discard",
        "field",
        "diff_doc",
        "diff_type",
        "pop",
        "field",
        "all",
        "len",
        "diff_doc",
        "diff_type",
        "diff_type",
        "diff_types",
        "es",
        "index",
        "ids",
        "docs",
        "ids",
        "es",
        "mget",
        "index",
        "index",
        "body",
        "body",
        "elt",
        "search_result",
        "elt",
        "get",
        "elt",
        "get",
        "docs_match",
        "docs",
        "elt",
        "elt",
        "matching",
        "format",
        "id",
        "elt",
        "repr",
        "DeepDiff",
        "docs",
        "elt",
        "elt",
        "elt",
        "docs",
        "elt",
        "format",
        "id",
        "elt",
        "doc",
        "docs",
        "elt",
        "matching",
        "old_es",
        "new_es",
        "old_index",
        "new_index",
        "scan",
        "old_es",
        "index",
        "old_index",
        "old_elts",
        "grouper",
        "old_iter",
        "SCAN_ITER_STEP",
        "elt",
        "old_elts",
        "elt",
        "old_elt_ids",
        "append",
        "elt",
        "elt",
        "elt",
        "matching",
        "find_matching_ids",
        "new_es",
        "new_index",
        "old_elt_ids",
        "old_elt_docs",
        "total",
        "len",
        "old_elt_ids",
        "total",
        "format",
        "total",
        "matching",
        "total",
        "format",
        "ratio",
        "SCAN_MATCH_THRESHOLD",
        "matching",
        "total",
        "ratio",
        "old_es",
        "new_es",
        "old_index",
        "new_index",
        "total_document_count",
        "check_percentage",
        "total",
        "total_document_count",
        "check_percentage",
        "current_offset",
        "RANDOM_CHECKS_BEFORE_RESET",
        "current_offset",
        "random",
        "randint",
        "RANDOM_CHECK_SIZE",
        "current_offset",
        "seed",
        "old_es",
        "search",
        "index",
        "old_index",
        "body",
        "body",
        "elt",
        "results",
        "ids",
        "append",
        "elt",
        "elt",
        "elt",
        "matching",
        "find_matching_ids",
        "new_es",
        "new_index",
        "ids",
        "docs",
        "len",
        "ids",
        "total",
        "num_elts",
        "current_offset",
        "num_elts",
        "total",
        "format",
        "total",
        "matching",
        "total",
        "format",
        "ratio",
        "SCAN_MATCH_THRESHOLD",
        "matching",
        "total",
        "ratio",
        "old_mapping",
        "new_mapping",
        "DeepDiff",
        "old_mapping",
        "new_mapping",
        "deep_diff",
        "pprint",
        "pprint",
        "deep_diff",
        "parse_args",
        "Elasticsearch",
        "args",
        "old",
        "Elasticsearch",
        "args",
        "args",
        "old",
        "args",
        "old_es",
        "indices",
        "stats",
        "index",
        "old_index",
        "values",
        "new_es",
        "indices",
        "stats",
        "index",
        "new_index",
        "values",
        "old_stats",
        "new_stats",
        "format",
        "old_count",
        "new_count",
        "old_count",
        "new_count",
        "old_stats",
        "new_stats",
        "format",
        "old_count",
        "new_count",
        "old_size",
        "new_size",
        "es",
        "index",
        "es",
        "indices",
        "get_mapping",
        "index",
        "index",
        "values",
        "mappings",
        "get",
        "new_style",
        "new_style",
        "mappings",
        "get_mappings",
        "old_es",
        "old_index",
        "get_mappings",
        "new_es",
        "new_index",
        "check_mappings",
        "old_mapping",
        "new_mapping",
        "args",
        "scan",
        "scan_documents",
        "old_es",
        "new_es",
        "old_index",
        "new_index",
        "random_checks",
        "old_es",
        "new_es",
        "old_index",
        "new_index",
        "new_count",
        "args",
        "check_percentage",
        "main"
    ],
    "literals": [
        "'-o'",
        "'--old'",
        "'old'",
        "'Hostname and index of old ES host, e.g. https://localhost:9200 content'",
        "'-n'",
        "'--new'",
        "'new'",
        "'Hostname of new ES host, e.g. https://localhost:9200 content'",
        "'-s'",
        "'--scan'",
        "'scan'",
        "\"store_true\"",
        "'Run a full scan comparison instead of a random selection.'",
        "'-c'",
        "'--check-percentage'",
        "'check_percentage'",
        "'Percentage of randomly found docs to check between old and new indices (default: .1)'",
        "\"root['exists']\"",
        "\"root['found']\"",
        "\"root['_index']\"",
        "\"root['updated_at']\"",
        "\"root['_version']\"",
        "\"root['_score']\"",
        "'dictionary_item_added'",
        "'dictionary_item_removed'",
        "'values_changed'",
        "'values_changed'",
        "'values_changed'",
        "'ERROR: expected to be diffing dictionaries, got something else! id: {}'",
        "'_id'",
        "'docs'",
        "'docs'",
        "'exists'",
        "'found'",
        "'_id'",
        "'FAILURE: Documents with id {id} do not match: '",
        "'_id'",
        "'diff'",
        "'_id'",
        "'new'",
        "'old'",
        "'_id'",
        "'ERROR: Document with id {id} missing: {doc}'",
        "'_id'",
        "'_id'",
        "'_id'",
        "'_id'",
        "'_id'",
        "'processed {} items'",
        "\"{}: scanned documents matching ({} out of {}, {:.6}%)\"",
        "'OK'",
        "'FAILURE'",
        "'size'",
        "'from'",
        "'query'",
        "'function_score'",
        "'functions'",
        "'random_score'",
        "'seed'",
        "'hits'",
        "'hits'",
        "'_id'",
        "'_id'",
        "'_id'",
        "'processed {} items'",
        "\"{}: random documents matching ({} out of {}, {}%)\"",
        "'OK'",
        "'FAILURE'",
        "\"FAILURE: Index mappings do not match\"",
        "\"OK: Index mappings match\"",
        "'indices'",
        "'primaries'",
        "'indices'",
        "'primaries'",
        "'docs'",
        "'count'",
        "'docs'",
        "'count'",
        "\"{}: Document count ({} = {})\"",
        "'OK'",
        "'FAILURE'",
        "'store'",
        "'size_in_bytes'",
        "'store'",
        "'size_in_bytes'",
        "\"{}: Index size ({} = {})\"",
        "'OK'",
        "'FAILURE'",
        "'mappings'",
        "'__main__'"
    ],
    "variables": [
        "description",
        "SCAN_ITER_STEP",
        "SCAN_MATCH_THRESHOLD",
        "RANDOM_CHECK_SIZE",
        "RANDOM_CHECKS_BEFORE_RESET",
        "parser",
        "args",
        "ignorable_fields",
        "diff_types",
        "diff_doc",
        "diff_doc",
        "body",
        "search_result",
        "matching",
        "matching",
        "total",
        "old_iter",
        "old_elt_ids",
        "old_elt_docs",
        "old_elt_docs",
        "ratio",
        "total",
        "matching",
        "current_offset",
        "seed",
        "current_offset",
        "body",
        "results",
        "ids",
        "docs",
        "docs",
        "num_elts",
        "ratio",
        "deep_diff",
        "args",
        "old_es",
        "new_es",
        "old_index",
        "new_index",
        "old_stats",
        "new_stats",
        "old_count",
        "new_count",
        "old_size",
        "new_size",
        "mappings",
        "new_style",
        "old_mapping",
        "new_mapping"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx\"",
        "if this fails something is horribly wrong",
        "values_changed is a set, the other two are dicts",
        "Checks whether or not there was a document matching the id at all.",
        "'exists' is 0.9.x",
        "'found' is 1.5.x",
        "We only want to page a certain amount before regenerating a new set of",
        "random documents.",
        "compare document count",
        "for 1.5.x, there is an extra 'mappings' field that holds the mappings.",
        "Verify that the mappings match between old and new"
    ],
    "docstrings": [
        "\"\"\"\nVerifies that an index was correctly copied from one ES host to another.\n\"\"\"",
        "\"\"\"\nCompare two Elasticsearch indices\n\"\"\"",
        "\"\"\"\n    Parse the arguments for the script.\n    \"\"\"",
        "\"\"\"\n    Collect data into fixed-length chunks or blocks\n    from the import itertools recipe list: https://docs.python.org/3/library/itertools.html#recipes\n    \"\"\"",
        "\"\"\"\n    Return True if the the docs match, minus the ignorable fields\n\n    Args:\n        old_doc: a dict of an elasticsearch doc from the old cluster\n        new_doc: a dict of an elasticsearch doc from the new cluster\n    \"\"\"",
        "\"\"\"\n    example doc:\n    {'dictionary_item_added': {\n        \"root['_source']['_id']\",\n        \"root['_source']['abuse_flaggers']\",\n        \"root['_source']['anonymous']\",\n        \"root['_source']['anonymous_to_peers']\",\n        \"root['_source']['at_position_list']\",\n        \"root['_source']['author_username']\",\n        \"root['_source']['closed']\",\n        \"root['_source']['comment_count']\",\n        \"root['_source']['historical_abuse_flaggers']\",\n        \"root['_source']['pinned']\",\n        \"root['_source']['thread_type']\",\n        \"root['_source']['visible']\",\n        \"root['_source']['votes']\",\n        \"root['found']\"},\n     'dictionary_item_removed': {\n        \"root['_source']['id']\",\n        \"root['_source']['thread_id']\",\n        \"root['_source']['votes_point']\",\n        \"root['exists']\"},\n     'values_changed': {\n        \"root['_index']\": {\n            'new_value': u'content_20170324145539907',\n            'old_value': u'content_20151207225034'},\n        \"root['_source']['body']\": {\n            'new_value': u'encryption neglect hypothesize polluters wining pitiably prophetess apostrophe foretelling assignments diaphragms trustees scroll scruffs shrivels characterizes digraph lasted sharked rewind chamoix charier protoplasm rapports isolated upbraid mortgaged cuddled indefinitely sinful insaner slenderized cemetery deject soundly preventable',\n            'old_value': u'embellishing orbitals complying alternation welching sepulchered grate blench placenta landslide dependance hurdle predicted chaplet earsplitting assess awol necrosis freeways skipper delicatessen sponsorship bellboys antiseptics gabardines admittedly screechier professional roughness educations nutting valences iridescence deductions'},\n        \"root['_source']['title']\": {\n            'new_value': u'southpaw afterward playgoers roughed requites arrived byplay ninetieth textural rental foreclosing',\n            'old_value': u'guttersnipes corduroys ghostly discourtesies'},\n        \"root['_source']['updated_at']\": {\n            'new_value': u'2017-03-29T18:51:19Z',\n            'old_value': u'2017-03-28T12:58:02Z'},\n        \"root['_version']\": {\n            'new_value': 20,\n            'old_value': 1}}}\n\"\"\"",
        "\"\"\"\n    Finds out how many of the ids in the given ids are in the given index in the given\n    ES deployment.\n\n    We also compare documents to ensure that those still match, skipping a few fields\n    (see docs_match() for which ones).\n\n    Args:\n        es - Elasticsearch instance corresponding to the cluster we want to check\n        index - name of the index that we want to check\n        ids - a list of dictionaries of the form {'_id': <id>} of the ids we want to check.\n        docs - a dictionary of the form {'<id>': document}, where \"document\"s are full ES docs\n    \"\"\"",
        "\"\"\"\n    Scan for matching documents\n\n     In order to match the two indices without having to deal with ordering issues,\n     we pull a set of documents from the old ES index, and then try to find matching\n     documents with the same _id in the new ES index. This process is batched to avoid\n     making individual network calls to the new ES index.\n    \"\"\"",
        "\"\"\"\n    Check random documents\n    This is meant to be a random search trying to spot checks on whether\n    or not data was moved over correctly. Runs a lot faster than the full scan.\n    \"\"\"",
        "\"\"\"\n    Verify that the two mappings match in terms of keys and properties\n    Args:\n        - old_mapping (dict) - the mappings from the older ES\n        - new_mapping(dict) - the mappings from the newer ES\n    \"\"\"",
        "\"\"\"\n    Run the verification.\n    \"\"\"",
        "\"\"\"\nindex.stats()\nelasticsearch.scroll()\nuse without scan during downtime\nelasticsearch.helpers.scan is an iterator (whew)\n\nsample first, then full validation\n  is old subset of new?\n  is number of edits small?\n\nno numeric ids\ncan use random scoring?\n{\"size\": 1, \"query\": {\"function_score\": {\"functions\":[{\"random_score\": {\"seed\": 123456}}]}}}\nuse that with scroll and check some number\ncan't use scroll with sorting. Maybe just keep changing the seed?\n  It's kinda slow, but probably fine\n  get `size` at a time\n  are random sorts going to get the same docs on both clusters?\nAlternative: random score with score cutoff? Or script field and search/cutoff\n  Might also be able to use track_scores with scan&scroll on 1.5 and a score cutoff\n\"\"\""
    ],
    "functions": [
        "parse_args",
        "grouper",
        "docs_match",
        "find_matching_ids",
        "scan_documents",
        "random_checks",
        "check_mappings",
        "main",
        "get_mappings"
    ],
    "classes": []
}