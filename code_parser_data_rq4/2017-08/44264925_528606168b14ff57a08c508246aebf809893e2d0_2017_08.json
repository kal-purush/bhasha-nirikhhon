{
    "identifiers": [
        "cp",
        "path",
        "vscode",
        "util",
        "parseEnvFile",
        "getGoRuntimePath",
        "resolvePath",
        "getToolsEnvVars",
        "LineBuffer",
        "GoDocumentSymbolProvider",
        "getNonVendorPackages",
        "vscode",
        "vscode",
        "config",
        "vscode",
        "getToolsEnvVars",
        "config",
        "config",
        "testEnvFile",
        "testEnvFile",
        "resolvePath",
        "testEnvFile",
        "vscode",
        "fileEnv",
        "parseEnvFile",
        "testEnvFile",
        "e",
        "e",
        "toolsEnv",
        "fileEnv",
        "testEnv",
        "goConfig",
        "vscode",
        "args",
        "goConfig",
        "goConfig",
        "goConfig",
        "args",
        "args",
        "args",
        "args",
        "testFlags",
        "doc",
        "vscode",
        "vscode",
        "GoDocumentSymbolProvider",
        "documentSymbolProvider",
        "doc",
        "symbols",
        "symbols",
        "sym",
        "sym",
        "vscode",
        "hasTestFunctionPrefix",
        "sym",
        "name",
        "name",
        "name",
        "testconfig",
        "resolve",
        "reject",
        "outputChannel",
        "testconfig",
        "outputChannel",
        "testconfig",
        "testconfig",
        "testconfig",
        "buildTags",
        "testconfig",
        "args",
        "args",
        "buildTags",
        "getTestEnvVars",
        "testconfig",
        "getGoRuntimePath",
        "goRuntimePath",
        "vscode",
        "targetArgs",
        "testconfig",
        "targets",
        "args",
        "targets",
        "outTargets",
        "outTargets",
        "targets",
        "outputChannel",
        "goRuntimePath",
        "outTargets",
        "outputChannel",
        "args",
        "targets",
        "cp",
        "goRuntimePath",
        "args",
        "testEnvVars",
        "testconfig",
        "LineBuffer",
        "LineBuffer",
        "outBuf",
        "line",
        "outputChannel",
        "expandFilePathInOutput",
        "line",
        "testconfig",
        "outBuf",
        "last",
        "last",
        "outputChannel",
        "expandFilePathInOutput",
        "last",
        "testconfig",
        "errBuf",
        "line",
        "outputChannel",
        "line",
        "errBuf",
        "last",
        "last",
        "outputChannel",
        "last",
        "proc",
        "chunk",
        "outBuf",
        "chunk",
        "proc",
        "chunk",
        "errBuf",
        "chunk",
        "proc",
        "code",
        "outBuf",
        "errBuf",
        "code",
        "outputChannel",
        "outputChannel",
        "resolve",
        "code",
        "err",
        "outputChannel",
        "outputChannel",
        "err",
        "resolve",
        "outputChannel",
        "output",
        "cwd",
        "output",
        "i",
        "lines",
        "i",
        "lines",
        "i",
        "matches",
        "lines",
        "i",
        "lines",
        "i",
        "matches",
        "path",
        "cwd",
        "matches",
        "lines",
        "testconfig",
        "testconfig",
        "resolve",
        "reject",
        "args",
        "args",
        "util",
        "testconfig",
        "resolve",
        "args",
        "testconfig",
        "getNonVendorPackages",
        "vscode"
    ],
    "literals": [
        "'child_process'",
        "'path'",
        "'vscode'",
        "'util'",
        "'./goPath'",
        "'./util'",
        "'./goOutline'",
        "'./goPackages'",
        "'Go Tests'",
        "string",
        "string",
        "string",
        "'testEnvVars'",
        "'testEnvFile'",
        "string",
        "'testFlags'",
        "'testFlags'",
        "'buildFlags'",
        "'flags'",
        "'flags'",
        "'flags'",
        "string",
        "'Test'",
        "'Example'",
        "string",
        "'buildTags'",
        "'test'",
        "'-timeout'",
        "'testTimeout'",
        "'-tags'",
        "'-tags'",
        "'Cannot find \"go\" binary. Update PATH or GOROOT appropriately'",
        "'<long arguments omitted>'",
        "'Running tool:'",
        "' '",
        "''",
        "'data'",
        "'data'",
        "'close'",
        "'Error: Tests failed.'",
        "'Success: Tests passed.'",
        "'Error: Tests failed.'",
        "string",
        "string",
        "string",
        "'\\n'",
        "'\\n'",
        "string",
        "string",
        "'-run'",
        "'^%s$'",
        "'|'"
    ],
    "variables": [
        "outputChannel",
        "toolsEnv",
        "testEnv",
        "fileEnv",
        "testEnvFile",
        "testFlags",
        "documentSymbolProvider",
        "buildTags",
        "args",
        "testEnvVars",
        "goRuntimePath",
        "outTargets",
        "proc",
        "outBuf",
        "errBuf",
        "lines",
        "i",
        "matches",
        "args"
    ],
    "comments": [
        "---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------"
    ],
    "docstrings": [
        "* Input to goTest.",
        "* The working directory for `go test`.",
        "* Configuration for the Go extension",
        "* Test flags to override the testFlags and buildFlags from goConfig.",
        "* Specific function names to test.",
        "* Test was not requested explicitly. The output should not appear in the UI.",
        "* Run all tests from all sub directories under `dir`",
        "* Returns all Go unit test functions in the given source file.\n *\n * @param the URI of a Go source file.\n * @return test function symbols for the source file.",
        "* Returns whether a given function name has a test prefix.\n * Test functions have \"Test\" or \"Example\" as a prefix.\n *\n * @param the function name.\n * @return whether the name has a test function prefix.",
        "* Runs go test and presents the output in the 'Go' channel.\n *\n * @param goConfig Configuration for the Go extension.",
        "* Reveals the output channel in the UI.",
        "* Get the test target arguments.\n *\n * @param testconfig Configuration for the Go extension."
    ],
    "functions": [
        "getTestEnvVars",
        "getTestFlags",
        "getTestFunctions",
        "hasTestFunctionPrefix",
        "goTest",
        "showTestOutput",
        "expandFilePathInOutput",
        "targetArgs"
    ],
    "classes": []
}