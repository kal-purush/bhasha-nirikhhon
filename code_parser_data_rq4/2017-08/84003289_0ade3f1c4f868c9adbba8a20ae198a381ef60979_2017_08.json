{
    "identifiers": [
        "Hapi",
        "Jwt",
        "GoogleAuth",
        "database",
        "IServerConfigurations",
        "UserModel",
        "configs",
        "database",
        "database",
        "configs",
        "UserModel",
        "request",
        "Hapi",
        "reply",
        "Hapi",
        "GoogleAuth",
        "auth",
        "client",
        "request",
        "e",
        "login",
        "login",
        "googleAuthPayload",
        "googleAuthPayload",
        "googleAuthPayload",
        "googleAuthPayload",
        "googleAuthPayload",
        "isFacilitator",
        "userObj",
        "userObj",
        "user",
        "Jwt",
        "user",
        "user",
        "reply",
        "user",
        "token",
        "request",
        "Hapi",
        "reply",
        "Hapi",
        "request",
        "id",
        "obj",
        "reply",
        "obj",
        "request",
        "Hapi",
        "reply",
        "Hapi",
        "request",
        "request",
        "request",
        "database",
        "note",
        "id",
        "reply",
        "id",
        "request",
        "Hapi",
        "reply",
        "Hapi",
        "database",
        "request",
        "rows",
        "reply",
        "rows",
        "request",
        "Hapi",
        "reply",
        "Hapi",
        "database",
        "request",
        "rows",
        "count",
        "reply"
    ],
    "literals": [
        "\"hapi\"",
        "\"jsonwebtoken\"",
        "\"google-auth-library\"",
        "\"../../\"",
        "\"../../configurations\"",
        "\"../../models/user-model\"",
        "''",
        "''",
        "'email'",
        "'email'",
        "'name'",
        "'picture'",
        "'sub'",
        "'email'",
        "'email'",
        "\"secret\"",
        "\"24h\"",
        "\"user\"",
        "\"jwt\"",
        "'student'",
        "'text'",
        "'facilitator'",
        "'notes'",
        "'notes'",
        "'notes.id'",
        "'notes.text'",
        "'notes.createdAt'",
        "'users.name'",
        "'users'",
        "'notes.facilitator'",
        "'users.id'",
        "'notes.student'",
        "'notes'",
        "'id'"
    ],
    "variables": [
        "auth",
        "client",
        "googleAuthPayload",
        "isFacilitator",
        "userObj",
        "token",
        "id",
        "note"
    ],
    "comments": [
        "Return the signed token & the user object",
        "database('users').select()",
        ".where('email', googleAuthPayload['email'])",
        ".then((rows) => {",
        "// If a user does not exist then create a user and return the ID.",
        "if (rows.length === 0) {",
        "// Check if the user needs to be created as a facilitator",
        "",
        "return database('users').insert({}).then((response) => {",
        "// return Promise.resolve({\"hello\": \"123\"});",
        "return database('users').select().where('email', googleAuthPayload['email']).then((rows) => {",
        "let user = rows[0];",
        "return Promise.resolve(user);",
        "});",
        "});",
        "}",
        "// If the user already exists",
        "else {",
        "let user = rows[0];",
        "return Promise.resolve(user);",
        "}",
        "})",
        ".then((user) => {",
        "// Return the signed token & the user object",
        "let token = Jwt.sign({email: user.email, id: user.id}, \"secret\", {expiresIn: \"24h\"});",
        "return reply({",
        "\"user\": user,",
        "\"jwt\": token",
        "});",
        "}",
        ");"
    ],
    "docstrings": [],
    "functions": [
        "loginUser",
        "getUserInfo",
        "postUserNotes",
        "getUserNotes",
        "deleteUserNoteById"
    ],
    "classes": [
        "UserController"
    ]
}