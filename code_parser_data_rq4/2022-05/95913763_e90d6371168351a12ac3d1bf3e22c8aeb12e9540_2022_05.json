{
    "identifiers": [
        "re",
        "pytest_litf",
        "LITF_VERSION",
        "value",
        "value",
        "other",
        "other",
        "_value",
        "_value",
        "regex",
        "regex",
        "other",
        "hasattr",
        "other",
        "_regex",
        "other",
        "_regex",
        "re",
        "match",
        "_regex",
        "other",
        "repr",
        "_regex",
        "values",
        "values",
        "other",
        "hasattr",
        "other",
        "_values",
        "other",
        "_values",
        "value",
        "_values",
        "other",
        "value",
        "repr",
        "_values",
        "LITF_VERSION",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "RegexMatch",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "RegexMatch",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "RegexMatch",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "RegexMatch",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "RegexMatch",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "RegexMatch",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "EitherMatch",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "RegexMatch",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan",
        "GreaterThan"
    ],
    "literals": [
        "\"%d+\"",
        "\"_regex\"",
        "\"_values\"",
        "\"_type\"",
        "\"litf_start\"",
        "\"litf_version\"",
        "\"_type\"",
        "\"session_start\"",
        "\"test_number\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"test_name\"",
        "\"TestClassPassing.test_passing\"",
        "\"id\"",
        "\"test_class.py::TestClassPassing::test_passing\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"test_name\"",
        "\"TestClassFailing.test_failing\"",
        "\"id\"",
        "\"test_class.py::TestClassFailing::test_failing\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"test_name\"",
        "\"TestClassError.test_error\"",
        "\"id\"",
        "\"test_class.py::TestClassError::test_error\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"test_name\"",
        "\"TestClassFailingAndErrorTeardown.test_error\"",
        "\"id\"",
        "\"test_class.py::TestClassFailingAndErrorTeardown::test_error\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"test_name\"",
        "\"TestClassErrorSetup.test_passing\"",
        "\"id\"",
        "\"test_class.py::TestClassErrorSetup::test_passing\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"test_name\"",
        "\"TestClassErrorSetupAndTeardown.test_passing\"",
        "\"id\"",
        "\"test_class.py::TestClassErrorSetupAndTeardown::test_passing\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"test_name\"",
        "\"TestClassErrorTeardown.test_passing\"",
        "\"id\"",
        "\"test_class.py::TestClassErrorTeardown::test_passing\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"test_name\"",
        "\"test_success\"",
        "\"id\"",
        "\"test_func.py::test_success\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"test_name\"",
        "\"test_fails\"",
        "\"id\"",
        "\"test_func.py::test_fails\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"test_name\"",
        "\"test_fixtures[0]\"",
        "\"id\"",
        "\"test_func.py::test_fixtures[0]\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"test_name\"",
        "\"test_fixtures[1]\"",
        "\"id\"",
        "\"test_func.py::test_fixtures[1]\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"test_name\"",
        "\"test_fixtures[2]\"",
        "\"id\"",
        "\"test_func.py::test_fixtures[2]\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"test_name\"",
        "\"test_error\"",
        "\"id\"",
        "\"test_func.py::test_error\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_module_setup_teardown.py\"",
        "\"test_name\"",
        "\"test_passing\"",
        "\"id\"",
        "\"test_module_setup_teardown.py::test_passing\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_module_setup_teardown.py\"",
        "\"test_name\"",
        "\"test_failing\"",
        "\"id\"",
        "\"test_module_setup_teardown.py::test_failing\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_module_setup_teardown.py\"",
        "\"test_name\"",
        "\"TestClassPassing.test_passing\"",
        "\"id\"",
        "\"test_module_setup_teardown.py::TestClassPassing::test_passing\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_module_setup_teardown.py\"",
        "\"test_name\"",
        "\"TestClassFailing.test_failing\"",
        "\"id\"",
        "\"test_module_setup_teardown.py::TestClassFailing::test_failing\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_skip.py\"",
        "\"test_name\"",
        "\"test_skip_function\"",
        "\"id\"",
        "\"test_skip.py::test_skip_function\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_skip.py\"",
        "\"test_name\"",
        "\"TestSkipCall.test_skip_method\"",
        "\"id\"",
        "\"test_skip.py::TestSkipCall::test_skip_method\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_skip.py\"",
        "\"test_name\"",
        "\"TestSkipClass.test_skipped_1\"",
        "\"id\"",
        "\"test_skip.py::TestSkipClass::test_skipped_1\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_skip.py\"",
        "\"test_name\"",
        "\"TestSkipClass.test_skipped_2\"",
        "\"id\"",
        "\"test_skip.py::TestSkipClass::test_skipped_2\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_slow.py\"",
        "\"test_name\"",
        "\"test_slow_passing\"",
        "\"id\"",
        "\"test_slow.py::test_slow_passing\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"test_name\"",
        "\"test_stdout\"",
        "\"id\"",
        "\"test_std.py::test_stdout\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"test_name\"",
        "\"test_stderr\"",
        "\"id\"",
        "\"test_std.py::test_stderr\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"test_name\"",
        "\"TestClassStdout.test_stdout\"",
        "\"id\"",
        "\"test_std.py::TestClassStdout::test_stdout\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"test_name\"",
        "\"TestClassStdoutSetup.test_stdout\"",
        "\"id\"",
        "\"test_std.py::TestClassStdoutSetup::test_stdout\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"test_name\"",
        "\"TestClassStdoutAllPhases.test_stdout\"",
        "\"id\"",
        "\"test_std.py::TestClassStdoutAllPhases::test_stdout\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"test_name\"",
        "\"TestClassFailing.test_stderr\"",
        "\"id\"",
        "\"test_std.py::TestClassFailing::test_stderr\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_unittest.py\"",
        "\"test_name\"",
        "\"TestStringMethods.test_isupper\"",
        "\"id\"",
        "\"test_unittest.py::TestStringMethods::test_isupper\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"test_unittest.py\"",
        "\"test_name\"",
        "\"TestStringMethods.test_upper\"",
        "\"id\"",
        "\"test_unittest.py::TestStringMethods::test_upper\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"directory/test_file_2.py\"",
        "\"test_name\"",
        "\"test_success\"",
        "\"id\"",
        "\"directory/test_file_2.py::test_success\"",
        "\"_type\"",
        "\"test_collection\"",
        "\"line\"",
        "\"file\"",
        "\"directory/test_func.py\"",
        "\"test_name\"",
        "\"test_success\"",
        "\"id\"",
        "\"directory/test_func.py::test_success\"",
        "\"_type\"",
        "\"session_end\"",
        "\"total_duration\"",
        "\"passed\"",
        "\"failed\"",
        "\"error\"",
        "\"skipped\"",
        "\"_type\"",
        "\"litf_start\"",
        "\"litf_version\"",
        "\"0.0.1\"",
        "\"_type\"",
        "\"session_start\"",
        "\"test_number\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassPassing.test_passing\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_class.py::TestClassPassing::test_passing\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassFailing.test_failing\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_class.py::TestClassFailing::test_failing\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "r\"self = <test_class.TestClassFailing object at 0x.*>\\n\\n    def test_failing\\(self\\):\\n>       assert False\\nE       assert False\\n\\ntest_class.py:23: AssertionError\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassError.test_error\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_class.py::TestClassError::test_error\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "r\"self = <test_class.TestClassError object at 0x.*>\\n\\n    def test_error\\(self\\):\\n>       1 / 0\\nE       ZeroDivisionError: division by zero\\n\\ntest_class.py:34: ZeroDivisionError\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassFailingAndErrorTeardown.test_error\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_class.py::TestClassFailingAndErrorTeardown::test_error\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "r\"self = <test_class.TestClassFailingAndErrorTeardown object at 0x.*>\\n\\n    def test_error\\(self\\):\\n>       assert False\\nE       assert False\\n\\ntest_class.py:45: AssertionError\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassErrorSetup.test_passing\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_class.py::TestClassErrorSetup::test_passing\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "r\"self = <test_class.TestClassErrorSetup object at 0x.*>\\nmethod = <bound method TestClassErrorSetup.test_passing of <test_class.TestClassErrorSetup object at 0x.*>>\\n\\n    def setup_method\\(self, method\\):\\n>       1 / 0\\nE       ZeroDivisionError: division by zero\\n\\ntest_class.py:50: ZeroDivisionError\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassErrorSetupAndTeardown.test_passing\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_class.py::TestClassErrorSetupAndTeardown::test_passing\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "r\"self = <test_class.TestClassErrorSetupAndTeardown object at 0x.*>\\nmethod = <bound method TestClassErrorSetupAndTeardown.test_passing of <test_class.TestClassErrorSetupAndTeardown object at 0x.*>>\\n\\n    def setup_method\\(self, method\\):\\n>       1 / 0\\nE       ZeroDivisionError: division by zero\\n\\ntest_class.py:61: ZeroDivisionError\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_class.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassErrorTeardown.test_passing\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_class.py::TestClassErrorTeardown::test_passing\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "r\"self = <test_class.TestClassErrorTeardown object at 0x.*>\\nmethod = <bound method TestClassErrorTeardown.test_passing of <test_class.TestClassErrorTeardown object at 0x.*>>\\n\\n    def teardown_method\\(self, method\\):\\n>       1 / 0\\nE       ZeroDivisionError: division by zero\\n\\ntest_class.py:75: ZeroDivisionError\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_success\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_func.py::test_success\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_fails\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_func.py::test_fails\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"def test_fails():\\n>       assert False\\nE       assert False\\n\\ntest_func.py:11: AssertionError\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_fixtures[0]\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_func.py::test_fixtures[0]\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_fixtures[1]\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_func.py::test_fixtures[1]\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "'number = 1\\n\\n    @pytest.mark.parametrize(\"number\", list(range(3)))\\n    def test_fixtures(number):\\n>       assert number % 2 == 0\\nE       assert 1 == 0\\nE         +1\\nE         -0\\n\\ntest_func.py:16: AssertionError'",
        "'number = 1\\n\\n    @pytest.mark.parametrize(\"number\", list(range(3)))\\n    def test_fixtures(number):\\n>       assert number % 2 == 0\\nE       assert 1 == 0\\nE         -1\\nE         +0\\n\\ntest_func.py:16: AssertionError'",
        "'number = 1\\n\\n    @pytest.mark.parametrize(\"number\", list(range(3)))\\n    def test_fixtures(number):\\n>       assert number % 2 == 0\\nE       assert (1 % 2) == 0\\n\\ntest_func.py:16: AssertionError'",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_fixtures[2]\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_func.py::test_fixtures[2]\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_func.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_error\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_func.py::test_error\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"def test_error():\\n>       1 / 0\\nE       ZeroDivisionError: division by zero\\n\\ntest_func.py:20: ZeroDivisionError\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_module_setup_teardown.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_passing\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_module_setup_teardown.py::test_passing\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_module_setup_teardown.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_failing\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_module_setup_teardown.py::test_failing\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"def test_failing():\\n>       assert False\\nE       assert False\\n\\ntest_module_setup_teardown.py:17: AssertionError\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_module_setup_teardown.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassPassing.test_passing\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_module_setup_teardown.py::TestClassPassing::test_passing\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_module_setup_teardown.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassFailing.test_failing\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_module_setup_teardown.py::TestClassFailing::test_failing\"",
        "\"stdout\"",
        "\"TD M\\nTD MO\\n\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "r\"self = <test_module_setup_teardown.TestClassFailing object at 0x.*>\\n\\n    def test_failing\\(self\\):\\n>       assert False\\nE       assert False\\n\\ntest_module_setup_teardown.py:39: AssertionError\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_skip.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_skip_function\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"skipped\"",
        "\"id\"",
        "\"test_skip.py::test_skip_function\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"setup\"",
        "\"Skipped: Skip\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_skip.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestSkipCall.test_skip_method\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"skipped\"",
        "\"id\"",
        "\"test_skip.py::TestSkipCall::test_skip_method\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"setup\"",
        "\"Skipped: Skip\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_skip.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestSkipClass.test_skipped_1\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"skipped\"",
        "\"id\"",
        "\"test_skip.py::TestSkipClass::test_skipped_1\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"setup\"",
        "\"Skipped: Skip\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_skip.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestSkipClass.test_skipped_2\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"skipped\"",
        "\"id\"",
        "\"test_skip.py::TestSkipClass::test_skipped_2\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"setup\"",
        "\"Skipped: Skip\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_slow.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_slow_passing\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_slow.py::test_slow_passing\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_stdout\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_std.py::test_stdout\"",
        "\"stdout\"",
        "\"STDOUT\\n\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_stderr\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_std.py::test_stderr\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"STDERR\\n\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassStdout.test_stdout\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_std.py::TestClassStdout::test_stdout\"",
        "\"stdout\"",
        "\"STDOUT\\n\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassStdoutSetup.test_stdout\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_std.py::TestClassStdoutSetup::test_stdout\"",
        "\"stdout\"",
        "\"SETUP\\n\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassStdoutAllPhases.test_stdout\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_std.py::TestClassStdoutAllPhases::test_stdout\"",
        "\"stdout\"",
        "\"SETUP\\nTEST\\nTEARDOWN\\n\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_std.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestClassFailing.test_stderr\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_std.py::TestClassFailing::test_stderr\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"STDERR\\n\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_unittest.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestStringMethods.test_isupper\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"failed\"",
        "\"id\"",
        "\"test_unittest.py::TestStringMethods::test_isupper\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "'self = <test_unittest.TestStringMethods testMethod=test_isupper>\\n\\n    def test_isupper(self):\\n        self.assertTrue(\"FOO\".isupper())\\n>       self.assertTrue(\"Foo\".isupper())\\nE       AssertionError: False is not true\\n\\ntest_unittest.py:12: AssertionError'",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"test_unittest.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"TestStringMethods.test_upper\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"test_unittest.py::TestStringMethods::test_upper\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"directory/test_file_2.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_success\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"directory/test_file_2.py::test_success\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"test_result\"",
        "\"file\"",
        "\"directory/test_func.py\"",
        "\"line\"",
        "\"test_name\"",
        "\"test_success\"",
        "\"duration\"",
        "\"durations\"",
        "\"setup\"",
        "\"call\"",
        "\"teardown\"",
        "\"outcome\"",
        "\"passed\"",
        "\"id\"",
        "\"directory/test_func.py::test_success\"",
        "\"stdout\"",
        "\"\"",
        "\"stderr\"",
        "\"\"",
        "\"error\"",
        "\"humanrepr\"",
        "\"\"",
        "\"logs\"",
        "\"\"",
        "\"skipped_messages\"",
        "\"_type\"",
        "\"session_end\"",
        "\"total_duration\"",
        "\"passed\"",
        "\"failed\"",
        "\"error\"",
        "\"skipped\""
    ],
    "variables": [
        "_value",
        "_regex",
        "_values"
    ],
    "comments": [
        "Dictdiffer seems to call ourselves vs ourselved",
        "Dictdiffer seems to call ourselves vs ourselved",
        "Diff order seems to change with pytest 5.4.0"
    ],
    "docstrings": [],
    "functions": [
        "__eq__",
        "__repr__",
        "__eq__",
        "__repr__",
        "__eq__",
        "__repr__",
        "get_expected_litf_output_collect_only",
        "get_expected_litf_output_full_run"
    ],
    "classes": [
        "GreaterThan",
        "RegexMatch",
        "EitherMatch"
    ]
}