{
    "identifiers": [
        "unittest",
        "warnings",
        "test",
        "QiskitMachineLearningTestCase",
        "qiskit",
        "circuit",
        "Parameter",
        "qiskit",
        "circuit",
        "library",
        "ZZFeatureMap",
        "qiskit_machine_learning",
        "kernels",
        "QuantumKernel",
        "QiskitMachineLearningTestCase",
        "setUp",
        "ZZFeatureMap",
        "ZZFeatureMap",
        "circ2",
        "parameters",
        "i",
        "_",
        "user_params",
        "user_params",
        "i",
        "i",
        "circ1",
        "compose",
        "circ2",
        "compose",
        "circ1",
        "user_params",
        "subTest",
        "QuantumKernel",
        "feature_map",
        "user_parameters",
        "warnings",
        "catch_warnings",
        "warnings",
        "simplefilter",
        "assertEqual",
        "qkclass",
        "user_parameters",
        "user_parameters",
        "subTest",
        "QuantumKernel",
        "feature_map",
        "feature_map",
        "training_parameters",
        "user_parameters",
        "warnings",
        "catch_warnings",
        "warnings",
        "simplefilter",
        "assertEqual",
        "qkclass",
        "user_parameters",
        "user_parameters",
        "subTest",
        "QuantumKernel",
        "feature_map",
        "feature_map",
        "training_parameters",
        "user_parameters",
        "warnings",
        "catch_warnings",
        "warnings",
        "simplefilter",
        "assertRaises",
        "ValueError",
        "qkclass",
        "assign_user_parameters",
        "user_param_values",
        "assertEqual",
        "qkclass",
        "get_unbound_user_parameters",
        "qkclass",
        "user_parameters",
        "subTest",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "warnings",
        "catch_warnings",
        "warnings",
        "simplefilter",
        "qkclass",
        "bind_user_parameters",
        "param_binds",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "values",
        "param_binds",
        "values",
        "assertEqual",
        "qkclass",
        "get_unbound_user_parameters",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "qkclass",
        "user_parameters",
        "subTest",
        "user_parameters",
        "user_parameters",
        "warnings",
        "catch_warnings",
        "warnings",
        "simplefilter",
        "qkclass",
        "bind_user_parameters",
        "param_binds",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "values",
        "assertEqual",
        "qkclass",
        "get_unbound_user_parameters",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "qkclass",
        "user_parameters",
        "subTest",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "qkclass",
        "assign_user_parameters",
        "param_binds",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "user_parameters",
        "user_parameters",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "qkclass",
        "user_param_binds",
        "values",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "qkclass",
        "user_parameters",
        "subTest",
        "QuantumKernel",
        "feature_map",
        "feature_map",
        "training_parameters",
        "user_parameters",
        "Parameter",
        "user_parameters",
        "new_param",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "qkclass",
        "assign_user_parameters",
        "param_binds",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "new_param",
        "user_parameters",
        "user_parameters",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "qkclass",
        "user_param_binds",
        "values",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "qkclass",
        "user_parameters",
        "subTest",
        "new_param",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "qkclass",
        "assign_user_parameters",
        "param_binds",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "qkclass",
        "user_param_binds",
        "values",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "qkclass",
        "user_parameters",
        "subTest",
        "QuantumKernel",
        "feature_map",
        "feature_map",
        "training_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "qkclass",
        "assign_user_parameters",
        "param_binds",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "user_parameters",
        "user_parameters",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "values",
        "user_parameters",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "qkclass",
        "user_parameters",
        "subTest",
        "QuantumKernel",
        "feature_map",
        "feature_map",
        "training_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "user_parameters",
        "qkclass",
        "assign_user_parameters",
        "param_binds",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "user_parameters",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "values",
        "assertEqual",
        "qkclass",
        "user_param_binds",
        "keys",
        "qkclass",
        "user_parameters",
        "unittest",
        "main"
    ],
    "literals": [
        "f\"Î¸[{i}]\"",
        "\"check positional argument\"",
        "\"ignore\"",
        "\"check basic instantiation\"",
        "\"ignore\"",
        "\"test invalid parameter assignment\"",
        "\"ignore\"",
        "\"test parameter assignment\"",
        "\"ignore\"",
        "\"test partial parameter assignment\"",
        "\"ignore\"",
        "\"test unassign and assign to parameter expression\"",
        "\"test immediate reassignment to parameter expression\"",
        "\"0[n]\"",
        "\"test bringing back old parameters\"",
        "\"test assign with immediate reassign\"",
        "\"test unordered assigns\"",
        "\"__main__\""
    ],
    "variables": [
        "circ1",
        "circ2",
        "user_params",
        "_name",
        "feature_map",
        "user_parameters",
        "qkclass",
        "qkclass",
        "qkclass",
        "user_param_values",
        "param_binds",
        "param_binds",
        "param_binds",
        "qkclass",
        "new_param",
        "param_binds",
        "param_binds",
        "qkclass",
        "param_binds",
        "qkclass",
        "param_binds"
    ],
    "comments": [
        "This code is part of Qiskit.",
        "",
        "(C) Copyright IBM 2021, 2022.",
        "",
        "This code is licensed under the Apache License, Version 2.0. You may",
        "obtain a copy of this license in the LICENSE.txt file in the root directory",
        "of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.",
        "",
        "Any modifications or derivative works of this code must retain this",
        "copyright notice, and modified files need to carry a notice indicating",
        "that they have been altered from the originals.",
        "NOTE WELL that this file of tests should disappear when we remove the",
        "deprecated ``user_param`` argument/property/methods in quantum_kernel.py.",
        "These tests exist ONLY to ensure that these deprecated objects correctly.",
        "Create an arbitrary 3-qubit feature map circuit",
        "Ensure we can instantiate a QuantumKernel with positional user parameters",
        "Ensure we can instantiate a QuantumKernel with user parameters",
        "Instantiate a QuantumKernel",
        "Try to set the user parameters using an incorrect number of values",
        "Assign params to some new values, and also test the bind_user_parameters interface",
        "Ensure the values are properly bound",
        "Assign params to some new values, and also test the bind_user_parameters interface",
        "Ensure values were properly bound and param 2 was unchanged",
        "Ensure quantum kernel forgets unused param 1 and unbinds param 0 and 2",
        "Create a new quantum kernel",
        "Create a new parameter",
        "Create partial param binds with immediate reassignments to param expressions",
        "Create a new quantum kernel",
        "Create a new quantum kernel"
    ],
    "docstrings": [
        "\"\"\" Test QuantumKernel \"\"\"",
        "\"\"\"Test QuantumKernel training parameter support\"\"\"",
        "\"\"\"Test assigning user parameters with positional argument\"\"\"",
        "\"\"\"Test assigning/re-assigning user parameters\"\"\""
    ],
    "functions": [
        "setUp",
        "test_positional_user_parameters",
        "test_user_parameters"
    ],
    "classes": [
        "TestQuantumKernelTrainingParameters"
    ]
}