{
    "identifiers": [
        "unittest",
        "result",
        "cv2",
        "numpy",
        "np",
        "face_recognition",
        "face_recognition",
        "load_image_file",
        "cv2",
        "cvtColor",
        "imgElon",
        "cv2",
        "COLOR_BGR2RGB",
        "face_recognition",
        "load_image_file",
        "cv2",
        "cvtColor",
        "imgTest",
        "cv2",
        "COLOR_BGR2RGB",
        "face_recognition",
        "face_locations",
        "imgElon",
        "face_recognition",
        "face_encodings",
        "imgElon",
        "cv2",
        "rectangle",
        "imgElon",
        "faceLoc",
        "faceLoc",
        "faceLoc",
        "faceLoc",
        "face_recognition",
        "face_locations",
        "imgTest",
        "face_recognition",
        "face_encodings",
        "imgTest",
        "cv2",
        "rectangle",
        "imgTest",
        "faceLocTest",
        "faceLocTest",
        "faceLocTest",
        "faceLocTest",
        "face_recognition",
        "compare_faces",
        "encodeElon",
        "encodeTest",
        "face_recognition",
        "face_distance",
        "encodeElon",
        "encodeTest",
        "results",
        "faceDis",
        "cv2",
        "putText",
        "imgTest",
        "results",
        "round",
        "faceDis",
        "cv2",
        "FONT_HERSHEY_COMPLEX",
        "cv2",
        "imshow",
        "imgElon",
        "cv2",
        "imshow",
        "imgTest",
        "cv2",
        "waitKey"
    ],
    "literals": [
        "'ImagesBasic/Elon Musk.jpg'",
        "'ImagesBasic/Elon Test.jpg'",
        "f'{results} {round(faceDis[0],2)}'",
        "'Elon Musk'",
        "'Elon Test'"
    ],
    "variables": [
        "imgElon",
        "imgElon",
        "imgTest",
        "imgTest",
        "faceLoc",
        "encodeElon",
        "faceLocTest",
        "encodeTest",
        "results",
        "faceDis"
    ],
    "comments": [
        "import os",
        "def faceDtection(test_img):",
        "gray_img=cv2.cvtColor(test_img,cv2.COLOR_BGRGRAY)",
        "face_haar_cascade=cv2.CascadeClassifier('/haarcascade_frontalface_default.xml')",
        "faces=face_haar_cascade.detectMultiScale(gray_img,scaleFactor=1.32,minNeighbors=5)",
        "return faces,gray_img",
        "COMPARING THESE FACES AND FINDING THE DISTANCE B/W THEM",
        "COMPARING THE DISTANCE B/W TWO IMAGES TO FIND THE SIMILARIES B/W THEM"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}