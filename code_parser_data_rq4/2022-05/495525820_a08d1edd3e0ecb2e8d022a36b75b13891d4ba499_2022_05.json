{
    "identifiers": [
        "java",
        "awt",
        "BasicStroke",
        "java",
        "awt",
        "Color",
        "java",
        "awt",
        "Component",
        "java",
        "awt",
        "FileDialog",
        "java",
        "awt",
        "Font",
        "java",
        "awt",
        "FontMetrics",
        "java",
        "awt",
        "Graphics",
        "java",
        "awt",
        "Graphics2D",
        "java",
        "awt",
        "Image",
        "java",
        "awt",
        "MediaTracker",
        "java",
        "awt",
        "RenderingHints",
        "java",
        "awt",
        "Toolkit",
        "java",
        "awt",
        "ActionEvent",
        "java",
        "awt",
        "ActionListener",
        "java",
        "awt",
        "MouseEvent",
        "java",
        "awt",
        "MouseListener",
        "java",
        "awt",
        "MouseMotionListener",
        "java",
        "awt",
        "KeyEvent",
        "java",
        "awt",
        "KeyListener",
        "java",
        "awt",
        "geom",
        "Arc2D",
        "java",
        "awt",
        "geom",
        "Ellipse2D",
        "java",
        "awt",
        "geom",
        "GeneralPath",
        "java",
        "awt",
        "geom",
        "Line2D",
        "java",
        "awt",
        "geom",
        "Rectangle2D",
        "java",
        "awt",
        "image",
        "BufferedImage",
        "java",
        "awt",
        "image",
        "DirectColorModel",
        "java",
        "awt",
        "image",
        "WritableRaster",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "net",
        "MalformedURLException",
        "java",
        "net",
        "URL",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "TreeSet",
        "javax",
        "imageio",
        "ImageIO",
        "javax",
        "swing",
        "ImageIcon",
        "javax",
        "swing",
        "JFrame",
        "javax",
        "swing",
        "JLabel",
        "javax",
        "swing",
        "JMenu",
        "javax",
        "swing",
        "JMenuBar",
        "javax",
        "swing",
        "JMenuItem",
        "javax",
        "swing",
        "KeyStroke",
        "BLACK",
        "Color",
        "BLACK",
        "BLUE",
        "Color",
        "BLUE",
        "CYAN",
        "Color",
        "CYAN",
        "DARK_GRAY",
        "Color",
        "DARK_GRAY",
        "GRAY",
        "Color",
        "GRAY",
        "GREEN",
        "Color",
        "GREEN",
        "LIGHT_GRAY",
        "Color",
        "LIGHT_GRAY",
        "MAGENTA",
        "Color",
        "MAGENTA",
        "ORANGE",
        "Color",
        "ORANGE",
        "PINK",
        "Color",
        "PINK",
        "RED",
        "Color",
        "RED",
        "WHITE",
        "Color",
        "WHITE",
        "YELLOW",
        "Color",
        "YELLOW",
        "BOOK_BLUE",
        "BOOK_LIGHT_BLUE",
        "BOOK_RED",
        "PRINCETON_ORANGE",
        "DEFAULT_PEN_COLOR",
        "BLACK",
        "DEFAULT_CLEAR_COLOR",
        "WHITE",
        "BORDER",
        "DEFAULT_XMIN",
        "DEFAULT_XMAX",
        "DEFAULT_YMIN",
        "DEFAULT_YMAX",
        "DEFAULT_SIZE",
        "DEFAULT_PEN_RADIUS",
        "DEFAULT_FONT",
        "Font",
        "PLAIN",
        "penColor",
        "width",
        "DEFAULT_SIZE",
        "height",
        "DEFAULT_SIZE",
        "penRadius",
        "defer",
        "xmin",
        "ymin",
        "xmax",
        "ymax",
        "name",
        "mouseLock",
        "keyLock",
        "font",
        "draw",
        "offscreenImage",
        "onscreenImage",
        "offscreen",
        "onscreen",
        "frame",
        "isMousePressed",
        "mouseX",
        "mouseY",
        "keysTyped",
        "keysDown",
        "listeners",
        "name",
        "name",
        "name",
        "init",
        "init",
        "frame",
        "frame",
        "setVisible",
        "frame",
        "offscreenImage",
        "width",
        "height",
        "BufferedImage",
        "TYPE_INT_ARGB",
        "onscreenImage",
        "width",
        "height",
        "BufferedImage",
        "TYPE_INT_ARGB",
        "offscreen",
        "offscreenImage",
        "createGraphics",
        "onscreen",
        "onscreenImage",
        "createGraphics",
        "offscreen",
        "scale",
        "setXscale",
        "setYscale",
        "offscreen",
        "setColor",
        "DEFAULT_CLEAR_COLOR",
        "offscreen",
        "fillRect",
        "width",
        "height",
        "setPenColor",
        "setPenRadius",
        "setFont",
        "clear",
        "hints",
        "RenderingHints",
        "KEY_ANTIALIASING",
        "RenderingHints",
        "VALUE_ANTIALIAS_ON",
        "hints",
        "put",
        "RenderingHints",
        "KEY_RENDERING",
        "RenderingHints",
        "VALUE_RENDER_QUALITY",
        "offscreen",
        "addRenderingHints",
        "hints",
        "icon",
        "onscreenImage",
        "draw",
        "icon",
        "draw",
        "addMouseListener",
        "draw",
        "addMouseMotionListener",
        "frame",
        "setContentPane",
        "draw",
        "frame",
        "addKeyListener",
        "frame",
        "setResizable",
        "frame",
        "setDefaultCloseOperation",
        "JFrame",
        "DISPOSE_ON_CLOSE",
        "frame",
        "setFocusTraversalKeysEnabled",
        "frame",
        "setTitle",
        "name",
        "frame",
        "setJMenuBar",
        "createMenuBar",
        "frame",
        "pack",
        "frame",
        "requestFocusInWindow",
        "frame",
        "setVisible",
        "x",
        "y",
        "x",
        "y",
        "frame",
        "setLocation",
        "x",
        "y",
        "value",
        "frame",
        "setDefaultCloseOperation",
        "value",
        "canvasWidth",
        "canvasHeight",
        "canvasWidth",
        "canvasHeight",
        "width",
        "canvasWidth",
        "height",
        "canvasHeight",
        "init",
        "menuBar",
        "menu",
        "menuBar",
        "add",
        "menu",
        "menuItem1",
        "menuItem1",
        "addActionListener",
        "menuItem1",
        "setAccelerator",
        "KeyStroke",
        "getKeyStroke",
        "KeyEvent",
        "VK_S",
        "Toolkit",
        "getDefaultToolkit",
        "getMenuShortcutKeyMask",
        "menu",
        "add",
        "menuItem1",
        "menuBar",
        "x",
        "name",
        "isNaN",
        "x",
        "name",
        "isInfinite",
        "x",
        "name",
        "x",
        "name",
        "x",
        "name",
        "x",
        "name",
        "x",
        "name",
        "setXscale",
        "DEFAULT_XMIN",
        "DEFAULT_XMAX",
        "setYscale",
        "DEFAULT_YMIN",
        "DEFAULT_YMAX",
        "min",
        "max",
        "validate",
        "min",
        "validate",
        "max",
        "size",
        "max",
        "min",
        "size",
        "xmin",
        "min",
        "BORDER",
        "size",
        "xmax",
        "max",
        "BORDER",
        "size",
        "min",
        "max",
        "validate",
        "min",
        "validate",
        "max",
        "size",
        "max",
        "min",
        "size",
        "ymin",
        "min",
        "BORDER",
        "size",
        "ymax",
        "max",
        "BORDER",
        "size",
        "x",
        "width",
        "x",
        "xmin",
        "xmax",
        "xmin",
        "y",
        "height",
        "ymax",
        "y",
        "ymax",
        "ymin",
        "w",
        "w",
        "width",
        "abs",
        "xmax",
        "xmin",
        "h",
        "h",
        "height",
        "abs",
        "ymax",
        "ymin",
        "x",
        "xmin",
        "x",
        "xmax",
        "xmin",
        "width",
        "y",
        "ymax",
        "y",
        "ymax",
        "ymin",
        "height",
        "clear",
        "DEFAULT_CLEAR_COLOR",
        "color",
        "validateNotNull",
        "color",
        "offscreen",
        "setColor",
        "color",
        "offscreen",
        "fillRect",
        "width",
        "height",
        "offscreen",
        "setColor",
        "penColor",
        "draw",
        "penRadius",
        "setPenRadius",
        "DEFAULT_PEN_RADIUS",
        "radius",
        "validate",
        "radius",
        "validateNonnegative",
        "radius",
        "penRadius",
        "radius",
        "DEFAULT_SIZE",
        "stroke",
        "penRadius",
        "BasicStroke",
        "CAP_ROUND",
        "BasicStroke",
        "JOIN_ROUND",
        "offscreen",
        "setStroke",
        "stroke",
        "penColor",
        "setPenColor",
        "DEFAULT_PEN_COLOR",
        "color",
        "validateNotNull",
        "color",
        "penColor",
        "color",
        "offscreen",
        "setColor",
        "penColor",
        "red",
        "green",
        "blue",
        "red",
        "red",
        "green",
        "green",
        "blue",
        "blue",
        "setPenColor",
        "red",
        "green",
        "blue",
        "offscreen",
        "setXORMode",
        "DEFAULT_CLEAR_COLOR",
        "offscreen",
        "setPaintMode",
        "draw",
        "font",
        "setFont",
        "DEFAULT_FONT",
        "font",
        "validateNotNull",
        "font",
        "font",
        "font",
        "x0",
        "y0",
        "x1",
        "y1",
        "validate",
        "x0",
        "validate",
        "y0",
        "validate",
        "x1",
        "validate",
        "y1",
        "offscreen",
        "draw",
        "scaleX",
        "x0",
        "scaleY",
        "y0",
        "scaleX",
        "x1",
        "scaleY",
        "y1",
        "draw",
        "x",
        "y",
        "validate",
        "x",
        "validate",
        "y",
        "offscreen",
        "fillRect",
        "round",
        "scaleX",
        "x",
        "round",
        "scaleY",
        "y",
        "x",
        "y",
        "validate",
        "x",
        "validate",
        "y",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "r",
        "penRadius",
        "r",
        "pixel",
        "x",
        "y",
        "offscreen",
        "fill",
        "xs",
        "r",
        "ys",
        "r",
        "r",
        "r",
        "draw",
        "x",
        "y",
        "radius",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "radius",
        "validateNonnegative",
        "radius",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "radius",
        "hs",
        "factorY",
        "radius",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "draw",
        "xs",
        "ws",
        "ys",
        "hs",
        "ws",
        "hs",
        "draw",
        "x",
        "y",
        "radius",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "radius",
        "validateNonnegative",
        "radius",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "radius",
        "hs",
        "factorY",
        "radius",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "fill",
        "xs",
        "ws",
        "ys",
        "hs",
        "ws",
        "hs",
        "draw",
        "x",
        "y",
        "semiMajorAxis",
        "semiMinorAxis",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "semiMajorAxis",
        "validate",
        "semiMinorAxis",
        "validateNonnegative",
        "semiMajorAxis",
        "validateNonnegative",
        "semiMinorAxis",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "semiMajorAxis",
        "hs",
        "factorY",
        "semiMinorAxis",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "draw",
        "xs",
        "ws",
        "ys",
        "hs",
        "ws",
        "hs",
        "draw",
        "x",
        "y",
        "semiMajorAxis",
        "semiMinorAxis",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "semiMajorAxis",
        "validate",
        "semiMinorAxis",
        "validateNonnegative",
        "semiMajorAxis",
        "validateNonnegative",
        "semiMinorAxis",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "semiMajorAxis",
        "hs",
        "factorY",
        "semiMinorAxis",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "fill",
        "xs",
        "ws",
        "ys",
        "hs",
        "ws",
        "hs",
        "draw",
        "x",
        "y",
        "radius",
        "angle1",
        "angle2",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "radius",
        "validate",
        "angle1",
        "validate",
        "angle2",
        "validateNonnegative",
        "radius",
        "angle2",
        "angle1",
        "angle2",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "radius",
        "hs",
        "factorY",
        "radius",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "draw",
        "xs",
        "ws",
        "ys",
        "hs",
        "ws",
        "hs",
        "angle1",
        "angle2",
        "angle1",
        "Arc2D",
        "OPEN",
        "draw",
        "x",
        "y",
        "halfLength",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "halfLength",
        "validateNonnegative",
        "halfLength",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "halfLength",
        "hs",
        "factorY",
        "halfLength",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "draw",
        "xs",
        "ws",
        "ys",
        "hs",
        "ws",
        "hs",
        "draw",
        "x",
        "y",
        "halfLength",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "halfLength",
        "validateNonnegative",
        "halfLength",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "halfLength",
        "hs",
        "factorY",
        "halfLength",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "fill",
        "xs",
        "ws",
        "ys",
        "hs",
        "ws",
        "hs",
        "draw",
        "x",
        "y",
        "halfWidth",
        "halfHeight",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "halfWidth",
        "validate",
        "halfHeight",
        "validateNonnegative",
        "halfWidth",
        "validateNonnegative",
        "halfHeight",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "halfWidth",
        "hs",
        "factorY",
        "halfHeight",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "draw",
        "xs",
        "ws",
        "ys",
        "hs",
        "ws",
        "hs",
        "draw",
        "x",
        "y",
        "halfWidth",
        "halfHeight",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "halfWidth",
        "validate",
        "halfHeight",
        "validateNonnegative",
        "halfWidth",
        "validateNonnegative",
        "halfHeight",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "halfWidth",
        "hs",
        "factorY",
        "halfHeight",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "fill",
        "xs",
        "ws",
        "ys",
        "hs",
        "ws",
        "hs",
        "draw",
        "x",
        "y",
        "validateNotNull",
        "x",
        "validateNotNull",
        "y",
        "i",
        "i",
        "x",
        "length",
        "i",
        "validate",
        "x",
        "i",
        "i",
        "i",
        "i",
        "y",
        "length",
        "i",
        "validate",
        "y",
        "i",
        "i",
        "n1",
        "x",
        "length",
        "n2",
        "y",
        "length",
        "n1",
        "n2",
        "n",
        "n1",
        "n",
        "path",
        "path",
        "moveTo",
        "scaleX",
        "x",
        "scaleY",
        "y",
        "i",
        "i",
        "n",
        "i",
        "path",
        "lineTo",
        "scaleX",
        "x",
        "i",
        "scaleY",
        "y",
        "i",
        "path",
        "closePath",
        "offscreen",
        "draw",
        "path",
        "draw",
        "x",
        "y",
        "validateNotNull",
        "x",
        "validateNotNull",
        "y",
        "i",
        "i",
        "x",
        "length",
        "i",
        "validate",
        "x",
        "i",
        "i",
        "i",
        "i",
        "y",
        "length",
        "i",
        "validate",
        "y",
        "i",
        "i",
        "n1",
        "x",
        "length",
        "n2",
        "y",
        "length",
        "n1",
        "n2",
        "n",
        "n1",
        "n",
        "path",
        "path",
        "moveTo",
        "scaleX",
        "x",
        "scaleY",
        "y",
        "i",
        "i",
        "n",
        "i",
        "path",
        "lineTo",
        "scaleX",
        "x",
        "i",
        "scaleY",
        "y",
        "i",
        "path",
        "closePath",
        "offscreen",
        "fill",
        "path",
        "draw",
        "filename",
        "filename",
        "icon",
        "filename",
        "icon",
        "icon",
        "getImageLoadStatus",
        "MediaTracker",
        "COMPLETE",
        "url",
        "filename",
        "icon",
        "url",
        "e",
        "icon",
        "icon",
        "getImageLoadStatus",
        "MediaTracker",
        "COMPLETE",
        "url",
        "getResource",
        "filename",
        "url",
        "icon",
        "url",
        "icon",
        "icon",
        "getImageLoadStatus",
        "MediaTracker",
        "COMPLETE",
        "url",
        "getResource",
        "filename",
        "url",
        "filename",
        "icon",
        "url",
        "icon",
        "getImage",
        "x",
        "y",
        "filename",
        "validate",
        "x",
        "validate",
        "y",
        "validateNotNull",
        "filename",
        "image",
        "getImage",
        "filename",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "image",
        "getWidth",
        "hs",
        "image",
        "getHeight",
        "ws",
        "hs",
        "filename",
        "offscreen",
        "drawImage",
        "image",
        "round",
        "xs",
        "ws",
        "round",
        "ys",
        "hs",
        "draw",
        "x",
        "y",
        "filename",
        "degrees",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "degrees",
        "validateNotNull",
        "filename",
        "image",
        "getImage",
        "filename",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "image",
        "getWidth",
        "hs",
        "image",
        "getHeight",
        "ws",
        "hs",
        "filename",
        "offscreen",
        "rotate",
        "toRadians",
        "degrees",
        "xs",
        "ys",
        "offscreen",
        "drawImage",
        "image",
        "round",
        "xs",
        "ws",
        "round",
        "ys",
        "hs",
        "offscreen",
        "rotate",
        "toRadians",
        "degrees",
        "xs",
        "ys",
        "draw",
        "x",
        "y",
        "filename",
        "scaledWidth",
        "scaledHeight",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "scaledWidth",
        "validate",
        "scaledHeight",
        "validateNotNull",
        "filename",
        "validateNonnegative",
        "scaledWidth",
        "validateNonnegative",
        "scaledHeight",
        "image",
        "getImage",
        "filename",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "scaledWidth",
        "hs",
        "factorY",
        "scaledHeight",
        "ws",
        "hs",
        "filename",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "drawImage",
        "image",
        "round",
        "xs",
        "ws",
        "round",
        "ys",
        "hs",
        "round",
        "ws",
        "round",
        "hs",
        "draw",
        "x",
        "y",
        "filename",
        "scaledWidth",
        "scaledHeight",
        "degrees",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "scaledWidth",
        "validate",
        "scaledHeight",
        "validate",
        "degrees",
        "validateNotNull",
        "filename",
        "validateNonnegative",
        "scaledWidth",
        "validateNonnegative",
        "scaledHeight",
        "image",
        "getImage",
        "filename",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "factorX",
        "scaledWidth",
        "hs",
        "factorY",
        "scaledHeight",
        "ws",
        "hs",
        "filename",
        "ws",
        "hs",
        "pixel",
        "x",
        "y",
        "offscreen",
        "rotate",
        "toRadians",
        "degrees",
        "xs",
        "ys",
        "offscreen",
        "drawImage",
        "image",
        "round",
        "xs",
        "ws",
        "round",
        "ys",
        "hs",
        "round",
        "ws",
        "round",
        "hs",
        "offscreen",
        "rotate",
        "toRadians",
        "degrees",
        "xs",
        "ys",
        "draw",
        "x",
        "y",
        "text",
        "validate",
        "x",
        "validate",
        "y",
        "validateNotNull",
        "text",
        "offscreen",
        "setFont",
        "font",
        "metrics",
        "offscreen",
        "getFontMetrics",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "metrics",
        "stringWidth",
        "text",
        "hs",
        "metrics",
        "getDescent",
        "offscreen",
        "drawString",
        "text",
        "xs",
        "ws",
        "ys",
        "hs",
        "draw",
        "x",
        "y",
        "text",
        "degrees",
        "validate",
        "x",
        "validate",
        "y",
        "validate",
        "degrees",
        "validateNotNull",
        "text",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "offscreen",
        "rotate",
        "toRadians",
        "degrees",
        "xs",
        "ys",
        "text",
        "x",
        "y",
        "text",
        "offscreen",
        "rotate",
        "toRadians",
        "degrees",
        "xs",
        "ys",
        "x",
        "y",
        "text",
        "validate",
        "x",
        "validate",
        "y",
        "validateNotNull",
        "text",
        "offscreen",
        "setFont",
        "font",
        "metrics",
        "offscreen",
        "getFontMetrics",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "hs",
        "metrics",
        "getDescent",
        "offscreen",
        "drawString",
        "text",
        "xs",
        "ys",
        "hs",
        "draw",
        "x",
        "y",
        "text",
        "validate",
        "x",
        "validate",
        "y",
        "validateNotNull",
        "text",
        "offscreen",
        "setFont",
        "font",
        "metrics",
        "offscreen",
        "getFontMetrics",
        "xs",
        "scaleX",
        "x",
        "ys",
        "scaleY",
        "y",
        "ws",
        "metrics",
        "stringWidth",
        "text",
        "hs",
        "metrics",
        "getDescent",
        "offscreen",
        "drawString",
        "text",
        "xs",
        "ws",
        "ys",
        "hs",
        "draw",
        "Deprecated",
        "t",
        "show",
        "pause",
        "t",
        "enableDoubleBuffering",
        "t",
        "sleep",
        "t",
        "e",
        "onscreen",
        "drawImage",
        "offscreenImage",
        "frame",
        "repaint",
        "defer",
        "show",
        "defer",
        "defer",
        "filename",
        "validateNotNull",
        "filename",
        "file",
        "filename",
        "suffix",
        "filename",
        "substring",
        "filename",
        "lastIndexOf",
        "equalsIgnoreCase",
        "suffix",
        "ImageIO",
        "write",
        "offscreenImage",
        "suffix",
        "file",
        "e",
        "e",
        "printStackTrace",
        "equalsIgnoreCase",
        "suffix",
        "rgbBuffer",
        "width",
        "height",
        "BufferedImage",
        "TYPE_INT_RGB",
        "rgb2d",
        "rgbBuffer",
        "createGraphics",
        "rgb2d",
        "drawImage",
        "onscreenImage",
        "rgb2d",
        "dispose",
        "ImageIO",
        "write",
        "rgbBuffer",
        "suffix",
        "file",
        "e",
        "e",
        "printStackTrace",
        "suffix",
        "Override",
        "e",
        "chooser",
        "frame",
        "FileDialog",
        "SAVE",
        "chooser",
        "setVisible",
        "filename",
        "chooser",
        "getFile",
        "filename",
        "save",
        "chooser",
        "getDirectory",
        "File",
        "separator",
        "chooser",
        "getFile",
        "listener",
        "show",
        "listeners",
        "add",
        "listener",
        "mouseLock",
        "isMousePressed",
        "Deprecated",
        "mouseLock",
        "isMousePressed",
        "mouseLock",
        "mouseX",
        "mouseLock",
        "mouseY",
        "Override",
        "e",
        "Override",
        "e",
        "Override",
        "e",
        "mouseLock",
        "mouseX",
        "userX",
        "e",
        "getX",
        "mouseY",
        "userY",
        "e",
        "getY",
        "isMousePressed",
        "e",
        "getButton",
        "MouseEvent",
        "BUTTON1",
        "listener",
        "listeners",
        "listener",
        "mousePressed",
        "userX",
        "e",
        "getX",
        "userY",
        "e",
        "getY",
        "Override",
        "e",
        "mouseLock",
        "isMousePressed",
        "e",
        "getButton",
        "MouseEvent",
        "BUTTON1",
        "listener",
        "listeners",
        "listener",
        "mouseReleased",
        "userX",
        "e",
        "getX",
        "userY",
        "e",
        "getY",
        "Override",
        "e",
        "e",
        "getButton",
        "MouseEvent",
        "BUTTON1",
        "listener",
        "listeners",
        "listener",
        "mouseClicked",
        "userX",
        "e",
        "getX",
        "userY",
        "e",
        "getY",
        "Override",
        "e",
        "mouseLock",
        "mouseX",
        "userX",
        "e",
        "getX",
        "mouseY",
        "userY",
        "e",
        "getY",
        "listener",
        "listeners",
        "listener",
        "mouseDragged",
        "userX",
        "e",
        "getX",
        "userY",
        "e",
        "getY",
        "Override",
        "e",
        "mouseLock",
        "mouseX",
        "userX",
        "e",
        "getX",
        "mouseY",
        "userY",
        "e",
        "getY",
        "keyLock",
        "keysTyped",
        "isEmpty",
        "keyLock",
        "keysTyped",
        "removeLast",
        "keycode",
        "keyLock",
        "keysDown",
        "contains",
        "keycode",
        "Override",
        "e",
        "keyLock",
        "keysTyped",
        "addFirst",
        "e",
        "getKeyChar",
        "listener",
        "listeners",
        "listener",
        "keyTyped",
        "e",
        "getKeyChar",
        "Override",
        "e",
        "keyLock",
        "keysDown",
        "add",
        "e",
        "getKeyCode",
        "listener",
        "listeners",
        "listener",
        "keyPressed",
        "e",
        "getKeyCode",
        "Override",
        "e",
        "keyLock",
        "keysDown",
        "remove",
        "e",
        "getKeyCode",
        "listener",
        "listeners",
        "listener",
        "keyReleased",
        "e",
        "getKeyCode",
        "image",
        "image",
        "getIconWidth",
        "getIconHeight",
        "c",
        "g",
        "x",
        "y",
        "g2",
        "g",
        "create",
        "g2",
        "setRenderingHint",
        "RenderingHints",
        "KEY_INTERPOLATION",
        "RenderingHints",
        "VALUE_INTERPOLATION_BICUBIC",
        "g2",
        "setRenderingHint",
        "RenderingHints",
        "KEY_RENDERING",
        "RenderingHints",
        "VALUE_RENDER_QUALITY",
        "g2",
        "setRenderingHint",
        "RenderingHints",
        "KEY_ANTIALIASING",
        "RenderingHints",
        "VALUE_ANTIALIAS_ON",
        "g2",
        "scale",
        "paintIcon",
        "c",
        "g2",
        "x",
        "y",
        "g2",
        "dispose",
        "args",
        "draw1",
        "draw1",
        "square",
        "draw1",
        "filledSquare",
        "draw1",
        "circle",
        "draw1",
        "setPenColor",
        "Draw",
        "MAGENTA",
        "draw1",
        "setPenRadius",
        "draw1",
        "arc",
        "draw2",
        "draw2",
        "setCanvasSize",
        "draw2",
        "setPenRadius",
        "draw2",
        "setPenColor",
        "Draw",
        "BLUE",
        "x",
        "y",
        "draw2",
        "filledPolygon",
        "x",
        "y",
        "draw2",
        "setPenColor",
        "Draw",
        "BLACK",
        "draw2",
        "text",
        "draw2",
        "setPenColor",
        "Draw",
        "WHITE",
        "draw2",
        "text"
    ],
    "literals": [
        "\"SansSerif\"",
        "\"Draw\"",
        "\"width and height must be positive\"",
        "\"File\"",
        "\" Save...   \"",
        "\" is NaN\"",
        "\" is infinite\"",
        "\" negative\"",
        "\" is null\"",
        "\"min\"",
        "\"max\"",
        "\"the min and max are the same\"",
        "\"min\"",
        "\"max\"",
        "\"the min and max are the same\"",
        "\"color\"",
        "\"pen radius\"",
        "\"pen radius\"",
        "\"color\"",
        "\"red must be between 0 and 255\"",
        "\"green must be between 0 and 255\"",
        "\"blue must be between 0 and 255\"",
        "\"font\"",
        "\"x0\"",
        "\"y0\"",
        "\"x1\"",
        "\"y1\"",
        "\"x\"",
        "\"y\"",
        "\"x\"",
        "\"y\"",
        "\"x\"",
        "\"y\"",
        "\"radius\"",
        "\"radius\"",
        "\"x\"",
        "\"y\"",
        "\"radius\"",
        "\"radius\"",
        "\"x\"",
        "\"y\"",
        "\"semimajor axis\"",
        "\"semiminor axis\"",
        "\"semimajor axis\"",
        "\"semiminor axis\"",
        "\"x\"",
        "\"y\"",
        "\"semimajor axis\"",
        "\"semiminor axis\"",
        "\"semimajor axis\"",
        "\"semiminor axis\"",
        "\"x\"",
        "\"y\"",
        "\"arc radius\"",
        "\"angle1\"",
        "\"angle2\"",
        "\"arc radius\"",
        "\"x\"",
        "\"y\"",
        "\"halfLength\"",
        "\"half length\"",
        "\"x\"",
        "\"y\"",
        "\"halfLength\"",
        "\"half length\"",
        "\"x\"",
        "\"y\"",
        "\"halfWidth\"",
        "\"halfHeight\"",
        "\"half width\"",
        "\"half height\"",
        "\"x\"",
        "\"y\"",
        "\"halfWidth\"",
        "\"halfHeight\"",
        "\"half width\"",
        "\"half height\"",
        "\"x-coordinate array\"",
        "\"y-coordinate array\"",
        "\"x[\"",
        "\"]\"",
        "\"y[\"",
        "\"]\"",
        "\"arrays must be of the same length\"",
        "\"x-coordinate array\"",
        "\"y-coordinate array\"",
        "\"x[\"",
        "\"]\"",
        "\"y[\"",
        "\"]\"",
        "\"arrays must be of the same length\"",
        "\"/\"",
        "\"image \"",
        "\" not found\"",
        "\"x\"",
        "\"y\"",
        "\"filename\"",
        "\"image \"",
        "\" is corrupt\"",
        "\"x\"",
        "\"y\"",
        "\"degrees\"",
        "\"filename\"",
        "\"image \"",
        "\" is corrupt\"",
        "\"x\"",
        "\"y\"",
        "\"scaled width\"",
        "\"scaled height\"",
        "\"filename\"",
        "\"scaled width\"",
        "\"scaled height\"",
        "\"image \"",
        "\" is corrupt\"",
        "\"x\"",
        "\"y\"",
        "\"scaled width\"",
        "\"scaled height\"",
        "\"degrees\"",
        "\"filename\"",
        "\"scaled width\"",
        "\"scaled height\"",
        "\"image \"",
        "\" is corrupt\"",
        "\"x\"",
        "\"y\"",
        "\"text\"",
        "\"x\"",
        "\"y\"",
        "\"degrees\"",
        "\"text\"",
        "\"x\"",
        "\"y\"",
        "\"text\"",
        "\"x\"",
        "\"y\"",
        "\"text\"",
        "\"Error sleeping\"",
        "\"filename\"",
        "\"png\"",
        "\"jpg\"",
        "\"Invalid image file type: \"",
        "\"Use a .png or .jpg extension\"",
        "\"Test client 1\"",
        "\"Test client 2\"",
        "\"bdfdfdfdlack text\"",
        "\"white text\""
    ],
    "variables": [
        "penColor",
        "penRadius",
        "xmin",
        "ymin",
        "xmax",
        "ymax",
        "font",
        "draw",
        "offscreenImage",
        "onscreenImage",
        "offscreen",
        "onscreen"
    ],
    "comments": [
        "default colors",
        "boundary of drawing canvas, 0% border",
        "default canvas size is SIZE-by-SIZE",
        "default pen radius",
        "default font",
        "current pen color",
        "canvas size",
        "current pen radius",
        "show we draw immediately or wait until next show?",
        "name of window",
        "for synchronization",
        "current font",
        "the JLabel for drawing",
        "double buffered graphics",
        "the frame for drawing to the screen",
        "mouse state",
        "keyboard state",
        "event-based listeners",
        "since we made it 2x as big",
        "add antialiasing",
        "frame stuff",
        "JLabel cannot get keyboard focus",
        "frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);            // closes all windows",
        "closes only current window",
        "to recognize VK_TAB with isKeyPressed()",
        "create the menu bar (changed to private)",
        "Java 10+: replace getMenuShortcutKeyMask() with getMenuShortcutKeyMaskEx()",
        "throw an IllegalArgumentException if x is NaN or infinite",
        "throw an IllegalArgumentException if s is null",
        "throw an IllegalArgumentException if s is null",
        "helper functions that scale from user coordinates to screen coordinates and back",
        "BasicStroke stroke = new BasicStroke((float) penRadius);",
        "double ws = factorX(2*r);",
        "double hs = factorY(2*r);",
        "if (ws <= 1 && hs <= 1) pixel(x, y);",
        "get an image from the given filename",
        "to read from file",
        "try to read from URL",
        "in case file is inside a .jar (classpath relative to StdDraw)",
        "in case file is inside a .jar (classpath relative to root of jar)",
        "int ws = metrics.stringWidth(text);",
        "draw onscreen if defer is false",
        "png files",
        "need to change from ARGB to RGB for JPEG",
        "Credit to arnabanimesh for simpler ARGB to RGB conversion",
        "ensure there is a window for listenting to events",
        "this body is intentionally left empty",
        "this body is intentionally left empty",
        "doesn't seem to work if a button is specified",
        "notify all listeners",
        "notify all listeners",
        "notify all listeners",
        "create one drawing window",
        "create another one",
        "draw a blue diamond",
        "text"
    ],
    "docstrings": [
        "****************************************************************************\n *  Compilation:  javac Draw.java\n *  Execution:    java Draw\n *  Dependencies: none\n *\n *  Drawing library. This class provides a basic capability for creating\n *  drawings with your programs. It uses a simple graphics model that\n *  allows you to create drawings consisting of points, lines, and curves\n *  in a window on your computer and to save the drawings to a file.\n *  This is the object-oriented version of standard draw; it supports\n *  multiple indepedent drawing windows.\n *\n *  Todo\n *  ----\n *    -  Add support for gradient fill, etc.\n *\n *  Remarks\n *  -------\n *    -  don't use AffineTransform for rescaling since it inverts\n *       images and strings\n *    -  careful using setFont in inner loop within an animation -\n *       it can cause flicker\n *\n *****************************************************************************",
        "*  <i>Draw</i>. This class provides a basic capability for\n *  creating drawings with your programs. It uses a simple graphics model that\n *  allows you to create drawings consisting of points, lines, and curves\n *  in a window on your computer and to save the drawings to a file.\n *  This is the object-oriented version of standard draw; it supports\n *  multiple indepedent drawing windows.\n *  <p>\n *  For additional documentation, see\n *  <a href=\"https://introcs.cs.princeton.edu/31datatype\">Section 3.1</a> of\n *  <i>Computer Science: An Interdisciplinary Approach</i> by Robert Sedgewick and Kevin Wayne.\n *\n *  @author Robert Sedgewick\n *  @author Kevin Wayne",
        "*  The color black.",
        "*  The color blue.",
        "*  The color cyan.",
        "*  The color dark gray.",
        "*  The color gray.",
        "*  The color green.",
        "*  The color light gray.",
        "*  The color magenta.",
        "*  The color orange.",
        "*  The color pink.",
        "*  The color red.",
        "*  The color white.",
        "*  The color yellow.",
        "* Shade of blue used in Introduction to Programming in Java.\n     * It is Pantone 300U. The RGB values are approximately (9, 90, 166).",
        "* Shade of light blue used in Introduction to Programming in Java.\n     * The RGB values are approximately (103, 198, 243).",
        "* Shade of red used in <em>Algorithms, 4th edition</em>.\n     * It is Pantone 1805U. The RGB values are approximately (150, 35, 31).",
        "* Shade of orange used in Princeton's identity.\n     * It is PMS 158. The RGB values are approximately (245, 128, 37).",
        "* Initializes an empty drawing object with the given name.\n     *\n     * @param name the title of the drawing window.",
        "* Initializes an empty drawing object.",
        "* Sets the upper-left hand corner of the drawing window to be (x, y), where (0, 0) is upper left.\n     *\n     * @param  x the number of pixels from the left\n     * @param  y the number of pixels from the top\n     * @throws IllegalArgumentException if the width or height is 0 or negative",
        "* Sets the default close operation.\n     *\n     * @param  value the value, typically {@code JFrame.EXIT_ON_CLOSE}\n     *         (close all windows) or {@code JFrame.DISPOSE_ON_CLOSE}\n     *         (close current window)",
        "* Sets the canvas (drawing area) to be <em>width</em>-by-<em>height</em> pixels.\n     * This also erases the current drawing and resets the coordinate system, pen radius,\n     * pen color, and font back to their default values.\n     * Ordinarly, this method is called once, at the very beginning of a program.\n     *\n     * @param  canvasWidth the width as a number of pixels\n     * @param  canvasHeight the height as a number of pixels\n     * @throws IllegalArgumentException unless both {@code canvasWidth}\n     *         and {@code canvasHeight} are positive",
        "*************************************************************************\n    *  User and screen coordinate systems.\n    **************************************************************************",
        "* Sets the x-scale to be the default (between 0.0 and 1.0).",
        "* Sets the y-scale to be the default (between 0.0 and 1.0).",
        "* Sets the x-scale.\n     *\n     * @param min the minimum value of the x-scale\n     * @param max the maximum value of the x-scale\n     * @throws IllegalArgumentException if {@code (max == min)}\n     * @throws IllegalArgumentException if either {@code min} or {@code max} is either NaN or infinite",
        "* Sets the y-scale.\n     *\n     * @param min the minimum value of the y-scale\n     * @param max the maximum value of the y-scale\n     * @throws IllegalArgumentException if {@code (max == min)}\n     * @throws IllegalArgumentException if either {@code min} or {@code max} is either NaN or infinite",
        "* Clears the screen to the default color (white).",
        "* Clears the screen to the given color.\n     *\n     * @param color the color to make the background\n     * @throws IllegalArgumentException if {@code color} is {@code null}",
        "* Gets the current pen radius.\n     *\n     * @return the current pen radius",
        "* Sets the pen size to the default (.002).",
        "* Sets the radius of the pen to the given size.\n     *\n     * @param  radius the radius of the pen\n     * @throws IllegalArgumentException if {@code radius} is negative, NaN, or infinite",
        "* Gets the current pen color.\n     *\n     * @return the current pen color",
        "* Sets the pen color to the default color (black).",
        "* Sets the pen color to the given color.\n     *\n     * @param color the color to make the pen\n     * @throws IllegalArgumentException if {@code color} is {@code null}",
        "* Sets the pen color to the given RGB color.\n     *\n     * @param  red the amount of red (between 0 and 255)\n     * @param  green the amount of green (between 0 and 255)\n     * @param  blue the amount of blue (between 0 and 255)\n     * @throws IllegalArgumentException if {@code red}, {@code green},\n     *         or {@code blue} is outside its prescribed range",
        "* Turns on xor mode.",
        "* Turns off xor mode.",
        "* Gets the current {@code JLabel} for use in some other GUI.\n     *\n     * @return the current {@code JLabel}",
        "* Gets the current font.\n     *\n     * @return the current font",
        "* Sets the font to the default font (sans serif, 16 point).",
        "* Sets the font to the given value.\n     *\n     * @param font the font\n     * @throws IllegalArgumentException if {@code font} is {@code null}",
        "*************************************************************************\n    *  Drawing geometric shapes.\n    **************************************************************************",
        "* Draws a line from (x0, y0) to (x1, y1).\n     *\n     * @param x0 the x-coordinate of the starting point\n     * @param y0 the y-coordinate of the starting point\n     * @param x1 the x-coordinate of the destination point\n     * @param y1 the y-coordinate of the destination point\n     * @throws IllegalArgumentException if any coordinate is either NaN or infinite",
        "* Draws one pixel at (x, y).\n     *\n     * @param x the x-coordinate of the pixel\n     * @param y the y-coordinate of the pixel\n     * @throws IllegalArgumentException if {@code x} or {@code y} is either NaN or infinite",
        "* Draws a point at (x, y).\n     *\n     * @param x the x-coordinate of the point\n     * @param y the y-coordinate of the point\n     * @throws IllegalArgumentException if either {@code x} or {@code y} is either NaN or infinite",
        "* Draws a circle of the specified radius, centered at (<em>x</em>, <em>y</em>).\n     *\n     * @param  x the x-coordinate of the center of the circle\n     * @param  y the y-coordinate of the center of the circle\n     * @param  radius the radius of the circle\n     * @throws IllegalArgumentException if {@code radius} is negative\n     * @throws IllegalArgumentException if any argument is either NaN or infinite",
        "* Draws a filled circle of the specified radius, centered at (<em>x</em>, <em>y</em>).\n     *\n     * @param  x the x-coordinate of the center of the circle\n     * @param  y the y-coordinate of the center of the circle\n     * @param  radius the radius of the circle\n     * @throws IllegalArgumentException if {@code radius} is negative\n     * @throws IllegalArgumentException if any argument is either NaN or infinite",
        "* Draws an ellipse with the specified semimajor and semiminor axes,\n     * centered at (<em>x</em>, <em>y</em>).\n     *\n     * @param  x the <em>x</em>-coordinate of the center of the ellipse\n     * @param  y the <em>y</em>-coordinate of the center of the ellipse\n     * @param  semiMajorAxis is the semimajor axis of the ellipse\n     * @param  semiMinorAxis is the semiminor axis of the ellipse\n     * @throws IllegalArgumentException if either {@code semiMajorAxis}\n     *         or {@code semiMinorAxis} is negative\n     * @throws IllegalArgumentException if any argument is either NaN or infinite",
        "* Draws a filled ellipse with the specified semimajor and semiminor axes,\n     * centered at (<em>x</em>, <em>y</em>).\n     *\n     * @param  x the <em>x</em>-coordinate of the center of the ellipse\n     * @param  y the <em>y</em>-coordinate of the center of the ellipse\n     * @param  semiMajorAxis is the semimajor axis of the ellipse\n     * @param  semiMinorAxis is the semiminor axis of the ellipse\n     * @throws IllegalArgumentException if either {@code semiMajorAxis}\n     *         or {@code semiMinorAxis} is negative\n     * @throws IllegalArgumentException if any argument is either NaN or infinite",
        "* Draws a circular arc of the specified radius,\n     * centered at (<em>x</em>, <em>y</em>), from angle1 to angle2 (in degrees).\n     *\n     * @param  x the <em>x</em>-coordinate of the center of the circle\n     * @param  y the <em>y</em>-coordinate of the center of the circle\n     * @param  radius the radius of the circle\n     * @param  angle1 the starting angle. 0 would mean an arc beginning at 3 o'clock.\n     * @param  angle2 the angle at the end of the arc. For example, if\n     *         you want a 90 degree arc, then angle2 should be angle1 + 90.\n     * @throws IllegalArgumentException if {@code radius} is negative\n     * @throws IllegalArgumentException if any argument is either NaN or infinite",
        "* Draws a square of the specified size, centered at (<em>x</em>, <em>y</em>).\n     *\n     * @param  x the <em>x</em>-coordinate of the center of the square\n     * @param  y the <em>y</em>-coordinate of the center of the square\n     * @param  halfLength one half the length of any side of the square\n     * @throws IllegalArgumentException if {@code halfLength} is negative\n     * @throws IllegalArgumentException if any argument is either NaN or infinite",
        "* Draws a square of the specified size, centered at (<em>x</em>, <em>y</em>).\n     *\n     * @param  x the <em>x</em>-coordinate of the center of the square\n     * @param  y the <em>y</em>-coordinate of the center of the square\n     * @param  halfLength one half the length of any side of the square\n     * @throws IllegalArgumentException if {@code halfLength} is negative\n     * @throws IllegalArgumentException if any argument is either NaN or infinite",
        "* Draws a rectangle of the specified size, centered at (<em>x</em>, <em>y</em>).\n     *\n     * @param  x the <em>x</em>-coordinate of the center of the rectangle\n     * @param  y the <em>y</em>-coordinate of the center of the rectangle\n     * @param  halfWidth one half the width of the rectangle\n     * @param  halfHeight one half the height of the rectangle\n     * @throws IllegalArgumentException if either {@code halfWidth} or {@code halfHeight} is negative\n     * @throws IllegalArgumentException if any argument is either NaN or infinite",
        "* Draws a filled rectangle of the specified size, centered at (<em>x</em>, <em>y</em>).\n     *\n     * @param  x the <em>x</em>-coordinate of the center of the rectangle\n     * @param  y the <em>y</em>-coordinate of the center of the rectangle\n     * @param  halfWidth one half the width of the rectangle\n     * @param  halfHeight one half the height of the rectangle\n     * @throws IllegalArgumentException if either {@code halfWidth} or {@code halfHeight} is negative\n     * @throws IllegalArgumentException if any argument is either NaN or infinite",
        "* Draws a polygon with the vertices \n     * (<em>x</em><sub>0</sub>, <em>y</em><sub>0</sub>),\n     * (<em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>), ...,\n     * (<em>x</em><sub><em>n</em>–1</sub>, <em>y</em><sub><em>n</em>–1</sub>).\n     *\n     * @param  x an array of all the <em>x</em>-coordinates of the polygon\n     * @param  y an array of all the <em>y</em>-coordinates of the polygon\n     * @throws IllegalArgumentException unless {@code x[]} and {@code y[]}\n     *         are of the same length\n     * @throws IllegalArgumentException if any coordinate is either NaN or infinite\n     * @throws IllegalArgumentException if either {@code x[]} or {@code y[]} is {@code null}",
        "* Draws a filled polygon with the vertices \n     * (<em>x</em><sub>0</sub>, <em>y</em><sub>0</sub>),\n     * (<em>x</em><sub>1</sub>, <em>y</em><sub>1</sub>), ...,\n     * (<em>x</em><sub><em>n</em>–1</sub>, <em>y</em><sub><em>n</em>–1</sub>).\n     *\n     * @param  x an array of all the <em>x</em>-coordinates of the polygon\n     * @param  y an array of all the <em>y</em>-coordinates of the polygon\n     * @throws IllegalArgumentException unless {@code x[]} and {@code y[]}\n     *         are of the same length\n     * @throws IllegalArgumentException if any coordinate is either NaN or infinite\n     * @throws IllegalArgumentException if either {@code x[]} or {@code y[]} is {@code null}",
        "*************************************************************************\n    *  Drawing images.\n    **************************************************************************",
        "not a url",
        "* Draws the specified image centered at (<em>x</em>, <em>y</em>).\n     * The supported image formats are JPEG, PNG, and GIF.\n     * As an optimization, the picture is cached, so there is no performance\n     * penalty for redrawing the same image multiple times (e.g., in an animation).\n     * However, if you change the picture file after drawing it, subsequent\n     * calls will draw the original picture.\n     *\n     * @param  x the center <em>x</em>-coordinate of the image\n     * @param  y the center <em>y</em>-coordinate of the image\n     * @param  filename the name of the image/picture, e.g., \"ball.gif\"\n     * @throws IllegalArgumentException if the image filename is invalid\n     * @throws IllegalArgumentException if either {@code x} or {@code y} is either NaN or infinite",
        "* Draws the specified image centered at (<em>x</em>, <em>y</em>),\n     * rotated given number of degrees.\n     * The supported image formats are JPEG, PNG, and GIF.\n     *\n     * @param  x the center <em>x</em>-coordinate of the image\n     * @param  y the center <em>y</em>-coordinate of the image\n     * @param  filename the name of the image/picture, e.g., \"ball.gif\"\n     * @param  degrees is the number of degrees to rotate counterclockwise\n     * @throws IllegalArgumentException if the image filename is invalid\n     * @throws IllegalArgumentException if {@code x}, {@code y}, {@code degrees} is NaN or infinite\n     * @throws IllegalArgumentException if {@code filename} is {@code null}",
        "* Draws the specified image centered at (<em>x</em>, <em>y</em>),\n     * rescaled to the specified bounding box.\n     * The supported image formats are JPEG, PNG, and GIF.\n     *\n     * @param  x the center <em>x</em>-coordinate of the image\n     * @param  y the center <em>y</em>-coordinate of the image\n     * @param  filename the name of the image/picture, e.g., \"ball.gif\"\n     * @param  scaledWidth the width of the scaled image (in screen coordinates)\n     * @param  scaledHeight the height of the scaled image (in screen coordinates)\n     * @throws IllegalArgumentException if either {@code scaledWidth}\n     *         or {@code scaledHeight} is negative\n     * @throws IllegalArgumentException if the image filename is invalid\n     * @throws IllegalArgumentException if {@code x} or {@code y} is either NaN or infinite\n     * @throws IllegalArgumentException if {@code filename} is {@code null}",
        "* Draws the specified image centered at (<em>x</em>, <em>y</em>), rotated\n     * given number of degrees, and rescaled to the specified bounding box.\n     * The supported image formats are JPEG, PNG, and GIF.\n     *\n     * @param  x the center <em>x</em>-coordinate of the image\n     * @param  y the center <em>y</em>-coordinate of the image\n     * @param  filename the name of the image/picture, e.g., \"ball.gif\"\n     * @param  scaledWidth the width of the scaled image (in screen coordinates)\n     * @param  scaledHeight the height of the scaled image (in screen coordinates)\n     * @param  degrees is the number of degrees to rotate counterclockwise\n     * @throws IllegalArgumentException if either {@code scaledWidth}\n     *         or {@code scaledHeight} is negative\n     * @throws IllegalArgumentException if the image filename is invalid",
        "*************************************************************************\n    *  Drawing text.\n    **************************************************************************",
        "* Writes the given text string in the current font, centered at (<em>x</em>, <em>y</em>).\n     *\n     * @param  x the center <em>x</em>-coordinate of the text\n     * @param  y the center <em>y</em>-coordinate of the text\n     * @param  text the text to write\n     * @throws IllegalArgumentException if {@code text} is {@code null}\n     * @throws IllegalArgumentException if {@code x} or {@code y} is either NaN or infinite",
        "* Writes the given text string in the current font, centered at (<em>x</em>, <em>y</em>) and\n     * rotated by the specified number of degrees.\n     * @param  x the center <em>x</em>-coordinate of the text\n     * @param  y the center <em>y</em>-coordinate of the text\n     * @param  text the text to write\n     * @param  degrees is the number of degrees to rotate counterclockwise\n     * @throws IllegalArgumentException if {@code text} is {@code null}\n     * @throws IllegalArgumentException if {@code x}, {@code y}, or {@code degrees} is either NaN or infinite",
        "* Writes the given text string in the current font, left-aligned at (<em>x</em>, <em>y</em>).\n     * @param  x the <em>x</em>-coordinate of the text\n     * @param  y the <em>y</em>-coordinate of the text\n     * @param  text the text\n     * @throws IllegalArgumentException if {@code text} is {@code null}\n     * @throws IllegalArgumentException if {@code x} or {@code y} is either NaN or infinite",
        "* Writes the given text string in the current font, right-aligned at (<em>x</em>, <em>y</em>).\n     *\n     * @param  x the <em>x</em>-coordinate of the text\n     * @param  y the <em>y</em>-coordinate of the text\n     * @param  text the text to write\n     * @throws IllegalArgumentException if {@code text} is {@code null}\n     * @throws IllegalArgumentException if {@code x} or {@code y} is either NaN or infinite",
        "* Copies the offscreen buffer to the onscreen buffer, pauses for t milliseconds\n     * and enables double buffering.\n     * @param t number of milliseconds\n     * @deprecated replaced by {@link #enableDoubleBuffering()}, {@link #show()}, and {@link #pause(int t)}",
        "* Pause for t milliseconds. This method is intended to support computer animations.\n     * @param t number of milliseconds",
        "* Copies offscreen buffer to onscreen buffer. There is no reason to call\n     * this method unless double buffering is enabled.",
        "* Enable double buffering. All subsequent calls to \n     * drawing methods such as {@code line()}, {@code circle()},\n     * and {@code square()} will be deferred until the next call\n     * to show(). Useful for animations.",
        "* Disable double buffering. All subsequent calls to \n     * drawing methods such as {@code line()}, {@code circle()},\n     * and {@code square()} will be displayed on screen when called.\n     * This is the default.",
        "* Saves the drawing to using the specified filename.\n     * The supported image formats are JPEG and PNG;\n     * the filename suffix must be {@code .jpg} or {@code .png}.\n     *\n     * @param  filename the name of the file with one of the required suffixes\n     * @throws IllegalArgumentException if {@code filename} is {@code null}",
        "* This method cannot be called directly.",
        "*************************************************************************\n    *  Event-based interactions.\n    **************************************************************************",
        "* Adds a {@link DrawListener} to listen to keyboard and mouse events.\n     *\n     * @param listener the {\\tt DrawListener} argument",
        "*************************************************************************\n    *  Mouse interactions.\n    **************************************************************************",
        "* Returns true if the mouse is being pressed.\n     *\n     * @return {@code true} if the mouse is being pressed;\n     *         {@code false} otherwise",
        "* Returns true if the mouse is being pressed.\n     *\n     * @return {@code true} if the mouse is being pressed;\n     *         {@code false} otherwise\n     * @deprecated replaced by {@link #isMousePressed()}",
        "* Returns the x-coordinate of the mouse.\n     * @return the x-coordinate of the mouse",
        "* Returns the y-coordinate of the mouse.\n     *\n     * @return the y-coordinate of the mouse",
        "* This method cannot be called directly.",
        "* This method cannot be called directly.",
        "* This method cannot be called directly.",
        "* This method cannot be called directly.",
        "* This method cannot be called directly.",
        "* This method cannot be called directly.",
        "* This method cannot be called directly.",
        "*************************************************************************\n    *  Keyboard interactions.\n    **************************************************************************",
        "* Returns true if the user has typed a key.\n     *\n     * @return {@code true} if the user has typed a key; {@code false} otherwise",
        "* The next key typed by the user.\n     *\n     * @return the next key typed by the user",
        "* Returns true if the keycode is being pressed.\n     * <p>\n     * This method takes as an argument the keycode (corresponding to a physical key).\n     * It can handle action keys (such as F1 and arrow keys) and modifier keys\n     * (such as shift and control).\n     * See {@link KeyEvent} for a description of key codes.\n     *\n     * @param  keycode the keycode to check\n     * @return {@code true} if {@code keycode} is currently being pressed;\n     *         {@code false} otherwise",
        "* This method cannot be called directly.",
        "* This method cannot be called directly.",
        "* This method cannot be called directly.",
        "*************************************************************************\n    *  For improved resolution on Mac Retina displays.\n    **************************************************************************",
        "* Gets the height of the icon.\n         *\n         * @return the height in pixels of this icon",
        "* Test client.\n     *\n     * @param args the command-line arguments"
    ],
    "functions": [
        "Draw",
        "Draw",
        "init",
        "setLocationOnScreen",
        "setDefaultCloseOperation",
        "setCanvasSize",
        "JMenuBar",
        "createMenuBar",
        "validate",
        "validateNonnegative",
        "validateNotNull",
        "setXscale",
        "setYscale",
        "setXscale",
        "setYscale",
        "scaleX",
        "scaleY",
        "factorX",
        "factorY",
        "userX",
        "userY",
        "clear",
        "clear",
        "getPenRadius",
        "setPenRadius",
        "setPenRadius",
        "Color",
        "getPenColor",
        "setPenColor",
        "setPenColor",
        "setPenColor",
        "xorOn",
        "xorOff",
        "JLabel",
        "getJLabel",
        "Font",
        "getFont",
        "setFont",
        "setFont",
        "line",
        "pixel",
        "point",
        "circle",
        "filledCircle",
        "ellipse",
        "filledEllipse",
        "arc",
        "square",
        "filledSquare",
        "rectangle",
        "filledRectangle",
        "polygon",
        "filledPolygon",
        "Image",
        "getImage",
        "picture",
        "picture",
        "picture",
        "picture",
        "text",
        "text",
        "textLeft",
        "textRight",
        "show",
        "pause",
        "show",
        "draw",
        "enableDoubleBuffering",
        "disableDoubleBuffering",
        "save",
        "actionPerformed",
        "addListener",
        "isMousePressed",
        "mousePressed",
        "mouseX",
        "mouseY",
        "mouseEntered",
        "mouseExited",
        "mousePressed",
        "mouseReleased",
        "mouseClicked",
        "mouseDragged",
        "mouseMoved",
        "hasNextKeyTyped",
        "nextKeyTyped",
        "isKeyPressed",
        "keyTyped",
        "keyPressed",
        "keyReleased",
        "RetinaImageIcon",
        "getIconWidth",
        "getIconHeight",
        "paintIcon",
        "main"
    ],
    "classes": [
        "Draw",
        "RetinaImageIcon"
    ]
}