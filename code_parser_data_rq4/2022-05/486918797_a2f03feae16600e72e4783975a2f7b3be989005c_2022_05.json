{
    "identifiers": [
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "package_DBR",
        "package_DBR",
        "myRound",
        "SelectPath_RT",
        "Delay_RT",
        "FO_RT",
        "FOPDT",
        "SOPDT",
        "FOPDT_cost",
        "SOPDT_cost",
        "Process",
        "Bode",
        "IPython",
        "display",
        "display",
        "clear_output",
        "MV",
        "Kp",
        "Tlead",
        "Tlag",
        "Ts",
        "PV",
        "PVInit",
        "method",
        "Tlag",
        "Ts",
        "Tlag",
        "len",
        "PV",
        "PV",
        "append",
        "PVInit",
        "method",
        "PV",
        "append",
        "K",
        "PV",
        "Kp",
        "K",
        "K",
        "Tlead",
        "Ts",
        "MV",
        "Tlead",
        "Ts",
        "MV",
        "method",
        "PV",
        "append",
        "K",
        "PV",
        "Kp",
        "K",
        "Tlead",
        "Ts",
        "MV",
        "Tlead",
        "Ts",
        "MV",
        "PV",
        "append",
        "K",
        "PV",
        "Kp",
        "K",
        "K",
        "Tlead",
        "Ts",
        "MV",
        "Tlead",
        "Ts",
        "MV",
        "PV",
        "append",
        "Kp",
        "MV",
        "SP",
        "PV",
        "Man",
        "MVMan",
        "MVFF",
        "Kc",
        "Ti",
        "Td",
        "alpha",
        "Ts",
        "MVMin",
        "MVMax",
        "MV",
        "MVP",
        "MVI",
        "MVD",
        "E",
        "ManFF",
        "PVInit",
        "method",
        "len",
        "PV",
        "E",
        "append",
        "SP",
        "PVInit",
        "E",
        "append",
        "SP",
        "PV",
        "Man",
        "MVP",
        "append",
        "Kc",
        "E",
        "len",
        "MVI",
        "MVI",
        "append",
        "Kc",
        "Ts",
        "Ti",
        "E",
        "MVI",
        "append",
        "MVI",
        "Kc",
        "Ts",
        "Ti",
        "E",
        "alpha",
        "Td",
        "len",
        "MVD",
        "len",
        "E",
        "MVD",
        "append",
        "Kc",
        "Td",
        "Tfd",
        "Ts",
        "E",
        "E",
        "len",
        "E",
        "MVD",
        "append",
        "MVD",
        "append",
        "Tfd",
        "Tfd",
        "Ts",
        "MVD",
        "Kc",
        "Td",
        "Tfd",
        "Ts",
        "E",
        "E",
        "MV",
        "append",
        "MVP",
        "MVI",
        "MVD",
        "MVI",
        "append",
        "MVP",
        "append",
        "MVD",
        "append",
        "len",
        "MVMan",
        "MV",
        "append",
        "MV",
        "append",
        "MVMan"
    ],
    "literals": [
        "'EBD'",
        "'EBD'",
        "'EFD'",
        "'EBD_EBD'"
    ],
    "variables": [
        "K",
        "Tfd"
    ],
    "comments": [
        "slide 130",
        "MV[k+1] is MV[-1] and MV[k] is MV[-2]",
        "elif method == 'TRAP':",
        "PV.append()",
        "--------------------------------------------------------------",
        "MV[k+1] is MV[-1] and MV[k] is MV[-2]",
        "proportional part",
        "integrating part",
        "derivating part"
    ],
    "docstrings": [
        "\"\"\"\n    Help on function LeadLag_RT in module package_DBR Advanced:\n        LeadLag RT(MV, Kp, Tlead, Tlag, Ts, PV, PVInit=0, method=\" EBD\")\n        \n        The function “LeadLag RT” needs to be included in a ”for or while loop”.\n        :MV: input vector\n        :Kp: process gain\n        :Tlead: lead time constant [s]\n        :Tlag: lag time constant [s]\n        :Ts:sampling period [s]\n        :Pv: output vector\n        :PVInit: (optional: default value is 8)\n        :method: discretisation method (optional: default value is \"EBD')\n                EBD: Euler Backward difference\n                EFD: Euler Forward difference\n                TRAP: Trapezoidal method\n        The function appends a value to the output vector \"Pv\".\n        The appended value is obtained from a recurrent equation that depends on the discretisation method.\n    \"\"\"",
        "\"\"\"\n    The function \"PID_RT\" needs to be included in a “for or while loop\"\n    :SP: (or SetPoint) vector\n    :PV: PV (or Process Value) vector\n    :Man: Man (or Manual controller mode) vector (True or False)\n    :MVMan: MVMan (or Manual value for MV) vector\n    :NVFF: NVFF (or Feedforward) vector\n    \n    :Kc: controller gain\n    :Ti: integral time constant [s]\n    :Td: derivative time constant [s]\n    :alpha: Tfd = alpha*Td where Tfd is the derivative filter time constant [s]\n    :Ts: sampling period [s]\n    :MVMlin: minimum value for MV (used for saturation and anti wind-up)\n    :MVMax: maximum value for MV (used for saturation and anti wind-up)\n    :Mv: MV (or Manipulated Value) vector\n    :MVP: MVP (or Propotional part of MV) vector\n    :MVI: MVE (or Integral part of MV) vector\n    :MVD: MVD (or Derivative part of MV) vector\n    :E: E (or control Error) vector\n    :ManFF: Activated FF in manual mode (optional: default boolean value is False)\n    :PVInit: Initial value for PV (optional: default value is @): used if PID_RT is ran first in the squence and no value of PV is available yet.\n    :method: discretisation method (optional: default value is \"EBD')\n        EBD-EBD: EBD for integral action and EBD for derivative action\n        EBD-TRAP: EBD for integral action and TRAP for derivative action\n        TRAP-EBD: TRAP for integral action and EBD for derivative action\n        TRAP-TRAP: TRAP for integral action and TRAP for derivative action\n \n    The function “PID_RT” appends new values to the vectors \"MV\", \"MVP\", \"MVI\", and \"MVD\".\n    The appended values are based on the PID algorithm, the controller mode, and feedforward.\n    Note that saturation of \"MV\" within the limits [MVMin MVMax] is implemented with anti wind-up.\n    \"\"\""
    ],
    "functions": [
        "LeadLag_RT",
        "PID_RT"
    ],
    "classes": []
}