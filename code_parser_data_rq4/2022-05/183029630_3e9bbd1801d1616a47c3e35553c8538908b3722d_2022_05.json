{
    "identifiers": [
        "logging",
        "pathlib",
        "datetime",
        "datetime",
        "timedelta",
        "ocs_ci",
        "ocs",
        "constants",
        "ocs_ci",
        "ocs",
        "exceptions",
        "CommandFailed",
        "UnsupportedWorkloadError",
        "ocs_ci",
        "utility",
        "utils",
        "ocsci_log_path",
        "ocs_ci",
        "ocs",
        "scale_noobaa_lib",
        "construct_obc_creation_yaml_bulk_for_kube_job",
        "check_all_obc_reached_bound_state_in_kube_job",
        "ocs_ci",
        "utility",
        "templating",
        "ocs_ci",
        "ocs",
        "scale_lib",
        "construct_pvc_creation_yaml_bulk_for_kube_job",
        "check_all_pvc_reached_bound_state_in_kube_job",
        "check_all_pod_reached_running_state_in_kube_job",
        "ocs_ci",
        "ocs",
        "resources",
        "objectconfigfile",
        "ObjectConfFile",
        "ocs_ci",
        "ocs",
        "pgsql",
        "Postgresql",
        "ocs_ci",
        "ocs",
        "couchbase",
        "CouchBase",
        "ocs_ci",
        "ocs",
        "cosbench",
        "Cosbench",
        "ocs_ci",
        "helpers",
        "helpers",
        "create_unique_resource_name",
        "concurrent",
        "futures",
        "ThreadPoolExecutor",
        "ocs_ci",
        "ocs",
        "resources",
        "pvc",
        "get_pvc_objs",
        "ocs_ci",
        "deployment",
        "deployment",
        "setup_persistent_monitoring",
        "ocs_ci",
        "ocs",
        "registry",
        "change_registry_backend_to_ocs",
        "check_if_registry_stack_exists",
        "ocs_ci",
        "utility",
        "deployment_openshift_logging",
        "install_logging",
        "ocs_ci",
        "ocs",
        "monitoring",
        "check_if_monitoring_stack_exists",
        "logging",
        "getLogger",
        "locals",
        "pathlib",
        "Path",
        "ocsci_log_path",
        "num_of_pvcs",
        "pvc_size",
        "log",
        "info",
        "construct_pvc_creation_yaml_bulk_for_kube_job",
        "no_of_pvc",
        "num_of_pvcs",
        "access_mode",
        "constants",
        "ACCESS_MODE_RWO",
        "sc_name",
        "constants",
        "CEPHBLOCKPOOL_SC",
        "pvc_size",
        "pvc_size",
        "all_pvc_dict_list",
        "append",
        "ceph_rbd_rwo_dict_list",
        "log",
        "info",
        "construct_pvc_creation_yaml_bulk_for_kube_job",
        "no_of_pvc",
        "num_of_pvcs",
        "access_mode",
        "constants",
        "ACCESS_MODE_RWX",
        "sc_name",
        "constants",
        "CEPHBLOCKPOOL_SC",
        "pvc_size",
        "pvc_size",
        "all_pvc_dict_list",
        "append",
        "ceph_rbd_rwx_dict_list",
        "log",
        "info",
        "construct_pvc_creation_yaml_bulk_for_kube_job",
        "no_of_pvc",
        "num_of_pvcs",
        "access_mode",
        "constants",
        "ACCESS_MODE_RWO",
        "sc_name",
        "constants",
        "CEPHFILESYSTEM_SC",
        "pvc_size",
        "pvc_size",
        "all_pvc_dict_list",
        "append",
        "cephfs_rwo_dict_list",
        "log",
        "info",
        "construct_pvc_creation_yaml_bulk_for_kube_job",
        "no_of_pvc",
        "num_of_pvcs",
        "access_mode",
        "constants",
        "ACCESS_MODE_RWX",
        "sc_name",
        "constants",
        "CEPHFILESYSTEM_SC",
        "pvc_size",
        "pvc_size",
        "all_pvc_dict_list",
        "append",
        "cephfs_rwx_dict_list",
        "all_pvc_dict_list",
        "obj_dict_list",
        "kube_job_name",
        "log",
        "info",
        "i",
        "len",
        "obj_dict_list",
        "ObjectConfFile",
        "name",
        "kube_job_name",
        "i",
        "obj_dict_list",
        "obj_dict_list",
        "i",
        "project",
        "tmp_path",
        "tmp_path",
        "kube_job_obj_list",
        "append",
        "kube_job_obj",
        "kube_job_obj_list",
        "kube_job_obj_list",
        "log",
        "info",
        "kube_job_obj",
        "kube_job_obj_list",
        "kube_job_obj",
        "create",
        "kube_job_obj",
        "resource_name",
        "log",
        "info",
        "resource_name",
        "kube_job_obj",
        "name",
        "kube_job_obj",
        "get",
        "get_kube_job_obj",
        "res_yaml_dict",
        "kube_job_obj_list",
        "pvc_count",
        "log",
        "info",
        "i",
        "len",
        "kube_job_obj_list",
        "pvc_count",
        "pvc_count",
        "len",
        "get_pvc_yaml_dict_from_kube_job_obj",
        "kube_job_obj_list",
        "i",
        "check_all_pvc_reached_bound_state_in_kube_job",
        "kube_job_obj",
        "kube_job_obj_list",
        "i",
        "no_of_pvc",
        "pvc_count",
        "pvc_bound_list_of_list",
        "append",
        "pvc_bound",
        "log",
        "info",
        "kube_job_obj_list",
        "i",
        "name",
        "len",
        "pvc_bound_list_of_list",
        "i",
        "item",
        "elem",
        "pvc_bound_list_of_list",
        "item",
        "elem",
        "log",
        "info",
        "len",
        "pvc_bound_list",
        "pvc_bound_list",
        "kube_job_obj_list",
        "log",
        "info",
        "kube_job_obj",
        "kube_job_obj_list",
        "kube_job_obj",
        "num_of_pvc",
        "pvc_size",
        "kube_job_name",
        "log",
        "info",
        "construct_stage_builder_bulk_pvc_creation_yaml",
        "num_of_pvcs",
        "num_of_pvc",
        "pvc_size",
        "pvc_size",
        "construct_stage_builder_kube_job",
        "obj_dict_list",
        "pvc_dict_list",
        "kube_job_name",
        "kube_job_name",
        "create_stage_builder_kube_job",
        "kube_job_obj_list",
        "pvc_job_file_list",
        "validate_pvc_in_kube_job_reached_bound_state",
        "kube_job_obj_list",
        "pvc_job_file_list",
        "pvc_count",
        "num_of_pvc",
        "pvc_bound_list",
        "pvc_job_file_list",
        "pvc_list",
        "log",
        "info",
        "get_pvc_objs",
        "pvc_names",
        "pvc_list",
        "pvc_obj",
        "pvc_objs",
        "pvc_obj",
        "backed_sc",
        "constants",
        "DEFAULT_STORAGECLASS_RBD",
        "templating",
        "load_yaml",
        "constants",
        "CSI_RBD_POD_YAML",
        "pvc_obj",
        "get_pvc_vol_mode",
        "constants",
        "RAW_BLOCK_DEVICE",
        "pod_dict",
        "get",
        "get",
        "get",
        "get",
        "pod_dict",
        "pod_dict",
        "temp_dict",
        "pvc_obj",
        "backed_sc",
        "constants",
        "DEFAULT_STORAGECLASS_CEPHFS",
        "templating",
        "load_yaml",
        "constants",
        "CSI_CEPHFS_POD_YAML",
        "create_unique_resource_name",
        "pod_dict",
        "pod_name",
        "pod_dict",
        "pod_dict",
        "pvc_obj",
        "name",
        "pods_dict_list",
        "append",
        "pod_dict",
        "pods_dict_list",
        "kube_job_obj",
        "pod_count",
        "timeout",
        "log",
        "info",
        "pod_count",
        "pod_count",
        "len",
        "get_resource_yaml_dict_from_kube_job_obj",
        "kube_job_obj",
        "resource_name",
        "check_all_pod_reached_running_state_in_kube_job",
        "kube_job_obj",
        "kube_job_obj",
        "no_of_pod",
        "pod_count",
        "timeout",
        "timeout",
        "log",
        "info",
        "len",
        "running_pods_list",
        "running_pods_list",
        "num_of_pvc",
        "pvc_size",
        "create_stagebuilder_all_pvc_types",
        "num_of_pvc",
        "num_of_pvc",
        "pvc_size",
        "pvc_size",
        "kube_job_name",
        "construct_stage_builder_bulk_pod_creation_yaml",
        "pvc_list",
        "pvc_bound_list",
        "construct_stage_builder_kube_job",
        "obj_dict_list",
        "pods_dict_list",
        "kube_job_name",
        "create_stage_builder_kube_job",
        "kube_job_obj_list",
        "pod_job_file_list",
        "validate_pods_in_kube_job_reached_running_state",
        "kube_job_obj",
        "pod_job_file_list",
        "pod_job_file_list",
        "pvc_job_file_list",
        "pod_pvc_job_file_list",
        "num_of_obcs",
        "sc_name",
        "constants",
        "NOOBAA_SC",
        "log",
        "info",
        "construct_obc_creation_yaml_bulk_for_kube_job",
        "no_of_obc",
        "num_of_obcs",
        "sc_name",
        "sc_name",
        "construct_stage_builder_kube_job",
        "obj_dict_list",
        "obc_dict_list",
        "kube_job_name",
        "create_stage_builder_kube_job",
        "kube_job_obj_list",
        "obc_job_file",
        "validate_obcs_in_kube_job_reached_running_state",
        "kube_job_obj",
        "obc_job_file",
        "num_of_obc",
        "num_of_obcs",
        "obc_job_file",
        "kube_job_obj",
        "num_of_obc",
        "log",
        "info",
        "num_of_obc",
        "num_of_obc",
        "len",
        "get_resource_yaml_dict_from_kube_job_obj",
        "kube_job_obj",
        "resource_name",
        "check_all_obc_reached_bound_state_in_kube_job",
        "kube_job_obj",
        "kube_job_obj",
        "no_of_obc",
        "num_of_obc",
        "log",
        "info",
        "len",
        "obc_bound_list",
        "obc_bound_list",
        "num_of_pvc",
        "num_of_obc",
        "pvc_size",
        "ignore_teardown",
        "create_stagebuilder_all_pvc_types",
        "num_of_pvc",
        "num_of_pvc",
        "pvc_size",
        "pvc_size",
        "create_stagebuilder_pods_with_all_pvc_types",
        "num_of_pvc",
        "num_of_pvc",
        "pvc_size",
        "pvc_size",
        "create_stagebuilder_obc",
        "num_of_obcs",
        "num_of_obc",
        "pvc_job_file_list",
        "pod_pvc_job_file_list",
        "obc_job_file",
        "ignore_teardown",
        "delete_stage_builder_kube_job",
        "kube_job_obj_list",
        "kube_job_file_list",
        "kube_job_file_list",
        "request",
        "workloads_list",
        "run_time",
        "run_in_bg",
        "delay",
        "workloads_list",
        "workloads_list",
        "run_time",
        "run_time",
        "run_in_bg",
        "run_in_bg",
        "delay",
        "delay",
        "log",
        "info",
        "workloads_list",
        "log",
        "info",
        "supported_app_workloads",
        "all",
        "item",
        "supported_app_workloads",
        "item",
        "workloads_list",
        "support_check",
        "UnsupportedWorkloadError",
        "log",
        "info",
        "datetime",
        "now",
        "timedelta",
        "minutes",
        "run_time",
        "datetime",
        "now",
        "end_time",
        "log",
        "info",
        "datetime",
        "now",
        "log",
        "info",
        "end_time",
        "log",
        "info",
        "cycle_count",
        "workload",
        "workloads_list",
        "workload",
        "Postgresql",
        "workloads",
        "append",
        "pgsql",
        "run_in_bg",
        "log",
        "info",
        "workload",
        "ThreadPoolExecutor",
        "max_workers",
        "executor",
        "submit",
        "pgsql",
        "pgsql_full",
        "threads",
        "append",
        "thread1",
        "log",
        "info",
        "workload",
        "pgsql",
        "pgsql_full",
        "pgsql",
        "cleanup",
        "workload",
        "CouchBase",
        "workloads",
        "append",
        "cb",
        "run_in_bg",
        "log",
        "info",
        "workload",
        "ThreadPoolExecutor",
        "max_workers",
        "executor1",
        "submit",
        "cb",
        "couchbase_full",
        "threads",
        "append",
        "thread2",
        "log",
        "info",
        "workload",
        "cb",
        "couchbase_full",
        "cb",
        "cleanup",
        "workload",
        "Cosbench",
        "workloads",
        "append",
        "cos",
        "run_in_bg",
        "log",
        "info",
        "workload",
        "ThreadPoolExecutor",
        "max_workers",
        "executor2",
        "submit",
        "cos",
        "cosbench_full",
        "threads",
        "append",
        "thread3",
        "log",
        "info",
        "workload",
        "cos",
        "cosbench_full",
        "cos",
        "cleanup",
        "run_in_bg",
        "t",
        "threads",
        "t",
        "result",
        "cleanup",
        "threads",
        "clear",
        "workloads",
        "clear",
        "log",
        "info",
        "cycle_count",
        "cycle_count",
        "log",
        "info",
        "delay",
        "workload",
        "workloads",
        "workload",
        "cleanup",
        "CommandFailed",
        "ef",
        "log",
        "info",
        "ef",
        "ef",
        "request",
        "addfinalizer",
        "cleanup",
        "factory",
        "workloads_list",
        "run_in_bg",
        "log",
        "info",
        "workloads_list",
        "log",
        "info",
        "supported_ocp_workloads",
        "all",
        "item",
        "supported_ocp_workloads",
        "item",
        "workloads_list",
        "support_check",
        "UnsupportedWorkloadError",
        "log",
        "info",
        "workload",
        "workloads_list",
        "workload",
        "check_if_monitoring_stack_exists",
        "run_in_bg",
        "log",
        "info",
        "workload",
        "ThreadPoolExecutor",
        "max_workers",
        "executor",
        "submit",
        "setup_persistent_monitoring",
        "threads",
        "append",
        "thread1",
        "log",
        "info",
        "workload",
        "setup_persistent_monitoring",
        "workload",
        "check_if_registry_stack_exists",
        "run_in_bg",
        "log",
        "info",
        "workload",
        "ThreadPoolExecutor",
        "max_workers",
        "executor2",
        "submit",
        "change_registry_backend_to_ocs",
        "threads",
        "append",
        "thread2",
        "log",
        "info",
        "workload",
        "change_registry_backend_to_ocs",
        "workload",
        "run_in_bg",
        "log",
        "info",
        "workload",
        "ThreadPoolExecutor",
        "max_workers",
        "executor3",
        "submit",
        "install_logging",
        "threads",
        "append",
        "thread3",
        "log",
        "info",
        "workload",
        "install_logging",
        "run_in_bg",
        "t",
        "threads",
        "t",
        "result"
    ],
    "literals": [
        "\"pgsql\"",
        "\"couchbase\"",
        "\"cosbench\"",
        "\"logging\"",
        "\"monitoring\"",
        "\"registry\"",
        "\"Constructing bulk pvc creation yaml for ceph-rbd with access mode RWO\"",
        "\"Constructing bulk pvc creation yaml for ceph-rbd with access mode RWX\"",
        "\"Constructing bulk pvc creation yaml for cephfs with access mode RWO\"",
        "\"Constructing bulk pvc creation yaml for cephfs with access mode RWX\"",
        "\"job_profile\"",
        "\"Constructing kube jobs ...\"",
        "f\"{kube_job_name}-{i}\"",
        "\"Creating kube jobs ...\"",
        "\"PVC\"",
        "f\"Get {resource_name} yaml dict from the kube job object: {kube_job_obj.name}\"",
        "\"items\"",
        "\"validate that all the pvcs in the kube job list reached BOUND state\"",
        "f\"Kube job : {kube_job_obj_list[i].name} -> {len(pvc_bound_list_of_list[i])} PVCs in BOUND state\"",
        "f\"All Kube jobs -> {len(pvc_bound_list)} PVCs in BOUND state\"",
        "\"Deleting stage builder kube jobs ...\"",
        "\"all_pvc_job_profile\"",
        "\"Creating stagebuilder pods with all pvc types and access modes\"",
        "\"Constructing bulk pod creation yaml for the list of PVCs \"",
        "\"Block\"",
        "\"devicePath\"",
        "\"name\"",
        "\"spec\"",
        "\"containers\"",
        "\"volumeMounts\"",
        "\"name\"",
        "\"spec\"",
        "\"containers\"",
        "\"volumeMounts\"",
        "\"spec\"",
        "\"containers\"",
        "\"volumeDevices\"",
        "\"test\"",
        "\"pod\"",
        "\"metadata\"",
        "\"name\"",
        "\"metadata\"",
        "\"namespace\"",
        "\"spec\"",
        "\"volumes\"",
        "\"persistentVolumeClaim\"",
        "\"claimName\"",
        "\"validate that all the pods in the kube job list reached RUNNING state\"",
        "\"POD\"",
        "f\"Total number of PODs in Running state: {len(running_pods_list)}\"",
        "\"all_pvc_for_pod_attach_job_profile\"",
        "\"all_pods_job_profile\"",
        "\"Creating stagebuilder OBCs\"",
        "\"obc_job_profile\"",
        "\"validate that all the OBCs in the kube job list reached BOUND state\"",
        "\"OBC\"",
        "f\"Number of OBCs in Bound state {len(obc_bound_list)}\"",
        "f\"workloads_list: {workloads_list}\"",
        "f\"supported app workloads list: {supported_app_workloads}\"",
        "\"Found Unsupported app workloads list\"",
        "\"APP Workloads support check is Successful\"",
        "f\"Current time is {datetime.now()}\"",
        "f\"End time is {end_time}\"",
        "f\"##############[STARTING CYCLE:{cycle_count}]####################\"",
        "\"pgsql\"",
        "f\"Starting {workload} workload in background\"",
        "f\"Starting {workload} workload in foreground\"",
        "\"couchbase\"",
        "f\"Starting {workload} workload in background\"",
        "f\"Starting {workload} workload in foreground\"",
        "\"cosbench\"",
        "f\"Starting {workload} workload in background\"",
        "f\"Starting {workload} workload in foreground\"",
        "f\"##############[COMPLETED CYCLE:{cycle_count}]####################\"",
        "f\"###########[SLEEPING FOR {delay} SECONDS BEFORE STARTING NEXT CYCLE]###########\"",
        "\"Workload already cleaned\"",
        "\"does not exist on \"",
        "f\"workloads_list: {workloads_list}\"",
        "f\"supported ocp workloads list: {supported_ocp_workloads}\"",
        "\"Found Unsupported ocp workloads list\"",
        "\"OCP Workloads support check is Successful\"",
        "\"monitoring\"",
        "f\"Starting {workload} workload in background\"",
        "f\"Starting {workload} workload in foreground\"",
        "\"registry\"",
        "f\"Starting {workload} workload in background\"",
        "f\"Starting {workload} workload in foreground\"",
        "\"logging\"",
        "f\"Starting {workload} workload in background\"",
        "f\"Starting {workload} workload in foreground\""
    ],
    "variables": [
        "log",
        "supported_app_workloads",
        "supported_ocp_workloads",
        "lcl",
        "tmp_path",
        "pvc_size",
        "pvc_count",
        "pod_count",
        "num_of_obcs",
        "all_pvc_dict_list",
        "ceph_rbd_rwo_dict_list",
        "ceph_rbd_rwx_dict_list",
        "cephfs_rwo_dict_list",
        "cephfs_rwx_dict_list",
        "kube_job_obj_list",
        "kube_job_obj",
        "get_kube_job_obj",
        "res_yaml_dict",
        "pvc_bound_list_of_list",
        "pvc_count",
        "pvc_bound",
        "pvc_bound_list",
        "pvc_dict_list",
        "pvc_job_file_list",
        "pvc_bound_list",
        "pods_dict_list",
        "pvc_objs",
        "pod_dict",
        "temp_dict",
        "pod_dict",
        "pod_name",
        "pod_count",
        "running_pods_list",
        "pvc_bound_list",
        "pvc_job_file_list",
        "pods_dict_list",
        "pod_job_file_list",
        "pod_pvc_job_file_list",
        "obc_dict_list",
        "obc_job_file",
        "num_of_obc",
        "obc_bound_list",
        "_",
        "pvc_job_file_list",
        "pod_pvc_job_file_list",
        "obc_job_file",
        "kube_job_file_list",
        "threads",
        "workloads",
        "support_check",
        "cycle_count",
        "end_time",
        "pgsql",
        "executor",
        "thread1",
        "cb",
        "executor1",
        "thread2",
        "cos",
        "executor2",
        "thread3",
        "threads",
        "support_check",
        "executor",
        "thread1",
        "executor2",
        "thread2",
        "executor3",
        "thread3"
    ],
    "comments": [
        "Construct bulk pvc creation yaml for ceph-rbd with access mode RWO",
        "Construct bulk pvc creation yaml for ceph-rbd with access mode RWX",
        "Construct bulk pvc creation yaml for cephfs with access mode RWO",
        "Construct bulk pvc creation yaml for cephfs with access mode RWX",
        "Construct kube object config file for each kube object in the list",
        "Create kube jobs",
        "Delete stage builder kube jobs",
        "Construct bulk PVC creation yaml for kube job",
        "Construct kube job with the pvc dict list",
        "Create stage builder for PVC kube job",
        "Validate PVCs in kube job reached BOUND state",
        "Get pvc objs from namespace",
        "Create stage builder PVCs of all supported types and access modes",
        "Construct bulk POD creation yaml for kube job",
        "Construct kube job with the pods dict list",
        "Create stage builder for POD kube job",
        "Validate PODs in kube job reached RUNNING state",
        "Construct bulk OBC creation yaml for kube job",
        "Construct kube job with the OBCs dict list",
        "Create stage builder for OBC kube job",
        "Validate OBCs in kube job reached BOUND state",
        "Check all the OBCs to reach Bound state",
        "Create bulk PVCs of all types",
        "Create bulk PVCs of all types and attach each PVC to a Pod",
        "Create bulk OBCs",
        "For longevity Stage-0 we would want these resources to be keep running forever",
        "Hence, ignore deletion of created resources"
    ],
    "docstrings": [
        "\"\"\"\n    This class consists of the library functions and params required for Longevity testing\n    \"\"\"",
        "\"\"\"\n        Initializer function\n        \"\"\"",
        "\"\"\"\n        This function constructs pvc.yamls to create bulk of pvc's using kube_jobs.\n        It constructs yamls with the specified number of PVCs of each supported\n        type and access mode.\n\n        Eg: num_of_pvcs = 30\n        The function creates a total of 120 PVCs of below types and access modes\n        RBD-Filesystemvolume  -> 30 RWO PVCs\n        CEPHFS                -> 30 RWO PVCs, 30 RWX PVCs\n        RBD-Block             -> 30 RWX PVCs\n\n        Args:\n            num_of_pvcs(int): Bulk PVC count\n            pvc_size (str): size of all pvcs to be created with Gi suffix (e.g. 10Gi).\n            If None, random size pvc will be created\n\n        Returns:\n             all_pvc_dict_list (list): List of all PVC.yaml dicts\n\n        \"\"\"",
        "\"\"\"\n        This function constructs kube object config file for the kube object\n\n        Args:\n            obj_dict_list (list): List of dictionaries with kube objects,\n            the return value of construct_stage_builder_bulk_pvc_creation_yaml()\n            namespace (str): Namespace where the object has to be deployed\n            name (str): Name of this object config file\n\n        Returns:\n             pvc_dict_list (list): List of all PVC.yaml dicts\n\n        \"\"\"",
        "\"\"\"\n        Create kube jobs\n\n        Args:\n            kube_job_list (list): List of kube jobs\n            namespace (str): Namespace where the job has to be created\n\n        \"\"\"",
        "\"\"\"\n        Get the resource (PVC/POD) yaml dict from the kube job object\n\n        Args:\n            kube_job_obj (obj): Kube job object\n            namespace (str): Namespace where the job is created\n\n        Returns:\n            res_yaml_dict (list): List of all resource yaml dicts\n\n        \"\"\"",
        "\"\"\"\n        Validate PVCs in the kube job list reached BOUND state\n\n        Args:\n            kube_job_obj_list (list): List of Kube job objects\n            namespace (str): Namespace where the Kube job/PVCs are created\n            pvc_count (int): Bulk PVC count; If not specified the count will be\n            fetched from the kube job pvc yaml dict\n\n        Returns:\n            pvc_bound_list (list): List of all PVCs in Bound state\n\n        Raises:\n        AssertionError: If not all PVCs reached to Bound state\n\n        \"\"\"",
        "\"\"\"\n        Delete the stage builder kube jobs\n\n        Args:\n            kube_job_obj_list (list): List of kube jobs to delete\n            namespace (str): Namespace where the job is created\n\n        \"\"\"",
        "\"\"\"\n        Create stagebuilder PVCs with all supported PVC types and access modes\n\n        Args:\n            num_of_pvc(int): Bulk PVC count\n            namespace (str): Namespace where the Kube job/PODs are to be created\n            pvc_size (str): size of all pvcs to be created with Gi suffix (e.g. 10Gi).\n            If None, random size pvc will be created\n\n        Returns:\n            pvc_bound_list (list): List of all PVCs in Bound state\n            pvc_job_file_list (list): List of all PVC.yaml dicts\n\n        Raises:\n        AssertionError: If not all PVCs reached Bound state\n\n        \"\"\"",
        "\"\"\"\n        This function constructs bulks pod.yamls to create bulk pods using kube_jobs.\n\n        Args:\n            pvc_list (list): List of PVCs\n            namespace (str): Namespace where the resource has to be created\n\n        Returns:\n            pods_dict_list (list): List of all Pod.yaml dict list\n\n        \"\"\"",
        "\"\"\"\n        Validate PODs in the kube job list reached RUNNING state\n\n        Args:\n            kube_job_obj_list (list): List of Kube job objects\n            namespace (str): Namespace where the Kube job/PVCs are created\n            pod_count (int): Bulk PODs count; If not specified the count will be\n            fetched from the kube job pod yaml dict\n\n        Returns:\n            running_pods_list (list): List of all PODs in RUNNING state\n\n        Raises:\n        AssertionError: If not all PODs reached to Running state\n\n        \"\"\"",
        "\"\"\"\n        Create stagebuilder pods with all supported PVC types and access modes\n\n        It first constructs bulk pvc.yamls with the specified number of PVCs of each\n        supported type, access modes and then creates bulk pvc's using the kube_jobs.\n        Once all the PVCs in the kube_jobs reaches BOUND state it then constructs bulk\n        pod.yamls for each of these PVCs using kube_job.\n\n        Eg: num_of_pvc = 30\n        The function creates a total of 120 PVCs of below types and access modes\n        RBD-Filesystemvolume  -> 30 RWO PVCs\n        CEPHFS                -> 30 RWO PVCs, 30 RWX PVCs\n        RBD-Block             -> 30 RWX PVCs\n        and then creates pods for each of these PVCs. So, it will create 150 PODs\n\n        Args:\n            num_of_pvc(int): Bulk PVC count\n            namespace (str): Namespace where the Kube job/PVCs/PODs are to be created\n            pvc_size (str): size of all pvcs to be created with Gi suffix (e.g. 10Gi).\n            If None, random size pvc will be created\n\n        Returns:\n             pod_pvc_job_file_list (list): List of all POD.yaml and PVC.yaml dicts\n\n        \"\"\"",
        "\"\"\"\n        Create stagebuilder OBC\n\n        It first constructs bulk obc.yamls with the specified number of OBCs and\n        then creates bulk obc's using the kube_jobs.\n\n        Args:\n            namespace(str): Namespace uses to create bulk of obc\n            sc_name (str): storage class name using for obc creation; By default uses\n            Noobaa storage class 'openshift-storage.noobaa.io'\n            num_of_obcs (str): Bulk obc count\n\n        Returns:\n             obc_job_file (list): List of all OBC.yaml dicts\n\n        \"\"\"",
        "\"\"\"\n        Validate that OBCs in the kube job list reached BOUND state\n\n        Args:\n            kube_job_obj (obj): Kube Job Object\n            namespace (str): Namespace of OBC's created\n            num_of_obc (int): Bulk OBCs count; If not specified the count will be\n            fetched from the kube job obc yaml dict\n\n        Returns:\n        obc_bound_list (list): List of all OBCs which is in Bound state.\n\n        Raises:\n        AssertionError: If not all OBC reached to Bound state\n\n        \"\"\"",
        "\"\"\"\n        This function creates the initial soft configuration required to start\n        longevity testing\n\n        Args:\n            num_of_pvc (int): Bulk PVC count\n            num_of_obc (int): Bulk OBC count\n            namespace (str): Namespace where the Kube job/PVCs/PODsOBCs are to be created\n            pvc_size (str): size of all pvcs to be created with Gi suffix (e.g. 10Gi).\n            If None, random size pvc will be created\n\n        Returns:\n             kube_job_file_list (list): List of all PVC, POD, OBC yaml dicts\n\n        \"\"\"",
        "\"\"\"\n    This function reads the list of app workloads to run and\n    starts running those iterating over the workload in the list for a\n    specified duration\n\n    Usage:\n    start_app_workload(workloads_list=['pgsql', 'couchbase', 'cosbench'], run_time=60,\n    run_in_bg=True)\n\n    Args:\n        workloads_list (list): The list of app workloads to run\n        run_time (int): The amount of time the workloads should run (in minutes)\n        run_in_bg (bool): Runs the workload in background starting a thread\n        delay (int): Delay in seconds before starting the next cycle\n\n    Raise:\n        UnsupportedWorkloadError: When the workload is not found in the supported_app_workloads list\n\n    \"\"\"",
        "\"\"\"\n    This function reads the list of OCP workloads to run and\n     starts running those iterating over the elements in the list.\n\n     Usage:\n     start_ocp_workload(workloads_list=['logging','registry'], run_in_bg=True)\n\n     Args:\n         workloads_list (list): The list of ocp workloads to run\n         run_in_bg (bool): Runs the workload in background starting a thread\n\n    Raise:\n        UnsupportedWorkloadError: When the workload is not found in the supported_ocp_workloads list\n\n    \"\"\""
    ],
    "functions": [
        "construct_stage_builder_bulk_pvc_creation_yaml",
        "construct_stage_builder_kube_job",
        "create_stage_builder_kube_job",
        "get_resource_yaml_dict_from_kube_job_obj",
        "validate_pvc_in_kube_job_reached_bound_state",
        "delete_stage_builder_kube_job",
        "create_stagebuilder_all_pvc_types",
        "construct_stage_builder_bulk_pod_creation_yaml",
        "validate_pods_in_kube_job_reached_running_state",
        "create_stagebuilder_pods_with_all_pvc_types",
        "create_stagebuilder_obc",
        "validate_obcs_in_kube_job_reached_running_state",
        "stage_0",
        "start_app_workload",
        "factory",
        "cleanup",
        "start_ocp_workload"
    ],
    "classes": [
        "Longevity"
    ]
}