{
    "identifiers": [
        "os",
        "azure",
        "cognitiveservices",
        "vision",
        "face",
        "FaceClient",
        "msrest",
        "authentication",
        "CognitiveServicesCredentials",
        "mysql",
        "connector",
        "mysql",
        "connector",
        "dotenv",
        "load_dotenv",
        "load_dotenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "os",
        "getenv",
        "FaceClient",
        "ENDPOINT",
        "CognitiveServicesCredentials",
        "KEY",
        "image_path",
        "open",
        "image_path",
        "face_client",
        "face",
        "detect_with_stream",
        "image",
        "detection_model",
        "recognition_model",
        "return_face_attributes",
        "e",
        "e",
        "face",
        "faces",
        "face_ids",
        "append",
        "face",
        "face_id",
        "face_client",
        "face",
        "identify",
        "face_ids",
        "PERSON_GROUP_ID",
        "e",
        "e",
        "format",
        "os",
        "path",
        "basename",
        "image",
        "name",
        "results",
        "format",
        "os",
        "path",
        "basename",
        "image",
        "name",
        "person",
        "results",
        "len",
        "person",
        "candidates",
        "format",
        "person",
        "face_id",
        "os",
        "path",
        "basename",
        "image",
        "name",
        "person",
        "candidates",
        "confidence",
        "person",
        "candidates",
        "person_id",
        "person_id"
    ],
    "literals": [
        "'ENDPOINT'",
        "'KEY'",
        "'PERSON_GROUP_ID'",
        "'r+b'",
        "'detection_03'",
        "'recognition_03'",
        "'qualityForRecognition'",
        "f\"Exception occured: {e}\"",
        "f\"Exception occured: {e}\"",
        "'Identifying faces in {}'",
        "'No person identified in the person group for faces from {}.'",
        "'Person for face ID {} is identified in {} with a confidence of {}.'"
    ],
    "variables": [
        "ENDPOINT",
        "KEY",
        "PERSON_GROUP_ID",
        "face_client",
        "image",
        "faces",
        "face_ids",
        "results",
        "person_id"
    ],
    "comments": [
        "Get credentials from environment variables",
        "Create an authenticated face client",
        "Open image for face recognition",
        "Detect all faces in the picture",
        "API Exception Error",
        "Get face ids for faces detected",
        "Identify detected faces",
        "If no person recognized from picture",
        "For all faces identified",
        "if detected face has atleast 1 possible candidate",
        "Get topmost confidence score",
        "get person ID for detected face"
    ],
    "docstrings": [
        "\"\"\"\"Identify people present in picture specified by image path and return person Id if identification successful\n\n        Args:\n            image_path: a path to image containing faces to be recognized\n        \n        Returns:\n            A string containing person Id if face recognized. An empty string otherwise.\n    \"\"\""
    ],
    "functions": [
        "identify"
    ],
    "classes": []
}