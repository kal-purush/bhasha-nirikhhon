{
    "identifiers": [
        "uk",
        "gov",
        "gchq",
        "palisade",
        "service",
        "topicoffset",
        "service",
        "org",
        "apache",
        "kafka",
        "clients",
        "admin",
        "AdminClient",
        "org",
        "apache",
        "kafka",
        "clients",
        "admin",
        "ConsumerGroupDescription",
        "org",
        "apache",
        "kafka",
        "common",
        "ConsumerGroupState",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "org",
        "springframework",
        "beans",
        "factory",
        "annotation",
        "Value",
        "org",
        "springframework",
        "boot",
        "actuate",
        "autoconfigure",
        "health",
        "ConditionalOnEnabledHealthIndicator",
        "org",
        "springframework",
        "boot",
        "actuate",
        "health",
        "Health",
        "org",
        "springframework",
        "boot",
        "actuate",
        "health",
        "HealthIndicator",
        "org",
        "springframework",
        "stereotype",
        "Component",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "ExecutionException",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "java",
        "util",
        "concurrent",
        "TimeoutException",
        "Component",
        "ConditionalOnEnabledHealthIndicator",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "groupId",
        "adminClient",
        "Value",
        "groupId",
        "adminClient",
        "groupId",
        "groupId",
        "adminClient",
        "adminClient",
        "Override",
        "performCheck",
        "Health",
        "up",
        "withDetail",
        "groupId",
        "build",
        "Health",
        "down",
        "withDetail",
        "groupId",
        "build",
        "groupDescriptionMap",
        "adminClient",
        "describeConsumerGroups",
        "Collections",
        "singletonList",
        "groupId",
        "all",
        "get",
        "TimeUnit",
        "SECONDS",
        "consumerGroupDescription",
        "groupDescriptionMap",
        "get",
        "groupId",
        "LOGGER",
        "debug",
        "groupId",
        "consumerGroupDescription",
        "state",
        "consumerGroupDescription",
        "state",
        "ConsumerGroupState",
        "STABLE",
        "assignedGroupPartition",
        "consumerGroupDescription",
        "members",
        "stream",
        "noneMatch",
        "member",
        "member",
        "assignment",
        "member",
        "assignment",
        "topicPartitions",
        "isEmpty",
        "assignedGroupPartition",
        "LOGGER",
        "error",
        "assignedGroupPartition",
        "e",
        "LOGGER",
        "warn",
        "e",
        "currentThread",
        "interrupt",
        "e",
        "LOGGER",
        "warn",
        "e"
    ],
    "literals": [
        "\"kafka\"",
        "\"kafka\"",
        "\"${akka.kafka.consumer.kafka-clients.group.id}\"",
        "\"group\"",
        "\"group\"",
        "\"Kafka consumer group ({}) state: {}\"",
        "\"Failed to find kafka topic-partition assignments\"",
        "\"Await on future interrupted\"",
        "\"Timeout connecting to kafka\""
    ],
    "variables": [
        "groupId",
        "adminClient"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright 2018-2021 Crown Copyright\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Kafka health indicator. Check that the consumer group can be accessed and is registered with the cluster,\n * if not mark the service as unhealthy.",
        "* Requires the AdminClient to interact with Kafka\n     *\n     * @param groupId     of the cluster\n     * @param adminClient of the cluster",
        "* Health endpoint\n     *\n     * @return the {@code Health} object"
    ],
    "functions": [
        "KafkaHealthIndicator",
        "Health",
        "health",
        "performCheck"
    ],
    "classes": [
        "KafkaHealthIndicator"
    ]
}