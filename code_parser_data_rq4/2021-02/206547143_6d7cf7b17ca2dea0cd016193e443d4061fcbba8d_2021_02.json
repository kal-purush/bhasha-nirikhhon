{
    "identifiers": [
        "io",
        "aiven",
        "kafka",
        "connect",
        "transforms",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "StringJoiner",
        "org",
        "apache",
        "kafka",
        "common",
        "config",
        "ConfigDef",
        "org",
        "apache",
        "kafka",
        "connect",
        "connector",
        "ConnectRecord",
        "org",
        "apache",
        "kafka",
        "connect",
        "data",
        "Schema",
        "org",
        "apache",
        "kafka",
        "connect",
        "data",
        "SchemaAndValue",
        "org",
        "apache",
        "kafka",
        "connect",
        "data",
        "SchemaBuilder",
        "org",
        "apache",
        "kafka",
        "connect",
        "data",
        "Struct",
        "org",
        "apache",
        "kafka",
        "connect",
        "errors",
        "DataException",
        "org",
        "apache",
        "kafka",
        "connect",
        "transforms",
        "Transformation",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "config",
        "log",
        "LoggerFactory",
        "getLogger",
        "record",
        "record",
        "newSchema",
        "newValue",
        "Override",
        "ConcatFieldsConfig",
        "config",
        "Override",
        "configs",
        "config",
        "configs",
        "Override",
        "record",
        "schemaAndValue",
        "getSchemaAndValue",
        "record",
        "newSchema",
        "SchemaBuilder",
        "schemaAndValue",
        "value",
        "dataPlace",
        "record",
        "newRecord",
        "schemaAndValue",
        "value",
        "schemaAndValue",
        "value",
        "outputValue",
        "config",
        "delimiter",
        "schemaAndValue",
        "schema",
        "schemaAndValue",
        "schema",
        "fields",
        "forEach",
        "field",
        "newSchema",
        "field",
        "field",
        "name",
        "field",
        "schema",
        "schema",
        "fields",
        "forEach",
        "field",
        "newSchema",
        "field",
        "field",
        "name",
        "field",
        "schema",
        "newSchema",
        "field",
        "config",
        "outputFieldName",
        "Schema",
        "OPTIONAL_STRING_SCHEMA",
        "newStruct",
        "newSchema",
        "build",
        "schema",
        "fields",
        "forEach",
        "field",
        "newStruct",
        "put",
        "field",
        "name",
        "get",
        "field",
        "config",
        "fieldNames",
        "forEach",
        "field",
        "get",
        "field",
        "outputValue",
        "add",
        "config",
        "fieldReplaceMissing",
        "outputValue",
        "add",
        "get",
        "field",
        "toString",
        "e",
        "log",
        "debug",
        "field",
        "config",
        "fieldReplaceMissing",
        "outputValue",
        "add",
        "config",
        "fieldReplaceMissing",
        "newStruct",
        "put",
        "config",
        "outputFieldName",
        "outputValue",
        "toString",
        "newRecord",
        "createNewRecord",
        "record",
        "newSchema",
        "build",
        "newStruct",
        "schemaAndValue",
        "value",
        "newValue",
        "schemaAndValue",
        "value",
        "outputValue",
        "config",
        "delimiter",
        "config",
        "fieldNames",
        "forEach",
        "field",
        "newValue",
        "get",
        "field",
        "outputValue",
        "add",
        "config",
        "fieldReplaceMissing",
        "outputValue",
        "add",
        "newValue",
        "get",
        "field",
        "toString",
        "newValue",
        "put",
        "config",
        "outputFieldName",
        "outputValue",
        "toString",
        "schemaAndValue",
        "schema",
        "schemaAndValue",
        "schema",
        "fields",
        "forEach",
        "field",
        "newSchema",
        "field",
        "field",
        "name",
        "field",
        "schema",
        "newSchema",
        "field",
        "config",
        "outputFieldName",
        "Schema",
        "OPTIONAL_STRING_SCHEMA",
        "newRecord",
        "createNewRecord",
        "record",
        "newSchema",
        "build",
        "newValue",
        "newRecord",
        "createNewRecord",
        "record",
        "newValue",
        "record",
        "newRecord",
        "Override",
        "record",
        "record",
        "keySchema",
        "record",
        "key",
        "Override",
        "record",
        "newSchema",
        "newValue",
        "record",
        "newRecord",
        "record",
        "topic",
        "record",
        "kafkaPartition",
        "newSchema",
        "newValue",
        "record",
        "valueSchema",
        "record",
        "value",
        "record",
        "timestamp",
        "record",
        "headers",
        "Override",
        "Override",
        "record",
        "record",
        "valueSchema",
        "record",
        "value",
        "Override",
        "record",
        "newSchema",
        "newValue",
        "record",
        "newRecord",
        "record",
        "topic",
        "record",
        "kafkaPartition",
        "record",
        "keySchema",
        "record",
        "key",
        "newSchema",
        "newValue",
        "record",
        "timestamp",
        "record",
        "headers",
        "Override",
        "Override"
    ],
    "literals": [
        "\" Value can't be null: \"",
        "\"{} is missing, concat will use {}\"",
        "\"Value type must be STRUCT or MAP: \"",
        "\"key\"",
        "\"value\""
    ],
    "variables": [
        "config",
        "newRecord"
    ],
    "comments": [
        "if we have a schema, we can add the new field to it, otherwise just keep the schema null"
    ],
    "docstrings": [
        "* Copyright 2021 Aiven Oy\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License."
    ],
    "functions": [
        "dataPlace",
        "SchemaAndValue",
        "getSchemaAndValue",
        "R",
        "createNewRecord",
        "ConfigDef",
        "config",
        "configure",
        "R",
        "apply",
        "SchemaAndValue",
        "getSchemaAndValue",
        "R",
        "createNewRecord",
        "dataPlace",
        "SchemaAndValue",
        "getSchemaAndValue",
        "R",
        "createNewRecord",
        "dataPlace",
        "close"
    ],
    "classes": [
        "ConcatFields",
        "Key",
        "Value"
    ]
}