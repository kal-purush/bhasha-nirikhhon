{
    "identifiers": [
        "os",
        "flask",
        "Flask",
        "request",
        "jsonify",
        "abort",
        "sqlalchemy",
        "exc",
        "json",
        "flask_cors",
        "CORS",
        "database",
        "models",
        "db_drop_and_create_all",
        "setup_db",
        "Drink",
        "auth",
        "auth",
        "AuthError",
        "requires_auth",
        "Flask",
        "setup_db",
        "app",
        "CORS",
        "app",
        "app",
        "errorhandler",
        "error",
        "jsonify"
    ],
    "literals": [
        "\"success\"",
        "\"error\"",
        "\"message\"",
        "\"unprocessable\""
    ],
    "variables": [
        "app"
    ],
    "comments": [
        "db_drop_and_create_all()",
        "ROUTES",
        "Error Handling"
    ],
    "docstrings": [
        "'''\n@TODO uncomment the following line to initialize the datbase\n!! NOTE THIS WILL DROP ALL RECORDS AND START YOUR DB FROM SCRATCH\n!! NOTE THIS MUST BE UNCOMMENTED ON FIRST RUN\n'''",
        "'''\n@TODO implement endpoint\n    GET /drinks\n        it should be a public endpoint\n        it should contain only the drink.short() data representation\n    returns status code 200 and json {\"success\": True, \"drinks\": drinks} where drinks is the list of drinks\n        or appropriate status code indicating reason for failure\n'''",
        "'''\n@TODO implement endpoint\n    GET /drinks-detail\n        it should require the 'get:drinks-detail' permission\n        it should contain the drink.long() data representation\n    returns status code 200 and json {\"success\": True, \"drinks\": drinks} where drinks is the list of drinks\n        or appropriate status code indicating reason for failure\n'''",
        "'''\n@TODO implement endpoint\n    POST /drinks\n        it should create a new row in the drinks table\n        it should require the 'post:drinks' permission\n        it should contain the drink.long() data representation\n    returns status code 200 and json {\"success\": True, \"drinks\": drink} where drink an array containing only the newly created drink\n        or appropriate status code indicating reason for failure\n'''",
        "'''\n@TODO implement endpoint\n    PATCH /drinks/<id>\n        where <id> is the existing model id\n        it should respond with a 404 error if <id> is not found\n        it should update the corresponding row for <id>\n        it should require the 'patch:drinks' permission\n        it should contain the drink.long() data representation\n    returns status code 200 and json {\"success\": True, \"drinks\": drink} where drink an array containing only the updated drink\n        or appropriate status code indicating reason for failure\n'''",
        "'''\n@TODO implement endpoint\n    DELETE /drinks/<id>\n        where <id> is the existing model id\n        it should respond with a 404 error if <id> is not found\n        it should delete the corresponding row for <id>\n        it should require the 'delete:drinks' permission\n    returns status code 200 and json {\"success\": True, \"delete\": id} where id is the id of the deleted record\n        or appropriate status code indicating reason for failure\n'''",
        "'''\nExample error handling for unprocessable entity\n'''",
        "'''\n@TODO implement error handlers using the @app.errorhandler(error) decorator\n    each error handler should return (with approprate messages):\n             jsonify({\n                    \"success\": False, \n                    \"error\": 404,\n                    \"message\": \"resource not found\"\n                    }), 404\n\n'''",
        "'''\n@TODO implement error handler for 404\n    error handler should conform to general task above \n'''",
        "'''\n@TODO implement error handler for AuthError\n    error handler should conform to general task above \n'''"
    ],
    "functions": [
        "unprocessable"
    ],
    "classes": []
}