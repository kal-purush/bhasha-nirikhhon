{
    "identifiers": [
        "axios",
        "queryString",
        "axios",
        "process",
        "queryString",
        "axiosClient",
        "config",
        "getFirebaseToken",
        "token",
        "config",
        "token",
        "config",
        "axiosClient",
        "response",
        "response",
        "response",
        "response",
        "response",
        "error",
        "error",
        "axiosClient"
    ],
    "literals": [
        "'axios'",
        "'query-string'",
        "'content-type'",
        "'application/json'",
        "Bearer ${token}"
    ],
    "variables": [
        "axiosClient",
        "token"
    ],
    "comments": [
        "import firebase from 'firebase';",
        "const getFirebaseToken = async () => {",
        "const currentUser = firebase.auth().currentUser;",
        "if (currentUser) return currentUser.getIdToken();",
        "// Not logged in",
        "const hasRememberedAccount = localStorage.getItem('firebaseui::rememberedAccounts');",
        "if (!hasRememberedAccount) return null;",
        "// Logged in but current user is not fetched --> wait (10s)",
        "return new Promise((resolve, reject) => {",
        "const waitTimer = setTimeout(() => {",
        "reject(null);",
        "console.log('Reject timeout');",
        "}, 10000);",
        "const unregisterAuthObserver = firebase.auth().onAuthStateChanged(async (user) => {",
        "if (!user) {",
        "reject(null);",
        "}",
        "const token = await user.getIdToken();",
        "console.log('[AXIOS] Logged in user token: ', token);",
        "resolve(token);",
        "unregisterAuthObserver();",
        "clearTimeout(waitTimer);",
        "});",
        "});",
        "}",
        "Set up default config for http requests here",
        "Please have a look at here `https://github.com/axios/axios#request- config` for the full list of configs",
        "Handle errors"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}