{
    "identifiers": [
        "root",
        "root",
        "root",
        "flag",
        "dfs",
        "root",
        "dfs",
        "root",
        "left",
        "right",
        "flag",
        "left",
        "right",
        "dfs",
        "root",
        "flag",
        "isBalanced",
        "root",
        "isBalanced",
        "roots",
        "val",
        "val",
        "root",
        "root",
        "root",
        "sort",
        "root",
        "nums",
        "root",
        "sort",
        "root",
        "low",
        "high",
        "low",
        "high",
        "low",
        "high",
        "low",
        "TreeNode",
        "nums",
        "mid",
        "current",
        "builtAVL",
        "low",
        "mid",
        "current",
        "builtAVL",
        "mid",
        "high",
        "current",
        "sort",
        "root",
        "builtAVL",
        "nums",
        "balanceBST",
        "rootss"
    ],
    "literals": [],
    "variables": [
        "root",
        "roots",
        "rootss",
        "isBalanced",
        "flag",
        "left",
        "right",
        "balanceBST",
        "nums",
        "mid",
        "current"
    ],
    "comments": [
        "立一个flag，只要有一个高度差绝对值大于1，这个flag就会被置为false",
        "如果是空树，高度记为0；如果flag已经false了，那么就没必要往下走了，直接return",
        "如果左右子树的高度差绝对值大于1，flag就破功了",
        "返回当前子树的高度",
        "初始化中序遍历序列数组",
        "定义中序遍历二叉树，得到有序数组",
        "若 low > high，则越界，说明当前索引范围对应的子树已经构建完毕",
        "取数组的中间值作为根结点值",
        "创造当前树的根结点",
        "构建左子树",
        "构建右子树",
        "返回当前树的根结点",
        "基于 nums，构造平衡二叉树"
    ],
    "docstrings": [
        "* 给定一个二叉树，判断它是否是高度平衡的二叉树\n * @param {*} root",
        "* 平衡二叉树的构造\n * @param {TreeNode} root\n * @return {TreeNode}"
    ],
    "functions": [
        "dfs",
        "TreeNode",
        "sort",
        "builtAVL"
    ],
    "classes": []
}