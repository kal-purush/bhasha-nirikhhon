{
    "identifiers": [
        "org",
        "kie",
        "kogito",
        "explainability",
        "local",
        "lime",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "org",
        "apache",
        "commons",
        "lang3",
        "Pair",
        "org",
        "kie",
        "kogito",
        "explainability",
        "model",
        "Feature",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "coefficients",
        "linearizedTargetInputFeatures",
        "trainingSet",
        "coefficients",
        "length",
        "linearizedTargetInputFeatures",
        "size",
        "ts",
        "linearizedTargetInputFeatures",
        "size",
        "trainingSet",
        "isEmpty",
        "zeroPredicted",
        "ts",
        "onePredicted",
        "ts",
        "sample",
        "trainingSet",
        "sparseVector",
        "sample",
        "getKey",
        "i",
        "i",
        "sparseVector",
        "length",
        "i",
        "inputValue",
        "sparseVector",
        "i",
        "outputValue",
        "sample",
        "getValue",
        "outputValue",
        "onePredicted",
        "i",
        "inputValue",
        "zeroPredicted",
        "i",
        "inputValue",
        "zeroPredicted",
        "Arrays",
        "stream",
        "zeroPredicted",
        "d",
        "d",
        "trainingSet",
        "size",
        "toArray",
        "onePredicted",
        "Arrays",
        "stream",
        "onePredicted",
        "d",
        "d",
        "trainingSet",
        "size",
        "toArray",
        "i",
        "i",
        "coefficients",
        "length",
        "i",
        "zeroDistance",
        "abs",
        "zeroPredicted",
        "i",
        "oneDistance",
        "abs",
        "onePredicted",
        "i",
        "zm",
        "tanh",
        "zeroDistance",
        "oneDistance",
        "ts",
        "coefficients",
        "i",
        "zm",
        "LOGGER",
        "warn",
        "coefficients",
        "length",
        "linearizedTargetInputFeatures",
        "size"
    ],
    "literals": [
        "\"coefficients size {} â‰  features size {}, not filtering\""
    ],
    "variables": [],
    "comments": [
        "calculate per feature class balance",
        "calculate distance from the perfect balance (high is good)",
        "coefficient is proportional to distance and to the number of features (between 0 and 1)"
    ],
    "docstrings": [
        "* Copyright 2021 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Filter for feature weight coefficients.\n * It attenuates feature weight coefficients:\n * - proportionally to their respective class balance\n * - inverse proportionally to the number of existing features\n * <p>\n * We consider a sparse feature to be better for training the classifier accurately when it doesn't present a good\n * balance of 1s and 0s values with respect to 0 and 1 predictions. In fact such features would hardly generate a\n * well fitting classifier, if taken in isolation.\n * The generated coefficients are proportional with respect to the no. of features as class balance becomes more\n * impacting when the no. of features is low.",
        "* Filter feature weight {@code coefficients} by attenuating them according to class balance and number of features.\n     * Resulting {@code coefficients} are changed according to the following formula:\n     * {@code c[i] = Math.tanh((1e-2 + Math.abs(classBalanceForZero - 0.5) + Math.abs(classBalanceForOne - 0.5)) + ts / 10d)}\n     *\n     * @param linearizedTargetInputFeatures no of features\n     * @param trainingSet                   training set for the linear classifier"
    ],
    "functions": [
        "IndependentSparseFeatureBalanceFilter",
        "apply"
    ],
    "classes": [
        "IndependentSparseFeatureBalanceFilter"
    ]
}