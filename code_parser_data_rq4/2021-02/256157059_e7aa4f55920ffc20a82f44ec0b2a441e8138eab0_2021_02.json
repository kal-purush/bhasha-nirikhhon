{
    "identifiers": [
        "useCallback",
        "useEffect",
        "useRef",
        "useState",
        "FP",
        "O",
        "Rx",
        "useSubscriptionState",
        "initialState",
        "useState",
        "initialState",
        "useRef",
        "O",
        "Rx",
        "O",
        "useCallback",
        "FP",
        "subRef",
        "O",
        "sub",
        "sub",
        "subRef",
        "O",
        "subRef",
        "useCallback",
        "unsubscribeSub",
        "setState",
        "initialState",
        "unsubscribeSub",
        "initialState",
        "subscribe",
        "stream$",
        "Rx",
        "unsubscribeSub",
        "stream$",
        "setState",
        "subRef",
        "O",
        "subscription",
        "useEffect",
        "unsubscribeSub",
        "unsubscribeSub"
    ],
    "literals": [
        "'react'",
        "'fp-ts/lib/function'",
        "'fp-ts/lib/Option'",
        "'rxjs'"
    ],
    "variables": [
        "useSubscriptionState",
        "state",
        "setState",
        "subRef",
        "unsubscribeSub",
        "reset",
        "subscribe",
        "subscription"
    ],
    "comments": [
        "State stream values",
        "Ref. to subscription",
        "Unsubscribe subscription (if there any)",
        "Reset subscription and state",
        "Subscribe to an Observable",
        "Clean up"
    ],
    "docstrings": [
        "* Custom hook\n * to subscribe to an Observable\n * and to put its values into a state\n *\n * Why not just using `observableState of `observable-state`?\n * Just because `observableState` does ont work in `useCallback.\n *\n * In other cases, always use `observableState`"
    ],
    "functions": [],
    "classes": []
}