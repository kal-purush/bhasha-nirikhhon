{
    "identifiers": [
        "os",
        "re",
        "section",
        "sections",
        "capwords",
        "section",
        "replace",
        "human_readable",
        "join",
        "section_mapping",
        "s",
        "s",
        "sections",
        "pack",
        "section",
        "pack",
        "split",
        "without_extension",
        "split",
        "section",
        "without_extension",
        "code",
        "code",
        "section_mapping",
        "section",
        "prefix",
        "section",
        "sections",
        "logic_dir",
        "section",
        "output",
        "section",
        "pack",
        "os",
        "listdir",
        "path",
        "re",
        "match",
        "pack",
        "output",
        "createEntry",
        "pack",
        "section",
        "processed_files",
        "append",
        "section",
        "pack",
        "skipped_files",
        "append",
        "section",
        "pack",
        "output",
        "output",
        "suffix",
        "open",
        "output_path",
        "f",
        "f",
        "write",
        "output"
    ],
    "literals": [
        "\"core-sets\"",
        "\"battle-packs\"",
        "\"tournament-packs\"",
        "\"../../src/pack-spawning/pack-logic/\"",
        "\"../../src/gui/PackGenerators.ttslua\"",
        "\"-\"",
        "\" \"",
        "f\"'{human_readable}'\"",
        "f\"\"\"-- autogenerated with packgenerators-compiler, do not modify manually\nlocal packGenerators = {{}} -- all generators for quick access via the setcode\nlocal sections = {{}} -- partitioned over the sections and ordered by release for building the gui\nlocal sectionOrder = {'{' + \", \".join([section_mapping[s] for s in sections]) + '}'}\n\nfor _,v in ipairs(sectionOrder) do\n    sections[v] = {{}}\nend\n\nlocal gen = nil\n\"\"\"",
        "'{'",
        "\", \"",
        "'}'",
        "\".\"",
        "\"-\"",
        "f\"\"\"\ngen = require(\"TTS-YGO-sealed-draft/src/pack-spawning/pack-logic/{section}/{without_extension}\"):new()\npackGenerators['{code}'] = gen\ngen.assetCode = '{code}'\ntable.insert(sections[{section_mapping[section]}], gen)\n\"\"\"",
        "f\"\\n-- {section}\"",
        "r\"^[0-9]{3}-.+\\.ttslua$\"",
        "\"/\"",
        "\"/\"",
        "\"--##################\\n\\n\"",
        "\"w\""
    ],
    "variables": [
        "sections",
        "logic_dir",
        "output_path",
        "taken_codes",
        "processed_files",
        "skipped_files",
        "section_mapping",
        "human_readable",
        "section_mapping",
        "section",
        "prefix",
        "suffix",
        "without_extension",
        "code",
        "output",
        "path"
    ],
    "comments": [
        "set for checking if each code is unique",
        "maps core-sets to Core Sets"
    ],
    "docstrings": [
        "\"\"\"\nreturn {\n    packGenerators = packGenerators,\n    sectionOrder = sectionOrder,\n    sections = sections\n}\n\"\"\""
    ],
    "functions": [
        "createEntry"
    ],
    "classes": []
}