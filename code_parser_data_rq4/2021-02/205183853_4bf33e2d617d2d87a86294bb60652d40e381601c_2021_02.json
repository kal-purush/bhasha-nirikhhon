{
    "identifiers": [
        "Collections",
        "Generic",
        "Linear_DataStructures",
        "StringCombination",
        "sc",
        "DisplayPairs2",
        "b",
        "arr",
        "sum",
        "i",
        "arr",
        "Length",
        "i",
        "sum",
        "arr",
        "i",
        "m",
        "ContainsKey",
        "rem",
        "m",
        "rem",
        "j",
        "count",
        "j",
        "Write",
        "rem",
        "arr",
        "i",
        "m",
        "ContainsKey",
        "arr",
        "i",
        "m",
        "arr",
        "i",
        "m",
        "arr",
        "i",
        "input",
        "i",
        "input",
        "Length",
        "i",
        "j",
        "input",
        "Length",
        "i",
        "j",
        "input",
        "Substring",
        "i",
        "j",
        "WriteLine",
        "result",
        "arr",
        "n",
        "i",
        "n",
        "i",
        "arr",
        "i",
        "n",
        "arr",
        "index",
        "n",
        "i",
        "arr",
        "WriteLine",
        "i",
        "ToString",
        "i",
        "n",
        "i",
        "arr",
        "i",
        "n",
        "arr",
        "i",
        "n",
        "Write",
        "i",
        "i",
        "Length",
        "i",
        "IsDigit",
        "i",
        "IsDigit",
        "i",
        "count",
        "count",
        "i",
        "i",
        "i",
        "integerstack",
        "Push",
        "count",
        "i",
        "temp",
        "count",
        "integerstack",
        "Count",
        "count",
        "integerstack",
        "Peek",
        "integerstack",
        "Pop",
        "stringstack",
        "Count",
        "stringstack",
        "Peek",
        "temp",
        "stringstack",
        "Peek",
        "temp",
        "stringstack",
        "Pop",
        "stringstack",
        "Count",
        "stringstack",
        "Peek",
        "stringstack",
        "Pop",
        "j",
        "count",
        "j",
        "result",
        "result",
        "temp",
        "j",
        "result",
        "Length",
        "j",
        "stringstack",
        "Push",
        "result",
        "j",
        "result",
        "i",
        "IsDigit",
        "i",
        "stringstack",
        "Push",
        "i",
        "stringstack",
        "Push",
        "i",
        "integerstack",
        "Push",
        "stringstack",
        "Push",
        "i",
        "stringstack",
        "Count",
        "result",
        "stringstack",
        "Peek",
        "result",
        "stringstack",
        "Pop",
        "result",
        "s",
        "s",
        "Length",
        "i",
        "len",
        "i",
        "s",
        "i",
        "IndexOf",
        "c",
        "c",
        "input",
        "Collections",
        "Generic",
        "Collections",
        "Generic",
        "Collections",
        "Generic",
        "Collections",
        "Generic",
        "i",
        "input",
        "Length",
        "i",
        "IsDigit",
        "input",
        "i",
        "integerstack",
        "Push",
        "input",
        "i",
        "input",
        "i",
        "charstack",
        "Push",
        "input",
        "i",
        "result"
    ],
    "literals": [
        "\"(\"",
        "\", \"",
        "\")\"",
        "\"\\n\"",
        "\" \"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\""
    ],
    "variables": [
        "StringCombination",
        "sc",
        "a",
        "b",
        "m",
        "i",
        "rem",
        "count",
        "j",
        "i",
        "j",
        "result",
        "i",
        "index",
        "i",
        "t",
        "integerstack",
        "stringstack",
        "temp",
        "result",
        "i",
        "count",
        "j",
        "j",
        "len",
        "i",
        "c",
        "result",
        "integerstack",
        "charstack",
        "i"
    ],
    "comments": [
        "Combination of string",
        "sc.StringPermutn(\"abc\");",
        "repeating numbers",
        "sc.printRepeating(a, 4);",
        "decode string",
        "var sc1 = sc.decode1(\"2[a3[b]]\");",
        "array pairs",
        "{ 1, 5, 7, -1, 5 };",
        "Store counts of all elements in map m",
        "Traverse through all elements",
        "Search if a pair can be formed with",
        "arr[i].",
        "trick part",
        "First check all the values that are",
        "present in an array then go to that",
        "values as indexes and increment by",
        "the size of array",
        "Console.WriteLine(\"index=\"+index.ToString()+\"  arr[i]\"+ arr[i].ToString());",
        "Now check which value exists more",
        "than once by dividing with the size",
        "of array",
        "Console.WriteLine(t.ToString());",
        "Traversing the string",
        "If number, convert it into number",
        "and push it into integerstack.",
        "If closing bracket ']', pop elemment",
        "until '[' opening bracket is not found",
        "in the character stack.",
        "Repeating the popped string 'temo'",
        "count number of times.",
        "Push it in the character stack.",
        "If '[' opening bracket, push it",
        "into character stack.",
        "Pop all the elmenet, make a",
        "string and return.",
        "Function to make the string unique",
        "Using Index Of",
        "loop to traverse the string and",
        "check for repeating chars using",
        "IndexOf() method in Java",
        "character at i'th index of s",
        "if c is present in str, it returns",
        "the index of c, else it returns -1",
        "adding c to str if -1 is returned",
        "charstack.pop();"
    ],
    "docstrings": [],
    "functions": [
        "DriverCode",
        "DisplayPairs2",
        "StringPermutn",
        "printRepeating",
        "decode1",
        "unique",
        "Decode"
    ],
    "classes": [
        "StringCombination"
    ]
}