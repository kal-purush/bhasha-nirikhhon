{
    "identifiers": [
        "HttpStatus",
        "INestApplication",
        "Test",
        "TestingModule",
        "mongoose",
        "Roles",
        "supertest",
        "HeadersEnum",
        "IUser",
        "AppModule",
        "MetricService",
        "ITokens",
        "UserService",
        "createUser",
        "Method",
        "requestTo",
        "RequestToResult",
        "jest",
        "jest",
        "describe",
        "beforeAll",
        "Test",
        "AppModule",
        "MetricService",
        "jest",
        "jest",
        "app",
        "moduleFixture",
        "app",
        "request",
        "requestTo",
        "app",
        "mongoose",
        "c",
        "c",
        "metricService",
        "app",
        "MetricService",
        "userService",
        "app",
        "UserService",
        "user",
        "createUser",
        "userService",
        "admin",
        "createUser",
        "userService",
        "Roles",
        "afterAll",
        "app",
        "afterEach",
        "jest",
        "describe",
        "query",
        "variables",
        "headers",
        "supertest",
        "beforeAll",
        "graphQlRequest",
        "query",
        "variables",
        "headers",
        "HeadersEnum",
        "user",
        "supertest",
        "request",
        "Method",
        "headers",
        "describe",
        "it",
        "graphQlRequest",
        "date",
        "date",
        "HttpStatus",
        "expect",
        "metricService",
        "expect",
        "metricService",
        "date",
        "date",
        "user",
        "describe",
        "it",
        "graphQlRequest",
        "date",
        "date",
        "HttpStatus",
        "expect",
        "metricService",
        "expect",
        "metricService",
        "scale",
        "date",
        "date",
        "user",
        "describe",
        "it",
        "graphQlRequest",
        "date",
        "date",
        "HttpStatus",
        "expect",
        "body",
        "Roles",
        "Roles",
        "expect",
        "metricService",
        "it",
        "graphQlRequest",
        "date",
        "date",
        "user",
        "HeadersEnum",
        "admin",
        "HttpStatus",
        "expect",
        "metricService",
        "expect",
        "metricService",
        "scale",
        "date",
        "date",
        "user"
    ],
    "literals": [
        "'@nestjs/common'",
        "'@nestjs/testing'",
        "'mongoose'",
        "'../../common/enum/roles.enum'",
        "'supertest'",
        "'../../common/enum/headers.enum'",
        "'../../common/interface/user.interface'",
        "'../../modules/app.module'",
        "'../../modules/metric/metric.service'",
        "'../../modules/user/interfaces/tokens.interface'",
        "'../../modules/user/user.service'",
        "'../common'",
        "'ioredis'",
        "'MetricResolver'",
        "'GraphQL'",
        "string",
        "string",
        "'/graphql'",
        "'getApiActivity'",
        "'should call getApiActivity'",
        "query getApiActivity($filters: MetricFilters!) {\n            getApiActivity(filters: $filters) {\n              apiName\n              apiDef\n              count\n              success\n              failed\n              latency\n              lastAccess\n            }\n          }",
        "'getUserMetrics'",
        "'apiDef'",
        "'sourceId'",
        "'day'",
        "'should call aggregateMetrics'",
        "query getUserMetrics($scale: String!, $filters: MetricFilters!) {\n            getUserMetrics(scale: $scale, filters: $filters) {\n              count { argument }\n            }\n          }",
        "'metrics'",
        "'should throw unauthorized error'",
        "'apiDef'",
        "'sourceId'",
        "'day'",
        "query metrics($scale: String!, $filters: MetricFilters!) {\n              metrics(scale: $scale, filters: $filters) {\n                count { argument }\n              }\n            }",
        "User role is: ${Roles.USER}, but required one of: ${Roles.ADMIN}",
        "'should call aggregateMetrics'",
        "query metrics($scale: String!, $filters: MetricFilters!) {\n              metrics(scale: $scale, filters: $filters) {\n                count { argument }\n              }\n            }"
    ],
    "variables": [
        "request",
        "app",
        "metricService",
        "userService",
        "user",
        "admin",
        "moduleFixture",
        "graphQlRequest",
        "date",
        "date",
        "apiDef",
        "sourceId",
        "scale",
        "date",
        "apiDef",
        "sourceId",
        "scale"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}