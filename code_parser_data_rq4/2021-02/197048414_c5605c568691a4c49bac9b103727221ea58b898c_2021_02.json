{
    "identifiers": [
        "pandas",
        "pd",
        "os",
        "path",
        "join",
        "exists",
        "numpy",
        "np",
        "pos1",
        "pos2",
        "cutoff",
        "s",
        "s",
        "pos1",
        "s",
        "s",
        "pos2",
        "sorted",
        "pos1",
        "pos2",
        "both_pairs",
        "both_pairs",
        "both_pairs",
        "both_pairs",
        "overlap_region",
        "both_pairs",
        "both_pairs",
        "overlap_region",
        "both_pairs",
        "both_pairs",
        "max",
        "frac_first",
        "frac_second",
        "cutoff",
        "data",
        "cutoff",
        "overlaps",
        "data",
        "gene_match_from",
        "values",
        "data",
        "gene_match_to",
        "values",
        "data",
        "match_evalue",
        "values",
        "e_vals",
        "astype",
        "np",
        "i",
        "len",
        "start_end_pairs",
        "j",
        "len",
        "start_end_pairs",
        "i",
        "overlaps",
        "append",
        "test_overlap",
        "start_end_pairs",
        "i",
        "start_end_pairs",
        "i",
        "j",
        "cutoff",
        "overlaps",
        "s",
        "i",
        "overlaps",
        "e_vals",
        "overlaps",
        "overlap_e_vals",
        "argmin",
        "i",
        "idx",
        "i",
        "i",
        "overlaps",
        "data",
        "overlaps",
        "data",
        "pd",
        "read_csv",
        "outfile",
        "sep",
        "s",
        "s",
        "cutoff",
        "cutoff_vals",
        "cutoff",
        "format",
        "cutoff",
        "exists",
        "temp_data_filepath",
        "df",
        "groupby",
        "apply",
        "x",
        "remove_overlaps",
        "x",
        "cutoff",
        "cutoff",
        "pd",
        "read_csv",
        "temp_data_filepath",
        "sep",
        "motifs",
        "append",
        "non_redundant_data",
        "uid",
        "count",
        "df",
        "uid",
        "count"
    ],
    "literals": [
        "'pfam_hmm_results.tsv'",
        "'\\t'",
        "'motifs_result_{}.tsv'",
        "'uid'",
        "'\\t'",
        "'Unfiltered domain number: %s'"
    ],
    "variables": [
        "pos1",
        "pos2",
        "both_pairs",
        "overlap_region",
        "frac_first",
        "frac_second",
        "overlaps",
        "start_end_pairs",
        "e_vals",
        "e_vals",
        "overlaps",
        "overlaps",
        "overlap_e_vals",
        "idx",
        "overlaps",
        "overlaps",
        "data",
        "outfile",
        "df",
        "cutoff_vals",
        "motifs",
        "temp_data_filepath",
        "non_redundant_data",
        "non_redundant_data"
    ],
    "comments": [
        "simplest case, they do not overlap at all",
        "get overlap part",
        "fraction of first domain",
        "fraction of second domain",
        "print(both_pairs, True, max(frac_first, frac_second))",
        "print(both_pairs, False, max(frac_first, frac_second))",
        "prepend true or false for the first sequence, depending on whether there was an overlap",
        "from the ones with an overlap, what is the position of the one with the lowest e-value",
        "print(overlaps)",
        "print(overlap_e_vals)",
        "print(i+idx)",
        "flip the one that said true but had the smallest e-value",
        "invert the list to flip True vs False",
        "filter the data to keep all the ones that originally said False, but now say true",
        "print(data)",
        "test a range of cutoff values to figure out which one is best"
    ],
    "docstrings": [
        "'''\n    Find out whether two defined regions overlap or not.\n    Overlap is defined True when at least one of the domains\n    overlap with the other above a certain fraction of the whole.\n    '''",
        "'''\n    When domains overlap (as defined by the cutoff level),\n    keep only the domain with the best e-value score.\n    '''"
    ],
    "functions": [
        "test_overlap",
        "remove_overlaps"
    ],
    "classes": []
}