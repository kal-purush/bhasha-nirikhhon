{
    "identifiers": [
        "Enum",
        "auto",
        "matplotlib",
        "cbook",
        "Enum",
        "name",
        "start",
        "count",
        "last_values",
        "name",
        "s",
        "s",
        "lower",
        "s",
        "s_low",
        "s_low",
        "cbook",
        "warn_deprecated",
        "message",
        "s_low",
        "cbook",
        "warn_deprecated",
        "message",
        "s_low",
        "_AutoStringNameEnum",
        "auto",
        "auto",
        "auto",
        "s",
        "_deprecate_case_insensitive_join_cap",
        "s",
        "Enum",
        "staticmethod",
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "ax",
        "x",
        "y",
        "angle",
        "style",
        "np",
        "radians",
        "angle",
        "x",
        "x",
        "x",
        "np",
        "cos",
        "phi",
        "y",
        "y",
        "y",
        "np",
        "sin",
        "phi",
        "ax",
        "plot",
        "xx",
        "yy",
        "lw",
        "color",
        "solid_joinstyle",
        "style",
        "ax",
        "plot",
        "xx",
        "yy",
        "lw",
        "color",
        "ax",
        "plot",
        "xx",
        "yy",
        "color",
        "markersize",
        "plt",
        "subplots",
        "figsize",
        "ax",
        "set_title",
        "x",
        "style",
        "ax",
        "text",
        "x",
        "style",
        "y",
        "angle",
        "plot_angle",
        "ax",
        "x",
        "y",
        "angle",
        "style",
        "x",
        "ax",
        "text",
        "y",
        "angle",
        "ax",
        "set_xlim",
        "ax",
        "set_ylim",
        "ax",
        "set_axis_off",
        "fig",
        "show",
        "_AutoStringNameEnum",
        "s",
        "_deprecate_case_insensitive_join_cap",
        "s",
        "Enum",
        "staticmethod",
        "matplotlib",
        "pyplot",
        "plt",
        "plt",
        "subplots",
        "figsize",
        "ax",
        "set_title",
        "x",
        "style",
        "ax",
        "text",
        "x",
        "style",
        "ha",
        "x",
        "x",
        "ax",
        "plot",
        "xx",
        "yy",
        "lw",
        "color",
        "solid_capstyle",
        "style",
        "ax",
        "plot",
        "xx",
        "yy",
        "lw",
        "color",
        "ax",
        "plot",
        "xx",
        "yy",
        "color",
        "markersize",
        "ax",
        "text",
        "ha",
        "ax",
        "set_ylim",
        "ax",
        "set_axis_off",
        "fig",
        "show"
    ],
    "literals": [
        "'miter'",
        "'round'",
        "'bevel'",
        "\"3.3\"",
        "\"Case-insensitive capstyles are deprecated \"",
        "\"since %(since)s and support for them will be removed \"",
        "\"%(removal)s; please pass them in lowercase.\"",
        "'butt'",
        "'round'",
        "'projecting'",
        "\"3.3\"",
        "\"Case-insensitive joinstyles are deprecated \"",
        "\"since %(since)s and support for them will be removed \"",
        "\"%(removal)s; please pass them in lowercase.\"",
        "'tab:blue'",
        "'black'",
        "'o'",
        "'tab:red'",
        "'Join style'",
        "'miter'",
        "'round'",
        "'bevel'",
        "f'{angle} degrees'",
        "r\"\"\"\n    Define how the two endpoints (caps) of an unclosed line are drawn.\n\n    How to draw the start and end points of lines that represent a closed curve\n    (i.e. that end in a `~.path.Path.CLOSEPOLY`) is controlled by the line's\n    `JoinStyle`. For all other lines, how the start and end points are drawn is\n    controlled by the *CapStyle*.\n\n    For a visual impression of each *CapStyle*, `view these docs online\n    <CapStyle>` or run `CapStyle.demo`:\n\n    .. plot::\n        :alt: Demo of possible CapStyle's\n\n        from matplotlib._types import CapStyle\n        CapStyle.demo()\n\n    Available options:\n\n    - *butt*: the line is squared off at its endpoint.\n    - *projecting*: the line is squared off as in *butt*, but the filled in\n        area extends beyond the endpoint a distance of ``linewidth/2``.\n    - *round*: like *butt*, but a semicircular cap is added to the end of\n        the line, of radius ``linewidth/2``.\n    \"\"\"",
        "'butt'",
        "'projecting'",
        "'round'",
        "'Cap style'",
        "'butt'",
        "'round'",
        "'projecting'",
        "'center'",
        "'tab:blue'",
        "'black'",
        "'o'",
        "'tab:red'",
        "'(default)'",
        "'center'"
    ],
    "variables": [
        "s_low",
        "miter",
        "round",
        "bevel",
        "s",
        "phi",
        "xx",
        "yy",
        "fig",
        "ax",
        "butt",
        "projecting",
        "round",
        "s",
        "fig",
        "ax",
        "xx",
        "yy"
    ],
    "comments": [
        "Else, error out at the check_in_list stage."
    ],
    "docstrings": [
        "\"\"\"\nStyle description information that is shared across unrelated classses.\n\"\"\"",
        "\"\"\"Automate the ``name = 'name'`` part of making a (str, Enum).\"\"\"",
        "\"\"\"\n    Define how the connection between two line segments is drawn.\n\n    For a visual impression of each *JoinStyle*, `view these docs online\n    <JoinStyle>`, or run `JoinStyle.demo`:\n\n    .. plot::\n        :alt: Demo of possible JoinStyle's\n\n        from matplotlib._types import JoinStyle\n        JoinStyle.demo()\n\n    Lines in Matplotlib are typically defined by a 1D `~.path.Path` and a\n    finite ``linewidth``, where the underlying 1D `~.path.Path` represents the\n    center of the stroked line.\n\n    By default, `~.backend_bases.GraphicsContextBase` defines the boundaries of\n    a stroked line to simply be every point within some radius,\n    ``linewidth/2``, away from any point of the center line. However, this\n    results in corners appearing \"rounded\", which may not be the desired\n    behavior if you are drawing, for example, a polygon or pointed star.\n\n    Matplotlib provides three options for drawing the corners between adjacent\n    segments. In short:\n\n    - *miter* is the \"arrow-tip\" style. Each boundary of the filled-in area\n        will extend in a straight line parallel to the tangent vector of the\n        centerline at the point it meets the corner, until they meet in a\n        sharp point.\n    - *round* stokes every point within a radius of ``linewidth/2`` of the\n        center lines.\n    - *bevel* is the \"squared-off\" style. It can be thought of as a rounded\n        corner where the \"circular\" part of the corner has been cut off.\n\n    .. note::\n\n        The *miter* option can be controlled further by specifying a \"miter\n        limit\", which specifies how long a miter tip can get before it is\n        automatically \"bevel\"ed off. Matplotlib does not currently expose a\n        ``miterlimit`` parameter to the user, and most backends simply use the\n        upstream default value. For example, the PDF backend assumes the\n        default value of 10 specified by the PDF standard, while the SVG\n        backend does not even specify the miter limit, resulting in a default\n        value of 4 per the SVG specification.\n\n        A more detailed description of the effect of a miter limit can be found\n        in the `Mozilla Developer Docs\n        <https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit>`_\n    \"\"\""
    ],
    "functions": [
        "_generate_next_value_",
        "_deprecate_case_insensitive_join_cap",
        "demo",
        "plot_angle",
        "demo"
    ],
    "classes": [
        "_AutoStringNameEnum",
        "JoinStyle",
        "CapStyle"
    ]
}