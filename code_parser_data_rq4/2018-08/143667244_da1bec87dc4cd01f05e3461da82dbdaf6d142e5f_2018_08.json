{
    "identifiers": [
        "print_function",
        "tensorflow",
        "tf",
        "random",
        "tensorflow",
        "examples",
        "tutorials",
        "mnist",
        "input_data",
        "input_data",
        "read_data_sets",
        "one_hot",
        "tf",
        "set_random_seed",
        "tf",
        "placeholder",
        "dtype",
        "tf",
        "float32",
        "shape",
        "name",
        "tf",
        "placeholder",
        "dtype",
        "tf",
        "float32",
        "shape",
        "name",
        "tf",
        "reshape",
        "x",
        "name",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "stddev",
        "tf",
        "nn",
        "conv2d",
        "x_img",
        "W1",
        "strides",
        "padding",
        "tf",
        "nn",
        "relu",
        "L1",
        "tf",
        "nn",
        "max_pool",
        "L1",
        "ksize",
        "strides",
        "padding",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "stddev",
        "tf",
        "nn",
        "conv2d",
        "L1",
        "W2",
        "strides",
        "padding",
        "tf",
        "nn",
        "relu",
        "L2",
        "tf",
        "nn",
        "max_pool",
        "L2",
        "ksize",
        "strides",
        "padding",
        "tf",
        "layers",
        "dense",
        "inputs",
        "L2",
        "units",
        "activation",
        "tf",
        "reshape",
        "L2",
        "tf",
        "get_variable",
        "shape",
        "initializer",
        "tf",
        "contrib",
        "layers",
        "xavier_initializer",
        "tf",
        "Variable",
        "tf",
        "random_normal",
        "tf",
        "matmul",
        "L2_flat",
        "W3",
        "b",
        "tf",
        "reduce_mean",
        "tf",
        "nn",
        "softmax_cross_entropy_with_logits",
        "logits",
        "pred",
        "labels",
        "y",
        "tf",
        "train",
        "AdadeltaOptimizer",
        "learning_rate",
        "minimize",
        "cost",
        "tf",
        "global_variables_initializer",
        "tf",
        "Session",
        "sess",
        "sess",
        "run",
        "init",
        "epoch",
        "training_epochs",
        "mnist",
        "train",
        "num_examples",
        "batch_size",
        "i",
        "total_batch",
        "mnist",
        "train",
        "next_batch",
        "batch_size",
        "sess",
        "run",
        "optimizer",
        "cost",
        "feed_dict",
        "x",
        "batch_xs",
        "y",
        "batch_ys",
        "avg_cost",
        "c",
        "total_batch",
        "epoch",
        "display_step",
        "epoch",
        "format",
        "avg_cost",
        "tf",
        "equal",
        "tf",
        "argmax",
        "pred",
        "tf",
        "argmax",
        "y",
        "tf",
        "reduce_mean",
        "tf",
        "cast",
        "correct_prediction",
        "tf",
        "float32",
        "accuracy",
        "eval",
        "x",
        "mnist",
        "test",
        "images",
        "y",
        "mnist",
        "test",
        "labels",
        "tf",
        "layers",
        "dense",
        "inputs",
        "L2",
        "units",
        "activation"
    ],
    "literals": [
        "\"./Mnist_data/\"",
        "'input-x'",
        "'input-y'",
        "'tensor-x'",
        "'SAME'",
        "'SAME'",
        "'SAME'",
        "'SAME'",
        "\"W3\"",
        "\"Epoch:\"",
        "'%04d'",
        "\"cost=\"",
        "\"{:.9f}\"",
        "\"Optimization Finished!\"",
        "\"Accuracy:\""
    ],
    "variables": [
        "mnist",
        "learning_rate",
        "training_epochs",
        "batch_size",
        "display_step",
        "x",
        "y",
        "x_img",
        "W1",
        "L1",
        "L1",
        "L1",
        "W2",
        "L2",
        "L2",
        "L2",
        "L2",
        "L2_flat",
        "W3",
        "b",
        "pred",
        "cost",
        "optimizer",
        "init",
        "avg_cost",
        "total_batch",
        "batch_xs",
        "batch_ys",
        "_",
        "c",
        "correct_prediction",
        "accuracy",
        "L2"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*_ coding:utf-8 -*-",
        "Import MNIST data",
        "Parameters setting",
        "decay_rate = 0.96",
        "decay_steps = 100",
        "set the tf Graph Input & set the model weights",
        "TO DO",
        "set layers",
        "详细用法见百度，x_img必须为一个向量表示卷积的输入图像，第二个参数相当于卷积核，第三个参数卷积时在每一步的步长",
        "第四个参数只能为\"SAME'\"VALID'之一",
        "stddev 正态分布的标准差",
        "[3,3,1,32]分别为卷积核的高宽，输入的通道数，输出的通道数即这一层输出32个特征",
        "Minimize error using cross entropy & set the gradient descent",
        "cost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred),reduction_indices=1))",
        "注意求loss需要加上tf.reduce_mean 求交叉熵需要加上tf.reduce_sum",
        "梯度下降法选择最好的模型",
        "Initialize the variables (i.e. assign their default value)",
        "Start training",
        "Run the initializer",
        "Training cycle",
        "Loop over all batches",
        "Compute average loss",
        "print(avg_cost)",
        "# Display logs per epoch step",
        "Test model",
        "Calculate accuracy"
    ],
    "docstrings": [
        "'''\nA convolutional neural network learning algorithm example using TensorFlow library.\nThis example is using the MNIST database of handwritten digits\n(http://yann.lecun.com/exdb/mnist/)\nAuthor:\n'''"
    ],
    "functions": [],
    "classes": []
}