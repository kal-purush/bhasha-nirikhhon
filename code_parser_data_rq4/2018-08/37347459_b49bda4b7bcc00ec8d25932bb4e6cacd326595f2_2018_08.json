{
    "identifiers": [
        "argparse",
        "ast",
        "collections",
        "base64",
        "sys",
        "pathlib",
        "Path",
        "sys",
        "path",
        "insert",
        "Path",
        "resolve",
        "parent",
        "parent",
        "buildkit",
        "common",
        "ENCODING",
        "get_logger",
        "get_chromium_version",
        "buildkit",
        "config",
        "ConfigBundle",
        "buildkit",
        "third_party",
        "unidiff",
        "buildkit",
        "patches",
        "DEFAULT_PATCH_DIR",
        "sys",
        "path",
        "pop",
        "Path",
        "parent",
        "parent",
        "Path",
        "parent",
        "parent",
        "RuntimeError",
        "ast",
        "NodeVisitor",
        "ast",
        "mod",
        "ast",
        "expr_context",
        "ast",
        "boolop",
        "ast",
        "Assign",
        "ast",
        "Add",
        "ast",
        "Name",
        "ast",
        "Dict",
        "ast",
        "Str",
        "ast",
        "NameConstant",
        "ast",
        "ast",
        "BinOp",
        "node",
        "node",
        "func",
        "id",
        "_allowed_callables",
        "_UnexpectedSyntax",
        "node",
        "func",
        "id",
        "node",
        "lineno",
        "node",
        "col_offset",
        "node",
        "ast_type",
        "_valid_syntax_types",
        "isinstance",
        "node",
        "ast_type",
        "generic_visit",
        "node",
        "_UnexpectedSyntax",
        "format",
        "node",
        "node",
        "lineno",
        "node",
        "col_offset",
        "deps_text",
        "_DepsNodeVisitor",
        "visit",
        "ast",
        "parse",
        "deps_text",
        "_UnexpectedSyntax",
        "exc",
        "exc",
        "deps_globals",
        "var_name",
        "deps_globals",
        "var_name",
        "_var_impl",
        "deps_text",
        "_deps_var",
        "deps_globals",
        "exec",
        "deps_text",
        "deps_globals",
        "deps_globals",
        "download_session",
        "repo_url",
        "version",
        "relative_path",
        "repo_url",
        "ValueError",
        "format",
        "repo_url",
        "repo_url",
        "format",
        "version",
        "relative_path",
        "get_logger",
        "prepend_timestamp",
        "log_init",
        "debug",
        "full_url",
        "download_session",
        "get",
        "full_url",
        "response",
        "raise_for_status",
        "base64",
        "b64decode",
        "response",
        "text",
        "validate",
        "decode",
        "deps_globals",
        "dep_value",
        "isinstance",
        "dep_value",
        "dep_value",
        "isinstance",
        "dep_value",
        "dep_value",
        "dep_value",
        "NotImplementedError",
        "url",
        "url",
        "format",
        "deps_globals",
        "url",
        "count",
        "ValueError",
        "format",
        "url",
        "url",
        "deps_globals",
        "child_deps_tree",
        "child_path",
        "deps_use_relative_paths",
        "dep_path_str",
        "dep_value",
        "deps_globals",
        "get",
        "items",
        "_get_dep_value_url",
        "deps_globals",
        "dep_value",
        "url",
        "Path",
        "dep_path_str",
        "deps_use_relative_paths",
        "Path",
        "dep_path_str",
        "relative_to",
        "child_path",
        "ValueError",
        "recursedeps_item",
        "deps_globals",
        "get",
        "isinstance",
        "recursedeps_item",
        "recursedeps_item",
        "dep_path",
        "recursedeps_item",
        "recursedeps_item_path",
        "dep_path",
        "recursedeps_item_depsfile",
        "grandchild_deps_tree",
        "url",
        "split",
        "grandchild_deps_tree",
        "download_session",
        "current_deps_tree",
        "child_path",
        "deps_use_relative_paths",
        "current_deps_tree",
        "child_path",
        "isinstance",
        "child_deps_tree",
        "_parse_deps",
        "_download_googlesource_file",
        "download_session",
        "repo_url",
        "version",
        "child_deps_tree",
        "repo_url",
        "version",
        "child_deps_tree",
        "deps_globals",
        "get",
        "_process_deps_entries",
        "deps_globals",
        "child_deps_tree",
        "child_path",
        "deps_use_relative_paths",
        "child_deps_tree",
        "deps_use_relative_paths",
        "download_session",
        "deps_tree",
        "target_file",
        "deps_tree",
        "Path",
        "target_file",
        "current_relative_path",
        "previous_relative_path",
        "current_relative_path",
        "child_path",
        "current_deps_tree",
        "previous_relative_path",
        "relative_to",
        "child_path",
        "ValueError",
        "current_deps_tree",
        "child_path",
        "_get_child_deps_tree",
        "download_session",
        "current_deps_tree",
        "child_path",
        "deps_use_relative_paths",
        "current_node",
        "current_node",
        "_download_googlesource_file",
        "download_session",
        "repo_url",
        "version",
        "current_relative_path",
        "Path",
        "get_chromium_version",
        "deps_tree",
        "file_iter",
        "requests",
        "_initialize_deps_tree",
        "requests",
        "Session",
        "download_session",
        "file_path",
        "file_iter",
        "_download_source_file",
        "download_session",
        "deps_tree",
        "file_path",
        "splitlines",
        "files",
        "file_iter",
        "source_dir",
        "file_path",
        "file_iter",
        "source_dir",
        "file_path",
        "read_text",
        "splitlines",
        "files",
        "bundle_path",
        "bundle_cache",
        "unexplored_bundles",
        "dependency_name",
        "reversed",
        "bundle_cache",
        "bundle_path",
        "bundlemeta",
        "depends",
        "bundle_path",
        "with_name",
        "dependency_name",
        "dependency_path",
        "unexplored_bundles",
        "unexplored_bundles",
        "remove",
        "dependency_path",
        "_generate_full_bundle_depends",
        "dependency_path",
        "bundle_cache",
        "unexplored_bundles",
        "dependency_path",
        "bundle_cache",
        "bundle_cache",
        "keys",
        "unexplored_bundles",
        "unexplored_bundles",
        "pop",
        "patch_trie",
        "dependency_path",
        "_generate_full_bundle_depends",
        "current_path",
        "bundle_cache",
        "unexplored_bundles",
        "dependency_path",
        "current_trie_node",
        "current_trie_node",
        "dependency_path",
        "current_path",
        "current_trie_node",
        "patch_trie",
        "patched_file",
        "file_lines",
        "hunk",
        "patched_file",
        "hunk",
        "is_valid",
        "ValueError",
        "format",
        "repr",
        "hunk",
        "hunk",
        "target_start",
        "line",
        "hunk",
        "line",
        "value",
        "rstrip",
        "line",
        "is_added",
        "line_cursor",
        "line_cursor",
        "normalized_line",
        "line_cursor",
        "line",
        "is_removed",
        "normalized_line",
        "file_lines",
        "line_cursor",
        "ValueError",
        "format",
        "file_lines",
        "line_cursor",
        "normalized_line",
        "file_lines",
        "line_cursor",
        "line",
        "is_context",
        "normalized_line",
        "file_lines",
        "line_cursor",
        "ValueError",
        "format",
        "file_lines",
        "line_cursor",
        "normalized_line",
        "line_cursor",
        "patched_file",
        "child_files",
        "parent_file_layers",
        "Path",
        "patched_file",
        "path",
        "patched_file",
        "is_added_file",
        "patched_file_path",
        "child_files",
        "child_files",
        "patched_file_path",
        "len",
        "patched_file",
        "patched_file",
        "removed",
        "patched_file",
        "target_start",
        "x",
        "value",
        "x",
        "patched_file",
        "patched_file",
        "is_removed_file",
        "patched_file",
        "is_modified_file",
        "patched_file_path",
        "child_files",
        "parent_file_layers",
        "patched_file_path",
        "copy",
        "_modify_file_lines",
        "patched_file",
        "child_files",
        "patched_file_path",
        "patch_trie",
        "bundle_cache",
        "patch_cache",
        "orig_files",
        "iter",
        "patch_trie",
        "items",
        "collections",
        "ChainMap",
        "orig_files",
        "node_iter_stack",
        "next",
        "node_iter_stack",
        "StopIteration",
        "node_iter_stack",
        "pop",
        "file_layers",
        "maps",
        "file_layers",
        "new_child",
        "m",
        "child_files",
        "get_logger",
        "prepend_timestamp",
        "log_init",
        "info",
        "len",
        "node_iter_stack",
        "child_path",
        "name",
        "bundle_cache",
        "child_path",
        "child_bundle",
        "patch_order",
        "KeyError",
        "patch_path_str",
        "child_patch_order",
        "patched_file",
        "patch_cache",
        "patch_path_str",
        "_apply_file_unidiff",
        "patched_file",
        "child_files",
        "file_layers",
        "parents",
        "get_logger",
        "prepend_timestamp",
        "log_init",
        "exception",
        "patched_file",
        "path",
        "patch_path_str",
        "branch_validation_failed",
        "branch_validation_failed",
        "node_iter_stack",
        "append",
        "iter",
        "node_iter_stack",
        "append",
        "iter",
        "grandchildren",
        "items",
        "had_failure",
        "bundle_iter",
        "patch_dir",
        "DEFAULT_PATCH_DIR",
        "bundle",
        "bundle_iter",
        "iter",
        "bundle",
        "patch_order",
        "KeyError",
        "relative_path",
        "patch_order_iter",
        "relative_path",
        "unidiff_dict",
        "unidiff",
        "PatchSet",
        "from_filename",
        "patch_dir",
        "relative_path",
        "encoding",
        "ENCODING",
        "unidiff_dict",
        "patch_cache",
        "patch_set",
        "patch_cache",
        "values",
        "patched_file",
        "patch_set",
        "patched_file",
        "is_added_file",
        "new_files",
        "add",
        "patched_file",
        "path",
        "patched_file",
        "path",
        "new_files",
        "file_set",
        "add",
        "Path",
        "patched_file",
        "path",
        "file_set",
        "argparse",
        "ArgumentParser",
        "description",
        "__doc__",
        "parser",
        "add_mutually_exclusive_group",
        "required",
        "file_source_group",
        "add_argument",
        "Path",
        "metavar",
        "help",
        "file_source_group",
        "add_argument",
        "action",
        "help",
        "file_source_group",
        "add_argument",
        "Path",
        "metavar",
        "help",
        "parser",
        "parse_args",
        "args",
        "cache_remote",
        "args",
        "cache_remote",
        "exists",
        "parser",
        "error",
        "format",
        "args",
        "cache_remote",
        "x",
        "x",
        "ConfigBundle",
        "x",
        "load_depends",
        "_CONFIG_BUNDLES_PATH",
        "iterdir",
        "_get_patch_trie",
        "bundle_cache",
        "_load_all_patches",
        "bundle_cache",
        "values",
        "_get_required_files",
        "patch_cache",
        "args",
        "local",
        "_retrieve_local_files",
        "required_files",
        "args",
        "local",
        "_retrieve_remote_files",
        "required_files",
        "args",
        "cache_remote",
        "file_path",
        "file_content",
        "orig_files",
        "items",
        "args",
        "cache_remote",
        "file_path",
        "parent",
        "exists",
        "args",
        "cache_remote",
        "file_path",
        "parent",
        "mkdir",
        "parents",
        "args",
        "cache_remote",
        "file_path",
        "write_text",
        "file_content",
        "encoding",
        "ENCODING",
        "parser",
        "exit",
        "_test_patches",
        "patch_trie",
        "bundle_cache",
        "patch_cache",
        "orig_files",
        "had_failure",
        "parser",
        "exit",
        "status",
        "main"
    ],
    "literals": [
        "'config_bundles'",
        "'patches'",
        "'Var'",
        "'Unexpected call of \"%s\" at line %s, column %s'",
        "'Unexpected {} at line {}, column {}'",
        "'ERROR: %s'",
        "'vars'",
        "'__builtins__'",
        "'Var'",
        "'googlesource.com'",
        "'Repository URL is not a googlesource.com URL: {}'",
        "'/+/{}/{}?format=TEXT'",
        "'Downloading: %s'",
        "'UTF-8'",
        "'url'",
        "'url'",
        "'{'",
        "'vars'",
        "'@'",
        "'Invalid number of @ symbols in URL: {}'",
        "'deps'",
        "'recursedeps'",
        "'DEPS'",
        "'@'",
        "'use_relative_paths'",
        "'src'",
        "'src'",
        "'https://chromium.googlesource.com/chromium/src.git'",
        "'DEPS'",
        "'Hunk is not valid: {}'",
        "'\\n'",
        "\"Line '{}' does not match removal line '{}' from patch\"",
        "\"Line '{}' does not match context line '{}' from patch\"",
        "'Verifying at depth %s: %s'",
        "\"Error processing file '%s' from patch '%s'\"",
        "'-l'",
        "'--local'",
        "'DIRECTORY'",
        "'Use a local source tree'",
        "'-r'",
        "'--remote'",
        "'store_true'",
        "'Download the required source tree files from Google'",
        "'-c'",
        "'--cache-remote'",
        "'DIRECTORY'",
        "'(For debugging) Store the required remote files in an empty local directory'",
        "'Path {} does not exist'",
        "'__main__'"
    ],
    "variables": [
        "_CONFIG_BUNDLES_PATH",
        "_PATCHES_PATH",
        "_valid_syntax_types",
        "_allowed_callables",
        "deps_globals",
        "deps_globals",
        "full_url",
        "response",
        "url",
        "url",
        "url",
        "url",
        "dep_path",
        "dep_path",
        "grandchild_deps_tree",
        "grandchild_deps_tree",
        "recursedeps_item_path",
        "recursedeps_item_depsfile",
        "grandchild_deps_tree",
        "grandchild_deps_tree",
        "child_deps_tree",
        "dep_path",
        "repo_url",
        "version",
        "child_deps_tree",
        "deps_globals",
        "child_deps_tree",
        "current_deps_tree",
        "child_path",
        "deps_use_relative_paths",
        "current_deps_tree",
        "current_node",
        "current_relative_path",
        "previous_relative_path",
        "deps_use_relative_paths",
        "child_path",
        "previous_relative_path",
        "current_relative_path",
        "current_node",
        "current_deps_tree",
        "deps_use_relative_paths",
        "repo_url",
        "version",
        "_",
        "deps_tree",
        "files",
        "deps_tree",
        "download_session",
        "stream",
        "files",
        "file_path",
        "files",
        "files",
        "file_path",
        "dependency_path",
        "patch_trie",
        "unexplored_bundles",
        "current_path",
        "current_trie_node",
        "current_trie_node",
        "dependency_path",
        "current_trie_node",
        "current_trie_node",
        "current_path",
        "line_cursor",
        "line_cursor",
        "normalized_line",
        "file_lines",
        "patched_file_path",
        "child_files",
        "patched_file_path",
        "child_files",
        "patched_file_path",
        "child_files",
        "patched_file_path",
        "node_iter_stack",
        "file_layers",
        "had_failure",
        "child_path",
        "grandchildren",
        "child_files",
        "file_layers",
        "branch_validation_failed",
        "child_bundle",
        "child_patch_order",
        "branch_validation_failed",
        "had_failure",
        "unidiff_dict",
        "patch_order_iter",
        "unidiff_dict",
        "relative_path",
        "new_files",
        "file_set",
        "parser",
        "file_source_group",
        "args",
        "bundle_cache",
        "patch_trie",
        "patch_cache",
        "required_files",
        "orig_files",
        "orig_files",
        "had_failure"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "-*- coding: utf-8 -*-",
        "Copyright (c) 2018 The ungoogled-chromium Authors. All rights reserved.",
        "Use of this source code is governed by a BSD-style license that can be",
        "found in the LICENSE file.",
        "pylint: disable=invalid-name",
        "pylint: disable=exec-used",
        "Assume all files that need patching are compatible with UTF-8",
        "Ignore other types like CIPD since",
        "it probably isn't necessary",
        "Probably a Python format string",
        "Not applicable to the current DEPS tree path",
        "Delaying creation of dict() until it's needed",
        "Some sort of iterable",
        "This dep is not recursive; i.e. it is fully loaded",
        "Load unloaded DEPS",
        "The \"deps\" from the current DEPS file",
        "Path relative to the current node (i.e. DEPS file)",
        "previous_relative_path does not start with child_path",
        "current_node will match with current_deps_tree after the next statement",
        "Load requests here so it isn't a dependency for local file reading",
        "To ensure connection to Google can be reused",
        "Remove the bundle from being explored in _get_patch_trie()",
        "Since this bundle is a dependency of something else, it must be checked first",
        "before the dependent",
        "First, get all dependencies of the current dependency in order",
        "Then, add the dependency itself",
        "Returned trie",
        "All bundles that haven't been added to the trie, either as a dependency or",
        "in this function explicitly",
        "Construct patch_trie",
        "The root node of the trie",
        "Construct a branch in the patch trie up to the closest dependency",
        "by using the desired traversal to the config bundle.",
        "This is essentially a depth-first tree construction algorithm",
        "Walk to the child node",
        "Finally, add the dependency itself as a leaf node of the trie",
        "If the assertion fails, the algorithm is broken",
        "Potential optimization: Check if leaves patch the same files as their parents.",
        "(i.e. if the set of files patched by the bundle is disjoint from that of the parent bundle)",
        "If not, move them up to their grandparent, rescan the tree leaves, and repeat",
        "Then, group leaves and their parents and see if the set of files patched is disjoint from",
        "that of the grandparents. Repeat this with great-grandparents and increasingly larger",
        "groupings until all groupings end up including the top-level nodes.",
        "This optimization saves memory by not needing to store all the patched files of",
        "a long branch at once.",
        "However, since the trie for the current structure is quite flat and all bundles are",
        "quite small (except common, which is by far the largest), this isn't necessary for now.",
        "Cursor for keeping track of the current line during hunk application",
        "NOTE: The cursor is based on the line list index, not the line number!",
        "Validate hunk will match",
        "Should be only one hunk",
        "Patching an existing file",
        "Stack of iterables over each node's children",
        "First, insert iterable over root node's children",
        "Stack of files at each node differing from the parent",
        "The root node thus contains all the files to be patched",
        "Whether any branch had failed validation",
        "Finished exploring all children of this node",
        "Add storage for child's patched files",
        "Apply children's patches",
        "Potential optimization: Use interval tree data structure instead of copying",
        "the entire array to track only diffs",
        "Whether the curent patch trie branch failed validation",
        "No patches in the bundle",
        "Branch failed validation; abort",
        "Add blank children to force stack to move onto the next branch",
        "Explore this child's children",
        "Files introduced by patches",
        "Path to bundle -> ConfigBundle without dependencies",
        "--remote and --cache-remote"
    ],
    "docstrings": [
        "\"\"\"\nValidates that all patches apply cleanly against the source tree.\n\nThe required source tree files can be retrieved from Google directly.\n\"\"\"",
        "\"\"\"Raised when unexpected syntax is used in DEPS\"\"\"",
        "\"\"\"Override Call syntax handling\"\"\"",
        "\"\"\"Returns True if the DEPS file passes validation; False otherwise\"\"\"",
        "\"\"\"Return a function that implements DEPS's Var() function\"\"\"",
        "\"\"\"Implementation of Var() in DEPS\"\"\"",
        "\"\"\"Returns a dict of parsed DEPS data\"\"\"",
        "\"\"\"\n    Returns the contents of the text file with path within the given\n    googlesource.com repo as a string.\n    \"\"\"",
        "\"\"\"Helper for _process_deps_entries\"\"\"",
        "\"\"\"Helper for _get_child_deps_tree\"\"\"",
        "\"\"\"Helper for _download_source_file\"\"\"",
        "\"\"\"\n    Downloads the source tree file from googlesource.com\n\n    download_session is an active requests.Session() object\n    deps_dir is a pathlib.Path to the directory containing a DEPS file.\n    \"\"\"",
        "\"\"\"\n    Initializes and returns a dependency tree for DEPS files\n\n    The DEPS tree is a dict has the following format:\n    key - pathlib.Path relative to the DEPS file's path\n    value - tuple(repo_url, version, recursive dict here)\n        repo_url is the URL to the dependency's repository root\n        If the recursive dict is a string, then it is a string to the DEPS file to load\n            if needed\n\n    download_session is an active requests.Session() object\n    \"\"\"",
        "\"\"\"\n    Retrieves all file paths in file_iter from Google\n\n    file_iter is an iterable of strings that are relative UNIX paths to\n        files in the Chromium source.\n\n    Returns a dict of relative UNIX path strings to a list of lines in the file as strings\n    \"\"\"",
        "\"\"\"\n    Retrieves all file paths in file_iter from the local source tree\n\n    file_iter is an iterable of strings that are relative UNIX paths to\n        files in the Chromium source.\n\n    Returns a dict of relative UNIX path strings to a list of lines in the file as strings\n    \"\"\"",
        "\"\"\"\n    Generates the bundle's and dependencies' dependencies ordered by the deepest dependency first\n    \"\"\"",
        "\"\"\"\n    Returns a trie of config bundles and their dependencies. It is a dict of the following format:\n    key: pathlib.Path of config bundle\n    value: dict of direct dependents of said bundle, in the same format as the surrounding dict.\n    \"\"\"",
        "\"\"\"Helper for _apply_file_unidiff\"\"\"",
        "\"\"\"Applies the unidiff.PatchedFile to the files at the current file layer\"\"\"",
        "\"\"\"\n    Tests the patches with DFS in the trie of config bundles\n\n    Returns a boolean indicating if any of the patches have failed\n    \"\"\"",
        "\"\"\"Returns a dict of relative UNIX path strings to unidiff.PatchSet\"\"\"",
        "\"\"\"Returns an iterable of pathlib.Path files needed from the source tree for patching\"\"\"",
        "\"\"\"CLI Entrypoint\"\"\""
    ],
    "functions": [
        "visit_Call",
        "generic_visit",
        "_validate_deps",
        "_deps_var",
        "_var_impl",
        "_parse_deps",
        "_download_googlesource_file",
        "_get_dep_value_url",
        "_process_deps_entries",
        "_get_child_deps_tree",
        "_download_source_file",
        "_initialize_deps_tree",
        "_retrieve_remote_files",
        "_retrieve_local_files",
        "_generate_full_bundle_depends",
        "_get_patch_trie",
        "_modify_file_lines",
        "_apply_file_unidiff",
        "_test_patches",
        "_load_all_patches",
        "_get_required_files",
        "main"
    ],
    "classes": [
        "_UnexpectedSyntax",
        "_DepsNodeVisitor"
    ]
}