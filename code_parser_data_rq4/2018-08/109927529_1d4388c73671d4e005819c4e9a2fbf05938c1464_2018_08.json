{
    "identifiers": [
        "isPlatformBrowser",
        "AfterContentInit",
        "AfterViewInit",
        "ChangeDetectionStrategy",
        "Component",
        "ContentChild",
        "ContentChildren",
        "ElementRef",
        "EventEmitter",
        "Inject",
        "Input",
        "IterableDiffer",
        "IterableDiffers",
        "OnDestroy",
        "OnInit",
        "Output",
        "PLATFORM_ID",
        "QueryList",
        "Renderer2",
        "ViewChild",
        "ViewContainerRef",
        "IterableChangeRecord",
        "ChangeDetectorRef",
        "DoCheck",
        "IterableChanges",
        "NguCarouselItemDirective",
        "NguCarouselNextDirective",
        "NguCarouselPrevDirective",
        "NguCarouselDefDirective",
        "NguCarouselOutlet",
        "NguCarouselConfig",
        "NguCarouselStore",
        "NguCarouselOutletContext",
        "Observable",
        "Subscription",
        "of",
        "Component",
        "ChangeDetectionStrategy",
        "NguCarouselStore",
        "Input",
        "Output",
        "EventEmitter",
        "Output",
        "EventEmitter",
        "Input",
        "data",
        "data",
        "data",
        "ContentChildren",
        "NguCarouselDefDirective",
        "ViewChild",
        "NguCarouselOutlet",
        "ContentChild",
        "NguCarouselNextDirective",
        "ElementRef",
        "ContentChild",
        "NguCarouselPrevDirective",
        "ElementRef",
        "ViewChild",
        "ElementRef",
        "ViewChild",
        "ElementRef",
        "_el",
        "_renderer",
        "_differs",
        "Inject",
        "PLATFORM_ID",
        "platformId",
        "cdr",
        "dataSource",
        "dataSource",
        "dataStream",
        "of",
        "dataStream",
        "dataStream",
        "data",
        "data",
        "data",
        "dataDiffer",
        "viewContainer",
        "parentData",
        "item",
        "adjustedPreviousIndex",
        "currentIndex",
        "data",
        "currentIndex",
        "currentIndex",
        "NguCarouselOutletContext",
        "data",
        "currentIndex",
        "context",
        "currentIndex",
        "viewContainer",
        "node",
        "context",
        "currentIndex",
        "data",
        "i",
        "i",
        "data",
        "nodeDef",
        "clearInterval",
        "i",
        "i",
        "i",
        "i",
        "clearTimeout",
        "setTimeout",
        "Hammer",
        "hammertime",
        "Hammer",
        "hammertime",
        "ev",
        "hammertime",
        "ev",
        "ev",
        "hammertime",
        "ev",
        "ev",
        "hammertime",
        "ev",
        "ev",
        "hammertime",
        "ev",
        "ev",
        "hammertime",
        "ev",
        "ev",
        "ev",
        "direc",
        "direc",
        "direc",
        "hammertime",
        "ev",
        "ev",
        "e",
        "ev",
        "ev",
        "ev",
        "ev",
        "ev",
        "ev",
        "valt",
        "ev",
        "valt",
        "ev",
        "e",
        "e",
        "valt",
        "e",
        "valt",
        "e",
        "condition",
        "valt",
        "valt",
        "top",
        "scrollY",
        "heightt",
        "carouselHeight",
        "top",
        "carouselHeight",
        "scrollY",
        "isCarouselOnScreen",
        "isPlatformBrowser",
        "withOutAnimation",
        "withOutAnimation",
        "Nos",
        "i",
        "i",
        "pointers",
        "i",
        "pointers",
        "i",
        "slide",
        "withOutAnimation",
        "withOutAnimation",
        "slide",
        "slide",
        "slide",
        "slide",
        "slideremains",
        "slide",
        "slideremains",
        "slideremains",
        "slide",
        "btns",
        "slideremains",
        "dism",
        "itemStyle",
        "itemWidth_xs",
        "itemWidth_sm",
        "itemWidth_md",
        "itemWidth_lg",
        "itemStyle",
        "itemWidth_xs",
        "itemWidth_sm",
        "itemWidth_md",
        "itemWidth_lg",
        "itemStyle",
        "dism",
        "itemStyle",
        "Btn",
        "Btn",
        "currentSlideD",
        "currentSlide",
        "itemSpeed",
        "MoveSlide",
        "currentSlide",
        "translateXval",
        "touchMove",
        "currentSlide",
        "touchMove",
        "itemSpeed",
        "currentSlide",
        "Btn",
        "currentSlide",
        "itemSpeed",
        "Btn",
        "currentSlide",
        "currentSlide",
        "translateXval",
        "itemSpeed",
        "touchMove",
        "currentSlide",
        "touchMove",
        "itemSpeed",
        "currentSlide",
        "Btn",
        "currentSlide",
        "itemSpeed",
        "Btn",
        "currentSlide",
        "itemSpeed",
        "val",
        "somt",
        "somt",
        "itemSpeed",
        "itemSpeed",
        "somt",
        "itemSpeed",
        "somt",
        "somt",
        "itemSpeed",
        "Btn",
        "currentSlide",
        "currentSlide",
        "itemSpeed",
        "currentSlide",
        "currentSlide",
        "currentSlide",
        "first",
        "last",
        "first",
        "last",
        "grid",
        "slide",
        "collect",
        "grid",
        "grid",
        "slide",
        "collect",
        "grid",
        "grid",
        "grid",
        "slide",
        "collect",
        "grid",
        "collect",
        "collect",
        "slide",
        "slideCss",
        "slide",
        "slide",
        "slide",
        "slide",
        "slide",
        "slideCss",
        "slideCss",
        "i",
        "i",
        "text",
        "possible",
        "possible",
        "text",
        "clearTimeout",
        "setTimeout",
        "setTimeout",
        "setInterval",
        "ev",
        "ev",
        "clearTimeout",
        "setTimeout",
        "direction",
        "start",
        "end",
        "speed",
        "length",
        "length",
        "length",
        "val",
        "val",
        "val",
        "direction",
        "start",
        "i",
        "end",
        "i",
        "val",
        "val",
        "itemList",
        "i",
        "itemList",
        "i",
        "val",
        "end",
        "i",
        "start",
        "i",
        "val",
        "val",
        "itemList",
        "i",
        "itemList",
        "i",
        "val",
        "setTimeout",
        "elem",
        "elem",
        "speed",
        "arr",
        "arr",
        "el",
        "prop",
        "val",
        "el",
        "prop",
        "val",
        "datas",
        "datas",
        "datas",
        "styleItem",
        "styleText",
        "styleItem",
        "styleItem"
    ],
    "literals": [
        "'@angular/common'",
        "'@angular/core'",
        "'./../ngu-carousel.directive'",
        "'./ngu-carousel'",
        "'rxjs'",
        "'ngu-carousel'",
        "'ngu-carousel.component.html'",
        "'ngu-carousel.component.scss'",
        "string",
        "string",
        "'inputs'",
        "'carouselLoad'",
        "'onMove'",
        "'dataSource'",
        "'ngucarousel'",
        "'nguitems'",
        "'click'",
        "'click'",
        "'window'",
        "'resize'",
        "'fixed'",
        "'responsive'",
        "'cubic-bezier(0, 0, 0.2, 1)'",
        "'number'",
        "''",
        "'-'",
        "'undefined'",
        "listener${i}",
        "listener${i}",
        "'transition'",
        "",
        "'pan'",
        "'panstart'",
        "'transition'",
        "''",
        "'panup'",
        "'panleft'",
        "'pandown'",
        "'panright'",
        "'panleft'",
        "'panleft'",
        "'panright'",
        "'panright'",
        "'panend'",
        "'panright'",
        "'panright'",
        "'transition'",
        "'transform 324ms cubic-bezier(0, 0, 0.2, 1)'",
        "'transform'",
        "''",
        "'hammer.input'",
        "string",
        "'responsive'",
        "string",
        "'panright'",
        "'panleft'",
        "'responsive'",
        "'%'",
        "'px'",
        "'transform'",
        "translate3d(0, ${this.directionSym}${this.touchTransform}${type}, 0)",
        "translate3d(${this.directionSym}${this.touchTransform}${type}, 0, 0)",
        "'responsive'",
        "'lg'",
        "'md'",
        "'sm'",
        "'xs'",
        "'all'",
        "''",
        "''",
        ".${this.token} > .ngucarousel > .ngucarousel-items",
        "'banner'",
        "'banner'",
        "'lazy'",
        "${this.styleid} > .item {transition: transform .6s ease;}",
        "''",
        "${this.styleid} > .item {height: ${this.vertical\n        .height / +this.inputs.grid.xs}px}",
        "${this.styleid} > .item {height: ${this.vertical\n        .height / +this.inputs.grid.sm}px}",
        "${this.styleid} > .item {height: ${this.vertical\n        .height / +this.inputs.grid.md}px}",
        "${this.styleid} > .item {height: ${this.vertical\n        .height / +this.inputs.grid.lg}px}",
        "@media (max-width:767px){${itemWidth_xs}}\n                    @media (min-width:768px){${itemWidth_sm}}\n                    @media (min-width:992px){${itemWidth_md}}\n                    @media (min-width:1200px){${itemWidth_lg}}",
        "'responsive'",
        "'mobile'",
        "${this.styleid} .item {flex: 0 0 ${95 / +this.inputs.grid.xs}%; width: ${95 / +this.inputs.grid.xs}%;}",
        "${this.styleid} .item {flex: 0 0 ${100 / +this.inputs.grid.xs}%; width: ${100 / +this.inputs.grid.xs}%;}",
        "${this.styleid} > .item {flex: 0 0 ${100 /\n        +this.inputs.grid.sm}%; width: ${100 / +this.inputs.grid.sm}%}",
        "${this.styleid} > .item {flex: 0 0 ${100 /\n        +this.inputs.grid.md}%; width: ${100 / +this.inputs.grid.md}%}",
        "${this.styleid} > .item {flex: 0 0 ${100 /\n        +this.inputs.grid.lg}%; width: ${100 / +this.inputs.grid.lg}%}",
        "@media (max-width:767px){${itemWidth_xs}}\n                    @media (min-width:768px){${itemWidth_sm}}\n                    @media (min-width:992px){${itemWidth_md}}\n                    @media (min-width:1200px){${itemWidth_lg}}",
        "${this.styleid} .item {flex: 0 0 ${this.inputs.grid.all}px; width: ${this.inputs.grid.all}px;}",
        "'nguvertical'",
        "'height'",
        "${this.vertical.height}px",
        "'ngurtl'",
        "${dism} ${itemStyle}",
        "'transform'",
        "''",
        "'transition'",
        "transform ${itemSpeed}ms ${this.inputs.easing}",
        "'transition'",
        "",
        "string",
        "string",
        "''",
        "${this.styleid} { transform: translate3d(",
        "0, -${this.transform[grid]}px, 0",
        "${this.directionSym}${this.transform[grid]}%, 0, 0",
        "); }",
        "''",
        "'responsive'",
        "@media (max-width: 767px) {${this._transformString(\n        'xs',\n        slide\n      )}}\n      @media (min-width: 768px) {${this._transformString('sm', slide)} }\n      @media (min-width: 992px) {${this._transformString('md', slide)} }\n      @media (min-width: 1200px) {${this._transformString('lg', slide)} }",
        "'xs'",
        "'sm'",
        "'md'",
        "'lg'",
        "${this.styleid} { transform: translate3d(${\n        this.directionSym\n      }${this.transform.all}px, 0, 0);",
        "'number'",
        "string",
        "''",
        "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'",
        "ngucarousel${text}",
        "'touchstart'",
        "'touchend'",
        "'mouseenter'",
        "'mouseleave'",
        "'window'",
        "'scroll'",
        "'transform'",
        "translate3d(${val}px, 0, 0)",
        "'transform'",
        "translate3d(-${val}px, 0, 0)",
        "'transform'",
        "translate3d(0, 0, 0)",
        "'none'",
        "'block'",
        "'none'",
        "'block'",
        "'block'",
        "'block'",
        "string",
        "'style'"
    ],
    "variables": [
        "dataStream",
        "node",
        "context",
        "nodeDef",
        "i",
        "hammertime",
        "direc",
        "valt",
        "condition",
        "top",
        "scrollY",
        "heightt",
        "carouselHeight",
        "isCarouselOnScreen",
        "Nos",
        "pointers",
        "i",
        "i",
        "slideremains",
        "btns",
        "dism",
        "itemStyle",
        "itemWidth_xs",
        "itemWidth_sm",
        "itemWidth_md",
        "itemWidth_lg",
        "itemWidth_xs",
        "itemWidth_sm",
        "itemWidth_md",
        "itemWidth_lg",
        "itemSpeed",
        "translateXval",
        "currentSlide",
        "touchMove",
        "slide",
        "currentSlideD",
        "MoveSlide",
        "val",
        "somt",
        "collect",
        "slideCss",
        "text",
        "possible",
        "i",
        "val",
        "itemList",
        "i",
        "i",
        "arr",
        "styleItem",
        "styleText"
    ],
    "comments": [
        "tslint:disable-next-line:component-selector",
        "tslint:disable-next-line:component-class-suffix",
        "tslint:disable-next-line:no-output-on-prefix",
        "isFirstss = 0;",
        "console.log(data, this.dataSource);",
        "this.isFirstss++;",
        "@ContentChildren(NguCarouselItemDirective, { read: ElementRef })",
        "private items: QueryList<ElementRef>;",
        "@ViewChild('main', { read: ElementRef })",
        "private carousel1: ElementRef;",
        "@ViewChild('forTouch', { read: ElementRef })",
        "private forTouch: ElementRef;",
        "console.log('Changes detected!');",
        "console.log('carouselSwitch', this._defDirec);",
        "if (this._defDirec && this.isFirstss > 1) {",
        "console.log('carouselobser', this._defDirec);",
        "console.log('observerRender', !!this.carousel);",
        "console.log(this.carouselMain1.nativeElement.offsetWidth);",
        "this._storeCarouselData();",
        "this._buttonControl();",
        "console.log(data);",
        "const changes = dataDiffer.diff(data);",
        "console.log(this.arrayChanges);",
        "console.log(this.arrayChanges);",
        "const node = this._defDirec.find(items => item.item);",
        "console.log(context);",
        "if (item.previousIndex == null) {",
        "} else if (currentIndex == null) {",
        "viewContainer.remove(adjustedPreviousIndex);",
        "this._levels.delete(item.item);",
        "} else {",
        "const view = viewContainer.get(adjustedPreviousIndex);",
        "viewContainer.move(view!, currentIndex);",
        "}",
        "console.log(this.dataSource);",
        "console.log(this._defDirec);",
        "console.log(window);",
        "this.carouselMain = this.carouselMain1.nativeElement;",
        "this.carouselInner = this.carouselInner1.nativeElement;",
        "this.rightBtn = this.next.nativeElement;",
        "this.leftBtn = this.prev.nativeElement;",
        "remove listeners",
        "Get Touch input",
        "allow nested touch events to no propagate, this may have other side affects but works for now.",
        "TODO: It is probably better to check the source element of the event and only apply the handle to the correct carousel",
        "handle touch input",
        "vertical touch events seem to cause to panstart event with an odd delta",
        "and a center of {x:0,y:0} so this will ignore them",
        "this used to disable the scroll when it is not on the display",
        "store data based on width of the screen for the carousel",
        "Used to reset the carousel",
        "Init carousel point",
        "debugger;",
        "if (this.userData.point.visible === true) {",
        "console.log(this.pointNumbers);",
        "}",
        "change the active point in carousel",
        "console.log(this.data);",
        "this function is used to scoll the carousel when point is clicked",
        "slide = slide - 1;",
        "set the style of the carousel based the inputs data",
        "tslint:disable-next-line:no-unused-expression",
        "logic to scroll the carousel step 1",
        "cubic-bezier(0.15, 1.04, 0.54, 1.13)",
        "logic to scroll the carousel step 2",
        "tslint:disable-next-line:no-unused-expression",
        "console.log(this.dataSource);",
        "if (currentSlide === 12) {",
        "this._switchDataSource(this.dataSource);",
        "}",
        "boolean function for making isFirst and isLast",
        "set the transform style to scroll the carousel",
        "this will trigger the carousel to load the items",
        "generate Class for each carousel to set specific style",
        "handle the auto slide",
        "pause interval for specific time",
        "tslint:disable-next-line:no-unused-expression",
        "animate the carousel items",
        "control button for loop",
        "this._setStyle(this.prev.nativeElement, 'display', arr[0]);",
        "this._setStyle(this.next.nativeElement, 'display', arr[1]);",
        "Short form for setElementStyle",
        "For generating style tag"
    ],
    "docstrings": [],
    "functions": [
        "dataSource",
        "dataSource",
        "ngOnInit",
        "ngDoCheck",
        "_switchDataSource",
        "_observeRenderChanges",
        "renderNodeChanges",
        "_getNodeDef",
        "ngAfterViewInit",
        "ngAfterContentInit",
        "_inputValidation",
        "ngOnDestroy",
        "_onResizing",
        "_touch",
        "_touchHandling",
        "_setTouchTransfrom",
        "_setTransformFromTouch",
        "_onWindowScrolling",
        "_storeCarouselData",
        "reset",
        "_carouselPoint",
        "_carouselPointActiver",
        "moveTo",
        "_carouselSize",
        "_carouselScrollOne",
        "_carouselScrollTwo",
        "_btnBoolean",
        "_transformString",
        "_transformStyle",
        "_carouselLoadTrigger",
        "_generateID",
        "_carouselInterval",
        "_carouselIntervalEvent",
        "_carouselAnimator",
        "_buttonControl",
        "_setStyle",
        "_createStyleElem"
    ],
    "classes": [
        "NguCarousel"
    ]
}