{
    "identifiers": [
        "abc",
        "oslo_config",
        "cfg",
        "oslo_log",
        "log",
        "logging",
        "six",
        "cloudkitty",
        "utils",
        "ck_utils",
        "logging",
        "getLogger",
        "cfg",
        "CONF",
        "six",
        "add_metaclass",
        "abc",
        "ABCMeta",
        "kwargs",
        "kwargs",
        "get",
        "kwargs",
        "get",
        "staticmethod",
        "json_data",
        "idx",
        "usage",
        "json_data",
        "usage",
        "candidate_ts",
        "usage_ts",
        "candidate_ts",
        "usage_ts",
        "idx",
        "candidate_ts",
        "candidate_ts",
        "json_data",
        "pop",
        "candidate_idx",
        "tenant_id",
        "abc",
        "abstractmethod",
        "tenant_id",
        "tenant_id",
        "tenant_id",
        "_has_data",
        "_has_data",
        "tenant_id",
        "_clear_usage_info",
        "tenant_id",
        "abc",
        "abstractmethod",
        "data",
        "tenant_id",
        "begin",
        "tenant_id",
        "usage_start",
        "begin",
        "usage_start_dt",
        "ck_utils",
        "ts2dt",
        "begin",
        "end",
        "tenant_id",
        "usage_end",
        "end",
        "usage_end_dt",
        "ck_utils",
        "ts2dt",
        "end",
        "tenant_id",
        "usage_start",
        "pop",
        "tenant_id",
        "usage_start_dt",
        "pop",
        "tenant_id",
        "usage_end",
        "pop",
        "tenant_id",
        "usage_end_dt",
        "pop",
        "tenant_id",
        "usage_start",
        "tenant_id",
        "usage_end",
        "get",
        "tenant_id",
        "usage_end",
        "usage_start",
        "usage_end",
        "commit",
        "tenant_id",
        "usage_start",
        "get",
        "tenant_id",
        "_update_start",
        "usage_start",
        "tenant_id",
        "_update_end",
        "usage_start",
        "_period",
        "tenant_id",
        "abc",
        "abstractmethod",
        "tenant_id",
        "abc",
        "abstractmethod",
        "begin",
        "end",
        "tenant_id",
        "service",
        "groupby",
        "abc",
        "abstractmethod",
        "begin",
        "end",
        "abc",
        "abstractmethod",
        "begin",
        "end",
        "filters",
        "raw_data",
        "tenant_id",
        "raw_data",
        "_filter_period",
        "raw_data",
        "_check_commit",
        "usage_start",
        "tenant_id",
        "_dispatch",
        "data",
        "tenant_id",
        "begin",
        "end",
        "tenant_id",
        "_check_commit",
        "begin",
        "tenant_id",
        "tenant_id",
        "_pre_commit",
        "tenant_id",
        "_commit",
        "tenant_id",
        "_post_commit",
        "tenant_id"
    ],
    "literals": [
        "'period'",
        "'collector'",
        "'period'",
        "'begin'",
        "'usage'"
    ],
    "variables": [
        "LOG",
        "CONF",
        "_period",
        "_collector",
        "usage_start",
        "usage_start_dt",
        "usage_end",
        "usage_end_dt",
        "_has_data",
        "candidate_ts",
        "candidate_idx",
        "usage_ts",
        "candidate_ts",
        "candidate_idx",
        "tenant_id",
        "tenant_id",
        "tenant_id",
        "tenant_id",
        "usage_end",
        "usage_start",
        "data"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Copyright 2014 Objectif Libre",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\"); you may",
        "not use this file except in compliance with the License. You may obtain",
        "a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT",
        "WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the",
        "License for the specific language governing permissions and limitations",
        "under the License.",
        "",
        "@author: St√©phane Albert",
        "",
        "from cloudkitty.storage import NoTimeFrame",
        "State vars"
    ],
    "docstrings": [
        "\"\"\"Base Storage class:\n\n        Handle incoming data from the global orchestrator, and store them.\n    \"\"\"",
        "\"\"\"Initialize storage backend.\n\n        Can be used to create DB schema on first start.\n        \"\"\"",
        "\"\"\"Detect the best usage period to extract.\n\n        Removes the usage from the json data and returns it.\n        :param json_data: Data to filter.\n        \"\"\"",
        "\"\"\"Called before every commit.\n\n        :param tenant_id: tenant_id which information must be committed.\n        \"\"\"",
        "\"\"\"Push data to the storage backend.\n\n        :param tenant_id: tenant_id which information must be committed.\n        \"\"\"",
        "\"\"\"Called after every commit.\n\n        :param tenant_id: tenant_id which information must be committed.\n        \"\"\"",
        "\"\"\"Process rated data.\n\n        :param data: The rated data frames.\n        :param tenant_id: tenant_id which data must be dispatched to.\n        \"\"\"",
        "\"\"\"Update usage_start with a new timestamp.\n\n        :param begin: New usage beginning timestamp.\n        :param tenant_id: tenant_id to update.\n        \"\"\"",
        "\"\"\"Update usage_end with a new timestamp.\n\n        :param end: New usage end timestamp.\n        :param tenant_id: tenant_id to update.\n        \"\"\"",
        "\"\"\"Clear usage information timestamps.\n\n        :param tenant_id: tenant_id which information needs to be removed.\n        \"\"\"",
        "\"\"\"Check if the period for a given tenant must be committed.\n\n        :param usage_start: Start of the period.\n        :param tenant_id: tenant_id to check for.\n        \"\"\"",
        "\"\"\"Return the last written frame's timestamp.\n\n        :param tenant_id: tenant_id to filter on.\n        \"\"\"",
        "\"\"\"Return the current total.\n\n        :param begin: When to start filtering.\n        :type begin: datetime.datetime\n        :param end: When to stop filtering.\n        :type end: datetime.datetime\n        :param tenant_id: Filter on the tenant_id.\n        :type res_type: str\n        :param service: Filter on the resource type.\n        :type service: str\n        :param groupby: Fields to group by, separated by commas if multiple.\n        :type groupby: str\n        \"\"\"",
        "\"\"\"Return the list of rated tenants.\n\n        :param begin: When to start filtering.\n        :type begin: datetime.datetime\n        :param end: When to stop filtering.\n        :type end: datetime.datetime\n        \"\"\"",
        "\"\"\"Request a time frame from the storage backend.\n\n        :param begin: When to start filtering.\n        :type begin: datetime.datetime\n        :param end: When to stop filtering.\n        :type end: datetime.datetime\n        :param res_type: (Optional) Filter on the resource type.\n        :type res_type: str\n        :param tenant_id: (Optional) Filter on the tenant_id.\n        :type res_type: str\n        \"\"\"",
        "\"\"\"Append rated data before committing them to the backend.\n\n        :param raw_data: The rated data frames.\n        :param tenant_id: Tenant the frame is belonging to.\n        \"\"\"",
        "\"\"\"Append a no data frame to the storage backend.\n\n        :param begin: Begin of the period with no data.\n        :param end: End of the period with no data.\n        :param tenant_id: Tenant to update with no data marker for the period.\n        \"\"\"",
        "\"\"\"Commit the changes to the backend.\n\n        :param tenant_id: Tenant the changes belong to.\n        \"\"\""
    ],
    "functions": [
        "init",
        "_filter_period",
        "_pre_commit",
        "_commit",
        "_post_commit",
        "_dispatch",
        "_update_start",
        "_update_end",
        "_clear_usage_info",
        "_check_commit",
        "get_state",
        "get_total",
        "get_tenants",
        "get_time_frame",
        "append",
        "nodata",
        "commit"
    ],
    "classes": [
        "BaseStorage"
    ]
}