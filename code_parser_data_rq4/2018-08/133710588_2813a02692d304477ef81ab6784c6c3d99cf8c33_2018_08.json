{
    "identifiers": [
        "Store",
        "Tet",
        "canvasId",
        "highScoresListId",
        "devModeOn",
        "Game",
        "Game",
        "canvasId",
        "highScoresListId",
        "devModeOn",
        "devModeOn",
        "canvasId",
        "Game",
        "Game",
        "highScoresListId",
        "Store",
        "that",
        "pausedBeforeBlur",
        "that",
        "clearInterval",
        "that",
        "that",
        "that",
        "pausedBeforeBlur",
        "that",
        "that",
        "that",
        "that",
        "that",
        "e",
        "e",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "skip",
        "skip",
        "clearInterval",
        "that",
        "that",
        "that",
        "skip",
        "that",
        "that",
        "that",
        "that",
        "clearInterval",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "clearInterval",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "e",
        "that",
        "that",
        "that",
        "that",
        "clearInterval",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "e",
        "num",
        "num",
        "numIn",
        "numIn",
        "get3ConsecutiveDigits",
        "numOut",
        "numOut",
        "numOut",
        "get3ConsecutiveDigits",
        "numIn",
        "numOut",
        "numIn",
        "numOut",
        "highScores",
        "i",
        "len",
        "i",
        "html",
        "highScores",
        "i",
        "elem",
        "elem",
        "html",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "row",
        "len",
        "row",
        "c",
        "row",
        "row",
        "c",
        "c",
        "c",
        "tetColor",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "tmpPotTopLeft",
        "tmpPotTopLeft",
        "tmpPotTopLeft",
        "c",
        "c",
        "tmpPotTopLeft",
        "tmpPotTopLeft",
        "row",
        "len",
        "row",
        "c",
        "tmpPotTopLeft",
        "row",
        "tmpPotTopLeft",
        "row",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "potPerim",
        "c",
        "c",
        "potPerim",
        "potPerim",
        "row",
        "len",
        "row",
        "c",
        "potPerim",
        "row",
        "potPerim",
        "row",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "tet",
        "aTLen",
        "tet",
        "tet",
        "c",
        "c",
        "currTet",
        "currTet",
        "currTet",
        "currTet",
        "currTet",
        "row",
        "len",
        "row",
        "c",
        "currTet",
        "currTet",
        "row",
        "currTet",
        "currTet",
        "row",
        "c",
        "c",
        "c",
        "tetColor",
        "currTet",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "highscores",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "highscores",
        "c",
        "t",
        "t",
        "t",
        "Tet",
        "t",
        "Tet",
        "clearInterval",
        "clearInterval",
        "that",
        "that",
        "clearInterval",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "that",
        "tet",
        "tet",
        "i",
        "Game",
        "i",
        "i",
        "aT",
        "i",
        "len",
        "i",
        "aT",
        "i",
        "aT",
        "i",
        "tet",
        "aT",
        "i",
        "row",
        "rLen",
        "row",
        "aT",
        "i",
        "row",
        "col",
        "cLen",
        "col",
        "aT",
        "i",
        "row",
        "col",
        "row",
        "aT",
        "i",
        "col",
        "aT",
        "i",
        "fullRows",
        "fullRows",
        "fullRows",
        "fullRows",
        "tet",
        "len",
        "tet",
        "tet",
        "firstRow",
        "tet",
        "lastRow",
        "tet",
        "fullRows",
        "i",
        "len2",
        "i",
        "i",
        "i",
        "v",
        "v",
        "highScores",
        "i",
        "hsLen",
        "i",
        "highScores",
        "i",
        "highScores",
        "i",
        "highScores",
        "hsLen",
        "highScores",
        "highScores",
        "highScores",
        "n",
        "n"
    ],
    "literals": [
        "'./store'",
        "'./tet'",
        "string",
        "string",
        "string",
        "'config'",
        "'unrecognized key: '",
        "'$1'",
        "','",
        "'$2'",
        "''",
        "'<li>'",
        "'</li>'",
        "'#3cc'",
        "'#0af'",
        "'#f90'",
        "'#ee0'",
        "'#0c0'",
        "'#c0c'",
        "'#c00'",
        "'2d'",
        "'#f00'",
        "'16px Arial'",
        "'PAUSED'",
        "'#000'",
        "'16px Arial'",
        "'Score: '",
        "'16px Arial'",
        "'Next:'",
        "'#000'",
        "'#eee'",
        "'#000'",
        "'#0a0'",
        "'15px Arial'",
        "'DEV'",
        "'#eee'",
        "'#ddd'",
        "'#eee'",
        "'#ddd'",
        "'#000'",
        "'#333'",
        "'#f00'",
        "'bold 32px Arial'",
        "'GAME OVER'",
        "'#000'",
        "'GAME OVER'",
        "'#fff'",
        "'bold 18px Arial'",
        "'Your Score:'",
        "'#f00'",
        "'bold 19px Arial'",
        "'#000'",
        "'bold 18px Arial'",
        "'Your Score:'",
        "'bold 19px Arial'",
        "'#fff'",
        "'bold 17px Arial'",
        "'Personal Highest Score:'",
        "'#f00'",
        "'bold 19px Arial'",
        "'#000'",
        "'bold 17px Arial'",
        "'Personal Highest Score:'",
        "'bold 19px Arial'",
        "'highScores'",
        "'highScores'",
        "'Test cases not enabled yet.'"
    ],
    "variables": [
        "that",
        "pausedBeforeBlur",
        "skip",
        "numIn",
        "numOut",
        "get3ConsecutiveDigits",
        "highScores",
        "html",
        "len",
        "i",
        "elem",
        "tetColor",
        "c",
        "len",
        "row",
        "tmpPotTopLeft",
        "len",
        "row",
        "potPerim",
        "len",
        "row",
        "aTLen",
        "tet",
        "currTet",
        "len",
        "row",
        "highscores",
        "t",
        "that",
        "i",
        "aT",
        "len",
        "i",
        "rLen",
        "row",
        "cLen",
        "col",
        "firstRow",
        "lastRow",
        "len",
        "tet",
        "len2",
        "i",
        "highScores",
        "hsLen",
        "i"
    ],
    "comments": [
        "Represents our game board and interface",
        "Public Vars",
        "Developer Mode (when enabled/true, test cases can be ran via keybinds)",
        "This is the array of all Tets that are in the game.",
        "This is the score that we're going to use to display.",
        "TODO: Add comment",
        "TODO: Add comment",
        "Private vars",
        "This is the length of the side of each \"block\" on the game, in pixels.",
        "This is the DOM element for which we are going to be drawing on.",
        "TODO: Add comment",
        "Force instantiation",
        "TODO: Add ability to pass in {options}",
        "Private vars",
        "750",
        "Assume block width and height will always be the same:",
        "Init functions",
        "Pause if we lose focus of the game. Resume once we get focus back. We",
        "don't need the Page Visibility API because we don't have a resource",
        "intensive game while it's idle",
        "Handle key events",
        "For keycodes: http://www.javascripter.net/faq/keycodes.htm",
        "space to move living Tet all the way down",
        "up arrow to rotate Tet clockwise",
        "left arrow to move Tet left",
        "right arrow to move Tet right",
        "down arrow to move Tet down",
        "p for pause, s for stop (they do same thing)",
        "r for reset",
        "Developer's Controls",
        "end key to move Tet up",
        "test cases found in TestCase.js",
        "number keys 0 to 9 (not numpad)",
        "g for game over",
        "that.score = 1939999955999999 // near max",
        "h to reset high score to zero",
        "tilde key to toggle dev mode",
        "from http://stackoverflow.com/a/12947816",
        "TODO: Figure out of this is the best implementation of this",
        "This method draws everything to the canvas.",
        "Keys, in order, reflect the HTML color code of Tets: I, J, L, O, S, T, Z",
        "TODO: Figure out a more graceful way of doing this",
        "clear canvas",
        "Draw top panel",
        "paused",
        "score",
        "16 numbers max, or 14 with commas. If beyond, switch to scientific",
        "notation:",
        "next Tet",
        "separator line",
        "dev mode indicator",
        "Draw living Tet \"shadow\" at bottom and rotation",
        "TODO: Figure out a more graceful way of doing this",
        "draw pivot shadow",
        "Draw all Tets",
        "Draw Game Over text if game is over",
        "gray tint",
        "game over text",
        "your score",
        "personal highest score",
        "Make sure first Tet is not an S or Z",
        "TODO: Instead of doing this, keep randomly generating a number until",
        "it's not a 4 or 6. This way there isn't a higher likelihood of starting",
        "off with a 3 or 5 (should be as fairly random as possible) - plus there",
        "isn't a performance issue to worry about since this gets generated",
        "before the game even starts.",
        "Build first Tet and next Tet",
        "TODO: Figure out how to make this check unnecessary since ideally this",
        "would never be null.",
        "Display Game Over",
        "safe guard to prevent multiple loops from spawning before clearing it out",
        "first",
        "this.tetsToRemove.sort(function(a,b){ return a - b }) // ensures indices",
        "are in numeric order",
        "console.log('setting high scores', v) // debug",
        "TODO: This is from TestCase.js"
    ],
    "docstrings": [
        "* Since the Tetris standard is to have 10 horizontal blocks by 16 vertical\n   * blocks, this is a constant set to 16.",
        "* Since the Tetris standard is to have 10 horizontal blocks by 16 vertical\n   * blocks, this is a constant set to 10.",
        "* If true, we want to create a new Tet at the beginning of the loop\n   * interval.\n   *\n   * Defaults as true since we always want to create a new Tet at the beginning\n   * of the game.",
        "* The Tet that's falling and being controlled by the player.\n   *\n   * Defaults as null since we don't start off with any Tets the moment the game\n   * gets intialized.",
        "* The Tet that's going to come into play after the currTet lands.\n   *\n   * Defaults as null since we don't start off with any Tets the moment the game\n   * gets intialized.",
        "* If true, we should update our landed array to be used in collision\n   * detection.",
        "* This is the array of all Tets that need to be removed before being drawn.",
        "* This is the boolean we check to see if we should update our high score list\n   * or not.",
        "* This is the interval, in milliseconds, for which our currTet is going to\n   * drop 1 block.",
        "* The flag that indicates when the game is over. When true, we handle the\n   * \"game over\" events.",
        "* This is the width that we set. This width can be adjusted and our game will\n   * scale to it.",
        "* This is the height of the panel which houses our score, nextTet, and\n   * PAUSED/DEV text.",
        "* This is the array of array of numbers which we are going to populate with\n   * our allTets to be able to detect Tet collision.",
        "* This is the name of the high score list DOM element for which we are going\n   * to show our user their past high scores.",
        "* Represents all of the functions which generate and control the game board.\n   * We use the {@link Tet} class to manipulate our Tets.\n   * @param canvasId This is the id of the canvas element within the document\n   *     from which this Game class was created.\n   * @param highScoresListId This is the id of the list for which we are going\n   *     to list out the user's past high scores.\n   * @param [devMode] This is the option to set the game to be initially in\n   *     Developer's Mode.",
        "* This method creates 3 event listeners (2 for the window and 1 for the\n   * document). The 2 events for the window are onblur and onfocus. These will\n   * pause the game when you leave the game window and resume it when you come\n   * back. The event for the document listens for onkeydown events. These\n   * basically allow the user to interact with the game.",
        "* This method is exclusively used in the handleEvents method. We call it\n   * every time we want to check if our Tet can be moved with the space bar and\n   * up/right/left/down arrow keys.\n   * @returns If the Tet can move, based on the conditions within the function,\n   *     then return true.",
        "* This method is used to get a floating point number and separate it with\n   * commas. We also round the number to the nearest integer.\n   * @param number A non-comma separated number.\n   * @returns A comma separated number.",
        "* This method updates the high score list that is displayed on the web page.",
        "* This method creates Tets. This also causes the Game Over screen to appear\n   * when we cannot create a new Tet.",
        "* This method creates a setInterval loop which moves our currTet down at\n   * each interval.",
        "* This method generates a landed array from allTets to be used to check for\n   * Tet/fragment collisions.\n   * @param tet This parameter basically excludes the given Tet from allTets\n   *     which are used to generate the landed array.",
        "* This method inserts all zeros into the rows of the shape array if they are\n   * going to be removed. Once we do this, we call the updateLanded method.\n   * @param fullRows This is the list of all rows that are to be removed from\n   *     the Tet shapes.",
        "* This method gets the user's high scores from their cookie.\n   * @returns This is the list of the high scores of the user.",
        "* This method saves the user's high scores into the cookie.\n   * @param v This is the list of the high scores we're going to save in the\n   *     cookie.",
        "* This method basically adjusts the user's high scores if they made a higher\n   * score than before.\n   * @returns This is the list of the high scores of the user."
    ],
    "functions": [
        "handleEvents",
        "canTetMove",
        "commaSeparateNumber",
        "displayHighScores",
        "draw",
        "createTet",
        "tetDownLoop",
        "getLanded",
        "alterShapes",
        "getHighScores",
        "setHighScores",
        "checkHighScore",
        "testCase"
    ],
    "classes": [
        "Game"
    ]
}