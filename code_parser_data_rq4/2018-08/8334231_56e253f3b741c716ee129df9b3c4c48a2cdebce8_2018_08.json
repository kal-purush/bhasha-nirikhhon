{
    "identifiers": [
        "com",
        "fatboyindustrial",
        "gsonjodatime",
        "com",
        "google",
        "gson",
        "JsonDeserializationContext",
        "com",
        "google",
        "gson",
        "JsonDeserializer",
        "com",
        "google",
        "gson",
        "JsonElement",
        "com",
        "google",
        "gson",
        "JsonParseException",
        "com",
        "google",
        "gson",
        "JsonPrimitive",
        "com",
        "google",
        "gson",
        "JsonSerializationContext",
        "com",
        "google",
        "gson",
        "JsonSerializer",
        "org",
        "joda",
        "time",
        "DateTimeZone",
        "java",
        "lang",
        "reflect",
        "Type",
        "Override",
        "src",
        "typeOfSrc",
        "context",
        "src",
        "getID",
        "Override",
        "json",
        "typeOfT",
        "context",
        "json",
        "getAsString",
        "json",
        "getAsString",
        "isEmpty",
        "DateTimeZone",
        "forID",
        "json",
        "getAsString",
        "trim"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "Do not try to deserialize null or empty values"
    ],
    "docstrings": [
        "* GSON serialiser/deserialiser for converting Joda {@link DateTimeZone} objects.",
        "* Gson invokes this call-back method during serialization when it encounters a field of the\n     * specified type. <p>\n     * <p>\n     * In the implementation of this call-back method, you should consider invoking\n     * {@link JsonSerializationContext#serialize(Object, Type)} method to create JsonElements for any\n     * non-trivial field of the {@code src} object. However, you should never invoke it on the\n     * {@code src} object itself since that will cause an infinite loop (Gson will call your\n     * call-back method again).\n     *\n     * @param src       the object that needs to be converted to Json.\n     * @param typeOfSrc the actual type (fully genericized version) of the source object.\n     * @return a JsonElement corresponding to the specified object.",
        "* Gson invokes this call-back method during deserialization when it encounters a field of the\n     * specified type. <p>\n     * <p>\n     * In the implementation of this call-back method, you should consider invoking\n     * {@link JsonDeserializationContext#deserialize(JsonElement, Type)} method to create objects\n     * for any non-trivial field of the returned object. However, you should never invoke it on the\n     * the same type passing {@code json} since that will cause an infinite loop (Gson will call your\n     * call-back method again).\n     *\n     * @param json    The Json data being deserialized\n     * @param typeOfT The type of the Object to deserialize to\n     * @return a deserialized object of the specified type typeOfT which is a subclass of {@code T}\n     * @throws JsonParseException if json is not in the expected format of {@code typeOfT}"
    ],
    "functions": [
        "JsonElement",
        "serialize",
        "DateTimeZone",
        "deserialize"
    ],
    "classes": [
        "DateTimeZoneConverter"
    ]
}