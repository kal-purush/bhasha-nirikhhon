{
    "identifiers": [
        "license",
        "Copyright",
        "c",
        "The",
        "Polymer",
        "Project",
        "Authors",
        "rights",
        "reserved",
        "code",
        "may",
        "only",
        "be",
        "used",
        "under",
        "the",
        "BSD",
        "style",
        "license",
        "found",
        "at",
        "The",
        "complete",
        "authors",
        "may",
        "be",
        "found",
        "at",
        "The",
        "complete",
        "contributors",
        "may",
        "be",
        "found",
        "at",
        "Code",
        "distributed",
        "by",
        "Google",
        "the",
        "polymer",
        "project",
        "also",
        "subject",
        "to",
        "an",
        "additional",
        "IP",
        "rights",
        "grant",
        "found",
        "at",
        "rel",
        "href",
        "rel",
        "href",
        "Polymer",
        "Polymer",
        "Polymer",
        "superClass",
        "superClass",
        "listener",
        "listener",
        "listener",
        "listener",
        "targetElement",
        "listener",
        "listener",
        "target",
        "eventName",
        "handler",
        "DeclarativeEventListeners"
    ],
    "literals": [
        "\"import\"",
        "\"../../polymer/lib/utils/boot.html\"",
        "\"import\"",
        "\"../../polymer/lib/utils/mixin.html\"",
        "'use strict'",
        "'listeners'",
        "'string'",
        "'listeners'"
    ],
    "variables": [
        "declarativeListeners",
        "targetElement"
    ],
    "comments": [
        "polymer.github.io/LICENSE.txt",
        "polymer.github.io/AUTHORS.txt",
        "polymer.github.io/CONTRIBUTORS.txt",
        "polymer.github.io/PATENTS.txt"
    ],
    "docstrings": [
        "* @const {Polymer.DeclarativeEventListeners}",
        "* Element class mixin that provides API for adding declarative event\n    * listeners nodes.\n    *\n    * The API is designed to be compatible with override points implemented\n    * in `Polymer.TemplateStamp` such that declarative event listeners in\n    * templates will support gesture events when this mixin is applied along with\n    * `Polymer.TemplateStamp`.\n    *\n    * @mixinFunction\n    * @polymer\n    * @memberof Polymer\n    * @summary Element class mixin that provides API for adding declarative event\n    * listeners nodes",
        "* @polymer\n      * @mixinClass\n      * @implements {Polymer_DeclarativeEventListeners}\n      * @property listeners {object} Stores the declared event listeners to be subscribed to \n      * durning ready().",
        "* Adds to stored listeners to subscribe to on ready() \n        *\n        * @param {string|!Object} target Element/node for listener to target.\n        * @param {string} eventName Name of event to listen for.\n        * @param {function} handler Function which receives the notification.\n        * @return {void}\n        * @private"
    ],
    "functions": [
        "ready",
        "_addDeclarativeEventListener"
    ],
    "classes": [
        "DeclarativeEventListeners"
    ]
}