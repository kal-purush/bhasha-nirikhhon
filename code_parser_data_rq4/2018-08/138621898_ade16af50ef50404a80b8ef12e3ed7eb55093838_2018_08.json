{
    "identifiers": [
        "itertools",
        "numpy",
        "np",
        "M",
        "M",
        "shape",
        "M",
        "shape",
        "M",
        "dtype",
        "M",
        "shape",
        "np",
        "copy",
        "M",
        "np",
        "count_nonzero",
        "M",
        "axis",
        "classmethod",
        "cls",
        "n",
        "p",
        "p",
        "n",
        "np",
        "zeros",
        "n",
        "n",
        "dtype",
        "p",
        "cls",
        "M",
        "i",
        "n",
        "j",
        "i",
        "n",
        "np",
        "random",
        "rand",
        "p",
        "cls",
        "M",
        "classmethod",
        "cls",
        "n",
        "n",
        "np",
        "zeros",
        "n",
        "n",
        "dtype",
        "cls",
        "M",
        "k",
        "reduce",
        "k",
        "n",
        "np",
        "where",
        "M",
        "k",
        "i",
        "j",
        "itertools",
        "combinations",
        "N",
        "M",
        "i",
        "j",
        "M",
        "M",
        "m",
        "reduce",
        "n",
        "np",
        "M",
        "k",
        "np",
        "M",
        "k",
        "m",
        "q",
        "Graph",
        "M",
        "k",
        "q",
        "m",
        "C",
        "eliminate_node",
        "k",
        "reduce",
        "C",
        "m",
        "np",
        "sum",
        "M",
        "np",
        "min",
        "d",
        "d",
        "d_min",
        "p",
        "np",
        "sum",
        "p",
        "p",
        "property",
        "np",
        "count_nonzero",
        "M",
        "axis",
        "_degree",
        "_degree",
        "sum",
        "_degree",
        "degree",
        "setter",
        "value",
        "value"
    ],
    "literals": [],
    "variables": [
        "n",
        "M",
        "_degree",
        "M",
        "M",
        "i",
        "j",
        "M",
        "j",
        "i",
        "M",
        "m",
        "N",
        "i",
        "j",
        "j",
        "i",
        "M",
        "M",
        "C",
        "m",
        "d",
        "d_min",
        "p",
        "p",
        "_degree",
        "_degree",
        "_degree"
    ],
    "comments": [
        "M is a square matrix",
        "M must be boolean",
        "Number of nodes",
        "Adjacency matrix",
        "Degree of nodes",
        "p is a probability",
        "Positive number of nodes",
        "Create adjacency matrix",
        "early return",
        "create an edge between nodes i and j",
        "Positive number of nodes",
        "node must exist in graph",
        "Get neighbours of node i",
        "Add edges to make neighbouring nodes into a clique",
        "edge already exists",
        "create new edge",
        "Remove node from the graph",
        "Number of additional edges",
        "Eliminate nodes",
        "last node need not be eliminated",
        "Compute degrees",
        "d[i] is the degree of node i",
        "minimum degree",
        "identify nodes with minimum degree",
        "normalize to get probability distribution"
    ],
    "docstrings": [
        "\"\"\"\n    Undirected graphs.\n    \n    # Attributes\n    - `n`: Integer\n        The number of nodes in the graph.\n    - `M`: Numpy boolean matrix\n        The adjacency matrix of the graph.\n    \"\"\"",
        "\"\"\"\n        Generate a random Erdos-Renyi graph.\n\n        # Arguments\n        - `n`: Integer\n            The number of nodes in the graph.\n        - `p`: Float\n            The probability that an edge (i, j) be in the graph.\n\n        # Returns\n        - ``: Graph\n            A randomly-generated Erdos-Renyi graph.\n        \"\"\"",
        "\"\"\"\n        Generate an empty graph with n nodes.\n\n        # Arguments\n        - `n`: Integer\n            The number of nodes in the graph.\n        \"\"\"",
        "\"\"\"\n        Delete node k from graph.\n        \n        # Arguments\n        - `k`: Integer\n            The index of the node to be deleted.\n\n        # Returns\n        - `m`: Integer\n            The number of edges that were addded to the graph.\n        \"\"\"",
        "\"\"\"\n        Build a chordal extension given the elimination ordering `q`.\n\n        # Arguments\n        - `q`: Array of integer\n            The elimination order for building the chordal extension.\n        \n        # Returns\n        - `C`: Graph\n            A chordal extension of the graph.\n        - `m`: Integer\n            The number of edges that were added to the graph when building\n                the chordal extension.\n        \"\"\"",
        "\"\"\"\n        Identify nodes with minimum degree.\n        # Arguments\n        # Returns\n        - `p`: Array of Float\n            Uniform probability distribution over the nodes of minimum degree.\n        \"\"\"",
        "\"\"\"\n        Calculate the degree of nodes\n        # return:\n        A numpy array with degree of nodes\n        \"\"\""
    ],
    "functions": [
        "erdosrenyi",
        "empty",
        "eliminate_node",
        "chordal_extension",
        "min_degree",
        "degree",
        "degree"
    ],
    "classes": [
        "Graph"
    ]
}