{
    "identifiers": [
        "pandas",
        "pd",
        "pd",
        "read_csv",
        "df",
        "sort_values",
        "by",
        "df",
        "replace",
        "sum",
        "df",
        "len",
        "df",
        "OffTaskSamples",
        "OffTaskSamples",
        "df",
        "unique",
        "len",
        "Students",
        "df",
        "df",
        "unique",
        "len",
        "OffTaskStudents",
        "df",
        "drop",
        "columns",
        "columns_to_drop",
        "scipy",
        "stats",
        "spearmanr",
        "seaborn",
        "sns",
        "matplotlib",
        "pyplot",
        "plt",
        "df",
        "corr",
        "plt",
        "figure",
        "figsize",
        "sns",
        "heatmap",
        "correlation_matrix",
        "annot",
        "cmap",
        "fmt",
        "plt",
        "title",
        "plt",
        "show",
        "df",
        "drop",
        "columns",
        "columns_to_drop2",
        "df",
        "loc",
        "df",
        "isin",
        "OffTaskStudents",
        "df",
        "sklearn",
        "model_selection",
        "cross_val_score",
        "KFold",
        "sklearn",
        "model_selection",
        "StratifiedGroupKFold",
        "numpy",
        "np",
        "StratifiedGroupKFold",
        "n_splits",
        "np",
        "array",
        "df",
        "np",
        "array",
        "df",
        "np",
        "array",
        "df",
        "drop",
        "columns",
        "axis",
        "sklearn",
        "tree",
        "DecisionTreeClassifier",
        "sklearn",
        "linear_model",
        "LogisticRegression",
        "sklearn",
        "metrics",
        "make_scorer",
        "cohen_kappa_score",
        "sklearn",
        "naive_bayes",
        "GaussianNB",
        "xgboost",
        "xgb",
        "sklearn",
        "ensemble",
        "RandomForestClassifier",
        "sklearn",
        "metrics",
        "roc_auc_score",
        "sklearn",
        "metrics",
        "cohen_kappa_score",
        "sklearn",
        "metrics",
        "precision_score",
        "recall_score",
        "sklearn",
        "svm",
        "SVC",
        "imblearn",
        "over_sampling",
        "SMOTE",
        "SMOTE",
        "sampling_strategy",
        "random_state",
        "train_index",
        "test_index",
        "kf",
        "split",
        "X",
        "yKFold",
        "groups",
        "X",
        "train_index",
        "X",
        "test_index",
        "y",
        "train_index",
        "y",
        "test_index",
        "DoSMOTE",
        "smote",
        "fit_resample",
        "X_train",
        "y_train",
        "ClassWeights",
        "np",
        "bincount",
        "y",
        "len",
        "y",
        "total_samples",
        "len",
        "class_counts",
        "class_counts",
        "xgb",
        "XGBClassifier",
        "learning_rate",
        "n_estimators",
        "random_state",
        "scale_pos_weight",
        "class_weights",
        "xgb",
        "XGBClassifier",
        "learning_rate",
        "n_estimators",
        "random_state",
        "clf",
        "fit",
        "X_train",
        "y_train",
        "clf",
        "predict_proba",
        "X_train",
        "clf",
        "predict_proba",
        "X_test",
        "clf",
        "predict",
        "X_test",
        "roc_auc_score",
        "y_test",
        "y_pred",
        "AUC_scores",
        "append",
        "AUC",
        "cohen_kappa_score",
        "y_test",
        "y_pred2",
        "Kappa_scores",
        "append",
        "kappa",
        "precision_score",
        "y_test",
        "y_pred2",
        "Precision",
        "append",
        "precision",
        "recall_score",
        "y_test",
        "y_pred2",
        "Recall",
        "append",
        "recall",
        "fold",
        "score",
        "AUC_scores",
        "start",
        "fold",
        "score",
        "np",
        "mean",
        "AUC_scores",
        "np",
        "std",
        "AUC_scores",
        "mean_AUC",
        "std_AUC",
        "fold",
        "score",
        "Kappa_scores",
        "start",
        "fold",
        "score",
        "np",
        "mean",
        "Kappa_scores",
        "mean_Kappa",
        "np",
        "std",
        "Kappa_scores",
        "std_Kappa",
        "fold",
        "score",
        "Precision",
        "start",
        "fold",
        "score",
        "np",
        "mean",
        "Precision",
        "mean_Precision",
        "np",
        "std",
        "Precision",
        "std_Precision",
        "fold",
        "score",
        "Recall",
        "start",
        "fold",
        "score",
        "np",
        "mean",
        "Recall",
        "mean_Recall",
        "np",
        "std",
        "Recall",
        "std_Recall",
        "joblib",
        "clf",
        "fit",
        "X",
        "y",
        "joblib",
        "dump",
        "clf",
        "model_filename",
        "model_filename"
    ],
    "literals": [
        "'ca1-dataset.csv'",
        "'namea'",
        "'OffTask'",
        "'OffTask'",
        "'Y'",
        "'N'",
        "'OffTask'",
        "\"Off-Task: \"",
        "\"%\"",
        "\"On-Task: \"",
        "\"%\"",
        "'namea'",
        "'Students: '",
        "'OffTask'",
        "'namea'",
        "'Off Task Students: '",
        "'Avghelp'",
        "'Avgchoice'",
        "'Avgstring'",
        "'Avgnumber'",
        "'Avgpoint'",
        "'Avghelppct-up'",
        "'Avgrecent8help'",
        "'AvgasymptoteA-up'",
        "'AvgasymptoteB-up'",
        "'coolwarm'",
        "\".2f\"",
        "\"Correlation Heatmap\"",
        "'Avgnotright'",
        "'AnyOffTask'",
        "'namea'",
        "'AnyOffTask'",
        "'namea'",
        "'AnyOffTask'",
        "'OffTask'",
        "'Unique-id'",
        "'namea'",
        "'OffTask'",
        "'AnyOffTask'",
        "f\"Fold {fold}: AUC {score:.4f}\"",
        "f\"Mean AUCROC: {mean_AUC:.4f}\"",
        "f\"STD AUCROC: {std_AUC:.4f}\\n\"",
        "f\"Fold {fold}: Kappa {score:.4f}\"",
        "f\"Mean Kappa: {mean_Kappa:.4f}\"",
        "f\"STD Kappa: {std_Kappa:.4f}\\n\"",
        "f\"Fold {fold}: Precision {score:.4f}\"",
        "f\"Mean Precision: {mean_Precision:.4f}\"",
        "f\"STD Precision: {std_Precision:.4f}\\n\"",
        "f\"Fold {fold}: Recall {score:.4f}\"",
        "f\"Mean Recall: {mean_Recall:.4f}\"",
        "f\"STD Recall: {std_Recall:.4f}\"",
        "\"XGBoostAZ.pkl\"",
        "\"Model saved as\""
    ],
    "variables": [
        "df",
        "df",
        "df",
        "OffTaskSamples",
        "Students",
        "OffTaskStudents",
        "columns_to_drop",
        "df",
        "correlation_matrix",
        "columns_to_drop2",
        "df",
        "df",
        "groups",
        "kf",
        "yKFold",
        "y",
        "X",
        "Kappa_scores",
        "AUC_scores",
        "Precision",
        "Recall",
        "smote",
        "DoSMOTE",
        "ClassWeights",
        "X_train",
        "X_test",
        "y_train",
        "y_test",
        "X_train",
        "y_train",
        "class_counts",
        "total_samples",
        "class_weights",
        "clf",
        "clf",
        "y_trainprob",
        "y_pred",
        "y_pred2",
        "AUC",
        "kappa",
        "precision",
        "recall",
        "mean_AUC",
        "std_AUC",
        "mean_Kappa",
        "std_Kappa",
        "mean_Precision",
        "std_Precision",
        "mean_Recall",
        "std_Recall",
        "model_filename"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Importing data",
        "Replacing Target by 0s and 1s",
        "Distribution of each Class (OnTask vs OffTask)",
        "Getting number of unique students",
        "Getting students that were OffTask at some point",
        "Droping columns without variance",
        "Verifying correlations between features",
        "Calculate the correlation matrix",
        "Create a heatmap of the correlation matrix",
        "Droping Avgnotright because is providing the same information than Avgright",
        "Other options to drop are Avgprev5Count-up, Avgtimelast5SDnormed and Avgtime",
        "Create a column indicating if the student was offtask at any moment (for stratified k fold)",
        "Groups for student level CV",
        "Create a 10-fold student level cross-validation object, stratified by the target",
        "Vector for stratified kFold (Not the target!!!)",
        "Target",
        "Features",
        "Cross Validation testing several models",
        "Lists to save results",
        "Flag to activate SMOTE",
        "Flag to balance based on class weights",
        "Cross Validation",
        "Compute class weights",
        "clf = LogisticRegression(max_iter=10000, class_weight='balanced')",
        "clf = SVC(kernel='rbf', random_state=42, class_weight='balanced', probability=True)",
        "clf = RandomForestClassifier(n_estimators=200, class_weight='balanced', random_state=5)",
        "clf = DecisionTreeClassifier(class_weight='balanced')",
        "clf = GaussianNB(class_weight='balanced')",
        "clf = DecisionTreeClassifier()",
        "clf = GaussianNB()",
        "clf = RandomForestClassifier(n_estimators=200, random_state=5)",
        "clf = LogisticRegression(max_iter=10000)",
        "clf = SVC(kernel='rbf', random_state=42, probability=True)",
        "Prediction (Confidence)",
        "Binary Prediction",
        "Calculate metrics",
        "Print the AUC score for each fold",
        "Calculate and print the mean AUC score across all folds",
        "Print the Kappa for each fold",
        "Calculate and print the mean Kappa across all folds",
        "Print the Precision for each fold",
        "Calculate and print the mean Precision across all folds",
        "Print the Recall for each fold",
        "Calculate and print the mean Recall across all folds",
        "Saving final model",
        "Training last model with all available data",
        "Save the trained model to a file. Rename the file for each new model you want to save"
    ],
    "docstrings": [
        "\"\"\"\nCreated on Sun Sep 24 15:25:20 2023\n\n@author: azamb\n\"\"\""
    ],
    "functions": [],
    "classes": []
}