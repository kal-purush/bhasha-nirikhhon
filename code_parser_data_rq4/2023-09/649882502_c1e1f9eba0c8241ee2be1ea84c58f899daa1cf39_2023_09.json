{
    "identifiers": [
        "torchvision",
        "transforms",
        "torchvision",
        "transforms",
        "T",
        "PIL",
        "Image",
        "numpy",
        "np",
        "cv2",
        "matplotlib",
        "pyplot",
        "plt",
        "torch",
        "nn",
        "nn",
        "torch",
        "nn",
        "functional",
        "F",
        "torch",
        "sys",
        "argparse",
        "os",
        "facer",
        "sys",
        "path",
        "append",
        "os",
        "path",
        "join",
        "sys",
        "path",
        "MODNet",
        "src",
        "models",
        "modnet",
        "MODNet",
        "tqdm",
        "tqdm",
        "CDGNet",
        "networks",
        "CDGNet",
        "Res_Deeplab",
        "copy",
        "deepcopy",
        "mask",
        "kernel_size",
        "np",
        "ones",
        "kernel_size",
        "kernel_size",
        "np",
        "uint8",
        "cv2",
        "dilate",
        "mask",
        "kernel",
        "iterations",
        "dilated_mask",
        "vis_seg_probs",
        "type_class1",
        "type_class2",
        "vis_seg_probs",
        "detach",
        "clone",
        "mask",
        "type_class1",
        "mask",
        "type_class2",
        "mask",
        "mask",
        "cpu",
        "numpy",
        "mask",
        "astype",
        "np",
        "uint8",
        "mask",
        "tensor",
        "np",
        "array",
        "tensor",
        "np",
        "maximum",
        "np",
        "minimum",
        "image",
        "image",
        "astype",
        "np",
        "uint8",
        "im",
        "torch",
        "tensor",
        "modnet",
        "nn",
        "Module",
        "ref_size",
        "transforms",
        "Normalize",
        "transforms",
        "Compose",
        "transes",
        "im_transform",
        "im",
        "im",
        "im",
        "shape",
        "max",
        "im_h",
        "im_w",
        "ref_size",
        "min",
        "im_h",
        "im_w",
        "ref_size",
        "im_w",
        "im_h",
        "ref_size",
        "im_w",
        "im_h",
        "ref_size",
        "im_w",
        "im_h",
        "ref_size",
        "im_h",
        "im_w",
        "ref_size",
        "im_h",
        "im_w",
        "im_rw",
        "im_rw",
        "im_rh",
        "im_rh",
        "F",
        "interpolate",
        "im",
        "size",
        "im_rh",
        "im_rw",
        "mode",
        "modnet",
        "im",
        "F",
        "interpolate",
        "matte",
        "size",
        "im_h",
        "im_w",
        "mode",
        "matte",
        "data",
        "cpu",
        "numpy",
        "matte",
        "model",
        "valloader",
        "input_size",
        "image_size",
        "num_samples",
        "gpus",
        "model",
        "eval",
        "np",
        "zeros",
        "num_samples",
        "image_size",
        "image_size",
        "dtype",
        "np",
        "uint8",
        "torch",
        "nn",
        "Upsample",
        "size",
        "input_size",
        "input_size",
        "mode",
        "align_corners",
        "torch",
        "no_grad",
        "index",
        "image",
        "valloader",
        "scale",
        "eval_scale",
        "torch",
        "nn",
        "Upsample",
        "scale_factor",
        "scale",
        "mode",
        "align_corners",
        "interp_img",
        "image",
        "model",
        "scaled_img",
        "cuda",
        "outputs",
        "outputs",
        "outputs",
        "hpreds_lst",
        "append",
        "hPreds",
        "data",
        "cpu",
        "numpy",
        "wpreds_lst",
        "append",
        "wPreds",
        "data",
        "cpu",
        "numpy",
        "prediction",
        "prediction",
        "flipped_output",
        "flipped_idx",
        "single_output",
        "flipped_output",
        "flip",
        "dims",
        "single_output",
        "interp",
        "single_output",
        "unsqueeze",
        "mul_outputs",
        "append",
        "single_output",
        "torch",
        "stack",
        "mul_outputs",
        "fused_prediction",
        "mean",
        "F",
        "interpolate",
        "fused_prediction",
        "size",
        "image_size",
        "mode",
        "fused_prediction",
        "permute",
        "torch",
        "argmax",
        "fused_prediction",
        "dim",
        "fused_prediction",
        "data",
        "cpu",
        "numpy",
        "np",
        "asarray",
        "fused_prediction",
        "dtype",
        "np",
        "uint8",
        "idx",
        "parsing_preds",
        "num_samples",
        "parsing_preds",
        "hpreds_lst",
        "wpreds_lst",
        "input_path",
        "input_path",
        "os",
        "makedirs",
        "target_path",
        "exist_ok",
        "os",
        "makedirs",
        "os",
        "path",
        "join",
        "target_path",
        "exist_ok",
        "os",
        "makedirs",
        "os",
        "path",
        "join",
        "target_path",
        "exist_ok",
        "os",
        "makedirs",
        "os",
        "path",
        "join",
        "target_path",
        "exist_ok",
        "os",
        "makedirs",
        "os",
        "path",
        "join",
        "target_path",
        "exist_ok",
        "os",
        "makedirs",
        "os",
        "path",
        "join",
        "target_path",
        "exist_ok",
        "os",
        "makedirs",
        "os",
        "path",
        "join",
        "target_path",
        "exist_ok",
        "nn",
        "DataParallel",
        "MODNet",
        "backbone_pretrained",
        "modnet",
        "load_state_dict",
        "torch",
        "load",
        "MODNET_ckpt",
        "torch",
        "device",
        "modnet",
        "eval",
        "to",
        "device",
        "basename1",
        "tens_list",
        "append",
        "T",
        "ToTensor",
        "Image",
        "open",
        "image_path",
        "convert",
        "obtain_modnet_mask",
        "tens_list",
        "modnet",
        "cv2",
        "imwrite",
        "os",
        "path",
        "join",
        "target_path",
        "basename1",
        "postprocess_mask",
        "silh_mask",
        "astype",
        "np",
        "uint8",
        "Res_Deeplab",
        "num_classes",
        "transforms",
        "Normalize",
        "mean",
        "std",
        "transforms",
        "Compose",
        "transforms",
        "ToTensor",
        "normalize",
        "model_cdg",
        "state_dict",
        "copy",
        "torch",
        "load",
        "CDGNET_ckpt",
        "map_location",
        "key",
        "nkey",
        "state_dict_old",
        "keys",
        "state_dict",
        "keys",
        "key",
        "nkey",
        "key",
        "deepcopy",
        "state_dict_old",
        "key",
        "deepcopy",
        "state_dict_old",
        "key",
        "model_cdg",
        "load_state_dict",
        "state_dict",
        "model_cdg",
        "eval",
        "model_cdg",
        "cuda",
        "Image",
        "open",
        "image_path",
        "im",
        "size",
        "img_size",
        "transform",
        "im",
        "resize",
        "input_size",
        "torch",
        "cat",
        "img",
        "torch",
        "flip",
        "img",
        "dims",
        "dim",
        "images",
        "append",
        "img",
        "valid",
        "model_cdg",
        "images",
        "input_size",
        "image_size",
        "len",
        "images",
        "gpus",
        "np",
        "asarray",
        "Image",
        "open",
        "os",
        "path",
        "join",
        "target_path",
        "basename1",
        "len",
        "parsing_preds",
        "np",
        "max",
        "parsing_preds",
        "np",
        "min",
        "parsing_preds",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "np",
        "asarray",
        "Image",
        "fromarray",
        "parsing_preds",
        "resize",
        "img_size",
        "Image",
        "BICUBIC",
        "hair_mask",
        "mask",
        "os",
        "path",
        "join",
        "target_path",
        "basename1",
        "hair_mask",
        "size",
        "Image",
        "fromarray",
        "hair_mask",
        "save",
        "mask_path",
        "face_mask",
        "mask",
        "glass_mask1",
        "mask",
        "os",
        "path",
        "join",
        "target_path",
        "basename1",
        "face_mask",
        "size",
        "Image",
        "fromarray",
        "face_mask",
        "save",
        "mask_path1",
        "dress_mask",
        "mask",
        "jumpsuit",
        "mask",
        "scarf",
        "mask",
        "skirt",
        "mask",
        "left_arm",
        "mask",
        "right_arm",
        "mask",
        "glove_mask",
        "mask",
        "coat_mask",
        "mask",
        "hat_mask",
        "mask",
        "upper_cloth",
        "mask",
        "other_mask",
        "mask",
        "mask1",
        "other_mask",
        "os",
        "makedirs",
        "os",
        "path",
        "join",
        "target_path",
        "exist_ok",
        "os",
        "path",
        "join",
        "target_path",
        "basename1",
        "Image",
        "fromarray",
        "other_mask",
        "save",
        "mask_path2",
        "Image",
        "fromarray",
        "other_mask",
        "size",
        "cv2",
        "imread",
        "mask_path2",
        "cv2",
        "imread",
        "mask_path1",
        "img2",
        "astype",
        "np",
        "uint8",
        "cv2",
        "bitwise_xor",
        "img1",
        "img2",
        "os",
        "path",
        "join",
        "target_path",
        "basename3",
        "cv2",
        "imwrite",
        "mask_path11",
        "new_img",
        "new_img",
        "astype",
        "np",
        "uint8",
        "min",
        "np",
        "where",
        "facemsk",
        "max",
        "np",
        "where",
        "facemsk",
        "max",
        "np",
        "where",
        "facemsk",
        "min",
        "np",
        "where",
        "facemsk",
        "min",
        "np",
        "where",
        "facemsk",
        "max",
        "np",
        "where",
        "facemsk",
        "min",
        "np",
        "where",
        "facemsk",
        "lowest_point_of_face",
        "position",
        "high_point_of_face",
        "min",
        "np",
        "where",
        "facemsk",
        "max",
        "np",
        "where",
        "facemsk",
        "cv2",
        "bitwise_or",
        "img1",
        "img2",
        "face",
        "os",
        "path",
        "join",
        "target_path",
        "basename2",
        "Image",
        "fromarray",
        "face",
        "face",
        "save",
        "mask_path_3",
        "Image",
        "open",
        "mask_path",
        "h_mask",
        "size",
        "Image",
        "open",
        "mask_path_3",
        "f_mask",
        "size",
        "Image",
        "open",
        "os",
        "path",
        "join",
        "target_path",
        "basename1",
        "torch",
        "cuda",
        "is_available",
        "facer",
        "hwc2bchw",
        "facer",
        "read_hwc",
        "image_path",
        "to",
        "device",
        "device",
        "facer",
        "face_detector",
        "device",
        "device",
        "torch",
        "inference_mode",
        "face_detector",
        "image",
        "facer",
        "face_parser",
        "device",
        "device",
        "torch",
        "inference_mode",
        "face_parser",
        "image",
        "faces",
        "faces",
        "seg_logits",
        "softmax",
        "dim",
        "seg_probs",
        "argmax",
        "dim",
        "get_specific_mask",
        "vis_seg_probs",
        "np",
        "expand_dims",
        "dilate_mask",
        "np",
        "squeeze",
        "mouth_mask",
        "os",
        "path",
        "join",
        "target_path",
        "basename1",
        "Image",
        "fromarray",
        "mouth_mask",
        "reshape",
        "img_size",
        "save",
        "mask_path5",
        "Image",
        "open",
        "mask_path5",
        "np",
        "array",
        "face_mask",
        "size",
        "cv2",
        "imread",
        "mask_path_3",
        "cv2",
        "imread",
        "mask_path5",
        "cv2",
        "bitwise_or",
        "image2",
        "image3",
        "os",
        "path",
        "join",
        "target_path",
        "basename2",
        "Image",
        "fromarray",
        "nonearfacemouth",
        "nonearface_mouth",
        "save",
        "mask_path7",
        "Image",
        "open",
        "mask_path7",
        "h_mask",
        "f_mask",
        "b_mask"
    ],
    "literals": [
        "'..'",
        "'area'",
        "'area'",
        "'bilinear'",
        "'bilinear'",
        "'bicubic'",
        "'/home/neuralimage6/diffuser_x/temp_out_33/'",
        "'mask'",
        "'hair_mask'",
        "'face_mask'",
        "'ear_mask'",
        "'nonear_face'",
        "'mouth_mask'",
        "'/home/neuralimage6/diffuser_x/MODNet/pretrained/modnet_photographic_portrait_matting.ckpt'",
        "'cuda'",
        "'new1.jpg'",
        "'newface.jpg'",
        "\"RGB\"",
        "'mask'",
        "\"Start calculating hair masks!\"",
        "'/home/neuralimage6/diffuser_x/CDGNet/pretrained/LIP_epoch_149.pth'",
        "'cpu'",
        "'mask'",
        "'parsing_preds'",
        "'hair_mask'",
        "'face_mask'",
        "'other_mask'",
        "'other_mask'",
        "'Image.fromarray(other_mask).size'",
        "'xor-mask.jpg'",
        "'face_mask'",
        "'face_mask'",
        "'h_mask.size'",
        "'f_mask.size'",
        "'other_mask'",
        "'cuda'",
        "'cpu'",
        "'retinaface/mobilenet'",
        "'farl/celebm/448'",
        "'seg'",
        "'logits'",
        "'mouth_mask'",
        "'np.array(face_mask).size'",
        "'nonear_face'"
    ],
    "variables": [
        "kernel",
        "dilated_mask",
        "mask",
        "mask",
        "mask",
        "mask",
        "mask",
        "mask",
        "image",
        "image",
        "transes",
        "im_transform",
        "im",
        "im",
        "im_b",
        "im_c",
        "im_h",
        "im_w",
        "im_rh",
        "im_rw",
        "im_rw",
        "im_rh",
        "im_rh",
        "im_rw",
        "im_rw",
        "im_rh",
        "im",
        "_",
        "_",
        "matte",
        "matte",
        "matte",
        "parsing_preds",
        "hpreds_lst",
        "wpreds_lst",
        "idx",
        "interp",
        "eval_scale",
        "flipped_idx",
        "mul_outputs",
        "interp_img",
        "scaled_img",
        "outputs",
        "prediction",
        "hPreds",
        "wPreds",
        "single_output",
        "flipped_output",
        "flipped_output",
        "single_output",
        "fused_prediction",
        "fused_prediction",
        "fused_prediction",
        "fused_prediction",
        "fused_prediction",
        "fused_prediction",
        "parsing_preds",
        "idx",
        "parsing_preds",
        "image_path",
        "target_path",
        "modnet",
        "MODNET_ckpt",
        "device",
        "basename1",
        "basename2",
        "tens_list",
        "silh_mask",
        "model_cdg",
        "CDGNET_ckpt",
        "normalize",
        "transform",
        "state_dict",
        "state_dict_old",
        "state_dict",
        "state_dict",
        "key",
        "input_size",
        "im",
        "img_size",
        "image_size",
        "images",
        "img",
        "img",
        "parsing_preds",
        "hpredLst",
        "wpredLst",
        "mask",
        "face_mask",
        "glass_mask",
        "glass_mask1",
        "dress_mask",
        "upper_cloth",
        "jumpsuit",
        "scarf",
        "skirt",
        "left_arm",
        "right_arm",
        "glove_mask",
        "coat_mask",
        "hat_mask",
        "hair_mask",
        "other_mask",
        "hair_mask",
        "mask_path",
        "face_mask",
        "mask_path1",
        "mask1",
        "other_mask",
        "other_mask",
        "mask_path2",
        "img1",
        "img2",
        "facemsk",
        "new_img",
        "basename3",
        "mask_path11",
        "new_img",
        "lowest_point_of_face",
        "high_point_of_face",
        "position",
        "img1",
        "img1",
        "img1",
        "img1",
        "face",
        "face",
        "mask_path_3",
        "face",
        "h_mask",
        "f_mask",
        "b_mask",
        "device",
        "image",
        "face_detector",
        "faces",
        "face_parser",
        "faces",
        "seg_logits",
        "seg_probs",
        "vis_seg_probs",
        "mouth_mask",
        "mouth_mask",
        "mask_path5",
        "m_mask",
        "image2",
        "image3",
        "nonearfacemouth",
        "mask_path7",
        "nonearface_mouth",
        "f_mask"
    ],
    "comments": [
        "calc silh masks",
        "calc hair masks",
        "Create a kernel for dilation",
        "print('mask.size', mask.size)",
        "mask[mask == type_class3] = 255",
        "mask = Image.fromarray(mask)",
        "resize and save matte",
        "eval_scale=[1.0]",
        "num_images = image.size(0)",
        "print( image.size() )",
        "image = image.squeeze()",
        "if index % 10 == 0:",
        "print('%d  processd' % (index * 1))",
        "====================================================================================",
        "print( scaled_img.size() )",
        "==========================================================",
        "==========================================================",
        "print( single_output.size() )",
        "HWC",
        "====================================================================================",
        "load MODNET model for silhouette masks",
        "Create silh masks",
        "load CDGNet for hair masks",
        "remove the 'module.' in the 'key'",
        "basenames = sorted([s.split('.')[0] for s in os.listdir(os.path.join(args.scene_path, 'image'))])",
        "print('img_size', img_size)",
        "dress mask",
        "upper-clothes",
        "jumpsuit",
        "scarf",
        "skirt",
        "left arm",
        "right arm",
        "glove",
        "coat",
        "hat",
        "glass_mask = glass_mask*mask",
        "other mask (beside hair)",
        "print('img1', img1.shape)  #### still working on mask operation ####",
        "print('img1', img1)",
        "print(max(np.where(img1.all() >= 200))[1])",
        "other = Image.fromarray(other_mask)",
        "face mask",
        "new_img.cpu().numpy()",
        "new_img= dilate_mask(new_img, 5)",
        "print('new_img', new_img)",
        "print('new_img[new_img==255]', max(np.where(new_img > 200)[1]))",
        "print('facemsk[new_img==255]x_max', max(np.where(facemsk > 200)[1]))",
        "print('facemsk[new_img==255]x_min', min(np.where(facemsk > 200)[1]))",
        "",
        "print('facemsk[new_img==255]y_max', max(np.where(facemsk > 200)[0]))",
        "print('facemsk[new_img==255]y_min', min(np.where(facemsk > 200)[0]))",
        "print('facemsk[new_img==255]x', max(np.where(facemsk >= 200)[0]))",
        "print('lowest_point_of_face', lowest_point_of_face)",
        "lowest_point_of_face_x = int(min((np.where(facemsk >= 200)[0]) + max(np.where(facemsk >= 200)[1])) / 2) + int(",
        ".4 * (max((np.where(facemsk >= 200)[1]) - min(np.where(facemsk >= 200)[1]))))",
        "position = min(min(np.where(facemsk >= 200)[1]), lowest_point_of_face)",
        "new_img[position:, :] = 0",
        "img1[position:, :min(np.where(facemsk > 200)[1])] = 0",
        "img1[position:, max(np.where(facemsk > 200)[1]):] = 0",
        "face[position:, :] = 0",
        "print(face.size)",
        "get rid off ear mask",
        "image: 1 x 3 x h x w",
        "optional \"farl/lapa/448\"",
        "nfaces x nclasses x h x w",
        "n_classes = seg_probs.size(1)",
        "/n_classes*255",
        "Include face, (hair) and face parts in the mask",
        "1: Face, 2: Left Eyebrow, 3: Right Eyebrow, 4: Left Eye, 5: Right Eye, 6: Nose, 7: Upper Lip, 8: Inner Mouth, 9: Lower Lip, 10: Hair",
        "celeba",
        "'1: neck, 2: face, 3: cloth, 4: right rainbow, 5: left ear, 6: right ear, 7: left brow, 8: right eys, 9: left eye, 10:nose, 11: mouth, 12: low lip, 13:upper lip, 14:hair, 15: eye galsses, 16: hat, 17: ear ring, 18: neck_low",
        "mouth mask",
        "ear_mask = get_specific_mask(vis_seg_probs, 4, 5)",
        "ear_mask = np.expand_dims(dilate_mask(np.squeeze(ear_mask[0]), 1), 0)",
        "mask_path4 = os.path.join(target_path, 'ear_mask', basename1)",
        "print(ear_mask.size)",
        "Image.fromarray(ear_mask.reshape(img_size)).save(mask_path4)",
        "e_mask = Image.open(mask_path4)",
        "print('e_mask.size', e_mask.size)",
        "earmask = np.array(earmask)",
        "print('earmask.size', e_mask.size)",
        "face mask",
        "facemsk = img2.astype(np.uint8)",
        "image1 = cv2.imread(mask_path4)  ### ear mask",
        "ear mask",
        "image1 = dilate_mask(image1, kernel_size=15)",
        "earmsk = image1.astype(np.uint8)",
        "nonearface = cv2.bitwise_xor(image2, image1)",
        "mask_path6 = os.path.join(target_path, 'nonear_face', basename1)",
        "nonear_face = Image.fromarray(nonearface)",
        "nonear_face.save(mask_path6)",
        "image4 = cv2.imread(mask_path6)",
        "",
        "a = '/home/neuralimage6/diffuser_x/temp1.png'  #male_h_36.jpg",
        "mod_cdgnet(a)",
        "if __name__ == \"__main__\":",
        "parser = argparse.ArgumentParser(conflict_handler='resolve')",
        "",
        "parser.add_argument('--scene_path', default='/home/neuralimage6/diffuser_x/11/1_F.jpg', type=str)",
        "parser.add_argument('--MODNET_ckpt', default='/home/neuralimage6/diffuser_x/MODNet/pretrained/modnet_photographic_portrait_matting.ckpt',",
        "type=str)",
        "parser.add_argument('--CDGNET_ckpt', default='/home/neuralimage6/diffuser_x/CDGNet/pretrained/LIP_epoch_149.pth', type=str)",
        "",
        "args, _ = parser.parse_known_args()",
        "args = parser.parse_args()",
        "",
        "main(args)"
    ],
    "docstrings": [],
    "functions": [
        "dilate_mask",
        "get_specific_mask",
        "postprocess_mask",
        "obtain_modnet_mask",
        "valid",
        "mod_cdgnet"
    ],
    "classes": []
}