{
    "identifiers": [
        "DBTest_integration",
        "Collections",
        "Diagnostics",
        "SimpleDB",
        "Fact",
        "Directory",
        "GetParent",
        "Directory",
        "GetCurrentDirectory",
        "Parent",
        "Parent",
        "Parent",
        "Parent",
        "FullName",
        "Path",
        "Combine",
        "directory",
        "ProcessStartInfo",
        "FileName",
        "Arguments",
        "RedirectStandardOutput",
        "WorkingDirectory",
        "workingDirectory",
        "Process",
        "StartInfo",
        "chirpTestStartInfo",
        "process",
        "Start",
        "process",
        "WaitForExit",
        "process",
        "StandardOutput",
        "ReadToEnd",
        "Trim",
        "expectedOutput",
        "expectedOutput",
        "Replace",
        "output",
        "output",
        "Replace",
        "WriteLine",
        "WriteLine",
        "expectedOutput",
        "WriteLine",
        "WriteLine",
        "output",
        "Assert",
        "Equal",
        "output",
        "expectedOutput"
    ],
    "literals": [
        "\"src/Chirp.CLI.Client/\"",
        "\"dotnet\"",
        "\"run read 5\"",
        "\"\\r\\n\"",
        "\"\\n\"",
        "\"\\r\\n\"",
        "\"\\n\"",
        "\"Expected Output:\"",
        "\"Actual Output:\""
    ],
    "variables": [
        "directory",
        "workingDirectory",
        "chirpTestStartInfo",
        "expectedOutput",
        "process",
        "output"
    ],
    "comments": [
        "Arrange",
        "get working directory (Code navigates to the project folder and combines it with relative path from within project.",
        "Very very ugly, also we should use the executable, this is all very silly):",
        "Defines the process start info for running the application for the test",
        "We need to redirect output in order to capture it and compare with expected",
        "set the working directory to the correct folder (src/Chirp.CLI.Client).",
        "Define expected output for test",
        "Act",
        "Start new process with specified start info",
        "read actual output",
        "We need to fix line endings so they are the same, using '\\n' in both expected and actual outputs before assert comparison.",
        "Assert",
        "We verify that the actual and expected outputs are equal.",
        "public class EndToEndTest2\n{\n    [Fact]\n    public void end2endtest2()\n    {\n        //Arrange\n        //get working directory (Code navigates to the project folder and combines it with relative path from within project. \n        //Very very ugly, also we should use the executable, this is all very silly): \n        var directory = Directory.GetParent(Directory.GetCurrentDirectory()).Parent.Parent.Parent.FullName;\n        string workingDirectory = Path.Combine(directory, \"src/Chirp.CLI.Client/\");\n\n        //Defines the process start info for running the application for the test\n        var chirpTestStartInfoWrite = new ProcessStartInfo\n        {\n            FileName = \"dotnet\",\n            Arguments = \"run cheep Hello\",\n            RedirectStandardOutput = true, //We need to redirect output in order to capture it and compare with expected\n            WorkingDirectory = workingDirectory //set the working directory to the correct folder (src/Chirp.CLI.Client).\n        };\n        var chirpTestStartInfoRead = new ProcessStartInfo\n        {\n            FileName = \"dotnet\",\n            Arguments = \"run read 10\",\n            RedirectStandardOutput = true, //We need to redirect output in order to capture it and compare with expected\n            WorkingDirectory = workingDirectory //set the working directory to the correct folder (src/Chirp.CLI.Client).\n        };\n\n        //Act\n        //Start new process with specified start info for sending new cheep\n        using (var cheepProcess = new Process { StartInfo = chirpTestStartInfoWrite })\n        {\n            cheepProcess.Start();\n            cheepProcess.WaitForExit();\n        }\n        //Start new process with specified start info for reading cheeps\n        using (var readProcess = new Process { StartInfo = chirpTestStartInfoRead })\n        {\n            readProcess.Start();\n            readProcess.WaitForExit();\n            //read actual output\n            var output = readProcess.StandardOutput.ReadToEnd().Trim();\n            //check if the cheep message is contained, as well as the username (and date?...)\n            Assert.Contains(\"Hello\", output);\n            Assert.Contains(Environment.UserName, output);\n        }\n        //This doesn't work, since the two processes don't interact ... but we need a new process to read after we have written, since that is how the program works rn. \n        //how to solve?\n    }\n}"
    ],
    "docstrings": [],
    "functions": [
        "end2endtest1"
    ],
    "classes": [
        "EndToEndTest1"
    ]
}