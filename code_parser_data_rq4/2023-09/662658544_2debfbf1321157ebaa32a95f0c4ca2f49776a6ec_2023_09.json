{
    "identifiers": [
        "Badge",
        "AsyncStorage",
        "storageName",
        "json",
        "res",
        "json",
        "res",
        "json",
        "res",
        "json",
        "res",
        "privateKey",
        "cert",
        "privateKey",
        "cert",
        "privateKey",
        "cert",
        "userInfo",
        "userInfo",
        "parseInt",
        "AsyncStorage",
        "storageName",
        "userCount",
        "User",
        "userCount",
        "storageName",
        "AsyncStorage",
        "storageName",
        "userCount",
        "AsyncStorage",
        "storageName",
        "userCount",
        "userCount",
        "id",
        "User",
        "id",
        "userCount",
        "id",
        "AsyncStorage",
        "storageName",
        "id",
        "User",
        "cert",
        "privateKey",
        "resUser",
        "id",
        "resUser"
    ],
    "literals": [
        "\"./Badge\"",
        "\"@react-native-async-storage/async-storage\"",
        "\"./config\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "Can't parse the ${storageName.userCount} key",
        "\"Invalid id!\"",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "res",
        "userCount",
        "userCount",
        "userCount",
        "resUser"
    ],
    "comments": [
        "Locally stored information",
        "Negative user_id indicates the entity isn't persisted.",
        "Ephemeral data obtained from the backend"
    ],
    "docstrings": [
        "* @summary Definition of the User class.\n * @author Bojun Ren\n * @data 2023/08/28",
        "* The canonical response POJO of the user information.\n * @alias LoginResponse\n * @alias UserProfileResponse",
        "* Convert a json object to the UserInfoPOJO\n * @param json The json object\n * @returns UserInfoPOJO",
        "* Get the number of users stored locally.",
        "* Persist the current user entity.\n   * The `privateKey` and `cert` properties must be defined.",
        "* Get the user stored locally with the specified id.\n   * @param id"
    ],
    "functions": [
        "jsonToUserInfoPOJO",
        "profile",
        "profile",
        "getUserCount",
        "persist",
        "getUser"
    ],
    "classes": [
        "User"
    ]
}