{
    "identifiers": [
        "main",
        "NpeAndOptional",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "Optional",
        "java",
        "util",
        "Random",
        "java",
        "util",
        "stream",
        "IntStream",
        "main",
        "Collection",
        "Knight",
        "main",
        "Collection",
        "MagicKnight",
        "main",
        "Collection",
        "Unit",
        "main",
        "classStudy",
        "Generic1",
        "Side",
        "args",
        "nulStr",
        "nulStr",
        "length",
        "catOrNull",
        "length",
        "catOrNull",
        "length",
        "ne",
        "ne",
        "printStackTrace",
        "catOpt",
        "Optional",
        "of",
        "catOpt",
        "Optional",
        "of",
        "dogOpt",
        "Optional",
        "ofNullable",
        "cowOpt",
        "Optional",
        "ofNullable",
        "henOpt",
        "Optional",
        "empty",
        "randomUnitOpts",
        "IntStream",
        "forEach",
        "i",
        "randomUnitOpts",
        "add",
        "randomUnitOpt",
        "randomUnitOpts",
        "stream",
        "forEach",
        "opt",
        "opt",
        "isPresent",
        "randomUnitOpts",
        "stream",
        "forEach",
        "opt",
        "opt",
        "ifPresent",
        "unit",
        "unit",
        "optInts",
        "IntStream",
        "forEach",
        "i",
        "optInts",
        "add",
        "Optional",
        "ofNullable",
        "nextBoolean",
        "i",
        "optInts",
        "stream",
        "forEach",
        "opt",
        "opt",
        "i",
        "i",
        "i",
        "formatted",
        "i",
        "orElse",
        "numFromOpt",
        "IntStream",
        "i",
        "i",
        "findFirst",
        "orElse",
        "nextBoolean",
        "Optional",
        "ofNullable",
        "nextBoolean",
        "nextInt",
        "Optional",
        "of",
        "Side",
        "BLUE",
        "Optional",
        "of",
        "Side",
        "BLUE",
        "Optional",
        "empty"
    ],
    "literals": [
        "\"Cat\"",
        "\"Dog\"",
        "\"\\n- - - - -\\n\"",
        "\"\\n- - - - -\\n\"",
        "\"%d 출력\"",
        "\"(SKIP)\"",
        "\"Cat\"",
        "\"Cat\""
    ],
    "variables": [],
    "comments": [
        "### `NullPointerException`",
        "",
        "- `null` 인 것으로부터 필드나 메소드 등을 호출하려 할 때 발생",
        "- *폐업한 중국집에 배민 주문*",
        "- 컴파일러 선에서 방지되지 않음",
        "- `RuntimeException`",
        "⚠️ NPE",
        "반복실행해 볼 것",
        "try-catch 문으로 NPE에 대비하기",
        "반복실행해 볼 것",
        "💡 Optional 만들기",
        "of : 담으려는 것이 확실히 있을 때 null이 아닌 실제값을 넣을 때 널이 아닐때 확실할 때 of 사용",
        "⚠️ of로 null을 담으면 NPE",
        "ofNullable : 담으려는 것이 null일 수도 있을 때",
        "명시적으로 null을 담으려면 empty 메소드 사용",
        "옵셔널의 리스트를 반환한다",
        "⭐️ Optional의 값 사용하기",
        "있다면 true",
        "opt.isEmpty() // 없다면 true",
        "opt.get() // 있다면 반환, 없다면 NPE",
        "💡 없을 시 다른 것 반환 (기본값으로 사용)",
        "opt.orElse(new Swordman(Side.RED))",
        "있다면 때 실행할 Consumer",
        "있다면 실행할 Consumer, 없다면 실행할 Runner(없으므로)",
        "opt.ifPresentOrElse( // 두가지를 넣어준다 input이 없을 경우",
        "unit -> System.out.println(unit),",
        "() -> System.out.println(\"(유닛 없음)\")",
        ");",
        "💡 Optional의 filter와 map 메소드",
        "⭐️ 걸러진 것은 null로 인식됨",
        "- 스트림의 filter처럼 건너뛰는 것이 아님!",
        "이 filter는 optinal에 속하는 메서드이 optional의 필터는 걸러질것을 null로 처리한다",
        "맵에서 정수의 optional을 String optional로 바꿔준것임 값이 존재해야지 실행된다",
        "Optional이 비어있을 경우",
        ".parallel() // 병렬 실행 (이후 배움), 주석해제 해 볼 것",
        ".filter(i -> i > 100) // 주석해제 후 다시 실행해 볼 것",
        "💡 첫 번째 요소를 반환",
        "항상 순서상 첫번 째 것을 반환 optional로 반환",
        ".findAny() // ⭐️ 병렬작업 시 먼저 나오는 것 반환",
        "병렬작업 시 findAny가 보다 효율적",
        "(순서가 중요하지 않다면)",
        ".max()",
        ".min()",
        "평균값을 ⭐️ Double로 반환",
        ".average()",
        ".reduce((prev, curr) -> prev + curr)",
        "Optional이 반환되므로",
        "혹은 기타 Optional의 인스턴스 메소드 사용",
        "슈뢰딩거의 고양이",
        "💡 각 return 문을 가지므로 break 필요 없음",
        "⭐️ Optional을 반환하는 메서드는 null을 반환하도록 하지 말 것! 빈 값이라도 옵셔널에 담아서 반환해줘야한다",
        "- 대신 빈 Optional을 반환 (Optional.empty)",
        "- NPE를 방지하기 위한 메소드이므로"
    ],
    "docstrings": [],
    "functions": [
        "main",
        "catOrNull",
        "getCatOpt",
        "randomUnitOpt"
    ],
    "classes": [
        "Main"
    ]
}