{
    "identifiers": [
        "typing",
        "Tuple",
        "torch",
        "x",
        "x",
        "chunk",
        "dim",
        "torch",
        "cat",
        "x2",
        "x1",
        "dim",
        "torch",
        "jit",
        "script",
        "x",
        "cos",
        "sin",
        "cos",
        "x",
        "shape",
        "sin",
        "x",
        "shape",
        "x",
        "cos",
        "rotate_half",
        "x",
        "sin",
        "torch",
        "nn",
        "Module",
        "dim_model",
        "_",
        "__",
        "torch",
        "arange",
        "dim_model",
        "dim_model",
        "register_buffer",
        "inv_freq",
        "x",
        "seq_dimension",
        "x",
        "shape",
        "seq_dimension",
        "seq_len",
        "_seq_len_cached",
        "_cos_cached",
        "device",
        "x",
        "device",
        "_cos_cached",
        "dtype",
        "x",
        "dtype",
        "seq_len",
        "torch",
        "arange",
        "x",
        "shape",
        "seq_dimension",
        "device",
        "x",
        "device",
        "dtype",
        "torch",
        "float32",
        "torch",
        "einsum",
        "t",
        "inv_freq",
        "to",
        "x",
        "dtype",
        "torch",
        "cat",
        "freqs",
        "freqs",
        "dim",
        "to",
        "x",
        "device",
        "emb",
        "cos",
        "to",
        "x",
        "dtype",
        "emb",
        "sin",
        "to",
        "x",
        "dtype",
        "_cos_cached",
        "_sin_cached",
        "q",
        "torch",
        "Tensor",
        "k",
        "torch",
        "Tensor",
        "Tuple",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "_cos_cached",
        "_sin_cached",
        "_update_cos_sin_tables",
        "k",
        "seq_dimension",
        "apply_rotary_pos_emb",
        "q",
        "_cos_cached",
        "_sin_cached",
        "apply_rotary_pos_emb",
        "k",
        "_cos_cached",
        "_sin_cached",
        "HeadRotaryEmbedding",
        "q",
        "k",
        "v",
        "forward",
        "q",
        "k",
        "q",
        "to",
        "v",
        "dtype",
        "k",
        "to",
        "v",
        "dtype",
        "v"
    ],
    "literals": [
        "\"inv_freq\"",
        "\"i,j->ij\""
    ],
    "variables": [
        "x1",
        "x2",
        "cos",
        "sin",
        "inv_freq",
        "_seq_len_cached",
        "_cos_cached",
        "_sin_cached",
        "seq_len",
        "_seq_len_cached",
        "t",
        "freqs",
        "emb",
        "_cos_cached",
        "_sin_cached",
        "q",
        "k"
    ],
    "comments": [
        "NOTE: 08/31/23, this class is copied from xformers as there is currently a bug related to which channel dim the rotary embedding is applied to.",
        "when the upstream issue is fixed, this file should be deleted. To track progress, see this issue: https://github.com/facebookresearch/xformers/issues/841",
        "taken from: https://github.com/facebookresearch/xformers/blob/748c159096d4f9fcfe3eaf22801e5aed4777210b/xformers/components/positional_embedding/rotary.py",
        "Copyright (c) Facebook, Inc. and its affiliates. All rights reserved.",
        "",
        "This source code is licensed under the BSD license found in the",
        "LICENSE file in the root directory of this source tree.",
        "CREDITS: This implementation is inspired by GPT-NeoX https://github.com/EleutherAI/gpt-neox",
        "NOTE: Almost the same right now, moving parts to Triton is the next step",
        "NOTE: This could probably be moved to Triton",
        "Handle a possible sequence length mismatch in between q and k",
        "Generate and save the inverse frequency buffer (non trainable)",
        "Reset the tables if the sequence length has changed,",
        "or if we're on a new device (possibly due to tracing for instance)",
        "NOTE: this version has the bug, but we trained the 7B model with it so it's default"
    ],
    "docstrings": [
        "\"\"\"\n    The rotary position embeddings from RoFormer_ (Su et. al).\n    A crucial insight from the method is that the query and keys are\n    transformed by rotation matrices which depend on the relative positions.\n\n    Other implementations are available in the Rotary Transformer repo_ and in\n    GPT-NeoX_, GPT-NeoX was an inspiration\n\n    .. _RoFormer: https://arxiv.org/abs/2104.09864\n    .. _repo: https://github.com/ZhuiyiTechnology/roformer\n    .. _GPT-NeoX: https://github.com/EleutherAI/gpt-neox\n\n\n    .. warning: Please note that this embedding is not registered on purpose, as it is transformative\n        (it does not create the embedding dimension) and will likely be picked up (imported) on a ad-hoc basis\n    \"\"\""
    ],
    "functions": [
        "rotate_half",
        "apply_rotary_pos_emb",
        "_update_cos_sin_tables",
        "forward",
        "forward"
    ],
    "classes": [
        "HeadRotaryEmbedding",
        "HeadRotaryWithCast"
    ]
}