{
    "identifiers": [
        "security",
        "exception",
        "UnexpectedErrorException",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "security",
        "KeyFactory",
        "java",
        "security",
        "PublicKey",
        "java",
        "security",
        "spec",
        "X509EncodedKeySpec",
        "java",
        "util",
        "ResourceBundle",
        "javax",
        "crypto",
        "Cipher",
        "PUBLIC_KEY_PATH",
        "ResourceBundle",
        "getBundle",
        "getString",
        "message",
        "encodedMessageStr",
        "encodedMessage",
        "fileKey",
        "getPublicKey",
        "keyFactory",
        "KeyFactory",
        "getInstance",
        "x509EncodedKeySpec",
        "fileKey",
        "publicKey",
        "keyFactory",
        "generatePublic",
        "x509EncodedKeySpec",
        "cipher",
        "Cipher",
        "getInstance",
        "cipher",
        "init",
        "Cipher",
        "ENCRYPT_MODE",
        "publicKey",
        "encodedMessage",
        "cipher",
        "doFinal",
        "message",
        "getBytes",
        "encodedMessageStr",
        "encodeToHexadecimal",
        "encodedMessage",
        "ex",
        "ex",
        "encodedMessageStr",
        "publicKeyBytes",
        "inputStream",
        "getClassLoader",
        "getResourceAsStream",
        "PUBLIC_KEY_PATH",
        "publicKeyBytes",
        "inputStream",
        "available",
        "inputStream",
        "read",
        "publicKeyBytes",
        "publicKeyBytes",
        "message",
        "hexadecimalString",
        "i",
        "i",
        "message",
        "length",
        "i",
        "h",
        "toHexString",
        "message",
        "i",
        "h",
        "length",
        "hexadecimalString",
        "hexadecimalString",
        "h",
        "hexadecimalString",
        "toUpperCase"
    ],
    "literals": [
        "\"properties.properties\"",
        "\"publicKeyPath\"",
        "\"RSA\"",
        "\"RSA/ECB/PKCS1Padding\"",
        "\"\"",
        "\"0\""
    ],
    "variables": [
        "encodedMessage",
        "publicKeyBytes"
    ],
    "comments": [
        "Getting the public key in a byte array.",
        "Setting the properties for the encoding...",
        "Encoding with public key...",
        "Encoding message to hexadecimal now, to avoid '/' character."
    ],
    "docstrings": [
        "* Contains the methods meant to encode Strings using RSA.\n * \n * @author Aitor Fidalgo",
        "* Relative path of the public key used to encode.",
        "* Encodes the given message with RSA/ECB/PKCS1Padding and returns it.\n     *\n     * @param message The message to be encoded.\n     * @return El message cifrado",
        "* Reads the public key file and returns it as a byte array.\n     *\n     * @return Private key content in byte array.\n     * @throws IOException If and I/O error occurs.",
        "* Encodes a byte array into an hexadecimal String and returns it.\n     * \n     * @param message Byte array to be encoded.\n     * @return Encoded hexadecimal representation of the given message."
    ],
    "functions": [
        "encode",
        "getPublicKey",
        "encodeToHexadecimal"
    ],
    "classes": [
        "PublicCrypt"
    ]
}