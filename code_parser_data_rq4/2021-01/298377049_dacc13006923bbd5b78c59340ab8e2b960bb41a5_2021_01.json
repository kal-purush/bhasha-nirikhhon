{
    "identifiers": [
        "fs",
        "path",
        "dotenv",
        "GraphQLClient",
        "gql",
        "Headers",
        "dotenv",
        "Headers",
        "path",
        "__dirname",
        "process",
        "fs",
        "directoryPath",
        "err",
        "_",
        "err",
        "err",
        "changedFiles",
        "changedFiles",
        "dir",
        "dir",
        "dir",
        "directoryPath",
        "dirChange",
        "dirChange",
        "resolve",
        "_",
        "fs",
        "filePath",
        "_",
        "data",
        "data",
        "data",
        "resolve",
        "parsed",
        "parsed",
        "logoPath",
        "file",
        "file",
        "updatedNewsprovider",
        "updatedNewsprovider",
        "newsproviders",
        "newsprovider",
        "newsproviders",
        "newsprovider",
        "newsprovider",
        "process",
        "endpoint",
        "GraphQLClient",
        "endpoint",
        "graphQLClient",
        "process",
        "gql",
        "newsprovider",
        "graphQLClient",
        "existsQuery",
        "existsResponse",
        "alreadyExists",
        "gql",
        "mutationToUse",
        "newsprovider",
        "graphQLClient",
        "mutation",
        "variables",
        "response",
        "alreadyExists",
        "newsprovider",
        "err",
        "err",
        "process"
    ],
    "literals": [
        "'fs'",
        "'path'",
        "'dotenv'",
        "'graphql-request'",
        "'cross-fetch'",
        "'./../newsprovider'",
        "'changedFiles'",
        "'/'",
        "'newsprovider'",
        "'/'",
        "'/info.json'",
        "'/newsprovider/'",
        "'/logo.png'",
        "'utf8'",
        "'Processing category'",
        "string",
        "'API endpoint invalid'",
        "Bearer ${process.env.API_ASSETS_KEY}",
        "query {newsProviderById(news_provider_id: \"${newsprovider.url}\") {_id}}",
        "'updateNewsProviderFromGithub'",
        "'createNewsProviderFromGithub'",
        "mutation CreateNewsprovider($data: NewsProviderInput!) {\n                        ${mutationToUse}(data: $data) {\n                          newsprovider_id\n                    }\n                    }",
        "'No response from mutation call'",
        "${alreadyExists ? 'Updated' : 'Created'} category ${\n              newsprovider.url\n            }",
        "'Updated'",
        "'Created'"
    ],
    "variables": [
        "directoryPath",
        "changedFiles",
        "updatedNewsprovider",
        "dirChange",
        "filePath",
        "logoPath",
        "parsed",
        "endpoint",
        "graphQLClient",
        "existsQuery",
        "existsResponse",
        "alreadyExists",
        "mutationToUse",
        "mutation",
        "variables",
        "response"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}