{
    "identifiers": [
        "R",
        "async",
        "pmap",
        "Workspace",
        "workspaces",
        "task",
        "workspace",
        "concurrency",
        "coordinatedExecutor",
        "workspaces",
        "task",
        "concurrency",
        "workspaces",
        "workspace",
        "workspace",
        "workspaces",
        "acc",
        "workspace",
        "acc",
        "workspace",
        "R",
        "workspace",
        "name",
        "names",
        "name",
        "workspace",
        "name",
        "names",
        "name",
        "workspacesByPkgName",
        "acc",
        "acc",
        "workspace",
        "R",
        "dependencies",
        "name",
        "workspacesByPkgName",
        "name",
        "workspace",
        "args",
        "args",
        "callback",
        "task",
        "workspace",
        "success",
        "callback",
        "success",
        "err",
        "callback",
        "err",
        "resolve",
        "reject",
        "async",
        "tasks",
        "concurrency",
        "err",
        "results",
        "err",
        "reject",
        "err",
        "resolve",
        "results",
        "success",
        "success",
        "concurrentExecutor",
        "workspaces",
        "task",
        "concurrency",
        "pmap",
        "workspaces",
        "task",
        "results",
        "success",
        "success"
    ],
    "literals": [
        "'remeda'",
        "'assert'",
        "'async'",
        "'p-map'",
        "'./workspace'",
        "string",
        "string",
        "'function'"
    ],
    "variables": [
        "coordinatedExecutor",
        "names",
        "workspacesByPkgName",
        "tasks",
        "callback",
        "concurrentExecutor",
        "results"
    ],
    "comments": [
        "Copyright (c) Microsoft Corporation.",
        "Licensed under the MIT License.",
        "Describes a function signature for an executor that accepts a list of workspaces,",
        "a task, and a concurrency parameter and executes the task against all workspaces.",
        "Executes `task` against `workspaces` ensuring that `task` is executed against dependencies",
        "before consumers (if possible, cycles are broken).",
        "Collect packages with all workspace deps",
        "Construct a DAG of tasks, with cycles removed, for async execution",
        "eslint-disable-next-line security/detect-object-injection",
        "Executes `task` against `workspaces` concurrently with no coordination"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}