{
    "identifiers": [
        "typing",
        "Union",
        "bpy",
        "src",
        "utility",
        "Utility",
        "Utility",
        "KeyFrame",
        "mathutils",
        "Euler",
        "Color",
        "name",
        "bpy",
        "data",
        "lights",
        "name",
        "name",
        "bpy",
        "data",
        "objects",
        "name",
        "name",
        "object_data",
        "light_data",
        "bpy",
        "context",
        "collection",
        "objects",
        "link",
        "light_obj",
        "location",
        "Union",
        "frame",
        "light_obj",
        "location",
        "Utility",
        "insert_keyframe",
        "light_obj",
        "frame",
        "rotation_euler",
        "Union",
        "Euler",
        "frame",
        "light_obj",
        "rotation_euler",
        "Utility",
        "insert_keyframe",
        "light_obj",
        "frame",
        "energy",
        "frame",
        "light_obj",
        "data",
        "energy",
        "Utility",
        "insert_keyframe",
        "light_obj",
        "data",
        "frame",
        "color",
        "Union",
        "Color",
        "frame",
        "light_obj",
        "data",
        "color",
        "Utility",
        "insert_keyframe",
        "light_obj",
        "data",
        "frame",
        "distance",
        "frame",
        "light_obj",
        "data",
        "distance",
        "Utility",
        "insert_keyframe",
        "light_obj",
        "data",
        "frame",
        "frame",
        "light_obj",
        "data",
        "Utility",
        "insert_keyframe",
        "light_obj",
        "data",
        "frame",
        "frame",
        "KeyFrame",
        "frame",
        "light_obj",
        "location",
        "frame",
        "Euler",
        "KeyFrame",
        "frame",
        "light_obj",
        "rotation_euler",
        "frame",
        "KeyFrame",
        "frame",
        "light_obj",
        "data",
        "energy",
        "frame",
        "Color",
        "KeyFrame",
        "frame",
        "light_obj",
        "data",
        "color",
        "frame",
        "KeyFrame",
        "frame",
        "light_obj",
        "data",
        "distance",
        "frame",
        "KeyFrame",
        "frame",
        "light_obj",
        "data"
    ],
    "literals": [
        "\"POINT\"",
        "\"light\"",
        "\"location\"",
        "\"rotation_euler\"",
        "\"energy\"",
        "\"color\"",
        "\"distance\"",
        "\"type\""
    ],
    "variables": [
        "light_data",
        "light_obj",
        "location",
        "rotation_euler",
        "energy",
        "color",
        "distance"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n        :param type: The initial type of light, can be one of [POINT, SUN, SPOT, AREA].\n        :param name: The name of the new light\n        \"\"\"",
        "\"\"\" Sets the location of the light in 3D world coordinates.\n\n        :param location: The location to set.\n        :param frame: The frame number which the value should be set to. If None is given, the current frame number is used.\n        \"\"\"",
        "\"\"\" Sets the rotation of the light in euler angles.\n\n        :param rotation_euler: The euler angles to set.\n        :param frame: The frame number which the value should be set to. If None is given, the current frame number is used.\n        \"\"\"",
        "\"\"\" Sets the energy of the light.\n\n        :param energy: The energy to set. If the type is SUN this value is interpreted as Watt per square meter, otherwise it is interpreted as Watt.\n        :param frame: The frame number which the value should be set to. If None is given, the current frame number is used.\n        \"\"\"",
        "\"\"\" Sets the color of the light.\n\n        :param color: The rgb color to set.\n        :param frame: The frame number which the value should be set to. If None is given, the current frame number is used.\n        \"\"\"",
        "\"\"\" Sets the falloff distance of the light = point where light is half the original intensity.\n\n        :param distance: The falloff distance to set.\n        :param frame: The frame number which the value should be set to. If None is given, the current frame number is used.\n        \"\"\"",
        "\"\"\" Sets the type of the light.\n\n        :param type: The type to set, can be one of [POINT, SUN, SPOT, AREA].\n        :param frame: The frame number which the value should be set to. If None is given, the current frame number is used.\n        \"\"\"",
        "\"\"\" Returns the location of the light in 3D world coordinates.\n\n        :param frame: The frame number at which the value should be returned. If None is given, the current frame number is used.\n        :return: The location at the specified frame.\n        \"\"\"",
        "\"\"\" Returns the rotation of the light in euler angles.\n\n        :param frame: The frame number at which the value should be returned. If None is given, the current frame number is used.\n        :return: The rotation at the specified frame.\n        \"\"\"",
        "\"\"\" Returns the energy of the light.\n\n        :param frame: The frame number at which the value should be returned. If None is given, the current frame number is used.\n        :return: The energy at the specified frame.\n        \"\"\"",
        "\"\"\" Returns the RGB color of the light.\n\n        :param frame: The frame number at which the value should be returned. If None is given, the current frame number is used.\n        :return: The color at the specified frame.\n        \"\"\"",
        "\"\"\" Returns the falloff distance of the light (point where light is half the original intensity).\n\n        :param frame: The frame number at which the value should be returned. If None is given, the current frame number is used.\n        :return: The falloff distance at the specified frame.\n        \"\"\"",
        "\"\"\" Returns the type of the light.\n\n        :param frame: The frame number at which the value should be returned. If None is given, the current frame number is used.\n        :return: The type at the specified frame.\n        \"\"\""
    ],
    "functions": [
        "set_location",
        "set_rotation_euler",
        "set_energy",
        "set_color",
        "set_distance",
        "set_type",
        "get_location",
        "get_rotation",
        "get_energy",
        "get_color",
        "get_distance",
        "get_type"
    ],
    "classes": [
        "Light"
    ]
}