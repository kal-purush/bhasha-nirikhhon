{
    "identifiers": [
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileNotFoundException",
        "java",
        "util",
        "java",
        "util",
        "Comparator",
        "java",
        "util",
        "Scanner",
        "X",
        "Y",
        "X",
        "Y",
        "args",
        "cp",
        "cp",
        "readPoints",
        "start",
        "nanoTime",
        "cp",
        "calculate",
        "finish",
        "nanoTime",
        "seconds",
        "finish",
        "start",
        "seconds",
        "scanFile",
        "pointsFile",
        "scanFile",
        "nextLine",
        "start",
        "nanoTime",
        "file",
        "pointsFile",
        "scanPoints",
        "file",
        "scanPoints",
        "hasNextLine",
        "bothPoints",
        "scanPoints",
        "nextLine",
        "split",
        "point",
        "parseDouble",
        "bothPoints",
        "parseDouble",
        "bothPoints",
        "X",
        "add",
        "point",
        "Y",
        "add",
        "point",
        "X",
        "sort",
        "Comparator",
        "comparingDouble",
        "x",
        "x",
        "x",
        "Y",
        "sort",
        "Comparator",
        "comparingDouble",
        "y",
        "y",
        "y",
        "pointsFile",
        "scanFile",
        "close",
        "scanPoints",
        "close",
        "finish",
        "nanoTime",
        "seconds",
        "finish",
        "start",
        "seconds",
        "result",
        "passin",
        "X",
        "Y",
        "result",
        "p1",
        "x",
        "result",
        "p1",
        "y",
        "result",
        "p2",
        "x",
        "result",
        "p2",
        "y",
        "result",
        "distance",
        "X",
        "Y",
        "XL",
        "X",
        "subList",
        "X",
        "size",
        "X",
        "size",
        "X",
        "size",
        "XR",
        "X",
        "subList",
        "X",
        "size",
        "X",
        "size",
        "X",
        "size",
        "X",
        "size",
        "YL",
        "YR",
        "dist",
        "X",
        "size",
        "dist",
        "distanceCalculate",
        "X",
        "get",
        "X",
        "get",
        "minPair",
        "X",
        "get",
        "X",
        "get",
        "dist",
        "i",
        "i",
        "X",
        "size",
        "i",
        "dist",
        "distanceCalculate",
        "X",
        "get",
        "i",
        "X",
        "get",
        "i",
        "X",
        "size",
        "dist",
        "minPair",
        "distance",
        "minPair",
        "X",
        "get",
        "i",
        "X",
        "get",
        "i",
        "X",
        "size",
        "dist",
        "minPair",
        "p",
        "Y",
        "p",
        "x",
        "XR",
        "get",
        "x",
        "YL",
        "add",
        "p",
        "YR",
        "add",
        "p",
        "pair1",
        "passin",
        "XL",
        "YL",
        "pair2",
        "passin",
        "XR",
        "YR",
        "shortDis",
        "pair1",
        "distance",
        "pair2",
        "distance",
        "shortDis",
        "pair1",
        "shortDis",
        "pair2",
        "mid",
        "XL",
        "get",
        "XL",
        "size",
        "x",
        "XR",
        "get",
        "x",
        "line",
        "mid",
        "shortDis",
        "distance",
        "line2",
        "mid",
        "shortDis",
        "distance",
        "yPrime",
        "p",
        "Y",
        "p",
        "x",
        "line2",
        "p",
        "x",
        "line",
        "yPrime",
        "add",
        "p",
        "i",
        "i",
        "yPrime",
        "size",
        "i",
        "j",
        "j",
        "i",
        "j",
        "yPrime",
        "size",
        "j",
        "dis",
        "distanceCalculate",
        "yPrime",
        "get",
        "i",
        "yPrime",
        "get",
        "i",
        "j",
        "dis",
        "shortDis",
        "distance",
        "shortDis",
        "yPrime",
        "get",
        "i",
        "yPrime",
        "get",
        "i",
        "j",
        "dis",
        "shortDis",
        "p1",
        "p2",
        "sqrt",
        "pow",
        "p1",
        "x",
        "p2",
        "x",
        "pow",
        "p1",
        "y",
        "p2",
        "y",
        "p1",
        "p2",
        "distance",
        "p1",
        "p2",
        "distance",
        "p1",
        "p1",
        "p2",
        "p2",
        "distance",
        "distance",
        "x",
        "y",
        "x",
        "y",
        "x",
        "x",
        "y",
        "y",
        "x",
        "y"
    ],
    "literals": [
        "\"It took \"",
        "\" seconds to calculate.\"",
        "\"Enter the file that has the points: \"",
        "\"Reading the file......\"",
        "\" \"",
        "\"File read in: \"",
        "\"It took \"",
        "\" seconds to read in the points.\"",
        "\"Calculating......\"",
        "\"The closest points are: \"",
        "\"(\"",
        "\",\"",
        "\")\"",
        "\"(\"",
        "\",\"",
        "\")\"",
        "\"Distance = \""
    ],
    "variables": [
        "X",
        "Y",
        "dist",
        "shortDis",
        "p1",
        "p2",
        "distance",
        "x",
        "y"
    ],
    "comments": [
        "imports",
        "class ClosestPoints",
        "Array list X takes a set of points and sort them by increasing x value",
        "Array list X takes the same set of points but sort them by increasing y value",
        "constructor instantiates two array lists",
        "class object",
        "call method readPoints",
        "call method calculate",
        "and see how much time it took to run the method",
        "print out how much time it took to run the method",
        "heading",
        "scanner to scan what users enter",
        "make the input as a file",
        "scan the file",
        "split each line to two strings and type cast them to doubles as x and y values",
        "and make each line a point then put the points into array lists.",
        "sort the array lists according to their x and y value",
        "increasing order",
        "print out what file the program read in",
        "close the scanners",
        "prints out how much time it took to read in the points",
        "call the helper method and print out which two points in the file have the",
        "closest distance and print out the distance between them.",
        "divide both X and Y array lists into two array lists left and right",
        "the smallest distance",
        "if the size is less than 4",
        "simply  calculate the distance between",
        "all the points and find the closest points.",
        "if (!(X.get(i).equals(X.get((i + 1) % X.size())))){",
        "}",
        "if (dist != 0) {",
        "pairs.add(new Pair(X.get(i), X.get((i + 1) % X.size()), dist));",
        "} else {",
        "System.out.println(\"Error: Distance is 0.\");",
        "}",
        "fill the left and right array lists from array list Y",
        "recursively conquer the array lists",
        "pair object",
        "find which pair has the smaller distance",
        "find the middle line L",
        "find the limit of both left and right side",
        "array list yPrime only takes the points that we need to",
        "consider about",
        "fill the array list yPrime",
        "find the points that have closest distance in array list yPrime",
        "return the pair of points that have the closest distance",
        "and the distance between them",
        "the formula of calculating the distance of two points",
        "pair class contains two points and the distance between them",
        "point class contains a x and a y value and two methods to get x value",
        "and y value"
    ],
    "docstrings": [
        "* @author MingFang Li\n * Course: CSCI 340 - DATA STRUCTURES/ALGORITHM DSGN\n * Date: 04/02/2019\n * Assignment: 4\n * Project/Class Description:\n *\n * This program asks the user to input the name of the file which contains all the points\n * and then use divide and conquer algrithm to calculate and find the points that have the\n * closest distance and the distance between them.\n *\n * Known bugs: none",
        "* The main calls the method readPoints and calculate to read in the points\n     * then find the closest points and calculate the distance, and\n     * prints out how much time did it take to calculate.\n     * @param args\n     * @throws FileNotFoundException",
        "* This method asks the user to enter the name of the file which contains all the points,\n     * then add all the points in two array lists X and Y, then sort the array lists by their x and y value,\n     * then prints out how much time it took to read in all the points.\n     * @throws FileNotFoundException",
        "* This method calls its helper method to use divide and conquer algorithm\n     * to calculate and find the points that have the closest distance in the file.",
        "* This is the helper method of method calculate.\n     * This method calculates which two points have the closest distance.\n     * If there are less than 4 points in the X array, simply calculate the distance between\n     * all the points and find the closest points.\n     * else, split and conquer the X array and Y array recursively, then take only some of the\n     * points we need to consider about and find the points that have the closest distance.\n     * @param X is an array lists of points sorted by x value.\n     * @param Y is the same array lists of points but sorted by y value.\n     * @return a pair object that contains two closest points and the distance between them."
    ],
    "functions": [
        "ClosestPoints",
        "main",
        "readPoints",
        "calculate",
        "Pair",
        "passin",
        "distanceCalculate",
        "Pair",
        "Point",
        "getX",
        "getY"
    ],
    "classes": [
        "ClosestPoints",
        "Pair",
        "Point"
    ]
}