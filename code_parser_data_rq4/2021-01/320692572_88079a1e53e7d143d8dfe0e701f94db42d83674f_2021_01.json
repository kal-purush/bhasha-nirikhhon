{
    "identifiers": [
        "base64",
        "gzip",
        "traceback",
        "datetime",
        "timedelta",
        "datetime",
        "typing",
        "Tuple",
        "Union",
        "jwt",
        "authlib",
        "jose",
        "jwk",
        "cryptography",
        "hazmat",
        "backends",
        "default_backend",
        "cryptography",
        "hazmat",
        "primitives",
        "serialization",
        "unique",
        "Enum",
        "exception",
        "exception",
        "interpretations",
        "value",
        "exception",
        "interpretations",
        "value",
        "staticmethod",
        "validity",
        "claims",
        "private_key_file_name",
        "kid",
        "algorithm",
        "pass_phrase",
        "Tuple",
        "ValidateCode",
        "Union",
        "pass_phrase",
        "pass_phrase",
        "pass_phrase",
        "encode",
        "open",
        "private_key_file_name",
        "private_key_fh",
        "private_key_fh",
        "read",
        "private_key_fh",
        "close",
        "serialization",
        "load_pem_private_key",
        "data",
        "pem_data",
        "encode",
        "password",
        "pass_phrase",
        "backend",
        "default_backend",
        "e",
        "ValidateCode",
        "UNABLE_TO_LOAD_KEYS",
        "e",
        "datetime",
        "now",
        "timestamp",
        "datetime",
        "now",
        "timedelta",
        "seconds",
        "validity",
        "timestamp",
        "jwt",
        "encode",
        "claims",
        "private_key",
        "algorithm",
        "algorithm",
        "headers",
        "kid",
        "ValidateCode",
        "VALID",
        "encoded_token",
        "e",
        "ValidateCode",
        "INVALID",
        "e",
        "staticmethod",
        "key_file_name",
        "kid",
        "alg",
        "Tuple",
        "ValidateCode",
        "Union",
        "open",
        "key_file_name",
        "public_key_fh",
        "public_key_fh",
        "read",
        "public_key_fh",
        "close",
        "e",
        "ValidateCode",
        "UNABLE_TO_LOAD_KEYS",
        "e",
        "jwk",
        "dumps",
        "pem_data",
        "kty",
        "kid",
        "alg",
        "ValidateCode",
        "VALID",
        "result",
        "e",
        "ValidateCode",
        "INVALID",
        "e",
        "staticmethod",
        "claims",
        "secret",
        "validity",
        "algorithm",
        "compression",
        "Tuple",
        "ValidateCode",
        "Union",
        "validity",
        "datetime",
        "now",
        "timedelta",
        "seconds",
        "validity",
        "timestamp",
        "jwt",
        "encode",
        "claims",
        "secret",
        "algorithm",
        "algorithm",
        "e",
        "ValidateCode",
        "INVALID",
        "e",
        "compression",
        "gzip",
        "compress",
        "encoded_cookie",
        "base64",
        "urlsafe_b64encode",
        "compressed_cookie",
        "encoded_cookie",
        "e",
        "ValidateCode",
        "UNABLE_TO_COMPRESS",
        "e",
        "ValidateCode",
        "VALID",
        "encoded_cookie",
        "staticmethod",
        "cookie",
        "secret",
        "verify",
        "compression",
        "Tuple",
        "ValidateCode",
        "Union",
        "compression",
        "base64",
        "urlsafe_b64decode",
        "cookie",
        "gzip",
        "decompress",
        "decoded_64",
        "uncompressed_cookie",
        "e",
        "traceback",
        "print_exc",
        "ValidateCode",
        "UNABLE_TO_DECOMPRESS",
        "e",
        "jwt",
        "get_unverified_header",
        "cookie",
        "get",
        "jwt",
        "DecodeError",
        "e",
        "traceback",
        "print_exc",
        "ValidateCode",
        "UNPARSABLE_TOKEN",
        "e",
        "algorithm",
        "ValidateCode",
        "UNSPECIFIED_ALG",
        "jwt",
        "decode",
        "cookie",
        "secret",
        "algorithms",
        "algorithm",
        "verify",
        "verify",
        "ValidateCode",
        "VALID",
        "decoded_token",
        "e",
        "traceback",
        "print_exc",
        "ValidateCode",
        "INVALID",
        "e"
    ],
    "literals": [
        "\"Token is valid\"",
        "\"Token does not specify algorithm\"",
        "\"Token signature is invalid\"",
        "\"Unable to load key from file\"",
        "\"Unable to parse token\"",
        "\"Unable to compress the encoded token\"",
        "\"Unable to decompress the encoded token\"",
        "\"Identity Token or Identity Claims not specified\"",
        "\". \"",
        "\"\"",
        "\"utf-8\"",
        "\"utf-8\"",
        "'iat'",
        "'exp'",
        "'kid'",
        "'utf-8'",
        "'RSA'",
        "\"kid\"",
        "\"alg\"",
        "\"use\"",
        "\"sig\"",
        "'HS256'",
        "'exp'",
        "'utf-8'",
        "''",
        "'alg'"
    ],
    "variables": [
        "VALID",
        "UNSPECIFIED_ALG",
        "INVALID",
        "UNABLE_TO_LOAD_KEYS",
        "UNPARSABLE_TOKEN",
        "UNABLE_TO_COMPRESS",
        "UNABLE_TO_DECOMPRESS",
        "UNSPECIFIED_ID_TOKEN",
        "interpretations",
        "pass_phrase",
        "pass_phrase",
        "pem_data",
        "private_key",
        "claims",
        "claims",
        "encoded_token",
        "pem_data",
        "pem_data",
        "result",
        "result",
        "result",
        "result",
        "claims",
        "encoded_cookie",
        "encoded_cookie",
        "compressed_cookie",
        "encoded_cookie",
        "encoded_cookie",
        "decoded_64",
        "uncompressed_cookie",
        "cookie",
        "algorithm",
        "algorithm",
        "decoded_token"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "MIT License",
        "",
        "Copyright (c) 2020 FABRIC Testbed",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in all",
        "copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE.",
        "",
        "Author Komal Thareja (kthare10@renci.org)"
    ],
    "docstrings": [
        "\"\"\"\n        sign and base64 encode the token\n        :param validity validity in seconds\n        :param claims claims to be added in token\n        :param private_key_file_name private key file name used to sign the token\n        :param kid kid to be added to the header\n        :param algorithm algorithm by which to encode the token\n        :param pass_phrase private key pass phrase\n\n        :return ValidateCode or None, exception or None, Encoded Token or None:\n        \"\"\"",
        "\"\"\"\n        Encode JWK from a PEM file\n        :param key_file_name Key File Name\n        :param kid kid to be added to the JWK\n        :param alg algorithm to be added\n\n        :return ValidateCode or None, exception or None, JWK or None:\n        \"\"\"",
        "\"\"\"\n        Encode a JWT\n        :claims incoming claims\n        :secret secret\n        :validity validity in seconds\n        :algorithm algorithm\n        :compression compression\n\n        :return ValidateCode or None, exception or None, encoded token or None:\n        \"\"\"",
        "\"\"\"\n        Decode and validate a JWT\n        :cookie incoming cookie\n        :secret secret\n        :compression compression\n\n        :return ValidateCode or None, exception or None, Decoded Token or None:\n        \"\"\""
    ],
    "functions": [
        "interpret",
        "encode_and_sign_with_private_key",
        "encode_jwk",
        "encode_and_compress",
        "decode"
    ],
    "classes": [
        "ValidateCode",
        "JWTManager"
    ]
}