{
    "identifiers": [
        "tensorflow",
        "keras",
        "applications",
        "imagenet_utils",
        "preprocess_input",
        "efficientnet_preprocess_input",
        "tensorflow",
        "keras",
        "layers",
        "Activation",
        "tensorflow",
        "keras",
        "backend",
        "sigmoid",
        "constant",
        "tensorflow",
        "keras",
        "initializers",
        "Initializer",
        "torch",
        "nn",
        "ConvTranspose2d",
        "init",
        "torch",
        "Tensor",
        "numpy",
        "np",
        "math",
        "skimage",
        "transform",
        "rescale",
        "skimage",
        "util",
        "pad",
        "padding",
        "scipy",
        "ndimage",
        "filters",
        "gaussian_filter",
        "Activation",
        "activation",
        "kwargs",
        "Swish",
        "activation",
        "kwargs",
        "x",
        "x",
        "sigmoid",
        "x",
        "x",
        "beta",
        "x",
        "sigmoid",
        "x",
        "Initializer",
        "shape",
        "dtype",
        "shape",
        "dtype",
        "shape",
        "dtype",
        "shape",
        "shape",
        "np",
        "float32",
        "shape",
        "shape",
        "np",
        "zeros",
        "filter_size",
        "filter_size",
        "dtype",
        "dtype",
        "filter_size",
        "filter_size",
        "scale_factor",
        "scale_factor",
        "x",
        "filter_size",
        "y",
        "filter_size",
        "abs",
        "x",
        "center",
        "scale_factor",
        "abs",
        "y",
        "center",
        "scale_factor",
        "np",
        "zeros",
        "filter_size",
        "filter_size",
        "num_channels",
        "num_channels",
        "i",
        "num_channels",
        "bilinear_kernel",
        "constant",
        "value",
        "weights",
        "shape",
        "ConvTranspose2d",
        "channels",
        "kernel_size",
        "stride",
        "groups",
        "isinstance",
        "stride",
        "stride",
        "stride",
        "groups",
        "channels",
        "stride",
        "stride",
        "channels",
        "channels",
        "kernel_size",
        "kernel_size",
        "stride",
        "stride",
        "padding",
        "padding",
        "groups",
        "groups",
        "init",
        "constant",
        "bias",
        "init",
        "constant",
        "weight",
        "bilinear_kernel",
        "kernel_size",
        "i",
        "in_channels",
        "groups",
        "i",
        "weight",
        "data",
        "bilinear_kernel",
        "staticmethod",
        "kernel_size",
        "np",
        "zeros",
        "kernel_size",
        "kernel_size",
        "kernel_size",
        "kernel_size",
        "scale_factor",
        "scale_factor",
        "x",
        "kernel_size",
        "y",
        "kernel_size",
        "abs",
        "x",
        "center",
        "scale_factor",
        "abs",
        "y",
        "center",
        "scale_factor",
        "Tensor",
        "bilinear_kernel",
        "source_array",
        "target_height",
        "target_width",
        "source_array",
        "shape",
        "target_height",
        "target_width",
        "source_height",
        "source_width",
        "target_ratio",
        "source_ratio",
        "target_width",
        "source_width",
        "target_height",
        "source_height",
        "rescale",
        "source_array",
        "scale",
        "multichannel",
        "resized_array",
        "source_array",
        "target_height",
        "target_width",
        "source_array",
        "shape",
        "source_height",
        "target_height",
        "source_width",
        "target_width",
        "resize",
        "source_array",
        "target_height",
        "target_width",
        "source_array",
        "shape",
        "target_width",
        "source_width",
        "target_height",
        "source_height",
        "target_width",
        "source_width",
        "pad_left",
        "target_height",
        "source_height",
        "pad_top",
        "pad_top",
        "pad_bottom",
        "pad_left",
        "pad_right",
        "len",
        "source_array",
        "shape",
        "has_channels_dim",
        "paddings",
        "append",
        "padding",
        "source_array",
        "paddings",
        "target_array",
        "batch",
        "resolution",
        "lite",
        "resize",
        "frame",
        "resolution",
        "resolution",
        "frame",
        "batch",
        "pad",
        "frame",
        "resolution",
        "resolution",
        "frame",
        "batch",
        "np",
        "uint8",
        "frame",
        "frame",
        "batch",
        "np",
        "asarray",
        "batch",
        "lite",
        "efficientnet_preprocess_input",
        "batch",
        "mode",
        "efficientnet_preprocess_input",
        "batch",
        "mode",
        "batch",
        "frame_output",
        "frame_height",
        "frame_width",
        "real_time",
        "frame_output",
        "shape",
        "i",
        "frame_output",
        "shape",
        "frame_output",
        "i",
        "real_time",
        "gaussian_filter",
        "conf",
        "sigma",
        "np",
        "argmax",
        "conf",
        "math",
        "floor",
        "max_index",
        "output_width",
        "max_index",
        "output_width",
        "real_time",
        "conf",
        "peak_y",
        "peak_x",
        "confidence",
        "peak_x",
        "peak_y",
        "peak_x",
        "output_width",
        "peak_y",
        "output_height",
        "frame_width",
        "frame_height",
        "frame_width",
        "frame_height",
        "frame_width",
        "peak_y",
        "norm_padding",
        "norm_padding",
        "output_height",
        "peak_y",
        "peak_y",
        "peak_y",
        "peak_y",
        "frame_width",
        "frame_height",
        "frame_height",
        "frame_width",
        "frame_height",
        "peak_x",
        "norm_padding",
        "norm_padding",
        "output_width",
        "peak_x",
        "peak_x",
        "peak_x",
        "peak_x",
        "frame_coords",
        "append",
        "body_parts",
        "i",
        "peak_x",
        "peak_y",
        "frame_coords"
    ],
    "literals": [
        "'Swish'",
        "'shape'",
        "\"Must use no grouping, \"",
        "\"or one group per channel\"",
        "'constant'",
        "'tf'",
        "'torch'",
        "'head_top'",
        "'upper_neck'",
        "'right_shoulder'",
        "'right_elbow'",
        "'right_wrist'",
        "'thorax'",
        "'left_shoulder'",
        "'left_elbow'",
        "'left_wrist'",
        "'pelvis'",
        "'right_hip'",
        "'right_knee'",
        "'right_ankle'",
        "'left_hip'",
        "'left_knee'",
        "'left_ankle'"
    ],
    "variables": [
        "beta",
        "shape",
        "dtype",
        "shape",
        "dtype",
        "scale",
        "filter_size",
        "num_channels",
        "bilinear_kernel",
        "scale_factor",
        "center",
        "center",
        "bilinear_kernel",
        "x",
        "y",
        "weights",
        "weights",
        "i",
        "i",
        "stride",
        "padding",
        "bilinear_kernel",
        "j",
        "j",
        "i",
        "j",
        "bilinear_kernel",
        "scale_factor",
        "center",
        "center",
        "bilinear_kernel",
        "x",
        "y",
        "source_height",
        "source_width",
        "target_ratio",
        "source_ratio",
        "scale",
        "scale",
        "resized_array",
        "source_height",
        "source_width",
        "source_array",
        "source_height",
        "source_width",
        "pad_left",
        "pad_top",
        "pad_right",
        "pad_bottom",
        "paddings",
        "has_channels_dim",
        "target_array",
        "batch",
        "batch",
        "batch",
        "batch",
        "batch",
        "batch",
        "body_parts",
        "confidence",
        "output_height",
        "output_width",
        "frame_coords",
        "conf",
        "conf",
        "max_index",
        "peak_y",
        "peak_x",
        "peak_x",
        "peak_y",
        "norm_padding",
        "peak_y",
        "peak_y",
        "peak_y",
        "norm_padding",
        "peak_x",
        "peak_x",
        "peak_x"
    ],
    "comments": [
        "Initialize parameters",
        "Overwrites argument",
        "Create bilinear weights",
        "Assign weights",
        "Get height and width of source array",
        "Compute correct scale for resizing operation",
        "Perform rescaling",
        "Get height and width of source array",
        "Ensure array is resized properly",
        "Compute padding variables",
        "Perform padding",
        "Resize frames according to side",
        "Pad frames in batch to form quadratic input",
        "Convert from normalized pixels to RGB absolute values",
        "Construct Numpy array from batch",
        "Preprocess images in batch",
        "Define body parts",
        "Define confidence level",
        "Fetch output resolution",
        "Initialize coordinates",
        "Iterate over body parts",
        "Find peak point",
        "Verify confidence",
        "Normalize coordinates",
        "Convert to original aspect ratio"
    ],
    "docstrings": [
        "\"\"\"\n    Custom Swish activation function for Keras.\n    \"\"\"",
        "\"\"\"\n    Standard Swish activation.\n    \n    Args:\n        x: Keras tensor\n            Input tensor\n            \n    Returns:\n        Output tensor of Swish transformation.\n    \"\"\"",
        "\"\"\"\n    E-swish activation with Beta value of 1.25.\n    \n    Args:\n        x: Keras tensor\n            Input tensor\n            \n    Returns:\n        Output tensor of E-swish transformation.\n    \"\"\"",
        "\"\"\"\n    A Keras implementation of bilinear weights by Joel Kronander (https://github.com/tensorlayer/tensorlayer/issues/53)\n    \"\"\"",
        "\"\"\"\n    A PyTorch implementation of transposed bilinear convolution by mjstevens777 (https://gist.github.com/mjstevens777/9d6771c45f444843f9e3dce6a401b183)\n    \"\"\"",
        "\"\"\"Set up the layer.\n        Parameters\n        ----------\n        channels: int\n            The number of input and output channels\n        stride: int or tuple\n            The amount of upsampling to do\n        groups: int\n            Set to 1 for a standard convolution. Set equal to channels to\n            make sure there is no cross-talk between channels.\n        \"\"\"",
        "\"\"\"Reset the weight and bias.\"\"\"",
        "\"\"\"Generate a bilinear upsampling kernel.\"\"\"",
        "\"\"\" \n    Resizes an image or image-like Numpy array to be no larger than (target_height, target_width) or (target_height, target_width, c).\n    \n    Args:\n        source_array: ndarray\n            Numpy array of shape (h, w) or (h, w, 3)\n        target_height: int\n            Desired maximum height\n        target_width: int\n            Desired maximum width\n        \n    Returns:\n        Resized Numpy array.\n    \"\"\"",
        "\"\"\" \n    Pads an image or image-like Numpy array with zeros to fit the target-size.\n    \n    Args:\n        source_array: ndarray\n            Numpy array of shape (h, w) or (h, w, 3)\n        target_height: int\n            Height of padded image\n        target_width: int\n            Width of padded image\n    \n    Returns:\n        Zero-padded Numpy array of shape (target_height, target_width) or (target_height, target_width, c).\n    \"\"\"",
        "\"\"\"\n    Preprocess Numpy array according to model preferences.\n    \n    Args:\n        batch: ndarray\n            Numpy array of shape (n, h, w, 3)\n        resolution: int\n            Input height and width of model to utilize\n        lite: boolean\n            Defines if EfficientPose Lite model is used\n    \n    Returns:\n        Preprocessed Numpy array of shape (n, resolution, resolution, 3).\n    \"\"\"",
        "\"\"\"\n    Extract coordinates from supplied confidence maps.\n    \n    Args:\n        frame_output: ndarray\n            Numpy array of shape (h, w, c)\n        frame_height: int\n            Height of relevant frame\n        frame_width: int\n            Width of relevant frame\n        real-time: boolean\n            Defines if processing is performed in real-time\n           \n    Returns:\n        List of predicted coordinates for all c body parts in the frame the outputs are computed from.\n    \"\"\""
    ],
    "functions": [
        "swish1",
        "eswish",
        "__call__",
        "get_config",
        "reset_parameters",
        "bilinear_kernel",
        "resize",
        "pad",
        "preprocess",
        "extract_coordinates"
    ],
    "classes": [
        "Swish",
        "keras_BilinearWeights",
        "pytorch_BilinearConvTranspose2d"
    ]
}