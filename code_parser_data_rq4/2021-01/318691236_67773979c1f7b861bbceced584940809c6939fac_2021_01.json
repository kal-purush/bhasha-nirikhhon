{
    "identifiers": [
        "mytest",
        "algorithm",
        "doublepoint",
        "height",
        "height",
        "height",
        "length",
        "max",
        "left",
        "right",
        "height",
        "length",
        "left",
        "right",
        "curArea",
        "min",
        "height",
        "left",
        "height",
        "right",
        "right",
        "left",
        "max",
        "max",
        "curArea",
        "max",
        "height",
        "left",
        "height",
        "right",
        "left",
        "right",
        "max"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "从两端开始，向中间遍历，水槽的高度由最短的确定",
        "如果固定最端的一边，向固定端移动另一边，水通一定不会比之前多",
        "移动较小的那一边，因为移动最大的那边，得到的结果肯定不会比当前大"
    ],
    "docstrings": [
        "* //给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i,\n * //ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n * //\n * // 说明：你不能倾斜容器。\n * // 示例 1：\n * //\n * //输入：[1,8,6,2,5,4,8,3,7]\n * //输出：49\n * //解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n * //\n * // 示例 2：\n * //\n * //\n * //输入：height = [1,1]\n * //输出：1\n * //\n * //\n * // 示例 3：\n * //\n * //\n * //输入：height = [4,3,2,1,4]\n * //输出：16\n * //\n * //\n * // 示例 4：\n * //\n * //\n * //输入：height = [1,2,1]\n * //输出：2\n * // 提示：\n * //\n * //\n * // n = height.length\n * // 2 <= n <= 3 * 104\n * // 0 <= height[i] <= 3 * 104\n * //\n * // Related Topics 数组 双指针\n * https://leetcode-cn.com/problems/container-with-most-water/\n *\n * @author : yufei\n * @date : 2021/1/15 16:14\n * @description :"
    ],
    "functions": [
        "maxArea"
    ],
    "classes": [
        "MaxArea"
    ]
}