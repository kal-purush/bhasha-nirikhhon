{
    "identifiers": [
        "testUtil",
        "fs",
        "rimraf",
        "promisify",
        "spawnSync",
        "SpawnSyncReturns",
        "os",
        "promisify",
        "rimraf",
        "require",
        "fs",
        "os",
        "LOCAL_BASE_TEST_DIR",
        "fs",
        "os",
        "REMOTE_BASE_TEST_DIR",
        "createTestEnvironment",
        "projectDir",
        "testHome",
        "testUtil",
        "fs",
        "projectDir",
        "projectDir",
        "testHome",
        "process",
        "createTestEnvironment",
        "LOCAL_TEST_PROJECT_DIR",
        "LOCAL_TEST_HOME",
        "createTestEnvironment",
        "REMOTE_TEST_PROJECT_DIR",
        "REMOTE_TEST_HOME",
        "contains",
        "phrase",
        "res",
        "res",
        "res",
        "res",
        "res",
        "output",
        "phrase",
        "testUtil",
        "contains",
        "setup",
        "env",
        "testUtil",
        "spawnSync",
        "version",
        "fs",
        "process",
        "cartiNodePackage",
        "env",
        "cartiNodePackage",
        "fs",
        "process",
        "env",
        "spawnSync",
        "env",
        "spawnSync",
        "env",
        "cartiNodePackage",
        "env",
        "res",
        "res",
        "testUtil",
        "helpCommand",
        "env",
        "result",
        "cartiCmd",
        "pth",
        "pth",
        "testBundleCmdArgs",
        "dir",
        "cartiCmd",
        "dir",
        "testBundleCommand",
        "dir",
        "testUtil",
        "testBundleCmdArgs",
        "dir",
        "contains",
        "testBundleInstallArgs",
        "dir",
        "bundleName",
        "cartiCmd",
        "dir",
        "bundleName",
        "testBundleInstallCommand",
        "dir",
        "bundleName",
        "testUtil",
        "testBundleInstallArgs",
        "dir",
        "bundleName",
        "diskLocation",
        "dir",
        "dir",
        "testPublishCmdArgs",
        "dir",
        "uri",
        "cartiCmd",
        "dir",
        "uri",
        "testPublishCommand",
        "dir",
        "uri",
        "testUtil",
        "testPublishCmdArgs",
        "dir",
        "uri",
        "testAddRepoCmdArgs",
        "dir",
        "uri",
        "cartiCmd",
        "dir",
        "uri",
        "testAddRepoCommand",
        "dir",
        "uri",
        "testUtil",
        "testAddRepoCmdArgs",
        "dir",
        "uri",
        "testMachineInitCmdArgs",
        "dir",
        "cartiCmd",
        "dir",
        "testMachineInitCommand",
        "dir",
        "testUtil",
        "testMachineInitCmdArgs",
        "dir",
        "testMachineAddCmdArgs",
        "dir",
        "bundleName",
        "cmd",
        "cartiCmd",
        "dir",
        "bundleName",
        "cmd",
        "cmd",
        "testMachineAddCommand",
        "dir",
        "bundleName",
        "cmd",
        "testUtil",
        "testMachineAddCmdArgs",
        "dir",
        "bundleName",
        "cmd",
        "testMachineBuildArgs",
        "dir",
        "cartiCmd",
        "dir",
        "testMachineBuildCommand",
        "dir",
        "testUtil",
        "testMachineBuildArgs",
        "dir",
        "testMachineInstallArgs",
        "dir",
        "uri",
        "cartiCmd",
        "dir",
        "uri",
        "testMachineInstallCommand",
        "dir",
        "uri",
        "testUtil",
        "testMachineInstallArgs",
        "dir",
        "uri",
        "describe",
        "afterAll",
        "rmAll",
        "LOCAL_BASE_TEST_DIR",
        "rmAll",
        "REMOTE_BASE_TEST_DIR",
        "it",
        "setup",
        "localTestEnvironment",
        "setup",
        "remoteTestEnvironment",
        "testBundleCommand",
        "localTestEnvironment",
        "testPublishCommand",
        "localTestEnvironment",
        "diskLocation",
        "localTestEnvironment",
        "testAddRepoCommand",
        "remoteTestEnvironment",
        "localTestEnvironment",
        "testBundleInstallCommand",
        "remoteTestEnvironment",
        "testMachineInitCommand",
        "remoteTestEnvironment",
        "testMachineAddCommand",
        "remoteTestEnvironment",
        "testMachineBuildCommand",
        "remoteTestEnvironment",
        "testMachineInstallCommand",
        "localTestEnvironment",
        "remoteTestEnvironment",
        "expect",
        "testUtil",
        "localBundleCmd",
        "localTestEnvironment",
        "expect",
        "testUtil",
        "publishBundleCmd",
        "localTestEnvironment",
        "expect",
        "testUtil",
        "addRepoCmd",
        "remoteTestEnvironment",
        "expect",
        "testUtil",
        "installBundleCmd",
        "remoteTestEnvironment",
        "expect",
        "testUtil",
        "machineInitCmd",
        "remoteTestEnvironment",
        "expect",
        "testUtil",
        "machineAddCmd",
        "remoteTestEnvironment",
        "expect",
        "testUtil",
        "machineBuildCmd",
        "remoteTestEnvironment",
        "expect",
        "testUtil",
        "machineInstallCmd",
        "localTestEnvironment"
    ],
    "literals": [
        "\"../test/test_util\"",
        "\"fs-extra\"",
        "\"rimraf\"",
        "\"util\"",
        "\"child_process\"",
        "\"os\"",
        "\"../../package.json\"",
        "${os.tmpdir()}/test-carti",
        "${LOCAL_BASE_TEST_DIR}/local-project",
        "${os.tmpdir()}/test-carti",
        "${REMOTE_BASE_TEST_DIR}/remote-project",
        "string",
        "string",
        "string",
        "\"npx carti help\"",
        "\"help\"",
        "\"npm\"",
        "\"pack\"",
        "createdreamtech-carti-${version}.tgz",
        "${process.cwd()}/${cartiNodePackage}",
        "${env.cwd}/${cartiNodePackage}",
        "${process.cwd()}/fixtures/dapp-test-data.ext2",
        "${env.cwd}/dapp-test-data.ext2",
        "\"npm\"",
        "\"init\"",
        "\"-y\"",
        "\"npm\"",
        "\"install\"",
        "${env.cwd}/${cartiNodePackage}",
        "\"could not setup test\"",
        "string",
        "${pth}/node_modules/.bin/carti",
        "string",
        "${cartiCmd(dir)} bundle -t flashdrive -n dapp-test-data -v 1.0.0 -d hello_world_flash_drive dapp-test-data.ext2",
        "string",
        "\"bundled: dapp-test-data\"",
        "string",
        "string",
        "${cartiCmd(dir)} install ${bundleName}",
        "string",
        "string",
        "string",
        "${dir}/carti_bundles/baenrwic6ybfsdmdtm52fhgbeip6ndoi3e62bonaadmotji4x6vvdpedt3m/dapp-test-data.ext2",
        "string",
        "string",
        "${cartiCmd(dir)} publish uri dapp-test-data ${uri}",
        "string",
        "string",
        "string",
        "string",
        "${cartiCmd(dir)} repo add ${uri}",
        "string",
        "string",
        "string",
        "${cartiCmd(dir)} machine init",
        "string",
        "string",
        "string",
        "string",
        "string",
        "${cartiCmd(dir)} machine add flash ${bundleName} --start ${cmd.start} --length ${cmd.length}",
        "string",
        "string",
        "string",
        "${cartiCmd(dir)} machine build",
        "string",
        "string",
        "string",
        "${cartiCmd(dir)} machine install ${uri}",
        "string",
        "string",
        "\"integration tests for cli\"",
        "\"should bundle a flash drive, publish it, install it, create a machine, and install the machine\"",
        "\"dapp-test-data\"",
        "\"dapp-test-data\"",
        "\"0x100000\"",
        "\"0x8000000000000000\"",
        "${remoteTestEnvironment.cwd}/carti-machine-package.json",
        "\"\\r\\n\"",
        "\"\\r\\n\"",
        "\"\\r\\n\""
    ],
    "variables": [
        "rmAll",
        "version",
        "LOCAL_BASE_TEST_DIR",
        "LOCAL_TEST_HOME",
        "LOCAL_BASE_TEST_DIR",
        "LOCAL_TEST_PROJECT_DIR",
        "REMOTE_BASE_TEST_DIR",
        "REMOTE_TEST_HOME",
        "REMOTE_BASE_TEST_DIR",
        "REMOTE_TEST_PROJECT_DIR",
        "createTestEnvironment",
        "localTestEnvironment",
        "remoteTestEnvironment",
        "contains",
        "output",
        "helpCommand",
        "setup",
        "cartiNodePackage",
        "res",
        "result",
        "cartiCmd",
        "localTestEnvironment",
        "testBundleCmdArgs",
        "testBundleCommand",
        "testBundleInstallArgs",
        "testBundleInstallCommand",
        "diskLocation",
        "testPublishCmdArgs",
        "testPublishCommand",
        "testAddRepoCmdArgs",
        "testAddRepoCommand",
        "testMachineInitCmdArgs",
        "testMachineInitCommand",
        "testMachineAddCmdArgs",
        "testMachineAddCommand",
        "testMachineBuildArgs",
        "testMachineBuildCommand",
        "testMachineInstallArgs",
        "testMachineInstallCommand",
        "localBundleCmd",
        "publishBundleCmd",
        "addRepoCmd",
        "installBundleCmd",
        "machineInitCmd",
        "machineAddCmd",
        "machineBuildCmd",
        "machineInstallCmd"
    ],
    "comments": [
        "tslint:disable-line",
        "setup environment to install itself in a clean dir",
        "npm is special and messes with the env",
        "fs.copyFileSync(\"../../../fixtures/ram.ext2\", localTestEnvironment.cwd",
        "const cartiCmd=\"carti\"",
        "The test pattern for this is \n        local builds bundle\n        local publishes bundle\n        remote installs locals bundle\n        remote creates a machine to use bundle\n        remote adds custom bundle from local to it's machine\n        remote builds machine\n        local installs remote's machine creating a stored_machine",
        "NOTE by default the init fills out a config with default settings so you must edit the file specifically",
        "for your flash drive, there is a concurrency issue that prevents this from happening",
        "const machineFile = fs.readFileSync(`${remoteTestEnvironment.cwd}/carti-machine-package.json`)\n        const machineJSON = JSON.parse(machineFile.toString())\n        machineJSON.machineConfig.flash_drive = machineJSON.machineConfig.flash_drive\n            .filter((flash: any) => { flash.cid !== \"default-flash\" })\n        fs.writeFileSync(`${remoteTestEnvironment.cwd}/carti-machine-package.json`,\n            JSON.stringify(machineJSON, null, 2))",
        "otherwise throws exception"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}