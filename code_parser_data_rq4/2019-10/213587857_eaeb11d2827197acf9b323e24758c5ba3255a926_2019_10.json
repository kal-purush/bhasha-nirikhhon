{
    "identifiers": [
        "typing",
        "Tuple",
        "Optional",
        "filename",
        "c",
        "c",
        "open",
        "filename",
        "read",
        "c",
        "group",
        "digits",
        "grid",
        "grid",
        "join",
        "width",
        "row",
        "join",
        "grid",
        "row",
        "col",
        "center",
        "width",
        "col",
        "col",
        "row",
        "line",
        "values",
        "n",
        "grid",
        "pos",
        "Tuple",
        "grid",
        "pos",
        "Tuple",
        "grid",
        "pos",
        "Tuple",
        "grid",
        "Optional",
        "Tuple",
        "grid",
        "pos",
        "Tuple",
        "grid",
        "Optional",
        "solution",
        "N",
        "fname",
        "read_sudoku",
        "fname",
        "display",
        "grid",
        "solve",
        "grid",
        "solution",
        "fname",
        "display",
        "solution"
    ],
    "literals": [
        "'123456789.'",
        "'+'",
        "'-'",
        "''",
        "'|'",
        "'25'",
        "''",
        "'25'",
        "'__main__'",
        "'puzzle1.txt'",
        "'puzzle2.txt'",
        "'puzzle3.txt'",
        "f\"Puzzle {fname} can't be solved\""
    ],
    "variables": [
        "digits",
        "grid",
        "width",
        "line",
        "grid",
        "solution"
    ],
    "comments": [
        "TODO: Add doctests with bad puzzles"
    ],
    "docstrings": [
        "\"\"\" Прочитать Судоку из указанного файла \"\"\"",
        "\"\"\"Вывод Судоку \"\"\"",
        "\"\"\"\n    Сгруппировать значения values в список, состоящий из списков по n элементов\n\n    >>> group([1,2,3,4], 2)\n    [[1, 2], [3, 4]]\n    >>> group([1,2,3,4,5,6,7,8,9], 3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \"\"\"",
        "\"\"\" Возвращает все значения для номера строки, указанной в pos\n\n    >>> get_row([['1', '2', '.'], ['4', '5', '6'], ['7', '8', '9']], (0, 0))\n    ['1', '2', '.']\n    >>> get_row([['1', '2', '3'], ['4', '.', '6'], ['7', '8', '9']], (1, 0))\n    ['4', '.', '6']\n    >>> get_row([['1', '2', '3'], ['4', '5', '6'], ['.', '8', '9']], (2, 0))\n    ['.', '8', '9']\n    \"\"\"",
        "\"\"\" Возвращает все значения для номера столбца, указанного в pos\n\n    >>> get_col([['1', '2', '.'], ['4', '5', '6'], ['7', '8', '9']], (0, 0))\n    ['1', '4', '7']\n    >>> get_col([['1', '2', '3'], ['4', '.', '6'], ['7', '8', '9']], (0, 1))\n    ['2', '.', '8']\n    >>> get_col([['1', '2', '3'], ['4', '5', '6'], ['.', '8', '9']], (0, 2))\n    ['3', '6', '9']\n    \"\"\"",
        "\"\"\" Возвращает все значения из квадрата, в который попадает позиция pos\n\n    >>> grid = read_sudoku('puzzle1.txt')\n    >>> get_block(grid, (0, 1))\n    ['5', '3', '.', '6', '.', '.', '.', '9', '8']\n    >>> get_block(grid, (4, 7))\n    ['.', '.', '3', '.', '.', '1', '.', '.', '6']\n    >>> get_block(grid, (8, 8))\n    ['2', '8', '.', '.', '.', '5', '.', '7', '9']\n    \"\"\"",
        "\"\"\" Найти первую свободную позицию в пазле\n\n    >>> find_empty_positions([['1', '2', '.'], ['4', '5', '6'], ['7', '8', '9']])\n    (0, 2)\n    >>> find_empty_positions([['1', '2', '3'], ['4', '.', '6'], ['7', '8', '9']])\n    (1, 1)\n    >>> find_empty_positions([['1', '2', '3'], ['4', '5', '6'], ['.', '8', '9']])\n    (2, 0)\n    \"\"\"",
        "\"\"\" Вернуть множество возможных значения для указанной позиции\n\n    >>> grid = read_sudoku('puzzle1.txt')\n    >>> values = find_possible_values(grid, (0,2))\n    >>> values == {'1', '2', '4'}\n    True\n    >>> values = find_possible_values(grid, (4,7))\n    >>> values == {'2', '5', '9'}\n    True\n    \"\"\"",
        "\"\"\" Решение пазла, заданного в grid \"\"\"",
        "\"\"\" Как решать Судоку?\n        1. Найти свободную позицию\n        2. Найти все возможные значения, которые могут находиться на этой позиции\n        3. Для каждого возможного значения:\n            3.1. Поместить это значение на эту позицию\n            3.2. Продолжить решать оставшуюся часть пазла\n\n    >>> grid = read_sudoku('puzzle1.txt')\n    >>> solve(grid)\n    [['5', '3', '4', '6', '7', '8', '9', '1', '2'], ['6', '7', '2', '1', '9', '5', '3', '4', '8'], ['1', '9', '8', '3', '4', '2', '5', '6', '7'], ['8', '5', '9', '7', '6', '1', '4', '2', '3'], ['4', '2', '6', '8', '5', '3', '7', '9', '1'], ['7', '1', '3', '9', '2', '4', '8', '5', '6'], ['9', '6', '1', '5', '3', '7', '2', '8', '4'], ['2', '8', '7', '4', '1', '9', '6', '3', '5'], ['3', '4', '5', '2', '8', '6', '1', '7', '9']]\n    \"\"\"",
        "\"\"\" Если решение solution верно, то вернуть True, в противном случае False \"\"\"",
        "\"\"\" Генерация судоку заполненного на N элементов\n\n    >>> grid = generate_sudoku(40)\n    >>> sum(1 for row in grid for e in row if e == '.')\n    41\n    >>> solution = solve(grid)\n    >>> check_solution(solution)\n    True\n    >>> grid = generate_sudoku(1000)\n    >>> sum(1 for row in grid for e in row if e == '.')\n    0\n    >>> solution = solve(grid)\n    >>> check_solution(solution)\n    True\n    >>> grid = generate_sudoku(0)\n    >>> sum(1 for row in grid for e in row if e == '.')\n    81\n    >>> solution = solve(grid)\n    >>> check_solution(solution)\n    True\n    \"\"\""
    ],
    "functions": [
        "read_sudoku",
        "display",
        "group",
        "get_row",
        "get_col",
        "get_block",
        "find_empty_positions",
        "find_possible_values",
        "solve",
        "check_solution",
        "generate_sudoku"
    ],
    "classes": []
}