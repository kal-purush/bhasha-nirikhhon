{
    "identifiers": [
        "services",
        "moleculer",
        "transporter",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "WeakHashMap",
        "java",
        "util",
        "concurrent",
        "locks",
        "ReentrantReadWriteLock",
        "java",
        "util",
        "concurrent",
        "locks",
        "ReentrantReadWriteLock",
        "ReadLock",
        "java",
        "util",
        "concurrent",
        "locks",
        "ReentrantReadWriteLock",
        "WriteLock",
        "java",
        "util",
        "concurrent",
        "locks",
        "StampedLock",
        "io",
        "datatree",
        "io",
        "datatree",
        "Tree",
        "services",
        "moleculer",
        "serializer",
        "Serializer",
        "services",
        "moleculer",
        "service",
        "Name",
        "Name",
        "subscriptions",
        "channels",
        "Override",
        "subscriptions",
        "subscriptions",
        "serializer",
        "connected",
        "Override",
        "channel",
        "subscriptions",
        "register",
        "channel",
        "channels",
        "channels",
        "add",
        "channel",
        "resolve",
        "Override",
        "channels",
        "channel",
        "channels",
        "subscriptions",
        "deregister",
        "channel",
        "channel",
        "endsWith",
        "nodeID",
        "channels",
        "clear",
        "stopped",
        "Override",
        "channel",
        "message",
        "subscriptions",
        "send",
        "channel",
        "message",
        "cause",
        "logger",
        "warn",
        "cause",
        "sets",
        "serializer",
        "serializer",
        "serializer",
        "serializer",
        "channel",
        "transporter",
        "getSubscriptionSet",
        "channel",
        "channel",
        "serializer",
        "previous",
        "stamp",
        "writeLock",
        "previous",
        "sets",
        "putIfAbsent",
        "channel",
        "unlockWrite",
        "stamp",
        "previous",
        "previous",
        "register",
        "transporter",
        "channel",
        "transporter",
        "shared",
        "getSubscriptionSet",
        "channel",
        "shared",
        "deregister",
        "transporter",
        "stamp",
        "writeLock",
        "sets",
        "remove",
        "channel",
        "unlockWrite",
        "stamp",
        "channel",
        "message",
        "getSubscriptionSet",
        "channel",
        "send",
        "message",
        "channel",
        "stamp",
        "tryOptimisticRead",
        "stamp",
        "sets",
        "get",
        "channel",
        "modified",
        "stamp",
        "validate",
        "stamp",
        "stamp",
        "stamp",
        "readLock",
        "sets",
        "get",
        "channel",
        "unlockRead",
        "stamp",
        "readLock",
        "writeLock",
        "channel",
        "serializer",
        "channel",
        "serializer",
        "readLock",
        "readLock",
        "writeLock",
        "writeLock",
        "channel",
        "channel",
        "serializer",
        "serializer",
        "transporter",
        "writeLock",
        "put",
        "transporter",
        "transporter",
        "writeLock",
        "unlock",
        "transporter",
        "writeLock",
        "remove",
        "transporter",
        "writeLock",
        "unlock",
        "message",
        "readLock",
        "isEmpty",
        "serializer",
        "write",
        "message",
        "transporter",
        "keySet",
        "transporter",
        "transporter",
        "received",
        "channel",
        "readLock",
        "unlock"
    ],
    "literals": [
        "\"Internal Transporter\"",
        "\"Unable to publish message!\""
    ],
    "variables": [
        "subscriptions",
        "serializer",
        "previous",
        "readLock",
        "writeLock",
        "channel",
        "serializer"
    ],
    "comments": [
        "--- SHARED STATIC INSTANCE ---",
        "--- REGISTERED CHANNELS ---",
        "--- CONNECT ---",
        "--- REGISTER SUBSCRIPTION ---",
        "--- DEREGISTER CHANNELS ---",
        "--- SEND DATA ---",
        "--- SUBSCRIPTION HANDLER ---",
        "--- SUBSCRIPTIONS PER CHANNEL ---",
        "--- READ/WRITE LOCK ---",
        "--- SERIALIZER ---",
        "--- CONSTRUCTOR ---",
        "--- METHODS ---",
        "--- REGISTERED TRANSPORTERS ---",
        "--- READ/WRITE LOCK ---",
        "--- OTHER PROPERTIES ---",
        "--- CONSTRUCTOR ---"
    ],
    "docstrings": [
        "* THIS SOFTWARE IS LICENSED UNDER MIT LICENSE.<br>\n * <br>\n * Copyright 2019 Andras Berkes [andras.berkes@programmer.net]<br>\n * Based on Moleculer Framework for NodeJS [https://moleculer.services].\n * <br><br>\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:<br>\n * <br>\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.<br>\n * <br>\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "* This is a Transporter that can connect multiple ServiceBrokers running in the\n * same JVM. The calls are made in separate Threads, so call timeouts can be\n * used. Usage:\n * <pre>\n * ServiceBroker broker1 = ServiceBroker.builder().nodeID(\"node1\")\n * .transporter(new InternalTransporter()).build();\n * ServiceBroker broker2 = ServiceBroker.builder().nodeID(\"node2\")\n * .transporter(new InternalTransporter()).build();\n * </pre>\n * \n * @see TcpTransporter\n * @see RedisTransporter\n * @see NatsTransporter\n * @see MqttTransporter\n * @see GoogleTransporter\n * @see KafkaTransporter\n * @see AmqpTransporter\n * @see JmsTransporter"
    ],
    "functions": [
        "connect",
        "subscribe",
        "stopped",
        "publish",
        "Subscriptions",
        "register",
        "deregister",
        "send",
        "SubscriptionSet",
        "getSubscriptionSet",
        "SubscriptionSet",
        "register",
        "deregister",
        "send"
    ],
    "classes": [
        "InternalTransporter",
        "Subscriptions",
        "SubscriptionSet"
    ]
}