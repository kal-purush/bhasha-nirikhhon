{
    "identifiers": [
        "sys",
        "sys",
        "path",
        "append",
        "mocker",
        "dispatchRequest",
        "DispatchRequest",
        "args",
        "kwargs",
        "status",
        "content",
        "json_data",
        "raise_for_status",
        "mocker",
        "Mock",
        "mocker",
        "Mock",
        "raise_for_status",
        "mock_resp",
        "raise_for_status",
        "raise_for_status",
        "status",
        "content",
        "open",
        "json_file",
        "json",
        "load",
        "json_file",
        "mocker",
        "Mock",
        "return_value",
        "json_data",
        "mock_resp",
        "args",
        "MockResponse",
        "_mock_response",
        "MockResponse",
        "_mock_response",
        "mocker",
        "mocker",
        "patch",
        "side_effect",
        "mocked_requests_get",
        "mock_get",
        "dispatchRequest",
        "dispatch",
        "sendRequestByAction",
        "CONNECT",
        "payload"
    ],
    "literals": [
        "'woqlclient'",
        "\"CONTENT\"",
        "'tests/capabilitiesResponse.json'",
        "'http://localhost:6363/'",
        "'dispatchRequest.requests.get'",
        "'terminus:user_key'",
        "\"mykey\"",
        "'http://localhost:6363/'"
    ],
    "variables": [
        "mock_resp",
        "mock_resp",
        "raise_for_status",
        "side_effect",
        "mock_resp",
        "status_code",
        "mock_resp",
        "content",
        "json_data",
        "mock_resp",
        "json",
        "dispatch",
        "payload",
        "json_data"
    ],
    "comments": [
        "class dispatchRequestTests:",
        "mock raise_for_status call w/optional error",
        "set status code and content",
        "add json data if provided",
        "if json_data:",
        "mock_resp.json = mocker.Mock(",
        "return_value=json_data",
        ")",
        "elif args[0] == 'http://someotherurl.com/anothertest.json':",
        "return MockResponse({\"key2\": \"value2\"}, 200)",
        "Our test case class",
        "We patch 'requests.get' with our own method. The mock object is passed in to our test case method.",
        "Assert requests.get calls"
    ],
    "docstrings": [
        "\"\"\"\n\t        since we typically test a bunch of different\n\t        requests calls for a service, we are going to do\n\t        a lot of mock responses, so its usually a good idea\n\t        to have a helper function that builds these things\n\t        \"\"\"",
        "\"\"\"\n        self.assertEqual(json_data, {\"key1\": \"value1\"})\n        json_data = mgc.fetch_json('http://someotherurl.com/anothertest.json')\n        self.assertEqual(json_data, {\"key2\": \"value2\"})\n        json_data = mgc.fetch_json('http://nonexistenturl.com/cantfindme.json')\n        self.assertIsNone(json_data)\n\n        # We can even assert that our mocked method was called with the right parameters\n        self.assertIn(mock.call('http://someurl.com/test.json'), mock_get.call_args_list)\n        self.assertIn(mock.call('http://someotherurl.com/anothertest.json'), mock_get.call_args_list)\n\n        self.assertEqual(len(mock_get.call_args_list), 3)\n\t\"\"\""
    ],
    "functions": [
        "mocked_requests_get",
        "_mock_response",
        "test_connectCall"
    ],
    "classes": [
        "MockResponse",
        "dispatchRequestTests"
    ]
}