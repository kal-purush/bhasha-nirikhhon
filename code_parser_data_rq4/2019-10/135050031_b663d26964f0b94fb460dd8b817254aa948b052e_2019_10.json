{
    "identifiers": [
        "getFixedUrl",
        "req",
        "URL",
        "req",
        "url",
        "url",
        "url",
        "url",
        "now",
        "url",
        "HOSTNAME_WHITELIST",
        "URL",
        "caches",
        "getFixedUrl",
        "fetch",
        "fixedUrl",
        "fetched",
        "resp",
        "resp",
        "fetched",
        "_",
        "cached",
        "cached",
        "resp",
        "resp",
        "fetched",
        "_",
        "fetchedCopy",
        "caches",
        "RUNTIME",
        "response",
        "cache",
        "response",
        "_"
    ],
    "literals": [
        "'docsify'",
        "'fonts.gstatic.com'",
        "'fonts.googleapis.com'",
        "'unpkg.com'",
        "'&'",
        "'?'",
        "'cache-bust='",
        "'activate'",
        "'fetch'",
        "'no-store'"
    ],
    "variables": [
        "RUNTIME",
        "HOSTNAME_WHITELIST",
        "getFixedUrl",
        "now",
        "url",
        "cached",
        "fixedUrl",
        "fetched",
        "fetchedCopy",
        "response",
        "cache"
    ],
    "comments": [
        "===========================================================\n * docsify sw.js\n * ===========================================================\n * Copyright 2016 @huxpro\n * Licensed under Apache 2.0\n * Register service worker.\n * ==========================================================",
        "The Util Function to hack URLs of intercepted requests",
        "1. fixed http URL",
        "Just keep syncing with location.protocol",
        "fetch(httpURL) belongs to active mixed content.",
        "And fetch(httpRequest) is not supported yet.",
        "2. add query for caching-busting.",
        "Github Pages served with Cache-Control: max-age=600",
        "max-age on mutable content is error-prone, with SW life of bugs can even extend.",
        "Until cache mode of Fetch API landed, we have to workaround cache-busting with query string.",
        "Cache-Control-Bug: https://bugs.chromium.org/p/chromium/issues/detail?id=453190",
        "Skip some of cross-origin requests, like those for Google Analytics.",
        "Stale-while-revalidate",
        "similar to HTTP's stale-while-revalidate: https://www.mnot.net/blog/2007/12/12/stale",
        "Upgrade from Jake's to Surma's: https://gist.github.com/surma/eb441223daaedf880801ad80006389f1",
        "Call respondWith() with whatever we get first.",
        "If the fetch fails (e.g disconnected), wait for the cache.",
        "If thereâ€™s nothing in cache, wait for the fetch.",
        "If neither yields a response, return offline pages.",
        "eat any errors",
        "Update the cache with the version we fetched (only for ok status)",
        "eat any errors"
    ],
    "docstrings": [
        "*  @Lifecycle Activate\n *  New one activated when old isnt being used.\n *\n *  waitUntil(): activating ====> activated",
        "*  @Functional Fetch\n *  All network requests are being intercepted here.\n *\n *  void respondWith(Promise<Response> r)"
    ],
    "functions": [],
    "classes": []
}