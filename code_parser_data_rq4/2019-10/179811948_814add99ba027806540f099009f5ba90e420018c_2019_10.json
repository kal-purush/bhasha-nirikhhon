{
    "identifiers": [
        "java",
        "util",
        "java",
        "io",
        "args",
        "graphEdges",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "graphEdges",
        "add",
        "nodeCount",
        "graph",
        "graph",
        "kruskalMST",
        "graphEdges",
        "nodeCount",
        "graphEdges",
        "nodeCount",
        "outputMessage",
        "Collections",
        "sort",
        "graphEdges",
        "mstEdges",
        "nodeSet",
        "nodeCount",
        "i",
        "i",
        "graphEdges",
        "size",
        "mstEdges",
        "size",
        "nodeCount",
        "i",
        "currentEdge",
        "graphEdges",
        "get",
        "i",
        "root1",
        "nodeSet",
        "find",
        "currentEdge",
        "getVertex1",
        "root2",
        "nodeSet",
        "find",
        "currentEdge",
        "getVertex2",
        "outputMessage",
        "currentEdge",
        "getVertex1",
        "root1",
        "currentEdge",
        "getVertex2",
        "root2",
        "unionMessage",
        "root1",
        "root2",
        "mstEdges",
        "add",
        "currentEdge",
        "nodeSet",
        "union",
        "root1",
        "root2",
        "unionMessage",
        "root1",
        "root2",
        "outputMessage",
        "unionMessage",
        "outputMessage",
        "mstEdges",
        "size",
        "mstTotalEdgeWeight",
        "edge",
        "mstEdges",
        "outputMessage",
        "edge",
        "mstTotalEdgeWeight",
        "edge",
        "getWeight",
        "outputMessage",
        "mstTotalEdgeWeight",
        "outputMessage",
        "outputFile",
        "outputFile",
        "outputMessage",
        "e",
        "vertex1",
        "vertex2",
        "weight",
        "vertex1",
        "vertex2",
        "weight",
        "vertex1",
        "vertex1",
        "vertex2",
        "vertex2",
        "weight",
        "weight",
        "vertex1",
        "vertex2",
        "weight",
        "Override",
        "otherEdge",
        "getWeight",
        "otherEdge",
        "getWeight",
        "Override",
        "getVertex1",
        "getVertex2",
        "getWeight",
        "numElements",
        "numElements",
        "i",
        "i",
        "length",
        "i",
        "i",
        "root1",
        "root2",
        "root2",
        "root1",
        "root1",
        "root2",
        "root1",
        "root2",
        "root1",
        "root2",
        "root1",
        "x",
        "x",
        "x",
        "next",
        "x",
        "next",
        "next",
        "next",
        "next"
    ],
    "literals": [
        "\"\"",
        "\"find(\"",
        "\") returns \"",
        "\", find(\"",
        "\") returns \"",
        "\",\\tNo union performed\\n\"",
        "\",\\tUnion(\"",
        "\", \"",
        "\") done\\n\"",
        "\"\\nFinal Minimum Spanning Tree (\"",
        "\" edges)\\n\"",
        "\"\\n\"",
        "\"\\nTotal weight of all edges in MST = \"",
        "\"06outputMST.txt\"",
        "\"\\nOpen \\\"06outputMST.txt\\\" for backup copy of answers\"",
        "\"Error! Couldn't create file\"",
        "\"Edge (\"",
        "\", \"",
        "\") weight=\""
    ],
    "variables": [
        "vertex1",
        "vertex2",
        "weight",
        "set"
    ],
    "comments": [
        "edge list, not adjacency list",
        "Edges created in almost sorted order, only the last 2 are switched but this is unnecessary as edges are sorted in the algorithm",
        "how many nodes. NODE COUNT MUST BE ENTERED MANUALLY. No error handling between nodeCount and graphEdges",
        "CAREFUL: nodeCount must be correct. No error checking between nodeCount & graphEdges to see how many nodes actually exist",
        "sort edges with smallest weight 1st",
        "list of edges included in the Minimum spanning tree (initially empty)",
        "Initialize singleton sets for each node in graph. (nodeCount +1) to account for arrays indexing from 0",
        "loop over all edges. Start @ 1 (ignore 0th as placeholder). Also early termination when number of edges=(number of nodes-1)",
        "Find root of 1 vertex of the edge",
        "just print, keep on same line for union message",
        "assume no union is to be performed, changed later if a union DOES happen",
        "if roots are in different sets the DO NOT create a cycle",
        "add the edge to the graph",
        "union the sets",
        "change what's printed if a union IS performed",
        "print each edge",
        "an edge has 2 vertices & a weight",
        "Compare based on edge weight (for sorting)",
        "the disjoint set as an array",
        "mostly debugging method to print array",
        "constructor creates singleton sets",
        "initialize to -1 so the trees have nothing in them",
        "root2 is deeper",
        "Make root2 new root",
        "Update height if same",
        "Make root1 new root",
        "If tree is a root, return its index",
        "Loop until we find a root"
    ],
    "docstrings": [
        "code for Kruskal Algorithm implementation in JAVA"
    ],
    "functions": [
        "main",
        "kruskalMST",
        "Edge",
        "getVertex1",
        "getVertex2",
        "getWeight",
        "compareTo",
        "toString",
        "getSet",
        "DisjointSet",
        "union",
        "find"
    ],
    "classes": [
        "Kruskal",
        "Edge",
        "DisjointSet"
    ]
}