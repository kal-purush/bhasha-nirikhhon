{
    "identifiers": [
        "artifacts",
        "require",
        "contract",
        "accounts",
        "accounts",
        "accounts",
        "accounts",
        "beforeEach",
        "contractInstance",
        "Demonstrate",
        "describe",
        "it",
        "contractInstance",
        "DEC_25",
        "WHAT_3_WORDS",
        "WHAT_3_WORDS",
        "WHAT_3_WORDS",
        "actual"
    ],
    "literals": [
        "\"Demonstrate\"",
        "\"./helpers/truffleTestHelper\"",
        "\"0x636f766572\"",
        "\"0x7261696c73\"",
        "\"0x6d6574726f\"",
        "\"Demonstrate\"",
        "\"Campaign tests\"",
        "\"should add new campaign\""
    ],
    "variables": [
        "Demonstrate",
        "helper",
        "DEC_25",
        "WHAT_3_WORDS",
        "OWNER",
        "ALICE",
        "BOB",
        "contractInstance",
        "actual"
    ],
    "comments": [
        "cover rails metro",
        "assert.equal(Number(actual), 0, \"Should be index 0\");",
        "it(\"Alice should not be a hodler\", async function () {",
        "const actual = await tokenInstance.isHodler(ALICE);",
        "assert.isFalse(actual, \"Should not be a hodler\");",
        "});",
        "it.skip(\"Should add BOB to hodlers\", async function () {",
        "const actual = await tokenInstance.insertHodler(BOB);",
        "console.log(actual);",
        "assert.equal(Number(actual), 1, \"Should have index of 1\");",
        "});",
        "it(\"Should calc 0 interest\", async function () {",
        "const start = await tokenInstance._start();",
        "console.log(Number(start));",
        "const actual = await tokenInstance.calc(100, 0);",
        "console.log(Number(actual));",
        "assert.equal(actual.valueOf(), 0, \"Should be 0\");",
        "});"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}