{
    "identifiers": [
        "time",
        "P",
        "I",
        "D",
        "current_time",
        "P",
        "I",
        "D",
        "current_time",
        "current_time",
        "time",
        "time",
        "current_time",
        "clear",
        "feedback_value",
        "current_time",
        "SetPoint",
        "feedback_value",
        "current_time",
        "current_time",
        "time",
        "time",
        "current_time",
        "last_time",
        "error",
        "last_error",
        "delta_time",
        "sample_time",
        "Kp",
        "error",
        "ITerm",
        "error",
        "delta_time",
        "ITerm",
        "windup_guard",
        "windup_guard",
        "ITerm",
        "windup_guard",
        "windup_guard",
        "delta_time",
        "delta_error",
        "delta_time",
        "current_time",
        "error",
        "PTerm",
        "Ki",
        "ITerm",
        "Kd",
        "DTerm",
        "proportional_gain",
        "proportional_gain",
        "integral_gain",
        "integral_gain",
        "derivative_gain",
        "derivative_gain",
        "windup",
        "windup",
        "sample_time",
        "sample_time"
    ],
    "literals": [],
    "variables": [
        "Kp",
        "Ki",
        "Kd",
        "sample_time",
        "current_time",
        "last_time",
        "SetPoint",
        "PTerm",
        "ITerm",
        "DTerm",
        "last_error",
        "int_error",
        "windup_guard",
        "output",
        "error",
        "current_time",
        "delta_time",
        "delta_error",
        "PTerm",
        "ITerm",
        "ITerm",
        "DTerm",
        "DTerm",
        "last_time",
        "last_error",
        "output",
        "Kp",
        "Ki",
        "Kd",
        "windup_guard",
        "sample_time"
    ],
    "comments": [
        "Windup Guard",
        "Remember last time and last error for next calculation"
    ],
    "docstrings": [
        "\"\"\"Ivmech PID Controller is simple implementation of a Proportional-Integral-Derivative (PID) Controller in the Python Programming Language.\nMore information about PID Controller: http://en.wikipedia.org/wiki/PID_controller\n\"\"\"",
        "\"\"\"PID Controller\n    \"\"\"",
        "\"\"\"Clears PID computations and coefficients\"\"\"",
        "\"\"\"Calculates PID value for given reference feedback\n        .. math::\n            u(t) = K_p e(t) + K_i \\int_{0}^{t} e(t)dt + K_d {de}/{dt}\n        .. figure:: images/pid_1.png\n           :align:   center\n           Test PID with Kp=1.2, Ki=1, Kd=0.001 (test_pid.py)\n        \"\"\"",
        "\"\"\"Determines how aggressively the PID reacts to the current error with setting Proportional Gain\"\"\"",
        "\"\"\"Determines how aggressively the PID reacts to the current error with setting Integral Gain\"\"\"",
        "\"\"\"Determines how aggressively the PID reacts to the current error with setting Derivative Gain\"\"\"",
        "\"\"\"Integral windup, also known as integrator windup or reset windup,\n        refers to the situation in a PID feedback controller where\n        a large change in setpoint occurs (say a positive change)\n        and the integral terms accumulates a significant error\n        during the rise (windup), thus overshooting and continuing\n        to increase as this accumulated error is unwound\n        (offset by errors in the other direction).\n        The specific problem is the excess overshooting.\n        \"\"\"",
        "\"\"\"PID that should be updated at a regular interval.\n        Based on a pre-determined sampe time, the PID decides if it should compute or return immediately.\n        \"\"\""
    ],
    "functions": [
        "clear",
        "update",
        "setKp",
        "setKi",
        "setKd",
        "setWindup",
        "setSampleTime"
    ],
    "classes": [
        "PID"
    ]
}