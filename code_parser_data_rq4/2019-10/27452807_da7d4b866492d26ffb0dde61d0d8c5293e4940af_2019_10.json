{
    "identifiers": [
        "org",
        "broadinstitute",
        "hellbender",
        "engine",
        "org",
        "broadinstitute",
        "hellbender",
        "engine",
        "filters",
        "CountingReadFilter",
        "org",
        "broadinstitute",
        "hellbender",
        "exceptions",
        "GATKException",
        "org",
        "broadinstitute",
        "hellbender",
        "utils",
        "SimpleInterval",
        "org",
        "broadinstitute",
        "hellbender",
        "utils",
        "read",
        "GATKRead",
        "countedFilter",
        "passCount",
        "FunctionalInterface",
        "GATKReadConsumer",
        "read",
        "reference",
        "features",
        "readHandler",
        "passCount",
        "countedFilter",
        "makeReadFilter",
        "resetReadsDataSource",
        "logger",
        "info",
        "format",
        "passCount",
        "getTransformedReadStream",
        "countedFilter",
        "forEach",
        "read",
        "readInterval",
        "getReadInterval",
        "read",
        "readHandler",
        "consume",
        "read",
        "reference",
        "readInterval",
        "features",
        "readInterval",
        "progressMeter",
        "update",
        "readInterval",
        "logger",
        "info",
        "countedFilter",
        "getSummaryLine",
        "passCount",
        "Override",
        "countedFilter",
        "makeReadFilter",
        "traverseReads",
        "Override",
        "read",
        "referenceContext",
        "featureContext"
    ],
    "literals": [
        "\"Starting traversal pass %d\"",
        "\"apply can't be called in MultiplePassReadWalker\""
    ],
    "variables": [
        "countedFilter"
    ],
    "comments": [
        "will be empty if reference or readInterval is null",
        "will be empty if features or readInterval is null"
    ],
    "docstrings": [
        "* A MultiplePassReadWalker traverses input reads multiple times. To use this class, implement the\n * method {@link #traverseReads()}, calling {@link #forEachRead(GATKReadConsumer)} with a\n * {@link GATKReadConsumer} implementation once for each desired traversal of the input reads. The\n * {@link GATKReadConsumer} provided to {@link #forEachRead(GATKReadConsumer) will be called presented\n * with each read.",
        "* Implemented by MultiplePassReadWalker-derived tools. The implementation should call {@code forEachRead}\n     * once for each desired traversal of the input reads, passing a {@code GATKReadConsumer} for each call.\n     * Input reads will be processed and the {@code GATKReadConsumer} will be presented with each {@code GATKRead}\n     * processed during the traversal.",
        "* Implemented by MultiplePassReadWalker-derived tools. Tool implementers should provide an implementation\n     * of this {@link FunctionalInterface} for each call to {@link #forEachRead(GATKReadConsumer)}. The provided\n     * {@link FunctionalInterface} will be called once with read processed during the iteration. For more\n     * information about the arguments supplied to this method,\n     * @see ReadWalker#apply(GATKRead, ReferenceContext, FeatureContext)",
        "* Provides a single traversal over all input reads. MultiplePassReadWalker-derived tools should call this\n     * method from the {@link #traverseReads} implementation once for each requested traversal of the input reads,\n     * providing the {@code readHandler}, which will be presented with each {@code GATKRead} processed during\n     * the traversal.\n     *\n     * NOTE: Tool implementers should consider whether any state that might otherwise be retained across\n     * traversals, such as that maintained by a random number generator or downsampler, should be reset between\n     * traversals in order to ensure that each traversal is executed under the same conditions.\n     *\n     * @param readHandler handler for reads for the current reads iteration"
    ],
    "functions": [
        "traverseReads",
        "consume",
        "forEachRead",
        "traverse",
        "apply"
    ],
    "classes": [
        "MultiplePassReadWalker"
    ]
}