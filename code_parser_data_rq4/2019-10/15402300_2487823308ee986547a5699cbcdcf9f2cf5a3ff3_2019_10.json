{
    "identifiers": [
        "uuid",
        "FunctionsRuntimeInstance",
        "EmulatorLog",
        "FunctionsRuntimeBundle",
        "FunctionsRuntimeArgs",
        "EventEmitter",
        "EmulatorLogger",
        "el",
        "RuntimeWorkerState",
        "EventEmitter",
        "RuntimeWorkerState",
        "triggerId",
        "runtime",
        "uuid",
        "triggerId",
        "runtime",
        "log",
        "log",
        "log",
        "RuntimeWorkerState",
        "RuntimeWorkerState",
        "RuntimeWorkerState",
        "RuntimeWorkerState",
        "frb",
        "serializedTriggers",
        "RuntimeWorkerState",
        "args",
        "state",
        "state",
        "RuntimeWorkerState",
        "l",
        "l",
        "state",
        "RuntimeWorkerState",
        "state",
        "state",
        "listener",
        "forever",
        "forever",
        "listener",
        "listener",
        "RuntimeWorkerState",
        "RuntimeWorkerState",
        "res",
        "listener",
        "RuntimeWorkerState",
        "listener",
        "RuntimeWorkerState",
        "listener",
        "res",
        "RuntimeWorkerState",
        "listener",
        "RuntimeWorkerState",
        "listener",
        "el",
        "EmulatorLog",
        "msg",
        "EmulatorLogger",
        "msg",
        "arr",
        "arr",
        "w",
        "w",
        "RuntimeWorkerState",
        "w",
        "w",
        "w",
        "RuntimeWorkerState",
        "w",
        "w",
        "RuntimeWorkerState",
        "arr",
        "arr",
        "w",
        "w",
        "RuntimeWorkerState",
        "w",
        "w",
        "triggerId",
        "triggerId",
        "key",
        "keyWorkers",
        "key",
        "worker",
        "keyWorkers",
        "worker",
        "RuntimeWorkerState",
        "worker",
        "triggerId",
        "runtime",
        "triggerId",
        "RuntimeWorker",
        "key",
        "runtime",
        "key",
        "keyWorkers",
        "worker",
        "key",
        "keyWorkers",
        "worker",
        "triggerId",
        "triggerId",
        "keyWorkers",
        "worker",
        "worker",
        "RuntimeWorkerState",
        "key",
        "notDoneWorkers",
        "msg",
        "EmulatorLogger",
        "msg"
    ],
    "literals": [
        "\"uuid\"",
        "\"./functionsEmulator\"",
        "\"./types\"",
        "\"./functionsEmulatorShared\"",
        "\"events\"",
        "\"./emulatorLogger\"",
        "\"IDLE\"",
        "\"BUSY\"",
        "\"FINISHING\"",
        "\"FINISHED\"",
        "string",
        "string",
        "string",
        "\"log\"",
        "\"runtime-status\"",
        "\"idle\"",
        "IDLE --> FINISHING",
        "\"exited\"",
        "string",
        "\"log\"",
        "\"log\"",
        "\"SYSTEM\"",
        "\"runtime-status\"",
        "string",
        "\"DEBUG\"",
        "[worker-${this.triggerId}-${this.id}]: ${msg}",
        "string",
        "Shutting down IDLE worker (${w.triggerId})",
        "Marking BUSY worker to finish (${w.triggerId})",
        "string",
        "string",
        "string",
        "\"~diagnostic~\"",
        "string",
        "\"DEBUG\"",
        "[worker-pool]: ${msg}"
    ],
    "variables": [
        "args",
        "listener",
        "key",
        "keyWorkers",
        "key",
        "worker",
        "keyWorkers",
        "key",
        "keyWorkers",
        "notDoneWorkers"
    ],
    "comments": [
        "Worker is ready to accept new work",
        "Worker is currently doing work",
        "Worker is BUSY and when done will be killed rather",
        "than recycled.",
        "Worker has exited and cannot be re-used",
        "Remove all temporary log listeners every time we move to IDLE",
        "Finish on either IDLE or FINISHED states",
        "Drop all finished workers from the pool"
    ],
    "docstrings": [
        "* When code changes (or in some other rare circumstances) we need to get\n   * a new pool of workers. For each IDLE worker we kill it immediately. For\n   * each BUSY worker we move it to the FINISHING state so that it will\n   * kill itself after it's done with its current task.",
        "* Immediately kill all workers."
    ],
    "functions": [
        "execute",
        "state",
        "state",
        "onLogs",
        "waitForDone",
        "waitForSystemLog",
        "log",
        "refresh",
        "exit",
        "getIdleWorker",
        "addWorker",
        "getTriggerKey",
        "cleanUpWorkers",
        "log"
    ],
    "classes": [
        "RuntimeWorker",
        "RuntimeWorkerPool"
    ]
}