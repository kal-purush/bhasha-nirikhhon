{
    "identifiers": [
        "logging",
        "os",
        "re",
        "shutil",
        "subprocess",
        "sys",
        "command",
        "args",
        "expect_zero",
        "kwargs",
        "subprocess",
        "PIPE",
        "subprocess",
        "PIPE",
        "logging",
        "debug",
        "command",
        "subprocess",
        "Popen",
        "command",
        "args",
        "kwargs",
        "process",
        "communicate",
        "stdout",
        "decode",
        "stderr",
        "decode",
        "process",
        "returncode",
        "logging",
        "info",
        "command",
        "retcode",
        "stdout",
        "stderr",
        "expect_zero",
        "retcode",
        "subprocess",
        "CalledProcessError",
        "retcode",
        "command",
        "retcode",
        "stdout",
        "stderr",
        "output",
        "re",
        "compile",
        "re",
        "match",
        "culprit_regex",
        "output",
        "match",
        "group",
        "match",
        "repo_dir",
        "repo_dir",
        "git_subcommand",
        "repo_dir",
        "git_subcommand",
        "execute",
        "command",
        "test_command",
        "build_clang",
        "repo_dir",
        "execute",
        "test_command",
        "shell",
        "expect_zero",
        "retcode",
        "do_bisect_command",
        "do_bisect_command",
        "search_bisect_output",
        "stdout",
        "good_commit",
        "bad_commit",
        "test_command",
        "bisect_start",
        "good_commit",
        "bad_commit",
        "test_command",
        "test_commit",
        "test_command",
        "result",
        "test_commit",
        "test_command",
        "result",
        "good_commit",
        "bad_commit",
        "test_command",
        "do_bisect_command",
        "test_start_commit",
        "bad_commit",
        "test_command",
        "test_start_commit",
        "good_commit",
        "test_command",
        "subcommand",
        "do_command",
        "subcommand",
        "commit",
        "label",
        "test_command",
        "label",
        "label",
        "do_command",
        "commit",
        "build_clang",
        "repo_dir",
        "execute",
        "test_command",
        "shell",
        "expect_zero",
        "label",
        "retcode",
        "BisectError",
        "test_command",
        "retcode",
        "commit",
        "label",
        "retcode",
        "BisectError",
        "test_command",
        "retcode",
        "commit",
        "do_bisect_command",
        "label",
        "os",
        "environ",
        "copy",
        "variable",
        "variable",
        "env",
        "env",
        "variable",
        "env",
        "execute",
        "repo",
        "local_path",
        "num_retries",
        "os",
        "path",
        "isdir",
        "local_path",
        "_",
        "num_retries",
        "os",
        "path",
        "isdir",
        "local_path",
        "shutil",
        "rmtree",
        "local_path",
        "execute",
        "repo",
        "local_path",
        "expect_zero",
        "retcode",
        "repo",
        "execute",
        "arch",
        "arch",
        "arch",
        "llvm_project_path",
        "os",
        "path",
        "join",
        "os",
        "getenv",
        "os",
        "path",
        "exists",
        "llvm_build_dir",
        "os",
        "mkdir",
        "llvm_build_dir",
        "execute",
        "get_clang_target_arch",
        "os",
        "path",
        "join",
        "llvm_project_path",
        "env",
        "get_clang_build_env",
        "cwd",
        "llvm_build_dir",
        "llvm_build_dir",
        "llvm_project_path",
        "prepare_build",
        "llvm_project_path",
        "execute",
        "llvm_build_dir",
        "env",
        "get_clang_build_env",
        "test_command",
        "good_commit",
        "bad_commit",
        "os",
        "path",
        "join",
        "os",
        "getenv",
        "clone_with_retries",
        "llvm_project_path",
        "GitRepo",
        "llvm_project_path",
        "git_repo",
        "bisect",
        "good_commit",
        "bad_commit",
        "test_command",
        "result",
        "result",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "argv",
        "logging",
        "getLogger",
        "setLevel",
        "logging",
        "DEBUG",
        "install_clang_build_deps",
        "find_culprit_commit",
        "test_command",
        "good_commit",
        "bad_commit",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "'stdout'",
        "'stderr'",
        "'Running command: \"%s\"'",
        "'utf-8'",
        "'utf-8'",
        "'Command: \"%s\" returned: %d.\\nStdout: %s.\\nStderr: %s'",
        "'([a-z0-9]{40}) is the first (good|bad) commit'",
        "'git'",
        "'-C'",
        "'good'",
        "'bad'",
        "'start'",
        "'bad'",
        "'good'",
        "'bisect'",
        "'good'",
        "'bad'",
        "'checkout'",
        "'good'",
        "'Test command \"%s\" returns %d on first good commit %s'",
        "'bad'",
        "'Test command \"%s\" returns %d on first bad commit %s'",
        "'CXXFLAGS'",
        "'CFLAGS'",
        "'apt-get'",
        "'install'",
        "'-y'",
        "'build-essential'",
        "'make'",
        "'cmake'",
        "'ninja-build'",
        "'git'",
        "'subversion'",
        "'g++-multilib'",
        "'git'",
        "'clone'",
        "'Could not checkout %s.'",
        "'uname'",
        "'-m'",
        "'x86_64'",
        "'X86'",
        "'aarch64'",
        "'AArch64'",
        "'Unsupported target: %s.'",
        "'WORK'",
        "'llvm-build'",
        "'cmake'",
        "'-G'",
        "'Ninja'",
        "'-DLIBCXX_ENABLE_SHARED=OFF'",
        "'-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON'",
        "'-DLIBCXXABI_ENABLE_SHARED=OFF'",
        "'-DCMAKE_BUILD_TYPE=Release'",
        "'-DLLVM_ENABLE_PROJECTS=libcxx;libcxxabi;compiler-rt;clang'",
        "'-DLLVM_TARGETS_TO_BUILD='",
        "'llvm'",
        "'ninja'",
        "'-C'",
        "'install'",
        "'SRC'",
        "'llvm-project'",
        "'https://github.com/llvm/llvm-project.git'",
        "'Culprit commit'",
        "'__main__'"
    ],
    "variables": [
        "kwargs",
        "kwargs",
        "process",
        "stdout",
        "stderr",
        "stdout",
        "stderr",
        "retcode",
        "culprit_regex",
        "match",
        "repo_dir",
        "command",
        "retcode",
        "_",
        "_",
        "retcode",
        "stdout",
        "_",
        "retcode",
        "stdout",
        "_",
        "result",
        "result",
        "retcode",
        "_",
        "_",
        "env",
        "retcode",
        "_",
        "_",
        "_",
        "arch",
        "_",
        "llvm_build_dir",
        "llvm_build_dir",
        "llvm_project_path",
        "git_repo",
        "result",
        "test_command",
        "good_commit",
        "bad_commit"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "Copyright 2019 Google Inc.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "",
        "",
        "TODO(metzman): Is it necessary to look for \"good\"?",
        "Do bad commit first since it is more likely to be recent.",
        "TODO(metzman): Merge Python checkout and build code with",
        "checkout_build_install_llvm.sh.",
        "TODO(metzman): Look into speeding this process using ccache.",
        "TODO(metzman): Make this program capable of handling MSAN and i386 Clang",
        "regressions.",
        "TODO(metzman): Sanity check CFLAGS for things like",
        "-fsanitize=fuzzer-no-link.",
        "TODO(metzman): Allow test_command to be optional and for just build.sh to be",
        "used instead.",
        "TODO(metzman): Add in more automation so that the script can automatically",
        "determine the commits used in last Clang roll.",
        "TODO(metzman): Make verbosity configurable."
    ],
    "docstrings": [
        "\"\"\"Use git bisect to find the Clang/LLVM commit causing a regression.\"\"\"",
        "\"\"\"Execute |command| and return the returncode, stdout and stderr.\"\"\"",
        "\"\"\"Search |output| for a message indicating the culprit commit has been\n  found.\"\"\"",
        "\"\"\"Class for executing commmands on a git repo.\"\"\"",
        "\"\"\"Execute a |git_subcommand| (a list of strings).\"\"\"",
        "\"\"\"Build LLVM at the currently checkedout commit, then run |test_command|.\n    If returncode is 0 run 'git bisect good' otherwise return 'git bisect bad'.\n    Return None if bisect didn't terminate yet. Return the culprit commit if it\n    does.\"\"\"",
        "\"\"\"Do git bisect assuming |good_commit| is good, |bad_commit| is bad and\n    |test_command| is an oracle. Return the culprit commit.\"\"\"",
        "\"\"\"Start doing git bisect.\"\"\"",
        "\"\"\"Execute a git bisect |subcommand| (string) and return the result.\"\"\"",
        "\"\"\"Use |test_command| to test the first good or bad |commit| (depending on\n    |label|).\"\"\"",
        "\"\"\"Get an environment for building Clang.\"\"\"",
        "\"\"\"Instal dependencies necessary to build clang.\"\"\"",
        "\"\"\"Clone |repo| to |local_path| if it doesn't exist already. Try up to\n  |num_retries| times. Return False if unable to checkout.\"\"\"",
        "\"\"\"Get target architecture we want clang to target when we build it.\"\"\"",
        "\"\"\"Prepare to build clang.\"\"\"",
        "\"\"\"Checkout, build and install Clang.\"\"\"",
        "\"\"\"Returns the culprit LLVM commit that introduced a bug revealed by running\n  |test_command|. Uses git bisect and treats |good_commit| as the first latest\n   known good commit and |bad_commit| as the first known bad commit.\"\"\"",
        "\"\"\"Finds the culprit LLVM commit that introduced a clang regression.\"\"\""
    ],
    "functions": [
        "execute",
        "search_bisect_output",
        "do_command",
        "test_commit",
        "bisect",
        "bisect_start",
        "do_bisect_command",
        "test_start_commit",
        "get_clang_build_env",
        "install_clang_build_deps",
        "clone_with_retries",
        "get_clang_target_arch",
        "prepare_build",
        "build_clang",
        "find_culprit_commit",
        "main"
    ],
    "classes": [
        "GitRepo",
        "BisectError"
    ]
}