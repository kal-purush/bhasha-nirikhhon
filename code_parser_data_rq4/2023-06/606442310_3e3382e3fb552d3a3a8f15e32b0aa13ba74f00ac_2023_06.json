{
    "identifiers": [
        "types",
        "to_tag",
        "toTagFunction",
        "to_tag",
        "printFunctions",
        "name",
        "toTag",
        "isArrayType",
        "isArray",
        "first",
        "bareName",
        "bareName",
        "printFunctions",
        "name",
        "typeName",
        "toTag",
        "typeName",
        "functionName",
        "makeGetter",
        "isArrayType",
        "isArray",
        "makeGetter",
        "isArray",
        "isArray",
        "bareType",
        "bareType",
        "bareType",
        "bareType",
        "titleCase",
        "titleCase",
        "bareType",
        "bareType",
        "bareType",
        "isArray",
        "tagType",
        "bareType",
        "tagClass",
        "titleCase",
        "tagType",
        "lowerCase",
        "tagClass",
        "titleCase",
        "isArray",
        "tagType",
        "tagClass",
        "tagType",
        "lowerCase",
        "tagClass",
        "titleCase",
        "isArray",
        "tagType",
        "valueGetterFunction",
        "bareType",
        "valueGetterFunction",
        "titleCase",
        "bareType",
        "valueGetterFunction",
        "valueGetterFunction",
        "bareType",
        "isNullable",
        "isArray",
        "actualType",
        "getter",
        "docType",
        "defValue",
        "actualType",
        "typeName",
        "typeName",
        "defValue",
        "docType",
        "actualType",
        "typeName",
        "tagType",
        "tagClass",
        "tagType",
        "valueGetterFunction",
        "getter",
        "docType",
        "typeName",
        "functionName",
        "docType",
        "typeName",
        "functionName",
        "typeName",
        "functionName",
        "getter",
        "typeName",
        "typeName",
        "typeName",
        "typeName",
        "typeName",
        "isArray",
        "isArray",
        "typeName",
        "typeName",
        "typeName"
    ],
    "literals": [
        "\"String\"",
        "\"String\"",
        "\"stringTag\"",
        "\"byte\"",
        "\"Byte\"",
        "\"short\"",
        "\"Short\"",
        "\"int\"",
        "\"Int\"",
        "\"long\"",
        "\"Long\"",
        "\"double\"",
        "\"Double\"",
        "\"float\"",
        "\"Float\"",
        "\"byte...\"",
        "\"ByteArray\"",
        "\"int...\"",
        "\"IntArray\"",
        "\"long...\"",
        "\"LongArray\"",
        "\"double...\"",
        "\"DoubleArray\"",
        "\"float...\"",
        "\"FloatArray\"",
        "\"String...\"",
        "\"StringArray\"",
        "\"stringList\"",
        "\"// Type-specific values\"",
        "\"int\"",
        "\"nteger\"",
        "List<${typeName}>",
        "\"[]\"",
        "\"string\"",
        "\"String\"",
        "\"byte\"",
        "\"int\"",
        "\"long\"",
        "\"ArrayType\"",
        "\"ArrayTag\"",
        "\"Type\"",
        "\"Tag\"",
        "\"listType\"",
        "\"ListTag\"",
        "\"Type\"",
        "\"Tag\"",
        "\"listType\"",
        "toArray(new ${bareType}[tag.size()])",
        "to${titleCase}Array()",
        "\"String\"",
        "\"value()\"",
        "${bareType}Value()",
        "(${actualType})",
        "\"\"",
        "\"null\"",
        "\"short\"",
        "\"byte\"",
        "(${type})",
        "\"\"",
        "\"0\"",
        "/**\n * Gets a {@code ${docType}} value from the tag\n * @param index Element index\n * @return Found value, or {@code ${defValue}}, if the entry wasn't found\n */\ndefault ${actualType} get${typeName}(int index) {\n  return get${typeName}(index, ${defValue});\n}\n\n/**\n * Gets a {@code ${docType}} value from the tag\n * @param index Element index\n * @param defaultValue Default return value\n * @return Found value, or {@code defaultValue}, if the entry wasn't found\n */\ndefault ${actualType} get${typeName}(int index, ${type} defaultValue) {\n  if (!typeMatches(TagTypes.${tagType}()) || index < 0 || index >= size()) {\n    return defaultValue;\n  }\n\n  ${tagClass} tag = get(index, TagTypes.${tagType}());\n  return tag.${valueGetterFunction};\n}",
        "\"\"",
        "/**\n * Adds a {@code ${docType}} value to the list\n * @param value Value to add\n * @return {@code true}, if the value was inserted into the list, {@code false} otherwise\n */\ndefault boolean add${typeName}(${type} value) {\n  var tag = BinaryTags.${functionName}(value);\n  return add(tag);\n}\n\n/**\n * Adds a {@code ${docType}} value to the list\n * @param index Index to add the value at\n * @param value Value to add\n */\ndefault void add${typeName}(int index, ${type} value) {\n  var tag = BinaryTags.${functionName}(value);\n  add(index, tag);\n}\n\n/**\n * Sets a value inside this list\n * @param index Index to set\n * @param value Value to set\n */\ndefault void set${typeName}(int index, ${type} value) {\n  var tag = BinaryTags.${functionName}(value);\n  set(index, tag);\n}\n\n${getter}",
        "\"...\"",
        "\"...\"",
        "\"byte\"",
        "\"byteArrayTag\"",
        "\"int\"",
        "\"intArrayTag\"",
        "\"long\"",
        "\"longArrayTag\"",
        "\"List\"",
        "\"Tag\""
    ],
    "variables": [
        "types",
        "toTag",
        "isArray",
        "first",
        "bareName",
        "typeName",
        "getter",
        "isArray",
        "actualType",
        "docType",
        "actualType",
        "bareType",
        "isNullable",
        "titleCase",
        "lowerCase",
        "tagType",
        "tagClass",
        "valueGetterFunction",
        "defValue",
        "isArray"
    ],
    "comments": [
        "Script which generates all the helper methods",
        "inside net/forthecrown/nbt/ListTag",
        "",
        "Note: This script isn't full do-it-all type thing, this will require",
        "cleanup after the output has been generated",
        "",
        "Output string",
        "Arrays generate 2 types of method, one with type[] and one with List<Type>",
        "Omg this is horrendous, doesn't matter though, this is just a",
        "small script"
    ],
    "docstrings": [],
    "functions": [
        "printFunctions",
        "isArrayType",
        "toTagFunction"
    ],
    "classes": []
}