{
    "identifiers": [
        "datastructures",
        "maps",
        "java",
        "util",
        "date",
        "dateRec",
        "date",
        "dateRec",
        "Override",
        "date",
        "cost",
        "ids",
        "idRec",
        "costRec",
        "ids",
        "add",
        "idRec",
        "cost",
        "parseFloat",
        "costRec",
        "substring",
        "key",
        "value",
        "keyReceived",
        "valueReceived",
        "key",
        "keyReceived",
        "value",
        "valueReceived",
        "key",
        "value",
        "MapADT",
        "key",
        "key",
        "value",
        "key",
        "minPrime",
        "rehashingSize",
        "maxHashtableSize",
        "size",
        "hashMap",
        "closestLowerPrime",
        "size",
        "maxHashtableSize",
        "closestLowerPrime",
        "getClosestLowerPrime",
        "size",
        "hashMap",
        "size",
        "Override",
        "size",
        "Override",
        "size",
        "Override",
        "key",
        "startingIndex",
        "getStartIndexWithHashing",
        "key",
        "hashStep",
        "getSpecifiedHashStep",
        "key",
        "i",
        "i",
        "size",
        "i",
        "currentIndex",
        "startingIndex",
        "i",
        "hashStep",
        "size",
        "hashMap",
        "currentIndex",
        "hashMap",
        "currentIndex",
        "getKey",
        "equals",
        "key",
        "hashMap",
        "i",
        "getValue",
        "Override",
        "key",
        "value",
        "startingIndex",
        "getStartIndexWithHashing",
        "key",
        "hashStep",
        "getSpecifiedHashStep",
        "key",
        "noEmptySlots",
        "i",
        "i",
        "size",
        "i",
        "currentIndex",
        "startingIndex",
        "i",
        "hashStep",
        "size",
        "hashMap",
        "currentIndex",
        "noEmptySlots",
        "hashMap",
        "currentIndex",
        "key",
        "value",
        "hashMap",
        "currentIndex",
        "getKey",
        "equals",
        "key",
        "noEmptySlots",
        "idAndCost",
        "hashMap",
        "currentIndex",
        "getValue",
        "idAndCost",
        "cost",
        "value",
        "cost",
        "idAndCost",
        "ids",
        "add",
        "value",
        "ids",
        "get",
        "hashMap",
        "currentIndex",
        "key",
        "idAndCost",
        "noEmptySlots",
        "rehash",
        "put",
        "key",
        "value",
        "Override",
        "key",
        "Override",
        "Override",
        "Override",
        "arr",
        "i",
        "i",
        "size",
        "i",
        "hashMap",
        "i",
        "arr",
        "add",
        "hashMap",
        "i",
        "arr",
        "size",
        "rehashingSize",
        "closestLowerPrime",
        "getClosestLowerPrime",
        "size",
        "oldHashMap",
        "hashMap",
        "clone",
        "hashMap",
        "size",
        "i",
        "i",
        "size",
        "rehashingSize",
        "i",
        "oldHashMap",
        "i",
        "put",
        "oldHashMap",
        "i",
        "getKey",
        "oldHashMap",
        "i",
        "getValue",
        "num",
        "num",
        "isPrime",
        "num",
        "num",
        "max",
        "num",
        "minPrime",
        "num",
        "i",
        "i",
        "sqrt",
        "num",
        "i",
        "num",
        "i",
        "key",
        "key",
        "hashCode",
        "size",
        "key",
        "closestLowerPrime",
        "key",
        "hashCode",
        "closestLowerPrime"
    ],
    "literals": [],
    "variables": [
        "date",
        "cost",
        "key",
        "value",
        "size",
        "hashMap",
        "closestLowerPrime"
    ],
    "comments": [],
    "docstrings": [
        "* Class which represents the part of the input - date.\n * Form: YYYY-MM-DD",
        "* Class which implements Entry<Ids, Cost>.\n * Ids - the array of customers' ids.\n * Cost - integer value of every purchase.",
        "* The Entry<K, V> for further HashMap implementation.\n *\n * @param <K> - object which will be treated as key in HashMap.\n * @param <V> object which will be treated as value in HashMap.",
        "* Interface with all canonical functions for MapADT.\n *\n * @param <K> - object which will be treated as key in HashMap.\n * @param <V> - object which will be treated as value in HashMap.",
        "* The main class, which implements the functionality of HashMap through the Open Addressing with Double Hashing.\n *\n * @param <K> - object which will be treated as key in HashMap.\n * @param <V> - object which will be treated as value in HashMap.",
        "* Minimal prime number for any HashMap.\n     * <p>\n     * Will be needed as a HashStep.",
        "* Factor of rehashing. That means that HashTable size multiply by 4 everytime when HashTable is full.",
        "* Initial size for HashTable.",
        "* Get the current size of the HashTable.\n     *\n     * @return int - size of HashTable.",
        "* Check if the HashTable is empty.\n     *\n     * @return boolean - true if Hashtable is empty; Otherwise, false.",
        "* Get the value from the HashMap according to received key.\n     * Complexity: average case - O(1 / (1 - loadFactor)).\n     *\n     * @param key - object which will be treated as key in HashMap.\n     * @return V obj - object which is value for key in current Hashmap;\n     * <p>\n     * Otherwise, if no such key exists in HashMap - null.",
        "* Modified version of insert function for HashMap.\n     * In this program, we treat date of the purchase as a key.\n     * Hence, if no such date already inserted in HashMap - insert it as first.\n     * Otherwise, if such date exists in HashMap - resubmit the V value for current key.\n     * (Sum of costs and adding ID in IDs array).\n     * Last option, if HashTable is full --> rehash it.\n     * Complexity: average case O(1 / (1 - loadFactor))\n     *\n     * @param key   - object which will be treated as key in HashMap.\n     * @param value - object which will be treated as value in HashMap.",
        "Reassign the value for this date (key) if we received from the input the same date.",
        "* Get the set of KeyValuePair<K, V>.\n     *\n     * @return List() - the set of KeyValuePair<K, V>",
        "* Rehash the table with factor == 4. (Increase the size 4 times).",
        "* Get the closest prime for less than num.\n     *\n     * @param num - number\n     * @return int - closest prime les than num.",
        "* Check if the number is prime.\n     *\n     * @param num - int number.\n     * @return boolean - true if number is prime; Otherwise, false.",
        "* Function which implements the function for finding the starting index.\n     * Double Hashing: initial index (starting).\n     *\n     * @param key - object which will be treated as key in HashMap.\n     * @return int initial index.",
        "* Function which implements the function for finding the hashing step.\n     * Double Hashing: hash step.\n     *\n     * @param key - object which will be treated as key in HashMap.\n     * @return int hashStep."
    ],
    "functions": [
        "toString",
        "IdAndCost",
        "KeyValuePair",
        "K",
        "getKey",
        "V",
        "getValue",
        "size",
        "isEmpty",
        "V",
        "get",
        "put",
        "remove",
        "keySet",
        "values",
        "entrySet",
        "size",
        "isEmpty",
        "V",
        "get",
        "put",
        "remove",
        "keySet",
        "values",
        "entrySet",
        "rehash",
        "getClosestLowerPrime",
        "isPrime",
        "getStartIndexWithHashing",
        "getSpecifiedHashStep"
    ],
    "classes": [
        "IdAndCost",
        "KeyValuePair"
    ]
}