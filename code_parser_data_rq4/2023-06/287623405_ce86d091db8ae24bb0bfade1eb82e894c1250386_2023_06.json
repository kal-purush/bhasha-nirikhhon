{
    "identifiers": [
        "logging",
        "os",
        "sys",
        "subprocess",
        "PIPE",
        "Popen",
        "logging",
        "getLogger",
        "logger",
        "debug",
        "__class__",
        "os",
        "path",
        "dirname",
        "os",
        "path",
        "realpath",
        "sys",
        "argv",
        "_check_available",
        "logger",
        "debug",
        "__class__",
        "command",
        "logger",
        "debug",
        "command",
        "command",
        "Popen",
        "cmd",
        "shell",
        "stdout",
        "PIPE",
        "stderr",
        "PIPE",
        "cwd",
        "_working_dir",
        "proc",
        "proc",
        "communicate",
        "proc",
        "returncode",
        "retcode",
        "stdout",
        "decode",
        "errors",
        "splitlines",
        "lines",
        "stderr",
        "decode",
        "errors",
        "splitlines",
        "logger",
        "debug",
        "cmd",
        "retcode",
        "success",
        "lines",
        "success",
        "lines",
        "_from_git",
        "success",
        "next",
        "line",
        "strip",
        "line",
        "msg",
        "line",
        "config",
        "_from_git",
        "config",
        "split",
        "property",
        "_available",
        "_from_git",
        "success",
        "status",
        "status",
        "property",
        "next",
        "line",
        "strip",
        "line",
        "status",
        "line",
        "status",
        "replace",
        "property",
        "_available",
        "_from_git",
        "success",
        "branches",
        "branches",
        "_available",
        "_from_git",
        "_available",
        "_from_git",
        "branch",
        "_available",
        "_from_git",
        "branch",
        "count",
        "_available",
        "_from_git",
        "count",
        "success",
        "commits",
        "commits",
        "Git"
    ],
    "literals": [
        "\"Initializing: %s\"",
        "\"Initialized: %s\"",
        "\"command: '%s'\"",
        "f\"git {command}\"",
        "\"utf-8\"",
        "\"replace\"",
        "\"utf-8\"",
        "\"replace\"",
        "\"command: '%s', returncode: %s, success: %s, lines: %s\"",
        "\"status\"",
        "\"add safe.directory\"",
        "\"git \"",
        "\"status -uno\"",
        "\"On branch\"",
        "\"Not Found\"",
        "\"On branch \"",
        "\"\"",
        "\"branch -a\"",
        "\"remote update\"",
        "\"pull\"",
        "f\"checkout {branch}\"",
        "f\"log --pretty=oneline --abbrev-commit -n {count}\""
    ],
    "variables": [
        "logger",
        "_working_dir",
        "_available",
        "cmd",
        "stdout",
        "stderr",
        "retcode",
        "success",
        "lines",
        "lines",
        "success",
        "msg",
        "config",
        "success",
        "_",
        "success",
        "status",
        "status",
        "success",
        "branches",
        "success",
        "commits",
        "git"
    ],
    "comments": [
        "!/usr/bin python3"
    ],
    "docstrings": [
        "\"\"\" Handles command line calls to git \"\"\"",
        "\"\"\" Handles calls to github \"\"\"",
        "\"\"\" Execute a git command\n\n        Parameters\n        ----------\n        command : str\n            The command to send to git\n\n        Returns\n        -------\n        success: bool\n            ``True`` if the command succesfully executed otherwise ``False``\n        list[str]\n            The output lines from stdout if there was no error, otherwise from stderr\n        \"\"\"",
        "\"\"\" Check if git is available. Does a call to git status. If the process errors due to\n        folder ownership, attempts to add the folder to github safe folders list and tries\n        again\n\n        Returns\n        -------\n        bool\n            ``True`` if git is available otherwise ``False``\n\n        \"\"\"",
        "\"\"\" Obtain the output of git status for tracked files only \"\"\"",
        "\"\"\" str: The git branch that is currently being used to execute Faceswap. \"\"\"",
        "\"\"\" list[str]: List of all available branches. \"\"\"",
        "\"\"\" Update all branches to track remote\n\n        Returns\n        -------\n        bool\n            ``True`` if update was succesful otherwise ``False``\n        \"\"\"",
        "\"\"\" Pull the current branch\n\n        Returns\n        -------\n        bool\n            ``True`` if pull is successful otherwise ``False``\n        \"\"\"",
        "\"\"\" Checkout the requested branch\n\n        Parameters\n        ----------\n        branch : str\n            The branch to checkout\n\n        Returns\n        -------\n        bool\n            ``True`` if the branch was succesfully checkout out otherwise ``False``\n        \"\"\"",
        "\"\"\" Obtain the last commits to the repo\n\n        Parameters\n        ----------\n        count : int\n            The last number of commits to obtain\n\n        Returns\n        -------\n        list[str]\n            list of commits, or empty list if none found\n        \"\"\"",
        "\"\"\" :class:`Git`: Handles calls to github \"\"\""
    ],
    "functions": [
        "_from_git",
        "_check_available",
        "status",
        "branch",
        "branches",
        "update_remote",
        "pull",
        "checkout",
        "get_commits"
    ],
    "classes": [
        "Git"
    ]
}