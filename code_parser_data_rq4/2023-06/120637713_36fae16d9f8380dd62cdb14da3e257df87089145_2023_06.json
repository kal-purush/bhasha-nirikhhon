{
    "identifiers": [
        "argparse",
        "datetime",
        "datetime",
        "timedelta",
        "os",
        "path",
        "sys",
        "h5py",
        "numpy",
        "np",
        "pyiodaconv",
        "ioda_conv_engines",
        "iconv",
        "pyiodaconv",
        "orddicts",
        "DefaultOrderedDict",
        "pyiodaconv",
        "def_jedi_utils",
        "set_metadata_attributes",
        "set_obspace_attributes",
        "pyiodaconv",
        "def_jedi_utils",
        "compute_scan_angle",
        "pyiodaconv",
        "def_jedi_utils",
        "concat_obs_dict",
        "pyiodaconv",
        "def_jedi_utils",
        "iso8601_string",
        "pyiodaconv",
        "def_jedi_utils",
        "float_missing_value",
        "int_missing_value",
        "long_missing_value",
        "iconv",
        "MetaDataName",
        "iconv",
        "OvalName",
        "datetime",
        "fromisoformat",
        "iso8601_string",
        "args",
        "args",
        "output",
        "args",
        "date",
        "datetime",
        "strptime",
        "args",
        "date",
        "i",
        "i",
        "args",
        "input",
        "afile",
        "input_files",
        "get_data_from_files",
        "afile",
        "file_obs_data",
        "obs_data",
        "concat_obs_dict",
        "obs_data",
        "file_obs_data",
        "file_obs_data",
        "np",
        "array",
        "len",
        "obs_data",
        "metaDataName",
        "dtype",
        "nlocs_int",
        "item",
        "len",
        "obs_data",
        "metaDataName",
        "dtg",
        "dtg",
        "strftime",
        "os",
        "path",
        "basename",
        "nlocs",
        "obs_data",
        "metaDataName",
        "iconv",
        "IodaWriter",
        "output_filename",
        "locationKeyList",
        "DimDict",
        "DefaultOrderedDict",
        "DefaultOrderedDict",
        "set_obspace_attributes",
        "VarAttrs",
        "set_metadata_attributes",
        "VarAttrs",
        "writer",
        "BuildIoda",
        "obs_data",
        "VarDims",
        "VarAttrs",
        "GlobalAttrs",
        "afile",
        "init_obs_loc",
        "h5py",
        "File",
        "afile",
        "get_data",
        "f",
        "obs_data",
        "f",
        "close",
        "obs_data",
        "f",
        "obs_data",
        "f",
        "attrs",
        "item",
        "get_wmo_id",
        "f",
        "attrs",
        "item",
        "np",
        "shape",
        "f",
        "np",
        "shape",
        "f",
        "metaDataName",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "metaDataName",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "len",
        "obs_data",
        "metaDataName",
        "metaDataName",
        "np",
        "array",
        "np",
        "arange",
        "nchans",
        "dtype",
        "k",
        "metaDataName",
        "np",
        "tile",
        "np",
        "arange",
        "nbeam_pos",
        "dtype",
        "nscans",
        "flatten",
        "k",
        "metaDataName",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "obs_data",
        "k",
        "metaDataName",
        "k",
        "metaDataName",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "k",
        "metaDataName",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "f",
        "attrs",
        "item",
        "get_asc_dsc",
        "orbit_direction",
        "metaDataName",
        "np",
        "full",
        "nlocs",
        "iasc",
        "dtype",
        "metaDataName",
        "np",
        "full",
        "nlocs",
        "WMO_sat_ID",
        "dtype",
        "np",
        "empty_like",
        "instr_scan_ang",
        "f",
        "attrs",
        "item",
        "strip",
        "metaDataName",
        "compute_scan_angle",
        "instr_scan_ang",
        "sat_altitude",
        "instr_scan_ang",
        "metaDataName",
        "np",
        "array",
        "get_epoch_time",
        "f",
        "nbeam_pos",
        "dtype",
        "len",
        "obs_data",
        "metaDataName",
        "k",
        "np",
        "transpose",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "np",
        "array",
        "f",
        "dtype",
        "flatten",
        "k",
        "np",
        "full",
        "nlocs",
        "nchans",
        "dtype",
        "k",
        "np",
        "full",
        "nlocs",
        "nchans",
        "dtype",
        "obs_data",
        "metaDataName",
        "obs_data",
        "metaDataName",
        "obs_data",
        "metaDataName",
        "obs_data",
        "metaDataName",
        "obs_data",
        "metaDataName",
        "obs_data",
        "metaDataName",
        "obs_data",
        "metaDataName",
        "float_missing_value",
        "obs_data",
        "metaDataName",
        "float_missing_value",
        "obs_data",
        "metaDataName",
        "float_missing_value",
        "obs_data",
        "f",
        "obs_key",
        "obs_data",
        "np",
        "array",
        "f",
        "flatten",
        "ich",
        "nchan",
        "obs_data",
        "obs_key",
        "ich",
        "float_missing_value",
        "obs_data",
        "tb_key",
        "obsValName",
        "float_missing_value",
        "obs_data",
        "tb_key",
        "obsValName",
        "float_missing_value",
        "obs_data",
        "tb_key",
        "obsValName",
        "float_missing_value",
        "obs_data",
        "tb_key",
        "obsValName",
        "float_missing_value",
        "obs_data",
        "tb_key",
        "obsValName",
        "float_missing_value",
        "k",
        "obs_data",
        "metaDataName",
        "k",
        "k",
        "obs_data",
        "k",
        "good",
        "tb_key",
        "k",
        "obs_data",
        "k",
        "good",
        "obs_data",
        "orbitDirection",
        "orbitDirection",
        "orbitDirection",
        "iasc",
        "platform",
        "platform",
        "GCOMW_WMO_sat_ID",
        "WMO_sat_ID",
        "f",
        "nbeam_pos",
        "datetime",
        "base_date",
        "timedelta",
        "seconds",
        "isec",
        "isec",
        "f",
        "adate",
        "time_offset_short",
        "_",
        "nbeam_pos",
        "time_offset",
        "append",
        "adate",
        "timestamp",
        "time_offset",
        "metaDataName",
        "metaDataName",
        "metaDataName",
        "metaDataName",
        "metaDataName",
        "metaDataName",
        "metaDataName",
        "metaDataName",
        "metaDataName",
        "metaDataName",
        "metaDataName",
        "obs",
        "argparse",
        "ArgumentParser",
        "description",
        "parser",
        "add_argument_group",
        "title",
        "required",
        "add_argument",
        "help",
        "nargs",
        "required",
        "parser",
        "add_argument_group",
        "title",
        "optional",
        "add_argument",
        "help",
        "optional",
        "add_argument",
        "help",
        "os",
        "path",
        "join",
        "os",
        "getcwd",
        "optional",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "parse_args",
        "main",
        "args"
    ],
    "literals": [
        "\"platformCommonName\"",
        "\"AMSR2\"",
        "\"platformLongDescription\"",
        "\"AMSR-2 Brightness Temperature Data\"",
        "\"sensorCentralFrequency\"",
        "\"[6.925V, 6.925H, 7.3V, 7.3H, 10.65V, 10.65H, 18.7V, 18.7H, 23.8V, 23.8H, 36.5V, 36.5H, 89.0V, 89.0H]\"",
        "\"latitude\"",
        "\"float\"",
        "\"longitude\"",
        "\"float\"",
        "\"dateTime\"",
        "\"long\"",
        "'%Y%m%d%H'",
        "\"INFO: non-nominal file skipping\"",
        "'latitude'",
        "'int64'",
        "'sensorChannelNumber'",
        "'datetimeReference'",
        "\"%Y-%m-%dT%H:%M:%SZ\"",
        "'converter'",
        "'brightnessTemperature'",
        "'Location'",
        "'Channel'",
        "'sensorChannelNumber'",
        "'Channel'",
        "'Location'",
        "'Channel'",
        "'sensorChannelNumber'",
        "'r'",
        "'SensorShortName'",
        "'PlatformShortName'",
        "'Latitude of Observation Point for 89A'",
        "'Latitude of Observation Point for 89A'",
        "'latitude'",
        "'Latitude of Observation Point for 89A'",
        "'float32'",
        "'longitude'",
        "'Longitude of Observation Point for 89A'",
        "'float32'",
        "'latitude'",
        "'sensorChannelNumber'",
        "'int32'",
        "'sensorScanPosition'",
        "'float32'",
        "'sensorZenithAngle'",
        "'Earth Incidence'",
        "'float32'",
        "'sensorAzimuthAngle'",
        "'Earth Azimuth'",
        "'float32'",
        "'solarAzimuthAngle'",
        "'Sun Azimuth'",
        "'float32'",
        "'OrbitDirection'",
        "'satelliteAscendingFlag'",
        "'int32'",
        "'satelliteIdentifier'",
        "'int32'",
        "'SatelliteAltitude'",
        "'km'",
        "'sensorViewAngle'",
        "'dateTime'",
        "'int64'",
        "'latitude'",
        "'brightnessTemperature'",
        "\"ObsValue\"",
        "'Brightness Temperature (6.9GHz,H)'",
        "'float32'",
        "'Brightness Temperature (6.9GHz,V)'",
        "'float32'",
        "'Brightness Temperature (7.3GHz,H)'",
        "'float32'",
        "'Brightness Temperature (7.3GHz,V)'",
        "'float32'",
        "'Brightness Temperature (10.7GHz,H)'",
        "'float32'",
        "'Brightness Temperature (10.7GHz,V)'",
        "'float32'",
        "'Brightness Temperature (18.7GHz,H)'",
        "'float32'",
        "'Brightness Temperature (18.7GHz,V)'",
        "'float32'",
        "'Brightness Temperature (23.8GHz,H)'",
        "'float32'",
        "'Brightness Temperature (23.8GHz,V)'",
        "'float32'",
        "'Brightness Temperature (36.5GHz,H)'",
        "'float32'",
        "'Brightness Temperature (36.5GHz,V)'",
        "'float32'",
        "'Brightness Temperature (89.0GHz-A,H)'",
        "'float32'",
        "'Brightness Temperature (89.0GHz-A,V)'",
        "'float32'",
        "\"ObsError\"",
        "'float32'",
        "\"PreQC\"",
        "'int32'",
        "'latitude'",
        "'latitude'",
        "'longitude'",
        "'longitude'",
        "'sensorZenithAngle'",
        "'sensorZenithAngle'",
        "'latitude'",
        "'longitude'",
        "'sensorZenithAngle'",
        "\"brightnessTemperature\"",
        "\"ObsValue\"",
        "'Scan Data Quality'",
        "'brightnessTemperature'",
        "'sensorChannelNumber'",
        "'Ascending'",
        "'Descending'",
        "f' ... WARNING ... can not determine ascending or descending from file attribute'",
        "'GCOM-W1'",
        "' ... could not find PlatformShortName as file attribute'",
        "'Scan Time'",
        "'brightnessTemperature'",
        "\"ObsValue\"",
        "'brightnessTemperature'",
        "\"ObsError\"",
        "'brightnessTemperature'",
        "\"PreQC\"",
        "'satelliteIdentifier'",
        "'sensorChannelNumber'",
        "'latitude'",
        "'longitude'",
        "'dateTime'",
        "'sensorScanPosition'",
        "'sensorZenithAngle'",
        "'sensorAzimuthAngle'",
        "'sensorViewAngle'",
        "'solarAzimuthAngle'",
        "'satelliteAscendingFlag'",
        "\"__main__\"",
        "'Reads the satellite data '",
        "' convert into IODA formatted output files. '",
        "' Multiple files are concatenated'",
        "'required arguments'",
        "'-i'",
        "'--input'",
        "\"path of satellite observation input file(s)\"",
        "'+'",
        "'optional arguments'",
        "'-j'",
        "'--threads'",
        "'multiple threads can be used to load input files in parallel.'",
        "' (default: %(default)s)'",
        "'-o'",
        "'--output'",
        "'path to output ioda file'",
        "'output.nc4'",
        "'-d'",
        "'--date'",
        "\"YYYYMMDDHH\"",
        "\"base date for the center of the window\""
    ],
    "variables": [
        "metaDataName",
        "obsValName",
        "GCOMW_WMO_sat_ID",
        "GPM_WMO_sat_ID",
        "GlobalAttrs",
        "locationKeyList",
        "epoch",
        "output_filename",
        "dtg",
        "dtg",
        "input_files",
        "obs_data",
        "file_obs_data",
        "obs_data",
        "nlocs_int",
        "nlocs",
        "nchans",
        "GlobalAttrs",
        "GlobalAttrs",
        "VarDims",
        "DimDict",
        "writer",
        "VarAttrs",
        "obs_data",
        "f",
        "obs_data",
        "sensor",
        "WMO_sat_ID",
        "nscans",
        "nbeam_pos",
        "nchans",
        "obs_data",
        "obs_data",
        "nlocs",
        "obs_data",
        "k",
        "obs_data",
        "k",
        "obs_data",
        "instr_scan_ang",
        "k",
        "obs_data",
        "k",
        "obs_data",
        "orbit_direction",
        "iasc",
        "obs_data",
        "obs_data",
        "sat_altitude",
        "sat_altitude",
        "obs_data",
        "obs_data",
        "nlocs",
        "k",
        "obs_data",
        "obs_data",
        "obs_data",
        "chk_geolocation",
        "chk_geolocation",
        "chk_geolocation",
        "chk_geolocation",
        "obs_key",
        "chk_ob",
        "chk_ob",
        "tb_key",
        "good",
        "obs_data",
        "k",
        "obs_data",
        "k",
        "iasc",
        "iasc",
        "iasc",
        "WMO_sat_ID",
        "base_date",
        "time_offset_short",
        "time_offset",
        "obs",
        "parser",
        "required",
        "optional",
        "args"
    ],
    "comments": [
        "!/usr/bin/env python3",
        "",
        "(C) Copyright 2020-2023 UCAR",
        "",
        "This software is licensed under the terms of the Apache Licence Version 2.0",
        "which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.",
        "",
        "globals",
        "initialize",
        "read / process files in parallel",
        "with ProcessPoolExecutor(max_workers=args.threads) as executor:",
        "for file_obs_data in executor.map(get_data_from_files, input_files):",
        "if not file_obs_data:",
        "print(\"INFO: non-nominal file skipping\")",
        "continue",
        "if obs_data:",
        "concat_obs_dict(obs_data, file_obs_data)",
        "else:",
        "obs_data = file_obs_data",
        "prepare global attributes we want to output in the file,",
        "in addition to the ones already loaded in from the input file",
        "pass parameters to the IODA writer",
        "k = 'brightnessTemperature'",
        "VarAttrs[(k, 'ObsValue')]['_FillValue'] = float_missing_value",
        "VarAttrs[(k, 'ObsError')]['_FillValue'] = float_missing_value",
        "VarAttrs[(k, 'PreQC')]['_FillValue'] = int_missing_value",
        "VarAttrs[(k, 'ObsValue')]['units'] = 'K'",
        "VarAttrs[(k, 'ObsError')]['units'] = 'K'",
        "VarAttrs[(k, 'PreQC')]['units'] = 'unitless'",
        "final write to IODA file",
        "allocate space for output depending on which variables are to be saved",
        "f.attrs['FileHeader']",
        "\\nSatelliteName=GCOMW1;",
        "WMO_sat_ID = get_WMO_satellite_ID(f.attrs['ShortName'].decode(\"utf-8\"))",
        "beam position or sampling across scan 243 for lower frequencies 486 for 89GHz",
        "use latitude length to define total number of pixels",
        "start at channel 5 as lowest frequencies are not included",
        "~55.2 incidence angle",
        "k = 'solarZenithAngle'  ??? compute",
        "obs_data[(k, metaDataName)] = np.array(f['Sun Elevation'], dtype='float32').flatten()",
        "compute view angle",
        "have to reorder the channel axis to be last then merge ( nscans x nspots = nlocs )",
        "check some global satellite geometry will compress all data using this",
        "need to reformulate",
        "obs_data = set_missing_value(f, obs_key, obs_data)",
        "<HDF5 dataset \"Scan Data Quality\": shape (2035, 512), type \"|u1\">",
        "f['Scan Data Quality'][0,:]",
        "use quality word to set missing values",
        "now reduce size if channels are flagged",
        "[::24] ## add as skip",
        "[::24] ## add as skip",
        "from JAXA gportal files formatted like so",
        "f.attrs['OrbitDirection'].item()",
        "print(f'   orbitDirection: {orbitDirection}')",
        "k: ObservationStartDateTime item: 2022-02-16T00:40:51.967Z",
        "isoformat            '2015-02-04T20:55:08.914461+00:00'",
        "dtgObj = datetime.datetime.fromisoformat(f.attrs['ObservationStartDateTime'].item()[:-1])",
        "why 1993 JAXA",
        "need to add replication by nbeam_pos",
        "('solarZenithAngle', metaDataName): [],"
    ],
    "docstrings": [
        "\"\"\"\nPython code to ingest hdf5 AMSR/2 data\n\"\"\""
    ],
    "functions": [
        "main",
        "get_data_from_files",
        "get_data",
        "set_missing_value",
        "get_asc_dsc",
        "get_wmo_id",
        "get_epoch_time",
        "init_obs_loc"
    ],
    "classes": []
}