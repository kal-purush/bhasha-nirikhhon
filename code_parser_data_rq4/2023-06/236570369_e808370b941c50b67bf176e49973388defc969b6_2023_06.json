{
    "identifiers": [
        "com",
        "linkedin",
        "coral",
        "trino",
        "rel2trino",
        "org",
        "apache",
        "calcite",
        "sql",
        "SqlCall",
        "org",
        "apache",
        "calcite",
        "sql",
        "SqlNode",
        "org",
        "apache",
        "calcite",
        "sql",
        "util",
        "SqlShuttle",
        "org",
        "apache",
        "calcite",
        "sql",
        "validate",
        "SqlValidator",
        "com",
        "linkedin",
        "coral",
        "common",
        "HiveMetastoreClient",
        "com",
        "linkedin",
        "coral",
        "common",
        "transformers",
        "SqlCallTransformers",
        "com",
        "linkedin",
        "coral",
        "common",
        "utils",
        "TypeDerivationUtil",
        "com",
        "linkedin",
        "coral",
        "hive",
        "hive2rel",
        "HiveToRelConverter",
        "com",
        "linkedin",
        "coral",
        "trino",
        "rel2trino",
        "transformers",
        "FromUtcTimestampOperatorTransformer",
        "operatorTransformerList",
        "mscClient",
        "topSqlNode",
        "sqlValidator",
        "mscClient",
        "getSqlValidator",
        "typeDerivationUtil",
        "sqlValidator",
        "topSqlNode",
        "operatorTransformerList",
        "SqlCallTransformers",
        "of",
        "typeDerivationUtil",
        "Override",
        "call",
        "operatorTransformerList",
        "apply",
        "visit",
        "call"
    ],
    "literals": [],
    "variables": [
        "operatorTransformerList"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright 2022-2023 LinkedIn Corporation. All rights reserved.\n * Licensed under the BSD-2 Clause license.\n * See LICENSE in the project root for license information.",
        "* DataTypeDerivedSqlCallConverter transforms the sqlCalls\n * in the input SqlNode representation to be compatible with Trino engine.\n * The transformation may involve change in operator, reordering the operands\n * or even re-constructing the SqlNode.\n *\n * All the transformations performed as part of this shuttle require RelDataType derivation."
    ],
    "functions": [
        "DataTypeDerivedSqlCallConverter",
        "SqlNode",
        "visit"
    ],
    "classes": [
        "DataTypeDerivedSqlCallConverter"
    ]
}