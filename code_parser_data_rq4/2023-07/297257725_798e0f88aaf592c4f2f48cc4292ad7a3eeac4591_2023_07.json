{
    "identifiers": [
        "org",
        "apache",
        "beam",
        "it",
        "cassandra",
        "org",
        "apache",
        "beam",
        "it",
        "cassandra",
        "CassandraResourceManagerUtils",
        "generateKeyspaceName",
        "com",
        "datastax",
        "oss",
        "driver",
        "api",
        "core",
        "CqlSession",
        "com",
        "datastax",
        "oss",
        "driver",
        "api",
        "core",
        "DriverTimeoutException",
        "com",
        "datastax",
        "oss",
        "driver",
        "api",
        "core",
        "cql",
        "ResultSet",
        "com",
        "datastax",
        "oss",
        "driver",
        "api",
        "core",
        "cql",
        "Row",
        "com",
        "datastax",
        "oss",
        "driver",
        "api",
        "core",
        "cql",
        "SimpleStatement",
        "com",
        "google",
        "common",
        "annotations",
        "VisibleForTesting",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableList",
        "dev",
        "failsafe",
        "Failsafe",
        "dev",
        "failsafe",
        "RetryPolicy",
        "java",
        "net",
        "InetSocketAddress",
        "java",
        "time",
        "Duration",
        "java",
        "util",
        "java",
        "util",
        "javax",
        "annotation",
        "org",
        "apache",
        "beam",
        "it",
        "common",
        "ResourceManager",
        "org",
        "apache",
        "beam",
        "it",
        "testcontainers",
        "TestContainerResourceManager",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "org",
        "testcontainers",
        "containers",
        "CassandraContainer",
        "org",
        "testcontainers",
        "containers",
        "GenericContainer",
        "org",
        "testcontainers",
        "utility",
        "DockerImageName",
        "LOG",
        "LoggerFactory",
        "getLogger",
        "DEFAULT_CASSANDRA_CONTAINER_NAME",
        "DEFAULT_CASSANDRA_CONTAINER_TAG",
        "CASSANDRA_INTERNAL_PORT",
        "cassandraClient",
        "keyspaceName",
        "usingStaticDatabase",
        "builder",
        "DockerImageName",
        "parse",
        "builder",
        "containerImageName",
        "withTag",
        "builder",
        "containerImageTag",
        "builder",
        "VisibleForTesting",
        "SuppressWarnings",
        "cassandraClient",
        "container",
        "builder",
        "container",
        "builder",
        "usingStaticDatabase",
        "builder",
        "keyspaceName",
        "keyspaceName",
        "usingStaticDatabase",
        "builder",
        "keyspaceName",
        "generateKeyspaceName",
        "builder",
        "testId",
        "cassandraClient",
        "cassandraClient",
        "CqlSession",
        "builder",
        "addContactPoint",
        "getHost",
        "getPort",
        "CASSANDRA_INTERNAL_PORT",
        "withLocalDatacenter",
        "build",
        "cassandraClient",
        "usingStaticDatabase",
        "Failsafe",
        "RetryPolicy",
        "builder",
        "withMaxRetries",
        "withDelay",
        "Duration",
        "ofSeconds",
        "handle",
        "build",
        "run",
        "cassandraClient",
        "execute",
        "format",
        "keyspaceName",
        "testId",
        "testId",
        "getPort",
        "CASSANDRA_INTERNAL_PORT",
        "keyspaceName",
        "statement",
        "LOG",
        "info",
        "statement",
        "cassandraClient",
        "execute",
        "SimpleStatement",
        "newInstance",
        "statement",
        "setKeyspace",
        "keyspaceName",
        "e",
        "e",
        "tableName",
        "insertDocuments",
        "tableName",
        "ImmutableList",
        "of",
        "tableName",
        "documents",
        "LOG",
        "info",
        "documents",
        "size",
        "keyspaceName",
        "tableName",
        "documents",
        "executeStatement",
        "createInsertStatement",
        "tableName",
        "e",
        "e",
        "LOG",
        "info",
        "documents",
        "size",
        "keyspaceName",
        "tableName",
        "tableName",
        "LOG",
        "info",
        "keyspaceName",
        "tableName",
        "documents",
        "resultSet",
        "executeStatement",
        "format",
        "tableName",
        "documents",
        "resultSet",
        "all",
        "e",
        "e",
        "LOG",
        "info",
        "keyspaceName",
        "tableName",
        "documents",
        "Override",
        "LOG",
        "info",
        "producedError",
        "usingStaticDatabase",
        "executeStatement",
        "format",
        "keyspaceName",
        "e",
        "LOG",
        "error",
        "keyspaceName",
        "e",
        "e",
        "getCause",
        "e",
        "getCause",
        "producedError",
        "cassandraClient",
        "close",
        "e",
        "LOG",
        "error",
        "e",
        "producedError",
        "producedError",
        "cleanupAll",
        "LOG",
        "info",
        "tableName",
        "columns",
        "values",
        "entry",
        "entrySet",
        "columns",
        "append",
        "entry",
        "getKey",
        "append",
        "entry",
        "getValue",
        "values",
        "append",
        "append",
        "entry",
        "getValue",
        "append",
        "values",
        "append",
        "entry",
        "getValue",
        "values",
        "append",
        "isEmpty",
        "columns",
        "columns",
        "length",
        "columns",
        "length",
        "values",
        "values",
        "length",
        "values",
        "length",
        "format",
        "tableName",
        "columns",
        "values",
        "keyspaceName",
        "testId",
        "testId",
        "DEFAULT_CASSANDRA_CONTAINER_NAME",
        "DEFAULT_CASSANDRA_CONTAINER_TAG",
        "keyspaceName",
        "keyspaceName",
        "keyspaceName",
        "keyspaceName",
        "Override"
    ],
    "literals": [
        "\"cassandra\"",
        "\"4.1.0\"",
        "\"nullness\"",
        "\"datacenter1\"",
        "\"CREATE KEYSPACE IF NOT EXISTS %s WITH replication = {'class':'SimpleStrategy', 'replication_factor':1}\"",
        "\"Executing statement: {}\"",
        "\"Error reading collection.\"",
        "\"Attempting to write {} documents to {}.{}.\"",
        "\"Error inserting documents.\"",
        "\"Successfully wrote {} documents to {}.{}\"",
        "\"Reading all documents from {}.{}\"",
        "\"SELECT * FROM %s\"",
        "\"Error reading table.\"",
        "\"Successfully loaded documents from {}.{}\"",
        "\"Attempting to cleanup Cassandra manager.\"",
        "\"DROP KEYSPACE IF EXISTS %s\"",
        "\"Failed to drop Cassandra keyspace {}.\"",
        "\"Failed to delete Cassandra client.\"",
        "\"Failed to delete resources. Check above for errors.\"",
        "\"Cassandra manager successfully cleaned up.\"",
        "\", \"",
        "\"'\"",
        "\"'\"",
        "\", \"",
        "\"INSERT INTO %s (%s) VALUES (%s)\""
    ],
    "variables": [
        "cassandraClient",
        "keyspaceName",
        "usingStaticDatabase",
        "documents",
        "keyspaceName"
    ],
    "comments": [
        "A list of available Cassandra Docker image tags can be found at",
        "https://hub.docker.com/_/cassandra/tags",
        "9042 is the default port that Cassandra is configured to listen on",
        "Keyspace request may timeout on a few environments, if Cassandra is warming up",
        "First, delete the database if it was not given as a static argument",
        "Only bubble exception if the cause is not timeout, as it will be dropped with container.",
        "Next, try to close the Cassandra client connection",
        "Throw Exception at the end if there were any errors",
        "add quotes around strings",
        "Remove trailing comma and space"
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Client for managing Cassandra resources.\n *\n * <p>The class supports one database and multiple collections per database object. A database is\n * created when the first collection is created if one has not been created already.\n *\n * <p>The database name is formed using testId. The database name will be \"{testId}-{ISO8601 time,\n * microsecond precision}\", with additional formatting.\n *\n * <p>The class is thread-safe.",
        "cassandraClient=",
        "Returns the port to connect to the Cassandra Database.",
        "* Returns the name of the Database that this Cassandra manager will operate in.\n   *\n   * @return the name of the Cassandra Database.",
        "* Execute the given statement on the managed keyspace.\n   *\n   * @param statement The statement to execute.\n   * @return ResultSet from Cassandra.",
        "* Inserts the given Document into a table.\n   *\n   * <p>A database will be created here, if one does not already exist.\n   *\n   * @param tableName The name of the table to insert the document into.\n   * @param document The document to insert into the table.\n   * @return A boolean indicating whether the Document was inserted successfully.",
        "* Inserts the given Documents into a collection.\n   *\n   * <p>Note: Implementations may do collection creation here, if one does not already exist.\n   *\n   * @param tableName The name of the collection to insert the documents into.\n   * @param documents A list of documents to insert into the collection.\n   * @return A boolean indicating whether the Documents were inserted successfully.\n   * @throws CassandraResourceManagerException if there is an error inserting the documents.",
        "* Reads all the Documents in a collection.\n   *\n   * @param tableName The name of the collection to read from.\n   * @return An iterable of all the Documents in the collection.\n   * @throws CassandraResourceManagerException if there is an error reading the collection.",
        "Builder for {@link CassandraResourceManager}.",
        "* Sets the keyspace name to that of a static database instance. Use this method only when\n     * attempting to operate on a pre-existing Cassandra database.\n     *\n     * <p>Note: if a database name is set, and a static Cassandra server is being used\n     * (useStaticContainer() is also called on the builder), then a database will be created on the\n     * static server if it does not exist, and it will not be removed when cleanupAll() is called on\n     * the CassandraResourceManager.\n     *\n     * @param keyspaceName The database name.\n     * @return this builder object with the database name set."
    ],
    "functions": [
        "CassandraResourceManager",
        "CassandraResourceManager",
        "Builder",
        "builder",
        "getPort",
        "getKeyspaceName",
        "ResultSet",
        "executeStatement",
        "insertDocument",
        "insertDocuments",
        "readTable",
        "cleanupAll",
        "createInsertStatement",
        "Builder",
        "Builder",
        "setKeyspaceName",
        "CassandraResourceManager",
        "build"
    ],
    "classes": [
        "CassandraResourceManager",
        "Builder"
    ]
}