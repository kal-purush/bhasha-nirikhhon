{
    "identifiers": [
        "RosettyReturn",
        "defaultErrorMap",
        "ZodErrorMap",
        "ZodIssueCode",
        "ZodParsedType",
        "jsonStringifyReplacer",
        "_",
        "value",
        "value",
        "value",
        "value",
        "array",
        "separator",
        "array",
        "val",
        "val",
        "val",
        "val",
        "separator",
        "zodRosettyMap",
        "issue",
        "ctx",
        "message",
        "defaultErrorMap",
        "issue",
        "ctx",
        "issue",
        "ZodIssueCode",
        "issue",
        "ZodParsedType",
        "message",
        "message",
        "issue",
        "issue",
        "ZodIssueCode",
        "message",
        "issue",
        "jsonStringifyReplacer",
        "ZodIssueCode",
        "message",
        "joinValues",
        "issue",
        "issue",
        "ZodIssueCode",
        "message",
        "ZodIssueCode",
        "message",
        "joinValues",
        "issue",
        "ZodIssueCode",
        "message",
        "joinValues",
        "issue",
        "issue",
        "ZodIssueCode",
        "message",
        "ZodIssueCode",
        "message",
        "ZodIssueCode",
        "message",
        "ZodIssueCode",
        "issue",
        "issue",
        "message",
        "issue",
        "issue",
        "message",
        "issue",
        "message",
        "issue",
        "issue",
        "ZodIssueCode",
        "issue",
        "issue",
        "issue",
        "message",
        "issue",
        "issue",
        "issue",
        "minimum",
        "minimum",
        "ZodIssueCode",
        "issue",
        "issue",
        "issue",
        "message",
        "issue",
        "issue",
        "issue",
        "maximum",
        "maximum",
        "ZodIssueCode",
        "message",
        "ZodIssueCode",
        "message",
        "ZodIssueCode",
        "message",
        "issue",
        "ZodIssueCode",
        "message",
        "translateZodErrorMessage",
        "error",
        "t",
        "error",
        "t",
        "error",
        "error",
        "error",
        "error",
        "message",
        "i",
        "i",
        "valuesString",
        "t",
        "key",
        "valuesString",
        "values",
        "v",
        "v",
        "v",
        "i",
        "i",
        "values",
        "k",
        "t",
        "key",
        "valuesString",
        "valuesString",
        "t",
        "key",
        "values"
    ],
    "literals": [
        "'rosetty'",
        "'zod'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'bigint'",
        "' | '",
        "string",
        "'string'",
        "'${val}'",
        "string",
        "zod.errors.invalid_type_received_undefined",
        "zod.errors.invalid_type - ${JSON.stringify({\n          expected: `zod.types.${issue.expected}`,\n          received: `zod.types.${issue.received}`,\n        })}",
        "zod.types.${issue.expected}",
        "zod.types.${issue.received}",
        "zod.errors.invalid_literal - ${JSON.stringify({\n        expected: JSON.stringify(issue.expected, jsonStringifyReplacer),\n      })}",
        "zod.errors.unrecognized_keys - ${JSON.stringify({\n        keys: joinValues(issue.keys, ', '),\n        count: issue.keys.length,\n      })}",
        "', '",
        "'zod.errors.invalid_union'",
        "zod.errors.invalid_union_discriminator - ${JSON.stringify({\n        options: joinValues(issue.options),\n      })}",
        "zod.errors.invalid_enum_value - ${JSON.stringify({\n        options: joinValues(issue.options),\n        received: issue.received,\n      })}",
        "'zod.errors.invalid_arguments'",
        "'zod.errors.invalid_return_type'",
        "'zod.errors.invalid_date'",
        "'object'",
        "'startsWith'",
        "zod.errors.invalid_string.startsWith - ${JSON.stringify({\n            startsWith: issue.validation.startsWith,\n          })}",
        "'endsWith'",
        "zod.errors.invalid_string.endsWith - ${JSON.stringify({\n            endsWith: issue.validation.endsWith,\n          })}",
        "zod.errors.invalid_string.${\n          issue.validation\n        } - ${JSON.stringify({\n          validation: `zod.validations.${issue.validation}`,\n        })}",
        "zod.validations.${issue.validation}",
        "'date'",
        "zod.errors.too_small.${issue.type}.${\n        issue.exact ? 'exact' : issue.inclusive ? 'inclusive' : 'not_inclusive'\n      } - ${JSON.stringify({\n        minimum,\n        count: typeof minimum === 'number' ? minimum : undefined,\n      })}",
        "'exact'",
        "'inclusive'",
        "'not_inclusive'",
        "'number'",
        "'date'",
        "zod.errors.too_big.${issue.type}.${\n        issue.exact ? 'exact' : issue.inclusive ? 'inclusive' : 'not_inclusive'\n      } - ${JSON.stringify({\n        maximum,\n        count: typeof maximum === 'number' ? maximum : undefined,\n      })}",
        "'exact'",
        "'inclusive'",
        "'not_inclusive'",
        "'number'",
        "'errors.custom'",
        "'zod.errors.invalid_intersection_types'",
        "zod.errors.not_multiple_of - ${JSON.stringify({\n        multipleOf: issue.multipleOf,\n      })}",
        "'zod.errors.not_finite'",
        "string",
        "'t'",
        "'string'",
        "'['",
        "'-'",
        "string",
        "'string'",
        "'zod.'",
        "'-'"
    ],
    "variables": [
        "jsonStringifyReplacer",
        "zodRosettyMap",
        "message",
        "minimum",
        "maximum",
        "translateZodErrorMessage",
        "message",
        "key",
        "valuesString",
        "values",
        "k",
        "v",
        "key",
        "valuesString"
    ],
    "comments": [
        "eslint-disable-next-line no-case-declarations",
        "eslint-disable-next-line no-case-declarations",
        "@ts-ignore",
        "@ts-ignore",
        "@ts-ignore",
        "@ts-ignore"
    ],
    "docstrings": [],
    "functions": [
        "joinValues"
    ],
    "classes": []
}