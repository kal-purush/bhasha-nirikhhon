{
    "identifiers": [
        "ghidra",
        "framework",
        "project",
        "extensions",
        "java",
        "io",
        "File",
        "generic",
        "json",
        "Json",
        "ghidra",
        "framework",
        "Application",
        "ghidra",
        "util",
        "Msg",
        "utilities",
        "util",
        "FileUtilities",
        "utility",
        "application",
        "ApplicationLayout",
        "utility",
        "ModuleUtilities",
        "installDir",
        "archivePath",
        "name",
        "description",
        "createdOn",
        "author",
        "version",
        "name",
        "description",
        "author",
        "createdOn",
        "version",
        "name",
        "name",
        "description",
        "description",
        "author",
        "author",
        "createdOn",
        "createdOn",
        "version",
        "version",
        "Override",
        "prime",
        "result",
        "result",
        "prime",
        "result",
        "name",
        "name",
        "hashCode",
        "result",
        "Override",
        "obj",
        "obj",
        "obj",
        "getClass",
        "obj",
        "getClass",
        "other",
        "obj",
        "name",
        "other",
        "name",
        "name",
        "equals",
        "other",
        "name",
        "installDir",
        "installDir",
        "getAbsolutePath",
        "installDir",
        "installDir",
        "installDir",
        "installDir",
        "archivePath",
        "path",
        "archivePath",
        "path",
        "archivePath",
        "name",
        "name",
        "name",
        "name",
        "description",
        "description",
        "description",
        "description",
        "author",
        "author",
        "author",
        "author",
        "createdOn",
        "date",
        "createdOn",
        "date",
        "version",
        "version",
        "version",
        "version",
        "installDir",
        "Application",
        "inSingleJarMode",
        "f",
        "installDir",
        "ModuleUtilities",
        "MANIFEST_FILE_NAME",
        "f",
        "exists",
        "installDir",
        "Application",
        "inSingleJarMode",
        "f",
        "installDir",
        "ModuleUtilities",
        "MANIFEST_FILE_NAME_UNINSTALLED",
        "f",
        "exists",
        "installDir",
        "layout",
        "Application",
        "getApplicationLayout",
        "appInstallDir",
        "layout",
        "getApplicationInstallationDir",
        "getFile",
        "FileUtilities",
        "isPathContainedWithin",
        "appInstallDir",
        "installDir",
        "installDir",
        "Msg",
        "trace",
        "installDir",
        "success",
        "manifest",
        "installDir",
        "ModuleUtilities",
        "MANIFEST_FILE_NAME",
        "manifest",
        "exists",
        "newFile",
        "installDir",
        "ModuleUtilities",
        "MANIFEST_FILE_NAME_UNINSTALLED",
        "manifest",
        "renameTo",
        "newFile",
        "Msg",
        "trace",
        "manifest",
        "success",
        "Msg",
        "trace",
        "name",
        "properties",
        "installDir",
        "ExtensionUtils",
        "PROPERTIES_FILE_NAME",
        "properties",
        "exists",
        "newFile",
        "installDir",
        "ExtensionUtils",
        "PROPERTIES_FILE_NAME_UNINSTALLED",
        "properties",
        "renameTo",
        "newFile",
        "Msg",
        "trace",
        "properties",
        "success",
        "Msg",
        "trace",
        "name",
        "success",
        "installDir",
        "Msg",
        "error",
        "name",
        "Msg",
        "trace",
        "installDir",
        "success",
        "manifest",
        "installDir",
        "ModuleUtilities",
        "MANIFEST_FILE_NAME_UNINSTALLED",
        "manifest",
        "exists",
        "newFile",
        "installDir",
        "ModuleUtilities",
        "MANIFEST_FILE_NAME",
        "manifest",
        "renameTo",
        "newFile",
        "Msg",
        "trace",
        "manifest",
        "success",
        "Msg",
        "trace",
        "name",
        "properties",
        "installDir",
        "ExtensionUtils",
        "PROPERTIES_FILE_NAME_UNINSTALLED",
        "properties",
        "exists",
        "newFile",
        "installDir",
        "ExtensionUtils",
        "PROPERTIES_FILE_NAME",
        "properties",
        "renameTo",
        "newFile",
        "Msg",
        "trace",
        "properties",
        "success",
        "Msg",
        "trace",
        "name",
        "success",
        "Override",
        "other",
        "name",
        "compareTo",
        "other",
        "name",
        "Override",
        "Json",
        "toString"
    ],
    "literals": [
        "\"Marking extension for uninstall '\"",
        "\"'\"",
        "\"Unable to rename module manifest file: \"",
        "\"No manifest file found for extension '\"",
        "\"'\"",
        "\"Unable to rename properties file: \"",
        "\"No properties file found for extension '\"",
        "\"'\"",
        "\"Cannot restore extension; extension installation dir is missing for: \"",
        "\"Restoring extension state files for '\"",
        "\"'\"",
        "\"Unable to rename module manifest file: \"",
        "\"No manifest file found for extension '\"",
        "\"'\"",
        "\"Unable to rename properties file: \"",
        "\"No properties file found for extension '\"",
        "\"'\""
    ],
    "variables": [
        "installDir",
        "archivePath",
        "name",
        "description",
        "createdOn",
        "author",
        "version"
    ],
    "comments": [
        "If running out of a jar and the install path is valid, just return true. The alternative",
        "would be to inspect the jar and verify that the install path is there and is valid, but",
        "that's overkill.",
        "can't uninstall from single jar mode",
        "not installed",
        "already marked as uninstalled",
        "already marked as uninstalled"
    ],
    "docstrings": [
        "###\n * IP: GHIDRA\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Representation of a Ghidra extension. This class encapsulates all information required to\n * uniquely identify an extension and where (or if) it has been installed.\n * <p>\n * Note that hashCode and equals have been implemented for this. Two extension\n * descriptions are considered equal if they have the same {@link #name} attribute; all other\n * fields are unimportant except for display purposes.",
        "Absolute path to where this extension is installed. If not installed, this will be null.",
        "* Absolute path to where the original source archive (zip) for this extension can be found. If\n\t * there is no archive (likely because this is an extension that comes pre-installed with\n\t * Ghidra, or Ghidra is being run in development mode), this will be null.",
        "Name of the extension. This must be unique.",
        "Brief description, for display purposes only.",
        "Date when the extension was created, for display purposes only.",
        "Author of the extension, for display purposes only.",
        "The extension version",
        "* Constructor.\n\t * \n\t * @param name unique name of the extension; cannot be null\n\t * @param description brief explanation of what the extension does; can be null\n\t * @param author creator of the extension; can be null\n\t * @param createdOn creation date of the extension, can be null\n\t * @param version the extension version",
        "* Returns the location where this extension is installed. If the extension is not installed \n\t * this will be null.\n\t * \n\t * @return the extension path, or null",
        "* Returns the location where the extension archive is located.  The extension archive concept\n\t * is not used for all extensions, but is used for delivering extensions as part of a \n\t * distribution.\n\t * \n\t * @return the archive path, or null\n\t * @see ApplicationLayout#getExtensionArchiveDir()",
        "* An extension is known to be installed if it has a valid installation path AND that path\n\t * contains a Module.manifest file.   Extensions that are {@link #isPendingUninstall()} are \n\t * still on the filesystem, may be in use by the tool, but will be removed upon restart.\n\t * <p>\n\t * Note: The module manifest file is a marker that indicates several things; one of which is\n\t * the installation status of an extension. When a user marks an extension to be uninstalled (by\n\t * checking the appropriate checkbox in the {@link ExtensionTableModel}), the only thing\n\t * that is done is to remove this manifest file, which tells the {@link ExtensionTableProvider}\n\t * to remove the entire extension directory on the next launch.\n\t * \n\t * @return true if the extension is installed.",
        "* Returns true if this extension is marked to be uninstalled.  The contents of the extension\n\t * still exist and the tool may still be using the extension, but on restart, the extension will\n\t * be removed.\n\t * \n\t * @return true if marked for uninstall",
        "* Returns true if this extension is installed under an installation folder or inside of a \n\t * source control repository folder.\n\t * @return true if this extension is installed under an installation folder or inside of a \n\t * source control repository folder.",
        "* Converts the module manifest and extension properties file that are in an installed state to \n\t * an uninstalled state.\n\t * \n\t * Specifically, the following will be renamed:\n\t * <UL>\n\t * <LI>Module.manifest to Module.manifest.uninstalled</LI>\n\t * <LI>extension.properties = extension.properties.uninstalled</LI>\n\t * </UL>\n\t * \n\t * @return false if any renames fail",
        "* A companion method for {@link #markForUninstall()} that allows extensions marked for cleanup \n\t * to be restored to the installed state.\n\t * <p>\n\t * Specifically, the following will be renamed:\n\t * <UL>\n\t * <LI>Module.manifest.uninstalled to Module.manifest</LI>\n\t * <LI>extension.properties.uninstalled to extension.properties</LI>\n\t * </UL>\n\t * @return true if successful"
    ],
    "functions": [
        "ExtensionDetails",
        "hashCode",
        "equals",
        "getInstallPath",
        "File",
        "getInstallDir",
        "setInstallDir",
        "getArchivePath",
        "setArchivePath",
        "isFromArchive",
        "getName",
        "setName",
        "getDescription",
        "setDescription",
        "getAuthor",
        "setAuthor",
        "getCreatedOn",
        "setCreatedOn",
        "getVersion",
        "setVersion",
        "isInstalled",
        "isPendingUninstall",
        "isInstalledInInstallationFolder",
        "markForUninstall",
        "clearMarkForUninstall",
        "compareTo",
        "toString"
    ],
    "classes": [
        "ExtensionDetails"
    ]
}