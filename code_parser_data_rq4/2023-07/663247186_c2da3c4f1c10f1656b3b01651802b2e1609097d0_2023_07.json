{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Text",
        "Threading",
        "Tasks",
        "Calculadora_Basica",
        "args",
        "Title",
        "WriteLine",
        "WriteLine",
        "valorDigitado",
        "ReadLine",
        "numero_inteiro",
        "TryParse",
        "valorDigitado",
        "numero",
        "numero_inteiro",
        "valor1",
        "Round",
        "Parse",
        "valorDigitado",
        "WriteLine",
        "WriteLine",
        "operador",
        "ReadLine",
        "WriteLine",
        "valorDigitado",
        "ReadLine",
        "numero_inteiro",
        "TryParse",
        "valorDigitado",
        "numero",
        "numero_inteiro",
        "valor2",
        "Round",
        "Parse",
        "valorDigitado",
        "WriteLine",
        "operador",
        "resultado",
        "Round",
        "valor1",
        "valor2",
        "WriteLine",
        "valor1",
        "valor2",
        "resultado",
        "resultado",
        "Round",
        "valor1",
        "valor2",
        "WriteLine",
        "valor1",
        "valor2",
        "resultado",
        "resultado",
        "Round",
        "valor1",
        "valor2",
        "WriteLine",
        "valor1",
        "valor2",
        "resultado",
        "resultado",
        "Round",
        "valor1",
        "valor2",
        "WriteLine",
        "valor1",
        "valor2",
        "resultado",
        "resultado",
        "Round",
        "valor1",
        "valor2",
        "WriteLine",
        "valor1",
        "valor2",
        "resultado",
        "WriteLine",
        "ReadKey"
    ],
    "literals": [
        "\"Calculadora\"",
        "\"--------------------Calculadora--------------------\"",
        "\"Digite o primeiro valor: \"",
        "\"Digite um número válido.\"",
        "\"Digite a operação matemática desejada: ( /= divisão , * = multiplicação, + = soma, - = subtração e % = MOD resto ): \"",
        "\"Digite o segundo valor: \"",
        "\"Digite um número válido\"",
        "\"+\"",
        "\"-\"",
        "\"*\"",
        "\"/\"",
        "\"%\"",
        "\"Digite uma operação válida\""
    ],
    "variables": [
        "valor1",
        "valor2",
        "resultado",
        "numero",
        "operador",
        "valorDigitado",
        "numero_inteiro"
    ],
    "comments": [
        "cria um titulo para o projeto",
        "o que vai aparecer na tela do programa",
        "usando double para ter mais precisão nas casas depois da virgula (64 bits), atribuindo 0 aos valores",
        "Explicando o projeto e a lógica que vamos aplicar:\n             * PRIMEIRA ETAPA\n             Primeiro precisaremos que o usuário digite o primeiro valor,\n             Precisaremos validar os números e exibir uma mensagem caso o número não seja válido,\n             Depois precisamos pedir para o usuário digitar um operador matemático ( / | + | * | - | %(MOD) ),\n             Agora pedimos para o usuário digitar o segundo valor,\n             E aí efetuar uma operação matemática com base nos valores e operador informado pelo usuário, retornar este cálculo para o usuário.",
        "Essa linha vai verificar se é um número inteiro, se for igual a variavel numero_inteiro será 1 ou true, se não 0 ou false, \n             * também precisaremos fazer a conversão, poderia usar o Parse mas nesse caso usei o TryParse pois, \n             * ele não lança uma exceção se a conversão falhar.",
        "Começamos nossa condicional para fazer a validação,",
        "tendo essa validação vamos precisar armazenar o valor1 apenas se for true",
        "Para armazenar vamos usar o método Round da classe Math, aquele que arredonda os valores\n                 * então o número 3 alí significa que vou considerar apenas 3 casas apos a vírgula, lembrando que o valor digitado em string\n                 * já esta sendo convertido para double.",
        "SEGUNDA ETAPA",
        "É a repetição da primeira etapa com a diferença de que vamos armazenar o segundo valor digitado na variavél valor2\n             a validação e a estrutura de decição permanece a mesma",
        "TERCEIRA ETAPA",
        "Para que consigamos usar os operadores vamos precisar o tipo de operador através de uma switch case\n             assim, poderemos criar uma estrutura de decisão e aplicar o operador escolhido.\n             Para escrevermos o resultado do cálculo precisamos fazer a concatenação de string e variáveis. \n             Utilizando o auxiliar $, que é declarado antes da aspas da nossa string, \n             sendo assim qualquer variável que eu queira exibir na minha string basta eu informa-la dentro das chave {minhaVariavel}."
    ],
    "docstrings": [],
    "functions": [
        "Main"
    ],
    "classes": [
        "Program"
    ]
}