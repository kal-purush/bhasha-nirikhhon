{
    "identifiers": [
        "sys",
        "os",
        "sys",
        "builtin_module_names",
        "sys",
        "modules",
        "is_pypy",
        "sys",
        "version_info",
        "warnings",
        "warnings",
        "warn",
        "sys",
        "modules",
        "warnings",
        "warnings",
        "warn",
        "name",
        "name",
        "sys",
        "modules",
        "name",
        "name",
        "startswith",
        "name",
        "mods",
        "sys",
        "modules",
        "name",
        "os",
        "environ",
        "get",
        "which",
        "importlib",
        "clear_distutils",
        "shim",
        "importlib",
        "import_module",
        "importlib",
        "import_module",
        "core",
        "core",
        "sys",
        "modules",
        "enabled",
        "warn_distutils_present",
        "ensure_local_distutils",
        "patterns",
        "patterns",
        "all",
        "pat",
        "pat",
        "_patterns",
        "fullname",
        "path",
        "target",
        "path",
        "fullname",
        "startswith",
        "format",
        "locals",
        "getattr",
        "method_name",
        "method",
        "is_cpython",
        "importlib",
        "importlib",
        "abc",
        "importlib",
        "util",
        "importlib",
        "import_module",
        "importlib",
        "abc",
        "Loader",
        "spec",
        "mod",
        "importlib",
        "util",
        "spec_from_loader",
        "DistutilsLoader",
        "origin",
        "mod",
        "staticmethod",
        "os",
        "path",
        "isfile",
        "pip_imported_during_build",
        "clear_distutils",
        "classmethod",
        "cls",
        "traceback",
        "cls",
        "frame_file_is_setup",
        "frame",
        "frame",
        "line",
        "traceback",
        "walk_stack",
        "staticmethod",
        "frame",
        "frame",
        "f_globals",
        "get",
        "endswith",
        "clear_distutils",
        "sys",
        "version_info",
        "name",
        "DistutilsMetaFinder",
        "sensitive_tests",
        "setattr",
        "DistutilsMetaFinder",
        "name",
        "DistutilsMetaFinder",
        "spec_for_sensitive_tests",
        "DistutilsMetaFinder",
        "DISTUTILS_FINDER",
        "sys",
        "meta_path",
        "insert_shim",
        "insert_shim",
        "exc",
        "value",
        "tb",
        "remove_shim",
        "sys",
        "meta_path",
        "insert",
        "DISTUTILS_FINDER",
        "sys",
        "meta_path",
        "remove",
        "DISTUTILS_FINDER",
        "ValueError"
    ],
    "literals": [
        "'__pypy__'",
        "'distutils'",
        "\"Distutils was imported before Setuptools, but importing Setuptools \"",
        "\"also replaces the `distutils` module in `sys.modules`. This may lead \"",
        "\"to undesirable behaviors or errors. To avoid these issues, avoid \"",
        "\"using distutils directly, ensure that setuptools is installed in the \"",
        "\"traditional way (e.g. not an editable install), and/or make sure \"",
        "\"that setuptools is always imported before distutils.\"",
        "'distutils'",
        "\"Setuptools is replacing distutils.\"",
        "\"distutils\"",
        "\"distutils.\"",
        "'SETUPTOOLS_USE_DISTUTILS'",
        "'local'",
        "'local'",
        "'distutils'",
        "'distutils.core'",
        "'_distutils'",
        "'setuptools._distutils.log'",
        "'test.'",
        "'spec_for_{fullname}'",
        "'setuptools._distutils'",
        "'distutils'",
        "'distutils'",
        "'pybuilddir.txt'",
        "'__file__'",
        "''",
        "'setup.py'",
        "'test.test_distutils'",
        "'test.test_peg_generator'",
        "'test.test_importlib'",
        "'test.test_distutils'",
        "f'spec_for_{name}'"
    ],
    "variables": [
        "is_pypy",
        "mods",
        "which",
        "core",
        "_patterns",
        "method_name",
        "method",
        "mod",
        "mod",
        "spec_for_distutils",
        "spec_for_distutils",
        "sensitive_tests",
        "DISTUTILS_FINDER"
    ],
    "comments": [
        "don't import any costly modules",
        "PyPy for 3.6 unconditionally imports distutils, so bypass the warning",
        "https://foss.heptapod.net/pypy/pypy/-/blob/be829135bc0d758997b3566062999ee8b23872b4/lib-python/3/site.py#L250",
        "With the DistutilsMetaFinder in place,",
        "perform an import to cause distutils to be",
        "loaded from setuptools._distutils. Ref #2906.",
        "check that submodules load as expected",
        "optimization: only consider top level modules and those",
        "found in the CPython test suite.",
        "There are a couple of cases where setuptools._distutils",
        "may not be present:",
        "- An older Setuptools without a local distutils is",
        "taking precedence. Ref #2957.",
        "- Path manipulation during sitecustomize removes",
        "setuptools from the path but only after the hook",
        "has been loaded. Ref #2980.",
        "In either case, fall back to stdlib behavior.",
        "some frames may not have __file__ (#2940)"
    ],
    "docstrings": [
        "\"\"\"\n    Allow selection of distutils by environment variable.\n    \"\"\"",
        "\"\"\"\n    Ensure that the local copy of distutils is preferred over stdlib.\n\n    See https://github.com/pypa/setuptools/issues/417#issuecomment-392298401\n    for more motivation.\n    \"\"\"",
        "\"\"\"\n        Suppress supplying distutils for CPython (build and tests).\n        Ref #2965 and #3007.\n        \"\"\"",
        "\"\"\"\n        Ensure stdlib distutils when running under pip.\n        See pypa/pip#8761 for rationale.\n        \"\"\"",
        "\"\"\"\n        Detect if pip is being imported in a build script. Ref #2355.\n        \"\"\"",
        "\"\"\"\n        Return True if the indicated frame suggests a setup.py file.\n        \"\"\"",
        "\"\"\"\n        Ensure stdlib distutils when running select tests under CPython.\n\n        python/cpython#91169\n        \"\"\""
    ],
    "functions": [
        "warn_distutils_present",
        "clear_distutils",
        "enabled",
        "ensure_local_distutils",
        "do_override",
        "match",
        "find_spec",
        "spec_for_distutils",
        "create_module",
        "exec_module",
        "is_cpython",
        "spec_for_pip",
        "pip_imported_during_build",
        "frame_file_is_setup",
        "spec_for_sensitive_tests",
        "add_shim",
        "__enter__",
        "__exit__",
        "insert_shim",
        "remove_shim"
    ],
    "classes": [
        "_TrivialRe",
        "DistutilsMetaFinder",
        "DistutilsLoader",
        "shim"
    ]
}