{
    "identifiers": [
        "SIL",
        "PlatformUtilities",
        "Collections",
        "Generic",
        "Diagnostics",
        "Runtime",
        "InteropServices",
        "Text",
        "Bloom",
        "ToPalaso",
        "DllImport",
        "CharSet",
        "CharSet",
        "Unicode",
        "IntPtr",
        "hWnd",
        "StringBuilder",
        "strText",
        "maxCount",
        "DllImport",
        "CharSet",
        "CharSet",
        "Unicode",
        "IntPtr",
        "hWnd",
        "DllImport",
        "EnumWindowsProc",
        "enumProc",
        "IntPtr",
        "lParam",
        "DllImport",
        "IntPtr",
        "hWnd",
        "urlOrCmd",
        "Debug",
        "WriteLine",
        "urlOrCmd",
        "Platform",
        "IsLinux",
        "libpath",
        "Environment",
        "GetEnvironmentVariable",
        "IsNullOrEmpty",
        "libpath",
        "Environment",
        "SetEnvironmentVariable",
        "Process",
        "GetProcesses",
        "Process",
        "Start",
        "urlOrCmd",
        "Platform",
        "IsLinux",
        "IsNullOrEmpty",
        "libpath",
        "Environment",
        "SetEnvironmentVariable",
        "libpath",
        "BringDesiredWindowToFront",
        "urlOrCmd",
        "processList",
        "command",
        "arguments",
        "Debug",
        "WriteLine",
        "command",
        "arguments",
        "Platform",
        "IsLinux",
        "libpath",
        "Environment",
        "GetEnvironmentVariable",
        "IsNullOrEmpty",
        "libpath",
        "Environment",
        "SetEnvironmentVariable",
        "Process",
        "GetProcesses",
        "Process",
        "Start",
        "command",
        "arguments",
        "Platform",
        "IsLinux",
        "IsNullOrEmpty",
        "libpath",
        "Environment",
        "SetEnvironmentVariable",
        "libpath",
        "BringDesiredWindowToFront",
        "processList",
        "ProcessStartInfo",
        "startInfo",
        "Process",
        "GetProcesses",
        "Process",
        "Start",
        "startInfo",
        "BringDesiredWindowToFront",
        "processList",
        "windowTitleToMatch",
        "Process",
        "oldProcesses",
        "SIL",
        "PlatformUtilities",
        "Platform",
        "IsLinux",
        "Timers",
        "Timer",
        "timer",
        "Start",
        "timer",
        "Elapsed",
        "sender",
        "e",
        "timer",
        "Stop",
        "Process",
        "GetProcesses",
        "FindNewOrRetitledProcess",
        "oldProcesses",
        "newProcesses",
        "process",
        "Debug",
        "WriteLine",
        "windowTitleToMatch",
        "count",
        "process",
        "MainWindowTitle",
        "process",
        "ProcessName",
        "SetForegroundWindow",
        "process",
        "MainWindowHandle",
        "timer",
        "Dispose",
        "IsNullOrEmpty",
        "windowTitleToMatch",
        "FindWindowsWithText",
        "windowTitleToMatch",
        "windows",
        "Count",
        "Debug",
        "WriteLine",
        "windowTitleToMatch",
        "windows",
        "Count",
        "count",
        "SetForegroundWindow",
        "windows",
        "timer",
        "Dispose",
        "count",
        "Debug",
        "WriteLine",
        "windowTitleToMatch",
        "proc",
        "newProcesses",
        "Debug",
        "WriteLine",
        "proc",
        "ProcessName",
        "proc",
        "MainWindowTitle",
        "timer",
        "Dispose",
        "timer",
        "Interval",
        "timer",
        "Start",
        "Process",
        "oldProcesses",
        "Process",
        "newProcesses",
        "newProcess",
        "newProcesses",
        "oldProcess",
        "oldProcesses",
        "newProcess",
        "Id",
        "oldProcess",
        "Id",
        "found",
        "IsNullOrEmpty",
        "newProcess",
        "MainWindowTitle",
        "IsNullOrEmpty",
        "oldProcess",
        "MainWindowTitle",
        "newProcess",
        "MainWindowTitle",
        "oldProcess",
        "MainWindowTitle",
        "Debug",
        "WriteLine",
        "oldProcess",
        "MainWindowTitle",
        "newProcess",
        "MainWindowTitle",
        "newProcess",
        "ProcessName",
        "retitledProcess",
        "newProcess",
        "found",
        "newProcess",
        "MainWindowHandle",
        "IntPtr",
        "Zero",
        "Debug",
        "WriteLine",
        "newProcess",
        "ProcessName",
        "newProcess",
        "MainWindowTitle",
        "newProcess",
        "MainWindowHandle",
        "newProcess",
        "retitledProcess",
        "EnumWindowsProc",
        "IntPtr",
        "hWnd",
        "IntPtr",
        "lParam",
        "IntPtr",
        "hWnd",
        "GetWindowTextLength",
        "hWnd",
        "size",
        "StringBuilder",
        "size",
        "GetWindowText",
        "hWnd",
        "builder",
        "builder",
        "Capacity",
        "builder",
        "ToString",
        "Empty",
        "IntPtr",
        "EnumWindowsProc",
        "IntPtr",
        "IntPtr",
        "EnumWindows",
        "IntPtr",
        "hWnd",
        "IntPtr",
        "lParam",
        "hWnd",
        "lParam",
        "windows",
        "Add",
        "hWnd",
        "IntPtr",
        "Zero",
        "windows",
        "IntPtr",
        "titleText",
        "FindWindows",
        "IntPtr",
        "hWnd",
        "IntPtr",
        "lParam",
        "GetWindowText",
        "hWnd",
        "Contains",
        "titleText"
    ],
    "literals": [
        "\"user32.dll\"",
        "\"user32.dll\"",
        "\"user32.dll\"",
        "\"user32.dll\"",
        "\"LD_LIBRARY_PATH\"",
        "\"LD_LIBRARY_PATH\"",
        "\"LD_LIBRARY_PATH\"",
        "\"LD_LIBRARY_PATH\"",
        "\"LD_LIBRARY_PATH\"",
        "\"LD_LIBRARY_PATH\"",
        "\"\"",
        "\"\""
    ],
    "variables": [
        "libpath",
        "processList",
        "libpath",
        "processList",
        "processList",
        "count",
        "timer",
        "newProcesses",
        "process",
        "windows",
        "Process",
        "retitledProcess",
        "found",
        "size",
        "builder",
        "windows"
    ],
    "comments": [
        "Safely start the process when the program code merely supplies the URL (or a command).",
        "</summary>",
        "On Linux, we need to temporarily clear the LD_LIBRARY_PATH environment variable",
        "so that programs we start don't pick up the wrong version of various libraries.",
        "The rest of this happens on a timeout, so that we don't have to sleep and hold things up",
        "Passing in a folder path opens window explorer, which doesn't show up in the processlist.",
        "But the path appears in the window title, so we can use that to find the window.",
        "Safely start the process when the program code explicitly invokes \"xdg-open\" (on Linux)",
        "or another command.",
        "</summary>",
        "On Linux, we need to temporarily clear the LD_LIBRARY_PATH environment variable",
        "so that programs we start don't pick up the wrong version of various libraries.",
        "The rest of this happens on a timeout, so that we don't have to sleep and hold things up",
        "The rest of this happens on a timeout, so that we don't have to sleep and hold things up",
        "TODO: implement this for Linux.  See CommmonApi.BringFolderToFrontInLinux() for ideas.",
        "Note: listing processes instead of windows never lists any file explorer process, and",
        "we know that a single file explorer process controls all explorer windows so it's a tossup",
        "which would show as the \"main window\" in any case.",
        "Check again in another second.",
        "The following code was copied/adapted from",
        "https://stackoverflow.com/questions/19867402/how-can-i-use-enumwindows-to-find-windows-with-a-specific-caption-title",
        "Delegate to filter which windows to include",
        "Get the text for the window pointed to by hWnd",
        "</summary>",
        "Find all windows that match the given filter",
        "</summary>",
        "<param name=\"filter\">",
        "A delegate that returns true for windows that should be returned and false for windows that should not be returned",
        "</param>",
        "only add the windows that pass the filter",
        "but return true here so that we iterate all windows",
        "Find all windows that contain the given title text",
        "</summary>",
        "<param name=\"titleText\">",
        "The text that the window title must contain.",
        "</param>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "GetWindowText",
        "GetWindowTextLength",
        "EnumWindows",
        "SetForegroundWindow",
        "SafeStartInFront",
        "SafeStartInFront",
        "StartInFront",
        "BringDesiredWindowToFront",
        "Process",
        "FindNewOrRetitledProcess",
        "GetWindowText",
        "FindWindows",
        "FindWindowsWithText"
    ],
    "classes": [
        "ProcessExtra"
    ]
}