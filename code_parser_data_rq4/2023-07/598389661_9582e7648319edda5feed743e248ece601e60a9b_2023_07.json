{
    "identifiers": [
        "logging",
        "re",
        "time",
        "abc",
        "ABC",
        "abstractmethod",
        "pathlib",
        "Path",
        "threading",
        "typing",
        "Union",
        "logging",
        "getLogger",
        "ABC",
        "name",
        "log_dir",
        "kwargs",
        "name",
        "Path",
        "log_dir",
        "abstractmethod",
        "tag",
        "value",
        "step",
        "NotImplementedError",
        "abstractmethod",
        "NotImplementedError",
        "abstractmethod",
        "NotImplementedError",
        "torch",
        "utils",
        "tensorboard",
        "SummaryWriter",
        "_BaseMetricLogger",
        "name",
        "log_dir",
        "kwargs",
        "name",
        "log_dir",
        "kwargs",
        "tag",
        "value",
        "step",
        "writer",
        "RuntimeError",
        "writer",
        "add_scalar",
        "tag",
        "value",
        "step",
        "SummaryWriter",
        "log_dir",
        "logging",
        "info",
        "log_dir",
        "writer",
        "close",
        "metric_logger_classes",
        "append",
        "_TensorboardLogger",
        "ImportError",
        "logger",
        "warning",
        "mlflow",
        "_BaseMetricLogger",
        "name",
        "log_dir",
        "kwargs",
        "name",
        "log_dir",
        "kwargs",
        "kwargs",
        "tag",
        "value",
        "step",
        "re",
        "sub",
        "tag",
        "mlflow",
        "start_run",
        "run_name",
        "kwargs",
        "get",
        "mlflow",
        "log_metric",
        "tag",
        "value",
        "step",
        "mlflow",
        "set_experiment",
        "name",
        "run",
        "mlflow",
        "search_runs",
        "experiment_ids",
        "exp",
        "experiment_id",
        "run_id",
        "mlflow",
        "delete_run",
        "mlflow",
        "get_run",
        "run",
        "info",
        "run_id",
        "logging",
        "info",
        "mlflow",
        "get_tracking_uri",
        "mlflow",
        "end_run",
        "metric_logger_classes",
        "append",
        "_MLFlowLogger",
        "ImportError",
        "logger",
        "warning",
        "name",
        "log_dir",
        "Union",
        "Path",
        "func",
        "callable",
        "interval",
        "prefix",
        "kwargs",
        "name",
        "log_dir",
        "func",
        "interval",
        "prefix",
        "kwargs",
        "logger",
        "name",
        "log_dir",
        "kwargs",
        "logger",
        "metric_logger_classes",
        "tag",
        "value",
        "step",
        "logger",
        "loggers",
        "logger",
        "log_metric",
        "prefix",
        "prefix",
        "tag",
        "value",
        "step",
        "_initiated",
        "RuntimeError",
        "logger",
        "loggers",
        "logger",
        "open",
        "target",
        "_loop",
        "daemon",
        "thread",
        "start",
        "thread",
        "join",
        "logger",
        "loggers",
        "logger",
        "close",
        "_stop",
        "MAX_TRY",
        "_log",
        "e",
        "chance",
        "chance",
        "e",
        "time",
        "sleep",
        "time",
        "sleep",
        "interval",
        "_log",
        "func",
        "len",
        "metrics_per_epoch",
        "step",
        "_last_step",
        "current_step",
        "v",
        "v",
        "v",
        "metrics_per_epoch",
        "step",
        "key",
        "metric_dict",
        "keys",
        "step_keyword",
        "STEP_KEYWORDS",
        "step_keyword",
        "key",
        "lower",
        "metric_dict",
        "pop",
        "key",
        "tag",
        "value",
        "metric_dict",
        "items",
        "log_metric",
        "tag",
        "value",
        "step",
        "current_step"
    ],
    "literals": [
        "\"MetricLogger\"",
        "\"Tensorboard logger is not opened.\"",
        "f\"Tensorboard logs will be saved to {self.log_dir}\"",
        "\"Tensorboard is not installed. To use Tensorboard logger, please install it with `pip install tensorboard`\"",
        "r\"[^a-zA-Z0-9-_\\/]\"",
        "\"_\"",
        "\"run_name\"",
        "\"0\"",
        "f\"MLFlow logs will be saved to {mlflow.get_tracking_uri()}\"",
        "\"MLFlow is not installed. To use MLFlow logger, please install it with `pip install mlflow`\"",
        "\"step\"",
        "\"epoch\"",
        "\"iter\"",
        "\"iteration\"",
        "\"\"",
        "\"/\"",
        "\"\"",
        "\"Metric logger has already been initiated.\"",
        "\"tag\"",
        "\"value\""
    ],
    "variables": [
        "__all__",
        "logger",
        "metric_logger_classes",
        "name",
        "log_dir",
        "writer",
        "writer",
        "writer",
        "kwargs",
        "tag",
        "exp",
        "STEP_KEYWORDS",
        "MAX_TRY",
        "name",
        "log_dir",
        "func",
        "interval",
        "prefix",
        "kwargs",
        "loggers",
        "_stop",
        "_thread",
        "_initiated",
        "_last_step",
        "_initiated",
        "_stop",
        "thread",
        "_stop",
        "chance",
        "metrics_per_epoch",
        "current_step",
        "metric_dict",
        "_last_step"
    ],
    "comments": [
        "remove invalid characters in tag using regex (only alphabet, -, _, / are allowed)",
        "TODO: only support one model for one experiment",
        "final log after stop",
        "metrics is a list of dict",
        "e.g. [{\"tag\": \"value\"}, ...]",
        "pop all keys from metrics if they contains step keywords"
    ],
    "docstrings": [
        "\"\"\"A metric logger that logs metrics every interval seconds.\n\n        Args:\n            name (str): The name of the metric logger.\n            log_dir (Union[str, Path]): The directory to save the logs.\n            func (Callable): The function to get the metrics.\n                func should return a list of metrics.\n                e.g. func() -> [[{\"tag\": \"value}, ...], ...]\n            interval (float): The interval to log metrics. (seconds)\n            prefix (str, optional): The prefix of the log file. Defaults to \"\".\n            kwargs: The arguments for the metric logger.\n        \"\"\"",
        "\"\"\"Start logging thread.\"\"\"",
        "\"\"\"Stop logging thread.\"\"\"",
        "\"\"\"Log metrics every interval seconds.\"\"\"",
        "\"\"\"Log metrics.\"\"\""
    ],
    "functions": [
        "log_metric",
        "open",
        "close",
        "log_metric",
        "open",
        "close",
        "log_metric",
        "open",
        "close",
        "log_metric",
        "start",
        "stop",
        "_loop",
        "_log"
    ],
    "classes": [
        "_BaseMetricLogger",
        "_TensorboardLogger",
        "_MLFlowLogger",
        "MetricLogger"
    ]
}