{
    "identifiers": [
        "dns",
        "fileURLToPath",
        "Inject",
        "Injectable",
        "JSDOM",
        "httpLinkHeader",
        "ipaddr",
        "oauth2orize",
        "OAuth2",
        "AuthorizationError",
        "ValidateFunctionArity2",
        "OAuth2Req",
        "MiddlewareRequest",
        "oauth2Pkce",
        "fastifyView",
        "pug",
        "bodyParser",
        "fastifyExpress",
        "verifyChallenge",
        "mf2",
        "secureRndstr",
        "HttpRequestService",
        "kinds",
        "Config",
        "DI",
        "bindThis",
        "AccessTokensRepository",
        "UsersRepository",
        "IdService",
        "CacheService",
        "LocalUser",
        "MemoryKVCache",
        "LoggerService",
        "Logger",
        "StatusError",
        "ServerResponse",
        "FastifyInstance",
        "raw",
        "URL",
        "raw",
        "AuthorizationError",
        "process",
        "allowedProtocols",
        "url",
        "AuthorizationError",
        "url",
        "segments",
        "segments",
        "AuthorizationError",
        "url",
        "AuthorizationError",
        "url",
        "url",
        "AuthorizationError",
        "url",
        "url",
        "AuthorizationError",
        "url",
        "logger",
        "httpRequestService",
        "id",
        "httpRequestService",
        "id",
        "res",
        "linkHeader",
        "redirectUris",
        "httpLinkHeader",
        "linkHeader",
        "r",
        "r",
        "res",
        "JSDOM",
        "text",
        "redirectUris",
        "fragment",
        "el",
        "el",
        "text",
        "mf2",
        "text",
        "res",
        "microformats",
        "item",
        "item",
        "item",
        "id",
        "nameProperty",
        "name",
        "nameProperty",
        "redirectUris",
        "uri",
        "URL",
        "uri",
        "res",
        "name",
        "name",
        "id",
        "err",
        "err",
        "logger",
        "err",
        "StatusError",
        "AuthorizationError",
        "AuthorizationError",
        "location",
        "issuerUrl",
        "oauth2orize",
        "txn",
        "res",
        "issuerUrl",
        "URL",
        "txn",
        "parsed",
        "key",
        "value",
        "res",
        "parsed",
        "MemoryKVCache",
        "req",
        "cb",
        "err",
        "txn",
        "req",
        "transaction_id",
        "cb",
        "AuthorizationError",
        "transaction_id",
        "loaded",
        "cb",
        "AuthorizationError",
        "cb",
        "loaded",
        "req",
        "oauth2",
        "cb",
        "err",
        "transactionID",
        "secureRndstr",
        "transactionId",
        "oauth2",
        "cb",
        "transactionId",
        "req",
        "tid",
        "cb",
        "tid",
        "cb",
        "Injectable",
        "oauth2orize",
        "OAuth2Store",
        "Inject",
        "DI",
        "config",
        "httpRequestService",
        "Inject",
        "DI",
        "accessTokensRepository",
        "idService",
        "Inject",
        "DI",
        "usersRepository",
        "cacheService",
        "loggerService",
        "loggerService",
        "MemoryKVCache",
        "oauth2Pkce",
        "oauth2orize",
        "getQueryMode",
        "config",
        "client",
        "redirectUri",
        "token",
        "ares",
        "areq",
        "locals",
        "done",
        "done",
        "client",
        "token",
        "AuthorizationError",
        "token",
        "user",
        "AuthorizationError",
        "user",
        "client",
        "redirectUri",
        "areq",
        "secureRndstr",
        "grantCodeCache",
        "code",
        "client",
        "user",
        "areq",
        "areq",
        "code",
        "args",
        "done",
        "args",
        "err",
        "done",
        "err",
        "oauth2orize",
        "client",
        "code",
        "redirectUri",
        "body",
        "authInfo",
        "done",
        "done",
        "grantCodeCache",
        "code",
        "granted",
        "granted",
        "granted",
        "granted",
        "grantCodeCache",
        "code",
        "granted",
        "granted",
        "accessTokensRepository",
        "granted",
        "granted",
        "body",
        "granted",
        "redirectUri",
        "granted",
        "body",
        "verifyChallenge",
        "body",
        "granted",
        "secureRndstr",
        "accessTokensRepository",
        "idService",
        "now",
        "now",
        "granted",
        "accessToken",
        "accessToken",
        "granted",
        "granted",
        "granted",
        "accessTokensRepository",
        "accessToken",
        "granted",
        "accessToken",
        "granted",
        "granted",
        "granted",
        "accessToken",
        "granted",
        "args",
        "done",
        "args",
        "err",
        "done",
        "err",
        "bindThis",
        "fastify",
        "fastify",
        "_request",
        "reply",
        "reply",
        "URL",
        "URL",
        "kinds",
        "fastify",
        "request",
        "reply",
        "request",
        "oauth2",
        "oauth2",
        "reply",
        "reply",
        "oauth2",
        "oauth2",
        "oauth2",
        "fastify",
        "fastify",
        "fastify",
        "fastifyView",
        "fileURLToPath",
        "URL",
        "fastify",
        "fastifyExpress",
        "fastify",
        "areq",
        "done",
        "done",
        "areq",
        "clientID",
        "redirectURI",
        "scope",
        "validateClientId",
        "clientID",
        "process",
        "process",
        "dns",
        "clientUrl",
        "ipaddr",
        "lookup",
        "AuthorizationError",
        "discoverClientInformation",
        "clientUrl",
        "clientInfo",
        "redirectURI",
        "AuthorizationError",
        "scope",
        "s",
        "kinds",
        "s",
        "scopes",
        "AuthorizationError",
        "areq",
        "scopes",
        "codeChallenge",
        "AuthorizationError",
        "codeChallengeMethod",
        "AuthorizationError",
        "err",
        "err",
        "clientInfo",
        "redirectURI",
        "clientInfo",
        "redirectURI",
        "args",
        "done",
        "args",
        "err",
        "done",
        "err",
        "fastify",
        "getQueryMode",
        "fastify",
        "fastify",
        "bodyParser",
        "fastify",
        "req",
        "done",
        "req",
        "body",
        "req",
        "body",
        "done",
        "fastify",
        "fastify",
        "bodyParser",
        "fastify",
        "bodyParser",
        "fastify",
        "fastify",
        "fastify",
        "_request",
        "reply",
        "reply",
        "reply"
    ],
    "literals": [
        "'node:dns/promises'",
        "'node:url'",
        "'@nestjs/common'",
        "'jsdom'",
        "'http-link-header'",
        "'ipaddr.js'",
        "'oauth2orize'",
        "'oauth2orize-pkce'",
        "'@fastify/view'",
        "'pug'",
        "'body-parser'",
        "'@fastify/express'",
        "'pkce-challenge'",
        "'microformats-parser'",
        "'@/misc/secure-rndstr.js'",
        "'@/core/HttpRequestService.js'",
        "'@/misc/api-permissions.js'",
        "'@/config.js'",
        "'@/di-symbols.js'",
        "'@/decorators.js'",
        "'@/models/index.js'",
        "'@/core/IdService.js'",
        "'@/core/CacheService.js'",
        "'@/models/entities/User.js'",
        "'@/misc/cache.js'",
        "'@/core/LoggerService.js'",
        "'@/logger.js'",
        "'@/misc/status-error.js'",
        "'node:http'",
        "'fastify'",
        "string",
        "'client_id must be a valid URL'",
        "'invalid_request'",
        "'test'",
        "'http:'",
        "'https:'",
        "'https:'",
        "'client_id must be a valid HTTPS URL'",
        "'invalid_request'",
        "'/'",
        "'.'",
        "'..'",
        "'client_id must not contain dot path segments'",
        "'invalid_request'",
        "'client_id must not contain a fragment component'",
        "'invalid_request'",
        "'client_id must not contain a username or a password'",
        "'invalid_request'",
        "'localhost'",
        "'127.0.0.1'",
        "'[::1]'",
        "'client_id must have a domain name as a host name'",
        "'invalid_request'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'link'",
        "'rel'",
        "'redirect_uri'",
        "'link[rel=redirect_uri][href]'",
        "'h-app'",
        "'string'",
        "'string'",
        "'Error while fetching client information'",
        "'Failed to fetch client information'",
        "'invalid_request'",
        "'Failed to parse client information'",
        "'server_error'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'modes'",
        "string",
        "'Missing transaction ID'",
        "'invalid_request'",
        "'Invalid or expired transaction ID'",
        "'access_denied'",
        "string",
        "string",
        "'oauth'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "Checking the user before sending authorization code to ${client.id}",
        "'No user'",
        "'invalid_request'",
        "'No such user'",
        "'invalid_request'",
        "Sending authorization code on behalf of user ${user.id} to ${client.id} through ${redirectUri}, with scope: [${areq.scope}]",
        "'Checking the received authorization code for the exchange'",
        "Detected multiple code use from ${granted.clientId} for user ${granted.userId}. Revoking the code.",
        "string",
        "'Canceling the token as the authorization code was revoked in parallel during the process.'",
        "Generated access token for ${granted.clientId} for user ${granted.userId}, with scope: [${granted.scopes}]",
        "' '",
        "'/.well-known/oauth-authorization-server'",
        "'/oauth/authorize'",
        "'/oauth/token'",
        "'code'",
        "'authorization_code'",
        "'https://misskey-hub.net'",
        "'S256'",
        "'/oauth/authorize'",
        "'Unexpected lack of authorization information'",
        "Rendering authorization page for \"${oauth2.client.name}\"",
        "'Cache-Control'",
        "'no-store'",
        "'oauth'",
        "' '",
        "'/oauth/decision'",
        "'/oauth/token'",
        "'../web/views'",
        "'/oauth/authorize'",
        "Validating authorization parameters, with client_id: ${clientID}, redirect_uri: ${redirectURI}, scope: ${scope}",
        "'test'",
        "'1'",
        "'unicast'",
        "'client_id resolves to disallowed IP range.'",
        "'invalid_request'",
        "'Invalid redirect_uri'",
        "'invalid_request'",
        "'`scope` parameter has no known scope'",
        "'invalid_scope'",
        "'string'",
        "'`code_challenge` parameter is required'",
        "'invalid_request'",
        "'S256'",
        "'`code_challenge_method` parameter must be set as S256'",
        "'invalid_request'",
        "'/oauth/authorize'",
        "'indirect'",
        "'/oauth/authorize'",
        "'/oauth/decision'",
        "'/oauth/decision'",
        "Received the decision. Cancel: ${!!body.cancel}",
        "'/oauth/decision'",
        "'/oauth/token'",
        "'/oauth/token'",
        "'/oauth/token'",
        "'/oauth/token'",
        "'/oauth/*'",
        "'Unknown OAuth endpoint.'",
        "'UNKNOWN_OAUTH_ENDPOINT'",
        "'aa49e620-26cb-4e28-aad6-8cbcb58db147'",
        "'client'"
    ],
    "variables": [
        "url",
        "allowedProtocols",
        "segments",
        "res",
        "redirectUris",
        "linkHeader",
        "text",
        "fragment",
        "name",
        "id",
        "microformats",
        "nameProperty",
        "parsed",
        "key",
        "value",
        "loaded",
        "transactionId",
        "grantCodeCache",
        "user",
        "code",
        "granted",
        "accessToken",
        "now",
        "oauth2",
        "clientUrl",
        "lookup",
        "clientInfo",
        "scopes"
    ],
    "comments": [
        "TODO: Consider migrating to @node-oauth/oauth2-server once",
        "https://github.com/node-oauth/node-oauth2-server/issues/180 is figured out.",
        "Upstream the various validations and RFC9207 implementation in that case.",
        "Follows https://indieauth.spec.indieweb.org/#client-identifier",
        "This is also mostly similar to https://developers.google.com/identity/protocols/oauth2/web-server#uri-validation",
        "although Google has stricter rule.",
        "\"Clients are identified by a [URL].\"",
        "\"Client identifier URLs MUST have either an https or http scheme\"",
        "But then again:",
        "https://datatracker.ietf.org/doc/html/rfc6749.html#section-3.1.2.1",
        "'The redirection endpoint SHOULD require the use of TLS as described",
        "in Section 1.6 when the requested response type is \"code\" or \"token\"'",
        "\"MUST contain a path component (new URL() implicitly adds one)\"",
        "\"MUST NOT contain single-dot or double-dot path segments,\"",
        "(\"MAY contain a query string component\")",
        "\"MUST NOT contain a fragment component\"",
        "\"MUST NOT contain a username or password component\"",
        "(\"MAY contain a port\")",
        "\"host names MUST be domain names or a loopback interface and MUST NOT be",
        "IPv4 or IPv6 addresses except for IPv4 127.0.0.1 or IPv6 [::1].\"",
        "https://indieauth.spec.indieweb.org/#client-information-discovery",
        "\"Authorization servers SHOULD support parsing the [h-app] Microformat from the client_id,",
        "and if there is an [h-app] with a url property matching the client_id URL,",
        "then it should use the name and icon and display them on the authorization prompt.\"",
        "(But we don't display any icon for now)",
        "https://indieauth.spec.indieweb.org/#redirect-url",
        "\"The client SHOULD publish one or more <link> tags or Link HTTP headers with a rel attribute",
        "of redirect_uri at the client_id URL.",
        "Authorization endpoints verifying that a redirect_uri is allowed for use by a client MUST",
        "look for an exact match of the given redirect_uri in the request against the list of",
        "redirect_uris discovered after resolving any relative URLs.\"",
        "https://datatracker.ietf.org/doc/html/rfc9207#name-response-parameter-iss",
        "\"In authorization responses to the client, including error responses,",
        "an authorization server supporting this specification MUST indicate its",
        "identity by including the iss parameter in the response.\"",
        "expires after 5min",
        "fields to prevent multiple code use",
        "expires after 5m",
        "https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics",
        "\"Authorization servers MUST support PKCE [RFC7636].\"",
        "https://datatracker.ietf.org/doc/html/rfc6749.html#section-4.1.2",
        "\"If an authorization code is used more than once, the authorization server",
        "MUST deny the request and SHOULD revoke (when possible) all tokens",
        "previously issued based on that authorization code.\"",
        "https://datatracker.ietf.org/doc/html/rfc6749.html#section-4.1.3",
        "https://datatracker.ietf.org/doc/html/rfc7636.html#section-4.6",
        "NOTE: we don't have a setup for automatic token expiration",
        "https://datatracker.ietf.org/doc/html/rfc8414.html",
        "https://indieauth.spec.indieweb.org/#indieauth-server-metadata",
        "This should return client/redirectURI AND the error, or",
        "the handler can't send error to the redirection URI",
        "https://indieauth.spec.indieweb.org/#client-information-discovery",
        "\"the server may want to resolve the domain name first and avoid fetching the document",
        "if the IP address is within the loopback range defined by [RFC5735]",
        "or any other implementation-specific internal IP address.\"",
        "Find client information from the remote.",
        "Require the redirect URI to be included in an explicit list, per",
        "https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#section-4.1.3",
        "Require PKCE parameters.",
        "Recommended by https://indieauth.spec.indieweb.org/#authorization-request, but also prevents downgrade attack:",
        "https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#name-pkce-downgrade-attack",
        "Clients may use JSON or urlencoded",
        "Return 404 for any unknown paths under /oauth so that clients can know",
        "whether a certain endpoint is supported or not."
    ],
    "docstrings": [
        "* Maps the transaction ID and the oauth/authorize parameters.\n *\n * Flow:\n * 1. oauth/authorize endpoint will call store() to store the parameters\n *    and puts the generated transaction ID to the dialog page\n * 2. oauth/decision will call load() to retrieve the parameters and then remove()"
    ],
    "functions": [
        "validateClientId",
        "discoverClientInformation",
        "getQueryMode",
        "load",
        "store",
        "remove",
        "createServer"
    ],
    "classes": [
        "OAuth2Store",
        "OAuth2ProviderService"
    ]
}