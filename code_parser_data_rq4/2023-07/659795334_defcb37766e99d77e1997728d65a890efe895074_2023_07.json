{
    "identifiers": [
        "pytest",
        "warnings",
        "numpy",
        "np",
        "numpy",
        "testing",
        "assert_array_equal",
        "assert_allclose",
        "suppress_warnings",
        "copy",
        "deepcopy",
        "scipy",
        "stats",
        "sampling",
        "FastGeneratorInversion",
        "scipy",
        "stats",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "loc",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "scale",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "random_state",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "msg",
        "FastGeneratorInversion",
        "stats",
        "gamma",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "FastGeneratorInversion",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "FastGeneratorInversion",
        "stats",
        "truncnorm",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "random_state",
        "gen",
        "rvs",
        "size",
        "gen",
        "rvs",
        "size",
        "assert_array_equal",
        "x1",
        "x2",
        "np",
        "random",
        "default_rng",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "random_state",
        "urng",
        "gen",
        "rvs",
        "size",
        "np",
        "random",
        "default_rng",
        "gen",
        "rvs",
        "size",
        "assert_array_equal",
        "x1",
        "x2",
        "np",
        "random",
        "RandomState",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "random_state",
        "urng",
        "gen",
        "rvs",
        "size",
        "np",
        "random",
        "RandomState",
        "gen",
        "rvs",
        "size",
        "assert_array_equal",
        "x1",
        "x2",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "random_state",
        "gen",
        "rvs",
        "size",
        "gen",
        "evaluate_error",
        "size",
        "gen",
        "rvs",
        "size",
        "gen",
        "rvs",
        "size",
        "assert_array_equal",
        "x2",
        "x3",
        "pytest",
        "mark",
        "parametrize",
        "dists_with_params",
        "distname",
        "args",
        "np",
        "random",
        "default_rng",
        "getattr",
        "stats",
        "distname",
        "args",
        "rng1",
        "rvs",
        "size",
        "random_state",
        "urng",
        "FastGeneratorInversion",
        "rng1",
        "random_state",
        "urng",
        "rng2",
        "rvs",
        "size",
        "stats",
        "cramervonmises_2samp",
        "rvs1",
        "rvs2",
        "pvalue",
        "assert_allclose",
        "rng1",
        "ppf",
        "q",
        "rng2",
        "ppf",
        "q",
        "atol",
        "pytest",
        "mark",
        "parametrize",
        "dists_with_params",
        "distname",
        "args",
        "getattr",
        "stats",
        "distname",
        "args",
        "suppress_warnings",
        "sup",
        "sup",
        "RuntimeWarning",
        "FastGeneratorInversion",
        "dist",
        "rng",
        "evaluate_error",
        "size",
        "random_state",
        "x_error",
        "u_error",
        "pytest",
        "mark",
        "xfail",
        "reason",
        "stats",
        "geninvgauss",
        "FastGeneratorInversion",
        "dist",
        "rng",
        "evaluate_error",
        "size",
        "random_state",
        "err",
        "pytest",
        "mark",
        "parametrize",
        "distname",
        "args",
        "suppress_warnings",
        "sup",
        "sup",
        "RuntimeWarning",
        "getattr",
        "stats",
        "distname",
        "args",
        "FastGeneratorInversion",
        "dist",
        "rng",
        "evaluate_error",
        "size",
        "random_state",
        "x_error",
        "u_error",
        "x_error",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "gen",
        "evaluate_error",
        "size",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "gen",
        "evaluate_error",
        "size",
        "stats",
        "norm",
        "loc",
        "loc",
        "scale",
        "scale",
        "FastGeneratorInversion",
        "dist",
        "random_state",
        "rng",
        "rvs",
        "size",
        "r",
        "loc",
        "scale",
        "stats",
        "cramervonmises",
        "r_rescaled",
        "pvalue",
        "assert_allclose",
        "rng",
        "_ppf",
        "q",
        "rng",
        "ppf",
        "q",
        "atol",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "domain",
        "rng",
        "rvs",
        "size",
        "r",
        "min",
        "r",
        "max",
        "stats",
        "norm",
        "loc",
        "loc",
        "scale",
        "scale",
        "FastGeneratorInversion",
        "dist",
        "domain",
        "rng",
        "rvs",
        "size",
        "loc",
        "scale",
        "loc",
        "scale",
        "lb",
        "r",
        "min",
        "r",
        "max",
        "ub",
        "pytest",
        "mark",
        "parametrize",
        "np",
        "inf",
        "np",
        "inf",
        "distname",
        "args",
        "expected",
        "getattr",
        "stats",
        "distname",
        "args",
        "FastGeneratorInversion",
        "dist",
        "assert_array_equal",
        "rng",
        "support",
        "expected",
        "assert_array_equal",
        "rng",
        "support",
        "np",
        "array",
        "expected",
        "pytest",
        "mark",
        "parametrize",
        "distname",
        "args",
        "getattr",
        "stats",
        "distname",
        "args",
        "FastGeneratorInversion",
        "dist",
        "domain",
        "assert_array_equal",
        "rng",
        "support",
        "assert_array_equal",
        "rng",
        "support",
        "warnings",
        "catch_warnings",
        "warnings",
        "simplefilter",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "domain",
        "rng",
        "rvs",
        "size",
        "r",
        "min",
        "r",
        "max",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "domain",
        "stats",
        "truncnorm",
        "assert_allclose",
        "rng",
        "_cdf",
        "x",
        "trunc_norm",
        "cdf",
        "x",
        "assert_allclose",
        "rng",
        "_ppf",
        "p",
        "trunc_norm",
        "ppf",
        "p",
        "stats",
        "truncnorm",
        "loc",
        "loc",
        "scale",
        "scale",
        "np",
        "array",
        "x",
        "scale",
        "loc",
        "assert_allclose",
        "rng",
        "_cdf",
        "x",
        "trunc_norm",
        "cdf",
        "x",
        "assert_allclose",
        "rng",
        "_ppf",
        "p",
        "trunc_norm",
        "ppf",
        "p",
        "FastGeneratorInversion",
        "stats",
        "beta",
        "domain",
        "assert_array_equal",
        "rng",
        "support",
        "np",
        "array",
        "rng",
        "_cdf",
        "x",
        "assert_array_equal",
        "y_cdf",
        "y_cdf",
        "np",
        "min",
        "y_cdf",
        "assert_allclose",
        "rng",
        "_ppf",
        "y_cdf",
        "stats",
        "norm",
        "FastGeneratorInversion",
        "norm_dist",
        "np",
        "linspace",
        "num",
        "assert_allclose",
        "rng",
        "_cdf",
        "x",
        "norm_dist",
        "cdf",
        "x",
        "assert_allclose",
        "rng",
        "_ppf",
        "p",
        "norm_dist",
        "ppf",
        "p",
        "loc",
        "scale",
        "stats",
        "norm",
        "loc",
        "loc",
        "scale",
        "scale",
        "assert_allclose",
        "rng",
        "_cdf",
        "x",
        "norm_dist",
        "cdf",
        "x",
        "assert_allclose",
        "rng",
        "_ppf",
        "p",
        "norm_dist",
        "ppf",
        "p",
        "pytest",
        "mark",
        "parametrize",
        "domain",
        "x",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "domain",
        "domain",
        "np",
        "isscalar",
        "rng",
        "_cdf",
        "x",
        "np",
        "isscalar",
        "rng",
        "_ppf",
        "FastGeneratorInversion",
        "stats",
        "argus",
        "chi",
        "domain",
        "lb",
        "ub",
        "rng",
        "rvs",
        "size",
        "lb",
        "r",
        "min",
        "r",
        "max",
        "ub",
        "stats",
        "argus",
        "chi",
        "cdf",
        "cdf",
        "ub",
        "cdf",
        "lb",
        "stats",
        "cramervonmises",
        "r",
        "x",
        "cdf",
        "x",
        "prob",
        "pvalue",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "random_state",
        "rng",
        "rvs",
        "size",
        "rng",
        "rvs",
        "stats",
        "cramervonmises_2samp",
        "r1",
        "r2",
        "pvalue",
        "rng",
        "rvs",
        "stats",
        "cramervonmises_2samp",
        "r1",
        "r2",
        "pvalue",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "msg",
        "FastGeneratorInversion",
        "stats",
        "t",
        "FastGeneratorInversion",
        "stats",
        "t",
        "ignore_shape_range",
        "rng",
        "evaluate_error",
        "size",
        "random_state",
        "u_err",
        "pytest",
        "mark",
        "xfail_on_32bit",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "match",
        "gen",
        "qrvs",
        "qmc_engine",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "match",
        "gen",
        "qrvs",
        "d",
        "qmc_engine",
        "stats",
        "qmc",
        "Halton",
        "stats",
        "qmc",
        "Sobol",
        "seed",
        "stats",
        "qmc",
        "Halton",
        "seed",
        "pytest",
        "mark",
        "parametrize",
        "qrngs",
        "pytest",
        "mark",
        "parametrize",
        "sizes",
        "pytest",
        "mark",
        "parametrize",
        "ds",
        "qrng",
        "size_in",
        "size_out",
        "d_in",
        "d_out",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "d_in",
        "qrng",
        "qrng",
        "d",
        "d_in",
        "pytest",
        "raises",
        "ValueError",
        "match",
        "match",
        "gen",
        "qrvs",
        "size_in",
        "d",
        "d_in",
        "qmc_engine",
        "qrng",
        "d_in",
        "qrng",
        "qrng",
        "d",
        "qrng",
        "d",
        "size_out",
        "d_out",
        "deepcopy",
        "qrng",
        "gen",
        "qrvs",
        "size",
        "size_in",
        "d",
        "d_in",
        "qmc_engine",
        "qrng",
        "size_in",
        "qrvs",
        "shape",
        "shape_expected",
        "qrng2",
        "qrng2",
        "random",
        "np",
        "prod",
        "size_in",
        "stats",
        "norm",
        "ppf",
        "uniform",
        "reshape",
        "shape_expected",
        "assert_allclose",
        "qrvs",
        "qrvs2",
        "atol",
        "FastGeneratorInversion",
        "stats",
        "norm",
        "stats",
        "qmc",
        "Halton",
        "d",
        "seed",
        "stats",
        "qmc",
        "Halton",
        "d",
        "seed",
        "qrng2",
        "random",
        "np",
        "prod",
        "size",
        "gen",
        "qrvs",
        "size",
        "size",
        "d",
        "d",
        "qmc_engine",
        "qrng",
        "stats",
        "norm",
        "ppf",
        "uniform",
        "i",
        "d",
        "qrvs",
        "i",
        "qrvs2",
        "i",
        "reshape",
        "size",
        "assert_allclose",
        "sample",
        "sample2",
        "atol",
        "suppress_warnings",
        "sup",
        "sup",
        "RuntimeWarning",
        "FastGeneratorInversion",
        "stats",
        "burr",
        "args",
        "gen",
        "evaluate_error",
        "random_state",
        "u_error"
    ],
    "literals": [
        "\"loc must be scalar\"",
        "\"scale must be scalar\"",
        "\"'test' cannot be used to seed\"",
        "\"test\"",
        "\"Each of the 1 shape parameters must be a scalar\"",
        "\"`dist` must be a frozen\"",
        "\"xy\"",
        "\"Distribution 'truncnorm' is not\"",
        "\"alpha\"",
        "\"anglit\"",
        "\"argus\"",
        "\"argus\"",
        "\"beta\"",
        "\"cosine\"",
        "\"betaprime\"",
        "\"bradford\"",
        "\"burr\"",
        "\"burr12\"",
        "\"cauchy\"",
        "\"chi2\"",
        "\"chi\"",
        "\"crystalball\"",
        "\"expon\"",
        "\"gamma\"",
        "\"gennorm\"",
        "\"gumbel_l\"",
        "\"gumbel_r\"",
        "\"hypsecant\"",
        "\"invgauss\"",
        "\"invweibull\"",
        "\"laplace\"",
        "\"logistic\"",
        "\"maxwell\"",
        "\"moyal\"",
        "\"norm\"",
        "\"pareto\"",
        "\"powerlaw\"",
        "\"rayleigh\"",
        "\"semicircular\"",
        "\"t\"",
        "\"wald\"",
        "\"weibull_max\"",
        "\"weibull_min\"",
        "\"distname, args\"",
        "\"distname, args\"",
        "\"geninvgauss CDF is not accurate\"",
        "\"distname, args\"",
        "\"beta\"",
        "\"size must be an integer\"",
        "\"size must be an integer\"",
        "\"norm\"",
        "\"distname, args, expected\"",
        "\"beta\"",
        "\"norm\"",
        "\"distname, args\"",
        "\"beta\"",
        "\"norm\"",
        "\"error\"",
        "\"domain, x\"",
        "\"No generator is defined for the shape parameters\"",
        "\"NumericalInversePolynomial.qrvs fails for Win 32-bit\"",
        "\"`qmc_engine` must be an instance of...\"",
        "\"`d` must be consistent with dimension of `qmc_engine`.\"",
        "\"qrng\"",
        "\"size_in, size_out\"",
        "\"d_in, d_out\"",
        "\"`d` must be consistent with dimension of `qmc_engine`.\""
    ],
    "variables": [
        "msg",
        "gen",
        "x1",
        "gen",
        "random_state",
        "x2",
        "urng",
        "gen",
        "x1",
        "gen",
        "random_state",
        "x2",
        "urng",
        "gen",
        "x1",
        "gen",
        "random_state",
        "x2",
        "gen",
        "x1",
        "_",
        "x2",
        "gen",
        "random_state",
        "x3",
        "dists_with_params",
        "urng",
        "rng1",
        "rvs1",
        "rng2",
        "rvs2",
        "q",
        "dist",
        "rng",
        "u_error",
        "x_error",
        "dist",
        "rng",
        "err",
        "dist",
        "rng",
        "u_error",
        "x_error",
        "gen",
        "loc",
        "scale",
        "dist",
        "rng",
        "r",
        "r_rescaled",
        "q",
        "rng",
        "r",
        "loc",
        "scale",
        "dist",
        "rng",
        "r",
        "lb",
        "ub",
        "dist",
        "rng",
        "rng",
        "loc",
        "rng",
        "scale",
        "dist",
        "rng",
        "rng",
        "loc",
        "rng",
        "scale",
        "rng",
        "r",
        "rng",
        "trunc_norm",
        "x",
        "p",
        "loc",
        "scale",
        "rng",
        "loc",
        "rng",
        "scale",
        "trunc_norm",
        "x",
        "rng",
        "rng",
        "loc",
        "rng",
        "scale",
        "x",
        "y_cdf",
        "norm_dist",
        "rng",
        "x",
        "p",
        "loc",
        "scale",
        "rng",
        "loc",
        "rng",
        "scale",
        "norm_dist",
        "rng",
        "chi",
        "lb",
        "ub",
        "rng",
        "rng",
        "random_state",
        "r",
        "cdf",
        "prob",
        "rng",
        "r1",
        "rng",
        "loc",
        "rng",
        "scale",
        "r2",
        "rng",
        "loc",
        "rng",
        "scale",
        "r2",
        "msg",
        "rng",
        "rng",
        "u_err",
        "_",
        "gen",
        "match",
        "match",
        "qrngs",
        "sizes",
        "ds",
        "gen",
        "match",
        "d_out",
        "shape_expected",
        "qrng2",
        "qrvs",
        "uniform",
        "qrvs2",
        "gen",
        "size",
        "d",
        "qrng",
        "qrng2",
        "uniform",
        "qrvs",
        "qrvs2",
        "sample",
        "sample2",
        "args",
        "gen",
        "u_error",
        "_"
    ],
    "comments": [
        "loc and scale must be scalar",
        "fixed seed",
        "Generator",
        "RandomState",
        "if evaluate_error is called, it must not interfere with the random_state",
        "used by rvs",
        "this will generate 5 uniform rvs",
        "check sample against rvs generated by rv_continuous",
        "check ppf",
        "check sample against rvs generated by rv_continuous",
        "filter the warnings thrown by UNU.RAN",
        "TODO: add more distributions",
        "take extreme parameters where u-error might not be below the tolerance",
        "due to limitations of floating point arithmetic",
        "filter the warnings thrown by UNU.RAN for such extreme parameters",
        "only a basic check that the domain argument is passed to the",
        "UNU.RAN generators",
        "if loc and scale are used, new domain is loc + scale*domain",
        "test that the support is updated if truncation and loc/scale are applied",
        "use beta distribution since it is a transformed betaprime distribution,",
        "so it is important that the correct support is considered",
        "(i.e., the support of beta is (0,1), while betaprime is (0, inf))",
        "similar test for truncation",
        "center of norm is zero, it should be shifted to the left endpoint of",
        "domain. if this was not the case, PINV in UNURAN would raise a warning",
        "as the center is not inside the domain",
        "as a first step, compare truncated normal against stats.truncnorm",
        "take values that are inside and outside the domain",
        "do another sanity check with beta distribution",
        "in that case, it is important to use the correct domain since beta",
        "is a transformation of betaprime which has a different support",
        "the support is 2.75, , 3.75 (2 + 2.5 * 0.3, 2 + 2.5 * 0.7)",
        "the cdf needs to be zero outside of the domain",
        "ppf needs to map 0 and 1 to the boundaries",
        "for large chi, the Gamma distribution is used and the domain has to be",
        "transformed. this is a test to ensure that the transformation works",
        "perform goodness of fit test with conditional cdf",
        "rescaled r2 should be again standard normal",
        "reset values to default loc=0, scale=1",
        "we can ignore the recommended range of shape parameters",
        "but u-error can be expected to be too large in that case",
        "`size=None` should not add anything to the shape, `size=1` should",
        "Neither `d=None` nor `d=1` should add anything to the shape",
        "If d and qrng.d are inconsistent, an error is raised",
        "Sometimes d is really determined by qrng",
        "QMCEngine samples are always of shape (n, d). When `size` is a tuple,",
        "we set `n = prod(size)` in the call to qmc_engine.random, transform",
        "the sample, and reshape it to the final dimensions. When we reshape,",
        "we need to be careful, because the _columns_ of the sample returned",
        "by a QMCEngine are \"independent\"-ish, but the elements within the",
        "columns are not. We need to make sure that this doesn't get mixed up",
        "by reshaping: qrvs[..., i] should remain \"independent\"-ish of",
        "qrvs[..., i+1], but the elements within qrvs[..., i] should be",
        "transformed from the same low-discrepancy sequence.",
        "this case leads to an overflow error if math.exp is used",
        "in the definition of the burr pdf instead of np.exp",
        "a direct implementation of the PDF as x**(-c-1) / (1+x**(-c))**(d+1)",
        "also leads to an overflow error in the setup",
        "filter potential overflow warning"
    ],
    "docstrings": [
        "\"\"\" pdf, cdf etc should map scalar values to scalars. check with and\n    w/o domain since domain impacts pdf, cdf etc\n    Take x inside and outside of domain \"\"\""
    ],
    "functions": [
        "test_bad_args",
        "test_random_state",
        "test_rvs_and_ppf",
        "test_u_error",
        "test_geninvgauss_uerror",
        "test_error_extreme_params",
        "test_evaluate_error_inputs",
        "test_rvs_ppf_loc_scale",
        "test_domain",
        "test_support",
        "test_support_truncation",
        "test_domain_shift_truncation",
        "test_non_rvs_methods_with_domain",
        "test_non_rvs_methods_without_domain",
        "test_scalar_inputs",
        "test_domain_argus_large_chi",
        "test_setting_loc_scale",
        "test_ignore_shape_range",
        "test_input_validation",
        "test_QRVS_shape_consistency",
        "test_QRVS_size_tuple",
        "test_burr_overflow"
    ],
    "classes": [
        "TestQRVS"
    ]
}