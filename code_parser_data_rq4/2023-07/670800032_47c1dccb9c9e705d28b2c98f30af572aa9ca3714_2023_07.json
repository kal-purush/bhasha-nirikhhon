{
    "identifiers": [
        "os",
        "cv2",
        "numpy",
        "np",
        "libcamera",
        "picamera2",
        "array",
        "PiRGBArray",
        "picamera2",
        "Picamera2",
        "tensorflow",
        "tf",
        "argparse",
        "sys",
        "argparse",
        "ArgumentParser",
        "parser",
        "add_argument",
        "help",
        "action",
        "parser",
        "parse_args",
        "args",
        "usbcam",
        "sys",
        "path",
        "append",
        "utils",
        "label_map_util",
        "utils",
        "visualization_utils",
        "vis_util",
        "os",
        "getcwd",
        "os",
        "path",
        "join",
        "CWD_PATH",
        "MODEL_NAME",
        "os",
        "path",
        "join",
        "CWD_PATH",
        "label_map_util",
        "load_labelmap",
        "PATH_TO_LABELS",
        "label_map_util",
        "convert_label_map_to_categories",
        "label_map",
        "max_num_classes",
        "NUM_CLASSES",
        "use_display_name",
        "label_map_util",
        "create_category_index",
        "categories",
        "tf",
        "Graph",
        "detection_graph",
        "as_default",
        "tf",
        "GraphDef",
        "tf",
        "gfile",
        "GFile",
        "PATH_TO_CKPT",
        "fid",
        "fid",
        "read",
        "od_graph_def",
        "ParseFromString",
        "serialized_graph",
        "tf",
        "import_graph_def",
        "od_graph_def",
        "name",
        "tf",
        "Session",
        "graph",
        "detection_graph",
        "detection_graph",
        "get_tensor_by_name",
        "detection_graph",
        "get_tensor_by_name",
        "detection_graph",
        "get_tensor_by_name",
        "detection_graph",
        "get_tensor_by_name",
        "detection_graph",
        "get_tensor_by_name",
        "cv2",
        "getTickFrequency",
        "cv2",
        "FONT_HERSHEY_SIMPLEX",
        "camera_type",
        "PiCamera",
        "IM_WIDTH",
        "IM_HEIGHT",
        "PiRGBArray",
        "camera",
        "size",
        "IM_WIDTH",
        "IM_HEIGHT",
        "rawCapture",
        "truncate",
        "frame1",
        "camera",
        "capture_continuous",
        "rawCapture",
        "format",
        "use_video_port",
        "cv2",
        "getTickCount",
        "np",
        "copy",
        "frame1",
        "array",
        "frame",
        "setflags",
        "write",
        "cv2",
        "cvtColor",
        "frame",
        "cv2",
        "COLOR_BGR2RGB",
        "np",
        "expand_dims",
        "frame_rgb",
        "axis",
        "sess",
        "run",
        "detection_boxes",
        "detection_scores",
        "detection_classes",
        "num_detections",
        "feed_dict",
        "image_tensor",
        "frame_expanded",
        "vis_util",
        "visualize_boxes_and_labels_on_image_array",
        "frame",
        "np",
        "squeeze",
        "boxes",
        "np",
        "squeeze",
        "classes",
        "astype",
        "np",
        "int32",
        "np",
        "squeeze",
        "scores",
        "category_index",
        "use_normalized_coordinates",
        "line_thickness",
        "min_score_thresh",
        "cv2",
        "putText",
        "frame",
        "format",
        "frame_rate_calc",
        "font",
        "cv2",
        "LINE_AA",
        "cv2",
        "imshow",
        "frame",
        "cv2",
        "getTickCount",
        "t2",
        "t1",
        "freq",
        "time1",
        "cv2",
        "waitKey",
        "ord",
        "rawCapture",
        "truncate",
        "camera",
        "close",
        "camera_type",
        "cv2",
        "VideoCapture",
        "camera",
        "IM_WIDTH",
        "camera",
        "IM_HEIGHT",
        "cv2",
        "getTickCount",
        "camera",
        "read",
        "cv2",
        "cvtColor",
        "frame",
        "cv2",
        "COLOR_BGR2RGB",
        "np",
        "expand_dims",
        "frame_rgb",
        "axis",
        "sess",
        "run",
        "detection_boxes",
        "detection_scores",
        "detection_classes",
        "num_detections",
        "feed_dict",
        "image_tensor",
        "frame_expanded",
        "vis_util",
        "visualize_boxes_and_labels_on_image_array",
        "frame",
        "np",
        "squeeze",
        "boxes",
        "np",
        "squeeze",
        "classes",
        "astype",
        "np",
        "int32",
        "np",
        "squeeze",
        "scores",
        "category_index",
        "use_normalized_coordinates",
        "line_thickness",
        "min_score_thresh",
        "cv2",
        "putText",
        "frame",
        "format",
        "frame_rate_calc",
        "font",
        "cv2",
        "LINE_AA",
        "cv2",
        "imshow",
        "frame",
        "cv2",
        "getTickCount",
        "t2",
        "t1",
        "freq",
        "time1",
        "cv2",
        "waitKey",
        "ord",
        "camera",
        "release",
        "cv2",
        "destroyAllWindows"
    ],
    "literals": [
        "'picamera'",
        "'--usbcam'",
        "'Use a USB webcam instead of picamera'",
        "'store_true'",
        "'usb'",
        "'..'",
        "'ssdlite_mobilenet_v2_coco_2018_05_09'",
        "'frozen_inference_graph.pb'",
        "'data'",
        "'mscoco_label_map.pbtxt'",
        "'rb'",
        "''",
        "'image_tensor:0'",
        "'detection_boxes:0'",
        "'detection_scores:0'",
        "'detection_classes:0'",
        "'num_detections:0'",
        "'picamera'",
        "\"bgr\"",
        "\"FPS: {0:.2f}\"",
        "'Object detector'",
        "'q'",
        "'usb'",
        "\"FPS: {0:.2f}\"",
        "'Object detector'",
        "'q'"
    ],
    "variables": [
        "IM_WIDTH",
        "IM_HEIGHT",
        "camera_type",
        "parser",
        "args",
        "camera_type",
        "MODEL_NAME",
        "CWD_PATH",
        "PATH_TO_CKPT",
        "PATH_TO_LABELS",
        "NUM_CLASSES",
        "label_map",
        "categories",
        "category_index",
        "detection_graph",
        "od_graph_def",
        "serialized_graph",
        "sess",
        "image_tensor",
        "detection_boxes",
        "detection_scores",
        "detection_classes",
        "num_detections",
        "frame_rate_calc",
        "freq",
        "font",
        "camera",
        "camera",
        "resolution",
        "camera",
        "framerate",
        "rawCapture",
        "t1",
        "frame",
        "frame_rgb",
        "frame_expanded",
        "boxes",
        "scores",
        "classes",
        "num",
        "t2",
        "time1",
        "frame_rate_calc",
        "camera",
        "ret",
        "ret",
        "t1",
        "ret",
        "frame",
        "frame_rgb",
        "frame_expanded",
        "boxes",
        "scores",
        "classes",
        "num",
        "t2",
        "time1",
        "frame_rate_calc"
    ],
    "comments": [
        "Import packages",
        "Set up camera constants",
        "IM_WIDTH = 640    Use smaller resolution for",
        "IM_HEIGHT = 480   slightly faster framerate",
        "Select camera type (if user enters --usbcam when calling this script,",
        "a USB webcam will be used)",
        "This is needed since the working directory is the object_detection folder.",
        "Import utilites",
        "Name of the directory containing the object detection module we're using",
        "Grab path to current working directory",
        "Path to frozen detection graph .pb file, which contains the model that is used",
        "for object detection.",
        "Path to label map file",
        "Number of classes the object detector can identify",
        "Load the label map.",
        "Label maps map indices to category names, so that when the convolution",
        "network predicts `5`, we know that this corresponds to `airplane`.",
        "Here we use internal utility functions, but anything that returns a",
        "dictionary mapping integers to appropriate string labels would be fine",
        "Load the Tensorflow model into memory.",
        "Define input and output tensors (i.e. data) for the object detection classifier",
        "Input tensor is the image",
        "Output tensors are the detection boxes, scores, and classes",
        "Each box represents a part of the image where a particular object was detected",
        "Each score represents level of confidence for each of the objects.",
        "The score is shown on the result image, together with the class label.",
        "Number of objects detected",
        "Initialize frame rate calculation",
        "Initialize camera and perform object detection.",
        "The camera has to be set up and used differently depending on if it's a",
        "Picamera or USB webcam.",
        "I know this is ugly, but I basically copy+pasted the code for the object",
        "detection loop twice, and made one work for Picamera and the other work",
        "for USB.",
        "Picamera ###",
        "Initialize Picamera and grab reference to the raw capture",
        "Acquire frame and expand frame dimensions to have shape: [1, None, None, 3]",
        "i.e. a single-column array, where each item in the column has the pixel RGB value",
        "Perform the actual detection by running the model with the image as input",
        "Draw the results of the detection (aka 'visulaize the results')",
        "All the results have been drawn on the frame, so it's time to display it.",
        "Press 'q' to quit",
        "USB webcam ###",
        "Initialize USB webcam feed",
        "Acquire frame and expand frame dimensions to have shape: [1, None, None, 3]",
        "i.e. a single-column array, where each item in the column has the pixel RGB value",
        "Perform the actual detection by running the model with the image as input",
        "Draw the results of the detection (aka 'visulaize the results')",
        "All the results have been drawn on the frame, so it's time to display it.",
        "Press 'q' to quit"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}