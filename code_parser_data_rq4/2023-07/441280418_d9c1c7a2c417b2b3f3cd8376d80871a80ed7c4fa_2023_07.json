{
    "identifiers": [
        "optimism",
        "test",
        "TestFixture",
        "optimism",
        "QuadratureRule",
        "jax",
        "jax",
        "numpy",
        "np",
        "field",
        "xi",
        "field",
        "xi",
        "field",
        "xi",
        "edgeCoords",
        "edgeCoords",
        "edgeCoords",
        "np",
        "array",
        "tangent",
        "tangent",
        "normal",
        "np",
        "linalg",
        "norm",
        "normal",
        "edgeA",
        "edgeB",
        "compute_normal",
        "edgeA",
        "compute_normal",
        "edgeB",
        "nA",
        "nB",
        "normal",
        "np",
        "linalg",
        "norm",
        "normal",
        "edgeA",
        "edgeB",
        "xiA",
        "xiB",
        "g",
        "compute_common_normal",
        "edgeA",
        "edgeB",
        "eval_linear_field_on_edge",
        "edgeA",
        "xiA",
        "eval_linear_field_on_edge",
        "edgeB",
        "xiB",
        "np",
        "linalg",
        "norm",
        "xA",
        "xB",
        "g",
        "normal",
        "edgeA",
        "edgeB",
        "compute_common_normal",
        "edgeA",
        "edgeB",
        "xa",
        "edgeB",
        "normal",
        "np",
        "array",
        "edgeB",
        "edgeB",
        "normal",
        "T",
        "np",
        "array",
        "edgeB",
        "xa",
        "np",
        "linalg",
        "solve",
        "M",
        "r",
        "xig",
        "xig",
        "i",
        "i",
        "compute_xi",
        "edgeA",
        "i",
        "edgeB",
        "normal",
        "xiAs",
        "append",
        "xiA",
        "xiBs",
        "append",
        "xiB",
        "gs",
        "append",
        "g",
        "i",
        "i",
        "compute_xi",
        "edgeB",
        "i",
        "edgeA",
        "normal",
        "xiAs",
        "append",
        "xiA",
        "xiBs",
        "append",
        "xiB",
        "gs",
        "append",
        "g",
        "i",
        "len",
        "xiAs",
        "xiAs",
        "i",
        "xiBs",
        "i",
        "xiA",
        "xiA",
        "xiB",
        "xiB",
        "xiAk",
        "append",
        "xiA",
        "xiBk",
        "append",
        "xiB",
        "gk",
        "append",
        "gs",
        "i",
        "np",
        "array",
        "xiAk",
        "np",
        "array",
        "xiBk",
        "np",
        "array",
        "gk",
        "len",
        "gk",
        "np",
        "zeros",
        "np",
        "zeros",
        "np",
        "zeros",
        "np",
        "min",
        "xiAk",
        "eval_linear_field_on_edge",
        "edgeA",
        "xiAMin",
        "compute_xi",
        "xAtMin",
        "edgeB",
        "normal",
        "xiAk",
        "at",
        "xiAMin",
        "xiBk",
        "at",
        "xiBMin",
        "gk",
        "at",
        "gMin",
        "np",
        "max",
        "xiAk",
        "eval_linear_field_on_edge",
        "edgeA",
        "xiAMax",
        "compute_xi",
        "xAtMax",
        "edgeB",
        "normal",
        "xiAk",
        "at",
        "xiAMax",
        "xiBk",
        "at",
        "xiBMax",
        "gk",
        "at",
        "gMax",
        "len",
        "gk",
        "len",
        "gk",
        "len",
        "gk",
        "edgeA",
        "edgeB",
        "xiAk",
        "xiBk",
        "gk",
        "edgeA",
        "edgeB",
        "compute_intersection",
        "edgeA",
        "edgeB",
        "xiA",
        "func",
        "QuadratureRule",
        "create_quadrature_rule_1D",
        "degree",
        "edgeQuad",
        "xigauss",
        "jax",
        "vmap",
        "eval_linear_field_on_edge",
        "xiA",
        "xiGauss",
        "np",
        "linalg",
        "norm",
        "edgeA",
        "edgeA",
        "lengthA",
        "np",
        "abs",
        "xiA",
        "xiA",
        "edgeQuad",
        "wgauss",
        "jax",
        "vmap",
        "eval_linear_field_on_edge",
        "xiB",
        "xiGauss",
        "np",
        "linalg",
        "norm",
        "edgeB",
        "edgeB",
        "lengthB",
        "np",
        "abs",
        "xiB",
        "xiB",
        "edgeQuad",
        "wgauss",
        "jax",
        "vmap",
        "eval_linear_field_on_edge",
        "g",
        "xiGauss",
        "np",
        "linalg",
        "norm",
        "quadWeightA",
        "quadWeightB",
        "edgeA",
        "edgeB",
        "func_of_xiA_xiB_g_weight",
        "jax",
        "vmap",
        "func_of_xiA_xiB_g_weight",
        "quadXiA",
        "quadXiB",
        "quadWeightA",
        "gs",
        "np",
        "sum",
        "integral",
        "integrator",
        "TestFixture",
        "unittest",
        "skipIf",
        "usingTestingFilter",
        "np",
        "array",
        "np",
        "array",
        "compute_intersection",
        "edgeA",
        "edgeB",
        "i",
        "len",
        "g",
        "compute_error",
        "edgeA",
        "edgeB",
        "xiA",
        "i",
        "xiB",
        "i",
        "g",
        "i",
        "assertTrue",
        "err",
        "unittest",
        "skipIf",
        "usingTestingFilter",
        "np",
        "array",
        "np",
        "array",
        "compute_intersection",
        "edgeA",
        "edgeB",
        "i",
        "len",
        "g",
        "compute_error",
        "edgeA",
        "edgeB",
        "xiA",
        "i",
        "xiB",
        "i",
        "g",
        "i",
        "assertTrue",
        "err",
        "unittest",
        "skipIf",
        "usingTestingFilter",
        "np",
        "array",
        "np",
        "array",
        "compute_intersection",
        "edgeA",
        "edgeB",
        "i",
        "len",
        "g",
        "compute_error",
        "edgeA",
        "edgeB",
        "xiA",
        "i",
        "xiB",
        "i",
        "g",
        "i",
        "assertTrue",
        "err",
        "np",
        "array",
        "np",
        "array",
        "create_mortar_integrator",
        "edgeA",
        "edgeB",
        "edgeIntegrator",
        "xiA",
        "xiB",
        "w",
        "g",
        "w",
        "g",
        "assertNear",
        "commonArea",
        "unittest",
        "main"
    ],
    "literals": [
        "\"\\n\\nA very unusual bug found in intersection test\"",
        "\"edges = \\n\\n\"",
        "\"\\n\\nPoor accuracy for mortar integrals, the two side disagree on their common area\"",
        "\"edges = \\n\\n\"",
        "''",
        "''",
        "''",
        "'__main__'"
    ],
    "variables": [
        "usingTestingFilter",
        "tangent",
        "normal",
        "nA",
        "nB",
        "normal",
        "normal",
        "xA",
        "xB",
        "normal",
        "M",
        "r",
        "xig",
        "xiAs",
        "xiBs",
        "gs",
        "xiA",
        "xiB",
        "g",
        "xiB",
        "xiA",
        "g",
        "xiAk",
        "xiBk",
        "gk",
        "xiA",
        "xiB",
        "xiAk",
        "xiBk",
        "gk",
        "xiAk",
        "xiBk",
        "gk",
        "xiAMin",
        "xAtMin",
        "xiBMin",
        "gMin",
        "xiAk",
        "xiBk",
        "gk",
        "xiAMax",
        "xAtMax",
        "xiBMax",
        "gMax",
        "xiAk",
        "xiBk",
        "gk",
        "xiA",
        "xiB",
        "g",
        "edgeQuad",
        "xiGauss",
        "quadXiA",
        "lengthA",
        "quadWeightA",
        "quadXiB",
        "lengthB",
        "quadWeightB",
        "gs",
        "integral",
        "edgeA",
        "edgeB",
        "xiA",
        "xiB",
        "g",
        "err",
        "edgeA",
        "edgeB",
        "xiA",
        "xiB",
        "g",
        "err",
        "edgeA",
        "edgeB",
        "xiA",
        "xiB",
        "g",
        "err",
        "edgeA",
        "edgeB",
        "edgeIntegrator",
        "commonArea"
    ],
    "comments": [
        "solve xa - xb(xi) + g * normal = 0",
        "xb = edgeB[0] * (1-xi) + edgeB[1] * xi",
        "k is for korrected",
        "@unittest.skipIf(usingTestingFilter, '')",
        "eventually...",
        "can give options about how to compute common normal",
        "can give options on integrating on common vs different surfaces",
        "can give options on quadrature rule on common surface"
    ],
    "docstrings": [],
    "functions": [
        "eval_linear_field_on_edge",
        "compute_normal",
        "compute_common_normal",
        "compute_error",
        "compute_intersection",
        "compute_xi",
        "create_mortar_integrator",
        "integrator",
        "setUp",
        "testOffEdges",
        "testEdgesWithCommonPoint",
        "testEdgesWithTwoCommonPoints",
        "testAreaIntegrals"
    ],
    "classes": [
        "TestMortarGeom"
    ]
}