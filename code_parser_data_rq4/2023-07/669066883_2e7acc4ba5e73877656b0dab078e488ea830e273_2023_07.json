{
    "identifiers": [
        "generateRelativeFileLink",
        "baseName",
        "toPlatformPath",
        "jest",
        "expect",
        "describe",
        "it",
        "path",
        "jest",
        "jest",
        "describe",
        "describe",
        "it",
        "generateRelativeFileLink",
        "currentFilePath",
        "destinationFilePath",
        "expect",
        "relativeLink",
        "expectedRelativeLink",
        "describe",
        "it",
        "baseName",
        "filePath",
        "expect",
        "result",
        "expectedBaseName",
        "it",
        "baseName",
        "filePath",
        "expect",
        "result",
        "filePath",
        "it",
        "baseName",
        "filePath",
        "expect",
        "result",
        "describe",
        "it",
        "toPlatformPath",
        "inputPath",
        "expect",
        "result",
        "expectedPlatformPath",
        "it",
        "toPlatformPath",
        "inputPath",
        "expect",
        "result",
        "expectedPlatformPath",
        "it",
        "toPlatformPath",
        "inputPath",
        "expect",
        "result",
        "expectedPlatformPath",
        "it",
        "path",
        "path",
        "toPlatformPath",
        "inputPath",
        "expect",
        "result",
        "inputPath"
    ],
    "literals": [
        "'../../src/utils/path'",
        "'@jest/globals'",
        "'path'",
        "'axios'",
        "'fs'",
        "'utils'",
        "'generateRelativeFileLink'",
        "'should generate the relative file link between two file paths'",
        "'/path/to/current/file.ts'",
        "'/path/to/destination/file.ts'",
        "'../destination/file.ts'",
        "'baseName'",
        "'should return the base name of the file path'",
        "'/path/to/some/file.txt'",
        "'file.txt'",
        "'should return the full path if the file path is just a basename'",
        "'file.txt'",
        "'should return an empty string for an empty path'",
        "''",
        "''",
        "'toPlatformPath'",
        "'should replace forward slashes with platform-specific path separator'",
        "'path/to/file.txt'",
        "'path/to/file.txt'",
        "'should replace backslashes with platform-specific path separator'",
        "'path\\\\to\\\\file.txt'",
        "'path/to/file.txt'",
        "'should handle mixed forward slashes and backslashes correctly'",
        "'path/to\\\\file.txt'",
        "'path/to/file.txt'",
        "'should not modify the path if it already uses the platform-specific separator'",
        "path${path.sep}to${path.sep}file.txt"
    ],
    "variables": [
        "currentFilePath",
        "destinationFilePath",
        "expectedRelativeLink",
        "relativeLink",
        "filePath",
        "expectedBaseName",
        "result",
        "filePath",
        "result",
        "filePath",
        "result",
        "inputPath",
        "expectedPlatformPath",
        "result",
        "inputPath",
        "expectedPlatformPath",
        "result",
        "inputPath",
        "expectedPlatformPath",
        "result",
        "inputPath",
        "result"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}