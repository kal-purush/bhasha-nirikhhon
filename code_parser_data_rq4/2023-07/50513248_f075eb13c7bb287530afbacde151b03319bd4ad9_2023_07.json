{
    "identifiers": [
        "annotations",
        "copy",
        "deepcopy",
        "io",
        "typing",
        "Optional",
        "Union",
        "numpy",
        "np",
        "numpy",
        "typing",
        "npt",
        "DataModelDict",
        "DataModelDict",
        "DM",
        "tools",
        "axes_check",
        "atomman",
        "unitconvert",
        "uc",
        "kwargs",
        "kwargs",
        "pop",
        "len",
        "kwargs",
        "np",
        "zeros",
        "dtype",
        "kwargs",
        "len",
        "kwargs",
        "kwargs",
        "kwargs",
        "len",
        "kwargs",
        "kwargs",
        "kwargs",
        "len",
        "kwargs",
        "kwargs",
        "kwargs",
        "len",
        "kwargs",
        "kwargs",
        "kwargs",
        "len",
        "kwargs",
        "kwargs",
        "kwargs",
        "model",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "triclinic",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "monoclinic",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "orthorhombic",
        "kwargs",
        "kwargs",
        "rhombohedral",
        "verify",
        "verify",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "kwargs",
        "tetragonal",
        "kwargs",
        "hexagonal",
        "verify",
        "verify",
        "kwargs",
        "len",
        "kwargs",
        "cubic",
        "kwargs",
        "len",
        "kwargs",
        "isotropic",
        "kwargs",
        "Cij",
        "property",
        "np",
        "ndarray",
        "deepcopy",
        "__c_ij",
        "Cij",
        "setter",
        "value",
        "npt",
        "ArrayLike",
        "np",
        "asarray",
        "value",
        "dtype",
        "value",
        "shape",
        "value",
        "max",
        "np",
        "isclose",
        "value",
        "value",
        "max",
        "atol",
        "i",
        "j",
        "i",
        "np",
        "isclose",
        "value",
        "i",
        "j",
        "value",
        "j",
        "i",
        "atol",
        "value",
        "property",
        "np",
        "ndarray",
        "np",
        "linalg",
        "inv",
        "Cij",
        "Sij",
        "setter",
        "value",
        "npt",
        "ArrayLike",
        "np",
        "asarray",
        "value",
        "dtype",
        "value",
        "shape",
        "np",
        "linalg",
        "inv",
        "value",
        "property",
        "np",
        "ndarray",
        "Cij",
        "np",
        "array",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "Cij9",
        "setter",
        "value",
        "npt",
        "ArrayLike",
        "np",
        "asarray",
        "value",
        "dtype",
        "value",
        "shape",
        "i",
        "j",
        "value",
        "i",
        "j",
        "value",
        "i",
        "j",
        "value",
        "j",
        "i",
        "value",
        "j",
        "i",
        "value",
        "property",
        "np",
        "ndarray",
        "Cij",
        "np",
        "array",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "Cijkl",
        "setter",
        "value",
        "npt",
        "ArrayLike",
        "np",
        "asarray",
        "value",
        "dtype",
        "c",
        "shape",
        "c",
        "max",
        "np",
        "array",
        "dtype",
        "ij",
        "kl",
        "ij",
        "indexes",
        "ij",
        "indexes",
        "ij",
        "indexes",
        "kl",
        "indexes",
        "kl",
        "np",
        "isclose",
        "c",
        "i",
        "j",
        "k",
        "l",
        "c",
        "j",
        "i",
        "k",
        "l",
        "np",
        "isclose",
        "c",
        "i",
        "j",
        "k",
        "l",
        "c",
        "j",
        "i",
        "l",
        "k",
        "np",
        "isclose",
        "c",
        "i",
        "j",
        "k",
        "l",
        "c",
        "k",
        "l",
        "j",
        "i",
        "np",
        "isclose",
        "c",
        "i",
        "j",
        "k",
        "l",
        "c",
        "l",
        "k",
        "j",
        "i",
        "np",
        "isclose",
        "c",
        "i",
        "j",
        "k",
        "l",
        "c",
        "i",
        "j",
        "l",
        "k",
        "np",
        "isclose",
        "c",
        "i",
        "j",
        "k",
        "l",
        "c",
        "k",
        "l",
        "i",
        "j",
        "np",
        "isclose",
        "c",
        "i",
        "j",
        "k",
        "l",
        "c",
        "l",
        "k",
        "i",
        "j",
        "np",
        "array",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "property",
        "np",
        "ndarray",
        "Sij",
        "s",
        "s",
        "np",
        "array",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "Sijkl",
        "setter",
        "value",
        "npt",
        "ArrayLike",
        "np",
        "asarray",
        "value",
        "dtype",
        "s",
        "shape",
        "np",
        "array",
        "dtype",
        "ij",
        "kl",
        "ij",
        "indexes",
        "ij",
        "indexes",
        "ij",
        "indexes",
        "kl",
        "indexes",
        "kl",
        "np",
        "isclose",
        "s",
        "i",
        "j",
        "k",
        "l",
        "s",
        "j",
        "i",
        "k",
        "l",
        "np",
        "isclose",
        "s",
        "i",
        "j",
        "k",
        "l",
        "s",
        "j",
        "i",
        "l",
        "k",
        "np",
        "isclose",
        "s",
        "i",
        "j",
        "k",
        "l",
        "s",
        "k",
        "l",
        "j",
        "i",
        "np",
        "isclose",
        "s",
        "i",
        "j",
        "k",
        "l",
        "s",
        "l",
        "k",
        "j",
        "i",
        "np",
        "isclose",
        "s",
        "i",
        "j",
        "k",
        "l",
        "s",
        "i",
        "j",
        "l",
        "k",
        "np",
        "isclose",
        "s",
        "i",
        "j",
        "k",
        "l",
        "s",
        "k",
        "l",
        "i",
        "j",
        "np",
        "isclose",
        "s",
        "i",
        "j",
        "k",
        "l",
        "s",
        "l",
        "k",
        "i",
        "j",
        "np",
        "array",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "axes",
        "npt",
        "ArrayLike",
        "tol",
        "ElasticConstants",
        "np",
        "asarray",
        "axes",
        "dtype",
        "axes_check",
        "axes",
        "np",
        "einsum",
        "T",
        "T",
        "np",
        "einsum",
        "Q",
        "Cijkl",
        "Q",
        "abs",
        "C",
        "C",
        "max",
        "tol",
        "ElasticConstants",
        "Cijkl",
        "C",
        "C11",
        "Optional",
        "C12",
        "Optional",
        "C44",
        "Optional",
        "M",
        "Optional",
        "Lame",
        "Optional",
        "mu",
        "Optional",
        "E",
        "Optional",
        "nu",
        "Optional",
        "K",
        "Optional",
        "sum",
        "C11",
        "C12",
        "C44",
        "M",
        "Lame",
        "mu",
        "E",
        "nu",
        "K",
        "kwargcount",
        "M",
        "C11",
        "ValueError",
        "M",
        "Lame",
        "C12",
        "ValueError",
        "Lame",
        "mu",
        "C44",
        "ValueError",
        "mu",
        "C11",
        "C12",
        "C11",
        "C12",
        "E",
        "E",
        "C11",
        "E",
        "C11",
        "C11",
        "E",
        "S",
        "nu",
        "C11",
        "nu",
        "nu",
        "K",
        "C11",
        "K",
        "C11",
        "C44",
        "C12",
        "E",
        "E",
        "C12",
        "E",
        "C12",
        "E",
        "C12",
        "R",
        "nu",
        "C12",
        "nu",
        "nu",
        "K",
        "K",
        "C12",
        "C44",
        "E",
        "C44",
        "E",
        "C44",
        "C44",
        "E",
        "nu",
        "C44",
        "nu",
        "nu",
        "K",
        "C44",
        "E",
        "nu",
        "E",
        "nu",
        "nu",
        "nu",
        "E",
        "nu",
        "K",
        "K",
        "E",
        "K",
        "E",
        "K",
        "E",
        "K",
        "E",
        "nu",
        "K",
        "nu",
        "nu",
        "K",
        "nu",
        "nu",
        "C12",
        "C44",
        "np",
        "array",
        "C11",
        "C12",
        "C12",
        "C12",
        "C11",
        "C12",
        "C12",
        "C12",
        "C11",
        "C44",
        "C44",
        "C44",
        "C11",
        "Optional",
        "C12",
        "Optional",
        "C44",
        "Optional",
        "C11",
        "C12",
        "C44",
        "np",
        "array",
        "C11",
        "C12",
        "C12",
        "C12",
        "C11",
        "C12",
        "C12",
        "C12",
        "C11",
        "C44",
        "C44",
        "C44",
        "C11",
        "Optional",
        "C12",
        "Optional",
        "C13",
        "Optional",
        "C33",
        "Optional",
        "C44",
        "Optional",
        "C66",
        "Optional",
        "verify",
        "C13",
        "C33",
        "C44",
        "C11",
        "C12",
        "C66",
        "C66",
        "C12",
        "C12",
        "C66",
        "C11",
        "C66",
        "C66",
        "C11",
        "C12",
        "verify",
        "np",
        "isclose",
        "C66",
        "C11",
        "C12",
        "ValueError",
        "np",
        "array",
        "C11",
        "C12",
        "C13",
        "C12",
        "C11",
        "C13",
        "C13",
        "C13",
        "C33",
        "C44",
        "C44",
        "C66",
        "C11",
        "Optional",
        "C12",
        "Optional",
        "C13",
        "Optional",
        "C14",
        "Optional",
        "C15",
        "C33",
        "Optional",
        "C44",
        "Optional",
        "C66",
        "Optional",
        "verify",
        "C13",
        "C14",
        "C33",
        "C44",
        "C11",
        "C12",
        "C66",
        "C66",
        "C12",
        "C12",
        "C66",
        "C11",
        "C66",
        "C66",
        "C11",
        "C12",
        "verify",
        "np",
        "isclose",
        "C66",
        "C11",
        "C12",
        "ValueError",
        "np",
        "array",
        "C11",
        "C12",
        "C13",
        "C14",
        "C15",
        "C12",
        "C11",
        "C13",
        "C14",
        "C15",
        "C13",
        "C13",
        "C33",
        "C14",
        "C14",
        "C44",
        "C15",
        "C15",
        "C15",
        "C44",
        "C14",
        "C15",
        "C14",
        "C66",
        "C11",
        "Optional",
        "C12",
        "Optional",
        "C13",
        "Optional",
        "C16",
        "C33",
        "Optional",
        "C44",
        "Optional",
        "C66",
        "Optional",
        "C11",
        "C12",
        "C13",
        "C33",
        "C44",
        "C66",
        "np",
        "array",
        "C11",
        "C12",
        "C13",
        "C16",
        "C12",
        "C11",
        "C13",
        "C16",
        "C13",
        "C13",
        "C33",
        "C44",
        "C44",
        "C16",
        "C16",
        "C66",
        "C11",
        "Optional",
        "C12",
        "Optional",
        "C13",
        "Optional",
        "C22",
        "Optional",
        "C23",
        "Optional",
        "C33",
        "Optional",
        "C44",
        "Optional",
        "C55",
        "Optional",
        "C66",
        "Optional",
        "C11",
        "C12",
        "C13",
        "C22",
        "C23",
        "C33",
        "C44",
        "C55",
        "C66",
        "np",
        "array",
        "C11",
        "C12",
        "C13",
        "C12",
        "C22",
        "C23",
        "C13",
        "C23",
        "C33",
        "C44",
        "C55",
        "C66",
        "C11",
        "Optional",
        "C12",
        "Optional",
        "C13",
        "Optional",
        "C15",
        "Optional",
        "C22",
        "Optional",
        "C23",
        "Optional",
        "C25",
        "Optional",
        "C33",
        "Optional",
        "C35",
        "Optional",
        "C44",
        "Optional",
        "C46",
        "Optional",
        "C55",
        "Optional",
        "C66",
        "Optional",
        "C11",
        "C12",
        "C13",
        "C15",
        "C22",
        "C23",
        "C25",
        "C33",
        "C35",
        "C44",
        "C46",
        "C55",
        "C66",
        "np",
        "array",
        "C11",
        "C12",
        "C13",
        "C15",
        "C12",
        "C22",
        "C23",
        "C25",
        "C13",
        "C23",
        "C33",
        "C35",
        "C44",
        "C46",
        "C15",
        "C25",
        "C35",
        "C55",
        "C46",
        "C66",
        "C11",
        "Optional",
        "C12",
        "Optional",
        "C13",
        "Optional",
        "C14",
        "Optional",
        "C15",
        "Optional",
        "C16",
        "Optional",
        "C22",
        "Optional",
        "C23",
        "Optional",
        "C24",
        "Optional",
        "C25",
        "Optional",
        "C26",
        "Optional",
        "C33",
        "Optional",
        "C34",
        "Optional",
        "C35",
        "Optional",
        "C36",
        "Optional",
        "C44",
        "Optional",
        "C45",
        "Optional",
        "C46",
        "Optional",
        "C55",
        "Optional",
        "C56",
        "Optional",
        "C66",
        "Optional",
        "C11",
        "C12",
        "C13",
        "C14",
        "C15",
        "C16",
        "C22",
        "C23",
        "C24",
        "C25",
        "C26",
        "C33",
        "C34",
        "C35",
        "C36",
        "C44",
        "C45",
        "C46",
        "C55",
        "C56",
        "C66",
        "np",
        "array",
        "C11",
        "C12",
        "C13",
        "C14",
        "C15",
        "C16",
        "C12",
        "C22",
        "C23",
        "C24",
        "C25",
        "C26",
        "C13",
        "C23",
        "C33",
        "C34",
        "C35",
        "C36",
        "C14",
        "C24",
        "C34",
        "C44",
        "C45",
        "C46",
        "C15",
        "C25",
        "C35",
        "C45",
        "C55",
        "C56",
        "C16",
        "C26",
        "C36",
        "C46",
        "C56",
        "C66",
        "crystal_system",
        "ElasticConstants",
        "crystal_system",
        "ElasticConstants",
        "Cij",
        "Cij",
        "Cij",
        "crystal_system",
        "shear",
        "bulk",
        "crystal_system",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "crystal_system",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "crystal_system",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "crystal_system",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "crystal_system",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "ValueError",
        "crystal_system",
        "ElasticConstants",
        "c_dict",
        "crystal_system",
        "atol",
        "rtol",
        "np",
        "allclose",
        "Cij",
        "normalized_as",
        "crystal_system",
        "Cij",
        "atol",
        "atol",
        "rtol",
        "rtol",
        "model",
        "Union",
        "io",
        "IOBase",
        "DM",
        "unit",
        "Optional",
        "crystal_system",
        "Optional",
        "DM",
        "model",
        "DM",
        "model",
        "find",
        "model",
        "uc",
        "value_unit",
        "model",
        "C",
        "model",
        "C",
        "C",
        "uc",
        "value_unit",
        "C",
        "ElasticConstants",
        "c_dict",
        "Cij",
        "normalized_as",
        "crystal_system",
        "Cij",
        "DM",
        "DM",
        "model",
        "uc",
        "model",
        "normCij",
        "unit",
        "model",
        "style",
        "style",
        "bulk",
        "bulk",
        "style",
        "Cij",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "style",
        "Sij",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "ValueError",
        "style",
        "style",
        "shear",
        "shear",
        "style",
        "Cij",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "style",
        "Sij",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "ValueError"
    ],
    "literals": [
        "'verify'",
        "'float64'",
        "'Cij'",
        "'Cij cannot be specified with other keyword arguments'",
        "'Cij'",
        "'Sij'",
        "'Sij cannot be specified with other keyword arguments'",
        "'Sij'",
        "'Cij9'",
        "'Cij9 cannot be specified with other keyword arguments'",
        "'Cij9'",
        "'Cijkl'",
        "'Cijkl cannot be specified with other keyword arguments'",
        "'Cijkl'",
        "'Sijkl'",
        "'Sijkl cannot be specified with other keyword arguments'",
        "'Sijkl'",
        "'model'",
        "'C24'",
        "'C26'",
        "'C34'",
        "'C36'",
        "'C45'",
        "'C56'",
        "'C25'",
        "'C35'",
        "'C46'",
        "'C22'",
        "'C23'",
        "'C55'",
        "'C14'",
        "'C13'",
        "'C33'",
        "'C66'",
        "'C16'",
        "'C11'",
        "'C12'",
        "'C66'",
        "'Invalid argument keywords'",
        "'float64'",
        "'Cij must be 6x6'",
        "'Cij values not valid'",
        "'6x6 matrix not symmetric!'",
        "'float64'",
        "'Sij must be 6x6'",
        "'float64'",
        "'Cij9 must be 9x9'",
        "'float64'",
        "'Cijkl must be 3x3x3x3'",
        "'Cij values not valid'",
        "'float64'",
        "'Sijkl must be 3x3x3x3'",
        "'float64'",
        "'km,ln->mnkl'",
        "'ghij,ghmn,mnkl->ijkl'",
        "'isotropic requires exactly two independent moduli'",
        "'C11 and M are not independent moduli'",
        "'C12 and Lame are not independent moduli'",
        "'C44 and mu are not independent moduli'",
        "'cubic style requires C11, C12, and C66'",
        "'hexagonal style requires C13, C33, and C44'",
        "'hexagonal style requires at least two of C11, C12, and C66'",
        "'hexagonal style requires at least two of C11, C12, and C66'",
        "'dependent values not compatible: C11-C12 != 2*C66'",
        "'rhombohedral style requires C13, C14, C33, and C44'",
        "'rhombohedral style requires at least two of C11, C12, and C66'",
        "'rhombohedral style requires at least two of C11, C12, and C66'",
        "'dependent values not compatible: C11-C12 != 2*C66'",
        "'tetragonal style requires C11, C12, C13, C33, C44, and C66'",
        "'orthorhombic style requires C11, C12, C13, C22, C23, C33, C44, C55, and C66'",
        "'monoclinic style requires C11, C12, C13, C15, C22, C23, C25, C33, C35, C44, C46, C55, and C66'",
        "'triclinic style requires all 6x6 Cij where i <= j'",
        "'triclinic'",
        "'isotropic'",
        "'mu'",
        "'K'",
        "'cubic'",
        "'C11'",
        "'C12'",
        "'C44'",
        "'hexagonal'",
        "'C11'",
        "'C33'",
        "'C12'",
        "'C13'",
        "'C44'",
        "'tetragonal'",
        "'C11'",
        "'C33'",
        "'C12'",
        "'C13'",
        "'C16'",
        "'C44'",
        "'C66'",
        "'rhombohedral'",
        "'C11'",
        "'C33'",
        "'C12'",
        "'C13'",
        "'C14'",
        "'C15'",
        "'C44'",
        "'orthorhombic'",
        "'C11'",
        "'C22'",
        "'C33'",
        "'C12'",
        "'C13'",
        "'C23'",
        "'C44'",
        "'C55'",
        "'C66'",
        "'Invalid crystal_system: '",
        "'triclinic'",
        "'elastic-constants'",
        "'Cij'",
        "'Cij'",
        "'C'",
        "'C'",
        "'ij'",
        "'ij'",
        "'stiffness'",
        "'elastic-constants'",
        "'elastic-constants'",
        "'Cij'",
        "'Hill'",
        "'Hill'",
        "'Voigt'",
        "'Reuss'",
        "'Voigt'",
        "'Reuss'",
        "'Unknown estimate style'",
        "'Hill'",
        "'Hill'",
        "'Voigt'",
        "'Reuss'",
        "'Voigt'",
        "'Reuss'",
        "'Unknown estimate style'"
    ],
    "variables": [
        "verify",
        "__c_ij",
        "Cij",
        "Sij",
        "Cij9",
        "Cijkl",
        "Sijkl",
        "value",
        "value",
        "__c_ij",
        "value",
        "Cij",
        "c",
        "value",
        "Cij",
        "c",
        "c",
        "indexes",
        "i",
        "j",
        "k",
        "l",
        "Cij",
        "s",
        "s",
        "s",
        "s",
        "indexes",
        "i",
        "j",
        "k",
        "l",
        "Sij",
        "axes",
        "T",
        "Q",
        "C",
        "C",
        "kwargcount",
        "C11",
        "C12",
        "C44",
        "C44",
        "S",
        "C44",
        "C44",
        "C44",
        "C12",
        "R",
        "C44",
        "C44",
        "C44",
        "C12",
        "C12",
        "C12",
        "C12",
        "C44",
        "C12",
        "C44",
        "C12",
        "C44",
        "C11",
        "Cij",
        "Cij",
        "C11",
        "C12",
        "C66",
        "Cij",
        "C11",
        "C12",
        "C66",
        "Cij",
        "Cij",
        "Cij",
        "Cij",
        "Cij",
        "c",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "c_dict",
        "model",
        "Cij",
        "c_dict",
        "key",
        "c_dict",
        "key",
        "Cij",
        "normCij",
        "model",
        "model",
        "c",
        "s",
        "c",
        "s"
    ],
    "comments": [
        "coding: utf-8",
        "Standard Python libraries",
        "http://www.numpy.org/",
        "https://github.com/usnistgov/DataModelDict",
        "atomman imports",
        "Pop verify if needed",
        "Initialize for no arguments",
        "Initialize for matrix arguments",
        "Initialize using data model",
        "Initialize for individually specified parameters by standard representation",
        "Zero out near-zero terms",
        "Check symmetry",
        "Check symmetry",
        "Check symmetry",
        "Check symmetry",
        "Count moduli with values",
        "Handle equivalent terms",
        "C11 + (something) combinations",
        "Get C44 from C11 and C12",
        "Find C44 then get C12",
        "else: C44 is not None",
        "Combinations without C11: find C12 and C44 then get C11",
        "C12 + (something) combinations",
        "else: C44 is not None",
        "C44 + (something) combinations",
        "K is not None",
        "Others + (something) combinations",
        "K is not None",
        "if K is not None:",
        "Build Cij array",
        "Build Cij array",
        "Calculate missing C11, C12 or C66",
        "Verify 2 * C66 = C11 - C12",
        "Build Cij array",
        "Calculate missing C11, C12 or C66",
        "Verify 2 * C66 = C11 - C12",
        "Build Cij array",
        "Build Cij array",
        "Build Cij array",
        "Build Cij array",
        "Build Cij array",
        "Set values if model given",
        "Find elastic-constants element",
        "Read in values",
        "New format",
        "Old format",
        "Return DataModelDict if model not given"
    ],
    "docstrings": [
        "\"\"\"Class for storing and converting elastic constant values\"\"\"",
        "\"\"\"\n        Initializes an ElasticConstants instance from one of the parameter\n        options.\n        \n        Parameters\n        ----------\n        Cij : numpy.ndarray\n            (6, 6) array of Voigt representation of elastic stiffness.\n        Sij : numpy.ndarray\n            (6, 6) array of Voigt representation of elastic compliance.\n        Cij9 : numpy.ndarray\n            (9, 9) array representation of elastic stiffness.\n        Cijkl : numpy.ndarray\n            (3, 3, 3, 3) array representation of elastic stiffness.\n        Sijkl : numpy.ndarray\n            (3, 3, 3, 3) array representation of elastic compliance.\n        model : DataModelDict, string, or file-like object \n            Data model containing elastic constants.\n        C11, C12, ... C66 : float\n            Individual components of Cij for a standardized representation:\n            isotropic: C11, C12, C44 (2*C44=C11-C12)\n            cubic: C11, C12, C44\n            hexagonal: C11, C12, C13, C33, C44, C66 (2*C66=C11-C12)\n            tetragonal: C11, C12, C13, C16, C33, C44, C66 (C16 optional)\n            rhombohedral: C11, C12, C13, C14, C15, C33, C44, C66 (2*C66=C11-C12, C15 optional)\n            orthorhombic: C11, C12, C13, C22, C23, C33, C44, C55, C66\n            monoclinic: C11, C12, C13, C15, C22, C23, C25, C33, C35, C44, C46, C55, C66\n            triclinic: all Cij where i <= j\n        M, Lame, mu, E, nu, K : float\n            Individual isotropic elastic moduli that can be used instead.\n        verify : bool, optional\n            Used with hexagonal and rhombohedral Cij sets.  If True (default) then values\n            of the non-independent moduli C11, C12, C66 will be checked for compatibility\n            if all three are given.\n        \"\"\"",
        "\"\"\"Calling string returns str(self.Cij).\"\"\"",
        "\"\"\"The stiffness constants in Voigt 6x6 format\"\"\"",
        "\"\"\"The compliance constants in Voigt 6x6 format\"\"\"",
        "\"\"\"The stiffness constants in 9x9 format\"\"\"",
        "\"\"\"The stiffness constants in 3x3x3x3 format\"\"\"",
        "\"\"\"The compliance constants in 3x3x3x3 format\"\"\"",
        "\"\"\"\n        Transforms the elastic constant matrix based on the supplied axes.\n        \n        Parameters\n        ----------\n        axes : numpy.ndarray\n            (3, 3) array giving three right-handed orthogonal vectors to use\n            for transforming.\n        tol : float, optional\n            Relative tolerance to use in identifying near-zero terms.\n            \n        Returns\n        -------\n        ElasticConstants\n            A new ElasticConstants object that has been transformed.\n        \"\"\"",
        "\"\"\"\n        Set values with two independent isotropic moduli.\n        \n        Parameters\n        ----------\n        C11 : float, optional\n            C11 component of Cij.\n        C12 : float, optional\n            C12 component of Cij.\n        C44 : float, optional\n            C44 component of Cij.\n        M : float, optional\n            P-wave modulus(Equivalent to C11).\n        Lame : float, optional\n            Lame's first parameter (Equivalent to C12).\n        mu : float, optional\n            Shear modulus (Equivalent to C44).\n        E : float, optional\n            Young's modulus\n        nu : float, optional\n            Poisson's ratio\n        K : float, optional\n            Bulk modulus\n        \"\"\"",
        "\"\"\"\n        Set values with three independent cubic moduli.\n        \n        Parameters\n        ----------\n        C11 : float\n            C11 component of Cij.\n        C12 : float\n            C12 component of Cij.\n        C44 : float\n            C44 component of Cij.\n        \"\"\"",
        "\"\"\"\n        Set values with five independent hexagonal moduli.\n        (2 * C66 = C11 - C12)\n        \n        Parameters\n        ----------\n        C11 : float, optional\n            C11 component of Cij.\n        C12 : float, optional\n            C12 component of Cij.\n        C13 : float\n            C13 component of Cij.\n        C33 : float\n            C33 component of Cij.\n        C44 : float\n            C44 component of Cij.\n        C66 : float, optional\n            C66 component of Cij.\n        verify : bool, optional\n            If True (default), the values of the non-independent moduli C11,\n            C12, and C66 will be checked for compatibility if all are given.\n        \"\"\"",
        "\"\"\"\n        Set values with six or seven independent rhombohedral moduli. \n        (2 * C66 = C11 - C12)\n        \n        Parameters\n        ----------\n        C11 : float, optional\n            C11 component of Cij.\n        C12 : float, optional\n            C12 component of Cij.\n        C13 : float\n            C13 component of Cij.\n        C14 : float\n            C14 component of Cij.\n        C15 : float, optional\n            C15 component of Cij.\n        C33 : float\n            C33 component of Cij.\n        C44 : float\n            C44 component of Cij.\n        C66 : float, optional\n            C66 component of Cij.\n        verify : bool, optional\n            If True, the values of the non-independent moduli C11, C12, C66\n            will be checked for compatibility.\n        \"\"\"",
        "\"\"\"\n        Set values with six or seven independent tetragonal moduli.\n        \n        Parameters\n        ----------\n        C11 : float\n            C11 component of Cij.\n        C12 : float\n            C12 component of Cij.\n        C13 : float\n            C13 component of Cij.\n        C16 : float, optional\n            C16 component of Cij.\n        C33 : float\n            C33 component of Cij.\n        C44 : float\n            C44 component of Cij.\n        C66 : float\n            C66 component of Cij.\n        \"\"\"",
        "\"\"\"\n        Set values with nine independent orthorhombic moduli.\n        \n        Parameters\n        ----------\n        C11 : float\n            C11 component of Cij.\n        C12 : float\n            C12 component of Cij.\n        C13 : float\n            C13 component of Cij.\n        C22 : float\n            C22 component of Cij.\n        C23 : float\n            C23 component of Cij.\n        C33 : float\n            C33 component of Cij.\n        C44 : float\n            C44 component of Cij.\n        C55 : float\n            C55 component of Cij.\n        C66 : float\n            C66 component of Cij.\n        \"\"\"",
        "\"\"\"\n        Set values with thirteen independent monoclinic moduli.\n        \n        Parameters\n        ----------\n        C11 : float\n            C11 component of Cij.\n        C12 : float\n            C12 component of Cij.\n        C13 : float\n            C13 component of Cij.\n        C15 : float\n            C15 component of Cij.\n        C22 : float\n            C22 component of Cij.\n        C23 : float\n            C23 component of Cij.\n        C25 : float\n            C25 component of Cij.\n        C33 : float\n            C33 component of Cij.\n        C35 : float\n            C35 component of Cij.\n        C44 : float\n            C44 component of Cij.\n        C46 : float\n            C46 component of Cij.\n        C55 : float\n            C55 component of Cij.\n        C66 : float\n            C66 component of Cij.\n        \"\"\"",
        "\"\"\"\n        Set values with twenty one independent triclinic moduli\n        \n        Parameters\n        ----------\n        C11 : float\n            C11 component of Cij.\n        C12 : float\n            C12 component of Cij.\n        C13 : float\n            C13 component of Cij.\n        C14 : float\n            C14 component of Cij.\n        C15 : float\n            C15 component of Cij.\n        C16 : float\n            C16 component of Cij.\n        C22 : float\n            C22 component of Cij.\n        C23 : float\n            C23 component of Cij.\n        C24 : float\n            C24 component of Cij.\n        C25 : float\n            C25 component of Cij.\n        C26 : float\n            C26 component of Cij.\n        C33 : float\n            C33 component of Cij.\n        C34 : float\n            C34 component of Cij.\n        C35 : float\n            C35 component of Cij.\n        C36 : float\n            C36 component of Cij.\n        C44 : float\n            C44 component of Cij.\n        C45 : float\n            C45 component of Cij.\n        C46 : float\n            C46 component of Cij.\n        C55 : float\n            C55 component of Cij.\n        C56 : float\n            C56 component of Cij.\n        C66 : float\n            C66 component of Cij.\n        \"\"\"",
        "\"\"\"\n        Returns a new ElasticConstants object where values of the current are\n        averaged or zeroed out according to a standard crystal system setting.\n        NOTE: no validation checks are made to evaluate whether such\n        normalizations should be done! That is left up to you (compare values\n        before and after normalization).\n        \n        Parameters\n        ----------\n        crystal_system : str\n            Indicates the crystal system representation to use when building a\n            data model.\n            \n        Returns\n        -------\n        atomman.ElasticConstants\n            The elastic constants normalized according to the crystal system\n            symmetries.\n        \"\"\"",
        "\"\"\"\n        Checks if current elastic constants agree with values normalized to\n        a specified crystal family (within tolerances).\n        \n        Parameters\n        ----------\n        crystal_system : str\n            Indicates the crystal system representation to use when building a\n            data model.\n        atol : float, optional\n            Absolute tolerance to use.  Default value is 1e-4.\n        rtol : float, optional\n            Relative tolerance to use.  Default value is 1e-4.\n        \n        Returns\n        -------\n        bool\n            True if all Cij match within the tolerances, false otherwise.\n        \"\"\"",
        "\"\"\"\n        Return or set DataModelDict representation of the elastic constants.\n        \n        Parameters\n        ----------\n        model : DataModelDict, string, or file-like object, optional\n            Data model containing exactly one 'elastic-constants' branch to\n            read.\n        unit : str, optional\n            Units or pressure to save values in when building a data model.\n            Default value is None (no conversion).\n        crystal_system : str, optional\n            Indicates the crystal system representation to normalize by.\n            Default value is 'triclinic', i.e. no normalization.\n        \n        Returns\n        -------\n        DataModelDict\n            If model is not given as a parameter.\n        \"\"\"",
        "\"\"\"\n        Returns a bulk modulus estimate.\n        \n        Parameters\n        ----------\n        style : str\n            Indicates which style of estimate to use.  Default value is 'Hill'.\n            - 'Hill' -- Hill estimate (average of Voigt and Reuss).\n            - 'Voigt' -- Voigt estimate. Uses Cij.\n            - 'Reuss' -- Reuss estimate. Uses Sij.\n        \"\"\"",
        "\"\"\"\n        Returns a shear modulus estimate.\n        \n        Parameters\n        ----------\n        style : str\n            Indicates which style of estimate to use.  Default value is 'Hill'.\n            - 'Hill' -- Hill estimate (average of Voigt and Reuss).\n            - 'Voigt' -- Voigt estimate. Uses Cij.\n            - 'Reuss' -- Reuss estimate. Uses Sij.\n        \"\"\""
    ],
    "functions": [
        "__str__",
        "Cij",
        "Cij",
        "Sij",
        "Sij",
        "Cij9",
        "Cij9",
        "Cijkl",
        "Cijkl",
        "Sijkl",
        "Sijkl",
        "transform",
        "isotropic",
        "cubic",
        "hexagonal",
        "rhombohedral",
        "tetragonal",
        "orthorhombic",
        "monoclinic",
        "triclinic",
        "normalized_as",
        "is_normal",
        "model",
        "bulk",
        "shear"
    ],
    "classes": [
        "ElasticConstants"
    ]
}