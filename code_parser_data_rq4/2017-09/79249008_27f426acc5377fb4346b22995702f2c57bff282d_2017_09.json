{
    "identifiers": [
        "absolute_import",
        "division",
        "print_function",
        "numpy",
        "np",
        "tensorflow",
        "tf",
        "tf",
        "logging",
        "set_verbosity",
        "tf",
        "logging",
        "INFO",
        "features",
        "labels",
        "mode",
        "tf",
        "reshape",
        "features",
        "tf",
        "layers",
        "conv2d",
        "inputs",
        "input_layer",
        "filters",
        "kernel_size",
        "padding",
        "activation",
        "tf",
        "nn",
        "relu",
        "tf",
        "layers",
        "conv2d",
        "inputs",
        "conv1",
        "filters",
        "kernel_size",
        "padding",
        "activation",
        "tf",
        "nn",
        "relu",
        "tf",
        "reshape",
        "conv2",
        "tf",
        "layers",
        "dense",
        "inputs",
        "conv2_flat",
        "units",
        "activation",
        "tf",
        "nn",
        "relu",
        "tf",
        "layers",
        "dropout",
        "inputs",
        "dense",
        "rate",
        "training",
        "mode",
        "tf",
        "estimator",
        "ModeKeys",
        "TRAIN",
        "tf",
        "layers",
        "dense",
        "inputs",
        "dropout",
        "units",
        "tf",
        "argmax",
        "input",
        "logits",
        "axis",
        "tf",
        "nn",
        "softmax",
        "logits",
        "name",
        "mode",
        "tf",
        "estimator",
        "ModeKeys",
        "PREDICT",
        "tf",
        "estimator",
        "EstimatorSpec",
        "mode",
        "mode",
        "predictions",
        "predictions",
        "tf",
        "one_hot",
        "indices",
        "tf",
        "cast",
        "labels",
        "tf",
        "int32",
        "depth",
        "tf",
        "losses",
        "softmax_cross_entropy",
        "onehot_labels",
        "onehot_labels",
        "logits",
        "logits",
        "mode",
        "tf",
        "estimator",
        "ModeKeys",
        "TRAIN",
        "tf",
        "train",
        "GradientDescentOptimizer",
        "learning_rate",
        "optimizer",
        "minimize",
        "loss",
        "loss",
        "global_step",
        "tf",
        "train",
        "get_global_step",
        "tf",
        "estimator",
        "EstimatorSpec",
        "mode",
        "mode",
        "loss",
        "loss",
        "train_op",
        "train_op",
        "tf",
        "metrics",
        "accuracy",
        "labels",
        "labels",
        "predictions",
        "predictions",
        "tf",
        "estimator",
        "EstimatorSpec",
        "mode",
        "mode",
        "loss",
        "loss",
        "eval_metric_ops",
        "eval_metric_ops",
        "unused_argv",
        "open",
        "line",
        "input_fo",
        "line",
        "line",
        "split",
        "i",
        "temp_data",
        "append",
        "np",
        "float32",
        "temp",
        "i",
        "data",
        "append",
        "temp_data",
        "temp",
        "temp",
        "temp",
        "temp",
        "label",
        "append",
        "temp_label",
        "np",
        "asarray",
        "data",
        "np",
        "asarray",
        "label",
        "np",
        "asarray",
        "data",
        "np",
        "asarray",
        "label",
        "tf",
        "estimator",
        "Estimator",
        "model_fn",
        "cnn_model_fn",
        "model_dir",
        "tf",
        "train",
        "LoggingTensorHook",
        "tensors",
        "tensors_to_log",
        "every_n_iter",
        "tf",
        "estimator",
        "inputs",
        "numpy_input_fn",
        "x",
        "train_data",
        "y",
        "train_labels",
        "batch_size",
        "num_epochs",
        "shuffle",
        "mnist_classifier",
        "train",
        "input_fn",
        "train_input_fn",
        "steps",
        "hooks",
        "logging_hook",
        "tf",
        "estimator",
        "inputs",
        "numpy_input_fn",
        "x",
        "eval_data",
        "y",
        "eval_labels",
        "num_epochs",
        "shuffle",
        "mnist_classifier",
        "evaluate",
        "input_fn",
        "eval_input_fn",
        "eval_results",
        "tf",
        "app",
        "run"
    ],
    "literals": [
        "\"x\"",
        "\"same\"",
        "\"same\"",
        "\"classes\"",
        "\"probabilities\"",
        "\"softmax_tensor\"",
        "\"accuracy\"",
        "\"classes\"",
        "\"output.txt\"",
        "'r'",
        "'\\n'",
        "'   '",
        "'a'",
        "'d'",
        "'w'",
        "'s'",
        "\"/tmp/2048_model\"",
        "\"probabilities\"",
        "\"softmax_tensor\"",
        "\"x\"",
        "\"x\"",
        "\"__main__\""
    ],
    "variables": [
        "input_layer",
        "conv1",
        "conv2",
        "conv2_flat",
        "dense",
        "dropout",
        "logits",
        "predictions",
        "onehot_labels",
        "loss",
        "optimizer",
        "train_op",
        "eval_metric_ops",
        "input_fo",
        "data",
        "label",
        "temp",
        "temp_data",
        "temp_label",
        "temp_label",
        "temp_label",
        "temp_label",
        "temp_label",
        "train_data",
        "train_labels",
        "eval_data",
        "eval_labels",
        "mnist_classifier",
        "tensors_to_log",
        "logging_hook",
        "train_input_fn",
        "eval_input_fn",
        "eval_results"
    ],
    "comments": [
        "Copyright 2016 The TensorFlow Authors. All Rights Reserved.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Input Layer",
        "Reshape X to 4-D tensor: [batch_size, width, height, channels]",
        "MNIST images are 28x28 pixels, and have one color channel",
        "Convolutional Layer #1",
        "Computes 32 features using a 5x5 filter with ReLU activation.",
        "Padding is added to preserve width and height.",
        "Input Tensor Shape: [batch_size, 28, 28, 1]",
        "Output Tensor Shape: [batch_size, 28, 28, 32]",
        "Pooling Layer #1",
        "First max pooling layer with a 2x2 filter and stride of 2",
        "Input Tensor Shape: [batch_size, 28, 28, 32]",
        "Output Tensor Shape: [batch_size, 14, 14, 32]",
        "not pooling anymore pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)",
        "Convolutional Layer #2",
        "Computes 64 features using a 5x5 filter.",
        "Padding is added to preserve width and height.",
        "Input Tensor Shape: [batch_size, 14, 14, 32]",
        "Output Tensor Shape: [batch_size, 14, 14, 64]",
        "Pooling Layer #2",
        "Second max pooling layer with a 2x2 filter and stride of 2",
        "Input Tensor Shape: [batch_size, 14, 14, 64]",
        "Output Tensor Shape: [batch_size, 7, 7, 64]",
        "not pooling anymore pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)",
        "Flatten tensor into a batch of vectors",
        "Input Tensor Shape: [batch_size, 7, 7, 64]",
        "Output Tensor Shape: [batch_size, 7 * 7 * 64]",
        "Dense Layer",
        "Densely connected layer with 1024 neurons",
        "Input Tensor Shape: [batch_size, 7 * 7 * 64]",
        "Output Tensor Shape: [batch_size, 1024]",
        "Add dropout operation; 0.6 probability that element will be kept",
        "Logits layer",
        "Input Tensor Shape: [batch_size, 1024]",
        "Output Tensor Shape: [batch_size, 10]",
        "Generate predictions (for PREDICT and EVAL mode)",
        "Add `softmax_tensor` to the graph. It is used for PREDICT and by the",
        "`logging_hook`.",
        "Calculate Loss (for both TRAIN and EVAL modes)",
        "Configure the Training Op (for TRAIN mode)",
        "Add evaluation metrics (for EVAL mode)",
        "Load training and eval data",
        "Create the Estimator",
        "Set up logging for predictions",
        "Log the values in the \"Softmax\" tensor with label \"probabilities\"",
        "Train the model",
        "Evaluate the model and print results"
    ],
    "docstrings": [
        "\"\"\"Convolutional Neural Network Estimator for MNIST, built with tf.layers.\"\"\"",
        "\"\"\"Model function for CNN.\"\"\""
    ],
    "functions": [
        "cnn_model_fn",
        "main"
    ],
    "classes": []
}