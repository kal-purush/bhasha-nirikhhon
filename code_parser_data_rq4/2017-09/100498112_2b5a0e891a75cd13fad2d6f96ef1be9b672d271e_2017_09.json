{
    "identifiers": [
        "NgxPermissionsGuard",
        "async",
        "fakeAsync",
        "inject",
        "TestBed",
        "NgxPermissionsService",
        "NgxRolesService",
        "NgxPermissionsModule",
        "ActivatedRouteSnapshot",
        "Router",
        "RouterStateSnapshot",
        "tick",
        "RouterTestingModule",
        "describe",
        "beforeEach",
        "TestBed",
        "NgxPermissionsModule",
        "beforeEach",
        "inject",
        "NgxPermissionsService",
        "NgxRolesService",
        "service",
        "rolesService",
        "fakeRouter",
        "spyOn",
        "fakeRouter",
        "service",
        "permissionGuard",
        "NgxPermissionsGuard",
        "service",
        "rolesService",
        "fakeRouter",
        "it",
        "expect",
        "permissionGuard",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "expect",
        "permissionGuard",
        "route",
        "it",
        "fakeAsync",
        "route",
        "expect",
        "permissionGuard",
        "route",
        "describe",
        "beforeEach",
        "TestBed",
        "NgxPermissionsModule",
        "beforeEach",
        "inject",
        "NgxPermissionsService",
        "NgxRolesService",
        "service",
        "rolesService",
        "fakeRouter",
        "spyOn",
        "fakeRouter",
        "service",
        "permissionGuard",
        "NgxPermissionsGuard",
        "service",
        "rolesService",
        "fakeRouter",
        "it",
        "expect",
        "permissionGuard",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "describe",
        "beforeEach",
        "TestBed",
        "NgxPermissionsModule",
        "beforeEach",
        "inject",
        "NgxPermissionsService",
        "NgxRolesService",
        "service",
        "rolesService",
        "fakeRouter",
        "spyOn",
        "fakeRouter",
        "service",
        "permissionGuard",
        "NgxPermissionsGuard",
        "service",
        "rolesService",
        "fakeRouter",
        "it",
        "expect",
        "permissionGuard",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "describe",
        "beforeEach",
        "TestBed",
        "NgxPermissionsModule",
        "RouterTestingModule",
        "route",
        "awesome",
        "beforeEach",
        "inject",
        "NgxPermissionsService",
        "NgxRolesService",
        "service",
        "rolesService",
        "router",
        "fakeRouter",
        "service",
        "spyOn",
        "fakeRouter",
        "permissionGuard",
        "NgxPermissionsGuard",
        "service",
        "rolesService",
        "fakeRouter",
        "it",
        "expect",
        "permissionGuard",
        "it",
        "fakeAsync",
        "route",
        "route",
        "awesome",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "route",
        "awesome",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "route",
        "awesome",
        "route",
        "route",
        "awesome",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "route",
        "awesome",
        "route",
        "route",
        "awesome",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "describe",
        "beforeEach",
        "TestBed",
        "NgxPermissionsModule",
        "RouterTestingModule",
        "route",
        "awesome",
        "beforeEach",
        "inject",
        "NgxPermissionsService",
        "NgxRolesService",
        "service",
        "rolesService",
        "router",
        "fakeRouter",
        "service",
        "spyOn",
        "fakeRouter",
        "permissionGuard",
        "NgxPermissionsGuard",
        "service",
        "rolesService",
        "fakeRouter",
        "it",
        "expect",
        "permissionGuard",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "rejectedPermission",
        "route",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "rejectedPermission",
        "route",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "describe",
        "beforeEach",
        "TestBed",
        "NgxPermissionsModule",
        "beforeEach",
        "inject",
        "NgxPermissionsService",
        "NgxRolesService",
        "service",
        "rolesService",
        "fakeRouter",
        "service",
        "fakeService",
        "service",
        "spyOn",
        "fakeRouter",
        "permissionGuard",
        "NgxPermissionsGuard",
        "service",
        "rolesService",
        "fakeRouter",
        "it",
        "expect",
        "permissionGuard",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "describe",
        "beforeEach",
        "TestBed",
        "NgxPermissionsModule",
        "beforeEach",
        "inject",
        "NgxPermissionsService",
        "NgxRolesService",
        "service",
        "rolesService",
        "fakeRouter",
        "service",
        "fakeService",
        "service",
        "spyOn",
        "fakeRouter",
        "permissionGuard",
        "NgxPermissionsGuard",
        "service",
        "rolesService",
        "fakeRouter",
        "it",
        "expect",
        "permissionGuard",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "describe",
        "beforeEach",
        "TestBed",
        "NgxPermissionsModule",
        "beforeEach",
        "inject",
        "NgxPermissionsService",
        "NgxRolesService",
        "service",
        "rolesService",
        "fakeRouter",
        "service",
        "fakeService",
        "service",
        "spyOn",
        "fakeRouter",
        "permissionGuard",
        "NgxPermissionsGuard",
        "service",
        "rolesService",
        "fakeRouter",
        "it",
        "expect",
        "permissionGuard",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "failedPermissionName",
        "b",
        "c",
        "failedPermissionName",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "failedPermissionName",
        "b",
        "c",
        "failedPermissionName",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "it",
        "fakeAsync",
        "fakeService",
        "route",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "describe",
        "beforeEach",
        "TestBed",
        "NgxPermissionsModule",
        "beforeEach",
        "inject",
        "NgxPermissionsService",
        "NgxRolesService",
        "service",
        "rolesService",
        "fakeRouter",
        "service",
        "fakeService",
        "service",
        "spyOn",
        "fakeRouter",
        "permissionGuard",
        "NgxPermissionsGuard",
        "service",
        "rolesService",
        "fakeRouter",
        "it",
        "expect",
        "permissionGuard",
        "it",
        "fakeAsync",
        "route",
        "failedPermission",
        "route",
        "failedPermission",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "failedPermission",
        "route",
        "failedPermission",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter",
        "it",
        "fakeAsync",
        "route",
        "failedPermission",
        "route",
        "failedPermission",
        "permissionGuard",
        "route",
        "data",
        "expect",
        "data",
        "expect",
        "fakeRouter"
    ],
    "literals": [
        "'./permissions-guard.service'",
        "'@angular/core/testing'",
        "'../service/permissions.service'",
        "'../service/roles.service'",
        "'../index'",
        "'@angular/router'",
        "\"@angular/core/testing\"",
        "'@angular/router/testing'",
        "'Permissions guard only'",
        "'navigate'",
        "'ADMIN'",
        "'should create an instance'",
        "'sholud return true when only fullfills'",
        "'ADMIN'",
        "'sholud return false when only doesnt match'",
        "'DOESNT MATCH'",
        "'sholud return false when only doesnt match and navigate to 404'",
        "'DOESNT MATCH'",
        "'./404'",
        "'./404'",
        "'should return false when only doesnt match and navigate to array 404'",
        "'DOESNT MATCH'",
        "'./404'",
        "'./404'",
        "'should return true when neither only not except specified'",
        "''",
        "''",
        "'./404'",
        "'should return true when neither only not except specified as array'",
        "'./404'",
        "'Permissions guard Except'",
        "'navigate'",
        "'MANAGER'",
        "'should create an instance'",
        "'sholud return false when except matches'",
        "'MANAGER'",
        "'sholud return false when except matches and redirectTo 404'",
        "'MANAGER'",
        "'./404'",
        "'./404'",
        "'sholud return false when except matches at least one array'",
        "\"MANAGER\"",
        "'Something else'",
        "'sholud return false when except matches in array and redirectTo 404'",
        "\"MANAGER\"",
        "'Something else'",
        "'./404'",
        "'./404'",
        "'sholud return true when except doesn\"t match'",
        "'DOESNT MATCH'",
        "'sholud return true when any in array doesn\"t match'",
        "'DOESNT MATCH'",
        "\"AWESOME\"",
        "'Permissions guard Except and only together'",
        "'navigate'",
        "'MANAGER'",
        "'should create an instance'",
        "'sholud return false when except matches and it should not check only and redirect to 404'",
        "'MANAGER'",
        "'AWESOME'",
        "'./404'",
        "'./404'",
        "'should return false when except matches at least one array'",
        "\"MANAGER\"",
        "'Something else'",
        "'AWESOME'",
        "'sholud return true when except doesn\"t match but only matcher'",
        "'DOESNT MATCH'",
        "\"MANAGER\"",
        "'sholud return true when any in array doesn\"t match but only matches'",
        "'DOESNT MATCH'",
        "\"AWESOME\"",
        "'MANAGER'",
        "'AWESOME'",
        "'sholud return false when except in array doesn\"t match and only also doesn\"t matches'",
        "'DOESNT MATCH'",
        "\"AWESOME\"",
        "'gg'",
        "'AWESOME'",
        "'./404'",
        "'./404'",
        "'Permissions guard use only dynamically'",
        "'crisis-center/:id'",
        "'404'",
        "'MANAGER'",
        "'navigate'",
        "'should create an instance'",
        "'sholud return true when only matches and it should not check only'",
        "'MANAGER'",
        "'notManager'",
        "'crisis-center/44'",
        "'should return true when except matches and it should '",
        "'doesntInclude'",
        "'MANAGER'",
        "'notManager'",
        "'crisis-center/44'",
        "'should return true when except doens\"t match but only matches it should  true'",
        "'doesntInclude'",
        "'MANAGER'",
        "'notManager'",
        "'44'",
        "'MANAGER'",
        "'notManager'",
        "'crisis-center/44'",
        "'should return true when except doens\"t match but only matches it should true'",
        "'doesntInclude'",
        "'MANAGER'",
        "'notManager'",
        "'gg'",
        "'MANAGER'",
        "'notManager'",
        "'/404'",
        "'crisis-center/44'",
        "'/404'",
        "'Permissions guard test redirectTo path parameters dynamically'",
        "'crisis-center/:id'",
        "'404'",
        "'123'",
        "'MANAGER'",
        "'navigate'",
        "'should create an instance'",
        "'sholud redirect to parameters specified on navigation commands and navigationExtras'",
        "\"TIED\"",
        "'123'",
        "'crisis-center/44'",
        "'123'",
        "'sholud redirect to parameters specified in navigation commands and navigationExtras'",
        "\"TIED\"",
        "'123'",
        "'crisis-center/44'",
        "'123'",
        "'except sholud redirect to parameters specified in navigation commands and navigationExtras'",
        "\"MANAGER\"",
        "'123'",
        "'crisis-center/44'",
        "'123'",
        "'Permissions guard test redirectTo path multiple redirectionRule'",
        "'canReadAgenda'",
        "'navigate'",
        "'should create an instance'",
        "'sholud redirect dashboard can canRead Agenda fullfils can edit agenda fails'",
        "'canEditAgenda'",
        "'canReadAgenda'",
        "\"canRun\"",
        "'agendaList'",
        "'dashboard'",
        "'login'",
        "'crisis-center/44'",
        "'agendaList'",
        "'sholud redirect to run when there is permission canRun and it fails'",
        "'canEditAgenda'",
        "\"canRun\"",
        "'canReadAgenda'",
        "'canEditAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'agendaList'",
        "'sholud path when nothing fails'",
        "'canEditAgenda'",
        "'aweomse'",
        "'awesome'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'redirect to default route when it fails but there is no redirect rule for that permission'",
        "'canReadAgenda'",
        "'canEditAgenda'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'login'",
        "'redirect to only failed route when except passes but only fails'",
        "'canEditAgenda'",
        "'canRunAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'dashboard'",
        "'path if except and only passes'",
        "'canRunAgenda'",
        "'canEditAgenda'",
        "'canRunAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'redirect fail on can editAgenda and redirect to dashboard'",
        "'canReadAgenda'",
        "'canEditAgenda'",
        "\"canRun\"",
        "'agendaList'",
        "'dashboard'",
        "'login'",
        "'crisis-center/44'",
        "'dashboard'",
        "'redirect to dashboard when canEdit agenda fails only'",
        "'canReadAgenda'",
        "'canEditAgenda'",
        "\"canRun\"",
        "'agendaList'",
        "'dashboard'",
        "'login'",
        "'crisis-center/44'",
        "'dashboard'",
        "'redirect to dashboard when canEdit agenda fails with objectProperty only'",
        "'canReadAgenda'",
        "'canEditAgenda'",
        "\"canRun\"",
        "'agendaList'",
        "'123'",
        "'login'",
        "'crisis-center/44'",
        "'123'",
        "'should redirect to 123 when redirect to multiple and used as function'",
        "'canReadAgenda'",
        "'canEditAgenda'",
        "\"canRun\"",
        "'agendaList'",
        "'123'",
        "'login'",
        "'crisis-center/44'",
        "'123'",
        "'redirect to default when only fails but there is no redirection rule'",
        "'canEditAgenda'",
        "'canReadAgenda'",
        "'canEditAgenda'",
        "'Can run'",
        "'agendaList'",
        "'dashboard'",
        "'login'",
        "'crisis-center/44'",
        "'login'",
        "'sholud path when nothing fails in only blaock'",
        "'canEditAgenda'",
        "'canEditAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'Permissions guard test redirectTo path multiple redirectionRule permissions load as string'",
        "'canReadAgenda'",
        "'navigate'",
        "'should create an instance'",
        "'sholud redirect dashboard can canRead Agenda fullfils can edit agenda fails'",
        "'canReadAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'login'",
        "'crisis-center/44'",
        "'agendaList'",
        "'sholud redirect to run when there is permission canRun and it fails'",
        "'canEditAgenda'",
        "\"DELETE\"",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'run'",
        "'sholud path when nothing fails'",
        "'canEditAgenda'",
        "'aweomse'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'redirect to default route when except fails but there is no redirect rule for that permission'",
        "'canReadAgenda'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'login'",
        "'redirect to only failed route when except passes but only fails'",
        "'canEditAgenda'",
        "'canRunAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'dashboard'",
        "'path if except and only passes'",
        "'canRunAgenda'",
        "'canEditAgenda'",
        "'canRunAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'sholud path when nothing fails in only blaock'",
        "'canEditAgenda'",
        "'canEditAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'Permissions guard test redirectTo path dynamic redirectionRule permissions load as string'",
        "'canReadAgenda'",
        "'navigate'",
        "'should create an instance'",
        "'sholud redirect dashboard can canRead Agenda fullfils can edit agenda fails'",
        "'canReadAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'login'",
        "'crisis-center/44'",
        "'agendaList'",
        "'sholud redirect to run when there is permission canRun and it fails'",
        "'canEditAgenda'",
        "\"DELETE\"",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'run'",
        "'sholud path when nothing fails'",
        "'canEditAgenda'",
        "'aweomse'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'redirect to default route when except fails but there is no redirect rule for that permission'",
        "'canReadAgenda'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'login'",
        "'redirect to only failed route when except passes but only fails'",
        "'canEditAgenda'",
        "'canRunAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'dashboard'",
        "'redirect to only failed route when except passes but only fails called as function'",
        "'canEditAgenda'",
        "'canRunAgenda'",
        "'agendaList'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'canRunAgenda'",
        "'redirect to except failed route when except dont pass as a function'",
        "'canReadAgenda'",
        "'canRunAgenda'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'canReadAgenda'",
        "'path if except and only passes'",
        "'canRunAgenda'",
        "'canEditAgenda'",
        "'canRunAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'sholud path when nothing fails in only blaock'",
        "'canEditAgenda'",
        "'canEditAgenda'",
        "'agendaList'",
        "'dashboard'",
        "'run'",
        "'login'",
        "'crisis-center/44'",
        "'Permissions guard test redirectTo as function'",
        "'canReadAgenda'",
        "'navigate'",
        "'should create an instance'",
        "'sholud redirect dashboard can canRead Agenda fullfils can edit agenda fails'",
        "'canEditAgenda'",
        "'canReadAgenda'",
        "\"canRun\"",
        "'crisis-center/44'",
        "'canReadAgenda'",
        "'it should dynamically redirect to failed route redirectoTo as fucntion'",
        "\"canRun\"",
        "'crisis-center/44'",
        "'canRun'",
        "'it should dynamically redirect to failed route redirectoTo as fucntion when except pass only fails'",
        "'nice'",
        "\"canRun\"",
        "'crisis-center/44'",
        "'canRun'"
    ],
    "variables": [
        "permissionGuard",
        "route",
        "fakeRouter",
        "permissionGuard",
        "fakeRouter",
        "route",
        "permissionGuard",
        "fakeRouter",
        "route",
        "permissionGuard",
        "fakeRouter",
        "route",
        "testRouter",
        "permissionGuard",
        "fakeRouter",
        "route",
        "testRouter",
        "permissionGuard",
        "fakeRouter",
        "route",
        "testRouter",
        "fakeService",
        "permissionGuard",
        "fakeRouter",
        "route",
        "testRouter",
        "fakeService",
        "permissionGuard",
        "fakeRouter",
        "route",
        "testRouter",
        "fakeService",
        "permissionGuard",
        "fakeRouter",
        "route",
        "testRouter",
        "fakeService"
    ],
    "comments": [
        "fakeRouter = router;",
        "fakeRouter = router;",
        "fakeRouter = router;",
        "fakeRouter = router;",
        "",
        "fakeRouter = router;",
        "",
        "fakeRouter = router;"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}