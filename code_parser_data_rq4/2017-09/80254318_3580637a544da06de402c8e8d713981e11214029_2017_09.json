{
    "identifiers": [
        "pandas",
        "pd",
        "geopandas",
        "gpd",
        "folium",
        "branca",
        "colormap",
        "cm",
        "sys",
        "pd",
        "read_csv",
        "sys",
        "argv",
        "converters",
        "output",
        "astype",
        "sys",
        "argv",
        "split",
        "split",
        "gpd",
        "read_file",
        "streets",
        "to_crs",
        "streets",
        "merge",
        "output",
        "on",
        "sys",
        "argv",
        "sys",
        "argv",
        "streets_w_risk",
        "score_col",
        "streets_w_risk",
        "score_col",
        "max",
        "streets_w_risk",
        "score_col",
        "folium",
        "tiles",
        "zoom_start",
        "cm",
        "linear",
        "YlOrRd",
        "scale",
        "streets_w_risk",
        "min",
        "streets_w_risk",
        "max",
        "folium",
        "GeoJson",
        "streets_w_risk",
        "streets_w_risk",
        "pred_normalize",
        "style_function",
        "feature",
        "color_scale",
        "feature",
        "add_to",
        "boston_map",
        "boston_map",
        "add_child",
        "color_scale",
        "boston_map",
        "save",
        "fname"
    ],
    "literals": [
        "'segment_id'",
        "\"Must provide filepath as first argument to script\"",
        "'id'",
        "'segment_id'",
        "'str'",
        "'/'",
        "'.'",
        "'../data/processed/maps/inter_and_non_int.shp'",
        "'init'",
        "'epsg:3857'",
        "'init'",
        "'epsg:4326'",
        "'id'",
        "'T'",
        "'pred_normalize'",
        "'pred_normalize'",
        "'Cartodb Positron'",
        "'pred_normalize'",
        "'pred_normalize'",
        "'color'",
        "'properties'",
        "'pred_normalize'",
        "\"Risk Score\"",
        "'.html'"
    ],
    "variables": [
        "output",
        "output",
        "fname",
        "streets",
        "streets",
        "crs",
        "streets",
        "streets_w_risk",
        "score_col",
        "streets_w_risk",
        "streets_w_risk",
        "boston_map",
        "color_scale",
        "color_scale",
        "caption"
    ],
    "comments": [
        "must provide filepath for prediction csv",
        "filename is csvname",
        "Read in shapefile as a GeoDataframe",
        "Set the projection as EPSG:3857 since the shapefile didn't export with one",
        "Then reproject to EPSG:4326 to match what Leaflet uses",
        "Merge on model results to the GeoDataframe",
        "second argument = column name for risk score",
        "streets_w_risk['pred_normalize'] = streets_w_risk.pred / streets_w_risk.pred.max()",
        "third argument = T or F, normalize",
        "Make map",
        "First create basemap",
        "\"Cartodb dark_matter\" also nice",
        "Create style function to color segments based on their risk score",
        "color_scale = cm.linear.YlOrRd.scale(0, 1)",
        "Then add on GeoDataframe of risk scores",
        "filter dataframe to only seg with risk>0 to reduce size",
        "Finally, add legend",
        "Save map as separate html file"
    ],
    "docstrings": [
        "\"\"\"\nTitle: risk_map.py\n \nAuthor: @bpben, @alicefeng\n \nThis script creates the data needed to power the map of historical crash\ndata for crashes that occurred on Boston's streets in 2016.  It uses\nthe canonical dataset which has crash counts by week and segment and\nthen joins on the geometries for those segments to enable mapping.  Finally,\nit exports this joined data as a GeoJSON file to be used in the map.\n\nThis file only needs to be run once to generate the dataset prior to\nusing the map for the first time.\n\nInputs:\n    vz_predict_dataset.csv (i.e., the canonical dataset)\n    inter_and_non_int.shp\n\nOutput:\n    historical_crashes.json\n\"\"\""
    ],
    "functions": [],
    "classes": []
}