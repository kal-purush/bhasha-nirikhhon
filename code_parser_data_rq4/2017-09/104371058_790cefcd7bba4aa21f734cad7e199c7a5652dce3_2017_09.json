{
    "identifiers": [
        "numpy",
        "np",
        "PIL",
        "Image",
        "sklearn",
        "feature_extraction",
        "image",
        "skimage",
        "util",
        "shape",
        "view_as_windows",
        "Image",
        "open",
        "im",
        "crop",
        "target_width",
        "im",
        "size",
        "width",
        "height",
        "np",
        "zeros",
        "width",
        "height",
        "y",
        "height",
        "x",
        "width",
        "im",
        "getpixel",
        "x",
        "y",
        "np",
        "arange",
        "reshape",
        "view_as_windows",
        "A",
        "step",
        "A",
        "B",
        "shape",
        "B",
        "shape",
        "B",
        "B",
        "shape",
        "B",
        "np",
        "zeros",
        "x_win_dim",
        "y_win_dim",
        "np",
        "zeros",
        "x_win_dim",
        "y_win_dim",
        "y_win",
        "y_win_dim",
        "x_win",
        "x_win_dim",
        "target_width",
        "B",
        "x_win",
        "y_win",
        "sum",
        "np",
        "amax",
        "B",
        "x_win",
        "y_win",
        "m_mat",
        "l_mat"
    ],
    "literals": [
        "\"person.jpg\""
    ],
    "variables": [
        "block_dict",
        "im",
        "im",
        "target_width",
        "stride",
        "width",
        "height",
        "matrix",
        "matrix",
        "x",
        "y",
        "block_list",
        "A",
        "B",
        "x_win_dim",
        "y_win_dim",
        "m_mat",
        "l_mat",
        "m_mat",
        "x_win",
        "y_win",
        "l_mat",
        "x_win",
        "y_win"
    ],
    "comments": [
        "blocks = image.extract_patches_2d(matrix,[stride,stride])",
        "print(blocks[0].sum())",
        "print(blocks[0])",
        "print(blocks.shape)",
        "print(matrix[0:5,0:5])",
        "B = view_as_windows(matrix,(target_width,target_width), step=stride)"
    ],
    "docstrings": [
        "'''\nfor ind,block in enumerate(blocks):\n    ind_block = Block()\n    #m = 1/(stride**2)*ind_block.sum()\n'''"
    ],
    "functions": [],
    "classes": [
        "Block"
    ]
}