{
    "identifiers": [
        "code",
        "end",
        "code",
        "i",
        "i",
        "i",
        "code",
        "j",
        "code",
        "i",
        "value",
        "code",
        "j",
        "j",
        "j",
        "value",
        "code",
        "i",
        "digits",
        "value",
        "code",
        "i",
        "i",
        "value",
        "value",
        "value",
        "i",
        "code",
        "i",
        "i",
        "parse_code_until",
        "code",
        "i",
        "parse_value",
        "key",
        "value",
        "key",
        "i",
        "parse_code_until",
        "code",
        "i",
        "parsed",
        "append",
        "parse_key",
        "i",
        "parsed",
        "code",
        "i",
        "i",
        "code",
        "i",
        "code",
        "i",
        "code",
        "i",
        "code",
        "i",
        "code",
        "i",
        "name",
        "code",
        "i",
        "i",
        "code",
        "i",
        "i",
        "code",
        "i",
        "code",
        "i",
        "len",
        "arguments",
        "len",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "name",
        "arguments",
        "append",
        "code",
        "i",
        "code",
        "i",
        "i",
        "arguments",
        "append",
        "name",
        "i",
        "arguments",
        "arguments",
        "parse_code_until",
        "i",
        "parse_code_until",
        "i",
        "args",
        "parsed",
        "code",
        "i",
        "ascii_letters",
        "name",
        "code",
        "i",
        "i",
        "name",
        "i",
        "code",
        "i",
        "code",
        "i",
        "end",
        "i",
        "len",
        "code",
        "code",
        "i",
        "parsed",
        "append",
        "parse_string",
        "code",
        "i",
        "digits",
        "code",
        "i",
        "code",
        "i",
        "digits",
        "parsed",
        "append",
        "parse_number",
        "code",
        "i",
        "parsed",
        "append",
        "parse_code_until",
        "code",
        "i",
        "parsed",
        "append",
        "parse_bracket",
        "code",
        "i",
        "parsed",
        "append",
        "parse_function",
        "code",
        "i",
        "ascii_letters",
        "parsed",
        "append",
        "parse_variable",
        "code",
        "i",
        "i",
        "parsed",
        "append",
        "parse_symbol",
        "parsed",
        "parse_code_until",
        "parse"
    ],
    "literals": [
        "'('",
        "''",
        "'value'",
        "'type'",
        "'string'",
        "''",
        "'.-'",
        "'.'",
        "'value'",
        "'type'",
        "'float'",
        "'value'",
        "'type'",
        "'int'",
        "','",
        "',]'",
        "':'",
        "'value'",
        "'type'",
        "'couple'",
        "',]'",
        "']'",
        "'value'",
        "'type'",
        "'list'",
        "'{ '",
        "''",
        "'|'",
        "':'",
        "''",
        "' '",
        "','",
        "'|'",
        "' '",
        "','",
        "'|'",
        "''",
        "' '",
        "','",
        "'|'",
        "'}'",
        "'arguments'",
        "'value'",
        "'type'",
        "'function'",
        "''",
        "'value'",
        "'type'",
        "'variable'",
        "'value'",
        "'type'",
        "'symbol'",
        "' '",
        "'\"\\''",
        "'-.'",
        "'.'",
        "'('",
        "')'",
        "'['",
        "'{'",
        "' \\n'",
        "'value'",
        "'type'",
        "'code'",
        "''",
        "'[a,1,\"h\",{int x, y | print(\"ok\")}, 1: 2]'",
        "'type'",
        "'code'",
        "'value'",
        "'type'",
        "'list'",
        "'value'",
        "'type'",
        "'code'",
        "'value'",
        "'type'",
        "'variable'",
        "'value'",
        "'a'",
        "'type'",
        "'code'",
        "'value'",
        "'type'",
        "'int'",
        "'value'",
        "'type'",
        "'code'",
        "'value'",
        "'type'",
        "'string'",
        "'value'",
        "'h'",
        "'type'",
        "'code'",
        "'value'",
        "'type'",
        "'function'",
        "'arguments'",
        "'type'",
        "'code'",
        "'value'",
        "'type'",
        "'variable'",
        "'value'",
        "'int'",
        "'type'",
        "'variable'",
        "'value'",
        "'x'",
        "'type'",
        "'symbol'",
        "'value'",
        "','",
        "'type'",
        "'variable'",
        "'value'",
        "'y'",
        "'value'",
        "'type'",
        "'code'",
        "'value'",
        "'type'",
        "'variable'",
        "'value'",
        "'print'",
        "'type'",
        "'code'",
        "'value'",
        "'type'",
        "'string'",
        "'value'",
        "'ok'",
        "'type'",
        "'symbol'",
        "'value'",
        "')'",
        "'type'",
        "'code'",
        "'value'",
        "'type'",
        "'int'",
        "'value'",
        "'type'",
        "'symbol'",
        "'value'",
        "':'",
        "'type'",
        "'int'",
        "'value'"
    ],
    "variables": [
        "i",
        "parsed",
        "j",
        "value",
        "i",
        "value",
        "parsed",
        "key",
        "value",
        "arguments",
        "name",
        "args",
        "parsed",
        "name"
    ],
    "comments": [
        "import what I need",
        "initialize the counter and put code into brackets",
        "[0] instead of just 0 because it is a workaround",
        "of python 2. This really makes me question why I still use Python 2...",
        "https://stackoverflow.com/questions/13985671",
        "skip beginnings",
        "loop the whole string until closing match",
        "loop the whole number and return it",
        "get over the '['",
        "skip first , (sometimes there is)",
        "loop everithing (such pro!)",
        "if we ended on a : we are probably in a dict,",
        "so let's call the parse_value",
        "it was a list element so let's just return it",
        "get over the : and get to the actual value",
        "get over the { and ' '",
        "{int x, y, list float n |...}",
        "arguments is the list of arguments and will be",
        "edited and checked by parse_arg globally",
        "[[['int'], 'x'], [['int'], 'y'], [['list', 'float'], 'n']]",
        "getting the single name",
        "let's also eat the space[s]",
        "now let's check if we ended on ',' or ' '",
        "okay, this is a name of a variable",
        "so we check if we specified what type it has to be",
        "and also if this is *not* the first variable it's declared",
        "well it is not specified the type,",
        "then we might just as well assume that the type is the same",
        "of the last variable, so we take it",
        "we have the name of the variable, let's set it",
        "this variable is all setted, so let's set up a new one",
        "let's eat the ',' or ' ' if needed",
        "we ended on a space, wich means that what",
        "we have is actually a type, so we add it",
        "to the list of types",
        "delete last element, because it was a proto-variable -> [[], '']",
        "parse arguments",
        "checking every char and calling the right parser until end of code or",
        "breakline or end of string (repr by ~)",
        "(spaces and newlines are ignored)",
        "quick testcase of everything"
    ],
    "docstrings": [
        "\"\"\"\n    Inputs Nylo raw code, and outputs a code-object, in order to make\n    execution easier. Types created by this:\n     name      -> object repr                                              -> value type\n     ------------------------------------------------------------------------------------------\n     string    -> {'value': 'hello world', 'type': 'number'}               -> string           \n     number    -> {'value': 3, 'type': 'number'}                           -> int/float        \n     code      -> {value: [], 'type': 'code'}                              -> list parsed      \n     list      -> {value: [], 'type: 'list''}                              -> list list parsed \n     function  -> {value: [], 'type': 'function', 'arguments': [[], 'x']}  -> list parsed      \n     variable  -> {value: 'i', 'type': 'variable'}                         -> string           \n     symbol    -> {value: '+', 'type': 'symbol'}                           -> string \n    \"\"\"",
        "\"\"\"\n        Main function to parse raw Nilo code.\n        calls:\n        > callParse\n        > parse_string\n        > parse_number\n        > parse_bracket\n        > > parse_key\n        > > parse_value\n        > parse_function\n        > > parse_arguments\n        > parse_variable\n        > parse_symbol\n        \"\"\"",
        "\"\"\"\n            Parse a Nylo string into a Nylo String Object.\n            \"\"\"",
        "\"\"\"\n            Parse a Nylo number into a Nylo Number Object.\n            \"\"\"",
        "\"\"\"\n            Parse [] brackets, wich is either a list or a dictionary.\n            \"\"\"",
        "\"\"\"\n                Parse the first element of a bracket, either an entire\n                element of the list, or the key of a dictionary.\n                \"\"\"",
        "\"\"\"\n                When parsing a dictionary, this parse the\n                value of a key.\n                \"\"\"",
        "\"\"\"\n            Parse a raw Nylo function into a Nylo Function Object.\n            \"\"\"",
        "\"\"\"\n                Parse the arguments of a function.\n                \"\"\"",
        "\"\"\"\n            Parse a raw Nylo variable into a Nylo Variable Object.\n            \"\"\"",
        "\"\"\"\n            Parse a single character into a Nylo Symbol Object.\n            \"\"\""
    ],
    "functions": [
        "parse",
        "parse_code_until",
        "parse_string",
        "parse_number",
        "parse_bracket",
        "parse_key",
        "parse_value",
        "parse_function",
        "parse_arguments",
        "parse_variable",
        "parse_symbol"
    ],
    "classes": []
}