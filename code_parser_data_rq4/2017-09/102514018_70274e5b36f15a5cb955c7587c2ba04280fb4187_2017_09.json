{
    "identifiers": [
        "head",
        "random",
        "DEFAULT_PEEKS",
        "DEFAULT_SIZE",
        "VALUE_FALSE",
        "VALUE_TRUE",
        "STATE_SPUN",
        "STATE_PEEKED",
        "STATE_POKED",
        "numRotatesPerSpin",
        "rotatesPerSpinMultiplier",
        "bitsPerPeek",
        "spins",
        "size",
        "state",
        "initialBits",
        "bitsPerPeek",
        "numRotatesPerSpin",
        "rotatesPerSpinMultiplier",
        "initialBits",
        "bitsPerPeek",
        "numRotatesPerSpin",
        "numRotatesPerSpin",
        "rotatesPerSpinMultiplier",
        "rotatesPerSpinMultiplier",
        "isRandom",
        "numRotatesPerSpin",
        "rotatesPerSpinMultiplier",
        "random",
        "isRandom",
        "numRotatesPerSpin",
        "numRotatesPerSpin",
        "rotatesPerSpinMultiplier",
        "rotatesPerSpinMultiplier",
        "initialBits",
        "bitsPerPeek",
        "createLinks",
        "initialBits",
        "bitsPerPeek",
        "bitsPerPeek",
        "size",
        "initialBits",
        "length",
        "initialBits",
        "bitsPerPeek",
        "isRandom",
        "initialBits",
        "bitsPerPeek",
        "random",
        "isRandom",
        "isRandom",
        "random",
        "isRandom",
        "size",
        "bitsPerPeek",
        "size",
        "size",
        "initialBits",
        "size",
        "i",
        "i",
        "size",
        "i",
        "random",
        "initialBits",
        "i",
        "random",
        "rotatesPerSpinMultiplier",
        "random",
        "bitsPerPeek",
        "bitsPerPeek",
        "setSpinner",
        "createLinks",
        "initialBits",
        "DEFAULT_SIZE",
        "DEFAULT_PEEKS",
        "setSpinner",
        "initialBits",
        "setSpinner",
        "initialBits",
        "length",
        "firstValue",
        "VALUE_FALSE",
        "initialBits",
        "firstValue",
        "VALUE_TRUE",
        "first",
        "firstValue",
        "last",
        "first",
        "i",
        "i",
        "initialBits",
        "length",
        "i",
        "bit",
        "initialBits",
        "i",
        "link",
        "bit",
        "link",
        "VALUE_TRUE",
        "link",
        "VALUE_FALSE",
        "last",
        "add",
        "link",
        "last",
        "link",
        "last",
        "add",
        "first",
        "head",
        "first",
        "numRotatesPerSpin",
        "round",
        "random",
        "size",
        "random",
        "rotatesPerSpinMultiplier",
        "round",
        "random",
        "size",
        "current",
        "head",
        "current",
        "data",
        "current",
        "next",
        "head",
        "current",
        "current",
        "next",
        "current",
        "head",
        "current",
        "head",
        "append",
        "current",
        "data",
        "current",
        "next",
        "head",
        "append",
        "current",
        "current",
        "next",
        "current",
        "head",
        "append",
        "toString",
        "Override",
        "append",
        "append",
        "size",
        "append",
        "append",
        "bitsPerPeek",
        "append",
        "toString",
        "state",
        "STATE_SPUN",
        "all_true",
        "all_false",
        "current",
        "head",
        "current",
        "data",
        "equals",
        "VALUE_TRUE",
        "all_false",
        "current",
        "data",
        "equals",
        "VALUE_FALSE",
        "all_true",
        "current",
        "current",
        "next",
        "current",
        "head",
        "all_false",
        "all_true",
        "spins",
        "i",
        "random",
        "numRotatesPerSpin",
        "random",
        "size",
        "i",
        "numRotatesPerSpin",
        "size",
        "head",
        "head",
        "next",
        "i",
        "numRotatesPerSpin",
        "spins",
        "rotatesPerSpinMultiplier",
        "all_true",
        "all_false",
        "q",
        "what",
        "f",
        "f",
        "q",
        "indexOf",
        "what",
        "q",
        "f",
        "f",
        "pattern",
        "state",
        "STATE_SPUN",
        "state",
        "STATE_PEEKED",
        "q",
        "pattern",
        "numPeeked",
        "f",
        "q",
        "q",
        "q",
        "q",
        "c",
        "head",
        "i",
        "i",
        "q",
        "length",
        "i",
        "size",
        "i",
        "numPeeked",
        "bitsPerPeek",
        "q",
        "charAt",
        "i",
        "append",
        "c",
        "data",
        "numPeeked",
        "append",
        "i",
        "size",
        "append",
        "c",
        "c",
        "next",
        "append",
        "toString",
        "pattern",
        "state",
        "STATE_PEEKED",
        "state",
        "STATE_POKED",
        "q",
        "pattern",
        "numPoked",
        "f",
        "q",
        "q",
        "q",
        "q",
        "c",
        "head",
        "i",
        "i",
        "q",
        "length",
        "i",
        "size",
        "i",
        "numPoked",
        "bitsPerPeek",
        "q",
        "charAt",
        "i",
        "VALUE_TRUE",
        "q",
        "charAt",
        "i",
        "VALUE_FALSE",
        "numPoked",
        "c",
        "setData",
        "q",
        "charAt",
        "i",
        "c",
        "c",
        "next"
    ],
    "literals": [
        "\"[\"",
        "\", \"",
        "\"]\"",
        "\"[\"",
        "\", \"",
        "\"]\"",
        "\"Device[size: \"",
        "\", bitsPerPeek: \"",
        "\"]\"",
        "\"[\"",
        "\"]\"",
        "\" \"",
        "\"\\t\"",
        "\"[\"",
        "\"-\"",
        "\" \"",
        "\"]\"",
        "\"[\"",
        "\"]\"",
        "\" \"",
        "\"\\t\""
    ],
    "variables": [
        "head",
        "bitsPerPeek",
        "size"
    ],
    "comments": [
        "System.out.println(\"spun \" + (numRotatesPerSpin % size) + \" times\");",
        "System.out.println(superPeek());"
    ],
    "docstrings": [
        "* Whether or not we are using pseudo-random number generators for arbitrary rotations per spin",
        "* Default number of bits to reveal per peek",
        "* Default number of bits stored.",
        "* Character indicator of false.",
        "* Character indicator of true.",
        "* State indicating that this device was just spun.",
        "* State indicating that this device was just peeked.",
        "* State indicating that this device was just poked.",
        "* The actual number of rotations that are done per spin.",
        "* The increment multiplier for number of rotations per spin.",
        "*  The number of bits we can peek",
        "* The number of spins that have been done",
        "* The number of bits stored",
        "* The current state of the device.",
        "* For testing, create a device and set its linear or polynomial turns relationship\n     * @param initialBits the bit values for this test device\n     * @param bitsPerPeek the number of bits to disclose via peek or set via poke\n     * @param numRotatesPerSpin number of times to rotate per spin\n     * @param rotatesPerSpinMultiplier a multiple we add to the numRotatesPerSpin each time spin is called to emulate polynomial rotations",
        "* For testing, create a device is either random or not, and with a numRotatesPerSpin rotations per spin, with rotatesPerSpinMultiplier polynomial rotations\n     * @param isRandom the number of bits to disclose via peek or set via poke\n     * @param numRotatesPerSpin number of times to rotate per spin\n     * @param rotatesPerSpinMultiplier a multiple we add to the numRotatesPerSpin each time spin is called to emulate polynomial rotations",
        "* Construct device with specified bits for testing. Initial bit values are represented by an array of boolean primitives.\n     * @param initialBits the bit values for this test device\n     * @param bitsPerPeek the number of bits to disclose via peek or set via poke",
        "* Create a device that is pseudo random in rotations\n     * @param initialBits the bit values for this test device\n     * @param bitsPerPeek the number of bits to disclose via peek or set via poke\n     * @param isRandom whether or not this device uses pseudo-random rotations per spin",
        "* Create a device with a choice of pseudo randomness\n     * @param isRandom whether or not to use pseudo-random rotations per spin",
        "* Construct device with specified size and number of peek/poke bits.\n     * @param size the number of bits stored in this device\n     * @param bitsPerPeek the number of bits to disclose via peek or set via poke",
        "* Construct device using defaults.",
        "* Create the linked list to store the bits used in the locking of this device.\n     * @param initialBits",
        "* Set the number of arbitrary spins for the next spin.",
        "* Print out the bits of this device.",
        "* A string representing the bits in this device\n     * @return A string showign all bits in this device for testing.",
        "* Render device information as a string.\n     * @return rendering that reveals partial state",
        "* Initiate device rotation.\n     * @return true if all bits have identical value; false otherwise",
        "* Deletes all occurrences of substring in StringBuilder\n     * @param q The StringBuilder instance to remove found substrings from\n     * @param what The substring to remove",
        "* Peek at bits of device.\n     * @param pattern indicating which bits to show as '?'\n     * @return a pattern that discloses the values of the indicated bits",
        "* Poke bits into device.\n     * @param pattern indicator of values of bits to poke"
    ],
    "functions": [
        "Device",
        "Device",
        "Device",
        "Device",
        "Device",
        "Device",
        "Device",
        "createLinks",
        "setSpinner",
        "superPeek",
        "toString",
        "spin",
        "CharSequence",
        "peek",
        "poke"
    ],
    "classes": [
        "Device"
    ]
}