{
    "identifiers": [
        "os",
        "subprocess",
        "re",
        "shutil",
        "copyfile",
        "staticmethod",
        "s",
        "re",
        "findall",
        "s",
        "citations",
        "staticmethod",
        "name",
        "open",
        "name",
        "read",
        "bibtex",
        "citations",
        "s",
        "staticmethod",
        "citations",
        "file",
        "citations",
        "cite",
        "citations",
        "file",
        "cite",
        "file",
        "cite",
        "directory",
        "root",
        "dirs",
        "filenames",
        "os",
        "walk",
        "DOCUMENTATION_SOURCE_DIR",
        "filename",
        "filenames",
        "filename",
        "endswith",
        "SOURCE_EXTENSION",
        "filename",
        "os",
        "path",
        "join",
        "root",
        "filename",
        "bibtex",
        "scan",
        "source_file",
        "citation",
        "citations",
        "entry",
        "append",
        "citation",
        "source_file",
        "files",
        "add",
        "source_file",
        "files",
        "entry",
        "bibtex",
        "find_files",
        "file",
        "files",
        "file",
        "replace",
        "bib",
        "copyfile",
        "bib"
    ],
    "literals": [
        "':cite:`.*`'",
        "'./'",
        "'./'",
        "'.rst'",
        "'.#'",
        "\"./docs/source/refs.bib\"",
        "\".rst\"",
        "\"-tmp.bib\""
    ],
    "variables": [
        "citations",
        "s",
        "files",
        "entry",
        "DOCUMENTATION_SOURCE_DIR",
        "SOURCE_EXTENSION",
        "source_file",
        "citations",
        "files",
        "entry",
        "bib"
    ],
    "comments": [
        "!/usr/bin/env python"
    ],
    "docstrings": [
        "\"\"\"\nDOCUMENTATION_SOURCE_DIR = './'\nSOURCE_EXTENSION = '.rst'\n\nfor root, dirs, filenames in os.walk(DOCUMENTATION_SOURCE_DIR):\n    for filename in filenames:\n\n        if filename.endswith(SOURCE_EXTENSION) and '.#' not in filename:\n            # print (root, dirs, filename)\n            source_file = os.path.join(root, filename)\n            #source_time = os.path.getmtime(source_file)\n            # try:\n            #    output_time = os.path.getmtime(output_file)\n            # except:\n            #    output_time = source_time + 1\n                \n            #if (source_time > output_time):\n            citations = bibtex.scan(source_file)\n\n            bibtex.print(citations, source_file)\n            \n\"\"\""
    ],
    "functions": [
        "citations",
        "scan",
        "find_files"
    ],
    "classes": [
        "bibtex"
    ]
}