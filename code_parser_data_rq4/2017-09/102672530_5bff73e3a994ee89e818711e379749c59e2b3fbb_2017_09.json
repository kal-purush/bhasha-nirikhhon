{
    "identifiers": [
        "sys",
        "csv",
        "os",
        "system",
        "path",
        "columns",
        "kv",
        "columns",
        "split",
        "spl",
        "x",
        "len",
        "spl",
        "len",
        "ans",
        "ans",
        "ans",
        "kv",
        "ans",
        "ans",
        "spl",
        "x",
        "ans",
        "append",
        "spl",
        "x",
        "ans",
        "tablename",
        "columns",
        "open",
        "metas",
        "tablename",
        "table",
        "csv",
        "DictReader",
        "table",
        "r",
        "next",
        "c",
        "columns",
        "head",
        "c",
        "KeyError",
        "c",
        "tablename",
        "tablename",
        "cols",
        "parseColumns",
        "cols",
        "colvals",
        "val",
        "colvals",
        "val",
        "strip",
        "split",
        "name",
        "cvs",
        "value",
        "ValueError",
        "checkColumnNames",
        "tablename",
        "cvs",
        "keys",
        "cvs",
        "open",
        "metas",
        "tablename",
        "table",
        "csv",
        "DictReader",
        "table",
        "row",
        "r",
        "k",
        "cvs",
        "row",
        "k",
        "cvs",
        "k",
        "strip",
        "match",
        "row",
        "tablename",
        "data",
        "open",
        "metas",
        "tablename",
        "table",
        "csv",
        "DictReader",
        "table",
        "len",
        "r",
        "next",
        "ncols",
        "len",
        "parseColumns",
        "data",
        "open",
        "metas",
        "tablename",
        "table",
        "table",
        "write",
        "data",
        "strip",
        "len",
        "sys",
        "argv",
        "sys",
        "exit",
        "arg",
        "sys",
        "argv",
        "arg",
        "split",
        "a",
        "b",
        "a",
        "metas",
        "sys",
        "exit",
        "path",
        "isfile",
        "b",
        "b",
        "sys",
        "exit",
        "b",
        "ValueError",
        "sys",
        "exit",
        "metas",
        "raw_input",
        "x",
        "upper",
        "x",
        "split",
        "splits",
        "upper",
        "len",
        "splits",
        "splits",
        "metas",
        "splits",
        "splits",
        "upper",
        "find",
        "splits",
        "splits",
        "insert",
        "splits",
        "splits"
    ],
    "literals": [
        "','",
        "'\\\"'",
        "'=\\\"'",
        "'\\\"'",
        "','",
        "'Error: '",
        "' is not a column of table '",
        "'='",
        "'Error: cannot have two values for the same column'",
        "'Error: please specify columns in the form of column1=value1'",
        "'\\\"'",
        "'Error: Data does not contain correct amount of columns'",
        "'a'",
        "'()'",
        "'ERROR: please specify CSV files as arguments in the form of alias1=csv1.csv [...aliasN=csvN.csv]'",
        "'='",
        "''",
        "''",
        "'ERROR: Cannot have blank filename or alias. cannot reuse aliases.'",
        "'ERROR: '",
        "' is not a file'",
        "'ERROR: please specify arguments in the form of alias1=csv1.csv [...aliasN=csvN.csv]'",
        "\"HW1DB> \"",
        "'EXIT'",
        "' '",
        "'FIND'",
        "'INSERT'",
        "'ERROR: command not recognized'",
        "'ERROR: table '",
        "' does not exist'",
        "'FIND'"
    ],
    "variables": [
        "spl",
        "ans",
        "ans",
        "r",
        "head",
        "val",
        "colvals",
        "cvs",
        "name",
        "value",
        "cvs",
        "name",
        "r",
        "match",
        "match",
        "r",
        "ncols",
        "metas",
        "a",
        "b",
        "metas",
        "a",
        "x",
        "splits"
    ],
    "comments": [
        "hw1.py -- HW1DB, simple database implementation in python. a CLI that interfaces with csv files given as arguments",
        "non-fatal",
        "returned false, must be error",
        "input check",
        "contains metadata for each csv (filename, headers)",
        "fatal",
        "fatal, give descriptive error message",
        "print splits"
    ],
    "docstrings": [
        "'''\n    vals = data.strip('()').split(',')\n    cvs = dict()\n    print vals\n    #system('echo ' + a + ' >> ' + c)'''",
        "'''\nfor key in metas: \n    with open(metas[key][0]) as table:\n        reader = csv.DictReader(table)\n        for row in reader:\n            print row['colA']\n'''"
    ],
    "functions": [
        "parseColumns",
        "checkColumnNames",
        "find",
        "insert"
    ],
    "classes": []
}