{
    "identifiers": [
        "os",
        "tempfile",
        "NamedTemporaryFile",
        "unittest",
        "TestCase",
        "mbq",
        "client",
        "storage",
        "FileStorage",
        "TestCase",
        "NamedTemporaryFile",
        "name",
        "FileStorage",
        "test_filename",
        "os",
        "remove",
        "test_filename",
        "assertIsNone",
        "storage",
        "get",
        "storage",
        "assertEqual",
        "storage",
        "get",
        "assertIsNone",
        "storage",
        "get",
        "storage",
        "assertEqual",
        "storage",
        "get",
        "assertEqual",
        "storage",
        "get",
        "assertIsNone",
        "storage",
        "get",
        "storage",
        "assertEqual",
        "storage",
        "get",
        "assertEqual",
        "storage",
        "get",
        "assertIsNone",
        "storage",
        "get",
        "FileStorage",
        "test_filename",
        "assertEqual",
        "storage",
        "get",
        "assertEqual",
        "storage",
        "get",
        "assertIsNone",
        "storage",
        "get"
    ],
    "literals": [
        "'key1'",
        "'key1'",
        "'value1'",
        "'key1'",
        "'value1'",
        "'key2'",
        "'key2'",
        "'value2'",
        "'key2'",
        "'value2'",
        "'key1'",
        "'value1'",
        "'key3'",
        "'key2'",
        "'some-new-value'",
        "'key2'",
        "'some-new-value'",
        "'key1'",
        "'value1'",
        "'key3'",
        "'key2'",
        "'some-new-value'",
        "'key1'",
        "'value1'",
        "'key3'"
    ],
    "variables": [
        "test_filename",
        "storage",
        "storage"
    ],
    "comments": [
        "When the file is empty, we should receive None for any key.",
        "We should be able to write a key/value,",
        "retrieve it,",
        "and still receive None for missing keys.",
        "We should be able to write a 2nd key,",
        "retrieve it,",
        "still retrieve the earlier key we wrote,",
        "and still receive None for missing keys.",
        "We should be able to update an existing key,",
        "see the value change when retrieving,",
        "the other values should remain unchanged,",
        "and we should still receive None for missing keys.",
        "If we re-init the storage object with the same file,",
        "all keys should be persisted."
    ],
    "docstrings": [],
    "functions": [
        "setUp",
        "tearDown",
        "test_storage"
    ],
    "classes": [
        "FileStorageTestCase"
    ]
}