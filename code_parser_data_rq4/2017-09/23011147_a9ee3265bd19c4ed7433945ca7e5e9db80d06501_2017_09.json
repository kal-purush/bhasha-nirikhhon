{
    "identifiers": [
        "logging",
        "sklearn",
        "utils",
        "check_X_y",
        "sklearn",
        "utils",
        "validation",
        "check_is_fitted",
        "SamplerMixin",
        "utils",
        "check_target_type",
        "hash_X_y",
        "X",
        "y",
        "X",
        "y",
        "SamplerMixin",
        "func",
        "accept_sparse",
        "kw_args",
        "random_state",
        "func",
        "accept_sparse",
        "kw_args",
        "random_state",
        "logging",
        "getLogger",
        "X",
        "y",
        "accept_sparse",
        "check_X_y",
        "X",
        "y",
        "accept_sparse",
        "check_X_y",
        "X",
        "y",
        "accept_sparse",
        "check_target_type",
        "y",
        "X",
        "y",
        "X",
        "y",
        "accept_sparse",
        "_check_X_y",
        "X",
        "y",
        "X_hash_",
        "y_hash_",
        "hash_X_y",
        "X",
        "y",
        "X",
        "y",
        "func",
        "kw_args",
        "_check_X_y",
        "X",
        "y",
        "check_is_fitted",
        "hash_X_y",
        "X",
        "y",
        "X_hash_",
        "X_hash",
        "y_hash_",
        "y_hash",
        "RuntimeError",
        "func",
        "_identity",
        "func",
        "X",
        "y",
        "kw_args",
        "kw_args",
        "X",
        "y",
        "_sample",
        "X",
        "y",
        "func",
        "func",
        "kw_args",
        "kw_args"
    ],
    "literals": [
        "'csr'",
        "'csc'",
        "'is_fitted'",
        "'ratio_'",
        "\"X and y need to be same array earlier fitted.\""
    ],
    "variables": [
        "func",
        "accept_sparse",
        "kw_args",
        "random_state",
        "logger",
        "X",
        "y",
        "X",
        "y",
        "y",
        "X",
        "y",
        "ratio_",
        "X",
        "y",
        "X_hash",
        "y_hash",
        "func"
    ],
    "comments": [
        "Authors: Guillaume Lemaitre <g.lemaitre58@gmail.com>",
        "License: MIT",
        "when using a sampler, ratio_ is supposed to exist after fit"
    ],
    "docstrings": [
        "\"\"\"Miscellaneous samplers objects.\"\"\"",
        "\"\"\"Construct a sampler from calling an arbitrary callable.\n\n    Read more in the :ref:`User Guide <function_sampler>`.\n\n    Parameters\n    ----------\n    func : callable or None,\n        The callable to use for the transformation. This will be passed the\n        same arguments as transform, with args and kwargs forwarded. If func is\n        None, then func will be the identity function.\n\n    \"\"\""
    ],
    "functions": [
        "_identity",
        "_check_X_y",
        "fit",
        "_sample",
        "sample"
    ],
    "classes": [
        "FunctionSampler"
    ]
}