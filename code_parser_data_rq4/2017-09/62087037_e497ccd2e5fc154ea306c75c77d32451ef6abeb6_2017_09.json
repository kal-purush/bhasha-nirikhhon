{
    "identifiers": [
        "axios",
        "AxiosInstance",
        "AxiosRequestConfig",
        "AxiosResponse",
        "AxiosError",
        "findIndex",
        "CSEError",
        "in200s",
        "n",
        "n",
        "n",
        "in400s",
        "n",
        "n",
        "n",
        "in500s",
        "n",
        "n",
        "n",
        "id",
        "id",
        "create",
        "config",
        "DEFAULT_HEADERS",
        "config",
        "DEFAULT_CONFIG",
        "config",
        "config",
        "axios",
        "combinedConfig",
        "addMonitor",
        "monitor",
        "monitors",
        "monitor",
        "setHeader",
        "name",
        "value",
        "headers",
        "name",
        "value",
        "instance",
        "setHeaders",
        "headers",
        "key",
        "headers",
        "setHeader",
        "key",
        "headers",
        "key",
        "instance",
        "doRequestWithoutBody",
        "method",
        "url",
        "axiosConfig",
        "doRequest",
        "axiosConfig",
        "doRequestWithBody",
        "method",
        "url",
        "data",
        "axiosConfig",
        "doRequest",
        "axiosConfig",
        "axiosRequestConfig",
        "axiosRequestConfig",
        "headers",
        "axiosRequestConfig",
        "instance",
        "axiosRequestConfig",
        "response",
        "convertResponse",
        "startedAt",
        "response",
        "error",
        "convertResponse",
        "startedAt",
        "error",
        "parseError",
        "error",
        "error",
        "error",
        "error",
        "err",
        "error",
        "err",
        "error",
        "error",
        "error",
        "error",
        "err",
        "error",
        "error",
        "err",
        "convertResponse",
        "startedAt",
        "axiosResponse",
        "end",
        "startedAt",
        "axiosResponse",
        "parseError",
        "axiosResponse",
        "error",
        "axiosResponse",
        "axiosResponse",
        "response",
        "response",
        "error",
        "getProblemFromError",
        "axiosResponse",
        "getProblemFromStatus",
        "status",
        "in200s",
        "status",
        "axiosResponse",
        "response",
        "response",
        "response",
        "response",
        "error",
        "error",
        "NETWORK_ERROR",
        "error",
        "error",
        "getProblemFromStatus",
        "error",
        "findIndex",
        "TIMEOUT_ERROR_CODES",
        "error",
        "TIMEOUT_ERROR",
        "findIndex",
        "NODEJS_CONNECTION_ERROR_CODES",
        "error",
        "CONNECTION_ERROR",
        "UNKNOWN_ERROR",
        "getProblemFromStatus",
        "status",
        "status",
        "status",
        "UNKNOWN_ERROR",
        "in200s",
        "status",
        "NONE",
        "in400s",
        "status",
        "CLIENT_ERROR",
        "in500s",
        "status",
        "SERVER_ERROR",
        "UNKNOWN_ERROR",
        "instance",
        "url",
        "axiosConfig",
        "doRequestWithoutBody",
        "url",
        "axiosConfig",
        "url",
        "data",
        "axiosConfig",
        "doRequestWithBody",
        "url",
        "data",
        "axiosConfig",
        "url",
        "axiosConfig",
        "doRequestWithoutBody",
        "url",
        "axiosConfig",
        "sauce"
    ],
    "literals": [
        "'axios'",
        "'./arrayUtils'",
        "'../webAPI/apierrors'",
        "'application/json'",
        "'Content-Type'",
        "'application/json'",
        "'CLIENT_ERROR'",
        "'SERVER_ERROR'",
        "'TIMEOUT_ERROR'",
        "'CONNECTION_ERROR'",
        "'NETWORK_ERROR'",
        "'UNKNOWN_ERROR'",
        "'ECONNABORTED'",
        "'ENOTFOUND'",
        "'ECONNREFUSED'",
        "'ECONNRESET'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'content-type'",
        "'text/json'",
        "'Network Error'",
        "'undefined'",
        "'undefined'",
        "string",
        "'get'",
        "string",
        "'post'",
        "string",
        "'post'"
    ],
    "variables": [
        "DEFAULT_HEADERS",
        "DEFAULT_CONFIG",
        "NONE",
        "CLIENT_ERROR",
        "SERVER_ERROR",
        "TIMEOUT_ERROR",
        "CONNECTION_ERROR",
        "NETWORK_ERROR",
        "UNKNOWN_ERROR",
        "TIMEOUT_ERROR_CODES",
        "NODEJS_CONNECTION_ERROR_CODES",
        "in200s",
        "in400s",
        "in500s",
        "create",
        "headers",
        "combinedConfig",
        "instance",
        "monitors",
        "addMonitor",
        "setHeader",
        "setHeaders",
        "doRequestWithoutBody",
        "doRequestWithBody",
        "doRequest",
        "startedAt",
        "parseError",
        "stack",
        "err",
        "convertResponse",
        "end",
        "duration",
        "error",
        "response",
        "status",
        "problem",
        "ok",
        "config",
        "headers",
        "data",
        "getProblemFromError",
        "getProblemFromStatus",
        "sauce"
    ],
    "comments": [
        "the default headers given to axios",
        "the default configuration for axios, default headers will also be merged in",
        "Creates a instance of our API using the configuration.",
        "combine the user's defaults with ours",
        "create the axios instance",
        "convenience for setting new request headers",
        "sets headers in bulk",
        "Make the request for GET, HEAD, DELETE",
        "Make the request for POST, PUT, PATCH",
        "Make the request with this config!",
        "Make the request and execute the identical pipeline for both promise paths.",
        "try and json parse the response, if successful, assume its",
        "the newer response type",
        "extract basic error name from status",
        "err.Name = getProblemFromStatus(error.response.status)()",
        "Converts an axios response/error into our response.",
        "new in Axios 0.13 -- some data could be buried 1 level now",
        "give an opportunity for anything to the response transforms to change stuff along the way",
        "first check if the error message is Network Error (set by axios at 0.12) on platforms other than NodeJS.",
        "then check the specific error code",
        "create the base object",
        "send back the sauce"
    ],
    "docstrings": [
        "* TypeScript conversion with addtion of call method\n * based on apisauce https://github.com/skellock/apisauce\n *\n * apisauce is licensed by the MIT license:\n *  Copyright (c) <year> <copyright holders>\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n *  documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n *  rights to use, copy, modify, merge, publish, distribute, sublicense,\n *  and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the\n *  following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n *  Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\n *  OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n *  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "* What's the problem for this response?\n   *\n   * TODO: We're losing some error granularity, but i'm cool with that\n   * until someone cares.",
        "* Given a HTTP status code, return back the appropriate problem enum."
    ],
    "functions": [],
    "classes": []
}