{
    "identifiers": [
        "numpy",
        "np",
        "cv2",
        "sys",
        "math",
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "ma",
        "scipy",
        "spatial",
        "distance",
        "pdist",
        "scipy",
        "spatial",
        "distance",
        "squareform",
        "scipy",
        "linalg",
        "inv",
        "numpy",
        "dot",
        "scipy",
        "optimize",
        "linear_sum_assignment",
        "img",
        "img",
        "shape",
        "sys",
        "exit",
        "IndexError",
        "cv2",
        "GaussianBlur",
        "img",
        "cv2",
        "calcHist",
        "blur",
        "hist",
        "ravel",
        "hist",
        "max",
        "hist_norm",
        "cumsum",
        "np",
        "arange",
        "np",
        "inf",
        "i",
        "np",
        "hsplit",
        "hist_norm",
        "i",
        "Q",
        "i",
        "Q",
        "q1",
        "np",
        "hsplit",
        "bins",
        "i",
        "np",
        "sum",
        "p1",
        "b1",
        "q1",
        "np",
        "sum",
        "p2",
        "b2",
        "q2",
        "np",
        "sum",
        "b1",
        "m1",
        "p1",
        "q1",
        "np",
        "sum",
        "b2",
        "m2",
        "p2",
        "q2",
        "v1",
        "q1",
        "v2",
        "q2",
        "fn",
        "fn_min",
        "fn",
        "i",
        "cv2",
        "threshold",
        "blur",
        "cv2",
        "THRESH_BINARY",
        "cv2",
        "THRESH_OTSU",
        "cv2",
        "threshold",
        "img",
        "thresh",
        "cv2",
        "THRESH_BINARY",
        "img_thresh1",
        "video",
        "frame_start",
        "frame_stop",
        "cv2",
        "VideoCapture",
        "video",
        "cap",
        "frame_start",
        "cap",
        "isOpened",
        "cap",
        "read",
        "video_fragment",
        "append",
        "frame",
        "cv2",
        "waitKey",
        "ord",
        "ret",
        "cap",
        "get",
        "frame_stop",
        "cap",
        "release",
        "cv2",
        "destroyAllWindows",
        "video_fragment",
        "path",
        "name",
        "ext",
        "amount",
        "i",
        "amount",
        "path",
        "name",
        "i",
        "ext",
        "cv2",
        "imread",
        "path",
        "name",
        "i",
        "ext",
        "img",
        "shape",
        "images",
        "append",
        "img",
        "AttributeError",
        "images",
        "img_with_blobs",
        "cv2",
        "SimpleBlobDetector_Params",
        "cv2",
        "SimpleBlobDetector_create",
        "detector",
        "detect",
        "img_with_blobs",
        "cv2",
        "drawKeypoints",
        "img_with_blobs",
        "keypoints",
        "np",
        "array",
        "cv2",
        "DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS",
        "im_with_keypoints",
        "siz",
        "std",
        "np",
        "linspace",
        "siz",
        "siz",
        "siz",
        "np",
        "linspace",
        "siz",
        "siz",
        "siz",
        "np",
        "meshgrid",
        "x",
        "y",
        "x",
        "y",
        "std",
        "np",
        "exp",
        "arg",
        "h",
        "sys",
        "float_info",
        "epsilon",
        "h",
        "max",
        "h",
        "h",
        "sum",
        "h",
        "sum",
        "h",
        "h",
        "x",
        "y",
        "std",
        "std",
        "h1",
        "h1",
        "mean",
        "img",
        "cv2",
        "bitwise_not",
        "img",
        "gray_image",
        "gray_image",
        "axis",
        "k",
        "square_diameter_log_3",
        "np",
        "maximum",
        "total",
        "np",
        "roll",
        "total",
        "d",
        "axis",
        "np",
        "maximum",
        "total",
        "np",
        "roll",
        "total",
        "d",
        "axis",
        "d",
        "total",
        "gray_image",
        "gray_image",
        "shape",
        "j",
        "h",
        "k",
        "w",
        "maxima",
        "j",
        "k",
        "gray_image",
        "j",
        "k",
        "result",
        "append",
        "k",
        "j",
        "result",
        "matrix",
        "Munkres",
        "m",
        "compute",
        "matrix",
        "row",
        "column",
        "indexes",
        "matrix",
        "row",
        "column",
        "cost_list",
        "append",
        "value",
        "total",
        "value",
        "index_list",
        "append",
        "row",
        "column",
        "index_list",
        "cost_list",
        "prior",
        "measurements",
        "array",
        "append",
        "prior",
        "prior",
        "measurement",
        "measurements",
        "array",
        "append",
        "measurement",
        "measurement",
        "pdist",
        "array",
        "metric",
        "squareform",
        "metric",
        "index",
        "munkres",
        "square",
        "square",
        "index",
        "square",
        "index",
        "min_index",
        "append",
        "index",
        "min_cost",
        "append",
        "square",
        "index",
        "min_index",
        "min_cost",
        "video",
        "start_f",
        "stop_f",
        "select_frames",
        "video",
        "start_f",
        "stop_f",
        "vid_frag",
        "shape",
        "vid_frag",
        "shape",
        "cv2",
        "getStructuringElement",
        "cv2",
        "MORPH_ELLIPSE",
        "cv2",
        "getStructuringElement",
        "cv2",
        "MORPH_ELLIPSE",
        "cv2",
        "getStructuringElement",
        "cv2",
        "MORPH_ELLIPSE",
        "frame",
        "vid_frag",
        "cv2",
        "waitKey",
        "ord",
        "cv2",
        "cvtColor",
        "frame",
        "cv2",
        "COLOR_BGR2GRAY",
        "m",
        "height",
        "n",
        "width",
        "n",
        "m",
        "gray_frame",
        "m",
        "cv2",
        "threshold",
        "gray_frame",
        "cv2",
        "THRESH_BINARY",
        "bin_frames",
        "append",
        "th1",
        "i",
        "i",
        "i",
        "frame",
        "bin_frames",
        "cv2",
        "erode",
        "frame",
        "erosion_kernel",
        "iterations",
        "cv2",
        "morphologyEx",
        "erosion",
        "cv2",
        "MORPH_OPEN",
        "kernel",
        "cv2",
        "dilate",
        "opening",
        "dilate_kernel",
        "iterations",
        "get_log_kernel",
        "cv2",
        "filter2D",
        "dilate",
        "cv2",
        "CV_32F",
        "log_kernel",
        "maxima_points",
        "append",
        "local_maxima",
        "log_img",
        "i",
        "i",
        "i",
        "maxima_points",
        "vid_frag",
        "max_points",
        "np",
        "diag",
        "np",
        "array",
        "dt",
        "pow",
        "dt",
        "dt",
        "pow",
        "dt",
        "dt",
        "dt",
        "np",
        "array",
        "np",
        "array",
        "R_var",
        "R_var",
        "np",
        "diag",
        "np",
        "zeros",
        "stop_frame",
        "i",
        "len",
        "max_points",
        "max_points",
        "i",
        "max_points",
        "i",
        "max_points",
        "i",
        "max_points",
        "i",
        "m",
        "IndexError",
        "point",
        "max_points",
        "point",
        "point",
        "est_number",
        "IndexError",
        "i",
        "stop_frame",
        "i",
        "stop_frame",
        "np",
        "zeros",
        "stop_frame",
        "frame",
        "stop_frame",
        "max_points",
        "frame",
        "IndexError",
        "index_error",
        "meas",
        "frame_measurements",
        "meas",
        "meas",
        "measurements",
        "append",
        "meas",
        "meas",
        "i",
        "est_number",
        "x",
        "i",
        "dot",
        "F",
        "x",
        "i",
        "dot",
        "F",
        "P",
        "dot",
        "F",
        "T",
        "Q",
        "dot",
        "H",
        "P",
        "dot",
        "H",
        "T",
        "R",
        "dot",
        "P",
        "H",
        "T",
        "dot",
        "inv",
        "S",
        "i",
        "est_number",
        "np",
        "isnan",
        "x",
        "i",
        "np",
        "isnan",
        "x",
        "i",
        "posterior_list",
        "append",
        "i",
        "i",
        "posterior_list",
        "x",
        "est_number",
        "np",
        "array",
        "x",
        "posterior_list",
        "np",
        "append",
        "temp_matrix",
        "measurements",
        "axis",
        "ValueError",
        "pdist",
        "temp_matrix",
        "squareform",
        "distance",
        "distance",
        "distance",
        "len",
        "posterior_list",
        "len",
        "posterior_list",
        "linear_sum_assignment",
        "distance",
        "distance",
        "row_index",
        "column_index",
        "sum",
        "i",
        "len",
        "row_index",
        "index",
        "append",
        "row_index",
        "i",
        "column_index",
        "i",
        "unit_cost",
        "append",
        "distance",
        "row_index",
        "i",
        "column_index",
        "i",
        "removed_states",
        "sort",
        "removed_index",
        "removed_states",
        "i",
        "len",
        "index",
        "index",
        "i",
        "removed_index",
        "index",
        "i",
        "index",
        "i",
        "i",
        "len",
        "index",
        "np",
        "ones",
        "len",
        "posterior_list",
        "post_index",
        "posterior_list",
        "post_index",
        "state_list",
        "i",
        "i",
        "len",
        "unit_cost",
        "unit_cost",
        "i",
        "i",
        "i",
        "len",
        "index",
        "index",
        "i",
        "np",
        "array",
        "measurements",
        "index",
        "i",
        "dot",
        "H",
        "x",
        "index",
        "i",
        "index",
        "i",
        "x",
        "index",
        "i",
        "dot",
        "K",
        "y",
        "T",
        "T",
        "x_est",
        "index",
        "i",
        "append",
        "x",
        "index",
        "i",
        "y_est",
        "index",
        "i",
        "append",
        "x",
        "index",
        "i",
        "dot",
        "np",
        "identity",
        "dot",
        "K",
        "H",
        "P",
        "x",
        "est_number",
        "i",
        "len",
        "index",
        "index",
        "i",
        "measurement_indexes",
        "append",
        "index",
        "i",
        "i",
        "len",
        "measurements",
        "i",
        "measurement_indexes",
        "new_index",
        "append",
        "i",
        "new_detection",
        "append",
        "measurements",
        "new_index",
        "i",
        "i",
        "len",
        "new_index",
        "i",
        "len",
        "new_detection",
        "len",
        "new_detection",
        "new_detection",
        "frame",
        "i",
        "new_detection",
        "frame",
        "i",
        "new_detection",
        "frame",
        "i",
        "new_detection",
        "frame",
        "i",
        "est_number",
        "est_number",
        "x",
        "est_number",
        "i",
        "len",
        "reject",
        "reject",
        "i",
        "no_track_list",
        "append",
        "posterior_list",
        "i",
        "track",
        "no_track_list",
        "track",
        "striked_tracks",
        "track",
        "track",
        "striked_tracks",
        "track",
        "i",
        "len",
        "striked_tracks",
        "striked_tracks",
        "i",
        "i",
        "removed_states",
        "removed_states",
        "append",
        "i",
        "i",
        "index_error",
        "value_error",
        "cv2",
        "waitKey",
        "ord",
        "cv2",
        "putText",
        "vid_fragment",
        "frame",
        "ff_nr",
        "font",
        "point",
        "measurements",
        "cv2",
        "circle",
        "vid_fragment",
        "frame",
        "point",
        "point",
        "cv2",
        "putText",
        "vid_fragment",
        "frame",
        "measurement_number",
        "point",
        "point",
        "font",
        "measurement_number",
        "j",
        "len",
        "x",
        "x",
        "j",
        "x",
        "j",
        "cv2",
        "circle",
        "vid_fragment",
        "frame",
        "x",
        "j",
        "x",
        "j",
        "cv2",
        "putText",
        "vid_fragment",
        "frame",
        "j",
        "x",
        "j",
        "x",
        "j",
        "font",
        "cv2",
        "imshow",
        "vid_fragment",
        "frame",
        "cv2",
        "waitKey",
        "ff_nr",
        "ff_nr",
        "removed_states",
        "index",
        "x_est",
        "y_est",
        "est_number",
        "vid_frag",
        "max_points",
        "x_est",
        "y_est",
        "est_number",
        "frame_positions",
        "max_points",
        "pos",
        "frame_positions",
        "plt",
        "plot",
        "pos",
        "pos",
        "plt",
        "axis",
        "vid_frag",
        "shape",
        "vid_frag",
        "shape",
        "IndexError",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "title",
        "ind",
        "est_number",
        "len",
        "x_est",
        "ind",
        "plt",
        "plot",
        "x_est",
        "ind",
        "y_est",
        "ind",
        "plt",
        "axis",
        "vid_frag",
        "shape",
        "vid_frag",
        "shape",
        "IndexError",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "title",
        "plt",
        "grid",
        "plt",
        "show",
        "cv2",
        "FONT_HERSHEY_SIMPLEX",
        "video_analise",
        "my_video",
        "start_frame",
        "stop_frame",
        "kalman",
        "maxima_points",
        "plot_points",
        "vid_fragment",
        "maxima_points",
        "x_est",
        "y_est",
        "est_number",
        "est_number"
    ],
    "literals": [
        "'otsu_binary(img) input image should be in grayscale!'",
        "'q'",
        "'/'",
        "'/'",
        "'euclidean'",
        "'q'",
        "'state\\n'",
        "'\\n'",
        "'euclidean'",
        "'cost to high, removing'",
        "'posterior\\n'",
        "'state added'",
        "'new posterior\\n'",
        "'track/strikes'",
        "'state_removed'",
        "'q'",
        "'f.nr:'",
        "'bin'",
        "'--------------------------------------'",
        "'r.'",
        "'width [px]'",
        "'height [px]'",
        "'Objects raw measurements'",
        "'g-'",
        "'width [px]'",
        "'height [px]'",
        "'Objects estimated trajectories'",
        "'CIMG4027.MOV'",
        "'\\nFinal estimates number:'",
        "'\\nTrajectories drawing...'",
        "'EOF - DONE'"
    ],
    "variables": [
        "blur",
        "hist",
        "hist_norm",
        "Q",
        "bins",
        "fn_min",
        "thresh",
        "p1",
        "p2",
        "q1",
        "q2",
        "b1",
        "b2",
        "m1",
        "m2",
        "v1",
        "v2",
        "fn",
        "fn_min",
        "thresh",
        "ret",
        "otsu",
        "ret",
        "img_thresh1",
        "cap",
        "video_fragment",
        "ret",
        "frame",
        "images",
        "img",
        "filterByArea",
        "minArea",
        "filterByCircularity",
        "minCircularity",
        "filterByConvexity",
        "minConvexity",
        "filterByInertia",
        "minInertiaRatio",
        "detector",
        "keypoints",
        "im_with_keypoints",
        "x",
        "y",
        "x",
        "y",
        "arg",
        "h",
        "h",
        "h",
        "h1",
        "square_diameter_log_3",
        "total",
        "d",
        "total",
        "total",
        "maxima",
        "h",
        "w",
        "result",
        "m",
        "indexes",
        "total",
        "index_list",
        "cost_list",
        "value",
        "array",
        "metric",
        "square",
        "min_index",
        "min_cost",
        "vid_frag",
        "height",
        "width",
        "kernel",
        "erosion_kernel",
        "dilate_kernel",
        "i",
        "bin_frames",
        "gray_frame",
        "n",
        "ret",
        "th1",
        "i",
        "maxima_points",
        "erosion",
        "opening",
        "dilate",
        "log_kernel",
        "log_img",
        "index_error",
        "value_error",
        "dt",
        "R_var",
        "P",
        "F",
        "H",
        "R",
        "Q",
        "x",
        "m",
        "x",
        "m",
        "index_error",
        "est_number",
        "index_error",
        "new_obj_hist",
        "diff_2",
        "frames_detected",
        "x_est",
        "y_est",
        "striked_tracks",
        "removed_states",
        "new_detection",
        "ff_nr",
        "frame_measurements",
        "index_error",
        "measurements",
        "P",
        "S",
        "K",
        "posterior_list",
        "temp_matrix",
        "temp_matrix",
        "value_error",
        "distance",
        "distance",
        "temp_distance",
        "distance",
        "row_index",
        "column_index",
        "final_cost",
        "unit_cost",
        "index",
        "state_list",
        "reject",
        "i",
        "reject",
        "i",
        "reject",
        "i",
        "y",
        "x",
        "P",
        "new_index",
        "measurement_indexes",
        "x",
        "est_number",
        "no_track_list",
        "x",
        "i",
        "measurement_number",
        "index_error",
        "index_error",
        "index_error",
        "start_frame",
        "stop_frame",
        "my_video",
        "font",
        "maxima_points",
        "vid_fragment",
        "x_est",
        "y_est",
        "est_number"
    ],
    "comments": [
        "masked arrays",
        "from filterpy.kalman import KalmanFilter",
        "from filterpy.common import Q_discrete_white_noise",
        "from munkres import Munkres, DISALLOWED",
        "check if input image is in grayscale (2D)",
        "if there is 3rd dimension",
        "image doesn't have 3rd dimension - proceed",
        "plt.close('all')",
        "find normalized_histogram, and its cumulative distribution function",
        "probabilities",
        "cum sum of classes",
        "weights",
        "finding means and variances",
        "calculates the minimization function",
        "find otsu's threshold value with OpenCV function",
        "print(\"{} {}\".format(thresh, ret))",
        "font = cv2.FONT_HERSHEY_SIMPLEX",
        "img, text, (x,y), font, size, color, thickens",
        "cv2.putText(frame, str(round(cap.get(0)/1000, 2)) + 's',",
        "(10, 15), font, 0.5, (255, 255, 255), 1)",
        "cv2.putText(frame, 'f.nr:' + str(cap.get(1)),",
        "(100, 15), font, 0.5, (255, 255, 255), 1)",
        "cv2.imshow('frame', frame)",
        "try:",
        "check if image was read",
        "# Change thresholds",
        "params.minThreshold = 10",
        "params.maxThreshold = 200",
        "Filter by Area.",
        "Filter by Circularity",
        "Filter by Convexity",
        "Filter by Inertia",
        "Create a detector with the parameters",
        "get positions of blobs",
        "Draw detected blobs as red circles.",
        "cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS ensures the size of the",
        "circle corresponds to the size of blob",
        "27x27",
        "if total == gray_iamge, maxima = total",
        "gray_image[j][k] has float values!",
        "watch pixel coordinates output! (w, h)",
        "print_matrix(cost_matrix, msg='Cost matrix:')",
        "print_matrix(matrix, msg='Highest profit through this matrix:')",
        "print('({}, {}) -> {}'.format(row, column, value))",
        "print('total profit={}'.format(total))",
        "count euclidean metric between priors and measurements",
        "do not match to itself (distance = 0) and match only when distance",
        "is low enough",
        "distance between indexes",
        "print(square[index])",
        "list of all VideoCapture methods and attributes",
        "[print(method) for method in dir(cap) if callable(getattr(cap, method))]",
        "try:",
        "except IndexError:",
        "height = 0",
        "width = 0",
        "kernel for morphological operations",
        "check cv2.getStructuringElement() doc for more info",
        "preprocess image loop",
        "height",
        "width",
        "create a CLAHE object (Arguments are optional)",
        "clahe = cv2.createCLAHE(clipLimit=8.0, tileGridSize=(8, 8))",
        "cl1 = clahe.apply(gray_frame)",
        "frame_thresh1 = otsu_binary(cl1)",
        "gather measurements loop",
        "prepare image - morphological operations",
        "create LoG kernel for finding local maximas",
        "get local maximas of filtered image per frame",
        "step of filter",
        "measurements variance between x-x and y-y",
        "Q_var = 0.1  # model variance",
        "state covariance matrix - no initial covariances, variances only",
        "[10^2 px, 10^2 px, ..] -",
        "state transition matrix for 6 state variables",
        "(position - velocity - acceleration,",
        "x, y)",
        "x and y coordinates only - measurements matrix",
        "no initial corelation between x and y positions - variances only",
        "measurement covariance matrix",
        "Q must be the same shape as P",
        "model covariance matrix",
        "create state vectors, max number of states - as much as frames",
        "state initialization - initial state is equal to measurements",
        "required for django runserver tests",
        "number of estimates at the start",
        "history of new objects appearance",
        "difference between position of n-th object in m-1 frame and position of",
        "the same object in m frame",
        "for how many frames given object was detected",
        "x and y posterior positions (estimates) for drawnings",
        "variable for counting frames where object has no measurement",
        "frame number",
        "kalman filter loop",
        "measurements in one frame",
        "make list of lists, not tuples; don't take zeros, assuming it's image",
        "count prior",
        "",
        "prepare for update phase -> get (prior - measurement) assignment",
        "temp_matrix = np.array(x[0:est_number, 0:2])",
        "print(temp_matrix)",
        "returns vector",
        "make square matrix out of vector",
        "remove elements that are repeated - (0-1), (1-0) etc.",
        "distance = distance[est_number::, 0:est_number]",
        "munkres",
        "index(object, measurement)",
        "",
        "index correction - take past states into account",
        "",
        "find object to reject",
        "check if distance (residual) isn't to high for assignment",
        "",
        "update phase",
        "find object that should get measurement next",
        "count residual y: measurement - state",
        "posterior",
        "append new positions",
        "if x[i][0] and x[i][1]:",
        "posterior state covariance matrix",
        "",
        "find new objects and create new states for them",
        "measurements that have assignment",
        "find measurements that don't have assignments",
        "for every detections in the last frame",
        "",
        "find states without measurements and remove them",
        "print('no_trk_list', no_track_list)",
        "",
        "draw measurements point loop",
        "img, text, (x,y), font, size, color, thickens",
        "mark local maximas for every frame",
        "positions.append((x_est[i][j], y_est[i][j]))",
        "plot raw measurements",
        "",
        "plot estimated trajectories",
        "for pos in range(len(x_est[ind])):",
        "if not np.isnan(x_est[ind][pos]):",
        "plt.plot(x_est[ind][pos], y_est[ind][pos], 'g.')",
        "print(frame)",
        "[xmin xmax ymin ymax]",
        "##########################################################################",
        ""
    ],
    "docstrings": [
        "\"\"\"\n    Otsu binarization function.\n    :param img: Image to binarize - should be in greyscale.\n    :return: Image after binarization.\n    \"\"\"",
        "\"\"\"\n    Function that return selected frames from video.\n    :param video: string, name of video whom frames are selected,\n    :param frame_start: integer, frame from selection should be started\n    :param frame_stop: integer, ending frame of selected section\n    :return: video fragment <start_frame, stop_frame>\n    \"\"\"",
        "\"\"\"\n    Function for reading images from folder. Name of images should be:\n    name_index.extension so function can work automatic.\n    Indexes should be in order! If they are not, function stops if image\n    with next index is not found.\n    Example: image_5.jpg -> read_image('path', 'image_', 'jpg', 50)\n    :param path: string, path of images to read\n    :param name: string, name of image without index\n    :param ext: string, extension of image to read with \".\", ex: '.jpg'\n    :param amount: integer,\n    :return: selected images as table if image exist or omits the image\n    if it doesn't exist\n    \"\"\"",
        "\"\"\"\n    LoG(x,y) =\n(1/(pi*sigma^4)) * (1 - (x^2+y^2)/(sigma^2)) * (e ^ (- (x^2 + y^2) / 2sigma^2)\n\n    :param siz:\n    :param std:\n    :return:\n    \"\"\"",
        "\"\"\"\n    Return inversion of an image.\n    :param img: Input image.\n    :return: Inverted image.\n    \"\"\"",
        "\"\"\"\n    Finds local maxima in grayscale image.\n    source:\n    https://dsp.stackexchange.com/questions/17932/finding-local-\n    brightness-maximas-with-opencv\n    :param gray_image: Input 2D image.\n    :return: Coordinates of local maxima points.\n    \"\"\"",
        "\"\"\"\n    Implementation of Hungarian algorithm for solving the Assignment Problem\n    between measurements and estimates in multivariate linear kalman filter\n    Example of usage:\n        indexes = munkres(matrix)\n    :param matrix: input matrix - should be a square cost matrix\n    :return: index_list of tuples with assigned indexes,\n             cost_list of assignment between indexes\n    \"\"\"",
        "\"\"\"\n    Creates pairs between priors and measurement so each lays as close as\n    possible to each other.\n    Example of use:\n    index = pair((60, 0), [(60, 0), (219, 37), (357, 55), (78, 82),\n                 (301, 103), (202, 109), (376, 110)]))\n    :param prior: prior state prediction (position) from Kalman filter, tuple\n    :param measurements: positions from blob detection - measurements (x, y),\n                 list of tuples\n    :return: optimal pairs between estimate - measurement and cost of\n             assigement between them\n    \"\"\"",
        "\"\"\"\n    Function that finds objects in the video image.\n    :param video: path to the video to be analysed\n    :param start_f: integer, number of frame from with video should be analysed\n    :param stop_f: integer, number of frame to with video should be analysed\n    :return: maxima_points - positions of detected objects are returned as\n                             (x, y) tuples in the fallowing format:\n                             maxima_points[frame_nr][index_of_tuple]\n             vid_fragment - selected fragment of given video in the format:\n                            vid_fragment[frame_nr][3D pixel matrix, BGR]\n    \"\"\"",
        "\"\"\"\n    Kalman Filter function. Takes measurements from video analyse function\n    and estimates positions of detected objects. Munkres algorithm is used for\n    assignments between estimates (states) and measurements.\n    :param max_points: measurements.\n    :return: x_est, y_est - estimates of x and y positions in the following\n             format: x_est[index_of_object][frame] gives x position of object\n             with index = [index_of_object] in the frame = [frame]. The same\n             goes with y positions.\n    \"\"\""
    ],
    "functions": [
        "otsu_binary",
        "select_frames",
        "read_image",
        "blob_detect",
        "get_log_kernel",
        "img_inv",
        "local_maxima",
        "munkres",
        "pair",
        "video_analise",
        "kalman",
        "plot_points"
    ],
    "classes": []
}