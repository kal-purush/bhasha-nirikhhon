{
    "identifiers": [
        "com",
        "zhengdianfang",
        "dazhongbao",
        "models",
        "cache",
        "android",
        "os",
        "SystemClock",
        "android",
        "util",
        "Base64",
        "android",
        "util",
        "Base64InputStream",
        "android",
        "util",
        "Base64OutputStream",
        "android",
        "util",
        "Log",
        "java",
        "io",
        "BufferedInputStream",
        "java",
        "io",
        "EOFException",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "FileOutputStream",
        "java",
        "io",
        "FilterInputStream",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "io",
        "OutputStream",
        "java",
        "util",
        "Collections",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "LinkedHashMap",
        "java",
        "util",
        "TAG",
        "getSimpleName",
        "mEntries",
        "mTotalSize",
        "mRootDirectory",
        "mMaxCacheSizeInBytes",
        "DEFAULT_DISK_USAGE_BYTES",
        "HYSTERESIS_FACTOR",
        "CACHE_MAGIC",
        "rootDirectory",
        "maxCacheSizeInBytes",
        "mRootDirectory",
        "rootDirectory",
        "mMaxCacheSizeInBytes",
        "maxCacheSizeInBytes",
        "rootDirectory",
        "rootDirectory",
        "DEFAULT_DISK_USAGE_BYTES",
        "Override",
        "files",
        "mRootDirectory",
        "listFiles",
        "files",
        "file",
        "files",
        "file",
        "mEntries",
        "clear",
        "mTotalSize",
        "Log",
        "d",
        "TAG",
        "Override",
        "key",
        "entry",
        "mEntries",
        "get",
        "key",
        "entry",
        "file",
        "getFileForKey",
        "key",
        "cis",
        "cis",
        "file",
        "Base64",
        "DEFAULT",
        "CacheHeader",
        "readHeader",
        "cis",
        "data",
        "streamToBytes",
        "cis",
        "file",
        "length",
        "cis",
        "bytesRead",
        "entry",
        "toCacheEntry",
        "data",
        "e",
        "Log",
        "d",
        "TAG",
        "file",
        "getAbsolutePath",
        "e",
        "toString",
        "remove",
        "key",
        "cis",
        "cis",
        "close",
        "ioe",
        "Override",
        "mRootDirectory",
        "exists",
        "mRootDirectory",
        "mkdirs",
        "files",
        "mRootDirectory",
        "listFiles",
        "files",
        "file",
        "files",
        "fis",
        "fis",
        "file",
        "Base64",
        "DEFAULT",
        "entry",
        "CacheHeader",
        "readHeader",
        "fis",
        "entry",
        "size",
        "file",
        "length",
        "putEntry",
        "entry",
        "key",
        "entry",
        "e",
        "file",
        "file",
        "fis",
        "fis",
        "close",
        "ignored",
        "Override",
        "key",
        "fullExpire",
        "entry",
        "get",
        "key",
        "entry",
        "entry",
        "softTtl",
        "fullExpire",
        "entry",
        "ttl",
        "put",
        "key",
        "entry",
        "Override",
        "key",
        "entry",
        "pruneIfNeeded",
        "entry",
        "data",
        "length",
        "file",
        "getFileForKey",
        "key",
        "fos",
        "file",
        "Base64",
        "DEFAULT",
        "e",
        "key",
        "entry",
        "success",
        "e",
        "writeHeader",
        "fos",
        "success",
        "fos",
        "close",
        "fos",
        "write",
        "entry",
        "data",
        "fos",
        "close",
        "putEntry",
        "key",
        "e",
        "e",
        "deleted",
        "file",
        "deleted",
        "Override",
        "key",
        "deleted",
        "getFileForKey",
        "key",
        "removeEntry",
        "key",
        "deleted",
        "Log",
        "d",
        "TAG",
        "key",
        "getFilenameForKey",
        "key",
        "key",
        "firstHalfLength",
        "key",
        "length",
        "localFilename",
        "valueOf",
        "key",
        "substring",
        "firstHalfLength",
        "hashCode",
        "localFilename",
        "valueOf",
        "key",
        "substring",
        "firstHalfLength",
        "hashCode",
        "localFilename",
        "key",
        "mRootDirectory",
        "getFilenameForKey",
        "key",
        "neededSpace",
        "mTotalSize",
        "neededSpace",
        "mMaxCacheSizeInBytes",
        "Log",
        "v",
        "TAG",
        "before",
        "mTotalSize",
        "prunedFiles",
        "startTime",
        "SystemClock",
        "elapsedRealtime",
        "iterator",
        "mEntries",
        "entrySet",
        "iterator",
        "iterator",
        "hasNext",
        "entry",
        "iterator",
        "next",
        "e",
        "entry",
        "getValue",
        "deleted",
        "getFileForKey",
        "e",
        "key",
        "deleted",
        "mTotalSize",
        "e",
        "size",
        "Log",
        "d",
        "TAG",
        "e",
        "key",
        "getFilenameForKey",
        "e",
        "key",
        "iterator",
        "remove",
        "prunedFiles",
        "mTotalSize",
        "neededSpace",
        "mMaxCacheSizeInBytes",
        "HYSTERESIS_FACTOR",
        "Log",
        "v",
        "TAG",
        "prunedFiles",
        "mTotalSize",
        "before",
        "SystemClock",
        "elapsedRealtime",
        "startTime",
        "key",
        "entry",
        "mEntries",
        "containsKey",
        "key",
        "mTotalSize",
        "entry",
        "size",
        "oldEntry",
        "mEntries",
        "get",
        "key",
        "mTotalSize",
        "entry",
        "size",
        "oldEntry",
        "size",
        "mEntries",
        "put",
        "key",
        "entry",
        "key",
        "entry",
        "mEntries",
        "get",
        "key",
        "entry",
        "mTotalSize",
        "entry",
        "size",
        "mEntries",
        "remove",
        "key",
        "length",
        "length",
        "count",
        "pos",
        "pos",
        "length",
        "count",
        "read",
        "pos",
        "length",
        "pos",
        "pos",
        "count",
        "size",
        "key",
        "etag",
        "serverDate",
        "ttl",
        "softTtl",
        "responseHeaders",
        "key",
        "entry",
        "key",
        "key",
        "size",
        "entry",
        "data",
        "length",
        "etag",
        "entry",
        "etag",
        "serverDate",
        "entry",
        "serverDate",
        "ttl",
        "entry",
        "ttl",
        "softTtl",
        "entry",
        "softTtl",
        "responseHeaders",
        "entry",
        "responseHeaders",
        "entry",
        "magic",
        "readInt",
        "magic",
        "CACHE_MAGIC",
        "entry",
        "key",
        "readString",
        "entry",
        "etag",
        "readString",
        "entry",
        "etag",
        "equals",
        "entry",
        "etag",
        "entry",
        "serverDate",
        "readLong",
        "entry",
        "ttl",
        "readLong",
        "entry",
        "softTtl",
        "readLong",
        "entry",
        "responseHeaders",
        "readStringStringMap",
        "entry",
        "data",
        "e",
        "e",
        "data",
        "data",
        "e",
        "etag",
        "etag",
        "e",
        "serverDate",
        "serverDate",
        "e",
        "ttl",
        "ttl",
        "e",
        "softTtl",
        "softTtl",
        "e",
        "responseHeaders",
        "responseHeaders",
        "e",
        "os",
        "writeInt",
        "os",
        "CACHE_MAGIC",
        "writeString",
        "os",
        "key",
        "writeString",
        "os",
        "etag",
        "etag",
        "writeLong",
        "os",
        "serverDate",
        "writeLong",
        "os",
        "ttl",
        "writeLong",
        "os",
        "softTtl",
        "writeStringStringMap",
        "responseHeaders",
        "os",
        "os",
        "flush",
        "e",
        "Log",
        "d",
        "e",
        "toString",
        "bytesRead",
        "Override",
        "result",
        "read",
        "result",
        "bytesRead",
        "result",
        "Override",
        "buffer",
        "offset",
        "count",
        "result",
        "read",
        "buffer",
        "offset",
        "count",
        "result",
        "bytesRead",
        "result",
        "result",
        "b",
        "read",
        "b",
        "b",
        "os",
        "n",
        "os",
        "write",
        "n",
        "os",
        "write",
        "n",
        "os",
        "write",
        "n",
        "os",
        "write",
        "n",
        "n",
        "n",
        "read",
        "n",
        "read",
        "n",
        "read",
        "n",
        "read",
        "n",
        "os",
        "n",
        "os",
        "write",
        "n",
        "os",
        "write",
        "n",
        "os",
        "write",
        "n",
        "os",
        "write",
        "n",
        "os",
        "write",
        "n",
        "os",
        "write",
        "n",
        "os",
        "write",
        "n",
        "os",
        "write",
        "n",
        "n",
        "n",
        "read",
        "n",
        "read",
        "n",
        "read",
        "n",
        "read",
        "n",
        "read",
        "n",
        "read",
        "n",
        "read",
        "n",
        "read",
        "n",
        "os",
        "s",
        "b",
        "s",
        "getBytes",
        "writeLong",
        "os",
        "b",
        "length",
        "os",
        "write",
        "b",
        "b",
        "length",
        "n",
        "readLong",
        "b",
        "streamToBytes",
        "n",
        "b",
        "os",
        "writeInt",
        "os",
        "size",
        "entry",
        "entrySet",
        "writeString",
        "os",
        "entry",
        "getKey",
        "writeString",
        "os",
        "entry",
        "getValue",
        "writeInt",
        "os",
        "size",
        "readInt",
        "result",
        "size",
        "Collections",
        "emptyMap",
        "size",
        "i",
        "i",
        "size",
        "i",
        "key",
        "readString",
        "intern",
        "value",
        "readString",
        "intern",
        "result",
        "put",
        "key",
        "value",
        "result"
    ],
    "literals": [
        "\"Cache cleared.\"",
        "\" : \"",
        "\"Could not delete cache entry for key=\"",
        "\", filename=\"",
        "\"Pruning old cache entries.\"",
        "\"Could not delete cache entry for key=\"",
        "\", filename=\"",
        "\"pruned \"",
        "\" files, \"",
        "\" bytes, \"",
        "\" ms\"",
        "\"\"",
        "\"\"",
        "\"%s\"",
        "\"UTF-8\"",
        "\"UTF-8\""
    ],
    "variables": [
        "mRootDirectory",
        "mMaxCacheSizeInBytes",
        "count",
        "size",
        "key",
        "etag",
        "serverDate",
        "ttl",
        "softTtl",
        "responseHeaders"
    ],
    "comments": [
        "if the entry does not exist, return.",
        "eat header",
        "Visible for testing.",
        "don't bother deleting, it'll get pruned eventually"
    ],
    "docstrings": [
        "* Created by zheng on 16/6/15.",
        "* Cache implementation that caches files directly onto the hard disk in the specified\n * directory. The default disk usage size is 5MB, but is configurable.",
        "Map of the Key, CacheHeader pairs",
        "Total amount of space currently used by the cache in bytes.",
        "The root directory to use for the cache.",
        "The maximum size of the cache in bytes.",
        "Default maximum disk usage in bytes.",
        "High water mark percentage for the cache",
        "Magic number for current version of cache file format.",
        "* Constructs an instance of the BaseDiskCache at the specified directory.\n     * @param rootDirectory The root directory of the cache.\n     * @param maxCacheSizeInBytes The maximum size of the cache in bytes.",
        "* Constructs an instance of the BaseDiskCache at the specified directory using\n     * the default maximum cache size of 5MB.\n     * @param rootDirectory The root directory of the cache.",
        "* Clears the cache. Deletes all cached files from disk.",
        "* Returns the cache entry with the specified key if it exists, null otherwise.",
        "* Initializes the BaseDiskCache by scanning for all files currently in the\n     * specified root directory. Creates the root directory if necessary.",
        "* Invalidates an entry in the cache.\n     * @param key Cache key\n     * @param fullExpire True to fully expire the entry, false to soft expire",
        "* Puts the entry with the specified key into the cache.",
        "* Removes the specified key from the cache if it exists.",
        "* Creates a pseudo-unique filename for the specified cache key.\n     * @param key The key to generate a file name for.\n     * @return A pseudo-unique filename.",
        "* Returns a file object for the given cache key.",
        "* Prunes the cache to fit the amount of bytes specified.\n     * @param neededSpace The amount of bytes we are trying to fit into the cache.",
        "* Puts the entry with the specified key into the cache.\n     * @param key The key to identify the entry by.\n     * @param entry The entry to cache.",
        "* Removes the entry identified by 'key' from the cache.",
        "* Reads the contents of an InputStream into a byte[].\n     *",
        "if (pos != length) {\n            throw new IOException(\"Expected \" + length + \" bytes, read \" + pos + \" bytes\");\n        }",
        "* Handles holding onto the cache headers for an entry.",
        "The size of the data identified by this CacheHeader. (This is not\n         * serialized to disk.",
        "The key that identifies the cache entry.",
        "ETag for cache coherence.",
        "Date of this response as reported by the server.",
        "TTL for this record.",
        "Soft TTL for this record.",
        "Headers from the response resulting in this cache entry.",
        "* Instantiates a new CacheHeader object\n         * @param key The key that identifies the cache entry\n         * @param entry The cache entry.",
        "* Reads the header off of an InputStream and returns a CacheHeader object.\n         * @param is The InputStream to read from.\n         * @throws IOException",
        "* Creates a cache entry for the specified data.",
        "* Writes the contents of this CacheHeader to the specified OutputStream.",
        "* Homebrewed simple serialization system used for reading and writing cache\n     * headers on disk. Once upon a time, this used the standard Java\n     * Object{Input,Output}Stream, but the default implementation relies heavily\n     * on reflection (even for standard types) and generates a ton of garbage.",
        "* Simple wrapper around {@link InputStream#read()} that throws EOFException\n     * instead of returning -1."
    ],
    "functions": [
        "BaseDiskCache",
        "BaseDiskCache",
        "clear",
        "Entry",
        "get",
        "initialize",
        "invalidate",
        "put",
        "remove",
        "getFilenameForKey",
        "File",
        "getFileForKey",
        "pruneIfNeeded",
        "putEntry",
        "removeEntry",
        "streamToBytes",
        "CacheHeader",
        "CacheHeader",
        "CacheHeader",
        "readHeader",
        "Entry",
        "toCacheEntry",
        "writeHeader",
        "CountingInputStream",
        "read",
        "read",
        "read",
        "writeInt",
        "readInt",
        "writeLong",
        "readLong",
        "writeString",
        "readString",
        "writeStringStringMap",
        "readStringStringMap"
    ],
    "classes": [
        "BaseDiskCache",
        "CacheHeader",
        "CountingInputStream"
    ]
}