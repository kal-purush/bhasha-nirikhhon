{
    "identifiers": [
        "os",
        "sys",
        "json",
        "re",
        "collections",
        "errno",
        "filename",
        "open",
        "filename",
        "read",
        "target",
        "source",
        "lpath",
        "collections",
        "namedtuple",
        "re",
        "compile",
        "s",
        "source",
        "s",
        "split",
        "lpath",
        "s",
        "file_get_contents",
        "s_absp",
        "mycontents",
        "splitlines",
        "s_absp",
        "FileEntry",
        "target_name",
        "embed_target_name",
        "file_contents",
        "contents",
        "files",
        "append",
        "name",
        "entry",
        "files",
        "file",
        "files",
        "file",
        "file_contents",
        "done",
        "line",
        "tmp_file",
        "pattern",
        "search",
        "line",
        "found",
        "found",
        "group",
        "files_dict",
        "include_file",
        "file_contents",
        "updated_file",
        "extend",
        "data",
        "updated_file",
        "append",
        "line",
        "file_count",
        "file_count",
        "len",
        "tmp_file",
        "updated_file",
        "tmp_file",
        "insert",
        "tmp_file",
        "append",
        "FileEntry",
        "target_name",
        "file",
        "target_name",
        "file_contents",
        "tmp_file",
        "final_files",
        "append",
        "file",
        "entry",
        "file",
        "final_files",
        "open",
        "file",
        "target_name",
        "out_file",
        "file",
        "file_contents",
        "line",
        "contents",
        "out_file",
        "write",
        "line",
        "i",
        "os",
        "shutil",
        "glob",
        "i",
        "get",
        "i",
        "i",
        "i",
        "i",
        "i",
        "hosd",
        "get",
        "tosd",
        "get",
        "hosd",
        "get",
        "hosd",
        "get",
        "tosd",
        "get",
        "hosd",
        "get",
        "i",
        "get",
        "hft",
        "get",
        "get",
        "i",
        "i",
        "i",
        "get",
        "i",
        "cus",
        "get",
        "i",
        "get",
        "tosd",
        "get",
        "cpu_features",
        "get",
        "cpu_features",
        "get",
        "tosd",
        "get",
        "tabi",
        "habi",
        "tabi",
        "tbits",
        "env",
        "get",
        "lower",
        "tneon",
        "env",
        "get",
        "lower",
        "deps",
        "get",
        "openclenv",
        "get",
        "openclenv",
        "get",
        "flags",
        "lflags",
        "lpath",
        "env",
        "get",
        "lower",
        "flags",
        "env",
        "get",
        "lower",
        "thardfp",
        "neon",
        "tabi",
        "deps",
        "get",
        "get",
        "compiler_env",
        "compiler_env",
        "get",
        "flags",
        "compiler_env",
        "compiler_env",
        "get",
        "flags",
        "compiler_env",
        "cxx",
        "flags",
        "cxx",
        "flags",
        "env",
        "get",
        "lower",
        "flags",
        "env",
        "get",
        "lower",
        "cxx",
        "flags",
        "lflags",
        "lcore_flags",
        "tabi",
        "flags",
        "hardfp",
        "flags",
        "tname2",
        "flags",
        "tabi",
        "flags",
        "env",
        "get",
        "lower",
        "flags",
        "flags",
        "tabi",
        "flags",
        "tabi",
        "flags",
        "tname2",
        "flags",
        "compiler_env",
        "get",
        "lflags",
        "compiler_env",
        "lcore_flags",
        "compiler_env",
        "env",
        "get",
        "lower",
        "flags",
        "lflags",
        "lcore_flags",
        "lflags",
        "flags",
        "join",
        "flags",
        "join",
        "lflags",
        "join",
        "lcore_flags",
        "nie",
        "s",
        "s",
        "replace",
        "i",
        "os",
        "shutil",
        "glob",
        "subprocess",
        "i",
        "get",
        "i",
        "i",
        "get",
        "i",
        "i",
        "hosd",
        "get",
        "hosd",
        "get",
        "hosd",
        "get",
        "hosd",
        "get",
        "hosd",
        "get",
        "hosd",
        "get",
        "tosd",
        "get",
        "i",
        "get",
        "i",
        "get",
        "i",
        "get",
        "winh",
        "tname2",
        "deps",
        "get",
        "get",
        "compiler_env",
        "get",
        "env",
        "get",
        "env",
        "get",
        "env",
        "get",
        "env",
        "get",
        "lower",
        "env",
        "get",
        "lower",
        "env",
        "get",
        "lower",
        "env",
        "get",
        "lower",
        "i",
        "get",
        "i",
        "get",
        "cfg",
        "get",
        "get",
        "pi1",
        "cfg",
        "get",
        "get",
        "pi",
        "pi1",
        "os",
        "path",
        "join",
        "pi",
        "pi1",
        "os",
        "path",
        "isdir",
        "build_dir",
        "build_dir",
        "os",
        "chdir",
        "build_dir",
        "glob",
        "glob",
        "xcore_files",
        "glob",
        "glob",
        "glob",
        "glob",
        "xcore_files",
        "glob",
        "glob",
        "xfiles",
        "glob",
        "glob",
        "bare_metal",
        "env",
        "get",
        "lower",
        "env",
        "get",
        "lower",
        "env",
        "get",
        "lower",
        "xfiles",
        "glob",
        "glob",
        "env",
        "get",
        "lower",
        "xfiles",
        "glob",
        "glob",
        "use_opencl",
        "xcore_files",
        "glob",
        "glob",
        "xcore_files",
        "glob",
        "glob",
        "xfiles",
        "glob",
        "glob",
        "xfiles",
        "glob",
        "glob",
        "use_embed_kernel",
        "glob",
        "glob",
        "glob",
        "glob",
        "file",
        "cl_files",
        "file",
        "source_list",
        "append",
        "source_name",
        "embed_files",
        "append",
        "source_name",
        "resolve_includes",
        "embed_files",
        "source_list",
        "pi",
        "files_to_delete",
        "embed_files",
        "use_neon",
        "xcore_files",
        "glob",
        "glob",
        "xcore_files",
        "glob",
        "glob",
        "xfiles",
        "glob",
        "glob",
        "xfiles",
        "glob",
        "glob",
        "ck",
        "run_and_get_stdout",
        "r",
        "r",
        "r",
        "strip",
        "git_hash",
        "strip",
        "ck",
        "save_text_file",
        "version_filename",
        "build_info",
        "r",
        "r",
        "f",
        "xcore_files",
        "_slash",
        "f",
        "os",
        "path",
        "splitext",
        "f",
        "obj_ext",
        "core_files",
        "f",
        "obj_core_files",
        "fo",
        "hosd",
        "get",
        "sb",
        "deps",
        "get",
        "get",
        "sb",
        "eset",
        "_slash",
        "pi",
        "sb",
        "eset",
        "_slash",
        "build_dir",
        "sb",
        "eset",
        "_slash",
        "eifs",
        "flags",
        "eifs",
        "sb",
        "eset",
        "_slash",
        "eifs",
        "lcore_flags",
        "eifs",
        "sb",
        "eset",
        "_slash",
        "eifs",
        "core_files",
        "eifs",
        "sb",
        "eset",
        "_slash",
        "libprefix",
        "sb",
        "eset",
        "bare_metal",
        "sb",
        "eset",
        "_slash",
        "pp",
        "sb",
        "eset",
        "env",
        "get",
        "hname",
        "sb",
        "hosd",
        "get",
        "os",
        "path",
        "join",
        "pp",
        "sext",
        "rest_params_var",
        "os",
        "path",
        "join",
        "pi",
        "sext",
        "os",
        "makedirs",
        "os",
        "path",
        "dirname",
        "fn",
        "OSError",
        "exc",
        "exc",
        "errno",
        "errno",
        "EEXIST",
        "ck",
        "save_text_file",
        "fn",
        "sb",
        "rx",
        "rx",
        "hosd",
        "get",
        "se",
        "se",
        "fn",
        "os",
        "system",
        "x",
        "os",
        "system",
        "fn",
        "f",
        "xfiles",
        "_slash",
        "f",
        "os",
        "path",
        "splitext",
        "f",
        "obj_ext",
        "core_files",
        "f",
        "obj_core_files",
        "fo",
        "hosd",
        "get",
        "sb",
        "deps",
        "get",
        "get",
        "sb",
        "eset",
        "_slash",
        "pi",
        "sb",
        "eset",
        "_slash",
        "build_dir",
        "sb",
        "eset",
        "_slash",
        "eifs",
        "flags",
        "eifs",
        "sb",
        "eset",
        "_slash",
        "eifs",
        "lflags",
        "eifs",
        "sb",
        "eset",
        "_slash",
        "eifs",
        "core_files",
        "eifs",
        "sb",
        "eset",
        "_slash",
        "libprefix",
        "sb",
        "eset",
        "bare_metal",
        "sb",
        "eset",
        "_slash",
        "pp",
        "sb",
        "eset",
        "env",
        "get",
        "sb",
        "hosd",
        "get",
        "os",
        "path",
        "join",
        "pp",
        "sext",
        "rest_params_var",
        "os",
        "path",
        "join",
        "pi",
        "sext",
        "os",
        "makedirs",
        "os",
        "path",
        "dirname",
        "fn",
        "OSError",
        "exc",
        "exc",
        "errno",
        "errno",
        "EEXIST",
        "ck",
        "save_text_file",
        "fn",
        "sb",
        "rx",
        "rx",
        "hosd",
        "get",
        "se",
        "se",
        "fn",
        "os",
        "system",
        "x",
        "os",
        "system",
        "fn"
    ],
    "literals": [
        "'FileEntry'",
        "'target_name file_contents'",
        "\"#include \\\"(.*)\\\"\"",
        "\"/\"",
        "'/src/'",
        "\"embed\"",
        "\"R\\\"(\\n\"",
        "\"\\n)\\\"\"",
        "'w+'",
        "\"%s\\n\"",
        "'out'",
        "''",
        "'ck_kernel'",
        "'host_os_uoa'",
        "'target_os_uoa'",
        "'host_os_dict'",
        "'target_os_dict'",
        "'bits'",
        "''",
        "'bits'",
        "''",
        "'ck_name'",
        "''",
        "'ck_name2'",
        "''",
        "'ck_name2'",
        "''",
        "'macos'",
        "''",
        "'features'",
        "'os'",
        "'abi'",
        "''",
        "'path'",
        "'new_env'",
        "'install_path'",
        "''",
        "'customize'",
        "'install_env'",
        "'deps'",
        "''",
        "'-D_GLIBCXX_USE_NANOSLEEP'",
        "'-Wno-deprecated-declarations'",
        "'-Wall'",
        "'-DARCH_ARM'",
        "'-Wextra'",
        "'-Wno-unused-parameter'",
        "'-pedantic'",
        "'-Wdisabled-optimization'",
        "'-Wformat=2'",
        "'-Winit-self'",
        "'-Wstrict-overflow=2'",
        "'-Wswitch-default'",
        "'-fpermissive'",
        "'-std=gnu++11'",
        "'-Wno-vla'",
        "'-Woverloaded-virtual'",
        "'-Wctor-dtor-privacy'",
        "'-Wsign-promo'",
        "'-Weffc++'",
        "'-Wno-format-nonliteral'",
        "'-Wno-overlength-strings'",
        "'-Wno-strict-overflow'",
        "'-ldl'",
        "'-ldl'",
        "'cpu_features'",
        "'arm_fp_neon'",
        "''",
        "'arm_fp_hard'",
        "''",
        "'abi'",
        "''",
        "''",
        "''",
        "'x86'",
        "'64'",
        "'x86_64'",
        "'USE_NEON'",
        "''",
        "'on'",
        "'yes'",
        "'USE_NEON'",
        "'ON'",
        "'USE_OPENCL'",
        "''",
        "'on'",
        "'USE_OPENCL'",
        "'ON'",
        "'opencl'",
        "'dict'",
        "'customize'",
        "'path_include'",
        "'path_lib'",
        "'-I../include'",
        "'-L'",
        "' -lOpenCL'",
        "'USE_EMBEDDED_KERNELS'",
        "''",
        "'on'",
        "'-DEMBEDDED_KERNELS'",
        "'USE_BARE_METAL'",
        "''",
        "'on'",
        "'yes'",
        "'USE_BARE_METAL'",
        "'ON'",
        "'x86'",
        "'return'",
        "'error'",
        "'Cannot compile NEON for x86'",
        "'compiler'",
        "'dict'",
        "'env'",
        "'CK_CXX'",
        "'CK_ENV_LIB_STDCPP_INCLUDE'",
        "''",
        "''",
        "'-I'",
        "'CK_ENV_LIB_STDCPP_INCLUDE'",
        "'CK_ENV_LIB_STDCPP_INCLUDE_EXTRA'",
        "''",
        "''",
        "'-I'",
        "'CK_ENV_LIB_STDCPP_INCLUDE_EXTRA'",
        "'clang++'",
        "'-Wno-format-nonliteral'",
        "'-Wno-deprecated-increment-bool'",
        "'-Wno-vla-extension'",
        "'-Wno-mismatched-tags'",
        "'g++'",
        "'-Wlogical-op'",
        "'-Wnoexcept'",
        "'-Wstrict-null-sentinel'",
        "'USE_CPPTHREADS'",
        "''",
        "'on'",
        "'-DARM_COMPUTE_CPP_SCHEDULER=1'",
        "'USE_OPENMP'",
        "''",
        "'on'",
        "'clang++'",
        "'return'",
        "'error'",
        "'Clang does not support OpenMP. Use --env.USE_CPPTHREADS=ON'",
        "'-DARM_COMPUTE_OPENMP_SCHEDULER=1'",
        "'-fopenmp'",
        "'-fopenmp'",
        "'-fopenmp'",
        "'v7a'",
        "'-march=armv7-a'",
        "'-mthumb'",
        "'-mfpu=neon'",
        "'-mfloat-abi=hard'",
        "'android'",
        "'-mfloat-abi=softfp'",
        "'arm64'",
        "'-march=armv8-a'",
        "'USE_ARM64_V82A'",
        "''",
        "'on'",
        "'-march=armv8.2-a+fp16+simd'",
        "'-DARM_COMPUTE_ENABLE_FP16'",
        "'x86'",
        "'-m32'",
        "'x86_64'",
        "'-m64'",
        "'android'",
        "'-DANDROID'",
        "'CK_ENV_LIB_STDCPP_STATIC'",
        "''",
        "''",
        "'CK_ENV_LIB_STDCPP_STATIC'",
        "'CK_ENV_LIB_STDCPP_STATIC'",
        "'USE_BARE_METAL'",
        "''",
        "'on'",
        "'-fPIC'",
        "'-DNO_MULTI_THREADING'",
        "'-static'",
        "'-static'",
        "'-lpthread'",
        "'-O3'",
        "'-ftree-vectorize'",
        "'CXXFLAGS'",
        "' '",
        "'LFLAGS'",
        "' '",
        "'LCORE_FLAGS'",
        "' '",
        "'return'",
        "'install_env'",
        "'\\\\'",
        "'/'",
        "'out'",
        "''",
        "'ck_kernel'",
        "'cfg'",
        "'host_os_dict'",
        "'target_os_dict'",
        "'windows_base'",
        "''",
        "'env_set'",
        "''",
        "'env_quotes_if_space'",
        "''",
        "'script_ext'",
        "''",
        "'ck_name'",
        "''",
        "'ck_name2'",
        "''",
        "'ck_name2'",
        "''",
        "'new_env'",
        "'deps'",
        "'install_path'",
        "''",
        "''",
        "'yes'",
        "'android'",
        "'lib'",
        "'compiler'",
        "'dict'",
        "'env'",
        "'CK_OBJ_EXT'",
        "'CXXFLAGS'",
        "''",
        "'LFLAGS'",
        "''",
        "'LCORE_FLAGS'",
        "''",
        "'USE_BARE_METAL'",
        "''",
        "'USE_NEON'",
        "''",
        "'USE_OPENCL'",
        "''",
        "'USE_EMBEDDED_KERNELS'",
        "''",
        "'path_original_package'",
        "''",
        "'install_path'",
        "''",
        "'customize'",
        "'extra_dir'",
        "''",
        "''",
        "'customize'",
        "'git_src_dir'",
        "''",
        "''",
        "'return'",
        "'error'",
        "'Something is wrong - build directory is not there ('",
        "')'",
        "'src/core/*.cpp'",
        "'src/core/CPP/*.cpp'",
        "'src/runtime/*.cpp'",
        "'src/core/CPP/kernels/*.cpp'",
        "'src/runtime/CPP/SingleThreadScheduler.cpp'",
        "'on'",
        "'USE_CPPTHREADS'",
        "''",
        "'on'",
        "'USE_OPENMP'",
        "''",
        "'on'",
        "'return'",
        "'error'",
        "'OpenMP and C++11 threads not supported in bare_metal. use --env.USE_CPPTHREADS=OFF --env.USE_OPENMP=OFF'",
        "'USE_CPPTHREADS'",
        "''",
        "'on'",
        "'src/runtime/CPP/CPPScheduler.cpp'",
        "'USE_OPENMP'",
        "''",
        "'on'",
        "'src/runtime/OMP/OMPScheduler.cpp'",
        "'on'",
        "'src/core/CL/*.cpp'",
        "'src/core/CL/kernels/*.cpp'",
        "'src/runtime/CL/*.cpp'",
        "'src/runtime/CL/functions/*.cpp'",
        "'on'",
        "'src/core/CL/cl_kernels/*.cl'",
        "'src/core/CL/cl_kernels/*.h'",
        "\"embed\"",
        "'on'",
        "'src/core/NEON/*.cpp'",
        "'src/core/NEON/kernels/*.cpp'",
        "'src/runtime/NEON/*.cpp'",
        "'src/runtime/NEON/functions/*.cpp'",
        "'cmd'",
        "'git'",
        "'rev-parse'",
        "'HEAD'",
        "'return'",
        "'return_code'",
        "'stdout'",
        "'arm_compute_version.embed'",
        "\"\\\"arm_compute_version=%s Build options: %s Git hash=%s\\\"\"",
        "''",
        "''",
        "'text_file'",
        "'string'",
        "'return'",
        "''",
        "''",
        "' ../'",
        "' ../'",
        "'batch_prefix'",
        "''",
        "'\\n'",
        "'compiler'",
        "'bat'",
        "''",
        "'\\n'",
        "' INSTALL_DIR='",
        "'\\n\\n'",
        "' BUILD_DIR='",
        "'\\n\\n'",
        "' CK_CXXFLAGS='",
        "'\\n'",
        "' CK_LFLAGS='",
        "'\\n'",
        "' CK_SRC_FILES='",
        "'\\n'",
        "' CK_TARGET_LIB='",
        "'arm_compute_core\\n'",
        "' CK_BARE_METAL='",
        "'\\n'",
        "' ORIGINAL_PACKAGE_DIR='",
        "'\\n\\n'",
        "' CK_HOST_CPU_NUMBER_OF_PROCESSORS='",
        "'CK_HOST_CPU_NUMBER_OF_PROCESSORS'",
        "'\\n\\n'",
        "'%*'",
        "'win'",
        "'$@'",
        "'env_call'",
        "''",
        "' '",
        "'build'",
        "' '",
        "'build_core'",
        "'text_file'",
        "'string'",
        "'return'",
        "'set_executable'",
        "''",
        "''",
        "' '",
        "''",
        "' ../'",
        "' ../'",
        "'batch_prefix'",
        "''",
        "'\\n'",
        "'compiler'",
        "'bat'",
        "''",
        "'\\n'",
        "' INSTALL_DIR='",
        "'\\n\\n'",
        "' BUILD_DIR='",
        "'\\n\\n'",
        "' CK_CXXFLAGS='",
        "'\\n'",
        "' CK_LFLAGS='",
        "'\\n'",
        "' CK_SRC_FILES='",
        "'\\n'",
        "' CK_TARGET_LIB='",
        "'arm_compute\\n'",
        "' CK_BARE_METAL='",
        "'\\n'",
        "' ORIGINAL_PACKAGE_DIR='",
        "'\\n\\n'",
        "' CK_HOST_CPU_NUMBER_OF_PROCESSORS='",
        "'CK_HOST_CPU_NUMBER_OF_PROCESSORS'",
        "'\\n\\n'",
        "'env_call'",
        "''",
        "' '",
        "'build'",
        "' '",
        "'build'",
        "'text_file'",
        "'string'",
        "'return'",
        "'set_executable'",
        "''",
        "''",
        "' '",
        "'return'"
    ],
    "variables": [
        "FileEntry",
        "pattern",
        "files",
        "name",
        "s_absp",
        "mycontents",
        "contents",
        "embed_target_name",
        "entry",
        "files_dict",
        "final_files",
        "done",
        "tmp_file",
        "file_count",
        "updated_file",
        "found",
        "include_file",
        "data",
        "done",
        "tmp_file",
        "entry",
        "contents",
        "o",
        "ck",
        "hos",
        "tos",
        "hosd",
        "tosd",
        "hbits",
        "tbits",
        "hname",
        "hname2",
        "tname2",
        "macos",
        "hft",
        "habi",
        "p",
        "env",
        "pi",
        "cus",
        "ie",
        "nie",
        "deps",
        "flags",
        "lcore_flags",
        "lflags",
        "cpu_features",
        "tneon",
        "thardfp",
        "tabi",
        "tabi",
        "tabi",
        "tabi",
        "neon",
        "neon",
        "nie",
        "opencl",
        "opencl",
        "nie",
        "openclenv",
        "ipath",
        "lpath",
        "hardfp",
        "hardfp",
        "nie",
        "compiler_env",
        "cxx",
        "nie",
        "nie",
        "nie",
        "o",
        "ck",
        "cfg",
        "hosd",
        "tosd",
        "winh",
        "eset",
        "eifs",
        "sext",
        "hname",
        "hname2",
        "tname2",
        "env",
        "deps",
        "pi",
        "libprefix",
        "libprefix",
        "compiler_env",
        "obj_ext",
        "flags",
        "lflags",
        "lcore_flags",
        "bare_metal",
        "use_neon",
        "use_opencl",
        "use_embed_kernel",
        "pp",
        "pi",
        "pi1",
        "pi1",
        "build_dir",
        "build_dir",
        "xcore_files",
        "xfiles",
        "embed_files",
        "files_to_delete",
        "cl_files",
        "source_list",
        "source_name",
        "generate_embed",
        "r",
        "git_hash",
        "version_filename",
        "build_info",
        "r",
        "core_files",
        "obj_core_files",
        "f",
        "fo",
        "sb",
        "rest_params_var",
        "fn",
        "rx",
        "se",
        "x",
        "rx",
        "rx",
        "files",
        "f",
        "fo",
        "sb",
        "fn",
        "rx",
        "se",
        "x",
        "rx",
        "rx"
    ],
    "comments": [
        "",
        "Developer: Grigori Fursin, Grigori.Fursin@cTuning.org, http://fursin.net",
        "",
        "",
        "File collection",
        "Include pattern",
        "Get file contents",
        "Create dictionary of tupled list",
        "Check for includes (can only be files in the same folder)",
        "Check if all include are replaced.",
        "Update temp file",
        "Append and prepend string literal identifiers and add expanded file to final list",
        "Write output files",
        "Get variables",
        "win, linux",
        "win, mingw, linux, android",
        "win, mingw, linux, android",
        "yes/no",
        "host platform features",
        "host ABI (only for ARM-based); if you want to get target ABI, use tosd ...",
        "armv7l, etc...",
        "new env",
        "Converting sconscript to CK format",
        "Check various target params from CK",
        "ABI for Android",
        "Means host",
        "Means ARM",
        "Means x86 (indirectly)",
        "ck.debug_out(openclenv)",
        "flags += ['-I'+ipath] ACL uses local CL/cl.h cl2.h",
        "nie['CK_FLAG_PREFIX_INCLUDE'] = ''",
        "lcore_flags += ['']",
        "if env.get('USE_VALIDATION_TEST','').lower()=='on':",
        "print \"VALIDATION\"",
        "if env.get('USE_BENCHMARK_TEST','').lower()=='on':",
        "print \"BENCHMARK\"",
        "env['CK_ENV_LIB_STDCPP_STATIC']=libstdcpppath+sep+'libgnustl_static.a'",
        "env['CK_ENV_LIB_STDCPP_DYNAMIC']=libstdcpppath+sep+'libgnustl_shared.so'",
        "env['CK_ENV_LIB_STDCPP_INCLUDE_EXTRA']=libstdcpppath+sep+'include'",
        "Done via CK",
        "lflags+=['-static-libstdc++']",
        "lcore_flags+=['-static-libstdc++']",
        "",
        "customize installation after download",
        "Get variables",
        "win, linux",
        "win, mingw, linux, android",
        "win, mingw, linux, android",
        "CLHarrisCorners uses the Scheduler to run CPP kernels",
        "generate_embed = env.Command(embed_files, source_list, action=resolve_includes)",
        "Default(generate_embed)",
        "Generate string with build options library version to embed in the library:",
        "\"%s/arm_compute_version.embed\" % os.path.dirname(glob.glob(\"src/core/*\")[0].rrstr())",
        "BUILDING CORE LIB **************************************************************",
        "Clean up files and prepare obj names",
        "fix windows names",
        "Compiler env",
        "Prepare build script",
        "Check if need to set executable flags",
        "Run script",
        "BUILDING CORE + RUNTIME LIB **************************************************************",
        "Clean up files and prepare obj names",
        "fix windows names",
        "Compiler env",
        "Prepare build script",
        "Check if need to set executable flags",
        "Run script"
    ],
    "docstrings": [
        "\"\"\"\n    Input:  {\n              cfg              - meta of the soft entry\n              self_cfg         - meta of module soft\n              ck_kernel        - import CK kernel module (to reuse functions)\n\n              host_os_uoa      - host OS UOA\n              host_os_uid      - host OS UID\n              host_os_dict     - host OS meta\n\n              target_os_uoa    - target OS UOA\n              target_os_uid    - target OS UID\n              target_os_dict   - target OS meta\n\n              target_device_id - target device ID (if via ADB)\n\n              tags             - list of tags used to search this entry\n\n              env              - updated environment vars from meta\n              customize        - updated customize vars from meta\n\n              deps             - resolved dependencies for this soft\n\n              interactive      - if 'yes', can ask questions, otherwise quiet\n\n              path             - path to entry (with scripts)\n              install_path     - installation path\n            }\n\n    Output: {\n              return        - return code =  0, if successful\n                                          >  0, if error\n              (error)       - error text if return > 0\n\n              (install_env) - prepare environment to be used before the install script\n            }\n\n    \"\"\"",
        "\"\"\"\n    Input:  {\n              The same as in setup(i)\n\n              new_env - last env (can be directly updated)\n            }\n\n    Output: {\n              return        - return code =  0, if successful\n                                          >  0, if error\n              (error)       - error text if return > 0\n            }\n\n    \"\"\""
    ],
    "functions": [
        "file_get_contents",
        "resolve_includes",
        "setup",
        "_slash",
        "post_setup"
    ],
    "classes": []
}