{
    "identifiers": [
        "paths",
        "require",
        "Mocha",
        "istanbul",
        "require",
        "require",
        "require",
        "tty",
        "tty",
        "Mocha",
        "mochaOpts",
        "testOpts",
        "mocha",
        "Mocha",
        "mochaOpts",
        "testOptions",
        "testOpts",
        "dir",
        "fs",
        "dir",
        "fs",
        "dir",
        "testsRoot",
        "paths",
        "testsRoot",
        "testOptions",
        "fs",
        "coverConfigPath",
        "fs",
        "coverConfigPath",
        "coverConfig",
        "configContent",
        "coverConfig",
        "testsRoot",
        "clb",
        "require",
        "_readCoverOptions",
        "testsRoot",
        "coverOptions",
        "coverOptions",
        "CoverageRunner",
        "coverOptions",
        "testsRoot",
        "clb",
        "coverageRunner",
        "glob",
        "testsRoot",
        "error",
        "files",
        "error",
        "clb",
        "error",
        "files",
        "f",
        "mocha",
        "paths",
        "testsRoot",
        "f",
        "mocha",
        "test",
        "err",
        "failureCount",
        "clb",
        "failureCount",
        "error",
        "clb",
        "error",
        "options",
        "testsRoot",
        "endRunCallback",
        "options",
        "endRunCallback",
        "istanbul",
        "paths",
        "glob",
        "sourceRoot",
        "require",
        "srcFiles",
        "file",
        "paths",
        "sourceRoot",
        "file",
        "fileMap",
        "fullPath",
        "decache",
        "fullPath",
        "file",
        "fileMap",
        "file",
        "fileMap",
        "istanbul",
        "hookOpts",
        "process",
        "code",
        "istanbul",
        "cov",
        "file",
        "cov",
        "file",
        "fs",
        "file",
        "file",
        "key",
        "key",
        "cov",
        "file",
        "paths",
        "includePid",
        "process",
        "paths",
        "reportingDir",
        "pidExt",
        "_mkDirIfExists",
        "reportingDir",
        "fs",
        "coverageFile",
        "cov",
        "istanbul",
        "remapIstanbul",
        "cov",
        "warning",
        "warning",
        "istanbul",
        "reportingDir",
        "reporter",
        "reportTypes",
        "reporter",
        "remappedCollector",
        "reportingDir"
    ],
    "literals": [
        "'use strict'",
        "'path'",
        "'fs'",
        "'mocha'",
        "'istanbul'",
        "'glob'",
        "'remap-istanbul'",
        "'tty'",
        "'tdd'",
        "string",
        "string",
        "'source-map-support'",
        "'**/**.test.js'",
        "'fail'",
        "'end'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'$$cov_'",
        "'$$'",
        "string",
        "'Error - relativeSourcePath must be defined for code coverage to work'",
        "'**/**.js'",
        "'decache'",
        "'.js'",
        "'exit'",
        "'undefined'",
        "'No coverage information was collected, exit without writing coverage information'",
        "'utf-8'",
        "'-'",
        "''",
        "'coverage'",
        "'.json'",
        "'utf8'",
        "'lcov'",
        "reports written to ${reportingDir}"
    ],
    "variables": [
        "fs",
        "glob",
        "remapIstanbul",
        "tty",
        "mocha",
        "testOptions",
        "coverConfigPath",
        "coverConfig",
        "configContent",
        "coverOptions",
        "coverageRunner",
        "failureCount",
        "sourceRoot",
        "srcFiles",
        "decache",
        "fileMap",
        "fullPath",
        "hookOpts",
        "cov",
        "reportingDir",
        "includePid",
        "pidExt",
        "coverageFile",
        "remappedCollector",
        "reporter",
        "reportTypes"
    ],
    "comments": [
        "---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------",
        "Linux: prevent a weird NPE when mocha on Linux requires the window size from the TTY",
        "Since we are not running in a tty environment, we just implementt he method statically",
        "Enable source map support",
        "Read configuration for the coverage file",
        "Setup coverage pre-test, including post-test hook to report",
        "Glob test files",
        "Fill into Mocha",
        "Run the tests",
        "Set up Code Coverage, hooking require so that instrumented code is returned",
        "Glob source files",
        "Create a match function - taken from the run-with-cover.js in istanbul.",
        "On Windows, extension is loaded pre-test hooks and this mean we lose",
        "our chance to hook the Require call. In order to instrument the code",
        "we have to decache the JS file so on next load it gets instrumented.",
        "This doesn't impact tests, but is a concern if we had some integration",
        "tests that relied on VSCode accessing our module since there could be",
        "some shared global state that we lose.",
        "Hook up to the Require function so that when this is called, if any of our source files",
        "are required, the instrumented version is pulled in instead. These instrumented versions",
        "write to a global coverage variable with hit counts whenever they are accessed",
        "initialize the global variable to stop mocha from complaining about leaks",
        "Hook the process exit event to handle reporting",
        "Only report coverage if the process is exiting successfully",
        "TODO consider putting this under a conditional flag",
        "Files that are not touched by code ran by the test runner is manually instrumented, to",
        "illustrate the missing coverage.",
        "When instrumenting the code, istanbul will give each FunctionDeclaration a value of 1 in coverState.s,",
        "presumably to compensate for function hoisting. We need to reset this, as the function was not hoisted,",
        "as it was never loaded.",
        "TODO Allow config of reporting directory with",
        "yes, do this again since some test runners could clean the dir initially created",
        "We expect some warnings as any JS file without a typescript mapping will cause this.",
        "By default, we'll skip printing these to the console as it clutters it up"
    ],
    "docstrings": [
        "* Writes a coverage report. Note that as this is called in the process exit callback, all calls must be synchronous.\n     *\n     * @returns {void}\n     *\n     * @memberOf CoverageRunner"
    ],
    "functions": [
        "configure",
        "_mkDirIfExists",
        "_readCoverOptions",
        "run",
        "setupCoverage",
        "reportCoverage"
    ],
    "classes": [
        "CoverageRunner"
    ]
}