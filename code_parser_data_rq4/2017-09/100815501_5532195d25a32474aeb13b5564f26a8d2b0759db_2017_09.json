{
    "identifiers": [
        "head",
        "n",
        "count",
        "curr",
        "head",
        "pre",
        "head",
        "head",
        "curr",
        "count",
        "curr",
        "curr",
        "next",
        "curr",
        "head",
        "count",
        "n",
        "head",
        "head",
        "next",
        "head",
        "curr",
        "count",
        "n",
        "pre",
        "next",
        "curr",
        "next",
        "count",
        "pre",
        "curr",
        "curr",
        "curr",
        "next",
        "head",
        "head",
        "n",
        "fast",
        "head",
        "slow",
        "slow",
        "next",
        "head",
        "count",
        "head",
        "head",
        "fast",
        "count",
        "fast",
        "fast",
        "next",
        "count",
        "n",
        "slow",
        "slow",
        "next",
        "slow",
        "next",
        "head",
        "head",
        "head",
        "next",
        "slow",
        "next",
        "slow",
        "next",
        "next",
        "head"
    ],
    "literals": [],
    "variables": [],
    "comments": [
        "remove the first one",
        "remove the first node"
    ],
    "docstrings": [
        "* Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }",
        "207 / 207 test cases passed.\nStatus: Accepted\nRuntime: 14 ms\n        68.62%",
        "one pass\n    two pointer.\n    make slow, fast two pointer\n    fast is move forward n+1 node\n    when fast reach end, slow is the node should be removed\n     1->2->3->4->5\n     \n     207 / 207 test cases passed.\nStatus: Accepted\nRuntime: 15 ms\n42.03%"
    ],
    "functions": [
        "ListNode",
        "removeNthFromEnd_twopass",
        "ListNode",
        "removeNthFromEnd"
    ],
    "classes": [
        "Solution"
    ]
}