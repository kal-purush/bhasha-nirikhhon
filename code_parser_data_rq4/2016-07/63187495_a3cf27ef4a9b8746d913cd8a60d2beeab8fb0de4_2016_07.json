{
    "identifiers": [
        "sm",
        "s",
        "s",
        "sm",
        "out_edges",
        "sm",
        "advance",
        "s",
        "sm",
        "is_terminal",
        "StateMachine",
        "check",
        "test2",
        "check",
        "test2",
        "check",
        "test2",
        "check",
        "test2",
        "check",
        "test2",
        "check",
        "test2",
        "check",
        "test2",
        "check",
        "test2",
        "check",
        "test2",
        "check",
        "test2",
        "check",
        "test2",
        "sm",
        "length",
        "sofar",
        "length",
        "sm",
        "is_terminal",
        "sofar",
        "sm",
        "state",
        "sym",
        "sm",
        "out_edges",
        "sm",
        "advance",
        "sym",
        "results",
        "sample2",
        "sm",
        "length",
        "sofar",
        "sym",
        "state",
        "results"
    ],
    "literals": [
        "\"s1\"",
        "\"x\"",
        "\"s2\"",
        "\"s2\"",
        "\"x\"",
        "\"s2\"",
        "\"s2\"",
        "\"@\"",
        "\"s3\"",
        "\"s3\"",
        "\"x\"",
        "\"s4\"",
        "\"s4\"",
        "\"x\"",
        "\"s4\"",
        "\"s4\"",
        "\".\"",
        "\"s5\"",
        "\"s5\"",
        "\"x\"",
        "\"s6\"",
        "\"s6\"",
        "\"x\"",
        "\"s6\"",
        "\"s6\"",
        "\".\"",
        "\"s7\"",
        "\"s7\"",
        "\"x\"",
        "\"s6\"",
        "\"s1\"",
        "\"s6\"",
        "\"x@x.x\"",
        "\"x@x.x.x\"",
        "\"x@xx.x\"",
        "\"xx@xx.xx.xx\"",
        "\"@x.x\"",
        "\"x@.x\"",
        "\"x@x.\"",
        "\"x@x\"",
        "\"x.x\"",
        "\"x@\"",
        "\"x@x..x\""
    ],
    "variables": [
        "state",
        "results",
        "results",
        "sm",
        "state"
    ],
    "comments": [
        "Assignment 1-1",
        "Assignment 1-2",
        "(x+@x+\\.x+(\\.x+)*)",
        "Assignment 2:",
        "Each path of length 0 is either accepting or non-accepting;",
        "in the former case we return [sofar] (the path) and in the latter [] (no path)",
        "for each edge: advance, sample, backtrack."
    ],
    "docstrings": [],
    "functions": [
        "check",
        "test2",
        "sample2"
    ],
    "classes": []
}