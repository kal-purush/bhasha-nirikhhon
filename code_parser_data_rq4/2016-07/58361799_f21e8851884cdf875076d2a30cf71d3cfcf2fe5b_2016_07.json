{
    "identifiers": [
        "convert_data",
        "numpy",
        "np",
        "keras",
        "models",
        "Sequential",
        "keras",
        "layers",
        "Dense",
        "SimpleRNN",
        "Dropout",
        "Activation",
        "keras",
        "regularizers",
        "l1",
        "l2",
        "l1l2",
        "activity_l1",
        "activity_l2",
        "activity_l1l2",
        "keras",
        "optimizers",
        "SGD",
        "keras",
        "callbacks",
        "EarlyStopping",
        "LearningRateScheduler",
        "TensorBoard",
        "keras",
        "utils",
        "np_utils",
        "to_categorical",
        "time",
        "convert_data",
        "load_data",
        "pca",
        "D",
        "D",
        "Sequential",
        "l2",
        "activity_l2",
        "model",
        "add",
        "Dense",
        "input_dim",
        "n_features",
        "init",
        "init",
        "activation",
        "activation",
        "W_regularizer",
        "regularization",
        "activity_regularizer",
        "activity_regularization",
        "model",
        "add",
        "Dropout",
        "dropout",
        "model",
        "add",
        "Dense",
        "init",
        "init",
        "activation",
        "activation",
        "W_regularizer",
        "regularization",
        "activity_regularizer",
        "activity_regularization",
        "model",
        "add",
        "Dropout",
        "dropout",
        "model",
        "add",
        "Dense",
        "init",
        "init",
        "activation",
        "activation",
        "W_regularizer",
        "regularization",
        "activity_regularizer",
        "activity_regularization",
        "model",
        "add",
        "Dropout",
        "dropout",
        "model",
        "add",
        "Dense",
        "n_classes",
        "init",
        "init",
        "activation",
        "SGD",
        "lr",
        "decay",
        "momentum",
        "nesterov",
        "model",
        "compile",
        "loss",
        "optimizer",
        "sgd",
        "metrics",
        "to_categorical",
        "y_train",
        "n_classes",
        "time",
        "time",
        "model",
        "fit",
        "X_train",
        "y_train",
        "batch_size",
        "nb_epoch",
        "verbose",
        "callbacks",
        "validation_split",
        "validation_data",
        "shuffle",
        "class_weight",
        "sample_weight",
        "time",
        "time",
        "start_time",
        "format",
        "time",
        "time",
        "main"
    ],
    "literals": [
        "'... building the model'",
        "'relu'",
        "'uniform'",
        "'softmax'",
        "'categorical_crossentropy'",
        "'accuracy'",
        "'... training'",
        "'... training took {}min {}sec'",
        "'__main__'"
    ],
    "variables": [
        "D",
        "X_train",
        "y_train",
        "X_test",
        "y_test",
        "n_features",
        "n_classes",
        "n_samples_train",
        "n_samples_test",
        "model",
        "activation",
        "init",
        "regularization",
        "activity_regularization",
        "dropout",
        "sgd",
        "y_train",
        "start_time",
        "time"
    ],
    "comments": [
        "from keras.utils.visualize_util import plot",
        "Loading the data",
        "Building the model",
        "recurrent_layer_size = 50",
        "hidden_layer_size = 50",
        "l1l2(0.0001)",
        "Input layer",
        "Recurrent layer",
        "model.add(SimpleRNN(hidden_layer_size, init='glorot_uniform',",
        "inner_init='orthogonal', activation='tanh',",
        "W_regularizer=None, U_regularizer=None,",
        "b_regularizer=None, dropout_W=0.0, dropout_U=0.0)",
        ")",
        "Hidden layers",
        "Output layer",
        "Compiling the model",
        "plot(model, to_file='../logs/model.png')",
        "Training",
        "Callbacks",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=5000,",
        "verbose=1, mode='auto')",
        "lr_scheduler = LearningRateScheduler()",
        "Prediction",
        "y_test = to_categorical(y_test, n_classes)",
        "score = model.evaluate(X_test, y_test,",
        "batch_size=1,",
        "verbose=1,",
        "sample_weight=None",
        ")",
        "print()",
        "print('loss: {} - acc: {}'.format(*score))"
    ],
    "docstrings": [
        "\"\"\"\n==========\nKeras test\n==========\n\n\"\"\""
    ],
    "functions": [
        "main"
    ],
    "classes": []
}