{
    "identifiers": [
        "requests",
        "lxml",
        "html",
        "parse",
        "MySQLdb",
        "sys",
        "unicodedata",
        "itertools",
        "MySQLdb",
        "connect",
        "host",
        "user",
        "passwd",
        "db",
        "charset",
        "use_unicode",
        "cnxn",
        "cursor",
        "cnxn",
        "autocommit",
        "cursor",
        "execute",
        "query001",
        "cursor",
        "execute",
        "query002",
        "requests",
        "get",
        "url",
        "headers",
        "headers",
        "open",
        "file_us_news",
        "write",
        "url2",
        "text",
        "encode",
        "parse",
        "getroot",
        "doc",
        "make_links_absolute",
        "resolve_base_href",
        "check",
        "c",
        "c",
        "data",
        "doc",
        "cssselect",
        "item",
        "data",
        "cssselect",
        "count",
        "item",
        "text_content",
        "strip",
        "startswith",
        "item",
        "text_content",
        "strip",
        "split",
        "join",
        "col_arr",
        "sub_college_details",
        "append",
        "data_check",
        "strip",
        "punctuation",
        "letters",
        "sub_college_details",
        "append",
        "item",
        "text",
        "strip",
        "punctuation",
        "count",
        "link",
        "item",
        "cssselect",
        "link",
        "text_content",
        "replace",
        "link",
        "get",
        "requests",
        "get",
        "url",
        "inside_college_link",
        "headers",
        "headers",
        "open",
        "file_us_news1",
        "write",
        "url22",
        "text",
        "encode",
        "parse",
        "getroot",
        "doc3",
        "make_links_absolute",
        "resolve_base_href",
        "item1",
        "doc3",
        "xpath",
        "inner",
        "item1",
        "xpath",
        "ck",
        "male_female_ratio",
        "inner",
        "strip",
        "punctuation",
        "ck",
        "male_female_ratio",
        "inner",
        "strip",
        "punctuation",
        "ck",
        "save2",
        "append",
        "male_female_ratio",
        "item0",
        "item1",
        "item2",
        "item3",
        "itertools",
        "izip_longest",
        "doc3",
        "xpath",
        "doc3",
        "xpath",
        "doc3",
        "xpath",
        "doc3",
        "xpath",
        "val",
        "val1",
        "val2",
        "val3",
        "itertools",
        "izip_longest",
        "item0",
        "cssselect",
        "item1",
        "cssselect",
        "item2",
        "cssselect",
        "item3",
        "cssselect",
        "val",
        "inner",
        "val",
        "val_saved",
        "append",
        "inner",
        "text_content",
        "strip",
        "punctuation",
        "val_saved",
        "save",
        "append",
        "val_saved",
        "val1",
        "inner",
        "val1",
        "inner",
        "inner",
        "getparent",
        "get",
        "inner",
        "iter",
        "tag",
        "inner_item",
        "inner",
        "cssselect",
        "more_inner",
        "inner_item",
        "cssselect",
        "val_inner",
        "more_inner",
        "text_content",
        "strip",
        "punctuation",
        "val_inner",
        "save1",
        "append",
        "val_inner",
        "val_saved",
        "append",
        "inner",
        "text_content",
        "strip",
        "punctuation",
        "val_saved",
        "val_saved",
        "save1",
        "append",
        "val_saved",
        "strip",
        "punctuation",
        "ee",
        "ee",
        "val2",
        "inner",
        "val2",
        "val_saved",
        "append",
        "inner",
        "text_content",
        "strip",
        "punctuation",
        "val_saved",
        "save2",
        "append",
        "val_saved",
        "strip",
        "punctuation",
        "check_3",
        "check_3",
        "val3",
        "text_content",
        "strip",
        "punctuation",
        "letters",
        "split",
        "save3",
        "append",
        "val3_arr",
        "college_name",
        "append",
        "unicodedata",
        "normalize",
        "col_name",
        "encode",
        "count",
        "pre_college_details",
        "extend",
        "save",
        "pre_college_details",
        "extend",
        "save1",
        "pre_college_details",
        "extend",
        "save2",
        "pre_college_details",
        "extend",
        "save3",
        "college_details",
        "append",
        "sub_college_details",
        "other_college_details",
        "append",
        "pre_college_details",
        "item",
        "doc",
        "xpath",
        "link",
        "item",
        "cssselect",
        "link",
        "text_content",
        "unicodedata",
        "normalize",
        "compare_data",
        "encode",
        "unicodedata",
        "normalize",
        "encode",
        "link",
        "get",
        "requests",
        "get",
        "url",
        "link1",
        "headers",
        "headers",
        "open",
        "file_us_news",
        "write",
        "url2",
        "text",
        "encode",
        "parse",
        "getroot",
        "doc",
        "make_links_absolute",
        "resolve_base_href",
        "flag",
        "exx",
        "exx",
        "val",
        "val1",
        "college_details",
        "other_college_details",
        "cursor",
        "execute",
        "query",
        "college_name",
        "k",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val1",
        "val1",
        "val1",
        "val1",
        "val1",
        "val1",
        "val1",
        "val1",
        "val1",
        "val1",
        "k",
        "ex",
        "ex",
        "val",
        "val1",
        "e",
        "e",
        "sys",
        "exit"
    ],
    "literals": [
        "\"localhost\"",
        "\"root\"",
        "\"harshit@123\"",
        "\"college_info\"",
        "\"utf8\"",
        "\"set names 'utf8mb4'\"",
        "\"SET CHARACTER SET utf8mb4\"",
        "'User-Agent'",
        "'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0'",
        "'http://colleges.usnews.rankingsandreviews.com/best-colleges/rankings/national-universities/data'",
        "'college_data_us_news.html'",
        "'w'",
        "'utf-8'",
        "'ignore'",
        "'college_data_us_news.html'",
        "'http://colleges.usnews.rankingsandreviews.com'",
        "\"\\n\"",
        "\"started\"",
        "'table tbody tr'",
        "'td'",
        "' \\n\\r'",
        "'in-state:'",
        "' \\n\\r'",
        "','",
        "','",
        "' \\n\\r'",
        "' \\n\\r'",
        "'a'",
        "u''",
        "''",
        "'—​'",
        "'-'",
        "'href'",
        "\"\"",
        "'college_data_us_news.html'",
        "'w'",
        "'utf-8'",
        "'ignore'",
        "'college_data_us_news.html'",
        "'http://colleges.usnews.rankingsandreviews.com'",
        "\"//div [@class = 't-slack']/div\"",
        "\"//span/span [@class = 't-small t-subdued']/preceding-sibling::span/text()\"",
        "' \\n\\r'",
        "\"-\"",
        "' \\n\\r'",
        "\"//div [@id='directoryPageSection-general_information']\"",
        "\"//div [@id='directoryPageSection-Academic_life']\"",
        "\"//div [@id='directoryPageSection-Student_life']\"",
        "\"//div [@id='directoryPageSection-Paying_for_school']\"",
        "'table tbody tr'",
        "'table tbody tr'",
        "'table tbody tr'",
        "'p'",
        "' \\n\\r'",
        "'School type'",
        "'Religious affiliation'",
        "'Setting'",
        "'2014 Endowment'",
        "\"\"",
        "'class'",
        "'extra-row top_majors-extra-row'",
        "'table'",
        "'table tbody tr'",
        "'td'",
        "' \\n\\r'",
        "\"--\"",
        "\"\"",
        "' \\n\\r'",
        "'Student-faculty ratio'",
        "'4-year graduation rate'",
        "' \\n\\r'",
        "\"Error in save1\"",
        "' \\n\\r'",
        "'Collegiate athletic association'",
        "' \\n\\r'",
        "' \\n\\r'",
        "' '",
        "'NFKD'",
        "'utf8'",
        "'ignore'",
        "\"//p [@id='pagination']\"",
        "'a'",
        "u''",
        "''",
        "'NFKD'",
        "'utf8'",
        "'ignore'",
        "'NFKD'",
        "u'Next »'",
        "'utf8'",
        "'ignore'",
        "'href'",
        "'college_data_us_news.html'",
        "'w'",
        "'utf-8'",
        "'ignore'",
        "'college_data_us_news.html'",
        "'http://colleges.usnews.rankingsandreviews.com'",
        "\"Error in adding values : \"",
        "\"Error in adding details : \"",
        "\"value here si \"",
        "\"Error in reading website \""
    ],
    "variables": [
        "cnxn",
        "cursor",
        "query001",
        "query002",
        "headers",
        "url2",
        "file_us_news",
        "doc",
        "college_details",
        "other_college_details",
        "college_name",
        "check",
        "c",
        "count",
        "sub_college_details",
        "save",
        "save1",
        "save2",
        "save3",
        "col_arr",
        "data_check",
        "col_name",
        "inside_college_link",
        "check_3",
        "male_female_ratio",
        "url22",
        "file_us_news1",
        "doc3",
        "ck",
        "val_saved",
        "val_inner",
        "val_saved",
        "val_saved",
        "val3_arr",
        "pre_college_details",
        "flag",
        "compare_data",
        "flag",
        "link1",
        "url2",
        "file_us_news",
        "doc",
        "check",
        "k",
        "query"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "from __future__ import unicode_literals",
        "from bs4 import UnicodeDammit",
        "making database accept utf8mb4 as the data format in their columns",
        "query007 = \"Delimiter $$ \" \\",
        "\"drop procedure if exists add_unique_columns $$\" \\",
        "\"create procedure add_unique_columns(in col_name varchar(50), in tab_name varchar(50), out status varchar(10))\" \\",
        "\"begin\" \\",
        "\"if not exists ((select id from information_schema.columns where table_schema='college_info' and table_name=tab_name and column_name = col_name)) then\" \\",
        "\"alter table tab_name add col_name varchar(400) null;\" \\",
        "\"set status = 'True';\" \\",
        "\"else\" \\",
        "\"set status = 'False';\" \\",
        "\"end if;\" \\",
        "\"end $$\" \\",
        "\"delimiter ;\"",
        "",
        "cursor.execute(query007)",
        "url = requests.get(url='https://colleges.niche.com/rankings/top-public-universities', headers=headers)",
        "url1 = requests.get(url='https://colleges.niche.com/rankings/top-private-universities', headers=headers)",
        "file_pub = open('public_univ_niche.html', 'w')",
        "file_pvt = open('private_univ_niche.html', 'w')",
        "file_pub.write(url.text.encode('ascii', 'ignore'))",
        "file_pvt.write(url1.text.encode('ascii', 'ignore'))",
        "doc = parse('public_univ_niche.html').getroot()",
        "doc.make_links_absolute('https://colleges.niche.com', resolve_base_href=True)",
        "",
        "doc7 = parse('private_univ_niche.html').getroot()",
        "doc7.make_links_absolute('https://colleges.niche.com', resolve_base_href=True)",
        "",
        "college_link = []",
        "college_name = []",
        "",
        "for data in doc.cssselect('div.name a'):",
        "college_link.append(data.get('href'))",
        "college_name.append(data.text_content())",
        "",
        "for data7 in doc7.cssselect('div.name a'):",
        "college_link.append(data7.get('href'))",
        "college_name.append(data7.text_content())",
        "",
        "best_about_college = []",
        "worst_about_college = []",
        "header = []",
        "data_about_header = []",
        "",
        "# check =0",
        "for i, val in enumerate(college_link):",
        "",
        "# if check < 3:",
        "file_college = open('public_univ_niche_colleges_data.html', 'w')",
        "url_col = requests.get(url=val, headers=headers)",
        "file_college.write(url_col.text.encode('utf-8', 'ignore'))",
        "",
        "doc1 = parse('public_univ_niche_colleges_data.html').getroot()",
        "doc1.make_links_absolute('https://colleges.niche.com', resolve_base_href=True)",
        "",
        "",
        "for link in doc1.cssselect('li.noChildren a'):",
        "",
        "if link.text_content() == 'The Best & Worst':",
        "file_ranking = open('public_univ_niche_details.html', 'w')",
        "url_det = requests.get(url=link.get('href'), headers=headers)",
        "file_ranking.write(url_det.text.encode('utf-8', 'ignore'))",
        "",
        "doc2 = parse('public_univ_niche_details.html').getroot()",
        "doc2.make_links_absolute('https://colleges.niche.com', resolve_base_href=True)",
        "",
        "sub_best_about_college = []",
        "sub_worst_about_college = []",
        "",
        "count = 0",
        "for data in doc2.cssselect('div.bestWorstList'):",
        "if count == 0:",
        "for info in data.cssselect('div.text'):",
        "# text = unicodedata.normalize('NFKD', unicode(info.text_content())).encode('utf8', 'ignore')",
        "sub_best_about_college.append(info.text_content())",
        "elif count ==1:",
        "for info in data.cssselect('div.text'):",
        "# text = unicodedata.normalize('NFKD', unicode(info.text_content())).encode('utf8', 'ignore')",
        "sub_worst_about_college.append(info.text_content())",
        "else:",
        "break",
        "count +=1",
        "",
        "sub_header = []",
        "sub_data_about_header = []",
        "",
        "best_about_college.append(sub_best_about_college)",
        "worst_about_college.append(sub_worst_about_college)",
        "# print best_about_college, \" : \", worst_about_college",
        "",
        "for data in doc2.cssselect('div.ss'):",
        "for item in data.cssselect('div'):",
        "if item.get('class') == \"fact fullwidth\":",
        "# print \"inside\"",
        "for reduntant in item.cssselect('div.title'):",
        "# val = item.xpath(\"./div [@class='title']\")",
        "# print val",
        "# print reduntant",
        "# text = unicodedata.normalize('NFKD', unicode(reduntant.text_content())).encode('utf8', 'ignore')",
        "# text1 = unicodedata.normalize('NFKD', unicode(reduntant.tail.strip(' \\n'))).encode('utf8', 'ignore')",
        "sub_header.append(reduntant.text_content())",
        "sub_data_about_header.append(reduntant.tail.strip(' \\n\\r'))",
        "",
        "# break",
        "",
        "header.append(sub_header)",
        "data_about_header.append(sub_data_about_header)",
        "# print header, \" : \", data_about_header",
        "",
        "break",
        "",
        "else:",
        "continue",
        "#",
        "# check +=1",
        "#",
        "# else:",
        "#     break",
        "",
        "try:",
        "",
        "for key,data in enumerate(data_about_header):",
        "col_current = []",
        "query007 = \"\"\"select column_name from information_schema.columns where table_schema='college_info' and table_name='college_details_niche_parts'\"\"\"",
        "cursor.execute(query007)",
        "for row in cursor:",
        "col_current.append(row[0])",
        "",
        "# print col_current",
        "",
        "query = \"\"\"insert into college_details_niche(college_name, best_things, worst_things) values(\"\"\"",
        "query00 = \"\"\"insert into college_details_niche_parts(college_name\"\"\"",
        "query1 = \"\"\"alter table college_details_niche_parts add column(\"\"\"",
        "count = 0",
        "# result_query = \"\"",
        "for item in header[key]:",
        "# print item",
        "act_val = item.replace(\"\\'\",\"\").replace(' ','_').replace('-','_').replace('?','').strip()",
        "if act_val not in col_current:",
        "print act_val",
        "if count == 0:",
        "query1 += act_val+\"\"\" varchar(300) NULL\"\"\"",
        "# query00 += str(act_val)",
        "else:",
        "query1 += \"\"\", \"\"\"+act_val+\"\"\" varchar(300) NULL\"\"\"",
        "",
        "# cursor.execute(\"call add_unique_column(\"+str(item.replace(\"\\'\",\"\").replace(' ','_').replace('-','_').strip())   +\",'college_details_niche',@status)\")",
        "# cursor.execute('select @status')",
        "# for val in cursor:",
        "#     if val == 'True':",
        "query00 += \"\"\", \"\"\"+str(act_val)",
        "",
        "count +=1",
        "",
        "else:",
        "query00 += \"\"\", \"\"\"+str(act_val)",
        "",
        "",
        "# break",
        "",
        "query00 += \"\"\") values(\"\"\"",
        "query1 += \"\"\")\"\"\"",
        "if count > 0:",
        "# print query1+\"\\n\\n\"",
        "cursor.execute(query1)",
        "print \"\\n\\n\"",
        "# print \"success\"",
        "# best_things = \"\"",
        "# worst_things = \"\"",
        "#",
        "# for item,item1 in zip(best_about_college[key],worst_about_college[key]):",
        "best_things = '--'.join(best_about_college[key])",
        "worst_things = '--'.join(worst_about_college[key])",
        "",
        "query += \"'\"+str(college_name[key].replace(',','').strip().encode('ascii','ignore'))+\"', '\"+str(best_things.replace(',','').replace('(','').replace(')','').replace(\"\\'\",\"\").strip().encode('ascii','ignore'))+\"', '\"+str(worst_things.replace(',','').replace('(','').replace(')','').replace(\"\\'\",\"\").strip().encode('ascii','ignore'))+\"')\"",
        "# print query",
        "# print data",
        "# test_query = \"'mark','mark','mark'\"",
        "query00 += \"'\"+str(college_name[key].replace(',','').strip().encode('ascii','ignore'))+\"'\"",
        "for item in data:",
        "# print item",
        "# query += \"\"\",%s\"\"\"",
        "# test_query += \",'MArk'\"",
        "",
        "query00 += \", '\"+str(item.replace(',','').replace('(','').replace(')','').replace(\"\\'\",\"\").strip().encode('ascii','ignore'))+\"'\"",
        "# print query+\"\\n\\n\"",
        "# print test_query",
        "query00 += \"\"\")\"\"\"",
        "# print result_query",
        "# print query+\"\\n\\n\"",
        "# check_len = result_query.split(',')",
        "# print len(check_len)",
        "cursor.execute(query)",
        "cursor.execute(query00)",
        "",
        "except Exception,ex:",
        "print \"Error in adding new columns to the table \", ex",
        "sys.exit(0)",
        "college_link = []",
        "print \"inside\"",
        "print \"new td\"",
        "print \"inside other\"",
        "check_val =  item.text_content().strip('\\n ').startswith('in-state:')",
        "print check_val",
        "print data_check.strip(' '+string.punctuation+string.letters)",
        "continue",
        "print \"inside 2\"",
        "print \"inside this\"",
        "print item1.xpath(\"//span [@class = 't-small t-subdued']/text()\")",
        "print item1.xpath(\"//span [@class = 't-small t-subdued']/preceding-sibling::span/text()\")",
        "print item1.xpath(\"//span/span [@class = 't-small t-subdued']/preceding-sibling::span/text()\")",
        "print val11",
        "print int(inner.strip(' \\n\\r'+string.punctuation).replace(',',''))",
        "print inner",
        "if inner.strip(' \\n\\r').endswith('%'):",
        "print inner",
        "if int(inner.strip(' \\n\\r'+string.punctuation).replace(',','')) < 100 :",
        "else:",
        "break",
        "print inner",
        "if inner.strip(' \\n\\r').endswith('%'):",
        "break",
        "cc = 0",
        "if inner.strip(' \\n\\r') == 'male':",
        "# print \"more insode\"",
        "print item1.xpath(\"//span [@class = 't-small t-subdued']/preceding-sibling::span/text()\")",
        "male_female_ratio += inner.xpath(\"/preceding-sibling::span\").strip(' \\n\\r')+\"-\"",
        "elif inner.strip(' \\n\\r') == 'female':",
        "for sib in inner.itersiblings(preceding = True):",
        "male_female_ratio += sib.text_content().strip(' \\n\\r')",
        "print \"m-f\", male_female_ratio",
        "print male_female_ratio",
        "for data,data1,data2,data3 in zip(val.cssselect('td'),val1.cssselect('td'),val2.cssselect('td'),val3.cssselect('td')):",
        "print val, val1, val2, val3",
        "print val.cssselect(\"td.column-first\").text_content().strip(' \\n\\r')",
        "sys.exit(0)",
        "print len(val.xpath(\"//td [@class = 'column-first']/text()\"))",
        "print len(val.xpath(\"//td [@class = 'column-last']/span/text()\"))",
        "for check_val in val.iter(tag='td'):",
        "print inner.text_content().strip(' \\n\\r'+string.punctuation)",
        "break",
        "print inner.next().cssselect('span').text_content().strip(' \\n\\r'+string.punctuation)",
        "data = inner.xpath('td /following::td/text()')",
        "print data",
        "break",
        "print i",
        "print data.xpath(\"//following::td/span/text()\")[i+3]",
        "save.append(main.xpath(\"//following::td/span/text()\")[0].strip(' \\n\\r'+string.punctuation))",
        "print save",
        "sys.exit(0)",
        "print \"check0\"",
        "print val.xpath(\"//td [@class = 'column-last']/span/text()\").strip(' \\n\\r'+string.punctuation)",
        "if val1 is not None and val1.xpath(\"/td [@class = 'column-first']/text()\").strip(' \\n\\r') in ('Student-faculty ratio','4-year graduation rate'):",
        "save1.append(val1.xpath(\"/td [@class = 'column-last']/span/text()\").strip(' \\n\\r'+string.punctuation))",
        "print \"check1\"",
        "print val1.xpath(\"/td [@class = 'column-last']/span/text()\").strip(' \\n\\r'+string.punctuation)",
        "elif val1 is not None and val1.xpath(\"/td [@colspan = '2']/text()\").strip(' \\n\\r') == '':",
        "sub_save1 = \"\"",
        "print \"check1_1\"",
        "for data1 in val1.cssselect(\"td table tbody tr\"):",
        "sub_save1 += data1.xpath(\"/td [@class = 'column-first column-odd']/text()\").strip(' \\n\\r'+string.punctuation)+\", \"",
        "",
        "# if not sub_save1:",
        "save1.append(sub_save1)",
        "print inner",
        "print inner.getparent()",
        "print inner.get('class')",
        "print inner.iter(tag='table')",
        "print inner_item",
        "print save1",
        "for check_val in val.iter(tag='td'):",
        "print inner.text_content().strip(' \\n\\r'+string.punctuation)",
        "break",
        "print inner.next().cssselect('span').text_content().strip(' \\n\\r'+string.punctuation)",
        "print val_saved",
        "print (not not val_saved)",
        "print val_saved[0]",
        "data = inner.xpath('td /following::td/text()')",
        "print data",
        "sys.exit(0)",
        "break",
        "print i",
        "print data.xpath(\"//following::td/span/text()\")[i+3]",
        "save.append(main.xpath(\"//following::td/span/text()\")[0].strip(' \\n\\r'+string.punctuation))",
        "print save1",
        "if val2 is not None and val2.xpath(\"/td [@class = 'column-first']/text()\").strip(' \\n\\r') == 'Collegiate athletic association':",
        "print \"check2\"",
        "save2.append(val2.xpath(\"/td [@class = 'column-last']/span/text()\").strip(' \\n\\r'+string.punctuation))",
        "for check_val in val.iter(tag='td'):",
        "print inner.text_content().strip(' \\n\\r'+string.punctuation)",
        "break",
        "print inner.next().cssselect('span').text_content().strip(' \\n\\r'+string.punctuation)",
        "data = inner.xpath('td /following::td/text()')",
        "print data",
        "break",
        "print i",
        "print data.xpath(\"//following::td/span/text()\")[i+3]",
        "save.append(main.xpath(\"//following::td/span/text()\")[0].strip(' \\n\\r'+string.punctuation))",
        "print save2",
        "pre_college_details.extend(sub_college_details)",
        "print col_name",
        "print save",
        "print save1",
        "print save2",
        "print save3",
        "print \"\\n\\n\"",
        "print \"get in to it\"",
        "print unicodedata.normalize('NFKD', u''+item.text_content()+'').encode('utf8', 'ignore')",
        "print \"jabbahj\"",
        "print link1",
        "print college_name, \" :: \", college_details, \" : \", other_college_details",
        "print college_details",
        "print \"\\n\\n\"",
        "print other_college_details",
        "print \"\\n\\n\"",
        "print college_name",
        "sys.exit(0)",
        "print val",
        "print val",
        "print \"/n/n\"",
        "print val1"
    ],
    "docstrings": [
        "\"\"\"insert into college_details_us_news(college_name,tuition_cost,total_population,acceptance_rate,retention_rate,6_year_graduation_rate,school_type,religious_affiliation,location_setting,endowment,faculty_student_ratio,4_year_graduation_rate,popular_majors,male_female_ratio,athletic_association,financial_aid_pct) values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)\"\"\""
    ],
    "functions": [],
    "classes": []
}