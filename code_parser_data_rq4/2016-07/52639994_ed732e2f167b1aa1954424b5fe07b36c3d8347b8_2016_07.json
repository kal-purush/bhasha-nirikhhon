{
    "identifiers": [
        "com",
        "github",
        "choonchernlim",
        "security",
        "adfs",
        "saml2",
        "com",
        "github",
        "choonchernlim",
        "betterPreconditions",
        "preconditions",
        "PreconditionFactory",
        "expect",
        "com",
        "google",
        "common",
        "Splitter",
        "org",
        "springframework",
        "core",
        "io",
        "DefaultResourceLoader",
        "org",
        "springframework",
        "core",
        "io",
        "Resource",
        "org",
        "springframework",
        "core",
        "io",
        "ResourceLoader",
        "org",
        "springframework",
        "jndi",
        "JndiTemplate",
        "java",
        "io",
        "InputStream",
        "java",
        "security",
        "KeyStore",
        "java",
        "util",
        "Iterator",
        "java",
        "util",
        "resourceLoader",
        "jndiName",
        "jndiTemplate",
        "jndiName",
        "jndiName",
        "jndiName",
        "jndiTemplate",
        "jndiTemplate",
        "jndiTemplate",
        "ite",
        "getJndiValues",
        "getKeystoreBean",
        "ite",
        "next",
        "ite",
        "next",
        "ite",
        "next",
        "ite",
        "next",
        "jndiValue",
        "jndiValue",
        "jndiTemplate",
        "lookup",
        "jndiName",
        "e",
        "format",
        "jndiName",
        "e",
        "jndiValues",
        "Splitter",
        "on",
        "trimResults",
        "splitToList",
        "jndiValue",
        "expect",
        "jndiValues",
        "size",
        "toBeEqual",
        "check",
        "jndiValues",
        "iterator",
        "jksPath",
        "keystoreAlias",
        "keystorePassword",
        "keystorePrivateKeyPassword",
        "keystoreResource",
        "resourceLoader",
        "getResource",
        "jksPath",
        "keystoreInputStream",
        "keystoreInputStream",
        "keystoreResource",
        "getInputStream",
        "e",
        "e",
        "keyStore",
        "keyStore",
        "KeyStore",
        "getInstance",
        "KeyStore",
        "getDefaultType",
        "e",
        "e",
        "keyStore",
        "load",
        "keystoreInputStream",
        "keystorePassword",
        "toCharArray",
        "e",
        "e",
        "keyStore",
        "isKeyEntry",
        "keystoreAlias",
        "e",
        "e",
        "keyStore",
        "getKey",
        "keystoreAlias",
        "keystorePrivateKeyPassword",
        "toCharArray",
        "e",
        "e",
        "withJksPath",
        "jksPath",
        "withKeystoreAlias",
        "keystoreAlias",
        "withKeystorePassword",
        "keystorePassword",
        "withKeystorePrivateKeyPassword",
        "keystorePrivateKeyPassword",
        "withKeystoreResource",
        "keystoreResource",
        "build"
    ],
    "literals": [
        "\"java:comp/env/\"",
        "\"Unable to get value from JNDI: %s\"",
        "\",\"",
        "\"jndiValues size\"",
        "\"Invalid keystore path\"",
        "\"Unable to initialize keystore\"",
        "\"Invalid keystore password\"",
        "\"Provided alias not found\"",
        "\"Invalid keystore alias\"",
        "\"Invalid keystore private key password\""
    ],
    "variables": [
        "jndiName",
        "jndiValue",
        "keystoreInputStream",
        "keyStore"
    ],
    "comments": [],
    "docstrings": [
        "* Helper class that retrieves JNDI value and returns a keystore bean.\n * The JNDI value has the following format: \"jks-path,alias,storepass,keypass\"",
        "* JNDI name",
        "* For mocking out instance during testing.\n     *\n     * @param jndiTemplate Jndi template",
        "* Retrieves keystore info from JNDI.\n     *\n     * @return Keystore bean",
        "* Returns transformed JNDI value from comma separated value to collection.\n     *\n     * @return JNDI values",
        "* Ensures the input values are all valid before returning keystore bean.\n     *\n     * @param jksPath                    JKS path\n     * @param keystoreAlias              Keystore alias\n     * @param keystorePassword           Keystore password\n     * @param keystorePrivateKeyPassword Keystore private key password\n     * @return Keystore bean"
    ],
    "functions": [
        "JndiBackedKeystoreService",
        "setJndiTemplate",
        "KeystoreBean",
        "get",
        "getJndiValues",
        "KeystoreBean",
        "getKeystoreBean"
    ],
    "classes": [
        "JndiBackedKeystoreService"
    ]
}