{
    "identifiers": [
        "pprint",
        "sys",
        "inspect",
        "ImportError",
        "functools",
        "wraps",
        "ImportError",
        "original",
        "f",
        "original",
        "original",
        "__doc__",
        "original",
        "__module__",
        "f",
        "inner",
        "unicode",
        "NameError",
        "NameError",
        "NameError",
        "next",
        "NameError",
        "obj",
        "obj",
        "next",
        "sys",
        "platform",
        "java",
        "java",
        "lang",
        "isidentifier",
        "AttributeError",
        "keyword",
        "re",
        "re",
        "compile",
        "re",
        "I",
        "keyword",
        "kwlist",
        "regex",
        "match",
        "sys",
        "version_info",
        "inPy3k",
        "obj",
        "issubclass",
        "obj",
        "NonCallableMock",
        "obj",
        "isinstance",
        "obj",
        "BaseExceptions",
        "isinstance",
        "obj",
        "ClassTypes",
        "issubclass",
        "obj",
        "BaseExceptions",
        "_slotted",
        "a",
        "property",
        "func",
        "skipfirst",
        "inspect",
        "ImportError",
        "inspect",
        "isclass",
        "func",
        "func",
        "inspect",
        "ismethod",
        "func",
        "inspect",
        "isfunction",
        "func",
        "func",
        "__call__",
        "inspect",
        "getargspec",
        "func",
        "getattr",
        "func",
        "regargs",
        "regargs",
        "_msg",
        "varargs",
        "varargs",
        "_msg",
        "varkwargs",
        "varkwargs",
        "_msg",
        "skipfirst",
        "regargs",
        "inspect",
        "formatargspec",
        "regargs",
        "varargs",
        "varkwargs",
        "defaults",
        "formatvalue",
        "value",
        "signature",
        "func",
        "func",
        "skipfirst",
        "instance",
        "inspect",
        "ImportError",
        "isinstance",
        "func",
        "ClassTypes",
        "instance",
        "func",
        "AttributeError",
        "isinstance",
        "func",
        "FunctionTypes",
        "func",
        "__call__",
        "AttributeError",
        "inspect",
        "getargspec",
        "func",
        "getattr",
        "func",
        "regargs",
        "skipfirst",
        "regargs",
        "inspect",
        "formatargspec",
        "regargs",
        "varargs",
        "varkwargs",
        "defaults",
        "formatvalue",
        "value",
        "signature",
        "func",
        "func",
        "mock",
        "skipfirst",
        "instance",
        "_callable",
        "func",
        "_getsignature2",
        "func",
        "skipfirst",
        "instance",
        "result",
        "result",
        "signature",
        "eval",
        "src",
        "_copy_func_details",
        "func",
        "checksig",
        "mock",
        "_mock_check_sig",
        "checksig",
        "func",
        "funcopy",
        "func",
        "func",
        "__doc__",
        "func",
        "__module__",
        "inPy3k",
        "func",
        "func_defaults",
        "func",
        "__defaults__",
        "func",
        "__kwdefaults__",
        "obj",
        "isinstance",
        "obj",
        "ClassTypes",
        "getattr",
        "obj",
        "obj",
        "obj",
        "obj",
        "isinstance",
        "obj",
        "ClassTypes",
        "getattr",
        "obj",
        "obj",
        "klass",
        "__dict__",
        "get",
        "klass",
        "__bases__",
        "_instance_callable",
        "mock",
        "original",
        "instance",
        "_callable",
        "original",
        "isinstance",
        "original",
        "ClassTypes",
        "_getsignature2",
        "original",
        "skipfirst",
        "instance",
        "result",
        "result",
        "signature",
        "mock",
        "eval",
        "src",
        "context",
        "_copy_func_details",
        "func",
        "checksig",
        "original",
        "_isidentifier",
        "name",
        "checksig",
        "mock",
        "name",
        "exec",
        "src",
        "context",
        "context",
        "name",
        "_setup_func",
        "funcopy",
        "mock",
        "funcopy",
        "func",
        "mock",
        "skipfirst",
        "mock",
        "Mock",
        "_getsignature",
        "func",
        "skipfirst",
        "signature",
        "eval",
        "src",
        "_mock_",
        "mock",
        "_copy_func_details",
        "func",
        "funcopy",
        "_setup_func",
        "funcopy",
        "mock",
        "funcopy",
        "funcopy",
        "mock",
        "mock",
        "_is_instance_mock",
        "mock",
        "args",
        "kwargs",
        "mock",
        "assert_called_with",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "mock",
        "assert_called_once_with",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "mock",
        "assert_has_calls",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "mock",
        "assert_any_call",
        "args",
        "kwargs",
        "_CallList",
        "_CallList",
        "mock",
        "reset_mock",
        "funcopy",
        "return_value",
        "_is_instance_mock",
        "ret",
        "ret",
        "mock",
        "ret",
        "reset_mock",
        "_CallList",
        "_CallList",
        "_CallList",
        "mock",
        "return_value",
        "mock",
        "side_effect",
        "mock",
        "_mock_children",
        "assert_called_with",
        "assert_called_once_with",
        "assert_has_calls",
        "assert_any_call",
        "reset_mock",
        "funcopy",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "name",
        "AttributeError",
        "_sentinels",
        "setdefault",
        "name",
        "_SentinelObject",
        "name",
        "_Sentinel",
        "sentinel",
        "DEFAULT",
        "OldStyleClass",
        "value",
        "value",
        "value",
        "value",
        "value",
        "inPy3k",
        "ClassType",
        "name",
        "_allowed_names",
        "add",
        "name",
        "name",
        "name",
        "name",
        "_the_name",
        "_the_name",
        "_mock_signature",
        "sig",
        "getattr",
        "_the_name",
        "getattr",
        "sig",
        "name",
        "value",
        "name",
        "name",
        "_the_name",
        "_the_name",
        "_mock_signature",
        "sig",
        "__dict__",
        "value",
        "setattr",
        "sig",
        "name",
        "value",
        "property",
        "_get",
        "_set",
        "value",
        "isinstance",
        "value",
        "__contains__",
        "value",
        "len",
        "value",
        "len",
        "len_value",
        "len_self",
        "i",
        "len_self",
        "len_value",
        "i",
        "i",
        "len_value",
        "sub_list",
        "value",
        "pprint",
        "pformat",
        "parent",
        "value",
        "name",
        "new_name",
        "_is_instance_mock",
        "value",
        "value",
        "_mock_name",
        "value",
        "_mock_new_name",
        "value",
        "_mock_parent",
        "value",
        "_mock_new_parent",
        "parent",
        "_parent",
        "_parent",
        "value",
        "_parent",
        "_mock_new_parent",
        "new_name",
        "parent",
        "new_name",
        "name",
        "parent",
        "name",
        "DEFAULT",
        "args",
        "kwargs",
        "Base",
        "cls",
        "args",
        "kw",
        "cls",
        "cls",
        "cls",
        "__doc__",
        "__new__",
        "instance",
        "spec",
        "wraps",
        "name",
        "spec_set",
        "parent",
        "_spec_state",
        "_new_name",
        "_new_parent",
        "kwargs",
        "_new_parent",
        "parent",
        "__dict__",
        "parent",
        "name",
        "_new_name",
        "_new_parent",
        "spec_set",
        "spec_set",
        "_mock_add_spec",
        "spec",
        "spec_set",
        "wraps",
        "_CallList",
        "_CallList",
        "_CallList",
        "kwargs",
        "configure_mock",
        "kwargs",
        "_super",
        "NonCallableMock",
        "spec",
        "wraps",
        "name",
        "spec_set",
        "parent",
        "_spec_state",
        "mock",
        "attribute",
        "setattr",
        "attribute",
        "mock",
        "spec",
        "spec_set",
        "_mock_add_spec",
        "spec",
        "spec_set",
        "spec",
        "spec_set",
        "spec",
        "_is_list",
        "spec",
        "isinstance",
        "spec",
        "ClassTypes",
        "spec",
        "_get_class",
        "spec",
        "dir",
        "spec",
        "__dict__",
        "_spec_class",
        "spec_set",
        "spec",
        "_mock_return_value",
        "_mock_signature",
        "_mock_signature",
        "return_value",
        "ret",
        "DEFAULT",
        "_get_child_mock",
        "_new_parent",
        "_new_name",
        "ret",
        "ret",
        "value",
        "_mock_signature",
        "_mock_signature",
        "value",
        "value",
        "_check_and_set_parent",
        "value",
        "property",
        "__get_return_value",
        "__set_return_value",
        "__return_value_doc",
        "property",
        "_spec_class",
        "_spec_class",
        "_mock_signature_property",
        "_mock_signature_property",
        "_mock_signature_property",
        "_mock_signature_property",
        "_mock_signature_property",
        "_mock_signature",
        "sig",
        "_mock_side_effect",
        "sig",
        "side_effect",
        "value",
        "_try_iter",
        "value",
        "_mock_signature",
        "sig",
        "value",
        "value",
        "property",
        "__get_side_effect",
        "__set_side_effect",
        "_CallList",
        "_CallList",
        "_CallList",
        "child",
        "_mock_children",
        "values",
        "child",
        "reset_mock",
        "_mock_return_value",
        "_is_instance_mock",
        "ret",
        "ret",
        "ret",
        "reset_mock",
        "kwargs",
        "arg",
        "val",
        "sorted",
        "kwargs",
        "items",
        "key",
        "entry",
        "entry",
        "count",
        "arg",
        "split",
        "args",
        "pop",
        "entry",
        "args",
        "getattr",
        "obj",
        "entry",
        "setattr",
        "obj",
        "val",
        "name",
        "name",
        "AttributeError",
        "name",
        "_mock_methods",
        "name",
        "_mock_methods",
        "name",
        "_all_magics",
        "AttributeError",
        "name",
        "_is_magic",
        "name",
        "AttributeError",
        "name",
        "_mock_children",
        "get",
        "name",
        "result",
        "_mock_wraps",
        "getattr",
        "_mock_wraps",
        "name",
        "_get_child_mock",
        "parent",
        "name",
        "name",
        "wraps",
        "wraps",
        "_new_name",
        "name",
        "_new_parent",
        "_mock_children",
        "result",
        "isinstance",
        "result",
        "_SpecState",
        "create_autospec",
        "result",
        "spec",
        "result",
        "spec_set",
        "result",
        "instance",
        "result",
        "parent",
        "result",
        "name",
        "_mock_children",
        "result",
        "result",
        "_mock_new_name",
        "_mock_new_parent",
        "_name_list",
        "_parent",
        "_parent",
        "_name_list",
        "append",
        "_parent",
        "_mock_new_name",
        "dot",
        "_parent",
        "_mock_new_name",
        "_parent",
        "_mock_new_parent",
        "id",
        "_parent",
        "seen",
        "seen",
        "add",
        "id",
        "_parent",
        "reversed",
        "_name_list",
        "last",
        "_mock_name",
        "len",
        "_name_list",
        "_name_list",
        "_first",
        "_first",
        "join",
        "_name_list",
        "name",
        "name",
        "_spec_class",
        "_spec_set",
        "spec_string",
        "_spec_class",
        "name_string",
        "spec_string",
        "id",
        "_mock_methods",
        "dir",
        "__dict__",
        "FILTER_DIR",
        "e",
        "e",
        "from_type",
        "e",
        "startswith",
        "e",
        "e",
        "from_dict",
        "e",
        "startswith",
        "_is_magic",
        "e",
        "sorted",
        "extras",
        "from_type",
        "from_dict",
        "_mock_children",
        "name",
        "value",
        "name",
        "_allowed_names",
        "__setattr__",
        "name",
        "value",
        "_spec_set",
        "_mock_methods",
        "name",
        "_mock_methods",
        "name",
        "__dict__",
        "AttributeError",
        "name",
        "name",
        "_unsupported_magics",
        "name",
        "AttributeError",
        "msg",
        "name",
        "_all_magics",
        "_mock_methods",
        "name",
        "_mock_methods",
        "AttributeError",
        "name",
        "_is_instance_mock",
        "value",
        "setattr",
        "name",
        "_get_method",
        "name",
        "value",
        "value",
        "args",
        "kw",
        "original",
        "args",
        "kw",
        "mocksignature",
        "value",
        "real",
        "skipfirst",
        "_check_and_set_parent",
        "value",
        "name",
        "setattr",
        "name",
        "value",
        "_check_and_set_parent",
        "value",
        "name",
        "name",
        "_mock_children",
        "value",
        "__setattr__",
        "name",
        "value",
        "name",
        "name",
        "_all_magics",
        "name",
        "__dict__",
        "delattr",
        "name",
        "name",
        "__dict__",
        "__delattr__",
        "name",
        "args",
        "kwargs",
        "_mock_name",
        "_format_call_signature",
        "name",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "_format_mock_call_signature",
        "args",
        "kwargs",
        "call_args",
        "len",
        "call_args",
        "call_args",
        "_format_mock_call_signature",
        "call_args",
        "message",
        "expected_string",
        "actual_string",
        "_mock_self",
        "args",
        "kwargs",
        "_mock_self",
        "call_args",
        "_format_mock_call_signature",
        "args",
        "kwargs",
        "AssertionError",
        "expected",
        "call_args",
        "args",
        "kwargs",
        "_format_mock_failure_message",
        "args",
        "kwargs",
        "AssertionError",
        "msg",
        "_mock_self",
        "args",
        "kwargs",
        "_mock_self",
        "call_count",
        "call_count",
        "AssertionError",
        "msg",
        "assert_called_with",
        "args",
        "kwargs",
        "calls",
        "any_order",
        "any_order",
        "calls",
        "mock_calls",
        "AssertionError",
        "calls",
        "mock_calls",
        "mock_calls",
        "kall",
        "calls",
        "all_calls",
        "remove",
        "kall",
        "ValueError",
        "not_found",
        "append",
        "kall",
        "not_found",
        "AssertionError",
        "not_found",
        "args",
        "kwargs",
        "call",
        "args",
        "kwargs",
        "kall",
        "call_args_list",
        "_format_mock_call_signature",
        "args",
        "kwargs",
        "AssertionError",
        "expected_string",
        "kw",
        "issubclass",
        "_type",
        "CallableMixin",
        "issubclass",
        "_type",
        "NonCallableMagicMock",
        "MagicMock",
        "issubclass",
        "_type",
        "NonCallableMock",
        "Mock",
        "_type",
        "__mro__",
        "klass",
        "kw",
        "obj",
        "obj",
        "obj",
        "_is_exception",
        "obj",
        "obj",
        "_callable",
        "obj",
        "obj",
        "iter",
        "obj",
        "obj",
        "Base",
        "spec",
        "side_effect",
        "return_value",
        "DEFAULT",
        "wraps",
        "name",
        "spec_set",
        "parent",
        "_spec_state",
        "_new_name",
        "_new_parent",
        "kwargs",
        "__dict__",
        "return_value",
        "_super",
        "CallableMixin",
        "spec",
        "wraps",
        "name",
        "spec_set",
        "parent",
        "_spec_state",
        "_new_name",
        "_new_parent",
        "kwargs",
        "side_effect",
        "args",
        "kwargs",
        "_mock_self",
        "args",
        "kwargs",
        "_mock_self",
        "_mock_check_sig",
        "args",
        "kwargs",
        "_mock_self",
        "_mock_call",
        "args",
        "kwargs",
        "_mock_self",
        "args",
        "kwargs",
        "_mock_self",
        "call_count",
        "_Call",
        "args",
        "kwargs",
        "two",
        "call_args_list",
        "append",
        "_Call",
        "args",
        "kwargs",
        "two",
        "_mock_new_name",
        "_mock_new_parent",
        "mock_calls",
        "append",
        "_Call",
        "args",
        "kwargs",
        "_new_name",
        "_mock_parent",
        "_mock_name",
        "_new_parent",
        "_Call",
        "_new_name",
        "args",
        "kwargs",
        "_new_parent",
        "_mock_new_name",
        "skip_next_dot",
        "_new_parent",
        "_mock_new_name",
        "_new_parent",
        "_mock_new_name",
        "dot",
        "_new_name",
        "do_method_calls",
        "_new_name",
        "name",
        "this_mock_call",
        "_Call",
        "name",
        "args",
        "kwargs",
        "_new_parent",
        "method_calls",
        "append",
        "this_method_call",
        "_new_parent",
        "_mock_parent",
        "do_method_calls",
        "_new_parent",
        "_mock_name",
        "name",
        "_new_parent",
        "mock_calls",
        "append",
        "this_mock_call",
        "_new_parent",
        "_mock_new_parent",
        "id",
        "_new_parent",
        "_new_parent_id",
        "seen",
        "seen",
        "add",
        "_new_parent_id",
        "DEFAULT",
        "side_effect",
        "effect",
        "_is_exception",
        "effect",
        "effect",
        "_callable",
        "effect",
        "next",
        "effect",
        "effect",
        "args",
        "kwargs",
        "ret_val",
        "DEFAULT",
        "return_value",
        "_mock_wraps",
        "_mock_return_value",
        "DEFAULT",
        "_mock_wraps",
        "args",
        "kwargs",
        "ret_val",
        "DEFAULT",
        "return_value",
        "ret_val",
        "CallableMixin",
        "NonCallableMock",
        "thing",
        "comp",
        "import_path",
        "getattr",
        "thing",
        "comp",
        "AttributeError",
        "__import__",
        "import_path",
        "getattr",
        "thing",
        "comp",
        "target",
        "target",
        "split",
        "components",
        "pop",
        "__import__",
        "import_path",
        "comp",
        "components",
        "import_path",
        "comp",
        "_dot_lookup",
        "thing",
        "comp",
        "import_path",
        "thing",
        "patcher",
        "hasattr",
        "patcher",
        "getter",
        "attribute",
        "spec",
        "create",
        "mocksignature",
        "spec_set",
        "autospec",
        "new_callable",
        "kwargs",
        "new_callable",
        "DEFAULT",
        "ValueError",
        "autospec",
        "ValueError",
        "getter",
        "attribute",
        "new_callable",
        "spec",
        "create",
        "mocksignature",
        "spec_set",
        "autospec",
        "kwargs",
        "_patch",
        "getter",
        "attribute",
        "spec",
        "create",
        "mocksignature",
        "spec_set",
        "autospec",
        "new_callable",
        "kwargs",
        "attribute_name",
        "p",
        "copy",
        "p",
        "additional_patchers",
        "patcher",
        "func",
        "isinstance",
        "func",
        "ClassTypes",
        "decorate_class",
        "func",
        "decorate_callable",
        "func",
        "klass",
        "attr",
        "dir",
        "klass",
        "attr",
        "startswith",
        "patch",
        "TEST_PREFIX",
        "getattr",
        "klass",
        "attr",
        "hasattr",
        "attr_value",
        "copy",
        "setattr",
        "klass",
        "attr",
        "patcher",
        "attr_value",
        "klass",
        "func",
        "hasattr",
        "func",
        "func",
        "patchings",
        "append",
        "func",
        "wraps",
        "func",
        "args",
        "keywargs",
        "patching",
        "patched",
        "patchings",
        "patching",
        "__enter__",
        "entered_patchers",
        "append",
        "patching",
        "patching",
        "attribute_name",
        "keywargs",
        "update",
        "arg",
        "patching",
        "DEFAULT",
        "extra_args",
        "append",
        "arg",
        "args",
        "extra_args",
        "func",
        "args",
        "keywargs",
        "patching",
        "entered_patchers",
        "_is_started",
        "patching",
        "entered_patchers",
        "append",
        "patching",
        "patching",
        "reversed",
        "entered_patchers",
        "patching",
        "__exit__",
        "hasattr",
        "func",
        "getattr",
        "func",
        "func",
        "func_code",
        "co_firstlineno",
        "patched",
        "getter",
        "attribute",
        "DEFAULT",
        "target",
        "__dict__",
        "name",
        "AttributeError",
        "KeyError",
        "getattr",
        "target",
        "name",
        "DEFAULT",
        "create",
        "original",
        "DEFAULT",
        "AttributeError",
        "target",
        "name",
        "original",
        "local",
        "spec",
        "spec_set",
        "autospec",
        "kwargs",
        "new_callable",
        "getter",
        "get_original",
        "DEFAULT",
        "autospec",
        "spec_set",
        "original",
        "spec",
        "original",
        "spec",
        "spec_set",
        "isinstance",
        "original",
        "ClassTypes",
        "MagicMock",
        "new_callable",
        "new_callable",
        "spec",
        "spec_set",
        "_callable",
        "spec",
        "spec_set",
        "NonCallableMagicMock",
        "spec",
        "spec",
        "spec_set",
        "spec_set",
        "isinstance",
        "Klass",
        "issubclass",
        "Klass",
        "NonCallableMock",
        "attribute",
        "attribute",
        "_kwargs",
        "update",
        "kwargs",
        "Klass",
        "_kwargs",
        "inherit",
        "_is_instance_mock",
        "_is_list",
        "spec",
        "spec_set",
        "_instance_callable",
        "spec",
        "spec_set",
        "NonCallableMagicMock",
        "_kwargs",
        "pop",
        "Klass",
        "_new_parent",
        "_new_name",
        "_kwargs",
        "autospec",
        "DEFAULT",
        "spec_set",
        "autospec",
        "original",
        "create_autospec",
        "autospec",
        "spec_set",
        "spec_set",
        "_name",
        "attribute",
        "kwargs",
        "kwargs",
        "mocksignature",
        "mocksignature",
        "original",
        "original",
        "local",
        "setattr",
        "target",
        "attribute",
        "new_attr",
        "attribute_name",
        "DEFAULT",
        "attribute_name",
        "patching",
        "additional_patchers",
        "patching",
        "__enter__",
        "patching",
        "DEFAULT",
        "extra_args",
        "update",
        "arg",
        "extra_args",
        "_",
        "_is_started",
        "RuntimeError",
        "is_local",
        "temp_original",
        "DEFAULT",
        "setattr",
        "target",
        "attribute",
        "temp_original",
        "delattr",
        "target",
        "attribute",
        "create",
        "hasattr",
        "target",
        "attribute",
        "setattr",
        "target",
        "attribute",
        "temp_original",
        "temp_original",
        "is_local",
        "target",
        "patcher",
        "reversed",
        "additional_patchers",
        "_is_started",
        "patcher",
        "patcher",
        "__exit__",
        "__enter__",
        "__exit__",
        "target",
        "target",
        "rsplit",
        "ValueError",
        "target",
        "_importer",
        "target",
        "getter",
        "attribute",
        "target",
        "attribute",
        "DEFAULT",
        "spec",
        "create",
        "mocksignature",
        "spec_set",
        "autospec",
        "new_callable",
        "kwargs",
        "target",
        "_patch",
        "getter",
        "attribute",
        "spec",
        "create",
        "mocksignature",
        "spec_set",
        "autospec",
        "new_callable",
        "kwargs",
        "target",
        "spec",
        "create",
        "mocksignature",
        "spec_set",
        "autospec",
        "new_callable",
        "kwargs",
        "target",
        "unicode",
        "_importer",
        "target",
        "target",
        "kwargs",
        "ValueError",
        "kwargs",
        "items",
        "items",
        "_patch",
        "getter",
        "attribute",
        "spec",
        "create",
        "mocksignature",
        "spec_set",
        "autospec",
        "new_callable",
        "attribute",
        "attribute",
        "items",
        "_patch",
        "getter",
        "attribute",
        "spec",
        "create",
        "mocksignature",
        "spec_set",
        "autospec",
        "new_callable",
        "attribute",
        "patcher",
        "additional_patchers",
        "append",
        "this_patcher",
        "patcher",
        "target",
        "DEFAULT",
        "spec",
        "create",
        "mocksignature",
        "spec_set",
        "autospec",
        "new_callable",
        "kwargs",
        "_get_target",
        "target",
        "_patch",
        "getter",
        "attribute",
        "spec",
        "create",
        "mocksignature",
        "spec_set",
        "autospec",
        "new_callable",
        "kwargs",
        "in_dict",
        "values",
        "clear",
        "kwargs",
        "isinstance",
        "in_dict",
        "basestring",
        "_importer",
        "in_dict",
        "in_dict",
        "values",
        "values",
        "update",
        "kwargs",
        "clear",
        "f",
        "isinstance",
        "f",
        "ClassTypes",
        "decorate_class",
        "f",
        "wraps",
        "f",
        "args",
        "kw",
        "_patch_dict",
        "f",
        "args",
        "kw",
        "_unpatch_dict",
        "_inner",
        "klass",
        "attr",
        "dir",
        "klass",
        "getattr",
        "klass",
        "attr",
        "attr",
        "startswith",
        "patch",
        "TEST_PREFIX",
        "hasattr",
        "attr_value",
        "_patch_dict",
        "in_dict",
        "values",
        "clear",
        "decorator",
        "attr_value",
        "setattr",
        "klass",
        "attr",
        "decorated",
        "klass",
        "_patch_dict",
        "values",
        "in_dict",
        "clear",
        "in_dict",
        "copy",
        "AttributeError",
        "key",
        "in_dict",
        "in_dict",
        "key",
        "original",
        "clear",
        "_clear_dict",
        "in_dict",
        "in_dict",
        "update",
        "values",
        "AttributeError",
        "key",
        "values",
        "values",
        "key",
        "in_dict",
        "_original",
        "_clear_dict",
        "in_dict",
        "in_dict",
        "update",
        "original",
        "AttributeError",
        "key",
        "original",
        "original",
        "key",
        "args",
        "_unpatch_dict",
        "__enter__",
        "__exit__",
        "in_dict",
        "in_dict",
        "clear",
        "AttributeError",
        "in_dict",
        "key",
        "keys",
        "in_dict",
        "key",
        "_patch_object",
        "_patch_dict",
        "_patch_multiple",
        "join",
        "n",
        "n",
        "numerics",
        "split",
        "join",
        "n",
        "n",
        "numerics",
        "split",
        "inPy3k",
        "method",
        "method",
        "name",
        "func",
        "args",
        "kw",
        "func",
        "args",
        "kw",
        "name",
        "method",
        "method",
        "method",
        "join",
        "magic_methods",
        "numerics",
        "inplace",
        "right",
        "extra",
        "split",
        "_magics",
        "_non_defaults",
        "__hash__",
        "__str__",
        "__sizeof__",
        "unicode",
        "__str__",
        "other",
        "__eq__",
        "_mock_return_value",
        "ret_val",
        "DEFAULT",
        "ret_val",
        "other",
        "__eq__",
        "other",
        "__ne__",
        "_mock_return_value",
        "DEFAULT",
        "DEFAULT",
        "other",
        "__ne__",
        "__iter__",
        "_mock_return_value",
        "ret_val",
        "DEFAULT",
        "iter",
        "iter",
        "ret_val",
        "__iter__",
        "_get_eq",
        "_get_ne",
        "_get_iter",
        "mock",
        "method",
        "name",
        "_return_values",
        "get",
        "name",
        "DEFAULT",
        "DEFAULT",
        "_calculate_return_value",
        "get",
        "name",
        "return_calulator",
        "return_calulator",
        "mock",
        "AttributeError",
        "AttributeError",
        "name",
        "return_value",
        "_side_effect_methods",
        "get",
        "name",
        "side_effector",
        "side_effector",
        "mock",
        "args",
        "kw",
        "_super",
        "MagicMixin",
        "args",
        "kw",
        "_mock_set_magics",
        "_magics",
        "_mock_methods",
        "_magics",
        "intersection",
        "_mock_methods",
        "_magics",
        "these_magics",
        "entry",
        "remove_magics",
        "entry",
        "__dict__",
        "delattr",
        "entry",
        "these_magics",
        "__dict__",
        "entry",
        "these_magics",
        "setattr",
        "_type",
        "entry",
        "MagicProxy",
        "entry",
        "MagicMixin",
        "NonCallableMock",
        "spec",
        "spec_set",
        "_mock_add_spec",
        "spec",
        "spec_set",
        "_mock_set_magics",
        "MagicMixin",
        "Mock",
        "spec",
        "spec_set",
        "_mock_add_spec",
        "spec",
        "spec_set",
        "_mock_set_magics",
        "name",
        "parent",
        "name",
        "parent",
        "args",
        "kwargs",
        "create_mock",
        "m",
        "args",
        "kwargs",
        "name",
        "parent",
        "parent",
        "_get_child_mock",
        "name",
        "entry",
        "_new_name",
        "entry",
        "_new_parent",
        "parent",
        "setattr",
        "parent",
        "entry",
        "m",
        "_set_return_value",
        "parent",
        "m",
        "entry",
        "m",
        "obj",
        "_type",
        "create_mock",
        "other",
        "other",
        "_ANY",
        "name",
        "args",
        "kwargs",
        "name",
        "join",
        "repr",
        "arg",
        "arg",
        "args",
        "join",
        "key",
        "value",
        "key",
        "value",
        "kwargs",
        "items",
        "args_string",
        "args_string",
        "kwargs_string",
        "formatted_args",
        "formatted_args",
        "formatted_args",
        "kwargs_string",
        "message",
        "formatted_args",
        "cls",
        "value",
        "name",
        "parent",
        "two",
        "from_kall",
        "len",
        "value",
        "_len",
        "value",
        "_len",
        "value",
        "isinstance",
        "first",
        "basestring",
        "first",
        "isinstance",
        "second",
        "second",
        "second",
        "first",
        "second",
        "_len",
        "value",
        "isinstance",
        "value",
        "basestring",
        "value",
        "isinstance",
        "value",
        "value",
        "value",
        "two",
        "__new__",
        "cls",
        "args",
        "kwargs",
        "__new__",
        "cls",
        "name",
        "args",
        "kwargs",
        "value",
        "name",
        "parent",
        "two",
        "from_kall",
        "name",
        "parent",
        "from_kall",
        "other",
        "other",
        "ANY",
        "len",
        "other",
        "len",
        "len_other",
        "len_other",
        "other",
        "len_other",
        "other",
        "isinstance",
        "value",
        "value",
        "isinstance",
        "value",
        "basestring",
        "value",
        "value",
        "other",
        "isinstance",
        "first",
        "basestring",
        "first",
        "isinstance",
        "second",
        "second",
        "second",
        "first",
        "second",
        "self_name",
        "other_name",
        "self_name",
        "other_args",
        "other_kwargs",
        "self_args",
        "self_kwargs",
        "other",
        "__eq__",
        "other",
        "args",
        "kwargs",
        "name",
        "_Call",
        "args",
        "kwargs",
        "name",
        "name",
        "_Call",
        "name",
        "args",
        "kwargs",
        "name",
        "name",
        "parent",
        "attr",
        "name",
        "_Call",
        "name",
        "attr",
        "from_kall",
        "name",
        "attr",
        "_Call",
        "name",
        "name",
        "parent",
        "from_kall",
        "from_kall",
        "name",
        "name",
        "startswith",
        "name",
        "name",
        "len",
        "name",
        "name",
        "startswith",
        "name",
        "name",
        "_format_call_signature",
        "name",
        "args",
        "kwargs",
        "thing",
        "thing",
        "from_kall",
        "vals",
        "append",
        "thing",
        "thing",
        "parent",
        "_CallList",
        "reversed",
        "vals",
        "_Call",
        "from_kall",
        "spec",
        "spec_set",
        "instance",
        "_parent",
        "_name",
        "kwargs",
        "_is_list",
        "spec",
        "spec",
        "isinstance",
        "spec",
        "ClassTypes",
        "spec",
        "spec_set",
        "spec",
        "spec",
        "_kwargs",
        "update",
        "kwargs",
        "MagicMock",
        "spec",
        "DescriptorTypes",
        "_callable",
        "spec",
        "NonCallableMagicMock",
        "is_type",
        "instance",
        "_instance_callable",
        "spec",
        "NonCallableMagicMock",
        "_name",
        "_parent",
        "Klass",
        "parent",
        "_parent",
        "_new_parent",
        "_parent",
        "_new_name",
        "_new_name",
        "name",
        "_name",
        "_kwargs",
        "isinstance",
        "spec",
        "FunctionTypes",
        "_set_signature",
        "mock",
        "spec",
        "_check_signature",
        "spec",
        "mock",
        "is_type",
        "instance",
        "_parent",
        "instance",
        "_parent",
        "_mock_children",
        "mock",
        "is_type",
        "instance",
        "kwargs",
        "create_autospec",
        "spec",
        "spec_set",
        "instance",
        "_name",
        "_parent",
        "mock",
        "entry",
        "dir",
        "spec",
        "_is_magic",
        "entry",
        "isinstance",
        "spec",
        "FunctionTypes",
        "entry",
        "FunctionAttributes",
        "getattr",
        "spec",
        "entry",
        "original",
        "spec_set",
        "original",
        "isinstance",
        "original",
        "FunctionTypes",
        "_SpecState",
        "original",
        "spec_set",
        "mock",
        "entry",
        "instance",
        "mock",
        "_mock_children",
        "mock",
        "isinstance",
        "spec",
        "FunctionTypes",
        "mock",
        "mock",
        "MagicMock",
        "parent",
        "parent",
        "name",
        "entry",
        "_new_name",
        "entry",
        "_new_parent",
        "parent",
        "kwargs",
        "mock",
        "_mock_children",
        "_must_skip",
        "spec",
        "entry",
        "is_type",
        "_check_signature",
        "original",
        "skipfirst",
        "skipfirst",
        "isinstance",
        "FunctionTypes",
        "setattr",
        "mock",
        "entry",
        "mock",
        "spec",
        "entry",
        "is_type",
        "isinstance",
        "spec",
        "ClassTypes",
        "entry",
        "getattr",
        "spec",
        "spec",
        "__class__",
        "hasattr",
        "spec",
        "is_type",
        "klass",
        "spec",
        "__mro__",
        "klass",
        "__dict__",
        "get",
        "entry",
        "DEFAULT",
        "result",
        "DEFAULT",
        "isinstance",
        "result",
        "staticmethod",
        "classmethod",
        "is_type",
        "is_type",
        "obj",
        "obj",
        "__class__",
        "AttributeError",
        "obj",
        "spec",
        "spec_set",
        "parent",
        "name",
        "ids",
        "instance",
        "spec",
        "ids",
        "spec_set",
        "parent",
        "instance",
        "name",
        "create_autospec",
        "ANY",
        "__eq__",
        "_ANY",
        "__eq__"
    ],
    "literals": [
        "'Mock'",
        "'MagicMock'",
        "'mocksignature'",
        "'patch'",
        "'sentinel'",
        "'DEFAULT'",
        "'ANY'",
        "'call'",
        "'create_autospec'",
        "'FILTER_DIR'",
        "'NonCallableMock'",
        "'NonCallableMagicMock'",
        "'0.8.0'",
        "'java'",
        "r'^[a-z_][a-z0-9_]*$'",
        "'im_self'",
        "'__builtin__'",
        "'__self__'",
        "'builtins'",
        "'a'",
        "'inspect module not available'",
        "\"_mock_ is a reserved argument name, can't mock signatures using \"",
        "\"_mock_\"",
        "'_mock_'",
        "'_mock_'",
        "'_mock_'",
        "\"\"",
        "'inspect module not available'",
        "\"\"",
        "\"lambda _mock_self, %s: None\"",
        "'__call__'",
        "'__call__'",
        "'__call__'",
        "\"lambda %s: None\"",
        "'_mock_'",
        "'funcopy'",
        "'checksig'",
        "'mock'",
        "\"lambda %(signature)s: _mock_(%(signature)s)\"",
        "'signature'",
        "'__%s__'",
        "\"A unique, named, sentinel object.\"",
        "'sentinel.%s'",
        "'__bases__'",
        "'return_value'",
        "'_mock_return_value'",
        "'side_effect'",
        "'_mock_side_effect'",
        "'_mock_parent'",
        "'_mock_new_parent'",
        "'_mock_name'",
        "'_mock_new_name'",
        "'_mock_'",
        "'__doc__'",
        "''",
        "'_mock_parent'",
        "'_mock_name'",
        "'_mock_new_name'",
        "'_mock_new_parent'",
        "'_mock_children'",
        "'_mock_wraps'",
        "'_mock_signature'",
        "'_mock_called'",
        "'_mock_call_args'",
        "'_mock_call_count'",
        "'_mock_call_args_list'",
        "'_mock_mock_calls'",
        "'method_calls'",
        "''",
        "'_spec_class'",
        "'_spec_set'",
        "'_mock_methods'",
        "'()'",
        "'()'",
        "\"The value to be returned when the mock is called.\"",
        "'called'",
        "'call_count'",
        "'call_args'",
        "'call_args_list'",
        "'mock_calls'",
        "\"Restore the mock object to its initial state.\"",
        "'.'",
        "'.'",
        "'_mock_methods'",
        "\"Mock object has no attribute %r\"",
        "'.'",
        "'()'",
        "''",
        "'.'",
        "'()'",
        "''",
        "'mock'",
        "'()'",
        "'().'",
        "'.'",
        "''",
        "''",
        "'mock'",
        "'mock.'",
        "' name=%r'",
        "''",
        "' spec=%r'",
        "' spec_set=%r'",
        "\"<%s%s%s id='%s'>\"",
        "'_'",
        "'_'",
        "\"Mock object has no attribute '%s'\"",
        "'Attempting to set unsupported magic method %r.'",
        "\"Mock object has no \"",
        "\"attribute '%s'\"",
        "'mock'",
        "'Expected call: %s\\nActual call: %s'",
        "'Expected call: %s\\nNot called'",
        "\"Expected to be called once. Called %s times.\"",
        "'Calls not found.\\nExpected: %r\\n'",
        "'Actual: %r'",
        "'%r not all found in call list'",
        "'%s call not found'",
        "''",
        "'_mock_return_value'",
        "''",
        "'()'",
        "'.'",
        "''",
        "'()'",
        "'.'",
        "'.'",
        "\".%s\"",
        "'is_local'",
        "\"Cannot use 'new' and 'new_callable' together\"",
        "\"Cannot use 'autospec' and 'new_callable' together\"",
        "\"__call__\"",
        "'patchings'",
        "'func_code'",
        "\"compat_co_firstlineno\"",
        "\"%s does not have the attribute %r\"",
        "'spec'",
        "'spec_set'",
        "'name'",
        "'name'",
        "'()'",
        "\"autospec creates the mock for you. Can't specify \"",
        "\"autospec and new.\"",
        "\"Can't pass kwargs to a mock we aren't creating\"",
        "'stop called on unstarted patcher'",
        "'.'",
        "\"Need a valid target to patch. You supplied: %r\"",
        "'Must supply at least one keyword argument with patch.multiple'",
        "\"__call__\"",
        "'test'",
        "\"lt le gt ge eq ne \"",
        "\"getitem setitem delitem \"",
        "\"len contains iter \"",
        "\"hash str sizeof \"",
        "\"enter exit \"",
        "\"divmod neg pos abs invert \"",
        "\"complex int float index \"",
        "\"trunc floor ceil \"",
        "\"add sub mul div floordiv mod lshift rshift and xor or pow \"",
        "' '",
        "'i%s'",
        "' '",
        "'r%s'",
        "''",
        "'bool next '",
        "'unicode long nonzero oct hex truediv rtruediv '",
        "'__%s__'",
        "'cmp'",
        "'getslice'",
        "'setslice'",
        "'coerce'",
        "'subclasses'",
        "'format'",
        "'get'",
        "'set'",
        "'delete'",
        "'reversed'",
        "'missing'",
        "'reduce'",
        "'reduce_ex'",
        "'getinitargs'",
        "'getnewargs'",
        "'getstate'",
        "'setstate'",
        "'getformat'",
        "'setformat'",
        "'repr'",
        "'dir'",
        "\"Turns a callable object (like a mock) into a real function\"",
        "'__%s__'",
        "' '",
        "'__getattr__'",
        "'__setattr__'",
        "'__init__'",
        "'__new__'",
        "'__prepare__'",
        "'__instancecheck__'",
        "'__subclasscheck__'",
        "'__del__'",
        "'__hash__'",
        "'__str__'",
        "'__sizeof__'",
        "'__unicode__'",
        "'__int__'",
        "'__contains__'",
        "'__len__'",
        "'__exit__'",
        "'__complex__'",
        "'__float__'",
        "'__bool__'",
        "'__nonzero__'",
        "'__oct__'",
        "'1'",
        "'__hex__'",
        "'0x1'",
        "'__long__'",
        "'__index__'",
        "'__eq__'",
        "'__ne__'",
        "'__iter__'",
        "\"A helper object that compares equal to everything.\"",
        "'<ANY>'",
        "'%s(%%s)'",
        "''",
        "', '",
        "', '",
        "'%s=%r'",
        "', '",
        "''",
        "''",
        "''",
        "''",
        "'()'",
        "'()'",
        "'%s.%s'",
        "'call'",
        "'()'",
        "'call%s'",
        "'call'",
        "'call'",
        "'()'",
        "'call.%s'",
        "'call%s'",
        "'spec'",
        "'spec_set'",
        "''",
        "'return_value'",
        "'()'",
        "'spec'",
        "'spec_set'",
        "'__dict__'",
        "'__mro__'",
        "'func_closure'",
        "'func_code'",
        "'func_defaults'",
        "'func_dict'",
        "'func_doc'",
        "'func_globals'",
        "'func_name'"
    ],
    "variables": [
        "__all__",
        "__version__",
        "inspect",
        "f",
        "f",
        "__doc__",
        "f",
        "__module__",
        "basestring",
        "unicode",
        "BaseExceptions",
        "BaseExceptions",
        "_isidentifier",
        "regex",
        "inPy3k",
        "_super",
        "builtin",
        "builtin",
        "FILTER_DIR",
        "__slots__",
        "DescriptorTypes",
        "func",
        "skipfirst",
        "func",
        "regargs",
        "varargs",
        "varkwargs",
        "defaults",
        "regargs",
        "_msg",
        "regargs",
        "signature",
        "func",
        "skipfirst",
        "func",
        "regargs",
        "varargs",
        "varkwargs",
        "defaults",
        "regargs",
        "regargs",
        "signature",
        "result",
        "signature",
        "func",
        "src",
        "checksig",
        "funcopy",
        "funcopy",
        "__doc__",
        "funcopy",
        "__module__",
        "funcopy",
        "func_defaults",
        "funcopy",
        "__defaults__",
        "funcopy",
        "__kwdefaults__",
        "klass",
        "skipfirst",
        "result",
        "signature",
        "func",
        "src",
        "context",
        "checksig",
        "name",
        "name",
        "context",
        "src",
        "funcopy",
        "mock",
        "signature",
        "func",
        "src",
        "funcopy",
        "funcopy",
        "mock",
        "funcopy",
        "method_calls",
        "funcopy",
        "mock_calls",
        "ret",
        "funcopy",
        "called",
        "funcopy",
        "call_count",
        "funcopy",
        "call_args",
        "funcopy",
        "call_args_list",
        "funcopy",
        "method_calls",
        "funcopy",
        "mock_calls",
        "funcopy",
        "return_value",
        "funcopy",
        "side_effect",
        "funcopy",
        "_mock_children",
        "funcopy",
        "assert_called_with",
        "funcopy",
        "assert_called_once_with",
        "funcopy",
        "assert_has_calls",
        "funcopy",
        "assert_any_call",
        "funcopy",
        "reset_mock",
        "mock",
        "_mock_signature",
        "name",
        "_sentinels",
        "sentinel",
        "DEFAULT",
        "ClassType",
        "ClassTypes",
        "ClassTypes",
        "_allowed_names",
        "_the_name",
        "sig",
        "sig",
        "_the_name",
        "len_value",
        "len_self",
        "sub_list",
        "_parent",
        "_parent",
        "value",
        "_mock_new_parent",
        "value",
        "_mock_new_name",
        "value",
        "_mock_parent",
        "value",
        "_mock_name",
        "_mock_return_value",
        "_mock_side_effect",
        "instance",
        "_new_parent",
        "__dict__",
        "__dict__",
        "__dict__",
        "__dict__",
        "__dict__",
        "spec",
        "spec_set",
        "__dict__",
        "__dict__",
        "__dict__",
        "__dict__",
        "__dict__",
        "__dict__",
        "__dict__",
        "__dict__",
        "__dict__",
        "mock",
        "_mock_parent",
        "mock",
        "_mock_new_parent",
        "mock",
        "_mock_name",
        "mock",
        "_mock_new_name",
        "_spec_class",
        "_spec_class",
        "_spec_class",
        "spec",
        "__dict__",
        "__dict__",
        "__dict__",
        "__dict__",
        "ret",
        "ret",
        "ret",
        "return_value",
        "return_value",
        "_mock_return_value",
        "__return_value_doc",
        "return_value",
        "called",
        "call_count",
        "call_args",
        "call_args_list",
        "mock_calls",
        "sig",
        "value",
        "sig",
        "_mock_side_effect",
        "sig",
        "side_effect",
        "side_effect",
        "called",
        "call_args",
        "call_count",
        "mock_calls",
        "call_args_list",
        "method_calls",
        "ret",
        "args",
        "obj",
        "obj",
        "result",
        "wraps",
        "wraps",
        "result",
        "name",
        "result",
        "name",
        "_name_list",
        "_parent",
        "last",
        "dot",
        "dot",
        "seen",
        "last",
        "dot",
        "dot",
        "_parent",
        "_name_list",
        "_first",
        "_name_list",
        "name",
        "name_string",
        "name_string",
        "spec_string",
        "spec_string",
        "spec_string",
        "spec_string",
        "extras",
        "from_type",
        "from_dict",
        "from_type",
        "from_dict",
        "msg",
        "original",
        "real",
        "value",
        "name",
        "name",
        "message",
        "expected_string",
        "call_args",
        "call_args",
        "actual_string",
        "expected",
        "msg",
        "msg",
        "all_calls",
        "not_found",
        "kall",
        "expected_string",
        "_type",
        "klass",
        "klass",
        "klass",
        "side_effect",
        "called",
        "call_args",
        "_new_name",
        "_new_parent",
        "seen",
        "skip_next_dot",
        "do_method_calls",
        "name",
        "this_mock_call",
        "dot",
        "dot",
        "skip_next_dot",
        "skip_next_dot",
        "_new_name",
        "this_method_call",
        "this_method_call",
        "do_method_calls",
        "name",
        "_new_parent",
        "_new_parent_id",
        "ret_val",
        "effect",
        "ret_val",
        "ret_val",
        "ret_val",
        "components",
        "import_path",
        "thing",
        "thing",
        "attribute_name",
        "getter",
        "attribute",
        "new_callable",
        "spec",
        "create",
        "has_local",
        "mocksignature",
        "spec_set",
        "autospec",
        "kwargs",
        "additional_patchers",
        "patcher",
        "patcher",
        "attribute_name",
        "patcher",
        "additional_patchers",
        "attr_value",
        "patcher",
        "extra_args",
        "entered_patchers",
        "arg",
        "patched",
        "patchings",
        "patched",
        "compat_co_firstlineno",
        "target",
        "name",
        "original",
        "local",
        "original",
        "original",
        "local",
        "spec",
        "spec_set",
        "autospec",
        "kwargs",
        "new_callable",
        "target",
        "original",
        "local",
        "inherit",
        "spec_set",
        "spec",
        "inherit",
        "Klass",
        "_kwargs",
        "Klass",
        "Klass",
        "_kwargs",
        "_kwargs",
        "_kwargs",
        "Klass",
        "return_value",
        "spec_set",
        "autospec",
        "new_attr",
        "new_attr",
        "temp_original",
        "is_local",
        "extra_args",
        "extra_args",
        "arg",
        "start",
        "stop",
        "target",
        "attribute",
        "getter",
        "getter",
        "getter",
        "getter",
        "items",
        "attribute",
        "patcher",
        "patcher",
        "attribute_name",
        "this_patcher",
        "this_patcher",
        "attribute_name",
        "getter",
        "attribute",
        "in_dict",
        "in_dict",
        "values",
        "clear",
        "_original",
        "attr_value",
        "decorator",
        "decorated",
        "values",
        "in_dict",
        "clear",
        "original",
        "original",
        "original",
        "key",
        "_original",
        "in_dict",
        "key",
        "in_dict",
        "original",
        "in_dict",
        "key",
        "start",
        "stop",
        "keys",
        "patch",
        "patch",
        "patch",
        "multiple",
        "patch",
        "TEST_PREFIX",
        "magic_methods",
        "numerics",
        "inplace",
        "right",
        "extra",
        "extra",
        "extra",
        "_non_defaults",
        "method",
        "_magics",
        "_all_magics",
        "_unsupported_magics",
        "_calculate_return_value",
        "_return_values",
        "ret_val",
        "ret_val",
        "_side_effect_methods",
        "method",
        "return_value",
        "return_calulator",
        "return_value",
        "return_value",
        "method",
        "return_value",
        "side_effector",
        "method",
        "side_effect",
        "these_magics",
        "these_magics",
        "remove_magics",
        "remove_magics",
        "these_magics",
        "_type",
        "name",
        "parent",
        "m",
        "entry",
        "parent",
        "m",
        "ANY",
        "message",
        "formatted_args",
        "args_string",
        "kwargs_string",
        "formatted_args",
        "name",
        "args",
        "kwargs",
        "_len",
        "name",
        "args",
        "kwargs",
        "first",
        "second",
        "name",
        "args",
        "kwargs",
        "args",
        "kwargs",
        "value",
        "name",
        "args",
        "kwargs",
        "name",
        "parent",
        "from_kall",
        "len_other",
        "self_name",
        "self_args",
        "self_kwargs",
        "self_name",
        "self_args",
        "self_kwargs",
        "other_name",
        "other_args",
        "other_kwargs",
        "other_name",
        "other_args",
        "other_kwargs",
        "value",
        "other_args",
        "other_kwargs",
        "other_name",
        "other_args",
        "other_kwargs",
        "other_args",
        "other_kwargs",
        "first",
        "second",
        "other_name",
        "other_args",
        "other_kwargs",
        "other_args",
        "other_kwargs",
        "other_args",
        "other_kwargs",
        "name",
        "name",
        "name",
        "name",
        "name",
        "args",
        "kwargs",
        "name",
        "args",
        "kwargs",
        "name",
        "name",
        "name",
        "vals",
        "thing",
        "thing",
        "call",
        "spec",
        "is_type",
        "_kwargs",
        "_kwargs",
        "_kwargs",
        "Klass",
        "_kwargs",
        "Klass",
        "Klass",
        "_new_name",
        "_new_name",
        "mock",
        "mock",
        "_name",
        "mock",
        "return_value",
        "original",
        "kwargs",
        "kwargs",
        "entry",
        "parent",
        "parent",
        "entry",
        "skipfirst",
        "spec",
        "result",
        "spec",
        "ids",
        "spec_set",
        "parent",
        "instance",
        "name",
        "FunctionTypes",
        "FunctionAttributes"
    ],
    "comments": [
        "mock.py",
        "Test tools for mocking and patching.",
        "Copyright (C) 2007-2012 Michael Foord & the mock team",
        "E-mail: fuzzyman AT voidspace DOT org DOT uk",
        "mock 0.8.0",
        "http://www.voidspace.org.uk/python/mock/",
        "Released subject to the BSD License",
        "Please see http://www.voidspace.org.uk/python/license.shtml",
        "Scripts maintained at http://www.voidspace.org.uk/python/index.shtml",
        "Comments, suggestions and bug reports welcome.",
        "for alternative platforms that",
        "may not have inspect",
        "Python 2.4 compatibility",
        "Python 3",
        "Python 3",
        "Python 2.4 compatibility",
        "jython",
        "Python 2.X",
        "Needed to work around Python 3 bug where use of \"super\" interferes with",
        "defining __class__ as a descriptor",
        "can't use isinstance on Mock objects because they override __class__",
        "The base class for all mocks is NonCallableMock",
        "getsignature and mocksignature heavily \"inspired\" by",
        "the decorator module: http://pypi.python.org/pypi/decorator/",
        "by Michele Simionato",
        "will have a self arg",
        "instance methods need to lose the self argument",
        "for classes where instance is True we end up here too",
        "C function / method, possibly inherited object().__init__",
        "instance methods and classmethods need to lose the self argument",
        "this condition and the above one are never both True - why?",
        "can't use self because \"self\" is common as an argument name",
        "unfortunately even not in the first place",
        "funcopy.__dict__.update(func.__dict__)",
        "checks for list or tuples",
        "XXXX badly named!",
        "already an instance",
        "uses __bases__ instead of __mro__ so that we work with old style classes",
        "creates a function with signature (*args, **kwargs) that delegates to a",
        "mock. It still does signature checking by calling a lambda with the same",
        "signature as the original. This is effectively mocksignature2.",
        "was a C function (e.g. object().__init__ ) that can't be mocked",
        "can't use isinstance with mocks",
        "Without this help(mock) raises an exception",
        "setting a mock (value) as a child or return value of itself",
        "should not modify the mock",
        "every instance has its own class",
        "so we can create magic methods on the",
        "class without stomping on other mocks",
        "we sort on the number of dots so that",
        "attributes are set before we set attributes on",
        "attributes",
        "XXXX should we get the attribute without triggering code",
        "execution?",
        "use ids here so as not to call __hash__ on the mocks",
        "property setters go through here",
        "only set _new_name and not name so that mock_calls is tracked",
        "but not method calls",
        "for magic methods that are still MagicProxy objects and",
        "not set on the instance itself",
        "XXXX backwards compatibility",
        "but this will blow up on first call - so maybe we should fail early?",
        "stub method that can be replaced with one with a specific signature",
        "can't use self in-case a function / method we are mocking uses self",
        "in the signature",
        "use ids here so as not to call __hash__ on the mocks",
        "XXXX horrible",
        "don't use a with here (backwards compatability with Python 2.4)",
        "can't use try...except...finally because of Python 2.4",
        "compatibility",
        "the patcher may have been started, but an exception",
        "raised whilst entering one of its additional_patchers",
        "re-raise the exception",
        "not in Python 3",
        "set spec to the object we are replacing",
        "If we're patching out a class and there is a spec",
        "add a name to mocks",
        "we can only tell if the instance should be callable if the",
        "spec is not a list",
        "spec is ignored, new *must* be default, spec_set is treated",
        "as a boolean. Should we check spec is not None and that spec_set",
        "is a bool? mocksignature should also not be used. Should we",
        "check this?",
        "can't set keyword args when we aren't creating the mock",
        "XXXX If new is a Mock we could call new.configure_mock(**kwargs)",
        "needed for proxy objects like django settings",
        "need to wrap in a list for python 3, where items is a view",
        "support any argument supported by dict(...) constructor",
        "dict like object with no copy method",
        "must support iteration over keys",
        "dict like object with no update method",
        "not including __prepare__, __instancecheck__, __subclasscheck__",
        "(as they are metaclass methods)",
        "__del__ is not supported at all as it causes problems if it exists",
        "if ret_val was already an iterator, then calling iter on it should",
        "return the iterator unchanged",
        "XXXX why do we return AttributeError here?",
        "set it as a side_effect instead?",
        "remove unneeded magic methods",
        "don't overwrite existing attributes if called a second time",
        "len 2",
        "could be (name, args) or (name, kwargs) or (args, kwargs)",
        "this order is important for ANY to work!",
        "can't pass a list instance to the mock constructor as it will be",
        "interpreted as a list of strings",
        "None we mock with a normal mock without a spec",
        "descriptors don't have a spec",
        "because we don't know what type they return",
        "for a top level object no _new_name should be set",
        "should only happen at the top level because we don't",
        "recurse for functions",
        "XXXX could give a name to the return_value mock?",
        "MagicMock already does the useful magic methods for us",
        "allow a mock to actually be a function from mocksignature",
        "XXXX do we need a better way of getting attributes without",
        "triggering code execution (?) Probably not - we need the actual",
        "object to mock it so we would rather trigger a property than mock",
        "the property descriptor. Likewise we want to mock out dynamically",
        "provided attributes.",
        "XXXX what about attributes that raise exceptions on being fetched",
        "we could be resilient against it, or catch and propagate the",
        "exception when the attribute is fetched from the mock",
        "so functions created with mocksignature become instance attributes,",
        "mock. Adding to _mock_children may be unnecessary where we are also",
        "setting as an instance attribute?",
        "instance attribute - shouldn't skip",
        "can't use type because of old style classes",
        "old style class: can't have descriptors anyway",
        "shouldn't get here unless function is a dynamically provided attribute",
        "XXXX untested behaviour",
        "in Python 2, _sre.SRE_Pattern objects have no __class__",
        "python function",
        "instance method",
        "unbound method"
    ],
    "docstrings": [
        "\"\"\"Given an object, return True if the object is callable.\n    For classes, return True if instances would be callable.\"\"\"",
        "\"\"\"def %s(*args, **kwargs):\n    checksig(*args, **kwargs)\n    return mock(*args, **kwargs)\"\"\"",
        "\"\"\"\n    mocksignature(func, mock=None, skipfirst=False)\n\n    Create a new function with the same signature as `func` that delegates\n    to `mock`. If `skipfirst` is True the first argument is skipped, useful\n    for methods where `self` needs to be omitted from the new function.\n\n    If you don't pass in a `mock` then one will be created for you.\n\n    The mock is set as the `mock` attribute of the returned function for easy\n    access.\n\n    Functions returned by `mocksignature` have many of the same attributes\n    and assert methods as a mock object.\n\n    `mocksignature` can also be used with classes. It copies the signature of\n    the `__init__` method.\n\n    When used with callable objects (instances) it copies the signature of the\n    `__call__` method.\n    \"\"\"",
        "\"\"\"Access attributes to return a named object, usable as a sentinel.\"\"\"",
        "\"\"\"A non-callable version of `Mock`\"\"\"",
        "\"\"\"\n        Attach a mock as an attribute of this one, replacing its name and\n        parent. Calls to the attached mock will be recorded in the\n        `method_calls` and `mock_calls` attributes of this one.\"\"\"",
        "\"\"\"Add a spec to a mock. `spec` can either be an object or a\n        list of strings. Only attributes on the `spec` can be fetched as\n        attributes from the mock.\n\n        If `spec_set` is True then only attributes on the spec can be set.\"\"\"",
        "\"\"\"Set attributes on the mock through keyword arguments.\n\n        Attributes plus return values and side effects can be set on child\n        mocks using standard dot notation and unpacking a dictionary in the\n        method call:\n\n        >>> attrs = {'method.return_value': 3, 'other.side_effect': KeyError}\n        >>> mock.configure_mock(**attrs)\"\"\"",
        "\"\"\"Filter the output of `dir(mock)` to only useful members.\n        XXXX\n        \"\"\"",
        "\"\"\"assert that the mock was called with the specified arguments.\n\n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"",
        "\"\"\"assert that the mock was called exactly once and with the specified\n        arguments.\"\"\"",
        "\"\"\"assert the mock has been called with the specified calls.\n        The `mock_calls` list is checked for the calls.\n\n        If `any_order` is False (the default) then the calls must be\n        sequential. There can be extra calls before or after the\n        specified calls.\n\n        If `any_order` is True then the calls can be in any order, but\n        they must all appear in `mock_calls`.\"\"\"",
        "\"\"\"assert the mock has been called with the specified arguments.\n\n        The assert passes if the mock has *ever* been called, unlike\n        `assert_called_with` and `assert_called_once_with` that only pass if\n        the call is the most recent one.\"\"\"",
        "\"\"\"Create the child mocks for attributes and return value.\n        By default child mocks will be the same type as the parent.\n        Subclasses of Mock may want to override this to customize the way\n        child mocks are made.\n\n        For non-callable mocks the callable variant will be used (rather than\n        any custom subclass).\"\"\"",
        "\"\"\"\n    Create a new `Mock` object. `Mock` takes several optional arguments\n    that specify the behaviour of the Mock object:\n\n    * `spec`: This can be either a list of strings or an existing object (a\n      class or instance) that acts as the specification for the mock object. If\n      you pass in an object then a list of strings is formed by calling dir on\n      the object (excluding unsupported magic attributes and methods).\n      Accessing any attribute not in this list will raise an `AttributeError`.\n\n      If `spec` is an object (rather than a list of strings) then\n      `mock.__class__` returns the class of the spec object. This allows mocks\n      to pass `isinstance` tests.\n\n    * `spec_set`: A stricter variant of `spec`. If used, attempting to *set*\n      or get an attribute on the mock that isn't on the object passed as\n      `spec_set` will raise an `AttributeError`.\n\n    * `side_effect`: A function to be called whenever the Mock is called. See\n      the `side_effect` attribute. Useful for raising exceptions or\n      dynamically changing return values. The function is called with the same\n      arguments as the mock, and unless it returns `DEFAULT`, the return\n      value of this function is used as the return value.\n\n      Alternatively `side_effect` can be an exception class or instance. In\n      this case the exception will be raised when the mock is called.\n\n      If `side_effect` is an iterable then each call to the mock will return\n      the next value from the iterable.\n\n    * `return_value`: The value returned when the mock is called. By default\n      this is a new Mock (created on first access). See the\n      `return_value` attribute.\n\n    * `wraps`: Item for the mock object to wrap. If `wraps` is not None\n      then calling the Mock will pass the call through to the wrapped object\n      (returning the real result and ignoring `return_value`). Attribute\n      access on the mock will return a Mock object that wraps the corresponding\n      attribute of the wrapped object (so attempting to access an attribute\n      that doesn't exist will raise an `AttributeError`).\n\n      If the mock has an explicit `return_value` set then calls are not passed\n      to the wrapped object and the `return_value` is returned instead.\n\n    * `name`: If the mock has a name then it will be used in the repr of the\n      mock. This can be useful for debugging. The name is propagated to child\n      mocks.\n\n    Mocks can also be called with arbitrary keyword arguments. These will be\n    used to set attributes on the mock after it is created.\n    \"\"\"",
        "\"\"\"Perform the patch.\"\"\"",
        "\"\"\"Undo the patch.\"\"\"",
        "\"\"\"\n    patch.object(target, attribute, new=DEFAULT, spec=None, create=False,\n                 mocksignature=False, spec_set=None, autospec=False,\n                 new_callable=None, **kwargs)\n\n    patch the named member (`attribute`) on an object (`target`) with a mock\n    object.\n\n    `patch.object` can be used as a decorator, class decorator or a context\n    manager. Arguments `new`, `spec`, `create`, `mocksignature`, `spec_set`,\n    `autospec` and `new_callable` have the same meaning as for `patch`. Like\n    `patch`, `patch.object` takes arbitrary keyword arguments for configuring\n    the mock object it creates.\n\n    When used as a class decorator `patch.object` honours `patch.TEST_PREFIX`\n    for choosing which methods to wrap.\n    \"\"\"",
        "\"\"\"Perform multiple patches in a single call. It takes the object to be\n    patched (either as an object or a string to fetch the object by importing)\n    and keyword arguments for the patches::\n\n        with patch.multiple(settings, FIRST_PATCH='one', SECOND_PATCH='two'):\n            ...\n\n    Use `DEFAULT` as the value if you want `patch.multiple` to create\n    mocks for you. In this case the created mocks are passed into a decorated\n    function by keyword, and a dictionary is returned when `patch.multiple` is\n    used as a context manager.\n\n    `patch.multiple` can be used as a decorator, class decorator or a context\n    manager. The arguments `spec`, `spec_set`, `create`, `mocksignature`,\n    `autospec` and `new_callable` have the same meaning as for `patch`. These\n    arguments will be applied to *all* patches done by `patch.multiple`.\n\n    When used as a class decorator `patch.multiple` honours `patch.TEST_PREFIX`\n    for choosing which methods to wrap.\n    \"\"\"",
        "\"\"\"\n    `patch` acts as a function decorator, class decorator or a context\n    manager. Inside the body of the function or with statement, the `target`\n    (specified in the form `'package.module.ClassName'`) is patched\n    with a `new` object. When the function/with statement exits the patch is\n    undone.\n\n    The `target` is imported and the specified attribute patched with the new\n    object, so it must be importable from the environment you are calling the\n    decorator from. The target is imported when the decorated function is\n    executed, not at decoration time.\n\n    If `new` is omitted, then a new `MagicMock` is created and passed in as an\n    extra argument to the decorated function.\n\n    The `spec` and `spec_set` keyword arguments are passed to the `MagicMock`\n    if patch is creating one for you.\n\n    In addition you can pass `spec=True` or `spec_set=True`, which causes\n    patch to pass in the object being mocked as the spec/spec_set object.\n\n    `new_callable` allows you to specify a different class, or callable object,\n    that will be called to create the `new` object. By default `MagicMock` is\n    used.\n\n    A more powerful form of `spec` is `autospec`. If you set `autospec=True`\n    then the mock with be created with a spec from the object being replaced.\n    All attributes of the mock will also have the spec of the corresponding\n    attribute of the object being replaced. Methods and functions being mocked\n    will have their arguments checked and will raise a `TypeError` if they are\n    called with the wrong signature (similar to `mocksignature`). For mocks\n    replacing a class, their return value (the 'instance') will have the same\n    spec as the class.\n\n    Instead of `autospec=True` you can pass `autospec=some_object` to use an\n    arbitrary object as the spec instead of the one being replaced.\n\n    If `mocksignature` is True then the patch will be done with a function\n    created by mocking the one being replaced. If the object being replaced is\n    a class then the signature of `__init__` will be copied. If the object\n    being replaced is a callable object then the signature of `__call__` will\n    be copied.\n\n    By default `patch` will fail to replace attributes that don't exist. If\n    you pass in `create=True`, and the attribute doesn't exist, patch will\n    create the attribute for you when the patched function is called, and\n    delete it again afterwards. This is useful for writing tests against\n    attributes that your production code creates at runtime. It is off by by\n    default because it can be dangerous. With it switched on you can write\n    passing tests against APIs that don't actually exist!\n\n    Patch can be used as a `TestCase` class decorator. It works by\n    decorating each test method in the class. This reduces the boilerplate\n    code when your test methods share a common patchings set. `patch` finds\n    tests by looking for method names that start with `patch.TEST_PREFIX`.\n    By default this is `test`, which matches the way `unittest` finds tests.\n    You can specify an alternative prefix by setting `patch.TEST_PREFIX`.\n\n    Patch can be used as a context manager, with the with statement. Here the\n    patching applies to the indented block after the with statement. If you\n    use \"as\" then the patched object will be bound to the name after the\n    \"as\"; very useful if `patch` is creating a mock object for you.\n\n    `patch` takes arbitrary keyword arguments. These will be passed to\n    the `Mock` (or `new_callable`) on construction.\n\n    `patch.dict(...)`, `patch.multiple(...)` and `patch.object(...)` are\n    available for alternate use-cases.\n    \"\"\"",
        "\"\"\"\n    Patch a dictionary, or dictionary like object, and restore the dictionary\n    to its original state after the test.\n\n    `in_dict` can be a dictionary or a mapping like container. If it is a\n    mapping then it must at least support getting, setting and deleting items\n    plus iterating over keys.\n\n    `in_dict` can also be a string specifying the name of the dictionary, which\n    will then be fetched by importing it.\n\n    `values` can be a dictionary of values to set in the dictionary. `values`\n    can also be an iterable of `(key, value)` pairs.\n\n    If `clear` is True then the dictionary will be cleared before the new\n    values are set.\n\n    `patch.dict` can also be called with arbitrary keyword arguments to set\n    values in the dictionary::\n\n        with patch.dict('sys.modules', mymodule=Mock(), other_module=Mock()):\n            ...\n\n    `patch.dict` can be used as a context manager, decorator or class\n    decorator. When used as a class decorator `patch.dict` honours\n    `patch.TEST_PREFIX` for choosing which methods to wrap.\n    \"\"\"",
        "\"\"\"Patch the dict.\"\"\"",
        "\"\"\"Unpatch the dict.\"\"\"",
        "\"\"\"A version of `MagicMock` that isn't callable.\"\"\"",
        "\"\"\"Add a spec to a mock. `spec` can either be an object or a\n        list of strings. Only attributes on the `spec` can be fetched as\n        attributes from the mock.\n\n        If `spec_set` is True then only attributes on the spec can be set.\"\"\"",
        "\"\"\"\n    MagicMock is a subclass of Mock with default implementations\n    of most of the magic methods. You can use MagicMock without having to\n    configure the magic methods yourself.\n\n    If you use the `spec` or `spec_set` arguments then *only* magic\n    methods that exist in the spec will be created.\n\n    Attributes and the return value of a `MagicMock` will also be `MagicMocks`.\n    \"\"\"",
        "\"\"\"Add a spec to a mock. `spec` can either be an object or a\n        list of strings. Only attributes on the `spec` can be fetched as\n        attributes from the mock.\n\n        If `spec_set` is True then only attributes on the spec can be set.\"\"\"",
        "\"\"\"\n    A tuple for holding the results of a call to a mock, either in the form\n    `(args, kwargs)` or `(name, args, kwargs)`.\n\n    If args or kwargs are empty then a call tuple will compare equal to\n    a tuple without those values. This makes comparisons less verbose::\n\n        _Call(('name', (), {})) == ('name',)\n        _Call(('name', (1,), {})) == ('name', (1,))\n        _Call(((), {'a': 'b'})) == ({'a': 'b'},)\n\n    The `_Call` object provides a useful shortcut for comparing with call::\n\n        _Call(((1, 2), {'a': 3})) == call(1, 2, a=3)\n        _Call(('foo', (1, 2), {'a': 3})) == call.foo(1, 2, a=3)\n\n    If the _Call has no name then it will match any name.\n    \"\"\"",
        "\"\"\"For a call object that represents multiple calls, `call_list`\n        returns a list of all the intermediate calls as well as the\n        final call.\"\"\"",
        "\"\"\"Create a mock object using another object as a spec. Attributes on the\n    mock will use the corresponding attribute on the `spec` object as their\n    spec.\n\n    Functions or methods being mocked will have their arguments checked in a\n    similar way to `mocksignature` to check that they are called with the\n    correct signature.\n\n    If `spec_set` is True then attempting to set attributes that don't exist\n    on the spec object will raise an `AttributeError`.\n\n    If a class is used as a spec then the return value of the mock (the\n    instance of the class) will have the same spec. You can use a class as the\n    spec for an instance object by passing `instance=True`. The returned mock\n    will only be callable if instances of the mock are callable.\n\n    `create_autospec` also takes arbitrary keyword arguments that are passed to\n    the constructor of the created mock.\"\"\"",
        "*plus* their underlying mock exists in _mock_children of the parent"
    ],
    "functions": [
        "wraps",
        "inner",
        "next",
        "_isidentifier",
        "_is_instance_mock",
        "_is_exception",
        "_getsignature",
        "_getsignature2",
        "_check_signature",
        "_copy_func_details",
        "_callable",
        "_is_list",
        "_instance_callable",
        "_set_signature",
        "mocksignature",
        "_setup_func",
        "assert_called_with",
        "assert_called_once_with",
        "assert_has_calls",
        "assert_any_call",
        "reset_mock",
        "_is_magic",
        "__repr__",
        "__getattr__",
        "_copy",
        "_mock_signature_property",
        "_get",
        "_set",
        "__contains__",
        "__repr__",
        "_check_and_set_parent",
        "__new__",
        "attach_mock",
        "mock_add_spec",
        "_mock_add_spec",
        "__get_return_value",
        "__set_return_value",
        "__class__",
        "__get_side_effect",
        "__set_side_effect",
        "reset_mock",
        "configure_mock",
        "__getattr__",
        "__repr__",
        "__dir__",
        "__setattr__",
        "__delattr__",
        "_format_mock_call_signature",
        "_format_mock_failure_message",
        "assert_called_with",
        "assert_called_once_with",
        "assert_has_calls",
        "assert_any_call",
        "_get_child_mock",
        "_try_iter",
        "_mock_check_sig",
        "__call__",
        "_mock_call",
        "_dot_lookup",
        "_importer",
        "_is_started",
        "copy",
        "__call__",
        "decorate_class",
        "decorate_callable",
        "patched",
        "get_original",
        "__enter__",
        "__exit__",
        "_get_target",
        "_patch_object",
        "_patch_multiple",
        "patch",
        "__call__",
        "_inner",
        "decorate_class",
        "__enter__",
        "_patch_dict",
        "_unpatch_dict",
        "__exit__",
        "_clear_dict",
        "_get_method",
        "method",
        "_get_eq",
        "__eq__",
        "_get_ne",
        "__ne__",
        "_get_iter",
        "__iter__",
        "_set_return_value",
        "_mock_set_magics",
        "mock_add_spec",
        "mock_add_spec",
        "__call__",
        "create_mock",
        "__get__",
        "__eq__",
        "__ne__",
        "__repr__",
        "_format_call_signature",
        "__new__",
        "__eq__",
        "__ne__",
        "__call__",
        "__getattr__",
        "__repr__",
        "call_list",
        "create_autospec",
        "_must_skip",
        "_get_class"
    ],
    "classes": [
        "_slotted",
        "_SentinelObject",
        "_Sentinel",
        "OldStyleClass",
        "_CallList",
        "Base",
        "NonCallableMock",
        "CallableMixin",
        "Mock",
        "_patch",
        "_patch_dict",
        "MagicMixin",
        "NonCallableMagicMock",
        "MagicMock",
        "MagicProxy",
        "_ANY",
        "_Call",
        "_SpecState"
    ]
}