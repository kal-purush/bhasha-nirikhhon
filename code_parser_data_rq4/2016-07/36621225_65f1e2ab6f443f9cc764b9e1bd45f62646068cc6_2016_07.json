{
    "identifiers": [
        "jsn",
        "fruits",
        "people",
        "pets",
        "simpleArray",
        "mix",
        "asEnumerable",
        "Range",
        "Repeat",
        "describe",
        "it",
        "Range",
        "iterable",
        "iterator",
        "iterator",
        "iterator",
        "iterator",
        "iterable",
        "iterator",
        "iterator",
        "iterator",
        "it",
        "Repeat",
        "iterable",
        "iterator",
        "iterator",
        "iterator",
        "iterator",
        "iterator",
        "iterable",
        "iterator",
        "iterator",
        "iterator",
        "iterator"
    ],
    "literals": [
        "\"./data\"",
        "\"chai\"",
        "\"../lib/linq\"",
        "'Reentrancy -'",
        "'Range'",
        "'Repeat'"
    ],
    "variables": [
        "iterable",
        "iterator",
        "iterable",
        "iterator"
    ],
    "comments": [
        "",
        "",
        "Licensed under the Apache License, Version 2.0  ( the  \"License\" );  you may",
        "not use this file except in compliance with the License.  You may  obtain  a",
        "copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required  by  applicable  law  or  agreed  to  in  writing,  software",
        "distributed under the License is distributed on an \"AS  IS\"  BASIS,  WITHOUT",
        "WARRANTIES OR CONDITIONS  OF  ANY  KIND, either express or implied.  See the",
        "License for the specific  language  governing  permissions  and  limitations",
        "under the License.",
        "it('DefaultIfEmpty() - Not empty', function () {\n        var iterable = Range(0, 5).DefaultIfEmpty(0);\n        var iterator = iterable[Symbol.iterator]()\n        assert.equal(iterator.next().value, 0);\n        assert.equal(iterator.next().value, 1);\n        assert.equal(iterator.next().value, 2);\n        assert.equal(iterator.next().value, 3);\n        assert.equal(iterator.next().value, 4);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('Select()', function () {\n        let array = asEnumerable(jsn).Select((a) => a.name).ToArray();\n        assert.equal(array.length, 4);\n        assert.equal('d', array[0]);\n        assert.equal('c', array[1]);\n        assert.equal('b', array[2]);\n        assert.equal('a', array[3]);\n    });\n\n\n    it('Distinct() - Key', function () {\n        let test = [\n            { id: 1, \"name\": \"d\" },\n            { id: 1, \"name\": \"c\" },\n            { id: 3, \"name\": \"b\" },\n            { id: 4, \"name\": \"a\" }\n        ];\n        let iterable = asEnumerable(test).Distinct(o => o.id);\n        let iterator = iterable[Symbol.iterator]()\n        assert.equal(\"d\", (<any>iterator.next().value).name);\n        assert.equal(\"b\", (<any>iterator.next().value).name);\n        assert.equal(\"a\", (<any>iterator.next().value).name);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('Where()', function () {\n        let iterable = asEnumerable(simpleArray).Where(a => a % 2 == 1);\n        let iterator = iterable[Symbol.iterator]()\n        assert.equal(1, iterator.next().value);\n        assert.equal(3, iterator.next().value);\n        assert.equal(5, iterator.next().value);\n        assert.equal(7, iterator.next().value);\n        assert.equal(9, iterator.next().value);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('Skip()', function () {\n        let iterable = asEnumerable(simpleArray).Skip(7);\n        let iterator = iterable[Symbol.iterator]()\n        assert.equal(8, iterator.next().value);\n        assert.equal(9, iterator.next().value);\n        assert.equal(10, iterator.next().value);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('Take()', function () {\n        var iterable = asEnumerable(simpleArray).Take(3);\n        var iterator = iterable[Symbol.iterator]()\n        assert.equal(1, iterator.next().value);\n        assert.equal(2, iterator.next().value);\n        assert.equal(3, iterator.next().value);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('Except()', function () {\n        var iterable = asEnumerable(simpleArray).Except([0, 2, 4, 6, 11]);\n        var iterator = iterable[Symbol.iterator]()\n        assert.equal(1, iterator.next().value);\n        assert.equal(3, iterator.next().value);\n        assert.equal(5, iterator.next().value);\n        assert.equal(7, iterator.next().value);\n        assert.equal(8, iterator.next().value);\n        assert.equal(9, iterator.next().value);\n        assert.equal(10, iterator.next().value);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('Intersect()', function () {\n        var iterable = asEnumerable(simpleArray).Intersect([1, 3, 5, 11, 23, 44]);\n        var iterator = iterable[Symbol.iterator]()\n        assert.equal(1, iterator.next().value);\n        assert.equal(3, iterator.next().value);\n        assert.equal(5, iterator.next().value);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('OfType()', function () {\n\n        var iterable = asEnumerable(mix).OfType(Object);\n        var iterator = iterable[Symbol.iterator]();\n        assert.equal(iterator.next().value, 1);\n        assert.equal(iterator.next().value, mix[3]);\n        assert.equal(iterator.next().value, mix[4]);\n        assert.equal(iterator.next().value, mix[5]);\n        assert.equal(iterator.next().value, mix[10]);\n        assert.equal(iterator.next().value, mix[11]);\n        assert.equal(iterator.next().value, mix[12]);\n        assert.equal(iterator.next().value, mix[13]);\n        assert.equal(iterator.next().value, mix[14]);\n        assert.equal(iterator.next().value, mix[15]);\n        assert.equal(iterator.next().value, mix[17]);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('Union()', function () {\n        var iterable = asEnumerable([0, 1, 2, 3, 4, 5, 6, 7]).Union([5, 6, 7, 8, 9]);\n        var iterator = iterable[Symbol.iterator]()\n        assert.equal(0, iterator.next().value);\n        assert.equal(1, iterator.next().value);\n        assert.equal(2, iterator.next().value);\n        assert.equal(3, iterator.next().value);\n        assert.equal(4, iterator.next().value);\n        assert.equal(5, iterator.next().value);\n        assert.equal(6, iterator.next().value);\n        assert.equal(7, iterator.next().value);\n        assert.equal(8, iterator.next().value);\n        assert.equal(9, iterator.next().value);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('Join()', function () {\n        var iterable =\n            asEnumerable(people).Join(pets,\n                person => person,\n                pet => pet.Owner,\n                (person, pet) => {\n                    return person.Name + \" - \" + pet.Name;\n                });\n        var iterator = iterable[Symbol.iterator]()\n        assert.equal(\"Hedlund, Magnus - Daisy\", iterator.next().value);\n        assert.equal(\"Adams, Terry - Barley\", iterator.next().value);\n        assert.equal(\"Adams, Terry - Boots\", iterator.next().value);\n        assert.equal(\"Weiss, Charlotte - Whiskers\", iterator.next().value);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('GroupJoin()', function () {\n        var iterable = asEnumerable(people)\n            .GroupJoin(pets,\n            person => person,\n            pet => pet.Owner,\n            (person, petCollection) => {\n                return {\n                    Owner: person.Name,\n                    Pets: asEnumerable(petCollection)\n                        .Select(pet => pet.Name)\n                        .ToArray()\n                };\n            });\n        var iterator = iterable[Symbol.iterator]();\n        var result = iterator.next().value;\n        assert.isTrue(Array.isArray(result.Pets))\n        assert.equal(\"Hedlund, Magnus\", result.Owner);\n        assert.equal(1, result.Pets.length);\n        assert.equal(\"Daisy\", result.Pets[0]);\n        result = iterator.next().value;\n        assert.equal(\"Adams, Terry\", result.Owner);\n        assert.equal(2, result.Pets.length);\n        assert.equal(\"Barley\", result.Pets[0]);\n        assert.equal(\"Boots\", result.Pets[1]);\n        result = iterator.next().value;\n        assert.equal(\"Weiss, Charlotte\", result.Owner);\n        assert.equal(1, result.Pets.length);\n        assert.equal(\"Whiskers\", result.Pets[0]);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('GroupBy()', function () {\n        var iterable: any = asEnumerable(pets).GroupBy(pet => pet.Age);\n\n        var iterator = iterable[Symbol.iterator]();\n        var result = iterator.next().value;\n        assert.equal(8, result.key);\n        assert.equal(1, result.length);\n        result = iterator.next().value;\n        assert.equal(4, result.key);\n        assert.equal(2, result.length);\n        result = iterator.next().value;\n        assert.equal(1, result.key);\n        assert.equal(1, result.length);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('SelectMany()', function () {\n\n        var iterable = asEnumerable(jsn).SelectMany(a => a.ids);\n        var iterator = iterable[Symbol.iterator]()\n        assert.equal(11, iterator.next().value);\n        assert.equal(21, iterator.next().value);\n        assert.equal(31, iterator.next().value);\n        assert.equal(12, iterator.next().value);\n        assert.equal(22, iterator.next().value);\n        assert.equal(32, iterator.next().value);\n        assert.equal(13, iterator.next().value);\n        assert.equal(23, iterator.next().value);\n        assert.equal(33, iterator.next().value);\n        assert.equal(14, iterator.next().value);\n        assert.equal(24, iterator.next().value);\n        assert.equal(34, iterator.next().value);\n        assert.isTrue(iterator.next().done);\n    });\n\n\n    it('Concat()', function () {\n        var iterable = asEnumerable([0, 1, 2]).Concat([3, 4]);\n        var iterator = iterable[Symbol.iterator]()\n\n        assert.equal(0, iterator.next().value);\n        assert.equal(1, iterator.next().value);\n        assert.equal(2, iterator.next().value);\n        assert.equal(3, iterator.next().value);\n        assert.equal(4, iterator.next().value);\n        assert.isTrue(iterator.next().done);\n    });",
        "Copyright (c) ENikS.  All rights reserved."
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}