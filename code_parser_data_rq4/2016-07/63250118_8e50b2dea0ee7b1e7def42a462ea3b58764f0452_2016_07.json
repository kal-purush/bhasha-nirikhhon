{
    "identifiers": [
        "enums",
        "javax",
        "swing",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "io",
        "RandomAccessFile",
        "java",
        "nio",
        "channels",
        "FileLock",
        "java",
        "nio",
        "file",
        "SingleInstanceChecker",
        "INSTANCE",
        "POLLINTERVAL",
        "LOCKFILE",
        "DETECTFILE",
        "hasBeenUsedAlready",
        "watchService",
        "randomAccessFileForLock",
        "fileLock",
        "codeToRunIfOtherInstanceTriesToStart",
        "executeOnAWTEventDispatchThread",
        "hasBeenUsedAlready",
        "hasBeenUsedAlready",
        "ret",
        "canLockFileBeCreatedAndLocked",
        "codeToRunIfOtherInstanceTriesToStart",
        "ret",
        "installOtherInstanceLaunchAttemptWatcher",
        "codeToRunIfOtherInstanceTriesToStart",
        "executeOnAWTEventDispatchThread",
        "createAndDeleteOtherInstanceWatcherTriggerFile",
        "optionallyInstallShutdownHookThatCleansEverythingUp",
        "ret",
        "randomAccessFileForDetection",
        "DETECTFILE",
        "randomAccessFileForDetection",
        "close",
        "Files",
        "deleteIfExists",
        "DETECTFILE",
        "toPath",
        "e",
        "e",
        "printStackTrace",
        "randomAccessFileForLock",
        "LOCKFILE",
        "fileLock",
        "randomAccessFileForLock",
        "getChannel",
        "tryLock",
        "fileLock",
        "e",
        "codeToRunIfOtherInstanceTriesToStart",
        "executeOnAWTEventDispatchThread",
        "watchService",
        "FileSystems",
        "getDefault",
        "newWatchService",
        "e",
        "e",
        "printStackTrace",
        "appFolder",
        "getAbsoluteFile",
        "appFolderWatchable",
        "appFolder",
        "toPath",
        "appFolderWatchable",
        "register",
        "watchService",
        "StandardWatchEventKinds",
        "ENTRY_DELETE",
        "e",
        "e",
        "printStackTrace",
        "t",
        "watchForDirectoryChangesOnExtraThread",
        "codeToRunIfOtherInstanceTriesToStart",
        "executeOnAWTEventDispatchThread",
        "t",
        "setDaemon",
        "t",
        "setName",
        "t",
        "start",
        "fileLock",
        "randomAccessFileForLock",
        "watchService",
        "shutdownHookThread",
        "fileLock",
        "fileLock",
        "release",
        "randomAccessFileForLock",
        "randomAccessFileForLock",
        "close",
        "Files",
        "deleteIfExists",
        "LOCKFILE",
        "toPath",
        "ignore",
        "watchService",
        "watchService",
        "close",
        "e",
        "e",
        "printStackTrace",
        "Runtime",
        "getRuntime",
        "addShutdownHook",
        "shutdownHookThread",
        "codeToRunIfOtherInstanceTriesToStart",
        "executeOnAWTEventDispatchThread",
        "sleep",
        "POLLINTERVAL",
        "e",
        "e",
        "printStackTrace",
        "wk",
        "wk",
        "watchService",
        "poll",
        "e",
        "e",
        "printStackTrace",
        "wk",
        "wk",
        "isValid",
        "we",
        "wk",
        "pollEvents",
        "kind",
        "we",
        "kind",
        "kind",
        "StandardWatchEventKinds",
        "OVERFLOW",
        "err",
        "watchEvent",
        "we",
        "file",
        "watchEvent",
        "context",
        "toFile",
        "file",
        "equals",
        "DETECTFILE",
        "executeOnAWTEventDispatchThread",
        "SwingUtilities",
        "isEventDispatchThread",
        "codeToRunIfOtherInstanceTriesToStart",
        "run",
        "SwingUtilities",
        "invokeLater",
        "codeToRunIfOtherInstanceTriesToStart",
        "err",
        "file",
        "wk",
        "reset"
    ],
    "literals": [
        "\"SINGLE_INSTANCE_LOCKFILE\"",
        "\"EXTRA_INSTANCE_DETECTFILE\"",
        "\"This class/method can only be used once, which kinda makes sense if you think about it.\"",
        "\"rw\"",
        "\"rw\"",
        "\"\"",
        "\"directory content change watcher\"",
        "\"OVERFLOW of directory change events!\"",
        "\"THIS IS THE FILE THAT WAS DELETED: \""
    ],
    "variables": [
        "wk"
    ],
    "comments": [
        "HAHA! The CONFUSION!",
        "Only if this is the only instance, it makes sense to install a watcher for additional instances.",
        "Only if this is NOT the only instance, it makes sense to create&delete the trigger file that will effect notification of the other instance.",
        "",
        "Regarding \"codeToRunIfOtherInstanceTriesToStart != null\":",
        "While creation/deletion of the file concerns THE OTHER instance of the program,",
        "making it dependent on the call made in THIS instance makes sense",
        "because the code executed is probably the same.",
        "File is created and then instantly deleted. Not a problem for the WatchService :)",
        "PREPARE WATCHSERVICE AND STUFF",
        "points to current folder",
        "REGISTER CURRENT FOLDER FOR WATCHING FOR FILE DELETIONS",
        "INSTALL WATCHER THAT LOOKS IF OUR detectFile SHOWS UP IN THE DIRECTORY CHANGES. IF THERE'S A CHANGE, ANOTHER INSTANCE TRIED TO START, SO NOTIFY THE CURRENT ONE OF THAT.",
        "To eternity and beyond! Until the universe shuts down. (Should be a volatile boolean, but this class only has absolutely required features.)",
        "This situation would be normal if the watcher has been closed, but our application never does that."
    ],
    "docstrings": [
        "* Created by Tbaios on 14.07.2016.",
        "* CAN ONLY BE CALLED ONCE.\n     * <p>\n     * Assumes that the program will close if FALSE is returned: The other-instance-tries-to-launch listener is not\n     * installed in that case.\n     * <p>\n     * Checks if another instance is already running (temp file lock / shutdownhook). Depending on the accessibility of\n     * the temp file the return value will be true or false. This approach even works even if the virtual machine\n     * process gets killed. On the next run, the program can even detect if it has shut down irregularly, because then\n     * the file will still exist. (Thanks to Robert http://stackoverflow.com/a/2002948/3500521 for that solution!)\n     * <p>\n     * Additionally, the method checks if another instance tries to start. In a crappy way, because as awesome as Java\n     * is, it lacks some fundamental features. Don't worry, it has only been 25 years, it'll sure come eventually.\n     *\n     * @param codeToRunIfOtherInstanceTriesToStart Can be null. If not null and another instance tries to start (which\n     *                                             changes the detect-file), the code will be executed. Could be used to\n     *                                             bring the current (=old=only) instance to front. If null, then the\n     *                                             watcher will not be installed at all, nor will the trigger file be\n     *                                             created. (Null means that you just don't want to make use of this\n     *                                             half of the class' purpose, but then you would be better advised to\n     *                                             just use the 24 line method by Robert.)\n     *                                             <p>\n     *                                             BE CAREFUL with the code: It will potentially be called until the\n     *                                             very last moment of the program's existence, so if you e.g. have a\n     *                                             shutdown procedure or a window that would be brought to front, check\n     *                                             if the procedure has not been triggered yet or if the window still\n     *                                             exists / hasn't been disposed of yet. Or edit this class to be more\n     *                                             comfortable. This would e.g. allow you to remove some crappy\n     *                                             comments. Attribution would be nice, though.\n     * @param executeOnAWTEventDispatchThread      Convenience function. If false, the code will just be executed. If\n     *                                             true, it will be detected if we're currently on that thread. If so,\n     *                                             the code will just be executed. If not so, the code will be run via\n     *                                             SwingUtilities.invokeLater().\n     * @return if this is the only instance"
    ],
    "functions": [
        "isOnlyInstance",
        "createAndDeleteOtherInstanceWatcherTriggerFile",
        "canLockFileBeCreatedAndLocked",
        "installOtherInstanceLaunchAttemptWatcher",
        "optionallyInstallShutdownHookThatCleansEverythingUp",
        "watchForDirectoryChangesOnExtraThread"
    ],
    "classes": []
}