{
    "identifiers": [
        "org",
        "apache",
        "cassandra",
        "db",
        "java",
        "nio",
        "ByteBuffer",
        "java",
        "util",
        "java",
        "util",
        "concurrent",
        "atomic",
        "java",
        "util",
        "com",
        "google",
        "common",
        "annotations",
        "VisibleForTesting",
        "com",
        "google",
        "common",
        "collect",
        "Iterables",
        "org",
        "apache",
        "cassandra",
        "config",
        "org",
        "apache",
        "cassandra",
        "cql3",
        "org",
        "apache",
        "cassandra",
        "cql3",
        "statements",
        "org",
        "apache",
        "cassandra",
        "db",
        "marshal",
        "org",
        "apache",
        "cassandra",
        "schema",
        "org",
        "apache",
        "cassandra",
        "utils",
        "metadata",
        "l",
        "l",
        "addAll",
        "ColumnFamilyStoreCQLHelper",
        "getUserTypesAsCQL",
        "metadata",
        "l",
        "add",
        "ColumnFamilyStoreCQLHelper",
        "getCFMetadataAsCQL",
        "metadata",
        "l",
        "addAll",
        "ColumnFamilyStoreCQLHelper",
        "getDroppedColumnsAsCQL",
        "metadata",
        "l",
        "addAll",
        "ColumnFamilyStoreCQLHelper",
        "getIndexesAsCQL",
        "metadata",
        "l",
        "metadata",
        "cds",
        "metadata",
        "clusteringColumns",
        "size",
        "metadata",
        "isStaticCompactTable",
        "cd",
        "metadata",
        "clusteringColumns",
        "cds",
        "add",
        "cd",
        "cds",
        "metadata",
        "cds",
        "metadata",
        "partitionColumns",
        "size",
        "cd",
        "metadata",
        "partitionColumns",
        "statics",
        "cds",
        "add",
        "cd",
        "metadata",
        "isDense",
        "cd",
        "metadata",
        "partitionColumns",
        "withoutStatics",
        "cd",
        "equals",
        "EmptyType",
        "instance",
        "cds",
        "add",
        "cd",
        "metadata",
        "isStaticCompactTable",
        "cd",
        "metadata",
        "partitionColumns",
        "withoutStatics",
        "cds",
        "add",
        "cd",
        "cds",
        "VisibleForTesting",
        "metadata",
        "includeDroppedColumns",
        "sb",
        "isCqlCompatible",
        "metadata",
        "sb",
        "append",
        "format",
        "metadata",
        "ksName",
        "metadata",
        "cfName",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "quoteIdentifier",
        "metadata",
        "ksName",
        "append",
        "append",
        "quoteIdentifier",
        "metadata",
        "cfName",
        "append",
        "partitionKeyColumns",
        "metadata",
        "partitionKeyColumns",
        "clusteringColumns",
        "getClusteringColumns",
        "metadata",
        "partitionColumns",
        "getPartitionColumns",
        "metadata",
        "cdCommaAppender",
        "commaAppender",
        "sb",
        "append",
        "cfd",
        "partitionKeyColumns",
        "cdCommaAppender",
        "accept",
        "sb",
        "sb",
        "append",
        "toCQL",
        "cfd",
        "partitionKeyColumns",
        "size",
        "clusteringColumns",
        "size",
        "sb",
        "append",
        "cfd",
        "clusteringColumns",
        "cdCommaAppender",
        "accept",
        "sb",
        "sb",
        "append",
        "toCQL",
        "cfd",
        "cfd",
        "partitionColumns",
        "cdCommaAppender",
        "accept",
        "sb",
        "sb",
        "append",
        "toCQL",
        "cfd",
        "metadata",
        "isStaticCompactTable",
        "includeDroppedColumns",
        "entry",
        "metadata",
        "getDroppedColumns",
        "entrySet",
        "metadata",
        "getColumnDefinition",
        "entry",
        "getKey",
        "droppedColumn",
        "entry",
        "getValue",
        "cdCommaAppender",
        "accept",
        "sb",
        "sb",
        "append",
        "quoteIdentifier",
        "droppedColumn",
        "name",
        "sb",
        "append",
        "sb",
        "append",
        "droppedColumn",
        "asCQL3Type",
        "toString",
        "clusteringColumns",
        "size",
        "partitionKeyColumns",
        "size",
        "sb",
        "append",
        "partitionKeyColumns",
        "size",
        "sb",
        "append",
        "pkCommaAppender",
        "commaAppender",
        "cfd",
        "partitionKeyColumns",
        "pkCommaAppender",
        "accept",
        "sb",
        "sb",
        "append",
        "quoteIdentifier",
        "cfd",
        "name",
        "toString",
        "sb",
        "append",
        "sb",
        "append",
        "quoteIdentifier",
        "partitionKeyColumns",
        "get",
        "name",
        "toString",
        "cfd",
        "metadata",
        "clusteringColumns",
        "sb",
        "append",
        "append",
        "quoteIdentifier",
        "cfd",
        "name",
        "toString",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "append",
        "metadata",
        "cfId",
        "append",
        "metadata",
        "isCompactTable",
        "sb",
        "append",
        "clusteringColumns",
        "size",
        "sb",
        "append",
        "cOrderCommaAppender",
        "commaAppender",
        "cd",
        "clusteringColumns",
        "cOrderCommaAppender",
        "accept",
        "sb",
        "sb",
        "append",
        "quoteIdentifier",
        "cd",
        "name",
        "toString",
        "append",
        "append",
        "cd",
        "clusteringOrder",
        "toString",
        "sb",
        "append",
        "sb",
        "append",
        "toCQL",
        "metadata",
        "sb",
        "append",
        "isCqlCompatible",
        "metadata",
        "sb",
        "append",
        "sb",
        "toString",
        "VisibleForTesting",
        "metadata",
        "types",
        "typeSet",
        "cd",
        "Iterables",
        "concat",
        "metadata",
        "partitionKeyColumns",
        "metadata",
        "clusteringColumns",
        "metadata",
        "partitionColumns",
        "cd",
        "isUDT",
        "resolveUserType",
        "typeSet",
        "types",
        "typeStrings",
        "types",
        "typeStrings",
        "add",
        "toCQL",
        "typeStrings",
        "VisibleForTesting",
        "metadata",
        "droppedColumns",
        "entry",
        "metadata",
        "getDroppedColumns",
        "entrySet",
        "column",
        "entry",
        "getValue",
        "droppedColumns",
        "add",
        "toCQLDrop",
        "metadata",
        "ksName",
        "metadata",
        "cfName",
        "column",
        "metadata",
        "getColumnDefinition",
        "entry",
        "getKey",
        "droppedColumns",
        "add",
        "toCQLAdd",
        "metadata",
        "ksName",
        "metadata",
        "cfName",
        "metadata",
        "getColumnDefinition",
        "entry",
        "getKey",
        "droppedColumns",
        "VisibleForTesting",
        "metadata",
        "indexes",
        "indexMetadata",
        "metadata",
        "getIndexes",
        "indexes",
        "add",
        "toCQL",
        "metadata",
        "ksName",
        "metadata",
        "cfName",
        "indexMetadata",
        "indexes",
        "keyspace",
        "cf",
        "indexMetadata",
        "indexMetadata",
        "isCustom",
        "options",
        "indexMetadata",
        "options",
        "forEach",
        "k",
        "v",
        "k",
        "equals",
        "IndexTarget",
        "TARGET_OPTION_NAME",
        "k",
        "equals",
        "IndexTarget",
        "CUSTOM_INDEX_OPTION_NAME",
        "options",
        "put",
        "k",
        "v",
        "format",
        "quoteIdentifier",
        "indexMetadata",
        "name",
        "quoteIdentifier",
        "keyspace",
        "quoteIdentifier",
        "cf",
        "indexMetadata",
        "options",
        "get",
        "IndexTarget",
        "TARGET_OPTION_NAME",
        "indexMetadata",
        "options",
        "get",
        "IndexTarget",
        "CUSTOM_INDEX_OPTION_NAME",
        "options",
        "isEmpty",
        "toCQL",
        "options",
        "format",
        "quoteIdentifier",
        "indexMetadata",
        "name",
        "quoteIdentifier",
        "keyspace",
        "quoteIdentifier",
        "cf",
        "indexMetadata",
        "options",
        "get",
        "IndexTarget",
        "TARGET_OPTION_NAME",
        "userType",
        "sb",
        "sb",
        "append",
        "format",
        "quoteIdentifier",
        "userType",
        "keyspace",
        "quoteIdentifier",
        "userType",
        "getNameAsString",
        "commaAppender",
        "commaAppender",
        "i",
        "i",
        "userType",
        "size",
        "i",
        "commaAppender",
        "accept",
        "sb",
        "sb",
        "append",
        "format",
        "userType",
        "fieldNameAsString",
        "i",
        "userType",
        "fieldType",
        "i",
        "asCQL3Type",
        "sb",
        "append",
        "sb",
        "toString",
        "tableParams",
        "builder",
        "builder",
        "append",
        "append",
        "tableParams",
        "bloomFilterFpChance",
        "builder",
        "append",
        "append",
        "tableParams",
        "dcLocalReadRepairChance",
        "builder",
        "append",
        "append",
        "tableParams",
        "crcCheckChance",
        "builder",
        "append",
        "append",
        "tableParams",
        "defaultTimeToLive",
        "builder",
        "append",
        "append",
        "tableParams",
        "gcGraceSeconds",
        "builder",
        "append",
        "append",
        "tableParams",
        "minIndexInterval",
        "builder",
        "append",
        "append",
        "tableParams",
        "maxIndexInterval",
        "builder",
        "append",
        "append",
        "tableParams",
        "memtableFlushPeriodInMs",
        "builder",
        "append",
        "append",
        "tableParams",
        "readRepairChance",
        "builder",
        "append",
        "append",
        "tableParams",
        "speculativeRetry",
        "append",
        "builder",
        "append",
        "append",
        "singleQuote",
        "tableParams",
        "comment",
        "builder",
        "append",
        "append",
        "toCQL",
        "tableParams",
        "caching",
        "asMap",
        "builder",
        "append",
        "append",
        "toCQL",
        "tableParams",
        "compaction",
        "asMap",
        "builder",
        "append",
        "append",
        "toCQL",
        "tableParams",
        "compression",
        "asMap",
        "builder",
        "append",
        "append",
        "tableParams",
        "cdc",
        "builder",
        "append",
        "entry",
        "tableParams",
        "extensions",
        "entrySet",
        "builder",
        "append",
        "singleQuote",
        "entry",
        "getKey",
        "builder",
        "append",
        "builder",
        "append",
        "ByteBufferUtil",
        "bytesToHex",
        "entry",
        "getValue",
        "builder",
        "append",
        "builder",
        "toString",
        "builder",
        "isFirst",
        "entry",
        "entrySet",
        "isFirst",
        "isFirst",
        "builder",
        "append",
        "builder",
        "append",
        "singleQuote",
        "entry",
        "getKey",
        "toString",
        "builder",
        "append",
        "builder",
        "append",
        "singleQuote",
        "entry",
        "getValue",
        "toString",
        "builder",
        "append",
        "builder",
        "toString",
        "cd",
        "toCQL",
        "cd",
        "cd",
        "isStaticCompactTable",
        "format",
        "quoteIdentifier",
        "cd",
        "name",
        "toString",
        "cd",
        "asCQL3Type",
        "toString",
        "cd",
        "isStatic",
        "isStaticCompactTable",
        "keyspace",
        "cf",
        "cd",
        "format",
        "quoteIdentifier",
        "keyspace",
        "quoteIdentifier",
        "cf",
        "quoteIdentifier",
        "cd",
        "name",
        "toString",
        "cd",
        "asCQL3Type",
        "toString",
        "cd",
        "isStatic",
        "keyspace",
        "cf",
        "droppedColumn",
        "format",
        "quoteIdentifier",
        "keyspace",
        "quoteIdentifier",
        "cf",
        "quoteIdentifier",
        "droppedColumn",
        "name",
        "droppedColumn",
        "droppedTime",
        "typeSet",
        "types",
        "subType",
        "fieldTypes",
        "typeSet",
        "contains",
        "subType",
        "subType",
        "isUDT",
        "resolveUserType",
        "subType",
        "typeSet",
        "types",
        "typeSet",
        "contains",
        "typeSet",
        "add",
        "types",
        "add",
        "s",
        "format",
        "s",
        "replaceAll",
        "afterComma",
        "isFirst",
        "stringBuilder",
        "isFirst",
        "getAndSet",
        "stringBuilder",
        "append",
        "append",
        "afterComma",
        "id",
        "ColumnIdentifier",
        "maybeQuote",
        "id",
        "metaData",
        "metaData",
        "isSuper",
        "metaData",
        "isCompactTable",
        "metaData",
        "partitionColumns",
        "withoutStatics",
        "size",
        "metaData",
        "clusteringColumns",
        "size"
    ],
    "literals": [
        "\"/*\\nWarning: Table %s.%s omitted because it has constructs not compatible with CQL (was created via legacy API).\\n\"",
        "\"\\nApproximate structure, for reference:\"",
        "\"\\n(this should not be used to reproduce this schema)\\n\\n\"",
        "\"CREATE TABLE IF NOT EXISTS \"",
        "\" (\"",
        "\"\\n\\t\"",
        "\"\\n\\t\"",
        "\" PRIMARY KEY\"",
        "\",\\n\\tPRIMARY KEY (\"",
        "\"(\"",
        "\" \"",
        "\")\"",
        "\", \"",
        "\")\\n\\t\"",
        "\"WITH \"",
        "\"ID = \"",
        "\"\\n\\tAND \"",
        "\"COMPACT STORAGE\\n\\tAND \"",
        "\"CLUSTERING ORDER BY (\"",
        "\" \"",
        "\")\\n\\tAND \"",
        "\";\"",
        "\"\\n*/\"",
        "\"CREATE CUSTOM INDEX %s ON %s.%s (%s) USING '%s'%s;\"",
        "\"\"",
        "\" WITH OPTIONS \"",
        "\"CREATE INDEX %s ON %s.%s (%s);\"",
        "\"CREATE TYPE %s.%s(\"",
        "\" \"",
        "\"%s %s\"",
        "\");\"",
        "\"bloom_filter_fp_chance = \"",
        "\"\\n\\tAND dclocal_read_repair_chance = \"",
        "\"\\n\\tAND crc_check_chance = \"",
        "\"\\n\\tAND default_time_to_live = \"",
        "\"\\n\\tAND gc_grace_seconds = \"",
        "\"\\n\\tAND min_index_interval = \"",
        "\"\\n\\tAND max_index_interval = \"",
        "\"\\n\\tAND memtable_flush_period_in_ms = \"",
        "\"\\n\\tAND read_repair_chance = \"",
        "\"\\n\\tAND speculative_retry = '\"",
        "\"'\"",
        "\"\\n\\tAND comment = \"",
        "\"\\n\\tAND caching = \"",
        "\"\\n\\tAND compaction = \"",
        "\"\\n\\tAND compression = \"",
        "\"\\n\\tAND cdc = \"",
        "\"\\n\\tAND extensions = { \"",
        "\": \"",
        "\"0x\"",
        "\" }\"",
        "\"{ \"",
        "\", \"",
        "\": \"",
        "\" }\"",
        "\"%s %s%s\"",
        "\" static\"",
        "\"\"",
        "\"ALTER TABLE %s.%s ADD %s %s%s;\"",
        "\" static\"",
        "\"\"",
        "\"ALTER TABLE %s.%s DROP %s USING TIMESTAMP %s;\"",
        "\"'%s'\"",
        "\"'\"",
        "\"''\""
    ],
    "variables": [],
    "comments": [
        "Types come first, as table can't be created without them",
        "Record re-create schema statements",
        "Dropped columns (and re-additions)",
        "Indexes applied as last, since otherwise they may interfere with column drops / re-additions",
        "remove an empty type",
        "\"regular\" columns are not exposed for static compact tables"
    ],
    "docstrings": [
        "* Licensed to the Apache Softw≤are Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Helper methods to represent CFMetadata and related objects in CQL format",
        "* Build a CQL String representation of Column Family Metadata",
        "* Build a CQL String representation of User Types used in the given Column Family.\n     *\n     * Type order is ensured as types are built incrementally: from the innermost (most nested)\n     * to the outermost.",
        "* Build a CQL String representation of Dropped Columns in the given Column Family.\n     *\n     * If the column was dropped once, but is now re-created `ADD` will be appended accordingly.",
        "* Build a CQL String representation of Indexes on columns in the given Column Family",
        "* Whether or not the given metadata is compatible / representable with CQL Language"
    ],
    "functions": [
        "dumpReCreateStatements",
        "getClusteringColumns",
        "getPartitionColumns",
        "getCFMetadataAsCQL",
        "getUserTypesAsCQL",
        "getDroppedColumnsAsCQL",
        "getIndexesAsCQL",
        "toCQL",
        "toCQL",
        "toCQL",
        "toCQL",
        "toCQL",
        "toCQL",
        "toCQLAdd",
        "toCQLDrop",
        "resolveUserType",
        "singleQuote",
        "commaAppender",
        "accept",
        "quoteIdentifier",
        "isCqlCompatible"
    ],
    "classes": [
        "ColumnFamilyStoreCQLHelper"
    ]
}