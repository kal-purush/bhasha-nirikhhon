{
    "identifiers": [
        "typing",
        "Dict",
        "attr",
        "dataclass",
        "ib",
        "jinja2",
        "Template",
        "mautrix",
        "types",
        "SerializableAttrs",
        "user",
        "User",
        "node",
        "Node",
        "dataclass",
        "SerializableAttrs",
        "ib",
        "metadata",
        "Dict",
        "ib",
        "metadata",
        "factory",
        "ib",
        "metadata",
        "dataclass",
        "Node",
        "ib",
        "metadata",
        "Case",
        "ib",
        "metadata",
        "factory",
        "property",
        "Template",
        "Template",
        "validation",
        "user",
        "User",
        "cases",
        "id",
        "o_connection",
        "variables",
        "user",
        "varible",
        "variables",
        "__dict__",
        "Template",
        "variables",
        "varible",
        "user",
        "set_variable",
        "variable_id",
        "varible",
        "value",
        "template_variable",
        "render",
        "user",
        "_variables",
        "e",
        "log",
        "warning",
        "e",
        "cases_dict",
        "user",
        "User",
        "log",
        "debug",
        "id",
        "user",
        "user_id",
        "rule",
        "render",
        "user",
        "_variables",
        "e",
        "log",
        "warning",
        "id",
        "e",
        "get_case_by_id",
        "res",
        "user",
        "user",
        "id",
        "user",
        "User",
        "load_cases",
        "user",
        "user",
        "cases",
        "id",
        "log",
        "debug",
        "case_result",
        "id",
        "case_result",
        "KeyError",
        "log",
        "debug",
        "id",
        "cases"
    ],
    "literals": [
        "\"json\"",
        "\"id\"",
        "\"json\"",
        "\"variables\"",
        "\"json\"",
        "\"o_connection\"",
        "\"json\"",
        "\"validation\"",
        "\"json\"",
        "\"cases\"",
        "f\"Executing validation of input {self.id} for user {user.user_id}\"",
        "f\"An exception has occurred in the pipeline {self.id} :: {e}\"",
        "\"except\"",
        "f\"The case {case_result} has been obtained in the input node {self.id}\"",
        "f\"Case not found {id} the default case will be sought\"",
        "\"default\""
    ],
    "variables": [
        "id",
        "variables",
        "o_connection",
        "validation",
        "cases",
        "cases_dict",
        "cases_dict",
        "template_variable",
        "res",
        "res",
        "res",
        "cases",
        "case_result"
    ],
    "comments": [
        "TODO What would be the best way to handle this, taking jinja into account?",
        "if res == \"True\":",
        "res = True",
        "if res == \"False\":",
        "res = False"
    ],
    "docstrings": [
        "\"\"\"\n    ## Switch\n\n    A switch type node allows to validate the content of a jinja variable,\n    and from the result to transit to another node.\n\n    content:\n\n    ```\n    - id: switch-1\n      type: switch\n      validation: '{{ opt }}'\n      cases:\n      - id: 1\n        o_connection: m1\n      - id: 2\n        o_connection: m2\n      - id: default\n        o_connection: m3\n    ```\n    \"\"\"",
        "\"\"\"It loads the cases into a dictionary.\n\n        Parameters\n        ----------\n        user : User\n            User = None\n\n        Returns\n        -------\n            A dictionary of cases.\n\n        \"\"\"",
        "\"\"\"It takes a dictionary of variables, runs the rule,\n        and returns the connection that matches the case\n\n        Parameters\n        ----------\n        variables : dict\n            dict\n\n        Returns\n        -------\n            The str object\n\n        \"\"\""
    ],
    "functions": [
        "rule",
        "load_cases",
        "run",
        "get_case_by_id"
    ],
    "classes": [
        "Case",
        "Switch"
    ]
}