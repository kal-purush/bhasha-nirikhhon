{
    "identifiers": [
        "min",
        "max",
        "min",
        "min",
        "max",
        "max",
        "max",
        "min",
        "min",
        "target",
        "target",
        "listEl",
        "item",
        "el",
        "item",
        "listEl",
        "el",
        "item",
        "getRandomIntInclusive",
        "index",
        "newArray",
        "array",
        "filterInputValue",
        "array",
        "item",
        "item",
        "filterInputValue",
        "lowerCaseName",
        "lowerCaseQuery",
        "submit",
        "fetch",
        "results",
        "arrayFromJson",
        "arrayFromJson",
        "arrayFromJson",
        "arrayFromJson",
        "submit",
        "loadAnimation",
        "loadAnimation",
        "form",
        "filterList",
        "currentList",
        "injectHTML",
        "newFilterList",
        "form",
        "submitEvent",
        "submitEvent",
        "currentList",
        "processRestaurants",
        "arrayFromJson",
        "injectHTML",
        "currentList",
        "mainEvent"
    ],
    "literals": [
        "'fired injectHTML'",
        "'#restaurant_list'",
        "''",
        "'ol'",
        "'li'",
        "'fired restaurants list'",
        "'.main_form'",
        "'#get-resto'",
        "'.lds-ellipsis'",
        "'none'",
        "'/api/foodServicePG'",
        "${arrayFromJson.data[0].name} ${arrayFromJson.data[0].category}",
        "'block'",
        "'lds-ellipsis'",
        "'lds-ellipsis_hidden'",
        "'input'",
        "'submit'",
        "'DOMContentLoaded'"
    ],
    "variables": [
        "target",
        "listEl",
        "el",
        "newArray",
        "index",
        "lowerCaseName",
        "lowerCaseQuery",
        "form",
        "submit",
        "loadAnimation",
        "results",
        "arrayFromJson",
        "currentList",
        "newFilterList"
    ],
    "comments": [
        "eslint-disable max-len",
        "Hook this script to index.html\n  by adding `<script src=\"script.js\">` just before your closing `</body>` tag",
        "## Utility Functions\n    Under this comment place any utility functions you need - like an inclusive random number selector\n    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
        "The maximum is inclusive and the minimum is inclusive",
        "## JS and HTML Injection\n        There are a bunch of methods to inject text or HTML into a document using JS\n        Mainly, they're considered \"unsafe\" because they can spoof a page pretty easily\n        But they're useful for starting to understand how websites work\n        the usual ones are element.innerText and element.innerHTML\n        Here's an article on the differences if you want to know more:\n        https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#differences_from_innertext\n  \n      ## What to do in this function\n        - Accept a list of restaurant objects\n        - using a .forEach method, inject a list element into your index.html for every element in the list\n        - Display the name of that restaurant and what category of food it is",
        "## Process Data Separately From Injecting It\n          This function should accept your 1,000 records\n          then select 15 random records\n          and return an object containing only the restaurant's name, category, and geocoded location\n          So we can inject them using the HTML injection function\n  \n          You can find the column names by carefully looking at your single returned record\n          https://data.princegeorgescountymd.gov/Health/Food-Inspection/umjn-t2iz\n  \n        ## What to do in this function:\n  \n        - Create an array of 15 empty elements (there are a lot of fun ways to do this, and also very basic ways)\n        - using a .map function on that range,\n        - Make a list of 15 random restaurants from your list of 100 from your data request\n        - Return only their name, category, and location\n        - Return the new list of 15 restaurants so we can work on it separately in the HTML injector",
        "## Main Event\n          Separating your main programming from your side functions will help you organize your thoughts\n          When you're not working in a heavily-commented \"learning\" file, this also is more legible\n          If you separate your work, when one piece is complete, you can save it and trust it",
        "the async keyword means we can make API requests",
        "get your main form so you can do JS with it",
        "get a reference to your submit button",
        "let your submit button disappear",
        "Let's get some data from the API - it will take a second or two to load\n        This next line goes to the request for 'GET' in the file at /server/routes/foodServiceRoutes.js\n        It's at about line 27 - go have a look and see what we're retrieving and sending back.",
        "here is where we get the data from our request as JSON",
        "Below this comment, we log out a table of all the results using \"dot notation\"\n        An alternate notation would be \"bracket notation\" - arrayFromJson[\"data\"]\n        Dot notation is preferred in JS unless you have a good reason to use brackets\n        The 'data' key, which we set at line 38 in foodServiceRoutes.js, contains all 1,000 records we need",
        "console.table(arrayFromJson.data);",
        "in your browser console, try expanding this object to see what fields are available to work with",
        "for example: arrayFromJson.data[0].name, etc",
        "this is called \"string interpolation\" and is how we build large text blocks with variables",
        "This IF statement ensures we can't do anything if we don't have information yet",
        "let's turn the submit button back on by setting it to display as a block when we have data available",
        "Return if we have no data.",
        "the question mark in this means \"if this is set at all\"",
        "And here's an eventListener! It's listening for a \"submit\" button specifically being clicked",
        "this is a synchronous event event, because we already did our async request above, and waited for it to resolve",
        "This is needed to stop our page from changing to a new URL even though it heard a GET request",
        "This constant will have the value of your 15-restaurant collection when it processes",
        "And this function call will perform the \"side effect\" of injecting the HTML list for you",
        "By separating the functions, we open the possibility of regenerating the list",
        "without having to retrieve fresh data every time",
        "We also have access to some form values, so we could filter the list based on name",
        "This last line actually runs first!\n      It's calling the 'mainEvent' function at line 57\n      It runs first because the listener is set to when your HTML content has loaded",
        "the async keyword means we can make API requests"
    ],
    "docstrings": [],
    "functions": [
        "getRandomIntInclusive",
        "injectHTML",
        "processRestaurants",
        "filterList",
        "mainEvent"
    ],
    "classes": []
}