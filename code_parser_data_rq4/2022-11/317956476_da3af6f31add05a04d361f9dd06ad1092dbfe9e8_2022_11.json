{
    "identifiers": [
        "sys",
        "textwrap",
        "typing",
        "Any",
        "Dict",
        "Iterator",
        "Tuple",
        "english_words",
        "english_words_lower_alpha_set",
        "CORRECT_WORDS",
        "ImportError",
        "KC_QUOT",
        "KC_SPC",
        "chr",
        "c",
        "c",
        "KC_A",
        "ord",
        "c",
        "ord",
        "ord",
        "file_name",
        "Tuple",
        "line_number",
        "typo",
        "correction",
        "parse_file_lines",
        "file_name",
        "typo",
        "typos",
        "line_number",
        "typo",
        "all",
        "c",
        "TYPO_CHARS",
        "c",
        "typo",
        "line_number",
        "typo",
        "join",
        "TYPO_CHARS",
        "keys",
        "sys",
        "exit",
        "other_typo",
        "typos",
        "typo",
        "other_typo",
        "other_typo",
        "typo",
        "line_number",
        "typo",
        "other_typo",
        "sys",
        "exit",
        "len",
        "typo",
        "line_number",
        "typo",
        "check_typo_against_dictionary",
        "typo",
        "autocorrections",
        "append",
        "typo",
        "correction",
        "typos",
        "add",
        "typo",
        "autocorrections",
        "autocorrections",
        "Tuple",
        "Dict",
        "Any",
        "typo",
        "correction",
        "autocorrections",
        "trie",
        "letter",
        "typo",
        "node",
        "setdefault",
        "letter",
        "typo",
        "correction",
        "trie",
        "file_name",
        "Iterator",
        "Tuple",
        "line",
        "open",
        "file_name",
        "line_number",
        "line",
        "strip",
        "line",
        "line",
        "token",
        "strip",
        "token",
        "line",
        "split",
        "len",
        "tokens",
        "tokens",
        "line_number",
        "line",
        "sys",
        "exit",
        "tokens",
        "typo",
        "lower",
        "typo",
        "replace",
        "line_number",
        "typo",
        "correction",
        "typo",
        "typo",
        "startswith",
        "typo",
        "endswith",
        "typo",
        "CORRECT_WORDS",
        "line_number",
        "typo",
        "typo",
        "startswith",
        "typo",
        "endswith",
        "word",
        "CORRECT_WORDS",
        "word",
        "startswith",
        "typo",
        "line_number",
        "typo",
        "word",
        "typo",
        "startswith",
        "typo",
        "endswith",
        "word",
        "CORRECT_WORDS",
        "word",
        "endswith",
        "typo",
        "line_number",
        "typo",
        "word",
        "typo",
        "startswith",
        "typo",
        "endswith",
        "word",
        "CORRECT_WORDS",
        "typo",
        "word",
        "line_number",
        "typo",
        "word",
        "autocorrections",
        "Tuple",
        "trie",
        "Dict",
        "Any",
        "trie_node",
        "Dict",
        "Any",
        "Dict",
        "Any",
        "trie_node",
        "trie_node",
        "typo",
        "typo",
        "strip",
        "i",
        "min",
        "len",
        "typo",
        "len",
        "correction",
        "typo",
        "i",
        "correction",
        "i",
        "i",
        "len",
        "typo",
        "i",
        "word_boundary_ending",
        "backspaces",
        "correction",
        "i",
        "backspaces",
        "correction",
        "data",
        "table",
        "append",
        "entry",
        "len",
        "trie_node",
        "next",
        "iter",
        "trie_node",
        "items",
        "c",
        "len",
        "trie_node",
        "trie_node",
        "next",
        "iter",
        "trie_node",
        "items",
        "entry",
        "c",
        "table",
        "append",
        "entry",
        "traverse",
        "trie_node",
        "join",
        "sorted",
        "trie_node",
        "keys",
        "table",
        "append",
        "entry",
        "traverse",
        "trie_node",
        "c",
        "c",
        "entry",
        "entry",
        "traverse",
        "trie",
        "e",
        "Dict",
        "Any",
        "e",
        "e",
        "len",
        "e",
        "TYPO_CHARS",
        "c",
        "c",
        "e",
        "c",
        "link",
        "e",
        "e",
        "data",
        "TYPO_CHARS",
        "c",
        "data",
        "encode_link",
        "link",
        "data",
        "e",
        "table",
        "byte_offset",
        "byte_offset",
        "len",
        "serialize",
        "e",
        "b",
        "e",
        "table",
        "b",
        "serialize",
        "e",
        "link",
        "Dict",
        "Any",
        "link",
        "byte_offset",
        "sys",
        "exit",
        "byte_offset",
        "byte_offset",
        "autocorrections",
        "Tuple",
        "data",
        "file_name",
        "all",
        "b",
        "b",
        "data",
        "e",
        "Tuple",
        "len",
        "e",
        "min",
        "autocorrections",
        "key",
        "typo_len",
        "max",
        "autocorrections",
        "key",
        "typo_len",
        "join",
        "len",
        "autocorrections",
        "join",
        "sorted",
        "typo",
        "len",
        "max_typo",
        "correction",
        "typo",
        "correction",
        "autocorrections",
        "len",
        "min_typo",
        "min_typo",
        "len",
        "max_typo",
        "max_typo",
        "textwrap",
        "fill",
        "len",
        "data",
        "join",
        "data",
        "width",
        "subsequent_indent",
        "open",
        "file_name",
        "f",
        "f",
        "write",
        "generated_code",
        "argv",
        "argv",
        "len",
        "argv",
        "parse_file",
        "dict_file",
        "make_trie",
        "autocorrections",
        "serialize_trie",
        "autocorrections",
        "trie",
        "len",
        "autocorrections",
        "len",
        "data",
        "write_generated_code",
        "autocorrections",
        "data",
        "main",
        "sys",
        "argv"
    ],
    "literals": [
        "'Autocorrection will falsely trigger when a typo is a substring of a '",
        "'correctly spelled word. To check for this, install the english_words '",
        "'package and rerun this script:\\n\\n  pip install english_words\\n'",
        "'apparent'",
        "'association'",
        "'available'",
        "'classification'",
        "'effect'",
        "'entertainment'",
        "'fantastic'",
        "'information'",
        "'integrate'",
        "'international'",
        "'language'",
        "'loosest'",
        "'manual'",
        "'nothing'",
        "'provides'",
        "'reference'",
        "'statehood'",
        "'technology'",
        "'virtually'",
        "'wealthier'",
        "'wonderful'",
        "\"'\"",
        "':'",
        "'a'",
        "'a'",
        "'z'",
        "f'Warning:{line_number}: Ignoring duplicate typo: \"{typo}\"'",
        "f'Error:{line_number}: Typo \"{typo}\" has '",
        "'characters other than '",
        "''",
        "f'Error:{line_number}: Typos may not be substrings of one '",
        "f'another, otherwise the longer typo would never trigger: '",
        "f'\"{typo}\" vs. \"{other_typo}\".'",
        "f'Warning:{line_number}: It is suggested that typos are at '",
        "f'least 5 characters long to avoid false triggers: \"{typo}\"'",
        "'LEAF'",
        "'rt'",
        "'#'",
        "'->'",
        "f'Error:{line_number}: Invalid syntax: \"{line}\"'",
        "' '",
        "':'",
        "':'",
        "':'",
        "f'Warning:{line_number}: Typo \"{typo}\" is a correctly spelled '",
        "'dictionary word.'",
        "':'",
        "':'",
        "f'Warning:{line_number}: Typo \"{typo}\" would falsely trigger '",
        "f'on correctly spelled word \"{word}\".'",
        "':'",
        "':'",
        "f'Warning:{line_number}: Typo \"{typo}\" would falsely trigger '",
        "f'on correctly spelled word \"{word}\".'",
        "':'",
        "':'",
        "f'Warning:{line_number}: Typo \"{typo}\" would falsely trigger '",
        "f'on correctly spelled word \"{word}\".'",
        "'LEAF'",
        "'LEAF'",
        "':'",
        "':'",
        "'ascii'",
        "'data'",
        "'links'",
        "'byte_offset'",
        "'chars'",
        "'byte_offset'",
        "'LEAF'",
        "'chars'",
        "'links'",
        "'chars'",
        "''",
        "'byte_offset'",
        "'links'",
        "'chars'",
        "'links'",
        "'data'",
        "'links'",
        "'chars'",
        "'chars'",
        "'links'",
        "'byte_offset'",
        "'byte_offset'",
        "'Error: The autocorrection table is too large, a node link exceeds '",
        "'64KB limit. Try reducing the autocorrection dict to fewer entries.'",
        "''",
        "'// Generated code.\\n\\n'",
        "f'// Autocorrection dictionary ({len(autocorrections)} entries):\\n'",
        "''",
        "f'//   {typo:<{len(max_typo)}} -> {correction}\\n'",
        "f'\\n#define AUTOCORRECTION_MIN_LENGTH {len(min_typo)}  // \"{min_typo}\"\\n'",
        "f'#define AUTOCORRECTION_MAX_LENGTH {len(max_typo)}  // \"{max_typo}\"\\n\\n'",
        "'static const uint8_t autocorrection_data[%d] PROGMEM = {%s};'",
        "', '",
        "'  '",
        "'\\n\\n'",
        "'wt'",
        "'autocorrection_dict.txt'",
        "f'Processed %d autocorrection entries to table with %d bytes.'",
        "'autocorrection_data.h'",
        "'__main__'"
    ],
    "variables": [
        "CORRECT_WORDS",
        "KC_A",
        "KC_SPC",
        "KC_QUOT",
        "TYPO_CHARS",
        "autocorrections",
        "typos",
        "trie",
        "node",
        "node",
        "node",
        "line_number",
        "line",
        "tokens",
        "typo",
        "correction",
        "typo",
        "typo",
        "table",
        "typo",
        "correction",
        "word_boundary_ending",
        "typo",
        "i",
        "backspaces",
        "correction",
        "data",
        "entry",
        "c",
        "trie_node",
        "entry",
        "c",
        "trie_node",
        "entry",
        "entry",
        "entry",
        "data",
        "byte_offset",
        "e",
        "byte_offset",
        "min_typo",
        "max_typo",
        "generated_code",
        "dict_file",
        "autocorrections",
        "trie",
        "data"
    ],
    "comments": [
        "Copyright 2021-2022 Google LLC",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "https://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "Use a minimal word list as a fallback.",
        "\"Word break\" character.",
        "Characters a-z.",
        "Check that `typo` is valid.",
        "Parse syntax \"typo -> correction\", using strip to ignore indenting.",
        "Force typos to lowercase.",
        "Traverse trie in depth first order.",
        "Handle a leaf trie node.",
        "Make the autocorrection data for this entry and serialize it.",
        "Handle trie node with a single child.",
        "It's common for a trie to have long chains of single-child nodes. We",
        "find the whole chain so that we can serialize it more efficiently.",
        "Handle trie node with multiple children.",
        "Handle a leaf table entry.",
        "Handle a chain table entry.",
        "Handle a branch table entry.",
        "To encode links, first compute byte offset of each entry.",
        "Serialize final table."
    ],
    "docstrings": [
        "\"\"\"Python program to make autocorrection_data.h.\n\nThis program reads \"autocorrection_dict.txt\" and generates a C source file\n\"autocorrection_data.h\" with a serialized trie embedded as an array. Run this\nprogram without arguments like\n\n$ python3 make_autocorrection_data.py\n\nOr to read from a different typo dict file, pass it as the first argument like\n\n$ python3 make_autocorrection_data.py dict.txt\n\nEach line of the dict file defines one typo and its correction with the syntax\n\"typo -> correction\". Blank lines or lines starting with '#' are ignored.\nExample:\n\n  :thier        -> their\n  dosen't       -> doesn't\n  fitler        -> filter\n  lenght        -> length\n  ouput         -> output\n  widht         -> width\n\nSee autocorrection_dict_extra.txt for a larger example.\n\nFor full documentation, see\nhttps://getreuer.info/posts/keyboards/autocorrection\n\"\"\"",
        "\"\"\"Parses autocorrections dictionary file.\n\n  Each line of the file defines one typo and its correction with the syntax\n  \"typo -> correction\". Blank lines or lines starting with '#' are ignored. The\n  function validates that typos only have characters in TYPO_CHARS, that\n  typos are not substrings of other typos, and checking that typos don't trigger\n  on CORRECT_WORDS.\n\n  Args:\n    file_name: String, path of the autocorrections dictionary.\n  Returns:\n    List of (typo, correction) tuples.\n  \"\"\"",
        "\"\"\"Makes a trie from the the typos, writing in reverse.\n\n  Args:\n    autocorrections: List of (typo, correction) tuples.\n  Returns:\n    Dict of dict, representing the trie.\n  \"\"\"",
        "\"\"\"Parses lines read from `file_name` into typo-correction pairs.\"\"\"",
        "\"\"\"Checks `typo` against English dictionary words.\"\"\"",
        "\"\"\"Serializes trie and correction data in a form readable by the C code.\n\n  Args:\n    autocorrections: List of (typo, correction) tuples.\n    trie: Dict of dicts.\n  Returns:\n    List of ints in the range 0-255.\n  \"\"\"",
        "\"\"\"Encodes a node link as two bytes.\"\"\"",
        "\"\"\"Writes autocorrection data as generated C code to `file_name`.\n\n  Args:\n    autocorrections: List of (typo, correction) tuples.\n    data: List of ints in 0-255, the serialized trie.\n    file_name: String, path of the output C file.\n  \"\"\""
    ],
    "functions": [
        "parse_file",
        "make_trie",
        "parse_file_lines",
        "check_typo_against_dictionary",
        "serialize_trie",
        "traverse",
        "serialize",
        "encode_link",
        "write_generated_code",
        "typo_len",
        "main"
    ],
    "classes": []
}