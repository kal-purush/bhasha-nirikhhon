{
    "identifiers": [
        "BN",
        "ethers",
        "elliptic",
        "StarkwareRegistration",
        "NetworkId",
        "KeyPair",
        "stripHexPrefix",
        "bnToHex32",
        "hexToBn",
        "sign",
        "asEcKeyPair",
        "StarkSignable",
        "BN",
        "StarkSignable",
        "ethKey",
        "starkKey",
        "networkId",
        "SignableRegistration",
        "networkId",
        "Buffer",
        "stripHexPrefix",
        "Buffer",
        "stripHexPrefix",
        "ethers",
        "REGISTRATION_PREFIX",
        "ethKey",
        "starkKey",
        "BN",
        "stripHexPrefix",
        "hash",
        "hashBn",
        "K_MODULUS",
        "keys",
        "sign",
        "asEcKeyPair",
        "keys",
        "hashBN",
        "ecSignature",
        "keys",
        "sig",
        "elliptic",
        "starkY",
        "hexToBn",
        "starkY",
        "sig",
        "sig",
        "y"
    ],
    "literals": [
        "'bn.js'",
        "'ethers'",
        "'elliptic'",
        "'../types'",
        "'../lib/util'",
        "'../lib/crypto'",
        "'../helpers'",
        "'./stark-signable'",
        "\"UserRegistration:\"",
        "'3618502788666131213697322783095070105526743751716087489154079457884512865583'",
        "string",
        "string",
        "'hex'",
        "'hex'",
        "'string'",
        "'address'",
        "'uint256'",
        "'hex'",
        "string",
        "string",
        "string",
        "0x${sig.r.iushln(32 * 8).iadd(sig.s).iushln(32 * 8).iadd(y).toString('hex', 96)}",
        "'hex'"
    ],
    "variables": [
        "REGISTRATION_PREFIX",
        "K_MODULUS",
        "ethKey",
        "starkKey",
        "hash",
        "hashBn",
        "hashBN",
        "ecSignature",
        "y"
    ],
    "comments": [],
    "docstrings": [
        "* Wrapper object to convert a transfer, and hash, sign, and verify its signature.",
        "* Sign the message with the given private key and employs custom sig packing to conform to\n     * the smart contract function"
    ],
    "functions": [
        "fromRegistration",
        "calculateHash",
        "sign",
        "serializeSignature",
        "toStarkware"
    ],
    "classes": [
        "SignableRegistration"
    ]
}