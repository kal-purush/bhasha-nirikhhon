{
    "identifiers": [
        "numpy",
        "np",
        "collections",
        "defaultdict",
        "arsenal",
        "colors",
        "f",
        "P",
        "n",
        "B",
        "P",
        "q",
        "B",
        "n",
        "B",
        "P",
        "p",
        "B",
        "q",
        "B",
        "D",
        "f",
        "p",
        "D",
        "f",
        "q",
        "S",
        "P",
        "P",
        "S",
        "P",
        "S",
        "f",
        "P",
        "defaultdict",
        "n",
        "f",
        "finv",
        "f",
        "n",
        "add",
        "n",
        "P",
        "stack",
        "stack",
        "pop",
        "union",
        "finv",
        "x",
        "x",
        "S",
        "B",
        "P",
        "split",
        "Sinv",
        "B",
        "len",
        "X",
        "len",
        "Y",
        "R",
        "add",
        "X",
        "R",
        "add",
        "Y",
        "len",
        "X",
        "len",
        "Y",
        "stack",
        "append",
        "X",
        "stack",
        "append",
        "Y",
        "R",
        "add",
        "B",
        "R",
        "P",
        "f",
        "P",
        "defaultdict",
        "n",
        "f",
        "finv",
        "f",
        "n",
        "add",
        "n",
        "P",
        "stack",
        "stack",
        "pop",
        "union",
        "finv",
        "x",
        "x",
        "S",
        "B",
        "P",
        "split",
        "Sinv",
        "B",
        "len",
        "X",
        "len",
        "Y",
        "R",
        "add",
        "X",
        "R",
        "add",
        "Y",
        "stack",
        "append",
        "X",
        "stack",
        "append",
        "Y",
        "R",
        "add",
        "B",
        "R",
        "P",
        "random",
        "_",
        "N",
        "random",
        "choices",
        "N",
        "k",
        "N",
        "random",
        "randint",
        "N",
        "np",
        "random",
        "permutation",
        "N",
        "P",
        "i",
        "P",
        "i",
        "slow",
        "f",
        "P",
        "hopcroft",
        "f",
        "P",
        "want",
        "have",
        "stable",
        "f",
        "have",
        "colors",
        "ok",
        "arsenal",
        "testing_framework",
        "testing_framework",
        "globals"
    ],
    "literals": [
        "\"Is partition P stable?\"",
        "'__main__'"
    ],
    "variables": [
        "D",
        "D",
        "q",
        "finv",
        "stack",
        "S",
        "R",
        "Sinv",
        "X",
        "Y",
        "P",
        "finv",
        "stack",
        "S",
        "R",
        "Sinv",
        "X",
        "Y",
        "P",
        "N",
        "f",
        "i",
        "P",
        "P",
        "want",
        "have"
    ],
    "comments": [
        "compute the pre-image of f",
        "empties in O(log n) steps",
        "new refinement",
        "compute subset of the pre-image in O(n) time",
        "entire loop runs in O(n) time",
        "runs in O(|B|) time",
        "X, Y are now part of the refinement",
        "Hopcroft's speed-up to the slower algorithm is that we",
        "only need to enqueue the smaller set.",
        "Q remains part of the refinement",
        "compute the pre-image of f",
        "empties in O(n) steps",
        "new refinement",
        "compute subset of the pre-image in O(n) time",
        "entire loop runs in O(n) time",
        "runs in O(|B|) time",
        "X, Y are now part of the refinement",
        "X, Y become future splitters",
        "Q remains part of the refinement",
        "create random total function",
        "create random partition",
        "print(want)"
    ],
    "docstrings": [
        "\"\"\"\n`PartitionRefinement` is a data structure for representing a partition of a\nset.  Unlike the better-known `UnionFind` data structure, which *merges* sets,\nthe `PartitionRefinement` data structure performs the \"dual\" operation of\n*splitting* sets.\n\nImportant use cases:\n  - Efficient DFA minimization\n\nReferences:\n  https://en.wikipedia.org/wiki/Partition_refinement\n\nOriginal version by Ryan Cotterell\n\n\"\"\""
    ],
    "functions": [
        "stable",
        "split",
        "hopcroft",
        "slow",
        "test_partition"
    ],
    "classes": []
}