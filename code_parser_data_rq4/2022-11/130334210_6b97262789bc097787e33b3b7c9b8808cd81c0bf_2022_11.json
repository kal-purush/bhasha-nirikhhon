{
    "identifiers": [
        "com",
        "secuconnect",
        "client",
        "api",
        "com",
        "google",
        "gson",
        "reflect",
        "TypeToken",
        "com",
        "secuconnect",
        "client",
        "com",
        "secuconnect",
        "client",
        "model",
        "CardprocessingInvoicesList",
        "com",
        "secuconnect",
        "client",
        "model",
        "CardprocessingInvoicesProductModel",
        "com",
        "secuconnect",
        "client",
        "model",
        "ProductExceptionPayload",
        "okhttp3",
        "Call",
        "java",
        "lang",
        "reflect",
        "Type",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "apiClient",
        "Environment",
        "getGlobalEnv",
        "getApiClient",
        "apiClient",
        "apiClient",
        "apiClient",
        "apiClient",
        "apiClient",
        "apiClient",
        "apiClient",
        "count",
        "offset",
        "fields",
        "q",
        "sort",
        "localVarPostBody",
        "localVarPath",
        "localVarQueryParams",
        "localVarCollectionQueryParams",
        "count",
        "localVarQueryParams",
        "addAll",
        "apiClient",
        "parameterToPair",
        "count",
        "offset",
        "localVarQueryParams",
        "addAll",
        "apiClient",
        "parameterToPair",
        "offset",
        "fields",
        "localVarQueryParams",
        "addAll",
        "apiClient",
        "parameterToPair",
        "fields",
        "q",
        "localVarQueryParams",
        "addAll",
        "apiClient",
        "parameterToPair",
        "q",
        "sort",
        "localVarQueryParams",
        "addAll",
        "apiClient",
        "parameterToPair",
        "sort",
        "localVarHeaderParams",
        "localVarFormParams",
        "localVarAccepts",
        "localVarAccept",
        "apiClient",
        "selectHeaderAccept",
        "localVarAccepts",
        "localVarAccept",
        "localVarHeaderParams",
        "put",
        "localVarAccept",
        "localVarContentTypes",
        "localVarContentType",
        "apiClient",
        "selectHeaderContentType",
        "localVarContentTypes",
        "localVarHeaderParams",
        "put",
        "localVarContentType",
        "localVarAuthNames",
        "apiClient",
        "buildCall",
        "localVarPath",
        "localVarQueryParams",
        "localVarCollectionQueryParams",
        "localVarPostBody",
        "localVarHeaderParams",
        "localVarFormParams",
        "localVarAuthNames",
        "SuppressWarnings",
        "count",
        "offset",
        "fields",
        "q",
        "sort",
        "getAllCall",
        "count",
        "offset",
        "fields",
        "q",
        "sort",
        "count",
        "offset",
        "fields",
        "q",
        "sort",
        "resp",
        "getAllWithHttpInfo",
        "count",
        "offset",
        "fields",
        "q",
        "sort",
        "resp",
        "getData",
        "count",
        "offset",
        "fields",
        "q",
        "sort",
        "call",
        "getAllValidateBeforeCall",
        "count",
        "offset",
        "fields",
        "q",
        "sort",
        "localVarReturnType",
        "getType",
        "apiClient",
        "execute",
        "call",
        "localVarReturnType",
        "count",
        "offset",
        "fields",
        "q",
        "sort",
        "callback",
        "call",
        "getAllValidateBeforeCall",
        "count",
        "offset",
        "fields",
        "q",
        "sort",
        "localVarReturnType",
        "getType",
        "apiClient",
        "executeAsync",
        "call",
        "localVarReturnType",
        "callback",
        "call",
        "cardprocessingInvoiceId",
        "localVarPostBody",
        "localVarPath",
        "replaceAll",
        "apiClient",
        "escapeString",
        "cardprocessingInvoiceId",
        "toString",
        "localVarQueryParams",
        "localVarCollectionQueryParams",
        "localVarHeaderParams",
        "localVarFormParams",
        "localVarAccepts",
        "localVarAccept",
        "apiClient",
        "selectHeaderAccept",
        "localVarAccepts",
        "localVarAccept",
        "localVarHeaderParams",
        "put",
        "localVarAccept",
        "localVarContentTypes",
        "localVarContentType",
        "apiClient",
        "selectHeaderContentType",
        "localVarContentTypes",
        "localVarHeaderParams",
        "put",
        "localVarContentType",
        "localVarAuthNames",
        "apiClient",
        "buildCall",
        "localVarPath",
        "localVarQueryParams",
        "localVarCollectionQueryParams",
        "localVarPostBody",
        "localVarHeaderParams",
        "localVarFormParams",
        "localVarAuthNames",
        "SuppressWarnings",
        "cardprocessingInvoiceId",
        "cardprocessingInvoiceId",
        "getOneCall",
        "cardprocessingInvoiceId",
        "cardprocessingInvoiceId",
        "resp",
        "getOneWithHttpInfo",
        "cardprocessingInvoiceId",
        "resp",
        "getData",
        "cardprocessingInvoiceId",
        "call",
        "getOneValidateBeforeCall",
        "cardprocessingInvoiceId",
        "localVarReturnType",
        "getType",
        "apiClient",
        "execute",
        "call",
        "localVarReturnType",
        "cardprocessingInvoiceId",
        "callback",
        "call",
        "getOneValidateBeforeCall",
        "cardprocessingInvoiceId",
        "localVarReturnType",
        "getType",
        "apiClient",
        "executeAsync",
        "call",
        "localVarReturnType",
        "callback",
        "call"
    ],
    "literals": [
        "\"/Cardprocessing/Invoices\"",
        "\"count\"",
        "\"offset\"",
        "\"fields\"",
        "\"q\"",
        "\"sort\"",
        "\"application/json\"",
        "\"Accept\"",
        "\"Content-Type\"",
        "\"oauth_token\"",
        "\"GET\"",
        "\"rawtypes\"",
        "\"/Cardprocessing/Invoices/{cardprocessingInvoiceId}\"",
        "\"\\\\{\"",
        "\"cardprocessingInvoiceId\"",
        "\"\\\\}\"",
        "\"application/json\"",
        "\"Accept\"",
        "\"Content-Type\"",
        "\"oauth_token\"",
        "\"GET\"",
        "\"rawtypes\"",
        "\"Missing the required parameter 'cardprocessingInvoiceId' when calling getOne(Async)\""
    ],
    "variables": [
        "apiClient"
    ],
    "comments": [
        "create path and map variables",
        "create path and map variables",
        "verify the required parameter 'cardprocessingInvoiceId' is set"
    ],
    "docstrings": [
        "* Build call for getAll\n     * @param count The maximum number of items to return\n     * @param offset The position within the whole result set to start returning items (zero-based)\n     * @param fields List of fields to include in the result. Nested properties can be accessed with this notation: &#x60;prop1.prop2&#x60;.\n     * @param q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form &#x60;property:condition&#x60;. Property names can be nested like &#x60;property.property&#x60;.  Example: &#x60;customer.name:Meier&#x60;  A condition may contain:  * &#x60;?&#x60; as wildcard for one character;  * &#x60;*&#x60; as wildcard for any number of characters.  You can also use value ranges in the form &#x60;[min TO max]&#x60;.  Example: &#x60;customer.age:[30 TO 40]&#x60;  You can combine expressions logically by &#x60;expr AND expr&#x60; and &#x60;{expr} OR {expr}&#x60;. You can also negate an expression using &#x60;NOT {expr}&#x60;. Parenthesis &#x60;(...)&#x60; can be used to control precedence.  Example: &#x60;(NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])&#x60;\n     * @param sort String with comma separated pairs of &#x60;field:order&#x60;.  Options for order:  * &#x60;asc&#x60; ascending;  * &#x60;dsc&#x60; descending.\n     * @return Call to execute\n     * @throws ApiException If fail to serialize the request body object",
        "* GET Cardprocessing/Invoices\n     * Get a list of cardprocessing invoices\n     * @param count The maximum number of items to return\n     * @param offset The position within the whole result set to start returning items (zero-based)\n     * @param fields List of fields to include in the result. Nested properties can be accessed with this notation: &#x60;prop1.prop2&#x60;.\n     * @param q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form &#x60;property:condition&#x60;. Property names can be nested like &#x60;property.property&#x60;.  Example: &#x60;customer.name:Meier&#x60;  A condition may contain:  * &#x60;?&#x60; as wildcard for one character;  * &#x60;*&#x60; as wildcard for any number of characters.  You can also use value ranges in the form &#x60;[min TO max]&#x60;.  Example: &#x60;customer.age:[30 TO 40]&#x60;  You can combine expressions logically by &#x60;expr AND expr&#x60; and &#x60;{expr} OR {expr}&#x60;. You can also negate an expression using &#x60;NOT {expr}&#x60;. Parenthesis &#x60;(...)&#x60; can be used to control precedence.  Example: &#x60;(NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])&#x60;\n     * @param sort String with comma separated pairs of &#x60;field:order&#x60;.  Options for order:  * &#x60;asc&#x60; ascending;  * &#x60;dsc&#x60; descending.\n     * @return CardprocessingInvoicesList\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body",
        "* GET Cardprocessing/Invoices\n     * Get a list of cardprocessing invoices\n     * @param count The maximum number of items to return\n     * @param offset The position within the whole result set to start returning items (zero-based)\n     * @param fields List of fields to include in the result. Nested properties can be accessed with this notation: &#x60;prop1.prop2&#x60;.\n     * @param q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form &#x60;property:condition&#x60;. Property names can be nested like &#x60;property.property&#x60;.  Example: &#x60;customer.name:Meier&#x60;  A condition may contain:  * &#x60;?&#x60; as wildcard for one character;  * &#x60;*&#x60; as wildcard for any number of characters.  You can also use value ranges in the form &#x60;[min TO max]&#x60;.  Example: &#x60;customer.age:[30 TO 40]&#x60;  You can combine expressions logically by &#x60;expr AND expr&#x60; and &#x60;{expr} OR {expr}&#x60;. You can also negate an expression using &#x60;NOT {expr}&#x60;. Parenthesis &#x60;(...)&#x60; can be used to control precedence.  Example: &#x60;(NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])&#x60;\n     * @param sort String with comma separated pairs of &#x60;field:order&#x60;.  Options for order:  * &#x60;asc&#x60; ascending;  * &#x60;dsc&#x60; descending.\n     * @return ApiResponse&lt;CardprocessingInvoicesList&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body",
        "* GET Cardprocessing/Invoices (asynchronously)\n     * Get a list of cardprocessing invoices\n     * @param count The maximum number of items to return\n     * @param offset The position within the whole result set to start returning items (zero-based)\n     * @param fields List of fields to include in the result. Nested properties can be accessed with this notation: &#x60;prop1.prop2&#x60;.\n     * @param q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form &#x60;property:condition&#x60;. Property names can be nested like &#x60;property.property&#x60;.  Example: &#x60;customer.name:Meier&#x60;  A condition may contain:  * &#x60;?&#x60; as wildcard for one character;  * &#x60;*&#x60; as wildcard for any number of characters.  You can also use value ranges in the form &#x60;[min TO max]&#x60;.  Example: &#x60;customer.age:[30 TO 40]&#x60;  You can combine expressions logically by &#x60;expr AND expr&#x60; and &#x60;{expr} OR {expr}&#x60;. You can also negate an expression using &#x60;NOT {expr}&#x60;. Parenthesis &#x60;(...)&#x60; can be used to control precedence.  Example: &#x60;(NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])&#x60;\n     * @param sort String with comma separated pairs of &#x60;field:order&#x60;.  Options for order:  * &#x60;asc&#x60; ascending;  * &#x60;dsc&#x60; descending.\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object",
        "* Build call for getOne\n     * @param cardprocessingInvoiceId Cardprocessing invoice id (required)\n     * @return Call to execute\n     * @throws ApiException If fail to serialize the request body object",
        "* GET Cardprocessing/Invoices/{cardprocessingInvoiceId}\n     * Get one specific cardprocessing invoice\n     * @param cardprocessingInvoiceId Cardprocessing invoice id (required)\n     * @return CardprocessingInvoicesProductModel\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body",
        "* GET Cardprocessing/Invoices/{cardprocessingInvoiceId}\n     * Get one specific cardprocessing invoice\n     * @param cardprocessingInvoiceId Cardprocessing invoice id (required)\n     * @return ApiResponse&lt;CardprocessingInvoicesProductModel&gt;\n     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body",
        "* GET Cardprocessing/Invoices/{cardprocessingInvoiceId} (asynchronously)\n     * Get one specific cardprocessing invoice\n     * @param cardprocessingInvoiceId Cardprocessing invoice id (required)\n     * @param callback The callback to be executed when the API call finishes\n     * @return The request call\n     * @throws ApiException If fail to process the API call, e.g. serializing the request body object"
    ],
    "functions": [
        "CardprocessingInvoicesApi",
        "CardprocessingInvoicesApi",
        "ApiClient",
        "getApiClient",
        "setApiClient",
        "Call",
        "getAllCall",
        "Call",
        "getAllValidateBeforeCall",
        "CardprocessingInvoicesList",
        "getAll",
        "getAllWithHttpInfo",
        "Call",
        "getAllAsync",
        "Call",
        "getOneCall",
        "Call",
        "getOneValidateBeforeCall",
        "CardprocessingInvoicesProductModel",
        "getOne",
        "getOneWithHttpInfo",
        "Call",
        "getOneAsync"
    ],
    "classes": [
        "CardprocessingInvoicesApi"
    ]
}