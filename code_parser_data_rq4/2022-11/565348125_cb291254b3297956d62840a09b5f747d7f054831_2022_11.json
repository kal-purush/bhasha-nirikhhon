{
    "identifiers": [
        "fs",
        "ora",
        "PromptData",
        "makeDirIfNotExists",
        "execAsync",
        "makeBackend",
        "data",
        "ora",
        "makeDirIfNotExists",
        "data",
        "makeDirIfNotExists",
        "data",
        "data",
        "fs",
        "data",
        "data",
        "makeManage",
        "data",
        "makeSettings",
        "data",
        "makeWsgiAndAsgi",
        "data",
        "makeUrls",
        "data",
        "spinner",
        "spinner",
        "data",
        "execAsync",
        "djazztroPath",
        "data",
        "data",
        "execAsync",
        "data",
        "data",
        "makePyProject",
        "data",
        "execAsync",
        "djazztroPath",
        "data",
        "data",
        "execAsync",
        "data",
        "execAsync",
        "djazztroPath",
        "data",
        "data",
        "execAsync",
        "data",
        "spinner",
        "data",
        "spinner",
        "execAsync",
        "data",
        "data",
        "spinner",
        "spinner",
        "execAsync",
        "data",
        "data",
        "spinner",
        "makeManage",
        "data",
        "data",
        "fs",
        "data",
        "manage",
        "makeSettings",
        "data",
        "data",
        "data",
        "fs",
        "data",
        "data",
        "settings",
        "makeWsgiAndAsgi",
        "data",
        "fs",
        "data",
        "data",
        "wsgi",
        "fs",
        "data",
        "data",
        "asgi",
        "makeUrls",
        "data",
        "data",
        "fs",
        "data",
        "data",
        "urls",
        "makePyProject",
        "data",
        "data",
        "data",
        "fs",
        "data",
        "pyproject"
    ],
    "literals": [
        "\"fs\"",
        "\"ora\"",
        "\"./main.js\"",
        "\"./utils.js\"",
        "\"C:\\\\Users\\\\bwc67\\\\Documents\\\\Actual Documents\\\\Djazztro\\\\Packages\\\\django-djazztro\"",
        "\"Creating Backend Folder\"",
        "${data.projectName}/backend",
        "${data.projectName}/backend/${data.projectName}",
        "${data.projectName}/backend/${data.projectName}/__init__.py",
        "\"\"",
        "\"Created Backend Folder\"",
        "\"Installing Backend Dependencies\"",
        "\"pip\"",
        "pip install django \"${djazztroPath}\"",
        "${data.projectName}/backend",
        "\"Black\"",
        "pip install black",
        "${data.projectName}/backend",
        "\"poetry\"",
        "poetry add django \"${djazztroPath}\"",
        "${data.projectName}/backend",
        "\"Black\"",
        "poetry add black --group dev",
        "${data.projectName}/backend",
        "pipenv install django \"${djazztroPath}\"",
        "${data.projectName}/backend",
        "\"Black\"",
        "pipenv install black --dev",
        "${data.projectName}/backend",
        "\"Installed Backend Dependencies\"",
        "\"Black\"",
        "\"Formatting With Black\"",
        "${data.nodePackageManager} run black .",
        "${data.projectName}/backend",
        "\"Formatted With Black\"",
        "\"Migrating Database\"",
        "${data.nodePackageManager} run django migrate",
        "${data.projectName}",
        "\"Migrated Database\"",
        "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', '${data.projectName}.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()",
        "${data.projectName}/backend/manage.py",
        "import os\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'django-insecure-lwdwxm!i6*e^-3hn+6pzf^%2entnco98#t@8yty-z08l^&pirs'\nDEBUG = os.getenv(\"DEBUG\", \"True\") == \"True\"\nALLOWED_HOSTS = [\"*\"]\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django_djazztro'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = '${data.projectName}.urls'\n\nTEMPLATES = [\n    # Here for the admin module\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n    {\n        'BACKEND': 'django_djazztro.backends.DjazztroBackend',\n        'DIRS': [BASE_DIR / \"../dist/templates\"],\n        'APP_DIRS': False,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n    \n\nWSGI_APPLICATION = '${data.projectName}.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "${data.projectName}/backend/${data.projectName}/settings.py",
        "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')\n\napplication = get_wsgi_application()",
        "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TestProject.settings')\n\napplication = get_asgi_application()",
        "${data.projectName}/backend/${data.projectName}/wsgi.py",
        "${data.projectName}/backend/${data.projectName}/asgi.py",
        "from django.contrib import admin\nfrom django.urls import path\nfrom django.shortcuts import render\n\n# Simple test view to make sure the backend is working, for actual projects you should make a seperate app with \"${data.nodePackageManager} run django startapp <appname>\"\ndef home(request):\n    return render(request, \"index\", {\"test\": \"Hello World!\"})\n\nurlpatterns = [\n    path('', home)\n]",
        "${data.projectName}/backend/${data.projectName}/urls.py",
        "[tool.poetry]\nname = \"${data.projectName}\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"${data.projectAuthor}\"]\n\n[tool.poetry.dependencies]\npython = \"^3.10\"",
        "${data.projectName}/backend/pyproject.toml"
    ],
    "variables": [
        "djazztroPath",
        "makeBackend",
        "spinner",
        "makeManage",
        "manage",
        "makeSettings",
        "settings",
        "makeWsgiAndAsgi",
        "wsgi",
        "asgi",
        "makeUrls",
        "urls",
        "makePyProject",
        "pyproject"
    ],
    "comments": [
        "TODO: Cheating rn with djazztro bc i don't feel like uploading yet"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}