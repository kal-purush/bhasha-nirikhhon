{
    "identifiers": [
        "torch",
        "torchmetrics",
        "Metric",
        "torchmetrics",
        "functional",
        "regression",
        "mae",
        "_mean_absolute_error_compute",
        "_mean_absolute_error_update",
        "typing",
        "Optional",
        "Tuple",
        "Metric",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "diagonal",
        "Optional",
        "diagonal_dims",
        "Optional",
        "Tuple",
        "dist_sync_on_step",
        "dist_sync_on_step",
        "dist_sync_on_step",
        "add_state",
        "torch",
        "tensor",
        "dist_reduce_fx",
        "add_state",
        "torch",
        "tensor",
        "dist_reduce_fx",
        "diagonal",
        "diagonal_dims",
        "preds",
        "torch",
        "Tensor",
        "target",
        "torch",
        "Tensor",
        "_input_format",
        "preds",
        "_input_format",
        "target",
        "_mean_absolute_error_update",
        "preds",
        "target",
        "sum_abs_error",
        "sum_abs_error",
        "total",
        "n_obs",
        "torch",
        "Tensor",
        "_mean_absolute_error_compute",
        "sum_abs_error",
        "total",
        "x",
        "torch",
        "Tensor",
        "_diagonal_mask",
        "_init_diag_mask",
        "x",
        "x",
        "masked_select",
        "_diagonal_mask",
        "x",
        "torch",
        "Tensor",
        "torch",
        "Tensor",
        "x",
        "shape",
        "tensor_shape",
        "diagonal_dims",
        "tensor_shape",
        "diagonal_dims",
        "dim_0",
        "dim_1",
        "AssertionError",
        "_",
        "tensor_shape",
        "diagonal_dims",
        "dim_0",
        "diagonal_dims",
        "dim_1",
        "torch",
        "eye",
        "dim_0",
        "device",
        "x",
        "device",
        "dtype",
        "torch",
        "view",
        "view",
        "diagonal",
        "diag_mask",
        "diag_mask"
    ],
    "literals": [
        "\"TensorDiagonalMeanAbsoluteError\"",
        "\"sum_abs_error\"",
        "\"sum\"",
        "\"total\"",
        "\"sum\"",
        "\"Found different size for diagonal dimensions, expected square sub matrix.\""
    ],
    "variables": [
        "__all__",
        "is_differentiable",
        "higher_is_better",
        "sum_abs_error",
        "total",
        "diagonal",
        "diagonal_dims",
        "_diagonal_mask",
        "preds",
        "target",
        "sum_abs_error",
        "n_obs",
        "_diagonal_mask",
        "tensor_shape",
        "dim_0",
        "dim_1",
        "view",
        "view",
        "view",
        "diag_mask"
    ],
    "comments": [
        "call `self.add_state`for every internal state that is needed for the metrics computations",
        "dist_reduce_fx indicates the function that should be used to reduce",
        "state from multiple processes",
        "update metric states",
        "compute final result"
    ],
    "docstrings": [
        "\"\"\"\n    Custom torch metric for monitoring the mean absolute error on the diagonals and offdiagonals of tensors, e.g.\n    polarizability.\n    \"\"\"",
        "\"\"\"\n\n        Args:\n            diagonal (bool): If true, diagonal values are used, if False off-diagonal.\n            diagonal_dims (tuple(int,int)): axes of the square matrix for which the diagonals should be considered.\n            dist_sync_on_step (bool): synchronize.\n        \"\"\"",
        "\"\"\"\n        Update the metric.\n\n        Args:\n            preds (torch.Tensor): network predictions.\n            target (torch.Tensor): reference values.\n        \"\"\"",
        "\"\"\"\n        Compute the final metric.\n\n        Returns:\n            torch.Tensor: mean absolute error of diagonal or offdiagonal elements.\n        \"\"\"",
        "\"\"\"\n        Extract diagonal / offdiagonal elements from input tensor.\n\n        Args:\n            x (torch.Tensor): input tensor.\n\n        Returns:\n            torch.Tensor: extracted and flattened elements (diagonal / offdiagonal)\n        \"\"\"",
        "\"\"\"\n        Initialize the mask for extracting the diagonal elements based on the given axes and the shape of the\n        input tensor.\n\n        Args:\n            x (torch.Tensor): input tensor.\n\n        Returns:\n            torch.Tensor: Boolean diagonal mask.\n        \"\"\""
    ],
    "functions": [
        "update",
        "compute",
        "_input_format",
        "_init_diag_mask"
    ],
    "classes": [
        "TensorDiagonalMeanAbsoluteError"
    ]
}