{
    "identifiers": [
        "numpy",
        "np",
        "torch",
        "torchani",
        "ash",
        "modules",
        "module_coords",
        "ash",
        "modules",
        "module_coords",
        "elematomnumbers",
        "ash",
        "functions",
        "functions_general",
        "ashexit",
        "BC",
        "fragment",
        "qmatoms",
        "printlevel",
        "numcores",
        "isinstance",
        "fragment",
        "ash",
        "modules",
        "module_coords",
        "Fragment",
        "fragment",
        "isinstance",
        "qmatoms",
        "np",
        "ndarray",
        "all",
        "isinstance",
        "x",
        "x",
        "qmatoms",
        "_fragment",
        "numatoms",
        "qmatom",
        "qmatoms",
        "qmatom",
        "qmatom",
        "num_atoms",
        "ValueError",
        "qmatom",
        "num_atoms",
        "qmatoms",
        "printlevel",
        "printlevel",
        "atom",
        "_qmatoms",
        "_fragment",
        "elems",
        "atom",
        "lower",
        "atomic_numbers",
        "append",
        "elematomnumbers",
        "elem",
        "torch",
        "device",
        "torch",
        "cuda",
        "is_available",
        "torchani",
        "models",
        "ANI2x",
        "periodic_table_index",
        "to",
        "_device",
        "torch",
        "tensor",
        "atomic_numbers",
        "device",
        "_device",
        "current_coords",
        "charge",
        "mult",
        "current_MM_coords",
        "MMcharges",
        "qm_elems",
        "Grad",
        "numcores",
        "label",
        "_printlevel",
        "BC",
        "OKBLUE",
        "BC",
        "BOLD",
        "BC",
        "END",
        "current_MM_coords",
        "MMcharges",
        "isinstance",
        "current_coords",
        "np",
        "ndarray",
        "current_coords",
        "dtype",
        "np",
        "float64",
        "isinstance",
        "qm_elems",
        "all",
        "isinstance",
        "x",
        "x",
        "qm_elems",
        "isinstance",
        "Grad",
        "label",
        "isinstance",
        "label",
        "torch",
        "tensor",
        "np",
        "float32",
        "current_coords",
        "requires_grad",
        "Grad",
        "device",
        "_device",
        "_model",
        "_qm_atomic_numbers",
        "coords",
        "energies",
        "Grad",
        "energy",
        "detach",
        "numpy",
        "torch",
        "autograd",
        "grad",
        "energy",
        "sum",
        "coords",
        "energy",
        "detach",
        "numpy",
        "gradient",
        "numpy"
    ],
    "literals": [
        "\"'fragment' must be of type 'ash.modules.module_coords.Fragment'.\"",
        "\"'qmatoms' must be of type 'list', 'tuple', or 'numpy.ndarray'.\"",
        "\"'qmatoms' can only contain items of type 'int'.\"",
        "f\"'qmatoms' index {qmatom} outside range of \"",
        "f\"fragment with {num_atoms} atoms.\"",
        "\"'printlevel' must be of type 'int'.\"",
        "\"cuda\"",
        "\"cpu\"",
        "\"------------RUNNING TORCHANI INTERFACE-------------\"",
        "\"'current_MM_coords' is not 'None'. TorchANITheory \"",
        "\"only supports calculations for the QM region only.\"",
        "\"'MMcharges' is not 'None'. TorchANITheory doesn't support \"",
        "\"electrostatic embedding!\"",
        "\"'current_coords' must be of type 'numpy.ndarray'.\"",
        "\"'current_coords' must have dtype 'float64'.\"",
        "\"'qm_elems' must be of type 'list'.\"",
        "\"'qm_elems' must be a list of 'str' types.\"",
        "\"'Grad' must be of type 'bool'.\"",
        "\"'label' must be of type 'str'.\""
    ],
    "variables": [
        "_fragment",
        "num_atoms",
        "_qmatoms",
        "_printlevel",
        "atomic_numbers",
        "elem",
        "_device",
        "_model",
        "_qm_atomic_numbers",
        "numcores",
        "coords",
        "energy",
        "gradient"
    ],
    "comments": [
        "",
        "TorchANI interface: https://github.com/aiqm/torchani",
        "",
        "Copyright: 2022",
        "",
        "Authors: Lester Hedges   <lester.hedges@gmail.com>",
        "",
        "This program is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 2 of the License, or",
        "(at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with this program If not, see <http://www.gnu.org/licenses/>.",
        "",
        "Follow ASH style for constructor, where required arguments are keywords,",
        "rather than positional arguments.",
        "Validate input.",
        "Work out the atomic numbers for the elements in the QM region.",
        "Because ASH pefroms zero self-consistency checks, these could be",
        "different to those of the qm_elems when the run method is called.",
        "We assume that no-one is stupid enough to do this.",
        "Get the element as a lower case string.",
        "Store the atominic number.",
        "Create the device. Use CUDA as the default, falling back on CPU.",
        "Create the model.",
        "Convert the atomic numbers to a Torch tensor.",
        "Set the number of cores. Needed to be used as a QMTheory, but",
        "completely redundant.",
        "Match run function of other interface objects.",
        "Validate the input. Annoyingly, the user could call the run method",
        "using input that is inconsistent with that used to instatiate the",
        "MLMM object, i.e. coordinates corresponding to a different fragment,",
        "or QM region. This is a general issue with ASH, though, and there",
        "is no type checking or data validation elsewhere in the code. Here",
        "we assume that the data is consistent and simply type check the input.",
        "Convert the coordinates to a Torch tensor, casting to 32-bit floats.",
        "Compute the energy.",
        "Optionally, compute the gradients too."
    ],
    "docstrings": [
        "\"\"\"Constructor.\n\n           Parameters\n           ----------\n\n           fragment : ash.Fragment\n               The ASH fragment object.\n\n           qmatoms : [int]\n               Indices of atoms in the QM region.\n\n           printlevel : int\n               Verbosity level.\n        \"\"\"",
        "\"\"\"Calculate the energy and (optionally) gradients.\n\n           Parameters\n           ----------\n\n           current_coords : numpy.ndarray\n               The current QM coordinates.\n\n           charge : int\n               Charge of the QM region.\n\n           mult : int\n               Spin multiplicity of the QM region.\n\n           current_MM_coords : numpy.ndarray\n               The MM point-charge coordinates.\n\n           MMcharges : [ float ]\n               The MM point-charge charges.\n\n           qm_elems : [ str ]\n               A list of elements for the QM region.\n\n           Grad : bool\n               Whether to compute gradients.\n\n           numcores : int\n               The number of cores to use for the QM backend.\n\n           label : str\n               Job identification string.\n        \"\"\""
    ],
    "functions": [
        "run"
    ],
    "classes": [
        "TorchANITheory"
    ]
}