{
    "identifiers": [
        "os",
        "os",
        "environ",
        "os",
        "environ",
        "aggle",
        "datasets",
        "download",
        "d",
        "aprabowo",
        "indonesia",
        "tourism",
        "destination",
        "f",
        "tourism_with_id",
        "csv",
        "p",
        "aggle",
        "datasets",
        "download",
        "d",
        "aprabowo",
        "indonesia",
        "tourism",
        "destination",
        "f",
        "tourism_rating",
        "csv",
        "p",
        "pandas",
        "pd",
        "pd",
        "read_csv",
        "pd",
        "read_csv",
        "len",
        "places",
        "Place_Id",
        "unique",
        "len",
        "ratings",
        "Place_Ratings",
        "places",
        "info",
        "places",
        "head",
        "places",
        "describe",
        "ratings",
        "info",
        "ratings",
        "head",
        "ratings",
        "describe",
        "places",
        "drop",
        "axis",
        "places",
        "isnull",
        "sum",
        "ratings",
        "isnull",
        "sum",
        "places",
        "duplicated",
        "sum",
        "ratings",
        "duplicated",
        "sum",
        "ratings",
        "drop_duplicates",
        "inplace",
        "pandas",
        "pd",
        "numpy",
        "np",
        "zipfile",
        "ZipFile",
        "tensorflow",
        "tf",
        "tensorflow",
        "keras",
        "tensorflow",
        "keras",
        "layers",
        "pathlib",
        "Path",
        "matplotlib",
        "pyplot",
        "plt",
        "ratings",
        "unique",
        "tolist",
        "user_ids",
        "x",
        "i",
        "i",
        "x",
        "user_ids",
        "user_to_user_encoded",
        "i",
        "x",
        "i",
        "x",
        "user_ids",
        "user_encoded_to_user",
        "ratings",
        "unique",
        "tolist",
        "x",
        "i",
        "i",
        "x",
        "place_ids",
        "i",
        "x",
        "i",
        "x",
        "place_ids",
        "ratings",
        "user_to_user_encoded",
        "ratings",
        "place_to_place_encoded",
        "len",
        "user_to_user_encoded",
        "len",
        "place_encoded_to_place",
        "ratings",
        "values",
        "astype",
        "np",
        "float32",
        "min",
        "ratings",
        "max",
        "ratings",
        "users_count",
        "place_count",
        "min_rating",
        "max_rating",
        "ratings",
        "sample",
        "frac",
        "random_state",
        "ratings",
        "ratings",
        "values",
        "ratings",
        "apply",
        "x",
        "x",
        "min_rating",
        "max_rating",
        "min_rating",
        "values",
        "ratings",
        "shape",
        "x",
        "train_indices",
        "x",
        "train_indices",
        "y",
        "train_indices",
        "y",
        "train_indices",
        "x",
        "y",
        "keras",
        "saving",
        "register_keras_serializable",
        "tf",
        "keras",
        "Model",
        "users_count",
        "place_count",
        "embedding_size",
        "kwargs",
        "RecommenderNet",
        "kwargs",
        "users_count",
        "place_count",
        "embedding_size",
        "layers",
        "Embedding",
        "users_count",
        "embedding_size",
        "embeddings_initializer",
        "embeddings_regularizer",
        "keras",
        "regularizers",
        "l2",
        "layers",
        "Embedding",
        "users_count",
        "layers",
        "Embedding",
        "place_count",
        "embedding_size",
        "embeddings_initializer",
        "embeddings_regularizer",
        "keras",
        "regularizers",
        "l2",
        "layers",
        "Embedding",
        "place_count",
        "inputs",
        "user_embedding",
        "inputs",
        "user_bias",
        "inputs",
        "place_embedding",
        "inputs",
        "place_bias",
        "inputs",
        "tf",
        "tensordot",
        "user_vector",
        "place_vector",
        "dot_user_place",
        "user_bias",
        "place_bias",
        "tf",
        "nn",
        "sigmoid",
        "x",
        "RecommenderNet",
        "users_count",
        "place_count",
        "tf",
        "keras",
        "models",
        "Sequential",
        "model_rec",
        "Dense",
        "activation",
        "input_shape",
        "input_shape",
        "Dense",
        "activation",
        "Dense",
        "activation",
        "model",
        "compile",
        "loss",
        "tf",
        "keras",
        "losses",
        "BinaryCrossentropy",
        "optimizer",
        "keras",
        "optimizers",
        "Adam",
        "learning_rate",
        "metrics",
        "tf",
        "keras",
        "metrics",
        "RootMeanSquaredError",
        "keras",
        "callbacks",
        "EarlyStopping",
        "EarlyStopping",
        "min_delta",
        "patience",
        "restore_best_weights",
        "model",
        "fit",
        "x",
        "x_train",
        "y",
        "y_train",
        "batch_size",
        "epochs",
        "validation_data",
        "x_val",
        "y_val",
        "callbacks",
        "callbacks",
        "plt",
        "plot",
        "history",
        "history",
        "plt",
        "plot",
        "history",
        "history",
        "plt",
        "title",
        "plt",
        "ylabel",
        "plt",
        "xlabel",
        "plt",
        "legend",
        "loc",
        "plt",
        "show",
        "plt",
        "plot",
        "history",
        "history",
        "plt",
        "plot",
        "history",
        "history",
        "plt",
        "title",
        "plt",
        "ylabel",
        "plt",
        "xlabel",
        "plt",
        "legend",
        "loc",
        "plt",
        "show",
        "places",
        "ratings",
        "ratings_df",
        "User_Id",
        "sample",
        "iloc",
        "ratings_df",
        "ratings_df",
        "User_Id",
        "user_id",
        "place_df",
        "place_df",
        "isin",
        "place_rated",
        "Place_Id",
        "values",
        "place_not_rated",
        "intersection",
        "place_to_place_encoded",
        "keys",
        "place_to_place_encoded",
        "get",
        "x",
        "x",
        "place_not_rated",
        "user_to_user_encoded",
        "get",
        "user_id",
        "np",
        "hstack",
        "user_encoder",
        "len",
        "place_not_rated",
        "place_not_rated",
        "model",
        "predict",
        "user_place_array",
        "flatten",
        "ratings",
        "argsort",
        "place_encoded_to_place",
        "get",
        "place_not_rated",
        "x",
        "x",
        "top_ratings_indices",
        "format",
        "user_id",
        "place_rated",
        "sort_values",
        "by",
        "ascending",
        "head",
        "Place_Id",
        "values",
        "place_df",
        "place_df",
        "isin",
        "top_place_user",
        "row",
        "place_df_rows",
        "itertuples",
        "row",
        "Place_Name",
        "row",
        "Category",
        "place_df",
        "place_df",
        "isin",
        "recommended_place_ids",
        "row",
        "recommended_place",
        "itertuples",
        "row",
        "Place_Name",
        "row",
        "Category"
    ],
    "literals": [
        "'KAGGLE_USERNAME'",
        "'raflimuhamm'",
        "'KAGGLE_KEY'",
        "'f2ae9f96f96b810defeca3882af455c8'",
        "'tourism_with_id.csv'",
        "'tourism_rating.csv'",
        "'Jumlah places: '",
        "'Jumlah ratings: '",
        "'Description'",
        "'City'",
        "'Price'",
        "'Rating'",
        "'Time_Minutes'",
        "'Coordinate'",
        "'Lat'",
        "'Long'",
        "'Image_Link'",
        "'Unnamed_1'",
        "'Unnamed_2'",
        "f'Jumlah data places yang duplikat: {places.duplicated().sum()}'",
        "f'Jumlah data rating yang duplikat: {ratings.duplicated().sum()}'",
        "'User_Id'",
        "'list User_Id: '",
        "'encoded User_Id : '",
        "'encoded angka ke User_Id: '",
        "'Place_Id'",
        "'user'",
        "'User_Id'",
        "'place'",
        "'Place_Id'",
        "'rating'",
        "'Place_Ratings'",
        "'rating'",
        "'rating'",
        "f'Users Count: {users_count}'",
        "f'Places Count: {place_count}'",
        "f'Min rating: {min_rating}'",
        "f'Max rating: {max_rating}'",
        "'user'",
        "'place'",
        "'rating'",
        "\"MyLayers\"",
        "'he_normal'",
        "'he_normal'",
        "'relu'",
        "'relu'",
        "'sigmoid'",
        "'root_mean_squared_error'",
        "'val_root_mean_squared_error'",
        "'model error'",
        "'root_mean_squared_error'",
        "'epoch'",
        "'train'",
        "'test'",
        "'upper left'",
        "'loss'",
        "'val_loss'",
        "'model loss'",
        "'loss'",
        "'epoch'",
        "'train'",
        "'test'",
        "'upper left'",
        "'Place_Id'",
        "'Place_Id'",
        "'Showing recommendations for users: {}'",
        "'====='",
        "'Place with high ratings from user'",
        "'-----'",
        "'rating'",
        "'Place_Id'",
        "':'",
        "'-----'",
        "'Top 10 place recommendation'",
        "'-----'",
        "'Place_Id'",
        "':'"
    ],
    "variables": [
        "places",
        "ratings",
        "places",
        "user_ids",
        "user_to_user_encoded",
        "user_encoded_to_user",
        "place_ids",
        "place_to_place_encoded",
        "place_encoded_to_place",
        "ratings",
        "ratings",
        "users_count",
        "place_count",
        "ratings",
        "min_rating",
        "max_rating",
        "ratings",
        "x",
        "y",
        "train_indices",
        "x_train",
        "x_val",
        "y_train",
        "y_val",
        "users_count",
        "place_count",
        "embedding_size",
        "user_embedding",
        "user_bias",
        "place_embedding",
        "place_bias",
        "user_vector",
        "user_bias",
        "place_vector",
        "place_bias",
        "dot_user_place",
        "x",
        "input_shape",
        "model_rec",
        "model",
        "callbacks",
        "history",
        "place_df",
        "ratings_df",
        "user_id",
        "place_rated",
        "place_not_rated",
        "place_not_rated",
        "place_not_rated",
        "user_encoder",
        "user_place_array",
        "ratings",
        "top_ratings_indices",
        "recommended_place_ids",
        "top_place_user",
        "place_df_rows",
        "recommended_place"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "Download tourism_with_id.csv dan tourism_rating.csv ke local directory",
        "Assuming your input data has 1 feature for each of the 8 samples",
        "Membuat model RecommenderNet",
        "Membuat model Sequential",
        "Output layer with 1 unit for binary classification",
        "Compile model dengan optimizer dan metrik yang diinginkan"
    ],
    "docstrings": [
        "\"\"\"Yang Bener.ipynb\n\nAutomatically generated by Colaboratory.\n\nOriginal file is located at\n    https://colab.research.google.com/drive/1eLtt9KCJYRdRGuSk_YTg6_cK6Epdzt_b\n\n# Recommendation System\n\n# 1. Data Loading\n\n## 1.1. Kaggle Credentials\n\nKaggle Username dan Kaggle Key diperlukan untuk mengakses dataset pada Kaggle. Kedua variabel tersebut kemudian disimpan dalam environment variable dengan bantuan library `os`.\n\"\"\"",
        "\"\"\"## 1.2. Download the Dataset\n\nDataset yang digunakan adalah [Indonesia Tourism Destination](https://www.kaggle.com/datasets/aprabowo/indonesia-tourism-destination) dengan `tourism_with_id.csv` dan `tourism_rating.csv` sebagai dataset.\n\"\"\"",
        "\"\"\"# 2. Data Understanding\n\n## 2.1. Jumlah Data\n\nMenampilkan masing-masing dataset yaitu `tourism_with_id.csv` dan `tourism_rating.csv` menggunakan library pandas dari format .csv menjadi dataframe.\n\"\"\"",
        "\"\"\"## 2.2. Univariate Exploratory Data Analysis (EDA)\n\nDi sini akan dilakukan proses investigasi awal pada data untuk menganalisis karakteristik, menemukan pola, anomali, dan memeriksa asumsi pada data.\n\n### 2.2.1. Dataset Tourism Destinations (Places)\n\nPengecekan informasi variabel dari dataset places berupa jumlah kolom, nama kolom, jumlah data per kolom dan tipe datanya.\n\"\"\"",
        "\"\"\"File ini terdiri dari 10 kolom sebagai berikut:\n\n- Place_Id: kolom yang menunjukkan id dari setiap tempat wisata.\n- Place_Name: kolom yang menunjukkan nama dari setiap tempat wisata.\n- Description: kolom yang menunjukkan deskripsi dari setiap tempat wisata.\n- Category: kolom yang menunjukkan kategori dari setiap tempat wisata.\n- City: kolom yang menunjukkan kota dimana tempat wisata tersebut berada.\n- Price: kolom yang menunjukkan harga tiket masuk ke tempat wisata tersebut.\n- Rating: kolom yang menunjukkan rating dari setiap tempat wisata.\n- Time_Minutes: kolom yang menunjukkan waktu yang diperlukan untuk mengunjungi tempat wisata tersebut.\n- Coordinate: kolom yang menunjukkan koordinat dari setiap tempat wisata.\n- Lat: kolom yang menunjukkan latitude dari setiap tempat wisata.\n- Long: kolom yang menunjukkan longitude dari setiap tempat wisata.\n\nMenampilkan sample dataset places.\n\"\"\"",
        "\"\"\"Melakukan pengecekan deskripsi statistik dataset places dengan fitur describe().\"\"\"",
        "\"\"\"Berdasarkan output diatas, didapatkan deskripsi statistik yaitu:\n1. count: Jumlah sampel data\n2. mean: Nilai rata-rata\n3. std: Standar deviasi\n4. min: Nilai minimum\n5. 25%: Kuartil bawah/Q1\n6. 50%: Kuartil tengah/Q2/median\n7. 75%: Kuartil atas/Q3\n8. max: Nilai maksimum\n\n### 2.2.2. Dataset Ratings\n\nPengecekan informasi variabel dari dataset ratings berupa jumlah kolom, nama kolom, jumlah data per kolom dan tipe datanya.\n\"\"\"",
        "\"\"\"File ini terdiri dari 3 kolom sebagai berikut:\n\n- User_Id: identitas unik dari setiap pengguna.\n- Place_Id: identitas unik dari setiap tempat wisata.\n- Place_Ratings: penilaian atau rating yang diberikan oleh pengguna terhadap tempat wisata tertentu.\n\nMenampilkan sample dataset ratings.\n\"\"\"",
        "\"\"\"Melakukan pengecekan deskripsi statistik dataset ratings dengan fitur describe().\"\"\"",
        "\"\"\"# **3. Data Preparation**\n\nTahap data preparation merupakan proses transformasi data menjadi bentuk yang dapat diterima oleh model machine learning nanti. Proses data preparation yang dilakukan, yaitu membersihkan data missing value, dan melakukan pengecekan data duplikat.\n\n## 3.1. Menghapus Kolom yang Tidak Diperlukan\n\nData yang diperlukan hanya ada pada kolom `Place_Id`, `Place_Name`, dan `Category`, jadi hapus yang lain.\n\"\"\"",
        "\"\"\"## 3.2. Pengecekan Missing Value\"\"\"",
        "\"\"\"## 3.3. Pengecekan Data Duplikat\"\"\"",
        "\"\"\"Menghapus duplicate\"\"\"",
        "\"\"\"# **4. Model Development dengan Collaborative Filtering**\n\nCollaborative Filtering adalah teknik merekomendasikan item yang mirip dengan preferensi pengguna yang sama di masa lalu, misalnya berdasarkan penilaian tempat yang telah diberikan oleh seorang pengguna. Sistem akan merekomendasikan tempat berdasarkan riwayat penilaian pengguna tersebut terhadap tempat dan kategorinya.\n\n### 4.1. Data Preparation\n\"\"\"",
        "\"\"\"Proses encoding fitur User_Id pada dataset ratings menjadi array.\"\"\"",
        "\"\"\"Proses encoding fitur Place_Id pada dataset ratings menjadi array.\"\"\"",
        "\"\"\"Melakukan mapping atau pemetaan kolom user dan place ke dataset ratings yang berkaitan.\"\"\"",
        "\"\"\"Melakukan pengecekan jumlah user, jumlah tempat, penilaian minimal, dan penilaian maksimal.\"\"\"",
        "\"\"\"### 4.2. Split Data Latih dan Data Validasi\n\nMengacak dataset ratings.\n\"\"\"",
        "\"\"\"Membagi dataset menjadi data latih (train) dan data uji (test), yaitu sebesar 20% data uji dan 80% data latih.\"\"\"",
        "\"\"\"### 4.3. Model Development\n\nMelakukan pendefinisian kelas RecommenderNet untuk membangun model klasifikasi teks tersebut. Model ini akan memberikan rekomendasi kepada pengguna berdasarkan preferensi atau kecenderungan pengguna di masa lalu. Model ini dapat digunakan dalam berbagai bidang, seperti rekomendasi film, musik, produk, dan lain-lain. RecommenderNet menggunakan algoritma pembelajaran mesin seperti collaborative filtering atau content-based filtering untuk menentukan rekomendasi yang tepat untuk pengguna.\n\nParameter yang digunakan dalam model ini adalah:\n- users_count: jumlah user yang akan jadi input dimension pada user embedding, tepatnya sebagai jumlah elemen dari vocabulary atau kata-kata yang digunakan dalam input data\n- place_count: jumlah tempat yang akan jadi input dimension pada tempat embedding, tepatnya sebagai jumlah elemen dari vocabulary atau kata-kata yang digunakan dalam input data\n- embedding_size: ukuran embedding akan jadi output dimension pada user embedding dan tempat embedding, yaitu jumlah fitur yang dihasilkan oleh Embedding layer, yang merupakan hasil pengurangan dimensi dari input data.\n\nEmbedding layer ini akan mengubah representasi numerik dari input data menjadi representasi vektor yang lebih bermakna dan dapat dipahami oleh model machine learning.\n\"\"\"",
        "\"\"\"Proses kompilasi atau compile dengan:\n- binary crossentropy loss function: loss function untuk menghitung loss pada model klasifikasi biner.\n- adam optimizer: algoritma optimisasi yang digunakan untuk mengupdate bobot pada model machine learning secara efisien.\n- metrik RMSE (Root Mean Square Error): metrik yang digunakan untuk mengukur seberapa jauh hasil prediksi dari model dari nilai aktual. RMSE dihitung dengan mencari rata-rata dari kuadrat error yang diakumulasikan dari seluruh data.\n\"\"\"",
        "\"\"\"Menambahkan callback EarlyStopping yang akan menghentikan training jika tidak ada peningkatan selama 5 epochs.\"\"\"",
        "\"\"\"Melatih model.\"\"\"",
        "\"\"\"Visualisasi grafik data training dan testing untuk masing-masing metrik Root Mean Square Error dan loss function.\"\"\"",
        "\"\"\"### 4.4. Tes Rekomendasi\n\nMelakukan uji coba atau tes rekomendasi tempat yang diberikan. Namun perlu dikertahui terlebih dahulu untuk variabel khusus orang yang belum pernah mengunjungi tempat tersebut (belum memberikan rating) dengan place_not_rated.\n\"\"\"",
        "\"\"\"Melakukan pengujian prediksi hasil rekomendasi tempat berdasarkan nama tempat dan kategori.\"\"\"",
        "\"\"\"Berdasarkan hasil rekomendasi tempat di atas, dapat dilihat bahwa sistem rekomendasi mengambil pengguna acak (14), lalu dilakukan pencarian tempat dengan rating terbaik dari user tersebut.\n\n- Margasatwa Muara Angke: **Cagar Alam**\n- Situs Warungboto: **Taman Hiburan**\n- Stone Garden Citatah: **Taman Hiburan**\n- Gua Pawon: **Cagar Alam**\n- Semarang Chinatown: **Budaya**\n\nSelanjutnya, sistem akan menampilkan 10 daftar tempat yang direkomendasikan berdasarkan kategori yang dimiliki terhadap data pengguna acak tadi. Dapat dilihat bahwa sistem merekomendasikan beberapa tempat dengan kategori yang sama, seperti\n\n- Pantai Goa Cemara: **Bahari**\n- Desa Wisata Kelor: **Taman Hiburan**\n- Pantai Kukup: **Bahari**\n- Pantai Pok Tunggal: **Bahari**\n- Balai Kota Surabaya: **Budaya**\n\n# **5. Kesimpulan**\n\nDengan begitu, dapat disimpulkan bahwa sistem berhasil melakukan rekomendasi baik dengan pendekatan _collaborative filtering_ dan _collaborative filtering_ membutuhkan data penilaian tempat dari pengguna.\n\"\"\""
    ],
    "functions": [
        "call"
    ],
    "classes": [
        "RecommenderNet"
    ]
}