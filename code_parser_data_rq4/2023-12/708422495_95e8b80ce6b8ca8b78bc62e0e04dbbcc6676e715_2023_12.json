{
    "identifiers": [
        "re",
        "networkx",
        "nx",
        "gensim",
        "nodevectors",
        "Node2Vec",
        "matplotlib",
        "pyplot",
        "plt",
        "csrgraph",
        "cg",
        "nodevectors",
        "embedders",
        "BaseNodeEmbedder",
        "sklearn",
        "model_selection",
        "train_test_split",
        "subprocess",
        "numba",
        "numpy",
        "np",
        "pandas",
        "pd",
        "time",
        "warnings",
        "torch",
        "torch",
        "nn",
        "torch_geometric",
        "data",
        "Data",
        "torch_geometric",
        "utils",
        "to_networkx",
        "torch_geometric",
        "transforms",
        "T",
        "torch_geometric",
        "nn",
        "GCNConv",
        "torch",
        "nn",
        "functional",
        "F",
        "sklearn",
        "metrics",
        "roc_auc_score",
        "torch_geometric",
        "utils",
        "negative_sampling",
        "torch_geometric",
        "transforms",
        "RandomLinkSplit",
        "requests",
        "torch_scatter",
        "warnings",
        "simplefilter",
        "category",
        "UserWarning",
        "warnings",
        "simplefilter",
        "category",
        "UserWarning",
        "BaseNodeEmbedder",
        "n_components",
        "walklen",
        "epochs",
        "return_weight",
        "neighbor_weight",
        "threads",
        "keep_walks",
        "verbose",
        "w2vparams",
        "threads",
        "ValueError",
        "walklen",
        "epochs",
        "ValueError",
        "n_components",
        "walklen",
        "epochs",
        "keep_walks",
        "w2vparams",
        "keys",
        "AttributeError",
        "w2vparams",
        "return_weight",
        "neighbor_weight",
        "threads",
        "numba",
        "config",
        "NUMBA_DEFAULT_NUM_THREADS",
        "threads",
        "threads",
        "verbose",
        "G",
        "isinstance",
        "G",
        "cg",
        "csrgraph",
        "cg",
        "csrgraph",
        "G",
        "threads",
        "threads",
        "G",
        "threads",
        "threads",
        "G",
        "set_threads",
        "threads",
        "G",
        "names",
        "node_names",
        "np",
        "int32",
        "np",
        "uint32",
        "np",
        "int64",
        "np",
        "uint64",
        "ValueError",
        "time",
        "time",
        "verbose",
        "end",
        "G",
        "random_walks",
        "walklen",
        "walklen",
        "epochs",
        "epochs",
        "return_weight",
        "return_weight",
        "neighbor_weight",
        "neighbor_weight",
        "verbose",
        "time",
        "time",
        "walks_t",
        "end",
        "time",
        "time",
        "pd",
        "DataFrame",
        "walks",
        "np",
        "arange",
        "len",
        "node_names",
        "node_names",
        "col",
        "walks",
        "columns",
        "walks",
        "walks",
        "col",
        "node_dict",
        "astype",
        "x",
        "x",
        "walks",
        "itertuples",
        "verbose",
        "time",
        "time",
        "map_t",
        "end",
        "gensim",
        "models",
        "word2vec",
        "FAST_VERSION",
        "time",
        "time",
        "gensim",
        "models",
        "Word2Vec",
        "sentences",
        "walks",
        "vector_size",
        "n_components",
        "w2vparams",
        "keep_walks",
        "walks",
        "verbose",
        "time",
        "time",
        "w2v_t",
        "G",
        "isinstance",
        "G",
        "cg",
        "csrgraph",
        "cg",
        "csrgraph",
        "G",
        "threads",
        "threads",
        "fit",
        "G",
        "np",
        "array",
        "pd",
        "DataFrame",
        "from_records",
        "pd",
        "Series",
        "np",
        "arange",
        "len",
        "G",
        "nodes",
        "apply",
        "predict",
        "values",
        "w",
        "node_name",
        "node_name",
        "node_name",
        "model",
        "wv",
        "__getitem__",
        "node_name",
        "out_file",
        "model",
        "wv",
        "save_word2vec_format",
        "out_file",
        "out_file",
        "gensim",
        "wv",
        "load_word2vec_format",
        "out_file",
        "edges",
        "edge_list",
        "X",
        "circles",
        "X_names",
        "embeddings",
        "nodes",
        "edges",
        "edge_list",
        "X",
        "circles",
        "X_names",
        "embeddings",
        "nodes",
        "g",
        "title",
        "edge",
        "nx",
        "kamada_kawai_layout",
        "g",
        "plt",
        "figure",
        "figsize",
        "plt",
        "title",
        "title",
        "plt",
        "axis",
        "nx",
        "draw_networkx",
        "g",
        "pos",
        "pos",
        "node_size",
        "arrows",
        "width",
        "style",
        "with_labels",
        "plt",
        "savefig",
        "graph",
        "embeddings_type",
        "RandomLinkSplit",
        "num_val",
        "num_test",
        "is_undirected",
        "add_negative_train_samples",
        "neg_sampling_ratio",
        "embeddings_type",
        "Data",
        "x",
        "graph",
        "embeddings",
        "edge_index",
        "graph",
        "edge_index",
        "embeddings_type",
        "Data",
        "x",
        "graph",
        "X",
        "edge_index",
        "graph",
        "edge_index",
        "Data",
        "x",
        "torch",
        "cat",
        "graph",
        "X",
        "graph",
        "embeddings",
        "dim",
        "edge_index",
        "graph",
        "edge_index",
        "split",
        "data",
        "train_data",
        "val_data",
        "test_data",
        "train_data",
        "val_data",
        "test_data",
        "nn",
        "Module",
        "in_channels",
        "hidden_channels",
        "out_channels",
        "GNNVAE",
        "GCNConv",
        "in_channels",
        "in_channels",
        "out_channels",
        "hidden_channels",
        "GCNConv",
        "in_channels",
        "hidden_channels",
        "out_channels",
        "hidden_channels",
        "GCNConv",
        "in_channels",
        "hidden_channels",
        "out_channels",
        "out_channels",
        "x",
        "edge_index",
        "GNNConvIn",
        "x",
        "edge_index",
        "relu",
        "GNNConvOut",
        "x",
        "edge_index",
        "relu",
        "x",
        "z",
        "edges",
        "z",
        "edges",
        "z",
        "edges",
        "sum",
        "dim",
        "train_dataset",
        "val_dataset",
        "optimizer",
        "epoch",
        "verbose",
        "epoch",
        "epoch",
        "train",
        "optimizer",
        "zero_grad",
        "train_dataset",
        "x",
        "to",
        "device",
        "train_dataset",
        "edge_index",
        "to",
        "device",
        "train_dataset",
        "edge_label_index",
        "to",
        "device",
        "encode",
        "x",
        "edge_index",
        "negative_sampling",
        "edge_index",
        "edge_index",
        "num_nodes",
        "torch",
        "tensor",
        "train_dataset",
        "num_nodes",
        "to",
        "device",
        "num_neg_samples",
        "len",
        "edge_label_index",
        "method",
        "torch",
        "cat",
        "edge_label_index",
        "neg_edge_index",
        "dim",
        "torch",
        "cat",
        "torch",
        "ones",
        "neg_edge_index",
        "size",
        "to",
        "device",
        "train_dataset",
        "edge_label",
        "new_zeros",
        "neg_edge_index",
        "size",
        "to",
        "device",
        "dim",
        "decode",
        "z",
        "pos_neg_edge_index",
        "torch",
        "nn",
        "BCEWithLogitsLoss",
        "loss_fn",
        "edge_y",
        "loss",
        "backward",
        "optimizer",
        "step",
        "verbose",
        "epoch",
        "eval_GNNVAE",
        "val_dataset",
        "loss",
        "val_roc_auc",
        "torch",
        "no_grad",
        "data",
        "eval",
        "data",
        "x",
        "to",
        "device",
        "data",
        "edge_index",
        "to",
        "device",
        "data",
        "edge_label_index",
        "to",
        "device",
        "encode",
        "x",
        "edge_index",
        "decode",
        "z",
        "edge_label_index",
        "view",
        "sigmoid",
        "data",
        "edge_label",
        "cpu",
        "numpy",
        "np",
        "round",
        "cpu",
        "numpy",
        "sum",
        "len",
        "data",
        "edge_label",
        "cpu",
        "numpy",
        "acc",
        "roc_auc_score",
        "data",
        "edge_label",
        "cpu",
        "numpy",
        "cpu",
        "numpy",
        "roc",
        "acc",
        "nx",
        "adjacency_matrix",
        "open",
        "f",
        "line",
        "strip",
        "line",
        "f",
        "index",
        "len",
        "Fb_ego_indexes",
        "open",
        "Fb_ego_indexes",
        "index",
        "f",
        "readlines",
        "item",
        "strip",
        "split",
        "item",
        "edges_str",
        "torch",
        "tensor",
        "row",
        "row",
        "edge_index",
        "x",
        "split",
        "x",
        "split",
        "x",
        "edges_str",
        "open",
        "Fb_ego_indexes",
        "index",
        "f",
        "readlines",
        "item",
        "split",
        "item",
        "circles_str",
        "open",
        "Fb_ego_indexes",
        "index",
        "f",
        "readlines",
        "item",
        "split",
        "split",
        "item",
        "feat_name_str",
        "open",
        "Fb_ego_indexes",
        "index",
        "f",
        "readlines",
        "torch",
        "tensor",
        "item",
        "split",
        "item",
        "feat_str",
        "torch",
        "tensor",
        "item",
        "split",
        "item",
        "feat_str",
        "X_ego",
        "old",
        "item",
        "old",
        "index",
        "torch",
        "tensor",
        "node_mapping",
        "n",
        "item",
        "n",
        "edge_index",
        "node_mapping",
        "n",
        "item",
        "n",
        "edge_index",
        "nx",
        "from_edgelist",
        "mapped_edge_index",
        "T",
        "numpy",
        "mapped_edge_index",
        "max",
        "node_id",
        "max_",
        "node_id",
        "G",
        "G",
        "add_node",
        "node_id",
        "Node2Vec2",
        "n_components",
        "walklen",
        "epochs",
        "return_weight",
        "neighbor_weight",
        "threads",
        "w2vparams",
        "n2v",
        "fit",
        "G",
        "G",
        "nodes",
        "node",
        "nodes",
        "embeddings",
        "append",
        "n2v",
        "predict",
        "node",
        "Facebook_graphs",
        "append",
        "GraphData",
        "mapped_edge_index",
        "edge_list",
        "X",
        "circles",
        "X_names",
        "torch",
        "tensor",
        "embeddings",
        "nodes",
        "nx",
        "from_edgelist",
        "Facebook_graphs",
        "edge_list",
        "visualize",
        "Edge_graph",
        "torch",
        "device",
        "torch",
        "cuda",
        "is_available",
        "i",
        "len",
        "Facebook_graphs",
        "i",
        "Facebook_graphs",
        "i",
        "split_data",
        "graph",
        "GNNVAE",
        "train_data",
        "x",
        "shape",
        "to",
        "device",
        "torch",
        "optim",
        "Adam",
        "model",
        "parameters",
        "lr",
        "model",
        "train_GNNVAE",
        "train_data",
        "val_data",
        "optimizer",
        "model",
        "eval_GNNVAE",
        "test_data",
        "n2v_test_aucs",
        "append",
        "test_auc",
        "n2v_test_acc",
        "append",
        "test_acc",
        "test_auc",
        "test_acc",
        "np",
        "array",
        "n2v_test_aucs",
        "sum",
        "len",
        "n2v_test_aucs",
        "np",
        "array",
        "n2v_test_acc",
        "sum",
        "len",
        "n2v_test_acc",
        "i",
        "len",
        "Facebook_graphs",
        "Facebook_graphs",
        "i",
        "split_data",
        "graph",
        "GNNVAE",
        "train_data",
        "x",
        "shape",
        "to",
        "device",
        "torch",
        "optim",
        "Adam",
        "model",
        "parameters",
        "lr",
        "model",
        "train_GNNVAE",
        "train_data",
        "val_data",
        "optimizer",
        "model",
        "eval_GNNVAE",
        "test_data",
        "f_test_aucs",
        "append",
        "test_auc",
        "f_test_acc",
        "append",
        "test_acc",
        "test_auc",
        "test_acc",
        "np",
        "array",
        "f_test_aucs",
        "sum",
        "len",
        "f_test_aucs",
        "np",
        "array",
        "f_test_acc",
        "sum",
        "len",
        "f_test_acc",
        "i",
        "len",
        "Facebook_graphs",
        "Facebook_graphs",
        "i",
        "split_data",
        "graph",
        "GNNVAE",
        "train_data",
        "x",
        "shape",
        "to",
        "device",
        "torch",
        "optim",
        "Adam",
        "model",
        "parameters",
        "lr",
        "model",
        "train_GNNVAE",
        "train_data",
        "val_data",
        "optimizer",
        "model",
        "eval_GNNVAE",
        "test_data",
        "f_n2v_test_aucs",
        "append",
        "test_auc",
        "f_n2v_test_acc",
        "append",
        "test_acc",
        "test_auc",
        "test_acc",
        "np",
        "array",
        "f_n2v_test_aucs",
        "sum",
        "len",
        "f_n2v_test_aucs",
        "np",
        "array",
        "f_n2v_test_acc",
        "sum",
        "len",
        "f_n2v_test_acc",
        "np",
        "arange",
        "plt",
        "figure",
        "figsize",
        "plt",
        "bar",
        "index",
        "n2v_test_aucs",
        "bar_width",
        "label",
        "plt",
        "bar",
        "index",
        "bar_width",
        "f_test_aucs",
        "bar_width",
        "label",
        "plt",
        "bar",
        "index",
        "bar_width",
        "f_n2v_test_aucs",
        "bar_width",
        "label",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "title",
        "plt",
        "xticks",
        "index",
        "bar_width",
        "plt",
        "legend",
        "plt",
        "ylim",
        "plt",
        "tight_layout",
        "plt",
        "savefig",
        "np",
        "arange",
        "plt",
        "figure",
        "figsize",
        "plt",
        "bar",
        "index",
        "n2v_test_acc",
        "bar_width",
        "label",
        "plt",
        "bar",
        "index",
        "bar_width",
        "f_test_acc",
        "bar_width",
        "label",
        "plt",
        "bar",
        "index",
        "bar_width",
        "f_n2v_test_acc",
        "bar_width",
        "label",
        "plt",
        "xlabel",
        "plt",
        "ylabel",
        "plt",
        "title",
        "plt",
        "xticks",
        "index",
        "bar_width",
        "plt",
        "legend",
        "plt",
        "ylim",
        "plt",
        "tight_layout",
        "plt",
        "savefig"
    ],
    "literals": [
        "\"ignore\"",
        "\"default\"",
        "\"window\"",
        "\"negative\"",
        "\"iter\"",
        "\"batch_words\"",
        "\"Threads argument must be an int!\"",
        "\"Walklen and epochs arguments must be > 1\"",
        "'size'",
        "\"Embedding dimensions should not be set \"",
        "\"through w2v parameters, but through n_components\"",
        "'workers'",
        "\"Graph node names must be int or str!\"",
        "\"Making walks...\"",
        "\" \"",
        "f\"Done, T={time.time() - walks_t:.2f}\"",
        "\"Mapping Walk Names...\"",
        "\" \"",
        "f\"Done, T={time.time() - map_t:.2f}\"",
        "\"Training W2V...\"",
        "\" \"",
        "\"WARNING: gensim word2vec version is unoptimized\"",
        "\"Try version 3.6 if on windows, versions 3.7 \"",
        "\"and 3.8 have had issues\"",
        "f\"Done, T={time.time() - w2v_t:.2f}\"",
        "\"Graph\"",
        "'blue'",
        "'on'",
        "'solid'",
        "'src/graph.png'",
        "'train_data:'",
        "'val_data:'",
        "'test_data:'",
        "'sparse'",
        "f\"Train loss: {loss}\\nValidation AUC: {val_roc_auc}\"",
        "'__main__'",
        "'facebook/indexes.txt'",
        "'r'",
        "f'facebook/{Fb_ego_indexes[index]}.edges'",
        "\"rt\"",
        "f'facebook/{Fb_ego_indexes[index]}.circles'",
        "\"rt\"",
        "'\\t'",
        "f'facebook/{Fb_ego_indexes[index]}.featnames'",
        "\"rt\"",
        "';anonymized feature'",
        "';'",
        "f'facebook/{Fb_ego_indexes[index]}.feat'",
        "\"rt\"",
        "'window'",
        "'negative'",
        "'epochs'",
        "'ns_exponent'",
        "'batch_words'",
        "\"First graph\"",
        "'cuda'",
        "'cpu'",
        "\"______ I. Method: Using the Node2Vec embeddings  ___________\"",
        "\". graph:\"",
        "f\"Test auc: {test_auc:.3f}, test accuracy: {test_acc:.3f}\"",
        "f\"Average Test AUC: {np.array(n2v_test_aucs).sum() / len(n2v_test_aucs)}\"",
        "f\"Average Test accuracy: {np.array(n2v_test_acc).sum() / len(n2v_test_acc)}\\n\\n\"",
        "\"______ II. Method: Using the node features  ___________\"",
        "f\"Test auc: {test_auc:.3f}, test accuracy: {test_acc:.3f}\"",
        "f\"Average Test AUC: {np.array(f_test_aucs).sum() / len(f_test_aucs)}\"",
        "f\"Average Test accuracy: {np.array(f_test_acc).sum() / len(f_test_acc)}\\n\\n\"",
        "\"___ III. Method: Using the node features and the embeddings  ________\"",
        "f\"Test auc: {test_auc:.3f}, test accuracy: {test_acc:.3f}\"",
        "f\"Average Test AUC: {np.array(f_n2v_test_aucs).sum() / len(f_n2v_test_aucs)}\"",
        "f\"Average Test accuracy: {np.array(f_n2v_test_acc).sum() / len(f_n2v_test_acc)}\"",
        "'With Node2Vec'",
        "'With original node features'",
        "'With node to vec and original features'",
        "'The graphs'",
        "'AUC scores'",
        "'Diagram of the AUC scores of the 3 method on each subgraf'",
        "'src/AUC_scores.png'",
        "'With Node2Vec'",
        "'With original node features'",
        "'With node to vec and original features'",
        "'The graphs'",
        "'Accuracy'",
        "'Diagram of the accuracy of the 3 method on each subgraf'",
        "'src/ACC_scores.png'"
    ],
    "variables": [
        "n_components",
        "walklen",
        "epochs",
        "keep_walks",
        "w2vparams",
        "return_weight",
        "neighbor_weight",
        "threads",
        "threads",
        "w2vparams",
        "verbose",
        "G",
        "node_names",
        "walks_t",
        "walks",
        "map_t",
        "walks",
        "node_dict",
        "col",
        "walks",
        "w2v_t",
        "model",
        "G",
        "w",
        "node_name",
        "model",
        "edge_index",
        "edge_list",
        "nodes",
        "X",
        "circles",
        "X_names",
        "embeddings",
        "edge_index",
        "edge_list",
        "X",
        "circles",
        "X_names",
        "embeddings",
        "nodes",
        "pos",
        "split",
        "data",
        "data",
        "data",
        "train_data",
        "val_data",
        "test_data",
        "GNNConvIn",
        "GNNConvHidden",
        "GNNConvOut",
        "x",
        "x",
        "x",
        "edge_index",
        "edge_label_index",
        "z",
        "neg_edge_index",
        "pos_neg_edge_index",
        "edge_y",
        "loss_fn",
        "loss",
        "val_roc_auc",
        "x",
        "edge_index",
        "edge_label_index",
        "z",
        "acc",
        "roc",
        "nx",
        "adj_matrix",
        "Fb_ego_indexes",
        "Facebook_graphs",
        "f",
        "edges_str",
        "edge_index",
        "edge_index",
        "edge_list",
        "f",
        "circles_str",
        "circles",
        "f",
        "feat_name_str",
        "X_names",
        "f",
        "feat_str",
        "index",
        "X_ego",
        "X",
        "node_mapping",
        "mapped_edge_index",
        "G",
        "max_",
        "n2v",
        "nodes",
        "embeddings",
        "Edge_graph",
        "device",
        "n2v_test_aucs",
        "n2v_test_acc",
        "graph",
        "train_data",
        "val_data",
        "test_data",
        "model",
        "optimizer",
        "model",
        "test_auc",
        "test_acc",
        "f_test_aucs",
        "f_test_acc",
        "graph",
        "train_data",
        "val_data",
        "test_data",
        "model",
        "optimizer",
        "model",
        "test_auc",
        "test_acc",
        "f_n2v_test_aucs",
        "f_n2v_test_acc",
        "graph",
        "train_data",
        "val_data",
        "test_data",
        "model",
        "optimizer",
        "model",
        "test_auc",
        "test_acc",
        "bar_width",
        "index",
        "bar_width",
        "index"
    ],
    "comments": [
        "Gensim triggers automatic useless warnings for windows users...",
        "Because networkx graphs are actually iterables of their nodes",
        "we do list(G) to avoid networkx 1.X vs 2.X errors",
        "Adjacency matrix",
        "Map nodeId -> node name",
        "Somehow gensim only trains on this list iterator",
        "it silently mistrains on array input",
        "Train gensim word2vec model on random walks",
        "!!!!",
        "current hack to work around word2vec problem",
        "ints need to be str -_-",
        "This function is for split a graph data's edges into test, validation and train set",
        "size of the validation set",
        "size of the test set",
        "We do not want negativ edges in the traing set",
        "In the test and validation set the num of negativ edges will be the same as the positives",
        "embedding_type is 0, when we want to use the embeddings of the nodes, given by the Node2Vec algorithm",
        "if its 1, we use the original representations of the nodes (X) and when it's two we use both of them",
        "GCN layers",
        "The encoder part is a GCN network",
        "The decoder part of the network",
        "training function",
        "Transport data to GPU if nessesery",
        "The autoencoder's hidden representation",
        "Adding negativ edges to the graph",
        "The number of negativ edges will be the same as the positiv edges (num_neg_samples=len(edge_label_index[1]))",
        "Adding the negativ edges to the original (positiv) edges of the graph",
        "Creating the ground truth labels for the edges: 0 if it's a negativ and 1 if it's a positiv edge",
        "decoder part of the autoencoder",
        "Definiing our loss function",
        "validation step",
        "Custum eval function",
        "Transport data to GPU if nessesery",
        "The validation and test data already contain negative edges via Graph Link Split",
        "So in this step we do not need to manually add them",
        "print(data.edge_label.cpu().numpy()[0:50],  np.round(out.cpu().numpy())[0:50])",
        "print(data.edge_label.cpu().numpy()[-100:-50],  np.round(out.cpu().numpy())[-100:-50])",
        "get the ego indexes",
        "First, we load the edges and save them in two different format: edges is a list of the edge pairs and",
        "edge_index conitains the edges in a two dimensional matrix, each index of this matrix represnt an edge, this",
        "is useful if we use pytorcg geometric for handle the graph data",
        "Transpose the data to get desired format",
        "These are the social circles in the graph",
        "Here we collect the name of each feauture in the graph",
        "These are the features for the \"ego\" of the graph (ego means the person whose connenctions are in the given subgraph)",
        "f = open(f'facebook/{Fb_ego_indexes[index]}.egofeat', \"rt\")",
        "feat_str = f.readlines()",
        "X = []",
        "X.append(list(map(int, feat_str[0].split()[1:])) )",
        "X = torch.tensor(X)",
        "These are the features for all the nodes of the graph, except the ego",
        "töröljük az olyan indexű csúcsokat amik mar voltak",
        "X = torch.cat([ torch.empty(), X_ego], dim=0)",
        "Node mapping",
        "Here we convert our graph, because Node2Vec expects an NX graph",
        "When we transform the graph this way, we lose the isolated nodes ( the ones that only connect with the ego)",
        "so with an extra step we add extra nodes to represent the isolated nodes",
        "creating the Node2Vec embeddings",
        "Fit and get the embedding",
        "Getting the nodes of the graph",
        "Create the subgraph",
        "TRAINING",
        "Oszlopok pozíciói",
        "Oszlopdiagramok rajzolása",
        "Címek és címkék",
        "Diagram megjelenítése",
        "Oszlopok pozíciói",
        "Oszlopdiagramok rajzolása",
        "Címek és címkék",
        "Diagram megjelenítése"
    ],
    "docstrings": [],
    "functions": [
        "fit",
        "fit_transform",
        "predict",
        "save_vectors",
        "load_vectors",
        "visualize",
        "split_data",
        "encode",
        "decode",
        "train_GNNVAE",
        "eval_GNNVAE"
    ],
    "classes": [
        "Node2Vec2",
        "GraphData",
        "GNNVAE"
    ]
}