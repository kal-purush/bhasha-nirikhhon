{
    "identifiers": [
        "ultralytics",
        "YOLO",
        "cv2",
        "numpy",
        "np",
        "yolov8_functions",
        "re",
        "sklearn",
        "decomposition",
        "PCA",
        "json",
        "imgsize",
        "path",
        "path",
        "yolov8_functions",
        "get_dirs",
        "test_path",
        "name",
        "path",
        "name",
        "point_names_all",
        "sorted",
        "json_paths_test",
        "idx",
        "path",
        "json_paths_test",
        "open",
        "path",
        "f",
        "json",
        "load",
        "f",
        "coord",
        "point_names_all",
        "coord",
        "data",
        "coord",
        "data",
        "coord",
        "data",
        "coord",
        "data",
        "coord",
        "stma1_x",
        "stma1_y",
        "stma2_x",
        "stma2_y",
        "test_coordinates",
        "append",
        "stma1",
        "p_names",
        "append",
        "test_coordinates",
        "append",
        "stma2",
        "p_names",
        "append",
        "coord",
        "data",
        "coord",
        "data",
        "coord",
        "data",
        "coord",
        "data",
        "coord",
        "stma1_x",
        "stma1_y",
        "stma2_x",
        "stma2_y",
        "test_coordinates",
        "append",
        "stma1",
        "p_names",
        "append",
        "test_coordinates",
        "append",
        "stma2",
        "p_names",
        "append",
        "test_coordinates",
        "append",
        "data",
        "coord",
        "p_names",
        "append",
        "coord",
        "data",
        "img_size",
        "img_size",
        "fhc_points_t",
        "append",
        "test_coordinates",
        "aF1_points_t",
        "append",
        "test_coordinates",
        "fnoc_points_t",
        "append",
        "test_coordinates",
        "tkc_points_t",
        "append",
        "test_coordinates",
        "sfdma1_points_t",
        "append",
        "test_coordinates",
        "sfdma2_points_t",
        "append",
        "test_coordinates",
        "stma1_points_t",
        "append",
        "test_coordinates",
        "stma2_points_t",
        "append",
        "test_coordinates",
        "tml_points_t",
        "append",
        "test_coordinates",
        "PCA",
        "fit",
        "fhc_points_t",
        "PCA",
        "fit",
        "aF1_points_t",
        "PCA",
        "fit",
        "fnoc_points_t",
        "PCA",
        "fit",
        "tkc_points_t",
        "PCA",
        "fit",
        "sfdma1_points_t",
        "PCA",
        "fit",
        "sfdma2_points_t",
        "PCA",
        "fit",
        "stma1_points_t",
        "PCA",
        "fit",
        "stma2_points_t",
        "PCA",
        "fit",
        "tml_points_t",
        "pca_fhc",
        "pca_af1",
        "pca_fnoc",
        "pca_tkc",
        "pca_sfdma1",
        "pca_sfdma2",
        "pca_stma1",
        "pca_stma2",
        "pca_tml",
        "yolov8_functions",
        "get_dirs",
        "dataset_path",
        "directory",
        "directories",
        "directory",
        "test_img_path",
        "next",
        "name",
        "name",
        "point_names",
        "name",
        "directory",
        "point_name",
        "yolov8_functions",
        "get_jpg_paths",
        "directory",
        "test_img_path",
        "img_path",
        "image_paths",
        "model_paths",
        "get",
        "point_name",
        "model_path",
        "YOLO",
        "model_path",
        "yolov8_model",
        "predict",
        "img_path",
        "imgsz",
        "imgsize",
        "yolov8_functions",
        "filename_creation",
        "img_path",
        "save_path",
        "name",
        "cv2",
        "imread",
        "img_path",
        "np",
        "array",
        "img",
        "temp",
        "shape",
        "img_shape",
        "img_shape",
        "name",
        "img_shape",
        "result",
        "results",
        "idx",
        "keypoint",
        "result",
        "keypoints",
        "keypoint",
        "xy",
        "tolist",
        "point",
        "point",
        "x",
        "y",
        "result",
        "boxes",
        "cls",
        "idx",
        "landmark_names",
        "label",
        "landmark",
        "img_shape",
        "landmark",
        "img_shape",
        "skipped_points",
        "append",
        "landmark",
        "skipped_labels",
        "append",
        "label",
        "labels",
        "append",
        "label",
        "landmarks",
        "append",
        "landmark",
        "labels",
        "landmarks",
        "x",
        "x",
        "labels",
        "labels",
        "count",
        "x",
        "duplicates",
        "dup",
        "duplicates",
        "yolov8_functions",
        "get_indices",
        "dup",
        "labels",
        "x",
        "x",
        "landmark_names",
        "labels",
        "count",
        "x",
        "missing",
        "idx",
        "duplicate_occurances",
        "duplicate_coords",
        "append",
        "landmarks",
        "idx",
        "duplicates",
        "missing",
        "duplicate_occurances",
        "duplicate_coords",
        "dup",
        "duplicates",
        "yolov8_functions",
        "get_indices",
        "dup",
        "landmark_names_pca",
        "pca_arr",
        "idx",
        "idx",
        "landmark_names_pca",
        "idx"
    ],
    "literals": [
        "\"./data/dataset/\"",
        "\"./data/predicted\"",
        "\"/images/test/\"",
        "'FHC'",
        "'TKC'",
        "'TML'",
        "'FNOC'",
        "'aF1'",
        "'ALL'",
        "'sTMA'",
        "'sFDMA'",
        "'sTMA1'",
        "'sTMA2'",
        "'FHC'",
        "'sFMDA1'",
        "'sFMDA2'",
        "'TKC'",
        "'TML'",
        "'FNOC'",
        "'aF1'",
        "\"ALL\"",
        "\"./runs/pose/train_SGD_\"",
        "\"_small_batch8/weights/best.pt\"",
        "\"./data/predicted/\"",
        "\"./data/dataset/JSON/\"",
        "\"./data/dataset/ALL/images/test/\"",
        "\"./data/postprocess/\"",
        "'data/postprocess/skipped.json'",
        "\"./data/postprocess\"",
        "\"./data/dataset/ALL/images/test/\"",
        "'FHC'",
        "'aF1'",
        "'FNOC'",
        "'TKC'",
        "'sFMDA1'",
        "'sFMDA2'",
        "'sTMA1'",
        "'sTMA2'",
        "'TML'",
        "'FHC'",
        "'aF1'",
        "'FNOC'",
        "'TKC'",
        "'sFMDA'",
        "'sTMA'",
        "'TML'",
        "'sTMA'",
        "'sTMA1'",
        "'sTMA2'",
        "'sFMDA'",
        "'sFMDA1'",
        "'sFMDA2'",
        "'Image_size'",
        "\"Directory path:\"",
        "\"./\"",
        "\".jpg\"",
        "\"/\"",
        "\"Image name\"",
        "\"Image_size\"",
        "\"Lables:\"",
        "\"Landmarks:\"",
        "\"Duplicates:\"",
        "\"Missing:\"",
        "\"Duplicate indexes:\"",
        "\"Duplicate coordinates:\"",
        "\"point indexes:\"",
        "\"Point for PCA:\""
    ],
    "variables": [
        "dataset_path",
        "save_path",
        "test_img_path",
        "point_names",
        "landmark_names",
        "imgsize",
        "model_paths",
        "skipped",
        "predicted_path",
        "test_path",
        "test_images_path",
        "postprocess_path",
        "skipped_path",
        "save_path",
        "images_path",
        "landmark_names_pca",
        "point_names_all",
        "false_prediction",
        "image_name",
        "aF1_points_t",
        "fhc_points_t",
        "fnoc_points_t",
        "tkc_points_t",
        "sfdma1_points_t",
        "sfdma2_points_t",
        "stma1_points_t",
        "stma2_points_t",
        "tml_points_t",
        "json_paths_test",
        "json_paths_test",
        "skip",
        "p_names",
        "img_size",
        "test_coordinates",
        "data",
        "stma1_x",
        "stma1_y",
        "stma2_x",
        "stma2_y",
        "stma1",
        "stma2",
        "stma1_x",
        "stma1_y",
        "stma2_x",
        "stma2_y",
        "stma1",
        "stma2",
        "img_size",
        "img_size",
        "pca_fhc",
        "pca_af1",
        "pca_fnoc",
        "pca_tkc",
        "pca_sfdma1",
        "pca_sfdma2",
        "pca_stma1",
        "pca_stma2",
        "pca_tml",
        "pca_arr",
        "directories",
        "point_name",
        "image_paths",
        "skip",
        "model_path",
        "yolov8_model",
        "results",
        "name",
        "filename",
        "img",
        "temp",
        "img_shape",
        "img_shape",
        "dictionary",
        "landmarks",
        "labels",
        "skipped_points",
        "skipped_labels",
        "removed_points",
        "removed_labels",
        "i",
        "conf_box",
        "conf_pose",
        "point",
        "x",
        "y",
        "landmark",
        "label",
        "label",
        "duplicates",
        "duplicates",
        "duplicate_occurances",
        "duplicate_occurances",
        "missing",
        "missing",
        "duplicate_coords",
        "idx",
        "pca"
    ],
    "comments": [
        "https://docs.ultralytics.com/reference/engine/results/#ultralytics.engine.results.Keypoints",
        "Dataset path:",
        "based on labels in config file",
        "check if the same as trained model",
        "model_paths = {\"ALL\" : \"./runs/pose/train_ALL_\" + str(imgsize) + \"_grayscale/weights/best.pt\"}",
        "PCA script - to check and remove duplicates",
        "Test points PCA",
        "create dataset archive",
        "yolov8_functions.dataset_archive(save_path)",
        "PCA learning on test points ###",
        "get only paths that are to be evaluated from test",
        "Test points json",
        "x,y are swapped",
        "assign points to its evaluation array ['FHC', 'aF1', 'FNOC', 'TKC', 'sFMDA1', 'sFMDA2', 'sTMA1', 'sTMA2','TML']",
        "The fit learns some quantities from the data, most importantly the \"components\" and \"explained variance\":",
        "Preedictions by YOLO model ###",
        "script",
        "select correct point name based on directory",
        "select correct model based on point",
        "load correct model of yolov8",
        "load a custom model",
        "Run inference on image with arguments - same imgsize as training",
        "predict on an image",
        "read image",
        "Save JSON file with data",
        "landmarks list",
        "labels list",
        "get label and point names from result",
        "conf_box.append(float(result.boxes.conf[idx]))",
        "conf_pose.append(float(result.keypoints.conf[idx]))",
        "PCA noise filtering",
        "check landmarks for duplicate labels",
        "get array indexes for duplicates",
        "check landmarks for missing labels",
        "zgoraj funkcije premakni v tole, ker rabim PCA za vsak duplicate ...",
        "chose correct PCA method based on duplicate point name",
        "get array index for PCA choice",
        "PCA choice",
        "cooridnates for duplicates %",
        "make PCA prediction"
    ],
    "docstrings": [
        "\"\"\" Use a trained YOLOv8n-pose model to run predictions on images. \"\"\"",
        "\"\"\"\n            components = pca.transform([p])\n            filtered = pca.inverse_transform(components)\n            print(filtered)\n            \"\"\"",
        "\"\"\"\n        for idx, p in enumerate(duplicate_coords):\n            pca = pca_arr[idx]\n            components = pca.transform([p])\n            filtered = pca.inverse_transform(components)\n            print(filtered)\n        \"\"\"",
        "\"\"\" \n            # sortiranje glede na confidence level\n            # check landmarks for duplicates\n            if len(labels) > 9:\n\n                duplicates = {x for x in labels if labels.count(x) > 1}\n                duplicates = list(duplicates)\n\n                # get array indexes for duplicates\n                remove_occurances = []\n                for dup in duplicates:\n                    occurances = yolov8_functions.get_indices(dup, labels)\n\n                    # get confidence for each duplicate\n                    confs = []\n                    for idx in occurances:\n                        conf = conf_box[idx] + conf_pose[idx]\n                        confs.append(conf)\n                    \n                    # get highest confidence of all duplicates or first highest confidence - upgrade to average\n                    highest_conf_idx = confs.index(max(confs))\n                    del occurances[highest_conf_idx]\n\n                    for occ in occurances:\n                        remove_occurances.append(occ)\n\n                # remove other occurances from labels, landmarks, etc\n                remove_occurances.sort(reverse=True)\n                for idx in remove_occurances:\n                    del labels[idx]\n                    del landmarks[idx]\n                    del conf_box[idx]\n                    del conf_pose[idx]\n        \n            for idx, landmark in enumerate(landmarks):\n                dictionary.update({\n                    labels[idx]:landmark,\n                })\n\n            dictionary.update({\n                    \"Skipped points\":skipped_points,\n                    \"Skipped labels\":skipped_labels,\n                    \"Removed points\":removed_points,\n                    \"removed labels\":removed_labels\n                })\n\n        yolov8_functions.save_prediction_image(landmarks, temp, filename)\n        yolov8_functions.create_json_datafile(dictionary, filename)\n        \"\"\""
    ],
    "functions": [],
    "classes": []
}