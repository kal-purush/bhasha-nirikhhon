{
    "identifiers": [
        "org",
        "apache",
        "beam",
        "runners",
        "dataflow",
        "worker",
        "java",
        "util",
        "concurrent",
        "ConcurrentHashMap",
        "java",
        "util",
        "concurrent",
        "atomic",
        "AtomicLong",
        "org",
        "apache",
        "beam",
        "runners",
        "core",
        "metrics",
        "CounterCell",
        "org",
        "apache",
        "beam",
        "runners",
        "core",
        "metrics",
        "DirtyState",
        "org",
        "apache",
        "beam",
        "runners",
        "core",
        "metrics",
        "MetricCell",
        "org",
        "apache",
        "beam",
        "sdk",
        "metrics",
        "Counter",
        "org",
        "apache",
        "beam",
        "sdk",
        "metrics",
        "MetricName",
        "metricName",
        "countersMap",
        "metricName",
        "countersMap",
        "metricName",
        "metricName",
        "countersMap",
        "countersMap",
        "Override",
        "countersMap",
        "computeIfPresent",
        "metricName",
        "unusedName",
        "value",
        "value",
        "value",
        "Override",
        "n",
        "countersMap",
        "compute",
        "metricName",
        "name",
        "value",
        "value",
        "n",
        "value",
        "addAndGet",
        "n",
        "value",
        "Override",
        "inc",
        "Override",
        "inc",
        "Override",
        "n",
        "inc",
        "n",
        "Override",
        "metricName",
        "Override",
        "format",
        "getClass",
        "getSimpleName",
        "Override",
        "SuppressWarnings",
        "countersMap",
        "computeIfPresent",
        "metricName",
        "name",
        "value",
        "value",
        "get",
        "value"
    ],
    "literals": [
        "\"%s doesn't support the getDirty\"",
        "\"getCumulative is not supported by Streaming Metrics\"",
        "\"nullness\""
    ],
    "variables": [
        "metricName",
        "countersMap"
    ],
    "comments": [
        "computeIfPresent's remapping function can return null to remove the entry."
    ],
    "docstrings": [
        "* Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Version of {@link CounterCell} supporting multi-thread safe mutations and extraction of delta\n * values. {@link RemoveSafeDeltaCounterCell} allows safe deletions from the underlying {@code\n * countersMap} through the {@code deleteIfZero} method.",
        "* This class does not own {@code countersMap} and only operates on a single key in the map\n   * specified by {@code metricName}. These opeations include the {@link Counter} interface along\n   * with the {@code deleteIfZero} method.",
        "* @param metricName Specifies which metric this counter refers to.\n   * @param countersMap The underlying {@code map} used to store this metric.",
        "Remove the metric from the {@code countersMap} if the the metric is zero valued."
    ],
    "functions": [
        "RemoveSafeDeltaCounterCell",
        "reset",
        "inc",
        "inc",
        "dec",
        "dec",
        "MetricName",
        "getName",
        "DirtyState",
        "getDirty",
        "getCumulative",
        "deleteIfZero"
    ],
    "classes": [
        "RemoveSafeDeltaCounterCell"
    ]
}