{
    "identifiers": [
        "expect",
        "ethers",
        "readFileSync",
        "resolve",
        "toml",
        "compile",
        "CompiledProgram",
        "init_log_level",
        "compilerLogLevel",
        "Noir",
        "BarretenbergBackend",
        "flattenPublicInputs",
        "Field",
        "InputMap",
        "compilerLogLevel",
        "it",
        "resolve",
        "compile",
        "inner_source_path",
        "resolve",
        "compile",
        "recursion_source_path",
        "BarretenbergBackend",
        "inner_program",
        "Noir",
        "inner_program",
        "readFileSync",
        "resolve",
        "toml",
        "inner_prover_toml",
        "inner",
        "inner_inputs",
        "inner_backend",
        "main_witness",
        "expect",
        "inner_backend",
        "intermediate_proof",
        "inner_backend",
        "intermediate_proof",
        "BarretenbergBackend",
        "recursion_program",
        "Noir",
        "recursion_program",
        "recursion_backend",
        "vkAsFields",
        "proofAsFields",
        "inner_inputs",
        "vkHash",
        "recursion",
        "recursion_inputs",
        "expect",
        "recursion",
        "recursion_proof",
        "ethers",
        "contract",
        "recursion_proof",
        "flattenPublicInputs",
        "recursion_proof",
        "expect",
        "result"
    ],
    "literals": [
        "'chai'",
        "'hardhat'",
        "'node:fs'",
        "'path'",
        "'toml'",
        "'@noir-lang/noir_wasm'",
        "'@noir-lang/noir_js'",
        "'@noir-lang/backend_barretenberg'",
        "'@noir-lang/noirc_abi'",
        "'INFO'",
        "smart contract can verify a recursive proof",
        "../../test_programs/execution_success/assert_statement/src/main.nr",
        "./circuits/recursion/src/main.nr",
        "../../test_programs/execution_success/assert_statement/Prover.toml",
        "'contracts/recursion.sol:UltraVerifier'"
    ],
    "variables": [
        "inner_source_path",
        "inner_program",
        "recursion_source_path",
        "recursion_program",
        "inner_backend",
        "inner",
        "inner_prover_toml",
        "inner_inputs",
        "main_witness",
        "intermediate_proof",
        "recursion_backend",
        "recursion",
        "recursion_inputs",
        "recursion_proof",
        "contract",
        "result"
    ],
    "comments": [
        "Intermediate proof",
        "1 public input",
        "Final proof",
        "Smart contract verification"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}