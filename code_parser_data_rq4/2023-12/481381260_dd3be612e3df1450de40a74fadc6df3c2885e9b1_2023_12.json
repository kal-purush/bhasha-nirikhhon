{
    "identifiers": [
        "os",
        "subprocess",
        "sys",
        "requests",
        "shutil",
        "yaml",
        "copy",
        "deepcopy",
        "typing",
        "Optional",
        "TypedDict",
        "os",
        "path",
        "join",
        "os",
        "environ",
        "get",
        "os",
        "environ",
        "get",
        "timeit",
        "name",
        "name",
        "name",
        "timeit",
        "default_timer",
        "exc_type",
        "exc_value",
        "traceback",
        "timeit",
        "default_timer",
        "start",
        "name",
        "took",
        "dumper",
        "data",
        "len",
        "data",
        "splitlines",
        "dumper",
        "represent_scalar",
        "data",
        "style",
        "dumper",
        "represent_scalar",
        "data",
        "yaml",
        "add_representer",
        "str_presenter",
        "yaml",
        "representer",
        "SafeRepresenter",
        "add_representer",
        "str_presenter",
        "TypedDict",
        "Optional",
        "Optional",
        "TypedDict",
        "DependencyDict",
        "TypedDict",
        "Optional",
        "Optional",
        "Optional",
        "Optional",
        "message",
        "returncode",
        "stage",
        "stdout",
        "stderr",
        "message",
        "returncode",
        "stage",
        "stdout",
        "stderr",
        "staticmethod",
        "command",
        "stage",
        "args",
        "kwargs",
        "DRY_RUN",
        "command",
        "command",
        "insert",
        "subprocess",
        "run",
        "command",
        "args",
        "capture_output",
        "kwargs",
        "result",
        "returncode",
        "CommandRunner",
        "stage",
        "result",
        "returncode",
        "returncode",
        "result",
        "returncode",
        "stage",
        "stage",
        "stdout",
        "result",
        "stdout",
        "decode",
        "stderr",
        "result",
        "stderr",
        "decode",
        "result",
        "DependencyYAML",
        "staticmethod",
        "data",
        "DependencyYAML",
        "data",
        "staticmethod",
        "path",
        "version",
        "DependencyYAML",
        "CodeTimer",
        "path",
        "deepcopy",
        "DependencyStore",
        "store",
        "store_copy",
        "get",
        "path",
        "version",
        "store_copy",
        "dependency",
        "store_copy",
        "staticmethod",
        "file",
        "data",
        "DependencyYAML",
        "open",
        "file",
        "yaml_file",
        "yaml",
        "safe_dump",
        "data",
        "yaml_file",
        "sort_keys",
        "path",
        "values",
        "DependencyDict",
        "path",
        "values",
        "path",
        "split",
        "name",
        "name",
        "name",
        "name",
        "name",
        "replace",
        "name",
        "path",
        "key",
        "DependencyDict",
        "__dict__",
        "keys",
        "key",
        "values",
        "output",
        "key",
        "values",
        "key",
        "value",
        "output",
        "key",
        "value",
        "output",
        "key",
        "output",
        "value",
        "replace",
        "value",
        "count",
        "output",
        "desc",
        "file",
        "sys",
        "stderr",
        "file",
        "sys",
        "stderr",
        "values",
        "values",
        "values",
        "version",
        "startswith",
        "CodeTimer",
        "repo",
        "is_tag",
        "GitHub",
        "check_newer_tag",
        "repo",
        "version",
        "replace",
        "GitHub",
        "check_updates",
        "repo",
        "remote_branch",
        "version",
        "status",
        "status",
        "status",
        "is_tag",
        "short_sha",
        "Git",
        "create_branch",
        "path",
        "new_version",
        "__update_yaml",
        "new_version",
        "is_tag",
        "status",
        "__apply_upstream_changes",
        "Git",
        "add_and_commit",
        "name",
        "short_sha",
        "Git",
        "push",
        "branch",
        "GitHub",
        "create_pr",
        "branch",
        "name",
        "new_version",
        "desc",
        "new_version",
        "status",
        "status",
        "Git",
        "clean_repo",
        "CommandRunner",
        "shutil",
        "e",
        "e",
        "CommandRunner",
        "e",
        "stage",
        "e",
        "returncode",
        "file",
        "sys",
        "stderr",
        "e",
        "stderr",
        "file",
        "sys",
        "stderr",
        "shutil",
        "e",
        "file",
        "sys",
        "stderr",
        "Git",
        "clean_repo",
        "CommandRunner",
        "e",
        "e",
        "file",
        "sys",
        "stderr",
        "sys",
        "exit",
        "path",
        "new_version",
        "name",
        "kind",
        "new_version",
        "status",
        "status",
        "file",
        "sys",
        "stderr",
        "title",
        "body",
        "file",
        "sys",
        "stderr",
        "GitHub",
        "create_issue",
        "title",
        "body",
        "e",
        "e",
        "file",
        "sys",
        "stderr",
        "new_version",
        "DependencyStore",
        "update_dependency_version",
        "path",
        "new_version",
        "DependencyStore",
        "write_store",
        "DEPS_YAML_FILE",
        "dep_yaml",
        "os",
        "path",
        "abspath",
        "path",
        "values",
        "get",
        "values",
        "get",
        "values",
        "values",
        "repo",
        "os",
        "path",
        "join",
        "TMP_DIR",
        "repo",
        "Git",
        "clone",
        "remote_url",
        "branch",
        "repo_dir",
        "reclone",
        "precopy",
        "end",
        "file",
        "sys",
        "stderr",
        "precopy",
        "replace",
        "precopy",
        "count",
        "file",
        "sys",
        "stderr",
        "CommandRunner",
        "run_or_fail",
        "precopy",
        "cwd",
        "repo_dir",
        "stage",
        "repo_dir",
        "path",
        "file",
        "sys",
        "stderr",
        "shutil",
        "copytree",
        "repo_dir",
        "path",
        "dirs_exist_ok",
        "ignore",
        "shutil",
        "ignore_patterns",
        "GLOBAL_IGNORE",
        "postcopy",
        "end",
        "file",
        "sys",
        "stderr",
        "postcopy",
        "replace",
        "postcopy",
        "count",
        "file",
        "sys",
        "stderr",
        "CommandRunner",
        "run_or_fail",
        "postcopy",
        "cwd",
        "path",
        "stage",
        "staticmethod",
        "remote_url",
        "branch",
        "repo_dir",
        "reclone",
        "reclone",
        "os",
        "path",
        "exists",
        "repo_dir",
        "shutil",
        "rmtree",
        "repo_dir",
        "os",
        "path",
        "exists",
        "repo_dir",
        "remote_url",
        "repo_dir",
        "branch",
        "file",
        "sys",
        "stderr",
        "CommandRunner",
        "run_or_fail",
        "branch",
        "remote_url",
        "repo_dir",
        "stage",
        "staticmethod",
        "path",
        "version",
        "CommandRunner",
        "run_or_fail",
        "stage",
        "result",
        "stdout",
        "decode",
        "strip",
        "path",
        "version",
        "CommandRunner",
        "run_or_fail",
        "branch_name",
        "stage",
        "branch_name",
        "staticmethod",
        "scope",
        "version",
        "CommandRunner",
        "run_or_fail",
        "stage",
        "os",
        "environ",
        "copy",
        "CommandRunner",
        "run_or_fail",
        "user_name",
        "user_email",
        "scope",
        "version",
        "stage",
        "env",
        "clean_env",
        "staticmethod",
        "branch",
        "CommandRunner",
        "run_or_fail",
        "branch",
        "stage",
        "staticmethod",
        "CommandRunner",
        "run_or_fail",
        "stage",
        "CommandRunner",
        "run_or_fail",
        "Git",
        "default_branch",
        "stage",
        "staticmethod",
        "repo",
        "current_tag",
        "UpdateStatus",
        "repo",
        "requests",
        "get",
        "url",
        "response",
        "status_code",
        "response",
        "json",
        "len",
        "data",
        "data",
        "latest_ref",
        "replace",
        "latest_tag",
        "current_tag",
        "latest_tag",
        "repo",
        "current_tag",
        "latest_tag",
        "latest_ref",
        "repo",
        "latest_tag",
        "response",
        "status_code",
        "response",
        "json",
        "staticmethod",
        "repo",
        "branch",
        "version",
        "UpdateStatus",
        "repo",
        "version",
        "branch",
        "requests",
        "get",
        "url",
        "response",
        "status_code",
        "response",
        "json",
        "data",
        "has_updates",
        "data",
        "data",
        "data",
        "data",
        "data",
        "response",
        "status_code",
        "response",
        "json",
        "staticmethod",
        "title",
        "body",
        "title",
        "body",
        "CommandRunner",
        "run_or_fail",
        "cmd",
        "stage",
        "staticmethod",
        "branch",
        "title",
        "body",
        "Git",
        "default_branch",
        "branch",
        "title",
        "body",
        "CommandRunner",
        "run_or_fail",
        "cmd",
        "stage",
        "open",
        "DEPS_YAML_FILE",
        "yaml_file",
        "DependencyYAML",
        "yaml",
        "safe_load",
        "yaml_file",
        "data",
        "DependencyStore",
        "data",
        "data",
        "path",
        "dependencies",
        "Dependency",
        "path",
        "dependencies",
        "path",
        "dependency",
        "update_or_notify",
        "main"
    ],
    "literals": [
        "\"TMP_DIR\"",
        "\"/tmp\"",
        "\"ohmyzsh\"",
        "\".github/dependencies.yml\"",
        "\"DRY_RUN\"",
        "\"0\"",
        "\"1\"",
        "\" '\"",
        "\"'\"",
        "''",
        "'Code block'",
        "' took: '",
        "' ms'",
        "'tag:yaml.org,2002:str'",
        "'|'",
        "'tag:yaml.org,2002:str'",
        "\"gh\"",
        "\"echo\"",
        "f\"{stage} command failed with exit code {result.returncode}\"",
        "\"utf-8\"",
        "\"utf-8\"",
        "\"dependencies\"",
        "f\"store deepcopy: {path}\"",
        "\"dependencies\"",
        "\"version\"",
        "\"dependencies\"",
        "\"w\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"/\"",
        "\"plugins\"",
        "\"plugin\"",
        "f\"{name} plugin\"",
        "\"themes\"",
        "\".zsh-theme\"",
        "\"\"",
        "\"theme\"",
        "f\"{self.name} theme\"",
        "\"\"",
        "'__annotations__'",
        "f\"{key}: None\\n\"",
        "\"\\n\"",
        "f\"{key}: {value}\\n\"",
        "f\"{key}:\\n  \"",
        "\"\\n\"",
        "\"\\n  \"",
        "\"\\n\"",
        "f\"Processing {self.desc}...\"",
        "\"repo\"",
        "\"branch\"",
        "\"version\"",
        "\"tag:\"",
        "f\"update check: {repo}\"",
        "\"tag:\"",
        "\"\"",
        "\"has_updates\"",
        "\"head_ref\"",
        "\"version\"",
        "f\"tag:{new_version}\"",
        "\"version\"",
        "f\"feat({self.name}): update to version {new_version}\"",
        "f\"\"\"## Description\n\nUpdate for **{self.desc}**: update to version [{new_version}]({status['head_url']}).\nCheck out the [list of changes]({status['compare_url']}).\n\"\"\"",
        "'head_url'",
        "'compare_url'",
        "f\"Error running {e.stage} command: {e.returncode}\"",
        "f\"Error copying files: {e}\"",
        "f\"Error reverting repository to clean state: {e}\"",
        "f\"{self.path}: update to {new_version}\"",
        "f\"\"\"## Description\n\nThere is a new version of `{self.name}` {self.kind} available.\n\nNew version: [{new_version}]({status['head_url']})\nCheck out the [list of changes]({status['compare_url']}).\n\"\"\"",
        "'head_url'",
        "'compare_url'",
        "f\"Creating GitHub issue\"",
        "f\"{title}\\n\\n{body}\"",
        "\".git\"",
        "\".github\"",
        "\".gitignore\"",
        "\"precopy\"",
        "\"postcopy\"",
        "\"repo\"",
        "\"branch\"",
        "f\"https://github.com/{repo}.git\"",
        "\"Running precopy script:\"",
        "\"\\n  \"",
        "\"\\n\"",
        "\"\\n  \"",
        "\"\\n\"",
        "\"bash\"",
        "\"-c\"",
        "\"Precopy\"",
        "f\"Copying files from {repo_dir} to {path}\"",
        "\"Running postcopy script:\"",
        "\"\\n  \"",
        "\"\\n\"",
        "\"\\n  \"",
        "\"\\n\"",
        "\"bash\"",
        "\"-c\"",
        "\"Postcopy\"",
        "\"master\"",
        "f\"Cloning {remote_url} to {repo_dir} and checking out {branch}\"",
        "\"git\"",
        "\"clone\"",
        "\"--depth=1\"",
        "\"-b\"",
        "\"Clone\"",
        "\"git\"",
        "\"rev-parse\"",
        "\"--abbrev-ref\"",
        "\"HEAD\"",
        "\"GetDefaultBranch\"",
        "\"utf-8\"",
        "f\"update/{path}/{version}\"",
        "\"git\"",
        "\"checkout\"",
        "\"-b\"",
        "\"CreateBranch\"",
        "\"ohmyzsh\"",
        "\"bot@ohmyz.sh\"",
        "\"git\"",
        "\"add\"",
        "\"-A\"",
        "\"-v\"",
        "\"AddFiles\"",
        "\"LANG\"",
        "\"C.UTF-8\"",
        "\"GIT_CONFIG_GLOBAL\"",
        "\"/dev/null\"",
        "\"GIT_CONFIG_NOSYSTEM\"",
        "\"1\"",
        "\"git\"",
        "\"-c\"",
        "f\"user.name={user_name}\"",
        "\"-c\"",
        "f\"user.email={user_email}\"",
        "\"commit\"",
        "\"-m\"",
        "f\"feat({scope}): update to {version}\"",
        "\"CreateCommit\"",
        "\"git\"",
        "\"push\"",
        "\"-u\"",
        "\"origin\"",
        "\"PushBranch\"",
        "\"git\"",
        "\"reset\"",
        "\"--hard\"",
        "\"HEAD\"",
        "\"ResetRepository\"",
        "\"git\"",
        "\"checkout\"",
        "\"CheckoutDefaultBranch\"",
        "f\"https://api.github.com/repos/{repo}/git/refs/tags\"",
        "\"has_updates\"",
        "\"ref\"",
        "\"refs/tags/\"",
        "\"\"",
        "\"has_updates\"",
        "\"has_updates\"",
        "\"version\"",
        "\"compare_url\"",
        "f\"https://github.com/{repo}/compare/{current_tag}...{latest_tag}\"",
        "\"head_ref\"",
        "\"object\"",
        "\"sha\"",
        "\"head_url\"",
        "f\"https://github.com/{repo}/releases/tag/{latest_tag}\"",
        "f\"GitHub API request failed with status code {response.status_code}: {response.json()}\"",
        "f\"https://api.github.com/repos/{repo}/compare/{version}...{branch}\"",
        "\"status\"",
        "\"identical\"",
        "\"has_updates\"",
        "\"has_updates\"",
        "\"status\"",
        "\"identical\"",
        "\"version\"",
        "\"commits\"",
        "\"sha\"",
        "\"compare_url\"",
        "\"permalink_url\"",
        "\"head_ref\"",
        "\"commits\"",
        "\"sha\"",
        "\"head_url\"",
        "\"commits\"",
        "\"html_url\"",
        "f\"GitHub API request failed with status code {response.status_code}: {response.json()}\"",
        "\"gh\"",
        "\"issue\"",
        "\"create\"",
        "\"-t\"",
        "\"-b\"",
        "\"CreateIssue\"",
        "\"gh\"",
        "\"pr\"",
        "\"create\"",
        "\"-B\"",
        "\"-H\"",
        "\"-t\"",
        "\"-b\"",
        "\"CreatePullRequest\"",
        "\"r\"",
        "\"dependencies\"",
        "f\"dependencies.yml not properly formatted\"",
        "\"dependencies\"",
        "\"__main__\""
    ],
    "variables": [
        "TMP_DIR",
        "DEPS_YAML_FILE",
        "DRY_RUN",
        "name",
        "start",
        "took",
        "repo",
        "branch",
        "version",
        "precopy",
        "postcopy",
        "dependencies",
        "has_updates",
        "version",
        "compare_url",
        "head_ref",
        "head_url",
        "returncode",
        "stage",
        "stdout",
        "stderr",
        "result",
        "store",
        "DependencyStore",
        "store",
        "store_copy",
        "dependency",
        "dependency",
        "path",
        "path",
        "values",
        "name",
        "desc",
        "kind",
        "name",
        "kind",
        "desc",
        "name",
        "kind",
        "desc",
        "name",
        "desc",
        "output",
        "value",
        "repo",
        "remote_branch",
        "version",
        "is_tag",
        "status",
        "status",
        "short_sha",
        "new_version",
        "branch",
        "title",
        "body",
        "dep_yaml",
        "GLOBAL_IGNORE",
        "path",
        "precopy",
        "postcopy",
        "repo",
        "branch",
        "remote_url",
        "repo_dir",
        "default_branch",
        "result",
        "Git",
        "default_branch",
        "branch_name",
        "user_name",
        "user_email",
        "clean_env",
        "clean_env",
        "clean_env",
        "clean_env",
        "url",
        "response",
        "data",
        "latest_ref",
        "latest_tag",
        "url",
        "response",
        "data",
        "has_updates",
        "cmd",
        "cmd",
        "data",
        "dependencies",
        "dependency"
    ],
    "comments": [
        "Get TMP_DIR variable from environment",
        "Relative path to dependencies.yml file",
        "Dry run flag",
        "YAML representation",
        "check for multiline string",
        "Types",
        "Print dependency settings",
        "Check for updates",
        "Create new branch",
        "Update dependencies.yml file",
        "Update dependency files",
        "Add all changes and commit",
        "Push changes to remote",
        "Create GitHub PR",
        "Clean up repository",
        "Handle exception on automatic update",
        "Print error message",
        "Create a GitHub issue to notify maintainer",
        "Patterns to ignore in copying files from upstream repo",
        "Clone repository",
        "Run precopy on tmp repo",
        "Copy files from upstream repo",
        "Run postcopy on our repository",
        "If repo needs to be fresh",
        "Clone repo in tmp directory and checkout branch",
        "Get current branch name",
        "Create new branch and return created branch name",
        "Add all files to git staging",
        "Reset environment and git config",
        "Commit with settings above",
        "GET /repos/:owner/:repo/git/refs/tags",
        "Send a GET request to the GitHub API",
        "If the request was successful",
        "Parse the JSON response",
        "If the request was not successful, raise an exception",
        "TODO: add support for semver updating (based on tags)",
        "Check if upstream github repo has a new version",
        "GitHub API URL for comparing two commits",
        "Send a GET request to the GitHub API",
        "If the request was successful",
        "Parse the JSON response",
        "If the base is behind the head, there is a newer version",
        "If the request was not successful, raise an exception",
        "Load the YAML file",
        "Cache YAML version"
    ],
    "docstrings": [
        "\"\"\"\n  Configures yaml for dumping multiline strings\n  Ref: https://stackoverflow.com/a/33300001\n  \"\"\""
    ],
    "functions": [
        "__enter__",
        "__exit__",
        "str_presenter",
        "run_or_fail",
        "update_dependency_version",
        "write_store",
        "__str__",
        "update_or_notify",
        "__update_yaml",
        "__apply_upstream_changes",
        "clone",
        "create_branch",
        "add_and_commit",
        "push",
        "clean_repo",
        "check_newer_tag",
        "check_updates",
        "create_issue",
        "create_pr",
        "main"
    ],
    "classes": [
        "CodeTimer",
        "DependencyDict",
        "DependencyYAML",
        "UpdateStatus",
        "CommandRunner",
        "DependencyStore",
        "Dependency",
        "Git",
        "GitHub"
    ]
}