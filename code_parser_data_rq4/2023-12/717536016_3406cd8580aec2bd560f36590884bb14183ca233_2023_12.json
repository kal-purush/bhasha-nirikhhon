{
    "identifiers": [
        "RequestListener",
        "Readable",
        "ReadableStream",
        "NodeReadableStream",
        "importEndpoints",
        "errorHandler",
        "toPathRegExp",
        "routeDir",
        "importEndpoints",
        "routeDir",
        "requestListener",
        "incomingMessage",
        "serverResponse",
        "incomingMessage",
        "incomingMessage",
        "URL",
        "incomingMessage",
        "incomingMessage",
        "Readable",
        "incomingMessage",
        "endpoints",
        "method",
        "incomingMessage",
        "toPathRegExp",
        "pathPattern",
        "pathRegExp",
        "url",
        "Headers",
        "incomingMessage",
        "requestBody",
        "Request",
        "url",
        "requestInit",
        "errorHandler",
        "handler",
        "eh",
        "request",
        "response",
        "serverResponse",
        "response",
        "response",
        "value",
        "key",
        "serverResponse",
        "key",
        "value",
        "response",
        "Readable",
        "response",
        "serverResponse",
        "serverResponse",
        "requestListener"
    ],
    "literals": [
        "'node:http'",
        "'node:stream'",
        "'node:stream/web'",
        "'../file-based-routing/index.js'",
        "'../index.js'",
        "string",
        "'url is undefined'",
        "'url is undefined'",
        "http://${incomingMessage.headers.host}",
        "string",
        "string",
        "'half'"
    ],
    "variables": [
        "endpoints",
        "requestListener",
        "url",
        "requestBody",
        "pathRegExp",
        "requestInit",
        "request",
        "eh"
    ],
    "comments": [
        "eslint-disable-next-line @typescript-eslint/ban-ts-comment",
        "@ts-ignore",
        "https://github.com/nodejs/node/issues/46221#issuecomment-1426707013",
        "No matching route",
        "TODO: 404"
    ],
    "docstrings": [
        "* File based routing for node:http. Creates a RequestListener that handles requests with\n * the matching FetchHandler.\n *\n * @param router the express router, for example `express()` or `express.Router()`.\n * @param routeDir the directory containing the routes."
    ],
    "functions": [
        "createRequestListener"
    ],
    "classes": []
}