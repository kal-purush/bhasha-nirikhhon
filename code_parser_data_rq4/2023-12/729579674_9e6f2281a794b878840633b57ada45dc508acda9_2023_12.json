{
    "identifiers": [
        "python_graphql_client",
        "GraphqlClient",
        "GraphqlClient",
        "endpoint",
        "query",
        "problemsetQuestionList",
        "categorySlug",
        "limit",
        "Int",
        "skip",
        "Int",
        "filters",
        "QuestionListFilterInput",
        "problemsetQuestionList",
        "questionList",
        "categorySlug",
        "categorySlug",
        "limit",
        "limit",
        "skip",
        "skip",
        "filters",
        "filters",
        "total",
        "totalNum",
        "questions",
        "data",
        "acRate",
        "difficulty",
        "freqBar",
        "frontendQuestionId",
        "questionFrontendId",
        "isFavor",
        "paidOnly",
        "isPaidOnly",
        "status",
        "title",
        "titleSlug",
        "topicTags",
        "name",
        "id",
        "slug",
        "hasSolution",
        "hasVideoSolution",
        "variables",
        "categorySlug",
        "skip",
        "limit",
        "filters",
        "query",
        "variables",
        "query2",
        "var2",
        "client",
        "execute",
        "query",
        "query2",
        "variables",
        "var2",
        "data",
        "asyncio"
    ],
    "literals": [
        "\"https://leetcode.com/graphql\"",
        "\"query\"",
        "\",\"",
        "\":{\"",
        "\":\"",
        "\",\"",
        "\":0,\"",
        "\":50,\"",
        "\"categorySlug\"",
        "\"questions.difficulty\"",
        "\"currentQuestionSlug\"",
        "\"two-sum\"",
        "\"filters\"",
        "\"envId\"",
        "\"\"",
        "\"envType\"",
        "\"problem-list\""
    ],
    "variables": [
        "client",
        "data"
    ],
    "comments": [
        "From https://pypi.org/project/python-graphql-client/",
        "Instantiate the client with an endpoint.",
        "Create the query string and variables required for the request.",
        "variables = {\"countryCode\": \"CA\"}",
        "variables = {\"categorySlug\": \"\", \"skip\": 0, \"limit\": 1, \"filters\": {}}",
        "variables = {\"titleSlug\": \"two-sum\"}",
        "Synchronous request",
        "=> {'data': {'country': {'code': 'CA', 'name': 'Canada'}}}",
        "Asynchronous request",
        "data = asyncio.run(client.execute_async(query=query, variables=variables))",
        "print(data)  # => {'data': {'country': {'code': 'CA', 'name': 'Canada'}}}"
    ],
    "docstrings": [
        "\"\"\"\nquery problemsetQuestionList($categorySlug: String, $limit: Int, $skip: Int, $filters: QuestionListFilterInput) {\n    problemsetQuestionList: questionList(\n        categorySlug: $categorySlug\n        limit: $limit\n        skip: $skip\n        filters: $filters\n    ) {\n        total: totalNum\n        questions: data {\n            # acRate\n            difficulty\n            # freqBar\n            frontendQuestionId: questionFrontendId\n            # isFavor\n            # paidOnly: isPaidOnly\n            # status\n            title\n            # titleSlug\n            # topicTags {\n            #     name\n            #     id\n            #     slug\n            # }\n            # hasSolution\n            # hasVideoSolution\n        }\n    }\n}\n\"\"\"",
        "\"\"\" \nquery learningContext($currentQuestionSlug: String!, $categorySlug: String, $envId: String, $envType: String, $filters: QuestionListFilterInput) {\n  learningContextV2(\n    currentQuestionSlug: $currentQuestionSlug\n    categorySlug: $categorySlug\n    envId: $envId\n    envType: $envType\n    filters: $filters\n  ) {\n    name\n    backLink\n    nextQuestion {\n      difficulty\n      title\n      titleSlug\n      questionFrontendId\n    }\n    previousQuestion {\n      difficulty\n      title\n      titleSlug\n      questionFrontendId\n    }\n  }\n}\n\"\"\""
    ],
    "functions": [],
    "classes": []
}