{
    "identifiers": [
        "util",
        "java",
        "io",
        "File",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "javax",
        "annotation",
        "processing",
        "AbstractProcessor",
        "javax",
        "annotation",
        "processing",
        "ProcessingEnvironment",
        "javax",
        "annotation",
        "processing",
        "Processor",
        "javax",
        "annotation",
        "processing",
        "RoundEnvironment",
        "javax",
        "annotation",
        "processing",
        "SupportedAnnotationTypes",
        "javax",
        "annotation",
        "processing",
        "SupportedSourceVersion",
        "javax",
        "lang",
        "model",
        "SourceVersion",
        "javax",
        "lang",
        "model",
        "element",
        "Element",
        "javax",
        "lang",
        "model",
        "element",
        "TypeElement",
        "javax",
        "tools",
        "JavaCompiler",
        "javax",
        "tools",
        "JavaFileObject",
        "javax",
        "tools",
        "StandardJavaFileManager",
        "javax",
        "tools",
        "ToolProvider",
        "com",
        "sun",
        "source",
        "tree",
        "ClassTree",
        "com",
        "sun",
        "source",
        "tree",
        "MethodInvocationTree",
        "com",
        "sun",
        "source",
        "util",
        "TreePath",
        "com",
        "sun",
        "source",
        "util",
        "TreePathScanner",
        "com",
        "sun",
        "source",
        "util",
        "Trees",
        "m",
        "m",
        "put",
        "ENABLE",
        "Override",
        "node",
        "trees",
        "node",
        "getSimpleName",
        "toString",
        "contains",
        "ENABLE",
        "res",
        "visitClass",
        "node",
        "trees",
        "ENABLE",
        "res",
        "Override",
        "node",
        "trees",
        "res",
        "visitMethodInvocation",
        "node",
        "trees",
        "ENABLE",
        "printf",
        "node",
        "getMethodSelect",
        "res",
        "SupportedSourceVersion",
        "SourceVersion",
        "RELEASE_6",
        "SupportedAnnotationTypes",
        "visitor",
        "trees",
        "Override",
        "pe",
        "init",
        "pe",
        "trees",
        "Trees",
        "instance",
        "pe",
        "Override",
        "annotations",
        "roundEnvironment",
        "e",
        "roundEnvironment",
        "getRootElements",
        "tp",
        "trees",
        "getPath",
        "e",
        "visitor",
        "scan",
        "tp",
        "trees",
        "args",
        "files1",
        "compiler",
        "ToolProvider",
        "getSystemJavaCompiler",
        "fileManager",
        "compiler",
        "getStandardFileManager",
        "sources",
        "fileManager",
        "getJavaFileObjectsFromFiles",
        "Arrays",
        "asList",
        "files1",
        "compiler",
        "getTask",
        "fileManager",
        "sources",
        "call",
        "task",
        "compiler",
        "getTask",
        "fileManager",
        "sources",
        "processors",
        "Arrays",
        "asList",
        "task",
        "setProcessors",
        "processors",
        "task",
        "call"
    ],
    "literals": [
        "\"key\"",
        "\"Bar\"",
        "\"found %s!\"",
        "\"*\"",
        "\"src/JavaCompilerAST.java\""
    ],
    "variables": [
        "trees"
    ],
    "comments": [
        "need to import tools.jar for this to work.",
        "example (so that this example class becomes self-contained)",
        "method call",
        "See TreeScanner for other \"visit\" methods: https://docs.oracle.com/javase/7/docs/jdk/api/javac/tree/com/sun/source/util/TreeScanner.html",
        "don't forget to call super!",
        "Normally the ellement should represent a class",
        "invoke the scanner",
        "handled, don't invoke other processors",
        "name of source files",
        "access compile object",
        "reading source files as java object (not ast's)",
        "Create the compilation task",
        "invoke processor (to do whatever with ASTs).  for this case, only print method name"
    ],
    "docstrings": [
        "* \n * This is an example class that shows how to use Java 8 (some features \n * available since Java 6, I think) to obtain ASTs as generated from the \n * Java compiler, which is accessed programmatically from Java.  This is \n * the preferable choice for doing source code analysis as it is maintained \n * by a big team.  The Checker Framework builds on this infrastructure.\n * \n * Note that we currently use a lightweight alternative library for parsing \n * Java code -- javaparser, which is by the way written by a Brazilian :), \n * and seems good enough for us so far.  I realized there is a newer \n * version available but did not read the release notes to see what is new. \n * \n * With this example handy you can decide when/if new to port to Java 8.\n *\n * -Marcelo",
        "* This code does not compile because it depends on package available \n * from the \"tool.jar\" library (see com.sun.source.**).  Each JDK \n * provides such library, under the \"libs\" directory.  \n * \n * As I did not know what JDK version you use I hesitated to add by myself.  \n * If everyone uses Java 8, I think it is fine to add tools.jar of that JDK \n * to the repository.\n * \n * You can remove this section after resolving that issue.  -Marcelo",
        "* References \n   * Example - https://github.com/jakubholynet/blog/blob/master/miniprojects/generics-detector/CollectionGenericsTypeExctractor.java\n   * Overview - http://openjdk.java.net/groups/compiler/doc/hhgtjavac/index.html#moreInfo",
        "* visitor class for traversing the ast",
        "*\n   * processor class that invokes visitor",
        "check fileManager.list(...)"
    ],
    "functions": [
        "Bar",
        "visitClass",
        "visitMethodInvocation",
        "init",
        "process",
        "main"
    ],
    "classes": [
        "JavaCompilerAST",
        "Bar",
        "CodeAnalyzerTreeVisitor",
        "CodeAnalyzerProcessor"
    ]
}