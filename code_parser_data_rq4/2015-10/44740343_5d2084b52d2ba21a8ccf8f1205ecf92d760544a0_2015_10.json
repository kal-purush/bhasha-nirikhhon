{
    "identifiers": [
        "Collections",
        "Generic",
        "Text",
        "PAT",
        "Common",
        "Classes",
        "Expressions",
        "ExpressionClass",
        "Diagnostics",
        "Contracts",
        "PAT",
        "Lib",
        "id",
        "ID",
        "id",
        "code",
        "Contract",
        "Ensures",
        "Code",
        "Code",
        "Code",
        "code",
        "intend",
        "Contract",
        "Ensures",
        "Intension",
        "Intension",
        "Intension",
        "intend",
        "ID",
        "ToString",
        "Intension",
        "Code",
        "ID",
        "Voter",
        "ID",
        "v",
        "Intension",
        "Intension",
        "v",
        "Code",
        "Code",
        "v",
        "ID",
        "ToString",
        "ExpressionValue",
        "KeyValuePair",
        "Ballot",
        "Voter",
        "voterNo",
        "candidateNo",
        "VotersNo",
        "voterNo",
        "CandidatesNo",
        "candidateNo",
        "TableInitialization",
        "Ballots",
        "Ballot",
        "voterNo",
        "Voters",
        "Voter",
        "voterNo",
        "i",
        "VotersNo",
        "i",
        "candidateNo",
        "j",
        "candidateNo",
        "j",
        "candidates",
        "j",
        "j",
        "Ballots",
        "i",
        "Ballot",
        "i",
        "candidates",
        "Voters",
        "i",
        "Voter",
        "i",
        "ContractInvariantMethod",
        "Contract",
        "Invariant",
        "Contract",
        "ForAll",
        "VotersNo",
        "Voters",
        "index",
        "Intension",
        "Voters",
        "index",
        "Intension",
        "CandidatesNo",
        "voterNo",
        "candidateNo",
        "Ballot",
        "ballots",
        "Voter",
        "voters",
        "VotersNo",
        "voterNo",
        "CandidatesNo",
        "candidateNo",
        "Ballots",
        "Ballot",
        "voterNo",
        "Voters",
        "Voter",
        "voterNo",
        "i",
        "VotersNo",
        "i",
        "Ballots",
        "i",
        "ballots",
        "i",
        "GetClone",
        "Voters",
        "i",
        "voters",
        "i",
        "GetClone",
        "v",
        "intend",
        "Voters",
        "v",
        "SetIntension",
        "intend",
        "v",
        "Ballots",
        "v",
        "Vote",
        "v",
        "Voters",
        "v",
        "ID",
        "Voters",
        "v",
        "SetCode",
        "code",
        "v",
        "correct",
        "Ballots",
        "v",
        "Scan",
        "correct",
        "v",
        "Voters",
        "v",
        "Code",
        "Ballots",
        "v",
        "Choice",
        "StringBuilder",
        "sb",
        "AppendLine",
        "Voter",
        "voter",
        "Voters",
        "sb",
        "AppendLine",
        "voter",
        "ToString",
        "sb",
        "AppendLine",
        "Ballot",
        "ballot",
        "Ballots",
        "sb",
        "AppendLine",
        "ballot",
        "ToString",
        "sb",
        "ToString",
        "BallotCollection",
        "VotersNo",
        "CandidatesNo",
        "Ballots",
        "Voters",
        "b",
        "StringBuilder",
        "Ballot",
        "ballot",
        "Ballots",
        "sb",
        "AppendLine",
        "ballot",
        "ExpressionID",
        "sb",
        "ToString",
        "id",
        "candidates",
        "ID",
        "id",
        "Candidates",
        "candidates",
        "v",
        "intend",
        "Voter",
        "v",
        "i",
        "Candidates",
        "Length",
        "i",
        "Candidates",
        "i",
        "intend",
        "Choice",
        "i",
        "Choice",
        "intend",
        "correct",
        "correct",
        "ScannedCandidate",
        "Candidates",
        "Choice",
        "Choice",
        "Candidates",
        "Length",
        "ScannedCandidate",
        "Candidates",
        "Choice",
        "ScannedCandidate",
        "Candidates",
        "Choice",
        "ScannedCandidate",
        "ID",
        "Voter",
        "Choice",
        "ScannedCandidate",
        "Ballot",
        "ID",
        "Candidates",
        "b",
        "Voter",
        "Voter",
        "b",
        "Choice",
        "Choice",
        "b",
        "ScannedCandidate",
        "ScannedCandidate",
        "b",
        "ID",
        "Voter",
        "Choice",
        "ScannedCandidate"
    ],
    "literals": [
        "\"Code is already set with value: \"",
        "\"Intension is already initialized with value: \"",
        "\"Voter:\"",
        "\";Intension:\"",
        "\";Code:\"",
        "\"Voters:\"",
        "\"Ballots:\"",
        "\"There is no candidate of ID: \"",
        "\"Ballot:\"",
        "\"; VoterID:\"",
        "\" Choice:\"",
        "\": Scan:\"",
        "\" \"",
        "\" \"",
        "\" \""
    ],
    "variables": [
        "ID",
        "Intension",
        "Code",
        "Voter",
        "v",
        "ExpressionID",
        "VotersNo",
        "CandidatesNo",
        "TableP",
        "TableS",
        "TableQ",
        "TableR",
        "Ballots",
        "Voters",
        "i",
        "candidates",
        "j",
        "i",
        "code",
        "StringBuilder",
        "sb",
        "BallotCollection",
        "b",
        "ExpressionID",
        "StringBuilder",
        "sb",
        "ID",
        "Voter",
        "Candidates",
        "Choice",
        "ScannedCandidate",
        "i",
        "Ballot",
        "b",
        "ExpressionID"
    ],
    "comments": [
        "the namespace must be PAT.Lib, the class and method names can be arbitrary",
        "The math library that can be used in your model.",
        "all methods should be declared as public static.",
        "",
        "The parameters must be of type \"int\", or \"int array\"",
        "The number of parameters can be 0 or many",
        "",
        "The return type can be bool, int or int[] only.",
        "",
        "The method name will be used directly in your model.",
        "e.g. call(max, 10, 2), call(dominate, 3, 2), call(amax, [1,3,5]),",
        "",
        "Note: method names are case sensetive",
        "</summary>",
        "Please implement this method to provide the string representation of the datatype",
        "</summary>",
        "<returns></returns>",
        "Please implement this method to return a deep clone of the current object",
        "</summary>",
        "<returns></returns>",
        "Please implement this method to provide the compact string representation of the datatype",
        "</summary>",
        "<returns></returns>",
        "The math library that can be used in your model.",
        "all methods should be declared as public static.",
        "",
        "The parameters must be of type \"int\", or \"int array\"",
        "The number of parameters can be 0 or many",
        "",
        "The return type can be bool, int or int[] only.",
        "",
        "The method name will be used directly in your model.",
        "e.g. call(max, 10, 2), call(dominate, 3, 2), call(amax, [1,3,5]),",
        "",
        "Note: method names are case sensetive",
        "</summary>",
        "SwitchBoardMapping2[i + candidateNo + j].Value;",
        "Please implement this method to provide the string representation of the datatype",
        "</summary>",
        "<returns></returns>",
        "Please implement this method to return a deep clone of the current object",
        "</summary>",
        "<returns></returns>",
        "Please implement this method to provide the compact string representation of the datatype",
        "</summary>",
        "<returns></returns>",
        "The math library that can be used in your model.",
        "all methods should be declared as public static.",
        "",
        "The parameters must be of type \"int\", or \"int array\"",
        "The number of parameters can be 0 or many",
        "",
        "The return type can be bool, int or int[] only.",
        "",
        "The method name will be used directly in your model.",
        "e.g. call(max, 10, 2), call(dominate, 3, 2), call(amax, [1,3,5]),",
        "",
        "Note: method names are case sensetive",
        "</summary>",
        "index of the candidates;",
        "this is the choice scanned in",
        "if scanned correctly. then the",
        "if the scan is the last one, then set to the previous one",
        "otherwise set to the next one",
        "Please implement this method to provide the string representation of the datatype",
        "</summary>",
        "<returns></returns>",
        "Please implement this method to return a deep clone of the current object",
        "</summary>",
        "<returns></returns>",
        "Please implement this method to provide the compact string representation of the datatype",
        "</summary>",
        "<returns></returns>"
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "Voter",
        "SetCode",
        "SetIntension",
        "ToString",
        "GetID",
        "Voter",
        "GetClone",
        "BallotCollection",
        "TableInitialization",
        "ObjectInvariant",
        "BallotCollection",
        "SetIntension",
        "Vote",
        "Scan",
        "Challenge",
        "ToString",
        "ExpressionValue",
        "GetClone",
        "Ballot",
        "Vote",
        "Scan",
        "ToString",
        "Ballot",
        "GetClone"
    ],
    "classes": [
        "Voter",
        "BallotCollection",
        "Ballot"
    ]
}