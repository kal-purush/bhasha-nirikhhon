{
    "identifiers": [
        "java",
        "io",
        "java",
        "net",
        "java",
        "util",
        "java",
        "nio",
        "config_file",
        "number_nodes",
        "my_net_id",
        "net_id_config",
        "nodeID",
        "nodeNames",
        "hostNames",
        "portNums",
        "tokenPaths",
        "random_value",
        "serverSock",
        "writer_file",
        "token_received",
        "token_emitted",
        "myTokensRunning",
        "otherTokensRunning",
        "countReceive",
        "args",
        "args",
        "length",
        "token_received",
        "token_emitted",
        "nodeID",
        "args",
        "config_file",
        "args",
        "randomGenerator",
        "random_value",
        "randomGenerator",
        "nextInt",
        "project1",
        "readConfig",
        "parseInt",
        "nodeID",
        "writer_file",
        "config_file",
        "replace",
        "nodeID",
        "writer_file",
        "writer_file",
        "nodeID",
        "writer_file",
        "hostNames",
        "get",
        "parseInt",
        "nodeID",
        "portNums",
        "get",
        "parseInt",
        "nodeID",
        "writer_file",
        "random_value",
        "tokenPaths",
        "size",
        "writer_file",
        "writer_file",
        "close",
        "e",
        "e",
        "printStackTrace",
        "enableServer",
        "sleep",
        "emitTokens",
        "project1",
        "listenSocket",
        "node_ID",
        "node_ID",
        "br",
        "config_file",
        "currentLine",
        "currentLine",
        "br",
        "readLine",
        "currentLine",
        "trim",
        "length",
        "currentLine",
        "trim",
        "charAt",
        "currentLine",
        "trim",
        "charAt",
        "currentLine",
        "trim",
        "contains",
        "currentLine",
        "currentLine",
        "substring",
        "currentLine",
        "indexOf",
        "currentLine",
        "contains",
        "net_id_config",
        "number_nodes",
        "parseInt",
        "currentLine",
        "trim",
        "replaceAll",
        "replace",
        "currentLine",
        "contains",
        "net_id_config",
        "number_nodes",
        "parseInt",
        "currentLine",
        "trim",
        "replaceAll",
        "replace",
        "currentLine",
        "contains",
        "after",
        "currentLine",
        "trim",
        "replaceAll",
        "parts",
        "after",
        "split",
        "nodeNames",
        "add",
        "parts",
        "hostNames",
        "add",
        "parts",
        "portNums",
        "add",
        "parts",
        "currentLine",
        "trim",
        "contains",
        "valueOf",
        "currentLine",
        "trim",
        "valueOf",
        "nodeID",
        "tokenPaths",
        "add",
        "currentLine",
        "trim",
        "paths",
        "currentLine",
        "trim",
        "replaceAll",
        "split",
        "valueOf",
        "paths",
        "valueOf",
        "nodeID",
        "tokenPaths",
        "add",
        "currentLine",
        "trim",
        "replaceAll",
        "e",
        "e",
        "printStackTrace",
        "port",
        "i",
        "i",
        "nodeNames",
        "size",
        "i",
        "valueOf",
        "nodeID",
        "valueOf",
        "nodeNames",
        "get",
        "i",
        "port",
        "parseInt",
        "portNums",
        "get",
        "i",
        "serverSock",
        "port",
        "e",
        "port",
        "exit",
        "seconds",
        "sleep",
        "seconds",
        "ex",
        "currentThread",
        "interrupt",
        "tokenPaths",
        "size",
        "myTokensRunning",
        "broadcastReceived",
        "i",
        "i",
        "tokenPaths",
        "size",
        "i",
        "token_emitted",
        "oldToken",
        "tokenPaths",
        "get",
        "i",
        "random_value",
        "nodeID",
        "token_emitted",
        "newToken",
        "oldToken",
        "substring",
        "oldToken",
        "indexOf",
        "parts",
        "newToken",
        "split",
        "writeString",
        "writeString",
        "append",
        "tokenPaths",
        "get",
        "i",
        "nodeID",
        "writeFile",
        "writeString",
        "toString",
        "writeFile",
        "writeFile",
        "replace",
        "writer_file",
        "token_emitted",
        "writeFile",
        "parts",
        "length",
        "newToken",
        "self_node",
        "parseInt",
        "parts",
        "self_port",
        "parseInt",
        "portNums",
        "get",
        "self_node",
        "self_host",
        "hostNames",
        "get",
        "self_node",
        "connectAndSend",
        "self_host",
        "self_port",
        "newToken",
        "parts",
        "length",
        "next_node",
        "parseInt",
        "parts",
        "next_port",
        "parseInt",
        "portNums",
        "get",
        "next_node",
        "next_host",
        "hostNames",
        "get",
        "next_node",
        "connectAndSend",
        "next_host",
        "next_port",
        "newToken",
        "myTokensRunning",
        "otherTokensRunning",
        "w",
        "w",
        "serverSock",
        "accept",
        "t",
        "w",
        "t",
        "start",
        "e",
        "nodeID",
        "serverSock",
        "close",
        "currentThread",
        "interrupt",
        "ex",
        "nodeID",
        "exit",
        "client",
        "client",
        "client",
        "client",
        "line",
        "client",
        "getInputStream",
        "client",
        "getOutputStream",
        "e",
        "exit",
        "line",
        "readLine",
        "line",
        "client",
        "close",
        "line",
        "contains",
        "countReceive",
        "countReceive",
        "nodeNames",
        "size",
        "otherTokensRunning",
        "client",
        "close",
        "currentThread",
        "interrupt",
        "line",
        "parts",
        "line",
        "split",
        "parts",
        "length",
        "parseInt",
        "parts",
        "parseInt",
        "nodeID",
        "final_correct_node",
        "parseInt",
        "parts",
        "final_correct_port",
        "parseInt",
        "portNums",
        "get",
        "final_correct_node",
        "final_correct_host",
        "hostNames",
        "get",
        "final_correct_node",
        "connectAndSend",
        "final_correct_host",
        "final_correct_port",
        "line",
        "client",
        "close",
        "currentThread",
        "interrupt",
        "old_value",
        "parseInt",
        "parts",
        "parts",
        "length",
        "trim",
        "last_value",
        "old_value",
        "random_value",
        "origin_node",
        "parseInt",
        "parts",
        "origin_port",
        "parseInt",
        "portNums",
        "get",
        "origin_node",
        "origin_host",
        "hostNames",
        "get",
        "origin_node",
        "last_token",
        "line",
        "substring",
        "line",
        "indexOf",
        "last_token",
        "last_token",
        "replace",
        "toString",
        "old_value",
        "toString",
        "last_value",
        "connectAndSend",
        "origin_host",
        "origin_port",
        "last_token",
        "parts",
        "length",
        "parseInt",
        "parts",
        "parseInt",
        "nodeID",
        "correct_node",
        "parseInt",
        "parts",
        "correct_port",
        "parseInt",
        "portNums",
        "get",
        "correct_node",
        "correct_host",
        "hostNames",
        "get",
        "correct_node",
        "connectAndSend",
        "correct_host",
        "correct_port",
        "line",
        "client",
        "close",
        "currentThread",
        "interrupt",
        "pre_value",
        "parseInt",
        "parts",
        "parts",
        "length",
        "trim",
        "current_value",
        "pre_value",
        "random_value",
        "next_node",
        "parseInt",
        "parts",
        "next_port",
        "parseInt",
        "portNums",
        "get",
        "next_node",
        "next_host",
        "hostNames",
        "get",
        "next_node",
        "next_token",
        "line",
        "substring",
        "line",
        "indexOf",
        "next_token",
        "next_token",
        "replace",
        "toString",
        "pre_value",
        "toString",
        "current_value",
        "connectAndSend",
        "next_host",
        "next_port",
        "next_token",
        "parts",
        "length",
        "token_received",
        "ultimate_value",
        "parseInt",
        "parts",
        "trim",
        "writer_file",
        "parts",
        "parts",
        "length",
        "parts",
        "token_received",
        "tokenPaths",
        "size",
        "myTokensRunning",
        "broadcastReceived",
        "writer_file",
        "writer_file",
        "close",
        "client",
        "close",
        "currentThread",
        "interrupt",
        "e",
        "exit",
        "host",
        "port",
        "token",
        "ClientSocket",
        "host",
        "port",
        "writer",
        "ClientSocket",
        "getOutputStream",
        "writer",
        "token",
        "writer",
        "close",
        "ClientSocket",
        "close",
        "ex",
        "ex",
        "printStackTrace",
        "message",
        "i",
        "i",
        "nodeNames",
        "size",
        "i",
        "intNode",
        "parseInt",
        "nodeID",
        "i",
        "intNode",
        "port",
        "parseInt",
        "portNums",
        "get",
        "i",
        "host",
        "hostNames",
        "get",
        "i",
        "connectAndSend",
        "host",
        "port",
        "message"
    ],
    "literals": [
        "\"xxw130730\"",
        "\"Please input the node ID\"",
        "\"Started, this program takes about 6 seconds to finish, please remain patient...\"",
        "\"Constructing output file...\"",
        "\".txt\"",
        "\"\"",
        "\"-xxw130730-\"",
        "\".out\"",
        "\"Net ID: xxw130730\"",
        "\"Node ID: \"",
        "\"Listening on \"",
        "\": \"",
        "\"Random Number: \"",
        "\"All tokens received\"",
        "\"out of listenSocket()\"",
        "\"Node \"",
        "\": Starting to read config file!\"",
        "\"#\"",
        "\" xxw130730\"",
        "\"xxw130730\"",
        "\"\\\\s+\"",
        "\" \"",
        "\" xxw130730\"",
        "\"\"",
        "\" kam093020\"",
        "\"kam093020\"",
        "\"\\\\s+\"",
        "\" \"",
        "\" kam093020\"",
        "\"\"",
        "\"dc\"",
        "\"\\\\s+\"",
        "\" \"",
        "\"\\\\s+\"",
        "\" \"",
        "\"\\\\s+\"",
        "\" \"",
        "\"\\\\s+\"",
        "\"\\\\s+\"",
        "\" \"",
        "\"Could not listen on port \"",
        "\"No tokens to be sent for this node \"",
        "\" \"",
        "\" \"",
        "\" \"",
        "\"\\\\s+\"",
        "\" \"",
        "\" \"",
        "\" -> \"",
        "\"Emitting token \"",
        "\"   with path \"",
        "\"This node is the only node on the path: \"",
        "\".utdallas.edu\"",
        "\".utdallas.edu\"",
        "\"Accept failed in listenSocket(), node \"",
        "\" terminated\"",
        "\"this node has already terminated, node : \"",
        "\"in or out failed\"",
        "\"AllReceived\"",
        "\"Done, please press enter and run cleanup.sh\"",
        "\"Token received: \"",
        "\"\\\\s+\"",
        "\".utdallas.edu\"",
        "\".utdallas.edu\"",
        "\".utdallas.edu\"",
        "\".utdallas.edu\"",
        "\"Received token \"",
        "\"   Token sum: \"",
        "\"All tokens received\"",
        "\"Error: parts.length < 2 , impossible condition\"",
        "\"Read failed\"",
        "\"Exception errors from ClientWorker class run() or emitTokens()\"",
        "\"Failed to connect to server or write to server \"",
        "\"AllReceived\"",
        "\".utdallas.edu\""
    ],
    "variables": [
        "config_file",
        "number_nodes",
        "net_id_config",
        "nodeID",
        "random_value",
        "serverSock",
        "writer_file",
        "token_received",
        "token_emitted",
        "currentLine",
        "w",
        "client",
        "line"
    ],
    "comments": [
        "field of the project:",
        "public static final String HOST_SUFFIX = \".utdallas.edu\";",
        "record the number of nodes in the system",
        "Section 2 messages:",
        "Section 3 messages:",
        "System.out.println(\"Node ID: \" + nodeID);",
        "System.out.println(\"Random value of this node: \" + random_value);",
        "empty line case:",
        "section 1 : xx xxw130730:",
        "System.out.println(\"Section 1: number of nodes and netid \");",
        "System.out.println(\"number of nodes: \" + number_nodes);",
        "System.out.println(\"net_id from config file: \" + net_id_config);",
        "System.out.println();",
        "System.out.println(\"Section 1: number of nodes and netid \");",
        "System.out.println(\"number of nodes: \" + number_nodes);",
        "System.out.println(\"net_id from config file: \" + net_id_config);",
        "section 2 : node_id host_id port:",
        "System.out.println(\"Section 2: \");",
        "System.out.println(\"node, host, port: \" + parts[0]+ \", \" + parts[1] + \", \" + parts[2]);",
        "assume clean config file:",
        "System.out.println(\"Section 3: token paths: \");",
        "System.out.println();",
        "System.out.println(\"Section 3: token paths: \");",
        "for(int j=0; j<tokenPaths.size();j++){",
        "System.out.println(\"token paths taken by node \" + nodeID + \": \" + tokenPaths.get(j));",
        "}",
        "System.out.println(\"Number of tokens: \" + tokenPaths.size());",
        "System.out.println(\"Node \" + nodeID + \" listening on port \" + port);",
        "handling first batch of tokens:",
        "erase itself from path, add itself to the end of the token, add value and paths",
        "delete myslef on the path and send",
        "need to write to output file now:",
        "loopback to itself:",
        "parts[1] is node itself,same as below //int self_node = Integer.parseInt(nodeID);",
        "System.out.println(\"Token info for this node:  host , token\");",
        "System.out.println( self_host + \", \" + newToken );",
        "System.out.println(\"Emitting token to itself... \");",
        "need to send the newToken to next node:",
        "System.out.println(\"Token info for this node:  host , token\");",
        "System.out.println(next_host + \", \" + newToken);",
        "System.out.println(\"Emitting token... \");",
        "emit token:",
        "change this to all other nodes tokens received later",
        "Constructor",
        "while(true){",
        "System.out.println(\"myTokensRunning and otherTokensRunning: \" + myTokensRunning + \" \" + otherTokensRunning);",
        "return;",
        "myself is the last node on the token path: length == 4",
        "need to send it to the origin node and plus my random value",
        "modify token",
        "forward the token to its origin point:",
        "System.out.println(\"Random value of this node: \" + random_value);",
        "System.out.println(\"Old token value: \" + old_value);",
        "System.out.println(\"After sum: \" + last_value);",
        "normal condition when the token paths are long enough",
        "System.out.println(\"Random value of this node: \" + random_value);",
        "System.out.println(\"Old token value: \" + pre_value);",
        "System.out.println(\"After sum: \" + current_value);",
        "the token return to its origin node. add nothing, only take the value out",
        "System.out.println(\"A token received by node \" + nodeID + \", value: \" + ultimate_value);",
        "now it needs to tell other nodes that it received all tokens!",
        "boooooooo:",
        "break;",
        "}",
        "boolean autoflush or not?"
    ],
    "docstrings": [
        "f((!myTokensRunning) && (!otherTokensRunning)){\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tserverSock.close();\n\t\t\t\t\t\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t\t\t\t\t\t\t//System.exit(-1);\n\t\t\t\t\t\t\t\t\t}catch(IOException e){\n\t\t\t\t\t\t\t\t\t\t//log error just in case\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}"
    ],
    "functions": [
        "main",
        "readConfig",
        "enableServer",
        "sleep",
        "emitTokens",
        "listenSocket",
        "ClientWorker",
        "run",
        "connectAndSend",
        "broadcastReceived"
    ],
    "classes": [
        "Project1",
        "ClientWorker"
    ]
}