{
    "identifiers": [
        "UnityEngine",
        "Collections",
        "Generic",
        "MonoBehaviour",
        "LeanAudioOptions",
        "AnimationCurve",
        "volume",
        "AnimationCurve",
        "frequency",
        "LeanAudioOptions",
        "options",
        "options",
        "options",
        "LeanAudioOptions",
        "createAudioWave",
        "volume",
        "frequency",
        "options",
        "createAudioFromWave",
        "generatedWavePts",
        "options",
        "AnimationCurve",
        "volume",
        "AnimationCurve",
        "frequency",
        "LeanAudioOptions",
        "options",
        "volume",
        "volume",
        "length",
        "time",
        "generatedWaveDistances",
        "i",
        "PROCESSING_ITERATIONS_MAX",
        "i",
        "frequency",
        "Evaluate",
        "passed",
        "f",
        "MIN_FREQEUNCY_PERIOD",
        "f",
        "MIN_FREQEUNCY_PERIOD",
        "volume",
        "Evaluate",
        "passed",
        "f",
        "options",
        "vibrato",
        "j",
        "options",
        "vibrato",
        "Length",
        "j",
        "Mathf",
        "Abs",
        "Mathf",
        "Sin",
        "passed",
        "options",
        "vibrato",
        "j",
        "Mathf",
        "PI",
        "options",
        "vibrato",
        "j",
        "peakMulti",
        "options",
        "vibrato",
        "j",
        "diff",
        "peakMulti",
        "height",
        "peakMulti",
        "passed",
        "f",
        "time",
        "generatedWaveDistances",
        "Add",
        "f",
        "passed",
        "f",
        "Add",
        "passed",
        "Add",
        "i",
        "height",
        "height",
        "i",
        "PROCESSING_ITERATIONS_MAX",
        "Debug",
        "LogError",
        "PROCESSING_ITERATIONS_MAX",
        "Count",
        "i",
        "wave",
        "Length",
        "i",
        "wave",
        "i",
        "i",
        "wave",
        "wave",
        "LeanAudioOptions",
        "options",
        "wave",
        "wave",
        "Length",
        "options",
        "frequencyRate",
        "time",
        "wave",
        "waveIter",
        "wave",
        "waveIter",
        "wave",
        "waveIter",
        "i",
        "audioArr",
        "Length",
        "i",
        "i",
        "options",
        "frequencyRate",
        "passedTime",
        "wave",
        "waveIter",
        "subWaveTimeLast",
        "wave",
        "waveIter",
        "waveIter",
        "subWaveDiff",
        "wave",
        "waveIter",
        "wave",
        "waveIter",
        "waveHeight",
        "wave",
        "waveIter",
        "subWaveTime",
        "passedTime",
        "subWaveTimeLast",
        "subWaveTime",
        "subWaveDiff",
        "Mathf",
        "Sin",
        "ratioElapsed",
        "Mathf",
        "PI",
        "value",
        "waveHeight",
        "audioArr",
        "i",
        "value",
        "audioArr",
        "Length",
        "UNITY_3_5",
        "UNITY_4_0",
        "UNITY_4_0_1",
        "UNITY_4_1",
        "UNITY_4_2",
        "UNITY_4_3",
        "UNITY_4_5",
        "UNITY_4_6",
        "AudioClip",
        "Create",
        "lengthSamples",
        "options",
        "frequencyRate",
        "AudioClip",
        "Create",
        "lengthSamples",
        "options",
        "frequencyRate",
        "is3dSound",
        "audioClip",
        "SetData",
        "audioArr",
        "audioClip",
        "AnimationCurve",
        "curve",
        "frequencyRate",
        "curve",
        "curve",
        "length",
        "time",
        "frequencyRate",
        "time",
        "i",
        "audioArr",
        "Length",
        "i",
        "i",
        "frequencyRate",
        "audioArr",
        "i",
        "curve",
        "Evaluate",
        "pt",
        "audioArr",
        "Length",
        "UNITY_3_5",
        "UNITY_4_0",
        "UNITY_4_0_1",
        "UNITY_4_1",
        "UNITY_4_2",
        "UNITY_4_3",
        "UNITY_4_5",
        "UNITY_4_6",
        "AudioClip",
        "Create",
        "lengthSamples",
        "frequencyRate",
        "AudioClip",
        "Create",
        "lengthSamples",
        "frequencyRate",
        "is3dSound",
        "audioClip",
        "SetData",
        "audioArr",
        "audioClip",
        "AudioClip",
        "audio",
        "Vector3",
        "pos",
        "volume",
        "pitch",
        "playClipAt",
        "audio",
        "pos",
        "audioSource",
        "minDistance",
        "audioSource",
        "pitch",
        "pitch",
        "audioSource",
        "volume",
        "volume",
        "AudioClip",
        "clip",
        "Vector3",
        "pos",
        "GameObject",
        "tempGO",
        "transform",
        "position",
        "pos",
        "tempGO",
        "AddComponent",
        "AudioSource",
        "aSource",
        "clip",
        "clip",
        "aSource",
        "Play",
        "Destroy",
        "tempGO",
        "clip",
        "length",
        "aSource",
        "AudioClip",
        "audioClip",
        "AnimationCurve",
        "curve",
        "scaleX",
        "audioClip",
        "samples",
        "audioClip",
        "channels",
        "audioClip",
        "GetData",
        "samples",
        "Keyframe",
        "Keyframe",
        "samples",
        "Length",
        "i",
        "samples",
        "Length",
        "frames",
        "i",
        "Keyframe",
        "i",
        "scaleX",
        "samples",
        "i",
        "i",
        "curve",
        "AnimationCurve",
        "frames",
        "Vector3",
        "frequencyRate",
        "frequencyRate",
        "frequencyRate",
        "Vector3",
        "vibrato",
        "vibrato",
        "vibrato"
    ],
    "literals": [
        "\"LeanAudio has reached it's processing cap. To avoid this error increase the number of iterations ex: LeanAudio.PROCESSING_ITERATIONS_MAX = \"",
        "\"Generated Audio\"",
        "\"Generated Audio\"",
        "\"Generated Audio\"",
        "\"Generated Audio\""
    ],
    "variables": [
        "MIN_FREQEUNCY_PERIOD",
        "PROCESSING_ITERATIONS_MAX",
        "generatedWaveDistances",
        "generatedWavePts",
        "time",
        "passed",
        "i",
        "f",
        "height",
        "j",
        "peakMulti",
        "diff",
        "wave",
        "i",
        "time",
        "audioArr",
        "waveIter",
        "subWaveDiff",
        "subWaveTimeLast",
        "subWaveTime",
        "waveHeight",
        "i",
        "passedTime",
        "ratioElapsed",
        "value",
        "lengthSamples",
        "AudioClip",
        "audioClip",
        "is3dSound",
        "AudioClip",
        "audioClip",
        "curveTime",
        "time",
        "curveTime",
        "audioArr",
        "i",
        "pt",
        "lengthSamples",
        "AudioClip",
        "audioClip",
        "is3dSound",
        "AudioClip",
        "audioClip",
        "AudioSource",
        "audioSource",
        "GameObject",
        "tempGO",
        "AudioSource",
        "aSource",
        "samples",
        "i",
        "frames",
        "vibrato",
        "frequencyRate"
    ],
    "comments": [
        "float[] vibratoValues = new float[ vibrato.Length ];",
        "Debug.Log(\"i:\"+i+\" f:\"+f+\" passed:\"+passed+\" height:\"+height+\" time:\"+time);",
        "Debug.Log(\"passed wave i:\"+i);",
        "if(i<25)",
        "Debug.Log(\"passedTime:\"+passedTime+\" value:\"+value+\" ratioElapsed:\"+ratioElapsed+\" subWaveTime:\"+subWaveTime+\" subWaveDiff:\"+subWaveDiff);",
        "Debug.Log(\"pt:\"+pt+\" i:\"+i+\" val:\"+audioArr[i]+\" len:\"+audioArr.Length);",
        "Debug.Log(\"curveTime:\"+curveTime+\" AudioSettings.outputSampleRate:\"+AudioSettings.outputSampleRate);",
        "Debug.Log(\"pt:\"+pt+\" i:\"+i+\" val:\"+audioArr[i]+\" len:\"+audioArr.Length);",
        "(int)( (float)frequencyRate * curveTime );",
        "Debug.Log(\"audio length:\"+audio.length);",
        "create the temp object",
        "set its position",
        "add an audio source",
        "define the clip",
        "start the sound",
        "destroy object after clip du1783ration",
        "return the AudioSource reference",
        "Debug.Log(\"Audio channels:\"+audioClip.channels+\" frequency:\"+audioClip.frequency+\" length:\"+audioClip.length+\" samples:\"+audioClip.samples);"
    ],
    "docstrings": [
        "* Create Audio dynamically and easily playback\n*\n* @class LeanAudio\n* @constructor",
        "* Create dynamic audio from a set of Animation Curves and other options.\n\t* \n\t* @method createAudio\n\t* @param {AnimationCurve} volumeCurve:AnimationCurve describing the shape of the audios volume (from 0-1). The length of the audio is dicated by the end value here.\n\t* @param {AnimationCurve} frequencyCurve:AnimationCurve describing the width of the oscillations between the sound waves in seconds. Large numbers mean a lower note, while higher numbers mean a tighter frequency and therefor a higher note. Values are usually between 0.01 and 0.000001 (or smaller)\n\t* @param {LeanAudioOptions} options:LeanAudioOptions You can pass any other values in here like vibrato or the frequency you would like the sound to be encoded at. See <a href=\"LeanAudioOptions.html\">LeanAudioOptions</a> for more details.\n\t* @return {AudioClip} AudioClip of the procedurally generated audio\n\t* @example\n\t* AnimationCurve volumeCurve = new AnimationCurve( new Keyframe(0f, 1f, 0f, -1f), new Keyframe(1f, 0f, -1f, 0f));<br>\n\t* AnimationCurve frequencyCurve = new AnimationCurve( new Keyframe(0f, 0.003f, 0f, 0f), new Keyframe(1f, 0.003f, 0f, 0f));<br>\n\t* AudioClip audioClip = LeanAudio.createAudio(volumeCurve, frequencyCurve, LeanAudio.options().setVibrato( new Vector3[]{ new Vector3(0.32f,0f,0f)} ));<br>",
        "* Pass in options to LeanAudio\n*\n* @class LeanAudioOptions\n* @constructor",
        "* Set the frequency for the audio is encoded. 44100 is CD quality, but you can usually get away with much lower (or use a lower amount to get a more 8-bit sound).\n\t* \n\t* @method setFrequency\n\t* @param {int} frequencyRate:int of the frequency you wish to encode the AudioClip at\n\t* @return {LeanAudioOptions} LeanAudioOptions describing optional values\n\t* @example\n\t* AnimationCurve volumeCurve = new AnimationCurve( new Keyframe(0f, 1f, 0f, -1f), new Keyframe(1f, 0f, -1f, 0f));<br>\n\t* AnimationCurve frequencyCurve = new AnimationCurve( new Keyframe(0f, 0.003f, 0f, 0f), new Keyframe(1f, 0.003f, 0f, 0f));<br>\n\t* AudioClip audioClip = LeanAudio.createAudio(volumeCurve, frequencyCurve, LeanAudio.options().setVibrato( new Vector3[]{ new Vector3(0.32f,0f,0f)} ).setFrequency(12100) );<br>",
        "* Set details about the shape of the curve by adding vibrato waves through it. You can add as many as you want to sculpt out more detail in the sound wave.\n\t* \n\t* @method setVibrato\n\t* @param {Vector3[]} vibratoArray:Vector3[] The first value is the period in seconds that you wish to have the vibrato wave fluctuate at. The second value is the minimum height you wish the vibrato wave to dip down to (default is zero). The third is reserved for future effects.\n\t* @return {LeanAudioOptions} LeanAudioOptions describing optional values\n\t* @example\n\t* AnimationCurve volumeCurve = new AnimationCurve( new Keyframe(0f, 1f, 0f, -1f), new Keyframe(1f, 0f, -1f, 0f));<br>\n\t* AnimationCurve frequencyCurve = new AnimationCurve( new Keyframe(0f, 0.003f, 0f, 0f), new Keyframe(1f, 0.003f, 0f, 0f));<br>\n\t* AudioClip audioClip = LeanAudio.createAudio(volumeCurve, frequencyCurve, LeanAudio.options().setVibrato( new Vector3[]{ new Vector3(0.32f,0.3f,0f)} ).setFrequency(12100) );<br>"
    ],
    "functions": [
        "LeanAudioOptions",
        "options",
        "AudioClip",
        "createAudio",
        "createAudioWave",
        "AudioClip",
        "createAudioFromWave",
        "AudioClip",
        "generateAudioFromCurve",
        "playAudio",
        "AudioSource",
        "playClipAt",
        "printOutAudioClip",
        "LeanAudioOptions",
        "LeanAudioOptions",
        "setFrequency",
        "LeanAudioOptions",
        "setVibrato"
    ],
    "classes": [
        "LeanAudio",
        "LeanAudioOptions"
    ]
}