{
    "identifiers": [
        "ResponseError",
        "RequestType",
        "IRequestHandler",
        "NotificationType",
        "INotificationHandler",
        "IValidatorConnection",
        "createValidatorConnection",
        "SingleFileValidator",
        "InitializeResult",
        "InitializeError",
        "IValidationRequestor",
        "ISimpleTextDocument",
        "Diagnostic",
        "Severity",
        "Position",
        "Files",
        "LanguageServerError",
        "MessageKind",
        "fs",
        "path",
        "key",
        "e",
        "res",
        "e",
        "Severity",
        "e",
        "e",
        "e",
        "res",
        "severity",
        "severity",
        "Severity",
        "Severity",
        "Severity",
        "checker",
        "checker",
        "settings",
        "settings",
        "settings",
        "settings",
        "checker",
        "settings",
        "settings",
        "checker",
        "settings",
        "settings",
        "checker",
        "settings",
        "createValidatorConnection",
        "process",
        "process",
        "rootFolder",
        "Files",
        "rootFolder",
        "value",
        "lib",
        "value",
        "error",
        "ResponseError",
        "_settings",
        "requestor",
        "settings",
        "_settings",
        "requestor",
        "lib",
        "checker",
        "settings",
        "checker",
        "settings",
        "settings",
        "checker",
        "settings",
        "checker",
        "checker",
        "fileContents",
        "results",
        "errors",
        "errors",
        "e",
        "result",
        "makeDiagnostic",
        "e",
        "result",
        "MyCommandRequest",
        "connection",
        "MyCommandRequest",
        "connection",
        "validator"
    ],
    "literals": [
        "'use strict'",
        "'vscode-languageserver'",
        "'fs'",
        "'path'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'JSCS: '",
        "\"preset\"",
        "'airbnb'",
        "\"preset\"",
        "string",
        "'jscs'",
        "'Failed to load eslint library. Please install eslint in your workspace folder using \\'npm install eslint\\' and then press Retry.'",
        "\"preset\"",
        "'jquery'",
        "'jscs/myCommand'",
        "string",
        "string",
        "Recevied command ${params.command}"
    ],
    "variables": [
        "settings",
        "options",
        "lib",
        "res",
        "connection",
        "validator",
        "checker",
        "result",
        "fileContents",
        "results",
        "errors"
    ],
    "comments": [
        "---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------",
        "return {",
        "message: problem.message,",
        "severity: convertSeverity(problem.severity),",
        "start: {",
        "line: problem.line - 1,",
        "character: problem.column - 1",
        "}",
        "};",
        "all JSCS errors are Warnings in our world",
        "start alone will select word if in one",
        "Number.MAX_VALUE will select to the end of the line",
        ", end: {",
        "line: e.line,",
        "character: Number.MAX_VALUE",
        "}",
        "Eslint 1 is warning",
        "TODO provide some sort of warning that there is no config",
        "use jquery by default",
        "let CLIEngine = lib.CLIEngine;",
        "try {",
        "var cli = new CLIEngine(options);",
        "let content = document.getText();",
        "let uri = document.uri;",
        "let report: ESLintReport = cli.executeOnText(content, Files.uriToFilePath(uri));",
        "let diagnostics: Diagnostic[] = [];",
        "if (report && report.results && Array.isArray(report.results) && report.results.length > 0) {",
        "let docReport = report.results[0];",
        "if (docReport.messages && Array.isArray(docReport.messages)) {",
        "docReport.messages.forEach((problem) => {",
        "if (problem) {",
        "diagnostics.push(makeDiagnostic(problem));",
        "}",
        "});",
        "}",
        "}",
        "return diagnostics;",
        "} catch (err) {",
        "let message: string = null;",
        "if (typeof err.message === 'string' || err.message instanceof String) {",
        "message = <string>err.message;",
        "message = message.replace(/\\r?\\n/g, ' ');",
        "if (/^CLI: /.test(message)) {",
        "message = message.substr(5);",
        "}",
        "throw new LanguageServerError(message, MessageKind.Show);",
        "}",
        "throw err;",
        "}"
    ],
    "docstrings": [],
    "functions": [
        "makeDiagnostic",
        "convertSeverity",
        "setConfig",
        "onConfigurationChange"
    ],
    "classes": []
}