{
    "identifiers": [
        "_",
        "_",
        "_",
        "angular",
        "fns",
        "inlineAnnotatedConstructor",
        "val",
        "obj",
        "modules",
        "offset",
        "timestamp",
        "offset",
        "timestamp",
        "mode",
        "delay",
        "expectedDelay",
        "millis",
        "count",
        "method",
        "url",
        "url",
        "data",
        "data",
        "headers",
        "mock",
        "url",
        "url",
        "headers",
        "mock",
        "url",
        "url",
        "headers",
        "mock",
        "url",
        "url",
        "headers",
        "mock",
        "url",
        "url",
        "mock",
        "url",
        "url",
        "data",
        "data",
        "headers",
        "mock",
        "url",
        "url",
        "data",
        "data",
        "headers",
        "mock",
        "url",
        "url",
        "data",
        "data",
        "headers",
        "mock",
        "method",
        "url",
        "url",
        "data",
        "data",
        "headers",
        "mock",
        "url",
        "url",
        "headers",
        "mock",
        "url",
        "url",
        "headers",
        "mock",
        "url",
        "url",
        "headers",
        "mock",
        "url",
        "url",
        "mock",
        "url",
        "url",
        "data",
        "data",
        "headers",
        "mock",
        "url",
        "url",
        "data",
        "data",
        "headers",
        "mock",
        "url",
        "url",
        "data",
        "data",
        "headers",
        "mock",
        "mock",
        "func",
        "method",
        "url",
        "data",
        "headers",
        "status",
        "data",
        "headers",
        "responseText",
        "data",
        "headers",
        "responseText",
        "angular"
    ],
    "literals": [
        "\"angular-mocks/ngMock\"",
        "string",
        "\"angular-mocks/ngMockE2E\"",
        "string",
        "\"angular-mocks/ngAnimateMock\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "_",
        "_",
        "_",
        "inject"
    ],
    "comments": [
        "Type definitions for Angular JS 1.3 (ngMock, ngMockE2E module)",
        "Project: http://angularjs.org",
        "Definitions by: Diego Vilar <http://github.com/diegovilar>, Tony Curtis <http://github.com/daltin>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "<reference path=\"angular.d.ts\" />",
        "",
        "ngMock module (angular-mocks.js)",
        "",
        "",
        "AngularStatic",
        "We reopen it to add the MockStatic definition",
        "",
        "see https://docs.angularjs.org/api/ngMock/function/angular.mock.inject",
        "this overload is undocumented, but works",
        "see https://docs.angularjs.org/api/ngMock/function/angular.mock.dump",
        "see https://docs.angularjs.org/api/ngMock/function/angular.mock.module",
        "see https://docs.angularjs.org/api/ngMock/type/angular.mock.TzDate",
        "",
        "ExceptionHandlerService",
        "see https://docs.angularjs.org/api/ngMock/service/$exceptionHandler",
        "see https://docs.angularjs.org/api/ngMock/provider/$exceptionHandlerProvider",
        "",
        "",
        "TimeoutService",
        "see https://docs.angularjs.org/api/ngMock/service/$timeout",
        "Augments the original service",
        "",
        "",
        "IntervalService",
        "see https://docs.angularjs.org/api/ngMock/service/$interval",
        "Augments the original service",
        "",
        "",
        "LogService",
        "see https://docs.angularjs.org/api/ngMock/service/$log",
        "Augments the original service",
        "",
        "",
        "HttpBackendService",
        "see https://docs.angularjs.org/api/ngMock/service/$httpBackend",
        "",
        "returned interface by the the mocked HttpBackendService expect/when methods",
        "Available when ngMockE2E is loaded",
        "",
        "functions attached to global object (window)",
        "",
        "Use `angular.mock.module` instead of `module`, as `module` conflicts with commonjs.",
        "declare var module: (...modules: any[]) => any;"
    ],
    "docstrings": [
        "* Flushes all pending requests using the trained responses.\n          * @param count Number of responses to flush (in the order they arrived). If undefined, all pending requests will be flushed.",
        "* Resets all request expectations, but preserves all backend definitions.",
        "* Verifies that all of the requests defined via the expect api were made. If any of the requests were not made, verifyNoOutstandingExpectation throws an exception.",
        "* Verifies that there are no outstanding requests that need to be flushed.",
        "* Creates a new request expectation. \n          * Throws a preformatted error if expectation(s) don't match supplied string, regular expression, object, or if function returns false.\n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param method HTTP method.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param data HTTP request body string, json object, regular expression or function that receives the data and returns true if the data matches the current expectation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new request expectation for DELETE requests.\n          * Throws a preformatted error if expectation(s) don't match supplied string, regular expression, object, or if function returns false.\n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url is as expected.\n          * @param headers HTTP headers object to be compared with the HTTP headers in the request.",
        "* Creates a new request expectation for GET requests.\n          * Throws a preformatted error if expectation(s) don't match supplied string, regular expression, object, or if function returns false.\n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param headers HTTP headers object to be compared with the HTTP headers in the request.",
        "* Creates a new request expectation for HEAD requests.\n          * Throws a preformatted error if expectation(s) don't match supplied string, regular expression, object, or if function returns false.\n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param headers HTTP headers object to be compared with the HTTP headers in the request.",
        "* Creates a new request expectation for JSONP requests.\n          * Throws a preformatted error if expectation(s) don't match supplied string, regular expression, or if function returns false.\n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.",
        "* Creates a new request expectation for PATCH requests. \n          * Throws a preformatted error if expectation(s) don't match supplied string, regular expression, object, or if function returns false.\n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param data HTTP request body string, json object, regular expression or function that receives the data and returns true if the data matches the current expectation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new request expectation for POST requests. \n          * Throws a preformatted error if expectation(s) don't match supplied string, regular expression, object, or if function returns false.\n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param data HTTP request body string, json object, regular expression or function that receives the data and returns true if the data matches the current expectation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new request expectation for PUT requests. \n          * Throws a preformatted error if expectation(s) don't match supplied string, regular expression, object, or if function returns false.\n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param data HTTP request body string, json object, regular expression or function that receives the data and returns true if the data matches the current expectation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new backend definition. \n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param method HTTP method.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param data HTTP request body string, json object, regular expression or function that receives the data and returns true if the data matches the current expectation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new backend definition for DELETE requests. \n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new backend definition for GET requests. \n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new backend definition for HEAD requests. \n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new backend definition for JSONP requests. \n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new backend definition for PATCH requests. \n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param data HTTP request body string, json object, regular expression or function that receives the data and returns true if the data matches the current expectation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new backend definition for POST requests. \n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param data HTTP request body string, json object, regular expression or function that receives the data and returns true if the data matches the current expectation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Creates a new backend definition for PUT requests. \n          * Returns an object with respond method that controls how a matched request is handled.\n          * @param url HTTP url string, regular expression or function that receives a url and returns true if the url matches the current expctation.\n          * @param data HTTP request body string, json object, regular expression or function that receives the data and returns true if the data matches the current expectation.\n          * @param headers HTTP headers object or function that receives the headers and returns true if the headers match the current expectation.",
        "* Controls the response for a matched request using a function to construct the response. \n              * Returns the RequestHandler object for possible overrides.\n              * @param func Function that receives the request HTTP method, url, data, and headers and returns an array containing response status (number), data, headers, and status text.",
        "* Controls the response for a matched request using supplied static data to construct the response. \n              * Returns the RequestHandler object for possible overrides.\n              * @param status HTTP status code to add to the response.\n              * @param data Data to add to the response.\n              * @param headers Headers object to add to the response.\n              * @param responseText Response text to add to the response.",
        "* Controls the response for a matched request using the HTTP status code 200 and supplied static data to construct the response. \n              * Returns the RequestHandler object for possible overrides.\n              * @param data Data to add to the response.\n              * @param headers Headers object to add to the response.\n              * @param responseText Response text to add to the response.",
        "* Any request matching a backend definition or expectation with passThrough handler will be passed through to the real backend (an XHR request will be made to the server.)"
    ],
    "functions": [],
    "classes": []
}