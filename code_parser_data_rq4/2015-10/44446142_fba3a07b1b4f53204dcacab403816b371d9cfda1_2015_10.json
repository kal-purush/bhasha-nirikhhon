{
    "identifiers": [
        "data",
        "data",
        "data",
        "s",
        "s",
        "r",
        "r",
        "match",
        "match",
        "parseInt",
        "match",
        "parseInt",
        "match",
        "parseInt",
        "match",
        "SyntaxError",
        "data",
        "MultiRange",
        "data",
        "data",
        "data",
        "n",
        "n",
        "data",
        "value",
        "value",
        "value",
        "value",
        "value",
        "MultiRange",
        "value",
        "r",
        "r",
        "r",
        "value",
        "MultiRange",
        "value",
        "value",
        "min",
        "max",
        "min",
        "max",
        "newRange",
        "newRange",
        "newRange",
        "newRange",
        "newRange",
        "newRange",
        "overlap",
        "overlap",
        "overlap",
        "value",
        "value",
        "value",
        "value",
        "value",
        "MultiRange",
        "value",
        "r",
        "r",
        "r",
        "value",
        "MultiRange",
        "value",
        "min",
        "max",
        "min",
        "max",
        "newRange",
        "newRange",
        "newRange",
        "newRange",
        "newRange",
        "newRange",
        "overlap",
        "overlap",
        "newRange",
        "remain",
        "overlap",
        "newRange",
        "newRange",
        "overlap",
        "overlap",
        "remain",
        "newRange",
        "overlap",
        "overlap",
        "overlap",
        "overlap",
        "remain",
        "target",
        "lo",
        "lim",
        "lo",
        "lo",
        "union",
        "r",
        "target",
        "lo",
        "count",
        "lim",
        "tmp",
        "union",
        "lo",
        "count",
        "union",
        "tmp",
        "count",
        "r",
        "target",
        "target",
        "lim",
        "target",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "r",
        "r",
        "r",
        "value",
        "r",
        "value",
        "r",
        "value",
        "r",
        "value",
        "r",
        "r",
        "result",
        "r",
        "r",
        "result",
        "cmp",
        "cmp",
        "MultiRange",
        "cmp",
        "cmp",
        "cmp",
        "i",
        "i",
        "i",
        "cmp",
        "i",
        "i",
        "cmp",
        "i",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "n",
        "r",
        "n",
        "result",
        "idx",
        "n",
        "result"
    ],
    "literals": [
        "string",
        "'string'",
        "''",
        "','",
        "'undefined'",
        "'Invalid input'",
        "'undefined'",
        "'Invalid input'",
        "string",
        "'number'",
        "'string'",
        "'undefined'",
        "'Invalid input'",
        "string",
        "'number'",
        "'string'",
        "string",
        "'string'",
        "string",
        "''",
        "'-'",
        "','"
    ],
    "variables": [
        "s",
        "match",
        "newRange",
        "overlap",
        "newRange",
        "overlap",
        "remain",
        "lim",
        "lo",
        "r",
        "union",
        "count",
        "tmp",
        "result",
        "i",
        "result",
        "idx",
        "n"
    ],
    "comments": [
        "The given target touches or overlaps one or more of the existing ranges",
        "The given target does not touch nor overlap the existing ranges",
        "The given target does not touch nor overlap the existing ranges",
        "cannot make union"
    ],
    "docstrings": [
        "* Creates a new MultiRange object.",
        "* Appends range to this instance.",
        "* Appends a specified range of integers to this isntance.\n\t * @param min The minimum value of the range to append.\n\t * @param max The minimum value of the range to append.",
        "* Subtracts range from this instance.",
        "* Subtracts a specified range of integers from this instance.\n\t * @param min The minimum value of the range to subtract.\n\t * @param max The minimum value of the range to subtract.",
        "* Determines how the given range overlaps the existing ranges.\n\t * @param target The range array to test.\n\t * @return An object containing information about how the given range\n\t * overlaps this instance.",
        "* Calculates the union of two specified ranges.\n\t * @param a Range A\n\t * @param b Range B\n\t * @return Union of a and b. Null if a and b do not touch nor intersect.",
        "* Returns the range data.",
        "* Checks if the specified value is included in the current range.\n\t * @param value Value to be checked\n\t * @return True if the specified value is included in the range.",
        "* Checks if the current instance is continuous.\n\t * Note that this returns false if the current range is empty.\n\t * @return True if the current range is continuous.",
        "* Calculates how many numbers are effectively included in this instance.\n\t * (i.e. '1-10,51-60,90' returns 21)\n\t * @return The number of integer values in this instance.",
        "* Checks if two instances of MultiRange are identical.\n\t * @param cmp The data to compare.\n\t * @return True if cmp is exactly the same as this instance.",
        "* Returns the string respresentation of this MultiRange.",
        "* Builds an array of integer which holds all elements in this MultiRange.\n\t * Note that this may be slow and memory-consuming for large ranges such as '1-10000'."
    ],
    "functions": [
        "append",
        "appendRange",
        "subtract",
        "subtractRange",
        "findOverlap",
        "calcUnion",
        "getRanges",
        "has",
        "isContinuous",
        "length",
        "equals",
        "toString",
        "toArray"
    ],
    "classes": [
        "MultiRange"
    ]
}