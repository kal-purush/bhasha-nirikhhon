{
    "identifiers": [
        "unittest",
        "time",
        "networkx",
        "nx",
        "subprocess",
        "iomethods",
        "mccSearch",
        "utils",
        "variables",
        "userVariables",
        "nx",
        "DiGraph",
        "nx",
        "DiGraph",
        "subprocess",
        "call",
        "shell",
        "variables",
        "define_graph_variables",
        "os",
        "path",
        "exists",
        "userVariables",
        "DIRS",
        "userVariables",
        "DIRS",
        "raw_input",
        "os",
        "path",
        "exists",
        "userVariables",
        "DIRS",
        "userVariables",
        "DIRS",
        "raw_input",
        "os",
        "path",
        "exists",
        "userVariables",
        "DIRS",
        "userVariables",
        "DIRS",
        "raw_input",
        "utils",
        "valid_date",
        "userVariables",
        "startDateTime",
        "utils",
        "valid_date",
        "userVariables",
        "endDateTime",
        "iomethods",
        "check_for_files",
        "userVariables",
        "DIRS",
        "userVariables",
        "startDateTime",
        "userVariables",
        "endDateTime",
        "test",
        "iomethods",
        "check_for_files",
        "userVariables",
        "DIRS",
        "userVariables",
        "startDateTime",
        "userVariables",
        "endDateTime",
        "test",
        "userVariables",
        "DIRS",
        "iomethods",
        "create_main_directory",
        "userVariables",
        "DIRS",
        "userVariables",
        "DIRS",
        "userVariables",
        "DIRS",
        "open",
        "userVariables",
        "DIRS",
        "unittestFile",
        "write",
        "userVariables",
        "startDateTime",
        "userVariables",
        "endDateTime",
        "time",
        "time",
        "time",
        "time",
        "iomethods",
        "read_data",
        "userVariables",
        "DIRS",
        "userVariables",
        "filelist",
        "time",
        "time",
        "readMergEnd",
        "readMergStart",
        "unittestFile",
        "write",
        "readMergEnd",
        "readMergStart",
        "time",
        "time",
        "mccSearch",
        "find_cloud_elements",
        "mergImgs",
        "timeList",
        "userVariables",
        "DIRS",
        "LAT",
        "LON",
        "userVariables",
        "graphVariables",
        "time",
        "time",
        "findCEsEnd",
        "findCEsStart",
        "unittestFile",
        "write",
        "findCEsEnd",
        "findCEsStart",
        "time",
        "time",
        "mccSearch",
        "find_precip_rate",
        "userVariables",
        "DIRS",
        "timeList",
        "userVariables",
        "graphVariables",
        "time",
        "time",
        "findCEsEnd",
        "findCEsStart",
        "unittestFile",
        "write",
        "findCEsEnd",
        "findCEsStart",
        "CEGraph",
        "number_of_nodes",
        "findCETRMMEnd",
        "findCEsStart",
        "unittestFile",
        "write",
        "findCETRMMEnd",
        "findCEsStart",
        "time",
        "time",
        "mccSearch",
        "find_cloud_clusters",
        "CEGraph",
        "userVariables",
        "graphVariables",
        "prunedGraph",
        "number_of_nodes",
        "time",
        "time",
        "findCloudClustersEnd",
        "findCloudClustersStart",
        "unittestFile",
        "write",
        "findCloudClustersEnd",
        "findCloudClustersStart",
        "time",
        "time",
        "mccSearch",
        "find_MCC",
        "prunedGraph",
        "userVariables",
        "graphVariables",
        "len",
        "MCCList",
        "len",
        "MCSList",
        "time",
        "time",
        "findMCCEnd",
        "findMCCStart",
        "unittestFile",
        "write",
        "findMCCEnd",
        "findMCCStart",
        "time",
        "time",
        "endtime",
        "starttime",
        "unittestFile",
        "write",
        "endtime",
        "starttime",
        "unittestFile",
        "write",
        "unittestFile",
        "write",
        "CEGraph",
        "number_of_nodes",
        "unittestFile",
        "write",
        "CEGraph",
        "number_of_edges",
        "unittestFile",
        "write",
        "prunedGraph",
        "number_of_nodes",
        "unittestFile",
        "write",
        "prunedGraph",
        "number_of_edges",
        "unittestFile",
        "write",
        "len",
        "MCCList",
        "unittestFile",
        "write",
        "len",
        "MCSList",
        "unittestFile",
        "close"
    ],
    "literals": [
        "'export DISPLAY=:0.0'",
        "'CEoriDirName'",
        "\"Error! MERG invalid path!\"",
        "'CEoriDirName'",
        "\"> Please enter the directory to the MERG netCDF files: \\n\"",
        "\"...\"",
        "'TRMMdirName'",
        "\"Error: TRMM invalid path!\"",
        "'TRMMdirName'",
        "\"> Please enter the location to the raw TRMM netCDF files: \\n\"",
        "'CEoriDirName'",
        "\"Error! MERG invalid path!\"",
        "'CEoriDirName'",
        "\"> Please enter the directory to the MERG netCDF files: \\n\"",
        "\"...\"",
        "\"Invalid time entered for startDateTime!\"",
        "\"Invalid time entered for endDateTime!\"",
        "'TRMMdirName'",
        "'hour'",
        "\"Error with files in the TRMM directory entered. Please check your files before restarting. \"",
        "'CEoriDirName'",
        "'hour'",
        "\"Error with files in the original MERG directory entered. Please check your files before restarting. \"",
        "'mainDirStr'",
        "'mainDirStr'",
        "'mainDirStr'",
        "'/TRMMnetcdfCEs'",
        "'mainDirStr'",
        "'/MERGnetcdfCEs'",
        "'mainDirStr'",
        "'/unittestResults.txt'",
        "'wb'",
        "\"\\n Timing results for \"",
        "\" to \"",
        "\"\\n Start the timer \"",
        "\"\\n -------------- Read MERG Data ----------\"",
        "\"\\n Start the timer for the data ingest process\"",
        "'CEoriDirName'",
        "'ch4'",
        "'latitude'",
        "'longitude'",
        "\"\\n End the timer for the data ingest process\"",
        "\"\\n Total time to complete data ingest is %g seconds\"",
        "\"\\n 1. Total time to complete data ingest is %g seconds\"",
        "\"-\"",
        "\"\\n -------------- TESTING findCloudElements ----------\"",
        "\"\\n Start the timer for findCloudElements process\"",
        "'mainDirStr'",
        "\"\\n End the timer for findCloudElements process using MERG only\"",
        "\"\\n Total time to complete finding cloud elements in MERG only is %g seconds\"",
        "\"\\n Total time to complete finding cloud elements in MERG only is %g seconds\"",
        "\"\\n Start the timer for findCloudElements process using TRMM only\"",
        "'TRMMdirName'",
        "\"\\n End the timer for findCloudElements process using TRMM only\"",
        "\"\\n Total time to complete finding cloud elements in TRMM only is %g seconds\"",
        "\"\\n Total time to complete finding cloud elements in TRMM only is %g seconds\"",
        "\"\\n Number of cloud elements found is: \"",
        "\"\\n Total time to complete finding cloud elements is %g seconds\"",
        "\"\\n Total time to complete finding cloud elements is %g seconds\"",
        "\"-\"",
        "\"\\n -------------- TESTING findCloudClusters ----------\"",
        "\"\\n Start the timer for findCloudClusters process\"",
        "\"The number of nodes in the prunedGraph is: \"",
        "\"\\n End the timer for the findCloudClusters process\"",
        "\"\\n Total time to complete finding the cloud clusters is %g seconds\"",
        "\"\\n 3. Total time to complete finding the cloud clusters is %g seconds\"",
        "\"-\"",
        "\"\\n -------------- TESTING findMCCs ----------\"",
        "\"\\n Start the timer for the findMCCs process\"",
        "\"\\n MCC List has been acquired \"",
        "\"\\n MCS List has been acquired \"",
        "\"\\n End the timer for the findMCCs process\"",
        "\"\\n Total time to complete finding the MCCs is %g seconds\"",
        "\"\\n 4. Total time to complete finding the MCCs is %g seconds\"",
        "\"-\"",
        "\"*\"",
        "\"\\n The entire evaluation took %g seconds to complete\"",
        "\"\\n The entire evaluation took %g seconds to complete\"",
        "\"\\n ----------------------------------------------------------------\"",
        "\"\\n Number of cloud elements found is: %d\"",
        "\"\\n Number of edges (with the cloud elements) found is: %d\"",
        "\"\\n The number of nodes in the prunedGraph is: %d\"",
        "\"\\n The number of edges (with nodes) in the prunedGraph is: %d\"",
        "\"\\n MCC List has been acquired %d\"",
        "\"\\n MCS List has been acquired %d\""
    ],
    "variables": [
        "CEGraph",
        "prunedGraph",
        "MCCList",
        "MCSList",
        "MCSMCCNodesList",
        "allMCSsList",
        "allCETRMMList",
        "DIRS",
        "graphVariables",
        "test",
        "_",
        "test",
        "filelist",
        "TRMMCEdirName",
        "CEdirName",
        "unittestFile",
        "starttime",
        "readMergStart",
        "mergImgs",
        "timeList",
        "LAT",
        "LON",
        "readMergEnd",
        "findCEsStart",
        "CEGraph",
        "findCEsEnd",
        "findCETRMMStart",
        "allCETRMMList",
        "findCETRMMEnd",
        "findCloudClustersStart",
        "prunedGraph",
        "findCloudClustersEnd",
        "findMCCStart",
        "MCCList",
        "MCSList",
        "findMCCEnd",
        "endtime"
    ],
    "comments": [
        "for GrADs",
        "for first time working with the raw MERG zipped files",
        "rawMERG = \"/directory/to/the/raw/MERGfiles\"",
        "utils.preprocessing_merg(rawMERG)",
        "---------------------------------------------------------------------------------",
        "---------------------------------- user inputs --------------------------------------",
        "DIRS['mainDirStr'] = \"/Users/youssefbiaz/Documents/USC/,2015-3Fall'15/5CSCI401/grab-tag-graph/baselineTimings/output/baselineTimings\"#\"/directory/to/where/to/store/outputs\"",
        "DIRS['TRMMdirName'] = \"/Users/youssefbiaz/Documents/USC/,2015-3Fall'15/5CSCI401/grab-tag-graph/baselineTimings/datadir/TRMM\"#\"/directory/to/the/TRMM/netCDF/files\"",
        "DIRS['CEoriDirName'] = \"/Users/youssefbiaz/Documents/USC/,2015-3Fall'15/5CSCI401/grab-tag-graph/baselineTimings/datadir/MERG\"#\"/directory/to/the/MERG/netCDF/files\"",
        "get the dates for analysis",
        "startDateTime = \"200908310000\" #\"yyyymmddhrmm\"",
        "endDateTime = \"200908312100\"",
        "---------------------------------- end user inputs --------------------------------------",
        "Checks that inputs are ok",
        "check validity of time",
        "check if all the files exisits in the MERG and TRMM directories entered",
        "test,filelist = iomethods.check_for_files(startDateTime, endDateTime, DIRS['CEoriDirName'],1)",
        "end checks",
        "create main directory and file structure for storing intel",
        "let's go!",
        "time how long it takes to complete reading in the data",
        "print \"\\n Using both MERG and TRMM simultaneously \"",
        "CEGraph = mccSearch.find_cloud_elements(mergImgs,timeList,DIRS['mainDirStr'], LAT,LON,userVariables,graphVariables,DIRS['TRMMdirName'])",
        "findCEsEnd = time.time()",
        "print \"\\n Number of cloud elements found is: \", CEGraph.number_of_nodes()",
        "print \"\\n End the timer for findCloudElements process\"",
        "print \"\\n Total time to complete finding cloud elements is %g seconds\"%(findCEsEnd - findCEsStart)",
        "unittestFile.write(\"\\n 2. Total time to complete finding cloud elements is %g seconds\"%(findCEsEnd - findCEsStart))",
        "print (\"-\"*80)",
        "#********* OR *******",
        "#timing each separately",
        "end the timer",
        "TODO: report the domain"
    ],
    "docstrings": [
        "'''\n# running the program\n'''",
        "********* EITHER *********"
    ],
    "functions": [
        "runTiming"
    ],
    "classes": []
}