{
    "identifiers": [
        "google",
        "eventName",
        "handler",
        "args",
        "key",
        "target",
        "targetKey",
        "noNotify",
        "key",
        "key",
        "key",
        "key",
        "value",
        "values",
        "key",
        "MVCObject",
        "array",
        "callback",
        "elem",
        "index",
        "i",
        "i",
        "elem",
        "elem",
        "i",
        "i",
        "elem",
        "MVCObject",
        "mapDiv",
        "opts",
        "bounds",
        "x",
        "y",
        "latLng",
        "latLngBounds",
        "latlng",
        "heading",
        "mapTypeId",
        "options",
        "panorama",
        "tilt",
        "zoom",
        "MapTypeId",
        "MapTypeControlStyle",
        "ScaleControlStyle",
        "ZoomControlStyle",
        "ControlPosition",
        "NavigationControlStyle",
        "MVCObject",
        "options",
        "google",
        "feature",
        "google",
        "google",
        "google",
        "geoJson",
        "options",
        "google",
        "google",
        "feature",
        "google",
        "callback",
        "feature",
        "google",
        "id",
        "google",
        "google",
        "google",
        "url",
        "options",
        "google",
        "callback",
        "features",
        "google",
        "feature",
        "google",
        "style",
        "google",
        "feature",
        "google",
        "feature",
        "google",
        "style",
        "google",
        "google",
        "callback",
        "feature",
        "Data",
        "Data",
        "Data",
        "feature",
        "Data",
        "Data",
        "options",
        "Data",
        "callback",
        "value",
        "name",
        "Data",
        "name",
        "name",
        "newGeometry",
        "Data",
        "name",
        "newValue",
        "callback",
        "feature",
        "Data",
        "Data",
        "latLng",
        "Data",
        "elements",
        "n",
        "Data",
        "elements",
        "n",
        "Data",
        "elements",
        "Data",
        "Data",
        "n",
        "Data",
        "Data",
        "elements",
        "n",
        "Data",
        "elements",
        "n",
        "Data",
        "elements",
        "Data",
        "Data",
        "n",
        "Data",
        "Data",
        "elements",
        "Data",
        "Data",
        "n",
        "Data",
        "google",
        "Data",
        "Data",
        "Data",
        "Data",
        "Data",
        "Data",
        "Data",
        "Data",
        "MVCObject",
        "opts",
        "animation",
        "flag",
        "cursor",
        "flag",
        "flag",
        "icon",
        "icon",
        "options",
        "latlng",
        "shadow",
        "shadow",
        "shape",
        "title",
        "visible",
        "zIndex",
        "url",
        "size",
        "origin",
        "anchor",
        "scaledSize",
        "SymbolPath",
        "Animation",
        "MVCObject",
        "opts",
        "anchor",
        "anchor",
        "content",
        "content",
        "options",
        "position",
        "zIndex",
        "MVCObject",
        "opts",
        "draggable",
        "editable",
        "options",
        "path",
        "path",
        "visible",
        "MVCObject",
        "opts",
        "draggable",
        "editable",
        "options",
        "path",
        "path",
        "paths",
        "paths",
        "path",
        "path",
        "visible",
        "MVCObject",
        "opts",
        "bounds",
        "draggable",
        "editable",
        "options",
        "visible",
        "MVCObject",
        "opts",
        "center",
        "draggable",
        "editable",
        "options",
        "radius",
        "visible",
        "StrokePosition",
        "MVCObject",
        "url",
        "bounds",
        "opts",
        "opacity",
        "MVCObject",
        "MVCObject",
        "pixel",
        "nowrap",
        "pixel",
        "nowrap",
        "latLng",
        "latLng",
        "request",
        "callback",
        "results",
        "status",
        "GeocoderStatus",
        "GeocoderLocationType",
        "MVCObject",
        "opts",
        "directions",
        "options",
        "panel",
        "routeIndex",
        "request",
        "callback",
        "result",
        "status",
        "TravelMode",
        "UnitSystem",
        "DirectionsStatus",
        "request",
        "callback",
        "results",
        "status",
        "request",
        "callback",
        "results",
        "status",
        "ElevationStatus",
        "latlng",
        "callback",
        "result",
        "MaxZoomStatus",
        "request",
        "callback",
        "response",
        "status",
        "DistanceMatrixStatus",
        "DistanceMatrixElementStatus",
        "tileCoord",
        "zoom",
        "ownerDocument",
        "tile",
        "MVCObject",
        "id",
        "mapType",
        "latLng",
        "point",
        "pixel",
        "noWrap",
        "MVCObject",
        "opts",
        "opacity",
        "tileCoord",
        "zoom",
        "ownerDocument",
        "tile",
        "tileCoord",
        "zoom",
        "styles",
        "options",
        "MapTypeStyleElementType",
        "MVCObject",
        "MVCObject",
        "options",
        "options",
        "MVCObject",
        "url",
        "opts",
        "KmlLayerStatus",
        "MVCObject",
        "MVCObject",
        "container",
        "opts",
        "provider",
        "input",
        "pano",
        "latLng",
        "pov",
        "flag",
        "input",
        "pano",
        "callback",
        "streetViewPanoramaData",
        "streetViewStatus",
        "latlng",
        "radius",
        "callback",
        "streetViewPanoramaData",
        "streetViewStatus",
        "StreetViewStatus",
        "instance",
        "eventName",
        "handler",
        "args",
        "capture",
        "instance",
        "eventName",
        "handler",
        "capture",
        "instance",
        "eventName",
        "handler",
        "args",
        "capture",
        "instance",
        "eventName",
        "handler",
        "capture",
        "instance",
        "eventName",
        "handler",
        "args",
        "instance",
        "eventName",
        "handler",
        "instance",
        "eventName",
        "handler",
        "args",
        "instance",
        "eventName",
        "handler",
        "instance",
        "instance",
        "eventName",
        "listener",
        "instance",
        "eventName",
        "args",
        "lat",
        "lng",
        "noWrap",
        "other",
        "precision",
        "sw",
        "ne",
        "latLng",
        "other",
        "point",
        "other",
        "precision",
        "other",
        "x",
        "y",
        "other",
        "width",
        "height",
        "widthUnit",
        "heightUnit",
        "other",
        "geometry",
        "encodedPath",
        "path",
        "path",
        "radius",
        "to",
        "radius",
        "to",
        "path",
        "radius",
        "distance",
        "heading",
        "radius",
        "loop",
        "radius",
        "to",
        "fraction",
        "point",
        "polygon",
        "point",
        "poly",
        "tolerance",
        "adsense",
        "MVCObject",
        "container",
        "opts",
        "channelNumber",
        "format",
        "position",
        "AdFormat",
        "panoramio",
        "MVCObject",
        "opts",
        "options",
        "tag",
        "userId",
        "places",
        "MVCObject",
        "request",
        "callback",
        "result",
        "status",
        "request",
        "callback",
        "result",
        "status",
        "MVCObject",
        "inputField",
        "opts",
        "bounds",
        "restrictions",
        "types",
        "opts",
        "attrContainer",
        "attrContainer",
        "request",
        "callback",
        "result",
        "status",
        "request",
        "callback",
        "results",
        "status",
        "pagination",
        "request",
        "callback",
        "results",
        "status",
        "request",
        "callback",
        "results",
        "status",
        "PlacesServiceStatus",
        "RankBy",
        "MVCObject",
        "inputField",
        "opts",
        "bounds",
        "drawing",
        "MVCObject",
        "options",
        "drawingMode",
        "options",
        "OverlayType",
        "weather",
        "MVCObject",
        "MVCObject",
        "opts",
        "options",
        "TemperatureUnit",
        "WindSpeedUnit",
        "LabelColor",
        "visualization",
        "MVCObject",
        "opts",
        "data",
        "data",
        "data"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "Type definitions for Google Maps JavaScript API 3.19",
        "Project: https://developers.google.com/maps/",
        "Definitions by: Folia A/S <http://www.folia.dk>, Chris Wrench <https://github.com/cgwrench>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "The MIT License\n\nCopyright (c) 2012 Folia A/S. http://www.folia.dk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
        "Array<MVCArray.<Node >>",
        "MVCArray<MapType>",
        "TODO string|Icon|Symbol;",
        "TODO LatLngLiteral",
        "TODO LatLngLiteral",
        "TODO LatLngLiteral",
        "TODO LatLngLiteral",
        "TODO LatLngLiteral",
        "TODO LatLngLiteral",
        "TODO LatLngLiteral",
        "TODO LatLngLiteral",
        "TODO LatLngLiteral",
        "TODO LatLngLiteral",
        "Map or StreetViewPanorama",
        "Which animation to play when marker is added to a map.",
        "Mouse cursor to show on hover.",
        "Image map region definition used for drag/click.",
        "Rollover text.",
        "If true, the marker is visible.",
        "The URL of the image or sprite sheet.",
        "The symbol's stroke weight. Defaults to the scale of the symbol.v",
        "Built-in symbol paths.",
        "A backward-pointing closed arrow.",
        "A backward-pointing open arrow.",
        "A circle.",
        "A forward-pointing closed arrow.",
        "A forward-pointing open arrow.",
        "Closes this InfoWindow by removing it from the DOM structure.",
        "string or Element",
        "Comparison function.",
        "Returns the latitude in degrees.",
        "Returns the longitude in degrees.",
        "Converts to string representation.",
        "Returns a string of the form \"lat,lng\". We round the lat/lng values to 6 decimal places by default.",
        "A point on a two-dimensional plane.",
        "The X coordinate",
        "The Y coordinate",
        "Compares two Points",
        "Returns a string representation of this Point."
    ],
    "docstrings": [
        "*** MVC ****",
        "*** Map ****",
        "*** Controls ****",
        "*** Data ****",
        "*** Overlays ****",
        "* If true, the marker receives mouse and touch events.\n         * @default true",
        "* If true, the marker can be dragged.\n         * @default false",
        "* Icon for the foreground. \n         * If a string is provided, it is treated as though it were an Icon with the string as url.\n         * @type {(string|Icon|Symbol)}",
        "* Map on which to display Marker.\n         * @type {(Map|StreetViewPanorama)}",
        "* Optimization renders many markers as a single static element.\n         * Optimized rendering is enabled by default.\n         * Disable optimized rendering for animated GIFs or PNGs, or when each marker must be rendered \n         * as a separate DOM element (advanced usage only).",
        "* Marker position. Required.",
        "* All markers are displayed on the map in order of their zIndex, \n         * with higher values displaying in front of markers with lower values.\n         * By default, markers are displayed according to their vertical position on screen, \n         * with lower markers appearing in front of markers further up the screen.",
        "* The position at which to anchor an image in correspondence to the location of the marker on the map. \n         * By default, the anchor is located along the center point of the bottom of the image.",
        "* The position of the image within a sprite, if any.\n         * By default, the origin is located at the top left corner of the image (0, 0).",
        "* The size of the entire image after scaling, if any.\n         * Use this property to stretch/ shrink an image or a sprite.",
        "* The display size of the sprite or image.\n         * When using sprites, you must specify the sprite size.\n         * If the size is not provided, it will be set when the image loads.",
        "* The position of the symbol relative to the marker or polyline. \n         * The coordinates of the symbol's path are translated left and up by the anchor's x and y coordinates respectively. \n         * By default, a symbol is anchored at (0, 0). \n         * The position is expressed in the same coordinate system as the symbol's path.",
        "* The symbol's fill color. \n         * All CSS3 colors are supported except for extended named colors. For symbol markers, this defaults to 'black'. \n         * For symbols on polylines, this defaults to the stroke color of the corresponding polyline.",
        "* The symbol's fill opacity.\n         * @default 0",
        "* The symbol's path, which is a built-in symbol path, or a custom path expressed using SVG path notation. Required.\n         * @type {(SymbolPath|string)}",
        "* The angle by which to rotate the symbol, expressed clockwise in degrees. \n         * Defaults to 0. \n         * A symbol in an IconSequence where fixedRotation is false is rotated relative to the angle of the edge on which it lies.",
        "* The amount by which the symbol is scaled in size. \n         * For symbol markers, this defaults to 1; after scaling, the symbol may be of any size. \n         * For symbols on a polyline, this defaults to the stroke weight of the polyline; \n         * after scaling, the symbol must lie inside a square 22 pixels in size centered at the symbol's anchor.",
        "* The symbol's stroke color. All CSS3 colors are supported except for extended named colors. \n         * For symbol markers, this defaults to 'black'.\n         * For symbols on a polyline, this defaults to the stroke color of the polyline.",
        "* The symbol's stroke opacity. For symbol markers, this defaults to 1. \n         * For symbols on a polyline, this defaults to the stroke opacity of the polyline.",
        "* An overlay that looks like a bubble and is often connected to a marker.\n     * This class extends MVCObject.",
        "* Creates an info window with the given options.\n         * An InfoWindow can be placed on a map at a particular position or above a marker, \n         * depending on what is specified in the options.\n         * Unless auto-pan is disabled, an InfoWindow will pan the map to make itself visible when it is opened.\n         * After constructing an InfoWindow, you must call open to display it on the map.\n         * The user can click the close button on the InfoWindow to remove it from the map, or the developer can call close() for the same effect.",
        "* Opens this InfoWindow on the given map. Optionally, an InfoWindow can be associated with an anchor.\n         * In the core API, the only anchor is the Marker class.\n         * However, an anchor can be any MVCObject that exposes a LatLng position property and optionally \n         * a Point anchorPoint property for calculating the pixelOffset (see InfoWindowOptions).\n         * The anchorPoint is the offset from the anchor's position to the tip of the InfoWindow.",
        "* Content to display in the InfoWindow. This can be an HTML element, a plain-text string, or a string containing HTML.\n         * The InfoWindow will be sized according to the content.\n         * To set an explicit size for the content, set content to be a HTML element with that size.\n         * @type {(string|Node)}",
        "* Disable auto-pan on open. By default, the info window will pan the map so that it is fully visible when it opens.",
        "* Maximum width of the infowindow, regardless of content's width.\n         * This value is only considered if it is set before a call to open.\n         * To change the maximum width when changing content, call close, setOptions, and then open.",
        "* The offset, in pixels, of the tip of the info window from the point on the map \n         * at whose geographical coordinates the info window is anchored. \n         * If an InfoWindow is opened with an anchor, the pixelOffset will be calculated from the anchor's anchorPoint property.",
        "* The LatLng at which to display this InfoWindow. If the InfoWindow is opened with an anchor, the anchor's position will be used instead.",
        "* All InfoWindows are displayed on the map in order of their zIndex, \n         * with higher values displaying in front of InfoWindows with lower values. \n         * By default, InfoWindows are displayed according to their latitude, \n         * with InfoWindows of lower latitudes appearing in front of InfoWindows at higher latitudes.\n         * InfoWindows are always displayed in front of markers.",
        "*** Services ****",
        "*** Map Types ****",
        "*** Layers ****",
        "*** Street View ****",
        "*** Event ****",
        "**** Base ****",
        "* A LatLng is a point in geographical coordinates: latitude and longitude.\n     * \n     * * Latitude ranges between -90 and 90 degrees, inclusive.\n     *   Values above or below this range will be clamped to the range [-90, 90].\n     *   This means that if the value specified is less than -90, it will be set to -90.\n     *   And if the value is greater than 90, it will be set to 90.\n     * * Longitude ranges between -180 and 180 degrees, inclusive.\n     *   Values above or below this range will be wrapped so that they fall within the range.\n     *   For example, a value of -190 will be converted to 170. A value of 190 will be converted to -170.\n     *   This reflects the fact that longitudes wrap around the globe.\n     * \n     * Although the default map projection associates longitude with the x-coordinate of the map, and latitude with the y-coordinate, \n     * the latitude coordinate is always written first, followed by the longitude.\n     * Notice that you cannot modify the coordinates of a LatLng. If you want to compute another point, you have to create a new one.",
        "* Creates a LatLng object representing a geographic point.\n         * Note the ordering of latitude and longitude.\n         * @param lat Latitude is specified in degrees within the range [-90, 90].\n         * @param lng Longitude is specified in degrees within the range [-180, 180].\n         * @param noWrap Set noWrap to true to enable values outside of this range.",
        "*** Geometry Library ****",
        "*** AdSense Library ****",
        "*** Panoramio Library ****"
    ],
    "functions": [],
    "classes": [
        "MVCObject",
        "MVCArray",
        "Data",
        "Feature",
        "Geometry",
        "Point",
        "MultiPoint",
        "LineString",
        "MultiLineString",
        "LinearRing",
        "Polygon",
        "MultiPolygon",
        "GeometryCollection",
        "Marker",
        "MarkerImage",
        "InfoWindow",
        "Polyline",
        "Polygon",
        "Rectangle",
        "Circle",
        "GroundOverlay",
        "OverlayView",
        "MapCanvasProjection",
        "Geocoder",
        "DirectionsRenderer",
        "DirectionsService",
        "ElevationService",
        "MaxZoomService",
        "DistanceMatrixService",
        "MapTypeRegistry",
        "ImageMapType",
        "StyledMapType",
        "BicyclingLayer",
        "FusionTablesLayer",
        "KmlLayer",
        "TrafficLayer",
        "TransitLayer",
        "StreetViewPanorama",
        "StreetViewService",
        "LatLng",
        "LatLngBounds",
        "Point",
        "Size",
        "encoding",
        "spherical",
        "poly",
        "AdUnit",
        "PanoramioLayer",
        "AutocompleteService",
        "Autocomplete",
        "PlacesService",
        "SearchBox",
        "DrawingManager",
        "CloudLayer",
        "WeatherLayer",
        "HeatmapLayer",
        "MouseEvent",
        "MapsEventListener"
    ]
}