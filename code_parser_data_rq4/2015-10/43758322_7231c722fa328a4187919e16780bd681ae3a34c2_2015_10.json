{
    "identifiers": [
        "gameLogic",
        "board",
        "i",
        "i",
        "j",
        "board",
        "i",
        "j",
        "board",
        "i",
        "j",
        "boardString",
        "cell",
        "cell",
        "i",
        "i",
        "win_patterns",
        "i",
        "win_patterns",
        "i",
        "win_pattern",
        "win_pattern",
        "x_regexp",
        "boardString",
        "o_regexp",
        "boardString",
        "board",
        "turnIndexBeforeMove",
        "i",
        "i",
        "j",
        "j",
        "possibleMoves",
        "createMove",
        "board",
        "i",
        "j",
        "turnIndexBeforeMove",
        "e",
        "possibleMoves",
        "board",
        "row",
        "col",
        "turnIndexBeforeMove",
        "board",
        "board",
        "getInitialBoard",
        "board",
        "row",
        "col",
        "getWinner",
        "board",
        "isTie",
        "board",
        "angular",
        "board",
        "boardAfterMove",
        "row",
        "col",
        "turnIndexBeforeMove",
        "getWinner",
        "boardAfterMove",
        "winner",
        "isTie",
        "boardAfterMove",
        "firstOperation",
        "winner",
        "winner",
        "firstOperation",
        "turnIndexBeforeMove",
        "row",
        "col",
        "firstOperation",
        "boardAfterMove",
        "delta",
        "move",
        "deltaValue",
        "deltaValue",
        "stateBeforeMove",
        "createMove",
        "board",
        "row",
        "col",
        "turnIndexBeforeMove",
        "angular",
        "move",
        "expectedMove",
        "e"
    ],
    "literals": [
        "string",
        "'D'",
        "''",
        "''",
        "'D'",
        "''",
        "''",
        "'B'",
        "'D'",
        "''",
        "''",
        "string",
        "''",
        "''",
        "' '",
        "'XXX......'",
        "'...XXX...'",
        "'......XXX'",
        "'X..X..X..'",
        "'.X..X..X.'",
        "'..X..X..X'",
        "'X...X...X'",
        "'..X.X.X..'",
        "'O'",
        "'X'",
        "'O'",
        "''",
        "''",
        "\"One can only make a move in an empty position!\"",
        "''",
        "\"Can only make a move if the game is not over!\"",
        "'X'",
        "'O'",
        "''",
        "'X'",
        "'O'",
        "'board'",
        "'delta'"
    ],
    "variables": [
        "boardString",
        "i",
        "j",
        "cell",
        "win_patterns",
        "win_pattern",
        "x_regexp",
        "o_regexp",
        "possibleMoves",
        "i",
        "j",
        "boardAfterMove",
        "winner",
        "firstOperation",
        "delta",
        "move",
        "turnIndexBeforeMove",
        "stateBeforeMove",
        "deltaValue",
        "row",
        "col",
        "board",
        "expectedMove"
    ],
    "comments": [
        "Returns the initial Hare and Hounds board, which is a matrix containing ''.",
        "function isTie(board: Board): boolean {\n     for (var i = 0; i < 3; i++) {\n     for (var j = 0; j < 3; j++) {\n     if (board[i][j] === '') {\n     // If there is an empty cell then we do not have a tie.\n     return false;\n     }\n     }\n     }\n     // No empty cells, so we have a tie!\n     return true;\n     }",
        "The cell in that position was full.",
        "Initially (at the beginning of the match), the board in state is undefined.",
        "Game over.",
        "Game continues. Now it's the opponent's turn (the turn switches from 0 to 1 and 1 to 0).",
        "The state and turn after move are not needed in TicTacToe (or in any game where all state is public).",
        "var turnIndexAfterMove = params.turnIndexAfterMove;",
        "var stateAfterMove = params.stateAfterMove;",
        "We can assume that turnIndexBeforeMove and stateBeforeMove are legal, and we need",
        "to verify that move is legal.",
        "Example move:",
        "[{setTurn: {turnIndex : 1},",
        "{set: {key: 'board', value: [['X', '', ''], ['', '', ''], ['', '', '']]}},",
        "{set: {key: 'delta', value: {row: 0, col: 0}}}]",
        "if there are any exceptions then the move is illegal"
    ],
    "docstrings": [
        "*\n     *\n     *     There cannot be a tie in hare and hounds\n     *\n     *",
        "* Return the winner (either 'D' or 'B') or '' if there is no winner.\n     * The board is a matrix of size 3x3 containing either 'X', 'O', or ''.\n     * E.g., getWinner returns 'X' for the following board:\n     *     [['X', 'O', ''],\n     *      ['X', 'O', ''],\n     *      ['X', '', '']]",
        "* Returns all the possible moves for the given board and turnIndexBeforeMove.\n     * Returns an empty array if the game is over.",
        "* Returns the move that should be performed when player\n     * with index turnIndexBeforeMove makes a move in cell row X col."
    ],
    "functions": [
        "getInitialBoard",
        "getWinner",
        "getPossibleMoves",
        "createMove",
        "isMoveOk"
    ],
    "classes": []
}