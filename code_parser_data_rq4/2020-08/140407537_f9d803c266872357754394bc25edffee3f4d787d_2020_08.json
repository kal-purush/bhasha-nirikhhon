{
    "identifiers": [
        "tck",
        "java",
        "time",
        "zone",
        "org",
        "testng",
        "Assert",
        "assertEquals",
        "java",
        "io",
        "ByteArrayInputStream",
        "java",
        "io",
        "ByteArrayOutputStream",
        "java",
        "io",
        "ObjectInputStream",
        "java",
        "io",
        "ObjectOutputStream",
        "java",
        "time",
        "Duration",
        "java",
        "time",
        "Instant",
        "java",
        "time",
        "LocalDateTime",
        "java",
        "time",
        "LocalTime",
        "java",
        "time",
        "Month",
        "java",
        "time",
        "ZoneOffset",
        "java",
        "time",
        "zone",
        "ZoneOffsetTransition",
        "java",
        "time",
        "zone",
        "ZoneOffsetTransitionRule",
        "java",
        "time",
        "zone",
        "ZoneOffsetTransitionRule",
        "TimeDefinition",
        "java",
        "time",
        "zone",
        "ZoneRules",
        "org",
        "testng",
        "annotations",
        "DataProvider",
        "org",
        "testng",
        "annotations",
        "Test",
        "Test",
        "OFFSET_PONE",
        "ZoneOffset",
        "ofHours",
        "OFFSET_PTWO",
        "ZoneOffset",
        "ofHours",
        "OFFSET_M18",
        "ZoneOffset",
        "ofHours",
        "LDT",
        "LocalDateTime",
        "of",
        "INSTANT",
        "LDT",
        "toInstant",
        "OFFSET_PONE",
        "offset",
        "offset",
        "getRules",
        "DataProvider",
        "name",
        "make",
        "OFFSET_PONE",
        "OFFSET_PONE",
        "make",
        "OFFSET_PTWO",
        "OFFSET_PTWO",
        "make",
        "OFFSET_M18",
        "OFFSET_M18",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "getOffset",
        "INSTANT",
        "expectedOffset",
        "assertEquals",
        "test",
        "getOffset",
        "expectedOffset",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "getOffset",
        "LDT",
        "expectedOffset",
        "assertEquals",
        "test",
        "getOffset",
        "expectedOffset",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "getValidOffsets",
        "LDT",
        "size",
        "assertEquals",
        "test",
        "getValidOffsets",
        "LDT",
        "get",
        "expectedOffset",
        "assertEquals",
        "test",
        "getValidOffsets",
        "size",
        "assertEquals",
        "test",
        "getValidOffsets",
        "get",
        "expectedOffset",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "getTransition",
        "LDT",
        "assertEquals",
        "test",
        "getTransition",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "isValidOffset",
        "LDT",
        "expectedOffset",
        "assertEquals",
        "test",
        "isValidOffset",
        "LDT",
        "ZoneOffset",
        "UTC",
        "assertEquals",
        "test",
        "isValidOffset",
        "LDT",
        "assertEquals",
        "test",
        "isValidOffset",
        "expectedOffset",
        "assertEquals",
        "test",
        "isValidOffset",
        "ZoneOffset",
        "UTC",
        "assertEquals",
        "test",
        "isValidOffset",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "getStandardOffset",
        "INSTANT",
        "expectedOffset",
        "assertEquals",
        "test",
        "getStandardOffset",
        "expectedOffset",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "getDaylightSavings",
        "INSTANT",
        "Duration",
        "ZERO",
        "assertEquals",
        "test",
        "getDaylightSavings",
        "Duration",
        "ZERO",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "isDaylightSavings",
        "INSTANT",
        "assertEquals",
        "test",
        "isDaylightSavings",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "nextTransition",
        "INSTANT",
        "assertEquals",
        "test",
        "nextTransition",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "previousTransition",
        "INSTANT",
        "assertEquals",
        "test",
        "previousTransition",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "getTransitions",
        "size",
        "Test",
        "expectedExceptions",
        "test",
        "make",
        "OFFSET_PTWO",
        "test",
        "getTransitions",
        "add",
        "ZoneOffsetTransition",
        "of",
        "LDT",
        "OFFSET_PONE",
        "OFFSET_PTWO",
        "Test",
        "dataProvider",
        "test",
        "expectedOffset",
        "assertEquals",
        "test",
        "getTransitionRules",
        "size",
        "Test",
        "expectedExceptions",
        "test",
        "make",
        "OFFSET_PTWO",
        "test",
        "getTransitionRules",
        "add",
        "ZoneOffsetTransitionRule",
        "of",
        "Month",
        "JULY",
        "LocalTime",
        "of",
        "TimeDefinition",
        "STANDARD",
        "OFFSET_PONE",
        "OFFSET_PTWO",
        "OFFSET_PONE",
        "Test",
        "a",
        "make",
        "OFFSET_PONE",
        "b",
        "make",
        "OFFSET_PTWO",
        "assertEquals",
        "a",
        "equals",
        "a",
        "assertEquals",
        "a",
        "equals",
        "b",
        "assertEquals",
        "b",
        "equals",
        "a",
        "assertEquals",
        "b",
        "equals",
        "b",
        "assertEquals",
        "a",
        "equals",
        "assertEquals",
        "a",
        "equals",
        "assertEquals",
        "a",
        "hashCode",
        "a",
        "hashCode",
        "assertEquals",
        "b",
        "hashCode",
        "b",
        "hashCode"
    ],
    "literals": [
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"rules\"",
        "\"Rubbish\""
    ],
    "variables": [],
    "comments": [
        "-----------------------------------------------------------------------",
        "Basics",
        "-----------------------------------------------------------------------",
        "-------------------------------------------------------------------------",
        "-------------------------------------------------------------------------",
        "-----------------------------------------------------------------------",
        "equals() / hashCode()",
        "-----------------------------------------------------------------------"
    ],
    "docstrings": [
        "* Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.",
        "* This file is available under and governed by the GNU General Public\n * License version 2 only, as published by the Free Software Foundation.\n * However, the following notice accompanied the original version of this\n * file:\n *\n * Copyright (c) 2010-2012, Stephen Colebourne & Michael Nascimento Santos\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *  * Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n *  * Neither the name of JSR-310 nor the names of its contributors\n *    may be used to endorse or promote products derived from this software\n *    without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "* Test ZoneRules for fixed offset time-zones."
    ],
    "functions": [
        "ZoneRules",
        "make",
        "data_rules",
        "test_getOffset_Instant",
        "test_getOffset_LocalDateTime",
        "test_getValidOffsets_LDT",
        "test_getTransition_LDT",
        "test_isValidOffset_LDT_ZO",
        "test_getStandardOffset_Instant",
        "test_getDaylightSavings_Instant",
        "test_isDaylightSavings_Instant",
        "test_nextTransition_Instant",
        "test_previousTransition_Instant",
        "test_getTransitions",
        "test_getTransitions_immutable",
        "test_getTransitionRules",
        "test_getTransitionRules_immutable",
        "test_equalsHashCode"
    ],
    "classes": [
        "TCKFixedZoneRules"
    ]
}