{
    "identifiers": [
        "Net",
        "Threading",
        "Threading",
        "Tasks",
        "AutoFixture",
        "NUnit3",
        "FluentAssertions",
        "MediatR",
        "Microsoft",
        "AspNetCore",
        "Mvc",
        "Moq",
        "NUnit",
        "Framework",
        "SFA",
        "DAS",
        "EmployerIncentives",
        "Api",
        "Controllers",
        "SFA",
        "DAS",
        "EmployerIncentives",
        "Api",
        "Models",
        "SFA",
        "DAS",
        "EmployerIncentives",
        "Application",
        "Queries",
        "GetApplication",
        "SFA",
        "DAS",
        "Testing",
        "AutoFixture",
        "SFA",
        "DAS",
        "EmployerIncentives",
        "Api",
        "UnitTests",
        "Controllers",
        "EligibleApprenticeshipSearch",
        "Test",
        "MoqAutoData",
        "accountId",
        "Guid",
        "applicationId",
        "GetApplicationResult",
        "mediatorResult",
        "Frozen",
        "Mock",
        "IMediator",
        "mockMediator",
        "Greedy",
        "ApplicationController",
        "controller",
        "mockMediator",
        "Setup",
        "mediator",
        "Send",
        "It",
        "Is",
        "GetApplicationQuery",
        "c",
        "AccountId",
        "Equals",
        "accountId",
        "c",
        "ApplicationId",
        "Equals",
        "applicationId",
        "It",
        "IsAny",
        "CancellationToken",
        "ReturnsAsync",
        "mediatorResult",
        "controller",
        "GetApplication",
        "accountId",
        "applicationId",
        "ObjectResult",
        "Assert",
        "IsNotNull",
        "controllerResult",
        "controllerResult",
        "StatusCode",
        "Should",
        "Be",
        "HttpStatusCode",
        "OK",
        "controllerResult",
        "Value",
        "ApplicationResponse",
        "Assert",
        "IsNotNull",
        "model",
        "model",
        "Application",
        "Should",
        "BeEquivalentTo",
        "mediatorResult",
        "Application"
    ],
    "literals": [],
    "variables": [
        "controllerResult",
        "model"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [
        "Then_Gets_Application_From_Mediator"
    ],
    "classes": [
        "WhenGettingAnApplication"
    ]
}