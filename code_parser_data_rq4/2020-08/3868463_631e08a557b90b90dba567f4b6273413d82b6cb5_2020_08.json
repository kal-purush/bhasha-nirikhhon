{
    "identifiers": [
        "re",
        "punctuation",
        "whitespace",
        "colorama",
        "os_compat",
        "on_windows",
        "on_windows",
        "colorama",
        "init",
        "colorama",
        "Fore",
        "YELLOW",
        "colorama",
        "Fore",
        "RED",
        "colorama",
        "Fore",
        "RESET",
        "color",
        "bold",
        "getattr",
        "colorama",
        "Fore",
        "color",
        "upper",
        "color_escape",
        "bold",
        "color_escape",
        "colorama",
        "Fore",
        "RESET",
        "colorama",
        "Style",
        "BRIGHT",
        "color_escape",
        "colorama",
        "Style",
        "RESET_ALL",
        "entry",
        "text",
        "color",
        "is_title",
        "fragments",
        "part",
        "fragments",
        "part",
        "part",
        "config",
        "colorize",
        "part",
        "color",
        "bold",
        "is_title",
        "part",
        "part",
        "colorize",
        "part",
        "config",
        "bold",
        "part",
        "entry",
        "journal",
        "config",
        "config",
        "re",
        "split",
        "entry",
        "tag_regex",
        "config",
        "text",
        "colorized_piece",
        "piece",
        "colorized_text_generator",
        "text_fragments",
        "all",
        "punctuation",
        "whitespace",
        "piece",
        "previous_piece",
        "endswith",
        "previous_piece",
        "previous_piece",
        "config",
        "piece",
        "config",
        "final_text",
        "colorized_piece",
        "final_text",
        "colorized_piece",
        "piece",
        "final_text",
        "lstrip",
        "text"
    ],
    "literals": [
        "\"tagsymbols\"",
        "\"colors\"",
        "\"tags\"",
        "\"highlight\"",
        "\"tagsymbols\"",
        "\"\"",
        "\"\"",
        "\"\\n\"",
        "\"tagsymbols\"",
        "\"tagsymbols\"",
        "\" \""
    ],
    "variables": [
        "WARNING_COLOR",
        "ERROR_COLOR",
        "RESET_COLOR",
        "color_escape",
        "config",
        "text_fragments",
        "final_text",
        "previous_piece",
        "previous_piece"
    ],
    "comments": [
        "!/usr/bin/env python",
        "highlight tags",
        "Colorizing tags inside of other blocks of text",
        "If this piece is entirely punctuation or whitespace or the start",
        "of a line or the previous piece was a tag or this piece is a tag,",
        "then add it to the final text without a leading space.",
        "Otherwise add a leading space and then append the piece."
    ],
    "docstrings": [
        "\"\"\"Returns the string colored with colorama.Fore.color. If the color set by\n    the user is \"NONE\" or the color doesn't exist in the colorama.Fore attributes,\n    it returns the string without any modification.\"\"\"",
        "\"\"\"\n    Takes a string and colorizes the tags in it based upon the config value for\n    color.tags, while colorizing the rest of the text based on `color`.\n    :param entry: Entry object, for access to journal config\n    :param text: Text to be colorized\n    :param color: Color for non-tag text, passed to colorize()\n    :param is_title: Boolean flag indicating if the text is a title or not\n    :return: Colorized str\n    \"\"\"",
        "\"\"\"Efficiently generate colorized tags / text from text fragments.\n        Taken from @shobrook. Thanks, buddy :)\n        :param fragments: List of strings representing parts of entry (tag or word).\n        :rtype: List of tuples\n        :returns [(colorized_str, original_str)]\"\"\""
    ],
    "functions": [
        "colorize",
        "highlight_tags_with_background_color",
        "colorized_text_generator"
    ],
    "classes": []
}