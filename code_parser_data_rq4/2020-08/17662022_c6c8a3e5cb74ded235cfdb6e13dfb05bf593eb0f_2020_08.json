{
    "identifiers": [
        "bisq",
        "core",
        "trade",
        "autoconf",
        "xmr",
        "bisq",
        "asset",
        "CryptoNoteUtils",
        "bisq",
        "common",
        "app",
        "DevEnv",
        "com",
        "google",
        "gson",
        "Gson",
        "com",
        "google",
        "gson",
        "JsonArray",
        "com",
        "google",
        "gson",
        "JsonElement",
        "com",
        "google",
        "gson",
        "JsonObject",
        "com",
        "google",
        "gson",
        "JsonParseException",
        "java",
        "util",
        "concurrent",
        "TimeUnit",
        "lombok",
        "slf4j",
        "Slf4j",
        "Slf4j",
        "xmrProofInfo",
        "jsonTxt",
        "txHash",
        "xmrProofInfo",
        "getTxHash",
        "json",
        "fromJson",
        "jsonTxt",
        "json",
        "XmrAutoConfirmResult",
        "State",
        "API_INVALID",
        "json",
        "get",
        "json",
        "get",
        "isJsonObject",
        "json",
        "get",
        "XmrAutoConfirmResult",
        "State",
        "API_INVALID",
        "jsonData",
        "json",
        "get",
        "getAsJsonObject",
        "jsonStatus",
        "json",
        "get",
        "getAsString",
        "jsonStatus",
        "matches",
        "XmrAutoConfirmResult",
        "State",
        "TX_NOT_FOUND",
        "jsonStatus",
        "matches",
        "XmrAutoConfirmResult",
        "State",
        "API_FAILURE",
        "jsonAddress",
        "jsonData",
        "get",
        "jsonAddress",
        "XmrAutoConfirmResult",
        "State",
        "API_INVALID",
        "expectedAddressHex",
        "CryptoNoteUtils",
        "convertToRawHex",
        "xmrProofInfo",
        "getRecipientAddress",
        "jsonAddress",
        "getAsString",
        "equalsIgnoreCase",
        "expectedAddressHex",
        "log",
        "warn",
        "jsonAddress",
        "getAsString",
        "expectedAddressHex",
        "XmrAutoConfirmResult",
        "State",
        "ADDRESS_INVALID",
        "jsonTxHash",
        "jsonData",
        "get",
        "jsonTxHash",
        "XmrAutoConfirmResult",
        "State",
        "API_INVALID",
        "jsonTxHash",
        "getAsString",
        "equalsIgnoreCase",
        "txHash",
        "log",
        "warn",
        "jsonTxHash",
        "getAsString",
        "txHash",
        "XmrAutoConfirmResult",
        "State",
        "TX_HASH_INVALID",
        "jsonViewkey",
        "jsonData",
        "get",
        "jsonViewkey",
        "XmrAutoConfirmResult",
        "State",
        "API_INVALID",
        "jsonViewkey",
        "getAsString",
        "equalsIgnoreCase",
        "xmrProofInfo",
        "getTxKey",
        "log",
        "warn",
        "jsonViewkey",
        "getAsString",
        "xmrProofInfo",
        "getTxKey",
        "XmrAutoConfirmResult",
        "State",
        "TX_KEY_INVALID",
        "jsonTimestamp",
        "jsonData",
        "get",
        "jsonTimestamp",
        "XmrAutoConfirmResult",
        "State",
        "API_INVALID",
        "tradeDateSeconds",
        "xmrProofInfo",
        "getTradeDate",
        "getTime",
        "difference",
        "tradeDateSeconds",
        "jsonTimestamp",
        "getAsLong",
        "difference",
        "TimeUnit",
        "HOURS",
        "toSeconds",
        "DevEnv",
        "isDevMode",
        "log",
        "warn",
        "jsonTimestamp",
        "getAsLong",
        "tradeDateSeconds",
        "difference",
        "XmrAutoConfirmResult",
        "State",
        "TRADE_DATE_NOT_MATCHING",
        "confirmations",
        "jsonConfirmations",
        "jsonData",
        "get",
        "jsonConfirmations",
        "XmrAutoConfirmResult",
        "State",
        "API_INVALID",
        "confirmations",
        "jsonConfirmations",
        "getAsInt",
        "log",
        "info",
        "confirmations",
        "txHash",
        "jsonOutputs",
        "jsonData",
        "get",
        "getAsJsonArray",
        "anyMatchFound",
        "i",
        "i",
        "jsonOutputs",
        "size",
        "i",
        "jsonOutputs",
        "get",
        "i",
        "getAsJsonObject",
        "get",
        "getAsBoolean",
        "anyMatchFound",
        "jsonAmount",
        "get",
        "getAsLong",
        "jsonAmount",
        "xmrProofInfo",
        "getAmount",
        "DevEnv",
        "isDevMode",
        "confirmsRequired",
        "xmrProofInfo",
        "getConfirmsRequired",
        "confirmations",
        "confirmsRequired",
        "XmrAutoConfirmResult",
        "State",
        "TX_NOT_CONFIRMED",
        "confirmations",
        "confirmsRequired",
        "XmrAutoConfirmResult",
        "State",
        "PROOF_OK",
        "confirmations",
        "confirmsRequired",
        "anyMatchFound",
        "DevEnv",
        "isDevMode",
        "XmrAutoConfirmResult",
        "State",
        "NO_MATCH_FOUND",
        "XmrAutoConfirmResult",
        "State",
        "AMOUNT_NOT_MATCHING",
        "e",
        "XmrAutoConfirmResult",
        "State",
        "API_INVALID",
        "e",
        "toString"
    ],
    "literals": [
        "\"Empty json\"",
        "\"data\"",
        "\"data\"",
        "\"status\"",
        "\"Missing data / status fields\"",
        "\"data\"",
        "\"status\"",
        "\"fail\"",
        "\"success\"",
        "\"Unhandled status value\"",
        "\"address\"",
        "\"Missing address field\"",
        "\"address {}, expected: {}\"",
        "\"tx_hash\"",
        "\"Missing tx_hash field\"",
        "\"txHash {}, expected: {}\"",
        "\"viewkey\"",
        "\"Missing viewkey field\"",
        "\"viewkey {}, expected: {}\"",
        "\"tx_timestamp\"",
        "\"Missing tx_timestamp field\"",
        "\"tx_timestamp {}, tradeDate: {}, difference {}\"",
        "\"tx_confirmations\"",
        "\"Missing tx_confirmations field\"",
        "\"Confirmations: {}, xmr txHash: {}\"",
        "\"outputs\"",
        "\"match\"",
        "\"amount\""
    ],
    "variables": [
        "confirmations"
    ],
    "comments": [
        "there should always be \"data\" and \"status\" at the top level",
        "the API returns \"fail\" until the transaction has successfully reached the mempool.",
        "we return TX_NOT_FOUND which will cause a retry later",
        "validate that the address matches",
        "validate that the txHash matches",
        "validate that the txKey matches",
        "validate that the txDate matches within tolerance",
        "(except that in dev mode we let this check pass anyway)",
        "Accept up to 2 hours difference. Some tolerance is needed if users clock is out of sync",
        "calculate how many confirms are still needed",
        "iterate through the list of outputs, one of them has to match the amount we are trying to verify.",
        "check that the \"match\" field is true as well as validating the amount value",
        "(except that in dev mode we allow any amount as valid)",
        "any amount ok in dev mode",
        "we return TX_NOT_CONFIRMED which will cause a retry later",
        "None of the outputs had a match entry",
        "reaching this point means there was no matching amount"
    ],
    "docstrings": [
        "* This file is part of Bisq.\n *\n * Bisq is free software: you can redistribute it and/or modify it\n * under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or (at\n * your option) any later version.\n *\n * Bisq is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Bisq. If not, see <http://www.gnu.org/licenses/>."
    ],
    "functions": [
        "XmrAutoConfirmResult",
        "parse"
    ],
    "classes": [
        "XmrProofParser"
    ]
}