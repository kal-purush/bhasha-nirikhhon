{
    "identifiers": [
        "asyncio",
        "json",
        "logging",
        "os",
        "ssl",
        "uuid",
        "UUID",
        "hashlib",
        "md5",
        "os",
        "path",
        "environ",
        "threading",
        "Event",
        "zipfile",
        "ZipFile",
        "getpass",
        "sys",
        "paho",
        "mqtt",
        "client",
        "mqtt",
        "meross_iot",
        "http_api",
        "MerossHttpClient",
        "meross_iot",
        "manager",
        "MerossManager",
        "meross_iot",
        "model",
        "enums",
        "Namespace",
        "meross_iot",
        "utilities",
        "mqtt",
        "build_device_request_topic",
        "build_client_response_topic",
        "build_client_user_topic",
        "logging",
        "Formatter",
        "logging",
        "getLogger",
        "getChild",
        "l",
        "setLevel",
        "logging",
        "DEBUG",
        "logging",
        "FileHandler",
        "mode",
        "filename",
        "SNIFF_LOG_FILE",
        "lhandler",
        "setFormatter",
        "formatter",
        "l",
        "addHandler",
        "lhandler",
        "logging",
        "Formatter",
        "logging",
        "getLogger",
        "r",
        "setLevel",
        "logging",
        "DEBUG",
        "logging",
        "FileHandler",
        "mode",
        "filename",
        "ROOT_LOG_FILE",
        "rhandler",
        "setFormatter",
        "formatter",
        "r",
        "addHandler",
        "rhandler",
        "r",
        "setLevel",
        "logging",
        "DEBUG",
        "user_id",
        "hashed_password",
        "target_device_uuid",
        "ca_cert",
        "domain",
        "port",
        "Event",
        "Event",
        "user_id",
        "domain",
        "port",
        "target_device_uuid",
        "md5",
        "UUID",
        "uuid4",
        "md5_hash",
        "update",
        "rnd_uuid",
        "encode",
        "md5_hash",
        "hexdigest",
        "mqtt",
        "Client",
        "client_id",
        "_client_id",
        "protocol",
        "mqtt",
        "MQTTv311",
        "_mqtt_client",
        "_on_connect",
        "_mqtt_client",
        "_on_message",
        "_mqtt_client",
        "_on_disconnect",
        "_mqtt_client",
        "_on_subscribe",
        "user_id",
        "_mqtt_client",
        "username_pw_set",
        "username",
        "user_id",
        "password",
        "hashed_password",
        "_mqtt_client",
        "tls_set",
        "ca_certs",
        "ca_cert",
        "certfile",
        "keyfile",
        "cert_reqs",
        "ssl",
        "CERT_REQUIRED",
        "tls_version",
        "ssl",
        "PROTOCOL_TLS",
        "ciphers",
        "client",
        "userdata",
        "rc",
        "other",
        "l",
        "debug",
        "connect_event",
        "l",
        "debug",
        "_mqtt_client",
        "connect",
        "domain",
        "port",
        "keepalive",
        "l",
        "debug",
        "_mqtt_client",
        "loop_stop",
        "_mqtt_client",
        "loop_start",
        "connect_event",
        "wait",
        "build_device_request_topic",
        "target_device_uuid",
        "build_client_response_topic",
        "user_id",
        "_app_id",
        "build_client_user_topic",
        "user_id",
        "l",
        "info",
        "device_topic",
        "_mqtt_client",
        "subscribe",
        "device_topic",
        "subscribe_event",
        "wait",
        "subscribe_event",
        "clear",
        "l",
        "info",
        "client_response_topic",
        "_mqtt_client",
        "subscribe",
        "client_response_topic",
        "subscribe_event",
        "wait",
        "subscribe_event",
        "clear",
        "l",
        "info",
        "_mqtt_client",
        "subscribe",
        "user_topic",
        "subscribe_event",
        "wait",
        "subscribe_event",
        "clear",
        "_mqtt_client",
        "disconnect",
        "client",
        "userdata",
        "mid",
        "granted_qos",
        "l",
        "debug",
        "subscribe_event",
        "client",
        "userdata",
        "msg",
        "json",
        "loads",
        "msg",
        "payload",
        "message",
        "msg",
        "topic",
        "user_topic",
        "msg",
        "topic",
        "client_response_topic",
        "msg",
        "topic",
        "device_topic",
        "l",
        "info",
        "topic_str",
        "msg",
        "topic",
        "message",
        "client",
        "userdata",
        "rc",
        "l",
        "debug",
        "environ",
        "get",
        "email",
        "input",
        "email",
        "strip",
        "environ",
        "get",
        "password",
        "getpass",
        "getpass",
        "prompt",
        "stream",
        "sys",
        "stdout",
        "strip",
        "MerossHttpClient",
        "async_from_user_password",
        "email",
        "password",
        "http",
        "async_list_devices",
        "exit",
        "i",
        "d",
        "devices",
        "i",
        "d",
        "dev_name",
        "d",
        "device_type",
        "d",
        "online_status",
        "name",
        "input",
        "selection",
        "strip",
        "devices",
        "selection",
        "selected_device",
        "selected_device",
        "dev_name",
        "http",
        "cloud_credentials",
        "md5",
        "creds",
        "user_id",
        "creds",
        "key",
        "md5_hash",
        "update",
        "clearpwd",
        "encode",
        "md5_hash",
        "hexdigest",
        "DeviceSniffer",
        "creds",
        "user_id",
        "hashed_password",
        "selected_device",
        "uuid",
        "ca_cert",
        "domain",
        "selected_device",
        "domain",
        "sniffer",
        "start",
        "input",
        "sniffer",
        "stop",
        "l",
        "info",
        "MerossManager",
        "http_client",
        "http",
        "manager",
        "async_init",
        "manager",
        "async_execute_cmd",
        "destination_device_uuid",
        "selected_device",
        "uuid",
        "method",
        "Namespace",
        "SYSTEM_ALL",
        "payload",
        "manager",
        "async_execute_cmd",
        "destination_device_uuid",
        "selected_device",
        "uuid",
        "method",
        "Namespace",
        "SYSTEM_ABILITY",
        "payload",
        "l",
        "info",
        "selected_device",
        "dev_name",
        "selected_device",
        "uuid",
        "response_all",
        "l",
        "info",
        "selected_device",
        "dev_name",
        "selected_device",
        "uuid",
        "response_abilities",
        "l",
        "exception",
        "selected_device",
        "uuid",
        "manager",
        "manager",
        "close",
        "http",
        "async_logout",
        "ZipFile",
        "zipObj",
        "write",
        "SNIFF_LOG_FILE",
        "zipObj",
        "write",
        "ROOT_LOG_FILE",
        "zipObj",
        "close",
        "format",
        "path",
        "path",
        "abspath",
        "zipObj",
        "filename",
        "os",
        "name",
        "asyncio",
        "set_event_loop_policy",
        "asyncio",
        "WindowsSelectorEventLoopPolicy",
        "asyncio",
        "get_event_loop",
        "loop",
        "run_until_complete",
        "main",
        "loop",
        "close"
    ],
    "literals": [
        "'sniff.log'",
        "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'",
        "\"Sniffer\"",
        "'w'",
        "'root.log'",
        "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'",
        "'w'",
        "\"iot.meross.com\"",
        "\"%s%s\"",
        "\"API\"",
        "\"utf8\"",
        "\"sniffer\"",
        "'app:sniffer-%s'",
        "\"Connected to MQTT Broker\"",
        "\"Initializing the MQTT connection...\"",
        "\"(Re)Starting the MQTT loop.\"",
        "f\"Subscribing to topic: {self.device_topic}\"",
        "f\"Subscribing to topic: {self.client_response_topic}\"",
        "\"Subscribing to topic: {self.user_topic}\"",
        "\"Subscribed correctly\"",
        "\"utf8\"",
        "'header'",
        "\"Unknown\"",
        "\"USER-TOPIC\"",
        "\"CLIENT-RESPONSE-TOPIC\"",
        "\"DEVICE-TOPIC\"",
        "\"%s (%s) <- %s\"",
        "\"Disconnected from MQTT brocker\"",
        "\"Welcome to the Sniffer utility. This python script will gather some useful information about your \"",
        "\"Meross devices. All the collected information will be zipped into a zip archive. \"",
        "\"You could share such zip file with the developers to help them add support for your device. \"",
        "\"Although this utility won't collect your email/password, we recommend you to change \"",
        "\"your Meross account password to a temporary one before using this software. Once you are done, \"",
        "\"you can restore back your original password. By doing so, you are 100% sure you are not leaking any \"",
        "\"real password to the developers.\"",
        "\"MEROSS_EMAIL\"",
        "\"Please specify your meross email: \"",
        "\"MEROSS_PASSWORD\"",
        "'Please specify your Meross password: '",
        "\"# Collecting devices via HTTP api...\"",
        "\"An error occurred while retrieving Meross devices.\"",
        "f\"[{i}] - {d.dev_name} ({d.device_type}) - {d.online_status.name}\"",
        "\"Please note that some devices rely on a HUB. Those devices won't be listed: in such cases, you need\"",
        "\"to select the corresponding HUB device.\"",
        "\"Select the device you want to study (numeric index): \"",
        "f\"You have selected {selected_device.dev_name}.\"",
        "\"%s%s\"",
        "\"utf8\"",
        "\"iot.meross.com\"",
        "\"Starting the sniffer...\"",
        "\"You can now start commanding this device from the Meross APP. This utility will catch \"",
        "\"every command you send from the app to this device. Such data could help developers to \"",
        "\"reproduce the functionality on this library. When DONE, press ENTER to finish.\"",
        "\"Press ENTER to finish.\"",
        "\"--------------- More data -----------------\"",
        "\"Collecting state info...\"",
        "\"GET\"",
        "\"GET\"",
        "f\"Sysdata for {selected_device.dev_name} ({selected_device.uuid}): {response_all}\"",
        "f\"Abilities for {selected_device.dev_name} ({selected_device.uuid}): {response_abilities}\"",
        "f\"Could not collect sysdata/abilities for {selected_device.uuid}\"",
        "\"Collecting logs...\"",
        "'data.zip'",
        "'w'",
        "\"A zipfile has been created containing the logs collected during this execution. \"",
        "\"It is located in {path}.\"",
        "\"Thanks for helping the Meross community!\"",
        "'__main__'",
        "'nt'"
    ],
    "variables": [
        "SNIFF_LOG_FILE",
        "formatter",
        "l",
        "lhandler",
        "ROOT_LOG_FILE",
        "formatter",
        "r",
        "rhandler",
        "connect_event",
        "subscribe_event",
        "user_id",
        "device_topic",
        "client_response_topic",
        "user_topic",
        "domain",
        "port",
        "target_device_uuid",
        "md5_hash",
        "rnd_uuid",
        "_app_id",
        "_client_id",
        "_mqtt_client",
        "on_connect",
        "on_message",
        "on_disconnect",
        "on_subscribe",
        "device_topic",
        "client_response_topic",
        "user_topic",
        "message",
        "header",
        "topic_str",
        "topic_str",
        "topic_str",
        "topic_str",
        "email",
        "email",
        "email",
        "password",
        "password",
        "devices",
        "http",
        "http",
        "devices",
        "selection",
        "selection",
        "selected_device",
        "creds",
        "md5_hash",
        "clearpwd",
        "hashed_password",
        "sniffer",
        "manager",
        "manager",
        "response_all",
        "response_abilities",
        "zipObj",
        "loop"
    ],
    "comments": [
        "Generate random app and client id",
        "Avoid login if user_id is None",
        "Starts a new thread that handles mqtt protocol and calls us back via callbacks",
        "Subscribe to the corresponding topics ...",
        "Gather HTTP devices",
        "Start the manager",
        "As very last step, try to collect data via get_all() and get_abilities",
        "Manually get device abilities",
        "On Windows + Python 3.8, you should uncomment the following"
    ],
    "docstrings": [
        "\"\"\"\n        Starts the connection to the MQTT broker\n        :return:\n        \"\"\""
    ],
    "functions": [
        "_on_connect",
        "start",
        "stop",
        "_on_subscribe",
        "_on_message",
        "_on_disconnect",
        "main"
    ],
    "classes": [
        "DeviceSniffer"
    ]
}