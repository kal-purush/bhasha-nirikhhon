{
    "identifiers": [
        "print_function",
        "unittest2",
        "unittest",
        "ImportError",
        "unittest",
        "mock",
        "ImportError",
        "unittest",
        "mock",
        "mock",
        "sys",
        "tlsfuzzer",
        "combine",
        "help_msg",
        "get_format",
        "read_row_based_csv",
        "read_column_based_csv",
        "main",
        "combine",
        "sys",
        "version_info",
        "unittest",
        "TestCase",
        "mock",
        "patch",
        "BUILTIN_PRINT",
        "mock_print",
        "help_msg",
        "mock_print",
        "assert_called_once",
        "assertIn",
        "mock_print",
        "call_args",
        "unittest",
        "TestCase",
        "mock",
        "patch",
        "mock",
        "mock_open",
        "read_data",
        "mock_open",
        "assertEqual",
        "get_format",
        "mock",
        "patch",
        "mock",
        "mock_open",
        "read_data",
        "mock_open",
        "assertEqual",
        "get_format",
        "mock",
        "patch",
        "mock",
        "mock_open",
        "read_data",
        "mock_open",
        "assertEqual",
        "get_format",
        "mock",
        "patch",
        "mock",
        "mock_open",
        "read_data",
        "mock_open",
        "assertRaises",
        "ValueError",
        "assertEqual",
        "get_format",
        "unittest",
        "skipIf",
        "sys",
        "version_info",
        "mock",
        "patch",
        "mock",
        "mock_open",
        "read_data",
        "mock_open",
        "assertRaises",
        "ValueError",
        "exc",
        "get_format",
        "assertIn",
        "exc",
        "exception",
        "mock",
        "patch",
        "mock",
        "mock_open",
        "read_data",
        "mock_open",
        "assertEqual",
        "get_format",
        "unittest",
        "TestCase",
        "unittest",
        "skipIf",
        "sys",
        "version_info",
        "mock",
        "patch",
        "mock",
        "mock_open",
        "read_data",
        "row_based_file",
        "mock_open",
        "assertEqual",
        "read_row_based_csv",
        "parsed_data",
        "unittest",
        "skipIf",
        "sys",
        "version_info",
        "mock",
        "patch",
        "mock",
        "mock_open",
        "read_data",
        "column_based_file",
        "mock_open",
        "assertEqual",
        "read_column_based_csv",
        "parsed_data",
        "unittest",
        "TestCase",
        "unittest",
        "skipIf",
        "sys",
        "version_info",
        "mock",
        "mock_open",
        "file_name",
        "mode",
        "file_name",
        "open_write",
        "file_name",
        "mode",
        "file_name",
        "mock",
        "mock_open",
        "read_data",
        "file_name",
        "mode",
        "file_name",
        "file_name",
        "mock",
        "mock_open",
        "read_data",
        "file_name",
        "mode",
        "mock",
        "MagicMock",
        "file_selector",
        "mock",
        "patch",
        "open_mock",
        "combine",
        "open_write",
        "write",
        "call_args_list",
        "mock",
        "call",
        "format",
        "i",
        "i",
        "assertEqual",
        "calls",
        "exp",
        "unittest",
        "skipIf",
        "sys",
        "version_info",
        "mock",
        "mock_open",
        "file_name",
        "mode",
        "file_name",
        "open_write",
        "file_name",
        "mode",
        "file_name",
        "mock",
        "mock_open",
        "read_data",
        "file_name",
        "mode",
        "file_name",
        "file_name",
        "mock",
        "mock_open",
        "read_data",
        "file_name",
        "mode",
        "mock",
        "MagicMock",
        "file_selector",
        "mock",
        "patch",
        "open_mock",
        "combine",
        "open_write",
        "write",
        "call_args_list",
        "mock",
        "call",
        "format",
        "i",
        "i",
        "assertEqual",
        "calls",
        "exp",
        "unittest",
        "skipIf",
        "sys",
        "version_info",
        "mock",
        "mock_open",
        "file_name",
        "mode",
        "file_name",
        "open_write",
        "file_name",
        "mode",
        "file_name",
        "mock",
        "mock_open",
        "read_data",
        "file_name",
        "mode",
        "file_name",
        "file_name",
        "mock",
        "mock_open",
        "read_data",
        "file_name",
        "mode",
        "mock",
        "MagicMock",
        "file_selector",
        "mock",
        "patch",
        "open_mock",
        "assertRaises",
        "ValueError",
        "err",
        "combine",
        "assertIn",
        "err",
        "exception",
        "unittest",
        "TestCase",
        "mock",
        "patch",
        "BUILTIN_PRINT",
        "mock_print",
        "mock",
        "patch",
        "args",
        "assertRaises",
        "SystemExit",
        "main",
        "assertIn",
        "mock_print",
        "call_args",
        "mock",
        "patch",
        "args",
        "assertRaises",
        "ValueError",
        "err",
        "main",
        "assertIn",
        "err",
        "exception",
        "mock",
        "patch",
        "args",
        "assertRaises",
        "ValueError",
        "err",
        "main",
        "assertIn",
        "err",
        "exception",
        "mock",
        "patch",
        "args",
        "mock",
        "patch",
        "mock_combine",
        "main",
        "mock_combine",
        "assert_called_once_with"
    ],
    "literals": [
        "\"__builtin__.print\"",
        "\"builtins.print\"",
        "'--help'",
        "\"__main__.__builtins__.open\"",
        "'hed,er\\n1,2\\n2,3\\n3,4\\n4,5'",
        "\"./non-existant\"",
        "\"column-based\"",
        "\"__main__.__builtins__.open\"",
        "'hed,1,2,3,4\\ner,2,3,4,5'",
        "\"./non-existant\"",
        "\"row-based\"",
        "\"__main__.__builtins__.open\"",
        "'\"head, torso\",1,2,3,4\\ner,2,3,4,5'",
        "\"./non-existant\"",
        "\"row-based\"",
        "\"__main__.__builtins__.open\"",
        "'\"head, torso,1,2,3,4\\ner,2,3,4,5'",
        "\"./non-existant\"",
        "\"row-based\"",
        "\"mock_open doesn't work correctly in mock v2.0.0\"",
        "\"__main__.__builtins__.open\"",
        "''",
        "\"./non-existant\"",
        "\"Empty file\"",
        "\"__main__.__builtins__.open\"",
        "'heder\\n1\\n2\\n3\\n4'",
        "\"./non-existant\"",
        "\"column-based\"",
        "'A'",
        "'B'",
        "'C'",
        "'1'",
        "'2'",
        "'3'",
        "'4'",
        "'5'",
        "'6'",
        "'7'",
        "'8'",
        "'9'",
        "'10'",
        "'11'",
        "'12'",
        "\"A,1,4,7,10\\nB,2,5,8,11\\nC,3,6,9,12\"",
        "\"A,B,C\\n1,2,3\\n4,5,6\\n7,8,9\\n10,11,12\"",
        "\"mock_open doesn't work correctly in mock v2.0.0\"",
        "\"__main__.__builtins__.open\"",
        "'./non-existant'",
        "\"mock_open doesn't work correctly in mock v2.0.0\"",
        "\"__main__.__builtins__.open\"",
        "'./non-existant'",
        "\"mock_open doesn't work correctly in mock v2.0.0\"",
        "\"/tmp\"",
        "\"file1\"",
        "\"A,1,2,3,4\\nB,5,6,7,8\"",
        "\"file2\"",
        "\"A,10,11,12\\nB,13,14,15\"",
        "\"__main__.__builtins__.open\"",
        "\"/tmp\"",
        "\"file1\"",
        "\"file2\"",
        "\"{0}\\r\\n\"",
        "\"A,B\"",
        "\"1,5\"",
        "\"2,6\"",
        "\"3,7\"",
        "\"4,8\"",
        "\"10,13\"",
        "\"11,14\"",
        "\"12,15\"",
        "\"mock_open doesn't work correctly in mock v2.0.0\"",
        "\"/tmp\"",
        "\"file1\"",
        "\"A,1,2,3,4\\nB,5,6,7,8\"",
        "\"file2\"",
        "\"A,B\\n10,13\\n11,14\\n12,15\"",
        "\"__main__.__builtins__.open\"",
        "\"/tmp\"",
        "\"file1\"",
        "\"file2\"",
        "\"{0}\\r\\n\"",
        "\"A,B\"",
        "\"1,5\"",
        "\"2,6\"",
        "\"3,7\"",
        "\"4,8\"",
        "\"10,13\"",
        "\"11,14\"",
        "\"12,15\"",
        "\"mock_open doesn't work correctly in mock v2.0.0\"",
        "\"/tmp\"",
        "\"file1\"",
        "\"A,1,2,3,4\\nB,5,6,7,8\"",
        "\"file2\"",
        "\"B,A\\n10,13\\n11,14\\n12,15\"",
        "\"__main__.__builtins__.open\"",
        "\"/tmp\"",
        "\"file1\"",
        "\"file2\"",
        "\"don't match column\"",
        "\"./combine.py\"",
        "\"--help\"",
        "\"sys.argv\"",
        "\"--help\"",
        "\"./combine.py\"",
        "\"sys.argv\"",
        "\"No input files\"",
        "\"combine.py\"",
        "\"./some/input/file.csv\"",
        "\"sys.argv\"",
        "\"No output\"",
        "\"combine.py\"",
        "\"-o\"",
        "\"/tmp/output\"",
        "\"./input1.csv\"",
        "\"./input2.csv\"",
        "\"sys.argv\"",
        "\"tlsfuzzer.combine.combine\"",
        "\"/tmp/output\"",
        "\"./input1.csv\"",
        "\"./input2.csv\""
    ],
    "variables": [
        "BUILTIN_PRINT",
        "BUILTIN_PRINT",
        "parsed_data",
        "row_based_file",
        "column_based_file",
        "open_write",
        "open_mock",
        "open_mock",
        "side_effect",
        "calls",
        "exp",
        "open_write",
        "open_mock",
        "open_mock",
        "side_effect",
        "calls",
        "exp",
        "open_write",
        "open_mock",
        "open_mock",
        "side_effect",
        "args",
        "args",
        "args",
        "args"
    ],
    "comments": [
        "Author Hubert Kario, copyright (c) 2020",
        "Released under Gnu GPL v2.0, see LICENSE file for details"
    ],
    "docstrings": [],
    "functions": [
        "test_help",
        "test_with_col_based_file",
        "test_with_row_based_file",
        "test_with_quoted_comma",
        "test_with_wrong_quote",
        "test_with_empty_file",
        "test_with_single_column",
        "test_row_based_file",
        "test_column_based_file",
        "test_combine_same_row_format",
        "file_selector",
        "test_combine_different_row_format",
        "file_selector",
        "test_combine_mismatched_column_names",
        "file_selector",
        "test_help",
        "test_missing_params",
        "test_missing_output_file",
        "test_correct_call"
    ],
    "classes": [
        "TestHelpMsg",
        "TestGetFormat",
        "TestParseFile",
        "TestCombine",
        "TestMain"
    ]
}