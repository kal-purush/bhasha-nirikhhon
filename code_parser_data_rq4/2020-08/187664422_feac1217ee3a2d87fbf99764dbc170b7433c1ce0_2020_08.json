{
    "identifiers": [
        "FluentValidation",
        "Linq",
        "Linq",
        "Expressions",
        "Threading",
        "Threading",
        "Tasks",
        "Internal",
        "Results",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "Action",
        "ValidationStrategy",
        "T",
        "options",
        "validator",
        "Validate",
        "ValidationContext",
        "T",
        "CreateWithOptions",
        "instance",
        "options",
        "ValidationResult",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "Action",
        "ValidationStrategy",
        "T",
        "options",
        "CancellationToken",
        "cancellation",
        "validator",
        "ValidateAsync",
        "ValidationContext",
        "T",
        "CreateWithOptions",
        "instance",
        "options",
        "cancellation",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "validator",
        "Validate",
        "instance",
        "options",
        "ThrowOnFailures",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "CancellationToken",
        "cancellationToken",
        "validator",
        "ValidateAsync",
        "instance",
        "options",
        "ThrowOnFailures",
        "cancellationToken",
        "Obsolete",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "Expression",
        "Func",
        "T",
        "propertyExpressions",
        "validator",
        "Validate",
        "instance",
        "options",
        "IncludeProperties",
        "propertyExpressions",
        "Obsolete",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "properties",
        "validator",
        "Validate",
        "instance",
        "options",
        "IncludeProperties",
        "properties",
        "Obsolete",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "IValidatorSelector",
        "selector",
        "ruleSet",
        "validator",
        "Validate",
        "instance",
        "selector",
        "options",
        "UseCustomSelector",
        "selector",
        "ruleSet",
        "ruleSet",
        "Split",
        "Select",
        "x",
        "Trim",
        "ToArray",
        "options",
        "IncludeRuleSets",
        "ruleSetNames",
        "Obsolete",
        "ValidationResult",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "CancellationToken",
        "cancellationToken",
        "Expression",
        "Func",
        "T",
        "propertyExpressions",
        "validator",
        "ValidateAsync",
        "instance",
        "options",
        "IncludeProperties",
        "propertyExpressions",
        "cancellationToken",
        "Obsolete",
        "ValidationResult",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "CancellationToken",
        "cancellationToken",
        "properties",
        "validator",
        "ValidateAsync",
        "instance",
        "options",
        "IncludeProperties",
        "properties",
        "cancellationToken",
        "Obsolete",
        "ValidationResult",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "CancellationToken",
        "cancellationToken",
        "IValidatorSelector",
        "selector",
        "ruleSet",
        "validator",
        "ValidateAsync",
        "instance",
        "selector",
        "options",
        "UseCustomSelector",
        "selector",
        "ruleSet",
        "ruleSet",
        "Split",
        "Select",
        "x",
        "Trim",
        "ToArray",
        "options",
        "IncludeRuleSets",
        "ruleSetNames",
        "cancellationToken",
        "Obsolete",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "ruleSet",
        "validator",
        "Validate",
        "instance",
        "ruleSet",
        "ruleSet",
        "Split",
        "Select",
        "x",
        "Trim",
        "ToArray",
        "options",
        "IncludeRuleSets",
        "ruleSetNames",
        "options",
        "ThrowOnFailures",
        "Obsolete",
        "T",
        "IValidator",
        "T",
        "validator",
        "T",
        "instance",
        "ruleSet",
        "CancellationToken",
        "cancellationToken",
        "validator",
        "ValidateAsync",
        "instance",
        "ruleSet",
        "ruleSet",
        "Split",
        "Select",
        "x",
        "Trim",
        "ToArray",
        "options",
        "IncludeRuleSets",
        "ruleSetNames",
        "options",
        "ThrowOnFailures",
        "cancellationToken"
    ],
    "literals": [
        "\"This method will be removed in FluentValidation 10. Instead use Validate(instance, options => options.IncludeProperties(expressions))\"",
        "\"This method will be removed in FluentValidation 10. Instead use Validate(instance, options => options.IncludeProperties(properties))\"",
        "\"This method will be removed in FluentValidation 10. Instead call Validate(instance, options => options.IncludeRuleSets(\\\"someRuleSet\\\",\\\"anotherRuleSet\\\")). Be sure to pass in separate strings rather than a comma-separated string.\"",
        "\"This method will be removed in FluentValidation 10. Instead use ValidateAsync(instance, options => options.IncludeProperties(expressions), cancellationToken)\"",
        "\"This method will be removed in FluentValidation 10. Instead use ValidateAsync(instance, options => options.IncludeProperties(properties), cancellationToken)\"",
        "\"This method will be removed in FluentValidation 10. Instead call ValidateAsync(instance, options => options.IncludeRuleSets(\\\"someRuleSet\\\",\\\"anotherRuleSet\\\"), cancellationToken). Be sure to pass in separate strings rather than a comma-separated string.\"",
        "\"This method will be removed in FluentValidation 10. Instead call Validate(instance, options => options.IncludeRuleSets(\\\"someRuleSet\\\",\\\"anotherRuleSet\\\").ThrowOnFailures()). Be sure to pass in separate strings rather than a comma-separated string for rulesets.\"",
        "\"This method will be removed in FluentValidation 10. Instead call ValidateAsync(instance, options => options.IncludeRuleSets(\\\"someRuleSet\\\",\\\"anotherRuleSet\\\").ThrowOnFailures(), cancellationToken). Be sure to pass in separate strings rather than a comma-separated string for rulesets.\""
    ],
    "variables": [
        "ruleSetNames",
        "ruleSetNames",
        "ruleSetNames",
        "ruleSetNames"
    ],
    "comments": [
        "Copyright (c) .NET Foundation and contributors.",
        "",
        "Licensed under the Apache License, Version 2.0 (the \"License\");",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an \"AS IS\" BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License.",
        "",
        "The latest version of this file can be found at https://github.com/FluentValidation/FluentValidation",
        "Validates the specified instance using a combination of extra options",
        "</summary>",
        "<param name=\"validator\">The validator</param>",
        "<param name=\"instance\">The instance to validate</param>",
        "<param name=\"options\">Callback to configure additional options</param>",
        "<typeparam name=\"T\"></typeparam>",
        "<returns></returns>",
        "Validates the specified instance using a combination of extra options",
        "</summary>",
        "<param name=\"validator\">The validator</param>",
        "<param name=\"instance\">The instance to validate</param>",
        "<param name=\"cancellation\">Cancellation token</param>",
        "<param name=\"options\">Callback to configure additional options</param>",
        "<typeparam name=\"T\"></typeparam>",
        "<returns></returns>",
        "Performs validation and then throws an exception if validation fails.",
        "This method is a shortcut for: Validate(instance, options => options.ThrowOnFailures());",
        "</summary>",
        "<param name=\"validator\">The validator this method is extending.</param>",
        "<param name=\"instance\">The instance of the type we are validating.</param>",
        "Performs validation asynchronously and then throws an exception if validation fails.",
        "This method is a shortcut for: ValidateAsync(instance, options => options.ThrowOnFailures());",
        "</summary>",
        "<param name=\"validator\">The validator this method is extending.</param>",
        "<param name=\"instance\">The instance of the type we are validating.</param>",
        "<param name=\"cancellationToken\"></param>",
        "Validates certain properties of the specified instance.",
        "</summary>",
        "<param name=\"validator\">The current validator</param>",
        "<param name=\"instance\">The object to validate</param>",
        "<param name=\"propertyExpressions\">Expressions to specify the properties to validate</param>",
        "<returns>A ValidationResult object containing any validation failures</returns>",
        "Validates certain properties of the specified instance.",
        "</summary>",
        "<param name=\"validator\"></param>",
        "<param name=\"instance\">The object to validate</param>",
        "<param name=\"properties\">The names of the properties to validate.</param>",
        "<returns>A ValidationResult object containing any validation failures.</returns>",
        "Validates an object using either a custom validator selector or a ruleset.",
        "</summary>",
        "<typeparam name=\"T\"></typeparam>",
        "<param name=\"validator\"></param>",
        "<param name=\"instance\"></param>",
        "<param name=\"selector\"></param>",
        "<param name=\"ruleSet\"></param>",
        "<returns></returns>",
        "Validates certain properties of the specified instance asynchronously.",
        "</summary>",
        "<param name=\"validator\">The current validator</param>",
        "<param name=\"instance\">The object to validate</param>",
        "<param name=\"cancellationToken\"></param>",
        "<param name=\"propertyExpressions\">Expressions to specify the properties to validate</param>",
        "<returns>A ValidationResult object containing any validation failures</returns>",
        "Validates certain properties of the specified instance asynchronously.",
        "</summary>",
        "<param name=\"validator\"></param>",
        "<param name=\"instance\">The object to validate</param>",
        "<param name=\"cancellationToken\"></param>",
        "<param name=\"properties\">The names of the properties to validate.</param>",
        "<returns>A ValidationResult object containing any validation failures.</returns",
        "Validates an object asynchronously using a custom validator selector or a ruleset",
        "</summary>",
        "<typeparam name=\"T\"></typeparam>",
        "<param name=\"validator\"></param>",
        "<param name=\"instance\"></param>",
        "<param name=\"cancellationToken\"></param>",
        "<param name=\"selector\"></param>",
        "<param name=\"ruleSet\"></param>",
        "<returns></returns>",
        "Performs validation and then throws an exception if validation fails.",
        "</summary>",
        "<param name=\"validator\">The validator this method is extending.</param>",
        "<param name=\"instance\">The instance of the type we are validating.</param>",
        "<param name=\"ruleSet\">Optional: a ruleset when need to validate against.</param>",
        "Legacy: allow multiple rulesets if they're comma separated.",
        "Performs validation asynchronously and then throws an exception if validation fails.",
        "</summary>",
        "<param name=\"validator\">The validator this method is extending.</param>",
        "<param name=\"instance\">The instance of the type we are validating.</param>",
        "<param name=\"cancellationToken\"></param>",
        "<param name=\"ruleSet\">Optional: a ruleset when need to validate against.</param>",
        "Legacy: allow multiple rulesets if they're comma separated."
    ],
    "docstrings": [
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>",
        "<summary>"
    ],
    "functions": [
        "ValidationResult",
        "Validate",
        "ValidateAsync",
        "ValidateAndThrow",
        "ValidateAndThrowAsync",
        "ValidationResult",
        "Validate",
        "ValidationResult",
        "Validate",
        "ValidationResult",
        "Validate",
        "ValidateAsync",
        "ValidateAsync",
        "ValidateAsync",
        "ValidateAndThrow",
        "ValidateAndThrowAsync"
    ],
    "classes": [
        "DefaultValidatorExtensions"
    ]
}