{
    "identifiers": [
        "require",
        "require",
        "require",
        "express",
        "mongoose",
        "process",
        "app",
        "app",
        "express",
        "app",
        "req",
        "res",
        "ShortUrl",
        "res",
        "shortUrls",
        "app",
        "req",
        "res",
        "ShortUrl",
        "req",
        "res",
        "app",
        "req",
        "res",
        "res",
        "app",
        "req",
        "res",
        "ShortUrl",
        "req",
        "shortUrl",
        "res",
        "shortUrl",
        "shortUrl",
        "res",
        "shortUrl",
        "process",
        "app",
        "PORT",
        "PORT"
    ],
    "literals": [
        "\"express\"",
        "\"mongoose\"",
        "\"./../models/shortUrl\"",
        "\"view engine\"",
        "\"ejs\"",
        "\"/\"",
        "\"index\"",
        "\"/shortUrls\"",
        "\"/\"",
        "\"/test\"",
        "\"Hello World\"",
        "\"/:shortUrl\"",
        "\"Listening on port \""
    ],
    "variables": [
        "express",
        "mongoose",
        "ShortUrl",
        "app",
        "shortUrls",
        "shortUrl",
        "PORT"
    ],
    "comments": [
        "import the model we created",
        "connect to DB & pass it some setup options",
        "tell our app we are using URL parameters",
        "retrieves all our URLs in our DB",
        "it needs to be an async function so we can use \"await\"",
        "pass the shortUrls down into our view template",
        "connect to DB and save a new short URL based on the DB schema object we defined",
        "note this is an async action. It happens in the background",
        "we want to wait until this is executed before we move on hence the asycn await syntax",
        "to create an async function",
        "saves an entry to DB",
        "what this is saying is get me any route that has information directly after the /",
        "and it will be saved in a param called shortUrl",
        "call the findOne method on our Mongo DB and pass in our search query",
        "we are trying to find an entry in the DB that has that shortId which is passed in from our URL",
        "check in case people pass a URL that doesn't exist in our DB and handle this",
        "we can't find what ur looking for",
        "update clicks on our local object",
        "update the DB with the latest clicks",
        "so logic is",
        "client passes in a shortUrl",
        "we check if it exists in our DB, if not send a 404",
        "if yes we add one to clicks locally",
        "then save to DB",
        "then redirect to the full URL"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}