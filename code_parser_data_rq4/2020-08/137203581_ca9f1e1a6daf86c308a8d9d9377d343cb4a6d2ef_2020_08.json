{
    "identifiers": [
        "os",
        "re",
        "sys",
        "colorama",
        "Fore",
        "pylint",
        "lint",
        "Run",
        "s",
        "Fore",
        "BLUE",
        "s",
        "Fore",
        "RESET",
        "s",
        "sys",
        "stdout",
        "write",
        "s",
        "os",
        "getenv",
        "os",
        "getenv",
        "len",
        "sys",
        "argv",
        "i",
        "nargs",
        "sys",
        "argv",
        "i",
        "arg",
        "i",
        "i",
        "nargs",
        "sys",
        "argv",
        "i",
        "arg",
        "i",
        "i",
        "nargs",
        "sys",
        "argv",
        "i",
        "args",
        "append",
        "arg",
        "i",
        "args",
        "include_pattern",
        "exclude_pattern",
        "path",
        "include_re",
        "exclude_re",
        "direntry",
        "os",
        "listdir",
        "path",
        "os",
        "path",
        "join",
        "path",
        "direntry",
        "os",
        "path",
        "islink",
        "fullpath",
        "exclude_re",
        "match",
        "direntry",
        "os",
        "path",
        "isdir",
        "fullpath",
        "files",
        "extend",
        "probe_dir",
        "fullpath",
        "include_re",
        "exclude_re",
        "os",
        "path",
        "isfile",
        "fullpath",
        "include_re",
        "match",
        "direntry",
        "files",
        "append",
        "fullpath",
        "files",
        "files",
        "print_line",
        "blue",
        "sys",
        "argv",
        "f",
        "files",
        "print_line",
        "blue",
        "f",
        "probe_args",
        "args",
        "args",
        "print_line",
        "__doc__",
        "os",
        "getenv",
        "probe_dir",
        "os",
        "getcwd",
        "re",
        "compile",
        "include_pattern",
        "re",
        "compile",
        "exclude_pattern",
        "files",
        "show_files",
        "files",
        "args",
        "extend",
        "files",
        "sys",
        "argv",
        "Run",
        "args",
        "linter",
        "msg_status",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "\"%s%s%s\"",
        "\"%s\\n\"",
        "\"RUN_PYLINT_INCLUDE\"",
        "r\".*\\.py[iw]?$\"",
        "\"RUN_PYLINT_EXCLUDE\"",
        "r\"^\\..*\"",
        "\"--include\"",
        "\"--include: missing PATTERN\"",
        "\"--exclude\"",
        "\"--exclude: missing PATTERN\"",
        "\"%s: files to be checked:\"",
        "\"    %s\"",
        "\"-h\"",
        "\"--help\"",
        "\"RUN_PYLINT_DISABLED\"",
        "\"\"",
        "\"\"",
        "\"pylint\"",
        "\"__main__\""
    ],
    "variables": [
        "args",
        "include_pattern",
        "exclude_pattern",
        "i",
        "nargs",
        "arg",
        "include_pattern",
        "exclude_pattern",
        "files",
        "fullpath",
        "args",
        "include_pattern",
        "exclude_pattern",
        "files"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "SPDX-License-Identifier: MIT",
        "",
        "Copyright (c) 2019-2020 Red Hat, Inc.",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining a copy",
        "of this software and associated documentation files (the \"Software\"), to deal",
        "in the Software without restriction, including without limitation the rights",
        "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
        "copies of the Software, and to permit persons to whom the Software is",
        "furnished to do so, subject to the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be included in",
        "all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
        "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
        "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE",
        "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
        "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
        "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
        "SOFTWARE.",
        ""
    ],
    "docstrings": [
        "\"\"\"\nProbe directory tree for python files and pass them to pylint.\n\nUsage: python custom_pylint.py ARGUMENTS\n\nRun pylint with ARGUMENTS followed by the list of python files contained in the\nworking directory and its subdirectories.  As a python file is recognized a\nfile that match INCPAT.  Files and directories that match EXPAT are skipped.\nSymbolic links are also skipped.  It is assumed that files to be pylinted are\nspecified only with INCPAT and EXPAT.\n\nThere are several cases when argument from ARGUMENTS is not passed to pylint\nbut it is handled by run_pylint.py instead:\n\n  1. if -h or --help is contained in ARGUMENTS, this help screen is printed to\n     the standard output and run_pylint.py exits with 0;\n  2. if --include followed by a PATTERN is contained in ARGUMENTS, the PATTERN\n     is used instead of INCPAT to recognize whether the file is a python file\n     or not;\n  3. if --exclude followed by a PATTERN is contained in ARGUMENTS, the PATTERN\n     is used instead of EXPAT to recognize whether the file or directory should\n     be skipped.\n\nExclusion takes a priority over inclusion, i.e. if a file or directory can be\nboth included and excluded, it is excluded.\n\nThe default value of INCPAT is .*\\\\.py[iw]?$.  For EXPAT, it is ^\\\\..*.\n\nEnvironment variables:\n\n  RUN_PYLINT_INCLUDE\n    overrides default value of INCPAT;\n\n  RUN_PYLINT_EXCLUDE\n    overrides default value of EXPAT;\n\n  RUN_PYLINT_DISABLED\n    if set to an arbitrary non-empty value, pylint will be not executed\n\"\"\"",
        "\"\"\"\n    Return string `s` colorized to blue.\n    \"\"\"",
        "\"\"\"\n    Write `s` followed by the line feed character to the standard output.\n    \"\"\"",
        "\"\"\"\n    Analyze the command line arguments and return a tuple containing a list of\n    pylint arguments, pattern string to recognize files to be included, and\n    pattern string to recognize files and directories to be skipped.\n\n    Default values of pattern strings are taken from RUN_PYLINT_INCLUDE and\n    RUN_PYLINT_EXCLUDE environment variables. In the case they are not defined,\n    .*\\\\.py[iw]?$ and ^\\\\..* are used, respectively.\n    \"\"\"",
        "\"\"\"\n    Recursively go through directory structure starting at `path`, collect\n    files that match `include_re`, skip files and directories that are either\n    symbolic links or match `exclude_re`. Return the list of collected files.\n    \"\"\"",
        "\"\"\"\n    Print `files` to the standard output, one item per line, in a blue color.\n    \"\"\"",
        "\"\"\"\n    Script entry point. Return exit code.\n    \"\"\""
    ],
    "functions": [
        "blue",
        "print_line",
        "probe_args",
        "probe_dir",
        "show_files",
        "main"
    ],
    "classes": []
}