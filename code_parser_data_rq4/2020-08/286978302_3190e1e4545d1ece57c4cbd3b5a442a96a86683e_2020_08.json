{
    "identifiers": [
        "argparse",
        "hashlib",
        "inspect",
        "json",
        "os",
        "serial",
        "subprocess",
        "sys",
        "time",
        "base64",
        "zlib",
        "func",
        "check_func",
        "args",
        "kwargs",
        "args",
        "check_func",
        "obj",
        "func",
        "args",
        "kwargs",
        "NotImplementedInROMError",
        "obj",
        "inner",
        "func",
        "check_supported_function",
        "func",
        "o",
        "o",
        "IS_STUB",
        "func",
        "check_supported_function",
        "func",
        "o",
        "o",
        "IS_STUB",
        "o",
        "CHIP_NAME",
        "func",
        "check_supported_function",
        "func",
        "o",
        "o",
        "CHIP_NAME",
        "ESP_FLASH_BLOCK",
        "port",
        "DEFAULT_PORT",
        "baud",
        "ESP_ROM_BAUD",
        "do_connect",
        "isinstance",
        "port",
        "serial",
        "Serial",
        "port",
        "serial",
        "Serial",
        "port",
        "slip_reader",
        "_port",
        "_port",
        "baud",
        "do_connect",
        "connect",
        "staticmethod",
        "port",
        "DEFAULT_PORT",
        "baud",
        "ESP_ROM_BAUD",
        "ESPLoader",
        "port",
        "baud",
        "sys",
        "stdout",
        "write",
        "detect_port",
        "read_reg",
        "ESPLoader",
        "UART_DATA_REG_ADDR",
        "cls",
        "ESP8266ROM",
        "ESP32ROM",
        "date_reg",
        "cls",
        "DATE_REG_VALUE",
        "cls",
        "detect_port",
        "_port",
        "baud",
        "inst",
        "CHIP_NAME",
        "inst",
        "FatalError",
        "date_reg",
        "_slip_reader",
        "next",
        "r",
        "packet",
        "packet",
        "replace",
        "replace",
        "_port",
        "write",
        "buf",
        "staticmethod",
        "data",
        "state",
        "ESP_CHECKSUM_MAGIC",
        "b",
        "data",
        "state",
        "ord",
        "b",
        "state",
        "op",
        "data",
        "chk",
        "op",
        "pack",
        "op",
        "len",
        "data",
        "chk",
        "data",
        "write",
        "pkt",
        "retry",
        "xrange",
        "read",
        "len",
        "p",
        "unpack",
        "p",
        "resp",
        "p",
        "op",
        "op_ret",
        "op",
        "val",
        "data",
        "FatalError",
        "op_description",
        "op",
        "data",
        "chk",
        "command",
        "op",
        "data",
        "chk",
        "len",
        "data",
        "STATUS_BYTES_LENGTH",
        "FatalError",
        "op_description",
        "len",
        "data",
        "data",
        "STATUS_BYTES_LENGTH",
        "status_bytes",
        "FatalError",
        "WithResult",
        "op_description",
        "status_bytes",
        "len",
        "data",
        "STATUS_BYTES_LENGTH",
        "data",
        "STATUS_BYTES_LENGTH",
        "val",
        "_port",
        "flushInput",
        "slip_reader",
        "_port",
        "command",
        "ESP_SYNC",
        "i",
        "xrange",
        "command",
        "_",
        "xrange",
        "_port",
        "setDTR",
        "_port",
        "setRTS",
        "time",
        "sleep",
        "_port",
        "setDTR",
        "_port",
        "setRTS",
        "time",
        "sleep",
        "_port",
        "setDTR",
        "_port",
        "_",
        "xrange",
        "flush_input",
        "_port",
        "flushOutput",
        "sync",
        "_port",
        "FatalError",
        "e",
        "e",
        "time",
        "sleep",
        "FatalError",
        "CHIP_NAME",
        "last_exception",
        "addr",
        "command",
        "ESP_READ_REG",
        "pack",
        "addr",
        "data",
        "FatalError",
        "WithResult",
        "addr",
        "data",
        "val",
        "addr",
        "value",
        "mask",
        "delay_us",
        "check_command",
        "ESP_WRITE_REG",
        "pack",
        "addr",
        "value",
        "mask",
        "delay_us",
        "size",
        "blocks",
        "blocksize",
        "offset",
        "check_command",
        "ESP_MEM_BEGIN",
        "pack",
        "size",
        "blocks",
        "blocksize",
        "offset",
        "data",
        "seq",
        "check_command",
        "ESP_MEM_DATA",
        "pack",
        "len",
        "data",
        "seq",
        "data",
        "checksum",
        "data",
        "entrypoint",
        "check_command",
        "ESP_MEM_END",
        "pack",
        "entrypoint",
        "entrypoint",
        "size",
        "offset",
        "_port",
        "timeout",
        "size",
        "ESP_FLASH_BLOCK",
        "ESP_FLASH_BLOCK",
        "get_erase_size",
        "offset",
        "size",
        "_port",
        "time",
        "time",
        "check_command",
        "ESP_FLASH_BEGIN",
        "pack",
        "erase_size",
        "num_blocks",
        "ESP_FLASH_BLOCK",
        "offset",
        "size",
        "time",
        "time",
        "t",
        "_port",
        "old_tmo",
        "data",
        "seq",
        "check_command",
        "seq",
        "ESP_FLASH_DATA",
        "pack",
        "len",
        "data",
        "seq",
        "data",
        "checksum",
        "data",
        "reboot",
        "pack",
        "reboot",
        "check_command",
        "ESP_FLASH_END",
        "pkt",
        "reboot",
        "flash_begin",
        "flash_finish",
        "reboot",
        "run_spiflash_command",
        "SPIFLASH_RDID",
        "arg",
        "FLASH_SIZES",
        "arg",
        "KeyError",
        "FatalError",
        "arg",
        "join",
        "FLASH_SIZES",
        "keys",
        "esp8266_function_only",
        "flash_begin",
        "mem_begin",
        "mem_finish",
        "offs",
        "data",
        "len",
        "data",
        "length",
        "ESP_RAM_BLOCK",
        "ESP_RAM_BLOCK",
        "mem_begin",
        "length",
        "blocks",
        "ESP_RAM_BLOCK",
        "offs",
        "seq",
        "blocks",
        "seq",
        "ESP_RAM_BLOCK",
        "from_offs",
        "ESP_RAM_BLOCK",
        "mem_block",
        "data",
        "from_offs",
        "to_offs",
        "seq",
        "stub",
        "read_output",
        "stub",
        "unhexify",
        "stub",
        "stub",
        "unhexify",
        "stub",
        "stub",
        "len",
        "FatalError",
        "stub",
        "len",
        "pack",
        "stub",
        "stub",
        "_upload_ram",
        "stub",
        "pc",
        "stub",
        "_upload_ram",
        "stub",
        "stub",
        "mem_finish",
        "stub",
        "read_output",
        "sys",
        "stderr",
        "read",
        "hexify",
        "p",
        "p",
        "stub",
        "stub",
        "IS_STUB",
        "FatalError",
        "STUB_CODE",
        "field",
        "field",
        "stub",
        "_upload_ram",
        "stub",
        "field",
        "stub",
        "field",
        "mem_finish",
        "stub",
        "read",
        "p",
        "FatalError",
        "p",
        "STUB_CLASS",
        "stub_and_esp32_function_only",
        "size",
        "compsize",
        "offset",
        "_port",
        "timeout",
        "compsize",
        "ESP_FLASH_BLOCK",
        "ESP_FLASH_BLOCK",
        "size",
        "ESP_FLASH_BLOCK",
        "ESP_FLASH_BLOCK",
        "_port",
        "time",
        "time",
        "size",
        "compsize",
        "check_command",
        "ESP_FLASH_DEFL_BEGIN",
        "pack",
        "erase_blocks",
        "ESP_FLASH_BLOCK",
        "num_blocks",
        "ESP_FLASH_BLOCK",
        "offset",
        "size",
        "IS_STUB",
        "time",
        "time",
        "t",
        "_port",
        "old_tmo",
        "stub_and_esp32_function_only",
        "data",
        "seq",
        "check_command",
        "seq",
        "ESP_FLASH_DEFL_DATA",
        "pack",
        "len",
        "data",
        "seq",
        "data",
        "checksum",
        "data",
        "stub_and_esp32_function_only",
        "reboot",
        "pack",
        "reboot",
        "check_command",
        "ESP_FLASH_DEFL_END",
        "pkt",
        "stub_and_esp32_function_only",
        "addr",
        "size",
        "check_command",
        "ESP_SPI_FLASH_MD5",
        "pack",
        "addr",
        "size",
        "len",
        "res",
        "res",
        "len",
        "res",
        "hexify",
        "res",
        "lower",
        "FatalError",
        "res",
        "stub_and_esp32_function_only",
        "baud",
        "baud",
        "command",
        "ESP_CHANGE_BAUDRATE",
        "pack",
        "baud",
        "_port",
        "baud",
        "time",
        "sleep",
        "flush_input",
        "stub_function_only",
        "_port",
        "timeout",
        "_port",
        "check_command",
        "ESP_ERASE_FLASH",
        "_port",
        "oldtimeout",
        "stub_function_only",
        "offset",
        "size",
        "offset",
        "ESP_FLASH_SECTOR",
        "FatalError",
        "size",
        "ESP_FLASH_SECTOR",
        "FatalError",
        "check_command",
        "ESP_ERASE_REGION",
        "pack",
        "offset",
        "size",
        "stub_function_only",
        "offset",
        "length",
        "progress_fn",
        "check_command",
        "ESP_READ_FLASH",
        "pack",
        "offset",
        "length",
        "ESP_FLASH_BLOCK",
        "len",
        "data",
        "length",
        "read",
        "data",
        "p",
        "write",
        "pack",
        "len",
        "data",
        "progress_fn",
        "len",
        "data",
        "len",
        "data",
        "length",
        "progress_fn",
        "len",
        "data",
        "length",
        "progress_fn",
        "progress_fn",
        "len",
        "data",
        "length",
        "len",
        "data",
        "length",
        "FatalError",
        "read",
        "len",
        "digest_frame",
        "FatalError",
        "hexify",
        "digest_frame",
        "hexify",
        "digest_frame",
        "upper",
        "hashlib",
        "md5",
        "data",
        "hexdigest",
        "upper",
        "digest",
        "expected_digest",
        "FatalError",
        "expected_digest",
        "digest",
        "data",
        "is_hspi",
        "is_legacy",
        "pack",
        "is_hspi",
        "is_legacy",
        "check_command",
        "ESP32ROM",
        "ESP_SPI_ATTACH",
        "arg",
        "size",
        "size",
        "check_command",
        "ESP32ROM",
        "ESP_SPI_SET_PARAMS",
        "pack",
        "fl_id",
        "total_size",
        "block_size",
        "sector_size",
        "page_size",
        "status_mask",
        "spiflash_command",
        "data",
        "read_bits",
        "SPI_REG_BASE",
        "SPI_W0_OFFS",
        "SPI_HAS_MOSI_DLEN_REG",
        "mosi_bits",
        "miso_bits",
        "mosi_bits",
        "write_reg",
        "SPI_MOSI_DLEN_REG",
        "mosi_bits",
        "miso_bits",
        "write_reg",
        "SPI_MISO_DLEN_REG",
        "miso_bits",
        "mosi_bits",
        "miso_bits",
        "SPI_USR1_REG",
        "mosi_bits",
        "mosi_bits",
        "miso_bits",
        "miso_bits",
        "write_reg",
        "SPI_DATA_LEN_REG",
        "miso_mask",
        "SPI_MISO_BITLEN_S",
        "mosi_mask",
        "SPI_MOSI_BITLEN_S",
        "read_bits",
        "FatalError",
        "len",
        "data",
        "FatalError",
        "len",
        "data",
        "SPI_USR_COMMAND",
        "read_bits",
        "flags",
        "SPI_USR_MISO",
        "data_bits",
        "flags",
        "SPI_USR_MOSI",
        "set_data_lengths",
        "data_bits",
        "read_bits",
        "write_reg",
        "SPI_USR_REG",
        "flags",
        "write_reg",
        "SPI_USR2_REG",
        "SPI_USR2_DLEN_SHIFT",
        "spiflash_command",
        "data_bits",
        "write_reg",
        "SPI_W0_REG",
        "len",
        "data",
        "data",
        "len",
        "data",
        "unpack",
        "len",
        "data",
        "data",
        "SPI_W0_REG",
        "word",
        "words",
        "write_reg",
        "next_reg",
        "word",
        "next_reg",
        "write_reg",
        "SPI_CMD_REG",
        "SPI_CMD_USR",
        "_",
        "xrange",
        "read_reg",
        "SPI_CMD_REG",
        "SPI_CMD_USR",
        "FatalError",
        "wait_done",
        "read_reg",
        "SPI_W0_REG",
        "status",
        "num_bytes",
        "cmd",
        "SPIFLASH_RDSR",
        "SPIFLASH_RDSR2",
        "SPIFLASH_RDSR3",
        "num_bytes",
        "status",
        "run_spiflash_command",
        "cmd",
        "read_bits",
        "shift",
        "shift",
        "status",
        "new_status",
        "num_bytes",
        "set_non_volatile",
        "SPIFLASH_WREN",
        "set_non_volatile",
        "SPIFLASH_WEVSR",
        "num_bytes",
        "run_spiflash_command",
        "enable_cmd",
        "run_spiflash_command",
        "SPIFLASH_WRSR",
        "pack",
        "new_status",
        "cmd",
        "SPIFLASH_WRSR",
        "SPIFLASH_WRSR2",
        "SPIFLASH_WRSR3",
        "num_bytes",
        "run_spiflash_command",
        "enable_cmd",
        "run_spiflash_command",
        "cmd",
        "pack",
        "new_status",
        "new_status",
        "run_spiflash_command",
        "SPIFLASH_WRDI",
        "ESPLoader",
        "is_spi",
        "is_legacy",
        "size",
        "read_reg",
        "ESP_OTP_MAC0",
        "read_reg",
        "ESP_OTP_MAC1",
        "id0",
        "id1",
        "MAX_UINT24",
        "read_reg",
        "ESP_OTP_MAC0",
        "read_reg",
        "ESP_OTP_MAC1",
        "read_reg",
        "ESP_OTP_MAC3",
        "mac3",
        "mac3",
        "mac3",
        "mac3",
        "mac1",
        "mac1",
        "FatalError",
        "oui",
        "mac1",
        "mac1",
        "mac0",
        "offset",
        "size",
        "ESP_FLASH_SECTOR",
        "size",
        "sector_size",
        "sector_size",
        "offset",
        "sector_size",
        "sectors_per_block",
        "start_sector",
        "sectors_per_block",
        "num_sectors",
        "head_sectors",
        "num_sectors",
        "num_sectors",
        "head_sectors",
        "num_sectors",
        "sector_size",
        "num_sectors",
        "head_sectors",
        "sector_size",
        "ESP8266ROM",
        "rom_loader",
        "rom_loader",
        "_port",
        "flush_input",
        "ESP8266StubLoader",
        "ESPLoader",
        "n",
        "read_reg",
        "EFUSE_REG_BASE",
        "n",
        "read_efuse",
        "read_efuse",
        "word17",
        "MAX_UINT24",
        "word16",
        "MAX_UINT24",
        "read_efuse",
        "read_efuse",
        "read_efuse",
        "read_efuse",
        "word17",
        "word17",
        "word17",
        "word16",
        "word16",
        "word16",
        "word19",
        "word19",
        "word19",
        "word18",
        "word18",
        "word18",
        "wifi_mac",
        "bt_mac",
        "offset",
        "size",
        "size",
        "ESP32ROM",
        "rom_loader",
        "rom_loader",
        "_port",
        "flush_input",
        "ESP32StubLoader",
        "chip",
        "filename",
        "open",
        "filename",
        "f",
        "chip",
        "ESP32FirmwareImage",
        "f",
        "ord",
        "f",
        "read",
        "f",
        "seek",
        "magic",
        "ESPLoader",
        "ESP_IMAGE_MAGIC",
        "ESPFirmwareImage",
        "f",
        "magic",
        "ESPBOOTLOADER",
        "IMAGE_V2_MAGIC",
        "OTAFirmwareImage",
        "f",
        "FatalError",
        "magic",
        "addr",
        "data",
        "file_offs",
        "addr",
        "len",
        "data",
        "pad_mod",
        "data",
        "pad_mod",
        "data",
        "file_offs",
        "new_addr",
        "ImageSegment",
        "new_addr",
        "data",
        "len",
        "data",
        "addr",
        "file_offs",
        "r",
        "file_offs",
        "r",
        "ImageSegment",
        "name",
        "addr",
        "data",
        "ELFSection",
        "addr",
        "data",
        "name",
        "name",
        "ELFSection",
        "__repr__",
        "load_file",
        "expected_magic",
        "flash_mode",
        "flash_size_freq",
        "entrypoint",
        "unpack",
        "load_file",
        "read",
        "magic",
        "expected_magic",
        "segments",
        "FatalError",
        "magic",
        "segments",
        "segments",
        "f",
        "is_irom_segment",
        "f",
        "tell",
        "unpack",
        "f",
        "read",
        "warn_if_unusual_segment",
        "offset",
        "size",
        "is_irom_segment",
        "f",
        "read",
        "size",
        "len",
        "segment_data",
        "size",
        "FatalError",
        "offset",
        "size",
        "len",
        "segment_data",
        "ImageSegment",
        "offset",
        "segment_data",
        "file_offs",
        "segments",
        "append",
        "segment",
        "segment",
        "offset",
        "size",
        "is_irom_segment",
        "is_irom_segment",
        "offset",
        "offset",
        "size",
        "offset",
        "size",
        "f",
        "segment",
        "checksum",
        "f",
        "write",
        "pack",
        "segment",
        "addr",
        "len",
        "segment",
        "data",
        "f",
        "write",
        "segment",
        "data",
        "checksum",
        "ESPLoader",
        "checksum",
        "segment",
        "data",
        "checksum",
        "f",
        "align_file_position",
        "f",
        "ord",
        "f",
        "read",
        "ESPLoader",
        "ESP_CHECKSUM_MAGIC",
        "seg",
        "segments",
        "seg",
        "include_in_checksum",
        "ESPLoader",
        "checksum",
        "seg",
        "data",
        "checksum",
        "checksum",
        "f",
        "checksum",
        "align_file_position",
        "f",
        "f",
        "write",
        "pack",
        "checksum",
        "f",
        "segments",
        "f",
        "write",
        "pack",
        "ESPLoader",
        "ESP_IMAGE_MAGIC",
        "len",
        "segments",
        "flash_mode",
        "flash_size_freq",
        "entrypoint",
        "addr",
        "ESP8266ROM",
        "IROM_MAP_START",
        "addr",
        "ESP8266ROM",
        "IROM_MAP_END",
        "s",
        "s",
        "segments",
        "is_irom_addr",
        "s",
        "addr",
        "len",
        "irom_segments",
        "len",
        "irom_segments",
        "FatalError",
        "len",
        "irom_segments",
        "irom_segments",
        "get_irom_segment",
        "s",
        "s",
        "segments",
        "s",
        "irom_segment",
        "BaseFirmwareImage",
        "ESP8266ROM",
        "load_file",
        "ESPFirmwareImage",
        "load_file",
        "load_common_header",
        "load_file",
        "ESPLoader",
        "ESP_IMAGE_MAGIC",
        "_",
        "xrange",
        "segments",
        "load_segment",
        "load_file",
        "read_checksum",
        "load_file",
        "input_file",
        "input_file",
        "basename",
        "get_irom_segment",
        "irom_segment",
        "open",
        "basename",
        "irom_segment",
        "addr",
        "ESP8266ROM",
        "IROM_MAP_START",
        "f",
        "f",
        "write",
        "irom_segment",
        "data",
        "get_non_irom_segments",
        "open",
        "basename",
        "f",
        "write_common_header",
        "f",
        "normal_segments",
        "ESPLoader",
        "ESP_CHECKSUM_MAGIC",
        "segment",
        "normal_segments",
        "save_segment",
        "f",
        "segment",
        "checksum",
        "append_checksum",
        "f",
        "checksum",
        "BaseFirmwareImage",
        "ESP8266ROM",
        "load_file",
        "OTAFirmwareImage",
        "load_file",
        "load_common_header",
        "load_file",
        "ESPBOOTLOADER",
        "IMAGE_V2_MAGIC",
        "segments",
        "ESPBOOTLOADER",
        "IMAGE_V2_SEGMENT",
        "segments",
        "load_segment",
        "load_file",
        "flash_mode",
        "flash_size_freq",
        "entrypoint",
        "load_common_header",
        "load_file",
        "ESPLoader",
        "ESP_IMAGE_MAGIC",
        "first_flash_mode",
        "flash_mode",
        "first_flash_mode",
        "flash_mode",
        "first_flash_size_freq",
        "flash_size_freq",
        "first_flash_size_freq",
        "flash_size_freq",
        "first_entrypoint",
        "entrypoint",
        "first_entrypoint",
        "entrypoint",
        "_",
        "xrange",
        "segments",
        "load_segment",
        "load_file",
        "read_checksum",
        "load_file",
        "input_file",
        "get_irom_segment",
        "irom_segment",
        "irom_segment",
        "addr",
        "ESP8266ROM",
        "IROM_MAP_START",
        "os",
        "path",
        "splitext",
        "input_file",
        "irom_offs",
        "ESPLoader",
        "ESP_FLASH_SECTOR",
        "filename",
        "open",
        "filename",
        "f",
        "f",
        "write",
        "pack",
        "ESPBOOTLOADER",
        "IMAGE_V2_MAGIC",
        "ESPBOOTLOADER",
        "IMAGE_V2_SEGMENT",
        "flash_mode",
        "flash_size_freq",
        "entrypoint",
        "get_irom_segment",
        "irom_segment",
        "irom_segment",
        "copy_with_new_addr",
        "save_segment",
        "f",
        "irom_segment",
        "get_non_irom_segments",
        "write_common_header",
        "f",
        "normal_segments",
        "ESPLoader",
        "ESP_CHECKSUM_MAGIC",
        "segment",
        "normal_segments",
        "save_segment",
        "f",
        "segment",
        "checksum",
        "append_checksum",
        "f",
        "checksum",
        "BaseFirmwareImage",
        "ESP32ROM",
        "load_file",
        "ESP32FirmwareImage",
        "load_file",
        "load_common_header",
        "load_file",
        "ESPLoader",
        "ESP_IMAGE_MAGIC",
        "load_file",
        "read",
        "i",
        "xrange",
        "segments",
        "load_segment",
        "load_file",
        "read_checksum",
        "load_file",
        "addr",
        "ESP32ROM",
        "IROM_MAP_START",
        "addr",
        "ESP32ROM",
        "IROM_MAP_END",
        "ESP32ROM",
        "DROM_MAP_START",
        "addr",
        "ESP32ROM",
        "DROM_MAP_END",
        "input_file",
        "os",
        "path",
        "splitext",
        "input_file",
        "offset",
        "size",
        "is_irom_segment",
        "filename",
        "open",
        "filename",
        "f",
        "write_common_header",
        "f",
        "segments",
        "f",
        "write",
        "additional_header",
        "ESPLoader",
        "ESP_CHECKSUM_MAGIC",
        "segment",
        "sorted",
        "segments",
        "key",
        "s",
        "s",
        "addr",
        "last_addr",
        "is_flash_addr",
        "last_addr",
        "is_flash_addr",
        "segment",
        "addr",
        "segment",
        "addr",
        "IROM_ALIGN",
        "last_addr",
        "IROM_ALIGN",
        "FatalError",
        "segment",
        "addr",
        "last_addr",
        "segment",
        "addr",
        "is_flash_addr",
        "segment",
        "addr",
        "segment",
        "addr",
        "IROM_ALIGN",
        "SEG_HEADER_LEN",
        "align_past",
        "SEG_HEADER_LEN",
        "segment",
        "addr",
        "IROM_ALIGN",
        "IROM_ALIGN",
        "f",
        "tell",
        "IROM_ALIGN",
        "align_past",
        "SEG_HEADER_LEN",
        "pad_len",
        "pad_len",
        "IROM_ALIGN",
        "pad_len",
        "ImageSegment",
        "pad_len",
        "f",
        "tell",
        "save_segment",
        "f",
        "checksum",
        "padding_segments",
        "f",
        "tell",
        "IROM_ALIGN",
        "segment",
        "addr",
        "IROM_ALIGN",
        "save_segment",
        "f",
        "segment",
        "checksum",
        "append_checksum",
        "f",
        "checksum",
        "f",
        "seek",
        "f",
        "write",
        "chr",
        "len",
        "segments",
        "padding_segments",
        "name",
        "name",
        "open",
        "name",
        "f",
        "_read_elf_file",
        "f",
        "section_name",
        "s",
        "sections",
        "s",
        "name",
        "section_name",
        "s",
        "ValueError",
        "section_name",
        "f",
        "entrypoint",
        "unpack",
        "f",
        "read",
        "LEN_FILE_HEADER",
        "error",
        "e",
        "FatalError",
        "name",
        "e",
        "ident",
        "ident",
        "FatalError",
        "name",
        "machine",
        "FatalError",
        "name",
        "machine",
        "_read_sections",
        "f",
        "shoff",
        "shstrndx",
        "f",
        "section_header_offs",
        "shstrndx",
        "f",
        "seek",
        "section_header_offs",
        "f",
        "read",
        "len",
        "section_header",
        "FatalError",
        "section_header_offs",
        "len",
        "section_header",
        "LEN_SEC_HEADER",
        "len",
        "section_header",
        "LEN_SEC_HEADER",
        "len",
        "section_header",
        "LEN_SEC_HEADER",
        "offs",
        "unpack_from",
        "section_header",
        "offs",
        "name_offs",
        "sec_type",
        "lma",
        "size",
        "sec_offs",
        "read_section_header",
        "offs",
        "offs",
        "section_header_offsets",
        "s",
        "s",
        "all_sections",
        "s",
        "ELFFile",
        "SEC_TYPE_PROGBITS",
        "shstrndx",
        "LEN_SEC_HEADER",
        "section_header_offsets",
        "FatalError",
        "shstrndx",
        "read_section_header",
        "shstrndx",
        "LEN_SEC_HEADER",
        "sec_type",
        "ELFFile",
        "SEC_TYPE_STRTAB",
        "sec_type",
        "f",
        "seek",
        "sec_offs",
        "f",
        "read",
        "sec_size",
        "offs",
        "string_table",
        "offs",
        "raw",
        "raw",
        "index",
        "offs",
        "size",
        "f",
        "seek",
        "offs",
        "f",
        "read",
        "size",
        "ELFSection",
        "lookup_string",
        "n_offs",
        "lma",
        "read_data",
        "offs",
        "size",
        "n_offs",
        "_type",
        "lma",
        "size",
        "offs",
        "prog_sections",
        "lma",
        "prog_sections",
        "symbols",
        "subprocess",
        "Popen",
        "tool_nm",
        "name",
        "stdout",
        "subprocess",
        "PIPE",
        "OSError",
        "tool_nm",
        "sys",
        "exit",
        "l",
        "proc",
        "stdout",
        "l",
        "strip",
        "split",
        "fields",
        "fields",
        "fields",
        "symbols",
        "fields",
        "fields",
        "ValueError",
        "FatalError",
        "fields",
        "sym",
        "_fetch_symbols",
        "symbols",
        "sym",
        "port",
        "port",
        "inWaiting",
        "port",
        "read",
        "waiting",
        "waiting",
        "read_bytes",
        "FatalError",
        "partial_packet",
        "b",
        "read_bytes",
        "partial_packet",
        "b",
        "FatalError",
        "b",
        "in_escape",
        "b",
        "partial_packet",
        "b",
        "partial_packet",
        "FatalError",
        "b",
        "b",
        "b",
        "partial_packet",
        "partial_packet",
        "b",
        "x",
        "x",
        "a",
        "b",
        "a",
        "b",
        "b",
        "f",
        "size",
        "size",
        "f",
        "tell",
        "size",
        "f",
        "seek",
        "align",
        "size",
        "size",
        "size",
        "size",
        "index",
        "size",
        "size",
        "size",
        "index",
        "FatalError",
        "size",
        "s",
        "join",
        "ord",
        "c",
        "c",
        "s",
        "hs",
        "i",
        "len",
        "hs",
        "s",
        "chr",
        "hs",
        "i",
        "hs",
        "i",
        "s",
        "RuntimeError",
        "message",
        "RuntimeError",
        "message",
        "staticmethod",
        "message",
        "result",
        "message",
        "join",
        "hex",
        "ord",
        "x",
        "x",
        "result",
        "FatalError",
        "message",
        "FatalError",
        "bootloader",
        "FatalError",
        "bootloader",
        "CHIP_NAME",
        "esp",
        "args",
        "LoadFirmwareImage",
        "esp",
        "args",
        "filename",
        "offset",
        "size",
        "data",
        "image",
        "segments",
        "size",
        "offset",
        "sys",
        "stdout",
        "flush",
        "esp",
        "mem_begin",
        "size",
        "div_roundup",
        "size",
        "esp",
        "ESP_RAM_BLOCK",
        "esp",
        "ESP_RAM_BLOCK",
        "offset",
        "len",
        "data",
        "esp",
        "mem_block",
        "data",
        "esp",
        "ESP_RAM_BLOCK",
        "seq",
        "data",
        "esp",
        "ESP_RAM_BLOCK",
        "seq",
        "image",
        "entrypoint",
        "esp",
        "mem_finish",
        "image",
        "entrypoint",
        "esp",
        "args",
        "args",
        "address",
        "esp",
        "read_reg",
        "args",
        "address",
        "esp",
        "args",
        "esp",
        "write_reg",
        "args",
        "address",
        "args",
        "value",
        "args",
        "mask",
        "args",
        "value",
        "args",
        "mask",
        "args",
        "address",
        "esp",
        "args",
        "file",
        "args",
        "filename",
        "i",
        "xrange",
        "args",
        "size",
        "esp",
        "read_reg",
        "args",
        "address",
        "i",
        "f",
        "write",
        "pack",
        "d",
        "f",
        "tell",
        "f",
        "tell",
        "f",
        "tell",
        "args",
        "size",
        "sys",
        "stdout",
        "flush",
        "esp",
        "args",
        "args",
        "flash_mode",
        "esp",
        "parse_flash_size_arg",
        "args",
        "flash_size",
        "flash_size_freq",
        "args",
        "flash_freq",
        "pack",
        "flash_mode",
        "flash_size_freq",
        "flash_size_bytes",
        "args",
        "flash_size",
        "address",
        "argfile",
        "args",
        "addr_filename",
        "argfile",
        "seek",
        "address",
        "argfile",
        "tell",
        "flash_end",
        "FatalError",
        "argfile",
        "name",
        "argfile",
        "tell",
        "address",
        "flash_end",
        "argfile",
        "seek",
        "address",
        "argfile",
        "args",
        "addr_filename",
        "argfile",
        "read",
        "address",
        "image",
        "image",
        "flash_info",
        "image",
        "hashlib",
        "md5",
        "image",
        "hexdigest",
        "len",
        "image",
        "args",
        "compress",
        "image",
        "zlib",
        "compress",
        "uncimage",
        "div_roundup",
        "len",
        "image",
        "esp",
        "FLASH_WRITE_SIZE",
        "esp",
        "flash_defl_begin",
        "len",
        "uncimage",
        "len",
        "image",
        "address",
        "div_roundup",
        "len",
        "image",
        "esp",
        "FLASH_WRITE_SIZE",
        "esp",
        "flash_begin",
        "blocks",
        "esp",
        "FLASH_WRITE_SIZE",
        "address",
        "argfile",
        "seek",
        "time",
        "time",
        "len",
        "image",
        "address",
        "seq",
        "esp",
        "FLASH_WRITE_SIZE",
        "seq",
        "blocks",
        "sys",
        "stdout",
        "flush",
        "image",
        "esp",
        "FLASH_WRITE_SIZE",
        "args",
        "compress",
        "esp",
        "flash_defl_block",
        "block",
        "seq",
        "block",
        "esp",
        "FLASH_WRITE_SIZE",
        "len",
        "block",
        "esp",
        "flash_block",
        "block",
        "seq",
        "image",
        "esp",
        "FLASH_WRITE_SIZE",
        "seq",
        "written",
        "len",
        "block",
        "time",
        "time",
        "t",
        "args",
        "compress",
        "t",
        "uncsize",
        "t",
        "uncsize",
        "written",
        "address",
        "t",
        "speed_msg",
        "t",
        "written",
        "t",
        "written",
        "address",
        "t",
        "speed_msg",
        "esp",
        "flash_md5sum",
        "address",
        "uncsize",
        "res",
        "calcmd5",
        "calcmd5",
        "res",
        "FatalError",
        "args",
        "flash_mode",
        "esp",
        "CHIP_NAME",
        "esp",
        "flash_unlock_dio",
        "esp",
        "flash_begin",
        "args",
        "compress",
        "esp",
        "flash_defl_finish",
        "esp",
        "flash_finish",
        "args",
        "verify",
        "verify_flash",
        "esp",
        "args",
        "header_block",
        "args",
        "LoadFirmwareImage",
        "args",
        "chip",
        "args",
        "filename",
        "image",
        "version",
        "image",
        "entrypoint",
        "image",
        "entrypoint",
        "len",
        "image",
        "segments",
        "seg",
        "image",
        "segments",
        "idx",
        "idx",
        "seg",
        "image",
        "calculate_checksum",
        "image",
        "checksum",
        "image",
        "checksum",
        "calc_checksum",
        "calc_checksum",
        "args",
        "ESPFirmwareImage",
        "len",
        "args",
        "segfile",
        "FatalError",
        "len",
        "args",
        "segfile",
        "len",
        "args",
        "segaddr",
        "FatalError",
        "seg",
        "addr",
        "args",
        "segfile",
        "args",
        "segaddr",
        "file",
        "seg",
        "read",
        "image",
        "segments",
        "append",
        "ImageSegment",
        "addr",
        "data",
        "args",
        "entrypoint",
        "image",
        "save",
        "args",
        "output",
        "args",
        "ELFFile",
        "args",
        "input",
        "args",
        "chip",
        "args",
        "chip",
        "args",
        "chip",
        "ESP32FirmwareImage",
        "args",
        "version",
        "ESPFirmwareImage",
        "OTAFirmwareImage",
        "e",
        "entrypoint",
        "e",
        "sections",
        "args",
        "flash_mode",
        "image",
        "ROM_LOADER",
        "FLASH_SIZES",
        "args",
        "flash_size",
        "image",
        "flash_size_freq",
        "args",
        "flash_freq",
        "args",
        "output",
        "image",
        "default_output_name",
        "args",
        "input",
        "image",
        "save",
        "args",
        "output",
        "esp",
        "args",
        "esp",
        "read_mac",
        "join",
        "x",
        "x",
        "mac",
        "esp",
        "args",
        "esp",
        "chip_id",
        "chipid",
        "esp",
        "args",
        "time",
        "time",
        "esp",
        "erase_flash",
        "time",
        "time",
        "t",
        "esp",
        "args",
        "time",
        "time",
        "esp",
        "erase_region",
        "args",
        "address",
        "args",
        "size",
        "time",
        "time",
        "t",
        "esp",
        "args",
        "esp",
        "run",
        "esp",
        "args",
        "esp",
        "flash_id",
        "flash_id",
        "flash_id",
        "flash_id",
        "esp",
        "args",
        "args",
        "no_progress",
        "progress",
        "length",
        "progress",
        "progress",
        "length",
        "len",
        "msg",
        "progress",
        "length",
        "sys",
        "stdout",
        "write",
        "msg",
        "padding",
        "sys",
        "stdout",
        "flush",
        "time",
        "time",
        "esp",
        "read_flash",
        "args",
        "address",
        "args",
        "size",
        "flash_progress",
        "time",
        "time",
        "t",
        "len",
        "data",
        "args",
        "address",
        "t",
        "len",
        "data",
        "t",
        "file",
        "args",
        "filename",
        "write",
        "data",
        "esp",
        "args",
        "flash_params",
        "address",
        "argfile",
        "args",
        "addr_filename",
        "argfile",
        "read",
        "argfile",
        "seek",
        "address",
        "image",
        "flash_params",
        "image",
        "flash_params",
        "image",
        "len",
        "image",
        "image_size",
        "image_size",
        "address",
        "argfile",
        "name",
        "esp",
        "flash_md5sum",
        "address",
        "image_size",
        "hashlib",
        "md5",
        "image",
        "hexdigest",
        "digest",
        "expected_digest",
        "getattr",
        "args",
        "esp",
        "read_flash",
        "address",
        "image_size",
        "flash",
        "image",
        "i",
        "i",
        "xrange",
        "image_size",
        "flash",
        "i",
        "image",
        "i",
        "len",
        "diff",
        "address",
        "diff",
        "d",
        "diff",
        "address",
        "d",
        "ord",
        "flash",
        "d",
        "ord",
        "image",
        "d",
        "differences",
        "FatalError",
        "esp",
        "args",
        "esp",
        "read_status",
        "args",
        "esp",
        "args",
        "args",
        "args",
        "value",
        "args",
        "fmt",
        "esp",
        "read_status",
        "args",
        "fmt",
        "args",
        "value",
        "esp",
        "write_status",
        "args",
        "value",
        "args",
        "args",
        "non_volatile",
        "fmt",
        "esp",
        "read_status",
        "args",
        "args",
        "__version__",
        "args",
        "ELFFile",
        "args",
        "input",
        "e",
        "get_symbol_addr",
        "e",
        "get_section",
        "data",
        "e",
        "get_symbol_addr",
        "e",
        "get_symbol_addr",
        "args",
        "entry",
        "e",
        "get_section",
        "data",
        "e",
        "get_symbol_addr",
        "ValueError",
        "e",
        "get_symbol_addr",
        "e",
        "get_symbol_addr",
        "bss_start",
        "ValueError",
        "e",
        "get_symbol_addr",
        "stub",
        "params_len",
        "FatalError",
        "params_len",
        "len",
        "stub",
        "stub",
        "len",
        "stub",
        "sys",
        "stderr",
        "params_len",
        "stub",
        "len",
        "stub",
        "stub",
        "bss_size",
        "bss_start",
        "len",
        "stub",
        "get",
        "stub",
        "get",
        "args",
        "entry",
        "stub",
        "stub",
        "hexify",
        "stub",
        "stub",
        "hexify",
        "stub",
        "json",
        "dumps",
        "jstub",
        "esp",
        "args",
        "esp",
        "run_custom_stub",
        "json",
        "load",
        "open",
        "args",
        "input",
        "args",
        "read_output",
        "argparse",
        "ArgumentParser",
        "description",
        "__version__",
        "prog",
        "parser",
        "add_argument",
        "help",
        "choices",
        "os",
        "environ",
        "get",
        "parser",
        "add_argument",
        "help",
        "os",
        "environ",
        "get",
        "ESPLoader",
        "DEFAULT_PORT",
        "parser",
        "add_argument",
        "help",
        "arg_auto_int",
        "os",
        "environ",
        "get",
        "ESPLoader",
        "ESP_ROM_BAUD",
        "parser",
        "add_argument",
        "help",
        "action",
        "parser",
        "add_subparsers",
        "dest",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_load_ram",
        "add_argument",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_dump_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_dump_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_dump_mem",
        "add_argument",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_read_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "subparsers",
        "add_parser",
        "help",
        "parser_write_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_write_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_write_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "parent",
        "parent",
        "add_argument",
        "help",
        "choices",
        "os",
        "environ",
        "get",
        "parent",
        "add_argument",
        "help",
        "choices",
        "os",
        "environ",
        "get",
        "parent",
        "add_argument",
        "help",
        "action",
        "FlashSizeAction",
        "os",
        "environ",
        "get",
        "parent",
        "add_argument",
        "help",
        "action",
        "parent",
        "add_argument",
        "help",
        "action",
        "subparsers",
        "add_parser",
        "help",
        "parser_write_flash",
        "add_argument",
        "metavar",
        "help",
        "action",
        "AddrFilenamePairAction",
        "add_spi_flash_subparsers",
        "parser_write_flash",
        "parser_write_flash",
        "add_argument",
        "help",
        "action",
        "parser_write_flash",
        "add_argument",
        "help",
        "action",
        "parser_write_flash",
        "add_argument",
        "help",
        "action",
        "subparsers",
        "add_parser",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_image_info",
        "add_argument",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_make_image",
        "add_argument",
        "help",
        "parser_make_image",
        "add_argument",
        "action",
        "help",
        "parser_make_image",
        "add_argument",
        "action",
        "help",
        "arg_auto_int",
        "parser_make_image",
        "add_argument",
        "help",
        "arg_auto_int",
        "subparsers",
        "add_parser",
        "help",
        "parser_elf2image",
        "add_argument",
        "help",
        "parser_elf2image",
        "add_argument",
        "help",
        "parser_elf2image",
        "add_argument",
        "help",
        "choices",
        "add_spi_flash_subparsers",
        "parser_elf2image",
        "subparsers",
        "add_parser",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_read_status",
        "add_argument",
        "help",
        "choices",
        "subparsers",
        "add_parser",
        "help",
        "parser_write_status",
        "add_argument",
        "help",
        "action",
        "parser_write_status",
        "add_argument",
        "help",
        "choices",
        "parser_write_status",
        "add_argument",
        "help",
        "arg_auto_int",
        "subparsers",
        "add_parser",
        "help",
        "parser_read_flash",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_read_flash",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_read_flash",
        "add_argument",
        "help",
        "parser_read_flash",
        "add_argument",
        "help",
        "action",
        "subparsers",
        "add_parser",
        "help",
        "parser_verify_flash",
        "add_argument",
        "help",
        "action",
        "AddrFilenamePairAction",
        "parser_verify_flash",
        "add_argument",
        "help",
        "choices",
        "subparsers",
        "add_parser",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_erase_region",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_erase_region",
        "add_argument",
        "help",
        "arg_auto_int",
        "subparsers",
        "add_parser",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_wrap_stub",
        "add_argument",
        "parser_wrap_stub",
        "add_argument",
        "subparsers",
        "add_parser",
        "help",
        "parser_run_stub",
        "add_argument",
        "parser_run_stub",
        "add_argument",
        "parser_run_stub",
        "add_argument",
        "nargs",
        "arg_auto_int",
        "operation",
        "subparsers",
        "choices",
        "keys",
        "operation",
        "globals",
        "operation",
        "parser",
        "parse_args",
        "globals",
        "args",
        "operation",
        "inspect",
        "getargspec",
        "operation_func",
        "operation_args",
        "min",
        "ESPLoader",
        "ESP_ROM_BAUD",
        "args",
        "baud",
        "ESPLoader",
        "detect_chip",
        "ESP8266ROM",
        "ESP32ROM",
        "args",
        "chip",
        "chip_constructor_fun",
        "args",
        "port",
        "initial_baud",
        "args",
        "no_stub",
        "args",
        "operation",
        "esp",
        "run_stub",
        "args",
        "baud",
        "initial_baud",
        "esp",
        "change_baud",
        "args",
        "baud",
        "hasattr",
        "args",
        "esp",
        "flash_spi_attach",
        "args",
        "ucIsHspi",
        "args",
        "ucIsLegacy",
        "esp",
        "flash_spi_attach",
        "hasattr",
        "args",
        "esp",
        "flash_set_parameters",
        "flash_size_bytes",
        "args",
        "flash_size",
        "operation_func",
        "esp",
        "args",
        "operation_func",
        "args",
        "argparse",
        "Action",
        "option_strings",
        "dest",
        "nargs",
        "kwargs",
        "FlashSizeAction",
        "option_strings",
        "dest",
        "nargs",
        "kwargs",
        "parser",
        "values",
        "option_string",
        "values",
        "values",
        "value",
        "KeyError",
        "values",
        "ESP8266ROM",
        "FLASH_SIZES",
        "known_sizes",
        "update",
        "ESP32ROM",
        "FLASH_SIZES",
        "value",
        "known_sizes",
        "argparse",
        "ArgumentError",
        "value",
        "join",
        "known_sizes",
        "keys",
        "setattr",
        "dest",
        "value",
        "argparse",
        "Action",
        "option_strings",
        "dest",
        "nargs",
        "kwargs",
        "AddrFilenamePairAction",
        "option_strings",
        "dest",
        "nargs",
        "kwargs",
        "parser",
        "values",
        "option_string",
        "i",
        "len",
        "values",
        "values",
        "i",
        "ValueError",
        "e",
        "argparse",
        "ArgumentError",
        "values",
        "i",
        "open",
        "values",
        "i",
        "IOError",
        "e",
        "argparse",
        "ArgumentError",
        "e",
        "IndexError",
        "argparse",
        "ArgumentError",
        "pairs",
        "append",
        "address",
        "argfile",
        "setattr",
        "dest",
        "pairs",
        "eval",
        "zlib",
        "decompress",
        "base64",
        "b64decode",
        "eval",
        "zlib",
        "decompress",
        "base64",
        "b64decode",
        "main",
        "FatalError",
        "e",
        "e",
        "sys",
        "exit"
    ],
    "literals": [
        "\"2.0-dev\"",
        "\"ESP32\"",
        "\"ESP8266\"",
        "\"Espressif device\"",
        "\"/dev/ttyUSB0\"",
        "'Detecting chip type... '",
        "'%s'",
        "''",
        "\"Unexpected UART datecode value 0x%08x. Failed to autodetect chip type.\"",
        "'\\xc0'",
        "'\\xdb'",
        "'\\xdb\\xdd'",
        "'\\xc0'",
        "'\\xdb\\xdc'",
        "'\\xc0'",
        "\"\"",
        "'<BBHI'",
        "'<BBHI'",
        "\"Response doesn't match request\"",
        "\"\"",
        "\"Failed to %s. Only got %d byte status response.\"",
        "'\\0'",
        "'Failed to %s'",
        "'\\x07\\x07\\x12\\x20'",
        "'\\x55'",
        "'Connecting...'",
        "'Failed to connect to %s: %s'",
        "'<I'",
        "'\\0'",
        "\"Failed to read register address %08x\"",
        "\"write target memory\"",
        "'<IIII'",
        "\"enter RAM download mode\"",
        "'<IIII'",
        "\"write to target RAM\"",
        "'<IIII'",
        "\"leave RAM download mode\"",
        "'<II'",
        "\"enter Flash download mode\"",
        "'<IIII'",
        "\"Took %.2fs to erase flash block\"",
        "\"write to target Flash after seq %d\"",
        "'<IIII'",
        "'<I'",
        "\"leave Flash mode\"",
        "b\"\"",
        "\"Flash size '%s' is not supported by this chip type. Supported sizes: %s\"",
        "\", \"",
        "'code'",
        "'code'",
        "'data'",
        "'data'",
        "'data'",
        "'num_params'",
        "'Stub requires %d params, %d provided'",
        "'num_params'",
        "'<'",
        "'I'",
        "'num_params'",
        "'code'",
        "'params_start'",
        "'data'",
        "'data_start'",
        "'data'",
        "'entry'",
        "'Stub executed, reading response:'",
        "''",
        "\"Not possible for a stub to load another stub (memory likely to overlap.)\"",
        "\"Uploading stub...\"",
        "'text'",
        "'data'",
        "\"_start\"",
        "\"Running stub...\"",
        "'entry'",
        "'OHAI'",
        "\"Failed to start stub. Unexpected response: %s\"",
        "\"Stub running...\"",
        "\"Compressed %d bytes to %d...\"",
        "\"enter compressed flash mode\"",
        "'<IIII'",
        "\"Took %.2fs to erase flash block\"",
        "\"write compressed data to flash after seq %d\"",
        "'<IIII'",
        "'<I'",
        "\"leave compressed flash mode\"",
        "'calculate md5sum'",
        "'<IIII'",
        "\"MD5Sum command returned unexpected result: %r\"",
        "\"Changing baud rate to %d\"",
        "'<II'",
        "\"Changed.\"",
        "\"erase flash\"",
        "\"Offset to erase from must be a multiple of 4096\"",
        "\"Size of data to erase must be a multiple of 4096\"",
        "\"erase region\"",
        "'<II'",
        "\"read flash\"",
        "'<IIII'",
        "''",
        "'<I'",
        "'Read more than expected'",
        "'Expected digest, got: %s'",
        "'Digest mismatch: expected %s, got %s'",
        "'<IBBBB'",
        "\"configure SPI flash pins\"",
        "\"set SPI params\"",
        "'<IIIIII'",
        "b\"\"",
        "\"Reading more than 32 bits back from a SPI flash operation is unsupported\"",
        "\"Writing more than 64 bytes of data with one SPI command is unsupported\"",
        "b'\\0'",
        "\"I\"",
        "\"SPI command did not complete in time\"",
        "\"<H\"",
        "\"B\"",
        "\"ESP8266\"",
        "'512KB'",
        "'256KB'",
        "'1MB'",
        "'2MB'",
        "'4MB'",
        "'2MB-c1'",
        "'4MB-c1'",
        "'4MB-c2'",
        "\"Unknown OUI\"",
        "\"ESP32\"",
        "'1MB'",
        "'2MB'",
        "'4MB'",
        "'8MB'",
        "'16MB'",
        "'rb'",
        "'esp32'",
        "\"Invalid image magic number: %d\"",
        "\"\\x00\"",
        "\"len 0x%05x load 0x%08x\"",
        "\" file_offs 0x%08x\"",
        "\"%s %s\"",
        "'<BBBBI'",
        "'Invalid firmware image magic=%d segments=%d'",
        "'<II'",
        "'End of file reading segment 0x%x, length %d (actual length %d)'",
        "'WARNING: Suspicious segment 0x%x, length %d'",
        "'<II'",
        "'B'",
        "'<BBBBI'",
        "'Found %d segments that could be irom0. Bad ELF file?'",
        "'-'",
        "\"%s0x%05x.bin\"",
        "\"wb\"",
        "\"%s0x00000.bin\"",
        "'wb'",
        "'Warning: V2 header has unexpected \"segment\" count %d (usually 4)'",
        "'WARNING: Flash mode value in first header (0x%02x) disagrees with second (0x%02x). Using second value.'",
        "'WARNING: Flash size/freq value in first header (0x%02x) disagrees with second (0x%02x). Using second value.'",
        "'WARNING: Entrypoint address in first header (0x%08x) disagrees with second header (0x%08x). Using second value.'",
        "\"%s-0x%05x.bin\"",
        "'wb'",
        "'<BBBBI'",
        "'\\x00'",
        "\"%s.bin\"",
        "'wb'",
        "\"Segment loaded at 0x%08x lands in same 64KB flash mapping as segment loaded at 0x%08x. \"",
        "\"Can't generate binary. Suggest changing linker script or ELF to merge sections.\"",
        "'\\x00'",
        "'rb'",
        "\"No section %s in ELF file\"",
        "\"<16sHHLLLLLHHHHHH\"",
        "\"Failed to read a valid ELF header from %s: %s\"",
        "'\\x7f'",
        "'ELF'",
        "\"%s has invalid ELF magic header\"",
        "\"%s does not appear to be an Xtensa ELF file. e_machine=%04x\"",
        "\"No section header found at offset %04x in ELF file.\"",
        "'WARNING: Unexpected ELF section header length %04x is not mod-%02x'",
        "\"<LLLLLL\"",
        "\"ELF file has no STRTAB section at shstrndx %d\"",
        "'WARNING: ELF file has incorrect STRTAB section type 0x%02x'",
        "'\\x00'",
        "\"nm\"",
        "\"Error calling %s, do you have Xtensa toolchain in PATH?\"",
        "\"U\"",
        "\"Warning: ELF binary has undefined symbol %s\"",
        "\"w\"",
        "\"Failed to strip symbol output from nm: %s\"",
        "''",
        "\"Timed out waiting for packet %s\"",
        "\"header\"",
        "\"content\"",
        "'\\xc0'",
        "\"\"",
        "'Invalid head of packet (%r)'",
        "'\\xdc'",
        "'\\xc0'",
        "'\\xdd'",
        "'\\xdb'",
        "'Invalid SLIP escape (%r%r)'",
        "'\\xdb'",
        "'\\xdb'",
        "'\\xc0'",
        "\"MB\"",
        "\"MB\"",
        "\"KB\"",
        "\"KB\"",
        "\"Unknown size %s\"",
        "''",
        "'%02X'",
        "''",
        "\" (result was %s)\"",
        "\", \"",
        "\"%s ROM does not support this function.\"",
        "'RAM boot...'",
        "'Downloading %d bytes at %08x...'",
        "'done!'",
        "'All segments done, executing at %08x'",
        "'0x%08x = 0x%08x'",
        "'Wrote %08x, mask %08x to %08x'",
        "'wb'",
        "'<I'",
        "'\\r%d bytes read... (%d %%)'",
        "'Done!'",
        "'qio'",
        "'qout'",
        "'dio'",
        "'dout'",
        "'40m'",
        "'26m'",
        "'20m'",
        "'80m'",
        "'BB'",
        "\"File %s (length %d) at offset %d will not fit in %d bytes of flash. \"",
        "\"Use --flash-size argument, or change flashing address.\"",
        "'Erasing flash...'",
        "'\\xe9'",
        "'\\rWriting at 0x%08x... (%d %%)'",
        "'\\xff'",
        "\"\"",
        "\" (effective %.1f kbit/s)\"",
        "'\\rWrote %d bytes (%d compressed) at 0x%08x in %.1f seconds%s...'",
        "\" (%.1f kbit/s)\"",
        "'\\rWrote %d bytes at 0x%08x in %.1f seconds%s...'",
        "'File  md5: %s'",
        "'Flash md5: %s'",
        "\"MD5 of file does not match data in flash!\"",
        "'Hash of data verified.'",
        "'\\nLeaving...'",
        "'dio'",
        "\"ESP8266\"",
        "'Verifying just-written flash...'",
        "'Image version: %d'",
        "'Entry point: %08x'",
        "'Entry point not set'",
        "'%d segments'",
        "'Segment %d: %r'",
        "'Checksum: %02x (%s)'",
        "'valid'",
        "'invalid - calculated %02x'",
        "'No segments specified'",
        "'Number of specified files does not match number of specified addresses'",
        "'rb'",
        "'auto'",
        "\"Creating image for ESP8266...\"",
        "'esp8266'",
        "'esp32'",
        "'1'",
        "'qio'",
        "'qout'",
        "'dio'",
        "'dout'",
        "'40m'",
        "'26m'",
        "'20m'",
        "'80m'",
        "'MAC: %s'",
        "':'",
        "'%02x'",
        "'Chip ID: 0x%08x'",
        "'Erasing flash (this may take a while)...'",
        "'Chip erase completed successfully in %.1fs'",
        "'Erasing region (may be slow depending on size)...'",
        "'Erase completed successfully in %.1f seconds.'",
        "'Manufacturer: %02x'",
        "'Device: %02x%02x'",
        "'%d (%d %%)'",
        "'\\b'",
        "'\\n'",
        "'\\rRead %d bytes at 0x%x in %.1f seconds (%.1f kbit/s)...'",
        "'wb'",
        "'\\xe9'",
        "'Verifying 0x%x (%d) bytes @ 0x%08x in flash against %s...'",
        "'-- verify OK (digest matched)'",
        "'diff'",
        "'no'",
        "'yes'",
        "'-- verify FAILED (digest mismatch)'",
        "'-- verify FAILED: %d differences, first @ 0x%08x'",
        "'   %08x %02x %02x'",
        "\"Verify failed.\"",
        "'Status value: 0x%04x'",
        "\"0x%%0%dx\"",
        "'Initial flash status: '",
        "'Setting flash status: '",
        "'After flash status:   '",
        "'params_start'",
        "'_params_start'",
        "'code'",
        "'.text'",
        "'code_start'",
        "'_code_start'",
        "'entry'",
        "'data'",
        "'.data'",
        "'data_start'",
        "'_data_start'",
        "'_bss_start'",
        "'_bss_end'",
        "'_params_end'",
        "'params_start'",
        "'Params must be dwords'",
        "'num_params'",
        "'code'",
        "'code'",
        "'code'",
        "'\\0'",
        "'Stub params: %d @ 0x%08x, code: %d @ 0x%08x, bss: %d @ 0x%08x, data: %d @ 0x%08x, entry: %s @ 0x%x'",
        "'params_start'",
        "'code'",
        "'code_start'",
        "'data'",
        "''",
        "'data_start'",
        "'entry'",
        "'code'",
        "'code'",
        "'data'",
        "'data'",
        "'data'",
        "'esptool.py v%s - ESP8266 ROM Bootloader Utility'",
        "'esptool'",
        "'--chip'",
        "'-c'",
        "'Target chip type'",
        "'auto'",
        "'esp8266'",
        "'esp31'",
        "'esp32'",
        "'ESPTOOL_CHIP'",
        "'auto'",
        "'--port'",
        "'-p'",
        "'Serial port device'",
        "'ESPTOOL_PORT'",
        "'--baud'",
        "'-b'",
        "'Serial port baud rate used when flashing/reading'",
        "'ESPTOOL_BAUD'",
        "'--no-stub'",
        "\"Disable launching the flasher stub, only talk to ROM bootloader. Some features will not be available.\"",
        "'store_true'",
        "'operation'",
        "'Run esptool {command} -h for additional help'",
        "'load_ram'",
        "'Download an image to RAM and execute'",
        "'filename'",
        "'Firmware image'",
        "'dump_mem'",
        "'Dump arbitrary memory to disk'",
        "'address'",
        "'Base address'",
        "'size'",
        "'Size of region to dump'",
        "'filename'",
        "'Name of binary dump'",
        "'read_mem'",
        "'Read arbitrary memory location'",
        "'address'",
        "'Address to read'",
        "'write_mem'",
        "'Read-modify-write to arbitrary memory location'",
        "'address'",
        "'Address to write'",
        "'value'",
        "'Value'",
        "'mask'",
        "'Mask of bits to write'",
        "'--flash_freq'",
        "'-ff'",
        "'SPI Flash frequency'",
        "'40m'",
        "'26m'",
        "'20m'",
        "'80m'",
        "'ESPTOOL_FF'",
        "'40m'",
        "'--flash_mode'",
        "'-fm'",
        "'SPI Flash mode'",
        "'qio'",
        "'qout'",
        "'dio'",
        "'dout'",
        "'ESPTOOL_FM'",
        "'qio'",
        "'--flash_size'",
        "'-fs'",
        "'SPI Flash size in MegaBytes (1MB, 2MB, 4MB, 8MB, 16M)'",
        "' plus ESP8266-only (256KB, 512KB, 2MB-c1, 4MB-c1, 4MB-2)'",
        "'ESPTOOL_FS'",
        "'1MB'",
        "'--ucIsHspi'",
        "'-ih'",
        "'Config SPI PORT/PINS (Espressif internal feature)'",
        "'store_true'",
        "'--ucIsLegacy'",
        "'-il'",
        "'Config SPI LEGACY (Espressif internal feature)'",
        "'store_true'",
        "'write_flash'",
        "'Write a binary blob to flash'",
        "'addr_filename'",
        "'<address> <filename>'",
        "'Address followed by binary filename, separated by space'",
        "'--no-progress'",
        "'-p'",
        "'Suppress progress output'",
        "\"store_true\"",
        "'--verify'",
        "'Verify just-written data (only necessary if very cautious, data is already CRCed'",
        "'store_true'",
        "'--compress'",
        "'-z'",
        "'Compress data in transfer'",
        "\"store_true\"",
        "'run'",
        "'Run application code in flash'",
        "'image_info'",
        "'Dump headers from an application image'",
        "'filename'",
        "'Image file to parse'",
        "'make_image'",
        "'Create an application image from binary files'",
        "'output'",
        "'Output image file'",
        "'--segfile'",
        "'-f'",
        "'append'",
        "'Segment input file'",
        "'--segaddr'",
        "'-a'",
        "'append'",
        "'Segment base address'",
        "'--entrypoint'",
        "'-e'",
        "'Address of entry point'",
        "'elf2image'",
        "'Create an application image from ELF file'",
        "'input'",
        "'Input ELF file'",
        "'--output'",
        "'-o'",
        "'Output filename prefix (for version 1 image), or filename (for version 2 single image)'",
        "'--version'",
        "'-e'",
        "'Output image version'",
        "'1'",
        "'2'",
        "'1'",
        "'read_mac'",
        "'Read MAC address from OTP ROM'",
        "'chip_id'",
        "'Read Chip ID from OTP ROM'",
        "'flash_id'",
        "'Read SPI flash manufacturer and device ID'",
        "'read_flash_status'",
        "'Read SPI flash status register'",
        "'--bytes'",
        "'Number of bytes to read (1-3)'",
        "'write_flash_status'",
        "'Write SPI flash status register'",
        "'--non-volatile'",
        "'Write non-volatile bits (use with caution)'",
        "'store_true'",
        "'--bytes'",
        "'Number of status bytes to write (1-3)'",
        "'value'",
        "'New value'",
        "'read_flash'",
        "'Read SPI flash content'",
        "'address'",
        "'Start address'",
        "'size'",
        "'Size of region to dump'",
        "'filename'",
        "'Name of binary dump'",
        "'--no-progress'",
        "'-p'",
        "'Suppress progress output'",
        "\"store_true\"",
        "'verify_flash'",
        "'Verify a binary blob against flash'",
        "'addr_filename'",
        "'Address and binary file to verify there, separated by space'",
        "'--diff'",
        "'-d'",
        "'Show differences'",
        "'no'",
        "'yes'",
        "'no'",
        "'erase_flash'",
        "'Perform Chip Erase on SPI flash'",
        "'erase_region'",
        "'Erase a region of the flash'",
        "'address'",
        "'Start address (must be multiple of 4096)'",
        "'size'",
        "'Size of region to erase (must be multiple of 4096)'",
        "'version'",
        "'Print esptool version'",
        "'wrap_stub'",
        "'Wrap stub and output a JSON object'",
        "'input'",
        "'--entry'",
        "'stub_main'",
        "'run_stub'",
        "'Run stub on a device'",
        "'--entry'",
        "'stub_main'",
        "'input'",
        "'params'",
        "'*'",
        "\"%s should be a module function\"",
        "'esp'",
        "'auto'",
        "'esp8266'",
        "'esp32'",
        "'run_stub'",
        "\"ucIsHspi\"",
        "\"Attaching SPI flash...\"",
        "\"flash_size\"",
        "\"Configuring flash size...\"",
        "'2m'",
        "'256KB'",
        "'4m'",
        "'512KB'",
        "'8m'",
        "'1MB'",
        "'16m'",
        "'2MB'",
        "'32m'",
        "'4MB'",
        "'16m-c1'",
        "'2MB-c1'",
        "'32m-c1'",
        "'4MB-c1'",
        "'32m-c2'",
        "'4MB-c2'",
        "\"WARNING: Flash size arguments in megabits like '%s' are deprecated.\"",
        "\"Please use the equivalent size '%s'.\"",
        "\"Megabit arguments may be removed in a future release.\"",
        "'%s is not a known flash size. Known sizes: %s'",
        "\", \"",
        "'+'",
        "'Address \"%s\" must be a number'",
        "'rb'",
        "'Must be pairs of an address and the binary filename to write there'",
        "b\"\"\"\n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\\\n\"\"\"",
        "b\"\"\"\n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\\\n\"\"\"",
        "'__main__'",
        "'\\nA fatal error occurred: %s'"
    ],
    "variables": [
        "__version__",
        "MAX_UINT32",
        "MAX_UINT24",
        "obj",
        "CHIP_NAME",
        "IS_STUB",
        "DEFAULT_PORT",
        "ESP_FLASH_BEGIN",
        "ESP_FLASH_DATA",
        "ESP_FLASH_END",
        "ESP_MEM_BEGIN",
        "ESP_MEM_END",
        "ESP_MEM_DATA",
        "ESP_SYNC",
        "ESP_WRITE_REG",
        "ESP_READ_REG",
        "ESP_SPI_SET_PARAMS",
        "ESP_SPI_ATTACH",
        "ESP_CHANGE_BAUDRATE",
        "ESP_FLASH_DEFL_BEGIN",
        "ESP_FLASH_DEFL_DATA",
        "ESP_FLASH_DEFL_END",
        "ESP_SPI_FLASH_MD5",
        "ESP_ERASE_FLASH",
        "ESP_ERASE_REGION",
        "ESP_READ_FLASH",
        "ESP_GET_FLASH_ID",
        "ESP_RAM_BLOCK",
        "ESP_FLASH_BLOCK",
        "FLASH_WRITE_SIZE",
        "ESP_ROM_BAUD",
        "ESP_IMAGE_MAGIC",
        "ESP_CHECKSUM_MAGIC",
        "ESP_FLASH_SECTOR",
        "UART_DATA_REG_ADDR",
        "IROM_MAP_START",
        "IROM_MAP_END",
        "STATUS_BYTES_LENGTH",
        "_port",
        "_port",
        "_slip_reader",
        "baudrate",
        "detect_port",
        "date_reg",
        "inst",
        "r",
        "buf",
        "pkt",
        "p",
        "resp",
        "op_ret",
        "len_ret",
        "val",
        "data",
        "val",
        "data",
        "status_bytes",
        "_slip_reader",
        "timeout",
        "last_exception",
        "timeout",
        "last_exception",
        "val",
        "data",
        "old_tmo",
        "num_blocks",
        "erase_size",
        "timeout",
        "t",
        "timeout",
        "pkt",
        "SPIFLASH_RDID",
        "length",
        "blocks",
        "from_offs",
        "to_offs",
        "stub",
        "stub",
        "stub",
        "pc",
        "p",
        "stub",
        "p",
        "old_tmo",
        "num_blocks",
        "erase_blocks",
        "timeout",
        "t",
        "timeout",
        "pkt",
        "in_bootloader",
        "res",
        "baudrate",
        "oldtimeout",
        "timeout",
        "timeout",
        "data",
        "p",
        "digest_frame",
        "expected_digest",
        "digest",
        "arg",
        "fl_id",
        "total_size",
        "block_size",
        "sector_size",
        "page_size",
        "status_mask",
        "SPI_USR_COMMAND",
        "SPI_USR_MISO",
        "SPI_USR_MOSI",
        "SPI_CMD_REG",
        "SPI_USR_REG",
        "SPI_USR1_REG",
        "SPI_USR2_REG",
        "SPI_W0_REG",
        "SPI_MOSI_DLEN_REG",
        "SPI_MISO_DLEN_REG",
        "SPI_DATA_LEN_REG",
        "SPI_MOSI_BITLEN_S",
        "SPI_MISO_BITLEN_S",
        "mosi_mask",
        "miso_mask",
        "SPI_CMD_USR",
        "SPI_USR2_DLEN_SHIFT",
        "data_bits",
        "flags",
        "words",
        "next_reg",
        "status",
        "SPIFLASH_RDSR",
        "SPIFLASH_RDSR2",
        "SPIFLASH_RDSR3",
        "status",
        "shift",
        "SPIFLASH_WRSR",
        "SPIFLASH_WRSR2",
        "SPIFLASH_WRSR3",
        "SPIFLASH_WEVSR",
        "SPIFLASH_WREN",
        "SPIFLASH_WRDI",
        "enable_cmd",
        "CHIP_NAME",
        "IS_STUB",
        "DATE_REG_VALUE",
        "ESP_OTP_MAC0",
        "ESP_OTP_MAC1",
        "ESP_OTP_MAC3",
        "SPI_REG_BASE",
        "SPI_W0_OFFS",
        "SPI_HAS_MOSI_DLEN_REG",
        "FLASH_SIZES",
        "id0",
        "id1",
        "mac0",
        "mac1",
        "mac3",
        "oui",
        "oui",
        "oui",
        "sectors_per_block",
        "sector_size",
        "num_sectors",
        "start_sector",
        "head_sectors",
        "head_sectors",
        "FLASH_WRITE_SIZE",
        "IS_STUB",
        "_port",
        "ESP8266ROM",
        "STUB_CLASS",
        "CHIP_NAME",
        "IS_STUB",
        "DATE_REG_VALUE",
        "IROM_MAP_START",
        "IROM_MAP_END",
        "DROM_MAP_START",
        "DROM_MAP_END",
        "STATUS_BYTES_LENGTH",
        "SPI_REG_BASE",
        "EFUSE_REG_BASE",
        "SPI_W0_OFFS",
        "SPI_HAS_MOSI_DLEN_REG",
        "FLASH_SIZES",
        "word16",
        "word17",
        "word16",
        "word17",
        "word18",
        "word19",
        "wifi_mac",
        "bt_mac",
        "FLASH_WRITE_SIZE",
        "STATUS_BYTES_LENGTH",
        "IS_STUB",
        "_port",
        "ESP32ROM",
        "STUB_CLASS",
        "IMAGE_V2_MAGIC",
        "IMAGE_V2_SEGMENT",
        "magic",
        "addr",
        "pad_mod",
        "data",
        "file_offs",
        "include_in_checksum",
        "r",
        "name",
        "SEG_HEADER_LEN",
        "segments",
        "entrypoint",
        "magic",
        "segments",
        "file_offs",
        "offset",
        "size",
        "segment_data",
        "segment",
        "checksum",
        "checksum",
        "irom_segments",
        "irom_segment",
        "ROM_LOADER",
        "flash_mode",
        "flash_size_freq",
        "version",
        "segments",
        "checksum",
        "irom_segment",
        "normal_segments",
        "checksum",
        "checksum",
        "ROM_LOADER",
        "version",
        "segments",
        "irom_segment",
        "irom_segment",
        "addr",
        "irom_segment",
        "include_in_checksum",
        "first_flash_mode",
        "first_flash_size_freq",
        "first_entrypoint",
        "segments",
        "checksum",
        "irom_segment",
        "irom_offs",
        "irom_offs",
        "irom_segment",
        "irom_segment",
        "normal_segments",
        "checksum",
        "checksum",
        "ROM_LOADER",
        "flash_mode",
        "flash_size_freq",
        "version",
        "additional_header",
        "segments",
        "additional_header",
        "checksum",
        "padding_segments",
        "checksum",
        "last_addr",
        "IROM_ALIGN",
        "last_addr",
        "align_past",
        "pad_len",
        "checksum",
        "checksum",
        "SEC_TYPE_PROGBITS",
        "SEC_TYPE_STRTAB",
        "name",
        "symbols",
        "LEN_FILE_HEADER",
        "ident",
        "_type",
        "machine",
        "_version",
        "_phoff",
        "shoff",
        "_flags",
        "_ehsize",
        "_phentsize",
        "_phnum",
        "_shentsize",
        "_shnum",
        "shstrndx",
        "section_header",
        "LEN_SEC_HEADER",
        "section_header_offsets",
        "name_offs",
        "sec_type",
        "_flags",
        "lma",
        "sec_offs",
        "size",
        "all_sections",
        "prog_sections",
        "_",
        "sec_type",
        "_",
        "sec_size",
        "sec_offs",
        "string_table",
        "raw",
        "prog_sections",
        "sections",
        "symbols",
        "tool_nm",
        "proc",
        "fields",
        "partial_packet",
        "in_escape",
        "waiting",
        "read_bytes",
        "partial_packet",
        "in_escape",
        "in_escape",
        "partial_packet",
        "align",
        "s",
        "image",
        "seq",
        "data",
        "f",
        "d",
        "flash_mode",
        "flash_size_freq",
        "flash_info",
        "flash_end",
        "image",
        "image",
        "calcmd5",
        "uncsize",
        "uncimage",
        "image",
        "blocks",
        "blocks",
        "seq",
        "written",
        "t",
        "header_block",
        "block",
        "block",
        "image",
        "t",
        "speed_msg",
        "speed_msg",
        "speed_msg",
        "res",
        "image",
        "idx",
        "calc_checksum",
        "image",
        "data",
        "image",
        "entrypoint",
        "e",
        "image",
        "image",
        "image",
        "image",
        "entrypoint",
        "image",
        "segments",
        "image",
        "flash_mode",
        "image",
        "flash_size_freq",
        "args",
        "output",
        "mac",
        "chipid",
        "t",
        "t",
        "flash_id",
        "flash_progress",
        "msg",
        "padding",
        "padding",
        "t",
        "data",
        "t",
        "differences",
        "image",
        "image",
        "image_size",
        "digest",
        "expected_digest",
        "differences",
        "flash",
        "diff",
        "fmt",
        "args",
        "value",
        "e",
        "stub",
        "stub",
        "stub",
        "bss_size",
        "bss_start",
        "bss_start",
        "bss_size",
        "params_len",
        "stub",
        "jstub",
        "jstub",
        "jstub",
        "parser",
        "subparsers",
        "parser_load_ram",
        "parser_dump_mem",
        "parser_read_mem",
        "parser_write_mem",
        "parser_write_flash",
        "parser_image_info",
        "parser_make_image",
        "parser_elf2image",
        "parser_read_status",
        "parser_write_status",
        "parser_read_flash",
        "parser_verify_flash",
        "parser_erase_region",
        "parser_wrap_stub",
        "parser_run_stub",
        "args",
        "operation_func",
        "operation_args",
        "_",
        "_",
        "_",
        "initial_baud",
        "chip_constructor_fun",
        "esp",
        "esp",
        "value",
        "value",
        "known_sizes",
        "pairs",
        "address",
        "argfile",
        "ESP8266ROM",
        "STUB_CODE",
        "ESP32ROM",
        "STUB_CODE"
    ],
    "comments": [
        "!/usr/bin/env python",
        "NB: Before sending a PR to change the above line to '#!/usr/bin/env python2', please read https://github.com/themadinventor/esptool/issues/21",
        "",
        "ESP8266 & ESP32 ROM Bootloader Utility",
        "https://github.com/themadinventor/esptool",
        "",
        "Copyright (C) 2014-2016 Fredrik Ahlberg, Angus Gratton, Espressif Systems (Shanghai) PTE LTD, other contributors as noted.",
        "",
        "This program is free software; you can redistribute it and/or modify it under",
        "the terms of the GNU General Public License as published by the Free Software",
        "Foundation; either version 2 of the License, or (at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful, but WITHOUT",
        "ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS",
        "FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License along with",
        "this program; if not, write to the Free Software Foundation, Inc., 51 Franklin",
        "Street, Fifth Floor, Boston, MA 02110-1301 USA.",
        "Commands supported by ESP8266 ROM bootloader",
        "Some comands supported by ESP32 ROM bootloader (or -8266 w/ stub)",
        "Some commands supported by stub only",
        "Maximum block sized for RAM and Flash writes, respectively.",
        "Default baudrate. The ROM auto-bauds, so we can use more or less whatever we want.",
        "First byte of the application image",
        "Initial state for the checksum routine",
        "Flash sector size, minimum unit of erase.",
        "Memory addresses",
        "The number of bytes in the UART response that signify command status",
        "setting baud rate in a separate step is a workaround for",
        "CH341 driver on some Linux versions (this opens at 9600 then",
        "sets), shouldn't matter for other platforms/drivers. See",
        "https://github.com/themadinventor/esptool/issues/44#issuecomment-107094446",
        "don't connect a second time",
        "tries to get a response until that response has the",
        "same operation as the request or a retries limit has",
        "exceeded. This is needed for some esp8266s that",
        "reply with more sync responses than expected.",
        "things are a bit weird here, bear with us",
        "the status bytes are the last 2/4 bytes in the data (depending on chip)",
        "we only care if the first one is non-zero. If it is, the second byte is a reason.",
        "if we had more data than just the status bytes, return it as the result",
        "(this is used by the md5sum command, maybe other commands?)",
        "otherwise, just return the 'val' field which comes from the reply header (this is used by read_reg)",
        "issue reset-to-bootloader:",
        "RTS = either CH_PD or nRESET (both active low = chip in reset)",
        "DTR = GPIO0 (active low = boot to flasher)",
        "we don't call check_command here because read_reg() function is called",
        "when detecting chip type, and the way we check for success (STATUS_BYTES_LENGTH) is different",
        "for different chip types (!)",
        "Fake flash begin immediately followed by flash end",
        "Enable flash write mode",
        "Reset the chip rather than call flash_finish(), which would have",
        "write protected the chip again (why oh why does it do that?!)",
        "Upload",
        "Upload",
        "(stub erases as it writes, but ROM loaders erase on begin)",
        "the MD5 command returns additional bytes in the standard",
        "command reply slot",
        "already hex formatted",
        "get rid of crap sent during baud rate change",
        "depending on flash chip model the erase may take this long (maybe longer!)",
        "issue a standard bootloader command to trigger the read",
        "now we expect (length / block_size) SLIP frames with the data",
        "last 3 bytes in ESP_SPI_ATTACH argument are reserved values",
        "SPI_USR register flags",
        "SPI registers, base address differs ESP32 vs 8266",
        "following two registers are ESP32 only",
        "ESP32 has a more sophisticated wayto set up \"user\" commands",
        "SPI peripheral \"command\" bitmasks for SPI_CMD_REG",
        "shift values",
        "clear data register before we read it",
        "pad to 32-bit multiple",
        "try using a 16-bit WRSR (not supported by all chips)",
        "this may be redundant, but shouldn't hurt",
        "also try using individual commands (also not supported by all chips for num_bytes 2 & 3)",
        "OTP ROM addresses",
        "not implemented in ROM, but OK to silently skip",
        "not implemented in ROM, but OK to silently skip",
        "matches MAX_WRITE_BLOCK in stub_loader.c",
        "resets _slip_reader",
        "ESP32 uses a 4 byte status reply",
        "matches MAX_WRITE_BLOCK in stub_loader.c",
        "same as ESP8266, different to ESP32 ROM",
        "resets _slip_reader",
        "First byte of the \"v2\" application image",
        "First 'segment' value in a \"v2\" application image, appears to be a constant version value?",
        "Otherwise, ESP8266 so look at magic to determine the image type",
        "pad all ImageSegments to at least 4 bytes length",
        "Skip the padding. The checksum is stored in the last byte so that the",
        "file is a multiple of 16 bytes.",
        "IROM data goes in its own plain binary file",
        "everything but IROM goes at 0x00000 in an image file",
        "segment count is not really segment count here, but we expect to see '4'",
        "irom segment comes before the second header",
        "",
        "the file is saved in the image with a zero load address",
        "in the header, so we need to calculate a load address",
        "for actual mapped addr, add ESP8266ROM.IROM_MAP_START + flashing_Addr + 8",
        "load the second header",
        "load all the usual segments",
        "Save first header for irom0 segment",
        "save irom0 segment, make sure it has load addr 0 in the file",
        "second header, matches V1 header and contains loadable segments",
        "TODO: add warnings for ESP32 segment offset/size combinations that are wrong",
        "IROM/DROM segment flash mappings need to align on",
        "64kB boundaries.",
        "",
        "TODO: intelligently order segments to reduce wastage",
        "by squeezing smaller DRAM/IRAM segments into the",
        "64kB padding space.",
        "check for multiple ELF sections that live in the same flash mapping region.",
        "this is usually a sign of a broken linker script, but if you have a legitimate",
        "use case then let us know (we can merge segments here, but as a rule you probably",
        "want to merge them in your linker script.)",
        "Actual alignment required for the segment header: positioned so that",
        "after we write the next 8 byte header, file_offs % IROM_ALIGN == segment.addr % IROM_ALIGN",
        "",
        "(this is because the segment's vaddr may not be IROM_ALIGNed, more likely is aligned",
        "IROM_ALIGN+0x10 to account for longest possible header.",
        "subtract SEG_HEADER_LEN a second time, as the padding block has a header as well",
        "verify that after the 8 byte header is added, were are at the correct offset relative to the segment's vaddr",
        "kinda hacky: go back to the initial header and write the new segment count",
        "that includes padding segments. Luckily(?) this header is not checksummed",
        "Load sections from the ELF file",
        "read the ELF file header",
        "walk through the section header and extract all sections",
        "search for the string table section",
        "build the real list of ELFSections by reading the actual section names from the",
        "string table section, and actual data for each section from the ELF file itself",
        "can skip weak symbols",
        "waiting for packet header",
        "part-way through escape sequence",
        "start of escape sequence",
        "end of packet",
        "normal byte in packet",
        "\"Operation\" commands, executable at command line. One function each",
        "",
        "Each function takes either two args (<ESPLoader instance>, <args>) or a single <args>",
        "argument.",
        "verify file sizes fit in flash",
        "seek to end",
        "Update header with flash parameters",
        "in case we need it again",
        "Pad the last block",
        "Default to ESP8266 for backwards compatibility",
        "ESP8266",
        "ELFSection is a subclass of ImageSegment",
        "rewind in case we need it again",
        "Try digest first, only read if there are differences.",
        "No data section, that's fine",
        "Pad code with NOPs to mod 4.",
        "",
        "End of operations functions",
        "",
        "internal sanity check - every operation matches a module function of the same name",
        "operation function can take 1 arg (args), 2 args (esp, arg)",
        "or be a member function of the ESPLoader class.",
        "operation function takes an ESPLoader connection object",
        "don't sync faster than the default baud rate",
        "TODO: handle a NotImplementedInROMError",
        "override common SPI flash parameter stuff as required",
        "validate pair arguments",
        "Binary stub code (see flasher_stub dir for source & details)"
    ],
    "docstrings": [
        "\"\"\"\n    Decorator implementation that wraps a check around an ESPLoader\n    bootloader function to check if it's supported.\n\n    This is used to capture the multidimensional differences in\n    functionality between the ESP8266 & ESP32 ROM loaders, and the\n    software stub that runs on both. Not possible to do this cleanly\n    via inheritance alone.\n    \"\"\"",
        "\"\"\" Attribute for a function only supported in the software stub loader \"\"\"",
        "\"\"\" Attribute for a function only supported by software stubs or ESP32 ROM \"\"\"",
        "\"\"\" Attribute for a function only supported on ESP8266 \"\"\"",
        "\"\"\" Base class providing access to ESP ROM & softtware stub bootloaders.\n    Subclasses provide ESP8266 & ESP32 specific functionality.\n\n    Don't instantiate this base class directly, either instantiate a subclass or\n    call ESPLoader.detect_chip() which will interrogate the chip and return the\n    appropriate subclass instance.\n\n    \"\"\"",
        "\"\"\"Base constructor for ESPLoader bootloader interaction\n\n        Don't call this constructor, either instantiate ESP8266ROM\n        or ESP32ROM, or use ESPLoader.detect_chip().\n\n        This base class has all of the instance methods for bootloader\n        functionality supported across various chips & stub\n        loaders. Subclasses replace the functions they don't support\n        with ones which throw NotImplementedInROMError().\n\n        \"\"\"",
        "\"\"\"Use serial access to detect the chip type.\n\n        We use the UART's datecode register for this, it's mapped at\n        the same address on ESP8266 & ESP32 so we can use one\n        memory read and compare to the datecode register for each chip\n        type.\n\n        \"\"\"",
        "\"\"\" Read a SLIP packet from the serial port \"\"\"",
        "\"\"\" Write bytes to the serial port while performing SLIP escaping \"\"\"",
        "\"\"\" Calculate checksum of a blob, as it is defined by the ROM \"\"\"",
        "\"\"\" Send a request and read the response \"\"\"",
        "\"\"\"\n        Execute a command with 'command', check the result code and throw an appropriate\n        FatalError if it fails.\n\n        Returns the \"result\" of a successful command.\n        \"\"\"",
        "\"\"\" Perform a connection test \"\"\"",
        "\"\"\" Try connecting repeatedly until successful, or giving up \"\"\"",
        "\"\"\" Read memory address in target \"\"\"",
        "\"\"\" Write to memory address in target \"\"\"",
        "\"\"\" Start downloading an application image to RAM \"\"\"",
        "\"\"\" Send a block of an image to RAM \"\"\"",
        "\"\"\" Leave download mode and run the application \"\"\"",
        "\"\"\" Start downloading to Flash (performs an erase) \"\"\"",
        "\"\"\" Write block to flash \"\"\"",
        "\"\"\" Leave flash mode and run/reboot \"\"\"",
        "\"\"\" Run application code in flash \"\"\"",
        "\"\"\" Read SPI flash manufacturer and device id \"\"\"",
        "\"\"\" Abuse the loader protocol to force flash to be left in write mode \"\"\"",
        "\"\"\" Start downloading compressed data to Flash (performs an erase) \"\"\"",
        "\"\"\" Write block to flash, send compressed \"\"\"",
        "\"\"\" Leave compressed flash mode and run/reboot \"\"\"",
        "\"\"\"Send SPI attach command to enable the SPI flash pins\n\n        ESP8266 ROM does this when you send flash_begin, ESP32 ROM\n        has it as a SPI command.\n        \"\"\"",
        "\"\"\"Tell the ESP bootloader the parameters of the chip\n\n        Corresponds to the \"flashchip\" data structure that the ROM\n        has in RAM.\n\n        'size' is in bytes.\n\n        All other flash parameters are currently hardcoded (on ESP8266\n        these are mostly ignored by ROM code, on ESP32 I'm not sure.)\n        \"\"\"",
        "\"\"\"Run an arbitrary SPI flash command.\n\n        This function uses the \"USR_COMMAND\" functionality in the ESP\n        SPI hardware, rather than the precanned commands supported by\n        hardware. So the value of spiflash_command is an actual command\n        byte, sent over the wire.\n\n        After writing command byte, writes 'data' to MOSI and then\n        reads back 'read_bits' of reply on MISO. Result is a number.\n        \"\"\"",
        "\"\"\"Read up to 24 bits (num_bytes) of SPI flash status register contents\n        via RDSR, RDSR2, RDSR3 commands\n\n        Not all SPI flash supports all three commands. The upper 1 or 2\n        bytes may be 0xFF.\n        \"\"\"",
        "\"\"\"Write up to 24 bits (num_bytes) of new status register\n\n        num_bytes can be 1, 2 or 3.\n\n        Not all flash supports the additional commands to write the\n        second and third byte of the status register. When writing 2\n        bytes, esptool also sends a 16-byte WRSR command (as some\n        flash types use this instead of WRSR2.)\n\n        If the set_non_volatile flag is set, non-volatile bits will\n        be set as well as volatile ones (WREN used instead of WEVSR).\n\n        \"\"\"",
        "\"\"\" Access class for ESP8266 ROM bootloader\n    \"\"\"",
        "\"\"\" Read Chip ID from OTP ROM - see http://esp8266-re.foogod.com/wiki/System_get_chip_id_%28IoT_RTOS_SDK_0.9.9%29 \"\"\"",
        "\"\"\" Read MAC from OTP ROM \"\"\"",
        "\"\"\" Calculate an erase size given a specific size in bytes.\n\n        Provides a workaround for the bootloader erase bug.\"\"\"",
        "\"\"\" Access class for ESP8266 stub loader, runs on top of ROM.\n    \"\"\"",
        "\"\"\"Access class for ESP32 ROM bootloader\n\n    \"\"\"",
        "\"\"\" Read the nth word of the ESP3x EFUSE region. \"\"\"",
        "\"\"\" Read MAC from EFUSE region \"\"\"",
        "\"\"\" Access class for ESP32 stub loader, runs on top of ROM.\n    \"\"\"",
        "\"\"\" These are constants related to software ESP bootloader, working with 'v2' image files \"\"\"",
        "\"\"\" Load a firmware image. Can be for ESP8266 or ESP32. ESP8266 images will be examined to determine if they are\n        original ROM firmware images (ESPFirmwareImage) or \"v2\" OTA bootloader images.\n\n        Returns a BaseFirmwareImage subclass, either ESPFirmwareImage (v1) or OTAFirmwareImage (v2).\n    \"\"\"",
        "\"\"\" Wrapper class for a segment in an ESP image\n    (very similar to a section in an ELFImage also) \"\"\"",
        "\"\"\" Return a new ImageSegment with same data, but mapped at\n        a new address. \"\"\"",
        "\"\"\" Wrapper class for a section in an ELF image, has a section\n    name as well as the common properties of an ImageSegment. \"\"\"",
        "\"\"\" Base class with common firmware image functions \"\"\"",
        "\"\"\" Load the next segment from the image file \"\"\"",
        "\"\"\" Save the next segment to the image file, return next checksum value if provided \"\"\"",
        "\"\"\" Return ESPLoader checksum from end of just-read image \"\"\"",
        "\"\"\" Calculate checksum of loaded image, based on segments in\n        segment array.\n        \"\"\"",
        "\"\"\" Append ESPLoader checksum to the just-written image \"\"\"",
        "\"\"\" Returns True if an address starts in the irom region.\n        Valid for ESP8266 only.\n        \"\"\"",
        "\"\"\" 'Version 1' firmware image, segments loaded directly by the ROM bootloader. \"\"\"",
        "\"\"\" Derive a default output name from the ELF name. \"\"\"",
        "\"\"\" Save a set of V1 images for flashing. Parameter is a base filename. \"\"\"",
        "\"\"\" 'Version 2' firmware image, segments loaded by software bootloader stub\n        (ie Espressif bootloader or rboot)\n    \"\"\"",
        "\"\"\" Derive a default output name from the ELF name. \"\"\"",
        "\"\"\" ESP32 firmware image is very similar to V1 ESP8266 image,\n    except with an additional 16 byte reserved header at top of image,\n    and because of new flash mapping capabilities the flash-mapped regions\n    can be placed in the normal image (just @ 64kB padded offsets).\n    \"\"\"",
        "\"\"\" Derive a default output name from the ELF name. \"\"\"",
        "\"\"\"Generator to read SLIP packets from a serial port.\n    Yields one full SLIP packet at a time, raises exception on timeout or invalid data.\n\n    Designed to avoid too many calls to serial.read(1), which can bog\n    down on slow systems.\n    \"\"\"",
        "\"\"\" Return a/b rounded up to nearest integer,\n    equivalent result to int(math.ceil(float(int(a)) / float(int(b))), only\n    without possible floating point accuracy errors.\n    \"\"\"",
        "\"\"\" Align the position in the file to the next block of specified size \"\"\"",
        "\"\"\" Given a flash size of the type passed in args.flash_size\n    (ie 512KB or 1MB) then return the size in bytes.\n    \"\"\"",
        "\"\"\"\n    Wrapper class for runtime errors that aren't caused by internal bugs, but by\n    ESP8266 responses or input content.\n    \"\"\"",
        "\"\"\"\n        Return a fatal error object that appends the hex values of\n        'result' as a string formatted argument.\n        \"\"\"",
        "\"\"\"\n    Wrapper class for the error thrown when a particular ESP bootloader function\n    is not implemented in the ROM bootloader.\n    \"\"\"",
        "\"\"\"Write data to flash\n    \"\"\"",
        "\"\"\" Add common parser arguments for SPI flash properties \"\"\"",
        "\"\"\" Custom flash size parser class to support backwards compatibility with megabit size arguments.\n\n    (At next major relase, remove deprecated sizes and this can become a 'normal' choices= argument again.)\n    \"\"\"",
        "\"\"\" Custom parser class for the address/filename pairs passed as arguments \"\"\""
    ],
    "functions": [
        "check_supported_function",
        "inner",
        "stub_function_only",
        "stub_and_esp32_function_only",
        "esp8266_function_only",
        "detect_chip",
        "read",
        "write",
        "checksum",
        "command",
        "check_command",
        "flush_input",
        "sync",
        "connect",
        "read_reg",
        "write_reg",
        "mem_begin",
        "mem_block",
        "mem_finish",
        "flash_begin",
        "flash_block",
        "flash_finish",
        "run",
        "flash_id",
        "parse_flash_size_arg",
        "flash_unlock_dio",
        "_upload_ram",
        "run_custom_stub",
        "run_stub",
        "flash_defl_begin",
        "flash_defl_block",
        "flash_defl_finish",
        "flash_md5sum",
        "change_baud",
        "erase_flash",
        "erase_region",
        "read_flash",
        "flash_spi_attach",
        "flash_set_parameters",
        "run_spiflash_command",
        "set_data_lengths",
        "set_data_lengths",
        "wait_done",
        "read_status",
        "write_status",
        "flash_spi_attach",
        "flash_set_parameters",
        "chip_id",
        "read_mac",
        "get_erase_size",
        "read_efuse",
        "chip_id",
        "read_mac",
        "get_erase_size",
        "LoadFirmwareImage",
        "copy_with_new_addr",
        "__repr__",
        "__repr__",
        "load_common_header",
        "load_segment",
        "warn_if_unusual_segment",
        "save_segment",
        "read_checksum",
        "calculate_checksum",
        "append_checksum",
        "write_common_header",
        "is_irom_addr",
        "get_irom_segment",
        "get_non_irom_segments",
        "default_output_name",
        "save",
        "default_output_name",
        "save",
        "is_flash_addr",
        "default_output_name",
        "warn_if_unusual_segment",
        "save",
        "get_section",
        "_read_elf_file",
        "_read_sections",
        "read_section_header",
        "lookup_string",
        "read_data",
        "_fetch_symbols",
        "get_symbol_addr",
        "slip_reader",
        "arg_auto_int",
        "div_roundup",
        "align_file_position",
        "flash_size_bytes",
        "hexify",
        "unhexify",
        "WithResult",
        "load_ram",
        "read_mem",
        "write_mem",
        "dump_mem",
        "write_flash",
        "image_info",
        "make_image",
        "elf2image",
        "read_mac",
        "chip_id",
        "erase_flash",
        "erase_region",
        "run",
        "flash_id",
        "read_flash",
        "flash_progress",
        "verify_flash",
        "read_flash_status",
        "write_flash_status",
        "version",
        "wrap_stub",
        "run_stub",
        "main",
        "add_spi_flash_subparsers",
        "__call__",
        "__call__"
    ],
    "classes": [
        "ESPLoader",
        "ESP8266ROM",
        "ESP8266StubLoader",
        "ESP32ROM",
        "ESP32StubLoader",
        "ESPBOOTLOADER",
        "ImageSegment",
        "ELFSection",
        "BaseFirmwareImage",
        "ESPFirmwareImage",
        "OTAFirmwareImage",
        "ESP32FirmwareImage",
        "ELFFile",
        "FatalError",
        "NotImplementedInROMError",
        "FlashSizeAction",
        "AddrFilenamePairAction"
    ]
}