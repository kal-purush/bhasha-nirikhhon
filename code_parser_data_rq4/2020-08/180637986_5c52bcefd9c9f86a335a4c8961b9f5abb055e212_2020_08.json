{
    "identifiers": [
        "matplotlib",
        "pyplot",
        "plt",
        "numpy",
        "np",
        "model",
        "X",
        "y",
        "cmap",
        "plt",
        "cm",
        "jet",
        "X",
        "min",
        "X",
        "max",
        "X",
        "min",
        "X",
        "max",
        "np",
        "meshgrid",
        "np",
        "arange",
        "x_min",
        "x_max",
        "h",
        "np",
        "arange",
        "y_min",
        "y_max",
        "h",
        "model",
        "np",
        "c_",
        "xx",
        "ravel",
        "yy",
        "ravel",
        "Z",
        "reshape",
        "xx",
        "shape",
        "plt",
        "contourf",
        "xx",
        "yy",
        "Z",
        "cmap",
        "plt",
        "cm",
        "Spectral",
        "plt",
        "ylabel",
        "plt",
        "xlabel",
        "plt",
        "style",
        "use",
        "plt",
        "scatter",
        "X",
        "X",
        "c",
        "y",
        "cmap",
        "plt",
        "cm",
        "jet",
        "itertools",
        "cm",
        "classes",
        "normalize",
        "title",
        "cmap",
        "plt",
        "cm",
        "Blues",
        "normalize",
        "cm",
        "astype",
        "cm",
        "sum",
        "axis",
        "np",
        "newaxis",
        "cm",
        "plt",
        "imshow",
        "cm",
        "interpolation",
        "cmap",
        "cmap",
        "plt",
        "title",
        "title",
        "plt",
        "colorbar",
        "np",
        "arange",
        "len",
        "classes",
        "plt",
        "xticks",
        "tick_marks",
        "classes",
        "rotation",
        "plt",
        "yticks",
        "tick_marks",
        "classes",
        "normalize",
        "cm",
        "max",
        "i",
        "j",
        "itertools",
        "product",
        "cm",
        "shape",
        "cm",
        "shape",
        "plt",
        "text",
        "j",
        "i",
        "format",
        "cm",
        "i",
        "j",
        "fmt",
        "horizontalalignment",
        "color",
        "cm",
        "i",
        "j",
        "thresh",
        "plt",
        "ylabel",
        "plt",
        "xlabel",
        "plt",
        "tight_layout"
    ],
    "literals": [
        "'x2'",
        "'x1'",
        "\"seaborn\"",
        "'Confusion matrix'",
        "'float'",
        "\"Normalized confusion matrix\"",
        "'Confusion matrix, without normalization'",
        "'nearest'",
        "'.2f'",
        "'d'",
        "\"center\"",
        "\"white\"",
        "\"black\"",
        "'True label'",
        "'Predicted label'"
    ],
    "variables": [
        "x_min",
        "x_max",
        "y_min",
        "y_max",
        "h",
        "xx",
        "yy",
        "Z",
        "Z",
        "cm",
        "tick_marks",
        "fmt",
        "thresh"
    ],
    "comments": [
        "Set min and max values and give it some padding",
        "Generate a grid of points with distance h between them",
        "Predict the function value for the whole grid",
        "Plot the contour and training examples"
    ],
    "docstrings": [
        "\"\"\"\n    Given a model(a function) and a set of points(X), corresponding labels(y), scatter the points in X with color coding\n    according to y. Also use the model to predict the label at grid points to get the region for each label, and thus the \n    descion boundary.\n    Example usage:\n    say we have a function predict(x,other params) which makes 0/1 prediction for point x and we want to plot\n    train set then call as:\n    plot_decision_boundary(lambda x:predict(x,other params),X_train,Y_train)\n    params(3): \n        model : a function which expectes the point to make 0/1 label prediction\n        X : a (mx2) numpy array with the points\n        y : a (mx1) numpy array with labels\n    outputs(None)\n    \"\"\"",
        "\"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\""
    ],
    "functions": [
        "plot_decision_boundary",
        "plot_confusion_matrix"
    ],
    "classes": []
}