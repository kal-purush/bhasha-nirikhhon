{
    "identifiers": [
        "describe",
        "it",
        "chai",
        "spawnTsNodeDev",
        "scriptsDir",
        "tmpDir",
        "turnOnOutput",
        "fs",
        "join",
        "touch",
        "process",
        "turnOnOutput",
        "replaceText",
        "script",
        "pattern",
        "replace",
        "join",
        "scriptsDir",
        "script",
        "fs",
        "textFile",
        "fs",
        "textFile",
        "text",
        "pattern",
        "replace",
        "writeFile",
        "script",
        "text",
        "join",
        "scriptsDir",
        "script",
        "fs",
        "textFile",
        "text",
        "removeFile",
        "script",
        "join",
        "scriptsDir",
        "script",
        "fs",
        "textFile",
        "waitFor",
        "timeout",
        "resolve",
        "setTimeout",
        "resolve",
        "timeout",
        "fs",
        "tmpDir",
        "fs",
        "join",
        "tmpDir",
        "fs",
        "join",
        "__dirname",
        "scriptsDir",
        "describe",
        "it",
        "spawnTsNodeDev",
        "ps",
        "setTimeout",
        "replaceText",
        "ps",
        "t",
        "ps",
        "replaceText",
        "it",
        "spawnTsNodeDev",
        "ps",
        "setTimeout",
        "touch",
        "join",
        "scriptsDir",
        "ps",
        "t",
        "ps",
        "it",
        "spawnTsNodeDev",
        "ps",
        "ps",
        "t",
        "t",
        "t",
        "setTimeout",
        "replaceText",
        "ps",
        "t",
        "ps",
        "replaceText",
        "it",
        "spawnTsNodeDev",
        "ps",
        "ps",
        "t",
        "setTimeout",
        "replaceText",
        "ps",
        "ps",
        "t",
        "ps",
        "replaceText",
        "it",
        "spawnTsNodeDev",
        "ps",
        "setTimeout",
        "replaceText",
        "ps",
        "t",
        "ps",
        "replaceText",
        "it",
        "spawnTsNodeDev",
        "ps",
        "setTimeout",
        "writeFile",
        "notFoundSource",
        "ps",
        "t",
        "ps",
        "removeFile",
        "it",
        "spawnTsNodeDev",
        "cOptions",
        "ps",
        "t",
        "ps",
        "it",
        "spawnTsNodeDev",
        "cOptions",
        "ps",
        "t",
        "ps",
        "it",
        "spawnTsNodeDev",
        "ps",
        "t",
        "ps",
        "it",
        "spawnTsNodeDev",
        "ps",
        "t",
        "ps",
        "it",
        "spawnTsNodeDev",
        "ps",
        "t",
        "ps",
        "it",
        "spawnTsNodeDev",
        "cOptions",
        "ps",
        "t",
        "ps",
        "it",
        "spawnTsNodeDev",
        "cOptions",
        "ps",
        "ps",
        "it",
        "__dirname",
        "spawnTsNodeDev",
        "cOptions",
        "ps",
        "t",
        "ps",
        "describe",
        "it",
        "spawnTsNodeDev",
        "ps",
        "ps",
        "ps",
        "t",
        "it",
        "spawnTsNodeDev",
        "ps",
        "ps",
        "ps",
        "t",
        "it",
        "spawnTsNodeDev",
        "ps",
        "ps",
        "setTimeout",
        "replaceText",
        "ps",
        "ps",
        "t",
        "replaceText",
        "it",
        "spawnTsNodeDev",
        "ps",
        "ps",
        "ps",
        "t",
        "it",
        "spawnTsNodeDev",
        "ps",
        "setTimeout",
        "replaceText",
        "ps",
        "ps",
        "t",
        "it",
        "spawnTsNodeDev",
        "ps",
        "setTimeout",
        "replaceText",
        "ps",
        "ps",
        "t"
    ],
    "literals": [
        "'mocha'",
        "'chai'",
        "'./spawn'",
        "'fs-extra'",
        "'path'",
        "'touch'",
        "'--output'",
        "string",
        "string",
        "string",
        "'utf-8'",
        "string",
        "string",
        "string",
        "'fixture'",
        "'fixture'",
        "'ts-node-dev'",
        "'It should restart on file change'",
        "'--respawn --poll simple.ts'",
        "'dep.ts'",
        "'v1'",
        "'v2'",
        "'Changed code version applied.'",
        "'dep.ts'",
        "'v2'",
        "'v1'",
        "'It allow watch arbitrary folder/file'",
        "'--respawn --watch folder,folder2 simple.ts'",
        "'folder/some-file'",
        "'works'",
        "'It should report an error on start'",
        "'--respawn with-error.ts'",
        "'Reports error file'",
        "'Report TS error'",
        "'Report TS error diagnostics'",
        "'with-error.ts'",
        "'1'",
        "'1'",
        "'Restarted successfully after error fixed.'",
        "'with-error.ts'",
        "'1'",
        "'1'",
        "'It should report an error with --log-error and continue to work'",
        "'--respawn --log-error with-error.ts'",
        "'Reports error in stderr'",
        "'with-error.ts'",
        "'1'",
        "'1'",
        "'Restarted successfully after error fixed.'",
        "'with-error.ts'",
        "'1'",
        "'1'",
        "'It should restart on adding not imported module'",
        "'--respawn --error-recompile with-error.ts'",
        "'dep-ts-error.ts'",
        "'number'",
        "'string'",
        "'Restarted successfully after error fixed.'",
        "'dep-ts-error.ts'",
        "'string'",
        "'number'",
        "export const fn = (x: number) => {  \n  return 'v1'\n}",
        "'It recompiles file on error and restarts'",
        "'--respawn --error-recompile with-not-found.ts'",
        "'not-found.ts'",
        "'Restarted successfully after module was created.'",
        "'not-found.ts'",
        "'It handles allowJs option and loads JS modules'",
        "--respawn",
        "--compiler ttypescript",
        "--compiler-options=${JSON.stringify(cOptions)}",
        "js-module.js",
        "' '",
        "'ok'",
        "'It handles resolveJsonModule option and loads JSON modules'",
        "--respawn",
        "--compiler ttypescript",
        "--compiler-options=${JSON.stringify(cOptions)}",
        "import-json",
        "' '",
        "'ok'",
        "'It should not allow --script-mode and --dir together'",
        "--script-mode",
        "--dir folder",
        "simple.ts",
        "' '",
        "'ok'",
        "'It should use the tsconfig at --dir when defined'",
        "--dir dir-test",
        "dir-test/index.ts",
        "' '",
        "'ok'",
        "'It should use the tsconfig at --script-mode when defined'",
        "-s",
        "dir-test/index.ts",
        "' '",
        "'ok'",
        "'It should fail if not using --dir or --script-mode on dir-test/index.ts'",
        "--compiler-options=${JSON.stringify(cOptions)}",
        "dir-test/index.ts",
        "' '",
        "'ok'",
        "'It allows to use TS Transformers'",
        "'ts-nameof'",
        "'raw'",
        "--respawn",
        "--compiler ttypescript",
        "--compiler-options=${JSON.stringify(cOptions)}",
        "nameof.ts",
        "' '",
        "'It allows to use custom TS Transformers'",
        "'/transformer.ts'",
        "--respawn",
        "--compiler ttypescript",
        "--compiler-options=${JSON.stringify(cOptions)}",
        "to-transform.ts",
        "' '",
        "'ok'",
        "'It should --prefer-ts'",
        "'Should require JS by default'",
        "--respawn",
        "prefer/prefer.js",
        "' '",
        "'Should require JS deps by default'",
        "--respawn",
        "prefer/prefer",
        "' '",
        "'Use require all TS with --ts-prefer'",
        "--respawn",
        "--prefer-ts-exts",
        "prefer/prefer",
        "' '",
        "'prefer/prefer-dep.ts'",
        "'DEP'",
        "'DEP MOD'",
        "'prefer/prefer-dep.ts'",
        "'DEP MOD'",
        "'DEP'",
        "'It should add require with -r flag'",
        "-r ./add-req",
        "simple",
        "' '",
        "'It should handle --deps flag'",
        "--deps",
        "--respawn",
        "req-package",
        "' '",
        "'node_modules/package/index.js'",
        "'PACKAGE'",
        "'CHANGED PACKAGE'",
        "'It should handle deep deps with --deps flag'",
        "--all-deps",
        "--respawn",
        "req-package",
        "' '",
        "'node_modules/package/node_modules/level2-package/index.js'",
        "'PACKAGE'",
        "'CHANGED PACKAGE'"
    ],
    "variables": [
        "t",
        "chai",
        "replaceText",
        "textFile",
        "text",
        "writeFile",
        "textFile",
        "removeFile",
        "textFile",
        "waitFor",
        "ps",
        "ps",
        "ps",
        "ps",
        "ps",
        "notFoundSource",
        "ps",
        "cOptions",
        "ps",
        "cOptions",
        "ps",
        "ps",
        "ps",
        "ps",
        "cOptions",
        "ps",
        "cOptions",
        "ps",
        "cOptions",
        "ps",
        "ps",
        "ps",
        "ps",
        "ps",
        "ps",
        "ps"
    ],
    "comments": [
        "eslint-disable @typescript-eslint/no-misused-promises",
        "revert",
        "PROBLEM: if we try to fix not required/compiled dep it does not work.",
        "setTimeout(() => replaceText('dep-ts-error.ts', 'number', 'string'), 250)",
        "stdout: true,",
        "stdout: true,",
        "`--prefer-ts-exts`,",
        "`--prefer-ts`,",
        ".turnOnOutput()",
        ".turnOnOutput()",
        "watching required with -r not implemented",
        "`--debug`,",
        "setTimeout(() => replaceText('add-req', 'added', 'changed'), 250)",
        "await ps.exit()",
        ""
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}