{
    "identifiers": [
        "require",
        "require",
        "require",
        "require",
        "require",
        "fs",
        "parseVersion",
        "context",
        "build",
        "context",
        "version",
        "err",
        "process",
        "context",
        "context",
        "buildConfig",
        "explicitVersion",
        "explicitVersion",
        "context",
        "version",
        "PREFIX_TO_STRIP",
        "PREFIX_TO_STRIP",
        "version",
        "version",
        "PREFIX_TO_STRIP",
        "version",
        "context",
        "version",
        "werft",
        "context",
        "exec",
        "GCLOUD_SERVICE_ACCOUNT_PATH",
        "exec",
        "exec",
        "werft",
        "err",
        "werft",
        "err",
        "context",
        "buildConfig",
        "buildConfig",
        "buildConfig",
        "werft",
        "werft",
        "exec",
        "exec",
        "cacheLevel",
        "dontTest",
        "version",
        "buildEnv",
        "exec",
        "cacheLevel",
        "dontTest",
        "version",
        "buildEnv",
        "publishRelease",
        "exec",
        "exec",
        "cacheLevel",
        "dontTest",
        "version",
        "buildEnv",
        "publishHelmChart",
        "exec",
        "GCLOUD_SERVICE_ACCOUNT_PATH",
        "buildConfig",
        "werft",
        "deployToDev",
        "version",
        "version",
        "werft",
        "version",
        "destname",
        "destname",
        "domain",
        "recreateNamespace",
        "cmd",
        "exec",
        "cmd",
        "werft",
        "err",
        "werft",
        "err",
        "werft",
        "exec",
        "fs",
        "auth",
        "werft",
        "err",
        "werft",
        "err",
        "werft",
        "exec",
        "destname",
        "destname",
        "exec",
        "destname",
        "destname",
        "comp",
        "kind",
        "shell",
        "kind",
        "comp",
        "o",
        "o",
        "o",
        "o",
        "obj",
        "objs",
        "kind",
        "obj",
        "objs",
        "o",
        "werft",
        "o",
        "o",
        "exec",
        "o",
        "o",
        "werft",
        "err",
        "werft",
        "err",
        "werft",
        "exec",
        "version",
        "werft",
        "err",
        "werft",
        "err",
        "flags",
        "flags",
        "flags",
        "version",
        "flags",
        "domain",
        "flags",
        "destname",
        "flags",
        "wssyncPort",
        "flags",
        "wsmanNodePort",
        "flags",
        "context",
        "shell",
        "fs",
        "pathToVersions",
        "flags",
        "pathToVersions",
        "werft",
        "pathToVersions",
        "shell",
        "werft",
        "exec",
        "exec",
        "flags",
        "werft",
        "exec",
        "flags",
        "werft",
        "exec",
        "version",
        "werft",
        "werft",
        "err",
        "werft",
        "err",
        "exec",
        "url",
        "domain",
        "exec",
        "GCLOUD_SERVICE_ACCOUNT_PATH",
        "domain",
        "werft",
        "notReadyYet",
        "werft",
        "exec",
        "result",
        "result",
        "notReadyYet",
        "sleep",
        "werft",
        "exec",
        "imageRepoBase",
        "werft",
        "version",
        "imageRepoBase",
        "cmd",
        "exec",
        "cmd"
    ],
    "literals": [
        "'shelljs'",
        "'fs'",
        "'./util/shell.js'",
        "'./util/util.js'",
        "'./util/kubectl.js'",
        "\"/mnt/secrets/gcp-sa/service-account.json\"",
        "'context.json'",
        "\"gitpod-core-build-\"",
        "\"prepare\"",
        "gcloud auth activate-service-account --key-file \"${GCLOUD_SERVICE_ACCOUNT_PATH}\"",
        "\"gcloud auth configure-docker --quiet\"",
        "'gcloud container clusters get-credentials dev --zone europe-west1-b --project gitpod-core-dev'",
        "'prep'",
        "'prep'",
        "\"refs/heads/master\"",
        "\"no-test\"",
        "\"no-cache\"",
        "\"remote-push\"",
        "\"remote\"",
        "\"publishRelease\"",
        "\"job config\"",
        "\"build\"",
        "\"build running\"",
        "\"HTTP_PROXY\"",
        "\"http://dev-http-cache:3129\"",
        "\"HTTPS_PROXY\"",
        "\"http://dev-http-cache:3129\"",
        "leeway vet --ignore-warnings",
        "leeway build --werft=true -c ${cacheLevel} ${dontTest ? '--dont-test':''} -Dversion=${version} -DimageRepoBase=eu.gcr.io/gitpod-core-dev/dev dev:all",
        "'--dont-test'",
        "''",
        "leeway build --werft=true -c ${cacheLevel} ${dontTest ? '--dont-test':''} -Dversion=${version} -DremoveSources=false -DimageRepoBase=eu.gcr.io/gitpod-core-dev/build",
        "'--dont-test'",
        "''",
        "gcloud auth activate-service-account --key-file \"/mnt/secrets/gcp-sa-release/service-account.json\"",
        "leeway build --werft=true -c ${cacheLevel} ${dontTest ? '--dont-test':''} -Dversion=${version} -DremoveSources=false -DimageRepoBase=eu.gcr.io/gitpod-io/self-hosted-ee",
        "'--dont-test'",
        "''",
        "\"eu.gcr.io/gitpod-io/self-hosted-ee\"",
        "gcloud auth activate-service-account --key-file \"${GCLOUD_SERVICE_ACCOUNT_PATH}\"",
        "\"no-preview\"",
        "\"deploy\"",
        "\"not deploying\"",
        "\"no-preview is set\"",
        "\"deploy\"",
        "\"deploying to dev\"",
        "\".\"",
        "staging-${destname}",
        "${destname}.staging.gitpod-dev.com",
        "http://${domain}",
        "1${Math.floor(Math.random()*1000)}",
        "2${Math.floor(Math.random()*1000)}",
        "${30000 + Math.floor(Math.random()*1000)}",
        "'prep'",
        "\"kubectl config current-context\"",
        "kubectl config set-context --current --namespace=${namespace}",
        "'prep'",
        "'prep'",
        "'prep'",
        "\"secret\"",
        "\"copy secret into namespace\"",
        "echo -n \"_json_key:$(kubectl get secret gcp-sa-registry-auth --namespace=keys --export -o yaml \\\n                        | yq r - data['.dockerconfigjson'] \\\n                        | base64 -d)\" | base64 -w 0",
        "\"chart/gcp-sa-registry-auth\"",
        "{\n    \"auths\": {\n        \"eu.gcr.io\": {\n            \"auth\": \"${auth}\"\n        }\n    }\n}",
        "'secret'",
        "'secret'",
        "\"predeploy cleanup\"",
        "\"removing old unnamespaced objects - this might take a while\"",
        "/usr/local/bin/helm3 delete gitpod-${destname} || echo gitpod-${destname} was not installed yet",
        "'predeploy cleanup'",
        "/usr/local/bin/helm3 delete jaeger-${destname} || echo jaeger-${destname} was not installed yet",
        "'predeploy cleanup'",
        "\"ws-scheduler\"",
        "\"node-daemon\"",
        "\"cluster\"",
        "\"workspace\"",
        "\"jaeger\"",
        "\"jaeger-agent\"",
        "\"ws-sync\"",
        "\"ws-manager-node\"",
        "\"ClusterRole\"",
        "\"ClusterRoleBinding\"",
        "\"PodSecurityPolicy\"",
        "kubectl get ${kind} -l component=${comp} --no-headers -o=custom-columns=:metadata.name | grep ${namespace}-ns",
        "\"\\n\"",
        "'kind'",
        "'obj'",
        "\"predeploy cleanup\"",
        "deleting old ${o.kind} ${o.obj}",
        "kubectl delete ${o.kind} ${o.obj}",
        "'predeploy cleanup'",
        "'predeploy cleanup'",
        "'predeploy cleanup'",
        "\"deploy\"",
        "\"extracting versions\"",
        "docker run --rm eu.gcr.io/gitpod-core-dev/build/versions:${version} cat /versions.yaml | tee versions.yaml",
        "'deploy'",
        "'deploy'",
        "\"\"",
        "--namespace ${namespace}",
        "--set components.imageBuilder.hostDindData=/mnt/disks/ssd0/docker-${namespace}",
        "--set version=${version}",
        "--set hostname=${domain}",
        "--set devBranch=${destname}",
        "--set components.wsSync.servicePort=${wssyncPort}",
        "--set components.wsManagerNode.registryProxyPort=${wsmanNodePort}",
        "--set ingressMode=${context.Annotations.ingressMode || \"hosts\"}",
        "\"hosts\"",
        "${shell.pwd().toString()}/versions.yaml",
        "-f ${pathToVersions}",
        "versions file not found at '${pathToVersions}', not using it.",
        "\"chart\"",
        "'helm'",
        "'installing Gitpod'",
        "helm dependencies up",
        "/usr/local/bin/helm3 upgrade --install --timeout 10m -f ../.werft/values.dev.yaml ${flags} gitpod .",
        "'helm'",
        "'installing Jaeger'",
        "/usr/local/bin/helm3 upgrade --install -f ../dev/charts/jaeger/values.yaml ${flags} jaeger ../dev/charts/jaeger",
        "'helm'",
        "'installing Sweeper'",
        "/usr/local/bin/helm3 upgrade --install --set image.version=${version} --set command=\"werft run github -a namespace=${namespace} --remote-job-path .werft/wipe-devstaging.yaml github.com/typefox/gitpod-core:master\" sweeper ../dev/charts/sweeper",
        "'helm'",
        "'done'",
        "'helm'",
        "'deploy'",
        "werft log result -d \"dev installation\" -c github url ${url}/workspaces/",
        "cd .werft/certs \\\n        && terraform init \\\n        && export GOOGLE_APPLICATION_CREDENTIALS=\"${GCLOUD_SERVICE_ACCOUNT_PATH}\" \\\n        && terraform apply -auto-approve \\\n            -var 'namespace=${namespace}' \\\n            -var 'dns_zone_domain=gitpod-dev.com' \\\n            -var 'domain=${domain}' \\\n            -var 'subdomains=[\"\", \"*.\", \"*.ws-dev.\"]'",
        "'certificate'",
        "'certificate'",
        "waiting until certificate certs/${namespace} is ready...",
        "'certificate'",
        "polling state of certs/${namespace}...",
        "kubectl -n certs get certificate ${namespace} -o jsonpath=\"{.status.conditions[?(@.type == 'Ready')].status}\"",
        "\"True\"",
        "'certificate'",
        "copying certificate from \"certs/${namespace}\" to \"${namespace}/proxy-config-certificates\"",
        "kubectl get secret ${namespace} --namespace=certs --export -o yaml \\\n        | sed 's/${namespace}/proxy-config-certificates/g' \\\n        | kubectl apply --namespace=${namespace} -f -",
        "\"publish-charts\"",
        "\"Publish charts\"",
        "leeway build -Dversion=${version} -DimageRepoBase=${imageRepoBase} --save helm-repo.tar.gz chart:helm",
        "\"mkdir helm-repo\"",
        "\"tar xzfv helm-repo.tar.gz -C helm-repo\"",
        "\"gsutil cp gs://charts-gitpod-io/index.yaml old-index.yaml\"",
        "\"helm3 repo index --merge ../old-index.yaml helm-repo\"",
        "\"gcloud auth activate-service-account --key-file /mnt/secrets/gcp-sa-gitpod-helmchartregistry/service-account.json\"",
        "\"gcloud config set project gitpod-191109\"",
        "\"gsutil -m rsync -r helm-repo gs://charts-gitpod-io/\"",
        "'publish-charts'"
    ],
    "variables": [
        "shell",
        "fs",
        "GCLOUD_SERVICE_ACCOUNT_PATH",
        "context",
        "version",
        "buildConfig",
        "explicitVersion",
        "version",
        "PREFIX_TO_STRIP",
        "buildConfig",
        "masterBuild",
        "dontTest",
        "cacheLevel",
        "publishRelease",
        "buildEnv",
        "destname",
        "domain",
        "url",
        "wssyncPort",
        "wsmanNodePort",
        "registryNodePort",
        "auth",
        "objs",
        "flags",
        "pathToVersions",
        "notReadyYet",
        "result"
    ],
    "comments": [
        "Build using the dev-http-cache gitpod-dev to make 'yarn install' more stable",
        "gitTag(`build/${version}`);",
        "if (masterBuild) {",
        "exec(`git config --global user.name \"${context.Owner}\"`);",
        "exec(`werft run --follow-with-prefix=deploy --remote-job-path .werft/deploy-staging.yaml -a version=${version} github`);",
        "return;",
        "}",
        "// TODO [geropl] Now that the certs reside in a separate namespaces, start the actual certificate issuing _before_ the namespace cleanup",
        "werft.log('certificate', \"organizing a certificate for the preview environment...\");",
        "const certificatePromise = issueAndInstallCertficate(namespace, domain);",
        "TODO [geropl] versions is not a core component yet",
        "produce the result independently of Helm succeding, so that in case Helm fails we still have the URL.",
        "// Delay success until certificate is actually present",
        "werft.log('certificate', \"awaiting promised certificate\")",
        "try {",
        "await certificatePromise;",
        "werft.done('certificate');",
        "} catch (err) {",
        "werft.fail('certificate', err);",
        "}",
        "Always use 'terraform apply' to make sure the certificate is present and up-to-date",
        "certmanager is configured to create a secret in the namespace \"certs\" with the name \"${namespace}\"."
    ],
    "docstrings": [
        "* Prepare",
        "* Build",
        "* Deploy master\n         * \n         * [cw] we don't have a core-staging environment (yet)",
        "* Deploy dev",
        "* Publish Charts"
    ],
    "functions": [
        "parseVersion",
        "build",
        "deployToDev",
        "issueAndInstallCertficate",
        "publishHelmChart"
    ],
    "classes": []
}