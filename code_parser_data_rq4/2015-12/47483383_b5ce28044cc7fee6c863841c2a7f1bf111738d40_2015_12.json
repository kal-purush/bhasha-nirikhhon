{
    "identifiers": [
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "factory",
        "$",
        "$",
        "$",
        "$",
        "$",
        "$",
        "Blob",
        "Blob",
        "Blob",
        "$",
        "$",
        "$",
        "message",
        "context",
        "message",
        "message",
        "message",
        "context",
        "$",
        "context",
        "key",
        "value",
        "message",
        "message",
        "key",
        "value",
        "message",
        "form",
        "form",
        "e",
        "data",
        "e",
        "data",
        "data",
        "$",
        "data",
        "data",
        "$",
        "arguments",
        "now",
        "loaded",
        "interval",
        "now",
        "interval",
        "timeDiff",
        "interval",
        "loaded",
        "timeDiff",
        "loaded",
        "now",
        "options",
        "options",
        "options",
        "$",
        "$",
        "options",
        "$",
        "options",
        "options",
        "options",
        "$",
        "options",
        "options",
        "$",
        "options",
        "formData",
        "$",
        "options",
        "name",
        "value",
        "formData",
        "name",
        "value",
        "formData",
        "files",
        "$",
        "files",
        "index",
        "file",
        "total",
        "file",
        "total",
        "obj",
        "obj",
        "$",
        "obj",
        "progress",
        "obj",
        "progress",
        "obj",
        "obj",
        "prop",
        "obj",
        "obj",
        "prop",
        "obj",
        "prop",
        "obj",
        "e",
        "data",
        "e",
        "data",
        "data",
        "now",
        "data",
        "data",
        "e",
        "e",
        "data",
        "now",
        "loaded",
        "e",
        "e",
        "data",
        "data",
        "data",
        "loaded",
        "data",
        "now",
        "data",
        "data",
        "data",
        "loaded",
        "data",
        "data",
        "data",
        "now",
        "loaded",
        "data",
        "$",
        "e",
        "data",
        "$",
        "e",
        "options",
        "options",
        "options",
        "$",
        "xhr",
        "$",
        "xhr",
        "e",
        "e",
        "e",
        "oe",
        "e",
        "oe",
        "e",
        "oe",
        "that",
        "e",
        "options",
        "options",
        "xhr",
        "obj",
        "obj",
        "options",
        "options",
        "options",
        "$",
        "$",
        "options",
        "options",
        "options",
        "options",
        "$",
        "options",
        "options",
        "options",
        "options",
        "multipart",
        "options",
        "file",
        "options",
        "encodeURI",
        "file",
        "multipart",
        "options",
        "file",
        "options",
        "options",
        "file",
        "$",
        "options",
        "formData",
        "options",
        "options",
        "formData",
        "paramName",
        "options",
        "$",
        "options",
        "index",
        "file",
        "formData",
        "$",
        "options",
        "options",
        "index",
        "paramName",
        "file",
        "that",
        "options",
        "formData",
        "options",
        "formData",
        "FormData",
        "$",
        "options",
        "index",
        "field",
        "formData",
        "field",
        "field",
        "options",
        "formData",
        "paramName",
        "options",
        "file",
        "$",
        "options",
        "index",
        "file",
        "that",
        "file",
        "that",
        "file",
        "formData",
        "$",
        "options",
        "options",
        "index",
        "paramName",
        "file",
        "file",
        "file",
        "options",
        "formData",
        "options",
        "options",
        "$",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "targetHost",
        "targetHost",
        "location",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "$",
        "options",
        "options",
        "paramName",
        "paramName",
        "fileInput",
        "$",
        "input",
        "input",
        "i",
        "paramName",
        "name",
        "i",
        "paramName",
        "paramName",
        "fileInput",
        "$",
        "paramName",
        "paramName",
        "paramName",
        "paramName",
        "options",
        "options",
        "options",
        "options",
        "$",
        "options",
        "options",
        "options",
        "$",
        "options",
        "options",
        "options",
        "options",
        "options",
        "location",
        "options",
        "options",
        "$",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "data",
        "$",
        "data",
        "options",
        "options",
        "options",
        "deferred",
        "deferred",
        "deferred",
        "deferred",
        "deferred",
        "promise",
        "promise",
        "promise",
        "promise",
        "promise",
        "promise",
        "promise",
        "promise",
        "resolveOrReject",
        "context",
        "args",
        "$",
        "dfd",
        "context",
        "context",
        "promise",
        "resolveOrReject",
        "dfd",
        "context",
        "args",
        "resolveOrReject",
        "dfd",
        "context",
        "args",
        "promise",
        "dfd",
        "promise",
        "e",
        "data",
        "args",
        "$",
        "that",
        "args",
        "data",
        "resolveFunc",
        "rejectFunc",
        "resolveFunc",
        "rejectFunc",
        "data",
        "getPromise",
        "data",
        "$",
        "that",
        "data",
        "getPromise",
        "arguments",
        "resolveFunc",
        "rejectFunc",
        "getPromise",
        "data",
        "data",
        "that",
        "$",
        "e",
        "that",
        "e",
        "that",
        "data",
        "that",
        "that",
        "data",
        "that",
        "that",
        "data",
        "that",
        "data",
        "data",
        "jqXHR",
        "jqXHR",
        "parts",
        "parts",
        "parseInt",
        "parts",
        "upperBytesPos",
        "upperBytesPos",
        "options",
        "testOnly",
        "options",
        "options",
        "options",
        "file",
        "options",
        "options",
        "fs",
        "$",
        "dfd",
        "options",
        "ub",
        "mcs",
        "fs",
        "options",
        "testOnly",
        "ub",
        "fs",
        "file",
        "options",
        "options",
        "file",
        "upload",
        "$",
        "options",
        "o",
        "o",
        "file",
        "ub",
        "ub",
        "mcs",
        "file",
        "o",
        "o",
        "o",
        "ub",
        "ub",
        "o",
        "fs",
        "that",
        "o",
        "that",
        "o",
        "jqXHR",
        "that",
        "o",
        "$",
        "o",
        "that",
        "o",
        "result",
        "textStatus",
        "jqXHR",
        "ub",
        "that",
        "jqXHR",
        "ub",
        "o",
        "currentLoaded",
        "o",
        "o",
        "that",
        "$",
        "ub",
        "o",
        "ub",
        "o",
        "o",
        "options",
        "o",
        "ub",
        "o",
        "result",
        "o",
        "textStatus",
        "o",
        "jqXHR",
        "that",
        "o",
        "that",
        "o",
        "ub",
        "fs",
        "upload",
        "dfd",
        "o",
        "result",
        "textStatus",
        "jqXHR",
        "jqXHR",
        "textStatus",
        "errorThrown",
        "o",
        "jqXHR",
        "o",
        "textStatus",
        "o",
        "errorThrown",
        "that",
        "o",
        "that",
        "o",
        "dfd",
        "o",
        "jqXHR",
        "textStatus",
        "errorThrown",
        "promise",
        "promise",
        "jqXHR",
        "upload",
        "promise",
        "e",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "result",
        "textStatus",
        "jqXHR",
        "options",
        "options",
        "options",
        "options",
        "total",
        "$",
        "total",
        "total",
        "options",
        "response",
        "options",
        "result",
        "response",
        "options",
        "textStatus",
        "response",
        "options",
        "jqXHR",
        "options",
        "jqXHR",
        "textStatus",
        "errorThrown",
        "options",
        "options",
        "options",
        "options",
        "options",
        "response",
        "options",
        "jqXHR",
        "response",
        "options",
        "textStatus",
        "response",
        "options",
        "errorThrown",
        "options",
        "jqXHRorResult",
        "textStatus",
        "jqXHRorError",
        "options",
        "options",
        "e",
        "data",
        "data",
        "e",
        "data",
        "that",
        "data",
        "that",
        "options",
        "that",
        "jqXHR",
        "jqXHR",
        "aborted",
        "that",
        "$",
        "e",
        "options",
        "that",
        "options",
        "aborted",
        "that",
        "options",
        "$",
        "options",
        "result",
        "textStatus",
        "jqXHR",
        "that",
        "result",
        "textStatus",
        "jqXHR",
        "options",
        "jqXHR",
        "textStatus",
        "errorThrown",
        "that",
        "jqXHR",
        "textStatus",
        "errorThrown",
        "options",
        "jqXHRorResult",
        "textStatus",
        "jqXHRorError",
        "that",
        "jqXHRorResult",
        "textStatus",
        "jqXHRorError",
        "options",
        "that",
        "that",
        "options",
        "options",
        "that",
        "that",
        "nextSlot",
        "that",
        "nextSlot",
        "nextSlot",
        "nextSlot",
        "that",
        "that",
        "that",
        "jqXHR",
        "e",
        "options",
        "slot",
        "$",
        "slot",
        "pipe",
        "slot",
        "send",
        "send",
        "send",
        "pipe",
        "pipe",
        "aborted",
        "jqXHR",
        "slot",
        "slot",
        "options",
        "aborted",
        "send",
        "jqXHR",
        "pipe",
        "send",
        "e",
        "data",
        "$",
        "data",
        "data",
        "files",
        "options",
        "options",
        "options",
        "options",
        "limitSize",
        "filesLength",
        "files",
        "limitSize",
        "options",
        "limit",
        "limitSize",
        "options",
        "fileSet",
        "files",
        "paramNameSet",
        "paramName",
        "options",
        "limitSize",
        "limit",
        "fileSet",
        "paramNameSet",
        "i",
        "i",
        "filesLength",
        "i",
        "limit",
        "fileSet",
        "files",
        "i",
        "i",
        "limit",
        "paramNameSlice",
        "paramName",
        "i",
        "i",
        "limit",
        "paramNameSlice",
        "paramNameSlice",
        "paramName",
        "paramNameSet",
        "paramNameSlice",
        "options",
        "limitSize",
        "fileSet",
        "paramNameSet",
        "i",
        "i",
        "filesLength",
        "i",
        "i",
        "batchSize",
        "files",
        "i",
        "overhead",
        "i",
        "filesLength",
        "batchSize",
        "files",
        "i",
        "overhead",
        "limitSize",
        "limit",
        "i",
        "j",
        "limit",
        "fileSet",
        "files",
        "j",
        "i",
        "paramNameSlice",
        "paramName",
        "j",
        "i",
        "paramNameSlice",
        "paramNameSlice",
        "paramName",
        "paramNameSet",
        "paramNameSlice",
        "j",
        "i",
        "batchSize",
        "paramNameSet",
        "paramName",
        "data",
        "files",
        "$",
        "fileSet",
        "files",
        "index",
        "element",
        "$",
        "data",
        "newData",
        "fileSet",
        "element",
        "element",
        "newData",
        "paramNameSet",
        "index",
        "that",
        "newData",
        "that",
        "newData",
        "that",
        "e",
        "newData",
        "result",
        "that",
        "$",
        "e",
        "newData",
        "result",
        "result",
        "input",
        "input",
        "$",
        "inputClone",
        "input",
        "inputClone",
        "$",
        "input",
        "i",
        "el",
        "el",
        "input",
        "inputClone",
        "el",
        "input",
        "inputClone",
        "entry",
        "path",
        "$",
        "e",
        "e",
        "e",
        "e",
        "entry",
        "dfd",
        "e",
        "path",
        "path",
        "entry",
        "entry",
        "entry",
        "path",
        "dfd",
        "entry",
        "entry",
        "file",
        "file",
        "path",
        "dfd",
        "file",
        "errorHandler",
        "entry",
        "dirReader",
        "entry",
        "dirReader",
        "entries",
        "that",
        "entries",
        "path",
        "entry",
        "files",
        "dfd",
        "files",
        "errorHandler",
        "errorHandler",
        "dfd",
        "dfd",
        "entries",
        "path",
        "$",
        "$",
        "$",
        "entries",
        "entry",
        "that",
        "entry",
        "path",
        "arguments",
        "dataTransfer",
        "dataTransfer",
        "dataTransfer",
        "dataTransfer",
        "items",
        "items",
        "items",
        "items",
        "$",
        "items",
        "item",
        "item",
        "entry",
        "item",
        "entry",
        "entry",
        "item",
        "entry",
        "item",
        "$",
        "$",
        "dataTransfer",
        "fileInput",
        "fileInput",
        "$",
        "fileInput",
        "fileInput",
        "fileInput",
        "entries",
        "entries",
        "entries",
        "files",
        "$",
        "fileInput",
        "files",
        "value",
        "fileInput",
        "value",
        "$",
        "files",
        "value",
        "files",
        "files",
        "$",
        "files",
        "index",
        "file",
        "file",
        "file",
        "file",
        "file",
        "$",
        "files",
        "fileInput",
        "fileInput",
        "$",
        "fileInput",
        "fileInput",
        "$",
        "$",
        "$",
        "fileInput",
        "arguments",
        "e",
        "$",
        "e",
        "$",
        "e",
        "data",
        "files",
        "data",
        "files",
        "that",
        "that",
        "data",
        "that",
        "$",
        "e",
        "data",
        "that",
        "e",
        "data",
        "e",
        "e",
        "e",
        "e",
        "items",
        "items",
        "$",
        "items",
        "index",
        "item",
        "item",
        "item",
        "file",
        "data",
        "file",
        "$",
        "e",
        "data",
        "e",
        "data",
        "e",
        "e",
        "e",
        "e",
        "e",
        "dataTransfer",
        "dataTransfer",
        "dataTransfer",
        "e",
        "dataTransfer",
        "files",
        "data",
        "files",
        "that",
        "$",
        "e",
        "data",
        "that",
        "e",
        "data",
        "e",
        "e",
        "e",
        "e",
        "e",
        "dataTransfer",
        "$",
        "dataTransfer",
        "$",
        "e",
        "e",
        "dataTransfer",
        "$",
        "key",
        "value",
        "$",
        "key",
        "reinit",
        "key",
        "value",
        "reinit",
        "options",
        "options",
        "options",
        "$",
        "options",
        "$",
        "options",
        "options",
        "$",
        "options",
        "$",
        "options",
        "options",
        "$",
        "options",
        "$",
        "options",
        "parts",
        "parts",
        "parts",
        "modifiers",
        "key",
        "value",
        "key",
        "$",
        "value",
        "value",
        "$",
        "$",
        "key",
        "value",
        "that",
        "key",
        "value",
        "value",
        "that",
        "value",
        "options",
        "key",
        "value",
        "data",
        "data",
        "data",
        "data",
        "data",
        "files",
        "data",
        "files",
        "that",
        "data",
        "data",
        "$",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "$",
        "dfd",
        "promise",
        "aborted",
        "jqXHR",
        "jqXHR",
        "dfd",
        "promise",
        "data",
        "files",
        "aborted",
        "files",
        "dfd",
        "data",
        "files",
        "jqXHR",
        "that",
        "data",
        "result",
        "textStatus",
        "jqXHR",
        "dfd",
        "result",
        "textStatus",
        "jqXHR",
        "jqXHR",
        "textStatus",
        "errorThrown",
        "dfd",
        "jqXHR",
        "textStatus",
        "errorThrown",
        "promise",
        "data",
        "$",
        "data",
        "data",
        "data",
        "data",
        "data"
    ],
    "literals": [
        "'use strict'",
        "'function'",
        "'jquery'",
        "'jquery.ui.widget'",
        "'use strict'",
        "'(Android (1\\\\.[0156]|2\\\\.[01]))'",
        "'|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)'",
        "'|(w(eb)?OSBrowser)|(webOS)'",
        "'|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))'",
        "'<input type=\"file\">'",
        "'disabled'",
        "'blueimp.fileupload'",
        "'Uploaded bytes exceed file size'",
        "'{'",
        "'}'",
        "'option'",
        "'autoUpload'",
        "'fileInput'",
        "'dropZone'",
        "'pasteZone'",
        "'multipart'",
        "'forceIframeTransport'",
        "'function'",
        "'object'",
        "'progress'",
        "'progress'",
        "'progressall'",
        "'progressall'",
        "'progress'",
        "'[object '",
        "']'",
        "'array'",
        "'Content-Range'",
        "'File'",
        "'Content-Disposition'",
        "'attachment; filename=\"'",
        "'\"'",
        "'application/octet-stream'",
        "'array'",
        "'FormData'",
        "'File'",
        "'Blob'",
        "'array'",
        "'<a></a>'",
        "'href'",
        "'host'",
        "'iframe '",
        "''",
        "'redirect'",
        "'postmessage '",
        "''",
        "'name'",
        "'files[]'",
        "'files'",
        "'name'",
        "'files[]'",
        "'form'",
        "'form'",
        "'action'",
        "'method'",
        "'string'",
        "'method'",
        "''",
        "'POST'",
        "'PUT'",
        "'PATCH'",
        "'POST'",
        "'accept-charset'",
        "'resolved'",
        "'rejected'",
        "'pending'",
        "'pending'",
        "'submit'",
        "'submit'",
        "'abort'",
        "'fail'",
        "'pending'",
        "'Range'",
        "'-'",
        "'uploadedBytes'",
        "'error'",
        "'bytes '",
        "'-'",
        "'/'",
        "'chunksend'",
        "'progress'",
        "'chunkdone'",
        "'chunkalways'",
        "'chunkfail'",
        "'chunkalways'",
        "'start'",
        "'progress'",
        "'done'",
        "'fail'",
        "'always'",
        "'send'",
        "'send'",
        "'pending'",
        "'stop'",
        "'abort'",
        "'abort'",
        "'add'",
        "'add'",
        "'<form></form>'",
        "'remove'",
        "''",
        "'/'",
        "'webkitEntries'",
        "'entries'",
        "'files'",
        "'value'",
        "''",
        "'change'",
        "'change'",
        "'paste'",
        "'paste'",
        "'drop'",
        "'drop'",
        "'Files'",
        "'dragover'",
        "'dragover'",
        "'copy'",
        "'dragover drop'",
        "'paste'",
        "'change'",
        "'input[type=\"file\"]'",
        "'input[type=\"file\"]'",
        "'/'",
        "'/'",
        "'url'",
        "'string'",
        "'abort'",
        "'abort'"
    ],
    "variables": [
        "timeDiff",
        "formData",
        "total",
        "progress",
        "prop",
        "now",
        "loaded",
        "that",
        "xhr",
        "oe",
        "that",
        "formData",
        "file",
        "multipart",
        "paramName",
        "targetHost",
        "fileInput",
        "paramName",
        "input",
        "name",
        "i",
        "options",
        "dfd",
        "promise",
        "that",
        "getPromise",
        "parts",
        "upperBytesPos",
        "that",
        "file",
        "fs",
        "ub",
        "mcs",
        "dfd",
        "promise",
        "jqXHR",
        "upload",
        "o",
        "currentLoaded",
        "total",
        "response",
        "response",
        "that",
        "jqXHR",
        "aborted",
        "slot",
        "pipe",
        "options",
        "send",
        "nextSlot",
        "that",
        "result",
        "options",
        "files",
        "filesLength",
        "limit",
        "limitSize",
        "overhead",
        "batchSize",
        "paramName",
        "paramNameSet",
        "paramNameSlice",
        "fileSet",
        "i",
        "j",
        "newData",
        "inputClone",
        "that",
        "dfd",
        "errorHandler",
        "dirReader",
        "that",
        "items",
        "entry",
        "entries",
        "files",
        "value",
        "that",
        "data",
        "items",
        "data",
        "file",
        "that",
        "dataTransfer",
        "data",
        "dataTransfer",
        "reinit",
        "options",
        "parts",
        "modifiers",
        "that",
        "options",
        "that",
        "that",
        "dfd",
        "promise",
        "jqXHR",
        "aborted"
    ],
    "comments": [
        "jshint nomen:false",
        "global define, window, document, location, Blob, FormData",
        "Register as an anonymous AMD module:",
        "Browser globals:",
        "Detect file input support, based on",
        "http://viljamis.com/blog/2012/file-upload-support-on-mobile/",
        "Handle devices which give false positives for the feature detection:",
        "Feature detection for all other devices:",
        "The FileReader API is not actually used, but works as feature detection,",
        "as some Safari versions (5?) support XHR file uploads via the FormData API,",
        "but not non-multipart XHR file uploads.",
        "window.XMLHttpRequestUpload is not available on IE10, so we check for",
        "window.ProgressEvent instead to detect XHR2 file upload capability:",
        "Detect support for Blob slicing (required for chunked uploads):",
        "The fileupload widget listens for change events on file input fields defined",
        "via fileInput setting and paste or drop events of the given dropZone.",
        "In addition to the default jQuery Widget methods, the fileupload widget",
        "exposes the \"add\" and \"send\" methods, to add or directly send files using",
        "the fileupload API.",
        "By default, files added via file input selection, paste, drag & drop or",
        "\"add\" method are uploaded immediately, but it is possible to override",
        "the \"add\" callback option to queue file uploads.",
        "The drop target element(s), by the default the complete document.",
        "Set to null to disable drag & drop support:",
        "The paste target element(s), by the default the complete document.",
        "Set to null to disable paste support:",
        "The file input field(s), that are listened to for change events.",
        "If undefined, it is set to the file input fields inside",
        "of the widget element on plugin initialization.",
        "Set to null to disable the change listener.",
        "By default, the file input field is replaced with a clone after",
        "each input field change event. This is required for iframe transport",
        "queues and allows change events to be fired for the same file",
        "selection, but can be disabled by setting the following option to false:",
        "The parameter name for the file form data (the request argument name).",
        "If undefined or empty, the name property of the file input field is",
        "used, or \"files[]\" if the file input name property is also empty,",
        "can be a string or an array of strings:",
        "By default, each file of a selection is uploaded using an individual",
        "request for XHR type uploads. Set to false to upload file",
        "selections in one request each:",
        "To limit the number of files uploaded with one XHR request,",
        "set the following option to an integer greater than 0:",
        "The following option limits the number of files uploaded with one",
        "XHR request to keep the request size under or equal to the defined",
        "limit in bytes:",
        "Multipart file uploads add a number of bytes to each uploaded file,",
        "therefore the following option adds an overhead for each file used",
        "in the limitMultiFileUploadSize configuration:",
        "Set the following option to true to issue all file upload requests",
        "in a sequential order:",
        "To limit the number of concurrent uploads,",
        "set the following option to an integer greater than 0:",
        "Set the following option to true to force iframe transport uploads:",
        "Set the following option to the location of a redirect url on the",
        "origin server, for cross-domain iframe transport uploads:",
        "The parameter name for the redirect url, sent as part of the form",
        "data and set to 'redirect' if this option is empty:",
        "Set the following option to the location of a postMessage window,",
        "to enable postMessage transport uploads:",
        "By default, XHR file uploads are sent as multipart/form-data.",
        "The iframe transport is always using multipart/form-data.",
        "Set to false to enable non-multipart XHR uploads:",
        "To upload large files in smaller chunks, set the following option",
        "to a preferred maximum chunk size. If set to 0, null or undefined,",
        "or the browser does not support the required Blob API, files will",
        "be uploaded as a whole.",
        "When a non-multipart upload or a chunked multipart upload has been",
        "aborted, this option can be used to resume the upload by setting",
        "it to the size of the already uploaded bytes. This option is most",
        "useful when modifying the options object inside of the \"add\" or",
        "\"send\" callbacks, as the options are cloned for each file upload.",
        "By default, failed (abort or error) file uploads are removed from the",
        "global progress calculation. Set the following option to false to",
        "prevent recalculating the global progress data:",
        "Interval in milliseconds to calculate and trigger progress events:",
        "Interval in milliseconds to calculate progress bitrate:",
        "By default, uploads are started automatically when adding files:",
        "Error and info messages:",
        "Translation function, gets the message key to be translated",
        "and an object with context specific data as arguments:",
        "Additional form data to be sent along with the file uploads can be set",
        "using this option, which accepts an array of objects with name and",
        "value properties, a function returning such an array, a FormData",
        "object (for XHR file uploads), or a simple object.",
        "The form of the first fileInput is given as parameter to the function:",
        "The add callback is invoked as soon as files are added to the fileupload",
        "widget (via file input selection, drag & drop, paste or add API call).",
        "If the singleFileUploads option is enabled, this callback will be",
        "called once for each file in the selection for XHR file uploads, else",
        "once for each file selection.",
        "",
        "The upload starts when the submit method is invoked on the data parameter.",
        "The data object contains a files property holding the added files",
        "and allows you to override plugin options as well as define ajax settings.",
        "",
        "Listeners for this callback can also be bound the following way:",
        ".bind('fileuploadadd', func);",
        "",
        "data.submit() returns a Promise object and allows to attach additional",
        "handlers using jQuery's Deferred callbacks:",
        "data.submit().done(func).fail(func).always(func);",
        "Other callbacks:",
        "Callback for the submit event of each file upload:",
        "submit: function (e, data) {}, // .bind('fileuploadsubmit', func);",
        "Callback for the start of each file upload request:",
        "send: function (e, data) {}, // .bind('fileuploadsend', func);",
        "Callback for successful uploads:",
        "done: function (e, data) {}, // .bind('fileuploaddone', func);",
        "Callback for failed (abort or error) uploads:",
        "fail: function (e, data) {}, // .bind('fileuploadfail', func);",
        "Callback for completed (success, abort or error) requests:",
        "always: function (e, data) {}, // .bind('fileuploadalways', func);",
        "Callback for upload progress events:",
        "progress: function (e, data) {}, // .bind('fileuploadprogress', func);",
        "Callback for global upload progress events:",
        "progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);",
        "Callback for uploads start, equivalent to the global ajaxStart event:",
        "start: function (e) {}, // .bind('fileuploadstart', func);",
        "Callback for uploads stop, equivalent to the global ajaxStop event:",
        "stop: function (e) {}, // .bind('fileuploadstop', func);",
        "Callback for change events of the fileInput(s):",
        "change: function (e, data) {}, // .bind('fileuploadchange', func);",
        "Callback for paste events to the pasteZone(s):",
        "paste: function (e, data) {}, // .bind('fileuploadpaste', func);",
        "Callback for drop events of the dropZone(s):",
        "drop: function (e, data) {}, // .bind('fileuploaddrop', func);",
        "Callback for dragover events of the dropZone(s):",
        "dragover: function (e) {}, // .bind('fileuploaddragover', func);",
        "Callback for the start of each chunk upload request:",
        "chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);",
        "Callback for successful chunk uploads:",
        "chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);",
        "Callback for failed (abort or error) chunk uploads:",
        "chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);",
        "Callback for completed (success, abort or error) chunk upload requests:",
        "chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);",
        "The plugin options are used as settings object for the ajax calls.",
        "The following are jQuery ajax settings required for the file uploads:",
        "A list of options that require reinitializing event listeners and/or",
        "special initialization code:",
        "Add the difference from the previously loaded state",
        "to the global loaded counter:",
        "Trigger a custom progress event with a total data property set",
        "to the file size(s) of the current upload and a loaded data",
        "property calculated accordingly:",
        "Trigger a global progress event for all current file uploads,",
        "including ajax calls queued for sequential file uploads:",
        "Accesss to the native XHR object is required to add event listeners",
        "for the upload progress event:",
        "Make sure the progress event properties get copied over:",
        "Cross-frame instanceof check",
        "Ignore non-multipart setting if not supported:",
        "window.postMessage does not allow sending FormData",
        "objects, so we just add the File/Blob objects to",
        "the formData array and let the postMessage window",
        "create the FormData object out of this array:",
        "This check allows the tests to run with",
        "dummy objects:",
        "Blob reference is not needed anymore, free memory:",
        "Setting the dataType to iframe enables the iframe transport:",
        "The iframe transport accepts a serialized array as form data:",
        "Add redirect url to form data on cross-domain uploads:",
        "Setting the dataType to postmessage enables the",
        "postMessage transport:",
        "Retrieve missing options from the input field and the",
        "associated form, if available:",
        "If the given file input doesn't have an associated form,",
        "use the default widget file input's form:",
        "The HTTP request method must be \"POST\" or \"PUT\":",
        "jQuery 1.6 doesn't provide .state(),",
        "while jQuery 1.8+ removed .isRejected() and .isResolved():",
        "Maps jqXHR callbacks to the equivalent",
        "methods of the given Promise object:",
        "Creates and returns a Promise object enhanced with",
        "the jqXHR methods abort, success, error and complete:",
        "Adds convenience methods to the data callback argument:",
        "Parses the Range header from the server response",
        "and returns the uploaded bytes:",
        "Uploads a file in multiple, sequential requests",
        "by splitting the file up in multiple blob chunks.",
        "If the second parameter is true, only tests if the file",
        "should be uploaded in chunks, but does not invoke any",
        "upload requests:",
        "The chunk upload method:",
        "Clone the options object for each chunk upload:",
        "Store the current chunk size, as the blob itself",
        "will be dereferenced after data processing:",
        "Expose the chunk bytes position range:",
        "Process the upload data (the blob and potential form data):",
        "Add progress listeners for this chunk upload:",
        "Create a progress event if no final progress event",
        "with loaded equaling total has been triggered",
        "for this chunk:",
        "File upload not yet complete,",
        "continue with the next chunk:",
        "the start callback is triggered when an upload starts",
        "and no other uploads are currently running,",
        "equivalent to the global ajaxStart event:",
        "Set timer for global bitrate progress calculation:",
        "Reset the global progress values:",
        "Make sure the container objects for the .response() and",
        ".progress() methods on the data object are available",
        "and reset to their initial state:",
        "Initialize the global progress values:",
        "Create a progress event if no final progress event",
        "with loaded equaling total has been triggered:",
        "Remove the failed (error or abort) file upload from",
        "the global progress calculation:",
        "jqXHRorResult, textStatus and jqXHRorError are added to the",
        "options object via done and fail callbacks",
        "Set timer for bitrate progress calculation:",
        "Start the next queued upload,",
        "that has not been aborted:",
        "The stop callback is triggered when all uploads have",
        "been completed, equivalent to the global ajaxStop event:",
        "Return the piped Promise object, enhanced with an abort method,",
        "which is delegated to the jqXHR object of the current upload,",
        "and jqXHR callbacks mapped to the equivalent Promise methods:",
        "Detaching allows to insert the fileInput on another form",
        "without loosing the file input value:",
        "Avoid memory leaks with the detached file input:",
        "Replace the original file input element in the fileInput",
        "elements set with the clone, which has been copied including",
        "event handlers:",
        "If the widget has been initialized on the file input itself,",
        "override this.element with the file input clone:",
        "Since $.when returns immediately if one",
        "Deferred is rejected, we use resolve instead.",
        "This allows valid files and invalid items",
        "to be returned together in one set:",
        "Workaround for Chrome bug #149735",
        "Return an empy list for file system items",
        "other than files or directories:",
        "Workaround for Chrome bug #149735:",
        "If the files property is not available, the browser does not",
        "support the File API and we add a pseudo File object with",
        "the input value as name with path information removed:",
        "File normalization for Safari 4 and Firefox 3:",
        "Initialize options set via HTML5 data-attributes:",
        "This method is exposed to the widget API and allows to query",
        "the number of active uploads:",
        "This method is exposed to the widget API and allows to query",
        "the widget upload progress.",
        "It returns an object with loaded, total and bitrate properties",
        "for the running uploads:",
        "This method is exposed to the widget API and allows adding files",
        "using the fileupload API. The data parameter accepts an object which",
        "must have a files property and can contain additional options:",
        ".fileupload('add', {files: filesList});",
        "This method is exposed to the widget API and allows sending files",
        "using the fileupload API. The data parameter accepts an object which",
        "must have a files or fileInput property and can contain additional options:",
        ".fileupload('send', {files: filesList});",
        "The method returns a Promise object for the file upload call."
    ],
    "docstrings": [
        "* jQuery File Upload Plugin 5.40.0\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT"
    ],
    "functions": [],
    "classes": []
}