{
    "identifiers": [
        "it",
        "tidalwave",
        "util",
        "javax",
        "annotation",
        "Nonnull",
        "java",
        "util",
        "java",
        "util",
        "Optional",
        "java",
        "util",
        "it",
        "tidalwave",
        "util",
        "spi",
        "ExtendedFinder8Support",
        "F8",
        "serialVersionUID",
        "Nonnull",
        "computeResults",
        "Nonnull",
        "computeNeededResults",
        "Nonnull",
        "computeResults",
        "Nonnull",
        "computeNeededResults",
        "computeResults",
        "computeResults",
        "computeNeededResults",
        "computeNeededResults",
        "computeResults",
        "isPresent",
        "computeNeededResults",
        "isPresent",
        "Nonnull",
        "other",
        "Nonnull",
        "other",
        "source",
        "getSource",
        "other",
        "computeResults",
        "source",
        "computeResults",
        "computeNeededResults",
        "source",
        "computeNeededResults",
        "Override",
        "Nonnull",
        "computeResults",
        "isPresent",
        "computeResults",
        "get",
        "apply",
        "computeResults",
        "Override",
        "Nonnull",
        "computeNeededResults",
        "isPresent",
        "computeNeededResults",
        "get",
        "apply",
        "computeNeededResults",
        "Nonnull",
        "Nonnull",
        "computeResults",
        "Optional",
        "of",
        "computeResults",
        "Optional",
        "empty",
        "Nonnull",
        "Nonnull",
        "computeNeededResults",
        "Optional",
        "empty",
        "Optional",
        "of",
        "computeNeededResults"
    ],
    "literals": [
        "\"One of computeResults or computeNeededResults must be present\""
    ],
    "variables": [
        "computeResults",
        "computeNeededResults"
    ],
    "comments": [
        "TODO: merge to Finder8",
        "return computeResults.flatMap(f -> f.apply(this)).orElse((List)super.computeResults());",
        "return computeNeededResults.map(f -> f.apply(this)).orElse((List)super.computeNeededResults());"
    ],
    "docstrings": [
        "* #%L\n * *********************************************************************************************************************\n *\n * blueHour\n * http://bluehour.tidalwave.it - git clone git@bitbucket.org:tidalwave/bluehour-src.git\n * %%\n * Copyright (C) 2013 - 2015 Tidalwave s.a.s. (http://tidalwave.it)\n * %%\n * *********************************************************************************************************************\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * *********************************************************************************************************************\n *\n * $Id$\n *\n * *********************************************************************************************************************\n * #L%",
        "*********************************************************************************************************************\n *\n * @author  Fabrizio Giudici (Fabrizio.Giudici@tidalwave.it)\n * @version $Id$\n *\n *********************************************************************************************************************"
    ],
    "functions": [
        "LambdaFinder",
        "LambdaFinder",
        "computeResults",
        "computeNeededResults",
        "ofComputeResults",
        "ofComputeNeededResults"
    ],
    "classes": [
        "LambdaFinder"
    ]
}