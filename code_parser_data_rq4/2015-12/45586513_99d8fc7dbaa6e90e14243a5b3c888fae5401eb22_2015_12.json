{
    "identifiers": [
        "time",
        "calendar",
        "timegm",
        "pigpio",
        "json",
        "ast",
        "i18n",
        "thread",
        "logging",
        "gv",
        "helpers",
        "web",
        "os",
        "glob",
        "pigpio",
        "pi",
        "os",
        "system",
        "os",
        "system",
        "glob",
        "glob",
        "base_dir",
        "df",
        "device_folders",
        "device_files",
        "append",
        "df",
        "device_file",
        "device_files",
        "open",
        "device_file",
        "f",
        "readlines",
        "f",
        "close",
        "lines",
        "append",
        "flines",
        "i",
        "len",
        "device_files",
        "lines",
        "append",
        "lines",
        "len",
        "device_files",
        "i",
        "read_temps_raw",
        "flines",
        "lines",
        "temps",
        "pos",
        "flines",
        "strip",
        "flines",
        "find",
        "equals_pos",
        "flines",
        "equals_pos",
        "len",
        "flines",
        "temp_string",
        "temp_c",
        "ex",
        "pos",
        "found_bad",
        "temps",
        "time",
        "sleep",
        "temps",
        "time",
        "sleep",
        "time",
        "localtime",
        "timegm",
        "gv",
        "nowt",
        "read_temps",
        "gv",
        "sd",
        "supply_temp_readings",
        "append",
        "min",
        "temps",
        "return_temp_readings",
        "append",
        "max",
        "temps",
        "supply_temp_readings",
        "append",
        "max",
        "temps",
        "return_temp_readings",
        "append",
        "min",
        "temps",
        "len",
        "supply_temp_readings",
        "supply_temp_readings",
        "pop",
        "len",
        "return_temp_readings",
        "return_temp_readings",
        "pop",
        "sum",
        "supply_temp_readings",
        "len",
        "supply_temp_readings",
        "sum",
        "return_temp_readings",
        "len",
        "return_temp_readings",
        "iter",
        "ave_supply_temp",
        "ave_supply_temp",
        "ave_return_temp",
        "ave_return_temp",
        "iter",
        "timing_loop"
    ],
    "literals": [
        "'/'",
        "'webpages.view_options'",
        "'/vo'",
        "'webpages.view_options'",
        "'/co'",
        "'webpages.change_options'",
        "'/vl'",
        "'webpages.view_log'",
        "'/cl'",
        "'webpages.clear_log'",
        "'/wl'",
        "'webpages.boiler_log'",
        "'/login'",
        "'webpages.login'",
        "'/logout'",
        "'webpages.logout'",
        "'modprobe w1-gpio'",
        "'modprobe w1-therm'",
        "'/sys/bus/w1/devices/'",
        "'28*'",
        "'/w1_slave'",
        "'r'",
        "'YES'",
        "'t='",
        "'cant read temperatures'",
        "'mode'",
        "'Heatpump Cooling'",
        "'supply temp: '",
        "'C '",
        "'F; '",
        "'return temp: '",
        "'C '",
        "'F'"
    ],
    "variables": [
        "urls",
        "pi",
        "base_dir",
        "device_folders",
        "device_files",
        "lines",
        "f",
        "flines",
        "temps",
        "lines",
        "found_bad",
        "pos",
        "equals_pos",
        "temp_string",
        "temp_c",
        "temps",
        "pos",
        "found_bad",
        "found_bad",
        "found_bad",
        "iter",
        "supply_temp_readings",
        "return_temp_readings",
        "gv",
        "nowt",
        "gv",
        "now",
        "temps",
        "ave_supply_temp",
        "ave_return_temp",
        "iter"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "'/',  'webpages.home',",
        "see http://projects.privateeyepi.com/home/temperature-sensor-project-using-ds18b20 for temp sensor reading",
        "gpio pin 23 is data point.  (See /boot/config.txt)",
        "print 'temps: ', temps",
        "rather than tracking serial # of thermistors, just assume higher readings are supply",
        "and cooler readings are return (if heating) and vice versa if cooling"
    ],
    "docstrings": [],
    "functions": [
        "read_temps_raw",
        "read_temps",
        "timing_loop"
    ],
    "classes": []
}