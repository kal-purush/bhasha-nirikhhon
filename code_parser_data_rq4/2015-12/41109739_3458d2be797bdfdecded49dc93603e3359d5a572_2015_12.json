{
    "identifiers": [
        "template",
        "primer",
        "min_tm",
        "min_bases",
        "len",
        "primer",
        "min_bases",
        "format",
        "min_bases",
        "i",
        "len",
        "primer",
        "min_bases",
        "primer",
        "anneal",
        "i",
        "anneal",
        "tm",
        "template",
        "locate",
        "anneal",
        "sum",
        "len",
        "match",
        "match",
        "p_matches",
        "p_bind",
        "anneal_temp",
        "min_tm",
        "primer",
        "anneal",
        "i",
        "m",
        "p_matches",
        "fwd_matches",
        "append",
        "m",
        "len",
        "anneal",
        "primer",
        "anneal",
        "overhang",
        "m",
        "p_matches",
        "rev_matches",
        "append",
        "m",
        "len",
        "anneal",
        "primer",
        "anneal",
        "overhang",
        "fwd_matches",
        "rev_matches"
    ],
    "literals": [
        "\"Primer length does not exceed minimum number of bases {}\"",
        "\"Primer binds but does not melting temperature is too low.\""
    ],
    "variables": [
        "anneal",
        "anneal_temp",
        "p_matches",
        "p_bind",
        "overhang",
        "fwd_matches",
        "rev_matches"
    ],
    "comments": [],
    "docstrings": [
        "'''DNA Annealing Event Simulation'''",
        "\"\"\"Primer binds to more than one place on a template.\"\"\"",
        "\"\"\"Primer did not bind correctly.\"\"\"",
        "'''Simulates a primer binding event. Will find the maximum subset\n    of bases in the primer that binds to the template. Implicitly finds\n    overhang sequences. **Note**: Primer binding locations are now indicative\n    of the 3' END of the primer instead of the begining of the annealing\n    sequence.\n\n    :param temlate: DNA template for which to bind a primer\n    :type template: coral.DNA\n    :param primer: primer to bind to template\n    :type primer: coral.Primer\n    :param min_tm: the minimum required temperature for primer binding\n    :type min_tm: float\n    :param min_bases: minimum number of bases allowed for binding\n    :type min_bases: int\n    :returns: primer binding locations (3' end) and the overhang sequence\n    :rtype: int, coral.DNA\n    :raises: Exception if primer length is too small\n             Exception if primer does not bind\n             Exception if primer bind\n    '''"
    ],
    "functions": [
        "anneal"
    ],
    "classes": [
        "AmbiguousPrimingError",
        "PrimerBindError"
    ]
}