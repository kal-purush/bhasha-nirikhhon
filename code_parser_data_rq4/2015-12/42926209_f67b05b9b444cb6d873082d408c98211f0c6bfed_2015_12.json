{
    "identifiers": [
        "SemVerModule",
        "valid",
        "v",
        "loose",
        "inc",
        "v",
        "release",
        "loose",
        "gt",
        "v1",
        "v2",
        "loose",
        "gte",
        "v1",
        "v2",
        "loose",
        "lt",
        "v1",
        "v2",
        "loose",
        "lte",
        "v1",
        "v2",
        "loose",
        "eq",
        "v1",
        "v2",
        "loose",
        "neq",
        "v1",
        "v2",
        "loose",
        "cmp",
        "v1",
        "comparator",
        "v2",
        "loose",
        "compare",
        "v1",
        "v2",
        "loose",
        "rcompare",
        "v1",
        "v2",
        "loose",
        "validRange",
        "loose",
        "satisfies",
        "version",
        "loose",
        "maxSatisfying",
        "versions",
        "loose",
        "gtr",
        "version",
        "loose",
        "ltr",
        "version",
        "loose",
        "outside",
        "version",
        "hilo",
        "loose",
        "SemVerBase",
        "version",
        "loose",
        "other",
        "other",
        "other",
        "release",
        "SemVerBase",
        "comp",
        "loose",
        "comp",
        "version",
        "SemVerBase",
        "loose",
        "version",
        "SemVerModule"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"semver\""
    ],
    "variables": [],
    "comments": [
        "Type definitions for semver v2.2.1",
        "Project: https://github.com/isaacs/node-semver",
        "Definitions by: Bart van der Schoor <https://github.com/Bartvds>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "Comparison",
        "Ranges"
    ],
    "docstrings": [
        "* Return the parsed version, or null if it's not valid.",
        "* Return the version incremented by the release type (major, minor, patch, or prerelease), or null if it's not valid.",
        "* v1 > v2",
        "* v1 >= v2",
        "* v1 < v2",
        "* v1 <= v2",
        "* v1 == v2 This is true if they're logically equivalent, even if they're not the exact same string. You already know how to compare strings.",
        "* v1 != v2 The opposite of eq.",
        "* Pass in a comparison string, and it'll call the corresponding semver comparison function. \"===\" and \"!==\" do simple string comparison, but are included for completeness. Throws if an invalid comparison string is provided.",
        "* Return 0 if v1 == v2, or 1 if v1 is greater, or -1 if v2 is greater. Sorts in ascending order if passed to Array.sort().",
        "* The reverse of compare. Sorts an array of versions in descending order when passed to Array.sort().",
        "* Return the valid range or null if it's not valid",
        "* Return true if the version satisfies the range.",
        "* Return the highest version in the list that satisfies the range, or null if none of them do.",
        "* Return true if version is greater than all the versions possible in the range.",
        "* Return true if version is less than all the versions possible in the range.",
        "* Return true if the version is outside the bounds of the range in either the high or low direction. The hilo argument must be either the string '>' or '<'. (This is the function called by gtr and ltr.)"
    ],
    "functions": [],
    "classes": [
        "SemVerBase",
        "SemVer",
        "Comparator",
        "Range"
    ]
}