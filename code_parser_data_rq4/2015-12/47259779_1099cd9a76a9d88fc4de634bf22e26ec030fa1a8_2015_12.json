{
    "identifiers": [
        "value",
        "value",
        "e",
        "description",
        "key",
        "sym",
        "key",
        "callbackfn",
        "value",
        "index",
        "thisArg",
        "key",
        "key",
        "key",
        "value",
        "iterable",
        "value",
        "value",
        "callbackfn",
        "value",
        "index",
        "thisArg",
        "value",
        "iterable"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "Returns a string representation of an object.",
        "Returns the primitive value of the specified object.",
        "Well-known Symbols"
    ],
    "docstrings": [
        "* Created by MIC on 2015/11/17.",
        "* A reference to the prototype.",
        "* Returns a new unique Symbol value.\n     * @param  description Description of the new Symbol object.",
        "* Returns a Symbol object from the global symbol registry matching the given key if found.\n     * Otherwise, returns a new symbol with this key.\n     * @param key key to search for.",
        "* Returns a key from the global symbol registry matching the given Symbol if found.\n     * Otherwise, returns a undefined.\n     * @param sym Symbol to find the key for.",
        "* A method that determines if a constructor object recognizes an object as one of the\n     * constructorâ€™s instances. Called by the semantics of the instanceof operator.",
        "* A Boolean value that if true indicates that an object should flatten to its array elements\n     * by Array.prototype.concat.",
        "* A method that returns the default iterator for an object. Called by the semantics of the\n     * for-of statement.",
        "* A regular expression method that matches the regular expression against a string. Called\n     * by the String.prototype.match method.",
        "* A regular expression method that replaces matched substrings of a string. Called by the\n     * String.prototype.replace method.",
        "* A regular expression method that returns the index within a string that matches the\n     * regular expression. Called by the String.prototype.search method.",
        "* A function valued property that is the constructor function that is used to create\n     * derived objects.",
        "* A regular expression method that splits a string at the indices that match the regular\n     * expression. Called by the String.prototype.split method.",
        "* A method that converts an object to a corresponding primitive value.\n     * Called by the ToPrimitive abstract operation.",
        "* A String value that is used in the creation of the default string description of an object.\n     * Called by the built-in method Object.prototype.toString.",
        "* An Object whose own property names are property names that are excluded from the 'with'\n     * environment bindings of the associated objects."
    ],
    "functions": [],
    "classes": []
}