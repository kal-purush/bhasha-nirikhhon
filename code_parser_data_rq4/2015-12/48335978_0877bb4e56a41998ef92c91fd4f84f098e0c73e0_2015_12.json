{
    "identifiers": [
        "message",
        "message",
        "value",
        "message",
        "value",
        "message",
        "value",
        "message",
        "error",
        "message",
        "args",
        "context",
        "message",
        "message",
        "message",
        "pattern",
        "message",
        "value",
        "message",
        "value",
        "message",
        "value",
        "message",
        "value",
        "message",
        "value",
        "message",
        "value",
        "message",
        "value",
        "comparator",
        "message",
        "value",
        "comparator",
        "message",
        "value",
        "comparator",
        "message",
        "value",
        "comparator",
        "message",
        "comparer",
        "comparee",
        "message",
        "args",
        "fn",
        "error",
        "compare",
        "compare",
        "block",
        "spy",
        "compare",
        "target",
        "method",
        "passed",
        "message",
        "actual",
        "extension",
        "expect"
    ],
    "literals": [
        "\"expect\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "expect"
    ],
    "comments": [],
    "docstrings": [
        "* Asserts the given object is truthy.",
        "* Asserts the given object is falsy.",
        "* Asserts that object is strictly equal to value using ===.",
        "* Asserts that the given object equals value using is-equal.",
        "* Asserts that the given object is not equal to value using is-equal.",
        "* Asserts that the given block throws an error. The error argument may be a constructor (to test using instanceof), or a string/RegExp to test against error.message.",
        "* Asserts that the given block throws an error when called with args. The error argument may be a constructor (to test using instanceof), or a string/RegExp to test against error.message.",
        "* Asserts that the given block throws an error when called in the given context. The error argument may be a constructor (to test using instanceof), or a string/RegExp to test against error.message.",
        "* Asserts that the given block does not throw.",
        "* Asserts the given object is an instanceof constructor.\n         * or\n         * Asserts the typeof the given object is string.",
        "* Asserts the given object is not an instanceof constructor.\n         * or\n         * Asserts the typeof the given object not the string.",
        "* Asserts the given string matches pattern, which must be a RegExp.",
        "* Asserts the given string contains value.",
        "* Asserts the given string contains value.",
        "* Asserts the given string does not contain value.",
        "* Asserts the given string does not contain value.",
        "* Asserts the given number is less than value.",
        "* Asserts the given number is greater than value.",
        "* Asserts the given array contains value. The comparator function, if given, should compare two objects and either return false or throw if they are not equal. It defaults to assert.deepEqual. \n         *",
        "* Asserts the given array contains value. The comparator function, if given, should compare two objects and either return false or throw if they are not equal. It defaults to assert.deepEqual. \n         *",
        "* Asserts the given array contains value. The comparator function, if given, should compare two objects and either return false or throw if they are not equal. It defaults to assert.deepEqual. \n         *",
        "* Asserts the given array contains value. The comparator function, if given, should compare two objects and either return false or throw if they are not equal. It defaults to assert.deepEqual. \n         *",
        "* Has the spy been called?",
        "* Has the spy been called with these arguments.",
        "* Restores a spy originally created with expect.spyOn()",
        "* Makes the spy invoke a function fn when called.",
        "* Makes the spy call the original function it's spying on.",
        "* Makes the spy return a value;",
        "* Makes the spy throw an error when called.",
        "* Creates a spy function.",
        "* Replaces the method in target with a spy.",
        "* Restores all spies created with expect.spyOn(). This is the same as calling spy.restore() on all spies created.",
        "* Determins if the object is a spy.",
        "* Does an assertion",
        "* You can add your own assertions using expect.extend and expect.assert \n         * @example\n         * expect.extend({\n         *   toBeAColor() {\n         *    expect.assert(\n         *     this.actual.match(/^#[a-fA-F0-9]{6}$/),\n         *     'expected %s to be an HTML color',\n         *     this.actual\n         *   )\n         *  }\n         * })\n         *expect('#ff00ff').toBeAColor()"
    ],
    "functions": [],
    "classes": []
}