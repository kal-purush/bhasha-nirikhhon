{
    "identifiers": [
        "numpy",
        "np",
        "os",
        "logging",
        "datetime",
        "datetime",
        "ConfigParser",
        "ConfigParser",
        "mpop",
        "CONFIG_PATH",
        "h5py",
        "pdb",
        "logging",
        "getLogger",
        "satscene",
        "args",
        "kwargs",
        "args",
        "ConfigParser",
        "conf",
        "read",
        "os",
        "path",
        "join",
        "CONFIG_PATH",
        "satscene",
        "fullname",
        "option",
        "value",
        "conf",
        "items",
        "satscene",
        "instrument_name",
        "raw",
        "value",
        "kwargs",
        "get",
        "kwargs",
        "kwargs",
        "get",
        "kwargs",
        "LOGGER",
        "info",
        "satscene",
        "instrument_name",
        "CASES",
        "satscene",
        "instrument_name",
        "satscene",
        "options",
        "KeyError",
        "KeyError",
        "satscene",
        "instrument_name",
        "satscene",
        "options",
        "options",
        "IOError",
        "satscene",
        "orbit",
        "satscene",
        "satname",
        "satscene",
        "instrument_name",
        "satscene",
        "fullname",
        "os",
        "path",
        "join",
        "satscene",
        "time_slot",
        "strftime",
        "options",
        "values",
        "satscene",
        "time_slot",
        "strftime",
        "options",
        "values",
        "LOGGER",
        "debug",
        "filename",
        "options",
        "h5py",
        "File",
        "filename",
        "h5f",
        "h5f",
        "h5f",
        "attrs",
        "h5f",
        "attrs",
        "h5f",
        "attrs",
        "dset",
        "datasets",
        "h5f",
        "dset",
        "band_data",
        "attrs",
        "LOGGER",
        "debug",
        "valid_range",
        "band_data",
        "attrs",
        "band_data",
        "attrs",
        "split",
        "band_data",
        "attrs",
        "band_data",
        "attrs",
        "band_data",
        "attrs",
        "band_data",
        "attrs",
        "LOGGER",
        "debug",
        "band_names",
        "i",
        "band",
        "band_names",
        "band",
        "satscene",
        "channels_to_load",
        "LOGGER",
        "debug",
        "band",
        "i",
        "band_data",
        "i",
        "np",
        "logical_or",
        "np",
        "less",
        "data",
        "valid_range",
        "np",
        "greater",
        "data",
        "valid_range",
        "np",
        "ma",
        "masked_array",
        "data",
        "mask",
        "bandmask",
        "copy",
        "h5f",
        "h5f",
        "pdb",
        "set_trace",
        "pyresample",
        "geometry",
        "geometry",
        "SwathDefinition",
        "lons",
        "lons",
        "lats",
        "lats",
        "h5f",
        "close",
        "load_virr"
    ],
    "literals": [
        "'virr'",
        "\".cfg\"",
        "\"-level2\"",
        "\"filename\"",
        "\"full_filename\"",
        "\"filename\"",
        "\"calibrate\"",
        "\"calibrate\"",
        "\"calibrate\"",
        "\"calibrate\"",
        "\"Loading instrument '%s'\"",
        "\"Unknown instrument '%s'\"",
        "\"filename\"",
        "\"No 1km virr filename given, cannot load\"",
        "\"orbit\"",
        "\"satname\"",
        "\"instrument\"",
        "\"satellite\"",
        "\"dir\"",
        "\"filename\"",
        "\"Filename= %s\"",
        "'EV_Emissive'",
        "'EV_RefSB'",
        "'calibrate'",
        "'r'",
        "'Emissive_Radiance_Offsets'",
        "'Emissive_Radiance_Scales'",
        "'Emmisive_Centroid_Wave_Number'",
        "'RefSB_Cal_Coefficients'",
        "'RefSB_Effective_Wavelength'",
        "'valid_range'",
        "\"valid-range = \"",
        "'_FillValue'",
        "'band_name'",
        "','",
        "'Slope'",
        "'Intercept'",
        "'units'",
        "'long_name'",
        "'band names = '",
        "\"Reading channel %s, i=%d\"",
        "'Longitude'",
        "'Latitude'",
        "\"virr\""
    ],
    "variables": [
        "LOGGER",
        "conf",
        "options",
        "options",
        "option",
        "options",
        "options",
        "options",
        "values",
        "filename",
        "datasets",
        "calibrate",
        "h5f",
        "emis_offs",
        "emis_scales",
        "emiss_centroid_wn",
        "refsb_cal_coeff",
        "refsb_effective_wl",
        "band_data",
        "valid_range",
        "fillvalue",
        "band_names",
        "slope",
        "intercept",
        "units",
        "long_name",
        "data",
        "bandmask",
        "satscene",
        "band",
        "lons",
        "lats",
        "satscene",
        "area",
        "CASES"
    ],
    "comments": [
        "!/usr/bin/env python",
        "-*- coding: utf-8 -*-",
        "Copyright (c) 2015 Adam.Dybbroe",
        "Author(s):",
        "Adam.Dybbroe <adam.dybbroe@smhi.se>",
        "Katerina.Melnik <kmelnik@scanex.ru>",
        "This program is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "You should have received a copy of the GNU General Public License",
        "along with this program.  If not, see <http://www.gnu.org/licenses/>.",
        "Get the calibration information",
        "Emissive radiance coefficients:",
        "VIS/NIR calibration stuff:",
        "FIXME! There seem to be useful data outside the valid range!",
        "if calibrate:",
        "data = slopes[mersi_band_index] * (",
        "data - np.array([sv_dn_average[mersi_band_index]]).transpose())",
        "Get geolocation information"
    ],
    "docstrings": [
        "\"\"\"A VIRR reader for FY3-B and maybe A....\n\"\"\"",
        "\"\"\"Read data from file and load it into *satscene*.\n    A possible *calibrate* keyword argument is passed to the AAPP reader. \n    Should be 0 for off (counts), 1 for default (brightness temperatures and\n    reflectances), and 2 for radiances only.\n\n    If *use_extern_calib* keyword argument is set True, use external\n    calibration data.\n\n    \"\"\"",
        "\"\"\"Read the VIRR hdf5 file\"\"\""
    ],
    "functions": [
        "load",
        "load_virr"
    ],
    "classes": []
}