{
    "identifiers": [
        "errno",
        "os",
        "re",
        "subprocess",
        "sys",
        "git_refnames",
        "git_full",
        "keywords",
        "VersioneerConfig",
        "cfg",
        "vcs",
        "method",
        "f",
        "vcs",
        "HANDLERS",
        "HANDLERS",
        "vcs",
        "f",
        "f",
        "decorate",
        "commands",
        "args",
        "cwd",
        "verbose",
        "hide_stderr",
        "isinstance",
        "commands",
        "c",
        "commands",
        "c",
        "args",
        "subprocess",
        "Popen",
        "c",
        "args",
        "cwd",
        "cwd",
        "stdout",
        "subprocess",
        "PIPE",
        "stderr",
        "subprocess",
        "PIPE",
        "hide_stderr",
        "EnvironmentError",
        "sys",
        "exc_info",
        "e",
        "errno",
        "errno",
        "ENOENT",
        "verbose",
        "dispcmd",
        "e",
        "verbose",
        "commands",
        "p",
        "communicate",
        "strip",
        "sys",
        "version_info",
        "stdout",
        "decode",
        "p",
        "returncode",
        "verbose",
        "dispcmd",
        "stdout",
        "parentdir_prefix",
        "root",
        "verbose",
        "os",
        "path",
        "basename",
        "root",
        "dirname",
        "startswith",
        "parentdir_prefix",
        "verbose",
        "root",
        "dirname",
        "parentdir_prefix",
        "NotThisMethod",
        "dirname",
        "len",
        "parentdir_prefix",
        "register_vcs_handler",
        "versionfile_abs",
        "open",
        "versionfile_abs",
        "line",
        "f",
        "readlines",
        "line",
        "strip",
        "startswith",
        "re",
        "search",
        "line",
        "mo",
        "mo",
        "group",
        "line",
        "strip",
        "startswith",
        "re",
        "search",
        "line",
        "mo",
        "mo",
        "group",
        "f",
        "close",
        "EnvironmentError",
        "keywords",
        "register_vcs_handler",
        "keywords",
        "tag_prefix",
        "verbose",
        "keywords",
        "NotThisMethod",
        "keywords",
        "strip",
        "refnames",
        "startswith",
        "verbose",
        "NotThisMethod",
        "r",
        "strip",
        "r",
        "refnames",
        "strip",
        "split",
        "r",
        "len",
        "TAG",
        "r",
        "refs",
        "r",
        "startswith",
        "TAG",
        "tags",
        "r",
        "r",
        "refs",
        "re",
        "search",
        "r",
        "verbose",
        "join",
        "refs",
        "tags",
        "verbose",
        "join",
        "sorted",
        "tags",
        "sorted",
        "tags",
        "startswith",
        "tag_prefix",
        "len",
        "tag_prefix",
        "verbose",
        "r",
        "r",
        "keywords",
        "strip",
        "verbose",
        "keywords",
        "strip",
        "register_vcs_handler",
        "tag_prefix",
        "root",
        "verbose",
        "run_command",
        "run_command",
        "os",
        "path",
        "exists",
        "os",
        "path",
        "join",
        "root",
        "verbose",
        "root",
        "NotThisMethod",
        "sys",
        "platform",
        "run_command",
        "GITS",
        "cwd",
        "root",
        "describe_out",
        "NotThisMethod",
        "describe_out",
        "strip",
        "run_command",
        "GITS",
        "cwd",
        "root",
        "full_out",
        "NotThisMethod",
        "full_out",
        "strip",
        "full_out",
        "full_out",
        "describe_out",
        "git_describe",
        "endswith",
        "dirty",
        "dirty",
        "git_describe",
        "git_describe",
        "rindex",
        "git_describe",
        "re",
        "search",
        "git_describe",
        "mo",
        "describe_out",
        "pieces",
        "mo",
        "group",
        "full_tag",
        "startswith",
        "tag_prefix",
        "verbose",
        "fmt",
        "full_tag",
        "tag_prefix",
        "full_tag",
        "tag_prefix",
        "pieces",
        "full_tag",
        "len",
        "tag_prefix",
        "mo",
        "group",
        "mo",
        "group",
        "run_command",
        "GITS",
        "cwd",
        "root",
        "count_out",
        "pieces",
        "pieces",
        "pieces",
        "get",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "plus_or_dot",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "rendered",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "rendered",
        "rendered",
        "plus_or_dot",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "rendered",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "rendered",
        "rendered",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "rendered",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "rendered",
        "rendered",
        "pieces",
        "style",
        "pieces",
        "pieces",
        "get",
        "pieces",
        "style",
        "style",
        "style",
        "render_pep440",
        "pieces",
        "style",
        "render_pep440_pre",
        "pieces",
        "style",
        "render_pep440_post",
        "pieces",
        "style",
        "render_pep440_old",
        "pieces",
        "style",
        "render_git_describe",
        "pieces",
        "style",
        "render_git_describe_long",
        "pieces",
        "ValueError",
        "style",
        "rendered",
        "pieces",
        "pieces",
        "get_config",
        "cfg",
        "verbose",
        "git_versions_from_keywords",
        "get_keywords",
        "cfg",
        "tag_prefix",
        "verbose",
        "NotThisMethod",
        "os",
        "path",
        "realpath",
        "i",
        "cfg",
        "versionfile_source",
        "split",
        "os",
        "path",
        "dirname",
        "root",
        "NameError",
        "git_pieces_from_vcs",
        "cfg",
        "tag_prefix",
        "root",
        "verbose",
        "render",
        "pieces",
        "cfg",
        "style",
        "NotThisMethod",
        "cfg",
        "parentdir_prefix",
        "versions_from_parentdir",
        "cfg",
        "parentdir_prefix",
        "root",
        "verbose",
        "NotThisMethod"
    ],
    "literals": [
        "\"$Format:%d$\"",
        "\"$Format:%H$\"",
        "\"refnames\"",
        "\"full\"",
        "\"git\"",
        "\"pep440\"",
        "\"\"",
        "\"None\"",
        "\"src/spec2nexus/_version.py\"",
        "\"unable to run %s\"",
        "\"unable to find command, tried %s\"",
        "\"unable to run %s (error)\"",
        "\"guessing rootdir is '%s', but '%s' doesn't start with \"",
        "\"prefix '%s'\"",
        "\"rootdir doesn't start with parentdir_prefix\"",
        "\"version\"",
        "\"full-revisionid\"",
        "\"dirty\"",
        "\"error\"",
        "\"git\"",
        "\"get_keywords\"",
        "\"r\"",
        "\"git_refnames =\"",
        "r'=\\s*\"(.*)\"'",
        "\"refnames\"",
        "\"git_full =\"",
        "r'=\\s*\"(.*)\"'",
        "\"full\"",
        "\"git\"",
        "\"keywords\"",
        "\"no keywords at all, weird\"",
        "\"refnames\"",
        "\"$Format\"",
        "\"keywords are unexpanded, not using\"",
        "\"unexpanded keywords, not a git-archive tarball\"",
        "\"()\"",
        "\",\"",
        "\"tag: \"",
        "r'\\d'",
        "\"discarding '%s', no digits\"",
        "\",\"",
        "\"likely tags: %s\"",
        "\",\"",
        "\"picking %s\"",
        "\"version\"",
        "\"full-revisionid\"",
        "\"full\"",
        "\"dirty\"",
        "\"error\"",
        "\"no suitable tags, using unknown + full revision id\"",
        "\"version\"",
        "\"0+unknown\"",
        "\"full-revisionid\"",
        "\"full\"",
        "\"dirty\"",
        "\"error\"",
        "\"no suitable tags\"",
        "\"git\"",
        "\"pieces_from_vcs\"",
        "\".git\"",
        "\"no .git in %s\"",
        "\"no .git directory\"",
        "\"git\"",
        "\"win32\"",
        "\"git.cmd\"",
        "\"git.exe\"",
        "\"describe\"",
        "\"--tags\"",
        "\"--dirty\"",
        "\"--always\"",
        "\"--long\"",
        "\"'git describe' failed\"",
        "\"rev-parse\"",
        "\"HEAD\"",
        "\"'git rev-parse' failed\"",
        "\"long\"",
        "\"short\"",
        "\"error\"",
        "\"-dirty\"",
        "\"dirty\"",
        "\"-dirty\"",
        "\"-\"",
        "r'^(.+)-(\\d+)-g([0-9a-f]+)$'",
        "\"error\"",
        "\"unable to parse git-describe output: '%s'\"",
        "\"tag '%s' doesn't start with prefix '%s'\"",
        "\"error\"",
        "\"tag '%s' doesn't start with prefix '%s'\"",
        "\"closest-tag\"",
        "\"distance\"",
        "\"short\"",
        "\"closest-tag\"",
        "\"rev-list\"",
        "\"HEAD\"",
        "\"--count\"",
        "\"distance\"",
        "\"+\"",
        "\"closest-tag\"",
        "\"\"",
        "\".\"",
        "\"+\"",
        "\"closest-tag\"",
        "\"closest-tag\"",
        "\"distance\"",
        "\"dirty\"",
        "\"%d.g%s\"",
        "\"distance\"",
        "\"short\"",
        "\"dirty\"",
        "\".dirty\"",
        "\"0+untagged.%d.g%s\"",
        "\"distance\"",
        "\"short\"",
        "\"dirty\"",
        "\".dirty\"",
        "\"closest-tag\"",
        "\"closest-tag\"",
        "\"distance\"",
        "\".post.dev%d\"",
        "\"distance\"",
        "\"0.post.dev%d\"",
        "\"distance\"",
        "\"closest-tag\"",
        "\"closest-tag\"",
        "\"distance\"",
        "\"dirty\"",
        "\".post%d\"",
        "\"distance\"",
        "\"dirty\"",
        "\".dev0\"",
        "\"g%s\"",
        "\"short\"",
        "\"0.post%d\"",
        "\"distance\"",
        "\"dirty\"",
        "\".dev0\"",
        "\"+g%s\"",
        "\"short\"",
        "\"closest-tag\"",
        "\"closest-tag\"",
        "\"distance\"",
        "\"dirty\"",
        "\".post%d\"",
        "\"distance\"",
        "\"dirty\"",
        "\".dev0\"",
        "\"0.post%d\"",
        "\"distance\"",
        "\"dirty\"",
        "\".dev0\"",
        "\"closest-tag\"",
        "\"closest-tag\"",
        "\"distance\"",
        "\"-%d-g%s\"",
        "\"distance\"",
        "\"short\"",
        "\"short\"",
        "\"dirty\"",
        "\"-dirty\"",
        "\"closest-tag\"",
        "\"closest-tag\"",
        "\"-%d-g%s\"",
        "\"distance\"",
        "\"short\"",
        "\"short\"",
        "\"dirty\"",
        "\"-dirty\"",
        "\"error\"",
        "\"version\"",
        "\"unknown\"",
        "\"full-revisionid\"",
        "\"long\"",
        "\"dirty\"",
        "\"error\"",
        "\"error\"",
        "\"default\"",
        "\"pep440\"",
        "\"pep440\"",
        "\"pep440-pre\"",
        "\"pep440-post\"",
        "\"pep440-old\"",
        "\"git-describe\"",
        "\"git-describe-long\"",
        "\"unknown style '%s'\"",
        "\"version\"",
        "\"full-revisionid\"",
        "\"long\"",
        "\"dirty\"",
        "\"dirty\"",
        "\"error\"",
        "'/'",
        "\"version\"",
        "\"0+unknown\"",
        "\"full-revisionid\"",
        "\"dirty\"",
        "\"error\"",
        "\"unable to find root of source tree\"",
        "\"version\"",
        "\"0+unknown\"",
        "\"full-revisionid\"",
        "\"dirty\"",
        "\"error\"",
        "\"unable to compute version\""
    ],
    "variables": [
        "git_refnames",
        "git_full",
        "keywords",
        "cfg",
        "cfg",
        "VCS",
        "cfg",
        "style",
        "cfg",
        "tag_prefix",
        "cfg",
        "parentdir_prefix",
        "cfg",
        "versionfile_source",
        "cfg",
        "verbose",
        "LONG_VERSION_PY",
        "HANDLERS",
        "HANDLERS",
        "vcs",
        "method",
        "p",
        "dispcmd",
        "p",
        "e",
        "stdout",
        "stdout",
        "dirname",
        "keywords",
        "f",
        "mo",
        "keywords",
        "mo",
        "keywords",
        "refnames",
        "refs",
        "TAG",
        "tags",
        "tags",
        "r",
        "GITS",
        "GITS",
        "describe_out",
        "describe_out",
        "full_out",
        "full_out",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "git_describe",
        "dirty",
        "pieces",
        "git_describe",
        "mo",
        "pieces",
        "full_tag",
        "fmt",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "pieces",
        "count_out",
        "pieces",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "style",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "rendered",
        "cfg",
        "verbose",
        "root",
        "root",
        "pieces"
    ],
    "comments": [
        "This file helps to compute a version number in source trees obtained from",
        "git-archive tarball (such as those provided by githubs download-from-tag",
        "feature). Distribution tarballs (built by setup.py sdist) and build",
        "directories (produced by setup.py build) will contain a much shorter file",
        "that just contains the computed version number.",
        "This file is released into the public domain. Generated by",
        "versioneer-0.15 (https://github.com/warner/python-versioneer)",
        "these strings will be replaced by git during git-archive.",
        "setup.py/versioneer.py will grep for the variable names, so they must",
        "each be defined on a line of their own. _version.py will just call",
        "get_keywords().",
        "these strings are filled in when 'setup.py versioneer' creates",
        "_version.py",
        "decorator",
        "remember shell=False, so use git.cmd on windows, not just git",
        "Source tarballs conventionally unpack into a directory that includes",
        "both the project name and a version string.",
        "the code embedded in _version.py can just fetch the value of these",
        "keywords. When used from setup.py, we don't want to import _version.py,",
        "so we do it with a regexp instead. This function is not used from",
        "_version.py.",
        "starting in git-1.8.3, tags are listed as \"tag: foo-1.0\" instead of",
        "just \"foo-1.0\". If we see a \"tag: \" prefix, prefer those.",
        "Either we're using git < 1.8.3, or there really are no tags. We use",
        "a heuristic: assume all version tags have a digit. The old git %d",
        "expansion behaves like git log --decorate=short and strips out the",
        "refs/heads/ and refs/tags/ prefixes that would let us distinguish",
        "between branches and tags. By ignoring refnames without digits, we",
        "filter out many common branch names like \"release\" and",
        "\"stabilization\", as well as \"HEAD\" and \"master\".",
        "sorting will prefer e.g. \"2.0\" over \"2.0rc1\"",
        "no suitable tags, so version is \"0+unknown\", but full hex is still there",
        "this runs 'git' from the root of the source tree. This only gets called",
        "if the git-archive 'subst' keywords were *not* expanded, and",
        "_version.py hasn't already been rewritten with a short version string,",
        "meaning we're inside a checked out source tree.",
        "if there is a tag, this yields TAG-NUM-gHEX[-dirty]",
        "if there are no tags, this yields HEX[-dirty] (no NUM)",
        "--long was added in git-1.5.5",
        "maybe improved later",
        "parse describe_out. It will be like TAG-NUM-gHEX[-dirty] or HEX[-dirty]",
        "TAG might have hyphens.",
        "look for -dirty suffix",
        "now we have TAG-NUM-gHEX or HEX",
        "TAG-NUM-gHEX",
        "unparseable. Maybe git-describe is misbehaving?",
        "tag",
        "distance: number of commits since tag",
        "commit: short hex revision ID",
        "HEX: no tags",
        "total number of commits",
        "now build up version string, with post-release \"local version",
        "identifier\". Our goal: TAG[+DISTANCE.gHEX[.dirty]] . Note that if you",
        "get a tagged build and then dirty it, you'll get TAG+0.gHEX.dirty",
        "exceptions:",
        "1: no tags. git_describe was just HEX. 0+untagged.DISTANCE.gHEX[.dirty]",
        "exception #1",
        "TAG[.post.devDISTANCE] . No -dirty",
        "exceptions:",
        "1: no tags. 0.post.devDISTANCE",
        "exception #1",
        "TAG[.postDISTANCE[.dev0]+gHEX] . The \".dev0\" means dirty. Note that",
        ".dev0 sorts backwards (a dirty tree will appear \"older\" than the",
        "corresponding clean one), but you shouldn't be releasing software with",
        "-dirty anyways.",
        "exceptions:",
        "1: no tags. 0.postDISTANCE[.dev0]",
        "exception #1",
        "TAG[.postDISTANCE[.dev0]] . The \".dev0\" means dirty.",
        "exceptions:",
        "1: no tags. 0.postDISTANCE[.dev0]",
        "exception #1",
        "TAG[-DISTANCE-gHEX][-dirty], like 'git describe --tags --dirty",
        "--always'",
        "exceptions:",
        "1: no tags. HEX[-dirty]  (note: no 'g' prefix)",
        "exception #1",
        "TAG-DISTANCE-gHEX[-dirty], like 'git describe --tags --dirty",
        "--always -long'. The distance/hash is unconditional.",
        "exceptions:",
        "1: no tags. HEX[-dirty]  (note: no 'g' prefix)",
        "exception #1",
        "the default",
        "I am in _version.py, which lives at ROOT/VERSIONFILE_SOURCE. If we have",
        "__file__, we can work backwards from there to the root. Some",
        "py2exe/bbfreeze/non-CPython implementations don't do __file__, in which",
        "case we can only use expanded keywords.",
        "versionfile_source is the relative path from the top of the source",
        "tree (where the .git directory might live) to this file. Invert",
        "this to find the root from __file__."
    ],
    "docstrings": [],
    "functions": [
        "get_keywords",
        "get_config",
        "register_vcs_handler",
        "decorate",
        "run_command",
        "versions_from_parentdir",
        "git_get_keywords",
        "git_versions_from_keywords",
        "git_pieces_from_vcs",
        "plus_or_dot",
        "render_pep440",
        "render_pep440_pre",
        "render_pep440_post",
        "render_pep440_old",
        "render_git_describe",
        "render_git_describe_long",
        "render",
        "get_versions"
    ],
    "classes": [
        "VersioneerConfig",
        "NotThisMethod"
    ]
}