{
    "identifiers": [
        "org",
        "apache",
        "cordova",
        "camera",
        "java",
        "io",
        "ByteArrayOutputStream",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "FileNotFoundException",
        "java",
        "io",
        "FileOutputStream",
        "java",
        "io",
        "java",
        "io",
        "InputStream",
        "java",
        "io",
        "OutputStream",
        "java",
        "net",
        "URI",
        "java",
        "text",
        "SimpleDateFormat",
        "java",
        "util",
        "org",
        "apache",
        "cordova",
        "CallbackContext",
        "org",
        "apache",
        "cordova",
        "CordovaPlugin",
        "org",
        "apache",
        "cordova",
        "CordovaResourceApi",
        "org",
        "apache",
        "cordova",
        "LOG",
        "org",
        "apache",
        "cordova",
        "PluginResult",
        "org",
        "json",
        "JSONArray",
        "org",
        "json",
        "JSONException",
        "android",
        "Manifest",
        "android",
        "app",
        "Activity",
        "android",
        "content",
        "ActivityNotFoundException",
        "android",
        "content",
        "ContentValues",
        "android",
        "content",
        "Intent",
        "android",
        "database",
        "Cursor",
        "android",
        "graphics",
        "Bitmap",
        "android",
        "graphics",
        "Bitmap",
        "CompressFormat",
        "android",
        "graphics",
        "BitmapFactory",
        "android",
        "graphics",
        "Matrix",
        "android",
        "media",
        "MediaScannerConnection",
        "android",
        "media",
        "MediaScannerConnection",
        "MediaScannerConnectionClient",
        "android",
        "net",
        "Uri",
        "android",
        "os",
        "Build",
        "android",
        "os",
        "Bundle",
        "android",
        "os",
        "Environment",
        "android",
        "provider",
        "MediaStore",
        "android",
        "util",
        "Base64",
        "android",
        "util",
        "Log",
        "android",
        "content",
        "pm",
        "PackageManager",
        "DATA_URL",
        "FILE_URI",
        "NATIVE_URI",
        "PHOTOLIBRARY",
        "CAMERA",
        "SAVEDPHOTOALBUM",
        "PICTURE",
        "VIDEO",
        "ALLMEDIA",
        "JPEG",
        "PNG",
        "GET_PICTURE",
        "GET_VIDEO",
        "GET_All",
        "PERMISSION_DENIED_ERROR",
        "TAKE_PIC_SEC",
        "SAVE_TO_ALBUM_SEC",
        "LOG_TAG",
        "CROP_CAMERA",
        "mQuality",
        "targetWidth",
        "targetHeight",
        "imageUri",
        "encodingType",
        "mediaType",
        "destType",
        "srcType",
        "saveToPhotoAlbum",
        "correctOrientation",
        "orientationCorrected",
        "allowEdit",
        "permissions",
        "Manifest",
        "permission",
        "READ_EXTERNAL_STORAGE",
        "callbackContext",
        "numPics",
        "conn",
        "scanMe",
        "croppedUri",
        "requestCode",
        "cordova",
        "requestPermission",
        "requestCode",
        "Manifest",
        "permission",
        "READ_EXTERNAL_STORAGE",
        "action",
        "args",
        "callbackContext",
        "callbackContext",
        "callbackContext",
        "action",
        "equals",
        "srcType",
        "CAMERA",
        "destType",
        "FILE_URI",
        "saveToPhotoAlbum",
        "targetHeight",
        "targetWidth",
        "encodingType",
        "JPEG",
        "mediaType",
        "PICTURE",
        "mQuality",
        "destType",
        "args",
        "getInt",
        "srcType",
        "args",
        "getInt",
        "mQuality",
        "args",
        "getInt",
        "targetWidth",
        "args",
        "getInt",
        "targetHeight",
        "args",
        "getInt",
        "encodingType",
        "args",
        "getInt",
        "mediaType",
        "args",
        "getInt",
        "allowEdit",
        "args",
        "getBoolean",
        "correctOrientation",
        "args",
        "getBoolean",
        "saveToPhotoAlbum",
        "args",
        "getBoolean",
        "targetWidth",
        "targetWidth",
        "targetHeight",
        "targetHeight",
        "targetHeight",
        "targetWidth",
        "mQuality",
        "correctOrientation",
        "encodingType",
        "PNG",
        "srcType",
        "CAMERA",
        "encodingType",
        "JPEG",
        "srcType",
        "CAMERA",
        "callTakePicture",
        "destType",
        "encodingType",
        "srcType",
        "PHOTOLIBRARY",
        "srcType",
        "SAVEDPHOTOALBUM",
        "mediaType",
        "PICTURE",
        "destType",
        "FILE_URI",
        "destType",
        "NATIVE_URI",
        "fileWillBeModified",
        "cordova",
        "hasPermission",
        "permissions",
        "getReadPermission",
        "SAVE_TO_ALBUM_SEC",
        "getImage",
        "srcType",
        "destType",
        "encodingType",
        "e",
        "callbackContext",
        "error",
        "r",
        "PluginResult",
        "Status",
        "ERROR",
        "callbackContext",
        "sendPluginResult",
        "r",
        "r",
        "PluginResult",
        "Status",
        "NO_RESULT",
        "r",
        "setKeepCallback",
        "callbackContext",
        "sendPluginResult",
        "r",
        "cache",
        "Environment",
        "getExternalStorageState",
        "equals",
        "Environment",
        "MEDIA_MOUNTED",
        "cache",
        "cordova",
        "getActivity",
        "getExternalCacheDir",
        "cache",
        "cordova",
        "getActivity",
        "getCacheDir",
        "cache",
        "mkdirs",
        "cache",
        "getAbsolutePath",
        "returnType",
        "encodingType",
        "cordova",
        "hasPermission",
        "permissions",
        "takePicture",
        "returnType",
        "encodingType",
        "getReadPermission",
        "TAKE_PIC_SEC",
        "returnType",
        "encodingType",
        "numPics",
        "queryImgDB",
        "whichContentStore",
        "getCount",
        "intent",
        "MediaStore",
        "ACTION_IMAGE_CAPTURE",
        "photo",
        "createCaptureFile",
        "encodingType",
        "intent",
        "putExtra",
        "android",
        "provider",
        "MediaStore",
        "EXTRA_OUTPUT",
        "Uri",
        "fromFile",
        "photo",
        "imageUri",
        "Uri",
        "fromFile",
        "photo",
        "cordova",
        "mPm",
        "cordova",
        "getActivity",
        "getPackageManager",
        "intent",
        "resolveActivity",
        "mPm",
        "cordova",
        "startActivityForResult",
        "intent",
        "CAMERA",
        "returnType",
        "LOG",
        "d",
        "LOG_TAG",
        "encodingType",
        "createCaptureFile",
        "encodingType",
        "encodingType",
        "fileName",
        "fileName",
        "isEmpty",
        "fileName",
        "encodingType",
        "JPEG",
        "fileName",
        "fileName",
        "encodingType",
        "PNG",
        "fileName",
        "fileName",
        "encodingType",
        "getTempDirectoryPath",
        "fileName",
        "srcType",
        "returnType",
        "encodingType",
        "intent",
        "title",
        "GET_PICTURE",
        "croppedUri",
        "mediaType",
        "PICTURE",
        "intent",
        "setType",
        "allowEdit",
        "intent",
        "setAction",
        "Intent",
        "ACTION_PICK",
        "intent",
        "putExtra",
        "targetWidth",
        "intent",
        "putExtra",
        "targetWidth",
        "targetHeight",
        "intent",
        "putExtra",
        "targetHeight",
        "targetHeight",
        "targetWidth",
        "targetWidth",
        "targetHeight",
        "intent",
        "putExtra",
        "intent",
        "putExtra",
        "photo",
        "createCaptureFile",
        "encodingType",
        "croppedUri",
        "Uri",
        "fromFile",
        "photo",
        "intent",
        "putExtra",
        "android",
        "provider",
        "MediaStore",
        "EXTRA_OUTPUT",
        "croppedUri",
        "intent",
        "setAction",
        "Intent",
        "ACTION_GET_CONTENT",
        "intent",
        "addCategory",
        "Intent",
        "CATEGORY_OPENABLE",
        "mediaType",
        "VIDEO",
        "intent",
        "setType",
        "title",
        "GET_VIDEO",
        "intent",
        "setAction",
        "Intent",
        "ACTION_GET_CONTENT",
        "intent",
        "addCategory",
        "Intent",
        "CATEGORY_OPENABLE",
        "mediaType",
        "ALLMEDIA",
        "intent",
        "setType",
        "title",
        "GET_All",
        "intent",
        "setAction",
        "Intent",
        "ACTION_GET_CONTENT",
        "intent",
        "addCategory",
        "Intent",
        "CATEGORY_OPENABLE",
        "cordova",
        "cordova",
        "startActivityForResult",
        "Intent",
        "createChooser",
        "intent",
        "title",
        "srcType",
        "returnType",
        "picUri",
        "destType",
        "cameraIntent",
        "cropIntent",
        "cropIntent",
        "setDataAndType",
        "picUri",
        "cropIntent",
        "putExtra",
        "targetWidth",
        "cropIntent",
        "putExtra",
        "targetWidth",
        "targetHeight",
        "cropIntent",
        "putExtra",
        "targetHeight",
        "targetHeight",
        "targetWidth",
        "targetWidth",
        "targetHeight",
        "cropIntent",
        "putExtra",
        "cropIntent",
        "putExtra",
        "croppedUri",
        "Uri",
        "fromFile",
        "createCaptureFile",
        "encodingType",
        "currentTimeMillis",
        "cropIntent",
        "putExtra",
        "croppedUri",
        "cordova",
        "cordova",
        "startActivityForResult",
        "cropIntent",
        "CROP_CAMERA",
        "destType",
        "anfe",
        "Log",
        "e",
        "LOG_TAG",
        "processResultFromCamera",
        "destType",
        "cameraIntent",
        "e",
        "e",
        "printStackTrace",
        "Log",
        "e",
        "LOG_TAG",
        "destType",
        "intent",
        "rotate",
        "exif",
        "sourcePath",
        "allowEdit",
        "croppedUri",
        "FileHelper",
        "stripFileProtocol",
        "croppedUri",
        "toString",
        "FileHelper",
        "stripFileProtocol",
        "imageUri",
        "toString",
        "encodingType",
        "JPEG",
        "exif",
        "createInFile",
        "sourcePath",
        "exif",
        "readExifData",
        "rotate",
        "exif",
        "getOrientation",
        "e",
        "e",
        "printStackTrace",
        "bitmap",
        "galleryUri",
        "saveToPhotoAlbum",
        "galleryUri",
        "Uri",
        "fromFile",
        "getPicutresPath",
        "allowEdit",
        "croppedUri",
        "writeUncompressedImage",
        "croppedUri",
        "galleryUri",
        "writeUncompressedImage",
        "imageUri",
        "galleryUri",
        "refreshGallery",
        "galleryUri",
        "destType",
        "DATA_URL",
        "bitmap",
        "getScaledBitmap",
        "sourcePath",
        "bitmap",
        "bitmap",
        "intent",
        "getExtras",
        "get",
        "bitmap",
        "Log",
        "d",
        "LOG_TAG",
        "failPicture",
        "rotate",
        "correctOrientation",
        "bitmap",
        "getRotatedBitmap",
        "rotate",
        "bitmap",
        "exif",
        "processPicture",
        "bitmap",
        "encodingType",
        "saveToPhotoAlbum",
        "checkForDuplicateImage",
        "DATA_URL",
        "destType",
        "FILE_URI",
        "destType",
        "NATIVE_URI",
        "targetHeight",
        "targetWidth",
        "mQuality",
        "correctOrientation",
        "saveToPhotoAlbum",
        "callbackContext",
        "success",
        "galleryUri",
        "toString",
        "uri",
        "Uri",
        "fromFile",
        "createCaptureFile",
        "encodingType",
        "currentTimeMillis",
        "allowEdit",
        "croppedUri",
        "writeUncompressedImage",
        "croppedUri",
        "uri",
        "writeUncompressedImage",
        "imageUri",
        "uri",
        "callbackContext",
        "success",
        "uri",
        "toString",
        "uri",
        "Uri",
        "fromFile",
        "createCaptureFile",
        "encodingType",
        "currentTimeMillis",
        "bitmap",
        "getScaledBitmap",
        "sourcePath",
        "bitmap",
        "Log",
        "d",
        "LOG_TAG",
        "failPicture",
        "rotate",
        "correctOrientation",
        "bitmap",
        "getRotatedBitmap",
        "rotate",
        "bitmap",
        "exif",
        "os",
        "cordova",
        "getActivity",
        "getContentResolver",
        "openOutputStream",
        "uri",
        "compressFormat",
        "encodingType",
        "JPEG",
        "CompressFormat",
        "JPEG",
        "CompressFormat",
        "PNG",
        "bitmap",
        "compress",
        "compressFormat",
        "mQuality",
        "os",
        "os",
        "close",
        "encodingType",
        "JPEG",
        "exifPath",
        "exifPath",
        "uri",
        "getPath",
        "exif",
        "createOutFile",
        "exifPath",
        "exif",
        "writeExifData",
        "callbackContext",
        "success",
        "uri",
        "toString",
        "cleanup",
        "FILE_URI",
        "imageUri",
        "galleryUri",
        "bitmap",
        "bitmap",
        "timeStamp",
        "format",
        "imageFileName",
        "timeStamp",
        "encodingType",
        "JPEG",
        "storageDir",
        "Environment",
        "getExternalStoragePublicDirectory",
        "Environment",
        "DIRECTORY_PICTURES",
        "galleryPath",
        "storageDir",
        "getAbsolutePath",
        "imageFileName",
        "galleryPath",
        "contentUri",
        "mediaScanIntent",
        "Intent",
        "ACTION_MEDIA_SCANNER_SCAN_FILE",
        "mediaScanIntent",
        "setData",
        "contentUri",
        "cordova",
        "getActivity",
        "sendBroadcast",
        "mediaScanIntent",
        "bitmap",
        "uri",
        "realPath",
        "FileHelper",
        "getRealPath",
        "uri",
        "cordova",
        "fileName",
        "realPath",
        "realPath",
        "substring",
        "realPath",
        "lastIndexOf",
        "encodingType",
        "JPEG",
        "modifiedPath",
        "getTempDirectoryPath",
        "fileName",
        "os",
        "modifiedPath",
        "compressFormat",
        "encodingType",
        "JPEG",
        "CompressFormat",
        "JPEG",
        "CompressFormat",
        "PNG",
        "bitmap",
        "compress",
        "compressFormat",
        "mQuality",
        "os",
        "os",
        "close",
        "realPath",
        "encodingType",
        "JPEG",
        "exif",
        "exif",
        "createInFile",
        "realPath",
        "exif",
        "readExifData",
        "correctOrientation",
        "orientationCorrected",
        "exif",
        "resetOrientation",
        "exif",
        "createOutFile",
        "modifiedPath",
        "exif",
        "writeExifData",
        "e",
        "e",
        "printStackTrace",
        "modifiedPath",
        "destType",
        "intent",
        "uri",
        "intent",
        "getData",
        "uri",
        "croppedUri",
        "uri",
        "croppedUri",
        "failPicture",
        "rotate",
        "fileLocation",
        "FileHelper",
        "getRealPath",
        "uri",
        "cordova",
        "Log",
        "d",
        "LOG_TAG",
        "fileLocation",
        "mediaType",
        "PICTURE",
        "callbackContext",
        "success",
        "fileLocation",
        "targetHeight",
        "targetWidth",
        "destType",
        "FILE_URI",
        "destType",
        "NATIVE_URI",
        "correctOrientation",
        "callbackContext",
        "success",
        "uri",
        "toString",
        "uriString",
        "uri",
        "toString",
        "mimeType",
        "FileHelper",
        "getMimeType",
        "uriString",
        "cordova",
        "equalsIgnoreCase",
        "mimeType",
        "equalsIgnoreCase",
        "mimeType",
        "Log",
        "d",
        "LOG_TAG",
        "failPicture",
        "bitmap",
        "bitmap",
        "getScaledBitmap",
        "uriString",
        "e",
        "e",
        "printStackTrace",
        "bitmap",
        "Log",
        "d",
        "LOG_TAG",
        "failPicture",
        "correctOrientation",
        "rotate",
        "getImageOrientation",
        "uri",
        "rotate",
        "matrix",
        "matrix",
        "setRotate",
        "rotate",
        "bitmap",
        "Bitmap",
        "createBitmap",
        "bitmap",
        "bitmap",
        "getWidth",
        "bitmap",
        "getHeight",
        "matrix",
        "orientationCorrected",
        "oom",
        "orientationCorrected",
        "destType",
        "DATA_URL",
        "processPicture",
        "bitmap",
        "encodingType",
        "destType",
        "FILE_URI",
        "destType",
        "NATIVE_URI",
        "targetHeight",
        "targetWidth",
        "correctOrientation",
        "orientationCorrected",
        "modifiedPath",
        "ouputModifiedBitmap",
        "bitmap",
        "uri",
        "callbackContext",
        "success",
        "modifiedPath",
        "currentTimeMillis",
        "e",
        "e",
        "printStackTrace",
        "failPicture",
        "callbackContext",
        "success",
        "fileLocation",
        "bitmap",
        "bitmap",
        "recycle",
        "bitmap",
        "gc",
        "requestCode",
        "resultCode",
        "intent",
        "srcType",
        "requestCode",
        "destType",
        "requestCode",
        "requestCode",
        "CROP_CAMERA",
        "resultCode",
        "Activity",
        "RESULT_OK",
        "destType",
        "requestCode",
        "CROP_CAMERA",
        "processResultFromCamera",
        "destType",
        "intent",
        "e",
        "e",
        "printStackTrace",
        "Log",
        "e",
        "LOG_TAG",
        "resultCode",
        "Activity",
        "RESULT_CANCELED",
        "failPicture",
        "failPicture",
        "srcType",
        "CAMERA",
        "resultCode",
        "Activity",
        "RESULT_OK",
        "allowEdit",
        "tmpFile",
        "Uri",
        "fromFile",
        "createCaptureFile",
        "encodingType",
        "performCrop",
        "tmpFile",
        "destType",
        "intent",
        "processResultFromCamera",
        "destType",
        "intent",
        "e",
        "e",
        "printStackTrace",
        "failPicture",
        "resultCode",
        "Activity",
        "RESULT_CANCELED",
        "failPicture",
        "failPicture",
        "srcType",
        "PHOTOLIBRARY",
        "srcType",
        "SAVEDPHOTOALBUM",
        "resultCode",
        "Activity",
        "RESULT_OK",
        "intent",
        "i",
        "intent",
        "finalDestType",
        "destType",
        "cordova",
        "getThreadPool",
        "execute",
        "processResultFromGallery",
        "finalDestType",
        "i",
        "resultCode",
        "Activity",
        "RESULT_CANCELED",
        "failPicture",
        "failPicture",
        "uri",
        "rotate",
        "cols",
        "MediaStore",
        "Images",
        "Media",
        "ORIENTATION",
        "cursor",
        "cordova",
        "getActivity",
        "getContentResolver",
        "query",
        "uri",
        "cols",
        "cursor",
        "cursor",
        "moveToPosition",
        "rotate",
        "cursor",
        "getInt",
        "cursor",
        "close",
        "e",
        "rotate",
        "rotate",
        "bitmap",
        "exif",
        "matrix",
        "rotate",
        "matrix",
        "setRotate",
        "rotate",
        "matrix",
        "setRotate",
        "rotate",
        "bitmap",
        "getWidth",
        "bitmap",
        "getHeight",
        "bitmap",
        "Bitmap",
        "createBitmap",
        "bitmap",
        "bitmap",
        "getWidth",
        "bitmap",
        "getHeight",
        "matrix",
        "exif",
        "resetOrientation",
        "oom",
        "bitmap",
        "src",
        "dest",
        "fis",
        "os",
        "fis",
        "FileHelper",
        "stripFileProtocol",
        "src",
        "toString",
        "os",
        "cordova",
        "getActivity",
        "getContentResolver",
        "openOutputStream",
        "dest",
        "buffer",
        "len",
        "len",
        "fis",
        "read",
        "buffer",
        "os",
        "write",
        "buffer",
        "len",
        "os",
        "flush",
        "os",
        "os",
        "close",
        "e",
        "LOG",
        "d",
        "LOG_TAG",
        "fis",
        "fis",
        "close",
        "e",
        "LOG",
        "d",
        "LOG_TAG",
        "values",
        "values",
        "put",
        "android",
        "provider",
        "MediaStore",
        "Images",
        "Media",
        "MIME_TYPE",
        "uri",
        "uri",
        "cordova",
        "getActivity",
        "getContentResolver",
        "insert",
        "android",
        "provider",
        "MediaStore",
        "Images",
        "Media",
        "EXTERNAL_CONTENT_URI",
        "values",
        "e",
        "LOG",
        "d",
        "LOG_TAG",
        "uri",
        "cordova",
        "getActivity",
        "getContentResolver",
        "insert",
        "android",
        "provider",
        "MediaStore",
        "Images",
        "Media",
        "INTERNAL_CONTENT_URI",
        "values",
        "ex",
        "LOG",
        "d",
        "LOG_TAG",
        "uri",
        "imageUrl",
        "targetWidth",
        "targetHeight",
        "fileStream",
        "image",
        "fileStream",
        "FileHelper",
        "getInputStreamFromUriString",
        "imageUrl",
        "cordova",
        "image",
        "BitmapFactory",
        "decodeStream",
        "fileStream",
        "fileStream",
        "fileStream",
        "close",
        "e",
        "LOG",
        "d",
        "LOG_TAG",
        "image",
        "options",
        "options",
        "inJustDecodeBounds",
        "fileStream",
        "fileStream",
        "FileHelper",
        "getInputStreamFromUriString",
        "imageUrl",
        "cordova",
        "BitmapFactory",
        "decodeStream",
        "fileStream",
        "options",
        "fileStream",
        "fileStream",
        "close",
        "e",
        "LOG",
        "d",
        "LOG_TAG",
        "options",
        "outWidth",
        "options",
        "outHeight",
        "widthHeight",
        "calculateAspectRatio",
        "options",
        "outWidth",
        "options",
        "outHeight",
        "options",
        "inJustDecodeBounds",
        "options",
        "inSampleSize",
        "calculateSampleSize",
        "options",
        "outWidth",
        "options",
        "outHeight",
        "targetWidth",
        "targetHeight",
        "unscaledBitmap",
        "fileStream",
        "FileHelper",
        "getInputStreamFromUriString",
        "imageUrl",
        "cordova",
        "unscaledBitmap",
        "BitmapFactory",
        "decodeStream",
        "fileStream",
        "options",
        "fileStream",
        "fileStream",
        "close",
        "e",
        "LOG",
        "d",
        "LOG_TAG",
        "unscaledBitmap",
        "Bitmap",
        "createScaledBitmap",
        "unscaledBitmap",
        "widthHeight",
        "widthHeight",
        "origWidth",
        "origHeight",
        "newWidth",
        "targetWidth",
        "newHeight",
        "targetHeight",
        "newWidth",
        "newHeight",
        "newWidth",
        "origWidth",
        "newHeight",
        "origHeight",
        "newWidth",
        "newHeight",
        "newHeight",
        "newWidth",
        "origHeight",
        "origWidth",
        "newWidth",
        "newHeight",
        "newWidth",
        "newHeight",
        "origWidth",
        "origHeight",
        "newRatio",
        "newWidth",
        "newHeight",
        "origRatio",
        "origWidth",
        "origHeight",
        "origRatio",
        "newRatio",
        "newHeight",
        "newWidth",
        "origHeight",
        "origWidth",
        "origRatio",
        "newRatio",
        "newWidth",
        "newHeight",
        "origWidth",
        "origHeight",
        "retval",
        "retval",
        "newWidth",
        "retval",
        "newHeight",
        "retval",
        "srcWidth",
        "srcHeight",
        "dstWidth",
        "dstHeight",
        "srcAspect",
        "srcWidth",
        "srcHeight",
        "dstAspect",
        "dstWidth",
        "dstHeight",
        "srcAspect",
        "dstAspect",
        "srcWidth",
        "dstWidth",
        "srcHeight",
        "dstHeight",
        "contentStore",
        "cordova",
        "getActivity",
        "getContentResolver",
        "query",
        "contentStore",
        "MediaStore",
        "Images",
        "Media",
        "_ID",
        "imageType",
        "oldImage",
        "newImage",
        "bitmap",
        "bitmap",
        "bitmap",
        "recycle",
        "FileHelper",
        "stripFileProtocol",
        "oldImage",
        "toString",
        "checkForDuplicateImage",
        "imageType",
        "saveToPhotoAlbum",
        "newImage",
        "scanForGallery",
        "newImage",
        "gc",
        "diff",
        "contentStore",
        "whichContentStore",
        "cursor",
        "queryImgDB",
        "contentStore",
        "currentNumOfImages",
        "cursor",
        "getCount",
        "FILE_URI",
        "saveToPhotoAlbum",
        "diff",
        "currentNumOfImages",
        "numPics",
        "diff",
        "cursor",
        "moveToLast",
        "id",
        "valueOf",
        "cursor",
        "getString",
        "cursor",
        "getColumnIndex",
        "MediaStore",
        "Images",
        "Media",
        "_ID",
        "diff",
        "id",
        "uri",
        "Uri",
        "parse",
        "contentStore",
        "id",
        "cordova",
        "getActivity",
        "getContentResolver",
        "uri",
        "cursor",
        "close",
        "Environment",
        "getExternalStorageState",
        "equals",
        "Environment",
        "MEDIA_MOUNTED",
        "android",
        "provider",
        "MediaStore",
        "Images",
        "Media",
        "EXTERNAL_CONTENT_URI",
        "android",
        "provider",
        "MediaStore",
        "Images",
        "Media",
        "INTERNAL_CONTENT_URI",
        "bitmap",
        "encodingType",
        "jpeg_data",
        "compressFormat",
        "encodingType",
        "JPEG",
        "CompressFormat",
        "JPEG",
        "CompressFormat",
        "PNG",
        "bitmap",
        "compress",
        "compressFormat",
        "mQuality",
        "jpeg_data",
        "code",
        "jpeg_data",
        "toByteArray",
        "output",
        "Base64",
        "encode",
        "code",
        "Base64",
        "NO_WRAP",
        "js_out",
        "output",
        "callbackContext",
        "success",
        "js_out",
        "js_out",
        "output",
        "code",
        "e",
        "failPicture",
        "jpeg_data",
        "err",
        "callbackContext",
        "error",
        "err",
        "newImage",
        "scanMe",
        "newImage",
        "conn",
        "conn",
        "disconnect",
        "conn",
        "cordova",
        "getActivity",
        "getApplicationContext",
        "conn",
        "connect",
        "conn",
        "scanFile",
        "scanMe",
        "toString",
        "e",
        "LOG",
        "e",
        "LOG_TAG",
        "path",
        "uri",
        "conn",
        "disconnect",
        "requestCode",
        "permissions",
        "grantResults",
        "r",
        "grantResults",
        "r",
        "PackageManager",
        "PERMISSION_DENIED",
        "callbackContext",
        "sendPluginResult",
        "PluginResult",
        "Status",
        "ERROR",
        "PERMISSION_DENIED_ERROR",
        "requestCode",
        "TAKE_PIC_SEC",
        "takePicture",
        "destType",
        "encodingType",
        "SAVE_TO_ALBUM_SEC",
        "getImage",
        "srcType",
        "destType",
        "encodingType",
        "targetWidth",
        "targetHeight",
        "correctOrientation",
        "allowEdit"
    ],
    "literals": [
        "\"Get Picture\"",
        "\"Get Video\"",
        "\"Get All\"",
        "\"CameraLauncher\"",
        "\"takePicture\"",
        "\"Illegal Argument Exception\"",
        "\"Error: You don't have a default camera.  Your device may not be CTS complaint.\"",
        "\"\"",
        "\".Pic\"",
        "\".jpg\"",
        "\".png\"",
        "\"Invalid Encoding Type: \"",
        "\"image/*\"",
        "\"crop\"",
        "\"true\"",
        "\"outputX\"",
        "\"outputY\"",
        "\"aspectX\"",
        "\"aspectY\"",
        "\"video/*\"",
        "\"*/*\"",
        "\"com.android.camera.action.CROP\"",
        "\"image/*\"",
        "\"crop\"",
        "\"true\"",
        "\"outputX\"",
        "\"outputY\"",
        "\"aspectX\"",
        "\"aspectY\"",
        "\"\"",
        "\"output\"",
        "\"Crop operation not supported on this device\"",
        "\"Unable to write to file\"",
        "\"data\"",
        "\"I either have a null image path or bitmap\"",
        "\"Unable to create bitmap!\"",
        "\"\"",
        "\"\"",
        "\"I either have a null image path or bitmap\"",
        "\"Unable to create bitmap!\"",
        "\"yyyyMMdd_HHmmss\"",
        "\"IMG_\"",
        "\".jpg\"",
        "\".png\"",
        "\"/\"",
        "\"modified.\"",
        "\"jpg\"",
        "\"png\"",
        "\"/\"",
        "\"null data from photo library\"",
        "\"File locaton is: \"",
        "\"image/jpeg\"",
        "\"image/png\"",
        "\"I either have a null image path or bitmap\"",
        "\"Unable to retrieve path to picture!\"",
        "\"I either have a null image path or bitmap\"",
        "\"Unable to create bitmap!\"",
        "\"file://\"",
        "\"?\"",
        "\"Error retrieving image.\"",
        "\"Unable to write to file\"",
        "\"Camera cancelled.\"",
        "\"Did not complete!\"",
        "\"Error capturing image.\"",
        "\"Camera cancelled.\"",
        "\"Did not complete!\"",
        "\"Selection cancelled.\"",
        "\"Selection did not complete!\"",
        "\"Exception while closing output stream.\"",
        "\"Exception while closing file input stream.\"",
        "\"image/jpeg\"",
        "\"Can't write to external media storage.\"",
        "\"Can't write to internal media storage.\"",
        "\"Exception while closing file input stream.\"",
        "\"Exception while closing file input stream.\"",
        "\"Exception while closing file input stream.\"",
        "\"/\"",
        "\"Error compressing image.\"",
        "\"image/*\"",
        "\"Can't scan file in MediaScanner after taking picture\""
    ],
    "variables": [
        "mQuality",
        "targetWidth",
        "targetHeight",
        "imageUri",
        "encodingType",
        "mediaType",
        "destType",
        "srcType",
        "saveToPhotoAlbum",
        "correctOrientation",
        "orientationCorrected",
        "allowEdit",
        "callbackContext",
        "numPics",
        "conn",
        "scanMe",
        "croppedUri",
        "exifPath",
        "len",
        "uri"
    ],
    "comments": [
        "Return base64 encoded string",
        "Return file uri (content://media/external/images/media/2 for Android)",
        "On Android, this is the same as FILE_URI",
        "Choose image from picture library (same as SAVEDPHOTOALBUM for Android)",
        "Take picture from camera",
        "Choose image from picture library (same as PHOTOLIBRARY for Android)",
        "allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType",
        "allow selection of video only, ONLY RETURNS URL",
        "allow selection from all media types",
        "Take a picture of type JPEG",
        "Take a picture of type PNG",
        "Where did this come from?",
        "Compression quality hint (0-100: 0=low quality & high compression, 100=compress of max quality)",
        "desired width of the image",
        "desired height of the image",
        "Uri of captured image",
        "Type of encoding to use",
        "What type of media to retrieve",
        "Source type (needs to be saved for the permission handling)",
        "Destination type (needs to be saved for permission handling)",
        "Should the picture be saved to the device's photo album",
        "Should the pictures orientation be corrected",
        "Has the picture's orientation been corrected",
        "Should we allow the user to crop the image.",
        "Used to update gallery app with newly-written files",
        "Uri of image to be added to content store",
        "Take the values from the arguments if they're not already defined (this is tricky)",
        "If the user specifies a 0 or smaller width/height",
        "make it -1 so later comparisons succeed",
        "We don't return full-quality PNG files. The camera outputs a JPEG",
        "so requesting it as a PNG provides no actual benefit",
        "Any options that edit the file require READ permissions in order to try and",
        "preserve the original exif data and filename in the modified file that is",
        "created",
        "--------------------------------------------------------------------------",
        "LOCAL METHODS",
        "--------------------------------------------------------------------------",
        "SD Card Mounted",
        "Use internal storage",
        "Create the cache directory if it doesn't exist",
        "Save the number of images currently on disk for later",
        "Let's use the intent and see what happens",
        "Specify file so that large image is captured and returned",
        "Let's check to make sure the camera is actually installed. (Legacy Nexus 7 code)",
        "else",
        "LOG.d(LOG_TAG, \"ERROR: You must use the CordovaInterface for this to work correctly. Please implement it in your activity\");",
        "TODO: Images selected from SDCARD don't display correctly, but from CAMERA ALBUM do!",
        "TODO: Images from kitkat filechooser not going into crop function",
        "I wanted to make the type 'image/*, video/*' but this does not work on all versions",
        "of android so I had to go with the wildcard search.",
        "indicate image type and Uri",
        "set crop properties",
        "indicate output X and Y",
        "create new file handle to get full resolution crop",
        "start the activity - we handle returning in onActivityResult",
        "Create an ExifHelper to save the exif data that is lost during compression",
        "We don't support PNG, so let's not pretend we do",
        "CB-5479 When this option is given the unchanged image should be saved",
        "in the gallery and the modified image is saved in the temporary",
        "directory",
        "If sending base64 image back",
        "Try to get the bitmap from intent.",
        "Double-check the bitmap.",
        "If sending filename back",
        "If all this is true we shouldn't compress the image.",
        "If we saved the uncompressed photo to the album, we can just",
        "return the URI we already created",
        "Double-check the bitmap.",
        "Add compressed version of captured image to returned media store Uri",
        "Restore exif data to file",
        "Send Uri back to JavaScript for viewing image",
        "Some content: URIs do not map to file paths (e.g. picasa).",
        "Get filename from uri",
        "Create an ExifHelper to save the exif data that is lost during compression",
        "If you ask for video or all media type you will automatically get back a file URI",
        "and there will be no attempt to resize any returned data",
        "This is a special case to just return the path as no scaling,",
        "rotating, nor compressing needs to be done",
        "Get the path to the image. Makes loading so much easier.",
        "If we don't have a valid image so quit.",
        "If sending base64 image back",
        "If sending filename back",
        "Did we modify the image?",
        "The modified image is cached by the app in order to get around this and not have to delete you",
        "application cache I'm adding the current system time to the end of the file url.",
        "Get src and dest types from request code for a Camera Activity",
        "If Camera Crop",
        "Because of the inability to pass through multiple intents, this hack will allow us",
        "to pass arcane codes back.",
        "If cancelled",
        "If something else",
        "If CAMERA",
        "If image available",
        "If cancelled",
        "If something else",
        "If retrieving photo from library",
        "You can get an IllegalArgumentException if ContentProvider doesn't support querying for orientation.",
        "You can run out of memory if the image is very large:",
        "http://simonmacdonald.blogspot.ca/2012/07/change-to-camera-code-in-phonegap-190.html",
        "If this happens, simply do not rotate the image and return it unmodified.",
        "If you do not catch the OutOfMemoryError, the Android app crashes.",
        "If no new width or height were specified return the original bitmap",
        "figure out the original width and height of the image",
        "CB-2292: WTF? Why is the width null?",
        "determine the correct aspect ratio",
        "Load in the smallest bitmap possible that is closest to the size we want",
        "If no new width or height were specified return the original bitmap",
        "Only the width was specified",
        "only the height was specified",
        "If the user specified both a positive width and height",
        "(potentially different aspect ratio) then the width or height is",
        "scaled so that the image fits while maintaining aspect ratio.",
        "Alternatively, the specified width and height could have been",
        "kept and Bitmap.SCALE_TO_FIT specified when scaling, but this",
        "would result in whitespace in the new image.",
        "Clean up initial camera-written image file.",
        "Scan for the gallery to update pic refs in gallery",
        "delete the duplicate file if the difference is 2 for file URI or 1 for Data URL"
    ],
    "docstrings": [
        "Licensed to the Apache Software Foundation (ASF) under one\n       or more contributor license agreements.  See the NOTICE file\n       distributed with this work for additional information\n       regarding copyright ownership.  The ASF licenses this file\n       to you under the Apache License, Version 2.0 (the\n       \"License\"); you may not use this file except in compliance\n       with the License.  You may obtain a copy of the License at\n\n         http://www.apache.org/licenses/LICENSE-2.0\n\n       Unless required by applicable law or agreed to in writing,\n       software distributed under the License is distributed on an\n       \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n       KIND, either express or implied.  See the License for the\n       specific language governing permissions and limitations\n       under the License.",
        "* This class launches the camera view, allows the user to take a picture, closes the camera view,\n * and returns the captured image.  When the camera view is closed, the screen displayed before\n * the camera view was shown is redisplayed.",
        "* Executes the request and returns PluginResult.\n     *\n     * @param action            The action to execute.\n     * @param args              JSONArry of arguments for the plugin.\n     * @param callbackContext   The callback id used when calling back into JavaScript.\n     * @return                  A PluginResult object with a status and message.",
        "* Take a picture with the camera.\n     * When an image is captured or the camera view is cancelled, the result is returned\n     * in CordovaActivity.onActivityResult, which forwards the result to this.onActivityResult.\n     *\n     * The image can either be returned as a base64 string or a URI that points to the file.\n     * To display base64 string in an img tag, set the source to:\n     *      img.src=\"data:image/jpeg;base64,\"+result;\n     * or to display URI in an img tag\n     *      img.src=result;\n     *\n     * @param quality           Compression quality hint (0-100: 0=low quality & high compression, 100=compress of max quality)\n     * @param returnType        Set the type of image to return.",
        "* Create a file in the applications temporary directory based upon the supplied encoding.\n     *\n     * @param encodingType of the image to be taken\n     * @return a File object pointing to the temporary picture",
        "* Create a file in the applications temporary directory based upon the supplied encoding.\n     *\n     * @param encodingType of the image to be taken\n     * @param fileName or resultant File object.\n     * @return a File object pointing to the temporary picture",
        "* Get image from photo library.\n     *\n     * @param quality           Compression quality hint (0-100: 0=low quality & high compression, 100=compress of max quality)\n     * @param srcType           The album to get image from.\n     * @param returnType        Set the type of image to return.\n     * @param encodingType",
        "* Brings up the UI to perform crop on passed image URI\n   *\n   * @param picUri",
        "* Applies all needed transformation to the image received from the camera.\n     *\n     * @param destType          In which form should we return the image\n     * @param intent            An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\").",
        "* Applies all needed transformation to the image received from the gallery.\n     *\n     * @param destType          In which form should we return the image\n     * @param intent            An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\").",
        "* Called when the camera view exits.\n     *\n     * @param requestCode       The request code originally supplied to startActivityForResult(),\n     *                          allowing you to identify who this result came from.\n     * @param resultCode        The integer result code returned by the child activity through its setResult().\n     * @param intent            An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\").",
        "* Figure out if the bitmap should be rotated. For instance if the picture was taken in\n     * portrait mode\n     *\n     * @param rotate\n     * @param bitmap\n     * @return rotated bitmap",
        "* In the special case where the default width, height and quality are unchanged\n     * we just write the file out to disk saving the expensive Bitmap.compress function.\n     *\n     * @param uri\n     * @throws FileNotFoundException\n     * @throws IOException",
        "* Create entry in media store for image\n     *\n     * @return uri",
        "* Return a scaled bitmap based on the target width and height\n     *\n     * @param imagePath\n     * @return\n     * @throws IOException",
        "* Maintain the aspect ratio so the resulting image does not look smooshed\n     *\n     * @param origWidth\n     * @param origHeight\n     * @return",
        "* Figure out what ratio we can load our image into memory at while still being bigger than\n     * our desired width and height\n     *\n     * @param srcWidth\n     * @param srcHeight\n     * @param dstWidth\n     * @param dstHeight\n     * @return",
        "* Creates a cursor that can be used to determine how many images we have.\n     *\n     * @return a cursor",
        "* Cleans up after picture taking. Checking for duplicates and that kind of stuff.\n     * @param newImage",
        "* Used to find out if we are in a situation where the Camera Intent adds to images\n     * to the content store. If we are using a FILE_URI and the number of images in the DB\n     * increases by 2 we have a duplicate, when using a DATA_URL the number is 1.\n     *\n     * @param type FILE_URI or DATA_URL",
        "* Determine if we are storing the images in internal or external storage\n     * @return Uri",
        "* Compress bitmap using jpeg, convert to Base64 encoded string, and return to JavaScript.\n     *\n     * @param bitmap",
        "* Send error message to JavaScript.\n     *\n     * @param err"
    ],
    "functions": [
        "getReadPermission",
        "execute",
        "getTempDirectoryPath",
        "callTakePicture",
        "takePicture",
        "File",
        "createCaptureFile",
        "File",
        "createCaptureFile",
        "getImage",
        "performCrop",
        "processResultFromCamera",
        "getPicutresPath",
        "refreshGallery",
        "ouputModifiedBitmap",
        "processResultFromGallery",
        "onActivityResult",
        "run",
        "getImageOrientation",
        "Bitmap",
        "getRotatedBitmap",
        "writeUncompressedImage",
        "Uri",
        "getUriFromMediaStore",
        "Bitmap",
        "getScaledBitmap",
        "calculateAspectRatio",
        "calculateSampleSize",
        "Cursor",
        "queryImgDB",
        "cleanup",
        "checkForDuplicateImage",
        "Uri",
        "whichContentStore",
        "processPicture",
        "failPicture",
        "scanForGallery",
        "onMediaScannerConnected",
        "onScanCompleted",
        "onRequestPermissionResult",
        "fileWillBeModified"
    ],
    "classes": [
        "CameraLauncher"
    ]
}