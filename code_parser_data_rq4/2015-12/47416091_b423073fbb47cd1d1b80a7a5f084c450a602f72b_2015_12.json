{
    "identifiers": [
        "microbit",
        "minimum",
        "n",
        "maximum",
        "max",
        "minimum",
        "min",
        "n",
        "maximum",
        "src_scale",
        "dest_scale",
        "x",
        "src_scale",
        "x",
        "src_start",
        "src_end",
        "src_start",
        "dest_scale",
        "proportion",
        "dest_end",
        "dest_start",
        "dest_start",
        "brightness",
        "clamp",
        "MIN_BRIGHTNESS",
        "round",
        "brightness",
        "MAX_BRIGHTNESS",
        "col",
        "DISPLAY_WIDTH",
        "row",
        "DISPLAY_HEIGHT",
        "col",
        "row",
        "microbit",
        "display",
        "set_pixel",
        "col",
        "row",
        "brightness",
        "col",
        "row",
        "microbit",
        "display",
        "get_pixel",
        "col",
        "row",
        "clamp",
        "MIN_BRIGHTNESS",
        "brightness",
        "MAX_BRIGHTNESS",
        "microbit",
        "display",
        "set_pixel",
        "col",
        "row",
        "brightness",
        "microbit",
        "accelerometer",
        "get_values",
        "rescale",
        "ONE_G",
        "ONE_G",
        "X",
        "rescale",
        "ONE_G",
        "ONE_G",
        "Z",
        "col",
        "row",
        "Y",
        "DISPLAY_HEIGHT",
        "row",
        "row",
        "turn_factor",
        "col",
        "spill_factor",
        "rescale",
        "ONE_G",
        "MAX_BRIGHTNESS",
        "MEDIUM_BRIGHTNESS",
        "abs",
        "Z",
        "light",
        "overall_brightness",
        "paint_water",
        "microbit",
        "sleep",
        "fade_display"
    ],
    "literals": [],
    "variables": [
        "DISPLAY_WIDTH",
        "DISPLAY_HEIGHT",
        "MIN_BRIGHTNESS",
        "MEDIUM_BRIGHTNESS",
        "MAX_BRIGHTNESS",
        "ONE_G",
        "src_start",
        "src_end",
        "proportion",
        "dest_start",
        "dest_end",
        "brightness",
        "brightness",
        "brightness",
        "X",
        "Y",
        "Z",
        "turn_factor",
        "spill_factor",
        "row",
        "overall_brightness"
    ],
    "comments": [
        "define some constants",
        "this is how the accelerometer values 1g of gravity",
        "Some maths functions to help us",
        "what proportion along src_scale x is:",
        "apply our proportion to the dest_scale",
        "Helpers for controling the display",
        "reduce by one, but make sure it's still in 0 to 9",
        "read the current orientation values from the accelerometer",
        "map the force in the X-axis to a turn factor from -2 to 2",
        "-ONE_G is button A at the top, ONE_G is button B at the top",
        "map the force in the Z-axis to a spill factor from -3 to 3",
        "this allows the water to cover the whole display when it's flat",
        "use the variables above to make a filter function, customised for the",
        "current orientation of the micro:bit",
        "we're upside down, so reverse the y-axis value",
        "(- 1 because we start counting rows from 0, not 1)",
        "remember rows count down from the top, so we want to light up all",
        "the rows below the water line (when the micro:bit is help up straight)",
        "The forumula here is of the form y = m*x + c",
        "We have a couple of \"- 2\"s to centre the water level in the middle",
        "of the display",
        "we want the water to \"dilute\" when spread out across the whole display",
        "light up the pixels when filter returns true, to the given bright level",
        "loop forever painting watery pixels, sleeping and then fading as each pixel",
        "washes away into the night",
        "fade all pixels by one brightness level"
    ],
    "docstrings": [
        "\"\"\"\nDigital Water - your micro water simulator. By Tom Viner\n\nExplanation and see running:\nhttps://www.youtube.com/watch?v=OBTUjoc46Pk\n\"\"\"",
        "\"\"\"Return the nearest value to n, that's within minimum to maximum (incl)\n    \"\"\"",
        "\"\"\"Map one number scale to another\n\n    For example, to convert a score of 4 stars out of 5 into a percentage:\n    >>> rescale((0, 5), (0, 100), 4)\n    80.0\n\n    Great for mapping different input values into LED pixel brightnesses!\n    \"\"\"",
        "\"\"\"Light up all pixels matching the filter function\n    \"\"\"",
        "\"\"\"Reduce every pixel by 1 brightness level\n\n    This means as we draw new things, the old ones will fade away\n    \"\"\"",
        "\"\"\"Use the accelerometer to paint a water level on the display\n    \"\"\"",
        "\"\"\"For a given pixel position, decide if it should be on or not\n        \"\"\""
    ],
    "functions": [
        "clamp",
        "rescale",
        "light",
        "fade_display",
        "paint_water"
    ],
    "classes": []
}