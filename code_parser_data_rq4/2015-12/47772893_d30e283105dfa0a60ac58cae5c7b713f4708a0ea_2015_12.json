{
    "identifiers": [
        "json",
        "subprocess",
        "sys",
        "os",
        "path",
        "exists",
        "join",
        "split",
        "jupyter_client",
        "kernelspec",
        "KernelSpecManager",
        "KernelSpec",
        "NoSuchKernel",
        "KernelSpecManager",
        "kwargs",
        "CondaKernelSpecManager",
        "kwargs",
        "_conda_info",
        "subprocess",
        "check_output",
        "decode",
        "json",
        "loads",
        "p",
        "conda_info",
        "first_read",
        "conda_info",
        "_conda_info",
        "update_conda_info",
        "conda_info",
        "conda_info",
        "update_conda_info",
        "sys",
        "platform",
        "startswith",
        "join",
        "join",
        "join",
        "join",
        "split",
        "join",
        "python",
        "conda_info",
        "exists",
        "join",
        "jupyter",
        "join",
        "conda_info",
        "jupyter",
        "exists",
        "root_prefix",
        "python_exe",
        "update",
        "join",
        "conda_info",
        "python",
        "python_exe",
        "name",
        "executable",
        "_python_executable",
        "items",
        "executable",
        "name",
        "kspecs",
        "update",
        "name",
        "KernelSpec",
        "kspec",
        "kspecs",
        "CondaKernelSpecManager",
        "find_kernel_specs",
        "kspecs",
        "kspecs",
        "pop",
        "kspecs",
        "kspecs",
        "pop",
        "kspecs",
        "update",
        "_python_executable",
        "kspecs",
        "kernel_name",
        "kernel_name",
        "_conda_kspecs",
        "_conda_kspecs",
        "kernel_name",
        "CondaKernelSpecManager",
        "get_kernel_spec",
        "kernel_name"
    ],
    "literals": [
        "\"Get and parse the whole conda information\"",
        "\"conda\"",
        "\"info\"",
        "\"--json\"",
        "\"utf-8\"",
        "\"envs\"",
        "\"envs\"",
        "'win'",
        "\"Scripts\"",
        "\"python\"",
        "\"Scripts\"",
        "\"jupyter\"",
        "\"bin\"",
        "\"python\"",
        "\"bin\"",
        "\"jupyter\"",
        "\"envs\"",
        "\"root_prefix\"",
        "\"root\"",
        "\"root_prefix\"",
        "\"Create a kernelspec for each of the envs where jupyter is installed\"",
        "\"argv\"",
        "\"-m\"",
        "\"ipykernel\"",
        "\"-f\"",
        "\"{connection_file}\"",
        "\"display_name\"",
        "\"env\"",
        "\"python3\"",
        "\"python3\"",
        "\"python2\"",
        "\"python2\""
    ],
    "variables": [
        "first_read",
        "conda_info",
        "p",
        "conda_info",
        "conda_info",
        "first_read",
        "update_conda_info",
        "conda_info",
        "conda_info",
        "python",
        "jupyter",
        "python",
        "jupyter",
        "python_exe",
        "root_prefix",
        "kspecs",
        "kspec",
        "kspecs"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "at /tree all the kernelspec are loaded... we need to get conda_info at",
        "the very beginning to avoid a large loading time",
        "First time we load the conda info from the __init__",
        "but after that, we check if there is not a new env",
        "play safe with windows",
        "python_exe = {name_env: python_path_env}",
        "We also add the root prefix into the soup",
        "remove native kernels because it is provided by the env name",
        "add conda envs kernelspecs"
    ],
    "docstrings": [
        "\"\"\"A custom KernelSpecManager able to search for conda environments and\n    create kernelspecs for them.\n    \"\"\"",
        "\"\"\"Find the python executable for each env where jupyter is installed.\n\n        Returns a dict with the envs names as keys and the paths to the python\n        exectuable in each env as value if jupyter is installed in that env.\n        \"\"\"",
        "\"\"\"Returns a dict mapping kernel names to resource directories.\n\n        The update process also add the resource dir for the conda environments.\n        \"\"\"",
        "\"\"\"Returns a :class:`KernelSpec` instance for the given kernel_name.\n\n        Additionally, conda kernelspecs are generated on the fly accordingly\n        with the detected envitonments.\n        Raises :exc:`NoSuchKernel` if the given kernel name is not found.\n        \"\"\""
    ],
    "functions": [
        "_conda_info",
        "_python_executable",
        "_conda_kspecs",
        "find_kernel_specs",
        "get_kernel_spec"
    ],
    "classes": [
        "CondaKernelSpecManager"
    ]
}