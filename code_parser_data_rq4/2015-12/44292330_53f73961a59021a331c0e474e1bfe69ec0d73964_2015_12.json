{
    "identifiers": [
        "path",
        "Path",
        "relation",
        "Relation",
        "Var",
        "Var",
        "key",
        "value",
        "lhs",
        "rhs",
        "relation",
        "_parse_clause",
        "key",
        "value",
        "isinstance",
        "rhs",
        "Var",
        "value",
        "lhs",
        "rhs",
        "lhs",
        "Path",
        "lhs",
        "OutVar",
        "len",
        "lhs",
        "lhs",
        "Path",
        "lhs",
        "TempVar",
        "Relation",
        "rhs",
        "lhs",
        "Path",
        "lhs",
        "TempVar",
        "Relation",
        "rhs",
        "lhs",
        "Path",
        "lhs",
        "TempVar",
        "Relation",
        "rhs",
        "lhs",
        "Path",
        "lhs",
        "TempVar",
        "Relation",
        "rhs",
        "lhs",
        "Path",
        "lhs",
        "TempVar",
        "Relation",
        "rhs",
        "lhs",
        "Path",
        "lhs",
        "TempVar",
        "Relation",
        "rhs",
        "lhs",
        "Path",
        "lhs",
        "TempVar",
        "Relation",
        "rhs",
        "Path",
        "lhs",
        "rhs",
        "other",
        "relation",
        "other",
        "relation",
        "relation",
        "merge",
        "other",
        "relation",
        "relation",
        "other",
        "relation",
        "isinstance",
        "rhs",
        "TempVar",
        "other",
        "rhs",
        "isinstance",
        "other",
        "rhs",
        "TempVar",
        "ValueError",
        "format",
        "rhs",
        "rhs",
        "other_rhs",
        "other",
        "rhs",
        "repr",
        "other",
        "repr",
        "other",
        "Relation",
        "rhs",
        "TempVar",
        "Clause",
        "lhs",
        "rhs",
        "value",
        "relation",
        "format",
        "__dict__",
        "format",
        "__dict__",
        "other",
        "lhs",
        "other",
        "lhs",
        "isinstance",
        "rhs",
        "Var",
        "rhs",
        "__class__",
        "other",
        "rhs",
        "__class__",
        "rhs",
        "other",
        "rhs",
        "relation",
        "other",
        "relation",
        "other",
        "other"
    ],
    "literals": [
        "'?'",
        "'=='",
        "'=='",
        "'!='",
        "'!='",
        "'<='",
        "'<='",
        "'>='",
        "'>='",
        "'|='",
        "'|='",
        "'<'",
        "'<'",
        "'>'",
        "'>'",
        "'both clauses cant have a non-TempVar '",
        "'rhs: {rhs}, {other_rhs}; {self}, {other}'",
        "'=='",
        "'_'",
        "'{lhs} {rhs}'",
        "'<Clause ({lhs}) ({rhs}) ({relation})>'"
    ],
    "variables": [
        "value",
        "value",
        "relation",
        "relation",
        "rhs",
        "relation",
        "rhs",
        "lhs",
        "rhs",
        "value",
        "relation"
    ],
    "comments": [
        "TODO: document what self.value is",
        "relational clauses get a TempVar rhs to signify that we need to",
        "compute their value, but the consumer of the query isn't interested",
        "in getting the value in the output",
        "I truly don't want to do isinstance here, the types need to",
        "match"
    ],
    "docstrings": [
        "\"\"\" Combine other clause into self by mutating self\n\n        This happens when we get additional constraints in a clause:\n\n            'x?': None,\n            'x>': 1,\n\n        or when a query search is taking place and it wants to ensure\n        that a TempVar is marked on a path that it depends on.  This\n        may happen if there is a relational constraint on a path that\n        another cause depends on as an input.\n        \"\"\"",
        "\"\"\" converts self from a ground clause with a value to an unground\n        clause with a == relation \"\"\""
    ],
    "functions": [
        "_parse_clause",
        "merge",
        "convert_to_constraint",
        "copy",
        "__str__",
        "__repr__",
        "__eq__",
        "__ne__"
    ],
    "classes": [
        "Var",
        "OutVar",
        "TempVar",
        "Clause"
    ]
}