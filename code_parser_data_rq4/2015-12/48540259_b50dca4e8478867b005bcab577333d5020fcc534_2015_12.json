{
    "identifiers": [
        "DebugSession",
        "InitializedEvent",
        "TerminatedEvent",
        "StoppedEvent",
        "OutputEvent",
        "ThreadEvent",
        "StackFrame",
        "Scope",
        "Source",
        "Handles",
        "Breakpoint",
        "Variable",
        "DebugProtocol",
        "net",
        "parseString",
        "XMLNode",
        "XDebugConnection",
        "moment",
        "url",
        "path",
        "os",
        "iconv",
        "pathName",
        "pathName",
        "pathName",
        "encodeURI",
        "pathName",
        "uri",
        "url",
        "uri",
        "connection",
        "level",
        "connection",
        "level",
        "StackFrame",
        "contextId",
        "StackFrame",
        "contextId",
        "context",
        "longName",
        "context",
        "longName",
        "DebugSession",
        "net",
        "debuggerLinesStartAt1",
        "isServer",
        "debuggerLinesStartAt1",
        "isServer",
        "response",
        "DebugProtocol",
        "args",
        "args",
        "net",
        "server",
        "socket",
        "XDebugConnection",
        "socket",
        "connection",
        "connection",
        "ThreadEvent",
        "connection",
        "connection",
        "connection",
        "connection",
        "connection",
        "InitializedEvent",
        "connection",
        "server",
        "args",
        "response",
        "connection",
        "StoppedEvent",
        "connection",
        "connection",
        "response",
        "response",
        "connection",
        "response",
        "connection",
        "response",
        "response",
        "status",
        "status",
        "TerminatedEvent",
        "status",
        "reason",
        "reason",
        "stoppedEventReason",
        "reason",
        "stoppedEventReason",
        "StoppedEvent",
        "connection",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "path2uri",
        "args",
        "args",
        "line",
        "file",
        "line",
        "xdebugReponse",
        "xdebugReponse",
        "xdebugReponse",
        "breakpoints",
        "Breakpoint",
        "line",
        "error",
        "args",
        "error",
        "breakpoints",
        "Breakpoint",
        "line",
        "response",
        "response",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "response",
        "response",
        "DebugProtocol",
        "response",
        "connection",
        "connection",
        "connection",
        "moment",
        "connection",
        "response",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "args",
        "connection",
        "xdebugResponse",
        "response",
        "xdebugResponse",
        "stackNode",
        "uri2path",
        "stackNode",
        "Source",
        "path",
        "file",
        "file",
        "parseInt",
        "stackNode",
        "parseInt",
        "stackNode",
        "stackNode",
        "stackFrameId",
        "XDebugStackFrame",
        "connection",
        "level",
        "StackFrame",
        "stackFrameId",
        "name",
        "source",
        "line",
        "response",
        "error",
        "response",
        "error",
        "error",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "args",
        "stackFrame",
        "stackFrame",
        "xdebugResponse",
        "xdebugResponse",
        "response",
        "xdebugResponse",
        "contextNode",
        "parseInt",
        "contextNode",
        "contextNode",
        "variableId",
        "XDebugContext",
        "stackFrame",
        "contextId",
        "Scope",
        "contextName",
        "variableId",
        "response",
        "error",
        "response",
        "error",
        "error",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "args",
        "context",
        "args",
        "xdebugRequest",
        "context",
        "context",
        "context",
        "args",
        "args",
        "context",
        "variable",
        "xdebugRequest",
        "context",
        "context",
        "context",
        "variable",
        "xdebugResponse",
        "xdebugResponse",
        "xdebugResponse",
        "xdebugResponse",
        "args",
        "response",
        "xdebugRequest",
        "xdebugResponse",
        "xdebugResponse",
        "xdebugResponse",
        "response",
        "response",
        "xdebugResponse",
        "propertyNode",
        "propertyNode",
        "parseInt",
        "propertyNode",
        "propertyNode",
        "variableReference",
        "propertyNode",
        "variableReference",
        "XDebugProperty",
        "context",
        "longName",
        "value",
        "propertyNode",
        "variableReference",
        "propertyNode",
        "value",
        "Buffer",
        "propertyNode",
        "value",
        "propertyNode",
        "propertyNode",
        "value",
        "value",
        "Variable",
        "name",
        "value",
        "variableReference",
        "response",
        "error",
        "response",
        "error",
        "error",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "args",
        "connection",
        "response",
        "response",
        "connection",
        "response",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "args",
        "connection",
        "response",
        "response",
        "connection",
        "response",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "args",
        "connection",
        "response",
        "response",
        "connection",
        "response",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "args",
        "connection",
        "response",
        "response",
        "connection",
        "response",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "response",
        "response",
        "DebugProtocol",
        "args",
        "DebugProtocol",
        "connection",
        "id",
        "response",
        "DebugSession",
        "PhpDebugSession"
    ],
    "literals": [
        "'vscode-debugadapter'",
        "'vscode-debugprotocol'",
        "'net'",
        "'assert'",
        "'xml2js'",
        "'./xdebugConnection'",
        "'moment'",
        "'url'",
        "'path'",
        "'os'",
        "'iconv-lite'",
        "string",
        "string",
        "'/'",
        "'/'",
        "'/'",
        "'file://'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'connection'",
        "'started'",
        "'exception_breakpoints_set'",
        "'entry'",
        "'status'",
        "'reason'",
        "'stopping'",
        "'stopped'",
        "'break'",
        "'exception'",
        "'error'",
        "'exception'",
        "'ok'",
        "'breakpoint'",
        "'breakpoint'",
        "'setBreakPointsRequest'",
        "'error'",
        "'Breakpoint could not be set'",
        "'breakpoints_set'",
        "'setExceptionBreakPointsRequest'",
        "'exception_breakpoints_set'",
        "'threadsRequest'",
        "Request ${connection.id} (${moment(connection.timeEstablished).format('LTS')})",
        "'LTS'",
        "'stackTraceRequest'",
        "'stack'",
        "'filename'",
        "'lineno'",
        "'level'",
        "'where'",
        "'scopesRequest'",
        "'error'",
        "'context'",
        "'id'",
        "'name'",
        "'variablesRequest'",
        "'error'",
        "'property'",
        "'Unknown variable reference: '",
        "'Known variables: '",
        "'Unknown variable reference'",
        "'property'",
        "'property'",
        "'name'",
        "string",
        "'children'",
        "'type'",
        "'array'",
        "'fullname'",
        "'type'",
        "'encoding'",
        "'base64'",
        "'base64'",
        "'type'",
        "'string'",
        "'\"'",
        "'\"'",
        "'continueRequest'",
        "'nextRequest'",
        "'stepInRequest'",
        "'stepOutRequest'",
        "'pauseRequest'",
        "'Pausing the execution is not supported by XDebug'",
        "'disconnectRequest'"
    ],
    "variables": [
        "pathName",
        "server",
        "connection",
        "status",
        "reason",
        "stoppedEventReason",
        "file",
        "breakpoints",
        "connection",
        "file",
        "source",
        "line",
        "stackFrameId",
        "level",
        "name",
        "stackFrame",
        "contextId",
        "contextName",
        "variableId",
        "xdebugRequest",
        "context",
        "variable",
        "name",
        "variableReference",
        "value",
        "longName",
        "connection",
        "connection",
        "connection",
        "connection",
        "id",
        "connection"
    ],
    "comments": [
        "---------------------------------------------------------\n * Copyright (C) Microsoft Corporation. All rights reserved.\n *--------------------------------------------------------",
        "The port where the adapter should listen for XDebug connections (default: 9000)",
        "Automatically stop target after launch. If not specified, target does not stop.",
        "This is the unique long name under which the property can be referenced INSIDE a context",
        "All XDebug Connections. XDebug makes a new connection for each request to the webserver.",
        "The first connection we receive, because we only have to set breakpoints once.",
        "A counter for unique stackframe IDs",
        "Maps a stackframe ID to its connection and the level inside the stacktrace for scope requests",
        "A counter for unique scope and variable IDs (as the content of a scope is requestet by a VariableRequest by VS Code)",
        "A map that maps a unique VS Code variable ID to an XDebug contextId and an XDebug stackframe",
        "A map that maps a unique VS Code variable ID to an XDebug scope and an XDebug long variable name",
        "new XDebug connection",
        "this is a new connection, for example triggered by a seperate, parallel request to the webserver.",
        "We tell VS Code that this is a new thread, but do not have to set breakpoints again as they are shared automatically.",
        "this is the first connection. We wait for the init event and then tell VS Code that we're ready to receive breakpoints.",
        "VS Code first calls setBreakPointsRequest multiple times and then setExceptionBreakPointsRequest ONCE.",
        "thats our sign that we can run the script",
        "either tell VS Code we stopped on entry or run the script",
        "StoppedEvent reason can be 'step', 'breakpoint', 'exception', 'pause'",
        "TODO: do we have to check if there is a breakpoint on that line?",
        "TODO: clear breakpoints",
        "it appears to me that breaking on caught or uncaught exception is not set with a dbgp command,",
        "but through a php.ini setting. Maybe we can call eval() with ini_set()?",
        "Does remote_mode have to be set to jit?",
        "Can we just set an exception breakpoint for the \"Exception\" class (or \"Throwable\" in PHP7), as all Exceptions inherit from it? -> feature_get language_version",
        "maybe add a setting to launch.json?",
        "PHP doesn't have threads, but it may have multiple requests in parallel.",
        "Think about a website that makes multiple, parallel AJAX requests to your PHP backend.",
        "XDebug opens a new socket connection for each of them, we tell VS Code that these are our threads.",
        "First delete the old stack trace info",
        "XDebug paths are URIs, VS Code file paths",
        "\"Name\" of the source and the actual file path",
        "line number in the file",
        "a new, unique ID for scopeRequests",
        "the level of this stackframe inside the stacktrace",
        "the name of the stackframe, like a function name or \"{main}\"",
        "save the connection this stackframe belongs to and the level of the stackframe under the stacktrace id",
        "prepare response for VS Code (column is always 1 since XDebug doesn't tell us the column)",
        "TODO analyze error",
        "remember that this new variable ID is assigned to a SCOPE (in XDebug \"context\"), not a variable (in XDebug \"property\"),",
        "so when VS Code does a variablesRequest with that ID we do a context_get and not a property_get",
        "send VS Code the variable ID as identifier",
        "VS Code is requesting the variables for a SCOPE, so we have to do a context_get",
        "VS Code is requesting the subelements for a variable, so we have to do a property_get",
        "if the attribute \"children\" is 1, we have to send a variableReference back to VS Code",
        "so it can receive the child elements in another request.",
        "we show the type of the property (\"array\", \"object\") as the value",
        "protected evaluateRequest(response: DebugProtocol.EvaluateResponse, args: DebugProtocol.EvaluateArguments): void {",
        "console.log('evaluateRequest');",
        "response.body = {",
        "result: `evaluate(${args.expression})`,",
        "variablesReference: 0",
        "};",
        "this.sendResponse(response);",
        "}"
    ],
    "docstrings": [
        "* This interface should always match the schema found in the mock-debug extension manifest.",
        "* The types of Exceptions the adapter should break on.\n     * If true, will default to ['Throwable'] for PHP7 and ['Exception'] for PHP <7",
        "* This is called for each source file that has breakpoints with all the breakpoints in that file and whenever these change.",
        "* This is called ONCE after all line breakpoints have been set and I believe whenever the breakpoints settings change",
        "* Executed after a successfull launch or attach request (and whenever VS Code feels the need?!)",
        "* Called by VS Code after a StoppedEvent"
    ],
    "functions": [
        "path2uri",
        "uri2path",
        "launchRequest",
        "_runOrStopOnEntry",
        "_checkStatus",
        "setBreakPointsRequest",
        "setExceptionBreakPointsRequest",
        "threadsRequest",
        "stackTraceRequest",
        "scopesRequest",
        "variablesRequest",
        "continueRequest",
        "nextRequest",
        "stepInRequest",
        "stepOutRequest",
        "pauseRequest",
        "disconnectRequest"
    ],
    "classes": [
        "XDebugStackFrame",
        "XDebugContext",
        "XDebugProperty",
        "PhpDebugSession"
    ]
}