{
    "identifiers": [
        "bs4",
        "bs4",
        "BeautifulSoup",
        "unidecode",
        "unidecode",
        "urllib",
        "re",
        "datetime",
        "requests",
        "argparse",
        "re",
        "compile",
        "text",
        "re",
        "search",
        "text",
        "m",
        "m",
        "group",
        "cp1252",
        "get",
        "s",
        "s",
        "isinstance",
        "text",
        "unicode",
        "text",
        "re",
        "sub",
        "gremlin_regex_1252",
        "fixup",
        "text",
        "text",
        "the_string",
        "kill_gremlins",
        "the_string",
        "isinstance",
        "the_string",
        "unicode",
        "unidecode",
        "the_string",
        "the_string",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "compile",
        "re",
        "compile",
        "tag",
        "len",
        "tag",
        "contents",
        "GremlinZapper",
        "x",
        "content_length",
        "isinstance",
        "tag",
        "contents",
        "x",
        "bs4",
        "element",
        "NavigableString",
        "gzapper",
        "kill_gremlins",
        "tag",
        "contents",
        "x",
        "unidecode",
        "unicode_entry",
        "tag",
        "contents",
        "x",
        "replace_with",
        "unicode_entry",
        "isinstance",
        "tag",
        "contents",
        "x",
        "bs4",
        "element",
        "Tag",
        "zap_tag_contents",
        "tag",
        "contents",
        "x",
        "page_url",
        "requests",
        "get",
        "page_url",
        "r",
        "status_code",
        "requests",
        "codes",
        "ok",
        "r",
        "raise_for_status",
        "BeautifulSoup",
        "r",
        "content",
        "page_url",
        "article_slug_regex",
        "findall",
        "page_url",
        "slug_match",
        "len",
        "slug_match",
        "slug_match",
        "page_url",
        "html_string",
        "requests",
        "post",
        "data",
        "html_string",
        "r",
        "status_code",
        "requests",
        "codes",
        "ok",
        "r",
        "raise_for_status",
        "r",
        "text",
        "story_text",
        "GremlinZapper",
        "item",
        "story_text",
        "contents",
        "isinstance",
        "item",
        "bs4",
        "element",
        "Tag",
        "item",
        "attrs",
        "item",
        "the_class",
        "classes",
        "the_class",
        "item",
        "get_text",
        "word_regex",
        "findall",
        "title",
        "join",
        "matches",
        "gremlin_zapper",
        "zap_string",
        "title",
        "item",
        "date_regex",
        "match",
        "item",
        "match",
        "datetime",
        "datetime",
        "strptime",
        "item",
        "strftime",
        "item",
        "name",
        "item",
        "find_all",
        "images",
        "image",
        "images",
        "image",
        "image",
        "get_text",
        "word_regex",
        "findall",
        "image_text",
        "join",
        "matches",
        "gremlin_zapper",
        "zap_string",
        "image_text",
        "image_text",
        "item",
        "contents",
        "len",
        "item",
        "contents",
        "item",
        "contents",
        "isinstance",
        "item",
        "contents",
        "bs4",
        "element",
        "Tag",
        "item",
        "contents",
        "name",
        "item",
        "contents",
        "gremlin_zapper",
        "zap_string",
        "author",
        "cont",
        "item",
        "contents",
        "isinstance",
        "cont",
        "bs4",
        "element",
        "Comment",
        "end_story_regex",
        "match",
        "cont",
        "match",
        "story_end",
        "add_to_story",
        "zap_tag_contents",
        "item",
        "story_string",
        "item",
        "title",
        "author",
        "images_dictionary",
        "story_string",
        "date",
        "article_url",
        "get_soup_from_url",
        "article_url",
        "get_url_slug",
        "article_url",
        "soup",
        "find",
        "class_",
        "parse_story_text",
        "story_text",
        "article_dict",
        "slug",
        "article_url",
        "slug",
        "html_to_markdown",
        "article_dict",
        "article_dict",
        "article_dict",
        "open",
        "article_dict",
        "fo",
        "write",
        "fo",
        "write",
        "fo",
        "write",
        "article_dict",
        "fo",
        "write",
        "article_dict",
        "fo",
        "write",
        "key",
        "article_dict",
        "fo",
        "write",
        "fo",
        "write",
        "key",
        "fo",
        "write",
        "article_dict",
        "key",
        "fo",
        "write",
        "fo",
        "write",
        "article_dict",
        "fo",
        "write",
        "fo",
        "write",
        "article_dict",
        "fo",
        "close",
        "article_url",
        "article_url",
        "rstrip",
        "article_url",
        "scrape_article",
        "article_url",
        "write_article",
        "article_dictionary",
        "article_url_list",
        "article_url",
        "article_url_list",
        "scrape_url",
        "article_url",
        "file_name",
        "open",
        "file_name",
        "article_url",
        "article_list_file",
        "scrape_url",
        "article_url",
        "article_list_file",
        "close",
        "IOError"
    ],
    "literals": [
        "r\"[\\x80-\\x9f]\"",
        "u\"\\x80\"",
        "u\"\\u20AC\"",
        "u\"\\x82\"",
        "u\"\\u201A\"",
        "u\"\\x83\"",
        "u\"\\u0192\"",
        "u\"\\x84\"",
        "u\"\\u201E\"",
        "u\"\\x85\"",
        "u\"\\u2026\"",
        "u\"\\x86\"",
        "u\"\\u2020\"",
        "u\"\\x87\"",
        "u\"\\u2021\"",
        "u\"\\x88\"",
        "u\"\\u02C6\"",
        "u\"\\x89\"",
        "u\"\\u2030\"",
        "u\"\\x8A\"",
        "u\"\\u0160\"",
        "u\"\\x8B\"",
        "u\"\\u2039\"",
        "u\"\\x8C\"",
        "u\"\\u0152\"",
        "u\"\\x8E\"",
        "u\"\\u017D\"",
        "u\"\\x91\"",
        "u\"\\u2018\"",
        "u\"\\x92\"",
        "u\"\\u2019\"",
        "u\"\\x93\"",
        "u\"\\u201C\"",
        "u\"\\x94\"",
        "u\"\\u201D\"",
        "u\"\\x95\"",
        "u\"\\u2022\"",
        "u\"\\x96\"",
        "u\"\\u2013\"",
        "u\"\\x97\"",
        "u\"\\u2014\"",
        "u\"\\x98\"",
        "u\"\\u02DC\"",
        "u\"\\x99\"",
        "u\"\\u2122\"",
        "u\"\\x9A\"",
        "u\"\\u0161\"",
        "u\"\\x9B\"",
        "u\"\\u203A\"",
        "u\"\\x9C\"",
        "u\"\\u0153\"",
        "u\"\\x9E\"",
        "u\"\\u017E\"",
        "u\"\\x9F\"",
        "u\"\\u0178\"",
        "u\"[\\x80-\\x9f]\"",
        "\"\"",
        "\"iso-8859-1\"",
        "r\"[A-Za-z]+\\s*\\d{1,2}\\,\\s*\\d{4}\"",
        "r\"\\s*END\\s*STORY\\s*\"",
        "r\"([^\\s\\n\\r\\t]+)\"",
        "r\".*\\/([^\\/\\.]+)(?:.[^\\.\\/]+$)*\"",
        "'html.parser'",
        "\"unable to find slug for article: \"",
        "\"\\n\"",
        "'http://heckyesmarkdown.com/go/#sthash.Xf1YNf4U.dpuf'",
        "'html'",
        "''",
        "''",
        "''",
        "''",
        "'class'",
        "'class'",
        "'storyhead'",
        "' '",
        "\"%B %d, %Y\"",
        "\"%Y-%m-%d\"",
        "'table'",
        "'img'",
        "'src'",
        "' '",
        "'By '",
        "'a'",
        "'title'",
        "'author'",
        "'images_dictionary'",
        "'article_body'",
        "'date'",
        "'div'",
        "'storytext'",
        "'file_name'",
        "'date'",
        "'-'",
        "\".md\"",
        "'source_permalink'",
        "\"[source](\"",
        "\" \\\"Permalink to \"",
        "\"\\\")\"",
        "'article_body'",
        "'article_body'",
        "'file_name'",
        "\"w\"",
        "\"---\\n\"",
        "\"layout: post\\n\"",
        "\"title: \"",
        "'title'",
        "\"\\n\"",
        "\"author: \"",
        "'author'",
        "\"\\n\"",
        "\"images:\\n\"",
        "'images_dictionary'",
        "\"  -\\n\"",
        "\"    - file: \"",
        "\"\\n\"",
        "\"    - caption: \"",
        "'images_dictionary'",
        "\"\\n\"",
        "\"---\\n\\n\"",
        "'article_body'",
        "\"\\n\"",
        "'source_permalink'",
        "\"\\n\"",
        "\"done\"",
        "'r'",
        "\"Error: File does not appear to exist.\""
    ],
    "variables": [
        "gremlin_regex_1252",
        "cp1252",
        "s",
        "text",
        "text",
        "the_string",
        "the_string",
        "date_regex",
        "end_story_regex",
        "word_regex",
        "article_slug_regex",
        "content_length",
        "gzapper",
        "unicode_entry",
        "unicode_entry",
        "r",
        "slug_match",
        "r",
        "title",
        "author",
        "date",
        "story_string",
        "images_dictionary",
        "gremlin_zapper",
        "add_to_story",
        "classes",
        "title",
        "matches",
        "title",
        "title",
        "add_to_story",
        "match",
        "date",
        "add_to_story",
        "story_end",
        "images",
        "add_to_story",
        "image_src",
        "image_text",
        "matches",
        "image_text",
        "image_text",
        "images_dictionary",
        "image_src",
        "author",
        "author",
        "add_to_story",
        "match",
        "story_end",
        "add_to_story",
        "soup",
        "slug",
        "story_text",
        "article_dict",
        "article_dict",
        "article_dict",
        "article_dict",
        "fo",
        "article_url",
        "article_dictionary",
        "article_list_file"
    ],
    "comments": [
        "from http://www.microsoft.com/typography/unicode/1252.htm",
        "EURO SIGN",
        "SINGLE LOW-9 QUOTATION MARK",
        "LATIN SMALL LETTER F WITH HOOK",
        "DOUBLE LOW-9 QUOTATION MARK",
        "HORIZONTAL ELLIPSIS",
        "DAGGER",
        "DOUBLE DAGGER",
        "MODIFIER LETTER CIRCUMFLEX ACCENT",
        "PER MILLE SIGN",
        "LATIN CAPITAL LETTER S WITH CARON",
        "SINGLE LEFT-POINTING ANGLE QUOTATION MARK",
        "LATIN CAPITAL LIGATURE OE",
        "LATIN CAPITAL LETTER Z WITH CARON",
        "LEFT SINGLE QUOTATION MARK",
        "RIGHT SINGLE QUOTATION MARK",
        "LEFT DOUBLE QUOTATION MARK",
        "RIGHT DOUBLE QUOTATION MARK",
        "BULLET",
        "EN DASH",
        "EM DASH",
        "SMALL TILDE",
        "TRADE MARK SIGN",
        "LATIN SMALL LETTER S WITH CARON",
        "SINGLE RIGHT-POINTING ANGLE QUOTATION MARK",
        "LATIN SMALL LIGATURE OE",
        "LATIN SMALL LETTER Z WITH CARON",
        "LATIN CAPITAL LETTER Y WITH DIAERESIS",
        "make sure we have a unicode string",
        "initializing strings to empty means if a value isn't found in the HTML it simply won't be written to file",
        "print type(item)",
        "print item",
        "Convert date from Month, Day Year to Year-Month-Day",
        "get the url slug for the new file name",
        "this is the div that will hold any relevant article information"
    ],
    "docstrings": [
        "\"\"\"\n    Class to convert windows cp1252 characters to unicode characters or\n    to convert cp1252 and unicode characters to their ascii equivalents\n    \"\"\"",
        "\"\"\" From http://effbot.org/zone/unicode-gremlins.htm \"\"\"",
        "\"\"\"\n        From http://effbot.org/zone/unicode-gremlins.htm\n        map cp1252 gremlins to real unicode characters\n        :return:\n        \"\"\"",
        "\"\"\"\n        Converts any Windows cp1252 or unicode characters in a string to ASCII equivalents\n        :param the_string: the string to perform the conversion on\n        :return: input string with gremlins replaced\n        \"\"\"",
        "\"\"\"\n    Class to parse UCSC currents magazine articles and convert to markdown with yaml metadata\n    \"\"\"",
        "\"\"\"\n        Converts any Windows cp1252 or unicode characters in the text of\n        a BeautifulSoup bs4.element.Tag Object to ASCII equivalents\n        :rtype: bs4.element.Tag\n        :param tag: the Tag object to convert\n        :return: None\n        \"\"\"",
        "\"\"\"\n        Takes the url of a web page and returns a BeautifulSoup Soup object representation\n        :param page_url: the url of the page to be parsed\n        :param article_url: the url of the web page\n        :raises: r.raise_for_status: if the url doesn't return an HTTP 200 response\n        :return: A Soup object representing the page html\n        \"\"\"",
        "\"\"\"\n        Returns the last section of a url eg. 'posts' for 'wordpress.com/posts.html'\n        :raises Exception: if the regex is unable to locate the url slug\n        :param page_url: the page url\n        :return: the url slug\n        \"\"\"",
        "\"\"\"\n        converts a string of html text to markdown using heckyesmarkdown.com\n        :param html_string:\n        :return:\n        \"\"\"",
        "\"\"\"\n        Parses a story_text div class and finds the\n            - title\n            - author\n            - date\n            - and the html of the story body\n        and returns it in dictionary form\n        :param story_text: an HTML div of class story_text\n        :return:\n        \"\"\"",
        "\"\"\"\n        Gets HTML for a UCSC Currents online magazine article url, attempts to find:\n            - title\n            - author\n            - date published\n            - image links and captions (dictionary format ie: {img_link1: caption1, img_link2: caption2}\n            - article body\n        converts the article body to Markdown (https://daringfireball.net/projects/markdown/)\n        then returns a dictionary of the above values\n\n        :param article_url: the url to a UCSC Currents online magazine article\n        :return: a dictionary of scraped values\n        \"\"\"",
        "\"\"\"\n        Given a dictionary of article values:\n        creates a new file in the current directory with title, author, date, and images in YAML format metadata\n        followed by the Markdown format article body\n        and finally a permalink to the article source link\n\n        currently overwrites existing files if generated filenames are the same\n\n        :param article_dict: A dictionary of scraped values for a UCSC Currents online magazine article\n        :return None\n        \"\"\"",
        "\"\"\"\n        Scrapes a single UCSC Currents magazine article\n        :param article_url:\n        :return:\n        \"\"\"",
        "\"\"\"\n        Scrapes a list of UCSC Currents magazine articles\n        :param article_url_list:\n        :return:\n        \"\"\"",
        "\"\"\"\n        Scrapes all the UCSC Currents magazine articles in a file given this format:\n            - one url per line\n        :param file_name:\n        :return:\n        \"\"\""
    ],
    "functions": [
        "kill_gremlins",
        "fixup",
        "zap_string",
        "zap_tag_contents",
        "get_soup_from_url",
        "get_url_slug",
        "html_to_markdown",
        "parse_story_text",
        "scrape_article",
        "write_article",
        "scrape_url",
        "scrape_url_list",
        "scrape_from_file"
    ],
    "classes": [
        "GremlinZapper",
        "CurrentsArticleParser"
    ]
}