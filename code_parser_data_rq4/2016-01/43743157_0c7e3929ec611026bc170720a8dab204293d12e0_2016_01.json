{
    "identifiers": [
        "hashlib",
        "path",
        "callback",
        "hasher",
        "path",
        "assets",
        "hasher",
        "callback",
        "isinstance",
        "result",
        "result",
        "encode",
        "hashlib",
        "sha256",
        "sha",
        "update",
        "result",
        "sha",
        "hexdigest",
        "assets",
        "callback",
        "hasher",
        "assets",
        "keys",
        "path",
        "assets",
        "path",
        "path",
        "assets",
        "path",
        "suffix",
        "cls",
        "args",
        "callable",
        "args",
        "args",
        "suffix",
        "register",
        "name",
        "args",
        "args",
        "__new__",
        "cls",
        "args",
        "len",
        "args",
        "args",
        "o",
        "o",
        "callback",
        "register",
        "o",
        "name",
        "callback",
        "o",
        "hasher",
        "Decorator"
    ],
    "literals": [
        "'UTF-8'",
        "'%s.%s'"
    ],
    "variables": [
        "assets",
        "result",
        "result",
        "sha",
        "path",
        "name",
        "o",
        "o",
        "name",
        "o",
        "hasher",
        "o",
        "hasher"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    A Container for :term:`virtual assets <virtual asset>`, i.e. assets that\n    have a :term:`path <asset path>`, but are not actually files. Virtual\n    assets are instead registered with a generator function that generates\n    its content. To be precise, each virtual asset consists of the following\n    properties:\n\n    - an :term:`asset path`,\n    - a callback function that generates its content and\n    - a hashing function that will generate the same string, as long as the\n      content of the asset stays the same.\n\n    The most convenient way to use this class is via an automatic\n    :meth:`.decorator`.\n    \"\"\"",
        "\"\"\"\n        Registers a new :term:`virtual asset` beneath the provided *path*. The\n        *callback* will be used to generate the content of the asset.\n\n        The optional *hasher* callback must return the same string as long as\n        the *callback* generates the same content. If no *hasher* is provided,\n        one will be generated automatically that hashes the generated content.\n        \"\"\"",
        "\"\"\"\n        Returns an iterator of all registered asset paths.\n        \"\"\"",
        "\"\"\"\n        Invokes the callback of the asset with given *path* and returns its\n        result.\n        \"\"\"",
        "\"\"\"\n        Invokes the hashing function of the asset with given *path* and\n        returns its result.\n        \"\"\"",
        "\"\"\"\n        Creates a decorator that can be used to register callbacks\n        conveniently:\n\n        >>> v = VirtualAssets()\n        >>> virtualcss = v.decorator('css')\n        >>> @virtualcss\n        ... def textcolor():\n        ...   return 'body {color: black}'\n        ...\n        >>> @virtualcss('background-color.css')\n        ... def bgcolor():\n        ...   return 'body {background-color: white}'\n        ...\n        >>> def hasher():\n        ...   try:\n        ...     return os.path.getmtime('parrot.png')\n        ...   except FileNotFoundError:\n        ...     return 'dead'\n        ...\n        >>> @virtualcss('parrot.css', hasher)\n        ... def parrot():\n        ...   url = 'parrot.png?_=%s' % hasher()\n        ...   return '.parrot {background-image: url(%s)}' % url\n        ...\n        >>> list(v.paths())\n        ['textcolor.css', 'background-color.css', 'parrot.css']\n        \"\"\""
    ],
    "functions": [
        "register",
        "hasher",
        "paths",
        "render",
        "hash",
        "decorator",
        "__new__",
        "__call__"
    ],
    "classes": [
        "VirtualAssets",
        "Decorator"
    ]
}