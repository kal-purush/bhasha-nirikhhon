{
    "identifiers": [
        "diffusion",
        "core",
        "components",
        "Edge",
        "edu",
        "uci",
        "ics",
        "jung",
        "graph",
        "Graph",
        "java",
        "util",
        "java",
        "util",
        "Collection",
        "G",
        "seed",
        "time",
        "size",
        "stats",
        "stats",
        "time",
        "size",
        "seed",
        "size",
        "seed",
        "stream",
        "forEach",
        "e",
        "G",
        "containsVertex",
        "e",
        "seed",
        "stream",
        "forEach",
        "e",
        "e",
        "setStatus",
        "infected",
        "seed",
        "newlyInfected",
        "infected",
        "isEmpty",
        "v",
        "infected",
        "newlyInfected",
        "addAll",
        "v",
        "infect",
        "G",
        "size",
        "infected",
        "size",
        "infected",
        "clear",
        "infected",
        "addAll",
        "newlyInfected",
        "stats",
        "time",
        "size",
        "infected",
        "size",
        "newlyInfected",
        "clear",
        "stats",
        "G",
        "seed",
        "susceptible",
        "time",
        "size",
        "seed",
        "size",
        "stats",
        "stats",
        "time",
        "seed",
        "size",
        "seed",
        "stream",
        "forEach",
        "e",
        "e",
        "setStatus",
        "v",
        "G",
        "getVertices",
        "seed",
        "contains",
        "v",
        "susceptible",
        "add",
        "v",
        "seed",
        "stream",
        "forEach",
        "e",
        "G",
        "containsVertex",
        "e",
        "time",
        "toInfect",
        "v1",
        "susceptible",
        "influence",
        "v2",
        "G",
        "getNeighbors",
        "v1",
        "v2",
        "getStatus",
        "influence",
        "influence",
        "influence",
        "G",
        "degree",
        "v1",
        "v1",
        "getThreshhold",
        "influence",
        "toInfect",
        "add",
        "v1",
        "stats",
        "time",
        "size",
        "toInfect",
        "size",
        "toInfect",
        "size",
        "v3",
        "toInfect",
        "v3",
        "setStatus",
        "size",
        "toInfect",
        "size",
        "susceptible",
        "removeAll",
        "toInfect",
        "toInfect",
        "clear",
        "susceptible",
        "isEmpty",
        "time",
        "stats",
        "time",
        "size",
        "toInfect",
        "size",
        "susceptible",
        "isEmpty",
        "stats"
    ],
    "literals": [
        "\"timestep,Total Infected,Newly Infected \\n\"",
        "\",\"",
        "\",\"",
        "\"\\n\"",
        "\"a vertex among your seed does not exist in the graph\"",
        "\",\"",
        "\",\"",
        "\"\\n\"",
        "\"timestep,Total Infected,Newly Infected \\n\"",
        "\",\"",
        "\",\"",
        "\"\\n\"",
        "\"a vertex among your seed does not exist in the graph\"",
        "\",\"",
        "\",\"",
        "\"\\n\"",
        "\",\"",
        "\",\"",
        "\"\\n\""
    ],
    "variables": [],
    "comments": [
        "the infection timestep",
        "total size of the infection",
        "string to hold basic stats of the diffusion",
        "check to see proper seed graph combination was passed",
        "infect all seed vertices",
        "handle for all vertices that will infect this timestep",
        "vertices that will be infected this timestep",
        "infection loop",
        "for each infected node attempt to infect neighbours",
        "the infection timestep",
        "total size of the infection",
        "string to hold basic stats of the diffusion",
        "infect all seed vertices",
        "population of all nodes susceptible of infection",
        "check to see proper seed graph combination was passed",
        "for each node that can be infected determine if it will be",
        "count all infected neighbours",
        "calculate influence on a node",
        "determine if it gets infected",
        "if no new infections at one step no new infections will occur, so break",
        "set infection status nodes",
        "adjust lists",
        "adds stats for break case which wouldnt be covered otherwise",
        "when all nodes infected break"
    ],
    "docstrings": [
        "* class that holds diffusion mechanisms for graphs to undergo information dissemination\n * Mechanisms include:\n *\n *                              Initial Cascade\n *\n * the graph has an infection probability P, each infected node has probability P to\n * infect its neighbours. Once it tries to infect a neighbour once it never tries to\n * infect it again.\n *\n * Initially no nodes are infected but a seed is chosen to infect at time t=0 who will\n * begin the infection. After this there are subsequent infections at each step a node\n * that was infected in the previous rounds tries to infect an un-infected neighbours\n * this process continues until no new nodes are infected.\n *\n *\n *                              Linear Threshold\n *\n * This model represents infection as having a large enough number of neighbours being infected\n * so then a node would succumb to the infection.\n *\n * The graph/nodes are defined with a threshold T where if enough of a nodes neighbours\n * are infected such that T < (# of infected neighbours/total # of neighbours).\n *\n *\n *                                  Notes\n *\n * All mechanisms must be passed graphs with the corresponding vertex types for their diffusion.\n * Random graph generation is not supported as the generators only create the generic vertex type",
        "* Initial cascade diffusion mechanism which models diffusion as\n     * an agent based phenomenon between vertices\n     * @param G Graph made of ICVertices\n     * @param seed the initial set of vertices to set as infection\n     * @return a string of results, data includes; timestep, Total Infected, Newly Infected\n     * @throws IllegalArgumentException",
        "* Linear Threshold model, which defines an infection event as having a\n     * favourable ratio of infected neighbours. with respect to some threshold\n     * value\n     *\n     * @param G Graph made of LTVertices\n     * @param seed the initial set of vertices to set as infection\n     * @return a string of results, data includes; timestep, Total Infected, Newly Infected"
    ],
    "functions": [
        "DiffusionMechanism",
        "InitialCondition",
        "LinearCascade"
    ],
    "classes": [
        "DiffusionMechanism"
    ]
}