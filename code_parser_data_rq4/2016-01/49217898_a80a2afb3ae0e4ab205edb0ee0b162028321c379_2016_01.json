{
    "identifiers": [
        "s",
        "s",
        "e",
        "s",
        "s",
        "JsonTokenizer",
        "s",
        "tokenizer",
        "TokenType",
        "TokenType",
        "TokenType",
        "TokenType",
        "TokenType",
        "tokenizer",
        "TokenType",
        "ret",
        "value",
        "ret",
        "state",
        "ParserState",
        "TokenType",
        "ret",
        "value",
        "ret",
        "state",
        "ParserState",
        "tokenizer",
        "state",
        "ParserState",
        "TokenType",
        "key",
        "tokenizer",
        "state",
        "ParserState",
        "TokenType",
        "stack",
        "ret",
        "stack",
        "ParserState",
        "TokenType",
        "state",
        "ParserState",
        "ParserState",
        "TokenType",
        "state",
        "ParserState",
        "TokenType",
        "stack",
        "ret",
        "stack",
        "ParserState",
        "TokenType",
        "state",
        "ParserState",
        "TokenType",
        "stack",
        "ret",
        "stack",
        "ParserState",
        "TokenType",
        "TokenType",
        "TokenType",
        "TokenType",
        "TokenType",
        "key",
        "value",
        "tokenizer",
        "state",
        "ParserState",
        "value",
        "key",
        "tokenizer",
        "state",
        "ParserState",
        "TokenType",
        "TokenType",
        "TokenType",
        "new_value",
        "state",
        "ParserState",
        "new_value",
        "state",
        "ParserState",
        "key",
        "stack",
        "ParserState",
        "key",
        "value",
        "value",
        "new_value",
        "stack",
        "ParserState",
        "key",
        "value",
        "value",
        "key",
        "new_value",
        "key",
        "value",
        "new_value",
        "s",
        "s",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "s",
        "i",
        "s",
        "i",
        "c",
        "c",
        "s",
        "i",
        "s",
        "i",
        "i",
        "s",
        "s",
        "i",
        "s",
        "i",
        "s",
        "i",
        "s",
        "i",
        "s",
        "i",
        "i",
        "s",
        "s",
        "i",
        "c",
        "c",
        "c",
        "c",
        "i",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "i",
        "c",
        "c",
        "i",
        "s",
        "j",
        "c2",
        "end",
        "j",
        "c2",
        "s",
        "j",
        "es",
        "es",
        "es",
        "es",
        "es",
        "es",
        "es",
        "es",
        "j",
        "es",
        "JsonTokenizer",
        "s",
        "j",
        "JsonTokenizer",
        "s",
        "j",
        "JsonTokenizer",
        "s",
        "j",
        "JsonTokenizer",
        "s",
        "j",
        "j",
        "j",
        "end",
        "s",
        "start",
        "end",
        "TokenType",
        "c",
        "c",
        "c",
        "c",
        "c",
        "s",
        "j",
        "c",
        "c",
        "JsonTokenizer",
        "s",
        "j",
        "r",
        "j",
        "r",
        "Infinity",
        "TokenType",
        "c",
        "c",
        "c",
        "c",
        "s",
        "j",
        "c",
        "c",
        "c",
        "s",
        "j",
        "c",
        "c",
        "s",
        "j",
        "c",
        "c",
        "c",
        "s",
        "j",
        "c",
        "c",
        "is_float",
        "c",
        "c",
        "c",
        "s",
        "j",
        "c",
        "c",
        "c",
        "s",
        "j",
        "c",
        "c",
        "c",
        "s",
        "j",
        "c",
        "c",
        "is_float",
        "j",
        "is_float",
        "parseFloat",
        "s",
        "i",
        "j",
        "parseInt",
        "s",
        "i",
        "j",
        "TokenType",
        "c",
        "s",
        "i",
        "s",
        "i",
        "s",
        "i",
        "i",
        "TokenType",
        "c",
        "s",
        "i",
        "s",
        "i",
        "s",
        "i",
        "s",
        "i",
        "i",
        "TokenType",
        "c",
        "s",
        "i",
        "s",
        "i",
        "s",
        "i",
        "i",
        "TokenType",
        "c",
        "s",
        "i",
        "s",
        "i",
        "i",
        "NaN",
        "TokenType",
        "JsonTokenizer",
        "s",
        "i",
        "r",
        "i",
        "r",
        "Infinity",
        "TokenType",
        "TokenType",
        "TokenType",
        "ParserState"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "'invalid root value type'",
        "'invalid object key'",
        "'invalid name separator'",
        "'invalid array value separator'",
        "'invalie object value separator'",
        "'invalid token in value'",
        "'eof'",
        "string",
        "string",
        "string",
        "'invalid escape char'",
        "'invalid negative number'",
        "'invalid fraction'",
        "'invalid exp'",
        "'invalid token'",
        "'invalid token'",
        "'invalid token'",
        "'invalid token'",
        "'invalid token'"
    ],
    "variables": [
        "tokenizer",
        "ret",
        "stack",
        "state",
        "key",
        "value",
        "state",
        "key",
        "value",
        "state",
        "key",
        "value",
        "state",
        "key",
        "value",
        "new_value",
        "c",
        "s",
        "i",
        "c",
        "start",
        "i",
        "end",
        "j",
        "c2",
        "es",
        "is_float",
        "j",
        "i",
        "r",
        "r"
    ],
    "comments": [
        "JsonParser",
        "(NaN/Infを含む不正なJSONをパース可能なパーサー)",
        "",
        "RFC7159: https://tools.ietf.org/html/rfc7159",
        "skip whitespace",
        "return structural characters",
        "return string",
        "check escape char",
        "invalid escape",
        "return number",
        "minus",
        "zero/digit1-9",
        "negative inf",
        "digit1-9 *DIGIT",
        "zero",
        "frac",
        "exp",
        "true",
        "false",
        "null",
        "NaN",
        "Inf"
    ],
    "docstrings": [],
    "functions": [
        "parse",
        "_parse",
        "_is_hex",
        "_is_inf",
        "next"
    ],
    "classes": [
        "JsonParser",
        "JsonTokenizer"
    ]
}