{
    "identifiers": [
        "Collections",
        "Generic",
        "Linq",
        "Linq",
        "Expressions",
        "Text",
        "EquationFactories",
        "InfixNotation",
        "Numbers",
        "InfixNotation",
        "Operators",
        "Expression",
        "Func",
        "postfixNotationString",
        "IsNullOrWhiteSpace",
        "postfixNotationString",
        "ArgumentException",
        "Expression",
        "Expression",
        "postfixNotationString",
        "Where",
        "AllowedCharacters",
        "Contains",
        "c",
        "ToArray",
        "sanitizedString",
        "Split",
        "StringSplitOptions",
        "RemoveEmptyEntries",
        "ToList",
        "token",
        "enumerablePostfixTokens",
        "token",
        "Length",
        "TryParse",
        "token",
        "tokenValue",
        "token",
        "Length",
        "InfixNotation",
        "IsNumeric",
        "token",
        "parseSuccess",
        "stack",
        "Push",
        "Expression",
        "Constant",
        "tokenValue",
        "token",
        "InfixNotation",
        "Numbers",
        "Contains",
        "tokenChar",
        "parseSuccess",
        "stack",
        "Push",
        "Expression",
        "Constant",
        "tokenValue",
        "InfixNotation",
        "Operators",
        "Contains",
        "tokenChar",
        "stack",
        "Count",
        "FormatException",
        "stack",
        "Pop",
        "stack",
        "Pop",
        "tokenChar",
        "left",
        "Type",
        "left",
        "Expression",
        "Convert",
        "left",
        "right",
        "Type",
        "right",
        "Expression",
        "Convert",
        "right",
        "left",
        "Type",
        "left",
        "Expression",
        "Convert",
        "left",
        "right",
        "Type",
        "right",
        "Expression",
        "Convert",
        "right",
        "tokenChar",
        "operation",
        "Expression",
        "AddChecked",
        "left",
        "right",
        "tokenChar",
        "operation",
        "Expression",
        "SubtractChecked",
        "left",
        "right",
        "tokenChar",
        "operation",
        "Expression",
        "MultiplyChecked",
        "left",
        "right",
        "tokenChar",
        "operation",
        "Expression",
        "Divide",
        "left",
        "right",
        "tokenChar",
        "operation",
        "Expression",
        "Power",
        "left",
        "right",
        "operation",
        "stack",
        "Push",
        "operation",
        "Format",
        "tokenChar",
        "stack",
        "Count",
        "Expression",
        "Lambda",
        "Func",
        "stack",
        "Pop",
        "postfixNotationString",
        "IsNullOrWhiteSpace",
        "postfixNotationString",
        "ArgumentException",
        "postfixNotationString",
        "Where",
        "AllowedCharacters",
        "Contains",
        "c",
        "ToArray",
        "sanitizedString",
        "Split",
        "StringSplitOptions",
        "RemoveEmptyEntries",
        "ToList",
        "token",
        "enumerablePostfixTokens",
        "token",
        "Length",
        "token",
        "Length",
        "InfixNotation",
        "IsNumeric",
        "token",
        "stack",
        "Push",
        "token",
        "token",
        "InfixNotation",
        "Numbers",
        "Contains",
        "tokenChar",
        "stack",
        "Push",
        "tokenChar",
        "ToString",
        "InfixNotation",
        "Operators",
        "Contains",
        "tokenChar",
        "stack",
        "Count",
        "FormatException",
        "stack",
        "Pop",
        "stack",
        "Pop",
        "MinValue",
        "MinValue",
        "TryParse",
        "r",
        "rhs",
        "parseSuccess",
        "TryParse",
        "l",
        "lhs",
        "parseSuccess",
        "rhs",
        "MinValue",
        "lhs",
        "MinValue",
        "parseSuccess",
        "MinValue",
        "tokenChar",
        "value",
        "lhs",
        "rhs",
        "tokenChar",
        "value",
        "lhs",
        "rhs",
        "tokenChar",
        "value",
        "lhs",
        "rhs",
        "tokenChar",
        "value",
        "lhs",
        "rhs",
        "tokenChar",
        "value",
        "Pow",
        "lhs",
        "rhs",
        "value",
        "MinValue",
        "stack",
        "Push",
        "value",
        "ToString",
        "Format",
        "tokenChar",
        "stack",
        "Count",
        "TryParse",
        "stack",
        "Pop",
        "result",
        "result"
    ],
    "literals": [
        "\" \"",
        "\"Argument postfixNotationString must not be null, empty or whitespace.\"",
        "\"postfixNotationString\"",
        "\"Token.Length is less than one.\"",
        "\"Operators and operands must be separated by a space.\"",
        "\"The algebraic string has not sufficient values in the expression for the number of operators; There must be two operands for the operator to operate on.\"",
        "\"Value never got set.\"",
        "\"Unrecognized character '{0}'.\"",
        "\"The input has too many values for the number of operators.\"",
        "\"Argument postfixNotationString must not be null, empty or whitespace.\"",
        "\"postfixNotationString\"",
        "\"Operators and operands must be separated by a space.\"",
        "\"The algebraic string has not sufficient values in the expression for the number of operators.\"",
        "\"Unable to parse valueStack characters to Int32.\"",
        "\"Value never got set.\"",
        "\"Unrecognized character '{0}'.\"",
        "\"Token length is less than one.\"",
        "\"Last value on stack could not be parsed into an integer.\"",
        "\"The input has too many values for the number of operators.\""
    ],
    "variables": [
        "AllowedCharacters",
        "stack",
        "sanitizedString",
        "enumerablePostfixTokens",
        "tokenValue",
        "parseSuccess",
        "tokenChar",
        "Expression",
        "left",
        "Expression",
        "right",
        "Expression",
        "operation",
        "stack",
        "sanitizedString",
        "enumerablePostfixTokens",
        "tokenChar",
        "r",
        "l",
        "rhs",
        "lhs",
        "parseSuccess",
        "value",
        "result"
    ],
    "comments": [
        "Numbers > 10 will have a token length > 1",
        "There must be two operands for the operator to operate on",
        "^ token uses Math.Pow, which both gives and takes double, hence convert",
        "Math.Pow returns a double, so we must check here for all other operators",
        "method",
        "method",
        "class",
        "namespace"
    ],
    "docstrings": [],
    "functions": [
        "ExpressionTree",
        "Evaluate"
    ],
    "classes": [
        "PostfixNotation"
    ]
}