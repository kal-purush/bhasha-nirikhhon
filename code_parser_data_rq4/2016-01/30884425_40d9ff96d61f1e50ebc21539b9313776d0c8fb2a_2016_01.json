{
    "identifiers": [
        "run",
        "View",
        "runAppend",
        "runDestroy",
        "compile",
        "ComponentLookup",
        "TextField",
        "Checkbox",
        "EventDispatcher",
        "buildOwner",
        "OWNER",
        "owner",
        "buildOwner",
        "owner",
        "TextField",
        "owner",
        "Checkbox",
        "owner",
        "ComponentLookup",
        "owner",
        "EventDispatcher",
        "owner",
        "dispatcher",
        "QUnit",
        "commonSetup",
        "controller",
        "view",
        "View",
        "OWNER",
        "owner",
        "compile",
        "runAppend",
        "view",
        "$input",
        "view",
        "input",
        "$input",
        "runDestroy",
        "view",
        "runDestroy",
        "owner",
        "QUnit",
        "$input",
        "QUnit",
        "$input",
        "run",
        "_",
        "controller",
        "$input",
        "run",
        "_",
        "controller",
        "$input",
        "QUnit",
        "$input",
        "$input",
        "run",
        "_",
        "controller",
        "$input",
        "$input",
        "id",
        "QUnit",
        "$input",
        "run",
        "_",
        "controller",
        "$input",
        "QUnit",
        "$input",
        "run",
        "_",
        "controller",
        "$input",
        "QUnit",
        "$input",
        "run",
        "_",
        "controller",
        "$input",
        "QUnit",
        "$input",
        "run",
        "_",
        "controller",
        "$input",
        "QUnit",
        "$input",
        "run",
        "_",
        "controller",
        "$input",
        "QUnit",
        "run",
        "_",
        "input",
        "input",
        "input",
        "controller",
        "input",
        "input",
        "QUnit",
        "$input",
        "run",
        "_",
        "controller",
        "$input",
        "run",
        "_",
        "input",
        "run",
        "_",
        "controller",
        "$input",
        "run",
        "_",
        "controller",
        "$input"
    ],
    "literals": [
        "'ember-metal/run_loop'",
        "'ember-metal/property_set'",
        "'ember-views/views/view'",
        "'ember-runtime/tests/utils'",
        "'ember-template-compiler/system/compile'",
        "'ember-views/component_lookup'",
        "'ember-views/views/text_field'",
        "'ember-views/views/checkbox'",
        "'ember-views/system/event_dispatcher'",
        "'container/tests/test-helpers/build-owner'",
        "'container/owner'",
        "'component:-text-field'",
        "'component:-checkbox'",
        "'component-lookup:main'",
        "'event_dispatcher:main'",
        "'event_dispatcher:main'",
        "'#qunit-fixture'",
        "'<input>'",
        "'hello'",
        "'Enter some text'",
        "'some-name'",
        "<input value={{value}}\n                                disabled={{disabled}}\n                                placeholder={{placeholder}}\n                                name={{name}}\n                                maxlength={{max}}\n                                size={{size}}\n                                tabindex={{tab}}>",
        "'input'",
        "'should insert a text field into DOM'",
        "'A single text field was inserted'",
        "'should become disabled if the disabled attribute is true'",
        "':not(:disabled)'",
        "'There are no disabled text fields'",
        "'disabled'",
        "':disabled'",
        "'The text field is disabled'",
        "'disabled'",
        "':not(:disabled)'",
        "'There are no disabled text fields'",
        "'input value is updated when setting value property of view'",
        "'hello'",
        "'renders text field with value'",
        "'id'",
        "'value'",
        "'bye!'",
        "'bye!'",
        "'updates text field after value changes'",
        "'id'",
        "'the component hasn\\'t changed'",
        "'input placeholder is updated when setting placeholder property of view'",
        "'placeholder'",
        "'Enter some text'",
        "'renders text field with placeholder'",
        "'placeholder'",
        "'Text, please enter it'",
        "'placeholder'",
        "'Text, please enter it'",
        "'updates text field after placeholder changes'",
        "'input name is updated when setting name property of view'",
        "'name'",
        "'some-name'",
        "'renders text field with name'",
        "'name'",
        "'other-name'",
        "'name'",
        "'other-name'",
        "'updates text field after name changes'",
        "'input maxlength is updated when setting maxlength property of view'",
        "'maxlength'",
        "'30'",
        "'renders text field with maxlength'",
        "'max'",
        "'maxlength'",
        "'40'",
        "'updates text field after maxlength changes'",
        "'input size is updated when setting size property of view'",
        "'size'",
        "'30'",
        "'renders text field with size'",
        "'size'",
        "'size'",
        "'40'",
        "'updates text field after size changes'",
        "'input tabindex is updated when setting tabindex property of view'",
        "'tabindex'",
        "'5'",
        "'renders text field with the tabindex'",
        "'tab'",
        "'tabindex'",
        "'3'",
        "'updates text field after tabindex changes'",
        "'cursor position is not lost when updating content'",
        "'hola'",
        "'value'",
        "'hola'",
        "'cursor position was not lost'",
        "'cursor position was not lost'",
        "'input can be updated multiple times'",
        "'hello'",
        "'precondition - renders text field with value'",
        "'value'",
        "''",
        "''",
        "'updates first time'",
        "'derp'",
        "'value'",
        "'derp'",
        "'derp'",
        "'updates second time'",
        "'value'",
        "''",
        "''",
        "'updates third time'"
    ],
    "variables": [
        "view",
        "controller",
        "owner",
        "$input",
        "input",
        "dispatcher",
        "id"
    ],
    "comments": [
        "Since we can't simulate an actual keypress we can not do a proper integration test.",
        "Instead, we will simulate the underlying issue caused by the keypress by",
        "desyncing the attr morph's last know value from the DOM and re-setting the",
        "controller's value to the input's current value.",
        "Simulates setting the input to the same value as it already is which won't cause a rerender"
    ],
    "docstrings": [],
    "functions": [
        "commonSetup",
        "setup",
        "teardown"
    ],
    "classes": []
}