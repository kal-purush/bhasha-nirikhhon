{
    "identifiers": [
        "print_function",
        "absolute_import",
        "division",
        "numpy",
        "np",
        "spectral_cube",
        "SpectralCube",
        "wcs_utils",
        "masks",
        "BooleanArrayMask",
        "is_broadcastable_and_smaller",
        "stokes_data",
        "mask",
        "meta",
        "fill_value",
        "stokes_data",
        "meta",
        "fill_value",
        "stokes_data",
        "keys",
        "component",
        "stokes_data",
        "isinstance",
        "stokes_data",
        "component",
        "SpectralCube",
        "wcs_utils",
        "check_equality",
        "stokes_data",
        "component",
        "wcs",
        "stokes_data",
        "reference",
        "wcs",
        "ValueError",
        "component",
        "VALID_STOKES",
        "ValueError",
        "format",
        "component",
        "stokes_data",
        "component",
        "shape",
        "stokes_data",
        "reference",
        "shape",
        "ValueError",
        "stokes_data",
        "reference",
        "wcs",
        "stokes_data",
        "reference",
        "shape",
        "isinstance",
        "mask",
        "BooleanArrayMask",
        "mask",
        "shape",
        "_shape",
        "ValueError",
        "format",
        "mask",
        "shape",
        "_shape",
        "mask",
        "property",
        "_shape",
        "property",
        "_mask",
        "property",
        "_wcs",
        "_stokes_data",
        "keys",
        "StokesSpectralCube",
        "__dir__",
        "attribute",
        "attribute",
        "_stokes_data",
        "mask",
        "_stokes_data",
        "attribute",
        "with_mask",
        "mask",
        "_stokes_data",
        "attribute",
        "AttributeError",
        "format",
        "attribute",
        "mask",
        "inherit_mask",
        "isinstance",
        "mask",
        "np",
        "ndarray",
        "is_broadcastable_and_smaller",
        "mask",
        "shape",
        "shape",
        "ValueError",
        "mask",
        "shape",
        "shape",
        "BooleanArrayMask",
        "mask",
        "wcs",
        "_mask",
        "_new_cube_with",
        "mask",
        "mask",
        "mask",
        "inherit_mask",
        "mask",
        "_new_cube_with",
        "mask",
        "mask",
        "stokes_data",
        "mask",
        "meta",
        "fill_value",
        "_stokes_data",
        "stokes_data",
        "stokes_data",
        "_mask",
        "mask",
        "mask",
        "meta",
        "meta",
        "update",
        "_meta",
        "_fill_value",
        "fill_value",
        "fill_value",
        "StokesSpectralCube",
        "stokes_data",
        "data",
        "mask",
        "mask",
        "meta",
        "meta",
        "fill_value",
        "fill_value",
        "cube",
        "unit",
        "kwargs",
        "k",
        "_stokes_data",
        "k",
        "with_spectral_unit",
        "unit",
        "kwargs",
        "k",
        "_stokes_data",
        "_new_cube_with",
        "stokes_data",
        "stokes_data",
        "classmethod",
        "cls",
        "filename",
        "format",
        "hdu",
        "kwargs",
        "io",
        "core",
        "read",
        "read",
        "filename",
        "format",
        "format",
        "hdu",
        "hdu",
        "isinstance",
        "cube",
        "SpectralCube",
        "StokesSpectralCube",
        "cube",
        "cube",
        "filename",
        "overwrite",
        "format",
        "NotImplementedError"
    ],
    "literals": [
        "'I'",
        "'Q'",
        "'U'",
        "'V'",
        "'RR'",
        "'LL'",
        "'RL'",
        "'LR'",
        "\"stokes_data should be a dictionary of \"",
        "\"SpectralCube objects\"",
        "\"All spectral cubes in stokes_data \"",
        "\"should have the same WCS\"",
        "\"Invalid Stokes component: {0} - should be \"",
        "\"one of I, Q, U, V, RR, LL, RL, LR\"",
        "\"All spectral cubes should have the same shape\"",
        "\"Mask shape is not broadcastable to data shape:\"",
        "\" {0} vs {1}\"",
        "\"StokesSpectralCube has no attribute {0}\"",
        "\"Mask shape is not broadcastable to data shape: \"",
        "\"%s vs %s\"",
        "'I'",
        "\"\""
    ],
    "variables": [
        "VALID_STOKES",
        "_stokes_data",
        "_meta",
        "_fill_value",
        "reference",
        "_wcs",
        "_shape",
        "_mask",
        "mask",
        "data",
        "mask",
        "meta",
        "fill_value",
        "cube",
        "stokes_data",
        "cube",
        "cube"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    A class to store a spectral cube with multiple Stokes parameters.\n\n    The individual Stokes cubes can share a common mask in addition to having\n    component-specific masks.\n    \"\"\"",
        "\"\"\"\n        The underlying mask\n        \"\"\"",
        "\"\"\"\n        Descriptor to return the Stokes cubes\n        \"\"\"",
        "\"\"\"\n        Return a new StokesSpectralCube instance that contains a composite mask\n        of the current StokesSpectralCube and the new ``mask``.\n\n        Parameters\n        ----------\n        mask : :class:`MaskBase` instance, or boolean numpy array\n            The mask to apply. If a boolean array is supplied,\n            it will be converted into a mask, assuming that\n            True values indicate included elements.\n\n        inherit_mask : bool (optional, default=True)\n            If True, combines the provided mask with the\n            mask currently attached to the cube\n\n        Returns\n        -------\n        new_cube : :class:`StokesSpectralCube`\n            A cube with the new mask applied.\n\n        Notes\n        -----\n        This operation returns a view into the data, and not a copy.\n        \"\"\"",
        "\"\"\"\n        Read a spectral cube from a file.\n\n        If the file contains Stokes axes, they will be read in. If you are\n        only interested in the unpolarized emission (I), you can use\n        :meth:`~spectral_cube.SpectralCube.read` instead.\n\n        Parameters\n        ----------\n        filename : str\n            The file to read the cube from\n        format : str\n            The format of the file to read. (Currently limited to 'fits' and 'casa_image')\n        hdu : int or str\n            For FITS files, the HDU to read in (can be the ID or name of an\n            HDU).\n\n        Returns\n        -------\n        cube : :class:`SpectralCube`\n        \"\"\"",
        "\"\"\"\n        Write the spectral cube to a file.\n\n        Parameters\n        ----------\n        filename : str\n            The path to write the file to\n        format : str\n            The format of the file to write. (Currently limited to 'fits')\n        overwrite : bool\n            If True, overwrite `filename` if it exists\n        \"\"\""
    ],
    "functions": [
        "shape",
        "mask",
        "wcs",
        "__dir__",
        "__getattr__",
        "with_mask",
        "_new_cube_with",
        "with_spectral_unit",
        "read",
        "write"
    ],
    "classes": [
        "StokesSpectralCube"
    ]
}