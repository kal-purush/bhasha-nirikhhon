{
    "identifiers": [
        "org",
        "logisticPlanning",
        "tsp",
        "solving",
        "algorithms",
        "localSearch",
        "permutation",
        "ts",
        "java",
        "io",
        "PrintStream",
        "java",
        "util",
        "java",
        "util",
        "Iterator",
        "org",
        "logisticPlanning",
        "tsp",
        "benchmarking",
        "instances",
        "Instance",
        "org",
        "logisticPlanning",
        "tsp",
        "benchmarking",
        "objective",
        "ObjectiveFunction",
        "org",
        "logisticPlanning",
        "tsp",
        "solving",
        "Individual",
        "org",
        "logisticPlanning",
        "tsp",
        "solving",
        "TSPAlgorithmRunner",
        "org",
        "logisticPlanning",
        "tsp",
        "solving",
        "TSPModule",
        "org",
        "logisticPlanning",
        "tsp",
        "solving",
        "algorithms",
        "localSearch",
        "TSPLocalSearchAlgorithm",
        "org",
        "logisticPlanning",
        "tsp",
        "solving",
        "operators",
        "permutation",
        "update",
        "PermutationUpdateOperator",
        "org",
        "logisticPlanning",
        "tsp",
        "solving",
        "operators",
        "permutation",
        "update",
        "PermutationUpdateOperators",
        "org",
        "logisticPlanning",
        "tsp",
        "solving",
        "utils",
        "edge",
        "Edge",
        "org",
        "logisticPlanning",
        "utils",
        "config",
        "Configurable",
        "org",
        "logisticPlanning",
        "utils",
        "config",
        "Configuration",
        "serialVersionUID",
        "PARAM_UPDATING_OPERATORS",
        "m_ops",
        "PARAM_ABSOLUTE_LENGTH",
        "absolute",
        "tabuListLength",
        "PARAM_RATE",
        "rate",
        "PARAM_USE_FIRST_IMPROVEMENT",
        "m_useFirstImprovement",
        "inComingTabuList",
        "outComingTabuList",
        "m_ops",
        "PermutationUpdateOperators",
        "OPERATORS_AND_COMPLEMENT",
        "tabuListLength",
        "ptabuListLength",
        "tabuListLength",
        "ptabuListLength",
        "args",
        "TSPAlgorithmRunner",
        "benchmark",
        "Instance",
        "SYMMETRIC_INSTANCES",
        "args",
        "Override",
        "srcdst",
        "f",
        "sol",
        "srcdst",
        "solution",
        "n",
        "inComingEdges",
        "outComingEdges",
        "foundImprov",
        "isTabued",
        "d",
        "a",
        "b",
        "delta",
        "bestA",
        "bestB",
        "value",
        "srcdst",
        "tourLength",
        "best",
        "n",
        "f",
        "n",
        "foundImprov",
        "f",
        "shouldTerminate",
        "foundImprov",
        "bestA",
        "bestB",
        "delta",
        "MAX_VALUE",
        "best",
        "findOperations",
        "a",
        "a",
        "n",
        "a",
        "b",
        "a",
        "b",
        "n",
        "b",
        "o",
        "m_ops",
        "d",
        "o",
        "delta",
        "sol",
        "f",
        "a",
        "b",
        "d",
        "delta",
        "inComingEdges",
        "o",
        "inComingEdges",
        "sol",
        "a",
        "b",
        "outComingEdges",
        "o",
        "outComingEdges",
        "sol",
        "a",
        "b",
        "inComingTabuList",
        "isEmpty",
        "i",
        "i",
        "inComingEdges",
        "size",
        "i",
        "outComingTabuList",
        "contains",
        "inComingEdges",
        "get",
        "i",
        "inComingTabuList",
        "contains",
        "outComingEdges",
        "get",
        "i",
        "isTabued",
        "isTabued",
        "delta",
        "d",
        "bestA",
        "a",
        "bestB",
        "b",
        "best",
        "o",
        "delta",
        "m_useFirstImprovement",
        "findOperations",
        "isTabued",
        "best",
        "best",
        "update",
        "sol",
        "bestA",
        "bestB",
        "inComingEdges",
        "best",
        "inComingEdges",
        "sol",
        "bestA",
        "bestB",
        "outComingEdges",
        "best",
        "outComingEdges",
        "sol",
        "bestA",
        "bestB",
        "inComingTabuList",
        "addAll",
        "inComingEdges",
        "outComingTabuList",
        "addAll",
        "outComingEdges",
        "i",
        "inComingTabuList",
        "size",
        "tabuListLength",
        "i",
        "i",
        "inComingTabuList",
        "remove",
        "i",
        "outComingTabuList",
        "remove",
        "i",
        "value",
        "delta",
        "f",
        "registerFEs",
        "sol",
        "value",
        "delta",
        "foundImprov",
        "f",
        "registerFEs",
        "value",
        "Override",
        "res",
        "ops",
        "i",
        "res",
        "clone",
        "res",
        "m_ops",
        "ops",
        "res",
        "m_ops",
        "clone",
        "i",
        "ops",
        "length",
        "i",
        "ops",
        "i",
        "ops",
        "i",
        "clone",
        "res",
        "inComingTabuList",
        "res",
        "outComingTabuList",
        "res",
        "Override",
        "config",
        "configure",
        "config",
        "absolute",
        "config",
        "getInt",
        "TabuSearchEdges",
        "PARAM_ABSOLUTE_LENGTH",
        "absolute",
        "rate",
        "config",
        "getInt",
        "TabuSearchEdges",
        "PARAM_RATE",
        "rate",
        "m_useFirstImprovement",
        "config",
        "getBoolean",
        "TabuSearchMove",
        "PARAM_USE_FIRST_IMPROVEMENT",
        "m_useFirstImprovement",
        "Override",
        "ps",
        "printConfiguration",
        "ps",
        "Configurable",
        "printKey",
        "TabuSearchEdges",
        "PARAM_ABSOLUTE_LENGTH",
        "ps",
        "ps",
        "tabuListLength",
        "Configurable",
        "printKey",
        "TabuSearchEdges",
        "PARAM_RATE",
        "ps",
        "ps",
        "rate",
        "Configurable",
        "printKey",
        "TabuSearchEdges",
        "PARAM_UPDATING_OPERATORS",
        "ps",
        "Configurable",
        "printlnObject",
        "m_ops",
        "ps",
        "Override",
        "f",
        "beginRun",
        "f",
        "TSPModule",
        "invokeBeginRun",
        "f",
        "m_ops",
        "absolute",
        "rate",
        "sqrt",
        "f",
        "n",
        "f",
        "n",
        "f",
        "n",
        "tabuListLength",
        "absolute",
        "rate",
        "sqrt",
        "f",
        "n",
        "tabuListLength",
        "f",
        "n",
        "inComingTabuList",
        "tabuListLength",
        "outComingTabuList",
        "tabuListLength",
        "Override",
        "f",
        "inComingTabuList",
        "outComingTabuList",
        "TSPModule",
        "invokeEndRun",
        "f",
        "m_ops",
        "endRun",
        "f"
    ],
    "literals": [
        "\"updatingOperators\"",
        "\"absolute\"",
        "\"rate\"",
        "\"useFirstImprovement\"",
        "\"TabuSearchEdges\""
    ],
    "variables": [
        "m_ops",
        "absolute",
        "tabuListLength",
        "rate",
        "m_useFirstImprovement",
        "inComingTabuList",
        "outComingTabuList",
        "n",
        "inComingEdges",
        "outComingEdges",
        "d",
        "a",
        "b",
        "delta",
        "bestA",
        "bestB",
        "best",
        "res",
        "ops",
        "i"
    ],
    "comments": [
        "$NON-NLS-1$",
        "$NON-NLS-1$",
        "$NON-NLS-1$",
        "$NON-NLS-1$",
        "this.tabuListLength = 10;",
        "",
        ""
    ],
    "docstrings": [
        "* <p>\n * A simple tabu search, i.e., a local search, which in each step checks if\n * the best solution is already in a list called tabu list. If it is, then\n * checks the second best solution until one solution not in the tabu list\n * found and accepts this solution. And also, add each solution we get in\n * each step into the tabu list.\n * {@link org.logisticPlanning.tsp.solving.operators.permutation.update.PermutationUpdateOperator\n * updating operations}&nbsp;[<a href=\"#cite_RN2002AI\"\n * style=\"font-weight:bold\">1</a>, <a href=\"#cite_JCS2003HC\"\n * style=\"font-weight:bold\">2</a>, <a href=\"#cite_DHS2000HC\"\n * style=\"font-weight:bold\">3</a>] would yield the best improvement and\n * then applies this operator.\n * </p>\n *\n * @author <em>Dan Xu</em>, Email:&nbsp;<a\n *         href=\"mailto:dandy@mail.ustc.edu.cn\">dandy@mail.ustc.edu.cn</a>,\n *         Tel.:&nbsp;<a href=\"tel:+86 139 650 406 13\">+86 139 650 406\n *         13</a>; <a href=\"http://www.ustc.edu.cn/\">University of Science\n *         and Technology of China (USTC)</a>\n *         [&#x4E2D;&#x56FD;&#x79D1;&#x5B66\n *         ;&#x6280;&#x672F;&#x5927;&#x5B66;], (<a href=\n *         \"https://en.wikipedia.org/wiki/University_of_Science_and_Technology_of_China\"\n *         >wikipedia</a>); <a href=\"http://cs.ustc.edu.cn/\">School of\n *         Computer Science and Technology (SCST)</a>\n *         [&#x8BA1;&#x7B97;&#x673A;&#x79D1;&#x5B66\n *         ;&#x4E0E;&#x6280;&#x672F;&#x5B66;&#x9662;]; <a\n *         href=\"http://ubri.ustc.edu.cn/\">USTC-Birmingham Joint Research\n *         Institute in Intelligent Computation and Its Applications\n *         (UBRI)</a>; West Campus [&#x897F;&#x533A;]; Crossroad of\n *         Huangshan Road and Feixi Road\n *         [&#x9EC4;&#x5C71;&#x8DEF;/&#x80A5;&\n *         #x897F;&#x8DEF;&#x5341;&#x5B57 ;&#x8DEF;&#x53E3;]; <a\n *         href=\"https://en.wikipedia.org/wiki/Hefei\">Hefei</a>\n *         [&#x5408;&#x80A5;&#x5E02;] 230027; <a\n *         href=\"https://en.wikipedia.org/wiki/Anhui\">Anhui</a>\n *         [&#x5B89;&#x5FBD;&#x7701;]; <a\n *         href=\"https://en.wikipedia.org/wiki/People%27s_Republic_of_China\"\n *         >China</a> [&#x4E2D;&#x56FD;]",
        "the serial version uid",
        "the updating operators: {@value}",
        "the update operations",
        "the length of tabu list: {@value}",
        "the absolute length of tabu list",
        "the length of tabu list",
        "the length of tabu list: {@value}",
        "the length of tabu list",
        "the tabu list",
        "instantiate",
        "* get the tabu list length\n   *\n   * @return the tabu list length",
        "* set the tabu list length\n   *\n   * @param ptabuListLength\n   *          the tabu list length",
        "* Perform the tabu search\n   *\n   * @param args\n   *          the command line arguments",
        "{@inheritDoc}",
        "{@inheritDoc}",
        "{@inheritDoc}",
        "{@inheritDoc}",
        "{@inheritDoc}",
        "{@inheritDoc}"
    ],
    "functions": [
        "TabuSearchEdges",
        "getTabuListLength",
        "setTabuListLength",
        "main",
        "localSearch",
        "TabuSearchEdges",
        "clone",
        "configure",
        "printConfiguration",
        "beginRun",
        "endRun"
    ],
    "classes": [
        "TabuSearchEdges"
    ]
}