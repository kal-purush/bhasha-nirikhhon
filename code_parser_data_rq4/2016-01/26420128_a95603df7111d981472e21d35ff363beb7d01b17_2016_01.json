{
    "identifiers": [],
    "literals": [
        "'bytearray'",
        "'<dt id=\"bytearray\">\\n<em class=\"property\">class </em><code class=\"descname\">bytearray</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>source</em><span class=\"optional\">[</span>, <em>encoding</em><span class=\"optional\">[</span>, <em>errors</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a new array of bytes.  The <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#bytearray\" title=\"bytearray\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">bytearray</span></code></a> class is a mutable\\nsequence of integers in the range 0 &lt;= x &lt; 256.  It has most of the usual\\nmethods of mutable sequences, described in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesseq-mutable\"><span>Mutable Sequence Types</span></a>, as well\\nas most methods that the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#str\" title=\"str\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">str</span></code></a> type has, see <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#string-methods\"><span>String Methods</span></a>.</p>\\n<p>The optional <em>source</em> parameter can be used to initialize the array in a few\\ndifferent ways:</p>\\n<ul class=\"simple\">\\n<li>If it is <em>unicode</em>, you must also give the <em>encoding</em> (and optionally,\\n<em>errors</em>) parameters; <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#bytearray\" title=\"bytearray\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">bytearray()</span></code></a> then converts the unicode to\\nbytes using <code class=\"xref py py-meth docutils literal\"><span class=\"pre\">unicode.encode()</span></code>.</li>\\n<li>If it is an <em>integer</em>, the array will have that size and will be\\ninitialized with null bytes.</li>\\n<li>If it is an object conforming to the <em>buffer</em> interface, a read-only buffer\\nof the object will be used to initialize the bytes array.</li>\\n<li>If it is an <em>iterable</em>, it must be an iterable of integers in the range\\n<code class=\"docutils literal\"><span class=\"pre\">0</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">x</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">256</span></code>, which are used as the initial contents of the array.</li>\\n</ul>\\n<p>Without an argument, an array of size 0 is created.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.6.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#bytearray'",
        "'all'",
        "'<dt id=\"all\">\\n<code class=\"descname\">all</code><span class=\"sig-paren\">(</span><em>iterable</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return <code class=\"docutils literal\"><span class=\"pre\">True</span></code> if all elements of the <em>iterable</em> are true (or if the iterable\\nis empty).  Equivalent to:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">all</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">):</span>\\n    <span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">iterable</span><span class=\"p\">:</span>\\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">element</span><span class=\"p\">:</span>\\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\\n</pre></div>\\n</div>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.5.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#all'",
        "'set'",
        "'<dt>\\n<em class=\"property\">class </em><code class=\"descname\">set</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>iterable</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a new <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#set\" title=\"set\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">set</span></code></a> object, optionally with elements taken from\\n<em>iterable</em>.  <code class=\"docutils literal\"><span class=\"pre\">set</span></code> is a built-in class.  See <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#set\" title=\"set\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">set</span></code></a> and\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#types-set\"><span>Set Types \\xe2\\x80\\x94 set, frozenset</span></a> for documentation about this class.</p>\\n<p>For other containers see the built-in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#frozenset\" title=\"frozenset\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">frozenset</span></code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#list\" title=\"list\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">list</span></code></a>,\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#tuple\" title=\"tuple\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">tuple</span></code></a>, and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dict</span></code></a> classes, as well as the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/collections.html#module-collections\" title=\"collections: High-performance datatypes\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">collections</span></code></a>\\nmodule.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.4.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#set'",
        "'help'",
        "'<dt id=\"help\">\\n<code class=\"descname\">help</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>object</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Invoke the built-in help system.  (This function is intended for interactive\\nuse.)  If no argument is given, the interactive help system starts on the\\ninterpreter console.  If the argument is a string, then the string is looked up\\nas the name of a module, function, class, method, keyword, or documentation\\ntopic, and a help page is printed on the console.  If the argument is any other\\nkind of object, a help page on the object is generated.</p>\\n<p>This function is added to the built-in namespace by the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/site.html#module-site\" title=\"site: Module responsible for site-specific configuration.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">site</span></code></a> module.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.2.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#help'",
        "'vars'",
        "'<dt id=\"vars\">\\n<code class=\"descname\">vars</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>object</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#object.__dict__\" title=\"object.__dict__\"><code class=\"xref py py-attr docutils literal\"><span class=\"pre\">__dict__</span></code></a> attribute for a module, class, instance,\\nor any other object with a <code class=\"xref py py-attr docutils literal\"><span class=\"pre\">__dict__</span></code> attribute.</p>\\n<p>Objects such as modules and instances have an updateable <code class=\"xref py py-attr docutils literal\"><span class=\"pre\">__dict__</span></code>\\nattribute; however, other objects may have write restrictions on their\\n<code class=\"xref py py-attr docutils literal\"><span class=\"pre\">__dict__</span></code> attributes (for example, new-style classes use a\\ndictproxy to prevent direct dictionary updates).</p>\\n<p>Without an argument, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#vars\" title=\"vars\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">vars()</span></code></a> acts like <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#locals\" title=\"locals\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">locals()</span></code></a>.  Note, the\\nlocals dictionary is only useful for reads since updates to the locals\\ndictionary are ignored.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#vars'",
        "'int'",
        "'<dt id=\"int\">\\n<em class=\"property\">class </em><code class=\"descname\">int</code><span class=\"sig-paren\">(</span><em>x=0</em><span class=\"sig-paren\">)</span></dt><dt>\\n<em class=\"property\">class </em><code class=\"descname\">int</code><span class=\"sig-paren\">(</span><em>x</em>, <em>base=10</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return an integer object constructed from a number or string <em>x</em>, or return <code class=\"docutils literal\"><span class=\"pre\">0</span></code> if no\\narguments are given.  If <em>x</em> is a number, it can be a plain integer, a long\\ninteger, or a floating point number.  If <em>x</em> is floating point, the conversion\\ntruncates towards zero.  If the argument is outside the integer range, the\\nfunction returns a long object instead.</p>\\n<p>If <em>x</em> is not a number or if <em>base</em> is given, then <em>x</em> must be a string or\\nUnicode object representing an <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/lexical_analysis.html#integers\"><span>integer literal</span></a> in radix\\n<em>base</em>.  Optionally, the literal can be\\npreceded by <code class=\"docutils literal\"><span class=\"pre\">+</span></code> or <code class=\"docutils literal\"><span class=\"pre\">-</span></code> (with no space in between) and surrounded by\\nwhitespace.  A base-n literal consists of the digits 0 to n-1, with <code class=\"docutils literal\"><span class=\"pre\">a</span></code>\\nto <code class=\"docutils literal\"><span class=\"pre\">z</span></code> (or <code class=\"docutils literal\"><span class=\"pre\">A</span></code> to <code class=\"docutils literal\"><span class=\"pre\">Z</span></code>) having\\nvalues 10 to 35.  The default <em>base</em> is 10. The allowed values are 0 and 2-36.\\nBase-2, -8, and -16 literals can be optionally prefixed with <code class=\"docutils literal\"><span class=\"pre\">0b</span></code>/<code class=\"docutils literal\"><span class=\"pre\">0B</span></code>,\\n<code class=\"docutils literal\"><span class=\"pre\">0o</span></code>/<code class=\"docutils literal\"><span class=\"pre\">0O</span></code>/<code class=\"docutils literal\"><span class=\"pre\">0</span></code>, or <code class=\"docutils literal\"><span class=\"pre\">0x</span></code>/<code class=\"docutils literal\"><span class=\"pre\">0X</span></code>, as with integer literals in code.\\nBase 0 means to interpret the string exactly as an integer literal, so that\\nthe actual base is 2, 8, 10, or 16.</p>\\n<p>The integer type is described in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesnumeric\"><span>Numeric Types \\xe2\\x80\\x94 int, float, long, complex</span></a>.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#int'",
        "'pow'",
        "'<dt id=\"pow\">\\n<code class=\"descname\">pow</code><span class=\"sig-paren\">(</span><em>x</em>, <em>y</em><span class=\"optional\">[</span>, <em>z</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return <em>x</em> to the power <em>y</em>; if <em>z</em> is present, return <em>x</em> to the power <em>y</em>,\\nmodulo <em>z</em> (computed more efficiently than <code class=\"docutils literal\"><span class=\"pre\">pow(x,</span> <span class=\"pre\">y)</span> <span class=\"pre\">%</span> <span class=\"pre\">z</span></code>). The two-argument\\nform <code class=\"docutils literal\"><span class=\"pre\">pow(x,</span> <span class=\"pre\">y)</span></code> is equivalent to using the power operator: <code class=\"docutils literal\"><span class=\"pre\">x**y</span></code>.</p>\\n<p>The arguments must have numeric types.  With mixed operand types, the coercion\\nrules for binary arithmetic operators apply.  For int and long int operands, the\\nresult has the same type as the operands (after coercion) unless the second\\nargument is negative; in that case, all arguments are converted to float and a\\nfloat result is delivered.  For example, <code class=\"docutils literal\"><span class=\"pre\">10**2</span></code> returns <code class=\"docutils literal\"><span class=\"pre\">100</span></code>, but\\n<code class=\"docutils literal\"><span class=\"pre\">10**-2</span></code> returns <code class=\"docutils literal\"><span class=\"pre\">0.01</span></code>.  (This last feature was added in Python 2.2.  In\\nPython 2.1 and before, if both arguments were of integer types and the second\\nargument was negative, an exception was raised.) If the second argument is\\nnegative, the third argument must be omitted. If <em>z</em> is present, <em>x</em> and <em>y</em>\\nmust be of integer types, and <em>y</em> must be non-negative.  (This restriction was\\nadded in Python 2.2.  In Python 2.1 and before, floating 3-argument <code class=\"docutils literal\"><span class=\"pre\">pow()</span></code>\\nreturned platform-dependent results depending on floating-point rounding\\naccidents.)</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#pow'",
        "'unicode'",
        "'<dt id=\"unicode\">\\n<code class=\"descname\">unicode</code><span class=\"sig-paren\">(</span><em>object=\\'\\'</em><span class=\"sig-paren\">)</span></dt><dt>\\n<code class=\"descname\">unicode</code><span class=\"sig-paren\">(</span><em>object</em><span class=\"optional\">[</span>, <em>encoding</em><span class=\"optional\">[</span>, <em>errors</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the Unicode string version of <em>object</em> using one of the following modes:</p>\\n<p>If <em>encoding</em> and/or <em>errors</em> are given, <code class=\"docutils literal\"><span class=\"pre\">unicode()</span></code> will decode the object\\nwhich can either be an 8-bit string or a character buffer using the codec for\\n<em>encoding</em>. The <em>encoding</em> parameter is a string giving the name of an encoding;\\nif the encoding is not known, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.LookupError\" title=\"exceptions.LookupError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">LookupError</span></code></a> is raised. Error handling is\\ndone according to <em>errors</em>; this specifies the treatment of characters which are\\ninvalid in the input encoding.  If <em>errors</em> is <code class=\"docutils literal\"><span class=\"pre\">\\'strict\\'</span></code> (the default), a\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.ValueError\" title=\"exceptions.ValueError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">ValueError</span></code></a> is raised on errors, while a value of <code class=\"docutils literal\"><span class=\"pre\">\\'ignore\\'</span></code> causes\\nerrors to be silently ignored, and a value of <code class=\"docutils literal\"><span class=\"pre\">\\'replace\\'</span></code> causes the official\\nUnicode replacement character, <code class=\"docutils literal\"><span class=\"pre\">U+FFFD</span></code>, to be used to replace input\\ncharacters which cannot be decoded.  See also the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/codecs.html#module-codecs\" title=\"codecs: Encode and decode data and streams.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">codecs</span></code></a> module.</p>\\n<p>If no optional parameters are given, <code class=\"docutils literal\"><span class=\"pre\">unicode()</span></code> will mimic the behaviour of\\n<code class=\"docutils literal\"><span class=\"pre\">str()</span></code> except that it returns Unicode strings instead of 8-bit strings. More\\nprecisely, if <em>object</em> is a Unicode string or subclass it will return that\\nUnicode string without any additional decoding applied.</p>\\n<p>For objects which provide a <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__unicode__\" title=\"object.__unicode__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__unicode__()</span></code></a> method, it will call this method\\nwithout arguments to create a Unicode string. For all other objects, the 8-bit\\nstring version or representation is requested and then converted to a Unicode\\nstring using the codec for the default encoding in <code class=\"docutils literal\"><span class=\"pre\">\\'strict\\'</span></code> mode.</p>\\n<p>For more information on Unicode strings see <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesseq\"><span>Sequence Types \\xe2\\x80\\x94 str, unicode, list, tuple, bytearray, buffer, xrange</span></a> which describes\\nsequence functionality (Unicode strings are sequences), and also the\\nstring-specific methods described in the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#string-methods\"><span>String Methods</span></a> section. To\\noutput formatted strings use template strings or the <code class=\"docutils literal\"><span class=\"pre\">%</span></code> operator described\\nin the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#string-formatting\"><span>String Formatting Operations</span></a> section. In addition see the\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/strings.html#stringservices\"><span>String Services</span></a> section. See also <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#str\" title=\"str\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">str()</span></code></a>.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.0.</span></p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.2: </span>Support for <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__unicode__\" title=\"object.__unicode__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__unicode__()</span></code></a> added.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#unicode'",
        "'float'",
        "'<dt id=\"float\">\\n<em class=\"property\">class </em><code class=\"descname\">float</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>x</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a floating point number constructed from a number or string <em>x</em>.</p>\\n<p>If the argument is a string, it\\nmust contain a possibly signed decimal or floating point number, possibly\\nembedded in whitespace. The argument may also be [+|-]nan or [+|-]inf.\\nOtherwise, the argument may be a plain or long integer\\nor a floating point number, and a floating point number with the same value\\n(within Python\\xe2\\x80\\x99s floating point precision) is returned.  If no argument is\\ngiven, returns <code class=\"docutils literal\"><span class=\"pre\">0.0</span></code>.</p>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\" id=\"index-2\">When passing in a string, values for NaN and Infinity may be returned, depending\\non the underlying C library.  Float accepts the strings nan, inf and -inf for\\nNaN and positive or negative infinity. The case and a leading + are ignored as\\nwell as a leading - is ignored for NaN. Float always represents NaN and infinity\\nas nan, inf or -inf.</p>\\n</div>\\n<p>The float type is described in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesnumeric\"><span>Numeric Types \\xe2\\x80\\x94 int, float, long, complex</span></a>.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#float'",
        "'reduce'",
        "'<dt id=\"reduce\">\\n<code class=\"descname\">reduce</code><span class=\"sig-paren\">(</span><em>function</em>, <em>iterable</em><span class=\"optional\">[</span>, <em>initializer</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Apply <em>function</em> of two arguments cumulatively to the items of <em>iterable</em>, from\\nleft to right, so as to reduce the iterable to a single value.  For example,\\n<code class=\"docutils literal\"><span class=\"pre\">reduce(lambda</span> <span class=\"pre\">x,</span> <span class=\"pre\">y:</span> <span class=\"pre\">x+y,</span> <span class=\"pre\">[1,</span> <span class=\"pre\">2,</span> <span class=\"pre\">3,</span> <span class=\"pre\">4,</span> <span class=\"pre\">5])</span></code> calculates <code class=\"docutils literal\"><span class=\"pre\">((((1+2)+3)+4)+5)</span></code>.\\nThe left argument, <em>x</em>, is the accumulated value and the right argument, <em>y</em>, is\\nthe update value from the <em>iterable</em>.  If the optional <em>initializer</em> is present,\\nit is placed before the items of the iterable in the calculation, and serves as\\na default when the iterable is empty.  If <em>initializer</em> is not given and\\n<em>iterable</em> contains only one item, the first item is returned.\\nRoughly equivalent to:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">,</span> <span class=\"n\">iterable</span><span class=\"p\">,</span> <span class=\"n\">initializer</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\\n    <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">)</span>\\n    <span class=\"k\">if</span> <span class=\"n\">initializer</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\\n        <span class=\"k\">try</span><span class=\"p\">:</span>\\n            <span class=\"n\">initializer</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span>\\n        <span class=\"k\">except</span> <span class=\"ne\">StopIteration</span><span class=\"p\">:</span>\\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s\">\\'reduce() of empty sequence with no initial value\\'</span><span class=\"p\">)</span>\\n    <span class=\"n\">accum_value</span> <span class=\"o\">=</span> <span class=\"n\">initializer</span>\\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">it</span><span class=\"p\">:</span>\\n        <span class=\"n\">accum_value</span> <span class=\"o\">=</span> <span class=\"n\">function</span><span class=\"p\">(</span><span class=\"n\">accum_value</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\\n    <span class=\"k\">return</span> <span class=\"n\">accum_value</span>\\n</pre></div>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#reduce'",
        "'coerce'",
        "'<dt id=\"coerce\">\\n<code class=\"descname\">coerce</code><span class=\"sig-paren\">(</span><em>x</em>, <em>y</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a tuple consisting of the two numeric arguments converted to a common\\ntype, using the same rules as used by arithmetic operations. If coercion is not\\npossible, raise <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.TypeError\" title=\"exceptions.TypeError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></code></a>.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#coerce'",
        "'intern'",
        "'<dt id=\"intern\">\\n<code class=\"descname\">intern</code><span class=\"sig-paren\">(</span><em>string</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Enter <em>string</em> in the table of \\xe2\\x80\\x9cinterned\\xe2\\x80\\x9d strings and return the interned string\\n\\xe2\\x80\\x93 which is <em>string</em> itself or a copy. Interning strings is useful to gain a\\nlittle performance on dictionary lookup \\xe2\\x80\\x93 if the keys in a dictionary are\\ninterned, and the lookup key is interned, the key comparisons (after hashing)\\ncan be done by a pointer compare instead of a string compare.  Normally, the\\nnames used in Python programs are automatically interned, and the dictionaries\\nused to hold module, class or instance attributes have interned keys.</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.3: </span>Interned strings are not immortal (like they used to be in Python 2.2 and\\nbefore); you must keep a reference to the return value of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#intern\" title=\"intern\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">intern()</span></code></a> around\\nto benefit from it.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#intern'",
        "'globals'",
        "'<dt id=\"globals\">\\n<code class=\"descname\">globals</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a dictionary representing the current global symbol table. This is always\\nthe dictionary of the current module (inside a function or method, this is the\\nmodule where it is defined, not the module from which it is called).</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#globals'",
        "'issubclass'",
        "'<dt id=\"issubclass\">\\n<code class=\"descname\">issubclass</code><span class=\"sig-paren\">(</span><em>class</em>, <em>classinfo</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return true if <em>class</em> is a subclass (direct, indirect or <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-abstract-base-class\"><span class=\"xref std std-term\">virtual</span></a>) of <em>classinfo</em>.  A\\nclass is considered a subclass of itself. <em>classinfo</em> may be a tuple of class\\nobjects, in which case every entry in <em>classinfo</em> will be checked. In any other\\ncase, a <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.TypeError\" title=\"exceptions.TypeError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></code></a> exception is raised.</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.3: </span>Support for a tuple of type information was added.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#issubclass'",
        "'divmod'",
        "'<dt id=\"divmod\">\\n<code class=\"descname\">divmod</code><span class=\"sig-paren\">(</span><em>a</em>, <em>b</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Take two (non complex) numbers as arguments and return a pair of numbers\\nconsisting of their quotient and remainder when using long division.  With mixed\\noperand types, the rules for binary arithmetic operators apply.  For plain and\\nlong integers, the result is the same as <code class=\"docutils literal\"><span class=\"pre\">(a</span> <span class=\"pre\">//</span> <span class=\"pre\">b,</span> <span class=\"pre\">a</span> <span class=\"pre\">%</span> <span class=\"pre\">b)</span></code>. For floating point\\nnumbers the result is <code class=\"docutils literal\"><span class=\"pre\">(q,</span> <span class=\"pre\">a</span> <span class=\"pre\">%</span> <span class=\"pre\">b)</span></code>, where <em>q</em> is usually <code class=\"docutils literal\"><span class=\"pre\">math.floor(a</span> <span class=\"pre\">/</span> <span class=\"pre\">b)</span></code>\\nbut may be 1 less than that.  In any case <code class=\"docutils literal\"><span class=\"pre\">q</span> <span class=\"pre\">*</span> <span class=\"pre\">b</span> <span class=\"pre\">+</span> <span class=\"pre\">a</span> <span class=\"pre\">%</span> <span class=\"pre\">b</span></code> is very close to\\n<em>a</em>, if <code class=\"docutils literal\"><span class=\"pre\">a</span> <span class=\"pre\">%</span> <span class=\"pre\">b</span></code> is non-zero it has the same sign as <em>b</em>, and <code class=\"docutils literal\"><span class=\"pre\">0</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">abs(a</span> <span class=\"pre\">%</span> <span class=\"pre\">b)</span>\\n<span class=\"pre\">&lt;</span> <span class=\"pre\">abs(b)</span></code>.</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.3: </span>Using <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#divmod\" title=\"divmod\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">divmod()</span></code></a> with complex numbers is deprecated.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#divmod'",
        "'file'",
        "'<dt id=\"file\">\\n<code class=\"descname\">file</code><span class=\"sig-paren\">(</span><em>name</em><span class=\"optional\">[</span>, <em>mode</em><span class=\"optional\">[</span>, <em>buffering</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Constructor function for the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#file\" title=\"file\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">file</span></code></a> type, described further in section\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#bltin-file-objects\"><span>File Objects</span></a>.  The constructor\\xe2\\x80\\x99s arguments are the same as those\\nof the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#open\" title=\"open\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">open()</span></code></a> built-in function described below.</p>\\n<p>When opening a file, it\\xe2\\x80\\x99s preferable to use <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#open\" title=\"open\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">open()</span></code></a> instead of  invoking\\nthis constructor directly.  <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#file\" title=\"file\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">file</span></code></a> is more suited to type testing (for\\nexample, writing <code class=\"docutils literal\"><span class=\"pre\">isinstance(f,</span> <span class=\"pre\">file)</span></code>).</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.2.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#file'",
        "'enumerate'",
        "'<dt id=\"enumerate\">\\n<code class=\"descname\">enumerate</code><span class=\"sig-paren\">(</span><em>sequence</em>, <em>start=0</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return an enumerate object. <em>sequence</em> must be a sequence, an\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-iterator\"><span class=\"xref std std-term\">iterator</span></a>, or some other object which supports iteration.  The\\n<code class=\"xref py py-meth docutils literal\"><span class=\"pre\">next()</span></code> method of the iterator returned by <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#enumerate\" title=\"enumerate\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">enumerate()</span></code></a> returns a\\ntuple containing a count (from <em>start</em> which defaults to 0) and the\\nvalues obtained from iterating over <em>sequence</em>:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><span class=\"copybutton\" style=\"cursor: pointer; position: absolute; top: 0px; right: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; padding-right: 0.2em; display: none; text-decoration: none;\" title=\"Hide the prompts and output\">&gt;&gt;&gt;</span><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">seasons</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\\'Spring\\'</span><span class=\"p\">,</span> <span class=\"s\">\\'Summer\\'</span><span class=\"p\">,</span> <span class=\"s\">\\'Fall\\'</span><span class=\"p\">,</span> <span class=\"s\">\\'Winter\\'</span><span class=\"p\">]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">seasons</span><span class=\"p\">))</span>\\n<span class=\"go\">[(0, \\'Spring\\'), (1, \\'Summer\\'), (2, \\'Fall\\'), (3, \\'Winter\\')]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">seasons</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\\n<span class=\"go\">[(1, \\'Spring\\'), (2, \\'Summer\\'), (3, \\'Fall\\'), (4, \\'Winter\\')]</span>\\n</pre></div>\\n</div>\\n<p>Equivalent to:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">enumerate</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">start</span>\\n    <span class=\"k\">for</span> <span class=\"n\">elem</span> <span class=\"ow\">in</span> <span class=\"n\">sequence</span><span class=\"p\">:</span>\\n        <span class=\"k\">yield</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">elem</span>\\n        <span class=\"n\">n</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\\n</pre></div>\\n</div>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.3.</span></p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.6: </span>The <em>start</em> parameter was added.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#enumerate'",
        "'memoryview'",
        "'<dt>\\n<code class=\"descname\">memoryview</code><span class=\"sig-paren\">(</span><em>obj</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a \\xe2\\x80\\x9cmemory view\\xe2\\x80\\x9d object created from the given argument.  See\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typememoryview\"><span>memoryview type</span></a> for more information.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#memoryview'",
        "'unichr'",
        "'<dt id=\"unichr\">\\n<code class=\"descname\">unichr</code><span class=\"sig-paren\">(</span><em>i</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the Unicode string of one character whose Unicode code is the integer\\n<em>i</em>.  For example, <code class=\"docutils literal\"><span class=\"pre\">unichr(97)</span></code> returns the string <code class=\"docutils literal\"><span class=\"pre\">u\\'a\\'</span></code>.  This is the\\ninverse of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#ord\" title=\"ord\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">ord()</span></code></a> for Unicode strings.  The valid range for the argument\\ndepends how Python was configured \\xe2\\x80\\x93 it may be either UCS2 [0..0xFFFF] or UCS4\\n[0..0x10FFFF]. <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.ValueError\" title=\"exceptions.ValueError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">ValueError</span></code></a> is raised otherwise. For ASCII and 8-bit\\nstrings see <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#chr\" title=\"chr\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">chr()</span></code></a>.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.0.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#unichr'",
        "'complex'",
        "'<dt id=\"complex\">\\n<em class=\"property\">class </em><code class=\"descname\">complex</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>real</em><span class=\"optional\">[</span>, <em>imag</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a complex number with the value <em>real</em> + <em>imag</em>*1j or convert a string or\\nnumber to a complex number.  If the first parameter is a string, it will be\\ninterpreted as a complex number and the function must be called without a second\\nparameter.  The second parameter can never be a string. Each argument may be any\\nnumeric type (including complex). If <em>imag</em> is omitted, it defaults to zero and\\nthe function serves as a numeric conversion function like <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#int\" title=\"int\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">int()</span></code></a>,\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#long\" title=\"long\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">long()</span></code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#float\" title=\"float\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">float()</span></code></a>.  If both arguments are omitted, returns <code class=\"docutils literal\"><span class=\"pre\">0j</span></code>.</p>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\">When converting from a string, the string must not contain whitespace\\naround the central <code class=\"docutils literal\"><span class=\"pre\">+</span></code> or <code class=\"docutils literal\"><span class=\"pre\">-</span></code> operator.  For example,\\n<code class=\"docutils literal\"><span class=\"pre\">complex(\\'1+2j\\')</span></code> is fine, but <code class=\"docutils literal\"><span class=\"pre\">complex(\\'1</span> <span class=\"pre\">+</span> <span class=\"pre\">2j\\')</span></code> raises\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.ValueError\" title=\"exceptions.ValueError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">ValueError</span></code></a>.</p>\\n</div>\\n<p>The complex type is described in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesnumeric\"><span>Numeric Types \\xe2\\x80\\x94 int, float, long, complex</span></a>.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#complex'",
        "'open'",
        "'<dt id=\"open\">\\n<code class=\"descname\">open</code><span class=\"sig-paren\">(</span><em>name</em><span class=\"optional\">[</span>, <em>mode</em><span class=\"optional\">[</span>, <em>buffering</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Open a file, returning an object of the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#file\" title=\"file\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">file</span></code></a> type described in\\nsection <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#bltin-file-objects\"><span>File Objects</span></a>.  If the file cannot be opened,\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.IOError\" title=\"exceptions.IOError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">IOError</span></code></a> is raised.  When opening a file, it\\xe2\\x80\\x99s preferable to use\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#open\" title=\"open\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">open()</span></code></a> instead of invoking the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#file\" title=\"file\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">file</span></code></a> constructor directly.</p>\\n<p>The first two arguments are the same as for <code class=\"docutils literal\"><span class=\"pre\">stdio</span></code>\\xe2\\x80\\x98s <code class=\"xref c c-func docutils literal\"><span class=\"pre\">fopen()</span></code>:\\n<em>name</em> is the file name to be opened, and <em>mode</em> is a string indicating how\\nthe file is to be opened.</p>\\n<p>The most commonly-used values of <em>mode</em> are <code class=\"docutils literal\"><span class=\"pre\">\\'r\\'</span></code> for reading, <code class=\"docutils literal\"><span class=\"pre\">\\'w\\'</span></code> for\\nwriting (truncating the file if it already exists), and <code class=\"docutils literal\"><span class=\"pre\">\\'a\\'</span></code> for appending\\n(which on <em>some</em> Unix systems means that <em>all</em> writes append to the end of the\\nfile regardless of the current seek position).  If <em>mode</em> is omitted, it\\ndefaults to <code class=\"docutils literal\"><span class=\"pre\">\\'r\\'</span></code>.  The default is to use text mode, which may convert\\n<code class=\"docutils literal\"><span class=\"pre\">\\'\\\\n\\'</span></code> characters to a platform-specific representation on writing and back\\non reading.  Thus, when opening a binary file, you should append <code class=\"docutils literal\"><span class=\"pre\">\\'b\\'</span></code> to\\nthe <em>mode</em> value to open the file in binary mode, which will improve\\nportability.  (Appending <code class=\"docutils literal\"><span class=\"pre\">\\'b\\'</span></code> is useful even on systems that don\\xe2\\x80\\x99t treat\\nbinary and text files differently, where it serves as documentation.)  See below\\nfor more possible values of <em>mode</em>.</p>\\n<p id=\"index-4\">The optional <em>buffering</em> argument specifies the file\\xe2\\x80\\x99s desired buffer size: 0\\nmeans unbuffered, 1 means line buffered, any other positive value means use a\\nbuffer of (approximately) that size (in bytes).  A negative <em>buffering</em> means\\nto use the system default, which is usually line buffered for tty devices and\\nfully buffered for other files.  If omitted, the system default is used. <a class=\"footnote-reference\" href=\"https://docs.python.org/2/library/#id4\" id=\"id2\">[2]</a></p>\\n<p>Modes <code class=\"docutils literal\"><span class=\"pre\">\\'r+\\'</span></code>, <code class=\"docutils literal\"><span class=\"pre\">\\'w+\\'</span></code> and <code class=\"docutils literal\"><span class=\"pre\">\\'a+\\'</span></code> open the file for updating (reading and writing);\\nnote that <code class=\"docutils literal\"><span class=\"pre\">\\'w+\\'</span></code> truncates the file.  Append <code class=\"docutils literal\"><span class=\"pre\">\\'b\\'</span></code> to the mode to open the file in\\nbinary mode, on systems that differentiate between binary and text files; on\\nsystems that don\\xe2\\x80\\x99t have this distinction, adding the <code class=\"docutils literal\"><span class=\"pre\">\\'b\\'</span></code> has no effect.</p>\\n<p id=\"index-5\">In addition to the standard <code class=\"xref c c-func docutils literal\"><span class=\"pre\">fopen()</span></code> values <em>mode</em> may be <code class=\"docutils literal\"><span class=\"pre\">\\'U\\'</span></code> or\\n<code class=\"docutils literal\"><span class=\"pre\">\\'rU\\'</span></code>.  Python is usually built with <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-universal-newlines\"><span class=\"xref std std-term\">universal newlines</span></a> support;\\nsupplying <code class=\"docutils literal\"><span class=\"pre\">\\'U\\'</span></code> opens the file as a text file, but lines may be terminated\\nby any of the following: the Unix end-of-line convention <code class=\"docutils literal\"><span class=\"pre\">\\'\\\\n\\'</span></code>,  the\\nMacintosh convention <code class=\"docutils literal\"><span class=\"pre\">\\'\\\\r\\'</span></code>, or the Windows convention <code class=\"docutils literal\"><span class=\"pre\">\\'\\\\r\\\\n\\'</span></code>. All of\\nthese external representations are seen as <code class=\"docutils literal\"><span class=\"pre\">\\'\\\\n\\'</span></code> by the Python program.\\nIf Python is built without universal newlines support a <em>mode</em> with <code class=\"docutils literal\"><span class=\"pre\">\\'U\\'</span></code>\\nis the same as normal text mode.  Note that file objects so opened also have\\nan attribute called <code class=\"xref py py-attr docutils literal\"><span class=\"pre\">newlines</span></code> which has a value of <code class=\"docutils literal\"><span class=\"pre\">None</span></code> (if no\\nnewlines have yet been seen), <code class=\"docutils literal\"><span class=\"pre\">\\'\\\\n\\'</span></code>, <code class=\"docutils literal\"><span class=\"pre\">\\'\\\\r\\'</span></code>, <code class=\"docutils literal\"><span class=\"pre\">\\'\\\\r\\\\n\\'</span></code>, or a tuple\\ncontaining all the newline types seen.</p>\\n<p>Python enforces that the mode, after stripping <code class=\"docutils literal\"><span class=\"pre\">\\'U\\'</span></code>, begins with <code class=\"docutils literal\"><span class=\"pre\">\\'r\\'</span></code>,\\n<code class=\"docutils literal\"><span class=\"pre\">\\'w\\'</span></code> or <code class=\"docutils literal\"><span class=\"pre\">\\'a\\'</span></code>.</p>\\n<p>Python provides many file handling modules including\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/fileinput.html#module-fileinput\" title=\"fileinput: Loop over standard input or a list of files.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">fileinput</span></code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/os.html#module-os\" title=\"os: Miscellaneous operating system interfaces.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">os</span></code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/os.path.html#module-os.path\" title=\"os.path: Operations on pathnames.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">os.path</span></code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/tempfile.html#module-tempfile\" title=\"tempfile: Generate temporary files and directories.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">tempfile</span></code></a>, and\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/shutil.html#module-shutil\" title=\"shutil: High-level file operations, including copying.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">shutil</span></code></a>.</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.5: </span>Restriction on first letter of mode string introduced.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#open'",
        "'any'",
        "'<dt id=\"any\">\\n<code class=\"descname\">any</code><span class=\"sig-paren\">(</span><em>iterable</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return <code class=\"docutils literal\"><span class=\"pre\">True</span></code> if any element of the <em>iterable</em> is true.  If the iterable\\nis empty, return <code class=\"docutils literal\"><span class=\"pre\">False</span></code>.  Equivalent to:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">any</span><span class=\"p\">(</span><span class=\"n\">iterable</span><span class=\"p\">):</span>\\n    <span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">iterable</span><span class=\"p\">:</span>\\n        <span class=\"k\">if</span> <span class=\"n\">element</span><span class=\"p\">:</span>\\n            <span class=\"k\">return</span> <span class=\"bp\">True</span>\\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\\n</pre></div>\\n</div>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.5.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#any'",
        "'locals'",
        "'<dt id=\"locals\">\\n<code class=\"descname\">locals</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Update and return a dictionary representing the current local symbol table.\\nFree variables are returned by <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#locals\" title=\"locals\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">locals()</span></code></a> when it is called in function\\nblocks, but not in class blocks.</p>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\">The contents of this dictionary should not be modified; changes may not\\naffect the values of local and free variables used by the interpreter.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#locals'",
        "'compile'",
        "'<dt id=\"compile\">\\n<code class=\"descname\">compile</code><span class=\"sig-paren\">(</span><em>source</em>, <em>filename</em>, <em>mode</em><span class=\"optional\">[</span>, <em>flags</em><span class=\"optional\">[</span>, <em>dont_inherit</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Compile the <em>source</em> into a code or AST object.  Code objects can be executed\\nby an <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#exec\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">exec</span></code></a> statement or evaluated by a call to <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#eval\" title=\"eval\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">eval()</span></code></a>.\\n<em>source</em> can either be a Unicode string, a <em>Latin-1</em> encoded string or an\\nAST object.\\nRefer to the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/ast.html#module-ast\" title=\"ast: Abstract Syntax Tree classes and manipulation.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">ast</span></code></a> module documentation for information on how to work\\nwith AST objects.</p>\\n<p>The <em>filename</em> argument should give the file from which the code was read;\\npass some recognizable value if it wasn\\xe2\\x80\\x99t read from a file (<code class=\"docutils literal\"><span class=\"pre\">\\'&lt;string&gt;\\'</span></code> is\\ncommonly used).</p>\\n<p>The <em>mode</em> argument specifies what kind of code must be compiled; it can be\\n<code class=\"docutils literal\"><span class=\"pre\">\\'exec\\'</span></code> if <em>source</em> consists of a sequence of statements, <code class=\"docutils literal\"><span class=\"pre\">\\'eval\\'</span></code> if it\\nconsists of a single expression, or <code class=\"docutils literal\"><span class=\"pre\">\\'single\\'</span></code> if it consists of a single\\ninteractive statement (in the latter case, expression statements that\\nevaluate to something other than <code class=\"docutils literal\"><span class=\"pre\">None</span></code> will be printed).</p>\\n<p>The optional arguments <em>flags</em> and <em>dont_inherit</em> control which future\\nstatements (see <span class=\"target\" id=\"index-1\"></span><a class=\"pep reference external\" href=\"https://docs.python.org/2/library/https://www.python.org/dev/peps/pep-0236\"><strong>PEP 236</strong></a>) affect the compilation of <em>source</em>.  If neither\\nis present (or both are zero) the code is compiled with those future\\nstatements that are in effect in the code that is calling <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#compile\" title=\"compile\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">compile()</span></code></a>.  If the\\n<em>flags</em> argument is given and <em>dont_inherit</em> is not (or is zero) then the\\nfuture statements specified by the <em>flags</em> argument are used in addition to\\nthose that would be used anyway. If <em>dont_inherit</em> is a non-zero integer then\\nthe <em>flags</em> argument is it \\xe2\\x80\\x93 the future statements in effect around the call\\nto compile are ignored.</p>\\n<p>Future statements are specified by bits which can be bitwise ORed together to\\nspecify multiple statements.  The bitfield required to specify a given feature\\ncan be found as the <code class=\"xref py py-attr docutils literal\"><span class=\"pre\">compiler_flag</span></code> attribute on\\nthe <code class=\"xref py py-class docutils literal\"><span class=\"pre\">_Feature</span></code> instance in the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/__future__.html#module-__future__\" title=\"__future__: Future statement definitions\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">__future__</span></code></a> module.</p>\\n<p>This function raises <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.SyntaxError\" title=\"exceptions.SyntaxError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">SyntaxError</span></code></a> if the compiled source is invalid,\\nand <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.TypeError\" title=\"exceptions.TypeError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></code></a> if the source contains null bytes.</p>\\n<p>If you want to parse Python code into its AST representation, see\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/ast.html#ast.parse\" title=\"ast.parse\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">ast.parse()</span></code></a>.</p>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\">When compiling a string with multi-line code in <code class=\"docutils literal\"><span class=\"pre\">\\'single\\'</span></code> or\\n<code class=\"docutils literal\"><span class=\"pre\">\\'eval\\'</span></code> mode, input must be terminated by at least one newline\\ncharacter.  This is to facilitate detection of incomplete and complete\\nstatements in the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/code.html#module-code\" title=\"code: Facilities to implement read-eval-print loops.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">code</span></code></a> module.</p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.3: </span>The <em>flags</em> and <em>dont_inherit</em> arguments were added.</p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.6: </span>Support for compiling AST objects.</p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.7: </span>Allowed use of Windows and Mac newlines.  Also input in <code class=\"docutils literal\"><span class=\"pre\">\\'exec\\'</span></code> mode\\ndoes not have to end in a newline anymore.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#compile'",
        "'basestring'",
        "'<dt id=\"basestring\">\\n<code class=\"descname\">basestring</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>This abstract type is the superclass for <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#str\" title=\"str\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">str</span></code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#unicode\" title=\"unicode\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">unicode</span></code></a>. It\\ncannot be called or instantiated, but it can be used to test whether an object\\nis an instance of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#str\" title=\"str\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">str</span></code></a> or <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#unicode\" title=\"unicode\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">unicode</span></code></a>. <code class=\"docutils literal\"><span class=\"pre\">isinstance(obj,</span>\\n<span class=\"pre\">basestring)</span></code> is equivalent to <code class=\"docutils literal\"><span class=\"pre\">isinstance(obj,</span> <span class=\"pre\">(str,</span> <span class=\"pre\">unicode))</span></code>.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.3.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#basestring'",
        "'isinstance'",
        "'<dt id=\"isinstance\">\\n<code class=\"descname\">isinstance</code><span class=\"sig-paren\">(</span><em>object</em>, <em>classinfo</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return true if the <em>object</em> argument is an instance of the <em>classinfo</em> argument,\\nor of a (direct, indirect or <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-abstract-base-class\"><span class=\"xref std std-term\">virtual</span></a>) subclass\\nthereof.  Also return true if <em>classinfo</em>\\nis a type object (new-style class) and <em>object</em> is an object of that type or of\\na (direct, indirect or <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-abstract-base-class\"><span class=\"xref std std-term\">virtual</span></a>) subclass\\nthereof.  If <em>object</em> is not a class instance or\\nan object of the given type, the function always returns false.\\nIf <em>classinfo</em> is a tuple of class or type objects (or recursively, other\\nsuch tuples), return true if <em>object</em> is an instance of any of the classes\\nor types.  If <em>classinfo</em> is not a class, type, or tuple of classes, types,\\nand such tuples, a <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.TypeError\" title=\"exceptions.TypeError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></code></a> exception is raised.</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.2: </span>Support for a tuple of type information was added.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#isinstance'",
        "'zip'",
        "'<dt id=\"zip\">\\n<code class=\"descname\">zip</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>iterable</em>, <em>...</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>This function returns a list of tuples, where the <em>i</em>-th tuple contains the\\n<em>i</em>-th element from each of the argument sequences or iterables. The returned\\nlist is truncated in length to the length of the shortest argument sequence.\\nWhen there are multiple arguments which are all of the same length, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#zip\" title=\"zip\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">zip()</span></code></a>\\nis similar to <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#map\" title=\"map\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">map()</span></code></a> with an initial argument of <code class=\"docutils literal\"><span class=\"pre\">None</span></code>. With a single\\nsequence argument, it returns a list of 1-tuples. With no arguments, it returns\\nan empty list.</p>\\n<p>The left-to-right evaluation order of the iterables is guaranteed. This\\nmakes possible an idiom for clustering a data series into n-length groups\\nusing <code class=\"docutils literal\"><span class=\"pre\">zip(*[iter(s)]*n)</span></code>.</p>\\n<p><a class=\"reference internal\" href=\"https://docs.python.org/2/library/#zip\" title=\"zip\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">zip()</span></code></a> in conjunction with the <code class=\"docutils literal\"><span class=\"pre\">*</span></code> operator can be used to unzip a\\nlist:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><span class=\"copybutton\" style=\"cursor: pointer; position: absolute; top: 0px; right: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; padding-right: 0.2em; display: none; text-decoration: none;\" title=\"Hide the prompts and output\">&gt;&gt;&gt;</span><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zipped</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zipped</span>\\n<span class=\"go\">[(1, 4), (2, 5), (3, 6)]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">zipped</span><span class=\"p\">)</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">y2</span><span class=\"p\">)</span>\\n<span class=\"go\">True</span>\\n</pre></div>\\n</div>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.0.</span></p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.4: </span>Formerly, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#zip\" title=\"zip\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">zip()</span></code></a> required at least one argument and <code class=\"docutils literal\"><span class=\"pre\">zip()</span></code> raised a\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.TypeError\" title=\"exceptions.TypeError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></code></a> instead of returning an empty list.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#zip'",
        "'min'",
        "'<dt id=\"min\">\\n<code class=\"descname\">min</code><span class=\"sig-paren\">(</span><em>iterable</em><span class=\"optional\">[</span>, <em>key</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt><dt>\\n<code class=\"descname\">min</code><span class=\"sig-paren\">(</span><em>arg1</em>, <em>arg2</em>, <em>*args</em><span class=\"optional\">[</span>, <em>key</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the smallest item in an iterable or the smallest of two or more\\narguments.</p>\\n<p>If one positional argument is provided, <em>iterable</em> must be a non-empty\\niterable (such as a non-empty string, tuple or list).  The smallest item\\nin the iterable is returned.  If two or more positional arguments are\\nprovided, the smallest of the positional arguments is returned.</p>\\n<p>The optional <em>key</em> argument specifies a one-argument ordering function like that\\nused for <code class=\"xref py py-meth docutils literal\"><span class=\"pre\">list.sort()</span></code>.  The <em>key</em> argument, if supplied, must be in keyword\\nform (for example, <code class=\"docutils literal\"><span class=\"pre\">min(a,b,c,key=func)</span></code>).</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.5: </span>Added support for the optional <em>key</em> argument.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#min'",
        "'getattr'",
        "'<dt id=\"getattr\">\\n<code class=\"descname\">getattr</code><span class=\"sig-paren\">(</span><em>object</em>, <em>name</em><span class=\"optional\">[</span>, <em>default</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the value of the named attribute of <em>object</em>.  <em>name</em> must be a string.\\nIf the string is the name of one of the object\\xe2\\x80\\x99s attributes, the result is the\\nvalue of that attribute.  For example, <code class=\"docutils literal\"><span class=\"pre\">getattr(x,</span> <span class=\"pre\">\\'foobar\\')</span></code> is equivalent to\\n<code class=\"docutils literal\"><span class=\"pre\">x.foobar</span></code>.  If the named attribute does not exist, <em>default</em> is returned if\\nprovided, otherwise <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.AttributeError\" title=\"exceptions.AttributeError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">AttributeError</span></code></a> is raised.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#getattr'",
        "'__import__'",
        "'<dt id=\"__import__\">\\n<code class=\"descname\">__import__</code><span class=\"sig-paren\">(</span><em>name</em><span class=\"optional\">[</span>, <em>globals</em><span class=\"optional\">[</span>, <em>locals</em><span class=\"optional\">[</span>, <em>fromlist</em><span class=\"optional\">[</span>, <em>level</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><div class=\"admonition note\" id=\"index-8\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\">This is an advanced function that is not needed in everyday Python\\nprogramming, unlike <a class=\"reference internal\" href=\"https://docs.python.org/2/library/importlib.html#importlib.import_module\" title=\"importlib.import_module\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">importlib.import_module()</span></code></a>.</p>\\n</div>\\n<p>This function is invoked by the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#import\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">import</span></code></a> statement.  It can be\\nreplaced (by importing the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/__builtin__.html#module-__builtin__\" title=\"__builtin__: The module that provides the built-in namespace.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">__builtin__</span></code></a> module and assigning to\\n<code class=\"docutils literal\"><span class=\"pre\">__builtin__.__import__</span></code>) in order to change semantics of the\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#import\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">import</span></code></a> statement, but nowadays it is usually simpler to use import\\nhooks (see <span class=\"target\" id=\"index-9\"></span><a class=\"pep reference external\" href=\"https://docs.python.org/2/library/https://www.python.org/dev/peps/pep-0302\"><strong>PEP 302</strong></a>).  Direct use of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#__import__\" title=\"__import__\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">__import__()</span></code></a> is rare, except in\\ncases where you want to import a module whose name is only known at runtime.</p>\\n<p>The function imports the module <em>name</em>, potentially using the given <em>globals</em>\\nand <em>locals</em> to determine how to interpret the name in a package context.\\nThe <em>fromlist</em> gives the names of objects or submodules that should be\\nimported from the module given by <em>name</em>.  The standard implementation does\\nnot use its <em>locals</em> argument at all, and uses its <em>globals</em> only to\\ndetermine the package context of the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#import\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">import</span></code></a> statement.</p>\\n<p><em>level</em> specifies whether to use absolute or relative imports.  The default\\nis <code class=\"docutils literal\"><span class=\"pre\">-1</span></code> which indicates both absolute and relative imports will be\\nattempted.  <code class=\"docutils literal\"><span class=\"pre\">0</span></code> means only perform absolute imports.  Positive values for\\n<em>level</em> indicate the number of parent directories to search relative to the\\ndirectory of the module calling <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#__import__\" title=\"__import__\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">__import__()</span></code></a>.</p>\\n<p>When the <em>name</em> variable is of the form <code class=\"docutils literal\"><span class=\"pre\">package.module</span></code>, normally, the\\ntop-level package (the name up till the first dot) is returned, <em>not</em> the\\nmodule named by <em>name</em>.  However, when a non-empty <em>fromlist</em> argument is\\ngiven, the module named by <em>name</em> is returned.</p>\\n<p>For example, the statement <code class=\"docutils literal\"><span class=\"pre\">import</span> <span class=\"pre\">spam</span></code> results in bytecode resembling the\\nfollowing code:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"n\">spam</span> <span class=\"o\">=</span> <span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"s\">\\'spam\\'</span><span class=\"p\">,</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"nb\">locals</span><span class=\"p\">(),</span> <span class=\"p\">[],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\\n</pre></div>\\n</div>\\n<p>The statement <code class=\"docutils literal\"><span class=\"pre\">import</span> <span class=\"pre\">spam.ham</span></code> results in this call:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"n\">spam</span> <span class=\"o\">=</span> <span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"s\">\\'spam.ham\\'</span><span class=\"p\">,</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"nb\">locals</span><span class=\"p\">(),</span> <span class=\"p\">[],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\\n</pre></div>\\n</div>\\n<p>Note how <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#__import__\" title=\"__import__\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">__import__()</span></code></a> returns the toplevel module here because this is\\nthe object that is bound to a name by the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#import\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">import</span></code></a> statement.</p>\\n<p>On the other hand, the statement <code class=\"docutils literal\"><span class=\"pre\">from</span> <span class=\"pre\">spam.ham</span> <span class=\"pre\">import</span> <span class=\"pre\">eggs,</span> <span class=\"pre\">sausage</span> <span class=\"pre\">as</span>\\n<span class=\"pre\">saus</span></code> results in</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"n\">_temp</span> <span class=\"o\">=</span> <span class=\"nb\">__import__</span><span class=\"p\">(</span><span class=\"s\">\\'spam.ham\\'</span><span class=\"p\">,</span> <span class=\"nb\">globals</span><span class=\"p\">(),</span> <span class=\"nb\">locals</span><span class=\"p\">(),</span> <span class=\"p\">[</span><span class=\"s\">\\'eggs\\'</span><span class=\"p\">,</span> <span class=\"s\">\\'sausage\\'</span><span class=\"p\">],</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\\n<span class=\"n\">eggs</span> <span class=\"o\">=</span> <span class=\"n\">_temp</span><span class=\"o\">.</span><span class=\"n\">eggs</span>\\n<span class=\"n\">saus</span> <span class=\"o\">=</span> <span class=\"n\">_temp</span><span class=\"o\">.</span><span class=\"n\">sausage</span>\\n</pre></div>\\n</div>\\n<p>Here, the <code class=\"docutils literal\"><span class=\"pre\">spam.ham</span></code> module is returned from <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#__import__\" title=\"__import__\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">__import__()</span></code></a>.  From this\\nobject, the names to import are retrieved and assigned to their respective\\nnames.</p>\\n<p>If you simply want to import a module (potentially within a package) by name,\\nuse <a class=\"reference internal\" href=\"https://docs.python.org/2/library/importlib.html#importlib.import_module\" title=\"importlib.import_module\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">importlib.import_module()</span></code></a>.</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.5: </span>The level parameter was added.</p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.5: </span>Keyword support for parameters was added.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#__import__'",
        "'sum'",
        "'<dt id=\"sum\">\\n<code class=\"descname\">sum</code><span class=\"sig-paren\">(</span><em>iterable</em><span class=\"optional\">[</span>, <em>start</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Sums <em>start</em> and the items of an <em>iterable</em> from left to right and returns the\\ntotal.  <em>start</em> defaults to <code class=\"docutils literal\"><span class=\"pre\">0</span></code>. The <em>iterable</em>\\xe2\\x80\\x98s items are normally numbers,\\nand the start value is not allowed to be a string.</p>\\n<p>For some use cases, there are good alternatives to <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#sum\" title=\"sum\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">sum()</span></code></a>.\\nThe preferred, fast way to concatenate a sequence of strings is by calling\\n<code class=\"docutils literal\"><span class=\"pre\">\\'\\'.join(sequence)</span></code>.  To add floating point values with extended precision,\\nsee <a class=\"reference internal\" href=\"https://docs.python.org/2/library/math.html#math.fsum\" title=\"math.fsum\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">math.fsum()</span></code></a>.  To concatenate a series of iterables, consider using\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/itertools.html#itertools.chain\" title=\"itertools.chain\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">itertools.chain()</span></code></a>.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.3.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#sum'",
        "'tuple'",
        "'<dt id=\"tuple\">\\n<code class=\"descname\">tuple</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>iterable</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a tuple whose items are the same and in the same order as <em>iterable</em>\\xe2\\x80\\x98s\\nitems.  <em>iterable</em> may be a sequence, a container that supports iteration, or an\\niterator object. If <em>iterable</em> is already a tuple, it is returned unchanged.\\nFor instance, <code class=\"docutils literal\"><span class=\"pre\">tuple(\\'abc\\')</span></code> returns <code class=\"docutils literal\"><span class=\"pre\">(\\'a\\',</span> <span class=\"pre\">\\'b\\',</span> <span class=\"pre\">\\'c\\')</span></code> and <code class=\"docutils literal\"><span class=\"pre\">tuple([1,</span> <span class=\"pre\">2,</span>\\n<span class=\"pre\">3])</span></code> returns <code class=\"docutils literal\"><span class=\"pre\">(1,</span> <span class=\"pre\">2,</span> <span class=\"pre\">3)</span></code>.  If no argument is given, returns a new empty\\ntuple, <code class=\"docutils literal\"><span class=\"pre\">()</span></code>.</p>\\n<p><a class=\"reference internal\" href=\"https://docs.python.org/2/library/#tuple\" title=\"tuple\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">tuple</span></code></a> is an immutable sequence type, as documented in\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesseq\"><span>Sequence Types \\xe2\\x80\\x94 str, unicode, list, tuple, bytearray, buffer, xrange</span></a>. For other containers see the built in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dict</span></code></a>,\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#list\" title=\"list\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">list</span></code></a>, and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#set\" title=\"set\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">set</span></code></a> classes, and the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/collections.html#module-collections\" title=\"collections: High-performance datatypes\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">collections</span></code></a> module.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#tuple'",
        "'hex'",
        "'<dt id=\"hex\">\\n<code class=\"descname\">hex</code><span class=\"sig-paren\">(</span><em>x</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Convert an integer number (of any size) to a lowercase hexadecimal string\\nprefixed with \\xe2\\x80\\x9c0x\\xe2\\x80\\x9d, for example:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><span class=\"copybutton\" style=\"cursor: pointer; position: absolute; top: 0px; right: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; padding-right: 0.2em; display: none; text-decoration: none;\" title=\"Hide the prompts and output\">&gt;&gt;&gt;</span><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">)</span>\\n<span class=\"go\">\\'0xff\\'</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">42</span><span class=\"p\">)</span>\\n<span class=\"go\">\\'-0x2a\\'</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hex</span><span class=\"p\">(</span><span class=\"il\">1L</span><span class=\"p\">)</span>\\n<span class=\"go\">\\'0x1L\\'</span>\\n</pre></div>\\n</div>\\n<p>If x is not a Python <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#int\" title=\"int\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">int</span></code></a> or <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#long\" title=\"long\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">long</span></code></a> object, it has to\\ndefine an __index__() method that returns an integer.</p>\\n<p>See also <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#int\" title=\"int\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">int()</span></code></a> for converting a hexadecimal string to an\\ninteger using a base of 16.</p>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\">To obtain a hexadecimal string representation for a float, use the\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#float.hex\" title=\"float.hex\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">float.hex()</span></code></a> method.</p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.4: </span>Formerly only returned an unsigned literal.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#hex'",
        "'execfile'",
        "'<dt id=\"execfile\">\\n<code class=\"descname\">execfile</code><span class=\"sig-paren\">(</span><em>filename</em><span class=\"optional\">[</span>, <em>globals</em><span class=\"optional\">[</span>, <em>locals</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>This function is similar to the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#exec\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">exec</span></code></a> statement, but parses a file\\ninstead of a string.  It is different from the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#import\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">import</span></code></a> statement in\\nthat it does not use the module administration \\xe2\\x80\\x94 it reads the file\\nunconditionally and does not create a new module. <a class=\"footnote-reference\" href=\"https://docs.python.org/2/library/#id3\" id=\"id1\">[1]</a></p>\\n<p>The arguments are a file name and two optional dictionaries.  The file is parsed\\nand evaluated as a sequence of Python statements (similarly to a module) using\\nthe <em>globals</em> and <em>locals</em> dictionaries as global and local namespace. If\\nprovided, <em>locals</em> can be any mapping object.  Remember that at module level,\\nglobals and locals are the same dictionary. If two separate objects are\\npassed as <em>globals</em> and <em>locals</em>, the code will be executed as if it were\\nembedded in a class definition.</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.4: </span>formerly <em>locals</em> was required to be a dictionary.</p>\\n</div>\\n<p>If the <em>locals</em> dictionary is omitted it defaults to the <em>globals</em> dictionary.\\nIf both dictionaries are omitted, the expression is executed in the environment\\nwhere <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#execfile\" title=\"execfile\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">execfile()</span></code></a> is called.  The return value is <code class=\"docutils literal\"><span class=\"pre\">None</span></code>.</p>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\">The default <em>locals</em> act as described for function <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#locals\" title=\"locals\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">locals()</span></code></a> below:\\nmodifications to the default <em>locals</em> dictionary should not be attempted.  Pass\\nan explicit <em>locals</em> dictionary if you need to see effects of the code on\\n<em>locals</em> after function <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#execfile\" title=\"execfile\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">execfile()</span></code></a> returns.  <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#execfile\" title=\"execfile\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">execfile()</span></code></a> cannot be\\nused reliably to modify a function\\xe2\\x80\\x99s locals.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#execfile'",
        "'long'",
        "'<dt id=\"long\">\\n<em class=\"property\">class </em><code class=\"descname\">long</code><span class=\"sig-paren\">(</span><em>x=0</em><span class=\"sig-paren\">)</span></dt><dt>\\n<em class=\"property\">class </em><code class=\"descname\">long</code><span class=\"sig-paren\">(</span><em>x</em>, <em>base=10</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a long integer object constructed from a string or number <em>x</em>.\\nIf the argument is a string, it\\nmust contain a possibly signed number of arbitrary size, possibly embedded in\\nwhitespace. The <em>base</em> argument is interpreted in the same way as for\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#int\" title=\"int\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">int()</span></code></a>, and may only be given when <em>x</em> is a string. Otherwise, the argument\\nmay be a plain or long integer or a floating point number, and a long integer\\nwith the same value is returned.    Conversion of floating point numbers to\\nintegers truncates (towards zero).  If no arguments are given, returns <code class=\"docutils literal\"><span class=\"pre\">0L</span></code>.</p>\\n<p>The long type is described in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesnumeric\"><span>Numeric Types \\xe2\\x80\\x94 int, float, long, complex</span></a>.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#long'",
        "'id'",
        "'<dt id=\"id\">\\n<code class=\"descname\">id</code><span class=\"sig-paren\">(</span><em>object</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the \\xe2\\x80\\x9cidentity\\xe2\\x80\\x9d of an object.  This is an integer (or long integer) which\\nis guaranteed to be unique and constant for this object during its lifetime.\\nTwo objects with non-overlapping lifetimes may have the same <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#id\" title=\"id\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">id()</span></code></a>\\nvalue.</p>\\n<div class=\"impl-detail compound\">\\n<p><strong>CPython implementation detail:</strong> This is the address of the object in memory.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#id'",
        "'chr'",
        "'<dt id=\"chr\">\\n<code class=\"descname\">chr</code><span class=\"sig-paren\">(</span><em>i</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a string of one character whose ASCII code is the integer <em>i</em>.  For\\nexample, <code class=\"docutils literal\"><span class=\"pre\">chr(97)</span></code> returns the string <code class=\"docutils literal\"><span class=\"pre\">\\'a\\'</span></code>. This is the inverse of\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#ord\" title=\"ord\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">ord()</span></code></a>.  The argument must be in the range [0..255], inclusive;\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.ValueError\" title=\"exceptions.ValueError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">ValueError</span></code></a> will be raised if <em>i</em> is outside that range. See\\nalso <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#unichr\" title=\"unichr\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">unichr()</span></code></a>.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#chr'",
        "'abs'",
        "'<dt id=\"abs\">\\n<code class=\"descname\">abs</code><span class=\"sig-paren\">(</span><em>x</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the absolute value of a number.  The argument may be a plain or long\\ninteger or a floating point number.  If the argument is a complex number, its\\nmagnitude is returned.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#abs'",
        "'bool'",
        "'<dt id=\"bool\">\\n<em class=\"property\">class </em><code class=\"descname\">bool</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>x</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a Boolean value, i.e. one of <code class=\"docutils literal\"><span class=\"pre\">True</span></code> or <code class=\"docutils literal\"><span class=\"pre\">False</span></code>.  <em>x</em> is converted\\nusing the standard truth testing procedure.  If <em>x</em> is false or omitted, this\\nreturns <a class=\"reference internal\" href=\"https://docs.python.org/2/library/constants.html#False\" title=\"False\"><code class=\"xref py py-const docutils literal\"><span class=\"pre\">False</span></code></a>; otherwise it returns <a class=\"reference internal\" href=\"https://docs.python.org/2/library/constants.html#True\" title=\"True\"><code class=\"xref py py-const docutils literal\"><span class=\"pre\">True</span></code></a>. <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#bool\" title=\"bool\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">bool</span></code></a> is\\nalso a class, which is a subclass of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#int\" title=\"int\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">int</span></code></a>. Class <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#bool\" title=\"bool\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">bool</span></code></a> cannot\\nbe subclassed further.  Its only instances are <a class=\"reference internal\" href=\"https://docs.python.org/2/library/constants.html#False\" title=\"False\"><code class=\"xref py py-const docutils literal\"><span class=\"pre\">False</span></code></a> and\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/constants.html#True\" title=\"True\"><code class=\"xref py py-const docutils literal\"><span class=\"pre\">True</span></code></a>.</p>\\n<div class=\"versionadded\" id=\"index-0\">\\n<p><span class=\"versionmodified\">New in version 2.2.1.</span></p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.3: </span>If no argument is given, this function returns <a class=\"reference internal\" href=\"https://docs.python.org/2/library/constants.html#False\" title=\"False\"><code class=\"xref py py-const docutils literal\"><span class=\"pre\">False</span></code></a>.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#bool'",
        "'xrange'",
        "'<dt id=\"xrange\">\\n<code class=\"descname\">xrange</code><span class=\"sig-paren\">(</span><em>stop</em><span class=\"sig-paren\">)</span></dt><dt>\\n<code class=\"descname\">xrange</code><span class=\"sig-paren\">(</span><em>start</em>, <em>stop</em><span class=\"optional\">[</span>, <em>step</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>This function is very similar to <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#range\" title=\"range\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">range()</span></code></a>, but returns an <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesseq-xrange\"><span>xrange\\nobject</span></a>\\ninstead of a list.  This is an opaque sequence type which yields the same values\\nas the corresponding list, without actually storing them all simultaneously.\\nThe advantage of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#xrange\" title=\"xrange\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">xrange()</span></code></a> over <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#range\" title=\"range\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">range()</span></code></a> is minimal (since\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#xrange\" title=\"xrange\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">xrange()</span></code></a> still has to create the values when asked for them) except when a\\nvery large range is used on a memory-starved machine or when all of the range\\xe2\\x80\\x99s\\nelements are never used (such as when the loop is usually terminated with\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#break\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">break</span></code></a>).  For more information on xrange objects, see\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesseq-xrange\"><span>XRange Type</span></a> and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesseq\"><span>Sequence Types \\xe2\\x80\\x94 str, unicode, list, tuple, bytearray, buffer, xrange</span></a>.</p>\\n<div class=\"impl-detail compound\">\\n<p><strong>CPython implementation detail:</strong> <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#xrange\" title=\"xrange\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">xrange()</span></code></a> is intended to be simple and fast.  Implementations may\\nimpose restrictions to achieve this.  The C implementation of Python\\nrestricts all arguments to native C longs (\\xe2\\x80\\x9cshort\\xe2\\x80\\x9d Python integers), and\\nalso requires that the number of elements fit in a native C long.  If a\\nlarger range is needed, an alternate version can be crafted using the\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/itertools.html#module-itertools\" title=\"itertools: Functions creating iterators for efficient looping.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">itertools</span></code></a> module: <code class=\"docutils literal\"><span class=\"pre\">islice(count(start,</span> <span class=\"pre\">step),</span>\\n<span class=\"pre\">(stop-start+step-1+2*(step&lt;0))//step)</span></code>.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#xrange'",
        "'print'",
        "'<dt id=\"print\">\\n<code class=\"descname\">print</code><span class=\"sig-paren\">(</span><em>*objects</em>, <em>sep=\\' \\'</em>, <em>end=\\'\\\\n\\'</em>, <em>file=sys.stdout</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Print <em>objects</em> to the stream <em>file</em>, separated by <em>sep</em> and followed by\\n<em>end</em>.  <em>sep</em>, <em>end</em> and <em>file</em>, if present, must be given as keyword\\narguments.</p>\\n<p>All non-keyword arguments are converted to strings like <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#str\" title=\"str\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">str()</span></code></a> does and\\nwritten to the stream, separated by <em>sep</em> and followed by <em>end</em>.  Both <em>sep</em>\\nand <em>end</em> must be strings; they can also be <code class=\"docutils literal\"><span class=\"pre\">None</span></code>, which means to use the\\ndefault values.  If no <em>objects</em> are given, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#print\" title=\"print\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">print()</span></code></a> will just write\\n<em>end</em>.</p>\\n<p>The <em>file</em> argument must be an object with a <code class=\"docutils literal\"><span class=\"pre\">write(string)</span></code> method; if it\\nis not present or <code class=\"docutils literal\"><span class=\"pre\">None</span></code>, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/sys.html#sys.stdout\" title=\"sys.stdout\"><code class=\"xref py py-data docutils literal\"><span class=\"pre\">sys.stdout</span></code></a> will be used.  Output buffering\\nis determined by <em>file</em>.  Use <code class=\"docutils literal\"><span class=\"pre\">file.flush()</span></code> to ensure, for instance,\\nimmediate appearance on a screen.</p>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p>This function is not normally available as a built-in since the name\\n<code class=\"docutils literal\"><span class=\"pre\">print</span></code> is recognized as the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#print\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">print</span></code></a> statement.  To disable the\\nstatement and use the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#print\" title=\"print\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">print()</span></code></a> function, use this future statement at\\nthe top of your module:</p>\\n<div class=\"last highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">print_function</span>\\n</pre></div>\\n</div>\\n</div>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.6.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#print'",
        "'dict'",
        "'<dt>\\n<em class=\"property\">class </em><code class=\"descname\">dict</code><span class=\"sig-paren\">(</span><em>**kwarg</em><span class=\"sig-paren\">)</span></dt><dt>\\n<em class=\"property\">class </em><code class=\"descname\">dict</code><span class=\"sig-paren\">(</span><em>mapping</em>, <em>**kwarg</em><span class=\"sig-paren\">)</span></dt><dt>\\n<em class=\"property\">class </em><code class=\"descname\">dict</code><span class=\"sig-paren\">(</span><em>iterable</em>, <em>**kwarg</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Create a new dictionary.  The <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dict</span></code></a> object is the dictionary class.\\nSee <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dict</span></code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesmapping\"><span>Mapping Types \\xe2\\x80\\x94 dict</span></a> for documentation about this class.</p>\\n<p>For other containers see the built-in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#list\" title=\"list\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">list</span></code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#set\" title=\"set\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">set</span></code></a>, and\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#tuple\" title=\"tuple\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">tuple</span></code></a> classes, as well as the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/collections.html#module-collections\" title=\"collections: High-performance datatypes\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">collections</span></code></a> module.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#dict'",
        "'type'",
        "'<dt id=\"type\">\\n<em class=\"property\">class </em><code class=\"descname\">type</code><span class=\"sig-paren\">(</span><em>object</em><span class=\"sig-paren\">)</span></dt><dt>\\n<em class=\"property\">class </em><code class=\"descname\">type</code><span class=\"sig-paren\">(</span><em>name</em>, <em>bases</em>, <em>dict</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p id=\"index-7\">With one argument, return the type of an <em>object</em>.  The return value is a\\ntype object.  The <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#isinstance\" title=\"isinstance\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">isinstance()</span></code></a> built-in function is recommended for\\ntesting the type of an object.</p>\\n<p>With three arguments, return a new type object.  This is essentially a\\ndynamic form of the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/compound_stmts.html#class\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">class</span></code></a> statement. The <em>name</em> string is the\\nclass name and becomes the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#class.__name__\" title=\"class.__name__\"><code class=\"xref py py-attr docutils literal\"><span class=\"pre\">__name__</span></code></a> attribute; the <em>bases</em> tuple\\nitemizes the base classes and becomes the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#class.__bases__\" title=\"class.__bases__\"><code class=\"xref py py-attr docutils literal\"><span class=\"pre\">__bases__</span></code></a> attribute;\\nand the <em>dict</em> dictionary is the namespace containing definitions for class\\nbody and becomes the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#object.__dict__\" title=\"object.__dict__\"><code class=\"xref py py-attr docutils literal\"><span class=\"pre\">__dict__</span></code></a>  attribute.  For example, the\\nfollowing two statements create identical <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#type\" title=\"type\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">type</span></code></a> objects:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><span class=\"copybutton\" style=\"cursor: pointer; position: absolute; top: 0px; right: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; padding-right: 0.2em; display: none; text-decoration: none;\" title=\"Hide the prompts and output\">&gt;&gt;&gt;</span><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">X</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\\n<span class=\"gp\">... </span>    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\\n<span class=\"gp\">...</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"s\">\\'X\\'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">,),</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\\n</pre></div>\\n</div>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.2.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#type'",
        "'oct'",
        "'<dt id=\"oct\">\\n<code class=\"descname\">oct</code><span class=\"sig-paren\">(</span><em>x</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Convert an integer number (of any size) to an octal string.  The result is a\\nvalid Python expression.</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.4: </span>Formerly only returned an unsigned literal.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#oct'",
        "'apply'",
        "'<dt id=\"apply\">\\n<code class=\"descname\">apply</code><span class=\"sig-paren\">(</span><em>function</em>, <em>args</em><span class=\"optional\">[</span>, <em>keywords</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>The <em>function</em> argument must be a callable object (a user-defined or built-in\\nfunction or method, or a class object) and the <em>args</em> argument must be a\\nsequence.  The <em>function</em> is called with <em>args</em> as the argument list; the number\\nof arguments is the length of the tuple. If the optional <em>keywords</em> argument is\\npresent, it must be a dictionary whose keys are strings.  It specifies keyword\\narguments to be added to the end of the argument list. Calling <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#apply\" title=\"apply\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">apply()</span></code></a> is\\ndifferent from just calling <code class=\"docutils literal\"><span class=\"pre\">function(args)</span></code>, since in that case there is\\nalways exactly one argument.  The use of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#apply\" title=\"apply\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">apply()</span></code></a> is equivalent to\\n<code class=\"docutils literal\"><span class=\"pre\">function(*args,</span> <span class=\"pre\">**keywords)</span></code>.</p>\\n<div class=\"deprecated\">\\n<p><span class=\"versionmodified\">Deprecated since version 2.3: </span>Use <code class=\"docutils literal\"><span class=\"pre\">function(*args,</span> <span class=\"pre\">**keywords)</span></code> instead of\\n<code class=\"docutils literal\"><span class=\"pre\">apply(function,</span> <span class=\"pre\">args,</span> <span class=\"pre\">keywords)</span></code> (see <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../tutorial/controlflow.html#tut-unpacking-arguments\"><span>Unpacking Argument Lists</span></a>).</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#apply'",
        "'bin'",
        "'<dt id=\"bin\">\\n<code class=\"descname\">bin</code><span class=\"sig-paren\">(</span><em>x</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Convert an integer number to a binary string. The result is a valid Python\\nexpression.  If <em>x</em> is not a Python <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#int\" title=\"int\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">int</span></code></a> object, it has to define an\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__index__\" title=\"object.__index__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__index__()</span></code></a> method that returns an integer.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.6.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#bin'",
        "'map'",
        "'<dt id=\"map\">\\n<code class=\"descname\">map</code><span class=\"sig-paren\">(</span><em>function</em>, <em>iterable</em>, <em>...</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Apply <em>function</em> to every item of <em>iterable</em> and return a list of the results.\\nIf additional <em>iterable</em> arguments are passed, <em>function</em> must take that many\\narguments and is applied to the items from all iterables in parallel.  If one\\niterable is shorter than another it is assumed to be extended with <code class=\"docutils literal\"><span class=\"pre\">None</span></code>\\nitems.  If <em>function</em> is <code class=\"docutils literal\"><span class=\"pre\">None</span></code>, the identity function is assumed; if there\\nare multiple arguments, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#map\" title=\"map\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">map()</span></code></a> returns a list consisting of tuples\\ncontaining the corresponding items from all iterables (a kind of transpose\\noperation).  The <em>iterable</em> arguments may be a sequence  or any iterable object;\\nthe result is always a list.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#map'",
        "'hash'",
        "'<dt id=\"hash\">\\n<code class=\"descname\">hash</code><span class=\"sig-paren\">(</span><em>object</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the hash value of the object (if it has one).  Hash values are integers.\\nThey are used to quickly compare dictionary keys during a dictionary lookup.\\nNumeric values that compare equal have the same hash value (even if they are of\\ndifferent types, as is the case for 1 and 1.0).</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#hash'",
        "'format'",
        "'<dt id=\"format\">\\n<code class=\"descname\">format</code><span class=\"sig-paren\">(</span><em>value</em><span class=\"optional\">[</span>, <em>format_spec</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p id=\"index-3\">Convert a <em>value</em> to a \\xe2\\x80\\x9cformatted\\xe2\\x80\\x9d representation, as controlled by\\n<em>format_spec</em>.  The interpretation of <em>format_spec</em> will depend on the type\\nof the <em>value</em> argument, however there is a standard formatting syntax that\\nis used by most built-in types: <a class=\"reference internal\" href=\"https://docs.python.org/2/library/string.html#formatspec\"><span>Format Specification Mini-Language</span></a>.</p>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\"><code class=\"docutils literal\"><span class=\"pre\">format(value,</span> <span class=\"pre\">format_spec)</span></code> merely calls\\n<code class=\"docutils literal\"><span class=\"pre\">value.__format__(format_spec)</span></code>.</p>\\n</div>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.6.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#format'",
        "'buffer'",
        "'<dt id=\"buffer\">\\n<code class=\"descname\">buffer</code><span class=\"sig-paren\">(</span><em>object</em><span class=\"optional\">[</span>, <em>offset</em><span class=\"optional\">[</span>, <em>size</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>The <em>object</em> argument must be an object that supports the buffer call interface\\n(such as strings, arrays, and buffers).  A new buffer object will be created\\nwhich references the <em>object</em> argument. The buffer object will be a slice from\\nthe beginning of <em>object</em> (or from the specified <em>offset</em>). The slice will\\nextend to the end of <em>object</em> (or will have a length given by the <em>size</em>\\nargument).</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#buffer'",
        "'max'",
        "'<dt id=\"max\">\\n<code class=\"descname\">max</code><span class=\"sig-paren\">(</span><em>iterable</em><span class=\"optional\">[</span>, <em>key</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt><dt>\\n<code class=\"descname\">max</code><span class=\"sig-paren\">(</span><em>arg1</em>, <em>arg2</em>, <em>*args</em><span class=\"optional\">[</span>, <em>key</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the largest item in an iterable or the largest of two or more\\narguments.</p>\\n<p>If one positional argument is provided, <em>iterable</em> must be a non-empty\\niterable (such as a non-empty string, tuple or list).  The largest item\\nin the iterable is returned.  If two or more positional arguments are\\nprovided, the largest of the positional arguments is returned.</p>\\n<p>The optional <em>key</em> argument specifies a one-argument ordering function like that\\nused for <code class=\"xref py py-meth docutils literal\"><span class=\"pre\">list.sort()</span></code>.  The <em>key</em> argument, if supplied, must be in keyword\\nform (for example, <code class=\"docutils literal\"><span class=\"pre\">max(a,b,c,key=func)</span></code>).</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.5: </span>Added support for the optional <em>key</em> argument.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#max'",
        "'reversed'",
        "'<dt id=\"reversed\">\\n<code class=\"descname\">reversed</code><span class=\"sig-paren\">(</span><em>seq</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a reverse <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-iterator\"><span class=\"xref std std-term\">iterator</span></a>.  <em>seq</em> must be an object which has\\na <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__reversed__\" title=\"object.__reversed__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__reversed__()</span></code></a> method or supports the sequence protocol (the\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__len__\" title=\"object.__len__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__len__()</span></code></a> method and the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__getitem__()</span></code></a> method with integer\\narguments starting at <code class=\"docutils literal\"><span class=\"pre\">0</span></code>).</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.4.</span></p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.6: </span>Added the possibility to write a custom <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__reversed__\" title=\"object.__reversed__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__reversed__()</span></code></a> method.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#reversed'",
        "'object'",
        "'<dt id=\"object\">\\n<em class=\"property\">class </em><code class=\"descname\">object</code></dt>'",
        "'<dd><p>Return a new featureless object.  <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#object\" title=\"object\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a> is a base for all new style\\nclasses.  It has the methods that are common to all instances of new style\\nclasses.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.2.</span></p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.3: </span>This function does not accept any arguments. Formerly, it accepted arguments but\\nignored them.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#object'",
        "'repr'",
        "'<dt id=\"repr\">\\n<code class=\"descname\">repr</code><span class=\"sig-paren\">(</span><em>object</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a string containing a printable representation of an object.  This is\\nthe same value yielded by conversions (reverse quotes).  It is sometimes\\nuseful to be able to access this operation as an ordinary function.  For many\\ntypes, this function makes an attempt to return a string that would yield an\\nobject with the same value when passed to <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#eval\" title=\"eval\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">eval()</span></code></a>, otherwise the\\nrepresentation is a string enclosed in angle brackets that contains the name\\nof the type of the object together with additional information often\\nincluding the name and address of the object.  A class can control what this\\nfunction returns for its instances by defining a <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__repr__\" title=\"object.__repr__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__repr__()</span></code></a> method.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#repr'",
        "'len'",
        "'<dt id=\"len\">\\n<code class=\"descname\">len</code><span class=\"sig-paren\">(</span><em>s</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the length (the number of items) of an object.  The argument may be a\\nsequence (such as a string, bytes, tuple, list, or range) or a collection\\n(such as a dictionary, set, or frozen set).</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#len'",
        "'callable'",
        "'<dt id=\"callable\">\\n<code class=\"descname\">callable</code><span class=\"sig-paren\">(</span><em>object</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return <a class=\"reference internal\" href=\"https://docs.python.org/2/library/constants.html#True\" title=\"True\"><code class=\"xref py py-const docutils literal\"><span class=\"pre\">True</span></code></a> if the <em>object</em> argument appears callable,\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/constants.html#False\" title=\"False\"><code class=\"xref py py-const docutils literal\"><span class=\"pre\">False</span></code></a> if not.  If this\\nreturns true, it is still possible that a call fails, but if it is false,\\ncalling <em>object</em> will never succeed.  Note that classes are callable (calling a\\nclass returns a new instance); class instances are callable if they have a\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__call__\" title=\"object.__call__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__call__()</span></code></a> method.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#callable'",
        "'next'",
        "'<dt id=\"next\">\\n<code class=\"descname\">next</code><span class=\"sig-paren\">(</span><em>iterator</em><span class=\"optional\">[</span>, <em>default</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Retrieve the next item from the <em>iterator</em> by calling its\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#iterator.next\" title=\"iterator.next\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">next()</span></code></a> method.  If <em>default</em> is given, it is returned if the\\niterator is exhausted, otherwise <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.StopIteration\" title=\"exceptions.StopIteration\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">StopIteration</span></code></a> is raised.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.6.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#next'",
        "'slice'",
        "'<dt id=\"slice\">\\n<em class=\"property\">class </em><code class=\"descname\">slice</code><span class=\"sig-paren\">(</span><em>stop</em><span class=\"sig-paren\">)</span></dt><dt>\\n<em class=\"property\">class </em><code class=\"descname\">slice</code><span class=\"sig-paren\">(</span><em>start</em>, <em>stop</em><span class=\"optional\">[</span>, <em>step</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p id=\"index-6\">Return a <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-slice\"><span class=\"xref std std-term\">slice</span></a> object representing the set of indices specified by\\n<code class=\"docutils literal\"><span class=\"pre\">range(start,</span> <span class=\"pre\">stop,</span> <span class=\"pre\">step)</span></code>.  The <em>start</em> and <em>step</em> arguments default to\\n<code class=\"docutils literal\"><span class=\"pre\">None</span></code>.  Slice objects have read-only data attributes <code class=\"xref py py-attr docutils literal\"><span class=\"pre\">start</span></code>,\\n<code class=\"xref py py-attr docutils literal\"><span class=\"pre\">stop</span></code> and <code class=\"xref py py-attr docutils literal\"><span class=\"pre\">step</span></code> which merely return the argument\\nvalues (or their default).  They have no other explicit functionality;\\nhowever they are used by Numerical Python and other third party extensions.\\nSlice objects are also generated when extended indexing syntax is used.  For\\nexample: <code class=\"docutils literal\"><span class=\"pre\">a[start:stop:step]</span></code> or <code class=\"docutils literal\"><span class=\"pre\">a[start:stop,</span> <span class=\"pre\">i]</span></code>.  See\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/itertools.html#itertools.islice\" title=\"itertools.islice\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">itertools.islice()</span></code></a> for an alternate version that returns an iterator.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#slice'",
        "'eval'",
        "'<dt id=\"eval\">\\n<code class=\"descname\">eval</code><span class=\"sig-paren\">(</span><em>expression</em><span class=\"optional\">[</span>, <em>globals</em><span class=\"optional\">[</span>, <em>locals</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>The arguments are a Unicode or <em>Latin-1</em> encoded string and optional\\nglobals and locals.  If provided, <em>globals</em> must be a dictionary.\\nIf provided, <em>locals</em> can be any mapping object.</p>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.4: </span>formerly <em>locals</em> was required to be a dictionary.</p>\\n</div>\\n<p>The <em>expression</em> argument is parsed and evaluated as a Python expression\\n(technically speaking, a condition list) using the <em>globals</em> and <em>locals</em>\\ndictionaries as global and local namespace.  If the <em>globals</em> dictionary is\\npresent and lacks \\xe2\\x80\\x98__builtins__\\xe2\\x80\\x99, the current globals are copied into <em>globals</em>\\nbefore <em>expression</em> is parsed.  This means that <em>expression</em> normally has full\\naccess to the standard <a class=\"reference internal\" href=\"https://docs.python.org/2/library/__builtin__.html#module-__builtin__\" title=\"__builtin__: The module that provides the built-in namespace.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">__builtin__</span></code></a> module and restricted environments are\\npropagated.  If the <em>locals</em> dictionary is omitted it defaults to the <em>globals</em>\\ndictionary.  If both dictionaries are omitted, the expression is executed in the\\nenvironment where <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#eval\" title=\"eval\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">eval()</span></code></a> is called.  The return value is the result of\\nthe evaluated expression. Syntax errors are reported as exceptions.  Example:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><span class=\"copybutton\" style=\"cursor: pointer; position: absolute; top: 0px; right: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; padding-right: 0.2em; display: none; text-decoration: none;\" title=\"Hide the prompts and output\">&gt;&gt;&gt;</span><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">print</span> <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"s\">\\'x+1\\'</span><span class=\"p\">)</span>\\n<span class=\"go\">2</span>\\n</pre></div>\\n</div>\\n<p>This function can also be used to execute arbitrary code objects (such as\\nthose created by <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#compile\" title=\"compile\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">compile()</span></code></a>).  In this case pass a code object instead\\nof a string.  If the code object has been compiled with <code class=\"docutils literal\"><span class=\"pre\">\\'exec\\'</span></code> as the\\n<em>mode</em> argument, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#eval\" title=\"eval\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">eval()</span></code></a>\\xe2\\x80\\x98s return value will be <code class=\"docutils literal\"><span class=\"pre\">None</span></code>.</p>\\n<p>Hints: dynamic execution of statements is supported by the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#exec\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">exec</span></code></a>\\nstatement.  Execution of statements from a file is supported by the\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#execfile\" title=\"execfile\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">execfile()</span></code></a> function.  The <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#globals\" title=\"globals\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">globals()</span></code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#locals\" title=\"locals\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">locals()</span></code></a> functions\\nreturns the current global and local dictionary, respectively, which may be\\nuseful to pass around for use by <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#eval\" title=\"eval\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">eval()</span></code></a> or <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#execfile\" title=\"execfile\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">execfile()</span></code></a>.</p>\\n<p>See <a class=\"reference internal\" href=\"https://docs.python.org/2/library/ast.html#ast.literal_eval\" title=\"ast.literal_eval\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">ast.literal_eval()</span></code></a> for a function that can safely evaluate strings\\nwith expressions containing only literals.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#eval'",
        "'frozenset'",
        "'<dt>\\n<em class=\"property\">class </em><code class=\"descname\">frozenset</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>iterable</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a new <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#frozenset\" title=\"frozenset\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">frozenset</span></code></a> object, optionally with elements taken from\\n<em>iterable</em>.  <code class=\"docutils literal\"><span class=\"pre\">frozenset</span></code> is a built-in class.  See <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#frozenset\" title=\"frozenset\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">frozenset</span></code></a> and\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#types-set\"><span>Set Types \\xe2\\x80\\x94 set, frozenset</span></a> for documentation about this class.</p>\\n<p>For other containers see the built-in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#set\" title=\"set\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">set</span></code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#list\" title=\"list\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">list</span></code></a>,\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#tuple\" title=\"tuple\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">tuple</span></code></a>, and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dict</span></code></a> classes, as well as the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/collections.html#module-collections\" title=\"collections: High-performance datatypes\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">collections</span></code></a>\\nmodule.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.4.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#frozenset'",
        "'sorted'",
        "'<dt id=\"sorted\">\\n<code class=\"descname\">sorted</code><span class=\"sig-paren\">(</span><em>iterable</em><span class=\"optional\">[</span>, <em>cmp</em><span class=\"optional\">[</span>, <em>key</em><span class=\"optional\">[</span>, <em>reverse</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a new sorted list from the items in <em>iterable</em>.</p>\\n<p>The optional arguments <em>cmp</em>, <em>key</em>, and <em>reverse</em> have the same meaning as\\nthose for the <code class=\"xref py py-meth docutils literal\"><span class=\"pre\">list.sort()</span></code> method (described in section\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesseq-mutable\"><span>Mutable Sequence Types</span></a>).</p>\\n<p><em>cmp</em> specifies a custom comparison function of two arguments (iterable\\nelements) which should return a negative, zero or positive number depending on\\nwhether the first argument is considered smaller than, equal to, or larger than\\nthe second argument: <code class=\"docutils literal\"><span class=\"pre\">cmp=lambda</span> <span class=\"pre\">x,y:</span> <span class=\"pre\">cmp(x.lower(),</span> <span class=\"pre\">y.lower())</span></code>.  The default\\nvalue is <code class=\"docutils literal\"><span class=\"pre\">None</span></code>.</p>\\n<p><em>key</em> specifies a function of one argument that is used to extract a comparison\\nkey from each list element: <code class=\"docutils literal\"><span class=\"pre\">key=str.lower</span></code>.  The default value is <code class=\"docutils literal\"><span class=\"pre\">None</span></code>\\n(compare the elements directly).</p>\\n<p><em>reverse</em> is a boolean value.  If set to <code class=\"docutils literal\"><span class=\"pre\">True</span></code>, then the list elements are\\nsorted as if each comparison were reversed.</p>\\n<p>In general, the <em>key</em> and <em>reverse</em> conversion processes are much faster\\nthan specifying an equivalent <em>cmp</em> function.  This is because <em>cmp</em> is\\ncalled multiple times for each list element while <em>key</em> and <em>reverse</em> touch\\neach element only once.  Use <a class=\"reference internal\" href=\"https://docs.python.org/2/library/functools.html#functools.cmp_to_key\" title=\"functools.cmp_to_key\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">functools.cmp_to_key()</span></code></a> to convert an\\nold-style <em>cmp</em> function to a <em>key</em> function.</p>\\n<p>The built-in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#sorted\" title=\"sorted\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">sorted()</span></code></a> function is guaranteed to be stable. A sort is\\nstable if it guarantees not to change the relative order of elements that\\ncompare equal \\xe2\\x80\\x94 this is helpful for sorting in multiple passes (for\\nexample, sort by department, then by salary grade).</p>\\n<p>For sorting examples and a brief sorting tutorial, see <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../howto/sorting.html#sortinghowto\"><span>Sorting HOW TO</span></a>.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.4.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#sorted'",
        "'ord'",
        "'<dt id=\"ord\">\\n<code class=\"descname\">ord</code><span class=\"sig-paren\">(</span><em>c</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Given a string of length one, return an integer representing the Unicode code\\npoint of the character when the argument is a unicode object, or the value of\\nthe byte when the argument is an 8-bit string. For example, <code class=\"docutils literal\"><span class=\"pre\">ord(\\'a\\')</span></code> returns\\nthe integer <code class=\"docutils literal\"><span class=\"pre\">97</span></code>, <code class=\"docutils literal\"><span class=\"pre\">ord(u\\'\\\\u2020\\')</span></code> returns <code class=\"docutils literal\"><span class=\"pre\">8224</span></code>.  This is the inverse of\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#chr\" title=\"chr\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">chr()</span></code></a> for 8-bit strings and of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#unichr\" title=\"unichr\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">unichr()</span></code></a> for unicode objects.  If a\\nunicode argument is given and Python was built with UCS2 Unicode, then the\\ncharacter\\xe2\\x80\\x99s code point must be in the range [0..65535] inclusive; otherwise the\\nstring length is two, and a <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.TypeError\" title=\"exceptions.TypeError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></code></a> will be raised.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#ord'",
        "'super'",
        "'<dt id=\"super\">\\n<code class=\"descname\">super</code><span class=\"sig-paren\">(</span><em>type</em><span class=\"optional\">[</span>, <em>object-or-type</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a proxy object that delegates method calls to a parent or sibling\\nclass of <em>type</em>.  This is useful for accessing inherited methods that have\\nbeen overridden in a class. The search order is same as that used by\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#getattr\" title=\"getattr\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">getattr()</span></code></a> except that the <em>type</em> itself is skipped.</p>\\n<p>The <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#class.__mro__\" title=\"class.__mro__\"><code class=\"xref py py-attr docutils literal\"><span class=\"pre\">__mro__</span></code></a> attribute of the <em>type</em> lists the method\\nresolution search order used by both <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#getattr\" title=\"getattr\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">getattr()</span></code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#super\" title=\"super\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">super()</span></code></a>.  The\\nattribute is dynamic and can change whenever the inheritance hierarchy is\\nupdated.</p>\\n<p>If the second argument is omitted, the super object returned is unbound.  If\\nthe second argument is an object, <code class=\"docutils literal\"><span class=\"pre\">isinstance(obj,</span> <span class=\"pre\">type)</span></code> must be true.  If\\nthe second argument is a type, <code class=\"docutils literal\"><span class=\"pre\">issubclass(type2,</span> <span class=\"pre\">type)</span></code> must be true (this\\nis useful for classmethods).</p>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\"><a class=\"reference internal\" href=\"https://docs.python.org/2/library/#super\" title=\"super\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">super()</span></code></a> only works for <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-new-style-class\"><span class=\"xref std std-term\">new-style class</span></a>es.</p>\\n</div>\\n<p>There are two typical use cases for <em>super</em>.  In a class hierarchy with\\nsingle inheritance, <em>super</em> can be used to refer to parent classes without\\nnaming them explicitly, thus making the code more maintainable.  This use\\nclosely parallels the use of <em>super</em> in other programming languages.</p>\\n<p>The second use case is to support cooperative multiple inheritance in a\\ndynamic execution environment.  This use case is unique to Python and is\\nnot found in statically compiled languages or languages that only support\\nsingle inheritance.  This makes it possible to implement \\xe2\\x80\\x9cdiamond diagrams\\xe2\\x80\\x9d\\nwhere multiple base classes implement the same method.  Good design dictates\\nthat this method have the same calling signature in every case (because the\\norder of calls is determined at runtime, because that order adapts\\nto changes in the class hierarchy, and because that order can include\\nsibling classes that are unknown prior to runtime).</p>\\n<p>For both use cases, a typical superclass call looks like this:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">):</span>\\n    <span class=\"k\">def</span> <span class=\"nf\">method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span>\\n</pre></div>\\n</div>\\n<p>Note that <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#super\" title=\"super\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">super()</span></code></a> is implemented as part of the binding process for\\nexplicit dotted attribute lookups such as <code class=\"docutils literal\"><span class=\"pre\">super().__getitem__(name)</span></code>.\\nIt does so by implementing its own <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__getattribute__\" title=\"object.__getattribute__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__getattribute__()</span></code></a> method for searching\\nclasses in a predictable order that supports cooperative multiple inheritance.\\nAccordingly, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#super\" title=\"super\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">super()</span></code></a> is undefined for implicit lookups using statements or\\noperators such as <code class=\"docutils literal\"><span class=\"pre\">super()[name]</span></code>.</p>\\n<p>Also note that <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#super\" title=\"super\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">super()</span></code></a> is not limited to use inside methods.  The two\\nargument form specifies the arguments exactly and makes the appropriate\\nreferences.</p>\\n<p>For practical suggestions on how to design cooperative classes using\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#super\" title=\"super\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">super()</span></code></a>, see <a class=\"reference external\" href=\"https://docs.python.org/2/library/http://rhettinger.wordpress.com/2011/05/26/super-considered-super/\">guide to using super()</a>.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.2.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#super'",
        "'hasattr'",
        "'<dt id=\"hasattr\">\\n<code class=\"descname\">hasattr</code><span class=\"sig-paren\">(</span><em>object</em>, <em>name</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>The arguments are an object and a string.  The result is <code class=\"docutils literal\"><span class=\"pre\">True</span></code> if the string\\nis the name of one of the object\\xe2\\x80\\x99s attributes, <code class=\"docutils literal\"><span class=\"pre\">False</span></code> if not. (This is\\nimplemented by calling <code class=\"docutils literal\"><span class=\"pre\">getattr(object,</span> <span class=\"pre\">name)</span></code> and seeing whether it raises an\\nexception or not.)</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#hasattr'",
        "'delattr'",
        "'<dt id=\"delattr\">\\n<code class=\"descname\">delattr</code><span class=\"sig-paren\">(</span><em>object</em>, <em>name</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>This is a relative of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#setattr\" title=\"setattr\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">setattr()</span></code></a>.  The arguments are an object and a\\nstring.  The string must be the name of one of the object\\xe2\\x80\\x99s attributes.  The\\nfunction deletes the named attribute, provided the object allows it.  For\\nexample, <code class=\"docutils literal\"><span class=\"pre\">delattr(x,</span> <span class=\"pre\">\\'foobar\\')</span></code> is equivalent to <code class=\"docutils literal\"><span class=\"pre\">del</span> <span class=\"pre\">x.foobar</span></code>.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#delattr'",
        "'input'",
        "'<dt id=\"input\">\\n<code class=\"descname\">input</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>prompt</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Equivalent to <code class=\"docutils literal\"><span class=\"pre\">eval(raw_input(prompt))</span></code>.</p>\\n<p>This function does not catch user errors. If the input is not syntactically\\nvalid, a <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.SyntaxError\" title=\"exceptions.SyntaxError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">SyntaxError</span></code></a> will be raised. Other exceptions may be raised if\\nthere is an error during evaluation.</p>\\n<p>If the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/readline.html#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">readline</span></code></a> module was loaded, then <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#input\" title=\"input\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">input()</span></code></a> will use it to\\nprovide elaborate line editing and history features.</p>\\n<p>Consider using the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#raw_input\" title=\"raw_input\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">raw_input()</span></code></a> function for general input from users.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#input'",
        "'setattr'",
        "'<dt id=\"setattr\">\\n<code class=\"descname\">setattr</code><span class=\"sig-paren\">(</span><em>object</em>, <em>name</em>, <em>value</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>This is the counterpart of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#getattr\" title=\"getattr\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">getattr()</span></code></a>.  The arguments are an object, a\\nstring and an arbitrary value.  The string may name an existing attribute or a\\nnew attribute.  The function assigns the value to the attribute, provided the\\nobject allows it.  For example, <code class=\"docutils literal\"><span class=\"pre\">setattr(x,</span> <span class=\"pre\">\\'foobar\\',</span> <span class=\"pre\">123)</span></code> is equivalent to\\n<code class=\"docutils literal\"><span class=\"pre\">x.foobar</span> <span class=\"pre\">=</span> <span class=\"pre\">123</span></code>.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#setattr'",
        "'classmethod'",
        "'<dt id=\"classmethod\">\\n<code class=\"descname\">classmethod</code><span class=\"sig-paren\">(</span><em>function</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a class method for <em>function</em>.</p>\\n<p>A class method receives the class as implicit first argument, just like an\\ninstance method receives the instance. To declare a class method, use this\\nidiom:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\\n    <span class=\"nd\">@classmethod</span>\\n    <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">cls</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">):</span>\\n        <span class=\"o\">...</span>\\n</pre></div>\\n</div>\\n<p>The <code class=\"docutils literal\"><span class=\"pre\">@classmethod</span></code> form is a function <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-decorator\"><span class=\"xref std std-term\">decorator</span></a> \\xe2\\x80\\x93 see the description\\nof function definitions in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/compound_stmts.html#function\"><span>Function definitions</span></a> for details.</p>\\n<p>It can be called either on the class (such as <code class=\"docutils literal\"><span class=\"pre\">C.f()</span></code>) or on an instance (such\\nas <code class=\"docutils literal\"><span class=\"pre\">C().f()</span></code>).  The instance is ignored except for its class. If a class\\nmethod is called for a derived class, the derived class object is passed as the\\nimplied first argument.</p>\\n<p>Class methods are different than C++ or Java static methods. If you want those,\\nsee <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#staticmethod\" title=\"staticmethod\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">staticmethod()</span></code></a> in this section.</p>\\n<p>For more information on class methods, consult the documentation on the standard\\ntype hierarchy in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#types\"><span>The standard type hierarchy</span></a>.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.2.</span></p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.4: </span>Function decorator syntax added.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#classmethod'",
        "'raw_input'",
        "'<dt id=\"raw_input\">\\n<code class=\"descname\">raw_input</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>prompt</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>If the <em>prompt</em> argument is present, it is written to standard output without a\\ntrailing newline.  The function then reads a line from input, converts it to a\\nstring (stripping a trailing newline), and returns that. When EOF is read,\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.EOFError\" title=\"exceptions.EOFError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">EOFError</span></code></a> is raised. Example:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><span class=\"copybutton\" style=\"cursor: pointer; position: absolute; top: 0px; right: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; padding-right: 0.2em; display: none; text-decoration: none;\" title=\"Hide the prompts and output\">&gt;&gt;&gt;</span><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">raw_input</span><span class=\"p\">(</span><span class=\"s\">\\'--&gt; \\'</span><span class=\"p\">)</span>\\n<span class=\"go\">--&gt; Monty Python\\'s Flying Circus</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span>\\n<span class=\"go\">\"Monty Python\\'s Flying Circus\"</span>\\n</pre></div>\\n</div>\\n<p>If the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/readline.html#module-readline\" title=\"readline: GNU readline support for Python. (Unix)\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">readline</span></code></a> module was loaded, then <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#raw_input\" title=\"raw_input\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">raw_input()</span></code></a> will use it to\\nprovide elaborate line editing and history features.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#raw_input'",
        "'list'",
        "'<dt id=\"list\">\\n<em class=\"property\">class </em><code class=\"descname\">list</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>iterable</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a list whose items are the same and in the same order as <em>iterable</em>\\xe2\\x80\\x98s\\nitems.  <em>iterable</em> may be either a sequence, a container that supports\\niteration, or an iterator object.  If <em>iterable</em> is already a list, a copy is\\nmade and returned, similar to <code class=\"docutils literal\"><span class=\"pre\">iterable[:]</span></code>.  For instance, <code class=\"docutils literal\"><span class=\"pre\">list(\\'abc\\')</span></code>\\nreturns <code class=\"docutils literal\"><span class=\"pre\">[\\'a\\',</span> <span class=\"pre\">\\'b\\',</span> <span class=\"pre\">\\'c\\']</span></code> and <code class=\"docutils literal\"><span class=\"pre\">list(</span> <span class=\"pre\">(1,</span> <span class=\"pre\">2,</span> <span class=\"pre\">3)</span> <span class=\"pre\">)</span></code> returns <code class=\"docutils literal\"><span class=\"pre\">[1,</span> <span class=\"pre\">2,</span> <span class=\"pre\">3]</span></code>.  If\\nno argument is given, returns a new empty list, <code class=\"docutils literal\"><span class=\"pre\">[]</span></code>.</p>\\n<p><a class=\"reference internal\" href=\"https://docs.python.org/2/library/#list\" title=\"list\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">list</span></code></a> is a mutable sequence type, as documented in\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesseq\"><span>Sequence Types \\xe2\\x80\\x94 str, unicode, list, tuple, bytearray, buffer, xrange</span></a>. For other containers see the built in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">dict</span></code></a>,\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#set\" title=\"set\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">set</span></code></a>, and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#tuple\" title=\"tuple\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">tuple</span></code></a> classes, and the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/collections.html#module-collections\" title=\"collections: High-performance datatypes\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">collections</span></code></a> module.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#list'",
        "'iter'",
        "'<dt id=\"iter\">\\n<code class=\"descname\">iter</code><span class=\"sig-paren\">(</span><em>o</em><span class=\"optional\">[</span>, <em>sentinel</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return an <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-iterator\"><span class=\"xref std std-term\">iterator</span></a> object.  The first argument is interpreted very differently\\ndepending on the presence of the second argument. Without a second argument, <em>o</em>\\nmust be a collection object which supports the iteration protocol (the\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__iter__\" title=\"object.__iter__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__iter__()</span></code></a> method), or it must support the sequence protocol (the\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__getitem__\" title=\"object.__getitem__\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__getitem__()</span></code></a> method with integer arguments starting at <code class=\"docutils literal\"><span class=\"pre\">0</span></code>).  If it\\ndoes not support either of those protocols, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.TypeError\" title=\"exceptions.TypeError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">TypeError</span></code></a> is raised. If the\\nsecond argument, <em>sentinel</em>, is given, then <em>o</em> must be a callable object.  The\\niterator created in this case will call <em>o</em> with no arguments for each call to\\nits <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#iterator.next\" title=\"iterator.next\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">next()</span></code></a> method; if the value returned is equal to <em>sentinel</em>,\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.StopIteration\" title=\"exceptions.StopIteration\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">StopIteration</span></code></a> will be raised, otherwise the value will be returned.</p>\\n<p>One useful application of the second form of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#iter\" title=\"iter\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">iter()</span></code></a> is to read lines of\\na file until a certain line is reached.  The following example reads a file\\nuntil the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/io.html#io.TextIOBase.readline\" title=\"io.TextIOBase.readline\"><code class=\"xref py py-meth docutils literal\"><span class=\"pre\">readline()</span></code></a> method returns an empty string:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\\'mydata.txt\\'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\\n    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">,</span> <span class=\"s\">\\'\\'</span><span class=\"p\">):</span>\\n        <span class=\"n\">process_line</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\\n</pre></div>\\n</div>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.2.</span></p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#iter'",
        "'filter'",
        "'<dt id=\"filter\">\\n<code class=\"descname\">filter</code><span class=\"sig-paren\">(</span><em>function</em>, <em>iterable</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Construct a list from those elements of <em>iterable</em> for which <em>function</em> returns\\ntrue.  <em>iterable</em> may be either a sequence, a container which supports\\niteration, or an iterator.  If <em>iterable</em> is a string or a tuple, the result\\nalso has that type; otherwise it is always a list.  If <em>function</em> is <code class=\"docutils literal\"><span class=\"pre\">None</span></code>,\\nthe identity function is assumed, that is, all elements of <em>iterable</em> that are\\nfalse are removed.</p>\\n<p>Note that <code class=\"docutils literal\"><span class=\"pre\">filter(function,</span> <span class=\"pre\">iterable)</span></code> is equivalent to <code class=\"docutils literal\"><span class=\"pre\">[item</span> <span class=\"pre\">for</span> <span class=\"pre\">item</span> <span class=\"pre\">in</span>\\n<span class=\"pre\">iterable</span> <span class=\"pre\">if</span> <span class=\"pre\">function(item)]</span></code> if function is not <code class=\"docutils literal\"><span class=\"pre\">None</span></code> and <code class=\"docutils literal\"><span class=\"pre\">[item</span> <span class=\"pre\">for</span> <span class=\"pre\">item</span>\\n<span class=\"pre\">in</span> <span class=\"pre\">iterable</span> <span class=\"pre\">if</span> <span class=\"pre\">item]</span></code> if function is <code class=\"docutils literal\"><span class=\"pre\">None</span></code>.</p>\\n<p>See <a class=\"reference internal\" href=\"https://docs.python.org/2/library/itertools.html#itertools.ifilter\" title=\"itertools.ifilter\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">itertools.ifilter()</span></code></a> and <a class=\"reference internal\" href=\"https://docs.python.org/2/library/itertools.html#itertools.ifilterfalse\" title=\"itertools.ifilterfalse\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">itertools.ifilterfalse()</span></code></a> for iterator\\nversions of this function, including a variation that filters for elements\\nwhere the <em>function</em> returns false.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#filter'",
        "'reload'",
        "'<dt id=\"reload\">\\n<code class=\"descname\">reload</code><span class=\"sig-paren\">(</span><em>module</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Reload a previously imported <em>module</em>.  The argument must be a module object, so\\nit must have been successfully imported before.  This is useful if you have\\nedited the module source file using an external editor and want to try out the\\nnew version without leaving the Python interpreter.  The return value is the\\nmodule object (the same as the <em>module</em> argument).</p>\\n<p>When <code class=\"docutils literal\"><span class=\"pre\">reload(module)</span></code> is executed:</p>\\n<ul class=\"simple\">\\n<li>Python modules\\xe2\\x80\\x99 code is recompiled and the module-level code reexecuted,\\ndefining a new set of objects which are bound to names in the module\\xe2\\x80\\x99s\\ndictionary.  The <code class=\"docutils literal\"><span class=\"pre\">init</span></code> function of extension modules is not called a second\\ntime.</li>\\n<li>As with all other objects in Python the old objects are only reclaimed after\\ntheir reference counts drop to zero.</li>\\n<li>The names in the module namespace are updated to point to any new or changed\\nobjects.</li>\\n<li>Other references to the old objects (such as names external to the module) are\\nnot rebound to refer to the new objects and must be updated in each namespace\\nwhere they occur if that is desired.</li>\\n</ul>\\n<p>There are a number of other caveats:</p>\\n<p>When a module is reloaded, its dictionary (containing the module\\xe2\\x80\\x99s global\\nvariables) is retained.  Redefinitions of names will override the old\\ndefinitions, so this is generally not a problem.  If the new version of a module\\ndoes not define a name that was defined by the old version, the old definition\\nremains.  This feature can be used to the module\\xe2\\x80\\x99s advantage if it maintains a\\nglobal table or cache of objects \\xe2\\x80\\x94 with a <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/compound_stmts.html#try\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">try</span></code></a> statement it can test\\nfor the table\\xe2\\x80\\x99s presence and skip its initialization if desired:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">try</span><span class=\"p\">:</span>\\n    <span class=\"n\">cache</span>\\n<span class=\"k\">except</span> <span class=\"ne\">NameError</span><span class=\"p\">:</span>\\n    <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\\n</pre></div>\\n</div>\\n<p>It is generally not very useful to reload built-in or dynamically loaded\\nmodules.  Reloading <a class=\"reference internal\" href=\"https://docs.python.org/2/library/sys.html#module-sys\" title=\"sys: Access system-specific parameters and functions.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">sys</span></code></a>, <a class=\"reference internal\" href=\"https://docs.python.org/2/library/__main__.html#module-__main__\" title=\"__main__: The environment where the top-level script is run.\"><code class=\"xref py py-mod docutils literal\"><span class=\"pre\">__main__</span></code></a>, <code class=\"xref py py-mod docutils literal\"><span class=\"pre\">builtins</span></code> and other\\nkey modules is not recommended.  In many cases extension modules are not\\ndesigned to be initialized more than once, and may fail in arbitrary ways\\nwhen reloaded.</p>\\n<p>If a module imports objects from another module using <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#from\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">from</span></code></a> ...\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#import\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">import</span></code></a> ..., calling <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#reload\" title=\"reload\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">reload()</span></code></a> for the other module does not\\nredefine the objects imported from it \\xe2\\x80\\x94 one way around this is to re-execute\\nthe <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#from\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">from</span></code></a> statement, another is to use <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/simple_stmts.html#import\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">import</span></code></a> and qualified\\nnames (<em>module</em>.*name*) instead.</p>\\n<p>If a module instantiates instances of a class, reloading the module that defines\\nthe class does not affect the method definitions of the instances \\xe2\\x80\\x94 they\\ncontinue to use the old class definition.  The same is true for derived classes.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#reload'",
        "'range'",
        "'<dt id=\"range\">\\n<code class=\"descname\">range</code><span class=\"sig-paren\">(</span><em>stop</em><span class=\"sig-paren\">)</span></dt><dt>\\n<code class=\"descname\">range</code><span class=\"sig-paren\">(</span><em>start</em>, <em>stop</em><span class=\"optional\">[</span>, <em>step</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>This is a versatile function to create lists containing arithmetic progressions.\\nIt is most often used in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/compound_stmts.html#for\"><code class=\"xref std std-keyword docutils literal\"><span class=\"pre\">for</span></code></a> loops.  The arguments must be plain\\nintegers.  If the <em>step</em> argument is omitted, it defaults to <code class=\"docutils literal\"><span class=\"pre\">1</span></code>.  If the\\n<em>start</em> argument is omitted, it defaults to <code class=\"docutils literal\"><span class=\"pre\">0</span></code>.  The full form returns a list\\nof plain integers <code class=\"docutils literal\"><span class=\"pre\">[start,</span> <span class=\"pre\">start</span> <span class=\"pre\">+</span> <span class=\"pre\">step,</span> <span class=\"pre\">start</span> <span class=\"pre\">+</span> <span class=\"pre\">2</span> <span class=\"pre\">*</span> <span class=\"pre\">step,</span> <span class=\"pre\">...]</span></code>.  If <em>step</em>\\nis positive, the last element is the largest <code class=\"docutils literal\"><span class=\"pre\">start</span> <span class=\"pre\">+</span> <span class=\"pre\">i</span> <span class=\"pre\">*</span> <span class=\"pre\">step</span></code> less than\\n<em>stop</em>; if <em>step</em> is negative, the last element is the smallest <code class=\"docutils literal\"><span class=\"pre\">start</span> <span class=\"pre\">+</span> <span class=\"pre\">i</span> <span class=\"pre\">*</span>\\n<span class=\"pre\">step</span></code> greater than <em>stop</em>.  <em>step</em> must not be zero (or else <a class=\"reference internal\" href=\"https://docs.python.org/2/library/exceptions.html#exceptions.ValueError\" title=\"exceptions.ValueError\"><code class=\"xref py py-exc docutils literal\"><span class=\"pre\">ValueError</span></code></a>\\nis raised).  Example:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><span class=\"copybutton\" style=\"cursor: pointer; position: absolute; top: 0px; right: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; padding-right: 0.2em; display: none; text-decoration: none;\" title=\"Hide the prompts and output\">&gt;&gt;&gt;</span><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\\n<span class=\"go\">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span>\\n<span class=\"go\">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\\n<span class=\"go\">[0, 5, 10, 15, 20, 25]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\\n<span class=\"go\">[0, 3, 6, 9]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\\n<span class=\"go\">[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\\n<span class=\"go\">[]</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\\n<span class=\"go\">[]</span>\\n</pre></div>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#range'",
        "'staticmethod'",
        "'<dt id=\"staticmethod\">\\n<code class=\"descname\">staticmethod</code><span class=\"sig-paren\">(</span><em>function</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a static method for <em>function</em>.</p>\\n<p>A static method does not receive an implicit first argument. To declare a static\\nmethod, use this idiom:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\\n    <span class=\"nd\">@staticmethod</span>\\n    <span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">):</span>\\n        <span class=\"o\">...</span>\\n</pre></div>\\n</div>\\n<p>The <code class=\"docutils literal\"><span class=\"pre\">@staticmethod</span></code> form is a function <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-decorator\"><span class=\"xref std std-term\">decorator</span></a> \\xe2\\x80\\x93 see the\\ndescription of function definitions in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/compound_stmts.html#function\"><span>Function definitions</span></a> for details.</p>\\n<p>It can be called either on the class (such as <code class=\"docutils literal\"><span class=\"pre\">C.f()</span></code>) or on an instance (such\\nas <code class=\"docutils literal\"><span class=\"pre\">C().f()</span></code>).  The instance is ignored except for its class.</p>\\n<p>Static methods in Python are similar to those found in Java or C++. Also see\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#classmethod\" title=\"classmethod\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">classmethod()</span></code></a> for a variant that is useful for creating alternate\\nclass constructors.</p>\\n<p>For more information on static methods, consult the documentation on the\\nstandard type hierarchy in <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#types\"><span>The standard type hierarchy</span></a>.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.2.</span></p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.4: </span>Function decorator syntax added.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#staticmethod'",
        "'str'",
        "'<dt id=\"str\">\\n<em class=\"property\">class </em><code class=\"descname\">str</code><span class=\"sig-paren\">(</span><em>object=\\'\\'</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a string containing a nicely printable representation of an object.  For\\nstrings, this returns the string itself.  The difference with <code class=\"docutils literal\"><span class=\"pre\">repr(object)</span></code>\\nis that <code class=\"docutils literal\"><span class=\"pre\">str(object)</span></code> does not always attempt to return a string that is\\nacceptable to <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#eval\" title=\"eval\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">eval()</span></code></a>; its goal is to return a printable string.  If no\\nargument is given, returns the empty string, <code class=\"docutils literal\"><span class=\"pre\">\\'\\'</span></code>.</p>\\n<p>For more information on strings see <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#typesseq\"><span>Sequence Types \\xe2\\x80\\x94 str, unicode, list, tuple, bytearray, buffer, xrange</span></a> which describes sequence\\nfunctionality (strings are sequences), and also the string-specific methods\\ndescribed in the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#string-methods\"><span>String Methods</span></a> section. To output formatted strings\\nuse template strings or the <code class=\"docutils literal\"><span class=\"pre\">%</span></code> operator described in the\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/stdtypes.html#string-formatting\"><span>String Formatting Operations</span></a> section. In addition see the <a class=\"reference internal\" href=\"https://docs.python.org/2/library/strings.html#stringservices\"><span>String Services</span></a>\\nsection. See also <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#unicode\" title=\"unicode\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">unicode()</span></code></a>.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#str'",
        "'property'",
        "'<dt id=\"property\">\\n<em class=\"property\">class </em><code class=\"descname\">property</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>fget</em><span class=\"optional\">[</span>, <em>fset</em><span class=\"optional\">[</span>, <em>fdel</em><span class=\"optional\">[</span>, <em>doc</em><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return a property attribute for <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-new-style-class\"><span class=\"xref std std-term\">new-style class</span></a>es (classes that\\nderive from <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#object\" title=\"object\"><code class=\"xref py py-class docutils literal\"><span class=\"pre\">object</span></code></a>).</p>\\n<p><em>fget</em> is a function for getting an attribute value.  <em>fset</em> is a function\\nfor setting an attribute value. <em>fdel</em> is a function for deleting an attribute\\nvalue.  And <em>doc</em> creates a docstring for the attribute.</p>\\n<p>A typical use is to define a managed attribute <code class=\"docutils literal\"><span class=\"pre\">x</span></code>:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\\n\\n    <span class=\"k\">def</span> <span class=\"nf\">getx</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span>\\n\\n    <span class=\"k\">def</span> <span class=\"nf\">setx</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\\n\\n    <span class=\"k\">def</span> <span class=\"nf\">delx</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\\n        <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span>\\n\\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nb\">property</span><span class=\"p\">(</span><span class=\"n\">getx</span><span class=\"p\">,</span> <span class=\"n\">setx</span><span class=\"p\">,</span> <span class=\"n\">delx</span><span class=\"p\">,</span> <span class=\"s\">\"I\\'m the \\'x\\' property.\"</span><span class=\"p\">)</span>\\n</pre></div>\\n</div>\\n<p>If <em>c</em> is an instance of <em>C</em>, <code class=\"docutils literal\"><span class=\"pre\">c.x</span></code> will invoke the getter,\\n<code class=\"docutils literal\"><span class=\"pre\">c.x</span> <span class=\"pre\">=</span> <span class=\"pre\">value</span></code> will invoke the setter and <code class=\"docutils literal\"><span class=\"pre\">del</span> <span class=\"pre\">c.x</span></code> the deleter.</p>\\n<p>If given, <em>doc</em> will be the docstring of the property attribute. Otherwise, the\\nproperty will copy <em>fget</em>\\xe2\\x80\\x98s docstring (if it exists).  This makes it possible to\\ncreate read-only properties easily using <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#property\" title=\"property\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">property()</span></code></a> as a <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../glossary.html#term-decorator\"><span class=\"xref std std-term\">decorator</span></a>:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">Parrot</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_voltage</span> <span class=\"o\">=</span> <span class=\"mi\">100000</span>\\n\\n    <span class=\"nd\">@property</span>\\n    <span class=\"k\">def</span> <span class=\"nf\">voltage</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\\n        <span class=\"sd\">\"\"\"Get the current voltage.\"\"\"</span>\\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_voltage</span>\\n</pre></div>\\n</div>\\n<p>The <code class=\"docutils literal\"><span class=\"pre\">@property</span></code> decorator turns the <code class=\"xref py py-meth docutils literal\"><span class=\"pre\">voltage()</span></code> method into a \\xe2\\x80\\x9cgetter\\xe2\\x80\\x9d\\nfor a read-only attribute with the same name, and it sets the docstring for\\n<em>voltage</em> to \\xe2\\x80\\x9cGet the current voltage.\\xe2\\x80\\x9d</p>\\n<p>A property object has <code class=\"xref py py-attr docutils literal\"><span class=\"pre\">getter</span></code>, <code class=\"xref py py-attr docutils literal\"><span class=\"pre\">setter</span></code>,\\nand <code class=\"xref py py-attr docutils literal\"><span class=\"pre\">deleter</span></code> methods usable as decorators that create a\\ncopy of the property with the corresponding accessor function set to the\\ndecorated function.  This is best explained with an example:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><pre><span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\\n\\n    <span class=\"nd\">@property</span>\\n    <span class=\"k\">def</span> <span class=\"nf\">x</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\\n        <span class=\"sd\">\"\"\"I\\'m the \\'x\\' property.\"\"\"</span>\\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span>\\n\\n    <span class=\"nd\">@x.setter</span>\\n    <span class=\"k\">def</span> <span class=\"nf\">x</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\\n\\n    <span class=\"nd\">@x.deleter</span>\\n    <span class=\"k\">def</span> <span class=\"nf\">x</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\\n        <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_x</span>\\n</pre></div>\\n</div>\\n<p>This code is exactly equivalent to the first example.  Be sure to give the\\nadditional functions the same name as the original property (<code class=\"docutils literal\"><span class=\"pre\">x</span></code> in this\\ncase.)</p>\\n<p>The returned property object also has the attributes <code class=\"docutils literal\"><span class=\"pre\">fget</span></code>, <code class=\"docutils literal\"><span class=\"pre\">fset</span></code>, and\\n<code class=\"docutils literal\"><span class=\"pre\">fdel</span></code> corresponding to the constructor arguments.</p>\\n<div class=\"versionadded\">\\n<p><span class=\"versionmodified\">New in version 2.2.</span></p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.5: </span>Use <em>fget</em>\\xe2\\x80\\x98s docstring if no <em>doc</em> given.</p>\\n</div>\\n<div class=\"versionchanged\">\\n<p><span class=\"versionmodified\">Changed in version 2.6: </span>The <code class=\"docutils literal\"><span class=\"pre\">getter</span></code>, <code class=\"docutils literal\"><span class=\"pre\">setter</span></code>, and <code class=\"docutils literal\"><span class=\"pre\">deleter</span></code> attributes were added.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#property'",
        "'round'",
        "'<dt id=\"round\">\\n<code class=\"descname\">round</code><span class=\"sig-paren\">(</span><em>number</em><span class=\"optional\">[</span>, <em>ndigits</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Return the floating point value <em>number</em> rounded to <em>ndigits</em> digits after\\nthe decimal point.  If <em>ndigits</em> is omitted, it defaults to zero. The result\\nis a floating point number.  Values are rounded to the closest multiple of\\n10 to the power minus <em>ndigits</em>; if two multiples are equally close,\\nrounding is done away from 0 (so, for example, <code class=\"docutils literal\"><span class=\"pre\">round(0.5)</span></code> is <code class=\"docutils literal\"><span class=\"pre\">1.0</span></code> and\\n<code class=\"docutils literal\"><span class=\"pre\">round(-0.5)</span></code> is <code class=\"docutils literal\"><span class=\"pre\">-1.0</span></code>).</p>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\">The behavior of <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#round\" title=\"round\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">round()</span></code></a> for floats can be surprising: for example,\\n<code class=\"docutils literal\"><span class=\"pre\">round(2.675,</span> <span class=\"pre\">2)</span></code> gives <code class=\"docutils literal\"><span class=\"pre\">2.67</span></code> instead of the expected <code class=\"docutils literal\"><span class=\"pre\">2.68</span></code>.\\nThis is not a bug: it\\xe2\\x80\\x99s a result of the fact that most decimal fractions\\ncan\\xe2\\x80\\x99t be represented exactly as a float.  See <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../tutorial/floatingpoint.html#tut-fp-issues\"><span>Floating Point Arithmetic:  Issues and Limitations</span></a> for\\nmore information.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#round'",
        "'dir'",
        "'<dt id=\"dir\">\\n<code class=\"descname\">dir</code><span class=\"sig-paren\">(</span><span class=\"optional\">[</span><em>object</em><span class=\"optional\">]</span><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Without arguments, return the list of names in the current local scope.  With an\\nargument, attempt to return a list of valid attributes for that object.</p>\\n<p>If the object has a method named <code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__dir__()</span></code>, this method will be called and\\nmust return the list of attributes. This allows objects that implement a custom\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__getattr__\" title=\"object.__getattr__\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">__getattr__()</span></code></a> or <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__getattribute__\" title=\"object.__getattribute__\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">__getattribute__()</span></code></a> function to customize the way\\n<a class=\"reference internal\" href=\"https://docs.python.org/2/library/#dir\" title=\"dir\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">dir()</span></code></a> reports their attributes.</p>\\n<p>If the object does not provide <code class=\"xref py py-meth docutils literal\"><span class=\"pre\">__dir__()</span></code>, the function tries its best to\\ngather information from the object\\xe2\\x80\\x99s <code class=\"xref py py-attr docutils literal\"><span class=\"pre\">__dict__</span></code> attribute, if defined, and\\nfrom its type object.  The resulting list is not necessarily complete, and may\\nbe inaccurate when the object has a custom <a class=\"reference internal\" href=\"https://docs.python.org/2/library/../reference/datamodel.html#object.__getattr__\" title=\"object.__getattr__\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">__getattr__()</span></code></a>.</p>\\n<p>The default <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#dir\" title=\"dir\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">dir()</span></code></a> mechanism behaves differently with different types of\\nobjects, as it attempts to produce the most relevant, rather than complete,\\ninformation:</p>\\n<ul class=\"simple\">\\n<li>If the object is a module object, the list contains the names of the module\\xe2\\x80\\x99s\\nattributes.</li>\\n<li>If the object is a type or class object, the list contains the names of its\\nattributes, and recursively of the attributes of its bases.</li>\\n<li>Otherwise, the list contains the object\\xe2\\x80\\x99s attributes\\xe2\\x80\\x99 names, the names of its\\nclass\\xe2\\x80\\x99s attributes, and recursively of the attributes of its class\\xe2\\x80\\x99s base\\nclasses.</li>\\n</ul>\\n<p>The resulting list is sorted alphabetically.  For example:</p>\\n<div class=\"highlight-python\" style=\"position: relative;\"><div class=\"highlight\"><span class=\"copybutton\" style=\"cursor: pointer; position: absolute; top: 0px; right: 0px; border-color: rgb(170, 204, 153); border-style: solid; border-width: 1px; color: rgb(170, 204, 153); font-family: monospace; padding-left: 0.2em; padding-right: 0.2em; display: none; text-decoration: none;\" title=\"Hide the prompts and output\">&gt;&gt;&gt;</span><pre><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">struct</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">dir</span><span class=\"p\">()</span>   <span class=\"c\"># show the names in the module namespace</span>\\n<span class=\"go\">[\\'__builtins__\\', \\'__doc__\\', \\'__name__\\', \\'struct\\']</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">struct</span><span class=\"p\">)</span>   <span class=\"c\"># show the names in the struct module</span>\\n<span class=\"go\">[\\'Struct\\', \\'__builtins__\\', \\'__doc__\\', \\'__file__\\', \\'__name__\\',</span>\\n<span class=\"go\"> \\'__package__\\', \\'_clearcache\\', \\'calcsize\\', \\'error\\', \\'pack\\', \\'pack_into\\',</span>\\n<span class=\"go\"> \\'unpack\\', \\'unpack_from\\']</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Shape</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\\n<span class=\"go\">        def __dir__(self):</span>\\n<span class=\"go\">            return [\\'area\\', \\'perimeter\\', \\'location\\']</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Shape</span><span class=\"p\">()</span>\\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\\n<span class=\"go\">[\\'area\\', \\'perimeter\\', \\'location\\']</span>\\n</pre></div>\\n</div>\\n<div class=\"admonition note\">\\n<p class=\"first admonition-title\">Note</p>\\n<p class=\"last\">Because <a class=\"reference internal\" href=\"https://docs.python.org/2/library/#dir\" title=\"dir\"><code class=\"xref py py-func docutils literal\"><span class=\"pre\">dir()</span></code></a> is supplied primarily as a convenience for use at an\\ninteractive prompt, it tries to supply an interesting set of names more than it\\ntries to supply a rigorously or consistently defined set of names, and its\\ndetailed behavior may change across releases.  For example, metaclass attributes\\nare not in the result list when the argument is a class.</p>\\n</div>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#dir'",
        "'cmp'",
        "'<dt id=\"cmp\">\\n<code class=\"descname\">cmp</code><span class=\"sig-paren\">(</span><em>x</em>, <em>y</em><span class=\"sig-paren\">)</span></dt>'",
        "'<dd><p>Compare the two objects <em>x</em> and <em>y</em> and return an integer according to the\\noutcome.  The return value is negative if <code class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">y</span></code>, zero if <code class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">==</span> <span class=\"pre\">y</span></code> and\\nstrictly positive if <code class=\"docutils literal\"><span class=\"pre\">x</span> <span class=\"pre\">&gt;</span> <span class=\"pre\">y</span></code>.</p>\\n</dd>'",
        "u'https://docs.python.org/2/library/functions.html#cmp'"
    ],
    "variables": [
        "explanations"
    ],
    "comments": [],
    "docstrings": [],
    "functions": [],
    "classes": []
}