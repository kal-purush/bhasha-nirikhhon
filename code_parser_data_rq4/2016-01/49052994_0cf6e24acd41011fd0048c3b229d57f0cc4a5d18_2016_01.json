{
    "identifiers": [
        "com",
        "marcelmika",
        "openfire",
        "auth",
        "org",
        "jivesoftware",
        "openfire",
        "auth",
        "AuthProvider",
        "org",
        "jivesoftware",
        "openfire",
        "auth",
        "ConnectionException",
        "org",
        "jivesoftware",
        "openfire",
        "auth",
        "InternalUnauthenticatedException",
        "org",
        "jivesoftware",
        "openfire",
        "auth",
        "UnauthorizedException",
        "org",
        "jivesoftware",
        "openfire",
        "user",
        "UserNotFoundException",
        "org",
        "jivesoftware",
        "util",
        "Log",
        "username",
        "password",
        "Log",
        "isDebugEnabled",
        "Log",
        "debug",
        "format",
        "username",
        "password",
        "sharedSecret",
        "password",
        "equals",
        "sharedSecret",
        "format",
        "username",
        "username",
        "token",
        "digest",
        "username",
        "username",
        "password"
    ],
    "literals": [
        "\"Username: %s logged with shared secret: %s\"",
        "\"12345\"",
        "\"User %s provided wrong shared secret\"",
        "\"Digest is unsupported\"",
        "\"Passwords are one-way hashed and cannot be recovered\"",
        "\"Passwords are one-way hashed and cannot be recovered\""
    ],
    "variables": [],
    "comments": [
        "Needs to to be here otherwise the plugin wouldn't work",
        "Check the shared secret"
    ],
    "docstrings": [
        "* Returns true if this AuthProvider supports authentication using\n     * plain-text passwords according to JEP--0078. Plain text authentication is\n     * not secure and should generally only be used for a TLS/SSL connection.\n     *\n     * @return <code>true</code> if plain text password authentication is\n     * supported by this AuthProvider, otherwise <code>false</code>.",
        "* Returns true if this AuthProvider supports digest authentication\n     * according to JEP-0078.\n     *\n     * @return <code>true</code> if digest authentication is supported by this\n     * AuthProvider, otherwise <code>false</code>.",
        "* Returns if the username and password are valid; otherwise this method\n     * throws an <code>UnauthorizedException</code>.\n     * <p/>\n     * <p/>\n     * If {@link #isPlainSupported()} returns false, this method should throw an\n     * <code>UnsupportedOperationException</code>.\n     *\n     * @param username The username or full JID.\n     * @param password The shared secret password.\n     * @throws UnauthorizedException            If the username and password do not match any existing user.\n     * @throws ConnectionException              If Openfire is not able to connect to the user and group system.\n     * @throws InternalUnauthenticatedException If Openfire is not able to authenticate itself into the user\n     *                                          and group system.",
        "* Returns if the username, token, and digest are valid; otherwise this\n     * method throws an <code>UnauthorizedException</code>.\n     * <p/>\n     * <p/>\n     * If {@link #isDigestSupported()} returns false, this method should throw\n     * an <code>UnsupportedOperationException</code>.\n     *\n     * @param username The username or full JID.\n     * @param token    The token that was used with plain-text password to generate\n     *                 the digest.\n     * @param digest   The digest generated from plain-text password and unique\n     *                 token.\n     * @throws UnauthorizedException            If the username and password do not match any existing user.\n     * @throws ConnectionException              If Openfire is not able to connect to the user and group system.\n     * @throws InternalUnauthenticatedException If Openfire is not able to authenticate itself into the user\n     *                                          and group system.",
        "* Returns the user's password. This method should throw an\n     * <code>UnsupportedOperationException</code> if this operation is not\n     * supported by the backend user store.\n     *\n     * @param username The username of the user.\n     * @return The user's password.\n     * @throws UserNotFoundException         If the given user's password could not be loaded.\n     * @throws UnsupportedOperationException If the provider does not support the operation (this is an\n     *                                       optional operation).",
        "* Sets the users's password. This method should throw an\n     * <code>UnsupportedOperationException</code> if this operation is not\n     * supported by the backend user store.\n     *\n     * @param username The username of the user.\n     * @param password The new plaintext password for the user.\n     * @throws UserNotFoundException         If the given user could not be loaded.\n     * @throws UnsupportedOperationException If the provider does not support the operation (this is an\n     *                                       optional operation).",
        "* Returns true if this UserProvider is able to retrieve user passwords from\n     * the backend user store. If this operation is not supported then\n     * {@link #getPassword(String)} will throw an\n     * {@link UnsupportedOperationException} if invoked.\n     *\n     * @return true if this UserProvider is able to retrieve user passwords from\n     * the backend user store."
    ],
    "functions": [
        "SharedSecretAuthProvider",
        "isPlainSupported",
        "isDigestSupported",
        "authenticate",
        "authenticate",
        "getPassword",
        "setPassword",
        "supportsPasswordRetrieval"
    ],
    "classes": [
        "SharedSecretAuthProvider"
    ]
}