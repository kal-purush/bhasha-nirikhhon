{
    "identifiers": [
        "overlay",
        "gBrowser",
        "util",
        "removeTab",
        "tab",
        "tab",
        "tabs",
        "tabs",
        "tabList",
        "tab",
        "val",
        "options",
        "val",
        "tab",
        "tabs",
        "tab",
        "tabs",
        "tab",
        "val",
        "tabs",
        "tabs",
        "tabs",
        "val",
        "idx",
        "tabs",
        "idx",
        "val",
        "idx",
        "tabList",
        "tabs",
        "idx",
        "removeTab",
        "arguments",
        "group",
        "context",
        "UTF8",
        "group",
        "context",
        "extra",
        "extra",
        "e",
        "hasOwnProperty",
        "extra",
        "e",
        "options",
        "template",
        "options",
        "k",
        "v",
        "options",
        "template",
        "options",
        "k",
        "v",
        "template",
        "options",
        "k",
        "v"
    ],
    "literals": [
        "\"use strict\"",
        "\"tabclose\"",
        "\"opener\"",
        "\"previous\"",
        "\"left\"",
        "\"right\"",
        "\"tabclose\"",
        "\"tc\"",
        "\"Tab closure options, in order of precedence\"",
        "\"stringlist\"",
        "\"left,opener,previous,right\"",
        "\"left\"",
        "\"Select the tab to the left when closing\"",
        "\"opener\"",
        "\"Select the tabâ€™s opener, if available\"",
        "\"previous\"",
        "\"Select the previously selected tab\"",
        "\"right\"",
        "\"Select the tab to the right when closing\"",
        "\"tabopen\"",
        "\"to\"",
        "\"Placement options for new tabs\"",
        "\"stringmap\"",
        "\"link:right,orphan:groupright,external:end\"",
        "\"external\"",
        "\"Tabs opened from an external application\"",
        "\"link\"",
        "\"Tabs opened by clicking links and the like\"",
        "\"orphan\"",
        "\"Tabs opened by any other means\"",
        "\"end\"",
        "\"Open new tabs at the end of the tab bar\"",
        "\"groupleft\"",
        "\"Open tabs to the left of the current group\"",
        "\"groupright\"",
        "\"Open tabs to the right of the current group\"",
        "\"left\"",
        "\"Open new tabs to the left of the current tab\"",
        "\"right\"",
        "\"Open new tabs to the right of the current tab\"",
        "\"start\"",
        "\"Open new tabs at the start of the tab bar\"",
        "\"plugin\"",
        "\"tab-options\"",
        "\"0.3\"",
        "\"http://dactyl.sf.net/pentadactyl/plugins#tab-options-plugin\"",
        "\"Tab options\"",
        "\"dactyl\"",
        "\"author\"",
        "\"maglione.k@gmail.com\"",
        "\"Kris Maglione\"",
        "\"license\"",
        "\"http://people.freebsd.org/~phk/\"",
        "\"BEER-WARE\"",
        "\"project\"",
        "\"Pentadactyl\"",
        "\"min-version\"",
        "\"1.0\"",
        "\"p\"",
        "\"Adds extended tab options, including relative placement of new\"",
        "\"tabs and more sensible focus changes after tab closure.\"",
        "\"item\"",
        "\"tags\"",
        "\"'tc' 'tabclose'\"",
        "\"spec\"",
        "\"'tabclose' 'tc'\"",
        "\"type\"",
        "\"stringlist\"",
        "\"default\"",
        "\"tabclose\"",
        "\"description\"",
        "\"p\"",
        "\"Tab closure options, in order of precedence. The \"",
        "\"first item for which a valid tab exists is used.\"",
        "\"dl\"",
        "\"tabclose\"",
        "\"dt\"",
        "\"dd\"",
        "\"note\"",
        "\"This option does not affect the default mappings for \"",
        "\"k\"",
        "\"d\"",
        "\"and \"",
        "\"k\"",
        "\"D\"",
        "\", which behave as documented.\"",
        "\"item\"",
        "\"tags\"",
        "\"'to' 'tabopen'\"",
        "\"spec\"",
        "\"'tabopen' 'to'\"",
        "\"type\"",
        "\"stringmap\"",
        "\"default\"",
        "\"tabopen\"",
        "\"description\"",
        "\"p\"",
        "\"New tab placement options. The keys in the \"",
        "\"t\"",
        "\"stringmap\"",
        "\"refer to the ways the tab was opened, while the values define \"",
        "\"where such tabs are placed. The following keys are applicable:\"",
        "\"dl\"",
        "\"tabopen\"",
        "\"dt\"",
        "\"dd\"",
        "\"p\"",
        "\"As are the following values:\"",
        "\"dl\"",
        "\"tabopen\"",
        "\"\"",
        "\"dt\"",
        "\"dd\""
    ],
    "variables": [
        "groupId",
        "onUnload",
        "tabList",
        "idx",
        "INFO",
        "k",
        "v",
        "k",
        "v",
        "k",
        "v"
    ],
    "comments": [
        "addTab: util.wrapCallback(function addTab(uri, params, charset, postData, ownerTab) {",
        "if (!isObject(params) || params instanceof Ci.nsIURI)",
        "params = { referrerURI: params, ownerTab: ownerTab };",
        "let currentTab = tabs.getTab();",
        "let tab = addTab.superapply(this, arguments);",
        "if (!params.ownerTab && (params.referrerURI || params.relatedToCurrent))",
        "params.ownerTab = currentTab;",
        "if (params.ownerTab)",
        "tab.dactylOwner = Cu.getWeakReference(params.ownerTab);",
        "tab.dactylGroup = browser.groupId++;",
        "if (params.ownerTab && (params.referrerURI || params.relatedToCurrent)) {",
        "if (params.ownerTab.dactylGroup == null)",
        "params.ownerTab.dactylGroup = tab.dactylGroup;",
        "tab.dactylGroup = params.ownerTab.dactylGroup;",
        "}",
        "This is a hack to deal with session restore.",
        "if (uri === \"about:blank\" && params.skipAnimation && Object.keys(params).length == 1)",
        "return tab;",
        "let source = params.fromExternal ? \"external\" :",
        "params.referrerURI  ? \"link\"",
        ": \"orphan\";",
        "let location = options[\"tabopen\"][source];",
        "if (uri == null || location == null)",
        "return tab;",
        "let visible = tabs.visibleTabs;",
        "let index = visible.indexOf(params.ownerTab || currentTab);",
        "if (/left$/.test(location))",
        ";",
        "else if (/right$/.test(location))",
        "index++;",
        "else if (\"start\" == location)",
        "index = 0;",
        "else if (\"end\" == location)",
        "index = visible.length;",
        "if (\"groupleft\" == location)",
        "while (index > 0 && visible[index].dactylGroup && visible[index].dactylGroup == currentTab.dactylGroup)",
        "index--;",
        "else if (\"groupright\" == location)",
        "while (index < visible.length && visible[index].dactylGroup && visible[index].dactylGroup == currentTab.dactylGroup)",
        "index++;",
        "config.browser.moveTabTo(tab, tabs.allTabs.concat(undefined).indexOf(visible[index]));",
        "return tab;",
        "}),",
        "vim:se sts=4 sw=4 et:"
    ],
    "docstrings": [
        "* \"THE BEER-WARE LICENSE\" (Revision 42):\n * <maglions.k at Gmail> wrote this file. As long as you retain this notice you\n * can do whatever you want with this stuff. If we meet some day, and you think\n * this stuff is worth it, you can buy me a beer in return.       Kris Maglione\n * ---------------------------------------------------------------------------\n * <phk@FreeBSD.ORG> wrote this license.  As long as you retain this notice you\n * can do whatever you want with this stuff. If we meet some day, and you think\n * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp\n * ---------------------------------------------------------------------------\n *\n * Documentation is at the tail of this file."
    ],
    "functions": [],
    "classes": []
}