{
    "identifiers": [
        "marauroa",
        "server",
        "db",
        "adapter",
        "java",
        "sql",
        "Connection",
        "java",
        "sql",
        "DatabaseMetaData",
        "java",
        "sql",
        "ResultSet",
        "java",
        "sql",
        "SQLException",
        "java",
        "util",
        "Locale",
        "java",
        "util",
        "Properties",
        "marauroa",
        "common",
        "Log4J",
        "marauroa",
        "common",
        "Logger",
        "marauroa",
        "server",
        "db",
        "DatabaseConnectionException",
        "marauroa",
        "server",
        "db",
        "StringChecker",
        "logger",
        "Log4J",
        "getLogger",
        "connInfo",
        "connInfo",
        "Override",
        "connInfo",
        "con",
        "createConnection",
        "connInfo",
        "meta",
        "meta",
        "con",
        "getMetaData",
        "name",
        "meta",
        "getDatabaseProductName",
        "name",
        "toLowerCase",
        "Locale",
        "ENGLISH",
        "indexOf",
        "logger",
        "warn",
        "name",
        "con",
        "index",
        "res",
        "sql",
        "StringChecker",
        "escapeSQLString",
        "index",
        "rs",
        "query",
        "sql",
        "rs",
        "next",
        "res",
        "rs",
        "getString",
        "rs",
        "close",
        "res",
        "Override",
        "sql",
        "mySql",
        "sql",
        "trim",
        "lowerCase",
        "mySql",
        "toLowerCase",
        "Locale",
        "ENGLISH",
        "lowerCase",
        "startsWith",
        "mySql",
        "rewriteSqlCreateTable",
        "mySql",
        "lowerCase",
        "startsWith",
        "lowerCase",
        "startsWith",
        "mySql",
        "rewriteSqlCreateIndex",
        "mySql",
        "mySql",
        "sql",
        "parser",
        "sql",
        "exists",
        "doesIndexExist",
        "parser",
        "getName",
        "exists",
        "parser",
        "toSqlWithoutIf",
        "sql",
        "pattern",
        "sql",
        "replaceAll",
        "pattern"
    ],
    "literals": [
        "\"postgres\"",
        "\"Using PostgresqlDatabaseAdapter to connect to \"",
        "\"SELECT to_regclass('\"",
        "\"')\"",
        "\"create table\"",
        "\"create index\"",
        "\"create unique index\"",
        "\"\"",
        "\"(?i) int(?:eger)?[ ]+auto_increment\"",
        "\" SERIAL \""
    ],
    "variables": [
        "meta"
    ],
    "comments": [],
    "docstrings": [
        "*************************************************************************\n *                   (C) Copyright 2007-2016 - Marauroa                    *\n ***************************************************************************\n ***************************************************************************\n *                                                                         *\n *   This program is free software; you can redistribute it and/or modify  *\n *   it under the terms of the GNU General Public License as published by  *\n *   the Free Software Foundation; either version 2 of the License, or     *\n *   (at your option) any later version.                                   *\n *                                                                         *\n **************************************************************************",
        "* abstracts from PostgreSQL specifications\n *\n * @author hendrik",
        "* creates a new PostgresqlDatabaseAdapter\n\t *\n\t * @param connInfo parameters specifying the connection\n\t * @throws DatabaseConnectionException if the connection cannot be established.",
        "* creates a new PostgresqlDatabaseAdapter for test purposes, without connection to the DB\n\t *\n\t * @throws DatabaseConnectionException if the connection cannot be established.",
        "* checks whether the specified index exists\n\t * \n\t * @param index name of index\n\t * @return true, if the index exists; false otherwise\n\t * @throws SQLException in case of a database error",
        "* rewrites CREATE TABLE statements to add TYPE=InnoDB\n\t *\n\t * @param sql original SQL statement\n\t * @return modified SQL statement\n\t * @throws SQLException in case of a database error"
    ],
    "functions": [
        "PostgresDatabaseAdapter",
        "PostgresDatabaseAdapter",
        "Connection",
        "createConnection",
        "doesIndexExist",
        "rewriteSql",
        "rewriteSqlCreateIndex",
        "rewriteSqlCreateTable"
    ],
    "classes": [
        "PostgresDatabaseAdapter"
    ]
}