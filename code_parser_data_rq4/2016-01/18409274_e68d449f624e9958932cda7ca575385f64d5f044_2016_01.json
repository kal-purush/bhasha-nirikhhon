{
    "identifiers": [
        "nl",
        "tudelft",
        "ewi",
        "devhub",
        "modules",
        "com",
        "google",
        "common",
        "io",
        "Files",
        "com",
        "google",
        "inject",
        "AbstractModule",
        "com",
        "google",
        "inject",
        "Provides",
        "com",
        "google",
        "inject",
        "Singleton",
        "com",
        "google",
        "inject",
        "assistedinject",
        "FactoryModuleBuilder",
        "com",
        "google",
        "inject",
        "name",
        "Names",
        "lombok",
        "SneakyThrows",
        "lombok",
        "slf4j",
        "Slf4j",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "models",
        "CreateRepositoryModel",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "models",
        "DetailedRepositoryModel",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "MockedSingleton",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "BranchApi",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "BranchApiImpl",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "CommitApi",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "CommitApiImpl",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "GroupApi",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "GroupApiImpl",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "GroupsApi",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "GroupsApiImpl",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "RepositoriesApi",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "RepositoriesApiImpl",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "RepositoryApi",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "RepositoryApiImpl",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "Transformers",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "UsersApi",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "UsersApiImpl",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "di",
        "BranchApiFactory",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "di",
        "CommitApiFactory",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "di",
        "Factory",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "di",
        "GroupApiFactory",
        "nl",
        "tudelft",
        "ewi",
        "git",
        "web",
        "api",
        "di",
        "RepositoryApiFactory",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "ManagedConfig",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "ManagedConfigFactory",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "config",
        "Config",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "config",
        "ConfigImpl",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "git",
        "GitException",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "git",
        "GitManager",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "git",
        "JGitManagerFactory",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "keystore",
        "KeyStore",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "keystore",
        "KeyStoreImpl",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "repositories",
        "PathRepositoriesManager",
        "nl",
        "tudelft",
        "ewi",
        "gitolite",
        "repositories",
        "RepositoriesManager",
        "org",
        "apache",
        "commons",
        "io",
        "FileUtils",
        "org",
        "eclipse",
        "jetty",
        "util",
        "component",
        "LifeCycle",
        "org",
        "eclipse",
        "jgit",
        "api",
        "Git",
        "org",
        "eclipse",
        "jgit",
        "api",
        "errors",
        "GitAPIException",
        "org",
        "mockito",
        "InjectMocks",
        "org",
        "mockito",
        "Mock",
        "org",
        "mockito",
        "Mockito",
        "org",
        "mockito",
        "MockitoAnnotations",
        "org",
        "mockito",
        "Spy",
        "javax",
        "inject",
        "Inject",
        "javax",
        "inject",
        "Named",
        "javax",
        "validation",
        "Valid",
        "javax",
        "ws",
        "rs",
        "InternalServerErrorException",
        "java",
        "io",
        "File",
        "java",
        "io",
        "org",
        "mockito",
        "Mockito",
        "when",
        "Slf4j",
        "adminFolder",
        "Files",
        "createTempDir",
        "configFolder",
        "ensureExists",
        "adminFolder",
        "keyDir",
        "ensureExists",
        "adminFolder",
        "mirrorsFolder",
        "Files",
        "createTempDir",
        "repositoriesFolder",
        "Files",
        "createTempDir",
        "Spy",
        "keyStore",
        "keyDir",
        "Spy",
        "gitManager",
        "Spy",
        "gitoliteConfig",
        "InjectMocks",
        "managedConfig",
        "Mock",
        "configuration",
        "Override",
        "MockitoAnnotations",
        "initMocks",
        "createMockedMirrorsFolder",
        "createMockedRepositoriesFolder",
        "createMockedGitoliteManagerRepo",
        "bind",
        "to",
        "bind",
        "to",
        "bind",
        "to",
        "bindSubResourceFactory",
        "bindSubResourceFactory",
        "bindSubResourceFactory",
        "bindSubResourceFactory",
        "bind",
        "toInstance",
        "managedConfig",
        "bind",
        "toInstance",
        "configuration",
        "bind",
        "annotatedWith",
        "toInstance",
        "gitManager",
        "bind",
        "annotatedWith",
        "toInstance",
        "gitoliteConfig",
        "bind",
        "annotatedWith",
        "toInstance",
        "keyStore",
        "bind",
        "to",
        "bind",
        "toInstance",
        "repositoriesFolder",
        "bind",
        "annotatedWith",
        "Names",
        "named",
        "toInstance",
        "mirrorsFolder",
        "bind",
        "annotatedWith",
        "Names",
        "named",
        "toInstance",
        "repositoriesFolder",
        "bind",
        "toInstance",
        "Mockito",
        "mock",
        "Runtime",
        "getRuntime",
        "addShutdownHook",
        "removeFolders",
        "mirrorsPath",
        "mirrorsFolder",
        "toPath",
        "toString",
        "when",
        "configuration",
        "getMirrorsDirectory",
        "thenReturn",
        "mirrorsFolder",
        "log",
        "info",
        "mirrorsPath",
        "repositoriesPath",
        "repositoriesFolder",
        "toPath",
        "toString",
        "when",
        "configuration",
        "getGitoliteBaseUrl",
        "thenReturn",
        "repositoriesPath",
        "when",
        "configuration",
        "getRepositoriesDirectory",
        "thenReturn",
        "repositoriesFolder",
        "log",
        "info",
        "repositoriesPath",
        "iface",
        "implementation",
        "factory",
        "log",
        "info",
        "implementation",
        "install",
        "implement",
        "iface",
        "implementation",
        "build",
        "factory",
        "SneakyThrows",
        "config",
        "configFolder",
        "Files",
        "createParentDirs",
        "config",
        "SneakyThrows",
        "FileUtils",
        "deleteDirectory",
        "repositoriesFolder",
        "FileUtils",
        "deleteDirectory",
        "adminFolder",
        "FileUtils",
        "deleteDirectory",
        "mirrorsFolder",
        "Override",
        "adminFolder",
        "Override",
        "Override",
        "Override",
        "filePattern",
        "Override",
        "uri",
        "Override",
        "Override",
        "Override",
        "Override",
        "repositoriesFolder",
        "Inject",
        "Named",
        "repositoriesFolder",
        "transformers",
        "repositoriesManager",
        "repositoryApiFactory",
        "managedConfig",
        "config",
        "transformers",
        "repositoriesManager",
        "repositoryApiFactory",
        "managedConfig",
        "config",
        "repositoriesFolder",
        "repositoriesFolder",
        "Override",
        "Valid",
        "createRepositoryModel",
        "Git",
        "init",
        "setBare",
        "setDirectory",
        "repositoriesFolder",
        "createRepositoryModel",
        "getName",
        "call",
        "createRepository",
        "createRepositoryModel",
        "e",
        "e",
        "getMessage",
        "e",
        "SneakyThrows",
        "file",
        "FileUtils",
        "forceMkdir",
        "file",
        "file"
    ],
    "literals": [
        "\"conf\"",
        "\"keydir\"",
        "\"mirrors.folder\"",
        "\"repositories.folder\"",
        "\"/\"",
        "\"Initialized mirrors folder in {}\"",
        "\"/\"",
        "\"Initialized bare repository folder in {}\"",
        "\"Registering sub-resource {}\"",
        "\"gitolite.conf\"",
        "\"repositories.folder\"",
        "\".git\""
    ],
    "variables": [
        "managedConfig",
        "configuration",
        "repositoriesFolder"
    ],
    "comments": [
        "Bind GitManager and Config spies so tests can verify on them",
        "Bind folders so tests can prepare them",
        "Clean up folders on shutdown"
    ],
    "docstrings": [
        "* Mock out the Gitolite manager components, so we are not dependent on a Gitolite installation.\n *\n * @author Jan-Willem Gmelig Meyling",
        "* Instead of stubbing the admin folder, we spy a custom implementation, so\n\t * users can still reset the mock.",
        "* Gitolite initializes bare repositories on first use, we need to hook on the repository creation to\n\t * initialize a bare repository."
    ],
    "functions": [
        "configure",
        "createMockedMirrorsFolder",
        "createMockedRepositoriesFolder",
        "bindSubResourceFactory",
        "createMockedGitoliteManagerRepo",
        "removeFolders",
        "File",
        "getWorkingDirectory",
        "exists",
        "open",
        "remove",
        "clone",
        "init",
        "pull",
        "commitChanges",
        "push",
        "FakeRepoositoriesApi",
        "DetailedRepositoryModel",
        "createRepository",
        "File",
        "ensureExists"
    ],
    "classes": [
        "MockedGitoliteGitServerModule",
        "MockedGitManager",
        "FakeRepoositoriesApi"
    ]
}