{
    "identifiers": [
        "socket",
        "datetime",
        "time",
        "sys",
        "re",
        "AnsibleModule",
        "argument_spec",
        "host",
        "timeout",
        "connect_timeout",
        "delay",
        "port",
        "path",
        "search_regex",
        "state",
        "choices",
        "port",
        "path",
        "fail_json",
        "msg",
        "path",
        "state",
        "fail_json",
        "msg",
        "datetime",
        "datetime",
        "now",
        "delay",
        "time",
        "sleep",
        "delay",
        "state",
        "start",
        "datetime",
        "timedelta",
        "seconds",
        "timeout",
        "datetime",
        "datetime",
        "now",
        "end",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "s",
        "settimeout",
        "connect_timeout",
        "s",
        "connect",
        "host",
        "port",
        "s",
        "shutdown",
        "socket",
        "SHUT_RDWR",
        "s",
        "close",
        "time",
        "sleep",
        "datetime",
        "datetime",
        "now",
        "start",
        "fail_json",
        "msg",
        "host",
        "port",
        "elapsed",
        "elapsed",
        "seconds",
        "state",
        "start",
        "datetime",
        "timedelta",
        "seconds",
        "timeout",
        "datetime",
        "datetime",
        "now",
        "end",
        "path",
        "open",
        "path",
        "f",
        "search_regex",
        "re",
        "search",
        "search_regex",
        "f",
        "read",
        "re",
        "MULTILINE",
        "time",
        "sleep",
        "IOError",
        "time",
        "sleep",
        "port",
        "socket",
        "socket",
        "socket",
        "AF_INET",
        "socket",
        "SOCK_STREAM",
        "s",
        "settimeout",
        "connect_timeout",
        "s",
        "connect",
        "host",
        "port",
        "s",
        "shutdown",
        "socket",
        "SHUT_RDWR",
        "s",
        "close",
        "time",
        "sleep",
        "datetime",
        "datetime",
        "now",
        "start",
        "port",
        "fail_json",
        "msg",
        "host",
        "port",
        "elapsed",
        "elapsed",
        "seconds",
        "path",
        "search_regex",
        "fail_json",
        "msg",
        "search_regex",
        "path",
        "elapsed",
        "elapsed",
        "seconds",
        "fail_json",
        "msg",
        "path",
        "elapsed",
        "elapsed",
        "seconds",
        "datetime",
        "datetime",
        "now",
        "start",
        "exit_json",
        "state",
        "state",
        "port",
        "port",
        "search_regex",
        "search_regex",
        "path",
        "path",
        "elapsed",
        "elapsed",
        "seconds",
        "main"
    ],
    "literals": [
        "'127.0.0.1'",
        "'started'",
        "'started'",
        "'stopped'",
        "'present'",
        "'host'",
        "'timeout'",
        "'connect_timeout'",
        "'delay'",
        "'port'",
        "'port'",
        "'state'",
        "'path'",
        "'search_regex'",
        "\"port and path parameter can not both be passed to wait_for\"",
        "'stopped'",
        "\"state=stopped should only be used for checking a port in the wait_for module\"",
        "'stopped'",
        "\"Timeout when waiting for %s:%s to stop.\"",
        "'started'",
        "'present'",
        "\"Timeout when waiting for %s:%s\"",
        "\"Timeout when waiting for search string %s in %s\"",
        "\"Timeout when waiting for file %s\""
    ],
    "variables": [
        "DOCUMENTATION",
        "EXAMPLES",
        "host",
        "timeout",
        "connect_timeout",
        "delay",
        "port",
        "port",
        "state",
        "path",
        "search_regex",
        "start",
        "end",
        "s",
        "elapsed",
        "end",
        "s",
        "elapsed",
        "elapsed"
    ],
    "comments": [
        "!/usr/bin/python",
        "-*- coding: utf-8 -*-",
        "(c) 2012, Jeroen Hoekx <jeroen@hoekx.be>",
        "",
        "This file is part of Ansible",
        "",
        "Ansible is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "",
        "Ansible is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License",
        "along with Ansible.  If not, see <http://www.gnu.org/licenses/>.",
        "first wait for the stop condition",
        "wait for start condition",
        "this is magic, see lib/ansible/module_common.py",
        "<<INCLUDE_ANSIBLE_MODULE_COMMON>>"
    ],
    "docstrings": [
        "'''\n---\nmodule: wait_for\nshort_description: Waits for a condition before continuing.\ndescription:\n     - Waiting for a port to become available is useful for when services \n       are not immediately available after their init scripts return - \n       which is true of certain Java application servers. It is also \n       useful when starting guests with the M(virt) module and\n       needing to pause until they are ready. This module can \n       also be used to wait for a file to be available on the filesystem\n       or with a regex match a string to be present in a file.\nversion_added: \"0.7\"\noptions:\n  host:\n    description:\n      - hostname or IP address to wait for\n    required: false\n    default: \"127.0.0.1\"\n    aliases: []\n  timeout:\n    description:\n      - maximum number of seconds to wait for\n    required: false\n    default: 300\n  delay:\n    description:\n      - number of seconds to wait before starting to poll\n    required: false\n    default: 0\n  port:\n    description:\n      - port number to poll\n    required: false\n  state:\n    description:\n      - either C(present), C(started), or C(stopped) \n      - When checking a port C(started) will ensure the port is open, C(stopped) will check that it is closed\n      - When checking for a file or a search string C(present) or C(started) will ensure that the file or string is present before continuing\n    choices: [ \"present\", \"started\", \"stopped\" ]\n    default: \"started\"\n  path:\n    version_added: \"1.4\"\n    required: false\n    description:\n      - path to a file on the filesytem that must exist before continuing\n  search_regex:\n    version_added: \"1.4\"\n    required: false\n    description:\n      - with the path option can be used match a string in the file that must match before continuing.  Defaults to a multiline regex.\n   \nnotes: []\nrequirements: []\nauthor: Jeroen Hoekx, John Jarvis\n'''",
        "'''\n\n# wait 300 seconds for port 8000 to become open on the host, don't start checking for 10 seconds\n- wait_for: port=8000 delay=10\"\n\n# wait until the file /tmp/foo is present before continuing\n- wait_for: path=/tmp/foo\n\n# wait until the string \"completed\" is in the file /tmp/foo before continuing\n- wait_for: path=/tmp/foo search_regex=completed\n\n'''"
    ],
    "functions": [
        "main"
    ],
    "classes": []
}