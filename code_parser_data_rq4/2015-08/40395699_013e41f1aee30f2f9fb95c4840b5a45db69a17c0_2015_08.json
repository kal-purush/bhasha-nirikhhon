{
    "identifiers": [
        "com",
        "example",
        "android",
        "softkeyboard",
        "android",
        "inputmethodservice",
        "InputMethodService",
        "android",
        "inputmethodservice",
        "Keyboard",
        "android",
        "inputmethodservice",
        "KeyboardView",
        "android",
        "media",
        "MediaPlayer",
        "android",
        "os",
        "AsyncTask",
        "android",
        "text",
        "InputType",
        "android",
        "text",
        "method",
        "MetaKeyKeyListener",
        "android",
        "view",
        "KeyCharacterMap",
        "android",
        "view",
        "KeyEvent",
        "android",
        "view",
        "View",
        "android",
        "view",
        "inputmethod",
        "CompletionInfo",
        "android",
        "view",
        "inputmethod",
        "EditorInfo",
        "android",
        "view",
        "inputmethod",
        "InputConnection",
        "android",
        "view",
        "inputmethod",
        "InputMethodManager",
        "android",
        "view",
        "inputmethod",
        "InputMethodSubtype",
        "java",
        "util",
        "java",
        "util",
        "DEBUG",
        "PROCESS_HARD_KEYS",
        "mInputMethodManager",
        "mInputView",
        "mCandidateView",
        "mCompletions",
        "music",
        "mComposing",
        "mPredictionOn",
        "mCompletionOn",
        "mLastDisplayWidth",
        "mCapsLock",
        "mLastShiftTime",
        "mMetaState",
        "mSymbolsKeyboard",
        "mSymbolsShiftedKeyboard",
        "mQwertyKeyboard",
        "mCurKeyboard",
        "mWordSeparators",
        "song_1",
        "song_2",
        "song_3",
        "song_4",
        "song_5",
        "song_6",
        "song_7",
        "song_8",
        "count",
        "Override",
        "onCreate",
        "song_1",
        "MediaPlayer",
        "create",
        "R",
        "raw",
        "one",
        "song_2",
        "MediaPlayer",
        "create",
        "R",
        "raw",
        "two",
        "song_3",
        "MediaPlayer",
        "create",
        "R",
        "raw",
        "three",
        "song_4",
        "MediaPlayer",
        "create",
        "R",
        "raw",
        "four",
        "song_5",
        "MediaPlayer",
        "create",
        "R",
        "raw",
        "five",
        "song_6",
        "MediaPlayer",
        "create",
        "R",
        "raw",
        "six",
        "song_7",
        "MediaPlayer",
        "create",
        "R",
        "raw",
        "seven",
        "song_8",
        "MediaPlayer",
        "create",
        "R",
        "raw",
        "eight",
        "count",
        "mInputMethodManager",
        "getSystemService",
        "INPUT_METHOD_SERVICE",
        "mWordSeparators",
        "getResources",
        "getString",
        "R",
        "word_separators",
        "Override",
        "mQwertyKeyboard",
        "displayWidth",
        "getMaxWidth",
        "displayWidth",
        "mLastDisplayWidth",
        "mLastDisplayWidth",
        "displayWidth",
        "mQwertyKeyboard",
        "R",
        "xml",
        "qwerty",
        "mSymbolsKeyboard",
        "R",
        "xml",
        "symbols",
        "mSymbolsShiftedKeyboard",
        "R",
        "xml",
        "symbols_shift",
        "Override",
        "mInputView",
        "getLayoutInflater",
        "inflate",
        "R",
        "layout",
        "input",
        "mInputView",
        "setOnKeyboardActionListener",
        "mInputView",
        "setKeyboard",
        "mQwertyKeyboard",
        "mInputView",
        "Override",
        "mCandidateView",
        "mCandidateView",
        "setService",
        "mCandidateView",
        "Override",
        "attribute",
        "restarting",
        "onStartInput",
        "attribute",
        "restarting",
        "mComposing",
        "setLength",
        "updateCandidates",
        "restarting",
        "mMetaState",
        "mPredictionOn",
        "mCompletionOn",
        "mCompletions",
        "attribute",
        "inputType",
        "InputType",
        "TYPE_MASK_CLASS",
        "InputType",
        "TYPE_CLASS_NUMBER",
        "InputType",
        "TYPE_CLASS_DATETIME",
        "mCurKeyboard",
        "mSymbolsKeyboard",
        "InputType",
        "TYPE_CLASS_PHONE",
        "mCurKeyboard",
        "mSymbolsKeyboard",
        "InputType",
        "TYPE_CLASS_TEXT",
        "mCurKeyboard",
        "mQwertyKeyboard",
        "mPredictionOn",
        "variation",
        "attribute",
        "inputType",
        "InputType",
        "TYPE_MASK_VARIATION",
        "variation",
        "InputType",
        "TYPE_TEXT_VARIATION_PASSWORD",
        "variation",
        "InputType",
        "TYPE_TEXT_VARIATION_VISIBLE_PASSWORD",
        "mPredictionOn",
        "variation",
        "InputType",
        "TYPE_TEXT_VARIATION_EMAIL_ADDRESS",
        "variation",
        "InputType",
        "TYPE_TEXT_VARIATION_URI",
        "variation",
        "InputType",
        "TYPE_TEXT_VARIATION_FILTER",
        "mPredictionOn",
        "attribute",
        "inputType",
        "InputType",
        "TYPE_TEXT_FLAG_AUTO_COMPLETE",
        "mPredictionOn",
        "mCompletionOn",
        "isFullscreenMode",
        "updateShiftKeyState",
        "attribute",
        "mCurKeyboard",
        "mQwertyKeyboard",
        "updateShiftKeyState",
        "attribute",
        "mCurKeyboard",
        "setImeOptions",
        "getResources",
        "attribute",
        "imeOptions",
        "Override",
        "onFinishInput",
        "mComposing",
        "setLength",
        "updateCandidates",
        "setCandidatesViewShown",
        "mCurKeyboard",
        "mQwertyKeyboard",
        "mInputView",
        "mInputView",
        "closing",
        "Override",
        "attribute",
        "restarting",
        "onStartInputView",
        "attribute",
        "restarting",
        "mInputView",
        "setKeyboard",
        "mCurKeyboard",
        "mInputView",
        "closing",
        "subtype",
        "mInputMethodManager",
        "getCurrentInputMethodSubtype",
        "mInputView",
        "setSubtypeOnSpaceKey",
        "subtype",
        "Override",
        "subtype",
        "mInputView",
        "setSubtypeOnSpaceKey",
        "subtype",
        "Override",
        "oldSelStart",
        "oldSelEnd",
        "newSelStart",
        "newSelEnd",
        "candidatesStart",
        "candidatesEnd",
        "onUpdateSelection",
        "oldSelStart",
        "oldSelEnd",
        "newSelStart",
        "newSelEnd",
        "candidatesStart",
        "candidatesEnd",
        "mComposing",
        "length",
        "newSelStart",
        "candidatesEnd",
        "newSelEnd",
        "candidatesEnd",
        "mComposing",
        "setLength",
        "updateCandidates",
        "ic",
        "getCurrentInputConnection",
        "ic",
        "ic",
        "finishComposingText",
        "Override",
        "completions",
        "mCompletionOn",
        "mCompletions",
        "completions",
        "completions",
        "setSuggestions",
        "stringList",
        "i",
        "i",
        "completions",
        "length",
        "i",
        "ci",
        "completions",
        "i",
        "ci",
        "stringList",
        "add",
        "ci",
        "getText",
        "toString",
        "setSuggestions",
        "stringList",
        "keyCode",
        "mMetaState",
        "MetaKeyKeyListener",
        "handleKeyDown",
        "mMetaState",
        "keyCode",
        "c",
        "getUnicodeChar",
        "MetaKeyKeyListener",
        "getMetaState",
        "mMetaState",
        "mMetaState",
        "MetaKeyKeyListener",
        "adjustMetaAfterKeypress",
        "mMetaState",
        "ic",
        "getCurrentInputConnection",
        "c",
        "ic",
        "dead",
        "c",
        "KeyCharacterMap",
        "COMBINING_ACCENT",
        "dead",
        "c",
        "c",
        "KeyCharacterMap",
        "COMBINING_ACCENT_MASK",
        "mComposing",
        "length",
        "accent",
        "mComposing",
        "charAt",
        "mComposing",
        "length",
        "composed",
        "KeyEvent",
        "getDeadChar",
        "accent",
        "c",
        "composed",
        "c",
        "composed",
        "mComposing",
        "setLength",
        "mComposing",
        "length",
        "onKey",
        "c",
        "Override",
        "keyCode",
        "keyCode",
        "KeyEvent",
        "KEYCODE_BACK",
        "getRepeatCount",
        "mInputView",
        "mInputView",
        "handleBack",
        "KeyEvent",
        "KEYCODE_DEL",
        "mComposing",
        "length",
        "onKey",
        "Keyboard",
        "KEYCODE_DELETE",
        "KeyEvent",
        "KEYCODE_0",
        "KeyEvent",
        "KEYCODE_ENTER",
        "PROCESS_HARD_KEYS",
        "keyCode",
        "KeyEvent",
        "KEYCODE_SPACE",
        "getMetaState",
        "KeyEvent",
        "META_ALT_ON",
        "ic",
        "getCurrentInputConnection",
        "ic",
        "ic",
        "clearMetaKeyStates",
        "KeyEvent",
        "META_ALT_ON",
        "keyDownUp",
        "KeyEvent",
        "KEYCODE_A",
        "keyDownUp",
        "KeyEvent",
        "KEYCODE_N",
        "keyDownUp",
        "KeyEvent",
        "KEYCODE_D",
        "keyDownUp",
        "KeyEvent",
        "KEYCODE_R",
        "keyDownUp",
        "KeyEvent",
        "KEYCODE_O",
        "keyDownUp",
        "KeyEvent",
        "KEYCODE_I",
        "keyDownUp",
        "KeyEvent",
        "KEYCODE_D",
        "mPredictionOn",
        "translateKeyDown",
        "keyCode",
        "onKeyDown",
        "keyCode",
        "Override",
        "keyCode",
        "PROCESS_HARD_KEYS",
        "mPredictionOn",
        "mMetaState",
        "MetaKeyKeyListener",
        "handleKeyUp",
        "mMetaState",
        "keyCode",
        "onKeyUp",
        "keyCode",
        "inputConnection",
        "mComposing",
        "length",
        "inputConnection",
        "commitText",
        "mComposing",
        "mComposing",
        "length",
        "mComposing",
        "setLength",
        "updateCandidates",
        "attr",
        "attr",
        "mInputView",
        "mQwertyKeyboard",
        "mInputView",
        "getKeyboard",
        "caps",
        "ei",
        "getCurrentInputEditorInfo",
        "ei",
        "ei",
        "inputType",
        "InputType",
        "TYPE_NULL",
        "caps",
        "getCurrentInputConnection",
        "getCursorCapsMode",
        "attr",
        "inputType",
        "mInputView",
        "setShifted",
        "mCapsLock",
        "caps",
        "code",
        "isLetter",
        "code",
        "keyEventCode",
        "getCurrentInputConnection",
        "sendKeyEvent",
        "KeyEvent",
        "ACTION_DOWN",
        "keyEventCode",
        "getCurrentInputConnection",
        "sendKeyEvent",
        "KeyEvent",
        "ACTION_UP",
        "keyEventCode",
        "keyCode",
        "keyCode",
        "keyDownUp",
        "KeyEvent",
        "KEYCODE_ENTER",
        "keyCode",
        "keyCode",
        "keyDownUp",
        "keyCode",
        "KeyEvent",
        "KEYCODE_0",
        "getCurrentInputConnection",
        "commitText",
        "valueOf",
        "keyCode",
        "primaryCode",
        "keyCodes",
        "isWordSeparator",
        "primaryCode",
        "mComposing",
        "length",
        "commitTyped",
        "getCurrentInputConnection",
        "sendKey",
        "primaryCode",
        "updateShiftKeyState",
        "getCurrentInputEditorInfo",
        "primaryCode",
        "Keyboard",
        "KEYCODE_DELETE",
        "handleBackspace",
        "primaryCode",
        "Keyboard",
        "KEYCODE_SHIFT",
        "handleShift",
        "primaryCode",
        "Keyboard",
        "KEYCODE_CANCEL",
        "handleClose",
        "primaryCode",
        "LatinKeyboardView",
        "KEYCODE_OPTIONS",
        "primaryCode",
        "Keyboard",
        "KEYCODE_MODE_CHANGE",
        "mInputView",
        "current",
        "mInputView",
        "getKeyboard",
        "current",
        "mSymbolsKeyboard",
        "current",
        "mSymbolsShiftedKeyboard",
        "current",
        "mQwertyKeyboard",
        "current",
        "mSymbolsKeyboard",
        "mInputView",
        "setKeyboard",
        "current",
        "current",
        "mSymbolsKeyboard",
        "current",
        "setShifted",
        "handleCharacter",
        "primaryCode",
        "keyCodes",
        "text",
        "ic",
        "getCurrentInputConnection",
        "ic",
        "ic",
        "beginBatchEdit",
        "mComposing",
        "length",
        "commitTyped",
        "ic",
        "ic",
        "commitText",
        "text",
        "ic",
        "endBatchEdit",
        "updateShiftKeyState",
        "getCurrentInputEditorInfo",
        "mCompletionOn",
        "mComposing",
        "length",
        "add",
        "mComposing",
        "toString",
        "setSuggestions",
        "setSuggestions",
        "suggestions",
        "completions",
        "typedWordValid",
        "suggestions",
        "suggestions",
        "size",
        "setCandidatesViewShown",
        "isExtractViewShown",
        "setCandidatesViewShown",
        "mCandidateView",
        "mCandidateView",
        "setSuggestions",
        "suggestions",
        "completions",
        "typedWordValid",
        "length",
        "mComposing",
        "length",
        "length",
        "mComposing",
        "length",
        "length",
        "getCurrentInputConnection",
        "setComposingText",
        "mComposing",
        "updateCandidates",
        "length",
        "mComposing",
        "setLength",
        "getCurrentInputConnection",
        "commitText",
        "updateCandidates",
        "keyDownUp",
        "KeyEvent",
        "KEYCODE_DEL",
        "updateShiftKeyState",
        "getCurrentInputEditorInfo",
        "mInputView",
        "currentKeyboard",
        "mInputView",
        "getKeyboard",
        "mQwertyKeyboard",
        "currentKeyboard",
        "checkToggleCapsLock",
        "mInputView",
        "setShifted",
        "mCapsLock",
        "mInputView",
        "isShifted",
        "currentKeyboard",
        "mSymbolsKeyboard",
        "mSymbolsKeyboard",
        "setShifted",
        "mInputView",
        "setKeyboard",
        "mSymbolsShiftedKeyboard",
        "mSymbolsShiftedKeyboard",
        "setShifted",
        "currentKeyboard",
        "mSymbolsShiftedKeyboard",
        "mSymbolsShiftedKeyboard",
        "setShifted",
        "mInputView",
        "setKeyboard",
        "mSymbolsKeyboard",
        "mSymbolsKeyboard",
        "setShifted",
        "primaryCode",
        "keyCodes",
        "isInputViewShown",
        "mInputView",
        "isShifted",
        "primaryCode",
        "toUpperCase",
        "primaryCode",
        "isAlphabet",
        "primaryCode",
        "mPredictionOn",
        "mComposing",
        "append",
        "primaryCode",
        "getCurrentInputConnection",
        "setComposingText",
        "mComposing",
        "updateShiftKeyState",
        "getCurrentInputEditorInfo",
        "updateCandidates",
        "getCurrentInputConnection",
        "commitText",
        "valueOf",
        "primaryCode",
        "commitTyped",
        "getCurrentInputConnection",
        "requestHideSelf",
        "mInputView",
        "closing",
        "now",
        "currentTimeMillis",
        "mLastShiftTime",
        "now",
        "mCapsLock",
        "mCapsLock",
        "mLastShiftTime",
        "mLastShiftTime",
        "now",
        "mWordSeparators",
        "code",
        "separators",
        "getWordSeparators",
        "separators",
        "contains",
        "valueOf",
        "code",
        "pickSuggestionManually",
        "index",
        "mCompletionOn",
        "mCompletions",
        "index",
        "index",
        "mCompletions",
        "length",
        "ci",
        "mCompletions",
        "index",
        "getCurrentInputConnection",
        "commitCompletion",
        "ci",
        "mCandidateView",
        "mCandidateView",
        "clear",
        "updateShiftKeyState",
        "getCurrentInputEditorInfo",
        "mComposing",
        "length",
        "commitTyped",
        "getCurrentInputConnection",
        "mCompletionOn",
        "pickDefaultCandidate",
        "handleBackspace",
        "handleClose",
        "primaryCode",
        "count",
        "music_play",
        "song_1",
        "count",
        "count",
        "music_play",
        "song_2",
        "count",
        "count",
        "music_play",
        "song_3",
        "count",
        "count",
        "music_play",
        "song_4",
        "count",
        "count",
        "music_play",
        "song_5",
        "count",
        "count",
        "music_play",
        "song_6",
        "count",
        "count",
        "music_play",
        "song_7",
        "count",
        "count",
        "music_play",
        "song_8",
        "count",
        "count",
        "count",
        "primaryCode",
        "song",
        "initial",
        "currentTimeMillis",
        "song",
        "start",
        "initial",
        "currentTimeMillis",
        "song",
        "pause",
        "song",
        "seekTo"
    ],
    "literals": [
        "\"check\"",
        "\"done work \"",
        "\"check\"",
        "\"done work \"",
        "\"Check\"",
        "\"0\"",
        "\"check\"",
        "\"frererg\"",
        "\"\"",
        "\"check\"",
        "\"check\"",
        "\"check\"",
        "\"check\"",
        "\"check\"",
        "\"check\"",
        "\"check\"",
        "\"check\""
    ],
    "variables": [
        "mInputMethodManager",
        "mInputView",
        "mCandidateView",
        "mCompletions",
        "mPredictionOn",
        "mCompletionOn",
        "mLastDisplayWidth",
        "mCapsLock",
        "mLastShiftTime",
        "mMetaState",
        "mSymbolsKeyboard",
        "mSymbolsShiftedKeyboard",
        "mQwertyKeyboard",
        "mCurKeyboard",
        "mWordSeparators",
        "song_1",
        "song_2",
        "song_3",
        "song_4",
        "song_5",
        "song_6",
        "song_7",
        "song_8",
        "count"
    ],
    "comments": [
        "Configuration changes can happen after the keyboard gets recreated,",
        "so we need to be able to re-build the keyboards if the available",
        "space has changed.",
        "Reset our state.  We want to do this even if restarting, because",
        "the underlying state of the text editor could have changed in any way.",
        "Clear shift states.",
        "We are now going to initialize our state based on the type of",
        "text being edited.",
        "Numbers and dates default to the symbols keyboard, with",
        "no extra features.",
        "Phones will also default to the symbols keyboard, though",
        "often you will want to have a dedicated phone keyboard.",
        "This is general text editing.  We will default to the",
        "normal alphabetic keyboard, and assume that we should",
        "be doing predictive text (showing candidates as the",
        "user types).",
        "We now look for a few special variations of text that will",
        "modify our behavior.",
        "Do not display predictions / what the user is typing",
        "when they are entering a password.",
        "Our predictions are not useful for e-mail addresses",
        "or URIs.",
        "If this is an auto-complete text view, then our predictions",
        "will not be shown and instead we will allow the editor",
        "to supply their own.  We only show the editor's",
        "candidates when in fullscreen mode, otherwise relying",
        "own it displaying its own UI.",
        "We also want to look at the current state of the editor",
        "to decide whether our alphabetic keyboard should start out",
        "shifted.",
        "For all unknown input types, default to the alphabetic",
        "keyboard with no special features.",
        "Update the label on the enter key, depending on what the application",
        "says it will do.",
        "Clear current composing text and candidates.",
        "We only hide the candidates window when finishing input on",
        "a particular editor, to avoid popping the underlying application",
        "up and down if the user is entering text into the bottom of",
        "its window.",
        "Apply the selected keyboard to the input view.",
        "If the current selection in the text view changes, we should",
        "clear whatever candidate text we have.",
        "The InputMethodService already takes care of the back",
        "key for us, to dismiss the input method if it is shown.",
        "However, our keyboard could be showing a pop-up window",
        "that back should dismiss, so we first allow it to do that.",
        "Special handling of the delete key: if we currently are",
        "composing text for the user, we want to modify that instead",
        "of let the application to the delete itself.",
        "Let the underlying text editor always handle these.",
        "Let the underlying text editor always handle these.",
        "For all other keys, if we want to do transformations on",
        "text being entered with a hard keyboard, we need to process",
        "it and do the appropriate action.",
        "A silly example: in our input method, Alt+Space",
        "is a shortcut for 'android' in lower case.",
        "First, tell the editor that it is no longer in the",
        "shift state, since we are consuming this.",
        "And we consume this event.",
        "If we want to do transformations on text being entered with a hard",
        "keyboard, we need to process the up events to update the meta key",
        "state we are tracking.",
        "Implementation of KeyboardViewListener",
        "Handle separator",
        "Show a menu or somethin'",
        "Alphabet keyboard",
        "If we were generating candidate suggestions for the current",
        "text, we would commit one of them here.  But for this sample,",
        "we will just commit the current text.",
        "",
        "System.out.println (\"check\") ;",
        "System.out.println(\"check\"+System.currentTimeMillis() ) ;"
    ],
    "docstrings": [
        "* Copyright (C) 2008-2009 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* Date: 4/6/7 \n * Author: MAYANK NEVE \n * Writing an input method for a soft keyboard.  This code is\n * focused on simplicity over completeness, so it should in no way be considered\n * to be a complete soft keyboard implementation.  Its purpose is to provide\n * a basic example for how you would get started writing an input method, to\n * be fleshed out as appropriate.",
        "* This boolean indicates the optional example code for performing\n     * processing of hard keys in addition to regular text generation\n     * from on-screen interaction.  It would be used for input methods that\n     * perform language translations (such as converting text entered on \n     * a QWERTY keyboard to Chinese), but may not be used for input methods\n     * that are primarily intended to be used for on-screen text entry.",
        "* Main initialization of the input method component.  Be sure to call\n     * to super class.",
        "* This is the point where you can do all of your UI initialization.  It\n     * is called after creation and any configuration change.",
        "* Called by the framework when your view for creating input needs to\n     * be generated.  This will be called the first time your input method\n     * is displayed, and every time it needs to be re-created such as due to\n     * a configuration change.",
        "* Called by the framework when your view for showing candidates needs to\n     * be generated, like {@link #onCreateInputView}.",
        "* This is the main point where we do our initialization of the input method\n     * to begin operating on an application.  At this point we have been\n     * bound to the client, and are now receiving all of the detailed information\n     * about the target of our edits.",
        "* This is called when the user is done editing a field.  We can use\n     * this to reset our state.",
        "* Deal with the editor reporting movement of its cursor.",
        "* This tells us about completions that the editor has determined based\n     * on the current text in it.  We want to use this in fullscreen mode\n     * to show the completions ourself, since the editor can not be seen\n     * in that situation.",
        "* This translates incoming hard key events in to edit operations on an\n     * InputConnection.  It is only needed when using the\n     * PROCESS_HARD_KEYS option.",
        "* Use this to monitor key events being delivered to the application.\n     * We get first crack at them, and can either resume them or let them\n     * continue to the app.",
        "* Use this to monitor key events being delivered to the application.\n     * We get first crack at them, and can either resume them or let them\n     * continue to the app.",
        "* Helper function to commit any text being composed in to the editor.",
        "* Helper to update the shift state of our keyboard based on the initial\n     * editor state.",
        "* Helper to determine if a given character code is alphabetic.",
        "* Helper to send a key down / key up pair to the current editor.",
        "* Helper to send a character to the editor as raw key events.",
        "* Update the list of available candidates from the current composing\n     * text.  This will need to be filled in by however you are determining\n     * candidates.",
        "long initial = System.currentTimeMillis() ; \n    \t\n    \t\n    \tsong_1.start() ; \n    \t\n    \t\n    \t\n    \t\n    \twhile (true)\n    \t{\n    \t\tSystem.out.println(\"check\"+System.currentTimeMillis() ) ;\n    \t\tif ((initial + 200 ) < System.currentTimeMillis() )\n    \t\t{\n    \t\t\t song_1.pause() ; \n    \t\t\tbreak ; \n    \t\t}\n    \t}\n         \n/*\n         \n    \t if (song.isPlaying())\n         {\n    \t\t song.pause();  \n    \t\t song.start() ; \n         }\n    \t else \n    \t {\n    \t\t song.start() ; \n         }"
    ],
    "functions": [
        "onCreate",
        "onInitializeInterface",
        "View",
        "onCreateInputView",
        "View",
        "onCreateCandidatesView",
        "onStartInput",
        "onFinishInput",
        "onStartInputView",
        "onCurrentInputMethodSubtypeChanged",
        "onUpdateSelection",
        "onDisplayCompletions",
        "translateKeyDown",
        "onKeyDown",
        "onKeyUp",
        "commitTyped",
        "updateShiftKeyState",
        "isAlphabet",
        "keyDownUp",
        "sendKey",
        "onKey",
        "onText",
        "updateCandidates",
        "setSuggestions",
        "handleBackspace",
        "handleShift",
        "handleCharacter",
        "handleClose",
        "checkToggleCapsLock",
        "getWordSeparators",
        "isWordSeparator",
        "pickDefaultCandidate",
        "pickSuggestionManually",
        "swipeRight",
        "swipeLeft",
        "swipeDown",
        "swipeUp",
        "onPress",
        "onRelease",
        "music_play"
    ],
    "classes": [
        "SoftKeyboard"
    ]
}