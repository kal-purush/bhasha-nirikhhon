{
    "identifiers": [
        "callback",
        "args",
        "thisArg",
        "callback",
        "args",
        "thisArg",
        "args",
        "proto",
        "name",
        "proto",
        "name",
        "Signal",
        "token",
        "currentEmitter",
        "obj",
        "emitterMap",
        "obj",
        "conn",
        "removeFromEmittersList",
        "conn",
        "conn",
        "conn",
        "conn",
        "conn",
        "emitterMap",
        "obj",
        "obj",
        "receiverMap",
        "obj",
        "conn",
        "conn",
        "conn",
        "conn",
        "conn",
        "conn",
        "conn",
        "conn",
        "next",
        "receiverMap",
        "obj",
        "obj",
        "disconnectEmitter",
        "obj",
        "disconnectReceiver",
        "obj",
        "owner",
        "token",
        "owner",
        "token",
        "callback",
        "args",
        "thisArg",
        "connect",
        "callback",
        "thisArg",
        "callback",
        "args",
        "thisArg",
        "disconnect",
        "callback",
        "thisArg",
        "args",
        "emit",
        "args",
        "owner",
        "token",
        "callback",
        "thisArg",
        "thisArg",
        "thisArg",
        "emitterMap",
        "owner",
        "findConnection",
        "token",
        "callback",
        "thisArg",
        "Connection",
        "conn",
        "token",
        "conn",
        "callback",
        "conn",
        "thisArg",
        "ConnectionList",
        "conn",
        "conn",
        "emitterMap",
        "owner",
        "conn",
        "conn",
        "thisArg",
        "callback",
        "receiverMap",
        "receiver",
        "head",
        "head",
        "conn",
        "conn",
        "head",
        "receiverMap",
        "receiver",
        "conn",
        "owner",
        "token",
        "callback",
        "thisArg",
        "thisArg",
        "thisArg",
        "emitterMap",
        "owner",
        "findConnection",
        "token",
        "callback",
        "thisArg",
        "conn",
        "removeFromEmittersList",
        "conn",
        "conn",
        "conn",
        "owner",
        "token",
        "args",
        "emitterMap",
        "owner",
        "currentEmitter",
        "owner",
        "invokeList",
        "token",
        "args",
        "currentEmitter",
        "prev",
        "dirty",
        "cleanList",
        "token",
        "callback",
        "thisArg",
        "conn",
        "conn",
        "token",
        "conn",
        "callback",
        "conn",
        "thisArg",
        "conn",
        "conn",
        "conn",
        "token",
        "args",
        "conn",
        "conn",
        "conn",
        "token",
        "conn",
        "conn",
        "args",
        "conn",
        "dirty",
        "conn",
        "last",
        "conn",
        "conn",
        "dirty",
        "conn",
        "conn",
        "conn",
        "conn",
        "prev",
        "conn",
        "prev",
        "conn",
        "prev",
        "conn",
        "prev",
        "conn",
        "conn",
        "next",
        "prev",
        "prev",
        "prev",
        "conn",
        "conn",
        "conn",
        "conn",
        "conn",
        "prev",
        "next",
        "receiverMap",
        "receiver",
        "prev",
        "receiverMap",
        "receiver",
        "next",
        "next",
        "next",
        "prev",
        "prev",
        "next",
        "next",
        "prev",
        "conn",
        "conn"
    ],
    "literals": [
        "string"
    ],
    "variables": [
        "token",
        "conn",
        "conn",
        "next",
        "emitterMap",
        "receiverMap",
        "currentEmitter",
        "conn",
        "receiver",
        "head",
        "conn",
        "prev",
        "currentEmitter",
        "dirty",
        "conn",
        "dirty",
        "last",
        "conn",
        "prev",
        "conn",
        "next",
        "receiver",
        "prev",
        "next"
    ],
    "comments": [
        "-----------------------------------------------------------------------------\n| Copyright (c) 2014-2015, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------",
        "Coerce a `null` thisArg to `undefined`.",
        "Search for an equivalent connection and bail if one is found.",
        "Create a new connection.",
        "Add the connection to the receivers list.",
        "Add the connection to the emitters list.",
        "Coerce a `null` thisArg to `undefined`.",
        "Bail early if there is no equivalent connection.",
        "Remove the connection from the emitters list. It will be removed",
        "from the receivers list the next time the signal is emitted.",
        "Clear the connection data so it becomes a dead connection."
    ],
    "docstrings": [
        "* An object used for type-safe inter-object communication.\n *\n * #### Notes\n * User code will not create a signal object directly, instead one will\n * be returned when accessing the property defined by the `@signal`\n * decorator.\n *\n * When defining a signal from plain JS (where decorators may not be\n * supported), the `signal` function can be invoked directly with the\n * class prototype and signal name.\n *\n * #### Example\n * ```typescript\n * class SomeClass {\n *\n *   @signal\n *   valueChanged: ISignal<number>;\n *\n * }\n *\n * // ES5 alternative signal definition\n * signal(SomeClass.prototype, 'valueChanged');\n * ```",
        "* Connect a callback to the signal.\n   *\n   * @param callback - The function to invoke when the signal is\n   *   emitted. The args object emitted with the signal is passed\n   *   as the first and only argument to the function.\n   *\n   * @param thisArg - The object to use as the `this` context in the\n   *   callback. If provided, this must be a non-primitive object.\n   *\n   * @returns `true` if the connection succeeds, `false` otherwise.\n   *\n   * #### Notes\n   * Connected callbacks are invoked synchronously, in the order in\n   * which they are connected.\n   *\n   * Signal connections are unique. If a connection already exists for\n   * the given `callback` and `thisArg`, this function returns `false`.\n   *\n   * A newly connected callback will not be invoked until the next time\n   * the signal is emitted, even if it is connected while the signal is\n   * being emitted.\n   *\n   * #### Example\n   * ```typescript\n   * // connect a method\n   * someObject.valueChanged.connect(myObject.onValueChanged, myObject);\n   *\n   * // connect a plain function\n   * someObject.valueChanged.connect(myCallback);\n   * ```",
        "* Disconnect a callback from the signal.\n   *\n   * @param callback - The callback connected to the signal.\n   *\n   * @param thisArg - The `this` context for the callback.\n   *\n   * @returns `true` if the connection is broken, `false` otherwise.\n   *\n   * #### Notes\n   * A disconnected callback will no longer be invoked, even if it\n   * is disconnected while the signal is being emitted.\n   *\n   * If no connection exists for the given `callback` and `thisArg`,\n   * this function returns `false`.\n   *\n   * #### Example\n   * ```typescript\n   * // disconnect a method\n   * someObject.valueChanged.disconnect(myObject.onValueChanged, myObject);\n   *\n   * // disconnect a plain function\n   * someObject.valueChanged.disconnect(myCallback);\n   * ```",
        "* Emit the signal and invoke the connected callbacks.\n   *\n   * @param args - The args object to pass to the callbacks.\n   *\n   * #### Notes\n   * If a connected callback throws an exception, dispatching of the\n   * signal will terminate immediately and the exception will be\n   * propagated to the call site of this function.\n   *\n   * #### Example\n   * ```typescript\n   * someObject.valueChanged.emit(42);\n   * ```",
        "* A decorator which defines a signal for an object.\n *\n * @param proto - The object prototype on which to define the signal.\n *\n * @param name - The name of the signal to define.\n *\n * #### Notes\n * When defining a signal from plain JS (where decorators may not be\n * supported), this function can be invoked directly with the class\n * prototype and signal name.\n *\n * #### Example\n * ```typescript\n * class SomeClass {\n *\n *   @signal\n *   valueChanged: ISignal<number>;\n *\n * }\n *\n * // ES5 alternative signal definition\n * signal(SomeClass.prototype, 'valueChanged');\n * ```",
        "* Get the object which is emitting the curent signal.\n *\n * @returns The object emitting the current signal, or `null` if a\n *   signal is not currently being emitted.\n *\n * #### Example\n * ```typescript\n * someObject.valueChanged.connect(myCallback);\n *\n * someObject.valueChanged.emit(42);\n *\n * function myCallback(value: number): void {\n *   console.log(emitter() === someObject); // true\n * }\n * ```",
        "* Remove all connections where the given object is the emitter.\n *\n * @param obj - The emitter object of interest.\n *\n * #### Example\n * ```typescript\n * disconnectEmitter(someObject);\n * ```",
        "* Remove all connections where the given object is the receiver.\n *\n * @param obj - The receiver object of interest.\n *\n * #### Notes\n * If a `thisArg` is provided when connecting a signal, that object\n * is considered the receiver. Otherwise, the `callback` is used as\n * the receiver.\n *\n * #### Example\n * ```typescript\n * // disconnect a regular object receiver\n * disconnectReceiver(myObject);\n *\n * // disconnect a plain callback receiver\n * disconnectReceiver(myCallback);\n * ```",
        "* Clear all signal data associated with the given object.\n *\n * @param obj - The object for which the signal data should be cleared.\n *\n * #### Notes\n * This removes all signal connections where the object is used as\n * either the emitter or the receiver.\n *\n * #### Example\n * ```typescript\n * clearSignalData(someObject);\n * ```",
        "* A concrete implementation of ISignal.",
        "* Construct a new signal.",
        "* Connect a callback to the signal.",
        "* Disconnect a callback from the signal.",
        "* Emit the signal and invoke the connected callbacks.",
        "* A struct which holds connection data.",
        "* The token which identifies the signal.",
        "* The callback connected to the signal.",
        "* The `this` context for the callback.",
        "* The next connection in the singly linked receivers list.",
        "* The next connection in the doubly linked emitters list.",
        "* The previous connection in the doubly linked emitters list.",
        "* The list of receiver connections for a specific emitter.",
        "* The ref count for the list.",
        "* The first connection in the list.",
        "* The last connection in the list.",
        "* A mapping of emitter object to its receiver connection list.",
        "* A mapping of receiver object to its emitter connection list.",
        "* The object emitting the current signal.",
        "* Connect a signal to a callback.",
        "* Disconnect a signal from a callback.",
        "* Emit a signal and invoke the connected callbacks.",
        "* Find a matching connection in the given connection list, or null.",
        "* Invoke the matching callbacks in the given connection list.\n *\n * Connections added during dispatch will not be invoked. This returns\n * `true` if there are dead connections in the list, `false` otherwise.",
        "* Remove the dead connections from the given connection list.",
        "* Remove a connection from the doubly linked list of senders."
    ],
    "functions": [
        "signal",
        "emitter",
        "disconnectEmitter",
        "disconnectReceiver",
        "clearSignalData",
        "connect",
        "disconnect",
        "emit",
        "connect",
        "disconnect",
        "emit",
        "findConnection",
        "invokeList",
        "cleanList",
        "removeFromEmittersList"
    ],
    "classes": [
        "Signal",
        "Connection",
        "ConnectionList"
    ]
}