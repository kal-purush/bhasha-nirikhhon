{
    "identifiers": [
        "sys",
        "os",
        "portable_popen",
        "time",
        "os",
        "remove",
        "program_name",
        "OSError",
        "open",
        "program_name",
        "noop_prog",
        "close",
        "portable_popen",
        "Popen",
        "sys",
        "executable",
        "program_name",
        "logfile_prefix",
        "time",
        "sleep",
        "filename",
        "os",
        "listdir",
        "filename",
        "startswith",
        "logfile_prefix",
        "filename",
        "filename",
        "program_name",
        "logfile_prefix",
        "logfile_prefix",
        "os",
        "remove",
        "filename",
        "OSError"
    ],
    "literals": [
        "\"noop_program_for_repy_callarg_test.r2py\"",
        "\"w\"",
        "\"REPY_CALLARG_TEST\"",
        "\"repy.py\"",
        "\"restrictions.default\"",
        "\"--logfile\"",
        "\".\"",
        "\"Found file\"",
        "\"which indicates that repy.py consumed \"",
        "\"the argument meant for the sandboxed program. Bad.\"",
        "\".old\"",
        "\".new\""
    ],
    "variables": [
        "program_name",
        "noop_prog",
        "logfile_prefix",
        "repy_process"
    ],
    "comments": [
        "Create an empty RepyV2 program. Remove any previous file of this name first.",
        "The file wasn't there. No problem.",
        "Call Repy. If repy.py mistakingly consumes the --logfile arg, it",
        "will create a file named logfile_prefix + \".old\" (or .new if .old",
        "already existed).",
        "Give things time to settle (launching of subprocess, code safety check, etc.)",
        "See if the logfile was created.",
        "Finally, remove any files we might created"
    ],
    "docstrings": [
        "\"\"\"\nVerify that the Repy sandbox parses command-line arguments correctly.\nFor example,\n  python repy.py restrictionsfile my_program.r2py --logfile ABCDEF\n\nmust *not* result in the sandbox consuming the ``--logfile'' arg and \nwriting the vessel log to the named file. Instead, the sandboxed \nprogram should see the arg.\n\nWe test this by calling repy.py with arguments similar to the above, \nand a no-op (empty) RepyV2 program. \nIf repy.py creates the named logfile, this is an error. If the file is \nnot created, we take this to mean that the sandboxed program gets the \nargument (althoug we don't check this specifically).\n\nNote: This test overwrites / removes files from the current working dir. \nThe chosen `program_name` and `logfile_prefix` should be unlikely to \nclash with anything you created, but you have been warned.\n\"\"\""
    ],
    "functions": [],
    "classes": []
}