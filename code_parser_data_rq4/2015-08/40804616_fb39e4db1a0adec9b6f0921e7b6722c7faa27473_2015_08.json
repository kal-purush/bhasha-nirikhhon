{
    "identifiers": [
        "pandas",
        "DataFrame",
        "sys",
        "stderr",
        "name",
        "table",
        "metadata",
        "columns",
        "isinstance",
        "table",
        "DataFrame",
        "ValueError",
        "table",
        "isinstance",
        "columns",
        "DataFrame",
        "ValueError",
        "columns",
        "isinstance",
        "metadata",
        "ValueError",
        "metadata",
        "name",
        "table",
        "metadata",
        "columns",
        "columns",
        "index",
        "tolist",
        "table",
        "columns",
        "tolist",
        "DataIncompatibilityException",
        "name",
        "metadata",
        "BaseGEO",
        "name",
        "table",
        "metadata",
        "columns",
        "BaseGEO",
        "name",
        "name",
        "table",
        "table",
        "metadata",
        "metadata",
        "columns",
        "columns",
        "gpl",
        "expression_column",
        "group_by_column",
        "rename",
        "force",
        "merge_on_column",
        "gsm_on",
        "gpl_on",
        "gpl",
        "name",
        "metadata",
        "force",
        "KeyError",
        "gpl",
        "name",
        "metadata",
        "merge_on_column",
        "gpl_on",
        "gsm_on",
        "merge_on_column",
        "stderr",
        "write",
        "table",
        "merge",
        "gpl",
        "table",
        "on",
        "merge_on_column",
        "how",
        "tmp_data",
        "groupby",
        "group_by_column",
        "mean",
        "expression_column",
        "gpl_on",
        "gsm_on",
        "table",
        "merge",
        "gpl",
        "table",
        "left_on",
        "gsm_on",
        "right_on",
        "gpl_on",
        "how",
        "tmp_data",
        "groupby",
        "group_by_column",
        "mean",
        "expression_column",
        "rename",
        "name",
        "tmp_data",
        "BaseGEO",
        "name",
        "table",
        "metadata",
        "columns",
        "BaseGEO",
        "name",
        "name",
        "table",
        "table",
        "metadata",
        "metadata",
        "columns",
        "columns",
        "BaseGEO",
        "name",
        "table",
        "metadata",
        "columns",
        "BaseGEO",
        "name",
        "name",
        "table",
        "table",
        "metadata",
        "metadata",
        "columns",
        "columns",
        "name",
        "metadata",
        "gpls",
        "gsms",
        "isinstance",
        "metadata",
        "ValueError",
        "metadata",
        "isinstance",
        "gpls",
        "ValueError",
        "gpls",
        "isinstance",
        "gsms",
        "ValueError",
        "gsms",
        "gsm_name",
        "gsm",
        "gsms",
        "iteritems",
        "isinstance",
        "gsm",
        "GSM",
        "gpl_name",
        "gpl",
        "gpls",
        "iteritems",
        "isinstance",
        "gpl",
        "GPL",
        "name",
        "metadata",
        "gpls",
        "gsms",
        "metadata",
        "platform",
        "expression_column",
        "group_by_column",
        "force",
        "merge_on_column",
        "gsm_on",
        "gpl_on",
        "isinstance",
        "platform",
        "gpls",
        "platform",
        "isinstance",
        "platform",
        "GPL",
        "platform",
        "ValueError",
        "gsm",
        "gsms",
        "values",
        "gpl",
        "name",
        "gsm",
        "metadata",
        "data",
        "append",
        "gsm",
        "annotate_and_average",
        "gpl",
        "gpl",
        "merge_on_column",
        "merge_on_column",
        "expression_column",
        "expression_column",
        "group_by_column",
        "group_by_column",
        "force",
        "force",
        "gpl_on",
        "gpl_on",
        "gsm_on",
        "gsm_on",
        "len",
        "data",
        "stderr",
        "write",
        "len",
        "data",
        "data",
        "data",
        "join",
        "data"
    ],
    "literals": [
        "\"Table data should be an instance of pandas.DataFrame not %s\"",
        "\"Columns description should be an instance of pandas.DataFrame not %s\"",
        "\"Metadata should be a dictionary not a %s\"",
        "\"Data columns do not match columns description index in %s\"",
        "\"geo_accession\"",
        "\"SAMPLE\"",
        "'platform_id'",
        "\"Platforms from GSM (%s) and from GPL (%s)\"",
        "'platform_id'",
        "\" are incompatible. Use force=True to use this GPL.\"",
        "\"You have to provide one of the two: merge_on_column or gpl_on and gsm_on parameters\"",
        "\"merge_on_column is not None. Using this option.\\n\"",
        "'outer'",
        "\"Please provide both gpl_on and gsm_on or provide merge_on_column only\"",
        "'outer'",
        "\"PLATFORM\"",
        "\"DATASET\"",
        "\"Metadata should be a dictionary not a %s\"",
        "\"GPLs should be a dictionary not a %s\"",
        "\"GSMs should be a dictionary not a %s\"",
        "\"All GSMs should be of type GSM\"",
        "\"All GPLs should be of type GPL\"",
        "\"geo_accession\"",
        "\"Platform has to be of type GPL or string with key for platform in GSE\"",
        "'platform_id'",
        "\"No samples for the platform were found\\n\""
    ],
    "variables": [
        "name",
        "table",
        "metadata",
        "columns",
        "geotype",
        "tmp_data",
        "tmp_data",
        "tmp_data",
        "tmp_data",
        "tmp_data",
        "columns",
        "geotype",
        "geotype",
        "name",
        "metadata",
        "gpls",
        "gsms",
        "gpl",
        "gpl",
        "data"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\nClasses that represent different GEO entities\n\"\"\"",
        "\"\"\"base GEO object\n\n        :param name: str -- name of the object\n        :param table: pandas.DataFrame -- table with the data from SOFT file\n        :param metadata: dict -- metadata information\n        :param columns: pandas.DataFrame -- description of the columns, number of columns, order, and names\n        represented as index in this DataFrame has to be the same as table.columns.\n\n        \"\"\"",
        "\"\"\"Return accession ID of the sample\n        :returns: str\n\n        \"\"\"",
        "\"\"\"Class that represents sample from GEO database\"\"\"",
        "\"\"\"Initialize GSM sample\n\n        :param name: str -- name of the object\n        :param table: pandas.DataFrame -- table with the data from SOFT file\n        :param metadata: dict -- metadata information\n        :param columns: pandas.DataFrame -- description of the columns, number of columns, order, and names\n        represented as index in this DataFrame has to be the same as table.columns.\n        \"\"\"",
        "\"\"\"Annotate GSM table with provided GPL\n\n        :param gpl: GPL object -- platform for annotations\n        :param expression_column: str -- column name in which \"expressions\" are represented\n        :param group_by_column: str -- the data will be grouped and averaged over this column and only this column will be kept\n        :param rename: bool -- rename output column to the self.name\n        :param force: bool -- if the name of the GPL does not match the platform name in GSM proceed anyway\n        :param merge_on_column: str -- column to merge the data on - should be present in both GSM and GPL\n        :param gsm_on: str -- in the case columns to merge are different in GSM and GPL use this column in GSM\n        :param gpl_on: str -- in the case columns to merge are different in GSM and GPL use this column in GPL\n        :returns: pandas.DataFrame\n\n        \"\"\"",
        "\"\"\"Class that represents platform from GEO database\"\"\"",
        "\"\"\"Initialize GPL\n\n        :param name: str -- name of the object\n        :param table: pandas.DataFrame -- table with the data from SOFT file\n        :param metadata: dict -- metadata information\n        :param columns: pandas.DataFrame -- description of the columns, number of columns, order, and names\n        represented as index in this DataFrame has to be the same as table.columns.\n        \"\"\"",
        "\"\"\"Class that represents a dataset from GEO database\"\"\"",
        "\"\"\"Initialize GDS\n\n        :param name: str -- name of the object\n        :param table: pandas.DataFrame -- table with the data from SOFT file\n        :param metadata: dict -- metadata information\n        :param columns: pandas.DataFrame -- description of the columns, number of columns, order, and names\n        represented as index in this DataFrame has to be the same as table.columns.\n        \"\"\"",
        "\"\"\"Class representing GEO series\"\"\"",
        "\"\"\"Initialize GSE\n\n        :param name: str -- name of the object\n        :param metadata: dict -- metadata information\n        :param gpls: list -- list of GPL objects\n        :param gsms: list -- list of GSM objects\n\n        \"\"\"",
        "\"\"\"Return accession ID of the sample\n        :returns: str\n\n        \"\"\"",
        "\"\"\"For given platform prepare the DataFrame with all the samples present in the GSE\n        annotated with given column from platform and averaged over this column.\n\n        :param platform: str or GPL -- GPL platform to use\n        :param expression_column: str -- column name in which \"expressions\" are represented\n        :param group_by_column: str -- the data will be grouped and averaged over this column and only this column will be kept\n        :param force: bool -- if the name of the GPL does not match the platform name in GSM proceed anyway\n        :param merge_on_column: str -- column to merge the data on - should be present in both GSM and GPL\n        :param gsm_on: str -- in the case columns to merge are different in GSM and GPL use this column in GSM\n        :param gpl_on: str -- in the case columns to merge are different in GSM and GPL use this column in GPL\n        :returns: pandas.DataFrame\n\n        \"\"\""
    ],
    "functions": [
        "get_accession",
        "annotate_and_average",
        "get_accession",
        "merge_and_average"
    ],
    "classes": [
        "DataIncompatibilityException",
        "BaseGEO",
        "GSM",
        "GPL",
        "GDS",
        "GSE"
    ]
}