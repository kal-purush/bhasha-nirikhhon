{
    "identifiers": [
        "com",
        "informatica",
        "edc",
        "custom",
        "java",
        "io",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "FileWriter",
        "java",
        "io",
        "java",
        "nio",
        "file",
        "Files",
        "java",
        "nio",
        "file",
        "LinkOption",
        "java",
        "nio",
        "file",
        "Paths",
        "java",
        "sql",
        "Connection",
        "java",
        "sql",
        "DatabaseMetaData",
        "java",
        "sql",
        "DriverManager",
        "java",
        "sql",
        "ResultSet",
        "java",
        "sql",
        "Statement",
        "java",
        "util",
        "java",
        "util",
        "Arrays",
        "java",
        "util",
        "java",
        "util",
        "Properties",
        "javax",
        "swing",
        "JOptionPane",
        "javax",
        "swing",
        "JPasswordField",
        "com",
        "opencsv",
        "CSVWriter",
        "version",
        "jdbcDriver",
        "jdbcUrl",
        "userId",
        "passwd",
        "schemaIncludeFilters",
        "schemaExcludeFilters",
        "tableIncludeFilters",
        "tableExcludeFilters",
        "otherObjectCsvName",
        "tabCsvName",
        "columnCsvName",
        "linksCsvName",
        "otherObjWriter",
        "tableWriter",
        "columnWriter",
        "linksWriter",
        "dbType",
        "schType",
        "tabType",
        "colType",
        "vewType",
        "vewColType",
        "propertyFile",
        "getClass",
        "getSimpleName",
        "version",
        "propertyFile",
        "file",
        "propertyFile",
        "fileInput",
        "file",
        "prop",
        "prop",
        "prop",
        "load",
        "fileInput",
        "fileInput",
        "close",
        "jdbcDriver",
        "prop",
        "getProperty",
        "jdbcUrl",
        "prop",
        "getProperty",
        "userId",
        "prop",
        "getProperty",
        "passwd",
        "prop",
        "getProperty",
        "passwd",
        "equals",
        "passwd",
        "equals",
        "userId",
        "passwd",
        "getPassword",
        "passwd",
        "length",
        "jdbcDriver",
        "jdbcUrl",
        "userId",
        "passwd",
        "filterText",
        "prop",
        "getProperty",
        "filterText",
        "filterText",
        "length",
        "schemaIncludeFilters",
        "Arrays",
        "asList",
        "filterText",
        "split",
        "schemaIncludeFilters",
        "size",
        "schemaIncludeFilters",
        "toString",
        "filterText",
        "prop",
        "getProperty",
        "filterText",
        "filterText",
        "length",
        "schemaExcludeFilters",
        "Arrays",
        "asList",
        "filterText",
        "split",
        "schemaExcludeFilters",
        "size",
        "schemaExcludeFilters",
        "toString",
        "filterText",
        "prop",
        "getProperty",
        "filterText",
        "filterText",
        "length",
        "tableIncludeFilters",
        "Arrays",
        "asList",
        "filterText",
        "split",
        "tableIncludeFilters",
        "size",
        "tableIncludeFilters",
        "toString",
        "filterText",
        "prop",
        "getProperty",
        "filterText",
        "filterText",
        "length",
        "tableExcludeFilters",
        "Arrays",
        "asList",
        "filterText",
        "split",
        "tableExcludeFilters",
        "size",
        "tableExcludeFilters",
        "toString",
        "e",
        "propertyFile",
        "e",
        "printStackTrace",
        "initFiles",
        "jdbcDriver",
        "Class",
        "forName",
        "jdbcDriver",
        "jdbcUrl",
        "con",
        "DriverManager",
        "getConnection",
        "jdbcUrl",
        "userId",
        "passwd",
        "dbMetaData",
        "con",
        "getMetaData",
        "catalog",
        "stmntSchems",
        "con",
        "createStatement",
        "schemaName",
        "tableName",
        "catalogs",
        "dbMetaData",
        "getCatalogs",
        "catalogs",
        "next",
        "catalog",
        "catalogs",
        "getString",
        "catalog",
        "createDatabase",
        "catalog",
        "schemas",
        "stmntSchems",
        "executeQuery",
        "schemas",
        "next",
        "schemaName",
        "schemas",
        "getString",
        "schemaName",
        "isObjectIncluded",
        "schemaName",
        "schemaIncludeFilters",
        "schemaExcludeFilters",
        "schemaName",
        "createSchema",
        "catalog",
        "schemaName",
        "schemaName",
        "viewRs",
        "con",
        "createStatement",
        "executeQuery",
        "schemaName",
        "views",
        "viewRs",
        "next",
        "views",
        "add",
        "viewRs",
        "getString",
        "views",
        "toString",
        "schemaName",
        "tables",
        "con",
        "createStatement",
        "executeQuery",
        "schemaName",
        "tables",
        "next",
        "tableName",
        "tables",
        "getString",
        "tableName",
        "isObjectIncluded",
        "tableName",
        "tableIncludeFilters",
        "tableExcludeFilters",
        "tableName",
        "isTable",
        "tabSQL",
        "viewBuf",
        "views",
        "contains",
        "tableName",
        "isTable",
        "tableName",
        "tabSQL",
        "con",
        "createStatement",
        "executeQuery",
        "schemaName",
        "tableName",
        "tabSQL",
        "next",
        "viewBuf",
        "append",
        "tabSQL",
        "getString",
        "tabSQL",
        "con",
        "createStatement",
        "executeQuery",
        "schemaName",
        "tableName",
        "tabSQL",
        "next",
        "viewBuf",
        "append",
        "tabSQL",
        "getString",
        "viewBuf",
        "toString",
        "isTable",
        "createTable",
        "catalog",
        "schemaName",
        "tableName",
        "viewBuf",
        "toString",
        "createTable",
        "catalog",
        "schemaName",
        "tableName",
        "viewBuf",
        "toString",
        "columns",
        "dbMetaData",
        "getColumns",
        "catalog",
        "schemaName",
        "tableName",
        "columns",
        "next",
        "columnName",
        "columns",
        "getString",
        "datatype",
        "columns",
        "getString",
        "typeName",
        "columns",
        "getString",
        "columnsize",
        "columns",
        "getString",
        "decimaldigits",
        "columns",
        "getString",
        "isNullable",
        "columns",
        "getString",
        "remarks",
        "columns",
        "getString",
        "columns",
        "getString",
        "sqlType",
        "columns",
        "getString",
        "pos",
        "columns",
        "getString",
        "scTable",
        "columns",
        "getString",
        "scCatlg",
        "columns",
        "getString",
        "isTable",
        "createColumn",
        "catalog",
        "schemaName",
        "tableName",
        "columnName",
        "typeName",
        "columnsize",
        "pos",
        "createColumn",
        "catalog",
        "schemaName",
        "tableName",
        "columnName",
        "typeName",
        "columnsize",
        "pos",
        "columnName",
        "typeName",
        "columnsize",
        "decimaldigits",
        "isNullable",
        "remarks",
        "sqlType",
        "pos",
        "scTable",
        "scCatlg",
        "con",
        "close",
        "cne",
        "jdbcDriver",
        "cne",
        "getClass",
        "getName",
        "e",
        "e",
        "e",
        "printStackTrace",
        "closeFiles",
        "objectName",
        "includedRegexes",
        "excludedRegexes",
        "objectName",
        "processSchema",
        "excludedRegexes",
        "size",
        "excludedRegexes",
        "objectName",
        "matches",
        "objectName",
        "processSchema",
        "includedRegexes",
        "size",
        "processSchema",
        "includedRegexes",
        "objectName",
        "matches",
        "processSchema",
        "objectName",
        "processSchema",
        "processSchema",
        "initialized",
        "otherObjWriter",
        "otherObjectCsvName",
        "tableWriter",
        "tabCsvName",
        "columnWriter",
        "columnCsvName",
        "CSVWriter",
        "NO_QUOTE_CHARACTER",
        "linksWriter",
        "linksCsvName",
        "CSVWriter",
        "NO_QUOTE_CHARACTER",
        "otherObjWriter",
        "writeNext",
        "tableWriter",
        "writeNext",
        "columnWriter",
        "writeNext",
        "linksWriter",
        "writeNext",
        "e1",
        "initialized",
        "e1",
        "printStackTrace",
        "initialized",
        "otherObjWriter",
        "close",
        "tableWriter",
        "close",
        "columnWriter",
        "close",
        "linksWriter",
        "close",
        "e",
        "e",
        "printStackTrace",
        "dbName",
        "dbName",
        "otherObjWriter",
        "writeNext",
        "dbType",
        "dbName",
        "dbName",
        "linksWriter",
        "writeNext",
        "dbName",
        "ex",
        "ex",
        "printStackTrace",
        "dbName",
        "schema",
        "schId",
        "dbName",
        "schema",
        "otherObjWriter",
        "writeNext",
        "schType",
        "schId",
        "schema",
        "linksWriter",
        "writeNext",
        "dbName",
        "schId",
        "ex",
        "ex",
        "printStackTrace",
        "dbName",
        "schema",
        "table",
        "ddl",
        "schId",
        "dbName",
        "schema",
        "tabId",
        "schId",
        "table",
        "tableWriter",
        "writeNext",
        "tabType",
        "tabId",
        "table",
        "ddl",
        "linksWriter",
        "writeNext",
        "schId",
        "tabId",
        "tableWriter",
        "writeNext",
        "vewType",
        "tabId",
        "table",
        "ddl",
        "linksWriter",
        "writeNext",
        "schId",
        "tabId",
        "ex",
        "ex",
        "printStackTrace",
        "dbName",
        "schema",
        "table",
        "tableType",
        "column",
        "length",
        "pos",
        "schId",
        "dbName",
        "schema",
        "tabId",
        "schId",
        "table",
        "colId",
        "tabId",
        "column",
        "tableType",
        "columnWriter",
        "writeNext",
        "colType",
        "colId",
        "column",
        "length",
        "pos",
        "tabId",
        "linksWriter",
        "writeNext",
        "tabId",
        "colId",
        "columnWriter",
        "writeNext",
        "vewColType",
        "colId",
        "column",
        "length",
        "pos",
        "tabId",
        "linksWriter",
        "writeNext",
        "tabId",
        "colId",
        "ex",
        "ex",
        "printStackTrace",
        "args",
        "scanner",
        "args",
        "length",
        "scanner",
        "args",
        "currentTimeMillis",
        "scanner",
        "args",
        "scanner",
        "run",
        "password",
        "c",
        "c",
        "pf",
        "message",
        "password",
        "JOptionPane",
        "showConfirmDialog",
        "pf",
        "message",
        "JOptionPane",
        "OK_CANCEL_OPTION",
        "JOptionPane",
        "QUESTION_MESSAGE",
        "JOptionPane",
        "OK_OPTION",
        "pf",
        "getPassword",
        "password",
        "c",
        "readPassword",
        "password"
    ],
    "literals": [
        "\"0.1\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"AthenaObjects.csv\"",
        "\"athenaTablesViews.csv\"",
        "\"athenaColumns.csv\"",
        "\"links.csv\"",
        "\"com.infa.ldm.relational.Database\"",
        "\"com.infa.ldm.relational.Schema\"",
        "\"com.infa.ldm.relational.Table\"",
        "\"com.infa.ldm.relational.Column\"",
        "\"com.infa.ldm.relational.View\"",
        "\"com.infa.ldm.relational.ViewColumn\"",
        "\" \"",
        "\" initializing properties from: \"",
        "\"jdbc.driver.class\"",
        "\"jdbc.url\"",
        "\"user\"",
        "\"pwd\"",
        "\"<prompt>\"",
        "\"\"",
        "\"password set to <prompt> for user \"",
        "\" - waiting for user input...\"",
        "\"pwd chars entered (debug):  \"",
        "\"   jdbc driver=\"",
        "\"      jdbc url=\"",
        "\"          user=\"",
        "\"           pwd=\"",
        "\"Include/Exclude settings\"",
        "\"schema.include.filter\"",
        "\";\"",
        "\"\\tschemas include filters=none - all will be extracted\"",
        "\"\\tschemas to include=\"",
        "\"schema.exclude.filter\"",
        "\";\"",
        "\"\\tschemas exclude filters=none - all will be excluded\"",
        "\"\\tschemas to exclude=\"",
        "\"table.include.filter\"",
        "\";\"",
        "\"\\ttables include filters=none - all tables be extracted (in not excluded)\"",
        "\"\\ttables to include=\"",
        "\"table.exclude.filter\"",
        "\";\"",
        "\"\\ttables exclude filters=none - no tables will be excluded (except for table.include.filter settings)\"",
        "\"\\ttables to exclude=\"",
        "\"error reading properties file: \"",
        "\"Initializing output files\"",
        "\"Initializing jdbc driver class: \"",
        "\"establishing connection to: \"",
        "\"Connected!\"",
        "\"getting database metadata object (con.getMetaData())\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"getting catalogs:  DatabaseMetaData.getCatalogs()\"",
        "\"catalog: \"",
        "\"\\tgetting schemas - using 'show databases' command\"",
        "\"show databases\"",
        "\"database_name\"",
        "\"\\tschema=\"",
        "\"\\tschema: \"",
        "\" skipped - does not match any filter expressions\"",
        "\"\\t\\tgetting view list using: 'show views in \"",
        "\"' command\"",
        "\"show views in \"",
        "\"views\"",
        "\"\\t\\tviews found: \"",
        "\"\\t\\tgetting table list using: 'show tables in \"",
        "\"' command\"",
        "\"show tables in \"",
        "\"tab_name\"",
        "\"\\t\\t\"",
        "\"table not processed:  \"",
        "\"\\t\\t\\t\"",
        "\" is a view\"",
        "\"SHOW CREATE VIEW \"",
        "\".\"",
        "\"create view\"",
        "\"\\n\"",
        "\"SHOW CREATE TABLE \"",
        "\".\"",
        "\"createtab_stmt\"",
        "\"\\n\"",
        "\"view/tab sql===\"",
        "\"TABLE\"",
        "\"VIEW\"",
        "\"COLUMN_NAME\"",
        "\"DATA_TYPE\"",
        "\"TYPE_NAME\"",
        "\"COLUMN_SIZE\"",
        "\"DECIMAL_DIGITS\"",
        "\"IS_NULLABLE\"",
        "\"REMARKS\"",
        "\"COLUMN_DEF\"",
        "\"SQL_DATA_TYPE\"",
        "\"ORDINAL_POSITION\"",
        "\"SCOPE_TABLE\"",
        "\"SCOPE_CATALOG\"",
        "\"TABLE\"",
        "\"VIEW\"",
        "\"\\t\\t\\t\"",
        "\" type=\"",
        "\" size=\"",
        "\" digits=\"",
        "\" nulls=\"",
        "\" remarks=\"",
        "\" def=\"",
        "\" sqlType=\"",
        "\" pos=\"",
        "\" scTable=\"",
        "\" scCatlg=\"",
        "\"finished columns\"",
        "\"finished tables\"",
        "\"finished schemas\"",
        "\"closing...\"",
        "\"\\tcannot initialize class=\"",
        "\" \"",
        "\" jdbc driver needs to be in current folder or CLASSPATH\"",
        "\"closing output files\"",
        "\"checking to exclude\"",
        "\"\\tobject: \"",
        "\" is to be excluded\"",
        "\"\\tobject: \"",
        "\" included???? \"",
        "\"class\"",
        "\"identity\"",
        "\"core.name\"",
        "\"class\"",
        "\"identity\"",
        "\"core.name\"",
        "\"com.infa.ldm.relational.ViewStatement\"",
        "\"class\"",
        "\"identity\"",
        "\"core.name\"",
        "\"com.infa.ldm.relational.Datatype\"",
        "\"com.infa.ldm.relational.DatatypeLength\"",
        "\"com.infa.ldm.relational.Position\"",
        "\"core.dataSetUuid\"",
        "\"association\"",
        "\"fromObjectIdentity\"",
        "\"toObjectIdentity\"",
        "\"\\tcreating database: \"",
        "\"core.ResourceParentChild\"",
        "\"\"",
        "\"/\"",
        "\"com.infa.ldm.relational.DatabaseSchema\"",
        "\"/\"",
        "\"/\"",
        "\"TABLE\"",
        "\"com.infa.ldm.relational.SchemaTable\"",
        "\"com.infa.ldm.relational.SchemaView\"",
        "\"/\"",
        "\"/\"",
        "\"/\"",
        "\"TABLE\"",
        "\"com.infa.ldm.relational.TableColumn\"",
        "\"com.infa.ldm.relational.ViewViewColumn\"",
        "\"AthenaScanner: missing configuration properties file: using athena.properties in current folder\"",
        "\"athena.properties\"",
        "\"AthenaScanner: \"",
        "\" currentTimeMillis=\"",
        "\"Finished\"",
        "\"User password:\"",
        "\"enter your pwd here....\"",
        "\"User password: \""
    ],
    "variables": [
        "prop",
        "tabSQL",
        "scanner",
        "password"
    ],
    "comments": [
        "end constructor",
        "get the catalogs - if any...",
        "\"TABLE_CATALOG\"",
        "good to go for this schema",
        "get a list of views - they also get listed as tables - so we need to get a list of the",
        "views first so they are not processed 2x (and we can extract the view sql)",
        "Print",
        "is it a table or view",
        "its a view",
        "System.out.println(\"view sql=\" + tabSQL.getString(\"create view\"));",
        "System.out.println(\"table sql=\" + tabSQL.getString(\"createtab_stmt\"));",
        "get the table create statement (in case uses are interested in what s3 folder the table is created from",
        "[TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME,",
        "DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH,",
        "DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS,",
        "COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH,",
        "ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE,",
        "SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN]",
        "String is_autoIncrment = columns.getString(\"IS_AUTOINCREMENT\");",
        "Printing results",
        "+ dataTypes.get(datatype) + \"|\" +",
        "if the table should be processed",
        "System.out.println(\"\\t\\tgetting views list using: 'show views in \" + schemaName + \"' command\");",
        "ResultSet views = con.createStatement().executeQuery(\"show views in \" + schemaName);",
        "while(views.next()) {",
        "System.out.println(\"\\t\\tVIWE...\");",
        "}",
        "end of schema filter",
        "assume true - until we find out otherwise",
        "first check if the schema should be excluded (this over-rides the include list)",
        "assuming it is not specifically excluded - see if it is in the include list",
        "assume false until we know it is true (e.g. filtered in)",
        "only process the ones that match (since a filter has been added",
        "assume working, until it is not",
        "otherObjWriter = new CSVWriter(new FileWriter(otherObjectCsvName), ',', CSVWriter.NO_QUOTE_CHARACTER);",
        "TODO Auto-generated catch block",
        "TODO Auto-generated catch block",
        "System.out.println(\"\\tcreating database: \" + dbName);",
        "view",
        "pass the property file - the constructor will read all input properties",
        "end main()",
        "IN ECLIPSE IDE (prompt for password using swing ui",
        "Outside Eclipse IDE  (e.g. windows/linux console)"
    ],
    "docstrings": [
        "*",
        "* @author dwrigley\n *",
        "* constructor for scanner initializaiton\n     * @param propertyFile - controls how to connect and what to extract",
        "* run the scanner",
        "* @param args",
        "* prompt the user for a password, using the console (default)\n\t * for development environments like eclipse, their is no standard console.\n\t * so in that case we open a swing ui panel with an input field to accept a password\n\t * \n\t * @return the password entered\n\t * \n\t * @author dwrigley"
    ],
    "functions": [
        "AthenaScanner",
        "run",
        "isObjectIncluded",
        "initFiles",
        "closeFiles",
        "createDatabase",
        "createSchema",
        "createTable",
        "createColumn",
        "main",
        "getPassword"
    ],
    "classes": [
        "AthenaScanner"
    ]
}