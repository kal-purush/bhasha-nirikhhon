{
    "identifiers": [
        "CodeGeneration",
        "Roslyn",
        "Microsoft",
        "CodeAnalysis",
        "Microsoft",
        "CodeAnalysis",
        "CSharp",
        "Microsoft",
        "CodeAnalysis",
        "Text",
        "Collections",
        "Generic",
        "Collections",
        "Immutable",
        "IO",
        "Linq",
        "Reflection",
        "Threading",
        "Tasks",
        "TechTalk",
        "SpecFlow",
        "Xunit",
        "Tranquire",
        "SpecFlow",
        "Generation",
        "Tests",
        "Path",
        "GetDirectoryName",
        "Assembly",
        "Location",
        "PortableExecutableReference",
        "coreAssemblyNames",
        "Select",
        "MetadataReference",
        "CreateFromFile",
        "Path",
        "Combine",
        "coreAssemblyPath",
        "x",
        "Assembly",
        "CSharpCompilation",
        "Assembly",
        "CodeGenerationAttributeAttribute",
        "Assembly",
        "GenerateSpecFlowBindingsAttribute",
        "Assembly",
        "FactAttribute",
        "Assembly",
        "BindingAttribute",
        "Assembly",
        "IAction",
        "Assembly",
        "MetadataReferences",
        "coreMetaReferences",
        "Concat",
        "MetadataReference",
        "otherAssemblies",
        "Select",
        "MetadataReference",
        "CreateFromFile",
        "x",
        "Location",
        "ToImmutableArray",
        "NormalizeToLf",
        "DocumentTransform",
        "GeneratedByAToolPreamble",
        "Lf",
        "ImmutableArray",
        "MetadataReference",
        "source",
        "expected",
        "Generate",
        "source",
        "NormalizeToLf",
        "generatedTree",
        "GetText",
        "ToString",
        "NormalizedPreamble",
        "NormalizeToLf",
        "expected",
        "Trim",
        "Assert",
        "Equal",
        "expectedText",
        "generatedText",
        "Assembly",
        "source",
        "Generate",
        "source",
        "SyntaxFactory",
        "ParseSyntaxTree",
        "SourceText",
        "From",
        "source",
        "Guid",
        "NewGuid",
        "ToString",
        "CSharpCompilation",
        "Create",
        "assemblyName",
        "tree",
        "sourceTree",
        "MetadataReferences",
        "CSharpCompilationOptions",
        "OutputKind",
        "DynamicallyLinkedLibrary",
        "Microsoft",
        "CodeAnalysis",
        "Emit",
        "EmitResult",
        "compilation",
        "Emit",
        "assemblyName",
        "AssemblyName",
        "assemblyName",
        "Assembly",
        "Load",
        "assemblyName2",
        "input",
        "input",
        "Replace",
        "CrLf",
        "Lf",
        "SyntaxTree",
        "source",
        "CreateProject",
        "source",
        "Documents",
        "Single",
        "GetSyntaxTreeAsync",
        "CSharpCompilation",
        "Project",
        "GetCompilationAsync",
        "ImmutableArray",
        "Diagnostic",
        "compilation",
        "GetDiagnostics",
        "Assert",
        "Empty",
        "diagnostics",
        "Where",
        "x",
        "Severity",
        "DiagnosticSeverity",
        "Warning",
        "Progress",
        "Diagnostic",
        "Progress",
        "Diagnostic",
        "DocumentTransform",
        "TransformAsync",
        "compilation",
        "tree",
        "Assembly",
        "Load",
        "progress",
        "result",
        "sources",
        "ProjectId",
        "CreateNewId",
        "debugName",
        "TestProjectName",
        "AdhocWorkspace",
        "CurrentSolution",
        "AddProject",
        "projectId",
        "TestProjectName",
        "TestProjectName",
        "LanguageNames",
        "CSharp",
        "WithProjectCompilationOptions",
        "projectId",
        "CSharpCompilationOptions",
        "OutputKind",
        "DynamicallyLinkedLibrary",
        "WithProjectParseOptions",
        "projectId",
        "CSharpParseOptions",
        "preprocessorSymbols",
        "AddMetadataReferences",
        "projectId",
        "MetadataReferences",
        "source",
        "sources",
        "DefaultFilePathPrefix",
        "count",
        "CSharpDefaultFileExt",
        "DocumentId",
        "CreateNewId",
        "projectId",
        "debugName",
        "newFileName",
        "solution",
        "solution",
        "AddDocument",
        "documentId",
        "newFileName",
        "SourceText",
        "From",
        "source",
        "count",
        "solution",
        "GetProject",
        "projectId"
    ],
    "literals": [
        "\"mscorlib.dll\"",
        "\"System.dll\"",
        "\"System.Core.dll\"",
        "\"System.Runtime.dll\"",
        "\"\\r\\n\"",
        "\"\\n\"",
        "\"Test\"",
        "\"cs\"",
        "\"TestProject\"",
        "\"Generated_\"",
        "\".dll\"",
        "\"SOMETHING_ACTIVE\"",
        "\".\""
    ],
    "variables": [
        "coreAssemblyPath",
        "coreAssemblyNames",
        "coreMetaReferences",
        "otherAssemblies",
        "CrLf",
        "Lf",
        "DefaultFilePathPrefix",
        "CSharpDefaultFileExt",
        "TestProjectName",
        "NormalizedPreamble",
        "MetadataReferences",
        "SyntaxTree",
        "generatedTree",
        "generatedText",
        "expectedText",
        "SyntaxTree",
        "tree",
        "SyntaxTree",
        "sourceTree",
        "assemblyName",
        "CSharpCompilation",
        "compilation",
        "result",
        "AssemblyName",
        "assemblyName2",
        "Document",
        "SyntaxTree",
        "tree",
        "CSharpCompilation",
        "compilation",
        "diagnostics",
        "progress",
        "SyntaxTree",
        "result",
        "ProjectId",
        "projectId",
        "Solution",
        "solution",
        "count",
        "newFileName",
        "DocumentId",
        "documentId"
    ],
    "comments": [
        "this \"core assemblies hack\" is from https://stackoverflow.com/a/47196516/4418060",
        "normalize line endings to just LF",
        "and append preamble to the expected"
    ],
    "docstrings": [],
    "functions": [
        "CompilationTests",
        "AssertGeneratedAsExpected",
        "CompileSource",
        "NormalizeToLf",
        "Generate",
        "Project",
        "CreateProject"
    ],
    "classes": [
        "CompilationTests"
    ]
}