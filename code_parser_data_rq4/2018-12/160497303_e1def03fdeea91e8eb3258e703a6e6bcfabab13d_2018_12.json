{
    "identifiers": [
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "Nr",
        "Nb",
        "W",
        "h",
        "R",
        "c",
        "f",
        "P_e",
        "eta_m",
        "Omega",
        "CDS",
        "CDp_bar",
        "k",
        "Nr",
        "Nb",
        "W",
        "h",
        "R",
        "c",
        "f",
        "P_e",
        "eta_m",
        "Omega",
        "CDS",
        "CDp_bar",
        "k",
        "Nb",
        "c",
        "np",
        "pi",
        "R",
        "Omega",
        "R",
        "h",
        "h",
        "np",
        "sqrt",
        "W",
        "rho",
        "np",
        "pi",
        "R",
        "R",
        "np",
        "sqrt",
        "W",
        "rho",
        "np",
        "pi",
        "R",
        "x",
        "y",
        "title",
        "xlabel",
        "ylabel",
        "get_min",
        "xlim",
        "ylim",
        "plt",
        "figure",
        "plt",
        "grid",
        "xlim",
        "max",
        "x",
        "ylim",
        "max",
        "y",
        "plt",
        "xlim",
        "xlim",
        "plt",
        "ylim",
        "ylim",
        "get_min",
        "get_min",
        "x",
        "y",
        "plt",
        "axhline",
        "ymin",
        "xmin",
        "xlim",
        "plt",
        "axvline",
        "xmin",
        "ymin",
        "ylim",
        "title",
        "plt",
        "title",
        "title",
        "xlabel",
        "plt",
        "xlabel",
        "xlabel",
        "ylabel",
        "plt",
        "ylabel",
        "ylabel",
        "plt",
        "plot",
        "x",
        "y",
        "plt",
        "show",
        "x",
        "y",
        "min",
        "y",
        "x",
        "np",
        "where",
        "y",
        "ymin",
        "xmin",
        "ymin",
        "Rs",
        "Rs",
        "Omegas",
        "Omegas",
        "alphas",
        "alphas",
        "v_inf",
        "v_inf",
        "Omega",
        "R",
        "vi_hov",
        "np",
        "sqrt",
        "v_inf",
        "np",
        "cos",
        "alpha",
        "v_inf",
        "np",
        "sin",
        "alpha",
        "vi_hov",
        "W",
        "vi_cr",
        "sigma",
        "CDp_bar",
        "rho",
        "Omega",
        "R",
        "np",
        "pi",
        "R",
        "myu",
        "CDS",
        "rho",
        "v_inf",
        "P_i",
        "P_pd",
        "P_par",
        "P_to",
        "P_i",
        "P_pd",
        "P_par",
        "vs",
        "np",
        "arange",
        "vs",
        "determineP_to",
        "v_inf",
        "vs",
        "Rs",
        "np",
        "linspace",
        "setR",
        "Rs",
        "_calc_params",
        "determineP_to",
        "v_inf",
        "Rs",
        "Pi_hovs",
        "heli",
        "HAMRAC",
        "idealPhovafoR",
        "HAMRAC",
        "plot_val",
        "Rdata",
        "Rdata",
        "title",
        "xlabel",
        "ylabel",
        "get_min"
    ],
    "literals": [
        "'Optimizing power required to hover wrt blade radius'",
        "'Blade radius R [m]'",
        "'P_hov [kW]'"
    ],
    "variables": [
        "Nr",
        "Nb",
        "W",
        "h",
        "R",
        "c",
        "f",
        "P_e",
        "eta_m",
        "Omega",
        "CDS",
        "CDp_bar",
        "k",
        "alpha",
        "sigma",
        "v_tip",
        "rho",
        "vi_hov",
        "xlim",
        "ylim",
        "xmin",
        "ymin",
        "ymin",
        "xmin",
        "R",
        "Omega",
        "alpha",
        "myu",
        "vi_cr",
        "P_i",
        "P_pd",
        "P_par",
        "P_to",
        "Pi_hovs",
        "HAMRAC",
        "Rdata"
    ],
    "comments": [
        "-*- coding: utf-8 -*-",
        "to be altered somehow",
        "from cunha lecture 6",
        "to be given from Aero department, note: highly sensity to blade radius (R^5)!",
        "marilena",
        "Pcurve = HAMRAC.powerCurve()",
        "HAMRAC.plot_vals(Pcurve[0], Pcurve[1][0])"
    ],
    "docstrings": [
        "\"\"\"\nCreated on Thu Dec  6 09:26:19 2018\n\n@author: mandreini\n\"\"\"",
        "'''\n        Initialise a helicopter object\n        \n        Parameters\n        ----------\n        Nr : int\n            Number of rotors\n        Nb : int\n            Number of blades\n        W : int\n            Weight of the rotorcraft [N]\n        h : float\n            Operating altitude of the helicopter\n        R : float\n            Radius of the blades\n        c : float\n            Chord length of the blade\n        f : float\n            Equivalent wetted area of the helicopter. Recommend 0.93 for small helicopter, and 4.65 for large helicopter        \n        P_e : float\n            Engine power\n        eta_m : float\n            Mechanical efficiency of the engine, 0<eta_m<1\n        Omega : float\n            Angular velocity of the rotor in rad/s          \n        CDS : float\n            Equivalent flat plate area of the helicopter. Values range from 1 (aerodynamicly efficient) to 6 (aerodynamically inefficient)        \n        CDp_bar : array_like, float\n            (Average) drag coefficient of the rotor blade. Constant when blade is constant        \n        '''",
        "'''\n        Calculcate design parameters. Allows for them to change as new variables are introduced\n        '''",
        "'''\n        Plot x against y\n        '''",
        "''' \n        Determine the total power required of a helicopter in level, forward flight\n        \n        Parameters\n        ----------\n        v_inf : array_like\n            The airspeed(s) of the helicopter in m/s \n            \n        Returns\n        -------\n        P_to : array_like\n            The total power required for the helicopter at airspeed\n        P_i : array_like\n            The induced power for the helicopter at airspeed\n        P_pd : array_like\n            The profile drag power for the helicopter at airspeed\n        P_par : array_like\n            The parasite drag power for the helicopter at airspeed\n        '''",
        "'''\n        Generate a power curve for various airspeeds\n        '''",
        "'''\n        This function will generate a graph P_hov(R)\n        '''"
    ],
    "functions": [
        "_calc_params",
        "_get_vihov",
        "plot_val",
        "get_min",
        "setR",
        "setOmega",
        "setalpha",
        "determineP_to",
        "powerCurve",
        "idealPhovafoR"
    ],
    "classes": [
        "heli"
    ]
}