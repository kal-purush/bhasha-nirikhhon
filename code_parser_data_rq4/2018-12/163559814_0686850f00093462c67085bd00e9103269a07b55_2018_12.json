{
    "identifiers": [
        "log",
        "message",
        "Msg",
        "Base",
        "Base",
        "log",
        "get_logger",
        "Base",
        "msg",
        "callback",
        "on_done",
        "num_retry",
        "on_done",
        "num_retry",
        "msg",
        "to_addr",
        "msg",
        "cmd1",
        "callback",
        "protocol",
        "msg",
        "isinstance",
        "msg",
        "Msg",
        "OutExtended",
        "Msg",
        "OutStandard",
        "msg",
        "to_addr",
        "addr",
        "msg",
        "cmd1",
        "cmd",
        "msg",
        "is_ack",
        "LOG",
        "error",
        "addr",
        "Msg",
        "CONTINUE",
        "Msg",
        "UNKNOWN",
        "isinstance",
        "msg",
        "Msg",
        "InpStandard",
        "msg",
        "from_addr",
        "addr",
        "msg",
        "cmd1",
        "cmd",
        "Msg",
        "UNKNOWN",
        "msg",
        "flags",
        "Msg",
        "Flags",
        "Type",
        "DIRECT_ACK",
        "LOG",
        "info",
        "msg",
        "from_addr",
        "Msg",
        "CONTINUE",
        "msg",
        "flags",
        "Msg",
        "Flags",
        "Type",
        "DIRECT_NAK",
        "LOG",
        "error",
        "msg",
        "from_addr",
        "msg",
        "on_done",
        "Msg",
        "FINISHED",
        "LOG",
        "warning",
        "msg",
        "from_addr",
        "msg",
        "Msg",
        "UNKNOWN",
        "isinstance",
        "msg",
        "Msg",
        "InpExtended",
        "msg",
        "from_addr",
        "addr",
        "msg",
        "cmd1",
        "cmd",
        "callback",
        "msg",
        "on_done",
        "on_done",
        "Msg",
        "FINISHED",
        "LOG",
        "info",
        "msg",
        "from_addr",
        "msg",
        "cmd1",
        "addr",
        "cmd",
        "Msg",
        "UNKNOWN"
    ],
    "literals": [
        "\"%s NAK response\"",
        "\"%s device ACK response, waiting for ext payload\"",
        "\"%s device NAK error: %s\"",
        "\"Device command NAK\"",
        "\"%s device unexpected msg: %s\"",
        "\"Possible unexpected message from %s cmd %#04x but \"",
        "\"expected %s cmd %#04x\""
    ],
    "variables": [
        "LOG",
        "addr",
        "cmd",
        "callback"
    ],
    "comments": [
        "===========================================================================",
        "",
        "Device extended response message handler.",
        "",
        "===========================================================================",
        "pylint: disable=too-many-return-statements",
        "-----------------------------------------------------------------------",
        "Probably an echo back of our sent message.  See if the message",
        "matches the address we sent to and assume it's the ACK/NAK message.",
        "These seem to be either extended or standard message so allow for",
        "both.",
        "Probably an ACK/NAK from the device for our get command.",
        "Filter by address and command.",
        "Process the payload reply.",
        "Filter by address and command.",
        "Run the callback - it's up to the callback to check if this",
        "is really the ACK or not.",
        "Indicate no more messages are expected.",
        "-----------------------------------------------------------------------"
    ],
    "docstrings": [
        "\"\"\"Device extended response message handler.\n\n    This class handles responses from the device where an ACK is made\n    in the form of a standard length message and a subsequent extended\n    length message is sent with the requested payload.\n\n    The handler watches for the proper standard length ACK, returns\n    a continue and then waits for the extended length payload.\n    \"\"\"",
        "\"\"\"Constructor\n\n        The on_done callback has the signature on_done(success, msg, entry)\n        and will be called with success=True if the handler finishes\n        successfully or False if an error occurs or the handler times out.\n        The message input is a string to help with logging the result.\n\n        Args:\n          msg:       (OutStandard) The output message that was sent.  The\n                     reply must match the address and msg.cmd1 field to be\n                     processed by this handler.\n          callback:  Callback function to pass InpStandard messages that match\n                     the output to.  Signature: callback(message, on_done).\n          on_done:   Option finished callback.  This is called when the\n                     handler is finished for any reason.\n          num_retry: (int) The number of times to retry the message if the\n                     handler times out without returning Msg.FINISHED.\n                     This count does include the initial sending so a\n                     retry of 3 will send once and then retry 2 more times.\n        \"\"\"",
        "\"\"\"See if we can handle the message.\n\n        See if the message is the expected ACK of our output or the expected\n        extended payload message.  If we get the payload, pass it to the\n        callback to handle.\n\n        Args:\n          protocol:  (Protocol) The Insteon Protocol object\n          msg:       Insteon message object that was read.\n\n        Returns:\n          Msg.UNKNOWN if we can't handle this message.\n          Msg.CONTINUE if we handled the message and expect more.\n          Msg.FINISHED if we handled the message and are done.\n        \"\"\""
    ],
    "functions": [
        "msg_received"
    ],
    "classes": [
        "ExtendedCmdResponse"
    ]
}