{
    "identifiers": [
        "typing",
        "Optional",
        "Tuple",
        "Union",
        "datetime",
        "datetime",
        "timedelta",
        "pandas",
        "Series",
        "to_timedelta",
        "numpy",
        "np",
        "numpy",
        "ndarray",
        "matplotlib",
        "pyplot",
        "plt",
        "comopt",
        "model",
        "utils",
        "initialize_series",
        "flow_unit_multiplier",
        "function_type",
        "callback",
        "excess_type",
        "origin",
        "epsilon",
        "cost_step",
        "gradient",
        "Union",
        "Tuple",
        "power",
        "function_type",
        "excess_type",
        "origin",
        "epsilon",
        "cost_step",
        "isinstance",
        "gradient",
        "gradient",
        "flow_unit_multiplier",
        "gradient",
        "flow_unit_multiplier",
        "gradient",
        "flow_unit_multiplier",
        "gradient",
        "flow_unit_multiplier",
        "power",
        "callback",
        "func",
        "quantity",
        "function_type",
        "epsilon",
        "cost_step",
        "x",
        "origin",
        "epsilon",
        "quantity",
        "origin",
        "epsilon",
        "cost_step",
        "function_type",
        "gradient",
        "quantity",
        "quantity",
        "gradient_up",
        "quantity",
        "quantity",
        "gradient_down",
        "function_type",
        "power",
        "quantity",
        "np",
        "abs",
        "quantity",
        "power",
        "function_type",
        "callback",
        "callback",
        "func",
        "quantity",
        "wrapper",
        "cost_decorator",
        "quantity",
        "func",
        "quantity",
        "quantity",
        "np",
        "linspace",
        "get_costs",
        "x",
        "x",
        "x1",
        "plt",
        "plot",
        "x1",
        "y1",
        "drawstyle",
        "label",
        "plt",
        "show",
        "label",
        "Optional",
        "constants",
        "Union",
        "ndarray",
        "Series",
        "deviation_cost_curve",
        "Optional",
        "DeviationCostCurve",
        "revenue",
        "start",
        "datetime",
        "end",
        "datetime",
        "resolution",
        "timedelta",
        "costs",
        "label",
        "deviation_cost_curve",
        "costs",
        "isinstance",
        "constants",
        "ndarray",
        "constants",
        "start",
        "end",
        "resolution",
        "initialize_series",
        "constants",
        "start",
        "end",
        "resolution",
        "start",
        "end",
        "end",
        "start",
        "resolution",
        "constants",
        "constants",
        "index",
        "values",
        "to_timedelta",
        "constants",
        "index",
        "freq",
        "constants",
        "index",
        "values",
        "resolution",
        "end",
        "start",
        "quantities",
        "deviation_cost_curve",
        "get_costs",
        "q",
        "q",
        "quantities",
        "quantities",
        "sum",
        "cost_vector",
        "quantities"
    ],
    "literals": [
        "\"Block\"",
        "\"No EPSILON VALUE - Please pass one!\"",
        "\"No COST_STEP VALUE - Please pass one!\"",
        "\"Linear\"",
        "\"No GRADIENT VALUE - Please pass one!\"",
        "\"Power\"",
        "\"No POWER VALUE - Please pass one!\"",
        "\"Callback\"",
        "\"steps\"",
        "\"committed profile\"",
        "\"Missing time information at initialization.\""
    ],
    "variables": [
        "function_type",
        "excess",
        "origin",
        "epsilon",
        "cost_step",
        "gradient_down",
        "gradient_up",
        "gradient_down",
        "gradient_up",
        "power",
        "func",
        "callback",
        "func",
        "func",
        "func",
        "func",
        "x1",
        "y1",
        "label",
        "deviation_cost_curve",
        "costs",
        "constants",
        "start",
        "end",
        "duration",
        "resolution",
        "constants",
        "start",
        "resolution",
        "end",
        "duration"
    ],
    "comments": [
        "E.g. in EUR/(MW*15min) rather than EUR/MWh",
        "Todoc: delete these comments",
        "our commitment 10 MW, we end up using 11 MW, costs will be (11-10)MW * 1 EUR/(MW*15min) * 15min (from timeseries resolution)",
        "our commitment 10 MW, we end up using 11 MW, costs will be (11-10)MW * 1 EUR/MWh * h(how do I know it's an hour)"
    ],
    "docstrings": [
        "\"\"\"\n    A deviation cost curve represents the penalty (e.g. in EUR) for deviating from the committed flow (e.g. in MW) in a\n    certain timeslot.\n    # Not implemented: the flow unit multiplier is not taken into account in the non-linear cases.\n        function_type:\n            Argument could be one of the following: \"Zero\", \"Rectangle\", \"Linear\", \"Power\"\n        excess_type:\n            Indicates either excess consumption or excess surplus.\n            Argument could be one of the following: \"Supply\" or \"Demand\"\n        origin:\n            Determines the root for a rectangle cost function.\n        epsilon:\n            Determines a null cost interval for a rectangle cost function.\n        cost_step:\n            Determines the value of a \"price jump\" for a rectangle cost function.\n        gradient:\n            Determines the gradient of the linear cost curve (e.g. in EUR/MWh) for a linear cost function.\n            Can be a tuple to specify two different slopes for downwards and upwards deviations.\n        power:\n            Determines the power of a ... cost function.\n        flow_unit_multiplier\n            The flow unit multiplier specifies how to convert from a unit of flow into a unit of change in stock, given\n            the resolution of the flow (the profile commitment).\n            I.e. 1 unit of flow (over the resolution of the profile commitment) results in 1 * flow_unit_multiplier\n            units of change in stock.\n    \"\"\"",
        "\"\"\"\n    # Todoc: annotate the superclasses or the PCPC class explaining the meaning of nan values (namely nan = no commitment)\n    label:\n            Can be used to label the commitment (useful for debugging).\n    constants:\n            The EM-System(s) feed in energy to the grid (=negative net_demand)\n            or energy drawn from the grid (=positive net_demand), for each timeperiod .\n    deviation_cost_curve:\n            Indicates deviation cost curve that gets assigned for each timeperiod.\n    \"\"\""
    ],
    "functions": [
        "cost_decorator",
        "wrapper",
        "get_costs",
        "plot",
        "cost_vector",
        "get_total_costs"
    ],
    "classes": [
        "DeviationCostCurve",
        "PiecewiseConstantProfileCommitment"
    ]
}