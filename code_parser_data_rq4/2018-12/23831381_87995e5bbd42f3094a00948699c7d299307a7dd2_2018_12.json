{
    "identifiers": [
        "unicode_literals",
        "flask_dance",
        "consumer",
        "OAuth2ConsumerBlueprint",
        "functools",
        "partial",
        "flask",
        "globals",
        "LocalProxy",
        "_lookup_app_object",
        "flask",
        "_app_ctx_stack",
        "stack",
        "ImportError",
        "flask",
        "_request_ctx_stack",
        "stack",
        "client_id",
        "client_secret",
        "scope",
        "redirect_url",
        "redirect_to",
        "login_url",
        "authorized_url",
        "session_class",
        "backend",
        "hostname",
        "OAuth2ConsumerBlueprint",
        "client_id",
        "client_id",
        "client_secret",
        "client_secret",
        "scope",
        "scope",
        "base_url",
        "format",
        "hostname",
        "hostname",
        "authorization_url",
        "format",
        "hostname",
        "hostname",
        "token_url",
        "format",
        "hostname",
        "hostname",
        "redirect_url",
        "redirect_url",
        "redirect_to",
        "redirect_to",
        "login_url",
        "login_url",
        "authorized_url",
        "authorized_url",
        "session_class",
        "session_class",
        "backend",
        "backend",
        "authentiq_bp",
        "from_config",
        "authentiq_bp",
        "from_config",
        "authentiq_bp",
        "before_app_request",
        "stack",
        "top",
        "authentiq_bp",
        "session",
        "authentiq_bp",
        "LocalProxy",
        "partial",
        "_lookup_app_object"
    ],
    "literals": [
        "\"Pieter Ennes <support@authentiq.com>\"",
        "\"openid profile\"",
        "\"connect.authentiq.io\"",
        "\"authentiq\"",
        "\"https://{hostname}/\"",
        "\"https://{hostname}/authorize\"",
        "\"https://{hostname}/token\"",
        "\"client_id\"",
        "\"AUTHENTIQ_OAUTH_CLIENT_ID\"",
        "\"client_secret\"",
        "\"AUTHENTIQ_OAUTH_CLIENT_SECRET\"",
        "\"authentiq_oauth\""
    ],
    "variables": [
        "__maintainer__",
        "authentiq_bp",
        "ctx",
        "ctx",
        "authentiq_oauth",
        "authentiq"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"\n    Make a blueprint for authenticating with authentiq using OAuth 2. This requires\n    a client ID and client secret from authentiq. You should either pass them to\n    this constructor, or make sure that your Flask application config defines\n    them, using the variables AUTHENTIQ_OAUTH_CLIENT_ID and\n    AUTHENTIQ_OAUTH_CLIENT_SECRET.\n\n    Args:\n        client_id (str): The client ID for your application on Authentiq.\n        client_secret (str): The client secret for your application on Authentiq.\n        scope (str, optional): comma-separated list of scopes for the OAuth token.\n        redirect_url (str): the URL to redirect to after the authentication\n            dance is complete.\n        redirect_to (str): if ``redirect_url`` is not defined, the name of the\n            view to redirect to after the authentication dance is complete.\n            The actual URL will be determined by :func:`flask.url_for`.\n        login_url (str, optional): the URL path for the ``login`` view.\n            Defaults to ``/authentiq``.\n        authorized_url (str, optional): the URL path for the ``authorized`` view.\n            Defaults to ``/authentiq/authorized``.\n        session_class (class, optional): The class to use for creating a\n            Requests session. Defaults to\n            :class:`~flask_dance.consumer.requests.OAuth2Session`.\n        backend: A storage backend class, or an instance of a storage\n                backend class, to use for this blueprint. Defaults to\n                :class:`~flask_dance.consumer.backend.session.SessionBackend`.\n        hostname (str, optional): If using a private instance of authentiq CE/EE,\n            specify the hostname, default is ``connect.authentiq.io``\n\n    :rtype: :class:`~flask_dance.consumer.OAuth2ConsumerBlueprint`\n    :returns: A :ref:`blueprint <flask:blueprints>` to attach to your Flask app.\n    \"\"\""
    ],
    "functions": [
        "make_authentiq_blueprint",
        "set_applocal_session"
    ],
    "classes": []
}