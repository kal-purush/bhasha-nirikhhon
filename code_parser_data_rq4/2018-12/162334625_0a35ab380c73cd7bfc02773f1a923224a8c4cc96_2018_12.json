{
    "identifiers": [
        "os",
        "path",
        "matcher",
        "numpy",
        "np",
        "Pointing_Groups",
        "NEO_src",
        "catalog_src",
        "dest",
        "script_name",
        "open",
        "script_name",
        "link_files",
        "link_files",
        "write",
        "link_files",
        "write",
        "dest",
        "i",
        "Pointing",
        "Pointing_Groups",
        "Pointing",
        "Pointing",
        "Pointing",
        "dest",
        "i",
        "zfill",
        "open",
        "script_name",
        "link_files",
        "link_files",
        "write",
        "dir_name",
        "link_files",
        "write",
        "dir_name",
        "link_files",
        "write",
        "dir_name",
        "link_files",
        "write",
        "dir_name",
        "link_files",
        "write",
        "dir_name",
        "link_files",
        "write",
        "dir_name",
        "link_files",
        "write",
        "dir_name",
        "link_files",
        "write",
        "dir_name",
        "link_files",
        "write",
        "catalog_src",
        "dir_name",
        "link_files",
        "write",
        "index",
        "image",
        "Pointing",
        "iterrows",
        "image",
        "open",
        "script_name",
        "link_files",
        "link_files",
        "write",
        "NEO_src",
        "image",
        "image",
        "image",
        "decode",
        "dir_name",
        "open",
        "script_name",
        "link_files",
        "link_files",
        "write",
        "NEO_src",
        "image",
        "image",
        "image",
        "image",
        "decode",
        "dir_name",
        "open",
        "script_name",
        "link_files",
        "link_files",
        "write",
        "index",
        "image",
        "Pointing",
        "iterrows",
        "image",
        "decode",
        "image",
        "decode",
        "image",
        "image",
        "open",
        "script_name",
        "link_files",
        "link_files",
        "write",
        "NEO_src",
        "night",
        "night",
        "dqmask",
        "dir_name",
        "open",
        "script_name",
        "link_files",
        "link_files",
        "write",
        "NEO_src",
        "night",
        "night",
        "night",
        "dqmask",
        "dir_name",
        "open",
        "script_name",
        "link_files",
        "link_files",
        "write",
        "index",
        "image",
        "Pointing",
        "iterrows",
        "image",
        "decode",
        "image",
        "decode",
        "image",
        "image",
        "open",
        "script_name",
        "link_files",
        "link_files",
        "write",
        "NEO_src",
        "night",
        "night",
        "wtmap",
        "dir_name",
        "open",
        "script_name",
        "link_files",
        "link_files",
        "write",
        "NEO_src",
        "night",
        "night",
        "night",
        "wtmap",
        "dir_name",
        "Pointing_Groups",
        "pg_location",
        "pg_lims",
        "script_name",
        "num_cores",
        "source_stack",
        "setup_loc",
        "open",
        "script_name",
        "f",
        "source_stack",
        "f",
        "write",
        "setup_loc",
        "f",
        "write",
        "f",
        "write",
        "pg_location",
        "np",
        "linspace",
        "pg_lims",
        "pg_lims",
        "pg_lims",
        "pg_lims",
        "dtype",
        "i",
        "pg_ids",
        "Pointing_Groups",
        "i",
        "np",
        "min",
        "Pointing_Groups",
        "i",
        "np",
        "max",
        "Pointing_Groups",
        "i",
        "f",
        "write",
        "i",
        "zfill",
        "f",
        "write",
        "f",
        "write",
        "min_visit",
        "max_visit",
        "num_cores",
        "f",
        "write",
        "Template",
        "Template",
        "kwargs",
        "key",
        "val",
        "kwargs",
        "items",
        "setattr",
        "key",
        "val",
        "property",
        "path",
        "join",
        "in_repos_topdir",
        "in_repo_rerun_dirstr",
        "property",
        "path",
        "join",
        "out_repos_topdir",
        "out_saveloc_dirstr",
        "property",
        "path",
        "join",
        "outrepopath",
        "stdoutstr",
        "property",
        "path",
        "join",
        "outrepopath",
        "stderrstr",
        "__repr__",
        "key",
        "val",
        "__dict__",
        "items",
        "retrstr",
        "format",
        "key",
        "val",
        "retrstr",
        "template",
        "key",
        "what",
        "condition",
        "else_",
        "condition",
        "template",
        "safe_substitute",
        "key",
        "what",
        "template",
        "safe_substitute",
        "key",
        "else_",
        "Template",
        "tmp",
        "cmd",
        "conf",
        "tmplt_replacer",
        "cmd",
        "conf",
        "niced",
        "tmplt_replacer",
        "cmd",
        "conf",
        "parallel",
        "tmplt_replacer",
        "cmd",
        "conf",
        "longlog",
        "tmplt_replacer",
        "cmd",
        "conf",
        "timeout",
        "tmplt_replacer",
        "cmd",
        "conf",
        "perccd",
        "cmd",
        "safe_substitute",
        "cmd",
        "pairs",
        "groupid",
        "conf",
        "sample",
        "header",
        "footer",
        "conf",
        "inrepopath",
        "format",
        "groupid",
        "groupid",
        "conf",
        "outrepopath",
        "format",
        "groupid",
        "groupid",
        "pair",
        "pairs",
        "pair",
        "pair",
        "conf",
        "stdoutpath",
        "format",
        "groupid",
        "groupid",
        "visitid",
        "visitid",
        "conf",
        "stderrpath",
        "format",
        "groupid",
        "groupid",
        "visitid",
        "visitid",
        "cmd",
        "format",
        "groupid",
        "groupid",
        "visitid",
        "visitid",
        "templateid",
        "tmpltid",
        "inpath",
        "inrepopath",
        "outpath",
        "outrepopath",
        "cfgpath",
        "conf",
        "cfgfile_path",
        "stdoutpath",
        "stdoutpath",
        "stderrpath",
        "stderrpath",
        "ccd",
        "conf",
        "ccd",
        "ncpu",
        "conf",
        "ncpu",
        "timeout",
        "conf",
        "timeout",
        "niceness",
        "conf",
        "niceness",
        "cmds",
        "append",
        "tmp",
        "sample",
        "header",
        "cmds",
        "footer",
        "conf",
        "script_namestr",
        "format",
        "groupid",
        "groupid",
        "path",
        "join",
        "conf",
        "save_path",
        "fname",
        "open",
        "fpath",
        "f",
        "f",
        "write",
        "header",
        "f",
        "writelines",
        "cmds",
        "f",
        "write",
        "footer",
        "pairs",
        "groupid",
        "conf",
        "sample",
        "cmd",
        "batchcmd",
        "cmd_builder",
        "cmd",
        "conf",
        "script_writer",
        "master_cmd",
        "pairs",
        "groupid",
        "conf",
        "sample",
        "sample",
        "groups",
        "groupid",
        "conf",
        "sample",
        "cmd",
        "batchcmd",
        "matcher",
        "largest_dt",
        "groups",
        "groupid",
        "batch_script_from_pairs",
        "pairs",
        "groupid",
        "conf",
        "sample",
        "pairs",
        "groupid",
        "conf",
        "sample",
        "cmd",
        "slurmcmd",
        "open",
        "read",
        "header",
        "format",
        "jobtype",
        "groupid",
        "groupid",
        "workdir",
        "cmd_builder",
        "cmd",
        "conf",
        "script_writer",
        "master_cmd",
        "pairs",
        "groupid",
        "conf",
        "sample",
        "sample",
        "header",
        "header",
        "groups",
        "groupid",
        "conf",
        "sample",
        "cmd",
        "slurmcmd",
        "matcher",
        "largest_dt",
        "groups",
        "groupid",
        "slurm_script_from_pairs",
        "pairs",
        "groupid",
        "conf",
        "sample",
        "cmd",
        "groupid",
        "conf",
        "JobConf",
        "sample",
        "cmd",
        "open",
        "read",
        "header",
        "format",
        "jobtype",
        "groupid",
        "groupid",
        "workdir",
        "cmd",
        "groupid",
        "groupid",
        "script_writer",
        "master_cmd",
        "pairs",
        "groupid",
        "conf",
        "sample",
        "sample",
        "header",
        "header"
    ],
    "literals": [
        "'link_files.sh'",
        "'w'",
        "'# This file links data in a given field\\n'",
        "'cd '",
        "'\\n'",
        "'stellar_density'",
        "'ra'",
        "'dec'",
        "'/Pointing_Group_'",
        "'a'",
        "'\\n# Link files for field: '",
        "'\\n'",
        "'mkdir '",
        "'\\n'",
        "'mkdir '",
        "'/ingest/\\n'",
        "'mkdir '",
        "'/ingest/instcal\\n'",
        "'mkdir '",
        "'/ingest/dqmask\\n'",
        "'mkdir '",
        "'/ingest/wtmap\\n'",
        "'mkdir '",
        "'/processed_data\\n'",
        "'echo lsst.obs.decam.DecamMapper > '",
        "'/processed_data/_mapper\\n'",
        "'ln -s '",
        "' '",
        "'/processed_data/ref_cats\\n'",
        "'# Link the images files\\n'",
        "'survey_night'",
        "'a'",
        "'ln -s '",
        "'/night_'",
        "'survey_night'",
        "'/night_'",
        "'survey_night'",
        "'/'",
        "'filename'",
        "'UTF-8'",
        "' '",
        "'/ingest/instcal/\\n'",
        "'a'",
        "'ln -s '",
        "'/night_'",
        "'survey_night'",
        "'/night_'",
        "'survey_night'",
        "'/night_'",
        "'survey_night'",
        "'/'",
        "'filename'",
        "'UTF-8'",
        "' '",
        "'/ingest/instcal/\\n'",
        "'a'",
        "'# Link the dqmask files\\n'",
        "'filename'",
        "'UTF-8'",
        "'d'",
        "'filename'",
        "'UTF-8'",
        "'survey_night'",
        "'survey_night'",
        "'a'",
        "'ln -s '",
        "'/night_'",
        "'/night_'",
        "'/'",
        "' '",
        "'/ingest/dqmask/\\n'",
        "'a'",
        "'ln -s '",
        "'/night_'",
        "'/night_'",
        "'/night_'",
        "'/'",
        "' '",
        "'/ingest/dqmask/\\n'",
        "'a'",
        "'# Link the wtmask files\\n'",
        "'filename'",
        "'UTF-8'",
        "'w'",
        "'filename'",
        "'UTF-8'",
        "'survey_night'",
        "'survey_night'",
        "'a'",
        "'ln -s '",
        "'/night_'",
        "'/night_'",
        "'/'",
        "' '",
        "'/ingest/wtmap/\\n'",
        "'a'",
        "'ln -s '",
        "'/night_'",
        "'/night_'",
        "'/night_'",
        "'/'",
        "' '",
        "'/ingest/wtmap/\\n'",
        "'process_visits.sh'",
        "''",
        "'w'",
        "'source '",
        "'\\n'",
        "'setup lsst_distrib\\n'",
        "'cd '",
        "'\\n'",
        "'stellar_density'",
        "'visit_id'",
        "'visit_id'",
        "'cd Pointing_Group_'",
        "'\\n'",
        "'ingestImagesDecam.py processed_data --filetype instcal --mode=link ingest/instcal/* >& ingest.log\\n'",
        "'processCcd.py processed_data/ --rerun rerun_processed_data --id visit='",
        "'..'",
        "' --longlog -C configProcessCcd_neo.py -j'",
        "' >& processCcd.log\\n'",
        "'cd ..\\n'",
        "\"imageDifference.py {inpath} --output {outpath} -C {cfgpath} \"",
        "\"--id visit={visitid} ${ccd} --templateId visit={templateid} ${ccd} \"",
        "\"${parallel} ${longlog} ${timeout} > {stdoutpath} 2>{stderrpath}\"",
        "\"${niced}imageDifference.py {inpath} --output {outpath} -C {cfgpath} \"",
        "\"--id visit={visitid} ${ccd} --templateId visit={templateid} ${ccd} \"",
        "\"${parallel} ${longlog} ${timeout} > {stdoutpath} 2>{stderrpath}\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"{groupid:03d}\"",
        "\"imdiff_{visitid}.out\"",
        "\"imdiff_{visitid}.err\"",
        "\"job_group_{groupid:03d}\"",
        "\".\"",
        "\"\"",
        "\"17\"",
        "\"\\n\"",
        "\"{0:30}{1}\\n\"",
        "\"\"",
        "\"niced\"",
        "\"nice -n {niceness} \"",
        "\"parallel\"",
        "\"-j {ncpu}\"",
        "\"longlog\"",
        "\"--longlog\"",
        "\"timeout\"",
        "\"--timeout {timeout}\"",
        "\"ccd\"",
        "\"ccd={ccd}\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\\n\"",
        "\"w\"",
        "\"slurm.template\"",
        "\"imdiff\"",
        "\"/gscratch/scrubbed/dinob/imdiff\"",
        "\"./warp.py {groupid}\"",
        "\"slurm.template\"",
        "\"warp\"",
        "\"/gscratch/scrubbed/dinob/warps\""
    ],
    "variables": [
        "ra",
        "dec",
        "dir_name",
        "dqmask",
        "night",
        "wtmap",
        "night",
        "pg_ids",
        "min_visit",
        "max_visit",
        "slurmcmd",
        "batchcmd",
        "in_repos_topdir",
        "in_repo_rerun_dirstr",
        "out_repos_topdir",
        "out_saveloc_dirstr",
        "stdoutstr",
        "stderrstr",
        "script_namestr",
        "save_path",
        "cfgfile_path",
        "parallel",
        "longlog",
        "limited",
        "perccd",
        "niced",
        "timeout",
        "niceness",
        "ncpu",
        "ccd",
        "retrstr",
        "tmp",
        "tmp",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "inrepopath",
        "outrepopath",
        "cmds",
        "visitid",
        "tmpltid",
        "stdoutpath",
        "stderrpath",
        "tmp",
        "fname",
        "fpath",
        "master_cmd",
        "pairs",
        "header",
        "header",
        "master_cmd",
        "pairs",
        "header",
        "header",
        "master_cmd",
        "pairs"
    ],
    "comments": [
        "",
        "Haydens            ##################################",
        "scripts            ##################################",
        "",
        "",
        "Dino's               ##################################",
        "Configuration          ##################################",
        "",
        "the default commands are written out here just for convenience when defining functions for",
        "hyak VS epyc jobs later on. They are not required for the code to run.",
        "",
        "CMD Builder           ##################################",
        "",
        "recasting back to normal string",
        "",
        "Epyc util. func.        ##################################",
        "",
        "",
        "Hyak util. func.        ##################################",
        "",
        "",
        "Hyak warp func.         ##################################",
        "",
        "mock the minimum required input to script-writer, most of it will be",
        "ignored anyhow"
    ],
    "docstrings": [
        "\"\"\"\n    This function generates a bash script that creates directories and\n    symlinks the correct file names for all pointing_groups.\n\n    DO NOT PUT A TRAILING / IN YOUR FILE PATHS.\n    The script adds them in where necessary\n\n    Input\n    ---------\n\n    Pointing_Groups:\n        An array of pointing group pandas tables loaded in from PickledPointings.pkl\n\n    NEO_src : string\n        File path to the folder containing all of the raw instcal files for the\n        Lori Allen dataset\n\n    catalog_src : string\n        File path to the folder containing all of the reference catalogs needed for\n        processing the Lori Allen dataset\n\n    dest : string\n        File path destination. All of the folders will be populated into \"dest\"\n\n    script_name : string\n        Optional file name of the script\n\n    Output\n    ---------\n\n    none, function will write to a file, named by script_name\n\n    \"\"\"",
        "\"\"\"A class that holds execution parameters required to create scripts. Not\n    all parameters are mandatory so leaving the default empty or preset values\n    can be fine, depending on the jobs that are being written.\n\n    Jobs transform the in-going data from the \"in\" repository into out-going\n    data saved in the \"out\" repository. On an example repository path:\n\n    /epyc/users/smotherh/pointing_groups/Pointing_Group_001/processed_data/rerun/rerun_processed_data/\n    |<-------  in repos topdir -------->|<-------------  in repo rerun dir ------------------------->|\n\n    where in_repos_topdir, the in-going top level directory containing all\n    individual repositories, points to the top directory containing repositories\n    of individual PointingGroups as a subdirectory.\n    The in_repo_rerun_dir, the in-going repository rerun directory, points to the\n    rerun directory of a particular PointingGroup that contains all the ingested\n    exposures. Because this path will change for every PointingGroup the way to\n    specify this path is to set the in_repo_rerun_dirstr attribute to a string\n    containing the groupid specifier. This specifier will then get written with\n    a particular group id when the job is created. F.E. the correct string to\n    use for in_repo_rerun_dirstr in this case is:\n\n    Pointing_Group_{groupid:03d}/processed_data/rerun/rerun_processed_data/\n\n    Similar approach is used for defining the place where to store the out-going\n    data. Specifying the out_repos_topdir, the out-going repository top level\n    directory, and the out_saveloc_dirstr format will set the save location of\n    the processing results. For example using '/usr/name/' and '{groupid:03d}'\n    will store the outgoing data into\n\n    /usr/name/001/\n\n    In that directory, except for the results, you will also find 2 files into\n    which the standard out and standard errors have been dumped. The file names\n    formats are, similarly, set by stdoutstr and seterrstr. By default these are\n\n    imdiff_{visitid}.out\n    imdiff_{visitid}.err\n\n    If per-group reports are desired the default command has to be edited to\n    append to a file, not overwrite it.\n\n    The full formats of the paths, the path identifiers described above are\n    joined to form a complete absolute filesystem path to the selected locations,\n    can be seen by looking at the inrepopath, outrepopath, stdoutpath and\n    stderrpath attributes.\n\n    The save_path attribute sets the local filesystem location where the script\n    will be created.\n\n    The remaining attributes controll the values that are substituted in the\n    command themselves and are not all required for all commands.\n\n    cfgfile_path - set the path to the imdiff config.py file that holds the\n                   image difference configuration\n    parallel     - bool, add a -j flag to the command\n    longlog      - bool, add a --longlog to the command\n    limited      - bool, add a --timeout flag to the command\n    perccd       - bool, add a ccd identified to the --id flag\n    niced        - prepend 'nice -n' to the command \n\n    The values for the selected flag in the command are then set by timeout,\n    niceness, ncpu (for parallel), and ccd attributes.\n    \"\"\"",
        "\"\"\"Generic replacement of keys in 'template', a string.Template object.\n    Replaces key with 'what' if condition is True, otherwise replaces key\n    with else_, an empty string by default.\n    \"\"\"",
        "\"\"\"Defines a generic template for command and then replaces the\n    required keywords. Returns a string with the replacements, not a template.\n    \"\"\"",
        "\"\"\"Generic script writer that will loop through all the pairs and write a\n    command to process them according to the provided configurations to a file\n    with a name in a location also as provided by the configuration.\n    Writes both batch and slurm jobs depending on the args and conf sent.\n    \"\"\"",
        "\"\"\"Given a list of pairs and the id of the group from which the pairs were\n    created, will produce a file with imageDifference commands required to produce\n    difference images between the given pairs as instructed by the settings.\n\n    If sample is True will output the first command as a string to stdout.\n    \"\"\"",
        "\"\"\"Convenience function that takes an group index and produces a file with\n    commands that will produce image differences as instructed by the settings.\n    \"\"\"",
        "\"\"\"Given a list of pairs and the id of the group from which the pairs were\n    created, will produce a slurm script with imageDifference commands required\n    to produce difference images between the given pairs as instructed by the\n    configuration.\n\n    If sample is True will output the first command as a string to stdout.\n    \"\"\"",
        "\"\"\"Convenience function that takes an group index and produces a file with\n    commands that will produce image differences as instructed by the settings.\n    \"\"\"",
        "\"\"\"Given a groupid will produce a slurm script with commands required to\n    produce warp.py script as instructed by the configuration.\n\n    If sample is True will output the first command as a string to stdout.\n    \"\"\""
    ],
    "functions": [
        "link_instcal_files",
        "process_visits",
        "inrepopath",
        "outrepopath",
        "stdoutpath",
        "stderrpath",
        "__repr__",
        "tmplt_replacer",
        "cmd_builder",
        "script_writer",
        "batch_script_from_pairs",
        "batch_script_from_groupid",
        "slurm_script_from_pairs",
        "slurm_script_from_groupid",
        "slurm_warp_script_from_groupid"
    ],
    "classes": [
        "JobConf"
    ]
}