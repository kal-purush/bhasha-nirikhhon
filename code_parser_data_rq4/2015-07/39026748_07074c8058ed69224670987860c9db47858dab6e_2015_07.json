{
    "identifiers": [
        "IO",
        "Diagnostics",
        "Reflection",
        "Text",
        "Text",
        "RegularExpressions",
        "Collections",
        "Xml",
        "Collections",
        "Generic",
        "Mono",
        "CompilerServices",
        "SymbolWriter",
        "Globalization",
        "TestRunner",
        "ITester",
        "args",
        "warningNumber",
        "ITester",
        "Assembly",
        "a",
        "a",
        "GetType",
        "t",
        "WriteLine",
        "ep",
        "t",
        "GetMethod",
        "BindingFlags",
        "Static",
        "BindingFlags",
        "Public",
        "ep",
        "MissingMethodException",
        "method_arg",
        "t",
        "GetProperty",
        "all_warnings",
        "pi",
        "GetValue",
        "Sort",
        "all_warnings",
        "output",
        "GetStringBuilder",
        "ToString",
        "args",
        "output",
        "StringWriter",
        "method_arg",
        "args",
        "method_arg",
        "output",
        "ep",
        "Invoke",
        "method_arg",
        "warningNumber",
        "BinarySearch",
        "all_warnings",
        "warningNumber",
        "NET_2_1",
        "ITester",
        "p_path",
        "pi",
        "ProcessStartInfo",
        "pi",
        "FileName",
        "p_path",
        "pi",
        "CreateNoWindow",
        "pi",
        "WindowStyle",
        "ProcessWindowStyle",
        "Hidden",
        "pi",
        "RedirectStandardOutput",
        "pi",
        "RedirectStandardError",
        "pi",
        "UseShellExecute",
        "output",
        "args",
        "StringBuilder",
        "s",
        "args",
        "sb",
        "Append",
        "s",
        "sb",
        "Append",
        "pi",
        "Arguments",
        "sb",
        "ToString",
        "Process",
        "Start",
        "pi",
        "output",
        "p",
        "StandardError",
        "ReadToEnd",
        "output",
        "Length",
        "output",
        "p",
        "StandardOutput",
        "ReadToEnd",
        "p",
        "WaitForExit",
        "p",
        "ExitCode",
        "warningNumber",
        "NotImplementedException",
        "MarshalByRefObject",
        "filename",
        "options",
        "deps",
        "FileName",
        "filename",
        "CompilerOptions",
        "options",
        "Dependencies",
        "deps",
        "PositiveChecker",
        "name",
        "referenceFile",
        "MethodInfo",
        "executedMethod",
        "name",
        "name",
        "Replace",
        "referenceFile",
        "referenceFile",
        "executedMethod",
        "ConvertMethodInfoToText",
        "executedMethod",
        "has_return",
        "name",
        "referenceFile",
        "MethodInfo",
        "mi",
        "hasReturn",
        "hasReturn",
        "mi",
        "ReturnType",
        "mi",
        "DeclaringType",
        "FullName",
        "Replace",
        "mi",
        "GetParameters",
        "param",
        "Length",
        "declaring",
        "mi",
        "Name",
        "declaring",
        "mi",
        "Name",
        "name",
        "executedMethod",
        "has_return",
        "call",
        "Format",
        "call",
        "TestCaseEntry",
        "TestCaseEntry",
        "ITester",
        "tester",
        "tester",
        "CleanUp",
        "StringBuilder",
        "Path",
        "Combine",
        "Path",
        "Combine",
        "src_dir",
        "StreamWriter",
        "src_file",
        "e",
        "entries",
        "file",
        "WriteLine",
        "e",
        "Name",
        "aliases",
        "AppendFormat",
        "Path",
        "GetFileNameWithoutExtension",
        "e",
        "ReferenceFile",
        "aliases",
        "Append",
        "Environment",
        "NewLine",
        "aliases",
        "AppendFormat",
        "e",
        "Name",
        "aliases",
        "Append",
        "Environment",
        "NewLine",
        "aliases",
        "AppendFormat",
        "Path",
        "GetFileName",
        "e",
        "ReferenceFile",
        "aliases",
        "Append",
        "Environment",
        "NewLine",
        "aliases",
        "AppendLine",
        "file",
        "WriteLine",
        "file",
        "WriteLine",
        "file",
        "WriteLine",
        "file",
        "WriteLine",
        "file",
        "WriteLine",
        "e",
        "entries",
        "file",
        "WriteLine",
        "file",
        "WriteLine",
        "e",
        "Name",
        "file",
        "WriteLine",
        "file",
        "WriteLine",
        "e",
        "GetTestFixture",
        "file",
        "WriteLine",
        "file",
        "WriteLine",
        "file",
        "WriteLine",
        "File",
        "ReadAllText",
        "Path",
        "Combine",
        "src_dir",
        "input",
        "input",
        "Replace",
        "aliases",
        "ToString",
        "input",
        "input",
        "Replace",
        "Path",
        "GetFileName",
        "src_file",
        "File",
        "WriteAllText",
        "Path",
        "Combine",
        "src_dir",
        "input",
        "TestCase",
        "test",
        "binaryFileName",
        "Assembly",
        "LoadFile",
        "binaryFileName",
        "assembly",
        "EntryPoint",
        "ep",
        "IsPublic",
        "HandleFailure",
        "test",
        "FileName",
        "TestResult",
        "LoadError",
        "ep",
        "DeclaringType",
        "IsNestedPrivate",
        "ep",
        "DeclaringType",
        "IsNestedFamily",
        "HandleFailure",
        "test",
        "FileName",
        "TestResult",
        "LoadError",
        "entries",
        "Add",
        "TestCaseEntry",
        "Path",
        "GetFileNameWithoutExtension",
        "test",
        "FileName",
        "binaryFileName",
        "ep",
        "HandleFailure",
        "test",
        "FileName",
        "TestResult",
        "Success",
        "TestCase",
        "MarshalByRefObject",
        "MarshalByRefObject",
        "MethodBase",
        "mi",
        "il_size",
        "Type",
        "mi",
        "DeclaringType",
        "ToString",
        "MethodName",
        "mi",
        "ToString",
        "MethodAttributes",
        "mi",
        "Attributes",
        "ILSize",
        "il_size",
        "type_name",
        "method_name",
        "method_attributes",
        "il_size",
        "Type",
        "type_name",
        "MethodName",
        "method_name",
        "MethodAttributes",
        "method_attributes",
        "ILSize",
        "il_size",
        "test_file",
        "test_file",
        "test_file",
        "name",
        "XmlReader",
        "r",
        "VerificationData",
        "name",
        "r",
        "Read",
        "r",
        "ReadToNextSibling",
        "r",
        "r",
        "Read",
        "r",
        "ReadToNextSibling",
        "r",
        "Parse",
        "r",
        "r",
        "ReadToDescendant",
        "r",
        "ReadElementContentAsInt",
        "methods",
        "Add",
        "MethodData",
        "type_name",
        "m_name",
        "method_attrs",
        "il_size",
        "r",
        "Read",
        "r",
        "Read",
        "tc",
        "methods",
        "methods",
        "tc",
        "XmlWriter",
        "w",
        "w",
        "WriteStartElement",
        "w",
        "WriteAttributeString",
        "test_file",
        "MethodData",
        "data",
        "methods",
        "data",
        "Checked",
        "data",
        "Type",
        "w",
        "WriteEndElement",
        "data",
        "Type",
        "w",
        "WriteStartElement",
        "w",
        "WriteAttributeString",
        "w",
        "WriteStartElement",
        "w",
        "WriteAttributeString",
        "data",
        "MethodName",
        "data",
        "MethodAttributes",
        "w",
        "WriteAttributeString",
        "v",
        "ToString",
        "w",
        "WriteStartElement",
        "w",
        "WriteValue",
        "data",
        "ILSize",
        "w",
        "WriteEndElement",
        "w",
        "WriteEndElement",
        "w",
        "WriteEndElement",
        "w",
        "WriteEndElement",
        "method_name",
        "declaring_type",
        "methods",
        "MethodData",
        "md",
        "methods",
        "md",
        "MethodName",
        "method_name",
        "md",
        "Type",
        "declaring_type",
        "md",
        "MethodBase",
        "mb",
        "il_size",
        "methods",
        "methods",
        "MethodData",
        "mb",
        "il_size",
        "md",
        "Checked",
        "methods",
        "Add",
        "md",
        "filename",
        "options",
        "deps",
        "filename",
        "options",
        "deps",
        "verif_data",
        "VerificationData",
        "FileName",
        "verif_data",
        "IsNewSet",
        "verif_data",
        "value",
        "verif_data",
        "MarshalByRefObject",
        "Hashtable",
        "ITester",
        "tester",
        "tester",
        "tester",
        "issue_file",
        "value",
        "ReadWrongErrors",
        "issue_file",
        "log_file",
        "StreamWriter",
        "value",
        "verbose",
        "value",
        "debug_mdb_update",
        "value",
        "safe_execution",
        "value",
        "extra_compiler_options",
        "value",
        "file",
        "compiler_options",
        "dependencies",
        "compiler_options",
        "dependencies",
        "StreamReader",
        "file",
        "row",
        "line",
        "sr",
        "ReadLine",
        "AnalyzeTestFile",
        "file",
        "row",
        "line",
        "compiler_options",
        "dependencies",
        "file",
        "row",
        "line",
        "compiler_options",
        "dependencies",
        "row",
        "compiler_options",
        "dependencies",
        "line",
        "IndexOf",
        "options",
        "index",
        "compiler_options",
        "line",
        "Substring",
        "index",
        "options",
        "Length",
        "Trim",
        "Split",
        "i",
        "compiler_options",
        "Length",
        "i",
        "compiler_options",
        "i",
        "compiler_options",
        "i",
        "TrimStart",
        "index",
        "line",
        "IndexOf",
        "depends",
        "index",
        "dependencies",
        "line",
        "Substring",
        "index",
        "depends",
        "Length",
        "Trim",
        "Split",
        "i",
        "dependencies",
        "Length",
        "i",
        "dependencies",
        "i",
        "dependencies",
        "i",
        "TrimStart",
        "filename",
        "test_hash",
        "Contains",
        "filename",
        "verbose",
        "Log",
        "filename",
        "skip",
        "Contains",
        "filename",
        "ignore_list",
        "Contains",
        "filename",
        "ignored",
        "LogFileLine",
        "filename",
        "GetExtraOptions",
        "filename",
        "compiler_options",
        "dependencies",
        "LogFileLine",
        "filename",
        "extra_compiler_options",
        "compiler_options",
        "compiler_options",
        "extra_compiler_options",
        "compiler_options",
        "Length",
        "extra_compiler_options",
        "Length",
        "extra_compiler_options",
        "CopyTo",
        "new_options",
        "compiler_options",
        "CopyTo",
        "new_options",
        "extra_compiler_options",
        "Length",
        "compiler_options",
        "new_options",
        "CreateTestCase",
        "filename",
        "compiler_options",
        "dependencies",
        "test_hash",
        "Add",
        "filename",
        "test",
        "total",
        "dependencies",
        "dependency",
        "dependencies",
        "Do",
        "dependency",
        "LogFileLine",
        "filename",
        "tests",
        "Add",
        "test",
        "Check",
        "test",
        "TestCase",
        "test",
        "test",
        "CompilerOptions",
        "test_args",
        "test",
        "CompilerOptions",
        "Length",
        "test",
        "CompilerOptions",
        "CopyTo",
        "test_args",
        "test_args",
        "test_args",
        "test_args",
        "Length",
        "test_args",
        "test_args",
        "test_args",
        "Length",
        "test_args",
        "test",
        "FileName",
        "tester",
        "Invoke",
        "test_args",
        "filename",
        "options",
        "deps",
        "TestCase",
        "filename",
        "options",
        "deps",
        "file",
        "StreamReader",
        "file",
        "line",
        "sr",
        "ReadLine",
        "line",
        "StartsWith",
        "line",
        "IndexOf",
        "ignored",
        "active_cont",
        "ignore_list",
        "line",
        "IndexOf",
        "no_error",
        "active_cont",
        "no_error_list",
        "line",
        "Contains",
        "skip_tag",
        "active_cont",
        "skip",
        "line",
        "Split",
        "file_name",
        "Length",
        "active_cont",
        "Add",
        "file_name",
        "total_known_issues",
        "know_issues",
        "Count",
        "LogLine",
        "Environment",
        "NewLine",
        "total",
        "rate",
        "success",
        "total",
        "LogLine",
        "success",
        "rate",
        "syntax_errors",
        "LogLine",
        "syntax_errors",
        "ignored",
        "LogLine",
        "ignored",
        "total_known_issues",
        "know_issues",
        "Count",
        "LogLine",
        "total_known_issues",
        "know_issues",
        "Count",
        "know_issues",
        "AddRange",
        "no_error_list",
        "know_issues",
        "Count",
        "LogLine",
        "LogLine",
        "issue_file",
        "know_issues",
        "Count",
        "s",
        "know_issues",
        "LogLine",
        "s",
        "regression",
        "Count",
        "LogLine",
        "LogLine",
        "regression",
        "Count",
        "s",
        "regression",
        "LogLine",
        "s",
        "regression",
        "Count",
        "msg",
        "rest",
        "Write",
        "msg",
        "rest",
        "log_file",
        "log_file",
        "Write",
        "msg",
        "rest",
        "msg",
        "WriteLine",
        "msg",
        "log_file",
        "log_file",
        "WriteLine",
        "msg",
        "msg",
        "rest",
        "WriteLine",
        "msg",
        "rest",
        "log_file",
        "log_file",
        "WriteLine",
        "msg",
        "rest",
        "file",
        "msg",
        "args",
        "verbose",
        "Format",
        "msg",
        "args",
        "file",
        "Format",
        "msg",
        "args",
        "WriteLine",
        "s",
        "log_file",
        "log_file",
        "WriteLine",
        "s",
        "log_file",
        "log_file",
        "Close",
        "PrintSummary",
        "Checker",
        "NET_2_1",
        "TestResult",
        "CompileError",
        "ExecError",
        "LoadError",
        "XmlError",
        "Success",
        "ILError",
        "DebugError",
        "MethodAttributesError",
        "ITester",
        "tester",
        "verif_file",
        "tester",
        "files_folder",
        "Directory",
        "GetCurrentDirectory",
        "verif_file",
        "verif_file",
        "NET_2_1",
        "pi",
        "ProcessStartInfo",
        "pi",
        "CreateNoWindow",
        "pi",
        "WindowStyle",
        "ProcessWindowStyle",
        "Hidden",
        "pi",
        "RedirectStandardOutput",
        "pi",
        "RedirectStandardError",
        "pi",
        "UseShellExecute",
        "mono",
        "Environment",
        "GetEnvironmentVariable",
        "mono",
        "pi",
        "FileName",
        "mono",
        "update_verif_file",
        "value",
        "update_verif_file",
        "file",
        "compiler_options",
        "dependencies",
        "GetExtraOptions",
        "file",
        "compiler_options",
        "dependencies",
        "doc_output",
        "compiler_options",
        "one_opt",
        "compiler_options",
        "one_opt",
        "StartsWith",
        "doc_output",
        "one_opt",
        "Split",
        "MarshalByRefObject",
        "PositiveTestCase",
        "test",
        "PositiveChecker",
        "checker",
        "file",
        "Assembly",
        "LoadFile",
        "file",
        "Type",
        "assembly",
        "GetTypes",
        "Type",
        "t",
        "types",
        "t",
        "IsClass",
        "t",
        "IsValueType",
        "test",
        "VerificationProvider",
        "checker",
        "UpdateVerificationDataFile",
        "checker",
        "LogFileLine",
        "test",
        "FileName",
        "test",
        "CreateNewTest",
        "MemberInfo",
        "m",
        "t",
        "GetMembers",
        "BindingFlags",
        "Public",
        "BindingFlags",
        "NonPublic",
        "BindingFlags",
        "Static",
        "BindingFlags",
        "Instance",
        "BindingFlags",
        "DeclaredOnly",
        "m",
        "MethodBase",
        "mi",
        "mi",
        "Attributes",
        "MethodAttributes",
        "PinvokeImpl",
        "success",
        "CompareIL",
        "mi",
        "test",
        "checker",
        "success",
        "MethodBase",
        "mi",
        "PositiveTestCase",
        "test",
        "PositiveChecker",
        "checker",
        "mi",
        "ToString",
        "mi",
        "DeclaringType",
        "ToString",
        "PositiveTestCase",
        "VerificationData",
        "test",
        "VerificationProvider",
        "PositiveTestCase",
        "VerificationData",
        "MethodData",
        "data_provider",
        "FindMethodData",
        "m_name",
        "decl_type",
        "md",
        "data_provider",
        "AddNewMethod",
        "mi",
        "GetILSize",
        "mi",
        "data_provider",
        "IsNewSet",
        "checker",
        "HandleFailure",
        "test",
        "FileName",
        "PositiveChecker",
        "TestResult",
        "ILError",
        "decl_type",
        "m_name",
        "md",
        "Checked",
        "checker",
        "HandleFailure",
        "test",
        "FileName",
        "PositiveChecker",
        "TestResult",
        "ILError",
        "decl_type",
        "m_name",
        "md",
        "Checked",
        "md",
        "MethodAttributes",
        "mi",
        "Attributes",
        "checker",
        "HandleFailure",
        "test",
        "FileName",
        "PositiveChecker",
        "TestResult",
        "MethodAttributesError",
        "Format",
        "decl_type",
        "m_name",
        "md",
        "MethodAttributes",
        "mi",
        "Attributes",
        "md",
        "MethodAttributes",
        "mi",
        "Attributes",
        "GetILSize",
        "mi",
        "md",
        "ILSize",
        "il_size",
        "md",
        "ILSize",
        "il_size",
        "checker",
        "LogFileLine",
        "test",
        "FileName",
        "decl_type",
        "m_name",
        "md",
        "ILSize",
        "il_size",
        "md",
        "ILSize",
        "il_size",
        "checker",
        "HandleFailure",
        "test",
        "FileName",
        "PositiveChecker",
        "TestResult",
        "ILError",
        "Format",
        "decl_type",
        "m_name",
        "md",
        "ILSize",
        "il_size",
        "md",
        "ILSize",
        "il_size",
        "MethodBase",
        "mi",
        "mi",
        "GetMethodBody",
        "body",
        "body",
        "GetILAsByteArray",
        "Length",
        "MethodInfo",
        "entry_point",
        "filename",
        "Out",
        "SetOut",
        "TextWriter",
        "Null",
        "SetError",
        "TextWriter",
        "Null",
        "ParameterInfo",
        "entry_point",
        "GetParameters",
        "pi",
        "Length",
        "default_args",
        "result",
        "entry_point",
        "Invoke",
        "args",
        "SetOut",
        "stdout",
        "SetError",
        "stderr",
        "e",
        "ApplicationException",
        "e",
        "ToString",
        "result",
        "result",
        "ApplicationException",
        "result",
        "ToString",
        "file",
        "Assembly",
        "LoadFile",
        "file",
        "ExecuteFile",
        "assembly",
        "EntryPoint",
        "file",
        "TestCase",
        "test",
        "test",
        "FileName",
        "Check",
        "test",
        "HandleFailure",
        "filename",
        "TestResult",
        "CompileError",
        "tester",
        "Output",
        "e",
        "e",
        "InnerException",
        "e",
        "e",
        "InnerException",
        "HandleFailure",
        "filename",
        "TestResult",
        "CompileError",
        "e",
        "ToString",
        "filename",
        "EndsWith",
        "filename",
        "EndsWith",
        "filename",
        "EndsWith",
        "filename",
        "EndsWith",
        "verbose",
        "LogFileLine",
        "filename",
        "total",
        "Regex",
        "Replace",
        "filename",
        "File",
        "Exists",
        "file",
        "HandleFailure",
        "filename",
        "TestResult",
        "Success",
        "ExecuteTestFile",
        "test",
        "file",
        "TestCase",
        "test",
        "binaryFileName",
        "test",
        "FileName",
        "NET_2_1",
        "safe_execution",
        "AppDomainSetup",
        "setupInfo",
        "ApplicationBase",
        "AppDomain",
        "CurrentDomain",
        "BaseDirectory",
        "setupInfo",
        "LoaderOptimization",
        "LoaderOptimization",
        "SingleDomain",
        "domain",
        "AppDomain",
        "CreateDomain",
        "Path",
        "GetFileNameWithoutExtension",
        "binaryFileName",
        "setupInfo",
        "NET_2_1",
        "domain",
        "tester",
        "DomainTester",
        "domain",
        "CreateInstanceAndUnwrap",
        "PositiveChecker",
        "Assembly",
        "FullName",
        "DomainTester",
        "FullName",
        "tester",
        "DomainTester",
        "tester",
        "Test",
        "binaryFileName",
        "ApplicationException",
        "e",
        "HandleFailure",
        "filename",
        "TestResult",
        "ExecError",
        "e",
        "Message",
        "e",
        "HandleFailure",
        "filename",
        "TestResult",
        "LoadError",
        "e",
        "ToString",
        "doc_output",
        "Path",
        "GetFullPath",
        "Regex",
        "Replace",
        "filename",
        "NET_2_1",
        "XmlComparer",
        "Compare",
        "ref_file",
        "doc_output",
        "e",
        "HandleFailure",
        "filename",
        "TestResult",
        "XmlError",
        "e",
        "Message",
        "verif_file",
        "PositiveTestCase",
        "test",
        "pt",
        "VerificationProvider",
        "PositiveTestCase",
        "VerificationData",
        "verif_data",
        "filename",
        "tester",
        "CheckILSize",
        "pt",
        "binaryFileName",
        "Path",
        "GetFileName",
        "filename",
        "StartsWith",
        "StringComparison",
        "OrdinalIgnoreCase",
        "binaryFileName",
        "MonoSymbolFile",
        "ReadSymbolFile",
        "mdb_file_name",
        "mdb_file_name",
        "ConvertSymbolFileToXml",
        "mdb_file",
        "mdb_xml_file",
        "Regex",
        "Replace",
        "filename",
        "XmlComparer",
        "Compare",
        "ref_file",
        "mdb_xml_file",
        "e",
        "debug_mdb_update",
        "WriteLine",
        "ref_file",
        "File",
        "Copy",
        "mdb_xml_file",
        "ref_file",
        "HandleFailure",
        "filename",
        "TestResult",
        "DebugError",
        "e",
        "Message",
        "domain",
        "AppDomain",
        "Unload",
        "domain",
        "HandleFailure",
        "filename",
        "TestResult",
        "Success",
        "MonoSymbolFile",
        "symbolFile",
        "xmlFile",
        "XmlTextWriter",
        "xmlFile",
        "Encoding",
        "UTF8",
        "writer",
        "Formatting",
        "Formatting",
        "Indented",
        "writer",
        "WriteStartDocument",
        "writer",
        "WriteStartElement",
        "writer",
        "WriteStartElement",
        "file",
        "symbolFile",
        "Sources",
        "writer",
        "WriteStartElement",
        "writer",
        "WriteAttributeString",
        "file",
        "Index",
        "ToString",
        "writer",
        "WriteAttributeString",
        "Path",
        "GetFileName",
        "file",
        "FileName",
        "file",
        "Checksum",
        "checksum",
        "writer",
        "WriteAttributeString",
        "ChecksumToString",
        "checksum",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteStartElement",
        "method",
        "symbolFile",
        "Methods",
        "writer",
        "WriteStartElement",
        "writer",
        "WriteAttributeString",
        "IntToHex",
        "method",
        "Token",
        "method",
        "GetLineNumberTable",
        "writer",
        "WriteStartElement",
        "entry",
        "il_entries",
        "LineNumbers",
        "writer",
        "WriteStartElement",
        "writer",
        "WriteAttributeString",
        "IntToHex",
        "entry",
        "Offset",
        "writer",
        "WriteAttributeString",
        "entry",
        "Row",
        "ToString",
        "writer",
        "WriteAttributeString",
        "entry",
        "Column",
        "ToString",
        "writer",
        "WriteAttributeString",
        "entry",
        "File",
        "ToString",
        "writer",
        "WriteAttributeString",
        "BoolToString",
        "entry",
        "IsHidden",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteStartElement",
        "local",
        "method",
        "GetLocals",
        "writer",
        "WriteStartElement",
        "writer",
        "WriteAttributeString",
        "local",
        "Name",
        "writer",
        "WriteAttributeString",
        "local",
        "Index",
        "ToString",
        "writer",
        "WriteAttributeString",
        "local",
        "BlockIndex",
        "ToString",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteStartElement",
        "scope",
        "method",
        "GetCodeBlocks",
        "writer",
        "WriteStartElement",
        "writer",
        "WriteAttributeString",
        "scope",
        "Index",
        "ToString",
        "writer",
        "WriteAttributeString",
        "IntToHex",
        "scope",
        "StartOffset",
        "writer",
        "WriteAttributeString",
        "IntToHex",
        "scope",
        "EndOffset",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteEndElement",
        "writer",
        "WriteEndDocument",
        "checksum",
        "StringBuilder",
        "checksum",
        "Length",
        "i",
        "checksum",
        "Length",
        "i",
        "sb",
        "Append",
        "checksum",
        "i",
        "sb",
        "Append",
        "checksum",
        "i",
        "sb",
        "ToString",
        "value",
        "value",
        "ToString",
        "CultureInfo",
        "InvariantCulture",
        "value",
        "value",
        "filename",
        "options",
        "deps",
        "PositiveTestCase",
        "filename",
        "options",
        "deps",
        "file",
        "TestResult",
        "status",
        "extra",
        "status",
        "TestResult",
        "Success",
        "success",
        "know_issues",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "verbose",
        "LogFileLine",
        "file",
        "TestResult",
        "CompileError",
        "know_issues",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "know_issues",
        "Remove",
        "file",
        "LogFileLine",
        "file",
        "TestResult",
        "ExecError",
        "know_issues",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "know_issues",
        "Remove",
        "file",
        "LogFileLine",
        "file",
        "TestResult",
        "XmlError",
        "know_issues",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "know_issues",
        "Remove",
        "file",
        "LogFileLine",
        "file",
        "TestResult",
        "LoadError",
        "extra",
        "extra",
        "extra",
        "LogFileLine",
        "file",
        "extra",
        "extra",
        "TestResult",
        "MethodAttributesError",
        "TestResult",
        "ILError",
        "update_verif_file",
        "LogFileLine",
        "file",
        "extra",
        "extra",
        "TestResult",
        "DebugError",
        "LogFileLine",
        "file",
        "extra",
        "LogLine",
        "extra",
        "regression",
        "Contains",
        "file",
        "regression",
        "Add",
        "file",
        "verif_file",
        "LoadVerificationData",
        "verif_file",
        "Initialize",
        "CleanUp",
        "update_verif_file",
        "UpdateVerificationData",
        "verif_file",
        "file",
        "verif_data",
        "Hashtable",
        "File",
        "Exists",
        "file",
        "LogLine",
        "file",
        "LogLine",
        "file",
        "XmlReader",
        "Create",
        "file",
        "r",
        "ReadStartElement",
        "r",
        "Read",
        "r",
        "Name",
        "r",
        "GetAttribute",
        "PositiveTestCase",
        "VerificationData",
        "PositiveTestCase",
        "VerificationData",
        "FromFile",
        "name",
        "r",
        "verif_data",
        "Add",
        "name",
        "tc",
        "file",
        "LogLine",
        "file",
        "XmlWriterSettings",
        "s",
        "Indent",
        "XmlWriter",
        "Create",
        "StreamWriter",
        "file",
        "Encoding",
        "UTF8",
        "s",
        "w",
        "WriteStartDocument",
        "w",
        "WriteComment",
        "w",
        "WriteStartElement",
        "PositiveTestCase",
        "tc",
        "tests",
        "tc",
        "VerificationProvider",
        "tc",
        "VerificationProvider",
        "WriteCodeInfoTo",
        "w",
        "w",
        "WriteEndElement",
        "Checker",
        "CompilerError",
        "Expected",
        "Wrong",
        "Missing",
        "WrongMessage",
        "MissingLocation",
        "Duplicate",
        "ITester",
        "tester",
        "check_msg",
        "tester",
        "check_msg",
        "check_msg",
        "wrong_warning",
        "Hashtable",
        "file",
        "row",
        "line",
        "compiler_options",
        "dependencies",
        "row",
        "expected_message",
        "line",
        "IndexOf",
        "index",
        "index",
        "LogFileLine",
        "file",
        "syntax_errors",
        "AnalyzeTestFile",
        "file",
        "row",
        "line",
        "compiler_options",
        "dependencies",
        "expected_message",
        "line",
        "Substring",
        "index",
        "Trim",
        "row",
        "line",
        "Replace",
        "filtered",
        "StartsWith",
        "row",
        "AnalyzeTestFile",
        "file",
        "row",
        "line",
        "compiler_options",
        "dependencies",
        "check_error_line",
        "filtered",
        "StartsWith",
        "filtered",
        "StartsWith",
        "LogFileLine",
        "file",
        "syntax_errors",
        "AnalyzeTestFile",
        "file",
        "row",
        "line",
        "compiler_options",
        "dependencies",
        "is_warning",
        "compiler_options",
        "s",
        "compiler_options",
        "s",
        "StartsWith",
        "s",
        "StartsWith",
        "is_warning",
        "TestCase",
        "test",
        "test",
        "FileName",
        "Char",
        "IsLetter",
        "filename",
        "start_char",
        "start_char",
        "filename",
        "IndexOfAny",
        "filename",
        "Substring",
        "start_char",
        "end_char",
        "start_char",
        "Check",
        "test",
        "HandleFailure",
        "filename",
        "CompilerError",
        "Missing",
        "e",
        "HandleFailure",
        "filename",
        "CompilerError",
        "Missing",
        "e",
        "InnerException",
        "e",
        "e",
        "InnerException",
        "Log",
        "e",
        "ToString",
        "Parse",
        "expected",
        "Globalization",
        "CultureInfo",
        "InvariantCulture",
        "tester",
        "IsWarning",
        "err_id",
        "is_warning",
        "wrong_warning",
        "err_id",
        "is_warning",
        "wrong_warning",
        "err_id",
        "GetCompilerError",
        "expected",
        "tester",
        "Output",
        "HandleFailure",
        "filename",
        "result_code",
        "success",
        "result_code",
        "CompilerError",
        "Wrong",
        "LogLine",
        "tester",
        "Output",
        "expected",
        "buffer",
        "error_prefix",
        "expected",
        "StringReader",
        "buffer",
        "sr",
        "ReadLine",
        "CompilerError",
        "Missing",
        "line",
        "ld",
        "Contains",
        "line",
        "result",
        "CompilerError",
        "Expected",
        "line",
        "IndexOf",
        "CompilerError",
        "Duplicate",
        "ld",
        "Add",
        "line",
        "result",
        "CompilerError",
        "Expected",
        "line",
        "IndexOf",
        "tested_text",
        "check_msg",
        "line",
        "IndexOf",
        "line",
        "IndexOf",
        "first",
        "line",
        "IndexOf",
        "first",
        "StringComparison",
        "Ordinal",
        "check_error_line",
        "second",
        "line",
        "IndexOf",
        "second",
        "second",
        "check_error_line",
        "second",
        "first",
        "line",
        "Substring",
        "second",
        "TrimEnd",
        "Trim",
        "msg",
        "expected_message",
        "TryToMatchErrorMessage",
        "msg",
        "expected_message",
        "error_message",
        "msg",
        "CompilerError",
        "WrongMessage",
        "check_error_line",
        "line",
        "IndexOf",
        "CompilerError",
        "MissingLocation",
        "result",
        "CompilerError",
        "Expected",
        "line",
        "IndexOf",
        "error_prefix",
        "line",
        "IndexOf",
        "ignored_error",
        "result",
        "CompilerError",
        "Wrong",
        "line",
        "sr",
        "ReadLine",
        "result",
        "actual",
        "expected",
        "expected",
        "IndexOf",
        "path_mask_start",
        "actual",
        "Length",
        "path_mask_start",
        "expected",
        "Substring",
        "path_mask_start",
        "actual",
        "IndexOf",
        "path_mask_continue",
        "path_mask_start",
        "expected_continue",
        "actual",
        "Substring",
        "path_mask_start",
        "expected_continue",
        "path_mask_start",
        "actual",
        "expected",
        "Replace",
        "path",
        "ApplicationException",
        "expected",
        "Replace",
        "path",
        "file",
        "CompilerError",
        "status",
        "status",
        "CompilerError",
        "Expected",
        "know_issues",
        "Contains",
        "file",
        "no_error_list",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "verbose",
        "LogFileLine",
        "file",
        "CompilerError",
        "Wrong",
        "know_issues",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "know_issues",
        "Remove",
        "file",
        "no_error_list",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "no_error_list",
        "Remove",
        "file",
        "LogFileLine",
        "file",
        "CompilerError",
        "WrongMessage",
        "know_issues",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "know_issues",
        "Remove",
        "file",
        "no_error_list",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "no_error_list",
        "Remove",
        "file",
        "LogFileLine",
        "file",
        "LogLine",
        "expected_message",
        "LogLine",
        "error_message",
        "CompilerError",
        "Missing",
        "no_error_list",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "no_error_list",
        "Remove",
        "file",
        "know_issues",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "know_issues",
        "Remove",
        "file",
        "LogFileLine",
        "file",
        "CompilerError",
        "MissingLocation",
        "know_issues",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "know_issues",
        "Remove",
        "file",
        "no_error_list",
        "Contains",
        "file",
        "LogFileLine",
        "file",
        "no_error_list",
        "Remove",
        "file",
        "LogFileLine",
        "file",
        "CompilerError",
        "Duplicate",
        "LogFileLine",
        "file",
        "regression",
        "Add",
        "file",
        "PrintSummary",
        "wrong_warning",
        "Count",
        "LogLine",
        "LogLine",
        "LogLine",
        "DictionaryEntry",
        "de",
        "wrong_warning",
        "LogLine",
        "de",
        "Key",
        "de",
        "Value",
        "args",
        "GetOption",
        "args",
        "temp",
        "Usage",
        "GetOption",
        "args",
        "compiler",
        "Usage",
        "WriteLine",
        "compiler",
        "tester",
        "ReflectionTester",
        "Assembly",
        "LoadFile",
        "compiler",
        "WriteLine",
        "File",
        "Exists",
        "compiler",
        "WriteLine",
        "tester",
        "ProcessTester",
        "compiler",
        "GetOption",
        "args",
        "mode",
        "Usage",
        "mode",
        "checker",
        "NegativeChecker",
        "tester",
        "positive",
        "GetOption",
        "args",
        "iltest",
        "checker",
        "PositiveChecker",
        "tester",
        "iltest",
        "positive",
        "iltest",
        "GetOption",
        "args",
        "temp",
        "PositiveChecker",
        "checker",
        "UpdateVerificationDataFile",
        "positive",
        "checker",
        "NUnitChecker",
        "tester",
        "WriteLine",
        "GetOption",
        "args",
        "temp",
        "checker",
        "IssueFile",
        "temp",
        "GetOption",
        "args",
        "temp",
        "checker",
        "LogFile",
        "temp",
        "GetOption",
        "args",
        "temp",
        "checker",
        "Verbose",
        "GetOption",
        "args",
        "temp",
        "checker",
        "DebugMdbUpdate",
        "GetOption",
        "args",
        "temp",
        "checker",
        "SafeExecution",
        "GetOption",
        "args",
        "temp",
        "temp",
        "Split",
        "checker",
        "ExtraCompilerOptions",
        "extra",
        "GetOption",
        "args",
        "test_pattern",
        "Usage",
        "test_pattern",
        "files",
        "AddRange",
        "Directory",
        "GetFiles",
        "positive",
        "files",
        "AddRange",
        "Directory",
        "GetFiles",
        "positive",
        "files",
        "AddRange",
        "Directory",
        "GetFiles",
        "positive",
        "files",
        "AddRange",
        "Directory",
        "GetFiles",
        "positive",
        "files",
        "AddRange",
        "Directory",
        "GetFiles",
        "positive",
        "files",
        "AddRange",
        "Directory",
        "GetFiles",
        "positive",
        "files",
        "AddRange",
        "Directory",
        "GetFiles",
        "positive",
        "files",
        "AddRange",
        "Directory",
        "GetFiles",
        "test_pattern",
        "SearchOption",
        "AllDirectories",
        "files",
        "Count",
        "WriteLine",
        "test_pattern",
        "checker",
        "Initialize",
        "s",
        "files",
        "Path",
        "GetFileName",
        "s",
        "Char",
        "IsUpper",
        "filename",
        "s",
        "EndsWith",
        "checker",
        "Do",
        "s",
        "checker",
        "CleanUp",
        "checker",
        "Dispose",
        "checker",
        "ResultCode",
        "opt",
        "args",
        "req_arg",
        "value",
        "opt",
        "opt",
        "a",
        "args",
        "a",
        "StartsWith",
        "opt",
        "a",
        "IndexOf",
        "sep",
        "value",
        "a",
        "Substring",
        "sep",
        "value",
        "req_arg",
        "WriteLine",
        "opt",
        "value",
        "WriteLine"
    ],
    "literals": [
        "\"Mono.CSharp.CompilerCallableEntryPoint\"",
        "\"null, huh?\"",
        "\"InvokeCompiler\"",
        "\"static InvokeCompiler\"",
        "\"AllWarningNumbers\"",
        "\"/nologo \"",
        "\" \"",
        "\".\"",
        "\" ()\"",
        "\".\"",
        "\" (new string[0])\"",
        "\"::\"",
        "\"Assert.AreEqual (0, {0})\"",
        "\"projects\"",
        "\"MonoTouch\"",
        "\"tests.cs\"",
        "\"extern alias {0};\"",
        "\"    <Reference Include=\\\"{0}\\\">\"",
        "\"      <Aliases>{0}</Aliases>\"",
        "\"      <HintPath>..\\\\..\\\\{0}</HintPath>\"",
        "\"    </Reference>\"",
        "\"using NUnit.Framework;\"",
        "\"[TestFixture]\"",
        "\"public class Tests {\"",
        "\"\\t[Test]\"",
        "\"\\tpublic void TestFile_{0} ()\"",
        "\"\\t{\"",
        "\"\\t\\t{0};\"",
        "\"\\t}\"",
        "\"}\"",
        "\"MonoTouch.csproj.template\"",
        "\"@GENERATED_REFERENCES\"",
        "\"@TEST_SOURCEFILE\"",
        "\"MonoTouch.csproj\"",
        "\"Entry method is private\"",
        "\"Entry method in hidden nested type\"",
        "\"type\"",
        "\"name\"",
        "\"method\"",
        "\"name\"",
        "\"attrs\"",
        "\"size\"",
        "\"test\"",
        "\"name\"",
        "\"type\"",
        "\"name\"",
        "\"method\"",
        "\"name\"",
        "\"attrs\"",
        "\"size\"",
        "\"// Compiler options:\"",
        "\"// Dependencies:\"",
        "\"...\\t\"",
        "\"NOT TESTED\"",
        "\"ERROR\"",
        "\"DEPENDENCY FAILED\"",
        "\"-debug\"",
        "\"IGNORE\"",
        "\"NO ERROR\"",
        "\"SKIP\"",
        "\"#\"",
        "\"Done\"",
        "\"{0} test cases passed ({1:0.##%})\"",
        "\"{0} test(s) ignored because of wrong syntax !\"",
        "\"{0} test(s) ignored\"",
        "\"{0} known issue(s)\"",
        "\"\"",
        "\" contains {0} already fixed issues. Please remove\"",
        "\"\"",
        "\"The latest changes caused regression in {0} file(s)\"",
        "\"...\\t\"",
        "\"MONO_RUNTIME\"",
        "\"-doc:\"",
        "\"Missing IL verification data\"",
        "\": \"",
        "\" (new method?)\"",
        "\": \"",
        "\" has a duplicate\"",
        "\"{0} ({1} -> {2})\"",
        "\": \"",
        "\"{0} (code size reduction {1} -> {2})\"",
        "\": \"",
        "\"{0} (code size {1} -> {2})\"",
        "\": \"",
        "\"Wrong return code: \"",
        "\"-lib.cs\"",
        "\"-mod.cs\"",
        "\"-lib.as\"",
        "\"-lib.play\"",
        "\"OK\"",
        "\"(.cs|.as|.play)$\"",
        "\".exe\"",
        "\"(.cs|.as|.play)$\"",
        "\"-ref.xml\"",
        "\"doc\"",
        "\"test-debug\"",
        "\".mdb\"",
        "\".xml\"",
        "\"(.cs|.as|.play)$\"",
        "\"-ref.xml\"",
        "\"symbols\"",
        "\"Updating: {0}\"",
        "\"symbols\"",
        "\"files\"",
        "\"file\"",
        "\"id\"",
        "\"name\"",
        "\"checksum\"",
        "\"methods\"",
        "\"method\"",
        "\"token\"",
        "\"sequencepoints\"",
        "\"entry\"",
        "\"il\"",
        "\"row\"",
        "\"col\"",
        "\"file_ref\"",
        "\"hidden\"",
        "\"locals\"",
        "\"entry\"",
        "\"name\"",
        "\"il_index\"",
        "\"scope_ref\"",
        "\"scopes\"",
        "\"entry\"",
        "\"index\"",
        "\"start\"",
        "\"end\"",
        "\"0123456789abcdef\"",
        "\"0123456789abcdef\"",
        "\"0x\"",
        "\"x\"",
        "\"true\"",
        "\"false\"",
        "\"FIXED ISSUE\"",
        "\"OK\"",
        "\"KNOWN ISSUE (Compilation error)\"",
        "\"REGRESSION (SUCCESS -> COMPILATION ERROR)\"",
        "\"KNOWN ISSUE (Execution error)\"",
        "\"REGRESSION (SUCCESS -> EXECUTION ERROR)\"",
        "\"KNOWN ISSUE (Xml comparision error)\"",
        "\"REGRESSION (SUCCESS -> DOCUMENTATION ERROR)\"",
        "\": \"",
        "\"REGRESSION (SUCCESS -> LOAD ERROR)\"",
        "\"IL REGRESSION: \"",
        "\"REGRESSION (SUCCESS -> SYMBOL FILE ERROR)\"",
        "\"{0}\"",
        "\"Writing verification data to `{0}' ...\"",
        "\"Loading verification data from `{0}' ...\"",
        "\"tests\"",
        "\"test\"",
        "\"name\"",
        "\"Updating verification data `{0}' ...\"",
        "\"This file contains expected IL and metadata produced by compiler for each test\"",
        "\"tests\"",
        "\"IGNORING: Wrong test file syntax (missing error mesage text)\"",
        "\" \"",
        "\"\"",
        "\"//GMCS\"",
        "\"//Line:0\"",
        "\"//Line:\"",
        "\"IGNORING: Wrong test syntax (following line after an error messsage must have `// Line: xx' syntax\"",
        "\"-warnaserror\"",
        "\"/warnaserror\"",
        "\"CS\"",
        "\"error CS5001\"",
        "\"error \"",
        "\"Location of the symbol related to previous\"",
        "\"Warning as Error: \"",
        "\".cs(\"",
        "\"*PATH*\"",
        "\"*PATH*\"",
        "\"*PATH*\"",
        "\"FIXED ISSUE\"",
        "\"OK\"",
        "\"KNOWN ISSUE (Wrong error reported)\"",
        "\"REGRESSION (NO ERROR -> WRONG ERROR CODE)\"",
        "\"REGRESSION (CORRECT ERROR -> WRONG ERROR CODE)\"",
        "\"KNOWN ISSUE (Wrong error message reported)\"",
        "\"REGRESSION (NO ERROR -> WRONG ERROR MESSAGE)\"",
        "\"REGRESSION (CORRECT ERROR -> WRONG ERROR MESSAGE)\"",
        "\"Exp: {0}\"",
        "\"Was: {0}\"",
        "\"KNOWN ISSUE (No error reported)\"",
        "\"REGRESSION (WRONG ERROR -> NO ERROR)\"",
        "\"REGRESSION (CORRECT ERROR -> NO ERROR)\"",
        "\"KNOWN ISSUE (Missing error location)\"",
        "\"REGRESSION (NO ERROR -> MISSING ERROR LOCATION)\"",
        "\"REGRESSION (CORRECT ERROR -> MISSING ERROR LOCATION)\"",
        "\"WARNING: EXACTLY SAME ERROR HAS BEEN ISSUED MULTIPLE TIMES\"",
        "\"\"",
        "\"List of incorectly defined warnings (they should be either defined in the compiler as a warning or a test-case has redundant `warnaserror' option)\"",
        "\"\"",
        "\"CS{0:0000} : {1}\"",
        "\"incorrect warning definition\"",
        "\"missing warning definition\"",
        "\"help\"",
        "\"compiler\"",
        "\"Loading \"",
        "\" ...\"",
        "\"Switching to command line mode (compiler entry point was not found)\"",
        "\"ERROR: Tested compiler was not found\"",
        "\"mode\"",
        "\"neg\"",
        "\"pos\"",
        "\"il\"",
        "\"update-il\"",
        "\"nunit\"",
        "\"Invalid -mode argument\"",
        "\"issues\"",
        "\"log\"",
        "\"verbose\"",
        "\"update-ref\"",
        "\"safe-execution\"",
        "\"compiler-options\"",
        "\"files\"",
        "\"as\"",
        "\"./as\"",
        "\"test*.as\"",
        "\"cs*.as\"",
        "\"play\"",
        "\"./play\"",
        "\"test*.play\"",
        "\"cs*.play\"",
        "\"playscript\"",
        "\"./as\"",
        "\"test*.play\"",
        "\"cs*.play\"",
        "\"./play\"",
        "\"test*.as\"",
        "\"cs*.as\"",
        "\"v1\"",
        "\".\"",
        "\"test*.cs\"",
        "\"cs*.cs\"",
        "\"v2\"",
        "\".\"",
        "\"gtest*.cs\"",
        "\"gcs*.cs\"",
        "\"v1\"",
        "\"v4\"",
        "\".\"",
        "\"dtest*.cs\"",
        "\"dcs*.cs\"",
        "\"v2\"",
        "\".\"",
        "\"No files matching `{0}' found\"",
        "\"-p2.cs\"",
        "\"-\"",
        "\"Missing argument in option \"",
        "\"PlayScript compiler tester, (C) 2009 Novell, Inc. (C) SushiHangover/RobertN\\n\"",
        "\"playc-tester -mode:[pos|neg] -compiler:FILE -files:file-list [options]\\n\"",
        "\"   \\n\"",
        "\"   -compiler:FILE   The file which will be used to compiler tests\\n\"",
        "\"   -compiler-options:OPTIONS  Add global compiler options\\n\"",
        "\"   -il:IL-FILE      XML file with expected IL details for each test\\n\"",
        "\"   -issues:FILE     The list of expected failures\\n\"",
        "\"   -log:FILE        Writes any output also to the file\\n\"",
        "\"   -help            Lists all options\\n\"",
        "\"   -mode:[pos|neg]  Specifies compiler test mode\\n\"",
        "\"   -safe-execution  Runs compiled executables in separate app-domain\\n\"",
        "\"   -update-il       Updates IL-FILE to match compiler output\\n\"",
        "\"   -update-ref      Updates the debug xml to match debug compiler mdb output\\n\"",
        "\"   -verbose         Prints more details during testing\\n\""
    ],
    "variables": [
        "Output",
        "MethodInfo",
        "ep",
        "method_arg",
        "StringWriter",
        "output",
        "all_warnings",
        "Type",
        "t",
        "PropertyInfo",
        "pi",
        "Output",
        "ProcessStartInfo",
        "pi",
        "output",
        "Output",
        "StringBuilder",
        "sb",
        "Process",
        "p",
        "FileName",
        "CompilerOptions",
        "Dependencies",
        "name",
        "referenceFile",
        "executedMethod",
        "has_return",
        "Name",
        "ReferenceFile",
        "declaring",
        "param",
        "call",
        "entries",
        "StringBuilder",
        "aliases",
        "src_dir",
        "src_file",
        "file",
        "input",
        "Assembly",
        "assembly",
        "ep",
        "Type",
        "MethodName",
        "ILSize",
        "Checked",
        "MethodAttributes",
        "methods",
        "IsNewSet",
        "test_file",
        "VerificationData",
        "tc",
        "methods",
        "type_name",
        "m_name",
        "method_attrs",
        "il_size",
        "v",
        "MethodData",
        "md",
        "VerificationData",
        "verif_data",
        "VerificationData",
        "VerificationProvider",
        "ITester",
        "tester",
        "success",
        "total",
        "ignored",
        "syntax_errors",
        "issue_file",
        "StreamWriter",
        "log_file",
        "extra_compiler_options",
        "tests",
        "Hashtable",
        "test_hash",
        "regression",
        "know_issues",
        "ignore_list",
        "no_error_list",
        "skip",
        "debug_mdb_update",
        "verbose",
        "safe_execution",
        "total_known_issues",
        "IssueFile",
        "LogFile",
        "Verbose",
        "DebugMdbUpdate",
        "SafeExecution",
        "ExtraCompilerOptions",
        "row",
        "StreamReader",
        "sr",
        "line",
        "options",
        "depends",
        "index",
        "i",
        "i",
        "compiler_options",
        "dependencies",
        "new_options",
        "TestCase",
        "test",
        "test_args",
        "ignored",
        "no_error",
        "skip_tag",
        "StreamReader",
        "sr",
        "line",
        "active_cont",
        "know_issues",
        "file_name",
        "rate",
        "ResultCode",
        "s",
        "files_folder",
        "default_args",
        "doc_output",
        "verif_file",
        "update_verif_file",
        "Hashtable",
        "verif_data",
        "ProcessStartInfo",
        "pi",
        "mono",
        "UpdateVerificationDataFile",
        "Assembly",
        "assembly",
        "success",
        "types",
        "MethodBase",
        "mi",
        "m_name",
        "decl_type",
        "data_provider",
        "md",
        "il_size",
        "MethodBody",
        "body",
        "TextWriter",
        "stdout",
        "TextWriter",
        "stderr",
        "pi",
        "args",
        "result",
        "Assembly",
        "assembly",
        "filename",
        "file",
        "filename",
        "AppDomain",
        "domain",
        "AppDomainSetup",
        "setupInfo",
        "DomainTester",
        "tester",
        "ref_file",
        "PositiveTestCase",
        "pt",
        "mdb_file_name",
        "MonoSymbolFile",
        "mdb_file",
        "mdb_xml_file",
        "ref_file",
        "XmlTextWriter",
        "writer",
        "checksum",
        "il_entries",
        "sb",
        "i",
        "XmlReader",
        "r",
        "name",
        "tc",
        "XmlWriterSettings",
        "s",
        "XmlWriter",
        "w",
        "expected_message",
        "error_message",
        "check_msg",
        "check_error_line",
        "is_warning",
        "IDictionary",
        "wrong_warning",
        "index",
        "filtered",
        "filename",
        "start_char",
        "end_char",
        "expected",
        "err_id",
        "CompilerError",
        "result_code",
        "error_prefix",
        "ignored_error",
        "tested_text",
        "StringReader",
        "sr",
        "line",
        "ld",
        "CompilerError",
        "result",
        "first",
        "second",
        "msg",
        "path_mask_start",
        "path_mask_continue",
        "expected_continue",
        "path",
        "temp",
        "compiler",
        "ITester",
        "tester",
        "mode",
        "Checker",
        "checker",
        "positive",
        "iltest",
        "extra",
        "test_pattern",
        "files",
        "filename",
        "sep"
    ],
    "comments": [
        "",
        "compiler-tester.cs",
        "",
        "Author:",
        "Marek Safar (marek.safar@gmail.com)",
        "",
        "Copyright (C) 2008, 2009 Novell, Inc (http://www.novell.com)",
        "Copyright (C) 2012 Xamarin Inc (http://www.xamarin.com)",
        "",
        "Permission is hereby granted, free of charge, to any person obtaining",
        "a copy of this software and associated documentation files (the",
        "\"Software\"), to deal in the Software without restriction, including",
        "without limitation the rights to use, copy, modify, merge, publish,",
        "distribute, sublicense, and/or sell copies of the Software, and to",
        "permit persons to whom the Software is furnished to do so, subject to",
        "the following conditions:",
        "",
        "The above copyright notice and this permission notice shall be",
        "included in all copies or substantial portions of the Software.",
        "",
        "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,",
        "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF",
        "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND",
        "NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE",
        "LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION",
        "OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION",
        "WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
        "",
        "Console.WriteLine (String.Join (\" : \",  args));",
        "protected string[] compiler_options;",
        "protected string[] dependencies;",
        "Skip interfaces",
        "Test setup",
        "string file = Path.Combine (files_folder, Path.GetFileNameWithoutExtension (filename) + \".exe\");",
        "Enable .dll only tests (no execution required)",
        "Create a new AppDomain, with the current directory as the base.",
        "string ref_file = filename.Replace (Path.GetExtension (filename), \"-ref.xml\");",
        "Console.WriteLine (\"ver: \" + filename);",
        "var ref_file = Path.GetFullPath (Regex.Replace(filename, \"(.cs|.as|.play)$\", \"-ref.xml\"));",
        "Console.WriteLine (\"ref: \" + ref_file);",
        "Console.WriteLine (\"mdb: \" + mdb_xml_file);",
        "Some error tests require to have different error text for different runtimes.",
        "Will become an error soon",
        "files.Sort ((a, b) => {\n\t\t\t\tif (a.EndsWith (\"-lib.cs\", StringComparison.Ordinal)) {\n\t\t\t\t\tif (!b.EndsWith (\"-lib.cs\", StringComparison.Ordinal))\n\t\t\t\t\t\treturn -1;\n\t\t\t\t} else if (b.EndsWith (\"-lib.cs\", StringComparison.Ordinal)) {\n\t\t\t\t\tif (!a.EndsWith (\"-lib.cs\", StringComparison.Ordinal))\n\t\t\t\t\t\treturn 1;\n\t\t\t\t}\n\n\t\t\t\treturn a.CompareTo (b);\n\t\t\t});",
        "Windows hack"
    ],
    "docstrings": [],
    "functions": [
        "Invoke",
        "IsWarning",
        "ReflectionTester",
        "Invoke",
        "IsWarning",
        "ProcessTester",
        "Invoke",
        "IsWarning",
        "TestCase",
        "TestCaseEntry",
        "ConvertMethodInfoToText",
        "GetTestFixture",
        "NUnitChecker",
        "CleanUp",
        "ExecuteTestFile",
        "MethodData",
        "MethodData",
        "VerificationData",
        "VerificationData",
        "FromFile",
        "WriteCodeInfoTo",
        "MethodData",
        "FindMethodData",
        "AddNewMethod",
        "PositiveTestCase",
        "CreateNewTest",
        "Checker",
        "GetExtraOptions",
        "AnalyzeTestFile",
        "Do",
        "Check",
        "TestCase",
        "CreateTestCase",
        "ReadWrongErrors",
        "PrintSummary",
        "Log",
        "LogLine",
        "LogLine",
        "LogFileLine",
        "Dispose",
        "Initialize",
        "CleanUp",
        "PositiveChecker",
        "GetExtraOptions",
        "CheckILSize",
        "CompareIL",
        "GetILSize",
        "ExecuteFile",
        "Test",
        "Check",
        "ExecuteTestFile",
        "ConvertSymbolFileToXml",
        "ChecksumToString",
        "IntToHex",
        "BoolToString",
        "TestCase",
        "CreateTestCase",
        "HandleFailure",
        "Initialize",
        "CleanUp",
        "LoadVerificationData",
        "UpdateVerificationData",
        "NegativeChecker",
        "AnalyzeTestFile",
        "Check",
        "CompilerError",
        "GetCompilerError",
        "TryToMatchErrorMessage",
        "HandleFailure",
        "PrintSummary",
        "Main",
        "GetOption",
        "Usage"
    ],
    "classes": [
        "ReflectionTester",
        "ProcessTester",
        "TestCase",
        "NUnitChecker",
        "TestCaseEntry",
        "PositiveTestCase",
        "VerificationData",
        "MethodData",
        "Checker",
        "PositiveChecker",
        "DomainTester",
        "NegativeChecker",
        "Tester"
    ]
}