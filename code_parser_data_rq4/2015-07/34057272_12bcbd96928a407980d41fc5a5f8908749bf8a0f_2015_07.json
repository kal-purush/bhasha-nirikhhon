{
    "identifiers": [
        "sys",
        "serial",
        "math",
        "time",
        "argparse",
        "os",
        "subprocess",
        "port",
        "baud",
        "ESP_ROM_BAUD",
        "serial",
        "Serial",
        "port",
        "baud",
        "length",
        "len",
        "b",
        "length",
        "_port",
        "read",
        "c",
        "_port",
        "read",
        "c",
        "b",
        "c",
        "b",
        "b",
        "c",
        "b",
        "packet",
        "b",
        "packet",
        "b",
        "buf",
        "b",
        "buf",
        "buf",
        "b",
        "buf",
        "_port",
        "write",
        "buf",
        "staticmethod",
        "data",
        "state",
        "ESP_CHECKSUM_MAGIC",
        "b",
        "data",
        "state",
        "ord",
        "b",
        "state",
        "op",
        "data",
        "chk",
        "op",
        "pack",
        "op",
        "len",
        "data",
        "chk",
        "data",
        "write",
        "pkt",
        "_port",
        "read",
        "read",
        "unpack",
        "hdr",
        "resp",
        "op",
        "op_ret",
        "op",
        "read",
        "len_ret",
        "_port",
        "read",
        "chr",
        "val",
        "body",
        "command",
        "ESPROM",
        "ESP_SYNC",
        "i",
        "xrange",
        "command",
        "_port",
        "setRTS",
        "_port",
        "setDTR",
        "_port",
        "setRTS",
        "time",
        "sleep",
        "_port",
        "setDTR",
        "_port",
        "i",
        "xrange",
        "_port",
        "flushInput",
        "_port",
        "flushOutput",
        "sync",
        "_port",
        "time",
        "sleep",
        "addr",
        "command",
        "ESPROM",
        "ESP_READ_REG",
        "pack",
        "addr",
        "res",
        "res",
        "addr",
        "value",
        "mask",
        "delay_us",
        "command",
        "ESPROM",
        "ESP_WRITE_REG",
        "pack",
        "addr",
        "value",
        "mask",
        "delay_us",
        "size",
        "blocks",
        "blocksize",
        "offset",
        "command",
        "ESPROM",
        "ESP_MEM_BEGIN",
        "pack",
        "size",
        "blocks",
        "blocksize",
        "offset",
        "data",
        "seq",
        "command",
        "ESPROM",
        "ESP_MEM_DATA",
        "pack",
        "len",
        "data",
        "seq",
        "data",
        "ESPROM",
        "checksum",
        "data",
        "entrypoint",
        "command",
        "ESPROM",
        "ESP_MEM_END",
        "pack",
        "entrypoint",
        "entrypoint",
        "size",
        "offset",
        "_port",
        "timeout",
        "size",
        "ESPROM",
        "ESP_FLASH_BLOCK",
        "ESPROM",
        "ESP_FLASH_BLOCK",
        "_port",
        "command",
        "ESPROM",
        "ESP_FLASH_BEGIN",
        "pack",
        "size",
        "num_blocks",
        "ESPROM",
        "ESP_FLASH_BLOCK",
        "offset",
        "_port",
        "old_tmo",
        "data",
        "seq",
        "command",
        "ESPROM",
        "ESP_FLASH_DATA",
        "pack",
        "len",
        "data",
        "seq",
        "data",
        "ESPROM",
        "checksum",
        "data",
        "reboot",
        "pack",
        "reboot",
        "command",
        "ESPROM",
        "ESP_FLASH_END",
        "pkt",
        "reboot",
        "flash_begin",
        "flash_finish",
        "reboot",
        "filename",
        "filename",
        "file",
        "filename",
        "entrypoint",
        "unpack",
        "f",
        "read",
        "magic",
        "ESPROM",
        "ESP_IMAGE_MAGIC",
        "segments",
        "i",
        "xrange",
        "segments",
        "unpack",
        "f",
        "read",
        "offset",
        "offset",
        "size",
        "offset",
        "size",
        "segments",
        "append",
        "offset",
        "size",
        "f",
        "read",
        "size",
        "f",
        "tell",
        "f",
        "seek",
        "align",
        "ord",
        "f",
        "read",
        "addr",
        "data",
        "len",
        "data",
        "l",
        "data",
        "l",
        "segments",
        "append",
        "addr",
        "len",
        "data",
        "data",
        "filename",
        "file",
        "filename",
        "f",
        "write",
        "pack",
        "ESPROM",
        "ESP_IMAGE_MAGIC",
        "len",
        "segments",
        "entrypoint",
        "ESPROM",
        "ESP_CHECKSUM_MAGIC",
        "offset",
        "size",
        "data",
        "segments",
        "f",
        "write",
        "pack",
        "offset",
        "size",
        "f",
        "write",
        "data",
        "ESPROM",
        "checksum",
        "data",
        "checksum",
        "f",
        "tell",
        "f",
        "seek",
        "align",
        "f",
        "write",
        "pack",
        "checksum",
        "name",
        "name",
        "symbols",
        "os",
        "getenv",
        "subprocess",
        "Popen",
        "tool_nm",
        "name",
        "stdout",
        "subprocess",
        "PIPE",
        "OSError",
        "tool_nm",
        "sys",
        "exit",
        "l",
        "proc",
        "stdout",
        "l",
        "strip",
        "split",
        "symbols",
        "fields",
        "fields",
        "sym",
        "_fetch_symbols",
        "symbols",
        "sym",
        "section",
        "os",
        "getenv",
        "subprocess",
        "check_call",
        "tool_objcopy",
        "section",
        "name",
        "open",
        "f",
        "read",
        "f",
        "close",
        "os",
        "remove",
        "data",
        "x",
        "x",
        "argparse",
        "ArgumentParser",
        "description",
        "prog",
        "parser",
        "add_argument",
        "help",
        "parser",
        "add_argument",
        "help",
        "arg_auto_int",
        "ESPROM",
        "ESP_ROM_BAUD",
        "parser",
        "add_subparsers",
        "dest",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_load_ram",
        "add_argument",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_dump_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_dump_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_dump_mem",
        "add_argument",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_read_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "subparsers",
        "add_parser",
        "help",
        "parser_write_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_write_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "parser_write_mem",
        "add_argument",
        "help",
        "arg_auto_int",
        "subparsers",
        "add_parser",
        "help",
        "parser_write_flash",
        "add_argument",
        "nargs",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_image_info",
        "add_argument",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser_make_image",
        "add_argument",
        "help",
        "parser_make_image",
        "add_argument",
        "action",
        "help",
        "parser_make_image",
        "add_argument",
        "action",
        "help",
        "arg_auto_int",
        "parser_make_image",
        "add_argument",
        "help",
        "arg_auto_int",
        "subparsers",
        "add_parser",
        "help",
        "parser_elf2image",
        "add_argument",
        "help",
        "parser_elf2image",
        "add_argument",
        "help",
        "subparsers",
        "add_parser",
        "help",
        "parser",
        "parse_args",
        "args",
        "operation",
        "ESPROM",
        "args",
        "port",
        "args",
        "baud",
        "esp",
        "connect",
        "args",
        "operation",
        "ESPFirmwareImage",
        "args",
        "filename",
        "offset",
        "size",
        "data",
        "image",
        "segments",
        "size",
        "offset",
        "sys",
        "stdout",
        "flush",
        "esp",
        "mem_begin",
        "size",
        "math",
        "ceil",
        "size",
        "esp",
        "ESP_RAM_BLOCK",
        "esp",
        "ESP_RAM_BLOCK",
        "offset",
        "len",
        "data",
        "esp",
        "mem_block",
        "data",
        "esp",
        "ESP_RAM_BLOCK",
        "seq",
        "data",
        "esp",
        "ESP_RAM_BLOCK",
        "seq",
        "image",
        "entrypoint",
        "esp",
        "mem_finish",
        "image",
        "entrypoint",
        "args",
        "operation",
        "args",
        "address",
        "esp",
        "read_reg",
        "args",
        "address",
        "args",
        "operation",
        "esp",
        "write_reg",
        "args",
        "address",
        "args",
        "value",
        "args",
        "mask",
        "args",
        "value",
        "args",
        "mask",
        "args",
        "address",
        "args",
        "operation",
        "file",
        "args",
        "filename",
        "i",
        "xrange",
        "args",
        "size",
        "esp",
        "read_reg",
        "args",
        "address",
        "i",
        "f",
        "write",
        "pack",
        "d",
        "f",
        "tell",
        "f",
        "tell",
        "f",
        "tell",
        "args",
        "size",
        "sys",
        "stdout",
        "flush",
        "args",
        "operation",
        "len",
        "args",
        "addr_filename",
        "args",
        "addr_filename",
        "args",
        "addr_filename",
        "args",
        "addr_filename",
        "args",
        "addr_filename",
        "file",
        "filename",
        "read",
        "math",
        "ceil",
        "len",
        "image",
        "esp",
        "ESP_FLASH_BLOCK",
        "esp",
        "flash_begin",
        "blocks",
        "esp",
        "ESP_FLASH_BLOCK",
        "address",
        "len",
        "image",
        "address",
        "seq",
        "esp",
        "ESP_FLASH_BLOCK",
        "seq",
        "blocks",
        "sys",
        "stdout",
        "flush",
        "image",
        "esp",
        "ESP_FLASH_BLOCK",
        "block",
        "esp",
        "ESP_FLASH_BLOCK",
        "len",
        "block",
        "esp",
        "flash_block",
        "block",
        "seq",
        "image",
        "esp",
        "ESP_FLASH_BLOCK",
        "seq",
        "esp",
        "flash_finish",
        "args",
        "operation",
        "esp",
        "run",
        "args",
        "operation",
        "ESPFirmwareImage",
        "args",
        "filename",
        "image",
        "entrypoint",
        "image",
        "entrypoint",
        "len",
        "image",
        "segments",
        "ESPROM",
        "ESP_CHECKSUM_MAGIC",
        "idx",
        "offset",
        "size",
        "data",
        "image",
        "segments",
        "idx",
        "size",
        "offset",
        "ESPROM",
        "checksum",
        "data",
        "checksum",
        "image",
        "checksum",
        "image",
        "checksum",
        "checksum",
        "args",
        "operation",
        "ESPFirmwareImage",
        "len",
        "args",
        "segfile",
        "len",
        "args",
        "segfile",
        "len",
        "args",
        "segaddr",
        "seg",
        "addr",
        "args",
        "segfile",
        "args",
        "segaddr",
        "file",
        "seg",
        "read",
        "image",
        "add_segment",
        "addr",
        "data",
        "args",
        "entrypoint",
        "image",
        "save",
        "args",
        "output",
        "args",
        "operation",
        "args",
        "output",
        "args",
        "input",
        "ELFFile",
        "args",
        "input",
        "ESPFirmwareImage",
        "e",
        "get_symbol_addr",
        "section",
        "start",
        "e",
        "load_section",
        "section",
        "image",
        "add_segment",
        "e",
        "get_symbol_addr",
        "start",
        "data",
        "image",
        "save",
        "args",
        "output",
        "e",
        "load_section",
        "e",
        "get_symbol_addr",
        "off",
        "open",
        "args",
        "output",
        "off",
        "f",
        "write",
        "data",
        "f",
        "close",
        "args",
        "operation",
        "esp",
        "read_reg",
        "esp",
        "ESP_OTP_MAC0",
        "esp",
        "read_reg",
        "esp",
        "ESP_OTP_MAC1",
        "mac1",
        "mac1",
        "mac0"
    ],
    "literals": [
        "''",
        "'\\xdb'",
        "'\\xdc'",
        "'\\xc0'",
        "'\\xdd'",
        "'\\xdb'",
        "'Invalid SLIP escape'",
        "'\\xc0'",
        "'\\xc0'",
        "'\\xdb\\xdc'",
        "'\\xdb'",
        "'\\xdb\\xdd'",
        "'\\xc0'",
        "'<BBHI'",
        "'\\xc0'",
        "'Invalid head of packet'",
        "'<BBHI'",
        "'Invalid response'",
        "'Invalid end of packet'",
        "'\\x07\\x07\\x12\\x20'",
        "'\\x55'",
        "'Connecting...'",
        "'Failed to connect'",
        "'<I'",
        "\"\\0\\0\"",
        "'Failed to read target memory'",
        "'<IIII'",
        "\"\\0\\0\"",
        "'Failed to write target memory'",
        "'<IIII'",
        "\"\\0\\0\"",
        "'Failed to enter RAM download mode'",
        "'<IIII'",
        "\"\\0\\0\"",
        "'Failed to write to target RAM'",
        "'<II'",
        "\"\\0\\0\"",
        "'Failed to leave RAM download mode'",
        "'<IIII'",
        "\"\\0\\0\"",
        "'Failed to enter Flash download mode'",
        "'<IIII'",
        "\"\\0\\0\"",
        "'Failed to write to target Flash'",
        "'<I'",
        "\"\\0\\0\"",
        "'Failed to leave Flash mode'",
        "'rb'",
        "'<BBBBI'",
        "'Invalid firmware image'",
        "'<II'",
        "'Suspicious segment %x,%d'",
        "b\"\\x00\"",
        "'wb'",
        "'<BBBBI'",
        "'<II'",
        "'B'",
        "\"xtensa-lx106-elf-nm\"",
        "'XTENSA_CORE'",
        "'lx106'",
        "\"xt-nm\"",
        "\"Error calling \"",
        "\", do you have Xtensa toolchain in PATH?\"",
        "\"xtensa-lx106-elf-objcopy\"",
        "'XTENSA_CORE'",
        "'lx106'",
        "\"xt-objcopy\"",
        "\"--only-section\"",
        "\"-Obinary\"",
        "\".tmp.section\"",
        "\".tmp.section\"",
        "\"rb\"",
        "\".tmp.section\"",
        "'__main__'",
        "'ESP8266 ROM Bootloader Utility'",
        "'esptool'",
        "'--port'",
        "'-p'",
        "'Serial port device'",
        "'/dev/ttyUSB0'",
        "'--baud'",
        "'-b'",
        "'Serial port baud rate'",
        "'operation'",
        "'Run esptool {command} -h for additional help'",
        "'load_ram'",
        "'Download an image to RAM and execute'",
        "'filename'",
        "'Firmware image'",
        "'dump_mem'",
        "'Dump arbitrary memory to disk'",
        "'address'",
        "'Base address'",
        "'size'",
        "'Size of region to dump'",
        "'filename'",
        "'Name of binary dump'",
        "'read_mem'",
        "'Read arbitrary memory location'",
        "'address'",
        "'Address to read'",
        "'write_mem'",
        "'Read-modify-write to arbitrary memory location'",
        "'address'",
        "'Address to write'",
        "'value'",
        "'Value'",
        "'mask'",
        "'Mask of bits to write'",
        "'write_flash'",
        "'Write a binary blob to flash'",
        "'addr_filename'",
        "'+'",
        "'Address and binary file to write there, separated by space'",
        "'run'",
        "'Run application code in flash'",
        "'image_info'",
        "'Dump headers from an application image'",
        "'filename'",
        "'Image file to parse'",
        "'make_image'",
        "'Create an application image from binary files'",
        "'output'",
        "'Output image file'",
        "'--segfile'",
        "'-f'",
        "'append'",
        "'Segment input file'",
        "'--segaddr'",
        "'-a'",
        "'append'",
        "'Segment base address'",
        "'--entrypoint'",
        "'-e'",
        "'Address of entry point'",
        "'elf2image'",
        "'Create an application image from ELF file'",
        "'input'",
        "'Input ELF file'",
        "'--output'",
        "'-o'",
        "'Output filename prefix'",
        "'read_mac'",
        "'Read MAC address from OTP ROM'",
        "'image_info'",
        "'make_image'",
        "'elf2image'",
        "'load_ram'",
        "'RAM boot...'",
        "'Downloading %d bytes at %08x...'",
        "'done!'",
        "'All segments done, executing at %08x'",
        "'read_mem'",
        "'0x%08x = 0x%08x'",
        "'write_mem'",
        "'Wrote %08x, mask %08x to %08x'",
        "'dump_mem'",
        "'wb'",
        "'<I'",
        "'\\r%d bytes read... (%d %%)'",
        "'Done!'",
        "'write_flash'",
        "'rb'",
        "'Erasing flash...'",
        "'\\rWriting at 0x%08x... (%d %%)'",
        "'\\xe0'",
        "'\\nLeaving...'",
        "'run'",
        "'image_info'",
        "'Entry point: %08x'",
        "'Entry point not set'",
        "'%d segments'",
        "'Segment %d: %5d bytes at %08x'",
        "'Checksum: %02x (%s)'",
        "'valid'",
        "'invalid!'",
        "'make_image'",
        "'No segments specified'",
        "'Number of specified files does not match number of specified addresses'",
        "'rb'",
        "'elf2image'",
        "'-'",
        "\"call_user_start\"",
        "\".text\"",
        "\"_text_start\"",
        "\".data\"",
        "\"_data_start\"",
        "\".rodata\"",
        "\"_rodata_start\"",
        "\"0x00000.bin\"",
        "\".irom0.text\"",
        "\"_irom0_text_start\"",
        "\"0x%05x.bin\"",
        "\"wb\"",
        "'read_mac'",
        "'MAC: 18:fe:34:%02x:%02x:%02x'"
    ],
    "variables": [
        "ESP_FLASH_BEGIN",
        "ESP_FLASH_DATA",
        "ESP_FLASH_END",
        "ESP_MEM_BEGIN",
        "ESP_MEM_END",
        "ESP_MEM_DATA",
        "ESP_SYNC",
        "ESP_WRITE_REG",
        "ESP_READ_REG",
        "ESP_RAM_BLOCK",
        "ESP_FLASH_BLOCK",
        "ESP_ROM_BAUD",
        "ESP_IMAGE_MAGIC",
        "ESP_CHECKSUM_MAGIC",
        "ESP_OTP_MAC0",
        "ESP_OTP_MAC1",
        "_port",
        "b",
        "c",
        "c",
        "b",
        "b",
        "b",
        "buf",
        "pkt",
        "hdr",
        "resp",
        "op_ret",
        "len_ret",
        "val",
        "body",
        "timeout",
        "timeout",
        "res",
        "old_tmo",
        "num_blocks",
        "timeout",
        "timeout",
        "pkt",
        "segments",
        "entrypoint",
        "f",
        "magic",
        "segments",
        "_",
        "_",
        "offset",
        "size",
        "align",
        "checksum",
        "l",
        "f",
        "checksum",
        "checksum",
        "align",
        "name",
        "symbols",
        "symbols",
        "tool_nm",
        "tool_nm",
        "proc",
        "fields",
        "tool_objcopy",
        "tool_objcopy",
        "f",
        "data",
        "parser",
        "subparsers",
        "parser_load_ram",
        "parser_dump_mem",
        "parser_read_mem",
        "parser_write_mem",
        "parser_write_flash",
        "parser_run",
        "parser_image_info",
        "parser_make_image",
        "parser_elf2image",
        "parser_read_mac",
        "args",
        "esp",
        "esp",
        "image",
        "seq",
        "data",
        "f",
        "d",
        "address",
        "filename",
        "args",
        "addr_filename",
        "image",
        "blocks",
        "seq",
        "block",
        "block",
        "image",
        "image",
        "checksum",
        "checksum",
        "image",
        "data",
        "image",
        "entrypoint",
        "args",
        "output",
        "e",
        "image",
        "image",
        "entrypoint",
        "data",
        "data",
        "off",
        "f",
        "mac0",
        "mac1"
    ],
    "comments": [
        "!/usr/bin/env python",
        "",
        "ESP8266 ROM Bootloader Utility",
        "https://github.com/themadinventor/esptool",
        "",
        "Copyright (C) 2014 Fredrik Ahlberg",
        "",
        "This program is free software; you can redistribute it and/or modify it under",
        "the terms of the GNU General Public License as published by the Free Software",
        "Foundation; either version 2 of the License, or (at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful, but WITHOUT",
        "ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS",
        "FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License along with",
        "this program; if not, write to the Free Software Foundation, Inc., 51 Franklin",
        "Street, Fifth Floor, Boston, MA 02110-1301 USA.",
        "These are the currently known commands supported by the ROM",
        "Maximum block sized for RAM and Flash writes, respectively.",
        "Default baudrate. The ROM auto-bauds, so we can use more or less whatever we want.",
        "First byte of the application image",
        "Initial state for the checksum routine",
        "OTP ROM addresses",
        "Construct and send request",
        "Read header of response and parse",
        "The variable-length body",
        "Terminating byte",
        "RTS = CH_PD (i.e reset)",
        "DTR = GPIO0",
        "Fake flash begin immediately followed by flash end",
        "some sanity check",
        "Skip the padding. The checksum is stored in the last byte so that the",
        "file is a multiple of 16 bytes.",
        "Data should be aligned on word boundary",
        "Create the ESPROM connection object, if needed",
        "Do the actual work. Should probably be split into separate functions."
    ],
    "docstrings": [
        "\"\"\" Read bytes from the serial port while performing SLIP unescaping \"\"\"",
        "\"\"\" Write bytes to the serial port while performing SLIP escaping \"\"\"",
        "\"\"\" Calculate checksum of a blob, as it is defined by the ROM \"\"\"",
        "\"\"\" Send a request and read the response \"\"\"",
        "\"\"\" Perform a connection test \"\"\"",
        "\"\"\" Try connecting repeatedly until successful, or giving up \"\"\"",
        "\"\"\" Read memory address in target \"\"\"",
        "\"\"\" Write to memory address in target \"\"\"",
        "\"\"\" Start downloading an application image to RAM \"\"\"",
        "\"\"\" Send a block of an image to RAM \"\"\"",
        "\"\"\" Leave download mode and run the application \"\"\"",
        "\"\"\" Start downloading to Flash (performs an erase) \"\"\"",
        "\"\"\" Write block to flash \"\"\"",
        "\"\"\" Leave flash mode and run/reboot \"\"\"",
        "\"\"\" Run application code in flash \"\"\""
    ],
    "functions": [
        "read",
        "write",
        "checksum",
        "command",
        "sync",
        "connect",
        "read_reg",
        "write_reg",
        "mem_begin",
        "mem_block",
        "mem_finish",
        "flash_begin",
        "flash_block",
        "flash_finish",
        "run",
        "add_segment",
        "save",
        "_fetch_symbols",
        "get_symbol_addr",
        "load_section",
        "arg_auto_int"
    ],
    "classes": [
        "ESPROM",
        "ESPFirmwareImage",
        "ELFFile"
    ]
}