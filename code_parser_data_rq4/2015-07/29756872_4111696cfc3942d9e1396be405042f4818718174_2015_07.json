{
    "identifiers": [
        "expr_parser",
        "visitors",
        "tec",
        "units",
        "ri",
        "AbstractUnit",
        "ONE",
        "java",
        "util",
        "java",
        "util",
        "javax",
        "measure",
        "IncommensurableException",
        "javax",
        "measure",
        "Quantity",
        "javax",
        "measure",
        "UnconvertibleException",
        "javax",
        "measure",
        "Unit",
        "javax",
        "measure",
        "UnitConverter",
        "org",
        "antlr",
        "v4",
        "runtime",
        "misc",
        "ParseCancellationException",
        "parser",
        "LEMSExpressionBaseVisitor",
        "parser",
        "LEMSExpressionParser",
        "tec",
        "units",
        "ri",
        "quantity",
        "Quantities",
        "context",
        "unitContext",
        "quantities",
        "units",
        "context",
        "quantities",
        "unitContext",
        "units",
        "Override",
        "ctx",
        "result",
        "visit",
        "ctx",
        "arithmetic",
        "result",
        "Override",
        "ctx",
        "id",
        "ctx",
        "ID",
        "getText",
        "context",
        "get",
        "id",
        "Override",
        "ctx",
        "visit",
        "ctx",
        "arithmetic",
        "Override",
        "ctx",
        "left",
        "visit",
        "ctx",
        "arithmetic",
        "right",
        "visit",
        "ctx",
        "arithmetic",
        "right",
        "getUnit",
        "isCompatible",
        "ONE",
        "msgSb",
        "msgSb",
        "append",
        "msgSb",
        "append",
        "ctx",
        "arithmetic",
        "getText",
        "ctx",
        "op",
        "getText",
        "ctx",
        "arithmetic",
        "getText",
        "msgSb",
        "append",
        "msgSb",
        "append",
        "right",
        "getUnit",
        "getDimension",
        "msgSb",
        "toString",
        "exponent",
        "right",
        "getValue",
        "intValue",
        "Quantities",
        "getQuantity",
        "pow",
        "left",
        "getValue",
        "doubleValue",
        "exponent",
        "left",
        "getUnit",
        "pow",
        "exponent",
        "Override",
        "ctx",
        "Quantities",
        "getQuantity",
        "valueOf",
        "ctx",
        "getText",
        "ONE",
        "Override",
        "ctx",
        "Quantities",
        "getQuantity",
        "valueOf",
        "ctx",
        "FLOAT",
        "getText",
        "unitContext",
        "get",
        "ctx",
        "ID",
        "getText",
        "Override",
        "ctx",
        "left",
        "visit",
        "ctx",
        "arithmetic",
        "right",
        "visit",
        "ctx",
        "arithmetic",
        "ctx",
        "op",
        "getType",
        "LEMSExpressionParser",
        "MUL",
        "left",
        "multiply",
        "right",
        "left",
        "divide",
        "right",
        "Override",
        "ctx",
        "left",
        "visit",
        "ctx",
        "arithmetic",
        "right",
        "visit",
        "ctx",
        "arithmetic",
        "converterToAny",
        "converterToAny",
        "right",
        "getUnit",
        "getConverterToAny",
        "left",
        "getUnit",
        "e",
        "msgSb",
        "msgSb",
        "append",
        "msgSb",
        "append",
        "left",
        "getUnit",
        "getDimension",
        "msgSb",
        "append",
        "msgSb",
        "append",
        "right",
        "getUnit",
        "getDimension",
        "msgSb",
        "append",
        "msgSb",
        "append",
        "ctx",
        "arithmetic",
        "getText",
        "ctx",
        "op",
        "getText",
        "ctx",
        "arithmetic",
        "getText",
        "msgSb",
        "toString",
        "rightVal",
        "converterToAny",
        "convert",
        "right",
        "getValue",
        "doubleValue",
        "leftVal",
        "left",
        "getValue",
        "doubleValue",
        "ctx",
        "op",
        "getType",
        "LEMSExpressionParser",
        "ADD",
        "Quantities",
        "getQuantity",
        "leftVal",
        "rightVal",
        "left",
        "getUnit",
        "Quantities",
        "getQuantity",
        "leftVal",
        "rightVal",
        "left",
        "getUnit",
        "Override",
        "ctx",
        "visit",
        "ctx",
        "arithmetic",
        "Override",
        "ctx",
        "ret",
        "ret",
        "visit",
        "ctx",
        "arithmetic",
        "ret",
        "getUnit",
        "isCompatible",
        "ONE",
        "msgSb",
        "msgSb",
        "append",
        "msgSb",
        "append",
        "ctx",
        "builtin",
        "func",
        "getText",
        "msgSb",
        "append",
        "ctx",
        "arithmetic",
        "getText",
        "msgSb",
        "append",
        "msgSb",
        "append",
        "ret",
        "getUnit",
        "getDimension",
        "msgSb",
        "toString",
        "val",
        "ret",
        "getValue",
        "doubleValue",
        "ctx",
        "builtin",
        "func",
        "getType",
        "LEMSExpressionParser",
        "SIN",
        "ret",
        "Quantities",
        "getQuantity",
        "sin",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "COS",
        "ret",
        "Quantities",
        "getQuantity",
        "cos",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "TAN",
        "ret",
        "Quantities",
        "getQuantity",
        "tan",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "SINH",
        "ret",
        "Quantities",
        "getQuantity",
        "sinh",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "COSH",
        "ret",
        "Quantities",
        "getQuantity",
        "cosh",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "TANH",
        "ret",
        "Quantities",
        "getQuantity",
        "tanh",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "EXP",
        "ret",
        "Quantities",
        "getQuantity",
        "exp",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "LOG",
        "ret",
        "Quantities",
        "getQuantity",
        "log",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "LN",
        "ret",
        "Quantities",
        "getQuantity",
        "log",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "FLOOR",
        "ret",
        "Quantities",
        "getQuantity",
        "floor",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "CEIL",
        "ret",
        "Quantities",
        "getQuantity",
        "ceil",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "ABS",
        "ret",
        "Quantities",
        "getQuantity",
        "abs",
        "val",
        "ONE",
        "LEMSExpressionParser",
        "RAND",
        "ret",
        "Quantities",
        "getQuantity",
        "random",
        "ONE",
        "ret"
    ],
    "literals": [
        "\"Expected adimensional exponent in \"",
        "\"'\"",
        "\"'\"",
        "\", but found \"",
        "\"'\"",
        "\"'\"",
        "\"Incompatible units \"",
        "\"'\"",
        "\"'\"",
        "\" and \"",
        "\"'\"",
        "\"'\"",
        "\" in expression \"",
        "\"'\"",
        "\"'\"",
        "\"Expected adimensional argument in \"",
        "\"'\"",
        "\"(\"",
        "\")'\"",
        "\", but found \"",
        "\"'\"",
        "\"'\""
    ],
    "variables": [
        "converterToAny"
    ],
    "comments": [
        "System.out.println(\"[\" + ctx.arithmetic().getText() + \"] = \" +",
        "result);",
        "TODO: check for undefined ids",
        "return child expr's value"
    ],
    "docstrings": [
        "expr",
        "ID",
        "'-' expr",
        "expr op=POW expr",
        "FLOAT",
        "FLOAT ID",
        "expr op=('*'|'/') expr",
        "* expr op=('+'|'-') expr\n\t *",
        "'(' expr ')'",
        "BuiltinFuncs '(' expr ')'"
    ],
    "functions": [
        "QuantityEval",
        "visitExpression",
        "visitIdentifier",
        "visitNegate",
        "visitPow",
        "visitFloatLiteral",
        "visitDimensionalLiteral",
        "visitMulDiv",
        "visitAddSub",
        "visitParenthesized",
        "visitFunctionCall"
    ],
    "classes": [
        "QuantityEval"
    ]
}