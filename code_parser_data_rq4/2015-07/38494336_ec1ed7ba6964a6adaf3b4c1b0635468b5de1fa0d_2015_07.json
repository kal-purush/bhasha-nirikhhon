{
    "identifiers": [
        "_",
        "theString",
        "i",
        "theString",
        "i",
        "theString",
        "i",
        "unicodeString",
        "theUnicode",
        "unicodeString",
        "obj",
        "obj",
        "keys",
        "keys",
        "key",
        "key",
        "message",
        "message",
        "message",
        "message",
        "PosEnum",
        "constraints",
        "constraints",
        "vocabulary",
        "wConstraints",
        "wordsCount",
        "vocabulary",
        "groupingConstraints",
        "wordsAmount",
        "constraint",
        "children",
        "level",
        "lettersConstraints",
        "letter",
        "letter",
        "name",
        "pos",
        "sound",
        "name",
        "randomProperty",
        "LetterEnum",
        "name",
        "pos",
        "sound",
        "LetterEnum",
        "name",
        "SoundEnum",
        "sound",
        "constraint",
        "PosEnum",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "constraint",
        "pos",
        "sound",
        "name",
        "LetterEnum",
        "SoundEnum",
        "PosEnum",
        "Letter",
        "PosEnum",
        "Letter",
        "PosEnum",
        "LetterConstraint",
        "PosEnum",
        "l",
        "constraint",
        "l",
        "constraint",
        "l2",
        "constraint",
        "letters",
        "level",
        "wConstraint",
        "wConstraint",
        "wConstraint",
        "wConstraint",
        "wConstraint",
        "constraint",
        "wConstraint",
        "letter",
        "letter",
        "constraint",
        "constraintPass",
        "constraintPass",
        "lettersValid",
        "level",
        "lettersValid",
        "Word",
        "Letter",
        "PosEnum",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "LetterConstraint",
        "PosEnum",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "LetterConstraint",
        "PosEnum",
        "WordConstraint",
        "LetterConstraint",
        "w",
        "constraint2",
        "w",
        "constraint3",
        "w",
        "constraint4",
        "w",
        "constraint5",
        "w",
        "constraint6",
        "toUnicode",
        "vocabulary",
        "wConstraints",
        "wordsCount",
        "wordsCount",
        "word",
        "vocabulary",
        "constraint",
        "wConstraints",
        "word",
        "constraint",
        "wordPasses",
        "wordPasses",
        "filteredWords",
        "word",
        "count",
        "max",
        "count",
        "max",
        "filteredWords",
        "wordsCount",
        "filteredWords",
        "wordsCount",
        "filteredWords",
        "vocabulary",
        "groupingConstraints",
        "node",
        "accWC",
        "parentArr",
        "_",
        "accWC",
        "node",
        "groupWC",
        "node",
        "node",
        "vocabulary",
        "groupWC",
        "node",
        "vocabulary",
        "_",
        "vocabulary",
        "groupWords",
        "groupWords",
        "child",
        "node",
        "i",
        "child",
        "i",
        "parentArr",
        "recuresivelyGroup",
        "child",
        "groupWC",
        "parentArr",
        "parentArr",
        "recuresivelyGroup",
        "groupingConstraints",
        "result",
        "result",
        "wordsTree",
        "node",
        "wordsTree",
        "_",
        "node",
        "node",
        "node",
        "wcArr",
        "wc",
        "wcArr",
        "wc",
        "Word",
        "Letter",
        "PosEnum",
        "Word",
        "Letter",
        "PosEnum",
        "Word",
        "Letter",
        "PosEnum",
        "Letter",
        "PosEnum",
        "Word",
        "Letter",
        "PosEnum",
        "Word",
        "Letter",
        "PosEnum",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "LetterConstraint",
        "PosEnum",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "LetterConstraint",
        "VocabularyGenerator",
        "generator",
        "a",
        "b",
        "c",
        "c1",
        "c2",
        "alef",
        "generator",
        "a",
        "b",
        "c",
        "c1",
        "c2",
        "beit",
        "generator",
        "a",
        "b",
        "c",
        "c1",
        "c2",
        "gimel",
        "generator",
        "a",
        "b",
        "c",
        "c1",
        "middleGimel",
        "generator",
        "a",
        "b",
        "c",
        "c1",
        "c2",
        "middleGimel",
        "generator",
        "a",
        "b",
        "c",
        "c1",
        "c2",
        "kubutz",
        "generator",
        "a",
        "b",
        "c",
        "c1",
        "c2",
        "kubutz",
        "patah",
        "Word",
        "Letter",
        "PosEnum",
        "Word",
        "Letter",
        "PosEnum",
        "Letter",
        "PosEnum",
        "Word",
        "Letter",
        "PosEnum",
        "Word",
        "Letter",
        "PosEnum",
        "Letter",
        "PosEnum",
        "Word",
        "Letter",
        "PosEnum",
        "Word",
        "Letter",
        "PosEnum",
        "Letter",
        "PosEnum",
        "LetterConstraint",
        "PosEnum",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "LetterConstraint",
        "PosEnum",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "LetterConstraint",
        "WordConstraint",
        "wildcard_patah_lc",
        "WordConstraint",
        "alefCT",
        "WordConstraint",
        "beitCT",
        "WordConstraint",
        "gimelCT",
        "GroupConstraint",
        "alefCT",
        "GroupConstraint",
        "alefCT",
        "GroupConstraint",
        "f_a_patah_ct",
        "GroupConstraint",
        "f_b_patah_ct",
        "GroupConstraint",
        "f_c_patah_ct",
        "GroupConstraint",
        "f_c_patah_ct",
        "GroupConstraint",
        "f_a_patah_2g",
        "f__b_patah_2g",
        "f_c_patah_2g",
        "GroupConstraint",
        "f_a_patah_2g",
        "f__b_patah_2g",
        "f_c_patah_3g",
        "VocabularyGenerator",
        "generator",
        "a",
        "b",
        "c",
        "oneAlefG",
        "generator",
        "a",
        "ab",
        "b",
        "c",
        "twoAlefG",
        "generator",
        "a",
        "ab",
        "b",
        "bd",
        "c",
        "cd",
        "nested_f_patah_2g",
        "VocabularyGenerator",
        "resultTree",
        "generator",
        "a",
        "ab",
        "b",
        "bd",
        "c",
        "cd",
        "nested_f_patah_3g",
        "VocabularyGenerator",
        "resultTree",
        "e",
        "e"
    ],
    "literals": [
        "'lodash'",
        "''",
        "\",\"",
        "\"key\"",
        "\"\"",
        "string",
        "string",
        "string",
        "string",
        "string",
        "'Exception'",
        "': '",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"\"",
        "string",
        "string",
        "\"?\"",
        "\"randomly generated letter constraint - name: \"",
        "\", \"",
        "\", \"",
        "string",
        "string",
        "string",
        "'undefined'",
        "\", in \"",
        "\"ALEF\"",
        "\"SEGOL\"",
        "\"BEIT\"",
        "\"KAMATZ\"",
        "\"?\"",
        "\"KAMATZ\"",
        "\"l.symbol\"",
        "\"constraint\"",
        "\"l.has(constraint)\"",
        "\"l2.has(constraint)\"",
        "string",
        "\"אָבֶ\"",
        "\"ALEF\"",
        "\"PATAH\"",
        "\"ALEF\"",
        "\"ALEF\"",
        "\"PATAH\"",
        "\"BEIT\"",
        "\"ALEF\"",
        "\"ALEF\"",
        "\"KUBUZ\"",
        "\"w.has(constraint)\"",
        "\"w.has(constraint)\"",
        "\"w.has(constraint)\"",
        "\"w.has(constraint)\"",
        "\"w.has(constraint)\"",
        "\"toUnicode\"",
        "\"ט\"",
        "\"Max words must be greater than zero.\"",
        "\"Couldn't find enough words. only \"",
        "\" / \"",
        "\"\"",
        "\" [ \"",
        "\"] \"",
        "\" ** \"",
        "\"- Constraints - \\n\"",
        "\" | \"",
        "\"ALEF\"",
        "\"ALEF\"",
        "\"PATAH\"",
        "\"BEIT\"",
        "\"BEIT\"",
        "\"PATAH\"",
        "\"GIMEL_KUBUTZ_GIMEL_PATAH\"",
        "\"GIMEL\"",
        "\"KUBUZ\"",
        "\"GIMEL\"",
        "\"PATAH\"",
        "\"GIMEL_F\"",
        "\"GIMEL\"",
        "\"PATAH\"",
        "\"GIMEL2_M\"",
        "\"GIMEL\"",
        "\"PATAH\"",
        "\"ALEF\"",
        "\"BEIT\"",
        "\"GIMEL\"",
        "\"GIMEL\"",
        "\"KUBUZ\"",
        "\"PATAH\"",
        "\"filtered words\"",
        "\"filtered words\"",
        "\"filtered words\"",
        "\"filtered words\"",
        "\"filtered words\"",
        "\"filtered words\"",
        "\"filtered words\"",
        "\"Test grouping: \"",
        "\"ALEF\"",
        "\"ALEF\"",
        "\"PATAH\"",
        "\"ALEF_BEIT\"",
        "\"ALEF\"",
        "\"PATAH\"",
        "\"BEIT\"",
        "\"PATAH\"",
        "\"BEIT\"",
        "\"BEIT\"",
        "\"PATAH\"",
        "\"BEIT_DALET\"",
        "\"BEIT\"",
        "\"PATAH\"",
        "\"DALET\"",
        "\"PATAH\"",
        "\"GIMEL\"",
        "\"GIMEL\"",
        "\"PATAH\"",
        "\"GIMEL_DALET\"",
        "\"GIMEL\"",
        "\"PATAH\"",
        "\"DALET\"",
        "\"PATAH\"",
        "\"?\"",
        "\"PATAH\"",
        "\"ALEF\"",
        "\"BEIT\"",
        "\"GIMEL\"",
        "\"GIMEL\"",
        "\"KUBUZ\"",
        "\"PATAH\"",
        "\"one alef\"",
        "\"two alef\"",
        "\"first letter patah (2)\"",
        "\"first letter patah (2)\"",
        "\"Error\""
    ],
    "variables": [
        "unicodeString",
        "i",
        "theUnicode",
        "randomProperty",
        "keys",
        "key",
        "SoundEnum",
        "LetterEnum",
        "pos",
        "sound",
        "name",
        "l",
        "l2",
        "constraint",
        "level",
        "lettersValid",
        "constraintPass",
        "w",
        "constraint2",
        "constraint3",
        "constraint4",
        "constraint5",
        "constraint6",
        "filteredWords",
        "count",
        "max",
        "wordsCount",
        "wordPasses",
        "groupWC",
        "groupWords",
        "i",
        "result",
        "result",
        "a",
        "b",
        "c",
        "c1",
        "c2",
        "alef",
        "beit",
        "gimel",
        "middleGimel",
        "kubutz",
        "patah",
        "generator",
        "a",
        "ab",
        "b",
        "bd",
        "c",
        "cd",
        "wildcard_patah_lc",
        "alefCT",
        "beitCT",
        "gimelCT",
        "middleGimel",
        "kubutz",
        "patah",
        "f_patah_ct",
        "f_a_patah_ct",
        "f_b_patah_ct",
        "f_c_patah_ct",
        "oneAlefG",
        "twoAlefG",
        "f_a_patah_2g",
        "f__b_patah_2g",
        "f_c_patah_2g",
        "f_c_patah_3g",
        "nested_f_patah_2g",
        "nested_f_patah_3g",
        "generator",
        "resultTree",
        "resultTree"
    ],
    "comments": [
        "import {bind} from 'angular2/di';",
        "var _ = require('lodash');",
        "one of the letters must satisfy the constraint",
        "all constraints must pass",
        "var constraint = new WordConstraint(1,[]);",
        "console.log(\"w.has(constraint)\",w.has(constraint));",
        "iterate over all words in the given vocabulary.",
        "add a word which passes all the constraints",
        "",
        "if there is a w.c. , add it to the accumulatedWC.",
        "if there are no childeren - this is a leaf :",
        "generate all the words in wordsAmount with the given accumulatedWC, and add it to the given parentArray",
        "console.log(\"try to create group with \"+ node.wordsAmount + \" words.\");",
        "console.log(\" accWC \" + VocabularyGenerator.printConstraints(groupWC));",
        "console.log(\" vocabulary \" + vocabulary);",
        "parentArr.push(groupWords);",
        "console.log(\"created group: \"+ groupWords);",
        "console.log(\"vocabulary left: \"+ vocabulary);",
        "console.log(\"iterating over each of \"+node.children.length+\" children\");",
        "console.log(\"creating  \"+child.copies+\" copies of the group\");",
        "console.log(\"COPY \"+ (i+1));",
        "if there are children :",
        "for each of the childrens",
        "create a new children array in the result Array and pass it to the recursive function along with the accumulatedWC.",
        "var memoryConstraint:IGroupConstraint = {};\n    memoryConstraint.constraint = new WordConstraint(null,[new LetterConstraint(SoundEnum.KAMATZ)]);\n    memoryConstraint.children = [\n      {copies : 8,\n        group:\n          new GroupConstraint(2, new WordConstraint(null,[new LetterConstraint(\"ALEF\")]))\n      }];",
        "var groupingConstraints = memoryConstraint;",
        "letters constraints:",
        "Words constraints:",
        "var ABA:IWord = {\n  level : 1,\n  letters : [\n    {\n      name : Letter.ALEF,\n      pos : Pos.FIRST,\n      sound : Sound.PATAH\n    },\n    {\n      name : Letter.BEIT,\n      pos : Pos.MIDDLE,\n      sound : Sound.KAMATZ\n    },\n    {\n      name : Letter.ALEF,\n      pos : Pos.LAST,\n      sound : Sound.NONE\n    }\n  ]\n};",
        "export var PedadogicLogicInjectables = [\n  bind(Letter).toClass(Letter)\n];"
    ],
    "docstrings": [
        "* Created by yotam on 25/6/2015.",
        "* A letter passes the constraints if all the specified options are fulfilled.\n   * (letter's name, position in word, and it's sound)\n   * @param constraint Contains requirements on the letter.\n   * @returns {boolean}",
        "* Passes the constraints if it has all the constraints specified in the wConstraint object.\n   * Constraints are :\n   *  - the difficulty level of the word.\n   *  - at least one of the word's letters in the Word must satisfy each LetterConstraint object.\n   * @param wConstraint\n   * @returns {boolean}",
        "*\n   * @param vocabulary A set of words to filter\n   * @param wConstraints Array of constraints tha each of the filtered words should pass.\n   * @param wordsCount Number of words that function should return\n   * @returns {Array} All words that passed all of the given constraints."
    ],
    "functions": [
        "toUnicode",
        "toString",
        "toString",
        "toString",
        "has",
        "toString",
        "testConstraint",
        "has",
        "toString",
        "testConstraint",
        "groupWords",
        "recuresivelyGroup",
        "printTree",
        "printConstraints",
        "test",
        "testGrouping"
    ],
    "classes": [
        "GroupConstraint",
        "WordConstraint",
        "LetterConstraint",
        "Letter",
        "Word",
        "VocabularyGenerator"
    ]
}