{
    "identifiers": [
        "BinarySearchTree",
        "value",
        "Node",
        "value",
        "newNode",
        "node",
        "value",
        "node",
        "node",
        "node",
        "newNode",
        "node",
        "node",
        "value",
        "node",
        "node",
        "node",
        "newNode",
        "node",
        "node",
        "BinarySearchTree",
        "value",
        "node",
        "value",
        "node",
        "node",
        "node",
        "value",
        "node",
        "node",
        "node",
        "BinarySearchTree",
        "fn",
        "node",
        "node",
        "node",
        "inOrder",
        "node",
        "fn",
        "node",
        "node",
        "inOrder",
        "node",
        "inOrder",
        "BinarySearchTree",
        "node",
        "size",
        "size",
        "BinarySearchTree",
        "node",
        "array",
        "node",
        "array",
        "value",
        "value"
    ],
    "literals": [
        "'use strict'"
    ],
    "variables": [
        "BinarySearchTree",
        "newNode",
        "node",
        "node",
        "inOrder",
        "size",
        "array",
        "Node"
    ],
    "comments": [
        "If there is nod left, then the new node belongs there",
        "If there is no right, then the new node belongs there",
        "If the new value is equal to the current one, just ignore.",
        "Helper function that is performed on each node by processing the left",
        "subtree, then the node itself, then the right subtree.",
        "Traverse the left subtree.",
        "Call the passed function on this node.",
        "Start with the root node."
    ],
    "docstrings": [
        "* @return {[type]} [description]",
        "* Add a new node into the binary search tree.\n *\n * @param {[type]} value The value to be inserted\n * @return {Boolean} true if operation was successful",
        "* Determine whether or not the value is present in the tree.\n *\n * @param  {Number} value The value to see if it is present in the tree.\n * @return {Boolean} true if the value is present in the tree.",
        "* Traverse the tree recursivvely.\n *\n * @param  {Function} fn The function that is run on each node in the tree",
        "* Get the number of nodes exist in the tree.\n *\n * @return {Number} the number of nodes exist in the tree.",
        "* Convert the tree to array.\n *\n * @return {Array} the array of nodes in the tree."
    ],
    "functions": [],
    "classes": []
}