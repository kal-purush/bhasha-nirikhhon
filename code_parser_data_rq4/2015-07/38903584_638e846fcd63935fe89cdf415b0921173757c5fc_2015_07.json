{
    "identifiers": [
        "gobblin",
        "runtime",
        "java",
        "io",
        "java",
        "util",
        "java",
        "util",
        "org",
        "apache",
        "hadoop",
        "fs",
        "FileStatus",
        "org",
        "apache",
        "hadoop",
        "fs",
        "FileSystem",
        "org",
        "apache",
        "hadoop",
        "fs",
        "Path",
        "org",
        "apache",
        "hadoop",
        "fs",
        "PathFilter",
        "org",
        "apache",
        "hadoop",
        "io",
        "SequenceFile",
        "org",
        "apache",
        "hadoop",
        "io",
        "Text",
        "org",
        "apache",
        "hadoop",
        "io",
        "Writable",
        "org",
        "slf4j",
        "Logger",
        "org",
        "slf4j",
        "LoggerFactory",
        "com",
        "google",
        "common",
        "Strings",
        "com",
        "google",
        "common",
        "collect",
        "ImmutableMap",
        "com",
        "google",
        "common",
        "collect",
        "Maps",
        "com",
        "google",
        "common",
        "collect",
        "Lists",
        "com",
        "google",
        "common",
        "io",
        "Closer",
        "gobblin",
        "configuration",
        "ConfigurationKeys",
        "gobblin",
        "metastore",
        "FsStateStore",
        "LOGGER",
        "LoggerFactory",
        "getLogger",
        "DATASET_STATE_STORE_TABLE_SUFFIX",
        "CURRENT_DATASET_STATE_FILE_SUFFIX",
        "fsUri",
        "storeRootDir",
        "fsUri",
        "storeRootDir",
        "fs",
        "storeRootDir",
        "fs",
        "storeRootDir",
        "storeUrl",
        "storeUrl",
        "Override",
        "storeName",
        "tableName",
        "stateId",
        "tablePath",
        "storeRootDir",
        "storeName",
        "tableName",
        "fs",
        "exists",
        "tablePath",
        "closer",
        "Closer",
        "create",
        "reader",
        "closer",
        "register",
        "fs",
        "tablePath",
        "conf",
        "writable",
        "reader",
        "getValueClass",
        "key",
        "reader",
        "next",
        "key",
        "writable",
        "key",
        "toString",
        "equals",
        "stateId",
        "writable",
        "writable",
        "writable",
        "newDatasetState",
        "e",
        "e",
        "t",
        "closer",
        "rethrow",
        "t",
        "closer",
        "close",
        "Override",
        "storeName",
        "tableName",
        "states",
        "Lists",
        "newArrayList",
        "tablePath",
        "storeRootDir",
        "storeName",
        "tableName",
        "fs",
        "exists",
        "tablePath",
        "states",
        "closer",
        "Closer",
        "create",
        "reader",
        "closer",
        "register",
        "fs",
        "tablePath",
        "conf",
        "writable",
        "reader",
        "getValueClass",
        "key",
        "reader",
        "next",
        "key",
        "writable",
        "writable",
        "states",
        "add",
        "writable",
        "writable",
        "states",
        "add",
        "writable",
        "newDatasetState",
        "writable",
        "e",
        "e",
        "t",
        "closer",
        "rethrow",
        "t",
        "closer",
        "close",
        "states",
        "Override",
        "storeName",
        "getAll",
        "storeName",
        "jobName",
        "stateStorePath",
        "storeRootDir",
        "jobName",
        "fs",
        "exists",
        "stateStorePath",
        "ImmutableMap",
        "of",
        "stateStoreFileStatuses",
        "fs",
        "listStatus",
        "stateStorePath",
        "Override",
        "path",
        "path",
        "getName",
        "endsWith",
        "CURRENT_DATASET_STATE_FILE_SUFFIX",
        "DATASET_STATE_STORE_TABLE_SUFFIX",
        "stateStoreFileStatuses",
        "stateStoreFileStatuses",
        "length",
        "ImmutableMap",
        "of",
        "datasetStatesByUrns",
        "Maps",
        "newHashMap",
        "stateStoreFileStatus",
        "stateStoreFileStatuses",
        "previousDatasetStates",
        "getAll",
        "jobName",
        "stateStoreFileStatus",
        "getPath",
        "getName",
        "previousDatasetStates",
        "isEmpty",
        "previousDatasetState",
        "previousDatasetStates",
        "get",
        "datasetStatesByUrns",
        "put",
        "previousDatasetState",
        "getProp",
        "ConfigurationKeys",
        "DATASET_URN_KEY",
        "ConfigurationKeys",
        "DEFAULT_DATASET_URN",
        "previousDatasetState",
        "datasetStatesByUrns",
        "size",
        "datasetStatesByUrns",
        "remove",
        "ConfigurationKeys",
        "DEFAULT_DATASET_URN",
        "datasetStatesByUrns",
        "storeName",
        "datasetUrn",
        "alias",
        "Strings",
        "isNullOrEmpty",
        "datasetUrn",
        "CURRENT_DATASET_STATE_FILE_SUFFIX",
        "DATASET_STATE_STORE_TABLE_SUFFIX",
        "datasetUrn",
        "CURRENT_DATASET_STATE_FILE_SUFFIX",
        "DATASET_STATE_STORE_TABLE_SUFFIX",
        "get",
        "storeName",
        "alias",
        "datasetUrn",
        "datasetUrn",
        "datasetState",
        "jobName",
        "datasetState",
        "getJobName",
        "jobId",
        "datasetState",
        "getJobId",
        "tableName",
        "Strings",
        "isNullOrEmpty",
        "datasetUrn",
        "jobId",
        "DATASET_STATE_STORE_TABLE_SUFFIX",
        "datasetUrn",
        "jobId",
        "DATASET_STATE_STORE_TABLE_SUFFIX",
        "alias",
        "Strings",
        "isNullOrEmpty",
        "datasetUrn",
        "CURRENT_DATASET_STATE_FILE_SUFFIX",
        "DATASET_STATE_STORE_TABLE_SUFFIX",
        "datasetUrn",
        "CURRENT_DATASET_STATE_FILE_SUFFIX",
        "DATASET_STATE_STORE_TABLE_SUFFIX",
        "LOGGER",
        "info",
        "tableName",
        "put",
        "jobName",
        "tableName",
        "datasetState",
        "createAlias",
        "jobName",
        "tableName",
        "alias"
    ],
    "literals": [
        "\".jst\"",
        "\"current\"",
        "\"-\"",
        "\"-\"",
        "\"-\"",
        "\"Persisting \"",
        "\" to the job state store\""
    ],
    "variables": [],
    "comments": [
        "This is necessary for backward compatibility as existing jobs are using the JobState class",
        "This is necessary for backward compatibility as existing jobs are using the JobState class",
        "There should be a single dataset state on the list if the list is not empty",
        "The dataset (job) state from the deprecated \"current.jst\" will be read even though",
        "the job has transitioned to the new dataset-based mechanism"
    ],
    "docstrings": [
        "* Copyright (C) 2014-2015 LinkedIn Corp. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\n * this file except in compliance with the License. You may obtain a copy of the\n * License at  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed\n * under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied.",
        "* A custom extension to {@link FsStateStore} for storing and reading {@link JobState.DatasetState}s.\n *\n * <p>\n *   The purpose of having this class is to hide some implementation details that are unnecessarily\n *   exposed if using the {@link FsStateStore} to store and serve job/dataset states between job runs.\n * </p>\n *\n * <p>\n *   In addition to persisting and reading {@link JobState.DatasetState}s. This class is also able to\n *   read job state files of existing jobs that store serialized instances of {@link JobState} for\n *   backward compatibility.\n * </p>\n *\n * @author ynli",
        "* Get a {@link Map} from dataset URNs to the latest {@link JobState.DatasetState}s.\n   *\n   * @param jobName the job name\n   * @return a {@link Map} from dataset URNs to the latest {@link JobState.DatasetState}s\n   * @throws IOException if there's something wrong reading the {@link JobState.DatasetState}s",
        "* Persist a given {@link JobState.DatasetState}.\n   *\n   * @param datasetUrn the dataset URN\n   * @param datasetState the {@link JobState.DatasetState} to persist\n   * @throws IOException if there's something wrong persisting the {@link JobState.DatasetState}"
    ],
    "functions": [
        "FsDatasetStateStore",
        "FsDatasetStateStore",
        "FsDatasetStateStore",
        "get",
        "getAll",
        "getAll",
        "getLatestDatasetStatesByUrns",
        "accept",
        "getLatestDatasetState",
        "persistDatasetState"
    ],
    "classes": [
        "FsDatasetStateStore"
    ]
}