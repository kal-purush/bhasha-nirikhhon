{
    "identifiers": [
        "print_function",
        "absolute_import",
        "division",
        "sys",
        "sys",
        "path",
        "append",
        "numpy",
        "pyKratos",
        "TEMPERATURE",
        "VOLUME_HEAT_SOURCE",
        "CONDUCTIVITY",
        "DENSITY",
        "nx",
        "ny",
        "generate_square",
        "generate_square",
        "GenerateSquare",
        "nx",
        "dx",
        "ny",
        "dy",
        "ModelPart",
        "buffer_size",
        "solution_step_variables",
        "model_part",
        "AddNodes",
        "node_list",
        "model_part",
        "AddProperties",
        "property_list",
        "model_part",
        "AddElements",
        "element_connectivities",
        "model_part",
        "AddConditions",
        "face_connectivities",
        "GidIO",
        "model_part",
        "Nodes",
        "model_part",
        "Elements",
        "model_part",
        "Conditions",
        "model_part",
        "ProcessInfo",
        "node",
        "model_part",
        "NodeIterators",
        "node",
        "coordinates",
        "node",
        "coordinates",
        "node",
        "SetSolutionStepValue",
        "TEMPERATURE",
        "d",
        "node",
        "Id",
        "node",
        "GetSolutionStepValue",
        "TEMPERATURE",
        "node",
        "GetSolutionStepValue",
        "TEMPERATURE",
        "node",
        "IsFixed",
        "TEMPERATURE",
        "node",
        "Fix",
        "TEMPERATURE",
        "node",
        "Free",
        "TEMPERATURE",
        "elem",
        "model_part",
        "ElementIterators",
        "elem",
        "Id",
        "elem",
        "geometry",
        "node",
        "geom",
        "node",
        "Id",
        "elem",
        "prop",
        "prop",
        "CONDUCTIVITY",
        "cond",
        "model_part",
        "ConditionIterators",
        "elem",
        "Id",
        "cond",
        "geometry",
        "node",
        "geom",
        "node",
        "Id",
        "cond",
        "prop",
        "prop",
        "CONDUCTIVITY",
        "model_part",
        "Properties",
        "TEMPERATURE"
    ],
    "literals": [
        "\"..\"",
        "\"conv_diff_element2D\"",
        "\"temperature_neumann_face_condition_2d\"",
        "\"convection_diffusion.mdpa\"",
        "\"convection_diffusion\"",
        "\"we are now considering the node with Id: \"",
        "\"node now contains the following value of TEMPERATURE: \"",
        "\"node at the previous step conainted the following value of TEMPERATURE: \"",
        "\"is TEMPERATURE fixed for the node? \"",
        "\"element Id\"",
        "\"    Id = \"",
        "\"my conductivity is\"",
        "\"Condition Id\"",
        "\"    Id = \"",
        "\"my conductivity is\""
    ],
    "variables": [
        "solution_step_variables",
        "property_list",
        "nx",
        "dx",
        "ny",
        "dy",
        "node_list",
        "element_connectivities",
        "face_connectivities",
        "buffer_size",
        "model_part",
        "gid_io",
        "d",
        "geom",
        "prop",
        "geom",
        "prop"
    ],
    "comments": [
        "add variables to be allocated from the list in variables.py",
        "generate a 5 by 5 square to play with",
        "import py_kratos",
        "store current step and 2 in the past",
        "model_part is a container of containers",
        "this is the list of nodes in the model",
        "this is the list of Elements in the volume",
        "this is the list of \"Conditions\" used to apply Boundary conditions which require integration on the boundary",
        "a dictionary used to store data and pass them to control elemental behaviour",
        "make a loop on all the nodes in the model and set the TEMPERATURE to a value",
        "node.coordinates contains the nodal position in space",
        "here we assign the value of d to the node",
        "we can verify the content by doing",
        "at the previous time step it was zero...",
        "note the ,1 to go 1 step in the past",
        "i can check if a DOF of the node is fixed by doing",
        "if i want to fix it i could do",
        "and to free it",
        "i can also iterate over all the elements in the model",
        "every element has an unique Id",
        "an element contains a geometry which in turn can be iterated for its nodes",
        "it also has a \"property\" which is in common between a group of elements",
        "prop can be used to store variables which are common to a groupd o f nodes",
        "note that i am using directly prop as a python dictionary (which is actually what it is!!)",
        "note that if you change the value of",
        "i can also iterate over all the elements in the model",
        "every element has an unique Id",
        "an element contains a geometry which in turn can be iterated for its nodes",
        "it also has a \"property\" which is in common between a group of elements",
        "prop can be used to store variables which are common to a groupd o f nodes",
        "note that i am using directly prop as a python dictionary (which is actually what it is!!)",
        "note that if you change the value of",
        "NOTE: essentially all of the databases in pyKRatos are implemented on the top of python dictionaries.",
        "if you try to extract from the dictionary a variable that is not there an error will be thrown",
        "to correct it you need first to add the variable to the dictionary",
        "model_part.Properties[0].update( {TEMPERATURE: 123.456} ) ##uncomment this line and the next one will work",
        "this throws an error since the TEMPERATURE is not in PROPERTIES"
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}