{
    "identifiers": [
        "Infinity",
        "NaN",
        "Infinity",
        "Infinity",
        "Infinity",
        "Infinity",
        "Infinity",
        "Infinity",
        "Infinity",
        "NaN",
        "y",
        "x",
        "b",
        "a",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "y",
        "x",
        "y",
        "y",
        "x",
        "x",
        "y",
        "y",
        "x",
        "x",
        "y",
        "y",
        "z",
        "z",
        "x",
        "x",
        "y",
        "z",
        "y",
        "z",
        "x",
        "z",
        "x",
        "y",
        "x",
        "y",
        "y",
        "y",
        "z",
        "z",
        "z",
        "z",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "x",
        "y",
        "y"
    ],
    "literals": [
        "\"use strict\"",
        "'foo'",
        "'99'",
        "'true'",
        "'5'",
        "'5.0'",
        "'5'",
        "'5.0'",
        "''",
        "'0'",
        "''",
        "'0'",
        "'0'",
        "'false'",
        "'foo1'",
        "'foo2'",
        "'foo'",
        "'foo'",
        "'foo1'",
        "'foo2'",
        "'foo'",
        "'foo'",
        "'foo'",
        "'foo'",
        "'foo'",
        "'foo'",
        "'foo'",
        "'bar'",
        "'foo'",
        "'foo'",
        "'The '",
        "'rain '",
        "'in Spain '",
        "'stays '",
        "'mainly '",
        "'in '",
        "'the '",
        "'plain.'",
        "'John'",
        "'Smith'"
    ],
    "variables": [
        "x",
        "a",
        "x",
        "x",
        "x",
        "x",
        "x",
        "y",
        "x",
        "y",
        "x",
        "y",
        "z",
        "x",
        "y",
        "z",
        "firstName",
        "lastName",
        "x",
        "x"
    ],
    "comments": [
        "General Assembly",
        "Web Development Immersive Fundamentals",
        "http://fundamentals.generalassemb.ly/03_chapter/intro.html",
        "3. Writing Expression in JavaScript",
        "3.1. Expression and Evaluations",
        "3.1.1. Data (a.k.a Values)",
        "Use the typeof operator to return a string indicating the type of the unevaluated operand.",
        "=> 'string'",
        "=> 'number'",
        "=> 'number'",
        "=> 'boolean'",
        "=> 'boolean'",
        "=> 'string'",
        "Is a string due to being in a single-quote or double-quote.",
        "=> 'string'",
        "Is a string due to being in a single-quote or double-quote.",
        "=> 'number'",
        "=> 'number'",
        "3.1.2. Operators",
        "Use the equality operators to compare the values.",
        "=> true",
        "Is true because both sides (values) are completely identical.",
        "=> true",
        "Is true because both sides (values) are completely identical.",
        "=> false",
        "Is false because both sides (values) are not identical. The number 5 is not the same as the '5' string.",
        "=> false",
        "Is false because both sides (values) are not identical. The number 5 is not the same as the '5.0' string.",
        "=> true",
        "true == true;",
        "Is true because both sides (values) are similar and 'truthy'.",
        "=> true",
        "true == true;",
        "Is true because both sides (values) are similar and 'truthy'.",
        "=> true",
        "Is true becuase 'true' is converted to 1 and then compared. Both sides (values) are 'truthy'.",
        "=> true",
        "Is true because 'false' is converted to 0 and then compared. Both sides (values) are 'falsey'.",
        "=> false",
        "false == true;",
        "=> true",
        "false = false;",
        "Is true because both sides (values) are 'falsey'.",
        "=> true",
        "=> true",
        "=> false",
        "false == true;",
        "=> false",
        "=> false",
        "=> true",
        "Use the logical AND (&&) operators to compare the values.",
        "=> true",
        "Is true because both values are 'truthy'. It will return the last 'truthy' value.",
        "=> false",
        "Is false because both values are 'truthy' and 'falsey'. It will return the first 'falsey' value.",
        "=> false",
        "Is false because both values are 'falsey' and 'truthy'. It will return the first 'falsey' value.",
        "f && f returns false",
        "=> false",
        "false && false;",
        "Is false because '(3 == 4)'' is not equal to each other. It will return the first 'falsey' value.",
        "=> foo2",
        "true && true;",
        "Is foo2 beacuse both values are 'truthy'. It will return the last 'truthy' value.",
        "=> false",
        "false && true;",
        "Is false because both values are 'falsey' and 'truthy'. It will return the first 'falsey' value",
        "=> false",
        "true && false;",
        "Is false because both values are 'truthy' and 'falsey'. It will return the first 'falsey' value.",
        "Use the logical OR (||) operators to compare the values.",
        "=> true",
        "Is true because both values are not 'falsey'. It will return the first 'truthy' value.",
        "=> true",
        "Is true because both values are not 'falsey'. It will return the first 'truthy' value.",
        "=> true",
        "Is true because both values are not 'falsey'. It will return the first 'truthy' value.",
        "=> false",
        "false || false;",
        "Is false because '(3 == 4)'' is not equal to each other; which creates 'false && false'. It will return the last 'falsey' value.",
        "=> foo1",
        "true || true;",
        "Is foo1 because both values are not 'falsey'. It will return the first 'truthy' value.",
        "=> foo",
        "false || true;",
        "Is foo because both values are not 'falsey'. It will return the first 'truthy' value.",
        "=> foo",
        "true || false;",
        "Is foo because both values are not 'falsey'. It will return the first 'truthy' value.",
        "Use the logical NOT (!) operators to compare the values.",
        "=> false",
        "Is false because (!) reverses the value of the boolean.",
        "=> true",
        "Is true because (!) reverses the value of the boolean.",
        "=> false",
        "!'true';",
        "Is false because (!) reverses the value of the boolean.",
        "Use the arithemtic operators (+, -, /, *, %, ++, --).",
        "=> 2",
        "boolean + number; -> addition",
        "=> 0",
        "boolean + boolean; -> addition",
        "=> 5foo",
        "number + string; -> concatenation",
        "=> foofalse",
        "string + boolean; -> concatenation",
        "Is foofalse because JavaScript converts the boolean (false) into a string ('false').",
        "=> falsefoo",
        "boolean + string; -> concatenation",
        "Is falsefoo because JavaScript converts the boolean (false) into a string ('false').",
        "=> foobar",
        "string + string; -> concatenation",
        "=> Infinity",
        "number + number; -> addition",
        "Is Infinity because it is beyond infinity.",
        "=> 2",
        "number - number; -> subtraction",
        "=> -2",
        "number - number; -> subtraction",
        "=> NaN",
        "string - number;",
        "Is NaN because a literal string is not a number.",
        "=> NaN",
        "number - number; -> subtraction",
        "Is NaN because you can not subtract positive and negative infinity against each other.",
        "0.5",
        "number / number; -> division",
        "-0.5",
        "number / number; -> division",
        "Is -0.5 because anything divided by a negative (-) automatically gives you a '-' numerical.",
        "0.5",
        "number / number; -> division",
        "Infinity",
        "number / number; -> division",
        "Is Infinity because anything divided by 0 automatically gives you Infinity.",
        "Infinity",
        "number / number; -> division",
        "Is Infinity because anything divided by 0 automatically gives you Infinity.",
        "-Infinity",
        "number / number; -> division",
        "Is -Infinity because anything divided by -0 automatically gives you -Infinity.",
        "=> 4",
        "number * number; -> multiplication",
        "=> -4",
        "number * number; -> multiplication",
        "Is -4 because anything multiplied by a negative (-) automatically gives you a '-' numerical.",
        "=> NaN",
        "number * number; -> multiplication",
        "=> Infinity",
        "number * number; -> multiplication",
        "=> NaN",
        "string * number; -> multiplication",
        "Is NaN because a literal string is not a number.",
        "=> 2",
        "number % number; -> remainder",
        "Is 2 because there are 2 fives in 12 with a remainder of 2.",
        "=> -1",
        "number % number; -> remainder",
        "=> -1",
        "number % number; -> remainder",
        "NaN",
        "number % number; -> remainder",
        "=> y = 3, x = 4",
        "Is y = 3 because 'var x = 3'. It was used postfix (x++), with operator (++) after operand (x), it will return the value 3 before incrementing.",
        "Is x = 4 because the increment operator adds '1' to its operand (x) and returns a value; which 'var x = 3' + '1' equals 4.",
        "=> a = 3, b = 3",
        "Is a = 3 because it was used prefix (++x), with operator (++) before operand (x), it will return the value 3 after incrementing by 1.",
        "Is b = 3 because after incrementing '++a', it will return the value 3.",
        "3.1.3. Expressions",
        "Use the arithemtic operators (+, -, /, *) to several operators and values together.",
        "Tip: Mathematical expressions are evaluated from left to right.",
        "=> 5",
        "Is 5 because '(2 + 3) = 5' and '(9 - 8) = 1'; which updates to '(5) * (1)' and equals 5.",
        "=> 270",
        "Is 270 because '(9 + 2) = 11'; which updates to '((11) * 25)' and equals 275. Then '((275)) - 5 = 270'.",
        "3.2. Variables",
        "3.2.1. Expression with Variables",
        "=> 30",
        "10 + 20; -> arithmetic",
        "=> 100",
        "10 x 10; -> arithmetic",
        "=> 285",
        "3 * (10 * 10) - 2 * 10 + 5; -> arithmetic",
        "Is 285 because '3 * (10 * 10) = 300'; which updates to '300 - (2 * 10) + 5'. Then '300 - 20 + 5 = 285'.",
        "=> 30",
        "Is 30 because the most recent value of x (15) is retrained; which updates to '2 * 15' and equals 30.",
        "=> x = 20",
        "x = 10 + 10;",
        "Is x = 20 because 'y + 10 = 20'.",
        "=> y = 44, x = 22",
        "Is y = 44 and x = 22 because the variables have been redefined.",
        "x = 10 * 2; => x = 20",
        "y = 20 + 1; => y = 21",
        "x = 21 + 1; => x = 22",
        "y = 2 * 22; => y = 44",
        "=> x = 2, y = 3, z = 2",
        "Is x = 2, y = 3, and z = 2 because the variables have been redefined.",
        "x = 2;",
        "y = 3;",
        "z = 2;",
        "=> x = 1, y = 4, z = -3",
        "Is x = 1, y = 4, amd z = -3 because the variables have been redefined.",
        "x = 0 + -1; \t=> x = -1",
        "y = -1 * -1; => y = 1",
        "z = -1 - 1; \t=> z = -2",
        "x = 1 * 1;\t=> x = 1",
        "y = -2 * -2; => y = 4",
        "z = -2 - 1;\t=> z = -3",
        "3.3. Boolean Logic",
        "3.4. Quiz Questions",
        "3.A. Evaluate the expression below. What will the result be?",
        "=> 6",
        "3.B. Evaluate the expression below. What will the result be?",
        "=> 10",
        "3.C. Evaluate the bolded expression below. What will the result be?",
        "=> 'The rain in Spain stays mainly in the plain.'",
        "3.D. Evaluate the expression below. What will the result be?",
        "=> fasle",
        "4.0. How do you create a variable called 'name' in Javascript?",
        "var name = 'John';",
        "5.0. What is the final value of x?",
        "=> 28",
        "6.0. Declare a new variable called fullName that contains both John's first and last name, with a space between them.",
        "var fullName = firstName + \" \" + lastName;",
        "7.0. What does this statement evaluate to?",
        "=> false",
        "Is false because according to JavaScript's order of operations, the line should be evaluated as: ((10 > 9) > 8); which evaluates to: (true > 8).",
        "In this context (when using the > operator), booleans will be converted to numbers, so this will evaluate to: (1 > 8).",
        "8.0. Evaluate the last statement in the code below.",
        "=> true",
        "9.0. Evaluate the last statement in the code below.",
        "=> Undefined",
        "If you were to run this code in the console, JavaScript's response would be \"\"ReferenceError: y is not defined\".",
        "JavaScript has no idea what \"y\" is and would not be able to evaluate the statement.  So, the statement is undefined.",
        "End of Unit 3."
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}