{
    "identifiers": [
        "require",
        "define",
        "array",
        "domConstruct",
        "i18n",
        "lang",
        "MemoryStore",
        "registry",
        "_Widget",
        "_TemplatedMixin",
        "_WidgetsInTemplateMixin",
        "FilteringSelect",
        "_Plugin",
        "rangeapi",
        "_Widget",
        "_TemplatedMixin",
        "_WidgetsInTemplateMixin",
        "arguments",
        "i18n",
        "registry",
        "arguments",
        "MemoryStore",
        "array",
        "value",
        "value",
        "value",
        "value",
        "name",
        "name",
        "value",
        "value",
        "priorityChange",
        "priorityChange",
        "priorityChange",
        "array",
        "value",
        "value",
        "priorityChange",
        "priorityChange",
        "value",
        "value",
        "value",
        "_FontDropDown",
        "arguments",
        "value",
        "name",
        "name",
        "value",
        "name",
        "value",
        "priorityChange",
        "priorityChange",
        "priorityChange",
        "value",
        "value",
        "value",
        "arguments",
        "value",
        "priorityChange",
        "_FontDropDown",
        "value",
        "name",
        "name",
        "value",
        "name",
        "value",
        "priorityChange",
        "priorityChange",
        "priorityChange",
        "value",
        "value",
        "parseInt",
        "value",
        "value",
        "pixels",
        "value",
        "arguments",
        "value",
        "priorityChange",
        "_FontDropDown",
        "arguments",
        "value",
        "name",
        "value",
        "name",
        "value",
        "name",
        "value",
        "editor",
        "command",
        "choice",
        "choice",
        "rangeapi",
        "editor",
        "sel",
        "sel",
        "sel",
        "start",
        "end",
        "start",
        "start",
        "editor",
        "start",
        "editor",
        "start",
        "start",
        "start",
        "end",
        "end",
        "editor",
        "end",
        "editor",
        "end",
        "end",
        "end",
        "lang",
        "node",
        "ary",
        "node",
        "node",
        "i",
        "i",
        "node",
        "i",
        "node",
        "i",
        "c",
        "editor",
        "c",
        "c",
        "c",
        "array",
        "tag",
        "ary",
        "c",
        "processChildren",
        "c",
        "ary",
        "lang",
        "nodes",
        "nodes",
        "nodes",
        "editor",
        "nodes",
        "editor",
        "nodes",
        "editor",
        "start",
        "end",
        "node",
        "start",
        "node",
        "node",
        "editor",
        "node",
        "editor",
        "node",
        "tag",
        "node",
        "node",
        "array",
        "tag",
        "block",
        "node",
        "node",
        "node",
        "processChildren",
        "start",
        "clearNodes",
        "block",
        "clearNodes",
        "block",
        "clearNodes",
        "unformatNodes",
        "clearNodes",
        "node",
        "start",
        "editor",
        "node",
        "node",
        "tag",
        "node",
        "node",
        "array",
        "tag",
        "clearNodes",
        "node",
        "processChildren",
        "node",
        "clearNodes",
        "node",
        "node",
        "unformatNodes",
        "clearNodes",
        "editor",
        "editor",
        "command",
        "choice",
        "editor",
        "node",
        "editor",
        "node",
        "domConstruct",
        "node",
        "node",
        "node",
        "node",
        "editor",
        "node",
        "editor",
        "editor",
        "node",
        "editor",
        "html",
        "_Plugin",
        "_FontNameDropDown",
        "_FontSizeDropDown",
        "_FormatBlockDropDown",
        "clazz",
        "lang",
        "editor",
        "editor",
        "choice",
        "choice",
        "choice",
        "choice",
        "choice",
        "choice",
        "_e",
        "_e",
        "_c",
        "disabled",
        "disabled",
        "value",
        "_e",
        "_c",
        "e",
        "value",
        "lang",
        "value",
        "value",
        "value",
        "quoted",
        "value",
        "quoted",
        "_c",
        "value",
        "value",
        "value",
        "rangeapi",
        "sel",
        "sel",
        "sel",
        "elem",
        "elem",
        "elem",
        "_e",
        "elem",
        "_e",
        "elem",
        "elem",
        "tg",
        "array",
        "tg",
        "value",
        "tg",
        "elem",
        "elem",
        "value",
        "value",
        "array",
        "value",
        "value",
        "value",
        "value",
        "array",
        "name",
        "_Plugin",
        "name",
        "args",
        "FontChoice",
        "name",
        "args",
        "FontChoice",
        "_FontDropDown",
        "FontChoice",
        "_FontNameDropDown",
        "FontChoice",
        "_FontSizeDropDown",
        "FontChoice",
        "_FormatBlockDropDown",
        "FontChoice",
        "define",
        "domConstruct",
        "domStyle",
        "kernel",
        "lang",
        "has",
        "_FormValueWidget",
        "_TextBoxMixin",
        "template",
        "dijit",
        "_FormValueWidget",
        "_TextBoxMixin",
        "template",
        "has",
        "arguments",
        "arguments",
        "has",
        "domStyle",
        "s",
        "s",
        "ff",
        "inputs",
        "i",
        "inputs",
        "i",
        "inputs",
        "i",
        "ff",
        "e",
        "v",
        "v",
        "domConstruct",
        "e",
        "e",
        "v",
        "evt",
        "arguments",
        "value",
        "priorityChange",
        "formattedValue",
        "arguments",
        "kernel",
        "value",
        "kernel",
        "value",
        "e",
        "arguments",
        "has",
        "by",
        "arguments",
        "has",
        "TextBox",
        "parent",
        "dijit",
        "_TextBoxMixin",
        "element",
        "start",
        "stop",
        "element",
        "element",
        "r",
        "r",
        "r",
        "start",
        "r",
        "stop",
        "start",
        "r",
        "TextBox",
        "define",
        "darray",
        "lang",
        "dnumber",
        "i18n",
        "nlsCurrency",
        "cldrMonetary",
        "lang",
        "currency",
        "currency",
        "options",
        "options",
        "options",
        "options",
        "i18n",
        "options",
        "options",
        "cldrMonetary",
        "iso",
        "darray",
        "prop",
        "data",
        "prop",
        "bundle",
        "iso",
        "prop",
        "data",
        "lang",
        "data",
        "options",
        "currency",
        "value",
        "options",
        "dnumber",
        "value",
        "currency",
        "options",
        "currency",
        "options",
        "dnumber",
        "currency",
        "options",
        "currency",
        "expression",
        "options",
        "dnumber",
        "expression",
        "currency",
        "options",
        "currency",
        "define",
        "array",
        "domClass",
        "domGeometry",
        "domStyle",
        "fx",
        "lang",
        "on",
        "query",
        "has",
        "registry",
        "tabControllerTemplate",
        "buttonTemplate",
        "TabController",
        "layoutUtils",
        "_WidgetsInTemplateMixin",
        "Menu",
        "MenuItem",
        "Button",
        "_HasDropDown",
        "TabController",
        "_WidgetsInTemplateMixin",
        "tabControllerTemplate",
        "arguments",
        "domClass",
        "n",
        "domClass",
        "arguments",
        "domStyle",
        "on",
        "lang",
        "evt",
        "page",
        "insertIndex",
        "arguments",
        "domStyle",
        "domStyle",
        "page",
        "insertIndex",
        "page",
        "button",
        "arguments",
        "query",
        "btn",
        "btn",
        "btn",
        "btn",
        "domGeometry",
        "btn",
        "domStyle",
        "btn",
        "children",
        "children",
        "children",
        "children",
        "children",
        "rightTab",
        "rightTab",
        "leftTab",
        "width",
        "width",
        "width",
        "domStyle",
        "tabsWidth",
        "width",
        "tabsWidth",
        "dim",
        "dim",
        "layoutUtils",
        "dim",
        "cb",
        "domGeometry",
        "cb",
        "enable",
        "layoutUtils",
        "dim",
        "has",
        "has",
        "has",
        "has",
        "domStyle",
        "domStyle",
        "has",
        "val",
        "has",
        "has",
        "has",
        "has",
        "val",
        "domStyle",
        "domStyle",
        "has",
        "val",
        "maxScroll",
        "page",
        "page",
        "tab",
        "page",
        "tab",
        "node",
        "node",
        "sl",
        "node",
        "sl",
        "domStyle",
        "node",
        "domStyle",
        "node",
        "arguments",
        "domStyle",
        "domStyle",
        "containerWidth",
        "scrollNodeWidth",
        "children",
        "tabsWidth",
        "scrollNodeWidth",
        "children",
        "children",
        "children",
        "children",
        "children",
        "children",
        "scrollNodeWidth",
        "maxPossibleScroll",
        "maxPossibleScroll",
        "onlyScrollPosition",
        "onlyScrollPosition",
        "domStyle",
        "n",
        "domStyle",
        "n",
        "scrollNodeWidth",
        "pos",
        "pos",
        "scrollBounds",
        "scrollBounds",
        "pos",
        "x",
        "arguments",
        "x",
        "x",
        "scrollBounds",
        "scrollBounds",
        "x",
        "fx",
        "w",
        "x",
        "anim",
        "fx",
        "oldS",
        "newS",
        "val",
        "w",
        "val",
        "anim",
        "x",
        "anim",
        "e",
        "e",
        "n",
        "domClass",
        "n",
        "n",
        "n",
        "n",
        "e",
        "e",
        "e",
        "e",
        "direction",
        "node",
        "node",
        "domClass",
        "node",
        "domStyle",
        "sWidth",
        "direction",
        "d",
        "to",
        "to",
        "scroll",
        "scroll",
        "scrollBounds",
        "scroll",
        "scrollBounds",
        "buttonTemplate",
        "Button",
        "ScrollingTabControllerButtonMixin",
        "Button",
        "_HasDropDown",
        "ScrollingTabControllerButtonMixin",
        "callback",
        "Menu",
        "registry",
        "array",
        "container",
        "page",
        "MenuItem",
        "page",
        "page",
        "page",
        "page",
        "page",
        "page",
        "page",
        "container",
        "page",
        "menuItem",
        "callback",
        "focus",
        "arguments",
        "ScrollingTabController",
        "define",
        "domAttr",
        "winUtils",
        "_Widget",
        "_TemplatedMixin",
        "BackgroundIframe",
        "_Widget",
        "_TemplatedMixin",
        "id",
        "domAttr",
        "id",
        "id",
        "clazz",
        "clazz",
        "clazz",
        "os",
        "winUtils",
        "os",
        "viewport",
        "os",
        "viewport",
        "viewport",
        "viewport",
        "os",
        "BackgroundIframe",
        "define",
        "array",
        "lang",
        "has",
        "lang",
        "exports",
        "exports",
        "noSingleQuotes",
        "noSingleQuotes",
        "exports",
        "node",
        "exports",
        "node",
        "output",
        "output",
        "exports",
        "node",
        "output",
        "node",
        "node",
        "lName",
        "lName",
        "output",
        "lName",
        "has",
        "has",
        "attr",
        "node",
        "i",
        "attr",
        "n",
        "has",
        "attr",
        "n",
        "attrhash",
        "attr",
        "n",
        "n",
        "node",
        "v",
        "node",
        "has",
        "n",
        "v",
        "v",
        "attrarray",
        "n",
        "v",
        "attrhash",
        "n",
        "v",
        "node",
        "node",
        "node",
        "clone",
        "s",
        "rgxp_attrsMatch",
        "s",
        "s",
        "s",
        "array",
        "attrSplit",
        "attr",
        "attr",
        "attr",
        "idx",
        "attr",
        "idx",
        "key",
        "key",
        "key",
        "node",
        "attrarray",
        "key",
        "node",
        "key",
        "val",
        "node",
        "val",
        "node",
        "lName",
        "match",
        "s",
        "match",
        "val",
        "match",
        "lName",
        "match",
        "s",
        "match",
        "val",
        "match",
        "val",
        "node",
        "key",
        "val",
        "attrarray",
        "key",
        "val",
        "attrarray",
        "a",
        "b",
        "a",
        "b",
        "a",
        "b",
        "attr",
        "attrarray",
        "j",
        "output",
        "attr",
        "attr",
        "escape",
        "attr",
        "attr",
        "lName",
        "output",
        "output",
        "node",
        "lName",
        "output",
        "node",
        "exports",
        "node",
        "output",
        "output",
        "lName",
        "output",
        "escape",
        "node",
        "output",
        "escape",
        "node",
        "output",
        "node",
        "node",
        "exports",
        "node",
        "exports",
        "node",
        "output",
        "output",
        "exports",
        "dom",
        "output",
        "dom",
        "dom",
        "dom",
        "has",
        "nodes",
        "dom",
        "node",
        "nodes",
        "i",
        "checkParent",
        "node",
        "dom",
        "exports",
        "node",
        "output",
        "exports",
        "define",
        "Deferred",
        "dom",
        "domAttr",
        "domClass",
        "domGeometry",
        "domStyle",
        "has",
        "keys",
        "lang",
        "on",
        "registry",
        "focus",
        "popup",
        "_FocusMixin",
        "Viewport",
        "_FocusMixin",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "domGeometry",
        "e",
        "c",
        "e",
        "c",
        "c",
        "e",
        "c",
        "e",
        "c",
        "c",
        "e",
        "t",
        "overMenu",
        "domClass",
        "t",
        "overMenu",
        "t",
        "t",
        "overMenu",
        "t",
        "e",
        "dropDown",
        "t",
        "menuItem",
        "registry",
        "t",
        "t",
        "t",
        "menuItem",
        "menuItem",
        "menuItem",
        "menuItem",
        "menuItem",
        "e",
        "dropDown",
        "dropDown",
        "e",
        "dropDown",
        "has",
        "e",
        "has",
        "e",
        "e",
        "e",
        "arguments",
        "domClass",
        "defaultPos",
        "arguments",
        "on",
        "lang",
        "on",
        "lang",
        "on",
        "keyboardEventNode",
        "lang",
        "on",
        "keyboardEventNode",
        "lang",
        "arguments",
        "e",
        "e",
        "d",
        "d",
        "d",
        "e",
        "e",
        "d",
        "e",
        "keys",
        "e",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "keys",
        "target",
        "target",
        "target",
        "e",
        "d",
        "d",
        "lang",
        "d",
        "focus",
        "dom",
        "focus",
        "focusMe",
        "arguments",
        "loadCallback",
        "loadCallback",
        "Deferred",
        "lang",
        "d",
        "afterLoad",
        "afterLoad",
        "d",
        "dropDown",
        "ddNode",
        "ddNode",
        "myStyle",
        "myStyle",
        "domStyle",
        "ddNode",
        "myStyle",
        "maxHeight",
        "Viewport",
        "domGeometry",
        "aroundNode",
        "maxHeight",
        "position",
        "viewport",
        "position",
        "position",
        "popup",
        "dropDown",
        "dropDown",
        "dropDown",
        "dropDown",
        "domGeometry",
        "ddNode",
        "maxHeight",
        "mb",
        "maxHeight",
        "domStyle",
        "ddNode",
        "overHeight",
        "overHeight",
        "mb",
        "maxHeight",
        "mb",
        "mb",
        "mb",
        "mb",
        "aroundNode",
        "mb",
        "mb",
        "aroundNode",
        "mb",
        "lang",
        "dropDown",
        "dropDown",
        "mb",
        "domGeometry",
        "ddNode",
        "mb",
        "popup",
        "dropDown",
        "aroundNode",
        "domAttr",
        "domClass",
        "domAttr",
        "domClass",
        "dropDown",
        "ddNode",
        "ddNode",
        "ddNode",
        "retVal",
        "focus",
        "focus",
        "popup",
        "define",
        "array",
        "aspect",
        "lang",
        "args",
        "lang",
        "args",
        "store",
        "store",
        "aspect",
        "store",
        "lang",
        "aspect",
        "store",
        "lang",
        "aspect",
        "store",
        "lang",
        "h",
        "h",
        "onItem",
        "onError",
        "onItem",
        "lang",
        "items",
        "items",
        "items",
        "items",
        "onItem",
        "onError",
        "item",
        "array",
        "attr",
        "item",
        "attr",
        "parentItem",
        "onComplete",
        "onError",
        "store",
        "parentItem",
        "lang",
        "arguments",
        "store",
        "parentItem",
        "parentItem",
        "getChildren",
        "parentItem",
        "onComplete",
        "onError",
        "onError",
        "i",
        "i",
        "store",
        "parentItem",
        "i",
        "childItems",
        "childItems",
        "vals",
        "array",
        "childItems",
        "item",
        "store",
        "item",
        "_waitCount",
        "_waitCount",
        "onComplete",
        "childItems",
        "array",
        "childItems",
        "item",
        "idx",
        "store",
        "item",
        "store",
        "item",
        "item",
        "childItems",
        "idx",
        "item",
        "_waitCount",
        "onComplete",
        "childItems",
        "onError",
        "something",
        "something",
        "keywordArgs",
        "keywordArgs",
        "item",
        "item",
        "item",
        "item",
        "item",
        "args",
        "parent",
        "insertIndex",
        "parent",
        "args",
        "args",
        "item",
        "item",
        "item",
        "parent",
        "insertIndex",
        "LnewItem",
        "args",
        "pInfo",
        "LnewItem",
        "insertIndex",
        "LnewItem",
        "parent",
        "parent",
        "insertIndex",
        "LnewItem",
        "args",
        "pInfo",
        "LnewItem",
        "insertIndex",
        "LnewItem",
        "parent",
        "parent",
        "insertIndex",
        "childItem",
        "oldParentItem",
        "newParentItem",
        "bCopy",
        "insertIndex",
        "oldParentItem",
        "array",
        "attr",
        "store",
        "oldParentItem",
        "attr",
        "childItem",
        "bCopy",
        "array",
        "store",
        "oldParentItem",
        "attr",
        "x",
        "x",
        "childItem",
        "store",
        "oldParentItem",
        "attr",
        "values",
        "parentAttr",
        "attr",
        "newParentItem",
        "insertIndex",
        "store",
        "newParentItem",
        "parentAttr",
        "childItems",
        "insertIndex",
        "childItem",
        "store",
        "newParentItem",
        "parentAttr",
        "childItems",
        "store",
        "newParentItem",
        "parentAttr",
        "store",
        "newParentItem",
        "parentAttr",
        "childItem",
        "item",
        "parentInfo",
        "parentInfo",
        "parentInfo",
        "lang",
        "children",
        "parentInfo",
        "children",
        "item",
        "item",
        "item",
        "attribute",
        "array",
        "attribute",
        "item",
        "lang",
        "children",
        "item",
        "children",
        "item",
        "define",
        "domConstruct",
        "keys",
        "lang",
        "has",
        "win",
        "winUtils",
        "_Plugin",
        "RichText",
        "rangeapi",
        "baseFocus",
        "_Plugin",
        "args",
        "args",
        "args",
        "args",
        "args",
        "lang",
        "args",
        "editor",
        "editor",
        "editor",
        "editor",
        "lang",
        "d",
        "editor",
        "e",
        "e",
        "keys",
        "lang",
        "e",
        "ne",
        "ne",
        "e",
        "has",
        "has",
        "editor",
        "e",
        "setTimeout",
        "dojo",
        "r",
        "r",
        "r",
        "r",
        "d",
        "lang",
        "editor",
        "h",
        "editor",
        "h",
        "win",
        "baseFocus",
        "liparent",
        "RichText",
        "block",
        "block",
        "has",
        "r",
        "r",
        "has",
        "liparent",
        "liparent",
        "liparent",
        "liparent",
        "fc",
        "fc",
        "fc",
        "fc",
        "liparent",
        "fc",
        "fc",
        "rangeapi",
        "newrange",
        "liparent",
        "rangeapi",
        "selection",
        "selection",
        "newrange",
        "e",
        "e",
        "rangeapi",
        "parent",
        "header",
        "header",
        "selection",
        "rangeapi",
        "selection",
        "selection",
        "rangeapi",
        "selection",
        "rangeapi",
        "header",
        "br",
        "doc",
        "newrange",
        "rangeapi",
        "header",
        "br",
        "header",
        "newrange",
        "br",
        "selection",
        "selection",
        "newrange",
        "rangeapi",
        "header",
        "newrange",
        "rangeapi",
        "br",
        "doc",
        "header",
        "br",
        "header",
        "doc",
        "newrange",
        "header",
        "selection",
        "selection",
        "newrange",
        "rs",
        "rs",
        "rs",
        "txt",
        "rs",
        "startNode",
        "doc",
        "txt",
        "endNode",
        "doc",
        "txt",
        "brNode",
        "doc",
        "endNode",
        "has",
        "endNode",
        "doc",
        "domConstruct",
        "startNode",
        "rs",
        "domConstruct",
        "brNode",
        "startNode",
        "domConstruct",
        "endNode",
        "brNode",
        "domConstruct",
        "rs",
        "newrange",
        "rangeapi",
        "newrange",
        "endNode",
        "selection",
        "selection",
        "newrange",
        "selection",
        "rangeapi",
        "selection",
        "selection",
        "selection",
        "rangeapi",
        "selection",
        "rs",
        "rs",
        "rs",
        "rs",
        "offset",
        "ret",
        "rs",
        "offset",
        "rs",
        "ret",
        "offset",
        "ret",
        "txt",
        "rs",
        "startNode",
        "doc",
        "txt",
        "offset",
        "endNode",
        "doc",
        "txt",
        "offset",
        "brNode",
        "doc",
        "endNode",
        "endNode",
        "doc",
        "startNode",
        "domConstruct",
        "startNode",
        "rs",
        "startNode",
        "rs",
        "domConstruct",
        "brNode",
        "startNode",
        "domConstruct",
        "endNode",
        "brNode",
        "domConstruct",
        "rs",
        "newrange",
        "rangeapi",
        "newrange",
        "endNode",
        "newrange",
        "endNode",
        "endNode",
        "selection",
        "selection",
        "newrange",
        "targetNode",
        "rs",
        "doc",
        "doc",
        "targetNode",
        "rs",
        "brNode",
        "rs",
        "endNode",
        "domConstruct",
        "brNode",
        "targetNode",
        "domConstruct",
        "endNode",
        "brNode",
        "newrange",
        "rangeapi",
        "newrange",
        "endNode",
        "newrange",
        "endNode",
        "endNode",
        "selection",
        "selection",
        "newrange",
        "RichText",
        "selection",
        "rangeapi",
        "selection",
        "selection",
        "rangeapi",
        "selection",
        "rangeapi",
        "block",
        "blockNode",
        "blockNode",
        "blockNode",
        "has",
        "blockNode",
        "blockNode",
        "blockNode",
        "has",
        "newrange",
        "rangeapi",
        "newrange",
        "blockNode",
        "selection",
        "selection",
        "newrange",
        "block",
        "block",
        "RichText",
        "e2",
        "block",
        "block",
        "block",
        "block",
        "block",
        "block",
        "block",
        "selection",
        "rangeapi",
        "selection",
        "doc",
        "newblock",
        "block",
        "node",
        "endOffset",
        "node",
        "endOffset",
        "node",
        "ret",
        "endOffset",
        "ret",
        "rangeapi",
        "block",
        "node",
        "endOffset",
        "block",
        "block",
        "block",
        "newblock",
        "domConstruct",
        "newblock",
        "block",
        "_letBrowserHandle",
        "newrange",
        "rangeapi",
        "newrange",
        "newblock",
        "selection",
        "selection",
        "newrange",
        "winUtils",
        "newblock",
        "rangeapi",
        "block",
        "domConstruct",
        "newblock",
        "block",
        "block",
        "block",
        "newblock",
        "newrange",
        "rangeapi",
        "newrange",
        "newblock",
        "selection",
        "selection",
        "newrange",
        "winUtils",
        "newblock",
        "_letBrowserHandle",
        "block",
        "block",
        "block",
        "newblock",
        "domConstruct",
        "newblock",
        "block",
        "_letBrowserHandle",
        "block",
        "newblock",
        "block",
        "newblock",
        "block",
        "rs",
        "rs",
        "rs",
        "endOffset",
        "rs",
        "endOffset",
        "ret",
        "rs",
        "endOffset",
        "rs",
        "ret",
        "endOffset",
        "ret",
        "txt",
        "rs",
        "startNode",
        "doc",
        "txt",
        "endOffset",
        "endNode",
        "doc",
        "txt",
        "endOffset",
        "txt",
        "domConstruct",
        "startNode",
        "rs",
        "domConstruct",
        "endNode",
        "rs",
        "domConstruct",
        "rs",
        "startNode",
        "parentC",
        "block",
        "parentC",
        "doc",
        "tg",
        "parentC",
        "newTg",
        "parentC",
        "newTg",
        "parentC",
        "parentC",
        "parentC",
        "newTg",
        "parentC",
        "parentC",
        "newTg",
        "parentC",
        "parentC",
        "newTg",
        "parentC",
        "nodeToMove",
        "endNode",
        "nodeToMove",
        "tNode",
        "nodeToMove",
        "newTg",
        "nodeToMove",
        "nodeToMove",
        "tNode",
        "domConstruct",
        "newTg",
        "parentC",
        "startNode",
        "parentC",
        "endNode",
        "newTg",
        "parentC",
        "parentC",
        "nodeToMove",
        "endNode",
        "nodeToMove",
        "nodeToMove",
        "nodeToMove",
        "newblock",
        "firstNodeMoved",
        "nodeToMove",
        "nodeToMove",
        "tNode",
        "nodeToMove",
        "newblock",
        "nodeToMove",
        "nodeToMove",
        "tNode",
        "newrange",
        "rangeapi",
        "innerMostFirstNodeMoved",
        "nodeForCursor",
        "innerMostFirstNodeMoved",
        "tNode",
        "innerMostFirstNodeMoved",
        "innerMostFirstNodeMoved",
        "tNode",
        "nodeForCursor",
        "nodeForCursor",
        "newblock",
        "nodeForCursor",
        "newrange",
        "newblock",
        "selection",
        "selection",
        "newrange",
        "winUtils",
        "newblock",
        "has",
        "block",
        "_letBrowserHandle",
        "newrange",
        "newblock",
        "selection",
        "selection",
        "newrange",
        "winUtils",
        "newblock",
        "has",
        "block",
        "_letBrowserHandle",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "node",
        "offset",
        "offset",
        "node",
        "node",
        "node",
        "node",
        "offset",
        "container",
        "container",
        "container",
        "container",
        "para",
        "para",
        "para",
        "para",
        "para",
        "para",
        "domConstruct",
        "para",
        "para",
        "para",
        "define",
        "array",
        "dom",
        "domAttr",
        "domClass",
        "lang",
        "mouse",
        "on",
        "winUtils",
        "a11yclick",
        "pm",
        "registry",
        "_Widget",
        "_KeyNavContainer",
        "_TemplatedMixin",
        "_Widget",
        "_TemplatedMixin",
        "_KeyNavContainer",
        "node",
        "registry",
        "node",
        "node",
        "widget",
        "widget",
        "lang",
        "on",
        "on",
        "matches",
        "mouse",
        "registry",
        "on",
        "on",
        "matches",
        "mouse",
        "registry",
        "on",
        "on",
        "matches",
        "a11yclick",
        "evt",
        "registry",
        "evt",
        "evt",
        "evt",
        "arguments",
        "evt",
        "evt",
        "topMenu",
        "topMenu",
        "topMenu",
        "parentMenu",
        "parentMenu",
        "parentMenu",
        "parentMenu",
        "item",
        "item",
        "item",
        "item",
        "item",
        "item",
        "item",
        "item",
        "itemPopup",
        "itemPopup",
        "itemPopup",
        "itemPopup",
        "itemPopup",
        "itemPopup",
        "pm",
        "itemPopup",
        "item",
        "item",
        "item",
        "popup",
        "popup",
        "popup",
        "popup",
        "top",
        "top",
        "top",
        "top",
        "item",
        "evt",
        "item",
        "item",
        "item",
        "evt",
        "item",
        "item",
        "evt",
        "item",
        "evt",
        "focus",
        "from_item",
        "from_item",
        "popup",
        "pm",
        "popup",
        "popup",
        "from_item",
        "pm",
        "popup",
        "from_item",
        "from_item",
        "from_item",
        "from_item",
        "lang",
        "popup",
        "on",
        "popup",
        "lang",
        "focus",
        "popup",
        "popup",
        "lang",
        "popup",
        "domClass",
        "domClass",
        "array",
        "domAttr",
        "pm",
        "item",
        "item",
        "arguments",
        "define",
        "array",
        "kernel",
        "lang",
        "TreeStoreModel",
        "TreeStoreModel",
        "item",
        "item",
        "arguments",
        "parentItem",
        "callback",
        "onError",
        "parentItem",
        "callback",
        "lang",
        "items",
        "items",
        "callback",
        "items",
        "onError",
        "arguments",
        "something",
        "something",
        "arguments",
        "keywordArgs",
        "keywordArgs",
        "keywordArgs",
        "kernel",
        "keywordArgs",
        "keywordArgs",
        "scope",
        "arguments",
        "item",
        "item",
        "arguments",
        "item",
        "item",
        "arguments",
        "args",
        "parent",
        "insertIndex",
        "parent",
        "args",
        "args",
        "arguments",
        "childItem",
        "oldParentItem",
        "newParentItem",
        "bCopy",
        "insertIndex",
        "oldParentItem",
        "bCopy",
        "childItem",
        "arguments",
        "childItem",
        "oldParentItem",
        "oldParentItem",
        "newParentItem",
        "newParentItem",
        "bCopy",
        "insertIndex",
        "newParentItem",
        "childItem",
        "item",
        "item",
        "item",
        "item",
        "lang",
        "newChildren",
        "newChildren",
        "oldChildren",
        "newChildren",
        "array",
        "oldChildren",
        "item",
        "idx",
        "newChildren",
        "idx",
        "item",
        "newChildren",
        "item",
        "parentInfo",
        "arguments",
        "item",
        "array",
        "item",
        "arguments",
        "item",
        "attribute",
        "oldValue",
        "newValue",
        "arguments",
        "define",
        "PopupMenuItem",
        "MenuBarItem",
        "MenuBarItem",
        "PopupMenuItem",
        "_MenuBarItemMixin",
        "define",
        "array",
        "dom",
        "domAttr",
        "domClass",
        "domGeometry",
        "fxUtils",
        "kernel",
        "keys",
        "_CssStateMixin",
        "_TemplatedMixin",
        "ContentPane",
        "template",
        "manager",
        "ContentPane",
        "_TemplatedMixin",
        "_CssStateMixin",
        "manager",
        "template",
        "arguments",
        "dom",
        "arguments",
        "fxUtils",
        "wipeNode",
        "hideNode",
        "fxUtils",
        "wipeNode",
        "hideNode",
        "open",
        "animate",
        "array",
        "animation",
        "animation",
        "animation",
        "animation",
        "animate",
        "open",
        "anim",
        "open",
        "open",
        "open",
        "open",
        "open",
        "canToggle",
        "canToggle",
        "canToggle",
        "domAttr",
        "domAttr",
        "domAttr",
        "canToggle",
        "content",
        "arguments",
        "domGeometry",
        "domGeometry",
        "arguments",
        "domClass",
        "node",
        "oldCls",
        "e",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "e",
        "keys",
        "e",
        "title",
        "kernel",
        "title",
        "define",
        "array",
        "domAttr",
        "i18n",
        "arguments",
        "i18n",
        "arguments",
        "value",
        "value",
        "value",
        "node",
        "node",
        "node",
        "node",
        "item",
        "labelFunc",
        "labelFunc",
        "item",
        "labelObject",
        "menuitem",
        "labelObject",
        "menuitem",
        "menuitem",
        "labelObject",
        "menuitem",
        "menuitem",
        "menuitem",
        "menuitem",
        "menuitem",
        "menuitem",
        "results",
        "options",
        "labelFunc",
        "results",
        "options",
        "domAttr",
        "array",
        "results",
        "item",
        "i",
        "item",
        "labelFunc",
        "menuitem",
        "i",
        "domAttr",
        "menuitem",
        "i",
        "menuitem",
        "results",
        "results",
        "results",
        "options",
        "options",
        "results",
        "displayMore",
        "options",
        "options",
        "results",
        "options",
        "results",
        "displayMore",
        "options",
        "results",
        "displayMore",
        "displayMore",
        "domAttr",
        "container",
        "container",
        "container",
        "container",
        "arguments",
        "arguments",
        "define",
        "keys",
        "lang",
        "query",
        "has",
        "when",
        "registry",
        "Infinity",
        "evt",
        "evt",
        "evt",
        "evt",
        "evt",
        "evt",
        "evt",
        "key",
        "key",
        "key",
        "keys",
        "key",
        "keys",
        "keys",
        "doSearch",
        "doSearch",
        "key",
        "key",
        "doSearch",
        "text",
        "lang",
        "text",
        "_this",
        "_this",
        "query",
        "options",
        "_this",
        "_this",
        "q",
        "_this",
        "when",
        "resPromise",
        "res",
        "_this",
        "_this",
        "_this",
        "q",
        "_this",
        "when",
        "resPromise",
        "total",
        "res",
        "total",
        "_this",
        "isNaN",
        "pageSize",
        "pageSize",
        "res",
        "pageSize",
        "res",
        "res",
        "direction",
        "options",
        "direction",
        "direction",
        "options",
        "pageSize",
        "direction",
        "options",
        "res",
        "options",
        "res",
        "options",
        "options",
        "pageSize",
        "options",
        "options",
        "pageSize",
        "options",
        "options",
        "options",
        "res",
        "_this",
        "res",
        "query",
        "options",
        "startQuery",
        "_this",
        "res",
        "query",
        "options",
        "err",
        "_this",
        "_this",
        "_this",
        "err",
        "lang",
        "options",
        "q",
        "qs",
        "q",
        "qs",
        "q",
        "qs",
        "query",
        "q",
        "startQuery",
        "registry",
        "arguments",
        "define",
        "kernel",
        "Button",
        "_ToggleButtonMixin",
        "Button",
        "_ToggleButtonMixin",
        "kernel",
        "define",
        "keys",
        "_Spinner",
        "NumberTextBox",
        "_Spinner",
        "NumberTextBox",
        "val",
        "delta",
        "isNaN",
        "val",
        "isNaN",
        "tc",
        "isNaN",
        "tc",
        "v",
        "delta",
        "val",
        "delta",
        "gotMin",
        "tc",
        "gotMax",
        "tc",
        "gotMax",
        "gotMin",
        "tc",
        "val",
        "delta",
        "v",
        "isNaN",
        "newval",
        "val",
        "gotMax",
        "newval",
        "tc",
        "newval",
        "tc",
        "gotMin",
        "newval",
        "tc",
        "newval",
        "tc",
        "newval",
        "e",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "e",
        "e",
        "e",
        "keys",
        "value",
        "value",
        "e",
        "define",
        "domStyle",
        "_ExpandingTextAreaMixin",
        "SimpleTextarea",
        "SimpleTextarea",
        "_ExpandingTextAreaMixin",
        "arguments",
        "domStyle",
        "define",
        "Calendar",
        "_DateTimeTextBox",
        "_DateTimeTextBox",
        "Calendar",
        "require",
        "define",
        "require",
        "array",
        "fx",
        "dom",
        "domAttr",
        "domClass",
        "domConstruct",
        "domGeometry",
        "keys",
        "lang",
        "has",
        "topic",
        "focus",
        "manager",
        "ready",
        "_Widget",
        "_Container",
        "_TemplatedMixin",
        "_CssStateMixin",
        "StackContainer",
        "ContentPane",
        "template",
        "_Widget",
        "_TemplatedMixin",
        "_CssStateMixin",
        "template",
        "arguments",
        "domAttr",
        "titleTextNodeId",
        "domAttr",
        "dom",
        "domGeometry",
        "parent",
        "focus",
        "evt",
        "evt",
        "isSelected",
        "isSelected",
        "isSelected",
        "isSelected",
        "isSelected",
        "_Widget",
        "_CssStateMixin",
        "domConstruct",
        "lang",
        "lang",
        "child",
        "cls",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "child",
        "domConstruct",
        "domConstruct",
        "arguments",
        "lang",
        "name",
        "oldValue",
        "newValue",
        "button",
        "newValue",
        "lang",
        "name",
        "oldValue",
        "newValue",
        "button",
        "newValue",
        "lang",
        "name",
        "oldValue",
        "newValue",
        "button",
        "newValue",
        "isSelected",
        "isSelected",
        "isSelected",
        "isSelected",
        "cw",
        "cw",
        "array",
        "w",
        "w",
        "arguments",
        "preserveDom",
        "preserveDom",
        "StackContainer",
        "manager",
        "AccordionButton",
        "arguments",
        "arguments",
        "openPane",
        "openPane",
        "domGeometry",
        "wrapperDomNode",
        "domGeometry",
        "wrapperDomNode",
        "openPane",
        "domGeometry",
        "wrapperContainerNode",
        "domGeometry",
        "wrapperContainerNode",
        "array",
        "child",
        "child",
        "openPane",
        "totalCollapsedHeight",
        "domGeometry",
        "child",
        "mySize",
        "totalCollapsedHeight",
        "wrapperDomNodeMargin",
        "wrapperDomNodePadBorder",
        "wrapperContainerNodeMargin",
        "wrapperContainerNodePadBorder",
        "openPane",
        "wrapperDomNodeMargin",
        "wrapperDomNodePadBorder",
        "wrapperContainerNodeMargin",
        "wrapperContainerNodePadBorder",
        "openPane",
        "openPane",
        "child",
        "child",
        "AccordionInnerContainer",
        "child",
        "child",
        "child",
        "child",
        "child",
        "arguments",
        "child",
        "insertIndex",
        "insertIndex",
        "insertIndex",
        "_Widget",
        "children",
        "children",
        "insertIndex",
        "refNode",
        "children",
        "insertIndex",
        "insertIndex",
        "domConstruct",
        "child",
        "refNode",
        "insertIndex",
        "child",
        "child",
        "child",
        "topic",
        "child",
        "insertIndex",
        "child",
        "arguments",
        "child",
        "child",
        "domConstruct",
        "child",
        "child",
        "child",
        "child",
        "domClass",
        "child",
        "arguments",
        "array",
        "arguments",
        "child",
        "child",
        "child",
        "child",
        "array",
        "child",
        "child",
        "child",
        "child",
        "arguments",
        "child",
        "child",
        "arguments",
        "child",
        "child",
        "arguments",
        "newWidget",
        "oldWidget",
        "animate",
        "has",
        "animate",
        "newWidget",
        "newWidget",
        "newWidget",
        "newWidget",
        "newWidget",
        "oldWidget",
        "oldWidget",
        "animate",
        "oldWidget",
        "animate",
        "newWidget",
        "oldWidget",
        "newWidget",
        "domGeometry",
        "wrapperContainerNode",
        "domGeometry",
        "wrapperContainerNode",
        "wrapperContainerNodeMargin",
        "wrapperContainerNodePadBorder",
        "oldContents",
        "animationHeightOverhead",
        "fx",
        "newContents",
        "animationHeightOverhead",
        "value",
        "value",
        "value",
        "newContents",
        "value",
        "oldContents",
        "animationHeightOverhead",
        "value",
        "newContents",
        "oldWidget",
        "oldContents",
        "oldWidget",
        "d",
        "e",
        "fromTitle",
        "e",
        "fromTitle",
        "e",
        "e",
        "fromTitle",
        "c",
        "keys",
        "c",
        "keys",
        "e",
        "c",
        "keys",
        "e",
        "fromTitle",
        "c",
        "keys",
        "c",
        "keys",
        "e",
        "c",
        "keys",
        "c",
        "keys",
        "e",
        "has",
        "ready",
        "require",
        "requires",
        "AccordionContainer",
        "AccordionInnerContainer",
        "AccordionContainer",
        "AccordionButton",
        "AccordionContainer",
        "define",
        "keys",
        "focus",
        "DropDownButton",
        "template",
        "DropDownButton",
        "template",
        "evt",
        "evt",
        "keys",
        "focus",
        "evt",
        "evt",
        "evt",
        "keys",
        "focus",
        "evt",
        "position",
        "focus",
        "position",
        "define",
        "array",
        "cookie",
        "dom",
        "domClass",
        "domConstruct",
        "domGeometry",
        "domStyle",
        "kernel",
        "lang",
        "on",
        "has",
        "registry",
        "_WidgetBase",
        "_LayoutWidget",
        "_LayoutWidget",
        "kernel",
        "arguments",
        "arguments",
        "has",
        "parseInt",
        "e",
        "sizer",
        "sizer",
        "sizer",
        "sizer",
        "sizer",
        "dom",
        "sizer",
        "h",
        "h",
        "arguments",
        "array",
        "child",
        "i",
        "children",
        "child",
        "i",
        "children",
        "arguments",
        "child",
        "arguments",
        "child",
        "domClass",
        "child",
        "e",
        "e",
        "i",
        "i",
        "i",
        "e",
        "i",
        "e",
        "i",
        "index",
        "index",
        "index",
        "index",
        "sizer",
        "registry",
        "index",
        "sizer",
        "sizer",
        "sizer",
        "thumb",
        "sizer",
        "thumb",
        "sizer",
        "dom",
        "sizer",
        "widget",
        "array",
        "widget",
        "i",
        "i",
        "i",
        "domConstruct",
        "i",
        "i",
        "arguments",
        "child",
        "insertIndex",
        "arguments",
        "children",
        "insertIndex",
        "children",
        "children",
        "space",
        "children",
        "array",
        "children",
        "child",
        "outOf",
        "child",
        "space",
        "outOf",
        "array",
        "children",
        "children",
        "child",
        "pixPerUnit",
        "child",
        "child",
        "size",
        "totalSize",
        "size",
        "children",
        "children",
        "space",
        "totalSize",
        "children",
        "children",
        "pos",
        "size",
        "children",
        "pos",
        "pos",
        "size",
        "array",
        "children",
        "child",
        "i",
        "i",
        "i",
        "pos",
        "i",
        "pos",
        "pos",
        "size",
        "child",
        "child",
        "pos",
        "size",
        "child",
        "pos",
        "pos",
        "size",
        "panel",
        "pos",
        "size",
        "panel",
        "pos",
        "panel",
        "box",
        "size",
        "panel",
        "panel",
        "box",
        "domGeometry",
        "panel",
        "box",
        "panel",
        "panel",
        "pos",
        "box",
        "size",
        "panel",
        "panel",
        "box",
        "domGeometry",
        "panel",
        "box",
        "slider",
        "pos",
        "size",
        "slider",
        "pos",
        "slider",
        "domGeometry",
        "slider",
        "size",
        "slider",
        "slider",
        "pos",
        "domGeometry",
        "slider",
        "size",
        "growth",
        "pane",
        "growth",
        "pane",
        "pane",
        "pane",
        "pane",
        "growth",
        "pane",
        "pane",
        "growth",
        "growth",
        "growth",
        "pane",
        "pane",
        "pane",
        "pane",
        "growth",
        "array",
        "children",
        "child",
        "totalSize",
        "child",
        "totalMinSize",
        "child",
        "totalMinSize",
        "totalSize",
        "array",
        "children",
        "child",
        "child",
        "child",
        "growth",
        "child",
        "child",
        "child",
        "child",
        "growth",
        "children",
        "children",
        "array",
        "child",
        "growth",
        "growth",
        "child",
        "array",
        "children",
        "child",
        "child",
        "totalSize",
        "child",
        "totalMinSize",
        "e",
        "i",
        "children",
        "i",
        "children",
        "i",
        "i",
        "domStyle",
        "domConstruct",
        "e",
        "e",
        "on",
        "lang",
        "on",
        "lang",
        "e",
        "e",
        "e",
        "e",
        "delta",
        "delta",
        "e",
        "delta",
        "h",
        "h",
        "delta",
        "delta",
        "delta",
        "delta",
        "array",
        "child",
        "child",
        "child",
        "domGeometry",
        "delta",
        "delta",
        "domStyle",
        "pos",
        "i",
        "i",
        "array",
        "child",
        "i",
        "i",
        "cookie",
        "cookieName",
        "cookieValue",
        "parseInt",
        "cookieValue",
        "pos",
        "child",
        "pos",
        "array",
        "child",
        "i",
        "cookie",
        "i",
        "child",
        "SplitContainer",
        "lang",
        "_WidgetBase",
        "SplitContainer",
        "SplitContainer",
        "define",
        "domAttr",
        "keys",
        "lang",
        "query",
        "regexp",
        "has",
        "DataList",
        "registry",
        "_TextBoxMixin",
        "SearchMixin",
        "SearchMixin",
        "element",
        "element",
        "pos",
        "element",
        "has",
        "element",
        "element",
        "tr",
        "ntr",
        "ntr",
        "tr",
        "pos",
        "ntr",
        "e",
        "pos",
        "element",
        "location",
        "location",
        "parseInt",
        "location",
        "_TextBoxMixin",
        "element",
        "location",
        "location",
        "value",
        "arguments",
        "value",
        "evt",
        "evt",
        "evt",
        "evt",
        "key",
        "keys",
        "key",
        "keys",
        "key",
        "keys",
        "key",
        "keys",
        "arguments",
        "evt",
        "evt",
        "evt",
        "highlighted",
        "pw",
        "key",
        "keys",
        "keys",
        "keys",
        "keys",
        "highlighted",
        "evt",
        "keys",
        "highlighted",
        "highlighted",
        "pw",
        "evt",
        "highlighted",
        "pw",
        "evt",
        "evt",
        "keys",
        "pw",
        "newvalue",
        "pw",
        "newvalue",
        "pw",
        "highlighted",
        "highlighted",
        "keys",
        "text",
        "_TextBoxMixin",
        "fn",
        "fn",
        "text",
        "caseFilter",
        "caseFilter",
        "fn",
        "fn",
        "cpos",
        "fn",
        "fn",
        "text",
        "_TextBoxMixin",
        "fn",
        "cpos",
        "fn",
        "text",
        "_TextBoxMixin",
        "fn",
        "results",
        "query",
        "options",
        "results",
        "options",
        "lang",
        "direction",
        "results",
        "direction",
        "results",
        "options",
        "lang",
        "options",
        "options",
        "options",
        "wasSelected",
        "query",
        "arguments",
        "pw",
        "newvalue",
        "pw",
        "newvalue",
        "pw",
        "newvalue",
        "item",
        "priorityChange",
        "displayedValue",
        "item",
        "displayedValue",
        "displayedValue",
        "item",
        "item",
        "value",
        "item",
        "displayedValue",
        "value",
        "priorityChange",
        "displayedValue",
        "item",
        "node",
        "node",
        "node",
        "node",
        "newValue",
        "node",
        "node",
        "newValue",
        "item",
        "item",
        "item",
        "newValue",
        "domAttr",
        "node",
        "newValue",
        "target",
        "target",
        "target",
        "arguments",
        "key",
        "lang",
        "lang",
        "dropDownConstructor",
        "lang",
        "popupId",
        "key",
        "arguments",
        "arguments",
        "DataList",
        "srcNodeRef",
        "item",
        "item",
        "valueField",
        "item",
        "valueField",
        "query",
        "label",
        "label",
        "label",
        "label",
        "arguments",
        "item",
        "item",
        "label",
        "label",
        "labelType",
        "labelType",
        "label",
        "label",
        "find",
        "find",
        "regexp",
        "find",
        "label",
        "i",
        "find",
        "i",
        "modifiers",
        "arguments",
        "item",
        "store",
        "store",
        "store",
        "item",
        "item",
        "value",
        "priorityChange",
        "displayedValue",
        "item",
        "item",
        "value",
        "value",
        "arguments",
        "textDir",
        "arguments",
        "textDir",
        "define",
        "domConstruct",
        "ValidationTextBox",
        "ValidationTextBox",
        "arguments",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val",
        "arguments",
        "arguments",
        "domConstruct",
        "arguments",
        "define",
        "Deferred",
        "kernel",
        "lang",
        "QueryResults",
        "_AutoCompleterMixin",
        "_ComboBoxMenu",
        "_HasDropDown",
        "template",
        "_HasDropDown",
        "_AutoCompleterMixin",
        "_ComboBoxMenu",
        "template",
        "val",
        "val",
        "val",
        "arguments",
        "store",
        "store",
        "lang",
        "store",
        "id",
        "Deferred",
        "id",
        "deferred",
        "error",
        "deferred",
        "error",
        "deferred",
        "query",
        "options",
        "Deferred",
        "fetchHandle",
        "fetchHandle",
        "deferred",
        "Deferred",
        "lang",
        "query",
        "count",
        "deferred",
        "count",
        "results",
        "deferred",
        "results",
        "error",
        "deferred",
        "error",
        "options",
        "QueryResults",
        "deferred",
        "store",
        "store",
        "store",
        "arguments",
        "lang",
        "item",
        "attr",
        "kernel",
        "clazz",
        "item",
        "attr",
        "item",
        "kernel",
        "clazz",
        "item",
        "args",
        "kernel",
        "clazz",
        "require",
        "shim",
        "lang",
        "ObjectStore",
        "ObjectStore",
        "args",
        "define",
        "query",
        "query",
        "define",
        "array",
        "dom",
        "keys",
        "lang",
        "on",
        "dijit",
        "value",
        "priorityChange",
        "formattedValue",
        "value",
        "filteredValue",
        "value",
        "formattedValue",
        "filteredValue",
        "filteredValue",
        "isNaN",
        "filteredValue",
        "formattedValue",
        "filteredValue",
        "formattedValue",
        "formattedValue",
        "formattedValue",
        "isNaN",
        "formattedValue",
        "formattedValue",
        "formattedValue",
        "formattedValue",
        "arguments",
        "filteredValue",
        "priorityChange",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "evt",
        "evt",
        "evt",
        "arguments",
        "e",
        "e",
        "charOrCode",
        "e",
        "charOrCode",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "e",
        "e",
        "e",
        "charOrCode",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "charOrCode",
        "charOrCode",
        "charOrCode",
        "charOrCode",
        "charOrCode",
        "keys",
        "i",
        "keys",
        "keys",
        "i",
        "e",
        "named",
        "named",
        "charOrCode",
        "e",
        "e",
        "e",
        "charOrCode",
        "charOrCode",
        "e",
        "e",
        "e",
        "e",
        "e",
        "keys",
        "e",
        "e",
        "charOrCode",
        "charOrCode",
        "e",
        "charOrCode",
        "charOrCode",
        "charOrCode",
        "charOrCode",
        "charOrCode",
        "charOrCode",
        "charOrCode",
        "charOrCode",
        "e",
        "e",
        "e",
        "e",
        "attr",
        "e",
        "attr",
        "attr",
        "e",
        "attr",
        "v",
        "v",
        "faux",
        "attr",
        "v",
        "lang",
        "faux",
        "charOrCode",
        "faux",
        "e",
        "e",
        "faux",
        "faux",
        "faux",
        "faux",
        "faux",
        "on",
        "lang",
        "handleEvent",
        "val",
        "val",
        "val",
        "val",
        "val",
        "lang",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val",
        "word",
        "word",
        "word",
        "val",
        "e",
        "arguments",
        "by",
        "by",
        "_TextBoxMixin",
        "arguments",
        "arguments",
        "textDir",
        "textDir",
        "textDir",
        "_TextBoxMixin",
        "dijit",
        "element",
        "start",
        "stop",
        "element",
        "element",
        "start",
        "stop",
        "_TextBoxMixin",
        "dijit",
        "element",
        "start",
        "stop",
        "element",
        "dom",
        "element",
        "isNaN",
        "start",
        "start",
        "isNaN",
        "stop",
        "stop",
        "element",
        "element",
        "element",
        "_TextBoxMixin",
        "element",
        "start",
        "stop",
        "e",
        "_TextBoxMixin",
        "define",
        "domClass",
        "has",
        "TextBox",
        "TextBox",
        "arguments",
        "arguments",
        "has",
        "domClass",
        "value",
        "value",
        "value",
        "value",
        "arguments",
        "e",
        "parseInt",
        "value",
        "maxLength",
        "overflow",
        "textarea",
        "textarea",
        "has",
        "cr",
        "pos",
        "value",
        "pos",
        "overflow",
        "cr",
        "value",
        "pos",
        "cr",
        "textarea",
        "pos",
        "overflow",
        "pos",
        "overflow",
        "textarea",
        "overflow",
        "arguments",
        "define",
        "domStyle",
        "query",
        "registry",
        "MenuItem",
        "MenuItem",
        "query",
        "arguments",
        "nodes",
        "arguments",
        "query",
        "registry",
        "node",
        "domStyle",
        "preserveDom",
        "preserveDom",
        "arguments",
        "define",
        "array",
        "ddate",
        "locale",
        "stamp",
        "domClass",
        "domConstruct",
        "kernel",
        "keys",
        "lang",
        "has",
        "query",
        "mouse",
        "typematic",
        "_Widget",
        "_TemplatedMixin",
        "_FormValueWidget",
        "template",
        "_Widget",
        "_TemplatedMixin",
        "template",
        "stamp",
        "value",
        "kernel",
        "value",
        "date",
        "date",
        "val",
        "val",
        "start",
        "maxNum",
        "before",
        "lastNode",
        "lastNode",
        "lastNode",
        "i",
        "before",
        "before",
        "dec",
        "i",
        "dec",
        "n",
        "i",
        "n",
        "before",
        "n",
        "lastValue",
        "before",
        "n",
        "lastValue",
        "nodes",
        "before",
        "n",
        "lastValue",
        "n",
        "i",
        "inc",
        "nodes",
        "maxNum",
        "i",
        "chk",
        "max",
        "nodes",
        "stamp",
        "fromIso",
        "fromIso",
        "fromIso",
        "date",
        "date",
        "date",
        "date",
        "sinceMidnight",
        "sinceMidnight",
        "sinceMidnight",
        "time",
        "time",
        "clickableIncrementSeconds",
        "visibleRangeSeconds",
        "clickableIncrementSeconds",
        "visibleIncrementSeconds",
        "clickableIncrementSeconds",
        "clickableIncrementSeconds",
        "count",
        "count",
        "after",
        "estBeforeLength",
        "after",
        "before",
        "estBeforeLength",
        "after",
        "moreAfter",
        "after",
        "after",
        "estBeforeLength",
        "before",
        "after",
        "after",
        "array",
        "before",
        "after",
        "moreAfter",
        "n",
        "n",
        "before",
        "after",
        "moreAfter",
        "arguments",
        "constraints",
        "key",
        "key",
        "constraints",
        "key",
        "constraints",
        "key",
        "constraints",
        "constraints",
        "mouse",
        "typematic",
        "typematic",
        "arguments",
        "e",
        "domClass",
        "e",
        "e",
        "e",
        "e",
        "index",
        "date",
        "date",
        "incrementDate",
        "index",
        "incrementDate",
        "index",
        "incrementDate",
        "index",
        "date",
        "locale",
        "date",
        "dateString",
        "div",
        "div",
        "date",
        "div",
        "index",
        "domConstruct",
        "dateString",
        "div",
        "index",
        "index",
        "domClass",
        "div",
        "index",
        "domClass",
        "div",
        "date",
        "domClass",
        "div",
        "ddate",
        "date",
        "div",
        "domClass",
        "div",
        "domClass",
        "div",
        "domClass",
        "div",
        "domClass",
        "div",
        "div",
        "div",
        "tgt",
        "tgt",
        "tgt",
        "tdate",
        "tdate",
        "tdate",
        "tdate",
        "node",
        "highlight",
        "node",
        "highlight",
        "node",
        "node",
        "domClass",
        "node",
        "highlight",
        "domClass",
        "node",
        "domClass",
        "node",
        "highlight",
        "domClass",
        "node",
        "highlight",
        "e",
        "e",
        "e",
        "e",
        "domClass",
        "tgr",
        "tgr",
        "e",
        "e",
        "e",
        "e",
        "tgr",
        "e",
        "e",
        "e",
        "count",
        "count",
        "domClass",
        "count",
        "domClass",
        "index",
        "divs",
        "divs",
        "count",
        "count",
        "domClass",
        "count",
        "domClass",
        "index",
        "divs",
        "divs",
        "e",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "query",
        "timeMenu",
        "tgt",
        "tgt",
        "timeMenu",
        "timeMenu",
        "e",
        "keys",
        "tgt",
        "e",
        "keys",
        "tgt",
        "e",
        "keys",
        "tgt",
        "tgt",
        "tgt",
        "tgt",
        "tgt",
        "tgt",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "keys",
        "TimePicker",
        "define",
        "CheckBox",
        "_RadioButtonMixin",
        "CheckBox",
        "_RadioButtonMixin",
        "define",
        "require",
        "array",
        "domAttr",
        "domClass",
        "domConstruct",
        "domStyle",
        "i18n",
        "kernel",
        "keys",
        "lang",
        "has",
        "when",
        "fm",
        "_Widget",
        "_TemplatedMixin",
        "_WidgetsInTemplateMixin",
        "_Container",
        "Button",
        "_TextBoxMixin",
        "TextBox",
        "template",
        "_Widget",
        "_TemplatedMixin",
        "_WidgetsInTemplateMixin",
        "template",
        "arguments",
        "i18n",
        "array",
        "prop",
        "prop",
        "prop",
        "prop",
        "arguments",
        "lang",
        "require",
        "srcStyle",
        "domStyle",
        "array",
        "prop",
        "srcStyle",
        "prop",
        "destStyle",
        "prop",
        "wrapperStyle",
        "textStyle",
        "editStyle",
        "prop",
        "srcStyle",
        "prop",
        "array",
        "prop",
        "prop",
        "srcStyle",
        "prop",
        "width",
        "editStyle",
        "editStyle",
        "width",
        "width",
        "width",
        "lang",
        "editStyle",
        "Cls",
        "editorParams",
        "domConstruct",
        "arguments",
        "ew",
        "ew",
        "ew",
        "ew",
        "ew",
        "arguments",
        "arguments",
        "ew",
        "ew",
        "ew",
        "e",
        "e",
        "e",
        "e",
        "keys",
        "e",
        "e",
        "keys",
        "e",
        "e",
        "arguments",
        "fm",
        "fm",
        "_TextBoxMixin",
        "_Widget",
        "TextBox",
        "InlineEditor",
        "has",
        "arguments",
        "name",
        "events",
        "name",
        "events",
        "name",
        "lang",
        "domClass",
        "disabled",
        "kernel",
        "disabled",
        "disabled",
        "disabled",
        "disabled",
        "domClass",
        "disabled",
        "disabled",
        "domClass",
        "domClass",
        "e",
        "e",
        "e",
        "domAttr",
        "domConstruct",
        "lang",
        "Ewc",
        "domStyle",
        "lang",
        "lang",
        "placeholder",
        "domClass",
        "domClass",
        "ww",
        "domStyle",
        "ww",
        "domAttr",
        "ww",
        "when",
        "ew",
        "lang",
        "ww",
        "ew",
        "ew",
        "ew",
        "ww",
        "ew",
        "arguments",
        "arguments",
        "focus",
        "domStyle",
        "ww",
        "domClass",
        "ww",
        "domClass",
        "domAttr",
        "focus",
        "fm",
        "focus",
        "ww",
        "value",
        "focus",
        "val",
        "kernel",
        "val",
        "val",
        "val",
        "lang",
        "val",
        "val",
        "val",
        "renderVal",
        "val",
        "val",
        "kernel",
        "focus",
        "focus",
        "textDir",
        "textDir",
        "textDir",
        "InlineEditBox",
        "InlineEditor",
        "InlineEditBox",
        "define",
        "lang",
        "has",
        "win",
        "domGeom",
        "domStyle",
        "winUtils",
        "lang",
        "exports",
        "exports",
        "winUtils",
        "exports",
        "exports",
        "exports",
        "exports",
        "win",
        "exports",
        "d",
        "doc",
        "d",
        "viewport",
        "winUtils",
        "doc",
        "win",
        "doc",
        "maxScrollTop",
        "html",
        "viewport",
        "maxScrollLeft",
        "html",
        "viewport",
        "exports",
        "e",
        "viewport",
        "winUtils",
        "doc",
        "win",
        "doc",
        "e",
        "exports",
        "dx",
        "exports",
        "e",
        "v",
        "exports",
        "dx",
        "exports",
        "maxScrollLeft",
        "html",
        "e",
        "exports",
        "dy",
        "exports",
        "e",
        "v",
        "exports",
        "dy",
        "exports",
        "maxScrollTop",
        "html",
        "dx",
        "dy",
        "exports",
        "exports",
        "exports",
        "e",
        "e",
        "n",
        "n",
        "n",
        "exports",
        "domStyle",
        "n",
        "s",
        "exports",
        "s",
        "exports",
        "s",
        "exports",
        "overflow",
        "overflowX",
        "overflowY",
        "b",
        "domGeom",
        "n",
        "s",
        "t",
        "domGeom",
        "n",
        "overflow",
        "overflowX",
        "w",
        "exports",
        "b",
        "rx",
        "e",
        "t",
        "has",
        "has",
        "rx",
        "win",
        "dx",
        "rx",
        "rx",
        "b",
        "rx",
        "w",
        "dx",
        "w",
        "rx",
        "b",
        "w",
        "dx",
        "w",
        "oldLeft",
        "n",
        "n",
        "n",
        "dx",
        "overflow",
        "overflowY",
        "h",
        "exports",
        "b",
        "ry",
        "e",
        "t",
        "has",
        "has",
        "ry",
        "win",
        "dy",
        "ry",
        "ry",
        "b",
        "ry",
        "h",
        "dy",
        "h",
        "ry",
        "b",
        "h",
        "dy",
        "h",
        "oldTop",
        "n",
        "n",
        "n",
        "dy",
        "dx",
        "dy",
        "n",
        "n",
        "x",
        "n",
        "exports",
        "e",
        "exports",
        "define",
        "array",
        "domAttr",
        "lang",
        "query",
        "registry",
        "query",
        "lang",
        "inputNode",
        "inputNode",
        "inputNode",
        "registry",
        "inputNode",
        "widget",
        "ary",
        "widget",
        "ary",
        "value",
        "arguments",
        "value",
        "array",
        "lang",
        "widget",
        "widget",
        "widget",
        "widget",
        "value",
        "value",
        "value",
        "e",
        "e",
        "e",
        "array",
        "lang",
        "widget",
        "domAttr",
        "widget",
        "arguments",
        "define",
        "Moveable",
        "Moveable",
        "Moveable",
        "node",
        "mover",
        "mover",
        "clearTimeout",
        "mover",
        "oldOnMove",
        "mover",
        "mover",
        "Moveable",
        "arguments",
        "mover",
        "leftTop",
        "mover",
        "leftTop",
        "mover",
        "mover",
        "setTimeout",
        "mover",
        "oldOnMove",
        "_t",
        "mover",
        "mover",
        "define",
        "ContentPane",
        "_TemplatedMixin",
        "ContentPane",
        "_TemplatedMixin",
        "arguments",
        "define",
        "mouse",
        "on",
        "touch",
        "_ListBase",
        "_ListBase",
        "arguments",
        "evt",
        "target",
        "target",
        "target",
        "evt",
        "target",
        "target",
        "evt",
        "target",
        "selectedNode",
        "target",
        "selectedNode",
        "evt",
        "selectedNode",
        "hoveredNode",
        "evt",
        "hoveredNode",
        "evt",
        "target",
        "evt",
        "target",
        "time",
        "target",
        "target",
        "target",
        "define",
        "dojo",
        "lang",
        "lang",
        "monetary",
        "monetary",
        "code",
        "placesData",
        "code",
        "roundingData",
        "code",
        "places",
        "places",
        "round",
        "round",
        "places",
        "round",
        "monetary",
        "define",
        "dojo",
        "regexp",
        "dojo",
        "name",
        "value",
        "props",
        "arguments",
        "c",
        "regexp",
        "name",
        "ret",
        "matches",
        "decodeURIComponent",
        "matches",
        "props",
        "props",
        "props",
        "exp",
        "d",
        "d",
        "exp",
        "exp",
        "props",
        "d",
        "exp",
        "exp",
        "props",
        "exp",
        "value",
        "encodeURIComponent",
        "value",
        "name",
        "value",
        "propName",
        "props",
        "updatedCookie",
        "propName",
        "props",
        "propName",
        "propValue",
        "updatedCookie",
        "propValue",
        "updatedCookie",
        "ret",
        "dojo",
        "navigator",
        "navigator",
        "navigator",
        "navigator",
        "dojo",
        "define",
        "require",
        "domClass",
        "lang",
        "number",
        "_Widget",
        "_TemplatedMixin",
        "template",
        "_Widget",
        "_TemplatedMixin",
        "template",
        "require",
        "arguments",
        "Infinity",
        "arguments",
        "attributes",
        "lang",
        "attributes",
        "ap",
        "percent",
        "parseFloat",
        "percent",
        "percent",
        "ap",
        "ap",
        "ap",
        "ap",
        "percent",
        "domClass",
        "tip",
        "percent",
        "v",
        "v",
        "v",
        "Infinity",
        "v",
        "label",
        "label",
        "indeterminate",
        "indeterminate",
        "percent",
        "number",
        "percent",
        "define",
        "lang",
        "number",
        "RangeBoundTextBox",
        "number",
        "NaN",
        "number",
        "arguments",
        "constraints",
        "constraints",
        "constraints",
        "places",
        "places",
        "constraints",
        "constraints",
        "places",
        "constraints",
        "constraints",
        "places",
        "arguments",
        "constraints",
        "isNaN",
        "val",
        "isNaN",
        "val",
        "val",
        "formattedValue",
        "formattedValue",
        "arguments",
        "value",
        "constraints",
        "value",
        "value",
        "formattedValue",
        "isNaN",
        "value",
        "value",
        "constraints",
        "constraints",
        "formattedValue",
        "formattedValue",
        "constraints",
        "lang",
        "constraints",
        "value",
        "constraints",
        "number",
        "value",
        "constraints",
        "value",
        "lang",
        "constraints",
        "isNaN",
        "v",
        "v",
        "value",
        "constraints",
        "v",
        "arguments",
        "isNaN",
        "v",
        "v",
        "value",
        "value",
        "value",
        "NaN",
        "arguments",
        "value",
        "options",
        "value",
        "isNaN",
        "value",
        "arguments",
        "lang",
        "lang",
        "val",
        "value",
        "priorityChange",
        "formattedValue",
        "value",
        "formattedValue",
        "formattedValue",
        "value",
        "value",
        "isNaN",
        "value",
        "formattedValue",
        "value",
        "formattedValue",
        "formattedValue",
        "value",
        "formattedValue",
        "value",
        "NaN",
        "value",
        "arguments",
        "value",
        "priorityChange",
        "formattedValue",
        "arguments",
        "isNaN",
        "v",
        "number",
        "lang",
        "isNaN",
        "n",
        "n",
        "v",
        "isFocused",
        "arguments",
        "isNaN",
        "v",
        "v",
        "arguments",
        "RangeBoundTextBox",
        "NumberTextBoxMixin",
        "NumberTextBox",
        "NumberTextBoxMixin",
        "NumberTextBox",
        "define",
        "keys",
        "lang",
        "_TimePicker",
        "_DateTimeTextBox",
        "_DateTimeTextBox",
        "_TimePicker",
        "evt",
        "arguments",
        "evt",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "val",
        "val",
        "val",
        "define",
        "require",
        "template",
        "_Widget",
        "_TemplatedMixin",
        "_PaletteMixin",
        "has",
        "i18n",
        "Color",
        "domConstruct",
        "_Widget",
        "_TemplatedMixin",
        "_PaletteMixin",
        "template",
        "value",
        "row",
        "col",
        "title",
        "value",
        "row",
        "col",
        "title",
        "arguments",
        "ColorPalette",
        "i18n",
        "ColorPalette",
        "Color",
        "require",
        "require",
        "alias",
        "row",
        "col",
        "title",
        "title",
        "row",
        "col",
        "Color",
        "alias",
        "cell",
        "blankGif",
        "has",
        "blankGif",
        "domConstruct",
        "html",
        "cell",
        "ColorPalette",
        "define",
        "currency",
        "lang",
        "NumberTextBox",
        "NumberTextBox",
        "constraints",
        "arguments",
        "lang",
        "constraints",
        "currency",
        "constraints",
        "currency",
        "currency",
        "value",
        "constraints",
        "arguments",
        "isNaN",
        "v",
        "value",
        "v",
        "lang",
        "lang",
        "NumberTextBox",
        "arguments",
        "v",
        "constraints",
        "constraints",
        "constraints",
        "arguments",
        "currency",
        "lang",
        "constraints",
        "define",
        "kernel",
        "lang",
        "_WidgetBase",
        "_LayoutWidget",
        "layoutUtils",
        "_LayoutWidget",
        "kernel",
        "layoutUtils",
        "child",
        "insertIndex",
        "arguments",
        "layoutUtils",
        "widget",
        "arguments",
        "layoutUtils",
        "LayoutContainer",
        "lang",
        "_WidgetBase",
        "LayoutContainer",
        "LayoutContainer",
        "define",
        "array",
        "fx",
        "dom",
        "domClass",
        "domGeometry",
        "domStyle",
        "lang",
        "mouse",
        "on",
        "has",
        "manager",
        "place",
        "_Widget",
        "_TemplatedMixin",
        "BackgroundIframe",
        "template",
        "dijit",
        "_Widget",
        "_TemplatedMixin",
        "manager",
        "template",
        "BackgroundIframe",
        "fx",
        "lang",
        "fx",
        "lang",
        "innerHTML",
        "aroundNode",
        "position",
        "rtl",
        "textDir",
        "aroundNode",
        "innerHTML",
        "arguments",
        "innerHTML",
        "textDir",
        "textDir",
        "rtl",
        "place",
        "aroundNode",
        "position",
        "position",
        "position",
        "Tooltip",
        "rtl",
        "lang",
        "pos",
        "pos",
        "pos",
        "aroundNodeCoords",
        "aroundNodeCoords",
        "pos",
        "pos",
        "pos",
        "aroundNodeCoords",
        "aroundNodeCoords",
        "pos",
        "domStyle",
        "aroundNode",
        "node",
        "aroundCorner",
        "tooltipCorner",
        "spaceAvailable",
        "aroundNodeCoords",
        "spaceAvailable",
        "spaceAvailable",
        "node",
        "aroundCorner",
        "tooltipCorner",
        "domGeometry",
        "has",
        "has",
        "size",
        "widthAvailable",
        "size",
        "domGeometry",
        "width",
        "tooltipCorner",
        "aroundCorner",
        "domGeometry",
        "node",
        "bb",
        "heightAvailable",
        "heightAvailable",
        "aroundNodeCoords",
        "tooltipConnectorHeight",
        "aroundNodePlacement",
        "aroundNodeCoords",
        "tooltipConnectorHeight",
        "bb",
        "tooltipConnectorHeight",
        "size",
        "widthAvailable",
        "has",
        "aroundNode",
        "aroundNode",
        "aroundNode",
        "node",
        "node",
        "has",
        "node",
        "node",
        "array",
        "node",
        "child",
        "child",
        "textDir",
        "textDir",
        "textDir",
        "dijit",
        "innerHTML",
        "aroundNode",
        "position",
        "rtl",
        "textDir",
        "position",
        "position",
        "array",
        "position",
        "val",
        "val",
        "val",
        "Tooltip",
        "dijit",
        "Tooltip",
        "MasterTooltip",
        "Tooltip",
        "innerHTML",
        "aroundNode",
        "position",
        "rtl",
        "textDir",
        "dijit",
        "aroundNode",
        "Tooltip",
        "Tooltip",
        "aroundNode",
        "_Widget",
        "newId",
        "array",
        "nested",
        "array",
        "nested",
        "handle",
        "handle",
        "array",
        "lang",
        "newId",
        "newId",
        "newId",
        "newId",
        "id",
        "dom",
        "id",
        "array",
        "id",
        "dom",
        "id",
        "selector",
        "eventType",
        "on",
        "selector",
        "eventType",
        "eventType",
        "eventType",
        "on",
        "node",
        "delegatedEvent",
        "mouse",
        "on",
        "node",
        "delegatedEvent",
        "on",
        "node",
        "delegatedEvent",
        "mouse",
        "lang",
        "on",
        "node",
        "delegatedEvent",
        "lang",
        "newId",
        "node",
        "node",
        "node",
        "array",
        "id",
        "id",
        "node",
        "node",
        "node",
        "array",
        "id",
        "idx",
        "idx",
        "arguments",
        "domClass",
        "arguments",
        "array",
        "lang",
        "ids",
        "ids",
        "ids",
        "node",
        "target",
        "target",
        "target",
        "target",
        "content",
        "Tooltip",
        "content",
        "target",
        "target",
        "target",
        "Tooltip",
        "array",
        "nested",
        "array",
        "nested",
        "handle",
        "handle",
        "arguments",
        "Tooltip",
        "MasterTooltip",
        "Tooltip",
        "dijit",
        "Tooltip",
        "dijit",
        "Tooltip",
        "Tooltip",
        "define",
        "HorizontalSlider",
        "template",
        "HorizontalSlider",
        "template",
        "define",
        "lang",
        "query",
        "registry",
        "popup",
        "Button",
        "_Container",
        "_HasDropDown",
        "template",
        "Button",
        "_Container",
        "_HasDropDown",
        "template",
        "query",
        "arguments",
        "nodes",
        "query",
        "registry",
        "dropDownNode",
        "popup",
        "arguments",
        "dropDown",
        "dropDown",
        "dropDown",
        "callback",
        "dropDown",
        "lang",
        "handler",
        "callback",
        "dropDown",
        "arguments",
        "define",
        "has",
        "lang",
        "date",
        "dateObject",
        "dateObject",
        "month",
        "date",
        "dateObject",
        "days",
        "month",
        "date",
        "dateObject",
        "dateObject",
        "year",
        "year",
        "year",
        "date",
        "dateObject",
        "dateObject",
        "pos",
        "tz",
        "pos",
        "match",
        "pat",
        "tz",
        "match",
        "dateObject",
        "pat",
        "match",
        "pat",
        "tz",
        "match",
        "tz",
        "tz",
        "tz",
        "date",
        "date1",
        "date2",
        "portion",
        "date1",
        "date1",
        "date2",
        "date2",
        "portion",
        "date1",
        "date2",
        "portion",
        "date1",
        "date2",
        "date1",
        "date2",
        "date1",
        "date2",
        "date",
        "date",
        "interval",
        "amount",
        "date",
        "interval",
        "amount",
        "mod",
        "days",
        "amount",
        "weeks",
        "amount",
        "amount",
        "amount",
        "days",
        "mod",
        "weeks",
        "parseInt",
        "amount",
        "date",
        "strt",
        "amount",
        "adj",
        "strt",
        "amount",
        "adj",
        "strt",
        "days",
        "trgt",
        "trgt",
        "adj",
        "amount",
        "amount",
        "weeks",
        "days",
        "adj",
        "property",
        "fixOvershoot",
        "amount",
        "amount",
        "fixOvershoot",
        "property",
        "property",
        "interval",
        "interval",
        "property",
        "sum",
        "property",
        "sum",
        "property",
        "amount",
        "fixOvershoot",
        "sum",
        "date",
        "sum",
        "sum",
        "date",
        "date1",
        "date2",
        "interval",
        "date2",
        "date2",
        "interval",
        "interval",
        "date2",
        "date1",
        "interval",
        "date1",
        "date2",
        "m1",
        "m2",
        "q2",
        "yearDiff",
        "delta",
        "q2",
        "q1",
        "date",
        "date1",
        "date2",
        "parseInt",
        "date",
        "date1",
        "date2",
        "days",
        "mod",
        "days",
        "weeks",
        "date1",
        "date2",
        "weeks",
        "parseInt",
        "days",
        "mod",
        "days",
        "date1",
        "dtMark",
        "dtMark",
        "weeks",
        "dtMark",
        "days",
        "aDay",
        "adj",
        "aDay",
        "adj",
        "bDay",
        "adj",
        "bDay",
        "adj",
        "dayMark",
        "mod",
        "adj",
        "days",
        "aDay",
        "adj",
        "aDay",
        "adj",
        "bDay",
        "adj",
        "bDay",
        "adj",
        "dayMark",
        "mod",
        "adj",
        "days",
        "adj",
        "days",
        "weeks",
        "delta",
        "days",
        "delta",
        "yearDiff",
        "delta",
        "date2",
        "date1",
        "yearDiff",
        "delta",
        "parseInt",
        "date",
        "date1",
        "date2",
        "delta",
        "delta",
        "delta",
        "delta",
        "delta",
        "date2",
        "date1",
        "delta",
        "lang",
        "lang",
        "date",
        "date",
        "define",
        "array",
        "domClass",
        "domGeometry",
        "domStyle",
        "lang",
        "query",
        "has",
        "registry",
        "Viewport",
        "layoutUtils",
        "parent",
        "parent",
        "arguments",
        "Viewport",
        "lang",
        "query",
        "node",
        "registry",
        "node",
        "widget",
        "widget",
        "candidateWidgets",
        "widget",
        "node",
        "otherVisibleNodes",
        "candidateWidgets",
        "otherVisibleNodes",
        "candidateWidgets",
        "domClass",
        "changeSize",
        "resultSize",
        "changeSize",
        "resultSize",
        "changeSize",
        "resultSize",
        "changeSize",
        "resultSize",
        "changeSize",
        "resultSize",
        "changeSize",
        "resultSize",
        "changeSize",
        "domGeometry",
        "changeSize",
        "cn",
        "resultSize",
        "lang",
        "mb",
        "changeSize",
        "mb",
        "mb",
        "mb",
        "lang",
        "domGeometry",
        "cn",
        "mb",
        "layoutUtils",
        "cn",
        "mb",
        "domGeometry",
        "cn",
        "domGeometry",
        "cb",
        "cb",
        "array",
        "widget",
        "widget",
        "widget",
        "node",
        "node",
        "domClass",
        "node",
        "parent",
        "parent",
        "parent",
        "arguments",
        "define",
        "i18n",
        "MappedTextBox",
        "MappedTextBox",
        "primitive",
        "constraints",
        "constraints",
        "primitive",
        "constraints",
        "constraints",
        "primitive",
        "constraints",
        "val",
        "outOfRange",
        "val",
        "min",
        "min",
        "val",
        "min",
        "outOfRange",
        "outOfRange",
        "val",
        "max",
        "max",
        "max",
        "outOfRange",
        "arguments",
        "isFocused",
        "arguments",
        "isFocused",
        "isFocused",
        "v",
        "v",
        "v",
        "isNaN",
        "v",
        "isFocused",
        "arguments",
        "arguments",
        "i18n",
        "RangeBoundTextBox",
        "define",
        "array",
        "config",
        "Deferred",
        "dom",
        "domAttr",
        "domClass",
        "domConstruct",
        "domGeometry",
        "domStyle",
        "kernel",
        "keys",
        "lang",
        "on",
        "query",
        "ready",
        "has",
        "topic",
        "unload",
        "_Url",
        "win",
        "_Widget",
        "_CssStateMixin",
        "selectionapi",
        "rangeapi",
        "htmlapi",
        "focus",
        "dijit",
        "_Widget",
        "_CssStateMixin",
        "lang",
        "Deferred",
        "lang",
        "lang",
        "has",
        "has",
        "has",
        "has",
        "lang",
        "lang",
        "arguments",
        "topic",
        "dijit",
        "lang",
        "cmd",
        "arg",
        "cmd",
        "arg",
        "exec",
        "exec",
        "exec",
        "exec",
        "exec",
        "exec",
        "exec",
        "exec",
        "exec",
        "has",
        "ctrlKeyHandlers",
        "exec",
        "key",
        "ctrlKeyHandlers",
        "key",
        "ctrlKeyHandlers",
        "key",
        "RichText",
        "RichText",
        "RichText",
        "RichText",
        "RichText",
        "RichText",
        "RichText",
        "RichText",
        "format",
        "formats",
        "i",
        "format",
        "localhtml",
        "format",
        "format",
        "localhtml",
        "format",
        "format",
        "domConstruct",
        "style",
        "localhtml",
        "div",
        "lang",
        "div",
        "node",
        "node",
        "node",
        "nativename",
        "nativename",
        "nativename",
        "node",
        "node",
        "e",
        "domConstruct",
        "div",
        "inject",
        "element",
        "Deferred",
        "topic",
        "dijit",
        "arguments",
        "element",
        "element",
        "lang",
        "html",
        "dn",
        "dn",
        "dn",
        "dn",
        "ta",
        "html",
        "ta",
        "dn",
        "dn",
        "ta",
        "dn",
        "ta",
        "dn",
        "ta",
        "domConstruct",
        "dn",
        "ta",
        "lang",
        "domStyle",
        "ta",
        "has",
        "ta",
        "s",
        "s",
        "has",
        "tmpFunc",
        "tmpFunc",
        "ta",
        "ta",
        "current",
        "resetValue",
        "resetValue",
        "on",
        "ta",
        "lang",
        "domAttr",
        "ta",
        "ta",
        "html",
        "htmlapi",
        "dn",
        "dn",
        "html",
        "dn",
        "dn",
        "dn",
        "dn",
        "dn",
        "dn",
        "dn",
        "dn",
        "dn",
        "config",
        "config",
        "dom",
        "dijit",
        "saveTextarea",
        "saveTextarea",
        "saveTextarea",
        "dat",
        "datas",
        "i",
        "dat",
        "data",
        "html",
        "data",
        "datas",
        "datas",
        "i",
        "saveTextarea",
        "datas",
        "RichText",
        "RichText",
        "unload",
        "id",
        "RichText",
        "RichText",
        "id",
        "lang",
        "f",
        "f",
        "RichText",
        "lang",
        "ifr",
        "ifr",
        "ifr",
        "ifr",
        "has",
        "ifr",
        "ifr",
        "ifr",
        "ifr",
        "ifr",
        "lang",
        "w",
        "w",
        "w",
        "has",
        "html",
        "has",
        "s",
        "src",
        "s",
        "src",
        "has",
        "ifr",
        "ifr",
        "s",
        "ifr",
        "s",
        "ifr",
        "has",
        "src",
        "ifr",
        "src",
        "src",
        "ifr",
        "s",
        "dn",
        "dn",
        "domClass",
        "domStyle",
        "_cs",
        "_cs",
        "_cs",
        "_cs",
        "lineHeight",
        "lineHeight",
        "parseFloat",
        "lineHeight",
        "parseFloat",
        "_cs",
        "lineHeight",
        "lineHeight",
        "parseFloat",
        "lineHeight",
        "lineHeight",
        "match",
        "match",
        "match",
        "match",
        "s",
        "s",
        "lang",
        "s",
        "s",
        "s",
        "i",
        "i",
        "s",
        "i",
        "s",
        "i",
        "c",
        "i",
        "c",
        "s",
        "i",
        "sC",
        "c",
        "domStyle",
        "sC",
        "userStyle",
        "match",
        "query",
        "label",
        "title",
        "label",
        "title",
        "title",
        "dom",
        "title",
        "title",
        "title",
        "font",
        "has",
        "lineHeight",
        "has",
        "has",
        "userStyle",
        "html",
        "files",
        "files",
        "files",
        "url",
        "files",
        "i",
        "_Url",
        "win",
        "url",
        "abstring",
        "text",
        "abstring",
        "text",
        "uri",
        "uri",
        "url",
        "url",
        "uri",
        "url",
        "_Url",
        "win",
        "url",
        "array",
        "url",
        "url",
        "lang",
        "url",
        "stylesheet",
        "stylesheet",
        "stylesheet",
        "url",
        "head",
        "stylesheet",
        "uri",
        "uri",
        "url",
        "url",
        "uri",
        "url",
        "_Url",
        "win",
        "url",
        "array",
        "url",
        "index",
        "index",
        "query",
        "url",
        "value",
        "value",
        "value",
        "value",
        "has",
        "preventIEfocus",
        "value",
        "value",
        "preventIEfocus",
        "has",
        "value",
        "n",
        "ps",
        "ps",
        "n",
        "n",
        "ps",
        "n",
        "e2",
        "html",
        "focus",
        "domConstruct",
        "domConstruct",
        "_this",
        "array",
        "events",
        "item",
        "ap",
        "item",
        "item",
        "on",
        "ap",
        "lang",
        "has",
        "has",
        "e",
        "e",
        "t",
        "t",
        "t",
        "has",
        "e",
        "lang",
        "html",
        "ready",
        "lang",
        "setContent",
        "setContent",
        "e",
        "e",
        "keys",
        "e",
        "e",
        "e",
        "e",
        "keys",
        "e",
        "e",
        "e",
        "has",
        "e",
        "keys",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "has",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "disabled",
        "kernel",
        "disabled",
        "value",
        "value",
        "disabled",
        "domAttr",
        "disabled",
        "lang",
        "domAttr",
        "disabled",
        "disabled",
        "e",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "keys",
        "e",
        "e",
        "e",
        "e",
        "e",
        "c",
        "handlers",
        "e",
        "array",
        "handlers",
        "h",
        "h",
        "e",
        "h",
        "e",
        "e",
        "h",
        "args",
        "e",
        "lang",
        "key",
        "ctrl",
        "shift",
        "handler",
        "lang",
        "key",
        "key",
        "key",
        "shift",
        "ctrl",
        "handler",
        "e",
        "e",
        "e",
        "has",
        "has",
        "focus",
        "arguments",
        "newValue",
        "newValue",
        "newValue",
        "e",
        "arguments",
        "has",
        "has",
        "cmd",
        "argument",
        "cmd",
        "command",
        "has",
        "argument",
        "command",
        "command",
        "has",
        "command",
        "command",
        "command",
        "command",
        "ca",
        "ca",
        "command",
        "command",
        "command",
        "browsers",
        "browsers",
        "ie",
        "browsers",
        "mozilla",
        "browsers",
        "webkit",
        "browsers",
        "opera",
        "command",
        "supportedBy",
        "isSupportedBy",
        "mozilla",
        "ie",
        "webkit",
        "opera",
        "supportedBy",
        "isSupportedBy",
        "mozilla",
        "ie",
        "opera",
        "webkit",
        "supportedBy",
        "isSupportedBy",
        "ie",
        "supportedBy",
        "isSupportedBy",
        "ie",
        "mozilla",
        "webkit",
        "opera",
        "supportedBy",
        "isSupportedBy",
        "mozilla",
        "ie",
        "supportedBy",
        "isSupportedBy",
        "ie",
        "mozilla",
        "has",
        "has",
        "supportedBy",
        "has",
        "supportedBy",
        "has",
        "supportedBy",
        "has",
        "supportedBy",
        "command",
        "argument",
        "command",
        "command",
        "argument",
        "argument",
        "command",
        "command",
        "has",
        "has",
        "argument",
        "argument",
        "command",
        "implFunc",
        "returnValue",
        "implFunc",
        "argument",
        "argument",
        "arguments",
        "argument",
        "argument",
        "command",
        "returnValue",
        "command",
        "argument",
        "returnValue",
        "command",
        "command",
        "command",
        "command",
        "implFunc",
        "implFunc",
        "command",
        "command",
        "command",
        "command",
        "command",
        "command",
        "e",
        "command",
        "command",
        "command",
        "has",
        "has",
        "command",
        "r",
        "command",
        "has",
        "command",
        "oldValue",
        "e",
        "oldValue",
        "r",
        "command",
        "oldValue",
        "r",
        "command",
        "r",
        "name",
        "args",
        "win",
        "name",
        "selectionapi",
        "args",
        "has",
        "first",
        "first",
        "first",
        "isvalid",
        "first",
        "first",
        "isvalid",
        "first",
        "first",
        "tg",
        "first",
        "first",
        "first",
        "first",
        "isvalid",
        "isvalid",
        "has",
        "last",
        "last",
        "last",
        "isvalid",
        "last",
        "last",
        "isvalid",
        "last",
        "last",
        "last",
        "last",
        "isvalid",
        "isvalid",
        "nonDestructive",
        "nonDestructive",
        "html",
        "lang",
        "html",
        "html",
        "html",
        "html",
        "html",
        "has",
        "html",
        "node",
        "html",
        "node",
        "html",
        "html",
        "has",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "array",
        "ef",
        "ef",
        "ec",
        "ef",
        "ec",
        "ec",
        "dom",
        "dom",
        "dom",
        "array",
        "ef",
        "ef",
        "lang",
        "ef",
        "ef",
        "dom",
        "dom",
        "nonDestructive",
        "lang",
        "dom",
        "dom",
        "dom",
        "nonDestructive",
        "dom",
        "lang",
        "dom",
        "array",
        "ef",
        "dom",
        "ef",
        "dom",
        "ec",
        "htmlapi",
        "dom",
        "ec",
        "dom",
        "lang",
        "ec",
        "ec",
        "array",
        "ef",
        "ec",
        "ef",
        "ec",
        "ec",
        "dom",
        "dijit",
        "saveTextarea",
        "saveTextarea",
        "saveTextarea",
        "saveTextarea",
        "noSingleQuotes",
        "noSingleQuotes",
        "node",
        "kernel",
        "htmlapi",
        "node",
        "dom",
        "kernel",
        "htmlapi",
        "dom",
        "save",
        "arguments",
        "save",
        "save",
        "clearInterval",
        "has",
        "s",
        "s",
        "s",
        "has",
        "s",
        "domConstruct",
        "domClass",
        "arguments",
        "RichText",
        "RichText",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "html",
        "command",
        "command",
        "has",
        "elem",
        "command",
        "e",
        "has",
        "sel",
        "enabled",
        "enabled",
        "enabled",
        "enabled",
        "has",
        "has",
        "enabled",
        "enabled",
        "enabled",
        "has",
        "has",
        "enabled",
        "enabled",
        "enabled",
        "has",
        "sel",
        "sel",
        "sel",
        "enabled",
        "sel",
        "enabled",
        "enabled",
        "has",
        "sel",
        "sel",
        "sel",
        "enabled",
        "sel",
        "enabled",
        "enabled",
        "has",
        "enabled",
        "enabled",
        "argument",
        "has",
        "argument",
        "argument",
        "has",
        "has",
        "a",
        "argument",
        "argument",
        "argument",
        "isApplied",
        "has",
        "returnValue",
        "argument",
        "returnValue",
        "argument",
        "returnValue",
        "argument",
        "has",
        "argument",
        "argument",
        "argument",
        "argument",
        "isApplied",
        "isApplied",
        "argument",
        "isApplied",
        "argument",
        "has",
        "argument",
        "argument",
        "argument",
        "isApplied",
        "argument",
        "isApplied",
        "isApplied",
        "argument",
        "isApplied",
        "argument",
        "argument",
        "argument",
        "has",
        "insertRange",
        "insertRange",
        "insertRange",
        "insertRange",
        "n",
        "argument",
        "insertRange",
        "argument",
        "insertRange",
        "has",
        "rangeapi",
        "selection",
        "selection",
        "selection",
        "insertRange",
        "selection",
        "insertRange",
        "domConstruct",
        "div",
        "argument",
        "node",
        "div",
        "lastNode",
        "n",
        "node",
        "insertRange",
        "n",
        "lastNode",
        "insertRange",
        "insertRange",
        "insertRange",
        "lastNode",
        "insertRange",
        "selection",
        "selection",
        "insertRange",
        "has",
        "argument",
        "rv",
        "argument",
        "rv",
        "argument",
        "has",
        "has",
        "applied",
        "applied",
        "applied",
        "argument",
        "applied",
        "argument",
        "has",
        "has",
        "applied",
        "applied",
        "applied",
        "argument",
        "applied",
        "argument",
        "has",
        "has",
        "applied",
        "applied",
        "applied",
        "argument",
        "applied",
        "argument",
        "has",
        "has",
        "applied",
        "applied",
        "applied",
        "argument",
        "applied",
        "argument",
        "has",
        "has",
        "applied",
        "applied",
        "applied",
        "argument",
        "applied",
        "argument",
        "has",
        "has",
        "applied",
        "applied",
        "applied",
        "argument",
        "applied",
        "argument",
        "has",
        "has",
        "isApplied",
        "argument",
        "isApplied",
        "isApplied",
        "argument",
        "isApplied",
        "argument",
        "has",
        "has",
        "isApplied",
        "argument",
        "isApplied",
        "isApplied",
        "argument",
        "isApplied",
        "argument",
        "has",
        "has",
        "applied",
        "argument",
        "applied",
        "applied",
        "argument",
        "applied",
        "argument",
        "has",
        "has",
        "applied",
        "argument",
        "applied",
        "applied",
        "argument",
        "applied",
        "node",
        "node",
        "node",
        "i",
        "i",
        "node",
        "i",
        "domGeometry",
        "node",
        "i",
        "h",
        "size",
        "h",
        "node",
        "startOffset",
        "node",
        "node",
        "node",
        "startOffset",
        "node",
        "node",
        "startOffset",
        "node",
        "node",
        "node",
        "node",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "parent",
        "rangeapi",
        "selection",
        "selection",
        "selection",
        "selection",
        "firstNode",
        "startOffset",
        "firstNode",
        "firstNode",
        "startOffset",
        "startOffset",
        "firstNode",
        "firstNode",
        "firstNode",
        "firstNode",
        "startOffset",
        "firstNode",
        "lastNode",
        "lastNode",
        "firstNode",
        "firstNode",
        "firstNode",
        "startOffset",
        "selection",
        "selection",
        "command",
        "rangeapi",
        "command",
        "selection",
        "selection",
        "command",
        "isApplied",
        "command",
        "selection",
        "fs",
        "fs",
        "offset",
        "ret",
        "rs",
        "offset",
        "fs",
        "ret",
        "offset",
        "ret",
        "fs",
        "fs",
        "fs",
        "fs",
        "array",
        "nNames",
        "tName",
        "topNode",
        "fs",
        "fs",
        "fs",
        "topNode",
        "rs",
        "doc",
        "topNode",
        "domConstruct",
        "newblock",
        "topNode",
        "rs",
        "rs",
        "rs",
        "endOffset",
        "ret",
        "rs",
        "endOffset",
        "rs",
        "ret",
        "endOffset",
        "ret",
        "txt",
        "rs",
        "startNode",
        "doc",
        "txt",
        "endOffset",
        "txt",
        "endOffset",
        "txt",
        "endText",
        "endNode",
        "doc",
        "endText",
        "domConstruct",
        "startNode",
        "rs",
        "endNode",
        "breaker",
        "doc",
        "breaker",
        "domConstruct",
        "breaker",
        "rs",
        "domConstruct",
        "endNode",
        "breaker",
        "endNode",
        "breaker",
        "domConstruct",
        "rs",
        "startNode",
        "parentC",
        "topNode",
        "parentC",
        "tagData",
        "tg",
        "tagList",
        "tagData",
        "doc",
        "tg",
        "parentC",
        "newTg",
        "parentC",
        "newTg",
        "parentC",
        "tagData",
        "parentC",
        "parentC",
        "parentC",
        "newTg",
        "parentC",
        "tagData",
        "parentC",
        "parentC",
        "newTg",
        "parentC",
        "tagData",
        "parentC",
        "parentC",
        "newTg",
        "parentC",
        "tagData",
        "parentC",
        "parentC",
        "newTg",
        "parentC",
        "tagData",
        "parentC",
        "endNode",
        "nodeToMove",
        "endNode",
        "nodeToMove",
        "tNode",
        "nodeToMove",
        "newTg",
        "nodeToMove",
        "nodeToMove",
        "tNode",
        "newTg",
        "parentC",
        "breaker",
        "doc",
        "breaker",
        "domConstruct",
        "breaker",
        "parentC",
        "domConstruct",
        "newTg",
        "breaker",
        "domConstruct",
        "newTg",
        "parentC",
        "startNode",
        "parentC",
        "endNode",
        "newTg",
        "parentC",
        "parentC",
        "endNode",
        "nodeToMove",
        "endNode",
        "nodeToMove",
        "nodeToMove",
        "nodeToMove",
        "newblock",
        "nodeToMove",
        "tNode",
        "nodeToMove",
        "newblock",
        "nodeToMove",
        "nodeToMove",
        "tNode",
        "tagList",
        "tagData",
        "tagList",
        "doc",
        "tagData",
        "tagData",
        "newContTag",
        "newContTag",
        "tagData",
        "tagData",
        "newContTag",
        "tagData",
        "tagData",
        "tagData",
        "newContTag",
        "tagData",
        "tagData",
        "newContTag",
        "tagData",
        "tagData",
        "newContTag",
        "tagData",
        "domConstruct",
        "newContTag",
        "newblock",
        "tagList",
        "tagData",
        "tagList",
        "doc",
        "tagData",
        "tagData",
        "newTgNode",
        "newTgNode",
        "tagData",
        "tagData",
        "newTgNode",
        "tagData",
        "tagData",
        "tagData",
        "newTgNode",
        "tagData",
        "tagData",
        "newTgNode",
        "tagData",
        "tagData",
        "newTgNode",
        "tagData",
        "newContTag",
        "newTgNode",
        "newContTag",
        "newTgNode",
        "sNode",
        "doc",
        "breaker",
        "sNode",
        "newContTag",
        "sNode",
        "newrange",
        "rangeapi",
        "newrange",
        "sNode",
        "newrange",
        "sNode",
        "sNode",
        "selection",
        "selection",
        "newrange",
        "sNode",
        "breaker",
        "doc",
        "breaker",
        "sNode",
        "doc",
        "breaker",
        "sNode",
        "domConstruct",
        "breaker",
        "newblock",
        "newrange",
        "rangeapi",
        "newrange",
        "sNode",
        "newrange",
        "sNode",
        "sNode",
        "selection",
        "selection",
        "newrange",
        "sNode",
        "newblock",
        "domConstruct",
        "newblock",
        "selection",
        "rs",
        "rs",
        "rs",
        "rs",
        "offset",
        "ret",
        "rs",
        "offset",
        "rs",
        "ret",
        "offset",
        "ret",
        "txt",
        "rs",
        "startNode",
        "doc",
        "txt",
        "offset",
        "txt",
        "offset",
        "endText",
        "endNode",
        "doc",
        "txt",
        "offset",
        "breaker",
        "doc",
        "sNode",
        "doc",
        "breaker",
        "sNode",
        "startNode",
        "domConstruct",
        "startNode",
        "rs",
        "startNode",
        "rs",
        "domConstruct",
        "breaker",
        "startNode",
        "endNode",
        "domConstruct",
        "endNode",
        "breaker",
        "domConstruct",
        "rs",
        "rangeapi",
        "newrange",
        "sNode",
        "newrange",
        "sNode",
        "sNode",
        "selection",
        "selection",
        "newrange",
        "doc",
        "command",
        "domConstruct",
        "breaker",
        "breaker",
        "domConstruct",
        "breaker",
        "newrange",
        "sNode",
        "newrange",
        "sNode",
        "sNode",
        "selection",
        "selection",
        "newrange",
        "sNode",
        "command",
        "rangeapi",
        "selection",
        "selection",
        "command",
        "selection",
        "sc",
        "sc",
        "command",
        "lType",
        "lType",
        "domConstruct",
        "domConstruct",
        "sc",
        "li",
        "sc",
        "domConstruct",
        "rangeapi",
        "newrange",
        "sc",
        "newrange",
        "sc",
        "sc",
        "selection",
        "selection",
        "newrange",
        "command",
        "argument",
        "rangeapi",
        "argument",
        "argument",
        "command",
        "selection",
        "selection",
        "selection",
        "selection",
        "rs",
        "rs",
        "rs",
        "rs",
        "offset",
        "ret",
        "rs",
        "offset",
        "rs",
        "ret",
        "offset",
        "ret",
        "txt",
        "rs",
        "startNode",
        "doc",
        "txt",
        "offset",
        "txt",
        "offset",
        "endText",
        "endNode",
        "doc",
        "txt",
        "offset",
        "breaker",
        "doc",
        "sNode",
        "doc",
        "breaker",
        "sNode",
        "doc",
        "breaker",
        "extraSpan",
        "startNode",
        "domConstruct",
        "startNode",
        "rs",
        "startNode",
        "rs",
        "domConstruct",
        "breaker",
        "startNode",
        "endNode",
        "domConstruct",
        "endNode",
        "breaker",
        "domConstruct",
        "rs",
        "rangeapi",
        "newrange",
        "sNode",
        "newrange",
        "sNode",
        "sNode",
        "selection",
        "selection",
        "newrange",
        "has",
        "command",
        "command",
        "style",
        "domStyle",
        "breaker",
        "style",
        "argument",
        "domConstruct",
        "extraSpan",
        "breaker",
        "breaker",
        "command",
        "argument",
        "domConstruct",
        "breaker",
        "breaker",
        "domConstruct",
        "breaker",
        "newrange",
        "sNode",
        "newrange",
        "sNode",
        "sNode",
        "selection",
        "selection",
        "newrange",
        "sNode",
        "sNode",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "node",
        "offset",
        "offset",
        "node",
        "node",
        "node",
        "node",
        "offset",
        "command",
        "command",
        "command",
        "command",
        "command",
        "command",
        "command",
        "node",
        "query",
        "node",
        "b",
        "b",
        "domConstruct",
        "b",
        "b",
        "domConstruct",
        "b",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "isEmpty",
        "node",
        "domConstruct",
        "node",
        "node",
        "RichText",
        "define",
        "array",
        "lang",
        "dom",
        "domClass",
        "Evented",
        "on",
        "topic",
        "touch",
        "dnd",
        "Mover",
        "win",
        "Evented",
        "node",
        "dom",
        "node",
        "dom",
        "Mover",
        "on",
        "touch",
        "lang",
        "on",
        "lang",
        "on",
        "lang",
        "node",
        "Ctor",
        "Ctor",
        "node",
        "array",
        "handle",
        "handle",
        "e",
        "dnd",
        "e",
        "on",
        "touch",
        "lang",
        "on",
        "touch",
        "lang",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "i",
        "i",
        "e",
        "e",
        "dnd",
        "e",
        "e",
        "e",
        "e",
        "mover",
        "topic",
        "mover",
        "domClass",
        "win",
        "domClass",
        "mover",
        "topic",
        "mover",
        "domClass",
        "win",
        "domClass",
        "mover",
        "leftTop",
        "mover",
        "leftTop",
        "mover",
        "s",
        "leftTop",
        "s",
        "leftTop",
        "mover",
        "leftTop",
        "Moveable",
        "define",
        "domClass",
        "keys",
        "lang",
        "focus",
        "ContentPane",
        "_DialogMixin",
        "_FormMixin",
        "_TemplatedMixin",
        "template",
        "dijit",
        "ContentPane",
        "_TemplatedMixin",
        "_FormMixin",
        "_DialogMixin",
        "template",
        "title",
        "title",
        "title",
        "arguments",
        "node",
        "aroundCorner",
        "tooltipCorner",
        "aroundCorner",
        "tooltipCorner",
        "domClass",
        "newC",
        "newC",
        "focus",
        "pos",
        "pos",
        "pos",
        "pos",
        "pos",
        "pos",
        "aroundNodeCoords",
        "aroundNodeCoords",
        "pos",
        "pos",
        "pos",
        "aroundNodeCoords",
        "aroundNodeCoords",
        "pos",
        "evt",
        "evt",
        "evt",
        "keys",
        "evt",
        "keys",
        "evt",
        "node",
        "evt",
        "evt",
        "keys",
        "singleFocusItem",
        "focus",
        "evt",
        "node",
        "evt",
        "keys",
        "evt",
        "singleFocusItem",
        "focus",
        "evt",
        "evt",
        "keys",
        "evt",
        "define",
        "arrayUtil",
        "query",
        "options",
        "query",
        "query",
        "query",
        "key",
        "queryObject",
        "queryObject",
        "key",
        "required",
        "required",
        "required",
        "key",
        "required",
        "key",
        "query",
        "query",
        "query",
        "query",
        "array",
        "arrayUtil",
        "array",
        "query",
        "options",
        "options",
        "sortSet",
        "results",
        "sortSet",
        "sortSet",
        "a",
        "b",
        "sort",
        "sortSet",
        "i",
        "i",
        "a",
        "sort",
        "b",
        "sort",
        "aValue",
        "aValue",
        "aValue",
        "aValue",
        "bValue",
        "bValue",
        "bValue",
        "bValue",
        "aValue",
        "bValue",
        "sort",
        "aValue",
        "aValue",
        "bValue",
        "options",
        "options",
        "options",
        "results",
        "results",
        "results",
        "options",
        "options",
        "options",
        "Infinity",
        "results",
        "total",
        "results",
        "execute",
        "query",
        "execute",
        "define",
        "domConstruct",
        "has",
        "lang",
        "on",
        "win",
        "Viewport",
        "has",
        "win",
        "domConstruct",
        "body",
        "te",
        "te",
        "body",
        "te",
        "needsHelpShrinking",
        "arguments",
        "arguments",
        "textarea",
        "on",
        "textarea",
        "lang",
        "arguments",
        "Viewport",
        "lang",
        "e",
        "arguments",
        "textarea",
        "textarea",
        "textarea",
        "textarea",
        "empty",
        "textarea",
        "empty",
        "textarea",
        "sh",
        "textarea",
        "textarea",
        "textareaScrollHeight",
        "textarea",
        "textareaScrollHeight",
        "textarea",
        "textarea",
        "newH",
        "newHpx",
        "textarea",
        "textarea",
        "newHpx",
        "textarea",
        "has",
        "textareaScrollHeight",
        "textarea",
        "textarea",
        "textarea",
        "newHpx",
        "textarea",
        "newH",
        "textarea",
        "newH",
        "decrement",
        "thisScrollHeight",
        "textareaScrollHeight",
        "newScrollHeight",
        "thisScrollHeight",
        "newH",
        "change",
        "change",
        "decrement",
        "newScrollHeight",
        "thisScrollHeight",
        "decrement",
        "textarea",
        "newH",
        "textarea",
        "origMinHeight",
        "textarea",
        "origScrollTop",
        "textarea",
        "textareaScrollHeight",
        "textarea",
        "textarea",
        "textarea",
        "define",
        "dom",
        "domAttr",
        "domClass",
        "kernel",
        "has",
        "_Widget",
        "_TemplatedMixin",
        "_Contained",
        "_CssStateMixin",
        "template",
        "_Widget",
        "_TemplatedMixin",
        "_Contained",
        "_CssStateMixin",
        "template",
        "val",
        "val",
        "val",
        "source",
        "source",
        "source",
        "arguments",
        "domAttr",
        "label",
        "domAttr",
        "label",
        "label",
        "dom",
        "has",
        "e",
        "arguments",
        "selected",
        "domClass",
        "selected",
        "content",
        "kernel",
        "content",
        "disabled",
        "kernel",
        "disabled",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "domAttr",
        "value",
        "value",
        "textDir",
        "textDir",
        "textDir",
        "define",
        "MenuItem",
        "template",
        "template",
        "MenuItem",
        "_MenuBarItemMixin",
        "MenuBarItem",
        "_MenuBarItemMixin",
        "MenuBarItem",
        "define",
        "dom",
        "domAttr",
        "domClass",
        "i18n",
        "lang",
        "StackController",
        "registry",
        "Menu",
        "MenuItem",
        "template",
        "StackController",
        "template",
        "arguments",
        "dom",
        "arguments",
        "n",
        "n",
        "disp",
        "disp",
        "domClass",
        "disp",
        "disp",
        "disp",
        "i18n",
        "domAttr",
        "_nlsResources",
        "disabled",
        "arguments",
        "disabled",
        "domAttr",
        "i18n",
        "domAttr",
        "_nlsResources",
        "content",
        "arguments",
        "lang",
        "StackController",
        "TabButton",
        "arguments",
        "Menu",
        "node",
        "domClass",
        "node",
        "domClass",
        "node",
        "closeMenu",
        "i18n",
        "closeMenu",
        "MenuItem",
        "_nlsResources",
        "evt",
        "registry",
        "controller",
        "button",
        "TabController",
        "TabButton",
        "TabController",
        "define",
        "lang",
        "i18n",
        "lang",
        "supplemental",
        "supplemental",
        "locale",
        "supplemental",
        "locale",
        "firstDay",
        "country",
        "dow",
        "dow",
        "supplemental",
        "locale",
        "locale",
        "i18n",
        "locale",
        "locale",
        "tags",
        "region",
        "region",
        "tags",
        "region",
        "region",
        "tags",
        "region",
        "supplemental",
        "locale",
        "supplemental",
        "locale",
        "weekendStart",
        "country",
        "weekendEnd",
        "country",
        "start",
        "start",
        "end",
        "end",
        "start",
        "end",
        "supplemental",
        "require",
        "define",
        "keys",
        "_MenuBase",
        "template",
        "_MenuBase",
        "template",
        "arguments",
        "l",
        "keys",
        "keys",
        "l",
        "keys",
        "keys",
        "evt",
        "evt",
        "item",
        "prev_item",
        "prev_item",
        "prev_item",
        "arguments",
        "showpopup",
        "item",
        "item",
        "evt",
        "evt",
        "evt",
        "evt",
        "keys",
        "evt",
        "evt",
        "item",
        "evt",
        "item",
        "item",
        "evt",
        "evt",
        "keys",
        "item",
        "arguments",
        "define",
        "dom",
        "_Widget",
        "_TemplatedMixin",
        "_Widget",
        "_TemplatedMixin",
        "arguments",
        "dom",
        "define",
        "array",
        "domClass",
        "keys",
        "lang",
        "on",
        "focus",
        "registry",
        "_Widget",
        "_TemplatedMixin",
        "_Container",
        "ToggleButton",
        "ToggleButton",
        "evt",
        "arguments",
        "_Widget",
        "_TemplatedMixin",
        "_Container",
        "StackButton",
        "arguments",
        "evt",
        "registry",
        "evt",
        "button",
        "button",
        "button",
        "evt",
        "target",
        "target",
        "target",
        "domClass",
        "target",
        "button",
        "target",
        "button",
        "button",
        "info",
        "array",
        "info",
        "info",
        "info",
        "registry",
        "attr",
        "buttonAttr",
        "on",
        "containerNode",
        "attr",
        "evt",
        "pane2button",
        "evt",
        "evt",
        "evt",
        "button",
        "button",
        "buttonAttr",
        "evt",
        "attr",
        "paneToButtonAttr",
        "connectFunc",
        "attr",
        "paneToButtonAttr",
        "attr",
        "pane",
        "registry",
        "pane",
        "arguments",
        "page",
        "insertIndex",
        "lang",
        "lang",
        "Cls",
        "page",
        "page",
        "page",
        "page",
        "page",
        "page",
        "page",
        "page",
        "page",
        "page",
        "page",
        "page",
        "button",
        "insertIndex",
        "page",
        "button",
        "page",
        "button",
        "page",
        "page",
        "page",
        "page",
        "button",
        "button",
        "page",
        "button",
        "page",
        "page",
        "page",
        "oldButton",
        "oldButton",
        "page",
        "newButton",
        "page",
        "newButton",
        "registry",
        "page",
        "page",
        "focus",
        "button",
        "page",
        "button",
        "registry",
        "container",
        "page",
        "page",
        "registry",
        "container",
        "page",
        "b",
        "focus",
        "b",
        "b",
        "forward",
        "forward",
        "forward",
        "array",
        "children",
        "children",
        "idx",
        "idx",
        "idx",
        "forward",
        "children",
        "children",
        "child",
        "children",
        "idx",
        "child",
        "child",
        "current",
        "child",
        "e",
        "e",
        "e",
        "e",
        "e",
        "keys",
        "keys",
        "e",
        "forward",
        "keys",
        "e",
        "forward",
        "keys",
        "keys",
        "e",
        "forward",
        "keys",
        "e",
        "forward",
        "keys",
        "idx",
        "children",
        "idx",
        "children",
        "idx",
        "child",
        "child",
        "e",
        "keys",
        "children",
        "idx",
        "idx",
        "children",
        "idx",
        "child",
        "child",
        "e",
        "keys",
        "e",
        "e",
        "e",
        "keys",
        "e",
        "e",
        "e",
        "e",
        "forward",
        "forward",
        "e",
        "info",
        "info",
        "info",
        "info",
        "StackController",
        "StackButton",
        "StackController",
        "define",
        "array",
        "lang",
        "has",
        "win",
        "dom",
        "domGeom",
        "domStyle",
        "Evented",
        "on",
        "touch",
        "dnd",
        "autoscroll",
        "Evented",
        "node",
        "e",
        "host",
        "dom",
        "node",
        "e",
        "e",
        "e",
        "host",
        "node",
        "on",
        "d",
        "touch",
        "lang",
        "on",
        "d",
        "touch",
        "lang",
        "on",
        "d",
        "touch",
        "lang",
        "on",
        "d",
        "on",
        "d",
        "autoscroll",
        "d",
        "h",
        "h",
        "h",
        "e",
        "autoscroll",
        "e",
        "m",
        "e",
        "m",
        "e",
        "e",
        "e",
        "e",
        "has",
        "has",
        "e",
        "e",
        "e",
        "e",
        "s",
        "l",
        "parseFloat",
        "s",
        "t",
        "parseFloat",
        "s",
        "s",
        "domGeom",
        "win",
        "domStyle",
        "b",
        "domGeom",
        "b",
        "bs",
        "domGeom",
        "b",
        "bs",
        "l",
        "m",
        "bc",
        "bm",
        "t",
        "m",
        "bc",
        "bm",
        "l",
        "t",
        "h",
        "h",
        "h",
        "e",
        "array",
        "handle",
        "handle",
        "h",
        "h",
        "h",
        "define",
        "_Widget",
        "_TemplatedMixin",
        "_Widget",
        "_TemplatedMixin",
        "pos",
        "pos",
        "arguments",
        "innerHTML",
        "innerHTML",
        "i",
        "i",
        "i",
        "innerHTML",
        "interval",
        "i",
        "i",
        "innerHTML",
        "innerHTML",
        "i",
        "i",
        "i",
        "innerHTML",
        "interval",
        "i",
        "i",
        "innerHTML",
        "innerHTML",
        "define",
        "lang",
        "_TabContainerBase",
        "TabController",
        "ScrollingTabController",
        "_TabContainerBase",
        "srcNode",
        "lang",
        "TabController",
        "cls",
        "srcNode",
        "arguments",
        "ScrollingTabController",
        "TabController",
        "define",
        "keys",
        "lang",
        "has",
        "mouse",
        "typematic",
        "RangeBoundTextBox",
        "template",
        "_TextBoxMixin",
        "RangeBoundTextBox",
        "template",
        "val",
        "val",
        "nodePressed",
        "direction",
        "increment",
        "direction",
        "increment",
        "_TextBoxMixin",
        "count",
        "node",
        "evt",
        "node",
        "evt",
        "inc",
        "key",
        "keys",
        "key",
        "keys",
        "node",
        "key",
        "keys",
        "key",
        "keys",
        "count",
        "node",
        "node",
        "node",
        "inc",
        "evt",
        "evt",
        "evt",
        "wheelDelta",
        "wheelDelta",
        "wheelDelta",
        "evt",
        "evt",
        "evt",
        "wheelDelta",
        "scrollAmount",
        "scrollAmount",
        "node",
        "scrollAmount",
        "node",
        "constraints",
        "arguments",
        "value",
        "priorityChange",
        "value",
        "arguments",
        "arguments",
        "mouse",
        "typematic",
        "keys",
        "typematic",
        "keys",
        "typematic",
        "keys",
        "typematic",
        "keys",
        "define",
        "require",
        "domClass",
        "has",
        "kernel",
        "lang",
        "ready",
        "_FormWidget",
        "_ButtonMixin",
        "template",
        "has",
        "ready",
        "require",
        "requires",
        "_FormWidget",
        "_ButtonMixin",
        "template",
        "e",
        "arguments",
        "ok",
        "e",
        "e",
        "ok",
        "source",
        "source",
        "lang",
        "source",
        "sourceLabel",
        "sourceLabel",
        "val",
        "domClass",
        "val",
        "val",
        "content",
        "kernel",
        "content",
        "content",
        "arguments",
        "lang",
        "define",
        "domGeom",
        "domStyle",
        "dnd",
        "Mover",
        "Moveable",
        "Moveable",
        "node",
        "mover",
        "mover",
        "c",
        "c",
        "c",
        "c",
        "c",
        "c",
        "domGeom",
        "mover",
        "c",
        "mb",
        "c",
        "mb",
        "mover",
        "leftTop",
        "mover",
        "mover",
        "leftTop",
        "leftTop",
        "leftTop",
        "c",
        "c",
        "c",
        "leftTop",
        "c",
        "leftTop",
        "leftTop",
        "leftTop",
        "c",
        "c",
        "c",
        "leftTop",
        "c",
        "leftTop",
        "s",
        "leftTop",
        "s",
        "leftTop",
        "mover",
        "leftTop",
        "constrainedMoveable",
        "node",
        "box",
        "constrainedMoveable",
        "node",
        "domStyle",
        "n",
        "domGeom",
        "n",
        "s",
        "area",
        "mb",
        "domGeom",
        "n",
        "s",
        "mb",
        "t",
        "mb",
        "t",
        "mb",
        "t",
        "mb",
        "t",
        "area",
        "mb",
        "t",
        "domGeom",
        "n",
        "s",
        "mb",
        "t",
        "mb",
        "t",
        "mb",
        "t",
        "mb",
        "t",
        "area",
        "mb",
        "t",
        "domGeom",
        "n",
        "s",
        "mb",
        "t",
        "mb",
        "t",
        "mb",
        "t",
        "mb",
        "t",
        "mb",
        "constrainedMoveable",
        "boxConstrainedMoveable",
        "parentConstrainedMoveable",
        "define",
        "template",
        "StackContainer",
        "layoutUtils",
        "_TemplatedMixin",
        "domClass",
        "domGeometry",
        "domStyle",
        "StackContainer",
        "_TemplatedMixin",
        "template",
        "domStyle",
        "arguments",
        "arguments",
        "domClass",
        "domClass",
        "domClass",
        "domClass",
        "domClass",
        "domClass",
        "tab",
        "domClass",
        "tab",
        "arguments",
        "arguments",
        "titleAlign",
        "titleAlign",
        "layoutUtils",
        "children",
        "layoutUtils",
        "children",
        "sc",
        "sc",
        "sc",
        "s",
        "domGeometry",
        "s",
        "width",
        "sc",
        "sc",
        "sc",
        "arguments",
        "define",
        "domAttr",
        "kernel",
        "has",
        "_Widget",
        "_TemplatedMixin",
        "_FormMixin",
        "_ContentPaneResizeMixin",
        "_Widget",
        "_TemplatedMixin",
        "_FormMixin",
        "_ContentPaneResizeMixin",
        "arguments",
        "value",
        "value",
        "domAttr",
        "value",
        "has",
        "value",
        "e",
        "e",
        "e",
        "e",
        "e",
        "faux",
        "faux",
        "arguments",
        "e",
        "e",
        "e",
        "e",
        "fp",
        "fp",
        "kernel",
        "e",
        "e",
        "define",
        "QueryResults",
        "SimpleQueryEngine",
        "options",
        "i",
        "options",
        "i",
        "options",
        "i",
        "SimpleQueryEngine",
        "id",
        "id",
        "options",
        "idProperty",
        "options",
        "options",
        "options",
        "idProperty",
        "idProperty",
        "id",
        "index",
        "options",
        "options",
        "data",
        "index",
        "id",
        "index",
        "id",
        "data",
        "id",
        "options",
        "options",
        "options",
        "options",
        "id",
        "id",
        "index",
        "data",
        "index",
        "id",
        "data",
        "query",
        "options",
        "QueryResults",
        "query",
        "options",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "data",
        "i",
        "l",
        "i",
        "data",
        "i",
        "i",
        "define",
        "require",
        "array",
        "Deferred",
        "i18n",
        "domAttr",
        "domClass",
        "domGeometry",
        "domStyle",
        "keys",
        "lang",
        "has",
        "topic",
        "win",
        "focusBase",
        "_Container",
        "Toolbar",
        "ToolbarSeparator",
        "_LayoutWidget",
        "ToggleButton",
        "_Plugin",
        "EnterKeyHandling",
        "html",
        "rangeapi",
        "RichText",
        "dijit",
        "RichText",
        "lang",
        "EnterKeyHandling",
        "has",
        "has",
        "Deferred",
        "arguments",
        "lang",
        "arguments",
        "i18n",
        "Toolbar",
        "array",
        "domClass",
        "domClass",
        "domAttr",
        "has",
        "domStyle",
        "array",
        "p",
        "p",
        "p",
        "p",
        "arguments",
        "plugin",
        "index",
        "lang",
        "plugin",
        "plugin",
        "lang",
        "plugin",
        "plugin",
        "plugin",
        "args",
        "args",
        "args",
        "_Plugin",
        "args",
        "o",
        "_Plugin",
        "args",
        "args",
        "topic",
        "dijit",
        "o",
        "o",
        "args",
        "lang",
        "args",
        "require",
        "args",
        "pc",
        "o",
        "pc",
        "args",
        "e",
        "args",
        "o",
        "args",
        "plugin",
        "o",
        "arguments",
        "index",
        "plugin",
        "plugin",
        "plugin",
        "lang",
        "plugin",
        "plugin",
        "size",
        "size",
        "_LayoutWidget",
        "arguments",
        "domGeometry",
        "domGeometry",
        "areaHeight",
        "e",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "b",
        "clientWidth",
        "offsetWidth",
        "e",
        "clientWidth",
        "e",
        "offsetWidth",
        "outsideClientArea",
        "e",
        "clientLeft",
        "e",
        "offsetLeft",
        "outsideClientArea",
        "outsideClientArea",
        "clientHeight",
        "offsetHeight",
        "e",
        "clientHeight",
        "e",
        "offsetHeight",
        "outsideClientArea",
        "outsideClientArea",
        "e",
        "arguments",
        "e",
        "e",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "arguments",
        "r",
        "cmd",
        "r",
        "cmd",
        "has",
        "r",
        "e",
        "e",
        "e",
        "has",
        "alert",
        "sub",
        "cmd",
        "sub",
        "has",
        "accel",
        "cmd",
        "r",
        "r",
        "cmd",
        "cmd",
        "cmd",
        "cmd",
        "arguments",
        "b",
        "b",
        "b",
        "b",
        "mark",
        "has",
        "lang",
        "mark",
        "bookmark",
        "array",
        "mark",
        "n",
        "bookmark",
        "rangeapi",
        "n",
        "win",
        "focusBase",
        "bookmark",
        "col",
        "mark",
        "mark",
        "sel",
        "rangeapi",
        "sel",
        "sel",
        "sel",
        "r",
        "rangeapi",
        "sNode",
        "rangeapi",
        "mark",
        "eNode",
        "rangeapi",
        "mark",
        "sNode",
        "eNode",
        "r",
        "sNode",
        "mark",
        "r",
        "eNode",
        "mark",
        "sel",
        "r",
        "sel",
        "rangeapi",
        "sel",
        "sel",
        "sel",
        "r",
        "rangeapi",
        "sNode",
        "rangeapi",
        "mark",
        "eNode",
        "rangeapi",
        "mark",
        "sNode",
        "eNode",
        "r",
        "sNode",
        "mark",
        "r",
        "eNode",
        "mark",
        "sel",
        "r",
        "to",
        "to",
        "to",
        "b",
        "b",
        "s",
        "s",
        "s",
        "ret",
        "ret",
        "s",
        "s",
        "s",
        "ret",
        "ret",
        "ignore_caret",
        "ignore_caret",
        "win",
        "focusBase",
        "b",
        "b",
        "b",
        "has",
        "rangeapi",
        "lang",
        "mark",
        "sel",
        "sel",
        "sel",
        "b",
        "b",
        "win",
        "focusBase",
        "array",
        "b",
        "n",
        "tmp",
        "rangeapi",
        "n",
        "b",
        "tmp",
        "b",
        "b",
        "tmp",
        "rangeapi",
        "b",
        "b",
        "tmp",
        "b",
        "b",
        "b",
        "tmp",
        "rangeapi",
        "b",
        "b",
        "e",
        "b",
        "b",
        "html",
        "html",
        "v",
        "e",
        "has",
        "e",
        "keys",
        "arguments",
        "e",
        "e",
        "e",
        "k",
        "k",
        "e",
        "k",
        "k",
        "e",
        "arguments",
        "k",
        "keys",
        "keys",
        "keys",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "keys",
        "e",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "arguments",
        "e",
        "win",
        "focusBase",
        "arguments",
        "html",
        "arguments",
        "html",
        "html",
        "html",
        "html",
        "value",
        "lang",
        "value",
        "value",
        "array",
        "p",
        "p",
        "value",
        "array",
        "p",
        "p",
        "arguments",
        "arguments",
        "domStyle",
        "domStyle",
        "e",
        "args",
        "_Plugin",
        "args",
        "args",
        "_Plugin",
        "ToggleButton",
        "args",
        "lang",
        "_Plugin",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "simplePluginFactory",
        "togglePluginFactory",
        "togglePluginFactory",
        "togglePluginFactory",
        "togglePluginFactory",
        "togglePluginFactory",
        "togglePluginFactory",
        "_Plugin",
        "editor",
        "editor",
        "ToolbarSeparator",
        "editor",
        "Editor",
        "define",
        "require",
        "has",
        "keys",
        "ready",
        "_Widget",
        "_KeyNavContainer",
        "_TemplatedMixin",
        "has",
        "ready",
        "require",
        "requires",
        "_Widget",
        "_TemplatedMixin",
        "_KeyNavContainer",
        "arguments",
        "keys",
        "keys",
        "keys",
        "keys",
        "define",
        "array",
        "cookie",
        "domClass",
        "has",
        "lang",
        "ready",
        "topic",
        "registry",
        "_WidgetBase",
        "_LayoutWidget",
        "has",
        "ready",
        "require",
        "requires",
        "_LayoutWidget",
        "arguments",
        "domClass",
        "arguments",
        "array",
        "children",
        "registry",
        "cookie",
        "array",
        "children",
        "child",
        "child",
        "child",
        "child",
        "selected",
        "children",
        "selected",
        "children",
        "selected",
        "topic",
        "children",
        "selected",
        "arguments",
        "selected",
        "selected",
        "arguments",
        "child",
        "arguments",
        "domClass",
        "child",
        "child",
        "child",
        "insertIndex",
        "arguments",
        "topic",
        "child",
        "insertIndex",
        "child",
        "page",
        "arguments",
        "topic",
        "page",
        "page",
        "children",
        "children",
        "page",
        "animate",
        "page",
        "registry",
        "page",
        "page",
        "page",
        "animate",
        "page",
        "topic",
        "page",
        "cookie",
        "d",
        "newWidget",
        "oldWidget",
        "oldWidget",
        "oldWidget",
        "newWidget",
        "newWidget",
        "newWidget",
        "newWidget",
        "d",
        "forward",
        "array",
        "children",
        "index",
        "forward",
        "children",
        "children",
        "index",
        "children",
        "e",
        "topic",
        "e",
        "child",
        "child",
        "child",
        "child",
        "page",
        "page",
        "page",
        "children",
        "page",
        "page",
        "children",
        "children",
        "page",
        "domClass",
        "page",
        "page",
        "page",
        "page",
        "page",
        "domClass",
        "page",
        "page",
        "page",
        "page",
        "page",
        "page",
        "remove",
        "page",
        "page",
        "preserveDom",
        "array",
        "child",
        "preserveDom",
        "child",
        "child",
        "preserveDom",
        "StackContainer",
        "lang",
        "_WidgetBase",
        "StackContainer",
        "StackContainer",
        "define",
        "dojo",
        "lang",
        "lang",
        "regexp",
        "regexp",
        "ch",
        "ch",
        "ch",
        "ch",
        "regexp",
        "arr",
        "re",
        "nonCapture",
        "arr",
        "re",
        "arr",
        "i",
        "arr",
        "i",
        "b",
        "re",
        "arr",
        "i",
        "regexp",
        "b",
        "nonCapture",
        "regexp",
        "expression",
        "nonCapture",
        "nonCapture",
        "expression",
        "regexp",
        "define",
        "ValidationTextBox",
        "ComboBoxMixin",
        "ValidationTextBox",
        "ComboBoxMixin",
        "define",
        "require",
        "domAttr",
        "keys",
        "lang",
        "has",
        "query",
        "_Widget",
        "_Plugin",
        "DropDownButton",
        "rangeapi",
        "_Plugin",
        "DropDownButton",
        "arguments",
        "lang",
        "callback",
        "require",
        "lang",
        "i18n",
        "TooltipDialog",
        "registry",
        "lang",
        "i18n",
        "i18n",
        "TooltipDialog",
        "messages",
        "lang",
        "_this",
        "TooltipDialog",
        "arguments",
        "setTimeout",
        "lang",
        "_this",
        "messages",
        "messages",
        "registry",
        "messages",
        "dropDown",
        "messages",
        "dropDown",
        "registry",
        "registry",
        "registry",
        "registry",
        "lang",
        "value",
        "value",
        "dropDown",
        "e",
        "e",
        "e",
        "keys",
        "e",
        "e",
        "e",
        "e",
        "dropDown",
        "dropDown",
        "dropDown",
        "callback",
        "url",
        "url",
        "url",
        "url",
        "lang",
        "url",
        "url",
        "url",
        "url",
        "url",
        "url",
        "url",
        "url",
        "appendHttp",
        "url",
        "appendMailto",
        "appendHttp",
        "url",
        "appendMailto",
        "url",
        "clearTimeout",
        "setTimeout",
        "fixupUrl",
        "url",
        "lang",
        "staticPanel",
        "staticPanel",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "has",
        "rangeapi",
        "sel",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "args",
        "args",
        "args",
        "query",
        "a",
        "a",
        "domAttr",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "url",
        "a",
        "a",
        "target",
        "a",
        "text",
        "a",
        "a",
        "a",
        "text",
        "url",
        "text",
        "target",
        "has",
        "rangeapi",
        "sel",
        "sel",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "a",
        "b",
        "b",
        "b",
        "b",
        "a",
        "b",
        "a",
        "fc",
        "fc",
        "fc",
        "fc",
        "a",
        "fc",
        "a",
        "a",
        "a",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "tg",
        "domAttr",
        "t",
        "t",
        "editor",
        "editor",
        "editor",
        "editor",
        "editor",
        "setTimeout",
        "button",
        "button",
        "button",
        "button",
        "LinkDialog",
        "img",
        "img",
        "img",
        "url",
        "img",
        "img",
        "text",
        "img",
        "img",
        "text",
        "url",
        "text",
        "arguments",
        "lang",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "tg",
        "t",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "e",
        "e",
        "e",
        "e",
        "t",
        "t",
        "tg",
        "domAttr",
        "t",
        "t",
        "editor",
        "editor",
        "editor",
        "editor",
        "editor",
        "setTimeout",
        "button",
        "button",
        "button",
        "button",
        "_Plugin",
        "LinkDialog",
        "_Plugin",
        "ImgLinkDialog",
        "LinkDialog",
        "ImgLinkDialog",
        "LinkDialog",
        "define",
        "keys",
        "template",
        "_OnDijitClickMixin",
        "_MenuBase",
        "_MenuBase",
        "_OnDijitClickMixin",
        "template",
        "arguments",
        "l",
        "keys",
        "keys",
        "l",
        "keys",
        "keys",
        "keys",
        "keys",
        "evt",
        "evt",
        "evt",
        "evt",
        "evt",
        "evt",
        "evt",
        "define",
        "array",
        "kernel",
        "lang",
        "on",
        "winUtils",
        "children",
        "array",
        "children",
        "child",
        "child",
        "res",
        "child",
        "res",
        "res",
        "child",
        "res",
        "array",
        "widget",
        "widget",
        "widget",
        "array",
        "array",
        "widget",
        "widget",
        "widget",
        "widget",
        "widget",
        "valid",
        "didFocus",
        "winUtils",
        "widget",
        "widget",
        "widget",
        "didFocus",
        "valid",
        "item",
        "item",
        "val",
        "kernel",
        "val",
        "obj",
        "array",
        "widget",
        "widget",
        "widget",
        "widget",
        "entry",
        "widget",
        "name",
        "name",
        "name",
        "lang",
        "name",
        "obj",
        "values",
        "lang",
        "values",
        "values",
        "values",
        "widgets",
        "array",
        "widgets",
        "w",
        "w",
        "array",
        "values",
        "w",
        "widgets",
        "widgets",
        "values",
        "array",
        "widgets",
        "w",
        "i",
        "w",
        "values",
        "i",
        "kernel",
        "array",
        "widget",
        "widget",
        "name",
        "widget",
        "widget",
        "widget",
        "widget",
        "value",
        "lang",
        "name",
        "value",
        "obj",
        "value",
        "lang",
        "name",
        "obj",
        "value",
        "lang",
        "name",
        "obj",
        "lang",
        "name",
        "obj",
        "ary",
        "ary",
        "lang",
        "name",
        "ary",
        "obj",
        "value",
        "ary",
        "value",
        "lang",
        "name",
        "obj",
        "prev",
        "lang",
        "prev",
        "prev",
        "value",
        "lang",
        "name",
        "prev",
        "value",
        "obj",
        "lang",
        "name",
        "value",
        "obj",
        "obj",
        "array",
        "w",
        "w",
        "array",
        "states",
        "array",
        "states",
        "inStartup",
        "array",
        "child",
        "child",
        "child",
        "inStartup",
        "attr",
        "attr",
        "attr",
        "attr",
        "attr",
        "attr",
        "attr",
        "attr",
        "arguments",
        "on",
        "evt",
        "evt",
        "evt",
        "attr",
        "oldVal",
        "newVal",
        "newVal",
        "arguments",
        "define",
        "require",
        "array",
        "dom",
        "domAttr",
        "domGeometry",
        "domStyle",
        "keys",
        "lang",
        "on",
        "has",
        "win",
        "winUtils",
        "pm",
        "DropDownMenu",
        "ready",
        "has",
        "ready",
        "require",
        "requires",
        "DropDownMenu",
        "array",
        "arguments",
        "iframe_el",
        "winUtils",
        "iframe_el",
        "iframe_el",
        "iframe_el",
        "win",
        "iframe_el",
        "iframe_el",
        "iframe_el",
        "iframe_el",
        "iframe_el",
        "iframe_el",
        "win",
        "iframe_el",
        "win",
        "iframe_el",
        "node",
        "node",
        "dom",
        "node",
        "node",
        "iframe",
        "cn",
        "win",
        "cn",
        "node",
        "win",
        "node",
        "node",
        "iframe",
        "domAttr",
        "node",
        "binding",
        "lang",
        "cn",
        "selector",
        "eventType",
        "on",
        "selector",
        "eventType",
        "eventType",
        "eventType",
        "on",
        "cn",
        "delegatedEvent",
        "evt",
        "evt",
        "iframe",
        "evt",
        "evt",
        "evt",
        "on",
        "cn",
        "delegatedEvent",
        "evt",
        "evt",
        "evt",
        "evt",
        "keys",
        "evt",
        "keys",
        "evt",
        "iframe",
        "evt",
        "binding",
        "cn",
        "doConnects",
        "cn",
        "iframe",
        "binding",
        "lang",
        "iframe",
        "cn",
        "win",
        "binding",
        "doConnects",
        "cn",
        "iframe",
        "iframe",
        "binding",
        "iframe",
        "binding",
        "nodeName",
        "node",
        "dom",
        "nodeName",
        "e",
        "node",
        "domAttr",
        "node",
        "attrName",
        "domAttr",
        "node",
        "attrName",
        "bid",
        "h",
        "b",
        "h",
        "b",
        "iframe",
        "iframe",
        "iframe",
        "b",
        "iframe",
        "b",
        "domAttr",
        "node",
        "attrName",
        "bid",
        "delegatedTarget",
        "iframe",
        "coords",
        "target",
        "target",
        "delegatedTarget",
        "iframe",
        "coords",
        "args",
        "args",
        "args",
        "args",
        "args",
        "coords",
        "iframe",
        "domGeometry",
        "iframe",
        "iframe",
        "domGeometry",
        "domStyle",
        "iframe",
        "domStyle",
        "has",
        "has",
        "tp",
        "iframe",
        "cs",
        "has",
        "has",
        "tp",
        "iframe",
        "cs",
        "has",
        "has",
        "tp",
        "iframe",
        "cs",
        "has",
        "has",
        "tp",
        "iframe",
        "cs",
        "coords",
        "ifc",
        "left",
        "scroll",
        "coords",
        "ifc",
        "top",
        "scroll",
        "coords",
        "domGeometry",
        "target",
        "coords",
        "coords",
        "curFocusNode",
        "dom",
        "curFocusNode",
        "prevFocusNode",
        "curFocusNode",
        "savedFocusNode",
        "savedFocusNode",
        "pm",
        "pm",
        "coords",
        "coords",
        "closeAndRestoreFocus",
        "closeAndRestoreFocus",
        "arguments",
        "pm",
        "array",
        "b",
        "b",
        "b",
        "arguments",
        "define",
        "domAttr",
        "value",
        "value",
        "domAttr",
        "value",
        "value",
        "value",
        "value",
        "value",
        "newValue",
        "newValue",
        "newValue",
        "newValue",
        "domAttr",
        "newValue",
        "arguments",
        "domAttr",
        "e",
        "e",
        "arguments",
        "define",
        "kernel",
        "lang",
        "_Widget",
        "_Container",
        "_ContentPaneResizeMixin",
        "html",
        "nlsLoading",
        "array",
        "Deferred",
        "dom",
        "domAttr",
        "domConstruct",
        "xhr",
        "i18n",
        "when",
        "_Widget",
        "_Container",
        "_ContentPaneResizeMixin",
        "kernel",
        "srcNodeRef",
        "srcNodeRef",
        "srcNodeRef",
        "dom",
        "srcNodeRef",
        "srcNodeRef",
        "srcNodeRef",
        "df",
        "srcNodeRef",
        "lang",
        "df",
        "arguments",
        "srcNodeRef",
        "arguments",
        "i18n",
        "messages",
        "messages",
        "arguments",
        "arguments",
        "array",
        "obj",
        "obj",
        "obj",
        "lang",
        "obj",
        "obj",
        "obj",
        "array",
        "obj",
        "obj",
        "obj",
        "lang",
        "obj",
        "obj",
        "obj",
        "array",
        "obj",
        "obj",
        "obj",
        "lang",
        "obj",
        "obj",
        "obj",
        "href",
        "kernel",
        "href",
        "href",
        "Deferred",
        "lang",
        "lang",
        "href",
        "data",
        "kernel",
        "data",
        "data",
        "Deferred",
        "lang",
        "lang",
        "data",
        "arguments",
        "preserveDom",
        "arguments",
        "arguments",
        "Deferred",
        "lang",
        "lang",
        "lang",
        "lang",
        "getArgs",
        "xhr",
        "getArgs",
        "hand",
        "html",
        "returnedHtml",
        "html",
        "html",
        "err",
        "err",
        "err",
        "hand",
        "err",
        "err",
        "returnedHtml",
        "data",
        "data",
        "e",
        "e",
        "e",
        "e",
        "preserveDom",
        "array",
        "widget",
        "widget",
        "widget",
        "preserveDom",
        "widget",
        "widget",
        "preserveDom",
        "widget",
        "setter",
        "array",
        "setter",
        "widget",
        "widget",
        "widget",
        "widget",
        "preserveDom",
        "widget",
        "widget",
        "preserveDom",
        "widget",
        "setter",
        "preserveDom",
        "domConstruct",
        "cont",
        "isFakeContent",
        "setter",
        "setter",
        "html",
        "setter",
        "html",
        "lang",
        "lang",
        "e",
        "e",
        "errMess",
        "e",
        "e",
        "e",
        "lang",
        "cont",
        "setter",
        "lang",
        "cont",
        "cont",
        "cont",
        "cont",
        "setterParams",
        "when",
        "p",
        "p",
        "p",
        "setter",
        "isFakeContent",
        "cont",
        "err",
        "consoleText",
        "err",
        "err",
        "consoleText",
        "consoleText",
        "err",
        "errText",
        "errText",
        "define",
        "kernel",
        "_Container",
        "_FocusMixin",
        "array",
        "keys",
        "domAttr",
        "lang",
        "_FocusMixin",
        "_Container",
        "prevKeyCodes",
        "nextKeyCodes",
        "lang",
        "lang",
        "array",
        "prevKeyCodes",
        "code",
        "keyCodes",
        "code",
        "prev",
        "array",
        "nextKeyCodes",
        "code",
        "keyCodes",
        "code",
        "next",
        "keyCodes",
        "keys",
        "lang",
        "keyCodes",
        "keys",
        "lang",
        "kernel",
        "arguments",
        "array",
        "lang",
        "widget",
        "insertIndex",
        "arguments",
        "widget",
        "widget",
        "last",
        "widget",
        "widget",
        "widget",
        "widget",
        "last",
        "widget",
        "widget",
        "widget",
        "widget",
        "widget",
        "widget",
        "widget",
        "evt",
        "evt",
        "domAttr",
        "evt",
        "domAttr",
        "arguments",
        "evt",
        "evt",
        "evt",
        "evt",
        "func",
        "func",
        "evt",
        "child",
        "dir",
        "child",
        "child",
        "child",
        "dir",
        "i",
        "children",
        "i",
        "child",
        "child",
        "children",
        "dir",
        "children",
        "child",
        "child",
        "child",
        "child",
        "dir",
        "define",
        "array",
        "domClass",
        "domGeometry",
        "domStyle",
        "lang",
        "dijit",
        "lang",
        "dijit",
        "layout",
        "node",
        "mb",
        "domStyle",
        "node",
        "domGeometry",
        "node",
        "cs",
        "domGeometry",
        "node",
        "cs",
        "domStyle",
        "node",
        "cs",
        "domStyle",
        "node",
        "cs",
        "mb",
        "me",
        "pb",
        "mb",
        "me",
        "pb",
        "word",
        "word",
        "word",
        "widget",
        "dim",
        "widget",
        "widget",
        "dim",
        "domGeometry",
        "widget",
        "dim",
        "newSize",
        "lang",
        "widget",
        "newSize",
        "lang",
        "widget",
        "domGeometry",
        "widget",
        "lang",
        "widget",
        "dim",
        "layout",
        "container",
        "dim",
        "children",
        "changedRegionId",
        "changedRegionSize",
        "dim",
        "lang",
        "dim",
        "domClass",
        "container",
        "children",
        "array",
        "children",
        "item",
        "item",
        "item",
        "array",
        "children",
        "item",
        "item",
        "item",
        "array",
        "children",
        "child",
        "child",
        "child",
        "child",
        "pos",
        "child",
        "elm",
        "elmStyle",
        "dim",
        "elmStyle",
        "dim",
        "elmStyle",
        "domClass",
        "elm",
        "capitalize",
        "pos",
        "changedRegionId",
        "changedRegionId",
        "child",
        "sizeSetting",
        "child",
        "child",
        "changedRegionSize",
        "pos",
        "pos",
        "sizeSetting",
        "dim",
        "size",
        "child",
        "sizeSetting",
        "dim",
        "child",
        "pos",
        "dim",
        "child",
        "elmStyle",
        "dim",
        "dim",
        "pos",
        "pos",
        "sizeSetting",
        "dim",
        "size",
        "child",
        "sizeSetting",
        "dim",
        "child",
        "pos",
        "dim",
        "child",
        "elmStyle",
        "dim",
        "dim",
        "pos",
        "pos",
        "size",
        "child",
        "dim",
        "layout",
        "layout",
        "define",
        "dom",
        "lang",
        "query",
        "MemoryStore",
        "registry",
        "option",
        "option",
        "option",
        "lang",
        "option",
        "option",
        "MemoryStore",
        "srcNodeRef",
        "dom",
        "srcNodeRef",
        "lang",
        "registry",
        "arguments",
        "query",
        "toItem",
        "registry",
        "query",
        "query",
        "option",
        "toItem",
        "option",
        "define",
        "require",
        "domAttr",
        "has",
        "query",
        "ready",
        "ToggleButton",
        "_CheckBoxMixin",
        "template",
        "has",
        "ready",
        "require",
        "requires",
        "ToggleButton",
        "_CheckBoxMixin",
        "template",
        "newValue",
        "priorityChange",
        "newValue",
        "arguments",
        "newValue",
        "newValue",
        "priorityChange",
        "arguments",
        "query",
        "arguments",
        "query",
        "arguments",
        "define",
        "connect",
        "lang",
        "Button",
        "args",
        "args",
        "lang",
        "Button",
        "key",
        "key",
        "lang",
        "label",
        "editor",
        "editor",
        "editor",
        "className",
        "props",
        "h",
        "h",
        "o",
        "f",
        "tf",
        "connect",
        "o",
        "f",
        "tf",
        "e",
        "e",
        "c",
        "enabled",
        "disabled",
        "e",
        "c",
        "enabled",
        "enabled",
        "enabled",
        "enabled",
        "e",
        "c",
        "e",
        "c",
        "e",
        "e",
        "editor",
        "editor",
        "lang",
        "toolbar",
        "toolbar",
        "name",
        "value",
        "name",
        "x",
        "name",
        "x",
        "name",
        "x",
        "name",
        "names",
        "names",
        "arguments",
        "name",
        "value",
        "result",
        "name",
        "name",
        "names",
        "names",
        "name",
        "disabled",
        "disabled",
        "name",
        "apn",
        "name",
        "apn",
        "name",
        "name",
        "name",
        "apn",
        "name",
        "uc",
        "uc",
        "name",
        "value",
        "name",
        "value",
        "_Plugin",
        "_Plugin",
        "define",
        "array",
        "connect",
        "Deferred",
        "kernel",
        "lang",
        "cookie",
        "mouse",
        "on",
        "touch",
        "_dndContainer",
        "_dndContainer",
        "on",
        "touch",
        "lang",
        "on",
        "touch",
        "lang",
        "on",
        "touch",
        "lang",
        "i",
        "sel",
        "nodes",
        "sel",
        "i",
        "nodes",
        "arguments",
        "node",
        "isAnchor",
        "node",
        "isAnchor",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "newSelection",
        "array",
        "oldSelection",
        "newSelection",
        "lang",
        "node",
        "node",
        "node",
        "node",
        "array",
        "newSelection",
        "oldSelection",
        "lang",
        "node",
        "node",
        "node",
        "node",
        "xs",
        "ys",
        "array",
        "ys",
        "y",
        "y",
        "array",
        "xs",
        "x",
        "x",
        "array",
        "ys",
        "y",
        "y",
        "ret",
        "array",
        "selected",
        "node",
        "node",
        "nodes",
        "node",
        "paths",
        "ary",
        "ary",
        "array",
        "ary",
        "item",
        "model",
        "item",
        "selects",
        "ary",
        "array",
        "nodes",
        "node",
        "node",
        "paths",
        "paths",
        "nodes",
        "nodes",
        "items",
        "items",
        "selects",
        "cookie",
        "selects",
        "tree",
        "tree",
        "oreo",
        "cookie",
        "tree",
        "oreo",
        "paths",
        "array",
        "oreo",
        "path",
        "path",
        "paths",
        "e",
        "e",
        "e",
        "mouse",
        "e",
        "e",
        "e",
        "connect",
        "e",
        "treeNode",
        "e",
        "id",
        "treeNode",
        "copy",
        "e",
        "e",
        "connect",
        "e",
        "e",
        "n1",
        "n2",
        "n1",
        "n2",
        "n1",
        "n2",
        "n1",
        "n2",
        "doc",
        "r1",
        "n1",
        "doc",
        "r2",
        "n2",
        "r1",
        "r1",
        "r2",
        "node",
        "multi",
        "node",
        "multi",
        "node",
        "node",
        "node",
        "cr",
        "begin",
        "anchor",
        "end",
        "node",
        "begin",
        "node",
        "end",
        "anchor",
        "begin",
        "end",
        "nodes",
        "begin",
        "begin",
        "begin",
        "nodes",
        "end",
        "nodes",
        "node",
        "multi",
        "node",
        "multi",
        "node",
        "node",
        "node",
        "key",
        "key",
        "widget",
        "f",
        "o",
        "o",
        "o",
        "kernel",
        "id",
        "f",
        "o",
        "id",
        "id",
        "define",
        "kernel",
        "lang",
        "darray",
        "dom",
        "domConstruct",
        "parser",
        "lang",
        "html",
        "html",
        "cont",
        "cont",
        "html",
        "domConstruct",
        "html",
        "node",
        "cont",
        "domConstruct",
        "node",
        "cont",
        "cont",
        "cont",
        "domConstruct",
        "cont",
        "node",
        "cont",
        "lang",
        "cont",
        "cont",
        "i",
        "cont",
        "i",
        "startlen",
        "cont",
        "i",
        "domConstruct",
        "cont",
        "i",
        "node",
        "domConstruct",
        "cont",
        "node",
        "node",
        "html",
        "kernel",
        "node",
        "lang",
        "node",
        "dom",
        "node",
        "node",
        "node",
        "node",
        "idCounter",
        "cont",
        "cont",
        "cont",
        "ret",
        "ret",
        "ret",
        "node",
        "node",
        "html",
        "node",
        "e",
        "e",
        "node",
        "errMess",
        "e",
        "e",
        "e",
        "node",
        "darray",
        "w",
        "w",
        "w",
        "domConstruct",
        "lang",
        "cont",
        "cont",
        "html",
        "cont",
        "cont",
        "match",
        "cont",
        "match",
        "cont",
        "err",
        "err",
        "err",
        "err",
        "key",
        "key",
        "empty",
        "key",
        "key",
        "darray",
        "name",
        "name",
        "inherited",
        "name",
        "name",
        "parser",
        "rootNode",
        "inherited",
        "results",
        "results",
        "e",
        "e",
        "e",
        "e",
        "err",
        "consoleText",
        "err",
        "consoleText",
        "consoleText",
        "err",
        "errText",
        "html",
        "errText",
        "html",
        "node",
        "cont",
        "cont",
        "cont",
        "html",
        "node",
        "cont",
        "html",
        "lang",
        "cont",
        "node",
        "op",
        "html",
        "define",
        "domAttr",
        "domClass",
        "domConstruct",
        "keys",
        "lang",
        "_CssStateMixin",
        "focus",
        "typematic",
        "_CssStateMixin",
        "value",
        "lang",
        "dyeClassObj",
        "value",
        "choices",
        "titles",
        "row",
        "choices",
        "row",
        "domConstruct",
        "col",
        "choices",
        "row",
        "col",
        "choices",
        "row",
        "col",
        "value",
        "value",
        "row",
        "col",
        "titles",
        "value",
        "domConstruct",
        "titles",
        "value",
        "rowNode",
        "cellObject",
        "cellNode",
        "url",
        "cellNode",
        "cellNode",
        "cellObject",
        "choices",
        "choices",
        "key",
        "keyIncrementMap",
        "typematic",
        "keys",
        "key",
        "keyIncrementMap",
        "key",
        "count",
        "increment",
        "count",
        "arguments",
        "focus",
        "evt",
        "evt",
        "target",
        "target",
        "target",
        "target",
        "target",
        "target",
        "target",
        "focus",
        "target",
        "value",
        "evt",
        "node",
        "domAttr",
        "node",
        "node",
        "domAttr",
        "node",
        "value",
        "priorityChange",
        "domClass",
        "value",
        "i",
        "i",
        "value",
        "i",
        "i",
        "domClass",
        "i",
        "value",
        "priorityChange",
        "priorityChange",
        "value",
        "increment",
        "typeCount",
        "typeCount",
        "increment",
        "newFocusIndex",
        "newFocusIndex",
        "newFocusIndex",
        "focusNode",
        "lang",
        "focus",
        "focusNode",
        "cell",
        "cell",
        "define",
        "kernel",
        "i18n",
        "TextBox",
        "Tooltip",
        "template",
        "ValidationTextBox",
        "TextBox",
        "template",
        "attr",
        "value",
        "value",
        "ValidationTextBox",
        "attr",
        "kernel",
        "attr",
        "value",
        "newFcn",
        "newFcn",
        "value",
        "value",
        "arguments",
        "value",
        "constraints",
        "constraints",
        "value",
        "value",
        "value",
        "value",
        "constraints",
        "value",
        "value",
        "invalid",
        "missing",
        "invalid",
        "isFocused",
        "isFocused",
        "isValid",
        "isValid",
        "isFocused",
        "isValid",
        "isFocused",
        "isEmpty",
        "isValidSubset",
        "isValidSubset",
        "isFocused",
        "isValid",
        "isFocused",
        "isValidSubset",
        "message",
        "isFocused",
        "message",
        "isFocused",
        "isFocused",
        "isEmpty",
        "message",
        "isFocused",
        "message",
        "isValid",
        "message",
        "message",
        "Tooltip",
        "message",
        "Tooltip",
        "arguments",
        "arguments",
        "constraints",
        "constraints",
        "constraints",
        "constraints",
        "pattern",
        "pattern",
        "constraints",
        "p",
        "p",
        "constraints",
        "p",
        "p",
        "p",
        "p",
        "re",
        "re",
        "partialre",
        "re",
        "partialre",
        "partialre",
        "re",
        "partialre",
        "e",
        "partialre",
        "partialre",
        "p",
        "arguments",
        "i18n",
        "value",
        "arguments",
        "value",
        "value",
        "value",
        "message",
        "message",
        "message",
        "arguments",
        "arguments",
        "define",
        "array",
        "cookie",
        "domClass",
        "domConstruct",
        "domGeometry",
        "domStyle",
        "keys",
        "lang",
        "on",
        "touch",
        "_WidgetBase",
        "_Widget",
        "_TemplatedMixin",
        "_LayoutWidget",
        "layoutUtils",
        "_Widget",
        "_TemplatedMixin",
        "arguments",
        "arguments",
        "domClass",
        "cookie",
        "persistSize",
        "persistSize",
        "domGeometry",
        "dim",
        "array",
        "child",
        "child",
        "domGeometry",
        "center",
        "dim",
        "childSize",
        "spaceAvailable",
        "e",
        "domConstruct",
        "domClass",
        "domConstruct",
        "domClass",
        "domConstruct",
        "domClass",
        "domClass",
        "isHorizontal",
        "e",
        "axis",
        "isHorizontal",
        "domGeometry",
        "dim",
        "region",
        "region",
        "parseInt",
        "splitterStyle",
        "splitterAttr",
        "lang",
        "on",
        "de",
        "touch",
        "e",
        "forceResize",
        "e",
        "axis",
        "pageStart",
        "factor",
        "delta",
        "childStart",
        "childSize",
        "max",
        "min",
        "resize",
        "forceResize",
        "layoutFunc",
        "boundChildSize",
        "splitterStyle",
        "splitterAttr",
        "delta",
        "splitterStart",
        "factor",
        "boundChildSize",
        "childSize",
        "on",
        "de",
        "on",
        "on",
        "de",
        "touch",
        "lang",
        "e",
        "e",
        "e",
        "e",
        "domClass",
        "o",
        "domClass",
        "o",
        "e",
        "domClass",
        "domConstruct",
        "domClass",
        "e",
        "e",
        "cookie",
        "h",
        "h",
        "e",
        "e",
        "horizontal",
        "keys",
        "keys",
        "tick",
        "horizontal",
        "keys",
        "keys",
        "domGeometry",
        "horizontal",
        "tick",
        "childSize",
        "e",
        "arguments",
        "_Widget",
        "_TemplatedMixin",
        "arguments",
        "arguments",
        "domClass",
        "_LayoutWidget",
        "_Splitter",
        "arguments",
        "array",
        "arguments",
        "child",
        "child",
        "region",
        "arguments",
        "domClass",
        "child",
        "region",
        "region",
        "ltr",
        "region",
        "region",
        "ltr",
        "region",
        "child",
        "child",
        "child",
        "_Gutter",
        "lang",
        "_Splitter",
        "_Splitter",
        "lang",
        "_Splitter",
        "_Splitter",
        "child",
        "child",
        "region",
        "splitter",
        "child",
        "splitter",
        "domConstruct",
        "splitter",
        "child",
        "splitter",
        "child",
        "region",
        "child",
        "insertIndex",
        "arguments",
        "child",
        "child",
        "child",
        "splitter",
        "splitter",
        "child",
        "arguments",
        "domClass",
        "child",
        "domStyle",
        "child",
        "domStyle",
        "child",
        "region",
        "region",
        "array",
        "arguments",
        "widget",
        "widget",
        "region",
        "array",
        "child",
        "child",
        "region",
        "newSize",
        "currentSize",
        "domStyle",
        "node",
        "domGeometry",
        "node",
        "domStyle",
        "node",
        "domStyle",
        "node",
        "domStyle",
        "node",
        "arguments",
        "changedChildId",
        "changedChildSize",
        "array",
        "child",
        "idx",
        "child",
        "child",
        "Infinity",
        "child",
        "child",
        "idx",
        "wrappers",
        "a",
        "b",
        "a",
        "b",
        "i",
        "aw",
        "i",
        "aw",
        "i",
        "bw",
        "i",
        "aw",
        "i",
        "bw",
        "i",
        "array",
        "wrappers",
        "wrapper",
        "wrapper",
        "childrenAndSplitters",
        "pane",
        "pane",
        "childrenAndSplitters",
        "pane",
        "layoutUtils",
        "dim",
        "childrenAndSplitters",
        "changedChildId",
        "changedChildSize",
        "array",
        "child",
        "child",
        "splitter",
        "splitter",
        "child",
        "arguments",
        "BorderContainer",
        "Infinity",
        "lang",
        "_WidgetBase",
        "BorderContainer",
        "BorderContainer",
        "_Splitter",
        "BorderContainer",
        "_Gutter",
        "BorderContainer",
        "define",
        "lang",
        "i18n",
        "nlsNumber",
        "dstring",
        "dregexp",
        "lang",
        "number",
        "number",
        "value",
        "options",
        "options",
        "lang",
        "options",
        "i18n",
        "options",
        "i18n",
        "locale",
        "options",
        "bundle",
        "options",
        "bundle",
        "options",
        "isNaN",
        "value",
        "value",
        "Infinity",
        "number",
        "value",
        "pattern",
        "options",
        "number",
        "number",
        "value",
        "pattern",
        "options",
        "options",
        "options",
        "options",
        "options",
        "pattern",
        "patternList",
        "pattern",
        "patternList",
        "value",
        "positivePattern",
        "pattern",
        "value",
        "pattern",
        "value",
        "pattern",
        "group",
        "options",
        "group",
        "options",
        "pattern",
        "pattern",
        "match",
        "match",
        "options",
        "prop",
        "options",
        "pattern",
        "number",
        "positivePattern",
        "numberPatternRE",
        "numberPattern",
        "pattern",
        "options",
        "options",
        "pattern",
        "numberPatternRE",
        "number",
        "value",
        "numberPattern",
        "group",
        "options",
        "options",
        "number",
        "value",
        "places",
        "increment",
        "increment",
        "factor",
        "value",
        "places",
        "factor",
        "number",
        "number",
        "v",
        "p",
        "m",
        "p",
        "v",
        "v",
        "a",
        "d",
        "d",
        "a",
        "d",
        "a",
        "a",
        "d",
        "round",
        "v",
        "p",
        "m",
        "v",
        "d",
        "d",
        "number",
        "value",
        "pattern",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "Infinity",
        "options",
        "pattern",
        "options",
        "options",
        "options",
        "comma",
        "maxPlaces",
        "options",
        "comma",
        "maxPlaces",
        "maxPlaces",
        "patternParts",
        "options",
        "value",
        "number",
        "value",
        "maxPlaces",
        "options",
        "value",
        "valueParts",
        "patternParts",
        "options",
        "comma",
        "options",
        "options",
        "comma",
        "options",
        "options",
        "patternParts",
        "patternParts",
        "pad",
        "fractional",
        "valueParts",
        "dstring",
        "fractional",
        "pad",
        "maxPlaces",
        "fractional",
        "valueParts",
        "fractional",
        "maxPlaces",
        "valueParts",
        "valueParts",
        "patternParts",
        "pad",
        "patternDigits",
        "pad",
        "pad",
        "patternDigits",
        "pad",
        "pad",
        "valueParts",
        "valueParts",
        "dstring",
        "valueParts",
        "pad",
        "patternDigits",
        "valueParts",
        "valueParts",
        "valueParts",
        "pad",
        "patternParts",
        "index",
        "groupSize",
        "patternParts",
        "index",
        "patternParts",
        "index",
        "index",
        "remainder",
        "index",
        "groupSize2",
        "remainder",
        "index",
        "valueParts",
        "whole",
        "whole",
        "groupSize",
        "pieces",
        "off",
        "whole",
        "off",
        "whole",
        "whole",
        "off",
        "whole",
        "off",
        "groupSize2",
        "groupSize",
        "groupSize2",
        "groupSize2",
        "valueParts",
        "pieces",
        "options",
        "valueParts",
        "options",
        "number",
        "options",
        "number",
        "options",
        "number",
        "options",
        "options",
        "options",
        "i18n",
        "options",
        "i18n",
        "locale",
        "options",
        "bundle",
        "options",
        "bundle",
        "bundle",
        "pattern",
        "factor",
        "pattern",
        "factor",
        "pattern",
        "isCurrency",
        "group",
        "bundle",
        "group",
        "bundle",
        "pattern",
        "patternList",
        "patternList",
        "patternList",
        "dregexp",
        "patternList",
        "pattern",
        "pattern",
        "dregexp",
        "pattern",
        "pattern",
        "number",
        "format",
        "options",
        "group",
        "group",
        "options",
        "format",
        "options",
        "parts",
        "factor",
        "parts",
        "parts",
        "places",
        "flags",
        "places",
        "places",
        "options",
        "parts",
        "Infinity",
        "places",
        "options",
        "flags",
        "options",
        "places",
        "parts",
        "places",
        "parts",
        "flags",
        "places",
        "parts",
        "groups",
        "flags",
        "groups",
        "groups",
        "flags",
        "groups",
        "number",
        "flags",
        "isCurrency",
        "re",
        "re",
        "match",
        "before",
        "target",
        "after",
        "target",
        "dregexp",
        "options",
        "prop",
        "options",
        "before",
        "before",
        "after",
        "after",
        "options",
        "before",
        "before",
        "after",
        "after",
        "before",
        "symbol",
        "after",
        "before",
        "symbol",
        "after",
        "re",
        "group",
        "factor",
        "number",
        "expression",
        "options",
        "number",
        "options",
        "info",
        "expression",
        "results",
        "NaN",
        "results",
        "results",
        "results",
        "NaN",
        "absoluteMatch",
        "results",
        "info",
        "absoluteMatch",
        "absoluteMatch",
        "info",
        "info",
        "absoluteMatch",
        "info",
        "number",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "Infinity",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "number",
        "flags",
        "dregexp",
        "flags",
        "q",
        "q",
        "flags",
        "re",
        "flags",
        "flags",
        "Infinity",
        "re",
        "re",
        "re",
        "flags",
        "re",
        "dregexp",
        "flags",
        "q",
        "q",
        "number",
        "flags",
        "integerRE",
        "decimalRE",
        "decimalRE",
        "realRE",
        "realRE",
        "decimalRE",
        "realRE",
        "exponentRE",
        "number",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "flags",
        "dregexp",
        "flags",
        "q",
        "q",
        "dregexp",
        "flags",
        "sep",
        "sep",
        "sep",
        "dregexp",
        "sep",
        "sep",
        "sep",
        "sep",
        "sep",
        "flags",
        "flags",
        "grp2",
        "grp2",
        "sep",
        "grp2",
        "sep",
        "grp",
        "grp",
        "grp2",
        "grp2RE",
        "grp",
        "grp2RE",
        "grp",
        "sep",
        "grp",
        "signRE",
        "numberRE",
        "number",
        "define",
        "lang",
        "lang",
        "pattern",
        "ignoreCase",
        "i",
        "pattern",
        "i",
        "c",
        "pattern",
        "i",
        "c",
        "rxp",
        "c",
        "i",
        "rxp",
        "pattern",
        "i",
        "rxp",
        "rxp",
        "rxp",
        "rxp",
        "c",
        "rxp",
        "ignoreCase",
        "rxp",
        "rxp",
        "define",
        "array",
        "parser",
        "parser",
        "node",
        "cw",
        "cw",
        "n",
        "p",
        "n",
        "p",
        "array",
        "w",
        "w",
        "w",
        "w",
        "w",
        "arguments",
        "define",
        "number",
        "query",
        "HorizontalRule",
        "HorizontalRule",
        "pos",
        "pos",
        "pos",
        "ndx",
        "pos",
        "ndx",
        "labels",
        "labels",
        "query",
        "node",
        "node",
        "labels",
        "start",
        "i",
        "i",
        "labels",
        "i",
        "i",
        "number",
        "start",
        "start",
        "inc",
        "labels",
        "arguments",
        "define",
        "lang",
        "when",
        "MappedTextBox",
        "ComboBoxMixin",
        "MappedTextBox",
        "ComboBoxMixin",
        "arguments",
        "result",
        "query",
        "options",
        "priorityChange",
        "query",
        "query",
        "query",
        "result",
        "result",
        "result",
        "priorityChange",
        "priorityChange",
        "result",
        "priorityChange",
        "results",
        "query",
        "options",
        "query",
        "arguments",
        "value",
        "priorityChange",
        "displayedValue",
        "item",
        "priorityChange",
        "item",
        "value",
        "value",
        "value",
        "lang",
        "displayedValue",
        "displayedValue",
        "priorityChange",
        "value",
        "when",
        "value",
        "item",
        "item",
        "item",
        "priorityChange",
        "value",
        "arguments",
        "item",
        "priorityChange",
        "displayedValue",
        "arguments",
        "text",
        "text",
        "label",
        "priorityChange",
        "label",
        "label",
        "priorityChange",
        "lang",
        "label",
        "q",
        "qs",
        "q",
        "qs",
        "q",
        "qs",
        "query",
        "q",
        "label",
        "label",
        "label",
        "lang",
        "options",
        "query",
        "options",
        "when",
        "result",
        "_this",
        "_this",
        "result",
        "query",
        "options",
        "priorityChange",
        "err",
        "_this",
        "_this",
        "err",
        "define",
        "lang",
        "lang",
        "sorter",
        "sorter",
        "a",
        "b",
        "a",
        "a",
        "b",
        "b",
        "a",
        "b",
        "r",
        "a",
        "b",
        "a",
        "r",
        "r",
        "sorter",
        "sortSpec",
        "store",
        "attr",
        "dir",
        "comp",
        "s",
        "itemA",
        "itemB",
        "s",
        "itemA",
        "attr",
        "s",
        "itemB",
        "attr",
        "dir",
        "comp",
        "a",
        "b",
        "store",
        "sorter",
        "i",
        "sortSpec",
        "i",
        "sortAttribute",
        "sortSpec",
        "i",
        "sortAttribute",
        "attr",
        "sortAttribute",
        "attr",
        "attr",
        "attr",
        "attr",
        "comp",
        "attr",
        "bc",
        "sortFunctions",
        "createSortFunction",
        "attr",
        "dir",
        "comp",
        "store",
        "rowA",
        "rowB",
        "i",
        "sortFunctions",
        "sortFunctions",
        "i",
        "rowA",
        "rowB",
        "ret",
        "ret",
        "sorter",
        "define",
        "dom",
        "registry",
        "e",
        "e",
        "e",
        "preventDefault",
        "node",
        "node",
        "node",
        "registry",
        "node",
        "widget",
        "widget",
        "widget",
        "e",
        "preventDefault",
        "preventDefault",
        "e",
        "preventDefault",
        "arguments",
        "dom",
        "content",
        "content",
        "content",
        "define",
        "dojo",
        "lang",
        "Color",
        "ArrayUtil",
        "lang",
        "ColorExt",
        "m1",
        "m2",
        "h",
        "h",
        "h",
        "h",
        "h",
        "h",
        "h6",
        "m1",
        "m2",
        "m1",
        "h6",
        "h",
        "m2",
        "h",
        "m1",
        "m2",
        "m1",
        "h",
        "m1",
        "dojo",
        "Color",
        "color",
        "obj",
        "color",
        "m",
        "m",
        "c",
        "m",
        "t",
        "l",
        "t",
        "l",
        "c",
        "r",
        "r",
        "a",
        "ArrayUtil",
        "c",
        "x",
        "parseFloat",
        "x",
        "l",
        "a",
        "c",
        "Color",
        "a",
        "obj",
        "Color",
        "c",
        "obj",
        "t",
        "l",
        "t",
        "l",
        "parseFloat",
        "c",
        "parseFloat",
        "c",
        "parseFloat",
        "c",
        "L",
        "L",
        "S",
        "L",
        "S",
        "L",
        "S",
        "L",
        "m2",
        "a",
        "hue2rgb",
        "m1",
        "m2",
        "H",
        "hue2rgb",
        "m1",
        "m2",
        "H",
        "hue2rgb",
        "m1",
        "m2",
        "H",
        "l",
        "a",
        "c",
        "Color",
        "a",
        "obj",
        "c",
        "low",
        "high",
        "c",
        "c",
        "isNaN",
        "c",
        "high",
        "c",
        "low",
        "low",
        "c",
        "high",
        "high",
        "c",
        "Color",
        "t",
        "confine",
        "t",
        "t",
        "confine",
        "t",
        "t",
        "confine",
        "t",
        "t",
        "confine",
        "t",
        "ColorExt",
        "Color",
        "g",
        "a",
        "Color",
        "g",
        "g",
        "g",
        "a",
        "lang",
        "Color",
        "Color",
        "define",
        "aspect",
        "domClass",
        "lang",
        "on",
        "touch",
        "tree",
        "tree",
        "tree",
        "lang",
        "domClass",
        "on",
        "touch",
        "lang",
        "on",
        "touch",
        "lang",
        "aspect",
        "lang",
        "aspect",
        "lang",
        "on",
        "lang",
        "on",
        "lang",
        "h",
        "h",
        "widget",
        "widget",
        "newState",
        "domClass",
        "prefix",
        "newState",
        "prefix",
        "state",
        "state",
        "newState",
        "node",
        "domClass",
        "node",
        "node",
        "domClass",
        "node",
        "define",
        "lang",
        "array",
        "date",
        "supplemental",
        "i18n",
        "regexp",
        "gregorian",
        "lang",
        "exports",
        "dateObject",
        "bundle",
        "options",
        "pattern",
        "pattern",
        "match",
        "match",
        "match",
        "c",
        "s",
        "bundle",
        "l",
        "dateObject",
        "s",
        "dateObject",
        "l",
        "options",
        "s",
        "s",
        "s",
        "s",
        "s",
        "pad",
        "s",
        "dateObject",
        "pad",
        "dateObject",
        "l",
        "s",
        "m",
        "pad",
        "c",
        "widthList",
        "l",
        "s",
        "bundle",
        "propM",
        "m",
        "s",
        "exports",
        "dateObject",
        "firstDay",
        "pad",
        "s",
        "dateObject",
        "pad",
        "s",
        "exports",
        "dateObject",
        "pad",
        "dateObject",
        "l",
        "s",
        "d",
        "supplemental",
        "options",
        "d",
        "dateObject",
        "l",
        "s",
        "d",
        "pad",
        "c",
        "widthList",
        "l",
        "s",
        "bundle",
        "propD",
        "d",
        "dateObject",
        "s",
        "options",
        "timePeriod",
        "bundle",
        "timePeriod",
        "dateObject",
        "c",
        "s",
        "h",
        "s",
        "h",
        "s",
        "h",
        "s",
        "h",
        "pad",
        "s",
        "dateObject",
        "pad",
        "s",
        "dateObject",
        "pad",
        "s",
        "dateObject",
        "l",
        "pad",
        "s",
        "exports",
        "dateObject",
        "options",
        "s",
        "l",
        "exports",
        "dateObject",
        "options",
        "offset",
        "offset",
        "offset",
        "l",
        "tz",
        "tz",
        "s",
        "tz",
        "pattern",
        "pad",
        "s",
        "s",
        "l",
        "s",
        "exports",
        "dateObject",
        "getName",
        "options",
        "getName",
        "date",
        "dateObject",
        "dateObject",
        "exports",
        "dateObject",
        "options",
        "options",
        "options",
        "i18n",
        "options",
        "options",
        "exports",
        "locale",
        "lang",
        "formatPattern",
        "dateObject",
        "bundle",
        "options",
        "options",
        "_processPattern",
        "bundle",
        "sauce",
        "options",
        "pattern",
        "options",
        "bundle",
        "formatLength",
        "pattern",
        "_processPattern",
        "pattern",
        "sauce",
        "options",
        "pattern",
        "options",
        "bundle",
        "formatLength",
        "pattern",
        "_processPattern",
        "pattern",
        "sauce",
        "bundle",
        "formatLength",
        "match",
        "key",
        "key",
        "exports",
        "options",
        "exports",
        "options",
        "exports",
        "options",
        "options",
        "options",
        "i18n",
        "options",
        "exports",
        "locale",
        "options",
        "options",
        "bundle",
        "formatLength",
        "options",
        "bundle",
        "formatLength",
        "options",
        "pattern",
        "datePattern",
        "options",
        "pattern",
        "timePattern",
        "pattern",
        "bundle",
        "formatLength",
        "match",
        "key",
        "timePattern",
        "datePattern",
        "key",
        "_processPattern",
        "pattern",
        "lang",
        "_buildDateTimeRE",
        "tokens",
        "bundle",
        "options",
        "re",
        "tokens",
        "bundle",
        "exports",
        "value",
        "options",
        "exports",
        "options",
        "info",
        "info",
        "info",
        "controlChars",
        "info",
        "re",
        "value",
        "value",
        "controlChars",
        "match",
        "array",
        "match",
        "v",
        "i",
        "i",
        "tokens",
        "i",
        "token",
        "token",
        "c",
        "l",
        "options",
        "result",
        "v",
        "v",
        "v",
        "v",
        "year",
        "year",
        "result",
        "v",
        "cutoff",
        "century",
        "v",
        "century",
        "v",
        "options",
        "result",
        "v",
        "l",
        "bundle",
        "c",
        "widthList",
        "l",
        "options",
        "v",
        "v",
        "months",
        "array",
        "months",
        "s",
        "s",
        "v",
        "array",
        "months",
        "v",
        "v",
        "v",
        "result",
        "v",
        "bundle",
        "c",
        "widthList",
        "l",
        "options",
        "v",
        "v",
        "days",
        "array",
        "days",
        "d",
        "d",
        "v",
        "array",
        "days",
        "v",
        "v",
        "result",
        "result",
        "v",
        "options",
        "bundle",
        "options",
        "bundle",
        "options",
        "v",
        "v",
        "period",
        "am",
        "am",
        "period",
        "pm",
        "pm",
        "period",
        "options",
        "v",
        "am",
        "v",
        "pm",
        "amPm",
        "v",
        "pm",
        "v",
        "am",
        "v",
        "v",
        "v",
        "result",
        "v",
        "result",
        "v",
        "result",
        "v",
        "result",
        "v",
        "result",
        "amPm",
        "hours",
        "result",
        "hours",
        "amPm",
        "hours",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "result",
        "options",
        "dateObject",
        "result",
        "tokens",
        "allTokens",
        "allTokens",
        "valid",
        "monthToken",
        "dateObject",
        "result",
        "dateToken",
        "dateObject",
        "result",
        "monthToken",
        "dateObject",
        "result",
        "dateToken",
        "dateObject",
        "result",
        "dateObject",
        "date",
        "dateObject",
        "dateObject",
        "pattern",
        "applyPattern",
        "applyLiteral",
        "applyAll",
        "x",
        "x",
        "applyPattern",
        "applyPattern",
        "identity",
        "applyLiteral",
        "applyLiteral",
        "identity",
        "applyAll",
        "applyAll",
        "identity",
        "pattern",
        "pattern",
        "array",
        "chunks",
        "chunk",
        "i",
        "chunk",
        "chunks",
        "i",
        "chunks",
        "i",
        "literal",
        "applyLiteral",
        "applyPattern",
        "chunk",
        "literal",
        "literal",
        "applyAll",
        "chunks",
        "tokens",
        "bundle",
        "options",
        "pattern",
        "pattern",
        "regexp",
        "pattern",
        "options",
        "pattern",
        "pattern",
        "pattern",
        "match",
        "match",
        "match",
        "options",
        "l",
        "p2",
        "l",
        "l",
        "p3",
        "l",
        "p2",
        "p3",
        "c",
        "s",
        "s",
        "l",
        "p2",
        "s",
        "p2",
        "p3",
        "s",
        "p2",
        "s",
        "p2",
        "s",
        "s",
        "p2",
        "s",
        "p2",
        "s",
        "p2",
        "s",
        "p2",
        "s",
        "s",
        "l",
        "options",
        "bundle",
        "options",
        "bundle",
        "s",
        "am",
        "pm",
        "options",
        "am",
        "am",
        "s",
        "am",
        "pm",
        "pm",
        "s",
        "pm",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "tokens",
        "tokens",
        "match",
        "s",
        "exports",
        "packageName",
        "bundleName",
        "_customFormats",
        "packageName",
        "bundleName",
        "exports",
        "locale",
        "array",
        "_customFormats",
        "desc",
        "i18n",
        "desc",
        "desc",
        "locale",
        "gregorian",
        "lang",
        "gregorian",
        "bundle",
        "gregorian",
        "exports",
        "exports",
        "item",
        "context",
        "locale",
        "exports",
        "locale",
        "item",
        "context",
        "context",
        "props",
        "label",
        "lookup",
        "key",
        "label",
        "label",
        "props",
        "label",
        "lookup",
        "props",
        "exports",
        "dateObject",
        "locale",
        "supplemental",
        "locale",
        "dateObject",
        "weekend",
        "weekend",
        "weekend",
        "day",
        "weekend",
        "day",
        "day",
        "weekend",
        "day",
        "weekend",
        "exports",
        "dateObject",
        "date",
        "dateObject",
        "dateObject",
        "dateObject",
        "exports",
        "dateObject",
        "firstDayOfWeek",
        "arguments",
        "firstDayOfWeek",
        "dateObject",
        "firstDayOfYear",
        "firstDayOfWeek",
        "exports",
        "dateObject",
        "adj",
        "firstDayOfYear",
        "firstDayOfWeek",
        "week",
        "week",
        "exports",
        "define",
        "HorizontalRule",
        "HorizontalRule",
        "define",
        "array",
        "Deferred",
        "aspect",
        "sorter",
        "dom",
        "domClass",
        "kernel",
        "lang",
        "query",
        "when",
        "QueryResults",
        "_FormValueWidget",
        "_FormValueWidget",
        "valueOrIdx",
        "valueOrIdx",
        "opts",
        "lang",
        "valueOrIdx",
        "array",
        "valueOrIdx",
        "lang",
        "valueOrIdx",
        "valueOrIdx",
        "valueOrIdx",
        "lang",
        "valueOrIdx",
        "array",
        "opts",
        "option",
        "idx",
        "a",
        "valueOrIdx",
        "a",
        "option",
        "option",
        "a",
        "valueOrIdx",
        "a",
        "valueOrIdx",
        "idx",
        "valueOrIdx",
        "valueOrIdx",
        "valueOrIdx",
        "opts",
        "opts",
        "valueOrIdx",
        "option",
        "array",
        "lang",
        "option",
        "option",
        "option",
        "i",
        "i",
        "lang",
        "i",
        "i",
        "valueOrIdx",
        "lang",
        "valueOrIdx",
        "valueOrIdx",
        "valueOrIdx",
        "array",
        "oldOpts",
        "option",
        "option",
        "array",
        "node",
        "node",
        "option",
        "node",
        "option",
        "option",
        "newOption",
        "array",
        "lang",
        "newOption",
        "newOption",
        "newOption",
        "i",
        "i",
        "oldOpt",
        "k",
        "i",
        "oldOpt",
        "k",
        "i",
        "k",
        "store",
        "selectedValue",
        "fetchArgs",
        "fetchArgs",
        "fetchArgs",
        "oStore",
        "store",
        "h",
        "h",
        "store",
        "lang",
        "store",
        "id",
        "Deferred",
        "id",
        "deferred",
        "error",
        "deferred",
        "error",
        "deferred",
        "query",
        "options",
        "Deferred",
        "fetchHandle",
        "fetchHandle",
        "deferred",
        "Deferred",
        "lang",
        "query",
        "count",
        "deferred",
        "count",
        "results",
        "deferred",
        "results",
        "error",
        "deferred",
        "error",
        "options",
        "QueryResults",
        "deferred",
        "store",
        "aspect",
        "store",
        "lang",
        "aspect",
        "store",
        "lang",
        "aspect",
        "store",
        "lang",
        "store",
        "fetchArgs",
        "fetchArgs",
        "fetchArgs",
        "store",
        "Deferred",
        "store",
        "when",
        "lang",
        "items",
        "fetchArgs",
        "items",
        "store",
        "items",
        "sorter",
        "store",
        "items",
        "store",
        "items",
        "a",
        "b",
        "a",
        "labelAttr",
        "b",
        "labelAttr",
        "b",
        "labelAttr",
        "a",
        "labelAttr",
        "fetchArgs",
        "items",
        "fetchArgs",
        "items",
        "fetchArgs",
        "array",
        "items",
        "i",
        "i",
        "lang",
        "deletedFrom",
        "insertedInto",
        "deletedFrom",
        "insertedInto",
        "deletedFrom",
        "insertedInto",
        "selectedValue",
        "items",
        "err",
        "err",
        "err",
        "oStore",
        "newValue",
        "priorityChange",
        "priorityChange",
        "newValue",
        "newValue",
        "lang",
        "newValue",
        "newValue",
        "array",
        "newValue",
        "value",
        "lang",
        "value",
        "value",
        "value",
        "lang",
        "newValue",
        "newValue",
        "newValue",
        "newValue",
        "newValue",
        "newValue",
        "array",
        "newValue",
        "i",
        "i",
        "i",
        "newValue",
        "newValue",
        "opts",
        "newValue",
        "opts",
        "array",
        "opts",
        "opt",
        "opt",
        "array",
        "newValue",
        "v",
        "v",
        "opt",
        "array",
        "newValue",
        "opt",
        "opt",
        "val",
        "val",
        "array",
        "newValue",
        "opt",
        "opt",
        "disp",
        "disp",
        "arguments",
        "val",
        "val",
        "priorityChange",
        "array",
        "v",
        "v",
        "v",
        "v",
        "v",
        "v",
        "ret",
        "ret",
        "label",
        "label",
        "label",
        "label",
        "array",
        "child",
        "child",
        "array",
        "val",
        "val",
        "array",
        "child",
        "array",
        "val",
        "v",
        "child",
        "v",
        "child",
        "domClass",
        "child",
        "isSelected",
        "child",
        "isSelected",
        "opts",
        "array",
        "opts",
        "i",
        "i",
        "opt",
        "opt",
        "opt",
        "opts",
        "opts",
        "array",
        "array",
        "opts",
        "i",
        "i",
        "i",
        "i",
        "item",
        "parentInfo",
        "parentInfo",
        "parentInfo",
        "item",
        "item",
        "store",
        "item",
        "item",
        "item",
        "item",
        "item",
        "item",
        "store",
        "item",
        "label",
        "store",
        "item",
        "value",
        "label",
        "item",
        "item",
        "store",
        "store",
        "item",
        "store",
        "item",
        "i",
        "i",
        "item",
        "newOpt",
        "arguments",
        "dom",
        "query",
        "node",
        "node",
        "node",
        "kernel",
        "node",
        "node",
        "node",
        "node",
        "arguments",
        "aspect",
        "lang",
        "store",
        "store",
        "store",
        "store",
        "arguments",
        "h",
        "h",
        "arguments",
        "_FormSelectWidget",
        "define",
        "array",
        "domAttr",
        "domClass",
        "domGeometry",
        "i18n",
        "lang",
        "has",
        "_FormSelectWidget",
        "_HasDropDown",
        "Menu",
        "MenuItem",
        "MenuSeparator",
        "Tooltip",
        "template",
        "Menu",
        "arguments",
        "n",
        "o",
        "o",
        "n",
        "o",
        "domClass",
        "o",
        "n",
        "o",
        "o",
        "n",
        "o",
        "n",
        "o",
        "arguments",
        "lang",
        "val",
        "val",
        "val",
        "val",
        "val",
        "array",
        "child",
        "child",
        "val",
        "child",
        "found",
        "child",
        "found",
        "arguments",
        "mb",
        "mb",
        "domGeometry",
        "mb",
        "mb",
        "_FormSelectWidget",
        "_HasDropDown",
        "template",
        "has",
        "arguments",
        "si",
        "si",
        "_SelectMenu",
        "domClass",
        "option",
        "option",
        "option",
        "MenuSeparator",
        "lang",
        "option",
        "MenuItem",
        "option",
        "option",
        "click",
        "option",
        "item",
        "item",
        "option",
        "option",
        "loadMenuItems",
        "loadMenuItems",
        "arguments",
        "array",
        "child",
        "child",
        "MenuItem",
        "item",
        "arguments",
        "value",
        "arguments",
        "domAttr",
        "value",
        "arguments",
        "value",
        "value",
        "value",
        "options",
        "options",
        "newDisplay",
        "newDisplay",
        "lbl",
        "isFocused",
        "isFocused",
        "isValid",
        "isValid",
        "isValid",
        "message",
        "Tooltip",
        "message",
        "Tooltip",
        "message",
        "isValid",
        "arguments",
        "Tooltip",
        "arguments",
        "i18n",
        "arguments",
        "value",
        "arguments",
        "domClass",
        "loadCallback",
        "loadCallback",
        "arguments",
        "preserveDom",
        "preserveDom",
        "arguments",
        "arguments",
        "Tooltip",
        "arguments",
        "Select",
        "_SelectMenu",
        "Select",
        "define",
        "array",
        "lang",
        "win",
        "dijit",
        "dijit",
        "dijit",
        "node",
        "parent",
        "node",
        "parent",
        "pnode",
        "node",
        "n",
        "pnode",
        "i",
        "n",
        "node",
        "i",
        "ret",
        "i",
        "retR",
        "i",
        "pnode",
        "node",
        "pnode",
        "ret",
        "onode",
        "n",
        "onode",
        "n",
        "n",
        "ret",
        "ret",
        "n",
        "n",
        "n",
        "onode",
        "n",
        "n",
        "retR",
        "retR",
        "n",
        "n",
        "ret",
        "retR",
        "dijit",
        "index",
        "parent",
        "lang",
        "index",
        "index",
        "parent",
        "array",
        "index",
        "i",
        "i",
        "i",
        "node",
        "node",
        "node",
        "i",
        "node",
        "node",
        "dijit",
        "n1",
        "n2",
        "root",
        "root",
        "root",
        "n1",
        "n",
        "n",
        "n",
        "n",
        "root",
        "n",
        "n",
        "getAncestors",
        "n1",
        "getAncestors",
        "n2",
        "n1as",
        "n2as",
        "n1as",
        "i",
        "m",
        "i",
        "n1as",
        "i",
        "n2as",
        "i",
        "com",
        "n1as",
        "i",
        "com",
        "dijit",
        "node",
        "regex",
        "root",
        "root",
        "root",
        "node",
        "node",
        "node",
        "root",
        "node",
        "regex",
        "name",
        "node",
        "node",
        "node",
        "dijit",
        "dijit",
        "node",
        "regex",
        "root",
        "root",
        "root",
        "node",
        "regex",
        "regex",
        "dijit",
        "node",
        "node",
        "root",
        "node",
        "block",
        "regex",
        "name",
        "block",
        "node",
        "blockContainer",
        "name",
        "blockContainer",
        "node",
        "node",
        "node",
        "block",
        "blockContainer",
        "node",
        "dijit",
        "container",
        "node",
        "offset",
        "offset",
        "offsetAtBeginning",
        "node",
        "node",
        "offset",
        "offsetAtBeginning",
        "offsetAtBeginning",
        "atBeginning",
        "cnode",
        "cnode",
        "container",
        "cnode",
        "atBeginning",
        "cnode",
        "cnode",
        "atBeginning",
        "dijit",
        "container",
        "node",
        "offset",
        "offset",
        "node",
        "node",
        "offsetAtEnd",
        "node",
        "node",
        "offset",
        "offsetAtEnd",
        "offsetAtEnd",
        "atEnd",
        "cnode",
        "cnode",
        "container",
        "cnode",
        "atEnd",
        "cnode",
        "cnode",
        "atEnd",
        "dijit",
        "startnode",
        "next",
        "startnode",
        "next",
        "node",
        "node",
        "len",
        "node",
        "node",
        "node",
        "prop",
        "node",
        "len",
        "dijit",
        "win",
        "win",
        "win",
        "win",
        "win",
        "dijit",
        "dijit",
        "ignoreUpdate",
        "dijit",
        "ignoreUpdate",
        "s",
        "s",
        "dijit",
        "r",
        "r",
        "r",
        "dijit",
        "dijit",
        "r",
        "dijit",
        "dijit",
        "r",
        "i",
        "i",
        "_initCurrentRange",
        "r",
        "r",
        "r",
        "firstnode",
        "lastnode",
        "dijit",
        "firstnode",
        "startContainer",
        "dijit",
        "lastnode",
        "endContainer",
        "startContainer",
        "startOffset",
        "endContainer",
        "endOffset",
        "end",
        "atmrange",
        "end",
        "end",
        "atmrange",
        "parentNode",
        "array",
        "parentNode",
        "node",
        "i",
        "node",
        "atmrange",
        "node",
        "atmrange",
        "cmpstr",
        "lastNode",
        "lastNode",
        "startnode",
        "lastNode",
        "calOffset",
        "startnode",
        "parentNode",
        "startOffset",
        "i",
        "i",
        "parentNode",
        "startnode",
        "parentNode",
        "startOffset",
        "parentNode",
        "i",
        "parentNode",
        "startnode",
        "node",
        "calOffset",
        "calOffset",
        "startnode",
        "dijit",
        "startnode",
        "prevnode",
        "startnode",
        "prevnode",
        "startnode",
        "parentNode",
        "dijit",
        "startnode",
        "prevnode",
        "prevnodeobj",
        "prevnodeobj",
        "prevnode",
        "atmrange",
        "prevnode",
        "atmrange",
        "atmrange",
        "parentNode",
        "atmrange",
        "cmpstr",
        "startOffset",
        "atmrange",
        "lenoffset",
        "lastNode",
        "node",
        "startnode",
        "parentNode",
        "startOffset",
        "end",
        "startnode",
        "startOffset",
        "startnode",
        "startnode",
        "nextnode",
        "nextnode",
        "startnode",
        "nextnode",
        "startOffset",
        "startnode",
        "startOffset",
        "container",
        "offset",
        "container",
        "offset",
        "node",
        "container",
        "offset",
        "node",
        "node",
        "container",
        "node",
        "offset",
        "node",
        "node",
        "node",
        "container",
        "node",
        "offset",
        "atmrange",
        "node",
        "node",
        "container",
        "node",
        "parent",
        "node",
        "node",
        "atmrange",
        "parent",
        "tempNode",
        "atmrange",
        "container",
        "atmrange",
        "container",
        "dijit",
        "container",
        "prevnodeobj",
        "len",
        "prevnodeobj",
        "prevnode",
        "atmrange",
        "prevnode",
        "atmrange",
        "prevnode",
        "len",
        "atmrange",
        "container",
        "atmrange",
        "atmrange",
        "atmrange",
        "offset",
        "len",
        "offset",
        "atmrange",
        "offset",
        "offset",
        "atmrange",
        "dijit",
        "tmpary",
        "tmpary",
        "tmpary",
        "tmpary",
        "endOffset",
        "startOffset",
        "tmpary",
        "dijit",
        "endContainer",
        "tmpary",
        "endOffset",
        "tmpary",
        "startContainer",
        "startOffset",
        "endContainer",
        "endOffset",
        "startContainer",
        "startOffset",
        "endContainer",
        "endOffset",
        "collapsed",
        "dijit",
        "startContainer",
        "startOffset",
        "start",
        "collapsed",
        "dijit",
        "endContainer",
        "endOffset",
        "end",
        "start",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "dijit",
        "node",
        "offset",
        "offset",
        "parseInt",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "offset",
        "parseInt",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "node",
        "offset",
        "what",
        "node",
        "offset",
        "ext",
        "dijit",
        "node",
        "node",
        "what",
        "node",
        "index",
        "ext",
        "dijit",
        "r",
        "r",
        "r",
        "s",
        "s",
        "r",
        "dijit",
        "r",
        "r",
        "dijit",
        "define",
        "array",
        "lang",
        "Deferred",
        "results",
        "results",
        "results",
        "results",
        "isPromise",
        "results",
        "lang",
        "results",
        "method",
        "results",
        "method",
        "Deferred",
        "results",
        "results",
        "args",
        "results",
        "QueryResults",
        "array",
        "method",
        "array",
        "args",
        "method",
        "isPromise",
        "result",
        "addIterativeMethod",
        "addIterativeMethod",
        "addIterativeMethod",
        "results",
        "results",
        "Deferred",
        "results",
        "results",
        "results",
        "results",
        "lang",
        "QueryResults",
        "QueryResults",
        "define",
        "on",
        "winUtils",
        "eventType",
        "callbackFuncName",
        "on",
        "on",
        "eventTarget",
        "selector",
        "target",
        "eventTarget",
        "target",
        "eventType",
        "evt",
        "callbackFuncName",
        "evt",
        "first",
        "first",
        "first",
        "first",
        "first",
        "last",
        "last",
        "last",
        "last",
        "last",
        "selectedNode",
        "selectedNode",
        "next",
        "next",
        "next",
        "next",
        "next",
        "next",
        "selectedNode",
        "selectedNode",
        "prev",
        "prev",
        "prev",
        "prev",
        "prev",
        "prev",
        "node",
        "scroll",
        "node",
        "selectedNode",
        "selectedNode",
        "node",
        "node",
        "scroll",
        "winUtils",
        "node",
        "node",
        "node",
        "node",
        "define",
        "dojo",
        "Deferred",
        "darray",
        "dojo",
        "fireOnOneCallback",
        "fireOnOneErrback",
        "consumeErrors",
        "canceller",
        "Deferred",
        "fireOnOneCallback",
        "darray",
        "item",
        "i",
        "item",
        "result",
        "fireOnOneCallback",
        "i",
        "result",
        "addResult",
        "result",
        "error",
        "fireOnOneErrback",
        "error",
        "addResult",
        "error",
        "consumeErrors",
        "error",
        "succeeded",
        "result",
        "resultList",
        "i",
        "succeeded",
        "result",
        "finished",
        "finished",
        "resultList",
        "dojo",
        "Deferred",
        "dojo",
        "deferredList",
        "dojo",
        "deferredList",
        "d",
        "results",
        "darray",
        "results",
        "result",
        "ret",
        "result",
        "ret",
        "d",
        "dojo",
        "define",
        "connect",
        "kernel",
        "lang",
        "dom",
        "lang",
        "exports",
        "connect",
        "exports",
        "exports",
        "id",
        "kernel",
        "exports",
        "dom",
        "id",
        "id",
        "exports",
        "exports",
        "e",
        "e",
        "t",
        "t",
        "t",
        "t",
        "exports",
        "define",
        "array",
        "cldrSupplemental",
        "date",
        "locale",
        "stamp",
        "dom",
        "domClass",
        "lang",
        "has",
        "_WidgetBase",
        "_TemplatedMixin",
        "template",
        "_WidgetBase",
        "_TemplatedMixin",
        "template",
        "value",
        "value",
        "isNaN",
        "value",
        "value",
        "value",
        "isNaN",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "priorityChange",
        "value",
        "value",
        "stamp",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "priorityChange",
        "priorityChange",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "node",
        "text",
        "node",
        "node",
        "node",
        "node",
        "node",
        "text",
        "month",
        "month",
        "month",
        "month",
        "cldrSupplemental",
        "dayOffset",
        "firstDay",
        "dayOffset",
        "month",
        "monthNames",
        "month",
        "array",
        "template",
        "idx",
        "idx",
        "dayOffset",
        "month",
        "i",
        "firstDay",
        "number",
        "daysInPreviousMonth",
        "firstDay",
        "i",
        "adj",
        "clazz",
        "i",
        "firstDay",
        "daysInMonth",
        "number",
        "i",
        "firstDay",
        "daysInMonth",
        "adj",
        "clazz",
        "number",
        "i",
        "firstDay",
        "clazz",
        "adj",
        "date",
        "date",
        "adj",
        "date",
        "number",
        "date",
        "today",
        "clazz",
        "clazz",
        "date",
        "clazz",
        "clazz",
        "template",
        "clazz",
        "clazz",
        "template",
        "template",
        "date",
        "clazz2",
        "clazz",
        "clazz2",
        "clazz",
        "template",
        "clazz",
        "date",
        "dateVal",
        "template",
        "template",
        "dateVal",
        "idx",
        "date",
        "date",
        "date",
        "month",
        "month",
        "month",
        "array",
        "name",
        "d",
        "y",
        "name",
        "d",
        "lang",
        "date",
        "lang",
        "locale",
        "CalendarLite",
        "cldrSupplemental",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "d",
        "dayNames",
        "dayOffset",
        "r",
        "r",
        "r",
        "r",
        "r",
        "r",
        "arguments",
        "dom",
        "dateObj",
        "arguments",
        "lang",
        "nodeProp",
        "part",
        "amount",
        "nodeProp",
        "part",
        "amount",
        "connect",
        "connect",
        "connect",
        "connect",
        "date",
        "forceFocus",
        "oldFocus",
        "date",
        "date",
        "date",
        "oldFocus",
        "date",
        "date",
        "newCell",
        "forceFocus",
        "newCell",
        "oldCell",
        "oldCell",
        "newCell",
        "has",
        "oldCell",
        "oldCell",
        "evt",
        "evt",
        "evt",
        "node",
        "node",
        "node",
        "node",
        "node",
        "domClass",
        "node",
        "node",
        "value",
        "value",
        "value",
        "value",
        "value",
        "dates",
        "selected",
        "cell",
        "domClass",
        "cell",
        "selected",
        "cell",
        "selected",
        "array",
        "lang",
        "mark",
        "array",
        "array",
        "dates",
        "n",
        "n",
        "array",
        "lang",
        "mark",
        "CalendarLite",
        "_WidgetBase",
        "month",
        "month",
        "has",
        "array",
        "monthNames",
        "s",
        "s",
        "spacer",
        "monthNames",
        "month",
        "CalendarLite",
        "require",
        "define",
        "domClass",
        "MenuItem",
        "template",
        "MenuItem",
        "template",
        "domClass",
        "evt",
        "evt",
        "define",
        "HorizontalRuleLabels",
        "HorizontalRuleLabels",
        "pos",
        "pos",
        "define",
        "array",
        "connect",
        "lang",
        "parser",
        "query",
        "_Widget",
        "_TemplatedMixin",
        "_WidgetsInTemplateMixin",
        "_Widget",
        "query",
        "src",
        "query",
        "src",
        "src",
        "array",
        "methods",
        "s",
        "s",
        "s",
        "parser",
        "s",
        "evt",
        "propList",
        "evt",
        "func",
        "connects",
        "s",
        "array",
        "name",
        "lang",
        "name",
        "_Widget",
        "_TemplatedMixin",
        "_WidgetsInTemplateMixin",
        "propList",
        "propList",
        "srcType",
        "src",
        "src",
        "src",
        "src",
        "src",
        "src",
        "srcType",
        "propList",
        "array",
        "connects",
        "s",
        "s",
        "s",
        "parser",
        "s",
        "connect",
        "wc",
        "evt",
        "func",
        "require",
        "define",
        "dom",
        "_WidgetBase",
        "_TemplatedMixin",
        "_Contained",
        "template",
        "_WidgetBase",
        "_TemplatedMixin",
        "_Contained",
        "template",
        "arguments",
        "dom",
        "define",
        "domClass",
        "domStyle",
        "keys",
        "_WidgetBase",
        "_TemplatedMixin",
        "_ComboBoxMenuMixin",
        "_ListMouseMixin",
        "_WidgetBase",
        "_TemplatedMixin",
        "_ListMouseMixin",
        "_ComboBoxMenuMixin",
        "arguments",
        "domClass",
        "domClass",
        "item",
        "item",
        "item",
        "node",
        "domClass",
        "node",
        "node",
        "domClass",
        "node",
        "node",
        "domClass",
        "node",
        "node",
        "domClass",
        "node",
        "up",
        "domStyle",
        "scrollamount",
        "height",
        "up",
        "highlighted_option",
        "highlighted_option",
        "highlighted_option",
        "highlighted_option",
        "scrollamount",
        "newscroll",
        "oldscroll",
        "up",
        "oldscroll",
        "newscroll",
        "evt",
        "evt",
        "keys",
        "keys",
        "keys",
        "keys",
        "require",
        "define",
        "require",
        "array",
        "connect",
        "Deferred",
        "dom",
        "domClass",
        "domGeometry",
        "domStyle",
        "fx",
        "i18n",
        "keys",
        "lang",
        "on",
        "ready",
        "has",
        "winUtils",
        "Moveable",
        "TimedMoveable",
        "focus",
        "manager",
        "_Widget",
        "_TemplatedMixin",
        "_CssStateMixin",
        "_FormMixin",
        "_DialogMixin",
        "DialogUnderlay",
        "ContentPane",
        "template",
        "dijit",
        "_TemplatedMixin",
        "_FormMixin",
        "_DialogMixin",
        "_CssStateMixin",
        "template",
        "manager",
        "val",
        "val",
        "i18n",
        "lang",
        "_nlsResources",
        "arguments",
        "domStyle",
        "arguments",
        "DialogLevelManager",
        "focus",
        "arguments",
        "domGeometry",
        "winUtils",
        "nodePosition",
        "nodePosition",
        "viewport",
        "nodePosition",
        "nodePosition",
        "nodePosition",
        "viewport",
        "nodePosition",
        "nodePosition",
        "has",
        "TimedMoveable",
        "Moveable",
        "node",
        "domClass",
        "node",
        "array",
        "s",
        "s",
        "domStyle",
        "domGeometry",
        "winUtils",
        "viewport",
        "viewport",
        "bb",
        "viewport",
        "bb",
        "viewport",
        "domGeometry",
        "bb",
        "viewport",
        "bb",
        "containerSize",
        "bb",
        "viewport",
        "bb",
        "containerSize",
        "w",
        "h",
        "domStyle",
        "w",
        "h",
        "domClass",
        "winUtils",
        "p",
        "domGeometry",
        "node",
        "viewport",
        "p",
        "p",
        "viewport",
        "bb",
        "viewport",
        "p",
        "p",
        "viewport",
        "bb",
        "domStyle",
        "node",
        "l",
        "t",
        "evt",
        "evt",
        "evt",
        "evt",
        "keys",
        "node",
        "evt",
        "evt",
        "keys",
        "singleFocusItem",
        "focus",
        "evt",
        "node",
        "evt",
        "keys",
        "evt",
        "singleFocusItem",
        "focus",
        "evt",
        "node",
        "node",
        "domClass",
        "node",
        "evt",
        "keys",
        "node",
        "node",
        "evt",
        "keys",
        "evt",
        "has",
        "e",
        "DialogLevelManager",
        "winUtils",
        "on",
        "win",
        "lang",
        "on",
        "connect",
        "lang",
        "domStyle",
        "Deferred",
        "lang",
        "fadeIn",
        "fadeIn",
        "fx",
        "lang",
        "DialogLevelManager",
        "lang",
        "DialogLevelManager",
        "focus",
        "Deferred",
        "lang",
        "fadeOut",
        "lang",
        "fadeOut",
        "fx",
        "lang",
        "DialogLevelManager",
        "h",
        "h",
        "DialogUnderlay",
        "DialogUnderlay",
        "has",
        "h",
        "h",
        "DialogLevelManager",
        "arguments",
        "ContentPane",
        "_DialogBase",
        "Dialog",
        "_DialogBase",
        "Dialog",
        "dialog",
        "underlayAttrs",
        "ds",
        "ds",
        "focus",
        "DialogUnderlay",
        "underlay",
        "underlay",
        "underlay",
        "dijit",
        "DialogUnderlay",
        "DialogUnderlay",
        "underlayAttrs",
        "underlay",
        "dialog",
        "ds",
        "ds",
        "ds",
        "ds",
        "Dialog",
        "ds",
        "underlay",
        "domStyle",
        "DialogUnderlay",
        "zIndex",
        "domStyle",
        "dialog",
        "zIndex",
        "ds",
        "dialog",
        "underlayAttrs",
        "zIndex",
        "dialog",
        "ds",
        "ds",
        "dialog",
        "ds",
        "ds",
        "ds",
        "DialogUnderlay",
        "ds",
        "DialogUnderlay",
        "domStyle",
        "DialogUnderlay",
        "pd",
        "DialogUnderlay",
        "pd",
        "dialog",
        "pd",
        "pd",
        "focus",
        "dom",
        "focus",
        "pd",
        "pd",
        "pd",
        "focus",
        "pd",
        "focus",
        "focus",
        "e",
        "array",
        "array",
        "ds",
        "elem",
        "elem",
        "dialog",
        "idx",
        "ds",
        "idx",
        "dialog",
        "ds",
        "ds",
        "dialog",
        "Dialog",
        "has",
        "ready",
        "require",
        "requires",
        "Dialog",
        "define",
        "array",
        "domGeometry",
        "query",
        "_FormValueWidget",
        "_FormValueWidget",
        "select",
        "select",
        "n",
        "n",
        "n",
        "n",
        "n",
        "select",
        "select",
        "select",
        "oldscroll",
        "query",
        "n",
        "n",
        "array",
        "n",
        "n",
        "values",
        "priorityChange",
        "query",
        "n",
        "n",
        "array",
        "values",
        "n",
        "arguments",
        "onChange",
        "query",
        "n",
        "n",
        "val",
        "n",
        "val",
        "onChange",
        "onChange",
        "size",
        "size",
        "domGeometry",
        "size",
        "arguments",
        "textDir",
        "textDir",
        "textDir",
        "query",
        "option",
        "option",
        "option",
        "option",
        "option",
        "option",
        "option",
        "option",
        "option",
        "define",
        "date",
        "locale",
        "stamp",
        "lang",
        "RangeBoundTextBox",
        "_HasDropDown",
        "template",
        "RangeBoundTextBox",
        "_HasDropDown",
        "template",
        "locale",
        "arguments",
        "val1",
        "val2",
        "val1",
        "val2",
        "isInvalid1",
        "isInvalid2",
        "isInvalid2",
        "date",
        "val1",
        "val2",
        "value",
        "constraints",
        "value",
        "value",
        "constraints",
        "value",
        "constraints",
        "value",
        "constraints",
        "value",
        "val",
        "options",
        "val",
        "val",
        "val",
        "stamp",
        "val",
        "options",
        "lang",
        "date",
        "lang",
        "locale",
        "arguments",
        "constraints",
        "constraints",
        "constraints",
        "stamp",
        "constraints",
        "constraints",
        "fromISO",
        "constraints",
        "constraints",
        "constraints",
        "fromISO",
        "constraints",
        "arguments",
        "value",
        "value",
        "isNaN",
        "value",
        "value",
        "value",
        "value",
        "priorityChange",
        "formattedValue",
        "value",
        "value",
        "value",
        "stamp",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "arguments",
        "value",
        "attr",
        "value",
        "attr",
        "value",
        "arguments",
        "val",
        "val",
        "val",
        "val",
        "callback",
        "lang",
        "lang",
        "PopupProto",
        "value",
        "textBox",
        "value",
        "textBox",
        "textBox",
        "value",
        "value",
        "value",
        "textBox",
        "textBox",
        "textBox",
        "date",
        "textBox",
        "date",
        "textBox",
        "arguments",
        "value",
        "priorityChange",
        "value",
        "priorityChange",
        "value",
        "_DateTimeTextBox",
        "define",
        "domAttr",
        "evt",
        "original",
        "arguments",
        "ret",
        "original",
        "ret",
        "value",
        "priorityChange",
        "value",
        "domAttr",
        "node",
        "value",
        "domAttr",
        "node",
        "value",
        "node",
        "value",
        "value",
        "priorityChange",
        "arguments",
        "node",
        "define",
        "array",
        "date",
        "local",
        "domAttr",
        "domClass",
        "kernel",
        "keys",
        "lang",
        "has",
        "CalendarLite",
        "_Widget",
        "_CssStateMixin",
        "_TemplatedMixin",
        "DropDownButton",
        "CalendarLite",
        "_Widget",
        "_CssStateMixin",
        "value",
        "kernel",
        "value",
        "Calendar",
        "lang",
        "arguments",
        "newMonth",
        "date",
        "date",
        "newMonth",
        "date",
        "date",
        "currentDate",
        "daysInMonth",
        "date",
        "evt",
        "domClass",
        "evt",
        "evt",
        "evt",
        "node",
        "node",
        "domClass",
        "node",
        "node",
        "node",
        "domClass",
        "node",
        "node",
        "evt",
        "evt",
        "evt",
        "domClass",
        "cls",
        "domClass",
        "cls",
        "evt",
        "evt",
        "node",
        "node",
        "domClass",
        "node",
        "domClass",
        "node",
        "node",
        "evt",
        "evt",
        "node",
        "node",
        "domClass",
        "node",
        "evt",
        "evt",
        "keys",
        "increment",
        "keys",
        "interval",
        "increment",
        "keys",
        "increment",
        "keys",
        "interval",
        "keys",
        "increment",
        "keys",
        "interval",
        "evt",
        "evt",
        "keys",
        "newValue",
        "newValue",
        "interval",
        "keys",
        "newValue",
        "newValue",
        "newValue",
        "keys",
        "keys",
        "interval",
        "newValue",
        "newValue",
        "interval",
        "increment",
        "newValue",
        "evt",
        "evt",
        "evt",
        "value",
        "value",
        "Calendar",
        "DropDownButton",
        "arguments",
        "Calendar",
        "month",
        "month",
        "monthNames",
        "has",
        "monthNames",
        "month",
        "Calendar",
        "_Widget",
        "_TemplatedMixin",
        "months",
        "array",
        "months",
        "month",
        "idx",
        "month",
        "idx",
        "month",
        "evt",
        "domAttr",
        "evt",
        "evt",
        "domClass",
        "evt",
        "evt",
        "Calendar",
        "define",
        "dom",
        "lang",
        "has",
        "win",
        "dijit",
        "win",
        "oSel",
        "win",
        "e",
        "oSel",
        "oSel",
        "oSel",
        "oRange",
        "oRange",
        "oRange",
        "oRange",
        "oRange",
        "stype",
        "stype",
        "win",
        "win",
        "win",
        "selection",
        "selection",
        "dijit",
        "win",
        "win",
        "win",
        "selection",
        "selection",
        "i",
        "i",
        "selection",
        "i",
        "selection",
        "i",
        "win",
        "div",
        "frag",
        "html",
        "div",
        "html",
        "dijit",
        "win",
        "dijit",
        "win",
        "win",
        "selection",
        "selection",
        "win",
        "win",
        "dijit",
        "p",
        "p",
        "win",
        "win",
        "selection",
        "selection",
        "node",
        "node",
        "node",
        "node",
        "node",
        "win",
        "r",
        "r",
        "tagName",
        "arguments",
        "tagName",
        "node",
        "arguments",
        "node",
        "tags",
        "node",
        "node",
        "node",
        "i",
        "tags",
        "i",
        "tags",
        "i",
        "_nlc",
        "_tlc",
        "_tlc",
        "node",
        "tags",
        "node",
        "node",
        "tags",
        "node",
        "node",
        "node",
        "beginning",
        "win",
        "win",
        "selection",
        "beginning",
        "selection",
        "selection",
        "selection",
        "beginning",
        "win",
        "beginning",
        "win",
        "win",
        "sel",
        "win",
        "sel",
        "sel",
        "sel",
        "sel",
        "sel",
        "element",
        "nochangefocus",
        "win",
        "element",
        "dom",
        "element",
        "win",
        "win",
        "has",
        "selection",
        "selection",
        "doc",
        "element",
        "element",
        "element",
        "element",
        "element",
        "selection",
        "selection",
        "element",
        "element",
        "element",
        "nochangefocus",
        "e",
        "element",
        "nochangefocus",
        "element",
        "dom",
        "element",
        "element",
        "win",
        "doc",
        "doc",
        "selection",
        "has",
        "selection",
        "selection",
        "element",
        "selection",
        "selection",
        "element",
        "element",
        "tg",
        "tg",
        "win",
        "doc",
        "win",
        "doc",
        "element",
        "nochangefocus",
        "e",
        "element",
        "nochangefocus",
        "node",
        "node",
        "win",
        "win",
        "win",
        "sel",
        "sel",
        "sel",
        "doc",
        "newRange",
        "doc",
        "newRange",
        "node",
        "newRange",
        "e",
        "doc",
        "newRange",
        "node",
        "newRange",
        "node",
        "e2",
        "newRange",
        "newRange",
        "lang",
        "selection",
        "selection",
        "define",
        "lang",
        "Evented",
        "dojo",
        "arrayUtil",
        "connect",
        "baseFx",
        "dom",
        "domStyle",
        "geom",
        "ready",
        "require",
        "dojo",
        "ready",
        "require",
        "requires",
        "dojo",
        "evt",
        "args",
        "evt",
        "evt",
        "args",
        "animations",
        "animations",
        "arrayUtil",
        "a",
        "a",
        "a",
        "a",
        "_chain",
        "Evented",
        "lang",
        "_chain",
        "arguments",
        "connect",
        "connect",
        "connect",
        "connect",
        "delay",
        "gotoStart",
        "gotoStart",
        "connect",
        "connect",
        "arg",
        "arguments",
        "connect",
        "arg",
        "arguments",
        "connect",
        "beforeBegin",
        "connect",
        "onBegin",
        "connect",
        "onPlay",
        "connect",
        "connect",
        "connect",
        "connect",
        "arguments",
        "connect",
        "arg",
        "arguments",
        "connect",
        "e",
        "percent",
        "andPlay",
        "percent",
        "arrayUtil",
        "a",
        "a",
        "offset",
        "a",
        "offset",
        "a",
        "offset",
        "andPlay",
        "gotoEnd",
        "gotoEnd",
        "connect",
        "arg",
        "arguments",
        "connect",
        "e",
        "connect",
        "connect",
        "lang",
        "_chain",
        "_baseObj",
        "coreFx",
        "animations",
        "_chain",
        "animations",
        "animations",
        "animations",
        "arrayUtil",
        "animations",
        "a",
        "a",
        "a",
        "duration",
        "a",
        "duration",
        "duration",
        "connect",
        "a",
        "baseFx",
        "arrayUtil",
        "evt",
        "connect",
        "evt",
        "evt",
        "arguments",
        "lang",
        "_combine",
        "action",
        "args",
        "arrayUtil",
        "a",
        "a",
        "action",
        "a",
        "args",
        "action",
        "args",
        "t",
        "action",
        "t",
        "args",
        "delay",
        "gotoStart",
        "arguments",
        "arguments",
        "arguments",
        "arguments",
        "percent",
        "andPlay",
        "percent",
        "arrayUtil",
        "a",
        "a",
        "a",
        "ms",
        "ms",
        "a",
        "andPlay",
        "arguments",
        "gotoEnd",
        "arguments",
        "arguments",
        "arrayUtil",
        "connect",
        "lang",
        "_combine",
        "_baseObj",
        "coreFx",
        "animations",
        "_combine",
        "animations",
        "coreFx",
        "args",
        "args",
        "dom",
        "args",
        "node",
        "baseFx",
        "lang",
        "o",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "s",
        "domStyle",
        "node",
        "height",
        "node",
        "args",
        "s",
        "s",
        "o",
        "connect",
        "anim",
        "fini",
        "connect",
        "anim",
        "fini",
        "anim",
        "coreFx",
        "args",
        "args",
        "dom",
        "args",
        "node",
        "baseFx",
        "lang",
        "args",
        "connect",
        "anim",
        "o",
        "s",
        "s",
        "s",
        "s",
        "o",
        "s",
        "s",
        "connect",
        "anim",
        "fini",
        "connect",
        "anim",
        "fini",
        "anim",
        "coreFx",
        "args",
        "args",
        "dom",
        "args",
        "n",
        "domStyle",
        "n",
        "cs",
        "top",
        "pos",
        "n",
        "parseInt",
        "cs",
        "left",
        "pos",
        "n",
        "parseInt",
        "cs",
        "pos",
        "pos",
        "geom",
        "n",
        "top",
        "ret",
        "left",
        "ret",
        "n",
        "n",
        "top",
        "n",
        "left",
        "node",
        "init",
        "baseFx",
        "lang",
        "args",
        "args",
        "args",
        "connect",
        "anim",
        "anim",
        "init",
        "anim",
        "coreFx",
        "define",
        "a11y",
        "a11y",
        "elems",
        "elems",
        "elems",
        "elems",
        "define",
        "array",
        "connect",
        "cookie",
        "Deferred",
        "DeferredList",
        "dom",
        "domClass",
        "domGeometry",
        "domStyle",
        "createError",
        "fxUtils",
        "kernel",
        "keys",
        "lang",
        "on",
        "topic",
        "touch",
        "when",
        "focus",
        "registry",
        "manager",
        "_Widget",
        "_TemplatedMixin",
        "_Container",
        "_Contained",
        "_CssStateMixin",
        "treeNodeTemplate",
        "treeTemplate",
        "TreeStoreModel",
        "ForestStoreModel",
        "_dndSelector",
        "Deferred",
        "Deferred",
        "callback",
        "callback",
        "errback",
        "errback",
        "_Widget",
        "_TemplatedMixin",
        "_Container",
        "_Contained",
        "_CssStateMixin",
        "treeNodeTemplate",
        "arguments",
        "indent",
        "indent",
        "domStyle",
        "pixels",
        "domStyle",
        "pixels",
        "array",
        "child",
        "child",
        "indent",
        "indent",
        "item",
        "tree",
        "tree",
        "item",
        "model",
        "item",
        "item",
        "item",
        "item",
        "item",
        "lower",
        "upper",
        "lower",
        "lower",
        "clsName",
        "clsName",
        "upper",
        "item",
        "domClass",
        "nodeName",
        "clsName",
        "oldCls",
        "domStyle",
        "nodeName",
        "upper",
        "item",
        "parent",
        "parent",
        "parent",
        "domClass",
        "domClass",
        "processing",
        "processing",
        "domClass",
        "styles",
        "idx",
        "styles",
        "_a11yStates",
        "idx",
        "domClass",
        "fxUtils",
        "manager",
        "Deferred",
        "wipeIn",
        "wipeIn",
        "domClass",
        "fxUtils",
        "manager",
        "Deferred",
        "wipeOut",
        "wipeOut",
        "items",
        "tree",
        "array",
        "oldChildren",
        "child",
        "_Container",
        "child",
        "array",
        "oldChildren",
        "node",
        "node",
        "node",
        "tree",
        "node",
        "model",
        "node",
        "tree",
        "id",
        "ary",
        "tree",
        "id",
        "array",
        "ary",
        "node",
        "index",
        "ary",
        "index",
        "node",
        "items",
        "items",
        "array",
        "items",
        "item",
        "model",
        "item",
        "tree",
        "id",
        "existingNodes",
        "i",
        "existingNodes",
        "i",
        "existingNodes",
        "i",
        "existingNodes",
        "i",
        "node",
        "existingNodes",
        "i",
        "node",
        "node",
        "node",
        "item",
        "tree",
        "model",
        "item",
        "tree",
        "item",
        "tree",
        "item",
        "tree",
        "tree",
        "tree",
        "tree",
        "existingNodes",
        "existingNodes",
        "node",
        "tree",
        "id",
        "node",
        "node",
        "node",
        "defs",
        "tree",
        "node",
        "array",
        "child",
        "child",
        "tree",
        "fc",
        "fc",
        "tree",
        "fc",
        "tree",
        "DeferredList",
        "defs",
        "node",
        "node",
        "path",
        "node",
        "node",
        "node",
        "path",
        "path",
        "node",
        "arguments",
        "children",
        "array",
        "children",
        "child",
        "child",
        "selected",
        "selected",
        "domClass",
        "selected",
        "selected",
        "selected",
        "textDir",
        "textDir",
        "textDir",
        "textDir",
        "array",
        "childNode",
        "childNode",
        "textDir",
        "_Widget",
        "_TemplatedMixin",
        "treeTemplate",
        "_dndSelector",
        "topicName",
        "message",
        "topic",
        "lang",
        "topicName",
        "message",
        "Deferred",
        "arguments",
        "on",
        "on",
        "touch",
        "evt",
        "registry",
        "evt",
        "on",
        "on",
        "touch",
        "evt",
        "registry",
        "evt",
        "on",
        "on",
        "evt",
        "registry",
        "evt",
        "on",
        "on",
        "evt",
        "registry",
        "evt",
        "on",
        "on",
        "evt",
        "registry",
        "evt",
        "on",
        "on",
        "evt",
        "registry",
        "evt",
        "on",
        "on",
        "evt",
        "registry",
        "evt",
        "arguments",
        "lang",
        "lang",
        "i",
        "i",
        "i",
        "i",
        "i",
        "lang",
        "kernel",
        "modelParams",
        "lang",
        "modelParams",
        "lang",
        "item",
        "onComplete",
        "onError",
        "item",
        "item",
        "onComplete",
        "onError",
        "ForestStoreModel",
        "modelParams",
        "lang",
        "item",
        "item",
        "item",
        "rn",
        "rn",
        "rn",
        "rn",
        "rn",
        "rn",
        "rn",
        "rn",
        "item",
        "identity",
        "identity",
        "rn",
        "identity",
        "rn",
        "rn",
        "rn",
        "lang",
        "lang",
        "err",
        "err",
        "item",
        "item",
        "lang",
        "item",
        "item",
        "item",
        "identity",
        "item",
        "item",
        "items",
        "lang",
        "array",
        "items",
        "item",
        "item",
        "lang",
        "item",
        "item",
        "tree",
        "item",
        "array",
        "identities",
        "id",
        "nodes",
        "nodes",
        "tree",
        "id",
        "nodes",
        "path",
        "path",
        "path",
        "paths",
        "DeferredList",
        "array",
        "paths",
        "path",
        "Deferred",
        "path",
        "array",
        "path",
        "item",
        "lang",
        "item",
        "item",
        "tree",
        "item",
        "path",
        "selectPath",
        "path",
        "tree",
        "d",
        "d",
        "Tree",
        "d",
        "setNodes",
        "path",
        "nodes",
        "path",
        "array",
        "nodes",
        "node",
        "node",
        "nextPath",
        "nextNode",
        "path",
        "tree",
        "nextNode",
        "selectPath",
        "path",
        "nextNode",
        "nextNode",
        "Tree",
        "nextPath",
        "newNodes",
        "tree",
        "array",
        "array",
        "newNodes",
        "x",
        "x",
        "x",
        "x",
        "node",
        "node",
        "nodes",
        "nodes",
        "node",
        "dojo",
        "_this",
        "node",
        "array",
        "node",
        "node",
        "node",
        "array",
        "childBranches",
        "expand",
        "dojo",
        "defs",
        "expand",
        "node",
        "dojo",
        "array",
        "node",
        "node",
        "node",
        "array",
        "childBranches",
        "collapse",
        "dojo",
        "defs",
        "node",
        "node",
        "_this",
        "_this",
        "_this",
        "node",
        "collapse",
        "item",
        "item",
        "item",
        "opened",
        "item",
        "item",
        "opened",
        "treeNode",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "treeNode",
        "c",
        "e",
        "treeNode",
        "e",
        "e",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "key",
        "key",
        "treeNode",
        "treeNode",
        "e",
        "e",
        "message",
        "message",
        "message",
        "message",
        "connect",
        "message",
        "message",
        "message",
        "message",
        "message",
        "message",
        "message",
        "node",
        "node",
        "node",
        "message",
        "message",
        "node",
        "previousSibling",
        "node",
        "previousSibling",
        "node",
        "node",
        "node",
        "node",
        "node",
        "children",
        "children",
        "node",
        "parent",
        "node",
        "parent",
        "node",
        "node",
        "node",
        "message",
        "message",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "message",
        "message",
        "node",
        "node",
        "node",
        "node",
        "parent",
        "parent",
        "parent",
        "parent",
        "node",
        "node",
        "node",
        "node",
        "node",
        "c",
        "c",
        "node",
        "node",
        "node",
        "message",
        "cs",
        "cs",
        "cs",
        "message",
        "cs",
        "cs",
        "message",
        "message",
        "cs",
        "cs",
        "node",
        "node",
        "node",
        "node",
        "node",
        "cs",
        "node",
        "cs",
        "cs",
        "node",
        "node",
        "node",
        "cs",
        "node",
        "node",
        "widget",
        "dom",
        "node",
        "widget",
        "dom",
        "node",
        "widget",
        "nodeWidget",
        "e",
        "e",
        "domElement",
        "nodeWidget",
        "nodeWidget",
        "isExpandoClick",
        "nodeWidget",
        "nodeWidget",
        "nodeWidget",
        "nodeWidget",
        "e",
        "nodeWidget",
        "nodeWidget",
        "e",
        "nodeWidget",
        "e",
        "nodeWidget",
        "e",
        "e",
        "domElement",
        "nodeWidget",
        "domElement",
        "nodeWidget",
        "nodeWidget",
        "isExpandoClick",
        "nodeWidget",
        "nodeWidget",
        "nodeWidget",
        "nodeWidget",
        "e",
        "nodeWidget",
        "nodeWidget",
        "e",
        "nodeWidget",
        "e",
        "message",
        "message",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "returnNode",
        "returnNode",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "ret",
        "ret",
        "node",
        "Deferred",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "Deferred",
        "model",
        "item",
        "items",
        "node",
        "node",
        "items",
        "node",
        "items",
        "err",
        "_this",
        "node",
        "err",
        "node",
        "err",
        "node",
        "lang",
        "node",
        "node",
        "node",
        "node",
        "node",
        "focus",
        "node",
        "node",
        "node",
        "node",
        "node",
        "node",
        "item",
        "model",
        "item",
        "identity",
        "nodes",
        "item",
        "item",
        "array",
        "nodes",
        "node",
        "node",
        "item",
        "label",
        "tooltip",
        "node",
        "item",
        "parent",
        "newChildrenList",
        "model",
        "parent",
        "identity",
        "parentNodes",
        "array",
        "parentNodes",
        "parentNode",
        "parentNode",
        "newChildrenList",
        "item",
        "model",
        "item",
        "identity",
        "nodes",
        "array",
        "nodes",
        "node",
        "node",
        "node",
        "parent",
        "parent",
        "node",
        "node",
        "identity",
        "cookie",
        "oreo",
        "array",
        "oreo",
        "item",
        "item",
        "node",
        "expanded",
        "array",
        "node",
        "item",
        "item",
        "arguments",
        "path",
        "expanded",
        "path",
        "path",
        "id",
        "ary",
        "id",
        "cookie",
        "ary",
        "lang",
        "arguments",
        "changeSize",
        "changeSize",
        "domGeometry",
        "changeSize",
        "domGeometry",
        "lang",
        "p",
        "lang",
        "when",
        "p",
        "oc",
        "oc",
        "parent",
        "parent",
        "node",
        "maxWidth",
        "maxWidth",
        "node",
        "nodes",
        "node",
        "parent",
        "array",
        "parent",
        "collect",
        "collect",
        "maxWidth",
        "maxWidth",
        "domGeometry",
        "array",
        "nodes",
        "node",
        "node",
        "maxWidth",
        "args",
        "TreeNode",
        "args",
        "textDir",
        "textDir",
        "textDir",
        "textDir",
        "textDir",
        "Tree",
        "createError",
        "Tree",
        "TreeNode",
        "Tree",
        "define",
        "array",
        "move",
        "fx",
        "domGeometry",
        "domStyle",
        "keys",
        "lang",
        "has",
        "Moveable",
        "Mover",
        "query",
        "mouse",
        "registry",
        "focus",
        "typematic",
        "Button",
        "_FormValueWidget",
        "_Container",
        "template",
        "Mover",
        "e",
        "widget",
        "abspos",
        "abspos",
        "widget",
        "domGeometry",
        "widget",
        "widget",
        "lang",
        "widget",
        "widget",
        "widget",
        "e",
        "widget",
        "abspos",
        "widget",
        "widget",
        "widget",
        "abspos",
        "widget",
        "pixelValue",
        "pixelValue",
        "abspos",
        "widget",
        "e",
        "Mover",
        "arguments",
        "widget",
        "widget",
        "widget",
        "_FormValueWidget",
        "_Container",
        "template",
        "Infinity",
        "registry",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "e",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "keys",
        "e",
        "e",
        "e",
        "has",
        "focus",
        "e",
        "e",
        "focus",
        "e",
        "domGeometry",
        "e",
        "abspos",
        "abspos",
        "pixelValue",
        "pixelValue",
        "abspos",
        "e",
        "pixelValue",
        "maxPixels",
        "priorityChange",
        "count",
        "count",
        "Infinity",
        "count",
        "maxPixels",
        "count",
        "maxPixels",
        "count",
        "pixelValue",
        "pixelsPerValue",
        "wholeIncrements",
        "count",
        "priorityChange",
        "value",
        "priorityChange",
        "value",
        "value",
        "value",
        "arguments",
        "value",
        "priorityChange",
        "progressBar",
        "parseFloat",
        "progressBar",
        "percent",
        "start",
        "duration",
        "duration",
        "duration",
        "duration",
        "props",
        "start",
        "percent",
        "fx",
        "progressBar",
        "duration",
        "v",
        "remainingBar",
        "_this",
        "parseFloat",
        "v",
        "_this",
        "_this",
        "props",
        "progressBar",
        "percent",
        "remainingBar",
        "percent",
        "signedChange",
        "priorityChange",
        "domStyle",
        "domGeometry",
        "s",
        "count",
        "count",
        "Infinity",
        "count",
        "c",
        "count",
        "count",
        "signedChange",
        "value",
        "value",
        "value",
        "count",
        "value",
        "count",
        "value",
        "value",
        "count",
        "value",
        "priorityChange",
        "val",
        "val",
        "e",
        "e",
        "keys",
        "e",
        "e",
        "keys",
        "evt",
        "evt",
        "evt",
        "array",
        "child",
        "child",
        "child",
        "child",
        "arguments",
        "count",
        "button",
        "e",
        "count",
        "button",
        "e",
        "arguments",
        "query",
        "label",
        "label",
        "label",
        "label",
        "arguments",
        "typematic",
        "typematic",
        "mouse",
        "_SliderMover",
        "Moveable",
        "mover",
        "arguments",
        "HorizontalSlider",
        "_SliderMover",
        "HorizontalSlider",
        "r",
        "r",
        "define",
        "dijit",
        "dijit"
    ],
    "literals": [
        "'dijit/_editor/plugins/FontChoice'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-construct\"",
        "\"dojo/i18n\"",
        "\"dojo/_base/lang\"",
        "\"dojo/store/Memory\"",
        "\"../../registry\"",
        "\"../../_Widget\"",
        "\"../../_TemplatedMixin\"",
        "\"../../_WidgetsInTemplateMixin\"",
        "\"../../form/FilteringSelect\"",
        "\"../_Plugin\"",
        "\"../range\"",
        "\"dojo/i18n!../nls/FontChoice\"",
        "\"dijit._editor.plugins._FontDropDown\"",
        "\"\"",
        "\"<span style='white-space: nowrap' class='dijit dijitReset dijitInline'>\"",
        "\"<label class='dijitLeft dijitInline' for='${selectId}'>${label}</label>\"",
        "\"<input data-dojo-type='dijit.form.FilteringSelect' required='false' \"",
        "\"data-dojo-props='labelType:\\\"html\\\", labelAttr:\\\"label\\\", searchAttr:\\\"name\\\"' \"",
        "\"class='${comboClass}' \"",
        "\"tabIndex='-1' id='${selectId}' data-dojo-attach-point='select' value=''/>\"",
        "\"</span>\"",
        "\"dijit._editor\"",
        "\"FontChoice\"",
        "\"_\"",
        "\"_select\"",
        "\"store\"",
        "\"value\"",
        "\"value\"",
        "\"\"",
        "\"disabled\"",
        "'value'",
        "\"\"",
        "'value'",
        "\"disabled\"",
        "\"dijit._editor.plugins._FontNameDropDown\"",
        "\"fontName\"",
        "\"dijitFontNameCombo\"",
        "\"serif\"",
        "\"sans-serif\"",
        "\"monospace\"",
        "\"cursive\"",
        "\"fantasy\"",
        "\"Arial\"",
        "\"Times New Roman\"",
        "\"Comic Sans MS\"",
        "\"Courier New\"",
        "\"<div style='font-family: \"",
        "\"'>\"",
        "\"</div>\"",
        "\"Arial\"",
        "\"sans-serif\"",
        "\"Helvetica\"",
        "\"sans-serif\"",
        "\"Myriad\"",
        "\"sans-serif\"",
        "\"Times\"",
        "\"serif\"",
        "\"Times New Roman\"",
        "\"serif\"",
        "\"Comic Sans MS\"",
        "\"cursive\"",
        "\"Apple Chancery\"",
        "\"cursive\"",
        "\"Courier\"",
        "\"monospace\"",
        "\"Courier New\"",
        "\"monospace\"",
        "\"Papyrus\"",
        "\"fantasy\"",
        "\"Estrangelo Edessa\"",
        "\"cursive\"",
        "\"Gabriola\"",
        "\"fantasy\"",
        "\"dijit._editor.plugins._FontSizeDropDown\"",
        "\"fontSize\"",
        "\"dijitFontSizeCombo\"",
        "\"<font size=\"",
        "\"'>\"",
        "\"</font>\"",
        "\"px\"",
        "\"dijit._editor.plugins._FormatBlockDropDown\"",
        "\"formatBlock\"",
        "\"dijitFormatBlockCombo\"",
        "\"noFormat\"",
        "\"p\"",
        "\"h1\"",
        "\"h2\"",
        "\"h3\"",
        "\"pre\"",
        "\"value\"",
        "\"noFormat\"",
        "\"noFormat\"",
        "\"<\"",
        "\">\"",
        "\"</\"",
        "\">\"",
        "\"noFormat\"",
        "\"inSelection\"",
        "\"\"",
        "\"\"",
        "\"inSelection\"",
        "\"\"",
        "\"before\"",
        "\"selectElementChildren\"",
        "\"getSelectedHtml\"",
        "\"selectElement\"",
        "\"inserthtml\"",
        "\"\"",
        "\"dijit._editor.plugins.FontChoice\"",
        "\"onChange\"",
        "\"fontName\"",
        "\" \"",
        "\"'\"",
        "\"'\"",
        "\"disabled\"",
        "\"disabled\"",
        "\"\"",
        "\"\"",
        "\"formatBlock\"",
        "\"p\"",
        "\"\"",
        "\"noFormat\"",
        "\"noFormat\"",
        "\"value\"",
        "'value'",
        "\"fontName\"",
        "\"fontSize\"",
        "\"formatBlock\"",
        "'url:dijit/templates/CheckedMenuItem.html'",
        "\"<tr class=\\\"dijitReset dijitMenuItem\\\" data-dojo-attach-point=\\\"focusNode\\\" role=\\\"menuitemcheckbox\\\" tabIndex=\\\"-1\\\" aria-checked=\\\"${checked}\\\">\\n\\t<td class=\\\"dijitReset dijitMenuItemIconCell\\\" role=\\\"presentation\\\">\\n\\t\\t<img src=\\\"${_blankGif}\\\" alt=\\\"\\\" class=\\\"dijitMenuItemIcon dijitCheckedMenuItemIcon\\\" data-dojo-attach-point=\\\"iconNode\\\"/>\\n\\t\\t<span class=\\\"dijitCheckedMenuItemIconChar\\\">&#10003;</span>\\n\\t</td>\\n\\t<td class=\\\"dijitReset dijitMenuItemLabel\\\" colspan=\\\"2\\\" data-dojo-attach-point=\\\"containerNode,labelNode\\\"></td>\\n\\t<td class=\\\"dijitReset dijitMenuItemAccelKey\\\" style=\\\"display: none\\\" data-dojo-attach-point=\\\"accelKeyNode\\\"></td>\\n\\t<td class=\\\"dijitReset dijitMenuArrowCell\\\" role=\\\"presentation\\\">&#160;</td>\\n</tr>\\n\"",
        "'dijit/form/TextBox'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-construct\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"./_FormValueWidget\"",
        "\"./_TextBoxMixin\"",
        "\"dojo/text!./templates/TextBox.html\"",
        "\"../main\"",
        "\"dijit.form.TextBox\"",
        "'<input class=\"dijit dijitReset dijitLeft dijitInputField\" data-dojo-attach-point=\"textbox,focusNode\" autocomplete=\"off\" type=\"${type}\" ${!nameAttrSetting} />'",
        "\"ie\"",
        "\"disabled\"",
        "\"\"",
        "\"dijitTextBox\"",
        "\"input\"",
        "\"hidden\"",
        "\"file\"",
        "\"ie\"",
        "\"INPUT\"",
        "\"placeHolder\"",
        "'_phspan'",
        "'span'",
        "'dijitPlaceHolder dijitInputField'",
        "'after'",
        "\"\"",
        "\"\"",
        "\"none\"",
        "\"::getDisplayedValue() is deprecated. Use get('displayedValue') instead.\"",
        "\"\"",
        "\"2.0\"",
        "'displayedValue'",
        "\"::setDisplayedValue() is deprecated. Use set('displayedValue', ...) instead.\"",
        "\"\"",
        "\"2.0\"",
        "'displayedValue'",
        "\"mozilla\"",
        "\"ie\"",
        "\"character\"",
        "\"character\"",
        "\"character\"",
        "'dojo/currency'",
        "\"./_base/array\"",
        "\"./_base/lang\"",
        "\"./number\"",
        "\"./i18n\"",
        "\"./i18n!./cldr/nls/currency\"",
        "\"./cldr/monetary\"",
        "\"dojo.currency\"",
        "\"currency\"",
        "\"dojo.cldr\"",
        "\"currency\"",
        "\"displayName\"",
        "\"symbol\"",
        "\"group\"",
        "\"decimal\"",
        "\"_\"",
        "'dijit/layout/ScrollingTabController'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/fx\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"dojo/query\"",
        "\"dojo/sniff\"",
        "\"../registry\"",
        "\"dojo/text!./templates/ScrollingTabController.html\"",
        "\"dojo/text!./templates/_ScrollingTabControllerButton.html\"",
        "\"./TabController\"",
        "\"./utils\"",
        "\"../_WidgetsInTemplateMixin\"",
        "\"../Menu\"",
        "\"../MenuItem\"",
        "\"../form/Button\"",
        "\"../_HasDropDown\"",
        "\"dojo/NodeList-dom\"",
        "\"dijit.layout.ScrollingTabController\"",
        "\"dijitTabController dijitScrollingTabController\"",
        "\"\"",
        "\"containerNode\"",
        "\"class\"",
        "\"dijitTabContainer\"",
        "\"\"",
        "\"None\"",
        "\"tabStrip-disabled\"",
        "\"visibility\"",
        "\"\"",
        "\"attrmodified-label, attrmodified-iconclass\"",
        "\"width\"",
        "\"width\"",
        "\"px\"",
        "\"> .tabStripButton\"",
        "\"display\"",
        "\"none\"",
        "\"width\"",
        "\"auto\"",
        "\"display\"",
        "\"\"",
        "\"none\"",
        "\"left\"",
        "\"right\"",
        "\"right\"",
        "\"left\"",
        "\"client\"",
        "\"playing\"",
        "\"ie\"",
        "\"ie\"",
        "\"quirks\"",
        "\"webkit\"",
        "\"width\"",
        "\"width\"",
        "\"ie\"",
        "\"ie\"",
        "\"ie\"",
        "\"quirks\"",
        "\"webkit\"",
        "\"width\"",
        "\"width\"",
        "\"ie\"",
        "\"width\"",
        "\"width\"",
        "\"width\"",
        "\"width\"",
        "\"width\"",
        "\"width\"",
        "\"playing\"",
        "\"tabStripButton\"",
        "\"dijitTabDisabled\"",
        "\"width\"",
        "\"disabled\"",
        "\"disabled\"",
        "\"dijit.layout._ScrollingTabControllerButtonMixin\"",
        "\"dijitTab tabStripButton\"",
        "\"\"",
        "\"dijit.layout._ScrollingTabControllerButton\"",
        "\"dijit.layout._ScrollingTabControllerMenuButton\"",
        "\"\"",
        "\"-1\"",
        "\"_menu\"",
        "\"_stcMi\"",
        "\"aria-owns\"",
        "'url:dijit/form/templates/ComboButton.html'",
        "\"<table class=\\\"dijit dijitReset dijitInline dijitLeft\\\"\\n\\tcellspacing='0' cellpadding='0' role=\\\"presentation\\\"\\n\\t><tbody role=\\\"presentation\\\"><tr role=\\\"presentation\\\"\\n\\t\\t><td class=\\\"dijitReset dijitStretch dijitButtonNode\\\" data-dojo-attach-point=\\\"buttonNode\\\" data-dojo-attach-event=\\\"ondijitclick:_onClick,onkeypress:_onButtonKeyPress\\\"\\n\\t\\t><div id=\\\"${id}_button\\\" class=\\\"dijitReset dijitButtonContents\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"titleNode\\\"\\n\\t\\t\\trole=\\\"button\\\" aria-labelledby=\\\"${id}_label\\\"\\n\\t\\t\\t><div class=\\\"dijitReset dijitInline dijitIcon\\\" data-dojo-attach-point=\\\"iconNode\\\" role=\\\"presentation\\\"></div\\n\\t\\t\\t><div class=\\\"dijitReset dijitInline dijitButtonText\\\" id=\\\"${id}_label\\\" data-dojo-attach-point=\\\"containerNode\\\" role=\\\"presentation\\\"></div\\n\\t\\t></div\\n\\t\\t></td\\n\\t\\t><td id=\\\"${id}_arrow\\\" class='dijitReset dijitRight dijitButtonNode dijitArrowButton'\\n\\t\\t\\tdata-dojo-attach-point=\\\"_popupStateNode,focusNode,_buttonNode\\\"\\n\\t\\t\\tdata-dojo-attach-event=\\\"onkeypress:_onArrowKeyPress\\\"\\n\\t\\t\\ttitle=\\\"${optionsTitle}\\\"\\n\\t\\t\\trole=\\\"button\\\" aria-haspopup=\\\"true\\\"\\n\\t\\t\\t><div class=\\\"dijitReset dijitArrowButtonInner\\\" role=\\\"presentation\\\"></div\\n\\t\\t\\t><div class=\\\"dijitReset dijitArrowButtonChar\\\" role=\\\"presentation\\\">&#9660;</div\\n\\t\\t></td\\n\\t\\t><td style=\\\"display:none !important;\\\"\\n\\t\\t\\t><input ${!nameAttrSetting} type=\\\"${type}\\\" value=\\\"${value}\\\" data-dojo-attach-point=\\\"valueNode\\\" role=\\\"presentation\\\"\\n\\t\\t/></td></tr></tbody\\n></table>\\n\"",
        "'dijit/DialogUnderlay'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/window\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"./BackgroundIframe\"",
        "\"dijit.DialogUnderlay\"",
        "\"<div class='dijitDialogUnderlayWrapper'><div class='dijitDialogUnderlay' data-dojo-attach-point='node'></div></div>\"",
        "\"\"",
        "\"class\"",
        "\"\"",
        "\"id\"",
        "\"_underlay\"",
        "\"dialogId\"",
        "\"dijitDialogUnderlay \"",
        "\"class\"",
        "\"none\"",
        "\"px\"",
        "\"px\"",
        "\"px\"",
        "\"px\"",
        "\"block\"",
        "\"block\"",
        "\"none\"",
        "'dijit/_editor/html'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dijit._editor.html\"",
        "\"&amp;\"",
        "\"&lt;\"",
        "\"&gt;\"",
        "\"&quot;\"",
        "\"&#39;\"",
        "\"\"",
        "\"/\"",
        "\"\"",
        "'<'",
        "\"dom-attributes-explicit\"",
        "\"dom-attributes-specified-flag\"",
        "'_dj'",
        "\"dom-attributes-specified-flag\"",
        "'src'",
        "'href'",
        "'_djrealurl'",
        "'_djrealurl'",
        "\"ie\"",
        "\"style\"",
        "\"HEIGHT:\"",
        "\"height:\"",
        "\"WIDTH:\"",
        "\"width:\"",
        "'>'",
        "\"=\"",
        "'_dj'",
        "'src'",
        "'href'",
        "'_djrealurl'",
        "'_djrealurl'",
        "'style'",
        "'class'",
        "'width'",
        "\"img\"",
        "'height'",
        "\"img\"",
        "' '",
        "'=\"'",
        "\"string\"",
        "'\"'",
        "'br'",
        "'hr'",
        "'img'",
        "'input'",
        "'base'",
        "'meta'",
        "'area'",
        "'basefont'",
        "' />'",
        "'script'",
        "'>'",
        "'</'",
        "'>'",
        "'>'",
        "'</'",
        "'>'",
        "'<!--'",
        "'-->'",
        "\"<!-- Element not recognized - Type: \"",
        "\" Name: \"",
        "\"-->\"",
        "\"\"",
        "\"childNodes\"",
        "\"ie\"",
        "'dijit/_HasDropDown'",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/Deferred\"",
        "\"dojo/_base/event\"",
        "\"dojo/dom\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/has\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"./registry\"",
        "\"./focus\"",
        "\"./popup\"",
        "\"./_FocusMixin\"",
        "\"./Viewport\"",
        "\"dijit._HasDropDown\"",
        "\"below\"",
        "\"above\"",
        "\"MSPointerDown\"",
        "\"pointerdown\"",
        "\"mouseup\"",
        "\"_onDropDownMouseUp\"",
        "\"dijitPopup\"",
        "\"mouseup\"",
        "\"focus\"",
        "\"touch\"",
        "\"touch\"",
        "\"after\"",
        "\"Right\"",
        "\"Left\"",
        "\"before\"",
        "\"Left\"",
        "\"Right\"",
        "\"above\"",
        "\"Up\"",
        "\"below\"",
        "\"Down\"",
        "\"left\"",
        "\"Left\"",
        "\"right\"",
        "\"Right\"",
        "\"Down\"",
        "\"dijit\"",
        "\"ArrowButton\"",
        "\"mousedown\"",
        "\"_onDropDownMouseDown\"",
        "\"click\"",
        "\"_onDropDownClick\"",
        "\"keydown\"",
        "\"_onKey\"",
        "\"keyup\"",
        "\"_onKeyUp\"",
        "\"\"",
        "'input'",
        "'text'",
        "\"focus\"",
        "\"\"",
        "\"hidden\"",
        "\"\"",
        "\"\"",
        "\"auto\"",
        "\"visible\"",
        "\"w\"",
        "\"popupActive\"",
        "\"dijitHasDropDownOpen\"",
        "\"_opened\"",
        "\"popupActive\"",
        "\"true\"",
        "\"dijitHasDropDownOpen\"",
        "\"_opened\"",
        "\"aria-expanded\"",
        "\"true\"",
        "\"aria-owns\"",
        "\"role\"",
        "\"presentation\"",
        "\"aria-labelledby\"",
        "\"aria-labelledby\"",
        "\"aria-expanded\"",
        "\"false\"",
        "'dijit/tree/TreeStoreModel'",
        "\"dojo/_base/array\"",
        "\"dojo/aspect\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/lang\"",
        "\"dijit.tree.TreeStoreModel\"",
        "\"children\"",
        "\"id\"",
        "\"\"",
        "'dojo.data.api.Identity'",
        "\"dijit.tree.TreeStoreModel: store must support dojo.data.Identity\"",
        "'dojo.data.api.Notification'",
        "\"onNew\"",
        "\"onNewItem\"",
        "\"onDelete\"",
        "\"onDeleteItem\"",
        "\"onSet\"",
        "\"onSetItem\"",
        "\"dijit.tree.TreeStoreModel: root query returned \"",
        "\" items, but must return exactly one\"",
        "\"number\"",
        "'dijit/_editor/plugins/EnterKeyHandling'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-construct\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dojo/_base/window\"",
        "\"dojo/window\"",
        "\"../_Plugin\"",
        "\"../RichText\"",
        "\"../range\"",
        "\"../../_base/focus\"",
        "\"dijit._editor.plugins.EnterKeyHandling\"",
        "'BR'",
        "\"blockNodeForEnter\"",
        "'BR'",
        "\"onkeypress\"",
        "\"ie\"",
        "\"ie\"",
        "\"onpaste\"",
        "'character'",
        "'character'",
        "'onKeyPressed'",
        "'onKeyPressed'",
        "'isCollapsed'",
        "'getAncestorElement'",
        "'LI'",
        "'formatblock'",
        "'getAncestorElement'",
        "\"ie\"",
        "'character'",
        "'onKeyPressed: Cannot find the new block node'",
        "\"mozilla\"",
        "'LI'",
        "'UL'",
        "'OL'",
        "'\\xA0'",
        "'&#160;'",
        "'getParentElement'",
        "'LI'",
        "'br'",
        "'br'",
        "'\\xA0'",
        "\"br\"",
        "\"\"",
        "\"webkit\"",
        "'\\xA0'",
        "\"after\"",
        "\"after\"",
        "\"after\"",
        "\"br\"",
        "'\\xA0'",
        "\"after\"",
        "\"after\"",
        "\"after\"",
        "\"collapse\"",
        "\"br\"",
        "'\\xA0'",
        "\"before\"",
        "\"after\"",
        "\"collapse\"",
        "'inserthtml'",
        "'<br>'",
        "'LI'",
        "'LI'",
        "\"mozilla\"",
        "''",
        "\"webkit\"",
        "'formatblock'",
        "'getAncestorElement'",
        "\"\"",
        "\"after\"",
        "\"first\"",
        "\"before\"",
        "\"after\"",
        "\"before\"",
        "\"after\"",
        "\"FONT\"",
        "\"after\"",
        "\"\"",
        "'BR'",
        "\"mozilla\"",
        "\"mozilla\"",
        "\"node\"",
        "\"offset\"",
        "\"getParentOfType\"",
        "'P'",
        "'DIV'",
        "'LI'",
        "'BR'",
        "'dijit/_MenuBase'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/_base/lang\"",
        "\"dojo/mouse\"",
        "\"dojo/on\"",
        "\"dojo/window\"",
        "\"./a11yclick\"",
        "\"./popup\"",
        "\"./registry\"",
        "\"./_Widget\"",
        "\"./_KeyNavContainer\"",
        "\"./_TemplatedMixin\"",
        "\"dijit._MenuBase\"",
        "\"string\"",
        "\"childSelector\"",
        "\"_openPopup\"",
        "\"hovering\"",
        "\"hovering\"",
        "'undefined'",
        "\"keypress\"",
        "\"after\"",
        "\"before\"",
        "\"_cleanUp\"",
        "\"mouseover\"",
        "\"_onPopupHover\"",
        "\"dijitMenuActive\"",
        "\"dijitMenuPassive\"",
        "\"dijitMenuPassive\"",
        "\"dijitMenuActive\"",
        "\"tabIndex\"",
        "'undefined'",
        "'dijit/tree/ForestStoreModel'",
        "\"dijit/tree/ForestStoreModel\"",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/_base/lang\"",
        "\"./TreeStoreModel\"",
        "\"dijit.tree.ForestStoreModel\"",
        "\"$root$\"",
        "\"ROOT\"",
        "\": item \"",
        "\" added to root\"",
        "\": item \"",
        "\" removed from root\"",
        "'dijit/PopupMenuBarItem'",
        "\"dojo/_base/declare\"",
        "\"./PopupMenuItem\"",
        "\"./MenuBarItem\"",
        "\"dijit.PopupMenuBarItem\"",
        "'url:dijit/layout/templates/AccordionButton.html'",
        "\"<div data-dojo-attach-event='onclick:_onTitleClick' class='dijitAccordionTitle' role=\\\"presentation\\\">\\n\\t<div data-dojo-attach-point='titleNode,focusNode' data-dojo-attach-event='onkeypress:_onTitleKeyPress'\\n\\t\\t\\tclass='dijitAccordionTitleFocus' role=\\\"tab\\\" aria-expanded=\\\"false\\\"\\n\\t\\t><span class='dijitInline dijitAccordionArrow' role=\\\"presentation\\\"></span\\n\\t\\t><span class='arrowTextUp' role=\\\"presentation\\\">+</span\\n\\t\\t><span class='arrowTextDown' role=\\\"presentation\\\">-</span\\n\\t\\t><img src=\\\"${_blankGif}\\\" alt=\\\"\\\" class=\\\"dijitIcon\\\" data-dojo-attach-point='iconNode' style=\\\"vertical-align: middle\\\" role=\\\"presentation\\\"/>\\n\\t\\t<span role=\\\"presentation\\\" data-dojo-attach-point='titleTextNode' class='dijitAccordionText'></span>\\n\\t</div>\\n</div>\\n\"",
        "'dijit/TitlePane'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/_base/event\"",
        "\"dojo/fx\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/keys\"",
        "\"./_CssStateMixin\"",
        "\"./_TemplatedMixin\"",
        "\"./layout/ContentPane\"",
        "\"dojo/text!./templates/TitlePane.html\"",
        "\"./_base/manager\"",
        "\"dijit.TitlePane\"",
        "\"\"",
        "\"titleNode\"",
        "\"innerHTML\"",
        "\"0\"",
        "\"dijitTitlePane\"",
        "\"focusNode\"",
        "\"attribute\"",
        "\"title\"",
        "\"dijitTitlePaneTitle\"",
        "\"\"",
        "\"none\"",
        "\"playing\"",
        "\"_wipeIn\"",
        "\"_wipeOut\"",
        "\"\"",
        "\"none\"",
        "\"aria-hidden\"",
        "\"false\"",
        "\"true\"",
        "\"aria-pressed\"",
        "\"true\"",
        "\"false\"",
        "\"open\"",
        "\"role\"",
        "\"button\"",
        "\"heading\"",
        "\"aria-controls\"",
        "\"_pane\"",
        "\"tabIndex\"",
        "\"aria-pressed\"",
        "\"aria-controls\"",
        "\"tabIndex\"",
        "\"aria-pressed\"",
        "\"toggleable\"",
        "\"playing\"",
        "\"playing\"",
        "\"\"",
        "\"dijit\"",
        "\"\"",
        "\"Fixed\"",
        "\"Open\"",
        "\"Closed\"",
        "\"\"",
        "\"-\"",
        "\"+\"",
        "\"dijit.TitlePane.setTitle() is deprecated.  Use set('title', ...) instead.\"",
        "\"\"",
        "\"2.0\"",
        "\"title\"",
        "'dijit/form/_ComboBoxMenuMixin'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/i18n\"",
        "\"dojo/i18n!./nls/ComboBox\"",
        "\"dijit.form._ComboBoxMenuMixin\"",
        "\"dijit.form\"",
        "\"ComboBox\"",
        "\"previousMessage\"",
        "\"nextMessage\"",
        "\"\"",
        "\"&#160;\"",
        "\"\"",
        "\"none\"",
        "\"\"",
        "\"id\"",
        "\"_prev\"",
        "\"item\"",
        "\"id\"",
        "\"\"",
        "\"none\"",
        "\"id\"",
        "\"_next\"",
        "'dijit/form/_SearchMixin'",
        "\"dijit/form/_SearchMixin\"",
        "\"dojo/data/util/filter\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/query\"",
        "\"dojo/sniff\"",
        "\"dojo/string\"",
        "\"dojo/when\"",
        "\"../registry\"",
        "\"dijit.form._SearchMixin\"",
        "\"\"",
        "\"list\"",
        "\"name\"",
        "\"${0}*\"",
        "\"type\"",
        "\"key\"",
        "'x'",
        "'v'",
        "'string'",
        "\"_startSearchFromInput\"",
        "\"\\\\$1\"",
        "' '",
        "'url:dijit/form/templates/DropDownButton.html'",
        "\"<span class=\\\"dijit dijitReset dijitInline\\\"\\n\\t><span class='dijitReset dijitInline dijitButtonNode'\\n\\t\\tdata-dojo-attach-event=\\\"ondijitclick:_onClick\\\" data-dojo-attach-point=\\\"_buttonNode\\\"\\n\\t\\t><span class=\\\"dijitReset dijitStretch dijitButtonContents\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"focusNode,titleNode,_arrowWrapperNode,_popupStateNode\\\"\\n\\t\\t\\trole=\\\"button\\\" aria-haspopup=\\\"true\\\" aria-labelledby=\\\"${id}_label\\\"\\n\\t\\t\\t><span class=\\\"dijitReset dijitInline dijitIcon\\\"\\n\\t\\t\\t\\tdata-dojo-attach-point=\\\"iconNode\\\"\\n\\t\\t\\t></span\\n\\t\\t\\t><span class=\\\"dijitReset dijitInline dijitButtonText\\\"\\n\\t\\t\\t\\tdata-dojo-attach-point=\\\"containerNode\\\"\\n\\t\\t\\t\\tid=\\\"${id}_label\\\"\\n\\t\\t\\t></span\\n\\t\\t\\t><span class=\\\"dijitReset dijitInline dijitArrowButtonInner\\\"></span\\n\\t\\t\\t><span class=\\\"dijitReset dijitInline dijitArrowButtonChar\\\">&#9660;</span\\n\\t\\t></span\\n\\t></span\\n\\t><input ${!nameAttrSetting} type=\\\"${type}\\\" value=\\\"${value}\\\" class=\\\"dijitOffScreen\\\" tabIndex=\\\"-1\\\"\\n\\t\\tdata-dojo-attach-point=\\\"valueNode\\\" role=\\\"presentation\\\"\\n/></span>\\n\"",
        "'dijit/form/ToggleButton'",
        "\"dijit/form/ToggleButton\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/kernel\"",
        "\"./Button\"",
        "\"./_ToggleButtonMixin\"",
        "\"dijit.form.ToggleButton\"",
        "\"dijitToggleButton\"",
        "\"setChecked(\"",
        "\") is deprecated. Use set('checked',\"",
        "\") instead.\"",
        "\"\"",
        "\"2.0\"",
        "'checked'",
        "'dijit/form/NumberSpinner'",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"./_Spinner\"",
        "\"./NumberTextBox\"",
        "\"dijit.form.NumberSpinner\"",
        "\"dijitTextBox dijitSpinner dijitNumberTextBox\"",
        "'value'",
        "'undefined'",
        "\"min\"",
        "\"max\"",
        "\"number\"",
        "'dijit/form/Textarea'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-style\"",
        "\"./_ExpandingTextAreaMixin\"",
        "\"./SimpleTextarea\"",
        "\"dijit.form.Textarea\"",
        "\"dijitTextBox dijitTextArea dijitExpandingTextArea\"",
        "\"\"",
        "'hidden'",
        "'auto'",
        "'border-box'",
        "'border-box'",
        "'border-box'",
        "'border-box'",
        "'dijit/form/DateTextBox'",
        "\"dojo/_base/declare\"",
        "\"../Calendar\"",
        "\"./_DateTimeTextBox\"",
        "\"dijit.form.DateTextBox\"",
        "\"dijitTextBox dijitComboBox dijitDateTextBox\"",
        "\"date\"",
        "\"\"",
        "'dijit/layout/AccordionContainer'",
        "'url:dijit/layout/templates/AccordionButton.html'",
        "\"<div data-dojo-attach-event='onclick:_onTitleClick' class='dijitAccordionTitle' role=\\\"presentation\\\">\\n\\t<div data-dojo-attach-point='titleNode,focusNode' data-dojo-attach-event='onkeypress:_onTitleKeyPress'\\n\\t\\t\\tclass='dijitAccordionTitleFocus' role=\\\"tab\\\" aria-expanded=\\\"false\\\"\\n\\t\\t><span class='dijitInline dijitAccordionArrow' role=\\\"presentation\\\"></span\\n\\t\\t><span class='arrowTextUp' role=\\\"presentation\\\">+</span\\n\\t\\t><span class='arrowTextDown' role=\\\"presentation\\\">-</span\\n\\t\\t><img src=\\\"${_blankGif}\\\" alt=\\\"\\\" class=\\\"dijitIcon\\\" data-dojo-attach-point='iconNode' style=\\\"vertical-align: middle\\\" role=\\\"presentation\\\"/>\\n\\t\\t<span role=\\\"presentation\\\" data-dojo-attach-point='titleTextNode' class='dijitAccordionText'></span>\\n\\t</div>\\n</div>\\n\"",
        "\"dijit/layout/AccordionContainer\"",
        "\"require\"",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/fx\"",
        "\"dojo/dom\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-construct\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dojo/topic\"",
        "\"../focus\"",
        "\"../_base/manager\"",
        "\"dojo/ready\"",
        "\"../_Widget\"",
        "\"../_Container\"",
        "\"../_TemplatedMixin\"",
        "\"../_CssStateMixin\"",
        "\"./StackContainer\"",
        "\"./ContentPane\"",
        "\"dojo/text!./templates/AccordionButton.html\"",
        "\"dijit.layout._AccordionButton\"",
        "\"\"",
        "\"titleTextNode\"",
        "\"innerHTML\"",
        "\"\"",
        "\"titleTextNode\"",
        "\"attribute\"",
        "\"title\"",
        "\"\"",
        "\"iconNode\"",
        "\"class\"",
        "\"dijitAccordionTitle\"",
        "' '",
        "'_'",
        "\"id\"",
        "\"_title\"",
        "\"aria-labelledby\"",
        "\"id\"",
        "\"selected\"",
        "\"aria-expanded\"",
        "\"true\"",
        "\"false\"",
        "\"aria-selected\"",
        "\"true\"",
        "\"false\"",
        "\"tabIndex\"",
        "\"0\"",
        "\"-1\"",
        "\"dijit.layout._AccordionInnerContainer\"",
        "\"dijitAccordionInnerContainer\"",
        "\"<div class='\"",
        "\"' role='presentation'>\"",
        "\"after\"",
        "\"_button\"",
        "\"<div class='dijitAccordionChildWrapper' role='tabpanel' style='display:none'>\"",
        "\"aria-labelledby\"",
        "'title'",
        "\"label\"",
        "'tooltip'",
        "\"title\"",
        "'iconClass'",
        "\"iconClass\"",
        "\"selected\"",
        "\"selected\"",
        "\"dijit.layout.AccordionContainer\"",
        "\"dijitAccordionContainer\"",
        "\"hidden\"",
        "\"role\"",
        "\"tablist\"",
        "\"selected\"",
        "\"_wrapper\"",
        "\"number\"",
        "\"after\"",
        "\"-addChild\"",
        "\"after\"",
        "\"dijitHidden\"",
        "\"dijit.layout._AccordionInnerContainer\"",
        "\"block\"",
        "\"none\"",
        "\"ie\"",
        "\"selected\"",
        "\"selected\"",
        "\"px\"",
        "\"px\"",
        "\"px\"",
        "\"auto\"",
        "\"none\"",
        "\"auto\"",
        "\"dijit-legacy-requires\"",
        "\"dijit/layout/AccordionPane\"",
        "'dijit/form/ComboButton'",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"../focus\"",
        "\"./DropDownButton\"",
        "\"dojo/text!./templates/ComboButton.html\"",
        "\"dijit.form.ComboButton\"",
        "\"\"",
        "\"focusNode\"",
        "\"titleNode\"",
        "\"titleNode\"",
        "\"\"",
        "\"dijitComboButton\"",
        "\"buttonNode\"",
        "\"dijitButtonNode\"",
        "\"titleNode\"",
        "\"dijitButtonContents\"",
        "\"_popupStateNode\"",
        "\"dijitDownArrowButton\"",
        "\"RIGHT_ARROW\"",
        "\"LEFT_ARROW\"",
        "\"LEFT_ARROW\"",
        "\"RIGHT_ARROW\"",
        "\"start\"",
        "'dijit/layout/SplitContainer'",
        "\"dijit/layout/SplitContainer\"",
        "\"dojo/_base/array\"",
        "\"dojo/cookie\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-construct\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"dojo/sniff\"",
        "\"../registry\"",
        "\"../_WidgetBase\"",
        "\"./_LayoutWidget\"",
        "\"dijit.layout.SplitContainer\"",
        "\"dijit.layout.SplitContainer is deprecated\"",
        "\"use BorderContainer with splitter instead\"",
        "'horizontal'",
        "\"dijitSplitContainer\"",
        "\"postMixInProperties\"",
        "'horizontal'",
        "\"mozilla\"",
        "'-moz-scrollbars-none'",
        "\"object\"",
        "'div'",
        "'relative'",
        "'dijitSplitContainerVirtualSizerH'",
        "'dijitSplitContainerVirtualSizerV'",
        "\"absolute\"",
        "\"dijitSplitPane\"",
        "'div'",
        "'dijit_layout_SplitterContainer_Splitter'",
        "'dijitSplitContainerSizerH'",
        "'dijitSplitContainerSizerV'",
        "'div'",
        "'thumb'",
        "\"onmousedown\"",
        "'_onSizerMouseDown'",
        "'px'",
        "'px'",
        "'px'",
        "'px'",
        "\"left\"",
        "\"top\"",
        "'div'",
        "'absolute'",
        "\"100%\"",
        "\"100%\"",
        "\"mousemove\"",
        "\"changeSizing\"",
        "\"mouseup\"",
        "\"endSizing\"",
        "'block'",
        "'none'",
        "\"left\"",
        "\"top\"",
        "\"px\"",
        "\"_\"",
        "\"number\"",
        "'url:dijit/templates/Calendar.html'",
        "\"<table cellspacing=\\\"0\\\" cellpadding=\\\"0\\\" class=\\\"dijitCalendarContainer\\\" role=\\\"grid\\\" aria-labelledby=\\\"${id}_mddb ${id}_year\\\" data-dojo-attach-point=\\\"gridNode\\\">\\n\\t<thead>\\n\\t\\t<tr class=\\\"dijitReset dijitCalendarMonthContainer\\\" valign=\\\"top\\\">\\n\\t\\t\\t<th class='dijitReset dijitCalendarArrow' data-dojo-attach-point=\\\"decrementMonth\\\" scope=\\\"col\\\">\\n\\t\\t\\t\\t<img src=\\\"${_blankGif}\\\" alt=\\\"\\\" class=\\\"dijitCalendarIncrementControl dijitCalendarDecrease\\\" role=\\\"presentation\\\"/>\\n\\t\\t\\t\\t<span data-dojo-attach-point=\\\"decreaseArrowNode\\\" class=\\\"dijitA11ySideArrow\\\">-</span>\\n\\t\\t\\t</th>\\n\\t\\t\\t<th class='dijitReset' colspan=\\\"5\\\" scope=\\\"col\\\">\\n\\t\\t\\t\\t<div data-dojo-attach-point=\\\"monthNode\\\">\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</th>\\n\\t\\t\\t<th class='dijitReset dijitCalendarArrow' scope=\\\"col\\\" data-dojo-attach-point=\\\"incrementMonth\\\">\\n\\t\\t\\t\\t<img src=\\\"${_blankGif}\\\" alt=\\\"\\\" class=\\\"dijitCalendarIncrementControl dijitCalendarIncrease\\\" role=\\\"presentation\\\"/>\\n\\t\\t\\t\\t<span data-dojo-attach-point=\\\"increaseArrowNode\\\" class=\\\"dijitA11ySideArrow\\\">+</span>\\n\\t\\t\\t</th>\\n\\t\\t</tr>\\n\\t\\t<tr role=\\\"row\\\">\\n\\t\\t\\t${!dayCellsHtml}\\n\\t\\t</tr>\\n\\t</thead>\\n\\t<tbody data-dojo-attach-point=\\\"dateRowsNode\\\" data-dojo-attach-event=\\\"onclick: _onDayClick\\\" class=\\\"dijitReset dijitCalendarBodyContainer\\\">\\n\\t\\t\\t${!dateRowsHtml}\\n\\t</tbody>\\n\\t<tfoot class=\\\"dijitReset dijitCalendarYearContainer\\\">\\n\\t\\t<tr>\\n\\t\\t\\t<td class='dijitReset' valign=\\\"top\\\" colspan=\\\"7\\\" role=\\\"presentation\\\">\\n\\t\\t\\t\\t<div class=\\\"dijitCalendarYearLabel\\\">\\n\\t\\t\\t\\t\\t<span data-dojo-attach-point=\\\"previousYearLabelNode\\\" class=\\\"dijitInline dijitCalendarPreviousYear\\\" role=\\\"button\\\"></span>\\n\\t\\t\\t\\t\\t<span data-dojo-attach-point=\\\"currentYearLabelNode\\\" class=\\\"dijitInline dijitCalendarSelectedYear\\\" role=\\\"button\\\" id=\\\"${id}_year\\\"></span>\\n\\t\\t\\t\\t\\t<span data-dojo-attach-point=\\\"nextYearLabelNode\\\" class=\\\"dijitInline dijitCalendarNextYear\\\" role=\\\"button\\\"></span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</td>\\n\\t\\t</tr>\\n\\t</tfoot>\\n</table>\\n\"",
        "'dijit/form/_AutoCompleterMixin'",
        "\"dojo/data/util/filter\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/query\"",
        "\"dojo/regexp\"",
        "\"dojo/sniff\"",
        "\"dojo/string\"",
        "\"./DataList\"",
        "\"../registry\"",
        "\"./_TextBoxMixin\"",
        "\"./_SearchMixin\"",
        "\"dijit.form._AutoCompleterMixin\"",
        "\"first\"",
        "\"\"",
        "\"text\"",
        "\"number\"",
        "\"ie\"",
        "\"character\"",
        "\"character\"",
        "\"EndToEnd\"",
        "\"\"",
        "\"aria-disabled\"",
        "\"true\"",
        "\"false\"",
        "'displayedValue'",
        "\"previousMessage\"",
        "\"nextMessage\"",
        "'toLowerCase'",
        "'substr'",
        "\"_getMenuLabelFromItem\"",
        "\"direction\"",
        "\"aria-expanded\"",
        "\"true\"",
        "\"aria-expanded\"",
        "\"false\"",
        "'displayedValue'",
        "\"previousMessage\"",
        "\"nextMessage\"",
        "\"undefined\"",
        "'displayedValue'",
        "\"aria-activedescendant\"",
        "''",
        "'value'",
        "''",
        "\"item\"",
        "'item'",
        "\"aria-activedescendant\"",
        "\"id\"",
        "\"aria-activedescendant\"",
        "''",
        "\"_popup\"",
        "\"value\"",
        "'label[for=\"'",
        "'\"]'",
        "\"_label\"",
        "\"aria-labelledby\"",
        "\"onSearch\"",
        "\"_openResultList\"",
        "\"none\"",
        "\"text\"",
        "\"html\"",
        "\"html\"",
        "\"i\"",
        "\"\"",
        "\"all\"",
        "\"g\"",
        "\"\"",
        "\"${0}\"",
        "\"^\"",
        "\"\"",
        "\"(\"",
        "\")\"",
        "\"$\"",
        "\"\"",
        "'\\uFFFF$1\\uFFFF'",
        "'<span class=\"dijitComboBoxHighlightMatch\">$1</span>'",
        "\"&amp;\"",
        "\"&lt;\"",
        "\"&gt;\"",
        "\"&quot;\"",
        "\"item\"",
        "''",
        "\"textDir\"",
        "'url:dijit/templates/ColorPalette.html'",
        "\"<div class=\\\"dijitInline dijitColorPalette\\\" role=\\\"grid\\\">\\n\\t<table dojoAttachPoint=\\\"paletteTableNode\\\" class=\\\"dijitPaletteTable\\\" cellSpacing=\\\"0\\\" cellPadding=\\\"0\\\" role=\\\"presentation\\\">\\n\\t\\t<tbody data-dojo-attach-point=\\\"gridNode\\\"></tbody>\\n\\t</table>\\n</div>\\n\"",
        "'url:dijit/layout/templates/_ScrollingTabControllerButton.html'",
        "\"<div data-dojo-attach-event=\\\"onclick:_onClick\\\" class=\\\"dijitTabInnerDiv dijitTabContent dijitButtonContents\\\"  data-dojo-attach-point=\\\"focusNode\\\" role=\\\"button\\\">\\n\\t<img role=\\\"presentation\\\" alt=\\\"\\\" src=\\\"${_blankGif}\\\" class=\\\"dijitTabStripIcon\\\" data-dojo-attach-point=\\\"iconNode\\\"/>\\n\\t<span data-dojo-attach-point=\\\"containerNode,titleNode\\\" class=\\\"dijitButtonText\\\"></span>\\n</div>\"",
        "'dijit/form/MappedTextBox'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-construct\"",
        "\"./ValidationTextBox\"",
        "\"dijit.form.MappedTextBox\"",
        "\"\"",
        "\"\"",
        "'value'",
        "\"string\"",
        "\"\"",
        "\"<input type='hidden'\"",
        "' name=\"'",
        "\"&quot;\"",
        "'\"'",
        "\"\"",
        "\"/>\"",
        "\"after\"",
        "''",
        "'dijit/form/ComboBoxMixin'",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/Deferred\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/_base/lang\"",
        "\"dojo/store/util/QueryResults\"",
        "\"./_AutoCompleterMixin\"",
        "\"./_ComboBoxMenu\"",
        "\"../_HasDropDown\"",
        "\"dojo/text!./templates/DropDownBox.html\"",
        "\"dijit.form.ComboBoxMixin\"",
        "\"dijitTextBox dijitComboBox\"",
        "\"_buttonNode\"",
        "\"dijitDownArrowButton\"",
        "\"hasDownArrow\"",
        "\"\"",
        "\"none\"",
        "\"\"",
        "\"store\"",
        "\".store.getValue(item, attr) is deprecated for builtin store.  Use item.attr directly\"",
        "\"\"",
        "\"2.0\"",
        "\".store.getLabel(item) is deprecated for builtin store.  Use item.label directly\"",
        "\"\"",
        "\"2.0\"",
        "\".store.fetch() is deprecated for builtin store.\"",
        "\"Use store.query()\"",
        "\"2.0\"",
        "\"dojo/data/ObjectStore\"",
        "'dojo/_base/query'",
        "\"../query\"",
        "\"./NodeList\"",
        "'dijit/form/_TextBoxMixin'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"../main\"",
        "\"dijit.form._TextBoxMixin\"",
        "\"\"",
        "\"\"",
        "'displayedValue'",
        "\"string\"",
        "\"number\"",
        "''",
        "\"number\"",
        "\"displayedValue\"",
        "\"displayedValue\"",
        "\"auto\"",
        "\"\"",
        "''",
        "\"string\"",
        "'value'",
        "\"displayedValue\"",
        "'displayedValue'",
        "\"auto\"",
        "\"\"",
        "\"auto\"",
        "'value'",
        "\"displayedValue\"",
        "\"displayedValue\"",
        "\"value\"",
        "\"keydown\"",
        "\"keypress\"",
        "\"string\"",
        "'a'",
        "'z'",
        "'A'",
        "'Z'",
        "'0'",
        "'9'",
        "' '",
        "\"input\"",
        "\"layerX\"",
        "\"layerY\"",
        "\"function\"",
        "\"undefined\"",
        "\"keydown, keypress, paste, cut, input, compositionend\"",
        "''",
        "\"string\"",
        "'value'",
        "\"mouse\"",
        "\"onmouseup\"",
        "''",
        "\"textDir\"",
        "'dijit/form/SimpleTextarea'",
        "\"dijit/form/SimpleTextarea\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/sniff\"",
        "\"./TextBox\"",
        "\"dijit.form.SimpleTextarea\"",
        "\"dijitTextBox dijitTextArea\"",
        "\"3\"",
        "\"20\"",
        "\"<textarea ${!nameAttrSetting} data-dojo-attach-point='focusNode,containerNode,textbox' autocomplete='off'></textarea>\"",
        "\"ie\"",
        "\"dijitTextAreaCols\"",
        "\"\"",
        "''",
        "\"opera\"",
        "\"character\"",
        "''",
        "'url:dijit/layout/templates/_TabButton.html'",
        "\"<div role=\\\"presentation\\\" data-dojo-attach-point=\\\"titleNode,innerDiv,tabContent\\\" class=\\\"dijitTabInner dijitTabContent\\\">\\n\\t<img src=\\\"${_blankGif}\\\" alt=\\\"\\\" class=\\\"dijitIcon dijitTabButtonIcon\\\" data-dojo-attach-point='iconNode'/>\\n\\t<span data-dojo-attach-point='containerNode,focusNode' class='tabLabel'></span>\\n\\t<span class=\\\"dijitInline dijitTabCloseButton dijitTabCloseIcon\\\" data-dojo-attach-point='closeNode'\\n\\t\\t  role=\\\"presentation\\\">\\n\\t\\t<span data-dojo-attach-point='closeText' class='dijitTabCloseText'>[x]</span\\n\\t\\t\\t\\t></span>\\n</div>\\n\"",
        "'dijit/PopupMenuItem'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-style\"",
        "\"dojo/query\"",
        "\"./registry\"",
        "\"./MenuItem\"",
        "\"./hccss\"",
        "\"dijit.PopupMenuItem\"",
        "\"*\"",
        "\"[widgetId]\"",
        "\"none\"",
        "\"visibility\"",
        "\"\"",
        "\"aria-haspopup\"",
        "\"true\"",
        "'dijit/_TimePicker'",
        "\"dojo/_base/array\"",
        "\"dojo/date\"",
        "\"dojo/date/locale\"",
        "\"dojo/date/stamp\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-construct\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dojo/query\"",
        "\"dojo/mouse\"",
        "\"./typematic\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"./form/_FormValueWidget\"",
        "\"dojo/text!./templates/TimePicker.html\"",
        "\"dijit._TimePicker\"",
        "\"dijitTimePicker\"",
        "\"T00:15:00\"",
        "\"T01:00:00\"",
        "\"T05:00:00\"",
        "\"dijit._TimePicker:setValue() is deprecated.  Use set('value', ...) instead.\"",
        "\"\"",
        "\"2.0\"",
        "'value'",
        "\"value\"",
        "\"filterString\"",
        "\"unshift\"",
        "\"push\"",
        "\"\"",
        "''",
        "\"_mouseWheeled\"",
        "\"_onArrowUp\"",
        "\"_onArrowDown\"",
        "\"dijitUpArrowHover\"",
        "\"dijitDownArrowHover\"",
        "\"mouseenter\"",
        "\"mouseover\"",
        "\"time\"",
        "\"div\"",
        "\"Item\"",
        "'div'",
        "\"class\"",
        "\"ItemInner\"",
        "\"Marker\"",
        "\"Tick\"",
        "\"ItemDisabled\"",
        "\"ItemSelected\"",
        "\"Marker\"",
        "\"MarkerSelected\"",
        "\"TickSelected\"",
        "'value'",
        "\"ItemHover\"",
        "\"Marker\"",
        "\"MarkerHover\"",
        "\"TickHover\"",
        "\"Item\"",
        "\"_onArrowUp\"",
        "\"_onArrowDown\"",
        "\"dijitUpArrowActive\"",
        "\"dijitUpArrowActive\"",
        "\"dijitDownArrowActive\"",
        "\"dijitDownArrowActive\"",
        "\".\"",
        "\"ItemSelected\"",
        "'dijit/form/RadioButton'",
        "\"dijit/form/RadioButton\"",
        "\"dojo/_base/declare\"",
        "\"./CheckBox\"",
        "\"./_RadioButtonMixin\"",
        "\"dijit.form.RadioButton\"",
        "\"dijitRadio\"",
        "'url:dijit/form/templates/HorizontalSlider.html'",
        "\"<table class=\\\"dijit dijitReset dijitSlider dijitSliderH\\\" cellspacing=\\\"0\\\" cellpadding=\\\"0\\\" border=\\\"0\\\" rules=\\\"none\\\" data-dojo-attach-event=\\\"onkeypress:_onKeyPress,onkeyup:_onKeyUp\\\"\\n\\trole=\\\"presentation\\\"\\n\\t><tr class=\\\"dijitReset\\\"\\n\\t\\t><td class=\\\"dijitReset\\\" colspan=\\\"2\\\"></td\\n\\t\\t><td data-dojo-attach-point=\\\"topDecoration\\\" class=\\\"dijitReset dijitSliderDecoration dijitSliderDecorationT dijitSliderDecorationH\\\"></td\\n\\t\\t><td class=\\\"dijitReset\\\" colspan=\\\"2\\\"></td\\n\\t></tr\\n\\t><tr class=\\\"dijitReset\\\"\\n\\t\\t><td class=\\\"dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH\\\"\\n\\t\\t\\t><div class=\\\"dijitSliderDecrementIconH\\\" style=\\\"display:none\\\" data-dojo-attach-point=\\\"decrementButton\\\"><span class=\\\"dijitSliderButtonInner\\\">-</span></div\\n\\t\\t></td\\n\\t\\t><td class=\\\"dijitReset\\\"\\n\\t\\t\\t><div class=\\\"dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderLeftBumper\\\" data-dojo-attach-event=\\\"press:_onClkDecBumper\\\"></div\\n\\t\\t></td\\n\\t\\t><td class=\\\"dijitReset\\\"\\n\\t\\t\\t><input data-dojo-attach-point=\\\"valueNode\\\" type=\\\"hidden\\\" ${!nameAttrSetting}\\n\\t\\t\\t/><div class=\\\"dijitReset dijitSliderBarContainerH\\\" role=\\\"presentation\\\" data-dojo-attach-point=\\\"sliderBarContainer\\\"\\n\\t\\t\\t\\t><div role=\\\"presentation\\\" data-dojo-attach-point=\\\"progressBar\\\" class=\\\"dijitSliderBar dijitSliderBarH dijitSliderProgressBar dijitSliderProgressBarH\\\" data-dojo-attach-event=\\\"press:_onBarClick\\\"\\n\\t\\t\\t\\t\\t><div class=\\\"dijitSliderMoveable dijitSliderMoveableH\\\"\\n\\t\\t\\t\\t\\t\\t><div data-dojo-attach-point=\\\"sliderHandle,focusNode\\\" class=\\\"dijitSliderImageHandle dijitSliderImageHandleH\\\" data-dojo-attach-event=\\\"press:_onHandleClick\\\" role=\\\"slider\\\"></div\\n\\t\\t\\t\\t\\t></div\\n\\t\\t\\t\\t></div\\n\\t\\t\\t\\t><div role=\\\"presentation\\\" data-dojo-attach-point=\\\"remainingBar\\\" class=\\\"dijitSliderBar dijitSliderBarH dijitSliderRemainingBar dijitSliderRemainingBarH\\\" data-dojo-attach-event=\\\"press:_onBarClick\\\"></div\\n\\t\\t\\t></div\\n\\t\\t></td\\n\\t\\t><td class=\\\"dijitReset\\\"\\n\\t\\t\\t><div class=\\\"dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderRightBumper\\\" data-dojo-attach-event=\\\"press:_onClkIncBumper\\\"></div\\n\\t\\t></td\\n\\t\\t><td class=\\\"dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH\\\"\\n\\t\\t\\t><div class=\\\"dijitSliderIncrementIconH\\\" style=\\\"display:none\\\" data-dojo-attach-point=\\\"incrementButton\\\"><span class=\\\"dijitSliderButtonInner\\\">+</span></div\\n\\t\\t></td\\n\\t></tr\\n\\t><tr class=\\\"dijitReset\\\"\\n\\t\\t><td class=\\\"dijitReset\\\" colspan=\\\"2\\\"></td\\n\\t\\t><td data-dojo-attach-point=\\\"containerNode,bottomDecoration\\\" class=\\\"dijitReset dijitSliderDecoration dijitSliderDecorationB dijitSliderDecorationH\\\"></td\\n\\t\\t><td class=\\\"dijitReset\\\" colspan=\\\"2\\\"></td\\n\\t></tr\\n></table>\\n\"",
        "'url:dijit/templates/TimePicker.html'",
        "\"<div id=\\\"widget_${id}\\\" class=\\\"dijitMenu\\\"\\n    ><div data-dojo-attach-point=\\\"upArrow\\\" class=\\\"dijitButtonNode dijitUpArrowButton\\\" data-dojo-attach-event=\\\"onmouseenter:_buttonMouse,onmouseleave:_buttonMouse\\\"\\n\\t\\t><div class=\\\"dijitReset dijitInline dijitArrowButtonInner\\\" role=\\\"presentation\\\">&#160;</div\\n\\t\\t><div class=\\\"dijitArrowButtonChar\\\">&#9650;</div></div\\n    ><div data-dojo-attach-point=\\\"timeMenu,focusNode\\\" data-dojo-attach-event=\\\"onclick:_onOptionSelected,onmouseover,onmouseout\\\"></div\\n    ><div data-dojo-attach-point=\\\"downArrow\\\" class=\\\"dijitButtonNode dijitDownArrowButton\\\" data-dojo-attach-event=\\\"onmouseenter:_buttonMouse,onmouseleave:_buttonMouse\\\"\\n\\t\\t><div class=\\\"dijitReset dijitInline dijitArrowButtonInner\\\" role=\\\"presentation\\\">&#160;</div\\n\\t\\t><div class=\\\"dijitArrowButtonChar\\\">&#9660;</div></div\\n></div>\\n\"",
        "'dijit/InlineEditBox'",
        "\"require\"",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-construct\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/event\"",
        "\"dojo/i18n\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dojo/when\"",
        "\"./focus\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"./_WidgetsInTemplateMixin\"",
        "\"./_Container\"",
        "\"./form/Button\"",
        "\"./form/_TextBoxMixin\"",
        "\"./form/TextBox\"",
        "\"dojo/text!./templates/InlineEditBox.html\"",
        "\"dojo/i18n!./nls/common\"",
        "\"dijit._InlineEditor\"",
        "\"dijit\"",
        "\"common\"",
        "\"buttonSave\"",
        "\"buttonCancel\"",
        "\"string\"",
        "\"line-height:\"",
        "\";\"",
        "\"Weight\"",
        "\"Family\"",
        "\"Size\"",
        "\"Style\"",
        "\"font\"",
        "\"font\"",
        "\"font-\"",
        "\":\"",
        "\"font\"",
        "\";\"",
        "\"marginTop\"",
        "\"marginBottom\"",
        "\"marginLeft\"",
        "\"marginRight\"",
        "\"position\"",
        "\"left\"",
        "\"top\"",
        "\"right\"",
        "\"bottom\"",
        "\"float\"",
        "\"clear\"",
        "\"display\"",
        "\"100%\"",
        "\"width:100%;\"",
        "\"block\"",
        "\"width:\"",
        "\"px\"",
        "\"\"",
        "\";\"",
        "\"onChange\"",
        "\"_onChange\"",
        "\"onKeyPress\"",
        "\"_onKeyPress\"",
        "\"intermediateChanges\"",
        "\"intermediateChanges\"",
        "\"onChange\"",
        "\"_onIntermediateChange\"",
        "\"disabled\"",
        "\"disabled\"",
        "\"displayedValue\"",
        "\"_getDisplayedValueAttr\"",
        "\"displayedValue\"",
        "\"value\"",
        "\"INPUT\"",
        "\"INPUT\"",
        "\"dijit.InlineEditBox\"",
        "\"\"",
        "\"\"",
        "\"100%\"",
        "\"\"",
        "\"ie\"",
        "\"<span style='font-family: wingdings; text-decoration: underline;'>&#160;&#160;&#160;&#160;&#x270d;&#160;&#160;&#160;&#160;</span>\"",
        "\"<span style='text-decoration: underline;'>&#160;&#160;&#160;&#160;&#x270d;&#160;&#160;&#160;&#160;</span>\"",
        "\"_onClick\"",
        "\"_onMouseOver\"",
        "\"_onMouseOut\"",
        "\"_onMouseOver\"",
        "\"_onMouseOut\"",
        "\"role\"",
        "\"button\"",
        "\"tabIndex\"",
        "\"tabIndex\"",
        "\"value\"",
        "\"\"",
        "'dijitInlineEditBoxDisplayMode'",
        "\"dijit.InlineEditBox.setDisabled() is deprecated.  Use set('disabled', bool) instead.\"",
        "\"\"",
        "\"2.0\"",
        "'disabled'",
        "\"aria-disabled\"",
        "\"true\"",
        "\"false\"",
        "\"tabIndex\"",
        "\"tabIndex\"",
        "\"dijitInlineEditBoxDisplayModeDisabled\"",
        "\"disabled\"",
        "\"dijitInlineEditBoxDisplayModeHover\"",
        "\"dijitInlineEditBoxDisplayModeHover\"",
        "\"edit\"",
        "'editing'",
        "\"tabIndex\"",
        "\"0\"",
        "\"span\"",
        "\"before\"",
        "\"string\"",
        "\"save\"",
        "\"cancel\"",
        "\"dijitOffScreen\"",
        "\"dijitOffScreen\"",
        "\"visible\"",
        "\"tabIndex\"",
        "\"-1\"",
        "\"displayedValue\"",
        "\"_setDisplayedValueAttr\"",
        "\"displayedValue\"",
        "\"value\"",
        "\"disabled\"",
        "\"intermediateChanges\"",
        "\"hidden\"",
        "\"dijitOffScreen\"",
        "\"dijitOffScreen\"",
        "\"tabIndex\"",
        "'editing'",
        "'value'",
        "\"dijit.InlineEditBox.setValue() is deprecated.  Use set('value', ...) instead.\"",
        "\"\"",
        "\"2.0\"",
        "\"value\"",
        "\"&amp;\"",
        "\"&lt;\"",
        "\"&gt;\"",
        "\"&quot;\"",
        "\"<br>\"",
        "\"value\"",
        "\"auto\"",
        "\"dijit.InlineEditBox.getValue() is deprecated.  Use get('value') instead.\"",
        "\"\"",
        "\"2.0\"",
        "\"value\"",
        "'editing'",
        "\"onCancel\"",
        "\"textDir\"",
        "\"rtl\"",
        "\"right\"",
        "\"left\"",
        "'dojo/dnd/autoscroll'",
        "\"../_base/lang\"",
        "\"../sniff\"",
        "\"../_base/window\"",
        "\"../dom-geometry\"",
        "\"../dom-style\"",
        "\"../window\"",
        "\"dojo.dnd.autoscroll\"",
        "\"div\"",
        "\"p\"",
        "\"td\"",
        "\"auto\"",
        "\"scroll\"",
        "\"webkit\"",
        "\"opera\"",
        "\"webkit\"",
        "\"opera\"",
        "'dijit/form/_RadioButtonMixin'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/lang\"",
        "\"dojo/query\"",
        "\"../registry\"",
        "\"dijit.form._RadioButtonMixin\"",
        "\"radio\"",
        "\"input[type=radio]\"",
        "'checked'",
        "\"on\"",
        "'checked'",
        "'url:dijit/templates/TreeNode.html'",
        "\"<div class=\\\"dijitTreeNode\\\" role=\\\"presentation\\\"\\n\\t><div data-dojo-attach-point=\\\"rowNode\\\" class=\\\"dijitTreeRow dijitInline\\\" role=\\\"presentation\\\"\\n\\t\\t><div data-dojo-attach-point=\\\"indentNode\\\" class=\\\"dijitInline\\\"></div\\n\\t\\t><img src=\\\"${_blankGif}\\\" alt=\\\"\\\" data-dojo-attach-point=\\\"expandoNode\\\" class=\\\"dijitTreeExpando\\\" role=\\\"presentation\\\"\\n\\t\\t/><span data-dojo-attach-point=\\\"expandoNodeText\\\" class=\\\"dijitExpandoText\\\" role=\\\"presentation\\\"\\n\\t\\t></span\\n\\t\\t><span data-dojo-attach-point=\\\"contentNode\\\"\\n\\t\\t\\tclass=\\\"dijitTreeContent\\\" role=\\\"presentation\\\">\\n\\t\\t\\t<img src=\\\"${_blankGif}\\\" alt=\\\"\\\" data-dojo-attach-point=\\\"iconNode\\\" class=\\\"dijitIcon dijitTreeIcon\\\" role=\\\"presentation\\\"\\n\\t\\t\\t/><span data-dojo-attach-point=\\\"labelNode\\\" class=\\\"dijitTreeLabel\\\" role=\\\"treeitem\\\"\\n\\t\\t\\t\\t\\ttabindex=\\\"-1\\\" aria-selected=\\\"false\\\" id=\\\"${id}_label\\\"></span>\\n\\t\\t</span\\n\\t></div>\\n\\t<div data-dojo-attach-point=\\\"containerNode\\\" class=\\\"dijitTreeContainer\\\" role=\\\"presentation\\\"\\n\\t\\t style=\\\"display: none;\\\" aria-labelledby=\\\"${id}_label\\\"></div>\\n</div>\\n\"",
        "'dojo/dnd/TimedMoveable'",
        "\"../_base/declare\"",
        "\"./Moveable\"",
        "\"dojo.dnd.TimedMoveable\"",
        "\"number\"",
        "'dijit/layout/LinkPane'",
        "\"./ContentPane\"",
        "\"../_TemplatedMixin\"",
        "\"dojo/_base/declare\"",
        "\"dijit.layout.LinkPane\"",
        "'<div class=\"dijitLinkPane\" data-dojo-attach-point=\"containerNode\"></div>'",
        "'dijit/form/_ListMouseMixin'",
        "\"dojo/_base/declare\"",
        "\"dojo/mouse\"",
        "\"dojo/on\"",
        "\"dojo/touch\"",
        "\"./_ListBase\"",
        "\"dijit.form._ListMouseMixin\"",
        "\"click\"",
        "\"_onClick\"",
        "\"mousedown\"",
        "\"_onMouseDown\"",
        "\"mouseup\"",
        "\"_onMouseUp\"",
        "\"mouseover\"",
        "\"_onMouseOver\"",
        "\"mouseout\"",
        "\"_onMouseOut\"",
        "'url:dijit/templates/Tree.html'",
        "\"<div class=\\\"dijitTree dijitTreeContainer\\\" role=\\\"tree\\\">\\n\\t<div class=\\\"dijitInline dijitTreeIndent\\\" style=\\\"position: absolute; top: -9999px\\\" data-dojo-attach-point=\\\"indentDetector\\\"></div>\\n</div>\\n\"",
        "'dojo/cldr/monetary'",
        "\"../_base/kernel\"",
        "\"../_base/lang\"",
        "\"dojo.cldr.monetary\"",
        "\"undefined\"",
        "\"undefined\"",
        "'dojo/cookie'",
        "\"./_base/kernel\"",
        "\"./regexp\"",
        "\"(?:^|; )\"",
        "\"=([^;]*)\"",
        "\"number\"",
        "\"=\"",
        "\"; \"",
        "\"=\"",
        "\"cookieEnabled\"",
        "\"__djCookieTest__\"",
        "\"CookiesAllowed\"",
        "\"__djCookieTest__\"",
        "\"CookiesAllowed\"",
        "\"__djCookieTest__\"",
        "\"\"",
        "'url:dijit/form/templates/DropDownBox.html'",
        "\"<div class=\\\"dijit dijitReset dijitInline dijitLeft\\\"\\n\\tid=\\\"widget_${id}\\\"\\n\\trole=\\\"combobox\\\"\\n\\taria-haspopup=\\\"true\\\"\\n\\tdata-dojo-attach-point=\\\"_popupStateNode\\\"\\n\\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\\n\\t\\tdata-dojo-attach-point=\\\"_buttonNode\\\" role=\\\"presentation\\\"\\n\\t\\t><input class=\\\"dijitReset dijitInputField dijitArrowButtonInner\\\" value=\\\"&#9660; \\\" type=\\\"text\\\" tabIndex=\\\"-1\\\" readonly=\\\"readonly\\\" role=\\\"button presentation\\\" aria-hidden=\\\"true\\\"\\n\\t\\t\\t${_buttonInputDisabled}\\n\\t/></div\\n\\t><div class='dijitReset dijitValidationContainer'\\n\\t\\t><input class=\\\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\\\" value=\\\"&#935; \\\" type=\\\"text\\\" tabIndex=\\\"-1\\\" readonly=\\\"readonly\\\" role=\\\"presentation\\\"\\n\\t/></div\\n\\t><div class=\\\"dijitReset dijitInputField dijitInputContainer\\\"\\n\\t\\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\\\"text\\\" autocomplete=\\\"off\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"textbox,focusNode\\\" role=\\\"textbox\\\"\\n\\t/></div\\n></div>\\n\"",
        "'dijit/ProgressBar'",
        "\"require\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/_base/lang\"",
        "\"dojo/number\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"dojo/text!./templates/ProgressBar.html\"",
        "\"dijit.ProgressBar\"",
        "\"0\"",
        "\"\"",
        "\"\"",
        "''",
        "\"./themes/a11y/indeterminate_progress.gif\"",
        "\"value\"",
        "\"src\"",
        "\"aria-valuenow\"",
        "\"%\"",
        "\"aria-valuenow\"",
        "\"aria-labelledby\"",
        "\"aria-valuemin\"",
        "\"aria-valuemax\"",
        "\"dijitProgressBarIndeterminate\"",
        "\"%\"",
        "\"value\"",
        "\"label\"",
        "\"&#160;\"",
        "\"percent\"",
        "'dijit/form/NumberTextBox'",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/lang\"",
        "\"dojo/number\"",
        "\"./RangeBoundTextBox\"",
        "\"dijit.form.NumberTextBoxMixin\"",
        "'#.######'",
        "\"type\"",
        "\"text\"",
        "\"number\"",
        "\"number\"",
        "\"number\"",
        "'value'",
        "'value'",
        "\"number\"",
        "\"number\"",
        "\"\"",
        "\"rangeCheck\"",
        "''",
        "\"number\"",
        "''",
        "\"get\"",
        "'value'",
        "\"number\"",
        "''",
        "\"rangeCheck\"",
        "''",
        "''",
        "\"^\"",
        "\"$\"",
        "'value'",
        "\"dijit.form.NumberTextBox\"",
        "\"dijitTextBox dijitNumberTextBox\"",
        "'dijit/form/TimeTextBox'",
        "\"dijit/form/TimeTextBox\"",
        "\"dojo/_base/declare\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"../_TimePicker\"",
        "\"./_DateTimeTextBox\"",
        "\"dijit.form.TimeTextBox\"",
        "\"dijitTextBox dijitComboBox dijitTimeTextBox\"",
        "\"time\"",
        "\"\"",
        "'displayedValue'",
        "\"\"",
        "'dijit/ColorPalette'",
        "\"require\"",
        "\"dojo/text!./templates/ColorPalette.html\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"./_PaletteMixin\"",
        "\"./hccss\"",
        "\"dojo/i18n\"",
        "\"dojo/_base/Color\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-construct\"",
        "\"dojo/string\"",
        "\"dojo/i18n!dojo/nls/colors\"",
        "\"dojo/colors\"",
        "\"dijit.ColorPalette\"",
        "\"7x10\"",
        "\"7x10\"",
        "\"white\"",
        "\"seashell\"",
        "\"cornsilk\"",
        "\"lemonchiffon\"",
        "\"lightyellow\"",
        "\"palegreen\"",
        "\"paleturquoise\"",
        "\"lightcyan\"",
        "\"lavender\"",
        "\"plum\"",
        "\"lightgray\"",
        "\"pink\"",
        "\"bisque\"",
        "\"moccasin\"",
        "\"khaki\"",
        "\"lightgreen\"",
        "\"lightseagreen\"",
        "\"lightskyblue\"",
        "\"cornflowerblue\"",
        "\"violet\"",
        "\"silver\"",
        "\"lightcoral\"",
        "\"sandybrown\"",
        "\"orange\"",
        "\"palegoldenrod\"",
        "\"chartreuse\"",
        "\"mediumturquoise\"",
        "\"skyblue\"",
        "\"mediumslateblue\"",
        "\"orchid\"",
        "\"gray\"",
        "\"red\"",
        "\"orangered\"",
        "\"darkorange\"",
        "\"yellow\"",
        "\"limegreen\"",
        "\"darkseagreen\"",
        "\"royalblue\"",
        "\"slateblue\"",
        "\"mediumorchid\"",
        "\"dimgray\"",
        "\"crimson\"",
        "\"chocolate\"",
        "\"coral\"",
        "\"gold\"",
        "\"forestgreen\"",
        "\"seagreen\"",
        "\"blue\"",
        "\"blueviolet\"",
        "\"darkorchid\"",
        "\"darkslategray\"",
        "\"firebrick\"",
        "\"saddlebrown\"",
        "\"sienna\"",
        "\"olive\"",
        "\"green\"",
        "\"darkcyan\"",
        "\"mediumblue\"",
        "\"darkslateblue\"",
        "\"darkmagenta\"",
        "\"black\"",
        "\"darkred\"",
        "\"maroon\"",
        "\"brown\"",
        "\"darkolivegreen\"",
        "\"darkgreen\"",
        "\"midnightblue\"",
        "\"navy\"",
        "\"indigo\"",
        "\"purple\"",
        "\"3x4\"",
        "\"white\"",
        "\"lime\"",
        "\"green\"",
        "\"blue\"",
        "\"silver\"",
        "\"yellow\"",
        "\"fuchsia\"",
        "\"navy\"",
        "\"gray\"",
        "\"red\"",
        "\"purple\"",
        "\"black\"",
        "\"dijitColorPalette\"",
        "\"dojo\"",
        "\"colors\"",
        "\"dijit._Color\"",
        "\"<span class='dijitInline dijitPaletteImg'>\"",
        "\"<img src='${blankGif}' alt='${alt}' title='${title}' class='dijitColorPaletteSwatch' style='background-color: ${color}'/>\"",
        "\"</span>\"",
        "\"<span class='dijitInline dijitPaletteImg' style='position: relative; overflow: hidden; height: 12px; width: 14px;'>\"",
        "\"<img src='${image}' alt='${alt}' title='${title}' style='position: absolute; left: ${left}px; top: ${top}px; ${size}'/>\"",
        "\"</span>\"",
        "\"7x10\"",
        "\"./themes/a11y/colors7x10.png\"",
        "\"3x4\"",
        "\"./themes/a11y/colors3x4.png\"",
        "\"highcontrast\"",
        "\"7x10\"",
        "\"height: 145px; width: 206px\"",
        "\"height: 64px; width: 86px\"",
        "'url:dijit/form/templates/Button.html'",
        "\"<span class=\\\"dijit dijitReset dijitInline\\\" role=\\\"presentation\\\"\\n\\t><span class=\\\"dijitReset dijitInline dijitButtonNode\\\"\\n\\t\\tdata-dojo-attach-event=\\\"ondijitclick:_onClick\\\" role=\\\"presentation\\\"\\n\\t\\t><span class=\\\"dijitReset dijitStretch dijitButtonContents\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"titleNode,focusNode\\\"\\n\\t\\t\\trole=\\\"button\\\" aria-labelledby=\\\"${id}_label\\\"\\n\\t\\t\\t><span class=\\\"dijitReset dijitInline dijitIcon\\\" data-dojo-attach-point=\\\"iconNode\\\"></span\\n\\t\\t\\t><span class=\\\"dijitReset dijitToggleButtonIconChar\\\">&#x25CF;</span\\n\\t\\t\\t><span class=\\\"dijitReset dijitInline dijitButtonText\\\"\\n\\t\\t\\t\\tid=\\\"${id}_label\\\"\\n\\t\\t\\t\\tdata-dojo-attach-point=\\\"containerNode\\\"\\n\\t\\t\\t></span\\n\\t\\t></span\\n\\t></span\\n\\t><input ${!nameAttrSetting} type=\\\"${type}\\\" value=\\\"${value}\\\" class=\\\"dijitOffScreen\\\"\\n\\t\\ttabIndex=\\\"-1\\\" role=\\\"presentation\\\" data-dojo-attach-point=\\\"valueNode\\\"\\n/></span>\\n\"",
        "'dijit/form/CurrencyTextBox'",
        "\"dojo/currency\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/lang\"",
        "\"./NumberTextBox\"",
        "\"dijit.form.CurrencyTextBox\"",
        "\"\"",
        "\"dijitTextBox dijitCurrencyTextBox\"",
        "'('",
        "'|'",
        "''",
        "')'",
        "\"inherited\"",
        "'url:dijit/templates/MenuItem.html'",
        "\"<tr class=\\\"dijitReset dijitMenuItem\\\" data-dojo-attach-point=\\\"focusNode\\\" role=\\\"menuitem\\\" tabIndex=\\\"-1\\\">\\n\\t<td class=\\\"dijitReset dijitMenuItemIconCell\\\" role=\\\"presentation\\\">\\n\\t\\t<img src=\\\"${_blankGif}\\\" alt=\\\"\\\" class=\\\"dijitIcon dijitMenuItemIcon\\\" data-dojo-attach-point=\\\"iconNode\\\"/>\\n\\t</td>\\n\\t<td class=\\\"dijitReset dijitMenuItemLabel\\\" colspan=\\\"2\\\" data-dojo-attach-point=\\\"containerNode\\\"></td>\\n\\t<td class=\\\"dijitReset dijitMenuItemAccelKey\\\" style=\\\"display: none\\\" data-dojo-attach-point=\\\"accelKeyNode\\\"></td>\\n\\t<td class=\\\"dijitReset dijitMenuArrowCell\\\" role=\\\"presentation\\\">\\n\\t\\t<div data-dojo-attach-point=\\\"arrowWrapper\\\" style=\\\"visibility: hidden\\\">\\n\\t\\t\\t<img src=\\\"${_blankGif}\\\" alt=\\\"\\\" class=\\\"dijitMenuExpand\\\"/>\\n\\t\\t\\t<span class=\\\"dijitMenuExpandA11y\\\">+</span>\\n\\t\\t</div>\\n\\t</td>\\n</tr>\\n\"",
        "'url:dijit/form/templates/CheckBox.html'",
        "\"<div class=\\\"dijit dijitReset dijitInline\\\" role=\\\"presentation\\\"\\n\\t><input\\n\\t \\t${!nameAttrSetting} type=\\\"${type}\\\" role=\\\"${type}\\\" aria-checked=\\\"false\\\" ${checkedAttrSetting}\\n\\t\\tclass=\\\"dijitReset dijitCheckBoxInput\\\"\\n\\t\\tdata-dojo-attach-point=\\\"focusNode\\\"\\n\\t \\tdata-dojo-attach-event=\\\"onclick:_onClick\\\"\\n/></div>\\n\"",
        "'url:dijit/form/templates/VerticalSlider.html'",
        "\"<table class=\\\"dijit dijitReset dijitSlider dijitSliderV\\\" cellspacing=\\\"0\\\" cellpadding=\\\"0\\\" border=\\\"0\\\" rules=\\\"none\\\" data-dojo-attach-event=\\\"onkeypress:_onKeyPress,onkeyup:_onKeyUp\\\"\\n\\trole=\\\"presentation\\\"\\n\\t><tr class=\\\"dijitReset\\\"\\n\\t\\t><td class=\\\"dijitReset\\\"></td\\n\\t\\t><td class=\\\"dijitReset dijitSliderButtonContainer dijitSliderButtonContainerV\\\"\\n\\t\\t\\t><div class=\\\"dijitSliderIncrementIconV\\\" style=\\\"display:none\\\" data-dojo-attach-point=\\\"decrementButton\\\"><span class=\\\"dijitSliderButtonInner\\\">+</span></div\\n\\t\\t></td\\n\\t\\t><td class=\\\"dijitReset\\\"></td\\n\\t></tr\\n\\t><tr class=\\\"dijitReset\\\"\\n\\t\\t><td class=\\\"dijitReset\\\"></td\\n\\t\\t><td class=\\\"dijitReset\\\"\\n\\t\\t\\t><center><div class=\\\"dijitSliderBar dijitSliderBumper dijitSliderBumperV dijitSliderTopBumper\\\" data-dojo-attach-event=\\\"press:_onClkIncBumper\\\"></div></center\\n\\t\\t></td\\n\\t\\t><td class=\\\"dijitReset\\\"></td\\n\\t></tr\\n\\t><tr class=\\\"dijitReset\\\"\\n\\t\\t><td data-dojo-attach-point=\\\"leftDecoration\\\" class=\\\"dijitReset dijitSliderDecoration dijitSliderDecorationL dijitSliderDecorationV\\\"></td\\n\\t\\t><td class=\\\"dijitReset dijitSliderDecorationC\\\" style=\\\"height:100%;\\\"\\n\\t\\t\\t><input data-dojo-attach-point=\\\"valueNode\\\" type=\\\"hidden\\\" ${!nameAttrSetting}\\n\\t\\t\\t/><center class=\\\"dijitReset dijitSliderBarContainerV\\\" role=\\\"presentation\\\" data-dojo-attach-point=\\\"sliderBarContainer\\\"\\n\\t\\t\\t\\t><div role=\\\"presentation\\\" data-dojo-attach-point=\\\"remainingBar\\\" class=\\\"dijitSliderBar dijitSliderBarV dijitSliderRemainingBar dijitSliderRemainingBarV\\\" data-dojo-attach-event=\\\"press:_onBarClick\\\"><!--#5629--></div\\n\\t\\t\\t\\t><div role=\\\"presentation\\\" data-dojo-attach-point=\\\"progressBar\\\" class=\\\"dijitSliderBar dijitSliderBarV dijitSliderProgressBar dijitSliderProgressBarV\\\" data-dojo-attach-event=\\\"press:_onBarClick\\\"\\n\\t\\t\\t\\t\\t><div class=\\\"dijitSliderMoveable dijitSliderMoveableV\\\" style=\\\"vertical-align:top;\\\"\\n\\t\\t\\t\\t\\t\\t><div data-dojo-attach-point=\\\"sliderHandle,focusNode\\\" class=\\\"dijitSliderImageHandle dijitSliderImageHandleV\\\" data-dojo-attach-event=\\\"press:_onHandleClick\\\" role=\\\"slider\\\"></div\\n\\t\\t\\t\\t\\t></div\\n\\t\\t\\t\\t></div\\n\\t\\t\\t></center\\n\\t\\t></td\\n\\t\\t><td data-dojo-attach-point=\\\"containerNode,rightDecoration\\\" class=\\\"dijitReset dijitSliderDecoration dijitSliderDecorationR dijitSliderDecorationV\\\"></td\\n\\t></tr\\n\\t><tr class=\\\"dijitReset\\\"\\n\\t\\t><td class=\\\"dijitReset\\\"></td\\n\\t\\t><td class=\\\"dijitReset\\\"\\n\\t\\t\\t><center><div class=\\\"dijitSliderBar dijitSliderBumper dijitSliderBumperV dijitSliderBottomBumper\\\" data-dojo-attach-event=\\\"press:_onClkDecBumper\\\"></div></center\\n\\t\\t></td\\n\\t\\t><td class=\\\"dijitReset\\\"></td\\n\\t></tr\\n\\t><tr class=\\\"dijitReset\\\"\\n\\t\\t><td class=\\\"dijitReset\\\"></td\\n\\t\\t><td class=\\\"dijitReset dijitSliderButtonContainer dijitSliderButtonContainerV\\\"\\n\\t\\t\\t><div class=\\\"dijitSliderDecrementIconV\\\" style=\\\"display:none\\\" data-dojo-attach-point=\\\"incrementButton\\\"><span class=\\\"dijitSliderButtonInner\\\">-</span></div\\n\\t\\t></td\\n\\t\\t><td class=\\\"dijitReset\\\"></td\\n\\t></tr\\n></table>\\n\"",
        "'dijit/layout/LayoutContainer'",
        "\"dojo/_base/kernel\"",
        "\"dojo/_base/lang\"",
        "\"dojo/_base/declare\"",
        "\"../_WidgetBase\"",
        "\"./_LayoutWidget\"",
        "\"./utils\"",
        "\"dijit.layout.LayoutContainer\"",
        "\"dijitLayoutContainer\"",
        "\"dijit.layout.LayoutContainer is deprecated\"",
        "\"use BorderContainer instead\"",
        "'none'",
        "'dijit/Tooltip'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/fx\"",
        "\"dojo/dom\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/lang\"",
        "\"dojo/mouse\"",
        "\"dojo/on\"",
        "\"dojo/sniff\"",
        "\"./_base/manager\"",
        "\"./place\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"./BackgroundIframe\"",
        "\"dojo/text!./templates/Tooltip.html\"",
        "\"./main\"",
        "\"dijit._MasterTooltip\"",
        "\"_onShow\"",
        "\"_onHide\"",
        "\"playing\"",
        "\"textDir\"",
        "\"right\"",
        "\"left\"",
        "\"orient\"",
        "'M'",
        "'M'",
        "\"px\"",
        "\"\"",
        "'M'",
        "'M'",
        "\"px\"",
        "\"\"",
        "\"\"",
        "\"opacity\"",
        "\"\"",
        "\"dijitTooltip \"",
        "\"MR-ML\"",
        "\"dijitTooltipRight\"",
        "\"ML-MR\"",
        "\"dijitTooltipLeft\"",
        "\"TM-BM\"",
        "\"dijitTooltipAbove\"",
        "\"BM-TM\"",
        "\"dijitTooltipBelow\"",
        "\"BL-TL\"",
        "\"dijitTooltipBelow dijitTooltipABLeft\"",
        "\"TL-BL\"",
        "\"dijitTooltipAbove dijitTooltipABLeft\"",
        "\"BR-TR\"",
        "\"dijitTooltipBelow dijitTooltipABRight\"",
        "\"TR-BR\"",
        "\"dijitTooltipAbove dijitTooltipABRight\"",
        "\"BR-BL\"",
        "\"dijitTooltipRight\"",
        "\"BL-BR\"",
        "\"dijitTooltipLeft\"",
        "\"-\"",
        "\"auto\"",
        "\"ie\"",
        "\"trident\"",
        "'B'",
        "'B'",
        "\"px\"",
        "\"\"",
        "\"px\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"ie\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"ie\"",
        "\"textDir\"",
        "\"auto\"",
        "\"after-centered\"",
        "\"before-centered\"",
        "\"dijit.Tooltip\"",
        "\"\"",
        "\"\"",
        "\"focusin\"",
        "\"_onUnHover\"",
        "\"focusout\"",
        "\"_onUnHover\"",
        "\"connectId\"",
        "\"connectId\"",
        "\"connectId\"",
        "\"dijitTooltipData\"",
        "\"after-centered\"",
        "\"before-centered\"",
        "'url:dijit/templates/MenuSeparator.html'",
        "\"<tr class=\\\"dijitMenuSeparator\\\" role=\\\"separator\\\">\\n\\t<td class=\\\"dijitMenuSeparatorIconCell\\\">\\n\\t\\t<div class=\\\"dijitMenuSeparatorTop\\\"></div>\\n\\t\\t<div class=\\\"dijitMenuSeparatorBottom\\\"></div>\\n\\t</td>\\n\\t<td colspan=\\\"3\\\" class=\\\"dijitMenuSeparatorLabelCell\\\">\\n\\t\\t<div class=\\\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\\\"></div>\\n\\t\\t<div class=\\\"dijitMenuSeparatorBottom\\\"></div>\\n\\t</td>\\n</tr>\"",
        "'dijit/form/VerticalSlider'",
        "\"dojo/_base/declare\"",
        "\"./HorizontalSlider\"",
        "\"dojo/text!./templates/VerticalSlider.html\"",
        "\"dijit.form.VerticalSlider\"",
        "\"pageY\"",
        "\"h\"",
        "\"y\"",
        "\"top\"",
        "\"height\"",
        "'dijit/form/DropDownButton'",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/lang\"",
        "\"dojo/query\"",
        "\"../registry\"",
        "\"../popup\"",
        "\"./Button\"",
        "\"../_Container\"",
        "\"../_HasDropDown\"",
        "\"dojo/text!./templates/DropDownButton.html\"",
        "\"dijit.form.DropDownButton\"",
        "\"dijitDropDownButton\"",
        "\"*\"",
        "\"[widgetId]\"",
        "\"load\"",
        "'url:dijit/templates/ProgressBar.html'",
        "\"<div class=\\\"dijitProgressBar dijitProgressBarEmpty\\\" role=\\\"progressbar\\\"\\n\\t><div  data-dojo-attach-point=\\\"internalProgress\\\" class=\\\"dijitProgressBarFull\\\"\\n\\t\\t><div class=\\\"dijitProgressBarTile\\\" role=\\\"presentation\\\"></div\\n\\t\\t><span style=\\\"visibility:hidden\\\">&#160;</span\\n\\t></div\\n\\t><div data-dojo-attach-point=\\\"labelNode\\\" class=\\\"dijitProgressBarLabel\\\" id=\\\"${id}_label\\\"></div\\n\\t><img data-dojo-attach-point=\\\"indeterminateHighContrastImage\\\" class=\\\"dijitProgressBarIndeterminateHighContrastImage\\\" alt=\\\"\\\"\\n/></div>\\n\"",
        "'dojo/date'",
        "\"./has\"",
        "\"./_base/lang\"",
        "''",
        "'('",
        "')'",
        "'AM'",
        "'PM'",
        "''",
        "\"date\"",
        "\"time\"",
        "\"Date\"",
        "\"day\"",
        "\"weekday\"",
        "\"year\"",
        "\"FullYear\"",
        "\"week\"",
        "\"quarter\"",
        "\"month\"",
        "\"Month\"",
        "\"UTC\"",
        "\"s\"",
        "\"set\"",
        "\"get\"",
        "\"day\"",
        "\"quarter\"",
        "\"weekday\"",
        "\"day\"",
        "\"week\"",
        "\"year\"",
        "\"month\"",
        "\"week\"",
        "\"day\"",
        "\"day\"",
        "\"hour\"",
        "\"minute\"",
        "\"second\"",
        "\"millisecond\"",
        "\"dojo.date\"",
        "'dijit/layout/_ContentPaneResizeMixin'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/lang\"",
        "\"dojo/query\"",
        "\"dojo/sniff\"",
        "\"../registry\"",
        "\"../Viewport\"",
        "\"./utils\"",
        "\"dijit.layout._ContentPaneResizeMixin\"",
        "\"resize\"",
        "\"resize\"",
        "\"> *\"",
        "\"SingleChild\"",
        "\"h\"",
        "\"w\"",
        "\"open\"",
        "\"open\"",
        "'none'",
        "'hidden'",
        "\"dijitHidden\"",
        "'none'",
        "'dijit/form/RangeBoundTextBox'",
        "\"dojo/_base/declare\"",
        "\"dojo/i18n\"",
        "\"./MappedTextBox\"",
        "\"dijit.form.RangeBoundTextBox\"",
        "\"\"",
        "\"min\"",
        "\"max\"",
        "'value'",
        "'value'",
        "\"min\"",
        "\"number\"",
        "\"max\"",
        "\"number\"",
        "'value'",
        "''",
        "\"number\"",
        "\"dijit.form\"",
        "\"validate\"",
        "'dijit/_editor/RichText'",
        "\"dijit/_editor/RichText\"",
        "\"dojo/_base/array\"",
        "\"dojo/_base/config\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/Deferred\"",
        "\"dojo/dom\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-construct\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"dojo/query\"",
        "\"dojo/ready\"",
        "\"dojo/sniff\"",
        "\"dojo/topic\"",
        "\"dojo/_base/unload\"",
        "\"dojo/_base/url\"",
        "\"dojo/_base/window\"",
        "\"../_Widget\"",
        "\"../_CssStateMixin\"",
        "\"./selection\"",
        "\"./range\"",
        "\"./html\"",
        "\"../focus\"",
        "\"../main\"",
        "\"dijit._editor.RichText\"",
        "\"dijitEditor\"",
        "\"\"",
        "\"\"",
        "\"300px\"",
        "\"1em\"",
        "\"@@**%%__RICHTEXTBOUNDRY__%%**@@\"",
        "\"@@**%%:%%**@@\"",
        "\"textarea\"",
        "\"RichText should not be used with the TEXTAREA tag.  See dijit._editor.RichText docs.\"",
        "\"_preFixUrlAttributes\"",
        "\"mozilla\"",
        "\"webkit\"",
        "\"ie\"",
        "\"trident\"",
        "\"_stripBreakerNodes\"",
        "\"_stripTrailingEmptyNodes\"",
        "\"._editor.RichText::init\"",
        "\"bold\"",
        "\"italic\"",
        "\"underline\"",
        "\"selectall\"",
        "\"1\"",
        "\"formatblock\"",
        "\"h1\"",
        "\"2\"",
        "\"formatblock\"",
        "\"h2\"",
        "\"3\"",
        "\"formatblock\"",
        "\"h3\"",
        "\"4\"",
        "\"formatblock\"",
        "\"h4\"",
        "\"\\\\\"",
        "\"insertunorderedlist\"",
        "\"ie\"",
        "\"redo\"",
        "\"onKeyPress\"",
        "\"onKeyDown\"",
        "\"onKeyUp\"",
        "'div'",
        "'p'",
        "'pre'",
        "'h1'",
        "'h2'",
        "'h3'",
        "'h4'",
        "'h5'",
        "'h6'",
        "'ol'",
        "'ul'",
        "'address'",
        "\"\"",
        "'l'",
        "\"<\"",
        "\"><span>content</span></\"",
        "\"><br/>\"",
        "\"<\"",
        "\"><li>content</li></\"",
        "\"><br/>\"",
        "\"absolute\"",
        "\"0px\"",
        "'div'",
        "\"selectElement\"",
        "\"formatblock\"",
        "\"._editor.RichText::open\"",
        "\"\"",
        "\"textarea\"",
        "\"div\"",
        "'widgetId'",
        "'widgetId'",
        "\" \"",
        "\"before\"",
        "\"block\"",
        "\"absolute\"",
        "\"-1000px\"",
        "\"ie\"",
        "\"hidden\"",
        "\"ie\"",
        "\"submit\"",
        "'disabled'",
        "\"\"",
        "\"LI\"",
        "\" <br>\"",
        "\"div\"",
        "\"div\"",
        "\"div\"",
        "\"_AUTOGEN\"",
        "\"\"",
        "\"useXDomain\"",
        "\"allowXdRichTextSave\"",
        "\"._editor.RichText.value\"",
        "\"\"",
        "\"_saveContent\"",
        "'iframe'",
        "\"_iframe\"",
        "\"none\"",
        "\"100%\"",
        "\"100%\"",
        "\"ie\"",
        "\"ie\"",
        "\"\\\\\\\\\"",
        "\"\\\\'\"",
        "\"ie\"",
        "'javascript:document.open();try{parent.window;}catch(e){document.domain=\"'",
        "'\";}'",
        "'document.write(\\''",
        "'\\');document.close()'",
        "\"javascript: '\"",
        "\"'\"",
        "\"ie\"",
        "'src'",
        "\"safari\"",
        "\"src\"",
        "\"javascript\"",
        "'src'",
        "\"LI\"",
        "\"-1.2em\"",
        "\"<div id='dijitEditorBody'></div>\"",
        "\" \"",
        "\"px\"",
        "\"em\"",
        "\"normal\"",
        "\"\"",
        "\"\"",
        "';'",
        "\":\"",
        "\"\"",
        "\"-\"",
        "\"\"",
        "';'",
        "'label[for=\"'",
        "'\"]'",
        "\"\"",
        "\"aria-label\"",
        "\"aria-label\"",
        "\"aria-labelledby\"",
        "\"aria-labelledby\"",
        "\"title\"",
        "\"<!DOCTYPE html>\"",
        "\"<html lang='\"",
        "\"'>\\n<head>\\n\"",
        "\"<html dir='rtl' lang='\"",
        "\"'>\\n<head>\\n\"",
        "\"<title>\"",
        "\"</title>\"",
        "\"\"",
        "\"<meta http-equiv='Content-Type' content='text/html'>\\n\"",
        "\"<style>\\n\"",
        "\"\\tbody,html {\\n\"",
        "\"\\t\\tbackground:transparent;\\n\"",
        "\"\\t\\tpadding: 1px 0 0 0;\\n\"",
        "\"\\t\\tmargin: -1px 0 0 0;\\n\"",
        "\"\\t}\\n\"",
        "\"\\tbody,html,#dijitEditorBody { outline: none; }\"",
        "\"html { height: 100%; width: 100%; overflow: hidden; }\\n\"",
        "\"\\tbody,#dijitEditorBody { height: 100%; width: 100%; overflow: auto; }\\n\"",
        "\"\\tbody,#dijitEditorBody { min-height: \"",
        "\"; width: 100%; overflow-x: auto; overflow-y: hidden; }\\n\"",
        "\"\\tbody{\\n\"",
        "\"\\t\\ttop:0px;\\n\"",
        "\"\\t\\tleft:0px;\\n\"",
        "\"\\t\\tright:0px;\\n\"",
        "\"\\t\\tfont:\"",
        "\";\\n\"",
        "\"opera\"",
        "\"\"",
        "\"\\t\\tposition: fixed;\\n\"",
        "\"\\t\\tline-height:\"",
        "\";\\n\"",
        "\"\\t}\\n\"",
        "\"\\tp{ margin: 1em 0; }\\n\"",
        "\"\\tli > ul:-moz-first-node, li > ol:-moz-first-node{ padding-top: 1.2em; }\\n\"",
        "\"ie\"",
        "\"trident\"",
        "\"\"",
        "\"\\tli{ min-height:1.2em; }\\n\"",
        "\"</style>\\n\"",
        "\"\\n\"",
        "\"</head>\\n<body role='main' \"",
        "\"onload='frameElement && frameElement._loadFunc(window,document)' \"",
        "\"style='\"",
        "\"'>\"",
        "\"</body>\\n</html>\"",
        "\"\"",
        "';'",
        "''",
        "''",
        "'<link rel=\"stylesheet\" type=\"text/css\" href=\"'",
        "'\"/>'",
        "'.'",
        "'/'",
        "\"head\"",
        "\"link\"",
        "\"stylesheet\"",
        "\"text/css\"",
        "'.'",
        "'/'",
        "'link[href=\"'",
        "'\"]'",
        "'styleWithCSS'",
        "\"disabled\"",
        "\"ie\"",
        "\"on\"",
        "\"-1\"",
        "\"off\"",
        "\"mozilla\"",
        "\"<div tabIndex=-1></div>\"",
        "\"before\"",
        "\"<div tabIndex=-1></div>\"",
        "\"after\"",
        "\"mouseup\"",
        "\"onClick\"",
        "\"ie\"",
        "\"onmousedown\"",
        "\"_onIEMouseDown\"",
        "\"onmousedown\"",
        "\"webkit\"",
        "\"onmouseup\"",
        "\"onDisplayChanged\"",
        "\"onmousedown\"",
        "\"placeCursorAtEnd\"",
        "\"ie\"",
        "'RespectVisibilityInDesign'",
        "'disabled'",
        "\"defer\"",
        "\"focus\"",
        "\"outdent\"",
        "\"indent\"",
        "\"outdent\"",
        "\"indent\"",
        "\"ie\"",
        "\"Control\"",
        "\"delete\"",
        "\"ff\"",
        "'dijit.Editor::setDisabled is deprecated'",
        "'use dijit.Editor::attr(\"disabled\",boolean) instead'",
        "'disabled'",
        "\"spellcheck\"",
        "\"spellcheck\"",
        "\"disableSpellCheck\"",
        "\"onKeyPressed\"",
        "\"_onKeyHitch\"",
        "\"ie\"",
        "\"trident\"",
        "\"value\"",
        "'disabled'",
        "\"ie\"",
        "\"ie\"",
        "'onfocus'",
        "\"onNormalizedDisplayChanged\"",
        "\"formatblock\"",
        "\"safari\"",
        "\"heading\"",
        "\"hilitecolor\"",
        "\"mozilla\"",
        "\"backcolor\"",
        "\"bold\"",
        "\"italic\"",
        "\"underline\"",
        "\"subscript\"",
        "\"superscript\"",
        "\"fontname\"",
        "\"fontsize\"",
        "\"forecolor\"",
        "\"hilitecolor\"",
        "\"justifycenter\"",
        "\"justifyfull\"",
        "\"justifyleft\"",
        "\"justifyright\"",
        "\"delete\"",
        "\"selectall\"",
        "\"toggledir\"",
        "\"createlink\"",
        "\"unlink\"",
        "\"removeformat\"",
        "\"inserthorizontalrule\"",
        "\"insertimage\"",
        "\"insertorderedlist\"",
        "\"insertunorderedlist\"",
        "\"indent\"",
        "\"outdent\"",
        "\"formatblock\"",
        "\"inserthtml\"",
        "\"undo\"",
        "\"redo\"",
        "\"strikethrough\"",
        "\"tabindent\"",
        "\"blockdirltr\"",
        "\"blockdirrtl\"",
        "\"dirltr\"",
        "\"dirrtl\"",
        "\"inlinedirltr\"",
        "\"inlinedirrtl\"",
        "\"cut\"",
        "\"copy\"",
        "\"paste\"",
        "\"inserttable\"",
        "\"insertcell\"",
        "\"insertcol\"",
        "\"insertrow\"",
        "\"deletecells\"",
        "\"deletecols\"",
        "\"deleterows\"",
        "\"mergecells\"",
        "\"splitcell\"",
        "\"ie\"",
        "\"trident\"",
        "\"mozilla\"",
        "\"webkit\"",
        "\"opera\"",
        "\"heading\"",
        "\"unimplemented\"",
        "\"formatblock\"",
        "\"ie\"",
        "\"trident\"",
        "'<'",
        "'>'",
        "\"_\"",
        "\"Impl\"",
        "\"createlink\"",
        "\"_\"",
        "\"EnabledImpl\"",
        "\"ie\"",
        "\"trident\"",
        "\"formatblock\"",
        "\"mozilla\"",
        "\"hilitecolor\"",
        "\"styleWithCSS\"",
        "\"styleWithCSS\"",
        "\"styleWithCSS\"",
        "\"mozilla\"",
        "\"\"",
        "\"selectElement\"",
        "\"\"",
        "\"selectElement\"",
        "\"selectElementChildren\"",
        "\"selectElementChildren\"",
        "\"collapse\"",
        "\"mozilla\"",
        "\"\"",
        "\"selectElement\"",
        "\"selectElement\"",
        "\"selectElementChildren\"",
        "\"collapse\"",
        "\"webkit\"",
        "\"&#160;\"",
        "\"value\"",
        "\"mozilla\"",
        "\"selectall\"",
        "\"inserthtml\"",
        "\"value\"",
        "''",
        "''",
        "\"\"",
        "\"._editor.RichText.value\"",
        "\"&amp;\"",
        "\"&lt;\"",
        "\"&gt;\"",
        "\"&quot;\"",
        "\"&#39;\"",
        "'dijit.Editor::getNodeHtml is deprecated'",
        "'use dijit/_editor/html::getNodeHtml instead'",
        "'dijit.Editor::getNodeChildrenHtml is deprecated'",
        "'use dijit/_editor/html::getChildrenHtml instead'",
        "\"value\"",
        "\"ie\"",
        "\"\"",
        "\"\"",
        "\"ie\"",
        "''",
        "''",
        "''",
        "''",
        "''",
        "''",
        "'<$1b$2'",
        "'<$1i$2'",
        "'$1$4$2$3$5$2 _djrealurl=$2$3$5$2'",
        "'$1$4$2$3$5$2 _djrealurl=$2$3$5$2'",
        "\"ie\"",
        "\"opera\"",
        "\"createlink\"",
        "\"createlink\"",
        "\"mozilla\"",
        "\"webkit\"",
        "\"hasAncestorElement\"",
        "\"a\"",
        "\"unlink\"",
        "\"mozilla\"",
        "\"webkit\"",
        "\"inserttable\"",
        "\"webkit\"",
        "\"cut\"",
        "\"webkit\"",
        "\"copy\"",
        "\"webkit\"",
        "\"paste\"",
        "\"ie\"",
        "\"<hr>\"",
        "\"inserthorizontalrule\"",
        "\"unlink\"",
        "\"mozilla\"",
        "\"webkit\"",
        "\"getAncestorElement\"",
        "\"a\"",
        "\"selectElement\"",
        "\"unlink\"",
        "\"unlink\"",
        "\"hilitecolor\"",
        "\"mozilla\"",
        "\"styleWithCSS\"",
        "\"Executing color command.\"",
        "\"hilitecolor\"",
        "\"styleWithCSS\"",
        "\"hilitecolor\"",
        "\"ie\"",
        "\"backcolor\"",
        "\"backcolor\"",
        "\"ie\"",
        "\"forecolor\"",
        "\"forecolor\"",
        "\"ie\"",
        "'CONTROL'",
        "\"trident\"",
        "'div'",
        "\"mozilla\"",
        "\"remove\"",
        "\"inserthtml\"",
        "\"ie\"",
        "\"trident\"",
        "\"bold\"",
        "\"bold\"",
        "\"ie\"",
        "\"trident\"",
        "\"italic\"",
        "\"italic\"",
        "\"ie\"",
        "\"trident\"",
        "\"underline\"",
        "\"underline\"",
        "\"ie\"",
        "\"trident\"",
        "\"strikethrough\"",
        "\"strikethrough\"",
        "\"ie\"",
        "\"trident\"",
        "\"superscript\"",
        "\"superscript\"",
        "\"ie\"",
        "\"trident\"",
        "\"subscript\"",
        "\"subscript\"",
        "\"ie\"",
        "\"trident\"",
        "\"fontname\"",
        "\"fontname\"",
        "\"ie\"",
        "\"trident\"",
        "\"fontsize\"",
        "\"fontsize\"",
        "\"ie\"",
        "\"trident\"",
        "\"insertorderedlist\"",
        "\"insertorderedlist\"",
        "\"ie\"",
        "\"trident\"",
        "\"insertunorderedlist\"",
        "\"insertunorderedlist\"",
        "\"\"",
        "\"\"",
        "\"after\"",
        "\"before\"",
        "\"span\"",
        "\"ieFormatBreakerSpan\"",
        "\"after\"",
        "\"after\"",
        "\"FONT\"",
        "\"span\"",
        "\"ieFormatBreakerSpan\"",
        "\"after\"",
        "\"after\"",
        "\"after\"",
        "\"\"",
        "\"FONT\"",
        "\"before\"",
        "\"FONT\"",
        "\".\"",
        "\"collapse\"",
        "\"\"",
        "\"span\"",
        "\"ieFormatBreakerSpan\"",
        "\".\"",
        "\"before\"",
        "\"collapse\"",
        "\"\"",
        "\"\"",
        "\"span\"",
        "\".\"",
        "\"after\"",
        "\"after\"",
        "\"after\"",
        "\"before\"",
        "\"collapse\"",
        "\"\"",
        "\"ul\"",
        "\"insertorderedlist\"",
        "\"ol\"",
        "\"li\"",
        "\"before\"",
        "\"br\"",
        "\"after\"",
        "\"collapse\"",
        "\"\"",
        "\"span\"",
        "\".\"",
        "\"span\"",
        "\"after\"",
        "\"after\"",
        "\"after\"",
        "\"webkit\"",
        "\"color\"",
        "\"hilitecolor\"",
        "\"backcolor\"",
        "\"backgroundColor\"",
        "\"remove\"",
        "\"&#160;\"",
        "\"selectElement\"",
        "\"before\"",
        "\"collapse\"",
        "\"node\"",
        "\"offset\"",
        "\"bold\"",
        "\"b\"",
        "\"strong\"",
        "\"italic\"",
        "\"i\"",
        "\"em\"",
        "\"strikethrough\"",
        "\"s\"",
        "\"strike\"",
        "\"superscript\"",
        "\"sup\"",
        "\"subscript\"",
        "\"sub\"",
        "\"underline\"",
        "\"u\"",
        "\".ieFormatBreakerSpan\"",
        "\"before\"",
        "\"\"",
        "'dojo/dnd/Moveable'",
        "\"../_base/array\"",
        "\"../_base/declare\"",
        "\"../_base/event\"",
        "\"../_base/lang\"",
        "\"../dom\"",
        "\"../dom-class\"",
        "\"../Evented\"",
        "\"../on\"",
        "\"../topic\"",
        "\"../touch\"",
        "\"./common\"",
        "\"./Mover\"",
        "\"../_base/window\"",
        "\"dojo.dnd.Moveable\"",
        "\"\"",
        "\"onMouseDown\"",
        "\"dragstart\"",
        "\"onSelectStart\"",
        "\"selectstart\"",
        "\"onSelectStart\"",
        "\"onMouseMove\"",
        "\"onMouseUp\"",
        "\"/dnd/move/start\"",
        "\"dojoMove\"",
        "\"dojoMoveItem\"",
        "\"/dnd/move/stop\"",
        "\"dojoMove\"",
        "\"dojoMoveItem\"",
        "\"px\"",
        "\"px\"",
        "'dijit/TooltipDialog'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"./focus\"",
        "\"./layout/ContentPane\"",
        "\"./_DialogMixin\"",
        "\"./form/_FormMixin\"",
        "\"./_TemplatedMixin\"",
        "\"dojo/text!./templates/TooltipDialog.html\"",
        "\"./main\"",
        "\"dijit.TooltipDialog\"",
        "\"\"",
        "\"dijitTooltipDialog\"",
        "\"title\"",
        "\"onkeypress\"",
        "\"_onKey\"",
        "\"MR-ML\"",
        "\"dijitTooltipRight\"",
        "\"ML-MR\"",
        "\"dijitTooltipLeft\"",
        "\"TM-BM\"",
        "\"dijitTooltipAbove\"",
        "\"BM-TM\"",
        "\"dijitTooltipBelow\"",
        "\"BL-TL\"",
        "\"dijitTooltipBelow dijitTooltipABLeft\"",
        "\"TL-BL\"",
        "\"dijitTooltipAbove dijitTooltipABLeft\"",
        "\"BR-TR\"",
        "\"dijitTooltipBelow dijitTooltipABRight\"",
        "\"TR-BR\"",
        "\"dijitTooltipAbove dijitTooltipABRight\"",
        "\"BR-BL\"",
        "\"dijitTooltipRight\"",
        "\"BL-BR\"",
        "\"dijitTooltipLeft\"",
        "\"-\"",
        "\"\"",
        "'M'",
        "'M'",
        "\"px\"",
        "\"\"",
        "'M'",
        "'M'",
        "\"px\"",
        "\"onCancel\"",
        "'dojo/store/util/SimpleQueryEngine'",
        "\"../../_base/array\"",
        "\"Can not query with a \"",
        "\"object\"",
        "\"undefined\"",
        "\"string\"",
        "\"No filter function \"",
        "\" was found in store\"",
        "\"function\"",
        "\"function\"",
        "'dijit/form/_ExpandingTextAreaMixin'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-construct\"",
        "\"dojo/has\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"dojo/_base/window\"",
        "\"../Viewport\"",
        "\"textarea-needs-help-shrinking\"",
        "'textarea'",
        "\"5\"",
        "\"20\"",
        "' '",
        "\"12px\"",
        "\"96px\"",
        "'hidden'",
        "'hidden'",
        "'absolute'",
        "\"5px solid white\"",
        "\"0\"",
        "\"0\"",
        "'border-box'",
        "'border-box'",
        "'border-box'",
        "'border-box'",
        "\"last\"",
        "\"dijit.form._ExpandingTextAreaMixin\"",
        "\"hidden\"",
        "\"focus, resize\"",
        "\"_resizeLater\"",
        "\"resize\"",
        "\"_resizeLater\"",
        "\"resize\"",
        "''",
        "' '",
        "''",
        "\"hidden\"",
        "\"px\"",
        "\"textarea-needs-help-shrinking\"",
        "\"auto\"",
        "\"px\"",
        "\"px\"",
        "\"auto\"",
        "\"hidden\"",
        "\"hidden\"",
        "'dijit/MenuItem'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/sniff\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"./_Contained\"",
        "\"./_CssStateMixin\"",
        "\"dojo/text!./templates/MenuItem.html\"",
        "\"dijit.MenuItem\"",
        "\"dijitMenuItem\"",
        "\"\"",
        "\"label\"",
        "\"auto\"",
        "\"dijitNoIcon\"",
        "\"iconNode\"",
        "\"class\"",
        "\"\"",
        "\"label\"",
        "'label'",
        "\"_text\"",
        "\"id\"",
        "\"id\"",
        "\"_accel\"",
        "\" \"",
        "\"_accel\"",
        "\"aria-labelledby\"",
        "\"ie\"",
        "\"dijitMenuItemSelected\"",
        "\"dijit.MenuItem.setLabel() is deprecated.  Use set('label', ...) instead.\"",
        "\"\"",
        "\"2.0\"",
        "\"label\"",
        "\"dijit.Menu.setDisabled() is deprecated.  Use set('disabled', bool) instead.\"",
        "\"\"",
        "\"2.0\"",
        "'disabled'",
        "'aria-disabled'",
        "'true'",
        "'false'",
        "\"disabled\"",
        "\"\"",
        "\"none\"",
        "'colSpan'",
        "\"1\"",
        "\"2\"",
        "\"accelKey\"",
        "\"textDir\"",
        "'dijit/MenuBarItem'",
        "\"dojo/_base/declare\"",
        "\"./MenuItem\"",
        "\"dojo/text!./templates/MenuBarItem.html\"",
        "\"dijit._MenuBarItemMixin\"",
        "\"dijit.MenuBarItem\"",
        "'dijit/layout/TabController'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/i18n\"",
        "\"dojo/_base/lang\"",
        "\"./StackController\"",
        "\"../registry\"",
        "\"../Menu\"",
        "\"../MenuItem\"",
        "\"dojo/text!./templates/_TabButton.html\"",
        "\"dojo/i18n!../nls/common\"",
        "\"dijit.layout._TabButton\"",
        "\"dijitTab\"",
        "\"dijitTabCloseButton\"",
        "\"closeButton\"",
        "\"dijitClosable\"",
        "\"\"",
        "\"none\"",
        "\"dijit\"",
        "\"common\"",
        "\"title\"",
        "\"title\"",
        "\"dijit\"",
        "\"common\"",
        "\"title\"",
        "''",
        "\"dijit.layout.TabController\"",
        "\"dijitTabController\"",
        "\"<div role='tablist' data-dojo-attach-event='onkeypress:onkeypress'></div>\"",
        "\"top\"",
        "\"dijitTabCloseButton\"",
        "\"_Menu\"",
        "\"dijitClosable\"",
        "\"dijitTabDisabled\"",
        "\"dijit\"",
        "\"common\"",
        "'dojo/cldr/supplemental'",
        "\"../_base/lang\"",
        "\"../i18n\"",
        "\"dojo.cldr.supplemental\"",
        "'do'",
        "'in'",
        "'-'",
        "\"et\"",
        "\"ge\"",
        "\"za\"",
        "\"gh\"",
        "\"et\"",
        "\"eg\"",
        "\"in\"",
        "\"ru\"",
        "\"bo\"",
        "\"az\"",
        "\"ru\"",
        "\"by\"",
        "\"bg\"",
        "\"vu\"",
        "\"ml\"",
        "\"bd\"",
        "\"cn\"",
        "\"fr\"",
        "\"ba\"",
        "\"es\"",
        "\"ru\"",
        "\"gu\"",
        "\"fr\"",
        "\"ca\"",
        "\"cz\"",
        "\"ru\"",
        "\"gb\"",
        "\"dk\"",
        "\"de\"",
        "\"mv\"",
        "\"bt\"",
        "\"gh\"",
        "\"gr\"",
        "\"us\"",
        "\"es\"",
        "\"ee\"",
        "\"es\"",
        "\"ir\"",
        "\"sn\"",
        "\"fi\"",
        "\"fj\"",
        "\"fo\"",
        "\"fr\"",
        "\"nl\"",
        "\"ie\"",
        "\"gb\"",
        "\"es\"",
        "\"py\"",
        "\"in\"",
        "\"gb\"",
        "\"ng\"",
        "\"il\"",
        "\"in\"",
        "\"pg\"",
        "\"hr\"",
        "\"ht\"",
        "\"hu\"",
        "\"am\"",
        "\"fr\"",
        "\"id\"",
        "\"ng\"",
        "\"cn\"",
        "\"us\"",
        "\"in\"",
        "\"id\"",
        "\"is\"",
        "\"it\"",
        "\"ca\"",
        "\"il\"",
        "\"jp\"",
        "\"ua\"",
        "\"id\"",
        "\"id\"",
        "\"ge\"",
        "\"cd\"",
        "\"ke\"",
        "\"na\"",
        "\"kz\"",
        "\"gl\"",
        "\"kh\"",
        "\"in\"",
        "\"kr\"",
        "\"in\"",
        "\"tr\"",
        "\"ru\"",
        "\"gb\"",
        "\"kg\"",
        "\"va\"",
        "\"lu\"",
        "\"ug\"",
        "\"nl\"",
        "\"cd\"",
        "\"la\"",
        "\"lt\"",
        "\"cd\"",
        "\"lv\"",
        "\"mg\"",
        "\"mh\"",
        "\"nz\"",
        "\"mk\"",
        "\"in\"",
        "\"mn\"",
        "\"ro\"",
        "\"in\"",
        "\"my\"",
        "\"mt\"",
        "\"mm\"",
        "\"nr\"",
        "\"no\"",
        "\"zw\"",
        "\"np\"",
        "\"na\"",
        "\"nl\"",
        "\"no\"",
        "\"no\"",
        "\"za\"",
        "\"us\"",
        "\"mw\"",
        "\"fr\"",
        "\"et\"",
        "\"in\"",
        "\"ge\"",
        "\"in\"",
        "\"pl\"",
        "\"af\"",
        "\"br\"",
        "\"pe\"",
        "\"ch\"",
        "\"bi\"",
        "\"ro\"",
        "\"ru\"",
        "\"rw\"",
        "\"in\"",
        "\"in\"",
        "\"no\"",
        "\"cf\"",
        "\"lk\"",
        "\"sk\"",
        "\"si\"",
        "\"ws\"",
        "\"zw\"",
        "\"so\"",
        "\"al\"",
        "\"rs\"",
        "\"za\"",
        "\"za\"",
        "\"id\"",
        "\"se\"",
        "\"tz\"",
        "\"in\"",
        "\"in\"",
        "\"tj\"",
        "\"th\"",
        "\"et\"",
        "\"tm\"",
        "\"ph\"",
        "\"za\"",
        "\"to\"",
        "\"tr\"",
        "\"za\"",
        "\"ru\"",
        "\"pf\"",
        "\"cn\"",
        "\"ua\"",
        "\"pk\"",
        "\"uz\"",
        "\"za\"",
        "\"vn\"",
        "\"be\"",
        "\"sn\"",
        "\"za\"",
        "\"il\"",
        "\"ng\"",
        "\"cn\"",
        "\"cn\"",
        "\"za\"",
        "\"id\"",
        "\"ru\"",
        "\"cm\"",
        "\"ru\"",
        "\"ng\"",
        "\"tz\"",
        "\"es\"",
        "\"in\"",
        "\"pk\"",
        "\"id\"",
        "\"cm\"",
        "\"cm\"",
        "\"id\"",
        "\"zm\"",
        "\"tz\"",
        "\"in\"",
        "\"pk\"",
        "\"in\"",
        "\"in\"",
        "\"in\"",
        "\"ph\"",
        "\"ng\"",
        "\"in\"",
        "\"ph\"",
        "\"ci\"",
        "\"in\"",
        "\"in\"",
        "\"cm\"",
        "\"pk\"",
        "\"ru\"",
        "\"yt\"",
        "\"id\"",
        "\"id\"",
        "\"er\"",
        "\"ng\"",
        "\"in\"",
        "\"ph\"",
        "\"ug\"",
        "\"fm\"",
        "\"ru\"",
        "\"ca\"",
        "\"us\"",
        "\"kh\"",
        "\"vn\"",
        "\"iq\"",
        "\"ca\"",
        "\"pl\"",
        "\"ru\"",
        "\"ke\"",
        "\"ca\"",
        "\"ca\"",
        "\"ne\"",
        "\"in\"",
        "\"de\"",
        "\"cm\"",
        "\"sn\"",
        "\"bf\"",
        "\"ke\"",
        "\"ng\"",
        "\"cm\"",
        "\"gq\"",
        "\"ph\"",
        "\"bj\"",
        "\"it\"",
        "\"gh\"",
        "\"md\"",
        "\"in\"",
        "\"gf\"",
        "\"et\"",
        "\"ki\"",
        "\"in\"",
        "\"id\"",
        "\"in\"",
        "\"ch\"",
        "\"ke\"",
        "\"ca\"",
        "\"us\"",
        "\"ph\"",
        "\"in\"",
        "\"ph\"",
        "\"in\"",
        "\"in\"",
        "\"ng\"",
        "\"ph\"",
        "\"ru\"",
        "\"cm\"",
        "\"tz\"",
        "\"uz\"",
        "\"dz\"",
        "\"ng\"",
        "\"ke\"",
        "\"ru\"",
        "\"ng\"",
        "\"tz\"",
        "\"th\"",
        "\"cv\"",
        "\"cm\"",
        "\"ci\"",
        "\"in\"",
        "\"in\"",
        "\"cn\"",
        "\"ml\"",
        "\"in\"",
        "\"cm\"",
        "\"ke\"",
        "\"ao\"",
        "\"ru\"",
        "\"in\"",
        "\"fm\"",
        "\"lr\"",
        "\"ru\"",
        "\"sl\"",
        "\"ru\"",
        "\"in\"",
        "\"tz\"",
        "\"cm\"",
        "\"de\"",
        "\"ru\"",
        "\"tz\"",
        "\"pk\"",
        "\"ru\"",
        "\"cn\"",
        "\"in\"",
        "\"ru\"",
        "\"np\"",
        "\"cn\"",
        "\"ir\"",
        "\"in\"",
        "\"cd\"",
        "\"cd\"",
        "\"ke\"",
        "\"ke\"",
        "\"th\"",
        "\"id\"",
        "\"in\"",
        "\"in\"",
        "\"id\"",
        "\"gn\"",
        "\"ke\"",
        "\"ru\"",
        "\"ph\"",
        "\"id\"",
        "\"sl\"",
        "\"ke\"",
        "\"mu\"",
        "\"mz\"",
        "\"cm\"",
        "\"id\"",
        "\"in\"",
        "\"gm\"",
        "\"mm\"",
        "\"bf\"",
        "\"cm\"",
        "\"in\"",
        "\"ru\"",
        "\"it\"",
        "\"na\"",
        "\"de\"",
        "\"new\"",
        "\"np\"",
        "\"nu\"",
        "\"cm\"",
        "\"cm\"",
        "\"th\"",
        "\"za\"",
        "\"sd\"",
        "\"tz\"",
        "\"ug\"",
        "\"ph\"",
        "\"ph\"",
        "\"bq\"",
        "\"pw\"",
        "\"fm\"",
        "\"ir\"",
        "\"in\"",
        "\"re\"",
        "\"id\"",
        "\"np\"",
        "\"in\"",
        "\"tz\"",
        "\"tz\"",
        "\"gh\"",
        "\"ru\"",
        "\"ke\"",
        "\"id\"",
        "\"in\"",
        "\"in\"",
        "\"tz\"",
        "\"it\"",
        "\"gb\"",
        "\"ir\"",
        "\"mz\"",
        "\"ml\"",
        "\"ma\"",
        "\"mm\"",
        "\"et\"",
        "\"se\"",
        "\"se\"",
        "\"fi\"",
        "\"fi\"",
        "\"ml\"",
        "\"sr\"",
        "\"sn\"",
        "\"er\"",
        "\"tz\"",
        "\"gn\"",
        "\"yt\"",
        "\"cd\"",
        "\"bd\"",
        "\"sy\"",
        "\"ph\"",
        "\"in\"",
        "\"cn\"",
        "\"sl\"",
        "\"ug\"",
        "\"tl\"",
        "\"er\"",
        "\"ng\"",
        "\"tk\"",
        "\"ne\"",
        "\"pg\"",
        "\"tw\"",
        "\"ph\"",
        "\"th\"",
        "\"mw\"",
        "\"tv\"",
        "\"ne\"",
        "\"ru\"",
        "\"ma\"",
        "\"ru\"",
        "\"fm\"",
        "\"ao\"",
        "\"in\"",
        "\"in\"",
        "\"lr\"",
        "\"tz\"",
        "\"ch\"",
        "\"et\"",
        "\"ph\"",
        "\"ug\"",
        "\"np\"",
        "\"mz\"",
        "\"fm\"",
        "\"cm\"",
        "\"tr\"",
        "'in'",
        "'dijit/MenuBar'",
        "'url:dijit/templates/MenuBar.html'",
        "\"<div class=\\\"dijitMenuBar dijitMenuPassive\\\" data-dojo-attach-point=\\\"containerNode\\\"  role=\\\"menubar\\\" tabIndex=\\\"${tabIndex}\\\" data-dojo-attach-event=\\\"onkeypress: _onKeyPress\\\"></div>\\n\"",
        "\"dijit/MenuBar\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"./_MenuBase\"",
        "\"dojo/text!./templates/MenuBar.html\"",
        "\"dijit.MenuBar\"",
        "\"dijitMenuBar\"",
        "\"below\"",
        "\"keypress\"",
        "'dijit/ToolbarSeparator'",
        "\"dijit/ToolbarSeparator\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"dijit.ToolbarSeparator\"",
        "'<div class=\"dijitToolbarSeparator dijitInline\" role=\"presentation\"></div>'",
        "'dijit/layout/StackController'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"../focus\"",
        "\"../registry\"",
        "\"../_Widget\"",
        "\"../_TemplatedMixin\"",
        "\"../_Container\"",
        "\"../form/ToggleButton\"",
        "\"dojo/i18n!../nls/common\"",
        "\"dijit.layout._StackButton\"",
        "\"-1\"",
        "\"aria-selected\"",
        "\"role\"",
        "\"tab\"",
        "\"dijit.layout.StackController\"",
        "\"dijitStackController\"",
        "\"<span role='tablist' data-dojo-attach-event='onkeypress'></span>\"",
        "\"\"",
        "\"dijitStackCloseButton\"",
        "\"-startup\"",
        "\"onStartup\"",
        "\"-addChild\"",
        "\"onAddChild\"",
        "\"-removeChild\"",
        "\"onRemoveChild\"",
        "\"-selectChild\"",
        "\"onSelectChild\"",
        "\"-containerKeyPress\"",
        "\"onContainerKeyPress\"",
        "'click'",
        "\"title\"",
        "\"label\"",
        "\"showtitle\"",
        "\"showLabel\"",
        "\"iconclass\"",
        "\"iconClass\"",
        "\"closable\"",
        "\"closeButton\"",
        "\"tooltip\"",
        "\"title\"",
        "\"disabled\"",
        "\"disabled\"",
        "\"attrmodified-\"",
        "\"_\"",
        "\"_\"",
        "'checked'",
        "\"tabIndex\"",
        "\"-1\"",
        "'checked'",
        "\"tabIndex\"",
        "\"0\"",
        "'checked'",
        "\"w\"",
        "'url:dijit/templates/TooltipDialog.html'",
        "\"<div role=\\\"alertdialog\\\" tabIndex=\\\"-1\\\">\\n\\t<div class=\\\"dijitTooltipContainer\\\" role=\\\"presentation\\\">\\n\\t\\t<div class=\\\"dijitTooltipContents dijitTooltipFocusNode\\\" data-dojo-attach-point=\\\"containerNode\\\"></div>\\n\\t</div>\\n\\t<div class=\\\"dijitTooltipConnector\\\" role=\\\"presentation\\\" data-dojo-attach-point=\\\"connectorNode\\\"></div>\\n</div>\\n\"",
        "'dojo/dnd/Mover'",
        "\"../_base/array\"",
        "\"../_base/declare\"",
        "\"../_base/event\"",
        "\"../_base/lang\"",
        "\"../sniff\"",
        "\"../_base/window\"",
        "\"../dom\"",
        "\"../dom-geometry\"",
        "\"../dom-style\"",
        "\"../Evented\"",
        "\"../on\"",
        "\"../touch\"",
        "\"./common\"",
        "\"./autoscroll\"",
        "\"dojo.dnd.Mover\"",
        "\"onFirstMove\"",
        "\"onMouseMove\"",
        "\"onMouseUp\"",
        "\"dragstart\"",
        "\"selectstart\"",
        "\"webkit\"",
        "\"mac\"",
        "\"relative\"",
        "\"absolute\"",
        "\"absolute\"",
        "'dijit/form/HorizontalRule'",
        "\"dojo/_base/declare\"",
        "\"../_Widget\"",
        "\"../_TemplatedMixin\"",
        "\"dijit.form.HorizontalRule\"",
        "'<div class=\"dijitRuleContainer dijitRuleContainerH\"></div>'",
        "\"containerNode\"",
        "\"\"",
        "'<div class=\"dijitRuleMark dijitRuleMarkH\" style=\"left:'",
        "'%;'",
        "'\"></div>'",
        "'dijit/layout/TabContainer'",
        "\"dojo/_base/lang\"",
        "\"dojo/_base/declare\"",
        "\"./_TabContainerBase\"",
        "\"./TabController\"",
        "\"./ScrollingTabController\"",
        "\"dijit.layout.TabContainer\"",
        "\"\"",
        "\"-tabs\"",
        "\"\"",
        "\" dijitTabNoLayout\"",
        "\"string\"",
        "\"_tablist\"",
        "\"class\"",
        "\"\"",
        "\"No\"",
        "\"Strip\"",
        "\"top\"",
        "\"bottom\"",
        "'url:dijit/templates/Menu.html'",
        "\"<table class=\\\"dijit dijitMenu dijitMenuPassive dijitReset dijitMenuTable\\\" role=\\\"menu\\\" tabIndex=\\\"${tabIndex}\\\"\\n\\t   data-dojo-attach-event=\\\"onkeypress:_onKeyPress\\\" cellspacing=\\\"0\\\">\\n\\t<tbody class=\\\"dijitReset\\\" data-dojo-attach-point=\\\"containerNode\\\"></tbody>\\n</table>\\n\"",
        "'dijit/form/_Spinner'",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dojo/mouse\"",
        "\"../typematic\"",
        "\"./RangeBoundTextBox\"",
        "\"dojo/text!./templates/Spinner.html\"",
        "\"./_TextBoxMixin\"",
        "\"dijit.form._Spinner\"",
        "\"dijitTextBox dijitSpinner\"",
        "\"upArrowNode\"",
        "\"dijitUpArrowButton\"",
        "\"downArrowNode\"",
        "\"dijitDownArrowButton\"",
        "'value'",
        "\"upArrowNode\"",
        "\"downArrowNode\"",
        "\"aria-valuemin\"",
        "\"aria-valuemin\"",
        "\"aria-valuemax\"",
        "\"aria-valuemax\"",
        "\"aria-valuenow\"",
        "\"_mouseWheeled\"",
        "\"_typematicCallback\"",
        "\"_typematicCallback\"",
        "\"_typematicCallback\"",
        "\"_typematicCallback\"",
        "'dijit/form/Button'",
        "\"require\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/has\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/_base/lang\"",
        "\"dojo/ready\"",
        "\"./_FormWidget\"",
        "\"./_ButtonMixin\"",
        "\"dojo/text!./templates/Button.html\"",
        "\"dijit-legacy-requires\"",
        "\"dijit/form/DropDownButton\"",
        "\"dijit/form/ComboButton\"",
        "\"dijit/form/ToggleButton\"",
        "\"dijit.form.Button\"",
        "\"dijitNoIcon\"",
        "\"iconNode\"",
        "\"class\"",
        "\"dijitButton\"",
        "\"valueNode\"",
        "\"label\"",
        "\"dijitDisplayNone\"",
        "\"showLabel\"",
        "\"dijit.form.Button.setLabel() is deprecated.  Use set('label', ...) instead.\"",
        "\"\"",
        "\"2.0\"",
        "\"label\"",
        "\"title\"",
        "''",
        "'url:dijit/layout/templates/TabContainer.html'",
        "\"<div class=\\\"dijitTabContainer\\\">\\n\\t<div class=\\\"dijitTabListWrapper\\\" data-dojo-attach-point=\\\"tablistNode\\\"></div>\\n\\t<div data-dojo-attach-point=\\\"tablistSpacer\\\" class=\\\"dijitTabSpacer ${baseClass}-spacer\\\"></div>\\n\\t<div class=\\\"dijitTabPaneWrapper ${baseClass}-container\\\" data-dojo-attach-point=\\\"containerNode\\\"></div>\\n</div>\\n\"",
        "'dojo/dnd/move'",
        "\"../_base/declare\"",
        "\"../dom-geometry\"",
        "\"../dom-style\"",
        "\"./common\"",
        "\"./Mover\"",
        "\"./Moveable\"",
        "\"dojo.dnd.move.constrainedMoveable\"",
        "\"px\"",
        "\"px\"",
        "\"dojo.dnd.move.boxConstrainedMoveable\"",
        "\"dojo.dnd.move.parentConstrainedMoveable\"",
        "\"content\"",
        "\"margin\"",
        "\"border\"",
        "\"padding\"",
        "'dijit/layout/_TabContainerBase'",
        "\"dojo/text!./templates/TabContainer.html\"",
        "\"./StackContainer\"",
        "\"./utils\"",
        "\"../_TemplatedMixin\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dijit.layout._TabContainerBase\"",
        "\"top\"",
        "\"dijitTabContainer\"",
        "\"\"",
        "\"visibility\"",
        "\"hidden\"",
        "\"dijitTabContainerNoLayout\"",
        "\"dijitTabContainerNested\"",
        "\"dijitTabContainerTabListNested\"",
        "\"dijitTabContainerSpacerNested\"",
        "\"dijitTabPaneWrapperNested\"",
        "\"tabStrip-\"",
        "\"enabled\"",
        "\"disabled\"",
        "\"dijitTabPane\"",
        "\"undefined\"",
        "\"\"",
        "\"client\"",
        "\"0\"",
        "\"\"",
        "'dijit/form/Form'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/sniff\"",
        "\"../_Widget\"",
        "\"../_TemplatedMixin\"",
        "\"./_FormMixin\"",
        "\"../layout/_ContentPaneResizeMixin\"",
        "\"dijit.form.Form\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"accept-charset\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"<form data-dojo-attach-point='containerNode' data-dojo-attach-event='onreset:_onReset,onsubmit:_onSubmit' ${!nameAttrSetting}></form>\"",
        "\"name='\"",
        "\"'\"",
        "\"\"",
        "\"encType\"",
        "\"ie\"",
        "\"dijit.form.Form:execute()/onExecute() are deprecated. Use onSubmit() instead.\"",
        "\"\"",
        "\"2.0\"",
        "'dojo/store/Memory'",
        "\"../_base/declare\"",
        "\"./util/QueryResults\"",
        "\"./util/SimpleQueryEngine\"",
        "\"dojo.store.Memory\"",
        "\"id\"",
        "\"id\"",
        "\"Object already exists\"",
        "'url:dijit/templates/Tooltip.html'",
        "\"<div class=\\\"dijitTooltip dijitTooltipLeft\\\" id=\\\"dojoTooltip\\\"\\n\\t><div class=\\\"dijitTooltipContainer dijitTooltipContents\\\" data-dojo-attach-point=\\\"containerNode\\\" role='alert'></div\\n\\t><div class=\\\"dijitTooltipConnector\\\" data-dojo-attach-point=\\\"connectorNode\\\"></div\\n></div>\\n\"",
        "'dijit/Editor'",
        "\"require\"",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/Deferred\"",
        "\"dojo/i18n\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dojo/string\"",
        "\"dojo/topic\"",
        "\"dojo/_base/window\"",
        "\"./_base/focus\"",
        "\"./_Container\"",
        "\"./Toolbar\"",
        "\"./ToolbarSeparator\"",
        "\"./layout/_LayoutWidget\"",
        "\"./form/ToggleButton\"",
        "\"./_editor/_Plugin\"",
        "\"./_editor/plugins/EnterKeyHandling\"",
        "\"./_editor/html\"",
        "\"./_editor/range\"",
        "\"./_editor/RichText\"",
        "\"./main\"",
        "\"dojo/i18n!./_editor/nls/commands\"",
        "\"dijit.Editor\"",
        "\"undo\"",
        "\"redo\"",
        "\"|\"",
        "\"cut\"",
        "\"copy\"",
        "\"paste\"",
        "\"|\"",
        "\"bold\"",
        "\"italic\"",
        "\"underline\"",
        "\"strikethrough\"",
        "\"|\"",
        "\"insertOrderedList\"",
        "\"insertUnorderedList\"",
        "\"indent\"",
        "\"outdent\"",
        "\"|\"",
        "\"justifyLeft\"",
        "\"justifyRight\"",
        "\"justifyCenter\"",
        "\"justifyFull\"",
        "\"ie\"",
        "\"trident\"",
        "\"onBeforeDeactivate\"",
        "\"onBeforeActivate\"",
        "\"dijit._editor\"",
        "\"commands\"",
        "\"aria-label\"",
        "\"dijitEditorIFrameContainer\"",
        "\"dijitEditorIFrame\"",
        "\"allowTransparency\"",
        "\"webkit\"",
        "\"KhtmlUserSelect\"",
        "\"none\"",
        "\"args\"",
        "\"plugin\"",
        "\"editor\"",
        "\".Editor.getPlugin\"",
        "\": cannot find plugin [\"",
        "\"]\"",
        "\": cannot find plugin [\"",
        "\"]\"",
        "\"px\"",
        "\"100%\"",
        "\"\"",
        "\"BODY\"",
        "\"placeCursorAtEnd\"",
        "\"BODY\"",
        "\"endEditing\"",
        "'undo'",
        "'redo'",
        "\"paste\"",
        "\"cut\"",
        "\"copy\"",
        "\"webkit\"",
        "\"opera\"",
        "'X'",
        "'C'",
        "'V'",
        "\"mac\"",
        "'appleKey'",
        "'ctrlKey'",
        "'undo'",
        "'redo'",
        "'undo'",
        "\"ie\"",
        "'moveToBookmark'",
        "\"ie\"",
        "'text'",
        "'bookmark'",
        "\"ie\"",
        "'cut'",
        "'paste'",
        "\"endEditing\"",
        "'isCollapsed'",
        "\"&#160;\"",
        "\"disabled\"",
        "\"disabled\"",
        "\"color\"",
        "\"color\"",
        "\"undo\"",
        "\"redo\"",
        "\"cut\"",
        "\"copy\"",
        "\"paste\"",
        "\"insertOrderedList\"",
        "\"insertUnorderedList\"",
        "\"indent\"",
        "\"outdent\"",
        "\"justifyCenter\"",
        "\"justifyFull\"",
        "\"justifyLeft\"",
        "\"justifyRight\"",
        "\"delete\"",
        "\"selectAll\"",
        "\"removeFormat\"",
        "\"unlink\"",
        "\"insertHorizontalRule\"",
        "\"bold\"",
        "\"italic\"",
        "\"underline\"",
        "\"strikethrough\"",
        "\"subscript\"",
        "\"superscript\"",
        "\"|\"",
        "'dijit/Toolbar'",
        "\"require\"",
        "\"dojo/_base/declare\"",
        "\"dojo/has\"",
        "\"dojo/keys\"",
        "\"dojo/ready\"",
        "\"./_Widget\"",
        "\"./_KeyNavContainer\"",
        "\"./_TemplatedMixin\"",
        "\"dijit-legacy-requires\"",
        "\"dijit/ToolbarSeparator\"",
        "\"dijit.Toolbar\"",
        "'<div class=\"dijit\" role=\"toolbar\" tabIndex=\"${tabIndex}\" data-dojo-attach-point=\"containerNode\">'",
        "'</div>'",
        "\"dijitToolbar\"",
        "'dijit/layout/StackContainer'",
        "\"dojo/_base/array\"",
        "\"dojo/cookie\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/has\"",
        "\"dojo/_base/lang\"",
        "\"dojo/ready\"",
        "\"dojo/topic\"",
        "\"../registry\"",
        "\"../_WidgetBase\"",
        "\"./_LayoutWidget\"",
        "\"dojo/i18n!../nls/common\"",
        "\"dijit-legacy-requires\"",
        "\"dijit/layout/StackController\"",
        "\"dijit.layout.StackContainer\"",
        "\"dijitStackContainer\"",
        "\"dijitLayoutContainer\"",
        "\"onkeypress\"",
        "\"_selectedChild\"",
        "\"-startup\"",
        "\"dijitHidden\"",
        "\"dijitVisible\"",
        "\"\"",
        "\"-addChild\"",
        "\"-removeChild\"",
        "\"selectedChildWidget\"",
        "\"-selectChild\"",
        "\"_selectedChild\"",
        "\"-containerKeyPress\"",
        "\"selected\"",
        "\"dijitVisible\"",
        "\"dijitHidden\"",
        "\"selected\"",
        "\"dijitHidden\"",
        "\"dijitVisible\"",
        "\"dijitNoIcon\"",
        "'dojo/regexp'",
        "\"./_base/kernel\"",
        "\"./_base/lang\"",
        "\"dojo.regexp\"",
        "\"\\\\\"",
        "\"|\"",
        "\"(\"",
        "\"?:\"",
        "\"\"",
        "\")\"",
        "'dijit/form/ComboBox'",
        "\"dojo/_base/declare\"",
        "\"./ValidationTextBox\"",
        "\"./ComboBoxMixin\"",
        "\"dijit.form.ComboBox\"",
        "'dijit/_editor/plugins/LinkDialog'",
        "\"require\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dojo/_base/query\"",
        "\"dojo/string\"",
        "\"../../_Widget\"",
        "\"../_Plugin\"",
        "\"../../form/DropDownButton\"",
        "\"../range\"",
        "\"dijit._editor.plugins.LinkDialog\"",
        "\"((https?|ftps?|file)\\\\://|\\./|\\.\\./|/|)(/[a-zA-Z]{1,1}:/|)(((?:(?:[\\\\da-zA-Z](?:[-\\\\da-zA-Z]{0,61}[\\\\da-zA-Z])?)\\\\.)*(?:[a-zA-Z](?:[-\\\\da-zA-Z]{0,80}[\\\\da-zA-Z])?)\\\\.?)|(((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.){3}(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])|(0[xX]0*[\\\\da-fA-F]?[\\\\da-fA-F]\\\\.){3}0[xX]0*[\\\\da-fA-F]?[\\\\da-fA-F]|(0+[0-3][0-7][0-7]\\\\.){3}0+[0-3][0-7][0-7]|(0|[1-9]\\\\d{0,8}|[1-3]\\\\d{9}|4[01]\\\\d{8}|42[0-8]\\\\d{7}|429[0-3]\\\\d{6}|4294[0-8]\\\\d{5}|42949[0-5]\\\\d{4}|429496[0-6]\\\\d{3}|4294967[01]\\\\d{2}|42949672[0-8]\\\\d|429496729[0-5])|0[xX]0*[\\\\da-fA-F]{1,8}|([\\\\da-fA-F]{1,4}\\\\:){7}[\\\\da-fA-F]{1,4}|([\\\\da-fA-F]{1,4}\\\\:){6}((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.){3}(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])))(\\\\:\\\\d+)?(/(?:[^?#\\\\s/]+/)*(?:[^?#\\\\s/]{0,}(?:\\\\?[^?#\\\\s/]*)?(?:#.*)?)?)?\"",
        "\"<?(mailto\\\\:)([!#-'*+\\\\-\\\\/-9=?A-Z^-~]+[.])*[!#-'*+\\\\-\\\\/-9=?A-Z^-~]+\"",
        "\"@\"",
        "\"((?:(?:[\\\\da-zA-Z](?:[-\\\\da-zA-Z]{0,61}[\\\\da-zA-Z])?)\\\\.)+(?:[a-zA-Z](?:[-\\\\da-zA-Z]{0,6}[\\\\da-zA-Z])?)\\\\.?)|localhost|^[^-][a-zA-Z0-9_-]*>?\"",
        "\"<a href=\\\"${urlInput}\\\" _djrealurl=\\\"${urlInput}\\\"\"",
        "\" target=\\\"${targetSelect}\\\"\"",
        "\">${textInput}</a>\"",
        "\"a\"",
        "\"<table role='presentation'><tr><td>\"",
        "\"<label for='${id}_urlInput'>${url}</label>\"",
        "\"</td><td>\"",
        "\"<input data-dojo-type='dijit.form.ValidationTextBox' required='true' \"",
        "\"id='${id}_urlInput' name='urlInput' data-dojo-props='intermediateChanges:true'/>\"",
        "\"</td></tr><tr><td>\"",
        "\"<label for='${id}_textInput'>${text}</label>\"",
        "\"</td><td>\"",
        "\"<input data-dojo-type='dijit.form.ValidationTextBox' required='true' id='${id}_textInput' \"",
        "\"name='textInput' data-dojo-props='intermediateChanges:true'/>\"",
        "\"</td></tr><tr><td>\"",
        "\"<label for='${id}_targetSelect'>${target}</label>\"",
        "\"</td><td>\"",
        "\"<select id='${id}_targetSelect' name='targetSelect' data-dojo-type='dijit.form.Select'>\"",
        "\"<option selected='selected' value='_self'>${currentWindow}</option>\"",
        "\"<option value='_blank'>${newWindow}</option>\"",
        "\"<option value='_top'>${topWindow}</option>\"",
        "\"<option value='_parent'>${parentWindow}</option>\"",
        "\"</select>\"",
        "\"</td></tr><tr><td colspan='2'>\"",
        "\"<button data-dojo-type='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>\"",
        "\"<button data-dojo-type='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>\"",
        "\"</td></tr></table>\"",
        "\"\"",
        "\"_loadDropDown\"",
        "\"dojo/i18n\"",
        "\"../../TooltipDialog\"",
        "\"../../registry\"",
        "\"../../form/Button\"",
        "\"../../form/Select\"",
        "\"../../form/ValidationTextBox\"",
        "\"dojo/i18n!../../nls/common\"",
        "\"dojo/i18n!../nls/LinkDialog\"",
        "'insertImage'",
        "'img'",
        "'a'",
        "\"dijit\"",
        "\"common\"",
        "\"dijit._editor\"",
        "\"LinkDialog\"",
        "\"Title\"",
        "\"setValue\"",
        "\"_onCloseDialog\"",
        "\"<div style='border-bottom: 1px black solid;padding-bottom:2pt;margin-bottom:4pt'></div>\"",
        "\"_urlInput\"",
        "\"_textInput\"",
        "\"_setButton\"",
        "\"_cancelButton\"",
        "\"onClick\"",
        "\"onChange\"",
        "\"_checkAndFixInput\"",
        "\"onChange\"",
        "\"_checkAndFixInput\"",
        "\"^\"",
        "\"$\"",
        "\"i\"",
        "\"^\"",
        "\"$\"",
        "\"i\"",
        "\"value\"",
        "\"onkeypress\"",
        "\"disabled\"",
        "'value'",
        "\"value\"",
        "\"mailto:\"",
        "\"/\"",
        "\"://\"",
        "'/'",
        "\"./\"",
        "\"../\"",
        "\"value\"",
        "\"http://\"",
        "\"value\"",
        "\"mailto:\"",
        "\"disabled\"",
        "\"ondblclick\"",
        "\"dojo\"",
        "\"&quot;\"",
        "\"ie\"",
        "\"getSelectedElement\"",
        "\"unlink\"",
        "\"selectElementChildren\"",
        "\"unlink\"",
        "'inserthtml'",
        "\"a\"",
        "\"name\"",
        "'_djrealurl'",
        "'href'",
        "'target'",
        "\"_self\"",
        "\"selectElement\"",
        "\"getSelectedText\"",
        "''",
        "''",
        "''",
        "\"ie\"",
        "\"getSelectedElement\"",
        "\"getAncestorElement\"",
        "\"selectElement\"",
        "\"selectElement\"",
        "\"getAncestorElement\"",
        "\"disabled\"",
        "\"value\"",
        "\"\"",
        "\"href\"",
        "\"selectElement\"",
        "\"disabled\"",
        "\"dijit._editor.plugins.ImgLinkDialog\"",
        "\"<table role='presentation'><tr><td>\"",
        "\"<label for='${id}_urlInput'>${url}</label>\"",
        "\"</td><td>\"",
        "\"<input dojoType='dijit.form.ValidationTextBox' regExp='${urlRegExp}' \"",
        "\"required='true' id='${id}_urlInput' name='urlInput' data-dojo-props='intermediateChanges:true'/>\"",
        "\"</td></tr><tr><td>\"",
        "\"<label for='${id}_textInput'>${text}</label>\"",
        "\"</td><td>\"",
        "\"<input data-dojo-type='dijit.form.ValidationTextBox' required='false' id='${id}_textInput' \"",
        "\"name='textInput' data-dojo-props='intermediateChanges:true'/>\"",
        "\"</td></tr><tr><td>\"",
        "\"</td><td>\"",
        "\"</td></tr><tr><td colspan='2'>\"",
        "\"<button data-dojo-type='dijit.form.Button' type='submit' id='${id}_setButton'>${set}</button>\"",
        "\"<button data-dojo-type='dijit.form.Button' type='button' id='${id}_cancelButton'>${buttonCancel}</button>\"",
        "\"</td></tr></table>\"",
        "\"\"",
        "\"<img src=\\\"${urlInput}\\\" _djrealurl=\\\"${urlInput}\\\" alt=\\\"${textInput}\\\" />\"",
        "\"img\"",
        "'_djrealurl'",
        "'src'",
        "'alt'",
        "\"selectElement\"",
        "\"getSelectedText\"",
        "''",
        "''",
        "\"onmousedown\"",
        "\"\"",
        "\"selectElement\"",
        "\"&quot;\"",
        "\"&quot;\"",
        "\"\"",
        "\"src\"",
        "\"selectElement\"",
        "\"disabled\"",
        "\"createLink\"",
        "\"createLink\"",
        "\"insertImage\"",
        "\"insertImage\"",
        "'dijit/DropDownMenu'",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/text!./templates/Menu.html\"",
        "\"./_OnDijitClickMixin\"",
        "\"./_MenuBase\"",
        "\"dijit.DropDownMenu\"",
        "\"dijitMenu\"",
        "'dijit/form/_FormMixin'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"dojo/window\"",
        "\"dijit.form._FormMixin\"",
        "\"\"",
        "\"value\"",
        "\"::setValues() is deprecated. Use set('value', val) instead.\"",
        "\"\"",
        "\"2.0\"",
        "'value'",
        "'boolean'",
        "'value'",
        "'value'",
        "'value'",
        "\"::getValues() is deprecated. Use get('value') instead.\"",
        "\"\"",
        "\"2.0\"",
        "'value'",
        "'value'",
        "'boolean'",
        "\"undefined\"",
        "\"\"",
        "\"state\"",
        "\"\"",
        "\"Error\"",
        "\"Error\"",
        "\"Incomplete\"",
        "\"Incomplete\"",
        "\"\"",
        "\"state\"",
        "\"disabled\"",
        "\"state\"",
        "\"value\"",
        "\"disabled\"",
        "\"checked\"",
        "\"value\"",
        "\"value\"",
        "\"value\"",
        "\"attrmodified-state, attrmodified-disabled, attrmodified-value, attrmodified-checked\"",
        "\"attrmodified-\"",
        "\"\"",
        "\"state\"",
        "\"\"",
        "'dijit/Menu'",
        "\"dijit/Menu\"",
        "\"require\"",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/event\"",
        "\"dojo/dom\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"dojo/sniff\"",
        "\"dojo/_base/window\"",
        "\"dojo/window\"",
        "\"./popup\"",
        "\"./DropDownMenu\"",
        "\"dojo/ready\"",
        "\"dijit-legacy-requires\"",
        "\"dijit/MenuItem\"",
        "\"dijit/PopupMenuItem\"",
        "\"dijit/CheckedMenuItem\"",
        "\"dijit/MenuSeparator\"",
        "\"dijit.Menu\"",
        "\"\"",
        "'__parent__'",
        "\"iframe\"",
        "\"_dijitMenu\"",
        "\"click\"",
        "\"contextmenu\"",
        "\"keydown\"",
        "\"load\"",
        "\"onload\"",
        "\"_dijitMenu\"",
        "\"load\"",
        "\"onload\"",
        "\"ie\"",
        "\"quirks\"",
        "\"ie\"",
        "\"quirks\"",
        "\"ie\"",
        "\"quirks\"",
        "\"ie\"",
        "\"quirks\"",
        "\"prevNode\"",
        "\"curNode\"",
        "'L'",
        "'R'",
        "'_onBlur'",
        "'dijit/form/_CheckBoxMixin'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/_base/event\"",
        "\"dijit.form._CheckBoxMixin\"",
        "\"checkbox\"",
        "\"on\"",
        "\"aria-checked\"",
        "\"readOnly\"",
        "'readOnly'",
        "\"\"",
        "\"on\"",
        "\"value\"",
        "\"value\"",
        "\"value\"",
        "'value'",
        "'dijit/layout/ContentPane'",
        "\"dojo/_base/kernel\"",
        "\"dojo/_base/lang\"",
        "\"../_Widget\"",
        "\"../_Container\"",
        "\"./_ContentPaneResizeMixin\"",
        "\"dojo/string\"",
        "\"dojo/html\"",
        "\"dojo/i18n!../nls/loading\"",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/Deferred\"",
        "\"dojo/dom\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-construct\"",
        "\"dojo/_base/xhr\"",
        "\"dojo/i18n\"",
        "\"dojo/when\"",
        "\"dijit.layout.ContentPane\"",
        "\"\"",
        "\"\"",
        "\"<span class='dijitContentPaneLoading'><span class='dijitInline dijitIconLoading'></span>${loadingState}</span>\"",
        "\"<span class='dijitContentPaneError'><span class='dijitInline dijitIconError'></span>${errorState}</span>\"",
        "\"dijitContentPane\"",
        "\"href\"",
        "\"content\"",
        "\"dijit\"",
        "\"loading\"",
        "\"title\"",
        "\"dijit.layout.ContentPane.setHref() is deprecated. Use set('href', ...) instead.\"",
        "\"\"",
        "\"2.0\"",
        "\"href\"",
        "\"cancel\"",
        "\"onLoad\"",
        "\"href\"",
        "\"dijit.layout.ContentPane.setContent() is deprecated.  Use set('content', ...) instead.\"",
        "\"\"",
        "\"2.0\"",
        "\"content\"",
        "\"href\"",
        "\"\"",
        "\"cancel\"",
        "\"onLoad\"",
        "\"\"",
        "\"cancel\"",
        "\"onLoad\"",
        "\"text\"",
        "'Content'",
        "'Download'",
        "\"isLoaded\"",
        "'Error '",
        "' running custom onLoad code: '",
        "\"isLoaded\"",
        "'Error '",
        "' running custom onUnload code: '",
        "'Fatal '",
        "' could not change content due to '",
        "'on'",
        "'Error'",
        "'url:dijit/form/templates/ValidationTextBox.html'",
        "\"<div class=\\\"dijit dijitReset dijitInline dijitLeft\\\"\\n\\tid=\\\"widget_${id}\\\" role=\\\"presentation\\\"\\n\\t><div class='dijitReset dijitValidationContainer'\\n\\t\\t><input class=\\\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\\\" value=\\\"&#935; \\\" type=\\\"text\\\" tabIndex=\\\"-1\\\" readonly=\\\"readonly\\\" role=\\\"presentation\\\"\\n\\t/></div\\n\\t><div class=\\\"dijitReset dijitInputField dijitInputContainer\\\"\\n\\t\\t><input class=\\\"dijitReset dijitInputInner\\\" data-dojo-attach-point='textbox,focusNode' autocomplete=\\\"off\\\"\\n\\t\\t\\t${!nameAttrSetting} type='${type}'\\n\\t/></div\\n></div>\\n\"",
        "'url:dijit/form/templates/TextBox.html'",
        "\"<div class=\\\"dijit dijitReset dijitInline dijitLeft\\\" id=\\\"widget_${id}\\\" role=\\\"presentation\\\"\\n\\t><div class=\\\"dijitReset dijitInputField dijitInputContainer\\\"\\n\\t\\t><input class=\\\"dijitReset dijitInputInner\\\" data-dojo-attach-point='textbox,focusNode' autocomplete=\\\"off\\\"\\n\\t\\t\\t${!nameAttrSetting} type='${type}'\\n\\t/></div\\n></div>\\n\"",
        "'dijit/_KeyNavContainer'",
        "\"dojo/_base/kernel\"",
        "\"./_Container\"",
        "\"./_FocusMixin\"",
        "\"dojo/_base/array\"",
        "\"dojo/keys\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/event\"",
        "\"dojo/dom-attr\"",
        "\"dojo/_base/lang\"",
        "\"dijit._KeyNavContainer\"",
        "\"0\"",
        "\"focusPrev\"",
        "\"focusNext\"",
        "\"focusFirstChild\"",
        "\"focusLastChild\"",
        "\"onkeypress\"",
        "\"_onContainerKeypress\"",
        "\"onfocus\"",
        "\"_onContainerFocus\"",
        "\"startupKeyNavChildren() call no longer needed\"",
        "\"\"",
        "\"2.0\"",
        "\"_startupChild\"",
        "\"tabIndex\"",
        "\"end\"",
        "\"start\"",
        "\"focusedChild\"",
        "\"tabIndex\"",
        "\"-1\"",
        "\"_onFocus\"",
        "\"tabIndex\"",
        "\"_onBlur\"",
        "\"tabIndex\"",
        "\"-1\"",
        "\"tabIndex\"",
        "\"-1\"",
        "\"tabIndex\"",
        "'dijit/layout/utils'",
        "\"dojo/_base/array\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/lang\"",
        "\"../main\"",
        "\"layout\"",
        "\"dijitLayoutContainer\"",
        "\"center\"",
        "\"client\"",
        "\"center\"",
        "\"client\"",
        "\"No region setting for \"",
        "\"px\"",
        "\"px\"",
        "\"absolute\"",
        "\"dijitAlign\"",
        "\"top\"",
        "\"bottom\"",
        "\"h\"",
        "\"w\"",
        "\"top\"",
        "\"bottom\"",
        "\"top\"",
        "\"px\"",
        "\"left\"",
        "\"right\"",
        "\"left\"",
        "\"px\"",
        "\"client\"",
        "\"center\"",
        "'dijit/form/DataList'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"dojo/_base/lang\"",
        "\"dojo/query\"",
        "\"dojo/store/Memory\"",
        "\"../registry\"",
        "''",
        "\"dijit.form.DataList\"",
        "\"none\"",
        "\"option\"",
        "\"> option[selected]\"",
        "\"> option\"",
        "'url:dijit/templates/Dialog.html'",
        "\"<div class=\\\"dijitDialog\\\" role=\\\"dialog\\\" aria-labelledby=\\\"${id}_title\\\">\\n\\t<div data-dojo-attach-point=\\\"titleBar\\\" class=\\\"dijitDialogTitleBar\\\">\\n\\t\\t<span data-dojo-attach-point=\\\"titleNode\\\" class=\\\"dijitDialogTitle\\\" id=\\\"${id}_title\\\"\\n\\t\\t\\t\\trole=\\\"heading\\\" level=\\\"1\\\"></span>\\n\\t\\t<span data-dojo-attach-point=\\\"closeButtonNode\\\" class=\\\"dijitDialogCloseIcon\\\" data-dojo-attach-event=\\\"ondijitclick: onCancel\\\" title=\\\"${buttonCancel}\\\" role=\\\"button\\\" tabindex=\\\"0\\\">\\n\\t\\t\\t<span data-dojo-attach-point=\\\"closeText\\\" class=\\\"closeText\\\" title=\\\"${buttonCancel}\\\">x</span>\\n\\t\\t</span>\\n\\t</div>\\n\\t<div data-dojo-attach-point=\\\"containerNode\\\" class=\\\"dijitDialogPaneContent\\\"></div>\\n</div>\\n\"",
        "'dijit/form/CheckBox'",
        "\"require\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/has\"",
        "\"dojo/query\"",
        "\"dojo/ready\"",
        "\"./ToggleButton\"",
        "\"./_CheckBoxMixin\"",
        "\"dojo/text!./templates/CheckBox.html\"",
        "\"dojo/NodeList-dom\"",
        "\"dijit-legacy-requires\"",
        "\"dijit/form/RadioButton\"",
        "\"dijit.form.CheckBox\"",
        "\"dijitCheckBox\"",
        "\"string\"",
        "'checked'",
        "\"\"",
        "\"label[for='\"",
        "\"']\"",
        "\"dijitFocusedLabel\"",
        "\"label[for='\"",
        "\"']\"",
        "\"dijitFocusedLabel\"",
        "'dijit/_editor/_Plugin'",
        "\"dojo/_base/connect\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/lang\"",
        "\"../form/Button\"",
        "\"dijit._editor._Plugin\"",
        "\"dijitEditorIcon\"",
        "\"\"",
        "\" \"",
        "\"-1\"",
        "\"disabled\"",
        "\"disabled\"",
        "\"disabled\"",
        "\"disabled\"",
        "'disabled'",
        "'boolean'",
        "'checked'",
        "\"onClick\"",
        "\"execCommand\"",
        "\"none\"",
        "\"onNormalizedDisplayChanged\"",
        "\"updateState\"",
        "\"object\"",
        "\"_set\"",
        "\"Attr\"",
        "\"_get\"",
        "\"Attr\"",
        "'url:dijit/templates/MenuBar.html'",
        "\"<div class=\\\"dijitMenuBar dijitMenuPassive\\\" data-dojo-attach-point=\\\"containerNode\\\"  role=\\\"menubar\\\" tabIndex=\\\"${tabIndex}\\\" data-dojo-attach-event=\\\"onkeypress: _onKeyPress\\\"></div>\\n\"",
        "'dijit/tree/_dndSelector'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/connect\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/Deferred\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/_base/lang\"",
        "\"dojo/cookie\"",
        "\"dojo/mouse\"",
        "\"dojo/on\"",
        "\"dojo/touch\"",
        "\"./_dndContainer\"",
        "\"dijit.tree._dndSelector\"",
        "\"SaveSelectedCookie\"",
        "\"onMouseDown\"",
        "\"onMouseUp\"",
        "\"onMouseMove\"",
        "'__exclude__'",
        "\"/\"",
        "\"paths\"",
        "\"path\"",
        "\"selectedNodes\"",
        "\"selectedNode\"",
        "\"selectedItems\"",
        "\"selectedItem\"",
        "\",\"",
        "\",\"",
        "\"/\"",
        "\"mousedown\"",
        "\"touchstart\"",
        "'sourceIndex'",
        "'compareDocumentPosition'",
        "\"dijit.tree._compareNodes don't know how to compare two different nodes in this browser\"",
        "\"treeNode\"",
        "'dojo/html'",
        "\"./_base/kernel\"",
        "\"./_base/lang\"",
        "\"./_base/array\"",
        "\"./_base/declare\"",
        "\"./dom\"",
        "\"./dom-construct\"",
        "\"./parser\"",
        "\"dojo.html\"",
        "\"\"",
        "\"string\"",
        "\"last\"",
        "\"last\"",
        "\"dojo.html._ContentSetter\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"Setter\"",
        "\"\"",
        "\"_\"",
        "\": setContent given no node\"",
        "'Fatal '",
        "'.setContent could not change content due to '",
        "\"Error occurred setting content: \"",
        "\"Error occurred executing scripts: \"",
        "\"dir\"",
        "\"lang\"",
        "\"textDir\"",
        "'Content'",
        "\"Error parsing in _ContentSetter#\"",
        "'Content'",
        "\"Error parsing in _ContentSetter#\"",
        "'on'",
        "'Error'",
        "\"dojo.html.set: no cont argument provided, using empty string\"",
        "\"\"",
        "'dijit/_PaletteMixin'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-construct\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"./_CssStateMixin\"",
        "\"./focus\"",
        "\"./typematic\"",
        "\"dijit._PaletteMixin\"",
        "\"\"",
        "\"0\"",
        "\"dijitPaletteCell\"",
        "\"string\"",
        "\"ondijitclick\"",
        "\"_onCellClick\"",
        "\"tr\"",
        "\"-1\"",
        "\"row\"",
        "\"td\"",
        "\"class\"",
        "\"-1\"",
        "\"gridcell\"",
        "\"TD\"",
        "\"_currentFocus\"",
        "\"tabIndex\"",
        "\"-1\"",
        "\"tabIndex\"",
        "\"Selected\"",
        "\"Selected\"",
        "\"value\"",
        "\"focus\"",
        "'url:dijit/templates/TitlePane.html'",
        "\"<div>\\n\\t<div data-dojo-attach-event=\\\"onclick:_onTitleClick, onkeydown:_onTitleKey\\\"\\n\\t\\t\\tclass=\\\"dijitTitlePaneTitle\\\" data-dojo-attach-point=\\\"titleBarNode\\\" id=\\\"${id}_titleBarNode\\\">\\n\\t\\t<div class=\\\"dijitTitlePaneTitleFocus\\\" data-dojo-attach-point=\\\"focusNode\\\">\\n\\t\\t\\t<img src=\\\"${_blankGif}\\\" alt=\\\"\\\" data-dojo-attach-point=\\\"arrowNode\\\" class=\\\"dijitArrowNode\\\" role=\\\"presentation\\\"\\n\\t\\t\\t/><span data-dojo-attach-point=\\\"arrowNodeInner\\\" class=\\\"dijitArrowNodeInner\\\"></span\\n\\t\\t\\t><span data-dojo-attach-point=\\\"titleNode\\\" class=\\\"dijitTitlePaneTextNode\\\"></span>\\n\\t\\t</div>\\n\\t</div>\\n\\t<div class=\\\"dijitTitlePaneContentOuter\\\" data-dojo-attach-point=\\\"hideNode\\\" role=\\\"presentation\\\">\\n\\t\\t<div class=\\\"dijitReset\\\" data-dojo-attach-point=\\\"wipeNode\\\" role=\\\"presentation\\\">\\n\\t\\t\\t<div class=\\\"dijitTitlePaneContentInner\\\" data-dojo-attach-point=\\\"containerNode\\\" role=\\\"region\\\" id=\\\"${id}_pane\\\" aria-labelledby=\\\"${id}_titleBarNode\\\">\\n\\t\\t\\t\\t<!-- nested divs because wipeIn()/wipeOut() doesn't work right on node w/padding etc.  Put padding on inner div. -->\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</div>\\n</div>\\n\"",
        "'dijit/form/ValidationTextBox'",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/i18n\"",
        "\"./TextBox\"",
        "\"../Tooltip\"",
        "\"dojo/text!./templates/ValidationTextBox.html\"",
        "\"dojo/i18n!./nls/validate\"",
        "\"dijit.form.ValidationTextBox\"",
        "\"\"",
        "\"$_unset_$\"",
        "\"$_unset_$\"",
        "\"\"",
        "\".*\"",
        "\"\"",
        "\"\"",
        "\"ValidationTextBox id=\"",
        "\", set('\"",
        "\"', ...) is deprecated.  Use set('pattern', ...) instead.\"",
        "\"\"",
        "\"2.0\"",
        "'pattern'",
        "\"regExpGen\"",
        "\"regExp\"",
        "\"^(?:\"",
        "\")\"",
        "\"\"",
        "\"?\"",
        "\"$\"",
        "\"$_unset_$\"",
        "\"$_unset_$\"",
        "\"\"",
        "\"state\"",
        "\"\"",
        "\"Incomplete\"",
        "\"Error\"",
        "\"aria-invalid\"",
        "\"false\"",
        "\"true\"",
        "\"Error\"",
        "\"Incomplete\"",
        "\"message\"",
        "' dijitValidationTextBox'",
        "\"constraints\"",
        "\"pattern\"",
        "\"function\"",
        "\"\"",
        "\".*\"",
        "'{'",
        "'+'",
        "'?'",
        "'*'",
        "'^'",
        "'$'",
        "'|'",
        "'('",
        "\")\"",
        "\"|$)\"",
        "\"(?:\"",
        "\"|$)\"",
        "\"\"",
        "'RegExp error in '",
        "': '",
        "\"^(?:\"",
        "\")$\"",
        "\"dijit.form\"",
        "\"validate\"",
        "\"required\"",
        "\"aria-required\"",
        "\"message\"",
        "''",
        "'dijit/layout/BorderContainer'",
        "\"dojo/_base/array\"",
        "\"dojo/cookie\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-construct\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/event\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"dojo/touch\"",
        "\"../_WidgetBase\"",
        "\"../_Widget\"",
        "\"../_TemplatedMixin\"",
        "\"./_LayoutWidget\"",
        "\"./utils\"",
        "\"dijit.layout._Splitter\"",
        "'<div class=\"dijitSplitter\" data-dojo-attach-event=\"onkeypress:_onKeyPress,press:_startDrag,onmouseenter:_onMouse,onmouseleave:_onMouse\" tabIndex=\"0\" role=\"separator\"><div class=\"dijitSplitterThumb\"></div></div>'",
        "\"_\"",
        "\"dijitSplitter\"",
        "\"H\"",
        "\"V\"",
        "\"height\"",
        "\"width\"",
        "'h'",
        "'w'",
        "\"center\"",
        "\"<div class=dijitSplitterCover></div>\"",
        "\"after\"",
        "\"dijitSplitterCoverActive\"",
        "\"id\"",
        "\"dijitSplitterShadow\"",
        "\"after\"",
        "\"dijitSplitterActive dijitSplitter\"",
        "\"H\"",
        "\"V\"",
        "\"Active\"",
        "\"dijitSplitterHover dijitSplitter\"",
        "\"H\"",
        "\"V\"",
        "\"Hover\"",
        "\"pageY\"",
        "\"pageX\"",
        "'h'",
        "'w'",
        "\"top\"",
        "\"bottom\"",
        "\"top\"",
        "\"left\"",
        "\"_layoutChildren\"",
        "\"px\"",
        "\"dragstart\"",
        "\"selectstart\"",
        "\"_stopDrag\"",
        "\"mouseover\"",
        "\"mouseenter\"",
        "\"dijitSplitterHover\"",
        "\"dijitSplitter\"",
        "\"H\"",
        "\"V\"",
        "\"Hover\"",
        "\"dijitSplitterCoverActive\"",
        "\"dijitSplitterActive dijitSplitter\"",
        "\"H\"",
        "\"V\"",
        "\"Active dijitSplitterShadow\"",
        "\"height\"",
        "\"width\"",
        "'h'",
        "'w'",
        "\"dijit.layout._Gutter\"",
        "'<div class=\"dijitGutter\" role=\"presentation\"></div>'",
        "\"dijitGutter\"",
        "\"H\"",
        "\"V\"",
        "\"dijit.layout.BorderContainer\"",
        "\"headline\"",
        "\"dijitBorderContainer\"",
        "\"NoGutter\"",
        "\"Pane\"",
        "\"leading\"",
        "\"left\"",
        "\"right\"",
        "\"trailing\"",
        "\"right\"",
        "\"left\"",
        "\"center\"",
        "\"_splitter\"",
        "\"after\"",
        "\"Pane\"",
        "\"auto\"",
        "\"auto\"",
        "\"auto\"",
        "\"auto\"",
        "\"static\"",
        "\"top\"",
        "\"bottom\"",
        "\"width\"",
        "\"height\"",
        "\"auto\"",
        "\"padding\"",
        "\"0px\"",
        "\"center\"",
        "\"sidebar\"",
        "''",
        "'dojo/number'",
        "\"./_base/lang\"",
        "\"./i18n\"",
        "\"./i18n!./cldr/nls/number\"",
        "\"./string\"",
        "\"./regexp\"",
        "\"dojo.number\"",
        "\"dojo.cldr\"",
        "\"number\"",
        "\"decimal\"",
        "\"Format\"",
        "';'",
        "\"-\"",
        "'%'",
        "'\\u2030'",
        "'\\u00a4'",
        "\"symbol\"",
        "\"currency\"",
        "\"displayName\"",
        "\"\"",
        "'E'",
        "\"exponential notation not supported\"",
        "\"unable to find a number expression in pattern: \"",
        "\".\"",
        "\"string\"",
        "\",\"",
        "\".\"",
        "\"\"",
        "\"0\"",
        "'0'",
        "','",
        "''",
        "\"0\"",
        "\"#\"",
        "','",
        "','",
        "\"\"",
        "\",\"",
        "\".\"",
        "\"dojo.cldr\"",
        "\"number\"",
        "\"decimal\"",
        "\"Format\"",
        "'%'",
        "'\\u2030'",
        "'\\u00a4'",
        "';'",
        "\"-\"",
        "\"(?:\"",
        "'.'",
        "\")\"",
        "\"\"",
        "'.'",
        "\"###\"",
        "'0'",
        "\",\"",
        "','",
        "\"(\"",
        "\")\"",
        "\"symbol\"",
        "\"currency\"",
        "\"displayName\"",
        "\"\"",
        "\"[\\\\s\\\\xa0]\"",
        "\"\"",
        "\"[\\\\s\\\\xa0]\"",
        "\"\"",
        "\"*\"",
        "\"*\"",
        "\"(?:\"",
        "\")?\"",
        "\"[\\\\s\\\\xa0]\"",
        "\"^\"",
        "\"$\"",
        "\"[\"",
        "\"\\\\s\\\\xa0\"",
        "\"]\"",
        "\"g\"",
        "\"\"",
        "\".\"",
        "\"places\"",
        "\"string\"",
        "\".\"",
        "\"fractional\"",
        "\"exponent\"",
        "\"eSigned\"",
        "\"\"",
        "\"\\\\\"",
        "\"(?:\"",
        "\"\\\\d+)?\"",
        "\"\\\\d{\"",
        "\"}\"",
        "\"([eE]\"",
        "\")\"",
        "\"\"",
        "\"(?:(?:\"",
        "\")|(?:\"",
        "\"))\"",
        "\"signed\"",
        "\"separator\"",
        "\"\"",
        "\"groupSize\"",
        "\"[-+]\"",
        "\"\"",
        "\"(?:\\\\d+)\"",
        "\" \"",
        "\"\\\\s\"",
        "\"\\xa0\"",
        "\"\\\\s\\\\xa0\"",
        "\"(?:0|[1-9]\\\\d{0,\"",
        "\"}(?:[\"",
        "\"]\\\\d{\"",
        "\"})*[\"",
        "\"]\\\\d{\"",
        "\"})\"",
        "\"(?:\"",
        "\"|(?:0|[1-9]\\\\d{0,\"",
        "\"}))\"",
        "\"(?:0|[1-9]\\\\d{0,\"",
        "\"}(?:[\"",
        "\"]\\\\d{\"",
        "\"})*)\"",
        "'dojo/data/util/filter'",
        "\"../../_base/lang\"",
        "\"dojo.data.util.filter\"",
        "\"^\"",
        "'\\\\'",
        "'*'",
        "\".*\"",
        "'?'",
        "\".\"",
        "'$'",
        "'^'",
        "'/'",
        "'+'",
        "'.'",
        "'|'",
        "'('",
        "')'",
        "'{'",
        "'}'",
        "'['",
        "']'",
        "\"\\\\\"",
        "\"$\"",
        "\"mi\"",
        "\"m\"",
        "'dijit/_WidgetsInTemplateMixin'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/parser\"",
        "\"dijit._WidgetsInTemplateMixin\"",
        "\"dojo\"",
        "\": parser returned unfilled promise (probably waiting for module auto-load), \"",
        "\"unsupported by _WidgetsInTemplateMixin.   Must pre-load all supporting widgets before instantiation.\"",
        "'dijit/form/HorizontalRuleLabels'",
        "\"dojo/_base/declare\"",
        "\"dojo/number\"",
        "\"dojo/query\"",
        "\"./HorizontalRule\"",
        "\"dijit.form.HorizontalRuleLabels\"",
        "'<div class=\"dijitRuleContainer dijitRuleContainerH dijitRuleLabelsContainer dijitRuleLabelsContainerH\"></div>'",
        "\"\"",
        "\"#%\"",
        "'<div class=\"dijitRuleLabelContainer dijitRuleLabelContainerH\" style=\"left:'",
        "'\"><div class=\"dijitRuleLabel dijitRuleLabelH\">'",
        "'</div></div>'",
        "\"> li\"",
        "''",
        "'url:dijit/templates/MenuBarItem.html'",
        "\"<div class=\\\"dijitReset dijitInline dijitMenuItem dijitMenuItemLabel\\\" data-dojo-attach-point=\\\"focusNode\\\"\\n\\t \\trole=\\\"menuitem\\\" tabIndex=\\\"-1\\\">\\n\\t<span data-dojo-attach-point=\\\"containerNode\\\"></span>\\n</div>\\n\"",
        "'dijit/form/FilteringSelect'",
        "\"dojo/data/util/filter\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/lang\"",
        "\"dojo/when\"",
        "\"./MappedTextBox\"",
        "\"./ComboBoxMixin\"",
        "\"dijit.form.FilteringSelect\"",
        "\"\"",
        "'displayedValue'",
        "\"\"",
        "\"value\"",
        "''",
        "'item'",
        "\"value\"",
        "''",
        "''",
        "''",
        "\"\\\\$1\"",
        "''",
        "\"displayedValue\"",
        "\"displayedValue\"",
        "'dijit.form.FilteringSelect: '",
        "'displayedValue'",
        "'dojo/data/util/sorter'",
        "\"../../_base/lang\"",
        "\"dojo.data.util.sorter\"",
        "\"string\"",
        "\"toString\"",
        "'dijit/form/_ButtonMixin'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"dojo/_base/event\"",
        "\"../registry\"",
        "\"dijit.form._ButtonMixin\"",
        "\"\"",
        "\"button\"",
        "\"submit\"",
        "\"function\"",
        "\"label\"",
        "'dojo/colors'",
        "\"./_base/kernel\"",
        "\"./_base/lang\"",
        "\"./_base/Color\"",
        "\"./_base/array\"",
        "\"dojo.colors\"",
        "\"rgb\"",
        "\"rgba\"",
        "\"%\"",
        "\"hsl\"",
        "\"hsla\"",
        "\"aliceblue\"",
        "\"antiquewhite\"",
        "\"aquamarine\"",
        "\"azure\"",
        "\"beige\"",
        "\"bisque\"",
        "\"blanchedalmond\"",
        "\"blueviolet\"",
        "\"brown\"",
        "\"burlywood\"",
        "\"cadetblue\"",
        "\"chartreuse\"",
        "\"chocolate\"",
        "\"coral\"",
        "\"cornflowerblue\"",
        "\"cornsilk\"",
        "\"crimson\"",
        "\"cyan\"",
        "\"darkblue\"",
        "\"darkcyan\"",
        "\"darkgoldenrod\"",
        "\"darkgray\"",
        "\"darkgreen\"",
        "\"darkgrey\"",
        "\"darkkhaki\"",
        "\"darkmagenta\"",
        "\"darkolivegreen\"",
        "\"darkorange\"",
        "\"darkorchid\"",
        "\"darkred\"",
        "\"darksalmon\"",
        "\"darkseagreen\"",
        "\"darkslateblue\"",
        "\"darkslategray\"",
        "\"darkslategrey\"",
        "\"darkturquoise\"",
        "\"darkviolet\"",
        "\"deeppink\"",
        "\"deepskyblue\"",
        "\"dimgray\"",
        "\"dimgrey\"",
        "\"dodgerblue\"",
        "\"firebrick\"",
        "\"floralwhite\"",
        "\"forestgreen\"",
        "\"gainsboro\"",
        "\"ghostwhite\"",
        "\"gold\"",
        "\"goldenrod\"",
        "\"greenyellow\"",
        "\"grey\"",
        "\"honeydew\"",
        "\"hotpink\"",
        "\"indianred\"",
        "\"indigo\"",
        "\"ivory\"",
        "\"khaki\"",
        "\"lavender\"",
        "\"lavenderblush\"",
        "\"lawngreen\"",
        "\"lemonchiffon\"",
        "\"lightblue\"",
        "\"lightcoral\"",
        "\"lightcyan\"",
        "\"lightgoldenrodyellow\"",
        "\"lightgray\"",
        "\"lightgreen\"",
        "\"lightgrey\"",
        "\"lightpink\"",
        "\"lightsalmon\"",
        "\"lightseagreen\"",
        "\"lightskyblue\"",
        "\"lightslategray\"",
        "\"lightslategrey\"",
        "\"lightsteelblue\"",
        "\"lightyellow\"",
        "\"limegreen\"",
        "\"linen\"",
        "\"magenta\"",
        "\"mediumaquamarine\"",
        "\"mediumblue\"",
        "\"mediumorchid\"",
        "\"mediumpurple\"",
        "\"mediumseagreen\"",
        "\"mediumslateblue\"",
        "\"mediumspringgreen\"",
        "\"mediumturquoise\"",
        "\"mediumvioletred\"",
        "\"midnightblue\"",
        "\"mintcream\"",
        "\"mistyrose\"",
        "\"moccasin\"",
        "\"navajowhite\"",
        "\"oldlace\"",
        "\"olivedrab\"",
        "\"orange\"",
        "\"orangered\"",
        "\"orchid\"",
        "\"palegoldenrod\"",
        "\"palegreen\"",
        "\"paleturquoise\"",
        "\"palevioletred\"",
        "\"papayawhip\"",
        "\"peachpuff\"",
        "\"peru\"",
        "\"pink\"",
        "\"plum\"",
        "\"powderblue\"",
        "\"rosybrown\"",
        "\"royalblue\"",
        "\"saddlebrown\"",
        "\"salmon\"",
        "\"sandybrown\"",
        "\"seagreen\"",
        "\"seashell\"",
        "\"sienna\"",
        "\"skyblue\"",
        "\"slateblue\"",
        "\"slategray\"",
        "\"slategrey\"",
        "\"snow\"",
        "\"springgreen\"",
        "\"steelblue\"",
        "\"tan\"",
        "\"thistle\"",
        "\"tomato\"",
        "\"turquoise\"",
        "\"violet\"",
        "\"wheat\"",
        "\"whitesmoke\"",
        "\"yellowgreen\"",
        "'url:dijit/form/templates/Spinner.html'",
        "\"<div class=\\\"dijit dijitReset dijitInline dijitLeft\\\"\\n\\tid=\\\"widget_${id}\\\" role=\\\"presentation\\\"\\n\\t><div class=\\\"dijitReset dijitButtonNode dijitSpinnerButtonContainer\\\"\\n\\t\\t><input class=\\\"dijitReset dijitInputField dijitSpinnerButtonInner\\\" type=\\\"text\\\" tabIndex=\\\"-1\\\" readonly=\\\"readonly\\\" role=\\\"presentation\\\"\\n\\t\\t/><div class=\\\"dijitReset dijitLeft dijitButtonNode dijitArrowButton dijitUpArrowButton\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"upArrowNode\\\"\\n\\t\\t\\t><div class=\\\"dijitArrowButtonInner\\\"\\n\\t\\t\\t\\t><input class=\\\"dijitReset dijitInputField\\\" value=\\\"&#9650; \\\" type=\\\"text\\\" tabIndex=\\\"-1\\\" readonly=\\\"readonly\\\" role=\\\"presentation\\\"\\n\\t\\t\\t\\t\\t${_buttonInputDisabled}\\n\\t\\t\\t/></div\\n\\t\\t></div\\n\\t\\t><div class=\\\"dijitReset dijitLeft dijitButtonNode dijitArrowButton dijitDownArrowButton\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"downArrowNode\\\"\\n\\t\\t\\t><div class=\\\"dijitArrowButtonInner\\\"\\n\\t\\t\\t\\t><input class=\\\"dijitReset dijitInputField\\\" value=\\\"&#9660; \\\" type=\\\"text\\\" tabIndex=\\\"-1\\\" readonly=\\\"readonly\\\" role=\\\"presentation\\\"\\n\\t\\t\\t\\t\\t${_buttonInputDisabled}\\n\\t\\t\\t/></div\\n\\t\\t></div\\n\\t></div\\n\\t><div class='dijitReset dijitValidationContainer'\\n\\t\\t><input class=\\\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\\\" value=\\\"&#935; \\\" type=\\\"text\\\" tabIndex=\\\"-1\\\" readonly=\\\"readonly\\\" role=\\\"presentation\\\"\\n\\t/></div\\n\\t><div class=\\\"dijitReset dijitInputField dijitInputContainer\\\"\\n\\t\\t><input class='dijitReset dijitInputInner' data-dojo-attach-point=\\\"textbox,focusNode\\\" type=\\\"${type}\\\" data-dojo-attach-event=\\\"onkeypress:_onKeyPress\\\"\\n\\t\\t\\trole=\\\"spinbutton\\\" autocomplete=\\\"off\\\" ${!nameAttrSetting}\\n\\t/></div\\n></div>\\n\"",
        "'dijit/tree/_dndContainer'",
        "\"dojo/aspect\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"dojo/touch\"",
        "\"dijit.tree._dndContainer\"",
        "\"\"",
        "\"dojoDndContainer\"",
        "\"onOverEvent\"",
        "\"onOutEvent\"",
        "\"_onNodeMouseEnter\"",
        "\"onMouseOver\"",
        "\"_onNodeMouseLeave\"",
        "\"onMouseOut\"",
        "\"dragstart\"",
        "\"stop\"",
        "\"selectstart\"",
        "\"stop\"",
        "\"dojoDnd\"",
        "\"State\"",
        "\"dojoDndItem\"",
        "\"dojoDndItem\"",
        "\"Container\"",
        "\"Over\"",
        "\"Container\"",
        "\"\"",
        "'dojo/date/locale'",
        "\"../_base/lang\"",
        "\"../_base/array\"",
        "\"../date\"",
        "\"../cldr/supplemental\"",
        "\"../i18n\"",
        "\"../regexp\"",
        "\"../string\"",
        "\"../i18n!../cldr/nls/gregorian\"",
        "\"module\"",
        "\".\"",
        "\"abbr\"",
        "\"wide\"",
        "\"narrow\"",
        "'G'",
        "\"eraAbbr\"",
        "\"eraNames\"",
        "'y'",
        "'Q'",
        "'q'",
        "'M'",
        "'L'",
        "\"months\"",
        "'L'",
        "\"standAlone\"",
        "\"format\"",
        "\"-\"",
        "'w'",
        "'d'",
        "'D'",
        "'e'",
        "'c'",
        "'E'",
        "\"days\"",
        "'c'",
        "\"standAlone\"",
        "\"format\"",
        "\"-\"",
        "'a'",
        "'am'",
        "'pm'",
        "'dayPeriods-format-wide-'",
        "'h'",
        "'H'",
        "'K'",
        "'k'",
        "'h'",
        "'H'",
        "'K'",
        "'k'",
        "'m'",
        "'s'",
        "'S'",
        "'v'",
        "'z'",
        "'Z'",
        "\"+\"",
        "\"-\"",
        "\"GMT\"",
        "\":\"",
        "\"\"",
        "\"dojo.date.locale.format: invalid pattern char: \"",
        "'short'",
        "\"year\"",
        "\"dateFormatItem-yyyy\"",
        "\"yyyy\"",
        "\"date\"",
        "\"timeFormat-\"",
        "\"time\"",
        "\"dateFormat-\"",
        "\"dateTimeFormat-\"",
        "''",
        "'short'",
        "\"dateFormat-\"",
        "\"timeFormat-\"",
        "'date'",
        "'time'",
        "\"dateTimeFormat-\"",
        "\"^\"",
        "\"\"",
        "\"$\"",
        "\"\"",
        "\"i\"",
        "\"\"",
        "'abbr'",
        "'wide'",
        "'narrow'",
        "\"\"",
        "'y'",
        "''",
        "'M'",
        "'L'",
        "'months-'",
        "'L'",
        "'standAlone'",
        "'format'",
        "'-'",
        "\".\"",
        "\"\"",
        "\".\"",
        "\"\"",
        "'E'",
        "'e'",
        "'c'",
        "'days-'",
        "'c'",
        "'standAlone'",
        "'format'",
        "'-'",
        "'D'",
        "'d'",
        "'a'",
        "'dayPeriods-format-wide-am'",
        "'dayPeriods-format-wide-pm'",
        "''",
        "''",
        "''",
        "'p'",
        "'a'",
        "''",
        "'K'",
        "'h'",
        "'H'",
        "'k'",
        "'m'",
        "'s'",
        "'S'",
        "'p'",
        "'a'",
        "\"\"",
        "'d'",
        "'M'",
        "\"hour\"",
        "\"'\"",
        "''",
        "\"'\"",
        "''",
        "\" a\"",
        "\" ?a\"",
        "''",
        "''",
        "'0'",
        "'{'",
        "'}'",
        "'0'",
        "'{'",
        "'}'",
        "'0?'",
        "'0{0,2}'",
        "'y'",
        "'\\\\d{2,4}'",
        "'M'",
        "'L'",
        "'\\\\S+?'",
        "'1[0-2]|'",
        "'[1-9]'",
        "'D'",
        "'[12][0-9][0-9]|3[0-5][0-9]|36[0-6]|'",
        "'[1-9][0-9]|'",
        "'[1-9]'",
        "'d'",
        "'3[01]|[12]\\\\d|'",
        "'[1-9]'",
        "'w'",
        "'[1-4][0-9]|5[0-3]|'",
        "'[1-9]'",
        "'E'",
        "'e'",
        "'c'",
        "'\\\\S+'",
        "'h'",
        "'1[0-2]|'",
        "'[1-9]'",
        "'k'",
        "'1[01]|'",
        "'\\\\d'",
        "'H'",
        "'1\\\\d|2[0-3]|'",
        "'\\\\d'",
        "'K'",
        "'1\\\\d|2[0-4]|'",
        "'[1-9]'",
        "'m'",
        "'s'",
        "'[0-5]\\\\d'",
        "'S'",
        "'\\\\d{'",
        "'}'",
        "'a'",
        "'dayPeriods-format-wide-am'",
        "'dayPeriods-format-wide-pm'",
        "'|'",
        "'|'",
        "'|'",
        "'.'",
        "'|'",
        "\"\"",
        "\"\\\\.\"",
        "\".*\"",
        "\"(\"",
        "\")\"",
        "\"[\\\\s\\\\xa0]\"",
        "\".cldr\"",
        "\"gregorian\"",
        "'standAlone'",
        "'-'",
        "'format'",
        "'-'",
        "'url:dijit/templates/InlineEditBox.html'",
        "\"<span data-dojo-attach-point=\\\"editNode\\\" role=\\\"presentation\\\" class=\\\"dijitReset dijitInline dijitOffScreen\\\"\\n\\tdata-dojo-attach-event=\\\"onkeypress: _onKeyPress\\\"\\n\\t><span data-dojo-attach-point=\\\"editorPlaceholder\\\"></span\\n\\t><span data-dojo-attach-point=\\\"buttonContainer\\\"\\n\\t\\t><button data-dojo-type=\\\"dijit/form/Button\\\" data-dojo-props=\\\"label: '${buttonSave}', 'class': 'saveButton'\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"saveButton\\\" data-dojo-attach-event=\\\"onClick:save\\\"></button\\n\\t\\t><button data-dojo-type=\\\"dijit/form/Button\\\"  data-dojo-props=\\\"label: '${buttonCancel}', 'class': 'cancelButton'\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"cancelButton\\\" data-dojo-attach-event=\\\"onClick:cancel\\\"></button\\n\\t></span\\n></span>\\n\"",
        "'dijit/form/VerticalRule'",
        "\"dojo/_base/declare\"",
        "\"./HorizontalRule\"",
        "\"dijit.form.VerticalRule\"",
        "'<div class=\"dijitRuleContainer dijitRuleContainerV\"></div>'",
        "'<div class=\"dijitRuleMark dijitRuleMarkV\" style=\"top:'",
        "'dijit/form/_FormSelectWidget'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/Deferred\"",
        "\"dojo/aspect\"",
        "\"dojo/data/util/sorter\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"dojo/dom-class\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/_base/lang\"",
        "\"dojo/query\"",
        "\"dojo/when\"",
        "\"dojo/store/util/QueryResults\"",
        "\"./_FormValueWidget\"",
        "\"dijit.form._FormSelectWidget\"",
        "\"\"",
        "\"return this.getOptions(item);\"",
        "\"dojo.data.api.Notification\"",
        "\"onNew\"",
        "\"_onNewItem\"",
        "\"onDelete\"",
        "\"_onDeleteItem\"",
        "\"onSet\"",
        "\"_onSetItem\"",
        "\"store\"",
        "\"query\"",
        "\"queryOptions\"",
        "\"value\"",
        "\"_pendingValue\"",
        "'dijit.form.Select: '",
        "\"undefined\"",
        "\"undefined\"",
        "'selectedOptions'",
        "\"label\"",
        "'value'",
        "\"string\"",
        "\"value\"",
        "\"SelectedOption \"",
        "\"aria-selected\"",
        "\"true\"",
        "\"false\"",
        "\"\"",
        "\"> *\"",
        "\"type\"",
        "\"separator\"",
        "\"\"",
        "\"\"",
        "\"data-\"",
        "\"-value\"",
        "\"value\"",
        "\"selected\"",
        "\"disabled\"",
        "\"value\"",
        "\"string\"",
        "\"value\"",
        "\",\"",
        "\"onChange\"",
        "\"_updateSelection\"",
        "\"dojo.data.api.Identity\"",
        "'dijit/form/Select'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/_base/event\"",
        "\"dojo/i18n\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"./_FormSelectWidget\"",
        "\"../_HasDropDown\"",
        "\"../Menu\"",
        "\"../MenuItem\"",
        "\"../MenuSeparator\"",
        "\"../Tooltip\"",
        "\"dojo/text!./templates/Select.html\"",
        "\"dojo/i18n!./nls/validate\"",
        "\"dijit.form._SelectMenu\"",
        "\"div\"",
        "\"overflow-x: hidden; overflow-y: scroll\"",
        "\"dijitMenuTable\"",
        "\" dijitSelectMenu\"",
        "\"dijitReset dijitMenuTable\"",
        "\"role\"",
        "\"listbox\"",
        "\"role\"",
        "\"presentation\"",
        "\"onselectstart\"",
        "\"w\"",
        "\"100%\"",
        "\"dijit.form.Select\"",
        "\"dijitSelect dijitValidationTextBox\"",
        "\"ie\"",
        "\"disabled\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\"&#160;\"",
        "\"_menu\"",
        "\"Menu \"",
        "\"_setValueAttr\"",
        "\"role\"",
        "\"option\"",
        "\"value\"",
        "\"value\"",
        "\"required\"",
        "\"aria-required\"",
        "'options'",
        "'<span role=\"option\" class=\"dijitReset dijitInline '",
        "\"Label \"",
        "'\">'",
        "'</span>'",
        "\"state\"",
        "\"\"",
        "\"Error\"",
        "\"Incomplete\"",
        "\"aria-invalid\"",
        "\"false\"",
        "\"true\"",
        "\"\"",
        "\"message\"",
        "\"\"",
        "\"dijit.form\"",
        "\"validate\"",
        "\"onselectstart\"",
        "\"aria-expanded\"",
        "\"false\"",
        "\"FixedWidth \"",
        "\"\"",
        "'dijit/_editor/range'",
        "\"dijit/_editor/range\"",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/lang\"",
        "\"dojo/_base/window\"",
        "\"../main\"",
        "'nextSibling'",
        "'previousSibling'",
        "\"CONTROL\"",
        "'EndTo'",
        "'End'",
        "'Start'",
        "' '",
        "'inherit'",
        "'character'",
        "'character'",
        "'character'",
        "'Error when moving!'",
        "'StartToStart'",
        "'EndToEnd'",
        "\"dijit.range.W3CRange\"",
        "'setStart'",
        "'setStart'",
        "'setEnd'",
        "'setEnd'",
        "''",
        "'dojo/store/util/QueryResults'",
        "\"../../_base/array\"",
        "\"../../_base/lang\"",
        "\"../../_base/Deferred\"",
        "\"forEach\"",
        "\"forEach\"",
        "\"filter\"",
        "\"map\"",
        "\"dojo.store.util.QueryResults\"",
        "'dijit/form/_ListBase'",
        "\"dojo/_base/declare\"",
        "\"dojo/on\"",
        "\"dojo/window\"",
        "\"dijit.form._ListBase\"",
        "\"none\"",
        "\"none\"",
        "\"none\"",
        "\"none\"",
        "'dojo/DeferredList'",
        "\"./_base/kernel\"",
        "\"./_base/Deferred\"",
        "\"./_base/array\"",
        "'dojo/dnd/common'",
        "\"../_base/connect\"",
        "\"../_base/kernel\"",
        "\"../_base/lang\"",
        "\"../dom\"",
        "\"dojo.dnd\"",
        "\"Unique\"",
        "\" button textarea input select option \"",
        "\" \"",
        "\" \"",
        "'dijit/CalendarLite'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/cldr/supplemental\"",
        "\"dojo/date\"",
        "\"dojo/date/locale\"",
        "\"dojo/date/stamp\"",
        "\"dojo/dom\"",
        "\"dojo/dom-class\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dojo/string\"",
        "\"./_WidgetBase\"",
        "\"./_TemplatedMixin\"",
        "\"dojo/text!./templates/Calendar.html\"",
        "\"./hccss\"",
        "\"dijit.CalendarLite\"",
        "'<th class=\"dijitReset dijitCalendarDayLabelTemplate\" role=\"columnheader\" scope=\"col\"><span class=\"dijitCalendarDayLabel\">${d}</span></th>'",
        "'<td class=\"dijitReset\" role=\"gridcell\" data-dojo-attach-point=\"dateCells\"><span class=\"dijitCalendarDateLabel\" data-dojo-attach-point=\"dateLabels\"></span></td>'",
        "'<tr class=\"dijitReset dijitCalendarWeekTemplate\" role=\"row\">${d}${d}${d}${d}${d}${d}${d}</tr>'",
        "\"\"",
        "\"\"",
        "\"narrow\"",
        "\"0\"",
        "\"gridNode\"",
        "\"dijitCalendar\"",
        "\"object\"",
        "\"hour\"",
        "\"string\"",
        "\"value\"",
        "\"currentFocus\"",
        "\"undefined\"",
        "'value'",
        "\"value\"",
        "\"month\"",
        "'months'",
        "'wide'",
        "'standAlone'",
        "\"summary\"",
        "\"dijitCalendar\"",
        "\"Previous\"",
        "\"Next\"",
        "\"Current\"",
        "\"month\"",
        "\"date\"",
        "\"dijitCalendarCurrentDate \"",
        "\"dijitCalendarDisabledDate \"",
        "\"aria-disabled\"",
        "\"true\"",
        "\"dijitCalendarEnabledDate \"",
        "\"aria-disabled\"",
        "\"aria-selected\"",
        "\"false\"",
        "\" \"",
        "\"Month dijitCalendarDateTemplate\"",
        "\"month\"",
        "\"previous\"",
        "\"current\"",
        "\"next\"",
        "\"YearLabelNode\"",
        "'year'",
        "'value'",
        "\".locale\"",
        "\"_mddb\"",
        "'days'",
        "'standAlone'",
        "\"\"",
        "\"\"",
        "\"\"",
        "'currentFocus'",
        "\"onclick\"",
        "\"incrementMonth\"",
        "\"month\"",
        "\"decrementMonth\"",
        "\"month\"",
        "\"nextYearLabelNode\"",
        "\"year\"",
        "\"previousYearLabelNode\"",
        "\"year\"",
        "\"currentFocus\"",
        "\"month\"",
        "\"tabIndex\"",
        "\"webkit\"",
        "\"tabIndex\"",
        "\"-1\"",
        "\"tabIndex\"",
        "\"dijitCalendarDisabledDate\"",
        "'value'",
        "\"dijitCalendarSelectedDate\"",
        "\"aria-selected\"",
        "\"true\"",
        "\"false\"",
        "\"dijit.CalendarLite._MonthWidget\"",
        "'months'",
        "'wide'",
        "'standAlone'",
        "\"ie\"",
        "\"\"",
        "\"<div class='dijitSpacer'>\"",
        "\"<div>\"",
        "\"</div>\"",
        "\"\"",
        "\"</div>\"",
        "\"<div class='dijitCalendarMonthLabel dijitCalendarCurrentMonthLabel'>\"",
        "\"</div>\"",
        "'dijit/CheckedMenuItem'",
        "'url:dijit/templates/CheckedMenuItem.html'",
        "\"<tr class=\\\"dijitReset dijitMenuItem\\\" data-dojo-attach-point=\\\"focusNode\\\" role=\\\"menuitemcheckbox\\\" tabIndex=\\\"-1\\\" aria-checked=\\\"${checked}\\\">\\n\\t<td class=\\\"dijitReset dijitMenuItemIconCell\\\" role=\\\"presentation\\\">\\n\\t\\t<img src=\\\"${_blankGif}\\\" alt=\\\"\\\" class=\\\"dijitMenuItemIcon dijitCheckedMenuItemIcon\\\" data-dojo-attach-point=\\\"iconNode\\\"/>\\n\\t\\t<span class=\\\"dijitCheckedMenuItemIconChar\\\">&#10003;</span>\\n\\t</td>\\n\\t<td class=\\\"dijitReset dijitMenuItemLabel\\\" colspan=\\\"2\\\" data-dojo-attach-point=\\\"containerNode,labelNode\\\"></td>\\n\\t<td class=\\\"dijitReset dijitMenuItemAccelKey\\\" style=\\\"display: none\\\" data-dojo-attach-point=\\\"accelKeyNode\\\"></td>\\n\\t<td class=\\\"dijitReset dijitMenuArrowCell\\\" role=\\\"presentation\\\">&#160;</td>\\n</tr>\\n\"",
        "\"dijit/CheckedMenuItem\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"./MenuItem\"",
        "\"dojo/text!./templates/CheckedMenuItem.html\"",
        "\"./hccss\"",
        "\"dijit.CheckedMenuItem\"",
        "\"dijitCheckedMenuItemChecked\"",
        "\"aria-checked\"",
        "\"true\"",
        "\"false\"",
        "\"checked\"",
        "\"\"",
        "\"checked\"",
        "'dijit/form/VerticalRuleLabels'",
        "\"dojo/_base/declare\"",
        "\"./HorizontalRuleLabels\"",
        "\"dijit.form.VerticalRuleLabels\"",
        "'<div class=\"dijitRuleContainer dijitRuleContainerV dijitRuleLabelsContainer dijitRuleLabelsContainerV\"></div>'",
        "'<div class=\"dijitRuleLabelContainer dijitRuleLabelContainerV\" style=\"top:'",
        "'\"><span class=\"dijitRuleLabel dijitRuleLabelV\">'",
        "'dijit/Declaration'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/connect\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/lang\"",
        "\"dojo/parser\"",
        "\"dojo/query\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"./_WidgetsInTemplateMixin\"",
        "\"dojo/NodeList-dom\"",
        "\"dijit.Declaration\"",
        "\"\"",
        "\"> script[type^='dojo/method']\"",
        "\"> script[type^='dojo/connect']\"",
        "\"event\"",
        "\"data-dojo-event\"",
        "\"<\"",
        "\" class='\"",
        "\"'\"",
        "\" data-dojo-attach-point='\"",
        "\"data-dojo-attach-point\"",
        "\"dojoAttachPoint\"",
        "''",
        "\"' data-dojo-attach-event='\"",
        "\"data-dojo-attach-event\"",
        "\"dojoAttachEvent\"",
        "''",
        "\"' >\"",
        "\"{\"",
        "\"}\"",
        "\"</\"",
        "\">\"",
        "\"event\"",
        "\"data-dojo-event\"",
        "\"postscript\"",
        "'dijit/MenuSeparator'",
        "'url:dijit/templates/MenuSeparator.html'",
        "\"<tr class=\\\"dijitMenuSeparator\\\" role=\\\"separator\\\">\\n\\t<td class=\\\"dijitMenuSeparatorIconCell\\\">\\n\\t\\t<div class=\\\"dijitMenuSeparatorTop\\\"></div>\\n\\t\\t<div class=\\\"dijitMenuSeparatorBottom\\\"></div>\\n\\t</td>\\n\\t<td colspan=\\\"3\\\" class=\\\"dijitMenuSeparatorLabelCell\\\">\\n\\t\\t<div class=\\\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\\\"></div>\\n\\t\\t<div class=\\\"dijitMenuSeparatorBottom\\\"></div>\\n\\t</td>\\n</tr>\"",
        "\"dijit/MenuSeparator\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom\"",
        "\"./_WidgetBase\"",
        "\"./_TemplatedMixin\"",
        "\"./_Contained\"",
        "\"dojo/text!./templates/MenuSeparator.html\"",
        "\"dijit.MenuSeparator\"",
        "'dijit/form/_ComboBoxMenu'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-style\"",
        "\"dojo/keys\"",
        "\"../_WidgetBase\"",
        "\"../_TemplatedMixin\"",
        "\"./_ComboBoxMenuMixin\"",
        "\"./_ListMouseMixin\"",
        "\"dijit.form._ComboBoxMenu\"",
        "\"<div class='dijitReset dijitMenu' data-dojo-attach-point='containerNode' style='overflow: auto; overflow-x: hidden;' role='listbox'>\"",
        "\"<div class='dijitMenuItem dijitMenuPreviousButton' data-dojo-attach-point='previousButton' role='option'></div>\"",
        "\"<div class='dijitMenuItem dijitMenuNextButton' data-dojo-attach-point='nextButton' role='option'></div>\"",
        "\"</div>\"",
        "\"dijitComboBoxMenu\"",
        "\"dijitMenuItemRtl\"",
        "\"dijitMenuItemRtl\"",
        "\"role\"",
        "\"listbox\"",
        "\"div\"",
        "\"dijitReset dijitMenuItem\"",
        "\"\"",
        "\" dijitMenuItemRtl\"",
        "\"role\"",
        "\"option\"",
        "\"dijitMenuItemHover\"",
        "\"dijitMenuItemHover\"",
        "\"dijitMenuItemSelected\"",
        "\"dijitMenuItemSelected\"",
        "\"height\"",
        "\"none\"",
        "\"none\"",
        "'url:dijit/layout/templates/ScrollingTabController.html'",
        "\"<div class=\\\"dijitTabListContainer-${tabPosition}\\\" style=\\\"visibility:hidden\\\">\\n\\t<div data-dojo-type=\\\"dijit.layout._ScrollingTabControllerMenuButton\\\"\\n\\t\\t\\tclass=\\\"tabStripButton-${tabPosition}\\\"\\n\\t\\t\\tid=\\\"${id}_menuBtn\\\"\\n\\t\\t\\tdata-dojo-props=\\\"containerId: '${containerId}', iconClass: 'dijitTabStripMenuIcon',\\n\\t\\t\\t\\t\\tdropDownPosition: ['below-alt', 'above-alt']\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"_menuBtn\\\" showLabel=\\\"false\\\" title=\\\"\\\">&#9660;</div>\\n\\t<div data-dojo-type=\\\"dijit.layout._ScrollingTabControllerButton\\\"\\n\\t\\t\\tclass=\\\"tabStripButton-${tabPosition}\\\"\\n\\t\\t\\tid=\\\"${id}_leftBtn\\\"\\n\\t\\t\\tdata-dojo-props=\\\"iconClass:'dijitTabStripSlideLeftIcon', showLabel:false, title:''\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"_leftBtn\\\" data-dojo-attach-event=\\\"onClick: doSlideLeft\\\">&#9664;</div>\\n\\t<div data-dojo-type=\\\"dijit.layout._ScrollingTabControllerButton\\\"\\n\\t\\t\\tclass=\\\"tabStripButton-${tabPosition}\\\"\\n\\t\\t\\tid=\\\"${id}_rightBtn\\\"\\n\\t\\t\\tdata-dojo-props=\\\"iconClass:'dijitTabStripSlideRightIcon', showLabel:false, title:''\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"_rightBtn\\\" data-dojo-attach-event=\\\"onClick: doSlideRight\\\">&#9654;</div>\\n\\t<div class='dijitTabListWrapper' data-dojo-attach-point='tablistWrapper'>\\n\\t\\t<div role='tablist' data-dojo-attach-event='onkeypress:onkeypress'\\n\\t\\t\\t\\tdata-dojo-attach-point='containerNode' class='nowrapTabStrip'></div>\\n\\t</div>\\n</div>\"",
        "'dijit/Dialog'",
        "'url:dijit/templates/Dialog.html'",
        "\"<div class=\\\"dijitDialog\\\" role=\\\"dialog\\\" aria-labelledby=\\\"${id}_title\\\">\\n\\t<div data-dojo-attach-point=\\\"titleBar\\\" class=\\\"dijitDialogTitleBar\\\">\\n\\t\\t<span data-dojo-attach-point=\\\"titleNode\\\" class=\\\"dijitDialogTitle\\\" id=\\\"${id}_title\\\"\\n\\t\\t\\t\\trole=\\\"heading\\\" level=\\\"1\\\"></span>\\n\\t\\t<span data-dojo-attach-point=\\\"closeButtonNode\\\" class=\\\"dijitDialogCloseIcon\\\" data-dojo-attach-event=\\\"ondijitclick: onCancel\\\" title=\\\"${buttonCancel}\\\" role=\\\"button\\\" tabindex=\\\"0\\\">\\n\\t\\t\\t<span data-dojo-attach-point=\\\"closeText\\\" class=\\\"closeText\\\" title=\\\"${buttonCancel}\\\">x</span>\\n\\t\\t</span>\\n\\t</div>\\n\\t<div data-dojo-attach-point=\\\"containerNode\\\" class=\\\"dijitDialogPaneContent\\\"></div>\\n</div>\\n\"",
        "\"dijit/Dialog\"",
        "\"require\"",
        "\"dojo/_base/array\"",
        "\"dojo/_base/connect\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/Deferred\"",
        "\"dojo/dom\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/fx\"",
        "\"dojo/i18n\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"dojo/ready\"",
        "\"dojo/sniff\"",
        "\"dojo/window\"",
        "\"dojo/dnd/Moveable\"",
        "\"dojo/dnd/TimedMoveable\"",
        "\"./focus\"",
        "\"./_base/manager\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"./_CssStateMixin\"",
        "\"./form/_FormMixin\"",
        "\"./_DialogMixin\"",
        "\"./DialogUnderlay\"",
        "\"./layout/ContentPane\"",
        "\"dojo/text!./templates/Dialog.html\"",
        "\"./main\"",
        "\"dojo/i18n!./nls/common\"",
        "\"dijit._DialogBase\"",
        "\"dijitDialog\"",
        "\"dijitDialogCloseIcon\"",
        "\"titleNode\"",
        "\"innerHTML\"",
        "\"titleBar\"",
        "\"attribute\"",
        "\"draggable\"",
        "\"aria-describedby\"",
        "\"\"",
        "\"dijit\"",
        "\"common\"",
        "\"none\"",
        "\"absolute\"",
        "\"onExecute\"",
        "\"hide\"",
        "\"onCancel\"",
        "\"hide\"",
        "\"ie\"",
        "\"onMoveStop\"",
        "\"_endDrag\"",
        "\"dijitDialogFixed\"",
        "\"class\"",
        "\"class\"",
        "\"_underlay\"",
        "\" \"",
        "\"undefined\"",
        "\"auto\"",
        "\"auto\"",
        "\"undefined\"",
        "\"px\"",
        "\"px\"",
        "\"auto\"",
        "\"relative\"",
        "\"dojoMove\"",
        "\"px\"",
        "\"px\"",
        "\"dijitPopup\"",
        "\"opera\"",
        "\"scroll\"",
        "\"resize\"",
        "\"_onKey\"",
        "\"\"",
        "\"open\"",
        "'onHide'",
        "\"none\"",
        "\"open\"",
        "\"none\"",
        "\"touch\"",
        "\"dijit.Dialog\"",
        "'zIndex'",
        "'zIndex'",
        "'zIndex'",
        "\"dijit-legacy-requires\"",
        "\"dijit/TooltipDialog\"",
        "'dijit/form/MultiSelect'",
        "\"dijit/form/MultiSelect\"",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/query\"",
        "\"./_FormValueWidget\"",
        "\"dijit.form.MultiSelect\"",
        "\"<select multiple='true' ${!nameAttrSetting} data-dojo-attach-point='containerNode,focusNode' data-dojo-attach-event='onchange: _onChange'></select>\"",
        "'value'",
        "'value'",
        "\"option\"",
        "\"option\"",
        "\"option\"",
        "'value'",
        "'value'",
        "'value'",
        "\"textDir\"",
        "\"option\"",
        "'dijit/form/_DateTimeTextBox'",
        "\"dojo/date\"",
        "\"dojo/date/locale\"",
        "\"dojo/date/stamp\"",
        "\"dojo/_base/declare\"",
        "\"dojo/_base/lang\"",
        "\"./RangeBoundTextBox\"",
        "\"../_HasDropDown\"",
        "\"dojo/text!./templates/DropDownBox.html\"",
        "\"X\"",
        "\"dijit.form._DateTimeTextBox\"",
        "\"_buttonNode\"",
        "\"dijitDownArrowButton\"",
        "\"\"",
        "\"type\"",
        "\"text\"",
        "''",
        "\"parse\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\".locale\"",
        "'pattern'",
        "\"none\"",
        "\" dijitComboBoxOpenOnClick\"",
        "\"string\"",
        "\"string\"",
        "\"object\"",
        "\"string\"",
        "\"\"",
        "'value'",
        "\"value\"",
        "\"value\"",
        "'value'",
        "\"_popup\"",
        "'dijit/form/_ToggleButtonMixin'",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dijit.form._ToggleButtonMixin\"",
        "\"aria-pressed\"",
        "'checked'",
        "'checked'",
        "\"checked\"",
        "\"checked\"",
        "\"checked\"",
        "'checked'",
        "'checked'",
        "'checked'",
        "'dijit/Calendar'",
        "\"dojo/_base/array\"",
        "\"dojo/date\"",
        "\"dojo/date/locale\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dom-attr\"",
        "\"dojo/dom-class\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"./CalendarLite\"",
        "\"./_Widget\"",
        "\"./_CssStateMixin\"",
        "\"./_TemplatedMixin\"",
        "\"./form/DropDownButton\"",
        "\"dijit.Calendar\"",
        "\"decrementMonth\"",
        "\"dijitCalendarArrow\"",
        "\"incrementMonth\"",
        "\"dijitCalendarArrow\"",
        "\"previousYearLabelNode\"",
        "\"dijitCalendarPreviousYear\"",
        "\"nextYearLabelNode\"",
        "\"dijitCalendarNextYear\"",
        "\"dijit.Calendar:setValue() is deprecated.  Use set('value', ...) instead.\"",
        "\"\"",
        "\"2.0\"",
        "'value'",
        "\"_mddb\"",
        "\"_onMonthSelect\"",
        "\"onkeydown\"",
        "\"_onKeyDown\"",
        "\"onmouseover\"",
        "\"_onDayMouseOver\"",
        "\"onmouseout\"",
        "\"_onDayMouseOut\"",
        "\"onmousedown\"",
        "\"_onDayMouseDown\"",
        "\"onmouseup\"",
        "\"_onDayMouseUp\"",
        "\"dijitCalendarDateLabel\"",
        "\"dijitCalendarDisabledDate\"",
        "\"dijitCalendarHoveredDate\"",
        "\"dijitCalendarHoveredDate\"",
        "\"dijitCalendarActiveDate\"",
        "\" dijitCalendarActiveDate\"",
        "\"dijitCalendarDisabledDate\"",
        "\"dijitCalendarActiveDate\"",
        "\"dijitCalendarActiveDate\"",
        "\"day\"",
        "\"week\"",
        "\"year\"",
        "\"month\"",
        "\"month\"",
        "\"day\"",
        "\"value\"",
        "\"dijit.Calendar._MonthDropDownButton\"",
        "\"_mdd\"",
        "'months'",
        "'wide'",
        "'standAlone'",
        "\"months\"",
        "\"ie\"",
        "\"\"",
        "\"<div class='dijitSpacer'>\"",
        "\"</div>\"",
        "\"<div class='dijitCalendarMonthLabel dijitCalendarCurrentMonthLabel'>\"",
        "\"</div>\"",
        "\"dijit.Calendar._MonthDropDown\"",
        "\"<div class='dijitCalendarMonthMenu dijitMenu' \"",
        "\"data-dojo-attach-event='onclick:_onClick,onmouseover:_onMenuHover,onmouseout:_onMenuHover'></div>\"",
        "\"<div class='dijitCalendarMonthLabel' month='\"",
        "\"'>\"",
        "\"</div>\"",
        "\"\"",
        "\"\"",
        "\"month\"",
        "\"dijitCalendarMonthLabelHover\"",
        "\"mouseover\"",
        "'url:dijit/form/templates/Select.html'",
        "\"<table class=\\\"dijit dijitReset dijitInline dijitLeft\\\"\\n\\tdata-dojo-attach-point=\\\"_buttonNode,tableNode,focusNode,_popupStateNode\\\" cellspacing='0' cellpadding='0'\\n\\trole=\\\"listbox\\\" aria-haspopup=\\\"true\\\"\\n\\t><tbody role=\\\"presentation\\\"><tr role=\\\"presentation\\\"\\n\\t\\t><td class=\\\"dijitReset dijitStretch dijitButtonContents\\\" role=\\\"presentation\\\"\\n\\t\\t\\t><div class=\\\"dijitReset dijitInputField dijitButtonText\\\"  data-dojo-attach-point=\\\"containerNode\\\" role=\\\"presentation\\\"></div\\n\\t\\t\\t><div class=\\\"dijitReset dijitValidationContainer\\\"\\n\\t\\t\\t\\t><input class=\\\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\\\" value=\\\"&#935; \\\" type=\\\"text\\\" tabIndex=\\\"-1\\\" readonly=\\\"readonly\\\" role=\\\"presentation\\\"\\n\\t\\t\\t/></div\\n\\t\\t\\t><input type=\\\"hidden\\\" ${!nameAttrSetting} data-dojo-attach-point=\\\"valueNode\\\" value=\\\"${value}\\\" aria-hidden=\\\"true\\\"\\n\\t\\t/></td\\n\\t\\t><td class=\\\"dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer\\\"\\n\\t\\t\\tdata-dojo-attach-point=\\\"titleNode\\\" role=\\\"presentation\\\"\\n\\t\\t\\t><input class=\\\"dijitReset dijitInputField dijitArrowButtonInner\\\" value=\\\"&#9660; \\\" type=\\\"text\\\" tabIndex=\\\"-1\\\" readonly=\\\"readonly\\\" role=\\\"presentation\\\"\\n\\t\\t\\t\\t${_buttonInputDisabled}\\n\\t\\t/></td\\n\\t></tr></tbody\\n></table>\\n\"",
        "'dijit/_editor/selection'",
        "\"dojo/dom\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dojo/_base/window\"",
        "\"../main\"",
        "\"text\"",
        "\"control\"",
        "\"\"",
        "'control'",
        "\"\"",
        "\"div\"",
        "'control'",
        "\"control\"",
        "\"control\"",
        "\"\"",
        "\"none\"",
        "\"opera\"",
        "\"opera\"",
        "\"\"",
        "\"img\"",
        "\"table\"",
        "\"EndToStart\"",
        "\"dijit._editor.selection\"",
        "'dojo/fx'",
        "\"./_base/lang\"",
        "\"./Evented\"",
        "\"./_base/kernel\"",
        "\"./_base/array\"",
        "\"./_base/connect\"",
        "\"./_base/fx\"",
        "\"./dom\"",
        "\"./dom-style\"",
        "\"./dom-geometry\"",
        "\"./ready\"",
        "\"require\"",
        "\"./fx/Toggler\"",
        "\"onAnimate\"",
        "\"onEnd\"",
        "\"onAnimate\"",
        "\"_onAnimate\"",
        "\"onEnd\"",
        "\"_onEnd\"",
        "\"playing\"",
        "\"beforeBegin\"",
        "\"beforeBegin\"",
        "\"onBegin\"",
        "\"onBegin\"",
        "\"onPlay\"",
        "\"onPlay\"",
        "\"onAnimate\"",
        "\"_onAnimate\"",
        "\"onEnd\"",
        "\"_onEnd\"",
        "\"onPause\"",
        "\"onPause\"",
        "\"onStop\"",
        "\"onStop\"",
        "\"stopped\"",
        "\"onEnd\"",
        "\"_onEnd\"",
        "\"beforeBegin\"",
        "\"onBegin\"",
        "\"onPlay\"",
        "\"onAnimate\"",
        "\"onPause\"",
        "\"onStop\"",
        "\"onEnd\"",
        "\"onEnd\"",
        "\"play\"",
        "\"play\"",
        "\"pause\"",
        "\"pause\"",
        "\"gotoPercent\"",
        "\"stop\"",
        "\"stop\"",
        "\"hidden\"",
        "\"hidden\"",
        "\"none\"",
        "\"1px\"",
        "\"\"",
        "\"\"",
        "\"height\"",
        "\"auto\"",
        "\"onStop\"",
        "\"onEnd\"",
        "\"beforeBegin\"",
        "\"hidden\"",
        "\"\"",
        "\"auto\"",
        "\"none\"",
        "\"onStop\"",
        "\"onEnd\"",
        "'absolute'",
        "'absolute'",
        "'absolute'",
        "'relative'",
        "\"absolute\"",
        "\"px\"",
        "\"px\"",
        "\"beforeBegin\"",
        "'dijit/_DialogMixin'",
        "\"dijit/_DialogMixin\"",
        "\"dojo/_base/declare\"",
        "\"./a11y\"",
        "\"dijit._DialogMixin\"",
        "'value'",
        "'dijit/Tree'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/connect\"",
        "\"dojo/cookie\"",
        "\"dojo/_base/declare\"",
        "\"dojo/Deferred\"",
        "\"dojo/DeferredList\"",
        "\"dojo/dom\"",
        "\"dojo/dom-class\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/_base/event\"",
        "\"dojo/errors/create\"",
        "\"dojo/fx\"",
        "\"dojo/_base/kernel\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/on\"",
        "\"dojo/topic\"",
        "\"dojo/touch\"",
        "\"dojo/when\"",
        "\"./focus\"",
        "\"./registry\"",
        "\"./_base/manager\"",
        "\"./_Widget\"",
        "\"./_TemplatedMixin\"",
        "\"./_Container\"",
        "\"./_Contained\"",
        "\"./_CssStateMixin\"",
        "\"dojo/text!./templates/TreeNode.html\"",
        "\"dojo/text!./templates/Tree.html\"",
        "\"./tree/TreeStoreModel\"",
        "\"./tree/ForestStoreModel\"",
        "\"./tree/_dndSelector\"",
        "\"dijit._TreeNode\"",
        "\"\"",
        "\"labelNode\"",
        "\"innerText\"",
        "\"UNCHECKED\"",
        "\"dijitTreeNode\"",
        "\"dijitTreeRow\"",
        "\"rowNode\"",
        "\"attribute\"",
        "\"title\"",
        "\"aria-expanded\"",
        "\"px\"",
        "\"backgroundPosition\"",
        "\" 0px\"",
        "\"paddingLeft\"",
        "\"paddingRight\"",
        "\"indent\"",
        "\"indent\"",
        "\"LOADING\"",
        "\"icon\"",
        "\"Icon\"",
        "\"label\"",
        "\"Label\"",
        "\"row\"",
        "\"Row\"",
        "\"_\"",
        "\"Class\"",
        "\"Node\"",
        "\"get\"",
        "\"Class\"",
        "\"\"",
        "\"\"",
        "\"get\"",
        "\"Style\"",
        "\"none\"",
        "\"dijitTreeIsRoot\"",
        "\"dijitTreeIsLast\"",
        "\"dijitTreeExpandoLoading\"",
        "\"dijitTreeExpandoOpened\"",
        "\"dijitTreeExpandoClosed\"",
        "\"dijitTreeExpandoLeaf\"",
        "\"*\"",
        "\"-\"",
        "\"+\"",
        "\"*\"",
        "\"aria-expanded\"",
        "\"true\"",
        "\"role\"",
        "\"group\"",
        "'dijitTreeContentExpanded'",
        "\"aria-expanded\"",
        "\"true\"",
        "\"aria-expanded\"",
        "\"false\"",
        "\"aria-expanded\"",
        "\"false\"",
        "'dijitTreeContentExpanded'",
        "\"LOADED\"",
        "'indent'",
        "\"tabIndex\"",
        "\"0\"",
        "\"aria-selected\"",
        "\"true\"",
        "\"false\"",
        "\"dijitTreeRowSelected\"",
        "\"tabIndex\"",
        "\"0\"",
        "\"-1\"",
        "\"textDir\"",
        "\"\"",
        "\"textDir\"",
        "\"dijit.Tree\"",
        "\"\"",
        "\"children\"",
        "\"onDndDrop\"",
        "\"itemCreator\"",
        "\"onDndCancel\"",
        "\"checkAcceptance\"",
        "\"checkItemAcceptance\"",
        "\"dragThreshold\"",
        "\"betweenThreshold\"",
        "\"SaveStateCookie\"",
        "\".dijitTreeNode\"",
        "\".dijitTreeNode\"",
        "\".dijitTreeRow\"",
        "\"click\"",
        "\".dijitTreeRow\"",
        "\"dblclick\"",
        "\".dijitTreeNode\"",
        "\"keypress\"",
        "\".dijitTreeNode\"",
        "\"keydown\"",
        "\".dijitTreeRow\"",
        "\"focusin\"",
        "\"onChange\"",
        "\"_onItemChange\"",
        "\"onChildrenChange\"",
        "\"_onItemChildrenChange\"",
        "\"onDelete\"",
        "\"_onItemDelete\"",
        "\"paths\"",
        "\"onLoad\"",
        "\"Tree: from version 2.0, should specify a model object rather than a store/query\"",
        "\"_ForestStoreModel\"",
        "\"mayHaveChildren\"",
        "\"none\"",
        "\"role\"",
        "\"presentation\"",
        "\"aria-expanded\"",
        "\"aria-multiselectable\"",
        "\"aria-label\"",
        "\"aria-label\"",
        "\"aria-label\"",
        "\"aria-label\"",
        "\"aria-labelledby\"",
        "\"aria-labelledby\"",
        "\"aria-labelledby\"",
        "\"aria-labelledby\"",
        "\"role\"",
        "\"presentation\"",
        "\"role\"",
        "\"tree\"",
        "\"aria-expanded\"",
        "\"true\"",
        "\"aria-multiselectable\"",
        "\"aria-multiselectable\"",
        "\": error loading root: \"",
        "'selectedItems'",
        "'selectedNodes'",
        "\"paths\"",
        "\"paths\"",
        "\"Empty path\"",
        "\"Could not expand path at \"",
        "\"selectedNodes\"",
        "'selectedNodes'",
        "\"collapseAllDeferred\"",
        "\"dijitFolderOpened\"",
        "\"dijitFolderClosed\"",
        "\"dijitLeaf\"",
        "\"\"",
        "\" \"",
        "\"_onEnterKey\"",
        "\"_onLeftArrow\"",
        "\"_onRightArrow\"",
        "\"_onUpArrow\"",
        "\"_onDownArrow\"",
        "\"_onHomeKey\"",
        "\"_onEndKey\"",
        "\"execute\"",
        "\"execute\"",
        "\"execute\"",
        "\"LOADING\"",
        "\": error loading \"",
        "\" children: \"",
        "','",
        "\"/\"",
        "\",\"",
        "'indent'",
        "\"_adjustWidths\"",
        "\"auto\"",
        "\"px\"",
        "\"textDir\"",
        "\"textDir\"",
        "\"TreePathError\"",
        "'dijit/form/HorizontalSlider'",
        "\"dojo/_base/array\"",
        "\"dojo/_base/declare\"",
        "\"dojo/dnd/move\"",
        "\"dojo/_base/event\"",
        "\"dojo/_base/fx\"",
        "\"dojo/dom-geometry\"",
        "\"dojo/dom-style\"",
        "\"dojo/keys\"",
        "\"dojo/_base/lang\"",
        "\"dojo/sniff\"",
        "\"dojo/dnd/Moveable\"",
        "\"dojo/dnd/Mover\"",
        "\"dojo/query\"",
        "\"dojo/mouse\"",
        "\"../registry\"",
        "\"../focus\"",
        "\"../typematic\"",
        "\"./Button\"",
        "\"./_FormValueWidget\"",
        "\"../_Container\"",
        "\"dojo/text!./templates/HorizontalSlider.html\"",
        "\"dijit.form._SliderMover\"",
        "\"_setPixelValue\"",
        "\"dijit.form.HorizontalSlider\"",
        "\"\"",
        "\"dijitSlider\"",
        "\"dijitSliderIncrementButton\"",
        "\"dijitSliderDecrementButton\"",
        "\"dijitSliderThumb\"",
        "\"pageX\"",
        "\"w\"",
        "\"x\"",
        "\"left\"",
        "\"width\"",
        "\"ie\"",
        "\"value\"",
        "\"aria-valuenow\"",
        "\"stopped\"",
        "\"%\"",
        "\"%\"",
        "\"%\"",
        "\"%\"",
        "\"decrement\"",
        "\"increment\"",
        "\"\"",
        "\"\"",
        "'label[for=\"'",
        "'\"]'",
        "\"_label\"",
        "\"aria-labelledby\"",
        "\"aria-valuemin\"",
        "\"aria-valuemax\"",
        "\"_typematicCallback\"",
        "\"_typematicCallback\"",
        "\"_mouseWheeled\"",
        "\"stopped\"",
        "'*now'",
        "'dojo/i18n!*preload*dijit/nls/dijit-all*[\"ar\",\"ca\",\"cs\",\"da\",\"de\",\"el\",\"en-gb\",\"en-us\",\"es-es\",\"fi-fi\",\"fr-fr\",\"he-il\",\"hu\",\"it-it\",\"ja-jp\",\"ko-kr\",\"nl-nl\",\"nb\",\"pl\",\"pt-br\",\"pt-pt\",\"ru\",\"sk\",\"sl\",\"sv\",\"th\",\"tr\",\"zh-tw\",\"zh-cn\",\"ROOT\"]'",
        "\"dijit/dijit-all\"",
        "\"./main\"",
        "\"./dijit\"",
        "\"./ColorPalette\"",
        "\"./Declaration\"",
        "\"./Dialog\"",
        "\"./DialogUnderlay\"",
        "\"./TooltipDialog\"",
        "\"./Editor\"",
        "\"./_editor/plugins/FontChoice\"",
        "\"./_editor/plugins/LinkDialog\"",
        "\"./Menu\"",
        "\"./MenuItem\"",
        "\"./PopupMenuItem\"",
        "\"./CheckedMenuItem\"",
        "\"./MenuBar\"",
        "\"./MenuBarItem\"",
        "\"./PopupMenuBarItem\"",
        "\"./MenuSeparator\"",
        "\"./ProgressBar\"",
        "\"./TitlePane\"",
        "\"./Toolbar\"",
        "\"./Tooltip\"",
        "\"./Tree\"",
        "\"./InlineEditBox\"",
        "\"./form/Form\"",
        "\"./form/Button\"",
        "\"./form/DropDownButton\"",
        "\"./form/ComboButton\"",
        "\"./form/ToggleButton\"",
        "\"./form/CheckBox\"",
        "\"./form/RadioButton\"",
        "\"./form/TextBox\"",
        "\"./form/ValidationTextBox\"",
        "\"./form/CurrencyTextBox\"",
        "\"./form/DateTextBox\"",
        "\"./form/TimeTextBox\"",
        "\"./form/NumberSpinner\"",
        "\"./form/NumberTextBox\"",
        "\"./form/ComboBox\"",
        "\"./form/FilteringSelect\"",
        "\"./form/MultiSelect\"",
        "\"./form/Select\"",
        "\"./form/HorizontalSlider\"",
        "\"./form/VerticalSlider\"",
        "\"./form/HorizontalRule\"",
        "\"./form/VerticalRule\"",
        "\"./form/HorizontalRuleLabels\"",
        "\"./form/VerticalRuleLabels\"",
        "\"./form/SimpleTextarea\"",
        "\"./form/Textarea\"",
        "\"./layout/AccordionContainer\"",
        "\"./layout/ContentPane\"",
        "\"./layout/BorderContainer\"",
        "\"./layout/LayoutContainer\"",
        "\"./layout/LinkPane\"",
        "\"./layout/SplitContainer\"",
        "\"./layout/StackContainer\"",
        "\"./layout/TabContainer\"",
        "\"dijit-all may include much more code than your application actually requires. We strongly recommend that you investigate a custom build or the web build tool\""
    ],
    "variables": [
        "_FontDropDown",
        "name",
        "_FontNameDropDown",
        "_FontSizeDropDown",
        "pixels",
        "_FormatBlockDropDown",
        "start",
        "end",
        "sel",
        "node",
        "tag",
        "processChildren",
        "i",
        "c",
        "tag",
        "unformatNodes",
        "clearNodes",
        "block",
        "html",
        "FontChoice",
        "clazz",
        "editor",
        "_e",
        "_c",
        "disabled",
        "value",
        "quoted",
        "elem",
        "sel",
        "tg",
        "TextBox",
        "s",
        "ff",
        "inputs",
        "i",
        "parent",
        "r",
        "currency",
        "bundle",
        "iso",
        "data",
        "ScrollingTabController",
        "n",
        "button",
        "children",
        "leftTab",
        "rightTab",
        "tabsWidth",
        "cb",
        "enable",
        "maxScroll",
        "tab",
        "node",
        "sl",
        "children",
        "scrollNodeWidth",
        "containerWidth",
        "maxPossibleScroll",
        "tabsWidth",
        "onlyScrollPosition",
        "w",
        "n",
        "scrollNodeWidth",
        "scrollBounds",
        "pos",
        "scrollBounds",
        "w",
        "anim",
        "oldS",
        "newS",
        "n",
        "sWidth",
        "d",
        "to",
        "scrollBounds",
        "ScrollingTabControllerButtonMixin",
        "container",
        "menuItem",
        "os",
        "viewport",
        "exports",
        "escape",
        "output",
        "lName",
        "attrarray",
        "attrhash",
        "attr",
        "i",
        "n",
        "v",
        "clone",
        "s",
        "rgxp_attrsMatch",
        "attrSplit",
        "idx",
        "key",
        "val",
        "match",
        "j",
        "output",
        "nodes",
        "checkParent",
        "node",
        "i",
        "dropDown",
        "overMenu",
        "c",
        "t",
        "menuItem",
        "defaultPos",
        "keyboardEventNode",
        "d",
        "target",
        "d",
        "focusMe",
        "d",
        "afterLoad",
        "dropDown",
        "ddNode",
        "aroundNode",
        "myStyle",
        "maxHeight",
        "viewport",
        "position",
        "mb",
        "overHeight",
        "retVal",
        "store",
        "h",
        "store",
        "getChildren",
        "childItems",
        "i",
        "vals",
        "_waitCount",
        "pInfo",
        "LnewItem",
        "store",
        "parentAttr",
        "values",
        "childItems",
        "ne",
        "r",
        "h",
        "liparent",
        "block",
        "r",
        "fc",
        "newrange",
        "selection",
        "selection",
        "newrange",
        "startNode",
        "endNode",
        "brNode",
        "doc",
        "br",
        "rs",
        "txt",
        "parent",
        "header",
        "offset",
        "targetNode",
        "brNode",
        "endNode",
        "_letBrowserHandle",
        "block",
        "blockNode",
        "newblock",
        "endOffset",
        "node",
        "ret",
        "firstNodeMoved",
        "nodeToMove",
        "tNode",
        "parentC",
        "tg",
        "newTg",
        "nodeForCursor",
        "innerMostFirstNodeMoved",
        "firstNodeMoved",
        "para",
        "widget",
        "matches",
        "topMenu",
        "parentMenu",
        "itemPopup",
        "top",
        "from_item",
        "popup",
        "scope",
        "oldChildren",
        "_MenuBarItemMixin",
        "hideNode",
        "wipeNode",
        "anim",
        "node",
        "oldCls",
        "menuitem",
        "labelObject",
        "menuitem",
        "displayMore",
        "container",
        "key",
        "doSearch",
        "_this",
        "query",
        "options",
        "qs",
        "q",
        "startQuery",
        "resPromise",
        "pageSize",
        "tc",
        "v",
        "gotMax",
        "gotMin",
        "newval",
        "value",
        "AccordionButton",
        "titleTextNodeId",
        "parent",
        "AccordionInnerContainer",
        "child",
        "cls",
        "button",
        "cw",
        "AccordionContainer",
        "openPane",
        "wrapperDomNode",
        "wrapperDomNodeMargin",
        "wrapperDomNodePadBorder",
        "wrapperContainerNode",
        "wrapperContainerNodeMargin",
        "wrapperContainerNodePadBorder",
        "mySize",
        "totalCollapsedHeight",
        "refNode",
        "children",
        "d",
        "newContents",
        "oldContents",
        "wrapperContainerNode",
        "wrapperContainerNodeMargin",
        "wrapperContainerNodePadBorder",
        "animationHeightOverhead",
        "c",
        "requires",
        "SplitContainer",
        "sizer",
        "h",
        "i",
        "sizer",
        "thumb",
        "i",
        "children",
        "children",
        "space",
        "outOf",
        "pixPerUnit",
        "totalSize",
        "size",
        "pos",
        "size",
        "box",
        "totalMinSize",
        "totalSize",
        "children",
        "growth",
        "children",
        "delta",
        "delta",
        "h",
        "pos",
        "cookieName",
        "cookieValue",
        "pos",
        "pos",
        "tr",
        "ntr",
        "key",
        "pw",
        "highlighted",
        "newvalue",
        "fn",
        "caseFilter",
        "cpos",
        "wasSelected",
        "newvalue",
        "pw",
        "value",
        "newValue",
        "item",
        "popupId",
        "dropDownConstructor",
        "srcNodeRef",
        "item",
        "valueField",
        "label",
        "label",
        "labelType",
        "modifiers",
        "i",
        "val",
        "deferred",
        "deferred",
        "fetchHandle",
        "store",
        "clazz",
        "shim",
        "_TextBoxMixin",
        "filteredValue",
        "handleEvent",
        "charOrCode",
        "named",
        "faux",
        "attr",
        "v",
        "maxLength",
        "value",
        "overflow",
        "textarea",
        "pos",
        "cr",
        "nodes",
        "node",
        "TimePicker",
        "nodes",
        "lastValue",
        "n",
        "i",
        "start",
        "max",
        "chk",
        "dec",
        "inc",
        "fromIso",
        "sinceMidnight",
        "clickableIncrementSeconds",
        "visibleIncrementSeconds",
        "visibleRangeSeconds",
        "time",
        "count",
        "after",
        "moreAfter",
        "estBeforeLength",
        "before",
        "date",
        "incrementDate",
        "dateString",
        "div",
        "tdate",
        "tgr",
        "tgr",
        "index",
        "divs",
        "index",
        "divs",
        "timeMenu",
        "tgt",
        "InlineEditor",
        "Cls",
        "srcStyle",
        "editStyle",
        "destStyle",
        "textStyle",
        "wrapperStyle",
        "width",
        "editorParams",
        "ew",
        "ew",
        "InlineEditBox",
        "events",
        "placeholder",
        "Ewc",
        "ww",
        "ew",
        "ww",
        "ww",
        "value",
        "renderVal",
        "exports",
        "viewport",
        "doc",
        "maxScrollTop",
        "Infinity",
        "maxScrollLeft",
        "Infinity",
        "html",
        "v",
        "html",
        "dx",
        "dy",
        "b",
        "t",
        "w",
        "h",
        "rx",
        "ry",
        "dx",
        "dy",
        "oldLeft",
        "oldTop",
        "n",
        "s",
        "overflow",
        "overflowX",
        "overflowY",
        "ary",
        "widget",
        "oldOnMove",
        "_t",
        "selectedNode",
        "hoveredNode",
        "time",
        "monetary",
        "placesData",
        "roundingData",
        "places",
        "round",
        "c",
        "ret",
        "matches",
        "exp",
        "d",
        "updatedCookie",
        "propName",
        "propValue",
        "tip",
        "ap",
        "percent",
        "NumberTextBoxMixin",
        "places",
        "val",
        "formattedValue",
        "formattedValue",
        "v",
        "v",
        "val",
        "v",
        "n",
        "v",
        "NumberTextBox",
        "val",
        "ColorPalette",
        "html",
        "v",
        "LayoutContainer",
        "MasterTooltip",
        "pos",
        "aroundNodeCoords",
        "heightAvailable",
        "widthAvailable",
        "size",
        "width",
        "bb",
        "tooltipConnectorHeight",
        "aroundNodePlacement",
        "Tooltip",
        "node",
        "selector",
        "delegatedEvent",
        "id",
        "id",
        "idx",
        "ids",
        "content",
        "nodes",
        "dropDownNode",
        "dropDown",
        "dropDown",
        "handler",
        "date",
        "month",
        "days",
        "year",
        "tz",
        "match",
        "pos",
        "pat",
        "sum",
        "fixOvershoot",
        "property",
        "days",
        "weeks",
        "mod",
        "strt",
        "adj",
        "trgt",
        "yearDiff",
        "delta",
        "m1",
        "m2",
        "q1",
        "q2",
        "days",
        "weeks",
        "mod",
        "adj",
        "aDay",
        "bDay",
        "dtMark",
        "dayMark",
        "parent",
        "candidateWidgets",
        "otherVisibleNodes",
        "widget",
        "cn",
        "mb",
        "cb",
        "node",
        "parent",
        "RangeBoundTextBox",
        "val",
        "outOfRange",
        "min",
        "max",
        "v",
        "RichText",
        "exec",
        "ctrlKeyHandlers",
        "key",
        "formats",
        "localhtml",
        "format",
        "i",
        "style",
        "div",
        "inject",
        "node",
        "nativename",
        "dn",
        "html",
        "ta",
        "tmpFunc",
        "s",
        "resetValue",
        "current",
        "saveTextarea",
        "datas",
        "i",
        "dat",
        "data",
        "id",
        "f",
        "ifr",
        "src",
        "s",
        "_cs",
        "html",
        "font",
        "lineHeight",
        "userStyle",
        "s",
        "i",
        "sC",
        "c",
        "label",
        "title",
        "files",
        "text",
        "i",
        "url",
        "abstring",
        "url",
        "head",
        "stylesheet",
        "url",
        "index",
        "preventIEfocus",
        "ps",
        "n",
        "_this",
        "events",
        "ap",
        "t",
        "setContent",
        "c",
        "handlers",
        "args",
        "arguments",
        "newValue",
        "command",
        "ca",
        "ie",
        "mozilla",
        "webkit",
        "opera",
        "supportedBy",
        "returnValue",
        "implFunc",
        "implFunc",
        "r",
        "oldValue",
        "isvalid",
        "first",
        "tg",
        "isvalid",
        "last",
        "node",
        "ec",
        "html",
        "ec",
        "saveTextarea",
        "s",
        "elem",
        "enabled",
        "sel",
        "enabled",
        "enabled",
        "enabled",
        "sel",
        "enabled",
        "sel",
        "enabled",
        "a",
        "returnValue",
        "isApplied",
        "isApplied",
        "isApplied",
        "rv",
        "insertRange",
        "n",
        "insertRange",
        "selection",
        "div",
        "node",
        "lastNode",
        "n",
        "applied",
        "applied",
        "applied",
        "applied",
        "applied",
        "applied",
        "isApplied",
        "isApplied",
        "applied",
        "applied",
        "h",
        "i",
        "size",
        "parent",
        "selection",
        "firstNode",
        "startOffset",
        "lastNode",
        "selection",
        "doc",
        "rs",
        "ret",
        "txt",
        "startNode",
        "endNode",
        "breaker",
        "sNode",
        "isApplied",
        "nNames",
        "fs",
        "offset",
        "topNode",
        "tName",
        "newblock",
        "nodeToMove",
        "tNode",
        "endOffset",
        "endText",
        "parentC",
        "tagList",
        "tagData",
        "tg",
        "newTg",
        "newrange",
        "newContTag",
        "newTgNode",
        "offset",
        "endText",
        "newrange",
        "selection",
        "sc",
        "lType",
        "li",
        "newrange",
        "selection",
        "doc",
        "rs",
        "ret",
        "txt",
        "startNode",
        "endNode",
        "breaker",
        "sNode",
        "offset",
        "endText",
        "extraSpan",
        "newrange",
        "style",
        "Moveable",
        "i",
        "s",
        "newC",
        "aroundNodeCoords",
        "node",
        "singleFocusItem",
        "queryObject",
        "query",
        "required",
        "results",
        "sortSet",
        "sort",
        "i",
        "aValue",
        "bValue",
        "total",
        "body",
        "te",
        "needsHelpShrinking",
        "textarea",
        "textarea",
        "textarea",
        "empty",
        "sh",
        "newH",
        "newHpx",
        "origScrollHeight",
        "newScrollHeight",
        "origScrollHeight",
        "origMinHeight",
        "decrement",
        "thisScrollHeight",
        "origScrollTop",
        "change",
        "label",
        "_MenuBarItemMixin",
        "MenuBarItem",
        "TabButton",
        "n",
        "_nlsResources",
        "_nlsResources",
        "TabController",
        "closeMenu",
        "_nlsResources",
        "controller",
        "button",
        "supplemental",
        "firstDay",
        "country",
        "dow",
        "tags",
        "region",
        "weekendStart",
        "weekendEnd",
        "country",
        "start",
        "end",
        "l",
        "prev_item",
        "showpopup",
        "StackButton",
        "StackController",
        "button",
        "target",
        "containerNode",
        "pane2button",
        "paneToButtonAttr",
        "connectFunc",
        "button",
        "Cls",
        "button",
        "button",
        "oldButton",
        "newButton",
        "container",
        "button",
        "container",
        "container",
        "b",
        "children",
        "idx",
        "current",
        "child",
        "forward",
        "children",
        "idx",
        "child",
        "children",
        "idx",
        "child",
        "h",
        "d",
        "m",
        "s",
        "l",
        "t",
        "h",
        "m",
        "b",
        "bs",
        "bm",
        "bc",
        "h",
        "innerHTML",
        "i",
        "interval",
        "cls",
        "TabController",
        "inc",
        "key",
        "wheelDelta",
        "scrollAmount",
        "node",
        "requires",
        "ok",
        "sourceLabel",
        "constrainedMoveable",
        "c",
        "mb",
        "c",
        "s",
        "boxConstrainedMoveable",
        "box",
        "parentConstrainedMoveable",
        "area",
        "n",
        "s",
        "mb",
        "t",
        "sc",
        "titleAlign",
        "children",
        "s",
        "width",
        "faux",
        "fp",
        "data",
        "index",
        "idProperty",
        "id",
        "index",
        "data",
        "i",
        "l",
        "Editor",
        "args",
        "o",
        "pc",
        "areaHeight",
        "outsideClientArea",
        "b",
        "clientWidth",
        "clientHeight",
        "clientLeft",
        "offsetWidth",
        "offsetHeight",
        "offsetLeft",
        "r",
        "r",
        "sub",
        "accel",
        "bookmark",
        "mark",
        "col",
        "r",
        "sNode",
        "eNode",
        "sel",
        "b",
        "ret",
        "s",
        "ret",
        "s",
        "b",
        "tmp",
        "mark",
        "sel",
        "v",
        "k",
        "requires",
        "requires",
        "StackContainer",
        "children",
        "selected",
        "selected",
        "children",
        "d",
        "d",
        "children",
        "index",
        "child",
        "children",
        "remove",
        "regexp",
        "b",
        "i",
        "LinkDialog",
        "_this",
        "messages",
        "dropDown",
        "value",
        "url",
        "fixupUrl",
        "appendHttp",
        "appendMailto",
        "sel",
        "a",
        "url",
        "text",
        "target",
        "a",
        "b",
        "fc",
        "sel",
        "t",
        "tg",
        "editor",
        "button",
        "ImgLinkDialog",
        "url",
        "text",
        "t",
        "tg",
        "t",
        "tg",
        "editor",
        "button",
        "l",
        "res",
        "didFocus",
        "valid",
        "entry",
        "widgets",
        "values",
        "obj",
        "name",
        "value",
        "ary",
        "prev",
        "states",
        "requires",
        "cn",
        "iframe",
        "node",
        "binding",
        "doConnects",
        "selector",
        "delegatedEvent",
        "node",
        "attrName",
        "bid",
        "b",
        "h",
        "iframe",
        "target",
        "iframe",
        "coords",
        "ifc",
        "scroll",
        "cs",
        "tp",
        "left",
        "top",
        "prevFocusNode",
        "curFocusNode",
        "savedFocusNode",
        "df",
        "messages",
        "getArgs",
        "hand",
        "returnedHtml",
        "setter",
        "setter",
        "errMess",
        "setterParams",
        "p",
        "errText",
        "keyCodes",
        "prev",
        "next",
        "func",
        "children",
        "i",
        "layout",
        "cs",
        "me",
        "pb",
        "newSize",
        "elm",
        "pos",
        "elmStyle",
        "sizeSetting",
        "option",
        "requires",
        "_Plugin",
        "label",
        "editor",
        "className",
        "props",
        "h",
        "e",
        "c",
        "enabled",
        "disabled",
        "names",
        "result",
        "names",
        "apn",
        "uc",
        "nodes",
        "sel",
        "oldSelection",
        "ret",
        "selected",
        "paths",
        "nodes",
        "selects",
        "ary",
        "model",
        "items",
        "tree",
        "oreo",
        "paths",
        "treeNode",
        "copy",
        "id",
        "r1",
        "r2",
        "cr",
        "begin",
        "end",
        "anchor",
        "nodes",
        "widget",
        "html",
        "idCounter",
        "startlen",
        "i",
        "ret",
        "node",
        "errMess",
        "cont",
        "match",
        "empty",
        "key",
        "rootNode",
        "inherited",
        "errText",
        "op",
        "dyeClassObj",
        "url",
        "row",
        "rowNode",
        "col",
        "value",
        "cellObject",
        "cellNode",
        "keyIncrementMap",
        "increment",
        "target",
        "value",
        "i",
        "newFocusIndex",
        "focusNode",
        "ValidationTextBox",
        "invalid",
        "missing",
        "message",
        "isValid",
        "isEmpty",
        "isValidSubset",
        "p",
        "partialre",
        "_Splitter",
        "persistSize",
        "dim",
        "childSize",
        "center",
        "spaceAvailable",
        "factor",
        "isHorizontal",
        "axis",
        "pageStart",
        "splitterStyle",
        "dim",
        "childStart",
        "max",
        "min",
        "region",
        "splitterAttr",
        "splitterStart",
        "resize",
        "layoutFunc",
        "de",
        "delta",
        "childSize",
        "boundChildSize",
        "o",
        "h",
        "horizontal",
        "tick",
        "childSize",
        "_Gutter",
        "BorderContainer",
        "region",
        "ltr",
        "_Splitter",
        "splitter",
        "region",
        "splitter",
        "node",
        "wrappers",
        "aw",
        "bw",
        "i",
        "childrenAndSplitters",
        "pane",
        "dim",
        "splitter",
        "number",
        "locale",
        "bundle",
        "pattern",
        "group",
        "patternList",
        "positivePattern",
        "prop",
        "numberPatternRE",
        "numberPattern",
        "factor",
        "round",
        "d",
        "a",
        "patternParts",
        "comma",
        "maxPlaces",
        "valueParts",
        "fractional",
        "pad",
        "patternDigits",
        "index",
        "groupSize",
        "groupSize2",
        "remainder",
        "pieces",
        "whole",
        "off",
        "locale",
        "bundle",
        "pattern",
        "group",
        "factor",
        "isCurrency",
        "patternList",
        "re",
        "flags",
        "parts",
        "places",
        "groups",
        "prop",
        "symbol",
        "info",
        "results",
        "absoluteMatch",
        "integerRE",
        "decimalRE",
        "re",
        "exponentRE",
        "realRE",
        "signRE",
        "numberRE",
        "grp",
        "grp2",
        "grp2RE",
        "rxp",
        "c",
        "i",
        "node",
        "cw",
        "labels",
        "start",
        "inc",
        "i",
        "query",
        "qs",
        "q",
        "_this",
        "options",
        "sorter",
        "r",
        "sortFunctions",
        "a",
        "b",
        "sortAttribute",
        "bc",
        "i",
        "attr",
        "dir",
        "comp",
        "bc",
        "i",
        "ret",
        "preventDefault",
        "node",
        "widget",
        "ColorExt",
        "hue2rgb",
        "h6",
        "m",
        "c",
        "l",
        "t",
        "a",
        "r",
        "H",
        "S",
        "L",
        "m2",
        "m1",
        "confine",
        "t",
        "h",
        "prefix",
        "state",
        "exports",
        "s",
        "pad",
        "c",
        "l",
        "widthList",
        "m",
        "propM",
        "firstDay",
        "d",
        "propD",
        "timePeriod",
        "h",
        "offset",
        "tz",
        "locale",
        "formatLength",
        "bundle",
        "sauce",
        "pattern",
        "locale",
        "bundle",
        "formatLength",
        "datePattern",
        "timePattern",
        "pattern",
        "tokens",
        "re",
        "controlChars",
        "info",
        "tokens",
        "bundle",
        "re",
        "match",
        "widthList",
        "result",
        "amPm",
        "valid",
        "token",
        "l",
        "c",
        "year",
        "century",
        "cutoff",
        "months",
        "days",
        "am",
        "pm",
        "period",
        "hours",
        "dateObject",
        "allTokens",
        "dateToken",
        "monthToken",
        "identity",
        "chunks",
        "literal",
        "s",
        "c",
        "l",
        "p2",
        "p3",
        "am",
        "pm",
        "_customFormats",
        "gregorian",
        "bundle",
        "label",
        "lookup",
        "props",
        "key",
        "weekend",
        "day",
        "firstDayOfYear",
        "adj",
        "week",
        "_FormSelectWidget",
        "opts",
        "oldOpts",
        "oldOpt",
        "k",
        "oStore",
        "h",
        "deferred",
        "deferred",
        "fetchHandle",
        "labelAttr",
        "opts",
        "val",
        "disp",
        "ret",
        "val",
        "isSelected",
        "opts",
        "opt",
        "store",
        "store",
        "label",
        "value",
        "store",
        "newOpt",
        "store",
        "h",
        "_SelectMenu",
        "o",
        "n",
        "found",
        "val",
        "Select",
        "si",
        "click",
        "item",
        "item",
        "lbl",
        "isValid",
        "message",
        "ret",
        "retR",
        "onode",
        "node",
        "pnode",
        "n",
        "i",
        "node",
        "parent",
        "getAncestors",
        "n1as",
        "n2as",
        "m",
        "com",
        "i",
        "name",
        "block",
        "blockContainer",
        "name",
        "atBeginning",
        "offsetAtBeginning",
        "cnode",
        "node",
        "atEnd",
        "offsetAtEnd",
        "cnode",
        "node",
        "node",
        "startnode",
        "len",
        "prop",
        "s",
        "_initCurrentRange",
        "r",
        "r",
        "firstnode",
        "lastnode",
        "startContainer",
        "endContainer",
        "startOffset",
        "endOffset",
        "atmrange",
        "cmpstr",
        "parentNode",
        "startnode",
        "startOffset",
        "lastNode",
        "calOffset",
        "prevnode",
        "prevnodeobj",
        "lenoffset",
        "nextnode",
        "atmrange",
        "node",
        "len",
        "parent",
        "tempNode",
        "prevnodeobj",
        "prevnode",
        "tmpary",
        "startContainer",
        "startOffset",
        "endContainer",
        "endOffset",
        "start",
        "end",
        "index",
        "r",
        "r",
        "s",
        "r",
        "r",
        "QueryResults",
        "isPromise",
        "args",
        "arguments",
        "result",
        "first",
        "last",
        "selectedNode",
        "next",
        "selectedNode",
        "prev",
        "selectedNode",
        "resultList",
        "finished",
        "d",
        "ret",
        "exports",
        "id",
        "t",
        "CalendarLite",
        "value",
        "month",
        "firstDay",
        "daysInMonth",
        "daysInPreviousMonth",
        "today",
        "dayOffset",
        "monthNames",
        "i",
        "date",
        "number",
        "clazz",
        "adj",
        "clazz2",
        "dateVal",
        "month",
        "y",
        "d",
        "d",
        "dayNames",
        "dayOffset",
        "r",
        "dateObj",
        "connect",
        "oldFocus",
        "oldCell",
        "newCell",
        "node",
        "monthNames",
        "spacer",
        "src",
        "methods",
        "connects",
        "srcType",
        "propList",
        "evt",
        "func",
        "wc",
        "evt",
        "func",
        "item",
        "scrollamount",
        "oldscroll",
        "height",
        "highlighted_option",
        "newscroll",
        "_DialogBase",
        "_nlsResources",
        "nodePosition",
        "viewport",
        "node",
        "bb",
        "viewport",
        "containerSize",
        "w",
        "h",
        "node",
        "viewport",
        "p",
        "bb",
        "l",
        "t",
        "node",
        "singleFocusItem",
        "win",
        "fadeIn",
        "fadeOut",
        "h",
        "h",
        "Dialog",
        "DialogLevelManager",
        "underlay",
        "zIndex",
        "pd",
        "focus",
        "idx",
        "ds",
        "requires",
        "oldscroll",
        "val",
        "_DateTimeTextBox",
        "isInvalid1",
        "isInvalid2",
        "fromISO",
        "PopupProto",
        "textBox",
        "value",
        "original",
        "ret",
        "node",
        "node",
        "Calendar",
        "date",
        "daysInMonth",
        "currentDate",
        "node",
        "cls",
        "node",
        "node",
        "increment",
        "interval",
        "newValue",
        "monthNames",
        "selection",
        "stype",
        "oSel",
        "oRange",
        "selection",
        "selection",
        "i",
        "html",
        "frag",
        "div",
        "selection",
        "p",
        "selection",
        "node",
        "r",
        "node",
        "_nlc",
        "i",
        "_tlc",
        "selection",
        "sel",
        "doc",
        "selection",
        "doc",
        "selection",
        "tg",
        "newRange",
        "doc",
        "sel",
        "requires",
        "coreFx",
        "_baseObj",
        "_chain",
        "beforeBegin",
        "onBegin",
        "onPlay",
        "e",
        "offset",
        "e",
        "_combine",
        "duration",
        "t",
        "ms",
        "node",
        "s",
        "o",
        "anim",
        "height",
        "fini",
        "node",
        "s",
        "o",
        "anim",
        "fini",
        "node",
        "top",
        "left",
        "init",
        "cs",
        "pos",
        "ret",
        "anim",
        "elems",
        "TreeNode",
        "pixels",
        "tree",
        "model",
        "clsName",
        "nodeName",
        "oldCls",
        "parent",
        "styles",
        "_a11yStates",
        "idx",
        "wipeIn",
        "wipeOut",
        "tree",
        "model",
        "defs",
        "oldChildren",
        "id",
        "ary",
        "index",
        "id",
        "existingNodes",
        "node",
        "i",
        "fc",
        "node",
        "path",
        "children",
        "Tree",
        "i",
        "modelParams",
        "rn",
        "identity",
        "identity",
        "tree",
        "identities",
        "nodes",
        "tree",
        "d",
        "nextPath",
        "nextNode",
        "_this",
        "childBranches",
        "defs",
        "_this",
        "childBranches",
        "defs",
        "c",
        "key",
        "node",
        "node",
        "previousSibling",
        "children",
        "parent",
        "node",
        "node",
        "parent",
        "node",
        "node",
        "c",
        "cs",
        "node",
        "domElement",
        "isExpandoClick",
        "domElement",
        "isExpandoClick",
        "node",
        "returnNode",
        "ret",
        "model",
        "item",
        "_this",
        "model",
        "identity",
        "nodes",
        "label",
        "tooltip",
        "model",
        "identity",
        "parentNodes",
        "model",
        "identity",
        "nodes",
        "parent",
        "oreo",
        "path",
        "ary",
        "oc",
        "maxWidth",
        "nodes",
        "node",
        "_SliderMover",
        "widget",
        "abspos",
        "pixelValue",
        "widget",
        "HorizontalSlider",
        "abspos",
        "pixelValue",
        "count",
        "pixelsPerValue",
        "wholeIncrements",
        "percent",
        "progressBar",
        "remainingBar",
        "_this",
        "props",
        "start",
        "duration",
        "s",
        "c",
        "count",
        "value",
        "label",
        "mover"
    ],
    "comments": [
        "array.indexOf array.map",
        "declare",
        "domConstruct.place",
        "i18n.getLocalization",
        "lang.delegate lang.hitch lang.isString",
        "MemoryStore",
        "registry.getUniqueId",
        "module:",
        "dijit/_editor/plugins/FontChoice",
        "summary:",
        "Base class for widgets that contains a label (like \"Font:\")",
        "and a FilteringSelect drop down to pick a value.",
        "Used as Toolbar entry.",
        "label: [public] String",
        "The label to apply to this particular FontDropDown.",
        "plainText: [public] boolean",
        "Flag to indicate that the returned label should be plain text",
        "instead of an example.",
        "templateString: [public] String",
        "The template used to construct the labeled dropdown.",
        "summary:",
        "Over-ride to set specific properties.",
        "Set some substitution variables used in the template",
        "_WidgetBase sets the id after postMixInProperties(), but we need it now.",
        "Alternative is to have a buildRendering() method and move this.selectId setting there,",
        "or alternately get rid of selectId variable and just access ${id} in template?",
        "used in template",
        "summary:",
        "Over-ride for the default postCreate action",
        "This establishes the filtering selects and the like.",
        "Initialize the list of items in the drop down by creating data store with items like:",
        "{value: 1, name: \"xx-small\", label: \"<font size=1>xx-small</font-size>\" }",
        "summary:",
        "Over-ride for the default action of setting the",
        "widget value, maps the input to known values",
        "value: Object|String",
        "The value to set in the select.",
        "priorityChange:",
        "Optional parameter used to tell the select whether or not to fire",
        "onChange event.",
        "if the value is not a permitted value, just set empty string to prevent showing the warning icon",
        "Clear the last state in case of updateState calls.  Ref: #10466",
        "summary:",
        "Allow retrieving the value from the composite select on",
        "call to button.get(\"value\");",
        "summary:",
        "Over-ride for focus control of this widget.  Delegates focus down to the",
        "filtering select.",
        "summary:",
        "Over-ride for the button's 'disabled' attribute so that it can be",
        "disabled programmatically.",
        "Save off ths disabled state so the get retrieves it correctly",
        "without needing to have a function proxy it.",
        "summary:",
        "Dropdown to select a font; goes in editor toolbar.",
        "generic: [const] Boolean",
        "Use generic (web standard) font names",
        "command: [public] String",
        "The editor 'command' implemented by this plugin.",
        "summary:",
        "Over-ride for the default posr mixin control",
        "CSS font-family generics",
        "summary:",
        "Function used to generate the labels of the format dropdown",
        "will return a formatted, or plain label based on the value",
        "of the plainText option.",
        "value: String",
        "The 'insert value' associated with a name",
        "name: String",
        "The text name of the value",
        "summary:",
        "Over-ride for the default action of setting the",
        "widget value, maps the input to known values",
        "Windows 7",
        "Windows 7",
        "summary:",
        "Dropdown to select a font size; goes in editor toolbar.",
        "command: [public] String",
        "The editor 'command' implemented by this plugin.",
        "values: [public] Number[]",
        "The HTML font size values supported by this plugin",
        "sizes according to the old HTML FONT SIZE",
        "summary:",
        "Function used to generate the labels of the format dropdown",
        "will return a formatted, or plain label based on the value",
        "of the plainText option.",
        "We're stuck using the deprecated FONT tag to correspond",
        "with the size measurements used by the editor",
        "value: String",
        "The 'insert value' associated with a name",
        "name: String",
        "The text name of the value",
        "summary:",
        "Over-ride for the default action of setting the",
        "widget value, maps the input to known values",
        "summary:",
        "Dropdown to select a format (like paragraph or heading); goes in editor toolbar.",
        "command: [public] String",
        "The editor 'command' implemented by this plugin.",
        "values: [public] Array",
        "The HTML format tags supported by this plugin",
        "Init and set the default value to no formatting.  Update state will adjust it",
        "as needed.",
        "summary:",
        "Function used to generate the labels of the format dropdown",
        "will return a formatted, or plain label based on the value",
        "of the plainText option.",
        "value: String",
        "The 'insert value' associated with a name",
        "name: String",
        "The text name of the value",
        "summary:",
        "Over-ride for default exec-command label.",
        "Allows us to treat 'none' as special.",
        "find containing nodes of start/end.",
        "summary:",
        "Internal function to clear format nodes.",
        "nodes:",
        "The array of nodes to strip formatting from.",
        "Contained within the same block, may be collapsed, but who cares, see if we",
        "have a block element to remove.",
        "Also look for all child nodes in the selection that may need to be",
        "cleared of formatting",
        "Probably a multi select, so we have to process it.  Whee.",
        "summary:",
        "function to remove the block format node.",
        "node:",
        "The block format node to remove (and leave the contents behind)",
        "So of course IE doesn't work right with paste-overs.",
        "We have to do this manually, which is okay since IE already uses",
        "customUndo and we turned it on for WebKit.  WebKit pasted funny,",
        "so couldn't use the execCommand approach",
        "Everyone else works fine this way, a paste-over and is native",
        "undo friendly.",
        "TODO: for 2.0, split into FontChoice plugin into three separate classes,",
        "one for each command (and change registry below)",
        "summary:",
        "This plugin provides three drop downs for setting style in the editor",
        "(font, font size, and format block), as controlled by command.",
        "",
        "description:",
        "The commands provided by this plugin are:",
        "",
        "- fontName: Provides a drop down to select from a list of font names",
        "- fontSize: Provides a drop down to select from a list of font sizes",
        "- formatBlock: Provides a drop down to select from a list of block styles",
        "which can easily be added to an editor by including one or more of the above commands",
        "in the `plugins` attribute as follows:",
        "",
        "|\tplugins=\"['fontName','fontSize',...]\"",
        "",
        "It is possible to override the default dropdown list by providing an Array for the `custom` property when",
        "instantiating this plugin, e.g.",
        "",
        "|\tplugins=\"[{name:'dijit._editor.plugins.FontChoice', command:'fontName', values:['Verdana','Myriad','Garamond']},...]\"",
        "",
        "Alternatively, for `fontName` only, `generic:true` may be specified to provide a dropdown with",
        "[CSS generic font families](http://www.w3.org/TR/REC-CSS2/fonts.html#generic-font-families).",
        "",
        "Note that the editor is often unable to properly handle font styling information defined outside",
        "the context of the current editor instance, such as pre-populated HTML.",
        "useDefaultCommand: [protected] Boolean",
        "Override _Plugin.useDefaultCommand...",
        "processing is handled by this plugin, not by dijit/Editor.",
        "summary:",
        "Overrides _Plugin._initButton(), to initialize the FilteringSelect+label in toolbar,",
        "rather than a simple button.",
        "tags:",
        "protected",
        "Create the widget to go into the toolbar (the so-called \"button\")",
        "For back-compat reasons support setting custom values via \"custom\" parameter",
        "rather than \"values\" parameter.   Remove in 2.0.",
        "Reflect changes to the drop down in the editor",
        "User invoked change, since all internal updates set priorityChange to false and will",
        "not trigger an onChange event.",
        "put focus back in the iframe, unless focus has somehow been shifted out of the editor completely",
        "Invoke, the editor already normalizes commands called through its",
        "execCommand.",
        "summary:",
        "Overrides _Plugin.updateState().  This controls updating the menu",
        "options to the right values on state changes in the document (that trigger a",
        "test of the actions.)",
        "It set value of drop down in toolbar to reflect font/font size/format block",
        "of text at current caret position.",
        "tags:",
        "protected",
        "Firefox may throw error above if the editor is just loaded, ignore it",
        "strip off single quotes, if any",
        "Some browsers (WebKit) doesn't actually get the tag info right.",
        "and IE returns paragraph when in a DIV!, so incorrect a lot,",
        "so we have double-check it.",
        "Try to find the current element where the caret is.",
        "Okay, now see if we can find one of the formatting types we're in.",
        "Still no value, so lets select 'none'.",
        "Check that the block format is one allowed, if not,",
        "null it so that it gets set to empty.",
        "Set the value, but denote it is not a priority change, so no",
        "onchange fires.",
        "Register these plugins",
        "Make all classes available through AMD, and return main class",
        "declare",
        "domConstruct.create",
        "domStyle.getComputedStyle",
        "kernel.deprecated",
        "lang.hitch",
        "has(\"ie\") has(\"mozilla\")",
        "to export dijit._setSelectionRange, remove in 2.0",
        "module:",
        "dijit/form/TextBox",
        "summary:",
        "A base class for textbox form inputs",
        "allows IE to disallow focus, but Firefox cannot be disabled for mousedown events",
        "IE INPUT tag fontFamily has to be set directly using STYLE",
        "the defer gives IE a chance to render the TextBox and to deal with font inheritance",
        "can throw an exception if widget is immediately destroyed",
        "when used in a Dialog, and this is called before the dialog is\n\t\t\t\t\t shown, s.fontFamily would trigger \"Invalid Argument\" error.",
        "dijitInputField class gives placeHolder same padding as the input field",
        "parent node already has dijitInputField class but it doesn't affect this <span>",
        "since it's position: absolute.",
        "Event",
        "summary:",
        "Called AFTER the input event has happened",
        "See if the placeHolder text should be removed or added while editing.",
        "Boolean?",
        "String?",
        "summary:",
        "Deprecated.  Use get('displayedValue') instead.",
        "tags:",
        "deprecated",
        "String",
        "summary:",
        "Deprecated.  Use set('displayedValue', ...) instead.",
        "tags:",
        "deprecated",
        "clear selection so that the next mouse click doesn't reselect",
        "String",
        "Overrides definition of _setSelectionRange from _TextBoxMixin (TODO: move to _TextBoxMixin.js?)",
        "DomNode",
        "Number?",
        "Number?",
        "move to 0",
        "delta from 0 is the correct position",
        "===== \"./_base/declare\", =====",
        "===== declare, =====",
        "module:",
        "dojo/currency",
        "summary:",
        "localized formatting and parsing routines for currencies",
        "description:",
        "extends dojo.number to provide culturally-appropriate formatting of values",
        "in various world currencies, including use of a currency symbol.  The currencies are specified",
        "by a three-letter international symbol in all uppercase, and support for the currencies is",
        "provided by the data in `dojo.cldr`.  The scripts generating dojo.cldr specify which",
        "currency support is included.  A fixed number of decimal places is determined based",
        "on the currency type and is not determined by the 'pattern' argument.  The fractional",
        "portion is optional, by default, and variable length decimals are not supported.",
        "Get locale-dependent currency data, like the symbol",
        "Mixin locale-independent currency data, like # of places",
        "Mixin with provided options",
        "=====\ncurrency.__FormatOptions = declare([dnumber.__FormatOptions], {\n\t// type: String?\n\t//\t\tShould not be set.  Value is assumed to be \"currency\".\n\t// symbol: String?\n\t//\t\tlocalized currency symbol. The default will be looked up in table of supported currencies in `dojo.cldr`\n\t//\t\tA [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code will be used if not found.\n\t// currency: String?\n\t//\t\tan [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like \"USD\".\n\t//\t\tFor use with dojo.currency only.\n\t// places: Number?\n\t//\t\tnumber of decimal places to show.  Default is defined based on which currency is used.\n\ttype: \"\",\n\tsymbol: \"\",\n\tcurrency: \"\",\n\tplaces: \"\"\n});\n=====",
        "Number",
        "__FormatOptions?",
        "summary:",
        "Format a Number as a currency, using locale-specific settings",
        "",
        "description:",
        "Create a string from a Number using a known, localized pattern.",
        "[Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Elements)",
        "appropriate to the locale are chosen from the [CLDR](http://unicode.org/cldr)",
        "as well as the appropriate symbols and delimiters and number of decimal places.",
        "",
        "value:",
        "the number to be formatted.",
        "dnumber.__RegexpOptions?",
        "",
        "summary:",
        "Builds the regular needed to parse a currency value",
        "",
        "description:",
        "Returns regular expression with positive and negative match, group and decimal separators",
        "Note: the options.places default, the number of decimal places to accept, is defined by the currency type.",
        "String",
        "=====\nvar __ParseOptions = currency.__ParseOptions = declare(dnumber.__ParseOptions, {\n\t// type: String?\n\t//\t\tShould not be set.  Value is assumed to be currency.\n\t// currency: String?\n\t//\t\tan [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like \"USD\".\n\t//\t\tFor use with dojo.currency only.\n\t// symbol: String?\n\t//\t\tlocalized currency symbol. The default will be looked up in table of supported currencies in `dojo.cldr`\n\t//\t\tA [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code will be used if not found.\n\t// places: Number?\n\t//\t\tfixed number of decimal places to accept.  The default is determined based on which currency is used.\n\t// fractional: Boolean|Array?\n\t//\t\tWhether to include the fractional portion, where the number of decimal places are implied by the currency\n\t//\t\tor explicit 'places' parameter.  The value [true,false] makes the fractional portion optional.\n\t//\t\tBy default for currencies, it the fractional portion is optional.\n});\n=====",
        "String",
        "__ParseOptions?",
        "",
        "summary:",
        "Convert a properly formatted currency string to a primitive Number,",
        "using locale-specific settings.",
        "description:",
        "Create a Number from a string using a known, localized pattern.",
        "[Formatting patterns](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)",
        "are chosen appropriate to the locale, as well as the appropriate symbols and delimiters",
        "and number of decimal places.",
        "expression:",
        "A string representation of a currency value",
        "array.forEach",
        "declare",
        "domClass.add domClass.contains",
        "domGeometry.contentBox",
        "domStyle.style",
        "Animation",
        "lang.hitch",
        "query",
        "has(\"ie\"), has(\"webkit\"), has(\"quirks\")",
        "registry.byId()",
        "marginBox2contextBox, layoutChildren",
        "NodeList.style",
        "module:",
        "dijit/layout/ScrollingTabController",
        "summary:",
        "Set of tabs with left/right arrow keys and a menu to switch between tabs not",
        "all fitting on a single row.",
        "Works only for horizontal tabs (either above or below the content, not to the left",
        "or right).",
        "tags:",
        "private",
        "useMenu: [const] Boolean",
        "True if a menu should be used to select tabs when they are too",
        "wide to fit the TabContainer, false otherwise.",
        "useSlider: [const] Boolean",
        "True if a slider should be used to select tabs when they are too",
        "wide to fit the TabContainer, false otherwise.",
        "tabStripClass: [const] String",
        "The css class to apply to the tab strip, if it is visible.",
        "_minScroll: Number",
        "The distance in pixels from the edge of the tab strip which,",
        "if a scroll animation is less than, forces the scroll to",
        "go all the way to the left/right.",
        "Override default behavior mapping class to DOMNode",
        "TabController is hidden until it finishes drawing, to give",
        "a less visually jumpy instantiation.   When it's finished, set visibility to \"\"",
        "to that the tabs are hidden/shown depending on the container's visibility setting.",
        "changes to the tab button label or iconClass will have changed the width of the",
        "buttons, so do a resize",
        "Increment the width of the wrapper when a tab is added",
        "This makes sure that the buttons never wrap.",
        "The value 200 is chosen as it should be bigger than most",
        "Tab button widths.",
        "null out _selectedTab because we are about to delete that dom node",
        "summary:",
        "Creates the buttons used to scroll to view tabs that",
        "may not be visible if the TabContainer is too narrow.",
        "Make a list of the buttons to display when the tab labels become",
        "wider than the TabContainer, and hide the other buttons.",
        "Also gets the total width of the displayed buttons.",
        "summary:",
        "Determines if the tabs are wider than the width of the TabContainer, and",
        "thus that we need to display left/right/menu navigation buttons.",
        "summary:",
        "Hides or displays the buttons used to scroll the tab list and launch the menu",
        "that selects tabs.",
        "Save the dimensions to be used when a child is renamed.",
        "Set my height to be my natural height (tall enough for one row of tab labels),",
        "and my content-box width based on margin-box width specified in dim parameter.",
        "But first reset scrollNode.height in case it was set by layoutChildren() call",
        "in a previous run of this method.",
        "Show/hide the left/right/menu navigation buttons depending on whether or not they",
        "are needed.",
        "Position and size the navigation buttons and the tablist",
        "set proper scroll so that selected tab is visible",
        "Enable/disabled left right buttons depending on whether or not user can scroll to left or right",
        "Return my size so layoutChildren() can use it.",
        "Also avoids IE9 layout glitch on browser resize when scroll buttons present",
        "summary:",
        "Returns the current scroll of the tabs where 0 means",
        "\"scrolled all the way to the left\" and some positive number, based on #",
        "of pixels of possible scroll (ex: 1000) means \"scrolled all the way to the right\"",
        "summary:",
        "Given a scroll value where 0 means \"scrolled all the way to the left\"",
        "and some positive number, based on # of pixels of possible scroll (ex: 1000)",
        "means \"scrolled all the way to the right\", return value to set this.scrollNode.scrollLeft",
        "to achieve that scroll.",
        "",
        "This method is to adjust for RTL funniness in various browsers and versions.",
        "dijit/_WidgetBase",
        "summary:",
        "Smoothly scrolls to a tab when it is selected.",
        "Save the selection",
        "Scroll to the selected tab, except on startup, when scrolling is handled in resize()",
        "summary:",
        "Returns the minimum and maximum scroll setting to show the leftmost and rightmost",
        "tabs (respectively)",
        "about 500px",
        "50,000px",
        "scrolling until right edge of containerNode visible",
        "Scrolling should happen",
        "No scrolling needed, all tabs visible, we stay either scrolled to far left or far right (depending on dir)",
        "summary:",
        "Returns the scroll value setting so that the selected tab",
        "will appear in the center",
        "TODO: scroll minimal amount (to either right or left) so that",
        "selected tab is fully visible, and just return if it's already visible?",
        "TODO:",
        "If scrolling close to the left side or right side, scroll",
        "all the way to the left or right.  See this._minScroll.",
        "(But need to make sure that doesn't scroll the tab out of view...)",
        "summary:",
        "Creates a dojo._Animation object that smoothly scrolls the tab list",
        "either to a fixed horizontal pixel value, or to the selected tab.",
        "description:",
        "If an number argument is passed to the function, that horizontal",
        "pixel position is scrolled to.  Otherwise the currently selected",
        "tab is scrolled to.",
        "x: Integer?",
        "An optional pixel value to scroll to, indicating distance from left.",
        "Calculate position to scroll to",
        "position specified by caller, just make sure it's within bounds",
        "scroll to center the current tab",
        "Disable/enable left/right buttons according to new scroll position",
        "dojo/_base/fx/Animation",
        "Event",
        "summary:",
        "Gets a button DOM node from a mouse click event.",
        "e:",
        "The mouse click event.",
        "Event",
        "summary:",
        "Scrolls the menu to the right.",
        "e:",
        "The mouse click event.",
        "Event",
        "summary:",
        "Scrolls the menu to the left.",
        "e:",
        "The mouse click event.",
        "Number",
        "DomNode",
        "summary:",
        "Scrolls the tab list to the left or right by 75% of the widget width.",
        "direction:",
        "If the direction is 1, the widget scrolls to the right, if it is -1,",
        "it scrolls to the left.",
        "Number",
        "summary:",
        "Disables the left scroll button if the tabs are scrolled all the way to the left,",
        "or the right scroll button in the opposite case.",
        "scroll: Integer",
        "amount of horizontal scroll",
        "Override inherited tabIndex: 0 from dijit/form/Button, because user shouldn't be",
        "able to tab to the left/right/menu buttons",
        "Similarly, override FormWidget.isFocusable() because clicking a button shouldn't focus it",
        "either (this override avoids focus() call in FormWidget.js)",
        "Class used in template",
        "Class used in template",
        "id of the TabContainer itself",
        "-1 so user can't tab into the button, but so that button can still be focused programatically.",
        "Because need to move focus to the button (or somewhere) before the menu is hidden or IE6 will crash.",
        "recreate menu every time, in case the TabContainer's list of children (or their icons/labels) have changed",
        "Boolean",
        "remove ref to node that we are about to delete",
        "declare",
        "domAttr.set",
        "winUtils.getBox",
        "module:",
        "dijit/DialogUnderlay",
        "summary:",
        "The component that blocks the screen behind a `dijit.Dialog`",
        "",
        "description:",
        "A component used to block input behind a `dijit.Dialog`. Only a single",
        "instance of this widget is created by `dijit.Dialog`, and saved as",
        "a reference to be shared between all Dialogs as `dijit._underlay`",
        "",
        "The underlay itself can be styled based on and id:",
        "|\t#myDialog_underlay { background-color:red; }",
        "",
        "In the case of `dijit.Dialog`, this id is based on the id of the Dialog,",
        "suffixed with _underlay.",
        "Template has two divs; outer div is used for fade-in/fade-out, and also to hold background iframe.",
        "Inner div has opacity specified in CSS file.",
        "Parameters on creation or updatable later",
        "dialogId: String",
        "Id of the dialog.... DialogUnderlay's id is based on this id",
        "class: String",
        "This class name is used on the DialogUnderlay node, in addition to dijitDialogUnderlay",
        "summary:",
        "Append the underlay to the body",
        "summary:",
        "Sets the background to the size of the viewport",
        "",
        "description:",
        "Sets the background to the size of the viewport (rather than the size",
        "of the document) since we need to cover the whole browser window, even",
        "if the document is only a few lines long.",
        "tags:",
        "private",
        "hide the background temporarily, so that the background itself isn't",
        "causing scrollbars to appear (might happen when user shrinks browser",
        "window and then we are called to resize)",
        "then resize and show",
        "summary:",
        "Show the dialog underlay",
        "summary:",
        "Hides the dialog underlay",
        "lang.setObject",
        "has(\"ie\")",
        "module:",
        "dijit/_editor/html",
        "summary:",
        "HTML serialization utility functions used by editor",
        "String",
        "Boolean?",
        "summary:",
        "Adds escape sequences for special characters in XML: `&<>\"'`.",
        "Optionally skips escapes for single quotes.",
        "string",
        "DomNode",
        "summary:",
        "Return string representing HTML for node and it's children",
        "DomNode",
        "String[]",
        "summary:",
        "Pushes array of strings into output[] which represent HTML for node and it's children",
        "element node",
        "IE does some strange things with malformed HTML input, like",
        "treating a close tag </span> without an open tag <span>, as",
        "a new tag with tagName of /span.  Corrupts output HTML, remove",
        "them.  Other browsers don't prefix tags that way, so will",
        "never show up.",
        "store the list of attributes and sort it to have the",
        "attributes appear in the dictionary order",
        "IE8+ and all other browsers.",
        "ignore all attributes starting with _dj which are",
        "internal temporary attributes used by the editor",
        "workaround repeated attributes bug in IE8 (LinkDialog test)",
        "IE6-7 code path",
        "Split up and manage the attrs via regexp",
        "similar to prettyPrint attr logic.",
        "This somehow gets lost on IE for IMG tags and the like",
        "and we have to find it in outerHTML, known IE oddity.",
        "This somehow gets lost on IE for IMG tags and the like",
        "and we have to find it in outerHTML, known IE oddity.",
        "These should all be singly closed",
        "Browsers handle script tags differently in how you get content,",
        "but innerHTML always seems to work, so insert its content that way",
        "Yes, it's bad to allow script tags in the editor code, but some people",
        "seem to want to do it, so we need to at least return them right.",
        "other plugins/filters can strip them.",
        "cdata",
        "text",
        "FIXME:",
        "comment",
        "FIXME:",
        "DomNode",
        "summary:",
        "Returns the html content of a DomNode's children",
        "DomNode",
        "String[]",
        "summary:",
        "Pushes the html content of a DomNode's children into out[]",
        "IE issue.",
        "If we have an actual node we can check parent relationships on for IE,",
        "We should check, as IE sometimes builds invalid DOMS.  If no parent, we can't check",
        "And should just process it and hope for the best.",
        "IE is broken.  DOMs are supposed to be a tree.  But in the case of malformed HTML, IE generates a graph",
        "meaning one node ends up with multiple references (multiple parents).  This is totally wrong and invalid, but",
        "such is what it is.  We have to keep track and check for this because otherwise the source output HTML will have dups.",
        "No other browser generates a graph.  Leave it to IE to break a fundamental DOM rule.  So, we check the parent if we can",
        "If we can't, nothing more we can do other than walk it.",
        "declare",
        "event.stop",
        "dom.isDescendant",
        "domAttr.set",
        "domClass.add domClass.contains domClass.remove",
        "domGeometry.marginBox domGeometry.position",
        "domStyle.set",
        "has(\"touch\")",
        "keys.DOWN_ARROW keys.ENTER keys.ESCAPE",
        "lang.hitch lang.isFunction",
        "registry.byNode()",
        "module:",
        "dijit/_HasDropDown",
        "summary:",
        "Mixin for widgets that need drop down ability.",
        "_buttonNode: [protected] DomNode",
        "The button/icon/node to click to display the drop down.",
        "Can be set via a data-dojo-attach-point assignment.",
        "If missing, then either focusNode or domNode (if focusNode is also missing) will be used.",
        "_arrowWrapperNode: [protected] DomNode",
        "Will set CSS class dijitUpArrow, dijitDownArrow, dijitRightArrow etc. on this node depending",
        "on where the drop down is set to be positioned.",
        "Can be set via a data-dojo-attach-point assignment.",
        "If missing, then _buttonNode will be used.",
        "_popupStateNode: [protected] DomNode",
        "The node to set the aria-expanded class on.",
        "Also sets popupActive class but that will be removed in 2.0.",
        "Can be set via a data-dojo-attach-point assignment.",
        "If missing, then focusNode or _buttonNode (if focusNode is missing) will be used.",
        "_aroundNode: [protected] DomNode",
        "The node to display the popup around.",
        "Can be set via a data-dojo-attach-point assignment.",
        "If missing, then domNode will be used.",
        "dropDown: [protected] Widget",
        "The widget to display as a popup.  This widget *must* be",
        "defined before the startup function is called.",
        "autoWidth: [protected] Boolean",
        "Set to true to make the drop down at least as wide as this",
        "widget.  Set to false if the drop down should just be its",
        "default width",
        "forceWidth: [protected] Boolean",
        "Set to true to make the drop down exactly as wide as this",
        "widget.  Overrides autoWidth.",
        "maxHeight: [protected] Integer",
        "The max height for our dropdown.",
        "Any dropdown taller than this will have scrollbars.",
        "Set to 0 for no max height, or -1 to limit height to available space in viewport",
        "dropDownPosition: [const] String[]",
        "This variable controls the position of the drop down.",
        "It's an array of strings with the following values:",
        "",
        "- before: places drop down to the left of the target node/widget, or to the right in",
        "the case of RTL scripts like Hebrew and Arabic",
        "- after: places drop down to the right of the target node/widget, or to the left in",
        "the case of RTL scripts like Hebrew and Arabic",
        "- above: drop down goes above target node",
        "- below: drop down goes below target node",
        "",
        "The list is positions is tried, in order, until a position is found where the drop down fits",
        "within the viewport.",
        "",
        "_stopClickEvents: Boolean",
        "When set to false, the click events will not be stopped, in",
        "case you want to use them in your subclass",
        "Event",
        "summary:",
        "Callback when the user mousedown's on the arrow icon",
        "Prevent default to stop things like text selection, but don't stop propagation, so that:",
        "1. TimeTextBox etc. can focus the <input> on mousedown",
        "2. dropDownButtonActive class applied by _CssStateMixin (on button depress)",
        "3. user defined onMouseDown handler fires",
        "",
        "Also, don't call preventDefault() on MSPointerDown event (on IE10) because that prevents the button",
        "from getting focus, and then the focus manager doesn't know what's going on (#17262)",
        "Event?",
        "summary:",
        "Callback when the user lifts their mouse after mouse down on the arrow icon.",
        "If the drop down is a simple menu and the mouse is over the menu, we execute it, otherwise, we focus our",
        "drop down widget.  If the event is missing, then we are not",
        "a mouseup event.",
        "",
        "This is useful for the common mouse movement pattern",
        "with native browser `<select>` nodes:",
        "",
        "1. mouse down on the select node (probably on the arrow)",
        "2. move mouse to a menu item while holding down the mouse button",
        "3. mouse up.  this selects the menu item as though the user had clicked it.",
        "This code deals with the corner-case when the drop down covers the original widget,",
        "because it's so large.  In that case mouse-up shouldn't select a value from the menu.",
        "Find out if our target is somewhere in our dropdown widget,",
        "but not over our _buttonNode (the clickable node)",
        "Focus the dropdown widget unless it's a menu (in which case autoFocus is set to false).",
        "Even if it's a menu, we need to focus it if this is a fake mouse event caused by the user typing",
        "SPACE/ENTER while using JAWS.  Jaws converts the SPACE/ENTER key into mousedown/mouseup events.",
        "If this.hovering is false then it's presumably actually a keyboard event.",
        "Do it on a delay so that we don't steal back focus from the dropdown.",
        "The drop down arrow icon probably can't receive focus, but widget itself should get focus.",
        "defer() needed to make it work on IE (test DateTextBox)",
        "Event",
        "If there was no preceding mousedown/mouseup (like on android), then simulate them to",
        "toggle the drop down.",
        "",
        "The if(has(\"touch\") is necessary since IE and desktop safari get spurious onclick events",
        "when there are nested tables (specifically, clicking on a table that holds a dijit/form/Select,",
        "but not on the Select itself, causes an onclick event on the Select)",
        "The drop down was already opened on mousedown/keydown; just need to call stopEvent().",
        "Add a class to the \"dijitDownArrowButton\" type class to _buttonNode so theme can set direction of arrow",
        "based on where drop down will normally appear",
        "summary:",
        "set up nodes and connect our mouse and keyboard events",
        "Destroy the drop down, unless it's already been destroyed.  This can happen because",
        "the drop down is a direct child of <body> even though it's logically my child.",
        "Event",
        "summary:",
        "Callback when the user presses a key while focused on the button node",
        "false return code means that the drop down handled the key",
        "ignore enter and space if the event is for a text input",
        "Toggle the drop down, but wait until keyup so that the drop down doesn't",
        "get a stray keyup event, or in the case of key-repeat (because user held",
        "down key for too long), stray keydown events",
        "drop down may not exist until toggleDropDown() call",
        "summary:",
        "Called magically when focus has shifted away from this widget and it's dropdown",
        "Don't focus on button if the user has explicitly focused on something else (happens",
        "when user clicks another control causing the current popup to close)..",
        "But if focus is inside of the drop down then reset focus to me, because IE doesn't like",
        "it when you display:none a node with focus.",
        "summary:",
        "Returns true if the dropdown exists and it's data is loaded.  This can",
        "be overridden in order to force a call to loadDropDown().",
        "tags:",
        "protected",
        "Function",
        "summary:",
        "Creates the drop down if it doesn't exist, loads the data",
        "if there's an href and it hasn't been loaded yet, and then calls",
        "the given callback.",
        "tags:",
        "protected",
        "TODO: for 2.0, change API to return a Deferred, instead of calling loadCallback?",
        "summary:",
        "Creates the drop down if it doesn't exist, loads the data",
        "if there's an href and it hasn't been loaded yet, and",
        "then opens the drop down.  This is basically a callback when the",
        "user presses the down arrow button to open the drop down.",
        "returns: Deferred",
        "Deferred for the drop down widget that",
        "fires when drop down is created and loaded",
        "tags:",
        "protected",
        "summary:",
        "Callback when the user presses the down arrow button or presses",
        "the down arrow key to open/close the drop down.",
        "Toggle the drop-down widget; if it is up, close it, if not, open it",
        "tags:",
        "protected",
        "summary:",
        "Opens the dropdown for this widget.   To be called only when this.dropDown",
        "has been created and is ready to display (ie, it's data is loaded).",
        "returns:",
        "return value of dijit/popup.open()",
        "tags:",
        "protected",
        "Prepare our popup's height and honor maxHeight if it exists.",
        "TODO: isn't maxHeight dependent on the return value from dijit/popup.open(),",
        "ie, dependent on how much space is available (BK)",
        "Check if we have explicitly set width and height on the dropdown widget dom node",
        "Code for resizing dropdown (height limitation, or increasing width to match my width)",
        "Figure out maximum height allowed (if there is a height restriction)",
        "limit height to space available in viewport either above or below my domNode",
        "(whichever side has more room)",
        "Attach dropDown to DOM and make make visibility:hidden rather than display:none",
        "so we call startup() and also get the size",
        "this has to be done after being added to the DOM",
        "Get size of drop down, and determine if vertical scroll bar needed.  If no scroll bar needed,",
        "use overflow:visible rather than overflow:hidden so off-by-one errors don't hide drop down border.",
        "room for vertical scrollbar",
        "Adjust dropdown width to match or be larger than my width",
        "And finally, resize the dropdown to calculated height and width",
        "use set() because _CssStateMixin is watching",
        "use set() because _CssStateMixin is watching",
        "Set aria-labelledby on dropdown if it's not already set to something more meaningful",
        "Boolean",
        "summary:",
        "Closes the drop down on this widget",
        "focus:",
        "If true, refocuses the button widget",
        "tags:",
        "protected",
        "array.filter array.forEach array.indexOf array.some",
        "aspect.after",
        "declare",
        "lang.hitch",
        "module:",
        "dijit/tree/TreeStoreModel",
        "summary:",
        "Implements dijit/Tree/model connecting to a dojo.data store with a single",
        "root item.  Any methods passed into the constructor will override",
        "the ones defined here.",
        "store: dojo/data/api/Read",
        "Underlying store",
        "childrenAttrs: String[]",
        "One or more attribute names (attributes in the dojo.data item) that specify that item's children",
        "newItemIdAttr: String",
        "Name of attribute in the Object passed to newItem() that specifies the id.",
        "",
        "If newItemIdAttr is set then it's used when newItem() is called to see if an",
        "item with the same id already exists, and if so just links to the old item",
        "(so that the old item ends up with two parents).",
        "",
        "Setting this to null or \"\" will make every drop create a new item.",
        "labelAttr: String",
        "If specified, get label for tree node from this attribute, rather",
        "than by calling store.getLabel()",
        "root: [readonly] dojo/data/Item",
        "Pointer to the root item (read only, not a parameter)",
        "query: anything",
        "Specifies datastore query to return the root item for the tree.",
        "Must only return a single item.   Alternately can just pass in pointer",
        "to root item.",
        "example:",
        "|\t{id:'ROOT'}",
        "deferItemLoadingUntilExpand: Boolean",
        "Setting this to true will cause the TreeStoreModel to defer calling loadItem on nodes",
        "until they are expanded. This allows for lazying loading where only one",
        "loadItem (and generally one network call, consequently) per expansion",
        "(rather than one for each child).",
        "This relies on partial loading of the children items; each children item of a",
        "fully loaded item should contain the label and info about having children.",
        "Object",
        "summary:",
        "Passed the arguments listed above (store, etc)",
        "tags:",
        "private",
        "if the store supports Notification, subscribe to the notification events",
        "TODO: should cancel any in-progress processing of getRoot(), getChildren()",
        "=======================================================================",
        "Methods for traversing hierarchy",
        "summary:",
        "Calls onItem with the root item for the tree, possibly a fabricated item.",
        "Calls onError on error.",
        "dojo/data/Item",
        "summary:",
        "Tells if an item has or may have children.  Implementing logic here",
        "avoids showing +/- expando icon for nodes that we know don't have children.",
        "(For efficiency reasons we may not want to check if an element actually",
        "has children until user clicks the expando node)",
        "dojo/data/Item",
        "function(items)",
        "function",
        "summary:",
        "Calls onComplete() with array of child items of given parent item, all loaded.",
        "The parent is not loaded yet, we must be in deferItemLoadingUntilExpand",
        "mode, so we will load it and just return the children (without loading each",
        "child item)",
        "get children of specified item",
        "count how many items need to be loaded",
        "all items are already loaded (or we aren't loading them).  proceed...",
        "still waiting for some or all of the items to load",
        "all nodes have been loaded, send them to the tree",
        "=======================================================================",
        "Inspecting items",
        "anything",
        "Boolean",
        "object",
        "item",
        "Object",
        "dojo/data/Item",
        "summary:",
        "Get the label for an item",
        "String",
        "String",
        "=======================================================================",
        "Write interface",
        "dijit/tree/dndSource.__Item",
        "dojo/data/api/Item",
        "int?",
        "summary:",
        "Creates a new item.   See `dojo/data/api/Write` for details on args.",
        "Used in drag & drop when item from external source dropped onto tree.",
        "description:",
        "Developers will need to override this method if new items get added",
        "to parents with multiple children attributes, in order to define which",
        "children attribute points to the new item.",
        "Maybe there's already a corresponding item in the store; if so, reuse it.",
        "There's already a matching item in store, use it",
        "Create new item in the tree, based on the drag source.",
        "Move new item to desired position",
        "[as far as we know] there is no id so we must assume this is a new item",
        "Move new item to desired position",
        "Item",
        "Item",
        "Item",
        "Boolean",
        "int?",
        "summary:",
        "Move or copy an item from one parent item to another.",
        "Used in drag & drop",
        "name of \"children\" attr in parent item",
        "remove child from source item, and record the attribute that child occurred in",
        "modify target item's children attribute to include this item",
        "call slice() to avoid modifying the original array, confusing the data store",
        "=======================================================================",
        "Callbacks",
        "dojo/data/Item",
        "===== item =====",
        "summary:",
        "Callback whenever an item has changed, so that Tree",
        "can update the label, icon, etc.   Note that changes",
        "to an item's children or parent(s) will trigger an",
        "onChildrenChange() so you can ignore those changes here.",
        "tags:",
        "callback",
        "===== parent, newChildrenList =====",
        "summary:",
        "Callback to do notifications about new, updated, or deleted items.",
        "parent: dojo/data/Item",
        "newChildrenList: dojo/data/Item[]",
        "tags:",
        "callback",
        "dojo/data/Item",
        "===== item =====",
        "summary:",
        "Callback when an item has been deleted.",
        "description:",
        "Note that there will also be an onChildrenChange() callback for the parent",
        "of this item.",
        "tags:",
        "callback",
        "=======================================================================",
        "Events from data store",
        "dojo/data/Item",
        "Object",
        "summary:",
        "Handler for when new items appear in the store, either from a drop operation",
        "or some other way.   Updates the tree view (if necessary).",
        "description:",
        "If the new item is a child of an existing item,",
        "calls onChildrenChange() with the new list of children",
        "for that existing item.",
        "",
        "tags:",
        "extension",
        "We only care about the new item if it has a parent that corresponds to a TreeNode",
        "we are currently displaying",
        "Call onChildrenChange() on parent (ie, existing) item with new list of children",
        "In the common case, the new list of children is simply parentInfo.newValue or",
        "[ parentInfo.newValue ], although if items in the store has multiple",
        "child attributes (see `childrenAttr`), then it's a superset of parentInfo.newValue,",
        "so call getChildren() to be sure to get right answer.",
        "Object",
        "summary:",
        "Handler for delete notifications from underlying store",
        "===== , oldValue, newValue =====",
        "summary:",
        "Updates the tree view according to changes in the data store.",
        "description:",
        "Handles updates to an item's children by calling onChildrenChange(), and",
        "other updates to an item by calling onChange().",
        "",
        "See `onNewItem` for more details on handling updates to an item's children.",
        "item: Item",
        "attribute: attribute-name-string",
        "oldValue: Object|Array",
        "newValue: Object|Array",
        "tags:",
        "extension",
        "item's children list changed",
        "See comments in onNewItem() about calling getChildren()",
        "item's label/icon/etc. changed.",
        "declare",
        "domConstruct.destroy domConstruct.place",
        "event.stop",
        "keys.ENTER",
        "has(\"ie\") has(\"mozilla\") has(\"webkit\")",
        "win.withGlobal",
        "winUtils.scrollIntoView",
        "module:",
        "dijit/_editor/plugins/EnterKeyHandling",
        "summary:",
        "This plugin tries to make all browsers behave consistently with regard to",
        "how ENTER behaves in the editor window.  It traps the ENTER key and alters",
        "the way DOM is constructed in certain cases to try to commonize the generated",
        "DOM and behaviors across browsers.",
        "",
        "description:",
        "This plugin has three modes:",
        "",
        "- blockNodeForEnter=BR",
        "- blockNodeForEnter=DIV",
        "- blockNodeForEnter=P",
        "",
        "In blockNodeForEnter=P, the ENTER key starts a new",
        "paragraph, and shift-ENTER starts a new line in the current paragraph.",
        "For example, the input:",
        "",
        "|\tfirst paragraph <shift-ENTER>",
        "|\tsecond line of first paragraph <ENTER>",
        "|\tsecond paragraph",
        "",
        "will generate:",
        "",
        "|\t<p>",
        "|\t\tfirst paragraph",
        "|\t\t<br/>",
        "|\t\tsecond line of first paragraph",
        "|\t</p>",
        "|\t<p>",
        "|\t\tsecond paragraph",
        "|\t</p>",
        "",
        "In BR and DIV mode, the ENTER key conceptually goes to a new line in the",
        "current paragraph, and users conceptually create a new paragraph by pressing ENTER twice.",
        "For example, if the user enters text into an editor like this:",
        "",
        "|\t\tone <ENTER>",
        "|\t\ttwo <ENTER>",
        "|\t\tthree <ENTER>",
        "|\t\t<ENTER>",
        "|\t\tfour <ENTER>",
        "|\t\tfive <ENTER>",
        "|\t\tsix <ENTER>",
        "",
        "It will appear on the screen as two 'paragraphs' of three lines each.  Markupwise, this generates:",
        "",
        "BR:",
        "|\t\tone<br/>",
        "|\t\ttwo<br/>",
        "|\t\tthree<br/>",
        "|\t\t<br/>",
        "|\t\tfour<br/>",
        "|\t\tfive<br/>",
        "|\t\tsix<br/>",
        "",
        "DIV:",
        "|\t\t<div>one</div>",
        "|\t\t<div>two</div>",
        "|\t\t<div>three</div>",
        "|\t\t<div>&nbsp;</div>",
        "|\t\t<div>four</div>",
        "|\t\t<div>five</div>",
        "|\t\t<div>six</div>",
        "blockNodeForEnter: String",
        "This property decides the behavior of Enter key. It can be either P,",
        "DIV, BR, or empty (which means disable this feature). Anything else",
        "will trigger errors.  The default is 'BR'",
        "",
        "See class description for more details.",
        "Overrides _Plugin.setEditor().",
        "While Moz has a mode tht mostly works, it's still a little different,",
        "So, try to just have a common mode and be consistent.  Which means",
        "we need to enable customUndo, if not already enabled.",
        "Just do it manually.  The handleEnterKey has a shift mode that",
        "Always acts like <br>, so just use it.",
        "Use the old range/selection code to kick IE 9 into updating",
        "its range by moving it back, then forward, one 'character'.",
        "add enter key handler",
        "FIXME: need to port to the new event code!!",
        "enter",
        "shift+enter",
        "summary:",
        "Handler for keypress events.",
        "tags:",
        "private",
        "circulate the undo detection code by calling RichText::execCommand directly",
        "set the innerHTML of the new block node",
        "move to the start by moving backwards one char",
        "FIXME",
        "the new created is the original current P, so we have previousSibling below",
        "bogusHtmlContent: [private] String",
        "HTML to stick into a new empty block",
        "&nbsp;",
        "blockNodes: [private] Regex",
        "Regex for testing if a given tag is a block level (display:block) tag",
        "summary:",
        "Handler for enter key events when blockNodeForEnter is DIV or P.",
        "description:",
        "Manually handle enter key event to make the behavior consistent across",
        "all supported browsers. See class description for details.",
        "tags:",
        "private",
        "shift+enter always generates <br>",
        "let browser handle",
        "Text node, we have to split it.",
        "let browser handle",
        "Text node, we have to split it.",
        "We are not splitting the right node, try to locate the correct one",
        "\\xA0 dummy text node remains, but is stripped before get(\"value\")",
        "by RichText._stripTrailingEmptyNodes().  Still, could we just use a plain",
        "space (\" \") instead?",
        "don't change this: do not call this.execCommand, as that may have other logic in subclass",
        "first remove selection",
        "if this is under a LI or the parent of the blockNode is LI, just let browser to handle it",
        "press enter in middle of P may leave a trailing <br/>, let's remove it later",
        "if this li only contains spaces, set the content to empty so the browser will outdent this item",
        "empty LI node",
        "WebKit tosses the range when innerHTML is reset",
        "nothing to check since the browser handles outdent",
        "text node directly under body, let's wrap them in a node",
        "squelch FF3 exception bug when editor content is a single BR",
        "get the newly created block node",
        "FIXME",
        "we shouldn't be here if formatblock worked",
        "We are not checking the right node, try to locate the correct one",
        "lets move caret to the newly created block",
        "position input caret - mostly WebKit needs this",
        "browser does not scroll the caret position into view, do it manually",
        "press enter in the middle of P/DIV/Whatever/",
        "Clone any block level styles.",
        "Okay, we probably have to split.",
        "Text node, we have to split it.",
        "We are not splitting the right node, try to locate the correct one",
        "Place the split, then remove original nodes.",
        "Okay, we split the text.  Now we need to see if we're",
        "parented to the block element we're splitting and if",
        "not, we have to split all the way up.  Ugh.",
        "Clone over any 'style' data.",
        "If font also need to clone over any font data.",
        "this check was necessary on IE",
        "Lastly, move the split out tags to the new block.",
        "as they should now be split properly.",
        "Non-blank text and non-text nodes need to clear out that blank space",
        "before moving the contents.",
        "lets move caret to the newly created block",
        "press enter in middle of P may leave a trailing <br/>, let's remove it later",
        "press enter in middle of P may leave a trailing <br/>, let's remove it later",
        "DomNode",
        "Int",
        "summary:",
        "In the case there are multiple text nodes in a row the offset may not be within the node.  If the offset is larger than the node length, it will attempt to find",
        "the next text sibling until it locates the text node in which the offset refers to",
        "node:",
        "The node to check.",
        "offset:",
        "The position to find within the text node",
        "tags:",
        "private.",
        "Adjust the offset and node in the case of multiple text nodes in a row",
        "summary:",
        "If last child of container is a `<br>`, then remove it.",
        "tags:",
        "private",
        "array.indexOf",
        "declare",
        "dom.isDescendant domClass.replace",
        "domClass.replace",
        "lang.hitch",
        "mouse.enter, mouse.leave",
        "module:",
        "dijit/_MenuBase",
        "summary:",
        "Base class for Menu and MenuBar",
        "parentMenu: [readonly] Widget",
        "pointer to menu that displayed me",
        "popupDelay: Integer",
        "number of milliseconds before hovering (without clicking) causes the popup to automatically open.",
        "autoFocus: Boolean",
        "A toggle to control whether or not a Menu gets focused when opened as a drop down from a MenuBar",
        "or DropDownButton/ComboButton.   Note though that it always get focused when opened via the keyboard.",
        "DOMNode",
        "summary:",
        "Selector (passed to on.selector()) used to identify MenuItem child widgets, but exclude inert children",
        "like MenuSeparator.  If subclass overrides to a string (ex: \"> *\"), the subclass must require dojo/query.",
        "tags:",
        "protected",
        "summary:",
        "Attach point for notification about when a menu item has been executed.",
        "This is an internal mechanism used for Menus to signal to their parent to",
        "close them, because they are about to execute the onClick handler.  In",
        "general developers should not attach to or override this method.",
        "tags:",
        "protected",
        "Boolean",
        "===== closeAll =====",
        "summary:",
        "Attach point for notification about when the user cancels the current menu",
        "This is an internal mechanism used for Menus to signal to their parent to",
        "close them.  In general developers should not attach to or override this method.",
        "tags:",
        "protected",
        "Event",
        "summary:",
        "This handles the right arrow key (left arrow key on RTL systems),",
        "which will either open a submenu, or move to the next item in the",
        "ancestor MenuBar",
        "tags:",
        "private",
        "Event",
        "===== evt =====",
        "summary:",
        "This handler is called when the mouse moves over the popup.",
        "tags:",
        "private",
        "if the mouse hovers over a menu popup that is in pending-close state,",
        "then stop the close operation.",
        "This can't be done in onItemHover since some popup targets don't have MenuItems (e.g. ColorPicker)",
        "highlight the parent menu item pointing to this popup",
        "cancel the pending close",
        "MenuItem",
        "summary:",
        "Called when cursor is over a MenuItem.",
        "tags:",
        "protected",
        "Don't do anything unless user has \"activated\" the menu by:",
        "1) clicking it",
        "2) opening it from a parent menu (which automatically focuses it)",
        "if the user is mixing mouse and keyboard navigation,",
        "then the menu may not be active but a menu item has focus,",
        "but it's not the item that the mouse just hovered over.",
        "To avoid both keyboard and mouse selections, use the latest.",
        "summary:",
        "Called when a child MenuItem becomes inactive because focus",
        "has been removed from the MenuItem *and* it's descendant menus.",
        "tags:",
        "private",
        "Close all popups that are open and descendants of this menu",
        "this calls onClose",
        "MenuItem",
        "summary:",
        "Callback fires when mouse exits a MenuItem",
        "tags:",
        "protected",
        "summary:",
        "Cancels the popup timer because the user has stop hovering",
        "on the MenuItem, etc.",
        "tags:",
        "private",
        "dijit/_WidgetBase",
        "summary:",
        "Cancels the pending-close timer because the close has been preempted",
        "tags:",
        "private",
        "summary:",
        "Cancels the pending-focus timer because the menu was closed before focus occured",
        "tags:",
        "private",
        "summary:",
        "Returns the top menu in this chain of Menus",
        "tags:",
        "private",
        "dijit/_WidgetBase",
        "Event",
        "summary:",
        "Handle clicks on an item.",
        "tags:",
        "private",
        "this can't be done in _onFocus since the _onFocus events occurs asynchronously",
        "non-popup menu",
        "before calling user defined handler, close hierarchy of menus",
        "and restore focus to place it was when menu was opened",
        "user defined handler for click",
        "Boolean",
        "summary:",
        "Open the popup to the side of/underneath the current menu item, and optionally focus first item",
        "tags:",
        "protected",
        "the focused child lost focus since the timer was started",
        "helps finding the parent item that should be focused for this popup",
        "called when the child menu is canceled",
        "set isActive=false (_closeChild vs _cleanUp) so that subsequent hovering will NOT open child menus",
        "which seems aligned with the UX of most applications (e.g. notepad, wordpad, paint shop pro)",
        "put focus back on my node",
        "close the submenu (be sure this is done _after_ focus is moved)",
        "oops, _cleanUp() deselected the item",
        "and unset focusedChild",
        "detect mouseovers to handle lazy mouse movements that temporarily focus other menu items",
        "If user is opening the popup via keyboard (right arrow, or down arrow for MenuBar), then focus the popup.",
        "If the cursor happens to collide with the popup, it will generate an onmouseover event",
        "even though the mouse wasn't moved.  Use defer() to call popup.focus so that",
        "our focus() call overrides the onmouseover event, rather than vice-versa.  (#8742)",
        "summary:",
        "Mark this menu's state as active.",
        "Called when this Menu gets focus from:",
        "",
        "1. clicking it (mouse or via space/arrow key)",
        "2. being opened by a parent menu.",
        "",
        "This is not called just from mouse hover.",
        "Focusing a menu via TAB does NOT automatically set isActive",
        "since TAB is a navigation operation and not a selection one.",
        "For Windows apps, pressing the ALT key focuses the menubar",
        "menus (similar to TAB navigation) but the menu is not active",
        "(ie no dropdown) until an item is clicked.",
        "Event",
        "===== e =====",
        "summary:",
        "Callback when this menu is opened.",
        "This is called by the popup manager as notification that the menu",
        "was opened.",
        "tags:",
        "private",
        "summary:",
        "Mark this menu's state as inactive.",
        "don't do this in _onBlur since the state is pending-close until we get here",
        "summary:",
        "Callback when this menu is closed.",
        "This is called by the popup manager as notification that the menu",
        "was closed.",
        "tags:",
        "private",
        "summary:",
        "Called when submenu is clicked or focus is lost.  Close hierarchy of menus.",
        "tags:",
        "private",
        "If focus is on a descendant MenuItem then move focus to me,",
        "because IE doesn't like it when you display:none a node with focus,",
        "and also so keyboard users don't lose control.",
        "Likely, immediately after a user defined onClick handler will move focus somewhere",
        "else, like a Dialog.",
        "Close all popups that are open and descendants of this menu",
        "unhighlight the focused item",
        "MenuItem",
        "summary:",
        "Called when child of this Menu gets focus from:",
        "",
        "1. clicking it",
        "2. tabbing into it",
        "3. being opened by a parent menu.",
        "",
        "This is not called just from mouse hover.",
        "any previous mouse movement is trumped by focus selection",
        "summary:",
        "Called when focus is moved away from this Menu and it's submenus.",
        "tags:",
        "protected",
        "summary:",
        "Called when the user is done with this menu.  Closes hierarchy of menus.",
        "tags:",
        "private",
        "don't call this.onClose since that's incorrect for MenuBar's that never close",
        "non-popup menu doesn't call onClose",
        "array.indexOf array.some",
        "declare",
        "global",
        "lang.hitch",
        "module:",
        "dijit/tree/ForestStoreModel",
        "summary:",
        "Interface between a dijit.Tree and a dojo.data store that doesn't have a root item,",
        "a.k.a. a store that has multiple \"top level\" items.",
        "",
        "description:",
        "Use this class to wrap a dojo.data store, making all the items matching the specified query",
        "appear as children of a fabricated \"root item\".  If no query is specified then all the",
        "items returned by fetch() on the underlying store become children of the root item.",
        "This class allows dijit.Tree to assume a single root item, even if the store doesn't have one.",
        "",
        "When using this class the developer must override a number of methods according to their app and",
        "data, including:",
        "",
        "- onNewRootItem",
        "- onAddToRoot",
        "- onLeaveRoot",
        "- onNewItem",
        "- onSetItem",
        "Parameters to constructor",
        "rootId: String",
        "ID of fabricated root item",
        "rootLabel: String",
        "Label of fabricated root item",
        "query: String",
        "Specifies the set of children of the root item.",
        "example:",
        "|\t{type:'continent'}",
        "End of parameters to constructor",
        "summary:",
        "Sets up variables, etc.",
        "tags:",
        "private",
        "Make dummy root item",
        "optional param",
        "=======================================================================",
        "Methods for traversing hierarchy",
        "dojo/data/Item",
        "summary:",
        "Tells if an item has or may have children.  Implementing logic here",
        "avoids showing +/- expando icon for nodes that we know don't have children.",
        "(For efficiency reasons we may not want to check if an element actually",
        "has children until user clicks the expando node)",
        "tags:",
        "extension",
        "dojo/data/Item",
        "function(items)",
        "function",
        "summary:",
        "Calls onComplete() with array of child items of given parent item, all loaded.",
        "already loaded, just return",
        "=======================================================================",
        "Inspecting items",
        "anything",
        "object",
        "item",
        "item",
        "=======================================================================",
        "Write interface",
        "dijit/tree/dndSource.__Item",
        "Item",
        "int?",
        "summary:",
        "Creates a new item.   See dojo/data/api/Write for details on args.",
        "Used in drag & drop when item from external source dropped onto tree.",
        "dijit/tree/dndSource.__Item",
        "===== args =====",
        "summary:",
        "User can override this method to modify a new element that's being",
        "added to the root of the tree, for example to add a flag like root=true",
        "Item",
        "Item",
        "Item",
        "Boolean",
        "int?",
        "summary:",
        "Move or copy an item from one parent item to another.",
        "Used in drag & drop",
        "It's onLeaveRoot()'s responsibility to modify the item so it no longer matches",
        "this.query... thus triggering an onChildrenChange() event to notify the Tree",
        "that this element is no longer a child of the root node",
        "It's onAddToRoot()'s responsibility to modify the item so it matches",
        "this.query... thus triggering an onChildrenChange() event to notify the Tree",
        "that this element is now a child of the root node",
        "=======================================================================",
        "Handling for top level children",
        "item",
        "summary:",
        "Called when item added to root of tree; user must override this method",
        "to modify the item so that it matches the query for top level items",
        "example:",
        "|\tstore.setValue(item, \"root\", true);",
        "tags:",
        "extension",
        "item",
        "summary:",
        "Called when item removed from root of tree; user must override this method",
        "to modify the item so it doesn't match the query for top level items",
        "example:",
        "|\tstore.unsetAttribute(item, \"root\");",
        "tags:",
        "extension",
        "=======================================================================",
        "Events from data store",
        "reruns the query for the children of the root node,",
        "sending out an onSet notification if those children have changed",
        "If the list of children or the order of children has changed...",
        "dojo/data/api/Item",
        "Object",
        "summary:",
        "Handler for when new items appear in the store.  Developers should override this",
        "method to be more efficient based on their app/data.",
        "description:",
        "Note that the default implementation requeries the top level items every time",
        "a new item is created, since any new item could be a top level item (even in",
        "addition to being a child of another item, since items can have multiple parents).",
        "",
        "If developers can detect which items are possible top level items (based on the item and the",
        "parentInfo parameters), they should override this method to only call _requeryTop() for top",
        "level items.  Often all top level items have parentInfo==null, but",
        "that will depend on which store you use and what your data is like.",
        "tags:",
        "extension",
        "Object",
        "summary:",
        "Handler for delete notifications from underlying store",
        "check if this was a child of root, and if so send notification that root's children",
        "have changed",
        "item",
        "attribute-name-string",
        "Object|Array",
        "Object|Array",
        "summary:",
        "Updates the tree view according to changes to an item in the data store.",
        "Developers should override this method to be more efficient based on their app/data.",
        "description:",
        "Handles updates to an item's children by calling onChildrenChange(), and",
        "other updates to an item by calling onChange().",
        "",
        "Also, any change to any item re-executes the query for the tree's top-level items,",
        "since this modified item may have started/stopped matching the query for top level items.",
        "",
        "If possible, developers should override this function to only call _requeryTop() when",
        "the change to the item has caused it to stop/start being a top level item in the tree.",
        "tags:",
        "extension",
        "declare",
        "module:",
        "dijit/PopupMenuBarItem",
        "summary:",
        "Item in a MenuBar like \"File\" or \"Edit\", that spawns a submenu when pressed (or hovered)",
        "array.forEach",
        "declare",
        "dom.setSelectable",
        "domAttr.set or get domAttr.remove",
        "domClass.replace",
        "domGeometry.setMarginBox domGeometry.getMarginBox",
        "event.stop",
        "fxUtils.wipeIn fxUtils.wipeOut",
        "kernel.deprecated",
        "keys.DOWN_ARROW keys.ENTER",
        "defaultDuration",
        "module:",
        "dijit/TitlePane",
        "summary:",
        "A pane with a title on top, that can be expanded or collapsed.",
        "",
        "description:",
        "An accessible container with a title Heading, and a content",
        "section that slides open and closed. TitlePane is an extension to",
        "`dijit/layout/ContentPane`, providing all the useful content-control aspects from it.",
        "",
        "example:",
        "|\t// load a TitlePane from remote file:",
        "|\tvar foo = new dijit.TitlePane({ href: \"foobar.html\", title:\"Title\" });",
        "|\tfoo.startup();",
        "",
        "example:",
        "|\t<!-- markup href example: -->",
        "|\t<div data-dojo-type=\"dijit/TitlePane\" data-dojo-props=\"href: 'foobar.html', title: 'Title'\"></div>",
        "",
        "example:",
        "|\t<!-- markup with inline data -->",
        "|\t<div data-dojo-type=\"dijit/TitlePane\" title=\"Title\">",
        "|\t\t<p>I am content</p>",
        "|\t</div>",
        "title: String",
        "Title of the pane",
        "override default where title becomes a hover tooltip",
        "open: Boolean",
        "Whether pane is opened or closed.",
        "toggleable: Boolean",
        "Whether pane can be opened or closed by clicking the title bar.",
        "tabIndex: String",
        "Tabindex setting for the title (so users can tab to the title then",
        "use space/enter to open/close the title pane)",
        "duration: Integer",
        "Time in milliseconds to fade in/fade out",
        "baseClass: [protected] String",
        "The root className to be placed on this widget's domNode.",
        "doLayout: [protected] Boolean",
        "Don't change this parameter from the default value.",
        "This ContentPane parameter doesn't make sense for TitlePane, since TitlePane",
        "is never a child of a layout container, nor should TitlePane try to control",
        "the size of an inner widget.",
        "Tooltip is defined in _WidgetBase but we need to handle the mapping to DOM here",
        "focusNode spans the entire width, titleNode doesn't",
        "Hover and focus effect on title bar, except for non-toggleable TitlePanes",
        "This should really be controlled from _setToggleableAttr() but _CssStateMixin",
        "doesn't provide a way to disconnect a previous _trackMouseState() call",
        "setup open/close animations",
        "Boolean",
        "Boolean",
        "summary:",
        "Hook to make set(\"open\", boolean) control the open/closed state of the pane.",
        "open: Boolean",
        "True if you want to open the pane, false if you want to close it.",
        "load content (if this is the first time we are opening the TitlePane",
        "and content is specified as an href, or href was set when hidden)",
        "Boolean",
        "summary:",
        "Hook to make set(\"toggleable\", boolean) work.",
        "canToggle: Boolean",
        "True to allow user to open/close pane by clicking title bar.",
        "String|DomNode|Nodelist",
        "summary:",
        "Hook to make set(\"content\", ...) work.",
        "Typically called when an href is loaded.  Our job is to make the animation smooth.",
        "we are currently *closing* the pane (or the pane is closed), so just let that continue",
        "freeze container at current height so that adding new content doesn't make it jump",
        "add the new content (erasing the old content, if any)",
        "call _wipeIn.play() to animate from current height to new height",
        "summary:",
        "Switches between opened and closed state",
        "tags:",
        "private",
        "summary:",
        "Set the open/close css state for the TitlePane",
        "tags:",
        "private",
        "Event",
        "summary:",
        "Handler for when user hits a key",
        "tags:",
        "private",
        "summary:",
        "Handler when user clicks the title bar",
        "tags:",
        "private",
        "String",
        "summary:",
        "Deprecated.  Use set('title', ...) instead.",
        "tags:",
        "deprecated",
        "array.forEach",
        "declare",
        "domAttr.set",
        "i18n.getLocalization",
        "module:",
        "dijit/form/_ComboBoxMenuMixin",
        "summary:",
        "Focus-less menu for internal use in `dijit/form/ComboBox`",
        "tags:",
        "private",
        "_messages: Object",
        "Holds \"next\" and \"previous\" text for paging buttons on drop down",
        "fill in template with i18n messages",
        "Object",
        "DomNode",
        "stubs",
        "Number",
        "===== direction =====",
        "summary:",
        "Notifies ComboBox/FilteringSelect that user selected an option.",
        "tags:",
        "callback",
        "Number",
        "===== direction =====",
        "summary:",
        "Notifies ComboBox/FilteringSelect that user clicked to advance to next/previous page.",
        "tags:",
        "callback",
        "summary:",
        "Callback from dijit.popup code to this widget, notifying it that it closed",
        "tags:",
        "private",
        "Object",
        "summary:",
        "Creates an option to appear on the popup menu subclassed by",
        "`dijit/form/FilteringSelect`.",
        "#3250: in blank options, assign a normal height",
        "&nbsp;",
        "update menuitem.dir if BidiSupport was required",
        "summary:",
        "Fills in the items in the drop down list",
        "results:",
        "Array of items",
        "options:",
        "The options to the query function of the store",
        "",
        "labelFunc:",
        "Function to produce a label in the drop down list from a dojo.data item",
        "display \"Previous . . .\" button",
        "create options using _createOption function defined by parent",
        "ComboBox (or FilteringSelect) class",
        "#2309:",
        "iterate over cache nondestructively",
        "index to this.items; use indirection to avoid mem leak",
        "display \"Next . . .\" button",
        "Try to determine if we should show 'more'...",
        "Weird return from a data store, where a start + count > maxOptions",
        "implies maxOptions isn't really valid and we have to go into faking it.",
        "And more or less assume more if count == results.length",
        "Don't know the size, so we do the best we can based off count alone.",
        "So, if we have an exact match to count, assume more.",
        "summary:",
        "Clears the entries in the drop down list, but of course keeps the previous and next buttons.",
        "summary:",
        "Highlight the first real item in the list (not Previous Choices).",
        "summary:",
        "Highlight the last real item in the list (not More Choices).",
        "patternToRegExp",
        "declare",
        "event.stop",
        "keys",
        "lang.clone lang.hitch",
        "query",
        "has(\"ie\")",
        "string.substitute",
        "registry.byId",
        "module:",
        "dijit/form/_SearchMixin",
        "summary:",
        "A mixin that implements the base functionality to search a store based upon user-entered text such as",
        "with `dijit/form/ComboBox` or `dijit/form/FilteringSelect`",
        "tags:",
        "protected",
        "pageSize: Integer",
        "Argument to data provider.",
        "Specifies maximum number of search results to return per query",
        "store: [const] dojo/store/api/Store",
        "Reference to data provider object used by this ComboBox.",
        "The store must accept an object hash of properties for its query. See `query` and `queryExpr` for details.",
        "fetchProperties: Object",
        "Mixin to the store's fetch.",
        "For example, to set the sort order of the ComboBox menu, pass:",
        "|\t{ sort: [{attribute:\"name\",descending: true}] }",
        "To override the default queryOptions so that deep=false, do:",
        "|\t{ queryOptions: {ignoreCase: true, deep: false} }",
        "query: Object",
        "A query that can be passed to `store` to initially filter the items.",
        "ComboBox overwrites any reference to the `searchAttr` and sets it to the `queryExpr` with the user's input substituted.",
        "list: [const] String",
        "Alternate to specifying a store.  Id of a dijit/form/DataList widget.",
        "Avoid having list applied to the DOM node, since it has native meaning in modern browsers",
        "searchDelay: Integer",
        "Delay in milliseconds between when user types something and we start",
        "searching based on that value",
        "searchAttr: String",
        "Search for items in the data store where this attribute (in the item)",
        "matches what the user typed",
        "queryExpr: String",
        "This specifies what query is sent to the data store,",
        "based on what the user has typed.  Changing this expression will modify",
        "whether the results are only exact matches, a \"starting with\" match,",
        "etc.",
        "dojo.data query expression pattern.",
        "`${0}` will be substituted for the user text.",
        "`*` is used for wildcards.",
        "`${0}*` means \"starts with\", `*${0}*` means \"contains\", `${0}` means \"is\"",
        "ignoreCase: Boolean",
        "Set true if the query should ignore case when matching possible items",
        "stop in-progress query",
        "Event",
        "summary:",
        "Handles input (keyboard/paste) events",
        "except for cutting/pasting case - ctrl + x/v",
        "throw out weird key combinations and spurious events",
        "Non char keys (F1-F12 etc..) shouldn't start a search..",
        "Ascii characters and IME input (Chinese, Japanese etc.) should.",
        "IME input produces keycode == 229.",
        "need to wait a tad before start search so that the event",
        "bubbles through DOM and we have value visible",
        "===== results, query, options =====",
        "summary:",
        "Callback when a search completes.",
        "",
        "results: Object",
        "An array of items from the originating _SearchMixin's store.",
        "",
        "query: Object",
        "A copy of the originating _SearchMixin's query property.",
        "",
        "options: Object",
        "The additional parameters sent to the originating _SearchMixin's store, including: start, count, queryOptions.",
        "",
        "tags:",
        "callback",
        "String",
        "summary:",
        "Starts a search for elements matching text (text==\"\" means to return all items),",
        "and calls onSearch(...) when the search completes, to display the results.",
        "Setup parameters to be passed to store.query().",
        "Create a new query to prevent accidentally querying for a hidden",
        "value from FilteringSelect's keyField",
        "#5970",
        "remove for 2.0",
        "avoid getting unwanted notify",
        "avoid getting unwanted notify",
        "Setup method to fetching the next page of results",
        "tell callback the direction of the paging so the screen",
        "reader knows which menu option to shout",
        "don't treat canceled query as an error",
        "Generate query",
        "remove this branch for 2.0",
        "Query on searchAttr is a regex for benefit of dojo/store/Memory,",
        "but with a toString() method to help dojo/store/JsonRest.",
        "Search string like \"Co*\" converted to regex like /^Co.*$/i.",
        "set _lastQuery, *then* start the timeout",
        "otherwise, if the user types and the last query returns before the timeout,",
        "_lastQuery won't be set and their input gets rewritten",
        "INITIALIZATION METHODS ///////////////////////////////////////",
        "declare",
        "kernel.deprecated",
        "module:",
        "dijit/form/ToggleButton",
        "summary:",
        "A templated button widget that can be in two states (checked or not).",
        "Can be base class for things like tabs or checkbox or radio buttons.",
        "Boolean",
        "summary:",
        "Deprecated.  Use set('checked', true/false) instead.",
        "declare",
        "event.stop",
        "keys.END keys.HOME",
        "module:",
        "dijit/form/NumberSpinner",
        "summary:",
        "Extends NumberTextBox to add up/down arrows and pageup/pagedown for incremental change to the value",
        "",
        "description:",
        "A `dijit/form/NumberTextBox` extension to provide keyboard accessible value selection",
        "as well as icons for spinning direction. When using the keyboard, the typematic rules",
        "apply, meaning holding the key will gradually increase or decrease the value and",
        "accelerate.",
        "",
        "example:",
        "| new NumberSpinner({ constraints:{ max:300, min:100 }}, \"someInput\");",
        "Object",
        "Number",
        "summary:",
        "Change Number val by the given amount",
        "tags:",
        "protected",
        "blank or invalid value and they want to spin, so create defaults",
        "gibberish, so HOME and END are default editing keys",
        "eat home or end key whether we change the value or not",
        "declare",
        "domStyle.set",
        "module:",
        "dijit/form/Textarea",
        "summary:",
        "A textarea widget that adjusts it's height according to the amount of data.",
        "",
        "description:",
        "A textarea that dynamically expands/contracts (changing it's height) as",
        "the user types, to display all the text without requiring a scroll bar.",
        "",
        "Takes nearly all the parameters (name, value, etc.) that a vanilla textarea takes.",
        "Rows is not supported since this widget adjusts the height.",
        "",
        "example:",
        "|\t<textarea data-dojo-type=\"dijit/form/TextArea\">...</textarea>",
        "TODO: for 2.0, rename this to ExpandingTextArea, and rename SimpleTextarea to TextArea",
        "Override SimpleTextArea.cols to default to width:100%, for backward compatibility",
        "tweak textarea style to reduce browser differences",
        "declare",
        "module:",
        "dijit/form/DateTextBox",
        "summary:",
        "A validating, serializable, range-bound date text box with a drop down calendar",
        "example:",
        "|\tnew DateTextBox({value: new Date(2009, 0, 20)})",
        "example:",
        "|\t<input data-dojo-type='dijit/form/DateTextBox' value='2009-01-20'>",
        "value: Date",
        "The value of this widget as a JavaScript Date object, with only year/month/day specified.",
        "If specified in markup, use the format specified in `stamp.fromISOString`.",
        "set(\"value\", ...) accepts either a Date object or a string.",
        "value.toString()=\"NaN\"",
        "array.forEach array.map",
        "declare",
        "event.stop",
        "fx.Animation",
        "dom.setSelectable",
        "domAttr.attr",
        "domClass.remove",
        "domConstruct.place",
        "keys",
        "lang.getObject lang.hitch",
        "has(\"ie\") has(\"dijit-legacy-requires\")",
        "publish",
        "focus.focus()",
        "manager.defaultDuration",
        "module:",
        "dijit/layout/AccordionContainer",
        "Design notes:",
        "",
        "An AccordionContainer is a StackContainer, but each child (typically ContentPane)",
        "is wrapped in a _AccordionInnerContainer.   This is hidden from the caller.",
        "",
        "The resulting markup will look like:",
        "",
        "<div class=dijitAccordionContainer>",
        "<div class=dijitAccordionInnerContainer>\t(one pane)",
        "<div class=dijitAccordionTitle>\t\t(title bar) ... </div>",
        "<div class=dijtAccordionChildWrapper>   (content pane) </div>",
        "</div>",
        "</div>",
        "",
        "Normally the dijtAccordionChildWrapper is hidden for all but one child (the shown",
        "child), so the space for the content pane is all the title bars + the one dijtAccordionChildWrapper,",
        "which on claro has a 1px border plus a 2px bottom margin.",
        "",
        "During animation there are two dijtAccordionChildWrapper's shown, so we need",
        "to compensate for that.",
        "summary:",
        "The title bar to click to open up an accordion pane.",
        "Internal widget used by AccordionContainer.",
        "tags:",
        "private",
        "label: String",
        "Title of the pane",
        "title: String",
        "Tooltip that appears on hover",
        "iconClassAttr: String",
        "CSS class for icon to left of label",
        "summary:",
        "Returns the AccordionContainer parent.",
        "tags:",
        "private",
        "summary:",
        "Returns the height of the title dom node.",
        "Integer",
        "TODO: maybe the parent should set these methods directly rather than forcing the code",
        "into the button widget?",
        "summary:",
        "Callback when someone clicks my title.",
        "Event",
        "Boolean",
        "summary:",
        "Internal widget placed as direct child of AccordionContainer.containerNode.",
        "When other widgets are added as children to an AccordionContainer they are wrapped in",
        "this widget.",
        "=====\n\t\t// buttonWidget: Function|String\n\t\t//\t\tClass to use to instantiate title\n\t\t//\t\t(Wish we didn't have a separate widget for just the title but maintaining it\n\t\t//\t\tfor backwards compatibility, is it worth it?)\n\t\t buttonWidget: null,\n=====",
        "=====\n\t\t// contentWidget: dijit/_WidgetBase\n\t\t//\t\tPointer to the real child widget\n\t\tcontentWidget: null,\n=====",
        "tell nested layout widget that we will take care of sizing",
        "Builds a template like:",
        "<div class=dijitAccordionInnerContainer>",
        "Button",
        "<div class=dijitAccordionChildWrapper>",
        "ContentPane",
        "</div>",
        "</div>",
        "Create wrapper div, placed where the child is now",
        "wrapper div's first child is the button widget (ie, the title bar)",
        "and then the actual content widget (changing it from prior-sibling to last-child),",
        "wrapped by a <div class=dijitAccordionChildWrapper>",
        "Map changes in content widget's title etc. to changes in the button",
        "Boolean",
        "Called by _Container.addChild()",
        "Boolean",
        "since getChildren isn't working for me, have to code this manually",
        "summary:",
        "Holds a set of panes where every pane's title is visible, but only one pane's content is visible at a time,",
        "and switching between panes is visualized by sliding the other panes up/down.",
        "example:",
        "|\t<div data-dojo-type=\"dijit/layout/AccordionContainer\">",
        "|\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"pane 1\">",
        "|\t\t</div>",
        "|\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" title=\"pane 2\">",
        "|\t\t\t<p>This is some text</p>",
        "|\t\t</div>",
        "|\t</div>",
        "duration: Integer",
        "Amount of time (in ms) it takes to slide panes",
        "buttonWidget: [const] String",
        "The name of the widget used to display the title of each pane",
        "=====\n\t\t// _verticalSpace: Number\n\t\t//\t\tPixels of space available for the open pane\n\t\t//\t\t(my content box size minus the cumulative size of all the title bars)\n\t\t_verticalSpace: 0,\n=====",
        "TODO: put this in dijit.css",
        "Implement _LayoutWidget.layout() virtual method.",
        "Set the height of the open pane based on what room remains.",
        "space taken up by title, plus wrapper div (with border/margin) for open pane",
        "get cumulative height of all the unselected title bars",
        "Using domGeometry.getMarginSize() rather than domGeometry.position() since claro has 1px bottom margin",
        "to separate accordion panes.  Not sure that works perfectly, it's probably putting a 1px",
        "margin below the bottom pane (even though we don't want one).",
        "Memo size to make displayed child",
        "Overrides _LayoutWidget._setupChild().",
        "Put wrapper widget around the child widget, showing title",
        "dijit/_WidgetBase",
        "Integer?",
        "Overrides _LayoutWidget.addChild().",
        "Adding a child to a started Accordion is complicated because children have",
        "wrapper widgets.  Default code path (calling this.inherited()) would add",
        "the new child inside another child's wrapper.",
        "First add in child as a direct child of this AccordionContainer",
        "get wrapper panes",
        "Then stick the wrapper widget around the child widget",
        "Code below copied from StackContainer",
        "publish",
        "We haven't been started yet so just add in the child widget directly,",
        "and the wrapper will be created on startup()",
        "Overrides _LayoutWidget.removeChild().",
        "Destroy wrapper widget first, before StackContainer.getChildren() call.",
        "Replace wrapper widget with true child widget (ContentPane etc.).",
        "This step only happens if the AccordionContainer has been started; otherwise there's no wrapper.",
        "Overrides _Container.getChildren() to return content panes rather than internal AccordionInnerContainer panes",
        "If AccordionContainer has been started, then each child has a wrapper widget which",
        "also needs to be destroyed.",
        "Override StackContainer._showChild() to set visibility of _wrapperWidget.containerNode",
        "Override StackContainer._showChild() to set visibility of _wrapperWidget.containerNode",
        "dijit/_WidgetBase?",
        "dijit/_WidgetBase?",
        "Boolean",
        "Overrides StackContainer._transition() to provide sliding of title bars etc.",
        "workaround animation bugs by not animating; not worth supporting animation for IE6 & 7",
        "there's an in-progress animation.  speedily end it so we can do the newly requested one",
        "prepare widget to be slid in",
        "Size the new widget, in case this is the first time it's being shown,",
        "or I have been resized since the last time it was shown.",
        "Note that page must be visible for resizing to work.",
        "During the animation we will be showing two dijitAccordionChildWrapper nodes at once,",
        "which on claro takes up 4px extra space (compared to stable AccordionContainer).",
        "Have to compensate for that by immediately shrinking the pane being closed.",
        "avoid fractional values",
        "If child has an href, promise that fires when the widget has finished loading",
        "note: we are treating the container as controller here",
        "Event",
        "dijit/_WidgetBase",
        "summary:",
        "Handle keypress events",
        "description:",
        "This is called from a handler on AccordionContainer.domNode",
        "(setup in StackContainer), and is also called directly from",
        "the click handler for accordion labels",
        "Back compat w/1.6, remove for 2.0",
        "use indirection so modules not rolled into a build",
        "For monkey patching",
        "declare",
        "event.stop",
        "keys",
        "focus.focus()",
        "module:",
        "dijit/form/ComboButton",
        "summary:",
        "A combination button and drop-down button.",
        "Users can click one side to \"press\" the button, or click an arrow",
        "icon to display the drop down.",
        "",
        "example:",
        "|\t<button data-dojo-type=\"dijit/form/ComboButton\" onClick=\"...\">",
        "|\t\t<span>Hello world</span>",
        "|\t\t<div data-dojo-type=\"dijit/Menu\">...</div>",
        "|\t</button>",
        "",
        "example:",
        "|\tvar button1 = new ComboButton({label: \"hello world\", onClick: foo, dropDown: \"myMenu\"});",
        "|\tdojo.body().appendChild(button1.domNode);",
        "",
        "Map widget attributes to DOMNode attributes.",
        "override _FormWidgetMixin which puts id on the focusNode",
        "optionsTitle: String",
        "Text that describes the options menu (accessibility)",
        "Set classes like dijitButtonContentsHover or dijitArrowButtonActive depending on",
        "mouse action over specified node",
        "Event",
        "summary:",
        "Handler for right arrow key when focus is on left part of button",
        "Event",
        "summary:",
        "Handler for left arrow key when focus is on right part of button",
        "String",
        "summary:",
        "Focuses this widget to according to position, if specified,",
        "otherwise on arrow node",
        "position:",
        "\"start\" or \"end\"",
        "array.forEach array.indexOf array.some",
        "cookie",
        "declare",
        "dom.setSelectable",
        "domClass.add",
        "domConstruct.create domConstruct.destroy",
        "domGeometry.marginBox domGeometry.position",
        "domStyle.style",
        "event.stop",
        "kernel.deprecated",
        "lang.extend lang.hitch",
        "has(\"mozilla\")",
        "registry.getUniqueId()",
        "module:",
        "dijit/layout/SplitContainer",
        "",
        "FIXME: make it prettier",
        "FIXME: active dragging upwards doesn't always shift other bars (direction calculation is wrong in this case)",
        "FIXME: sizeWidth should be a CSS attribute (at 7 because css wants it to be 7 until we fix to css)",
        "",
        "summary:",
        "Deprecated.  Use `dijit/layout/BorderContainer` instead.",
        "description:",
        "A Container widget with sizing handles in-between each child.",
        "Contains multiple children widgets, all of which are displayed side by side",
        "(either horizontally or vertically); there's a bar between each of the children,",
        "and you can adjust the relative size of each child by dragging the bars.",
        "",
        "You must specify a size (width and height) for the SplitContainer.",
        "",
        "See `SplitContainer.ChildWidgetProperties` for details on the properties that can be set on",
        "children of a `SplitContainer`.",
        "tags:",
        "deprecated",
        "activeSizing: Boolean",
        "If true, the children's size changes as you drag the bar;",
        "otherwise, the sizes don't change until you drop the bar (by mouse-up)",
        "sizerWidth: Integer",
        "Size in pixels of the bar between each child",
        "orientation: String",
        "either 'horizontal' or vertical; indicates whether the children are",
        "arranged side-by-side or up/down.",
        "persist: Boolean",
        "Save splitter positions in a cookie",
        "overflow has to be explicitly hidden for splitContainers using gekko (trac #1435)",
        "to keep other combined css classes from inadvertantly making the overflow visible",
        "hidden doesn't work",
        "create the fake dragger",
        "FIXME: do this without a try/catch",
        "#1681: work around the dreaded 'quirky percentages in IE' layout bug",
        "If the splitcontainer's dimensions are specified in percentages, it",
        "will be resized when the virtualsizer is displayed in _showSizingLine",
        "(typically expanding its bounds unnecessarily). This happens because",
        "we use position: relative for .dijitSplitContainer.",
        "The workaround: instead of changing the display style attribute,",
        "switch to changing the zIndex (bring to front/move to back)",
        "attach the children and create the draggers",
        "dijit/_WidgetBase",
        "TODO: use a template for this!!!",
        "add the thumb div",
        "FIXME: are you serious? why aren't we using mover start/stop combo?",
        "summary:",
        "Remove sizer, but only if widget is really our child and",
        "we have at least one sizer to throw away",
        "Remove widget and repaint",
        "dijit/_WidgetBase",
        "Integer?",
        "summary:",
        "Add a child widget to the container",
        "child:",
        "a widget to add",
        "insertIndex:",
        "postion in the \"stack\" to add the child widget",
        "Do the stuff that startup() does for each widget",
        "and then reposition (ie, shrink) every pane to make room for the new guy",
        "summary:",
        "Do layout of panels",
        "base class defines this._contentBox on initial creation and also",
        "on resize",
        "",
        "calculate space",
        "",
        "",
        "calculate total of SizeShare values",
        "",
        "",
        "work out actual pixels per sizeshare unit",
        "",
        "",
        "set the SizeActual member of each pane",
        "",
        "",
        "make sure the sizes are ok",
        "",
        "",
        "now loop, positioning each pane and letting children resize themselves",
        "",
        "if we don't have any sizers, our layout method hasn't been called yet",
        "so bail until we are called..TODO: REVISIT: need to change the startup",
        "algorithm to guaranteed the ordering of calls to layout method",
        "error-checking",
        "first we position the sizing handle before this pane",
        "TODO: resize() takes l and t parameters too, don't need to set manually",
        "TODO: resize() takes l and t parameters too, don't need to set manually",
        "stick all the growth in this pane",
        "put as much growth in here as we can",
        "only make adjustments if we have enough space for all the minimums",
        "summary:",
        "Begin dragging the splitter between child[i] and child[i+1]",
        "startPoint is the e.pageX or e.pageY at start of drag",
        "Calculate maximum to the left or right that splitter is allowed to be dragged",
        "minDelta is negative to indicate left/upward drag where end.pageX < start.pageX.",
        "attach mouse events",
        "summary:",
        "Called on mousemove while dragging the splitter",
        "lastPoint is the most recent e.pageX or e.pageY during the drag",
        "Number",
        "summary:",
        "Resets sizes of panes before and after splitter being dragged.",
        "Called during a drag, for active sizing, or at the end of a drag otherwise.",
        "delta: Number",
        "Change in slider position compared to start of drag.   But note that",
        "this function may be called multiple times during drag.",
        "summary:",
        "Show virtual splitter, for non-active resizing",
        "Number",
        "summary:",
        "Called for non-active resizing, to move the virtual splitter without adjusting the size of the panes",
        "summary:",
        "These properties can be specified for the children of a SplitContainer.",
        "sizeMin: [deprecated] Integer",
        "Minimum size (width or height) of a child of a SplitContainer.",
        "The value is relative to other children's sizeShare properties.",
        "sizeShare: [deprecated] Integer",
        "Size (width or height) of a child of a SplitContainer.",
        "The value is relative to other children's sizeShare properties.",
        "For example, if there are two children and each has sizeShare=10, then",
        "each takes up 50% of the available space.",
        "Since any widget can be specified as a SplitContainer child, mix them",
        "into the base widget class.  (This is a hack, but it's effective.)",
        "This is for the benefit of the parser.   Remove for 2.0.  Also, hide from doc viewer.",
        "===== {} || =====",
        "patternToRegExp",
        "declare",
        "domAttr.get",
        "event.stop",
        "lang.clone lang.hitch",
        "query",
        "regexp.escapeString",
        "has(\"ie\")",
        "string.substitute",
        "registry.byId",
        "defines _TextBoxMixin.selectInputText",
        "module:",
        "dijit/form/_AutoCompleterMixin",
        "summary:",
        "A mixin that implements the base functionality for `dijit/form/ComboBox`/`dijit/form/FilteringSelect`",
        "description:",
        "All widgets that mix in dijit/form/_AutoCompleterMixin must extend `dijit/form/_FormValueWidget`.",
        "tags:",
        "protected",
        "item: Object",
        "This is the item returned by the dojo/store/api/Store implementation that",
        "provides the data for this ComboBox, it's the currently selected item.",
        "autoComplete: Boolean",
        "If user types in a partial string, and then tab out of the `<input>` box,",
        "automatically copy the first entry displayed in the drop down list to",
        "the `<input>` field",
        "highlightMatch: String",
        "One of: \"first\", \"all\" or \"none\".",
        "",
        "If the ComboBox/FilteringSelect opens with the search results and the searched",
        "string can be found, it will be highlighted.  If set to \"all\"",
        "then will probably want to change `queryExpr` parameter to '*${0}*'",
        "",
        "Highlighting is only performed when `labelType` is \"text\", so as to not",
        "interfere with any HTML markup an HTML label might contain.",
        "labelAttr: String?",
        "The entries in the drop down list come from this attribute in the",
        "dojo.data items.",
        "If not specified, the searchAttr attribute is used instead.",
        "labelType: String",
        "Specifies how to interpret the labelAttr in the data store items.",
        "Can be \"html\" or \"text\".",
        "Flags to _HasDropDown to limit height of drop down to make it fit in viewport",
        "For backwards compatibility let onClick events propagate, even clicks on the down arrow button",
        "DomNode",
        "khtml 3.5.2 has selection* methods as does webkit nightlies from 2005-06-22",
        "FIXME: this is totally borked on Moz < 1.3. Any recourse?",
        "in the case of a mouse click in a popup being handled,",
        "then the win.doc.selection is not the textarea, but the popup",
        "var r = win.doc.selection.createRange();",
        "hack to get IE 6 to play nice. What a POS browser.",
        "If control doesn't have focus, you get an exception.",
        "Seems to happen on reverse-tab, but can also happen on tab (seems to be a race condition - only happens sometimes).",
        "There appears to be no workaround for this - googled for quite a while.",
        "If focus has shifted, 0 is fine for caret pos.",
        "DomNode",
        "Number",
        "Boolean",
        "Additional code to set disabled state of ComboBox node.",
        "Overrides _FormValueWidget._setDisabledAttr() or ValidationTextBox._setDisabledAttr().",
        "Event",
        "summary:",
        "Handles keyboard events",
        "alphanumeric reserved for searching",
        "except for cutting/pasting case - ctrl + x/v",
        "throw out spurious events",
        "_HasDropDown will do some of the work:",
        "",
        "1. when drop down is not yet shown:",
        "- if user presses the down arrow key, call loadDropDown()",
        "2. when drop down is already displayed:",
        "- on ESC key, call closeDropDown()",
        "- otherwise, call dropDown.handleKey() to process the keystroke",
        "don't process keys with modifiers  - but we want shift+TAB",
        "Keystroke caused ComboBox_menu to move to a different item.",
        "Copy new item to <input> box.",
        "prevent submitting form if user presses enter. Also",
        "prevent accepting the value if either Next or Previous",
        "are selected",
        "only stop event on prev/next",
        "prevent submit",
        "prevent submit",
        "prevent submit if ENTER was to choose an item",
        "Update 'value' (ex: KY) according to currently displayed text",
        "set value if needed",
        "move cursor to end and cancel highlighting",
        "fall through",
        "if the user had More Choices selected fall into the",
        "_onBlur handler",
        "fall through",
        "in case results come back later",
        "String",
        "summary:",
        "Fill in the textbox with the first item from the drop down",
        "list, and highlight the characters that were",
        "auto-completed. For example, if user typed \"CA\" and the",
        "drop down list appeared, the textbox would be changed to",
        "\"California\" and \"ifornia\" would be highlighted.",
        "IE7: clear selection so next highlight works all the time",
        "does text autoComplete the value in the textbox?",
        "only try to extend if we added the last character at the end of the input",
        "only add to input node as we would overwrite Capitalisation of chars",
        "actually, that is ok",
        ".substr(cpos);",
        "visually highlight the autocompleted characters",
        "text does not autoComplete; replace the whole value and highlight",
        "Object",
        "Object",
        "Object",
        "summary:",
        "Callback when a search completes.",
        "description:",
        "1. generates drop-down list and calls _showResultList() to display it",
        "2. if this result list is from user pressing \"more choices\"/\"previous choices\"",
        "then tell screen reader to announce new option",
        "if no results and not just the previous choices button",
        "Fill in the textbox with the first item from the drop down list,",
        "and highlight the characters that were auto-completed. For",
        "example, if user typed \"CA\" and the drop down list appeared, the",
        "textbox would be changed to \"California\" and \"ifornia\" would be",
        "highlighted.",
        "show our list (only if we have content, else nothing)",
        "#4091:",
        "tell the screen reader that the paging callback finished by",
        "shouting the next choice",
        "when the user clicks the arrow button to show the full list,",
        "startSearch looks for \"*\".",
        "it does not make sense to autocomplete",
        "if they are just previewing the options available.",
        "1st real item",
        "summary:",
        "Display the drop down if not already displayed, or if it is displayed, then",
        "reposition it if necessary (reposition may be necessary if drop down's height changed).",
        "Function",
        "===== callback =====",
        "Overrides _HasDropDown.loadDropDown().",
        "This is called when user has pressed button icon or pressed the down arrow key",
        "to open the drop down.",
        "signal to _HasDropDown that it needs to call loadDropDown() to load the",
        "drop down asynchronously before displaying it",
        "Overrides _HasDropDown.closeDropDown().  Closes the drop down (assuming that it's open).",
        "This method is the callback when the user types ESC or clicking",
        "the button icon while the drop down is open.  It's also called by other code.",
        "if the user clicks away from the textbox OR tabs away, set the",
        "value to the textbox value",
        "#4617:",
        "if value is now more choices or previous choices, revert",
        "the value",
        "Update 'value' (ex: KY) according to currently displayed text",
        "Remove aria-activedescendant since it may not be removed if they select with arrows then blur with mouse",
        "item",
        "Boolean?",
        "String?",
        "summary:",
        "Set the displayed valued in the input box, and the hidden value",
        "that gets submitted, based on a dojo.data store item.",
        "description:",
        "Users shouldn't call this function; they should be calling",
        "set('item', value)",
        "tags:",
        "private",
        "remove getValue() for 2.0 (old dojo.data API)",
        "Node",
        "summary:",
        "a11y code that puts the highlighted option in the textbox.",
        "This way screen readers will know what is happening in the",
        "menu.",
        "pull the text value from the item attached to the DOM node",
        "remove getValue() for 2.0 (old dojo.data API)",
        "get the text that the user manually entered (cut off autocompleted text)",
        "set up ARIA activedescendant",
        "autocomplete the rest of the option to announce change",
        "DomNode",
        "summary:",
        "Menu callback function, called when an item in the menu is selected.",
        "Remove aria-activedescendant since the drop down is no loner visible",
        "after closeDropDown() but _announceOption() adds it back in",
        "undefined means item needs to be set",
        "String",
        "summary:",
        "Starts a search for elements matching key (key==\"\" means to return all items),",
        "and calls _openResultList() when the search completes, to display the results.",
        "Store exactly what was entered by the user.",
        "summary:",
        "Helper for postMixInProperties() to set this.value based on data inlined into the markup.",
        "Returns the attribute name in the item (in dijit/form/_ComboBoxDataStore) to use as the value.",
        "INITIALIZATION METHODS ///////////////////////////////////////",
        "if user didn't specify store, then assume there are option tags",
        "if there is no value set and there is an option list, set",
        "the value to the first value to be consistent with native Select",
        "Firefox and Safari set value",
        "IE6 and Opera set selectedIndex, which is automatically set",
        "by the selected attribute of an option tag",
        "IE6 does not set value, Opera sets value = selectedIndex",
        "remove getValue() for 2.0 (old dojo.data API)",
        "summary:",
        "Subclasses must call this method from their postCreate() methods",
        "tags:",
        "protected",
        "find any associated label element and add to ComboBox node.",
        "Item",
        "If labelType is not \"text\" we don't want to screw any markup ot whatever.",
        "String",
        "String",
        "summary:",
        "Highlights the string entered by the user in the menu.  By default this",
        "highlights the first occurrence found. Override this method",
        "to implement your custom highlighting.",
        "tags:",
        "protected",
        "Add (g)lobal modifier when this.highlightMatch == \"all\" and (i)gnorecase when this.ignoreCase == true",
        "escape regexp special chars",
        "If < appears in label, and user presses t, we don't want to highlight the t in the escaped \"&lt;\"",
        "first find out every occurences of \"find\", wrap each occurence in a pair of \"\\uFFFF\" characters (which",
        "should not appear in any string). then html escape the whole string, and replace '\\uFFFF\" with the",
        "HTML highlight markup.",
        "returns String, (almost) valid HTML (entities encoded)",
        "String",
        "TODO Should become dojo.html.entities(), when exists use instead",
        "summary:",
        "Adds escape sequences for special characters in XML: `&<>\"'`",
        "balance\"",
        "string",
        "Overrides the _FormWidget.reset().",
        "Additionally reset the .item (to clean up).",
        "summary:",
        "Computes the label to display based on the dojo.data store item.",
        "item: Object",
        "The item from the store",
        "store: dojo/store/api/Store",
        "The store.",
        "returns:",
        "The label that the ComboBox should display",
        "tags:",
        "private",
        "Use toString() because XMLStore returns an XMLItem whereas this",
        "method is expected to return a String (#9354).",
        "Remove getValue() for 2.0 (old dojo.data API)",
        "String",
        "String",
        "Boolean?",
        "String?",
        "item?",
        "summary:",
        "Hook so set('value', value) works.",
        "description:",
        "Sets the value of the select.",
        "value not looked up in store",
        "or undefined",
        "null translates to blank",
        "String",
        "summary:",
        "Setter for textDir, needed for the dropDown's textDir update.",
        "description:",
        "Users shouldn't call this function; they should be calling",
        "set('textDir', value)",
        "tags:",
        "private",
        "update the drop down also (_ComboBoxMenuMixin)",
        "declare",
        "domConstruct.place",
        "module:",
        "dijit/form/MappedTextBox",
        "summary:",
        "A dijit/form/ValidationTextBox subclass which provides a base class for widgets that have",
        "a visible formatted display value, and a serializable",
        "value in a hidden input field which is actually sent to the server.",
        "description:",
        "The visible display may",
        "be locale-dependent and interactive.  The value sent to the server is stored in a hidden",
        "input field which uses the `name` attribute declared by the original widget.  That value sent",
        "to the server is defined by the dijit/form/MappedTextBox.serialize() method and is typically",
        "locale-neutral.",
        "tags:",
        "protected",
        "we want the name attribute to go to the hidden <input>, not the displayed <input>,",
        "so override _FormWidget.postMixInProperties() setting of nameAttrSetting",
        "Override default behavior to assign name to focusNode",
        "=====, options =====",
        "summary:",
        "Overridable function used to convert the get('value') result to a canonical",
        "(non-localized) string.  For example, will print dates in ISO format, and",
        "numbers the same way as they are represented in javascript.",
        "val: anything",
        "options: Object?",
        "tags:",
        "protected extension",
        "String",
        "summary:",
        "Returns widget as a printable string using the widget's value",
        "tags:",
        "protected",
        "call filter in case value is nonstring and filter has been customized",
        "String",
        "Overrides `dijit/form/TextBox.validate`",
        "Overrides `dijit/_TemplatedMixin/buildRendering`",
        "Create a hidden <input> node with the serialized value used for submit",
        "(as opposed to the displayed value).",
        "Passing in name as markup rather than calling domConstruct.create() with an attrs argument",
        "to make query(input[name=...]) work on IE. (see #8660)",
        "Overrides `dijit/form/ValidationTextBox.reset` to",
        "reset the hidden textbox value to ''",
        "declare",
        "kernel.deprecated",
        "lang.mixin",
        "module:",
        "dijit/form/ComboBoxMixin",
        "summary:",
        "Provides main functionality of ComboBox widget",
        "dropDownClass: [protected extension] Function String",
        "Dropdown widget class used to select a date/time.",
        "Subclasses should specify this.",
        "hasDownArrow: Boolean",
        "Set this textbox to have a down arrow button, to display the drop down list.",
        "Defaults to true.",
        "=====\n\t\t// store: [const] dojo/store/api/Store|dojo/data/api/Read\n\t\t//\t\tReference to data provider object used by this ComboBox.\n\t\t//\n\t\t//\t\tShould be dojo/store/api/Store, but dojo/data/api/Read supported\n\t\t//\t\tfor backwards compatibility.\n\t\tstore: null,\n\t\t=====",
        "Set classes like dijitDownArrowButtonHover depending on",
        "mouse action over button node",
        "Boolean",
        "hide the tooltip",
        "For backwards-compatibility, accept dojo.data store in addition to dojo/store/api/Store.  Remove in 2.0.",
        "summary:",
        "Retrieves an object by it's identity. This will trigger a fetchItemByIdentity.",
        "Like dojo/store/DataStore.get() except returns native item.",
        "summary:",
        "Queries the store for objects.   Like dojo/store/DataStore.query()",
        "except returned Deferred contains array of native items.",
        "Since _setValueAttr() depends on this.store, _setStoreAttr() needs to execute first.",
        "Unfortunately, without special code, it ends up executing second.",
        "User may try to access this.store.getValue() etc.  in a custom labelFunc() function.",
        "It's not available with the new data store for handling inline <option> tags, so add it.",
        "indirection so it doesn't get rolled into a build",
        "module:",
        "dojo/_base/query",
        "=====\n\treturn {\n\t\t// summary:\n\t\t//\t\tDeprecated.   Use dojo/query instead.\n\t};\n\t=====",
        "array.forEach",
        "declare",
        "dom.byId",
        "event.stop",
        "keys.ALT keys.CAPS_LOCK keys.CTRL keys.META keys.SHIFT",
        "lang.mixin",
        "on",
        "for exporting dijit._setSelectionRange, dijit.selectInputText",
        "module:",
        "dijit/form/_TextBoxMixin",
        "summary:",
        "A mixin for textbox form input widgets",
        "trim: Boolean",
        "Removes leading and trailing whitespace if true.  Default is false.",
        "uppercase: Boolean",
        "Converts all characters to uppercase if true.  Default is false.",
        "lowercase: Boolean",
        "Converts all characters to lowercase if true.  Default is false.",
        "propercase: Boolean",
        "Converts the first character of each word to uppercase if true.",
        "maxLength: String",
        "HTML INPUT tag maxLength declaration.",
        "selectOnClick: [const] Boolean",
        "If true, all text will be selected when focused with mouse",
        "placeHolder: String",
        "Defines a hint to help users fill out the input field (as defined in HTML 5).",
        "This should only contain plain text (no html markup).",
        "summary:",
        "Hook so get('value') works as we like.",
        "description:",
        "For `dijit/form/TextBox` this basically returns the value of the `<input>`.",
        "",
        "For `dijit/form/MappedTextBox` subclasses, which have both",
        "a \"displayed value\" and a separate \"submit value\",",
        "This treats the \"displayed value\" as the master value, computing the",
        "submit value from it via this.parse().",
        "Boolean?",
        "String?",
        "summary:",
        "Hook so set('value', ...) works.",
        "",
        "description:",
        "Sets the value of the widget to \"value\" which can be of",
        "any type as determined by the widget.",
        "",
        "value:",
        "The visual element value is also set to a corresponding,",
        "but not necessarily the same, value.",
        "",
        "formattedValue:",
        "If specified, used to set the visual element value,",
        "otherwise a computed visual value is used.",
        "",
        "priorityChange:",
        "If true, an onChange event is fired immediately instead of",
        "waiting for the next blur event.",
        "TODO: this is calling filter() on both the display value and the actual value.",
        "I added a comment to the filter() definition about this, but it should be changed.",
        "and !undefined",
        "displayedValue: String",
        "For subclasses like ComboBox where the displayed value",
        "(ex: Kentucky) and the serialized value (ex: KY) are different,",
        "this represents the displayed value.",
        "",
        "Setting 'displayedValue' through set('displayedValue', ...)",
        "updates 'value', and vice-versa.  Otherwise 'value' is updated",
        "from 'displayedValue' periodically, like onBlur etc.",
        "",
        "TODO: move declaration to MappedTextBox?",
        "Problem is that ComboBox references displayedValue,",
        "for benefit of FilteringSelect.",
        "summary:",
        "Hook so get('displayedValue') works.",
        "description:",
        "Returns the displayed value (what the user sees on the screen),",
        "after filtering (ie, trimming spaces etc.).",
        "",
        "For some subclasses of TextBox (like ComboBox), the displayed value",
        "is different from the serialized value that's actually",
        "sent to the server (see `dijit/form/ValidationTextBox.serialize()`)",
        "TODO: maybe we should update this.displayedValue on every keystroke so that we don't need",
        "this method",
        "TODO: this isn't really the displayed value when the user is typing",
        "String",
        "summary:",
        "Hook so set('displayedValue', ...) works.",
        "description:",
        "Sets the value of the visual element to the string \"value\".",
        "The widget value is also set to a corresponding,",
        "but not necessarily the same, value.",
        "or undefined",
        "sets the serialized value to something corresponding to specified displayedValue",
        "(if possible), and also updates the textbox.value, for example converting \"123\"",
        "to \"123.00\"",
        "textDir support",
        "=====, constraints =====",
        "summary:",
        "Replaceable function to convert a value to a properly formatted string.",
        "value: String",
        "constraints: Object",
        "tags:",
        "protected extension",
        "or undefined",
        "=====, constraints =====",
        "summary:",
        "Replaceable function to convert a formatted string to a value",
        "value: String",
        "constraints: Object",
        "tags:",
        "protected extension",
        "String",
        "summary:",
        "After the user types some characters, etc., this method is",
        "called to check the field for validity etc.  The base method",
        "in `dijit/form/TextBox` does nothing, but subclasses override.",
        "tags:",
        "protected",
        "=====\n\tonInput: function(event){\n\t\t// summary:\n\t\t//\t\tConnect to this function to receive notifications of various user data-input events.\n\t\t//\t\tReturn false to cancel the event and prevent it from being processed.\n\t\t// event:\n\t\t//\t\tkeydown | keypress | cut | paste | input\n\t\t// tags:\n\t\t//\t\tcallback\n\t},\n\t=====",
        "Event",
        "summary:",
        "Called AFTER the input event has happened",
        "set text direction according to textDir that was defined in creation",
        "allow the key to post to the widget input box",
        "Event",
        "summary:",
        "Default action handler for user input events",
        "In case someone is watch()'ing for changes to displayedValue",
        "setting the value here is needed since value=\"\" in the template causes \"undefined\"",
        "and setting in the DOM (instead of the JS object) helps with form reset actions",
        "DOM and JS values should be the same",
        "normalize input events to reduce spurious event processing",
        "onkeydown: do not forward modifier keys",
        "set charOrCode to numeric keycode",
        "onkeypress: do not forward numeric charOrCode keys (already sent through onkeydown)",
        "onpaste & oncut: set charOrCode to 229 (IME)",
        "oninput: if primary event not already processed, set charOrCode to 229 (IME), else do not forward",
        "ignore state keys",
        "no modifiers",
        "ignore location keys",
        "keypress will handle simple non-modified printable keys",
        "only allow named ones through",
        "IME",
        "can only be stopped reliably in keydown",
        "duplicate event",
        "create fake event to set charOrCode and to know if preventDefault() was called",
        "prevent WebKit warnings",
        "give web page author a chance to consume the event",
        "console.log(faux.type + ', charOrCode = (' + (typeof charOrCode) + ') ' + charOrCode + ', ctrl ' + !!faux.ctrlKey + ', alt ' + !!faux.altKey + ', meta ' + !!faux.metaKey + ', shift ' + !!faux.shiftKey);",
        "return false means stop",
        "if preventDefault was called",
        "widget notification after key has posted",
        "if the textbox is blank, what value should be reported",
        "summary:",
        "Auto-corrections (such as trimming) that are applied to textbox",
        "value on blur or form submit.",
        "description:",
        "For MappedTextBox subclasses, this is called twice",
        "",
        "- once with the display value",
        "- once the value as set/returned by set('value', ...)",
        "",
        "and get('value'), ex: a Number for NumberTextBox.",
        "",
        "In the latter case it does corrections like converting null to NaN.  In",
        "the former case the NumberTextBox.filter() method calls this.inherited()",
        "to execute standard trimming code in TextBox.filter().",
        "",
        "TODO: break this into two methods in 2.0",
        "",
        "tags:",
        "protected extension",
        "String",
        "Select all text on focus via click if nothing already selected.",
        "Since mouse-up will clear the selection, need to defer selection until after mouse-up.",
        "Don't do anything on focus by tabbing into the widget since there's no associated mouse-up event.",
        "Only select all text on first click; otherwise users would have no way to clear",
        "the selection.",
        "Check if the user selected some text manually (mouse-down, mouse-move, mouse-up)",
        "and if not, then select all the text",
        "in case the mouseup never comes",
        "if mouseup not received soon, then treat it as some gesture",
        "call this.inherited() before refreshState(), since this.inherited() will possibly scroll the viewport",
        "(to scroll the TextBox into view), which will affect how _refreshState() positions the tooltip",
        "Overrides `dijit/_FormWidget/reset()`.",
        "Additionally resets the displayed textbox value to ''",
        "String",
        "summary:",
        "Setter for textDir.",
        "description:",
        "Users shouldn't call this function; they should be calling",
        "set('textDir', value)",
        "tags:",
        "private",
        "only if new textDir is different from the old one",
        "and on widgets creation.",
        "so the change of the textDir will take place immediately.",
        "DomNode",
        "Number?",
        "Number?",
        "DomNode",
        "Number?",
        "Number?",
        "summary:",
        "Select text in the input element argument, from start (default 0), to stop (default end).",
        "TODO: use functions in _editor/selection.js?",
        "squelch random errors (esp. on IE) from unexpected focus changes or DOM nodes being hidden",
        "declare",
        "domClass.add",
        "has(\"ie\") has(\"opera\")",
        "module:",
        "dijit/form/SimpleTextarea",
        "summary:",
        "A simple textarea that degrades, and responds to",
        "minimal LayoutContainer usage, and works with dijit/form/Form.",
        "Doesn't automatically size according to input, like Textarea.",
        "",
        "example:",
        "|\t<textarea data-dojo-type=\"dijit/form/SimpleTextarea\" name=\"foo\" value=\"bar\" rows=30 cols=40></textarea>",
        "",
        "example:",
        "|\tnew SimpleTextarea({ rows:20, cols:30 }, \"foo\");",
        "rows: Number",
        "The number of rows of text.",
        "rows: Number",
        "The number of characters per line.",
        "Copy value from srcNodeRef, unless user specified a value explicitly (or there is no srcNodeRef)",
        "TODO: parser will handle this in 2.0",
        "attribute selectors is not supported in IE6",
        "String",
        "Override TextBox.filter to deal with newlines... specifically (IIRC) this is for IE which writes newlines",
        "as \\r\\n instead of just \\n",
        "Event?",
        "Override TextBox._onInput() to enforce maxLength restriction",
        "IE",
        "delete overflow characters",
        "show cursor",
        "declare",
        "domStyle.set",
        "query",
        "registry.byNode",
        "module:",
        "dijit/PopupMenuItem",
        "summary:",
        "An item in a Menu that spawn a drop down (usually a drop down menu)",
        "summary:",
        "When Menu is declared in markup, this code gets the menu label and",
        "the popup widget from the srcNodeRef.",
        "description:",
        "srcNodeRefinnerHTML contains both the menu item text and a popup widget",
        "The first part holds the menu item text and the second part is the popup",
        "example:",
        "|\t<div data-dojo-type=\"dijit/PopupMenuItem\">",
        "|\t\t<span>pick me</span>",
        "|\t\t<popup> ... </popup>",
        "|\t</div>",
        "tags:",
        "protected",
        "save pointer to srcNode so we can grab the drop down widget after it's instantiated",
        "we didn't copy the dropdown widget from the this.srcNodeRef, so it's in no-man's",
        "land now.  move it to win.doc.body.",
        "Boolean",
        "Destroy the popup, unless it's already been destroyed.  This can happen because",
        "the popup is a direct child of <body> even though it's logically my child.",
        "array.forEach",
        "date.compare",
        "locale.format",
        "stamp.fromISOString stamp.toISOString",
        "declare",
        "domClass.add domClass.contains domClass.toggle",
        "domConstruct.create",
        "event.stop",
        "deprecated",
        "keys",
        "lang.mixin",
        "has(...)",
        "query",
        "mouse.wheel",
        "module:",
        "dijit/_TimePicker",
        "summary:",
        "A graphical time picker.",
        "This widget is used internally by other widgets and is not available",
        "as a standalone widget due to lack of accessibility support.",
        "baseClass: [protected] String",
        "The root className to use for the various states of this widget",
        "clickableIncrement: String",
        "ISO-8601 string representing the amount by which",
        "every clickable element in the time picker increases.",
        "Set in local time, without a time zone.",
        "Example: `T00:15:00` creates 15 minute increments",
        "Must divide dijit/_TimePicker.visibleIncrement evenly",
        "visibleIncrement: String",
        "ISO-8601 string representing the amount by which",
        "every element with a visible time in the time picker increases.",
        "Set in local time, without a time zone.",
        "Example: `T01:00:00` creates text in every 1 hour increment",
        "visibleRange: String",
        "ISO-8601 string representing the range of this TimePicker.",
        "The TimePicker will only display times in this range.",
        "Example: `T05:00:00` displays 5 hours of options",
        "value: String",
        "Date to display.",
        "Defaults to current time and date.",
        "Can be a Date object or an ISO-8601 string.",
        "If you specify the GMT time zone (`-01:00`),",
        "the time will be converted to the local time in the local time zone.",
        "Otherwise, the time is considered to be in the local time zone.",
        "If you specify the date and isDate is true, the date is used.",
        "Example: if your local time zone is `GMT -05:00`,",
        "`T10:00:00` becomes `T10:00:00-05:00` (considered to be local time),",
        "`T10:00:00-01:00` becomes `T06:00:00-05:00` (4 hour difference),",
        "`T10:00:00Z` becomes `T05:00:00-05:00` (5 hour difference between Zulu and local time)",
        "`yyyy-mm-ddThh:mm:ss` is the format to set the date and time",
        "Example: `2007-06-01T09:00:00`",
        "constraints: TimePicker.__Constraints",
        "Specifies valid range of times (start time, end time)",
        "=====\n\t\tserialize: function(val, options){\n\t\t\t// summary:\n\t\t\t//\t\tUser overridable function used to convert the attr('value') result to a String\n\t\t\t// val: Date\n\t\t\t//\t\tThe current value\n\t\t\t// options: Object?\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\t\t},\n=====",
        "=====\n\t\t// filterString: string\n\t\t//\t\tThe string to filter by\n\t\tfilterString: \"\",\n=====",
        "Date",
        "summary:",
        "Deprecated.  Used set('value') instead.",
        "tags:",
        "deprecated",
        "Date",
        "summary:",
        "Hook so set('value', ...) works.",
        "description:",
        "Set the value of the TimePicker.",
        "Redraws the TimePicker around the new date.",
        "tags:",
        "protected",
        "summary:",
        "Called by TimeTextBox to filter the values shown in my list",
        "===== dateObject, locale =====",
        "summary:",
        "May be overridden to disable certain dates in the TimePicker e.g. `isDisabledDate=locale.isWeekend`",
        "dateObject: Date",
        "locale: String?",
        "type:",
        "extension",
        "Boolean",
        "number",
        "number",
        "Boolean",
        "DOMnode",
        "summary:",
        "Returns an array of nodes with the filter applied.  At most maxNum nodes",
        "will be returned - but fewer may be returned as well.  If the",
        "before parameter is set to true, then it will return the elements",
        "before the given index",
        "tags:",
        "private",
        "don't wrap",
        "summary:",
        "Displays the relevant choices in the drop down list",
        "tags:",
        "private",
        "get the value of the increments and the range in seconds (since 00:00:00) to find out how many divs to create",
        "Date",
        "round reference date to previous visible increment",
        "match parse defaults",
        "assume clickable increment is the smallest unit",
        "divide the visible range by the clickable increment to get the number of divs to create",
        "example: 10:00:00/00:15:00 -> display 40 divs",
        "divide the visible increments by the clickable increments to get how often to display the time inline",
        "example: 01:00:00/00:15:00 -> display the time every 4 divs",
        "divide the number of seconds in a day by the clickable increment in seconds to get the",
        "absolute max number of increments.",
        "Find the nodes we should display based on our filter.",
        "Limit to 10 nodes displayed as a half-hearted attempt to stop drop down from overlapping <input>.",
        "never show empty due to a bad filter",
        "===== params, srcNodeRef =====",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Hash of initialization parameters for widget, including scalar values (like title, duration etc.)",
        "and functions, typically callbacks like onClick.",
        "The hash can contain any of the widget's properties, excluding read-only properties.",
        "srcNodeRef: DOMNode|String?",
        "If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree",
        "this needs to happen now (and later) due to codependency on _set*Attr calls",
        "Object",
        "brings in visibleRange, increments, etc.",
        "locale needs the lang in the constraints as locale",
        "assign typematic mouse listeners to the arrow buttons",
        "Event",
        "summary:",
        "Handler for hover (and unhover) on up/down arrows",
        "tags:",
        "private",
        "in non-IE browser the \"mouseenter\" event will become \"mouseover\",",
        "but in IE it's still \"mouseenter\"",
        "Number",
        "summary:",
        "Creates a clickable time option",
        "tags:",
        "private",
        "make sure each time is for the same date",
        "Doesn't match the filter - return null",
        "set disabled",
        "Initially highlight the current value.   User can change highlight by up/down arrow keys",
        "or mouse movement.",
        "Object",
        "summary:",
        "Called when user clicks an option in the drop down list",
        "tags:",
        "private",
        "Date",
        "===== time =====",
        "summary:",
        "Notification that a time was selected.  It may be the same as the previous value.",
        "tags:",
        "public",
        "node",
        "Boolean",
        "summary:",
        "Turns on/off highlight effect on a node based on mouse out/over event",
        "tags:",
        "private",
        "Event",
        "summary:",
        "Handler for onmouseover event",
        "tags:",
        "private",
        "if we aren't targeting an item, then we return",
        "Event",
        "summary:",
        "Handler for onmouseout event",
        "tags:",
        "private",
        "Event",
        "summary:",
        "Handle the mouse wheel events",
        "tags:",
        "private",
        "we're not _measuring_ the scroll amount, just direction",
        "yes, we're making a new dom node every time you mousewheel, or click",
        "summary:",
        "Handler for up arrow key.",
        "description:",
        "Removes the bottom time and add one to the top",
        "tags:",
        "private",
        "typematic end",
        "summary:",
        "Handler for up arrow key.",
        "description:",
        "Remove the top time and add one to the bottom",
        "tags:",
        "private",
        "typematic end",
        "Event",
        "summary:",
        "Called from `dijit/form/_DateTimeTextBox` to pass a keypress event",
        "from the `dijit/form/TimeTextBox` to be handled in this widget",
        "tags:",
        "protected",
        "Figure out which option to highlight now and then highlight it",
        "mouse hover followed by TAB is NO selection",
        "true means don't call stopEvent()",
        "Accept the currently-highlighted option as the value",
        "Call stopEvent() for ENTER key so that form doesn't submit,",
        "but not for TAB, so that TAB does switch focus",
        "=====\n\t TimePicker.__Constraints = declare(locale.__FormatOptions, {\n\t\t // clickableIncrement: String\n\t\t //\t\tSee `dijit/_TimePicker.clickableIncrement`\n\t\t clickableIncrement: \"T00:15:00\",\n\n\t\t // visibleIncrement: String\n\t\t //\t\tSee `dijit/_TimePicker.visibleIncrement`\n\t\t visibleIncrement: \"T01:00:00\",\n\n\t\t // visibleRange: String\n\t\t //\t\tSee `dijit/_TimePicker.visibleRange`\n\t\t visibleRange: \"T05:00:00\"\n\t });\n\t =====",
        "declare",
        "module:",
        "dijit/form/RadioButton",
        "summary:",
        "Same as an HTML radio, but with fancy styling.",
        "array.forEach",
        "declare",
        "domAttr.set domAttr.get",
        "domClass.add domClass.remove domClass.toggle",
        "domConstruct.create domConstruct.destroy",
        "domStyle.getComputedStyle domStyle.set domStyle.get",
        "event.stop",
        "i18n.getLocalization",
        "kernel.deprecated",
        "keys.ENTER keys.ESCAPE",
        "lang.getObject",
        "has(\"ie\")",
        "module:",
        "dijit/InlineEditBox",
        "summary:",
        "Internal widget used by InlineEditBox, displayed when in editing mode",
        "to display the editor and maybe save/cancel buttons.  Calling code should",
        "connect to save/cancel methods to detect when editing is finished",
        "",
        "Has mainly the same parameters as InlineEditBox, plus these values:",
        "",
        "style: Object",
        "Set of CSS attributes of display node, to replicate in editor",
        "",
        "value: String",
        "Value as an HTML string or plain text string, depending on renderAsHTML flag",
        "Create edit widget in place in the template",
        "TODO: remove getObject() for 2.0",
        "Copy the style from the source",
        "Don't copy ALL properties though, just the necessary/applicable ones.",
        "wrapperStyle/destStyle code is to workaround IE bug where getComputedStyle().fontSize",
        "is a relative value like 200%, rather than an absolute value like 24px, and",
        "the 200% can refer *either* to a setting on the node or it's ancestor (see #11175)",
        "block mode",
        "inline-block mode",
        "set the value in onLoadDeferred instead so the widget has time to finish initializing",
        "editorParams[(\"displayedValue\" in Cls.prototype || \"_setDisplayedValueAttr\" in Cls.prototype) ? \"displayedValue\" : \"value\"] = this.value;",
        "Remove the save/cancel buttons since saving is done by simply tabbing away or",
        "selecting a value from the drop down list",
        "Selecting a value from a drop down list causes an onChange event and then we save",
        "ESC and TAB should cancel and save.  Note that edit widgets do a stopEvent() on ESC key (to",
        "prevent Dialog from closing when the user just wants to revert the value in the edit widget),",
        "so this is the only way we can see the key press event.",
        "If possible, enable/disable save button based on whether the user has changed the value",
        "===== val =====",
        "summary:",
        "Called for editor widgets that support the intermediateChanges=true flag as a way",
        "to detect when to enable/disabled the save button",
        "let the parent wrapper widget clean up the DOM",
        "summary:",
        "Return the [display] value of the edit widget",
        "summary:",
        "Handler for keypress in the edit box in autoSave mode.",
        "description:",
        "For autoSave widgets, if Esc/Enter, call cancel/save.",
        "tags:",
        "private",
        "If Enter/Esc pressed, treat as save/cancel.",
        "sets editing=false which short-circuits _onBlur processing",
        "fire _onBlur and then save",
        "_onBlur will handle TAB automatically by allowing",
        "the TAB to change focus before we mess with the DOM: #6227",
        "Expounding by request:",
        "The current focus is on the edit widget input field.",
        "save() will hide and destroy this widget.",
        "We want the focus to jump from the currently hidden",
        "displayNode, but since it's hidden, it's impossible to",
        "unhide it, focus it, and then have the browser focus",
        "away from it to the next focusable element since each",
        "of these events is asynchronous and the focus-to-next-element",
        "is already queued.",
        "So we allow the browser time to unqueue the move-focus event",
        "before we do all the hide/show stuff.",
        "summary:",
        "Called when focus moves outside the editor",
        "tags:",
        "private",
        "summary:",
        "Called when the underlying widget fires an onChange event,",
        "such as when the user selects a value from the drop down list of a ComboBox,",
        "which means that the user has finished entering the value and we should save.",
        "tags:",
        "private",
        "fires _onBlur which will save the formatted value",
        "summary:",
        "User overridable function returning a Boolean to indicate",
        "if the Save button should be enabled or not - usually due to invalid conditions",
        "tags:",
        "extension",
        "summary:",
        "Focus the edit widget.",
        "tags:",
        "protected",
        "IE can take 30ms to report the focus event, but focus manager needs to know before a 0ms timeout.",
        "summary:",
        "An element with in-line edit capabilities",
        "",
        "description:",
        "Behavior for an existing node (`<p>`, `<div>`, `<span>`, etc.) so that",
        "when you click it, an editor shows up in place of the original",
        "text.  Optionally, Save and Cancel button are displayed below the edit widget.",
        "When Save is clicked, the text is pulled from the edit",
        "widget and redisplayed and the edit widget is again hidden.",
        "By default a plain Textarea widget is used as the editor (or for",
        "inline values a TextBox), but you can specify an editor such as",
        "dijit.Editor (for editing HTML) or a Slider (for adjusting a number).",
        "An edit widget must support the following API to be used:",
        "",
        "- displayedValue or value as initialization parameter,",
        "and available through set('displayedValue') / set('value')",
        "- void focus()",
        "- DOM-node focusNode = node containing editable text",
        "editing: [readonly] Boolean",
        "Is the node currently in edit mode?",
        "autoSave: Boolean",
        "Changing the value automatically saves it; don't have to push save button",
        "(and save button isn't even displayed)",
        "buttonSave: String",
        "Save button label",
        "buttonCancel: String",
        "Cancel button label",
        "renderAsHtml: Boolean",
        "Set this to true if the specified Editor's value should be interpreted as HTML",
        "rather than plain text (ex: `dijit.Editor`)",
        "editor: String|Function",
        "MID (ex: \"dijit/form/TextBox\") or constructor for editor widget",
        "editorWrapper: String|Function",
        "Class name (or reference to the Class) for widget that wraps the editor widget, displaying save/cancel",
        "buttons.",
        "editorParams: Object",
        "Set of parameters for editor, like {required: true}",
        "disabled: Boolean",
        "If true, clicking the InlineEditBox to edit it will have no effect.",
        "===== value =====",
        "summary:",
        "Set this handler to be notified of changes to value.",
        "tags:",
        "callback",
        "summary:",
        "Set this handler to be notified when editing is cancelled.",
        "tags:",
        "callback",
        "width: String",
        "Width of editor.  By default it's width=100% (ie, block mode).",
        "value: String",
        "The display value of the widget in read-only mode",
        "noValueIndicator: [const] String",
        "The text that gets displayed when there is no value (so that the user has a place to click to edit)",
        "font-family needed on IE6 but it messes up IE8",
        "&#160; == &nbsp;",
        "===== params, srcNodeRef =====",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Hash of initialization parameters for widget, including scalar values (like title, duration etc.)",
        "and functions, typically callbacks like onClick.",
        "The hash can contain any of the widget's properties, excluding read-only properties.",
        "srcNodeRef: DOMNode|String?",
        "If a srcNodeRef (DOM node) is specified:",
        "",
        "- use srcNodeRef.innerHTML as my value",
        "- replace srcNodeRef with my generated DOM tree",
        "save pointer to original source node, since Widget nulls-out srcNodeRef",
        "connect handlers to the display node",
        "\"\" is a good value if specified directly so check params){",
        "Boolean",
        "summary:",
        "Deprecated.   Use set('disabled', ...) instead.",
        "tags:",
        "deprecated",
        "Boolean",
        "summary:",
        "Hook to make set(\"disabled\", ...) work.",
        "Set disabled state of widget.",
        "summary:",
        "Handler for onmouseover and onfocus event.",
        "tags:",
        "private",
        "summary:",
        "Handler for onmouseout and onblur event.",
        "tags:",
        "private",
        "Event",
        "summary:",
        "Handler for onclick event.",
        "tags:",
        "private",
        "Since FF gets upset if you move a node while in an event handler for that node...",
        "summary:",
        "Display the editor widget in place of the original (read only) markup.",
        "tags:",
        "private",
        "save some display node values that can be restored later",
        "Placeholder for edit widget",
        "Put place holder (and eventually editWidget) before the display node so that it's positioned correctly",
        "when Calendar dropdown appears, which happens automatically on focus.",
        "Create the editor wrapper (the thing that holds the editor widget and the save/cancel buttons)",
        "to avoid screen jitter, we first create the editor with position: absolute, visibility: hidden,",
        "and then when it's finished rendering, we switch from display mode to editor",
        "position: absolute releases screen space allocated to the display node",
        "opacity:0 is the same as visibility: hidden but is still focusable",
        "visibility: hidden removes focus outline",
        "needed by WebKit for TAB from editor to skip displayNode",
        "After edit widget has finished initializing (in particular need to wait for dijit.Editor),",
        "or immediately if there is no onLoadDeferred Deferred,",
        "replace the display widget with edit widget, leaving them both displayed for a brief time so that",
        "focus can be shifted without incident.",
        "set value again in case the edit widget's value is just now valid",
        "defer needed so that the change of focus doesn't happen on mousedown which also sets focus",
        "the saveButton should start out disabled in most cases but the above set could have fired onChange",
        "both nodes are showing, so we can switch focus safely",
        "summary:",
        "Called when focus moves outside the InlineEditBox.",
        "Performs garbage collection.",
        "tags:",
        "private",
        "causes IE focus problems, see TooltipDialog_a11y.html...\n\t\t\t\t this.defer(function(){\n\t\t\t\t if(this.wrapperWidget){\n\t\t\t\t this.wrapperWidget.destroy();\n\t\t\t\t delete this.wrapperWidget;\n\t\t\t\t }\n\t\t\t\t });",
        "Boolean",
        "summary:",
        "Revert to display mode, and optionally focus on display node",
        "tags:",
        "private",
        "hide the editor from mouse/keyboard events",
        "Boolean",
        "summary:",
        "Save the contents of the editor and revert to display mode.",
        "focus: Boolean",
        "Focus on the display mode text",
        "tags:",
        "private",
        "display changed, formatted value",
        "set focus as needed",
        "String",
        "summary:",
        "Deprecated.   Use set('value', ...) instead.",
        "tags:",
        "deprecated",
        "String",
        "summary:",
        "Hook to make set(\"value\", ...) work.",
        "Inserts specified HTML value into this node, or an \"input needed\" character if node is blank.",
        "tell the world that we have changed",
        "defer prevents browser freeze for long-running event handlers",
        "contextual (auto) text direction depends on the text value",
        "summary:",
        "Deprecated.   Use get('value') instead.",
        "tags:",
        "deprecated",
        "Boolean",
        "summary:",
        "Revert to display mode, discarding any changes made in the editor",
        "tags:",
        "private",
        "tell the world that we have no changes",
        "defer prevents browser freeze for long-running event handlers",
        "String",
        "summary:",
        "Setter for textDir.",
        "description:",
        "Users shouldn't call this function; they should be calling",
        "set('textDir', value)",
        "tags:",
        "private",
        "fix the text alignment",
        "for monkey patching",
        "module:",
        "dojo/dnd/autoscroll",
        "summary:",
        "Used by dojo/dnd/Manager to scroll document or internal node when the user",
        "drags near the edge of the viewport or a scrollable node",
        "These are set by autoScrollStart().",
        "Set to default values in case autoScrollStart() isn't called. (back-compat, remove for 2.0)",
        "summary:",
        "Called at the start of a drag.",
        "d: Document",
        "The document of the node being dragged.",
        "Save height/width of document at start of drag, before it gets distorted by a user dragging an avatar past",
        "the document's edge",
        "usually 0",
        "summary:",
        "a handler for mousemove and touchmove events, which scrolls the window, if",
        "necessary",
        "e: Event",
        "mousemove/touchmove event",
        "FIXME: needs more docs!",
        "getBox() call for back-compat, in case autoScrollStart() wasn't called",
        "don't scroll past edge of doc",
        "don't scroll past edge of doc",
        "summary:",
        "a handler for mousemove and touchmove events, which scrolls the first available",
        "Dom element, it falls back to exports.autoScroll()",
        "e: Event",
        "mousemove/touchmove event",
        "FIXME: needs more docs!",
        "overflow-x",
        "FIXME: this code should not be here, it should be taken into account",
        "either by the event fixing code, or the domGeom.position()",
        "FIXME: this code doesn't work on Opera 9.5 Beta",
        "overflow-y",
        "console.log(b.l, b.t, t.x, t.y, n.scrollLeft, n.scrollTop);",
        "FIXME: this code should not be here, it should be taken into account",
        "either by the event fixing code, or the domGeom.position()",
        "FIXME: this code doesn't work on Opera 9.5 Beta",
        "array.forEach",
        "declare",
        "domAttr.set",
        "event.stop",
        "lang.hitch",
        "query",
        "registry.getEnclosingWidget",
        "module:",
        "dijit/form/_RadioButtonMixin",
        "summary:",
        "Mixin to provide widget functionality for an HTML radio button",
        "type: [private] String",
        "type attribute on `<input>` node.",
        "Users should not change this value.",
        "Private function needed to help iterate over all radio buttons in a group.",
        "can't use name= since query doesn't support [] in the name",
        "Boolean",
        "If I am being checked then have to deselect currently checked radio button",
        "String",
        "Event",
        "nothing to do",
        "ignored by some browsers so we have to resync the DOM elements with widget values",
        "=====, \"./Mover\" =====",
        "=====, Mover =====",
        "module:",
        "dojo/dnd/TimedMoveable",
        "=====\n\tvar __TimedMoveableArgs = declare([Moveable.__MoveableArgs], {\n\t\t// timeout: Number\n\t\t//\t\tdelay move by this number of ms,\n\t\t//\t\taccumulating position changes during the timeout\n\t\ttimeout: 0\n\t});\n\t=====",
        "precalculate long expressions",
        "summary:",
        "A specialized version of Moveable to support an FPS throttling.",
        "This class puts an upper restriction on FPS, which may reduce",
        "the CPU load. The additional parameter \"timeout\" regulates",
        "the delay before actually moving the moveable object.",
        "object attributes (for markup)",
        "in ms, 40ms corresponds to 25 fps",
        "summary:",
        "an object that makes a node moveable with a timer",
        "node: Node||String",
        "a node (or node's id) to be moved",
        "params: __TimedMoveableArgs",
        "object with additional parameters.",
        "sanitize parameters",
        "Mover",
        "stop timer",
        "reflect the last received position",
        "Mover",
        "Object",
        "to avoid using dojo.hitch()",
        "we don't have any pending requests",
        "reflect the last received position",
        "declare",
        "module:",
        "dijit/layout/LinkPane",
        "summary:",
        "A ContentPane with an href where (when declared in markup)",
        "the title is specified as innerHTML rather than as a title attribute.",
        "description:",
        "LinkPane is just a ContentPane that is declared in markup similarly",
        "to an anchor.  The anchor's body (the words between `<a>` and `</a>`)",
        "become the title of the widget (used for TabContainer, AccordionContainer, etc.)",
        "example:",
        "| <a href=\"foo.html\">my title</a>",
        "I'm using a template because the user may specify the input as",
        "<a href=\"foo.html\">title</a>, in which case we need to get rid of the",
        "<a> because we don't want a link.",
        "If user has specified node contents, they become the title",
        "(the link must be plain text)",
        "Overrides _Templated._fillContent().",
        "_Templated._fillContent() relocates srcNodeRef innerHTML to templated container node,",
        "but in our case the srcNodeRef innerHTML is the title, so shouldn't be",
        "copied",
        "declare",
        "module:",
        "dijit/form/_ListMouseMixin",
        "summary:",
        "a Mixin to handle mouse or touch events for a focus-less menu",
        "Abstract methods that must be defined externally:",
        "",
        "- onClick: item was chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)",
        "tags:",
        "private",
        "Event",
        "DomNode",
        "Event",
        "DomNode",
        "Event",
        "DomNode",
        "drag to select",
        "Event",
        "DomNode",
        "cancel in 1 second if no _onMouseOver fires",
        "Event",
        "DomNode",
        "module:",
        "dojo/cldr/monetary",
        "summary:",
        "TODOC",
        "String",
        "summary:",
        "A mapping of currency code to currency-specific formatting information. Returns a unique object with properties: places, round.",
        "code:",
        "an [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code",
        "from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/currencyData/fractions",
        "Object",
        "module:",
        "dojo/cookie",
        "=====\nvar __cookieProps = {\n\t// expires: Date|String|Number?\n\t//\t\tIf a number, the number of days from today at which the cookie\n\t//\t\twill expire. If a date, the date past which the cookie will expire.\n\t//\t\tIf expires is in the past, the cookie will be deleted.\n\t//\t\tIf expires is omitted or is 0, the cookie will expire when the browser closes.\n\t// path: String?\n\t//\t\tThe path to use for the cookie.\n\t// domain: String?\n\t//\t\tThe domain to use for the cookie.\n\t// secure: Boolean?\n\t//\t\tWhether to only send the cookie on secure connections\n};\n=====",
        "String",
        "String?",
        "__cookieProps?",
        "summary:",
        "Get or set a cookie.",
        "description:",
        "If one argument is passed, returns the value of the cookie",
        "For two or more arguments, acts as a setter.",
        "name:",
        "Name of the cookie",
        "value:",
        "Value for the cookie",
        "props:",
        "Properties for the cookie",
        "example:",
        "set a cookie with the JSON-serialized contents of an object which",
        "will expire 5 days from now:",
        "|\trequire([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){",
        "|\t\tcookie(\"configObj\", json.stringify(config, {expires: 5 }));",
        "|\t});",
        "",
        "example:",
        "de-serialize a cookie back into a JavaScript object:",
        "|\trequire([\"dojo/cookie\", \"dojo/json\"], function(cookie, json){",
        "|\t\tconfig = json.parse(cookie(\"configObj\"));",
        "|\t});",
        "",
        "example:",
        "delete a cookie:",
        "|\trequire([\"dojo/cookie\"], function(cookie){",
        "|\t\tcookie(\"configObj\", null, {expires: -1});",
        "|\t});",
        "FIXME: expires=0 seems to disappear right away, not on close? (FF3)  Change docs?",
        "String|undefined",
        "summary:",
        "Use to determine if the current browser supports cookies or not.",
        "",
        "Returns true if user allows cookies.",
        "Returns false if user doesn't allow cookies.",
        "require.toUrl",
        "declare",
        "domClass.toggle",
        "lang.mixin",
        "number.format",
        "module:",
        "dijit/ProgressBar",
        "summary:",
        "A progress indication widget, showing the amount completed",
        "(often the percentage completed) of a task.",
        "",
        "example:",
        "|\t<div data-dojo-type=\"ProgressBar\"",
        "|\t\t places=\"0\"",
        "|\t\t value=\"...\" maximum=\"...\">",
        "|\t</div>",
        "progress: [const] String (Percentage or Number)",
        "Number or percentage indicating amount of task completed.",
        "Deprecated.   Use \"value\" instead.",
        "value: String (Percentage or Number)",
        "Number or percentage indicating amount of task completed.",
        "With \"%\": percentage value, 0% <= progress <= 100%, or",
        "without \"%\": absolute value, 0 <= progress <= maximum.",
        "Infinity means that the progress bar is indeterminate.",
        "maximum: [const] Float",
        "Max sample number",
        "places: [const] Number",
        "Number of places to show in values; 0 by default",
        "indeterminate: [const] Boolean",
        "If false: show progress value (number or percentage).",
        "If true: show that a process is underway but that the amount completed is unknown.",
        "Deprecated.   Use \"value\" instead.",
        "label: String?",
        "Label on progress bar.   Defaults to percentage for determinate progress bar and",
        "blank for indeterminate progress bar.",
        "name: String",
        "this is the field name (for a form) if set. This needs to be set if you want to use",
        "this widget in a dijit/form/Form widget (such as dijit/Dialog)",
        "_indeterminateHighContrastImagePath: [private] URL",
        "URL to image to use for indeterminate progress bar when display is in high contrast mode",
        "Back-compat for when constructor specifies indeterminate or progress, rather than value.   Remove for 2.0.",
        "Object?",
        "summary:",
        "Internal method to change attributes of ProgressBar, similar to set(hash).  Users should call",
        "set(\"value\", ...) rather than calling this method directly.",
        "attributes:",
        "May provide progress and/or maximum properties on this parameter;",
        "see attribute specs for details.",
        "example:",
        "|\tmyProgressBar.update({'indeterminate': true});",
        "|\tmyProgressBar.update({'progress': 80});",
        "|\tmyProgressBar.update({'indeterminate': true, label:\"Loading ...\" })",
        "tags:",
        "private",
        "TODO: deprecate this method and use set() instead",
        "Even indeterminate ProgressBars should have these attributes",
        "Deprecated, use set(\"value\", ...) instead",
        "float",
        "summary:",
        "Generates message to show inside progress bar (normally indicating amount of task completed).",
        "May be overridden.",
        "tags:",
        "extension",
        "summary:",
        "Callback fired when progress updates.",
        "tags:",
        "extension",
        "declare",
        "lang.hitch lang.mixin",
        "number._realNumberRegexp number.format number.parse number.regexp",
        "module:",
        "dijit/form/NumberTextBox",
        "summary:",
        "A mixin for all number textboxes",
        "tags:",
        "protected",
        "Override ValidationTextBox.pattern.... we use a reg-ex generating function rather",
        "than a straight regexp to deal with locale (plus formatting options too?)",
        "=====\n\t\t// constraints: NumberTextBox.__Constraints\n\t\t//\t\tDespite the name, this parameter specifies both constraints on the input\n\t\t//\t\t(including minimum/maximum allowed values) as well as\n\t\t//\t\tformatting options like places (the number of digits to display after\n\t\t//\t\tthe decimal point).\n\t\tconstraints: {},\n\t\t======",
        "value: Number",
        "The value of this NumberTextBox as a Javascript Number (i.e., not a String).",
        "If the displayed value is blank, the value is NaN, and if the user types in",
        "an gibberish value (like \"hello world\"), the value is undefined",
        "(i.e. get('value') returns undefined).",
        "",
        "Symmetrically, set('value', NaN) will clear the displayed value,",
        "whereas set('value', undefined) will have no effect.",
        "editOptions: [protected] Object",
        "Properties to mix into constraints when the value is being edited.",
        "This is here because we edit the number in the format \"12345\", which is",
        "different than the display value (ex: \"12,345\")",
        "=====\n\t\t_formatter: function(value, options){\n\t\t\t// summary:\n\t\t\t//\t\t_formatter() is called by format().  It's the base routine for formatting a number,\n\t\t\t//\t\tas a string, for example converting 12345 into \"12,345\".\n\t\t\t// value: Number\n\t\t\t//\t\tThe number to be converted into a string.\n\t\t\t// options: number.__FormatOptions?\n\t\t\t//\t\tFormatting options\n\t\t\t// tags:\n\t\t\t//\t\tprotected extension\n\n\t\t\treturn \"12345\";\t\t// String\n\t\t},\n\t\t =====",
        "in case type=\"number\" was specified which messes up parse/format",
        "Object",
        "decimal rounding errors take away another digit of precision",
        "Number",
        "number.__FormatOptions",
        "summary:",
        "Formats the value as a Number, according to constraints.",
        "tags:",
        "protected",
        "check for exponential notation that dojo/number.format() chokes on",
        "=====\n\t\t_parser: function(value, constraints){\n\t\t\t// summary:\n\t\t\t//\t\tParses the string value as a Number, according to constraints.\n\t\t\t// value: String\n\t\t\t//\t\tString representing a number\n\t\t\t// constraints: number.__ParseOptions\n\t\t\t//\t\tFormatting options\n\t\t\t// tags:\n\t\t\t//\t\tprotected\n\n\t\t\treturn 123.45;\t\t// Number\n\t\t},\n\t\t=====",
        "String",
        "number.__FormatOptions",
        "summary:",
        "Replaceable function to convert a formatted string to a number value",
        "tags:",
        "protected extension",
        "parse w/o editOptions: not technically needed but is nice for the user",
        "Number",
        "summary:",
        "This is called with both the display value (string), and the actual value (a number).",
        "When called with the actual value it does corrections so that '' etc. are represented as NaN.",
        "Otherwise it dispatches to the superclass's filter() method.",
        "",
        "See `dijit/form/TextBox.filter()` for more details.",
        "or undefined",
        "set('value', null||''||undefined) should fire onChange(NaN)",
        "Number",
        "Object?",
        "summary:",
        "Convert value (a Number) into a canonical string (ie, how the number literal is written in javascript/java/C/etc.)",
        "tags:",
        "protected",
        "parse with editOptions",
        "Number",
        "Boolean?",
        "String?",
        "summary:",
        "Hook so set('value', ...) works.",
        "check for exponential notation that number.format chokes on",
        "lets format compute a real string value",
        "0 processed in if branch above, ''|null|undefined flows through here",
        "non-numeric values",
        "summary:",
        "Hook so get('value') works.",
        "Returns Number, NaN for '', or undefined for unparseable text",
        "returns Number for all values accepted by parse() or NaN for all other displayed values",
        "If the displayed value of the textbox is gibberish (ex: \"hello world\"), this.inherited() above",
        "returns NaN; this if() branch converts the return value to undefined.",
        "Returning undefined prevents user text from being overwritten when doing _setValueAttr(_getValueAttr()).",
        "A blank displayed value is still returned as NaN.",
        "check for exponential notation that parse() rejected (erroneously?)",
        "return exponential Number or undefined for random text (may not be possible to do with the above RegExp check)",
        "gibberish",
        "Number or NaN for ''",
        "Boolean",
        "Overrides dijit/form/RangeBoundTextBox.isValid() to check that the editing-mode value is valid since",
        "it may not be formatted according to the regExp validation rules",
        "exponential, parse doesn't like it",
        "valid exponential number in range",
        "summary:",
        "A TextBox for entering numbers, with formatting and range checking",
        "description:",
        "NumberTextBox is a textbox for entering and displaying numbers, supporting",
        "the following main features:",
        "",
        "1. Enforce minimum/maximum allowed values (as well as enforcing that the user types",
        "a number rather than a random string)",
        "2. NLS support (altering roles of comma and dot as \"thousands-separator\" and \"decimal-point\"",
        "depending on locale).",
        "3. Separate modes for editing the value and displaying it, specifically that",
        "the thousands separator character (typically comma) disappears when editing",
        "but reappears after the field is blurred.",
        "4. Formatting and constraints regarding the number of places (digits after the decimal point)",
        "allowed on input, and number of places displayed when blurred (see `constraints` parameter).",
        "for monkey patching",
        "=====\n\t NumberTextBox.__Constraints = declare([RangeBoundTextBox.__Constraints, number.__FormatOptions, number.__ParseOptions], {\n\t\t // summary:\n\t\t //\t\tSpecifies both the rules on valid/invalid values (minimum, maximum,\n\t\t //\t\tnumber of required decimal places), and also formatting options for\n\t\t //\t\tdisplaying the value when the field is not focused.\n\t\t // example:\n\t\t //\t\tMinimum/maximum:\n\t\t //\t\tTo specify a field between 0 and 120:\n\t\t //\t|\t\t{min:0,max:120}\n\t\t //\t\tTo specify a field that must be an integer:\n\t\t //\t|\t\t{fractional:false}\n\t\t //\t\tTo specify a field where 0 to 3 decimal places are allowed on input:\n\t\t //\t|\t\t{places:'0,3'}\n\t });\n\t =====",
        "declare",
        "keys.DOWN_ARROW keys.ENTER keys.ESCAPE keys.TAB keys.UP_ARROW",
        "lang.hitch",
        "module:",
        "dijit/form/TimeTextBox",
        "=====\n\tvar __Constraints = declare([_DateTimeTextBox.__Constraints, _TimePicker.__Constraints], {\n\t});\n\t=====",
        "summary:",
        "A validating, serializable, range-bound time text box with a drop down time picker",
        "=====\n\t\t// constraints: __Constraints\n\t\tconstraints:{},\n=====",
        "value: Date",
        "The value of this widget as a JavaScript Date object.  Note that the date portion implies time zone and daylight savings rules.",
        "",
        "Example:",
        "|\tnew dijit/form/TimeTextBox({value: stamp.fromISOString(\"T12:59:59\", new Date())})",
        "",
        "When passed to the parser in markup, must be specified according to locale-independent",
        "`stamp.fromISOString` format.",
        "",
        "Example:",
        "|\t<input data-dojo-type='dijit/form/TimeTextBox' value='T12:34:00'>",
        "value.toString()=\"NaN\"",
        "FIXME: in markup, you have no control over daylight savings",
        "If the user has backspaced or typed some numbers, then filter the result list",
        "by what they typed.  Maybe there's a better way to detect this, like _handleOnChange()?",
        "these keys have special meaning",
        "defer() because the keystroke hasn't yet appeared in the <input>,",
        "so the get('displayedValue') call below won't give the result we want.",
        "set this.filterString to the filter to apply to the drop down list;",
        "it will be used in openDropDown()",
        "close the drop down and reopen it, in order to filter the items shown in the list",
        "and also since the drop down may need to be repositioned if the number of list items has changed",
        "and it's being displayed above the <input>",
        "require.toUrl",
        "used also to load dijit/hccss for setting has(\"highcontrast\")",
        "has(\"highcontrast\")",
        "i18n.getLocalization",
        "dojo.Color dojo.Color.named",
        "declare",
        "domConstruct.place",
        "string.substitute",
        "translations",
        "extend dojo.Color w/names of other colors",
        "module:",
        "dijit/ColorPalette",
        "summary:",
        "A keyboard accessible color-picking widget",
        "description:",
        "Grid showing various colors, so the user can pick a certain color.",
        "Can be used standalone, or as a popup.",
        "",
        "example:",
        "|\t<div data-dojo-type=\"dijit/ColorPalette\"></div>",
        "",
        "example:",
        "|\tvar picker = new dijit.ColorPalette({ },srcNode);",
        "|\tpicker.startup();",
        "palette: [const] String",
        "Size of grid, either \"7x10\" or \"3x4\".",
        "_palettes: [protected] Map",
        "This represents the value of the colors.",
        "The first level is a hashmap of the different palettes available.",
        "The next two dimensions represent the columns and rows of colors.",
        "templateString: String",
        "The template of this widget.",
        "Overrides _PaletteMixin._dyeFactory().",
        "Instantiate the template, which makes a skeleton into which we'll insert a bunch of",
        "<img> nodes",
        "Creates customized constructor for dye class (color of a single cell) for",
        "specified palette and high-contrast vs. normal mode.   Used in _getDye().",
        "Creates <img> nodes in each cell of the template.",
        "summary:",
        "Object associated with each cell in a ColorPalette palette.",
        "Implements dijit/Dye.",
        "Template for each cell in normal (non-high-contrast mode).  Each cell contains a wrapper",
        "node for showing the border (called dijitPaletteImg for back-compat), and dijitColorPaletteSwatch",
        "for showing the color.",
        "Template for each cell in high contrast mode.  Each cell contains an image with the whole palette,",
        "but scrolled and clipped to show the correct color only",
        "_imagePaths: [protected] Map",
        "This is stores the path to the palette images used for high-contrast mode display",
        "summary:",
        "Constructor for ColorPalette._Color",
        "alias: String",
        "English name of the color.",
        "row: Number",
        "Vertical position in grid.",
        "column: Number",
        "Horizontal position in grid.",
        "title: String",
        "Localized name of the color.",
        "summary:",
        "Note that although dijit._Color is initialized with a value like \"white\" getValue() always",
        "returns a hex value",
        "DOMNode",
        "String",
        "substitution variables for normal mode",
        "variables used for high contrast mode",
        "currency._mixInDefaults currency.format currency.parse currency.regexp",
        "declare",
        "lang.hitch",
        "module:",
        "dijit/form/CurrencyTextBox",
        "=====\n\tvar __Constraints = declare([NumberTextBox.__Constraints, currency.__FormatOptions, currency.__ParseOptions], {\n\t\t// summary:\n\t\t//\t\tSpecifies both the rules on valid/invalid values (minimum, maximum,\n\t\t//\t\tnumber of required decimal places), and also formatting options for\n\t\t//\t\tdisplaying the value when the field is not focused (currency symbol,\n\t\t//\t\tetc.)\n\t\t// description:\n\t\t//\t\tFollows the pattern of `dijit/form/NumberTextBox.__Constraints`.\n\t\t//\t\tIn general developers won't need to set this parameter\n\t\t// example:\n\t\t//\t\tTo ensure that the user types in the cents (for example, 1.00 instead of just 1):\n\t\t//\t|\t\t{fractional:true}\n\t});\n\t=====",
        "summary:",
        "A validating currency textbox",
        "description:",
        "CurrencyTextBox is similar to `dijit/form/NumberTextBox` but has a few",
        "extra features related to currency:",
        "",
        "1. After specifying the currency type (american dollars, euros, etc.) it automatically",
        "sets parse/format options such as how many decimal places to show.",
        "2. The currency mark (dollar sign, euro mark, etc.) is displayed when the field is blurred",
        "but erased during editing, so that the user can just enter a plain number.",
        "currency: [const] String",
        "the [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like \"USD\"",
        "=====\n\t\t// constraints: __Constraints\n\t\t//\t\tDespite the name, this parameter specifies both constraints on the input\n\t\t//\t\t(including minimum/maximum allowed values) as well as\n\t\t//\t\tformatting options.\n\t\tconstraints: {},\n\t\t======",
        "Override pattern ValidationTextBox.pattern.... we use a reg-ex generating function rather",
        "than a straight regexp to deal with locale (plus formatting options too?)",
        "if focused, accept either currency data or NumberTextBox format",
        "Override NumberTextBox._formatter to deal with currencies, ex: converts \"123.45\" to \"$123.45\"",
        "String",
        "Object",
        "summary:",
        "Parses string value as a Currency, according to the constraints object",
        "tags:",
        "protected extension",
        "currency parse failed, but it could be because they are using NumberTextBox format so try its parse",
        "Object",
        "get places",
        "kernel.deprecated",
        "declare",
        "layoutUtils.layoutChildren",
        "module:",
        "dijit/layout/LayoutContainer",
        "summary:",
        "Deprecated.  Use `dijit/layout/BorderContainer` instead.",
        "description:",
        "Provides Delphi-style panel layout semantics.",
        "",
        "A LayoutContainer is a box with a specified size (like style=\"width: 500px; height: 500px;\"),",
        "that contains children widgets marked with \"layoutAlign\" of \"left\", \"right\", \"bottom\", \"top\", and \"client\".",
        "It takes it's children marked as left/top/bottom/right, and lays them out along the edges of the box,",
        "and then it takes the child marked \"client\" and puts it into the remaining space in the middle.",
        "",
        "Left/right positioning is similar to CSS's \"float: left\" and \"float: right\",",
        "and top/bottom positioning would be similar to \"float: top\" and \"float: bottom\", if there were such",
        "CSS.",
        "",
        "Note that there can only be one client element, but there can be multiple left, right, top,",
        "or bottom elements.",
        "",
        "See `LayoutContainer.ChildWidgetProperties` for details on the properties that can be set on",
        "children of a `LayoutContainer`.",
        "",
        "example:",
        "|\t<style>",
        "|\t\thtml, body{ height: 100%; width: 100%; }",
        "|\t</style>",
        "|\t<div data-dojo-type=\"dijit/layout/LayoutContainer\" style=\"width: 100%; height: 100%\">",
        "|\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"layoutAlign: 'top'\">header text</div>",
        "|\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"layoutAlign: 'left'\" style=\"width: 200px;\">table of contents</div>",
        "|\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"layoutAlign: 'client'\">client area</div>",
        "|\t</div>",
        "",
        "Lays out each child in the natural order the children occur in.",
        "Basically each child is laid out into the \"remaining space\", where \"remaining space\" is initially",
        "the content area of this widget, but is reduced to a smaller rectangle each time a child is added.",
        "tags:",
        "deprecated",
        "dijit/_WidgetBase",
        "Integer?",
        "dijit/_WidgetBase",
        "summary:",
        "This property can be specified for the children of a LayoutContainer.",
        "layoutAlign: String",
        "\"none\", \"left\", \"right\", \"bottom\", \"top\", and \"client\".",
        "See the LayoutContainer description for details on this parameter.",
        "Since any widget can be specified as a LayoutContainer child, mix it",
        "into the base widget class.  (This is a hack, but it's effective.)",
        "This is for the benefit of the parser.   Remove for 2.0.  Also, hide from doc viewer.",
        "===== {} || =====",
        "array.forEach array.indexOf array.map",
        "declare",
        "fx.fadeIn fx.fadeOut",
        "dom.byId",
        "domClass.add",
        "domGeometry.position",
        "domStyle.set, domStyle.get",
        "lang.hitch lang.isArrayLike",
        "has(\"ie\"), has(\"trident\")",
        "manager.defaultDuration",
        "sets dijit.showTooltip etc. for back-compat",
        "module:",
        "dijit/Tooltip",
        "TODO: Tooltip should really share more positioning code with TooltipDialog, like:",
        "- the orient() method",
        "- the connector positioning code in show()",
        "- the dijitTooltip[Dialog] class",
        "",
        "The problem is that Tooltip's implementation supplies it's own <iframe> and interacts directly",
        "with dijit/place, rather than going through dijit/popup like TooltipDialog and other popups (ex: Menu).",
        "summary:",
        "Internal widget that holds the actual tooltip markup,",
        "which occurs once per page.",
        "Called by Tooltip widgets which are just containers to hold",
        "the markup",
        "tags:",
        "protected",
        "duration: Integer",
        "Milliseconds to fade in/fade out",
        "Setup fade-in and fade-out functions.",
        "summary:",
        "Display tooltip w/specified contents to right of specified node",
        "(To left if there's no space on the right, or if rtl == true)",
        "innerHTML: String",
        "Contents of the tooltip",
        "aroundNode: DomNode|dijit/place.__Rectangle",
        "Specifies that tooltip should be next to this node / area",
        "position: String[]?",
        "List of positions to try to position tooltip (ex: [\"right\", \"above\"])",
        "rtl: Boolean?",
        "Corresponds to `WidgetBase.dir` attribute, where false means \"ltr\" and true",
        "means \"rtl\"; specifies GUI direction, not text direction.",
        "textDir: String?",
        "Corresponds to `WidgetBase.textdir` attribute; specifies direction of text.",
        "previous tooltip is being hidden; wait until the hide completes then show new one",
        "fix the text alignment",
        "Position the tooltip connector for middle alignment.",
        "This could not have been done in orient() since the tooltip wasn't positioned at that time.",
        "Not *-centered, but just above/below/after/before",
        "show it",
        "DomNode",
        "String",
        "String",
        "Object",
        "Object",
        "summary:",
        "Private function to set CSS for tooltip node based on which position it's in.",
        "This is called by the dijit popup code.   It will also reduce the tooltip's",
        "width to whatever width is available",
        "tags:",
        "protected",
        "reset to default",
        "reset width; it may have been set by orient() on a previous tooltip show()",
        "Reduce tooltip's width to the amount of width available, so that it doesn't overflow screen.",
        "Note that sometimes widthAvailable is negative, but we guard against setting style.width to a",
        "negative number since that causes an exception on IE.",
        "workaround strange IE bug where setting width to offsetWidth causes words to wrap",
        "Reposition the tooltip connector.",
        "The tooltip starts at the top of the page and will extend past the aroundNode",
        "Align center of connector with center of aroundNode, except don't let bottom",
        "of connector extend below bottom of tooltip content, or top of connector",
        "extend past top of tooltip content",
        "reset the tooltip back to the defaults",
        "summary:",
        "Called at end of fade-in operation",
        "tags:",
        "protected",
        "the arrow won't show up on a node w/an opacity filter",
        "summary:",
        "Hide the tooltip",
        "this hide request is for a show() that hasn't even started yet;",
        "just cancel the pending show()",
        "this hide request is for the currently displayed tooltip",
        "just ignore the call, it's for a tooltip that has already been erased",
        "summary:",
        "Called at end of fade-out operation",
        "tags:",
        "protected",
        "to position offscreen again",
        "a show request has been queued up; do it now",
        "Object",
        "summary:",
        "Resolve \"auto\" text direction for children nodes",
        "tags:",
        "private",
        "String",
        "summary:",
        "Setter for textDir.",
        "description:",
        "Users shouldn't call this function; they should be calling",
        "set('textDir', value)",
        "tags:",
        "private",
        "summary:",
        "Static method to display tooltip w/specified contents in specified position.",
        "See description of dijit/Tooltip.defaultPosition for details on position parameter.",
        "If position is not specified then dijit/Tooltip.defaultPosition is used.",
        "innerHTML: String",
        "Contents of the tooltip",
        "aroundNode: place.__Rectangle",
        "Specifies that tooltip should be next to this node / area",
        "position: String[]?",
        "List of positions to try to position tooltip (ex: [\"right\", \"above\"])",
        "rtl: Boolean?",
        "Corresponds to `WidgetBase.dir` attribute, where false means \"ltr\" and true",
        "means \"rtl\"; specifies GUI direction, not text direction.",
        "textDir: String?",
        "Corresponds to `WidgetBase.textdir` attribute; specifies direction of text.",
        "After/before don't work, but for back-compat convert them to the working after-centered, before-centered.",
        "Possibly remove this in 2.0.   Alternately, get before/after to work.",
        "summary:",
        "Static method to hide the tooltip displayed via showTooltip()",
        "summary:",
        "Pops up a tooltip (a help message) when you hover over a node.",
        "Also provides static show() and hide() methods that can be used without instantiating a dijit/Tooltip.",
        "label: String",
        "Text to display in the tooltip.",
        "Specified as innerHTML when creating the widget from markup.",
        "showDelay: Integer",
        "Number of milliseconds to wait after hovering over/focusing on the object, before",
        "the tooltip is displayed.",
        "connectId: String|String[]|DomNode|DomNode[]",
        "Id of domNode(s) to attach the tooltip to.",
        "When user hovers over specified dom node(s), the tooltip will appear.",
        "position: String[]",
        "See description of `dijit/Tooltip.defaultPosition` for details on position parameter.",
        "selector: String?",
        "CSS expression to apply this Tooltip to descendants of connectIds, rather than to",
        "the nodes specified by connectIds themselves.    Useful for applying a Tooltip to",
        "a range of rows in a table, tree, etc.   Use in conjunction with getContent() parameter.",
        "Ex: connectId: myTable, selector: \"tr\", getContent: function(node){ return ...; }",
        "",
        "The application must require() an appropriate level of dojo/query to handle the selector.",
        "TODO: in 2.0 remove support for multiple connectIds.   selector gives the same effect.",
        "So, change connectId to a \"\", remove addTarget()/removeTarget(), etc.",
        "String|String[]}DomNode|DomNode[]",
        "summary:",
        "Connect to specified node(s)",
        "Remove connections to old nodes (if there are any)",
        "Make array of id's to connect to, excluding entries for nodes that don't exist yet, see startup()",
        "Make connections",
        "OomNode|String",
        "summary:",
        "Attach tooltip to specified node if it's not already connected",
        "TODO: remove in 2.0 and just use set(\"connectId\", ...) interface",
        "DomNode|String",
        "summary:",
        "Detach tooltip from specified node",
        "TODO: remove in 2.0 and just use set(\"connectId\", ...) interface",
        "map from DOMNode back to plain id string",
        "remove id (modifies original this._connectIds but that's OK in this case)",
        "If this tooltip was created in a template, or for some other reason the specified connectId[s]",
        "didn't exist during the widget's initialization, then connect now.",
        "DomNode",
        "summary:",
        "User overridable function that return the text to display in the tooltip.",
        "tags:",
        "extension",
        "DomNode",
        "summary:",
        "Despite the name of this method, it actually handles both hover and focus",
        "events on the target node, setting a timer to show the tooltip.",
        "tags:",
        "private",
        "summary:",
        "Despite the name of this method, it actually handles both mouseleave and blur",
        "events on the target node, hiding the tooltip.",
        "tags:",
        "private",
        "DomNode",
        "summary:",
        "Display the tooltip; usually not called directly.",
        "tags:",
        "private",
        "_connectNode means \"tooltip currently displayed for this node\"",
        "summary:",
        "Hide the tooltip or cancel timer for show of tooltip",
        "tags:",
        "private",
        "if tooltip is currently shown",
        "if tooltip is scheduled to be shown (after a brief delay)",
        "===== target, position =====",
        "summary:",
        "Called when the tooltip is shown",
        "tags:",
        "callback",
        "summary:",
        "Called when the tooltip is hidden",
        "tags:",
        "callback",
        "Remove connections manually since they aren't registered to be removed by _WidgetBase",
        "for monkey patching",
        "export function through module return value",
        "export function through module return value",
        "=====\n\tlang.mixin(Tooltip, {\n\t\t // defaultPosition: String[]\n\t\t //\t\tThis variable controls the position of tooltips, if the position is not specified to\n\t\t //\t\tthe Tooltip widget or *TextBox widget itself.  It's an array of strings with the values\n\t\t //\t\tpossible for `dijit/place.around()`.   The recommended values are:\n\t\t //\n\t\t //\t\t- before-centered: centers tooltip to the left of the anchor node/widget, or to the right\n\t\t //\t\t  in the case of RTL scripts like Hebrew and Arabic\n\t\t //\t\t- after-centered: centers tooltip to the right of the anchor node/widget, or to the left\n\t\t //\t\t  in the case of RTL scripts like Hebrew and Arabic\n\t\t //\t\t- above-centered: tooltip is centered above anchor node\n\t\t //\t\t- below-centered: tooltip is centered above anchor node\n\t\t //\n\t\t //\t\tThe list is positions is tried, in order, until a position is found where the tooltip fits\n\t\t //\t\twithin the viewport.\n\t\t //\n\t\t //\t\tBe careful setting this parameter.  A value of \"above-centered\" may work fine until the user scrolls\n\t\t //\t\tthe screen so that there's no room above the target node.   Nodes with drop downs, like\n\t\t //\t\tDropDownButton or FilteringSelect, are especially problematic, in that you need to be sure\n\t\t //\t\tthat the drop down and tooltip don't overlap, even when the viewport is scrolled so that there\n\t\t //\t\tis only room below (or above) the target node, but not both.\n\t });\n\t=====",
        "declare",
        "module:",
        "dijit/form/VerticalSlider",
        "summary:",
        "A form widget that allows one to select a value with a vertically draggable handle",
        "_descending: Boolean",
        "Specifies if the slider values go from high-on-top (true), or low-on-top (false)",
        "TODO: expose this in 1.2 - the css progress/remaining bar classes need to be reversed",
        "summary:",
        "Overrides HorizontalSlider._isReversed.",
        "Indicates if values are high on top (with low numbers on the bottom).",
        "declare",
        "hitch",
        "query",
        "registry.byNode",
        "dijit.popup2.hide",
        "module:",
        "dijit/form/DropDownButton",
        "summary:",
        "A button with a drop down",
        "",
        "example:",
        "|\t<button data-dojo-type=\"dijit/form/DropDownButton\">",
        "|\t\tHello world",
        "|\t\t<div data-dojo-type=\"dijit/Menu\">...</div>",
        "|\t</button>",
        "",
        "example:",
        "|\tvar button1 = new DropDownButton({ label: \"hi\", dropDown: new dijit.Menu(...) });",
        "|\twin.body().appendChild(button1);",
        "",
        "Overrides Button._fillContent().",
        "",
        "My inner HTML contains both the button contents and a drop down widget, like",
        "<DropDownButton>  <span>push me</span>  <Menu> ... </Menu> </DropDownButton>",
        "The first node is assumed to be the button content. The widget is the popup.",
        "programatically created buttons might not define srcNodeRef",
        "FIXME: figure out how to filter out the widget and use all remaining nodes as button",
        "content, not just nodes[0]",
        "save pointer to srcNode so we can grab the drop down widget after it's instantiated",
        "the child widget from srcNodeRef is the dropdown widget.  Insert it in the page DOM,",
        "make it invisible, and store a reference to pass to the popup code.",
        "Returns whether or not we are loaded - if our dropdown has an href,",
        "then we want to check that.",
        "Function",
        "Default implementation assumes that drop down already exists,",
        "but hasn't loaded it's data (ex: ContentPane w/href).",
        "App must override if the drop down is lazy-created.",
        "tell it to load",
        "Overridden so that focus is handled by the _HasDropDown mixin, not by",
        "the _FormWidget mixin.",
        "module:",
        "dojo/date",
        "summary:",
        "Date manipulation utilities",
        "Date",
        "summary:",
        "Returns the number of days in the month used by dateObject",
        "Number",
        "Number",
        "Date",
        "summary:",
        "Determines if the year of the dateObject is a leap year",
        "description:",
        "Leap years are years with an additional day YYYY-02-29, where the",
        "year number is a multiple of four with the following exception: If",
        "a year is a multiple of 100, then it is only a leap year if it is",
        "also a multiple of 400. For example, 1900 was not a leap year, but",
        "2000 is one.",
        "Boolean",
        "FIXME: This is not localized",
        "Date",
        "summary:",
        "Get the user's time zone as provided by the browser",
        "dateObject:",
        "Needed because the timezone may vary with time (daylight savings)",
        "description:",
        "Try to get time zone info from toString or toLocaleString method of",
        "the Date object -- UTC offset is not a time zone.  See",
        "http://www.twinsun.com/tz/tz-link.htm Note: results may be",
        "inconsistent across browsers.",
        "Start looking in toString",
        "The result -- return empty string if nothing found",
        "First look for something in parentheses -- fast lookup, no regex",
        "If at first you don't succeed ...",
        "If IE knows about the TZ, it appears before the year",
        "Capital letters or slash before a 4-digit year",
        "at the end of string",
        "Some browsers (e.g. Safari) glue the TZ on the end",
        "of toLocaleString instead of putting it in toString",
        "Capital letters or slash -- end of string,",
        "after space",
        "Make sure it doesn't somehow end up return AM or PM",
        "String",
        "Utility methods to do arithmetic calculations with Dates",
        "Date",
        "Date?",
        "String?",
        "summary:",
        "Compare two date objects by date, time, or both.",
        "description:",
        "Returns 0 if equal, positive if a > b, else negative.",
        "date1:",
        "Date object",
        "date2:",
        "Date object.  If not specified, the current Date is used.",
        "portion:",
        "A string indicating the \"date\" or \"time\" portion of a Date object.",
        "Compares both \"date\" and \"time\" by default.  One of the following:",
        "\"date\", \"time\", \"datetime\"",
        "Extra step required in copy for IE - see #3112",
        "Ignore times and compare dates.",
        "Ignore dates and compare times.",
        "int",
        "int",
        "int",
        "Date",
        "String",
        "int",
        "summary:",
        "Add to a Date in intervals of different size, from milliseconds to years",
        "date: Date",
        "Date object to start with",
        "interval:",
        "A string representing the interval.  One of the following:",
        "\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",",
        "\"millisecond\", \"quarter\", \"week\", \"weekday\"",
        "amount:",
        "How much to add to the date.",
        "convert to Number before copying to accomodate IE (#3112)",
        "i18n FIXME: assumes Saturday/Sunday weekend, but this is not always true.  see dojo/cldr/supplemental",
        "Divide the increment time span into weekspans plus leftover days",
        "e.g., 8 days is one 5-day weekspan / and two leftover days",
        "Can't have zero leftover days, so numbers divisible by 5 get",
        "a days value of 5, and the remaining days make up the number of weeks",
        "Get weekday value for orig date param",
        "Orig date is Sat / positive incrementer",
        "Jump over Sun",
        "Orig date is Sun / negative incrementer",
        "Jump back over Sat",
        "Get weekday val for the new date",
        "New date is on Sat or Sun",
        "Increment by number of weeks plus leftover days plus",
        "weekend adjustments",
        "Keep increment/decrement from 2/29 out of March",
        "Naive quarter is just three months",
        "fallthrough...",
        "Reset to last day of month if you overshoot",
        "case \"hour\":",
        "case \"minute\":",
        "case \"second\":",
        "case \"millisecond\":",
        "Date",
        "Date",
        "Date?",
        "String?",
        "summary:",
        "Get the difference in a specific unit of time (e.g., number of",
        "months, weeks, days, etc.) between two dates, rounded to the",
        "nearest integer.",
        "date1:",
        "Date object",
        "date2:",
        "Date object.  If not specified, the current Date is used.",
        "interval:",
        "A string representing the interval.  One of the following:",
        "\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",",
        "\"millisecond\", \"quarter\", \"week\", \"weekday\"",
        "",
        "Defaults to \"day\".",
        "Integer return value",
        "Figure out which quarter the months are in",
        "Add quarters for any year difference between the dates",
        "Even number of weeks",
        "Weeks plus spare change (< 7 days)",
        "Mark the date advanced by the number of",
        "round weeks (may be zero)",
        "Spare change days -- 6 or less",
        "Range starts on Sat",
        "Range starts on Sun",
        "Range ends on Sat",
        "Range ends on Sun",
        "Range contains weekend",
        "Range starts on Sat",
        "Range starts on Sun",
        "Range ends on Sat",
        "Range ends on Sun",
        "Range contains weekend",
        "Truncate instead of rounding",
        "Don't use Math.floor -- value may be negative",
        "fallthrough",
        "fallthrough",
        "fallthrough",
        "fallthrough",
        "Round for fractional values and DST leaps",
        "Number (integer)",
        "Don't use setObject() because it may overwrite dojo/date/stamp (if that has already been loaded)",
        "array.filter array.forEach",
        "declare",
        "domClass.contains domClass.toggle",
        "domGeometry.contentBox domGeometry.marginBox",
        "lang.mixin",
        "query",
        "has(\"ie\")",
        "registry.byId",
        "marginBox2contextBox",
        "module:",
        "dijit/layout/_ContentPaneResizeMixin",
        "summary:",
        "Resize() functionality of ContentPane.   If there's a single layout widget",
        "child then it will call resize() with the same dimensions as the ContentPane.",
        "Otherwise just calls resize on each child.",
        "",
        "Also implements basic startup() functionality, where starting the parent",
        "will start the children",
        "doLayout: Boolean",
        "- false - don't adjust size of children",
        "- true - if there is a single visible child widget, set it's size to however big the ContentPane is",
        "isLayoutContainer: [protected] Boolean",
        "Indicates that this widget will call resize() on it's child widgets",
        "when they become visible.",
        "summary:",
        "See `dijit/layout/_LayoutWidget.startup()` for description.",
        "Although ContentPane doesn't extend _LayoutWidget, it does implement",
        "the same API.",
        "I need to call resize() on my child/children (when I become visible), unless",
        "I'm the child of a layout widget in which case my parent will call resize() on me and I'll do it then.",
        "Since my parent isn't a layout container, and my style *may be* width=height=100%",
        "or something similar (either set directly or via a CSS class),",
        "monitor when viewport size changes so that I can re-layout.",
        "This is more for subclasses of ContentPane than ContentPane itself, although it",
        "could be useful for a ContentPane if it has a single child widget inheriting ContentPane's size.",
        "summary:",
        "Test if we have exactly one visible widget as a child,",
        "and if so assume that we are a container for that widget,",
        "and should propagate startup() and resize() calls to it.",
        "Skips over things like data stores since they aren't visible.",
        "So we can set overflow: hidden to avoid a safari bug w/scrollbars showing up (#9449)",
        "summary:",
        "See `dijit/layout/_LayoutWidget.resize()` for description.",
        "Although ContentPane doesn't extend _LayoutWidget, it does implement",
        "the same API.",
        "summary:",
        "Resize myself, and call resize() on each of my child layout widgets, either now",
        "(if I'm currently visible) or when I become visible",
        "summary:",
        "Resize myself according to optional changeSize/resultSize parameters, like a layout widget.",
        "Also, since I am an isLayoutContainer widget, each of my children expects me to",
        "call resize() or layout() on it.",
        "",
        "Should be called on initialization and also whenever we get new content",
        "(from an href, or from set('content', ...))... but deferred until",
        "the ContentPane is visible",
        "For the TabContainer --> BorderContainer --> ContentPane case, _onShow() is",
        "never called directly, so resize() is our trigger to do the initial href download (see [20099]).",
        "However, don't load href for closed TitlePanes.",
        "Set margin box size, unless it wasn't specified, in which case use current size.",
        "Compute content box size of containerNode in case we [later] need to size our single child.",
        "If changeSize or resultSize was passed to this method and this.containerNode ==",
        "this.domNode then we can compute the content-box size without querying the node,",
        "which is more reliable (similar to LayoutWidget.resize) (see for example #9449).",
        "changeSize overrides resultSize",
        "just use domGeometry.setMarginBox() to fill in missing values",
        "Call _checkIfSingleChild() again in case app has manually mucked w/the content",
        "of the ContentPane (rather than changing it through the set(\"content\", ...) API.",
        "note: if widget has padding this._contentBox will have l and t set,",
        "but don't pass them to resize() or it will doubly-offset the child",
        "All my child widgets are independently sized (rather than matching my size),",
        "but I still need to call resize() on each child to make it layout.",
        "summary:",
        "Returns true if the content is currently shown.",
        "description:",
        "If I am a child of a layout widget then it actually returns true if I've ever been visible,",
        "not whether I'm currently visible, since that's much faster than tracing up the DOM/widget",
        "tree every call, and at least solves the performance problem on page load by deferring loading",
        "hidden ContentPanes until they are first shown",
        "If we are TitlePane, etc - we return that only *IF* we've been resized",
        "for TitlePane, etc.",
        "summary:",
        "Called when the ContentPane is made visible",
        "description:",
        "For a plain ContentPane, this is called on initialization, from startup().",
        "If the ContentPane is a hidden pane of a TabContainer etc., then it's",
        "called whenever the pane is made visible.",
        "",
        "Does layout/resize of child widget(s)",
        "Need to keep track of whether ContentPane has been shown (which is different than",
        "whether or not it's currently visible).",
        "If a layout has been scheduled for when we become visible, do it now",
        "declare",
        "i18n.getLocalization",
        "module:",
        "dijit/form/RangeBoundTextBox",
        "summary:",
        "Base class for textbox form widgets which defines a range of valid values.",
        "rangeMessage: String",
        "The message to display if value is out-of-range",
        "=====\n\t\t// constraints: RangeBoundTextBox.__Constraints\n\t\tconstraints: {},\n\t\t======",
        "Number",
        "dijit/form/RangeBoundTextBox.__Constraints",
        "summary:",
        "Overridable function used to validate the range of the numeric input value.",
        "tags:",
        "protected",
        "Boolean",
        "Boolean",
        "===== isFocused =====",
        "summary:",
        "Tests if the value is in the min/max range specified in constraints",
        "tags:",
        "protected",
        "summary:",
        "Returns true if the value is out of range and will remain",
        "out of range even if the user types more characters",
        "not yet valid enough to compare to",
        "summary:",
        "Overrides `dijit/form/ValidationTextBox._isValidSubset()`.",
        "Returns true if the input is syntactically valid, and either within",
        "range or could be made in range by more typing.",
        "Boolean",
        "Overrides dijit/form/ValidationTextBox.isValid() to check that the value is also in range.",
        "Boolean",
        "Boolean",
        "Overrides dijit/form/ValidationTextBox.getErrorMessage() to print \"out of range\" message if appropriate",
        "and !undefined",
        "don't check isInRange w/o a real value",
        "String",
        "===== element, text =====",
        "summary:",
        "The function overridden in the _BidiSupport module,",
        "originally used for setting element.dir according to this.textDir.",
        "In this case does nothing.",
        "element: Object",
        "text: String",
        "tags:",
        "protected.",
        "=====\n\tRangeBoundTextBox.__Constraints = declare(null, {\n\t\t// min: Number\n\t\t//\t\tMinimum signed value.  Default is -Infinity\n\t\t// max: Number\n\t\t//\t\tMaximum signed value.  Default is +Infinity\n\t});\n\t=====",
        "array.forEach array.indexOf array.some",
        "config",
        "declare",
        "Deferred",
        "dom.byId",
        "domAttr.set or get",
        "domClass.add domClass.remove",
        "domConstruct.create domConstruct.destroy domConstruct.place",
        "domGeometry.position",
        "domStyle.getComputedStyle domStyle.set",
        "event.stop",
        "kernel.deprecated",
        "keys.BACKSPACE keys.TAB",
        "lang.clone lang.hitch lang.isArray lang.isFunction lang.isString lang.trim",
        "on()",
        "query",
        "ready",
        "has(\"ie\") has(\"mozilla\") has(\"opera\") has(\"safari\") has(\"webkit\")",
        "topic.publish() (publish)",
        "unload",
        "url",
        "win.global",
        "dijit._scopeName",
        "module:",
        "dijit/_editor/RichText",
        "summary:",
        "dijit/_editor/RichText is the core of dijit/Editor, which provides basic",
        "WYSIWYG editing features.",
        "if you want to allow for rich text saving with back/forward actions, you must add a text area to your page with",
        "the id==dijit._scopeName + \"._editor.RichText.value\" (typically \"dijit/_editor/RichText.value). For example,",
        "something like this will work:",
        "",
        "<textarea id=\"dijit._editor.RichText.value\" style=\"display:none;position:absolute;top:-100px;left:-100px;height:3px;width:3px;overflow:hidden;\"></textarea>",
        "",
        "summary:",
        "dijit/_editor/RichText is the core of dijit.Editor, which provides basic",
        "WYSIWYG editing features.",
        "",
        "description:",
        "dijit/_editor/RichText is the core of dijit.Editor, which provides basic",
        "WYSIWYG editing features. It also encapsulates the differences",
        "of different js engines for various browsers.  Do not use this widget",
        "with an HTML &lt;TEXTAREA&gt; tag, since the browser unescapes XML escape characters,",
        "like &lt;.  This can have unexpected behavior and lead to security issues",
        "such as scripting attacks.",
        "",
        "tags:",
        "private",
        "===== , srcNodeRef =====",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Initial settings for any of the widget attributes, except readonly attributes.",
        "srcNodeRef: DOMNode",
        "The widget replaces the specified DOMNode.",
        "contentPreFilters: Function(String)[]",
        "Pre content filter function register array.",
        "these filters will be executed before the actual",
        "editing area gets the html content.",
        "contentPostFilters: Function(String)[]",
        "post content filter function register array.",
        "These will be used on the resulting html",
        "from contentDomPostFilters. The resulting",
        "content is the final html (returned by getValue()).",
        "contentDomPreFilters: Function(DomNode)[]",
        "Pre content dom filter function register array.",
        "These filters are applied after the result from",
        "contentPreFilters are set to the editing area.",
        "contentDomPostFilters: Function(DomNode)[]",
        "Post content dom filter function register array.",
        "These filters are executed on the editing area dom.",
        "The result from these will be passed to contentPostFilters.",
        "editingAreaStyleSheets: dojo._URL[]",
        "array to store all the stylesheets applied to the editing area",
        "Make a copy of this.events before we start writing into it, otherwise we",
        "will modify the prototype which leads to bad things on pages w/multiple editors",
        "inheritWidth: Boolean",
        "whether to inherit the parent's width or simply use 100%",
        "focusOnLoad: [deprecated] Boolean",
        "Focus into this widget when the page is loaded",
        "name: String?",
        "Specifies the name of a (hidden) `<textarea>` node on the page that's used to save",
        "the editor content on page leave.   Used to restore editor contents after navigating",
        "to a new page and then hitting the back button.",
        "styleSheets: [const] String",
        "semicolon (\";\") separated list of css files for the editing area",
        "height: String",
        "Set height to fix the editor at a specific height, with scrolling.",
        "By default, this is 300px.  If you want to have the editor always",
        "resizes to accommodate the content, use AlwaysShowToolbar plugin",
        "and set height=\"\".  If this editor is used within a layout widget,",
        "set height=\"100%\".",
        "minHeight: String",
        "The minimum height that the editor should have.",
        "isClosed: [private] Boolean",
        "isLoaded: [private] Boolean",
        "_SEPARATOR: [private] String",
        "Used to concat contents from multiple editors into a single string,",
        "so they can be saved into a single `<textarea>` node.  See \"name\" attribute.",
        "_NAME_CONTENT_SEP: [private] String",
        "USed to separate name from content.  Just a colon isn't safe.",
        "onLoadDeferred: [readonly] dojo.Deferred",
        "Deferred which is fired when the editor finishes loading.",
        "Call myEditor.onLoadDeferred.then(callback) it to be informed",
        "when the rich-text area initialization is finalized.",
        "isTabIndent: Boolean",
        "Make tab key and shift-tab indent and outdent rather than navigating.",
        "Caution: sing this makes web pages inaccessible to users unable to use a mouse.",
        "disableSpellCheck: [const] Boolean",
        "When true, disables the browser's native spell checking, if supported.",
        "Works only in Firefox.",
        "Push in the builtin filters now, making them the first executed, but not over-riding anything",
        "users passed in.  See: #6062",
        "avoid IE10 problem hitting ENTER on last line when there's a trailing \\n.",
        "Try to clean up WebKit bogus artifacts.  The inserted classes",
        "made by WebKit sometimes messes things up.",
        "IE generates <strong> and <em> but we want to normalize to <b> and <i>",
        "Still happens in IE11!",
        "summary:",
        "Add some default key handlers",
        "description:",
        "Overwrite this to setup your own handlers. The default",
        "implementation does not use Editor commands, but directly",
        "executes the builtin commands within the underlying browser",
        "support.",
        "tags:",
        "protected",
        "FIXME: undo?",
        "events: [private] String[]",
        "events which should be connected to the underlying editing area",
        "onClick handled specially",
        "captureEvents: [deprecated] String[]",
        "Events which should be connected to the underlying editing",
        "area, events in this array will be addListener with",
        "capture=true.",
        "TODO: looking at the code I don't see any distinction between events and captureEvents,",
        "so get rid of this for 2.0 if not sooner",
        "summary:",
        "When IE is running in a non-English locale, the API actually changes,",
        "so that we have to say (for example) danraku instead of p (for paragraph).",
        "Handle that here.",
        "tags:",
        "private",
        "Use the already generate cache of mappings.",
        "in IE, names for blockformat is locale dependent, so we cache the values here",
        "put p after div, so if IE returns Normal, we show it as paragraph",
        "We can distinguish p and div if IE returns Normal, however, in order to detect that,",
        "we have to call this.document.selection.createRange().parentElement() or such, which",
        "could slow things down. Leave it as it is for now",
        "append a <br> after each element to separate the elements more reliably",
        "queryCommandValue returns empty if we hide editNode, so move it out of screen temporary",
        "Also, IE9 does weird stuff unless we do it inside the editor iframe.",
        "IE9 has a timing issue with doing this right after setting",
        "the inner HTML, so put a delay in.",
        "console.log(\"Mapped: \", nativename, \" to: \", this._local2NativeFormatNames[nativename]);",
        "Sqelch the occasional IE9 error",
        "DomNode?",
        "summary:",
        "Transforms the node referenced in this.domNode into a rich text editing",
        "node.",
        "description:",
        "Sets up the editing area asynchronously. This will result in",
        "the creation and replacement with an iframe.",
        "tags:",
        "private",
        "else unchanged",
        "\"html\" will hold the innerHTML of the srcNodeRef and will be used to",
        "initialize the editor.",
        "Allow setting the editor content programmatically instead of",
        "relying on the initial content being contained within the target",
        "domNode.",
        "if we were created from a textarea, then we need to create a",
        "new editing harness node.",
        "some browsers refuse to submit display=none textarea, so",
        "move the textarea off screen instead",
        "nasty IE bug: abnormal formatting if overflow is not hidden",
        "Copy value to the <textarea> so it gets submitted along with form.",
        "FIXME: should we be calling close() here instead?",
        "don't submit the value if disabled",
        "If we're a list item we have to put in a blank line to force the",
        "bullet to nicely align at the top of text",
        "Construct the editor div structure.",
        "User has pressed back/forward button so we lost the text in the editor, but it's saved",
        "in a hidden <textarea> (which contains the data for all the editors on this page),",
        "so get editor value from there",
        "iframe should be 100% height, thus getting it's height from surrounding",
        "<div> (which has the correct height set by Editor)",
        "Do final setup and set initial contents of editor",
        "Attach iframe to document, and set the initial (blank) content.",
        "IE10 and earlier will throw an \"Access is denied\" error when attempting to access the parent frame if",
        "document.domain has been set, unless the child frame also has the same document.domain set. The child frame",
        "can only set document.domain while the document is being constructed using open/write/close; attempting to",
        "set it later results in a different \"This method can't be used in this context\" error. See #17529",
        "On IE9, attach to document before setting the content, to avoid problem w/iframe running in",
        "wrong security context, see #16633.",
        "For other browsers, set src first, especially for IE6/7 where attaching first gives a warning on",
        "https:// about \"this page contains secure and insecure items, do you want to view both?\"",
        "Safari 4 and earlier sometimes act oddly",
        "So we have to set it again.",
        "TODO: this is a guess at the default line-height, kinda works",
        "static cache variables shared among all instance of this class",
        "summary:",
        "Generates the boilerplate text of the document inside the iframe (ie, `<html><head>...</head><body/></html>`).",
        "Editor content (if not blank) should be added afterwards.",
        "tags:",
        "private",
        "The contents inside of <body>.  The real contents are set later via a call to setValue().",
        "In auto-expand mode, need a wrapper div for AlwaysShowToolbar plugin to correctly",
        "expand/contract the editor as the content changes.",
        "line height is tricky - applying a units value will mess things up.",
        "if we can't get a non-units value, bail out.",
        "console.debug(lineHeight);",
        "If we can't get a non-units value, just default",
        "it to the CSS spec default of 'normal'.  Seems to",
        "work better, esp on IE, than '1.0'",
        "need to find any associated label element, aria-label, or aria-labelledby and update iframe document title",
        "Now that we have the title, also set it as the title attribute on the iframe",
        "remove extraneous vertical scrollbar on safari and firefox",
        "Set <body> to expand to full size of editor, so clicking anywhere will work.",
        "Except in auto-expand mode, in which case the editor expands to the size of <body>.",
        "Also determine how scrollers should be applied.  In autoexpand mode (height = \"\") no scrollers on y at all.",
        "But in fixed height mode we want both x/y scrollers.",
        "Scrollers go on <body> since it's been set to height: 100%.",
        "scroll bar is on #dijitEditorBody, shouldn't be on <html>",
        "TODO: left positioning will cause contents to disappear out of view",
        "if it gets too wide for the visible area",
        "Can't set min-height in IE>=9, it puts layout on li, which puts move/resize handles.",
        "Onload handler fills in real editor content.",
        "On IE9, sometimes onload is called twice, and the first time frameElement is null (test_FullScreen.html)",
        "String",
        "summary:",
        "apply the specified css files in styleSheets",
        "tags:",
        "private",
        "empty this.editingAreaStyleSheets here, as it will be filled in addStyleSheet",
        "dojo/_base/url",
        "summary:",
        "add an external stylesheet for the editing area",
        "uri:",
        "Url of the external css file",
        "if uri is relative, then convert it to absolute so that it can be resolved correctly in iframe",
        "console.debug(\"dijit/_editor/RichText.addStyleSheet(): Style sheet \"+url+\" is already applied\");",
        "IE",
        "other browser",
        "dojo/_base/url",
        "summary:",
        "remove an external stylesheet for the editing area",
        "if uri is relative, then convert it to absolute so that it can be resolved correctly in iframe",
        "console.debug(\"dijit/_editor/RichText.removeStyleSheet(): Style sheet \"+url+\" has not been applied\");",
        "disabled: Boolean",
        "The editor is disabled; the text cannot be changed.",
        "Boolean",
        "this method requires init to be complete",
        "guard in case widget destroyed before timeout",
        "Event handlers\n ****************",
        "String",
        "summary:",
        "Handler after the iframe finishes loading.",
        "html: String",
        "Editor contents should be set to this value",
        "tags:",
        "protected",
        "TODO: rename this to _onLoad, make empty public onLoad() method, deprecate/make protected onLoadDeferred handler?",
        "there's a wrapper div around the content, see _getIframeDocTxt().",
        "Helper code so IE and FF skip over focusing on the <iframe> and just focus on the inner <div>.",
        "See #4996 IE wants to focus the BODY tag.",
        "for InlineEditBox",
        "mouseup in the margin does not generate an onclick event",
        "IE contentEditable",
        "#4996 fix focus",
        "give the node Layout on IE",
        "TODO: this may no longer be needed, since we've reverted IE to using an iframe,",
        "not contentEditable.   Removing it would also probably remove the need for creating",
        "the extra <div> in _getIframeDocTxt()",
        "Clear the moveToStart focus, as mouse",
        "down will set cursor point.  Required to properly",
        "work with selection/position driven plugins and clicks in",
        "the window. refs: #10678",
        "WebKit sometimes doesn't fire right on selections, so the toolbar",
        "doesn't update right.  Therefore, help it out a bit with an additional",
        "listener.  A mouse up will typically indicate a display change, so fire this",
        "and get the toolbar to adapt.  Reference: #9532",
        "Since WebKit uses the inner DIV, we need to check and set position.",
        "See: #12024 as to why the change was made.",
        "Try to make sure 'hidden' elements aren't visible in edit mode (like browsers other than IE",
        "do).  See #9103",
        "squelch",
        "initialize content to editable (or not)",
        "Note that setValue() call will only work after isLoaded is set to true (above)",
        "Set up a function to allow delaying the setValue until a callback is fired",
        "This ensures extensions like dijit.Editor have a way to hold the value set",
        "until plugins load (and do things like register filters).",
        "after the document loads, then set focus after updateInterval expires so that",
        "onNormalizedDisplayChanged has run to avoid input caret issues",
        "Save off the initial content now",
        "Event",
        "summary:",
        "Handler for onkeydown event",
        "tags:",
        "protected",
        "we need this event at the moment to get the events from control keys",
        "such as the backspace. It might be possible to add this to Dojo, so that",
        "keyPress events can be emulated by the keyDown and keyUp detection.",
        "prevent tab from moving focus out of editor",
        "FIXME: this is a poor-man's indent/outdent. It would be",
        "better if it added 4 \"&nbsp;\" chars in an undoable way.",
        "Unfortunately pasteHTML does not prove to be undoable",
        "Make tab and shift-tab skip over the <iframe>, going from the nested <div> to the toolbar",
        "or next element after the editor",
        "focus the <iframe> so the browser will shift-tab away from it instead",
        "focus node after the <iframe> so the browser will tab away from it instead",
        "IE has a bug where if a non-text object is selected in the editor,",
        "hitting backspace would act as if the browser's back button was",
        "clicked instead of deleting the object. see #1069",
        "FIXME: get this from connect() instead!",
        "arrow keys",
        "Stop the event to prevent firefox from trapping the cursor when there is no scroll bar.",
        "===== e =====",
        "summary:",
        "Handler for onkeyup event",
        "tags:",
        "callback",
        "Boolean",
        "summary:",
        "Deprecated, use set('disabled', ...) instead.",
        "tags:",
        "deprecated",
        "String",
        "summary:",
        "Registers that attr(\"value\", foo) should call setValue(foo)",
        "Boolean",
        "try again after the editor is finished loading",
        "summary:",
        "Handle the various key events",
        "tags:",
        "protected",
        "treat meta- same as ctrl-, for benefit of mac users",
        "function call after the character has been inserted",
        "String",
        "Boolean",
        "Boolean",
        "Function",
        "summary:",
        "Add a handler for a keyboard shortcut",
        "description:",
        "The key argument should be in lowercase if it is a letter character",
        "tags:",
        "protected",
        "TODO: would be nice to make this a hash instead of an array for quick lookups",
        "summary:",
        "Handler for after the user has pressed a key, and the display has been updated.",
        "(Runs on a timer so that it runs after the display is updated)",
        "tags:",
        "private",
        "e",
        "can't pass in e",
        "Event",
        "summary:",
        "Handler for when the user clicks.",
        "tags:",
        "private",
        "console.info('onClick',this._tryDesignModeOn);",
        "summary:",
        "IE only to prevent 2 clicks to focus",
        "tags:",
        "protected",
        "summary:",
        "Called from focus manager when focus has moved away from this editor",
        "tags:",
        "protected",
        "Workaround IE problem when you blur the browser windows while an editor is focused: IE hangs",
        "when you focus editor #1, blur the browser window, and then click editor #0.  See #16939.",
        "Event",
        "summary:",
        "Called from focus manager when focus has moved into this editor",
        "tags:",
        "protected",
        "console.info('_onFocus')",
        "TODO: remove in 2.0",
        "summary:",
        "Remove focus from this instance.",
        "tags:",
        "deprecated",
        "summary:",
        "Move focus to this editor",
        "this calls focus() so return",
        "this.editNode.focus(); -> causes IE to scroll always (strict and quirks mode) to the top the Iframe",
        "if we fire the event manually and let the browser handle the focusing, the latest",
        "cursor position is focused like in FF",
        "createEventObject/fireEvent only in IE < 11",
        "Firefox and chrome",
        "_lastUpdate: 0,",
        "Event",
        "===== e =====",
        "summary:",
        "This event will be fired every time the display context",
        "changes and the result needs to be reflected in the UI.",
        "description:",
        "If you don't want to have update too often,",
        "onNormalizedDisplayChanged should be used instead",
        "tags:",
        "private",
        "var _t=new Date();",
        "Technically this should trigger a call to watch(\"value\", ...) registered handlers,",
        "but getValue() is too slow to call on every keystroke so we don't.",
        "summary:",
        "This event is fired every updateInterval ms or more",
        "description:",
        "If something needs to happen immediately after a",
        "user change, please use onDisplayChanged instead.",
        "tags:",
        "private",
        "===== newContent =====",
        "summary:",
        "This is fired if and only if the editor loses focus and",
        "the content is changed.",
        "String",
        "Anything?",
        "summary:",
        "Used as the advice function to map our",
        "normalized set of commands to those supported by the target",
        "browser.",
        "tags:",
        "private",
        "String",
        "summary:",
        "Tests whether a command is supported by the host. Clients",
        "SHOULD check whether a command is supported before attempting",
        "to use it, behaviour for unsupported commands is undefined.",
        "command:",
        "The command to test for",
        "tags:",
        "private",
        "memoizing version. See _queryCommandAvailable for computing version",
        "String",
        "summary:",
        "See queryCommandAvailable().",
        "tags:",
        "private",
        "Boolean return true if the command is supported, false otherwise",
        "String",
        "summary:",
        "Executes a command in the Rich Text area",
        "command:",
        "The command to execute",
        "argument:",
        "An optional argument to the command",
        "tags:",
        "protected",
        "focus() is required for IE to work",
        "In addition, focus() makes sure after the execution of",
        "the command, the editor receives the focus as expected",
        "put focus back in the iframe, unless focus has somehow been shifted out of the editor completely",
        "Check to see if we have any over-rides for commands, they will be functions on this",
        "widget of the form _commandImpl.  If we don't, fall through to the basic native",
        "exec command of the browser.",
        "String",
        "summary:",
        "Check whether a command is enabled or not.",
        "command:",
        "The command to execute",
        "tags:",
        "protected",
        "Check to see if we have any over-rides for commands, they will be functions on this",
        "widget of the form _commandEnabledImpl.  If we don't, fall through to the basic native",
        "command of the browser.",
        "summary:",
        "Check the state of a given command and returns true or false.",
        "tags:",
        "protected",
        "Squelch, occurs if editor is hidden on FF 3 (and maybe others.)",
        "summary:",
        "Check the value of a given command. This matters most for",
        "custom selections and complex values like font value setting.",
        "tags:",
        "protected",
        "Misc.",
        "summary:",
        "Run the named method of dijit/_editor/selection over the",
        "current editor instance's window, with the passed args.",
        "tags:",
        "private",
        "FIXME: this is a TON of code duplication. Why?",
        "summary:",
        "Place the cursor at the start of the editing area.",
        "tags:",
        "private",
        "see comments in placeCursorAtEnd",
        "TODO:  Is this branch even necessary?",
        "Collapse before childless tags.",
        "Collapse inside tags with children.",
        "summary:",
        "Place the cursor at the end of the editing area.",
        "tags:",
        "private",
        "In mozilla, if last child is not a text node, we have to use",
        "selectElementChildren on this.editNode.lastChild otherwise the",
        "cursor would be placed at the end of the closing tag of",
        "this.editNode.lastChild",
        "Boolean?",
        "summary:",
        "Return the current content of the editing area (post filters",
        "are applied).  Users should call get('value') instead.",
        "nonDestructive:",
        "defaults to false. Should the post-filtering be run over a copy",
        "of the live DOM? Most users should pass \"true\" here unless they",
        "mess up the editing session.",
        "tags:",
        "private",
        "summary:",
        "Hook to make attr(\"value\") work",
        "String",
        "summary:",
        "This function sets the content. No undo history is preserved.",
        "Users should use set('value', ...) instead.",
        "tags:",
        "deprecated",
        "TODO: remove this and getValue() for 2.0, and move code to _setValueAttr()",
        "try again after the editor is finished loading",
        "Use &nbsp; to avoid webkit problems where editor is disabled until the user clicks it",
        "&nbsp;",
        "String",
        "summary:",
        "This function set the content while trying to maintain the undo stack",
        "(now only works fine with Moz, this is identical to setValue in all",
        "other browsers)",
        "tags:",
        "protected",
        "Safari",
        "look ma! it's a totally f'd browser!",
        "Moz",
        "IE",
        "In IE, when the first element is not a text node, say",
        "an <a> tag, when replacing the content of the editing",
        "area, the <a> tag will be around all the content",
        "so for now, use setValue for IE too",
        "String",
        "summary:",
        "Filter the input before setting the content of the editing",
        "area. DOM pre-filtering may happen after this",
        "string-based filtering takes place but as of 1.2, this is not",
        "guaranteed for operations such as the inserthtml command.",
        "tags:",
        "private",
        "DomNode",
        "summary:",
        "filter the input's live DOM. All filter operations should be",
        "considered to be \"live\" and operating on the DOM that the user",
        "will be interacting with in their editing session.",
        "tags:",
        "private",
        "DomNode|DomNode[]|String?",
        "Boolean?",
        "summary:",
        "filter the output after getting the content of the editing area",
        "",
        "description:",
        "post-filtering allows plug-ins and users to specify any number",
        "of transforms over the editor's content, enabling many common",
        "use-cases such as transforming absolute to relative URLs (and",
        "vice-versa), ensuring conformance with a particular DTD, etc.",
        "The filters are registered in the contentDomPostFilters and",
        "contentPostFilters arrays. Each item in the",
        "contentDomPostFilters array is a function which takes a DOM",
        "Node or array of nodes as its only argument and returns the",
        "same. It is then passed down the chain for further filtering.",
        "The contentPostFilters array behaves the same way, except each",
        "member operates on strings. Together, the DOM and string-based",
        "filtering allow the full range of post-processing that should",
        "be necessaray to enable even the most agressive of post-editing",
        "conversions to take place.",
        "",
        "If nonDestructive is set to \"true\", the nodes are cloned before",
        "filtering proceeds to avoid potentially destructive transforms",
        "to the content which may still needed to be edited further.",
        "Once DOM filtering has taken place, the serialized version of",
        "the DOM which is passed is run through each of the",
        "contentPostFilters functions.",
        "",
        "dom:",
        "a node, set of nodes, which to filter using each of the current",
        "members of the contentDomPostFilters and contentPostFilters arrays.",
        "",
        "nonDestructive:",
        "defaults to \"false\". If true, ensures that filtering happens on",
        "a clone of the passed-in content and not the actual node",
        "itself.",
        "",
        "tags:",
        "private",
        "summary:",
        "Saves the content in an onunload event if the editor has not been closed",
        "tags:",
        "private",
        "String",
        "Boolean",
        "summary:",
        "Adds escape sequences for special characters in XML.",
        "Optionally skips escapes for single quotes",
        "tags:",
        "private",
        "string",
        "DomNode",
        "summary:",
        "Deprecated.   Use dijit/_editor/html::_getNodeHtml() instead.",
        "tags:",
        "deprecated",
        "String",
        "DomNode",
        "summary:",
        "Deprecated.   Use dijit/_editor/html::getChildrenHtml() instead.",
        "tags:",
        "deprecated",
        "Boolean?",
        "summary:",
        "Kills the editor and optionally writes back the modified contents to the",
        "element from which it originated.",
        "save:",
        "Whether or not to save the changes. If false, the changes are discarded.",
        "tags:",
        "private",
        "line height is squashed for iframes",
        "FIXME: why was this here? if(this.iframe){ this.domNode.style.lineHeight = null; }",
        "Cleaup of WebKit fix: #9532",
        "Guard against memory leaks on IE (see #9268)",
        "Note that this destroys the iframe",
        "String",
        "summary:",
        "Post filter to remove unwanted HTML attributes generated by mozilla",
        "tags:",
        "private",
        "String",
        "String",
        "summary:",
        "Post filter to remove unwanted HTML attributes generated by webkit",
        "tags:",
        "private",
        "For some reason copy/paste sometime adds extra meta tags for charset on",
        "webkit (chrome) on mac.They need to be removed.  See: #12007\"",
        "String",
        "String",
        "summary:",
        "Convert 'strong' and 'em' to 'b' and 'i'.",
        "description:",
        "Moz can not handle strong/em tags correctly, so to help",
        "mozilla and also to normalize output, convert them to 'b' and 'i'.",
        "",
        "Note the IE generates 'strong' and 'em' rather than 'b' and 'i'",
        "tags:",
        "private",
        "String",
        "String",
        "summary:",
        "Pre-filter to do fixing to href attributes on `<a>` and `<img>` tags",
        "tags:",
        "private",
        "String",
        "summary:",
        "Implementation to call to the native queryCommandEnabled of the browser.",
        "command:",
        "The command to check.",
        "tags:",
        "protected",
        "===== argument =====",
        "summary:",
        "This function implements the test for if the create link",
        "command should be enabled or not.",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "===== argument =====",
        "summary:",
        "This function implements the test for if the unlink",
        "command should be enabled or not.",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "===== argument =====",
        "summary:",
        "This function implements the test for if the inserttable",
        "command should be enabled or not.",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "===== argument =====",
        "summary:",
        "This function implements the test for if the cut",
        "command should be enabled or not.",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "WebKit deems clipboard activity as a security threat and natively would return false",
        "===== argument =====",
        "summary:",
        "This function implements the test for if the copy",
        "command should be enabled or not.",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "WebKit deems clipboard activity as a security threat and natively would return false",
        "===== argument =====",
        "summary:c",
        "This function implements the test for if the paste",
        "command should be enabled or not.",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "summary:",
        "This function implements the insertion of HTML 'HR' tags.",
        "into a point on the page.  IE doesn't to it right, so",
        "we have to use an alternate form",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "summary:",
        "This function implements the unlink of an 'a' tag.",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "summary:",
        "This function implements the hilitecolor command",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "mozilla doesn't support hilitecolor properly when useCSS is",
        "set to false (bugzilla #279330)",
        "summary:",
        "This function implements the backcolor command",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "Tested under IE 6 XP2, no problem here, comment out",
        "IE weirdly collapses ranges when we exec these commands, so prevent it",
        "var tr = this.document.selection.createRange();",
        "summary:",
        "This function implements the forecolor command",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "Tested under IE 6 XP2, no problem here, comment out",
        "IE weirdly collapses ranges when we exec these commands, so prevent it",
        "var tr = this.document.selection.createRange();",
        "summary:",
        "This function implements the insertion of HTML content into",
        "a point on the page.",
        "argument:",
        "The content to insert, if any.",
        "tags:",
        "protected",
        "mozilla can not inserthtml an empty html to delete current selection",
        "so we delete the selection instead in this case",
        "FIXME",
        "summary:",
        "This function implements an over-ride of the bold command.",
        "argument:",
        "Not used, operates by selection.",
        "tags:",
        "protected",
        "summary:",
        "This function implements an over-ride of the italic command.",
        "argument:",
        "Not used, operates by selection.",
        "tags:",
        "protected",
        "summary:",
        "This function implements an over-ride of the underline command.",
        "argument:",
        "Not used, operates by selection.",
        "tags:",
        "protected",
        "summary:",
        "This function implements an over-ride of the strikethrough command.",
        "argument:",
        "Not used, operates by selection.",
        "tags:",
        "protected",
        "summary:",
        "This function implements an over-ride of the superscript command.",
        "argument:",
        "Not used, operates by selection.",
        "tags:",
        "protected",
        "summary:",
        "This function implements an over-ride of the superscript command.",
        "argument:",
        "Not used, operates by selection.",
        "tags:",
        "protected",
        "summary:",
        "This function implements the fontname command",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "summary:",
        "This function implements the fontsize command",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "summary:",
        "This function implements the insertorderedlist command",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "summary:",
        "This function implements the insertunorderedlist command",
        "argument:",
        "arguments to the exec command, if any.",
        "tags:",
        "protected",
        "summary:",
        "A function for obtaining the height of the header node",
        "Number",
        "summary:",
        "A function for obtaining the height of the footer node",
        "Number",
        "summary:",
        "An internal function for computing the cumulative height of all child nodes of 'node'",
        "node:",
        "The node to process the children of;",
        "IE didn't compute it right when position was obtained on the node directly is some cases,",
        "so we have to walk over all the children manually.",
        "Number",
        "summary:",
        "Function to test if a node is devoid of real content.",
        "node:",
        "The node to check.",
        "tags:",
        "private.",
        "element",
        "huh?   why test just first child?",
        "text",
        "summary:",
        "Function to adjust selection range by removing the current",
        "start node.",
        "node:",
        "The node to remove from the starting range.",
        "range:",
        "The range to adapt.",
        "tags:",
        "private",
        "move up the tree until we find a parent that has another node, that node will be the next node",
        "summary:",
        "Function to adapt the IE range by removing leading 'newlines'",
        "Needed to fix issue with bold/italics/underline not working if",
        "range included leading 'newlines'.",
        "In IE, if a user starts a selection at the very end of a line,",
        "then the native browser commands will fail to execute correctly.",
        "To work around the issue,  we can remove all empty nodes from",
        "the start of the range selection.",
        "text",
        "traverse the text nodes until we get to the one that is actually highlighted",
        "Remove the starting ranges until the range does not start with an empty node.",
        "this will break the loop in case we can't find the next sibling",
        "move the start container to the next node in the range",
        "start at the beginning of the new starting range",
        "this will work as long as users cannot select multiple ranges. I have not been able to do that in the editor.",
        "summary:",
        "Function to handle IE's quirkiness regarding how it handles",
        "format commands on a word.  This involves a lit of node splitting",
        "and format cloning.",
        "command:",
        "The format command, needed to check if the desired",
        "command is true or not.",
        "We have to split backwards until we hit the format",
        "We are not looking from the right node, try to locate the correct one",
        "We have to walk back and see if this is still a format or not.",
        "Hm, how do I do this?",
        "Okay, we have a stopping place, time to split things apart.",
        "Okay, we know how far we have to split backwards, so we have to split now.",
        "Text node, we have to split it.",
        "We are not splitting the right node, try to locate the correct one",
        "Place the split, then remove original nodes.",
        "Okay, we split the text.  Now we need to see if we're",
        "parented to the block element we're splitting and if",
        "not, we have to split all the way up.  Ugh.",
        "Clone over any 'style' data.",
        "If font also need to clone over any font data.",
        "this check was necessary on IE",
        "Now move end node and every sibling",
        "after it over into the new tag.",
        "Lastly, move the split out all the split tags",
        "to the new block as they should now be split properly.",
        "Non-blank text and non-text nodes need to clear out that blank space",
        "before moving the contents.",
        "We had intermediate tags, we have to now recreate them inbetween the split",
        "and restore what styles, classnames, etc, we can.",
        "Okay, everything is theoretically split apart and removed from the content",
        "so insert the dummy text to select, select it, then",
        "clear to position cursor.",
        "No extra tags, so we have to insert a breaker point and rely",
        "on filters to remove it later.",
        "Empty, we don't need it.  Split was at end or similar",
        "So, remove it.",
        "Text node, we have to split it.",
        "We are not splitting the right node, try to locate the correct one",
        "Create a space, we'll select and bold it, so",
        "the whole word doesn't get bolded",
        "===== , argument =====",
        "summary:",
        "This function handles normalizing the IE list behavior as",
        "much as possible.",
        "command:",
        "The list command to execute.",
        "argument:",
        "Any additional argument.",
        "tags:",
        "private",
        "In the case of no selection, lets commonize the behavior and",
        "make sure that it indents if needed.",
        "text node.  Lets see if there is a node before it that isn't",
        "some sort of breaker.",
        "We're at the beginning of a text area.  It may have been br split",
        "Who knows?  In any event, we must create the list manually",
        "or IE may shove too much into the list element.  It seems to",
        "grab content before the text node too if it's br split.",
        "Why can't IE work like everyone else?",
        "Create a space, we'll select and bold it, so",
        "the whole word doesn't get bolded",
        "Move in the text node as part of the li.",
        "We need a br after it or the enter key handler",
        "sometimes throws errors.",
        "Okay, now lets move our cursor to the beginning.",
        "summary:",
        "This function handles appplying text color as best it is",
        "able to do so when the selection is collapsed, making the",
        "behavior cross-browser consistent. It also handles the name",
        "and size for IE.",
        "command:",
        "The command.",
        "argument:",
        "Any additional arguments.",
        "tags:",
        "private",
        "Text node, we have to split it.",
        "We are not splitting the right node, try to locate the correct one",
        "Create a space, we'll select and bold it, so",
        "the whole word doesn't get bolded",
        "Create a junk node to avoid it trying to style the breaker.",
        "This will get destroyed later.",
        "WebKit is frustrating with positioning the cursor.",
        "It stinks to have a selected space, but there really",
        "isn't much choice here.",
        "&nbsp;",
        "DomNode",
        "Int",
        "summary:",
        "In the case there are multiple text nodes in a row the offset may not be within the node.",
        "If the offset is larger than the node length, it will attempt to find",
        "the next text sibling until it locates the text node in which the offset refers to",
        "node:",
        "The node to check.",
        "offset:",
        "The position to find within the text node",
        "tags:",
        "private.",
        "Adjust the offset and node in the case of multiple text nodes in a row",
        "summary:",
        "Function to return the tab names that are associated",
        "with a particular style.",
        "command: String",
        "The command to return tags for.",
        "tags:",
        "private",
        "DOMNode",
        "summary:",
        "Function for stripping out the breaker spans inserted by the formatting command.",
        "Registered as a filter for IE, handles the breaker spans needed to fix up",
        "How bold/italic/etc, work when selection is collapsed (single cursor).",
        "this method requires init to be complete",
        "DOMNode",
        "summary:",
        "Function for stripping trailing nodes without any text, excluding trailing nodes",
        "like <img> or <div><img></div>, even though they don't have text either.",
        "If not for old IE we could check for Element children by node.firstElementChild",
        "text",
        "module:",
        "dojo/dnd/Moveable",
        "summary:",
        "an object, which makes a node movable",
        "object attributes (for markup)",
        "node: Node",
        "a node (or node's id) to be moved",
        "params: Moveable.__MoveableArgs?",
        "optional parameters",
        "cancel text selection and text dragging",
        "markup methods",
        "methods",
        "summary:",
        "stops watching for possible move, deletes all references, so the object can be garbage-collected",
        "mouse event processors",
        "summary:",
        "event processor for onmousedown/ontouchstart, creates a Mover for the node",
        "e: Event",
        "mouse/touch event",
        "summary:",
        "event processor for onmousemove/ontouchmove, used only for delayed drags",
        "e: Event",
        "mouse/touch event",
        "summary:",
        "event processor for onmouseup, used only for delayed drags",
        "e: Event",
        "mouse event",
        "summary:",
        "event processor for onselectevent and ondragevent",
        "e: Event",
        "mouse event",
        "local events",
        "Event",
        "summary:",
        "called when the drag is detected;",
        "responsible for creation of the mover",
        "Mover",
        "summary:",
        "called before every move operation",
        "Mover",
        "summary:",
        "called after every move operation",
        "===== mover, e =====",
        "summary:",
        "called during the very first move notification;",
        "can be used to initialize coordinates, can be overwritten.",
        "mover: Mover",
        "e: Event",
        "default implementation does nothing",
        "=====, e =====",
        "summary:",
        "called during every move notification;",
        "should actually move the node; can be overwritten.",
        "mover: Mover",
        "leftTop: Object",
        "e: Event",
        "===== mover, leftTop =====",
        "summary:",
        "called before every incremental move; can be overwritten.",
        "mover: Mover",
        "leftTop: Object",
        "default implementation does nothing",
        "===== mover, leftTop =====",
        "summary:",
        "called after every incremental move; can be overwritten.",
        "mover: Mover",
        "leftTop: Object",
        "default implementation does nothing",
        "=====\nMoveable.__MoveableArgs = declare([], {\n\t// handle: Node||String\n\t//\t\tA node (or node's id), which is used as a mouse handle.\n\t//\t\tIf omitted, the node itself is used as a handle.\n\thandle: null,\n\n\t// delay: Number\n\t//\t\tdelay move by this number of pixels\n\tdelay: 0,\n\n\t// skip: Boolean\n\t//\t\tskip move of form elements\n\tskip: false,\n\n\t// mover: Object\n\t//\t\ta constructor of custom Mover\n\tmover: dnd.Mover\n});\n=====",
        "declare",
        "domClass.replace",
        "event.stop",
        "keys",
        "lang.hitch",
        "exports methods to dijit global",
        "module:",
        "dijit/TooltipDialog",
        "summary:",
        "Pops up a dialog that appears like a Tooltip",
        "title: String",
        "Description of tooltip dialog (required for a11y)",
        "doLayout: [protected] Boolean",
        "Don't change this parameter from the default value.",
        "This ContentPane parameter doesn't make sense for TooltipDialog, since TooltipDialog",
        "is never a child of a layout container, nor can you specify the size of",
        "TooltipDialog in order to control the size of an inner widget.",
        "autofocus: Boolean",
        "A Toggle to modify the default focus behavior of a Dialog, which",
        "is to focus on the first dialog element after opening the dialog.",
        "False will disable autofocusing.  Default: true.",
        "baseClass: [protected] String",
        "The root className to use for the various states of this widget",
        "_firstFocusItem: [private readonly] DomNode",
        "The pointer to the first focusable node in the dialog.",
        "Set by `dijit/_DialogMixin._getFocusItems()`.",
        "_lastFocusItem: [private readonly] DomNode",
        "The pointer to which node has focus prior to our dialog.",
        "Set by `dijit/_DialogMixin._getFocusItems()`.",
        "String",
        "DomNode",
        "String",
        "String",
        "summary:",
        "Configure widget to be displayed in given position relative to the button.",
        "This is called from the dijit.popup code, and should not be called",
        "directly.",
        "tags:",
        "protected",
        "Note: intentionally not using dijitTooltip class since that sets position:absolute, which",
        "confuses dijit/popup trying to get the size of the tooltip.",
        "Tooltip.orient() has code to reposition connector for when Tooltip is before/after anchor.",
        "Not putting here to avoid code bloat, and since TooltipDialogs are generally above/below.",
        "Should combine code from Tooltip and TooltipDialog.",
        "summary:",
        "Focus on first field",
        "Object",
        "summary:",
        "Called when dialog is displayed.",
        "This is called from the dijit.popup code, and should not be called directly.",
        "tags:",
        "protected",
        "Position the tooltip connector for middle alignment.",
        "This could not have been done in orient() since the tooltip wasn't positioned at that time.",
        "lazy load trigger  (TODO: shouldn't we load before positioning?)",
        "summary:",
        "Called when dialog is hidden.",
        "This is called from the dijit.popup code, and should not be called directly.",
        "tags:",
        "protected",
        "Event",
        "summary:",
        "Handler for keyboard events",
        "description:",
        "Keep keyboard focus in dialog; close dialog on escape key",
        "tags:",
        "private",
        "Use defer to avoid crash on IE, see #10396.",
        "send focus to last item in dialog",
        "send focus to first item in dialog",
        "we want the browser's default tab handling to move focus",
        "but we don't want the tab to propagate upwards",
        "=====, \"../api/Store\" =====",
        "=====, Store =====",
        "module:",
        "dojo/store/util/SimpleQueryEngine",
        "summary:",
        "Simple query engine that matches using filter functions, named filter",
        "functions or objects by name-value on a query object hash",
        "",
        "description:",
        "The SimpleQueryEngine provides a way of getting a QueryResults through",
        "the use of a simple object hash as a filter.  The hash will be used to",
        "match properties on data objects with the corresponding value given. In",
        "other words, only exact matches will be returned.",
        "",
        "This function can be used as a template for more complex query engines;",
        "for example, an engine can be created that accepts an object hash that",
        "contains filtering functions, or a string that gets evaluated, etc.",
        "",
        "When creating a new dojo.store, simply set the store's queryEngine",
        "field as a reference to this function.",
        "",
        "query: Object",
        "An object hash with fields that may match fields of items in the store.",
        "Values in the hash will be compared by normal == operator, but regular expressions",
        "or any object that provides a test() method are also supported and can be",
        "used to match strings by more complex expressions",
        "(and then the regex's or object's test() method will be used to match values).",
        "",
        "options: dojo/store/api/Store.QueryOptions?",
        "An object that contains optional information such as sort, start, and count.",
        "",
        "returns: Function",
        "A function that caches the passed query under the field \"matches\".  See any",
        "of the \"query\" methods on dojo.stores.",
        "",
        "example:",
        "Define a store with a reference to this engine, and set up a query method.",
        "",
        "|\tvar myStore = function(options){",
        "|\t\t//\t...more properties here",
        "|\t\tthis.queryEngine = SimpleQueryEngine;",
        "|\t\t//\tdefine our query method",
        "|\t\tthis.query = function(query, options){",
        "|\t\t\treturn QueryResults(this.queryEngine(query, options)(this.data));",
        "|\t\t};",
        "|\t};",
        "create our matching query function",
        "an object can provide a test method, which makes it work with regex",
        "named query",
        "fall through",
        "fall through",
        "execute the whole query, first we filter",
        "next we sort",
        "valueOf enables proper comparison of dates",
        "now we paginate",
        "declare",
        "domConstruct.create",
        "lang.hitch",
        "win.body",
        "module:",
        "dijit/form/_ExpandingTextAreaMixin",
        "feature detection, true for mozilla and webkit",
        "note: if multiple documents exist, doesn't matter which one we use",
        "summary:",
        "Mixin for textarea widgets to add auto-expanding capability",
        "summary:",
        "Approximate the height when the textarea is invisible with the number of lines in the text.",
        "Fails when someone calls setValue with a long wrapping line, but the layout fixes itself when the user clicks inside so . . .",
        "In IE, the resize event is supposed to fire when the textarea becomes visible again and that will correct the size automatically.",
        "",
        "#rows = #newlines+1",
        "summary:",
        "Resizes the textarea vertically (should be called after a style/value change)",
        "rows can act like a minHeight if not cleared",
        "not too fast, not too slow",
        "maintain current height",
        "allow scrollHeight to change",
        "scrollHeight didn't shrink",
        "hidden content of unknown size",
        "declare",
        "dom.setSelectable",
        "domAttr.set",
        "domClass.toggle",
        "kernel.deprecated",
        "has(\"ie\")",
        "module:",
        "dijit/MenuItem",
        "summary:",
        "A line item in a Menu Widget",
        "Make 3 columns",
        "icon, label, and expand arrow (BiDi-dependent) indicating sub-menu",
        "label: String",
        "Menu text",
        "iconClass: String",
        "Class to apply to DOMNode to make it display an icon.",
        "accelKey: String",
        "Text for the accelerator (shortcut) key combination.",
        "Note that although Menu can display accelerator keys there",
        "is no infrastructure to actually catch and execute these",
        "accelerators.",
        "disabled: Boolean",
        "If true, the menu item is disabled.",
        "If false, the menu item is enabled.",
        "DomNode",
        "If button label is specified as srcNodeRef.innerHTML rather than",
        "this.params.label, handle it here.",
        "Event",
        "summary:",
        "User defined function to handle clicks",
        "tags:",
        "callback",
        "summary:",
        "Focus on this MenuItem",
        "needed for IE8 which won't scroll TR tags into view on focus yet calling scrollIntoView creates flicker (#10275)",
        "this throws on IE (at least) in some scenarios",
        "summary:",
        "This is called by the focus manager when focus",
        "goes to this MenuItem or a child menu.",
        "tags:",
        "protected",
        "summary:",
        "Indicate that this node is the currently selected one",
        "tags:",
        "private",
        "String",
        "summary:",
        "Deprecated.   Use set('label', ...) instead.",
        "tags:",
        "deprecated",
        "Boolean",
        "summary:",
        "Deprecated.   Use set('disabled', bool) instead.",
        "tags:",
        "deprecated",
        "Boolean",
        "summary:",
        "Hook for attr('disabled', ...) to work.",
        "Enable or disable this menu item.",
        "String",
        "summary:",
        "Hook for attr('accelKey', ...) to work.",
        "Set accelKey on this menu item.",
        "have to use colSpan to make it work in IE",
        "String",
        "summary:",
        "Setter for textDir.",
        "description:",
        "Users shouldn't call this function; they should be calling",
        "set('textDir', value)",
        "tags:",
        "private",
        "only if new textDir is different from the old one",
        "and on widgets creation.",
        "declare",
        "module:",
        "dijit/MenuBarItem",
        "Map widget attributes to DOMNode attributes.",
        "cancel MenuItem setter because we don't have a place for an icon",
        "summary:",
        "Item in a MenuBar that's clickable, and doesn't spawn a submenu when pressed (or hovered)",
        "dojox.mobile is accessing this",
        "declare",
        "dom.setSelectable",
        "domAttr.attr",
        "domClass.toggle",
        "i18n.getLocalization",
        "lang.hitch lang.trim",
        "module:",
        "dijit/layout/TabController",
        "summary:",
        "A tab (the thing you click to select a pane).",
        "description:",
        "Contains the title of the pane, and optionally a close-button to destroy the pane.",
        "This is an internal widget and should not be instantiated directly.",
        "tags:",
        "private",
        "baseClass: String",
        "The CSS class applied to the domNode.",
        "Apply dijitTabCloseButtonHover when close button is hovered",
        "Override _FormWidget.scrollOnFocus.",
        "Don't scroll the whole tab container into view when the button is focused.",
        "Required to give IE6 a kick, as it initially hides the",
        "tabs until they are focused on.",
        "Boolean",
        "summary:",
        "Hide/show close button",
        "Boolean",
        "summary:",
        "Make tab selected/unselectable",
        "Don't show tooltip for close button when tab is disabled",
        "String",
        "summary:",
        "Hook for set('label', ...) to work.",
        "description:",
        "takes an HTML string.",
        "Inherited ToggleButton implementation will Set the label (text) of the button;",
        "Need to set the alt attribute of icon on tab buttons if no label displayed",
        "summary:",
        "Set of tabs (the things with titles and a close button, that you click to show a tab panel).",
        "Used internally by `dijit/layout/TabContainer`.",
        "description:",
        "Lets the user select the currently shown pane in a TabContainer or StackContainer.",
        "TabController also monitors the TabContainer, and whenever a pane is",
        "added or deleted updates itself accordingly.",
        "tags:",
        "private",
        "tabPosition: String",
        "Defines where tabs go relative to the content.",
        "\"top\", \"bottom\", \"left-h\", \"right-h\"",
        "buttonWidget: Constructor",
        "The tab widget to create to correspond to each page",
        "buttonWidgetCloseClass: String",
        "Class of [x] close icon, used by event delegation code to tell when close button was clicked",
        "Setup a close menu to be shared between all the closable tabs (excluding disabled tabs)",
        "for monkey patching",
        "module:",
        "dojo/cldr/supplemental",
        "summary:",
        "TODOC",
        "String?",
        "summary:",
        "Returns a zero-based index for first day of the week",
        "description:",
        "Returns a zero-based index for first day of the week, as used by the local (Gregorian) calendar.",
        "e.g. Sunday (returns 0), or Monday (returns 1)",
        "from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/weekData/firstDay",
        "default is 1=Monday",
        "Number",
        "String?",
        "IE often gives language only (#2269)",
        "Arbitrary mappings of language-only locales to a country:",
        "The ISO 3166 country code is usually in the second position, unless a",
        "4-letter script is given. See http://www.ietf.org/rfc/rfc4646.txt",
        "String?",
        "summary:",
        "Returns a hash containing the start and end days of the weekend",
        "description:",
        "Returns a hash containing the start and end days of the weekend according to local custom using locale,",
        "or by default in the user's locale.",
        "e.g. {start:6, end:0}",
        "from http://www.unicode.org/cldr/data/common/supplemental/supplementalData.xml:supplementalData/weekData/weekend{Start,End}",
        "default is 6=Saturday",
        "default is 0=Sunday",
        "Object {start,end}",
        "declare",
        "event.stop",
        "keys.DOWN_ARROW",
        "module:",
        "dijit/MenuBar",
        "summary:",
        "A menu bar, listing menu choices horizontally, like the \"File\" menu in most desktop applications",
        "_isMenuBar: [protected] Boolean",
        "This is a MenuBar widget, not a (vertical) Menu widget.",
        "parameter to dijit.popup.open() about where to put popup (relative to this.domNode)",
        "Event",
        "summary:",
        "This handles the down arrow key, opening a submenu if one exists.",
        "Unlike _MenuBase._moveToPopup(), will never move to the next item in the MenuBar.",
        "tags:",
        "private",
        "overload focusChild so that whenever the focus is moved to a new item,",
        "check the previous focused whether it has its popup open, if so, after",
        "focusing the new item, open its submenu immediately",
        "TODO: on down arrow, _openPopup() is called here and in onItemClick()",
        "Event",
        "summary:",
        "Handle keyboard based menu navigation.",
        "tags:",
        "protected",
        "dijit/_WidgetBase",
        "Event",
        "summary:",
        "Handle clicks on an item.   Also called by _moveToPopup() due to a down-arrow key on the item.",
        "Cancels a dropdown if already open and click is either mouse or space/enter.",
        "Don't close dropdown due to down arrow.",
        "tags:",
        "private",
        "declare",
        "dom.setSelectable",
        "module:",
        "dijit/ToolbarSeparator",
        "summary:",
        "A spacer between two `dijit.Toolbar` items",
        "summary:",
        "This widget isn't focusable, so pass along that fact.",
        "tags:",
        "protected",
        "array.forEach array.indexOf array.map",
        "declare",
        "event.stop",
        "keys",
        "lang.getObject",
        "focus.focus()",
        "registry.byId",
        "module:",
        "dijit/layout/StackController",
        "summary:",
        "Internal widget used by StackContainer.",
        "description:",
        "The button-like or tab-like object you click to select or delete a page",
        "tags:",
        "private",
        "Override _FormWidget.tabIndex.",
        "StackContainer buttons are not in the tab order by default.",
        "Probably we should be calling this.startupKeyNavChildren() instead.",
        "closeButton: Boolean",
        "When true, display close button for this tab",
        "Event",
        "summary:",
        "Set of buttons to select a page in a `dijit/layout/StackContainer`",
        "description:",
        "Monitors the specified StackContainer, and whenever a page is",
        "added, deleted, or selected, updates itself accordingly.",
        "containerId: [const] String",
        "The id of the page container that I point to",
        "buttonWidget: [const] Constructor",
        "The button widget to create to correspond to each page",
        "buttonWidgetCloseClass: String",
        "CSS class of [x] close icon, used by event delegation code to tell when close button was clicked",
        "===== , srcNodeRef =====",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Hash of initialization parameters for widget, including scalar values (like title, duration etc.)",
        "and functions, typically callbacks like onClick.",
        "The hash can contain any of the widget's properties, excluding read-only properties.",
        "srcNodeRef: DOMNode|String?",
        "If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree",
        "mapping from pane id to buttons",
        "Listen to notifications from StackContainer.",
        "TODO: do this through bubbled events instead of topics",
        "Listen for click events to select or close tabs.",
        "No need to worry about ENTER/SPACE key handling: tabs are selected via left/right arrow keys,",
        "and closed via shift-F10 (to show the close menu).",
        "Object",
        "summary:",
        "Called after StackContainer has finished initializing",
        "tags:",
        "private",
        "Show button corresponding to selected pane (unless selected",
        "is null because there are no panes)",
        "Reflect events like page title changes to tab buttons",
        "Since the buttons are internal to the StackController widget, destroy() should remove them, which is",
        "done by calling onRemoveChild().",
        "TODO: destroyRecursive() will call destroy() on each child button twice.   Once from the above code,",
        "and once because _WidgetBase.destroyDescendants() deletes anything inside of this.containerNode.",
        "Probably shouldn't attach that DOMNode as this.containerNode.",
        "dijit/_WidgetBase",
        "Integer?",
        "summary:",
        "Called whenever a page is added to the container.",
        "Create button corresponding to the page.",
        "tags:",
        "private",
        "create an instance of the button widget",
        "(remove typeof buttonWidget == string support in 2.0)",
        "this value might be overwritten if two tabs point to same container",
        "If this is the first child then StackContainer will soon publish that it's selected,",
        "but before that StackContainer calls layout(), and before layout() is called the",
        "StackController needs to have the proper height... which means that the button needs",
        "to be marked as selected now.   See test_TabContainer_CSS.html for test.",
        "dijit/_WidgetBase",
        "summary:",
        "Called whenever a page is removed from the container.",
        "Remove the button corresponding to the page.",
        "tags:",
        "private",
        "dijit/_WidgetBase",
        "summary:",
        "Called when a page has been selected in the StackContainer, either by me or by another StackController",
        "tags:",
        "private",
        "dijit/_WidgetBase",
        "summary:",
        "Called whenever one of my child buttons is pressed in an attempt to select a page",
        "tags:",
        "private",
        "For TabContainer where the tabs are <span>, need to set focus explicitly when left/right arrow",
        "In case the user clicked the checked button, keep it in the checked state because it remains to be the selected stack page.",
        "dijit/_WidgetBase",
        "summary:",
        "Called whenever one of my child buttons [X] is pressed in an attempt to close a page",
        "tags:",
        "private",
        "TODO: this is a bit redundant with forward, back api in StackContainer",
        "Boolean",
        "summary:",
        "Helper for onkeypress to find next/previous button",
        "tags:",
        "private",
        "find currently focused button in children array",
        "Pick next/previous non-disabled button to focus on.   If we get back to the original button it means",
        "that all buttons must be disabled, so return current child to avoid an infinite loop.",
        "dijit/_WidgetBase",
        "Event",
        "summary:",
        "Handle keystrokes on the page list, for advancing to next/previous button",
        "and closing the current page if the page is closable.",
        "tags:",
        "private",
        "Navigate to first non-disabled child",
        "Navigate to last non-disabled child",
        "avoid browser tab closing.",
        "handle next/previous page navigation (left/right arrow, etc.)",
        "Object",
        "summary:",
        "Called when there was a keypress on the container",
        "tags:",
        "private",
        "for monkey patching",
        "module:",
        "dojo/dnd/Mover",
        "summary:",
        "an object which makes a node follow the mouse, or touch-drag on touch devices.",
        "Used as a default mover, and as a base class for custom movers.",
        "node: Node",
        "a node (or node's id) to be moved",
        "e: Event",
        "a mouse event, which started the move;",
        "only pageX and pageY properties are used",
        "host: Object?",
        "object which implements the functionality of the move,",
        "and defines proper events (onMoveStart and onMoveStop)",
        "At the start of a drag, onFirstMove is called, and then the following",
        "listener is disconnected.",
        "These are called continually during the drag",
        "And these are called at the end of the drag",
        "cancel text selection and text dragging",
        "Tell autoscroll that a drag is starting",
        "notify that the move has started",
        "mouse event processors",
        "summary:",
        "event processor for onmousemove/ontouchmove",
        "e: Event",
        "mouse/touch event",
        "TODO Should condition be met for touch devices, too?",
        "utilities",
        "summary:",
        "makes the node absolute; it is meant to be called only once.",
        "relative and absolutely positioned nodes are assumed to use pixel units",
        "assume that left and top values are in pixels already",
        "enforcing the absolute mode",
        "event.pageX/pageY (which we used to generate the initial",
        "margin box) includes padding and margin set on the body.",
        "However, setting the node's position to absolute and then",
        "doing domGeom.marginBox on it *doesn't* take that additional",
        "space into account - so we need to subtract the combined",
        "padding and margin.  We use getComputedStyle and",
        "_getMarginBox/_getContentBox to avoid the extra lookup of",
        "the computed style.",
        "Disconnect touch.move that call this function",
        "summary:",
        "stops the move, deletes all references, so the object can be garbage-collected",
        "undo global settings",
        "destroy objects",
        "declare",
        "module:",
        "dijit/form/HorizontalRule",
        "summary:",
        "Hash marks for `dijit/form/HorizontalSlider`",
        "count: Integer",
        "Number of hash marks to generate",
        "container: String",
        "For HorizontalSlider, this is either \"topDecoration\" or \"bottomDecoration\",",
        "and indicates whether this rule goes above or below the slider.",
        "ruleStyle: String",
        "CSS style to apply to individual hash marks",
        "_isHorizontal: [protected extension] Boolean",
        "VerticalRule will override this...",
        "lang.getObject",
        "declare",
        "module:",
        "dijit/layout/TabContainer",
        "summary:",
        "A Container with tabs to select each child (only one of which is displayed at a time).",
        "description:",
        "A TabContainer is a container that has multiple panes, but shows only",
        "one pane at a time.  There are a set of tabs corresponding to each pane,",
        "where each tab has the name (aka title) of the pane, and optionally a close button.",
        "",
        "See `StackContainer.ChildWidgetProperties` for details on the properties that can be set on",
        "children of a `TabContainer`.",
        "useMenu: [const] Boolean",
        "True if a menu should be used to select tabs when they are too",
        "wide to fit the TabContainer, false otherwise.",
        "useSlider: [const] Boolean",
        "True if a slider should be used to select tabs when they are too",
        "wide to fit the TabContainer, false otherwise.",
        "controllerWidget: Class",
        "An optional parameter to override the widget used to display the tab labels",
        "DomNode",
        "summary:",
        "Instantiate tablist controller widget and return reference to it.",
        "Callback from _TabContainerBase.postCreate().",
        "tags:",
        "protected extension",
        "\"string\" branch for back-compat, remove for 2.0",
        "Scrolling controller only works for horizontal non-nested tabs",
        "declare",
        "event.stop",
        "keys keys.DOWN_ARROW keys.PAGE_DOWN keys.PAGE_UP keys.UP_ARROW",
        "lang.hitch",
        "has(\"mozilla\")",
        "mouse.wheel",
        "selectInputText",
        "module:",
        "dijit/form/_Spinner",
        "summary:",
        "Mixin for validation widgets with a spinner.",
        "description:",
        "This class basically (conceptually) extends `dijit/form/ValidationTextBox`.",
        "It modifies the template to have up/down arrows, and provides related handling code.",
        "defaultTimeout: Number",
        "Number of milliseconds before a held arrow key or up/down button becomes typematic",
        "minimumTimeout: Number",
        "minimum number of milliseconds that typematic event fires when held key or button is held",
        "timeoutChangeRate: Number",
        "Fraction of time used to change the typematic timer between events.",
        "1.0 means that each typematic event fires at defaultTimeout intervals.",
        "Less than 1.0 means that each typematic event fires at an increasing faster rate.",
        "smallDelta: Number",
        "Adjust the value by this much when spinning using the arrow keys/buttons",
        "largeDelta: Number",
        "Adjust the value by this much when spinning using the PgUp/Dn keys",
        "Set classes like dijitUpArrowButtonHover or dijitDownArrowButtonActive depending on",
        "mouse action over specified node",
        "=====, delta =====",
        "summary:",
        "Overridable function used to adjust a primitive value(Number/Date/...) by the delta amount specified.",
        "The val is adjusted in a way that makes sense to the object type.",
        "val: Object",
        "delta: Number",
        "tags:",
        "protected extension",
        "Node",
        "Number",
        "Number",
        "summary:",
        "Handler for arrow button or arrow key being pressed",
        "Node",
        "===== node =====",
        "summary:",
        "Handler for arrow button or arrow key being released",
        "Number",
        "DOMNode",
        "Event",
        "Event",
        "summary:",
        "Mouse wheel listener where supported",
        "FIXME: Safari bubbles",
        "be nice to DOH and scroll as much as the event says to",
        "If not an int multiple of 120, then its touchpad scrolling.",
        "This can change very fast so just assume 1 wheel click to make it more manageable.",
        "Object",
        "not set when called from postMixInProperties",
        "Number",
        "Boolean?",
        "summary:",
        "Hook so set('value', ...) works.",
        "extra listeners",
        "declare",
        "domClass.toggle",
        "has(\"dijit-legacy-requires\")",
        "kernel.deprecated",
        "lang.trim",
        "module:",
        "dijit/form/Button",
        "Back compat w/1.6, remove for 2.0",
        "use indirection so modules not rolled into a build",
        "summary:",
        "Basically the same thing as a normal HTML button, but with special styling.",
        "description:",
        "Buttons can display a label, an icon, or both.",
        "A label should always be specified (through innerHTML) or the label",
        "attribute.  It can be hidden via showLabel=false.",
        "example:",
        "|\t<button data-dojo-type=\"dijit/form/Button\" onClick=\"...\">Hello world</button>",
        "",
        "example:",
        "|\tvar button1 = new Button({label: \"hello world\", onClick: foo});",
        "|\tdojo.body().appendChild(button1.domNode);",
        "showLabel: Boolean",
        "Set this to true to hide the label text and display only the icon.",
        "(If showLabel=false then iconClass must be specified.)",
        "Especially useful for toolbars.",
        "If showLabel=true, the label will become the title (a.k.a. tooltip/hint) of the icon.",
        "",
        "The exception case is for computers in high-contrast mode, where the label",
        "will still be displayed, since the icon doesn't appear.",
        "iconClass: String",
        "Class to apply to DOMNode in button to make it display an icon",
        "Map widget attributes to DOMNode attributes.",
        "Event",
        "summary:",
        "Internal function to handle click actions",
        "cancel BUTTON click and continue with hidden INPUT click",
        "avoid two events bubbling from Button widget",
        "leave ok = true so that subclasses can do what they need to do",
        "DomNode",
        "Overrides _Templated._fillContent().",
        "If button label is specified as srcNodeRef.innerHTML rather than",
        "this.params.label, handle it here.",
        "TODO: remove the method in 2.0, parser will do it all for me",
        "_applyAttributes will be called after buildRendering completes to update the DOM",
        "String",
        "summary:",
        "Deprecated.  Use set('label', ...) instead.",
        "String",
        "summary:",
        "Hook for set('label', ...) to work.",
        "description:",
        "Set the label (text) of the button; takes an HTML string.",
        "If the label is hidden (showLabel=false) then and no title has",
        "been specified, then label is also set as title attribute of icon.",
        "module:",
        "dojo/dnd/move",
        "=====\nvar __constrainedMoveableArgs = declare([Moveable.__MoveableArgs], {\n\t// constraints: Function\n\t//\t\tCalculates a constraint box.\n\t//\t\tIt is called in a context of the moveable object.\n\tconstraints: function(){},\n\n\t// within: Boolean\n\t//\t\trestrict move within boundaries.\n\twithin: false\n});\n=====",
        "object attributes (for markup)",
        "summary:",
        "an object that makes a node moveable",
        "node: Node",
        "a node (or node's id) to be moved",
        "params: __constrainedMoveableArgs?",
        "an optional object with additional parameters;",
        "the rest is passed to the base class",
        "Mover",
        "summary:",
        "called during the very first move notification;",
        "can be used to initialize coordinates, can be overwritten.",
        "Mover",
        "Object",
        "summary:",
        "called during every move notification;",
        "should actually move the node; can be overwritten.",
        "=====\nvar __boxConstrainedMoveableArgs = declare([__constrainedMoveableArgs], {\n\t// box: Object\n\t//\t\ta constraint box\n\tbox: {}\n});\n=====",
        "box:",
        "object attributes (for markup)",
        "summary:",
        "an object, which makes a node moveable",
        "node: Node",
        "a node (or node's id) to be moved",
        "params: __boxConstrainedMoveableArgs?",
        "an optional object with parameters",
        "=====\nvar __parentConstrainedMoveableArgs = declare( [__constrainedMoveableArgs], {\n\t// area: String\n\t//\t\tA parent's area to restrict the move.\n\t//\t\tCan be \"margin\", \"border\", \"padding\", or \"content\".\n\tarea: \"\"\n});\n=====",
        "area:",
        "object attributes (for markup)",
        "summary:",
        "an object, which makes a node moveable",
        "node: Node",
        "a node (or node's id) to be moved",
        "params: __parentConstrainedMoveableArgs?",
        "an optional object with parameters",
        "Object",
        "Object",
        "Object",
        "Object",
        "summary:",
        "TODOC",
        "marginBox2contextBox, layoutChildren",
        "declare",
        "domClass.add",
        "domGeometry.contentBox",
        "domStyle.style",
        "module:",
        "dijit/layout/_TabContainerBase",
        "summary:",
        "Abstract base class for TabContainer.   Must define _makeController() to instantiate",
        "and return the widget that displays the tab labels",
        "description:",
        "A TabContainer is a container that has multiple panes, but shows only",
        "one pane at a time.  There are a set of tabs corresponding to each pane,",
        "where each tab has the name (aka title) of the pane, and optionally a close button.",
        "tabPosition: String",
        "Defines where tabs go relative to tab content.",
        "\"top\", \"bottom\", \"left-h\", \"right-h\"",
        "tabStrip: [const] Boolean",
        "Defines whether the tablist gets an extra class for layouting, putting a border/shading",
        "around the set of tabs.   Not supported by claro theme.",
        "nested: [const] Boolean",
        "If true, use styling for a TabContainer nested inside another TabContainer.",
        "For tundra etc., makes tabs look like links, and hides the outer",
        "border since the outer TabContainer already has a border.",
        "set class name according to tab position, ex: dijitTabContainerTop",
        "Create the tab list that will have a tab (a.k.a. tab button) for each tab panel",
        "workaround IE's lack of support for \"a > b\" selectors by\n\t\t\t * tagging each node in the template.",
        "dijit/_WidgetBase",
        "Overrides StackContainer._setupChild().",
        "wire up the tablist and its tabs",
        "Overrides StackContainer.layout().",
        "Configure the content pane to take up all the space except for where the tabs are",
        "position and size the titles and the container node",
        "Compute size to make each of my children.",
        "children[2] is the margin-box size of this.containerNode, set by layoutChildren() call above",
        "just layout the tab controller, so it can position left/right buttons etc.",
        "make the tabs zero width so that they don't interfere with width calc, then reset",
        "and call resize() on the selected pane just to tell it that it's been made visible",
        "declare",
        "domAttr.set",
        "event.stop",
        "kernel.deprecated",
        "has(\"ie\")",
        "module:",
        "dijit/form/Form",
        "summary:",
        "Widget corresponding to HTML form tag, for validation and serialization",
        "",
        "example:",
        "|\t<form data-dojo-type=\"dijit/form/Form\" id=\"myForm\">",
        "|\t\tName: <input type=\"text\" name=\"name\" />",
        "|\t</form>",
        "|\tmyObj = {name: \"John Doe\"};",
        "|\tdijit.byId('myForm').set('value', myObj);",
        "|",
        "|\tmyObj=dijit.byId('myForm').get('value');",
        "HTML <FORM> attributes",
        "name: String?",
        "Name of form for scripting.",
        "action: String?",
        "Server-side form handler.",
        "method: String?",
        "HTTP method used to submit the form, either \"GET\" or \"POST\".",
        "encType: String?",
        "Encoding type for the form, ex: application/x-www-form-urlencoded.",
        "accept-charset: String?",
        "List of supported charsets.",
        "accept: String?",
        "List of MIME types for file upload.",
        "target: String?",
        "Target frame for the document to be opened in.",
        "Setup name=foo string to be referenced from the template (but only if a name has been specified)",
        "Unfortunately we can't use _setNameAttr to set the name due to IE limitations, see #8660",
        "Object",
        "===== formContents =====",
        "summary:",
        "Deprecated: use submit()",
        "tags:",
        "deprecated",
        "summary:",
        "Deprecated: use onSubmit()",
        "tags:",
        "deprecated",
        "String",
        "Event?",
        "summary:",
        "restores all widget values back to their init values,",
        "calls onReset() which can cancel the reset by returning false",
        "create fake event so we can know if preventDefault() is called",
        "the IE way",
        "not IE",
        "if return value is not exactly false, and haven't called preventDefault(), then reset",
        "Event?",
        "===== e =====",
        "summary:",
        "Callback when user resets the form. This method is intended",
        "to be over-ridden. When the `reset` method is called",
        "programmatically, the return value from `onReset` is used",
        "to compute whether or not resetting should proceed",
        "tags:",
        "callback",
        "Boolean",
        "TODO: remove this if statement beginning with 2.0",
        "only exactly false stops submit",
        "Event?",
        "===== e =====",
        "summary:",
        "Callback when user submits the form.",
        "description:",
        "This method is intended to be over-ridden, but by default it checks and",
        "returns the validity of form elements. When the `submit`",
        "method is called programmatically, the return value from",
        "`onSubmit` is used to compute whether or not submission",
        "should proceed",
        "tags:",
        "extension",
        "Boolean",
        "summary:",
        "programmatically submit form if and only if the `onSubmit` returns true",
        "=====, \"./api/Store\" =====",
        "=====, Store =====",
        "module:",
        "dojo/store/Memory",
        "No base class, but for purposes of documentation, the base class is dojo/store/api/Store",
        "===== base = Store; =====",
        "summary:",
        "This is a basic in-memory object store. It implements dojo/store/api/Store.",
        "summary:",
        "Creates a memory object store.",
        "options: dojo/store/Memory",
        "This provides any configuration information that will be mixed into the store.",
        "This should generally include the data property to provide the starting set of data.",
        "data: Array",
        "The array of all the objects in the memory store",
        "idProperty: String",
        "Indicates the property to use as the identity property. The values of this",
        "property should be unique.",
        "index: Object",
        "An index of data indices into the data array by id",
        "queryEngine: Function",
        "Defines the query engine to use for querying the data store",
        "summary:",
        "Retrieves an object by its identity",
        "id: Number",
        "The identity to use to lookup the object",
        "returns: Object",
        "The object in the store that matches the given id.",
        "summary:",
        "Returns an object's identity",
        "object: Object",
        "The object to get the identity from",
        "returns: Number",
        "summary:",
        "Stores an object",
        "object: Object",
        "The object to store.",
        "options: dojo/store/api/Store.PutDirectives?",
        "Additional metadata for storing the data.  Includes an \"id\"",
        "property if a specific id is to be used.",
        "returns: Number",
        "object exists",
        "replace the entry in data",
        "add the new object",
        "summary:",
        "Creates an object, throws an error if the object already exists",
        "object: Object",
        "The object to store.",
        "options: dojo/store/api/Store.PutDirectives?",
        "Additional metadata for storing the data.  Includes an \"id\"",
        "property if a specific id is to be used.",
        "returns: Number",
        "call put with overwrite being false",
        "summary:",
        "Deletes an object by its identity",
        "id: Number",
        "The identity to use to delete the object",
        "returns: Boolean",
        "Returns true if an object was removed, falsy (undefined) if no object matched the id",
        "now we have to reindex",
        "summary:",
        "Queries the store for objects.",
        "query: Object",
        "The query to use for retrieving objects from the store.",
        "options: dojo/store/api/Store.QueryOptions?",
        "The optional arguments to apply to the resultset.",
        "returns: dojo/store/api/Store.QueryResults",
        "The results of the query, extended with iterative methods.",
        "",
        "example:",
        "Given the following store:",
        "",
        "|\tvar store = new Memory({",
        "|\t\tdata: [",
        "|\t\t\t{id: 1, name: \"one\", prime: false },",
        "|\t\t\t{id: 2, name: \"two\", even: true, prime: true},",
        "|\t\t\t{id: 3, name: \"three\", prime: true},",
        "|\t\t\t{id: 4, name: \"four\", even: true, prime: false},",
        "|\t\t\t{id: 5, name: \"five\", prime: true}",
        "|\t\t]",
        "|\t});",
        "",
        "...find all items where \"prime\" is true:",
        "",
        "|\tvar results = store.query({ prime: true });",
        "",
        "...or find all items where \"even\" is true:",
        "",
        "|\tvar results = store.query({ even: true });",
        "summary:",
        "Sets the given data as the source for this store, and indexes it",
        "data: Object[]",
        "An array of objects to use as the source of data.",
        "just for convenience with the data format IFRS expects",
        "array.forEach",
        "declare",
        "Deferred",
        "i18n.getLocalization",
        "domAttr.set",
        "domClass.add",
        "domStyle.set, get",
        "event.stop",
        "keys.F1 keys.F15 keys.TAB",
        "lang.getObject lang.hitch",
        "has(\"ie\") has(\"mac\") has(\"webkit\")",
        "string.substitute",
        "topic.publish()",
        "win.withGlobal",
        "dijit.getBookmark()",
        "dijit._scopeName",
        "module:",
        "dijit/Editor",
        "summary:",
        "A rich text Editing widget",
        "",
        "description:",
        "This widget provides basic WYSIWYG editing features, based on the browser's",
        "underlying rich text editing capability, accompanied by a toolbar (`dijit.Toolbar`).",
        "A plugin model is available to extend the editor's capabilities as well as the",
        "the options available in the toolbar.  Content generation may vary across",
        "browsers, and clipboard operations may have different results, to name",
        "a few limitations.  Note: this widget should not be used with the HTML",
        "&lt;TEXTAREA&gt; tag -- see dijit/_editor/RichText for details.",
        "plugins: [const] Object[]",
        "A list of plugin names (as strings) or instances (as objects)",
        "for this widget.",
        "",
        "When declared in markup, it might look like:",
        "|\tplugins=\"['bold',{name:'dijit._editor.plugins.FontChoice', command:'fontName', generic:true}]\"",
        "extraPlugins: [const] Object[]",
        "A list of extra plugin names which will be appended to plugins array",
        "===== params, srcNodeRef =====",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Initial settings for any of the attributes, except readonly attributes.",
        "srcNodeRef: DOMNode",
        "The editor replaces the specified DOMNode.",
        ", \"createLink\"",
        "IE will always lose focus when other element gets focus, while for FF and safari,",
        "when no iframe is used, focus will be lost whenever another element gets focus.",
        "For IE, we can connect to onBeforeDeactivate, which will be called right before",
        "the focus is lost, so we can obtain the selected range. For other browsers,",
        "no equivalent of onBeforeDeactivate, so we need to do two things to make sure",
        "selection is properly saved before focus is lost: 1) when user clicks another",
        "element in the page, in which case we listen to mousedown on the entire page and",
        "see whether user clicks out of a focus editor, if so, save selection (focus will",
        "only lost after onmousedown event is fired, so we can obtain correct caret pos.)",
        "2) when user tabs away from the editor, which is handled in onKeyDown below.",
        "summary:",
        "Extension to make sure a deferred is in place before certain functions",
        "execute, like making sure all the plugins are properly inserted.",
        "Set up a deferred so that the value isn't applied to the editor",
        "until all the plugins load, needed to avoid timing condition",
        "reported in #10537.",
        "for custom undo/redo, if enabled.",
        "if we haven't been assigned a toolbar, create one",
        "Okay, denote the value can now be set.",
        "Disable selecting the entire editor by inadvertent double-clicks.",
        "on buttons, title bar, etc.  Otherwise clicking too fast on",
        "a button such as undo/redo selects the entire editor.",
        "update toolbar button status",
        "String||Object||Function",
        "Integer?",
        "summary:",
        "takes a plugin name as a string or a plugin instance and",
        "adds it to the toolbar and associates it with this editor",
        "instance. The resulting plugin is added to the Editor's",
        "plugins array. If index is passed, it's placed in the plugins",
        "array at that index. No big magic, but a nice helper for",
        "passing in plugin names via markup.",
        "plugin:",
        "String, args object, plugin instance, or plugin constructor",
        "args:",
        "This object will be passed to the plugin constructor",
        "index:",
        "Used when creating an instance from",
        "something already in this.plugins. Ensures that the new",
        "instance is assigned to this.plugins at that index.",
        "search registry for a plugin factory matching args.name, if it's not there then",
        "fallback to 1.0 API:",
        "ask all loaded plugin modules to fill in o.plugin if they can (ie, if they implement args.name)",
        "remove fallback for 2.0.",
        "publish",
        "TODO: remove lang.getObject() call in 2.0",
        "the following 2 functions are required to make the editor play nice under a layout widget, see #4070",
        "summary:",
        "Resize the editor to the specified size, see `dijit/layout/_LayoutWidget.resize()`",
        "we've been given a height/width for the entire editor (toolbar + contents), calls layout()",
        "to split the allocated size between the toolbar and the contents",
        "else{\n\t\t\t\t// do nothing, the editor is already laid out correctly.   The user has probably specified\n\t\t\t\t// the height parameter, which was used to set a size on the iframe\n\t\t\t}",
        "summary:",
        "Called from `dijit/layout/_LayoutWidget.resize()`.  This shouldn't be called directly",
        "tags:",
        "protected",
        "Converts the iframe (or rather the <div> surrounding it) to take all the available space",
        "except what's needed for the header (toolbars) and footer (breadcrumbs, etc).",
        "A class was added to the iframe container and some themes style it, so we have to",
        "calc off the added margins and padding too. See tracker: #10662",
        "Event",
        "summary:",
        "IE only to prevent 2 clicks to focus",
        "tags:",
        "private",
        "IE 8's componentFromPoint is broken, which is a shame since it",
        "was smaller code, but oh well.  We have to do this brute force",
        "to detect if the click was scroller or not.",
        "Check for vertical scroller click.",
        "Check the click was between width and offset width, if so, scroller",
        "RTL mode, we have to go by the left offsets.",
        "Check the click was between width and offset width, if so, scroller",
        "Okay, might be horiz scroller, check that.",
        "Horizontal scroller.",
        "Remove the force to cursor to start position.",
        "new mouse position overrides old selection",
        "summary:",
        "Called on IE right before focus is lost.   Saves the selected range.",
        "tags:",
        "private",
        "in IE, the selection will be lost when other elements get focus,",
        "let's save focus before the editor is deactivated",
        "console.log('onBeforeDeactivate',this);",
        "beginning of custom undo/redo support",
        "customUndo: Boolean",
        "Whether we shall use custom undo/redo support instead of the native",
        "browser support. By default, we now use custom undo.  It works better",
        "than native browser support and provides a consistent behavior across",
        "browsers with a minimal performance hit.  We already had the hit on",
        "the slowest browser, IE, anyway.",
        "editActionInterval: Integer",
        "When using customUndo, not every keystroke will be saved as a step.",
        "Instead typing (including delete) will be grouped together: after",
        "a user stops typing for editActionInterval seconds, a step will be",
        "saved; if a user resume typing within editActionInterval seconds,",
        "the timeout will be restarted. By default, editActionInterval is 3",
        "seconds.",
        "summary:",
        "Called to note that the user has started typing alphanumeric characters, if it's not already noted.",
        "Deals with saving undo; see editActionInterval parameter.",
        "tags:",
        "private",
        "TODO: declaring these in the prototype is meaningless, just create in the constructor/postCreate",
        "summary:",
        "Main handler for executing any commands to the editor, like paste, bold, etc.",
        "Called by plugins, but not meant to be called by end users.",
        "tags:",
        "protected",
        "summary:",
        "Over-ride of paste command control to make execCommand cleaner",
        "tags:",
        "Protected",
        "summary:",
        "Over-ride of cut command control to make execCommand cleaner",
        "tags:",
        "Protected",
        "summary:",
        "Over-ride of copy command control to make execCommand cleaner",
        "tags:",
        "Protected",
        "summary:",
        "Function to handle processing clipboard commands (or at least try to).",
        "tags:",
        "Private",
        "Try to exec the superclass exec-command and see if it works.",
        "see #4598: webkit does not guarantee clipboard support from js",
        "throw an object like Mozilla's error",
        "TODO: when else might we get an exception?  Do we need the Mozilla test below?",
        "Mozilla: service denied",
        "Opera not supported",
        "Warn user of platform limitation.  Cannot programmatically access clipboard. See ticket #4136",
        "summary:",
        "Returns true if specified editor command is enabled.",
        "Used by the plugins to know when to highlight/not highlight buttons.",
        "tags:",
        "protected",
        "summary:",
        "Selects the text specified in bookmark b",
        "tags:",
        "private",
        "IE CONTROL, have to use the native bookmark.",
        "Use the pseudo WC3 range API.  This works better for positions",
        "than the IE native bookmark code.",
        "Okay, we believe we found the position, so add it into the selection",
        "There are cases where it may not be found, particularly in undo/redo, when",
        "IE changes the underlying DOM on us (wraps text in a <p> tag or similar.",
        "So, in those cases, don't bother restoring selection.",
        "w3c range",
        "Okay, we believe we found the position, so add it into the selection",
        "There are cases where it may not be found, particularly in undo/redo, when",
        "formatting as been done and so on, so don't restore selection then.",
        "summary:",
        "Reverts editor to \"to\" setting, from the undo stack.",
        "tags:",
        "private",
        "summary:",
        "Handler for editor undo (ex: ctrl-z) operation",
        "tags:",
        "private",
        "summary:",
        "Handler for editor redo (ex: ctrl-y) operation",
        "tags:",
        "private",
        "summary:",
        "Called to note that the user has stopped typing alphanumeric characters, if it's not already noted.",
        "Deals with saving undo; see editActionInterval parameter.",
        "tags:",
        "private",
        "summary:",
        "Get the currently selected text",
        "tags:",
        "protected",
        "Try to use the pseudo range API on IE for better accuracy.",
        "Control ranges (img, table, etc), handle differently.",
        "summary:",
        "Called when the user starts typing alphanumeric characters.",
        "Deals with saving undo; see editActionInterval parameter.",
        "tags:",
        "private",
        "You want to use the editor content without post filtering",
        "to make sure selection restores right for the 'initial' state.",
        "and undo is called.  So not using this.value, as it was 'processed'",
        "and the line-up for selections may have been altered.",
        "summary:",
        "Called when the user stops typing alphanumeric characters.",
        "Deals with saving undo; see editActionInterval parameter.",
        "tags:",
        "private",
        "Avoid filtering to make sure selections restore.",
        "clear undoed steps",
        "summary:",
        "Handler for onkeydown event.",
        "tags:",
        "private",
        "We need to save selection if the user TAB away from this editor",
        "no need to call _saveSelection for IE, as that will be taken care of in onBeforeDeactivate",
        "undo and redo only if the special right Alt + z/y are not pressed #5892",
        "z",
        "y",
        "x",
        "v",
        "end current typing step if any",
        "use timeout to trigger after the paste is complete",
        "pass through",
        "pass through",
        "maybe ctrl+backspace/delete, so don't endEditing when ctrl is pressed",
        "summary:",
        "Called from focus manager when focus has moved away from this editor",
        "tags:",
        "protected",
        "this._saveSelection();",
        "summary:",
        "Save the currently selected text in _savedSelection attribute",
        "tags:",
        "private",
        "Squelch any errors that occur if selection save occurs due to being hidden simultaneously.",
        "summary:",
        "Re-select the text specified in _savedSelection attribute;",
        "see _saveSelection().",
        "tags:",
        "private",
        "Clear off cursor to start, we're deliberately going to a selection.",
        "only restore the selection if the current range is collapsed",
        "if not collapsed, then it means the editor does not lose",
        "selection and there is no need to restore it",
        "summary:",
        "Handler for when editor is clicked",
        "tags:",
        "protected",
        "String",
        "summary:",
        "over-ride of replaceValue to support custom undo and stack maintenance.",
        "tags:",
        "protected",
        "&nbsp;",
        "Boolean",
        "Disable editor: disable all enabled buttons and remember that list",
        "Restore plugins to being active.",
        "Let theme set the editor's text color based on editor enabled/disabled state.",
        "We need to jump through hoops because the main document (where the theme CSS is)",
        "is separate from the iframe's document.",
        "Squelch any errors caused by focus change if hidden during a state change",
        "Register the \"default plugins\", ie, the built-in editor commands",
        "declare",
        "keys.LEFT_ARROW keys.RIGHT_ARROW",
        "module:",
        "dijit/Toolbar",
        "Back compat w/1.6, remove for 2.0",
        "use indirection so modules not rolled into a build",
        "summary:",
        "A Toolbar widget, used to hold things like `dijit.Editor` buttons",
        "array.forEach array.indexOf array.some",
        "cookie",
        "declare",
        "domClass.add domClass.replace",
        "has(\"dijit-legacy-requires\")",
        "lang.extend",
        "publish",
        "registry.byId",
        "module:",
        "dijit/layout/StackContainer",
        "Back compat w/1.6, remove for 2.0",
        "use indirection so modules not rolled into a build",
        "summary:",
        "A container that has multiple children, but shows only",
        "one child at a time",
        "",
        "description:",
        "A container for widgets (ContentPanes, for example) That displays",
        "only one Widget at a time.",
        "",
        "Publishes topics [widgetId]-addChild, [widgetId]-removeChild, and [widgetId]-selectChild",
        "",
        "Can be base class for container, Wizard, Show, etc.",
        "",
        "See `StackContainer.ChildWidgetProperties` for details on the properties that can be set on",
        "children of a `StackContainer`.",
        "doLayout: Boolean",
        "If true, change the size of my currently displayed child to match my size",
        "persist: Boolean",
        "Remembers the selected child across sessions",
        "=====\n\t// selectedChildWidget: [readonly] dijit._Widget\n\t//\t\tReferences the currently selected child widget, if any.\n\t//\t\tAdjust selected child with selectChild() method.\n\tselectedChildWidget: null,\n=====",
        "Setup each page panel to be initially hidden",
        "Figure out which child to initially display, defaulting to first one",
        "Publish information about myself so any StackControllers can initialize.",
        "This needs to happen before this.inherited(arguments) so that for",
        "TabContainer, this._contentBox doesn't include the space for the tab labels.",
        "Startup each child widget, and do initial layout like setting this._contentBox,",
        "then calls this.resize() which does the initial sizing on the selected child.",
        "Overrides _LayoutWidget.resize()",
        "Resize is called when we are first made visible (it's called from startup()",
        "if we are initially visible). If this is the first time we've been made",
        "visible then show our first child.",
        "dijit/_WidgetBase",
        "Overrides _LayoutWidget._setupChild()",
        "remove the title attribute so it doesn't show up when i hover",
        "over a node",
        "dijit/_WidgetBase",
        "Integer?",
        "Overrides _Container.addChild() to do layout and publish events",
        "publish",
        "in case the tab titles have overflowed from one line to two lines",
        "(or, if this if first child, from zero lines to one line)",
        "TODO: w/ScrollingTabController this is no longer necessary, although",
        "ScrollTabController.resize() does need to get called to show/hide",
        "the navigation buttons as appropriate, but that's handled in ScrollingTabController.onAddChild().",
        "If this is updated to not layout [except for initial child added / last child removed], update",
        "\"childless startup\" test in StackContainer.html to check for no resize event after second addChild()",
        "if this is the first child, then select it",
        "dijit/_WidgetBase",
        "Overrides _Container.removeChild() to do layout and publish events",
        "this will notify any tablists to remove a button; do this first because it may affect sizing",
        "publish",
        "If all our children are being destroyed than don't run the code below (to select another page),",
        "because we are deleting every page one by one",
        "Select new page to display, also updating TabController to show the respective tab.",
        "Do this before layout call because it can affect the height of the TabController.",
        "In case the tab titles now take up one line instead of two lines",
        "(note though that ScrollingTabController never overflows to multiple lines),",
        "or the height has changed slightly because of addition/removal of tab which close icon",
        "dijit/_WidgetBase|String",
        "Boolean",
        "summary:",
        "Show the given widget (which must be one of my children)",
        "page:",
        "Reference to child widget or id of child widget",
        "Deselect old page and select new one",
        "publish",
        "If child has an href, promise that fires when the child's href finishes loading",
        "===== ,  animate =====",
        "summary:",
        "Hide the old widget and display the new widget.",
        "Subclasses should override this.",
        "newWidget: dijit/_WidgetBase",
        "The newly selected widget.",
        "oldWidget: dijit/_WidgetBase",
        "The previously selected widget.",
        "animate: Boolean",
        "Used by AccordionContainer to turn on/off slide effect.",
        "tags:",
        "protected extension",
        "Size the new widget, in case this is the first time it's being shown,",
        "or I have been resized since the last time it was shown.",
        "Note that page must be visible for resizing to work.",
        "the child should pick it's own size but we still need to call resize()",
        "(with no arguments) to let the widget lay itself out",
        "If child has an href, promise that fires when the child's href finishes loading",
        "Boolean",
        "summary:",
        "Gets the next/previous child widget in this container from the current selection.",
        "TODO: remove for 2.0 if this isn't being used.   Otherwise, fix to skip disabled tabs.",
        "dijit/_WidgetBase",
        "summary:",
        "Advance to next page.",
        "summary:",
        "Go back to previous page.",
        "publish",
        "Implement _LayoutWidget.layout() virtual method.",
        "dijit/_WidgetBase",
        "summary:",
        "Show the specified child by changing it's CSS, and call _onShow()/onShow() so",
        "it can do any updates it needs regarding loading href's etc.",
        "returns:",
        "Promise that fires when page has finished showing, or true if there's no href",
        "dijit/_WidgetBase",
        "summary:",
        "Hide the specified child by changing it's CSS, and call _onHide() so",
        "it's notified.",
        "dijit/_WidgetBase",
        "summary:",
        "Callback when user clicks the [X] to remove a page.",
        "If onClose() returns true then remove and destroy the child.",
        "tags:",
        "private",
        "makes sure we can clean up executeScripts in ContentPane onUnLoad",
        "Boolean",
        "summary:",
        "These properties can be specified for the children of a StackContainer.",
        "selected: Boolean",
        "Specifies that this widget should be the initially displayed pane.",
        "Note: to change the selected child use `dijit/layout/StackContainer.selectChild`",
        "disabled: Boolean",
        "Specifies that the button to select this pane should be disabled.",
        "Doesn't affect programmatic selection of the pane, nor does it deselect the pane if it is currently selected.",
        "closable: Boolean",
        "True if user can close (destroy) this child, such as (for example) clicking the X on the tab.",
        "iconClass: String",
        "CSS Class specifying icon to use in label associated with this pane.",
        "showTitle: Boolean",
        "When true, display title of this widget as tab label etc., rather than just using",
        "icon specified in iconClass",
        "Since any widget can be specified as a StackContainer child, mix them",
        "into the base widget class.  (This is a hack, but it's effective.)",
        "This is for the benefit of the parser.   Remove for 2.0.  Also, hide from doc viewer.",
        "===== {} || =====",
        "module:",
        "dojo/regexp",
        "summary:",
        "Regular expressions and Builder resources",
        "String",
        "String?",
        "summary:",
        "Adds escape sequences for special characters in regular expressions",
        "except:",
        "a String with special characters to be left unescaped",
        "String",
        "Object|Array",
        "Function",
        "Boolean?",
        "summary:",
        "Builds a regular expression that groups subexpressions",
        "description:",
        "A utility function used by some of the RE generators. The",
        "subexpressions are constructed by the function, re, in the second",
        "parameter.  re builds one subexpression for each elem in the array",
        "a, in the first parameter. Returns a string for a regular",
        "expression that groups all the subexpressions.",
        "arr:",
        "A single value or an array of values.",
        "re:",
        "A function. Takes one parameter and converts it to a regular",
        "expression.",
        "nonCapture:",
        "If true, uses non-capturing match, otherwise matches are retained",
        "by regular expression. Defaults to false",
        "case 1: a is a single value.",
        "String",
        "case 2: a is an array",
        "convert each elem to a RE",
        "join the REs as alternatives in a RE group.",
        "String",
        "String",
        "Boolean?",
        "summary:",
        "adds group match to expression",
        "nonCapture:",
        "If true, uses non-capturing match, otherwise matches are retained",
        "by regular expression.",
        "String",
        "declare",
        "module:",
        "dijit/form/ComboBox",
        "summary:",
        "Auto-completing text box",
        "",
        "description:",
        "The drop down box's values are populated from an class called",
        "a data provider, which returns a list of values based on the characters",
        "that the user has typed into the input box.",
        "If OPTION tags are used as the data provider via markup,",
        "then the OPTION tag's child text node is used as the widget value",
        "when selected.  The OPTION tag's value attribute is ignored.",
        "To set the default value when using OPTION tags, specify the selected",
        "attribute on 1 of the child OPTION tags.",
        "",
        "Some of the options to the ComboBox are actually arguments to the data",
        "provider.",
        "declare",
        "domAttr.get",
        "keys.ENTER",
        "lang.delegate lang.hitch lang.trim",
        "has(\"ie\")",
        "query",
        "string.substitute",
        "module:",
        "dijit/_editor/plugins/LinkDialog",
        "summary:",
        "Editor plugins: LinkDialog (for inserting links) and ImgLinkDialog (for inserting images)",
        "summary:",
        "This plugin provides the basis for an 'anchor' (link) dialog and an extension of it",
        "provides the image link dialog.",
        "description:",
        "The command provided by this plugin is:",
        "",
        "- createLink",
        "Override _Plugin.buttonClass.   This plugin is controlled by a DropDownButton",
        "(which triggers a TooltipDialog).",
        "Override _Plugin.useDefaultCommand... processing is handled by this plugin, not by dijit/Editor.",
        "urlRegExp: [protected] String",
        "Used for validating input as correct URL.  While file:// urls are not terribly",
        "useful, they are technically valid.",
        "emailRegExp: [protected] String",
        "Used for validating input as correct email address.  Taken from dojox.validate",
        "username",
        "host.",
        "htmlTemplate: [protected] String",
        "String used for templating the HTML to insert at the desired point.",
        "tag: [protected] String",
        "Tag used for the link type.",
        "_hostRxp [private] RegExp",
        "Regular expression used to validate url fragments (ip address, hostname, etc)",
        "_userAtRxp [private] RegExp",
        "Regular expression used to validate e-mail address fragment.",
        "linkDialogTemplate: [protected] String",
        "Template for contents of TooltipDialog to pick URL",
        "Setup to lazy create TooltipDialog first time the button is clicked",
        "Called the first time the button is pressed.  Initialize TooltipDialog.",
        "i18n.getLocalization",
        "registry.byId, registry.getUniqueId",
        "used by template",
        "used by template",
        "used by template",
        "Build up the dual check for http/https/file:, and mailto formats.",
        "Function over-ride of isValid to test if the input matches a url or a mailto style link.",
        "Listen for enter and execute if valid.",
        "summary:",
        "A function to listen for onChange events and test the input contents",
        "for valid information, such as valid urls with http/https/ftp and if",
        "not present, try and guess if the input url is relative or not, and if",
        "not, append http:// to it.  Also validates other fields as determined by",
        "the internal _isValid function.",
        "Check that it doesn't start with /, ./, or ../, which would",
        "imply 'target server relativeness'",
        "If it looks like a foo@, append a mailto.",
        "summary:",
        "Over-ridable function that connects tag specific events.",
        "summary:",
        "Internal function to allow validating of the inputs",
        "for a link to determine if set should be disabled or not",
        "tags:",
        "protected",
        "summary:",
        "Helper for _initButton above.   Not sure why it's a separate method.",
        "make parser search for dojoType/data-dojo-type even if page is multi-version",
        "summary:",
        "Function to check the values in args and 'fix' them up as needed.",
        "args: Object",
        "Content being set.",
        "tags:",
        "protected",
        "summary:",
        "Callback from the dialog when user presses \"set\" button.",
        "tags:",
        "private",
        "TODO: prevent closing popup if the text is empty",
        "see #4151",
        "Text node, may be the link contents, so check parent.",
        "This plugin doesn't really support nested HTML elements",
        "in the link, it assumes all link content is text.",
        "Still nothing, one last thing to try on IE, as it might be 'img'",
        "and thus considered a control.",
        "Okay, we do have a match.  IE, for some reason, sometimes pastes before",
        "instead of removing the targeted paste-over element, so we unlink the",
        "old one first.  If we do not the <a> tag remains, but it has no content,",
        "so isn't readily visible (but is wrong for the action).",
        "Select all the link children, then unlink.  The following insert will",
        "then replace the selected text.",
        "make sure values are properly escaped, etc.",
        "IE sometimes leaves a blank link, so we need to fix it up.",
        "Go ahead and do this for everyone just to avoid blank links",
        "in the page.",
        "Remove empty anchors that do not have \"name\" set.",
        "Empty ones with a name set could be a hidden hash",
        "anchor.",
        "summary:",
        "Handler for close event on the dialog",
        "put focus back in the edit area, unless the dialog closed because the user clicked somewhere else",
        "summary:",
        "Over-ride for getting the values to set in the dropdown.",
        "a:",
        "The anchor/link to process for data for the dropdown.",
        "tags:",
        "protected",
        "Object;",
        "summary:",
        "Handler for when the dialog is opened.",
        "If the caret is currently in a URL then populate the URL's info into the dialog.",
        "IE, even IE10, is difficult to select the element in, using the range unified",
        "API seems to work reasonably well.",
        "Text node, may be the link contents, so check parent.",
        "This plugin doesn't really support nested HTML elements",
        "in the link, it assumes all link content is text.",
        "Still nothing, one last thing to try on IE, as it might be 'img'",
        "and thus considered a control.",
        "Try another lookup, IE's selection is just terrible.",
        "Looks like we found an A tag, use it and make sure just it is",
        "selected.",
        "STILL nothing.  Trying one more thing.  Lets look at the first child.",
        "It might be an anchor tag in a div by itself or the like.  If it is,",
        "we'll use it otherwise we give up.  The selection is not easily",
        "determinable to be on an existing anchor tag.",
        "summary:",
        "Function to define a behavior on double clicks on the element",
        "type this dialog edits to select it and pop up the editor",
        "dialog.",
        "e: Object",
        "The double-click event.",
        "tags:",
        "protected.",
        "Call onNormalizedDisplayChange() now, rather than on timer.",
        "On IE, when focus goes to the first <input> in the TooltipDialog, the editor loses it's selection.",
        "Later if onNormalizedDisplayChange() gets called via the timer it will disable the LinkDialog button",
        "(actually, all the toolbar buttons), at which point clicking the <input> will close the dialog,",
        "since (for unknown reasons) focus.js ignores disabled controls.",
        "Focus shift outside the event handler.",
        "IE doesn't like focus changes in event handles.",
        "summary:",
        "This plugin extends LinkDialog and adds in a plugin for handling image links.",
        "provides the image link dialog.",
        "description:",
        "The command provided by this plugin is:",
        "",
        "- insertImage",
        "linkDialogTemplate: [protected] String",
        "Over-ride for template since img dialog doesn't need target that anchor tags may.",
        "htmlTemplate: [protected] String",
        "String used for templating the `<img>` HTML to insert at the desired point.",
        "tag: [protected] String",
        "Tag used for the link type (img).",
        "summary:",
        "Over-ride for getting the values to set in the dropdown.",
        "a:",
        "The anchor/link to process for data for the dropdown.",
        "tags:",
        "protected",
        "Object",
        "summary:",
        "Over-ride for images.  You can have alt text of blank, it is valid.",
        "tags:",
        "protected",
        "summary:",
        "Over-ridable function that connects tag specific events.",
        "Use onmousedown instead of onclick.  Seems that IE eats the first onclick",
        "to wrap it in a selector box, then the second one acts as onclick.  See #10420",
        "summary:",
        "A simple event handler that lets me select an image if it is clicked on.",
        "makes it easier to select images in a standard way across browsers.  Otherwise",
        "selecting an image for edit becomes difficult.",
        "e: Event",
        "The mousedown event.",
        "tags:",
        "private",
        "summary:",
        "Function to check the values in args and 'fix' them up as needed",
        "(special characters in the url or alt text)",
        "args: Object",
        "Content being set.",
        "tags:",
        "protected",
        "summary:",
        "Function to define a behavior on double clicks on the element",
        "type this dialog edits to select it and pop up the editor",
        "dialog.",
        "e: Object",
        "The double-click event.",
        "tags:",
        "protected.",
        "Call onNormalizedDisplayChange() now, rather than on timer.",
        "On IE, when focus goes to the first <input> in the TooltipDialog, the editor loses it's selection.",
        "Later if onNormalizedDisplayChange() gets called via the timer it will disable the LinkDialog button",
        "(actually, all the toolbar buttons), at which point clicking the <input> will close the dialog,",
        "since (for unknown reasons) focus.js ignores disabled controls.",
        "Focus shift outside the event handler.",
        "IE doesn't like focus changes in event handles.",
        "Register these plugins",
        "Export both LinkDialog and ImgLinkDialog",
        "TODO for 2.0: either return both classes in a hash, or split this file into two separate files.",
        "Then the documentation for the module can be applied to the hash, and will show up in the API doc.",
        "declare",
        "event.stop",
        "keys",
        "module:",
        "dijit/DropDownMenu",
        "summary:",
        "A menu, without features for context menu (Meaning, drop down menu)",
        "Event",
        "summary:",
        "Handle keyboard based menu navigation.",
        "tags:",
        "protected",
        "array.every array.filter array.forEach array.indexOf array.map",
        "declare",
        "kernel.deprecated",
        "lang.hitch lang.isArray",
        "winUtils.scrollIntoView",
        "module:",
        "dijit/form/_FormMixin",
        "summary:",
        "Mixin for containers of form widgets (i.e. widgets that represent a single value",
        "and can be children of a `<form>` node or `dijit/form/Form` widget)",
        "description:",
        "Can extract all the form widgets",
        "values and combine them into a single javascript object, or alternately",
        "take such an object and set the values for all the contained",
        "form widgets",
        "=====\n\t\t// value: Object\n\t\t//\t\tName/value hash for each child widget with a name and value.\n\t\t//\t\tChild widgets without names are not part of the hash.\n\t\t//\n\t\t//\t\tIf there are multiple child widgets w/the same name, value is an array,\n\t\t//\t\tunless they are radio buttons in which case value is a scalar (since only\n\t\t//\t\tone radio button can be checked at a time).\n\t\t//\n\t\t//\t\tIf a child widget's name is a dot separated list (like a.b.c.d), it's a nested structure.\n\t\t//\n\t\t//\t\tExample:\n\t\t//\t|\t{ name: \"John Smith\", interests: [\"sports\", \"movies\"] }\n\t=====",
        "state: [readonly] String",
        "Will be \"Error\" if one or more of the child widgets has an invalid value,",
        "\"Incomplete\" if not all of the required child widgets are filled in.  Otherwise, \"\",",
        "which indicates that the form is ready to be submitted.",
        "TODO:",
        "dijit/_WidgetBase[]?",
        "summary:",
        "Returns all form widget descendants, searching through non-form child widgets like BorderContainer",
        "summary:",
        "returns if the form is valid - same as isValid - but",
        "provides a few additional (ui-specific) features:",
        "",
        "1. it will highlight any sub-widgets that are not valid",
        "2. it will call focus() on the first invalid sub-widget",
        "Need to set this so that \"required\" widgets get their",
        "state set.",
        "Set focus of the first non-valid widget",
        "Object",
        "summary:",
        "Fill in form values from according to an Object (in the format returned by get('value'))",
        "generate map from name --> [list of widgets with that name]",
        "array of widgets w/this name",
        "list of values for those widgets",
        "for checkbox/radio, values is a list of which widgets should be checked",
        "it takes an array (e.g. multi-select)",
        "otherwise, values is a list of values to be assigned sequentially to each widget",
        "Note: no need to call this._set(\"value\", ...) as the child updates will trigger onChange events",
        "which I am monitoring.",
        "summary:",
        "Returns Object representing form values.   See description of `value` for details.",
        "description:",
        "The value is updated into this.value every time a child has an onChange event,",
        "so in the common case this function could just return this.value.   However,",
        "that wouldn't work when:",
        "",
        "1. User presses return key to submit a form.  That doesn't fire an onchange event,",
        "and even if it did it would come too late due to the defer(...) in _handleOnChange()",
        "",
        "2. app for some reason calls this.get(\"value\") while the user is typing into a",
        "form field.   Not sure if that case needs to be supported or not.",
        "get widget values",
        "Single value widget (checkbox, radio, or plain <input> type widget)",
        "Store widget's value(s) as a scalar, except for checkboxes which are automatically arrays",
        "radio button",
        "give radio widgets a default of null",
        "checkbox/toggle button",
        "unique name",
        "summary:",
        "Returns true if all of the widgets are valid.",
        "Deprecated, will be removed in 2.0.  Use get(\"state\") instead.",
        "Boolean",
        "===== isValid =====",
        "summary:",
        "Stub function to connect to if you want to do something",
        "(like disable/enable a submit button) when the valid",
        "state changes on the form as a whole.",
        "",
        "Deprecated.  Will be removed in 2.0.  Use watch(\"state\", ...) instead.",
        "summary:",
        "Compute what this.state should be based on state of children",
        "summary:",
        "Deprecated method.   Applications no longer need to call this.   Remove for 2.0.",
        "Boolean",
        "summary:",
        "You can call this function directly, ex. in the event that you",
        "programmatically add a widget to the form *after* the form has been",
        "initialized.",
        "TODO: rename for 2.0",
        "To get notifications from children they need to be started.   Children didn't used to need to be started,",
        "so for back-compat, start them here",
        "String",
        "summary:",
        "Called when child's value or disabled state changes",
        "The unit tests expect state update to be synchronous, so update it immediately.",
        "Use defer() to collapse value changes in multiple children into a single",
        "update to my value.   Multiple updates will occur on:",
        "1. Form.set()",
        "2. Form.reset()",
        "3. user selecting a radio button (which will de-select another radio button,",
        "causing two onChange events)",
        "Set initial this.value and this.state.   Don't emit watch() notifications.",
        "Initialize value and valid/invalid state tracking.",
        "ignore events that I fire on myself because my children changed",
        "Make state change call onValidStateChange(), will be removed in 2.0",
        "array.forEach",
        "declare",
        "event.stop",
        "dom.byId dom.isDescendant",
        "domAttr.get domAttr.set domAttr.has domAttr.remove",
        "domStyle.getComputedStyle domGeometry.position",
        "domStyle.getComputedStyle",
        "keys.F10",
        "lang.hitch",
        "has(\"ie\"), has(\"quirks\")",
        "win.body win.doc.documentElement win.doc.frames",
        "winUtils.get",
        "module:",
        "dijit/Menu",
        "Back compat w/1.6, remove for 2.0",
        "use indirection so modules not rolled into a build",
        "summary:",
        "A context menu you can assign to multiple elements",
        "===== params, srcNodeRef =====",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Hash of initialization parameters for widget, including scalar values (like title, duration etc.)",
        "and functions, typically callbacks like onClick.",
        "The hash can contain any of the widget's properties, excluding read-only properties.",
        "srcNodeRef: DOMNode|String?",
        "If a srcNodeRef (DOM node) is specified:",
        "",
        "- use srcNodeRef.innerHTML as my contents",
        "- replace srcNodeRef with my generated DOM tree",
        "targetNodeIds: [const] String[]",
        "Array of dom node ids of nodes to attach to.",
        "Fill this with nodeIds upon widget creation and it becomes context menu for those nodes.",
        "selector: String?",
        "CSS expression to apply this Menu to descendants of targetNodeIds, rather than to",
        "the nodes specified by targetNodeIds themselves.  Useful for applying a Menu to",
        "a range of rows in a table, tree, etc.",
        "",
        "The application must require() an appropriate level of dojo/query to handle the selector.",
        "TODO: in 2.0 remove support for multiple targetNodeIds.   selector gives the same effect.",
        "So, change targetNodeIds to a targetNodeId: \"\", remove bindDomNode()/unBindDomNode(), etc.",
        "=====\n\t// currentTarget: [readonly] DOMNode\n\t//\t\tFor context menus, set to the current node that the Menu is being displayed for.\n\t//\t\tUseful so that the menu actions can be tailored according to the node\n\tcurrentTarget: null,\n\t=====",
        "contextMenuForWindow: [const] Boolean",
        "If true, right clicking anywhere on the window will cause this context menu to open.",
        "If false, must specify targetNodeIds.",
        "leftClickToOpen: [const] Boolean",
        "If true, menu will open on left click instead of right click, similar to a file menu.",
        "refocus: Boolean",
        "When this menu closes, re-focus the element which had focus before it was opened.",
        "TODO: should have _setTargetNodeIds() method to handle initialization and a possible",
        "later set('targetNodeIds', ...) call.  There's also a problem that targetNodeIds[]",
        "gets stale after calls to bindDomNode()/unBindDomNode() as it still is just the original list (see #9610)",
        "thanks burstlib!",
        "HTMLIFrameElement",
        "summary:",
        "Returns the window reference of the passed iframe",
        "tags:",
        "private",
        "Moz. TODO: is this available when defaultView isn't?",
        "Window",
        "HTMLIFrameElement",
        "summary:",
        "Returns a reference to the document object inside iframe_el",
        "tags:",
        "protected",
        "W3",
        "IE",
        "HTMLDocument",
        "String|DomNode",
        "summary:",
        "Attach menu to given node",
        "Connect node",
        "Support context menus on iframes.  Rather than binding to the iframe itself we need",
        "to bind to the <body> node inside the iframe.",
        "To capture these events at the top level, attach to <html>, not <body>.",
        "Otherwise right-click context menu just doesn't work.",
        "\"binding\" is the object to track our connection to the node (ie, the parameter to bindDomNode())",
        "Save info about binding in _bindings[], and make node itself record index(+1) into",
        "_bindings[] array.  Prefix w/_dijitMenu to avoid setting an attribute that may",
        "start with a number, which fails on FF/safari.",
        "Setup the connections to monitor click etc., unless we are connecting to an iframe which hasn't finished",
        "loading yet, in which case we need to wait for the onload event first, and then connect",
        "On linux Shift-F10 produces the oncontextmenu event, but on Windows it doesn't, so",
        "we need to monitor keyboard events in addition to the oncontextmenu event.",
        "TODO: when leftClickToOpen is true then shouldn't space/enter key trigger the menu,",
        "rather than shift-F10?",
        "Ignore contextmenu/click events that were already processed in keydown handler below.",
        "But still call evt.stop() (above) so system context menu doesn't appear.",
        "Schedule context menu to be opened.",
        "Note that this won't work will if the click was generated by the keyboard, while",
        "focused on a <button> etc.   In that case evt.pageX and evt.pageY are either (0,0) or",
        "wherever the mouse cursor is.  See keydown handler below.",
        "context menu key",
        "shift-F10",
        "space key",
        "Open the menu around evt.target.  Note that \"this\" and evt.target",
        "are likely different, especially for global context menu, where \"this\" is <body>.",
        "no coords - open near evt.target",
        "Setup handler to [re]bind to the iframe when the contents are initially loaded,",
        "and every time the contents change.",
        "Need to do this b/c we are actually binding to the iframe's <body> node.",
        "Note: can't use connect.connect(), see #9609.",
        "want to remove old connections, but IE throws exceptions when trying to",
        "access the <body> node because it's already gone, or at least in a state of limbo",
        "String|DomNode",
        "summary:",
        "Detach menu from given node",
        "On IE the dom.byId() call will get an exception if the attach point was",
        "the <body> node of an <iframe> that has since been reloaded (and thus the",
        "<body> node is in a limbo state of destruction.",
        "node[\"_dijitMenu\" + this.id] contains index(+1) into my _bindings[] array",
        "Remove listener for iframe onload events",
        "summary:",
        "Set timer to display myself.  Using a timer rather than displaying immediately solves",
        "IE problem: without the delay, focus work in \"open\" causes the system",
        "context menu to appear in spite of evt.preventDefault().",
        "delegatedTarget: Element",
        "The node specified in targetNodeIds or matching selector that the menu is being opened for.",
        "iframe: HTMLIframeElement?",
        "Set if target is inside the specified iframe.",
        "coords: Object",
        "x/y position to center the menu around.  Undefined if menu was opened via keyboard.",
        "target: Element",
        "The actual clicked node, either delegatedTarget or a descendant.",
        "summary:",
        "Internal function for opening myself when the user does a right-click or something similar.",
        "args:",
        "This is an Object containing:",
        "",
        "- target: The node that is being clicked.",
        "- delegatedTarget: The node from this.targetNodeIds or matching this.selector,",
        "either the same as target or an ancestor of target.",
        "- iframe: If an `<iframe>` is being clicked, iframe points to that iframe",
        "- coords: Mouse cursor x/y coordinates.  Null when opened via keyboard.",
        "Put menu at specified position in iframe (if iframe specified) or otherwise in viewport.",
        "",
        "_openMyself() formerly took the event object, and since various code references",
        "evt.target (after connecting to _openMyself()), using an Object for parameters",
        "(so that old code still works).",
        "To be used by MenuItem event handlers to tell which node the menu was opened on",
        "Get coordinates to open menu, either at specified (mouse) position or (if triggered via keyboard)",
        "then near the node the menu is assigned to.",
        "Specified coordinates are on <body> node of an <iframe>, convert to match main document",
        "user has clicked on a menu or popup",
        "Usually the parent closes the child widget but if this is a context",
        "menu then there is no parent",
        "don't try to restore focus; user has clicked another part of the screen",
        "and set focus there",
        "declare",
        "domAttr.set",
        "event.stop",
        "module:",
        "dijit/form/_CheckBoxMixin",
        "summary:",
        "Mixin to provide widget functionality corresponding to an HTML checkbox",
        "",
        "description:",
        "User interacts with real html inputs.",
        "On onclick (which occurs by mouse click, space-bar, or",
        "using the arrow keys to switch the selected radio button),",
        "we update the state of the checkbox/radio.",
        "",
        "type: [private] String",
        "type attribute on `<input>` node.",
        "Overrides `dijit/form/Button.type`.  Users should not change this value.",
        "value: String",
        "As an initialization parameter, equivalent to value field on normal checkbox",
        "(if checked, the value is passed as the value when form is submitted).",
        "readOnly: Boolean",
        "Should this widget respond to user input?",
        "In markup, this is specified as \"readOnly\".",
        "Similar to disabled except readOnly form values are submitted.",
        "aria-pressed for toggle buttons, and aria-checked for checkboxes",
        "Boolean",
        "Override dijit/form/Button._setLabelAttr() since we don't even have a containerNode.",
        "Normally users won't try to set label, except when CheckBox or RadioButton is the child of a dojox/layout/TabContainer",
        "String",
        "\"on\" to match browser native behavior when value unspecified",
        "Handle unlikely event that the <input type=checkbox> value attribute has changed",
        "Event",
        "summary:",
        "Internal function to handle click actions - need to check",
        "readOnly, since button no longer does that check.",
        "kernel.deprecated",
        "lang.mixin lang.delegate lang.hitch lang.isFunction lang.isObject",
        "string.substitute",
        "html._ContentSetter",
        "array.forEach",
        "declare",
        "Deferred",
        "dom.byId",
        "domAttr.attr",
        "empty()",
        "xhr.get",
        "i18n.getLocalization",
        "module:",
        "dijit/layout/ContentPane",
        "summary:",
        "A widget containing an HTML fragment, specified inline",
        "or by uri.  Fragment may include widgets.",
        "",
        "description:",
        "This widget embeds a document fragment in the page, specified",
        "either by uri, javascript generated markup or DOM reference.",
        "Any widgets within this content are instantiated and managed,",
        "but laid out according to the HTML structure.  Unlike IFRAME,",
        "ContentPane embeds a document fragment as would be found",
        "inside the BODY tag of a full HTML document.  It should not",
        "contain the HTML, HEAD, or BODY tags.",
        "For more advanced functionality with scripts and",
        "stylesheets, see dojox/layout/ContentPane.  This widget may be",
        "used stand alone or as a base class for other widgets.",
        "ContentPane is useful as a child of other layout containers",
        "such as BorderContainer or TabContainer, but note that those",
        "widgets can contain any widget as a child.",
        "",
        "example:",
        "Some quick samples:",
        "To change the innerHTML:",
        "|\t\tcp.set('content', '<b>new content</b>')`",
        "Or you can send it a NodeList:",
        "|\t\tcp.set('content', dojo.query('div [class=selected]', userSelection))",
        "To do an ajax update:",
        "|\t\tcp.set('href', url)",
        "href: String",
        "The href of the content that displays now.",
        "Set this at construction if you want to load data externally when the",
        "pane is shown.  (Set preload=true to load it immediately.)",
        "Changing href after creation doesn't have any effect; Use set('href', ...);",
        "content: String|DomNode|NodeList|dijit/_Widget",
        "The innerHTML of the ContentPane.",
        "Note that the initialization parameter / argument to set(\"content\", ...)",
        "can be a String, DomNode, Nodelist, or _Widget.",
        "extractContent: Boolean",
        "Extract visible content from inside of `<body> .... </body>`.",
        "I.e., strip `<html>` and `<head>` (and it's contents) from the href",
        "parseOnLoad: Boolean",
        "Parse content and create the widgets, if any.",
        "parserScope: String",
        "Flag passed to parser.  Root for attribute names to search for.   If scopeName is dojo,",
        "will search for data-dojo-type (or dojoType).  For backwards compatibility",
        "reasons defaults to dojo._scopeName (which is \"dojo\" except when",
        "multi-version support is used, when it will be something like dojo16, dojo20, etc.)",
        "preventCache: Boolean",
        "Prevent caching of data from href's by appending a timestamp to the href.",
        "preload: Boolean",
        "Force load of data on initialization even if pane is hidden.",
        "refreshOnShow: Boolean",
        "Refresh (re-download) content when pane goes from hidden to shown",
        "loadingMessage: String",
        "Message that shows while downloading",
        "errorMessage: String",
        "Message that shows if an error occurs",
        "isLoaded: [readonly] Boolean",
        "True if the ContentPane has data in it, either specified",
        "during initialization (via href or inline content), or set",
        "via set('content', ...) / set('href', ...)",
        "",
        "False if it doesn't have any content, or if ContentPane is",
        "still in the process of downloading href.",
        "======\n\t// ioMethod: dojo/_base/xhr.get|dojo._base/xhr.post\n\t//\t\tFunction that should grab the content specified via href.\n\tioMethod: dojo.xhrGet,\n\t======",
        "ioArgs: Object",
        "Parameters to pass to xhrGet() request, for example:",
        "|\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"href: './bar', ioArgs: {timeout: 500}\">",
        "onLoadDeferred: [readonly] dojo.Deferred",
        "This is the `dojo.Deferred` returned by set('href', ...) and refresh().",
        "Calling onLoadDeferred.then() registers your",
        "callback to be called only once, when the prior set('href', ...) call or",
        "the initial href parameter to the constructor finishes loading.",
        "",
        "This is different than an onLoad() handler which gets called any time any href",
        "or content is loaded.",
        "Cancel _WidgetBase's _setTitleAttr because we don't want the title attribute (used to specify",
        "tab labels) to be copied to ContentPane.domNode... otherwise a tooltip shows up over the",
        "entire pane.",
        "Flag to parser that I'll parse my contents, so it shouldn't.",
        "template: [private] Boolean",
        "Flag from the parser that this ContentPane is inside a template",
        "so the contents are pre-parsed.",
        "TODO: this declaration can be commented out in 2.0",
        "Convert a srcNodeRef argument into a content parameter, so that the original contents are",
        "processed in the same way as contents set via set(\"content\", ...), calling the parser etc.",
        "Avoid modifying original params object since that breaks NodeList instantiation, see #11906.",
        "Since we have no template we need to set this.containerNode ourselves, to make getChildren() work.",
        "For subclasses of ContentPane that do have a template, does nothing.",
        "remove the title attribute so it doesn't show up when hovering",
        "over a node  (TODO: remove in 2.0, no longer needed after #11490)",
        "summary:",
        "Call startup() on all children including non _Widget ones like dojo/dnd/Source objects",
        "This starts all the widgets",
        "And this catches stuff like dojo/dnd/Source",
        "summary:",
        "Called when content is loaded.   Calls startup on each child widget.   Similar to ContentPane.startup()",
        "itself, but avoids marking the ContentPane itself as \"restarted\" (see #15581).",
        "This starts all the widgets",
        "And this catches stuff like dojo/dnd/Source",
        "String|Uri",
        "summary:",
        "Deprecated.   Use set('href', ...) instead.",
        "String|Uri",
        "summary:",
        "Hook so set(\"href\", ...) works.",
        "description:",
        "Reset the (external defined) content of this pane and replace with new url",
        "Note: It delays the download until widget is shown if preload is false.",
        "href:",
        "url to the page you want to get, must be within the same domain as your mainpage",
        "Cancel any in-flight requests (a set('href', ...) will cancel any in-flight set('href', ...))",
        "_setHrefAttr() is called during creation and by the user, after creation.",
        "Assuming preload == false, only in the second case do we actually load the URL;",
        "otherwise it's done in startup(), and only if this widget is shown.",
        "Set flag to indicate that href needs to be loaded the next time the",
        "ContentPane is made visible",
        "Deferred",
        "String|DomNode|Nodelist",
        "summary:",
        "Deprecated.   Use set('content', ...) instead.",
        "String|DomNode|Nodelist",
        "summary:",
        "Hook to make set(\"content\", ...) work.",
        "Replaces old content with data content, include style classes from old content",
        "data:",
        "the new Content may be String, DomNode or NodeList",
        "",
        "if data is a NodeList (or an array of nodes) nodes are copied",
        "so you can import nodes from another document implicitly",
        "clear href so we can't run refresh and clear content",
        "refresh should only work if we downloaded the content",
        "Cancel any in-flight requests (a set('content', ...) will cancel any in-flight set('href', ...))",
        "Even though user is just setting content directly, still need to define an onLoadDeferred",
        "because the _onLoadHandler() handler is still getting called from setContent()",
        "For back-compat reasons, call onLoad() for set('content', ...)",
        "calls but not for content specified in srcNodeRef (ie: <div data-dojo-type=ContentPane>...</div>)",
        "or as initialization parameter (ie: new ContentPane({content: ...})",
        "mark that content is from a set('content') not a set('href')",
        "Deferred",
        "summary:",
        "Hook to make get(\"content\") work",
        "summary:",
        "Cancels an in-flight download of content",
        "garbage collect",
        "Boolean",
        "summary:",
        "Destroy the ContentPane and its contents",
        "if we have multiple controllers destroying us, bail after the first",
        "summary:",
        "Called when the ContentPane is made visible",
        "description:",
        "For a plain ContentPane, this is called on initialization, from startup().",
        "If the ContentPane is a hidden pane of a TabContainer etc., then it's",
        "called whenever the pane is made visible.",
        "",
        "Does necessary processing, including href download and layout/resize of",
        "child widget(s)",
        "if there's an href that isn't already being loaded",
        "If child has an href, promise that fires when the load is complete",
        "summary:",
        "[Re]download contents of href and display",
        "description:",
        "1. cancels any currently in-flight requests",
        "2. posts \"loading...\" message",
        "3. sends XHR to download new data",
        "Cancel possible prior in-flight request",
        "If child has an href, promise that fires when refresh is complete",
        "summary:",
        "Load/reload the href specified in this.href",
        "display loading message",
        "onContentError",
        "show error message in the pane",
        "onDownloadError",
        "Remove flag saying that a load is needed",
        "summary:",
        "This is called whenever new content is being loaded",
        "summary:",
        "This is called whenever the content is being unloaded",
        "Boolean",
        "summary:",
        "Destroy all the widgets inside the ContentPane and empty containerNode",
        "Make sure we call onUnload (but only when the ContentPane has real content)",
        "Even if this.isLoaded == false there might still be a \"Loading...\" message",
        "to erase, so continue...",
        "For historical reasons we need to delete all widgets under this.containerNode,",
        "even ones that the user has created manually.",
        "All widgets will hit this branch",
        "Things like dojo/dnd/Source have destroy(), not destroyRecursive()",
        "Most of the widgets in setter.parseResults have already been destroyed, but",
        "things like Menu that have been moved to <body> haven't yet",
        "All widgets will hit this branch",
        "Things like dojo/dnd/Source have destroy(), not destroyRecursive()",
        "And then clear away all the DOM nodes",
        "Delete any state information we have about current contents",
        "String|DocumentFragment",
        "Boolean",
        "summary:",
        "Insert the content into the container node",
        "returns:",
        "Returns a Deferred promise that is resolved when the content is parsed.",
        "first get rid of child widgets",
        "html.set will take care of the rest of the details",
        "we provide an override for the error handling to ensure the widget gets the errors",
        "configure the setter instance with only the relevant widget instance properties",
        "NOTE: unless we hook into attr, or provide property setters for each property,",
        "we need to re-configure the ContentSetter with each use",
        "fires if a domfault occurs when we are appending this.errorMessage",
        "like for instance if domNode is a UL and we try append a DIV",
        ",\n\t\t\t\t_onError",
        "dojox/layout/html/_base::_ContentSetter.set() returns a Promise that indicates when everything is completed.",
        "dojo/html::_ContentSetter.set() currently returns the DOMNode, but that will be changed for 2.0.",
        "So, if set() returns a promise then use it, otherwise fallback to waiting on setter.parseDeferred",
        "setter params must be pulled afresh from the ContentPane each time",
        "Startup each top level child widget (and they will start their children, recursively)",
        "Call resize() on each of my child layout widgets,",
        "or resize() on my single child layout widget...",
        "either now (if I'm currently visible) or when I become visible",
        "shows user the string that is returned by on[type]Error",
        "override on[type]Error and return your own string to customize",
        "a empty string won't change current content",
        "EVENT's, should be overide-able",
        "===== data =====",
        "summary:",
        "Event hook, is called after everything is loaded and widgetified",
        "tags:",
        "callback",
        "summary:",
        "Event hook, is called before old content is cleared",
        "tags:",
        "callback",
        "summary:",
        "Called before download starts.",
        "description:",
        "The string returned by this function will be the html",
        "that tells the user we are loading something.",
        "Override with your own function if you want to change text.",
        "tags:",
        "extension",
        "Error",
        "===== error =====",
        "summary:",
        "Called on DOM faults, require faults etc. in content.",
        "",
        "In order to display an error message in the pane, return",
        "the error message from this method, as an HTML string.",
        "",
        "By default (if this method is not overriden), it returns",
        "nothing, so the error message is just printed to the console.",
        "tags:",
        "extension",
        "Error",
        "===== error =====",
        "summary:",
        "Called when download error occurs.",
        "",
        "In order to display an error message in the pane, return",
        "the error message from this method, as an HTML string.",
        "",
        "Default behavior (if this method is not overriden) is to display",
        "the error message inside the pane.",
        "tags:",
        "extension",
        "summary:",
        "Called when download is finished.",
        "tags:",
        "callback",
        "kernel.deprecated",
        "array.forEach",
        "keys.END keys.HOME",
        "declare",
        "event.stop",
        "domAttr.set",
        "lang.hitch",
        "module:",
        "dijit/_KeyNavContainer",
        "summary:",
        "A _Container with keyboard navigation of its children.",
        "description:",
        "To use this mixin, call connectKeyNavHandlers() in",
        "postCreate().",
        "It provides normalized keyboard and focusing code for Container",
        "widgets.",
        "=====\n\t\t// focusedChild: [protected] Widget\n\t\t//\t\tThe currently focused child widget, or null if there isn't one\n\t\tfocusedChild: null,\n=====",
        "tabIndex: String",
        "Tab index of the container; same as HTML tabIndex attribute.",
        "Note then when user tabs into the container, focus is immediately",
        "moved to the first item in the container.",
        "keys[]",
        "keys[]",
        "summary:",
        "Call in postCreate() to attach the keyboard handlers",
        "to the container.",
        "preKeyCodes: keys[]",
        "Key codes for navigating to the previous child.",
        "nextKeyCodes: keys[]",
        "Key codes for navigating to the next child.",
        "tags:",
        "protected",
        "TODO: call this automatically from my own postCreate()",
        "dijit/_WidgetBase",
        "int?",
        "summary:",
        "Default focus() implementation: focus the first child.",
        "summary:",
        "Focus the first focusable child in the container.",
        "tags:",
        "protected",
        "summary:",
        "Focus the last focusable child in the container.",
        "tags:",
        "protected",
        "summary:",
        "Focus the next widget",
        "tags:",
        "protected",
        "summary:",
        "Focus the last focusable node in the previous widget",
        "(ex: go to the ComboButton icon section rather than button section)",
        "tags:",
        "protected",
        "dijit/_WidgetBase",
        "Boolean",
        "summary:",
        "Focus specified child widget.",
        "widget:",
        "Reference to container's child widget",
        "last:",
        "If true and if widget has multiple focusable nodes, focus the",
        "last one instead of the first one",
        "tags:",
        "protected",
        "used by _MenuBase",
        "for IE focus outline to appear, must set tabIndex before focs",
        "dijit/_WidgetBase",
        "summary:",
        "Setup for each child widget",
        "description:",
        "Sets tabIndex=-1 on each child, so that the tab key will",
        "leave the container rather than visiting each child.",
        "tags:",
        "private",
        "Set valid tabIndex so tabbing away from widget goes to right place, see #10272",
        "summary:",
        "Handler for when the container gets focus",
        "description:",
        "Initially the container itself has a tabIndex, but when it gets",
        "focus, switch focus to first child...",
        "tags:",
        "private",
        "Note that we can't use _onFocus() because switching focus from the",
        "_onFocus() handler confuses the focus.js code",
        "(because it causes _onFocusNode() to be called recursively)",
        "Also, _onFocus() would fire when focus went directly to a child widget due to mouse click.",
        "Ignore spurious focus events:",
        "1. focus on a child widget bubbles on FF",
        "2. on IE, clicking the scrollbar of a select dropdown moves focus from the focused child item to me",
        "and then set the container's tabIndex to -1,",
        "(don't remove as that breaks Safari 4)",
        "so that tab or shift-tab will go to the fields after/before",
        "the container, rather than the container itself",
        "When focus is moved away the container, and its descendant (popup) widgets,",
        "then restore the container's tabIndex so that user can tab to it again.",
        "Note that using _onBlur() so that this doesn't happen when focus is shifted",
        "to one of my child widgets (typically a popup)",
        "summary:",
        "When a key is pressed, if it's an arrow key etc. then",
        "it's handled here.",
        "tags:",
        "private",
        "dijit/_WidgetBase",
        "===== widget =====",
        "summary:",
        "Called when focus leaves a child widget to go",
        "to a sibling widget.",
        "Used by MenuBase.js (TODO: move code there)",
        "tags:",
        "protected",
        "summary:",
        "Returns first child that can be focused",
        "dijit/_WidgetBase",
        "summary:",
        "Returns last child that can be focused",
        "dijit/_WidgetBase",
        "summary:",
        "Returns the next or previous focusable child, compared",
        "to \"child\"",
        "child: Widget",
        "The current widget",
        "dir: Integer",
        "- 1 = after",
        "- -1 = before",
        "dijit/_WidgetBase",
        "no focusable child found",
        "dijit/_WidgetBase",
        "array.filter array.forEach",
        "domClass.add domClass.remove",
        "domGeometry.marginBox",
        "domStyle.getComputedStyle",
        "lang.mixin",
        "for exporting symbols to dijit, remove in 2.0",
        "module:",
        "dijit/layout/utils",
        "=====\n\tlayout = {\n\t\t // summary:\n\t\t //\t\tmarginBox2contentBox() and layoutChildren()\n\t };\n\t =====",
        "DomNode",
        "Object",
        "summary:",
        "Given the margin-box size of a node, return its content box size.",
        "Functions like domGeometry.contentBox() but is more reliable since it doesn't have",
        "to wait for the browser to compute sizes.",
        "size the child",
        "record child's size",
        "if the child returned it's new size then use that",
        "otherwise, call getMarginBox(), but favor our own numbers when we have them.",
        "the browser lies sometimes",
        "DomNode",
        "Object",
        "Widget[]",
        "String?",
        "Number?",
        "summary:",
        "Layout a bunch of child dom nodes within a parent dom node",
        "container:",
        "parent node",
        "dim:",
        "{l, t, w, h} object specifying dimensions of container into which to place children",
        "children:",
        "An array of Widgets or at least objects containing:",
        "",
        "- domNode: pointer to DOM node to position",
        "- region or layoutAlign: position to place DOM node",
        "- resize(): (optional) method to set size of node",
        "- id: (optional) Id of widgets, referenced from resize object, below.",
        "changedRegionId:",
        "If specified, the slider for the region with the specified id has been dragged, and thus",
        "the region's height or width should be adjusted according to changedRegionSize",
        "changedRegionSize:",
        "See changedRegionId.",
        "copy dim because we are going to modify it",
        "Move \"client\" elements to the end of the array for layout.  a11y dictates that the author",
        "needs to be able to put them in the document in tab-order, but this algorithm requires that",
        "client be last.    TODO: move these lines to LayoutContainer?   Unneeded other places I think.",
        "set positions/sizes",
        "set elem to upper left corner of unused space; may move it later",
        "Size adjustments to make to this child widget",
        "Check for optional size adjustment due to splitter drag (height adjustment for top/bottom align",
        "panes and width adjustment for left/right align panes.",
        "set size && adjust record of remaining space.",
        "note that setting the width of a <div> may affect its height.",
        "declare",
        "dom.byId",
        "lang.trim",
        "query",
        "registry.add registry.remove",
        "module:",
        "dijit/form/DataList",
        "DOMNode",
        "summary:",
        "Convert `<option>` node to hash",
        "summary:",
        "Inefficient but small data store specialized for inlined data via OPTION tags",
        "",
        "description:",
        "Provides a store for inlined data like:",
        "",
        "|\t<datalist>",
        "|\t\t<option value=\"AL\">Alabama</option>",
        "|\t\t...",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Hash of initialization parameters for widget, including scalar values (like title, duration etc.)",
        "and functions, typically callbacks like onClick.",
        "The hash can contain any of the widget's properties, excluding read-only properties.",
        "srcNodeRef: DOMNode|String",
        "Attach widget to this DOM node.",
        "store pointer to original DOM tree",
        "add to registry so it can be easily found by id",
        "summary:",
        "Get the option marked as selected, like `<option selected>`.",
        "Not part of dojo.data API.",
        "declare",
        "domAttr.set",
        "has(\"dijit-legacy-requires\")",
        "query",
        "NodeList.addClass/removeClass",
        "module:",
        "dijit/form/CheckBox",
        "Back compat w/1.6, remove for 2.0",
        "use indirection so modules not rolled into a build",
        "summary:",
        "Same as an HTML checkbox, but with fancy styling.",
        "",
        "description:",
        "User interacts with real html inputs.",
        "On onclick (which occurs by mouse click, space-bar, or",
        "using the arrow keys to switch the selected radio button),",
        "we update the state of the checkbox/radio.",
        "",
        "There are two modes:",
        "",
        "1. High contrast mode",
        "2. Normal mode",
        "",
        "In case 1, the regular html inputs are shown and used by the user.",
        "In case 2, the regular html inputs are invisible but still used by",
        "the user. They are turned quasi-invisible and overlay the background-image.",
        "String|Boolean",
        "Boolean",
        "summary:",
        "Handler for value= attribute to constructor, and also calls to",
        "set('value', val).",
        "description:",
        "During initialization, just saves as attribute to the `<input type=checkbox>`.",
        "",
        "After initialization,",
        "when passed a boolean, controls whether or not the CheckBox is checked.",
        "If passed a string, changes the value attribute of the CheckBox (the one",
        "specified as \"value\" when the CheckBox was constructed",
        "(ex: `<input data-dojo-type=\"dijit/CheckBox\" value=\"chicken\">`).",
        "",
        "`widget.set('value', string)` will check the checkbox and change the value to the",
        "specified string.",
        "",
        "`widget.set('value', boolean)` will change the checked state.",
        "summary:",
        "Hook so get('value') works.",
        "description:",
        "If the CheckBox is checked, returns the value attribute.",
        "Otherwise returns false.",
        "Override behavior from Button, since we don't have an iconNode",
        "Need to set initial checked state via node.setAttribute so that form submit works",
        "and IE8 radio button tab order is preserved.",
        "domAttr.set(node, \"checked\", bool) doesn't work on IE until node has been attached",
        "to <body>, see #8666",
        "Override Button::_fillContent() since it doesn't make sense for CheckBox,",
        "since CheckBox doesn't even have a container",
        "connect.connect",
        "declare",
        "lang.mixin, lang.hitch",
        "module:",
        "dijit/_editor/_Plugin",
        "summary:",
        "Base class for a \"plugin\" to the editor, which is usually",
        "a single button on the Toolbar and some associated code",
        "summary:",
        "Base class for a \"plugin\" to the editor, which is usually",
        "a single button on the Toolbar and some associated code",
        "summary:",
        "Create the plugin.",
        "args: Object?",
        "Initial settings for any of the attributes.",
        "editor: [const] dijit.Editor",
        "Points to the parent editor",
        "iconClassPrefix: [const] String",
        "The CSS class name for the button node is formed from `iconClassPrefix` and `command`",
        "button: dijit/_WidgetBase?",
        "Pointer to `dijit/form/Button` or other widget (ex: `dijit/form/FilteringSelect`)",
        "that is added to the toolbar to control this plugin.",
        "If not specified, will be created on initialization according to `buttonClass`",
        "command: String",
        "String like \"insertUnorderedList\", \"outdent\", \"justifyCenter\", etc. that represents an editor command.",
        "Passed to editor.execCommand() if `useDefaultCommand` is true.",
        "useDefaultCommand: Boolean",
        "If true, this plugin executes by calling Editor.execCommand() with the argument specified in `command`.",
        "buttonClass: Widget Class",
        "Class of widget (ex: dijit.form.Button or dijit/form/FilteringSelect)",
        "that is added to the toolbar to control this plugin.",
        "This is used to instantiate the button, unless `button` itself is specified directly.",
        "disabled: Boolean",
        "Flag to indicate if this plugin has been disabled and should do nothing",
        "helps control button state, among other things.  Set via the setter api.",
        "String",
        "summary:",
        "Returns the label to use for the button",
        "tags:",
        "private",
        "String",
        "summary:",
        "Initialize the button or other widget that will control this plugin.",
        "This code only works for plugins controlling built-in commands in the editor.",
        "tags:",
        "protected extension",
        "summary:",
        "Destroy this plugin",
        "summary:",
        "Make a connect.connect() that is automatically disconnected when this plugin is destroyed.",
        "Similar to `dijit/_Widget.connect()`.",
        "tags:",
        "protected",
        "summary:",
        "Change state of the plugin to respond to events in the editor.",
        "description:",
        "This is called on meaningful events in the editor, such as change of selection",
        "or caret position (but not simple typing of alphanumeric keys).   It gives the",
        "plugin a chance to update the CSS of its button.",
        "",
        "For example, the \"bold\" plugin will highlight/unhighlight the bold button depending on whether the",
        "characters next to the caret are bold or not.",
        "",
        "Only makes sense when `useDefaultCommand` is true, as it calls Editor.queryCommandEnabled(`command`).",
        "FIXME: we shouldn't have debug statements in our code.  Log as an error?",
        "dijit/Editor",
        "summary:",
        "Tell the plugin which Editor it is associated with.",
        "TODO: refactor code to just pass editor to constructor.",
        "FIXME: detach from previous editor!!",
        "FIXME: prevent creating this if we don't need to (i.e., editor can't handle our command)",
        "Processing for buttons that execute by calling editor.execCommand()",
        "hide button because editor doesn't support command (due to browser limitations)",
        "dijit/Toolbar",
        "summary:",
        "Tell the plugin to add it's controller widget (often a button)",
        "to the toolbar.  Does nothing if there is no controller widget.",
        "TODO: refactor code to just pass toolbar to constructor.",
        "console.debug(\"adding\", this.button, \"to:\", toolbar);",
        "attribute",
        "anything",
        "summary:",
        "Set a property on a plugin",
        "name:",
        "The property to set.",
        "value:",
        "The value to set in the property.",
        "description:",
        "Sets named properties on a plugin which may potentially be handled by a",
        "setter in the plugin.",
        "For example, if the plugin has a properties \"foo\"",
        "and \"bar\" and a method named \"_setFooAttr\", calling:",
        "|\tplugin.set(\"foo\", \"Howdy!\");",
        "would be equivalent to writing:",
        "|\tplugin._setFooAttr(\"Howdy!\");",
        "and:",
        "|\tplugin.set(\"bar\", 3);",
        "would be equivalent to writing:",
        "|\tplugin.bar = 3;",
        "",
        "set() may also be called with a hash of name/value pairs, ex:",
        "|\tplugin.set({",
        "|\t\tfoo: \"Howdy\",",
        "|\t\tbar: 3",
        "|\t})",
        "This is equivalent to calling set(foo, \"Howdy\") and set(bar, 3)",
        "use the explicit setter",
        "summary:",
        "Get a property from a plugin.",
        "name:",
        "The property to get.",
        "description:",
        "Get a named property from a plugin. The property may",
        "potentially be retrieved via a getter method. If no getter is defined, this",
        "just retrieves the object's property.",
        "For example, if the plugin has a properties \"foo\"",
        "and \"bar\" and a method named \"_getFooAttr\", calling:",
        "|\tplugin.get(\"foo\");",
        "would be equivalent to writing:",
        "|\tplugin._getFooAttr();",
        "and:",
        "|\tplugin.get(\"bar\");",
        "would be equivalent to writing:",
        "|\tplugin.bar;",
        "summary:",
        "Function to set the plugin state and call updateState to make sure the",
        "button is updated appropriately.",
        "summary:",
        "Helper function for get() and set().",
        "Caches attribute name values so we don't do the string ops every time.",
        "tags:",
        "private",
        "String",
        "anything",
        "summary:",
        "Helper function to set new value for specified attribute",
        "Hash mapping plugin name to factory, used for registering plugins",
        "array.filter array.forEach array.map",
        "connect.isCopyKey",
        "declare",
        "Deferred",
        "global",
        "lang.hitch",
        "cookie",
        "mouse.isLeft",
        "module:",
        "dijit/tree/_dndSelector",
        "summary:",
        "This is a base class for `dijit/tree/dndSource` , and isn't meant to be used directly.",
        "It's based on `dojo/dnd/Selector`.",
        "tags:",
        "protected",
        "=====\n\t\t// selection: Object\n\t\t//\t\t(id to DomNode) map for every TreeNode that's currently selected.\n\t\t//\t\tThe DOMNode is the TreeNode.rowNode.\n\t\tselection: {},\n\t\t=====",
        "summary:",
        "Initialization",
        "tags:",
        "private",
        "singular: Boolean",
        "Allows selection of only one element, if true.",
        "Tree hasn't been tested in singular=true mode, unclear if it works.",
        "methods",
        "summary:",
        "Returns a list of selected node(s).",
        "Used by dndSource on the start of a drag.",
        "tags:",
        "protected",
        "summary:",
        "Unselects all items",
        "tags:",
        "private",
        "self",
        "summary:",
        "Prepares the object to be garbage-collected",
        "dijit/Tree._TreeNode",
        "Boolean?",
        "summary:",
        "add node to current selection",
        "node: Node",
        "node to add",
        "isAnchor: Boolean",
        "Whether the node should become anchor.",
        "dijit/Tree._TreeNode",
        "summary:",
        "remove node from current selection",
        "node: Node",
        "node to remove",
        "dijit/Tree._TreeNode",
        "summary:",
        "return true if node is currently selected",
        "node: Node",
        "the node to check whether it's in the current selection",
        "dijit/Tree._TreeNode[]",
        "summary:",
        "set the list of selected nodes to be exactly newSelection. All changes to the",
        "selection should be passed through this function, which ensures that derived",
        "attributes are kept up to date. Anchor will be deleted if it has been removed",
        "from the selection, but no new anchor will be added by this function.",
        "newSelection: Node[]",
        "list of tree nodes to make selected",
        "summary:",
        "Returns a copy of xs which lacks any objects",
        "occurring in ys. Checks for membership by",
        "modifying and then reading the object, so it will",
        "not properly handle sets of numbers or strings.",
        "clean up after ourselves.",
        "summary:",
        "Update the following tree properties from the current selection:",
        "path[s], selectedItem[s], selectedNode[s]",
        "summary:",
        "Returns paths of nodes that were selected previously and saved in the cookie.",
        "mouse events",
        "summary:",
        "Event processor for onmousedown/ontouchstart",
        "e: Event",
        "onmousedown/ontouchstart event",
        "tags:",
        "protected",
        "ignore click on expando node",
        "Prevent text selection while dragging on desktop, see #16328.   But don't call preventDefault()",
        "for mobile because it will break things completely, see #15838.  Also, don't preventDefault() on",
        "MSPointerDown or pointerdown events, because that stops the mousedown event from being generated,",
        "see #17709.",
        "TODO: remove this completely in 2.0.  It shouldn't be needed since dojo/dnd/Manager already",
        "calls preventDefault() for the \"selectstart\" event.  It can also be achieved via CSS:",
        "http://stackoverflow.com/questions/826782/css-rule-to-disable-text-selection-highlighting",
        "Ignore right click",
        "if shift key is not pressed, and the node is already in the selection,",
        "delay deselection until onmouseup so in the case of DND, deselection",
        "will be canceled by onmousemove.",
        "summary:",
        "Event processor for onmouseup/ontouchend",
        "e: Event",
        "onmouseup/ontouchend event",
        "tags:",
        "protected",
        "_doDeselect is the flag to indicate that the user wants to either ctrl+click on",
        "a already selected item (to deselect the item), or click on a not-yet selected item",
        "(which should remove all current selection, and add the clicked item). This can not",
        "be done in onMouseDown, because the user may start a drag after mousedown. By moving",
        "the deselection logic here, the user can drags an already selected item.",
        "===== e =====",
        "summary:",
        "event processor for onmousemove/ontouchmove",
        "e: Event",
        "onmousemove/ontouchmove event",
        "IE",
        "TODO: does not yet work if n1 and/or n2 is a text node",
        "FF, Opera",
        "Webkit",
        "summary:",
        "Add or remove the given node from selection, responding",
        "to a user action such as a click or keypress.",
        "multi: Boolean",
        "Indicates whether this is meant to be a multi-select action (e.g. ctrl-click)",
        "range: Boolean",
        "Indicates whether this is meant to be a ranged action (e.g. shift-click)",
        "tags:",
        "protected",
        "current is after anchor",
        "current is before anchor",
        "add everything betweeen begin and end inclusively",
        "String",
        "summary:",
        "Returns the dojo/dnd/Container._Item (representing a dragged node) by it's key (id).",
        "Called by dojo/dnd/Source.checkAcceptance().",
        "tags:",
        "protected",
        "dojo/dnd/Container._Item",
        "Function",
        "Object?",
        "summary:",
        "Iterates over selected items;",
        "see `dojo/dnd/Container.forInItems()` for details",
        "console.log(\"selected item id: \" + id);",
        "module:",
        "dojo/html",
        "summary:",
        "TODOC",
        "the parser might be needed..",
        "idCounter is incremented with each instantiation to allow assignment of a unique id for tracking, logging purposes",
        "String",
        "summary:",
        "removes !DOCTYPE and title elements from the html string.",
        "",
        "khtml is picky about dom faults, you can't attach a style or `<title>` node as child of body",
        "must go into head, so we need to cut out those tags",
        "cont:",
        "An html string for insertion into the dom",
        "",
        "String",
        "=====\n\t dojo.html._emptyNode = function(node){\n\t\t // summary:\n\t\t //\t\tRemoves all child nodes from the given node.   Deprecated, should use dojo/dom-constuct.empty() directly\n\t\t //\t\tinstead.\n\t\t // node: DOMNode\n\t\t //\t\tthe parent element\n\t };\n\t =====",
        "DomNode",
        "String|DomNode|NodeList",
        "summary:",
        "inserts the given content into the given node",
        "node:",
        "the parent element",
        "content:",
        "the content to be set on the parent element.",
        "This can be an html string, a node reference or a NodeList, dojo/NodeList, Array or other enumerable list of nodes",
        "always empty",
        "handle as enumerable, but it may shrink as we enumerate it",
        "pass nodes, documentFragments and unknowns through to dojo.place",
        "return DomNode",
        "we wrap up the content-setting operation in a object",
        "node: DomNode|String",
        "An node which will be the parent element that we set content into",
        "content: String|DomNode|DomNode[]",
        "The content to be placed in the node. Can be an HTML string, a node reference, or a enumerable list of nodes",
        "id: String?",
        "Usually only used internally, and auto-generated with each instance",
        "cleanContent: Boolean",
        "Should the content be treated as a full html document,",
        "and the real content stripped of <html>, <body> wrapper before injection",
        "extractContent: Boolean",
        "Should the content be treated as a full html document,",
        "and the real content stripped of `<html> <body>` wrapper before injection",
        "parseContent: Boolean",
        "Should the node by passed to the parser after the new content is set",
        "parserScope: String",
        "Flag passed to parser.\tRoot for attribute names to search for.\t  If scopeName is dojo,",
        "will search for data-dojo-type (or dojoType).  For backwards compatibility",
        "reasons defaults to dojo._scopeName (which is \"dojo\" except when",
        "multi-version support is used, when it will be something like dojo16, dojo20, etc.)",
        "startup: Boolean",
        "Start the child widgets after parsing them.\t  Only obeyed if parseContent is true.",
        "lifecycle methods",
        "Object",
        "String|DomNode",
        "summary:",
        "Provides a configurable, extensible object to wrap the setting on content on a node",
        "call the set() method to actually set the content..",
        "the original params are mixed directly into the instance \"this\"",
        "give precedence to params.node vs. the node argument",
        "and ensure its a node, not an id string",
        "String|DomNode|NodeList?",
        "Object?",
        "summary:",
        "front-end to the set-content sequence",
        "cont:",
        "An html string, node or enumerable list of nodes for insertion into the dom",
        "If not provided, the object's content property will be used",
        "in the re-use scenario, set needs to be able to mixin new configuration",
        "Make dojox/html/_ContentSetter.set() return a Promise that resolves when load and parse complete.",
        "Vanilla dojo/html._ContentSetter.set() returns a DOMNode for back compat.   For 2.0, switch it to",
        "return a Deferred like above.",
        "summary:",
        "sets the content on the node",
        "can't proceed",
        "check if a domfault occurs when we are appending this.errorMessage",
        "like for instance if domNode is a UL and we try append a DIV",
        "FIXME: need to allow the user to provide a content error message string",
        "always put back the node for the next method",
        "DomNode",
        "summary:",
        "cleanly empty out existing content",
        "If there is a parse in progress, cancel it.",
        "destroy any widgets from a previous run",
        "NOTE: if you don't want this you'll need to empty",
        "the parseResults array property yourself to avoid bad things happening",
        "this is fast, but if you know its already empty or safe, you could",
        "override empty to skip this step",
        "summary:",
        "Called after instantiation, but before set();",
        "It allows modification of any of the object properties -",
        "including the node and content provided - before the set operation actually takes place",
        "This default implementation checks for cleanContent and extractContent flags to",
        "optionally pre-process html string content",
        "clean out the node and any cruft associated with it - like widgets",
        "DomNode",
        "summary:",
        "Called after set(), when the new content has been pushed into the node",
        "It provides an opportunity for post-processing before handing back the node to the caller",
        "This default implementation checks a parseContent flag to optionally run the dojo parser over the new content",
        "populates this.parseResults and this.parseDeferred if you need those..",
        "DomNode",
        "TODO: for 2.0 return a Promise indicating that the parse completed.",
        "summary:",
        "manually reset the Setter instance if its being re-used for example for another set()",
        "description:",
        "tearDown() is not called automatically.",
        "In normal use, the Setter instance properties are simply allowed to fall out of scope",
        "but the tearDown method can be called to explicitly reset this instance.",
        "mix properties/methods into the instance",
        "TODO: the intention with tearDown is to put the Setter's state",
        "back to that of the original constructor (vs. deleting/resetting everything regardless of ctor params)",
        "so we could do something here to move the original properties aside for later restoration",
        "TODO: here's our opportunity to mask the properties we don't consider configurable/overridable",
        ".. but history shows we'll almost always guess wrong",
        "summary:",
        "runs the dojo parser over the node contents, storing any results in this.parseResults",
        "and the parse promise in this.parseDeferred",
        "Any errors resulting from parsing are passed to _onError for handling",
        "store the results (widgets, whatever) for potential retrieval",
        "summary:",
        "shows user the string that is returned by on[type]Error",
        "override/implement on[type]Error and return your own string to customize",
        "a empty string won't change current content",
        "end declare()",
        "DomNode",
        "String|DomNode|NodeList",
        "Object?",
        "summary:",
        "inserts (replaces) the given content into the given node. dojo.place(cont, node, \"only\")",
        "may be a better choice for simple HTML insertion.",
        "description:",
        "Unless you need to use the params capabilities of this method, you should use",
        "dojo.place(cont, node, \"only\"). dojo.place() has more robust support for injecting",
        "an HTML string into the DOM, but it only handles inserting an HTML string as DOM",
        "elements, or inserting a DOM node. dojo.place does not handle NodeList insertions",
        "or the other capabilities as defined by the params object for this method.",
        "node:",
        "the parent element that will receive the content",
        "cont:",
        "the content to be set on the parent element.",
        "This can be an html string, a node reference or a NodeList, dojo/NodeList, Array or other enumerable list of nodes",
        "params:",
        "Optional flags/properties to configure the content-setting. See dojo/html/_ContentSetter",
        "example:",
        "A safe string/node/nodelist content replacement/injection with hooks for extension",
        "Example Usage:",
        "|\thtml.set(node, \"some string\");",
        "|\thtml.set(node, contentNode, {options});",
        "|\thtml.set(node, myNode.childNodes, {options});",
        "simple and fast",
        "more options but slower",
        "note the arguments are reversed in order, to match the convention for instantiation via the parser",
        "declare",
        "domAttr.set",
        "domClass.add domClass.remove",
        "domConstruct.create domConstruct.place",
        "event.stop",
        "keys",
        "lang.getObject",
        "module:",
        "dijit/_PaletteMixin",
        "summary:",
        "A keyboard accessible palette, for picking a color/emoticon/etc.",
        "description:",
        "A mixin for a grid showing various entities, so the user can pick a certain entity.",
        "defaultTimeout: Number",
        "Number of milliseconds before a held key or button becomes typematic",
        "timeoutChangeRate: Number",
        "Fraction of time used to change the typematic timer between events",
        "1.0 means that each typematic event fires at defaultTimeout intervals",
        "Less than 1.0 means that each typematic event fires at an increasing faster rate",
        "value: String",
        "Currently selected color/emoticon/etc.",
        "_selectedCell: [private] Integer",
        "Index of the currently selected cell. Initially, none selected",
        "=====\n\t// _currentFocus: [private] DomNode\n\t//\t\tThe currently focused cell (if the palette itself has focus), or otherwise\n\t//\t\tthe cell to be focused when the palette itself gets focus.\n\t//\t\tDifferent from value, which represents the selected (i.e. clicked) cell.\n\t_currentFocus: null,\n=====",
        "=====\n\t// _xDim: [protected] Integer\n\t//\t\tThis is the number of cells horizontally across.\n\t_xDim: null,\n=====",
        "=====\n\t// _yDim: [protected] Integer\n\t//\t\tThis is the number of cells vertically down.\n\t_yDim: null,\n=====",
        "tabIndex: String",
        "Widget tab index.",
        "cellClass: [protected] String",
        "CSS class applied to each cell in the palette",
        "dyeClass: [protected] Constructor",
        "Constructor for Object created for each cell of the palette.",
        "dyeClass should implements dijit.Dye interface",
        "===== , row, col, title =====",
        "summary:",
        "Return instance of dijit.Dye for specified cell of palette",
        "tags:",
        "extension",
        "Remove string support for 2.0",
        "summary:",
        "Subclass must call _preparePalette() from postCreate(), passing in the tooltip",
        "for each cell",
        "choices: String[][]",
        "id's for each cell of the palette, used to create Dye JS object for each cell",
        "titles: String[]",
        "Localized tooltip for each cell",
        "prepare cell inner structure",
        "save cell info into _cells",
        "Now set all events",
        "The palette itself is navigated to with the tab key on the keyboard",
        "Keyboard navigation within the Palette is with the arrow keys",
        "Spacebar selects the cell.",
        "For the up key the index is changed by negative the x dimension.",
        "The down key the index is increase by the x dimension.",
        "Right and left move the index by 1.",
        "Set initial navigable node.",
        "summary:",
        "Focus this widget.  Puts focus on the most recently focused cell.",
        "The cell already has tabIndex set, just need to set CSS and focus it",
        "Event",
        "summary:",
        "Handler for click, enter key & space key. Selects the cell.",
        "evt:",
        "The event.",
        "tags:",
        "private",
        "Find TD associated with click event.   For ColorPalette user likely clicked IMG inside of TD",
        "probably can never happen, but just in case",
        "First focus the clicked cell, and then send onChange() notification.",
        "onChange() (via _setValueAttr) must be after the focus call, because",
        "it may trigger a refocus to somewhere else (like the Editor content area), and that",
        "second focus should win.",
        "DomNode",
        "summary:",
        "Sets which node is the focused cell.",
        "description:",
        "At any point in time there's exactly one",
        "cell with tabIndex != -1.   If focus is inside the palette then",
        "focus is on that cell.",
        "",
        "After calling this method, arrow key handlers and mouse click handlers",
        "should focus the cell in a setTimeout().",
        "tags:",
        "protected",
        "Remove tabIndex on old cell",
        "Set tabIndex of new cell",
        "summary:",
        "This selects a cell. It triggers the onChange event.",
        "value: String",
        "Value of the cell to select",
        "tags:",
        "protected",
        "priorityChange: Boolean?",
        "Optional parameter used to tell the select whether or not to fire",
        "onChange event.",
        "clear old selected cell",
        "search for cell matching specified value",
        "record new value, or null if no matching cell",
        "===== value =====",
        "summary:",
        "Callback when a cell is selected.",
        "value: String",
        "Value corresponding to cell.",
        "summary:",
        "This is the callback for typematic.",
        "It changes the focus and the highlighed cell.",
        "increment:",
        "How much the key is navigated.",
        "typeCount:",
        "How many times typematic has fired.",
        "tags:",
        "private",
        "typecount == -1 means the key is released.",
        "Actually focus the node, for the benefit of screen readers.",
        "Use defer because IE doesn't like changing focus inside of an event handler",
        "DomNode",
        "summary:",
        "Get JS object for given cell DOMNode",
        "=====\ndeclare(\"dijit.Dye\",\n\tnull,\n\t{\n\t\t// summary:\n\t\t//\t\tInterface for the JS Object associated with a palette cell (i.e. DOMNode)\n\n\t\tconstructor: function(alias, row, col){\n\t\t\t// summary:\n\t\t\t//\t\tInitialize according to value or alias like \"white\"\n\t\t\t// alias: String\n\t\t},\n\n\t\tgetValue: function(){\n\t\t\t// summary:\n\t\t\t//\t\tReturn \"value\" of cell; meaning of \"value\" varies by subclass.\n\t\t\t// description:\n\t\t\t//\t\tFor example color hex value, emoticon ascii value etc, entity hex value.\n\t\t},\n\n\t\tfillCell: function(cell, blankGif){\n\t\t\t// summary:\n\t\t\t//\t\tAdd cell DOMNode inner structure\n\t\t\t// cell: DomNode\n\t\t\t//\t\tThe surrounding cell\n\t\t\t// blankGif: String\n\t\t\t//\t\tURL for blank cell image\n\t\t}\n\t}\n);\n=====",
        "declare",
        "kernel.deprecated",
        "i18n.getLocalization",
        "module:",
        "dijit/form/ValidationTextBox",
        "=====\n\tvar __Constraints = {\n\t\t// locale: String\n\t\t//\t\tlocale used for validation, picks up value from this widget's lang attribute\n\t\t// _flags_: anything\n\t\t//\t\tvarious flags passed to pattern function\n\t};\n\t=====",
        "summary:",
        "Base class for textbox widgets with the ability to validate content of various types and provide user feedback.",
        "required: Boolean",
        "User is required to enter data into this field.",
        "promptMessage: String",
        "If defined, display this hint string immediately on focus to the textbox, if empty.",
        "Also displays if the textbox value is Incomplete (not yet valid but will be with additional input).",
        "Think of this like a tooltip that tells the user what to do, not an error message",
        "that tells the user what they've done wrong.",
        "",
        "Message disappears when user starts typing.",
        "invalidMessage: String",
        "The message to display if value is invalid.",
        "The translated string value is read from the message file by default.",
        "Set to \"\" to use the promptMessage instead.",
        "missingMessage: String",
        "The message to display if value is empty and the field is required.",
        "The translated string value is read from the message file by default.",
        "Set to \"\" to use the invalidMessage instead.",
        "message: String",
        "Currently error/prompt message.",
        "When using the default tooltip implementation, this will only be",
        "displayed when the field is focused.",
        "constraints: __Constraints",
        "user-defined object needed to pass parameters to the validator functions",
        "pattern: [extension protected] String|Function(constraints) returning a string.",
        "This defines the regular expression used to validate the input.",
        "Do not add leading ^ or $ characters since the widget adds these.",
        "A function may be used to generate a valid pattern when dependent on constraints or other runtime factors.",
        "set('pattern', String|Function).",
        "regExp: Deprecated [extension protected] String.  Use \"pattern\" instead.",
        "__Constraints",
        "===== constraints =====",
        "summary:",
        "Deprecated.  Use set('pattern', Function) instead.",
        "state: [readonly] String",
        "Shows current state (ie, validation result) of input (\"\"=Normal, Incomplete, or Error)",
        "tooltipPosition: String[]",
        "See description of `dijit/Tooltip.defaultPosition` for details on this parameter.",
        "Function",
        "backward compat with this.regExpGen(this.constraints)",
        "String",
        "summary:",
        "Hook so set('value', ...) works.",
        "anything",
        "__Constraints",
        "summary:",
        "Overridable function used to validate the text input against the regular expression.",
        "tags:",
        "protected",
        "Boolean",
        "summary:",
        "Returns true if the value is either already valid or could be made valid by appending characters.",
        "This is used for validation while the user [may be] still typing.",
        "Boolean",
        "===== isFocused =====",
        "summary:",
        "Tests if value is valid.",
        "Can override with your own routine in a subclass.",
        "tags:",
        "protected",
        "summary:",
        "Checks for whitespace",
        "Boolean",
        "Boolean",
        "===== isFocused =====",
        "summary:",
        "Return an error message to show if appropriate",
        "tags:",
        "protected",
        "String",
        "Boolean",
        "===== isFocused =====",
        "summary:",
        "Return a hint message to show when widget is first focused",
        "tags:",
        "protected",
        "String",
        "Boolean",
        "summary:",
        "Called by oninit, onblur, and onkeypress.",
        "description:",
        "Show missing or invalid messages if appropriate, and highlight textbox field.",
        "tags:",
        "protected",
        "we want the error to show up after a blur and refocus",
        "show the prompt whenever the value is not yet complete",
        "no Incomplete warnings while focused",
        "show the prompt whenever there's no error and no text",
        "String",
        "summary:",
        "Overridable method to display validation errors/hints.",
        "By default uses a tooltip.",
        "tags:",
        "extension",
        "Overrides TextBox._refreshState()",
        "should instead be this._started but that would require all programmatic ValidationTextBox instantiations to call startup()",
        "INITIALIZATION METHODS ///////////////////////////////////////",
        "===== , srcNodeRef =====",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Hash of initialization parameters for widget, including scalar values (like title, duration etc.)",
        "and functions, typically callbacks like onClick.",
        "The hash can contain any of the widget's properties, excluding read-only properties.",
        "srcNodeRef: DOMNode|String?",
        "If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree.",
        "after all _set* methods have run",
        "__Constraints",
        "String|Function",
        "don't set on INPUT to avoid native HTML5 validation",
        "__Constraints",
        "summary:",
        "Hook to get the current regExp and to compute the partial validation RE.",
        "parse the regexp and produce a new regexp that matches valid subsets",
        "if the regexp is .* then there's no use in matching subsets since everything is valid",
        "this is needed for now since the above regexp parsing needs more test verification",
        "should never be here unless the original RE is bad or the parsing is bad",
        "should never be here unless the original RE is bad or the parsing is bad",
        "this needs to happen now (and later) due to codependency on _set*Attr calls attachPoints",
        "Boolean",
        "call FormValueWidget._setDisabledAttr()",
        "Boolean",
        "String",
        "Overrides dijit/form/TextBox.reset() by also",
        "hiding errors about partial matches",
        "the message still exists but for back-compat, and to erase the tooltip",
        "(if the message is being displayed as a tooltip), call displayMessage('')",
        "array.filter array.forEach array.map",
        "cookie",
        "declare",
        "domClass.add domClass.remove domClass.toggle",
        "domConstruct.destroy domConstruct.place",
        "domGeometry.marginBox",
        "domStyle.style",
        "event.stop",
        "lang.getObject lang.hitch",
        "layoutUtils.layoutChildren",
        "module:",
        "dijit/layout/BorderContainer",
        "summary:",
        "A draggable spacer between two items in a `dijit/layout/BorderContainer`.",
        "description:",
        "This is instantiated by `dijit/layout/BorderContainer`.  Users should not",
        "create it directly.",
        "tags:",
        "private",
        "=====\n\t// container: [const] dijit/layout/BorderContainer\n\t//\t\tPointer to the parent BorderContainer\n\tcontainer: null,\n\n\t// child: [const] dijit/layout/_LayoutWidget\n\t//\t\tPointer to the pane associated with this splitter\n\tchild: null,\n\n\t// region: [const] String\n\t//\t\tRegion of pane associated with this splitter.\n\t//\t\t\"top\", \"bottom\", \"left\", \"right\".\n\tregion: null,\n=====",
        "live: [const] Boolean",
        "If true, the child's size changes and the child widget is redrawn as you drag the splitter;",
        "otherwise, the size doesn't change until you drop the splitter (by mouse-up)",
        "restore old size",
        "summary:",
        "Return the maximum size that my corresponding pane can be set to",
        "can expand until center is crushed to 0",
        "Safeguard in case the stop event was missed.  Shouldn't be necessary if we always get the mouse up.",
        "TODO: disable live for IE6?",
        "create fake splitter to display at old position while we drag",
        "Performance: load data info local vars for onmousevent function closure",
        "style attribute of splitter to adjust",
        "TODO: setting style directly (usually) sets content box size, need to set margin box size",
        "summary:",
        "Handler for onmouseenter / onmouseleave events",
        "TODO: redundant with onmousemove?",
        "Event",
        "should we apply typematic to this?",
        "break;",
        "this.inherited(arguments);",
        "summary:",
        "Just a spacer div to separate side pane from center pane.",
        "Basically a trick to lookup the gutter/splitter width from the theme.",
        "description:",
        "Instantiated by `dijit/layout/BorderContainer`.  Users should not",
        "create directly.",
        "tags:",
        "private",
        "summary:",
        "Provides layout in up to 5 regions, a mandatory center with optional borders along its 4 sides.",
        "description:",
        "A BorderContainer is a box with a specified size, such as style=\"width: 500px; height: 500px;\",",
        "that contains a child widget marked region=\"center\" and optionally children widgets marked",
        "region equal to \"top\", \"bottom\", \"leading\", \"trailing\", \"left\" or \"right\".",
        "Children along the edges will be laid out according to width or height dimensions and may",
        "include optional splitters (splitter=\"true\") to make them resizable by the user.  The remaining",
        "space is designated for the center region.",
        "",
        "The outer size must be specified on the BorderContainer node.  Width must be specified for the sides",
        "and height for the top and bottom, respectively.  No dimensions should be specified on the center;",
        "it will fill the remaining space.  Regions named \"leading\" and \"trailing\" may be used just like",
        "\"left\" and \"right\" except that they will be reversed in right-to-left environments.",
        "",
        "For complex layouts, multiple children can be specified for a single region.   In this case, the",
        "layoutPriority flag on the children determines which child is closer to the edge (low layoutPriority)",
        "and which child is closer to the center (high layoutPriority).   layoutPriority can also be used",
        "instead of the design attribute to control layout precedence of horizontal vs. vertical panes.",
        "",
        "See `BorderContainer.ChildWidgetProperties` for details on the properties that can be set on",
        "children of a `BorderContainer`.",
        "example:",
        "|\t<div data-dojo-type=\"dijit/layout/BorderContainer\" data-dojo-props=\"design: 'sidebar', gutters: false\"",
        "|            style=\"width: 400px; height: 300px;\">",
        "|\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'top'\">header text</div>",
        "|\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'right', splitter: true\" style=\"width: 200px;\">table of contents</div>",
        "|\t\t<div data-dojo-type=\"dijit/layout/ContentPane\" data-dojo-props=\"region: 'center'\">client area</div>",
        "|\t</div>",
        "design: String",
        "Which design is used for the layout:",
        "",
        "- \"headline\" (default) where the top and bottom extend the full width of the container",
        "- \"sidebar\" where the left and right sides extend from top to bottom.",
        "gutters: [const] Boolean",
        "Give each pane a border and margin.",
        "Margin determined by domNode.paddingLeft.",
        "When false, only resizable panes have a gutter (i.e. draggable splitter) for resizing.",
        "liveSplitters: [const] Boolean",
        "Specifies whether splitters resize as you drag (true) or only upon mouseup (false)",
        "persist: Boolean",
        "Save splitter positions in a cookie.",
        "_splitterClass: Function||String",
        "Optional hook to override the default Splitter widget used by BorderContainer",
        "change class name to indicate that BorderContainer is being used purely for",
        "layout (like LayoutContainer) rather than for pretty formatting.",
        "dijit/_WidgetBase",
        "Override _LayoutWidget._setupChild().",
        "Create draggable splitter for resizing pane,",
        "or alternately if splitter=false but BorderContainer.gutters=true then",
        "insert dummy div just for spacing",
        "for back-compat, remove in 2.0",
        "Splitters aren't added as Contained children, so we need to call startup explicitly",
        "TODO: technically wrong since it overwrites \"trailing\" with \"left\" etc.",
        "Implement _LayoutWidget.layout() virtual method.",
        "dijit/_WidgetBase",
        "Integer?",
        "Override _LayoutWidget.addChild().",
        "OPT",
        "dijit/_WidgetBase",
        "Override _LayoutWidget.removeChild().",
        "Clean up whatever style changes we made to the child pane.",
        "Unclear how height and width should be handled.",
        "Override _LayoutWidget.getChildren() to only return real children, not the splitters.",
        "TODO: remove in 2.0",
        "String",
        "summary:",
        "Returns the widget responsible for rendering the splitter associated with region",
        "tags:",
        "deprecated",
        "Overrides _LayoutWidget.resize().",
        "resetting potential padding to 0px to provide support for 100% width/height + padding",
        "TODO: this hack doesn't respect the box model and is a temporary fix",
        "String?",
        "Number?",
        "summary:",
        "This is the main routine for setting size/position of each child.",
        "description:",
        "With no arguments, measures the height of top/bottom panes, the width",
        "of left/right panes, and then sizes all panes accordingly.",
        "",
        "With changedRegion specified (as \"left\", \"top\", \"bottom\", or \"right\"),",
        "it changes that region's width/height to changedRegionSize and",
        "then resizes other regions that were affected.",
        "changedChildId:",
        "Id of the child which should be resized because splitter was dragged.",
        "changedChildSize:",
        "The new width/height (in pixels) to make specified child",
        "We are currently hidden, or we haven't been sized by our parent yet.",
        "Abort.   Someone will resize us later.",
        "Generate list of wrappers of my children in the order that I want layoutChildren()",
        "to process them (i.e. from the outside to the inside)",
        "Make new list, combining the externally specified children with splitters and gutters",
        "Compute the box in which to lay out my children",
        "Layout the children, possibly changing size due to a splitter drag",
        "Destroy splitters first, while getChildren() still works",
        "Then destroy the real children, and myself",
        "summary:",
        "These properties can be specified for the children of a BorderContainer.",
        "region: [const] String",
        "Values: \"top\", \"bottom\", \"leading\", \"trailing\", \"left\", \"right\", \"center\".",
        "See the `dijit/layout/BorderContainer` description for details.",
        "layoutPriority: [const] Number",
        "Children with a higher layoutPriority will be placed closer to the BorderContainer center,",
        "between children with a lower layoutPriority.",
        "splitter: [const] Boolean",
        "Parameter for children where region != \"center\".",
        "If true, enables user to resize the widget by putting a draggable splitter between",
        "this widget and the region=center widget.",
        "minSize: [const] Number",
        "Specifies a minimum size (in pixels) for this widget when resized by a splitter.",
        "maxSize: [const] Number",
        "Specifies a maximum size (in pixels) for this widget when resized by a splitter.",
        "Since any widget can be specified as a LayoutContainer child, mix it",
        "into the base widget class.  (This is a hack, but it's effective.)",
        "This is for the benefit of the parser.   Remove for 2.0.  Also, hide from doc viewer.",
        "===== {} || =====",
        "For monkey patching",
        "===== \"./_base/declare\", =====",
        "===== declare, =====",
        "module:",
        "dojo/number",
        "summary:",
        "localized formatting and parsing routines for Number",
        "=====\nnumber.__FormatOptions = declare(null, {\n\t// pattern: String?\n\t//\t\toverride [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)\n\t//\t\twith this string.  Default value is based on locale.  Overriding this property will defeat\n\t//\t\tlocalization.  Literal characters in patterns are not supported.\n\t// type: String?\n\t//\t\tchoose a format type based on the locale from the following:\n\t//\t\tdecimal, scientific (not yet supported), percent, currency. decimal by default.\n\t// places: Number?\n\t//\t\tfixed number of decimal places to show.  This overrides any\n\t//\t\tinformation in the provided pattern.\n\t// round: Number?\n\t//\t\t5 rounds to nearest .5; 0 rounds to nearest whole (default). -1\n\t//\t\tmeans do not round.\n\t// locale: String?\n\t//\t\toverride the locale used to determine formatting rules\n\t// fractional: Boolean?\n\t//\t\tIf false, show no decimal places, overriding places and pattern settings.\n});\n=====",
        "Number",
        "number.__FormatOptions?",
        "summary:",
        "Format a Number as a String, using locale-specific settings",
        "description:",
        "Create a string from a Number using a known localized pattern.",
        "Formatting patterns appropriate to the locale are chosen from the",
        "[Common Locale Data Repository](http://unicode.org/cldr) as well as the appropriate symbols and",
        "delimiters.",
        "If value is Infinity, -Infinity, or is not a valid JavaScript number, return null.",
        "value:",
        "the number to be formatted",
        "null",
        "String",
        "number._numberPatternRE = /(?:[#0]*,?)*[#0](?:\\.0*#*)?/; // not precise, but good enough",
        "not precise, but good enough",
        "Number",
        "String",
        "number.__FormatOptions?",
        "summary:",
        "Apply pattern to format value as a string using options. Gives no",
        "consideration to local customs.",
        "value:",
        "the number to be formatted.",
        "pattern:",
        "a pattern string as described by",
        "[unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)",
        "options: number.__FormatOptions?",
        "_applyPattern is usually called via `dojo/number.format()` which",
        "populates an extra property in the options parameter, \"customs\".",
        "The customs object specifies group and decimal parameters if set.",
        "TODO: support escapes",
        "TODO: only test against unescaped",
        "per mille",
        "mixins instead?",
        "Should these be mixins instead?",
        "TODO: support @ sig figs?",
        "Number",
        "Number?",
        "Number?",
        "summary:",
        "Rounds to the nearest value with the given number of decimal places, away from zero",
        "description:",
        "Rounds to the nearest value with the given number of decimal places, away from zero if equal.",
        "Similar to Number.toFixed(), but compensates for browser quirks. Rounding can be done by",
        "fractional increments also, such as the nearest quarter.",
        "NOTE: Subject to floating point errors.  See dojox/math/round for experimental workaround.",
        "value:",
        "The number to round",
        "places:",
        "The number of decimal places where rounding takes place.  Defaults to 0 for whole rounding.",
        "Must be non-negative.",
        "increment:",
        "Rounds next place to nearest value of increment/10.  10 by default.",
        "example:",
        "|\t>>> number.round(-0.5)",
        "|\t-1",
        "|\t>>> number.round(162.295, 2)",
        "|\t162.29  // note floating point error.  Should be 162.3",
        "|\t>>> number.round(10.71, 0, 2.5)",
        "|\t10.75",
        "Number",
        "(isIE) toFixed() bug workaround: Rounding fails on IE when most significant digit",
        "is just after the rounding place and is >=5",
        "Use \"doc hint\" so the doc parser ignores this new definition of round(), and uses the one above.",
        "===== number.round = round; =====",
        "=====\nnumber.__FormatAbsoluteOptions = declare(null, {\n\t// decimal: String?\n\t//\t\tthe decimal separator\n\t// group: String?\n\t//\t\tthe group separator\n\t// places: Number|String?\n\t//\t\tnumber of decimal places.  the range \"n,m\" will format to m places.\n\t// round: Number?\n\t//\t\t5 rounds to nearest .5; 0 rounds to nearest whole (default). -1\n\t//\t\tmeans don't round.\n});\n=====",
        "Number",
        "String",
        "number.__FormatAbsoluteOptions?",
        "summary:",
        "Apply numeric pattern to absolute value using options. Gives no",
        "consideration to local customs.",
        "value:",
        "the number to be formatted, ignores sign",
        "pattern:",
        "the number portion of a pattern (e.g. `#,##0.00`)",
        "avoid a loop; pick a limit",
        "Pad fractional with trailing zeros",
        "Truncate fractional",
        "Pad whole with leading zeros",
        "Truncate whole",
        "Add group separators",
        "=====\nnumber.__RegexpOptions = declare(null, {\n\t// pattern: String?\n\t//\t\toverride [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)\n\t//\t\twith this string.  Default value is based on locale.  Overriding this property will defeat\n\t//\t\tlocalization.\n\t// type: String?\n\t//\t\tchoose a format type based on the locale from the following:\n\t//\t\tdecimal, scientific (not yet supported), percent, currency. decimal by default.\n\t// locale: String?\n\t//\t\toverride the locale used to determine formatting rules\n\t// strict: Boolean?\n\t//\t\tstrict parsing, false by default.  Strict parsing requires input as produced by the format() method.\n\t//\t\tNon-strict is more permissive, e.g. flexible on white space, omitting thousands separators\n\t// places: Number|String?\n\t//\t\tnumber of decimal places to accept: Infinity, a positive number, or\n\t//\t\ta range \"n,m\".  Defined by pattern or Infinity if pattern not provided.\n});\n=====",
        "number.__RegexpOptions?",
        "summary:",
        "Builds the regular needed to parse a number",
        "description:",
        "Returns regular expression with positive and negative match, group",
        "and decimal separators",
        "String",
        "Object?",
        "TODO: memoize?",
        "per mille",
        "TODO: handle quoted escapes",
        "special condition for percent (factor != 1)",
        "allow decimal places even if not specified in pattern",
        "required fractional, unless otherwise specified",
        "substitute the currency symbol for the placeholder in the pattern",
        "TODO: substitute localized sign/percent/permille/etc.?",
        "normalize whitespace and return",
        "Object",
        "=====\nnumber.__ParseOptions = declare(null, {\n\t// pattern: String?\n\t//\t\toverride [formatting pattern](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)\n\t//\t\twith this string.  Default value is based on locale.  Overriding this property will defeat\n\t//\t\tlocalization.  Literal characters in patterns are not supported.\n\t// type: String?\n\t//\t\tchoose a format type based on the locale from the following:\n\t//\t\tdecimal, scientific (not yet supported), percent, currency. decimal by default.\n\t// locale: String?\n\t//\t\toverride the locale used to determine formatting rules\n\t// strict: Boolean?\n\t//\t\tstrict parsing, false by default.  Strict parsing requires input as produced by the format() method.\n\t//\t\tNon-strict is more permissive, e.g. flexible on white space, omitting thousands separators\n\t// fractional: Boolean|Array?\n\t//\t\tWhether to include the fractional portion, where the number of decimal places are implied by pattern\n\t//\t\tor explicit 'places' parameter.  The value [true,false] makes the fractional portion optional.\n});\n=====",
        "String",
        "number.__ParseOptions?",
        "summary:",
        "Convert a properly formatted string to a primitive Number, using",
        "locale-specific settings.",
        "description:",
        "Create a Number from a string using a known localized pattern.",
        "Formatting patterns are chosen appropriate to the locale",
        "and follow the syntax described by",
        "[unicode.org TR35](http://www.unicode.org/reports/tr35/#Number_Format_Patterns)",
        "Note that literal characters in patterns are not supported.",
        "expression:",
        "A string representation of a Number",
        "NaN",
        "match for the positive expression",
        "NaN",
        "matched the negative pattern",
        "Transform it to something Javascript can parse as a number.  Normalize",
        "decimal point and strip out group separators or alternate forms of whitespace",
        "Adjust for negative sign, percent, etc. as necessary",
        "Number",
        "=====\nnumber.__RealNumberRegexpFlags = declare(null, {\n\t// places: Number?\n\t//\t\tThe integer number of decimal places or a range given as \"n,m\".  If\n\t//\t\tnot given, the decimal part is optional and the number of places is\n\t//\t\tunlimited.\n\t// decimal: String?\n\t//\t\tA string for the character used as the decimal point.  Default\n\t//\t\tis \".\".\n\t// fractional: Boolean|Array?\n\t//\t\tWhether decimal places are used.  Can be true, false, or [true,\n\t//\t\tfalse].  Default is [true, false] which means optional.\n\t// exponent: Boolean|Array?\n\t//\t\tExpress in exponential notation.  Can be true, false, or [true,\n\t//\t\tfalse]. Default is [true, false], (i.e. will match if the\n\t//\t\texponential part is present are not).\n\t// eSigned: Boolean|Array?\n\t//\t\tThe leading plus-or-minus sign on the exponent.  Can be true,\n\t//\t\tfalse, or [true, false].  Default is [true, false], (i.e. will\n\t//\t\tmatch if it is signed or unsigned).  flags in regexp.integer can be\n\t//\t\tapplied.\n});\n=====",
        "__RealNumberRegexpFlags?",
        "summary:",
        "Builds a regular expression to match a real number in exponential",
        "notation",
        "assign default values to missing parameters",
        "TODO: use mixin instead?",
        "allow for decimals without integers, e.g. .25",
        "String",
        "=====\nnumber.__IntegerRegexpFlags = declare(null, {\n\t// signed: Boolean?\n\t//\t\tThe leading plus-or-minus sign. Can be true, false, or `[true,false]`.\n\t//\t\tDefault is `[true, false]`, (i.e. will match if it is signed\n\t//\t\tor unsigned).\n\t// separator: String?\n\t//\t\tThe character used as the thousands separator. Default is no\n\t//\t\tseparator. For more than one symbol use an array, e.g. `[\",\", \"\"]`,\n\t//\t\tmakes ',' optional.\n\t// groupSize: Number?\n\t//\t\tgroup size between separators\n\t// groupSize2: Number?\n\t//\t\tsecond grouping, where separators 2..n have a different interval than the first separator (for India)\n});\n=====",
        "number.__IntegerRegexpFlags?",
        "summary:",
        "Builds a regular expression that matches an integer",
        "assign default values to missing parameters",
        "TODO: should we continue to enforce that numbers with separators begin with 1-9?  See #6933",
        "String",
        "module:",
        "dojo/data/util/filter",
        "summary:",
        "TODOC",
        "String",
        "boolean?",
        "summary:",
        "Helper function to convert a simple pattern to a regular expression for matching.",
        "description:",
        "Returns a regular expression object that conforms to the defined conversion rules.",
        "For example:",
        "",
        "- ca*   -> /^ca.*$/",
        "- *ca*  -> /^.*ca.*$/",
        "- *c\\*a*  -> /^.*c\\*a.*$/",
        "- *c\\*a?*  -> /^.*c\\*a..*$/",
        "",
        "and so on.",
        "pattern: string",
        "A simple matching pattern to convert that follows basic rules:",
        "",
        "- * Means match anything, so ca* means match anything starting with ca",
        "- ? Means match single character.  So, b?b will match to bob and bab, and so on.",
        "- \\ is an escape character.  So for example, \\* means do not treat * as a match, but literal character *.",
        "",
        "To use a \\ as a character in the string, it must be escaped.  So in the pattern it should be",
        "represented by \\\\ to be treated as an ordinary \\ character instead of an escape.",
        "ignoreCase:",
        "An optional flag to indicate if the pattern matching should be treated as case-sensitive or not when comparing",
        "By default, it is assumed case sensitive.",
        "fallthrough",
        "RegExp",
        "RegExp",
        "array.forEach",
        "declare",
        "parser.parse",
        "module:",
        "dijit/_WidgetsInTemplateMixin",
        "summary:",
        "Mixin to supplement _TemplatedMixin when template contains widgets",
        "_earlyTemplatedStartup: Boolean",
        "A fallback to preserve the 1.0 - 1.3 behavior of children in",
        "templates having their startup called before the parent widget",
        "fires postCreate. Defaults to 'false', causing child widgets to",
        "have their .startup() called immediately before a parent widget",
        ".startup(), but always after the parent .postCreate(). Set to",
        "'true' to re-enable to previous, arguably broken, behavior.",
        "widgetsInTemplate: [protected] Boolean",
        "Should we parse the template to find widgets that might be",
        "declared in markup inside it?  (Remove for 2.0 and assume true)",
        "Before copying over content, instantiate widgets in template",
        "so data-dojo-props of widgets in the template can reference \"this\" to refer to me",
        "even in multi-version mode templates use dojoType/data-dojo-type",
        "_WidgetBase::destroy() will destroy any supporting widgets under this.domNode.",
        "If we wanted to, we could call this.own() on anything in this._startupWidgets that was moved outside",
        "of this.domNode (like Dialog, which is moved to <body>).",
        "declare",
        "number.format",
        "query",
        "module:",
        "dijit/form/HorizontalRuleLabels",
        "summary:",
        "Labels for `dijit/form/HorizontalSlider`",
        "labelStyle: String",
        "CSS style to apply to individual text labels",
        "labels: String[]?",
        "Array of text labels to render - evenly spaced from left-to-right or bottom-to-top.",
        "Alternately, minimum and maximum can be specified, to get numeric labels.",
        "numericMargin: Integer",
        "Number of generated numeric labels that should be rendered as '' on the ends when labels[] are not specified",
        "numericMinimum: Integer",
        "Leftmost label value for generated numeric labels when labels[] are not specified",
        "numericMaximum: Integer",
        "Rightmost label value for generated numeric labels when labels[] are not specified",
        "constraints: Object",
        "pattern, places, lang, et al (see dojo.number) for generated numeric labels when labels[] are not specified",
        "summary:",
        "Returns the value to be used in HTML for the label as part of the left: attribute",
        "tags:",
        "protected extension",
        "summary:",
        "Overridable function to return array of labels to use for this slider.",
        "Can specify a getLabels() method instead of a labels[] array, or min/max attributes.",
        "tags:",
        "protected extension",
        "if the labels array was not specified directly, then see if <li> children were",
        "for markup creation, labels are specified as child elements",
        "if the labels were not specified directly and not as <li> children, then calculate numeric labels",
        "filter.patternToRegExp",
        "declare",
        "lang.mixin",
        "module:",
        "dijit/form/FilteringSelect",
        "summary:",
        "An enhanced version of the HTML SELECT tag, populated dynamically",
        "",
        "description:",
        "An enhanced version of the HTML SELECT tag, populated dynamically. It works",
        "very nicely with very large data sets because it can load and page data as needed.",
        "It also resembles ComboBox, but does not allow values outside of the provided ones.",
        "If OPTION tags are used as the data provider via markup, then the",
        "OPTION tag's child text node is used as the displayed value when selected",
        "while the OPTION tag's value attribute is used as the widget value on form submit.",
        "To set the default value when using OPTION tags, specify the selected",
        "attribute on 1 of the child OPTION tags.",
        "",
        "Similar features:",
        "",
        "- There is a drop down list of possible values.",
        "- You can only enter a value from the drop down list.  (You can't",
        "enter an arbitrary value.)",
        "- The value submitted with the form is the hidden value (ex: CA),",
        "not the displayed value a.k.a. label (ex: California)",
        "",
        "Enhancements over plain HTML version:",
        "",
        "- If you type in some text then it will filter down the list of",
        "possible values in the drop down list.",
        "- List can be specified either as a static list or via a javascript",
        "function (that can get the list from a server)",
        "required: Boolean",
        "True (default) if user is required to enter a value into this field.",
        "Overrides ValidationTextBox.isValid()",
        "#5974",
        "state will be refreshed after results are returned",
        "Array",
        "Object",
        "Object",
        "Boolean?",
        "summary:",
        "Callback from dojo.store after lookup of user entered value finishes",
        "setValue does a synchronous lookup,",
        "so it calls _callbackSetLabel directly,",
        "and so does not pass dataObject",
        "still need to test against _lastQuery in case it came too late",
        "#3268: don't modify display value on bad input",
        "#3285: change CSS to indicate error",
        "Object",
        "Object",
        "Object",
        "Callback when a data store query completes.",
        "Overrides ComboBox._openResultList()",
        "#3285: tap into search callback to see if user's query resembles a match",
        "item == undefined for keyboard search",
        "If the search returned no items that means that the user typed",
        "in something invalid (and they can't make it valid by typing more characters),",
        "so flag the FilteringSelect as being in an invalid state",
        "summary:",
        "Hook for get('value') to work.",
        "don't get the textbox value but rather the previously set hidden value.",
        "Use this.valueNode.value which isn't always set for other MappedTextBox widgets until blur",
        "Overrides ComboBox._getValueField()",
        "String",
        "Boolean?",
        "String?",
        "item?",
        "summary:",
        "Hook so set('value', value) works.",
        "description:",
        "Sets the value of the select.",
        "Also sets the label to the corresponding value by reverse lookup.",
        "item",
        "Boolean?",
        "String?",
        "summary:",
        "Set the displayed valued in the input box, and the hidden value",
        "that gets submitted, based on a dojo.data store item.",
        "description:",
        "Users shouldn't call this function; they should be calling",
        "set('item', value)",
        "tags:",
        "private",
        "String",
        "String",
        "Boolean?",
        "summary:",
        "Hook so set('displayedValue', label) works.",
        "description:",
        "Sets textbox to display label. Also performs reverse lookup",
        "to set the hidden value.  label should corresponding to item.searchAttr.",
        "This is called at initialization along with every custom setter.",
        "Usually (or always?) the call can be ignored.   If it needs to be",
        "processed then at least make sure that the XHR request doesn't trigger an onChange()",
        "event, even if it returns after creation has finished",
        "Do a reverse lookup to map the specified displayedValue to the hidden value.",
        "Note that if there's a custom labelFunc() this code",
        "#6196: populate query with user-specifics",
        "Generate query",
        "remove this branch for 2.0",
        "Query on searchAttr is a regex for benefit of dojo/store/Memory,",
        "but with a toString() method to help dojo/store/JsonRest.",
        "Search string like \"Co*\" converted to regex like /^Co.*$/i.",
        "If the label is not valid, the callback will never set it,",
        "so the last valid value will get the warning textbox.   Set the",
        "textbox value now so that the impending warning will make",
        "sense to the user",
        "for watch(\"displayedValue\") notification",
        "don't treat canceled query as an error",
        "module:",
        "dojo/data/util/sorter",
        "summary:",
        "TODOC",
        "anything",
        "anything",
        "summary:",
        "Basic comparison function that compares if an item is greater or less than another item",
        "description:",
        "returns 1 if a > b, -1 if a < b, 0 if equal.",
        "'null' values (null, undefined) are treated as larger values so that they're pushed to the end of the list.",
        "And compared to each other, null is equivalent to undefined.",
        "null is a problematic compare, so if null, we set to undefined.",
        "Makes the check logic simple, compact, and consistent",
        "And (null == undefined) === true, so the check later against null",
        "works for undefined and is less bytes.",
        "int {-1,0,1}",
        "attributes[]",
        "dojo/data/api/Read",
        "summary:",
        "Helper function to generate the sorting function based off the list of sort attributes.",
        "description:",
        "The sort function creation will look for a property on the store called 'comparatorMap'.  If it exists",
        "it will look in the mapping for comparisons function for the attributes.  If one is found, it will",
        "use it instead of the basic comparator, which is typically used for strings, ints, booleans, and dates.",
        "Returns the sorting function for this particular list of attributes and sorting directions.",
        "sortSpec:",
        "A JS object that array that defines out what attribute names to sort on and whether it should be descenting or asending.",
        "The objects should be formatted as follows:",
        "|\t{",
        "|\t\tattribute: \"attributeName-string\" || attribute,",
        "|\t\tdescending: true|false;   // Default is false.",
        "|\t}",
        "store:",
        "The datastore object to look up item values from.",
        "Passing in comp and s (comparator and store), makes this",
        "function much faster.",
        "int",
        "int",
        "int",
        "Function",
        "declare",
        "dom.setSelectable",
        "event.stop",
        "registry.byNode",
        "module:",
        "dijit/form/_ButtonMixin",
        "summary:",
        "A mixin to add a thin standard API wrapper to a normal HTML button",
        "description:",
        "A label should always be specified (through innerHTML) or the label attribute.",
        "",
        "Attach points:",
        "",
        "- focusNode (required): this node receives focus",
        "- valueNode (optional): this node's value gets submitted with FORM elements",
        "- containerNode (optional): this node gets the innerHTML assignment for label",
        "example:",
        "|\t<button data-dojo-type=\"dijit/form/Button\" onClick=\"...\">Hello world</button>",
        "example:",
        "|\tvar button1 = new Button({label: \"hello world\", onClick: foo});",
        "|\tdojo.body().appendChild(button1.domNode);",
        "label: HTML String",
        "Content to display in button.",
        "type: [const] String",
        "Type of button (submit, reset, button, checkbox, radio)",
        "Event",
        "summary:",
        "Internal function to handle click actions",
        "user click actions",
        "see if a non-form widget needs to be signalled",
        "Event",
        "===== e =====",
        "summary:",
        "Callback for when button is clicked.",
        "If type=\"submit\", return true to perform submit, or false to cancel it.",
        "type:",
        "callback",
        "Boolean",
        "String",
        "summary:",
        "Hook for set('label', ...) to work.",
        "description:",
        "Set the label (text) of the button; takes an HTML string.",
        "module:",
        "dojo/colors",
        "=====\n\treturn {\n\t\t// summary:\n\t\t//\t\tColor utilities, extending Base dojo.Color\n\t};\n\t=====",
        "TODO: this module appears to break naming conventions",
        "this is a standard conversion prescribed by the CSS3 Color Module",
        "Override base Color.fromRgb with the impl in this module",
        "String",
        "dojo/_base/Color?",
        "summary:",
        "get rgb(a) array from css-style color declarations",
        "description:",
        "this function can handle all 4 CSS3 Color Module formats: rgb,",
        "rgba, hsl, hsla, including rgb(a) with percentage values.",
        "3 rgb percentage values",
        "dojo/_base/Color",
        "dojo/_base/Color",
        "normalize hsl values",
        "calculate rgb according to the algorithm",
        "recommended by the CSS3 Color Module",
        "dojo/_base/Color",
        "dojo/_base/Color",
        "summary:",
        "sanitize a color component by making sure it is a number,",
        "and clamping it to valid values",
        "Number",
        "summary:",
        "makes sure that the object has correct attributes",
        "dojo/_base/Color",
        "Number",
        "Number?",
        "summary:",
        "creates a greyscale color with an optional alpha",
        "dojo/_base/Color",
        "mixin all CSS3 named colors not already in _base, along with SVG 1.0 variant spellings",
        "TODO: return ColorExt, not Color",
        "aspect.after",
        "declare",
        "domClass.add domClass.remove domClass.replace",
        "event.stop",
        "lang.mixin lang.hitch",
        "module:",
        "dijit/tree/_dndContainer",
        "=====\n\t var __Args = {\n\t\t // summary:\n\t\t //\t\tA dict of parameters for Tree source configuration.\n\t\t // isSource: Boolean?\n\t\t //\t\tCan be used as a DnD source. Defaults to true.\n\t\t // accept: String[]\n\t\t //\t\tList of accepted types (text strings) for a target; defaults to\n\t\t //\t\t[\"text\", \"treeNode\"]\n\t\t // copyOnly: Boolean?\n\t\t //\t\tCopy items, if true, use a state of Ctrl key otherwise,\n\t\t // dragThreshold: Number\n\t\t //\t\tThe move delay in pixels before detecting a drag; 0 by default\n\t\t // betweenThreshold: Integer\n\t\t //\t\tDistance from upper/lower edge of node to allow drop to reorder nodes\n\t };\n\t =====",
        "summary:",
        "This is a base class for `dijit/tree/_dndSelector`, and isn't meant to be used directly.",
        "It's modeled after `dojo/dnd/Container`.",
        "tags:",
        "protected",
        "=====\n\t\t// current: DomNode\n\t\t//\t\tThe currently hovered TreeNode.rowNode (which is the DOM node\n\t\t//\t\tassociated w/a given node in the tree, excluding it's descendants)\n\t\tcurrent: null,\n\t\t=====",
        "summary:",
        "A constructor of the Container",
        "tree: Node",
        "Node or node's id to build the container on",
        "params: __Args",
        "A dict of parameters, which gets mixed into the object",
        "tags:",
        "private",
        "TODO: rename; it's not a TreeNode but the whole Tree",
        "class-specific variables",
        "current TreeNode's DOM node",
        "states",
        "set up events",
        "Mouse (or touch) enter/leave on Tree itself",
        "switching between TreeNodes",
        "cancel text selection and text dragging",
        "summary:",
        "Prepares this object to be garbage-collected",
        "this.clearItems();",
        "mouse events",
        "===== , evt =====",
        "summary:",
        "Called when mouse is moved over a TreeNode",
        "widget: TreeNode",
        "evt: Event",
        "tags:",
        "protected",
        "===== widget, evt =====",
        "summary:",
        "Called when mouse is moved away from a TreeNode",
        "widget: TreeNode",
        "evt: Event",
        "tags:",
        "protected",
        "summary:",
        "Changes a named state to new state value",
        "type: String",
        "A name of the state to change",
        "newState: String",
        "new state",
        "domClass.replace(this.node, prefix + newState, prefix + this[state]);",
        "summary:",
        "Adds a class with prefix \"dojoDndItem\"",
        "node: Node",
        "A node",
        "type: String",
        "A variable suffix for a class name",
        "summary:",
        "Removes a class with prefix \"dojoDndItem\"",
        "node: Node",
        "A node",
        "type: String",
        "A variable suffix for a class name",
        "summary:",
        "This function is called once, when mouse is over our container",
        "tags:",
        "protected",
        "summary:",
        "This function is called once, when mouse is out of our container",
        "tags:",
        "protected",
        "===== \"../_base/declare\", =====",
        "===== declare, =====",
        "module:",
        "dojo/date/locale",
        "summary:",
        "This modules defines dojo/date/locale, localization methods for Date.",
        "Localization methods for Date.   Honor local customs using locale-dependent dojo.cldr data.",
        "Load the bundles containing localization information for",
        "names and formats",
        "NOTE: Everything in this module assumes Gregorian calendars.",
        "Other calendars will be implemented in separate modules.",
        "Format a pattern without literals",
        "fallthrough",
        "switch(l){",
        "case 1: case 2:",
        "break;",
        "case 3: case 4: // unimplemented",
        "}",
        "fallthrough",
        "strange choices in the date format make it impossible to write this succinctly",
        "1-12",
        "0-23",
        "0-11",
        "1-24",
        "FIXME: don't know what this is. seems to be same as z?",
        "We only have one timezone to offer; the one from the browser",
        "fallthrough... use GMT if tz not available",
        "case 'Y': case 'u': case 'W': case 'F': case 'g': case 'A':",
        "console.log(match+\" modifier unimplemented\");",
        "=====\nvar __FormatOptions = exports.__FormatOptions = declare(null, {\n\t// selector: String\n\t//\t\tchoice of 'time','date' (default: date and time)\n\t// formatLength: String\n\t//\t\tchoice of long, short, medium or full (plus any custom additions).  Defaults to 'short'\n\t// datePattern:String\n\t//\t\toverride pattern with this string\n\t// timePattern:String\n\t//\t\toverride pattern with this string\n\t// am: String\n\t//\t\toverride strings for am in times\n\t// pm: String\n\t//\t\toverride strings for pm in times\n\t// locale: String\n\t//\t\toverride the locale used to determine formatting rules\n\t// fullYear: Boolean\n\t//\t\t(format only) use 4 digit years whenever 2 digit years are called for\n\t// strict: Boolean\n\t//\t\t(parse only) strict parsing, off by default\n});\n=====",
        "Date",
        "boolean",
        "__FormatOptions?",
        "summary:",
        "Returns the zone (or offset) for the given date and options.  This",
        "is broken out into a separate function so that it can be overridden",
        "by timezone-aware code.",
        "",
        "dateObject:",
        "the date and/or time being formatted.",
        "",
        "getName:",
        "Whether to return the timezone string (if true), or the offset (if false)",
        "",
        "options:",
        "The options being used for formatting",
        "Date",
        "__FormatOptions?",
        "summary:",
        "Format a Date object as a String, using locale-specific settings.",
        "",
        "description:",
        "Create a string from a Date object using a known localized pattern.",
        "By default, this method formats both date and time from dateObject.",
        "Formatting patterns are chosen appropriate to the locale.  Different",
        "formatting lengths may be chosen, with \"full\" used by default.",
        "Custom patterns may be used or registered with translations using",
        "the dojo/date/locale.addCustomFormats() method.",
        "Formatting patterns are implemented using [the syntax described at",
        "unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)",
        "",
        "dateObject:",
        "the date and/or time to be formatted.  If a time only is formatted,",
        "the values in the year, month, and day fields are irrelevant.  The",
        "opposite is true when formatting only dates.",
        "String",
        "__FormatOptions?",
        "summary:",
        "Builds the regular needed to parse a localized date",
        "String",
        "__FormatOptions?",
        "String",
        "__FormatOptions?",
        "summary:",
        "Convert a properly formatted string to a primitive Date object,",
        "using locale-specific settings.",
        "",
        "description:",
        "Create a Date object from a string using a known localized pattern.",
        "By default, this method parses looking for both date and time in the string.",
        "Formatting patterns are chosen appropriate to the locale.  Different",
        "formatting lengths may be chosen, with \"full\" used by default.",
        "Custom patterns may be used or registered with translations using",
        "the dojo/date/locale.addCustomFormats() method.",
        "",
        "Formatting patterns are implemented using [the syntax described at",
        "unicode.org](http://www.unicode.org/reports/tr35/tr35-4.html#Date_Format_Patterns)",
        "When two digit years are used, a century is chosen according to a sliding",
        "window of 80 years before and 20 years after present year, for both `yy` and `yyyy` patterns.",
        "year < 100CE requires strict mode.",
        "",
        "value:",
        "A string representation of a date",
        "remove non-printing bidi control chars from input and pattern",
        "null",
        "will get converted to a Date at the end",
        "interpret year literally, so '5' would be 5 A.D.",
        "choose century to apply, according to a sliding window",
        "of 80 years before and 20 years after present year",
        "we expected 2 digits and got more...",
        "interpret literally, so '150' would be 150 A.D.",
        "also tolerate '1950', if 'yyyy' input passed to 'yy' format",
        "Tolerate abbreviating period in month part",
        "Case-insensitive comparison",
        "console.log(\"dojo/date/locale.parse: Could not parse month name: '\" + v + \"'.\");",
        "Case-insensitive comparison",
        "console.log(\"dojo/date/locale.parse: Could not parse weekday name: '\" + v + \"'.\");",
        "TODO: not sure what to actually do with this input,",
        "in terms of setting something on the Date obj...?",
        "without more context, can't affect the actual date",
        "TODO: just validate?",
        "fallthrough...",
        "am/pm",
        "console.log(\"dojo/date/locale.parse: Could not parse am/pm part.\");",
        "we might not have seen the hours field yet, so store the state and apply hour change later",
        "hour (1-24)",
        "fallthrough...",
        "hour (1-12)",
        "hour (0-23)",
        "hour (0-11)",
        "TODO: strict bounds checking, padding",
        "console.log(\"dojo/date/locale.parse: Illegal hours value\");",
        "in the 12-hour case, adjusting for am/pm requires the 'a' part",
        "which could come before or after the hour, so we will adjust later",
        "minutes",
        "seconds",
        "milliseconds",
        "break;",
        "case 'w':",
        "TODO\t\t\t\tvar firstDay = 0;",
        "default:",
        "TODO: throw?",
        "console.log(\"dojo/date/locale.parse: unsupported pattern char=\" + token.charAt(0));",
        "e.g., 3pm -> 15",
        "12am -> 0",
        "TODO: implement a getWeekday() method in order to test",
        "validity of input strings containing 'EEE' or 'EEEE'...",
        "Date",
        "Check for overflow.  The Date() constructor normalizes things like April 32nd...",
        "TODO: why isn't this done for times as well?",
        "Check for underflow, due to DST shifts.  See #9366",
        "This assumes a 1 hour dst shift correction at midnight",
        "We could compare the timezone offset after the shift and add the difference instead.",
        "Date",
        "summary: Process a pattern with literals in it",
        "Break up on single quotes, treat every other one as a literal, except '' which becomes '",
        "split on single quotes (which escape literals in date format strings)",
        "but preserve escaped single quotes (e.g., o''clock)",
        "kludge to tolerate no space before am/pm",
        "Build a simple regexp.  Avoid captures, which would ruin the tokens list",
        "hour (1-12)",
        "hour (0-11)",
        "hour (0-23)",
        "hour (1-24)",
        "case 'v':",
        "case 'z':",
        "case 'Z':",
        "console.log(\"parse of date format, pattern=\" + pattern);",
        "add capture",
        "normalize whitespace.  Need explicit handling of \\xa0 for IE.",
        "String",
        "String",
        "summary:",
        "Add a reference to a bundle containing localized custom formats to be",
        "used by date/time formatting and parsing routines.",
        "",
        "description:",
        "The user may add custom localized formats where the bundle has properties following the",
        "same naming convention used by dojo.cldr: `dateFormat-xxxx` / `timeFormat-xxxx`",
        "The pattern string should match the format used by the CLDR.",
        "See dojo/date/locale.format() for details.",
        "The resources must be loaded by dojo.requireLocalization() prior to use",
        "String",
        "Object",
        "String",
        "String",
        "String?",
        "String?",
        "summary:",
        "Used to get localized strings from dojo.cldr for day or month names.",
        "",
        "item:",
        "'months' || 'days'",
        "type:",
        "'wide' || 'abbr' || 'narrow' (e.g. \"Monday\", \"Mon\", or \"M\" respectively, in English)",
        "context:",
        "'standAlone' || 'format' (default)",
        "locale:",
        "override locale used to find the names",
        "Fall back to 'format' flavor of name",
        "kludge, in the absence of real aliasing support in dojo.cldr",
        "return by copy so changes won't be made accidentally to the in-memory model",
        "Array",
        "Date?",
        "String?",
        "summary:",
        "Determines if the date falls on a weekend, according to local custom.",
        "Boolean",
        "These are used only by format and strftime.  Do they need to be public?  Which module should they go in?",
        "Date",
        "summary:",
        "gets the day of the year as represented by dateObject",
        "Number",
        "Date",
        "Number",
        "Sunday",
        "if year starts on the specified day, start counting weeks at 1",
        "Number",
        "declare",
        "module:",
        "dijit/form/VerticalRule",
        "summary:",
        "Hash marks for the `dijit/form/VerticalSlider`",
        "=====\n\t\t// container: String\n\t\t//\t\tThis is either \"leftDecoration\" or \"rightDecoration\",\n\t\t//\t\tto indicate whether this rule goes to the left or to the right of the slider.\n\t\t//\t\tNote that on RTL system, \"leftDecoration\" would actually go to the right, and vice-versa.\n\t\tcontainer: \"\",\n\t=====",
        "Overrides HorizontalRule._isHorizontal",
        "array.filter array.forEach array.map array.some",
        "aspect.after",
        "util.sorter.createSortFunction",
        "declare",
        "dom.setSelectable",
        "domClass.toggle",
        "_scopeName",
        "lang.delegate lang.isArray lang.isObject lang.hitch",
        "query",
        "module:",
        "dijit/form/_FormSelectWidget",
        "=====\nvar __SelectOption = {\n\t// value: String\n\t//\t\tThe value of the option.  Setting to empty (or missing) will\n\t//\t\tplace a separator at that location\n\t// label: String\n\t//\t\tThe label for our option.  It can contain html tags.\n\t// selected: Boolean\n\t//\t\tWhether or not we are a selected option\n\t// disabled: Boolean\n\t//\t\tWhether or not this specific option is disabled\n};\n=====",
        "summary:",
        "Extends _FormValueWidget in order to provide \"select-specific\"",
        "values - i.e., those values that are unique to `<select>` elements.",
        "This also provides the mechanism for reading the elements from",
        "a store, if desired.",
        "multiple: [const] Boolean",
        "Whether or not we are multi-valued",
        "options: __SelectOption[]",
        "The set of options for our select item.  Roughly corresponds to",
        "the html `<option>` tag.",
        "store: dojo/store/api/Store",
        "A store to use for getting our list of options - rather than reading them",
        "from the `<option>` html tags.   Should support getIdentity().",
        "For back-compat store can also be a dojo/data/api/Identity.",
        "query: object",
        "A query to use when fetching items from our store",
        "queryOptions: object",
        "Query options to use when fetching from the store",
        "labelAttr: String?",
        "The entries in the drop down list come from this attribute in the dojo.store items.",
        "If ``store`` is set, labelAttr must be set too, unless store is an old-style",
        "dojo.data store rather than a new dojo/store.",
        "onFetch: Function",
        "A callback to do with an onFetch - but before any items are actually",
        "iterated over (i.e. to filter even further what you want to add)",
        "sortByLabel: Boolean",
        "Flag to sort the options returned from a store by the label of",
        "the store.",
        "loadChildrenOnOpen: Boolean",
        "By default loadChildren is called when the items are fetched from the",
        "store.  This property allows delaying loadChildren (and the creation",
        "of the options/menuitems) until the user clicks the button to open the",
        "dropdown.",
        "onLoadDeferred: [readonly] dojo.Deferred",
        "This is the `dojo.Deferred` returned by setStore().",
        "Calling onLoadDeferred.then() registers your",
        "callback to be called only once, when the prior setStore completes.",
        "anything",
        "summary:",
        "Returns a given option (or options).",
        "valueOrIdx:",
        "If passed in as a string, that string is used to look up the option",
        "in the array of options - based on the value property.",
        "(See dijit/form/_FormSelectWidget.__SelectOption).",
        "",
        "If passed in a number, then the option with the given index (0-based)",
        "within this select will be returned.",
        "",
        "If passed in a dijit/form/_FormSelectWidget.__SelectOption, the same option will be",
        "returned if and only if it exists within this select.",
        "",
        "If passed an array, then an array will be returned with each element",
        "in the array being looked up.",
        "",
        "If not passed a value, then all options will be returned",
        "",
        "returns:",
        "The option corresponding with the given value or index.",
        "null is returned if any of the following are true:",
        "",
        "- A string value is passed in which doesn't exist",
        "- An index is passed in which is outside the bounds of the array of options",
        "- A dijit/form/_FormSelectWidget.__SelectOption is passed in which is not a part of the select",
        "NOTE: the compare for passing in a dijit/form/_FormSelectWidget.__SelectOption checks",
        "if the value property matches - NOT if the exact option exists",
        "NOTE: if passing in an array, null elements will be placed in the returned",
        "array when a value is not found.",
        "__SelectOption[]",
        "__SelectOption[]",
        "We were passed an option - so see if it's in our array (directly),",
        "and if it's not, try and find it by value.",
        "== and not === so that 100 matches '100'",
        "stops iteration through opts",
        "__SelectOption",
        "null",
        "__SelectOption|__SelectOption[]",
        "summary:",
        "Adds an option or options to the end of the select.  If value",
        "of the option is empty or missing, a separator is created instead.",
        "Passing in an array of options will yield slightly better performance",
        "since the children are only loaded once.",
        "String|__SelectOption|Number|Array",
        "summary:",
        "Removes the given option or options.  You can remove by string",
        "(in which case the value is removed), number (in which case the",
        "index in the options array is removed), or select option (in",
        "which case, the select option with a matching value is removed).",
        "You can also pass in an array of those values for a slightly",
        "better performance since the children are only loaded once.",
        "For numeric option values, specify {value: number} as the argument.",
        "We can get null back in our array - if our option was not found.  In",
        "that case, we don't want to blow up...",
        "__SelectOption|__SelectOption[]",
        "summary:",
        "Updates the values of the given option.  The option to update",
        "is matched based on the value of the entered option.  Passing",
        "in an array of new options will yield better performance since",
        "the children will only be loaded once.",
        "summary:",
        "Sets the store you would like to use with this select widget.",
        "The selected value is the value of the new store to set.  This",
        "function returns the original store, in case you want to reuse",
        "it or something.",
        "store: dojo/store/api/Store",
        "The dojo.store you would like to use - it MUST implement getIdentity()",
        "and MAY implement observe().",
        "For backwards-compatibility this can also be a data.data store, in which case",
        "it MUST implement dojo/data/api/Identity,",
        "and MAY implement dojo/data/api/Notification.",
        "selectedValue: anything?",
        "The value that this widget should set itself to *after* the store",
        "has been loaded",
        "fetchArgs: Object?",
        "Hash of parameters to set filter on store, etc.",
        "",
        "- query: new value for Select.query,",
        "- queryOptions: new value for Select.queryOptions,",
        "- onFetch: callback function for each item in data (Deprecated)",
        "Our store has changed, so cancel any listeners on old store (remove for 2.0)",
        "For backwards-compatibility, accept dojo.data store in addition to dojo.store.store.  Remove in 2.0.",
        "summary:",
        "Retrieves an object by it's identity. This will trigger a fetchItemByIdentity.",
        "Like dojo.store.DataStore.get() except returns native item.",
        "summary:",
        "Queries the store for objects.   Like dojo/store/DataStore.query()",
        "except returned Deferred contains array of native items.",
        "Our store has changed, so update our notifications",
        "Remove existing options (if there are any)",
        "Cancel listener for updates to old (dojo.data) store",
        "Cancel listener for updates to new (dojo.store) store",
        "If user has specified new query and query options along with this new store, then use them.",
        "Add our new options",
        "Run query",
        "Save result in this._queryRes so we can cancel the listeners we register below",
        "Old dojo.data API to access items, remove for 2.0",
        "TODO: Add these guys as a batch, instead of separately",
        "Register listener for store updates",
        "observe returns yet another handle that needs its own explicit gc",
        "Set our value (which might be undefined), and then tweak",
        "it to send a change event with the real value",
        "dojo/data/api/Identity",
        "TODO: implement set() and watch() for store and query, although not sure how to handle",
        "setting them individually rather than together (as in setStore() above)",
        "anything",
        "Boolean?",
        "summary:",
        "set the value of the widget.",
        "If a string is passed, then we set our value from looking it up.",
        "Our store is loading - so save our value, and we'll set it when",
        "we're done",
        "__SelectOption[]",
        "not fully initialized yet or a failed value lookup",
        "summary:",
        "returns the displayed value of the widget",
        "summary:",
        "Sets the displayed value of the widget",
        "summary:",
        "Loads the children represented by this widget's options.",
        "reset the menu to make it populatable on the next click",
        "Add each menu item",
        "Update states",
        "summary:",
        "Sets the \"selected\" class on the item for styling purposes",
        "summary:",
        "Returns the value of the widget by reading the options for",
        "the selected flag",
        "Mirror what a select does - choose the first one",
        "Set value to be the sum of all selected",
        "Internal functions to call when we have store notifications come in",
        "item",
        "Object?",
        "Only add it if we are top-level",
        "item",
        "item",
        "summary:",
        "Returns an option object based off the given item.  The \"value\"",
        "of the option item will be the identity of the item, the \"label\"",
        "of the option will be the label of the item.",
        "remove getLabel() call for 2.0 (it's to support the old dojo.data API)",
        "__SelectOption",
        "item",
        "summary:",
        "Creates (and adds) the option for the given item",
        "We are not loaded - so let's load it and add later.",
        "Remove for 2.0 (it's the old dojo.data API)",
        "===== , srcNodeRef =====",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Hash of initialization parameters for widget, including scalar values (like title, duration etc.)",
        "and functions, typically callbacks like onClick.",
        "The hash can contain any of the widget's properties, excluding read-only properties.",
        "srcNodeRef: DOMNode|String?",
        "If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree",
        "Saves off our value, if we have an initial one set so we",
        "can use it if we have a store as well (see startup())",
        "remove for 2.0",
        "summary:",
        "Loads our options and sets up our dropdown correctly.  We",
        "don't want any content, so we don't call any inherit chain",
        "function.",
        "FIXME: disabled and selected are not valid on complex markup children (which is why we're",
        "looking for data-dojo-value above.  perhaps we should data-dojo-props=\"\" this whole thing?)",
        "decide before 1.6",
        "summary:",
        "sets up our event handling that we need for functioning",
        "as a select",
        "Make our event connections for updating state",
        "moved from startup",
        "Connects in our store, if we have one defined",
        "Temporarily set our store to null so that it will get set",
        "and connected appropriately",
        "summary:",
        "summary:",
        "Clean up our connections",
        "Cancel listener for store updates",
        "Cancel listener for updates to new (dojo.store) store",
        "__SelectOption",
        "===== option =====",
        "summary:",
        "User-overridable function which, for the given option, adds an",
        "item to the select.  If the option doesn't have a value, then a",
        "separator is added in that place.  Make sure to store the option",
        "in the created option widget.",
        "__SelectOption",
        "===== option =====",
        "summary:",
        "User-overridable function which, for the given option, removes",
        "its item from the select.",
        "String or String[]",
        "===== newDisplay =====",
        "summary:",
        "Overridable function which will set the display for the",
        "widget.  newDisplay is either a string (in the case of",
        "single selects) or array of strings (in the case of multi-selects)",
        "summary:",
        "Overridable function to return the children that this widget contains.",
        "summary:",
        "hooks into this.attr to provide a mechanism for getting the",
        "option items for the current value of the widget.",
        "item[]",
        "===== items =====",
        "summary:",
        "a function that will \"fake\" loading children, if needed, and",
        "if we have set to not load children until the widget opens.",
        "items:",
        "An array of items that will be loaded, when needed",
        "summary:",
        "a function that can be connected to in order to receive a",
        "notification that the store has finished loading and all options",
        "from that store are available",
        "=====\n_FormSelectWidget.__SelectOption = __SelectOption;\n=====",
        "array.forEach",
        "declare",
        "domAttr.set",
        "domClass.add domClass.remove domClass.toggle",
        "domGeometry.setMarginBox",
        "event.stop",
        "i18n.getLocalization",
        "lang.hitch",
        "has(\"ie\")",
        "module:",
        "dijit/form/Select",
        "summary:",
        "An internally-used menu for dropdown that allows us a vertical scrollbar",
        "Override Menu.autoFocus setting so that opening a Select highlights the current value.",
        "summary:",
        "Stub in our own changes, so that our domNode is not a table",
        "otherwise, we won't respond correctly to heights/overflows",
        "summary:",
        "stop mousemove from selecting text on IE to be consistent with other browsers",
        "summary:",
        "Overridden so that the previously selected value will be focused instead of only the first item",
        "if focus selected",
        "find menu item widget with this value",
        "focus previous selection",
        "focus first item by default",
        "Object",
        "summary:",
        "Overridden so that we are able to handle resizing our",
        "internal widget.  Note that this is not a \"full\" resize",
        "implementation - it only works correctly if you pass it a",
        "marginBox.",
        "",
        "mb: Object",
        "The margin box to set this dropdown to.",
        "We've explicitly set the wrapper <div>'s width, so set <table> width to match.",
        "100% is safer than a pixel value because there may be a scroll bar with",
        "browser/OS specific width.",
        "summary:",
        "This is a \"styleable\" select box - it is basically a DropDownButton which",
        "can take a `<select>` as its input.",
        "allows IE to disallow focus, but Firefox cannot be disabled for mousedown events",
        "required: Boolean",
        "Can be true or false, default is false.",
        "state: [readonly] String",
        "\"Incomplete\" if this select is required but unset (i.e. blank value), \"\" otherwise",
        "message: String",
        "Currently displayed error/prompt message",
        "tooltipPosition: String[]",
        "See description of `dijit/Tooltip.defaultPosition` for details on this parameter.",
        "emptyLabel: string",
        "What to display in an \"empty\" dropdown",
        "&nbsp;",
        "_isLoaded: Boolean",
        "Whether or not we have been loaded",
        "_childrenLoaded: Boolean",
        "Whether or not our children have been loaded",
        "summary:",
        "Set the value to be the first, or the selected index",
        "set value from selected option",
        "|| 0 needed for when srcNodeRef is not a SELECT",
        "Create the dropDown widget",
        "_FormSelectWidget.__SelectOption",
        "summary:",
        "For the given option, return the menu item that should be",
        "used to display it.  This can be overridden as needed",
        "We are a separator (no label set for it)",
        "Just a regular menu option",
        "_FormSelectWidget.__SelectOption",
        "summary:",
        "For the given option, add an option to our dropdown.",
        "If the option doesn't have a value, then a separator is added",
        "in that place.",
        "Boolean",
        "summary:",
        "Resets the menu and the length attribute of the button - and",
        "ensures that the label is appropriately set.",
        "loadMenuItems: Boolean",
        "actually loads the child menu items - we only do this when we are",
        "populating for showing the dropdown.",
        "this.inherited destroys this.dropDown's child widgets (MenuItems).",
        "Avoid this.dropDown (Menu widget) having a pointer to a destroyed widget (which will cause",
        "issues later in _setSelected). (see #10296)",
        "Drop down menu is blank but add one blank entry just so something appears on the screen",
        "to let users know that they are no choices (mimicing native select behavior)",
        "Don't call this if we are loading - since we will handle it later",
        "after all _set* methods have run",
        "to update this.state",
        "Boolean",
        "to update this.state",
        "Boolean",
        "to update this.state",
        "Array",
        "String",
        "summary:",
        "sets the display for the given value (or values)",
        "Boolean",
        "summary:",
        "Called by oninit, onblur, and onkeypress, and whenever required/disabled state changes",
        "description:",
        "Show missing or invalid messages if appropriate, and highlight textbox field.",
        "Used when a select is initially set to no value and the user is required to",
        "set the value.",
        "Boolean",
        "===== isFocused =====",
        "summary:",
        "Whether or not this is a valid value.  The only way a Select",
        "can be invalid is when it's required but nothing is selected.",
        "handle value is null or undefined",
        "summary:",
        "Overridden so that the state will be cleared.",
        "to update this.state",
        "summary:",
        "set the missing message",
        "summary:",
        "stop mousemove from selecting text on IE to be consistent with other browsers",
        "String||Object",
        "Function",
        "summary:",
        "populates the menu",
        "overriding _HasDropDown.closeDropDown()",
        "Erase possible width: 100% setting from _SelectMenu.resize().",
        "Leaving it would interfere with the next openDropDown() call, which",
        "queries the natural size of the drop down.",
        "show tooltip if second focus of required tooltip, but no selection",
        "for monkey patching",
        "array.every",
        "declare",
        "lang.isArray",
        "win.doc   TODO: remove in 2.0",
        "for exporting symbols to dijit, TODO: remove in 2.0",
        "module:",
        "dijit/_editor/range",
        "summary:",
        "W3C range API",
        "DomNode",
        "DomNode",
        "dojo.profile.start(\"dijit.range.getIndex\");",
        "if(i>=pnode.childNodes.length){",
        "dojo.debug(\"Error finding index of a node in dijit/range.getIndex()\");",
        "}",
        "normalized() can not be called so often to prevent",
        "invalidating selection/range, so we have to detect",
        "here that any text nodes in a row",
        "dojo.profile.end(\"dijit/range.getIndex()\");",
        "Array",
        "DomNode",
        "if(!node)debugger",
        "console.debug('Error: can not find node with index',index,'under parent node',parent );",
        "terminate array.every",
        "carry on the every loop",
        "at least, one element should be in the array: the root (BODY by default)",
        "DomNode",
        "RegEx?",
        "DomNode?",
        "DomNode",
        "RegEx?",
        "DomNode?",
        "DomNode",
        "DomNode",
        "Int",
        "if this is a text node, check whether the left part is all space",
        "DomNode",
        "DomNode",
        "Int",
        "if this is a text node, check whether the right part is all space",
        "Window?",
        "TODO: for 2.0, replace optional window param w/mandatory window or document param",
        "IE",
        "Window",
        "Boolean?",
        "IE",
        "TODO: convert to has() test?   But remember IE9 issues with quirks vs. standards in main frame vs. iframe.",
        "boolean",
        "don't detach, the range may be used later",
        "for(var i=0;i<this._ranges.length;i++){",
        "this._ranges[i].detach();",
        "}",
        "TODO: multiple range selection(?)",
        "startnode = node.previousSibling;",
        "where shall we put the start? in the text node or after?",
        "at the end of this node",
        "try{",
        "firstChild must be a text node",
        "}catch(e){ debugger }",
        "if at the end of startnode and we are dealing with start container, then",
        "move the startnode to nextSibling if it is a text node",
        "TODO: do this for end container?",
        "text node",
        "normal node",
        "pass through",
        "pass through",
        "if contentEditable is not inherit, the above collapse won't make the end point",
        "in the correctly position: it always has a -1 offset, so compensate it",
        "Correct internal cursor position",
        "http://bugs.dojotoolkit.org/ticket/15578",
        "in the same text node",
        "if(startContainer.tagName == \"BODY\"){",
        "startContainer = startContainer.firstChild;",
        "}",
        "if the range starts at the beginning of a",
        "text node, move it to before the textnode",
        "to make sure the range is still valid",
        "after deleteContents() finishes",
        "if(!window.getSelection)",
        "module:",
        "dojo/store/util/QueryResults",
        "summary:",
        "A function that wraps the results of a store query with additional",
        "methods.",
        "description:",
        "QueryResults is a basic wrapper that allows for array-like iteration",
        "over any kind of returned data from a query.  While the simplest store",
        "will return a plain array of data, other stores may return deferreds or",
        "promises; this wrapper makes sure that *all* results can be treated",
        "the same.",
        "",
        "Additional methods include `forEach`, `filter` and `map`.",
        "results: Array|dojo/promise/Promise",
        "The result set as an array, or a promise for an array.",
        "returns:",
        "An array-like object that can be used for iterating over.",
        "example:",
        "Query a store and iterate over the results.",
        "",
        "|\tstore.query({ prime: true }).forEach(function(item){",
        "|\t\t//\tdo something",
        "|\t});",
        "if it is a promise it may be frozen",
        "Always add the iterative methods so a QueryResults is",
        "returned whether the environment is ES3 or ES5",
        "forEach should only return the result of Deferred.when()",
        "when we're wrapping a promise",
        "Object",
        "declare",
        "winUtils.scrollIntoView",
        "module:",
        "dijit/form/_ListBase",
        "summary:",
        "Focus-less menu to handle UI events consistently",
        "Abstract methods that must be defined externally:",
        "",
        "- onSelect: item is active (mousedown but not yet mouseup, or keyboard arrow selected but no Enter)",
        "- onDeselect:  cancels onSelect",
        "tags:",
        "private",
        "selected: DOMNode",
        "currently selected node",
        "String|Function",
        "String",
        "summary:",
        "Connects 'containerNode' to specified method of this object",
        "and automatically registers for 'disconnect' on widget destroy.",
        "description:",
        "Provide widget-specific analog to 'connect'.",
        "The callback function is called with the normal event object,",
        "but also a second parameter is passed that indicates which list item",
        "actually received the event.",
        "returns:",
        "A handle that can be passed to `disconnect` in order to disconnect",
        "before the widget is destroyed.",
        "tags:",
        "private",
        "summary:",
        "Select the first displayed item in the list.",
        "summary:",
        "Select the last displayed item in the list",
        "summary:",
        "Select the item just below the current selection.",
        "If nothing selected, select first node.",
        "summary:",
        "Select the item just above the current selection.",
        "If nothing selected, select last node (if",
        "you select Previous and try to keep scrolling up the list).",
        "DomNode",
        "Boolean",
        "summary:",
        "Does the actual select.",
        "node:",
        "The option to select",
        "scroll:",
        "If necessary, scroll node into view.  Set to false for mouse/touch to",
        "avoid jumping problems on mobile/RTL, see https://bugs.dojotoolkit.org/ticket/17739.",
        "module:",
        "dojo/DeferredList",
        "Array",
        "Boolean?",
        "Boolean?",
        "Boolean?",
        "Function?",
        "summary:",
        "Deprecated, use dojo/promise/all instead.",
        "Provides event handling for a group of Deferred objects.",
        "description:",
        "DeferredList takes an array of existing deferreds and returns a new deferred of its own",
        "this new deferred will typically have its callback fired when all of the deferreds in",
        "the given list have fired their own deferreds.  The parameters `fireOnOneCallback` and",
        "fireOnOneErrback, will fire before all the deferreds as appropriate",
        "list:",
        "The list of deferreds to be synchronizied with this DeferredList",
        "fireOnOneCallback:",
        "Will cause the DeferredLists callback to be fired as soon as any",
        "of the deferreds in its list have been fired instead of waiting until",
        "the entire list has finished",
        "fireonOneErrback:",
        "Will cause the errback to fire upon any of the deferreds errback",
        "canceller:",
        "A deferred canceller function, see dojo.Deferred",
        "summary:",
        "Gathers the results of the deferreds for packaging",
        "as the parameters to the Deferred Lists' callback",
        "deferredList: dojo/DeferredList",
        "The deferred list from which this function gathers results.",
        "returns: dojo/DeferredList",
        "The newly created deferred list which packs results as",
        "parameters to its callback.",
        "module:",
        "dojo/dnd/common",
        "=====\n// TODO: for 2.0, replace line above with this code.\nvar exports = {\n\t// summary:\n\t//\t\tTODOC\n};\n=====",
        "summary:",
        "returns a unique string for use with any DOM element",
        "Event",
        "summary:",
        "returns true if user clicked on a form element",
        "TEXT_NODE",
        "Boolean",
        "array.forEach array.map",
        "declare",
        "cldrSupplemental.getFirstDayOfWeek",
        "date",
        "stamp.fromISOString",
        "dom.setSelectable",
        "domClass.contains",
        "event.stop",
        "lang.getObject, lang.hitch",
        "has(\"ie\") has(\"webkit\")",
        "string.substitute",
        "not used directly, but sets CSS class on <body>",
        "module:",
        "dijit/CalendarLite",
        "summary:",
        "Lightweight version of Calendar widget aimed towards mobile use",
        "",
        "description:",
        "A simple GUI for choosing a date in the context of a monthly calendar.",
        "This widget can't be used in a form because it doesn't serialize the date to an",
        "`<input>` field.  For a form element, use dijit/form/DateTextBox instead.",
        "",
        "Note that the parser takes all dates attributes passed in the",
        "[RFC 3339 format](http://www.faqs.org/rfcs/rfc3339.html), e.g. `2005-06-30T08:05:00-07:00`",
        "so that they are serializable and locale-independent.",
        "",
        "Also note that this widget isn't keyboard accessible; use dijit.Calendar for that",
        "example:",
        "|\tvar calendar = new dijit.CalendarLite({}, dojo.byId(\"calendarNode\"));",
        "",
        "example:",
        "|\t<div data-dojo-type=\"dijit/CalendarLite\"></div>",
        "Template for main calendar",
        "Template for cell for a day of the week (ex: M)",
        "Templates for a single date (ex: 13), and for a row for a week (ex: 20 21 22 23 24 25 26)",
        "value: Date",
        "The currently selected Date, initially set to invalid date to indicate no selection.",
        "TODO: for 2.0 make this a string (ISO format) rather than a Date",
        "datePackage: String",
        "JavaScript namespace to find calendar routines.\t If unspecified, uses Gregorian calendar routines",
        "at dojo/date and dojo/date/locale.",
        "TODO: for 2.0, replace datePackage with dateModule and dateLocalModule attributes specifying MIDs,",
        "or alternately just get rid of this completely and tell user to use module ID remapping",
        "via require",
        "dayWidth: String",
        "How to represent the days of the week in the calendar header. See locale",
        "tabIndex: String",
        "Order fields are traversed when user hits the tab key",
        "currentFocus: Date",
        "Date object containing the currently focused date, or the date which would be focused",
        "if the calendar itself was focused.   Also indicates which year and month to display,",
        "i.e. the current \"page\" the calendar is on.",
        "Put the summary to the node with role=grid",
        "Date",
        "summary:",
        "Runs various tests on the value, checking that it's a valid date, rather",
        "than blank or NaN.",
        "tags:",
        "private",
        "summary:",
        "Support get('value')",
        "this.value is set to 1AM, but return midnight, local time for back-compat",
        "If daylight savings pushes midnight to the previous date, fix the Date",
        "object to point at 1am so it will represent the correct day. See #9366",
        "Date|Number",
        "Boolean",
        "summary:",
        "Support set(\"value\", ...)",
        "description:",
        "Set the current date and update the UI.  If the date is disabled, the value will",
        "not change, but the display will change to the corresponding month.",
        "value:",
        "Either a Date or the number of seconds since 1970.",
        "tags:",
        "protected",
        "Set focus cell to the new value.   Arguably this should only happen when there isn't a current",
        "focus point.   This will also repopulate the grid to new month/year if necessary.",
        "Mark the selected date",
        "clear value, and mark all dates as unselected",
        "Date|Number",
        "summary:",
        "Convert Number into Date, or copy Date object.   Then, round to nearest day,",
        "setting to 1am to avoid issues when DST shift occurs at midnight, see #8521, #9366)",
        "summary:",
        "This just sets the content of node to the specified text.",
        "Can't do \"node.innerHTML=text\" because of an IE bug w/tables, see #3434.",
        "tags:",
        "private",
        "summary:",
        "Fills in the calendar grid with each day (1-31).",
        "Call this on creation, when moving to a new month.",
        "tags:",
        "private",
        "If they didn't provide a summary, change the default summary to match with the new month",
        "Mapping from date (as specified by number returned from Date.valueOf()) to corresponding <td>",
        "Iterate through dates in the calendar and fill in date numbers and style info",
        "Each cell has an associated integer value representing it's date",
        "Set Date string (ex: \"13\").",
        "summary:",
        "Fill in localized month, and prev/current/next years",
        "tags:",
        "protected",
        "set name of this month",
        "summary:",
        "Sets calendar's value to today's date",
        "===== , srcNodeRef =====",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Hash of initialization parameters for widget, including scalar values (like title, duration etc.)",
        "and functions, typically callbacks like onClick.",
        "The hash can contain any of the widget's properties, excluding read-only properties.",
        "srcNodeRef: DOMNode|String?",
        "If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree",
        "summary:",
        "Creates the drop down button that displays the current month and lets user pick a new one",
        "Markup for days of the week (referenced from template)",
        "Markup for dates of the month (referenced from template), but without numbers filled in",
        "Instantiate from template.",
        "dateCells and dateLabels arrays filled when _Templated parses my template.",
        "draw the grid to the month specified by currentFocus",
        "summary:",
        "Set up connects for increment/decrement of months/years",
        "tags:",
        "protected",
        "Date",
        "Boolean",
        "summary:",
        "If the calendar currently has focus, then focuses specified date,",
        "changing the currently displayed month/year if necessary.",
        "If the calendar doesn't have focus, updates currently",
        "displayed month/year, and sets the cell that will get focus",
        "when Calendar is focused.",
        "forceFocus:",
        "If true, will focus() the cell even if calendar itself doesn't have focus",
        "If the focus is on a different month than the current calendar month, switch the displayed month.",
        "Also will populate the grid initially, on Calendar creation.",
        "set tabIndex=0 on new cell, and focus it (but only if Calendar itself is focused)",
        "set tabIndex=-1 on old focusable cell",
        "see #11064 about webkit bug",
        "summary:",
        "Focus the calendar by focusing one of the calendar cells",
        "Event",
        "summary:",
        "Handler for day clicks, selects the date if appropriate",
        "tags:",
        "protected",
        "Date",
        "summary:",
        "Returns the cell corresponding to the date, or null if the date is not within the currently",
        "displayed month.",
        "Date[]",
        "summary:",
        "Marks the specified cells as selected, and clears cells previously marked as selected.",
        "For CalendarLite at most one cell is selected at any point, but this allows an array",
        "for easy subclassing.",
        "Function to mark a cell as selected or unselected",
        "Boolean",
        "DomNode",
        "Clear previously selected cells.",
        "Mark newly selected cells.  Ignore dates outside the currently displayed month.",
        "Date",
        "===== date =====",
        "summary:",
        "Called only when the selected date has changed",
        "===== dateObject, locale =====",
        "summary:",
        "May be overridden to disable certain dates in the calendar e.g. `isDisabledDate=dojo.date.locale.isWeekend`",
        "dateObject: Date",
        "locale: String?",
        "tags:",
        "extension",
        "=====\n\t\t\treturn false; // Boolean\n=====",
        "===== dateObject, locale =====",
        "summary:",
        "May be overridden to return CSS classes to associate with the date entry for the given dateObject,",
        "for example to indicate a holiday in specified locale.",
        "dateObject: Date",
        "locale: String?",
        "tags:",
        "extension",
        "=====\n\t\t\treturn \"\"; // String\n=====",
        "summary:",
        "Displays name of current month padded to the width of the month",
        "w/the longest name, so that changing months doesn't change width.",
        "",
        "Create as:",
        "|\tnew Calendar._MonthWidget({",
        "|\t\t\tlang: ...,",
        "|\t\t\tdateLocaleModule: ...",
        "|\t\t})",
        "summary:",
        "Set the current month to display as a label",
        "Set name of current month and also fill in spacer element with all the month names",
        "(invisible) so that the maximum width will affect layout.   But not on IE6 because then",
        "the center <TH> overlaps the right <TH> (due to a browser bug).",
        "declare",
        "domClass.toggle",
        "module:",
        "dijit/CheckedMenuItem",
        "summary:",
        "A checkbox-like menu item for toggling on and off",
        "checked: Boolean",
        "Our checked state",
        "Boolean",
        "summary:",
        "Hook so attr('checked', bool) works.",
        "Sets the class and state for the check box.",
        "override dijitNoIcon",
        "Boolean",
        "===== checked =====",
        "summary:",
        "User defined function to handle check/uncheck events",
        "tags:",
        "callback",
        "summary:",
        "Clicking this item just toggles its state",
        "tags:",
        "private",
        "declare",
        "module:",
        "dijit/form/VerticalRuleLabels",
        "summary:",
        "Labels for the `dijit/form/VerticalSlider`",
        "Overrides HorizontalRuleLabel._calcPosition()",
        "needed to prevent labels from being reversed in RTL mode",
        "array.forEach array.map",
        "connect.connect",
        "declare",
        "lang.getObject",
        "parser._functionFromScript",
        "query",
        "module:",
        "dijit/Declaration",
        "summary:",
        "The Declaration widget allows a developer to declare new widget",
        "classes directly from a snippet of markup.",
        "_noScript: [private] Boolean",
        "Flag to parser to leave alone the script tags contained inside of me",
        "stopParser: [private] Boolean",
        "Flag to parser to not try and parse widgets declared inside of me",
        "widgetClass: [const] String",
        "Name of class being declared, ex: \"acme.myWidget\"",
        "propList: [const] Object",
        "Set of attributes for this widget along with default values, ex:",
        "{delay: 100, title: \"hello world\"}",
        "mixins: [const] String[]",
        "List containing the prototype for this widget, and also any mixins,",
        "ex: [\"dijit._Widget\", \"dijit._Container\"]",
        "For all methods defined like <script type=\"dojo/method\" data-dojo-event=\"foo\">,",
        "add that method to prototype.",
        "If there's no \"event\" specified then it's code to run on instantiation,",
        "so it becomes a connection to \"postscript\" (handled below).",
        "map array of strings like [ \"dijit.form.Button\" ] to array of mixin objects",
        "(note that array.map(this.mixins, lang.getObject) doesn't work because it passes",
        "a bogus third argument to getObject(), confusing it)",
        "create the new widget class",
        "Handle <script> blocks of form:",
        "<script type=\"dojo/connect\" data-dojo-event=\"foo\">",
        "and",
        "<script type=\"dojo/method\">",
        "(Note that the second one is just shorthand for a dojo/connect to postscript)",
        "Since this is a connect in the declaration, we are actually connection to the method",
        "in the _prototype_.",
        "declare",
        "dom.setSelectable",
        "module:",
        "dijit/MenuSeparator",
        "summary:",
        "A line between two menu items",
        "summary:",
        "Override to always return false",
        "tags:",
        "protected",
        "Boolean",
        "declare",
        "domClass.add domClass.remove",
        "domStyle.get",
        "keys.DOWN_ARROW keys.PAGE_DOWN keys.PAGE_UP keys.UP_ARROW",
        "module:",
        "dijit/form/_ComboBoxMenu",
        "summary:",
        "Focus-less menu for internal use in `dijit/form/ComboBox`",
        "Abstract methods that must be defined externally:",
        "",
        "- onChange: item was explicitly chosen (mousedown somewhere on the menu and mouseup somewhere on the menu)",
        "- onPage: next(1) or previous(-1) button pressed",
        "tags:",
        "private",
        "note: not using domConstruct.create() because need to specify document",
        "DomNode",
        "summary:",
        "Add hover CSS",
        "DomNode",
        "summary:",
        "Remove hover CSS",
        "DomNode",
        "summary:",
        "Add selected CSS",
        "DomNode",
        "summary:",
        "Remove selected CSS",
        "Boolean",
        "summary:",
        "Handles page-up and page-down keypresses",
        "if no item is highlighted, highlight the first option",
        "stop at option 1",
        "stop at last option",
        "going backwards",
        "summary:",
        "Handle keystroke event forwarded from ComboBox, returning false if it's",
        "a keystroke I recognize and process, true otherwise.",
        "array.forEach array.indexOf array.map",
        "connect._keypress",
        "declare",
        "Deferred",
        "dom.isDescendant",
        "domClass.add domClass.contains",
        "domGeometry.position",
        "domStyle.set",
        "event.stop",
        "fx.fadeIn fx.fadeOut",
        "i18n.getLocalization",
        "lang.mixin lang.hitch",
        "has(\"ie\") has(\"opera\") has(\"dijit-legacy-requires\")",
        "winUtils.getBox, winUtils.get",
        "Moveable",
        "TimedMoveable",
        "manager.defaultDuration",
        "for back-compat, exporting dijit._underlay (remove in 2.0)",
        "module:",
        "dijit/Dialog",
        "=====\n\tdijit._underlay = function(kwArgs){\n\t\t// summary:\n\t\t//\t\tA shared instance of a `dijit.DialogUnderlay`\n\t\t//\n\t\t// description:\n\t\t//\t\tA shared instance of a `dijit.DialogUnderlay` created and\n\t\t//\t\tused by `dijit.Dialog`, though never created until some Dialog\n\t\t//\t\tor subclass thereof is shown.\n\t};\n\t=====",
        "Map widget attributes to DOMNode attributes.",
        "open: [readonly] Boolean",
        "True if Dialog is currently displayed on screen.",
        "duration: Integer",
        "The time in milliseconds it takes the dialog to fade in and out",
        "refocus: Boolean",
        "A Toggle to modify the default focus behavior of a Dialog, which",
        "is to re-focus the element which had focus before being opened.",
        "False will disable refocusing. Default: true",
        "autofocus: Boolean",
        "A Toggle to modify the default focus behavior of a Dialog, which",
        "is to focus on the first dialog element after opening the dialog.",
        "False will disable autofocusing. Default: true",
        "_firstFocusItem: [private readonly] DomNode",
        "The pointer to the first focusable node in the dialog.",
        "Set by `dijit/_DialogMixin._getFocusItems()`.",
        "_lastFocusItem: [private readonly] DomNode",
        "The pointer to which node has focus prior to our dialog.",
        "Set by `dijit/_DialogMixin._getFocusItems()`.",
        "doLayout: [protected] Boolean",
        "Don't change this parameter from the default value.",
        "This ContentPane parameter doesn't make sense for Dialog, since Dialog",
        "is never a child of a layout container, nor can you specify the size of",
        "Dialog in order to control the size of an inner widget.",
        "draggable: Boolean",
        "Toggles the moveable aspect of the Dialog. If true, Dialog",
        "can be dragged by it's title. If false it will remain centered",
        "in the viewport.",
        "Boolean",
        "Avoid _WidgetBase behavior of copying draggable attribute to this.domNode,",
        "as that prevents text select on modern browsers (#14452)",
        "aria-describedby: String",
        "Allows the user to add an aria-describedby attribute onto the dialog. The value should",
        "be the id of the container element of text that describes the dialog purpose (usually",
        "the first text in the dialog).",
        "|\t<div data-dojo-type=\"dijit/Dialog\" aria-describedby=\"intro\" .....>",
        "|\t\t<div id=\"intro\">Introductory text</div>",
        "|\t\t<div>rest of dialog contents</div>",
        "|\t</div>",
        "maxRatio: Number",
        "Maximum size to allow the dialog to expand to, relative to viewport size",
        "summary:",
        "Called when data has been loaded from an href.",
        "Unlike most other callbacks, this function can be connected to (via `dojo.connect`)",
        "but should *not* be overridden.",
        "tags:",
        "callback",
        "when href is specified we need to reposition the dialog after the data is loaded",
        "and find the focusable elements",
        "summary:",
        "Called after dragging the Dialog. Saves the position of the dialog in the viewport,",
        "and also adjust position to be fully within the viewport, so user doesn't lose access to handle",
        "summary:",
        "Stuff we need to do before showing the Dialog for the first",
        "time (but we defer it until right beforehand, for",
        "performance reasons).",
        "tags:",
        "private",
        "prevent overload, see #5285",
        "summary:",
        "If necessary, shrink dialog contents so dialog fits in viewport",
        "tags:",
        "private",
        "If we resized the dialog contents earlier, reset them back to original size, so",
        "that if the user later increases the viewport size, the dialog can display w/out a scrollbar.",
        "Need to do this before the domGeometry.position(this.domNode) call below.",
        "Get viewport size but then reduce it by a bit; Dialog should always have some space around it",
        "to indicate that it's a popup.  This will also compensate for possible scrollbars on viewport.",
        "Reduce size of dialog contents so that dialog fits in viewport",
        "workaround IE bug moving scrollbar or dragging dialog",
        "summary:",
        "Position modal dialog in the viewport. If no relative offset",
        "in the viewport has been determined (by dragging, for instance),",
        "center the node. Otherwise, use the Dialog's stored relative offset,",
        "and position the node to top: left: values based on the viewport.",
        "don't do anything if called during auto-scroll",
        "Event",
        "summary:",
        "Handles the keyboard events for accessibility reasons",
        "tags:",
        "private",
        "see if we are shift-tabbing from first focusable item on dialog",
        "send focus to last item in dialog",
        "send focus to first item in dialog",
        "see if the key is for the dialog",
        "just let it go",
        "this key is for the disabled document window",
        "allow tabbing into the dialog for a11y",
        "opera won't tab to a div",
        "squelch",
        "summary:",
        "Display the dialog",
        "returns: dojo/_base/Deferred",
        "Deferred object that resolves when the display animation is complete",
        "first time we show the dialog, there's some initialization stuff to do",
        "There's a hide() operation in progress, so cancel it, but still call DialogLevelManager.hide()",
        "as though the hide() completed, in preparation for the DialogLevelManager.show() call below.",
        "Recenter Dialog if user scrolls browser.  Connecting to document doesn't work on IE, need to use window.",
        "lazy load trigger",
        "fade-in Animation object, setup below",
        "find focusable items each time dialog is shown since if dialog contains a widget the",
        "first focusable items can change",
        "summary:",
        "Hide the dialog",
        "returns: dojo/_base/Deferred",
        "Deferred object that resolves when the hide animation is complete",
        "If we haven't been initialized yet then we aren't showing and we can just return.",
        "Likewise if we are already hidden, or are currently fading out.",
        "fade-in Animation object, setup below",
        "fire onHide when the promise resolves.",
        "summary:",
        "Called when viewport scrolled or size changed.  Position the Dialog and the underlay.",
        "tags:",
        "private",
        "avoid race condition during show()",
        "If the user has scrolled the display then reposition the Dialog.  But don't do it for touch",
        "devices, because it will counteract when a keyboard pops up and then the browser auto-scrolls",
        "the focused node into view.",
        "summary:",
        "A modal dialog Widget.",
        "description:",
        "Pops up a modal dialog window, blocking access to the screen",
        "and also graying out the screen Dialog is extended from",
        "ContentPane so it supports all the same parameters (href, etc.).",
        "example:",
        "|\t<div data-dojo-type=\"dijit/Dialog\" data-dojo-props=\"href: 'test.html'\"></div>",
        "example:",
        "|\tvar foo = new Dialog({ title: \"test dialog\", content: \"test content\" };",
        "|\tfoo.placeAt(win.body());",
        "|\tfoo.startup();",
        "for monkey patching and dojox/widget/DialogSimple",
        "summary:",
        "Controls the various active \"levels\" on the page, starting with the",
        "stuff initially visible on the page (at z-index 0), and then having an entry for",
        "each Dialog shown.",
        "dijit/_WidgetBase",
        "Object",
        "summary:",
        "Call right before fade-in animation for new dialog.",
        "Saves current focus, displays/adjusts underlay for new dialog,",
        "and sets the z-index of the dialog itself.",
        "",
        "New dialog will be displayed on top of all currently displayed dialogs.",
        "",
        "Caller is responsible for setting focus in new dialog after the fade-in",
        "animation completes.",
        "Save current focus",
        "Display the underlay, or if already displayed then adjust for this new dialog",
        "TODO: one underlay per document (based on dialog.ownerDocument)",
        "Set z-index a bit above previous dialog",
        "first dialog",
        "Dialog",
        "dijit/_WidgetBase",
        "summary:",
        "Called when the specified dialog is hidden/destroyed, after the fade-out",
        "animation ends, in order to reset page focus, fix the underlay, etc.",
        "If the specified dialog isn't open then does nothing.",
        "",
        "Caller is responsible for either setting display:none on the dialog domNode,",
        "or calling dijit/popup.hide(), or removing it from the page DOM.",
        "Removing the top (or only) dialog in the stack, return focus",
        "to previous dialog",
        "the new active dialog (or the base page itself)",
        "Adjust underlay, unless the underlay widget has already been destroyed",
        "because we are being called during page unload (when all widgets are destroyed)",
        "Returning to original page.  Hide the underlay.",
        "Popping back to previous dialog, adjust underlay.",
        "Adjust focus",
        "If we are returning control to a previous dialog but for some reason",
        "that dialog didn't have a focused field, set focus to first focusable item.",
        "This situation could happen if two dialogs appeared at nearly the same time,",
        "since a dialog doesn't set it's focus until the fade-in is finished.",
        "Refocus the button that spawned the Dialog.   This will fail in corner cases including",
        "page unload on IE, because the dijit/form/Button that launched the Dialog may get destroyed",
        "before this code runs.  (#15058)",
        "Removing a dialog out of order (#9944, #10705).",
        "Don't need to mess with underlay or z-index or anything.",
        "dijit/_WidgetBase",
        "summary:",
        "Returns true if specified Dialog is the top in the task",
        "Stack representing the various active \"levels\" on the page, starting with the",
        "stuff initially visible on the page (at z-index 0), and then having an entry for",
        "each Dialog shown.",
        "Each element in stack has form {",
        "dialog: dialogWidget,",
        "focus: returnFromGetFocus(),",
        "underlayAttrs: attributes to set on underlay (when this widget is active)",
        "}",
        "entry for stuff at z-index: 0",
        "Back compat w/1.6, remove for 2.0",
        "use indirection so modules not rolled into a build",
        "array.indexOf, array.map",
        "declare",
        "domGeometry.setMarginBox",
        "query",
        "module:",
        "dijit/form/MultiSelect",
        "summary:",
        "Widget version of a `<select multiple=true>` element,",
        "for selecting multiple options.",
        "size: Number",
        "Number of elements to display on a page",
        "NOTE: may be removed in version 2.0, since elements may have variable height;",
        "set the size via style=\"...\" or CSS class names instead.",
        "dijit/form/MultiSelect",
        "summary:",
        "Move the selected nodes of a passed Select widget",
        "instance to this Select widget.",
        "",
        "example:",
        "|\t// move all the selected values from \"bar\" to \"foo\"",
        "|\tdijit.byId(\"foo\").addSelected(dijit.byId(\"bar\"));",
        "scroll to bottom to see item",
        "cannot use scrollIntoView since <option> tags don't support all attributes",
        "does not work on IE due to a bug where <select> always shows scrollTop = 0",
        "overshoot will be ignored",
        "scrolling the source select is trickier esp. on safari who forgets to change the scrollbar size",
        "summary:",
        "Access the NodeList of the selected options directly",
        "Boolean",
        "dojo/NodeList",
        "summary:",
        "Hook so get('value') works.",
        "description:",
        "Returns an array of the selected options' values.",
        "Don't call getSelect.map() because it doesn't return a real array,",
        "and that messes up dojo.toJson() calls like in the Form.html test",
        "for Form",
        "Array",
        "Boolean?",
        "summary:",
        "Hook so set('value', values) works.",
        "description:",
        "Set the value(s) of this Select based on passed values",
        "Boolean?",
        "summary:",
        "Invert the selection",
        "onChange: Boolean",
        "If false, onChange is not fired.",
        "Event",
        "for layout widgets:",
        "Object",
        "to insure the code executed only when _BidiSupport loaded, and only",
        "when there was a change in textDir",
        "If the value wasn't defined explicitly, it the same object as",
        "option.text. Since the option.text will be modified (by wrapping of UCC)",
        "we want to save the original option.value for form submission.",
        "apply the bidi support",
        "date date.compare",
        "locale.regexp",
        "stamp.fromISOString stamp.toISOString",
        "declare",
        "lang.getObject",
        "module:",
        "dijit/form/_DateTimeTextBox",
        "workaround for #11279, new Date(\"\") == NaN",
        "summary:",
        "Base class for validating, serializable, range-bound date or time text box.",
        "hasDownArrow: [const] Boolean",
        "Set this textbox to display a down arrow button, to open the drop down list.",
        "Set classes like dijitDownArrowButtonHover depending on mouse action over button node",
        "=====\n\t\t// constraints: _DateTimeTextBox.__Constraints\n\t\t//\t\tDespite the name, this parameter specifies both constraints on the input\n\t\t//\t\t(including starting/ending dates/times allowed) as well as\n\t\t//\t\tformatting options like whether the date is displayed in long (ex: December 25, 2005)\n\t\t//\t\tor short (ex: 12/25/2005) format.  See `dijit/form/_DateTimeTextBox.__Constraints` for details.\n\t\tconstraints: {},\n\t\t======",
        "Override ValidationTextBox.pattern.... we use a reg-ex generating function rather",
        "than a straight regexp to deal with locale  (plus formatting options too?)",
        "datePackage: String",
        "JavaScript namespace to find calendar routines.\t If unspecified, uses Gregorian calendar routines",
        "at dojo/date and dojo/date/locale.",
        "TODO: for 2.0, replace datePackage with dateModule and dateLocalModule attributes specifying MIDs,",
        "or alternately just get rid of this completely and tell user to use module ID remapping",
        "via require",
        "in case type=\"date\"|\"time\" was specified which messes up parse/format",
        "Override _FormWidget.compare() to work for dates/times",
        "Date",
        "Date",
        "flag to _HasDropDown to make drop down Calendar width == <input> width",
        "Date",
        "locale.__FormatOptions",
        "summary:",
        "Formats the value as a Date, according to specified locale (second argument)",
        "tags:",
        "protected",
        "String",
        "locale.__FormatOptions",
        "summary:",
        "Parses as string as a Date, according to constraints",
        "tags:",
        "protected",
        "Date",
        "Overrides ValidationTextBox.serialize() to serialize a date in canonical ISO format.",
        "anything",
        "Object?",
        "dropDownDefaultValue: Date",
        "The default value to focus in the popupClass widget when the textbox value is empty.",
        "value: Date",
        "The value of this widget as a JavaScript Date object.  Use get(\"value\") / set(\"value\", val) to manipulate.",
        "When passed to the parser in markup, must be specified according to `dojo/date/stamp.fromISOString()`",
        "value.toString()=\"NaN\"",
        "used by filter() when the textbox is blank",
        "popupClass: [protected extension] String",
        "Name of the popup widget class used to select a date/time.",
        "Subclasses should specify this.",
        "default is no popup = text only",
        "_selector: [protected extension] String",
        "Specifies constraints.selector passed to dojo.date functions, should be either",
        "\"date\" or \"time\".",
        "Subclass must specify this.",
        "===== , srcNodeRef =====",
        "summary:",
        "Create the widget.",
        "params: Object|null",
        "Hash of initialization parameters for widget, including scalar values (like title, duration etc.)",
        "and functions, typically callbacks like onClick.",
        "The hash can contain any of the widget's properties, excluding read-only properties.",
        "srcNodeRef: DOMNode|String?",
        "If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree",
        "If hasDownArrow is false, we basically just want to treat the whole widget as the",
        "button.",
        "Object",
        "see #5465 - always format with 4-digit years",
        "Date",
        "summary:",
        "Runs various tests on the value, checking for invalid conditions",
        "tags:",
        "private",
        "Date|String",
        "Boolean?",
        "String?",
        "summary:",
        "Sets the date on this textbox. Note: value can be a JavaScript Date literal or a string to be parsed.",
        "Avoid spurious watch() notifications when value is changed to new Date object w/the same value",
        "Date",
        "convert null setting into today's date, since there needs to be *some* default at all times.",
        "Function",
        "rebuild drop down every time, so that constraints get copied (#6002)",
        "this will cause InlineEditBox and other handlers to do stuff so make sure it's last",
        "for TimeTextBox, to filter times shown",
        "Date",
        "summary:",
        "disables dates outside of the min/max of the _DateTimeTextBox",
        "String",
        "Boolean?",
        "=====\n\t _DateTimeTextBox.__Constraints = declare([RangeBoundTextBox.__Constraints, locale.__FormatOptions], {\n\t\t // summary:\n\t\t //\t\tSpecifies both the rules on valid/invalid values (first/last date/time allowed),\n\t\t //\t\tand also formatting options for how the date/time is displayed.\n\t\t // example:\n\t\t //\t\tTo restrict to dates within 2004, displayed in a long format like \"December 25, 2005\":\n\t\t //\t|\t\t{min:'2004-01-01',max:'2004-12-31', formatLength:'long'}\n\t });\n\t =====",
        "declare",
        "domAttr.set",
        "module:",
        "dijit/form/_ToggleButtonMixin",
        "summary:",
        "A mixin to provide functionality to allow a button that can be in two states (checked or not).",
        "checked: Boolean",
        "Corresponds to the native HTML `<input>` element's attribute.",
        "In markup, specified as \"checked='checked'\" or just \"checked\".",
        "True if the button is depressed, or the checkbox is checked,",
        "or the radio button is selected, etc.",
        "aria-pressed for toggle buttons, and aria-checked for checkboxes",
        "Event",
        "partially set the toggled value, assuming the toggle will work, so it can be overridden in the onclick handler",
        "the user could reset the value here",
        "officially set the toggled or user value, or reset it back",
        "Boolean",
        "Boolean?",
        "IE is not ready to handle checked attribute (affects tab order)",
        "needlessly setting \"checked\" upsets IE's tab order",
        "\"mixed\" -> true",
        "aria values should be strings",
        "use postCreate instead of startup so users forgetting to call startup are OK",
        "need this here instead of on the template so IE8 tab order works",
        "Update our reset value if it hasn't yet been set (because this.set()",
        "is only called when there *is* a value)",
        "summary:",
        "Reset the widget's value to what it was at initialization time",
        "set checked state to original setting",
        "array.map",
        "declare",
        "domAttr.get",
        "domClass.add domClass.contains domClass.remove domClass.toggle",
        "event.stop",
        "kernel.deprecated",
        "keys",
        "lang.hitch",
        "has(\"ie\")",
        "module:",
        "dijit/Calendar",
        "_Widget for deprecated methods like setAttribute()",
        "summary:",
        "A simple GUI for choosing a date in the context of a monthly calendar.",
        "",
        "description:",
        "See CalendarLite for general description.   Calendar extends CalendarLite, adding:",
        "",
        "- month drop down list",
        "- keyboard navigation",
        "- CSS classes for hover/mousepress on date, month, and year nodes",
        "- support of deprecated methods (will be removed in 2.0)",
        "Set node classes for various mouse events, see dijit._CssStateMixin for more details",
        "Date",
        "summary:",
        "Deprecated.   Use set('value', ...) instead.",
        "tags:",
        "deprecated",
        "summary:",
        "Creates the drop down button that displays the current month and lets user pick a new one",
        "Events specific to Calendar, not used in CalendarLite",
        "Number",
        "summary:",
        "Handler for when user selects a month from the drop down list",
        "tags:",
        "protected",
        "move to selected month, bounding by the number of days in the month",
        "(ex: jan 31 --> feb 28, not feb 31)",
        "Event",
        "summary:",
        "Handler for mouse over events on days, sets hovered style",
        "tags:",
        "protected",
        "event can occur on <td> or the <span> inside the td,",
        "set node to the <td>.",
        "Event",
        "summary:",
        "Handler for mouse out events on days, clears hovered style",
        "tags:",
        "protected",
        "if mouse out occurs moving from <td> to <span> inside <td>, ignore it",
        "Event",
        "Event",
        "Event",
        "summary:",
        "Provides keyboard navigation of calendar.",
        "description:",
        "Called from _onKeyDown() to handle keypress on a stand alone Calendar,",
        "and also from `dijit/form/_DateTimeTextBox` to pass a keydown event",
        "from the `dijit/form/DateTextBox` to be handled in this widget",
        "returns:",
        "False if the key was recognized as a navigation key,",
        "to indicate that the event was handled by Calendar and shouldn't be propagated",
        "tags:",
        "protected",
        "fallthrough...",
        "fallthrough...",
        "fallthrough...",
        "go to the next month",
        "subtract a day from the result when we're done",
        "fallthrough...",
        "Event",
        "summary:",
        "For handling keypress events on a stand alone calendar",
        "Date",
        "===== date =====",
        "summary:",
        "Deprecated.   Notification that a date cell was selected.  It may be the same as the previous value.",
        "description:",
        "Formerly used by `dijit/form/_DateTimeTextBox` (and thus `dijit/form/DateTextBox`)",
        "to get notification when the user has clicked a date.  Now onExecute() (above) is used.",
        "tags:",
        "protected",
        "remove in 2.0",
        "===== dateObject, locale =====",
        "summary:",
        "May be overridden to return CSS classes to associate with the date entry for the given dateObject,",
        "for example to indicate a holiday in specified locale.",
        "dateObject: Date",
        "locale: String?",
        "tags:",
        "extension",
        "=====\n\t\t\treturn \"\"; // String\n=====",
        "summary:",
        "DropDownButton for the current month.    Displays name of current month",
        "and a list of month names in the drop down",
        "do not change this id because it is referenced in the template",
        "summary:",
        "Set the current month to display as a label",
        "Set name of current month and also fill in spacer element with all the month names",
        "(invisible) so that the maximum width will affect layout.   But not on IE6 because then",
        "the center <TH> overlaps the right <TH> (due to a browser bug).",
        "summary:",
        "The list-of-months drop down from the MonthDropDownButton",
        "months: String[]",
        "List of names of months, possibly w/some undefined entries for Hebrew leap months",
        "(ex: [\"January\", \"February\", undefined, \"April\", ...])",
        "String[]",
        "Event",
        "Number",
        "===== month =====",
        "summary:",
        "Callback when month is selected from drop down",
        "dom.byId",
        "has(\"ie\") has(\"opera\")",
        "win.body win.doc win.doc.createElement win.doc.selection win.doc.selection.createRange win.doc.selection.type.toLowerCase win.global win.global.getSelection",
        "for exporting symbols to dijit._editor.selection (TODO: remove in 2.0)",
        "module:",
        "dijit/_editor/selection",
        "summary:",
        "Text selection API",
        "FIXME:",
        "all of these methods branch internally for IE. This is probably",
        "sub-optimal in terms of runtime performance. We should investigate the",
        "size difference for differentiating at definition time.",
        "summary:",
        "Get the selection type (like win.doc.select.type in IE).",
        "W3C path",
        "Check if the actual selection is a CONTROL (IMG, TABLE, HR, etc...).",
        "squelch",
        "text node",
        "String",
        "IE6-8",
        "summary:",
        "Return the text (no html tags) included in the current selection or null if no text is selected",
        "W3C path",
        "String",
        "IE6-8",
        "summary:",
        "Return the html text of the current selection or null if unavailable",
        "W3C path",
        "Handle selections spanning ranges, such as Opera",
        "String",
        "IE6-8",
        "summary:",
        "Retrieves the selected element (if any), just in the case that",
        "a single element (object like and image or a table) is",
        "selected.",
        "W3C path",
        "IE6-8",
        "summary:",
        "Get the parent element of the current selection",
        "not an element",
        "String",
        "...",
        "summary:",
        "Check whether current selection has a  parent element which is",
        "of type tagName (or one of the other specified tagName)",
        "tagName: String",
        "The tag name to determine if it has an ancestor of.",
        "Boolean",
        "String",
        "...",
        "summary:",
        "Return the parent element of the current selection which is of",
        "type tagName (or one of the other specified tagName)",
        "tagName: String",
        "The tag name to determine if it has an ancestor of.",
        "DOMNode",
        "DomNode",
        "String[]",
        "summary:",
        "Function to determine if a node is one of an array of tags.",
        "node:",
        "The node to inspect.",
        "tags:",
        "An array of tag name strings to check to see if the node matches.",
        "String",
        "DomNode",
        "String[]",
        "summary:",
        "Function to locate a parent node that matches one of a set of tags",
        "node:",
        "The node to inspect.",
        "tags:",
        "An array of tag name strings to check to see if the node matches.",
        "DOMNode",
        "Boolean",
        "summary:",
        "Function to collapse (clear), the current selection",
        "beginning: Boolean",
        "Indicates whether to collapse the cursor to the beginning of the selection or end.",
        "W3C path",
        "Mozilla",
        "Safari",
        "pulled from WebCore/ecma/kjs_window.cpp, line 2536",
        "IE6-8",
        "summary:",
        "Function to delete the currently selected content from the document.",
        "W3C path",
        "Selection",
        "IE6-8",
        "Selection",
        "DomNode",
        "Boolean?",
        "summary:",
        "clear previous selection and select the content of the node",
        "(excluding the node itself)",
        "element: DOMNode",
        "The element you wish to select the children content of.",
        "nochangefocus: Boolean",
        "Indicates if the focus should change or not.",
        "W3C",
        "Opera's selectAllChildren doesn't seem to work right",
        "against <body> nodes and possibly others ... so",
        "we use the W3C range API",
        "IE6-8",
        "IE throws an exception here if the widget is hidden.  See #5439",
        "squelch",
        "DomNode",
        "Boolean?",
        "summary:",
        "clear previous selection and select element (including all its children)",
        "element: DOMNode",
        "The element to select.",
        "nochangefocus: Boolean",
        "Boolean indicating if the focus should be changed.  IE only.",
        "TODO: remove for 2.0 or sooner, spec listed above doesn't allow for string",
        "TODO: use winUtils.get(doc)?",
        "W3C path",
        "Mozilla",
        "FIXME: does this work on Safari?",
        "Opera works if you use the current range on",
        "the selection if present.",
        "IE6-8",
        "summary:",
        "This function determines if 'node' is",
        "in the current selection.",
        "tags:",
        "public",
        "WC3",
        "squelch",
        "IE6-8, so we can't use the range object as the pseudo",
        "range doesn't implement the boundary checking, we have to",
        "use IE specific crud.",
        "squelch",
        "We can finally compare similar to W3C",
        "Boolean",
        "for context sensitive loading of Toggler",
        "module:",
        "dojo/fx",
        "For back-compat, remove in 2.0.",
        "use indirection so modules not rolled into a build",
        "summary:",
        "Effects library on top of Base animations",
        "switch animations",
        "int?",
        "Boolean?",
        "Decimal",
        "Boolean?",
        "boolean?",
        "dojo/_base/fx.Animation[]",
        "summary:",
        "Chain a list of `dojo.Animation`s to run in sequence",
        "",
        "description:",
        "Return a `dojo.Animation` which will play all passed",
        "`dojo.Animation` instances in sequence, firing its own",
        "synthesized events simulating a single animation. (eg:",
        "onEnd of this animation means the end of the chain,",
        "not the individual animations within)",
        "",
        "example:",
        "Once `node` is faded out, fade in `otherNode`",
        "|\tfx.chain([",
        "|\t\tdojo.fadeIn({ node:node }),",
        "|\t\tdojo.fadeOut({ node:otherNode })",
        "|\t]).play();",
        "",
        "dojo/_base/fx.Animation",
        "int?",
        "Boolean?",
        "Decimal",
        "Boolean?",
        "boolean?",
        "dojo/_base/fx.Animation[]",
        "summary:",
        "Combine a list of `dojo.Animation`s to run in parallel",
        "",
        "description:",
        "Combine an array of `dojo.Animation`s to run in parallel,",
        "providing a new `dojo.Animation` instance encompasing each",
        "animation, firing standard animation events.",
        "",
        "example:",
        "Fade out `node` while fading in `otherNode` simultaneously",
        "|\tfx.combine([",
        "|\t\tdojo.fadeIn({ node:node }),",
        "|\t\tdojo.fadeOut({ node:otherNode })",
        "|\t]).play();",
        "",
        "example:",
        "When the longest animation ends, execute a function:",
        "|\tvar anim = fx.combine([",
        "|\t\tdojo.fadeIn({ node: n, duration:700 }),",
        "|\t\tdojo.fadeOut({ node: otherNode, duration: 300 })",
        "|\t]);",
        "|\tdojo.connect(anim, \"onEnd\", function(){",
        "|\t\t// overall animation is done.",
        "|\t});",
        "|\tanim.play(); // play the animation",
        "",
        "dojo/_base/fx.Animation",
        "Object",
        "summary:",
        "Expand a node to it's natural height.",
        "",
        "description:",
        "Returns an animation that will expand the",
        "node defined in 'args' object from it's current height to",
        "it's natural height (with no scrollbar).",
        "Node must have no margin/border/padding.",
        "",
        "args: Object",
        "A hash-map of standard `dojo.Animation` constructor properties",
        "(such as easing: node: duration: and so on)",
        "",
        "example:",
        "|\tfx.wipeIn({",
        "|\t\tnode:\"someId\"",
        "|\t}).play()",
        "wrapped in functions so we wait till the last second to query (in case value has changed)",
        "start at current [computed] height, but use 1px rather than 0",
        "because 0 causes IE to display the whole panel",
        "dojo/_base/fx.Animation",
        "Object",
        "summary:",
        "Shrink a node to nothing and hide it.",
        "",
        "description:",
        "Returns an animation that will shrink node defined in \"args\"",
        "from it's current height to 1px, and then hide it.",
        "",
        "args: Object",
        "A hash-map of standard `dojo.Animation` constructor properties",
        "(such as easing: node: duration: and so on)",
        "",
        "example:",
        "|\tfx.wipeOut({ node:\"someId\" }).play()",
        "0 causes IE to display the whole panel",
        "dojo/_base/fx.Animation",
        "Object",
        "summary:",
        "Slide a node to a new top/left position",
        "",
        "description:",
        "Returns an animation that will slide \"node\"",
        "defined in args Object from its current position to",
        "the position defined by (args.left, args.top).",
        "",
        "args: Object",
        "A hash-map of standard `dojo.Animation` constructor properties",
        "(such as easing: node: duration: and so on). Special args members",
        "are `top` and `left`, which indicate the new position to slide to.",
        "",
        "example:",
        "|\t.slideTo({ node: node, left:\"40\", top:\"50\", units:\"px\" }).play()",
        "dojo/_base/fx.Animation",
        "declare",
        "_getTabNavigable",
        "module:",
        "dijit/_DialogMixin",
        "summary:",
        "This provides functions useful to Dialog and TooltipDialog",
        "Object",
        "===== formContents =====",
        "summary:",
        "Callback when the user hits the submit button.",
        "Override this method to handle Dialog execution.",
        "description:",
        "After the user has pressed the submit button, the Dialog",
        "first calls onExecute() to notify the container to hide the",
        "dialog and restore focus to wherever it used to be.",
        "",
        "type:",
        "callback",
        "summary:",
        "Called when user has pressed the Dialog's cancel button, to notify container.",
        "description:",
        "Developer shouldn't override or connect to this method;",
        "it's a private communication device between the TooltipDialog",
        "and the thing that opened it (ex: `dijit/form/DropDownButton`)",
        "type:",
        "protected",
        "summary:",
        "Called when user has pressed the dialog's OK button, to notify container.",
        "description:",
        "Developer shouldn't override or connect to this method;",
        "it's a private communication device between the TooltipDialog",
        "and the thing that opened it (ex: `dijit/form/DropDownButton`)",
        "type:",
        "protected",
        "summary:",
        "Callback when user hits submit button",
        "type:",
        "protected",
        "notify container that we are about to execute",
        "summary:",
        "Finds focusable items in dialog,",
        "and sets this._firstFocusItem and this._lastFocusItem",
        "tags:",
        "protected",
        "array.filter array.forEach array.map",
        "connect.isCopyKey()",
        "cookie",
        "declare",
        "Deferred",
        "DeferredList",
        "dom.isDescendant",
        "domClass.add domClass.remove domClass.replace domClass.toggle",
        "domGeometry.setMarginBox domGeometry.position",
        "domStyle.set",
        "event.stop",
        "createError",
        "fxUtils.wipeIn fxUtils.wipeOut",
        "kernel.deprecated",
        "arrows etc.",
        "lang.getObject lang.mixin lang.hitch",
        "on(), on.selector()",
        "registry.byNode(), registry.getEnclosingWidget()",
        "manager.defaultDuration",
        "module:",
        "dijit/Tree",
        "Back-compat shim",
        "summary:",
        "Single node within a tree.   This class is used internally",
        "by Tree and should not be accessed directly.",
        "tags:",
        "private",
        "item: [const] Item",
        "the dojo.data entry this tree represents",
        "isTreeNode: [protected] Boolean",
        "Indicates that this is a TreeNode.   Used by `dijit.Tree` only,",
        "should not be accessed directly.",
        "label: String",
        "Text of this tree node",
        "isExpandable: [private] Boolean",
        "This node has children, so show the expando node (+ sign)",
        "isExpanded: [readonly] Boolean",
        "This node is currently expanded (ie, opened)",
        "state: [private] String",
        "Dynamic loading-related stuff.",
        "When an empty folder node appears, it is \"UNCHECKED\" first,",
        "then after dojo.data query it becomes \"LOADING\" and, finally \"LOADED\"",
        "For hover effect for tree node, and focus effect for label",
        "Tooltip is defined in _WidgetBase but we need to handle the mapping to DOM here",
        "set expand icon for leaf",
        "set icon and label class based on item",
        "aria-selected should be false on all selectable elements.",
        "summary:",
        "Tell this node how many levels it should be indented",
        "description:",
        "0 for top level nodes, 1 for their children, 2 for their",
        "grandchildren, etc.",
        "Math.max() is to prevent negative padding on hidden root node (when indent == -1)",
        "TODOC: what is this for???",
        "summary:",
        "Visually denote that tree is loading data, etc.",
        "tags:",
        "private",
        "summary:",
        "Clear markup from markProcessing() call",
        "tags:",
        "private",
        "summary:",
        "Set appropriate CSS classes for icon and label dom node",
        "(used to allow for item updates to change respective CSS)",
        "tags:",
        "private",
        "For back-compat with 1.0, need to use null to specify root item (TODO: remove in 2.0)",
        "signifies paint started and finished (synchronously)",
        "summary:",
        "Set the appropriate CSS classes and styles for labels, icons and rows.",
        "",
        "item:",
        "The data item.",
        "",
        "lower:",
        "The lower case attribute to use, e.g. 'icon', 'label' or 'row'.",
        "",
        "upper:",
        "The upper case attribute to use, e.g. 'Icon', 'Label' or 'Row'.",
        "",
        "tags:",
        "private",
        "summary:",
        "Set appropriate CSS classes for this.domNode",
        "tags:",
        "private",
        "if we are hiding the root node then make every first level child look like a root node",
        "Boolean",
        "summary:",
        "Set the right image for the expando node",
        "tags:",
        "private",
        "apply the appropriate class to the expando node",
        "provide a non-image based indicator for images-off mode",
        "summary:",
        "Show my children",
        "returns:",
        "Deferred that fires when expansion is complete",
        "If there's already an expand in progress or we are already expanded, just return",
        "dojo/_base/Deferred",
        "cancel in progress collapse operation",
        "All the state information for when a node is expanded, maybe this should be",
        "set when the animation completes instead",
        "Deferred that fires when expand is complete",
        "Canceller",
        "dojo/_base/Deferred",
        "summary:",
        "Collapse this node (if it's expanded)",
        "Node is already collapsed, or there's a collapse in progress, just return that Deferred",
        "cancel in progress expand operation",
        "Deferred that fires when expand is complete",
        "Canceller",
        "dojo/_base/Deferred",
        "indent: Integer",
        "Levels from this node to the root node",
        "Object[]",
        "summary:",
        "Sets the child items of this node, removing/adding nodes",
        "from current children to match specified items[] array.",
        "Also, if this.persist == true, expands any children that were previously",
        "opened.",
        "returns:",
        "Deferred object that fires after all previously opened children",
        "have been expanded again (or fires instantly if there are no such children).",
        "list of deferreds that need to fire before I am complete",
        "Orphan all my existing children.",
        "If items contains some of the same items as before then we will reattach them.",
        "Don't call this.removeChild() because that will collapse the tree etc.",
        "All the old children of this TreeNode are subject for destruction if",
        "1) they aren't listed in the new children array (items)",
        "2) they aren't immediately adopted by another node (DnD)",
        "If node is in selection then remove it.",
        "Deregister mapping from item id --> this node",
        "And finally we can destroy the node",
        "Create _TreeNode widget for each specified tree node, unless one already",
        "exists and isn't being used (presumably it's from a DnD move and was recently",
        "released",
        "MARKER: REUSE NODE",
        "If node was previously opened then open it again now (this may trigger",
        "more data store accesses, recursively)",
        "note that updateLayout() needs to be called on each child after",
        "_all_ the children exist",
        "change expando to/from dot or + icon, as appropriate",
        "Set leaf icon or folder icon, as appropriate",
        "On initial tree show, make the selected TreeNode as either the root node of the tree,",
        "or the first child, if the root node is hidden",
        "fallback: no nodes in tree so focus on Tree <div> itself",
        "to reset TreeNode widths after an item is added/removed from the Tree",
        "dojo/_base/Deferred",
        "treeNode",
        "summary:",
        "if this node wasn't already showing the expando node,",
        "turn it into one and call _setExpando()",
        "TODO: hmm this isn't called from anywhere, maybe should remove it for 2.0",
        "Boolean",
        "summary:",
        "A Tree has a (single) currently selected node.",
        "Mark that this node is/isn't that currently selected node.",
        "description:",
        "In particular, setting a node as selected involves setting tabIndex",
        "so that when user tabs to the tree, focus will go to that node (only).",
        "Boolean",
        "summary:",
        "A Tree has a (single) node that's focusable.",
        "Mark that this node is/isn't that currently focsuable node.",
        "description:",
        "In particular, setting a node as selected involves setting tabIndex",
        "so that when user tabs to the tree, focus will go to that node (only).",
        "summary:",
        "This widget displays hierarchical data from a store.",
        "store: [deprecated] String|dojo/data/Store",
        "Deprecated.  Use \"model\" parameter instead.",
        "The store to get data to display in the tree.",
        "model: dijit/tree/model",
        "Interface to read tree data, get notifications of changes to tree data,",
        "and for handling drop operations (i.e drag and drop onto the tree)",
        "query: [deprecated] anything",
        "Deprecated.  User should specify query to the model directly instead.",
        "Specifies datastore query to return the root item or top items for the tree.",
        "label: [deprecated] String",
        "Deprecated.  Use dijit/tree/ForestStoreModel directly instead.",
        "Used in conjunction with query parameter.",
        "If a query is specified (rather than a root node id), and a label is also specified,",
        "then a fake root node is created and displayed, with this label.",
        "showRoot: [const] Boolean",
        "Should the root node be displayed, or hidden?",
        "childrenAttr: [deprecated] String[]",
        "Deprecated.   This information should be specified in the model.",
        "One ore more attributes that holds children of a tree node",
        "paths: String[][] or Item[][]",
        "Full paths from rootNode to selected nodes expressed as array of items or array of ids.",
        "Since setting the paths may be asynchronous (because of waiting on dojo.data), set(\"paths\", ...)",
        "returns a Deferred to indicate when the set is complete.",
        "path: String[] or Item[]",
        "Backward compatible singular variant of paths.",
        "selectedItems: [readonly] Item[]",
        "The currently selected items in this tree.",
        "This property can only be set (via set('selectedItems', ...)) when that item is already",
        "visible in the tree.   (I.e. the tree has already been expanded to show that node.)",
        "Should generally use `paths` attribute to set the selected items instead.",
        "selectedItem: [readonly] Item",
        "Backward compatible singular variant of selectedItems.",
        "openOnClick: Boolean",
        "If true, clicking a folder node's label will open it, rather than calling onClick()",
        "openOnDblClick: Boolean",
        "If true, double-clicking a folder node's label will open it, rather than calling onDblClick()",
        "persist: Boolean",
        "Enables/disables use of cookies for state saving.",
        "autoExpand: Boolean",
        "Fully expand the tree on load.   Overrides `persist`.",
        "dndController: [protected] Function|String",
        "Class to use as as the dnd controller.  Specifying this class enables DnD.",
        "Generally you should specify this as dijit/tree/dndSource.",
        "Setting of dijit/tree/_dndSelector handles selection only (no actual DnD).",
        "parameters to pull off of the tree and pass on to the dndController as its params",
        "declare the above items so they can be pulled from the tree's markup",
        "onDndDrop: [protected] Function",
        "Parameter to dndController, see `dijit/tree/dndSource.onDndDrop()`.",
        "Generally this doesn't need to be set.",
        "=====\n\titemCreator: function(nodes, target, source){\n\t\t// summary:\n\t\t//\t\tReturns objects passed to `Tree.model.newItem()` based on DnD nodes\n\t\t//\t\tdropped onto the tree.   Developer must override this method to enable\n\t\t//\t\tdropping from external sources onto this Tree, unless the Tree.model's items\n\t\t//\t\thappen to look like {id: 123, name: \"Apple\" } with no other attributes.\n\t\t//\n\t\t//\t\tFor each node in nodes[], which came from source, create a hash of name/value\n\t\t//\t\tpairs to be passed to Tree.model.newItem().  Returns array of those hashes.\n\t\t// nodes: DomNode[]\n\t\t//\t\tThe DOMNodes dragged from the source container\n\t\t// target: DomNode\n\t\t//\t\tThe target TreeNode.rowNode\n\t\t// source: dojo/dnd/Source\n\t\t//\t\tThe source container the nodes were dragged from, perhaps another Tree or a plain dojo/dnd/Source\n\t\t// returns: Object[]\n\t\t//\t\tArray of name/value hashes for each new item to be added to the Tree, like:\n\t\t// |\t[\n\t\t// |\t\t{ id: 123, label: \"apple\", foo: \"bar\" },\n\t\t// |\t\t{ id: 456, label: \"pear\", zaz: \"bam\" }\n\t\t// |\t]\n\t\t// tags:\n\t\t//\t\textension\n\t\treturn [{}];\n\t},\n\t=====",
        "onDndCancel: [protected] Function",
        "Parameter to dndController, see `dijit/tree/dndSource.onDndCancel()`.",
        "Generally this doesn't need to be set.",
        "=====\n\tcheckAcceptance: function(source, nodes){\n\t\t// summary:\n\t\t//\t\tChecks if the Tree itself can accept nodes from this source\n\t\t// source: dijit/tree/dndSource\n\t\t//\t\tThe source which provides items\n\t\t// nodes: DOMNode[]\n\t\t//\t\tArray of DOM nodes corresponding to nodes being dropped, dijitTreeRow nodes if\n\t\t//\t\tsource is a dijit/Tree.\n\t\t// tags:\n\t\t//\t\textension\n\t\treturn true;\t// Boolean\n\t},\n=====",
        "=====\n\tcheckItemAcceptance: function(target, source, position){\n\t\t// summary:\n\t\t//\t\tStub function to be overridden if one wants to check for the ability to drop at the node/item level\n\t\t// description:\n\t\t//\t\tIn the base case, this is called to check if target can become a child of source.\n\t\t//\t\tWhen betweenThreshold is set, position=\"before\" or \"after\" means that we\n\t\t//\t\tare asking if the source node can be dropped before/after the target node.\n\t\t// target: DOMNode\n\t\t//\t\tThe dijitTreeRoot DOM node inside of the TreeNode that we are dropping on to\n\t\t//\t\tUse registry.getEnclosingWidget(target) to get the TreeNode.\n\t\t// source: dijit/tree/dndSource\n\t\t//\t\tThe (set of) nodes we are dropping\n\t\t// position: String\n\t\t//\t\t\"over\", \"before\", or \"after\"\n\t\t// tags:\n\t\t//\t\textension\n\t\treturn true;\t// Boolean\n\t},\n=====",
        "dragThreshold: Integer",
        "Number of pixels mouse moves before it's considered the start of a drag operation",
        "betweenThreshold: Integer",
        "Set to a positive value to allow drag and drop \"between\" nodes.",
        "",
        "If during DnD mouse is over a (target) node but less than betweenThreshold",
        "pixels from the bottom edge, dropping the the dragged node will make it",
        "the next sibling of the target node, rather than the child.",
        "",
        "Similarly, if mouse is over a target node but less that betweenThreshold",
        "pixels from the top edge, dropping the dragged node will make it",
        "the target node's previous sibling rather than the target node's child.",
        "_nodePixelIndent: Integer",
        "Number of pixels to indent tree nodes (relative to parent node).",
        "Default is 19 but can be overridden by setting CSS class dijitTreeIndent",
        "and calling resize() or startup() on tree after it's in the DOM.",
        "String",
        "Object",
        "summary:",
        "Publish a message for this widget/topic",
        "publish",
        "There's little point in saving opened/closed state of nodes for a Tree",
        "that initially opens all it's nodes.",
        "Deferred that fires when all the children have loaded.",
        "Deferred that fires when all pending operations complete.",
        "Catch events on TreeNodes",
        "Create glue between store and Tree, if not specified directly by user",
        "monitor changes to items",
        "If no path was specified to the constructor, use path saved in cookie",
        "onLoadDeferred should fire when all commands that are part of initialization have completed.",
        "It will include all the set(\"paths\", ...) commands that happen during initialization.",
        "summary:",
        "User specified a store&query rather than model, so create model from store/query",
        "Only override the model's mayHaveChildren() method if the user has specified an override",
        "For backwards compatibility, the visibility of the root node is controlled by",
        "whether or not the user has specified a label",
        "summary:",
        "Called when tree finishes loading and expanding.",
        "description:",
        "If persist == true the loading may encompass many levels of fetches",
        "from the data store, each asynchronous.   Waits for all to finish.",
        "tags:",
        "callback",
        "summary:",
        "Initial load of the tree.",
        "Load root node (possibly hidden) and it's children.",
        "if root is not visible, move tree role to the invisible",
        "root node's containerNode, see #12135",
        "move the aria-label or aria-labelledby to the element with the role",
        "sets \"dijitTreeIsRoot\" CSS classname",
        "Load top level children, and if persist==true, all nodes that were previously opened",
        "Then, select the nodes that were selected last time, or",
        "the ones specified by params.paths[].",
        "Item or id",
        "summary:",
        "Returns all tree nodes that refer to an item",
        "returns:",
        "Array of tree nodes that refer to passed item",
        "return a copy so widget don't get messed up by changes to returned array",
        "Item or id",
        "Items or ids",
        "summary:",
        "Select tree nodes related to passed items.",
        "WARNING: if model use multi-parented items or desired tree node isn't already loaded",
        "behavior is undefined. Use set('paths', ...) instead.",
        "Item[]|String[]",
        "summary:",
        "Singular variant of _setPathsAttr",
        "Empty list is interpreted as \"select nothing\"",
        "Item[][]|String[][]",
        "summary:",
        "Select the tree nodes identified by passed paths.",
        "paths:",
        "Array of arrays of items or item id's",
        "returns:",
        "Deferred to indicate when the set is complete",
        "Let any previous set(\"path\", ...) commands complete before this one starts.",
        "We may need to wait for some nodes to expand, so setting",
        "each path will involve a Deferred. We bring those deferreds",
        "together with a DeferredList.",
        "normalize path to use identity",
        "Wait for the tree to load, if it hasn't already.",
        "Traverse path; the next path component should be among \"nodes\".",
        "Successfully reached the end of this path",
        "After all expansion is finished, set the selection to",
        "the set of nodes successfully found.",
        "summary:",
        "Marks the specified TreeNodes as selected.",
        "nodes: TreeNode[]",
        "TreeNodes to mark.",
        "summary:",
        "Expand all nodes in the tree",
        "returns:",
        "Deferred that fires when all nodes have expanded",
        "Expand the node",
        "When node has expanded, call expand() recursively on each non-leaf child",
        "And when all those recursive calls finish, signal that I'm finished",
        "summary:",
        "Collapse all nodes in the tree",
        "returns:",
        "Deferred that fires when all nodes have collapsed",
        "Collapse children first",
        "And when all those recursive calls finish, collapse myself, unless I'm the invisible root node,",
        "in which case collapseAll() is finished",
        "When node has collapsed, signal that call is finished",
        "Data store related functions //////////////////////",
        "These just get passed to the model; they are here for back-compat",
        "dojo/data/Item",
        "===== item =====",
        "summary:",
        "Deprecated.   This should be specified on the model itself.",
        "",
        "Overridable function to tell if an item has or may have children.",
        "Controls whether or not +/- expando icon is shown.",
        "(For efficiency reasons we may not want to check if an element actually",
        "has children until user clicks the expando node)",
        "tags:",
        "deprecated",
        "===== parentItem, onComplete =====",
        "summary:",
        "Deprecated.   This should be specified on the model itself.",
        "",
        "Overridable function that return array of child items of given parent item,",
        "or if parentItem==null then return top items in tree",
        "tags:",
        "deprecated",
        "",
        "Functions for converting an item to a TreeNode",
        "dojo/data/Item",
        "summary:",
        "Overridable function to get the label for a tree node (given the item)",
        "tags:",
        "extension",
        "String",
        "dojo/data/Item",
        "Boolean",
        "summary:",
        "Overridable function to return CSS class name to display icon",
        "tags:",
        "extension",
        "===== item, opened =====",
        "summary:",
        "Overridable function to return CSS class name to display label",
        "item: dojo/data/Item",
        "opened: Boolean",
        "returns: String",
        "CSS class name",
        "tags:",
        "extension",
        "===== item, opened =====",
        "summary:",
        "Overridable function to return CSS class name to display row",
        "item: dojo/data/Item",
        "opened: Boolean",
        "returns: String",
        "CSS class name",
        "tags:",
        "extension",
        "===== item, opened =====",
        "summary:",
        "Overridable function to return CSS styles to display icon",
        "item: dojo/data/Item",
        "opened: Boolean",
        "returns: Object",
        "Object suitable for input to dojo.style() like {backgroundImage: \"url(...)\"}",
        "tags:",
        "extension",
        "===== item, opened =====",
        "summary:",
        "Overridable function to return CSS styles to display label",
        "item: dojo/data/Item",
        "opened: Boolean",
        "returns:",
        "Object suitable for input to dojo.style() like {color: \"red\", background: \"green\"}",
        "tags:",
        "extension",
        "===== item, opened =====",
        "summary:",
        "Overridable function to return CSS styles to display row",
        "item: dojo/data/Item",
        "opened: Boolean",
        "returns:",
        "Object suitable for input to dojo.style() like {background-color: \"#bbb\"}",
        "tags:",
        "extension",
        "dojo/data/Item",
        "===== item =====",
        "summary:",
        "Overridable function to get the tooltip for a tree node (given the item)",
        "tags:",
        "extension",
        "String",
        "Keyboard and Mouse handlers ////////////////////",
        "TreeNode",
        "Event",
        "summary:",
        "Handles keystrokes for printable keys, doing search navigation",
        "Avoid duplicate events on firefox (this is an arrow key that will be handled by keydown handler)",
        "TreeNode",
        "Event",
        "summary:",
        "Handles arrow, space, and enter keys",
        "Setup table mapping keys to events.",
        "On WebKit based browsers, the combination ctrl-enter does not get passed through. To allow accessible",
        "multi-select on those browsers, the space key is also used for selection.",
        "Therefore, also allow space key for keyboard \"click\" operation.",
        "clear record of recent printables (being saved for multi-char letter navigation),",
        "because \"a\", down-arrow, \"b\" shouldn't search for \"ab\"",
        "Object",
        "Object",
        "summary:",
        "down arrow pressed; get next visible node, set focus there",
        "Object",
        "summary:",
        "Up arrow pressed; move to previous visible node",
        "if younger siblings",
        "if the previous node is expanded, dive in deep",
        "move to the last child",
        "if this is the first child, return the parent",
        "unless the parent is the root of a tree with a hidden root",
        "Object",
        "summary:",
        "Right arrow pressed; go to child node",
        "if not expanded, expand, else move to 1st child",
        "Object",
        "summary:",
        "Left arrow pressed.",
        "If not collapsed, collapse, else move to parent.",
        "summary:",
        "Home key pressed; get first visible node, and set focus there",
        "summary:",
        "End key pressed; go to last visible node.",
        "multiCharSearchDuration: Number",
        "If multiple characters are typed where each keystroke happens within",
        "multiCharSearchDuration of the previous keystroke,",
        "search for nodes matching all the keystrokes.",
        "",
        "For example, typing \"ab\" will search for entries starting with",
        "\"ab\" unless the delay between \"a\" and \"b\" is greater than multiCharSearchDuration.",
        "summary:",
        "Called when user presses a prinatable key; search for node starting with recently typed letters.",
        "message: Object",
        "Like { node: TreeNode, key: 'a' } where key is the key the user pressed.",
        "Branch depending on whether this key starts a new search, or modifies an existing search",
        "We are continuing a search.  Ex: user has pressed 'a', and now has pressed",
        "'b', so we want to search for nodes starting w/\"ab\".",
        "We are starting a new search",
        "set/reset timer to forget recent keystrokes",
        "Navigate to TreeNode matching keystrokes [entered so far].",
        "check for last node, jump to first node if necessary",
        "no need to set focus if back where we started",
        "summary:",
        "check whether a dom node is the expandoNode for a particular TreeNode widget",
        "TreeNode",
        "Event",
        "summary:",
        "Translates click events into commands for the controller to process",
        "expando node was clicked, or label of a folder node was clicked; open it",
        "TreeNode",
        "Event",
        "summary:",
        "Translates double-click events into commands for the controller to process",
        "expando node was clicked, or label of a folder node was clicked; open it",
        "Object",
        "summary:",
        "User clicked the +/- icon; expand or collapse my children.",
        "If we are collapsing, we might be hiding the currently focused node.",
        "Also, clicking the expando node might have erased focus from the current node.",
        "For simplicity's sake just focus on the node with the expando.",
        "===== item, node, evt =====",
        "summary:",
        "Callback when a tree node is clicked",
        "item: Object",
        "Object from the dojo/store corresponding to this TreeNode",
        "node: TreeNode",
        "The TreeNode itself",
        "evt: Event",
        "The event",
        "tags:",
        "callback",
        "===== item, node, evt =====",
        "summary:",
        "Callback when a tree node is double-clicked",
        "item: Object",
        "Object from the dojo/store corresponding to this TreeNode",
        "node: TreeNode",
        "The TreeNode itself",
        "evt: Event",
        "The event",
        "tags:",
        "callback",
        "===== item, node =====",
        "summary:",
        "Callback when a node is opened",
        "item: dojo/data/Item",
        "node: TreeNode",
        "tags:",
        "callback",
        "===== item, node =====",
        "summary:",
        "Callback when a node is closed",
        "item: Object",
        "Object from the dojo/store corresponding to this TreeNode",
        "node: TreeNode",
        "The TreeNode itself",
        "tags:",
        "callback",
        "summary:",
        "Get next visible node",
        "if this is an expanded node, get the first child",
        "TreeNode",
        "find a parent node with a sibling",
        "TreeNode",
        "summary:",
        "Get first visible node",
        "TreeNode",
        "summary:",
        "Called when the user has requested to collapse the node",
        "returns:",
        "Deferred that fires when the node is closed",
        "ignore clicks while we are in the process of loading data",
        "after this finishes, need to reset widths of TreeNodes",
        "TreeNode",
        "summary:",
        "Called when the user has requested to expand the node",
        "returns:",
        "Deferred that fires when the node is loaded and opened and (if persist=true) all it's descendants",
        "that were previously opened too",
        "Signal that this call is complete",
        "there's already an expand in progress, or completed, so just return",
        "dojo/_base/Deferred",
        "Load data if it's not already loaded",
        "need to load all the children before expanding",
        "Setup deferred to signal when the load and expand are finished.",
        "Save that deferred in this._expandDeferred as a flag that operation is in progress.",
        "Get the children",
        "Display the children and also start expanding any children that were previously expanded",
        "(if this.persist == true).   The returned Deferred will fire when those expansions finish.",
        "Expand the node after data has loaded",
        "signal that this _expandNode() call is complete",
        "seems like these should be inside of then(), but left here for back-compat about",
        "when this.isOpen flag gets set (ie, at the beginning of the animation)",
        "after this finishes, need to reset widths of TreeNodes",
        "dojo/_base/Deferred",
        "Miscellaneous functions ////////////////",
        "_tree.Node",
        "summary:",
        "Focus on the specified node (which must be visible)",
        "tags:",
        "protected",
        "set focus so that the label will be voiced using screen readers",
        "dijit/_WidgetBase",
        "summary:",
        "Called when a TreeNode gets focus, either by user clicking",
        "it, or programatically by arrow key handling code.",
        "description:",
        "It marks that the current node is the selected one, and the previously",
        "selected node no longer is.",
        "mark that the previously focsable node is no longer focusable",
        "mark that the new node is the currently selected one",
        "dijit/_WidgetBase",
        "===== node =====",
        "summary:",
        "Called when mouse is over a node (onmouseenter event),",
        "this is monitored by the DND code",
        "dijit/_WidgetBase",
        "===== node =====",
        "summary:",
        "Called when mouse leaves a node (onmouseleave event),",
        "this is monitored by the DND code",
        "Events from the model //////////////////////////",
        "Item",
        "summary:",
        "Processes notification of a change to an item's scalar values like label",
        "theoretically could be new JS Object representing same item",
        "dojo/data/Item",
        "dojo/data/Item[]",
        "summary:",
        "Processes notification of a change to an item's children",
        "Item",
        "summary:",
        "Processes notification of a deletion of an item.",
        "Not called from new dojo.store interface but there's cleanup code in setChildItems() instead.",
        "Remove node from set of selected nodes (if it's selected)",
        "if node has not already been orphaned from a _onSetItem(parent, \"children\", ..) call...",
        "Miscellaneous funcs",
        "summary:",
        "Load in which nodes should be opened automatically",
        "summary:",
        "Query or set expanded state for an node",
        "A tree is treated as a leaf, not as a node with children (like a grid),",
        "but defining destroyRecursive for back-compat.",
        "The main JS sizing involved w/tree is the indentation, which is specified",
        "in CSS and read in through this dummy indentDetector node (tree must be",
        "visible and attached to the DOM to read this).",
        "If the Tree is hidden domGeometry.position(this.tree.indentDetector).w will return 0, in which case just",
        "keep the default value.",
        "resize() may be called before this.rootNode is created, so wait until it's available",
        "If tree has already loaded, then reset indent for all the nodes",
        "Also, adjust widths of all rows to match width of Tree",
        "Promise|Boolean",
        "summary:",
        "Called at the start of an operation that will change what's displayed.",
        "p:",
        "Promise that tells when the operation will complete.  Alternately, if it's just a Boolean, it signifies",
        "that the operation was synchronous, and already completed.",
        "Use defer() to avoid a width adjustment when another operation will immediately follow,",
        "such as a sequence of opening a node, then it's children, then it's grandchildren, etc.",
        "summary:",
        "Get width of widest TreeNode, or the width of the Tree itself, whichever is greater,",
        "and then set all TreeNodes to that width, so that selection/hover highlighting",
        "extends to the edge of the Tree (#13141)",
        "TreeNode",
        "erase setting from previous run",
        "do after node.style.width=\"auto\"",
        "assumes no horizontal padding, border, or margin on rowNode",
        "Object",
        "summary:",
        "creates a TreeNode",
        "description:",
        "Developers can override this method to define their own TreeNode class;",
        "However it will probably be removed in a future release in favor of a way",
        "of just specifying a widget for the label, rather than one that contains",
        "the children too.",
        "for monkey patching or creating subclasses of TreeNode",
        "array.forEach",
        "declare",
        "event.stop",
        "fx.animateProperty",
        "domGeometry.position",
        "domStyle.getComputedStyle",
        "keys.DOWN_ARROW keys.END keys.HOME keys.LEFT_ARROW keys.PAGE_DOWN keys.PAGE_UP keys.RIGHT_ARROW keys.UP_ARROW",
        "lang.hitch",
        "has(\"ie\") has(\"mozilla\")",
        "Moveable",
        "Mover Mover.prototype.destroy.apply",
        "query",
        "mouse.wheel",
        "registry.findWidgets",
        "focus.focus()",
        "module:",
        "dijit/form/HorizontalSlider",
        "summary:",
        "A form widget that allows one to select a value with a horizontally draggable handle",
        "Overrides FormValueWidget.value to indicate numeric value",
        "showButtons: [const] Boolean",
        "Show increment/decrement buttons at the ends of the slider?",
        "minimum: [const] Integer",
        "The minimum value the slider can be set to.",
        "maximum: [const] Integer",
        "The maximum value the slider can be set to.",
        "discreteValues: Integer",
        "If specified, indicates that the slider handle has only 'discreteValues' possible positions,",
        "and that after dragging the handle, it will snap to the nearest possible position.",
        "Thus, the slider has only 'discreteValues' possible values.",
        "",
        "For example, if minimum=10, maxiumum=30, and discreteValues=3, then the slider handle has",
        "three possible positions, representing values 10, 20, or 30.",
        "",
        "If discreteValues is not specified or if it's value is higher than the number of pixels",
        "in the slider bar, then the slider handle can be moved freely, and the slider's value will be",
        "computed/reported based on pixel position (in this case it will likely be fractional,",
        "such as 123.456789).",
        "pageIncrement: Integer",
        "If discreteValues is also specified, this indicates the amount of clicks (ie, snap positions)",
        "that the slider handle is moved via pageup/pagedown keys.",
        "If discreteValues is not specified, it indicates the number of pixels.",
        "clickSelect: Boolean",
        "If clicking the slider bar changes the value or not",
        "slideDuration: Number",
        "The time in ms to take to animate the slider handle from 0% to 100%,",
        "when clicking the slider bar to make the handle move.",
        "Map widget attributes to DOMNode attributes.",
        "Override _FormWidget which sends id to focusNode",
        "Apply CSS classes to up/down arrows and handle per mouse state",
        "Event",
        "Event",
        "this._descending === false: if ascending vertical (min on top)",
        "(this._descending || this.isLeftToRight()): if left-to-right horizontal or descending vertical",
        "make sure you get focus when dragging the handle",
        "(but don't do on IE because it causes a flicker on mouse up (due to blur then focus)",
        "summary:",
        "Returns true if direction is from right to left",
        "tags:",
        "protected extension",
        "Number",
        "Number",
        "Boolean?",
        "Number",
        "Boolean?",
        "summary:",
        "Hook so set('value', value) works.",
        "animate the slider",
        "Boolean?",
        "Event",
        "summary:",
        "Decrement slider",
        "tags:",
        "private",
        "Event",
        "summary:",
        "Increment slider",
        "tags:",
        "private",
        "Event",
        "summary:",
        "Event handler for mousewheel where supported",
        "negative scroll acts like a decrement",
        "Number",
        "Object",
        "Event",
        "find any associated label element and add to slider focusnode.",
        "define a custom constructor for a SliderMover that points back to me",
        "for monkey patching",
        "module:",
        "dijit/dijit-all",
        "=====\n\treturn {\n\t\t// summary:\n\t\t//\t\tA rollup that includes every dijit. You probably don't need this.\n\t};\n\t====="
    ],
    "docstrings": [
        "*really* know that none of the installed filters are going to",
        "***************************************************************************\n\t\tThe following functions implement HTML manipulation commands for various\n\t\tbrowser/contentEditable implementations.  The goal of them is to enforce\n\t\tstandard behaviors of them.\n\t*****************************************************************************",
        "* queryCommandEnabled implementations **",
        "* execCommand implementations **",
        "*\n\t\t\t * TODO: remove this method and calls to it, when _onBlur() is working for MenuItem.\n\t\t\t * Currently _onBlur() gets called when focus is moved from the MenuItem to a child menu.\n\t\t\t * That's not supposed to happen, but the problem is:\n\t\t\t * In order to allow dijit.popup's getTopPopup() to work,a sub menu's popupParent\n\t\t\t * points to the parent Menu, bypassing the parent MenuItem... thus the\n\t\t\t * MenuItem is not in the chain of active widgets and gets a premature call to\n\t\t\t * _onBlur()",
        "* Repeater",
        "* better handling for arrays.  Often form elements have names with [] like",
        "* people[3].sex (for a list of people [{name: Bill, sex: M}, ...])",
        "*\n\t\t\t *\tTODO: code for plain input boxes (this shouldn't run for inputs that are part of widgets)\n\n\t\t\tarray.forEach(this.containerNode.elements, function(element){\n\t\t\t\tif(element.name == ''){return};\t// like \"continue\"\n\t\t\t\tvar namePath = element.name.split(\".\");\n\t\t\t\tvar myObj=obj;\n\t\t\t\tvar name=namePath[namePath.length-1];\n\t\t\t\tfor(var j=1,len2=namePath.length;j<len2;++j){\n\t\t\t\t\tvar p=namePath[j - 1];\n\t\t\t\t\t// repeater support block\n\t\t\t\t\tvar nameA=p.split(\"[\");\n\t\t\t\t\tif(nameA.length > 1){\n\t\t\t\t\t\tif(typeof(myObj[nameA[0]]) == \"undefined\"){\n\t\t\t\t\t\t\tmyObj[nameA[0]]=[ ];\n\t\t\t\t\t\t} // if\n\n\t\t\t\t\t\tnameIndex=parseInt(nameA[1]);\n\t\t\t\t\t\tif(typeof(myObj[nameA[0]][nameIndex]) == \"undefined\"){\n\t\t\t\t\t\t\tmyObj[nameA[0]][nameIndex] = { };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmyObj=myObj[nameA[0]][nameIndex];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} // repeater support ends\n\n\t\t\t\t\tif(typeof(myObj[p]) == \"undefined\"){\n\t\t\t\t\t\tmyObj=undefined;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t};\n\t\t\t\t\tmyObj=myObj[p];\n\t\t\t\t}\n\n\t\t\t\tif(typeof(myObj) == \"undefined\"){\n\t\t\t\t\treturn;\t\t// like \"continue\"\n\t\t\t\t}\n\t\t\t\tif(typeof(myObj[name]) == \"undefined\" && this.ignoreNullValues){\n\t\t\t\t\treturn;\t\t// like \"continue\"\n\t\t\t\t}\n\n\t\t\t\t// TODO: widget values (just call set('value', ...) on the widget)\n\n\t\t\t\t// TODO: maybe should call dojo.getNodeProp() instead\n\t\t\t\tswitch(element.type){\n\t\t\t\t\tcase \"checkbox\":\n\t\t\t\t\t\telement.checked = (name in myObj) &&\n\t\t\t\t\t\t\tarray.some(myObj[name], function(val){ return val == element.value; });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"radio\":\n\t\t\t\t\t\telement.checked = (name in myObj) && myObj[name] == element.value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"select-multiple\":\n\t\t\t\t\t\telement.selectedIndex=-1;\n\t\t\t\t\t\tarray.forEach(element.options, function(option){\n\t\t\t\t\t\t\toption.selected = array.some(myObj[name], function(val){ return option.value == val; });\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"select-one\":\n\t\t\t\t\t\telement.selectedIndex=\"0\";\n\t\t\t\t\t\tarray.forEach(element.options, function(option){\n\t\t\t\t\t\t\toption.selected = option.value == myObj[name];\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"hidden\":\n\t\t\t\t\tcase \"text\":\n\t\t\t\t\tcase \"textarea\":\n\t\t\t\t\tcase \"password\":\n\t\t\t\t\t\telement.value = myObj[name] || \"\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});",
        "*\n\t\t\t * code for plain input boxes (see also domForm.formToObject, can we use that instead of this code?\n\t\t\t * but it doesn't understand [] notation, presumably)\n\t\t\tvar obj = { };\n\t\t\tarray.forEach(this.containerNode.elements, function(elm){\n\t\t\t\tif(!elm.name)\t{\n\t\t\t\t\treturn;\t\t// like \"continue\"\n\t\t\t\t}\n\t\t\t\tvar namePath = elm.name.split(\".\");\n\t\t\t\tvar myObj=obj;\n\t\t\t\tvar name=namePath[namePath.length-1];\n\t\t\t\tfor(var j=1,len2=namePath.length;j<len2;++j){\n\t\t\t\t\tvar nameIndex = null;\n\t\t\t\t\tvar p=namePath[j - 1];\n\t\t\t\t\tvar nameA=p.split(\"[\");\n\t\t\t\t\tif(nameA.length > 1){\n\t\t\t\t\t\tif(typeof(myObj[nameA[0]]) == \"undefined\"){\n\t\t\t\t\t\t\tmyObj[nameA[0]]=[ ];\n\t\t\t\t\t\t} // if\n\t\t\t\t\t\tnameIndex=parseInt(nameA[1]);\n\t\t\t\t\t\tif(typeof(myObj[nameA[0]][nameIndex]) == \"undefined\"){\n\t\t\t\t\t\t\tmyObj[nameA[0]][nameIndex] = { };\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(typeof(myObj[nameA[0]]) == \"undefined\"){\n\t\t\t\t\t\tmyObj[nameA[0]] = { }\n\t\t\t\t\t} // if\n\n\t\t\t\t\tif(nameA.length == 1){\n\t\t\t\t\t\tmyObj=myObj[nameA[0]];\n\t\t\t\t\t}else{\n\t\t\t\t\t\tmyObj=myObj[nameA[0]][nameIndex];\n\t\t\t\t\t} // if\n\t\t\t\t} // for\n\n\t\t\t\tif((elm.type != \"select-multiple\" && elm.type != \"checkbox\" && elm.type != \"radio\") || (elm.type == \"radio\" && elm.checked)){\n\t\t\t\t\tif(name == name.split(\"[\")[0]){\n\t\t\t\t\t\tmyObj[name]=elm.value;\n\t\t\t\t\t}else{\n\t\t\t\t\t\t// can not set value when there is no name\n\t\t\t\t\t}\n\t\t\t\t}else if(elm.type == \"checkbox\" && elm.checked){\n\t\t\t\t\tif(typeof(myObj[name]) == 'undefined'){\n\t\t\t\t\t\tmyObj[name]=[ ];\n\t\t\t\t\t}\n\t\t\t\t\tmyObj[name].push(elm.value);\n\t\t\t\t}else if(elm.type == \"select-multiple\"){\n\t\t\t\t\tif(typeof(myObj[name]) == 'undefined'){\n\t\t\t\t\t\tmyObj[name]=[ ];\n\t\t\t\t\t}\n\t\t\t\t\tfor(var jdx=0,len3=elm.options.length; jdx<len3; ++jdx){\n\t\t\t\t\t\tif(elm.options[jdx].selected){\n\t\t\t\t\t\t\tmyObj[name].push(elm.options[jdx].value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // if\n\t\t\t\tname=undefined;\n\t\t\t}); // forEach\n\t\t\t**",
        "*Then* this method is called."
    ],
    "functions": [
        "isSupportedBy",
        "isEmpty",
        "execute",
        "textareaScrollHeight",
        "simplePluginFactory",
        "togglePluginFactory",
        "closeAndRestoreFocus",
        "capitalize",
        "size",
        "toItem",
        "createSortFunction",
        "formatPattern",
        "_processPattern",
        "_buildDateTimeRE",
        "addIterativeMethod",
        "addResult",
        "mark",
        "selectPath",
        "setNodes",
        "expand",
        "collapse",
        "collect"
    ],
    "classes": []
}