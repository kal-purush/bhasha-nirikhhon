{
    "identifiers": [
        "express",
        "bodyParser",
        "options",
        "req",
        "express",
        "res",
        "express",
        "buf",
        "encoding",
        "key",
        "value",
        "express",
        "bodyParser",
        "json",
        "options",
        "req",
        "express",
        "res",
        "express",
        "buf",
        "encoding",
        "key",
        "value",
        "express",
        "raw",
        "options",
        "req",
        "express",
        "res",
        "express",
        "buf",
        "encoding",
        "express",
        "text",
        "options",
        "req",
        "express",
        "res",
        "express",
        "buf",
        "encoding",
        "express",
        "urlencoded",
        "options",
        "req",
        "express",
        "res",
        "express",
        "buf",
        "encoding",
        "express",
        "bodyParser"
    ],
    "literals": [
        "\"body-parser\"",
        "'express'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "Type definitions for body-parser",
        "Project: http://expressjs.com",
        "Definitions by: Santi Albo <https://github.com/santialbo/>, VILIC VANE <https://vilic.info>, Jonathan HÃ¤berle <https://github.com/dreampulse/>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "<reference path=\"../express/express.d.ts\" />"
    ],
    "docstrings": [
        "* bodyParser: use individual json/urlencoded middlewares\n     * @deprecated",
        "* if deflated bodies will be inflated. (default: true)",
        "* maximum request body size. (default: '100kb')",
        "* function to verify body content, the parsing can be aborted by throwing an error.",
        "* only parse objects and arrays. (default: true)",
        "* passed to JSON.parse().",
        "* parse extended syntax with the qs module. (default: true)",
        "* if deflated bodies will be inflated. (default: true)",
        "* maximum request body size. (default: '100kb')",
        "* request content-type to parse, passed directly to the type-is library. (default: 'json')",
        "* function to verify body content, the parsing can be aborted by throwing an error.",
        "* only parse objects and arrays. (default: true)",
        "* passed to JSON.parse().",
        "* if deflated bodies will be inflated. (default: true)",
        "* maximum request body size. (default: '100kb')",
        "* request content-type to parse, passed directly to the type-is library. (default: 'application/octet-stream')",
        "* function to verify body content, the parsing can be aborted by throwing an error.",
        "* if deflated bodies will be inflated. (default: true)",
        "* maximum request body size. (default: '100kb')",
        "* request content-type to parse, passed directly to the type-is library. (default: 'text/plain')",
        "* function to verify body content, the parsing can be aborted by throwing an error.",
        "* the default charset to parse as, if not specified in content-type. (default: 'utf-8')",
        "* if deflated bodies will be inflated. (default: true)",
        "* maximum request body size. (default: '100kb')",
        "* request content-type to parse, passed directly to the type-is library. (default: 'urlencoded')",
        "* function to verify body content, the parsing can be aborted by throwing an error.",
        "* parse extended syntax with the qs module. (default: true)"
    ],
    "functions": [],
    "classes": []
}