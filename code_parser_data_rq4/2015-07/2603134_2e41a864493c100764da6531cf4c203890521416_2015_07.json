{
    "identifiers": [
        "com",
        "mongodb",
        "client",
        "model",
        "org",
        "bson",
        "BsonDocument",
        "org",
        "bson",
        "BsonInt32",
        "org",
        "bson",
        "BsonString",
        "org",
        "bson",
        "BsonValue",
        "org",
        "bson",
        "codecs",
        "configuration",
        "CodecRegistry",
        "org",
        "bson",
        "conversions",
        "Bson",
        "java",
        "util",
        "com",
        "mongodb",
        "assertions",
        "Assertions",
        "notNull",
        "java",
        "util",
        "Arrays",
        "asList",
        "fieldNames",
        "ascending",
        "asList",
        "fieldNames",
        "fieldNames",
        "notNull",
        "fieldNames",
        "compoundIndex",
        "fieldNames",
        "fieldNames",
        "descending",
        "asList",
        "fieldNames",
        "fieldNames",
        "notNull",
        "fieldNames",
        "compoundIndex",
        "fieldNames",
        "fieldNames",
        "geo2dsphere",
        "asList",
        "fieldNames",
        "fieldNames",
        "notNull",
        "fieldNames",
        "compoundIndex",
        "fieldNames",
        "fieldName",
        "notNull",
        "fieldName",
        "fieldName",
        "fieldName",
        "additional",
        "notNull",
        "fieldName",
        "compoundIndex",
        "fieldName",
        "additional",
        "fieldName",
        "notNull",
        "fieldName",
        "fieldName",
        "fieldName",
        "notNull",
        "fieldName",
        "fieldName",
        "indexes",
        "compoundIndex",
        "asList",
        "indexes",
        "indexes",
        "notNull",
        "indexes",
        "Override",
        "documentClass",
        "codecRegistry",
        "compoundIndex",
        "index",
        "indexes",
        "indexDocument",
        "index",
        "toBsonDocument",
        "documentClass",
        "codecRegistry",
        "key",
        "indexDocument",
        "keySet",
        "compoundIndex",
        "append",
        "key",
        "indexDocument",
        "get",
        "key",
        "compoundIndex",
        "fieldNames",
        "value",
        "fieldName",
        "fieldNames",
        "append",
        "fieldName",
        "value"
    ],
    "literals": [
        "\"fieldNames\"",
        "\"fieldNames\"",
        "\"fieldNames\"",
        "\"2dsphere\"",
        "\"fieldName\"",
        "\"2d\"",
        "\"fieldName\"",
        "\"geoHaystack\"",
        "\"fieldName\"",
        "\"text\"",
        "\"fieldName\"",
        "\"hashed\"",
        "\"indexes\""
    ],
    "variables": [
        "fieldNames",
        "fieldNames",
        "fieldNames",
        "indexes"
    ],
    "comments": [],
    "docstrings": [
        "* Copyright 2015 MongoDB, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.",
        "* A factory for defining index keys. A convenient way to use this class is to statically import all of its methods, which allows usage\n * like:\n * <blockquote><pre>\n *    collection.createIndex(compoundIndex(ascending(\"x\"), descending(\"y\")));\n * </pre></blockquote>\n * @since 3.1",
        "* Create an index key for an ascending index on the given fields.\n     *\n     * @param fieldNames the field names, which must contain at least one\n     * @return the index specification\n     * @mongodb.driver.manual core/indexes indexes",
        "* Create an index key for an ascending index on the given fields.\n     *\n     * @param fieldNames the field names, which must contain at least one\n     * @return the index specification\n     * @mongodb.driver.manual core/indexes indexes",
        "* Create an index key for an ascending index on the given fields.\n     *\n     * @param fieldNames the field names, which must contain at least one\n     * @return the index specification\n     * @mongodb.driver.manual core/indexes indexes",
        "* Create an index key for an ascending index on the given fields.\n     *\n     * @param fieldNames the field names, which must contain at least one\n     * @return the index specification\n     * @mongodb.driver.manual core/indexes indexes",
        "* Create an index key for an 2dsphere index on the given fields.\n     *\n     * @param fieldNames the field names, which must contain at least one\n     * @return the index specification\n     * @mongodb.driver.manual core/2dsphere 2dsphere Index",
        "* Create an index key for an ascending index on the given fields.\n     *\n     * @param fieldNames the field names, which must contain at least one\n     * @return the index specification\n     * @mongodb.driver.manual core/indexes indexes",
        "* Create an index key for a 2d index on the given field.\n     *\n     * <p>\n     * <strong>Note: </strong>A 2d index is for data stored as points on a two-dimensional plane.\n     * The 2d index is intended for legacy coordinate pairs used in MongoDB 2.2 and earlier.\n     * </p>\n     *\n     * @param fieldName the field to create a 2d index on\n     * @return the index specification\n     * @mongodb.driver.manual core/2d 2d index",
        "* Create an index key for a geohaystack index on the given field.\n     *\n     * <p>\n     * <strong>Note: </strong>For queries that use spherical geometry, a 2dsphere index is a better option than a haystack index.\n     * 2dsphere indexes allow field reordering; geoHaystack indexes require the first field to be the location field. Also, geoHaystack\n     * indexes are only usable via commands and so always return all results at once..\n     * </p>\n     *\n     * @param fieldName the field to create a geoHaystack index on\n     * @param additional the additional field that forms the geoHaystack index key\n     * @return the index specification\n     * @mongodb.driver.manual core/geohaystack geoHaystack index",
        "* Create an index key for a text index on the given field.\n     *\n     * @param fieldName the field to create a text index on\n     * @return the index specification\n     * @mongodb.driver.manual core/text text index",
        "* Create an index key for a hashed index on the given field.\n     *\n     * @param fieldName the field to create a hashed index on\n     * @return the index specification\n     * @mongodb.driver.manual core/hashed hashed index",
        "* create a compound index specifications.  If any field names are repeated, the last one takes precedence.\n     *\n     * @param indexes the index specifications\n     * @return the compound index specification\n     * @mongodb.driver.manual core/index-compound compoundIndex",
        "* compound multiple index specifications.  If any field names are repeated, the last one takes precedence.\n     *\n     * @param indexes the index specifications\n     * @return the compound index specification\n     * @mongodb.driver.manual core/index-compound compoundIndex"
    ],
    "functions": [
        "Indexes",
        "Bson",
        "ascending",
        "Bson",
        "ascending",
        "Bson",
        "descending",
        "Bson",
        "descending",
        "Bson",
        "geo2dsphere",
        "Bson",
        "geo2dsphere",
        "Bson",
        "geo2d",
        "Bson",
        "geoHaystack",
        "Bson",
        "text",
        "Bson",
        "hashed",
        "Bson",
        "compoundIndex",
        "Bson",
        "compoundIndex",
        "BsonDocument",
        "toBsonDocument",
        "Bson",
        "compoundIndex"
    ],
    "classes": [
        "Indexes"
    ]
}