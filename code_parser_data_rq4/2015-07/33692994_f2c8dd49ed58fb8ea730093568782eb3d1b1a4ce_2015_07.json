{
    "identifiers": [
        "root",
        "factory",
        "define",
        "define",
        "define",
        "factory",
        "exports",
        "factory",
        "exports",
        "factory",
        "root",
        "exports",
        "Token",
        "TokenName",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "TokenName",
        "Token",
        "FnExprTokens",
        "Syntax",
        "PlaceHolders",
        "Messages",
        "Regex",
        "condition",
        "message",
        "condition",
        "message",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "Regex",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "ch",
        "Regex",
        "ch",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "id",
        "value",
        "start",
        "end",
        "loc",
        "start",
        "state",
        "start",
        "comment",
        "value",
        "extra",
        "comment",
        "start",
        "end",
        "extra",
        "comment",
        "loc",
        "extra",
        "comment",
        "extra",
        "extra",
        "comment",
        "extra",
        "comment",
        "offset",
        "start",
        "index",
        "offset",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "offset",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "index",
        "isLineTerminator",
        "ch",
        "hasLineTerminator",
        "extra",
        "comment",
        "source",
        "start",
        "offset",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "addComment",
        "comment",
        "start",
        "index",
        "loc",
        "ch",
        "source",
        "index",
        "index",
        "lineNumber",
        "lineStart",
        "index",
        "extra",
        "comment",
        "source",
        "start",
        "offset",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "addComment",
        "comment",
        "start",
        "index",
        "loc",
        "extra",
        "start",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isLineTerminator",
        "ch",
        "ch",
        "source",
        "index",
        "index",
        "hasLineTerminator",
        "lineNumber",
        "index",
        "lineStart",
        "index",
        "ch",
        "source",
        "index",
        "index",
        "index",
        "extra",
        "comment",
        "source",
        "start",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "addComment",
        "comment",
        "start",
        "index",
        "loc",
        "index",
        "index",
        "extra",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "comment",
        "source",
        "start",
        "index",
        "addComment",
        "comment",
        "start",
        "index",
        "loc",
        "tolerateUnexpectedToken",
        "hasLineTerminator",
        "start",
        "index",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isWhiteSpace",
        "ch",
        "index",
        "isLineTerminator",
        "ch",
        "hasLineTerminator",
        "index",
        "ch",
        "source",
        "index",
        "index",
        "lineNumber",
        "lineStart",
        "index",
        "start",
        "ch",
        "ch",
        "source",
        "index",
        "ch",
        "index",
        "index",
        "skipSingleLineComment",
        "start",
        "ch",
        "index",
        "index",
        "skipMultiLineComment",
        "start",
        "ch",
        "source",
        "index",
        "source",
        "index",
        "index",
        "skipSingleLineComment",
        "ch",
        "source",
        "index",
        "index",
        "index",
        "index",
        "index",
        "index",
        "skipSingleLineComment",
        "prefix",
        "len",
        "prefix",
        "i",
        "i",
        "len",
        "i",
        "index",
        "length",
        "isHexDigit",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "code",
        "code",
        "ch",
        "code",
        "ch",
        "source",
        "index",
        "code",
        "ch",
        "throwUnexpectedToken",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isHexDigit",
        "ch",
        "code",
        "code",
        "ch",
        "code",
        "ch",
        "throwUnexpectedToken",
        "code",
        "code",
        "cu1",
        "code",
        "cu2",
        "code",
        "cu1",
        "cu2",
        "ch",
        "source",
        "index",
        "id",
        "ch",
        "ch",
        "source",
        "index",
        "throwUnexpectedToken",
        "index",
        "ch",
        "scanHexEscape",
        "ch",
        "ch",
        "isIdentifierStart",
        "ch",
        "throwUnexpectedToken",
        "id",
        "ch",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isIdentifierPart",
        "ch",
        "index",
        "id",
        "ch",
        "ch",
        "id",
        "id",
        "id",
        "source",
        "index",
        "throwUnexpectedToken",
        "index",
        "ch",
        "scanHexEscape",
        "ch",
        "ch",
        "isIdentifierPart",
        "ch",
        "throwUnexpectedToken",
        "id",
        "ch",
        "id",
        "start",
        "index",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "index",
        "start",
        "getEscapedIdentifier",
        "isIdentifierPart",
        "ch",
        "index",
        "source",
        "start",
        "index",
        "start",
        "index",
        "id",
        "source",
        "index",
        "getEscapedIdentifier",
        "getIdentifier",
        "id",
        "Token",
        "isKeyword",
        "id",
        "Token",
        "id",
        "Token",
        "id",
        "id",
        "Token",
        "Token",
        "id",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "token",
        "Token",
        "lineNumber",
        "lineStart",
        "index",
        "index",
        "source",
        "index",
        "extra",
        "extra",
        "extra",
        "index",
        "extra",
        "extra",
        "extra",
        "index",
        "index",
        "source",
        "index",
        "source",
        "index",
        "index",
        "index",
        "source",
        "index",
        "index",
        "index",
        "index",
        "source",
        "index",
        "index",
        "index",
        "token",
        "throwUnexpectedToken",
        "token",
        "index",
        "token",
        "token",
        "start",
        "index",
        "length",
        "isHexDigit",
        "source",
        "index",
        "number",
        "source",
        "index",
        "number",
        "throwUnexpectedToken",
        "isIdentifierStart",
        "source",
        "index",
        "throwUnexpectedToken",
        "Token",
        "parseInt",
        "number",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "start",
        "number",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "number",
        "source",
        "index",
        "number",
        "throwUnexpectedToken",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isIdentifierStart",
        "ch",
        "isDecimalDigit",
        "ch",
        "throwUnexpectedToken",
        "Token",
        "parseInt",
        "number",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "prefix",
        "start",
        "isOctalDigit",
        "prefix",
        "octal",
        "number",
        "source",
        "index",
        "octal",
        "index",
        "number",
        "index",
        "length",
        "isOctalDigit",
        "source",
        "index",
        "number",
        "source",
        "index",
        "octal",
        "number",
        "throwUnexpectedToken",
        "isIdentifierStart",
        "source",
        "index",
        "isDecimalDigit",
        "source",
        "index",
        "throwUnexpectedToken",
        "Token",
        "parseInt",
        "number",
        "octal",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "i",
        "index",
        "i",
        "length",
        "i",
        "ch",
        "source",
        "i",
        "ch",
        "ch",
        "isOctalDigit",
        "ch",
        "ch",
        "source",
        "index",
        "isDecimalDigit",
        "ch",
        "ch",
        "start",
        "index",
        "number",
        "ch",
        "number",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "number",
        "ch",
        "ch",
        "index",
        "scanHexLiteral",
        "start",
        "ch",
        "ch",
        "index",
        "scanBinaryLiteral",
        "start",
        "ch",
        "ch",
        "scanOctalLiteral",
        "ch",
        "start",
        "isOctalDigit",
        "ch",
        "isImplicitOctalLiteral",
        "scanOctalLiteral",
        "ch",
        "start",
        "isDecimalDigit",
        "source",
        "index",
        "number",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "ch",
        "number",
        "source",
        "index",
        "isDecimalDigit",
        "source",
        "index",
        "number",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "number",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "number",
        "source",
        "index",
        "isDecimalDigit",
        "source",
        "index",
        "isDecimalDigit",
        "source",
        "index",
        "number",
        "source",
        "index",
        "throwUnexpectedToken",
        "isIdentifierStart",
        "source",
        "index",
        "throwUnexpectedToken",
        "Token",
        "parseFloat",
        "number",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "quote",
        "source",
        "index",
        "quote",
        "quote",
        "start",
        "index",
        "index",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "quote",
        "quote",
        "ch",
        "ch",
        "source",
        "index",
        "ch",
        "isLineTerminator",
        "ch",
        "ch",
        "source",
        "index",
        "index",
        "scanUnicodeCodePointEscape",
        "unescaped",
        "scanHexEscape",
        "ch",
        "unescaped",
        "throwUnexpectedToken",
        "unescaped",
        "throwUnexpectedToken",
        "isOctalDigit",
        "ch",
        "code",
        "ch",
        "code",
        "octal",
        "index",
        "length",
        "isOctalDigit",
        "source",
        "index",
        "octal",
        "code",
        "code",
        "source",
        "index",
        "ch",
        "index",
        "length",
        "isOctalDigit",
        "source",
        "index",
        "code",
        "code",
        "source",
        "index",
        "code",
        "ch",
        "lineNumber",
        "ch",
        "source",
        "index",
        "index",
        "lineStart",
        "index",
        "isLineTerminator",
        "ch",
        "ch",
        "quote",
        "throwUnexpectedToken",
        "Token",
        "octal",
        "startLineNumber",
        "startLineStart",
        "start",
        "index",
        "pattern",
        "flags",
        "flags",
        "tmp",
        "tmp",
        "$0",
        "$1",
        "parseInt",
        "$1",
        "throwUnexpectedToken",
        "Messages",
        "tmp",
        "e",
        "throwUnexpectedToken",
        "Messages",
        "pattern",
        "flags",
        "exception",
        "ch",
        "source",
        "index",
        "ch",
        "source",
        "index",
        "classMarker",
        "terminated",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "ch",
        "ch",
        "source",
        "index",
        "isLineTerminator",
        "ch",
        "throwUnexpectedToken",
        "Messages",
        "ch",
        "isLineTerminator",
        "ch",
        "throwUnexpectedToken",
        "Messages",
        "classMarker",
        "ch",
        "classMarker",
        "ch",
        "terminated",
        "ch",
        "classMarker",
        "terminated",
        "throwUnexpectedToken",
        "Messages",
        "body",
        "body",
        "flags",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "isIdentifierPart",
        "ch",
        "index",
        "ch",
        "index",
        "length",
        "ch",
        "source",
        "index",
        "ch",
        "index",
        "restore",
        "index",
        "ch",
        "scanHexEscape",
        "ch",
        "flags",
        "ch",
        "restore",
        "index",
        "restore",
        "source",
        "restore",
        "index",
        "restore",
        "flags",
        "tolerateUnexpectedToken",
        "tolerateUnexpectedToken",
        "flags",
        "ch",
        "ch",
        "flags",
        "scanning",
        "lookahead",
        "skipComment",
        "start",
        "index",
        "body",
        "scanRegExpBody",
        "flags",
        "scanRegExpFlags",
        "value",
        "testRegExp",
        "body",
        "flags",
        "scanning",
        "extra",
        "Token",
        "value",
        "body",
        "flags",
        "lineNumber",
        "lineStart",
        "start",
        "index",
        "body",
        "flags",
        "value",
        "body",
        "flags",
        "start",
        "index",
        "skipComment",
        "pos",
        "index",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "regex",
        "scanRegExp",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "extra",
        "extra",
        "token",
        "extra",
        "extra",
        "token",
        "pos",
        "token",
        "token",
        "token",
        "extra",
        "extra",
        "regex",
        "regex",
        "pos",
        "index",
        "loc",
        "regex",
        "token",
        "token",
        "Token",
        "token",
        "Token",
        "token",
        "Token",
        "token",
        "Token",
        "prevToken",
        "extra",
        "extra",
        "prevToken",
        "collectRegex",
        "prevToken",
        "prevToken",
        "scanPunctuator",
        "prevToken",
        "checkToken",
        "extra",
        "extra",
        "checkToken",
        "checkToken",
        "checkToken",
        "checkToken",
        "checkToken",
        "checkToken",
        "collectRegex",
        "scanPunctuator",
        "prevToken",
        "extra",
        "extra",
        "extra",
        "extra",
        "checkToken",
        "extra",
        "extra",
        "checkToken",
        "scanPunctuator",
        "extra",
        "extra",
        "extra",
        "extra",
        "checkToken",
        "extra",
        "extra",
        "checkToken",
        "collectRegex",
        "scanPunctuator",
        "FnExprTokens",
        "checkToken",
        "scanPunctuator",
        "collectRegex",
        "collectRegex",
        "prevToken",
        "prevToken",
        "collectRegex",
        "scanPunctuator",
        "index",
        "length",
        "Token",
        "lineNumber",
        "lineStart",
        "index",
        "index",
        "ch",
        "source",
        "index",
        "isIdentifierStart",
        "ch",
        "token",
        "scanIdentifier",
        "strict",
        "isStrictModeReservedWord",
        "token",
        "token",
        "Token",
        "token",
        "ch",
        "ch",
        "ch",
        "scanPunctuator",
        "ch",
        "ch",
        "scanStringLiteral",
        "ch",
        "isDecimalDigit",
        "source",
        "index",
        "scanNumericLiteral",
        "scanPunctuator",
        "isDecimalDigit",
        "ch",
        "scanNumericLiteral",
        "extra",
        "ch",
        "advanceSlash",
        "scanPunctuator",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "token",
        "advance",
        "loc",
        "lineNumber",
        "index",
        "lineStart",
        "token",
        "Token",
        "value",
        "source",
        "token",
        "token",
        "entry",
        "TokenName",
        "token",
        "value",
        "token",
        "token",
        "loc",
        "token",
        "entry",
        "token",
        "token",
        "extra",
        "entry",
        "token",
        "scanning",
        "lastIndex",
        "index",
        "lastLineNumber",
        "lineNumber",
        "lastLineStart",
        "lineStart",
        "skipComment",
        "token",
        "lookahead",
        "startIndex",
        "index",
        "startLineNumber",
        "lineNumber",
        "startLineStart",
        "lineStart",
        "lookahead",
        "extra",
        "collectToken",
        "advance",
        "scanning",
        "token",
        "scanning",
        "skipComment",
        "lastIndex",
        "index",
        "lastLineNumber",
        "lineNumber",
        "lastLineStart",
        "lineStart",
        "startIndex",
        "index",
        "startLineNumber",
        "lineNumber",
        "startLineStart",
        "lineStart",
        "lookahead",
        "extra",
        "collectToken",
        "advance",
        "scanning",
        "startLineNumber",
        "startIndex",
        "startLineStart",
        "Position",
        "startToken",
        "startToken",
        "startToken",
        "startToken",
        "extra",
        "startIndex",
        "extra",
        "SourceLocation",
        "startToken",
        "extra",
        "startToken",
        "extra",
        "WrappingSourceLocation",
        "startToken",
        "WrappingNode",
        "Node",
        "extra",
        "bottomRight",
        "bottomRight",
        "Syntax",
        "extra",
        "trailingComments",
        "i",
        "extra",
        "i",
        "i",
        "comment",
        "extra",
        "i",
        "comment",
        "trailingComments",
        "comment",
        "extra",
        "i",
        "extra",
        "last",
        "last",
        "last",
        "trailingComments",
        "last",
        "last",
        "last",
        "last",
        "last",
        "lastChild",
        "last",
        "last",
        "bottomRight",
        "lastChild",
        "lastChild",
        "lastChild",
        "lastChild",
        "lastChild",
        "lastChild",
        "extra",
        "leadingComments",
        "i",
        "extra",
        "i",
        "i",
        "comment",
        "extra",
        "i",
        "comment",
        "leadingComments",
        "comment",
        "extra",
        "i",
        "leadingComments",
        "leadingComments",
        "leadingComments",
        "trailingComments",
        "trailingComments",
        "trailingComments",
        "bottomRight",
        "extra",
        "lastIndex",
        "extra",
        "lastLineNumber",
        "lastIndex",
        "lastLineStart",
        "extra",
        "extra",
        "extra",
        "elements",
        "Syntax",
        "elements",
        "elements",
        "Syntax",
        "elements",
        "defaults",
        "body",
        "expression",
        "Syntax",
        "defaults",
        "body",
        "expression",
        "left",
        "right",
        "Syntax",
        "left",
        "right",
        "left",
        "right",
        "Syntax",
        "left",
        "right",
        "left",
        "right",
        "Syntax",
        "Syntax",
        "left",
        "right",
        "body",
        "Syntax",
        "body",
        "label",
        "Syntax",
        "label",
        "callee",
        "args",
        "Syntax",
        "callee",
        "args",
        "param",
        "body",
        "Syntax",
        "param",
        "body",
        "body",
        "Syntax",
        "body",
        "id",
        "superClass",
        "body",
        "Syntax",
        "id",
        "superClass",
        "body",
        "id",
        "superClass",
        "body",
        "Syntax",
        "id",
        "superClass",
        "body",
        "test",
        "consequent",
        "alternate",
        "Syntax",
        "test",
        "consequent",
        "alternate",
        "label",
        "Syntax",
        "label",
        "Syntax",
        "body",
        "test",
        "Syntax",
        "body",
        "test",
        "Syntax",
        "expression",
        "Syntax",
        "expression",
        "init",
        "test",
        "update",
        "body",
        "Syntax",
        "init",
        "test",
        "update",
        "body",
        "left",
        "right",
        "body",
        "Syntax",
        "left",
        "right",
        "body",
        "id",
        "defaults",
        "body",
        "Syntax",
        "id",
        "defaults",
        "body",
        "id",
        "defaults",
        "body",
        "Syntax",
        "id",
        "defaults",
        "body",
        "name",
        "Syntax",
        "name",
        "test",
        "consequent",
        "alternate",
        "Syntax",
        "test",
        "consequent",
        "alternate",
        "label",
        "body",
        "Syntax",
        "label",
        "body",
        "token",
        "Syntax",
        "token",
        "source",
        "token",
        "token",
        "token",
        "token",
        "accessor",
        "property",
        "Syntax",
        "accessor",
        "property",
        "callee",
        "args",
        "Syntax",
        "callee",
        "args",
        "properties",
        "Syntax",
        "properties",
        "properties",
        "Syntax",
        "properties",
        "argument",
        "Syntax",
        "argument",
        "body",
        "Syntax",
        "body",
        "kind",
        "key",
        "computed",
        "value",
        "method",
        "shorthand",
        "Syntax",
        "key",
        "computed",
        "value",
        "kind",
        "method",
        "shorthand",
        "argument",
        "Syntax",
        "argument",
        "argument",
        "Syntax",
        "argument",
        "expressions",
        "Syntax",
        "expressions",
        "argument",
        "Syntax",
        "argument",
        "test",
        "consequent",
        "Syntax",
        "test",
        "consequent",
        "discriminant",
        "cases",
        "Syntax",
        "discriminant",
        "cases",
        "Syntax",
        "argument",
        "Syntax",
        "argument",
        "block",
        "handler",
        "finalizer",
        "Syntax",
        "block",
        "handler",
        "handler",
        "handler",
        "finalizer",
        "argument",
        "Syntax",
        "Syntax",
        "argument",
        "declarations",
        "Syntax",
        "declarations",
        "declarations",
        "kind",
        "Syntax",
        "declarations",
        "kind",
        "id",
        "init",
        "Syntax",
        "id",
        "init",
        "test",
        "body",
        "Syntax",
        "test",
        "body",
        "body",
        "Syntax",
        "body",
        "error",
        "e",
        "e",
        "extra",
        "e",
        "existing",
        "extra",
        "e",
        "existing",
        "error",
        "existing",
        "error",
        "extra",
        "error",
        "line",
        "pos",
        "description",
        "line",
        "description",
        "error",
        "pos",
        "error",
        "line",
        "error",
        "pos",
        "scanning",
        "lineStart",
        "lastLineStart",
        "error",
        "description",
        "error",
        "messageFormat",
        "args",
        "arguments",
        "msg",
        "messageFormat",
        "whole",
        "idx",
        "idx",
        "args",
        "args",
        "idx",
        "createError",
        "lastLineNumber",
        "lastIndex",
        "msg",
        "messageFormat",
        "args",
        "arguments",
        "msg",
        "messageFormat",
        "whole",
        "idx",
        "idx",
        "args",
        "args",
        "idx",
        "error",
        "createError",
        "lineNumber",
        "lastIndex",
        "msg",
        "extra",
        "recordError",
        "error",
        "error",
        "token",
        "message",
        "message",
        "Messages",
        "token",
        "message",
        "msg",
        "token",
        "Token",
        "Messages",
        "token",
        "Token",
        "Messages",
        "token",
        "Token",
        "Messages",
        "token",
        "Token",
        "Messages",
        "Messages",
        "token",
        "Token",
        "isFutureReservedWord",
        "token",
        "msg",
        "Messages",
        "strict",
        "isStrictModeReservedWord",
        "token",
        "msg",
        "Messages",
        "msg",
        "msg",
        "token",
        "token",
        "token",
        "token",
        "createError",
        "token",
        "token",
        "msg",
        "createError",
        "scanning",
        "lineNumber",
        "lastLineNumber",
        "scanning",
        "index",
        "lastIndex",
        "msg",
        "token",
        "message",
        "unexpectedTokenError",
        "token",
        "message",
        "token",
        "message",
        "unexpectedTokenError",
        "token",
        "message",
        "extra",
        "recordError",
        "error",
        "error",
        "value",
        "lex",
        "token",
        "Token",
        "token",
        "value",
        "throwUnexpectedToken",
        "token",
        "extra",
        "token",
        "lookahead",
        "token",
        "Token",
        "token",
        "lex",
        "token",
        "Token",
        "token",
        "lex",
        "tolerateUnexpectedToken",
        "token",
        "tolerateUnexpectedToken",
        "token",
        "Messages",
        "expect",
        "keyword",
        "lex",
        "token",
        "Token",
        "token",
        "keyword",
        "throwUnexpectedToken",
        "token",
        "value",
        "lookahead",
        "Token",
        "lookahead",
        "value",
        "keyword",
        "lookahead",
        "Token",
        "lookahead",
        "keyword",
        "lookahead",
        "Token",
        "op",
        "lookahead",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "op",
        "source",
        "startIndex",
        "match",
        "lex",
        "hasLineTerminator",
        "lastIndex",
        "startIndex",
        "lastLineNumber",
        "startLineNumber",
        "lastLineStart",
        "startLineStart",
        "lookahead",
        "Token",
        "match",
        "throwUnexpectedToken",
        "lookahead",
        "parser",
        "isBindingElement",
        "isAssignmentTarget",
        "firstCoverInitializedNameError",
        "result",
        "parser",
        "firstCoverInitializedNameError",
        "throwUnexpectedToken",
        "firstCoverInitializedNameError",
        "isBindingElement",
        "oldIsBindingElement",
        "isAssignmentTarget",
        "oldIsAssignmentTarget",
        "firstCoverInitializedNameError",
        "oldFirstCoverInitializedNameError",
        "result",
        "parser",
        "isBindingElement",
        "isAssignmentTarget",
        "firstCoverInitializedNameError",
        "result",
        "parser",
        "isBindingElement",
        "isBindingElement",
        "oldIsBindingElement",
        "isAssignmentTarget",
        "isAssignmentTarget",
        "oldIsAssignmentTarget",
        "firstCoverInitializedNameError",
        "oldFirstCoverInitializedNameError",
        "firstCoverInitializedNameError",
        "result",
        "Node",
        "expect",
        "match",
        "match",
        "lex",
        "elements",
        "match",
        "restNode",
        "Node",
        "lex",
        "rest",
        "parseVariableIdentifier",
        "elements",
        "restNode",
        "rest",
        "elements",
        "parsePatternWithDefault",
        "match",
        "expect",
        "expect",
        "node",
        "elements",
        "Node",
        "match",
        "lookahead",
        "Token",
        "key",
        "parseVariableIdentifier",
        "match",
        "lex",
        "init",
        "parseAssignmentExpression",
        "node",
        "key",
        "WrappingNode",
        "key",
        "key",
        "init",
        "match",
        "node",
        "key",
        "key",
        "key",
        "parseObjectPropertyKey",
        "expect",
        "init",
        "parsePatternWithDefault",
        "node",
        "key",
        "computed",
        "init",
        "Node",
        "expect",
        "match",
        "properties",
        "parsePropertyPattern",
        "match",
        "expect",
        "lex",
        "node",
        "properties",
        "lookahead",
        "Token",
        "parseVariableIdentifier",
        "match",
        "parseArrayPattern",
        "match",
        "parseObjectPattern",
        "throwUnexpectedToken",
        "lookahead",
        "pattern",
        "parsePattern",
        "match",
        "lex",
        "right",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "pattern",
        "WrappingNode",
        "startToken",
        "pattern",
        "right",
        "pattern",
        "Node",
        "expect",
        "match",
        "match",
        "lex",
        "elements",
        "match",
        "restSpread",
        "Node",
        "lex",
        "restSpread",
        "inheritCoverGrammar",
        "parseAssignmentExpression",
        "match",
        "isAssignmentTarget",
        "isBindingElement",
        "expect",
        "elements",
        "restSpread",
        "elements",
        "inheritCoverGrammar",
        "parseAssignmentExpression",
        "match",
        "expect",
        "lex",
        "node",
        "elements",
        "node",
        "paramInfo",
        "isAssignmentTarget",
        "isBindingElement",
        "previousStrict",
        "strict",
        "body",
        "isolateCoverGrammar",
        "parseFunctionSourceElements",
        "strict",
        "paramInfo",
        "tolerateUnexpectedToken",
        "paramInfo",
        "paramInfo",
        "strict",
        "paramInfo",
        "tolerateUnexpectedToken",
        "paramInfo",
        "paramInfo",
        "strict",
        "previousStrict",
        "node",
        "paramInfo",
        "paramInfo",
        "body",
        "Node",
        "parseParams",
        "method",
        "parsePropertyFunction",
        "node",
        "method",
        "Node",
        "token",
        "lex",
        "token",
        "Token",
        "Token",
        "strict",
        "token",
        "tolerateUnexpectedToken",
        "token",
        "Messages",
        "node",
        "token",
        "Token",
        "Token",
        "Token",
        "Token",
        "node",
        "token",
        "Token",
        "token",
        "expr",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "expect",
        "expr",
        "throwUnexpectedToken",
        "token",
        "lookahead",
        "Token",
        "Token",
        "Token",
        "Token",
        "Token",
        "Token",
        "Token",
        "lookahead",
        "token",
        "key",
        "computed",
        "node",
        "token",
        "Token",
        "token",
        "lookaheadPropertyName",
        "computed",
        "match",
        "key",
        "parseObjectPropertyKey",
        "methodNode",
        "Node",
        "expect",
        "expect",
        "value",
        "parsePropertyFunction",
        "methodNode",
        "node",
        "key",
        "computed",
        "value",
        "token",
        "lookaheadPropertyName",
        "computed",
        "match",
        "key",
        "parseObjectPropertyKey",
        "methodNode",
        "Node",
        "expect",
        "options",
        "match",
        "tolerateUnexpectedToken",
        "lookahead",
        "parseParam",
        "options",
        "options",
        "options",
        "expect",
        "value",
        "parsePropertyFunction",
        "methodNode",
        "options",
        "node",
        "key",
        "computed",
        "value",
        "match",
        "value",
        "parsePropertyMethodFunction",
        "node",
        "key",
        "computed",
        "value",
        "key",
        "computed",
        "hasProto",
        "computed",
        "key",
        "Syntax",
        "key",
        "key",
        "Syntax",
        "key",
        "hasProto",
        "tolerateError",
        "Messages",
        "hasProto",
        "hasProto",
        "Node",
        "computed",
        "match",
        "key",
        "parseObjectPropertyKey",
        "maybeMethod",
        "tryParseMethodDefinition",
        "token",
        "key",
        "computed",
        "node",
        "maybeMethod",
        "checkProto",
        "maybeMethod",
        "maybeMethod",
        "hasProto",
        "maybeMethod",
        "checkProto",
        "key",
        "computed",
        "hasProto",
        "match",
        "lex",
        "value",
        "inheritCoverGrammar",
        "parseAssignmentExpression",
        "node",
        "key",
        "computed",
        "value",
        "token",
        "Token",
        "match",
        "firstCoverInitializedNameError",
        "lookahead",
        "lex",
        "value",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "node",
        "key",
        "computed",
        "WrappingNode",
        "token",
        "key",
        "value",
        "node",
        "key",
        "computed",
        "key",
        "throwUnexpectedToken",
        "lookahead",
        "Node",
        "expect",
        "match",
        "properties",
        "parseObjectProperty",
        "hasProto",
        "match",
        "expectCommaSeparator",
        "expect",
        "node",
        "properties",
        "expr",
        "expr",
        "Syntax",
        "Syntax",
        "Syntax",
        "Syntax",
        "Syntax",
        "expr",
        "Syntax",
        "reinterpretExpressionAsPattern",
        "expr",
        "Syntax",
        "expr",
        "Syntax",
        "i",
        "i",
        "expr",
        "i",
        "expr",
        "i",
        "reinterpretExpressionAsPattern",
        "expr",
        "i",
        "Syntax",
        "expr",
        "Syntax",
        "i",
        "i",
        "expr",
        "i",
        "reinterpretExpressionAsPattern",
        "expr",
        "i",
        "Syntax",
        "expr",
        "Syntax",
        "reinterpretExpressionAsPattern",
        "expr",
        "expect",
        "match",
        "lex",
        "match",
        "expect",
        "PlaceHolders",
        "startToken",
        "lookahead",
        "match",
        "expr",
        "parseRestElement",
        "expect",
        "match",
        "expect",
        "PlaceHolders",
        "expr",
        "isBindingElement",
        "expr",
        "inheritCoverGrammar",
        "parseAssignmentExpression",
        "match",
        "isAssignmentTarget",
        "expressions",
        "expr",
        "startIndex",
        "length",
        "match",
        "lex",
        "match",
        "isBindingElement",
        "throwUnexpectedToken",
        "lookahead",
        "expressions",
        "parseRestElement",
        "expect",
        "match",
        "expect",
        "isBindingElement",
        "i",
        "i",
        "expressions",
        "i",
        "reinterpretExpressionAsPattern",
        "expressions",
        "i",
        "PlaceHolders",
        "expressions",
        "expressions",
        "inheritCoverGrammar",
        "parseAssignmentExpression",
        "expr",
        "WrappingNode",
        "startToken",
        "expressions",
        "expect",
        "match",
        "isBindingElement",
        "throwUnexpectedToken",
        "lookahead",
        "expr",
        "Syntax",
        "i",
        "i",
        "expr",
        "i",
        "reinterpretExpressionAsPattern",
        "expr",
        "i",
        "reinterpretExpressionAsPattern",
        "expr",
        "expr",
        "PlaceHolders",
        "expr",
        "Syntax",
        "expr",
        "expr",
        "isBindingElement",
        "expr",
        "match",
        "isBindingElement",
        "inheritCoverGrammar",
        "parseGroupExpression",
        "match",
        "inheritCoverGrammar",
        "parseArrayInitialiser",
        "match",
        "inheritCoverGrammar",
        "parseObjectInitialiser",
        "lookahead",
        "node",
        "Node",
        "Token",
        "expr",
        "node",
        "lex",
        "Token",
        "Token",
        "isAssignmentTarget",
        "isBindingElement",
        "strict",
        "lookahead",
        "tolerateUnexpectedToken",
        "lookahead",
        "Messages",
        "expr",
        "node",
        "lex",
        "Token",
        "isAssignmentTarget",
        "isBindingElement",
        "matchKeyword",
        "parseFunctionExpression",
        "matchKeyword",
        "lex",
        "node",
        "matchKeyword",
        "parseClassExpression",
        "throwUnexpectedToken",
        "lex",
        "Token",
        "isAssignmentTarget",
        "isBindingElement",
        "token",
        "lex",
        "token",
        "token",
        "expr",
        "node",
        "token",
        "Token",
        "isAssignmentTarget",
        "isBindingElement",
        "token",
        "lex",
        "token",
        "expr",
        "node",
        "token",
        "match",
        "match",
        "isAssignmentTarget",
        "isBindingElement",
        "index",
        "startIndex",
        "extra",
        "token",
        "collectRegex",
        "token",
        "scanRegExp",
        "lex",
        "expr",
        "node",
        "token",
        "throwUnexpectedToken",
        "lex",
        "expr",
        "expect",
        "match",
        "startIndex",
        "length",
        "args",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "match",
        "expectCommaSeparator",
        "expect",
        "args",
        "Node",
        "token",
        "lex",
        "isIdentifierName",
        "token",
        "throwUnexpectedToken",
        "token",
        "node",
        "token",
        "expect",
        "parseNonComputedProperty",
        "expect",
        "expr",
        "isolateCoverGrammar",
        "parseExpression",
        "expect",
        "expr",
        "Node",
        "expectKeyword",
        "callee",
        "isolateCoverGrammar",
        "parseLeftHandSideExpression",
        "args",
        "match",
        "parseArguments",
        "isAssignmentTarget",
        "isBindingElement",
        "node",
        "callee",
        "args",
        "state",
        "startToken",
        "lookahead",
        "state",
        "expr",
        "inheritCoverGrammar",
        "matchKeyword",
        "parseNewExpression",
        "parsePrimaryExpression",
        "match",
        "isBindingElement",
        "isAssignmentTarget",
        "property",
        "parseNonComputedMember",
        "expr",
        "WrappingNode",
        "startToken",
        "expr",
        "property",
        "match",
        "isBindingElement",
        "isAssignmentTarget",
        "args",
        "parseArguments",
        "expr",
        "WrappingNode",
        "startToken",
        "expr",
        "args",
        "match",
        "isBindingElement",
        "isAssignmentTarget",
        "property",
        "parseComputedMember",
        "expr",
        "WrappingNode",
        "startToken",
        "expr",
        "property",
        "state",
        "previousAllowIn",
        "expr",
        "state",
        "startToken",
        "lookahead",
        "expr",
        "inheritCoverGrammar",
        "matchKeyword",
        "parseNewExpression",
        "parsePrimaryExpression",
        "match",
        "isBindingElement",
        "isAssignmentTarget",
        "property",
        "parseComputedMember",
        "expr",
        "WrappingNode",
        "startToken",
        "expr",
        "property",
        "match",
        "isBindingElement",
        "isAssignmentTarget",
        "property",
        "parseNonComputedMember",
        "expr",
        "WrappingNode",
        "startToken",
        "expr",
        "property",
        "expr",
        "expr",
        "inheritCoverGrammar",
        "parseLeftHandSideExpressionAllowCall",
        "hasLineTerminator",
        "lookahead",
        "Token",
        "match",
        "match",
        "strict",
        "expr",
        "Syntax",
        "isRestrictedWord",
        "expr",
        "tolerateError",
        "Messages",
        "isAssignmentTarget",
        "tolerateError",
        "Messages",
        "isAssignmentTarget",
        "isBindingElement",
        "token",
        "lex",
        "expr",
        "WrappingNode",
        "startToken",
        "token",
        "expr",
        "expr",
        "lookahead",
        "Token",
        "lookahead",
        "Token",
        "expr",
        "parsePostfixExpression",
        "match",
        "match",
        "startToken",
        "lookahead",
        "token",
        "lex",
        "expr",
        "inheritCoverGrammar",
        "parseUnaryExpression",
        "strict",
        "expr",
        "Syntax",
        "isRestrictedWord",
        "expr",
        "tolerateError",
        "Messages",
        "isAssignmentTarget",
        "tolerateError",
        "Messages",
        "expr",
        "WrappingNode",
        "startToken",
        "token",
        "expr",
        "isAssignmentTarget",
        "isBindingElement",
        "match",
        "match",
        "match",
        "match",
        "startToken",
        "lookahead",
        "token",
        "lex",
        "expr",
        "inheritCoverGrammar",
        "parseUnaryExpression",
        "expr",
        "WrappingNode",
        "startToken",
        "token",
        "expr",
        "isAssignmentTarget",
        "isBindingElement",
        "matchKeyword",
        "matchKeyword",
        "matchKeyword",
        "startToken",
        "lookahead",
        "token",
        "lex",
        "expr",
        "inheritCoverGrammar",
        "parseUnaryExpression",
        "expr",
        "WrappingNode",
        "startToken",
        "token",
        "expr",
        "strict",
        "expr",
        "expr",
        "Syntax",
        "tolerateError",
        "Messages",
        "isAssignmentTarget",
        "isBindingElement",
        "expr",
        "parsePostfixExpression",
        "expr",
        "token",
        "allowIn",
        "token",
        "Token",
        "token",
        "Token",
        "token",
        "prec",
        "prec",
        "prec",
        "prec",
        "prec",
        "prec",
        "prec",
        "prec",
        "allowIn",
        "prec",
        "prec",
        "prec",
        "prec",
        "marker",
        "lookahead",
        "left",
        "inheritCoverGrammar",
        "parseUnaryExpression",
        "token",
        "lookahead",
        "prec",
        "binaryPrecedence",
        "token",
        "state",
        "prec",
        "left",
        "isAssignmentTarget",
        "isBindingElement",
        "token",
        "prec",
        "lex",
        "markers",
        "marker",
        "lookahead",
        "right",
        "isolateCoverGrammar",
        "parseUnaryExpression",
        "stack",
        "left",
        "token",
        "right",
        "prec",
        "binaryPrecedence",
        "lookahead",
        "state",
        "stack",
        "prec",
        "stack",
        "stack",
        "right",
        "stack",
        "stack",
        "left",
        "stack",
        "markers",
        "expr",
        "WrappingNode",
        "markers",
        "markers",
        "left",
        "right",
        "stack",
        "expr",
        "token",
        "lex",
        "token",
        "prec",
        "stack",
        "token",
        "markers",
        "lookahead",
        "expr",
        "isolateCoverGrammar",
        "parseUnaryExpression",
        "stack",
        "expr",
        "i",
        "stack",
        "expr",
        "stack",
        "i",
        "markers",
        "i",
        "expr",
        "WrappingNode",
        "markers",
        "stack",
        "i",
        "stack",
        "i",
        "expr",
        "i",
        "expr",
        "startToken",
        "lookahead",
        "expr",
        "inheritCoverGrammar",
        "parseBinaryExpression",
        "match",
        "lex",
        "previousAllowIn",
        "state",
        "state",
        "consequent",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "state",
        "previousAllowIn",
        "expect",
        "alternate",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "expr",
        "WrappingNode",
        "startToken",
        "expr",
        "consequent",
        "alternate",
        "isAssignmentTarget",
        "isBindingElement",
        "expr",
        "match",
        "parseFunctionSourceElements",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "options",
        "param",
        "param",
        "Syntax",
        "validateParam",
        "options",
        "param",
        "param",
        "Syntax",
        "checkPatternParam",
        "options",
        "param",
        "Syntax",
        "checkPatternParam",
        "options",
        "param",
        "Syntax",
        "i",
        "i",
        "param",
        "i",
        "param",
        "i",
        "checkPatternParam",
        "options",
        "param",
        "i",
        "param",
        "Syntax",
        "i",
        "i",
        "param",
        "i",
        "checkPatternParam",
        "options",
        "param",
        "i",
        "expr",
        "defaults",
        "defaultCount",
        "expr",
        "expr",
        "Syntax",
        "PlaceHolders",
        "expr",
        "options",
        "i",
        "len",
        "i",
        "len",
        "i",
        "param",
        "i",
        "param",
        "Syntax",
        "i",
        "param",
        "defaults",
        "param",
        "defaultCount",
        "checkPatternParam",
        "options",
        "param",
        "checkPatternParam",
        "options",
        "param",
        "i",
        "param",
        "defaults",
        "options",
        "Messages",
        "token",
        "strict",
        "options",
        "options",
        "throwUnexpectedToken",
        "token",
        "options",
        "defaultCount",
        "defaults",
        "defaults",
        "options",
        "options",
        "options",
        "options",
        "node",
        "hasLineTerminator",
        "tolerateUnexpectedToken",
        "lookahead",
        "expect",
        "previousStrict",
        "strict",
        "body",
        "parseConciseBody",
        "strict",
        "options",
        "throwUnexpectedToken",
        "options",
        "options",
        "strict",
        "options",
        "tolerateUnexpectedToken",
        "options",
        "options",
        "strict",
        "previousStrict",
        "node",
        "options",
        "options",
        "body",
        "body",
        "Syntax",
        "startToken",
        "lookahead",
        "token",
        "lookahead",
        "expr",
        "parseConditionalExpression",
        "expr",
        "PlaceHolders",
        "match",
        "isAssignmentTarget",
        "isBindingElement",
        "reinterpretAsCoverFormalsList",
        "expr",
        "firstCoverInitializedNameError",
        "parseArrowFunctionExpression",
        "WrappingNode",
        "startToken",
        "expr",
        "matchAssign",
        "isAssignmentTarget",
        "tolerateError",
        "Messages",
        "strict",
        "expr",
        "Syntax",
        "isRestrictedWord",
        "expr",
        "tolerateUnexpectedToken",
        "token",
        "Messages",
        "match",
        "isAssignmentTarget",
        "isBindingElement",
        "reinterpretExpressionAsPattern",
        "expr",
        "token",
        "lex",
        "right",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "expr",
        "WrappingNode",
        "startToken",
        "token",
        "expr",
        "right",
        "firstCoverInitializedNameError",
        "expr",
        "expr",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "match",
        "expressions",
        "expr",
        "startIndex",
        "length",
        "match",
        "lex",
        "expressions",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "expr",
        "WrappingNode",
        "startToken",
        "expressions",
        "expr",
        "lookahead",
        "Token",
        "lookahead",
        "parseLexicalDeclaration",
        "parseFunctionDeclaration",
        "Node",
        "parseClassDeclaration",
        "parseStatement",
        "startIndex",
        "length",
        "match",
        "parseStatementListItem",
        "Node",
        "expect",
        "block",
        "parseStatementList",
        "expect",
        "node",
        "block",
        "Node",
        "token",
        "lex",
        "token",
        "Token",
        "strict",
        "token",
        "Token",
        "isStrictModeReservedWord",
        "token",
        "tolerateUnexpectedToken",
        "token",
        "Messages",
        "throwUnexpectedToken",
        "token",
        "node",
        "token",
        "Node",
        "id",
        "parsePattern",
        "strict",
        "isRestrictedWord",
        "id",
        "tolerateError",
        "Messages",
        "match",
        "lex",
        "init",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "id",
        "Syntax",
        "expect",
        "node",
        "id",
        "init",
        "parseVariableDeclaration",
        "match",
        "lex",
        "startIndex",
        "length",
        "node",
        "expectKeyword",
        "declarations",
        "parseVariableDeclarationList",
        "consumeSemicolon",
        "node",
        "declarations",
        "kind",
        "options",
        "Node",
        "id",
        "parsePattern",
        "strict",
        "id",
        "Syntax",
        "isRestrictedWord",
        "id",
        "tolerateError",
        "Messages",
        "kind",
        "matchKeyword",
        "expect",
        "init",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "options",
        "id",
        "Syntax",
        "match",
        "expect",
        "init",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "node",
        "id",
        "init",
        "kind",
        "options",
        "parseLexicalBinding",
        "kind",
        "options",
        "match",
        "lex",
        "startIndex",
        "length",
        "options",
        "Node",
        "kind",
        "lex",
        "kind",
        "kind",
        "declarations",
        "parseBindingList",
        "kind",
        "options",
        "consumeSemicolon",
        "node",
        "declarations",
        "kind",
        "Node",
        "lex",
        "match",
        "throwError",
        "Messages",
        "param",
        "parseVariableIdentifier",
        "match",
        "throwError",
        "Messages",
        "match",
        "throwError",
        "Messages",
        "node",
        "param",
        "node",
        "expect",
        "node",
        "node",
        "parseExpression",
        "consumeSemicolon",
        "node",
        "expr",
        "node",
        "expectKeyword",
        "expect",
        "test",
        "parseExpression",
        "expect",
        "consequent",
        "parseStatement",
        "matchKeyword",
        "lex",
        "alternate",
        "parseStatement",
        "alternate",
        "node",
        "test",
        "consequent",
        "alternate",
        "node",
        "expectKeyword",
        "oldInIteration",
        "state",
        "state",
        "body",
        "parseStatement",
        "state",
        "oldInIteration",
        "expectKeyword",
        "expect",
        "test",
        "parseExpression",
        "expect",
        "match",
        "lex",
        "node",
        "body",
        "test",
        "node",
        "expectKeyword",
        "expect",
        "test",
        "parseExpression",
        "expect",
        "oldInIteration",
        "state",
        "state",
        "body",
        "parseStatement",
        "state",
        "oldInIteration",
        "node",
        "test",
        "body",
        "node",
        "state",
        "init",
        "test",
        "update",
        "expectKeyword",
        "expect",
        "match",
        "lex",
        "matchKeyword",
        "init",
        "Node",
        "lex",
        "state",
        "init",
        "init",
        "parseVariableDeclarationList",
        "state",
        "previousAllowIn",
        "init",
        "matchKeyword",
        "lex",
        "left",
        "init",
        "right",
        "parseExpression",
        "init",
        "expect",
        "matchKeyword",
        "matchKeyword",
        "init",
        "Node",
        "kind",
        "lex",
        "state",
        "declarations",
        "parseBindingList",
        "kind",
        "state",
        "previousAllowIn",
        "declarations",
        "declarations",
        "matchKeyword",
        "init",
        "init",
        "declarations",
        "kind",
        "lex",
        "left",
        "init",
        "right",
        "parseExpression",
        "init",
        "consumeSemicolon",
        "init",
        "init",
        "declarations",
        "kind",
        "initStartToken",
        "lookahead",
        "state",
        "init",
        "inheritCoverGrammar",
        "parseAssignmentExpression",
        "state",
        "previousAllowIn",
        "matchKeyword",
        "isAssignmentTarget",
        "tolerateError",
        "Messages",
        "lex",
        "reinterpretExpressionAsPattern",
        "init",
        "left",
        "init",
        "right",
        "parseExpression",
        "init",
        "match",
        "initSeq",
        "init",
        "match",
        "lex",
        "initSeq",
        "isolateCoverGrammar",
        "parseAssignmentExpression",
        "init",
        "WrappingNode",
        "initStartToken",
        "initSeq",
        "expect",
        "left",
        "match",
        "test",
        "parseExpression",
        "expect",
        "match",
        "update",
        "parseExpression",
        "expect",
        "oldInIteration",
        "state",
        "state",
        "body",
        "isolateCoverGrammar",
        "parseStatement",
        "state",
        "oldInIteration",
        "left",
        "node",
        "init",
        "test",
        "update",
        "body",
        "node",
        "left",
        "right",
        "body",
        "node",
        "expectKeyword",
        "source",
        "startIndex",
        "lex",
        "state",
        "throwError",
        "Messages",
        "node",
        "hasLineTerminator",
        "state",
        "throwError",
        "Messages",
        "node",
        "lookahead",
        "Token",
        "label",
        "parseVariableIdentifier",
        "key",
        "label",
        "state",
        "key",
        "throwError",
        "Messages",
        "label",
        "consumeSemicolon",
        "label",
        "state",
        "throwError",
        "Messages",
        "node",
        "label",
        "node",
        "expectKeyword",
        "source",
        "lastIndex",
        "lex",
        "state",
        "state",
        "throwError",
        "Messages",
        "node",
        "hasLineTerminator",
        "state",
        "state",
        "throwError",
        "Messages",
        "node",
        "lookahead",
        "Token",
        "label",
        "parseVariableIdentifier",
        "key",
        "label",
        "state",
        "key",
        "throwError",
        "Messages",
        "label",
        "consumeSemicolon",
        "label",
        "state",
        "state",
        "throwError",
        "Messages",
        "node",
        "label",
        "node",
        "expectKeyword",
        "state",
        "tolerateError",
        "Messages",
        "source",
        "lastIndex",
        "isIdentifierStart",
        "source",
        "lastIndex",
        "argument",
        "parseExpression",
        "consumeSemicolon",
        "node",
        "argument",
        "hasLineTerminator",
        "node",
        "match",
        "match",
        "lookahead",
        "Token",
        "argument",
        "parseExpression",
        "consumeSemicolon",
        "node",
        "argument",
        "node",
        "strict",
        "tolerateError",
        "Messages",
        "expectKeyword",
        "expect",
        "parseExpression",
        "expect",
        "body",
        "parseStatement",
        "node",
        "body",
        "Node",
        "matchKeyword",
        "lex",
        "test",
        "expectKeyword",
        "test",
        "parseExpression",
        "expect",
        "startIndex",
        "length",
        "match",
        "matchKeyword",
        "matchKeyword",
        "statement",
        "parseStatementListItem",
        "consequent",
        "statement",
        "node",
        "test",
        "consequent",
        "node",
        "expectKeyword",
        "expect",
        "discriminant",
        "parseExpression",
        "expect",
        "expect",
        "cases",
        "match",
        "lex",
        "node",
        "discriminant",
        "cases",
        "oldInSwitch",
        "state",
        "state",
        "defaultFound",
        "startIndex",
        "length",
        "match",
        "clause",
        "parseSwitchCase",
        "clause",
        "defaultFound",
        "throwError",
        "Messages",
        "defaultFound",
        "cases",
        "clause",
        "state",
        "oldInSwitch",
        "expect",
        "node",
        "discriminant",
        "cases",
        "node",
        "expectKeyword",
        "hasLineTerminator",
        "throwError",
        "Messages",
        "argument",
        "parseExpression",
        "consumeSemicolon",
        "node",
        "argument",
        "Node",
        "expectKeyword",
        "expect",
        "match",
        "throwUnexpectedToken",
        "lookahead",
        "param",
        "parsePattern",
        "strict",
        "isRestrictedWord",
        "param",
        "tolerateError",
        "Messages",
        "expect",
        "body",
        "parseBlock",
        "node",
        "param",
        "body",
        "node",
        "expectKeyword",
        "block",
        "parseBlock",
        "matchKeyword",
        "handler",
        "parseCatchClause",
        "matchKeyword",
        "lex",
        "finalizer",
        "parseBlock",
        "handler",
        "finalizer",
        "throwError",
        "Messages",
        "node",
        "block",
        "handler",
        "finalizer",
        "node",
        "expectKeyword",
        "consumeSemicolon",
        "node",
        "lookahead",
        "Token",
        "throwUnexpectedToken",
        "lookahead",
        "Token",
        "lookahead",
        "parseBlock",
        "isAssignmentTarget",
        "isBindingElement",
        "node",
        "Node",
        "Token",
        "lookahead",
        "parseEmptyStatement",
        "node",
        "parseExpressionStatement",
        "node",
        "Token",
        "lookahead",
        "parseBreakStatement",
        "node",
        "parseContinueStatement",
        "node",
        "parseDebuggerStatement",
        "node",
        "parseDoWhileStatement",
        "node",
        "parseForStatement",
        "node",
        "parseFunctionDeclaration",
        "node",
        "parseIfStatement",
        "node",
        "parseReturnStatement",
        "node",
        "parseSwitchStatement",
        "node",
        "parseThrowStatement",
        "node",
        "parseTryStatement",
        "node",
        "parseVariableStatement",
        "node",
        "parseWhileStatement",
        "node",
        "parseWithStatement",
        "node",
        "expr",
        "parseExpression",
        "expr",
        "Syntax",
        "match",
        "lex",
        "key",
        "expr",
        "state",
        "key",
        "throwError",
        "Messages",
        "expr",
        "state",
        "key",
        "labeledBody",
        "parseStatement",
        "state",
        "key",
        "node",
        "expr",
        "labeledBody",
        "consumeSemicolon",
        "node",
        "expr",
        "Node",
        "expect",
        "startIndex",
        "length",
        "lookahead",
        "Token",
        "token",
        "lookahead",
        "statement",
        "parseStatementListItem",
        "body",
        "statement",
        "statement",
        "Syntax",
        "directive",
        "source",
        "token",
        "token",
        "directive",
        "strict",
        "firstRestricted",
        "tolerateUnexpectedToken",
        "firstRestricted",
        "Messages",
        "firstRestricted",
        "token",
        "firstRestricted",
        "token",
        "oldLabelSet",
        "state",
        "oldInIteration",
        "state",
        "oldInSwitch",
        "state",
        "oldInFunctionBody",
        "state",
        "oldParenthesisCount",
        "state",
        "state",
        "state",
        "state",
        "state",
        "state",
        "startIndex",
        "length",
        "match",
        "body",
        "parseStatementListItem",
        "expect",
        "state",
        "oldLabelSet",
        "state",
        "oldInIteration",
        "state",
        "oldInSwitch",
        "state",
        "oldInFunctionBody",
        "state",
        "oldParenthesisCount",
        "node",
        "body",
        "options",
        "param",
        "name",
        "name",
        "strict",
        "isRestrictedWord",
        "name",
        "options",
        "param",
        "options",
        "Messages",
        "options",
        "key",
        "options",
        "param",
        "options",
        "Messages",
        "options",
        "isRestrictedWord",
        "name",
        "options",
        "param",
        "options",
        "Messages",
        "isStrictModeReservedWord",
        "name",
        "options",
        "param",
        "options",
        "Messages",
        "options",
        "key",
        "options",
        "param",
        "options",
        "Messages",
        "options",
        "key",
        "options",
        "token",
        "lookahead",
        "token",
        "param",
        "parseRestElement",
        "validateParam",
        "options",
        "param",
        "param",
        "options",
        "param",
        "options",
        "param",
        "parsePatternWithDefault",
        "validateParam",
        "options",
        "token",
        "token",
        "param",
        "Syntax",
        "param",
        "param",
        "param",
        "options",
        "options",
        "param",
        "options",
        "match",
        "firstRestricted",
        "options",
        "firstRestricted",
        "expect",
        "match",
        "options",
        "startIndex",
        "length",
        "parseParam",
        "options",
        "expect",
        "expect",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "options",
        "node",
        "expectKeyword",
        "token",
        "lookahead",
        "id",
        "parseVariableIdentifier",
        "strict",
        "isRestrictedWord",
        "token",
        "tolerateUnexpectedToken",
        "token",
        "Messages",
        "isRestrictedWord",
        "token",
        "firstRestricted",
        "token",
        "message",
        "Messages",
        "isStrictModeReservedWord",
        "token",
        "firstRestricted",
        "token",
        "message",
        "Messages",
        "tmp",
        "parseParams",
        "firstRestricted",
        "tmp",
        "defaults",
        "tmp",
        "stricted",
        "tmp",
        "firstRestricted",
        "tmp",
        "tmp",
        "message",
        "tmp",
        "previousStrict",
        "strict",
        "body",
        "parseFunctionSourceElements",
        "strict",
        "firstRestricted",
        "throwUnexpectedToken",
        "firstRestricted",
        "message",
        "strict",
        "stricted",
        "tolerateUnexpectedToken",
        "stricted",
        "message",
        "strict",
        "previousStrict",
        "node",
        "id",
        "defaults",
        "body",
        "Node",
        "expectKeyword",
        "match",
        "token",
        "lookahead",
        "id",
        "parseVariableIdentifier",
        "strict",
        "isRestrictedWord",
        "token",
        "tolerateUnexpectedToken",
        "token",
        "Messages",
        "isRestrictedWord",
        "token",
        "firstRestricted",
        "token",
        "message",
        "Messages",
        "isStrictModeReservedWord",
        "token",
        "firstRestricted",
        "token",
        "message",
        "Messages",
        "tmp",
        "parseParams",
        "firstRestricted",
        "tmp",
        "defaults",
        "tmp",
        "stricted",
        "tmp",
        "firstRestricted",
        "tmp",
        "tmp",
        "message",
        "tmp",
        "previousStrict",
        "strict",
        "body",
        "parseFunctionSourceElements",
        "strict",
        "firstRestricted",
        "throwUnexpectedToken",
        "firstRestricted",
        "message",
        "strict",
        "stricted",
        "tolerateUnexpectedToken",
        "stricted",
        "message",
        "strict",
        "previousStrict",
        "node",
        "id",
        "defaults",
        "body",
        "classBody",
        "Node",
        "expect",
        "body",
        "match",
        "match",
        "lex",
        "method",
        "Node",
        "token",
        "lookahead",
        "isStatic",
        "computed",
        "match",
        "key",
        "parseObjectPropertyKey",
        "key",
        "lookaheadPropertyName",
        "token",
        "lookahead",
        "isStatic",
        "computed",
        "match",
        "key",
        "parseObjectPropertyKey",
        "method",
        "tryParseMethodDefinition",
        "token",
        "key",
        "computed",
        "method",
        "method",
        "method",
        "isStatic",
        "method",
        "method",
        "isStatic",
        "method",
        "method",
        "method",
        "method",
        "method",
        "method",
        "throwUnexpectedToken",
        "token",
        "Messages",
        "hasConstructor",
        "throwUnexpectedToken",
        "token",
        "Messages",
        "hasConstructor",
        "method",
        "method",
        "method",
        "method",
        "throwUnexpectedToken",
        "token",
        "Messages",
        "method",
        "Syntax",
        "method",
        "method",
        "body",
        "method",
        "throwUnexpectedToken",
        "lookahead",
        "lex",
        "classBody",
        "body",
        "Node",
        "strict",
        "expectKeyword",
        "id",
        "parseVariableIdentifier",
        "matchKeyword",
        "lex",
        "superClass",
        "isolateCoverGrammar",
        "parseLeftHandSideExpressionAllowCall",
        "classBody",
        "parseClassBody",
        "strict",
        "previousStrict",
        "classNode",
        "id",
        "superClass",
        "classBody",
        "Node",
        "strict",
        "expectKeyword",
        "lookahead",
        "Token",
        "id",
        "parseVariableIdentifier",
        "matchKeyword",
        "lex",
        "superClass",
        "isolateCoverGrammar",
        "parseLeftHandSideExpressionAllowCall",
        "classBody",
        "parseClassBody",
        "strict",
        "previousStrict",
        "classNode",
        "id",
        "superClass",
        "classBody",
        "startIndex",
        "length",
        "token",
        "lookahead",
        "token",
        "Token",
        "statement",
        "parseStatementListItem",
        "body",
        "statement",
        "statement",
        "Syntax",
        "directive",
        "source",
        "token",
        "token",
        "directive",
        "strict",
        "firstRestricted",
        "tolerateUnexpectedToken",
        "firstRestricted",
        "Messages",
        "firstRestricted",
        "token",
        "firstRestricted",
        "token",
        "startIndex",
        "length",
        "statement",
        "parseStatementListItem",
        "statement",
        "body",
        "statement",
        "body",
        "peek",
        "node",
        "Node",
        "strict",
        "body",
        "parseScriptBody",
        "node",
        "body",
        "i",
        "i",
        "extra",
        "i",
        "entry",
        "extra",
        "i",
        "token",
        "entry",
        "entry",
        "entry",
        "token",
        "entry",
        "entry",
        "extra",
        "token",
        "entry",
        "extra",
        "token",
        "entry",
        "tokens",
        "token",
        "extra",
        "tokens",
        "code",
        "options",
        "toString",
        "code",
        "code",
        "code",
        "toString",
        "code",
        "source",
        "code",
        "index",
        "lineNumber",
        "source",
        "lineStart",
        "startIndex",
        "index",
        "startLineNumber",
        "lineNumber",
        "startLineStart",
        "lineStart",
        "length",
        "source",
        "lookahead",
        "state",
        "extra",
        "options",
        "options",
        "options",
        "extra",
        "extra",
        "extra",
        "extra",
        "extra",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "peek",
        "lookahead",
        "Token",
        "extra",
        "lex",
        "lookahead",
        "Token",
        "lex",
        "lexError",
        "extra",
        "recordError",
        "lexError",
        "lexError",
        "filterTokenLocation",
        "tokens",
        "extra",
        "extra",
        "tokens",
        "extra",
        "extra",
        "tokens",
        "extra",
        "e",
        "e",
        "extra",
        "tokens",
        "code",
        "options",
        "toString",
        "code",
        "code",
        "code",
        "toString",
        "code",
        "source",
        "code",
        "index",
        "lineNumber",
        "source",
        "lineStart",
        "startIndex",
        "index",
        "startLineNumber",
        "lineNumber",
        "startLineStart",
        "lineStart",
        "length",
        "source",
        "lookahead",
        "state",
        "extra",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "toString",
        "options",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "options",
        "options",
        "extra",
        "extra",
        "extra",
        "extra",
        "extra",
        "extra",
        "extra",
        "program",
        "parseProgram",
        "extra",
        "program",
        "extra",
        "extra",
        "filterTokenLocation",
        "program",
        "extra",
        "extra",
        "program",
        "extra",
        "e",
        "e",
        "extra",
        "program",
        "exports",
        "exports",
        "tokenize",
        "exports",
        "parse",
        "exports",
        "types",
        "name",
        "Syntax",
        "Syntax",
        "name",
        "types",
        "name",
        "Syntax",
        "name",
        "types",
        "types"
    ],
    "literals": [
        "'use strict'",
        "'function'",
        "'exports'",
        "'undefined'",
        "'use strict'",
        "'Boolean'",
        "'<end>'",
        "'Identifier'",
        "'Keyword'",
        "'Null'",
        "'Numeric'",
        "'Punctuator'",
        "'String'",
        "'RegularExpression'",
        "'('",
        "'{'",
        "'['",
        "'in'",
        "'typeof'",
        "'instanceof'",
        "'new'",
        "'return'",
        "'case'",
        "'delete'",
        "'throw'",
        "'void'",
        "'='",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "'%='",
        "'<<='",
        "'>>='",
        "'>>>='",
        "'&='",
        "'|='",
        "'^='",
        "','",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'++'",
        "'--'",
        "'<<'",
        "'>>'",
        "'>>>'",
        "'&'",
        "'|'",
        "'^'",
        "'!'",
        "'~'",
        "'&&'",
        "'||'",
        "'?'",
        "':'",
        "'==='",
        "'=='",
        "'>='",
        "'<='",
        "'<'",
        "'>'",
        "'!='",
        "'!=='",
        "'AssignmentExpression'",
        "'AssignmentPattern'",
        "'ArrayExpression'",
        "'ArrayPattern'",
        "'ArrowFunctionExpression'",
        "'BlockStatement'",
        "'BinaryExpression'",
        "'BreakStatement'",
        "'CallExpression'",
        "'CatchClause'",
        "'ClassBody'",
        "'ClassDeclaration'",
        "'ClassExpression'",
        "'ConditionalExpression'",
        "'ContinueStatement'",
        "'DoWhileStatement'",
        "'DebuggerStatement'",
        "'EmptyStatement'",
        "'ExpressionStatement'",
        "'ForStatement'",
        "'ForInStatement'",
        "'FunctionDeclaration'",
        "'FunctionExpression'",
        "'Identifier'",
        "'IfStatement'",
        "'Literal'",
        "'LabeledStatement'",
        "'LogicalExpression'",
        "'MemberExpression'",
        "'MethodDefinition'",
        "'NewExpression'",
        "'ObjectExpression'",
        "'ObjectPattern'",
        "'Program'",
        "'Property'",
        "'RestElement'",
        "'ReturnStatement'",
        "'SequenceExpression'",
        "'SpreadElement'",
        "'SwitchStatement'",
        "'SwitchCase'",
        "'ThisExpression'",
        "'ThrowStatement'",
        "'TryStatement'",
        "'UnaryExpression'",
        "'UpdateExpression'",
        "'VariableDeclaration'",
        "'VariableDeclarator'",
        "'WhileStatement'",
        "'WithStatement'",
        "'ArrowParameterPlaceHolder'",
        "'Unexpected token %0'",
        "'Unexpected number'",
        "'Unexpected string'",
        "'Unexpected identifier'",
        "'Unexpected reserved word'",
        "'Unexpected end of input'",
        "'Illegal newline after throw'",
        "'Invalid regular expression'",
        "'Invalid regular expression: missing /'",
        "'Invalid left-hand side in assignment'",
        "'Invalid left-hand side in for-in'",
        "'More than one default clause in switch statement'",
        "'Missing catch or finally after try'",
        "'Undefined label \\'%0\\''",
        "'%0 \\'%1\\' has already been declared'",
        "'Illegal continue statement'",
        "'Illegal break statement'",
        "'Illegal return statement'",
        "'Strict mode code may not include a with statement'",
        "'Catch variable may not be eval or arguments in strict mode'",
        "'Variable name may not be eval or arguments in strict mode'",
        "'Parameter name eval or arguments is not allowed in strict mode'",
        "'Strict mode function may not have duplicate parameter names'",
        "'Function name may not be eval or arguments in strict mode'",
        "'Octal literals are not allowed in strict mode.'",
        "'Delete of an unqualified identifier in strict mode.'",
        "'Assignment to eval or arguments is not allowed in strict mode'",
        "'Postfix increment/decrement may not have eval or arguments operand in strict mode'",
        "'Prefix increment/decrement may not have eval or arguments operand in strict mode'",
        "'Use of future reserved word in strict mode'",
        "'Rest parameter must be last formal parameter'",
        "'Unexpected token ='",
        "'Unexpected token {'",
        "'Duplicate __proto__ fields are not allowed in object literals'",
        "'Class constructor may not be an accessor'",
        "'A class may only have one constructor'",
        "'Classes may not have static property named prototype'",
        "'[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'",
        "'[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'",
        "'ASSERT: '",
        "'0123456789abcdefABCDEF'",
        "'01234567'",
        "'enum'",
        "'export'",
        "'import'",
        "'super'",
        "'implements'",
        "'interface'",
        "'package'",
        "'private'",
        "'protected'",
        "'public'",
        "'static'",
        "'yield'",
        "'let'",
        "'eval'",
        "'arguments'",
        "'if'",
        "'in'",
        "'do'",
        "'var'",
        "'for'",
        "'new'",
        "'try'",
        "'let'",
        "'this'",
        "'else'",
        "'case'",
        "'void'",
        "'with'",
        "'enum'",
        "'while'",
        "'break'",
        "'catch'",
        "'throw'",
        "'const'",
        "'yield'",
        "'class'",
        "'super'",
        "'return'",
        "'typeof'",
        "'delete'",
        "'switch'",
        "'export'",
        "'import'",
        "'default'",
        "'finally'",
        "'extends'",
        "'function'",
        "'continue'",
        "'debugger'",
        "'instanceof'",
        "'number'",
        "'Comment must have valid position'",
        "'Line'",
        "'Line'",
        "'Block'",
        "'Block'",
        "'!--'",
        "'u'",
        "'0123456789abcdef'",
        "''",
        "'}'",
        "'0123456789abcdef'",
        "'}'",
        "'u'",
        "'\\\\'",
        "'u'",
        "'\\\\'",
        "'null'",
        "'true'",
        "'false'",
        "''",
        "'('",
        "'{'",
        "'.'",
        "'.'",
        "'.'",
        "'...'",
        "')'",
        "';'",
        "','",
        "'}'",
        "'['",
        "']'",
        "':'",
        "'?'",
        "'~'",
        "'>>>='",
        "'==='",
        "'!=='",
        "'>>>'",
        "'<<='",
        "'>>='",
        "'&&'",
        "'||'",
        "'=='",
        "'!='",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "'++'",
        "'--'",
        "'<<'",
        "'>>'",
        "'&='",
        "'|='",
        "'^='",
        "'%='",
        "'<='",
        "'>='",
        "'=>'",
        "'<>=!+-*%&|^/'",
        "''",
        "'0x'",
        "''",
        "'0'",
        "'1'",
        "'0'",
        "''",
        "'8'",
        "'9'",
        "'.'",
        "'Numeric literal must start with a decimal digit or a decimal point'",
        "''",
        "'.'",
        "'0'",
        "'x'",
        "'X'",
        "'b'",
        "'B'",
        "'o'",
        "'O'",
        "'.'",
        "'e'",
        "'E'",
        "'+'",
        "'-'",
        "''",
        "'\\''",
        "'\"'",
        "'String literal must starts with a quote'",
        "''",
        "'\\\\'",
        "'u'",
        "'x'",
        "'{'",
        "'n'",
        "'\\n'",
        "'r'",
        "'\\r'",
        "'t'",
        "'\\t'",
        "'b'",
        "'\\b'",
        "'f'",
        "'\\f'",
        "'v'",
        "'\\x0B'",
        "'8'",
        "'9'",
        "'01234567'",
        "'01234567'",
        "'0123'",
        "'01234567'",
        "'\\r'",
        "'\\n'",
        "''",
        "'u'",
        "'x'",
        "'x'",
        "'/'",
        "'Regular expression literal must start with a slash'",
        "'\\\\'",
        "']'",
        "'/'",
        "'['",
        "''",
        "''",
        "'\\\\'",
        "'u'",
        "'u'",
        "'\\\\u'",
        "'u'",
        "'\\\\u'",
        "'\\\\'",
        "'Punctuator'",
        "'/'",
        "'/='",
        "'RegularExpression'",
        "'Punctuator'",
        "']'",
        "')'",
        "'Keyword'",
        "'if'",
        "'while'",
        "'for'",
        "'with'",
        "'}'",
        "'Keyword'",
        "'Keyword'",
        "'Keyword'",
        "'this'",
        "'undefined'",
        "'undefined'",
        "'||'",
        "'&&'",
        "'['",
        "'++'",
        "'--'",
        "'var'",
        "'Line '",
        "': '",
        "'Message reference must be in range'",
        "'Message reference must be in range'",
        "'%0'",
        "'ILLEGAL'",
        "'number'",
        "','",
        "';'",
        "','",
        "'='",
        "'*='",
        "'/='",
        "'%='",
        "'+='",
        "'-='",
        "'<<='",
        "'>>='",
        "'>>>='",
        "'&='",
        "'^='",
        "'|='",
        "';'",
        "'}'",
        "'['",
        "']'",
        "','",
        "'...'",
        "']'",
        "','",
        "']'",
        "'['",
        "'='",
        "'init'",
        "':'",
        "'init'",
        "':'",
        "'init'",
        "'{'",
        "'}'",
        "'}'",
        "','",
        "'['",
        "'{'",
        "'='",
        "'['",
        "']'",
        "','",
        "'...'",
        "']'",
        "','",
        "']'",
        "','",
        "'['",
        "']'",
        "'['",
        "'get'",
        "'['",
        "'('",
        "')'",
        "'get'",
        "'set'",
        "'['",
        "'('",
        "')'",
        "')'",
        "'set'",
        "'('",
        "'init'",
        "'__proto__'",
        "'__proto__'",
        "'['",
        "':'",
        "'init'",
        "'='",
        "'init'",
        "'init'",
        "'{'",
        "'}'",
        "'}'",
        "'}'",
        "'('",
        "')'",
        "'=>'",
        "'=>'",
        "'...'",
        "')'",
        "'=>'",
        "'=>'",
        "','",
        "','",
        "'...'",
        "')'",
        "'=>'",
        "'=>'",
        "')'",
        "'=>'",
        "'('",
        "'['",
        "'{'",
        "'function'",
        "'this'",
        "'class'",
        "'true'",
        "'/'",
        "'/='",
        "'undefined'",
        "'('",
        "')'",
        "')'",
        "')'",
        "'.'",
        "'['",
        "']'",
        "'new'",
        "'('",
        "'new'",
        "'.'",
        "'.'",
        "'('",
        "'['",
        "'['",
        "'callee of new expression always allow in keyword.'",
        "'new'",
        "'['",
        "'['",
        "'.'",
        "'.'",
        "'++'",
        "'--'",
        "'++'",
        "'--'",
        "'+'",
        "'-'",
        "'~'",
        "'!'",
        "'delete'",
        "'void'",
        "'typeof'",
        "'delete'",
        "'||'",
        "'&&'",
        "'|'",
        "'^'",
        "'&'",
        "'=='",
        "'!='",
        "'==='",
        "'!=='",
        "'<'",
        "'>'",
        "'<='",
        "'>='",
        "'instanceof'",
        "'in'",
        "'<<'",
        "'>>'",
        "'>>>'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
        "'?'",
        "':'",
        "'{'",
        "'Invalid type'",
        "'=>'",
        "'=>'",
        "'='",
        "','",
        "','",
        "'const'",
        "'let'",
        "'function'",
        "'class'",
        "'}'",
        "'{'",
        "'}'",
        "'='",
        "'='",
        "','",
        "'var'",
        "'const'",
        "'in'",
        "'='",
        "'='",
        "'='",
        "','",
        "'let'",
        "'const'",
        "'Lexical declaration must be either let or const'",
        "'{'",
        "'='",
        "')'",
        "';'",
        "'if'",
        "'('",
        "')'",
        "'else'",
        "'do'",
        "'while'",
        "'('",
        "')'",
        "';'",
        "'while'",
        "'('",
        "')'",
        "'for'",
        "'('",
        "';'",
        "'var'",
        "'in'",
        "';'",
        "'const'",
        "'let'",
        "'in'",
        "'in'",
        "','",
        "','",
        "';'",
        "'undefined'",
        "';'",
        "';'",
        "')'",
        "')'",
        "'undefined'",
        "'continue'",
        "'$'",
        "'break'",
        "'$'",
        "'return'",
        "';'",
        "'}'",
        "'with'",
        "'('",
        "')'",
        "'default'",
        "'case'",
        "':'",
        "'}'",
        "'default'",
        "'case'",
        "'switch'",
        "'('",
        "')'",
        "'{'",
        "'}'",
        "'}'",
        "'}'",
        "'throw'",
        "'catch'",
        "'('",
        "')'",
        "')'",
        "'try'",
        "'catch'",
        "'finally'",
        "'debugger'",
        "'{'",
        "';'",
        "'('",
        "'break'",
        "'continue'",
        "'debugger'",
        "'do'",
        "'for'",
        "'function'",
        "'if'",
        "'return'",
        "'switch'",
        "'throw'",
        "'try'",
        "'var'",
        "'while'",
        "'with'",
        "':'",
        "'$'",
        "'Label'",
        "'{'",
        "'use strict'",
        "'}'",
        "'}'",
        "'$'",
        "'...'",
        "')'",
        "'('",
        "')'",
        "','",
        "')'",
        "'function'",
        "'function'",
        "'('",
        "'{'",
        "'}'",
        "';'",
        "'['",
        "'static'",
        "'['",
        "'static'",
        "'init'",
        "'method'",
        "'constructor'",
        "'method'",
        "'constructor'",
        "'prototype'",
        "'class'",
        "'extends'",
        "'class'",
        "'extends'",
        "'use strict'",
        "'undefined'",
        "'string'",
        "'boolean'",
        "'boolean'",
        "'boolean'",
        "'boolean'",
        "'undefined'",
        "'undefined'",
        "'string'",
        "'undefined'",
        "'boolean'",
        "'boolean'",
        "'boolean'",
        "'boolean'",
        "'boolean'",
        "'boolean'",
        "'undefined'",
        "'undefined'",
        "'undefined'",
        "'2.1.0'",
        "'function'",
        "'function'"
    ],
    "variables": [
        "Token",
        "TokenName",
        "FnExprTokens",
        "Syntax",
        "PlaceHolders",
        "Messages",
        "Regex",
        "source",
        "strict",
        "index",
        "lineNumber",
        "lineStart",
        "hasLineTerminator",
        "lastIndex",
        "lastLineNumber",
        "lastLineStart",
        "startIndex",
        "startLineNumber",
        "startLineStart",
        "scanning",
        "length",
        "lookahead",
        "state",
        "extra",
        "isBindingElement",
        "isAssignmentTarget",
        "firstCoverInitializedNameError",
        "comment",
        "start",
        "loc",
        "ch",
        "comment",
        "start",
        "loc",
        "ch",
        "comment",
        "ch",
        "start",
        "i",
        "len",
        "ch",
        "code",
        "ch",
        "code",
        "cu1",
        "cu2",
        "ch",
        "id",
        "start",
        "ch",
        "start",
        "id",
        "token",
        "number",
        "ch",
        "number",
        "number",
        "octal",
        "i",
        "ch",
        "number",
        "start",
        "ch",
        "quote",
        "start",
        "ch",
        "code",
        "unescaped",
        "octal",
        "tmp",
        "pattern",
        "ch",
        "classMarker",
        "terminated",
        "body",
        "ch",
        "flags",
        "restore",
        "start",
        "body",
        "flags",
        "value",
        "pos",
        "loc",
        "regex",
        "token",
        "prevToken",
        "checkToken",
        "ch",
        "token",
        "loc",
        "token",
        "value",
        "entry",
        "token",
        "lastChild",
        "leadingComments",
        "trailingComments",
        "bottomRight",
        "i",
        "comment",
        "last",
        "e",
        "existing",
        "error",
        "args",
        "msg",
        "args",
        "msg",
        "error",
        "msg",
        "error",
        "token",
        "token",
        "token",
        "op",
        "oldIsBindingElement",
        "isBindingElement",
        "oldIsAssignmentTarget",
        "isAssignmentTarget",
        "oldFirstCoverInitializedNameError",
        "firstCoverInitializedNameError",
        "result",
        "oldIsBindingElement",
        "isBindingElement",
        "oldIsAssignmentTarget",
        "isAssignmentTarget",
        "oldFirstCoverInitializedNameError",
        "firstCoverInitializedNameError",
        "result",
        "node",
        "elements",
        "rest",
        "restNode",
        "node",
        "key",
        "computed",
        "init",
        "node",
        "properties",
        "startToken",
        "lookahead",
        "pattern",
        "right",
        "elements",
        "node",
        "restSpread",
        "previousStrict",
        "body",
        "method",
        "node",
        "token",
        "node",
        "expr",
        "value",
        "options",
        "methodNode",
        "token",
        "lookahead",
        "node",
        "computed",
        "key",
        "maybeMethod",
        "value",
        "properties",
        "hasProto",
        "node",
        "i",
        "expr",
        "expressions",
        "startToken",
        "i",
        "token",
        "expr",
        "node",
        "args",
        "token",
        "node",
        "expr",
        "callee",
        "args",
        "node",
        "expr",
        "args",
        "property",
        "startToken",
        "previousAllowIn",
        "expr",
        "property",
        "startToken",
        "expr",
        "token",
        "startToken",
        "lookahead",
        "token",
        "expr",
        "startToken",
        "prec",
        "marker",
        "markers",
        "expr",
        "token",
        "prec",
        "stack",
        "right",
        "left",
        "i",
        "expr",
        "previousAllowIn",
        "consequent",
        "alternate",
        "startToken",
        "i",
        "i",
        "len",
        "param",
        "defaults",
        "defaultCount",
        "options",
        "token",
        "previousStrict",
        "body",
        "token",
        "expr",
        "right",
        "startToken",
        "expr",
        "startToken",
        "lookahead",
        "expressions",
        "block",
        "node",
        "token",
        "node",
        "init",
        "id",
        "node",
        "declarations",
        "init",
        "id",
        "node",
        "kind",
        "declarations",
        "node",
        "param",
        "node",
        "expr",
        "test",
        "consequent",
        "alternate",
        "body",
        "test",
        "oldInIteration",
        "test",
        "body",
        "oldInIteration",
        "init",
        "initSeq",
        "initStartToken",
        "test",
        "update",
        "left",
        "right",
        "kind",
        "declarations",
        "body",
        "oldInIteration",
        "previousAllowIn",
        "label",
        "key",
        "label",
        "key",
        "argument",
        "body",
        "test",
        "consequent",
        "statement",
        "node",
        "discriminant",
        "cases",
        "clause",
        "oldInSwitch",
        "defaultFound",
        "argument",
        "param",
        "body",
        "node",
        "block",
        "handler",
        "finalizer",
        "expr",
        "labeledBody",
        "key",
        "node",
        "statement",
        "body",
        "token",
        "directive",
        "firstRestricted",
        "oldLabelSet",
        "oldInIteration",
        "oldInSwitch",
        "oldInFunctionBody",
        "oldParenthesisCount",
        "node",
        "key",
        "token",
        "param",
        "options",
        "id",
        "defaults",
        "body",
        "token",
        "stricted",
        "tmp",
        "firstRestricted",
        "message",
        "previousStrict",
        "token",
        "id",
        "stricted",
        "firstRestricted",
        "message",
        "tmp",
        "defaults",
        "body",
        "previousStrict",
        "node",
        "classBody",
        "token",
        "isStatic",
        "hasConstructor",
        "body",
        "method",
        "computed",
        "key",
        "id",
        "superClass",
        "classNode",
        "classBody",
        "previousStrict",
        "strict",
        "id",
        "superClass",
        "classNode",
        "classBody",
        "previousStrict",
        "strict",
        "statement",
        "body",
        "token",
        "directive",
        "firstRestricted",
        "body",
        "node",
        "i",
        "entry",
        "token",
        "tokens",
        "toString",
        "tokens",
        "program",
        "toString",
        "name",
        "types"
    ],
    "comments": [
        "Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>\n  Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        "Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,",
        "Rhino, and plain browser loading.",
        "istanbul ignore next",
        "A function following one of those tokens is an expression.",
        "assignment operators",
        "binary/unary operators",
        "Error messages should be identical to V8.",
        "See also tools/generate-unicode-regex.py.",
        "Ensure the condition is true, otherwise throw an error.",
        "This is only to have a better contract semantic, i.e. another safety net",
        "to catch a logic error. The condition shall be fulfilled in normal case.",
        "Do NOT use this to enforce a certain condition on any user input.",
        "istanbul ignore if",
        "0..9",
        "7.2 White Space",
        "7.3 Line Terminators",
        "7.6 Identifier Names and Identifiers",
        "$ (dollar) and _ (underscore)",
        "A..Z",
        "a..z",
        "\\ (backslash)",
        "$ (dollar) and _ (underscore)",
        "A..Z",
        "a..z",
        "0..9",
        "\\ (backslash)",
        "7.6.1.2 Future Reserved Words",
        "11.6.2.2 Future Reserved Words",
        "7.6.1.1 Keywords",
        "'const' is specialized as Keyword in V8.",
        "'yield' and 'let' are for compatibility with SpiderMonkey and ES.next.",
        "Some others are from future reserved words.",
        "7.4 Comments",
        "Block comment ends with '*/'.",
        "Ran off the end of the file - the whole thing is a comment",
        "U+002F is '/'",
        "U+002A is '*'",
        "U+002D is '-'",
        "U+003E is '>'",
        "'-->' is a single-line comment",
        "U+003C is '<'",
        "`<`",
        "`!`",
        "`-`",
        "`-`",
        "At least, one hex digit is required.",
        "UTF-16 Encoding",
        "'\\u' (U+005C, U+0075) denotes an escaped character.",
        "'\\u' (U+005C, U+0075) denotes an escaped character.",
        "Blackslash (U+005C) marks Unicode escape sequence.",
        "Backslash (U+005C) starts an escaped character.",
        "There is no keyword or literal with only one character.",
        "Thus, it must be an identifier.",
        "7.7 Punctuators",
        "Check for most common single-character punctuators.",
        "Spread operator: ...",
        "4-character punctuator.",
        "3-character punctuators.",
        "2-character punctuators.",
        "1-character punctuators.",
        "7.8.3 Numeric Literals",
        "only 0b or 0B",
        "istanbul ignore else",
        "only 0o or 0O",
        "Implicit octal, unless there is a non-octal digit.",
        "(Annex B.1.1 on Numeric Literals)",
        "Hex number starts with '0x'.",
        "Octal number starts with '0'.",
        "Octal number in ES6 starts with '0o'.",
        "Binary number in ES6 starts with '0b'.",
        "7.8.4 String Literals",
        "\\0 is not octal escape sequence",
        "3 digits are only allowed when string starts",
        "with 0, 1, 2, 3",
        "Replace each astral symbol and every Unicode escape sequence",
        "that possibly represents an astral symbol or a paired surrogate",
        "with a single ASCII symbol to avoid throwing on regular",
        "expressions that are only valid in combination with the `/u`",
        "flag.",
        "Note: replacing with the ASCII symbol `x` might cause false",
        "negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a",
        "perfectly valid pattern that is equivalent to `[a-b]`, but it",
        "would be replaced by `[x-b]` which throws an error.",
        "First, detect invalid regular expressions.",
        "Return a regular expression object for this pattern-flag pair, or",
        "`null` in case the current environment doesn't support the flags it",
        "uses.",
        "ECMA-262 7.8.5",
        "Exclude leading and trailing slash.",
        "istanbul ignore next",
        "Pop the previous token, which is likely '/' or '/='",
        "Using the following algorithm:",
        "https://github.com/mozilla/sweet.js/wiki/design",
        "Nothing before that: it cannot be a division.",
        "Dividing a function by anything makes little sense,",
        "but we have to check for that.",
        "Anonymous function.",
        "Named function.",
        "checkToken determines whether the function is",
        "a declaration or an expression.",
        "It is an expression.",
        "It is a declaration.",
        "Very common: ( and ) and ;",
        "String literal starts with single quote (U+0027) or double quote (U+0022).",
        "Dot (.) U+002E can also start a floating-point number, hence the need",
        "to check the next character.",
        "Slash (/) U+002F can also start a regex.",
        "Eating the stack.",
        "Prevent duplicated error.",
        "istanbul ignore next",
        "Throw an exception",
        "istanbul ignore next",
        "Throw an exception because of the token.",
        "Expect the next token to match the specified punctuator.",
        "If not, an exception will be thrown.",
        "Expect the next token to match the specified keyword.",
        "If not, an exception will be thrown.",
        "Return true if the next token matches the specified punctuator.",
        "Return true if the next token matches the specified keyword",
        "Return true if the next token is an assignment operator",
        "Catch the very common case first: immediately a semicolon (U+003B).",
        "FIXME(ikarienator): this is seemingly an issue in the previous location info convention.",
        "Cover grammar support.",
        "",
        "When an assignment expression position starts with an left parenthesis, the determination of the type",
        "of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)",
        "or the first comma. This situation also defers the determination of all the expressions nested in the pair.",
        "",
        "There are three productions that can be parsed in a parentheses pair that needs to be determined",
        "after the outermost pair is closed. They are:",
        "",
        "1. AssignmentExpression",
        "2. BindingElements",
        "3. AssignmentTargets",
        "",
        "In order to avoid exponential backtracking, we use two flags to denote if the production can be",
        "binding element or assignment target.",
        "",
        "The three productions have the relationship:",
        "",
        "BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression",
        "",
        "with a single exception that CoverInitializedName when used directly in an Expression, generates",
        "an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the",
        "first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.",
        "",
        "isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not",
        "effect the current flags. This means the production the parser parses is only used as an expression. Therefore",
        "the CoverInitializedName check is conducted.",
        "",
        "inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates",
        "the flags outside of the parser. This means the production the parser parses is used as a part of a potential",
        "pattern. The CoverInitializedName check is deferred.",
        "11.1.4 Array Initialiser",
        "11.1.5 Object Initialiser",
        "Note: This function is called only from parseObjectProperty(), where",
        "EOF and Punctuator tokens are already filtered out.",
        "This function is to try to parse a MethodDefinition as defined in 14.3. But in the case of object literals,",
        "it might be called at a position where there is in fact a short hand identifier pattern or a data property.",
        "This can only be determined after we consumed up to the left parentheses.",
        "",
        "In order to avoid back tracking, it returns `null` if the position is not a MethodDefinition and the caller",
        "is responsible to visit other options.",
        "check for `get` and `set`;",
        "Not a MethodDefinition.",
        "finished",
        "init property or short hand property.",
        "Allow other node type for tolerant parsing.",
        "11.1.6 The Grouping Operator",
        "11.1 Primary Expressions",
        "11.2 Left-Hand-Side Expressions",
        "11.3 Postfix Expressions",
        "11.3.1, 11.3.2",
        "11.4 Unary Operators",
        "11.4.4, 11.4.5",
        "11.5 Multiplicative Operators",
        "11.6 Additive Operators",
        "11.7 Bitwise Shift Operators",
        "11.8 Relational Operators",
        "11.9 Equality Operators",
        "11.10 Binary Bitwise Operators",
        "11.11 Binary Logical Operators",
        "Reduce: make a binary expression from the three topmost entries.",
        "Shift.",
        "Final reduce to clean-up the stack.",
        "11.12 Conditional Operator",
        "[ES6] 14.2 Arrow Function",
        "11.13 Assignment Operators",
        "11.13.1",
        "11.14 Comma Operator",
        "12.1 Block",
        "12.2 Variable Statement",
        "12.2.1",
        "12.2.1",
        "12.3 Empty Statement",
        "12.4 Expression Statement",
        "12.5 If statement",
        "12.6 Iteration Statements",
        "12.7 The continue statement",
        "Optimize the most common form: 'continue;'.",
        "12.8 The break statement",
        "Catch the very common case first: immediately a semicolon (U+003B).",
        "12.9 The return statement",
        "'return' followed by a space and an identifier is very common.",
        "HACK",
        "12.10 The with statement",
        "12.10 The swith statement",
        "12.13 The throw statement",
        "12.14 The try statement",
        "12.14.1",
        "12.15 The debugger statement",
        "12 Statements",
        "12.12 Labelled Statements",
        "13 Function Definition",
        "this is not directive",
        "14 Program",
        "this is not directive",
        "istanbul ignore if",
        "Options matching.",
        "Of course we collect tokens here.",
        "The following two fields are necessary to compute the Regex tokens.",
        "We have to break on the first error",
        "to avoid infinite loops.",
        "Sync with *.json manifests.",
        "Deep copy.",
        "istanbul ignore next",
        "vim: set sw=4 ts=4 et tw=80 :"
    ],
    "docstrings": [
        "* @name expectCommaSeparator\n     * @description Quietly expect a comma when in tolerant mode, otherwise delegates\n     * to <code>expect(value)</code>\n     * @since 2.0"
    ],
    "functions": [
        "isDecimalDigit",
        "isHexDigit",
        "isOctalDigit",
        "isWhiteSpace",
        "isLineTerminator",
        "isIdentifierStart",
        "isIdentifierPart",
        "isFutureReservedWord",
        "isStrictModeReservedWord",
        "isRestrictedWord",
        "isKeyword",
        "addComment",
        "skipSingleLineComment",
        "skipMultiLineComment",
        "skipComment",
        "scanHexEscape",
        "scanUnicodeCodePointEscape",
        "getEscapedIdentifier",
        "getIdentifier",
        "scanIdentifier",
        "scanPunctuator",
        "scanHexLiteral",
        "scanBinaryLiteral",
        "scanOctalLiteral",
        "isImplicitOctalLiteral",
        "scanNumericLiteral",
        "scanStringLiteral",
        "testRegExp",
        "scanRegExpBody",
        "scanRegExpFlags",
        "scanRegExp",
        "collectRegex",
        "isIdentifierName",
        "advanceSlash",
        "advance",
        "collectToken",
        "lex",
        "peek",
        "Position",
        "SourceLocation",
        "WrappingSourceLocation",
        "Node",
        "WrappingNode",
        "recordError",
        "createError",
        "throwError",
        "tolerateError",
        "unexpectedTokenError",
        "throwUnexpectedToken",
        "tolerateUnexpectedToken",
        "expect",
        "expectCommaSeparator",
        "expectKeyword",
        "match",
        "matchKeyword",
        "matchAssign",
        "consumeSemicolon",
        "isolateCoverGrammar",
        "inheritCoverGrammar",
        "parseArrayPattern",
        "parsePropertyPattern",
        "parseObjectPattern",
        "parsePattern",
        "parsePatternWithDefault",
        "parseArrayInitialiser",
        "parsePropertyFunction",
        "parsePropertyMethodFunction",
        "parseObjectPropertyKey",
        "lookaheadPropertyName",
        "tryParseMethodDefinition",
        "checkProto",
        "parseObjectProperty",
        "parseObjectInitialiser",
        "reinterpretExpressionAsPattern",
        "parseGroupExpression",
        "parsePrimaryExpression",
        "parseArguments",
        "parseNonComputedProperty",
        "parseNonComputedMember",
        "parseComputedMember",
        "parseNewExpression",
        "parseLeftHandSideExpressionAllowCall",
        "parseLeftHandSideExpression",
        "parsePostfixExpression",
        "parseUnaryExpression",
        "binaryPrecedence",
        "parseBinaryExpression",
        "parseConditionalExpression",
        "parseConciseBody",
        "checkPatternParam",
        "reinterpretAsCoverFormalsList",
        "parseArrowFunctionExpression",
        "parseAssignmentExpression",
        "parseExpression",
        "parseStatementListItem",
        "parseStatementList",
        "parseBlock",
        "parseVariableIdentifier",
        "parseVariableDeclaration",
        "parseVariableDeclarationList",
        "parseVariableStatement",
        "parseLexicalBinding",
        "parseBindingList",
        "parseLexicalDeclaration",
        "parseRestElement",
        "parseEmptyStatement",
        "parseExpressionStatement",
        "parseIfStatement",
        "parseDoWhileStatement",
        "parseWhileStatement",
        "parseForStatement",
        "parseContinueStatement",
        "parseBreakStatement",
        "parseReturnStatement",
        "parseWithStatement",
        "parseSwitchCase",
        "parseSwitchStatement",
        "parseThrowStatement",
        "parseCatchClause",
        "parseTryStatement",
        "parseDebuggerStatement",
        "parseStatement",
        "parseFunctionSourceElements",
        "validateParam",
        "parseParam",
        "parseParams",
        "parseFunctionDeclaration",
        "parseFunctionExpression",
        "parseClassBody",
        "parseClassDeclaration",
        "parseClassExpression",
        "parseScriptBody",
        "parseProgram",
        "filterTokenLocation",
        "tokenize",
        "parse"
    ],
    "classes": []
}