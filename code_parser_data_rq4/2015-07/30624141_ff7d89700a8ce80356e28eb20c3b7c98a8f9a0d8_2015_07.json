{
    "identifiers": [
        "print_function",
        "argparse",
        "os",
        "subprocess",
        "sys",
        "qubes",
        "qubes",
        "tools",
        "qubes",
        "tools",
        "get_parser_base",
        "want_force_root",
        "parser",
        "add_argument",
        "dest",
        "help",
        "parser",
        "add_argument",
        "action",
        "qubes",
        "tools",
        "PropertyAction",
        "help",
        "parser",
        "add_argument",
        "action",
        "qubes",
        "tools",
        "SinglePropertyAction",
        "help",
        "parser",
        "add_argument",
        "action",
        "qubes",
        "tools",
        "SinglePropertyAction",
        "help",
        "parser",
        "add_mutually_exclusive_group",
        "parser_root",
        "add_argument",
        "metavar",
        "help",
        "parser_root",
        "add_argument",
        "metavar",
        "help",
        "parser",
        "add_argument",
        "metavar",
        "action",
        "qubes",
        "tools",
        "SinglePropertyAction",
        "nargs",
        "help",
        "parser",
        "parse_args",
        "qubes",
        "tools",
        "dont_run_as_root",
        "parser",
        "args",
        "args",
        "properties",
        "parser",
        "error",
        "args",
        "properties",
        "parser",
        "error",
        "qubes",
        "Qubes",
        "args",
        "xml",
        "app",
        "get_label",
        "args",
        "properties",
        "KeyError",
        "parser",
        "error",
        "format",
        "args",
        "label",
        "join",
        "repr",
        "l",
        "name",
        "l",
        "app",
        "labels",
        "qubes",
        "vm",
        "BaseVM",
        "register",
        "args",
        "cls",
        "KeyError",
        "parser",
        "error",
        "format",
        "args",
        "cls",
        "args",
        "properties",
        "cls",
        "list_properties",
        "parser",
        "error",
        "app",
        "add_new_vm",
        "cls",
        "args",
        "properties",
        "vm",
        "create_on_disk",
        "args",
        "root_move_from",
        "os",
        "unlink",
        "vm",
        "root_img",
        "os",
        "rename",
        "options",
        "root_move_from",
        "vm",
        "root_img",
        "args",
        "root_copy_from",
        "os",
        "unlink",
        "vm",
        "root_img",
        "subprocess",
        "check_call",
        "options",
        "root_copy_from",
        "vm",
        "root_img",
        "IOError",
        "OSError",
        "err",
        "parser",
        "error",
        "err",
        "app",
        "save",
        "sys",
        "exit",
        "main"
    ],
    "literals": [
        "'--class'",
        "'-C'",
        "'cls'",
        "'AppVM'",
        "'specify the class of the new domain (default: %(default)s)'",
        "'--property'",
        "'--prop'",
        "'-p'",
        "'set domain\\'s property, like \"internal\", \"memory\" or \"vcpus\"'",
        "'--template'",
        "'-t'",
        "'specify the TemplateVM to use'",
        "'--label'",
        "'-l'",
        "'specify the label to use for the new domain'",
        "' (e.g. red, yellow, green, ...)'",
        "'--root-copy-from'",
        "'-r'",
        "'FILENAME'",
        "'use provided root.img instead of default/empty one'",
        "' (file will be COPIED)'",
        "'--root-move-from'",
        "'-R'",
        "'FILENAME'",
        "'use provided root.img instead of default/empty one'",
        "' (file will be MOVED)'",
        "'name'",
        "'VMNAME'",
        "'?'",
        "'name of the domain to create'",
        "'label'",
        "'--label option is mandatory'",
        "'name'",
        "'VMNAME is mandatory'",
        "'label'",
        "'no such label: {!r}; available: {}'",
        "', '",
        "'no such domain class: {!r}'",
        "'template'",
        "'template'",
        "'this domain class does not support template'",
        "'cp'",
        "'__main__'"
    ],
    "variables": [
        "parser",
        "parser_root",
        "args",
        "app",
        "label",
        "cls",
        "vm"
    ],
    "comments": [
        "!/usr/bin/python2",
        "-*- encoding: utf8 -*-",
        "",
        "The Qubes OS Project, http://www.qubes-os.org",
        "",
        "Copyright (C) 2010-2015  Joanna Rutkowska <joanna@invisiblethingslab.com>",
        "Copyright (C) 2015       Wojtek Porczyk <woju@invisiblethingslab.com>",
        "",
        "This program is free software; you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation; either version 2 of the License, or",
        "(at your option) any later version.",
        "",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "",
        "You should have received a copy of the GNU General Public License along",
        "with this program; if not, write to the Free Software Foundation, Inc.,",
        "51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.",
        "",
        "TODO list available classes",
        "TODO list labels (maybe in qvm-prefs)",
        "TODO services, devices, tags",
        "parser.add_option (\"-q\", \"--quiet\", action=\"store_false\", dest=\"verbose\", default=True)",
        "if not options.standalone and any([options.root_copy_from, options.root_move_from]):",
        "print >> sys.stderr, \"root.img can be specified only for standalone VMs\"",
        "exit (1)",
        "if options.hvm_template and options.template is not None:",
        "print >> sys.stderr, \"Template VM cannot be based on another template\"",
        "exit (1)",
        "if options.root_copy_from is not None and not os.path.exists(options.root_copy_from):",
        "print >> sys.stderr, \"File specified as root.img does not exists\"",
        "exit (1)",
        "if options.root_move_from is not None and not os.path.exists(options.root_move_from):",
        "print >> sys.stderr, \"File specified as root.img does not exists\"",
        "exit (1)",
        "elif not options.hvm and not options.hvm_template:",
        "if qvm_collection.get_default_template() is None:",
        "print >> sys.stderr, \"No default TemplateVM defined!\"",
        "exit (1)",
        "else:",
        "template = qvm_collection.get_default_template()",
        "if (options.verbose):",
        "print('--> Using default TemplateVM: {0}'.format(template.name))",
        "if (options.verbose):",
        "print \"--> Replacing root.img with provided file\"",
        "if (options.verbose):",
        "print \"--> Replacing root.img with provided file\"",
        "use 'cp' to preserve sparse file"
    ],
    "docstrings": [],
    "functions": [
        "main"
    ],
    "classes": []
}