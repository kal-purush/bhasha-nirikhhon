{
    "identifiers": [
        "com",
        "gentics",
        "cr",
        "configuration",
        "org",
        "junit",
        "Assert",
        "assertNotEquals",
        "org",
        "junit",
        "Assert",
        "assertNotNull",
        "java",
        "io",
        "File",
        "java",
        "io",
        "org",
        "junit",
        "Before",
        "org",
        "junit",
        "Test",
        "com",
        "gentics",
        "api",
        "lib",
        "datasource",
        "Datasource",
        "com",
        "gentics",
        "cr",
        "CRConfigUtil",
        "com",
        "gentics",
        "cr",
        "exceptions",
        "CRException",
        "com",
        "gentics",
        "cr",
        "util",
        "CRUtil",
        "confPath",
        "Before",
        "confPath",
        "getClass",
        "getResource",
        "toURI",
        "getParentFile",
        "getAbsolutePath",
        "setProperty",
        "CRUtil",
        "PORTALNODE_CONFPATH",
        "confPath",
        "EnvironmentConfiguration",
        "setCacheFilePath",
        "CRUtil",
        "PORTALNODE_CONFPATH",
        "EnvironmentConfiguration",
        "loadLoggerProperties",
        "EnvironmentConfiguration",
        "loadCacheProperties",
        "Test",
        "config",
        "GenericConfigurationFileLoader",
        "load",
        "config",
        "CRUtil",
        "PORTALNODE_CONFPATH",
        "crConfig",
        "config",
        "assertNotNull",
        "crConfig",
        "crConfig",
        "initDS",
        "assertNotNull",
        "crConfig",
        "getRequestProcessorConfig",
        "assertNotNull",
        "crConfig",
        "getRequestProcessorConfig",
        "getDatasource",
        "ds",
        "crConfig",
        "getRequestProcessorConfig",
        "getDatasource",
        "assertNotNull",
        "ds",
        "getHandlePool",
        "assertNotEquals",
        "ds",
        "getHandlePool",
        "getHandle",
        "ds",
        "getHandlePool",
        "getHandle"
    ],
    "literals": [
        "\"nodelog.properties\"",
        "\"${\"",
        "\"}/cache.ccf\"",
        "\"${\"",
        "\"}/multipleDatasourceHandle.properties\"",
        "\"crConfig\"",
        "\"crConfig is null\"",
        "\"first request processor is null\"",
        "\"datasource is null\"",
        "\"datasource handlePool is null\"",
        "\"both fetched datasource handles are the same\""
    ],
    "variables": [
        "confPath"
    ],
    "comments": [
        "load multipleDatasourceHandle config with defined hsqldb",
        "check if fetched handle is not the same like next fetched Handle",
        "(Round robin, first and second handle should be used)"
    ],
    "docstrings": [
        "* Test with mutliple Datasources Handles Used config:\n * multipleDatasourceHandle.properties Create 2 HSQL-DBs and register them for a\n * datasource. Check if 2 different db handles are returned with getHandle()\n * \n * @author p.hoefer@gentics.com"
    ],
    "functions": [
        "setUp",
        "testMultipleHandles"
    ],
    "classes": [
        "MultipleDatasourceHandleTest"
    ]
}