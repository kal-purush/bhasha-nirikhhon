{
    "identifiers": [
        "os",
        "io",
        "StringIO",
        "text",
        "path",
        "os",
        "path",
        "dirname",
        "path",
        "set_path",
        "dirname",
        "file_regex",
        "text",
        "startswith",
        "text",
        "xml",
        "parsers",
        "expat",
        "ExpatError",
        "ErrorString",
        "ImportError",
        "plist_parser",
        "ImportError",
        "write_line",
        "write_line",
        "plist_parser",
        "parse_string",
        "text",
        "plist_parser",
        "PropertyListParseError",
        "e",
        "write_line",
        "debug_base_2",
        "path",
        "e",
        "data",
        "plistlib",
        "plistlib",
        "readPlistFromBytes",
        "text",
        "encode",
        "ExpatError",
        "e",
        "write_line",
        "debug_base",
        "path",
        "ErrorString",
        "e",
        "code",
        "e",
        "lineno",
        "e",
        "offset",
        "data",
        "skip_names",
        "StringIO",
        "stream",
        "data",
        "get",
        "stream",
        "write",
        "name",
        "data",
        "get",
        "uuid",
        "stream",
        "write",
        "uuid",
        "data",
        "i",
        "item",
        "items",
        "item",
        "item",
        "write_line",
        "item",
        "items",
        "i",
        "settings",
        "settings",
        "items",
        "settings",
        "sort",
        "key",
        "x",
        "x",
        "lower",
        "stream",
        "write",
        "key",
        "value",
        "settings",
        "stream",
        "write",
        "key",
        "value",
        "stream",
        "write",
        "item",
        "items",
        "item",
        "write_line",
        "stream",
        "write",
        "item",
        "skip_names",
        "item",
        "stream",
        "write",
        "item",
        "item",
        "write_line",
        "key",
        "value",
        "item",
        "items",
        "stream",
        "write",
        "key",
        "value",
        "stream",
        "write",
        "stream",
        "getvalue"
    ],
    "literals": [
        "'load'",
        "'Error parsing Property List \"%s\": %s, line %s, column %s'",
        "'Error parsing Property List \"%s\": %s'",
        "r'Error parsing Property List \"(.*?)\": .*?(?:, line (\\d+), column (\\d+))?'",
        "'<?xml version=\"1.0\" encoding=\"UTF-8\"?>'",
        "\"Unable to load xml.parsers.expat or plist_parser modules.\\n\"",
        "\"Please report to the package author.\"",
        "\"Unable to load plistlib, using plist_parser instead\\n\"",
        "'utf-8'",
        "'name'",
        "\"INSERT NAME HERE\"",
        "'@name \"%s\";'",
        "'uuid'",
        "'\\n\\n@uuid %s;'",
        "'settings'",
        "'scope'",
        "'settings'",
        "\"Expected 'settings' key in item without scope\"",
        "'settings'",
        "\"\\n\\n* {\"",
        "\"\\n\\t%s: %s;\"",
        "\"\\n}\"",
        "'scope'",
        "\"Missing 'scope' key in item\"",
        "\"\\n\\n%s {\"",
        "'scope'",
        "'name'",
        "'\\n\\t@name \"%s\";'",
        "'name'",
        "'settings'",
        "\"Missing 'settings' key in item\"",
        "'settings'",
        "\"\\n\\t%s: %s;\"",
        "\"\\n}\""
    ],
    "variables": [
        "__all__",
        "debug_base",
        "debug_base_2",
        "file_regex",
        "dirname",
        "text",
        "data",
        "name",
        "uuid",
        "items",
        "settings",
        "settings",
        "settings",
        "settings"
    ],
    "comments": [
        "TODO: provide a compat plist parser as dependency",
        "xml.parsers.expat is not available on certain Linux dists, try to use plist_parser then.",
        "See https://github.com/SublimeText/AAAPackageDev/issues/19",
        "Let's just hope AAAPackageDev is installed",
        "This will try `from xml.parsers.expat import ParserCreate`",
        "but since it is already tried above it should succeed.",
        "Name",
        "Search for settings item and extract the others",
        "remove from the regular items list",
        "Global settings",
        "The other items"
    ],
    "docstrings": [
        "\"\"\"Load a tmTheme property list and write errors to an output panel.\n\n    :param text:\n        The text of the file to be parsed.\n    :param path:\n        The path of the file, for error output purposes.\n    :param out:\n        OutputPanel instance.\n\n    :return:\n        `None` if errored, the parsed data otherwise (mostly a dict).\n    \"\"\""
    ],
    "functions": [
        "load",
        "to_csscheme"
    ],
    "classes": []
}