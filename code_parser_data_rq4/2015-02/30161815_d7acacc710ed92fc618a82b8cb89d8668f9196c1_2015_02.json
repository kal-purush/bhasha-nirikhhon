{
    "identifiers": [
        "os",
        "sys",
        "len",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "exit",
        "os",
        "path",
        "exists",
        "sys",
        "argv",
        "sys",
        "argv",
        "sys",
        "exit",
        "os",
        "remove",
        "csvFilename",
        "WindowsError",
        "e",
        "e",
        "winerror",
        "e",
        "os",
        "path",
        "split",
        "sys",
        "argv",
        "os",
        "path",
        "join",
        "scriptdir",
        "os",
        "popen",
        "sys",
        "argv",
        "profilePath",
        "readlines",
        "line",
        "lines",
        "sys",
        "stderr",
        "write",
        "line",
        "open",
        "csvFilename",
        "readlines",
        "len",
        "lines",
        "sys",
        "exit",
        "line",
        "lines",
        "line",
        "strip",
        "split",
        "parts",
        "parts",
        "join",
        "parts",
        "parents",
        "has_key",
        "procID",
        "sys",
        "stderr",
        "write",
        "procID",
        "extraData",
        "parentID",
        "extraData",
        "procID",
        "indent",
        "bIsLoop",
        "details",
        "has_key",
        "procID",
        "details",
        "procID",
        "bIsLoop",
        "processedParent",
        "indent",
        "procID",
        "missing",
        "loop",
        "detail",
        "childID",
        "parents",
        "keys",
        "parents",
        "childID",
        "parentID",
        "procID",
        "PrintProcessTree",
        "childID",
        "indent",
        "procID",
        "parents",
        "keys",
        "parents",
        "procID",
        "processedParent",
        "procID",
        "parents",
        "ultimateParentID",
        "ultimateParentID",
        "parents",
        "ultimateParentID",
        "processedParent",
        "count",
        "count",
        "len",
        "parents",
        "parents",
        "ultimateParentID",
        "parents",
        "has_key",
        "ultimateParentID",
        "PrintProcessTree",
        "ultimateParentID",
        "bIsLoop"
    ],
    "literals": [
        "\"Processes_Summary_Table_ProcessParentage.csv\"",
        "\"Usage: %s trace.etl\"",
        "\"This script extracts process parentage data from the specified\"",
        "\"ETL file and prints it in a tree format, together with process name\"",
        "\"and command line information.\"",
        "\"ETL file '%s' does not exist.\"",
        "\"XperfProcessParentage.wpaProfile\"",
        "\"wpaexporter \\\"%s\\\" -profile \\\"%s\\\"\"",
        "\"Missing data. Sorry.\"",
        "\",\"",
        "\",\"",
        "\"Process ID %d found again. Discarding %s\\n\"",
        "\"\"",
        "\"\"",
        "\"\"",
        "\" (missing process)\"",
        "\" (loop)\"",
        "\"%s%d%s%s, %s\"",
        "\"    \""
    ],
    "variables": [
        "csvFilename",
        "scriptdir",
        "profilePath",
        "lines",
        "lines",
        "parents",
        "details",
        "processedParent",
        "parts",
        "procID",
        "parentID",
        "extraData",
        "parents",
        "procID",
        "details",
        "procID",
        "missing",
        "detail",
        "loop",
        "detail",
        "missing",
        "loop",
        "parents",
        "procID",
        "parentID",
        "ultimateParentID",
        "count",
        "bIsLoop",
        "bIsLoop",
        "ultimateParentID"
    ],
    "comments": [
        "This is the name of the file that wpaexporter creates when using",
        "ProcessParentage.wpaProfile. Ideally this filename could be",
        "specified, but oh well.",
        "Delete any previous results to avoid accidentally using them.",
        "WindowsError: [Error 2] The system cannot find the file specified",
        "Find the location of the .wpaProfile that is needed for exporting the",
        "process parentage data.",
        "Run wpaexporter",
        "Read the raw data.",
        "This dictionary maps from process IDs to their parents",
        "This dictionary maps from process IDs to their details",
        "When this is stored in the data field of the parents dictionary",
        "it indicates that a process has been printed already.",
        "Scan through every line of the .csv file (except the first",
        "line which just contains column labels) and fill in the",
        "parents and details dictionaries.",
        "Should probably do better CSV parsing, but I don't think it matters.",
        "Treat the remaining fields as a single string.",
        "Look up this process in our database. It might",
        "not be there.",
        "Loop through all of the processes looking for ones that have this",
        "process as their parent.",
        "Iterate through all processes. For each process try to find",
        "its 'oldest' ancestor, and then print a tree starting from",
        "there. Due to PID reuse this will occasionally lead to loops.",
        "We detect loops but, unfortunately, they make determining the",
        "correct structure impossible, so the code just randomly chooses",
        "a point in the loop to print from.",
        "For each one find the 'oldest' ancestor process",
        "Stop on processes that are their own parents, or processes",
        "whose parents have already been printed.",
        "Check for infinite loops. They do happen, presumably when",
        "parent processes go away and their process IDs are reused.",
        "Stop if the parent is missing."
    ],
    "docstrings": [
        "\"\"\"\nThis script uses wpaexporter to export process information from an ETL file\nusing the techniques described here:\n\nhttp://randomascii.wordpress.com/2013/11/04/exporting-arbitrary-data-from-xperf-etl-files/\n\nThis script relies on having XperfProcessParentage.wpaProfile in the same directory as the script.\n\"\"\"",
        "\"\"\"\nPrint a process and recursively print all of its children.\n\nMark the processes as\nbeing printed so that we don't print any processes more than once.\nPrint with the requested indent level from 0 to ...\nAnnotate the printout with extra information if the process is\nmissing from the trace (must have a child that outlived it) or\nif the process is part of a loop (some part of the loop must have\nreused a process ID).\n\"\"\""
    ],
    "functions": [
        "PrintProcessTree"
    ],
    "classes": []
}