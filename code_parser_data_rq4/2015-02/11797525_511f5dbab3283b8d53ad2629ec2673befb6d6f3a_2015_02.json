{
    "identifiers": [
        "division",
        "print_function",
        "absolute_import",
        "time",
        "gc",
        "warnings",
        "warnings",
        "simplefilter",
        "numpy",
        "np",
        "scipy",
        "stats",
        "linregress",
        "scipy",
        "signal",
        "fftconvolve",
        "scipy",
        "integrate",
        "trapz",
        "simps",
        "nibabel",
        "statsmodels",
        "api",
        "sm",
        "popeye",
        "onetime",
        "auto_attr",
        "popeye",
        "utilities",
        "utils",
        "popeye",
        "PopulationModel",
        "PopulationFit",
        "popeye",
        "spinach",
        "generate_og_timeseries",
        "generate_og_receptive_field",
        "generate_rf_timeseries",
        "output",
        "grid_parent",
        "polar",
        "grid_parent",
        "shape",
        "dims",
        "dims",
        "append",
        "np",
        "zeros",
        "dims",
        "fit",
        "output",
        "polar",
        "fit",
        "voxel_index",
        "fit",
        "theta",
        "fit",
        "rho",
        "fit",
        "sigma",
        "fit",
        "beta",
        "fit",
        "hrf_delay",
        "fit",
        "rsquared",
        "fit",
        "coefficient",
        "fit",
        "stderr",
        "fit",
        "voxel_index",
        "fit",
        "x",
        "fit",
        "y",
        "fit",
        "sigma",
        "fit",
        "beta",
        "fit",
        "hrf_delay",
        "fit",
        "rsquared",
        "fit",
        "coefficient",
        "fit",
        "stderr",
        "grid_parent",
        "get_affine",
        "grid_parent",
        "get_header",
        "hdr",
        "set_data_shape",
        "dims",
        "nibabel",
        "Nifti1Image",
        "estimates",
        "aff",
        "header",
        "hdr",
        "nifti_estimates",
        "x",
        "y",
        "s_sigma",
        "t_sigma",
        "beta",
        "hrf_delay",
        "deg_x",
        "deg_y",
        "stim_arr",
        "tr_length",
        "generate_og_receptive_field",
        "deg_x",
        "deg_y",
        "x",
        "y",
        "s_sigma",
        "srf",
        "simps",
        "simps",
        "srf",
        "generate_rf_timeseries",
        "deg_x",
        "deg_y",
        "stim_arr",
        "srf",
        "x",
        "y",
        "s_sigma",
        "np",
        "insert",
        "response",
        "np",
        "ones",
        "projector_hz",
        "np",
        "insert",
        "response",
        "len",
        "response",
        "np",
        "ones",
        "projector_hz",
        "np",
        "linspace",
        "tr_length",
        "tr_length",
        "projector_hz",
        "tr_length",
        "np",
        "exp",
        "t",
        "center",
        "t_sigma",
        "sustained_1vol",
        "t_sigma",
        "np",
        "sqrt",
        "np",
        "pi",
        "np",
        "append",
        "np",
        "diff",
        "sustained_1vol",
        "transient_1vol",
        "simps",
        "np",
        "abs",
        "transient_1vol",
        "t",
        "fftconvolve",
        "sustained_1vol_norm",
        "response",
        "len",
        "t",
        "np",
        "insert",
        "sustained_response",
        "np",
        "ones",
        "len",
        "t",
        "sustained_response",
        "np",
        "insert",
        "sustained_response",
        "len",
        "sustained_response",
        "np",
        "ones",
        "len",
        "t",
        "sustained_response",
        "sustained_response",
        "fftconvolve",
        "transient_1vol_norm",
        "response",
        "len",
        "t",
        "np",
        "insert",
        "transient_response",
        "np",
        "ones",
        "len",
        "t",
        "transient_response",
        "np",
        "insert",
        "transient_response",
        "len",
        "transient_response",
        "np",
        "ones",
        "len",
        "t",
        "transient_response",
        "transient_response",
        "np",
        "array",
        "np",
        "mean",
        "sustained_response",
        "tp",
        "tp",
        "projector_hz",
        "tp",
        "np",
        "arange",
        "len",
        "response",
        "projector_hz",
        "tr_length",
        "np",
        "array",
        "np",
        "mean",
        "transient_response",
        "tp",
        "tp",
        "projector_hz",
        "tp",
        "np",
        "arange",
        "len",
        "response",
        "projector_hz",
        "tr_length",
        "sustained_ts",
        "np",
        "mean",
        "sustained_ts",
        "np",
        "mean",
        "sustained_ts",
        "transient_ts",
        "np",
        "mean",
        "transient_ts",
        "np",
        "mean",
        "transient_ts",
        "utils",
        "double_gamma_hrf",
        "tr_length",
        "fftconvolve",
        "hrf",
        "sustained_pct",
        "len",
        "sustained_pct",
        "fftconvolve",
        "hrf",
        "transient_pct",
        "len",
        "transient_pct",
        "model",
        "beta",
        "model",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "args",
        "GaussianFit",
        "model",
        "data",
        "grids",
        "bounds",
        "tr_length",
        "voxel_index",
        "auto_fit",
        "verbose",
        "fit",
        "PopulationModel",
        "stimulus",
        "PopulationModel",
        "stimulus",
        "PopulationFit",
        "model",
        "data",
        "grids",
        "bounds",
        "tr_length",
        "voxel_index",
        "auto_fit",
        "verbose",
        "PopulationFit",
        "model",
        "data",
        "grids",
        "bounds",
        "tr_length",
        "voxel_index",
        "auto_fit",
        "verbose",
        "auto_fit",
        "time",
        "clock",
        "ballpark",
        "estimate",
        "OLS",
        "time",
        "clock",
        "verbose",
        "msg",
        "auto_attr",
        "utils",
        "brute_force_search",
        "model",
        "stimulus",
        "deg_x_coarse",
        "model",
        "stimulus",
        "deg_y_coarse",
        "model",
        "stimulus",
        "stim_arr_coarse",
        "tr_length",
        "grids",
        "bounds",
        "data",
        "utils",
        "error_function",
        "compute_model_ts",
        "auto_attr",
        "utils",
        "gradient_descent_search",
        "x0",
        "y0",
        "s0",
        "beta0",
        "hrf0",
        "model",
        "stimulus",
        "deg_x",
        "model",
        "stimulus",
        "deg_y",
        "model",
        "stimulus",
        "stim_arr",
        "tr_length",
        "bounds",
        "data",
        "utils",
        "error_function",
        "compute_model_ts",
        "auto_attr",
        "ballpark",
        "auto_attr",
        "ballpark",
        "auto_attr",
        "ballpark",
        "auto_attr",
        "ballpark",
        "auto_attr",
        "ballpark",
        "auto_attr",
        "estimate",
        "auto_attr",
        "estimate",
        "auto_attr",
        "estimate",
        "auto_attr",
        "estimate",
        "auto_attr",
        "estimate",
        "auto_attr",
        "np",
        "sqrt",
        "x",
        "y",
        "auto_attr",
        "np",
        "mod",
        "np",
        "arctan2",
        "y",
        "x",
        "np",
        "pi",
        "auto_attr",
        "compute_model_ts",
        "x",
        "y",
        "sigma",
        "beta",
        "hrf_delay",
        "model",
        "stimulus",
        "deg_x",
        "model",
        "stimulus",
        "deg_y",
        "model",
        "stimulus",
        "stim_arr",
        "tr_length",
        "auto_attr",
        "sm",
        "OLS",
        "data",
        "prediction",
        "fit",
        "auto_attr",
        "OLS",
        "auto_attr",
        "OLS",
        "rsquared",
        "auto_attr",
        "np",
        "sqrt",
        "OLS",
        "mse_resid",
        "auto_attr",
        "np",
        "sum",
        "data",
        "prediction",
        "auto_attr",
        "generate_og_receptive_field",
        "model",
        "stimulus",
        "deg_x",
        "model",
        "stimulus",
        "deg_y",
        "x",
        "y",
        "sigma",
        "beta",
        "rf",
        "auto_attr",
        "utils",
        "double_gamma_hrf",
        "hrf_delay",
        "tr_length",
        "auto_attr",
        "voxel_index",
        "voxel_index",
        "voxel_index",
        "finish",
        "start",
        "rsquared",
        "theta",
        "rho",
        "sigma",
        "beta",
        "hrf_delay",
        "txt"
    ],
    "literals": [
        "\"ignore\"",
        "'valid'",
        "'valid'",
        "\"VOXEL=(%.03d,%.03d,%.03d)   TIME=%.03d   RSQ=%.02f  THETA=%.02f   RHO=%.02d   SIGMA=%.02f   BETA=%.08f   HRF=%.02f\""
    ],
    "variables": [
        "dims",
        "dims",
        "estimates",
        "estimates",
        "estimates",
        "aff",
        "hdr",
        "nifti_estimates",
        "srf",
        "response",
        "response_pad",
        "response_pad",
        "t",
        "center",
        "sustained_1vol",
        "sustained_1vol_norm",
        "transient_1vol",
        "transient_1vol_norm",
        "sustained_response",
        "sustained_response",
        "sustained_response",
        "transient_response",
        "transient_response",
        "transient_response",
        "sustained_ts",
        "transient_ts",
        "sustained_pct",
        "transient_pct",
        "hrf",
        "sustained_model",
        "transient_model",
        "model",
        "data",
        "grids",
        "bounds",
        "tr_length",
        "voxel_index",
        "auto_fit",
        "verbose",
        "fit",
        "grids",
        "bounds",
        "tr_length",
        "voxel_index",
        "auto_fit",
        "verbose",
        "start",
        "finish",
        "rf",
        "txt"
    ],
    "comments": [
        "!/usr/bin/python",
        "load the gridParent",
        "initialize the statmaps",
        "extract the prf model estimates from the results queue output",
        "get header information from the gridParent and update for the prf volume",
        "recast as nifti",
        "create Gaussian",
        "normalize it",
        "extract the timeseries",
        "set the coordinate",
        "set the center of the responses",
        "create sustain response for 1 TR",
        "create transient response for 1 TR",
        "create sustained response for whole time-series",
        "create transient response for whole time-series",
        "take the mean of each TR",
        "convert to percent signal change",
        "convolve with hrf",
        "scale it",
        "unpackage the arguments",
        "fit the data"
    ],
    "docstrings": [
        "\"\"\" Classes and functions for fitting Gaussian population encoding models \"\"\"",
        "\"\"\"\n    Recasts the output of the prf estimation into two nifti_gz volumes.\n    \n    Takes `output`, a list of multiprocessing.Queue objects containing the\n    output of the prf estimation for each voxel.  The prf estimates are\n    expressed in both polar and Cartesian coordinates.  If the default value\n    for the `write` parameter is set to False, then the function returns the\n    arrays without writing the nifti files to disk.  Otherwise, if `write` is\n    True, then the two nifti files are written to disk.\n    \n    Each voxel contains the following metrics: \n    \n        0 x / polar angle\n        1 y / eccentricity\n        2 sigma\n        3 HRF delay\n        4 RSS error of the model fit\n        5 correlation of the model fit\n        \n    Parameters\n    ----------\n    output : list\n        A list of PopulationFit objects.\n    grid_parent : nibabel object\n        A nibabel object to use as the geometric basis for the statmap.  \n        The grid_parent (x,y,z) dim and pixdim will be used.\n        \n    Returns\n    ------ \n    cartes_filename : string\n        The absolute path of the recasted prf estimation output in Cartesian\n        coordinates. \n    plar_filename : string\n        The absolute path of the recasted prf estimation output in polar\n        coordinates. \n        \n    \"\"\"",
        "\"\"\"\n    The objective function for GaussianFi class.\n    \n    Parameters\n    ----------\n    x : float\n        The model estimate along the horizontal dimensions of the display.\n\n    y : float\n        The model estimate along the vertical dimensions of the display.\n\n    sigma : float\n        The model estimate of the dispersion across the the display.\n    \n    hrf_delay : float\n        The model estimate of the relative delay of the HRF.  The canonical\n        HRF is assumed to be 5 s post-stimulus [1]_.\n    \n    beta : float\n        The model estimate of the amplitude of the BOLD signal.\n    \n    tr_length : float\n        The length of the repetition time in seconds.\n    \n    \n    Returns\n    -------\n    \n    model : ndarray\n    The model prediction time-series.\n    \n    \n    References\n    ----------\n    \n    .. [1] Glover, GH. (1999). Deconvolution of impulse response in \n    event-related BOLD fMRI. NeuroImage 9: 416-429.\n    \n    \"\"\"",
        "\"\"\"\n    This is a convenience function for parallelizing the fitting\n    procedure.  Each call is handed a tuple or list containing\n    all the necessary inputs for instantiaing a `GaussianFit`\n    class object and estimating the model parameters.\n    \n    \n    Paramaters\n    ----------\n    args : list/tuple\n        A list or tuple containing all the necessary inputs for fitting\n        the Gaussian pRF model.\n    \n    Returns\n    -------\n    \n    fit : `GaussianFit` class object\n        A fit object that contains all the inputs and outputs of the \n        Gaussian pRF model estimation for a single voxel.\n    \n    \"\"\"",
        "\"\"\"\n    A Gaussian population receptive field model class\n    \n    \"\"\"",
        "\"\"\"\n        A Gaussian population receptive field model [1]_.\n        \n        Paramaters\n        ----------\n        \n        stimulus : `VisualStimulus` class object\n            A class instantiation of the `VisualStimulus` class\n            containing a representation of the visual stimulus.\n        \n        \n        References\n        ----------\n        \n        .. [1] Dumoulin SO, Wandell BA. (2008) Population receptive field \n        estimates in human visual cortex. NeuroImage 39:647-660\n        \n        \"\"\"",
        "\"\"\"\n    A Gaussian population receptive field fit class\n    \n    \"\"\"",
        "\"\"\"\n        A Gaussian population receptive field model [1]_.\n\n        Paramaters\n        ----------\n        \n        data : ndarray\n            An array containing the measured BOLD signal.\n        \n        model : `GaussianModel` class instance containing the representation\n            of the visual stimulus.\n        \n        search_bounds : tuple\n            A tuple indicating the search space for the brute-force grid-search.\n            The tuple contains pairs of upper and lower bounds for exploring a\n            given dimension.  For example `fit_bounds=((-10,10),(0,5),)` will\n            search the first dimension from -10 to 10 and the second from 0 to 5.\n            These values cannot be None. \n            \n            For more information, see `scipy.optimize.brute`.\n        \n        fit_bounds : tuple\n            A tuple containing the upper and lower bounds for each parameter\n            in `parameters`.  If a parameter is not bounded, simply use\n            `None`.  For example, `fit_bounds=((0,None),(-10,10),)` would \n            bound the first parameter to be any positive number while the\n            second parameter would be bounded between -10 and 10.\n        \n        tr_length : float\n            The length of the repetition time in seconds.\n        \n        voxel_index : tuple\n            A tuple containing the index of the voxel being modeled. The \n            fitting procedure does not require a voxel index, but \n            collating the results across many voxels will does require voxel\n            indices. With voxel indices, the brain volume can be reconstructed \n            using the newly computed model estimates.\n        \n        auto-fit : bool\n            A flag for automatically running the fitting procedures once the \n            `GaussianFit` object is instantiated.\n        \n        verbose : bool\n            A flag for printing some summary information about the model estiamte\n            after the fitting procedures have completed.\n        \n        References\n        ----------\n        \n        .. [1] Dumoulin SO, Wandell BA. (2008) Population receptive field \n        estimates in human visual cortex. NeuroImage 39:647-660\n\n        \"\"\""
    ],
    "functions": [
        "recast_estimation_results",
        "compute_model_ts",
        "parallel_fit",
        "ballpark",
        "estimate",
        "x0",
        "y0",
        "s0",
        "beta0",
        "hrf0",
        "x",
        "y",
        "sigma",
        "beta",
        "hrf_delay",
        "rho",
        "theta",
        "prediction",
        "OLS",
        "coefficient",
        "rsquared",
        "stderr",
        "rss",
        "receptive_field",
        "hemodynamic_response",
        "msg"
    ],
    "classes": [
        "GaussianModel",
        "GaussianFit"
    ]
}