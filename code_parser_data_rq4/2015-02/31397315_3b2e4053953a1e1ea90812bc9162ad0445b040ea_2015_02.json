{
    "identifiers": [
        "UnityEngine",
        "Collections",
        "Collections",
        "Generic",
        "MonoBehaviour",
        "WheelCollider",
        "rigidbody",
        "centerOfMass",
        "Vector3",
        "wheels",
        "Add",
        "backLeftWheel",
        "wheels",
        "Add",
        "backRightWheel",
        "wheels",
        "Add",
        "frontLeftWheel",
        "wheels",
        "Add",
        "frontRightWheel",
        "frontLeftWheel",
        "steerAngle",
        "_steer",
        "frontRightWheel",
        "steerAngle",
        "_steer",
        "backLeftWheel",
        "brakeTorque",
        "_brake",
        "maxBrake",
        "backRightWheel",
        "brakeTorque",
        "_brake",
        "maxBrake",
        "_turnAnglePerFixedUpdate",
        "_steer",
        "_angleVel",
        "frontLeftWheel",
        "steerAngle",
        "frontRightWheel",
        "steerAngle",
        "backLeftWheel",
        "steerAngle",
        "backRightWheel",
        "steerAngle",
        "isControlEnabled",
        "isControlEnabled",
        "isControlNormal",
        "isControlNormal",
        "isControlNormal",
        "backLeftWheel",
        "steerAngle",
        "_steer",
        "backRightWheel",
        "steerAngle",
        "_steer",
        "frontLeftWheel",
        "brakeTorque",
        "_brake",
        "maxBrake",
        "frontRightWheel",
        "brakeTorque",
        "_brake",
        "maxBrake",
        "_speed",
        "_speed",
        "_brake",
        "_brake",
        "_turnAnglePerFixedUpdate",
        "_steer",
        "_angleVel",
        "frontLeftWheel",
        "steerAngle",
        "_steer",
        "frontRightWheel",
        "steerAngle",
        "_steer",
        "backLeftWheel",
        "brakeTorque",
        "_brake",
        "maxBrake",
        "backRightWheel",
        "brakeTorque",
        "_brake",
        "maxBrake",
        "_turnAnglePerFixedUpdate",
        "_steer",
        "_angleVel",
        "isControlEnabled",
        "_steer",
        "Input",
        "GetAxis",
        "maxSteer",
        "_speed",
        "Input",
        "GetAxis",
        "_speed",
        "Mathf",
        "Clamp",
        "Input",
        "GetAxis",
        "_brake",
        "Mathf",
        "Clamp",
        "Input",
        "GetAxis",
        "isControlNormal",
        "NormalizeControls",
        "ReverseControls",
        "rigidbody",
        "velocity",
        "magnitude",
        "Quaternion",
        "AngleAxis",
        "_turnAnglePerFixedUpdate",
        "transform",
        "up",
        "transform",
        "rotation",
        "rigidbody",
        "MoveRotation",
        "q",
        "rigidbody",
        "velocity",
        "magnitude",
        "maxSpeed",
        "rigidbody",
        "AddRelativeForce",
        "Vector3",
        "forward",
        "_speed",
        "Input",
        "GetMouseButtonDown",
        "Input",
        "GetKeyDown",
        "KeyCode",
        "R",
        "Input",
        "GetKey",
        "Input",
        "GetKey",
        "Input",
        "GetKey",
        "Input",
        "GetKey"
    ],
    "literals": [
        "\"Horizontal\"",
        "\"Vertical\"",
        "\"Vertical\"",
        "\"Vertical\"",
        "\"1\"",
        "\"kickflip\"",
        "\"2\"",
        "\"popshuvit\"",
        "\"3\"",
        "\"threeshuv\"",
        "\"4\"",
        "\"varialkickflip\""
    ],
    "variables": [
        "WheelCollider",
        "backLeftWheel",
        "WheelCollider",
        "backRightWheel",
        "WheelCollider",
        "frontLeftWheel",
        "WheelCollider",
        "frontRightWheel",
        "maxSteer",
        "maxSpeed",
        "maxBrake",
        "_steer",
        "_speed",
        "_brake",
        "_turnAnglePerFixedUpdate",
        "_angleVel",
        "wheels",
        "WheelHit",
        "hit",
        "steerAmt",
        "speedAmt",
        "isControlEnabled",
        "isControlNormal",
        "Quaternion",
        "q"
    ],
    "comments": [
        "Controlls the Boards movement.",
        "Forward movement, Turning, and stationary Rotation",
        "Checks if board is grounded so other classes can use this",
        "</summary>",
        "public Joystick moveJoystick;",
        "eventually make all these part of a Player Stats Class",
        "for steering",
        "for stationary rotation",
        "added 5/22/14 for test purposes",
        "Use this for initialization",
        "initialize controlles",
        "//FOR JOYSTICK INPUT\n\t\t_steer = moveJoystick.position.x * steerAmt;\n\t\t_speed = moveJoystick.position.y * speedAmt;\n\t\t_brake = -1 * Mathf.Clamp(moveJoystick.position.y, -1, 0);",
        "",
        "FOR KEYBOARDINPUT",
        "print(rigidbody.velocity);",
        "handle stationary rotation",
        "was .75",
        "for new model",
        "handle movement",
        "&& (!turning))",
        "rigidbody.AddRelativeForce(transform.forward * speed);",
        "left mouse",
        "return false;",
        "KickFlip",
        "public void MovementInput(bool reverseControls,bool controlsDisabled)\n\t{\t\n\n\t\t//FOR JOYSTICK INPUT\n\t\t_steer = moveJoystick.position.x * steerAmt;\n\t\t_speed = moveJoystick.position.y * speedAmt;\n\t\t_brake = -1 * Mathf.Clamp(moveJoystick.position.y, -1, 0);\n\n\t\t//\t\t\n\t\t//FOR KEYBOARDINPUT\n\n\t\tif(!controlsDisabled)\n\t\t{\n\t\t_steer = Input.GetAxis(\"Horizontal\") * maxSteer;\n\n\t\t_speed = Input.GetAxis(\"Vertical\") * 10;\n\t\t\n\t\t\n\t\t_speed = Mathf.Clamp(Input.GetAxis(\"Vertical\"), 0, 1) * 10;\t\t\n\t\t_brake = -1 * Mathf.Clamp(Input.GetAxis(\"Vertical\"), -1, 0)* 1.5f;\n\n\t\t}\n\n\t\t//NOT USED\n\t\t//_speed = Mathf.Clamp(moveJoystick.position.y, 0, 1) * speedAmt;\n\t\t//_brake = -1 * Mathf.Clamp(moveJoystick.position.y, -1, 0)* 1.5f;\t\n\n\t\tif(!reverseControls)\n\t\t{\n\t\t\tfrontLeftWheel.steerAngle = _steer;\n\t\t\tfrontRightWheel.steerAngle = _steer;\n\t\t\tbackLeftWheel.brakeTorque = _brake * maxBrake;\n\t\t\tbackRightWheel.brakeTorque =  _brake * maxBrake;\n\t\t\t\n\t\t\t_turnAnglePerFixedUpdate = _steer * _angleVel;\t\n\t\t}\n\t\t//instead of doing it like this just monitor the velocity and when it has changed signes\n\t\t//reverse the controls\n\t\telse if(reverseControls)\n\t\t{\n\t\t\tbackLeftWheel.steerAngle = _steer;\n\t\t\tbackRightWheel.steerAngle = _steer;\n\t\t\tfrontLeftWheel.brakeTorque = _brake * maxBrake;\n\t\t\tfrontRightWheel.brakeTorque =  _brake * maxBrake;\n\t\t\t_speed = -_speed;\n\t\t\t_brake = -_brake;\n\n\t\t\t_turnAnglePerFixedUpdate = _steer * _angleVel;\t\n\t\t}\n\t}",
        "public bool FinishOllieInput()\n\t{\n\t\tif(Input.GetMouseButtonDown(1))//right mouse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}",
        "Quaternion q = Quaternion.AngleAxis(turnAnglePerFixedUpdate, transform.forward) * transform.rotation;//for old model"
    ],
    "docstrings": [
        "<summary>"
    ],
    "functions": [
        "Start",
        "ResetWheelAngles",
        "DisableControles",
        "EnableControles",
        "setControlsReversed",
        "ReverseControls",
        "NormalizeControls",
        "MovementInput",
        "HandleMovement",
        "OllieInput",
        "TrickInput"
    ],
    "classes": [
        "Controller"
    ]
}