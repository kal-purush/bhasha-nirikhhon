{
    "identifiers": [
        "warnings",
        "django",
        "conf",
        "settings",
        "django",
        "core",
        "exceptions",
        "ObjectDoesNotExist",
        "MultipleObjectsReturned",
        "utils",
        "rc",
        "mcs",
        "name",
        "bases",
        "attrs",
        "__new__",
        "mcs",
        "name",
        "bases",
        "attrs",
        "model",
        "anon",
        "k",
        "m",
        "a",
        "typemapper",
        "iteritems",
        "model",
        "m",
        "anon",
        "a",
        "k",
        "hasattr",
        "new_mcs",
        "already_registered",
        "new_mcs",
        "model",
        "new_mcs",
        "is_anonymous",
        "getattr",
        "settings",
        "warnings",
        "warn",
        "new_mcs",
        "model",
        "new_mcs",
        "model",
        "new_mcs",
        "is_anonymous",
        "new_mcs",
        "is_anonymous",
        "name",
        "handler_tracker",
        "append",
        "new_mcs",
        "new_mcs",
        "HandlerMetaClass",
        "dct",
        "k",
        "dct",
        "get",
        "k",
        "k",
        "dct",
        "keys",
        "hasattr",
        "hasattr",
        "request",
        "model",
        "objects",
        "all",
        "tu",
        "name",
        "int_",
        "n",
        "tu",
        "n",
        "name",
        "int_",
        "kwargs",
        "has_model",
        "NotImplementedError",
        "model",
        "objects",
        "get",
        "kwargs",
        "model",
        "DoesNotExist",
        "request",
        "args",
        "kwargs",
        "has_model",
        "rc",
        "NOT_IMPLEMENTED",
        "model",
        "_meta",
        "pk",
        "name",
        "pkfield",
        "kwargs",
        "queryset",
        "request",
        "get",
        "pk",
        "kwargs",
        "get",
        "pkfield",
        "ObjectDoesNotExist",
        "rc",
        "NOT_FOUND",
        "MultipleObjectsReturned",
        "rc",
        "BAD_REQUEST",
        "queryset",
        "request",
        "args",
        "kwargs",
        "request",
        "args",
        "kwargs",
        "has_model",
        "rc",
        "NOT_IMPLEMENTED",
        "flatten_dict",
        "request",
        "data",
        "queryset",
        "request",
        "get",
        "attrs",
        "rc",
        "DUPLICATE_ENTRY",
        "model",
        "DoesNotExist",
        "model",
        "attrs",
        "inst",
        "save",
        "inst",
        "model",
        "MultipleObjectsReturned",
        "rc",
        "DUPLICATE_ENTRY",
        "request",
        "args",
        "kwargs",
        "has_model",
        "rc",
        "NOT_IMPLEMENTED",
        "model",
        "_meta",
        "pk",
        "name",
        "pkfield",
        "kwargs",
        "rc",
        "BAD_REQUEST",
        "queryset",
        "request",
        "get",
        "pk",
        "kwargs",
        "get",
        "pkfield",
        "ObjectDoesNotExist",
        "rc",
        "NOT_FOUND",
        "MultipleObjectsReturned",
        "rc",
        "BAD_REQUEST",
        "flatten_dict",
        "request",
        "data",
        "k",
        "v",
        "attrs",
        "iteritems",
        "setattr",
        "inst",
        "k",
        "v",
        "inst",
        "save",
        "rc",
        "ALL_OK",
        "request",
        "args",
        "kwargs",
        "has_model",
        "NotImplementedError",
        "queryset",
        "request",
        "get",
        "args",
        "kwargs",
        "inst",
        "rc",
        "DELETED",
        "model",
        "MultipleObjectsReturned",
        "rc",
        "DUPLICATE_ENTRY",
        "model",
        "DoesNotExist",
        "rc",
        "NOT_HERE"
    ],
    "literals": [
        "'model'",
        "'PISTON_IGNORE_DUPE_MODELS'",
        "\"Handler already registered for model %s, \"",
        "\"you may experience inconsistent results.\"",
        "'BaseHandler'",
        "'GET'",
        "'POST'",
        "'PUT'",
        "'DELETE'",
        "'id'",
        "'model'",
        "'queryset'"
    ],
    "variables": [
        "typemapper",
        "handler_tracker",
        "new_mcs",
        "typemapper",
        "new_mcs",
        "typemapper",
        "new_mcs",
        "__metaclass__",
        "allowed_methods",
        "anonymous",
        "is_anonymous",
        "exclude",
        "fields",
        "pkfield",
        "attrs",
        "inst",
        "inst",
        "pkfield",
        "inst",
        "attrs",
        "inst"
    ],
    "comments": [
        "should never happen, since we're using a PK",
        "No pk was specified",
        "should never happen, since we're using a PK"
    ],
    "docstrings": [
        "\"\"\"\nCode imported and optimized from django-piston 0.2.3rc1\n\"\"\"",
        "\"\"\"\n    Metaclass that keeps a registry of class -> handler\n    mappings.\n    \"\"\"",
        "\"\"\"\n    Basehandler that gives you CRUD for free.\n    You are supposed to subclass this for specific\n    functionality.\n\n    All CRUD methods (`read`/`update`/`create`/`delete`)\n    receive a request as the first argument from the\n    resource. Use this for checking `request.user`, etc.\n    \"\"\""
    ],
    "functions": [
        "__new__",
        "already_registered",
        "flatten_dict",
        "has_model",
        "queryset",
        "value_from_tuple",
        "exists",
        "read",
        "create",
        "update"
    ],
    "classes": [
        "HandlerMetaClass",
        "BaseHandler"
    ]
}