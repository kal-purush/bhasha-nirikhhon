{
    "identifiers": [
        "org",
        "kuali",
        "impex",
        "java",
        "io",
        "BufferedWriter",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileWriter",
        "java",
        "sql",
        "Connection",
        "java",
        "sql",
        "ResultSet",
        "java",
        "sql",
        "SQLException",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "TreeMap",
        "args",
        "args",
        "length",
        "err",
        "con",
        "ETLHelper",
        "connectToDatabase",
        "args",
        "fields",
        "DbMetadataToFormat",
        "createFieldInfoFromMetadata",
        "con",
        "args",
        "args",
        "graphString",
        "createExportGraph",
        "con",
        "args",
        "args",
        "fields",
        "con",
        "close",
        "graphString",
        "outFile",
        "args",
        "outFile",
        "write",
        "graphString",
        "close",
        "outFile",
        "getAbsolutePath",
        "con",
        "schema",
        "tableName",
        "fieldInfo",
        "inputFormatDir",
        "outputFormatDir",
        "dataDir",
        "dumpDir",
        "addKfsFields",
        "includeMappingTransformStep",
        "includeDebugDump",
        "schema",
        "tableName",
        "sb",
        "sb",
        "append",
        "sb",
        "append",
        "append",
        "tableName",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "append",
        "tableName",
        "toUpperCase",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "append",
        "inputFormatDir",
        "append",
        "append",
        "tableName",
        "toLowerCase",
        "append",
        "sb",
        "append",
        "append",
        "outputFormatDir",
        "append",
        "append",
        "tableName",
        "toLowerCase",
        "append",
        "addKfsFields",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "append",
        "schema",
        "append",
        "append",
        "tableName",
        "append",
        "append",
        "append",
        "tableName",
        "toUpperCase",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "pks",
        "con",
        "getMetaData",
        "getPrimaryKeys",
        "schema",
        "toUpperCase",
        "tableName",
        "pkMap",
        "pks",
        "next",
        "pkMap",
        "put",
        "pks",
        "getInt",
        "pks",
        "getString",
        "toLowerCase",
        "pks",
        "close",
        "pkMap",
        "isEmpty",
        "field",
        "fieldInfo",
        "pkMap",
        "put",
        "field",
        "getColumnPosition",
        "field",
        "getColumnName",
        "toLowerCase",
        "sb",
        "append",
        "col",
        "pkMap",
        "entrySet",
        "sb",
        "append",
        "col",
        "getValue",
        "col",
        "getKey",
        "equals",
        "pkMap",
        "lastKey",
        "sb",
        "append",
        "sb",
        "append",
        "pks",
        "close",
        "includeMappingTransformStep",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "field",
        "fieldInfo",
        "addKfsFields",
        "field",
        "getColumnName",
        "equalsIgnoreCase",
        "field",
        "getColumnName",
        "equalsIgnoreCase",
        "sb",
        "append",
        "append",
        "field",
        "getColumnName",
        "toLowerCase",
        "append",
        "append",
        "field",
        "getColumnName",
        "toLowerCase",
        "append",
        "addKfsFields",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "field",
        "fieldInfo",
        "addKfsFields",
        "field",
        "getColumnName",
        "equalsIgnoreCase",
        "field",
        "getColumnName",
        "equalsIgnoreCase",
        "field",
        "getCloverFieldType",
        "equals",
        "sb",
        "append",
        "append",
        "field",
        "getColumnName",
        "toLowerCase",
        "append",
        "append",
        "field",
        "getColumnName",
        "toLowerCase",
        "append",
        "append",
        "ETLHelper",
        "COLUMN_DELIMITER",
        "append",
        "append",
        "ETLHelper",
        "COLUMN_DELIMITER_REPLACEMENT",
        "append",
        "sb",
        "append",
        "append",
        "field",
        "getColumnName",
        "toLowerCase",
        "append",
        "append",
        "field",
        "getColumnName",
        "toLowerCase",
        "append",
        "addKfsFields",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "includeDebugDump",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "append",
        "tableName",
        "toLowerCase",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "append",
        "tableName",
        "toLowerCase",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "append",
        "sb",
        "toString"
    ],
    "literals": [
        "\"usage: gengraph <database.cfg file> <table schema> <table name> <graph file name>\"",
        "\"\"",
        "\"\"",
        "\"data\"",
        "\"data\"",
        "\"Wrote to output file: \"",
        "\"Dumping Table Export Graph for: \"",
        "\".\"",
        "\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"",
        "\"<Graph name=\\\"Export \"",
        "\"\\\" revision=\\\"1.0\\\">\\r\\n\"",
        "\"  <Global>\\r\\n\"",
        "\"    <Property fileURL=\\\"workspace.prm\\\" id=\\\"WorkspaceParameters\\\" />\\r\\n\"",
        "\"    <Property id=\\\"WHERE_CLAUSE\\\" name=\\\"\"",
        "\"_WHERE_CLAUSE\\\" value=\\\"\\\" />\\r\\n\"",
        "\"    <!-- points to a properties file that contains the connection parameters for the database -->\\r\\n\"",
        "\"    <Connection dbConfig=\\\"${DATABASE}\\\" id=\\\"SourceDB\\\" type=\\\"JDBC\\\" />\\r\\n\"",
        "\"    <Metadata id=\\\"InputFileFormat\\\" fileURL=\\\"${FORMAT_DIR}\"",
        "\".fmt.xml\\\" />\\r\\n\"",
        "\"    <Metadata id=\\\"OutputFileFormat\\\" fileURL=\\\"${FORMAT_DIR}\"",
        "\".fmt.xml\\\" />\\r\\n\"",
        "\"    <Sequence id=\\\"ObjId\\\" type=\\\"SIMPLE_SEQUENCE\\\" name=\\\"Object ID\\\" fileURL=\\\"${DATA_DIR}/objid.seq\\\" start=\\\"100000000\\\" step=\\\"1\\\" cached=\\\"1000\\\" />\\r\\n\"",
        "\"  </Global>\\r\\n\"",
        "\"  <Phase number=\\\"0\\\">\\r\\n\"",
        "\"    <!-- Performs the extraction of all the data from the database. -->\\r\\n\"",
        "\"    <!-- With the default command below, the fields in the format file must be the same order as the columns in the database. -->\\r\\n\"",
        "\"    <Node dbConnection=\\\"SourceDB\\\" id=\\\"INPUT\\\" type=\\\"DB_INPUT_TABLE\\\">\\r\\n\"",
        "\"      <attr name=\\\"sqlQuery\\\">\\r\\n\"",
        "\"        SELECT * FROM \"",
        "\"\\r\\n\"",
        "\"${\"",
        "\"_WHERE_CLAUSE}\\r\\n\"",
        "\"      </attr>\\r\\n\"",
        "\"    </Node>\\r\\n\"",
        "\"    <Edge fromNode=\\\"INPUT:0\\\" toNode=\\\"SORT:0\\\" id=\\\"SORT_INPUT\\\" metadata=\\\"InputFileFormat\\\" />\\r\\n\"",
        "\"    <!-- sort the results by the primary key -->\\r\\n\"",
        "\"KEY_SEQ\"",
        "\"COLUMN_NAME\"",
        "\"    <Node id=\\\"SORT\\\" type=\\\"EXT_SORT\\\" sortKey=\\\"\"",
        "\"\\\" />\\r\\n\"",
        "\"    <Edge fromNode=\\\"SORT:0\\\" toNode=\\\"TRANSFORM_1:0\\\" id=\\\"SORT_TO_TRANSFORM_1\\\" metadata=\\\"InputFileFormat\\\" />\\r\\n\"",
        "\"    <!-- copy the values from the input records to the output records -->\\r\\n\"",
        "\"    <!-- Where the columns differ between the input and output, this section will need to be adapted -->\\r\\n\"",
        "\"    <Node id=\\\"TRANSFORM_1\\\" type=\\\"REFORMAT\\\">\\r\\n\"",
        "\"      <attr name=\\\"transform\\\"><![CDATA[\\r\\n//#TL\\r\\n\"",
        "\"    function transform() {\\r\\n\"",
        "\"OBJ_ID\"",
        "\"VER_NBR\"",
        "\"        $0.\"",
        "\" := $\"",
        "\";\\r\\n\"",
        "\"        $0.obj_id := sequence(ObjId,string).next;\\r\\n\"",
        "\"        $0.ver_nbr := 1;\\r\\n\"",
        "\"   }\\r\\n\"",
        "\"      ]]></attr>\\r\\n\"",
        "\"    </Node>\\r\\n\"",
        "\"    <Edge fromNode=\\\"TRANSFORM_1:0\\\" toNode=\\\"REPLACE_DELIMS:0\\\" id=\\\"T1_REPLACE_DELIMS\\\" metadata=\\\"OutputFileFormat\\\" />\\r\\n\"",
        "\"    <Edge fromNode=\\\"SORT:0\\\" toNode=\\\"REPLACE_DELIMS:0\\\" id=\\\"SORT_TO_REPLACE_DELIMS\\\" metadata=\\\"OutputFileFormat\\\" />\\r\\n\"",
        "\"    <!-- This node escapes all occurences of the column delimiter character in string columns -->\\r\\n\"",
        "\"    <!-- This section will need to be adapted to match the output record columns. -->\\r\\n\"",
        "\"    <Node id=\\\"REPLACE_DELIMS\\\" type=\\\"REFORMAT\\\">\\r\\n\"",
        "\"      <attr name=\\\"transform\\\"><![CDATA[\\r\\n//#TL\\r\\n\"",
        "\"    function transform() {\\r\\n\"",
        "\"OBJ_ID\"",
        "\"VER_NBR\"",
        "\"string\"",
        "\"        $0.\"",
        "\" := replace(nvl($\"",
        "\",\\\"\\\"),\\\"\\\\\\\\\"",
        "\"\\\", \\\"\"",
        "\"\\\" );\\r\\n\"",
        "\"        $0.\"",
        "\" := $\"",
        "\";\\r\\n\"",
        "\"        $0.obj_id := $obj_id;\\r\\n\"",
        "\"        $0.ver_nbr := $ver_nbr;\\r\\n\"",
        "\"   }\\r\\n\"",
        "\"      ]]></attr>\\r\\n\"",
        "\"    </Node>\\r\\n\"",
        "\"    <Edge fromNode=\\\"REPLACE_DELIMS:0\\\" toNode=\\\"COPY:0\\\" id=\\\"TO_COPY\\\" metadata=\\\"OutputFileFormat\\\" />\\r\\n\"",
        "\"    <!-- The copy node allows the results to be passed to both the debug dump and the main output file. -->\\r\\n\"",
        "\"    <Node id=\\\"COPY\\\" type=\\\"SIMPLE_COPY\\\" />\\r\\n\"",
        "\"    <Edge fromNode=\\\"COPY:0\\\" toNode=\\\"DEBUG_DUMP:0\\\" id=\\\"TO_DEBUG_DUMP\\\" metadata=\\\"OutputFileFormat\\\" />\\r\\n\"",
        "\"    <Node id=\\\"DEBUG_DUMP\\\" type=\\\"TRASH\\\" debugPrint=\\\"${OUTPUT_DUMPS}\\\" debugFilename=\\\"${DUMP_DIR}/\"",
        "\"_dump.txt\\\" />\\r\\n\"",
        "\"    <Edge fromNode=\\\"COPY:1\\\" toNode=\\\"OUTPUT:0\\\" id=\\\"TO_OUTPUT\\\" metadata=\\\"OutputFileFormat\\\" />\\r\\n\"",
        "\"    <Edge fromNode=\\\"REPLACE_DELIMS:0\\\" toNode=\\\"OUTPUT:0\\\" id=\\\"TO_OUTPUT\\\" metadata=\\\"OutputFileFormat\\\" />\\r\\n\"",
        "\"    <Node id=\\\"OUTPUT\\\" type=\\\"DATA_WRITER\\\" fileURL=\\\"${DATA_DIR}/\"",
        "\".txt\\\" outputFieldNames=\\\"true\\\" charset=\\\"UTF-8\\\" />\\r\\n\"",
        "\"  </Phase>\\r\\n\"",
        "\"</Graph>\\r\\n\"",
        "\"  \\r\\n\"",
        "\"  \\r\\n\""
    ],
    "variables": [],
    "comments": [
        "get primary key fields",
        "check if there are any PK fields - if not, use the entire table",
        "loop over fields",
        "loop over fields"
    ],
    "docstrings": [
        "* The Kuali Financial System, a comprehensive financial management system for higher education.\n * \n * Copyright 2005-2014 The Kuali Foundation\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n * \n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>."
    ],
    "functions": [
        "main",
        "createExportGraph"
    ],
    "classes": [
        "CreateExtractGraph"
    ]
}