{
    "identifiers": [
        "ch",
        "epfl",
        "bbp",
        "uima",
        "obo",
        "java",
        "io",
        "BufferedReader",
        "java",
        "io",
        "File",
        "java",
        "io",
        "FileInputStream",
        "java",
        "io",
        "java",
        "io",
        "InputStreamReader",
        "java",
        "io",
        "PrintWriter",
        "java",
        "util",
        "java",
        "util",
        "Collection",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "java",
        "util",
        "org",
        "apache",
        "commons",
        "io",
        "IOUtils",
        "terms",
        "indexByName",
        "isTypeOfIsBuilt",
        "f",
        "fis",
        "f",
        "read",
        "fis",
        "IOUtils",
        "closeQuietly",
        "fis",
        "br",
        "lines",
        "inTerm",
        "line",
        "br",
        "readLine",
        "line",
        "line",
        "matches",
        "inTerm",
        "handleTerm",
        "lines",
        "inTerm",
        "lines",
        "line",
        "equals",
        "inTerm",
        "inTerm",
        "lines",
        "add",
        "line",
        "line",
        "br",
        "readLine",
        "lines",
        "term",
        "lines",
        "terms",
        "put",
        "term",
        "getId",
        "term",
        "indexTerm",
        "term",
        "term",
        "terms",
        "put",
        "term",
        "getId",
        "term",
        "indexTerm",
        "term",
        "isTypeOfIsBuilt",
        "ont",
        "id",
        "ont",
        "terms",
        "keySet",
        "addTerm",
        "ont",
        "terms",
        "get",
        "id",
        "term",
        "names",
        "names",
        "add",
        "term",
        "getName",
        "s",
        "term",
        "getSynonyms",
        "st",
        "s",
        "getType",
        "st",
        "st",
        "matches",
        "names",
        "add",
        "st",
        "termName",
        "names",
        "termIds",
        "indexByName",
        "get",
        "termName",
        "termIds",
        "termIds",
        "indexByName",
        "put",
        "termName",
        "termIds",
        "termIds",
        "add",
        "term",
        "getId",
        "isTypeOfIsBuilt",
        "termId",
        "terms",
        "keySet",
        "term",
        "terms",
        "get",
        "termId",
        "isA",
        "term",
        "getIsA",
        "terms",
        "get",
        "isA",
        "addIsTypeOf",
        "termId",
        "isTypeOfIsBuilt",
        "pw",
        "id",
        "terms",
        "keySet",
        "term",
        "terms",
        "get",
        "id",
        "synSet",
        "synSet",
        "add",
        "term",
        "getName",
        "s",
        "term",
        "getSynonyms",
        "st",
        "s",
        "getType",
        "id",
        "startsWith",
        "st",
        "st",
        "matches",
        "synonym",
        "s",
        "getSyn",
        "synonym",
        "matches",
        "synSet",
        "add",
        "synonym",
        "pw",
        "id",
        "syn",
        "synSet",
        "pw",
        "syn",
        "pw",
        "pw",
        "flush",
        "s",
        "indexByName",
        "get",
        "s",
        "termIds",
        "idsToConsider",
        "idsToConsider",
        "addAll",
        "termIds",
        "resultIds",
        "idsToConsider",
        "isEmpty",
        "id",
        "idsToConsider",
        "pop",
        "resultIds",
        "contains",
        "id",
        "resultIds",
        "add",
        "id",
        "terms",
        "containsKey",
        "id",
        "idsToConsider",
        "addAll",
        "terms",
        "get",
        "id",
        "getIsA",
        "resultIds",
        "termId",
        "terms",
        "containsKey",
        "termId",
        "idsToConsider",
        "idsToConsider",
        "add",
        "termId",
        "resultIds",
        "idsToConsider",
        "isEmpty",
        "id",
        "idsToConsider",
        "pop",
        "resultIds",
        "contains",
        "id",
        "resultIds",
        "add",
        "id",
        "idsToConsider",
        "addAll",
        "terms",
        "get",
        "id",
        "getIsA",
        "resultIds",
        "s",
        "indexByName",
        "containsKey",
        "s",
        "idsToConsider",
        "idsToConsider",
        "addAll",
        "getIdsForTerm",
        "s",
        "resultIds",
        "idsToConsider",
        "isEmpty",
        "id",
        "idsToConsider",
        "pop",
        "resultIds",
        "contains",
        "id",
        "resultIds",
        "add",
        "id",
        "idsToConsider",
        "addAll",
        "terms",
        "get",
        "id",
        "getIsA",
        "resultIds",
        "s",
        "buildIsTypeOf",
        "idsToConsider",
        "idsToConsider",
        "add",
        "s",
        "resultIds",
        "idsToConsider",
        "isEmpty",
        "id",
        "idsToConsider",
        "pop",
        "resultIds",
        "contains",
        "id",
        "resultIds",
        "add",
        "id",
        "terms",
        "containsKey",
        "id",
        "idsToConsider",
        "addAll",
        "terms",
        "get",
        "id",
        "getIsTypeOf",
        "resultIds",
        "s",
        "buildIsTypeOf",
        "indexByName",
        "containsKey",
        "s",
        "idsToConsider",
        "idsToConsider",
        "addAll",
        "getIdsForTerm",
        "s",
        "resultIds",
        "idsToConsider",
        "isEmpty",
        "id",
        "idsToConsider",
        "pop",
        "resultIds",
        "contains",
        "id",
        "resultIds",
        "add",
        "id",
        "idsToConsider",
        "addAll",
        "terms",
        "get",
        "id",
        "getIsTypeOf",
        "resultIds",
        "ids",
        "idsWithParents",
        "getIdsForIdsWithAncestors",
        "ids",
        "queries",
        "id",
        "idsWithParents",
        "queries",
        "put",
        "id",
        "getIdsForIdWithDescendants",
        "id",
        "queries",
        "hypoID",
        "hyperID",
        "terms",
        "containsKey",
        "hypoID",
        "term",
        "terms",
        "get",
        "hypoID",
        "term",
        "getIsA",
        "contains",
        "hyperID",
        "hypoID",
        "hyperID",
        "hypoID",
        "equals",
        "hyperID",
        "getIdsForIdWithAncestors",
        "hypoID",
        "contains",
        "hyperID",
        "id",
        "terms",
        "containsKey",
        "id",
        "terms",
        "get",
        "id",
        "getName",
        "id",
        "terms",
        "containsKey",
        "id",
        "terms",
        "get",
        "id",
        "getDef",
        "terms"
    ],
    "literals": [
        "\"UTF-8\"",
        "\"\\\\[.*\\\\]\"",
        "\"[Term]\"",
        "\".*(InChI|SMILES|FORMULA).*\"",
        "\"PTCO\"",
        "\".*(InChI|SMILES|FORMULA).*\"",
        "\"\\\\S\"",
        "\"[\"",
        "\"]\""
    ],
    "variables": [],
    "comments": [
        "reject ontology terms",
        "consisting of a single",
        "letter as these produce too",
        "many false positives"
    ],
    "docstrings": [
        "* A class to hold and process OBO ontologies, such as ChEBI.\n * \n * @author ptc24",
        "* Read a .obo file\n     * \n     * @param f\n     *            The .obo file to read.\n     * @throws Exception",
        "* Add a single OntologyTerm to the ontology.\n     * \n     * @param term\n     *            The OntologyTerm.",
        "* Merge a whole ontology into the current one.\n     * \n     * @param ont\n     *            The ontology to merge in.",
        "* Writes a file suitable for use as onotology.txt.\n     * \n     * @param pw\n     *            The PrintWriter to write to.",
        "* Look up a term by name (or synonym), and return the IDs.\n     * \n     * @param s\n     *            The term name to look up.\n     * @return The IDs for the name, or null.",
        "* Given a set of IDs, return a set that contains all of the IDs, the\n     * parents of those IDs, the grandparents, etc.\n     * \n     * @param termIds\n     *            The initial \"seed\" IDs.\n     * @return The full set of IDs.",
        "* Given a single ID, return that ID, its parents, grandparents etc.\n     * \n     * @param termId\n     *            The initial \"seed\" ID.\n     * @return The full set of IDs.",
        "* Look up a term by name, and return its ID and the IDs of all of its\n     * ancestors.\n     * \n     * @param s\n     *            The term name to look up.\n     * @return The full set of IDs, empty if the term was not found.",
        "* Given a set of IDs, return a set that contains all of the IDs, the\n     * children of those IDs, the grandchildren, etc.\n     * \n     * @param s\n     *            The initial \"seed\" ID.\n     * @return The full set of IDs.",
        "* Look up a term by name, and return its ID and the IDs of all of its\n     * descendants.\n     * \n     * @param s\n     *            The term name to look up.\n     * @return The full set of IDs, empty if the term was not found.",
        "* Given a set of seed IDs, expand that set of IDs to include all ancestor\n     * IDs, then return a map from each ID in the set to the descendant IDs\n     * (including the ID itself).\n     * \n     * @param ids\n     *            The seed IDs.\n     * @return The mapping.",
        "* Tests whether there is a direct is_a (or has_role) relationship between\n     * two IDs.\n     * \n     * @param hypoID\n     *            The potential hyponym (child term).\n     * @param hyperID\n     *            The potential hypernym (parent term).\n     * @return Whether that direct relationship exists.",
        "* Tests whether there is a direct or indirect is_a (or has_role)\n     * relationship between two IDs.\n     * \n     * @param hypoID\n     *            The potential hyponym (descendant term).\n     * @param hyperID\n     *            The potential hypernym (ancestor term).\n     * @return Whether that direct relationship exists.",
        "* Looks up the name for an ontology ID.\n     * \n     * @param id\n     *            The ontology ID.\n     * @return The name, or null.",
        "* Looks up the definition for an ontology ID.\n     * \n     * @param id\n     *            The ontology ID.\n     * @return The definition, or null.",
        "* Outputs the term dictionary.\n     * \n     * @return The term dictionary."
    ],
    "functions": [
        "read",
        "read",
        "handleTerm",
        "addTerm",
        "addOntology",
        "indexTerm",
        "buildIsTypeOf",
        "writeOntTxt",
        "getIdsForTerm",
        "getIdsForIdsWithAncestors",
        "getIdsForIdWithAncestors",
        "getIdsForTermWithAncestors",
        "getIdsForIdWithDescendants",
        "getIdsForTermWithDescendants",
        "queriesForIds",
        "directIsA",
        "isA",
        "getNameForID",
        "getDefinitionForID",
        "getTerms"
    ],
    "classes": [
        "OBOOntology"
    ]
}