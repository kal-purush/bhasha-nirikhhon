{
    "identifiers": [
        "UnityEngine",
        "Collections",
        "Net",
        "Net",
        "Sockets",
        "Text",
        "IO",
        "MonoBehaviour",
        "InitializeListener",
        "tcpListenerLeft",
        "CreateListener",
        "PORT",
        "tcpListenerLeft",
        "Start",
        "tcpListenerRight",
        "CreateListener",
        "PORT",
        "tcpListenerRight",
        "Start",
        "StartToListen",
        "port",
        "TcpListener",
        "IPAddress",
        "Parse",
        "LocalIPAddress",
        "port",
        "PORT",
        "listen",
        "UnityThreadHelper",
        "CreateThread",
        "tcpListenerLeft",
        "AcceptTcpClient",
        "GetStream",
        "Debug",
        "Log",
        "StreamReader",
        "streamLeft",
        "left",
        "HandOversStreamReader",
        "UnityThreadHelper",
        "CreateThread",
        "tcpListenerRight",
        "AcceptTcpClient",
        "GetStream",
        "Debug",
        "Log",
        "StreamReader",
        "streamRight",
        "right",
        "HandOversStreamReader",
        "left",
        "right",
        "right",
        "left",
        "InitializeListener",
        "host",
        "Dns",
        "GetHostEntry",
        "Dns",
        "GetHostName",
        "IPAddress",
        "ip",
        "host",
        "AddressList",
        "ip",
        "AddressFamily",
        "AddressFamily",
        "InterNetwork",
        "localIP",
        "ip",
        "ToString",
        "localIP"
    ],
    "literals": [
        "\"Left Connection accepted.\"",
        "\"Right Connection accepted.\"",
        "\"\""
    ],
    "variables": [
        "TcpListener",
        "tcpListenerLeft",
        "TcpListener",
        "tcpListenerRight",
        "left",
        "right",
        "PORT",
        "TcpListener",
        "listen",
        "NetworkStream",
        "streamLeft",
        "StreamReader",
        "streamReaderLeft",
        "NetworkStream",
        "streamRight",
        "StreamReader",
        "streamReaderRight",
        "IPHostEntry",
        "host",
        "localIP"
    ],
    "comments": [
        "Debug.Log (LocalIPAddress());",
        "Hand over StreamReader to Player",
        "int angleLeft;",
        "int distanceLeft;",
        "int angleRight;",
        "while (true) {\n\t\t\t\t\n\t\t\t\tString data = streamReaderLeft.ReadLine();\n\t\t\t\tString[] tokens = data.Split(' ');\n\t\t\t\t\n\t\t\t\tif (tokens.Length == 2) {\n\t\t\t\t\tif (tokens[0] != \"\") {\n\t\t\t\t\t\tangleLeft = int.Parse(tokens[0].Substring(1));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (tokens[1] != \"\") {\n\t\t\t\t\t\tdistanceLeft = int.Parse(tokens[1].Substring(1));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else if (tokens.Length == 1) {\n\t\t\t\t\t\n\t\t\t\t\tif (tokens[0] != \"\") {\n\t\t\t\t\t\tif (tokens[0].Substring(0,1).Equals(\"0\")) {\n\t\t\t\t\t\t\tangleLeft = int.Parse(tokens[0].Substring(1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tokens[0].Substring(0,1).Equals(\"1\")) {\n\t\t\t\t\t\t\tdistanceLeft = int.Parse(tokens[0].Substring(1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};*",
        "while (true) {\n\t\t\t\t\n\t\t\t\tString data = streamReaderRight.ReadLine();\n\t\t\t\t\n\t\t\t\tif (data.Substring(0,1).Equals(\"a\")) {\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tangleRight = int.Parse(data);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t*",
        "gameObject.transform.rotation = Quaternion.AngleAxis(angleRight, Vector3.up);\n\t\t\n\t\tVector3 newPosition = gameObject.transform.position;\n\t\t\n\t\tnewPosition.x += (float)(Math.Cos (DegreeToRadian (angleLeft)) * distanceLeft * 0.001);\n\t\tnewPosition.z += (float)(Math.Sin (DegreeToRadian (angleLeft)) * distanceLeft * 0.001);\n\t\t\n\t\tgameObject.transform.position = newPosition;*",
        "private double DegreeToRadian(int angle) {\n\t\treturn (270.0 - (Math.PI * (double)angle / 180.0));\n\t}*",
        "string responseString = \"You have successfully connected to me\";",
        "Forms and sends a response string to the connected client.",
        "Byte[] sendBytes = Encoding.ASCII.GetBytes(responseString);",
        "stream.Write(sendBytes, 0, sendBytes.Length);",
        "Debug.Log(\"Message Sent /> : \" + responseString);"
    ],
    "docstrings": [],
    "functions": [
        "Start",
        "InitializeListener",
        "TcpListener",
        "CreateListener",
        "StartToListen",
        "HandOversStreamReader",
        "LocalIPAddress"
    ],
    "classes": [
        "PlayerNetCommunicate"
    ]
}