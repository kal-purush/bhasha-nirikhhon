{
    "identifiers": [
        "asyncio",
        "logging",
        "aiodocker",
        "aioredlock",
        "Aioredlock",
        "LockError",
        "Sentinel",
        "name",
        "aiodocker",
        "Docker",
        "docker",
        "containers",
        "get",
        "name",
        "name",
        "network",
        "get_container",
        "name",
        "container",
        "network",
        "get_container_ip",
        "Aioredlock",
        "Sentinel",
        "sentinel_ip",
        "Sentinel",
        "sentinel_ip",
        "Sentinel",
        "sentinel_ip",
        "Sentinel",
        "sentinel_ip",
        "lock_manager",
        "is_locked",
        "lock_manager",
        "valid",
        "lock_manager",
        "is_locked",
        "get_container",
        "container",
        "pause",
        "asyncio",
        "sleep",
        "lock_manager",
        "internal_lock_timeout",
        "lock_manager",
        "is_locked",
        "extend",
        "container",
        "unpause",
        "valid",
        "LockError",
        "valid",
        "lock_manager",
        "is_locked",
        "lock_manager",
        "destroy",
        "logging",
        "basicConfig",
        "level",
        "logging",
        "DEBUG",
        "asyncio",
        "get_event_loop",
        "loop",
        "run_until_complete",
        "lock_context"
    ],
    "literals": [
        "'NetworkSettings'",
        "'Networks'",
        "'aioredlock_backend'",
        "'IPAddress'",
        "'aioredlock_sentinel_1'",
        "f'redis://{sentinel_ip}:26379/0?master=leader'",
        "f'redis://{sentinel_ip}:26379/1?master=leader'",
        "f'redis://{sentinel_ip}:26379/2?master=leader'",
        "f'redis://{sentinel_ip}:26379/3?master=leader'",
        "\"resource\"",
        "'The resource is already acquired'",
        "\"resource\"",
        "\"resource\"",
        "'aioredlock_leader_1'",
        "'\"resource\" key might be not empty. Please call '",
        "'\"del resource\" in redis-cli'",
        "\"resource\"",
        "\"__main__\""
    ],
    "variables": [
        "docker",
        "container",
        "sentinel_ip",
        "lock_manager",
        "container",
        "loop"
    ],
    "comments": [
        "if you dont set your lock's lock_timeout, its lifetime will be automatically extended",
        "pause leader to simulate a failing node and cause a failover",
        "Do your stuff having the lock",
        "lock manager will extend the lock automatically",
        "or you can extend your lock's lifetime manually",
        "Do more stuff having the lock and if you spend much more time than you expected, the lock might be freed",
        "lock will be released by context manager"
    ],
    "docstrings": [
        "\"\"\"\nThis example script demonstrates how to use ``aioredlock`` with Sentinels_.\nSentinels are useful when you want to make sure that you are always hitting\nthe master redis instance in your cluster, even after failover.\n\nIn order to run this script, make sure to start the docker-compose setup.\n\n.. code-block:: bash\n\n    docker-compose up -d\n    docker-compose logs -f sentinel  # to follow the logs for the sentinel to see the failover\n\nAnd then in another terminal run the following command to execute this script.\n\n.. code-block:: bash\n\n    python -m examples.sentinel\n\n.. note::\n\n    If you are running on a Mac, you will need to enable TunTap_ so that the\n    docker container ip addresses on the bridge are accessible from the mac\n    host.\n\n.. note::\n\n    This example script requires that the ``example`` extras be installed.\n\n    .. code-block:: bash\n\n        pip install -e .[examples]\n\n.. _Sentinels: https://redis.io/topics/sentinel\n.. _TunTap: https://github.com/AlmirKadric-Published/docker-tuntap-osx\n\"\"\""
    ],
    "functions": [
        "get_container",
        "get_container_ip",
        "lock_context"
    ],
    "classes": []
}