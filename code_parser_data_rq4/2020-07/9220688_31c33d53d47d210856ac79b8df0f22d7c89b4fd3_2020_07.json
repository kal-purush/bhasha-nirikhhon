{
    "identifiers": [
        "docopt",
        "docopt",
        "numpy",
        "np",
        "pymor",
        "basic",
        "pymor",
        "core",
        "config",
        "config",
        "DIM",
        "N",
        "ORDER",
        "dolfin",
        "df",
        "DIM",
        "df",
        "UnitSquareMesh",
        "N",
        "N",
        "DIM",
        "df",
        "UnitCubeMesh",
        "N",
        "N",
        "N",
        "NotImplementedError",
        "df",
        "FunctionSpace",
        "mesh",
        "ORDER",
        "df",
        "Constant",
        "df",
        "Constant",
        "df",
        "SubDomain",
        "x",
        "on_boundary",
        "abs",
        "x",
        "df",
        "DOLFIN_EPS",
        "on_boundary",
        "DirichletBoundary",
        "df",
        "DirichletBC",
        "V",
        "g",
        "db",
        "df",
        "V",
        "df",
        "TestFunction",
        "V",
        "df",
        "Expression",
        "degree",
        "df",
        "inner",
        "c",
        "u",
        "df",
        "grad",
        "u",
        "df",
        "grad",
        "v",
        "df",
        "dx",
        "f",
        "v",
        "df",
        "dx",
        "df",
        "solve",
        "F",
        "u",
        "bc",
        "solver_parameters",
        "pymor",
        "bindings",
        "fenics",
        "FenicsVectorSpace",
        "FenicsOperator",
        "FenicsVisualizer",
        "FenicsVectorSpace",
        "V",
        "FenicsOperator",
        "F",
        "space",
        "space",
        "u",
        "bc",
        "parameter_setter",
        "mu",
        "c",
        "assign",
        "mu",
        "item",
        "parameters",
        "solver_options",
        "VectorOperator",
        "op",
        "zeros",
        "StationaryModel",
        "op",
        "rhs",
        "visualizer",
        "FenicsVisualizer",
        "space",
        "fom",
        "args",
        "getLogger",
        "config",
        "HAVE_TORCH",
        "logger",
        "error",
        "args",
        "args",
        "args",
        "args",
        "args",
        "create_fom",
        "DIM",
        "N",
        "ORDER",
        "fom",
        "parameters",
        "space",
        "pymor",
        "reductors",
        "neural_network",
        "NeuralNetworkReductor",
        "parameter_space",
        "sample_uniformly",
        "TRAINING_SAMPLES",
        "parameter_space",
        "sample_randomly",
        "VALIDATION_SAMPLES",
        "NeuralNetworkReductor",
        "fom",
        "training_set",
        "validation_set",
        "basis_size",
        "basis_size",
        "hidden_layers",
        "restarts",
        "reductor",
        "reduce",
        "parameter_space",
        "sample_randomly",
        "time",
        "len",
        "test_set",
        "fom",
        "solution_space",
        "empty",
        "reserve",
        "len",
        "test_set",
        "fom",
        "solution_space",
        "empty",
        "reserve",
        "len",
        "test_set",
        "mu",
        "test_set",
        "time",
        "time",
        "U",
        "append",
        "fom",
        "solve",
        "mu",
        "time",
        "time",
        "tic",
        "time",
        "time",
        "U_red",
        "append",
        "reductor",
        "reconstruct",
        "rom",
        "solve",
        "mu",
        "time",
        "time",
        "tic",
        "speedups",
        "append",
        "time_fom",
        "time_red",
        "U",
        "U_red",
        "l2_norm",
        "U",
        "U_red",
        "l2_norm",
        "U",
        "l2_norm",
        "args",
        "fom",
        "visualize",
        "U",
        "U_red",
        "legend",
        "np",
        "average",
        "absolute_errors",
        "np",
        "average",
        "relative_errors",
        "np",
        "median",
        "speedups",
        "docopt",
        "__doc__",
        "neural_networks_demo",
        "args"
    ],
    "literals": [
        "\"CG\"",
        "\"x[0]*sin(x[1])\"",
        "\"newton_solver\"",
        "\"relative_tolerance\"",
        "'c'",
        "'c'",
        "'inverse'",
        "'type'",
        "'newton'",
        "'rtol'",
        "'pymordemos.neural_networks'",
        "'PyTorch is not installed! Stopping.'",
        "'TRAINING_SAMPLES'",
        "'VALIDATION_SAMPLES'",
        "'DIM'",
        "'N'",
        "'ORDER'",
        "'[(N+P)*3, (N+P)*3, (N+P)*3]'",
        "f'Performing test on set of size {len(test_set)} ...'",
        "'--vis'",
        "'Full solution'",
        "'Reduced solution'",
        "f'Average absolute error: {np.average(absolute_errors)}'",
        "f'Average relative error: {np.average(relative_errors)}'",
        "f'Median of speedup: {np.median(speedups)}'",
        "'__main__'"
    ],
    "variables": [
        "mesh",
        "mesh",
        "V",
        "g",
        "c",
        "db",
        "bc",
        "u",
        "v",
        "f",
        "F",
        "space",
        "op",
        "rhs",
        "fom",
        "logger",
        "TRAINING_SAMPLES",
        "VALIDATION_SAMPLES",
        "DIM",
        "N",
        "ORDER",
        "fom",
        "parameter_space",
        "training_set",
        "validation_set",
        "basis_size",
        "reductor",
        "rom",
        "test_set",
        "speedups",
        "U",
        "U_red",
        "tic",
        "time_fom",
        "tic",
        "time_red",
        "absolute_errors",
        "relative_errors",
        "args"
    ],
    "comments": [
        "This file is part of the pyMOR project (http://www.pymor.org).",
        "Copyright 2013-2020 pyMOR developers and contributors. All rights reserved.",
        "License: BSD 2-Clause License (http://opensource.org/licenses/BSD-2-Clause)"
    ],
    "docstrings": [
        "\"\"\"Example script for the usage of neural networks in model order reduction (approach by Hesthaven and Ubbiali)\n\nUsage:\n    neural_networks.py [--vis] DIM N ORDER TRAINING_SAMPLES VALIDATION_SAMPLES\n\nArguments:\n    DIM                  Spatial dimension of the problem.\n    N                    Number of mesh intervals per spatial dimension.\n    ORDER                Finite element order.\n    TRAINING_SAMPLES     Number of samples used for training the neural network.\n    VALIDATION_SAMPLES   Number of samples used for validation during the training phase.\n\nOptions:\n    -h, --help   Show this message.\n    --vis        Visualize full order solution and reduced solution for a test set.\n\"\"\""
    ],
    "functions": [
        "create_fom",
        "inside",
        "neural_networks_demo"
    ],
    "classes": [
        "DirichletBoundary"
    ]
}