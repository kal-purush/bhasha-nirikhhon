{
    "identifiers": [
        "piepline",
        "monitoring",
        "monotors",
        "AbstractMonitor",
        "piepline",
        "events_container",
        "piepline",
        "train",
        "Trainer",
        "trainer",
        "Trainer",
        "events_container",
        "trainer",
        "add_callback",
        "t",
        "set_epoch_num",
        "t",
        "cur_epoch_id",
        "stage",
        "metrics_processor",
        "events_container",
        "stage",
        "add_callback",
        "t",
        "set_epoch_num",
        "t",
        "cur_epoch_id",
        "epoch_num",
        "m",
        "monitors",
        "m",
        "set_epoch_num",
        "epoch_num",
        "monitor",
        "AbstractMonitor",
        "monitors",
        "append",
        "monitor",
        "metrics",
        "m",
        "monitors",
        "m",
        "update_metrics",
        "metrics",
        "losses",
        "m",
        "monitors",
        "m",
        "update_losses",
        "losses",
        "text",
        "m",
        "monitors",
        "m",
        "register_event",
        "text",
        "exc_type",
        "exc_val",
        "exc_tb",
        "m",
        "monitors",
        "m",
        "__exit__",
        "exc_type",
        "exc_val",
        "exc_tb"
    ],
    "literals": [
        "'MonitorHub'",
        "'EPOCH_START_EVENT'",
        "'MonitorHub'",
        "'EPOCH_START_EVENT'",
        "'MonitorHub'"
    ],
    "variables": [
        "__all__",
        "monitors"
    ],
    "comments": [
        "code from stages `connect2monitor_hub`",
        "events_container.event(self, 'EPOCH_END').add_callback(",
        "lambda stage: monitor_hub.update_metrics(metrics_processor.get_metrics()))",
        "events_container.event(self, 'EPOCH_END').add_callback(lambda stage: metrics_processor.reset_metrics())"
    ],
    "docstrings": [
        "\"\"\"\n    Aggregator of monitors. This class collect monitors and provide unified interface to it's\n    \"\"\"",
        "\"\"\"\n        Set current epoch num\n\n        :param epoch_num: num of current epoch\n        \"\"\"",
        "\"\"\"\n        Connect monitor to hub\n\n        :param monitor: :class:`AbstractMonitor` object\n        :return:\n        \"\"\"",
        "\"\"\"\n        Update metrics in all monitors\n\n        :param metrics: metrics dict with keys 'metrics' and 'groups'\n        \"\"\"",
        "\"\"\"\n        Update monitor\n\n        :param losses: losses values with keys 'train' and 'validation'\n        \"\"\""
    ],
    "functions": [
        "subscribe2stage",
        "set_epoch_num",
        "add_monitor",
        "update_metrics",
        "update_losses",
        "register_event",
        "__enter__",
        "__exit__"
    ],
    "classes": [
        "MonitorHub"
    ]
}