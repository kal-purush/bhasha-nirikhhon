{
    "identifiers": [
        "LitElement",
        "css",
        "html",
        "customElement",
        "property",
        "sharedStyles",
        "customElement",
        "LitElement",
        "property",
        "property",
        "property",
        "property",
        "property",
        "property",
        "sharedStyles",
        "css",
        "html",
        "html",
        "html",
        "e",
        "parseFloat",
        "e",
        "e",
        "e",
        "parseFloat",
        "e",
        "e",
        "e",
        "e",
        "e",
        "name",
        "oldval",
        "newval",
        "name",
        "oldval",
        "newval",
        "Event",
        "name",
        "name",
        "name",
        "name",
        "val",
        "val",
        "val",
        "val",
        "val",
        "val",
        "thumb",
        "position",
        "position",
        "thumb",
        "position",
        "e",
        "trackWidth",
        "e",
        "e",
        "e",
        "getDeltaX",
        "e",
        "e",
        "e",
        "e",
        "e",
        "eventX",
        "originX",
        "delta",
        "stepWidth",
        "delta",
        "stepWidth",
        "delta",
        "delta",
        "delta",
        "absoluteDelta",
        "stepWidth",
        "delta",
        "steps",
        "steps",
        "newVal",
        "newVal",
        "newVal",
        "originX",
        "eventX",
        "removeListeners",
        "getDeltaX",
        "getDeltaX",
        "removeListeners",
        "removeListeners",
        "getDeltaX",
        "getDeltaX",
        "removeListeners",
        "removeListeners"
    ],
    "literals": [
        "'lit-element'",
        "'../../shared-styles'",
        "'kor-slider'",
        ".track {\n          width: 100%;\n          height: 2px;\n          margin: 16px 0;\n          background-color: rgba(var(--neutral-1), 0.2);\n          position: relative;\n        }\n        .thumb {\n          padding: 10px;\n          position: absolute;\n          top: -15px;\n          margin-left: -16px;\n          cursor: pointer;\n        }\n        .thumb > div {\n          height: 12px;\n          width: 12px;\n          border-radius: 50%;\n          background-color: rgb(var(--accent-1));\n          transition: 0.1s all ease-in-out;\n        }\n        .thumb:hover > div {\n          background-color: rgb(var(--accent-1b));\n        }\n        /* input */\n        input {\n          background: none;\n          border: none;\n          padding: 0px;\n          outline: none;\n          -webkit-appearance: none;\n          font: var(--body-1);\n          color: var(--text-1);\n          background-color: rgba(var(--neutral-1), 0.05);\n          box-sizing: border-box;\n          padding: 0 4px;\n          width: 40px;\n        }\n        input[type='number']::-webkit-inner-spin-button,\n        input[type='number']::-webkit-outer-spin-button {\n          -webkit-appearance: none;\n        }\n        .label {\n          display: flex;\n        }\n        .label kor-text {\n          flex: 1;\n        }\n        .label > * + * {\n          margin-left: 8px;\n        }",
        "${this.label\n        ? html`\n            <div class=\"label\">\n              <kor-text>${this.label}</kor-text>\n              ${this.input\n                ? html`\n                    <input\n                      type=\"number\"\n                      .value=\"${<any>this.value}\"\n                      @blur=\"${(e) =>\n                        this.handleInput(parseFloat(e.target.value))}\"\n                      @keypress=\"${(e) =>\n                        e.key === 'Enter'\n                          ? this.handleInput(parseFloat(e.target.value))\n                          : ''}\"\n                    />\n                  `\n                : ''}\n            </div>\n          `\n        : ''}\n      <div class=\"track\">\n        <div\n          class=\"thumb\"\n          @mousedown=\"${(e) => this.handleThumbDrag(e)}\"\n          @touchstart=\"${(e) => this.handleThumbDrag(e)}\"\n        >\n          <div></div>\n        </div>\n      </div>",
        "<div class=\"label\">\n              <kor-text>${this.label}</kor-text>\n              ${this.input\n                ? html`\n                    <input\n                      type=\"number\"\n                      .value=\"${<any>this.value}\"\n                      @blur=\"${(e) =>\n                        this.handleInput(parseFloat(e.target.value))}\"\n                      @keypress=\"${(e) =>\n                        e.key === 'Enter'\n                          ? this.handleInput(parseFloat(e.target.value))\n                          : ''}\"\n                    />\n                  `\n                : ''}\n            </div>",
        "<input\n                      type=\"number\"\n                      .value=\"${<any>this.value}\"\n                      @blur=\"${(e) =>\n                        this.handleInput(parseFloat(e.target.value))}\"\n                      @keypress=\"${(e) =>\n                        e.key === 'Enter'\n                          ? this.handleInput(parseFloat(e.target.value))\n                          : ''}\"\n                    />",
        "'Enter'",
        "''",
        "''",
        "''",
        "${name}-changed",
        "'value'",
        "'min'",
        "'max'",
        "'.thumb'",
        "${position}%",
        "'.track'",
        "'mousedown'",
        "'mousemove'",
        "'mousemove'",
        "'touchmove'",
        "'mouseup'",
        "'touchend'",
        "'mousemove'",
        "'touchmove'",
        "'mouseup'",
        "'touchend'"
    ],
    "variables": [
        "thumb",
        "position",
        "trackWidth",
        "stepWidth",
        "originX",
        "getDeltaX",
        "eventX",
        "delta",
        "absoluteDelta",
        "steps",
        "newVal",
        "removeListeners"
    ],
    "comments": [
        "check if thumb exists and position is within range",
        "if the mouse moved more than a step, update value and reset origin coordinate",
        "calculate and update value",
        "remove added listeners on mouse release"
    ],
    "docstrings": [
        "* @prop {String} label - If set, defines the text label shown on top.\n * @prop {Number} value - Defines the current value. Must be a value between min and max.\n * @prop {Number} min - Defines the minimum value accepted.\n * @prop {Number} max - Defines the maximum value accepted.\n * @prop {Number} step - Defines the steps to skip when the user drags the thumb.\n * @prop {Boolean} input - If set to true, allows the user to input a value using the keyboard."
    ],
    "functions": [
        "styles",
        "render",
        "attributeChangedCallback",
        "firstUpdated",
        "handleInput",
        "handleThumbPosition",
        "handleThumbDrag"
    ],
    "classes": [
        "korSlider"
    ]
}