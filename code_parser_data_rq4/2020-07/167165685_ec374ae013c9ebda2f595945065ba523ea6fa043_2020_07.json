{
    "identifiers": [
        "FilterCondition",
        "FilterSimpleCondition",
        "IfThenElseStep",
        "isFilterComboAnd",
        "isFilterComboOr",
        "value",
        "value",
        "interpolatedMatch",
        "interpolatedMatch",
        "interpolatedValue",
        "interpolatedValue",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "value",
        "_valueToHumanString",
        "_valueToHumanString",
        "value",
        "column",
        "_valueToHumanString",
        "value",
        "column",
        "_valueOrArrayToString",
        "value",
        "column",
        "column",
        "column",
        "value",
        "EMPTY_CONDITION_SIGN",
        "CONDITION_HUMAN_STRINGS",
        "CONDITION_HUMAN_STRINGS",
        "column",
        "_valueToHumanString",
        "value",
        "isOnTopLevel",
        "v",
        "isOnTopLevel",
        "v",
        "v",
        "condition",
        "isOnTopLevel",
        "isFilterComboOr",
        "condition",
        "_parenthesesUnlessTopLevel",
        "isOnTopLevel",
        "condition",
        "c",
        "_conditionToHumanString",
        "c",
        "SEPARATOR_HUMAN_STRINGS",
        "isFilterComboAnd",
        "condition",
        "_parenthesesUnlessTopLevel",
        "isOnTopLevel",
        "condition",
        "c",
        "_conditionToHumanString",
        "c",
        "SEPARATOR_HUMAN_STRINGS",
        "_conditionUnitToHumanString",
        "condition",
        "name",
        "condition",
        "name",
        "SEPARATOR_HUMAN_STRINGS",
        "SEPARATOR_HUMAN_STRINGS",
        "name",
        "condition",
        "separator",
        "EMPTY_CONDITION_SIGN",
        "condition",
        "separator",
        "_valueToHumanString",
        "condition",
        "separator",
        "_conditionToHumanString",
        "condition",
        "ifthenelse",
        "ifthenelse",
        "ifthenelse",
        "stepsNames",
        "stepsNames",
        "name",
        "_ifThenElseStepToHumanFormat",
        "name",
        "ifthenelse",
        "name"
    ],
    "literals": [
        "'@/lib/steps'",
        "'if'",
        "'then'",
        "'else'",
        "string",
        "'...'",
        "string",
        "string",
        "<em>${interpolatedValue}</em>",
        "'string'",
        "'${value}'",
        "''",
        "string",
        "', '",
        "${column} is ${_valueToHumanString(value)}",
        "${column} is in (${_valueOrArrayToString(value)})",
        "${column} is null",
        "${column} is not null",
        "string",
        "${column} ${operator} ${_valueToHumanString(value)}",
        "string",
        "(${v})",
        "' <strong>OR</strong> '",
        "' <strong>AND</strong> '",
        "' <strong>THEN</strong> '",
        "' <strong>ELSE</strong> '",
        "string",
        "'or'",
        "'and'",
        "string",
        "string",
        "''",
        "'string'",
        "'name'",
        "'newColumn'",
        "string",
        "'string'",
        "''"
    ],
    "variables": [
        "EMPTY_CONDITION_SIGN",
        "interpolatedMatch",
        "interpolatedValue",
        "CONDITION_HUMAN_STRINGS",
        "SEPARATOR_HUMAN_STRINGS",
        "separator",
        "stepsNames"
    ],
    "comments": [
        "Unhandled operators"
    ],
    "docstrings": [
        "* Handle regular and interpolated values.",
        "* Convert a condition into a human readable format.\n *\n * Top level conditions shouldn't be surrounded by parentheses, but lower levels should.\n *\n * @param {Object} condition\n * @param {Boolean} isOnTopLevel",
        "* Convert a ifthenelse step into a human readable format.\n *\n * THEN and ELSE should be prefixed by their name\n *\n * @param {String} name\n * @param {FilterCondition} condition",
        "* Convert a ifthenelse into a human readable format.\n *\n * Delete else step if elseif mode is on\n *\n * @param {IfThenElseStep} ifthenelse"
    ],
    "functions": [
        "_valueToHumanString",
        "_valueOrArrayToString",
        "_conditionUnitToHumanString",
        "_parenthesesUnlessTopLevel",
        "_conditionToHumanString",
        "_ifThenElseStepToHumanFormat",
        "convertIfThenElseToHumanFormat"
    ],
    "classes": []
}