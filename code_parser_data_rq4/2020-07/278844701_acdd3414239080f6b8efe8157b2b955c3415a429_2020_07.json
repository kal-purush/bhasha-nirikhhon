{
    "identifiers": [
        "aiohttp",
        "asyncio",
        "uvicorn",
        "fastai",
        "fastai",
        "vision",
        "io",
        "BytesIO",
        "starlette",
        "applications",
        "Starlette",
        "starlette",
        "middleware",
        "cors",
        "CORSMiddleware",
        "starlette",
        "responses",
        "HTMLResponse",
        "JSONResponse",
        "starlette",
        "staticfiles",
        "StaticFiles",
        "cv2",
        "Path",
        "parent",
        "Starlette",
        "app",
        "add_middleware",
        "CORSMiddleware",
        "allow_origins",
        "allow_headers",
        "app",
        "mount",
        "StaticFiles",
        "directory",
        "url",
        "dest",
        "dest",
        "exists",
        "aiohttp",
        "ClientSession",
        "session",
        "session",
        "get",
        "url",
        "response",
        "response",
        "read",
        "open",
        "dest",
        "f",
        "f",
        "write",
        "data",
        "download_file",
        "export_file_url",
        "path",
        "export_file_name",
        "load_learner",
        "path",
        "export_file_name",
        "learn",
        "RuntimeError",
        "e",
        "len",
        "e",
        "args",
        "e",
        "args",
        "e",
        "RuntimeError",
        "message",
        "asyncio",
        "get_event_loop",
        "asyncio",
        "ensure_future",
        "setup_learner",
        "loop",
        "run_until_complete",
        "asyncio",
        "gather",
        "tasks",
        "loop",
        "close",
        "app",
        "route",
        "request",
        "path",
        "HTMLResponse",
        "html_file",
        "open",
        "read",
        "app",
        "route",
        "methods",
        "request",
        "request",
        "form",
        "img_data",
        "read",
        "open_image",
        "BytesIO",
        "img_bytes",
        "learn",
        "predict",
        "img",
        "JSONResponse",
        "prediction",
        "sys",
        "argv",
        "uvicorn",
        "run",
        "app",
        "app",
        "host",
        "port",
        "log_level"
    ],
    "literals": [
        "'https://drive.google.com/uc?export=download&id=1phtDQt-cgbgdYJ9dQxZuAHPI4m4rT0Em'",
        "'export.pkl'",
        "'A'",
        "'B'",
        "'C'",
        "'D'",
        "'E'",
        "'F'",
        "'G'",
        "'I'",
        "'K'",
        "'L'",
        "'M'",
        "'N'",
        "'P'",
        "'Q'",
        "'R'",
        "'S'",
        "'T'",
        "'U'",
        "'V'",
        "'W'",
        "'X'",
        "'Y'",
        "'Z'",
        "'del'",
        "'nothing'",
        "'space'",
        "'*'",
        "'X-Requested-With'",
        "'Content-Type'",
        "'/static'",
        "'app/static'",
        "'wb'",
        "'CPU-only machine'",
        "\"\\n\\nThis model was trained with an old version of fastai and will not work in a CPU environment.\"",
        "'/'",
        "'view'",
        "'index.html'",
        "'/analyze'",
        "'POST'",
        "'file'",
        "'result'",
        "'__main__'",
        "'serve'",
        "'0.0.0.0'",
        "\"info\""
    ],
    "variables": [
        "export_file_url",
        "export_file_name",
        "classes",
        "path",
        "app",
        "data",
        "learn",
        "message",
        "loop",
        "tasks",
        "learn",
        "html_file",
        "img_data",
        "img_bytes",
        "img",
        "prediction"
    ],
    "comments": [
        "get parent directory path",
        "initialize Starlette application",
        "Cross origin resource sharing, * means Wildcard i.e all are allowed",
        "Describes the directory for static files example css, js files",
        "print(img.size())",
        "input_img = cv2.flip(img,1)",
        "gray_img = cv2.cvtColor(input_img,cv2.COLOR_BGR2GRAY)",
        "blur_img = cv2.GaussianBlur(gray_img,(7,7),0)",
        "equalized_img = cv2.equalizeHist(blur_img)",
        "resized_img=cv2.resize(equalized_img,(200,200))"
    ],
    "docstrings": [],
    "functions": [
        "download_file",
        "setup_learner",
        "homepage",
        "analyze"
    ],
    "classes": []
}