{
    "identifiers": [
        "zlib",
        "abc",
        "ABC",
        "cached_property",
        "cached_property",
        "vstruct",
        "VStruct",
        "vstruct",
        "primitives",
        "TYPE_BASE_MASK",
        "TYPE_FLAGS_MASK",
        "BTMT_USIGNED",
        "BT_FLOAT",
        "BT_INT",
        "BTMT_CHAR",
        "BT_VOID",
        "BTMT_SIZE12",
        "BT_UNK",
        "BTMT_SIZE12",
        "BT_VOID",
        "BTMT_SIZE48",
        "BT_UNK",
        "BTMT_SIZE48",
        "BT_VOID",
        "BTMT_SIZE128",
        "BT_UNK",
        "BTMT_SIZE128",
        "BT_UNK_BYTE",
        "BT_UNKNOWN",
        "BT_VOID",
        "BTMT_SIZE0",
        "BT_INT8",
        "BTMT_SIGNED",
        "BT_INT8",
        "BTMT_CHAR",
        "BT_INT8",
        "BTMT_USIGNED",
        "BT_INT8",
        "BTMT_USIGNED",
        "BT_INT16",
        "BTMT_SIGNED",
        "BT_INT16",
        "BTMT_USIGNED",
        "BT_INT32",
        "BTMT_SIGNED",
        "BT_INT32",
        "BTMT_USIGNED",
        "BT_INT64",
        "BTMT_SIGNED",
        "BT_INT64",
        "BTMT_USIGNED",
        "BT_INT128",
        "BTMT_SIGNED",
        "BT_INT128",
        "BTMT_USIGNED",
        "BT_INT",
        "BTMT_UNKSIGN",
        "BT_INT",
        "BTMT_USIGNED",
        "BT_INT",
        "BTMT_SIGNED",
        "BT_BOOL",
        "BT_FLOAT",
        "BTMT_FLOAT",
        "BT_FLOAT",
        "BTMT_DOUBLE",
        "BT_FLOAT",
        "BTMT_LNGDBL",
        "BT_FLOAT",
        "BTMT_SPECFLT",
        "BT_COMPLEX",
        "BTMT_STRUCT",
        "BT_COMPLEX",
        "BTMT_UNION",
        "BT_COMPLEX",
        "BTMT_ENUM",
        "BT_COMPLEX",
        "BTMT_TYPEDEF",
        "t",
        "t",
        "BTM_CONST",
        "t",
        "t",
        "BTM_VOLATILE",
        "t",
        "t",
        "TYPE_BASE_MASK",
        "t",
        "t",
        "TYPE_FLAGS_MASK",
        "t",
        "t",
        "TYPE_FULL_MASK",
        "t",
        "get_base_type",
        "t",
        "_BT_LAST_BASIC",
        "t",
        "get_base_type",
        "t",
        "BT_VOID",
        "get_type_flags",
        "t",
        "t",
        "get_full_type",
        "t",
        "BTF_VOID",
        "t",
        "get_full_type",
        "t",
        "BT_UNKNOWN",
        "t",
        "get_base_type",
        "t",
        "BT_PTR",
        "t",
        "get_base_type",
        "t",
        "BT_COMPLEX",
        "t",
        "get_base_type",
        "t",
        "BT_FUNC",
        "t",
        "get_base_type",
        "t",
        "BT_ARRAY",
        "t",
        "get_full_type",
        "t",
        "BTF_TYPEDEF",
        "t",
        "is_type_complex",
        "t",
        "is_type_typedef",
        "t",
        "t",
        "get_full_type",
        "t",
        "BTF_STRUCT",
        "t",
        "get_full_type",
        "t",
        "BTF_UNION",
        "t",
        "is_type_struct",
        "t",
        "is_type_union",
        "t",
        "t",
        "get_full_type",
        "t",
        "BTF_ENUM",
        "t",
        "get_base_type",
        "t",
        "BT_BITFIELD",
        "bt",
        "get_base_type",
        "bt",
        "BT_INT8",
        "bt",
        "BT_INT",
        "t",
        "get_full_type",
        "t",
        "BT_INT128",
        "BTMT_UNKSIGN",
        "get_full_type",
        "t",
        "BT_INT128",
        "BTMT_SIGNED",
        "t",
        "get_full_type",
        "t",
        "BT_INT64",
        "BTMT_UNKSIGN",
        "get_full_type",
        "t",
        "BT_INT64",
        "BTMT_SIGNED",
        "t",
        "get_full_type",
        "t",
        "BT_INT32",
        "BTMT_UNKSIGN",
        "get_full_type",
        "t",
        "BT_INT32",
        "BTMT_SIGNED",
        "t",
        "get_full_type",
        "t",
        "BT_INT16",
        "BTMT_UNKSIGN",
        "get_full_type",
        "t",
        "BT_INT16",
        "BTMT_SIGNED",
        "t",
        "get_full_type",
        "t",
        "BT_INT8",
        "BTMT_CHAR",
        "get_full_type",
        "t",
        "BT_INT8",
        "BTMT_SIGNED",
        "t",
        "get_base_type",
        "t",
        "BT_PTR",
        "t",
        "BT_FUNC",
        "t",
        "get_base_type",
        "t",
        "t",
        "BT_PTR",
        "t",
        "BT_ARRAY",
        "t",
        "get_base_type",
        "t",
        "BT_FLOAT",
        "t",
        "get_full_type",
        "t",
        "BT_VOID",
        "get_base_type",
        "t",
        "BT_BOOL",
        "t",
        "is_type_integral",
        "t",
        "is_type_enum",
        "t",
        "t",
        "get_full_type",
        "t",
        "BT_VOID",
        "get_base_type",
        "t",
        "BT_FLOAT",
        "t",
        "is_type_arithmetic",
        "t",
        "is_type_enum",
        "t",
        "t",
        "get_full_type",
        "t",
        "BTF_UINT",
        "t",
        "get_full_type",
        "t",
        "BTF_UCHAR",
        "t",
        "get_full_type",
        "t",
        "BTF_UINT16",
        "t",
        "get_full_type",
        "t",
        "BTF_UINT32",
        "t",
        "get_full_type",
        "t",
        "BTF_UINT64",
        "t",
        "get_full_type",
        "t",
        "BTF_UINT128",
        "t",
        "get_full_type",
        "t",
        "BTF_LDOUBLE",
        "t",
        "get_full_type",
        "t",
        "BTF_DOUBLE",
        "t",
        "get_full_type",
        "t",
        "BTF_FLOAT",
        "t",
        "get_base_type",
        "t",
        "BT_BOOL",
        "t",
        "t",
        "TAH_BYTE",
        "t",
        "t",
        "TYPE_FLAGS_MASK",
        "TYPE_MODIF_MASK",
        "BT_VOID",
        "ABC",
        "VStruct",
        "BaseTypeData",
        "VStruct",
        "v_uint8",
        "sbytes",
        "offset",
        "fast",
        "VStruct",
        "vsParse",
        "sbytes",
        "offset",
        "fast",
        "is_typeid_last",
        "typ",
        "BasicTypeData",
        "impl",
        "vsParse",
        "sbytes",
        "is_type_ptr",
        "typ",
        "PointerTypeData",
        "impl",
        "vsParse",
        "sbytes",
        "is_type_func",
        "typ",
        "FuncTypeData",
        "impl",
        "vsParse",
        "sbytes",
        "is_type_array",
        "typ",
        "ArrayTypeData",
        "impl",
        "vsParse",
        "sbytes",
        "is_type_typedef",
        "typ",
        "TypedefTypeData",
        "impl",
        "vsParse",
        "sbytes",
        "is_type_struni",
        "typ",
        "UdtTypeData",
        "impl",
        "vsParse",
        "sbytes",
        "is_type_enum",
        "typ",
        "EnumTypeData",
        "impl",
        "vsParse",
        "sbytes",
        "is_type_bitfld",
        "typ",
        "BitfieldTypeData",
        "impl",
        "vsParse",
        "sbytes",
        "__setattr__",
        "impl",
        "offset",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "BaseTypeData",
        "v_zstr",
        "_vs_value",
        "_vs_align_pad",
        "VStruct",
        "VStruct",
        "v_uint32",
        "v_zstr_utf8",
        "v_uint32",
        "v_zbytes",
        "v_zstr_utf8",
        "v_zbytes",
        "v_zbytes",
        "v_uint8",
        "flags",
        "vsSetField",
        "v_uint64",
        "flags",
        "format",
        "flags",
        "sbytes",
        "offset",
        "fast",
        "VStruct",
        "vsParse",
        "sbytes",
        "offset",
        "fast",
        "TypeData",
        "typ",
        "vsParse",
        "type_info",
        "__setattr__",
        "typ",
        "offset",
        "cached_property",
        "pos",
        "len",
        "fields_buf",
        "from_bytes",
        "fields_buf",
        "pos",
        "pos",
        "byteorder",
        "p_list",
        "append",
        "fields_buf",
        "pos",
        "pos",
        "length",
        "decode",
        "pos",
        "length",
        "x",
        "x",
        "p_list",
        "VStruct",
        "flags",
        "VStruct",
        "flags",
        "v_uint32",
        "v_uint32",
        "flags",
        "TIL_ZIP",
        "v_uint32",
        "v_bytes",
        "vsSetLength",
        "size",
        "csize",
        "vsSetLength",
        "csize",
        "csize",
        "zlib",
        "decompress",
        "buf",
        "vsSetField",
        "buf",
        "buf",
        "tobytes",
        "isinstance",
        "buf",
        "buf",
        "_",
        "ndefs",
        "TILTypeInfo",
        "_def",
        "vsParse",
        "buf",
        "offset",
        "offset",
        "defs",
        "append",
        "_def",
        "defs",
        "cached_property",
        "sorted",
        "defs",
        "key",
        "x",
        "x",
        "ordinal",
        "VStruct",
        "buf",
        "wordsize",
        "VStruct",
        "wordsize",
        "v_str",
        "size",
        "v_uint32",
        "v_uint32",
        "v_uint8",
        "v_str",
        "v_uint8",
        "v_str",
        "v_uint8",
        "v_uint8",
        "v_uint8",
        "v_uint8",
        "v_uint8",
        "v_uint8",
        "flags",
        "TIL_ESI",
        "vsAddField",
        "v_uint8",
        "vsAddField",
        "v_uint8",
        "vsAddField",
        "v_uint8",
        "flags",
        "TIL_SLD",
        "vsAddField",
        "v_uint8",
        "vsAddField",
        "TILBucket",
        "flags",
        "flags",
        "flags",
        "TIL_ORD",
        "vsAddField",
        "v_uint32",
        "vsAddField",
        "TILBucket",
        "flags",
        "flags",
        "vsAddField",
        "TILBucket",
        "flags",
        "flags",
        "vsSetLength",
        "title_len",
        "vsSetLength",
        "base_len",
        "sbytes",
        "offset",
        "fast",
        "sbytes",
        "tobytes",
        "isinstance",
        "sbytes",
        "sbytes",
        "VStruct",
        "vsParse",
        "sbytes",
        "offset",
        "fast",
        "signature",
        "ValueError"
    ],
    "literals": [
        "\"impl\"",
        "\"\"",
        "\"\"",
        "\"ordinal\"",
        "\"unsupported format {}\"",
        "\"typ\"",
        "\"little\"",
        "\"ascii\"",
        "\"\"",
        "\"buf\"",
        "\"buf\"",
        "\"buf\"",
        "\"size_s\"",
        "\"size_l\"",
        "\"size_ll\"",
        "\"size_ldbl\"",
        "\"syms\"",
        "\"type_ordinal_numbers\"",
        "\"types\"",
        "\"macros\"",
        "\"title\"",
        "\"base\"",
        "\"IDATIL\"",
        "\"bad signature\""
    ],
    "variables": [
        "RESERVED_BYTE",
        "TYPE_BASE_MASK",
        "TYPE_FLAGS_MASK",
        "TYPE_MODIF_MASK",
        "TYPE_FULL_MASK",
        "BT_UNK",
        "BT_VOID",
        "BTMT_SIZE0",
        "BTMT_SIZE12",
        "BTMT_SIZE48",
        "BTMT_SIZE128",
        "BT_INT8",
        "BT_INT16",
        "BT_INT32",
        "BT_INT64",
        "BT_INT128",
        "BT_INT",
        "BTMT_UNKSIGN",
        "BTMT_SIGNED",
        "BTMT_USIGNED",
        "BTMT_UNSIGNED",
        "BTMT_CHAR",
        "BT_BOOL",
        "BTMT_DEFBOOL",
        "BTMT_BOOL1",
        "BTMT_BOOL2",
        "BTMT_BOOL4",
        "BT_FLOAT",
        "BTMT_FLOAT",
        "BTMT_DOUBLE",
        "BTMT_LNGDBL",
        "BTMT_SPECFLT",
        "_BT_LAST_BASIC",
        "BT_PTR",
        "BTMT_DEFPTR",
        "BTMT_NEAR",
        "BTMT_FAR",
        "BTMT_CLOSURE",
        "BT_ARRAY",
        "BTMT_NONBASED",
        "BTMT_ARRESERV",
        "BT_FUNC",
        "BTMT_DEFCALL",
        "BTMT_NEARCALL",
        "BTMT_FARCALL",
        "BTMT_INTCALL",
        "BT_COMPLEX",
        "BTMT_STRUCT",
        "BTMT_UNION",
        "BTMT_ENUM",
        "BTMT_TYPEDEF",
        "BT_BITFIELD",
        "BTMT_BFLDI8",
        "BTMT_BFLDI16",
        "BTMT_BFLDI32",
        "BTMT_BFLDI64",
        "BT_RESERVED",
        "BTM_CONST",
        "BTM_VOLATILE",
        "BTE_SIZE_MASK",
        "BTE_RESERVED",
        "BTE_BITFIELD",
        "BTE_OUT_MASK",
        "BTE_HEX",
        "BTE_CHAR",
        "BTE_SDEC",
        "BTE_UDEC",
        "BTE_ALWAYS",
        "BT_SEGREG",
        "BT_UNK_BYTE",
        "BT_UNK_WORD",
        "BT_UNK_DWORD",
        "BT_UNK_QWORD",
        "BT_UNK_OWORD",
        "BT_UNKNOWN",
        "BTF_BYTE",
        "BTF_UNK",
        "BTF_VOID",
        "BTF_INT8",
        "BTF_CHAR",
        "BTF_UCHAR",
        "BTF_UINT8",
        "BTF_INT16",
        "BTF_UINT16",
        "BTF_INT32",
        "BTF_UINT32",
        "BTF_INT64",
        "BTF_UINT64",
        "BTF_INT128",
        "BTF_UINT128",
        "BTF_INT",
        "BTF_UINT",
        "BTF_SINT",
        "BTF_BOOL",
        "BTF_FLOAT",
        "BTF_DOUBLE",
        "BTF_LDOUBLE",
        "BTF_TBYTE",
        "BTF_STRUCT",
        "BTF_UNION",
        "BTF_ENUM",
        "BTF_TYPEDEF",
        "TAH_BYTE",
        "FAH_BYTE",
        "TAH_HASATTRS",
        "CM_MASK",
        "CM_UNKNOWN",
        "CM_N8_F16",
        "CM_N64",
        "CM_N16_F32",
        "CM_N32_F48",
        "CM_M_MASK",
        "CM_M_MN",
        "CM_M_FF",
        "CM_M_NF",
        "CM_M_FN",
        "CM_CC_MASK",
        "CM_CC_INVALID",
        "CM_CC_UNKNOWN",
        "CM_CC_VOIDARG",
        "CM_CC_CDECL",
        "CM_CC_ELLIPSIS",
        "CM_CC_STDCALL",
        "CM_CC_PASCAL",
        "CM_CC_FASTCALL",
        "CM_CC_THISCALL",
        "CM_CC_MANUAL",
        "CM_CC_SPOILED",
        "CM_CC_RESERVE4",
        "CM_CC_RESERVE3",
        "CM_CC_SPECIALE",
        "CM_CC_SPECIALP",
        "CM_CC_SPECIAL",
        "bt",
        "t",
        "t",
        "typ",
        "offset",
        "impl",
        "impl",
        "impl",
        "impl",
        "impl",
        "impl",
        "impl",
        "impl",
        "impl",
        "obj_type",
        "closure",
        "based_ptr_size",
        "taptr_bits",
        "elem_type",
        "n_elems",
        "argloc",
        "name",
        "cmt",
        "flags",
        "args",
        "flags",
        "rettype",
        "retloc",
        "stkargs",
        "spoiled",
        "cc",
        "offset",
        "size",
        "name",
        "cmt",
        "effalign",
        "tafld_bits",
        "fda",
        "members",
        "total_size",
        "unpadded_size",
        "effalign",
        "taudt_bits",
        "sda",
        "pack",
        "is_union",
        "name",
        "cmt",
        "value",
        "group_sizes",
        "taenum_bits",
        "bte",
        "members",
        "til",
        "name",
        "ordinal",
        "is_ordref",
        "resolve",
        "nbytes",
        "width",
        "is_unsigned",
        "flags",
        "name",
        "ordinal",
        "type_info",
        "cmt",
        "fields_buf",
        "fieldcmts",
        "sclass",
        "offset",
        "typ",
        "p_list",
        "pos",
        "length",
        "flags",
        "defs",
        "ndefs",
        "size",
        "csize",
        "csize",
        "buf",
        "buf",
        "buf",
        "defs",
        "offset",
        "_def",
        "offset",
        "defs",
        "TIL_ZIP",
        "TIL_MAC",
        "TIL_ESI",
        "TIL_UNI",
        "TIL_ORD",
        "TIL_ALI",
        "TIL_MOD",
        "TIL_STM",
        "TIL_SLD",
        "wordsize",
        "signature",
        "format",
        "flags",
        "title_len",
        "title",
        "base_len",
        "id",
        "cm",
        "size_i",
        "size_b",
        "size_e",
        "def_align",
        "sbytes"
    ],
    "comments": [
        "migrate from ida sdk and https://github.com/aerosoul94/tilutil/blob/c149641168/til/datatypes.py",
        "__int128 (for alpha & future use)",
        "natural int. (size provided by idp module)",
        "storage size.",
        "- if == 0 ph.get_default_enum_size()",
        "- else 1 << (n -1) = 1,2,4...64",
        "must be 0, in order to distinguish",
        "from a tah-byte",
        "'subarrays'. In this case ANY record",
        "has the following format:",
        "- 'de' mask (has name)",
        "- 'dt' cnt",
        "- cnt records of 'de' values",
        "(cnt CAN be 0)",
        "\\note delta for ALL subsegment is ONE",
        "output style mask",
        "hex",
        "char or hex",
        "signed decimal",
        "unsigned decimal",
        "this bit MUST be present",
        "segment register",
        "1 byte",
        "2 bytes",
        "4 bytes",
        "8 bytes",
        "16 bytes",
        "unknown size - for parameters",
        "byte",
        "unknown",
        "void",
        "signed byte",
        "signed char",
        "unsigned char",
        "unsigned byte",
        "signed short",
        "unsigned short",
        "signed int",
        "unsigned int",
        "signed long",
        "unsigned long",
        "signed 128-bit value",
        "unsigned 128-bit value",
        "int, unknown signedness",
        "unsigned int",
        "singed int",
        "boolean",
        "float",
        "double",
        "long double",
        "see ::BTMT_SPECFLT",
        "struct",
        "union",
        "enum",
        "typedef",
        "convenience functions:",
        "See ::BTM_CONST",
        "See ::BTM_VOLATILE",
        "Get get basic type bits (::TYPE_BASE_MASK)",
        "Get type flags (::TYPE_FLAGS_MASK)",
        "Get basic type bits + type flags (::TYPE_FULL_MASK)",
        "Is the type_t the last byte of type declaration?",
        "(there are no additional bytes after a basic type, see ::_BT_LAST_BASIC)",
        "Identifies an unknown or void type with a known size (see \\ref tf_unk)",
        "< See ::BTF_VOID",
        "< See ::BT_UNKNOWN",
        "< See ::BT_PTR",
        "< See ::BT_COMPLEX",
        "< See ::BT_FUNC",
        "< See ::BT_ARRAY",
        "< See ::BTF_TYPEDEF",
        "< Is the type a struct/union/enum?",
        "< See ::BTF_STRUCT",
        "< See ::BTF_UNION",
        "< Is the type a struct or union?",
        "< See ::BTF_ENUM",
        "< See ::BT_BITFIELD",
        "Does the type_t specify one of the basic types in \\ref tf_int?",
        "Does the type specify a 128-bit value? (signed or unsigned, see \\ref tf_int)",
        "Does the type specify a 64-bit value? (signed or unsigned, see \\ref tf_int)",
        "Does the type specify a 32-bit value? (signed or unsigned, see \\ref tf_int)",
        "Does the type specify a 16-bit value? (signed or unsigned, see \\ref tf_int)",
        "Does the type specify a char value? (signed or unsigned, see \\ref tf_int)",
        "Is the type a pointer, array, or function type?",
        "Is the type a pointer or array type?",
        "Is the type a floating point type?",
        "any floating type",
        "Is the type an integral type (char/short/int/long/bool)?",
        "Is the type an extended integral type? (integral or enum)",
        "Is the type an arithmetic type? (floating or integral)",
        "Is the type an extended arithmetic type? (arithmetic or enum)",
        "< See ::BTF_UINT",
        "< See ::BTF_UCHAR",
        "< See ::BTF_UINT16",
        "< See ::BTF_UINT32",
        "< See ::BTF_UINT64",
        "< See ::BTF_UINT128",
        "< See ::BTF_LDOUBLE",
        "< See ::BTF_DOUBLE",
        "< See ::BTF_FLOAT",
        "< See ::BTF_BOOL",
        "Identify an sdacl byte.",
        "The first sdacl byte has the following format: 11xx000x.",
        "The sdacl bytes are appended to udt fields. They indicate the start of type",
        "attributes (as the tah-bytes do). The sdacl bytes are used in the udt",
        "headers instead of the tah-byte. This is done for compatibility with old",
        "databases, they were already using sdacl bytes in udt headers and as udt",
        "field postfixes.",
        "(see \"sdacl-typeattrs\" in the type bit definitions)",
        "tinfo_t",
        "argloc_t",
        "tinfo_t",
        "tinfo_t",
        "argloc_t",
        "uval_t",
        "reginfovec_t",
        "qstring",
        "qstring",
        "tinfo_t",
        "qstring",
        "qstring",
        "intvec_t",
        "pack buckets using zip",
        "til has macro table",
        "extended sizeof info (short, long, longlong)",
        "universal til for any compiler",
        "type ordinal numbers are present",
        "type aliases are present (this bit is used only on the disk)",
        "til has been modified, should be saved",
        "til has extra streams",
        "sizeof(long double)",
        "https://github.com/aerosoul94/tilutil/blob/master/distil.py#L545"
    ],
    "docstrings": [
        "\"\"\"Representation of ptr_type_data_t\"\"\"",
        "\"\"\"An object to represent struct or union types\"\"\"",
        "\"\"\"Representation of enum_type_data_t\"\"\"",
        "\"\"\"Representation of typedef_type_data_t\"\"\"",
        "\"\"\"Representation of bitfield_type_data_t\"\"\"",
        "\"\"\"\n    A v_zbytes placeholder class which will automatically return\n    up to a null terminator bytes dynamically.\n    \"\"\""
    ],
    "functions": [
        "is_type_const",
        "is_type_volatile",
        "get_base_type",
        "get_type_flags",
        "get_full_type",
        "is_typeid_last",
        "is_type_partial",
        "is_type_void",
        "is_type_unknown",
        "is_type_ptr",
        "is_type_complex",
        "is_type_func",
        "is_type_array",
        "is_type_typedef",
        "is_type_sue",
        "is_type_struct",
        "is_type_union",
        "is_type_struni",
        "is_type_enum",
        "is_type_bitfld",
        "is_type_int",
        "is_type_int128",
        "is_type_int64",
        "is_type_int32",
        "is_type_int16",
        "is_type_char",
        "is_type_paf",
        "is_type_ptr_or_array",
        "is_type_floating",
        "is_type_integral",
        "is_type_ext_integral",
        "is_type_arithmetic",
        "is_type_ext_arithmetic",
        "is_type_uint",
        "is_type_uchar",
        "is_type_uint16",
        "is_type_uint32",
        "is_type_uint64",
        "is_type_uint128",
        "is_type_ldouble",
        "is_type_double",
        "is_type_float",
        "is_type_bool",
        "is_tah_byte",
        "is_sdacl_byte",
        "vsParse",
        "vsGetValue",
        "pcb_flags",
        "vsParse",
        "fields",
        "pcb_size",
        "pcb_csize",
        "pcb_buf",
        "sorted_defs_by_ordinal",
        "pcb_flags",
        "pcb_title_len",
        "pcb_base_len",
        "vsParse",
        "validate"
    ],
    "classes": [
        "BaseTypeData",
        "TypeData",
        "BasicTypeData",
        "PointerTypeData",
        "ArrayTypeData",
        "FuncArg",
        "FuncTypeData",
        "UdtMember",
        "UdtTypeData",
        "EnumMember",
        "EnumTypeData",
        "TypedefTypeData",
        "BitfieldTypeData",
        "v_zbytes",
        "TILTypeInfo",
        "TILBucket",
        "TIL"
    ]
}