{
    "identifiers": [
        "skfda",
        "pandas",
        "Series",
        "pandas",
        "tests",
        "extension",
        "pytest",
        "numpy",
        "np",
        "pytest",
        "fixture",
        "skfda",
        "representation",
        "basis",
        "FDataBasisDType",
        "pytest",
        "fixture",
        "skfda",
        "representation",
        "basis",
        "Monomial",
        "n_basis",
        "np",
        "arange",
        "reshape",
        "skfda",
        "FDataBasis",
        "basis",
        "basis",
        "coefficients",
        "coef_matrix",
        "pytest",
        "fixture",
        "NotImplementedError",
        "pytest",
        "fixture",
        "NotImplementedError",
        "pytest",
        "fixture",
        "request",
        "data",
        "data_missing",
        "request",
        "param",
        "data",
        "request",
        "param",
        "data_missing",
        "pytest",
        "fixture",
        "data",
        "count",
        "_",
        "count",
        "data",
        "gen",
        "pytest",
        "fixture",
        "NotImplementedError",
        "pytest",
        "fixture",
        "NotImplementedError",
        "pytest",
        "fixture",
        "is_",
        "pytest",
        "fixture",
        "pytest",
        "fixture",
        "NotImplementedError",
        "pytest",
        "fixture",
        "request",
        "request",
        "param",
        "pytest",
        "fixture",
        "x",
        "x",
        "len",
        "x",
        "x",
        "Series",
        "len",
        "x",
        "x",
        "x",
        "ids",
        "request",
        "request",
        "param",
        "pytest",
        "fixture",
        "request",
        "request",
        "param",
        "pytest",
        "fixture",
        "request",
        "request",
        "param",
        "pytest",
        "fixture",
        "request",
        "request",
        "param",
        "pytest",
        "fixture",
        "request",
        "request",
        "param",
        "pytest",
        "fixture",
        "request",
        "request",
        "param",
        "BaseConstructorsTests"
    ],
    "literals": [
        "\"data\"",
        "\"data_missing\"",
        "\"data\"",
        "\"data_missing\"",
        "\"scalar\"",
        "\"list\"",
        "\"series\"",
        "\"object\"",
        "\"ffill\"",
        "\"bfill\""
    ],
    "variables": [
        "basis",
        "coef_matrix"
    ],
    "comments": [
        "",
        "Fixtures",
        "",
        "",
        "Tests",
        ""
    ],
    "docstrings": [
        "\"\"\"A fixture providing the ExtensionDtype to validate.\"\"\"",
        "\"\"\"\n    Length-100 array for this type.\n    * data[0] and data[1] should both be non missing\n    * data[0] and data[1] should not be equal\n    \"\"\"",
        "\"\"\"Length-100 array in which all the elements are two.\"\"\"",
        "\"\"\"Length-2 array with [NA, Valid]\"\"\"",
        "\"\"\"Parametrized fixture giving 'data' and 'data_missing'\"\"\"",
        "\"\"\"\n    Generate many datasets.\n    Parameters\n    ----------\n    data : fixture implementing `data`\n    Returns\n    -------\n    Callable[[int], Generator]:\n        A callable that takes a `count` argument and\n        returns a generator yielding `count` datasets.\n    \"\"\"",
        "\"\"\"\n    Length-3 array with a known sort order.\n    This should be three items [B, C, A] with\n    A < B < C\n    \"\"\"",
        "\"\"\"\n    Length-3 array with a known sort order.\n    This should be three items [B, NA, A] with\n    A < B and NA missing.\n    \"\"\"",
        "\"\"\"\n    Binary operator for comparing NA values.\n    Should return a function of two arguments that returns\n    True if both arguments are (scalar) NA for your type.\n    By default, uses ``operator.is_``\n    \"\"\"",
        "\"\"\"The scalar missing value for this type. Default 'None'\"\"\"",
        "\"\"\"\n    Data for factorization, grouping, and unique tests.\n    Expected to be like [B, B, NA, NA, A, A, B, C]\n    Where A < B < C and NA is missing\n    \"\"\"",
        "\"\"\"Whether to box the data in a Series\"\"\"",
        "\"\"\"\n    Functions to test groupby.apply().\n    \"\"\"",
        "\"\"\"\n    Boolean fixture to support Series and Series.to_frame() comparison testing.\n    \"\"\"",
        "\"\"\"\n    Boolean fixture to support arr and Series(arr) comparison testing.\n    \"\"\"",
        "\"\"\"\n    Boolean fixture to support comparison testing of ExtensionDtype array\n    and numpy array.\n    \"\"\"",
        "\"\"\"\n    Parametrized fixture giving method parameters 'ffill' and 'bfill' for\n    Series.fillna(method=<method>) testing.\n    \"\"\"",
        "\"\"\"\n    Boolean fixture to support ExtensionDtype _from_sequence method testing.\n    \"\"\""
    ],
    "functions": [
        "dtype",
        "data",
        "data_for_twos",
        "data_missing",
        "all_data",
        "data_repeated",
        "gen",
        "data_for_sorting",
        "data_missing_for_sorting",
        "na_cmp",
        "na_value",
        "data_for_grouping",
        "box_in_series",
        "groupby_apply_op",
        "as_frame",
        "as_series",
        "use_numpy",
        "fillna_method",
        "as_array"
    ],
    "classes": [
        "TestConstructors"
    ]
}