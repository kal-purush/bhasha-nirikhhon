{
    "identifiers": [
        "Theme",
        "DebugTileDataSource",
        "TileKey",
        "webMercatorTilingScheme",
        "MapControls",
        "MapControlsUI",
        "CopyrightElementHandler",
        "MapView",
        "PickResult",
        "Tile",
        "DataProvider",
        "TileDataSource",
        "TileDataSourceOptions",
        "TileFactory",
        "GUI",
        "CUSTOM_DECODER_SERVICE_TYPE",
        "TileDependenciesExample",
        "tileKey",
        "abortSignal",
        "tileKey",
        "data",
        "t",
        "t",
        "t",
        "t",
        "scale",
        "t",
        "t",
        "scale",
        "data",
        "x",
        "y",
        "TileKey",
        "tileKey",
        "mainTileKey",
        "Float32Array",
        "data",
        "data",
        "tileKey",
        "mainTileKey",
        "tileKey",
        "mainTileKey",
        "Float32Array",
        "mainTileKey",
        "Tile",
        "TileDataSource",
        "options",
        "TileFactory",
        "CustomTile",
        "options",
        "theme",
        "canvas",
        "canvas",
        "left",
        "top",
        "eventPosition",
        "lastCanvasPosition",
        "lastCanvasPosition",
        "eventPosition",
        "MAX_MOVE",
        "lastCanvasPosition",
        "eventPosition",
        "MAX_MOVE",
        "mapViewUsed",
        "x",
        "y",
        "mapViewUsed",
        "x",
        "y",
        "pr",
        "pr",
        "usableIntersections",
        "usableIntersections",
        "usableIntersections",
        "item",
        "item",
        "current",
        "usableIntersections",
        "element",
        "current",
        "usableIntersections",
        "element",
        "element",
        "current",
        "id",
        "id",
        "MapView",
        "customTheme",
        "CopyrightElementHandler",
        "MapControls",
        "mapControls",
        "MapControlsUI",
        "mapControls",
        "canvas",
        "ui",
        "CustomDataProvider",
        "CustomDataSource",
        "webMercatorTilingScheme",
        "customDataProvider",
        "CUSTOM_DECODER_SERVICE_TYPE",
        "customDatasource",
        "DebugTileDataSource",
        "webMercatorTilingScheme",
        "debugDataSource",
        "canvas",
        "getCanvasPosition",
        "canvas",
        "isPick",
        "canvasPos",
        "handlePick",
        "canvasPos",
        "canvasPos",
        "canvas",
        "lastCanvasPosition",
        "getCanvasPosition",
        "canvas",
        "GUI",
        "gui",
        "guiOptions",
        "val",
        "customDataProvider",
        "customDataProvider",
        "initializeMapView",
        "message",
        "message",
        "message",
        "message",
        "message",
        "message",
        "instructions",
        "message"
    ],
    "literals": [
        "\"@here/harp-datasource-protocol\"",
        "\"@here/harp-debug-datasource\"",
        "\"@here/harp-geoutils\"",
        "\"@here/harp-map-controls\"",
        "\"@here/harp-mapview\"",
        "\"@here/harp-mapview-decoder\"",
        "\"dat.gui\"",
        "\"../decoder/custom_decoder_defs\"",
        "<style>\n            #mouse-picked-result{\n                position:absolute;\n                bottom:5px;\n                border-radius: 5px;\n                margin-left:10px;\n                padding: 9px 12px;\n                background: #37afaa;\n                display: inline-block;\n                visibility: hidden;\n                text-align: left;\n                right:50px;\n            }\n            #mapCanvas {\n              top: 0;\n            }\n            #info{\n                color: #fff;\n                width: 80%;\n                left: 50%;\n                position: relative;\n                margin: 10px 0 0 -40%;\n                font-size: 15px;\n            }\n            @media screen and (max-width: 700px) {\n                #info{\n                    font-size:11px;\n                }\n            }\n        </style>\n        <p id=info>Click/touch a feature on the map to read its data (Land masses are not features).\n        </p>\n        <pre id=\"mouse-picked-result\"></pre>",
        "\"ambient\"",
        "\"#FFFFFF\"",
        "\"ambientLight\"",
        "\"==\"",
        "\"get\"",
        "\"layer\"",
        "\"line-layer\"",
        "\"solid-line\"",
        "\"#ff0000\"",
        "\"10px\"",
        "\"mouse-picked-result\"",
        "\"background\"",
        "\"hidden\"",
        "\"visible\"",
        "string",
        "\"decoder.bundle.js\"",
        "\"copyrightNotice\"",
        "\"resize\"",
        "\"customDatasource\"",
        "\"customStyleSet\"",
        "\"debug\"",
        "\"mouseup\"",
        "\"mousedown\"",
        "\"tileDependencies\"",
        "\"mapCanvas\"",
        "Pan to the left / right until the tile in the center disappears.<br/>\nTo enable usage of the tile dependencies, check the checkbox,<br/>\nthe geometry will now always be visible.",
        "\"div\"",
        "\"absolute\"",
        "\"right\"",
        "\"60px\"",
        "\"10px\"",
        "\"grey\""
    ],
    "variables": [
        "guiOptions",
        "data",
        "scale",
        "t",
        "x",
        "y",
        "mainTileKey",
        "theme",
        "lastCanvasPosition",
        "MAX_MOVE",
        "element",
        "current",
        "usableIntersections",
        "canvas",
        "mapControls",
        "ui",
        "customDataProvider",
        "customDatasource",
        "debugDataSource",
        "canvasPos",
        "gui",
        "instructions",
        "message"
    ],
    "comments": [
        "Here you could connect to the service.",
        "Return true if connect was successful.",
        "Generate some artifical data. Normally you would do a fetch here.",
        "In this example we create some geometry in geo space that will be converted to",
        "local world space by [[CustomDecoder.convertToLocalWorldCoordinates]]",
        "Do some scaling so that the data fits into the tile.",
        "tslint:disable-next-line: no-bitwise",
        "Simulate that the tile contents spread over multiple tiles",
        "snippet:tile_dependencies.ts",
        "end:tile_dependencies.ts",
        "It is not mandatory to create a derived class to represent the tiles from the",
        "CustomDataSource. It is just done here to show that it's possible.",
        "Create a custom theme that will be used to style the data from the CustomDataSource.",
        "Create some lights for the \"standard\" technique.",
        "\"customStyleSet\" has to match the StyleSetName that is passed when creating",
        "the CustomDataSource.",
        "We distinguish different data by using the layer attribute that comes with the",
        "data.",
        "Trigger picking event only if there's (almost) no dragging.",
        "get an array of intersection results from MapView",
        "Hide helper box",
        "Get userData from the first result;",
        "Show helper box",
        "Display userData inside of helper box",
        "Create a new MapView for the HTMLCanvasElement of the given id.",
        "snippet:tile_dependencies_create.ts",
        "Also visualize the tile borders:"
    ],
    "docstrings": [
        "* Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0",
        "* This example shows how to use the {@link @here/harp-mapview#Tile.dependencies} property to ensure\n * that tiles which have geometry overlapping other.\n *\n * If you pan further enough left / right, you will see that the tile disappears.\n *\n * It combines part of the https://www.harp.gl/docs/master/examples/#object-picking.html and\n * https://www.harp.gl/docs/master/examples/#datasource_custom.html examples.\n * ```\n * {@link @here/harp-mapview#Tile}s that contain the geometry from another Tile need to have a\n * reference to the Tile containing the overlapping geometry, this is achieved using the\n * `dependencies` property of the {@link @here/harp-datasource-protocol#DecodedTile}\n * ```typescript\n * [[include:tile_dependencies.ts]]\n * ```\n *"
    ],
    "functions": [
        "connect",
        "ready",
        "getTile",
        "customTheme",
        "getCanvasPosition",
        "isPick",
        "handlePick",
        "initializeMapView"
    ],
    "classes": [
        "CustomDataProvider",
        "CustomTile",
        "CustomDataSource"
    ]
}