{
    "identifiers": [
        "asyncio",
        "inspect",
        "application",
        "getattr",
        "application",
        "getattr",
        "application",
        "inspect",
        "isclass",
        "application",
        "hasattr",
        "application",
        "asyncio",
        "iscoroutinefunction",
        "application",
        "__call__",
        "asyncio",
        "iscoroutinefunction",
        "application",
        "application",
        "scope",
        "receive",
        "send",
        "application",
        "scope",
        "instance",
        "receive",
        "send",
        "new_application",
        "application",
        "is_double_callable",
        "application",
        "double_to_single_callable",
        "application",
        "application"
    ],
    "literals": [
        "\"_asgi_single_callable\"",
        "\"_asgi_double_callable\"",
        "\"__call__\""
    ],
    "variables": [
        "instance",
        "application"
    ],
    "comments": [
        "Look for a hint on the object first",
        "Uninstanted classes are double-callable",
        "Instanted classes depend on their __call__",
        "We only check to see if its __call__ is a coroutine function -",
        "if it's not, it still might be a coroutine function itself.",
        "Non-classes we just check directly"
    ],
    "docstrings": [
        "\"\"\"\n    Tests to see if an application is a legacy-style (double-callable) application.\n    \"\"\"",
        "\"\"\"\n    Transforms a double-callable ASGI application into a single-callable one.\n    \"\"\"",
        "\"\"\"\n    Takes either a single- or double-callable application and always returns it\n    in single-callable style. Use this to add backwards compatibility for ASGI\n    2.0 applications to your server/test harness/etc.\n    \"\"\""
    ],
    "functions": [
        "is_double_callable",
        "double_to_single_callable",
        "new_application",
        "guarantee_single_callable"
    ],
    "classes": []
}