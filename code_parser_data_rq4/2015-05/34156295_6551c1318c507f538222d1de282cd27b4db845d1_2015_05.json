{
    "identifiers": [
        "numpy",
        "np",
        "matplotlib",
        "pyplot",
        "plt",
        "os",
        "sys",
        "sys",
        "path",
        "insert",
        "caffe_root",
        "caffe",
        "caffe",
        "set_mode_gpu",
        "all_data",
        "image_root",
        "image_root",
        "all_data",
        "all_data",
        "filename",
        "os",
        "listdir",
        "filename",
        "all_data",
        "filename",
        "all_data",
        "filename",
        "PRETRAINED_FILES",
        "append",
        "filename",
        "all_data",
        "open",
        "f",
        "line",
        "f",
        "IMAGE_FILES",
        "append",
        "caffe",
        "io",
        "load_image",
        "image_root",
        "line",
        "split",
        "open",
        "f",
        "line",
        "f",
        "IMAGE_FILES",
        "append",
        "caffe",
        "io",
        "load_image",
        "image_root",
        "line",
        "split",
        "caffe",
        "proto",
        "caffe_pb2",
        "BlobProto",
        "all_data",
        "open",
        "read",
        "open",
        "read",
        "blob",
        "ParseFromString",
        "data",
        "np",
        "array",
        "caffe",
        "io",
        "blobproto_to_array",
        "blob",
        "arr",
        "numpy_mean",
        "caffemodel",
        "PRETRAINED_FILES",
        "caffemodel",
        "caffe",
        "Classifier",
        "model_file",
        "MODEL_FILE",
        "pretrained_file",
        "caffemodel",
        "mean",
        "numpy_mean",
        "mean",
        "mean",
        "channel_swap",
        "raw_scale",
        "image_dims",
        "net",
        "predict",
        "IMAGE_FILES",
        "np",
        "savetxt",
        "output_directory",
        "caffemodel",
        "predictions"
    ],
    "literals": [
        "\"../\"",
        "\"python\"",
        "\"/Users/danielseita/UC_Berkeley_Material/CS_280-Computer_Vision/\"",
        "\"FinalProject/Videos_and_Images/\"",
        "\"results/\"",
        "\"Images_All/\"",
        "\"Images_NoNoise/\"",
        "\"all_data is set to be \"",
        "\"\"",
        "\"alexnet_deploy_all.prototxt\"",
        "\"alexnet_deploy_nonoise.prototxt\"",
        "\"snapshots\"",
        "\"caffemodel\"",
        "\"all\"",
        "\"nonoise\"",
        "\"Now loading images (this may take a few minutes) ...\"",
        "'videos_v2_test_all_1000.txt'",
        "'r'",
        "'videos_v2_test_nonoise_1000.txt'",
        "'r'",
        "\"Finished with loading images.\"",
        "\"\"",
        "\"videos_v2_train_all_mean.binaryproto\"",
        "\"rb\"",
        "\"videos_v2_train_nonoise_mean.binaryproto\"",
        "\"rb\"",
        "\"Finished with numpy_mean: \"",
        "\"Currently on caffemodel of \"",
        "\"snapshots/\"",
        "\"Now predicting on it ...\"",
        "\"_preds\""
    ],
    "variables": [
        "caffe_root",
        "image_root",
        "output_directory",
        "all_data",
        "image_root",
        "image_root",
        "MODEL_FILE",
        "MODEL_FILE",
        "MODEL_FILE",
        "PRETRAINED_FILES",
        "IMAGE_FILES",
        "blob",
        "data",
        "data",
        "data",
        "arr",
        "numpy_mean",
        "net",
        "predictions"
    ],
    "comments": [
        "First, the boring part...",
        "",
        "MAIN #",
        "",
        "Important! Set false if we want to use our nonoise data.",
        "Step 1: MODEL_FILE is the prototxt file, PRETRAINED contains the .caffe models with weights.",
        "EDIT: These are NOT the train/val prototxt files, but the DEPLOYMENT prototxt files!!!",
        "Note that we will need \"snapshots/\" prepended.",
        "Step 2: Now deal with the image files, and then load/format them for caffe.",
        "We have done this earlier in caffeimages_test_{all,nonoise}.gz so we can just do np.loadtxt(...)",
        "Note that we can use the original text for adding image roots. BUT we do know that these classes",
        "are arranged in 0-1-2-3 fashion in a repeated manner.",
        "Step 3: Create the mean file. I THINK this is correct...",
        "Step 4: Now let's get to classification. For the sake of being modular, save all this to txt",
        "files. Then we can plot this information. Make sure IMAGE_FILES_CAFFE is OK!",
        "TODO is this raw_scale and image_dim appropriate?",
        "Predicts on everything in this file"
    ],
    "docstrings": [
        "'''\n(c) May 2015 by Daniel Seita\n\nThis script will use the caffe snapshots to classify images in our testing set. This accuracy is\nultimately one of the main things we should be reporting. We will need to iterate through lots of\ndifferent snapshots. In addition, for each snapshot, we have 8000 testing images to assess, with\n2000 per class.\n\nSome assumptions:\n\n(1) This file should be in the CS280_FinalProject directory, which is in \n    {caffe_root}/CS280_FinalProject\nand it also has a \"snapshots\" folder inside it, i.e., \n    {caffe_root}/CS280_FinalProject/snapshots\nthat will contain the snapshots that I need to provide as input to the code. Use the function\nos.listdir(\"snapshots\") to list all the snapshots, then grab those that end in \".caffemodel\".\n\n(2) This file is in the same directory as the files\n    videos_v2_test_all.txt\n    videos_v2_test_nonoise.txt\nThese will contain the testing image file names. The raw path should be specified earlier.\n\n(3) We also need to make it clear when we are using \"nonoise\" or \"all\" data.\n\n(4) For the mean file, it's a little more complicated; see some stuff on the documentation.\n'''"
    ],
    "functions": [],
    "classes": []
}