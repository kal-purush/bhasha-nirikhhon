{
    "identifiers": [
        "os",
        "json",
        "logging",
        "collections",
        "deque",
        "xml",
        "dom",
        "minidom",
        "parseString",
        "libmproxy",
        "protocol",
        "http",
        "decoded",
        "deque",
        "path",
        "logging",
        "info",
        "path",
        "open",
        "path",
        "fp",
        "line",
        "fp",
        "_payloads",
        "append",
        "line",
        "folder",
        "root",
        "dirs",
        "files",
        "os",
        "walk",
        "folder",
        "name",
        "name",
        "name",
        "endswith",
        "files",
        "os",
        "path",
        "join",
        "root",
        "name",
        "os",
        "path",
        "basename",
        "path",
        "startswith",
        "load_payload_file",
        "path",
        "context",
        "flow",
        "decoded",
        "flow",
        "response",
        "json",
        "loads",
        "flow",
        "response",
        "content",
        "_payloads",
        "popleft",
        "json",
        "dumps",
        "resp",
        "context",
        "flow",
        "decoded",
        "flow",
        "response",
        "parseString",
        "flow",
        "response",
        "content",
        "_payloads",
        "popleft",
        "root",
        "toprettyxml",
        "context",
        "argv",
        "logging",
        "basicConfig",
        "filename",
        "format",
        "level",
        "logging",
        "DEBUG",
        "logging",
        "info",
        "len",
        "argv",
        "os",
        "path",
        "exists",
        "argv",
        "logging",
        "info",
        "argv",
        "load_payload_dir",
        "argv",
        "logging",
        "error",
        "argv",
        "logging",
        "info",
        "len",
        "_payloads",
        "context",
        "flow",
        "logging",
        "debug",
        "flow",
        "response",
        "headers",
        "flow",
        "response",
        "headers",
        "lower",
        "JSON_MIMES",
        "flow",
        "response",
        "fuzz_json",
        "context",
        "flow",
        "flow",
        "response",
        "headers",
        "lower",
        "XML_MIMES",
        "flow",
        "response",
        "fuzz_xml",
        "context",
        "flow",
        "logging",
        "debug",
        "flow",
        "response",
        "headers",
        "logging",
        "debug",
        "logging",
        "exception"
    ],
    "literals": [
        "'application/json'",
        "'application/x-javascript'",
        "'text/javascript'",
        "'text/x-javascript'",
        "'text/x-json'",
        "'application/xml'",
        "'text/xml'",
        "\"Loading payloads from file: %s\"",
        "'r'",
        "'.txt'",
        "'_'",
        "'mitmfuzz.log'",
        "'[%(levelname)s] %(asctime)s - %(message)s'",
        "\"Starting up ...\"",
        "\"Loading payload(s) from %s\"",
        "\"Fuzzing payload directory '%s' does not exist\"",
        "\"Loaded %d fuzzing payload(s)\"",
        "\"Intercepting a response ...\"",
        "'Content-type'",
        "'Content-type'",
        "'Content-type'",
        "\"No fuzzers for content type '%s', skipping.\"",
        "'Content-type'",
        "\"No Content-type header in response data\"",
        "\"Callback response threw an exception\""
    ],
    "variables": [
        "JSON_MIMES",
        "XML_MIMES",
        "_payloads",
        "path",
        "resp",
        "payload",
        "root",
        "payload",
        "content",
        "content"
    ],
    "comments": [
        "!/usr/bin/env python",
        "Put fuzz here",
        "Put fuzz here"
    ],
    "docstrings": [
        "'''\nMITM Fuzzer for use with MITMProxy\n\nUsage:\nmitmproxy -s \"fuzz.py ./fuzzdb/<foo>\"\n'''",
        "''' Load a file into the payload deque '''",
        "'''\n    Recursively walk thru directories and load files that end with .txt\n    but do not start with a '_' character.\n    '''",
        "''' Fuzz a JSON response '''",
        "''' Fuzz an XML response '''",
        "''' Initial entry point, sets up logging and loads payloads '''",
        "''' Callback fired upon each response thru the proxy '''"
    ],
    "functions": [
        "load_payload_file",
        "load_payload_dir",
        "fuzz_json",
        "fuzz_xml",
        "start",
        "response"
    ],
    "classes": []
}