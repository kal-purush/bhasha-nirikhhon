{
    "identifiers": [
        "angular",
        "options",
        "result",
        "reason",
        "angular",
        "angular",
        "angular",
        "reason",
        "result",
        "angular",
        "modalInstance",
        "modal",
        "modalInstance",
        "result",
        "modalInstance",
        "reason",
        "reason",
        "page",
        "page",
        "element",
        "element",
        "value",
        "triggers",
        "element",
        "angular",
        "trigger",
        "options",
        "angular",
        "angular"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "Type definitions for Angular UI Bootstrap 0.11.0",
        "Project: https://github.com/angular-ui/bootstrap",
        "Definitions by: Brian Surowiec <https://github.com/xt0rted>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "<reference path=\"../angularjs/angular.d.ts\" />"
    ],
    "docstrings": [
        "* Controls whether expanding an item will cause the other items to close.\n         *\n         * @default true",
        "* @default: 'active'",
        "* @default: 'Click'",
        "* Format of day in month.\n         *\n         * @default 'dd'",
        "* Format of month in year.\n         *\n         * @default 'MMM'",
        "* Format of year in year range.\n         *\n         * @default 'yyyy'",
        "* Format of day in week header.\n         *\n         * @default 'EEE'",
        "* Format of title when selecting day.\n         *\n         * @default 'MMM yyyy'",
        "* Format of title when selecting month.\n         *\n         * @default 'yyyy'",
        "* Whether to display week numbers.\n         *\n         * @default true",
        "* Starting day of the week from 0-6 where 0=Sunday and 6=Saturday.\n         *\n         * @default 0",
        "* Number of years displayed in year selection.\n         *\n         * @default 20",
        "* Defines the minimum available date.\n         *\n         * @default null",
        "* Defines the maximum available date.\n         *\n         * @default null",
        "* The format for displayed dates.\n         *\n         * @default 'yyyy-MM-dd'",
        "* The text to display for the current day button.\n         *\n         * @default 'Today'",
        "* The text to display for the toggling week numbers button.\n         *\n         * @default 'Weeks'",
        "* The text to display for the clear button.\n         *\n         * @default 'Clear'",
        "* The text to display for the close button.\n         *\n         * @default 'Done'",
        "* Whether to close calendar when a date is chosen.\n         *\n         * @default true",
        "* Append the datepicker popup element to `body`, rather than inserting after `datepicker-popup`.\n         *\n         * @default false",
        "* Whether to display a button bar underneath the datepicker.\n         *\n         * @default true",
        "* @param {IModalSettings} options\n         * @returns {IModalServiceInstance}",
        "* a method that can be used to close a modal, passing a result",
        "* a method that can be used to dismiss a modal, passing a reason",
        "* a promise that is resolved when a modal is closed and rejected when a modal is dismissed",
        "* a promise that is resolved when a modal gets opened after downloading content's template and resolving all variables",
        "* Those methods make it easy to close a modal window without a need to create a dedicated controller",
        "* Dismiss the dialog without assigning a value to the promise output",
        "* Close the dialog resolving the promise to the given value",
        "* a path to a template representing modal's content",
        "* inline template representing the modal's content",
        "* a scope instance to be used for the modal's content (actually the $modal service is going to create a child scope of a provided scope).\n         * Defaults to `$rootScope`.",
        "* a controller for a modal instance - it can initialize scope used by modal.\n         * A controller can be injected with `$modalInstance`",
        "*  an alternative to the controller-as syntax, matching the API of directive definitions.\n         *  Requires the controller option to be provided as well",
        "* members that will be resolved and passed to the controller as locals; it is equivalent of the `resolve` property for AngularJS routes",
        "* controls the presence of a backdrop\n         * Allowed values:\n         *   - true (default)\n         *   - false (no backdrop)\n         *   - 'static' backdrop is present but modal window is not closed when clicking outside of the modal window\n         *\n         * @default true",
        "* indicates whether the dialog should be closable by hitting the ESC key, defaults to true",
        "* additional CSS class(es) to be added to a modal window template",
        "* optional size of modal window. Allowed values: 'sm' (small) or 'lg' (large). Requires Bootstrap 3.1.0 or later",
        "* a path to a template overriding modal's window template",
        "* Opens a new modal instance.",
        "* Closes a modal instance with an optional result.",
        "* Dismisses a modal instance with an optional reason.",
        "* Dismiss all open modal instances with an optional reason that will be passed to each instance.",
        "* Gets the topmost modal instance that is open.",
        "* Current page number. First page is 1.",
        "* Total number of items in all pages.",
        "* Maximum number of items per page. A value less than one indicates all items on one page.\n         *\n         * @default 10",
        "* Limit number for pagination size.\n         *\n         * @default: null",
        "* An optional expression assigned the total number of pages to display.\n         *\n         * @default angular.noop",
        "* Whether to keep current page in the middle of the visible ones.\n         *\n         * @default true",
        "* An optional expression called when a page is selected having the page number as argument.\n         *\n         * @default null",
        "* Whether to display Previous / Next buttons.\n         *\n         * @default true",
        "* Text for Previous button.\n         *\n         * @default 'Previous'",
        "* Text for Next button.\n         *\n         * @default 'Next'",
        "* Whether to display First / Last buttons.\n         *\n         * @default false",
        "* Text for First button.\n         *\n         * @default 'First'",
        "* Text for Last button.\n         *\n         * @default 'Last'",
        "* Whether to align each link to the sides.\n         *\n         * @default true",
        "* Current page number. First page is 1.",
        "* Total number of items in all pages.",
        "* Maximum number of items per page. A value less than one indicates all items on one page.\n         *\n         * @default 10",
        "* An optional expression assigned the total number of pages to display.\n         *\n         * @default angular.noop",
        "* An optional expression called when a page is selected having the page number as argument.\n         *\n         * @default null",
        "* Text for Previous button.\n         *\n         * @default '« Previous'",
        "* Text for Next button.\n         *\n         * @default 'Next »'",
        "* Provides a read-only equivalent of jQuery's position function.",
        "* Provides a read-only equivalent of jQuery's offset function.",
        "* Whether bars use transitions to achieve the width change.\n         *\n         * @default: true",
        "* A number that specifies the total value of bars that is required.\n         *\n         * @default: 100",
        "* Changes the number of icons.\n         *\n         * @default: 5",
        "* A variable used in the template to specify the state for selected icons.\n         *\n         * @default: null",
        "* A variable used in the template to specify the state for unselected icons.\n         *\n         * @default: null",
        "* Number of hours to increase or decrease when using a button.\n         *\n         * @default 1",
        "* Number of minutes to increase or decrease when using a button.\n         *\n         * @default 1",
        "* Whether to display 12H or 24H mode.\n         *\n         * @default true",
        "* Meridian labels based on locale. To override you must supply an array like ['AM', 'PM'].\n         *\n         * @default null",
        "* Whether the user can type inside the hours & minutes input.\n         *\n         * @default false",
        "* Whether the user can scroll inside the hours & minutes input to increase or decrease it's values.\n         *\n         * @default true",
        "* Where to place it? Defaults to 'top', but also accepts 'right', 'bottom', or 'left'.\n         *\n         * @default 'top'",
        "* Should it fade in and out?\n         *\n         * @default true",
        "* For how long should the user have to have the mouse over the element before the tooltip shows (in milliseconds)?\n         *\n         * @default 0",
        "* Should the tooltip be appended to `$body` instead of the parent element?\n         *\n         * @default false",
        "* Provide a set of defaults for certain tooltip and popover attributes.",
        "* Extends the default trigger mappings with mappings of your own. E.g. `{ 'openTrigger': 'closeTrigger' }`.",
        "* The browser specific animation event name.",
        "* The browser specific transition event name.",
        "* Provides a consistent interface to trigger CSS 3 transitions and to be informed when they complete.\n         *\n         * @param element The DOMElement that will be animated\n         * @param trigger The thing that will cause the transition to start:\n         *   - As a string, it represents the css class to be added to the element.\n         *   - As an object, it represents a hash of style attributes to be applied to the element.\n         *   - As a function, it represents a function to be called that will cause the transition to occur.\n         * @param options Optional settings for the transition.\n         *\n         * @return A promise that is resolved when the transition finishes."
    ],
    "functions": [],
    "classes": []
}