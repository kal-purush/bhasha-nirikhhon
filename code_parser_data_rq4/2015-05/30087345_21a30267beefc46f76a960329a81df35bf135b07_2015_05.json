{
    "identifiers": [
        "MediaPlayer",
        "id",
        "fragmentDict",
        "fragmentDict",
        "fragmentDict",
        "id",
        "fragmentDict",
        "id",
        "scheduleControllerValue",
        "scheduleControllerValue",
        "scheduleController",
        "id",
        "scheduleController",
        "id",
        "scheduleController",
        "id",
        "scheduleControllerValue",
        "scheduleControllerValue",
        "context",
        "callback",
        "context",
        "mediaInfo",
        "context",
        "context",
        "context",
        "progressEvent",
        "scheduleController",
        "streamId",
        "mediaType",
        "context",
        "scheduleCtrl",
        "fragmentModel",
        "MediaPlayer",
        "MediaPlayer",
        "MediaPlayer",
        "MediaPlayer",
        "concurrentCount",
        "isNaN",
        "req",
        "setFragmentRequestDict",
        "mediaType",
        "req",
        "fragmentInfo",
        "fragmentDict",
        "mediaType",
        "req",
        "fragmentInfo",
        "req",
        "abandonDict",
        "fragmentInfo",
        "callback",
        "switchRequest",
        "fragmentInfo",
        "fragmentInfo",
        "req",
        "fragmentInfo",
        "req",
        "fragmentInfo",
        "req",
        "fragmentInfo",
        "req",
        "fragmentInfo",
        "req",
        "fragmentInfo",
        "now",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "GRACE_TIME_THRESHOLD",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "MediaPlayer",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "ABANDON_MULTIPLIER",
        "trackInfo",
        "callback",
        "switchRequest",
        "abandonDict",
        "fragmentInfo",
        "abrController",
        "mediaInfo",
        "fragmentInfo",
        "switchRequest",
        "MediaPlayer",
        "newQuality",
        "MediaPlayer",
        "abandonDict",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentDict",
        "mediaType",
        "fragmentInfo",
        "mediaType",
        "fragmentInfo",
        "newQuality",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentInfo",
        "fragmentDict",
        "mediaType",
        "fragmentInfo",
        "callback",
        "switchRequest",
        "fragmentDict",
        "abandonDict",
        "scheduleController",
        "MediaPlayer",
        "MediaPlayer"
    ],
    "literals": [
        "\"use strict\"",
        "\"XXX\"",
        "\"id: \"",
        "\"kbps: \"",
        "\"etd: \"",
        "\"et: \"",
        "\"AbandonRequestsRule ( \"",
        "\"frag id\"",
        "\") is asking to abandon and switch to quality to \"",
        "\" measured bandwidth was\""
    ],
    "variables": [
        "GRACE_TIME_THRESHOLD",
        "ABANDON_MULTIPLIER",
        "fragmentDict",
        "abandonDict",
        "scheduleController",
        "setFragmentRequestDict",
        "id",
        "now",
        "mediaInfo",
        "mediaType",
        "streamId",
        "progressEvent",
        "trackInfo",
        "req",
        "scheduleCtrl",
        "abrController",
        "fragmentModel",
        "concurrentCount",
        "fragmentInfo",
        "switchRequest",
        "newQuality"
    ],
    "comments": [
        "getAggragateBandwidth = function(mediaType, concurrentCount){",
        "var tbl = 0,",
        "tet = 0;",
        "for (var key in fragmentDict[mediaType]) {",
        "var obj = fragmentDict[mediaType][key];",
        "if (obj.bytesLoaded < obj.bytesTotal && obj.elapsedTime >= GRACE_TIME_THRESHOLD) { //check if obj is complete or not",
        "tbl += obj.bytesLoaded;",
        "tet += obj.elapsedTime;",
        "}else{",
        "delete fragmentDict[mediaType][key];//delete entries that are complete.",
        "}",
        "}",
        "var measuredBandwidthInKbps = Math.round((tbl*8/tet) * concurrentCount);",
        "return measuredBandwidthInKbps;",
        "};",
        "setup some init info based on first progress event",
        "this.log(\"XXX FRAG ID : \" ,fragmentInfo.id, \" *****************\");",
        "update info base on subsequent progress events until completed.",
        "fragmentInfo.measuredBandwidthInKbps = (concurrentCount > 1) ? getAggragateBandwidth.call(this, mediaType, concurrentCount) :  Math.round(fragmentInfo.bytesLoaded*8/fragmentInfo.elapsedTime);"
    ],
    "docstrings": [
        "* The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE."
    ],
    "functions": [],
    "classes": []
}