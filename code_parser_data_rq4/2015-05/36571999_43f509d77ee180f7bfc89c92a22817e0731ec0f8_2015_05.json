{
    "identifiers": [
        "dependencies",
        "key",
        "key",
        "id",
        "id",
        "id",
        "modules",
        "config",
        "modules",
        "modules",
        "ready",
        "modules",
        "ready",
        "errback",
        "err",
        "errback",
        "err",
        "context",
        "depArray",
        "config",
        "key",
        "func",
        "deps",
        "ready",
        "ready",
        "require",
        "exports",
        "key",
        "name",
        "deps",
        "ready",
        "name",
        "ready"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "requirejs",
        "require",
        "define"
    ],
    "comments": [
        "Type definitions for RequireJS 2.1.8",
        "Project: http://requirejs.org/",
        "Definitions by: Josh Baldwin <https://github.com/jbaldwin/>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "require-2.1.8.d.ts may be freely distributed under the MIT license.\n\nCopyright (c) 2013 Josh Baldwin https://github.com/jbaldwin/require.d.ts\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.",
        "The root path to use for all module lookups.",
        "Path mappings for module names not found directly under",
        "baseUrl.",
        "Dictionary of Shim's.",
        "does not cover case of key->string[]",
        "todo: not sure what to do with this guy",
        "Ambient declarations for 'require' and 'define'"
    ],
    "docstrings": [
        "* The error ID that maps to an ID on a web page.\n\t*",
        "* Required modules.\n\t*",
        "* The original error, if there is one (might be null).\n\t*",
        "* List of dependencies.\n\t*",
        "* Name the module will be exported as.\n\t*",
        "* Initialize function with all dependcies passed in,\n\t* if the function returns a value then that value is used\n\t* as the module export value instead of the object\n\t* found via the 'exports' string.\n\t* @param dependencies\n\t* @return\n\t*",
        "* For the given module prefix, instead of loading the\n\t* module with the given ID, substitude a different\n\t* module ID.\n\t*\n\t* @example\n\t* requirejs.config({\n\t*\tmap: {\n\t*\t\t'some/newmodule': {\n\t*\t\t\t'foo': 'foo1.2'\n\t*\t\t},\n\t*\t\t'some/oldmodule': {\n\t*\t\t\t'foo': 'foo1.0'\n\t*\t\t}\n\t*\t}\n\t* });\n\t*",
        "* AMD configurations, use module.config() to access in\n\t* define() functions\n\t*",
        "* Configures loading modules from CommonJS packages.\n\t*",
        "* The number of seconds to wait before giving up on loading\n\t* a script.  The default is 7 seconds.\n\t*",
        "* A name to give to a loading context.  This allows require.js\n\t* to load multiple versions of modules in a page, as long as\n\t* each top-level require call specifies a unique context string.\n\t*",
        "* An array of dependencies to load.\n\t*",
        "* A function to pass to require that should be require after\n\t* deps have been loaded.\n\t* @param modules\n\t*",
        "* If set to true, an error will be thrown if a script loads\n\t* that does not call define() or have shim exports string\n\t* value that can be checked.\n\t*",
        "* If set to true, document.createElementNS() will be used\n\t* to create script elements.\n\t*",
        "* Extra query string arguments appended to URLs that RequireJS\n\t* uses to fetch resources.  Most useful to cachce bust when\n\t* the browser or server is not configured correcty.\n\t*\n\t* @example\n\t* urlArgs: \"bust= + (new Date()).getTime()\n\t*",
        "* Specify the value for the type=\"\" attribute used for script\n\t* tags inserted into the document by RequireJS.  Default is\n\t* \"text/javascript\".  To use Firefox's JavasScript 1.8\n\t* features, use \"text/javascript;version=1.8\".\n\t*",
        "*\n\t*",
        "*\n*",
        "*\n\t*",
        "*\n\t*",
        "*\n\t*",
        "*\n\t*",
        "*\n\t*",
        "*\n\t*",
        "* Configure require.js\n\t*",
        "* CommonJS require call\n\t* @param module Module to load\n\t* @return The loaded module",
        "* Start the main app logic.\n\t* Callback is optional.\n\t* Can alternatively use deps and callback.\n\t* @param modules Required modules to load.\n\t*",
        "* @see Require()\n\t* @param ready Called when required modules are ready.\n\t*",
        "* @see http://requirejs.org/docs/api.html#errbacks\n\t* @param ready Called when required modules are ready.\n\t*",
        "* Generate URLs from require module\n\t* @param module Module to URL\n\t* @return URL string\n\t*",
        "* Returns true if the module has already been loaded and defined.\n\t* @param module Module to check\n\t*",
        "* Returns true if the module has already been requested or is in the process of loading and should be available at some point.\n\t* @param module Module to check\n\t*",
        "* On Error override\n\t* @param err\n\t*",
        "* Undefine a module\n\t* @param module Module to undefine.\n\t*",
        "* Semi-private function, overload in special instance of undef()\n\t*",
        "* Define Simple Name/Value Pairs\n\t* @param config Dictionary of Named/Value pairs for the config.\n\t*",
        "* Define function.\n\t* @param func: The function module.\n\t*",
        "* Define function with dependencies.\n\t* @param deps List of dependencies module IDs.\n\t* @param ready Callback function when the dependencies are loaded.\n\t*\tcallback param deps module dependencies\n\t*\tcallback return module definition\n\t*",
        "*  Define module with simplified CommonJS wrapper.\n\t* @param ready\n\t*\tcallback require requirejs instance\n\t*\tcallback exports exports object\n\t*\tcallback module module\n\t*\tcallback return module definition\n\t*",
        "* Define a module with a name and dependencies.\n\t* @param name The name of the module.\n\t* @param deps List of dependencies module IDs.\n\t* @param ready Callback function when the dependencies are loaded.\n\t*\tcallback deps module dependencies\n\t*\tcallback return module definition\n\t*",
        "* Define a module with a name.\n\t* @param name The name of the module.\n\t* @param ready Callback function when the dependencies are loaded.\n\t*\tcallback return module definition\n\t*",
        "* Used to allow a clear indicator that a global define function (as needed for script src browser loading) conforms\n\t* to the AMD API, any global define function SHOULD have a property called \"amd\" whose value is an object.\n\t* This helps avoid conflict with any other existing JavaScript code that could have defined a define() function\n\t* that does not conform to the AMD API.\n\t* define.amd.jQuery is specific to jQuery and indicates that the loader is able to account for multiple version\n\t* of jQuery being loaded simultaneously."
    ],
    "functions": [],
    "classes": []
}