{
    "identifiers": [
        "s",
        "eventName",
        "callback",
        "context",
        "eventName",
        "eventName",
        "events",
        "callback",
        "context",
        "eventName",
        "callback",
        "context",
        "eventName",
        "onceCallback",
        "context",
        "callback",
        "arguments",
        "onceCallback",
        "callback",
        "eventName",
        "callback",
        "context",
        "eventName",
        "callback",
        "context",
        "eventName",
        "callback",
        "context",
        "eventName",
        "eventName",
        "eventNames",
        "i",
        "l",
        "i",
        "eventNames",
        "i",
        "name",
        "events",
        "callback",
        "context",
        "events",
        "events",
        "events",
        "j",
        "j",
        "events",
        "j",
        "context",
        "eventCallback",
        "callback",
        "eventCallback",
        "callback",
        "callback",
        "eventCallback",
        "context",
        "eventCallback",
        "context",
        "eventCallback",
        "callback",
        "eventCallback",
        "callback",
        "events",
        "j",
        "eventName",
        "args",
        "eventName",
        "events",
        "i",
        "events",
        "i",
        "events",
        "i",
        "args"
    ],
    "literals": [
        "'use strict'",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "events",
        "onceCallback",
        "eventNames",
        "i",
        "l",
        "name",
        "events",
        "j",
        "eventCallback",
        "remove",
        "events",
        "i"
    ],
    "comments": [
        "replace by delegate to avoid some case like:",
        "model.once('change', function() {model.off('change')}); // should be triggered",
        "model.once('change', function() {console.log('boubou')}); // should not be triggered",
        "or",
        "model.once('change', function() {console.log('foo')});",
        "model.once('change', function() {console.log('bar')}); // crash.",
        "not bind because we need to keep the trigger context",
        "recursive clean?"
    ],
    "docstrings": [
        "* Bind an event to a callback function.\n     * @param eventName Name of the event to bind\n     * @param callback Callback to call when the event fires\n     * @param context Context of the callback to call\n     *",
        "* Bind an event to be triggered only a single time. The callback will be remove after the first callback's invokation.\n     * @param eventName Name of the event to bind\n     * @param callback Callback to call when the event fires\n     * @param context Context of the callback to call\n     *",
        "* Remove one or many callback for an event.\n     * @param eventName Name of the event to unbind. If null remove all events.\n     * @param callback Callback to remove for the event. If null remove all callback with this `context` for the event.\n     * @param context Context of the callback to remove. If null remove all callback with this callback.\n     *",
        "* Trigger the event, firing all bound callback. Callbacks are passed all arguments passed to trigger except the eventName.\n     * @param eventName Name of the event to triggered\n     * @param args All arguments to pass to the callbacks.\n     *"
    ],
    "functions": [
        "on",
        "once",
        "off",
        "trigger"
    ],
    "classes": [
        "EventDispatcher"
    ]
}