{
    "identifiers": [
        "actual",
        "expected",
        "message",
        "actual",
        "expected",
        "message",
        "amount",
        "actual",
        "expected",
        "message",
        "actual",
        "expected",
        "message",
        "actual",
        "expected",
        "message",
        "actual",
        "expected",
        "message",
        "actual",
        "expected",
        "message",
        "state",
        "message",
        "actual",
        "expected",
        "message",
        "block",
        "expected",
        "message",
        "block",
        "message",
        "block",
        "expected",
        "message",
        "block",
        "message",
        "decrement",
        "increment",
        "callback",
        "callback",
        "details",
        "callback",
        "details",
        "callback",
        "details",
        "callback",
        "details",
        "callback",
        "details",
        "callback",
        "details",
        "name",
        "expected",
        "test",
        "name",
        "test",
        "amount",
        "name",
        "lifecycle",
        "title",
        "expected",
        "test",
        "title",
        "test",
        "a",
        "b",
        "result",
        "actual",
        "expected",
        "message",
        "deepEqual",
        "actual",
        "expected",
        "message",
        "equal",
        "actual",
        "expected",
        "message",
        "notDeepEqual",
        "actual",
        "expected",
        "message",
        "notEqual",
        "actual",
        "expected",
        "message",
        "notStrictEqual",
        "actual",
        "expected",
        "message",
        "ok",
        "state",
        "message",
        "strictEqual",
        "actual",
        "expected",
        "message",
        "block",
        "expected",
        "message",
        "block",
        "message",
        "start",
        "decrement",
        "stop",
        "increment",
        "begin",
        "callback",
        "done",
        "callback",
        "details",
        "log",
        "callback",
        "details",
        "moduleDone",
        "callback",
        "details",
        "moduleStart",
        "callback",
        "name",
        "testDone",
        "callback",
        "details",
        "testStart",
        "callback",
        "details",
        "asyncTest",
        "name",
        "expected",
        "test",
        "asyncTest",
        "name",
        "test",
        "expect",
        "amount",
        "test",
        "title",
        "expected",
        "test",
        "test",
        "title",
        "test",
        "notPropEqual",
        "actual",
        "expected",
        "message",
        "propEqual",
        "actual",
        "expected",
        "message",
        "equiv",
        "a",
        "b"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [
        "raises",
        "QUnit"
    ],
    "comments": [
        "Type definitions for QUnit v1.16",
        "Project: http://qunitjs.com/",
        "Definitions by: Diullei Gomes <https://github.com/diullei>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "ASSERT",
        "ASYNC CONTROL",
        "CALLBACKS",
        "CONFIGURATION",
        "TEST",
        "ASSERT",
        "ASYNC CONTROL",
        "CALLBACKS",
        "TEST",
        "declare var module: (name: string, lifecycle?: LifecycleObject) => any;",
        "https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L1568",
        "https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L661",
        "QUNIT"
    ],
    "docstrings": [
        "* The number of failed assertions",
        "* The number of passed assertions",
        "* The total number of assertions",
        "* The time in milliseconds it took tests to run from start to finish.",
        "* The boolean result of an assertion, true means passed, false means failed.",
        "* One side of a comparision assertion. Can be undefined when ok() is used.",
        "* One side of a comparision assertion. Can be undefined when ok() is used.",
        "* A string description provided by the assertion.",
        "* The associated stacktrace, either from an exception or pointing to the source\n\t* of the assertion. Depends on browser support for providing stacktraces, so can be\n\t* undefined.",
        "* Name of the next module to run",
        "* Name of this module",
        "* The number of failed assertions",
        "* The number of passed assertions",
        "* The total number of assertions",
        "* TName of the next test to run",
        "* Name of the current module",
        "* The number of failed assertions",
        "* The number of passed assertions",
        "* The total number of assertions",
        "* The total runtime, including setup and teardown",
        "* Name of the next test to run",
        "* Name of the current module",
        "* Runs before each test",
        "* Runs after each test",
        "* Instruct QUnit to wait for an asynchronous operation.\n    *\n    * When your test has any asynchronous exit points, call assert.async() to get a unique\n    * resolution callback for each async operation. The callback returned from assert.async()\n    * will throw an Error if is invoked more than once.",
        "* A deep recursive comparison assertion, working on primitive types, arrays, objects,\n\t* regular expressions, dates and functions.\n\t*\n\t* The deepEqual() assertion can be used just like equal() when comparing the value of\n\t* objects, such that { key: value } is equal to { key: value }. For non-scalar values,\n\t* identity will be disregarded by deepEqual.\n\t*\n\t* @param actual Object or Expression being tested\n\t* @param expected Known comparison value\n\t* @param message A short description of the assertion",
        "* A non-strict comparison assertion, roughly equivalent to JUnit assertEquals.\n\t*\n\t* The equal assertion uses the simple comparison operator (==) to compare the actual\n\t* and expected arguments. When they are equal, the assertion passes: any; otherwise, it fails.\n\t* When it fails, both actual and expected values are displayed in the test result,\n\t* in addition to a given message.\n\t*\n\t* @param actual Expression being tested\n\t* @param expected Known comparison value\n\t* @param message A short description of the assertion",
        "* Specify how many assertions are expected to run within a test.\n    *\n    * To ensure that an explicit number of assertions are run within any test, use\n    * expect( number ) to register an expected count. If the number of assertions\n    * run does not match the expected count, the test will fail.\n    *\n    * @param amount Number of assertions in this test.",
        "* An inverted deep recursive comparison assertion, working on primitive types,\n\t* arrays, objects, regular expressions, dates and functions.\n\t*\n\t* The notDeepEqual() assertion can be used just like equal() when comparing the\n\t* value of objects, such that { key: value } is equal to { key: value }. For non-scalar\n\t* values, identity will be disregarded by notDeepEqual.\n\t*\n\t* @param actual Object or Expression being tested\n\t* @param expected Known comparison value\n\t* @param message A short description of the assertion",
        "* A non-strict comparison assertion, checking for inequality.\n\t*\n\t* The notEqual assertion uses the simple inverted comparison operator (!=) to compare\n\t* the actual and expected arguments. When they aren't equal, the assertion passes: any;\n\t* otherwise, it fails. When it fails, both actual and expected values are displayed\n\t* in the test result, in addition to a given message.\n\t*\n\t* @param actual Expression being tested\n\t* @param expected Known comparison value\n\t* @param message A short description of the assertion",
        "* A non-strict comparison assertion, checking for inequality.\n\t*\n\t* The notStrictEqual assertion uses the strict inverted comparison operator (!==)\n\t* to compare the actual and expected arguments. When they aren't equal, the assertion\n\t* passes: any; otherwise, it fails. When it fails, both actual and expected values are\n\t* displayed in the test result, in addition to a given message.\n\t*\n\t* @param actual Expression being tested\n\t* @param expected Known comparison value\n\t* @param message A short description of the assertion",
        "* A boolean assertion, equivalent to CommonJS’s assert.ok() and JUnit’s assertTrue().\n\t* Passes if the first argument is truthy.\n\t*\n\t* The most basic assertion in QUnit, ok() requires just one argument. If the argument\n\t* evaluates to true, the assertion passes; otherwise, it fails. If a second message\n\t* argument is provided, it will be displayed in place of the result.\n\t*\n\t* @param state Expression being tested\n\t* @param message A short description of the assertion",
        "* A strict type and value comparison assertion.\n\t*\n\t* The strictEqual() assertion provides the most rigid comparison of type and value with\n\t* the strict equality operator (===)\n\t*\n\t* @param actual Expression being tested\n\t* @param expected Known comparison value\n\t* @param message A short description of the assertion",
        "* Assertion to test if a callback throws an exception when run.\n\t*\n\t* When testing code that is expected to throw an exception based on a specific set of\n\t* circumstances, use throws() to catch the error object for testing and comparison.\n\t*\n\t* @param block Function to execute\n\t* @param expected Error Object to compare\n\t* @param message A short description of the assertion",
        "* @param block Function to execute\n\t* @param message A short description of the assertion",
        "* Alias of throws.\n    *\n    * In very few environments, like Closure Compiler, throws is considered a reserved word\n    * and will cause an error. For that case, an alias is bundled called raises. It has the\n    * same signature and behaviour, just a different name.\n    *\n    * @param block Function to execute\n    * @param expected Error Object to compare\n    * @param message A short description of the assertion",
        "* Alias of throws.\n    *\n    * In very few environments, like Closure Compiler, throws is considered a reserved word\n    * and will cause an error. For that case, an alias is bundled called raises. It has the\n    * same signature and behaviour, just a different name.\n    *\n    * @param block Function to execute\n    * @param message A short description of the assertion",
        "* Start running tests again after the testrunner was stopped. See stop().\n\t*\n\t* When your async test has multiple exit points, call start() for the corresponding number of stop() increments.\n\t*\n\t* @param decrement Optional argument to merge multiple start() calls into one. Use with multiple corrsponding stop() calls.",
        "* Stop the testrunner to wait for async tests to run. Call start() to continue.\n\t*\n\t* When your async test has multiple exit points, call stop() with the increment argument, corresponding to the number of start() calls you need.\n\t*\n\t* On Blackberry 5.0, window.stop is a native read-only function. If you deal with that browser, use QUnit.stop() instead, which will work anywhere.\n\t*\n\t* @param decrement Optional argument to merge multiple stop() calls into one. Use with multiple corrsponding start() calls.",
        "* Register a callback to fire whenever the test suite begins.\n\t*\n\t* QUnit.begin() is called once before running any tests. (a better would've been QUnit.start,\n\t* but thats already in use elsewhere and can't be changed.)\n\t*\n\t* @param callback Callback to execute",
        "* Register a callback to fire whenever the test suite ends.\n\t*\n\t* @param callback Callback to execute.",
        "* Register a callback to fire whenever an assertion completes.\n\t*\n\t* This is one of several callbacks QUnit provides. Its intended for integration scenarios like\n\t* PhantomJS or Jenkins. The properties of the details argument are listed below as options.\n\t*\n\t* @param callback Callback to execute.",
        "* Register a callback to fire whenever a module ends.\n\t*\n\t* @param callback Callback to execute.",
        "* Register a callback to fire whenever a module begins.\n\t*\n\t* @param callback Callback to execute.",
        "* Register a callback to fire whenever a test ends.\n\t*\n\t* @param callback Callback to execute.",
        "* Register a callback to fire whenever a test begins.\n\t*\n\t* @param callback Callback to execute.",
        "* QUnit has a bunch of internal configuration defaults, some of which are\n\t* useful to override. Check the description for each option for details.",
        "* Add an asynchronous test to run. The test must include a call to start().\n\t*\n\t* For testing asynchronous code, asyncTest will automatically stop the test runner\n\t* and wait for your code to call start() to continue.\n\t*\n\t* @param name Title of unit being tested\n\t* @param expected Number of assertions in this test\n\t* @param test Function to close over assertions",
        "* Add an asynchronous test to run. The test must include a call to start().\n\t*\n\t* For testing asynchronous code, asyncTest will automatically stop the test runner\n\t* and wait for your code to call start() to continue.\n\t*\n\t* @param name Title of unit being tested\n\t* @param test Function to close over assertions",
        "* Specify how many assertions are expected to run within a test.\n\t*\n\t* To ensure that an explicit number of assertions are run within any test, use\n\t* expect( number ) to register an expected count. If the number of assertions\n\t* run does not match the expected count, the test will fail.\n\t*\n\t* @param amount Number of assertions in this test.\n\t* @depricated since version 1.16",
        "* Group related tests under a single label.\n\t*\n\t* All tests that occur after a call to module() will be grouped into that module.\n\t* The test names will all be preceded by the module name in the test results.\n\t* You can then use that module name to select tests to run.\n\t*\n\t* @param name Label for this group of tests\n\t* @param lifecycle Callbacks to run before and after each test",
        "* Add a test to run.\n\t*\n\t* When testing the most common, synchronous code, use test().\n\t* The assert argument to the callback contains all of QUnit's assertion methods.\n\t* If you are avoiding using any of QUnit's globals, you can use the assert\n\t* argument instead.\n\t*\n\t* @param title Title of unit being tested\n\t* @param expected Number of assertions in this test\n\t* @param test Function to close over assertions",
        "* @param title Title of unit being tested\n\t* @param test Function to close over assertions",
        "* https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L1568",
        "* https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L897",
        "* https://github.com/jquery/qunit/blob/master/qunit/qunit.js#L839",
        "* A deep recursive comparison assertion, working on primitive types, arrays, objects,\n* regular expressions, dates and functions.\n*\n* The deepEqual() assertion can be used just like equal() when comparing the value of\n* objects, such that { key: value } is equal to { key: value }. For non-scalar values,\n* identity will be disregarded by deepEqual.\n*\n* @param actual Object or Expression being tested\n* @param expected Known comparison value\n* @param message A short description of the assertion",
        "* A non-strict comparison assertion, roughly equivalent to JUnit assertEquals.\n*\n* The equal assertion uses the simple comparison operator (==) to compare the actual\n* and expected arguments. When they are equal, the assertion passes: any; otherwise, it fails.\n* When it fails, both actual and expected values are displayed in the test result,\n* in addition to a given message.\n*\n* @param actual Expression being tested\n* @param expected Known comparison value\n* @param message A short description of the assertion",
        "* An inverted deep recursive comparison assertion, working on primitive types,\n* arrays, objects, regular expressions, dates and functions.\n*\n* The notDeepEqual() assertion can be used just like equal() when comparing the\n* value of objects, such that { key: value } is equal to { key: value }. For non-scalar\n* values, identity will be disregarded by notDeepEqual.\n*\n* @param actual Object or Expression being tested\n* @param expected Known comparison value\n* @param message A short description of the assertion",
        "* A non-strict comparison assertion, checking for inequality.\n*\n* The notEqual assertion uses the simple inverted comparison operator (!=) to compare\n* the actual and expected arguments. When they aren't equal, the assertion passes;\n* otherwise, it fails. When it fails, both actual and expected values are displayed\n* in the test result, in addition to a given message.\n*\n* @param actual Expression being tested\n* @param expected Known comparison value\n* @param message A short description of the assertion",
        "* A non-strict comparison assertion, checking for inequality.\n*\n* The notStrictEqual assertion uses the strict inverted comparison operator (!==)\n* to compare the actual and expected arguments. When they aren't equal, the assertion\n* passes; otherwise, it fails. When it fails, both actual and expected values are\n* displayed in the test result, in addition to a given message.\n*\n* @param actual Expression being tested\n* @param expected Known comparison value\n* @param message A short description of the assertion",
        "* A boolean assertion, equivalent to CommonJS’s assert.ok() and JUnit’s assertTrue().\n* Passes if the first argument is truthy.\n*\n* The most basic assertion in QUnit, ok() requires just one argument. If the argument\n* evaluates to true, the assertion passes; otherwise, it fails. If a second message\n* argument is provided, it will be displayed in place of the result.\n*\n* @param state Expression being tested\n* @param message A short description of the assertion",
        "* A strict type and value comparison assertion.\n*\n* The strictEqual() assertion provides the most rigid comparison of type and value with\n* the strict equality operator (===)\n*\n* @param actual Expression being tested\n* @param expected Known comparison value\n* @param message A short description of the assertion",
        "* Assertion to test if a callback throws an exception when run.\n*\n* When testing code that is expected to throw an exception based on a specific set of\n* circumstances, use throws() to catch the error object for testing and comparison.\n*\n* @param block Function to execute\n* @param expected Error Object to compare\n* @param message A short description of the assertion",
        "* @param block Function to execute\n* @param message A short description of the assertion",
        "* Start running tests again after the testrunner was stopped. See stop().\n*\n* When your async test has multiple exit points, call start() for the corresponding number of stop() increments.\n*\n* @param decrement Optional argument to merge multiple start() calls into one. Use with multiple corrsponding stop() calls.",
        "* Stop the testrunner to wait for async tests to run. Call start() to continue.\n*\n* When your async test has multiple exit points, call stop() with the increment argument, corresponding to the number of start() calls you need.\n*\n* On Blackberry 5.0, window.stop is a native read-only function. If you deal with that browser, use QUnit.stop() instead, which will work anywhere.\n*\n* @param decrement Optional argument to merge multiple stop() calls into one. Use with multiple corrsponding start() calls.",
        "* Register a callback to fire whenever the test suite begins.\n*\n* QUnit.begin() is called once before running any tests. (a better would've been QUnit.start,\n* but thats already in use elsewhere and can't be changed.)\n*\n* @param callback Callback to execute",
        "* Register a callback to fire whenever the test suite ends.\n*\n* @param callback Callback to execute.",
        "* Register a callback to fire whenever an assertion completes.\n*\n* This is one of several callbacks QUnit provides. Its intended for integration scenarios like\n* PhantomJS or Jenkins. The properties of the details argument are listed below as options.\n*\n* @param callback Callback to execute.",
        "* Register a callback to fire whenever a module ends.\n*\n* @param callback Callback to execute.",
        "* Register a callback to fire whenever a module begins.\n*\n* @param callback Callback to execute.",
        "* Register a callback to fire whenever a test ends.\n*\n* @param callback Callback to execute.",
        "* Register a callback to fire whenever a test begins.\n*\n* @param callback Callback to execute.",
        "* Add an asynchronous test to run. The test must include a call to start().\n*\n* For testing asynchronous code, asyncTest will automatically stop the test runner\n* and wait for your code to call start() to continue.\n*\n* @param name Title of unit being tested\n* @param expected Number of assertions in this test\n* @param test Function to close over assertions",
        "* Add an asynchronous test to run. The test must include a call to start().\n*\n* For testing asynchronous code, asyncTest will automatically stop the test runner\n* and wait for your code to call start() to continue.\n*\n* @param name Title of unit being tested\n* @param test Function to close over assertions",
        "* Specify how many assertions are expected to run within a test.\n*\n* To ensure that an explicit number of assertions are run within any test, use\n* expect( number ) to register an expected count. If the number of assertions\n* run does not match the expected count, the test will fail.\n*\n* @param amount Number of assertions in this test.\n* @depricated since version 1.16",
        "** conflict with TypeScript module keyword. Must be used on QUnit namespace",
        "* Add a test to run.\n*\n* When testing the most common, synchronous code, use test().\n* The assert argument to the callback contains all of QUnit's assertion methods.\n* If you are avoiding using any of QUnit's globals, you can use the assert\n* argument instead.\n*\n* @param title Title of unit being tested\n* @param expected Number of assertions in this test\n* @param test Function to close over assertions",
        "* @param title Title of unit being tested\n* @param test Function to close over assertions"
    ],
    "functions": [],
    "classes": []
}