{
    "identifiers": [
        "division",
        "collections",
        "defaultdict",
        "itertools",
        "product",
        "re",
        "ngram_counts",
        "join",
        "ngram",
        "ngram",
        "ngram_counts",
        "len",
        "ngram",
        "ngram_counts",
        "ngram",
        "ngram_counts",
        "sum",
        "ngram_counts",
        "ngram",
        "len",
        "ngram",
        "ngram",
        "ngram_counts",
        "emiss_counts",
        "sum",
        "key",
        "emiss_counts",
        "key",
        "key",
        "emiss_counts",
        "infile",
        "n",
        "defaultdict",
        "defaultdict",
        "n",
        "open",
        "infile",
        "corpus",
        "line",
        "corpus",
        "line",
        "tag_list",
        "line",
        "rstrip",
        "split",
        "tag_list",
        "pop",
        "tag_list",
        "append",
        "tag",
        "i",
        "xrange",
        "n",
        "tag_list",
        "i",
        "ngram_counts",
        "tag_sequence",
        "word",
        "emiss_counts",
        "tag",
        "word",
        "emiss_counts",
        "word",
        "n",
        "ngram_counts",
        "emiss_counts",
        "ngram_counts",
        "emiss_counts",
        "defaultdict",
        "defaultdict",
        "count_unique_unigrams",
        "ngram_counts",
        "count_total_words",
        "emiss_counts",
        "ngram",
        "ngram_counts",
        "keys",
        "len",
        "ngram",
        "ngram_counts",
        "ngram",
        "ngram_counts",
        "ngram",
        "ngram_counts",
        "ngram_counts",
        "ngram",
        "num_unique_tags",
        "key",
        "emiss_counts",
        "emiss_counts",
        "key",
        "ngram_counts",
        "key",
        "num_total_words",
        "qml_est",
        "eml_est",
        "ngram_counts",
        "tag_set",
        "beta",
        "defaultdict",
        "defaultdict",
        "ngram",
        "ngram_counts",
        "keys",
        "ngram_counts",
        "ngram",
        "len",
        "ngram",
        "ngram_counts",
        "ngram",
        "beta",
        "ngram_counts",
        "ngram",
        "ngram_counts",
        "alpha",
        "ngram",
        "qd_est",
        "ngram",
        "ngram",
        "alpha",
        "keys",
        "alpha",
        "ngram",
        "i",
        "xrange",
        "order",
        "i",
        "v",
        "sum",
        "ngram_counts",
        "w",
        "ngram_counts",
        "v",
        "w",
        "w",
        "tag_set",
        "v",
        "tag_set",
        "tag_set",
        "i",
        "tag_set",
        "ngram",
        "sum",
        "qd_est",
        "ngram",
        "ngram_counts",
        "ngram",
        "w",
        "w",
        "tag_set",
        "ngram",
        "product",
        "tag_set_list",
        "tag_set",
        "i",
        "tag_set",
        "ngram",
        "product",
        "tag_set_list",
        "ngram",
        "ngram",
        "ngram_counts",
        "ngram",
        "i",
        "alpha",
        "first",
        "ngram_counts",
        "last",
        "denom_counts",
        "first",
        "ngram_counts",
        "ngram",
        "alpha",
        "first",
        "qd_est",
        "last",
        "denom_counts",
        "first",
        "qd_est",
        "word",
        "k",
        "k",
        "re",
        "match",
        "word",
        "re",
        "match",
        "word",
        "re",
        "match",
        "word",
        "re",
        "match",
        "word",
        "re",
        "match",
        "word",
        "re",
        "match",
        "word",
        "pseudo",
        "word_seq",
        "q_params",
        "e_params",
        "tag_set",
        "use_pseudo",
        "order",
        "n",
        "n",
        "xrange",
        "order",
        "k",
        "word",
        "word_seq",
        "start",
        "tag_set",
        "i",
        "i",
        "xrange",
        "k",
        "order",
        "k",
        "tag_seq",
        "tag_seq",
        "product",
        "tag_set_list",
        "use_pseudo",
        "e_params",
        "word",
        "map_to_pseudo_word",
        "word",
        "k",
        "tag_seq",
        "tag_seq_list",
        "tag",
        "k",
        "order",
        "tag_set",
        "k",
        "tag",
        "tag_seq",
        "tag",
        "tag_seq",
        "tag_seq",
        "word",
        "pi_params",
        "pi_key",
        "q_params",
        "q_key",
        "e_params",
        "e_key",
        "temp",
        "pi_params",
        "k",
        "tag_seq",
        "temp",
        "tag",
        "k",
        "len",
        "word_seq",
        "pi_params",
        "k",
        "tag_seq",
        "q_params",
        "tag_seq",
        "temp_sent_prob",
        "sent_prob",
        "temp_sent_prob",
        "tag_seq",
        "sent_prob",
        "k",
        "final_tag_seq",
        "k",
        "xrange",
        "k",
        "order",
        "final_tag_seq",
        "insert",
        "bp_params",
        "k",
        "order",
        "final_tag_seq",
        "order",
        "final_tag_seq",
        "word_seq",
        "e_counts",
        "tag_set",
        "max",
        "tag",
        "word",
        "emiss_counts",
        "tag",
        "word",
        "tag",
        "tag_set",
        "iteritems",
        "key",
        "x",
        "x",
        "word",
        "word_seq",
        "infile",
        "tagger",
        "open",
        "infile",
        "corpus",
        "line",
        "corpus",
        "line",
        "word_seq",
        "tagger",
        "word_seq",
        "num_correct_words",
        "sum",
        "result",
        "i",
        "answer",
        "i",
        "i",
        "xrange",
        "len",
        "answer",
        "num_tagged_words",
        "len",
        "result",
        "result",
        "num_words",
        "len",
        "result",
        "line",
        "rstrip",
        "split",
        "word_seq",
        "append",
        "word",
        "answer",
        "append",
        "tag",
        "num_correct_words",
        "num_tagged_words",
        "num_tagged_words",
        "num_words",
        "precision_words",
        "recall_words",
        "precision_words",
        "recall_words",
        "precision_words",
        "recall_words",
        "fscore_words"
    ],
    "literals": [
        "''",
        "'_'",
        "'*'",
        "'\\n'",
        "'*'",
        "'STOP'",
        "' '",
        "'_'",
        "'*'",
        "'STOP'",
        "'STOP'",
        "'STOP'",
        "'STOP'",
        "'__firstWord__'",
        "r'[A-Z]+$'",
        "'__allCaps__'",
        "r'[A-Z]\\.$'",
        "'__capPeriod__'",
        "r'[A-Z]\\w*$'",
        "'__initCap__'",
        "r'[a-z]\\w*$'",
        "'__lowercase__'",
        "r'\\$[0-9][0-9,.]*$'",
        "'__currency__'",
        "r'[0-9]+[0-9-/.,A-Za-z]*$'",
        "'__number__'",
        "'__other__'",
        "'*'",
        "'*'",
        "'_'",
        "'*'",
        "'STOP'",
        "'*'",
        "'\\n'",
        "'*'",
        "' '"
    ],
    "variables": [
        "ngram_counts",
        "emiss_counts",
        "tag_list",
        "word",
        "tag",
        "word",
        "tag",
        "chunk",
        "tag_sequence",
        "tag_list",
        "qml_est",
        "eml_est",
        "num_unique_tags",
        "num_total_words",
        "qml_est",
        "ngram",
        "qml_est",
        "ngram",
        "eml_est",
        "key",
        "qd_est",
        "alpha",
        "qd_est",
        "ngram",
        "alpha",
        "ngram",
        "denom_counts",
        "tag_set_list",
        "denom_counts",
        "tag_set_list",
        "first",
        "last",
        "qd_est",
        "ngram",
        "qd_est",
        "ngram",
        "pseudo",
        "pseudo",
        "pseudo",
        "pseudo",
        "pseudo",
        "pseudo",
        "pseudo",
        "pseudo",
        "pi_params",
        "bp_params",
        "sent_prob",
        "tag_set_list",
        "tag_seq_list",
        "word",
        "pi_params",
        "k",
        "tag_seq",
        "pi_key",
        "q_key",
        "e_key",
        "temp",
        "pi_params",
        "k",
        "tag_seq",
        "bp_params",
        "k",
        "tag_seq",
        "temp_sent_prob",
        "sent_prob",
        "final_tag_seq",
        "final_tag_seq",
        "num_correct_words",
        "num_tagged_words",
        "num_words",
        "word_seq",
        "answer",
        "result",
        "word_seq",
        "answer",
        "word",
        "tag",
        "chunk",
        "precision_words",
        "recall_words",
        "fscore_words"
    ],
    "comments": [
        "create dictionaries to store ngram and emission counts",
        "initialize tag list to ['*','*','*',...]",
        "reached the end of a sentence",
        "if there is no data, just skip",
        "get word and tag from line",
        "add new tag to end of tag list",
        "increment count by 1 when ngram appears in corpus",
        "increment emmision count by 1, or reset tag list if no more words",
        "create dictionaries to store maximum likelihood estimates",
        "for transition and emission parameters",
        "get maximum likelihood estimates for transitions",
        "qml_est[(u,v,s)] = q_ml(s|u,v) = count(u,v,s) / count(u,v)",
        "get maximum likelihood estimates for emissions",
        "eml_est[s][x] = e_ml(x|s) = count(s -> x) / count(s)",
        "get discounted estimates",
        "if ngram[:-1] == ('DT','DT'):",
        "print qd_est[ngram], ngram, ngram[-1], ngram_counts[ngram], ngram_counts[ngram[:-1]]",
        "create missing mass",
        "divide missing mass in proportion to ngram estimates",
        "calculate denominator (sum of either ML or qd estimates)",
        "calculate values for unseen ngrams",
        "first word in sentence",
        "organization",
        "person name initial",
        "capitalized word",
        "uncapitalized word",
        "monetary amount (dollars)",
        "numeric value",
        "other",
        "base case for pi parameters, initialize backpointers",
        "probability words are seen with tags",
        "create list of tag sets for words at position k-order+1 to k",
        "create set of all possible tag sequences that end at position k",
        "map unseen words to pseudo-words",
        "iterate through tag sequences that end at position k",
        "initialize pi parameter",
        "loop through set of tags in leftmost position",
        "looks like k-1,(w,u)",
        "looks like w,u,v -- transition param v|w,u",
        "looks like v,x -- emission param x|v",
        "get largest pi parameter and remember arguments",
        "were we able to tag the sentence?",
        "retrieve tags for each word in the sentence",
        "store counts of tagged words",
        "if there is no data, just skip",
        "tagger will return either a list of tags (ex. ['DT','NN','VB'])",
        "or ['*','*',...'*'] if sentence could not be tagged",
        "get number of correctly tagged words",
        "reset sentence",
        "get word and tag, add to list",
        "calculate precision and recall"
    ],
    "docstrings": [
        "\"\"\"\n    Iterate through corpus, get n-gram counts and emission counts.\n    \"\"\"",
        "\"\"\"\n    Get maximum likelihood estimates for transition and emission\n    probabilities.\n    \"\"\"",
        "\"\"\"\n    Get discounted ML estimates for transition and emission\n    probabilities.\n    \"\"\"",
        "\"\"\"\n    Map low-frequency words at position k to appropriate\n    pseudo-words.\n    \"\"\"",
        "\"\"\"\n    Implementation of the Viterbi algorithm with backpointers. Returns\n    the tags that maximize the probability of a given sentence occuring,\n    based on an n-gram hidden markov model.\n\n    Args:\n        q_params (defaultdict): Transition probabilities. q(s|u,v) -> q_params(u,v,s)\n        e_params (defaultdict): Emission probabilities. e(x|s) -> e_params(s,x)\n        word_seq (list): The sentence to be tagged.\n        tag_set (set): Set of potential tags for a word.\n        order (int): The order of the Markov sequence. Defaults to 2.\n    \"\"\"",
        "\"\"\"\n    description goes here\n    Precision: # of correctly tagged words / # of tagged words\n    Recall: # of tagged words / # of words\n    \"\"\""
    ],
    "functions": [
        "get_unique_unigrams",
        "count_unique_unigrams",
        "count_total_words",
        "get_all_counts",
        "get_ml_estimates",
        "get_discounted_estimates",
        "map_to_pseudo_word",
        "run_viterbi",
        "run_baseline",
        "score_tagger"
    ],
    "classes": []
}