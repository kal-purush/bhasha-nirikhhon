{
    "identifiers": [
        "Express",
        "http",
        "e",
        "e",
        "e",
        "handler",
        "handler",
        "handler",
        "handler",
        "handler",
        "handler",
        "handler",
        "name",
        "handlers",
        "name",
        "handlers",
        "name",
        "handler",
        "name",
        "matcher",
        "name",
        "mapper",
        "param",
        "callback",
        "name",
        "matcher",
        "path",
        "handler",
        "handler",
        "path",
        "handler",
        "path",
        "handler",
        "Router",
        "options",
        "err",
        "http",
        "Express",
        "name",
        "name",
        "key",
        "charset",
        "lang",
        "size",
        "name",
        "defaultValue",
        "name",
        "options",
        "status",
        "body",
        "body",
        "http",
        "Express",
        "code",
        "code",
        "links",
        "path",
        "path",
        "options",
        "path",
        "fn",
        "path",
        "options",
        "fn",
        "path",
        "path",
        "options",
        "path",
        "fn",
        "path",
        "options",
        "fn",
        "path",
        "path",
        "filename",
        "path",
        "fn",
        "path",
        "filename",
        "fn",
        "obj",
        "filename",
        "field",
        "field",
        "value",
        "field",
        "field",
        "value",
        "field",
        "name",
        "options",
        "name",
        "val",
        "options",
        "name",
        "val",
        "options",
        "name",
        "val",
        "url",
        "url",
        "status",
        "url",
        "url",
        "status",
        "view",
        "options",
        "callback",
        "err",
        "html",
        "view",
        "callback",
        "err",
        "html",
        "err",
        "req",
        "res",
        "next",
        "req",
        "res",
        "next",
        "req",
        "res",
        "next",
        "param",
        "Express",
        "ext",
        "fn",
        "setting",
        "val",
        "name",
        "name",
        "handlers",
        "name",
        "handlers",
        "setting",
        "setting",
        "setting",
        "setting",
        "fn",
        "env0",
        "fn",
        "env0",
        "env1",
        "fn",
        "env0",
        "env1",
        "env2",
        "fn",
        "env0",
        "env1",
        "env2",
        "env3",
        "fn",
        "env0",
        "env1",
        "env2",
        "env3",
        "env4",
        "fn",
        "name",
        "options",
        "callback",
        "err",
        "html",
        "name",
        "callback",
        "err",
        "html",
        "port",
        "hostname",
        "backlog",
        "callback",
        "http",
        "port",
        "hostname",
        "callback",
        "http",
        "port",
        "callback",
        "http",
        "path",
        "callback",
        "http",
        "handle",
        "listeningListener",
        "http",
        "path",
        "root",
        "options",
        "e"
    ],
    "literals": [
        "\"express\"",
        "'http'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [
        "Type definitions for Express 4.x",
        "Project: http://expressjs.com",
        "Definitions by: Boris Yankov <https://github.com/borisyankov/>",
        "Definitions: https://github.com/borisyankov/DefinitelyTyped",
        "=================== USAGE ===================\n\n    import express = require('express');\n    var app = express();\n\n ===============================================",
        "<reference path=\"./node.d.ts\" />",
        "These open interfaces may be extended in an application-specific manner via declaration merging.",
        "See for example method-override.d.ts (https://github.com/borisyankov/DefinitelyTyped/blob/master/method-override/method-override.d.ts)",
        "Alternatively, you can pass only a callback, in which case you have the opportunity to alter the app.param() API",
        "body: { username: string; password: string; remember: boolean; title: string; };",
        "cookies: { string; remember: boolean; };",
        "Property indicating if HTTP headers has been sent for the response.",
        "Getter"
    ],
    "docstrings": [
        "* Map the given param placeholder `name`(s) to the given callback(s).\n             *\n             * Parameter mapping is used to provide pre-conditions to routes\n             * which use normalized placeholders. For example a _:user_id_ parameter\n             * could automatically load a user's information from the database without\n             * any additional code,\n             *\n             * The callback uses the samesignature as middleware, the only differencing\n             * being that the value of the placeholder is passed, in this case the _id_\n             * of the user. Once the `next()` function is invoked, just like middleware\n             * it will continue on to execute the route, or subsequent parameter functions.\n             *\n             *      app.param('user_id', function(req, res, next, id){\n             *        User.find(id, function(err, user){\n             *          if (err) {\n             *            next(err);\n             *          } else if (user) {\n             *            req.user = user;\n             *            next();\n             *          } else {\n             *            next(new Error('failed to load user'));\n             *          }\n             *        });\n             *      });\n             *\n             * @param name\n             * @param fn",
        "* Special-cased \"all\" method, applying the given route `path`,\n             * middleware, and callback to _every_ HTTP method.\n             *\n             * @param path\n             * @param fn",
        "* Return request header.\n             *\n             * The `Referrer` header field is special-cased,\n             * both `Referrer` and `Referer` are interchangeable.\n             *\n             * Examples:\n             *\n             *     req.get('Content-Type');\n             *     // => \"text/plain\"\n             *\n             *     req.get('content-type');\n             *     // => \"text/plain\"\n             *\n             *     req.get('Something');\n             *     // => undefined\n             *\n             * Aliased as `req.header()`.\n             *\n             * @param name",
        "* Check if the given `type(s)` is acceptable, returning\n             * the best match when true, otherwise `undefined`, in which\n             * case you should respond with 406 \"Not Acceptable\".\n             *\n             * The `type` value may be a single mime type string\n             * such as \"application/json\", the extension name\n             * such as \"json\", a comma-delimted list such as \"json, html, text/plain\",\n             * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n             * or array is given the _best_ match, if any is returned.\n             *\n             * Examples:\n             *\n             *     // Accept: text/html\n             *     req.accepts('html');\n             *     // => \"html\"\n             *\n             *     // Accept: text/*, application/json\n             *     req.accepts('html');\n             *     // => \"html\"\n             *     req.accepts('text/html');\n             *     // => \"text/html\"\n             *     req.accepts('json, text');\n             *     // => \"json\"\n             *     req.accepts('application/json');\n             *     // => \"application/json\"\n             *\n             *     // Accept: text/*, application/json\n             *     req.accepts('image/png');\n             *     req.accepts('png');\n             *     // => undefined\n             *\n             *     // Accept: text/*;q=.5, application/json\n             *     req.accepts(['html', 'json']);\n             *     req.accepts('html, json');\n             *     // => \"json\"",
        "* Check if the given `charset` is acceptable,\n             * otherwise you should respond with 406 \"Not Acceptable\".\n             *\n             * @param charset",
        "* Check if the given `lang` is acceptable,\n             * otherwise you should respond with 406 \"Not Acceptable\".\n             *\n             * @param lang",
        "* Parse Range header field,\n             * capping to the given `size`.\n             *\n             * Unspecified ranges such as \"0-\" require\n             * knowledge of your resource length. In\n             * the case of a byte range this is of course\n             * the total number of bytes. If the Range\n             * header field is not given `null` is returned,\n             * `-1` when unsatisfiable, `-2` when syntactically invalid.\n             *\n             * NOTE: remember that ranges are inclusive, so\n             * for example \"Range: users=0-3\" should respond\n             * with 4 users when available, not 3.\n             *\n             * @param size",
        "* Return an array of Accepted media types\n             * ordered from highest quality to lowest.",
        "* Return an array of Accepted languages\n             * ordered from highest quality to lowest.\n             *\n             * Examples:\n             *\n             *     Accept-Language: en;q=.5, en-us\n             *     ['en-us', 'en']",
        "* Return an array of Accepted charsets\n             * ordered from highest quality to lowest.\n             *\n             * Examples:\n             *\n             *     Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8\n             *     ['unicode-1-1', 'iso-8859-5']",
        "* Return the value of param `name` when present or `defaultValue`.\n             *\n             *  - Checks route placeholders, ex: _/user/:id_\n             *  - Checks body params, ex: id=12, {\"id\":12}\n             *  - Checks query string params, ex: ?id=12\n             *\n             * To utilize request bodies, `req.body`\n             * should be an object. This can be done by using\n             * the `connect.bodyParser()` middleware.\n             *\n             * @param name\n             * @param defaultValue",
        "* Check if the incoming request contains the \"Content-Type\"\n             * header field, and it contains the give mime `type`.\n             *\n             * Examples:\n             *\n             *      // With Content-Type: text/html; charset=utf-8\n             *      req.is('html');\n             *      req.is('text/html');\n             *      req.is('text/*');\n             *      // => true\n             *\n             *      // When Content-Type is application/json\n             *      req.is('json');\n             *      req.is('application/json');\n             *      req.is('application/*');\n             *      // => true\n             *\n             *      req.is('html');\n             *      // => false\n             *\n             * @param type",
        "* Return the protocol string \"http\" or \"https\"\n             * when requested with TLS. When the \"trust proxy\"\n             * setting is enabled the \"X-Forwarded-Proto\" header\n             * field will be trusted. If you're running behind\n             * a reverse proxy that supplies https for you this\n             * may be enabled.",
        "* Short-hand for:\n             *\n             *    req.protocol == 'https'",
        "* Return the remote address, or when\n             * \"trust proxy\" is `true` return\n             * the upstream addr.",
        "* When \"trust proxy\" is `true`, parse\n             * the \"X-Forwarded-For\" ip address list.\n             *\n             * For example if the value were \"client, proxy1, proxy2\"\n             * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n             * where \"proxy2\" is the furthest down-stream.",
        "* Return subdomains as an array.\n             *\n             * Subdomains are the dot-separated parts of the host before the main domain of\n             * the app. By default, the domain of the app is assumed to be the last two\n             * parts of the host. This can be changed by setting \"subdomain offset\".\n             *\n             * For example, if the domain is \"tobi.ferrets.example.com\":\n             * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n             * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.",
        "* Short-hand for `url.parse(req.url).pathname`.",
        "* Parse the \"Host\" header field hostname.",
        "* Check if the request is fresh, aka\n             * Last-Modified and/or the ETag\n             * still match.",
        "* Check if the request is stale, aka\n             * \"Last-Modified\" and / or the \"ETag\" for the\n             * resource has changed.",
        "* Check if the request was an _XMLHttpRequest_.",
        "* Clear cookie `name`.\n             *\n             * @param name\n             * @param options",
        "* Set status `code`.\n             *\n             * @param code",
        "* Set the response HTTP status code to `statusCode` and send its string representation as the response body.\n             * @link http://expressjs.com/4x/api.html#res.sendStatus\n             * \n             * Examples:\n             * \n             *    res.sendStatus(200); // equivalent to res.status(200).send('OK')\n             *    res.sendStatus(403); // equivalent to res.status(403).send('Forbidden')\n             *    res.sendStatus(404); // equivalent to res.status(404).send('Not Found')\n             *    res.sendStatus(500); // equivalent to res.status(500).send('Internal Server Error')\n             * \n             * @param code",
        "* Set Link header field with the given `links`.\n             *\n             * Examples:\n             *\n             *    res.links({\n             *      next: 'http://api.example.com/users?page=2',\n             *      last: 'http://api.example.com/users?page=5'\n             *    });\n             *\n             * @param links",
        "* Send a response.\n             *\n             * Examples:\n             *\n             *     res.send(new Buffer('wahoo'));\n             *     res.send({ some: 'json' });\n             *     res.send('<p>some html</p>');\n             *     res.send(404, 'Sorry, cant find that');\n             *     res.send(404);",
        "* Send JSON response.\n             *\n             * Examples:\n             *\n             *     res.json(null);\n             *     res.json({ user: 'tj' });\n             *     res.json(500, 'oh noes!');\n             *     res.json(404, 'I dont have that');",
        "* Send JSON response with JSONP callback support.\n             *\n             * Examples:\n             *\n             *     res.jsonp(null);\n             *     res.jsonp({ user: 'tj' });\n             *     res.jsonp(500, 'oh noes!');\n             *     res.jsonp(404, 'I dont have that');",
        "* Transfer the file at the given `path`.\n             *\n             * Automatically sets the _Content-Type_ response header field.\n             * The callback `fn(err)` is invoked when the transfer is complete\n             * or when an error occurs. Be sure to check `res.sentHeader`\n             * if you wish to attempt responding, as the header and some data\n             * may have already been transferred.\n             *\n             * Options:\n             *\n             *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)\n             *   - `root`     root directory for relative filenames\n             *   - `headers`  object of headers to serve with file\n             *   - `dotfiles` serve dotfiles, defaulting to false; can be `\"allow\"` to send them\n             *\n             * Other options are passed along to `send`.\n             *\n             * Examples:\n             *\n             *  The following example illustrates how `res.sendFile()` may\n             *  be used as an alternative for the `static()` middleware for\n             *  dynamic situations. The code backing `res.sendFile()` is actually\n             *  the same code, so HTTP cache support etc is identical.\n             *\n             *     app.get('/user/:uid/photos/:file', function(req, res){\n             *       var uid = req.params.uid\n             *         , file = req.params.file;\n             *\n             *       req.user.mayViewFilesFrom(uid, function(yes){\n             *         if (yes) {\n             *           res.sendFile('/uploads/' + uid + '/' + file);\n             *         } else {\n             *           res.send(403, 'Sorry! you cant see that.');\n             *         }\n             *       });\n             *     });\n             *\n             * @api public",
        "* deprecated, use sendFile instead.",
        "* deprecated, use sendFile instead.",
        "* deprecated, use sendFile instead.",
        "* deprecated, use sendFile instead.",
        "* Transfer the file at the given `path` as an attachment.\n             *\n             * Optionally providing an alternate attachment `filename`,\n             * and optional callback `fn(err)`. The callback is invoked\n             * when the data transfer is complete, or when an error has\n             * ocurred. Be sure to check `res.headerSent` if you plan to respond.\n             *\n             * This method uses `res.sendfile()`.",
        "* Set _Content-Type_ response header with `type` through `mime.lookup()`\n             * when it does not contain \"/\", or set the Content-Type to `type` otherwise.\n             *\n             * Examples:\n             *\n             *     res.type('.html');\n             *     res.type('html');\n             *     res.type('json');\n             *     res.type('application/json');\n             *     res.type('png');\n             *\n             * @param type",
        "* Set _Content-Type_ response header with `type` through `mime.lookup()`\n             * when it does not contain \"/\", or set the Content-Type to `type` otherwise.\n             *\n             * Examples:\n             *\n             *     res.type('.html');\n             *     res.type('html');\n             *     res.type('json');\n             *     res.type('application/json');\n             *     res.type('png');\n             *\n             * @param type",
        "* Respond to the Acceptable formats using an `obj`\n             * of mime-type callbacks.\n             *\n             * This method uses `req.accepted`, an array of\n             * acceptable types ordered by their quality values.\n             * When \"Accept\" is not present the _first_ callback\n             * is invoked, otherwise the first match is used. When\n             * no match is performed the server responds with\n             * 406 \"Not Acceptable\".\n             *\n             * Content-Type is set for you, however if you choose\n             * you may alter this within the callback using `res.type()`\n             * or `res.set('Content-Type', ...)`.\n             *\n             *    res.format({\n             *      'text/plain': function(){\n             *        res.send('hey');\n             *      },\n             *\n             *      'text/html': function(){\n             *        res.send('<p>hey</p>');\n             *      },\n             *\n             *      'appliation/json': function(){\n             *        res.send({ message: 'hey' });\n             *      }\n             *    });\n             *\n             * In addition to canonicalized MIME types you may\n             * also use extnames mapped to these types:\n             *\n             *    res.format({\n             *      text: function(){\n             *        res.send('hey');\n             *      },\n             *\n             *      html: function(){\n             *        res.send('<p>hey</p>');\n             *      },\n             *\n             *      json: function(){\n             *        res.send({ message: 'hey' });\n             *      }\n             *    });\n             *\n             * By default Express passes an `Error`\n             * with a `.status` of 406 to `next(err)`\n             * if a match is not made. If you provide\n             * a `.default` callback it will be invoked\n             * instead.\n             *\n             * @param obj",
        "* Set _Content-Disposition_ header to _attachment_ with optional `filename`.\n             *\n             * @param filename",
        "* Set header `field` to `val`, or pass\n             * an object of header fields.\n             *\n             * Examples:\n             *\n             *    res.set('Foo', ['bar', 'baz']);\n             *    res.set('Accept', 'application/json');\n             *    res.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n             *\n             * Aliased as `res.header()`.",
        "* Get value for header `field`.\n             *\n             * @param field",
        "* Clear cookie `name`.\n             *\n             * @param name\n             * @param options",
        "* Set cookie `name` to `val`, with the given `options`.\n             *\n             * Options:\n             *\n             *    - `maxAge`   max-age in milliseconds, converted to `expires`\n             *    - `signed`   sign the cookie\n             *    - `path`     defaults to \"/\"\n             *\n             * Examples:\n             *\n             *    // \"Remember Me\" for 15 minutes\n             *    res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true });\n             *\n             *    // save as above\n             *    res.cookie('rememberme', '1', { maxAge: 900000, httpOnly: true })",
        "* Set the location header to `url`.\n             *\n             * The given `url` can also be the name of a mapped url, for\n             * example by default express supports \"back\" which redirects\n             * to the _Referrer_ or _Referer_ headers or \"/\".\n             *\n             * Examples:\n             *\n             *    res.location('/foo/bar').;\n             *    res.location('http://example.com');\n             *    res.location('../login'); // /blog/post/1 -> /blog/login\n             *\n             * Mounting:\n             *\n             *   When an application is mounted and `res.location()`\n             *   is given a path that does _not_ lead with \"/\" it becomes\n             *   relative to the mount-point. For example if the application\n             *   is mounted at \"/blog\", the following would become \"/blog/login\".\n             *\n             *      res.location('login');\n             *\n             *   While the leading slash would result in a location of \"/login\":\n             *\n             *      res.location('/login');\n             *\n             * @param url",
        "* Redirect to the given `url` with optional response `status`\n             * defaulting to 302.\n             *\n             * The resulting `url` is determined by `res.location()`, so\n             * it will play nicely with mounted apps, relative paths,\n             * `\"back\"` etc.\n             *\n             * Examples:\n             *\n             *    res.redirect('/foo/bar');\n             *    res.redirect('http://example.com');\n             *    res.redirect(301, 'http://example.com');\n             *    res.redirect('http://example.com', 301);\n             *    res.redirect('../login'); // /blog/post/1 -> /blog/login",
        "* Render `view` with the given `options` and optional callback `fn`.\n             * When a callback function is given a response will _not_ be made\n             * automatically, otherwise a response of _200_ and _text/html_ is given.\n             *\n             * Options:\n             *\n             *  - `cache`     boolean hinting to the engine it should cache\n             *  - `filename`  filename of the view being rendered",
        "* Initialize the server.\n             *\n             *   - setup default configuration\n             *   - setup default middleware\n             *   - setup route reflection methods",
        "* Initialize application configuration.",
        "* Register the given template engine callback `fn`\n             * as `ext`.\n             *\n             * By default will `require()` the engine based on the\n             * file extension. For example if you try to render\n             * a \"foo.jade\" file Express will invoke the following internally:\n             *\n             *     app.engine('jade', require('jade').__express);\n             *\n             * For engines that do not provide `.__express` out of the box,\n             * or if you wish to \"map\" a different extension to the template engine\n             * you may use this method. For example mapping the EJS template engine to\n             * \".html\" files:\n             *\n             *     app.engine('html', require('ejs').renderFile);\n             *\n             * In this case EJS provides a `.renderFile()` method with\n             * the same signature that Express expects: `(path, options, callback)`,\n             * though note that it aliases this method as `ejs.__express` internally\n             * so if you're using \".ejs\" extensions you dont need to do anything.\n             *\n             * Some template engines do not follow this convention, the\n             * [Consolidate.js](https://github.com/visionmedia/consolidate.js)\n             * library was created to map all of node's popular template\n             * engines to follow this convention, thus allowing them to\n             * work seamlessly within Express.",
        "* Assign `setting` to `val`, or return `setting`'s value.\n             *\n             *    app.set('foo', 'bar');\n             *    app.get('foo');\n             *    // => \"bar\"\n             *    app.set('foo', ['bar', 'baz']);\n             *    app.get('foo');\n             *    // => [\"bar\", \"baz\"]\n             *\n             * Mounted servers inherit their parent server's settings.\n             *\n             * @param setting\n             * @param val",
        "* Return the app's absolute pathname\n             * based on the parent(s) that have\n             * mounted it.\n             *\n             * For example if the application was\n             * mounted as \"/admin\", which itself\n             * was mounted as \"/blog\" then the\n             * return value would be \"/blog/admin\".",
        "* Check if `setting` is enabled (truthy).\n             *\n             *    app.enabled('foo')\n             *    // => false\n             *\n             *    app.enable('foo')\n             *    app.enabled('foo')\n             *    // => true",
        "* Check if `setting` is disabled.\n             *\n             *    app.disabled('foo')\n             *    // => true\n             *\n             *    app.enable('foo')\n             *    app.disabled('foo')\n             *    // => false\n             *\n             * @param setting",
        "* Enable `setting`.\n             *\n             * @param setting",
        "* Disable `setting`.\n             *\n             * @param setting",
        "* Configure callback for zero or more envs,\n             * when no `env` is specified that callback will\n             * be invoked for all environments. Any combination\n             * can be used multiple times, in any order desired.\n             *\n             * Examples:\n             *\n             *    app.configure(function(){\n             *      // executed for all envs\n             *    });\n             *\n             *    app.configure('stage', function(){\n             *      // executed staging env\n             *    });\n             *\n             *    app.configure('stage', 'production', function(){\n             *      // executed for stage and production\n             *    });\n             *\n             * Note:\n             *\n             *  These callbacks are invoked immediately, and\n             *  are effectively sugar for the following:\n             *\n             *     var env = process.env.NODE_ENV || 'development';\n             *\n             *      switch (env) {\n             *        case 'development':\n             *          ...\n             *          break;\n             *        case 'stage':\n             *          ...\n             *          break;\n             *        case 'production':\n             *          ...\n             *          break;\n             *      }\n             *\n             * @param env\n             * @param fn",
        "* Render the given view `name` name with `options`\n             * and a callback accepting an error and the\n             * rendered template string.\n             *\n             * Example:\n             *\n             *    app.render('email', { name: 'Tobi' }, function(err, html){\n             *      // ...\n             *    })\n             *\n             * @param name\n             * @param options or fn\n             * @param fn",
        "* Listen for connections.\n             *\n             * A node `http.Server` is returned, with this\n             * application (which is a `Function`) as its\n             * callback. If you wish to create both an HTTP\n             * and HTTPS server you may do so with the \"http\"\n             * and \"https\" modules as shown here:\n             *\n             *    var http = require('http')\n             *      , https = require('https')\n             *      , express = require('express')\n             *      , app = express();\n             *\n             *    http.createServer(app).listen(80);\n             *    https.createServer({ ... }, app).listen(443);",
        "* The app.routes object houses all of the routes defined mapped by the\n             * associated HTTP verb. This object may be used for introspection\n             * capabilities, for example Express uses this internally not only for\n             * routing but to provide default OPTIONS behaviour unless app.options()\n             * is used. Your application or framework may also remove routes by\n             * simply by removing them from this object.",
        "* Framework version.",
        "* Expose mime.",
        "* Create an express application.",
        "* Static:\n         *\n         *   Static file server with the given `root` path.\n         *\n         * Examples:\n         *\n         *     var oneDay = 86400000;\n         *\n         *     connect()\n         *       .use(connect.static(__dirname + '/public'))\n         *\n         *     connect()\n         *       .use(connect.static(__dirname + '/public', { maxAge: oneDay }))\n         *\n         * Options:\n         *\n         *    - `maxAge`     Browser cache maxAge in milliseconds. defaults to 0\n         *    - `hidden`     Allow transfer of hidden files. defaults to false\n         *    - `redirect`   Redirect to trailing \"/\" when the pathname is a dir. defaults to true\n         *\n         * @param root\n         * @param options"
    ],
    "functions": [],
    "classes": []
}