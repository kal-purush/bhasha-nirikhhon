{
    "identifiers": [
        "numpy",
        "np",
        "math",
        "numpy",
        "linalg",
        "inv",
        "M",
        "np",
        "array",
        "l",
        "l",
        "d",
        "d",
        "w",
        "w",
        "d",
        "d",
        "w",
        "w",
        "l",
        "l",
        "x",
        "y",
        "x",
        "y",
        "w_p",
        "np",
        "dot",
        "delta",
        "delta",
        "dist",
        "w_q",
        "math",
        "fabs",
        "np",
        "dot",
        "x",
        "y",
        "dist",
        "w_v",
        "np",
        "dot",
        "delta",
        "delta",
        "dist",
        "w_w",
        "np",
        "dot",
        "delta",
        "delta",
        "dist",
        "q",
        "r",
        "np",
        "zeros",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "r",
        "q",
        "t",
        "quaternion",
        "quaternion",
        "quaternion",
        "quaternion",
        "quaternion",
        "np",
        "array",
        "qy",
        "qy",
        "qz",
        "qz",
        "qx",
        "qy",
        "qz",
        "qw",
        "qx",
        "qz",
        "qy",
        "qw",
        "qx",
        "qy",
        "qz",
        "qw",
        "qx",
        "qx",
        "qz",
        "qz",
        "qy",
        "qz",
        "qx",
        "qw",
        "qx",
        "qz",
        "qy",
        "qw",
        "qy",
        "qz",
        "qx",
        "qw",
        "qx",
        "qx",
        "qy",
        "qy",
        "x",
        "u",
        "u",
        "u",
        "np",
        "zeros",
        "x",
        "np",
        "array",
        "x",
        "x",
        "x",
        "x",
        "quaternion_product",
        "w_hat",
        "quaternion",
        "quat_product",
        "quaternion_matrix",
        "quaternion",
        "np",
        "dot",
        "R",
        "forces",
        "M",
        "np",
        "dot",
        "R",
        "np",
        "dot",
        "np",
        "dot",
        "R",
        "inv",
        "I",
        "np",
        "dot",
        "R",
        "transpose",
        "torques",
        "xdot",
        "math",
        "sqrt",
        "l",
        "w",
        "d",
        "radius"
    ],
    "literals": [],
    "variables": [
        "M",
        "l",
        "w",
        "d",
        "I",
        "w_p",
        "w_q",
        "w_v",
        "w_w",
        "delta",
        "dist",
        "t",
        "t",
        "t",
        "t",
        "t",
        "qw",
        "qx",
        "qy",
        "qz",
        "forces",
        "torques",
        "xdot",
        "xdot",
        "w_hat",
        "quaternion",
        "quat_product",
        "xdot",
        "R",
        "xdot",
        "xdot",
        "radius"
    ],
    "comments": [
        "!/usr/bin/env python",
        "this could be simplified (= x-product - dot product)",
        "pdot = v",
        "qdot = 1/2 w_hat x q",
        "vdot = F/m",
        "wdot = R x I^-1 x R^T v torque"
    ],
    "docstrings": [
        "'''\n  Cube Mass and Geometry paramenters\n  Check more alternatives at:\n    (*) https://en.wikipedia.org/wiki/List_of_moments_of_inertia\n'''",
        "'''\n      Description:\n        Defines state metrics\n\n      Input:\n        (*) State x\n        (*) State y\n        \n      Output:\n        (*) dist\n  '''",
        "'''\n      Description:\n        Computes the quaternion product of two quaternion vectors\n\n      Input:\n        (*) quaternion vector q\n        (*) quaternion vector r\n        \n      Output:\n        (*) quaternion product\n  '''",
        "'''\n      Description:\n        Converts a quaternion vector to its corresponding rotation matrix\n\n      Input:\n        (*) quaternion vector\n        \n      Output:\n        (*) rotation matrix\n  '''",
        "'''\n      Description:\n        Computes the state derivative as a function of the state and control. This is the heart of the dynamics system\n\n      Input:\n        (*) \n        \n      Output:\n        (*) \n  '''",
        "'''\n    Describes a Sphere based collision checking\n  '''"
    ],
    "functions": [
        "state_metric",
        "quaternion_product",
        "quaternion_matrix",
        "x_dot",
        "calc_radius"
    ],
    "classes": []
}