{
    "identifiers": [
        "main",
        "java",
        "miringvalidator",
        "java",
        "io",
        "File",
        "java",
        "io",
        "java",
        "io",
        "PrintWriter",
        "java",
        "io",
        "StringReader",
        "java",
        "lang",
        "reflect",
        "InvocationTargetException",
        "java",
        "lang",
        "reflect",
        "Method",
        "java",
        "net",
        "URL",
        "java",
        "net",
        "URLClassLoader",
        "java",
        "util",
        "Enumeration",
        "java",
        "util",
        "jar",
        "JarFile",
        "javax",
        "xml",
        "parsers",
        "DocumentBuilder",
        "javax",
        "xml",
        "parsers",
        "DocumentBuilderFactory",
        "javax",
        "xml",
        "parsers",
        "ParserConfigurationException",
        "org",
        "w3c",
        "dom",
        "Document",
        "org",
        "w3c",
        "dom",
        "Element",
        "org",
        "xml",
        "sax",
        "InputSource",
        "org",
        "xml",
        "sax",
        "SAXException",
        "xmlDomObject",
        "errNodeDescription",
        "jarFileLocation",
        "jarFile",
        "jarFileLocation",
        "e",
        "jarFile",
        "entries",
        "urls",
        "jarFileLocation",
        "cl",
        "URLClassLoader",
        "newInstance",
        "urls",
        "jarFile",
        "close",
        "cl",
        "e",
        "e",
        "callingObject",
        "methodName",
        "singleParameter",
        "parameterClass",
        "method",
        "method",
        "callingObject",
        "getClass",
        "getDeclaredMethod",
        "methodName",
        "parameterClass",
        "method",
        "setAccessible",
        "method",
        "invoke",
        "callingObject",
        "singleParameter",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "xml",
        "factory",
        "DocumentBuilderFactory",
        "newInstance",
        "builder",
        "factory",
        "newDocumentBuilder",
        "builder",
        "parse",
        "xml",
        "rootElement",
        "getDocumentElement",
        "rootElement",
        "path",
        "myFile",
        "path",
        "myFile",
        "e",
        "path",
        "e",
        "toString",
        "xmlText",
        "fileName",
        "writer",
        "fileName",
        "writer",
        "xmlText",
        "writer",
        "close",
        "e",
        "e"
    ],
    "literals": [
        "\"jar:file:\"",
        "\"!/\"",
        "\"Error during schematron validation:\"",
        "\"Security exception while calling reflected method: \"",
        "\"NoSuchMethod exception while calling reflected method: \"",
        "\"IllegalArgument exception while calling reflected method: \"",
        "\"IllegalAccess exception while calling reflected method: \"",
        "\"InvocationTarget exception while calling reflected method: \"",
        "\"Exception while calling reflected method: \"",
        "\"Exception when removing temp file \"",
        "\" : \"",
        "\"UTF-8\"",
        "\"Error writing XML to file: \""
    ],
    "variables": [],
    "comments": [
        "This method will crack open the probatron jar.",
        "I store them in a static ClassLoader object loadedProbatronClasses.",
        "I think they're only available from this object",
        "not from the general JVM.",
        "I don't need to load any classes right now.  They are available in loadedProbatronClasses.",
        "I will load the classes as I need them.",
        "I reckon that this method should be called in a \"setup\" method somewhere, rather than",
        "each time we validate a schematron.  Or maybe not.  Not sure the overhead of this.",
        "Only works for methods that take a single parameter.",
        "We must pass in the Class of the parameter,",
        "because \"getMethod\" is very specific about the class of the parameter.",
        "Using inherited classes (ByteArrayOutputStream vs. OutputStream) will break getMethod().",
        "method = callingObject.getClass().getMethod(methodName, parameterClass);"
    ],
    "docstrings": [
        "MiringValidator  Semantic Validator for MIRING compliant HML\n    Copyright (c) 2014-2015 National Marrow Donor Program (NMDP)\n\n    This library is free software; you can redistribute it and/or modify it\n    under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or (at\n    your option) any later version.\n\n    This library is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or\n    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n    License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library;  if not, write to the Free Software Foundation,\n    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.\n\n    > http://www.gnu.org/licenses/lgpl.html",
        "while (e.hasMoreElements()) \n            {\n                JarEntry je = (JarEntry) e.nextElement();\n                if(je.isDirectory() || !je.getName().endsWith(\".class\"))\n                {\n                    continue;\n                }\n                // -6 because of .class\n                String className = je.getName().substring(0,je.getName().length()-6);\n                className = className.replace('/', '.');\n\n                if(className.contains(\"org.apache.log4j\"))\n                {//Having problems with log4j classes.  I think it's being loaded twice, so it's getting an exception here.  \n                    //Not really sure, but log4j is being loaded already so here we are.\n                    //Could be that I only need to load the org.probatron.* classes\n                    System.out.println(className + \" will not be loaded.\");\n                }\n                else\n                {\n                    System.out.println(className + \" loading...\");\n                    Class c = cl.loadClass(className);\n                }\n            }"
    ],
    "functions": [
        "containsErrorNode",
        "URLClassLoader",
        "loadJarElements",
        "callReflectedMethod",
        "Element",
        "xmlToDomObject",
        "removeTempXml",
        "writeXml"
    ],
    "classes": [
        "Utilities"
    ]
}