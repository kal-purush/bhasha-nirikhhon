{
    "identifiers": [
        "obj",
        "model",
        "element",
        "obj",
        "objects",
        "collection",
        "callback",
        "value",
        "index",
        "collection",
        "thisArg",
        "collection",
        "callback",
        "value",
        "index",
        "collection",
        "thisArg",
        "value",
        "value",
        "value",
        "obj",
        "key",
        "value",
        "value",
        "value",
        "unit",
        "value",
        "deepClone",
        "value",
        "value",
        "value",
        "obj",
        "obj",
        "func",
        "thisArg",
        "args",
        "a",
        "b",
        "deepEqual",
        "element",
        "element",
        "value",
        "value",
        "route",
        "param",
        "param",
        "defaultValue",
        "start",
        "end",
        "value",
        "value",
        "options",
        "trigger",
        "name",
        "options",
        "value",
        "value",
        "index",
        "value",
        "index",
        "indexA",
        "indexB",
        "sourceIndex",
        "targetIndex",
        "value",
        "thisArg",
        "index",
        "count",
        "callback",
        "thisArg",
        "arrays",
        "start",
        "end",
        "seperator",
        "values",
        "sortfunction",
        "index",
        "howMany",
        "items",
        "items",
        "options",
        "name",
        "prototype",
        "parentViewName",
        "name",
        "prototype",
        "prototype",
        "prototype",
        "model",
        "prototype",
        "name",
        "dataItem",
        "id",
        "newValues",
        "name",
        "options",
        "blocks"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "\"blocks\""
    ],
    "variables": [
        "blocks"
    ],
    "comments": [
        "",
        "blocks methods",
        "",
        "",
        "blocks observable",
        "",
        "",
        "blocks array",
        "",
        "",
        "blocks MVC App",
        "",
        "",
        "App.Property",
        "",
        "Validators",
        "",
        "App.View",
        "",
        "",
        "App.Model",
        "",
        "",
        "App.Collection",
        ""
    ],
    "docstrings": [
        "* Performs a query operation on the DOM. Executes all data-query attributes\n\t * and renders the html result to the specified HTMLElement if not specified\n\t * uses document.body by default.\n\t * \n\t * @param model The model that will be used to query the DOM.\n\t * @param element Optional element on which to execute the query.",
        "* Copies properties from all provided objects into the first object parameter",
        "* Iterates over the collection\n\t * \n\t * @param collection The array or object to iterate over\n\t * @param callback The callback that will be executed for each element in the collection\n\t * @param thisArg Optional this context for the callback",
        "* Iterates over the collection from end to start\n\t * \n\t * @param collection The array or object to iterate over\n\t * @param callback The callback that will be executed for each element in the collection\n\t * @param thisArg Optional this context for the callback",
        "* Determines if a value is an array.\n\t * Returns false for array like objects (for example arguments object).\n\t * \n\t * @param value The value to check if it is an array",
        "* Represents a dummy empty function",
        "* Determines the true type of an object.\n\t * Returns the type of the value as a string.\n\t * \n\t * @param value The value for which to determine its type",
        "* Determines if a specific value is the specified type\n\t * \n\t * @param value The value\n\t * @param type The type",
        "* Checks if a variable has the specified property. Uses hasOwnProperty internally\n\t * \n\t * @param obj The object to call hasOwnPrototype for\n\t * @param key The key to check if exists in the object",
        "* Unwraps a jsblocks value to its raw representation.\n\t * Unwraps blocks.observable() and blocks() values\n\t * \n\t * @param value The value that will be unwrapped",
        "* Converts a value to an array. Arguments object is converted to array and primitive values\n\t * are wrapped in an array.\n\t * Does nothing when value is already an array\n\t * \n\t * @param value The value to be converted to an array",
        "* Converts an integer or string to a unit. If the value could not be parsed to a number it is not converted\n\t * \n\t * @param value The value to be converted to the specified unit\n\t * @param unit Optionally provide a unit to convert to. Default value is 'px'",
        "* Clones value. If deepClone is set to true the value will be cloned recursively\n\t * \n\t * @param value Value/object to be cloned\n\t * @param deepClone By default false",
        "* Determines if the specified value is a HTML elements collection.\n\t * Returns whether the value is elements collection.\n\t * \n\t * @param value The value to check if it is elements collection",
        "* Determines if the specified value is a HTML element.\n\t * Returns whether the value is a HTML element.\n\t * \n\t * @param value The value to check if it is a HTML element",
        "* Determines if a the specified value is a boolean.\n\t * Whether the value is a boolean or not.\n\t *\n\t * @param value The value to be checked if it is a boolean",
        "* Determines if the specified value is an object.\n\t * Returns whether the value is an object.\n\t * \n\t * @param obj The value to check for if it is an object",
        "* Determines if a value is a object created using {} or new Object.\n\t * Whether the value is a plain object or not.\n\t * \n\t * @param obj The value that will be checked",
        "* Changes the this binding to a function and optionally passes additional parameters to the function.\n\t * Returns the newly created function having the new this binding and optional arguments.\n\t * \n\t * @param func The function for which to change the this binding and optionally add arguments\n\t * @param thisArg The new this binding context value\n\t * @param args Optional arguments that will be passed to the function",
        "* Determines if two values are deeply equal. Set deepEqual to false to stop recusively equality checking\n\t * \n\t * @param a The first object to be campared\n\t * @param b The second object to be compared\n\t * @param deepEqual Determines if the equality check will recursively check all child properties\n\t *",
        "* Gets the context for a particular element. Searches all parents until it finds the context.\n\t * \n\t * @param element The element from which to search for a context\n\t *",
        "* Gets the associated dataItem for a particlar element. Searches all parents until it finds the context\n\t * \n\t * @param element The element from which to search for a dataItem",
        "* Determines if particular value is an blocks.observable\n\t * \n\t * @param value The value to check if the value is observable",
        "* Gets the raw value of an observable or returns the value if the specified object is not an observable\n\t * \n\t * @param value The value that could be any object observable or not",
        "* Make observable property. You can specify initial value in parentheses.",
        "* Use blocks.Application and its MVC(Model-View-Collection) structure to create better architecture and maintainability for your application.",
        "* Updates all elements, expressions and dependencies where the observable is used",
        "* If event in prototype is not defined use this function instead.\n\t * \n\t * @param event Name of the event to raise\n\t * @param trigger Function to be called when event is fired",
        "* Updates all elements, expressions and dependencies where the observable is used",
        "* Extends the current observable with particular functionality depending on the parameters specified.\n\t * If the method is called without arguments and jsvalue framework is included the observable will be\n\t * extended with the methods available in jsvalue for the current type.\n\t * \n\t * @param name Name of the extender\n\t * @param options Optional options",
        "* Removes all items from the collection and replaces them with the new value provided.\n\t * The value could be Array, observable array or jsvalue.Array\n\t * \n\t * @param value The new value that will be populated",
        "* Adds values to the end of the observable array\n\t * \n\t * @param value The values that will be added to the end of the array\n\t * @param index Optional index specifying where to insert the value",
        "* Adds the values from the provided array(s) to the end of the collection\n\t * \n\t * @param value The array that will be added to the end of the array\n\t * @param index Optional position where the array of values to be inserted",
        "* Swaps two values in the observable array. Note: Faster than removing the items and adding them at the locations\n\t * \n\t * @param indexA The first index that points to the index in the array that will be swapped\n\t * @param indexB The second index that points to the index in the array that will be swapped",
        "* Moves an item from one location to another in the array. Note: Faster than removing the item and adding it at the location\n\t * \n\t * @param sourceIndex The index pointing to the item that will be moved\n\t * @param targetIndex The index where the item will be moved to",
        "* Removes an item from the observable array\n\t * \n\t * @param value The value that will be removed or a callback function which returns true or false to determine if the value should be removed\n\t * @param thisArg Optional this context for the callback",
        "* Removes an item at the specified index\n\t * \n\t * @param index The index location of the item that will be removed\n\t * @param count Optional parameter that if specified will remove the next items starting from the specified index",
        "* Removes all items from the observable array and optionally filter which items to be removed by providing a callback\n\t * \n\t * @param callback Optional callback function which filters which items to be removed. Returning a truthy value will remove the item and vice versa\n\t * @param thisArg Optional this context for the callback function",
        "* The concat() method is used to join two or more arrays\n\t * \n\t * @param arrays The arrays to be joined",
        "* The slice() method returns the selected elements in an array, as a new array object\n\t * \n\t * @param start An integer that specifies where to start the selection (The first element has an index of 0)\n\t * @param end An integer that specifies where to end the selection. If omitted, all elements from the start position and to the end of the array will be selected.\n\t *            Use negative numbers to select from the end of an array",
        "* The join() method joins the elements of an array into a string, and returns the string\n\t * \n\t * @param separator The separator to be used. If omitted, the elements are separated with a comma",
        "* The pop() method removes the last element of a observable array, and returns that element",
        "* The push() method adds new items to the end of the observable array, and returns the new length\n\t * \n\t * @param values The item(s) to add to the observable array",
        "* Reverses the order of the elements in the observable array",
        "* Removes the first element of a observable array, and returns that element",
        "* Sorts the elements of an array\n\t * \n\t * @param sortfunction A function that defines the sort order",
        "* Adds and/or removes elements from the observable array\n\t * Returns A new array containing the removed items, if any.\n\t * \n\t * @param index An integer that specifies at what position to add/remove items. Use negative values to specify the position from the end of the array.\n\t * @param howMany The number of items to be removed. If set to 0, no items will be removed.\n\t * @param items The new item(s) to be added to the array.",
        "* The unshift() method adds new items to the beginning of an array, and returns the new length.\n\t * \n\t * @param items",
        "* Creates an application property for a Model.\n\t * \n\t * @param options Configuration options for property",
        "* Defines a view that will be part of the Application.\n\t * \n\t * @param parentViewName Provide this parameter only if you are creating nested views. This is the name of the parent View\n\t * @param name The name of the View you are creating\n\t * @param prototype The object that will represent the View",
        "* Defines a view that will be part of the Application.\n\t * \n\t * @param parentViewName Provide this parameter only if you are creating nested views. This is the name of the parent View\n\t * @param name The name of the View you are creating\n\t * @param prototype The object that will represent the View",
        "* Creates a new Model\n\t * \n\t * @param prototype The Model object properties that will be created",
        "* Creates a new Collection\n\t * \n\t * @param prototype The Collection object properties that will be created.",
        "* Routes to a specific URL and actives the appropriate views associated with the URL\n\t * \n\t * @param name Name of the route",
        "* Determines if the view is visible",
        "* Override the init method to perform actions when the View is first created and shown on the page",
        "* Override the routed method to perform actions when the View have routing and routing mechanism actives it.",
        "* Override the ready method to perform actions when the DOM is ready and\n     * all data-query have been executed.",
        "* Fires a request to the server to populate the Model based on the read URL specified\n\t * \n\t * @param params The parameters Object that will be used to populate the Model from the specified options.read URL. If the URL does not contain parameters",
        "* Synchronizes the changes with the server by sending requests to the provided URL's",
        "* Override the init method to perform actions on creation for each Model instance",
        "* Validates all observable properties that have validation and returns true if all values are valid otherwise returns false",
        "* Extracts the raw(non observable) dataItem object values from the Model",
        "* Applies new properties to the Model by providing an Object\n\t * \n\t * @param dataItem The object from which the new values will be applied",
        "* Determines whether the instance is new. If true when syncing the item will send for insertion instead of updating it.\n\t * The check is determined by the idAttr value specified in the options. If idAttr is not specified the item will always be considered new.\n\t *",
        "* Fires a request to the server to populate the Model based on the read URL specified\n\t * \n\t * @param params The parameters Object that will be used to populate the Collection from the specified options.read URL. If the URL does not contain parameters",
        "* Clear all changes made to the collection",
        "* Performs an ajax request for all create, update and delete operations in order to sync them with a database.",
        "* Extends the current observable with particular functionality depending on the parameters specified.\n\t * If the method is called without arguments and jsvalue framework is included the observable will be\n\t * extended with the methods available in jsvalue for the current type.\n\t * \n\t * @param name Name of the extender\n\t * @param options Optional options"
    ],
    "functions": [],
    "classes": []
}