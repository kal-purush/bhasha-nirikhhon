{
    "identifiers": [
        "message",
        "duration",
        "position",
        "message",
        "duration",
        "position",
        "successCallback",
        "errorCallback",
        "error",
        "message",
        "message",
        "successCallback",
        "errorCallback",
        "error",
        "message",
        "message",
        "successCallback",
        "errorCallback",
        "error",
        "message",
        "message",
        "successCallback",
        "errorCallback",
        "error",
        "message",
        "message",
        "successCallback",
        "errorCallback",
        "error",
        "message",
        "message",
        "successCallback",
        "errorCallback",
        "error",
        "message",
        "message",
        "successCallback",
        "errorCallback",
        "error",
        "text",
        "text",
        "successCallback",
        "errorCallback",
        "error",
        "successCallback",
        "text",
        "errorCallback",
        "error",
        "dimBackground",
        "dimBackground",
        "label",
        "dimBackground",
        "label",
        "detail",
        "dimBackground",
        "timeout",
        "dimBackground",
        "timeout",
        "label",
        "dimBackground",
        "timeout",
        "dimBackground",
        "timeout",
        "label",
        "dimBackground",
        "timeout",
        "dimBackground",
        "timeout",
        "label",
        "dimBackground",
        "label",
        "dimBackground",
        "label",
        "position"
    ],
    "literals": [
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string",
        "string"
    ],
    "variables": [],
    "comments": [],
    "docstrings": [
        "* This file contains definitions for additional Cordova plug-ins.",
        "* Describes the PhoneGap Toast Plugin.\n * \n * https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin",
        "* Shows a toast message with the specified duration and position.\n     * \n     * @param message The text for the toast message.\n     * @param duration How long the toast should be visible ('short' or 'long').\n     * @param position Where the toast should show ('top', 'center', or 'bottom').",
        "* Shows a toast message with the specified duration and position.\n     * \n     * @param message The text for the toast message.\n     * @param duration How long the toast should be visible ('short' or 'long').\n     * @param position Where the toast should show ('top', 'center', or 'bottom').\n     * @param successCallback Executed if the toast was displayed successfully.\n     * @param errorCallback Executed if the toast had problems being displayed.",
        "* Shows a toast message with a long duration at the bottom of the screen.\n     * \n     * @param message The text for the toast message.",
        "* Shows a toast message with a long duration at the bottom of the screen.\n     * \n     * @param message The text for the toast message.\n     * @param successCallback Executed if the toast was displayed successfully.\n     * @param errorCallback Executed if the toast had problems being displayed.",
        "* Shows a toast message with a long duration at the center of the screen.\n     * \n     * @param message The text for the toast message.",
        "* Shows a toast message with a long duration at the center of the screen.\n     * \n     * @param message The text for the toast message.\n     * @param successCallback Executed if the toast was displayed successfully.\n     * @param errorCallback Executed if the toast had problems being displayed.",
        "* Shows a toast message with a long duration at the top of the screen.\n     * \n     * @param message The text for the toast message.",
        "* Shows a toast message with a long duration at the top of the screen.\n     * \n     * @param message The text for the toast message.\n     * @param successCallback Executed if the toast was displayed successfully.\n     * @param errorCallback Executed if the toast had problems being displayed.",
        "* Shows a toast message with a short duration at the bottom of the screen.\n     * \n     * @param message The text for the toast message.",
        "* Shows a toast message with a short duration at the bottom of the screen.\n     * \n     * @param message The text for the toast message.\n     * @param successCallback Executed if the toast was displayed successfully.\n     * @param errorCallback Executed if the toast had problems being displayed.",
        "* Shows a toast message with a sort duration at the center of the screen.\n     * \n     * @param message The text for the toast message.",
        "* Shows a toast message with a short duration at the center of the screen.\n     * \n     * @param message The text for the toast message.\n     * @param successCallback Executed if the toast was displayed successfully.\n     * @param errorCallback Executed if the toast had problems being displayed.",
        "* Shows a toast message with a short duration at the top of the screen.\n     * \n     * @param message The text for the toast message.",
        "* Shows a toast message with a short duration at the top of the screen.\n     * \n     * @param message The text for the toast message.\n     * @param successCallback Executed if the toast was displayed successfully.\n     * @param errorCallback Executed if the toast had problems being displayed.",
        "* Describes the clipboard plugin.\n * \n * https://github.com/VersoSolutions/CordovaClipboard",
        "* Places the given text onto the user's clipboard.\n     * \n     * @param text The text to copy to the clipboard.",
        "* Places the given text onto the user's clipboard.\n     * \n     * @param text The text to copy to the clipboard.\n     * @param successCallback Executed if the toast was displayed successfully.\n     * @param errorCallback Executed if the toast had problems being displayed.",
        "* Retrieves the current text from the user's clipboard.\n     * \n     * @param successCallback Executed if the toast was displayed successfully.\n     * @param errorCallback Executed if the toast had problems being displayed.\n     * @returns The text that is currently on the clipboard.",
        "* Describes the progress indicator plugin.\n * \n * https://github.com/pbernasconi/cordova-progressIndicator/",
        "* Used to hide an indicator.",
        "* Simple spinner with no text. Requires .hide().\n     * \n     * @param dimBackground True if the full screen should have an overlay.",
        "* Simple spinner dialog with a label. Requires .hide().\n     * \n     * @param dimBackground True if the full screen should have an overlay.\n     * @param label The text to use as a label inside of the indicator.",
        "* Simple spinner dialog with a label and detail text. Requires .hide().\n     * \n     * @param dimBackground True if the full screen should have an overlay.\n     * @param label The text to use as a label inside of the indicator.\n     * @param detail The text to use below the main label text.",
        "* A blank Determinate spinner. The timeout parameter uses microseconds for\n     * each increment. Hides automatically, upon timeout completion.\n     * \n     * @param dimBackground True if the full screen should have an overlay.\n     * @param timeout Timeout in microseconds.",
        "* A Determinate spinner with a label. Hides automatically, upon timeout completion.\n     * \n     * @param dimBackground True if the full screen should have an overlay.\n     * @param timeout Timeout in microseconds.\n     * @param label The text to use as a label inside of the indicator.",
        "* A blank Annular spinner. Hides automatically, upon timeout completion.\n     * \n     * @param dimBackground True if the full screen should have an overlay.\n     * @param timeout Timeout in microseconds.",
        "* An Annular spinner with a label. Hides automatically, upon timeout completion.\n     * \n     * @param dimBackground True if the full screen should have an overlay.\n     * @param timeout Timeout in microseconds.\n     * @param label The text to use as a label inside of the indicator.",
        "* A blank Bar indicator. Hides automatically, upon timeout completion.\n     * \n     * @param dimBackground True if the full screen should have an overlay.\n     * @param timeout Timeout in microseconds.",
        "* A Bar indicator with a label. Hides automatically, upon timeout completion.\n     * \n     * @param dimBackground True if the full screen should have an overlay.\n     * @param timeout Timeout in microseconds.\n     * @param label The text to use as a label inside of the indicator.",
        "* A Success message with a small checkmark image. Requires manual hide().\n     * \n     * @param dimBackground True if the full screen should have an overlay.\n     * @param label The text to use as a label inside of the indicator.",
        "* Simple usage with a label or with label and detail. Requires manual hide().\n     * \n     * @param dimBackground True if the full screen should have an overlay.\n     * @param label The text to use as a label inside of the indicator.\n     * @position The position of the element; top, center, or bottom."
    ],
    "functions": [],
    "classes": []
}