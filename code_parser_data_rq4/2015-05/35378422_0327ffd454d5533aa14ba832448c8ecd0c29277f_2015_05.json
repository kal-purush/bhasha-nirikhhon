{
    "identifiers": [
        "org",
        "decimal4j",
        "op",
        "java",
        "math",
        "BigDecimal",
        "org",
        "decimal4j",
        "api",
        "Decimal",
        "org",
        "decimal4j",
        "api",
        "DecimalArithmetic",
        "org",
        "decimal4j",
        "factory",
        "Factories",
        "org",
        "decimal4j",
        "scale",
        "ScaleMetrics",
        "org",
        "decimal4j",
        "test",
        "ArithmeticResult",
        "unknownDecimalScale",
        "arithmetic",
        "unknownDecimalScale",
        "arithmetic",
        "unknownDecimalScale",
        "unknownDecimalScale",
        "a",
        "b",
        "a",
        "b",
        "Override",
        "scaleMetrics",
        "index",
        "dOpA",
        "randomDecimal",
        "scaleMetrics",
        "dOpB",
        "Factories",
        "getDecimalFactory",
        "unknownDecimalScale",
        "valueOfUnscaled",
        "randomSecondUnscaled",
        "dOpA",
        "unscaledValue",
        "runTest",
        "scaleMetrics",
        "index",
        "dOpA",
        "dOpB",
        "firstUnscaled",
        "randomLongOrInt",
        "Override",
        "scaleMetrics",
        "specialValues",
        "getSpecialValues",
        "scaleMetrics",
        "i",
        "i",
        "specialValues",
        "length",
        "i",
        "j",
        "j",
        "specialValues",
        "length",
        "j",
        "dOpA",
        "newDecimal",
        "scaleMetrics",
        "specialValues",
        "i",
        "dOpB",
        "Factories",
        "getDecimalFactory",
        "unknownDecimalScale",
        "valueOfUnscaled",
        "specialValues",
        "j",
        "runTest",
        "scaleMetrics",
        "i",
        "j",
        "dOpA",
        "dOpB",
        "scaleMetrics",
        "name",
        "a",
        "b",
        "bdA",
        "toBigDecimal",
        "a",
        "bdB",
        "toBigDecimal",
        "b",
        "expected",
        "exp",
        "expectedResult",
        "bdA",
        "bdB",
        "expected",
        "ArithmeticResult",
        "forResult",
        "exp",
        "toString",
        "exp",
        "e",
        "expected",
        "ArithmeticResult",
        "forException",
        "e",
        "actual",
        "act",
        "actualResult",
        "a",
        "b",
        "actual",
        "ArithmeticResult",
        "forResult",
        "act",
        "toString",
        "act",
        "e",
        "actual",
        "ArithmeticResult",
        "forException",
        "e",
        "actual",
        "assertEquivalentTo",
        "expected",
        "getClass",
        "getSimpleName",
        "name",
        "a",
        "operation",
        "b"
    ],
    "literals": [
        "\"[\"",
        "\"]\"",
        "\"[\"",
        "\", \"",
        "\"]\"",
        "\": \"",
        "\" \"",
        "\" \""
    ],
    "variables": [
        "unknownDecimalScale",
        "expected",
        "actual"
    ],
    "comments": [
        "expected",
        "actual",
        "assert"
    ],
    "docstrings": [
        "* The MIT License (MIT)\n *\n * Copyright (c) 2015 decimal4j (tools4j), Marco Terzer\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.",
        "* Base class for tests comparing the result of some binary operation of the\n * {@link Decimal} with another {@code Decimal<?>} of unknown scale and a result\n * of the type {@code <R>}.\n * \n * @param <R> the result type of the operation",
        "* Constructor with arithemtics determining scale, rounding mode and\n\t * overflow policy.\n\t * \n\t * @param arithmetic\n\t *            the arithmetic determining scale, rounding mode and overlfow\n\t *            policy\n\t * @param unknownDecimalScale\n\t *            the scale of the second Decimal argument"
    ],
    "functions": [
        "AbstractDecimalUnknownDecimalToAnyTest",
        "R",
        "expectedResult",
        "R",
        "actualResult",
        "runRandomTest",
        "randomSecondUnscaled",
        "runSpecialValueTest",
        "runTest"
    ],
    "classes": [
        "AbstractDecimalUnknownDecimalToAnyTest"
    ]
}