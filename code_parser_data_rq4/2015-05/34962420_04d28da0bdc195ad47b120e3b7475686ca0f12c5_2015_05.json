{
    "identifiers": [
        "express",
        "express",
        "express",
        "bodyParser",
        "morgan",
        "mongoose",
        "jwt",
        "config",
        "User",
        "process",
        "mongoose",
        "config",
        "app",
        "config",
        "app",
        "bodyParser",
        "app",
        "bodyParser",
        "app",
        "morgan",
        "app",
        "req",
        "res",
        "res",
        "port",
        "app",
        "req",
        "res",
        "User",
        "newUser",
        "err",
        "err",
        "err",
        "res",
        "express",
        "apiRoutes",
        "req",
        "res",
        "User",
        "req",
        "err",
        "user",
        "err",
        "err",
        "user",
        "res",
        "user",
        "user",
        "req",
        "res",
        "jwt",
        "user",
        "app",
        "res",
        "token",
        "apiRoutes",
        "req",
        "res",
        "next",
        "req",
        "req",
        "req",
        "token",
        "jwt",
        "token",
        "app",
        "err",
        "decoded",
        "err",
        "res",
        "req",
        "decoded",
        "next",
        "res",
        "apiRoutes",
        "req",
        "res",
        "res",
        "apiRoutes",
        "req",
        "res",
        "User",
        "err",
        "users",
        "res",
        "users",
        "apiRoutes",
        "req",
        "res",
        "User",
        "err",
        "delRes",
        "res",
        "app",
        "apiRoutes",
        "app",
        "port",
        "port"
    ],
    "literals": [
        "\"express\"",
        "\"body-parser\"",
        "\"morgan\"",
        "\"mongoose\"",
        "\"jsonwebtoken\"",
        "\"./config\"",
        "\"./app/models/user\"",
        "'superSecret'",
        "'dev'",
        "'/'",
        "'Hello! The API is at http://localhost:'",
        "'/api'",
        "'/setup'",
        "'ktvonline@live.com'",
        "'Krishna V'",
        "'P@ssword1'",
        "'User saved successfully'",
        "'/authenticate'",
        "'Authentication failed. User not found.'",
        "'Authentication failed. Wrong password.'",
        "'superSecret'",
        "'Enjoy your token!'",
        "'x-access-token'",
        "'superSecret'",
        "'Failed to authenticate token.'",
        "'No token provided.'",
        "'/'",
        "'Welcome to the coolest API on earth!'",
        "'/users'",
        "'/users'",
        "'Deleted successfully.'",
        "'/api'",
        "'Magic happens at http://localhost:'"
    ],
    "variables": [
        "app",
        "port",
        "newUser",
        "apiRoutes",
        "token",
        "token"
    ],
    "comments": [
        "<reference path=\"typings/node/node.d.ts\"/>",
        "<reference path=\"typings/express/express.d.ts\"/>",
        "=======================",
        "get the packages we need ============",
        "=======================",
        "used to create, sign, and verify tokens",
        "get our config file",
        "get our mongoose model",
        "=======================",
        "configuration =========",
        "=======================",
        "used to create, sign, and verify tokens",
        "connect to database",
        "secret variable",
        "use body parser so we can get info from POST and/or URL parameters",
        "use morgan to log requests to the console",
        "=======================",
        "routes ================",
        "=======================",
        "basic route",
        "API ROUTES -------------------",
        "create a sample user",
        "save the sample user",
        "get an instance of the router for api routes",
        "route to authenticate a user (POST http://localhost:8080/api/authenticate)",
        "find the user",
        "check if password matches",
        "if user is found and password is right",
        "create a token",
        "expires in 24 hours",
        "return the information including token as JSON",
        "route middleware to verify a token",
        "check header or url parameters or post parameters for token",
        "decode token",
        "verifies secret and checks exp",
        "if everything is good, save to request for use in other routes",
        "if there is no token",
        "return an error",
        "route to show a random message (GET http://localhost:8080/api/)",
        "route to return all users (GET http://localhost:8080/api/users)",
        "route to return all users (GET http://localhost:8080/api/users)",
        "apply the routes to our application with the prefix /api",
        "=======================",
        "start the server ======",
        "======================="
    ],
    "docstrings": [],
    "functions": [],
    "classes": []
}