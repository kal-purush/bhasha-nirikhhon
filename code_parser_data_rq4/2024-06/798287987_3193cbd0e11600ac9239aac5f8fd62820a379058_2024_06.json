{
    "identifiers": [
        "json",
        "typing",
        "Any",
        "Callable",
        "Dict",
        "haystack",
        "component",
        "default_from_dict",
        "default_to_dict",
        "haystack",
        "dataclasses",
        "ChatMessage",
        "haystack",
        "utils",
        "deserialize_callable",
        "serialize_callable",
        "component",
        "available_functions",
        "Dict",
        "Callable",
        "available_functions",
        "Dict",
        "Any",
        "name",
        "available_functions",
        "items",
        "serialize_callable",
        "default_to_dict",
        "available_functions",
        "available_function_paths",
        "serialization_dict",
        "classmethod",
        "cls",
        "data",
        "Dict",
        "Any",
        "data",
        "get",
        "get",
        "name",
        "path",
        "available_function_paths",
        "items",
        "deserialize_callable",
        "path",
        "data",
        "available_functions",
        "default_from_dict",
        "cls",
        "data",
        "component",
        "output_types",
        "function_replies",
        "ChatMessage",
        "assistant_replies",
        "ChatMessage",
        "messages",
        "ChatMessage",
        "messages",
        "meta",
        "json",
        "loads",
        "messages",
        "content",
        "function_call",
        "function_calls",
        "function_call",
        "json",
        "loads",
        "function_call",
        "function_name",
        "available_functions",
        "available_functions",
        "function_name",
        "function_to_call",
        "function_args",
        "messages",
        "append",
        "ChatMessage",
        "from_function",
        "content",
        "json",
        "dumps",
        "function_response",
        "name",
        "function_name",
        "e",
        "messages",
        "append",
        "ChatMessage",
        "from_assistant",
        "_FUNCTION_RUN_FAILURE",
        "format",
        "error",
        "e",
        "messages",
        "append",
        "ChatMessage",
        "from_assistant",
        "_FUNCTION_NAME_FAILURE",
        "messages",
        "messages"
    ],
    "literals": [
        "\"I'm sorry, I tried to run a function that did not exist. Would you like me to correct it and try again?\"",
        "\"Seems there was an error while running the function: {error}\"",
        "\"OpenAIFunctionCaller\"",
        "\"init_parameters\"",
        "\"available_functions\"",
        "\"init_parameters\"",
        "\"available_functions\"",
        "\"finish_reason\"",
        "\"tool_calls\"",
        "\"function\"",
        "\"name\"",
        "\"function\"",
        "\"arguments\"",
        "\"function_replies\"",
        "\"assistant_replies\""
    ],
    "variables": [
        "_FUNCTION_NAME_FAILURE",
        "_FUNCTION_RUN_FAILURE",
        "available_functions",
        "available_function_paths",
        "available_function_paths",
        "name",
        "serialization_dict",
        "available_function_paths",
        "available_functions",
        "available_functions",
        "name",
        "function_calls",
        "function_name",
        "function_args",
        "function_to_call",
        "function_response"
    ],
    "comments": [
        "SPDX-FileCopyrightText: 2022-present deepset GmbH <info@deepset.ai>",
        "",
        "SPDX-License-Identifier: Apache-2.0",
        "pylint: disable=broad-exception-caught"
    ],
    "docstrings": [
        "\"\"\"\n    OpenAIFunctionCaller processes a list of chat messages and call Python functions when needed.\n\n    The OpenAIFunctionCaller expects a list of ChatMessages and if there is a tool call with a function name and\n    arguments, it runs the function and returns the result as a ChatMessage from role = 'function'\n    \"\"\"",
        "\"\"\"\n        Initialize the OpenAIFunctionCaller component.\n\n        :param available_functions:\n            A dictionary of available functions. This dictionary expects key value pairs of function name,\n            and the function itself. For example, `{\"weather_function\": weather_function}`\n        \"\"\"",
        "\"\"\"\n        Serializes the component to a dictionary.\n\n        :returns:\n            Dictionary with serialized data.\n        \"\"\"",
        "\"\"\"\n        Deserializes the component from a dictionary.\n\n        :param data:\n            The dictionary to deserialize from.\n        :returns:\n            The deserialized component.\n        \"\"\"",
        "\"\"\"\n        Evaluates `messages` and invokes available functions if the messages contain tool_calls.\n\n        :param messages: A list of messages generated from the `OpenAIChatGenerator`\n        :returns: This component returns a list of messages in one of two outputs\n            - `function_replies`: List of ChatMessages containing the result of a function invocation.\n                This message comes from role = 'function'. If the function name was hallucinated or wrong,\n                an assistant message explaining as such is returned\n            - `assistant_replies`: List of ChatMessages containing a regular assistant reply. In this case,\n                there were no tool_calls in the received messages\n        \"\"\""
    ],
    "functions": [
        "to_dict",
        "from_dict",
        "run"
    ],
    "classes": [
        "OpenAIFunctionCaller"
    ]
}