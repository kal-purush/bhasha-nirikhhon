{
    "identifiers": [
        "MongoClient",
        "Db",
        "Collection",
        "Document",
        "Filter",
        "UpdateFilter",
        "FindOptions",
        "logger",
        "isDev",
        "MongoDBService",
        "process",
        "uri",
        "MongoClient",
        "uri",
        "MongoDBService",
        "MongoDBService",
        "MongoDBService",
        "MongoDBService",
        "dbName",
        "dbName",
        "logger",
        "dbName",
        "logger",
        "name",
        "name",
        "dataset",
        "dataset",
        "dataset",
        "dataset",
        "indexName",
        "records",
        "_options",
        "_options",
        "logger",
        "indexName",
        "indexName",
        "collection",
        "logger",
        "indexName",
        "error",
        "logger",
        "indexName",
        "error",
        "indexName",
        "dataset",
        "_options",
        "_options",
        "dataset",
        "indexName",
        "dataset",
        "options",
        "meta",
        "indexName",
        "meta",
        "records",
        "indexName",
        "records",
        "doc",
        "doc",
        "doc",
        "collection",
        "bulkOps",
        "logger",
        "indexName",
        "records",
        "error",
        "logger",
        "indexName",
        "error",
        "indexName",
        "indexName",
        "collection",
        "logger",
        "indexName",
        "error",
        "logger",
        "indexName",
        "error",
        "indexName",
        "indexName",
        "logger",
        "indexName",
        "error",
        "error",
        "error",
        "indexName",
        "logger",
        "indexName",
        "indexName",
        "collection",
        "indexes",
        "index",
        "index",
        "error",
        "logger",
        "error",
        "indexName",
        "newMetadata",
        "logger",
        "indexName",
        "indexName",
        "indexName",
        "collection",
        "newMetadata",
        "error",
        "logger",
        "indexName",
        "error",
        "indexName",
        "indexName",
        "collection",
        "metadata",
        "error",
        "indexName",
        "_query",
        "_aggs",
        "_query",
        "_aggs",
        "indexName",
        "query",
        "aggs",
        "collection",
        "pipeline",
        "results",
        "error",
        "logger",
        "indexName",
        "error",
        "indexName",
        "body",
        "size",
        "logger",
        "indexName",
        "size",
        "indexName",
        "collection",
        "body",
        "options",
        "results",
        "error",
        "logger",
        "indexName",
        "error",
        "indexName",
        "query",
        "size",
        "logger",
        "indexName",
        "indexName",
        "query",
        "size",
        "indexName",
        "logger",
        "indexName",
        "results",
        "error",
        "logger",
        "indexName",
        "error",
        "indexName",
        "query",
        "size",
        "indexName",
        "collection",
        "query",
        "record",
        "error",
        "logger",
        "indexName",
        "error",
        "indexName",
        "field",
        "indexName",
        "records",
        "record",
        "record",
        "field",
        "recordDate",
        "record",
        "epochTimestamp",
        "record",
        "indexName",
        "mutatedRecords",
        "indexName",
        "field",
        "indexName",
        "collection",
        "field",
        "duplicates",
        "group",
        "group",
        "docsToRemove",
        "doc",
        "doc",
        "bulkOps",
        "collection",
        "bulkOps",
        "logger",
        "bulkOps",
        "indexName",
        "error",
        "error",
        "collection",
        "collections",
        "collection",
        "indexName",
        "indexMap",
        "indexName",
        "metadata",
        "indexMap",
        "indexNames",
        "query",
        "size",
        "indexNames",
        "indexNames",
        "indexNames",
        "logger",
        "indexes",
        "query",
        "indexName",
        "indexes",
        "indexName",
        "collection",
        "query",
        "size",
        "results",
        "documents",
        "logger",
        "indexes",
        "results",
        "error",
        "logger",
        "indexes",
        "error",
        "MongoDBService"
    ],
    "literals": [
        "'mongodb'",
        "'@utils/logger'",
        "'@utils/helpers'",
        "'A MongoDBService instance has already been created. Use MongoDBService.getInstance() to get its instance'",
        "'mongodb://localhost:27017'",
        "'mongodb://mongodb:27017'",
        "'MONGODB_URI environment variable is not set'",
        "string",
        "'estatemetrics'",
        "Connected to MongoDB database: ${dbName}",
        "'Disconnected from MongoDB'",
        "string",
        "'Invalid dataset. A dataset must be at minimum an object with a records field that is an array.'",
        "string",
        "Index ${indexName} creating index",
        "'$**'",
        "'text'",
        "Index ${indexName}: Index created",
        "Index ${indexName}: An error occurred:",
        "string",
        "Index ${indexName}: Upserted ${records.length} documents",
        "Index ${indexName}: Error upserting documents:",
        "string",
        "Index ${indexName}: Document with ID ${document._id} deleted successfully",
        "Index ${indexName}: Error deleting document ${JSON.stringify(document)}:",
        "string",
        "'Index deleted:'",
        "'ns not found'",
        "'Error deleting index:'",
        "string",
        "Index ${indexName} fetching schema",
        "'$**_text'",
        "'Error fetching index schema:'",
        "string",
        "string",
        "Index ${indexName}: Updating metadata",
        "'metadata'",
        "Index ${indexName}: Error updating metadata:",
        "string",
        "string",
        "'metadata'",
        "string",
        "Index ${indexName}: Error computing aggregation:",
        "string",
        "MongoDB: querying data from ${indexName}",
        "Index ${indexName}: Error fetching data:",
        "string",
        "MongoDB: fetching data from ${indexName}",
        "MongoDB: returned data from ${indexName}",
        "Index ${indexName}: Error fetching data:",
        "string",
        "Index ${indexName}: Error fetching data:",
        "string",
        "string",
        "string",
        "string",
        "$${field}",
        "'$$ROOT'",
        "Deduplicated ${bulkOps.length} documents in collection: ${indexName}",
        "'Error deduplicating documents:'",
        "string",
        "string",
        "string",
        "string",
        "string",
        "Querying index(es) ${indexes} with query: ${query}",
        "Query successful: ${indexes}",
        "Error querying index ${indexes}:"
    ],
    "variables": [
        "uri",
        "options",
        "collection",
        "options",
        "dataset",
        "collection",
        "bulkOps",
        "collection",
        "collection",
        "indexes",
        "collection",
        "collection",
        "metadata",
        "query",
        "aggs",
        "collection",
        "pipeline",
        "results",
        "options",
        "collection",
        "results",
        "results",
        "meta",
        "collection",
        "record",
        "mutatedRecords",
        "recordDate",
        "epochTimestamp",
        "collection",
        "duplicates",
        "bulkOps",
        "docsToRemove",
        "collections",
        "indexMap",
        "indexName",
        "metadata",
        "indexes",
        "results",
        "collection",
        "documents"
    ],
    "comments": [
        "Left off @ right now metadata is implemented as a record in a collection: that's not great for obvious reasons",
        "can metadata be stored in a separate collection? or in a separate field in the same collection unrelated to the collection?",
        "My best guess is that metadata should be stored in a separate collection (probably the 'registered_indexes' collection),",
        "but I'm not sure",
        "Yeah, metadata is technically only related to a region, not a collection, so registered_indexes should be",
        "used to store/retrieve/update metadata for a region",
        "dev                        prod?",
        "Interfaces and types"
    ],
    "docstrings": [],
    "functions": [
        "getInstance",
        "connect",
        "disconnect",
        "collection",
        "listIndices",
        "query"
    ],
    "classes": [
        "MongoDBService"
    ]
}