{
    "identifiers": [
        "sqlite3",
        "tenacity",
        "logging",
        "model",
        "Product",
        "tenacity",
        "retry",
        "wait",
        "tenacity",
        "wait_fixed",
        "sqlite3",
        "connect",
        "DATABASE_FILE",
        "check_same_thread",
        "con",
        "db_connection",
        "limit",
        "offset",
        "db_connection",
        "cursor",
        "cursor",
        "execute",
        "v",
        "res",
        "products",
        "append",
        "Product",
        "v",
        "v",
        "products",
        "offset",
        "offset",
        "limit",
        "db_connection",
        "product",
        "Product",
        "db_connection",
        "cursor",
        "cursor",
        "execute",
        "product",
        "name",
        "db_connection",
        "commit"
    ],
    "literals": [
        "\"db.sqlite\"",
        "\"SELECT id, title from products\"",
        "\"INSERT INTO products (id, title) VALUES (NULL, '\"",
        "\"');\""
    ],
    "variables": [
        "DATABASE_FILE",
        "con",
        "products",
        "cursor",
        "res",
        "cursor"
    ],
    "comments": [
        "This is a potential SQL injection, as the product name could be directly passed from the user.",
        "replace it with the line below:",
        "cursor.execute(\"INSERT INTO products (id, title) VALUES (NULL, ?)\", (product.name, ))",
        "A bare exception fails to captures the exact exceptions (and print it). The code should rather",
        "catch specific exceptions.",
        "https://docs.datadoghq.com/code_analysis/static_analysis_rules/python-best-practices/no-bare-except/",
        "Replace with the following:",
        "except sqlite3.IntegrityError:"
    ],
    "docstrings": [],
    "functions": [
        "connect_database",
        "get_products",
        "add_product"
    ],
    "classes": []
}