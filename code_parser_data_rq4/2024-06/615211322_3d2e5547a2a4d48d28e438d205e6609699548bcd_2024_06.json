{
    "identifiers": [
        "cv2",
        "numpy",
        "np",
        "queue",
        "threading",
        "time",
        "threading",
        "utils_person_detection",
        "preprocess",
        "postprocess",
        "openvino",
        "ov",
        "ov",
        "Core",
        "core",
        "compile_model",
        "model_path",
        "ov_model",
        "input",
        "input_layer",
        "shape",
        "H",
        "W",
        "infer_request",
        "info",
        "infer_request",
        "latency",
        "info",
        "latency",
        "infer_request",
        "get_output_tensor",
        "data",
        "postprocess",
        "res",
        "frame",
        "inferqueue_fps",
        "display_queue",
        "put",
        "frame",
        "threading",
        "camera_url",
        "queue",
        "camera_url",
        "queue",
        "cv2",
        "VideoCapture",
        "open_camera",
        "camera_url",
        "camera_url",
        "cap",
        "open",
        "camera_url",
        "cap",
        "isOpened",
        "camera_url",
        "exit",
        "cap",
        "isOpened",
        "cap",
        "release",
        "cap",
        "read",
        "ret",
        "release_camera",
        "queue",
        "put",
        "frame",
        "release_camera",
        "join",
        "threading",
        "camera_url",
        "display_queue",
        "display_queue",
        "ov",
        "AsyncInferQueue",
        "ov_model",
        "infer_queue",
        "set_callback",
        "callback",
        "cv2",
        "VideoCapture",
        "open_camera",
        "camera_url",
        "camera_url",
        "cap",
        "open",
        "camera_url",
        "cap",
        "isOpened",
        "camera_url",
        "exit",
        "cap",
        "read",
        "ret",
        "release_camera",
        "preprocess",
        "frame",
        "input_shape",
        "infer_queue",
        "start_async",
        "input_layer",
        "any_name",
        "resized_image",
        "frame",
        "display_queue",
        "cap",
        "isOpened",
        "cap",
        "release",
        "threading",
        "queues",
        "queues",
        "running",
        "q",
        "queues",
        "q",
        "empty",
        "frames",
        "append",
        "q",
        "get",
        "time",
        "sleep",
        "len",
        "frames",
        "combine_and_resize_images",
        "frames",
        "cv2",
        "imshow",
        "combined_image",
        "cv2",
        "waitKey",
        "ord",
        "cv2",
        "destroyAllWindows",
        "images",
        "np",
        "concatenate",
        "images",
        "i",
        "images",
        "i",
        "axis",
        "i",
        "len",
        "images",
        "np",
        "concatenate",
        "rows",
        "axis",
        "images",
        "combine_images",
        "images",
        "combined_image",
        "shape",
        "height",
        "width",
        "cv2",
        "resize",
        "combined_image",
        "new_width",
        "new_height",
        "queue",
        "_",
        "camera_urls",
        "InferenceThread",
        "url",
        "dq",
        "url",
        "dq",
        "camera_urls",
        "display_queues",
        "DisplayThread",
        "display_queues",
        "thread",
        "inference_threads",
        "display_thread",
        "thread",
        "start",
        "cv2",
        "waitKey",
        "ord",
        "display_thread",
        "join",
        "cv2",
        "destroyAllWindows",
        "thread",
        "inference_threads",
        "display_thread",
        "thread",
        "stop"
    ],
    "literals": [
        "r\"model/intel/person-detection-0202/FP16/person-detection-0202.xml\"",
        "\"GPU.1\"",
        "r\"cam1\\worker-zone-detection.mp4\"",
        "r\"cam2\\worker-zone-detection.mp4\"",
        "r\"cam3\\worker-zone-detection.mp4\"",
        "r\"cam4\\worker-zone-detection.mp4\"",
        "f\"Could not open camera: {camera_url}\"",
        "\"Error or camera disconnected.\"",
        "f\"Could not open camera: {camera_url}\"",
        "\"Error or camera disconnected.\"",
        "'Inference Results'",
        "'q'",
        "\"__main__\"",
        "\"Press 'q' to quit each camera window.\"",
        "'q'"
    ],
    "variables": [
        "model_path",
        "core",
        "ov_model",
        "input_layer",
        "N",
        "C",
        "H",
        "W",
        "input_shape",
        "camera_urls",
        "latency",
        "frame",
        "display_queue",
        "inferqueue_fps",
        "res",
        "frame",
        "camera_url",
        "queue",
        "cap",
        "ret",
        "frame",
        "display_queue",
        "infer_queue",
        "cap",
        "ret",
        "frame",
        "resized_image",
        "queues",
        "running",
        "frames",
        "combined_image",
        "running",
        "rows",
        "combined_image",
        "height",
        "width",
        "new_height",
        "new_width",
        "display_queues",
        "inference_threads",
        "display_thread",
        "display_thread",
        "running"
    ],
    "comments": [
        "person-detection-0202模型文件的路径",
        "初始化OpenVINO的Core对象",
        "使用Core对象编译模型",
        "获取模型的输入层",
        "获取输入层的形状，形状格式为(N, C, H, W)，分别代表批次、通道数、高度、宽度",
        "提取输入层的高度和宽度，定义一个名为input_shape的元组",
        "IP摄像头的RTSP URLs",
        "获取当前推理请求的耗时（latency）",
        "解构传入的info元组，获取当前帧和用于显示的队列",
        "计算推理的帧率 (FPS) based on the current latency",
        "从推理请求的输出中获取第一个张量的数据",
        "对帧应用后处理操作，如解码、缩放、添加推理结果等，并传入帧、原始帧和推理队列FPS",
        "将处理后的帧放入显示队列中，等待显示",
        "这里将每一帧图像数据放入队列",
        "创建推理请求队列",
        "设置callback函数",
        "初始化摄像头",
        "尝试从每个队列获取图像",
        "若任一队列空，则短暂停顿避免频繁检查",
        "所有队列均有图像时，进行处理和显示",
        "监听键盘事件，'q'键退出",
        "清理显示窗口",
        "首先拼接图像",
        "计算新的高度和宽度（这里示例为原尺寸的1/4）",
        "调整图像尺寸",
        "为每个推理结果创建一个专属队列",
        "为每个摄像头创建一个专属推理线程",
        "创建一个显示线程",
        "启动所有线程",
        "等待键盘输入结束",
        "清理工作，关闭所有窗口和释放摄像头资源"
    ],
    "docstrings": [
        "\"\"\"\n    回调函数: 用于AsyncInferQueue的推理请求后的操作,\n    包括计算延迟、帧率，后处理帧数据，并将处理后的帧放入显示队列中。\n\n    参数:\n    - infer_request: 推理请求对象，包含了推理的执行信息和结果。\n    - info: 一个元组，包含当前需要处理的帧以及用于显示处理后帧的队列。\n             具体结构为 (frame, display_queue)。\n\n    返回:\n    无\n    \"\"\"",
        "\"\"\"\n    类InferenceThread继承自threading.Thread，用于异步执行模型推理任务，\n    包括从摄像头读取视频流、预处理帧、异步推断以及将结果显示到队列中。\n    \n    属性:\n    - display_queue: 用于存放处理后帧的队列，供显示线程使用。\n    - infer_queue: OpenVINO的AsyncInferQueue对象，管理推理请求的队列。\n    - cap: cv2.VideoCapture对象，用于从指定URL捕获视频流。\n    \n    方法:\n    - __init__: 初始化摄像头URL、显示队列，创建推理请求队列，并初始化摄像头。\n    - open_camera: 打开指定URL的摄像头，检查是否成功打开。\n    - run: 线程主循环，读取视频帧，预处理后送入推理队列进行异步推理。\n    - release_camera: 关闭当前打开的摄像头资源。\n    \"\"\"",
        "\"\"\"\n        初始化InferenceThread实例。\n        \n        参数:\n        - camera_url: 摄像头的URL或设备索引。\n        - display_queue: 用于存放处理后帧的队列。\n        - ov_model: 已加载的OpenVINO模型。\n        - input_layer: 模型的输入层名称或对象。\n        - input_shape: 模型输入所需的数据形状。\n        \"\"\"",
        "\"\"\"\n        打开指定URL的摄像头设备。\n        \n        参数:\n        - camera_url: 摄像头的URL或设备索引。\n        如果无法打开摄像头，则打印错误信息并退出程序。\n        \"\"\"",
        "\"\"\"\n        线程运行方法，持续从摄像头读取帧，进行预处理，并异步推断。\n        如果读取帧失败或摄像头断开连接，则释放摄像头资源并结束线程。\n        \"\"\"",
        "\"\"\"\n        释放摄像头资源。\n        \"\"\"",
        "\"\"\"\n    显示线程类，负责从多个队列中获取图像数据，将其合并成单一图像并在窗口中显示。\n    支持通过按键'q'退出显示循环。\n    \n    属性:\n    - queues: 一个包含多个队列的列表，每个队列提供待显示的图像帧。\n    - running: 布尔值，表示线程是否应继续运行。\n    \n    方法:\n    - __init__: 初始化DisplayThread实例，设置队列列表和运行标志。\n    - run: 线程的主要执行逻辑，循环检查队列获取图像，合并并显示。\n    - combine_images: 将给定的图像列表水平和垂直拼接成单个图像。\n    - combine_and_resize_images: 拼接图像后进一步调整其尺寸。\n    \"\"\"",
        "\"\"\"\n        初始化DisplayThread实例。\n        \n        参数:\n        - queues: 一个列表，包含用于接收图像帧的队列对象。\n        \"\"\"",
        "\"\"\"\n        线程运行方法，循环检查每个队列获取图像帧，当所有队列均有图像时，\n        进行拼接、调整尺寸并显示。监听键盘事件允许用户通过按下'q'键退出。\n        \"\"\"",
        "\"\"\"\n        将提供的图像列表按2x2网格形式拼接成一个大图。\n        \n        参数:\n        - images: 图像列表，假定所有图像尺寸相同。\n        \n        返回:\n        - combined_image: 拼接后的图像。\n        \"\"\"",
        "\"\"\"\n        拼接图像后，根据预设的比例调整其尺寸。\n        \n        参数:\n        - images: 待处理的图像列表。\n        \n        返回:\n        - resized_image: 调整尺寸后的拼接图像。\n        \"\"\""
    ],
    "functions": [
        "callback",
        "open_camera",
        "release_camera",
        "run",
        "stop",
        "open_camera",
        "run",
        "release_camera",
        "run",
        "combine_images",
        "combine_and_resize_images"
    ],
    "classes": [
        "CameraThread",
        "InferenceThread",
        "DisplayThread"
    ]
}