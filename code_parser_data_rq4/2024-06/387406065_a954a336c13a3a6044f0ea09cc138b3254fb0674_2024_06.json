{
    "identifiers": [
        "Collections",
        "Generic",
        "IO",
        "Text",
        "Text",
        "Json",
        "Microsoft",
        "Build",
        "Utilities",
        "BundleConfigObject",
        "Root",
        "Other",
        "Optimizations",
        "SplitsConfig",
        "SplitDimension",
        "Strings",
        "UTF8BOM",
        "ValuePropertyName",
        "Encoding",
        "ASCII",
        "GetBytes",
        "NegatePropertyName",
        "Encoding",
        "ASCII",
        "GetBytes",
        "TaskLoggingHelper",
        "log",
        "configFilePath",
        "DoShouldIgnoreSplitConfigs",
        "log",
        "configFilePath",
        "ex",
        "log",
        "LogWarning",
        "configFilePath",
        "log",
        "LogWarningFromException",
        "ex",
        "TaskLoggingHelper",
        "log",
        "configFilePath",
        "JsonReaderOptions",
        "AllowTrailingCommas",
        "CommentHandling",
        "JsonCommentHandling",
        "Skip",
        "File",
        "ReadAllBytes",
        "configFilePath",
        "json",
        "StartsWith",
        "strings",
        "UTF8BOM",
        "json",
        "json",
        "Slice",
        "strings",
        "UTF8BOM",
        "Length",
        "BundleConfigObject",
        "state",
        "Push",
        "BundleConfigObject",
        "Utf8JsonReader",
        "json",
        "options",
        "reader",
        "Read",
        "reader",
        "TokenType",
        "tokenType",
        "JsonTokenType",
        "StartObject",
        "TransitionState",
        "strings",
        "reader",
        "state",
        "lastPropertyName",
        "lastPropertyName",
        "JsonTokenType",
        "EndObject",
        "state",
        "Peek",
        "BundleConfigObject",
        "state",
        "Pop",
        "lastPropertyName",
        "JsonTokenType",
        "PropertyName",
        "lastPropertyName",
        "reader",
        "GetString",
        "state",
        "Peek",
        "BundleConfigObject",
        "SplitDimension",
        "CheckSplitDimensionProperty",
        "reader",
        "strings",
        "valueIsAbi",
        "negate",
        "valueIsAbi",
        "HasValue",
        "negate",
        "HasValue",
        "valueIsAbi",
        "Value",
        "negate",
        "Value",
        "Utf8JsonReader",
        "reader",
        "Strings",
        "strings",
        "valueIsAbi",
        "negate",
        "valueIsAbi",
        "HasValue",
        "reader",
        "ValueTextEquals",
        "strings",
        "ValuePropertyName",
        "reader",
        "Read",
        "reader",
        "GetString",
        "valueIsAbi",
        "CompareOrdinal",
        "v",
        "negate",
        "HasValue",
        "reader",
        "ValueTextEquals",
        "strings",
        "NegatePropertyName",
        "reader",
        "Read",
        "negate",
        "reader",
        "GetBoolean",
        "Strings",
        "strings",
        "Utf8JsonReader",
        "reader",
        "BundleConfigObject",
        "state",
        "objectName",
        "state",
        "Peek",
        "current",
        "BundleConfigObject",
        "state",
        "Push",
        "BundleConfigObject",
        "Root",
        "current",
        "BundleConfigObject",
        "Root",
        "BundleConfigObject",
        "Optimizations",
        "BundleConfigObject",
        "Optimizations",
        "BundleConfigObject",
        "SplitsConfig",
        "BundleConfigObject",
        "SplitsConfig",
        "BundleConfigObject",
        "SplitDimension",
        "BundleConfigObject",
        "Other",
        "need",
        "BundleConfigObject",
        "Other",
        "state",
        "Push",
        "need",
        "need",
        "BundleConfigObject",
        "Optimizations",
        "BundleConfigObject",
        "SplitsConfig",
        "BundleConfigObject",
        "SplitDimension",
        "InvalidOperationException",
        "need",
        "IsNullOrEmpty",
        "objectName",
        "CompareOrdinal",
        "needName",
        "objectName",
        "state",
        "Push",
        "need",
        "state",
        "Push",
        "BundleConfigObject",
        "Other"
    ],
    "literals": [
        "\"value\"",
        "\"negate\"",
        "\"ABI\"",
        "\"optimizations\"",
        "\"splitsConfig\"",
        "\"splitDimension\""
    ],
    "variables": [
        "UTF8BOM",
        "ValuePropertyName",
        "NegatePropertyName",
        "options",
        "Strings",
        "strings",
        "json",
        "state",
        "valueIsAbi",
        "negate",
        "lastPropertyName",
        "reader",
        "JsonTokenType",
        "tokenType",
        "BundleConfigObject",
        "popped",
        "v",
        "BundleConfigObject",
        "current",
        "BundleConfigObject",
        "need",
        "needName"
    ],
    "comments": [
        "<para>",
        "When bundle configuration uses standard settings for split configs, the per-ABI library",
        "directory (which contains all of our DSOs/assemblies/blobs etc) will be placed in a per-ABI",
        "split config file named `split_config.{ARCH}.apk` and we use the fact to optimize startup",
        "time.",
        "</para>",
        "",
        "<para>",
        "However, if a custom build config file with the following settings is found, Android bundletool",
        "doesn't create the per-ABI split config file, and so we need to search all the files in order",
        "to find shared libraries, assemblies/blobs etc:",
        "<code>",
        "{",
        "\"optimizations\": {",
        "\"splitsConfig\": {",
        "\"splitDimension\": [",
        "{",
        "\"value\": \"ABI\",",
        "\"negate\": true",
        "}",
        "],",
        "}",
        "}",
        "}",
        "</code></para>",
        "",
        "<para>",
        "The presence or absence of split config files is checked in our Java startup code which will",
        "notice that split configs are present, but will not check (for performance reasons, to avoid",
        "string comparisons) whether the per-ABI split config is present.  We, therefore, need to let",
        "our native runtime know in some inexpensive way that the split configs should be ignored and",
        "that the DSOs/assemblies/blobs should be searched for in the usual, non-split config, way.",
        "</para>",
        "",
        "<para>",
        "Since we know at build time whether this is the case, it's best to record the fact then and",
        "let the native runtime merely check a boolean flag instead of dynamic detection at each app",
        "startup.",
        "</para>"
    ],
    "docstrings": [],
    "functions": [
        "Strings",
        "ShouldIgnoreSplitConfigs",
        "DoShouldIgnoreSplitConfigs",
        "CheckSplitDimensionProperty",
        "TransitionState"
    ],
    "classes": [
        "BundleConfigSplitConfigsChecker"
    ]
}