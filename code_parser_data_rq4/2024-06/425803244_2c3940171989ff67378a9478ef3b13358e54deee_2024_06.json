{
    "identifiers": [
        "HermesClient",
        "PriceUpdate",
        "PYTH_CONTRACT_ADDRESS_SEPOLIA",
        "PYTH_CONTRACT_ABI",
        "FUEL_ETH_ASSET_ID",
        "Provider",
        "Wallet",
        "Contract",
        "hexlify",
        "arrayify",
        "Provider",
        "process",
        "privateKey",
        "Wallet",
        "privateKey",
        "provider",
        "Contract",
        "PYTH_CONTRACT_ADDRESS_SEPOLIA",
        "PYTH_CONTRACT_ABI",
        "wallet",
        "contract",
        "priceFeedId",
        "previousPrice",
        "previousPrice",
        "HermesClient",
        "priceFeedSymbol",
        "hermesClient",
        "priceFeedId",
        "priceUpdates",
        "priceUpdates",
        "arrayify",
        "Buffer",
        "priceUpdates",
        "contract",
        "priceFeedUpdateData",
        "updateFee",
        "contract",
        "priceFeedUpdateData",
        "updateFee",
        "hexlify",
        "FUEL_ETH_ASSET_ID",
        "tx",
        "contract",
        "priceFeedId",
        "newPrice",
        "newPrice",
        "main"
    ],
    "literals": [
        "\"@pythnetwork/hermes-client\"",
        "\"../index\"",
        "\"fuels\"",
        "\"https://testnet.fuel.network/v1/graphql\"",
        "\"Missing ACCOUNT_PRIVATE_KEY env var\"",
        "\"Crypto.ETH/USD\"",
        "\"0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace\"",
        "Previous price: ${\n      previousPrice.price.toNumber() * 10 ** -previousPrice.exponent\n    }",
        "\"https://hermes.pyth.network\"",
        "Querying latest Pyth price update for ${priceFeedSymbol}",
        "Current price from Hermes: ${\n      Number(priceUpdates.parsed?.[0].price.price) *\n      10 ** Number(priceUpdates.parsed?.[0].price.expo)\n    }",
        "\"hex\"",
        "Querying update fee...",
        "Update fee: ${updateFee}",
        "Transaction confirmed: ${tx.transactionId}",
        "New price: ${newPrice.price.toNumber() * 10 ** -newPrice.exponent}"
    ],
    "variables": [
        "provider",
        "privateKey",
        "wallet",
        "contract",
        "priceFeedSymbol",
        "priceFeedId",
        "previousPrice",
        "hermesClient",
        "priceUpdates",
        "priceFeedUpdateData",
        "updateFee",
        "tx",
        "newPrice"
    ],
    "comments": [
        "Create a provider for interacting with Fuel RPC",
        "Create a `Contract` instance to interact with the Pyth contract on Fuel",
        "Pyth ETH/USD price feed id",
        "Create a client for pulling price updates from Hermes.",
        "Get the latest values of the price feeds as json objects.",
        "Query the amount of update fee required"
    ],
    "docstrings": [],
    "functions": [
        "main"
    ],
    "classes": []
}