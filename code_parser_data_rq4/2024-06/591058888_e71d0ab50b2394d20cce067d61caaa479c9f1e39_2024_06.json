{
    "identifiers": [
        "logging",
        "globus_sdk",
        "glb",
        "src",
        "models",
        "User",
        "src",
        "config",
        "Settings",
        "auth_state",
        "AuthenticationState",
        "globus_auth",
        "get_auth_client",
        "logging",
        "getLogger",
        "authed_user",
        "AuthenticationState",
        "settings",
        "Settings",
        "is_user_in_group",
        "authed_user",
        "settings",
        "_create_service_groups_manager",
        "groups_manager",
        "add_member",
        "settings",
        "GARDEN_USERS_GROUP_ID",
        "authed_user",
        "identity_id",
        "glb",
        "GlobusAPIError",
        "e",
        "logger",
        "error",
        "e",
        "e",
        "authed_user",
        "AuthenticationState",
        "settings",
        "Settings",
        "_create_groups_client_with_token",
        "authed_user",
        "token",
        "_fetch_user_groups",
        "gc",
        "group",
        "get",
        "settings",
        "GARDEN_USERS_GROUP_ID",
        "group",
        "groups",
        "glb",
        "GlobusAPIError",
        "e",
        "logger",
        "error",
        "e",
        "e",
        "client",
        "glb",
        "GroupsClient",
        "group",
        "group",
        "client",
        "get_my_groups",
        "glb",
        "GroupsClient",
        "get_auth_client",
        "gc",
        "oauth2_client_credentials_tokens",
        "requested_scopes",
        "tokens",
        "by_resource_server",
        "get",
        "auth_data",
        "get",
        "_create_groups_client_with_token",
        "token",
        "glb",
        "GroupsManager",
        "_create_service_groups_client",
        "glb",
        "GroupsManager",
        "client",
        "gc",
        "token",
        "glb",
        "GroupsClient",
        "glb",
        "AccessTokenAuthorizer",
        "token",
        "glb",
        "GroupsClient",
        "authorizer",
        "authorizer"
    ],
    "literals": [
        "f\"Error adding user to Garden Users Group: {e}\"",
        "\"id\"",
        "f\"Error getting user Globus groups: {e}\"",
        "\"urn:globus:auth:scope:groups.api.globus.org:all\"",
        "\"groups.api.globus.org\"",
        "\"access_token\""
    ],
    "variables": [
        "logger",
        "groups_manager",
        "gc",
        "groups",
        "gc",
        "tokens",
        "auth_data",
        "token",
        "gc",
        "authorizer"
    ],
    "comments": [],
    "docstrings": [
        "\"\"\"Add authed_user as a member of Garden Users Globus group specified in the settings.\n\n    If the user is already in the group this function does nothing.\n\n    Args:\n        authed_user (AuthenticationState): The authenticated user.\n        settings (Settings): Application settings.\n\n    Raises:\n        globus_sdk.GlobusAPIError: when there is an issue communicating with Globus services\n    \"\"\"",
        "\"\"\"Return true if authed_user is a member of the Garden Users Globus group specified in the settings.\n\n    Args:\n        authed_user (AuthenticationState): The authenticated user\n        settings (Settings): Application Settings\n\n    Raises:\n        globus_sdk.GlobusAPIError: When there is an issue communicating with Globus services\n    \"\"\"",
        "\"\"\"Return a list of group data objects for the given client.\n\n    Args:\n        client (globus_sdk.GroupsClient): A groups client.\n\n\n    Returns:\n        list[dict]: List of group data objects.\n            See https://globus-sdk-python.readthedocs.io/en/stable/services/groups.html#globus_sdk.GroupsClient.get_my_groups\n    \"\"\"",
        "\"\"\"Return a globus_sdk GroupsClient acting as the backend service.\n\n    Returns:\n        globus_sdk.GroupsClient: Groups client acting as the backend service.\n    \"\"\"",
        "\"\"\"Return a globus_sdk GroupsManager acting as the backend service.\n\n    Returns:\n        globus_sdk.GroupsManager: Groups manager acting as the backend service.\n    \"\"\"",
        "\"\"\"Return a globus_sdk GroupsClient acting as the user that provides the token.\n\n    Returns:\n       globus_sdk.GroupsClient: Groups client using the provided token.\n    \"\"\""
    ],
    "functions": [
        "add_user_to_group",
        "is_user_in_group",
        "_fetch_user_groups",
        "_create_service_groups_client",
        "_create_service_groups_manager",
        "_create_groups_client_with_token"
    ],
    "classes": []
}