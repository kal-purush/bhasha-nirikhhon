{
    "identifiers": [
        "hide",
        "startGame",
        "playAgain",
        "startGame",
        "startGameButton",
        "keyElements",
        "key",
        "key",
        "startGameButton",
        "attemptsMade",
        "correctGuesses",
        "messageDisplay",
        "guessContainer",
        "wordToGuess",
        "snowManWords",
        "snowManWords",
        "i",
        "wordToGuess",
        "i",
        "newDiv",
        "letterEls",
        "newDiv",
        "guessContainer",
        "newDiv",
        "attemptsWrapper",
        "attemptsMade",
        "updateUI",
        "wordToGuess",
        "key",
        "updateUI",
        "attemptsWrapper",
        "allowedGuesses",
        "attemptsMade",
        "snowmanImage",
        "attemptsMade",
        "increaseAttempts",
        "attemptsMade",
        "updateUI",
        "submitLetter",
        "evt",
        "evt",
        "evt",
        "wordToGuess",
        "key",
        "i",
        "wordToGuess",
        "wordToGuess",
        "i",
        "key",
        "letterEls",
        "i",
        "key",
        "correctGuess",
        "increaseAttempts",
        "attemptsMade",
        "allowedGuesses",
        "endGame",
        "wordToGuess",
        "correctGuesses",
        "endGame",
        "endGame",
        "message",
        "messageDisplay",
        "message",
        "keyElements",
        "key",
        "key",
        "startGameButton",
        "playAgain",
        "playAgainButton",
        "keyElements",
        "key",
        "key",
        "correctGuess",
        "correctGuesses",
        "updateUI",
        "startGameButton",
        "startGame",
        "keyElements",
        "el",
        "el",
        "key",
        "keyElements",
        "el",
        "el",
        "submitLetter"
    ],
    "literals": [
        "'boy'",
        "'girl'",
        "'food'",
        "'monkey'",
        "'.start-game'",
        "'.attempts-wrapper'",
        "'#snowman-img'",
        "'.guess-container'",
        "'.key'",
        "'.snowman'",
        "'.message'",
        "'.play-again'",
        "'.snowman-gameover'",
        "'none'",
        "'none'",
        "'Play Again'",
        "'hide'",
        "''",
        "''",
        "'div'",
        "'letter-space'",
        "'startGame'",
        "'key'",
        "'key'",
        "❤️ ${allowedGuesses-attemptsMade}",
        "Images/Snowman-${attemptsMade}.jpg",
        "'loser!'",
        "'You won!'",
        "'hide'",
        "'hide'",
        "'click'",
        "'click'",
        "'click'"
    ],
    "variables": [
        "allowedGuesses",
        "snowManWords",
        "letterEls",
        "attemptsMade",
        "correctGuesses",
        "wordToGuess",
        "currentWord",
        "startGameButton",
        "attemptsWrapper",
        "snowmanImage",
        "guessContainer",
        "keyElements",
        "snowmanSection",
        "messageDisplay",
        "playAgainButton",
        "snowmanGameOver",
        "hide",
        "startGame",
        "i",
        "newDiv",
        "key",
        "updateUI",
        "increaseAttempts",
        "submitLetter",
        "key",
        "endGame",
        "playAgain",
        "correctGuess"
    ],
    "comments": [
        "- As a user, when the page loads I want to be able to start the game",
        "> Add click event to start button, it should execute a function called startGame()",
        "> Target the hangman <section>",
        "> Remove the '.game-over' class",
        "> Add the '.game-active' class",
        "> Generate a word to be guessed. Define an array of words. Use Math floor & random to get a random word from the array.",
        "> Save random word to wordToGuess",
        "> To display the correct amount of spaces we'll use wordToGuess.length",
        "> Using a for loop, set it to loop wordToGuess.length amount of times",
        "> In each loop: create a div, add class .guessed-letter, append to guessContainer",
        "> Game state section (.hangman) will be displayed when .game-active is added above",
        "> using the attemptsMade, update the attemptsSpan with it's value",
        "> attemptsSpan.innerText = attemptsMade",
        "- As a user, when the game starts I want to be able to clearly see the length of the word I'm guessing",
        "- As a user, I want to see that my guessed letter has been registered",
        "> Target the keys with `.key` class. Add a click event, executing submitLetter()",
        "> attemptsMade should increase by 1",
        "> attemptsSpan.innerText = attemptsMade",
        "> identify which letter has been clicked",
        "> check every letter of wordToGuess, if it matches the clicked letter, display it",
        "- As a user, I want to see if any of the letters that I choose are in the word I'm guessing in their correct position",
        "- As a user, I want to see how many attempts I've made, and how many I have left",
        "- As a user, I want to see clearly when I have won the game",
        "> messageDisplay.innerText = 'You won!'",
        "- As a user, I want to see clearly when I have lost the game",
        "> messageDisplay.innerText = 'You lost!'",
        "- As a user, I want to be able to play again after I have finished a game",
        "> Target the hangman <section>",
        "> Remove the '.game-active' class",
        "> Add the '.game-over' class",
        "> Target the button, update its innerText to 'Restart Game'",
        "-------------- Constants -------------",
        "---------- Variables (state) ---------",
        "- this will hold the number of attempts made so far",
        "append child",
        "keyElements = document.querySelectorAll('.keys').forEach(key => key.disabled = false);",
        "attemptsMade = 0",
        "removeButton",
        "generateElement",
        "updateUI",
        "> Add click event to start button, it should execute a function called startGame()",
        "> Target the hangman <section>",
        "> Remove the '.game-over' class",
        "> Add the '.game-active' class",
        "> Generate a word to be guessed. Define an array of words. Use Math floor & random to get a random word from the array.",
        "> Save random word to wordToGuess",
        "> To display the correct amount of spaces we'll use wordToGuess.length",
        "> Using a for loop, set it to loop wordToGuess.length amount of times",
        "> In each loop: create a div, add class .guessed-letter, append to guessContainer",
        "> Game state section (.hangman) will be displayed when .game-active is added above",
        "> using the attemptsMade, update the attemptsSpan with it's value",
        "> attemptsSpan.innerText = attemptsMade",
        "> attemptsMade should increase by 1",
        "attemptsWrapper.innerText = attemptsMade",
        "> identify which letter has been clicked",
        "> check every letter of wordToGuess, if it matches the clicked letter, display it",
        "> messageDisplay.innerText = 'You won!'",
        "> messageDisplay.innerText = 'You lost!'"
    ],
    "docstrings": [
        "* ---- Pseudocode ----",
        "* Click start button",
        "* Remove button from screen",
        "* Display the spaces for the word to be guessed",
        "* Game state displayed on screen, e.g how many attempts have been made (maybe how many I have left)",
        "* Click event on the keys within the keyboard",
        "* Attempts number should increase by 1",
        "* If a letter has been guessed correctly, we should see the empty spaces fill with the correct letter",
        "* attemptsMade === allowedAttempts, endGame()",
        "* Update the messageDisplay when the game is won",
        "* Update the messageDisplay when the game is won",
        "* Add start button back to screen",
        "* ---- DOM Elements ----",
        "* ---- Functions ----",
        "* Click start button",
        "* Remove button from screen",
        "* Display the spaces for the word to be guessed",
        "* Game state displayed on screen, e.g how many attempts have been made (maybe how many I have left)",
        "* Attempts number should increase by 1",
        "* If a letter has been guessed correctly, we should see the empty spaces fill with the correct letter",
        "* attemptsMade === allowedAttempts, endGame()",
        "* Update the messageDisplay when the game is won",
        "* Update the messageDisplay when the game is won",
        "* ---- On Page Load ----",
        "* ---- Events ----"
    ],
    "functions": [],
    "classes": []
}