{
    "identifiers": [
        "fastapi",
        "FastAPI",
        "Form",
        "Query",
        "File",
        "UploadFile",
        "HTTPException",
        "fastapi",
        "middleware",
        "cors",
        "CORSMiddleware",
        "typing",
        "Optional",
        "pymysql",
        "shutil",
        "pathlib",
        "Path",
        "logging",
        "pydantic",
        "BaseModel",
        "fastapi",
        "responses",
        "HTMLResponse",
        "JSONResponse",
        "os",
        "dotenv",
        "load_dotenv",
        "openai",
        "OpenAIError",
        "openai",
        "FastAPI",
        "load_dotenv",
        "dotenv_path",
        "os",
        "getenv",
        "api_key",
        "logging",
        "basicConfig",
        "filename",
        "level",
        "logging",
        "INFO",
        "format",
        "app",
        "add_middleware",
        "CORSMiddleware",
        "allow_origins",
        "allow_credentials",
        "allow_methods",
        "allow_headers",
        "pymysql",
        "connect",
        "host",
        "port",
        "user",
        "password",
        "database",
        "charset",
        "cursorclass",
        "pymysql",
        "cursors",
        "DictCursor",
        "logging",
        "info",
        "connection",
        "pymysql",
        "MySQLError",
        "e",
        "logging",
        "error",
        "e",
        "HTTPException",
        "status_code",
        "detail",
        "app",
        "get",
        "logging",
        "info",
        "BaseModel",
        "app",
        "post",
        "signup_data",
        "SignUpData",
        "db_conn",
        "db",
        "cursor",
        "cursor",
        "cursor",
        "execute",
        "sql",
        "signup_data",
        "id",
        "signup_data",
        "name",
        "signup_data",
        "password",
        "signup_data",
        "email",
        "db",
        "commit",
        "pymysql",
        "MySQLError",
        "e",
        "db",
        "rollback",
        "HTTPException",
        "status_code",
        "detail",
        "e",
        "db",
        "close",
        "BaseModel",
        "app",
        "post",
        "login_data",
        "LoginData",
        "db_conn",
        "db",
        "cursor",
        "cursor",
        "cursor",
        "execute",
        "sql",
        "login_data",
        "id",
        "login_data",
        "password",
        "cursor",
        "fetchone",
        "result",
        "result",
        "HTTPException",
        "status_code",
        "detail",
        "pymysql",
        "MySQLError",
        "e",
        "HTTPException",
        "status_code",
        "detail",
        "e",
        "db",
        "close",
        "app",
        "post",
        "diary_content",
        "Form",
        "client",
        "chat",
        "completions",
        "create",
        "model",
        "messages",
        "diary_content",
        "temperature",
        "diary_content",
        "completion",
        "choices",
        "message",
        "content",
        "generated_content",
        "BaseModel",
        "app",
        "post",
        "diary_content",
        "DiaryContent",
        "diary_content",
        "openai",
        "ChatCompletion",
        "create",
        "model",
        "messages",
        "diary",
        "temperature",
        "diary",
        "text",
        "response",
        "choices",
        "message",
        "strip",
        "OpenAIError",
        "e",
        "HTTPException",
        "status_code",
        "detail",
        "e",
        "db_conn",
        "db",
        "cursor",
        "cursor",
        "cursor",
        "execute",
        "sql",
        "received_text",
        "db",
        "commit",
        "pymysql",
        "MySQLError",
        "e",
        "db",
        "rollback",
        "HTTPException",
        "status_code",
        "detail",
        "e",
        "db",
        "close",
        "received_text",
        "app",
        "get",
        "date",
        "Query",
        "db_conn",
        "db",
        "cursor",
        "cursor",
        "cursor",
        "execute",
        "sql",
        "date",
        "cursor",
        "fetchall",
        "results",
        "results",
        "HTTPException",
        "status_code",
        "detail",
        "pymysql",
        "MySQLError",
        "e",
        "logging",
        "error",
        "e",
        "HTTPException",
        "status_code",
        "detail",
        "e",
        "db",
        "close",
        "app",
        "get",
        "os",
        "environ",
        "get",
        "api_key"
    ],
    "literals": [
        "\"app/.env\"",
        "\"OPENAI_API_KEY\"",
        "\"app.log\"",
        "\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
        "\"*\"",
        "\"*\"",
        "\"*\"",
        "\"*\"",
        "'10.10.0.100'",
        "'team13'",
        "'1234'",
        "'team13'",
        "'utf8mb4'",
        "\"Database connection successful\"",
        "f\"Error connecting to the database: {e}\"",
        "\"Database connection failed\"",
        "\"/\"",
        "\"Root endpoint called\"",
        "\"name\"",
        "\"1234\"",
        "\"/signup\"",
        "f\"Database operation failed: {e}\"",
        "\"success\"",
        "\"회원가입이 완료되었습니다.\"",
        "\"/login\"",
        "\"success\"",
        "\"로그인 성공\"",
        "\"user\"",
        "\"Invalid credentials\"",
        "f\"Database operation failed: {e}\"",
        "\"/viewaitext\"",
        "\"gpt-3.5-turbo\"",
        "\"role\"",
        "\"user\"",
        "\"content\"",
        "f\"{diary_content} 라는 일기에 어울리는 이모지를 최대 4개까지 한줄에 출력해줘\"",
        "f\"{diary_content} \"",
        "\"/detail\"",
        "\"gpt-3.5-turbo\"",
        "\"role\"",
        "\"system\"",
        "\"content\"",
        "\"You are a helpful assistant.\"",
        "\"role\"",
        "\"user\"",
        "\"content\"",
        "f\"{diary} 라는 일기에 어울리는 이모지를 최대 4개까지 한 줄에 출력해줘. 이모지만 출력해야해.\"",
        "f\"{diary.text}\"",
        "'content'",
        "f\"OpenAI API 요청 실패: {e}\"",
        "f\"Database operation failed: {e}\"",
        "\"received_text\"",
        "\"/detail\"",
        "\"일기\"",
        "\"날짜에 해당하는 일기 찾기 실패\"",
        "f\"Database operation failed: {e}\"",
        "f\"Database operation failed: {e}\"",
        "\"/config\"",
        "\"OPENAI_API_KEY\""
    ],
    "variables": [
        "app",
        "dotenv_path",
        "api_key",
        "openai",
        "api_key",
        "origins",
        "connection",
        "id",
        "name",
        "password",
        "email",
        "db",
        "sql",
        "id",
        "password",
        "db",
        "sql",
        "result",
        "completion",
        "generated_content",
        "text",
        "diary",
        "response",
        "received_text",
        "db",
        "sql",
        "db",
        "sql",
        "results",
        "openai_api_key"
    ],
    "comments": [
        ".env 파일 로드",
        "API 키 가져오기",
        "API 키 설정",
        ".env 파일 로드",
        "BASE_DIR = os.path.dirname(os.path.abspath(__file__))",
        "load_dotenv(os.path.join(BASE_DIR, \".env\"))",
        "api_key = os.environ.get(\"OPENAI_API_KEY\")",
        "client = OpenAI(api_key=api_key)",
        "데이터베이스 오류 자세히 확인하기 위한 로깅 설정",
        "CORS 설정",
        "React 개발 서버 URL, * 표시하면 모두 허용",
        "허용할 출처를 설정",
        "cookie 포함 여부를 설정한다. 기본은 False",
        "허용할 method를 설정할 수 있으며, 기본값은 'GET'이다.",
        "허용할 http header 목록을 설정할 수 있으며 Content-Type, Accept, Accept-Language, Content-Language은 항상 허용된다.",
        "데이터 베이스에 저장 작업",
        "api_key = os.environ.get(\"OPENAI_API_KEY\")",
        "client = OpenAI(api_key=api_key)",
        "received_text = f\"{diary}\" + response.choices[0].message['content'].strip()"
    ],
    "docstrings": [
        "'''\n                INSERT INTO Member (id, name, password, email) \n                VALUES (%s, %s, UPPER(SHA1(UNHEX(SHA1(%s)))), %s)\n            '''",
        "'''\n                SELECT * FROM Member \n                WHERE id = %s AND password = UPPER(SHA1(UNHEX(SHA1(%s))))\n            '''",
        "'''\n                INSERT INTO Diary (detail) \n                VALUES (%s)\n            '''",
        "'''SELECT * FROM Diary WHERE DATE(date) = (%s)'''"
    ],
    "functions": [
        "db_conn",
        "read_root",
        "register",
        "login",
        "generated_content",
        "generated_content",
        "get_details",
        "config_endpoint"
    ],
    "classes": [
        "SignUpData",
        "LoginData",
        "DiaryContent"
    ]
}