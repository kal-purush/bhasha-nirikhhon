{
    "identifiers": [
        "Fragment",
        "size",
        "size",
        "free_memory",
        "free_memory",
        "size",
        "num_used_fragment",
        "find_best_fragment",
        "size",
        "best_fragment",
        "compaction",
        "find_best_fragment",
        "size",
        "best_fragment",
        "size",
        "size",
        "Fragment",
        "best_fragment",
        "size",
        "size",
        "best_fragment",
        "address",
        "size",
        "best_fragment",
        "best_fragment",
        "child",
        "best_fragment",
        "child",
        "best_fragment",
        "child",
        "new_fragment",
        "new_fragment",
        "size",
        "best_fragment",
        "address",
        "break_table",
        "size",
        "root_fragment",
        "fragment_candidate",
        "fragment_candidate",
        "is_free",
        "fragment_candidate",
        "size",
        "size",
        "fragment_candidate",
        "child",
        "fragment_candidate",
        "fragment_candidate",
        "fragment_candidate",
        "fragment_candidate",
        "is_free",
        "fragment_candidate",
        "size",
        "size",
        "fragment_candidate",
        "size",
        "best_fragment",
        "size",
        "fragment_candidate",
        "fragment_candidate",
        "child",
        "best_fragment",
        "address",
        "num_used_fragment",
        "root_fragment",
        "target_fragment",
        "address",
        "address",
        "target_fragment",
        "child",
        "free_memory",
        "target_fragment",
        "size",
        "target_fragment",
        "parent",
        "target_parent_fragment",
        "target_parent_fragment",
        "is_free",
        "target_parent_fragment",
        "size",
        "target_fragment",
        "size",
        "target_fragment",
        "child",
        "target_fragment",
        "child",
        "target_parent_fragment",
        "target_parent_fragment",
        "target_fragment",
        "child",
        "target_fragment",
        "child",
        "is_free",
        "target_fragment",
        "size",
        "target_fragment",
        "child",
        "size",
        "target_fragment",
        "child",
        "child",
        "target_fragment",
        "child",
        "target_fragment",
        "child",
        "target_fragment",
        "root_fragment",
        "target_free_fragment",
        "is_free",
        "target_free_fragment",
        "child",
        "target_free_fragment",
        "address",
        "target_free_fragment",
        "child",
        "target_allocated_fragment",
        "target_allocated_fragment",
        "is_free",
        "break_table",
        "append",
        "target_allocated_fragment",
        "address",
        "free_address",
        "free_address",
        "free_address",
        "target_allocated_fragment",
        "size",
        "target_allocated_fragment",
        "parent",
        "parent_fragment",
        "is_free",
        "parent_fragment",
        "parent",
        "parent_fragment",
        "parent",
        "target_allocated_fragment",
        "parent_fragment",
        "parent",
        "target_allocated_fragment",
        "target_allocated_fragment",
        "target_allocated_fragment",
        "child",
        "Fragment",
        "total_memory",
        "free_address",
        "free_address",
        "last_fragment",
        "new_free_fragment",
        "break_table",
        "num_used_fragment",
        "total_memory",
        "free_memory",
        "root_fragment",
        "fragment",
        "fragment",
        "fragment",
        "child",
        "size",
        "address",
        "is_free",
        "parent",
        "child",
        "size",
        "address",
        "is_free",
        "parent",
        "child",
        "format",
        "address",
        "size",
        "is_free",
        "parent",
        "return_str",
        "return_str",
        "parent",
        "address",
        "return_str"
    ],
    "literals": [
        "\"Out of memory\"",
        "\"Defragmentation operated\"",
        "'address : {}, size : {}, is_free : {}, parent : '",
        "'x'"
    ],
    "variables": [
        "total_memory",
        "free_memory",
        "num_used_fragment",
        "root_fragment",
        "best_fragment",
        "break_table",
        "break_table",
        "best_fragment",
        "new_fragment",
        "parent",
        "best_fragment",
        "child",
        "best_fragment",
        "size",
        "best_fragment",
        "is_free",
        "fragment_candidate",
        "best_fragment",
        "fragment_candidate",
        "best_fragment",
        "best_fragment",
        "fragment_candidate",
        "target_fragment",
        "target_fragment",
        "target_parent_fragment",
        "target_parent_fragment",
        "child",
        "parent",
        "target_fragment",
        "target_fragment",
        "child",
        "parent",
        "target_fragment",
        "is_free",
        "break_table",
        "target_free_fragment",
        "target_free_fragment",
        "free_address",
        "target_allocated_fragment",
        "target_allocated_fragment",
        "address",
        "parent_fragment",
        "child",
        "target_allocated_fragment",
        "parent",
        "target_allocated_fragment",
        "parent",
        "root_fragment",
        "last_fragment",
        "target_allocated_fragment",
        "new_free_fragment",
        "last_fragment",
        "child",
        "fragment",
        "fragment",
        "size",
        "address",
        "is_free",
        "parent",
        "child",
        "return_str"
    ],
    "comments": [
        "print('compaction')",
        "print('{} -> {}'.format(target_allocated_fragment.address, free_address))",
        "Update reference!",
        "if __name__ == '__main__':",
        "memory = Memory()",
        "while True:",
        "inp = input(\">> \").split()",
        "if len(inp) == 2:",
        "if inp[0] == 'malloc':",
        "memory.malloc(int(inp[1]))",
        "elif inp[0] == 'free':",
        "memory.free(int(inp[1]))",
        "elif len(inp) == 1:",
        "if inp[0] == 'mem':",
        "memory.mem()"
    ],
    "docstrings": [],
    "functions": [
        "malloc",
        "find_best_fragment",
        "free",
        "compaction",
        "mem",
        "__str__"
    ],
    "classes": [
        "Memory",
        "Fragment"
    ]
}